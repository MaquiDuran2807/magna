var dl=(e,t,n)=>{if(!t.has(e))throw TypeError("Cannot "+n)};var B=(e,t,n)=>(dl(e,t,"read from private field"),n?n.call(e):t.get(e)),se=(e,t,n)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,n)},re=(e,t,n,r)=>(dl(e,t,"write to private field"),r?r.call(e,n):t.set(e,n),n);var De=(e,t,n)=>(dl(e,t,"access private method"),n);function rm(e,t){for(var n=0;n<t.length;n++){const r=t[n];if(typeof r!="string"&&!Array.isArray(r)){for(const i in r)if(i!=="default"&&!(i in e)){const s=Object.getOwnPropertyDescriptor(r,i);s&&Object.defineProperty(e,i,s.get?s:{enumerable:!0,get:()=>r[i]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}var tk=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function im(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function nk(e){if(e.__esModule)return e;var t=e.default;if(typeof t=="function"){var n=function r(){return this instanceof r?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)};n.prototype=t.prototype}else n={};return Object.defineProperty(n,"__esModule",{value:!0}),Object.keys(e).forEach(function(r){var i=Object.getOwnPropertyDescriptor(e,r);Object.defineProperty(n,r,i.get?i:{enumerable:!0,get:function(){return e[r]}})}),n}var sm={exports:{}},ba={},om={exports:{}},te={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Ks=Symbol.for("react.element"),z0=Symbol.for("react.portal"),B0=Symbol.for("react.fragment"),j0=Symbol.for("react.strict_mode"),U0=Symbol.for("react.profiler"),$0=Symbol.for("react.provider"),H0=Symbol.for("react.context"),W0=Symbol.for("react.forward_ref"),G0=Symbol.for("react.suspense"),K0=Symbol.for("react.memo"),Q0=Symbol.for("react.lazy"),df=Symbol.iterator;function Y0(e){return e===null||typeof e!="object"?null:(e=df&&e[df]||e["@@iterator"],typeof e=="function"?e:null)}var am={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},lm=Object.assign,um={};function Ei(e,t,n){this.props=e,this.context=t,this.refs=um,this.updater=n||am}Ei.prototype.isReactComponent={};Ei.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};Ei.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function cm(){}cm.prototype=Ei.prototype;function Ac(e,t,n){this.props=e,this.context=t,this.refs=um,this.updater=n||am}var Oc=Ac.prototype=new cm;Oc.constructor=Ac;lm(Oc,Ei.prototype);Oc.isPureReactComponent=!0;var ff=Array.isArray,dm=Object.prototype.hasOwnProperty,Ic={current:null},fm={key:!0,ref:!0,__self:!0,__source:!0};function pm(e,t,n){var r,i={},s=null,o=null;if(t!=null)for(r in t.ref!==void 0&&(o=t.ref),t.key!==void 0&&(s=""+t.key),t)dm.call(t,r)&&!fm.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(l===1)i.children=n;else if(1<l){for(var a=Array(l),u=0;u<l;u++)a[u]=arguments[u+2];i.children=a}if(e&&e.defaultProps)for(r in l=e.defaultProps,l)i[r]===void 0&&(i[r]=l[r]);return{$$typeof:Ks,type:e,key:s,ref:o,props:i,_owner:Ic.current}}function X0(e,t){return{$$typeof:Ks,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function _c(e){return typeof e=="object"&&e!==null&&e.$$typeof===Ks}function q0(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(n){return t[n]})}var pf=/\/+/g;function fl(e,t){return typeof e=="object"&&e!==null&&e.key!=null?q0(""+e.key):t.toString(36)}function Oo(e,t,n,r,i){var s=typeof e;(s==="undefined"||s==="boolean")&&(e=null);var o=!1;if(e===null)o=!0;else switch(s){case"string":case"number":o=!0;break;case"object":switch(e.$$typeof){case Ks:case z0:o=!0}}if(o)return o=e,i=i(o),e=r===""?"."+fl(o,0):r,ff(i)?(n="",e!=null&&(n=e.replace(pf,"$&/")+"/"),Oo(i,t,n,"",function(u){return u})):i!=null&&(_c(i)&&(i=X0(i,n+(!i.key||o&&o.key===i.key?"":(""+i.key).replace(pf,"$&/")+"/")+e)),t.push(i)),1;if(o=0,r=r===""?".":r+":",ff(e))for(var l=0;l<e.length;l++){s=e[l];var a=r+fl(s,l);o+=Oo(s,t,n,a,i)}else if(a=Y0(e),typeof a=="function")for(e=a.call(e),l=0;!(s=e.next()).done;)s=s.value,a=r+fl(s,l++),o+=Oo(s,t,n,a,i);else if(s==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return o}function ao(e,t,n){if(e==null)return e;var r=[],i=0;return Oo(e,r,"","",function(s){return t.call(n,s,i++)}),r}function Z0(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var Ze={current:null},Io={transition:null},J0={ReactCurrentDispatcher:Ze,ReactCurrentBatchConfig:Io,ReactCurrentOwner:Ic};te.Children={map:ao,forEach:function(e,t,n){ao(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return ao(e,function(){t++}),t},toArray:function(e){return ao(e,function(t){return t})||[]},only:function(e){if(!_c(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};te.Component=Ei;te.Fragment=B0;te.Profiler=U0;te.PureComponent=Ac;te.StrictMode=j0;te.Suspense=G0;te.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=J0;te.cloneElement=function(e,t,n){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var r=lm({},e.props),i=e.key,s=e.ref,o=e._owner;if(t!=null){if(t.ref!==void 0&&(s=t.ref,o=Ic.current),t.key!==void 0&&(i=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(a in t)dm.call(t,a)&&!fm.hasOwnProperty(a)&&(r[a]=t[a]===void 0&&l!==void 0?l[a]:t[a])}var a=arguments.length-2;if(a===1)r.children=n;else if(1<a){l=Array(a);for(var u=0;u<a;u++)l[u]=arguments[u+2];r.children=l}return{$$typeof:Ks,type:e.type,key:i,ref:s,props:r,_owner:o}};te.createContext=function(e){return e={$$typeof:H0,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:$0,_context:e},e.Consumer=e};te.createElement=pm;te.createFactory=function(e){var t=pm.bind(null,e);return t.type=e,t};te.createRef=function(){return{current:null}};te.forwardRef=function(e){return{$$typeof:W0,render:e}};te.isValidElement=_c;te.lazy=function(e){return{$$typeof:Q0,_payload:{_status:-1,_result:e},_init:Z0}};te.memo=function(e,t){return{$$typeof:K0,type:e,compare:t===void 0?null:t}};te.startTransition=function(e){var t=Io.transition;Io.transition={};try{e()}finally{Io.transition=t}};te.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};te.useCallback=function(e,t){return Ze.current.useCallback(e,t)};te.useContext=function(e){return Ze.current.useContext(e)};te.useDebugValue=function(){};te.useDeferredValue=function(e){return Ze.current.useDeferredValue(e)};te.useEffect=function(e,t){return Ze.current.useEffect(e,t)};te.useId=function(){return Ze.current.useId()};te.useImperativeHandle=function(e,t,n){return Ze.current.useImperativeHandle(e,t,n)};te.useInsertionEffect=function(e,t){return Ze.current.useInsertionEffect(e,t)};te.useLayoutEffect=function(e,t){return Ze.current.useLayoutEffect(e,t)};te.useMemo=function(e,t){return Ze.current.useMemo(e,t)};te.useReducer=function(e,t,n){return Ze.current.useReducer(e,t,n)};te.useRef=function(e){return Ze.current.useRef(e)};te.useState=function(e){return Ze.current.useState(e)};te.useSyncExternalStore=function(e,t,n){return Ze.current.useSyncExternalStore(e,t,n)};te.useTransition=function(){return Ze.current.useTransition()};te.version="18.2.0";om.exports=te;var T=om.exports;const xe=im(T),ew=rm({__proto__:null,default:xe},[T]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var tw=T,nw=Symbol.for("react.element"),rw=Symbol.for("react.fragment"),iw=Object.prototype.hasOwnProperty,sw=tw.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,ow={key:!0,ref:!0,__self:!0,__source:!0};function hm(e,t,n){var r,i={},s=null,o=null;n!==void 0&&(s=""+n),t.key!==void 0&&(s=""+t.key),t.ref!==void 0&&(o=t.ref);for(r in t)iw.call(t,r)&&!ow.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps,t)i[r]===void 0&&(i[r]=t[r]);return{$$typeof:nw,type:e,key:s,ref:o,props:i,_owner:sw.current}}ba.Fragment=rw;ba.jsx=hm;ba.jsxs=hm;sm.exports=ba;var lo=sm.exports,mm={exports:{}},mt={},gm={exports:{}},vm={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(I,F){var z=I.length;I.push(F);e:for(;0<z;){var $=z-1>>>1,J=I[$];if(0<i(J,F))I[$]=F,I[z]=J,z=$;else break e}}function n(I){return I.length===0?null:I[0]}function r(I){if(I.length===0)return null;var F=I[0],z=I.pop();if(z!==F){I[0]=z;e:for(var $=0,J=I.length,lt=J>>>1;$<lt;){var Re=2*($+1)-1,et=I[Re],Pe=Re+1,Mt=I[Pe];if(0>i(et,z))Pe<J&&0>i(Mt,et)?(I[$]=Mt,I[Pe]=z,$=Pe):(I[$]=et,I[Re]=z,$=Re);else if(Pe<J&&0>i(Mt,z))I[$]=Mt,I[Pe]=z,$=Pe;else break e}}return F}function i(I,F){var z=I.sortIndex-F.sortIndex;return z!==0?z:I.id-F.id}if(typeof performance=="object"&&typeof performance.now=="function"){var s=performance;e.unstable_now=function(){return s.now()}}else{var o=Date,l=o.now();e.unstable_now=function(){return o.now()-l}}var a=[],u=[],c=1,d=null,p=3,g=!1,v=!1,y=!1,S=typeof setTimeout=="function"?setTimeout:null,m=typeof clearTimeout=="function"?clearTimeout:null,f=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function h(I){for(var F=n(u);F!==null;){if(F.callback===null)r(u);else if(F.startTime<=I)r(u),F.sortIndex=F.expirationTime,t(a,F);else break;F=n(u)}}function w(I){if(y=!1,h(I),!v)if(n(a)!==null)v=!0,U(E);else{var F=n(u);F!==null&&Y(w,F.startTime-I)}}function E(I,F){v=!1,y&&(y=!1,m(P),P=-1),g=!0;var z=p;try{for(h(F),d=n(a);d!==null&&(!(d.expirationTime>F)||I&&!O());){var $=d.callback;if(typeof $=="function"){d.callback=null,p=d.priorityLevel;var J=$(d.expirationTime<=F);F=e.unstable_now(),typeof J=="function"?d.callback=J:d===n(a)&&r(a),h(F)}else r(a);d=n(a)}if(d!==null)var lt=!0;else{var Re=n(u);Re!==null&&Y(w,Re.startTime-F),lt=!1}return lt}finally{d=null,p=z,g=!1}}var x=!1,C=null,P=-1,k=5,R=-1;function O(){return!(e.unstable_now()-R<k)}function N(){if(C!==null){var I=e.unstable_now();R=I;var F=!0;try{F=C(!0,I)}finally{F?_():(x=!1,C=null)}}else x=!1}var _;if(typeof f=="function")_=function(){f(N)};else if(typeof MessageChannel<"u"){var M=new MessageChannel,b=M.port2;M.port1.onmessage=N,_=function(){b.postMessage(null)}}else _=function(){S(N,0)};function U(I){C=I,x||(x=!0,_())}function Y(I,F){P=S(function(){I(e.unstable_now())},F)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(I){I.callback=null},e.unstable_continueExecution=function(){v||g||(v=!0,U(E))},e.unstable_forceFrameRate=function(I){0>I||125<I?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):k=0<I?Math.floor(1e3/I):5},e.unstable_getCurrentPriorityLevel=function(){return p},e.unstable_getFirstCallbackNode=function(){return n(a)},e.unstable_next=function(I){switch(p){case 1:case 2:case 3:var F=3;break;default:F=p}var z=p;p=F;try{return I()}finally{p=z}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(I,F){switch(I){case 1:case 2:case 3:case 4:case 5:break;default:I=3}var z=p;p=I;try{return F()}finally{p=z}},e.unstable_scheduleCallback=function(I,F,z){var $=e.unstable_now();switch(typeof z=="object"&&z!==null?(z=z.delay,z=typeof z=="number"&&0<z?$+z:$):z=$,I){case 1:var J=-1;break;case 2:J=250;break;case 5:J=1073741823;break;case 4:J=1e4;break;default:J=5e3}return J=z+J,I={id:c++,callback:F,priorityLevel:I,startTime:z,expirationTime:J,sortIndex:-1},z>$?(I.sortIndex=z,t(u,I),n(a)===null&&I===n(u)&&(y?(m(P),P=-1):y=!0,Y(w,z-$))):(I.sortIndex=J,t(a,I),v||g||(v=!0,U(E))),I},e.unstable_shouldYield=O,e.unstable_wrapCallback=function(I){var F=p;return function(){var z=p;p=F;try{return I.apply(this,arguments)}finally{p=z}}}})(vm);gm.exports=vm;var aw=gm.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var ym=T,pt=aw;function V(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var wm=new Set,ps={};function Pr(e,t){fi(e,t),fi(e+"Capture",t)}function fi(e,t){for(ps[e]=t,e=0;e<t.length;e++)wm.add(t[e])}var sn=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),su=Object.prototype.hasOwnProperty,lw=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,hf={},mf={};function uw(e){return su.call(mf,e)?!0:su.call(hf,e)?!1:lw.test(e)?mf[e]=!0:(hf[e]=!0,!1)}function cw(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function dw(e,t,n,r){if(t===null||typeof t>"u"||cw(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Je(e,t,n,r,i,s,o){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=o}var Ue={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Ue[e]=new Je(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Ue[t]=new Je(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Ue[e]=new Je(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Ue[e]=new Je(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Ue[e]=new Je(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Ue[e]=new Je(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Ue[e]=new Je(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Ue[e]=new Je(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Ue[e]=new Je(e,5,!1,e.toLowerCase(),null,!1,!1)});var Vc=/[\-:]([a-z])/g;function Fc(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Vc,Fc);Ue[t]=new Je(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Vc,Fc);Ue[t]=new Je(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Vc,Fc);Ue[t]=new Je(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Ue[e]=new Je(e,1,!1,e.toLowerCase(),null,!1,!1)});Ue.xlinkHref=new Je("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Ue[e]=new Je(e,1,!1,e.toLowerCase(),null,!0,!0)});function Nc(e,t,n,r){var i=Ue.hasOwnProperty(t)?Ue[t]:null;(i!==null?i.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(dw(t,n,i,r)&&(n=null),r||i===null?uw(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=n===null?i.type===3?!1:"":n:(t=i.attributeName,r=i.attributeNamespace,n===null?e.removeAttribute(t):(i=i.type,n=i===3||i===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var dn=ym.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,uo=Symbol.for("react.element"),Ir=Symbol.for("react.portal"),_r=Symbol.for("react.fragment"),zc=Symbol.for("react.strict_mode"),ou=Symbol.for("react.profiler"),Sm=Symbol.for("react.provider"),xm=Symbol.for("react.context"),Bc=Symbol.for("react.forward_ref"),au=Symbol.for("react.suspense"),lu=Symbol.for("react.suspense_list"),jc=Symbol.for("react.memo"),xn=Symbol.for("react.lazy"),Em=Symbol.for("react.offscreen"),gf=Symbol.iterator;function bi(e){return e===null||typeof e!="object"?null:(e=gf&&e[gf]||e["@@iterator"],typeof e=="function"?e:null)}var we=Object.assign,pl;function Gi(e){if(pl===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);pl=t&&t[1]||""}return`
`+pl+e}var hl=!1;function ml(e,t){if(!e||hl)return"";hl=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(u){var r=u}Reflect.construct(e,[],t)}else{try{t.call()}catch(u){r=u}e.call(t.prototype)}else{try{throw Error()}catch(u){r=u}e()}}catch(u){if(u&&r&&typeof u.stack=="string"){for(var i=u.stack.split(`
`),s=r.stack.split(`
`),o=i.length-1,l=s.length-1;1<=o&&0<=l&&i[o]!==s[l];)l--;for(;1<=o&&0<=l;o--,l--)if(i[o]!==s[l]){if(o!==1||l!==1)do if(o--,l--,0>l||i[o]!==s[l]){var a=`
`+i[o].replace(" at new "," at ");return e.displayName&&a.includes("<anonymous>")&&(a=a.replace("<anonymous>",e.displayName)),a}while(1<=o&&0<=l);break}}}finally{hl=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Gi(e):""}function fw(e){switch(e.tag){case 5:return Gi(e.type);case 16:return Gi("Lazy");case 13:return Gi("Suspense");case 19:return Gi("SuspenseList");case 0:case 2:case 15:return e=ml(e.type,!1),e;case 11:return e=ml(e.type.render,!1),e;case 1:return e=ml(e.type,!0),e;default:return""}}function uu(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case _r:return"Fragment";case Ir:return"Portal";case ou:return"Profiler";case zc:return"StrictMode";case au:return"Suspense";case lu:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case xm:return(e.displayName||"Context")+".Consumer";case Sm:return(e._context.displayName||"Context")+".Provider";case Bc:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case jc:return t=e.displayName||null,t!==null?t:uu(e.type)||"Memo";case xn:t=e._payload,e=e._init;try{return uu(e(t))}catch{}}return null}function pw(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return uu(t);case 8:return t===zc?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function $n(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function Tm(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function hw(e){var t=Tm(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var i=n.get,s=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(o){r=""+o,s.call(this,o)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(o){r=""+o},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function co(e){e._valueTracker||(e._valueTracker=hw(e))}function Cm(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Tm(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function Qo(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function cu(e,t){var n=t.checked;return we({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function vf(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=$n(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Pm(e,t){t=t.checked,t!=null&&Nc(e,"checked",t,!1)}function du(e,t){Pm(e,t);var n=$n(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?fu(e,t.type,n):t.hasOwnProperty("defaultValue")&&fu(e,t.type,$n(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function yf(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function fu(e,t,n){(t!=="number"||Qo(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Ki=Array.isArray;function Zr(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+$n(n),t=null,i=0;i<e.length;i++){if(e[i].value===n){e[i].selected=!0,r&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function pu(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(V(91));return we({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function wf(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(V(92));if(Ki(n)){if(1<n.length)throw Error(V(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:$n(n)}}function Lm(e,t){var n=$n(t.value),r=$n(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function Sf(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Mm(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function hu(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Mm(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var fo,km=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,i)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(fo=fo||document.createElement("div"),fo.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=fo.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function hs(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Zi={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},mw=["Webkit","ms","Moz","O"];Object.keys(Zi).forEach(function(e){mw.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zi[t]=Zi[e]})});function Rm(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||Zi.hasOwnProperty(e)&&Zi[e]?(""+t).trim():t+"px"}function Dm(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,i=Rm(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}var gw=we({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function mu(e,t){if(t){if(gw[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(V(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(V(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(V(61))}if(t.style!=null&&typeof t.style!="object")throw Error(V(62))}}function gu(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var vu=null;function Uc(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var yu=null,Jr=null,ei=null;function xf(e){if(e=Xs(e)){if(typeof yu!="function")throw Error(V(280));var t=e.stateNode;t&&(t=Va(t),yu(e.stateNode,e.type,t))}}function bm(e){Jr?ei?ei.push(e):ei=[e]:Jr=e}function Am(){if(Jr){var e=Jr,t=ei;if(ei=Jr=null,xf(e),t)for(e=0;e<t.length;e++)xf(t[e])}}function Om(e,t){return e(t)}function Im(){}var gl=!1;function _m(e,t,n){if(gl)return e(t,n);gl=!0;try{return Om(e,t,n)}finally{gl=!1,(Jr!==null||ei!==null)&&(Im(),Am())}}function ms(e,t){var n=e.stateNode;if(n===null)return null;var r=Va(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(V(231,t,typeof n));return n}var wu=!1;if(sn)try{var Ai={};Object.defineProperty(Ai,"passive",{get:function(){wu=!0}}),window.addEventListener("test",Ai,Ai),window.removeEventListener("test",Ai,Ai)}catch{wu=!1}function vw(e,t,n,r,i,s,o,l,a){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(c){this.onError(c)}}var Ji=!1,Yo=null,Xo=!1,Su=null,yw={onError:function(e){Ji=!0,Yo=e}};function ww(e,t,n,r,i,s,o,l,a){Ji=!1,Yo=null,vw.apply(yw,arguments)}function Sw(e,t,n,r,i,s,o,l,a){if(ww.apply(this,arguments),Ji){if(Ji){var u=Yo;Ji=!1,Yo=null}else throw Error(V(198));Xo||(Xo=!0,Su=u)}}function Lr(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function Vm(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Ef(e){if(Lr(e)!==e)throw Error(V(188))}function xw(e){var t=e.alternate;if(!t){if(t=Lr(e),t===null)throw Error(V(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(i===null)break;var s=i.alternate;if(s===null){if(r=i.return,r!==null){n=r;continue}break}if(i.child===s.child){for(s=i.child;s;){if(s===n)return Ef(i),e;if(s===r)return Ef(i),t;s=s.sibling}throw Error(V(188))}if(n.return!==r.return)n=i,r=s;else{for(var o=!1,l=i.child;l;){if(l===n){o=!0,n=i,r=s;break}if(l===r){o=!0,r=i,n=s;break}l=l.sibling}if(!o){for(l=s.child;l;){if(l===n){o=!0,n=s,r=i;break}if(l===r){o=!0,r=s,n=i;break}l=l.sibling}if(!o)throw Error(V(189))}}if(n.alternate!==r)throw Error(V(190))}if(n.tag!==3)throw Error(V(188));return n.stateNode.current===n?e:t}function Fm(e){return e=xw(e),e!==null?Nm(e):null}function Nm(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=Nm(e);if(t!==null)return t;e=e.sibling}return null}var zm=pt.unstable_scheduleCallback,Tf=pt.unstable_cancelCallback,Ew=pt.unstable_shouldYield,Tw=pt.unstable_requestPaint,ke=pt.unstable_now,Cw=pt.unstable_getCurrentPriorityLevel,$c=pt.unstable_ImmediatePriority,Bm=pt.unstable_UserBlockingPriority,qo=pt.unstable_NormalPriority,Pw=pt.unstable_LowPriority,jm=pt.unstable_IdlePriority,Aa=null,$t=null;function Lw(e){if($t&&typeof $t.onCommitFiberRoot=="function")try{$t.onCommitFiberRoot(Aa,e,void 0,(e.current.flags&128)===128)}catch{}}var Ot=Math.clz32?Math.clz32:Rw,Mw=Math.log,kw=Math.LN2;function Rw(e){return e>>>=0,e===0?32:31-(Mw(e)/kw|0)|0}var po=64,ho=4194304;function Qi(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Zo(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,i=e.suspendedLanes,s=e.pingedLanes,o=n&268435455;if(o!==0){var l=o&~i;l!==0?r=Qi(l):(s&=o,s!==0&&(r=Qi(s)))}else o=n&~i,o!==0?r=Qi(o):s!==0&&(r=Qi(s));if(r===0)return 0;if(t!==0&&t!==r&&!(t&i)&&(i=r&-r,s=t&-t,i>=s||i===16&&(s&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Ot(t),i=1<<n,r|=e[n],t&=~i;return r}function Dw(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function bw(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var o=31-Ot(s),l=1<<o,a=i[o];a===-1?(!(l&n)||l&r)&&(i[o]=Dw(l,t)):a<=t&&(e.expiredLanes|=l),s&=~l}}function xu(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function Um(){var e=po;return po<<=1,!(po&4194240)&&(po=64),e}function vl(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Qs(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Ot(t),e[t]=n}function Aw(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-Ot(n),s=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~s}}function Hc(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Ot(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var oe=0;function $m(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var Hm,Wc,Wm,Gm,Km,Eu=!1,mo=[],On=null,In=null,_n=null,gs=new Map,vs=new Map,Cn=[],Ow="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Cf(e,t){switch(e){case"focusin":case"focusout":On=null;break;case"dragenter":case"dragleave":In=null;break;case"mouseover":case"mouseout":_n=null;break;case"pointerover":case"pointerout":gs.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":vs.delete(t.pointerId)}}function Oi(e,t,n,r,i,s){return e===null||e.nativeEvent!==s?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:s,targetContainers:[i]},t!==null&&(t=Xs(t),t!==null&&Wc(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function Iw(e,t,n,r,i){switch(t){case"focusin":return On=Oi(On,e,t,n,r,i),!0;case"dragenter":return In=Oi(In,e,t,n,r,i),!0;case"mouseover":return _n=Oi(_n,e,t,n,r,i),!0;case"pointerover":var s=i.pointerId;return gs.set(s,Oi(gs.get(s)||null,e,t,n,r,i)),!0;case"gotpointercapture":return s=i.pointerId,vs.set(s,Oi(vs.get(s)||null,e,t,n,r,i)),!0}return!1}function Qm(e){var t=ir(e.target);if(t!==null){var n=Lr(t);if(n!==null){if(t=n.tag,t===13){if(t=Vm(n),t!==null){e.blockedOn=t,Km(e.priority,function(){Wm(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function _o(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=Tu(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);vu=r,n.target.dispatchEvent(r),vu=null}else return t=Xs(n),t!==null&&Wc(t),e.blockedOn=n,!1;t.shift()}return!0}function Pf(e,t,n){_o(e)&&n.delete(t)}function _w(){Eu=!1,On!==null&&_o(On)&&(On=null),In!==null&&_o(In)&&(In=null),_n!==null&&_o(_n)&&(_n=null),gs.forEach(Pf),vs.forEach(Pf)}function Ii(e,t){e.blockedOn===t&&(e.blockedOn=null,Eu||(Eu=!0,pt.unstable_scheduleCallback(pt.unstable_NormalPriority,_w)))}function ys(e){function t(i){return Ii(i,e)}if(0<mo.length){Ii(mo[0],e);for(var n=1;n<mo.length;n++){var r=mo[n];r.blockedOn===e&&(r.blockedOn=null)}}for(On!==null&&Ii(On,e),In!==null&&Ii(In,e),_n!==null&&Ii(_n,e),gs.forEach(t),vs.forEach(t),n=0;n<Cn.length;n++)r=Cn[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<Cn.length&&(n=Cn[0],n.blockedOn===null);)Qm(n),n.blockedOn===null&&Cn.shift()}var ti=dn.ReactCurrentBatchConfig,Jo=!0;function Vw(e,t,n,r){var i=oe,s=ti.transition;ti.transition=null;try{oe=1,Gc(e,t,n,r)}finally{oe=i,ti.transition=s}}function Fw(e,t,n,r){var i=oe,s=ti.transition;ti.transition=null;try{oe=4,Gc(e,t,n,r)}finally{oe=i,ti.transition=s}}function Gc(e,t,n,r){if(Jo){var i=Tu(e,t,n,r);if(i===null)Ml(e,t,r,ea,n),Cf(e,r);else if(Iw(i,e,t,n,r))r.stopPropagation();else if(Cf(e,r),t&4&&-1<Ow.indexOf(e)){for(;i!==null;){var s=Xs(i);if(s!==null&&Hm(s),s=Tu(e,t,n,r),s===null&&Ml(e,t,r,ea,n),s===i)break;i=s}i!==null&&r.stopPropagation()}else Ml(e,t,r,null,n)}}var ea=null;function Tu(e,t,n,r){if(ea=null,e=Uc(r),e=ir(e),e!==null)if(t=Lr(e),t===null)e=null;else if(n=t.tag,n===13){if(e=Vm(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return ea=e,null}function Ym(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Cw()){case $c:return 1;case Bm:return 4;case qo:case Pw:return 16;case jm:return 536870912;default:return 16}default:return 16}}var Dn=null,Kc=null,Vo=null;function Xm(){if(Vo)return Vo;var e,t=Kc,n=t.length,r,i="value"in Dn?Dn.value:Dn.textContent,s=i.length;for(e=0;e<n&&t[e]===i[e];e++);var o=n-e;for(r=1;r<=o&&t[n-r]===i[s-r];r++);return Vo=i.slice(e,1<r?1-r:void 0)}function Fo(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function go(){return!0}function Lf(){return!1}function gt(e){function t(n,r,i,s,o){this._reactName=n,this._targetInst=i,this.type=r,this.nativeEvent=s,this.target=o,this.currentTarget=null;for(var l in e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(s):s[l]);return this.isDefaultPrevented=(s.defaultPrevented!=null?s.defaultPrevented:s.returnValue===!1)?go:Lf,this.isPropagationStopped=Lf,this}return we(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=go)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=go)},persist:function(){},isPersistent:go}),t}var Ti={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},Qc=gt(Ti),Ys=we({},Ti,{view:0,detail:0}),Nw=gt(Ys),yl,wl,_i,Oa=we({},Ys,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Yc,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==_i&&(_i&&e.type==="mousemove"?(yl=e.screenX-_i.screenX,wl=e.screenY-_i.screenY):wl=yl=0,_i=e),yl)},movementY:function(e){return"movementY"in e?e.movementY:wl}}),Mf=gt(Oa),zw=we({},Oa,{dataTransfer:0}),Bw=gt(zw),jw=we({},Ys,{relatedTarget:0}),Sl=gt(jw),Uw=we({},Ti,{animationName:0,elapsedTime:0,pseudoElement:0}),$w=gt(Uw),Hw=we({},Ti,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Ww=gt(Hw),Gw=we({},Ti,{data:0}),kf=gt(Gw),Kw={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Qw={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Yw={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Xw(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=Yw[e])?!!t[e]:!1}function Yc(){return Xw}var qw=we({},Ys,{key:function(e){if(e.key){var t=Kw[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Fo(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Qw[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Yc,charCode:function(e){return e.type==="keypress"?Fo(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Fo(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Zw=gt(qw),Jw=we({},Oa,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Rf=gt(Jw),eS=we({},Ys,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Yc}),tS=gt(eS),nS=we({},Ti,{propertyName:0,elapsedTime:0,pseudoElement:0}),rS=gt(nS),iS=we({},Oa,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),sS=gt(iS),oS=[9,13,27,32],Xc=sn&&"CompositionEvent"in window,es=null;sn&&"documentMode"in document&&(es=document.documentMode);var aS=sn&&"TextEvent"in window&&!es,qm=sn&&(!Xc||es&&8<es&&11>=es),Df=String.fromCharCode(32),bf=!1;function Zm(e,t){switch(e){case"keyup":return oS.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Jm(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var Vr=!1;function lS(e,t){switch(e){case"compositionend":return Jm(t);case"keypress":return t.which!==32?null:(bf=!0,Df);case"textInput":return e=t.data,e===Df&&bf?null:e;default:return null}}function uS(e,t){if(Vr)return e==="compositionend"||!Xc&&Zm(e,t)?(e=Xm(),Vo=Kc=Dn=null,Vr=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return qm&&t.locale!=="ko"?null:t.data;default:return null}}var cS={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Af(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!cS[e.type]:t==="textarea"}function eg(e,t,n,r){bm(r),t=ta(t,"onChange"),0<t.length&&(n=new Qc("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var ts=null,ws=null;function dS(e){dg(e,0)}function Ia(e){var t=zr(e);if(Cm(t))return e}function fS(e,t){if(e==="change")return t}var tg=!1;if(sn){var xl;if(sn){var El="oninput"in document;if(!El){var Of=document.createElement("div");Of.setAttribute("oninput","return;"),El=typeof Of.oninput=="function"}xl=El}else xl=!1;tg=xl&&(!document.documentMode||9<document.documentMode)}function If(){ts&&(ts.detachEvent("onpropertychange",ng),ws=ts=null)}function ng(e){if(e.propertyName==="value"&&Ia(ws)){var t=[];eg(t,ws,e,Uc(e)),_m(dS,t)}}function pS(e,t,n){e==="focusin"?(If(),ts=t,ws=n,ts.attachEvent("onpropertychange",ng)):e==="focusout"&&If()}function hS(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return Ia(ws)}function mS(e,t){if(e==="click")return Ia(t)}function gS(e,t){if(e==="input"||e==="change")return Ia(t)}function vS(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var _t=typeof Object.is=="function"?Object.is:vS;function Ss(e,t){if(_t(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!su.call(t,i)||!_t(e[i],t[i]))return!1}return!0}function _f(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Vf(e,t){var n=_f(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=_f(n)}}function rg(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?rg(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function ig(){for(var e=window,t=Qo();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=Qo(e.document)}return t}function qc(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function yS(e){var t=ig(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&rg(n.ownerDocument.documentElement,n)){if(r!==null&&qc(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=n.textContent.length,s=Math.min(r.start,i);r=r.end===void 0?s:Math.min(r.end,i),!e.extend&&s>r&&(i=r,r=s,s=i),i=Vf(n,s);var o=Vf(n,r);i&&o&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),s>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var wS=sn&&"documentMode"in document&&11>=document.documentMode,Fr=null,Cu=null,ns=null,Pu=!1;function Ff(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;Pu||Fr==null||Fr!==Qo(r)||(r=Fr,"selectionStart"in r&&qc(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),ns&&Ss(ns,r)||(ns=r,r=ta(Cu,"onSelect"),0<r.length&&(t=new Qc("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Fr)))}function vo(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Nr={animationend:vo("Animation","AnimationEnd"),animationiteration:vo("Animation","AnimationIteration"),animationstart:vo("Animation","AnimationStart"),transitionend:vo("Transition","TransitionEnd")},Tl={},sg={};sn&&(sg=document.createElement("div").style,"AnimationEvent"in window||(delete Nr.animationend.animation,delete Nr.animationiteration.animation,delete Nr.animationstart.animation),"TransitionEvent"in window||delete Nr.transitionend.transition);function _a(e){if(Tl[e])return Tl[e];if(!Nr[e])return e;var t=Nr[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in sg)return Tl[e]=t[n];return e}var og=_a("animationend"),ag=_a("animationiteration"),lg=_a("animationstart"),ug=_a("transitionend"),cg=new Map,Nf="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Kn(e,t){cg.set(e,t),Pr(t,[e])}for(var Cl=0;Cl<Nf.length;Cl++){var Pl=Nf[Cl],SS=Pl.toLowerCase(),xS=Pl[0].toUpperCase()+Pl.slice(1);Kn(SS,"on"+xS)}Kn(og,"onAnimationEnd");Kn(ag,"onAnimationIteration");Kn(lg,"onAnimationStart");Kn("dblclick","onDoubleClick");Kn("focusin","onFocus");Kn("focusout","onBlur");Kn(ug,"onTransitionEnd");fi("onMouseEnter",["mouseout","mouseover"]);fi("onMouseLeave",["mouseout","mouseover"]);fi("onPointerEnter",["pointerout","pointerover"]);fi("onPointerLeave",["pointerout","pointerover"]);Pr("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));Pr("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));Pr("onBeforeInput",["compositionend","keypress","textInput","paste"]);Pr("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));Pr("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));Pr("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Yi="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ES=new Set("cancel close invalid load scroll toggle".split(" ").concat(Yi));function zf(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,Sw(r,t,void 0,e),e.currentTarget=null}function dg(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var s=void 0;if(t)for(var o=r.length-1;0<=o;o--){var l=r[o],a=l.instance,u=l.currentTarget;if(l=l.listener,a!==s&&i.isPropagationStopped())break e;zf(i,l,u),s=a}else for(o=0;o<r.length;o++){if(l=r[o],a=l.instance,u=l.currentTarget,l=l.listener,a!==s&&i.isPropagationStopped())break e;zf(i,l,u),s=a}}}if(Xo)throw e=Su,Xo=!1,Su=null,e}function ce(e,t){var n=t[Du];n===void 0&&(n=t[Du]=new Set);var r=e+"__bubble";n.has(r)||(fg(t,e,2,!1),n.add(r))}function Ll(e,t,n){var r=0;t&&(r|=4),fg(n,e,r,t)}var yo="_reactListening"+Math.random().toString(36).slice(2);function xs(e){if(!e[yo]){e[yo]=!0,wm.forEach(function(n){n!=="selectionchange"&&(ES.has(n)||Ll(n,!1,e),Ll(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[yo]||(t[yo]=!0,Ll("selectionchange",!1,t))}}function fg(e,t,n,r){switch(Ym(t)){case 1:var i=Vw;break;case 4:i=Fw;break;default:i=Gc}n=i.bind(null,t,n,e),i=void 0,!wu||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(i=!0),r?i!==void 0?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):i!==void 0?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Ml(e,t,n,r,i){var s=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var o=r.tag;if(o===3||o===4){var l=r.stateNode.containerInfo;if(l===i||l.nodeType===8&&l.parentNode===i)break;if(o===4)for(o=r.return;o!==null;){var a=o.tag;if((a===3||a===4)&&(a=o.stateNode.containerInfo,a===i||a.nodeType===8&&a.parentNode===i))return;o=o.return}for(;l!==null;){if(o=ir(l),o===null)return;if(a=o.tag,a===5||a===6){r=s=o;continue e}l=l.parentNode}}r=r.return}_m(function(){var u=s,c=Uc(n),d=[];e:{var p=cg.get(e);if(p!==void 0){var g=Qc,v=e;switch(e){case"keypress":if(Fo(n)===0)break e;case"keydown":case"keyup":g=Zw;break;case"focusin":v="focus",g=Sl;break;case"focusout":v="blur",g=Sl;break;case"beforeblur":case"afterblur":g=Sl;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":g=Mf;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":g=Bw;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":g=tS;break;case og:case ag:case lg:g=$w;break;case ug:g=rS;break;case"scroll":g=Nw;break;case"wheel":g=sS;break;case"copy":case"cut":case"paste":g=Ww;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":g=Rf}var y=(t&4)!==0,S=!y&&e==="scroll",m=y?p!==null?p+"Capture":null:p;y=[];for(var f=u,h;f!==null;){h=f;var w=h.stateNode;if(h.tag===5&&w!==null&&(h=w,m!==null&&(w=ms(f,m),w!=null&&y.push(Es(f,w,h)))),S)break;f=f.return}0<y.length&&(p=new g(p,v,null,n,c),d.push({event:p,listeners:y}))}}if(!(t&7)){e:{if(p=e==="mouseover"||e==="pointerover",g=e==="mouseout"||e==="pointerout",p&&n!==vu&&(v=n.relatedTarget||n.fromElement)&&(ir(v)||v[on]))break e;if((g||p)&&(p=c.window===c?c:(p=c.ownerDocument)?p.defaultView||p.parentWindow:window,g?(v=n.relatedTarget||n.toElement,g=u,v=v?ir(v):null,v!==null&&(S=Lr(v),v!==S||v.tag!==5&&v.tag!==6)&&(v=null)):(g=null,v=u),g!==v)){if(y=Mf,w="onMouseLeave",m="onMouseEnter",f="mouse",(e==="pointerout"||e==="pointerover")&&(y=Rf,w="onPointerLeave",m="onPointerEnter",f="pointer"),S=g==null?p:zr(g),h=v==null?p:zr(v),p=new y(w,f+"leave",g,n,c),p.target=S,p.relatedTarget=h,w=null,ir(c)===u&&(y=new y(m,f+"enter",v,n,c),y.target=h,y.relatedTarget=S,w=y),S=w,g&&v)t:{for(y=g,m=v,f=0,h=y;h;h=Or(h))f++;for(h=0,w=m;w;w=Or(w))h++;for(;0<f-h;)y=Or(y),f--;for(;0<h-f;)m=Or(m),h--;for(;f--;){if(y===m||m!==null&&y===m.alternate)break t;y=Or(y),m=Or(m)}y=null}else y=null;g!==null&&Bf(d,p,g,y,!1),v!==null&&S!==null&&Bf(d,S,v,y,!0)}}e:{if(p=u?zr(u):window,g=p.nodeName&&p.nodeName.toLowerCase(),g==="select"||g==="input"&&p.type==="file")var E=fS;else if(Af(p))if(tg)E=gS;else{E=hS;var x=pS}else(g=p.nodeName)&&g.toLowerCase()==="input"&&(p.type==="checkbox"||p.type==="radio")&&(E=mS);if(E&&(E=E(e,u))){eg(d,E,n,c);break e}x&&x(e,p,u),e==="focusout"&&(x=p._wrapperState)&&x.controlled&&p.type==="number"&&fu(p,"number",p.value)}switch(x=u?zr(u):window,e){case"focusin":(Af(x)||x.contentEditable==="true")&&(Fr=x,Cu=u,ns=null);break;case"focusout":ns=Cu=Fr=null;break;case"mousedown":Pu=!0;break;case"contextmenu":case"mouseup":case"dragend":Pu=!1,Ff(d,n,c);break;case"selectionchange":if(wS)break;case"keydown":case"keyup":Ff(d,n,c)}var C;if(Xc)e:{switch(e){case"compositionstart":var P="onCompositionStart";break e;case"compositionend":P="onCompositionEnd";break e;case"compositionupdate":P="onCompositionUpdate";break e}P=void 0}else Vr?Zm(e,n)&&(P="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(P="onCompositionStart");P&&(qm&&n.locale!=="ko"&&(Vr||P!=="onCompositionStart"?P==="onCompositionEnd"&&Vr&&(C=Xm()):(Dn=c,Kc="value"in Dn?Dn.value:Dn.textContent,Vr=!0)),x=ta(u,P),0<x.length&&(P=new kf(P,e,null,n,c),d.push({event:P,listeners:x}),C?P.data=C:(C=Jm(n),C!==null&&(P.data=C)))),(C=aS?lS(e,n):uS(e,n))&&(u=ta(u,"onBeforeInput"),0<u.length&&(c=new kf("onBeforeInput","beforeinput",null,n,c),d.push({event:c,listeners:u}),c.data=C))}dg(d,t)})}function Es(e,t,n){return{instance:e,listener:t,currentTarget:n}}function ta(e,t){for(var n=t+"Capture",r=[];e!==null;){var i=e,s=i.stateNode;i.tag===5&&s!==null&&(i=s,s=ms(e,n),s!=null&&r.unshift(Es(e,s,i)),s=ms(e,t),s!=null&&r.push(Es(e,s,i))),e=e.return}return r}function Or(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Bf(e,t,n,r,i){for(var s=t._reactName,o=[];n!==null&&n!==r;){var l=n,a=l.alternate,u=l.stateNode;if(a!==null&&a===r)break;l.tag===5&&u!==null&&(l=u,i?(a=ms(n,s),a!=null&&o.unshift(Es(n,a,l))):i||(a=ms(n,s),a!=null&&o.push(Es(n,a,l)))),n=n.return}o.length!==0&&e.push({event:t,listeners:o})}var TS=/\r\n?/g,CS=/\u0000|\uFFFD/g;function jf(e){return(typeof e=="string"?e:""+e).replace(TS,`
`).replace(CS,"")}function wo(e,t,n){if(t=jf(t),jf(e)!==t&&n)throw Error(V(425))}function na(){}var Lu=null,Mu=null;function ku(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Ru=typeof setTimeout=="function"?setTimeout:void 0,PS=typeof clearTimeout=="function"?clearTimeout:void 0,Uf=typeof Promise=="function"?Promise:void 0,LS=typeof queueMicrotask=="function"?queueMicrotask:typeof Uf<"u"?function(e){return Uf.resolve(null).then(e).catch(MS)}:Ru;function MS(e){setTimeout(function(){throw e})}function kl(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&i.nodeType===8)if(n=i.data,n==="/$"){if(r===0){e.removeChild(i),ys(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=i}while(n);ys(t)}function Vn(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function $f(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var Ci=Math.random().toString(36).slice(2),jt="__reactFiber$"+Ci,Ts="__reactProps$"+Ci,on="__reactContainer$"+Ci,Du="__reactEvents$"+Ci,kS="__reactListeners$"+Ci,RS="__reactHandles$"+Ci;function ir(e){var t=e[jt];if(t)return t;for(var n=e.parentNode;n;){if(t=n[on]||n[jt]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=$f(e);e!==null;){if(n=e[jt])return n;e=$f(e)}return t}e=n,n=e.parentNode}return null}function Xs(e){return e=e[jt]||e[on],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function zr(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(V(33))}function Va(e){return e[Ts]||null}var bu=[],Br=-1;function Qn(e){return{current:e}}function fe(e){0>Br||(e.current=bu[Br],bu[Br]=null,Br--)}function ue(e,t){Br++,bu[Br]=e.current,e.current=t}var Hn={},Ke=Qn(Hn),it=Qn(!1),vr=Hn;function pi(e,t){var n=e.type.contextTypes;if(!n)return Hn;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={},s;for(s in n)i[s]=t[s];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function st(e){return e=e.childContextTypes,e!=null}function ra(){fe(it),fe(Ke)}function Hf(e,t,n){if(Ke.current!==Hn)throw Error(V(168));ue(Ke,t),ue(it,n)}function pg(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var i in r)if(!(i in t))throw Error(V(108,pw(e)||"Unknown",i));return we({},n,r)}function ia(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Hn,vr=Ke.current,ue(Ke,e),ue(it,it.current),!0}function Wf(e,t,n){var r=e.stateNode;if(!r)throw Error(V(169));n?(e=pg(e,t,vr),r.__reactInternalMemoizedMergedChildContext=e,fe(it),fe(Ke),ue(Ke,e)):fe(it),ue(it,n)}var Yt=null,Fa=!1,Rl=!1;function hg(e){Yt===null?Yt=[e]:Yt.push(e)}function DS(e){Fa=!0,hg(e)}function Yn(){if(!Rl&&Yt!==null){Rl=!0;var e=0,t=oe;try{var n=Yt;for(oe=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}Yt=null,Fa=!1}catch(i){throw Yt!==null&&(Yt=Yt.slice(e+1)),zm($c,Yn),i}finally{oe=t,Rl=!1}}return null}var jr=[],Ur=0,sa=null,oa=0,xt=[],Et=0,yr=null,Xt=1,qt="";function er(e,t){jr[Ur++]=oa,jr[Ur++]=sa,sa=e,oa=t}function mg(e,t,n){xt[Et++]=Xt,xt[Et++]=qt,xt[Et++]=yr,yr=e;var r=Xt;e=qt;var i=32-Ot(r)-1;r&=~(1<<i),n+=1;var s=32-Ot(t)+i;if(30<s){var o=i-i%5;s=(r&(1<<o)-1).toString(32),r>>=o,i-=o,Xt=1<<32-Ot(t)+i|n<<i|r,qt=s+e}else Xt=1<<s|n<<i|r,qt=e}function Zc(e){e.return!==null&&(er(e,1),mg(e,1,0))}function Jc(e){for(;e===sa;)sa=jr[--Ur],jr[Ur]=null,oa=jr[--Ur],jr[Ur]=null;for(;e===yr;)yr=xt[--Et],xt[Et]=null,qt=xt[--Et],xt[Et]=null,Xt=xt[--Et],xt[Et]=null}var ft=null,dt=null,me=!1,At=null;function gg(e,t){var n=Tt(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Gf(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,ft=e,dt=Vn(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,ft=e,dt=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=yr!==null?{id:Xt,overflow:qt}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Tt(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,ft=e,dt=null,!0):!1;default:return!1}}function Au(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Ou(e){if(me){var t=dt;if(t){var n=t;if(!Gf(e,t)){if(Au(e))throw Error(V(418));t=Vn(n.nextSibling);var r=ft;t&&Gf(e,t)?gg(r,n):(e.flags=e.flags&-4097|2,me=!1,ft=e)}}else{if(Au(e))throw Error(V(418));e.flags=e.flags&-4097|2,me=!1,ft=e}}}function Kf(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;ft=e}function So(e){if(e!==ft)return!1;if(!me)return Kf(e),me=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!ku(e.type,e.memoizedProps)),t&&(t=dt)){if(Au(e))throw vg(),Error(V(418));for(;t;)gg(e,t),t=Vn(t.nextSibling)}if(Kf(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(V(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){dt=Vn(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}dt=null}}else dt=ft?Vn(e.stateNode.nextSibling):null;return!0}function vg(){for(var e=dt;e;)e=Vn(e.nextSibling)}function hi(){dt=ft=null,me=!1}function ed(e){At===null?At=[e]:At.push(e)}var bS=dn.ReactCurrentBatchConfig;function Rt(e,t){if(e&&e.defaultProps){t=we({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var aa=Qn(null),la=null,$r=null,td=null;function nd(){td=$r=la=null}function rd(e){var t=aa.current;fe(aa),e._currentValue=t}function Iu(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function ni(e,t){la=e,td=$r=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(rt=!0),e.firstContext=null)}function Pt(e){var t=e._currentValue;if(td!==e)if(e={context:e,memoizedValue:t,next:null},$r===null){if(la===null)throw Error(V(308));$r=e,la.dependencies={lanes:0,firstContext:e}}else $r=$r.next=e;return t}var sr=null;function id(e){sr===null?sr=[e]:sr.push(e)}function yg(e,t,n,r){var i=t.interleaved;return i===null?(n.next=n,id(t)):(n.next=i.next,i.next=n),t.interleaved=n,an(e,r)}function an(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var En=!1;function sd(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function wg(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Jt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fn(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,ie&2){var i=r.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),r.pending=t,an(e,n)}return i=r.interleaved,i===null?(t.next=t,id(r)):(t.next=i.next,i.next=t),r.interleaved=t,an(e,n)}function No(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Hc(e,n)}}function Qf(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var i=null,s=null;if(n=n.firstBaseUpdate,n!==null){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};s===null?i=s=o:s=s.next=o,n=n.next}while(n!==null);s===null?i=s=t:s=s.next=t}else i=s=t;n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:s,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ua(e,t,n,r){var i=e.updateQueue;En=!1;var s=i.firstBaseUpdate,o=i.lastBaseUpdate,l=i.shared.pending;if(l!==null){i.shared.pending=null;var a=l,u=a.next;a.next=null,o===null?s=u:o.next=u,o=a;var c=e.alternate;c!==null&&(c=c.updateQueue,l=c.lastBaseUpdate,l!==o&&(l===null?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=a))}if(s!==null){var d=i.baseState;o=0,c=u=a=null,l=s;do{var p=l.lane,g=l.eventTime;if((r&p)===p){c!==null&&(c=c.next={eventTime:g,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var v=e,y=l;switch(p=t,g=n,y.tag){case 1:if(v=y.payload,typeof v=="function"){d=v.call(g,d,p);break e}d=v;break e;case 3:v.flags=v.flags&-65537|128;case 0:if(v=y.payload,p=typeof v=="function"?v.call(g,d,p):v,p==null)break e;d=we({},d,p);break e;case 2:En=!0}}l.callback!==null&&l.lane!==0&&(e.flags|=64,p=i.effects,p===null?i.effects=[l]:p.push(l))}else g={eventTime:g,lane:p,tag:l.tag,payload:l.payload,callback:l.callback,next:null},c===null?(u=c=g,a=d):c=c.next=g,o|=p;if(l=l.next,l===null){if(l=i.shared.pending,l===null)break;p=l,l=p.next,p.next=null,i.lastBaseUpdate=p,i.shared.pending=null}}while(1);if(c===null&&(a=d),i.baseState=a,i.firstBaseUpdate=u,i.lastBaseUpdate=c,t=i.shared.interleaved,t!==null){i=t;do o|=i.lane,i=i.next;while(i!==t)}else s===null&&(i.shared.lanes=0);Sr|=o,e.lanes=o,e.memoizedState=d}}function Yf(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(i!==null){if(r.callback=null,r=n,typeof i!="function")throw Error(V(191,i));i.call(r)}}}var Sg=new ym.Component().refs;function _u(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:we({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var Na={isMounted:function(e){return(e=e._reactInternals)?Lr(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=qe(),i=zn(e),s=Jt(r,i);s.payload=t,n!=null&&(s.callback=n),t=Fn(e,s,i),t!==null&&(It(t,e,i,r),No(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=qe(),i=zn(e),s=Jt(r,i);s.tag=1,s.payload=t,n!=null&&(s.callback=n),t=Fn(e,s,i),t!==null&&(It(t,e,i,r),No(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=qe(),r=zn(e),i=Jt(n,r);i.tag=2,t!=null&&(i.callback=t),t=Fn(e,i,r),t!==null&&(It(t,e,r,n),No(t,e,r))}};function Xf(e,t,n,r,i,s,o){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,s,o):t.prototype&&t.prototype.isPureReactComponent?!Ss(n,r)||!Ss(i,s):!0}function xg(e,t,n){var r=!1,i=Hn,s=t.contextType;return typeof s=="object"&&s!==null?s=Pt(s):(i=st(t)?vr:Ke.current,r=t.contextTypes,s=(r=r!=null)?pi(e,i):Hn),t=new t(n,s),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=Na,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=s),t}function qf(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Na.enqueueReplaceState(t,t.state,null)}function Vu(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Sg,sd(e);var s=t.contextType;typeof s=="object"&&s!==null?i.context=Pt(s):(s=st(t)?vr:Ke.current,i.context=pi(e,s)),i.state=e.memoizedState,s=t.getDerivedStateFromProps,typeof s=="function"&&(_u(e,t,s,n),i.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof i.getSnapshotBeforeUpdate=="function"||typeof i.UNSAFE_componentWillMount!="function"&&typeof i.componentWillMount!="function"||(t=i.state,typeof i.componentWillMount=="function"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount=="function"&&i.UNSAFE_componentWillMount(),t!==i.state&&Na.enqueueReplaceState(i,i.state,null),ua(e,n,i,r),i.state=e.memoizedState),typeof i.componentDidMount=="function"&&(e.flags|=4194308)}function Vi(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(V(309));var r=n.stateNode}if(!r)throw Error(V(147,e));var i=r,s=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===s?t.ref:(t=function(o){var l=i.refs;l===Sg&&(l=i.refs={}),o===null?delete l[s]:l[s]=o},t._stringRef=s,t)}if(typeof e!="string")throw Error(V(284));if(!n._owner)throw Error(V(290,e))}return e}function xo(e,t){throw e=Object.prototype.toString.call(t),Error(V(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Zf(e){var t=e._init;return t(e._payload)}function Eg(e){function t(m,f){if(e){var h=m.deletions;h===null?(m.deletions=[f],m.flags|=16):h.push(f)}}function n(m,f){if(!e)return null;for(;f!==null;)t(m,f),f=f.sibling;return null}function r(m,f){for(m=new Map;f!==null;)f.key!==null?m.set(f.key,f):m.set(f.index,f),f=f.sibling;return m}function i(m,f){return m=Bn(m,f),m.index=0,m.sibling=null,m}function s(m,f,h){return m.index=h,e?(h=m.alternate,h!==null?(h=h.index,h<f?(m.flags|=2,f):h):(m.flags|=2,f)):(m.flags|=1048576,f)}function o(m){return e&&m.alternate===null&&(m.flags|=2),m}function l(m,f,h,w){return f===null||f.tag!==6?(f=Vl(h,m.mode,w),f.return=m,f):(f=i(f,h),f.return=m,f)}function a(m,f,h,w){var E=h.type;return E===_r?c(m,f,h.props.children,w,h.key):f!==null&&(f.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===xn&&Zf(E)===f.type)?(w=i(f,h.props),w.ref=Vi(m,f,h),w.return=m,w):(w=Ho(h.type,h.key,h.props,null,m.mode,w),w.ref=Vi(m,f,h),w.return=m,w)}function u(m,f,h,w){return f===null||f.tag!==4||f.stateNode.containerInfo!==h.containerInfo||f.stateNode.implementation!==h.implementation?(f=Fl(h,m.mode,w),f.return=m,f):(f=i(f,h.children||[]),f.return=m,f)}function c(m,f,h,w,E){return f===null||f.tag!==7?(f=gr(h,m.mode,w,E),f.return=m,f):(f=i(f,h),f.return=m,f)}function d(m,f,h){if(typeof f=="string"&&f!==""||typeof f=="number")return f=Vl(""+f,m.mode,h),f.return=m,f;if(typeof f=="object"&&f!==null){switch(f.$$typeof){case uo:return h=Ho(f.type,f.key,f.props,null,m.mode,h),h.ref=Vi(m,null,f),h.return=m,h;case Ir:return f=Fl(f,m.mode,h),f.return=m,f;case xn:var w=f._init;return d(m,w(f._payload),h)}if(Ki(f)||bi(f))return f=gr(f,m.mode,h,null),f.return=m,f;xo(m,f)}return null}function p(m,f,h,w){var E=f!==null?f.key:null;if(typeof h=="string"&&h!==""||typeof h=="number")return E!==null?null:l(m,f,""+h,w);if(typeof h=="object"&&h!==null){switch(h.$$typeof){case uo:return h.key===E?a(m,f,h,w):null;case Ir:return h.key===E?u(m,f,h,w):null;case xn:return E=h._init,p(m,f,E(h._payload),w)}if(Ki(h)||bi(h))return E!==null?null:c(m,f,h,w,null);xo(m,h)}return null}function g(m,f,h,w,E){if(typeof w=="string"&&w!==""||typeof w=="number")return m=m.get(h)||null,l(f,m,""+w,E);if(typeof w=="object"&&w!==null){switch(w.$$typeof){case uo:return m=m.get(w.key===null?h:w.key)||null,a(f,m,w,E);case Ir:return m=m.get(w.key===null?h:w.key)||null,u(f,m,w,E);case xn:var x=w._init;return g(m,f,h,x(w._payload),E)}if(Ki(w)||bi(w))return m=m.get(h)||null,c(f,m,w,E,null);xo(f,w)}return null}function v(m,f,h,w){for(var E=null,x=null,C=f,P=f=0,k=null;C!==null&&P<h.length;P++){C.index>P?(k=C,C=null):k=C.sibling;var R=p(m,C,h[P],w);if(R===null){C===null&&(C=k);break}e&&C&&R.alternate===null&&t(m,C),f=s(R,f,P),x===null?E=R:x.sibling=R,x=R,C=k}if(P===h.length)return n(m,C),me&&er(m,P),E;if(C===null){for(;P<h.length;P++)C=d(m,h[P],w),C!==null&&(f=s(C,f,P),x===null?E=C:x.sibling=C,x=C);return me&&er(m,P),E}for(C=r(m,C);P<h.length;P++)k=g(C,m,P,h[P],w),k!==null&&(e&&k.alternate!==null&&C.delete(k.key===null?P:k.key),f=s(k,f,P),x===null?E=k:x.sibling=k,x=k);return e&&C.forEach(function(O){return t(m,O)}),me&&er(m,P),E}function y(m,f,h,w){var E=bi(h);if(typeof E!="function")throw Error(V(150));if(h=E.call(h),h==null)throw Error(V(151));for(var x=E=null,C=f,P=f=0,k=null,R=h.next();C!==null&&!R.done;P++,R=h.next()){C.index>P?(k=C,C=null):k=C.sibling;var O=p(m,C,R.value,w);if(O===null){C===null&&(C=k);break}e&&C&&O.alternate===null&&t(m,C),f=s(O,f,P),x===null?E=O:x.sibling=O,x=O,C=k}if(R.done)return n(m,C),me&&er(m,P),E;if(C===null){for(;!R.done;P++,R=h.next())R=d(m,R.value,w),R!==null&&(f=s(R,f,P),x===null?E=R:x.sibling=R,x=R);return me&&er(m,P),E}for(C=r(m,C);!R.done;P++,R=h.next())R=g(C,m,P,R.value,w),R!==null&&(e&&R.alternate!==null&&C.delete(R.key===null?P:R.key),f=s(R,f,P),x===null?E=R:x.sibling=R,x=R);return e&&C.forEach(function(N){return t(m,N)}),me&&er(m,P),E}function S(m,f,h,w){if(typeof h=="object"&&h!==null&&h.type===_r&&h.key===null&&(h=h.props.children),typeof h=="object"&&h!==null){switch(h.$$typeof){case uo:e:{for(var E=h.key,x=f;x!==null;){if(x.key===E){if(E=h.type,E===_r){if(x.tag===7){n(m,x.sibling),f=i(x,h.props.children),f.return=m,m=f;break e}}else if(x.elementType===E||typeof E=="object"&&E!==null&&E.$$typeof===xn&&Zf(E)===x.type){n(m,x.sibling),f=i(x,h.props),f.ref=Vi(m,x,h),f.return=m,m=f;break e}n(m,x);break}else t(m,x);x=x.sibling}h.type===_r?(f=gr(h.props.children,m.mode,w,h.key),f.return=m,m=f):(w=Ho(h.type,h.key,h.props,null,m.mode,w),w.ref=Vi(m,f,h),w.return=m,m=w)}return o(m);case Ir:e:{for(x=h.key;f!==null;){if(f.key===x)if(f.tag===4&&f.stateNode.containerInfo===h.containerInfo&&f.stateNode.implementation===h.implementation){n(m,f.sibling),f=i(f,h.children||[]),f.return=m,m=f;break e}else{n(m,f);break}else t(m,f);f=f.sibling}f=Fl(h,m.mode,w),f.return=m,m=f}return o(m);case xn:return x=h._init,S(m,f,x(h._payload),w)}if(Ki(h))return v(m,f,h,w);if(bi(h))return y(m,f,h,w);xo(m,h)}return typeof h=="string"&&h!==""||typeof h=="number"?(h=""+h,f!==null&&f.tag===6?(n(m,f.sibling),f=i(f,h),f.return=m,m=f):(n(m,f),f=Vl(h,m.mode,w),f.return=m,m=f),o(m)):n(m,f)}return S}var mi=Eg(!0),Tg=Eg(!1),qs={},Ht=Qn(qs),Cs=Qn(qs),Ps=Qn(qs);function or(e){if(e===qs)throw Error(V(174));return e}function od(e,t){switch(ue(Ps,t),ue(Cs,e),ue(Ht,qs),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:hu(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=hu(t,e)}fe(Ht),ue(Ht,t)}function gi(){fe(Ht),fe(Cs),fe(Ps)}function Cg(e){or(Ps.current);var t=or(Ht.current),n=hu(t,e.type);t!==n&&(ue(Cs,e),ue(Ht,n))}function ad(e){Cs.current===e&&(fe(Ht),fe(Cs))}var ge=Qn(0);function ca(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Dl=[];function ld(){for(var e=0;e<Dl.length;e++)Dl[e]._workInProgressVersionPrimary=null;Dl.length=0}var zo=dn.ReactCurrentDispatcher,bl=dn.ReactCurrentBatchConfig,wr=0,ye=null,Oe=null,Fe=null,da=!1,rs=!1,Ls=0,AS=0;function $e(){throw Error(V(321))}function ud(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!_t(e[n],t[n]))return!1;return!0}function cd(e,t,n,r,i,s){if(wr=s,ye=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,zo.current=e===null||e.memoizedState===null?VS:FS,e=n(r,i),rs){s=0;do{if(rs=!1,Ls=0,25<=s)throw Error(V(301));s+=1,Fe=Oe=null,t.updateQueue=null,zo.current=NS,e=n(r,i)}while(rs)}if(zo.current=fa,t=Oe!==null&&Oe.next!==null,wr=0,Fe=Oe=ye=null,da=!1,t)throw Error(V(300));return e}function dd(){var e=Ls!==0;return Ls=0,e}function Nt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Fe===null?ye.memoizedState=Fe=e:Fe=Fe.next=e,Fe}function Lt(){if(Oe===null){var e=ye.alternate;e=e!==null?e.memoizedState:null}else e=Oe.next;var t=Fe===null?ye.memoizedState:Fe.next;if(t!==null)Fe=t,Oe=e;else{if(e===null)throw Error(V(310));Oe=e,e={memoizedState:Oe.memoizedState,baseState:Oe.baseState,baseQueue:Oe.baseQueue,queue:Oe.queue,next:null},Fe===null?ye.memoizedState=Fe=e:Fe=Fe.next=e}return Fe}function Ms(e,t){return typeof t=="function"?t(e):t}function Al(e){var t=Lt(),n=t.queue;if(n===null)throw Error(V(311));n.lastRenderedReducer=e;var r=Oe,i=r.baseQueue,s=n.pending;if(s!==null){if(i!==null){var o=i.next;i.next=s.next,s.next=o}r.baseQueue=i=s,n.pending=null}if(i!==null){s=i.next,r=r.baseState;var l=o=null,a=null,u=s;do{var c=u.lane;if((wr&c)===c)a!==null&&(a=a.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var d={lane:c,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};a===null?(l=a=d,o=r):a=a.next=d,ye.lanes|=c,Sr|=c}u=u.next}while(u!==null&&u!==s);a===null?o=r:a.next=l,_t(r,t.memoizedState)||(rt=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=a,n.lastRenderedState=r}if(e=n.interleaved,e!==null){i=e;do s=i.lane,ye.lanes|=s,Sr|=s,i=i.next;while(i!==e)}else i===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ol(e){var t=Lt(),n=t.queue;if(n===null)throw Error(V(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,s=t.memoizedState;if(i!==null){n.pending=null;var o=i=i.next;do s=e(s,o.action),o=o.next;while(o!==i);_t(s,t.memoizedState)||(rt=!0),t.memoizedState=s,t.baseQueue===null&&(t.baseState=s),n.lastRenderedState=s}return[s,r]}function Pg(){}function Lg(e,t){var n=ye,r=Lt(),i=t(),s=!_t(r.memoizedState,i);if(s&&(r.memoizedState=i,rt=!0),r=r.queue,fd(Rg.bind(null,n,r,e),[e]),r.getSnapshot!==t||s||Fe!==null&&Fe.memoizedState.tag&1){if(n.flags|=2048,ks(9,kg.bind(null,n,r,i,t),void 0,null),Ne===null)throw Error(V(349));wr&30||Mg(n,t,i)}return i}function Mg(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=ye.updateQueue,t===null?(t={lastEffect:null,stores:null},ye.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function kg(e,t,n,r){t.value=n,t.getSnapshot=r,Dg(t)&&bg(e)}function Rg(e,t,n){return n(function(){Dg(t)&&bg(e)})}function Dg(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!_t(e,n)}catch{return!0}}function bg(e){var t=an(e,1);t!==null&&It(t,e,1,-1)}function Jf(e){var t=Nt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ms,lastRenderedState:e},t.queue=e,e=e.dispatch=_S.bind(null,ye,e),[t.memoizedState,e]}function ks(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=ye.updateQueue,t===null?(t={lastEffect:null,stores:null},ye.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Ag(){return Lt().memoizedState}function Bo(e,t,n,r){var i=Nt();ye.flags|=e,i.memoizedState=ks(1|t,n,void 0,r===void 0?null:r)}function za(e,t,n,r){var i=Lt();r=r===void 0?null:r;var s=void 0;if(Oe!==null){var o=Oe.memoizedState;if(s=o.destroy,r!==null&&ud(r,o.deps)){i.memoizedState=ks(t,n,s,r);return}}ye.flags|=e,i.memoizedState=ks(1|t,n,s,r)}function ep(e,t){return Bo(8390656,8,e,t)}function fd(e,t){return za(2048,8,e,t)}function Og(e,t){return za(4,2,e,t)}function Ig(e,t){return za(4,4,e,t)}function _g(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function Vg(e,t,n){return n=n!=null?n.concat([e]):null,za(4,4,_g.bind(null,t,e),n)}function pd(){}function Fg(e,t){var n=Lt();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&ud(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ng(e,t){var n=Lt();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&ud(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function zg(e,t,n){return wr&21?(_t(n,t)||(n=Um(),ye.lanes|=n,Sr|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,rt=!0),e.memoizedState=n)}function OS(e,t){var n=oe;oe=n!==0&&4>n?n:4,e(!0);var r=bl.transition;bl.transition={};try{e(!1),t()}finally{oe=n,bl.transition=r}}function Bg(){return Lt().memoizedState}function IS(e,t,n){var r=zn(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},jg(e))Ug(t,n);else if(n=yg(e,t,n,r),n!==null){var i=qe();It(n,e,r,i),$g(n,t,r)}}function _S(e,t,n){var r=zn(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(jg(e))Ug(t,i);else{var s=e.alternate;if(e.lanes===0&&(s===null||s.lanes===0)&&(s=t.lastRenderedReducer,s!==null))try{var o=t.lastRenderedState,l=s(o,n);if(i.hasEagerState=!0,i.eagerState=l,_t(l,o)){var a=t.interleaved;a===null?(i.next=i,id(t)):(i.next=a.next,a.next=i),t.interleaved=i;return}}catch{}finally{}n=yg(e,t,i,r),n!==null&&(i=qe(),It(n,e,r,i),$g(n,t,r))}}function jg(e){var t=e.alternate;return e===ye||t!==null&&t===ye}function Ug(e,t){rs=da=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function $g(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,Hc(e,n)}}var fa={readContext:Pt,useCallback:$e,useContext:$e,useEffect:$e,useImperativeHandle:$e,useInsertionEffect:$e,useLayoutEffect:$e,useMemo:$e,useReducer:$e,useRef:$e,useState:$e,useDebugValue:$e,useDeferredValue:$e,useTransition:$e,useMutableSource:$e,useSyncExternalStore:$e,useId:$e,unstable_isNewReconciler:!1},VS={readContext:Pt,useCallback:function(e,t){return Nt().memoizedState=[e,t===void 0?null:t],e},useContext:Pt,useEffect:ep,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Bo(4194308,4,_g.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Bo(4194308,4,e,t)},useInsertionEffect:function(e,t){return Bo(4,2,e,t)},useMemo:function(e,t){var n=Nt();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Nt();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=IS.bind(null,ye,e),[r.memoizedState,e]},useRef:function(e){var t=Nt();return e={current:e},t.memoizedState=e},useState:Jf,useDebugValue:pd,useDeferredValue:function(e){return Nt().memoizedState=e},useTransition:function(){var e=Jf(!1),t=e[0];return e=OS.bind(null,e[1]),Nt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ye,i=Nt();if(me){if(n===void 0)throw Error(V(407));n=n()}else{if(n=t(),Ne===null)throw Error(V(349));wr&30||Mg(r,t,n)}i.memoizedState=n;var s={value:n,getSnapshot:t};return i.queue=s,ep(Rg.bind(null,r,s,e),[e]),r.flags|=2048,ks(9,kg.bind(null,r,s,n,t),void 0,null),n},useId:function(){var e=Nt(),t=Ne.identifierPrefix;if(me){var n=qt,r=Xt;n=(r&~(1<<32-Ot(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Ls++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=AS++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},FS={readContext:Pt,useCallback:Fg,useContext:Pt,useEffect:fd,useImperativeHandle:Vg,useInsertionEffect:Og,useLayoutEffect:Ig,useMemo:Ng,useReducer:Al,useRef:Ag,useState:function(){return Al(Ms)},useDebugValue:pd,useDeferredValue:function(e){var t=Lt();return zg(t,Oe.memoizedState,e)},useTransition:function(){var e=Al(Ms)[0],t=Lt().memoizedState;return[e,t]},useMutableSource:Pg,useSyncExternalStore:Lg,useId:Bg,unstable_isNewReconciler:!1},NS={readContext:Pt,useCallback:Fg,useContext:Pt,useEffect:fd,useImperativeHandle:Vg,useInsertionEffect:Og,useLayoutEffect:Ig,useMemo:Ng,useReducer:Ol,useRef:Ag,useState:function(){return Ol(Ms)},useDebugValue:pd,useDeferredValue:function(e){var t=Lt();return Oe===null?t.memoizedState=e:zg(t,Oe.memoizedState,e)},useTransition:function(){var e=Ol(Ms)[0],t=Lt().memoizedState;return[e,t]},useMutableSource:Pg,useSyncExternalStore:Lg,useId:Bg,unstable_isNewReconciler:!1};function vi(e,t){try{var n="",r=t;do n+=fw(r),r=r.return;while(r);var i=n}catch(s){i=`
Error generating stack: `+s.message+`
`+s.stack}return{value:e,source:t,stack:i,digest:null}}function Il(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Fu(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var zS=typeof WeakMap=="function"?WeakMap:Map;function Hg(e,t,n){n=Jt(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){ha||(ha=!0,Ku=r),Fu(e,t)},n}function Wg(e,t,n){n=Jt(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){Fu(e,t)}}var s=e.stateNode;return s!==null&&typeof s.componentDidCatch=="function"&&(n.callback=function(){Fu(e,t),typeof r!="function"&&(Nn===null?Nn=new Set([this]):Nn.add(this));var o=t.stack;this.componentDidCatch(t.value,{componentStack:o!==null?o:""})}),n}function tp(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new zS;var i=new Set;r.set(t,i)}else i=r.get(t),i===void 0&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=JS.bind(null,e,t,n),t.then(e,e))}function np(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function rp(e,t,n,r,i){return e.mode&1?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=Jt(-1,1),t.tag=2,Fn(n,t,1))),n.lanes|=1),e)}var BS=dn.ReactCurrentOwner,rt=!1;function Xe(e,t,n,r){t.child=e===null?Tg(t,null,n,r):mi(t,e.child,n,r)}function ip(e,t,n,r,i){n=n.render;var s=t.ref;return ni(t,i),r=cd(e,t,n,r,s,i),n=dd(),e!==null&&!rt?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,ln(e,t,i)):(me&&n&&Zc(t),t.flags|=1,Xe(e,t,r,i),t.child)}function sp(e,t,n,r,i){if(e===null){var s=n.type;return typeof s=="function"&&!xd(s)&&s.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=s,Gg(e,t,s,r,i)):(e=Ho(n.type,null,r,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(s=e.child,!(e.lanes&i)){var o=s.memoizedProps;if(n=n.compare,n=n!==null?n:Ss,n(o,r)&&e.ref===t.ref)return ln(e,t,i)}return t.flags|=1,e=Bn(s,r),e.ref=t.ref,e.return=t,t.child=e}function Gg(e,t,n,r,i){if(e!==null){var s=e.memoizedProps;if(Ss(s,r)&&e.ref===t.ref)if(rt=!1,t.pendingProps=r=s,(e.lanes&i)!==0)e.flags&131072&&(rt=!0);else return t.lanes=e.lanes,ln(e,t,i)}return Nu(e,t,n,r,i)}function Kg(e,t,n){var r=t.pendingProps,i=r.children,s=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},ue(Wr,ut),ut|=n;else{if(!(n&1073741824))return e=s!==null?s.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,ue(Wr,ut),ut|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=s!==null?s.baseLanes:n,ue(Wr,ut),ut|=r}else s!==null?(r=s.baseLanes|n,t.memoizedState=null):r=n,ue(Wr,ut),ut|=r;return Xe(e,t,i,n),t.child}function Qg(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Nu(e,t,n,r,i){var s=st(n)?vr:Ke.current;return s=pi(t,s),ni(t,i),n=cd(e,t,n,r,s,i),r=dd(),e!==null&&!rt?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,ln(e,t,i)):(me&&r&&Zc(t),t.flags|=1,Xe(e,t,n,i),t.child)}function op(e,t,n,r,i){if(st(n)){var s=!0;ia(t)}else s=!1;if(ni(t,i),t.stateNode===null)jo(e,t),xg(t,n,r),Vu(t,n,r,i),r=!0;else if(e===null){var o=t.stateNode,l=t.memoizedProps;o.props=l;var a=o.context,u=n.contextType;typeof u=="object"&&u!==null?u=Pt(u):(u=st(n)?vr:Ke.current,u=pi(t,u));var c=n.getDerivedStateFromProps,d=typeof c=="function"||typeof o.getSnapshotBeforeUpdate=="function";d||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(l!==r||a!==u)&&qf(t,o,r,u),En=!1;var p=t.memoizedState;o.state=p,ua(t,r,o,i),a=t.memoizedState,l!==r||p!==a||it.current||En?(typeof c=="function"&&(_u(t,n,c,r),a=t.memoizedState),(l=En||Xf(t,n,l,r,p,a,u))?(d||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount()),typeof o.componentDidMount=="function"&&(t.flags|=4194308)):(typeof o.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=a),o.props=r,o.state=a,o.context=u,r=l):(typeof o.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,wg(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:Rt(t.type,l),o.props=u,d=t.pendingProps,p=o.context,a=n.contextType,typeof a=="object"&&a!==null?a=Pt(a):(a=st(n)?vr:Ke.current,a=pi(t,a));var g=n.getDerivedStateFromProps;(c=typeof g=="function"||typeof o.getSnapshotBeforeUpdate=="function")||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(l!==d||p!==a)&&qf(t,o,r,a),En=!1,p=t.memoizedState,o.state=p,ua(t,r,o,i);var v=t.memoizedState;l!==d||p!==v||it.current||En?(typeof g=="function"&&(_u(t,n,g,r),v=t.memoizedState),(u=En||Xf(t,n,u,r,p,v,a)||!1)?(c||typeof o.UNSAFE_componentWillUpdate!="function"&&typeof o.componentWillUpdate!="function"||(typeof o.componentWillUpdate=="function"&&o.componentWillUpdate(r,v,a),typeof o.UNSAFE_componentWillUpdate=="function"&&o.UNSAFE_componentWillUpdate(r,v,a)),typeof o.componentDidUpdate=="function"&&(t.flags|=4),typeof o.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof o.componentDidUpdate!="function"||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=v),o.props=r,o.state=v,o.context=a,r=u):(typeof o.componentDidUpdate!="function"||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||l===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),r=!1)}return zu(e,t,n,r,s,i)}function zu(e,t,n,r,i,s){Qg(e,t);var o=(t.flags&128)!==0;if(!r&&!o)return i&&Wf(t,n,!1),ln(e,t,s);r=t.stateNode,BS.current=t;var l=o&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&o?(t.child=mi(t,e.child,null,s),t.child=mi(t,null,l,s)):Xe(e,t,l,s),t.memoizedState=r.state,i&&Wf(t,n,!0),t.child}function Yg(e){var t=e.stateNode;t.pendingContext?Hf(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Hf(e,t.context,!1),od(e,t.containerInfo)}function ap(e,t,n,r,i){return hi(),ed(i),t.flags|=256,Xe(e,t,n,r),t.child}var Bu={dehydrated:null,treeContext:null,retryLane:0};function ju(e){return{baseLanes:e,cachePool:null,transitions:null}}function Xg(e,t,n){var r=t.pendingProps,i=ge.current,s=!1,o=(t.flags&128)!==0,l;if((l=o)||(l=e!==null&&e.memoizedState===null?!1:(i&2)!==0),l?(s=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),ue(ge,i&1),e===null)return Ou(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(o=r.children,e=r.fallback,s?(r=t.mode,s=t.child,o={mode:"hidden",children:o},!(r&1)&&s!==null?(s.childLanes=0,s.pendingProps=o):s=Ua(o,r,0,null),e=gr(e,r,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=ju(n),t.memoizedState=Bu,e):hd(t,o));if(i=e.memoizedState,i!==null&&(l=i.dehydrated,l!==null))return jS(e,t,o,r,l,i,n);if(s){s=r.fallback,o=t.mode,i=e.child,l=i.sibling;var a={mode:"hidden",children:r.children};return!(o&1)&&t.child!==i?(r=t.child,r.childLanes=0,r.pendingProps=a,t.deletions=null):(r=Bn(i,a),r.subtreeFlags=i.subtreeFlags&14680064),l!==null?s=Bn(l,s):(s=gr(s,o,n,null),s.flags|=2),s.return=t,r.return=t,r.sibling=s,t.child=r,r=s,s=t.child,o=e.child.memoizedState,o=o===null?ju(n):{baseLanes:o.baseLanes|n,cachePool:null,transitions:o.transitions},s.memoizedState=o,s.childLanes=e.childLanes&~n,t.memoizedState=Bu,r}return s=e.child,e=s.sibling,r=Bn(s,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function hd(e,t){return t=Ua({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Eo(e,t,n,r){return r!==null&&ed(r),mi(t,e.child,null,n),e=hd(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function jS(e,t,n,r,i,s,o){if(n)return t.flags&256?(t.flags&=-257,r=Il(Error(V(422))),Eo(e,t,o,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(s=r.fallback,i=t.mode,r=Ua({mode:"visible",children:r.children},i,0,null),s=gr(s,i,o,null),s.flags|=2,r.return=t,s.return=t,r.sibling=s,t.child=r,t.mode&1&&mi(t,e.child,null,o),t.child.memoizedState=ju(o),t.memoizedState=Bu,s);if(!(t.mode&1))return Eo(e,t,o,null);if(i.data==="$!"){if(r=i.nextSibling&&i.nextSibling.dataset,r)var l=r.dgst;return r=l,s=Error(V(419)),r=Il(s,r,void 0),Eo(e,t,o,r)}if(l=(o&e.childLanes)!==0,rt||l){if(r=Ne,r!==null){switch(o&-o){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=i&(r.suspendedLanes|o)?0:i,i!==0&&i!==s.retryLane&&(s.retryLane=i,an(e,i),It(r,e,i,-1))}return Sd(),r=Il(Error(V(421))),Eo(e,t,o,r)}return i.data==="$?"?(t.flags|=128,t.child=e.child,t=e1.bind(null,e),i._reactRetry=t,null):(e=s.treeContext,dt=Vn(i.nextSibling),ft=t,me=!0,At=null,e!==null&&(xt[Et++]=Xt,xt[Et++]=qt,xt[Et++]=yr,Xt=e.id,qt=e.overflow,yr=t),t=hd(t,r.children),t.flags|=4096,t)}function lp(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),Iu(e.return,t,n)}function _l(e,t,n,r,i){var s=e.memoizedState;s===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailMode=i)}function qg(e,t,n){var r=t.pendingProps,i=r.revealOrder,s=r.tail;if(Xe(e,t,r.children,n),r=ge.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&lp(e,n,t);else if(e.tag===19)lp(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ue(ge,r),!(t.mode&1))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;n!==null;)e=n.alternate,e!==null&&ca(e)===null&&(i=n),n=n.sibling;n=i,n===null?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),_l(t,!1,i,n,s);break;case"backwards":for(n=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&ca(e)===null){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}_l(t,!0,n,null,s);break;case"together":_l(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function jo(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ln(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Sr|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(V(153));if(t.child!==null){for(e=t.child,n=Bn(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=Bn(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function US(e,t,n){switch(t.tag){case 3:Yg(t),hi();break;case 5:Cg(t);break;case 1:st(t.type)&&ia(t);break;case 4:od(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;ue(aa,r._currentValue),r._currentValue=i;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(ue(ge,ge.current&1),t.flags|=128,null):n&t.child.childLanes?Xg(e,t,n):(ue(ge,ge.current&1),e=ln(e,t,n),e!==null?e.sibling:null);ue(ge,ge.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return qg(e,t,n);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),ue(ge,ge.current),r)break;return null;case 22:case 23:return t.lanes=0,Kg(e,t,n)}return ln(e,t,n)}var Zg,Uu,Jg,ev;Zg=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Uu=function(){};Jg=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,or(Ht.current);var s=null;switch(n){case"input":i=cu(e,i),r=cu(e,r),s=[];break;case"select":i=we({},i,{value:void 0}),r=we({},r,{value:void 0}),s=[];break;case"textarea":i=pu(e,i),r=pu(e,r),s=[];break;default:typeof i.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=na)}mu(n,r);var o;n=null;for(u in i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&i[u]!=null)if(u==="style"){var l=i[u];for(o in l)l.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else u!=="dangerouslySetInnerHTML"&&u!=="children"&&u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&u!=="autoFocus"&&(ps.hasOwnProperty(u)?s||(s=[]):(s=s||[]).push(u,null));for(u in r){var a=r[u];if(l=i!=null?i[u]:void 0,r.hasOwnProperty(u)&&a!==l&&(a!=null||l!=null))if(u==="style")if(l){for(o in l)!l.hasOwnProperty(o)||a&&a.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in a)a.hasOwnProperty(o)&&l[o]!==a[o]&&(n||(n={}),n[o]=a[o])}else n||(s||(s=[]),s.push(u,n)),n=a;else u==="dangerouslySetInnerHTML"?(a=a?a.__html:void 0,l=l?l.__html:void 0,a!=null&&l!==a&&(s=s||[]).push(u,a)):u==="children"?typeof a!="string"&&typeof a!="number"||(s=s||[]).push(u,""+a):u!=="suppressContentEditableWarning"&&u!=="suppressHydrationWarning"&&(ps.hasOwnProperty(u)?(a!=null&&u==="onScroll"&&ce("scroll",e),s||l===a||(s=[])):(s=s||[]).push(u,a))}n&&(s=s||[]).push("style",n);var u=s;(t.updateQueue=u)&&(t.flags|=4)}};ev=function(e,t,n,r){n!==r&&(t.flags|=4)};function Fi(e,t){if(!me)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function He(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags&14680064,r|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function $S(e,t,n){var r=t.pendingProps;switch(Jc(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return He(t),null;case 1:return st(t.type)&&ra(),He(t),null;case 3:return r=t.stateNode,gi(),fe(it),fe(Ke),ld(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(So(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,At!==null&&(Xu(At),At=null))),Uu(e,t),He(t),null;case 5:ad(t);var i=or(Ps.current);if(n=t.type,e!==null&&t.stateNode!=null)Jg(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(V(166));return He(t),null}if(e=or(Ht.current),So(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[jt]=t,r[Ts]=s,e=(t.mode&1)!==0,n){case"dialog":ce("cancel",r),ce("close",r);break;case"iframe":case"object":case"embed":ce("load",r);break;case"video":case"audio":for(i=0;i<Yi.length;i++)ce(Yi[i],r);break;case"source":ce("error",r);break;case"img":case"image":case"link":ce("error",r),ce("load",r);break;case"details":ce("toggle",r);break;case"input":vf(r,s),ce("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},ce("invalid",r);break;case"textarea":wf(r,s),ce("invalid",r)}mu(n,s),i=null;for(var o in s)if(s.hasOwnProperty(o)){var l=s[o];o==="children"?typeof l=="string"?r.textContent!==l&&(s.suppressHydrationWarning!==!0&&wo(r.textContent,l,e),i=["children",l]):typeof l=="number"&&r.textContent!==""+l&&(s.suppressHydrationWarning!==!0&&wo(r.textContent,l,e),i=["children",""+l]):ps.hasOwnProperty(o)&&l!=null&&o==="onScroll"&&ce("scroll",r)}switch(n){case"input":co(r),yf(r,s,!0);break;case"textarea":co(r),Sf(r);break;case"select":case"option":break;default:typeof s.onClick=="function"&&(r.onclick=na)}r=i,t.updateQueue=r,r!==null&&(t.flags|=4)}else{o=i.nodeType===9?i:i.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Mm(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=o.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=o.createElement(n,{is:r.is}):(e=o.createElement(n),n==="select"&&(o=e,r.multiple?o.multiple=!0:r.size&&(o.size=r.size))):e=o.createElementNS(e,n),e[jt]=t,e[Ts]=r,Zg(e,t,!1,!1),t.stateNode=e;e:{switch(o=gu(n,r),n){case"dialog":ce("cancel",e),ce("close",e),i=r;break;case"iframe":case"object":case"embed":ce("load",e),i=r;break;case"video":case"audio":for(i=0;i<Yi.length;i++)ce(Yi[i],e);i=r;break;case"source":ce("error",e),i=r;break;case"img":case"image":case"link":ce("error",e),ce("load",e),i=r;break;case"details":ce("toggle",e),i=r;break;case"input":vf(e,r),i=cu(e,r),ce("invalid",e);break;case"option":i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=we({},r,{value:void 0}),ce("invalid",e);break;case"textarea":wf(e,r),i=pu(e,r),ce("invalid",e);break;default:i=r}mu(n,i),l=i;for(s in l)if(l.hasOwnProperty(s)){var a=l[s];s==="style"?Dm(e,a):s==="dangerouslySetInnerHTML"?(a=a?a.__html:void 0,a!=null&&km(e,a)):s==="children"?typeof a=="string"?(n!=="textarea"||a!=="")&&hs(e,a):typeof a=="number"&&hs(e,""+a):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(ps.hasOwnProperty(s)?a!=null&&s==="onScroll"&&ce("scroll",e):a!=null&&Nc(e,s,a,o))}switch(n){case"input":co(e),yf(e,r,!1);break;case"textarea":co(e),Sf(e);break;case"option":r.value!=null&&e.setAttribute("value",""+$n(r.value));break;case"select":e.multiple=!!r.multiple,s=r.value,s!=null?Zr(e,!!r.multiple,s,!1):r.defaultValue!=null&&Zr(e,!!r.multiple,r.defaultValue,!0);break;default:typeof i.onClick=="function"&&(e.onclick=na)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return He(t),null;case 6:if(e&&t.stateNode!=null)ev(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(V(166));if(n=or(Ps.current),or(Ht.current),So(t)){if(r=t.stateNode,n=t.memoizedProps,r[jt]=t,(s=r.nodeValue!==n)&&(e=ft,e!==null))switch(e.tag){case 3:wo(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&wo(r.nodeValue,n,(e.mode&1)!==0)}s&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[jt]=t,t.stateNode=r}return He(t),null;case 13:if(fe(ge),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(me&&dt!==null&&t.mode&1&&!(t.flags&128))vg(),hi(),t.flags|=98560,s=!1;else if(s=So(t),r!==null&&r.dehydrated!==null){if(e===null){if(!s)throw Error(V(318));if(s=t.memoizedState,s=s!==null?s.dehydrated:null,!s)throw Error(V(317));s[jt]=t}else hi(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;He(t),s=!1}else At!==null&&(Xu(At),At=null),s=!0;if(!s)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||ge.current&1?Ie===0&&(Ie=3):Sd())),t.updateQueue!==null&&(t.flags|=4),He(t),null);case 4:return gi(),Uu(e,t),e===null&&xs(t.stateNode.containerInfo),He(t),null;case 10:return rd(t.type._context),He(t),null;case 17:return st(t.type)&&ra(),He(t),null;case 19:if(fe(ge),s=t.memoizedState,s===null)return He(t),null;if(r=(t.flags&128)!==0,o=s.rendering,o===null)if(r)Fi(s,!1);else{if(Ie!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(o=ca(e),o!==null){for(t.flags|=128,Fi(s,!1),r=o.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)s=n,e=r,s.flags&=14680066,o=s.alternate,o===null?(s.childLanes=0,s.lanes=e,s.child=null,s.subtreeFlags=0,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=o.childLanes,s.lanes=o.lanes,s.child=o.child,s.subtreeFlags=0,s.deletions=null,s.memoizedProps=o.memoizedProps,s.memoizedState=o.memoizedState,s.updateQueue=o.updateQueue,s.type=o.type,e=o.dependencies,s.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ue(ge,ge.current&1|2),t.child}e=e.sibling}s.tail!==null&&ke()>yi&&(t.flags|=128,r=!0,Fi(s,!1),t.lanes=4194304)}else{if(!r)if(e=ca(o),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Fi(s,!0),s.tail===null&&s.tailMode==="hidden"&&!o.alternate&&!me)return He(t),null}else 2*ke()-s.renderingStartTime>yi&&n!==1073741824&&(t.flags|=128,r=!0,Fi(s,!1),t.lanes=4194304);s.isBackwards?(o.sibling=t.child,t.child=o):(n=s.last,n!==null?n.sibling=o:t.child=o,s.last=o)}return s.tail!==null?(t=s.tail,s.rendering=t,s.tail=t.sibling,s.renderingStartTime=ke(),t.sibling=null,n=ge.current,ue(ge,r?n&1|2:n&1),t):(He(t),null);case 22:case 23:return wd(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?ut&1073741824&&(He(t),t.subtreeFlags&6&&(t.flags|=8192)):He(t),null;case 24:return null;case 25:return null}throw Error(V(156,t.tag))}function HS(e,t){switch(Jc(t),t.tag){case 1:return st(t.type)&&ra(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return gi(),fe(it),fe(Ke),ld(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return ad(t),null;case 13:if(fe(ge),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(V(340));hi()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return fe(ge),null;case 4:return gi(),null;case 10:return rd(t.type._context),null;case 22:case 23:return wd(),null;case 24:return null;default:return null}}var To=!1,Ge=!1,WS=typeof WeakSet=="function"?WeakSet:Set,H=null;function Hr(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){Ee(e,t,r)}else n.current=null}function $u(e,t,n){try{n()}catch(r){Ee(e,t,r)}}var up=!1;function GS(e,t){if(Lu=Jo,e=ig(),qc(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var i=r.anchorOffset,s=r.focusNode;r=r.focusOffset;try{n.nodeType,s.nodeType}catch{n=null;break e}var o=0,l=-1,a=-1,u=0,c=0,d=e,p=null;t:for(;;){for(var g;d!==n||i!==0&&d.nodeType!==3||(l=o+i),d!==s||r!==0&&d.nodeType!==3||(a=o+r),d.nodeType===3&&(o+=d.nodeValue.length),(g=d.firstChild)!==null;)p=d,d=g;for(;;){if(d===e)break t;if(p===n&&++u===i&&(l=o),p===s&&++c===r&&(a=o),(g=d.nextSibling)!==null)break;d=p,p=d.parentNode}d=g}n=l===-1||a===-1?null:{start:l,end:a}}else n=null}n=n||{start:0,end:0}}else n=null;for(Mu={focusedElem:e,selectionRange:n},Jo=!1,H=t;H!==null;)if(t=H,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,H=e;else for(;H!==null;){t=H;try{var v=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(v!==null){var y=v.memoizedProps,S=v.memoizedState,m=t.stateNode,f=m.getSnapshotBeforeUpdate(t.elementType===t.type?y:Rt(t.type,y),S);m.__reactInternalSnapshotBeforeUpdate=f}break;case 3:var h=t.stateNode.containerInfo;h.nodeType===1?h.textContent="":h.nodeType===9&&h.documentElement&&h.removeChild(h.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(V(163))}}catch(w){Ee(t,t.return,w)}if(e=t.sibling,e!==null){e.return=t.return,H=e;break}H=t.return}return v=up,up=!1,v}function is(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var i=r=r.next;do{if((i.tag&e)===e){var s=i.destroy;i.destroy=void 0,s!==void 0&&$u(t,n,s)}i=i.next}while(i!==r)}}function Ba(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Hu(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function tv(e){var t=e.alternate;t!==null&&(e.alternate=null,tv(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[jt],delete t[Ts],delete t[Du],delete t[kS],delete t[RS])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function nv(e){return e.tag===5||e.tag===3||e.tag===4}function cp(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||nv(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Wu(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=na));else if(r!==4&&(e=e.child,e!==null))for(Wu(e,t,n),e=e.sibling;e!==null;)Wu(e,t,n),e=e.sibling}function Gu(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Gu(e,t,n),e=e.sibling;e!==null;)Gu(e,t,n),e=e.sibling}var Be=null,Dt=!1;function yn(e,t,n){for(n=n.child;n!==null;)rv(e,t,n),n=n.sibling}function rv(e,t,n){if($t&&typeof $t.onCommitFiberUnmount=="function")try{$t.onCommitFiberUnmount(Aa,n)}catch{}switch(n.tag){case 5:Ge||Hr(n,t);case 6:var r=Be,i=Dt;Be=null,yn(e,t,n),Be=r,Dt=i,Be!==null&&(Dt?(e=Be,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):Be.removeChild(n.stateNode));break;case 18:Be!==null&&(Dt?(e=Be,n=n.stateNode,e.nodeType===8?kl(e.parentNode,n):e.nodeType===1&&kl(e,n),ys(e)):kl(Be,n.stateNode));break;case 4:r=Be,i=Dt,Be=n.stateNode.containerInfo,Dt=!0,yn(e,t,n),Be=r,Dt=i;break;case 0:case 11:case 14:case 15:if(!Ge&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){i=r=r.next;do{var s=i,o=s.destroy;s=s.tag,o!==void 0&&(s&2||s&4)&&$u(n,t,o),i=i.next}while(i!==r)}yn(e,t,n);break;case 1:if(!Ge&&(Hr(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){Ee(n,t,l)}yn(e,t,n);break;case 21:yn(e,t,n);break;case 22:n.mode&1?(Ge=(r=Ge)||n.memoizedState!==null,yn(e,t,n),Ge=r):yn(e,t,n);break;default:yn(e,t,n)}}function dp(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new WS),t.forEach(function(r){var i=t1.bind(null,e,r);n.has(r)||(n.add(r),r.then(i,i))})}}function kt(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var i=n[r];try{var s=e,o=t,l=o;e:for(;l!==null;){switch(l.tag){case 5:Be=l.stateNode,Dt=!1;break e;case 3:Be=l.stateNode.containerInfo,Dt=!0;break e;case 4:Be=l.stateNode.containerInfo,Dt=!0;break e}l=l.return}if(Be===null)throw Error(V(160));rv(s,o,i),Be=null,Dt=!1;var a=i.alternate;a!==null&&(a.return=null),i.return=null}catch(u){Ee(i,t,u)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)iv(t,e),t=t.sibling}function iv(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(kt(t,e),Ft(e),r&4){try{is(3,e,e.return),Ba(3,e)}catch(y){Ee(e,e.return,y)}try{is(5,e,e.return)}catch(y){Ee(e,e.return,y)}}break;case 1:kt(t,e),Ft(e),r&512&&n!==null&&Hr(n,n.return);break;case 5:if(kt(t,e),Ft(e),r&512&&n!==null&&Hr(n,n.return),e.flags&32){var i=e.stateNode;try{hs(i,"")}catch(y){Ee(e,e.return,y)}}if(r&4&&(i=e.stateNode,i!=null)){var s=e.memoizedProps,o=n!==null?n.memoizedProps:s,l=e.type,a=e.updateQueue;if(e.updateQueue=null,a!==null)try{l==="input"&&s.type==="radio"&&s.name!=null&&Pm(i,s),gu(l,o);var u=gu(l,s);for(o=0;o<a.length;o+=2){var c=a[o],d=a[o+1];c==="style"?Dm(i,d):c==="dangerouslySetInnerHTML"?km(i,d):c==="children"?hs(i,d):Nc(i,c,d,u)}switch(l){case"input":du(i,s);break;case"textarea":Lm(i,s);break;case"select":var p=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!s.multiple;var g=s.value;g!=null?Zr(i,!!s.multiple,g,!1):p!==!!s.multiple&&(s.defaultValue!=null?Zr(i,!!s.multiple,s.defaultValue,!0):Zr(i,!!s.multiple,s.multiple?[]:"",!1))}i[Ts]=s}catch(y){Ee(e,e.return,y)}}break;case 6:if(kt(t,e),Ft(e),r&4){if(e.stateNode===null)throw Error(V(162));i=e.stateNode,s=e.memoizedProps;try{i.nodeValue=s}catch(y){Ee(e,e.return,y)}}break;case 3:if(kt(t,e),Ft(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{ys(t.containerInfo)}catch(y){Ee(e,e.return,y)}break;case 4:kt(t,e),Ft(e);break;case 13:kt(t,e),Ft(e),i=e.child,i.flags&8192&&(s=i.memoizedState!==null,i.stateNode.isHidden=s,!s||i.alternate!==null&&i.alternate.memoizedState!==null||(vd=ke())),r&4&&dp(e);break;case 22:if(c=n!==null&&n.memoizedState!==null,e.mode&1?(Ge=(u=Ge)||c,kt(t,e),Ge=u):kt(t,e),Ft(e),r&8192){if(u=e.memoizedState!==null,(e.stateNode.isHidden=u)&&!c&&e.mode&1)for(H=e,c=e.child;c!==null;){for(d=H=c;H!==null;){switch(p=H,g=p.child,p.tag){case 0:case 11:case 14:case 15:is(4,p,p.return);break;case 1:Hr(p,p.return);var v=p.stateNode;if(typeof v.componentWillUnmount=="function"){r=p,n=p.return;try{t=r,v.props=t.memoizedProps,v.state=t.memoizedState,v.componentWillUnmount()}catch(y){Ee(r,n,y)}}break;case 5:Hr(p,p.return);break;case 22:if(p.memoizedState!==null){pp(d);continue}}g!==null?(g.return=p,H=g):pp(d)}c=c.sibling}e:for(c=null,d=e;;){if(d.tag===5){if(c===null){c=d;try{i=d.stateNode,u?(s=i.style,typeof s.setProperty=="function"?s.setProperty("display","none","important"):s.display="none"):(l=d.stateNode,a=d.memoizedProps.style,o=a!=null&&a.hasOwnProperty("display")?a.display:null,l.style.display=Rm("display",o))}catch(y){Ee(e,e.return,y)}}}else if(d.tag===6){if(c===null)try{d.stateNode.nodeValue=u?"":d.memoizedProps}catch(y){Ee(e,e.return,y)}}else if((d.tag!==22&&d.tag!==23||d.memoizedState===null||d===e)&&d.child!==null){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;d.sibling===null;){if(d.return===null||d.return===e)break e;c===d&&(c=null),d=d.return}c===d&&(c=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:kt(t,e),Ft(e),r&4&&dp(e);break;case 21:break;default:kt(t,e),Ft(e)}}function Ft(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(nv(n)){var r=n;break e}n=n.return}throw Error(V(160))}switch(r.tag){case 5:var i=r.stateNode;r.flags&32&&(hs(i,""),r.flags&=-33);var s=cp(e);Gu(e,s,i);break;case 3:case 4:var o=r.stateNode.containerInfo,l=cp(e);Wu(e,l,o);break;default:throw Error(V(161))}}catch(a){Ee(e,e.return,a)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function KS(e,t,n){H=e,sv(e)}function sv(e,t,n){for(var r=(e.mode&1)!==0;H!==null;){var i=H,s=i.child;if(i.tag===22&&r){var o=i.memoizedState!==null||To;if(!o){var l=i.alternate,a=l!==null&&l.memoizedState!==null||Ge;l=To;var u=Ge;if(To=o,(Ge=a)&&!u)for(H=i;H!==null;)o=H,a=o.child,o.tag===22&&o.memoizedState!==null?hp(i):a!==null?(a.return=o,H=a):hp(i);for(;s!==null;)H=s,sv(s),s=s.sibling;H=i,To=l,Ge=u}fp(e)}else i.subtreeFlags&8772&&s!==null?(s.return=i,H=s):fp(e)}}function fp(e){for(;H!==null;){var t=H;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:Ge||Ba(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!Ge)if(n===null)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:Rt(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var s=t.updateQueue;s!==null&&Yf(t,s,r);break;case 3:var o=t.updateQueue;if(o!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Yf(t,o,n)}break;case 5:var l=t.stateNode;if(n===null&&t.flags&4){n=l;var a=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":a.autoFocus&&n.focus();break;case"img":a.src&&(n.src=a.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var u=t.alternate;if(u!==null){var c=u.memoizedState;if(c!==null){var d=c.dehydrated;d!==null&&ys(d)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(V(163))}Ge||t.flags&512&&Hu(t)}catch(p){Ee(t,t.return,p)}}if(t===e){H=null;break}if(n=t.sibling,n!==null){n.return=t.return,H=n;break}H=t.return}}function pp(e){for(;H!==null;){var t=H;if(t===e){H=null;break}var n=t.sibling;if(n!==null){n.return=t.return,H=n;break}H=t.return}}function hp(e){for(;H!==null;){var t=H;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{Ba(4,t)}catch(a){Ee(t,n,a)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var i=t.return;try{r.componentDidMount()}catch(a){Ee(t,i,a)}}var s=t.return;try{Hu(t)}catch(a){Ee(t,s,a)}break;case 5:var o=t.return;try{Hu(t)}catch(a){Ee(t,o,a)}}}catch(a){Ee(t,t.return,a)}if(t===e){H=null;break}var l=t.sibling;if(l!==null){l.return=t.return,H=l;break}H=t.return}}var QS=Math.ceil,pa=dn.ReactCurrentDispatcher,md=dn.ReactCurrentOwner,Ct=dn.ReactCurrentBatchConfig,ie=0,Ne=null,Ae=null,je=0,ut=0,Wr=Qn(0),Ie=0,Rs=null,Sr=0,ja=0,gd=0,ss=null,nt=null,vd=0,yi=1/0,Qt=null,ha=!1,Ku=null,Nn=null,Co=!1,bn=null,ma=0,os=0,Qu=null,Uo=-1,$o=0;function qe(){return ie&6?ke():Uo!==-1?Uo:Uo=ke()}function zn(e){return e.mode&1?ie&2&&je!==0?je&-je:bS.transition!==null?($o===0&&($o=Um()),$o):(e=oe,e!==0||(e=window.event,e=e===void 0?16:Ym(e.type)),e):1}function It(e,t,n,r){if(50<os)throw os=0,Qu=null,Error(V(185));Qs(e,n,r),(!(ie&2)||e!==Ne)&&(e===Ne&&(!(ie&2)&&(ja|=n),Ie===4&&Pn(e,je)),ot(e,r),n===1&&ie===0&&!(t.mode&1)&&(yi=ke()+500,Fa&&Yn()))}function ot(e,t){var n=e.callbackNode;bw(e,t);var r=Zo(e,e===Ne?je:0);if(r===0)n!==null&&Tf(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&Tf(n),t===1)e.tag===0?DS(mp.bind(null,e)):hg(mp.bind(null,e)),LS(function(){!(ie&6)&&Yn()}),n=null;else{switch($m(r)){case 1:n=$c;break;case 4:n=Bm;break;case 16:n=qo;break;case 536870912:n=jm;break;default:n=qo}n=pv(n,ov.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ov(e,t){if(Uo=-1,$o=0,ie&6)throw Error(V(327));var n=e.callbackNode;if(ri()&&e.callbackNode!==n)return null;var r=Zo(e,e===Ne?je:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=ga(e,r);else{t=r;var i=ie;ie|=2;var s=lv();(Ne!==e||je!==t)&&(Qt=null,yi=ke()+500,mr(e,t));do try{qS();break}catch(l){av(e,l)}while(1);nd(),pa.current=s,ie=i,Ae!==null?t=0:(Ne=null,je=0,t=Ie)}if(t!==0){if(t===2&&(i=xu(e),i!==0&&(r=i,t=Yu(e,i))),t===1)throw n=Rs,mr(e,0),Pn(e,r),ot(e,ke()),n;if(t===6)Pn(e,r);else{if(i=e.current.alternate,!(r&30)&&!YS(i)&&(t=ga(e,r),t===2&&(s=xu(e),s!==0&&(r=s,t=Yu(e,s))),t===1))throw n=Rs,mr(e,0),Pn(e,r),ot(e,ke()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(V(345));case 2:tr(e,nt,Qt);break;case 3:if(Pn(e,r),(r&130023424)===r&&(t=vd+500-ke(),10<t)){if(Zo(e,0)!==0)break;if(i=e.suspendedLanes,(i&r)!==r){qe(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Ru(tr.bind(null,e,nt,Qt),t);break}tr(e,nt,Qt);break;case 4:if(Pn(e,r),(r&4194240)===r)break;for(t=e.eventTimes,i=-1;0<r;){var o=31-Ot(r);s=1<<o,o=t[o],o>i&&(i=o),r&=~s}if(r=i,r=ke()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*QS(r/1960))-r,10<r){e.timeoutHandle=Ru(tr.bind(null,e,nt,Qt),r);break}tr(e,nt,Qt);break;case 5:tr(e,nt,Qt);break;default:throw Error(V(329))}}}return ot(e,ke()),e.callbackNode===n?ov.bind(null,e):null}function Yu(e,t){var n=ss;return e.current.memoizedState.isDehydrated&&(mr(e,t).flags|=256),e=ga(e,t),e!==2&&(t=nt,nt=n,t!==null&&Xu(t)),e}function Xu(e){nt===null?nt=e:nt.push.apply(nt,e)}function YS(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var i=n[r],s=i.getSnapshot;i=i.value;try{if(!_t(s(),i))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Pn(e,t){for(t&=~gd,t&=~ja,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ot(t),r=1<<n;e[n]=-1,t&=~r}}function mp(e){if(ie&6)throw Error(V(327));ri();var t=Zo(e,0);if(!(t&1))return ot(e,ke()),null;var n=ga(e,t);if(e.tag!==0&&n===2){var r=xu(e);r!==0&&(t=r,n=Yu(e,r))}if(n===1)throw n=Rs,mr(e,0),Pn(e,t),ot(e,ke()),n;if(n===6)throw Error(V(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,tr(e,nt,Qt),ot(e,ke()),null}function yd(e,t){var n=ie;ie|=1;try{return e(t)}finally{ie=n,ie===0&&(yi=ke()+500,Fa&&Yn())}}function xr(e){bn!==null&&bn.tag===0&&!(ie&6)&&ri();var t=ie;ie|=1;var n=Ct.transition,r=oe;try{if(Ct.transition=null,oe=1,e)return e()}finally{oe=r,Ct.transition=n,ie=t,!(ie&6)&&Yn()}}function wd(){ut=Wr.current,fe(Wr)}function mr(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,PS(n)),Ae!==null)for(n=Ae.return;n!==null;){var r=n;switch(Jc(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&ra();break;case 3:gi(),fe(it),fe(Ke),ld();break;case 5:ad(r);break;case 4:gi();break;case 13:fe(ge);break;case 19:fe(ge);break;case 10:rd(r.type._context);break;case 22:case 23:wd()}n=n.return}if(Ne=e,Ae=e=Bn(e.current,null),je=ut=t,Ie=0,Rs=null,gd=ja=Sr=0,nt=ss=null,sr!==null){for(t=0;t<sr.length;t++)if(n=sr[t],r=n.interleaved,r!==null){n.interleaved=null;var i=r.next,s=n.pending;if(s!==null){var o=s.next;s.next=i,r.next=o}n.pending=r}sr=null}return e}function av(e,t){do{var n=Ae;try{if(nd(),zo.current=fa,da){for(var r=ye.memoizedState;r!==null;){var i=r.queue;i!==null&&(i.pending=null),r=r.next}da=!1}if(wr=0,Fe=Oe=ye=null,rs=!1,Ls=0,md.current=null,n===null||n.return===null){Ie=1,Rs=t,Ae=null;break}e:{var s=e,o=n.return,l=n,a=t;if(t=je,l.flags|=32768,a!==null&&typeof a=="object"&&typeof a.then=="function"){var u=a,c=l,d=c.tag;if(!(c.mode&1)&&(d===0||d===11||d===15)){var p=c.alternate;p?(c.updateQueue=p.updateQueue,c.memoizedState=p.memoizedState,c.lanes=p.lanes):(c.updateQueue=null,c.memoizedState=null)}var g=np(o);if(g!==null){g.flags&=-257,rp(g,o,l,s,t),g.mode&1&&tp(s,u,t),t=g,a=u;var v=t.updateQueue;if(v===null){var y=new Set;y.add(a),t.updateQueue=y}else v.add(a);break e}else{if(!(t&1)){tp(s,u,t),Sd();break e}a=Error(V(426))}}else if(me&&l.mode&1){var S=np(o);if(S!==null){!(S.flags&65536)&&(S.flags|=256),rp(S,o,l,s,t),ed(vi(a,l));break e}}s=a=vi(a,l),Ie!==4&&(Ie=2),ss===null?ss=[s]:ss.push(s),s=o;do{switch(s.tag){case 3:s.flags|=65536,t&=-t,s.lanes|=t;var m=Hg(s,a,t);Qf(s,m);break e;case 1:l=a;var f=s.type,h=s.stateNode;if(!(s.flags&128)&&(typeof f.getDerivedStateFromError=="function"||h!==null&&typeof h.componentDidCatch=="function"&&(Nn===null||!Nn.has(h)))){s.flags|=65536,t&=-t,s.lanes|=t;var w=Wg(s,l,t);Qf(s,w);break e}}s=s.return}while(s!==null)}cv(n)}catch(E){t=E,Ae===n&&n!==null&&(Ae=n=n.return);continue}break}while(1)}function lv(){var e=pa.current;return pa.current=fa,e===null?fa:e}function Sd(){(Ie===0||Ie===3||Ie===2)&&(Ie=4),Ne===null||!(Sr&268435455)&&!(ja&268435455)||Pn(Ne,je)}function ga(e,t){var n=ie;ie|=2;var r=lv();(Ne!==e||je!==t)&&(Qt=null,mr(e,t));do try{XS();break}catch(i){av(e,i)}while(1);if(nd(),ie=n,pa.current=r,Ae!==null)throw Error(V(261));return Ne=null,je=0,Ie}function XS(){for(;Ae!==null;)uv(Ae)}function qS(){for(;Ae!==null&&!Ew();)uv(Ae)}function uv(e){var t=fv(e.alternate,e,ut);e.memoizedProps=e.pendingProps,t===null?cv(e):Ae=t,md.current=null}function cv(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=HS(n,t),n!==null){n.flags&=32767,Ae=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{Ie=6,Ae=null;return}}else if(n=$S(n,t,ut),n!==null){Ae=n;return}if(t=t.sibling,t!==null){Ae=t;return}Ae=t=e}while(t!==null);Ie===0&&(Ie=5)}function tr(e,t,n){var r=oe,i=Ct.transition;try{Ct.transition=null,oe=1,ZS(e,t,n,r)}finally{Ct.transition=i,oe=r}return null}function ZS(e,t,n,r){do ri();while(bn!==null);if(ie&6)throw Error(V(327));n=e.finishedWork;var i=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(V(177));e.callbackNode=null,e.callbackPriority=0;var s=n.lanes|n.childLanes;if(Aw(e,s),e===Ne&&(Ae=Ne=null,je=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Co||(Co=!0,pv(qo,function(){return ri(),null})),s=(n.flags&15990)!==0,n.subtreeFlags&15990||s){s=Ct.transition,Ct.transition=null;var o=oe;oe=1;var l=ie;ie|=4,md.current=null,GS(e,n),iv(n,e),yS(Mu),Jo=!!Lu,Mu=Lu=null,e.current=n,KS(n),Tw(),ie=l,oe=o,Ct.transition=s}else e.current=n;if(Co&&(Co=!1,bn=e,ma=i),s=e.pendingLanes,s===0&&(Nn=null),Lw(n.stateNode),ot(e,ke()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)i=t[n],r(i.value,{componentStack:i.stack,digest:i.digest});if(ha)throw ha=!1,e=Ku,Ku=null,e;return ma&1&&e.tag!==0&&ri(),s=e.pendingLanes,s&1?e===Qu?os++:(os=0,Qu=e):os=0,Yn(),null}function ri(){if(bn!==null){var e=$m(ma),t=Ct.transition,n=oe;try{if(Ct.transition=null,oe=16>e?16:e,bn===null)var r=!1;else{if(e=bn,bn=null,ma=0,ie&6)throw Error(V(331));var i=ie;for(ie|=4,H=e.current;H!==null;){var s=H,o=s.child;if(H.flags&16){var l=s.deletions;if(l!==null){for(var a=0;a<l.length;a++){var u=l[a];for(H=u;H!==null;){var c=H;switch(c.tag){case 0:case 11:case 15:is(8,c,s)}var d=c.child;if(d!==null)d.return=c,H=d;else for(;H!==null;){c=H;var p=c.sibling,g=c.return;if(tv(c),c===u){H=null;break}if(p!==null){p.return=g,H=p;break}H=g}}}var v=s.alternate;if(v!==null){var y=v.child;if(y!==null){v.child=null;do{var S=y.sibling;y.sibling=null,y=S}while(y!==null)}}H=s}}if(s.subtreeFlags&2064&&o!==null)o.return=s,H=o;else e:for(;H!==null;){if(s=H,s.flags&2048)switch(s.tag){case 0:case 11:case 15:is(9,s,s.return)}var m=s.sibling;if(m!==null){m.return=s.return,H=m;break e}H=s.return}}var f=e.current;for(H=f;H!==null;){o=H;var h=o.child;if(o.subtreeFlags&2064&&h!==null)h.return=o,H=h;else e:for(o=f;H!==null;){if(l=H,l.flags&2048)try{switch(l.tag){case 0:case 11:case 15:Ba(9,l)}}catch(E){Ee(l,l.return,E)}if(l===o){H=null;break e}var w=l.sibling;if(w!==null){w.return=l.return,H=w;break e}H=l.return}}if(ie=i,Yn(),$t&&typeof $t.onPostCommitFiberRoot=="function")try{$t.onPostCommitFiberRoot(Aa,e)}catch{}r=!0}return r}finally{oe=n,Ct.transition=t}}return!1}function gp(e,t,n){t=vi(n,t),t=Hg(e,t,1),e=Fn(e,t,1),t=qe(),e!==null&&(Qs(e,1,t),ot(e,t))}function Ee(e,t,n){if(e.tag===3)gp(e,e,n);else for(;t!==null;){if(t.tag===3){gp(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Nn===null||!Nn.has(r))){e=vi(n,e),e=Wg(t,e,1),t=Fn(t,e,1),e=qe(),t!==null&&(Qs(t,1,e),ot(t,e));break}}t=t.return}}function JS(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=qe(),e.pingedLanes|=e.suspendedLanes&n,Ne===e&&(je&n)===n&&(Ie===4||Ie===3&&(je&130023424)===je&&500>ke()-vd?mr(e,0):gd|=n),ot(e,t)}function dv(e,t){t===0&&(e.mode&1?(t=ho,ho<<=1,!(ho&130023424)&&(ho=4194304)):t=1);var n=qe();e=an(e,t),e!==null&&(Qs(e,t,n),ot(e,n))}function e1(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),dv(e,n)}function t1(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;i!==null&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(V(314))}r!==null&&r.delete(t),dv(e,n)}var fv;fv=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||it.current)rt=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return rt=!1,US(e,t,n);rt=!!(e.flags&131072)}else rt=!1,me&&t.flags&1048576&&mg(t,oa,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;jo(e,t),e=t.pendingProps;var i=pi(t,Ke.current);ni(t,n),i=cd(null,t,r,e,i,n);var s=dd();return t.flags|=1,typeof i=="object"&&i!==null&&typeof i.render=="function"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,st(r)?(s=!0,ia(t)):s=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,sd(t),i.updater=Na,t.stateNode=i,i._reactInternals=t,Vu(t,r,e,n),t=zu(null,t,r,!0,s,n)):(t.tag=0,me&&s&&Zc(t),Xe(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(jo(e,t),e=t.pendingProps,i=r._init,r=i(r._payload),t.type=r,i=t.tag=r1(r),e=Rt(r,e),i){case 0:t=Nu(null,t,r,e,n);break e;case 1:t=op(null,t,r,e,n);break e;case 11:t=ip(null,t,r,e,n);break e;case 14:t=sp(null,t,r,Rt(r.type,e),n);break e}throw Error(V(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Rt(r,i),Nu(e,t,r,i,n);case 1:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Rt(r,i),op(e,t,r,i,n);case 3:e:{if(Yg(t),e===null)throw Error(V(387));r=t.pendingProps,s=t.memoizedState,i=s.element,wg(e,t),ua(t,r,null,n);var o=t.memoizedState;if(r=o.element,s.isDehydrated)if(s={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=s,t.memoizedState=s,t.flags&256){i=vi(Error(V(423)),t),t=ap(e,t,r,n,i);break e}else if(r!==i){i=vi(Error(V(424)),t),t=ap(e,t,r,n,i);break e}else for(dt=Vn(t.stateNode.containerInfo.firstChild),ft=t,me=!0,At=null,n=Tg(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(hi(),r===i){t=ln(e,t,n);break e}Xe(e,t,r,n)}t=t.child}return t;case 5:return Cg(t),e===null&&Ou(t),r=t.type,i=t.pendingProps,s=e!==null?e.memoizedProps:null,o=i.children,ku(r,i)?o=null:s!==null&&ku(r,s)&&(t.flags|=32),Qg(e,t),Xe(e,t,o,n),t.child;case 6:return e===null&&Ou(t),null;case 13:return Xg(e,t,n);case 4:return od(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=mi(t,null,r,n):Xe(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Rt(r,i),ip(e,t,r,i,n);case 7:return Xe(e,t,t.pendingProps,n),t.child;case 8:return Xe(e,t,t.pendingProps.children,n),t.child;case 12:return Xe(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value,ue(aa,r._currentValue),r._currentValue=o,s!==null)if(_t(s.value,o)){if(s.children===i.children&&!it.current){t=ln(e,t,n);break e}}else for(s=t.child,s!==null&&(s.return=t);s!==null;){var l=s.dependencies;if(l!==null){o=s.child;for(var a=l.firstContext;a!==null;){if(a.context===r){if(s.tag===1){a=Jt(-1,n&-n),a.tag=2;var u=s.updateQueue;if(u!==null){u=u.shared;var c=u.pending;c===null?a.next=a:(a.next=c.next,c.next=a),u.pending=a}}s.lanes|=n,a=s.alternate,a!==null&&(a.lanes|=n),Iu(s.return,n,t),l.lanes|=n;break}a=a.next}}else if(s.tag===10)o=s.type===t.type?null:s.child;else if(s.tag===18){if(o=s.return,o===null)throw Error(V(341));o.lanes|=n,l=o.alternate,l!==null&&(l.lanes|=n),Iu(o,n,t),o=s.sibling}else o=s.child;if(o!==null)o.return=s;else for(o=s;o!==null;){if(o===t){o=null;break}if(s=o.sibling,s!==null){s.return=o.return,o=s;break}o=o.return}s=o}Xe(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,ni(t,n),i=Pt(i),r=r(i),t.flags|=1,Xe(e,t,r,n),t.child;case 14:return r=t.type,i=Rt(r,t.pendingProps),i=Rt(r.type,i),sp(e,t,r,i,n);case 15:return Gg(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Rt(r,i),jo(e,t),t.tag=1,st(r)?(e=!0,ia(t)):e=!1,ni(t,n),xg(t,r,i),Vu(t,r,i,n),zu(null,t,r,!0,e,n);case 19:return qg(e,t,n);case 22:return Kg(e,t,n)}throw Error(V(156,t.tag))};function pv(e,t){return zm(e,t)}function n1(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Tt(e,t,n,r){return new n1(e,t,n,r)}function xd(e){return e=e.prototype,!(!e||!e.isReactComponent)}function r1(e){if(typeof e=="function")return xd(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Bc)return 11;if(e===jc)return 14}return 2}function Bn(e,t){var n=e.alternate;return n===null?(n=Tt(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ho(e,t,n,r,i,s){var o=2;if(r=e,typeof e=="function")xd(e)&&(o=1);else if(typeof e=="string")o=5;else e:switch(e){case _r:return gr(n.children,i,s,t);case zc:o=8,i|=8;break;case ou:return e=Tt(12,n,t,i|2),e.elementType=ou,e.lanes=s,e;case au:return e=Tt(13,n,t,i),e.elementType=au,e.lanes=s,e;case lu:return e=Tt(19,n,t,i),e.elementType=lu,e.lanes=s,e;case Em:return Ua(n,i,s,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Sm:o=10;break e;case xm:o=9;break e;case Bc:o=11;break e;case jc:o=14;break e;case xn:o=16,r=null;break e}throw Error(V(130,e==null?e:typeof e,""))}return t=Tt(o,n,t,i),t.elementType=e,t.type=r,t.lanes=s,t}function gr(e,t,n,r){return e=Tt(7,e,r,t),e.lanes=n,e}function Ua(e,t,n,r){return e=Tt(22,e,r,t),e.elementType=Em,e.lanes=n,e.stateNode={isHidden:!1},e}function Vl(e,t,n){return e=Tt(6,e,null,t),e.lanes=n,e}function Fl(e,t,n){return t=Tt(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function i1(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=vl(0),this.expirationTimes=vl(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=vl(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Ed(e,t,n,r,i,s,o,l,a){return e=new i1(e,t,n,l,a),t===1?(t=1,s===!0&&(t|=8)):t=0,s=Tt(3,null,null,t),e.current=s,s.stateNode=e,s.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},sd(s),e}function s1(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Ir,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function hv(e){if(!e)return Hn;e=e._reactInternals;e:{if(Lr(e)!==e||e.tag!==1)throw Error(V(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(st(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(V(171))}if(e.tag===1){var n=e.type;if(st(n))return pg(e,n,t)}return t}function mv(e,t,n,r,i,s,o,l,a){return e=Ed(n,r,!0,e,i,s,o,l,a),e.context=hv(null),n=e.current,r=qe(),i=zn(n),s=Jt(r,i),s.callback=t??null,Fn(n,s,i),e.current.lanes=i,Qs(e,i,r),ot(e,r),e}function $a(e,t,n,r){var i=t.current,s=qe(),o=zn(i);return n=hv(n),t.context===null?t.context=n:t.pendingContext=n,t=Jt(s,o),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=Fn(i,t,o),e!==null&&(It(e,i,o,s),No(e,i,o)),o}function va(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function vp(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Td(e,t){vp(e,t),(e=e.alternate)&&vp(e,t)}function o1(){return null}var gv=typeof reportError=="function"?reportError:function(e){console.error(e)};function Cd(e){this._internalRoot=e}Ha.prototype.render=Cd.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(V(409));$a(e,t,null,null)};Ha.prototype.unmount=Cd.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;xr(function(){$a(null,e,null,null)}),t[on]=null}};function Ha(e){this._internalRoot=e}Ha.prototype.unstable_scheduleHydration=function(e){if(e){var t=Gm();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Cn.length&&t!==0&&t<Cn[n].priority;n++);Cn.splice(n,0,e),n===0&&Qm(e)}};function Pd(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function Wa(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function yp(){}function a1(e,t,n,r,i){if(i){if(typeof r=="function"){var s=r;r=function(){var u=va(o);s.call(u)}}var o=mv(t,r,e,0,null,!1,!1,"",yp);return e._reactRootContainer=o,e[on]=o.current,xs(e.nodeType===8?e.parentNode:e),xr(),o}for(;i=e.lastChild;)e.removeChild(i);if(typeof r=="function"){var l=r;r=function(){var u=va(a);l.call(u)}}var a=Ed(e,0,!1,null,null,!1,!1,"",yp);return e._reactRootContainer=a,e[on]=a.current,xs(e.nodeType===8?e.parentNode:e),xr(function(){$a(t,a,n,r)}),a}function Ga(e,t,n,r,i){var s=n._reactRootContainer;if(s){var o=s;if(typeof i=="function"){var l=i;i=function(){var a=va(o);l.call(a)}}$a(t,o,e,i)}else o=a1(n,t,e,i,r);return va(o)}Hm=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Qi(t.pendingLanes);n!==0&&(Hc(t,n|1),ot(t,ke()),!(ie&6)&&(yi=ke()+500,Yn()))}break;case 13:xr(function(){var r=an(e,1);if(r!==null){var i=qe();It(r,e,1,i)}}),Td(e,1)}};Wc=function(e){if(e.tag===13){var t=an(e,134217728);if(t!==null){var n=qe();It(t,e,134217728,n)}Td(e,134217728)}};Wm=function(e){if(e.tag===13){var t=zn(e),n=an(e,t);if(n!==null){var r=qe();It(n,e,t,r)}Td(e,t)}};Gm=function(){return oe};Km=function(e,t){var n=oe;try{return oe=e,t()}finally{oe=n}};yu=function(e,t,n){switch(t){case"input":if(du(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Va(r);if(!i)throw Error(V(90));Cm(r),du(r,i)}}}break;case"textarea":Lm(e,n);break;case"select":t=n.value,t!=null&&Zr(e,!!n.multiple,t,!1)}};Om=yd;Im=xr;var l1={usingClientEntryPoint:!1,Events:[Xs,zr,Va,bm,Am,yd]},Ni={findFiberByHostInstance:ir,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},u1={bundleType:Ni.bundleType,version:Ni.version,rendererPackageName:Ni.rendererPackageName,rendererConfig:Ni.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:dn.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Fm(e),e===null?null:e.stateNode},findFiberByHostInstance:Ni.findFiberByHostInstance||o1,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Po=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Po.isDisabled&&Po.supportsFiber)try{Aa=Po.inject(u1),$t=Po}catch{}}mt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=l1;mt.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Pd(t))throw Error(V(200));return s1(e,t,null,n)};mt.createRoot=function(e,t){if(!Pd(e))throw Error(V(299));var n=!1,r="",i=gv;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=Ed(e,1,!1,null,null,n,!1,r,i),e[on]=t.current,xs(e.nodeType===8?e.parentNode:e),new Cd(t)};mt.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(V(188)):(e=Object.keys(e).join(","),Error(V(268,e)));return e=Fm(t),e=e===null?null:e.stateNode,e};mt.flushSync=function(e){return xr(e)};mt.hydrate=function(e,t,n){if(!Wa(t))throw Error(V(200));return Ga(null,e,t,!0,n)};mt.hydrateRoot=function(e,t,n){if(!Pd(e))throw Error(V(405));var r=n!=null&&n.hydratedSources||null,i=!1,s="",o=gv;if(n!=null&&(n.unstable_strictMode===!0&&(i=!0),n.identifierPrefix!==void 0&&(s=n.identifierPrefix),n.onRecoverableError!==void 0&&(o=n.onRecoverableError)),t=mv(t,null,e,1,n??null,i,!1,s,o),e[on]=t.current,xs(e),r)for(e=0;e<r.length;e++)n=r[e],i=n._getVersion,i=i(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Ha(t)};mt.render=function(e,t,n){if(!Wa(t))throw Error(V(200));return Ga(null,e,t,!1,n)};mt.unmountComponentAtNode=function(e){if(!Wa(e))throw Error(V(40));return e._reactRootContainer?(xr(function(){Ga(null,null,e,!1,function(){e._reactRootContainer=null,e[on]=null})}),!0):!1};mt.unstable_batchedUpdates=yd;mt.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Wa(n))throw Error(V(200));if(e==null||e._reactInternals===void 0)throw Error(V(38));return Ga(e,t,n,!1,r)};mt.version="18.2.0-next-9e3b772b8-20220608";function vv(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(vv)}catch(e){console.error(e)}}vv(),mm.exports=mt;var yv=mm.exports;const c1=im(yv),d1=rm({__proto__:null,default:c1},[yv]);/**
 * @remix-run/router v1.14.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function Te(){return Te=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Te.apply(this,arguments)}var Me;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Me||(Me={}));const wp="popstate";function f1(e){e===void 0&&(e={});function t(r,i){let{pathname:s,search:o,hash:l}=r.location;return Ds("",{pathname:s,search:o,hash:l},i.state&&i.state.usr||null,i.state&&i.state.key||"default")}function n(r,i){return typeof i=="string"?i:Tr(i)}return h1(t,n,null,e)}function Z(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function Er(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function p1(){return Math.random().toString(36).substr(2,8)}function Sp(e,t){return{usr:e.state,key:e.key,idx:t}}function Ds(e,t,n,r){return n===void 0&&(n=null),Te({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?fn(t):t,{state:n,key:t&&t.key||r||p1()})}function Tr(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&n!=="?"&&(t+=n.charAt(0)==="?"?n:"?"+n),r&&r!=="#"&&(t+=r.charAt(0)==="#"?r:"#"+r),t}function fn(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function h1(e,t,n,r){r===void 0&&(r={});let{window:i=document.defaultView,v5Compat:s=!1}=r,o=i.history,l=Me.Pop,a=null,u=c();u==null&&(u=0,o.replaceState(Te({},o.state,{idx:u}),""));function c(){return(o.state||{idx:null}).idx}function d(){l=Me.Pop;let S=c(),m=S==null?null:S-u;u=S,a&&a({action:l,location:y.location,delta:m})}function p(S,m){l=Me.Push;let f=Ds(y.location,S,m);n&&n(f,S),u=c()+1;let h=Sp(f,u),w=y.createHref(f);try{o.pushState(h,"",w)}catch(E){if(E instanceof DOMException&&E.name==="DataCloneError")throw E;i.location.assign(w)}s&&a&&a({action:l,location:y.location,delta:1})}function g(S,m){l=Me.Replace;let f=Ds(y.location,S,m);n&&n(f,S),u=c();let h=Sp(f,u),w=y.createHref(f);o.replaceState(h,"",w),s&&a&&a({action:l,location:y.location,delta:0})}function v(S){let m=i.location.origin!=="null"?i.location.origin:i.location.href,f=typeof S=="string"?S:Tr(S);return Z(m,"No window.location.(origin|href) available to create URL for href: "+f),new URL(f,m)}let y={get action(){return l},get location(){return e(i,o)},listen(S){if(a)throw new Error("A history only accepts one active listener");return i.addEventListener(wp,d),a=S,()=>{i.removeEventListener(wp,d),a=null}},createHref(S){return t(i,S)},createURL:v,encodeLocation(S){let m=v(S);return{pathname:m.pathname,search:m.search,hash:m.hash}},push:p,replace:g,go(S){return o.go(S)}};return y}var Se;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(Se||(Se={}));const m1=new Set(["lazy","caseSensitive","path","id","index","children"]);function g1(e){return e.index===!0}function qu(e,t,n,r){return n===void 0&&(n=[]),r===void 0&&(r={}),e.map((i,s)=>{let o=[...n,s],l=typeof i.id=="string"?i.id:o.join("-");if(Z(i.index!==!0||!i.children,"Cannot specify children on an index route"),Z(!r[l],'Found a route id collision on id "'+l+`".  Route id's must be globally unique within Data Router usages`),g1(i)){let a=Te({},i,t(i),{id:l});return r[l]=a,a}else{let a=Te({},i,t(i),{id:l,children:void 0});return r[l]=a,i.children&&(a.children=qu(i.children,t,o,r)),a}})}function Gr(e,t,n){n===void 0&&(n="/");let r=typeof t=="string"?fn(t):t,i=un(r.pathname||"/",n);if(i==null)return null;let s=wv(e);y1(s);let o=null;for(let l=0;o==null&&l<s.length;++l)o=M1(s[l],R1(i));return o}function v1(e,t){let{route:n,pathname:r,params:i}=e;return{id:n.id,pathname:r,params:i,data:t[n.id],handle:n.handle}}function wv(e,t,n,r){t===void 0&&(t=[]),n===void 0&&(n=[]),r===void 0&&(r="");let i=(s,o,l)=>{let a={relativePath:l===void 0?s.path||"":l,caseSensitive:s.caseSensitive===!0,childrenIndex:o,route:s};a.relativePath.startsWith("/")&&(Z(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path '+('"'+r+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),a.relativePath=a.relativePath.slice(r.length));let u=en([r,a.relativePath]),c=n.concat(a);s.children&&s.children.length>0&&(Z(s.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+u+'".')),wv(s.children,t,c,u)),!(s.path==null&&!s.index)&&t.push({path:u,score:P1(u,s.index),routesMeta:c})};return e.forEach((s,o)=>{var l;if(s.path===""||!((l=s.path)!=null&&l.includes("?")))i(s,o);else for(let a of Sv(s.path))i(s,o,a)}),t}function Sv(e){let t=e.split("/");if(t.length===0)return[];let[n,...r]=t,i=n.endsWith("?"),s=n.replace(/\?$/,"");if(r.length===0)return i?[s,""]:[s];let o=Sv(r.join("/")),l=[];return l.push(...o.map(a=>a===""?s:[s,a].join("/"))),i&&l.push(...o),l.map(a=>e.startsWith("/")&&a===""?"/":a)}function y1(e){e.sort((t,n)=>t.score!==n.score?n.score-t.score:L1(t.routesMeta.map(r=>r.childrenIndex),n.routesMeta.map(r=>r.childrenIndex)))}const w1=/^:[\w-]+$/,S1=3,x1=2,E1=1,T1=10,C1=-2,xp=e=>e==="*";function P1(e,t){let n=e.split("/"),r=n.length;return n.some(xp)&&(r+=C1),t&&(r+=x1),n.filter(i=>!xp(i)).reduce((i,s)=>i+(w1.test(s)?S1:s===""?E1:T1),r)}function L1(e,t){return e.length===t.length&&e.slice(0,-1).every((r,i)=>r===t[i])?e[e.length-1]-t[t.length-1]:0}function M1(e,t){let{routesMeta:n}=e,r={},i="/",s=[];for(let o=0;o<n.length;++o){let l=n[o],a=o===n.length-1,u=i==="/"?t:t.slice(i.length)||"/",c=Zu({path:l.relativePath,caseSensitive:l.caseSensitive,end:a},u);if(!c)return null;Object.assign(r,c.params);let d=l.route;s.push({params:r,pathname:en([i,c.pathname]),pathnameBase:O1(en([i,c.pathnameBase])),route:d}),c.pathnameBase!=="/"&&(i=en([i,c.pathnameBase]))}return s}function Zu(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=k1(e.path,e.caseSensitive,e.end),i=t.match(n);if(!i)return null;let s=i[0],o=s.replace(/(.)\/+$/,"$1"),l=i.slice(1);return{params:r.reduce((u,c,d)=>{let{paramName:p,isOptional:g}=c;if(p==="*"){let y=l[d]||"";o=s.slice(0,s.length-y.length).replace(/(.)\/+$/,"$1")}const v=l[d];return g&&!v?u[p]=void 0:u[p]=D1(v||"",p),u},{}),pathname:s,pathnameBase:o,pattern:e}}function k1(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!0),Er(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let r=[],i="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(o,l,a)=>(r.push({paramName:l,isOptional:a!=null}),a?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(r.push({paramName:"*"}),i+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?i+="\\/*$":e!==""&&e!=="/"&&(i+="(?:(?=\\/|$))"),[new RegExp(i,t?void 0:"i"),r]}function R1(e){try{return decodeURI(e)}catch(t){return Er(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function D1(e,t){try{return decodeURIComponent(e)}catch(n){return Er(!1,'The value for the URL param "'+t+'" will not be decoded because'+(' the string "'+e+'" is a malformed URL segment. This is probably')+(" due to a bad percent encoding ("+n+").")),e}}function un(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&r!=="/"?null:e.slice(n)||"/"}function b1(e,t){t===void 0&&(t="/");let{pathname:n,search:r="",hash:i=""}=typeof e=="string"?fn(e):e;return{pathname:n?n.startsWith("/")?n:A1(n,t):t,search:I1(r),hash:_1(i)}}function A1(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(i=>{i===".."?n.length>1&&n.pop():i!=="."&&n.push(i)}),n.length>1?n.join("/"):"/"}function Nl(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the ")+("`to."+n+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function xv(e){return e.filter((t,n)=>n===0||t.route.path&&t.route.path.length>0)}function Ka(e,t){let n=xv(e);return t?n.map((r,i)=>i===e.length-1?r.pathname:r.pathnameBase):n.map(r=>r.pathnameBase)}function Qa(e,t,n,r){r===void 0&&(r=!1);let i;typeof e=="string"?i=fn(e):(i=Te({},e),Z(!i.pathname||!i.pathname.includes("?"),Nl("?","pathname","search",i)),Z(!i.pathname||!i.pathname.includes("#"),Nl("#","pathname","hash",i)),Z(!i.search||!i.search.includes("#"),Nl("#","search","hash",i)));let s=e===""||i.pathname==="",o=s?"/":i.pathname,l;if(o==null)l=n;else{let d=t.length-1;if(!r&&o.startsWith("..")){let p=o.split("/");for(;p[0]==="..";)p.shift(),d-=1;i.pathname=p.join("/")}l=d>=0?t[d]:"/"}let a=b1(i,l),u=o&&o!=="/"&&o.endsWith("/"),c=(s||o===".")&&n.endsWith("/");return!a.pathname.endsWith("/")&&(u||c)&&(a.pathname+="/"),a}const en=e=>e.join("/").replace(/\/\/+/g,"/"),O1=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),I1=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,_1=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;class Ld{constructor(t,n,r,i){i===void 0&&(i=!1),this.status=t,this.statusText=n||"",this.internal=i,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function Ev(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const Tv=["post","put","patch","delete"],V1=new Set(Tv),F1=["get",...Tv],N1=new Set(F1),z1=new Set([301,302,303,307,308]),B1=new Set([307,308]),zl={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},j1={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},zi={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},Cv=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,U1=e=>({hasErrorBoundary:!!e.hasErrorBoundary}),Pv="remix-router-transitions";function $1(e){const t=e.window?e.window:typeof window<"u"?window:void 0,n=typeof t<"u"&&typeof t.document<"u"&&typeof t.document.createElement<"u",r=!n;Z(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let i;if(e.mapRouteProperties)i=e.mapRouteProperties;else if(e.detectErrorBoundary){let L=e.detectErrorBoundary;i=D=>({hasErrorBoundary:L(D)})}else i=U1;let s={},o=qu(e.routes,i,void 0,s),l,a=e.basename||"/",u=Te({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1},e.future),c=null,d=new Set,p=null,g=null,v=null,y=e.hydrationData!=null,S=Gr(o,e.history.location,a),m=null;if(S==null){let L=St(404,{pathname:e.history.location.pathname}),{matches:D,route:A}=Rp(o);S=D,m={[A.id]:L}}let f,h=S.some(L=>L.route.lazy),w=S.some(L=>L.route.loader);if(h)f=!1;else if(!w)f=!0;else if(u.v7_partialHydration){let L=e.hydrationData?e.hydrationData.loaderData:null,D=e.hydrationData?e.hydrationData.errors:null;f=S.every(A=>A.route.loader&&A.route.loader.hydrate!==!0&&(L&&L[A.route.id]!==void 0||D&&D[A.route.id]!==void 0))}else f=e.hydrationData!=null;let E,x={historyAction:e.history.action,location:e.history.location,matches:S,initialized:f,navigation:zl,restoreScrollPosition:e.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||m,fetchers:new Map,blockers:new Map},C=Me.Pop,P=!1,k,R=!1,O=new Map,N=null,_=!1,M=!1,b=[],U=[],Y=new Map,I=0,F=-1,z=new Map,$=new Set,J=new Map,lt=new Map,Re=new Set,et=new Map,Pe=new Map,Mt=!1;function il(){if(c=e.history.listen(L=>{let{action:D,location:A,delta:j}=L;if(Mt){Mt=!1;return}Er(Pe.size===0||j!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let W=lf({currentLocation:x.location,nextLocation:A,historyAction:D});if(W&&j!=null){Mt=!0,e.history.go(j*-1),io(W,{state:"blocked",location:A,proceed(){io(W,{state:"proceeding",proceed:void 0,reset:void 0,location:A}),e.history.go(j)},reset(){let ee=new Map(x.blockers);ee.set(W,zi),Le({blockers:ee})}});return}return qn(D,A)}),n){ex(t,O);let L=()=>tx(t,O);t.addEventListener("pagehide",L),N=()=>t.removeEventListener("pagehide",L)}return x.initialized||qn(Me.Pop,x.location,{initialHydration:!0}),E}function Mi(){c&&c(),N&&N(),d.clear(),k&&k.abort(),x.fetchers.forEach((L,D)=>ro(D)),x.blockers.forEach((L,D)=>af(D))}function Rr(L){return d.add(L),()=>d.delete(L)}function Le(L,D){D===void 0&&(D={}),x=Te({},x,L);let A=[],j=[];u.v7_fetcherPersist&&x.fetchers.forEach((W,ee)=>{W.state==="idle"&&(Re.has(ee)?j.push(ee):A.push(ee))}),[...d].forEach(W=>W(x,{deletedFetchers:j,unstable_viewTransitionOpts:D.viewTransitionOpts,unstable_flushSync:D.flushSync===!0})),u.v7_fetcherPersist&&(A.forEach(W=>x.fetchers.delete(W)),j.forEach(W=>ro(W)))}function hn(L,D,A){var j,W;let{flushSync:ee}=A===void 0?{}:A,X=x.actionData!=null&&x.navigation.formMethod!=null&&bt(x.navigation.formMethod)&&x.navigation.state==="loading"&&((j=L.state)==null?void 0:j._isRedirect)!==!0,Q;D.actionData?Object.keys(D.actionData).length>0?Q=D.actionData:Q=null:X?Q=x.actionData:Q=null;let G=D.loaderData?kp(x.loaderData,D.loaderData,D.matches||[],D.errors):x.loaderData,ne=x.blockers;ne.size>0&&(ne=new Map(ne),ne.forEach((le,ze)=>ne.set(ze,zi)));let _e=P===!0||x.navigation.formMethod!=null&&bt(x.navigation.formMethod)&&((W=L.state)==null?void 0:W._isRedirect)!==!0;l&&(o=l,l=void 0),_||C===Me.Pop||(C===Me.Push?e.history.push(L,L.state):C===Me.Replace&&e.history.replace(L,L.state));let q;if(C===Me.Pop){let le=O.get(x.location.pathname);le&&le.has(L.pathname)?q={currentLocation:x.location,nextLocation:L}:O.has(L.pathname)&&(q={currentLocation:L,nextLocation:x.location})}else if(R){let le=O.get(x.location.pathname);le?le.add(L.pathname):(le=new Set([L.pathname]),O.set(x.location.pathname,le)),q={currentLocation:x.location,nextLocation:L}}Le(Te({},D,{actionData:Q,loaderData:G,historyAction:C,location:L,initialized:!0,navigation:zl,revalidation:"idle",restoreScrollPosition:cf(L,D.matches||x.matches),preventScrollReset:_e,blockers:ne}),{viewTransitionOpts:q,flushSync:ee===!0}),C=Me.Pop,P=!1,R=!1,_=!1,M=!1,b=[],U=[]}async function ki(L,D){if(typeof L=="number"){e.history.go(L);return}let A=Ju(x.location,x.matches,a,u.v7_prependBasename,L,u.v7_relativeSplatPath,D==null?void 0:D.fromRouteId,D==null?void 0:D.relative),{path:j,submission:W,error:ee}=Ep(u.v7_normalizeFormMethod,!1,A,D),X=x.location,Q=Ds(x.location,j,D&&D.state);Q=Te({},Q,e.history.encodeLocation(Q));let G=D&&D.replace!=null?D.replace:void 0,ne=Me.Push;G===!0?ne=Me.Replace:G===!1||W!=null&&bt(W.formMethod)&&W.formAction===x.location.pathname+x.location.search&&(ne=Me.Replace);let _e=D&&"preventScrollReset"in D?D.preventScrollReset===!0:void 0,q=(D&&D.unstable_flushSync)===!0,le=lf({currentLocation:X,nextLocation:Q,historyAction:ne});if(le){io(le,{state:"blocked",location:Q,proceed(){io(le,{state:"proceeding",proceed:void 0,reset:void 0,location:Q}),ki(L,D)},reset(){let ze=new Map(x.blockers);ze.set(le,zi),Le({blockers:ze})}});return}return await qn(ne,Q,{submission:W,pendingError:ee,preventScrollReset:_e,replace:D&&D.replace,enableViewTransition:D&&D.unstable_viewTransition,flushSync:q})}function M0(){if(sl(),Le({revalidation:"loading"}),x.navigation.state!=="submitting"){if(x.navigation.state==="idle"){qn(x.historyAction,x.location,{startUninterruptedRevalidation:!0});return}qn(C||x.historyAction,x.navigation.location,{overrideNavigation:x.navigation})}}async function qn(L,D,A){k&&k.abort(),k=null,C=L,_=(A&&A.startUninterruptedRevalidation)===!0,V0(x.location,x.matches),P=(A&&A.preventScrollReset)===!0,R=(A&&A.enableViewTransition)===!0;let j=l||o,W=A&&A.overrideNavigation,ee=Gr(j,D,a),X=(A&&A.flushSync)===!0;if(!ee){let ze=St(404,{pathname:D.pathname}),{matches:yt,route:Ve}=Rp(j);ol(),hn(D,{matches:yt,loaderData:{},errors:{[Ve.id]:ze}},{flushSync:X});return}if(x.initialized&&!M&&Q1(x.location,D)&&!(A&&A.submission&&bt(A.submission.formMethod))){hn(D,{matches:ee},{flushSync:X});return}k=new AbortController;let Q=ji(e.history,D,k.signal,A&&A.submission),G,ne;if(A&&A.pendingError)ne={[as(ee).route.id]:A.pendingError};else if(A&&A.submission&&bt(A.submission.formMethod)){let ze=await k0(Q,D,A.submission,ee,{replace:A.replace,flushSync:X});if(ze.shortCircuited)return;G=ze.pendingActionData,ne=ze.pendingActionError,W=Bl(D,A.submission),X=!1,Q=new Request(Q.url,{signal:Q.signal})}let{shortCircuited:_e,loaderData:q,errors:le}=await R0(Q,D,ee,W,A&&A.submission,A&&A.fetcherSubmission,A&&A.replace,A&&A.initialHydration===!0,X,G,ne);_e||(k=null,hn(D,Te({matches:ee},G?{actionData:G}:{},{loaderData:q,errors:le})))}async function k0(L,D,A,j,W){W===void 0&&(W={}),sl();let ee=Z1(D,A);Le({navigation:ee},{flushSync:W.flushSync===!0});let X,Q=tc(j,D);if(!Q.route.action&&!Q.route.lazy)X={type:Se.error,error:St(405,{method:L.method,pathname:D.pathname,routeId:Q.route.id})};else if(X=await Bi("action",L,Q,j,s,i,a,u.v7_relativeSplatPath),L.signal.aborted)return{shortCircuited:!0};if(lr(X)){let G;return W&&W.replace!=null?G=W.replace:G=X.location===x.location.pathname+x.location.search,await Ri(x,X,{submission:A,replace:G}),{shortCircuited:!0}}if(Kr(X)){let G=as(j,Q.route.id);return(W&&W.replace)!==!0&&(C=Me.Push),{pendingActionData:{},pendingActionError:{[G.route.id]:X.error}}}if(ar(X))throw St(400,{type:"defer-action"});return{pendingActionData:{[Q.route.id]:X.data}}}async function R0(L,D,A,j,W,ee,X,Q,G,ne,_e){let q=j||Bl(D,W),le=W||ee||Ap(q),ze=l||o,[yt,Ve]=Tp(e.history,x,A,le,D,u.v7_partialHydration&&Q===!0,M,b,U,Re,J,$,ze,a,ne,_e);if(ol(ae=>!(A&&A.some(he=>he.route.id===ae))||yt&&yt.some(he=>he.route.id===ae)),F=++I,yt.length===0&&Ve.length===0){let ae=sf();return hn(D,Te({matches:A,loaderData:{},errors:_e||null},ne?{actionData:ne}:{},ae?{fetchers:new Map(x.fetchers)}:{}),{flushSync:G}),{shortCircuited:!0}}if(!_&&(!u.v7_partialHydration||!Q)){Ve.forEach(he=>{let Vt=x.fetchers.get(he.key),oo=Ui(void 0,Vt?Vt.data:void 0);x.fetchers.set(he.key,oo)});let ae=ne||x.actionData;Le(Te({navigation:q},ae?Object.keys(ae).length===0?{actionData:null}:{actionData:ae}:{},Ve.length>0?{fetchers:new Map(x.fetchers)}:{}),{flushSync:G})}Ve.forEach(ae=>{Y.has(ae.key)&&gn(ae.key),ae.controller&&Y.set(ae.key,ae.controller)});let Dr=()=>Ve.forEach(ae=>gn(ae.key));k&&k.signal.addEventListener("abort",Dr);let{results:al,loaderResults:br,fetcherResults:vn}=await tf(x.matches,A,yt,Ve,L);if(L.signal.aborted)return{shortCircuited:!0};k&&k.signal.removeEventListener("abort",Dr),Ve.forEach(ae=>Y.delete(ae.key));let Zn=Dp(al);if(Zn){if(Zn.idx>=yt.length){let ae=Ve[Zn.idx-yt.length].key;$.add(ae)}return await Ri(x,Zn.result,{replace:X}),{shortCircuited:!0}}let{loaderData:ll,errors:ul}=Mp(x,A,yt,br,_e,Ve,vn,et);et.forEach((ae,he)=>{ae.subscribe(Vt=>{(Vt||ae.done)&&et.delete(he)})});let cl=sf(),Ar=of(F),so=cl||Ar||Ve.length>0;return Te({loaderData:ll,errors:ul},so?{fetchers:new Map(x.fetchers)}:{})}function D0(L,D,A,j){if(r)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");Y.has(L)&&gn(L);let W=(j&&j.unstable_flushSync)===!0,ee=l||o,X=Ju(x.location,x.matches,a,u.v7_prependBasename,A,u.v7_relativeSplatPath,D,j==null?void 0:j.relative),Q=Gr(ee,X,a);if(!Q){Di(L,D,St(404,{pathname:X}),{flushSync:W});return}let{path:G,submission:ne,error:_e}=Ep(u.v7_normalizeFormMethod,!0,X,j);if(_e){Di(L,D,_e,{flushSync:W});return}let q=tc(Q,G);if(P=(j&&j.preventScrollReset)===!0,ne&&bt(ne.formMethod)){b0(L,D,G,q,Q,W,ne);return}J.set(L,{routeId:D,path:G}),A0(L,D,G,q,Q,W,ne)}async function b0(L,D,A,j,W,ee,X){if(sl(),J.delete(L),!j.route.action&&!j.route.lazy){let he=St(405,{method:X.formMethod,pathname:A,routeId:D});Di(L,D,he,{flushSync:ee});return}let Q=x.fetchers.get(L);mn(L,J1(X,Q),{flushSync:ee});let G=new AbortController,ne=ji(e.history,A,G.signal,X);Y.set(L,G);let _e=I,q=await Bi("action",ne,j,W,s,i,a,u.v7_relativeSplatPath);if(ne.signal.aborted){Y.get(L)===G&&Y.delete(L);return}if(u.v7_fetcherPersist&&Re.has(L)){if(lr(q)||Kr(q)){mn(L,wn(void 0));return}}else{if(lr(q))if(Y.delete(L),F>_e){mn(L,wn(void 0));return}else return $.add(L),mn(L,Ui(X)),Ri(x,q,{fetcherSubmission:X});if(Kr(q)){Di(L,D,q.error);return}}if(ar(q))throw St(400,{type:"defer-action"});let le=x.navigation.location||x.location,ze=ji(e.history,le,G.signal),yt=l||o,Ve=x.navigation.state!=="idle"?Gr(yt,x.navigation.location,a):x.matches;Z(Ve,"Didn't find any matches after fetcher action");let Dr=++I;z.set(L,Dr);let al=Ui(X,q.data);x.fetchers.set(L,al);let[br,vn]=Tp(e.history,x,Ve,X,le,!1,M,b,U,Re,J,$,yt,a,{[j.route.id]:q.data},void 0);vn.filter(he=>he.key!==L).forEach(he=>{let Vt=he.key,oo=x.fetchers.get(Vt),N0=Ui(void 0,oo?oo.data:void 0);x.fetchers.set(Vt,N0),Y.has(Vt)&&gn(Vt),he.controller&&Y.set(Vt,he.controller)}),Le({fetchers:new Map(x.fetchers)});let Zn=()=>vn.forEach(he=>gn(he.key));G.signal.addEventListener("abort",Zn);let{results:ll,loaderResults:ul,fetcherResults:cl}=await tf(x.matches,Ve,br,vn,ze);if(G.signal.aborted)return;G.signal.removeEventListener("abort",Zn),z.delete(L),Y.delete(L),vn.forEach(he=>Y.delete(he.key));let Ar=Dp(ll);if(Ar){if(Ar.idx>=br.length){let he=vn[Ar.idx-br.length].key;$.add(he)}return Ri(x,Ar.result)}let{loaderData:so,errors:ae}=Mp(x,x.matches,br,ul,void 0,vn,cl,et);if(x.fetchers.has(L)){let he=wn(q.data);x.fetchers.set(L,he)}of(Dr),x.navigation.state==="loading"&&Dr>F?(Z(C,"Expected pending action"),k&&k.abort(),hn(x.navigation.location,{matches:Ve,loaderData:so,errors:ae,fetchers:new Map(x.fetchers)})):(Le({errors:ae,loaderData:kp(x.loaderData,so,Ve,ae),fetchers:new Map(x.fetchers)}),M=!1)}async function A0(L,D,A,j,W,ee,X){let Q=x.fetchers.get(L);mn(L,Ui(X,Q?Q.data:void 0),{flushSync:ee});let G=new AbortController,ne=ji(e.history,A,G.signal);Y.set(L,G);let _e=I,q=await Bi("loader",ne,j,W,s,i,a,u.v7_relativeSplatPath);if(ar(q)&&(q=await kv(q,ne.signal,!0)||q),Y.get(L)===G&&Y.delete(L),!ne.signal.aborted){if(Re.has(L)){mn(L,wn(void 0));return}if(lr(q))if(F>_e){mn(L,wn(void 0));return}else{$.add(L),await Ri(x,q);return}if(Kr(q)){Di(L,D,q.error);return}Z(!ar(q),"Unhandled fetcher deferred data"),mn(L,wn(q.data))}}async function Ri(L,D,A){let{submission:j,fetcherSubmission:W,replace:ee}=A===void 0?{}:A;D.revalidate&&(M=!0);let X=Ds(L.location,D.location,{_isRedirect:!0});if(Z(X,"Expected a location on the redirect navigation"),n){let le=!1;if(D.reloadDocument)le=!0;else if(Cv.test(D.location)){const ze=e.history.createURL(D.location);le=ze.origin!==t.location.origin||un(ze.pathname,a)==null}if(le){ee?t.location.replace(D.location):t.location.assign(D.location);return}}k=null;let Q=ee===!0?Me.Replace:Me.Push,{formMethod:G,formAction:ne,formEncType:_e}=L.navigation;!j&&!W&&G&&ne&&_e&&(j=Ap(L.navigation));let q=j||W;if(B1.has(D.status)&&q&&bt(q.formMethod))await qn(Q,X,{submission:Te({},q,{formAction:D.location}),preventScrollReset:P});else{let le=Bl(X,j);await qn(Q,X,{overrideNavigation:le,fetcherSubmission:W,preventScrollReset:P})}}async function tf(L,D,A,j,W){let ee=await Promise.all([...A.map(G=>Bi("loader",W,G,D,s,i,a,u.v7_relativeSplatPath)),...j.map(G=>G.matches&&G.match&&G.controller?Bi("loader",ji(e.history,G.path,G.controller.signal),G.match,G.matches,s,i,a,u.v7_relativeSplatPath):{type:Se.error,error:St(404,{pathname:G.path})})]),X=ee.slice(0,A.length),Q=ee.slice(A.length);return await Promise.all([bp(L,A,X,X.map(()=>W.signal),!1,x.loaderData),bp(L,j.map(G=>G.match),Q,j.map(G=>G.controller?G.controller.signal:null),!0)]),{results:ee,loaderResults:X,fetcherResults:Q}}function sl(){M=!0,b.push(...ol()),J.forEach((L,D)=>{Y.has(D)&&(U.push(D),gn(D))})}function mn(L,D,A){A===void 0&&(A={}),x.fetchers.set(L,D),Le({fetchers:new Map(x.fetchers)},{flushSync:(A&&A.flushSync)===!0})}function Di(L,D,A,j){j===void 0&&(j={});let W=as(x.matches,D);ro(L),Le({errors:{[W.route.id]:A},fetchers:new Map(x.fetchers)},{flushSync:(j&&j.flushSync)===!0})}function nf(L){return u.v7_fetcherPersist&&(lt.set(L,(lt.get(L)||0)+1),Re.has(L)&&Re.delete(L)),x.fetchers.get(L)||j1}function ro(L){let D=x.fetchers.get(L);Y.has(L)&&!(D&&D.state==="loading"&&z.has(L))&&gn(L),J.delete(L),z.delete(L),$.delete(L),Re.delete(L),x.fetchers.delete(L)}function O0(L){if(u.v7_fetcherPersist){let D=(lt.get(L)||0)-1;D<=0?(lt.delete(L),Re.add(L)):lt.set(L,D)}else ro(L);Le({fetchers:new Map(x.fetchers)})}function gn(L){let D=Y.get(L);Z(D,"Expected fetch controller: "+L),D.abort(),Y.delete(L)}function rf(L){for(let D of L){let A=nf(D),j=wn(A.data);x.fetchers.set(D,j)}}function sf(){let L=[],D=!1;for(let A of $){let j=x.fetchers.get(A);Z(j,"Expected fetcher: "+A),j.state==="loading"&&($.delete(A),L.push(A),D=!0)}return rf(L),D}function of(L){let D=[];for(let[A,j]of z)if(j<L){let W=x.fetchers.get(A);Z(W,"Expected fetcher: "+A),W.state==="loading"&&(gn(A),z.delete(A),D.push(A))}return rf(D),D.length>0}function I0(L,D){let A=x.blockers.get(L)||zi;return Pe.get(L)!==D&&Pe.set(L,D),A}function af(L){x.blockers.delete(L),Pe.delete(L)}function io(L,D){let A=x.blockers.get(L)||zi;Z(A.state==="unblocked"&&D.state==="blocked"||A.state==="blocked"&&D.state==="blocked"||A.state==="blocked"&&D.state==="proceeding"||A.state==="blocked"&&D.state==="unblocked"||A.state==="proceeding"&&D.state==="unblocked","Invalid blocker state transition: "+A.state+" -> "+D.state);let j=new Map(x.blockers);j.set(L,D),Le({blockers:j})}function lf(L){let{currentLocation:D,nextLocation:A,historyAction:j}=L;if(Pe.size===0)return;Pe.size>1&&Er(!1,"A router only supports one blocker at a time");let W=Array.from(Pe.entries()),[ee,X]=W[W.length-1],Q=x.blockers.get(ee);if(!(Q&&Q.state==="proceeding")&&X({currentLocation:D,nextLocation:A,historyAction:j}))return ee}function ol(L){let D=[];return et.forEach((A,j)=>{(!L||L(j))&&(A.cancel(),D.push(j),et.delete(j))}),D}function _0(L,D,A){if(p=L,v=D,g=A||null,!y&&x.navigation===zl){y=!0;let j=cf(x.location,x.matches);j!=null&&Le({restoreScrollPosition:j})}return()=>{p=null,v=null,g=null}}function uf(L,D){return g&&g(L,D.map(j=>v1(j,x.loaderData)))||L.key}function V0(L,D){if(p&&v){let A=uf(L,D);p[A]=v()}}function cf(L,D){if(p){let A=uf(L,D),j=p[A];if(typeof j=="number")return j}return null}function F0(L){s={},l=qu(L,i,void 0,s)}return E={get basename(){return a},get future(){return u},get state(){return x},get routes(){return o},get window(){return t},initialize:il,subscribe:Rr,enableScrollRestoration:_0,navigate:ki,fetch:D0,revalidate:M0,createHref:L=>e.history.createHref(L),encodeLocation:L=>e.history.encodeLocation(L),getFetcher:nf,deleteFetcher:O0,dispose:Mi,getBlocker:I0,deleteBlocker:af,_internalFetchControllers:Y,_internalActiveDeferreds:et,_internalSetRoutes:F0},E}function H1(e){return e!=null&&("formData"in e&&e.formData!=null||"body"in e&&e.body!==void 0)}function Ju(e,t,n,r,i,s,o,l){let a,u;if(o){a=[];for(let d of t)if(a.push(d),d.route.id===o){u=d;break}}else a=t,u=t[t.length-1];let c=Qa(i||".",Ka(a,s),un(e.pathname,n)||e.pathname,l==="path");return i==null&&(c.search=e.search,c.hash=e.hash),(i==null||i===""||i===".")&&u&&u.route.index&&!Md(c.search)&&(c.search=c.search?c.search.replace(/^\?/,"?index&"):"?index"),r&&n!=="/"&&(c.pathname=c.pathname==="/"?n:en([n,c.pathname])),Tr(c)}function Ep(e,t,n,r){if(!r||!H1(r))return{path:n};if(r.formMethod&&!q1(r.formMethod))return{path:n,error:St(405,{method:r.formMethod})};let i=()=>({path:n,error:St(400,{type:"invalid-body"})}),s=r.formMethod||"get",o=e?s.toUpperCase():s.toLowerCase(),l=Mv(n);if(r.body!==void 0){if(r.formEncType==="text/plain"){if(!bt(o))return i();let p=typeof r.body=="string"?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce((g,v)=>{let[y,S]=v;return""+g+y+"="+S+`
`},""):String(r.body);return{path:n,submission:{formMethod:o,formAction:l,formEncType:r.formEncType,formData:void 0,json:void 0,text:p}}}else if(r.formEncType==="application/json"){if(!bt(o))return i();try{let p=typeof r.body=="string"?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:o,formAction:l,formEncType:r.formEncType,formData:void 0,json:p,text:void 0}}}catch{return i()}}}Z(typeof FormData=="function","FormData is not available in this environment");let a,u;if(r.formData)a=ec(r.formData),u=r.formData;else if(r.body instanceof FormData)a=ec(r.body),u=r.body;else if(r.body instanceof URLSearchParams)a=r.body,u=Lp(a);else if(r.body==null)a=new URLSearchParams,u=new FormData;else try{a=new URLSearchParams(r.body),u=Lp(a)}catch{return i()}let c={formMethod:o,formAction:l,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:u,json:void 0,text:void 0};if(bt(c.formMethod))return{path:n,submission:c};let d=fn(n);return t&&d.search&&Md(d.search)&&a.append("index",""),d.search="?"+a,{path:Tr(d),submission:c}}function W1(e,t){let n=e;if(t){let r=e.findIndex(i=>i.route.id===t);r>=0&&(n=e.slice(0,r))}return n}function Tp(e,t,n,r,i,s,o,l,a,u,c,d,p,g,v,y){let S=y?Object.values(y)[0]:v?Object.values(v)[0]:void 0,m=e.createURL(t.location),f=e.createURL(i),h=y?Object.keys(y)[0]:void 0,E=W1(n,h).filter((C,P)=>{let{route:k}=C;if(k.lazy)return!0;if(k.loader==null)return!1;if(s)return k.loader.hydrate?!0:t.loaderData[k.id]===void 0&&(!t.errors||t.errors[k.id]===void 0);if(G1(t.loaderData,t.matches[P],C)||l.some(N=>N===C.route.id))return!0;let R=t.matches[P],O=C;return Cp(C,Te({currentUrl:m,currentParams:R.params,nextUrl:f,nextParams:O.params},r,{actionResult:S,defaultShouldRevalidate:o||m.pathname+m.search===f.pathname+f.search||m.search!==f.search||Lv(R,O)}))}),x=[];return c.forEach((C,P)=>{if(s||!n.some(_=>_.route.id===C.routeId)||u.has(P))return;let k=Gr(p,C.path,g);if(!k){x.push({key:P,routeId:C.routeId,path:C.path,matches:null,match:null,controller:null});return}let R=t.fetchers.get(P),O=tc(k,C.path),N=!1;d.has(P)?N=!1:a.includes(P)?N=!0:R&&R.state!=="idle"&&R.data===void 0?N=o:N=Cp(O,Te({currentUrl:m,currentParams:t.matches[t.matches.length-1].params,nextUrl:f,nextParams:n[n.length-1].params},r,{actionResult:S,defaultShouldRevalidate:o})),N&&x.push({key:P,routeId:C.routeId,path:C.path,matches:k,match:O,controller:new AbortController})}),[E,x]}function G1(e,t,n){let r=!t||n.route.id!==t.route.id,i=e[n.route.id]===void 0;return r||i}function Lv(e,t){let n=e.route.path;return e.pathname!==t.pathname||n!=null&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function Cp(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if(typeof n=="boolean")return n}return t.defaultShouldRevalidate}async function Pp(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let i=n[e.id];Z(i,"No route found in manifest");let s={};for(let o in r){let a=i[o]!==void 0&&o!=="hasErrorBoundary";Er(!a,'Route "'+i.id+'" has a static property "'+o+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+o+'" will be ignored.')),!a&&!m1.has(o)&&(s[o]=r[o])}Object.assign(i,s),Object.assign(i,Te({},t(i),{lazy:void 0}))}async function Bi(e,t,n,r,i,s,o,l,a){a===void 0&&(a={});let u,c,d,p=y=>{let S,m=new Promise((f,h)=>S=h);return d=()=>S(),t.signal.addEventListener("abort",d),Promise.race([y({request:t,params:n.params,context:a.requestContext}),m])};try{let y=n.route[e];if(n.route.lazy)if(y){let S,m=await Promise.all([p(y).catch(f=>{S=f}),Pp(n.route,s,i)]);if(S)throw S;c=m[0]}else if(await Pp(n.route,s,i),y=n.route[e],y)c=await p(y);else if(e==="action"){let S=new URL(t.url),m=S.pathname+S.search;throw St(405,{method:t.method,pathname:m,routeId:n.route.id})}else return{type:Se.data,data:void 0};else if(y)c=await p(y);else{let S=new URL(t.url),m=S.pathname+S.search;throw St(404,{pathname:m})}Z(c!==void 0,"You defined "+(e==="action"?"an action":"a loader")+" for route "+('"'+n.route.id+"\" but didn't return anything from your `"+e+"` ")+"function. Please return a value or `null`.")}catch(y){u=Se.error,c=y}finally{d&&t.signal.removeEventListener("abort",d)}if(X1(c)){let y=c.status;if(z1.has(y)){let m=c.headers.get("Location");if(Z(m,"Redirects returned/thrown from loaders/actions must have a Location header"),!Cv.test(m))m=Ju(new URL(t.url),r.slice(0,r.indexOf(n)+1),o,!0,m,l);else if(!a.isStaticRequest){let f=new URL(t.url),h=m.startsWith("//")?new URL(f.protocol+m):new URL(m),w=un(h.pathname,o)!=null;h.origin===f.origin&&w&&(m=h.pathname+h.search+h.hash)}if(a.isStaticRequest)throw c.headers.set("Location",m),c;return{type:Se.redirect,status:y,location:m,revalidate:c.headers.get("X-Remix-Revalidate")!==null,reloadDocument:c.headers.get("X-Remix-Reload-Document")!==null}}if(a.isRouteRequest)throw{type:u===Se.error?Se.error:Se.data,response:c};let S;try{let m=c.headers.get("Content-Type");m&&/\bapplication\/json\b/.test(m)?c.body==null?S=null:S=await c.json():S=await c.text()}catch(m){return{type:Se.error,error:m}}return u===Se.error?{type:u,error:new Ld(y,c.statusText,S),headers:c.headers}:{type:Se.data,data:S,statusCode:c.status,headers:c.headers}}if(u===Se.error)return{type:u,error:c};if(Y1(c)){var g,v;return{type:Se.deferred,deferredData:c,statusCode:(g=c.init)==null?void 0:g.status,headers:((v=c.init)==null?void 0:v.headers)&&new Headers(c.init.headers)}}return{type:Se.data,data:c}}function ji(e,t,n,r){let i=e.createURL(Mv(t)).toString(),s={signal:n};if(r&&bt(r.formMethod)){let{formMethod:o,formEncType:l}=r;s.method=o.toUpperCase(),l==="application/json"?(s.headers=new Headers({"Content-Type":l}),s.body=JSON.stringify(r.json)):l==="text/plain"?s.body=r.text:l==="application/x-www-form-urlencoded"&&r.formData?s.body=ec(r.formData):s.body=r.formData}return new Request(i,s)}function ec(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,typeof r=="string"?r:r.name);return t}function Lp(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function K1(e,t,n,r,i){let s={},o=null,l,a=!1,u={};return n.forEach((c,d)=>{let p=t[d].route.id;if(Z(!lr(c),"Cannot handle redirect results in processLoaderData"),Kr(c)){let g=as(e,p),v=c.error;r&&(v=Object.values(r)[0],r=void 0),o=o||{},o[g.route.id]==null&&(o[g.route.id]=v),s[p]=void 0,a||(a=!0,l=Ev(c.error)?c.error.status:500),c.headers&&(u[p]=c.headers)}else ar(c)?(i.set(p,c.deferredData),s[p]=c.deferredData.data):s[p]=c.data,c.statusCode!=null&&c.statusCode!==200&&!a&&(l=c.statusCode),c.headers&&(u[p]=c.headers)}),r&&(o=r,s[Object.keys(r)[0]]=void 0),{loaderData:s,errors:o,statusCode:l||200,loaderHeaders:u}}function Mp(e,t,n,r,i,s,o,l){let{loaderData:a,errors:u}=K1(t,n,r,i,l);for(let c=0;c<s.length;c++){let{key:d,match:p,controller:g}=s[c];Z(o!==void 0&&o[c]!==void 0,"Did not find corresponding fetcher result");let v=o[c];if(!(g&&g.signal.aborted))if(Kr(v)){let y=as(e.matches,p==null?void 0:p.route.id);u&&u[y.route.id]||(u=Te({},u,{[y.route.id]:v.error})),e.fetchers.delete(d)}else if(lr(v))Z(!1,"Unhandled fetcher revalidation redirect");else if(ar(v))Z(!1,"Unhandled fetcher deferred data");else{let y=wn(v.data);e.fetchers.set(d,y)}}return{loaderData:a,errors:u}}function kp(e,t,n,r){let i=Te({},t);for(let s of n){let o=s.route.id;if(t.hasOwnProperty(o)?t[o]!==void 0&&(i[o]=t[o]):e[o]!==void 0&&s.route.loader&&(i[o]=e[o]),r&&r.hasOwnProperty(o))break}return i}function as(e,t){return(t?e.slice(0,e.findIndex(r=>r.route.id===t)+1):[...e]).reverse().find(r=>r.route.hasErrorBoundary===!0)||e[0]}function Rp(e){let t=e.length===1?e[0]:e.find(n=>n.index||!n.path||n.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function St(e,t){let{pathname:n,routeId:r,method:i,type:s}=t===void 0?{}:t,o="Unknown Server Error",l="Unknown @remix-run/router error";return e===400?(o="Bad Request",i&&n&&r?l="You made a "+i+' request to "'+n+'" but '+('did not provide a `loader` for route "'+r+'", ')+"so there is no way to handle the request.":s==="defer-action"?l="defer() is not supported in actions":s==="invalid-body"&&(l="Unable to encode submission body")):e===403?(o="Forbidden",l='Route "'+r+'" does not match URL "'+n+'"'):e===404?(o="Not Found",l='No route matches URL "'+n+'"'):e===405&&(o="Method Not Allowed",i&&n&&r?l="You made a "+i.toUpperCase()+' request to "'+n+'" but '+('did not provide an `action` for route "'+r+'", ')+"so there is no way to handle the request.":i&&(l='Invalid request method "'+i.toUpperCase()+'"')),new Ld(e||500,o,new Error(l),!0)}function Dp(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(lr(n))return{result:n,idx:t}}}function Mv(e){let t=typeof e=="string"?fn(e):e;return Tr(Te({},t,{hash:""}))}function Q1(e,t){return e.pathname!==t.pathname||e.search!==t.search?!1:e.hash===""?t.hash!=="":e.hash===t.hash?!0:t.hash!==""}function ar(e){return e.type===Se.deferred}function Kr(e){return e.type===Se.error}function lr(e){return(e&&e.type)===Se.redirect}function Y1(e){let t=e;return t&&typeof t=="object"&&typeof t.data=="object"&&typeof t.subscribe=="function"&&typeof t.cancel=="function"&&typeof t.resolveData=="function"}function X1(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.headers=="object"&&typeof e.body<"u"}function q1(e){return N1.has(e.toLowerCase())}function bt(e){return V1.has(e.toLowerCase())}async function bp(e,t,n,r,i,s){for(let o=0;o<n.length;o++){let l=n[o],a=t[o];if(!a)continue;let u=e.find(d=>d.route.id===a.route.id),c=u!=null&&!Lv(u,a)&&(s&&s[a.route.id])!==void 0;if(ar(l)&&(i||c)){let d=r[o];Z(d,"Expected an AbortSignal for revalidating fetcher deferred result"),await kv(l,d,i).then(p=>{p&&(n[o]=p||n[o])})}}}async function kv(e,t,n){if(n===void 0&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:Se.data,data:e.deferredData.unwrappedData}}catch(i){return{type:Se.error,error:i}}return{type:Se.data,data:e.deferredData.data}}}function Md(e){return new URLSearchParams(e).getAll("index").some(t=>t==="")}function tc(e,t){let n=typeof t=="string"?fn(t).search:t.search;if(e[e.length-1].route.index&&Md(n||""))return e[e.length-1];let r=xv(e);return r[r.length-1]}function Ap(e){let{formMethod:t,formAction:n,formEncType:r,text:i,formData:s,json:o}=e;if(!(!t||!n||!r)){if(i!=null)return{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:i};if(s!=null)return{formMethod:t,formAction:n,formEncType:r,formData:s,json:void 0,text:void 0};if(o!==void 0)return{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:o,text:void 0}}}function Bl(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function Z1(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}function Ui(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function J1(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}function wn(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function ex(e,t){try{let n=e.sessionStorage.getItem(Pv);if(n){let r=JSON.parse(n);for(let[i,s]of Object.entries(r||{}))s&&Array.isArray(s)&&t.set(i,new Set(s||[]))}}catch{}}function tx(e,t){if(t.size>0){let n={};for(let[r,i]of t)n[r]=[...i];try{e.sessionStorage.setItem(Pv,JSON.stringify(n))}catch(r){Er(!1,"Failed to save applied view transitions in sessionStorage ("+r+").")}}}/**
 * React Router v6.21.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function bs(){return bs=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},bs.apply(this,arguments)}const Zs=T.createContext(null),kd=T.createContext(null),pn=T.createContext(null),Ya=T.createContext(null),Gt=T.createContext({outlet:null,matches:[],isDataRoute:!1}),Rv=T.createContext(null);function nx(e,t){let{relative:n}=t===void 0?{}:t;Pi()||Z(!1);let{basename:r,navigator:i}=T.useContext(pn),{hash:s,pathname:o,search:l}=Xa(e,{relative:n}),a=o;return r!=="/"&&(a=o==="/"?r:en([r,o])),i.createHref({pathname:a,search:l,hash:s})}function Pi(){return T.useContext(Ya)!=null}function Li(){return Pi()||Z(!1),T.useContext(Ya).location}function Dv(e){T.useContext(pn).static||T.useLayoutEffect(e)}function bv(){let{isDataRoute:e}=T.useContext(Gt);return e?gx():rx()}function rx(){Pi()||Z(!1);let e=T.useContext(Zs),{basename:t,future:n,navigator:r}=T.useContext(pn),{matches:i}=T.useContext(Gt),{pathname:s}=Li(),o=JSON.stringify(Ka(i,n.v7_relativeSplatPath)),l=T.useRef(!1);return Dv(()=>{l.current=!0}),T.useCallback(function(u,c){if(c===void 0&&(c={}),!l.current)return;if(typeof u=="number"){r.go(u);return}let d=Qa(u,JSON.parse(o),s,c.relative==="path");e==null&&t!=="/"&&(d.pathname=d.pathname==="/"?t:en([t,d.pathname])),(c.replace?r.replace:r.push)(d,c.state,c)},[t,r,o,s,e])}const ix=T.createContext(null);function sx(e){let t=T.useContext(Gt).outlet;return t&&T.createElement(ix.Provider,{value:e},t)}function rk(){let{matches:e}=T.useContext(Gt),t=e[e.length-1];return t?t.params:{}}function Xa(e,t){let{relative:n}=t===void 0?{}:t,{future:r}=T.useContext(pn),{matches:i}=T.useContext(Gt),{pathname:s}=Li(),o=JSON.stringify(Ka(i,r.v7_relativeSplatPath));return T.useMemo(()=>Qa(e,JSON.parse(o),s,n==="path"),[e,o,s,n])}function ox(e,t,n,r){Pi()||Z(!1);let{navigator:i}=T.useContext(pn),{matches:s}=T.useContext(Gt),o=s[s.length-1],l=o?o.params:{};o&&o.pathname;let a=o?o.pathnameBase:"/";o&&o.route;let u=Li(),c;if(t){var d;let S=typeof t=="string"?fn(t):t;a==="/"||(d=S.pathname)!=null&&d.startsWith(a)||Z(!1),c=S}else c=u;let p=c.pathname||"/",g=a==="/"?p:p.slice(a.length)||"/",v=Gr(e,{pathname:g}),y=dx(v&&v.map(S=>Object.assign({},S,{params:Object.assign({},l,S.params),pathname:en([a,i.encodeLocation?i.encodeLocation(S.pathname).pathname:S.pathname]),pathnameBase:S.pathnameBase==="/"?a:en([a,i.encodeLocation?i.encodeLocation(S.pathnameBase).pathname:S.pathnameBase])})),s,n,r);return t&&y?T.createElement(Ya.Provider,{value:{location:bs({pathname:"/",search:"",hash:"",state:null,key:"default"},c),navigationType:Me.Pop}},y):y}function ax(){let e=mx(),t=Ev(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,i={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},s=null;return T.createElement(T.Fragment,null,T.createElement("h2",null,"Unexpected Application Error!"),T.createElement("h3",{style:{fontStyle:"italic"}},t),n?T.createElement("pre",{style:i},n):null,s)}const lx=T.createElement(ax,null);class ux extends T.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,n){return n.location!==t.location||n.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:n.error,location:n.location,revalidation:t.revalidation||n.revalidation}}componentDidCatch(t,n){console.error("React Router caught the following error during render",t,n)}render(){return this.state.error!==void 0?T.createElement(Gt.Provider,{value:this.props.routeContext},T.createElement(Rv.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function cx(e){let{routeContext:t,match:n,children:r}=e,i=T.useContext(Zs);return i&&i.static&&i.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(i.staticContext._deepestRenderedBoundaryId=n.route.id),T.createElement(Gt.Provider,{value:t},r)}function dx(e,t,n,r){var i;if(t===void 0&&(t=[]),n===void 0&&(n=null),r===void 0&&(r=null),e==null){var s;if((s=n)!=null&&s.errors)e=n.matches;else return null}let o=e,l=(i=n)==null?void 0:i.errors;if(l!=null){let c=o.findIndex(d=>d.route.id&&(l==null?void 0:l[d.route.id]));c>=0||Z(!1),o=o.slice(0,Math.min(o.length,c+1))}let a=!1,u=-1;if(n&&r&&r.v7_partialHydration)for(let c=0;c<o.length;c++){let d=o[c];if((d.route.HydrateFallback||d.route.hydrateFallbackElement)&&(u=c),d.route.id){let{loaderData:p,errors:g}=n,v=d.route.loader&&p[d.route.id]===void 0&&(!g||g[d.route.id]===void 0);if(d.route.lazy||v){a=!0,u>=0?o=o.slice(0,u+1):o=[o[0]];break}}}return o.reduceRight((c,d,p)=>{let g,v=!1,y=null,S=null;n&&(g=l&&d.route.id?l[d.route.id]:void 0,y=d.route.errorElement||lx,a&&(u<0&&p===0?(vx("route-fallback",!1),v=!0,S=null):u===p&&(v=!0,S=d.route.hydrateFallbackElement||null)));let m=t.concat(o.slice(0,p+1)),f=()=>{let h;return g?h=y:v?h=S:d.route.Component?h=T.createElement(d.route.Component,null):d.route.element?h=d.route.element:h=c,T.createElement(cx,{match:d,routeContext:{outlet:c,matches:m,isDataRoute:n!=null},children:h})};return n&&(d.route.ErrorBoundary||d.route.errorElement||p===0)?T.createElement(ux,{location:n.location,revalidation:n.revalidation,component:y,error:g,children:f(),routeContext:{outlet:null,matches:m,isDataRoute:!0}}):f()},null)}var Av=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Av||{}),ya=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ya||{});function fx(e){let t=T.useContext(Zs);return t||Z(!1),t}function px(e){let t=T.useContext(kd);return t||Z(!1),t}function hx(e){let t=T.useContext(Gt);return t||Z(!1),t}function Ov(e){let t=hx(),n=t.matches[t.matches.length-1];return n.route.id||Z(!1),n.route.id}function mx(){var e;let t=T.useContext(Rv),n=px(ya.UseRouteError),r=Ov(ya.UseRouteError);return t!==void 0?t:(e=n.errors)==null?void 0:e[r]}function gx(){let{router:e}=fx(Av.UseNavigateStable),t=Ov(ya.UseNavigateStable),n=T.useRef(!1);return Dv(()=>{n.current=!0}),T.useCallback(function(i,s){s===void 0&&(s={}),n.current&&(typeof i=="number"?e.navigate(i):e.navigate(i,bs({fromRouteId:t},s)))},[e,t])}const Op={};function vx(e,t,n){!t&&!Op[e]&&(Op[e]=!0)}function ik(e){let{to:t,replace:n,state:r,relative:i}=e;Pi()||Z(!1);let{future:s,static:o}=T.useContext(pn),{matches:l}=T.useContext(Gt),{pathname:a}=Li(),u=bv(),c=Qa(t,Ka(l,s.v7_relativeSplatPath),a,i==="path"),d=JSON.stringify(c);return T.useEffect(()=>u(JSON.parse(d),{replace:n,state:r,relative:i}),[u,d,i,n,r]),null}function sk(e){return sx(e.context)}function yx(e){let{basename:t="/",children:n=null,location:r,navigationType:i=Me.Pop,navigator:s,static:o=!1,future:l}=e;Pi()&&Z(!1);let a=t.replace(/^\/*/,"/"),u=T.useMemo(()=>({basename:a,navigator:s,static:o,future:bs({v7_relativeSplatPath:!1},l)}),[a,l,s,o]);typeof r=="string"&&(r=fn(r));let{pathname:c="/",search:d="",hash:p="",state:g=null,key:v="default"}=r,y=T.useMemo(()=>{let S=un(c,a);return S==null?null:{location:{pathname:S,search:d,hash:p,state:g,key:v},navigationType:i}},[a,c,d,p,g,v,i]);return y==null?null:T.createElement(pn.Provider,{value:u},T.createElement(Ya.Provider,{children:n,value:y}))}new Promise(()=>{});function wx(e){let t={hasErrorBoundary:e.ErrorBoundary!=null||e.errorElement!=null};return e.Component&&Object.assign(t,{element:T.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(t,{hydrateFallbackElement:T.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:T.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t}/**
 * React Router DOM v6.21.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function wi(){return wi=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},wi.apply(this,arguments)}function Iv(e,t){if(e==null)return{};var n={},r=Object.keys(e),i,s;for(s=0;s<r.length;s++)i=r[s],!(t.indexOf(i)>=0)&&(n[i]=e[i]);return n}function Sx(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function xx(e,t){return e.button===0&&(!t||t==="_self")&&!Sx(e)}const Ex=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Tx=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];function ok(e,t){return $1({basename:t==null?void 0:t.basename,future:wi({},t==null?void 0:t.future,{v7_prependBasename:!0}),history:f1({window:t==null?void 0:t.window}),hydrationData:(t==null?void 0:t.hydrationData)||Cx(),routes:e,mapRouteProperties:wx,window:t==null?void 0:t.window}).initialize()}function Cx(){var e;let t=(e=window)==null?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=wi({},t,{errors:Px(t.errors)})),t}function Px(e){if(!e)return null;let t=Object.entries(e),n={};for(let[r,i]of t)if(i&&i.__type==="RouteErrorResponse")n[r]=new Ld(i.status,i.statusText,i.data,i.internal===!0);else if(i&&i.__type==="Error"){if(i.__subType){let s=window[i.__subType];if(typeof s=="function")try{let o=new s(i.message);o.stack="",n[r]=o}catch{}}if(n[r]==null){let s=new Error(i.message);s.stack="",n[r]=s}}else n[r]=i;return n}const _v=T.createContext({isTransitioning:!1}),Lx=T.createContext(new Map),Mx="startTransition",Ip=ew[Mx],kx="flushSync",_p=d1[kx];function Rx(e){Ip?Ip(e):e()}function $i(e){_p?_p(e):e()}class Dx{constructor(){this.status="pending",this.promise=new Promise((t,n)=>{this.resolve=r=>{this.status==="pending"&&(this.status="resolved",t(r))},this.reject=r=>{this.status==="pending"&&(this.status="rejected",n(r))}})}}function ak(e){let{fallbackElement:t,router:n,future:r}=e,[i,s]=T.useState(n.state),[o,l]=T.useState(),[a,u]=T.useState({isTransitioning:!1}),[c,d]=T.useState(),[p,g]=T.useState(),[v,y]=T.useState(),S=T.useRef(new Map),{v7_startTransition:m}=r||{},f=T.useCallback(C=>{m?Rx(C):C()},[m]),h=T.useCallback((C,P)=>{let{deletedFetchers:k,unstable_flushSync:R,unstable_viewTransitionOpts:O}=P;k.forEach(_=>S.current.delete(_)),C.fetchers.forEach((_,M)=>{_.data!==void 0&&S.current.set(M,_.data)});let N=n.window==null||typeof n.window.document.startViewTransition!="function";if(!O||N){R?$i(()=>s(C)):f(()=>s(C));return}if(R){$i(()=>{p&&(c&&c.resolve(),p.skipTransition()),u({isTransitioning:!0,flushSync:!0,currentLocation:O.currentLocation,nextLocation:O.nextLocation})});let _=n.window.document.startViewTransition(()=>{$i(()=>s(C))});_.finished.finally(()=>{$i(()=>{d(void 0),g(void 0),l(void 0),u({isTransitioning:!1})})}),$i(()=>g(_));return}p?(c&&c.resolve(),p.skipTransition(),y({state:C,currentLocation:O.currentLocation,nextLocation:O.nextLocation})):(l(C),u({isTransitioning:!0,flushSync:!1,currentLocation:O.currentLocation,nextLocation:O.nextLocation}))},[n.window,p,c,S,f]);T.useLayoutEffect(()=>n.subscribe(h),[n,h]),T.useEffect(()=>{a.isTransitioning&&!a.flushSync&&d(new Dx)},[a]),T.useEffect(()=>{if(c&&o&&n.window){let C=o,P=c.promise,k=n.window.document.startViewTransition(async()=>{f(()=>s(C)),await P});k.finished.finally(()=>{d(void 0),g(void 0),l(void 0),u({isTransitioning:!1})}),g(k)}},[f,o,c,n.window]),T.useEffect(()=>{c&&o&&i.location.key===o.location.key&&c.resolve()},[c,p,i.location,o]),T.useEffect(()=>{!a.isTransitioning&&v&&(l(v.state),u({isTransitioning:!0,flushSync:!1,currentLocation:v.currentLocation,nextLocation:v.nextLocation}),y(void 0))},[a.isTransitioning,v]),T.useEffect(()=>{},[]);let w=T.useMemo(()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:C=>n.navigate(C),push:(C,P,k)=>n.navigate(C,{state:P,preventScrollReset:k==null?void 0:k.preventScrollReset}),replace:(C,P,k)=>n.navigate(C,{replace:!0,state:P,preventScrollReset:k==null?void 0:k.preventScrollReset})}),[n]),E=n.basename||"/",x=T.useMemo(()=>({router:n,navigator:w,static:!1,basename:E}),[n,w,E]);return T.createElement(T.Fragment,null,T.createElement(Zs.Provider,{value:x},T.createElement(kd.Provider,{value:i},T.createElement(Lx.Provider,{value:S.current},T.createElement(_v.Provider,{value:a},T.createElement(yx,{basename:E,location:i.location,navigationType:i.historyAction,navigator:w,future:{v7_relativeSplatPath:n.future.v7_relativeSplatPath}},i.initialized||n.future.v7_partialHydration?T.createElement(bx,{routes:n.routes,future:n.future,state:i}):t))))),null)}function bx(e){let{routes:t,future:n,state:r}=e;return ox(t,void 0,r,n)}const Ax=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",Ox=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Ix=T.forwardRef(function(t,n){let{onClick:r,relative:i,reloadDocument:s,replace:o,state:l,target:a,to:u,preventScrollReset:c,unstable_viewTransition:d}=t,p=Iv(t,Ex),{basename:g}=T.useContext(pn),v,y=!1;if(typeof u=="string"&&Ox.test(u)&&(v=u,Ax))try{let h=new URL(window.location.href),w=u.startsWith("//")?new URL(h.protocol+u):new URL(u),E=un(w.pathname,g);w.origin===h.origin&&E!=null?u=E+w.search+w.hash:y=!0}catch{}let S=nx(u,{relative:i}),m=Vx(u,{replace:o,state:l,target:a,preventScrollReset:c,relative:i,unstable_viewTransition:d});function f(h){r&&r(h),h.defaultPrevented||m(h)}return T.createElement("a",wi({},p,{href:v||S,onClick:y||s?r:f,ref:n,target:a}))}),lk=T.forwardRef(function(t,n){let{"aria-current":r="page",caseSensitive:i=!1,className:s="",end:o=!1,style:l,to:a,unstable_viewTransition:u,children:c}=t,d=Iv(t,Tx),p=Xa(a,{relative:d.relative}),g=Li(),v=T.useContext(kd),{navigator:y,basename:S}=T.useContext(pn),m=v!=null&&Fx(p)&&u===!0,f=y.encodeLocation?y.encodeLocation(p).pathname:p.pathname,h=g.pathname,w=v&&v.navigation&&v.navigation.location?v.navigation.location.pathname:null;i||(h=h.toLowerCase(),w=w?w.toLowerCase():null,f=f.toLowerCase()),w&&S&&(w=un(w,S)||w);const E=f!=="/"&&f.endsWith("/")?f.length-1:f.length;let x=h===f||!o&&h.startsWith(f)&&h.charAt(E)==="/",C=w!=null&&(w===f||!o&&w.startsWith(f)&&w.charAt(f.length)==="/"),P={isActive:x,isPending:C,isTransitioning:m},k=x?r:void 0,R;typeof s=="function"?R=s(P):R=[s,x?"active":null,C?"pending":null,m?"transitioning":null].filter(Boolean).join(" ");let O=typeof l=="function"?l(P):l;return T.createElement(Ix,wi({},d,{"aria-current":k,className:R,ref:n,style:O,to:a,unstable_viewTransition:u}),typeof c=="function"?c(P):c)});var nc;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(nc||(nc={}));var Vp;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(Vp||(Vp={}));function _x(e){let t=T.useContext(Zs);return t||Z(!1),t}function Vx(e,t){let{target:n,replace:r,state:i,preventScrollReset:s,relative:o,unstable_viewTransition:l}=t===void 0?{}:t,a=bv(),u=Li(),c=Xa(e,{relative:o});return T.useCallback(d=>{if(xx(d,n)){d.preventDefault();let p=r!==void 0?r:Tr(u)===Tr(c);a(e,{replace:p,state:i,preventScrollReset:s,relative:o,unstable_viewTransition:l})}},[u,a,c,r,i,n,e,s,o,l])}function Fx(e,t){t===void 0&&(t={});let n=T.useContext(_v);n==null&&Z(!1);let{basename:r}=_x(nc.useViewTransitionState),i=Xa(e,{relative:t.relative});if(!n.isTransitioning)return!1;let s=un(n.currentLocation.pathname,r)||n.currentLocation.pathname,o=un(n.nextLocation.pathname,r)||n.nextLocation.pathname;return Zu(i.pathname,o)!=null||Zu(i.pathname,s)!=null}var Rd=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.add(e),this.onSubscribe(),()=>{this.listeners.delete(e),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},As=typeof window>"u"||"Deno"in window;function Nx(){}function uk(e,t){return typeof e=="function"?e(t):e}function Fp(e){return typeof e=="number"&&e>=0&&e!==1/0}function zx(e,t){return Math.max(e+(t||0)-Date.now(),0)}function ck(e,t){const{type:n="all",exact:r,fetchStatus:i,predicate:s,queryKey:o,stale:l}=e;if(o){if(r){if(t.queryHash!==Bx(o,t.options))return!1}else if(!Dd(t.queryKey,o))return!1}if(n!=="all"){const a=t.isActive();if(n==="active"&&!a||n==="inactive"&&a)return!1}return!(typeof l=="boolean"&&t.isStale()!==l||typeof i<"u"&&i!==t.state.fetchStatus||s&&!s(t))}function dk(e,t){const{exact:n,status:r,predicate:i,mutationKey:s}=e;if(s){if(!t.options.mutationKey)return!1;if(n){if(rc(t.options.mutationKey)!==rc(s))return!1}else if(!Dd(t.options.mutationKey,s))return!1}return!(r&&t.state.status!==r||i&&!i(t))}function Bx(e,t){return((t==null?void 0:t.queryKeyHashFn)||rc)(e)}function rc(e){return JSON.stringify(e,(t,n)=>sc(n)?Object.keys(n).sort().reduce((r,i)=>(r[i]=n[i],r),{}):n)}function Dd(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?!Object.keys(t).some(n=>!Dd(e[n],t[n])):!1}function Vv(e,t){if(e===t)return e;const n=Np(e)&&Np(t);if(n||sc(e)&&sc(t)){const r=n?e:Object.keys(e),i=r.length,s=n?t:Object.keys(t),o=s.length,l=n?[]:{};let a=0;for(let u=0;u<o;u++){const c=n?u:s[u];!n&&e[c]===void 0&&t[c]===void 0&&r.includes(c)?(l[c]=void 0,a++):(l[c]=Vv(e[c],t[c]),l[c]===e[c]&&e[c]!==void 0&&a++)}return i===o&&a===i?e:l}return t}function ic(e,t){if(e&&!t||t&&!e)return!1;for(const n in e)if(e[n]!==t[n])return!1;return!0}function Np(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function sc(e){if(!zp(e))return!1;const t=e.constructor;if(typeof t>"u")return!0;const n=t.prototype;return!(!zp(n)||!n.hasOwnProperty("isPrototypeOf"))}function zp(e){return Object.prototype.toString.call(e)==="[object Object]"}function jx(e){return new Promise(t=>{setTimeout(t,e)})}function Bp(e,t,n){return typeof n.structuralSharing=="function"?n.structuralSharing(e,t):n.structuralSharing!==!1?Vv(e,t):t}function fk(e,t,n=0){const r=[...e,t];return n&&r.length>n?r.slice(1):r}function pk(e,t,n=0){const r=[t,...e];return n&&r.length>n?r.slice(0,-1):r}var cr,Mn,si,em,Ux=(em=class extends Rd{constructor(){super();se(this,cr,void 0);se(this,Mn,void 0);se(this,si,void 0);re(this,si,t=>{if(!As&&window.addEventListener){const n=()=>t();return window.addEventListener("visibilitychange",n,!1),()=>{window.removeEventListener("visibilitychange",n)}}})}onSubscribe(){B(this,Mn)||this.setEventListener(B(this,si))}onUnsubscribe(){var t;this.hasListeners()||((t=B(this,Mn))==null||t.call(this),re(this,Mn,void 0))}setEventListener(t){var n;re(this,si,t),(n=B(this,Mn))==null||n.call(this),re(this,Mn,t(r=>{typeof r=="boolean"?this.setFocused(r):this.onFocus()}))}setFocused(t){B(this,cr)!==t&&(re(this,cr,t),this.onFocus())}onFocus(){this.listeners.forEach(t=>{t()})}isFocused(){var t;return typeof B(this,cr)=="boolean"?B(this,cr):((t=globalThis.document)==null?void 0:t.visibilityState)!=="hidden"}},cr=new WeakMap,Mn=new WeakMap,si=new WeakMap,em),Fv=new Ux,oi,kn,ai,tm,$x=(tm=class extends Rd{constructor(){super();se(this,oi,!0);se(this,kn,void 0);se(this,ai,void 0);re(this,ai,t=>{if(!As&&window.addEventListener){const n=()=>t(!0),r=()=>t(!1);return window.addEventListener("online",n,!1),window.addEventListener("offline",r,!1),()=>{window.removeEventListener("online",n),window.removeEventListener("offline",r)}}})}onSubscribe(){B(this,kn)||this.setEventListener(B(this,ai))}onUnsubscribe(){var t;this.hasListeners()||((t=B(this,kn))==null||t.call(this),re(this,kn,void 0))}setEventListener(t){var n;re(this,ai,t),(n=B(this,kn))==null||n.call(this),re(this,kn,t(this.setOnline.bind(this)))}setOnline(t){B(this,oi)!==t&&(re(this,oi,t),this.listeners.forEach(r=>{r(t)}))}isOnline(){return B(this,oi)}},oi=new WeakMap,kn=new WeakMap,ai=new WeakMap,tm),Nv=new $x;function Hx(e){return Math.min(1e3*2**e,3e4)}function zv(e){return(e??"online")==="online"?Nv.isOnline():!0}var Bv=class{constructor(e){this.revert=e==null?void 0:e.revert,this.silent=e==null?void 0:e.silent}};function hk(e){return e instanceof Bv}function mk(e){let t=!1,n=0,r=!1,i,s,o;const l=new Promise((S,m)=>{s=S,o=m}),a=S=>{var m;r||(g(new Bv(S)),(m=e.abort)==null||m.call(e))},u=()=>{t=!0},c=()=>{t=!1},d=()=>!Fv.isFocused()||e.networkMode!=="always"&&!Nv.isOnline(),p=S=>{var m;r||(r=!0,(m=e.onSuccess)==null||m.call(e,S),i==null||i(),s(S))},g=S=>{var m;r||(r=!0,(m=e.onError)==null||m.call(e,S),i==null||i(),o(S))},v=()=>new Promise(S=>{var m;i=f=>{const h=r||!d();return h&&S(f),h},(m=e.onPause)==null||m.call(e)}).then(()=>{var S;i=void 0,r||(S=e.onContinue)==null||S.call(e)}),y=()=>{if(r)return;let S;try{S=e.fn()}catch(m){S=Promise.reject(m)}Promise.resolve(S).then(p).catch(m=>{var x;if(r)return;const f=e.retry??(As?0:3),h=e.retryDelay??Hx,w=typeof h=="function"?h(n,m):h,E=f===!0||typeof f=="number"&&n<f||typeof f=="function"&&f(n,m);if(t||!E){g(m);return}n++,(x=e.onFail)==null||x.call(e,n,m),jx(w).then(()=>{if(d())return v()}).then(()=>{t?g(m):y()})})};return zv(e.networkMode)?y():v().then(y),{promise:l,cancel:a,continue:()=>(i==null?void 0:i())?l:Promise.resolve(),cancelRetry:u,continueRetry:c}}function Wx(){let e=[],t=0,n=p=>{p()},r=p=>{p()},i=p=>setTimeout(p,0);const s=p=>{i=p},o=p=>{let g;t++;try{g=p()}finally{t--,t||u()}return g},l=p=>{t?e.push(p):i(()=>{n(p)})},a=p=>(...g)=>{l(()=>{p(...g)})},u=()=>{const p=e;e=[],p.length&&i(()=>{r(()=>{p.forEach(g=>{n(g)})})})};return{batch:o,batchCalls:a,schedule:l,setNotifyFunction:p=>{n=p},setBatchNotifyFunction:p=>{r=p},setScheduler:s}}var jv=Wx(),tt,de,Ns,Qe,dr,li,Bt,zs,ui,ci,fr,pr,Rn,di,hr,Xi,Bs,oc,js,ac,Us,lc,$s,uc,Hs,cc,Ws,dc,Gs,fc,Da,Uv,nm,Gx=(nm=class extends Rd{constructor(t,n){super();se(this,hr);se(this,Bs);se(this,js);se(this,Us);se(this,$s);se(this,Hs);se(this,Ws);se(this,Gs);se(this,Da);se(this,tt,void 0);se(this,de,void 0);se(this,Ns,void 0);se(this,Qe,void 0);se(this,dr,void 0);se(this,li,void 0);se(this,Bt,void 0);se(this,zs,void 0);se(this,ui,void 0);se(this,ci,void 0);se(this,fr,void 0);se(this,pr,void 0);se(this,Rn,void 0);se(this,di,new Set);this.options=n,re(this,tt,t),re(this,Bt,null),this.bindMethods(),this.setOptions(n)}bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.size===1&&(B(this,de).addObserver(this),jp(B(this,de),this.options)?De(this,hr,Xi).call(this):this.updateResult(),De(this,$s,uc).call(this))}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return pc(B(this,de),this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return pc(B(this,de),this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,De(this,Hs,cc).call(this),De(this,Ws,dc).call(this),B(this,de).removeObserver(this)}setOptions(t,n){const r=this.options,i=B(this,de);if(this.options=B(this,tt).defaultQueryOptions(t),ic(r,this.options)||B(this,tt).getQueryCache().notify({type:"observerOptionsUpdated",query:B(this,de),observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=r.queryKey),De(this,Gs,fc).call(this);const s=this.hasListeners();s&&Up(B(this,de),i,this.options,r)&&De(this,hr,Xi).call(this),this.updateResult(n),s&&(B(this,de)!==i||this.options.enabled!==r.enabled||this.options.staleTime!==r.staleTime)&&De(this,Bs,oc).call(this);const o=De(this,js,ac).call(this);s&&(B(this,de)!==i||this.options.enabled!==r.enabled||o!==B(this,Rn))&&De(this,Us,lc).call(this,o)}getOptimisticResult(t){const n=B(this,tt).getQueryCache().build(B(this,tt),t),r=this.createResult(n,t);return Qx(this,r)&&(re(this,Qe,r),re(this,li,this.options),re(this,dr,B(this,de).state)),r}getCurrentResult(){return B(this,Qe)}trackResult(t){const n={};return Object.keys(t).forEach(r=>{Object.defineProperty(n,r,{configurable:!1,enumerable:!0,get:()=>(B(this,di).add(r),t[r])})}),n}getCurrentQuery(){return B(this,de)}refetch({...t}={}){return this.fetch({...t})}fetchOptimistic(t){const n=B(this,tt).defaultQueryOptions(t),r=B(this,tt).getQueryCache().build(B(this,tt),n);return r.isFetchingOptimistic=!0,r.fetch().then(()=>this.createResult(r,n))}fetch(t){return De(this,hr,Xi).call(this,{...t,cancelRefetch:t.cancelRefetch??!0}).then(()=>(this.updateResult(),B(this,Qe)))}createResult(t,n){var x;const r=B(this,de),i=this.options,s=B(this,Qe),o=B(this,dr),l=B(this,li),u=t!==r?t.state:B(this,Ns),{state:c}=t;let{error:d,errorUpdatedAt:p,fetchStatus:g,status:v}=c,y=!1,S;if(n._optimisticResults){const C=this.hasListeners(),P=!C&&jp(t,n),k=C&&Up(t,r,n,i);(P||k)&&(g=zv(t.options.networkMode)?"fetching":"paused",c.dataUpdatedAt||(v="pending")),n._optimisticResults==="isRestoring"&&(g="idle")}if(n.select&&typeof c.data<"u")if(s&&c.data===(o==null?void 0:o.data)&&n.select===B(this,zs))S=B(this,ui);else try{re(this,zs,n.select),S=n.select(c.data),S=Bp(s==null?void 0:s.data,S,n),re(this,ui,S),re(this,Bt,null)}catch(C){re(this,Bt,C)}else S=c.data;if(typeof n.placeholderData<"u"&&typeof S>"u"&&v==="pending"){let C;if(s!=null&&s.isPlaceholderData&&n.placeholderData===(l==null?void 0:l.placeholderData))C=s.data;else if(C=typeof n.placeholderData=="function"?n.placeholderData((x=B(this,ci))==null?void 0:x.state.data,B(this,ci)):n.placeholderData,n.select&&typeof C<"u")try{C=n.select(C),re(this,Bt,null)}catch(P){re(this,Bt,P)}typeof C<"u"&&(v="success",S=Bp(s==null?void 0:s.data,C,n),y=!0)}B(this,Bt)&&(d=B(this,Bt),S=B(this,ui),p=Date.now(),v="error");const m=g==="fetching",f=v==="pending",h=v==="error",w=f&&m;return{status:v,fetchStatus:g,isPending:f,isSuccess:v==="success",isError:h,isInitialLoading:w,isLoading:w,data:S,dataUpdatedAt:c.dataUpdatedAt,error:d,errorUpdatedAt:p,failureCount:c.fetchFailureCount,failureReason:c.fetchFailureReason,errorUpdateCount:c.errorUpdateCount,isFetched:c.dataUpdateCount>0||c.errorUpdateCount>0,isFetchedAfterMount:c.dataUpdateCount>u.dataUpdateCount||c.errorUpdateCount>u.errorUpdateCount,isFetching:m,isRefetching:m&&!f,isLoadingError:h&&c.dataUpdatedAt===0,isPaused:g==="paused",isPlaceholderData:y,isRefetchError:h&&c.dataUpdatedAt!==0,isStale:bd(t,n),refetch:this.refetch}}updateResult(t){const n=B(this,Qe),r=this.createResult(B(this,de),this.options);if(re(this,dr,B(this,de).state),re(this,li,this.options),B(this,dr).data!==void 0&&re(this,ci,B(this,de)),ic(r,n))return;re(this,Qe,r);const i={},s=()=>{if(!n)return!0;const{notifyOnChangeProps:o}=this.options,l=typeof o=="function"?o():o;if(l==="all"||!l&&!B(this,di).size)return!0;const a=new Set(l??B(this,di));return this.options.throwOnError&&a.add("error"),Object.keys(B(this,Qe)).some(u=>{const c=u;return B(this,Qe)[c]!==n[c]&&a.has(c)})};(t==null?void 0:t.listeners)!==!1&&s()&&(i.listeners=!0),De(this,Da,Uv).call(this,{...i,...t})}onQueryUpdate(){this.updateResult(),this.hasListeners()&&De(this,$s,uc).call(this)}},tt=new WeakMap,de=new WeakMap,Ns=new WeakMap,Qe=new WeakMap,dr=new WeakMap,li=new WeakMap,Bt=new WeakMap,zs=new WeakMap,ui=new WeakMap,ci=new WeakMap,fr=new WeakMap,pr=new WeakMap,Rn=new WeakMap,di=new WeakMap,hr=new WeakSet,Xi=function(t){De(this,Gs,fc).call(this);let n=B(this,de).fetch(this.options,t);return t!=null&&t.throwOnError||(n=n.catch(Nx)),n},Bs=new WeakSet,oc=function(){if(De(this,Hs,cc).call(this),As||B(this,Qe).isStale||!Fp(this.options.staleTime))return;const n=zx(B(this,Qe).dataUpdatedAt,this.options.staleTime)+1;re(this,fr,setTimeout(()=>{B(this,Qe).isStale||this.updateResult()},n))},js=new WeakSet,ac=function(){return(typeof this.options.refetchInterval=="function"?this.options.refetchInterval(B(this,de)):this.options.refetchInterval)??!1},Us=new WeakSet,lc=function(t){De(this,Ws,dc).call(this),re(this,Rn,t),!(As||this.options.enabled===!1||!Fp(B(this,Rn))||B(this,Rn)===0)&&re(this,pr,setInterval(()=>{(this.options.refetchIntervalInBackground||Fv.isFocused())&&De(this,hr,Xi).call(this)},B(this,Rn)))},$s=new WeakSet,uc=function(){De(this,Bs,oc).call(this),De(this,Us,lc).call(this,De(this,js,ac).call(this))},Hs=new WeakSet,cc=function(){B(this,fr)&&(clearTimeout(B(this,fr)),re(this,fr,void 0))},Ws=new WeakSet,dc=function(){B(this,pr)&&(clearInterval(B(this,pr)),re(this,pr,void 0))},Gs=new WeakSet,fc=function(){const t=B(this,tt).getQueryCache().build(B(this,tt),this.options);if(t===B(this,de))return;const n=B(this,de);re(this,de,t),re(this,Ns,t.state),this.hasListeners()&&(n==null||n.removeObserver(this),t.addObserver(this))},Da=new WeakSet,Uv=function(t){jv.batch(()=>{t.listeners&&this.listeners.forEach(n=>{n(B(this,Qe))}),B(this,tt).getQueryCache().notify({query:B(this,de),type:"observerResultsUpdated"})})},nm);function Kx(e,t){return t.enabled!==!1&&!e.state.dataUpdatedAt&&!(e.state.status==="error"&&t.retryOnMount===!1)}function jp(e,t){return Kx(e,t)||e.state.dataUpdatedAt>0&&pc(e,t,t.refetchOnMount)}function pc(e,t,n){if(t.enabled!==!1){const r=typeof n=="function"?n(e):n;return r==="always"||r!==!1&&bd(e,t)}return!1}function Up(e,t,n,r){return n.enabled!==!1&&(e!==t||r.enabled===!1)&&(!n.suspense||e.state.status!=="error")&&bd(e,n)}function bd(e,t){return e.isStaleByTime(t.staleTime)}function Qx(e,t){return!ic(e.getCurrentResult(),t)}var $v=T.createContext(void 0),Yx=e=>{const t=T.useContext($v);if(e)return e;if(!t)throw new Error("No QueryClient set, use QueryClientProvider to set one");return t},gk=({client:e,children:t})=>(T.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]),T.createElement($v.Provider,{value:e},t)),Hv=T.createContext(!1),Xx=()=>T.useContext(Hv);Hv.Provider;function qx(){let e=!1;return{clearReset:()=>{e=!1},reset:()=>{e=!0},isReset:()=>e}}var Zx=T.createContext(qx()),Jx=()=>T.useContext(Zx);function eE(e,t){return typeof e=="function"?e(...t):!!e}var tE=(e,t)=>{(e.suspense||e.throwOnError)&&(t.isReset()||(e.retryOnMount=!1))},nE=e=>{T.useEffect(()=>{e.clearReset()},[e])},rE=({result:e,errorResetBoundary:t,throwOnError:n,query:r})=>e.isError&&!t.isReset()&&!e.isFetching&&r&&eE(n,[e.error,r]),iE=e=>{e.suspense&&typeof e.staleTime!="number"&&(e.staleTime=1e3)},sE=(e,t)=>(e==null?void 0:e.suspense)&&t.isPending,oE=(e,t,n)=>t.fetchOptimistic(e).catch(()=>{n.clearReset()});function aE(e,t,n){const r=Yx(n),i=Xx(),s=Jx(),o=r.defaultQueryOptions(e);o._optimisticResults=i?"isRestoring":"optimistic",iE(o),tE(o,s),nE(s);const[l]=T.useState(()=>new t(r,o)),a=l.getOptimisticResult(o);if(T.useSyncExternalStore(T.useCallback(u=>{const c=i?()=>{}:l.subscribe(jv.batchCalls(u));return l.updateResult(),c},[l,i]),()=>l.getCurrentResult(),()=>l.getCurrentResult()),T.useEffect(()=>{l.setOptions(o,{listeners:!1})},[o,l]),sE(o,a))throw oE(o,l,s);if(rE({result:a,errorResetBoundary:s,throwOnError:o.throwOnError,query:r.getQueryCache().get(o.queryHash)}))throw a.error;return o.notifyOnChangeProps?a:l.trackResult(a)}function vk(e,t){return aE(e,Gx,t)}const Wv=T.createContext({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),qa=T.createContext({}),Ad=T.createContext(null),Za=typeof document<"u",lE=Za?T.useLayoutEffect:T.useEffect,Gv=T.createContext({strict:!1}),Od=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),uE="framerAppearId",Kv="data-"+Od(uE);function cE(e,t,n,r){const{visualElement:i}=T.useContext(qa),s=T.useContext(Gv),o=T.useContext(Ad),l=T.useContext(Wv).reducedMotion,a=T.useRef();r=r||s.renderer,!a.current&&r&&(a.current=r(e,{visualState:t,parent:i,props:n,presenceContext:o,blockInitialAnimation:o?o.initial===!1:!1,reducedMotionConfig:l}));const u=a.current;T.useInsertionEffect(()=>{u&&u.update(n,o)});const c=T.useRef(!!(n[Kv]&&!window.HandoffComplete));return lE(()=>{u&&(u.render(),c.current&&u.animationState&&u.animationState.animateChanges())}),T.useEffect(()=>{u&&(u.updateFeatures(),!c.current&&u.animationState&&u.animationState.animateChanges(),c.current&&(c.current=!1,window.HandoffComplete=!0))}),u}function Qr(e){return typeof e=="object"&&Object.prototype.hasOwnProperty.call(e,"current")}function dE(e,t,n){return T.useCallback(r=>{r&&e.mount&&e.mount(r),t&&(r?t.mount(r):t.unmount()),n&&(typeof n=="function"?n(r):Qr(n)&&(n.current=r))},[t])}function Os(e){return typeof e=="string"||Array.isArray(e)}function Ja(e){return typeof e=="object"&&typeof e.start=="function"}const Id=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],_d=["initial",...Id];function el(e){return Ja(e.animate)||_d.some(t=>Os(e[t]))}function Qv(e){return!!(el(e)||e.variants)}function fE(e,t){if(el(e)){const{initial:n,animate:r}=e;return{initial:n===!1||Os(n)?n:void 0,animate:Os(r)?r:void 0}}return e.inherit!==!1?t:{}}function pE(e){const{initial:t,animate:n}=fE(e,T.useContext(qa));return T.useMemo(()=>({initial:t,animate:n}),[$p(t),$p(n)])}function $p(e){return Array.isArray(e)?e.join(" "):e}const Hp={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},Is={};for(const e in Hp)Is[e]={isEnabled:t=>Hp[e].some(n=>!!t[n])};function hE(e){for(const t in e)Is[t]={...Is[t],...e[t]}}const Yv=T.createContext({}),Xv=T.createContext({}),mE=Symbol.for("motionComponentSymbol");function gE({preloadedFeatures:e,createVisualElement:t,useRender:n,useVisualState:r,Component:i}){e&&hE(e);function s(l,a){let u;const c={...T.useContext(Wv),...l,layoutId:vE(l)},{isStatic:d}=c,p=pE(l),g=r(l,d);if(!d&&Za){p.visualElement=cE(i,g,c,t);const v=T.useContext(Xv),y=T.useContext(Gv).strict;p.visualElement&&(u=p.visualElement.loadFeatures(c,y,e,v))}return T.createElement(qa.Provider,{value:p},u&&p.visualElement?T.createElement(u,{visualElement:p.visualElement,...c}):null,n(i,l,dE(g,p.visualElement,a),g,d,p.visualElement))}const o=T.forwardRef(s);return o[mE]=i,o}function vE({layoutId:e}){const t=T.useContext(Yv).id;return t&&e!==void 0?t+"-"+e:e}function yE(e){function t(r,i={}){return gE(e(r,i))}if(typeof Proxy>"u")return t;const n=new Map;return new Proxy(t,{get:(r,i)=>(n.has(i)||n.set(i,t(i)),n.get(i))})}const wE=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function Vd(e){return typeof e!="string"||e.includes("-")?!1:!!(wE.indexOf(e)>-1||/[A-Z]/.test(e))}const wa={};function SE(e){Object.assign(wa,e)}const Js=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],Mr=new Set(Js);function qv(e,{layout:t,layoutId:n}){return Mr.has(e)||e.startsWith("origin")||(t||n!==void 0)&&(!!wa[e]||e==="opacity")}const at=e=>!!(e&&e.getVelocity),xE={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},EE=Js.length;function TE(e,{enableHardwareAcceleration:t=!0,allowTransformNone:n=!0},r,i){let s="";for(let o=0;o<EE;o++){const l=Js[o];if(e[l]!==void 0){const a=xE[l]||l;s+=`${a}(${e[l]}) `}}return t&&!e.z&&(s+="translateZ(0)"),s=s.trim(),i?s=i(e,r?"":s):n&&r&&(s="none"),s}const Zv=e=>t=>typeof t=="string"&&t.startsWith(e),Jv=Zv("--"),hc=Zv("var(--"),CE=/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,PE=(e,t)=>t&&typeof e=="number"?t.transform(e):e,Wn=(e,t,n)=>Math.min(Math.max(n,e),t),kr={test:e=>typeof e=="number",parse:parseFloat,transform:e=>e},ls={...kr,transform:e=>Wn(0,1,e)},Lo={...kr,default:1},us=e=>Math.round(e*1e5)/1e5,tl=/(-)?([\d]*\.?[\d])+/g,ey=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,LE=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function eo(e){return typeof e=="string"}const to=e=>({test:t=>eo(t)&&t.endsWith(e)&&t.split(" ").length===1,parse:parseFloat,transform:t=>`${t}${e}`}),Sn=to("deg"),Wt=to("%"),K=to("px"),ME=to("vh"),kE=to("vw"),Wp={...Wt,parse:e=>Wt.parse(e)/100,transform:e=>Wt.transform(e*100)},Gp={...kr,transform:Math.round},ty={borderWidth:K,borderTopWidth:K,borderRightWidth:K,borderBottomWidth:K,borderLeftWidth:K,borderRadius:K,radius:K,borderTopLeftRadius:K,borderTopRightRadius:K,borderBottomRightRadius:K,borderBottomLeftRadius:K,width:K,maxWidth:K,height:K,maxHeight:K,size:K,top:K,right:K,bottom:K,left:K,padding:K,paddingTop:K,paddingRight:K,paddingBottom:K,paddingLeft:K,margin:K,marginTop:K,marginRight:K,marginBottom:K,marginLeft:K,rotate:Sn,rotateX:Sn,rotateY:Sn,rotateZ:Sn,scale:Lo,scaleX:Lo,scaleY:Lo,scaleZ:Lo,skew:Sn,skewX:Sn,skewY:Sn,distance:K,translateX:K,translateY:K,translateZ:K,x:K,y:K,z:K,perspective:K,transformPerspective:K,opacity:ls,originX:Wp,originY:Wp,originZ:K,zIndex:Gp,fillOpacity:ls,strokeOpacity:ls,numOctaves:Gp};function Fd(e,t,n,r){const{style:i,vars:s,transform:o,transformOrigin:l}=e;let a=!1,u=!1,c=!0;for(const d in t){const p=t[d];if(Jv(d)){s[d]=p;continue}const g=ty[d],v=PE(p,g);if(Mr.has(d)){if(a=!0,o[d]=v,!c)continue;p!==(g.default||0)&&(c=!1)}else d.startsWith("origin")?(u=!0,l[d]=v):i[d]=v}if(t.transform||(a||r?i.transform=TE(e.transform,n,c,r):i.transform&&(i.transform="none")),u){const{originX:d="50%",originY:p="50%",originZ:g=0}=l;i.transformOrigin=`${d} ${p} ${g}`}}const Nd=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function ny(e,t,n){for(const r in t)!at(t[r])&&!qv(r,n)&&(e[r]=t[r])}function RE({transformTemplate:e},t,n){return T.useMemo(()=>{const r=Nd();return Fd(r,t,{enableHardwareAcceleration:!n},e),Object.assign({},r.vars,r.style)},[t])}function DE(e,t,n){const r=e.style||{},i={};return ny(i,r,e),Object.assign(i,RE(e,t,n)),e.transformValues?e.transformValues(i):i}function bE(e,t,n){const r={},i=DE(e,t,n);return e.drag&&e.dragListener!==!1&&(r.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=e.drag===!0?"none":`pan-${e.drag==="x"?"y":"x"}`),e.tabIndex===void 0&&(e.onTap||e.onTapStart||e.whileTap)&&(r.tabIndex=0),r.style=i,r}const AE=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function Sa(e){return e.startsWith("while")||e.startsWith("drag")&&e!=="draggable"||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||AE.has(e)}let ry=e=>!Sa(e);function OE(e){e&&(ry=t=>t.startsWith("on")?!Sa(t):e(t))}try{OE(require("@emotion/is-prop-valid").default)}catch{}function IE(e,t,n){const r={};for(const i in e)i==="values"&&typeof e.values=="object"||(ry(i)||n===!0&&Sa(i)||!t&&!Sa(i)||e.draggable&&i.startsWith("onDrag"))&&(r[i]=e[i]);return r}function Kp(e,t,n){return typeof e=="string"?e:K.transform(t+n*e)}function _E(e,t,n){const r=Kp(t,e.x,e.width),i=Kp(n,e.y,e.height);return`${r} ${i}`}const VE={offset:"stroke-dashoffset",array:"stroke-dasharray"},FE={offset:"strokeDashoffset",array:"strokeDasharray"};function NE(e,t,n=1,r=0,i=!0){e.pathLength=1;const s=i?VE:FE;e[s.offset]=K.transform(-r);const o=K.transform(t),l=K.transform(n);e[s.array]=`${o} ${l}`}function zd(e,{attrX:t,attrY:n,attrScale:r,originX:i,originY:s,pathLength:o,pathSpacing:l=1,pathOffset:a=0,...u},c,d,p){if(Fd(e,u,c,p),d){e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox);return}e.attrs=e.style,e.style={};const{attrs:g,style:v,dimensions:y}=e;g.transform&&(y&&(v.transform=g.transform),delete g.transform),y&&(i!==void 0||s!==void 0||v.transform)&&(v.transformOrigin=_E(y,i!==void 0?i:.5,s!==void 0?s:.5)),t!==void 0&&(g.x=t),n!==void 0&&(g.y=n),r!==void 0&&(g.scale=r),o!==void 0&&NE(g,o,l,a,!1)}const iy=()=>({...Nd(),attrs:{}}),Bd=e=>typeof e=="string"&&e.toLowerCase()==="svg";function zE(e,t,n,r){const i=T.useMemo(()=>{const s=iy();return zd(s,t,{enableHardwareAcceleration:!1},Bd(r),e.transformTemplate),{...s.attrs,style:{...s.style}}},[t]);if(e.style){const s={};ny(s,e.style,e),i.style={...s,...i.style}}return i}function BE(e=!1){return(n,r,i,{latestValues:s},o)=>{const a=(Vd(n)?zE:bE)(r,s,o,n),c={...IE(r,typeof n=="string",e),...a,ref:i},{children:d}=r,p=T.useMemo(()=>at(d)?d.get():d,[d]);return T.createElement(n,{...c,children:p})}}function sy(e,{style:t,vars:n},r,i){Object.assign(e.style,t,i&&i.getProjectionStyles(r));for(const s in n)e.style.setProperty(s,n[s])}const oy=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function ay(e,t,n,r){sy(e,t,void 0,r);for(const i in t.attrs)e.setAttribute(oy.has(i)?i:Od(i),t.attrs[i])}function jd(e,t){const{style:n}=e,r={};for(const i in n)(at(n[i])||t.style&&at(t.style[i])||qv(i,e))&&(r[i]=n[i]);return r}function ly(e,t){const n=jd(e,t);for(const r in e)if(at(e[r])||at(t[r])){const i=Js.indexOf(r)!==-1?"attr"+r.charAt(0).toUpperCase()+r.substring(1):r;n[i]=e[r]}return n}function Ud(e,t,n,r={},i={}){return typeof t=="function"&&(t=t(n!==void 0?n:e.custom,r,i)),typeof t=="string"&&(t=e.variants&&e.variants[t]),typeof t=="function"&&(t=t(n!==void 0?n:e.custom,r,i)),t}function jE(e){const t=T.useRef(null);return t.current===null&&(t.current=e()),t.current}const xa=e=>Array.isArray(e),UE=e=>!!(e&&typeof e=="object"&&e.mix&&e.toValue),$E=e=>xa(e)?e[e.length-1]||0:e;function Wo(e){const t=at(e)?e.get():e;return UE(t)?t.toValue():t}function HE({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:n},r,i,s){const o={latestValues:WE(r,i,s,e),renderState:t()};return n&&(o.mount=l=>n(r,l,o)),o}const uy=e=>(t,n)=>{const r=T.useContext(qa),i=T.useContext(Ad),s=()=>HE(e,t,r,i);return n?s():jE(s)};function WE(e,t,n,r){const i={},s=r(e,{});for(const p in s)i[p]=Wo(s[p]);let{initial:o,animate:l}=e;const a=el(e),u=Qv(e);t&&u&&!a&&e.inherit!==!1&&(o===void 0&&(o=t.initial),l===void 0&&(l=t.animate));let c=n?n.initial===!1:!1;c=c||o===!1;const d=c?l:o;return d&&typeof d!="boolean"&&!Ja(d)&&(Array.isArray(d)?d:[d]).forEach(g=>{const v=Ud(e,g);if(!v)return;const{transitionEnd:y,transition:S,...m}=v;for(const f in m){let h=m[f];if(Array.isArray(h)){const w=c?h.length-1:0;h=h[w]}h!==null&&(i[f]=h)}for(const f in y)i[f]=y[f]}),i}const Ce=e=>e;class Qp{constructor(){this.order=[],this.scheduled=new Set}add(t){if(!this.scheduled.has(t))return this.scheduled.add(t),this.order.push(t),!0}remove(t){const n=this.order.indexOf(t);n!==-1&&(this.order.splice(n,1),this.scheduled.delete(t))}clear(){this.order.length=0,this.scheduled.clear()}}function GE(e){let t=new Qp,n=new Qp,r=0,i=!1,s=!1;const o=new WeakSet,l={schedule:(a,u=!1,c=!1)=>{const d=c&&i,p=d?t:n;return u&&o.add(a),p.add(a)&&d&&i&&(r=t.order.length),a},cancel:a=>{n.remove(a),o.delete(a)},process:a=>{if(i){s=!0;return}if(i=!0,[t,n]=[n,t],n.clear(),r=t.order.length,r)for(let u=0;u<r;u++){const c=t.order[u];c(a),o.has(c)&&(l.schedule(c),e())}i=!1,s&&(s=!1,l.process(a))}};return l}const Mo=["prepare","read","update","preRender","render","postRender"],KE=40;function QE(e,t){let n=!1,r=!0;const i={delta:0,timestamp:0,isProcessing:!1},s=Mo.reduce((d,p)=>(d[p]=GE(()=>n=!0),d),{}),o=d=>s[d].process(i),l=()=>{const d=performance.now();n=!1,i.delta=r?1e3/60:Math.max(Math.min(d-i.timestamp,KE),1),i.timestamp=d,i.isProcessing=!0,Mo.forEach(o),i.isProcessing=!1,n&&t&&(r=!1,e(l))},a=()=>{n=!0,r=!0,i.isProcessing||e(l)};return{schedule:Mo.reduce((d,p)=>{const g=s[p];return d[p]=(v,y=!1,S=!1)=>(n||a(),g.schedule(v,y,S)),d},{}),cancel:d=>Mo.forEach(p=>s[p].cancel(d)),state:i,steps:s}}const{schedule:pe,cancel:cn,state:We,steps:jl}=QE(typeof requestAnimationFrame<"u"?requestAnimationFrame:Ce,!0),YE={useVisualState:uy({scrapeMotionValuesFromProps:ly,createRenderState:iy,onMount:(e,t,{renderState:n,latestValues:r})=>{pe.read(()=>{try{n.dimensions=typeof t.getBBox=="function"?t.getBBox():t.getBoundingClientRect()}catch{n.dimensions={x:0,y:0,width:0,height:0}}}),pe.render(()=>{zd(n,r,{enableHardwareAcceleration:!1},Bd(t.tagName),e.transformTemplate),ay(t,n)})}})},XE={useVisualState:uy({scrapeMotionValuesFromProps:jd,createRenderState:Nd})};function qE(e,{forwardMotionProps:t=!1},n,r){return{...Vd(e)?YE:XE,preloadedFeatures:n,useRender:BE(t),createVisualElement:r,Component:e}}function Zt(e,t,n,r={passive:!0}){return e.addEventListener(t,n,r),()=>e.removeEventListener(t,n)}const cy=e=>e.pointerType==="mouse"?typeof e.button!="number"||e.button<=0:e.isPrimary!==!1;function nl(e,t="page"){return{point:{x:e[t+"X"],y:e[t+"Y"]}}}const ZE=e=>t=>cy(t)&&e(t,nl(t));function tn(e,t,n,r){return Zt(e,t,ZE(n),r)}const JE=(e,t)=>n=>t(e(n)),jn=(...e)=>e.reduce(JE);function dy(e){let t=null;return()=>{const n=()=>{t=null};return t===null?(t=e,n):!1}}const Yp=dy("dragHorizontal"),Xp=dy("dragVertical");function fy(e){let t=!1;if(e==="y")t=Xp();else if(e==="x")t=Yp();else{const n=Yp(),r=Xp();n&&r?t=()=>{n(),r()}:(n&&n(),r&&r())}return t}function py(){const e=fy(!0);return e?(e(),!1):!0}class Xn{constructor(t){this.isMounted=!1,this.node=t}update(){}}function qp(e,t){const n="pointer"+(t?"enter":"leave"),r="onHover"+(t?"Start":"End"),i=(s,o)=>{if(s.type==="touch"||py())return;const l=e.getProps();e.animationState&&l.whileHover&&e.animationState.setActive("whileHover",t),l[r]&&pe.update(()=>l[r](s,o))};return tn(e.current,n,i,{passive:!e.getProps()[r]})}class eT extends Xn{mount(){this.unmount=jn(qp(this.node,!0),qp(this.node,!1))}unmount(){}}class tT extends Xn{constructor(){super(...arguments),this.isActive=!1}onFocus(){let t=!1;try{t=this.node.current.matches(":focus-visible")}catch{t=!0}!t||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){!this.isActive||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=jn(Zt(this.node.current,"focus",()=>this.onFocus()),Zt(this.node.current,"blur",()=>this.onBlur()))}unmount(){}}const hy=(e,t)=>t?e===t?!0:hy(e,t.parentElement):!1;function Ul(e,t){if(!t)return;const n=new PointerEvent("pointer"+e);t(n,nl(n))}class nT extends Xn{constructor(){super(...arguments),this.removeStartListeners=Ce,this.removeEndListeners=Ce,this.removeAccessibleListeners=Ce,this.startPointerPress=(t,n)=>{if(this.removeEndListeners(),this.isPressing)return;const r=this.node.getProps(),s=tn(window,"pointerup",(l,a)=>{if(!this.checkPressEnd())return;const{onTap:u,onTapCancel:c}=this.node.getProps();pe.update(()=>{hy(this.node.current,l.target)?u&&u(l,a):c&&c(l,a)})},{passive:!(r.onTap||r.onPointerUp)}),o=tn(window,"pointercancel",(l,a)=>this.cancelPress(l,a),{passive:!(r.onTapCancel||r.onPointerCancel)});this.removeEndListeners=jn(s,o),this.startPress(t,n)},this.startAccessiblePress=()=>{const t=s=>{if(s.key!=="Enter"||this.isPressing)return;const o=l=>{l.key!=="Enter"||!this.checkPressEnd()||Ul("up",(a,u)=>{const{onTap:c}=this.node.getProps();c&&pe.update(()=>c(a,u))})};this.removeEndListeners(),this.removeEndListeners=Zt(this.node.current,"keyup",o),Ul("down",(l,a)=>{this.startPress(l,a)})},n=Zt(this.node.current,"keydown",t),r=()=>{this.isPressing&&Ul("cancel",(s,o)=>this.cancelPress(s,o))},i=Zt(this.node.current,"blur",r);this.removeAccessibleListeners=jn(n,i)}}startPress(t,n){this.isPressing=!0;const{onTapStart:r,whileTap:i}=this.node.getProps();i&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),r&&pe.update(()=>r(t,n))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!py()}cancelPress(t,n){if(!this.checkPressEnd())return;const{onTapCancel:r}=this.node.getProps();r&&pe.update(()=>r(t,n))}mount(){const t=this.node.getProps(),n=tn(this.node.current,"pointerdown",this.startPointerPress,{passive:!(t.onTapStart||t.onPointerStart)}),r=Zt(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=jn(n,r)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}const mc=new WeakMap,$l=new WeakMap,rT=e=>{const t=mc.get(e.target);t&&t(e)},iT=e=>{e.forEach(rT)};function sT({root:e,...t}){const n=e||document;$l.has(n)||$l.set(n,{});const r=$l.get(n),i=JSON.stringify(t);return r[i]||(r[i]=new IntersectionObserver(iT,{root:e,...t})),r[i]}function oT(e,t,n){const r=sT(t);return mc.set(e,n),r.observe(e),()=>{mc.delete(e),r.unobserve(e)}}const aT={some:0,all:1};class lT extends Xn{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:t={}}=this.node.getProps(),{root:n,margin:r,amount:i="some",once:s}=t,o={root:n?n.current:void 0,rootMargin:r,threshold:typeof i=="number"?i:aT[i]},l=a=>{const{isIntersecting:u}=a;if(this.isInView===u||(this.isInView=u,s&&!u&&this.hasEnteredView))return;u&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",u);const{onViewportEnter:c,onViewportLeave:d}=this.node.getProps(),p=u?c:d;p&&p(a)};return oT(this.node.current,o,l)}mount(){this.startObserver()}update(){if(typeof IntersectionObserver>"u")return;const{props:t,prevProps:n}=this.node;["amount","margin","root"].some(uT(t,n))&&this.startObserver()}unmount(){}}function uT({viewport:e={}},{viewport:t={}}={}){return n=>e[n]!==t[n]}const cT={inView:{Feature:lT},tap:{Feature:nT},focus:{Feature:tT},hover:{Feature:eT}};function my(e,t){if(!Array.isArray(t))return!1;const n=t.length;if(n!==e.length)return!1;for(let r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}function dT(e){const t={};return e.values.forEach((n,r)=>t[r]=n.get()),t}function fT(e){const t={};return e.values.forEach((n,r)=>t[r]=n.getVelocity()),t}function rl(e,t,n){const r=e.getProps();return Ud(r,t,n!==void 0?n:r.custom,dT(e),fT(e))}let pT=Ce,$d=Ce;const Un=e=>e*1e3,nn=e=>e/1e3,hT={current:!1},gy=e=>Array.isArray(e)&&typeof e[0]=="number";function vy(e){return!!(!e||typeof e=="string"&&yy[e]||gy(e)||Array.isArray(e)&&e.every(vy))}const qi=([e,t,n,r])=>`cubic-bezier(${e}, ${t}, ${n}, ${r})`,yy={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:qi([0,.65,.55,1]),circOut:qi([.55,0,1,.45]),backIn:qi([.31,.01,.66,-.59]),backOut:qi([.33,1.53,.69,.99])};function wy(e){if(e)return gy(e)?qi(e):Array.isArray(e)?e.map(wy):yy[e]}function mT(e,t,n,{delay:r=0,duration:i,repeat:s=0,repeatType:o="loop",ease:l,times:a}={}){const u={[t]:n};a&&(u.offset=a);const c=wy(l);return Array.isArray(c)&&(u.easing=c),e.animate(u,{delay:r,duration:i,easing:Array.isArray(c)?"linear":c,fill:"both",iterations:s+1,direction:o==="reverse"?"alternate":"normal"})}function gT(e,{repeat:t,repeatType:n="loop"}){const r=t&&n!=="loop"&&t%2===1?0:e.length-1;return e[r]}const Sy=(e,t,n)=>(((1-3*n+3*t)*e+(3*n-6*t))*e+3*t)*e,vT=1e-7,yT=12;function wT(e,t,n,r,i){let s,o,l=0;do o=t+(n-t)/2,s=Sy(o,r,i)-e,s>0?n=o:t=o;while(Math.abs(s)>vT&&++l<yT);return o}function no(e,t,n,r){if(e===t&&n===r)return Ce;const i=s=>wT(s,0,1,e,n);return s=>s===0||s===1?s:Sy(i(s),t,r)}const ST=no(.42,0,1,1),xT=no(0,0,.58,1),xy=no(.42,0,.58,1),ET=e=>Array.isArray(e)&&typeof e[0]!="number",Ey=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,Ty=e=>t=>1-e(1-t),Hd=e=>1-Math.sin(Math.acos(e)),Cy=Ty(Hd),TT=Ey(Hd),Py=no(.33,1.53,.69,.99),Wd=Ty(Py),CT=Ey(Wd),PT=e=>(e*=2)<1?.5*Wd(e):.5*(2-Math.pow(2,-10*(e-1))),LT={linear:Ce,easeIn:ST,easeInOut:xy,easeOut:xT,circIn:Hd,circInOut:TT,circOut:Cy,backIn:Wd,backInOut:CT,backOut:Py,anticipate:PT},Zp=e=>{if(Array.isArray(e)){$d(e.length===4);const[t,n,r,i]=e;return no(t,n,r,i)}else if(typeof e=="string")return LT[e];return e},Gd=(e,t)=>n=>!!(eo(n)&&LE.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),Ly=(e,t,n)=>r=>{if(!eo(r))return r;const[i,s,o,l]=r.match(tl);return{[e]:parseFloat(i),[t]:parseFloat(s),[n]:parseFloat(o),alpha:l!==void 0?parseFloat(l):1}},MT=e=>Wn(0,255,e),Hl={...kr,transform:e=>Math.round(MT(e))},ur={test:Gd("rgb","red"),parse:Ly("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:r=1})=>"rgba("+Hl.transform(e)+", "+Hl.transform(t)+", "+Hl.transform(n)+", "+us(ls.transform(r))+")"};function kT(e){let t="",n="",r="",i="";return e.length>5?(t=e.substring(1,3),n=e.substring(3,5),r=e.substring(5,7),i=e.substring(7,9)):(t=e.substring(1,2),n=e.substring(2,3),r=e.substring(3,4),i=e.substring(4,5),t+=t,n+=n,r+=r,i+=i),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:i?parseInt(i,16)/255:1}}const gc={test:Gd("#"),parse:kT,transform:ur.transform},Yr={test:Gd("hsl","hue"),parse:Ly("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:r=1})=>"hsla("+Math.round(e)+", "+Wt.transform(us(t))+", "+Wt.transform(us(n))+", "+us(ls.transform(r))+")"},Ye={test:e=>ur.test(e)||gc.test(e)||Yr.test(e),parse:e=>ur.test(e)?ur.parse(e):Yr.test(e)?Yr.parse(e):gc.parse(e),transform:e=>eo(e)?e:e.hasOwnProperty("red")?ur.transform(e):Yr.transform(e)},ve=(e,t,n)=>-n*e+n*t+e;function Wl(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+(t-e)*6*n:n<1/2?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function RT({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,t/=100,n/=100;let i=0,s=0,o=0;if(!t)i=s=o=n;else{const l=n<.5?n*(1+t):n+t-n*t,a=2*n-l;i=Wl(a,l,e+1/3),s=Wl(a,l,e),o=Wl(a,l,e-1/3)}return{red:Math.round(i*255),green:Math.round(s*255),blue:Math.round(o*255),alpha:r}}const Gl=(e,t,n)=>{const r=e*e;return Math.sqrt(Math.max(0,n*(t*t-r)+r))},DT=[gc,ur,Yr],bT=e=>DT.find(t=>t.test(e));function Jp(e){const t=bT(e);let n=t.parse(e);return t===Yr&&(n=RT(n)),n}const My=(e,t)=>{const n=Jp(e),r=Jp(t),i={...n};return s=>(i.red=Gl(n.red,r.red,s),i.green=Gl(n.green,r.green,s),i.blue=Gl(n.blue,r.blue,s),i.alpha=ve(n.alpha,r.alpha,s),ur.transform(i))};function AT(e){var t,n;return isNaN(e)&&eo(e)&&(((t=e.match(tl))===null||t===void 0?void 0:t.length)||0)+(((n=e.match(ey))===null||n===void 0?void 0:n.length)||0)>0}const ky={regex:CE,countKey:"Vars",token:"${v}",parse:Ce},Ry={regex:ey,countKey:"Colors",token:"${c}",parse:Ye.parse},Dy={regex:tl,countKey:"Numbers",token:"${n}",parse:kr.parse};function Kl(e,{regex:t,countKey:n,token:r,parse:i}){const s=e.tokenised.match(t);s&&(e["num"+n]=s.length,e.tokenised=e.tokenised.replace(t,r),e.values.push(...s.map(i)))}function Ea(e){const t=e.toString(),n={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&Kl(n,ky),Kl(n,Ry),Kl(n,Dy),n}function by(e){return Ea(e).values}function Ay(e){const{values:t,numColors:n,numVars:r,tokenised:i}=Ea(e),s=t.length;return o=>{let l=i;for(let a=0;a<s;a++)a<r?l=l.replace(ky.token,o[a]):a<r+n?l=l.replace(Ry.token,Ye.transform(o[a])):l=l.replace(Dy.token,us(o[a]));return l}}const OT=e=>typeof e=="number"?0:e;function IT(e){const t=by(e);return Ay(e)(t.map(OT))}const Gn={test:AT,parse:by,createTransformer:Ay,getAnimatableNone:IT},Oy=(e,t)=>n=>`${n>0?t:e}`;function Iy(e,t){return typeof e=="number"?n=>ve(e,t,n):Ye.test(e)?My(e,t):e.startsWith("var(")?Oy(e,t):Vy(e,t)}const _y=(e,t)=>{const n=[...e],r=n.length,i=e.map((s,o)=>Iy(s,t[o]));return s=>{for(let o=0;o<r;o++)n[o]=i[o](s);return n}},_T=(e,t)=>{const n={...e,...t},r={};for(const i in n)e[i]!==void 0&&t[i]!==void 0&&(r[i]=Iy(e[i],t[i]));return i=>{for(const s in r)n[s]=r[s](i);return n}},Vy=(e,t)=>{const n=Gn.createTransformer(t),r=Ea(e),i=Ea(t);return r.numVars===i.numVars&&r.numColors===i.numColors&&r.numNumbers>=i.numNumbers?jn(_y(r.values,i.values),n):Oy(e,t)},_s=(e,t,n)=>{const r=t-e;return r===0?1:(n-e)/r},eh=(e,t)=>n=>ve(e,t,n);function VT(e){return typeof e=="number"?eh:typeof e=="string"?Ye.test(e)?My:Vy:Array.isArray(e)?_y:typeof e=="object"?_T:eh}function FT(e,t,n){const r=[],i=n||VT(e[0]),s=e.length-1;for(let o=0;o<s;o++){let l=i(e[o],e[o+1]);if(t){const a=Array.isArray(t)?t[o]||Ce:t;l=jn(a,l)}r.push(l)}return r}function Fy(e,t,{clamp:n=!0,ease:r,mixer:i}={}){const s=e.length;if($d(s===t.length),s===1)return()=>t[0];e[0]>e[s-1]&&(e=[...e].reverse(),t=[...t].reverse());const o=FT(t,r,i),l=o.length,a=u=>{let c=0;if(l>1)for(;c<e.length-2&&!(u<e[c+1]);c++);const d=_s(e[c],e[c+1],u);return o[c](d)};return n?u=>a(Wn(e[0],e[s-1],u)):a}function NT(e,t){const n=e[e.length-1];for(let r=1;r<=t;r++){const i=_s(0,t,r);e.push(ve(n,1,i))}}function zT(e){const t=[0];return NT(t,e.length-1),t}function BT(e,t){return e.map(n=>n*t)}function jT(e,t){return e.map(()=>t||xy).splice(0,e.length-1)}function Ta({duration:e=300,keyframes:t,times:n,ease:r="easeInOut"}){const i=ET(r)?r.map(Zp):Zp(r),s={done:!1,value:t[0]},o=BT(n&&n.length===t.length?n:zT(t),e),l=Fy(o,t,{ease:Array.isArray(i)?i:jT(t,i)});return{calculatedDuration:e,next:a=>(s.value=l(a),s.done=a>=e,s)}}function Ny(e,t){return t?e*(1e3/t):0}const UT=5;function zy(e,t,n){const r=Math.max(t-UT,0);return Ny(n-e(r),t-r)}const Ql=.001,$T=.01,th=10,HT=.05,WT=1;function GT({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let i,s;pT(e<=Un(th));let o=1-t;o=Wn(HT,WT,o),e=Wn($T,th,nn(e)),o<1?(i=u=>{const c=u*o,d=c*e,p=c-n,g=vc(u,o),v=Math.exp(-d);return Ql-p/g*v},s=u=>{const d=u*o*e,p=d*n+n,g=Math.pow(o,2)*Math.pow(u,2)*e,v=Math.exp(-d),y=vc(Math.pow(u,2),o);return(-i(u)+Ql>0?-1:1)*((p-g)*v)/y}):(i=u=>{const c=Math.exp(-u*e),d=(u-n)*e+1;return-Ql+c*d},s=u=>{const c=Math.exp(-u*e),d=(n-u)*(e*e);return c*d});const l=5/e,a=QT(i,s,l);if(e=Un(e),isNaN(a))return{stiffness:100,damping:10,duration:e};{const u=Math.pow(a,2)*r;return{stiffness:u,damping:o*2*Math.sqrt(r*u),duration:e}}}const KT=12;function QT(e,t,n){let r=n;for(let i=1;i<KT;i++)r=r-e(r)/t(r);return r}function vc(e,t){return e*Math.sqrt(1-t*t)}const YT=["duration","bounce"],XT=["stiffness","damping","mass"];function nh(e,t){return t.some(n=>e[n]!==void 0)}function qT(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!nh(e,XT)&&nh(e,YT)){const n=GT(e);t={...t,...n,velocity:0,mass:1},t.isResolvedFromDuration=!0}return t}function By({keyframes:e,restDelta:t,restSpeed:n,...r}){const i=e[0],s=e[e.length-1],o={done:!1,value:i},{stiffness:l,damping:a,mass:u,velocity:c,duration:d,isResolvedFromDuration:p}=qT(r),g=c?-nn(c):0,v=a/(2*Math.sqrt(l*u)),y=s-i,S=nn(Math.sqrt(l/u)),m=Math.abs(y)<5;n||(n=m?.01:2),t||(t=m?.005:.5);let f;if(v<1){const h=vc(S,v);f=w=>{const E=Math.exp(-v*S*w);return s-E*((g+v*S*y)/h*Math.sin(h*w)+y*Math.cos(h*w))}}else if(v===1)f=h=>s-Math.exp(-S*h)*(y+(g+S*y)*h);else{const h=S*Math.sqrt(v*v-1);f=w=>{const E=Math.exp(-v*S*w),x=Math.min(h*w,300);return s-E*((g+v*S*y)*Math.sinh(x)+h*y*Math.cosh(x))/h}}return{calculatedDuration:p&&d||null,next:h=>{const w=f(h);if(p)o.done=h>=d;else{let E=g;h!==0&&(v<1?E=zy(f,h,w):E=0);const x=Math.abs(E)<=n,C=Math.abs(s-w)<=t;o.done=x&&C}return o.value=o.done?s:w,o}}}function rh({keyframes:e,velocity:t=0,power:n=.8,timeConstant:r=325,bounceDamping:i=10,bounceStiffness:s=500,modifyTarget:o,min:l,max:a,restDelta:u=.5,restSpeed:c}){const d=e[0],p={done:!1,value:d},g=P=>l!==void 0&&P<l||a!==void 0&&P>a,v=P=>l===void 0?a:a===void 0||Math.abs(l-P)<Math.abs(a-P)?l:a;let y=n*t;const S=d+y,m=o===void 0?S:o(S);m!==S&&(y=m-d);const f=P=>-y*Math.exp(-P/r),h=P=>m+f(P),w=P=>{const k=f(P),R=h(P);p.done=Math.abs(k)<=u,p.value=p.done?m:R};let E,x;const C=P=>{g(p.value)&&(E=P,x=By({keyframes:[p.value,v(p.value)],velocity:zy(h,P,p.value),damping:i,stiffness:s,restDelta:u,restSpeed:c}))};return C(0),{calculatedDuration:null,next:P=>{let k=!1;return!x&&E===void 0&&(k=!0,w(P),C(P)),E!==void 0&&P>E?x.next(P-E):(!k&&w(P),p)}}}const ZT=e=>{const t=({timestamp:n})=>e(n);return{start:()=>pe.update(t,!0),stop:()=>cn(t),now:()=>We.isProcessing?We.timestamp:performance.now()}},ih=2e4;function sh(e){let t=0;const n=50;let r=e.next(t);for(;!r.done&&t<ih;)t+=n,r=e.next(t);return t>=ih?1/0:t}const JT={decay:rh,inertia:rh,tween:Ta,keyframes:Ta,spring:By};function Ca({autoplay:e=!0,delay:t=0,driver:n=ZT,keyframes:r,type:i="keyframes",repeat:s=0,repeatDelay:o=0,repeatType:l="loop",onPlay:a,onStop:u,onComplete:c,onUpdate:d,...p}){let g=1,v=!1,y,S;const m=()=>{S=new Promise($=>{y=$})};m();let f;const h=JT[i]||Ta;let w;h!==Ta&&typeof r[0]!="number"&&(w=Fy([0,100],r,{clamp:!1}),r=[0,100]);const E=h({...p,keyframes:r});let x;l==="mirror"&&(x=h({...p,keyframes:[...r].reverse(),velocity:-(p.velocity||0)}));let C="idle",P=null,k=null,R=null;E.calculatedDuration===null&&s&&(E.calculatedDuration=sh(E));const{calculatedDuration:O}=E;let N=1/0,_=1/0;O!==null&&(N=O+o,_=N*(s+1)-o);let M=0;const b=$=>{if(k===null)return;g>0&&(k=Math.min(k,$)),g<0&&(k=Math.min($-_/g,k)),P!==null?M=P:M=Math.round($-k)*g;const J=M-t*(g>=0?1:-1),lt=g>=0?J<0:J>_;M=Math.max(J,0),C==="finished"&&P===null&&(M=_);let Re=M,et=E;if(s){const Mi=M/N;let Rr=Math.floor(Mi),Le=Mi%1;!Le&&Mi>=1&&(Le=1),Le===1&&Rr--,Rr=Math.min(Rr,s+1);const hn=!!(Rr%2);hn&&(l==="reverse"?(Le=1-Le,o&&(Le-=o/N)):l==="mirror"&&(et=x));let ki=Wn(0,1,Le);M>_&&(ki=l==="reverse"&&hn?1:0),Re=ki*N}const Pe=lt?{done:!1,value:r[0]}:et.next(Re);w&&(Pe.value=w(Pe.value));let{done:Mt}=Pe;!lt&&O!==null&&(Mt=g>=0?M>=_:M<=0);const il=P===null&&(C==="finished"||C==="running"&&Mt);return d&&d(Pe.value),il&&I(),Pe},U=()=>{f&&f.stop(),f=void 0},Y=()=>{C="idle",U(),y(),m(),k=R=null},I=()=>{C="finished",c&&c(),U(),y()},F=()=>{if(v)return;f||(f=n(b));const $=f.now();a&&a(),P!==null?k=$-P:(!k||C==="finished")&&(k=$),C==="finished"&&m(),R=k,P=null,C="running",f.start()};e&&F();const z={then($,J){return S.then($,J)},get time(){return nn(M)},set time($){$=Un($),M=$,P!==null||!f||g===0?P=$:k=f.now()-$/g},get duration(){const $=E.calculatedDuration===null?sh(E):E.calculatedDuration;return nn($)},get speed(){return g},set speed($){$===g||!f||(g=$,z.time=nn(M))},get state(){return C},play:F,pause:()=>{C="paused",P=M},stop:()=>{v=!0,C!=="idle"&&(C="idle",u&&u(),Y())},cancel:()=>{R!==null&&b(R),Y()},complete:()=>{C="finished"},sample:$=>(k=0,b($))};return z}function eC(e){let t;return()=>(t===void 0&&(t=e()),t)}const tC=eC(()=>Object.hasOwnProperty.call(Element.prototype,"animate")),nC=new Set(["opacity","clipPath","filter","transform","backgroundColor"]),ko=10,rC=2e4,iC=(e,t)=>t.type==="spring"||e==="backgroundColor"||!vy(t.ease);function sC(e,t,{onUpdate:n,onComplete:r,...i}){if(!(tC()&&nC.has(t)&&!i.repeatDelay&&i.repeatType!=="mirror"&&i.damping!==0&&i.type!=="inertia"))return!1;let o=!1,l,a;const u=()=>{a=new Promise(f=>{l=f})};u();let{keyframes:c,duration:d=300,ease:p,times:g}=i;if(iC(t,i)){const f=Ca({...i,repeat:0,delay:0});let h={done:!1,value:c[0]};const w=[];let E=0;for(;!h.done&&E<rC;)h=f.sample(E),w.push(h.value),E+=ko;g=void 0,c=w,d=E-ko,p="linear"}const v=mT(e.owner.current,t,c,{...i,duration:d,ease:p,times:g}),y=()=>v.cancel(),S=()=>{pe.update(y),l(),u()};return v.onfinish=()=>{e.set(gT(c,i)),r&&r(),S()},{then(f,h){return a.then(f,h)},attachTimeline(f){return v.timeline=f,v.onfinish=null,Ce},get time(){return nn(v.currentTime||0)},set time(f){v.currentTime=Un(f)},get speed(){return v.playbackRate},set speed(f){v.playbackRate=f},get duration(){return nn(d)},play:()=>{o||(v.play(),cn(y))},pause:()=>v.pause(),stop:()=>{if(o=!0,v.playState==="idle")return;const{currentTime:f}=v;if(f){const h=Ca({...i,autoplay:!1});e.setWithVelocity(h.sample(f-ko).value,h.sample(f).value,ko)}S()},complete:()=>v.finish(),cancel:S}}function oC({keyframes:e,delay:t,onUpdate:n,onComplete:r}){const i=()=>(n&&n(e[e.length-1]),r&&r(),{time:0,speed:1,duration:0,play:Ce,pause:Ce,stop:Ce,then:s=>(s(),Promise.resolve()),cancel:Ce,complete:Ce});return t?Ca({keyframes:[0,1],duration:0,delay:t,onComplete:i}):i()}const aC={type:"spring",stiffness:500,damping:25,restSpeed:10},lC=e=>({type:"spring",stiffness:550,damping:e===0?2*Math.sqrt(550):30,restSpeed:10}),uC={type:"keyframes",duration:.8},cC={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},dC=(e,{keyframes:t})=>t.length>2?uC:Mr.has(e)?e.startsWith("scale")?lC(t[1]):aC:cC,yc=(e,t)=>e==="zIndex"?!1:!!(typeof t=="number"||Array.isArray(t)||typeof t=="string"&&(Gn.test(t)||t==="0")&&!t.startsWith("url(")),fC=new Set(["brightness","contrast","saturate","opacity"]);function pC(e){const[t,n]=e.slice(0,-1).split("(");if(t==="drop-shadow")return e;const[r]=n.match(tl)||[];if(!r)return e;const i=n.replace(r,"");let s=fC.has(t)?1:0;return r!==n&&(s*=100),t+"("+s+i+")"}const hC=/([a-z-]*)\(.*?\)/g,wc={...Gn,getAnimatableNone:e=>{const t=e.match(hC);return t?t.map(pC).join(" "):e}},mC={...ty,color:Ye,backgroundColor:Ye,outlineColor:Ye,fill:Ye,stroke:Ye,borderColor:Ye,borderTopColor:Ye,borderRightColor:Ye,borderBottomColor:Ye,borderLeftColor:Ye,filter:wc,WebkitFilter:wc},Kd=e=>mC[e];function jy(e,t){let n=Kd(e);return n!==wc&&(n=Gn),n.getAnimatableNone?n.getAnimatableNone(t):void 0}const Uy=e=>/^0[^.\s]+$/.test(e);function gC(e){if(typeof e=="number")return e===0;if(e!==null)return e==="none"||e==="0"||Uy(e)}function vC(e,t,n,r){const i=yc(t,n);let s;Array.isArray(n)?s=[...n]:s=[null,n];const o=r.from!==void 0?r.from:e.get();let l;const a=[];for(let u=0;u<s.length;u++)s[u]===null&&(s[u]=u===0?o:s[u-1]),gC(s[u])&&a.push(u),typeof s[u]=="string"&&s[u]!=="none"&&s[u]!=="0"&&(l=s[u]);if(i&&a.length&&l)for(let u=0;u<a.length;u++){const c=a[u];s[c]=jy(t,l)}return s}function yC({when:e,delay:t,delayChildren:n,staggerChildren:r,staggerDirection:i,repeat:s,repeatType:o,repeatDelay:l,from:a,elapsed:u,...c}){return!!Object.keys(c).length}function Qd(e,t){return e[t]||e.default||e}const Yd=(e,t,n,r={})=>i=>{const s=Qd(r,e)||{},o=s.delay||r.delay||0;let{elapsed:l=0}=r;l=l-Un(o);const a=vC(t,e,n,s),u=a[0],c=a[a.length-1],d=yc(e,u),p=yc(e,c);let g={keyframes:a,velocity:t.getVelocity(),ease:"easeOut",...s,delay:-l,onUpdate:v=>{t.set(v),s.onUpdate&&s.onUpdate(v)},onComplete:()=>{i(),s.onComplete&&s.onComplete()}};if(yC(s)||(g={...g,...dC(e,g)}),g.duration&&(g.duration=Un(g.duration)),g.repeatDelay&&(g.repeatDelay=Un(g.repeatDelay)),!d||!p||hT.current||s.type===!1)return oC(g);if(!r.isHandoff&&t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const v=sC(t,e,g);if(v)return v}return Ca(g)};function Pa(e){return!!(at(e)&&e.add)}const $y=e=>/^\-?\d*\.?\d+$/.test(e);function Xd(e,t){e.indexOf(t)===-1&&e.push(t)}function qd(e,t){const n=e.indexOf(t);n>-1&&e.splice(n,1)}class Zd{constructor(){this.subscriptions=[]}add(t){return Xd(this.subscriptions,t),()=>qd(this.subscriptions,t)}notify(t,n,r){const i=this.subscriptions.length;if(i)if(i===1)this.subscriptions[0](t,n,r);else for(let s=0;s<i;s++){const o=this.subscriptions[s];o&&o(t,n,r)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const wC=e=>!isNaN(parseFloat(e)),oh={current:void 0};class SC{constructor(t,n={}){this.version="10.16.16",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(r,i=!0)=>{this.prev=this.current,this.current=r;const{delta:s,timestamp:o}=We;this.lastUpdated!==o&&(this.timeDelta=s,this.lastUpdated=o,pe.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),i&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>pe.postRender(this.velocityCheck),this.velocityCheck=({timestamp:r})=>{r!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=t,this.canTrackVelocity=wC(this.current),this.owner=n.owner}onChange(t){return this.on("change",t)}on(t,n){this.events[t]||(this.events[t]=new Zd);const r=this.events[t].add(n);return t==="change"?()=>{r(),pe.read(()=>{this.events.change.getSize()||this.stop()})}:r}clearListeners(){for(const t in this.events)this.events[t].clear()}attach(t,n){this.passiveEffect=t,this.stopPassiveEffect=n}set(t,n=!0){!n||!this.passiveEffect?this.updateAndNotify(t,n):this.passiveEffect(t,this.updateAndNotify)}setWithVelocity(t,n,r){this.set(n),this.prev=t,this.timeDelta=r}jump(t){this.updateAndNotify(t),this.prev=t,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return oh.current&&oh.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?Ny(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(t){return this.stop(),new Promise(n=>{this.hasAnimated=!0,this.animation=t(n),this.events.animationStart&&this.events.animationStart.notify()}).then(()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()})}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function Si(e,t){return new SC(e,t)}const Hy=e=>t=>t.test(e),xC={test:e=>e==="auto",parse:e=>e},Wy=[kr,K,Wt,Sn,kE,ME,xC],Hi=e=>Wy.find(Hy(e)),EC=[...Wy,Ye,Gn],TC=e=>EC.find(Hy(e));function CC(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,Si(n))}function PC(e,t){const n=rl(e,t);let{transitionEnd:r={},transition:i={},...s}=n?e.makeTargetAnimatable(n,!1):{};s={...s,...r};for(const o in s){const l=$E(s[o]);CC(e,o,l)}}function LC(e,t,n){var r,i;const s=Object.keys(t).filter(l=>!e.hasValue(l)),o=s.length;if(o)for(let l=0;l<o;l++){const a=s[l],u=t[a];let c=null;Array.isArray(u)&&(c=u[0]),c===null&&(c=(i=(r=n[a])!==null&&r!==void 0?r:e.readValue(a))!==null&&i!==void 0?i:t[a]),c!=null&&(typeof c=="string"&&($y(c)||Uy(c))?c=parseFloat(c):!TC(c)&&Gn.test(u)&&(c=jy(a,u)),e.addValue(a,Si(c,{owner:e})),n[a]===void 0&&(n[a]=c),c!==null&&e.setBaseTarget(a,c))}}function MC(e,t){return t?(t[e]||t.default||t).from:void 0}function kC(e,t,n){const r={};for(const i in e){const s=MC(i,t);if(s!==void 0)r[i]=s;else{const o=n.getValue(i);o&&(r[i]=o.get())}}return r}function RC({protectedKeys:e,needsAnimating:t},n){const r=e.hasOwnProperty(n)&&t[n]!==!0;return t[n]=!1,r}function DC(e,t){const n=e.get();if(Array.isArray(t)){for(let r=0;r<t.length;r++)if(t[r]!==n)return!0}else return n!==t}function Gy(e,t,{delay:n=0,transitionOverride:r,type:i}={}){let{transition:s=e.getDefaultTransition(),transitionEnd:o,...l}=e.makeTargetAnimatable(t);const a=e.getValue("willChange");r&&(s=r);const u=[],c=i&&e.animationState&&e.animationState.getState()[i];for(const d in l){const p=e.getValue(d),g=l[d];if(!p||g===void 0||c&&RC(c,d))continue;const v={delay:n,elapsed:0,...Qd(s||{},d)};if(window.HandoffAppearAnimations){const m=e.getProps()[Kv];if(m){const f=window.HandoffAppearAnimations(m,d,p,pe);f!==null&&(v.elapsed=f,v.isHandoff=!0)}}let y=!v.isHandoff&&!DC(p,g);if(v.type==="spring"&&(p.getVelocity()||v.velocity)&&(y=!1),p.animation&&(y=!1),y)continue;p.start(Yd(d,p,g,e.shouldReduceMotion&&Mr.has(d)?{type:!1}:v));const S=p.animation;Pa(a)&&(a.add(d),S.then(()=>a.remove(d))),u.push(S)}return o&&Promise.all(u).then(()=>{o&&PC(e,o)}),u}function Sc(e,t,n={}){const r=rl(e,t,n.custom);let{transition:i=e.getDefaultTransition()||{}}=r||{};n.transitionOverride&&(i=n.transitionOverride);const s=r?()=>Promise.all(Gy(e,r,n)):()=>Promise.resolve(),o=e.variantChildren&&e.variantChildren.size?(a=0)=>{const{delayChildren:u=0,staggerChildren:c,staggerDirection:d}=i;return bC(e,t,u+a,c,d,n)}:()=>Promise.resolve(),{when:l}=i;if(l){const[a,u]=l==="beforeChildren"?[s,o]:[o,s];return a().then(()=>u())}else return Promise.all([s(),o(n.delay)])}function bC(e,t,n=0,r=0,i=1,s){const o=[],l=(e.variantChildren.size-1)*r,a=i===1?(u=0)=>u*r:(u=0)=>l-u*r;return Array.from(e.variantChildren).sort(AC).forEach((u,c)=>{u.notify("AnimationStart",t),o.push(Sc(u,t,{...s,delay:n+a(c)}).then(()=>u.notify("AnimationComplete",t)))}),Promise.all(o)}function AC(e,t){return e.sortNodePosition(t)}function OC(e,t,n={}){e.notify("AnimationStart",t);let r;if(Array.isArray(t)){const i=t.map(s=>Sc(e,s,n));r=Promise.all(i)}else if(typeof t=="string")r=Sc(e,t,n);else{const i=typeof t=="function"?rl(e,t,n.custom):t;r=Promise.all(Gy(e,i,n))}return r.then(()=>e.notify("AnimationComplete",t))}const IC=[...Id].reverse(),_C=Id.length;function VC(e){return t=>Promise.all(t.map(({animation:n,options:r})=>OC(e,n,r)))}function FC(e){let t=VC(e);const n=zC();let r=!0;const i=(a,u)=>{const c=rl(e,u);if(c){const{transition:d,transitionEnd:p,...g}=c;a={...a,...g,...p}}return a};function s(a){t=a(e)}function o(a,u){const c=e.getProps(),d=e.getVariantContext(!0)||{},p=[],g=new Set;let v={},y=1/0;for(let m=0;m<_C;m++){const f=IC[m],h=n[f],w=c[f]!==void 0?c[f]:d[f],E=Os(w),x=f===u?h.isActive:null;x===!1&&(y=m);let C=w===d[f]&&w!==c[f]&&E;if(C&&r&&e.manuallyAnimateOnMount&&(C=!1),h.protectedKeys={...v},!h.isActive&&x===null||!w&&!h.prevProp||Ja(w)||typeof w=="boolean")continue;const P=NC(h.prevProp,w);let k=P||f===u&&h.isActive&&!C&&E||m>y&&E;const R=Array.isArray(w)?w:[w];let O=R.reduce(i,{});x===!1&&(O={});const{prevResolvedValues:N={}}=h,_={...N,...O},M=b=>{k=!0,g.delete(b),h.needsAnimating[b]=!0};for(const b in _){const U=O[b],Y=N[b];v.hasOwnProperty(b)||(U!==Y?xa(U)&&xa(Y)?!my(U,Y)||P?M(b):h.protectedKeys[b]=!0:U!==void 0?M(b):g.add(b):U!==void 0&&g.has(b)?M(b):h.protectedKeys[b]=!0)}h.prevProp=w,h.prevResolvedValues=O,h.isActive&&(v={...v,...O}),r&&e.blockInitialAnimation&&(k=!1),k&&!C&&p.push(...R.map(b=>({animation:b,options:{type:f,...a}})))}if(g.size){const m={};g.forEach(f=>{const h=e.getBaseTarget(f);h!==void 0&&(m[f]=h)}),p.push({animation:m})}let S=!!p.length;return r&&(c.initial===!1||c.initial===c.animate)&&!e.manuallyAnimateOnMount&&(S=!1),r=!1,S?t(p):Promise.resolve()}function l(a,u,c){var d;if(n[a].isActive===u)return Promise.resolve();(d=e.variantChildren)===null||d===void 0||d.forEach(g=>{var v;return(v=g.animationState)===null||v===void 0?void 0:v.setActive(a,u)}),n[a].isActive=u;const p=o(c,a);for(const g in n)n[g].protectedKeys={};return p}return{animateChanges:o,setActive:l,setAnimateFunction:s,getState:()=>n}}function NC(e,t){return typeof t=="string"?t!==e:Array.isArray(t)?!my(t,e):!1}function Jn(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}function zC(){return{animate:Jn(!0),whileInView:Jn(),whileHover:Jn(),whileTap:Jn(),whileDrag:Jn(),whileFocus:Jn(),exit:Jn()}}class BC extends Xn{constructor(t){super(t),t.animationState||(t.animationState=FC(t))}updateAnimationControlsSubscription(){const{animate:t}=this.node.getProps();this.unmount(),Ja(t)&&(this.unmount=t.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:t}=this.node.getProps(),{animate:n}=this.node.prevProps||{};t!==n&&this.updateAnimationControlsSubscription()}unmount(){}}let jC=0;class UC extends Xn{constructor(){super(...arguments),this.id=jC++}update(){if(!this.node.presenceContext)return;const{isPresent:t,onExitComplete:n,custom:r}=this.node.presenceContext,{isPresent:i}=this.node.prevPresenceContext||{};if(!this.node.animationState||t===i)return;const s=this.node.animationState.setActive("exit",!t,{custom:r??this.node.getProps().custom});n&&!t&&s.then(()=>n(this.id))}mount(){const{register:t}=this.node.presenceContext||{};t&&(this.unmount=t(this.id))}unmount(){}}const $C={animation:{Feature:BC},exit:{Feature:UC}},ah=(e,t)=>Math.abs(e-t);function HC(e,t){const n=ah(e.x,t.x),r=ah(e.y,t.y);return Math.sqrt(n**2+r**2)}class Ky{constructor(t,n,{transformPagePoint:r,contextWindow:i}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const c=Xl(this.lastMoveEventInfo,this.history),d=this.startEvent!==null,p=HC(c.offset,{x:0,y:0})>=3;if(!d&&!p)return;const{point:g}=c,{timestamp:v}=We;this.history.push({...g,timestamp:v});const{onStart:y,onMove:S}=this.handlers;d||(y&&y(this.lastMoveEvent,c),this.startEvent=this.lastMoveEvent),S&&S(this.lastMoveEvent,c)},this.handlePointerMove=(c,d)=>{this.lastMoveEvent=c,this.lastMoveEventInfo=Yl(d,this.transformPagePoint),pe.update(this.updatePoint,!0)},this.handlePointerUp=(c,d)=>{if(this.end(),!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const{onEnd:p,onSessionEnd:g}=this.handlers,v=Xl(c.type==="pointercancel"?this.lastMoveEventInfo:Yl(d,this.transformPagePoint),this.history);this.startEvent&&p&&p(c,v),g&&g(c,v)},!cy(t))return;this.handlers=n,this.transformPagePoint=r,this.contextWindow=i||window;const s=nl(t),o=Yl(s,this.transformPagePoint),{point:l}=o,{timestamp:a}=We;this.history=[{...l,timestamp:a}];const{onSessionStart:u}=n;u&&u(t,Xl(o,this.history)),this.removeListeners=jn(tn(this.contextWindow,"pointermove",this.handlePointerMove),tn(this.contextWindow,"pointerup",this.handlePointerUp),tn(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),cn(this.updatePoint)}}function Yl(e,t){return t?{point:t(e.point)}:e}function lh(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Xl({point:e},t){return{point:e,delta:lh(e,Qy(t)),offset:lh(e,WC(t)),velocity:GC(t,.1)}}function WC(e){return e[0]}function Qy(e){return e[e.length-1]}function GC(e,t){if(e.length<2)return{x:0,y:0};let n=e.length-1,r=null;const i=Qy(e);for(;n>=0&&(r=e[n],!(i.timestamp-r.timestamp>Un(t)));)n--;if(!r)return{x:0,y:0};const s=nn(i.timestamp-r.timestamp);if(s===0)return{x:0,y:0};const o={x:(i.x-r.x)/s,y:(i.y-r.y)/s};return o.x===1/0&&(o.x=0),o.y===1/0&&(o.y=0),o}function ht(e){return e.max-e.min}function xc(e,t=0,n=.01){return Math.abs(e-t)<=n}function uh(e,t,n,r=.5){e.origin=r,e.originPoint=ve(t.min,t.max,e.origin),e.scale=ht(n)/ht(t),(xc(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=ve(n.min,n.max,e.origin)-e.originPoint,(xc(e.translate)||isNaN(e.translate))&&(e.translate=0)}function cs(e,t,n,r){uh(e.x,t.x,n.x,r?r.originX:void 0),uh(e.y,t.y,n.y,r?r.originY:void 0)}function ch(e,t,n){e.min=n.min+t.min,e.max=e.min+ht(t)}function KC(e,t,n){ch(e.x,t.x,n.x),ch(e.y,t.y,n.y)}function dh(e,t,n){e.min=t.min-n.min,e.max=e.min+ht(t)}function ds(e,t,n){dh(e.x,t.x,n.x),dh(e.y,t.y,n.y)}function QC(e,{min:t,max:n},r){return t!==void 0&&e<t?e=r?ve(t,e,r.min):Math.max(e,t):n!==void 0&&e>n&&(e=r?ve(n,e,r.max):Math.min(e,n)),e}function fh(e,t,n){return{min:t!==void 0?e.min+t:void 0,max:n!==void 0?e.max+n-(e.max-e.min):void 0}}function YC(e,{top:t,left:n,bottom:r,right:i}){return{x:fh(e.x,n,i),y:fh(e.y,t,r)}}function ph(e,t){let n=t.min-e.min,r=t.max-e.max;return t.max-t.min<e.max-e.min&&([n,r]=[r,n]),{min:n,max:r}}function XC(e,t){return{x:ph(e.x,t.x),y:ph(e.y,t.y)}}function qC(e,t){let n=.5;const r=ht(e),i=ht(t);return i>r?n=_s(t.min,t.max-r,e.min):r>i&&(n=_s(e.min,e.max-i,t.min)),Wn(0,1,n)}function ZC(e,t){const n={};return t.min!==void 0&&(n.min=t.min-e.min),t.max!==void 0&&(n.max=t.max-e.min),n}const Ec=.35;function JC(e=Ec){return e===!1?e=0:e===!0&&(e=Ec),{x:hh(e,"left","right"),y:hh(e,"top","bottom")}}function hh(e,t,n){return{min:mh(e,t),max:mh(e,n)}}function mh(e,t){return typeof e=="number"?e:e[t]||0}const gh=()=>({translate:0,scale:1,origin:0,originPoint:0}),Xr=()=>({x:gh(),y:gh()}),vh=()=>({min:0,max:0}),be=()=>({x:vh(),y:vh()});function zt(e){return[e("x"),e("y")]}function Yy({top:e,left:t,right:n,bottom:r}){return{x:{min:t,max:n},y:{min:e,max:r}}}function eP({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}function tP(e,t){if(!t)return e;const n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}function ql(e){return e===void 0||e===1}function Tc({scale:e,scaleX:t,scaleY:n}){return!ql(e)||!ql(t)||!ql(n)}function nr(e){return Tc(e)||Xy(e)||e.z||e.rotate||e.rotateX||e.rotateY}function Xy(e){return yh(e.x)||yh(e.y)}function yh(e){return e&&e!=="0%"}function La(e,t,n){const r=e-n,i=t*r;return n+i}function wh(e,t,n,r,i){return i!==void 0&&(e=La(e,i,r)),La(e,n,r)+t}function Cc(e,t=0,n=1,r,i){e.min=wh(e.min,t,n,r,i),e.max=wh(e.max,t,n,r,i)}function qy(e,{x:t,y:n}){Cc(e.x,t.translate,t.scale,t.originPoint),Cc(e.y,n.translate,n.scale,n.originPoint)}function nP(e,t,n,r=!1){const i=n.length;if(!i)return;t.x=t.y=1;let s,o;for(let l=0;l<i;l++){s=n[l],o=s.projectionDelta;const a=s.instance;a&&a.style&&a.style.display==="contents"||(r&&s.options.layoutScroll&&s.scroll&&s!==s.root&&qr(e,{x:-s.scroll.offset.x,y:-s.scroll.offset.y}),o&&(t.x*=o.x.scale,t.y*=o.y.scale,qy(e,o)),r&&nr(s.latestValues)&&qr(e,s.latestValues))}t.x=Sh(t.x),t.y=Sh(t.y)}function Sh(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function Tn(e,t){e.min=e.min+t,e.max=e.max+t}function xh(e,t,[n,r,i]){const s=t[i]!==void 0?t[i]:.5,o=ve(e.min,e.max,s);Cc(e,t[n],t[r],o,t.scale)}const rP=["x","scaleX","originX"],iP=["y","scaleY","originY"];function qr(e,t){xh(e.x,t,rP),xh(e.y,t,iP)}function Zy(e,t){return Yy(tP(e.getBoundingClientRect(),t))}function sP(e,t,n){const r=Zy(e,n),{scroll:i}=t;return i&&(Tn(r.x,i.offset.x),Tn(r.y,i.offset.y)),r}const Jy=({current:e})=>e?e.ownerDocument.defaultView:null,oP=new WeakMap;class aP{constructor(t){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=be(),this.visualElement=t}start(t,{snapToCursor:n=!1}={}){const{presenceContext:r}=this.visualElement;if(r&&r.isPresent===!1)return;const i=a=>{this.stopAnimation(),n&&this.snapToCursor(nl(a,"page").point)},s=(a,u)=>{const{drag:c,dragPropagation:d,onDragStart:p}=this.getProps();if(c&&!d&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=fy(c),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),zt(v=>{let y=this.getAxisMotionValue(v).get()||0;if(Wt.test(y)){const{projection:S}=this.visualElement;if(S&&S.layout){const m=S.layout.layoutBox[v];m&&(y=ht(m)*(parseFloat(y)/100))}}this.originPoint[v]=y}),p&&pe.update(()=>p(a,u),!1,!0);const{animationState:g}=this.visualElement;g&&g.setActive("whileDrag",!0)},o=(a,u)=>{const{dragPropagation:c,dragDirectionLock:d,onDirectionLock:p,onDrag:g}=this.getProps();if(!c&&!this.openGlobalLock)return;const{offset:v}=u;if(d&&this.currentDirection===null){this.currentDirection=lP(v),this.currentDirection!==null&&p&&p(this.currentDirection);return}this.updateAxis("x",u.point,v),this.updateAxis("y",u.point,v),this.visualElement.render(),g&&g(a,u)},l=(a,u)=>this.stop(a,u);this.panSession=new Ky(t,{onSessionStart:i,onStart:s,onMove:o,onSessionEnd:l},{transformPagePoint:this.visualElement.getTransformPagePoint(),contextWindow:Jy(this.visualElement)})}stop(t,n){const r=this.isDragging;if(this.cancel(),!r)return;const{velocity:i}=n;this.startAnimation(i);const{onDragEnd:s}=this.getProps();s&&pe.update(()=>s(t,n))}cancel(){this.isDragging=!1;const{projection:t,animationState:n}=this.visualElement;t&&(t.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:r}=this.getProps();!r&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),n&&n.setActive("whileDrag",!1)}updateAxis(t,n,r){const{drag:i}=this.getProps();if(!r||!Ro(t,i,this.currentDirection))return;const s=this.getAxisMotionValue(t);let o=this.originPoint[t]+r[t];this.constraints&&this.constraints[t]&&(o=QC(o,this.constraints[t],this.elastic[t])),s.set(o)}resolveConstraints(){var t;const{dragConstraints:n,dragElastic:r}=this.getProps(),i=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):(t=this.visualElement.projection)===null||t===void 0?void 0:t.layout,s=this.constraints;n&&Qr(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):n&&i?this.constraints=YC(i.layoutBox,n):this.constraints=!1,this.elastic=JC(r),s!==this.constraints&&i&&this.constraints&&!this.hasMutatedConstraints&&zt(o=>{this.getAxisMotionValue(o)&&(this.constraints[o]=ZC(i.layoutBox[o],this.constraints[o]))})}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:n}=this.getProps();if(!t||!Qr(t))return!1;const r=t.current,{projection:i}=this.visualElement;if(!i||!i.layout)return!1;const s=sP(r,i.root,this.visualElement.getTransformPagePoint());let o=XC(i.layout.layoutBox,s);if(n){const l=n(eP(o));this.hasMutatedConstraints=!!l,l&&(o=Yy(l))}return o}startAnimation(t){const{drag:n,dragMomentum:r,dragElastic:i,dragTransition:s,dragSnapToOrigin:o,onDragTransitionEnd:l}=this.getProps(),a=this.constraints||{},u=zt(c=>{if(!Ro(c,n,this.currentDirection))return;let d=a&&a[c]||{};o&&(d={min:0,max:0});const p=i?200:1e6,g=i?40:1e7,v={type:"inertia",velocity:r?t[c]:0,bounceStiffness:p,bounceDamping:g,timeConstant:750,restDelta:1,restSpeed:10,...s,...d};return this.startAxisValueAnimation(c,v)});return Promise.all(u).then(l)}startAxisValueAnimation(t,n){const r=this.getAxisMotionValue(t);return r.start(Yd(t,r,0,n))}stopAnimation(){zt(t=>this.getAxisMotionValue(t).stop())}getAxisMotionValue(t){const n="_drag"+t.toUpperCase(),r=this.visualElement.getProps(),i=r[n];return i||this.visualElement.getValue(t,(r.initial?r.initial[t]:void 0)||0)}snapToCursor(t){zt(n=>{const{drag:r}=this.getProps();if(!Ro(n,r,this.currentDirection))return;const{projection:i}=this.visualElement,s=this.getAxisMotionValue(n);if(i&&i.layout){const{min:o,max:l}=i.layout.layoutBox[n];s.set(t[n]-ve(o,l,.5))}})}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:t,dragConstraints:n}=this.getProps(),{projection:r}=this.visualElement;if(!Qr(n)||!r||!this.constraints)return;this.stopAnimation();const i={x:0,y:0};zt(o=>{const l=this.getAxisMotionValue(o);if(l){const a=l.get();i[o]=qC({min:a,max:a},this.constraints[o])}});const{transformTemplate:s}=this.visualElement.getProps();this.visualElement.current.style.transform=s?s({},""):"none",r.root&&r.root.updateScroll(),r.updateLayout(),this.resolveConstraints(),zt(o=>{if(!Ro(o,t,null))return;const l=this.getAxisMotionValue(o),{min:a,max:u}=this.constraints[o];l.set(ve(a,u,i[o]))})}addListeners(){if(!this.visualElement.current)return;oP.set(this.visualElement,this);const t=this.visualElement.current,n=tn(t,"pointerdown",a=>{const{drag:u,dragListener:c=!0}=this.getProps();u&&c&&this.start(a)}),r=()=>{const{dragConstraints:a}=this.getProps();Qr(a)&&(this.constraints=this.resolveRefConstraints())},{projection:i}=this.visualElement,s=i.addEventListener("measure",r);i&&!i.layout&&(i.root&&i.root.updateScroll(),i.updateLayout()),r();const o=Zt(window,"resize",()=>this.scalePositionWithinConstraints()),l=i.addEventListener("didUpdate",({delta:a,hasLayoutChanged:u})=>{this.isDragging&&u&&(zt(c=>{const d=this.getAxisMotionValue(c);d&&(this.originPoint[c]+=a[c].translate,d.set(d.get()+a[c].translate))}),this.visualElement.render())});return()=>{o(),n(),s(),l&&l()}}getProps(){const t=this.visualElement.getProps(),{drag:n=!1,dragDirectionLock:r=!1,dragPropagation:i=!1,dragConstraints:s=!1,dragElastic:o=Ec,dragMomentum:l=!0}=t;return{...t,drag:n,dragDirectionLock:r,dragPropagation:i,dragConstraints:s,dragElastic:o,dragMomentum:l}}}function Ro(e,t,n){return(t===!0||t===e)&&(n===null||n===e)}function lP(e,t=10){let n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}class uP extends Xn{constructor(t){super(t),this.removeGroupControls=Ce,this.removeListeners=Ce,this.controls=new aP(t)}mount(){const{dragControls:t}=this.node.getProps();t&&(this.removeGroupControls=t.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||Ce}unmount(){this.removeGroupControls(),this.removeListeners()}}const Eh=e=>(t,n)=>{e&&pe.update(()=>e(t,n))};class cP extends Xn{constructor(){super(...arguments),this.removePointerDownListener=Ce}onPointerDown(t){this.session=new Ky(t,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:Jy(this.node)})}createPanHandlers(){const{onPanSessionStart:t,onPanStart:n,onPan:r,onPanEnd:i}=this.node.getProps();return{onSessionStart:Eh(t),onStart:Eh(n),onMove:r,onEnd:(s,o)=>{delete this.session,i&&pe.update(()=>i(s,o))}}}mount(){this.removePointerDownListener=tn(this.node.current,"pointerdown",t=>this.onPointerDown(t))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}function dP(){const e=T.useContext(Ad);if(e===null)return[!0,null];const{isPresent:t,onExitComplete:n,register:r}=e,i=T.useId();return T.useEffect(()=>r(i),[]),!t&&n?[!1,()=>n&&n(i)]:[!0]}const Go={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function Th(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const Wi={correct:(e,t)=>{if(!t.target)return e;if(typeof e=="string")if(K.test(e))e=parseFloat(e);else return e;const n=Th(e,t.target.x),r=Th(e,t.target.y);return`${n}% ${r}%`}},fP={correct:(e,{treeScale:t,projectionDelta:n})=>{const r=e,i=Gn.parse(e);if(i.length>5)return r;const s=Gn.createTransformer(e),o=typeof i[0]!="number"?1:0,l=n.x.scale*t.x,a=n.y.scale*t.y;i[0+o]/=l,i[1+o]/=a;const u=ve(l,a,.5);return typeof i[2+o]=="number"&&(i[2+o]/=u),typeof i[3+o]=="number"&&(i[3+o]/=u),s(i)}};class pP extends xe.Component{componentDidMount(){const{visualElement:t,layoutGroup:n,switchLayoutGroup:r,layoutId:i}=this.props,{projection:s}=t;SE(hP),s&&(n.group&&n.group.add(s),r&&r.register&&i&&r.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",()=>{this.safeToRemove()}),s.setOptions({...s.options,onExitComplete:()=>this.safeToRemove()})),Go.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:n,visualElement:r,drag:i,isPresent:s}=this.props,o=r.projection;return o&&(o.isPresent=s,i||t.layoutDependency!==n||n===void 0?o.willUpdate():this.safeToRemove(),t.isPresent!==s&&(s?o.promote():o.relegate()||pe.postRender(()=>{const l=o.getStack();(!l||!l.members.length)&&this.safeToRemove()}))),null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),queueMicrotask(()=>{!t.currentAnimation&&t.isLead()&&this.safeToRemove()}))}componentWillUnmount(){const{visualElement:t,layoutGroup:n,switchLayoutGroup:r}=this.props,{projection:i}=t;i&&(i.scheduleCheckAfterUnmount(),n&&n.group&&n.group.remove(i),r&&r.deregister&&r.deregister(i))}safeToRemove(){const{safeToRemove:t}=this.props;t&&t()}render(){return null}}function e0(e){const[t,n]=dP(),r=T.useContext(Yv);return xe.createElement(pP,{...e,layoutGroup:r,switchLayoutGroup:T.useContext(Xv),isPresent:t,safeToRemove:n})}const hP={borderRadius:{...Wi,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:Wi,borderTopRightRadius:Wi,borderBottomLeftRadius:Wi,borderBottomRightRadius:Wi,boxShadow:fP},t0=["TopLeft","TopRight","BottomLeft","BottomRight"],mP=t0.length,Ch=e=>typeof e=="string"?parseFloat(e):e,Ph=e=>typeof e=="number"||K.test(e);function gP(e,t,n,r,i,s){i?(e.opacity=ve(0,n.opacity!==void 0?n.opacity:1,vP(r)),e.opacityExit=ve(t.opacity!==void 0?t.opacity:1,0,yP(r))):s&&(e.opacity=ve(t.opacity!==void 0?t.opacity:1,n.opacity!==void 0?n.opacity:1,r));for(let o=0;o<mP;o++){const l=`border${t0[o]}Radius`;let a=Lh(t,l),u=Lh(n,l);if(a===void 0&&u===void 0)continue;a||(a=0),u||(u=0),a===0||u===0||Ph(a)===Ph(u)?(e[l]=Math.max(ve(Ch(a),Ch(u),r),0),(Wt.test(u)||Wt.test(a))&&(e[l]+="%")):e[l]=u}(t.rotate||n.rotate)&&(e.rotate=ve(t.rotate||0,n.rotate||0,r))}function Lh(e,t){return e[t]!==void 0?e[t]:e.borderRadius}const vP=n0(0,.5,Cy),yP=n0(.5,.95,Ce);function n0(e,t,n){return r=>r<e?0:r>t?1:n(_s(e,t,r))}function Mh(e,t){e.min=t.min,e.max=t.max}function wt(e,t){Mh(e.x,t.x),Mh(e.y,t.y)}function kh(e,t,n,r,i){return e-=t,e=La(e,1/n,r),i!==void 0&&(e=La(e,1/i,r)),e}function wP(e,t=0,n=1,r=.5,i,s=e,o=e){if(Wt.test(t)&&(t=parseFloat(t),t=ve(o.min,o.max,t/100)-o.min),typeof t!="number")return;let l=ve(s.min,s.max,r);e===s&&(l-=t),e.min=kh(e.min,t,n,l,i),e.max=kh(e.max,t,n,l,i)}function Rh(e,t,[n,r,i],s,o){wP(e,t[n],t[r],t[i],t.scale,s,o)}const SP=["x","scaleX","originX"],xP=["y","scaleY","originY"];function Dh(e,t,n,r){Rh(e.x,t,SP,n?n.x:void 0,r?r.x:void 0),Rh(e.y,t,xP,n?n.y:void 0,r?r.y:void 0)}function bh(e){return e.translate===0&&e.scale===1}function r0(e){return bh(e.x)&&bh(e.y)}function EP(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}function i0(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function Ah(e){return ht(e.x)/ht(e.y)}class TP{constructor(){this.members=[]}add(t){Xd(this.members,t),t.scheduleRender()}remove(t){if(qd(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const n=this.members[this.members.length-1];n&&this.promote(n)}}relegate(t){const n=this.members.findIndex(i=>t===i);if(n===0)return!1;let r;for(let i=n;i>=0;i--){const s=this.members[i];if(s.isPresent!==!1){r=s;break}}return r?(this.promote(r),!0):!1}promote(t,n){const r=this.lead;if(t!==r&&(this.prevLead=r,this.lead=t,t.show(),r)){r.instance&&r.scheduleRender(),t.scheduleRender(),t.resumeFrom=r,n&&(t.resumeFrom.preserveOpacity=!0),r.snapshot&&(t.snapshot=r.snapshot,t.snapshot.latestValues=r.animationValues||r.latestValues),t.root&&t.root.isUpdating&&(t.isLayoutDirty=!0);const{crossfade:i}=t.options;i===!1&&r.hide()}}exitAnimationComplete(){this.members.forEach(t=>{const{options:n,resumingFrom:r}=t;n.onExitComplete&&n.onExitComplete(),r&&r.options.onExitComplete&&r.options.onExitComplete()})}scheduleRender(){this.members.forEach(t=>{t.instance&&t.scheduleRender(!1)})}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function Oh(e,t,n){let r="";const i=e.x.translate/t.x,s=e.y.translate/t.y;if((i||s)&&(r=`translate3d(${i}px, ${s}px, 0) `),(t.x!==1||t.y!==1)&&(r+=`scale(${1/t.x}, ${1/t.y}) `),n){const{rotate:a,rotateX:u,rotateY:c}=n;a&&(r+=`rotate(${a}deg) `),u&&(r+=`rotateX(${u}deg) `),c&&(r+=`rotateY(${c}deg) `)}const o=e.x.scale*t.x,l=e.y.scale*t.y;return(o!==1||l!==1)&&(r+=`scale(${o}, ${l})`),r||"none"}const CP=(e,t)=>e.depth-t.depth;class PP{constructor(){this.children=[],this.isDirty=!1}add(t){Xd(this.children,t),this.isDirty=!0}remove(t){qd(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(CP),this.isDirty=!1,this.children.forEach(t)}}function LP(e,t){const n=performance.now(),r=({timestamp:i})=>{const s=i-n;s>=t&&(cn(r),e(s-t))};return pe.read(r,!0),()=>cn(r)}function MP(e){window.MotionDebug&&window.MotionDebug.record(e)}function kP(e){return e instanceof SVGElement&&e.tagName!=="svg"}function RP(e,t,n){const r=at(e)?e:Si(e);return r.start(Yd("",r,t,n)),r.animation}const Ih=["","X","Y","Z"],DP={visibility:"hidden"},_h=1e3;let bP=0;const rr={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function s0({attachResizeListener:e,defaultParent:t,measureScroll:n,checkIsScrollRoot:r,resetTransform:i}){return class{constructor(o={},l=t==null?void 0:t()){this.id=bP++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.projectionUpdateScheduled=!1,rr.totalNodes=rr.resolvedTargetDeltas=rr.recalculatedProjection=0,this.nodes.forEach(IP),this.nodes.forEach(zP),this.nodes.forEach(BP),this.nodes.forEach(_P),MP(rr)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=o,this.root=l?l.root||l:this,this.path=l?[...l.path,l]:[],this.parent=l,this.depth=l?l.depth+1:0;for(let a=0;a<this.path.length;a++)this.path[a].shouldResetTransform=!0;this.root===this&&(this.nodes=new PP)}addEventListener(o,l){return this.eventHandlers.has(o)||this.eventHandlers.set(o,new Zd),this.eventHandlers.get(o).add(l)}notifyListeners(o,...l){const a=this.eventHandlers.get(o);a&&a.notify(...l)}hasListeners(o){return this.eventHandlers.has(o)}mount(o,l=this.root.hasTreeAnimated){if(this.instance)return;this.isSVG=kP(o),this.instance=o;const{layoutId:a,layout:u,visualElement:c}=this.options;if(c&&!c.current&&c.mount(o),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),l&&(u||a)&&(this.isLayoutDirty=!0),e){let d;const p=()=>this.root.updateBlockedByResize=!1;e(o,()=>{this.root.updateBlockedByResize=!0,d&&d(),d=LP(p,250),Go.hasAnimatedSinceResize&&(Go.hasAnimatedSinceResize=!1,this.nodes.forEach(Fh))})}a&&this.root.registerSharedNode(a,this),this.options.animate!==!1&&c&&(a||u)&&this.addEventListener("didUpdate",({delta:d,hasLayoutChanged:p,hasRelativeTargetChanged:g,layout:v})=>{if(this.isTreeAnimationBlocked()){this.target=void 0,this.relativeTarget=void 0;return}const y=this.options.transition||c.getDefaultTransition()||WP,{onLayoutAnimationStart:S,onLayoutAnimationComplete:m}=c.getProps(),f=!this.targetLayout||!i0(this.targetLayout,v)||g,h=!p&&g;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||h||p&&(f||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(d,h);const w={...Qd(y,"layout"),onPlay:S,onComplete:m};(c.shouldReduceMotion||this.options.layoutRoot)&&(w.delay=0,w.type=!1),this.startAnimation(w)}else p||Fh(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=v})}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const o=this.getStack();o&&o.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,cn(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(jP),this.animationId++)}getTransformTemplate(){const{visualElement:o}=this.options;return o&&o.getProps().transformTemplate}willUpdate(o=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return}if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let c=0;c<this.path.length;c++){const d=this.path[c];d.shouldResetTransform=!0,d.updateScroll("snapshot"),d.options.layoutRoot&&d.willUpdate(!1)}const{layoutId:l,layout:a}=this.options;if(l===void 0&&!a)return;const u=this.getTransformTemplate();this.prevTransformTemplateValue=u?u(this.latestValues,""):void 0,this.updateSnapshot(),o&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked()){this.unblockUpdate(),this.clearAllSnapshots(),this.nodes.forEach(Vh);return}this.isUpdating||this.nodes.forEach(FP),this.isUpdating=!1,this.nodes.forEach(NP),this.nodes.forEach(AP),this.nodes.forEach(OP),this.clearAllSnapshots();const l=performance.now();We.delta=Wn(0,1e3/60,l-We.timestamp),We.timestamp=l,We.isProcessing=!0,jl.update.process(We),jl.preRender.process(We),jl.render.process(We),We.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask(()=>this.update()))}clearAllSnapshots(){this.nodes.forEach(VP),this.sharedNodes.forEach(UP)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,pe.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){pe.postRender(()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()})}updateSnapshot(){this.snapshot||!this.instance||(this.snapshot=this.measure())}updateLayout(){if(!this.instance||(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let a=0;a<this.path.length;a++)this.path[a].updateScroll();const o=this.layout;this.layout=this.measure(!1),this.layoutCorrected=be(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:l}=this.options;l&&l.notify("LayoutMeasure",this.layout.layoutBox,o?o.layoutBox:void 0)}updateScroll(o="measure"){let l=!!(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===o&&(l=!1),l&&(this.scroll={animationId:this.root.animationId,phase:o,isRoot:r(this.instance),offset:n(this.instance)})}resetTransform(){if(!i)return;const o=this.isLayoutDirty||this.shouldResetTransform,l=this.projectionDelta&&!r0(this.projectionDelta),a=this.getTransformTemplate(),u=a?a(this.latestValues,""):void 0,c=u!==this.prevTransformTemplateValue;o&&(l||nr(this.latestValues)||c)&&(i(this.instance,u),this.shouldResetTransform=!1,this.scheduleRender())}measure(o=!0){const l=this.measurePageBox();let a=this.removeElementScroll(l);return o&&(a=this.removeTransform(a)),GP(a),{animationId:this.root.animationId,measuredBox:l,layoutBox:a,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:o}=this.options;if(!o)return be();const l=o.measureViewportBox(),{scroll:a}=this.root;return a&&(Tn(l.x,a.offset.x),Tn(l.y,a.offset.y)),l}removeElementScroll(o){const l=be();wt(l,o);for(let a=0;a<this.path.length;a++){const u=this.path[a],{scroll:c,options:d}=u;if(u!==this.root&&c&&d.layoutScroll){if(c.isRoot){wt(l,o);const{scroll:p}=this.root;p&&(Tn(l.x,-p.offset.x),Tn(l.y,-p.offset.y))}Tn(l.x,c.offset.x),Tn(l.y,c.offset.y)}}return l}applyTransform(o,l=!1){const a=be();wt(a,o);for(let u=0;u<this.path.length;u++){const c=this.path[u];!l&&c.options.layoutScroll&&c.scroll&&c!==c.root&&qr(a,{x:-c.scroll.offset.x,y:-c.scroll.offset.y}),nr(c.latestValues)&&qr(a,c.latestValues)}return nr(this.latestValues)&&qr(a,this.latestValues),a}removeTransform(o){const l=be();wt(l,o);for(let a=0;a<this.path.length;a++){const u=this.path[a];if(!u.instance||!nr(u.latestValues))continue;Tc(u.latestValues)&&u.updateSnapshot();const c=be(),d=u.measurePageBox();wt(c,d),Dh(l,u.latestValues,u.snapshot?u.snapshot.layoutBox:void 0,c)}return nr(this.latestValues)&&Dh(l,this.latestValues),l}setTargetDelta(o){this.targetDelta=o,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(o){this.options={...this.options,...o,crossfade:o.crossfade!==void 0?o.crossfade:!0}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==We.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(o=!1){var l;const a=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=a.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=a.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=a.isSharedProjectionDirty);const u=!!this.resumingFrom||this!==a;if(!(o||u&&this.isSharedProjectionDirty||this.isProjectionDirty||!((l=this.parent)===null||l===void 0)&&l.isProjectionDirty||this.attemptToResolveRelativeTarget))return;const{layout:d,layoutId:p}=this.options;if(!(!this.layout||!(d||p))){if(this.resolvedRelativeTargetAt=We.timestamp,!this.targetDelta&&!this.relativeTarget){const g=this.getClosestProjectingParent();g&&g.layout&&this.animationProgress!==1?(this.relativeParent=g,this.forceRelativeParentToResolveTarget(),this.relativeTarget=be(),this.relativeTargetOrigin=be(),ds(this.relativeTargetOrigin,this.layout.layoutBox,g.layout.layoutBox),wt(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(!(!this.relativeTarget&&!this.targetDelta)){if(this.target||(this.target=be(),this.targetWithTransforms=be()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),KC(this.target,this.relativeTarget,this.relativeParent.target)):this.targetDelta?(this.resumingFrom?this.target=this.applyTransform(this.layout.layoutBox):wt(this.target,this.layout.layoutBox),qy(this.target,this.targetDelta)):wt(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const g=this.getClosestProjectingParent();g&&!!g.resumingFrom==!!this.resumingFrom&&!g.options.layoutScroll&&g.target&&this.animationProgress!==1?(this.relativeParent=g,this.forceRelativeParentToResolveTarget(),this.relativeTarget=be(),this.relativeTargetOrigin=be(),ds(this.relativeTargetOrigin,this.target,g.target),wt(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}rr.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(!(!this.parent||Tc(this.parent.latestValues)||Xy(this.parent.latestValues)))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return!!((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var o;const l=this.getLead(),a=!!this.resumingFrom||this!==l;let u=!0;if((this.isProjectionDirty||!((o=this.parent)===null||o===void 0)&&o.isProjectionDirty)&&(u=!1),a&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(u=!1),this.resolvedRelativeTargetAt===We.timestamp&&(u=!1),u)return;const{layout:c,layoutId:d}=this.options;if(this.isTreeAnimating=!!(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!(c||d))return;wt(this.layoutCorrected,this.layout.layoutBox);const p=this.treeScale.x,g=this.treeScale.y;nP(this.layoutCorrected,this.treeScale,this.path,a),l.layout&&!l.target&&(this.treeScale.x!==1||this.treeScale.y!==1)&&(l.target=l.layout.layoutBox);const{target:v}=l;if(!v){this.projectionTransform&&(this.projectionDelta=Xr(),this.projectionTransform="none",this.scheduleRender());return}this.projectionDelta||(this.projectionDelta=Xr(),this.projectionDeltaWithTransform=Xr());const y=this.projectionTransform;cs(this.projectionDelta,this.layoutCorrected,v,this.latestValues),this.projectionTransform=Oh(this.projectionDelta,this.treeScale),(this.projectionTransform!==y||this.treeScale.x!==p||this.treeScale.y!==g)&&(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",v)),rr.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(o=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),o){const l=this.getStack();l&&l.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(o,l=!1){const a=this.snapshot,u=a?a.latestValues:{},c={...this.latestValues},d=Xr();(!this.relativeParent||!this.relativeParent.options.layoutRoot)&&(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!l;const p=be(),g=a?a.source:void 0,v=this.layout?this.layout.source:void 0,y=g!==v,S=this.getStack(),m=!S||S.members.length<=1,f=!!(y&&!m&&this.options.crossfade===!0&&!this.path.some(HP));this.animationProgress=0;let h;this.mixTargetDelta=w=>{const E=w/1e3;Nh(d.x,o.x,E),Nh(d.y,o.y,E),this.setTargetDelta(d),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(ds(p,this.layout.layoutBox,this.relativeParent.layout.layoutBox),$P(this.relativeTarget,this.relativeTargetOrigin,p,E),h&&EP(this.relativeTarget,h)&&(this.isProjectionDirty=!1),h||(h=be()),wt(h,this.relativeTarget)),y&&(this.animationValues=c,gP(c,u,this.latestValues,E,f,m)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=E},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(o){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(cn(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=pe.update(()=>{Go.hasAnimatedSinceResize=!0,this.currentAnimation=RP(0,_h,{...o,onUpdate:l=>{this.mixTargetDelta(l),o.onUpdate&&o.onUpdate(l)},onComplete:()=>{o.onComplete&&o.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0})}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const o=this.getStack();o&&o.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(_h),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const o=this.getLead();let{targetWithTransforms:l,target:a,layout:u,latestValues:c}=o;if(!(!l||!a||!u)){if(this!==o&&this.layout&&u&&o0(this.options.animationType,this.layout.layoutBox,u.layoutBox)){a=this.target||be();const d=ht(this.layout.layoutBox.x);a.x.min=o.target.x.min,a.x.max=a.x.min+d;const p=ht(this.layout.layoutBox.y);a.y.min=o.target.y.min,a.y.max=a.y.min+p}wt(l,a),qr(l,c),cs(this.projectionDeltaWithTransform,this.layoutCorrected,l,c)}}registerSharedNode(o,l){this.sharedNodes.has(o)||this.sharedNodes.set(o,new TP),this.sharedNodes.get(o).add(l);const u=l.options.initialPromotionConfig;l.promote({transition:u?u.transition:void 0,preserveFollowOpacity:u&&u.shouldPreserveFollowOpacity?u.shouldPreserveFollowOpacity(l):void 0})}isLead(){const o=this.getStack();return o?o.lead===this:!0}getLead(){var o;const{layoutId:l}=this.options;return l?((o=this.getStack())===null||o===void 0?void 0:o.lead)||this:this}getPrevLead(){var o;const{layoutId:l}=this.options;return l?(o=this.getStack())===null||o===void 0?void 0:o.prevLead:void 0}getStack(){const{layoutId:o}=this.options;if(o)return this.root.sharedNodes.get(o)}promote({needsReset:o,transition:l,preserveFollowOpacity:a}={}){const u=this.getStack();u&&u.promote(this,a),o&&(this.projectionDelta=void 0,this.needsReset=!0),l&&this.setOptions({transition:l})}relegate(){const o=this.getStack();return o?o.relegate(this):!1}resetRotation(){const{visualElement:o}=this.options;if(!o)return;let l=!1;const{latestValues:a}=o;if((a.rotate||a.rotateX||a.rotateY||a.rotateZ)&&(l=!0),!l)return;const u={};for(let c=0;c<Ih.length;c++){const d="rotate"+Ih[c];a[d]&&(u[d]=a[d],o.setStaticValue(d,0))}o.render();for(const c in u)o.setStaticValue(c,u[c]);o.scheduleRender()}getProjectionStyles(o){var l,a;if(!this.instance||this.isSVG)return;if(!this.isVisible)return DP;const u={visibility:""},c=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,u.opacity="",u.pointerEvents=Wo(o==null?void 0:o.pointerEvents)||"",u.transform=c?c(this.latestValues,""):"none",u;const d=this.getLead();if(!this.projectionDelta||!this.layout||!d.target){const y={};return this.options.layoutId&&(y.opacity=this.latestValues.opacity!==void 0?this.latestValues.opacity:1,y.pointerEvents=Wo(o==null?void 0:o.pointerEvents)||""),this.hasProjected&&!nr(this.latestValues)&&(y.transform=c?c({},""):"none",this.hasProjected=!1),y}const p=d.animationValues||d.latestValues;this.applyTransformsToTarget(),u.transform=Oh(this.projectionDeltaWithTransform,this.treeScale,p),c&&(u.transform=c(p,u.transform));const{x:g,y:v}=this.projectionDelta;u.transformOrigin=`${g.origin*100}% ${v.origin*100}% 0`,d.animationValues?u.opacity=d===this?(a=(l=p.opacity)!==null&&l!==void 0?l:this.latestValues.opacity)!==null&&a!==void 0?a:1:this.preserveOpacity?this.latestValues.opacity:p.opacityExit:u.opacity=d===this?p.opacity!==void 0?p.opacity:"":p.opacityExit!==void 0?p.opacityExit:0;for(const y in wa){if(p[y]===void 0)continue;const{correct:S,applyTo:m}=wa[y],f=u.transform==="none"?p[y]:S(p[y],d);if(m){const h=m.length;for(let w=0;w<h;w++)u[m[w]]=f}else u[y]=f}return this.options.layoutId&&(u.pointerEvents=d===this?Wo(o==null?void 0:o.pointerEvents)||"":"none"),u}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach(o=>{var l;return(l=o.currentAnimation)===null||l===void 0?void 0:l.stop()}),this.root.nodes.forEach(Vh),this.root.sharedNodes.clear()}}}function AP(e){e.updateLayout()}function OP(e){var t;const n=((t=e.resumeFrom)===null||t===void 0?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&n&&e.hasListeners("didUpdate")){const{layoutBox:r,measuredBox:i}=e.layout,{animationType:s}=e.options,o=n.source!==e.layout.source;s==="size"?zt(d=>{const p=o?n.measuredBox[d]:n.layoutBox[d],g=ht(p);p.min=r[d].min,p.max=p.min+g}):o0(s,n.layoutBox,r)&&zt(d=>{const p=o?n.measuredBox[d]:n.layoutBox[d],g=ht(r[d]);p.max=p.min+g,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[d].max=e.relativeTarget[d].min+g)});const l=Xr();cs(l,r,n.layoutBox);const a=Xr();o?cs(a,e.applyTransform(i,!0),n.measuredBox):cs(a,r,n.layoutBox);const u=!r0(l);let c=!1;if(!e.resumeFrom){const d=e.getClosestProjectingParent();if(d&&!d.resumeFrom){const{snapshot:p,layout:g}=d;if(p&&g){const v=be();ds(v,n.layoutBox,p.layoutBox);const y=be();ds(y,r,g.layoutBox),i0(v,y)||(c=!0),d.options.layoutRoot&&(e.relativeTarget=y,e.relativeTargetOrigin=v,e.relativeParent=d)}}}e.notifyListeners("didUpdate",{layout:r,snapshot:n,delta:a,layoutDelta:l,hasLayoutChanged:u,hasRelativeTargetChanged:c})}else if(e.isLead()){const{onExitComplete:r}=e.options;r&&r()}e.options.transition=void 0}function IP(e){rr.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=!!(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function _P(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function VP(e){e.clearSnapshot()}function Vh(e){e.clearMeasurements()}function FP(e){e.isLayoutDirty=!1}function NP(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function Fh(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function zP(e){e.resolveTargetDelta()}function BP(e){e.calcProjection()}function jP(e){e.resetRotation()}function UP(e){e.removeLeadSnapshot()}function Nh(e,t,n){e.translate=ve(t.translate,0,n),e.scale=ve(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function zh(e,t,n,r){e.min=ve(t.min,n.min,r),e.max=ve(t.max,n.max,r)}function $P(e,t,n,r){zh(e.x,t.x,n.x,r),zh(e.y,t.y,n.y,r)}function HP(e){return e.animationValues&&e.animationValues.opacityExit!==void 0}const WP={duration:.45,ease:[.4,0,.1,1]},Bh=e=>typeof navigator<"u"&&navigator.userAgent.toLowerCase().includes(e),jh=Bh("applewebkit/")&&!Bh("chrome/")?Math.round:Ce;function Uh(e){e.min=jh(e.min),e.max=jh(e.max)}function GP(e){Uh(e.x),Uh(e.y)}function o0(e,t,n){return e==="position"||e==="preserve-aspect"&&!xc(Ah(t),Ah(n),.2)}const KP=s0({attachResizeListener:(e,t)=>Zt(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),Zl={current:void 0},a0=s0({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!Zl.current){const e=new KP({});e.mount(window),e.setOptions({layoutScroll:!0}),Zl.current=e}return Zl.current},resetTransform:(e,t)=>{e.style.transform=t!==void 0?t:"none"},checkIsScrollRoot:e=>window.getComputedStyle(e).position==="fixed"}),QP={pan:{Feature:cP},drag:{Feature:uP,ProjectionNode:a0,MeasureLayout:e0}},YP=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function XP(e){const t=YP.exec(e);if(!t)return[,];const[,n,r]=t;return[n,r]}function Pc(e,t,n=1){const[r,i]=XP(e);if(!r)return;const s=window.getComputedStyle(t).getPropertyValue(r);if(s){const o=s.trim();return $y(o)?parseFloat(o):o}else return hc(i)?Pc(i,t,n+1):i}function qP(e,{...t},n){const r=e.current;if(!(r instanceof Element))return{target:t,transitionEnd:n};n&&(n={...n}),e.values.forEach(i=>{const s=i.get();if(!hc(s))return;const o=Pc(s,r);o&&i.set(o)});for(const i in t){const s=t[i];if(!hc(s))continue;const o=Pc(s,r);o&&(t[i]=o,n||(n={}),n[i]===void 0&&(n[i]=s))}return{target:t,transitionEnd:n}}const ZP=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),l0=e=>ZP.has(e),JP=e=>Object.keys(e).some(l0),$h=e=>e===kr||e===K,Hh=(e,t)=>parseFloat(e.split(", ")[t]),Wh=(e,t)=>(n,{transform:r})=>{if(r==="none"||!r)return 0;const i=r.match(/^matrix3d\((.+)\)$/);if(i)return Hh(i[1],t);{const s=r.match(/^matrix\((.+)\)$/);return s?Hh(s[1],e):0}},eL=new Set(["x","y","z"]),tL=Js.filter(e=>!eL.has(e));function nL(e){const t=[];return tL.forEach(n=>{const r=e.getValue(n);r!==void 0&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))}),t.length&&e.render(),t}const xi={width:({x:e},{paddingLeft:t="0",paddingRight:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),height:({y:e},{paddingTop:t="0",paddingBottom:n="0"})=>e.max-e.min-parseFloat(t)-parseFloat(n),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:Wh(4,13),y:Wh(5,14)};xi.translateX=xi.x;xi.translateY=xi.y;const rL=(e,t,n)=>{const r=t.measureViewportBox(),i=t.current,s=getComputedStyle(i),{display:o}=s,l={};o==="none"&&t.setStaticValue("display",e.display||"block"),n.forEach(u=>{l[u]=xi[u](r,s)}),t.render();const a=t.measureViewportBox();return n.forEach(u=>{const c=t.getValue(u);c&&c.jump(l[u]),e[u]=xi[u](a,s)}),e},iL=(e,t,n={},r={})=>{t={...t},r={...r};const i=Object.keys(t).filter(l0);let s=[],o=!1;const l=[];if(i.forEach(a=>{const u=e.getValue(a);if(!e.hasValue(a))return;let c=n[a],d=Hi(c);const p=t[a];let g;if(xa(p)){const v=p.length,y=p[0]===null?1:0;c=p[y],d=Hi(c);for(let S=y;S<v&&p[S]!==null;S++)g?$d(Hi(p[S])===g):g=Hi(p[S])}else g=Hi(p);if(d!==g)if($h(d)&&$h(g)){const v=u.get();typeof v=="string"&&u.set(parseFloat(v)),typeof p=="string"?t[a]=parseFloat(p):Array.isArray(p)&&g===K&&(t[a]=p.map(parseFloat))}else d!=null&&d.transform&&(g!=null&&g.transform)&&(c===0||p===0)?c===0?u.set(g.transform(c)):t[a]=d.transform(p):(o||(s=nL(e),o=!0),l.push(a),r[a]=r[a]!==void 0?r[a]:t[a],u.jump(p))}),l.length){const a=l.indexOf("height")>=0?window.pageYOffset:null,u=rL(t,e,l);return s.length&&s.forEach(([c,d])=>{e.getValue(c).set(d)}),e.render(),Za&&a!==null&&window.scrollTo({top:a}),{target:u,transitionEnd:r}}else return{target:t,transitionEnd:r}};function sL(e,t,n,r){return JP(t)?iL(e,t,n,r):{target:t,transitionEnd:r}}const oL=(e,t,n,r)=>{const i=qP(e,t,r);return t=i.target,r=i.transitionEnd,sL(e,t,n,r)},Lc={current:null},u0={current:!1};function aL(){if(u0.current=!0,!!Za)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>Lc.current=e.matches;e.addListener(t),t()}else Lc.current=!1}function lL(e,t,n){const{willChange:r}=t;for(const i in t){const s=t[i],o=n[i];if(at(s))e.addValue(i,s),Pa(r)&&r.add(i);else if(at(o))e.addValue(i,Si(s,{owner:e})),Pa(r)&&r.remove(i);else if(o!==s)if(e.hasValue(i)){const l=e.getValue(i);!l.hasAnimated&&l.set(s)}else{const l=e.getStaticValue(i);e.addValue(i,Si(l!==void 0?l:s,{owner:e}))}}for(const i in n)t[i]===void 0&&e.removeValue(i);return t}const Gh=new WeakMap,c0=Object.keys(Is),uL=c0.length,Kh=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],cL=_d.length;class dL{constructor({parent:t,props:n,presenceContext:r,reducedMotionConfig:i,visualState:s},o={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>pe.render(this.render,!1,!0);const{latestValues:l,renderState:a}=s;this.latestValues=l,this.baseTarget={...l},this.initialValues=n.initial?{...l}:{},this.renderState=a,this.parent=t,this.props=n,this.presenceContext=r,this.depth=t?t.depth+1:0,this.reducedMotionConfig=i,this.options=o,this.isControllingVariants=el(n),this.isVariantNode=Qv(n),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=!!(t&&t.current);const{willChange:u,...c}=this.scrapeMotionValuesFromProps(n,{});for(const d in c){const p=c[d];l[d]!==void 0&&at(p)&&(p.set(l[d],!1),Pa(u)&&u.add(d))}}scrapeMotionValuesFromProps(t,n){return{}}mount(t){this.current=t,Gh.set(t,this),this.projection&&!this.projection.instance&&this.projection.mount(t),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach((n,r)=>this.bindToMotionValue(r,n)),u0.current||aL(),this.shouldReduceMotion=this.reducedMotionConfig==="never"?!1:this.reducedMotionConfig==="always"?!0:Lc.current,this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){Gh.delete(this.current),this.projection&&this.projection.unmount(),cn(this.notifyUpdate),cn(this.render),this.valueSubscriptions.forEach(t=>t()),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const t in this.events)this.events[t].clear();for(const t in this.features)this.features[t].unmount();this.current=null}bindToMotionValue(t,n){const r=Mr.has(t),i=n.on("change",o=>{this.latestValues[t]=o,this.props.onUpdate&&pe.update(this.notifyUpdate,!1,!0),r&&this.projection&&(this.projection.isTransformDirty=!0)}),s=n.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(t,()=>{i(),s()})}sortNodePosition(t){return!this.current||!this.sortInstanceNodePosition||this.type!==t.type?0:this.sortInstanceNodePosition(this.current,t.current)}loadFeatures({children:t,...n},r,i,s){let o,l;for(let a=0;a<uL;a++){const u=c0[a],{isEnabled:c,Feature:d,ProjectionNode:p,MeasureLayout:g}=Is[u];p&&(o=p),c(n)&&(!this.features[u]&&d&&(this.features[u]=new d(this)),g&&(l=g))}if(!this.projection&&o){this.projection=new o(this.latestValues,this.parent&&this.parent.projection);const{layoutId:a,layout:u,drag:c,dragConstraints:d,layoutScroll:p,layoutRoot:g}=n;this.projection.setOptions({layoutId:a,layout:u,alwaysMeasureLayout:!!c||d&&Qr(d),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:typeof u=="string"?u:"both",initialPromotionConfig:s,layoutScroll:p,layoutRoot:g})}return l}updateFeatures(){for(const t in this.features){const n=this.features[t];n.isMounted?n.update():(n.mount(),n.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):be()}getStaticValue(t){return this.latestValues[t]}setStaticValue(t,n){this.latestValues[t]=n}makeTargetAnimatable(t,n=!0){return this.makeTargetAnimatableFromInstance(t,this.props,n)}update(t,n){(t.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=t,this.prevPresenceContext=this.presenceContext,this.presenceContext=n;for(let r=0;r<Kh.length;r++){const i=Kh[r];this.propEventSubscriptions[i]&&(this.propEventSubscriptions[i](),delete this.propEventSubscriptions[i]);const s=t["on"+i];s&&(this.propEventSubscriptions[i]=this.on(i,s))}this.prevMotionValues=lL(this,this.scrapeMotionValuesFromProps(t,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(t){return this.props.variants?this.props.variants[t]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(t=!1){if(t)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const r=this.parent?this.parent.getVariantContext()||{}:{};return this.props.initial!==void 0&&(r.initial=this.props.initial),r}const n={};for(let r=0;r<cL;r++){const i=_d[r],s=this.props[i];(Os(s)||s===!1)&&(n[i]=s)}return n}addVariantChild(t){const n=this.getClosestVariantNode();if(n)return n.variantChildren&&n.variantChildren.add(t),()=>n.variantChildren.delete(t)}addValue(t,n){n!==this.values.get(t)&&(this.removeValue(t),this.bindToMotionValue(t,n)),this.values.set(t,n),this.latestValues[t]=n.get()}removeValue(t){this.values.delete(t);const n=this.valueSubscriptions.get(t);n&&(n(),this.valueSubscriptions.delete(t)),delete this.latestValues[t],this.removeValueFromRenderState(t,this.renderState)}hasValue(t){return this.values.has(t)}getValue(t,n){if(this.props.values&&this.props.values[t])return this.props.values[t];let r=this.values.get(t);return r===void 0&&n!==void 0&&(r=Si(n,{owner:this}),this.addValue(t,r)),r}readValue(t){var n;return this.latestValues[t]!==void 0||!this.current?this.latestValues[t]:(n=this.getBaseTargetFromProps(this.props,t))!==null&&n!==void 0?n:this.readValueFromInstance(this.current,t,this.options)}setBaseTarget(t,n){this.baseTarget[t]=n}getBaseTarget(t){var n;const{initial:r}=this.props,i=typeof r=="string"||typeof r=="object"?(n=Ud(this.props,r))===null||n===void 0?void 0:n[t]:void 0;if(r&&i!==void 0)return i;const s=this.getBaseTargetFromProps(this.props,t);return s!==void 0&&!at(s)?s:this.initialValues[t]!==void 0&&i===void 0?void 0:this.baseTarget[t]}on(t,n){return this.events[t]||(this.events[t]=new Zd),this.events[t].add(n)}notify(t,...n){this.events[t]&&this.events[t].notify(...n)}}class d0 extends dL{sortInstanceNodePosition(t,n){return t.compareDocumentPosition(n)&2?1:-1}getBaseTargetFromProps(t,n){return t.style?t.style[n]:void 0}removeValueFromRenderState(t,{vars:n,style:r}){delete n[t],delete r[t]}makeTargetAnimatableFromInstance({transition:t,transitionEnd:n,...r},{transformValues:i},s){let o=kC(r,t||{},this);if(i&&(n&&(n=i(n)),r&&(r=i(r)),o&&(o=i(o))),s){LC(this,r,o);const l=oL(this,r,o,n);n=l.transitionEnd,r=l.target}return{transition:t,transitionEnd:n,...r}}}function fL(e){return window.getComputedStyle(e)}class pL extends d0{readValueFromInstance(t,n){if(Mr.has(n)){const r=Kd(n);return r&&r.default||0}else{const r=fL(t),i=(Jv(n)?r.getPropertyValue(n):r[n])||0;return typeof i=="string"?i.trim():i}}measureInstanceViewportBox(t,{transformPagePoint:n}){return Zy(t,n)}build(t,n,r,i){Fd(t,n,r,i.transformTemplate)}scrapeMotionValuesFromProps(t,n){return jd(t,n)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:t}=this.props;at(t)&&(this.childSubscription=t.on("change",n=>{this.current&&(this.current.textContent=`${n}`)}))}renderInstance(t,n,r,i){sy(t,n,r,i)}}class hL extends d0{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(t,n){return t[n]}readValueFromInstance(t,n){if(Mr.has(n)){const r=Kd(n);return r&&r.default||0}return n=oy.has(n)?n:Od(n),t.getAttribute(n)}measureInstanceViewportBox(){return be()}scrapeMotionValuesFromProps(t,n){return ly(t,n)}build(t,n,r,i){zd(t,n,r,this.isSVGTag,i.transformTemplate)}renderInstance(t,n,r,i){ay(t,n,r,i)}mount(t){this.isSVGTag=Bd(t.tagName),super.mount(t)}}const mL=(e,t)=>Vd(e)?new hL(t,{enableHardwareAcceleration:!1}):new pL(t,{enableHardwareAcceleration:!0}),gL={layout:{ProjectionNode:a0,MeasureLayout:e0}},vL={...$C,...cT,...QP,...gL},wk=yE((e,t)=>qE(e,t,vL,mL));function Qh(e){return e!==null&&typeof e=="object"&&"constructor"in e&&e.constructor===Object}function Jd(e,t){e===void 0&&(e={}),t===void 0&&(t={}),Object.keys(t).forEach(n=>{typeof e[n]>"u"?e[n]=t[n]:Qh(t[n])&&Qh(e[n])&&Object.keys(t[n]).length>0&&Jd(e[n],t[n])})}const f0={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function rn(){const e=typeof document<"u"?document:{};return Jd(e,f0),e}const yL={document:f0,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(e){return typeof setTimeout>"u"?(e(),null):setTimeout(e,0)},cancelAnimationFrame(e){typeof setTimeout>"u"||clearTimeout(e)}};function vt(){const e=typeof window<"u"?window:{};return Jd(e,yL),e}function wL(e){return e===void 0&&(e=""),e.trim().split(" ").filter(t=>!!t.trim())}function SL(e){const t=e;Object.keys(t).forEach(n=>{try{t[n]=null}catch{}try{delete t[n]}catch{}})}function Mc(e,t){return t===void 0&&(t=0),setTimeout(e,t)}function Ma(){return Date.now()}function xL(e){const t=vt();let n;return t.getComputedStyle&&(n=t.getComputedStyle(e,null)),!n&&e.currentStyle&&(n=e.currentStyle),n||(n=e.style),n}function EL(e,t){t===void 0&&(t="x");const n=vt();let r,i,s;const o=xL(e);return n.WebKitCSSMatrix?(i=o.transform||o.webkitTransform,i.split(",").length>6&&(i=i.split(", ").map(l=>l.replace(",",".")).join(", ")),s=new n.WebKitCSSMatrix(i==="none"?"":i)):(s=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),r=s.toString().split(",")),t==="x"&&(n.WebKitCSSMatrix?i=s.m41:r.length===16?i=parseFloat(r[12]):i=parseFloat(r[4])),t==="y"&&(n.WebKitCSSMatrix?i=s.m42:r.length===16?i=parseFloat(r[13]):i=parseFloat(r[5])),i||0}function Do(e){return typeof e=="object"&&e!==null&&e.constructor&&Object.prototype.toString.call(e).slice(8,-1)==="Object"}function TL(e){return typeof window<"u"&&typeof window.HTMLElement<"u"?e instanceof HTMLElement:e&&(e.nodeType===1||e.nodeType===11)}function ct(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let n=1;n<arguments.length;n+=1){const r=n<0||arguments.length<=n?void 0:arguments[n];if(r!=null&&!TL(r)){const i=Object.keys(Object(r)).filter(s=>t.indexOf(s)<0);for(let s=0,o=i.length;s<o;s+=1){const l=i[s],a=Object.getOwnPropertyDescriptor(r,l);a!==void 0&&a.enumerable&&(Do(e[l])&&Do(r[l])?r[l].__swiper__?e[l]=r[l]:ct(e[l],r[l]):!Do(e[l])&&Do(r[l])?(e[l]={},r[l].__swiper__?e[l]=r[l]:ct(e[l],r[l])):e[l]=r[l])}}}return e}function bo(e,t,n){e.style.setProperty(t,n)}function p0(e){let{swiper:t,targetPosition:n,side:r}=e;const i=vt(),s=-t.translate;let o=null,l;const a=t.params.speed;t.wrapperEl.style.scrollSnapType="none",i.cancelAnimationFrame(t.cssModeFrameID);const u=n>s?"next":"prev",c=(p,g)=>u==="next"&&p>=g||u==="prev"&&p<=g,d=()=>{l=new Date().getTime(),o===null&&(o=l);const p=Math.max(Math.min((l-o)/a,1),0),g=.5-Math.cos(p*Math.PI)/2;let v=s+g*(n-s);if(c(v,n)&&(v=n),t.wrapperEl.scrollTo({[r]:v}),c(v,n)){t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout(()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[r]:v})}),i.cancelAnimationFrame(t.cssModeFrameID);return}t.cssModeFrameID=i.requestAnimationFrame(d)};d()}function Sk(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function Ut(e,t){return t===void 0&&(t=""),[...e.children].filter(n=>n.matches(t))}function ka(e){try{console.warn(e);return}catch{}}function Vs(e,t){t===void 0&&(t=[]);const n=document.createElement(e);return n.classList.add(...Array.isArray(t)?t:wL(t)),n}function CL(e,t){const n=[];for(;e.previousElementSibling;){const r=e.previousElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}function PL(e,t){const n=[];for(;e.nextElementSibling;){const r=e.nextElementSibling;t?r.matches(t)&&n.push(r):n.push(r),e=r}return n}function An(e,t){return vt().getComputedStyle(e,null).getPropertyValue(t)}function Fs(e){let t=e,n;if(t){for(n=0;(t=t.previousSibling)!==null;)t.nodeType===1&&(n+=1);return n}}function h0(e,t){const n=[];let r=e.parentElement;for(;r;)t?r.matches(t)&&n.push(r):n.push(r),r=r.parentElement;return n}function xk(e,t){function n(r){r.target===e&&(t.call(e,r),e.removeEventListener("transitionend",n))}t&&e.addEventListener("transitionend",n)}function kc(e,t,n){const r=vt();return n?e[t==="width"?"offsetWidth":"offsetHeight"]+parseFloat(r.getComputedStyle(e,null).getPropertyValue(t==="width"?"margin-right":"margin-top"))+parseFloat(r.getComputedStyle(e,null).getPropertyValue(t==="width"?"margin-left":"margin-bottom")):e.offsetWidth}let Jl;function LL(){const e=vt(),t=rn();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}function m0(){return Jl||(Jl=LL()),Jl}let eu;function ML(e){let{userAgent:t}=e===void 0?{}:e;const n=m0(),r=vt(),i=r.navigator.platform,s=t||r.navigator.userAgent,o={ios:!1,android:!1},l=r.screen.width,a=r.screen.height,u=s.match(/(Android);?[\s\/]+([\d.]+)?/);let c=s.match(/(iPad).*OS\s([\d_]+)/);const d=s.match(/(iPod)(.*OS\s([\d_]+))?/),p=!c&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),g=i==="Win32";let v=i==="MacIntel";const y=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!c&&v&&n.touch&&y.indexOf(`${l}x${a}`)>=0&&(c=s.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),v=!1),u&&!g&&(o.os="android",o.android=!0),(c||p||d)&&(o.os="ios",o.ios=!0),o}function kL(e){return e===void 0&&(e={}),eu||(eu=ML(e)),eu}let tu;function RL(){const e=vt();let t=!1;function n(){const r=e.navigator.userAgent.toLowerCase();return r.indexOf("safari")>=0&&r.indexOf("chrome")<0&&r.indexOf("android")<0}if(n()){const r=String(e.navigator.userAgent);if(r.includes("Version/")){const[i,s]=r.split("Version/")[1].split(" ")[0].split(".").map(o=>Number(o));t=i<16||i===16&&s<2}}return{isSafari:t||n(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}function DL(){return tu||(tu=RL()),tu}function bL(e){let{swiper:t,on:n,emit:r}=e;const i=vt();let s=null,o=null;const l=()=>{!t||t.destroyed||!t.initialized||(r("beforeResize"),r("resize"))},a=()=>{!t||t.destroyed||!t.initialized||(s=new ResizeObserver(d=>{o=i.requestAnimationFrame(()=>{const{width:p,height:g}=t;let v=p,y=g;d.forEach(S=>{let{contentBoxSize:m,contentRect:f,target:h}=S;h&&h!==t.el||(v=f?f.width:(m[0]||m).inlineSize,y=f?f.height:(m[0]||m).blockSize)}),(v!==p||y!==g)&&l()})}),s.observe(t.el))},u=()=>{o&&i.cancelAnimationFrame(o),s&&s.unobserve&&t.el&&(s.unobserve(t.el),s=null)},c=()=>{!t||t.destroyed||!t.initialized||r("orientationchange")};n("init",()=>{if(t.params.resizeObserver&&typeof i.ResizeObserver<"u"){a();return}i.addEventListener("resize",l),i.addEventListener("orientationchange",c)}),n("destroy",()=>{u(),i.removeEventListener("resize",l),i.removeEventListener("orientationchange",c)})}function AL(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const s=[],o=vt(),l=function(c,d){d===void 0&&(d={});const p=o.MutationObserver||o.WebkitMutationObserver,g=new p(v=>{if(t.__preventObserver__)return;if(v.length===1){i("observerUpdate",v[0]);return}const y=function(){i("observerUpdate",v[0])};o.requestAnimationFrame?o.requestAnimationFrame(y):o.setTimeout(y,0)});g.observe(c,{attributes:typeof d.attributes>"u"?!0:d.attributes,childList:typeof d.childList>"u"?!0:d.childList,characterData:typeof d.characterData>"u"?!0:d.characterData}),s.push(g)},a=()=>{if(t.params.observer){if(t.params.observeParents){const c=h0(t.hostEl);for(let d=0;d<c.length;d+=1)l(c[d])}l(t.hostEl,{childList:t.params.observeSlideChildren}),l(t.wrapperEl,{attributes:!1})}},u=()=>{s.forEach(c=>{c.disconnect()}),s.splice(0,s.length)};n({observer:!1,observeParents:!1,observeSlideChildren:!1}),r("init",a),r("destroy",u)}var OL={on(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed||typeof t!="function")return r;const i=n?"unshift":"push";return e.split(" ").forEach(s=>{r.eventsListeners[s]||(r.eventsListeners[s]=[]),r.eventsListeners[s][i](t)}),r},once(e,t,n){const r=this;if(!r.eventsListeners||r.destroyed||typeof t!="function")return r;function i(){r.off(e,i),i.__emitterProxy&&delete i.__emitterProxy;for(var s=arguments.length,o=new Array(s),l=0;l<s;l++)o[l]=arguments[l];t.apply(r,o)}return i.__emitterProxy=t,r.on(e,i,n)},onAny(e,t){const n=this;if(!n.eventsListeners||n.destroyed||typeof e!="function")return n;const r=t?"unshift":"push";return n.eventsAnyListeners.indexOf(e)<0&&n.eventsAnyListeners[r](e),n},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsAnyListeners)return t;const n=t.eventsAnyListeners.indexOf(e);return n>=0&&t.eventsAnyListeners.splice(n,1),t},off(e,t){const n=this;return!n.eventsListeners||n.destroyed||!n.eventsListeners||e.split(" ").forEach(r=>{typeof t>"u"?n.eventsListeners[r]=[]:n.eventsListeners[r]&&n.eventsListeners[r].forEach((i,s)=>{(i===t||i.__emitterProxy&&i.__emitterProxy===t)&&n.eventsListeners[r].splice(s,1)})}),n},emit(){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsListeners)return e;let t,n,r;for(var i=arguments.length,s=new Array(i),o=0;o<i;o++)s[o]=arguments[o];return typeof s[0]=="string"||Array.isArray(s[0])?(t=s[0],n=s.slice(1,s.length),r=e):(t=s[0].events,n=s[0].data,r=s[0].context||e),n.unshift(r),(Array.isArray(t)?t:t.split(" ")).forEach(a=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach(u=>{u.apply(r,[a,...n])}),e.eventsListeners&&e.eventsListeners[a]&&e.eventsListeners[a].forEach(u=>{u.apply(r,n)})}),e}};function IL(){const e=this;let t,n;const r=e.el;typeof e.params.width<"u"&&e.params.width!==null?t=e.params.width:t=r.clientWidth,typeof e.params.height<"u"&&e.params.height!==null?n=e.params.height:n=r.clientHeight,!(t===0&&e.isHorizontal()||n===0&&e.isVertical())&&(t=t-parseInt(An(r,"padding-left")||0,10)-parseInt(An(r,"padding-right")||0,10),n=n-parseInt(An(r,"padding-top")||0,10)-parseInt(An(r,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(n)&&(n=0),Object.assign(e,{width:t,height:n,size:e.isHorizontal()?t:n}))}function _L(){const e=this;function t(R,O){return parseFloat(R.getPropertyValue(e.getDirectionLabel(O))||0)}const n=e.params,{wrapperEl:r,slidesEl:i,size:s,rtlTranslate:o,wrongRTL:l}=e,a=e.virtual&&n.virtual.enabled,u=a?e.virtual.slides.length:e.slides.length,c=Ut(i,`.${e.params.slideClass}, swiper-slide`),d=a?e.virtual.slides.length:c.length;let p=[];const g=[],v=[];let y=n.slidesOffsetBefore;typeof y=="function"&&(y=n.slidesOffsetBefore.call(e));let S=n.slidesOffsetAfter;typeof S=="function"&&(S=n.slidesOffsetAfter.call(e));const m=e.snapGrid.length,f=e.slidesGrid.length;let h=n.spaceBetween,w=-y,E=0,x=0;if(typeof s>"u")return;typeof h=="string"&&h.indexOf("%")>=0?h=parseFloat(h.replace("%",""))/100*s:typeof h=="string"&&(h=parseFloat(h)),e.virtualSize=-h,c.forEach(R=>{o?R.style.marginLeft="":R.style.marginRight="",R.style.marginBottom="",R.style.marginTop=""}),n.centeredSlides&&n.cssMode&&(bo(r,"--swiper-centered-offset-before",""),bo(r,"--swiper-centered-offset-after",""));const C=n.grid&&n.grid.rows>1&&e.grid;C?e.grid.initSlides(c):e.grid&&e.grid.unsetSlides();let P;const k=n.slidesPerView==="auto"&&n.breakpoints&&Object.keys(n.breakpoints).filter(R=>typeof n.breakpoints[R].slidesPerView<"u").length>0;for(let R=0;R<d;R+=1){P=0;let O;if(c[R]&&(O=c[R]),C&&e.grid.updateSlide(R,O,c),!(c[R]&&An(O,"display")==="none")){if(n.slidesPerView==="auto"){k&&(c[R].style[e.getDirectionLabel("width")]="");const N=getComputedStyle(O),_=O.style.transform,M=O.style.webkitTransform;if(_&&(O.style.transform="none"),M&&(O.style.webkitTransform="none"),n.roundLengths)P=e.isHorizontal()?kc(O,"width",!0):kc(O,"height",!0);else{const b=t(N,"width"),U=t(N,"padding-left"),Y=t(N,"padding-right"),I=t(N,"margin-left"),F=t(N,"margin-right"),z=N.getPropertyValue("box-sizing");if(z&&z==="border-box")P=b+I+F;else{const{clientWidth:$,offsetWidth:J}=O;P=b+U+Y+I+F+(J-$)}}_&&(O.style.transform=_),M&&(O.style.webkitTransform=M),n.roundLengths&&(P=Math.floor(P))}else P=(s-(n.slidesPerView-1)*h)/n.slidesPerView,n.roundLengths&&(P=Math.floor(P)),c[R]&&(c[R].style[e.getDirectionLabel("width")]=`${P}px`);c[R]&&(c[R].swiperSlideSize=P),v.push(P),n.centeredSlides?(w=w+P/2+E/2+h,E===0&&R!==0&&(w=w-s/2-h),R===0&&(w=w-s/2-h),Math.abs(w)<1/1e3&&(w=0),n.roundLengths&&(w=Math.floor(w)),x%n.slidesPerGroup===0&&p.push(w),g.push(w)):(n.roundLengths&&(w=Math.floor(w)),(x-Math.min(e.params.slidesPerGroupSkip,x))%e.params.slidesPerGroup===0&&p.push(w),g.push(w),w=w+P+h),e.virtualSize+=P+h,E=P,x+=1}}if(e.virtualSize=Math.max(e.virtualSize,s)+S,o&&l&&(n.effect==="slide"||n.effect==="coverflow")&&(r.style.width=`${e.virtualSize+h}px`),n.setWrapperSize&&(r.style[e.getDirectionLabel("width")]=`${e.virtualSize+h}px`),C&&e.grid.updateWrapperSize(P,p),!n.centeredSlides){const R=[];for(let O=0;O<p.length;O+=1){let N=p[O];n.roundLengths&&(N=Math.floor(N)),p[O]<=e.virtualSize-s&&R.push(N)}p=R,Math.floor(e.virtualSize-s)-Math.floor(p[p.length-1])>1&&p.push(e.virtualSize-s)}if(a&&n.loop){const R=v[0]+h;if(n.slidesPerGroup>1){const O=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/n.slidesPerGroup),N=R*n.slidesPerGroup;for(let _=0;_<O;_+=1)p.push(p[p.length-1]+N)}for(let O=0;O<e.virtual.slidesBefore+e.virtual.slidesAfter;O+=1)n.slidesPerGroup===1&&p.push(p[p.length-1]+R),g.push(g[g.length-1]+R),e.virtualSize+=R}if(p.length===0&&(p=[0]),h!==0){const R=e.isHorizontal()&&o?"marginLeft":e.getDirectionLabel("marginRight");c.filter((O,N)=>!n.cssMode||n.loop?!0:N!==c.length-1).forEach(O=>{O.style[R]=`${h}px`})}if(n.centeredSlides&&n.centeredSlidesBounds){let R=0;v.forEach(N=>{R+=N+(h||0)}),R-=h;const O=R-s;p=p.map(N=>N<=0?-y:N>O?O+S:N)}if(n.centerInsufficientSlides){let R=0;if(v.forEach(O=>{R+=O+(h||0)}),R-=h,R<s){const O=(s-R)/2;p.forEach((N,_)=>{p[_]=N-O}),g.forEach((N,_)=>{g[_]=N+O})}}if(Object.assign(e,{slides:c,snapGrid:p,slidesGrid:g,slidesSizesGrid:v}),n.centeredSlides&&n.cssMode&&!n.centeredSlidesBounds){bo(r,"--swiper-centered-offset-before",`${-p[0]}px`),bo(r,"--swiper-centered-offset-after",`${e.size/2-v[v.length-1]/2}px`);const R=-e.snapGrid[0],O=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map(N=>N+R),e.slidesGrid=e.slidesGrid.map(N=>N+O)}if(d!==u&&e.emit("slidesLengthChange"),p.length!==m&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),g.length!==f&&e.emit("slidesGridLengthChange"),n.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!a&&!n.cssMode&&(n.effect==="slide"||n.effect==="fade")){const R=`${n.containerModifierClass}backface-hidden`,O=e.el.classList.contains(R);d<=n.maxBackfaceHiddenSlides?O||e.el.classList.add(R):O&&e.el.classList.remove(R)}}function VL(e){const t=this,n=[],r=t.virtual&&t.params.virtual.enabled;let i=0,s;typeof e=="number"?t.setTransition(e):e===!0&&t.setTransition(t.params.speed);const o=l=>r?t.slides[t.getSlideIndexByData(l)]:t.slides[l];if(t.params.slidesPerView!=="auto"&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach(l=>{n.push(l)});else for(s=0;s<Math.ceil(t.params.slidesPerView);s+=1){const l=t.activeIndex+s;if(l>t.slides.length&&!r)break;n.push(o(l))}else n.push(o(t.activeIndex));for(s=0;s<n.length;s+=1)if(typeof n[s]<"u"){const l=n[s].offsetHeight;i=l>i?l:i}(i||i===0)&&(t.wrapperEl.style.height=`${i}px`)}function FL(){const e=this,t=e.slides,n=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let r=0;r<t.length;r+=1)t[r].swiperSlideOffset=(e.isHorizontal()?t[r].offsetLeft:t[r].offsetTop)-n-e.cssOverflowAdjustment()}function NL(e){e===void 0&&(e=this&&this.translate||0);const t=this,n=t.params,{slides:r,rtlTranslate:i,snapGrid:s}=t;if(r.length===0)return;typeof r[0].swiperSlideOffset>"u"&&t.updateSlidesOffset();let o=-e;i&&(o=e),r.forEach(a=>{a.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass)}),t.visibleSlidesIndexes=[],t.visibleSlides=[];let l=n.spaceBetween;typeof l=="string"&&l.indexOf("%")>=0?l=parseFloat(l.replace("%",""))/100*t.size:typeof l=="string"&&(l=parseFloat(l));for(let a=0;a<r.length;a+=1){const u=r[a];let c=u.swiperSlideOffset;n.cssMode&&n.centeredSlides&&(c-=r[0].swiperSlideOffset);const d=(o+(n.centeredSlides?t.minTranslate():0)-c)/(u.swiperSlideSize+l),p=(o-s[0]+(n.centeredSlides?t.minTranslate():0)-c)/(u.swiperSlideSize+l),g=-(o-c),v=g+t.slidesSizesGrid[a],y=g>=0&&g<=t.size-t.slidesSizesGrid[a];(g>=0&&g<t.size-1||v>1&&v<=t.size||g<=0&&v>=t.size)&&(t.visibleSlides.push(u),t.visibleSlidesIndexes.push(a),r[a].classList.add(n.slideVisibleClass)),y&&r[a].classList.add(n.slideFullyVisibleClass),u.progress=i?-d:d,u.originalProgress=i?-p:p}}function zL(e){const t=this;if(typeof e>"u"){const c=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*c||0}const n=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:s,isEnd:o,progressLoop:l}=t;const a=s,u=o;if(r===0)i=0,s=!0,o=!0;else{i=(e-t.minTranslate())/r;const c=Math.abs(e-t.minTranslate())<1,d=Math.abs(e-t.maxTranslate())<1;s=c||i<=0,o=d||i>=1,c&&(i=0),d&&(i=1)}if(n.loop){const c=t.getSlideIndexByData(0),d=t.getSlideIndexByData(t.slides.length-1),p=t.slidesGrid[c],g=t.slidesGrid[d],v=t.slidesGrid[t.slidesGrid.length-1],y=Math.abs(e);y>=p?l=(y-p)/v:l=(y+v-g)/v,l>1&&(l-=1)}Object.assign(t,{progress:i,progressLoop:l,isBeginning:s,isEnd:o}),(n.watchSlidesProgress||n.centeredSlides&&n.autoHeight)&&t.updateSlidesProgress(e),s&&!a&&t.emit("reachBeginning toEdge"),o&&!u&&t.emit("reachEnd toEdge"),(a&&!s||u&&!o)&&t.emit("fromEdge"),t.emit("progress",i)}function BL(){const e=this,{slides:t,params:n,slidesEl:r,activeIndex:i}=e,s=e.virtual&&n.virtual.enabled,o=e.grid&&n.grid&&n.grid.rows>1,l=d=>Ut(r,`.${n.slideClass}${d}, swiper-slide${d}`)[0];t.forEach(d=>{d.classList.remove(n.slideActiveClass,n.slideNextClass,n.slidePrevClass)});let a,u,c;if(s)if(n.loop){let d=i-e.virtual.slidesBefore;d<0&&(d=e.virtual.slides.length+d),d>=e.virtual.slides.length&&(d-=e.virtual.slides.length),a=l(`[data-swiper-slide-index="${d}"]`)}else a=l(`[data-swiper-slide-index="${i}"]`);else o?(a=t.filter(d=>d.column===i)[0],c=t.filter(d=>d.column===i+1)[0],u=t.filter(d=>d.column===i-1)[0]):a=t[i];a&&(a.classList.add(n.slideActiveClass),o?(c&&c.classList.add(n.slideNextClass),u&&u.classList.add(n.slidePrevClass)):(c=PL(a,`.${n.slideClass}, swiper-slide`)[0],n.loop&&!c&&(c=t[0]),c&&c.classList.add(n.slideNextClass),u=CL(a,`.${n.slideClass}, swiper-slide`)[0],n.loop&&!u===0&&(u=t[t.length-1]),u&&u.classList.add(n.slidePrevClass))),e.emitSlidesClasses()}const Ko=(e,t)=>{if(!e||e.destroyed||!e.params)return;const n=()=>e.isElement?"swiper-slide":`.${e.params.slideClass}`,r=t.closest(n());if(r){let i=r.querySelector(`.${e.params.lazyPreloaderClass}`);!i&&e.isElement&&(r.shadowRoot?i=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{r.shadowRoot&&(i=r.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),i&&i.remove())})),i&&i.remove()}},nu=(e,t)=>{if(!e.slides[t])return;const n=e.slides[t].querySelector('[loading="lazy"]');n&&n.removeAttribute("loading")},Rc=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const n=e.slides.length;if(!n||!t||t<0)return;t=Math.min(t,n);const r=e.params.slidesPerView==="auto"?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),i=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const o=i,l=[o-t];l.push(...Array.from({length:t}).map((a,u)=>o+r+u)),e.slides.forEach((a,u)=>{l.includes(a.column)&&nu(e,u)});return}const s=i+r-1;if(e.params.rewind||e.params.loop)for(let o=i-t;o<=s+t;o+=1){const l=(o%n+n)%n;(l<i||l>s)&&nu(e,l)}else for(let o=Math.max(i-t,0);o<=Math.min(s+t,n-1);o+=1)o!==i&&(o>s||o<i)&&nu(e,o)};function jL(e){const{slidesGrid:t,params:n}=e,r=e.rtlTranslate?e.translate:-e.translate;let i;for(let s=0;s<t.length;s+=1)typeof t[s+1]<"u"?r>=t[s]&&r<t[s+1]-(t[s+1]-t[s])/2?i=s:r>=t[s]&&r<t[s+1]&&(i=s+1):r>=t[s]&&(i=s);return n.normalizeSlideIndex&&(i<0||typeof i>"u")&&(i=0),i}function UL(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{snapGrid:r,params:i,activeIndex:s,realIndex:o,snapIndex:l}=t;let a=e,u;const c=g=>{let v=g-t.virtual.slidesBefore;return v<0&&(v=t.virtual.slides.length+v),v>=t.virtual.slides.length&&(v-=t.virtual.slides.length),v};if(typeof a>"u"&&(a=jL(t)),r.indexOf(n)>=0)u=r.indexOf(n);else{const g=Math.min(i.slidesPerGroupSkip,a);u=g+Math.floor((a-g)/i.slidesPerGroup)}if(u>=r.length&&(u=r.length-1),a===s&&!t.params.loop){u!==l&&(t.snapIndex=u,t.emit("snapIndexChange"));return}if(a===s&&t.params.loop&&t.virtual&&t.params.virtual.enabled){t.realIndex=c(a);return}const d=t.grid&&i.grid&&i.grid.rows>1;let p;if(t.virtual&&i.virtual.enabled&&i.loop)p=c(a);else if(d){const g=t.slides.filter(y=>y.column===a)[0];let v=parseInt(g.getAttribute("data-swiper-slide-index"),10);Number.isNaN(v)&&(v=Math.max(t.slides.indexOf(g),0)),p=Math.floor(v/i.grid.rows)}else if(t.slides[a]){const g=t.slides[a].getAttribute("data-swiper-slide-index");g?p=parseInt(g,10):p=a}else p=a;Object.assign(t,{previousSnapIndex:l,snapIndex:u,previousRealIndex:o,realIndex:p,previousIndex:s,activeIndex:a}),t.initialized&&Rc(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(o!==p&&t.emit("realIndexChange"),t.emit("slideChange"))}function $L(e,t){const n=this,r=n.params;let i=e.closest(`.${r.slideClass}, swiper-slide`);!i&&n.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach(l=>{!i&&l.matches&&l.matches(`.${r.slideClass}, swiper-slide`)&&(i=l)});let s=!1,o;if(i){for(let l=0;l<n.slides.length;l+=1)if(n.slides[l]===i){s=!0,o=l;break}}if(i&&s)n.clickedSlide=i,n.virtual&&n.params.virtual.enabled?n.clickedIndex=parseInt(i.getAttribute("data-swiper-slide-index"),10):n.clickedIndex=o;else{n.clickedSlide=void 0,n.clickedIndex=void 0;return}r.slideToClickedSlide&&n.clickedIndex!==void 0&&n.clickedIndex!==n.activeIndex&&n.slideToClickedSlide()}var HL={updateSize:IL,updateSlides:_L,updateAutoHeight:VL,updateSlidesOffset:FL,updateSlidesProgress:NL,updateProgress:zL,updateSlidesClasses:BL,updateActiveIndex:UL,updateClickedSlide:$L};function WL(e){e===void 0&&(e=this.isHorizontal()?"x":"y");const t=this,{params:n,rtlTranslate:r,translate:i,wrapperEl:s}=t;if(n.virtualTranslate)return r?-i:i;if(n.cssMode)return i;let o=EL(s,e);return o+=t.cssOverflowAdjustment(),r&&(o=-o),o||0}function GL(e,t){const n=this,{rtlTranslate:r,params:i,wrapperEl:s,progress:o}=n;let l=0,a=0;const u=0;n.isHorizontal()?l=r?-e:e:a=e,i.roundLengths&&(l=Math.floor(l),a=Math.floor(a)),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:a,i.cssMode?s[n.isHorizontal()?"scrollLeft":"scrollTop"]=n.isHorizontal()?-l:-a:i.virtualTranslate||(n.isHorizontal()?l-=n.cssOverflowAdjustment():a-=n.cssOverflowAdjustment(),s.style.transform=`translate3d(${l}px, ${a}px, ${u}px)`);let c;const d=n.maxTranslate()-n.minTranslate();d===0?c=0:c=(e-n.minTranslate())/d,c!==o&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)}function KL(){return-this.snapGrid[0]}function QL(){return-this.snapGrid[this.snapGrid.length-1]}function YL(e,t,n,r,i){e===void 0&&(e=0),t===void 0&&(t=this.params.speed),n===void 0&&(n=!0),r===void 0&&(r=!0);const s=this,{params:o,wrapperEl:l}=s;if(s.animating&&o.preventInteractionOnTransition)return!1;const a=s.minTranslate(),u=s.maxTranslate();let c;if(r&&e>a?c=a:r&&e<u?c=u:c=e,s.updateProgress(c),o.cssMode){const d=s.isHorizontal();if(t===0)l[d?"scrollLeft":"scrollTop"]=-c;else{if(!s.support.smoothScroll)return p0({swiper:s,targetPosition:-c,side:d?"left":"top"}),!0;l.scrollTo({[d?"left":"top"]:-c,behavior:"smooth"})}return!0}return t===0?(s.setTransition(0),s.setTranslate(c),n&&(s.emit("beforeTransitionStart",t,i),s.emit("transitionEnd"))):(s.setTransition(t),s.setTranslate(c),n&&(s.emit("beforeTransitionStart",t,i),s.emit("transitionStart")),s.animating||(s.animating=!0,s.onTranslateToWrapperTransitionEnd||(s.onTranslateToWrapperTransitionEnd=function(p){!s||s.destroyed||p.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onTranslateToWrapperTransitionEnd),s.onTranslateToWrapperTransitionEnd=null,delete s.onTranslateToWrapperTransitionEnd,n&&s.emit("transitionEnd"))}),s.wrapperEl.addEventListener("transitionend",s.onTranslateToWrapperTransitionEnd))),!0}var XL={getTranslate:WL,setTranslate:GL,minTranslate:KL,maxTranslate:QL,translateTo:YL};function qL(e,t){const n=this;n.params.cssMode||(n.wrapperEl.style.transitionDuration=`${e}ms`,n.wrapperEl.style.transitionDelay=e===0?"0ms":""),n.emit("setTransition",e,t)}function g0(e){let{swiper:t,runCallbacks:n,direction:r,step:i}=e;const{activeIndex:s,previousIndex:o}=t;let l=r;if(l||(s>o?l="next":s<o?l="prev":l="reset"),t.emit(`transition${i}`),n&&s!==o){if(l==="reset"){t.emit(`slideResetTransition${i}`);return}t.emit(`slideChangeTransition${i}`),l==="next"?t.emit(`slideNextTransition${i}`):t.emit(`slidePrevTransition${i}`)}}function ZL(e,t){e===void 0&&(e=!0);const n=this,{params:r}=n;r.cssMode||(r.autoHeight&&n.updateAutoHeight(),g0({swiper:n,runCallbacks:e,direction:t,step:"Start"}))}function JL(e,t){e===void 0&&(e=!0);const n=this,{params:r}=n;n.animating=!1,!r.cssMode&&(n.setTransition(0),g0({swiper:n,runCallbacks:e,direction:t,step:"End"}))}var eM={setTransition:qL,transitionStart:ZL,transitionEnd:JL};function tM(e,t,n,r,i){e===void 0&&(e=0),t===void 0&&(t=this.params.speed),n===void 0&&(n=!0),typeof e=="string"&&(e=parseInt(e,10));const s=this;let o=e;o<0&&(o=0);const{params:l,snapGrid:a,slidesGrid:u,previousIndex:c,activeIndex:d,rtlTranslate:p,wrapperEl:g,enabled:v}=s;if(s.animating&&l.preventInteractionOnTransition||!v&&!r&&!i)return!1;const y=Math.min(s.params.slidesPerGroupSkip,o);let S=y+Math.floor((o-y)/s.params.slidesPerGroup);S>=a.length&&(S=a.length-1);const m=-a[S];if(l.normalizeSlideIndex)for(let h=0;h<u.length;h+=1){const w=-Math.floor(m*100),E=Math.floor(u[h]*100),x=Math.floor(u[h+1]*100);typeof u[h+1]<"u"?w>=E&&w<x-(x-E)/2?o=h:w>=E&&w<x&&(o=h+1):w>=E&&(o=h)}if(s.initialized&&o!==d&&(!s.allowSlideNext&&(p?m>s.translate&&m>s.minTranslate():m<s.translate&&m<s.minTranslate())||!s.allowSlidePrev&&m>s.translate&&m>s.maxTranslate()&&(d||0)!==o))return!1;o!==(c||0)&&n&&s.emit("beforeSlideChangeStart"),s.updateProgress(m);let f;if(o>d?f="next":o<d?f="prev":f="reset",p&&-m===s.translate||!p&&m===s.translate)return s.updateActiveIndex(o),l.autoHeight&&s.updateAutoHeight(),s.updateSlidesClasses(),l.effect!=="slide"&&s.setTranslate(m),f!=="reset"&&(s.transitionStart(n,f),s.transitionEnd(n,f)),!1;if(l.cssMode){const h=s.isHorizontal(),w=p?m:-m;if(t===0){const E=s.virtual&&s.params.virtual.enabled;E&&(s.wrapperEl.style.scrollSnapType="none",s._immediateVirtual=!0),E&&!s._cssModeVirtualInitialSet&&s.params.initialSlide>0?(s._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{g[h?"scrollLeft":"scrollTop"]=w})):g[h?"scrollLeft":"scrollTop"]=w,E&&requestAnimationFrame(()=>{s.wrapperEl.style.scrollSnapType="",s._immediateVirtual=!1})}else{if(!s.support.smoothScroll)return p0({swiper:s,targetPosition:w,side:h?"left":"top"}),!0;g.scrollTo({[h?"left":"top"]:w,behavior:"smooth"})}return!0}return s.setTransition(t),s.setTranslate(m),s.updateActiveIndex(o),s.updateSlidesClasses(),s.emit("beforeTransitionStart",t,r),s.transitionStart(n,f),t===0?s.transitionEnd(n,f):s.animating||(s.animating=!0,s.onSlideToWrapperTransitionEnd||(s.onSlideToWrapperTransitionEnd=function(w){!s||s.destroyed||w.target===this&&(s.wrapperEl.removeEventListener("transitionend",s.onSlideToWrapperTransitionEnd),s.onSlideToWrapperTransitionEnd=null,delete s.onSlideToWrapperTransitionEnd,s.transitionEnd(n,f))}),s.wrapperEl.addEventListener("transitionend",s.onSlideToWrapperTransitionEnd)),!0}function nM(e,t,n,r){e===void 0&&(e=0),t===void 0&&(t=this.params.speed),n===void 0&&(n=!0),typeof e=="string"&&(e=parseInt(e,10));const i=this,s=i.grid&&i.params.grid&&i.params.grid.rows>1;let o=e;if(i.params.loop)if(i.virtual&&i.params.virtual.enabled)o=o+i.virtual.slidesBefore;else{let l;if(s){const p=o*i.params.grid.rows;l=i.slides.filter(g=>g.getAttribute("data-swiper-slide-index")*1===p)[0].column}else l=i.getSlideIndexByData(o);const a=s?Math.ceil(i.slides.length/i.params.grid.rows):i.slides.length,{centeredSlides:u}=i.params;let c=i.params.slidesPerView;c==="auto"?c=i.slidesPerViewDynamic():(c=Math.ceil(parseFloat(i.params.slidesPerView,10)),u&&c%2===0&&(c=c+1));let d=a-l<c;if(u&&(d=d||l<Math.ceil(c/2)),d){const p=u?l<i.activeIndex?"prev":"next":l-i.activeIndex-1<i.params.slidesPerView?"next":"prev";i.loopFix({direction:p,slideTo:!0,activeSlideIndex:p==="next"?l+1:l-a+1,slideRealIndex:p==="next"?i.realIndex:void 0})}if(s){const p=o*i.params.grid.rows;o=i.slides.filter(g=>g.getAttribute("data-swiper-slide-index")*1===p)[0].column}else o=i.getSlideIndexByData(o)}return requestAnimationFrame(()=>{i.slideTo(o,t,n,r)}),i}function rM(e,t,n){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0);const r=this,{enabled:i,params:s,animating:o}=r;if(!i)return r;let l=s.slidesPerGroup;s.slidesPerView==="auto"&&s.slidesPerGroup===1&&s.slidesPerGroupAuto&&(l=Math.max(r.slidesPerViewDynamic("current",!0),1));const a=r.activeIndex<s.slidesPerGroupSkip?1:l,u=r.virtual&&s.virtual.enabled;if(s.loop){if(o&&!u&&s.loopPreventsSliding)return!1;if(r.loopFix({direction:"next"}),r._clientLeft=r.wrapperEl.clientLeft,r.activeIndex===r.slides.length-1&&s.cssMode)return requestAnimationFrame(()=>{r.slideTo(r.activeIndex+a,e,t,n)}),!0}return s.rewind&&r.isEnd?r.slideTo(0,e,t,n):r.slideTo(r.activeIndex+a,e,t,n)}function iM(e,t,n){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0);const r=this,{params:i,snapGrid:s,slidesGrid:o,rtlTranslate:l,enabled:a,animating:u}=r;if(!a)return r;const c=r.virtual&&i.virtual.enabled;if(i.loop){if(u&&!c&&i.loopPreventsSliding)return!1;r.loopFix({direction:"prev"}),r._clientLeft=r.wrapperEl.clientLeft}const d=l?r.translate:-r.translate;function p(m){return m<0?-Math.floor(Math.abs(m)):Math.floor(m)}const g=p(d),v=s.map(m=>p(m));let y=s[v.indexOf(g)-1];if(typeof y>"u"&&i.cssMode){let m;s.forEach((f,h)=>{g>=f&&(m=h)}),typeof m<"u"&&(y=s[m>0?m-1:m])}let S=0;if(typeof y<"u"&&(S=o.indexOf(y),S<0&&(S=r.activeIndex-1),i.slidesPerView==="auto"&&i.slidesPerGroup===1&&i.slidesPerGroupAuto&&(S=S-r.slidesPerViewDynamic("previous",!0)+1,S=Math.max(S,0))),i.rewind&&r.isBeginning){const m=r.params.virtual&&r.params.virtual.enabled&&r.virtual?r.virtual.slides.length-1:r.slides.length-1;return r.slideTo(m,e,t,n)}else if(i.loop&&r.activeIndex===0&&i.cssMode)return requestAnimationFrame(()=>{r.slideTo(S,e,t,n)}),!0;return r.slideTo(S,e,t,n)}function sM(e,t,n){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0);const r=this;return r.slideTo(r.activeIndex,e,t,n)}function oM(e,t,n,r){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0),r===void 0&&(r=.5);const i=this;let s=i.activeIndex;const o=Math.min(i.params.slidesPerGroupSkip,s),l=o+Math.floor((s-o)/i.params.slidesPerGroup),a=i.rtlTranslate?i.translate:-i.translate;if(a>=i.snapGrid[l]){const u=i.snapGrid[l],c=i.snapGrid[l+1];a-u>(c-u)*r&&(s+=i.params.slidesPerGroup)}else{const u=i.snapGrid[l-1],c=i.snapGrid[l];a-u<=(c-u)*r&&(s-=i.params.slidesPerGroup)}return s=Math.max(s,0),s=Math.min(s,i.slidesGrid.length-1),i.slideTo(s,e,t,n)}function aM(){const e=this,{params:t,slidesEl:n}=e,r=t.slidesPerView==="auto"?e.slidesPerViewDynamic():t.slidesPerView;let i=e.clickedIndex,s;const o=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;s=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?i<e.loopedSlides-r/2||i>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),i=e.getSlideIndex(Ut(n,`${o}[data-swiper-slide-index="${s}"]`)[0]),Mc(()=>{e.slideTo(i)})):e.slideTo(i):i>e.slides.length-r?(e.loopFix(),i=e.getSlideIndex(Ut(n,`${o}[data-swiper-slide-index="${s}"]`)[0]),Mc(()=>{e.slideTo(i)})):e.slideTo(i)}else e.slideTo(i)}var lM={slideTo:tM,slideToLoop:nM,slideNext:rM,slidePrev:iM,slideReset:sM,slideToClosest:oM,slideToClickedSlide:aM};function uM(e){const t=this,{params:n,slidesEl:r}=t;if(!n.loop||t.virtual&&t.params.virtual.enabled)return;const i=()=>{Ut(r,`.${n.slideClass}, swiper-slide`).forEach((d,p)=>{d.setAttribute("data-swiper-slide-index",p)})},s=t.grid&&n.grid&&n.grid.rows>1,o=n.slidesPerGroup*(s?n.grid.rows:1),l=t.slides.length%o!==0,a=s&&t.slides.length%n.grid.rows!==0,u=c=>{for(let d=0;d<c;d+=1){const p=t.isElement?Vs("swiper-slide",[n.slideBlankClass]):Vs("div",[n.slideClass,n.slideBlankClass]);t.slidesEl.append(p)}};if(l){if(n.loopAddBlankSlides){const c=o-t.slides.length%o;u(c),t.recalcSlides(),t.updateSlides()}else ka("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");i()}else if(a){if(n.loopAddBlankSlides){const c=n.grid.rows-t.slides.length%n.grid.rows;u(c),t.recalcSlides(),t.updateSlides()}else ka("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");i()}else i();t.loopFix({slideRealIndex:e,direction:n.centeredSlides?void 0:"next"})}function cM(e){let{slideRealIndex:t,slideTo:n=!0,direction:r,setTranslate:i,activeSlideIndex:s,byController:o,byMousewheel:l}=e===void 0?{}:e;const a=this;if(!a.params.loop)return;a.emit("beforeLoopFix");const{slides:u,allowSlidePrev:c,allowSlideNext:d,slidesEl:p,params:g}=a,{centeredSlides:v}=g;if(a.allowSlidePrev=!0,a.allowSlideNext=!0,a.virtual&&g.virtual.enabled){n&&(!g.centeredSlides&&a.snapIndex===0?a.slideTo(a.virtual.slides.length,0,!1,!0):g.centeredSlides&&a.snapIndex<g.slidesPerView?a.slideTo(a.virtual.slides.length+a.snapIndex,0,!1,!0):a.snapIndex===a.snapGrid.length-1&&a.slideTo(a.virtual.slidesBefore,0,!1,!0)),a.allowSlidePrev=c,a.allowSlideNext=d,a.emit("loopFix");return}let y=g.slidesPerView;y==="auto"?y=a.slidesPerViewDynamic():(y=Math.ceil(parseFloat(g.slidesPerView,10)),v&&y%2===0&&(y=y+1));const S=g.slidesPerGroupAuto?y:g.slidesPerGroup;let m=S;m%S!==0&&(m+=S-m%S),m+=g.loopAdditionalSlides,a.loopedSlides=m;const f=a.grid&&g.grid&&g.grid.rows>1;u.length<y+m?ka("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):f&&g.grid.fill==="row"&&ka("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const h=[],w=[];let E=a.activeIndex;typeof s>"u"?s=a.getSlideIndex(u.filter(_=>_.classList.contains(g.slideActiveClass))[0]):E=s;const x=r==="next"||!r,C=r==="prev"||!r;let P=0,k=0;const R=f?Math.ceil(u.length/g.grid.rows):u.length,N=(f?u[s].column:s)+(v&&typeof i>"u"?-y/2+.5:0);if(N<m){P=Math.max(m-N,S);for(let _=0;_<m-N;_+=1){const M=_-Math.floor(_/R)*R;if(f){const b=R-M-1;for(let U=u.length-1;U>=0;U-=1)u[U].column===b&&h.push(U)}else h.push(R-M-1)}}else if(N+y>R-m){k=Math.max(N-(R-m*2),S);for(let _=0;_<k;_+=1){const M=_-Math.floor(_/R)*R;f?u.forEach((b,U)=>{b.column===M&&w.push(U)}):w.push(M)}}if(a.__preventObserver__=!0,requestAnimationFrame(()=>{a.__preventObserver__=!1}),C&&h.forEach(_=>{u[_].swiperLoopMoveDOM=!0,p.prepend(u[_]),u[_].swiperLoopMoveDOM=!1}),x&&w.forEach(_=>{u[_].swiperLoopMoveDOM=!0,p.append(u[_]),u[_].swiperLoopMoveDOM=!1}),a.recalcSlides(),g.slidesPerView==="auto"?a.updateSlides():f&&(h.length>0&&C||w.length>0&&x)&&a.slides.forEach((_,M)=>{a.grid.updateSlide(M,_,a.slides)}),g.watchSlidesProgress&&a.updateSlidesOffset(),n){if(h.length>0&&C){if(typeof t>"u"){const _=a.slidesGrid[E],b=a.slidesGrid[E+P]-_;l?a.setTranslate(a.translate-b):(a.slideTo(E+P,0,!1,!0),i&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-b,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-b))}else if(i){const _=f?h.length/g.grid.rows:h.length;a.slideTo(a.activeIndex+_,0,!1,!0),a.touchEventsData.currentTranslate=a.translate}}else if(w.length>0&&x)if(typeof t>"u"){const _=a.slidesGrid[E],b=a.slidesGrid[E-k]-_;l?a.setTranslate(a.translate-b):(a.slideTo(E-k,0,!1,!0),i&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-b,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-b))}else{const _=f?w.length/g.grid.rows:w.length;a.slideTo(a.activeIndex-_,0,!1,!0)}}if(a.allowSlidePrev=c,a.allowSlideNext=d,a.controller&&a.controller.control&&!o){const _={slideRealIndex:t,direction:r,setTranslate:i,activeSlideIndex:s,byController:!0};Array.isArray(a.controller.control)?a.controller.control.forEach(M=>{!M.destroyed&&M.params.loop&&M.loopFix({..._,slideTo:M.params.slidesPerView===g.slidesPerView?n:!1})}):a.controller.control instanceof a.constructor&&a.controller.control.params.loop&&a.controller.control.loopFix({..._,slideTo:a.controller.control.params.slidesPerView===g.slidesPerView?n:!1})}a.emit("loopFix")}function dM(){const e=this,{params:t,slidesEl:n}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const r=[];e.slides.forEach(i=>{const s=typeof i.swiperSlideIndex>"u"?i.getAttribute("data-swiper-slide-index")*1:i.swiperSlideIndex;r[s]=i}),e.slides.forEach(i=>{i.removeAttribute("data-swiper-slide-index")}),r.forEach(i=>{n.append(i)}),e.recalcSlides(),e.slideTo(e.realIndex,0)}var fM={loopCreate:uM,loopFix:cM,loopDestroy:dM};function pM(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const n=t.params.touchEventsTarget==="container"?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),n.style.cursor="move",n.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1})}function hM(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e[e.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1}))}var mM={setGrabCursor:pM,unsetGrabCursor:hM};function gM(e,t){t===void 0&&(t=this);function n(r){if(!r||r===rn()||r===vt())return null;r.assignedSlot&&(r=r.assignedSlot);const i=r.closest(e);return!i&&!r.getRootNode?null:i||n(r.getRootNode().host)}return n(t)}function Yh(e,t,n){const r=vt(),{params:i}=e,s=i.edgeSwipeDetection,o=i.edgeSwipeThreshold;return s&&(n<=o||n>=r.innerWidth-o)?s==="prevent"?(t.preventDefault(),!0):!1:!0}function vM(e){const t=this,n=rn();let r=e;r.originalEvent&&(r=r.originalEvent);const i=t.touchEventsData;if(r.type==="pointerdown"){if(i.pointerId!==null&&i.pointerId!==r.pointerId)return;i.pointerId=r.pointerId}else r.type==="touchstart"&&r.targetTouches.length===1&&(i.touchId=r.targetTouches[0].identifier);if(r.type==="touchstart"){Yh(t,r,r.targetTouches[0].pageX);return}const{params:s,touches:o,enabled:l}=t;if(!l||!s.simulateTouch&&r.pointerType==="mouse"||t.animating&&s.preventInteractionOnTransition)return;!t.animating&&s.cssMode&&s.loop&&t.loopFix();let a=r.target;if(s.touchEventsTarget==="wrapper"&&!t.wrapperEl.contains(a)||"which"in r&&r.which===3||"button"in r&&r.button>0||i.isTouched&&i.isMoved)return;const u=!!s.noSwipingClass&&s.noSwipingClass!=="",c=r.composedPath?r.composedPath():r.path;u&&r.target&&r.target.shadowRoot&&c&&(a=c[0]);const d=s.noSwipingSelector?s.noSwipingSelector:`.${s.noSwipingClass}`,p=!!(r.target&&r.target.shadowRoot);if(s.noSwiping&&(p?gM(d,a):a.closest(d))){t.allowClick=!0;return}if(s.swipeHandler&&!a.closest(s.swipeHandler))return;o.currentX=r.pageX,o.currentY=r.pageY;const g=o.currentX,v=o.currentY;if(!Yh(t,r,g))return;Object.assign(i,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=g,o.startY=v,i.touchStartTime=Ma(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(i.allowThresholdMove=!1);let y=!0;a.matches(i.focusableElements)&&(y=!1,a.nodeName==="SELECT"&&(i.isTouched=!1)),n.activeElement&&n.activeElement.matches(i.focusableElements)&&n.activeElement!==a&&n.activeElement.blur();const S=y&&t.allowTouchMove&&s.touchStartPreventDefault;(s.touchStartForcePreventDefault||S)&&!a.isContentEditable&&r.preventDefault(),s.freeMode&&s.freeMode.enabled&&t.freeMode&&t.animating&&!s.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",r)}function yM(e){const t=rn(),n=this,r=n.touchEventsData,{params:i,touches:s,rtlTranslate:o,enabled:l}=n;if(!l||!i.simulateTouch&&e.pointerType==="mouse")return;let a=e;if(a.originalEvent&&(a=a.originalEvent),a.type==="pointermove"&&(r.touchId!==null||a.pointerId!==r.pointerId))return;let u;if(a.type==="touchmove"){if(u=[...a.changedTouches].filter(x=>x.identifier===r.touchId)[0],!u||u.identifier!==r.touchId)return}else u=a;if(!r.isTouched){r.startMoving&&r.isScrolling&&n.emit("touchMoveOpposite",a);return}const c=u.pageX,d=u.pageY;if(a.preventedByNestedSwiper){s.startX=c,s.startY=d;return}if(!n.allowTouchMove){a.target.matches(r.focusableElements)||(n.allowClick=!1),r.isTouched&&(Object.assign(s,{startX:c,startY:d,currentX:c,currentY:d}),r.touchStartTime=Ma());return}if(i.touchReleaseOnEdges&&!i.loop){if(n.isVertical()){if(d<s.startY&&n.translate<=n.maxTranslate()||d>s.startY&&n.translate>=n.minTranslate()){r.isTouched=!1,r.isMoved=!1;return}}else if(c<s.startX&&n.translate<=n.maxTranslate()||c>s.startX&&n.translate>=n.minTranslate())return}if(t.activeElement&&a.target===t.activeElement&&a.target.matches(r.focusableElements)){r.isMoved=!0,n.allowClick=!1;return}r.allowTouchCallbacks&&n.emit("touchMove",a),s.previousX=s.currentX,s.previousY=s.currentY,s.currentX=c,s.currentY=d;const p=s.currentX-s.startX,g=s.currentY-s.startY;if(n.params.threshold&&Math.sqrt(p**2+g**2)<n.params.threshold)return;if(typeof r.isScrolling>"u"){let x;n.isHorizontal()&&s.currentY===s.startY||n.isVertical()&&s.currentX===s.startX?r.isScrolling=!1:p*p+g*g>=25&&(x=Math.atan2(Math.abs(g),Math.abs(p))*180/Math.PI,r.isScrolling=n.isHorizontal()?x>i.touchAngle:90-x>i.touchAngle)}if(r.isScrolling&&n.emit("touchMoveOpposite",a),typeof r.startMoving>"u"&&(s.currentX!==s.startX||s.currentY!==s.startY)&&(r.startMoving=!0),r.isScrolling){r.isTouched=!1;return}if(!r.startMoving)return;n.allowClick=!1,!i.cssMode&&a.cancelable&&a.preventDefault(),i.touchMoveStopPropagation&&!i.nested&&a.stopPropagation();let v=n.isHorizontal()?p:g,y=n.isHorizontal()?s.currentX-s.previousX:s.currentY-s.previousY;i.oneWayMovement&&(v=Math.abs(v)*(o?1:-1),y=Math.abs(y)*(o?1:-1)),s.diff=v,v*=i.touchRatio,o&&(v=-v,y=-y);const S=n.touchesDirection;n.swipeDirection=v>0?"prev":"next",n.touchesDirection=y>0?"prev":"next";const m=n.params.loop&&!i.cssMode,f=n.touchesDirection==="next"&&n.allowSlideNext||n.touchesDirection==="prev"&&n.allowSlidePrev;if(!r.isMoved){if(m&&f&&n.loopFix({direction:n.swipeDirection}),r.startTranslate=n.getTranslate(),n.setTransition(0),n.animating){const x=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});n.wrapperEl.dispatchEvent(x)}r.allowMomentumBounce=!1,i.grabCursor&&(n.allowSlideNext===!0||n.allowSlidePrev===!0)&&n.setGrabCursor(!0),n.emit("sliderFirstMove",a)}let h;if(new Date().getTime(),r.isMoved&&r.allowThresholdMove&&S!==n.touchesDirection&&m&&f&&Math.abs(v)>=1){Object.assign(s,{startX:c,startY:d,currentX:c,currentY:d,startTranslate:r.currentTranslate}),r.loopSwapReset=!0,r.startTranslate=r.currentTranslate;return}n.emit("sliderMove",a),r.isMoved=!0,r.currentTranslate=v+r.startTranslate;let w=!0,E=i.resistanceRatio;if(i.touchReleaseOnEdges&&(E=0),v>0?(m&&f&&!h&&r.allowThresholdMove&&r.currentTranslate>(i.centeredSlides?n.minTranslate()-n.slidesSizesGrid[n.activeIndex+1]:n.minTranslate())&&n.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),r.currentTranslate>n.minTranslate()&&(w=!1,i.resistance&&(r.currentTranslate=n.minTranslate()-1+(-n.minTranslate()+r.startTranslate+v)**E))):v<0&&(m&&f&&!h&&r.allowThresholdMove&&r.currentTranslate<(i.centeredSlides?n.maxTranslate()+n.slidesSizesGrid[n.slidesSizesGrid.length-1]:n.maxTranslate())&&n.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:n.slides.length-(i.slidesPerView==="auto"?n.slidesPerViewDynamic():Math.ceil(parseFloat(i.slidesPerView,10)))}),r.currentTranslate<n.maxTranslate()&&(w=!1,i.resistance&&(r.currentTranslate=n.maxTranslate()+1-(n.maxTranslate()-r.startTranslate-v)**E))),w&&(a.preventedByNestedSwiper=!0),!n.allowSlideNext&&n.swipeDirection==="next"&&r.currentTranslate<r.startTranslate&&(r.currentTranslate=r.startTranslate),!n.allowSlidePrev&&n.swipeDirection==="prev"&&r.currentTranslate>r.startTranslate&&(r.currentTranslate=r.startTranslate),!n.allowSlidePrev&&!n.allowSlideNext&&(r.currentTranslate=r.startTranslate),i.threshold>0)if(Math.abs(v)>i.threshold||r.allowThresholdMove){if(!r.allowThresholdMove){r.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,r.currentTranslate=r.startTranslate,s.diff=n.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY;return}}else{r.currentTranslate=r.startTranslate;return}!i.followFinger||i.cssMode||((i.freeMode&&i.freeMode.enabled&&n.freeMode||i.watchSlidesProgress)&&(n.updateActiveIndex(),n.updateSlidesClasses()),i.freeMode&&i.freeMode.enabled&&n.freeMode&&n.freeMode.onTouchMove(),n.updateProgress(r.currentTranslate),n.setTranslate(r.currentTranslate))}function wM(e){const t=this,n=t.touchEventsData;let r=e;r.originalEvent&&(r=r.originalEvent);let i;if(r.type==="touchend"||r.type==="touchcancel"){if(i=[...r.changedTouches].filter(E=>E.identifier===n.touchId)[0],!i||i.identifier!==n.touchId)return}else{if(n.touchId!==null||r.pointerId!==n.pointerId)return;i=r}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(r.type)&&!(["pointercancel","contextmenu"].includes(r.type)&&(t.browser.isSafari||t.browser.isWebView)))return;n.pointerId=null,n.touchId=null;const{params:o,touches:l,rtlTranslate:a,slidesGrid:u,enabled:c}=t;if(!c||!o.simulateTouch&&r.pointerType==="mouse")return;if(n.allowTouchCallbacks&&t.emit("touchEnd",r),n.allowTouchCallbacks=!1,!n.isTouched){n.isMoved&&o.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,n.startMoving=!1;return}o.grabCursor&&n.isMoved&&n.isTouched&&(t.allowSlideNext===!0||t.allowSlidePrev===!0)&&t.setGrabCursor(!1);const d=Ma(),p=d-n.touchStartTime;if(t.allowClick){const E=r.path||r.composedPath&&r.composedPath();t.updateClickedSlide(E&&E[0]||r.target,E),t.emit("tap click",r),p<300&&d-n.lastClickTime<300&&t.emit("doubleTap doubleClick",r)}if(n.lastClickTime=Ma(),Mc(()=>{t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||l.diff===0&&!n.loopSwapReset||n.currentTranslate===n.startTranslate&&!n.loopSwapReset){n.isTouched=!1,n.isMoved=!1,n.startMoving=!1;return}n.isTouched=!1,n.isMoved=!1,n.startMoving=!1;let g;if(o.followFinger?g=a?t.translate:-t.translate:g=-n.currentTranslate,o.cssMode)return;if(o.freeMode&&o.freeMode.enabled){t.freeMode.onTouchEnd({currentPos:g});return}const v=g>=-t.maxTranslate()&&!t.params.loop;let y=0,S=t.slidesSizesGrid[0];for(let E=0;E<u.length;E+=E<o.slidesPerGroupSkip?1:o.slidesPerGroup){const x=E<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;typeof u[E+x]<"u"?(v||g>=u[E]&&g<u[E+x])&&(y=E,S=u[E+x]-u[E]):(v||g>=u[E])&&(y=E,S=u[u.length-1]-u[u.length-2])}let m=null,f=null;o.rewind&&(t.isBeginning?f=o.virtual&&o.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(m=0));const h=(g-u[y])/S,w=y<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;if(p>o.longSwipesMs){if(!o.longSwipes){t.slideTo(t.activeIndex);return}t.swipeDirection==="next"&&(h>=o.longSwipesRatio?t.slideTo(o.rewind&&t.isEnd?m:y+w):t.slideTo(y)),t.swipeDirection==="prev"&&(h>1-o.longSwipesRatio?t.slideTo(y+w):f!==null&&h<0&&Math.abs(h)>o.longSwipesRatio?t.slideTo(f):t.slideTo(y))}else{if(!o.shortSwipes){t.slideTo(t.activeIndex);return}t.navigation&&(r.target===t.navigation.nextEl||r.target===t.navigation.prevEl)?r.target===t.navigation.nextEl?t.slideTo(y+w):t.slideTo(y):(t.swipeDirection==="next"&&t.slideTo(m!==null?m:y+w),t.swipeDirection==="prev"&&t.slideTo(f!==null?f:y))}}function Xh(){const e=this,{params:t,el:n}=e;if(n&&n.offsetWidth===0)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:s}=e,o=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const l=o&&t.loop;(t.slidesPerView==="auto"||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides&&!l?e.slideTo(e.slides.length-1,0,!1,!0):e.params.loop&&!o?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout(()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()},500)),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&s!==e.snapGrid&&e.checkOverflow()}function SM(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function xM(){const e=this,{wrapperEl:t,rtlTranslate:n,enabled:r}=e;if(!r)return;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,e.translate===0&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();let i;const s=e.maxTranslate()-e.minTranslate();s===0?i=0:i=(e.translate-e.minTranslate())/s,i!==e.progress&&e.updateProgress(n?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function EM(e){const t=this;Ko(t,e.target),!(t.params.cssMode||t.params.slidesPerView!=="auto"&&!t.params.autoHeight)&&t.update()}function TM(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const v0=(e,t)=>{const n=rn(),{params:r,el:i,wrapperEl:s,device:o}=e,l=!!r.nested,a=t==="on"?"addEventListener":"removeEventListener",u=t;n[a]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:l}),i[a]("touchstart",e.onTouchStart,{passive:!1}),i[a]("pointerdown",e.onTouchStart,{passive:!1}),n[a]("touchmove",e.onTouchMove,{passive:!1,capture:l}),n[a]("pointermove",e.onTouchMove,{passive:!1,capture:l}),n[a]("touchend",e.onTouchEnd,{passive:!0}),n[a]("pointerup",e.onTouchEnd,{passive:!0}),n[a]("pointercancel",e.onTouchEnd,{passive:!0}),n[a]("touchcancel",e.onTouchEnd,{passive:!0}),n[a]("pointerout",e.onTouchEnd,{passive:!0}),n[a]("pointerleave",e.onTouchEnd,{passive:!0}),n[a]("contextmenu",e.onTouchEnd,{passive:!0}),(r.preventClicks||r.preventClicksPropagation)&&i[a]("click",e.onClick,!0),r.cssMode&&s[a]("scroll",e.onScroll),r.updateOnWindowResize?e[u](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",Xh,!0):e[u]("observerUpdate",Xh,!0),i[a]("load",e.onLoad,{capture:!0})};function CM(){const e=this,{params:t}=e;e.onTouchStart=vM.bind(e),e.onTouchMove=yM.bind(e),e.onTouchEnd=wM.bind(e),e.onDocumentTouchStart=TM.bind(e),t.cssMode&&(e.onScroll=xM.bind(e)),e.onClick=SM.bind(e),e.onLoad=EM.bind(e),v0(e,"on")}function PM(){v0(this,"off")}var LM={attachEvents:CM,detachEvents:PM};const qh=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;function MM(){const e=this,{realIndex:t,initialized:n,params:r,el:i}=e,s=r.breakpoints;if(!s||s&&Object.keys(s).length===0)return;const o=e.getBreakpoint(s,e.params.breakpointsBase,e.el);if(!o||e.currentBreakpoint===o)return;const a=(o in s?s[o]:void 0)||e.originalParams,u=qh(e,r),c=qh(e,a),d=r.enabled;u&&!c?(i.classList.remove(`${r.containerModifierClass}grid`,`${r.containerModifierClass}grid-column`),e.emitContainerClasses()):!u&&c&&(i.classList.add(`${r.containerModifierClass}grid`),(a.grid.fill&&a.grid.fill==="column"||!a.grid.fill&&r.grid.fill==="column")&&i.classList.add(`${r.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach(m=>{if(typeof a[m]>"u")return;const f=r[m]&&r[m].enabled,h=a[m]&&a[m].enabled;f&&!h&&e[m].disable(),!f&&h&&e[m].enable()});const p=a.direction&&a.direction!==r.direction,g=r.loop&&(a.slidesPerView!==r.slidesPerView||p),v=r.loop;p&&n&&e.changeDirection(),ct(e.params,a);const y=e.params.enabled,S=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),d&&!y?e.disable():!d&&y&&e.enable(),e.currentBreakpoint=o,e.emit("_beforeBreakpoint",a),n&&(g?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!v&&S?(e.loopCreate(t),e.updateSlides()):v&&!S&&e.loopDestroy()),e.emit("breakpoint",a)}function kM(e,t,n){if(t===void 0&&(t="window"),!e||t==="container"&&!n)return;let r=!1;const i=vt(),s=t==="window"?i.innerHeight:n.clientHeight,o=Object.keys(e).map(l=>{if(typeof l=="string"&&l.indexOf("@")===0){const a=parseFloat(l.substr(1));return{value:s*a,point:l}}return{value:l,point:l}});o.sort((l,a)=>parseInt(l.value,10)-parseInt(a.value,10));for(let l=0;l<o.length;l+=1){const{point:a,value:u}=o[l];t==="window"?i.matchMedia(`(min-width: ${u}px)`).matches&&(r=a):u<=n.clientWidth&&(r=a)}return r||"max"}var RM={setBreakpoint:MM,getBreakpoint:kM};function DM(e,t){const n=[];return e.forEach(r=>{typeof r=="object"?Object.keys(r).forEach(i=>{r[i]&&n.push(t+i)}):typeof r=="string"&&n.push(t+r)}),n}function bM(){const e=this,{classNames:t,params:n,rtl:r,el:i,device:s}=e,o=DM(["initialized",n.direction,{"free-mode":e.params.freeMode&&n.freeMode.enabled},{autoheight:n.autoHeight},{rtl:r},{grid:n.grid&&n.grid.rows>1},{"grid-column":n.grid&&n.grid.rows>1&&n.grid.fill==="column"},{android:s.android},{ios:s.ios},{"css-mode":n.cssMode},{centered:n.cssMode&&n.centeredSlides},{"watch-progress":n.watchSlidesProgress}],n.containerModifierClass);t.push(...o),i.classList.add(...t),e.emitContainerClasses()}function AM(){const e=this,{el:t,classNames:n}=e;t.classList.remove(...n),e.emitContainerClasses()}var OM={addClasses:bM,removeClasses:AM};function IM(){const e=this,{isLocked:t,params:n}=e,{slidesOffsetBefore:r}=n;if(r){const i=e.slides.length-1,s=e.slidesGrid[i]+e.slidesSizesGrid[i]+r*2;e.isLocked=e.size>s}else e.isLocked=e.snapGrid.length===1;n.allowSlideNext===!0&&(e.allowSlideNext=!e.isLocked),n.allowSlidePrev===!0&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}var _M={checkOverflow:IM},Dc={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function VM(e,t){return function(r){r===void 0&&(r={});const i=Object.keys(r)[0],s=r[i];if(typeof s!="object"||s===null){ct(t,r);return}if(e[i]===!0&&(e[i]={enabled:!0}),i==="navigation"&&e[i]&&e[i].enabled&&!e[i].prevEl&&!e[i].nextEl&&(e[i].auto=!0),["pagination","scrollbar"].indexOf(i)>=0&&e[i]&&e[i].enabled&&!e[i].el&&(e[i].auto=!0),!(i in e&&"enabled"in s)){ct(t,r);return}typeof e[i]=="object"&&!("enabled"in e[i])&&(e[i].enabled=!0),e[i]||(e[i]={enabled:!1}),ct(t,r)}}const ru={eventsEmitter:OL,update:HL,translate:XL,transition:eM,slide:lM,loop:fM,grabCursor:mM,events:LM,breakpoints:RM,checkOverflow:_M,classes:OM},iu={};let ef=class Kt{constructor(){let t,n;for(var r=arguments.length,i=new Array(r),s=0;s<r;s++)i[s]=arguments[s];i.length===1&&i[0].constructor&&Object.prototype.toString.call(i[0]).slice(8,-1)==="Object"?n=i[0]:[t,n]=i,n||(n={}),n=ct({},n),t&&!n.el&&(n.el=t);const o=rn();if(n.el&&typeof n.el=="string"&&o.querySelectorAll(n.el).length>1){const c=[];return o.querySelectorAll(n.el).forEach(d=>{const p=ct({},n,{el:d});c.push(new Kt(p))}),c}const l=this;l.__swiper__=!0,l.support=m0(),l.device=kL({userAgent:n.userAgent}),l.browser=DL(),l.eventsListeners={},l.eventsAnyListeners=[],l.modules=[...l.__modules__],n.modules&&Array.isArray(n.modules)&&l.modules.push(...n.modules);const a={};l.modules.forEach(c=>{c({params:n,swiper:l,extendParams:VM(n,a),on:l.on.bind(l),once:l.once.bind(l),off:l.off.bind(l),emit:l.emit.bind(l)})});const u=ct({},Dc,a);return l.params=ct({},u,iu,n),l.originalParams=ct({},l.params),l.passedParams=ct({},n),l.params&&l.params.on&&Object.keys(l.params.on).forEach(c=>{l.on(c,l.params.on[c])}),l.params&&l.params.onAny&&l.onAny(l.params.onAny),Object.assign(l,{enabled:l.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return l.params.direction==="horizontal"},isVertical(){return l.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:l.params.allowSlideNext,allowSlidePrev:l.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:l.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:l.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),l.emit("_swiper"),l.params.init&&l.init(),l}getDirectionLabel(t){return this.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}getSlideIndex(t){const{slidesEl:n,params:r}=this,i=Ut(n,`.${r.slideClass}, swiper-slide`),s=Fs(i[0]);return Fs(t)-s}getSlideIndexByData(t){return this.getSlideIndex(this.slides.filter(n=>n.getAttribute("data-swiper-slide-index")*1===t)[0])}recalcSlides(){const t=this,{slidesEl:n,params:r}=t;t.slides=Ut(n,`.${r.slideClass}, swiper-slide`)}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,n){const r=this;t=Math.min(Math.max(t,0),1);const i=r.minTranslate(),o=(r.maxTranslate()-i)*t+i;r.translateTo(o,typeof n>"u"?0:n),r.updateActiveIndex(),r.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const n=t.el.className.split(" ").filter(r=>r.indexOf("swiper")===0||r.indexOf(t.params.containerModifierClass)===0);t.emit("_containerClasses",n.join(" "))}getSlideClasses(t){const n=this;return n.destroyed?"":t.className.split(" ").filter(r=>r.indexOf("swiper-slide")===0||r.indexOf(n.params.slideClass)===0).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const n=[];t.slides.forEach(r=>{const i=t.getSlideClasses(r);n.push({slideEl:r,classNames:i}),t.emit("_slideClass",r,i)}),t.emit("_slideClasses",n)}slidesPerViewDynamic(t,n){t===void 0&&(t="current"),n===void 0&&(n=!1);const r=this,{params:i,slides:s,slidesGrid:o,slidesSizesGrid:l,size:a,activeIndex:u}=r;let c=1;if(typeof i.slidesPerView=="number")return i.slidesPerView;if(i.centeredSlides){let d=s[u]?s[u].swiperSlideSize:0,p;for(let g=u+1;g<s.length;g+=1)s[g]&&!p&&(d+=s[g].swiperSlideSize,c+=1,d>a&&(p=!0));for(let g=u-1;g>=0;g-=1)s[g]&&!p&&(d+=s[g].swiperSlideSize,c+=1,d>a&&(p=!0))}else if(t==="current")for(let d=u+1;d<s.length;d+=1)(n?o[d]+l[d]-o[u]<a:o[d]-o[u]<a)&&(c+=1);else for(let d=u-1;d>=0;d-=1)o[u]-o[d]<a&&(c+=1);return c}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:n,params:r}=t;r.breakpoints&&t.setBreakpoint(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach(o=>{o.complete&&Ko(t,o)}),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses();function i(){const o=t.rtlTranslate?t.translate*-1:t.translate,l=Math.min(Math.max(o,t.maxTranslate()),t.minTranslate());t.setTranslate(l),t.updateActiveIndex(),t.updateSlidesClasses()}let s;if(r.freeMode&&r.freeMode.enabled&&!r.cssMode)i(),r.autoHeight&&t.updateAutoHeight();else{if((r.slidesPerView==="auto"||r.slidesPerView>1)&&t.isEnd&&!r.centeredSlides){const o=t.virtual&&r.virtual.enabled?t.virtual.slides:t.slides;s=t.slideTo(o.length-1,0,!1,!0)}else s=t.slideTo(t.activeIndex,0,!1,!0);s||i()}r.watchOverflow&&n!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,n){n===void 0&&(n=!0);const r=this,i=r.params.direction;return t||(t=i==="horizontal"?"vertical":"horizontal"),t===i||t!=="horizontal"&&t!=="vertical"||(r.el.classList.remove(`${r.params.containerModifierClass}${i}`),r.el.classList.add(`${r.params.containerModifierClass}${t}`),r.emitContainerClasses(),r.params.direction=t,r.slides.forEach(s=>{t==="vertical"?s.style.width="":s.style.height=""}),r.emit("changeDirection"),n&&r.update()),r}changeLanguageDirection(t){const n=this;n.rtl&&t==="rtl"||!n.rtl&&t==="ltr"||(n.rtl=t==="rtl",n.rtlTranslate=n.params.direction==="horizontal"&&n.rtl,n.rtl?(n.el.classList.add(`${n.params.containerModifierClass}rtl`),n.el.dir="rtl"):(n.el.classList.remove(`${n.params.containerModifierClass}rtl`),n.el.dir="ltr"),n.update())}mount(t){const n=this;if(n.mounted)return!0;let r=t||n.params.el;if(typeof r=="string"&&(r=document.querySelector(r)),!r)return!1;r.swiper=n,r.parentNode&&r.parentNode.host&&r.parentNode.host.nodeName==="SWIPER-CONTAINER"&&(n.isElement=!0);const i=()=>`.${(n.params.wrapperClass||"").trim().split(" ").join(".")}`;let o=(()=>r&&r.shadowRoot&&r.shadowRoot.querySelector?r.shadowRoot.querySelector(i()):Ut(r,i())[0])();return!o&&n.params.createElements&&(o=Vs("div",n.params.wrapperClass),r.append(o),Ut(r,`.${n.params.slideClass}`).forEach(l=>{o.append(l)})),Object.assign(n,{el:r,wrapperEl:o,slidesEl:n.isElement&&!r.parentNode.host.slideSlots?r.parentNode.host:o,hostEl:n.isElement?r.parentNode.host:r,mounted:!0,rtl:r.dir.toLowerCase()==="rtl"||An(r,"direction")==="rtl",rtlTranslate:n.params.direction==="horizontal"&&(r.dir.toLowerCase()==="rtl"||An(r,"direction")==="rtl"),wrongRTL:An(o,"display")==="-webkit-box"}),!0}init(t){const n=this;if(n.initialized||n.mount(t)===!1)return n;n.emit("beforeInit"),n.params.breakpoints&&n.setBreakpoint(),n.addClasses(),n.updateSize(),n.updateSlides(),n.params.watchOverflow&&n.checkOverflow(),n.params.grabCursor&&n.enabled&&n.setGrabCursor(),n.params.loop&&n.virtual&&n.params.virtual.enabled?n.slideTo(n.params.initialSlide+n.virtual.slidesBefore,0,n.params.runCallbacksOnInit,!1,!0):n.slideTo(n.params.initialSlide,0,n.params.runCallbacksOnInit,!1,!0),n.params.loop&&n.loopCreate(),n.attachEvents();const i=[...n.el.querySelectorAll('[loading="lazy"]')];return n.isElement&&i.push(...n.hostEl.querySelectorAll('[loading="lazy"]')),i.forEach(s=>{s.complete?Ko(n,s):s.addEventListener("load",o=>{Ko(n,o.target)})}),Rc(n),n.initialized=!0,Rc(n),n.emit("init"),n.emit("afterInit"),n}destroy(t,n){t===void 0&&(t=!0),n===void 0&&(n=!0);const r=this,{params:i,el:s,wrapperEl:o,slides:l}=r;return typeof r.params>"u"||r.destroyed||(r.emit("beforeDestroy"),r.initialized=!1,r.detachEvents(),i.loop&&r.loopDestroy(),n&&(r.removeClasses(),s.removeAttribute("style"),o.removeAttribute("style"),l&&l.length&&l.forEach(a=>{a.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass),a.removeAttribute("style"),a.removeAttribute("data-swiper-slide-index")})),r.emit("destroy"),Object.keys(r.eventsListeners).forEach(a=>{r.off(a)}),t!==!1&&(r.el.swiper=null,SL(r)),r.destroyed=!0),null}static extendDefaults(t){ct(iu,t)}static get extendedDefaults(){return iu}static get defaults(){return Dc}static installModule(t){Kt.prototype.__modules__||(Kt.prototype.__modules__=[]);const n=Kt.prototype.__modules__;typeof t=="function"&&n.indexOf(t)<0&&n.push(t)}static use(t){return Array.isArray(t)?(t.forEach(n=>Kt.installModule(n)),Kt):(Kt.installModule(t),Kt)}};Object.keys(ru).forEach(e=>{Object.keys(ru[e]).forEach(t=>{ef.prototype[t]=ru[e][t]})});ef.use([bL,AL]);const y0=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function Cr(e){return typeof e=="object"&&e!==null&&e.constructor&&Object.prototype.toString.call(e).slice(8,-1)==="Object"&&!e.__swiper__}function ii(e,t){const n=["__proto__","constructor","prototype"];Object.keys(t).filter(r=>n.indexOf(r)<0).forEach(r=>{typeof e[r]>"u"?e[r]=t[r]:Cr(t[r])&&Cr(e[r])&&Object.keys(t[r]).length>0?t[r].__swiper__?e[r]=t[r]:ii(e[r],t[r]):e[r]=t[r]})}function w0(e){return e===void 0&&(e={}),e.navigation&&typeof e.navigation.nextEl>"u"&&typeof e.navigation.prevEl>"u"}function S0(e){return e===void 0&&(e={}),e.pagination&&typeof e.pagination.el>"u"}function x0(e){return e===void 0&&(e={}),e.scrollbar&&typeof e.scrollbar.el>"u"}function E0(e){e===void 0&&(e="");const t=e.split(" ").map(r=>r.trim()).filter(r=>!!r),n=[];return t.forEach(r=>{n.indexOf(r)<0&&n.push(r)}),n.join(" ")}function FM(e){return e===void 0&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function NM(e){let{swiper:t,slides:n,passedParams:r,changedParams:i,nextEl:s,prevEl:o,scrollbarEl:l,paginationEl:a}=e;const u=i.filter(k=>k!=="children"&&k!=="direction"&&k!=="wrapperClass"),{params:c,pagination:d,navigation:p,scrollbar:g,virtual:v,thumbs:y}=t;let S,m,f,h,w,E,x,C;i.includes("thumbs")&&r.thumbs&&r.thumbs.swiper&&c.thumbs&&!c.thumbs.swiper&&(S=!0),i.includes("controller")&&r.controller&&r.controller.control&&c.controller&&!c.controller.control&&(m=!0),i.includes("pagination")&&r.pagination&&(r.pagination.el||a)&&(c.pagination||c.pagination===!1)&&d&&!d.el&&(f=!0),i.includes("scrollbar")&&r.scrollbar&&(r.scrollbar.el||l)&&(c.scrollbar||c.scrollbar===!1)&&g&&!g.el&&(h=!0),i.includes("navigation")&&r.navigation&&(r.navigation.prevEl||o)&&(r.navigation.nextEl||s)&&(c.navigation||c.navigation===!1)&&p&&!p.prevEl&&!p.nextEl&&(w=!0);const P=k=>{t[k]&&(t[k].destroy(),k==="navigation"?(t.isElement&&(t[k].prevEl.remove(),t[k].nextEl.remove()),c[k].prevEl=void 0,c[k].nextEl=void 0,t[k].prevEl=void 0,t[k].nextEl=void 0):(t.isElement&&t[k].el.remove(),c[k].el=void 0,t[k].el=void 0))};i.includes("loop")&&t.isElement&&(c.loop&&!r.loop?E=!0:!c.loop&&r.loop?x=!0:C=!0),u.forEach(k=>{if(Cr(c[k])&&Cr(r[k]))Object.assign(c[k],r[k]),(k==="navigation"||k==="pagination"||k==="scrollbar")&&"enabled"in r[k]&&!r[k].enabled&&P(k);else{const R=r[k];(R===!0||R===!1)&&(k==="navigation"||k==="pagination"||k==="scrollbar")?R===!1&&P(k):c[k]=r[k]}}),u.includes("controller")&&!m&&t.controller&&t.controller.control&&c.controller&&c.controller.control&&(t.controller.control=c.controller.control),i.includes("children")&&n&&v&&c.virtual.enabled?(v.slides=n,v.update(!0)):i.includes("virtual")&&v&&c.virtual.enabled&&(n&&(v.slides=n),v.update(!0)),i.includes("children")&&n&&c.loop&&(C=!0),S&&y.init()&&y.update(!0),m&&(t.controller.control=c.controller.control),f&&(t.isElement&&(!a||typeof a=="string")&&(a=document.createElement("div"),a.classList.add("swiper-pagination"),a.part.add("pagination"),t.el.appendChild(a)),a&&(c.pagination.el=a),d.init(),d.render(),d.update()),h&&(t.isElement&&(!l||typeof l=="string")&&(l=document.createElement("div"),l.classList.add("swiper-scrollbar"),l.part.add("scrollbar"),t.el.appendChild(l)),l&&(c.scrollbar.el=l),g.init(),g.updateSize(),g.setTranslate()),w&&(t.isElement&&((!s||typeof s=="string")&&(s=document.createElement("div"),s.classList.add("swiper-button-next"),s.innerHTML=t.hostEl.constructor.nextButtonSvg,s.part.add("button-next"),t.el.appendChild(s)),(!o||typeof o=="string")&&(o=document.createElement("div"),o.classList.add("swiper-button-prev"),o.innerHTML=t.hostEl.constructor.prevButtonSvg,o.part.add("button-prev"),t.el.appendChild(o))),s&&(c.navigation.nextEl=s),o&&(c.navigation.prevEl=o),p.init(),p.update()),i.includes("allowSlideNext")&&(t.allowSlideNext=r.allowSlideNext),i.includes("allowSlidePrev")&&(t.allowSlidePrev=r.allowSlidePrev),i.includes("direction")&&t.changeDirection(r.direction,!1),(E||C)&&t.loopDestroy(),(x||C)&&t.loopCreate(),t.update()}function zM(e,t){e===void 0&&(e={}),t===void 0&&(t=!0);const n={on:{}},r={},i={};ii(n,Dc),n._emitClasses=!0,n.init=!1;const s={},o=y0.map(a=>a.replace(/_/,"")),l=Object.assign({},e);return Object.keys(l).forEach(a=>{typeof e[a]>"u"||(o.indexOf(a)>=0?Cr(e[a])?(n[a]={},i[a]={},ii(n[a],e[a]),ii(i[a],e[a])):(n[a]=e[a],i[a]=e[a]):a.search(/on[A-Z]/)===0&&typeof e[a]=="function"?t?r[`${a[2].toLowerCase()}${a.substr(3)}`]=e[a]:n.on[`${a[2].toLowerCase()}${a.substr(3)}`]=e[a]:s[a]=e[a])}),["navigation","pagination","scrollbar"].forEach(a=>{n[a]===!0&&(n[a]={}),n[a]===!1&&delete n[a]}),{params:n,passedParams:i,rest:s,events:r}}function BM(e,t){let{el:n,nextEl:r,prevEl:i,paginationEl:s,scrollbarEl:o,swiper:l}=e;w0(t)&&r&&i&&(l.params.navigation.nextEl=r,l.originalParams.navigation.nextEl=r,l.params.navigation.prevEl=i,l.originalParams.navigation.prevEl=i),S0(t)&&s&&(l.params.pagination.el=s,l.originalParams.pagination.el=s),x0(t)&&o&&(l.params.scrollbar.el=o,l.originalParams.scrollbar.el=o),l.init(n)}function jM(e,t,n,r,i){const s=[];if(!t)return s;const o=a=>{s.indexOf(a)<0&&s.push(a)};if(n&&r){const a=r.map(i),u=n.map(i);a.join("")!==u.join("")&&o("children"),r.length!==n.length&&o("children")}return y0.filter(a=>a[0]==="_").map(a=>a.replace(/_/,"")).forEach(a=>{if(a in e&&a in t)if(Cr(e[a])&&Cr(t[a])){const u=Object.keys(e[a]),c=Object.keys(t[a]);u.length!==c.length?o(a):(u.forEach(d=>{e[a][d]!==t[a][d]&&o(a)}),c.forEach(d=>{e[a][d]!==t[a][d]&&o(a)}))}else e[a]!==t[a]&&o(a)}),s}const UM=e=>{!e||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())};function Ra(){return Ra=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Ra.apply(this,arguments)}function T0(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function C0(e){const t=[];return xe.Children.toArray(e).forEach(n=>{T0(n)?t.push(n):n.props&&n.props.children&&C0(n.props.children).forEach(r=>t.push(r))}),t}function $M(e){const t=[],n={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return xe.Children.toArray(e).forEach(r=>{if(T0(r))t.push(r);else if(r.props&&r.props.slot&&n[r.props.slot])n[r.props.slot].push(r);else if(r.props&&r.props.children){const i=C0(r.props.children);i.length>0?i.forEach(s=>t.push(s)):n["container-end"].push(r)}else n["container-end"].push(r)}),{slides:t,slots:n}}function HM(e,t,n){if(!n)return null;const r=c=>{let d=c;return c<0?d=t.length+c:d>=t.length&&(d=d-t.length),d},i=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${n.offset}px`}:{top:`${n.offset}px`},{from:s,to:o}=n,l=e.params.loop?-t.length:0,a=e.params.loop?t.length*2:t.length,u=[];for(let c=l;c<a;c+=1)c>=s&&c<=o&&u.push(t[r(c)]);return u.map((c,d)=>xe.cloneElement(c,{swiper:e,style:i,key:`slide-${d}`}))}function fs(e,t){return typeof window>"u"?T.useEffect(e,t):T.useLayoutEffect(e,t)}const Zh=T.createContext(null),P0=T.createContext(null),WM=()=>T.useContext(P0),GM=T.forwardRef(function(e,t){let{className:n,tag:r="div",wrapperTag:i="div",children:s,onSwiper:o,...l}=e===void 0?{}:e,a=!1;const[u,c]=T.useState("swiper"),[d,p]=T.useState(null),[g,v]=T.useState(!1),y=T.useRef(!1),S=T.useRef(null),m=T.useRef(null),f=T.useRef(null),h=T.useRef(null),w=T.useRef(null),E=T.useRef(null),x=T.useRef(null),C=T.useRef(null),{params:P,passedParams:k,rest:R,events:O}=zM(l),{slides:N,slots:_}=$M(s),M=()=>{v(!g)};Object.assign(P.on,{_containerClasses(F,z){c(z)}});const b=()=>{Object.assign(P.on,O),a=!0;const F={...P};if(delete F.wrapperClass,m.current=new ef(F),m.current.virtual&&m.current.params.virtual.enabled){m.current.virtual.slides=N;const z={cache:!1,slides:N,renderExternal:p,renderExternalUpdate:!1};ii(m.current.params.virtual,z),ii(m.current.originalParams.virtual,z)}};S.current||b(),m.current&&m.current.on("_beforeBreakpoint",M);const U=()=>{a||!O||!m.current||Object.keys(O).forEach(F=>{m.current.on(F,O[F])})},Y=()=>{!O||!m.current||Object.keys(O).forEach(F=>{m.current.off(F,O[F])})};T.useEffect(()=>()=>{m.current&&m.current.off("_beforeBreakpoint",M)}),T.useEffect(()=>{!y.current&&m.current&&(m.current.emitSlidesClasses(),y.current=!0)}),fs(()=>{if(t&&(t.current=S.current),!!S.current)return m.current.destroyed&&b(),BM({el:S.current,nextEl:w.current,prevEl:E.current,paginationEl:x.current,scrollbarEl:C.current,swiper:m.current},P),o&&o(m.current),()=>{m.current&&!m.current.destroyed&&m.current.destroy(!0,!1)}},[]),fs(()=>{U();const F=jM(k,f.current,N,h.current,z=>z.key);return f.current=k,h.current=N,F.length&&m.current&&!m.current.destroyed&&NM({swiper:m.current,slides:N,passedParams:k,changedParams:F,nextEl:w.current,prevEl:E.current,scrollbarEl:C.current,paginationEl:x.current}),()=>{Y()}}),fs(()=>{UM(m.current)},[d]);function I(){return P.virtual?HM(m.current,N,d):N.map((F,z)=>xe.cloneElement(F,{swiper:m.current,swiperSlideIndex:z}))}return xe.createElement(r,Ra({ref:S,className:E0(`${u}${n?` ${n}`:""}`)},R),xe.createElement(P0.Provider,{value:m.current},_["container-start"],xe.createElement(i,{className:FM(P.wrapperClass)},_["wrapper-start"],I(),_["wrapper-end"]),w0(P)&&xe.createElement(xe.Fragment,null,xe.createElement("div",{ref:E,className:"swiper-button-prev"}),xe.createElement("div",{ref:w,className:"swiper-button-next"})),x0(P)&&xe.createElement("div",{ref:C,className:"swiper-scrollbar"}),S0(P)&&xe.createElement("div",{ref:x,className:"swiper-pagination"}),_["container-end"]))});GM.displayName="Swiper";const KM=T.forwardRef(function(e,t){let{tag:n="div",children:r,className:i="",swiper:s,zoom:o,lazy:l,virtualIndex:a,swiperSlideIndex:u,...c}=e===void 0?{}:e;const d=T.useRef(null),[p,g]=T.useState("swiper-slide"),[v,y]=T.useState(!1);function S(w,E,x){E===d.current&&g(x)}fs(()=>{if(typeof u<"u"&&(d.current.swiperSlideIndex=u),t&&(t.current=d.current),!(!d.current||!s)){if(s.destroyed){p!=="swiper-slide"&&g("swiper-slide");return}return s.on("_slideClass",S),()=>{s&&s.off("_slideClass",S)}}}),fs(()=>{s&&d.current&&!s.destroyed&&g(s.getSlideClasses(d.current))},[s]);const m={isActive:p.indexOf("swiper-slide-active")>=0,isVisible:p.indexOf("swiper-slide-visible")>=0,isPrev:p.indexOf("swiper-slide-prev")>=0,isNext:p.indexOf("swiper-slide-next")>=0},f=()=>typeof r=="function"?r(m):r,h=()=>{y(!0)};return xe.createElement(n,Ra({ref:d,className:E0(`${p}${i?` ${i}`:""}`),"data-swiper-slide-index":a,onLoad:h},c),o&&xe.createElement(Zh.Provider,{value:m},xe.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":typeof o=="number"?o:void 0},f(),l&&!v&&xe.createElement("div",{className:"swiper-lazy-preloader"}))),!o&&xe.createElement(Zh.Provider,{value:m},f(),l&&!v&&xe.createElement("div",{className:"swiper-lazy-preloader"})))});KM.displayName="SwiperSlide";function L0(e,t,n,r){return e.params.createElements&&Object.keys(r).forEach(i=>{if(!n[i]&&n.auto===!0){let s=Ut(e.el,`.${r[i]}`)[0];s||(s=Vs("div",r[i]),s.className=r[i],e.el.append(s)),n[i]=s,t[i]=s}}),n}function Ek(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;n({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const s=y=>(Array.isArray(y)?y:[y]).filter(S=>!!S);function o(y){let S;return y&&typeof y=="string"&&t.isElement&&(S=t.el.querySelector(y),S)?S:(y&&(typeof y=="string"&&(S=[...document.querySelectorAll(y)]),t.params.uniqueNavElements&&typeof y=="string"&&S.length>1&&t.el.querySelectorAll(y).length===1&&(S=t.el.querySelector(y))),y&&!S?y:S)}function l(y,S){const m=t.params.navigation;y=s(y),y.forEach(f=>{f&&(f.classList[S?"add":"remove"](...m.disabledClass.split(" ")),f.tagName==="BUTTON"&&(f.disabled=S),t.params.watchOverflow&&t.enabled&&f.classList[t.isLocked?"add":"remove"](m.lockClass))})}function a(){const{nextEl:y,prevEl:S}=t.navigation;if(t.params.loop){l(S,!1),l(y,!1);return}l(S,t.isBeginning&&!t.params.rewind),l(y,t.isEnd&&!t.params.rewind)}function u(y){y.preventDefault(),!(t.isBeginning&&!t.params.loop&&!t.params.rewind)&&(t.slidePrev(),i("navigationPrev"))}function c(y){y.preventDefault(),!(t.isEnd&&!t.params.loop&&!t.params.rewind)&&(t.slideNext(),i("navigationNext"))}function d(){const y=t.params.navigation;if(t.params.navigation=L0(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(y.nextEl||y.prevEl))return;let S=o(y.nextEl),m=o(y.prevEl);Object.assign(t.navigation,{nextEl:S,prevEl:m}),S=s(S),m=s(m);const f=(h,w)=>{h&&h.addEventListener("click",w==="next"?c:u),!t.enabled&&h&&h.classList.add(...y.lockClass.split(" "))};S.forEach(h=>f(h,"next")),m.forEach(h=>f(h,"prev"))}function p(){let{nextEl:y,prevEl:S}=t.navigation;y=s(y),S=s(S);const m=(f,h)=>{f.removeEventListener("click",h==="next"?c:u),f.classList.remove(...t.params.navigation.disabledClass.split(" "))};y.forEach(f=>m(f,"next")),S.forEach(f=>m(f,"prev"))}r("init",()=>{t.params.navigation.enabled===!1?v():(d(),a())}),r("toEdge fromEdge lock unlock",()=>{a()}),r("destroy",()=>{p()}),r("enable disable",()=>{let{nextEl:y,prevEl:S}=t.navigation;if(y=s(y),S=s(S),t.enabled){a();return}[...y,...S].filter(m=>!!m).forEach(m=>m.classList.add(t.params.navigation.lockClass))}),r("click",(y,S)=>{let{nextEl:m,prevEl:f}=t.navigation;m=s(m),f=s(f);const h=S.target;if(t.params.navigation.hideOnClick&&!f.includes(h)&&!m.includes(h)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===h||t.pagination.el.contains(h)))return;let w;m.length?w=m[0].classList.contains(t.params.navigation.hiddenClass):f.length&&(w=f[0].classList.contains(t.params.navigation.hiddenClass)),i(w===!0?"navigationShow":"navigationHide"),[...m,...f].filter(E=>!!E).forEach(E=>E.classList.toggle(t.params.navigation.hiddenClass))}});const g=()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),d(),a()},v=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),p()};Object.assign(t.navigation,{enable:g,disable:v,update:a,init:d,destroy:p})}function Ln(e){return e===void 0&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function Tk(e){let{swiper:t,extendParams:n,on:r,emit:i}=e;const s="swiper-pagination";n({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:f=>f,formatFractionTotal:f=>f,bulletClass:`${s}-bullet`,bulletActiveClass:`${s}-bullet-active`,modifierClass:`${s}-`,currentClass:`${s}-current`,totalClass:`${s}-total`,hiddenClass:`${s}-hidden`,progressbarFillClass:`${s}-progressbar-fill`,progressbarOppositeClass:`${s}-progressbar-opposite`,clickableClass:`${s}-clickable`,lockClass:`${s}-lock`,horizontalClass:`${s}-horizontal`,verticalClass:`${s}-vertical`,paginationDisabledClass:`${s}-disabled`}}),t.pagination={el:null,bullets:[]};let o,l=0;const a=f=>(Array.isArray(f)?f:[f]).filter(h=>!!h);function u(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&t.pagination.el.length===0}function c(f,h){const{bulletActiveClass:w}=t.params.pagination;f&&(f=f[`${h==="prev"?"previous":"next"}ElementSibling`],f&&(f.classList.add(`${w}-${h}`),f=f[`${h==="prev"?"previous":"next"}ElementSibling`],f&&f.classList.add(`${w}-${h}-${h}`)))}function d(f){const h=f.target.closest(Ln(t.params.pagination.bulletClass));if(!h)return;f.preventDefault();const w=Fs(h)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===w)return;t.slideToLoop(w)}else t.slideTo(w)}function p(){const f=t.rtl,h=t.params.pagination;if(u())return;let w=t.pagination.el;w=a(w);let E,x;const C=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,P=t.params.loop?Math.ceil(C/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(x=t.previousRealIndex||0,E=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):typeof t.snapIndex<"u"?(E=t.snapIndex,x=t.previousSnapIndex):(x=t.previousIndex||0,E=t.activeIndex||0),h.type==="bullets"&&t.pagination.bullets&&t.pagination.bullets.length>0){const k=t.pagination.bullets;let R,O,N;if(h.dynamicBullets&&(o=kc(k[0],t.isHorizontal()?"width":"height",!0),w.forEach(_=>{_.style[t.isHorizontal()?"width":"height"]=`${o*(h.dynamicMainBullets+4)}px`}),h.dynamicMainBullets>1&&x!==void 0&&(l+=E-(x||0),l>h.dynamicMainBullets-1?l=h.dynamicMainBullets-1:l<0&&(l=0)),R=Math.max(E-l,0),O=R+(Math.min(k.length,h.dynamicMainBullets)-1),N=(O+R)/2),k.forEach(_=>{const M=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(b=>`${h.bulletActiveClass}${b}`)].map(b=>typeof b=="string"&&b.includes(" ")?b.split(" "):b).flat();_.classList.remove(...M)}),w.length>1)k.forEach(_=>{const M=Fs(_);M===E?_.classList.add(...h.bulletActiveClass.split(" ")):t.isElement&&_.setAttribute("part","bullet"),h.dynamicBullets&&(M>=R&&M<=O&&_.classList.add(...`${h.bulletActiveClass}-main`.split(" ")),M===R&&c(_,"prev"),M===O&&c(_,"next"))});else{const _=k[E];if(_&&_.classList.add(...h.bulletActiveClass.split(" ")),t.isElement&&k.forEach((M,b)=>{M.setAttribute("part",b===E?"bullet-active":"bullet")}),h.dynamicBullets){const M=k[R],b=k[O];for(let U=R;U<=O;U+=1)k[U]&&k[U].classList.add(...`${h.bulletActiveClass}-main`.split(" "));c(M,"prev"),c(b,"next")}}if(h.dynamicBullets){const _=Math.min(k.length,h.dynamicMainBullets+4),M=(o*_-o)/2-N*o,b=f?"right":"left";k.forEach(U=>{U.style[t.isHorizontal()?b:"top"]=`${M}px`})}}w.forEach((k,R)=>{if(h.type==="fraction"&&(k.querySelectorAll(Ln(h.currentClass)).forEach(O=>{O.textContent=h.formatFractionCurrent(E+1)}),k.querySelectorAll(Ln(h.totalClass)).forEach(O=>{O.textContent=h.formatFractionTotal(P)})),h.type==="progressbar"){let O;h.progressbarOpposite?O=t.isHorizontal()?"vertical":"horizontal":O=t.isHorizontal()?"horizontal":"vertical";const N=(E+1)/P;let _=1,M=1;O==="horizontal"?_=N:M=N,k.querySelectorAll(Ln(h.progressbarFillClass)).forEach(b=>{b.style.transform=`translate3d(0,0,0) scaleX(${_}) scaleY(${M})`,b.style.transitionDuration=`${t.params.speed}ms`})}h.type==="custom"&&h.renderCustom?(k.innerHTML=h.renderCustom(t,E+1,P),R===0&&i("paginationRender",k)):(R===0&&i("paginationRender",k),i("paginationUpdate",k)),t.params.watchOverflow&&t.enabled&&k.classList[t.isLocked?"add":"remove"](h.lockClass)})}function g(){const f=t.params.pagination;if(u())return;const h=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let w=t.pagination.el;w=a(w);let E="";if(f.type==="bullets"){let x=t.params.loop?Math.ceil(h/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&x>h&&(x=h);for(let C=0;C<x;C+=1)f.renderBullet?E+=f.renderBullet.call(t,C,f.bulletClass):E+=`<${f.bulletElement} ${t.isElement?'part="bullet"':""} class="${f.bulletClass}"></${f.bulletElement}>`}f.type==="fraction"&&(f.renderFraction?E=f.renderFraction.call(t,f.currentClass,f.totalClass):E=`<span class="${f.currentClass}"></span> / <span class="${f.totalClass}"></span>`),f.type==="progressbar"&&(f.renderProgressbar?E=f.renderProgressbar.call(t,f.progressbarFillClass):E=`<span class="${f.progressbarFillClass}"></span>`),t.pagination.bullets=[],w.forEach(x=>{f.type!=="custom"&&(x.innerHTML=E||""),f.type==="bullets"&&t.pagination.bullets.push(...x.querySelectorAll(Ln(f.bulletClass)))}),f.type!=="custom"&&i("paginationRender",w[0])}function v(){t.params.pagination=L0(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const f=t.params.pagination;if(!f.el)return;let h;typeof f.el=="string"&&t.isElement&&(h=t.el.querySelector(f.el)),!h&&typeof f.el=="string"&&(h=[...document.querySelectorAll(f.el)]),h||(h=f.el),!(!h||h.length===0)&&(t.params.uniqueNavElements&&typeof f.el=="string"&&Array.isArray(h)&&h.length>1&&(h=[...t.el.querySelectorAll(f.el)],h.length>1&&(h=h.filter(w=>h0(w,".swiper")[0]===t.el)[0])),Array.isArray(h)&&h.length===1&&(h=h[0]),Object.assign(t.pagination,{el:h}),h=a(h),h.forEach(w=>{f.type==="bullets"&&f.clickable&&w.classList.add(...(f.clickableClass||"").split(" ")),w.classList.add(f.modifierClass+f.type),w.classList.add(t.isHorizontal()?f.horizontalClass:f.verticalClass),f.type==="bullets"&&f.dynamicBullets&&(w.classList.add(`${f.modifierClass}${f.type}-dynamic`),l=0,f.dynamicMainBullets<1&&(f.dynamicMainBullets=1)),f.type==="progressbar"&&f.progressbarOpposite&&w.classList.add(f.progressbarOppositeClass),f.clickable&&w.addEventListener("click",d),t.enabled||w.classList.add(f.lockClass)}))}function y(){const f=t.params.pagination;if(u())return;let h=t.pagination.el;h&&(h=a(h),h.forEach(w=>{w.classList.remove(f.hiddenClass),w.classList.remove(f.modifierClass+f.type),w.classList.remove(t.isHorizontal()?f.horizontalClass:f.verticalClass),f.clickable&&(w.classList.remove(...(f.clickableClass||"").split(" ")),w.removeEventListener("click",d))})),t.pagination.bullets&&t.pagination.bullets.forEach(w=>w.classList.remove(...f.bulletActiveClass.split(" ")))}r("changeDirection",()=>{if(!t.pagination||!t.pagination.el)return;const f=t.params.pagination;let{el:h}=t.pagination;h=a(h),h.forEach(w=>{w.classList.remove(f.horizontalClass,f.verticalClass),w.classList.add(t.isHorizontal()?f.horizontalClass:f.verticalClass)})}),r("init",()=>{t.params.pagination.enabled===!1?m():(v(),g(),p())}),r("activeIndexChange",()=>{typeof t.snapIndex>"u"&&p()}),r("snapIndexChange",()=>{p()}),r("snapGridLengthChange",()=>{g(),p()}),r("destroy",()=>{y()}),r("enable disable",()=>{let{el:f}=t.pagination;f&&(f=a(f),f.forEach(h=>h.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass)))}),r("lock unlock",()=>{p()}),r("click",(f,h)=>{const w=h.target,E=a(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&E&&E.length>0&&!w.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&w===t.navigation.nextEl||t.navigation.prevEl&&w===t.navigation.prevEl))return;const x=E[0].classList.contains(t.params.pagination.hiddenClass);i(x===!0?"paginationShow":"paginationHide"),E.forEach(C=>C.classList.toggle(t.params.pagination.hiddenClass))}});const S=()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:f}=t.pagination;f&&(f=a(f),f.forEach(h=>h.classList.remove(t.params.pagination.paginationDisabledClass))),v(),g(),p()},m=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:f}=t.pagination;f&&(f=a(f),f.forEach(h=>h.classList.add(t.params.pagination.paginationDisabledClass))),y()};Object.assign(t.pagination,{enable:S,disable:m,render:g,update:p,init:v,destroy:y})}function Ck(e){let{swiper:t,extendParams:n,on:r}=e;n({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),t.a11y={clicked:!1};let i=null;function s(M){const b=i;b.length!==0&&(b.innerHTML="",b.innerHTML=M)}const o=M=>(Array.isArray(M)?M:[M]).filter(b=>!!b);function l(M){M===void 0&&(M=16);const b=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(M).replace(/x/g,b)}function a(M){M=o(M),M.forEach(b=>{b.setAttribute("tabIndex","0")})}function u(M){M=o(M),M.forEach(b=>{b.setAttribute("tabIndex","-1")})}function c(M,b){M=o(M),M.forEach(U=>{U.setAttribute("role",b)})}function d(M,b){M=o(M),M.forEach(U=>{U.setAttribute("aria-roledescription",b)})}function p(M,b){M=o(M),M.forEach(U=>{U.setAttribute("aria-controls",b)})}function g(M,b){M=o(M),M.forEach(U=>{U.setAttribute("aria-label",b)})}function v(M,b){M=o(M),M.forEach(U=>{U.setAttribute("id",b)})}function y(M,b){M=o(M),M.forEach(U=>{U.setAttribute("aria-live",b)})}function S(M){M=o(M),M.forEach(b=>{b.setAttribute("aria-disabled",!0)})}function m(M){M=o(M),M.forEach(b=>{b.setAttribute("aria-disabled",!1)})}function f(M){if(M.keyCode!==13&&M.keyCode!==32)return;const b=t.params.a11y,U=M.target;t.pagination&&t.pagination.el&&(U===t.pagination.el||t.pagination.el.contains(M.target))&&!M.target.matches(Ln(t.params.pagination.bulletClass))||(t.navigation&&t.navigation.nextEl&&U===t.navigation.nextEl&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?s(b.lastSlideMessage):s(b.nextSlideMessage)),t.navigation&&t.navigation.prevEl&&U===t.navigation.prevEl&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?s(b.firstSlideMessage):s(b.prevSlideMessage)),t.pagination&&U.matches(Ln(t.params.pagination.bulletClass))&&U.click())}function h(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:M,prevEl:b}=t.navigation;b&&(t.isBeginning?(S(b),u(b)):(m(b),a(b))),M&&(t.isEnd?(S(M),u(M)):(m(M),a(M)))}function w(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function E(){return w()&&t.params.pagination.clickable}function x(){const M=t.params.a11y;w()&&t.pagination.bullets.forEach(b=>{t.params.pagination.clickable&&(a(b),t.params.pagination.renderBullet||(c(b,"button"),g(b,M.paginationBulletMessage.replace(/\{\{index\}\}/,Fs(b)+1)))),b.matches(Ln(t.params.pagination.bulletActiveClass))?b.setAttribute("aria-current","true"):b.removeAttribute("aria-current")})}const C=(M,b,U)=>{a(M),M.tagName!=="BUTTON"&&(c(M,"button"),M.addEventListener("keydown",f)),g(M,U),p(M,b)},P=()=>{t.a11y.clicked=!0},k=()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{t.destroyed||(t.a11y.clicked=!1)})})},R=M=>{if(t.a11y.clicked)return;const b=M.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!b||!t.slides.includes(b))return;const U=t.slides.indexOf(b)===t.activeIndex,Y=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(b);U||Y||M.sourceCapabilities&&M.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,t.slideTo(t.slides.indexOf(b),0))},O=()=>{const M=t.params.a11y;M.itemRoleDescriptionMessage&&d(t.slides,M.itemRoleDescriptionMessage),M.slideRole&&c(t.slides,M.slideRole);const b=t.slides.length;M.slideLabelMessage&&t.slides.forEach((U,Y)=>{const I=t.params.loop?parseInt(U.getAttribute("data-swiper-slide-index"),10):Y,F=M.slideLabelMessage.replace(/\{\{index\}\}/,I+1).replace(/\{\{slidesLength\}\}/,b);g(U,F)})},N=()=>{const M=t.params.a11y;t.el.append(i);const b=t.el;M.containerRoleDescriptionMessage&&d(b,M.containerRoleDescriptionMessage),M.containerMessage&&g(b,M.containerMessage);const U=t.wrapperEl,Y=M.id||U.getAttribute("id")||`swiper-wrapper-${l(16)}`,I=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";v(U,Y),y(U,I),O();let{nextEl:F,prevEl:z}=t.navigation?t.navigation:{};F=o(F),z=o(z),F&&F.forEach($=>C($,Y,M.nextSlideMessage)),z&&z.forEach($=>C($,Y,M.prevSlideMessage)),E()&&o(t.pagination.el).forEach(J=>{J.addEventListener("keydown",f)}),t.el.addEventListener("focus",R,!0),t.el.addEventListener("pointerdown",P,!0),t.el.addEventListener("pointerup",k,!0)};function _(){i&&i.remove();let{nextEl:M,prevEl:b}=t.navigation?t.navigation:{};M=o(M),b=o(b),M&&M.forEach(U=>U.removeEventListener("keydown",f)),b&&b.forEach(U=>U.removeEventListener("keydown",f)),E()&&o(t.pagination.el).forEach(Y=>{Y.removeEventListener("keydown",f)}),t.el.removeEventListener("focus",R,!0),t.el.removeEventListener("pointerdown",P,!0),t.el.removeEventListener("pointerup",k,!0)}r("beforeInit",()=>{i=Vs("span",t.params.a11y.notificationClass),i.setAttribute("aria-live","assertive"),i.setAttribute("aria-atomic","true")}),r("afterInit",()=>{t.params.a11y.enabled&&N()}),r("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{t.params.a11y.enabled&&O()}),r("fromEdge toEdge afterInit lock unlock",()=>{t.params.a11y.enabled&&h()}),r("paginationUpdate",()=>{t.params.a11y.enabled&&x()}),r("destroy",()=>{t.params.a11y.enabled&&_()})}function Pk(e){let{swiper:t,extendParams:n,on:r,emit:i,params:s}=e;t.autoplay={running:!1,paused:!1,timeLeft:0},n({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let o,l,a=s&&s.autoplay?s.autoplay.delay:3e3,u=s&&s.autoplay?s.autoplay.delay:3e3,c,d=new Date().getTime(),p,g,v,y,S,m,f;function h(I){!t||t.destroyed||!t.wrapperEl||I.target===t.wrapperEl&&(t.wrapperEl.removeEventListener("transitionend",h),!f&&R())}const w=()=>{if(t.destroyed||!t.autoplay.running)return;t.autoplay.paused?p=!0:p&&(u=c,p=!1);const I=t.autoplay.paused?c:d+u-new Date().getTime();t.autoplay.timeLeft=I,i("autoplayTimeLeft",I,I/a),l=requestAnimationFrame(()=>{w()})},E=()=>{let I;return t.virtual&&t.params.virtual.enabled?I=t.slides.filter(z=>z.classList.contains("swiper-slide-active"))[0]:I=t.slides[t.activeIndex],I?parseInt(I.getAttribute("data-swiper-autoplay"),10):void 0},x=I=>{if(t.destroyed||!t.autoplay.running)return;cancelAnimationFrame(l),w();let F=typeof I>"u"?t.params.autoplay.delay:I;a=t.params.autoplay.delay,u=t.params.autoplay.delay;const z=E();!Number.isNaN(z)&&z>0&&typeof I>"u"&&(F=z,a=z,u=z),c=F;const $=t.params.speed,J=()=>{!t||t.destroyed||(t.params.autoplay.reverseDirection?!t.isBeginning||t.params.loop||t.params.rewind?(t.slidePrev($,!0,!0),i("autoplay")):t.params.autoplay.stopOnLastSlide||(t.slideTo(t.slides.length-1,$,!0,!0),i("autoplay")):!t.isEnd||t.params.loop||t.params.rewind?(t.slideNext($,!0,!0),i("autoplay")):t.params.autoplay.stopOnLastSlide||(t.slideTo(0,$,!0,!0),i("autoplay")),t.params.cssMode&&(d=new Date().getTime(),requestAnimationFrame(()=>{x()})))};return F>0?(clearTimeout(o),o=setTimeout(()=>{J()},F)):requestAnimationFrame(()=>{J()}),F},C=()=>{d=new Date().getTime(),t.autoplay.running=!0,x(),i("autoplayStart")},P=()=>{t.autoplay.running=!1,clearTimeout(o),cancelAnimationFrame(l),i("autoplayStop")},k=(I,F)=>{if(t.destroyed||!t.autoplay.running)return;clearTimeout(o),I||(m=!0);const z=()=>{i("autoplayPause"),t.params.autoplay.waitForTransition?t.wrapperEl.addEventListener("transitionend",h):R()};if(t.autoplay.paused=!0,F){S&&(c=t.params.autoplay.delay),S=!1,z();return}c=(c||t.params.autoplay.delay)-(new Date().getTime()-d),!(t.isEnd&&c<0&&!t.params.loop)&&(c<0&&(c=0),z())},R=()=>{t.isEnd&&c<0&&!t.params.loop||t.destroyed||!t.autoplay.running||(d=new Date().getTime(),m?(m=!1,x(c)):x(),t.autoplay.paused=!1,i("autoplayResume"))},O=()=>{if(t.destroyed||!t.autoplay.running)return;const I=rn();I.visibilityState==="hidden"&&(m=!0,k(!0)),I.visibilityState==="visible"&&R()},N=I=>{I.pointerType==="mouse"&&(m=!0,f=!0,!(t.animating||t.autoplay.paused)&&k(!0))},_=I=>{I.pointerType==="mouse"&&(f=!1,t.autoplay.paused&&R())},M=()=>{t.params.autoplay.pauseOnMouseEnter&&(t.el.addEventListener("pointerenter",N),t.el.addEventListener("pointerleave",_))},b=()=>{t.el.removeEventListener("pointerenter",N),t.el.removeEventListener("pointerleave",_)},U=()=>{rn().addEventListener("visibilitychange",O)},Y=()=>{rn().removeEventListener("visibilitychange",O)};r("init",()=>{t.params.autoplay.enabled&&(M(),U(),C())}),r("destroy",()=>{b(),Y(),t.autoplay.running&&P()}),r("_freeModeStaticRelease",()=>{(v||m)&&R()}),r("_freeModeNoMomentumRelease",()=>{t.params.autoplay.disableOnInteraction?P():k(!0,!0)}),r("beforeTransitionStart",(I,F,z)=>{t.destroyed||!t.autoplay.running||(z||!t.params.autoplay.disableOnInteraction?k(!0,!0):P())}),r("sliderFirstMove",()=>{if(!(t.destroyed||!t.autoplay.running)){if(t.params.autoplay.disableOnInteraction){P();return}g=!0,v=!1,m=!1,y=setTimeout(()=>{m=!0,v=!0,k(!0)},200)}}),r("touchEnd",()=>{if(!(t.destroyed||!t.autoplay.running||!g)){if(clearTimeout(y),clearTimeout(o),t.params.autoplay.disableOnInteraction){v=!1,g=!1;return}v&&t.params.cssMode&&R(),v=!1,g=!1}}),r("slideChange",()=>{t.destroyed||!t.autoplay.running||(S=!0)}),Object.assign(t.autoplay,{start:C,stop:P,pause:k,resume:R})}var bc=new Map,Ao=new WeakMap,Jh=0,QM=void 0;function YM(e){return e?(Ao.has(e)||(Jh+=1,Ao.set(e,Jh.toString())),Ao.get(e)):"0"}function XM(e){return Object.keys(e).sort().filter(t=>e[t]!==void 0).map(t=>`${t}_${t==="root"?YM(e.root):e[t]}`).toString()}function qM(e){let t=XM(e),n=bc.get(t);if(!n){const r=new Map;let i;const s=new IntersectionObserver(o=>{o.forEach(l=>{var a;const u=l.isIntersecting&&i.some(c=>l.intersectionRatio>=c);e.trackVisibility&&typeof l.isVisible>"u"&&(l.isVisible=u),(a=r.get(l.target))==null||a.forEach(c=>{c(u,l)})})},e);i=s.thresholds||(Array.isArray(e.threshold)?e.threshold:[e.threshold||0]),n={id:t,observer:s,elements:r},bc.set(t,n)}return n}function ZM(e,t,n={},r=QM){if(typeof window.IntersectionObserver>"u"&&r!==void 0){const a=e.getBoundingClientRect();return t(r,{isIntersecting:r,target:e,intersectionRatio:typeof n.threshold=="number"?n.threshold:0,time:0,boundingClientRect:a,intersectionRect:a,rootBounds:a}),()=>{}}const{id:i,observer:s,elements:o}=qM(n);let l=o.get(e)||[];return o.has(e)||o.set(e,l),l.push(t),s.observe(e),function(){l.splice(l.indexOf(t),1),l.length===0&&(o.delete(e),s.unobserve(e)),o.size===0&&(s.disconnect(),bc.delete(i))}}function Lk({threshold:e,delay:t,trackVisibility:n,rootMargin:r,root:i,triggerOnce:s,skip:o,initialInView:l,fallbackInView:a,onChange:u}={}){var c;const[d,p]=T.useState(null),g=T.useRef(),[v,y]=T.useState({inView:!!l,entry:void 0});g.current=u,T.useEffect(()=>{if(o||!d)return;let h;return h=ZM(d,(w,E)=>{y({inView:w,entry:E}),g.current&&g.current(w,E),E.isIntersecting&&s&&h&&(h(),h=void 0)},{root:i,rootMargin:r,threshold:e,trackVisibility:n,delay:t},a),()=>{h&&h()}},[Array.isArray(e)?e.toString():e,d,i,r,s,o,n,a,t]);const S=(c=v.entry)==null?void 0:c.target,m=T.useRef();!d&&S&&!s&&!o&&m.current!==S&&(m.current=S,y({inView:!!l,entry:void 0}));const f=[p,v.inView,v.entry];return f.ref=f[0],f.inView=f[1],f.entry=f[2],f}const Mk=()=>{const e=WM();return lo.jsxs(lo.Fragment,{children:[lo.jsx("span",{onClick:()=>e.slideNext(),role:"button",className:"swiper-button-next custom-next-icon","aria-label":"Botón para pasar a la siguiente diapositiva"}),lo.jsx("span",{onClick:()=>e.slidePrev(),className:"swiper-button-prev custom-prev-icon","aria-label":"Botón para pasar a la diapositiva anterior"})]})},JM=(e="100px")=>{const[t,n]=T.useState(!1),r=T.useRef(null);return T.useEffect(()=>{const i=new IntersectionObserver(([s])=>{s.isIntersecting&&(n(!0),i.disconnect())},{rootMargin:e});return r.current&&i.observe(r.current),()=>{i.disconnect()}},[e]),{isVisible:t,ref:r}},kk=JM;export{aE as $,lo as A,vk as B,c1 as C,Li as D,wk as E,Lk as F,GM as G,Pk as H,Ek as I,Ck as J,KM as K,Ix as L,Mk as M,lk as N,kk as O,Tk as P,sk as Q,xe as R,Rd as S,ik as T,ok as U,gk as V,ak as W,rk as X,Sk as Y,xk as Z,Gx as _,As as a,Fy as a0,lE as a1,cn as a2,pe as a3,oh as a4,jE as a5,_s as a6,Ny as a7,zT as a8,We as a9,pT as aa,Si as ab,Wv as ac,at as ad,Ca as ae,nn as af,$d as ag,Ad as ah,Yv as ai,nk as aj,Bp as b,mk as c,jv as d,hk as e,zv as f,dk as g,Bx as h,Fp as i,pk as j,fk as k,Fv as l,ck as m,Nx as n,Nv as o,uk as p,rc as q,yv as r,Dd as s,zx as t,ic as u,Yx as v,T as w,eE as x,tk as y,im as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
