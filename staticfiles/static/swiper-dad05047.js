function se(i){return i!==null&&typeof i=="object"&&"constructor"in i&&i.constructor===Object}function Z(i,e){i===void 0&&(i={}),e===void 0&&(e={}),Object.keys(e).forEach(t=>{typeof i[t]>"u"?i[t]=e[t]:se(e[t])&&se(i[t])&&Object.keys(e[t]).length>0&&Z(i[t],e[t])})}const ce={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function B(){const i=typeof document<"u"?document:{};return Z(i,ce),i}const we={document:ce,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(i){return typeof setTimeout>"u"?(i(),null):setTimeout(i,0)},cancelAnimationFrame(i){typeof setTimeout>"u"||clearTimeout(i)}};function O(){const i=typeof window<"u"?window:{};return Z(i,we),i}function Se(i){return i===void 0&&(i=""),i.trim().split(" ").filter(e=>!!e.trim())}function Te(i){const e=i;Object.keys(e).forEach(t=>{try{e[t]=null}catch{}try{delete e[t]}catch{}})}function U(i,e){return e===void 0&&(e=0),setTimeout(i,e)}function $(){return Date.now()}function xe(i){const e=O();let t;return e.getComputedStyle&&(t=e.getComputedStyle(i,null)),!t&&i.currentStyle&&(t=i.currentStyle),t||(t=i.style),t}function be(i,e){e===void 0&&(e="x");const t=O();let s,n,r;const a=xe(i);return t.WebKitCSSMatrix?(n=a.transform||a.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(o=>o.replace(",",".")).join(", ")),r=new t.WebKitCSSMatrix(n==="none"?"":n)):(r=a.MozTransform||a.OTransform||a.MsTransform||a.msTransform||a.transform||a.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=r.toString().split(",")),e==="x"&&(t.WebKitCSSMatrix?n=r.m41:s.length===16?n=parseFloat(s[12]):n=parseFloat(s[4])),e==="y"&&(t.WebKitCSSMatrix?n=r.m42:s.length===16?n=parseFloat(s[13]):n=parseFloat(s[5])),n||0}function _(i){return typeof i=="object"&&i!==null&&i.constructor&&Object.prototype.toString.call(i).slice(8,-1)==="Object"}function ye(i){return typeof window<"u"&&typeof window.HTMLElement<"u"?i instanceof HTMLElement:i&&(i.nodeType===1||i.nodeType===11)}function z(){const i=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let t=1;t<arguments.length;t+=1){const s=t<0||arguments.length<=t?void 0:arguments[t];if(s!=null&&!ye(s)){const n=Object.keys(Object(s)).filter(r=>e.indexOf(r)<0);for(let r=0,a=n.length;r<a;r+=1){const o=n[r],l=Object.getOwnPropertyDescriptor(s,o);l!==void 0&&l.enumerable&&(_(i[o])&&_(s[o])?s[o].__swiper__?i[o]=s[o]:z(i[o],s[o]):!_(i[o])&&_(s[o])?(i[o]={},s[o].__swiper__?i[o]=s[o]:z(i[o],s[o])):i[o]=s[o])}}}return i}function N(i,e,t){i.style.setProperty(e,t)}function fe(i){let{swiper:e,targetPosition:t,side:s}=i;const n=O(),r=-e.translate;let a=null,o;const l=e.params.speed;e.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(e.cssModeFrameID);const d=t>r?"next":"prev",c=(p,u)=>d==="next"&&p>=u||d==="prev"&&p<=u,f=()=>{o=new Date().getTime(),a===null&&(a=o);const p=Math.max(Math.min((o-a)/l,1),0),u=.5-Math.cos(p*Math.PI)/2;let h=r+u*(t-r);if(c(h,t)&&(h=t),e.wrapperEl.scrollTo({[s]:h}),c(h,t)){e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout(()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[s]:h})}),n.cancelAnimationFrame(e.cssModeFrameID);return}e.cssModeFrameID=n.requestAnimationFrame(f)};f()}function Bt(i){return i.querySelector(".swiper-slide-transform")||i.shadowRoot&&i.shadowRoot.querySelector(".swiper-slide-transform")||i}function G(i,e){return e===void 0&&(e=""),[...i.children].filter(t=>t.matches(e))}function H(i){try{console.warn(i);return}catch{}}function J(i,e){e===void 0&&(e=[]);const t=document.createElement(i);return t.classList.add(...Array.isArray(e)?e:Se(e)),t}function Ee(i,e){const t=[];for(;i.previousElementSibling;){const s=i.previousElementSibling;e?s.matches(e)&&t.push(s):t.push(s),i=s}return t}function Pe(i,e){const t=[];for(;i.nextElementSibling;){const s=i.nextElementSibling;e?s.matches(e)&&t.push(s):t.push(s),i=s}return t}function D(i,e){return O().getComputedStyle(i,null).getPropertyValue(e)}function re(i){let e=i,t;if(e){for(t=0;(e=e.previousSibling)!==null;)e.nodeType===1&&(t+=1);return t}}function Me(i,e){const t=[];let s=i.parentElement;for(;s;)e?s.matches(e)&&t.push(s):t.push(s),s=s.parentElement;return t}function _t(i,e){function t(s){s.target===i&&(e.call(i,s),i.removeEventListener("transitionend",t))}e&&i.addEventListener("transitionend",t)}function ne(i,e,t){const s=O();return t?i[e==="width"?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(i,null).getPropertyValue(e==="width"?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(i,null).getPropertyValue(e==="width"?"margin-left":"margin-bottom")):i.offsetWidth}let W;function Ie(){const i=O(),e=B();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in i||i.DocumentTouch&&e instanceof i.DocumentTouch)}}function ue(){return W||(W=Ie()),W}let j;function Ce(i){let{userAgent:e}=i===void 0?{}:i;const t=ue(),s=O(),n=s.navigator.platform,r=e||s.navigator.userAgent,a={ios:!1,android:!1},o=s.screen.width,l=s.screen.height,d=r.match(/(Android);?[\s\/]+([\d.]+)?/);let c=r.match(/(iPad).*OS\s([\d_]+)/);const f=r.match(/(iPod)(.*OS\s([\d_]+))?/),p=!c&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),u=n==="Win32";let h=n==="MacIntel";const g=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!c&&h&&t.touch&&g.indexOf(`${o}x${l}`)>=0&&(c=r.match(/(Version)\/([\d.]+)/),c||(c=[0,1,"13_0_0"]),h=!1),d&&!u&&(a.os="android",a.android=!0),(c||p||f)&&(a.os="ios",a.ios=!0),a}function Le(i){return i===void 0&&(i={}),j||(j=Ce(i)),j}let Y;function ze(){const i=O();let e=!1;function t(){const s=i.navigator.userAgent.toLowerCase();return s.indexOf("safari")>=0&&s.indexOf("chrome")<0&&s.indexOf("android")<0}if(t()){const s=String(i.navigator.userAgent);if(s.includes("Version/")){const[n,r]=s.split("Version/")[1].split(" ")[0].split(".").map(a=>Number(a));e=n<16||n===16&&r<2}}return{isSafari:e||t(),needPerspectiveFix:e,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(i.navigator.userAgent)}}function Oe(){return Y||(Y=ze()),Y}function Ae(i){let{swiper:e,on:t,emit:s}=i;const n=O();let r=null,a=null;const o=()=>{!e||e.destroyed||!e.initialized||(s("beforeResize"),s("resize"))},l=()=>{!e||e.destroyed||!e.initialized||(r=new ResizeObserver(f=>{a=n.requestAnimationFrame(()=>{const{width:p,height:u}=e;let h=p,g=u;f.forEach(E=>{let{contentBoxSize:m,contentRect:y,target:v}=E;v&&v!==e.el||(h=y?y.width:(m[0]||m).inlineSize,g=y?y.height:(m[0]||m).blockSize)}),(h!==p||g!==u)&&o()})}),r.observe(e.el))},d=()=>{a&&n.cancelAnimationFrame(a),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null)},c=()=>{!e||e.destroyed||!e.initialized||s("orientationchange")};t("init",()=>{if(e.params.resizeObserver&&typeof n.ResizeObserver<"u"){l();return}n.addEventListener("resize",o),n.addEventListener("orientationchange",c)}),t("destroy",()=>{d(),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",c)})}function Ge(i){let{swiper:e,extendParams:t,on:s,emit:n}=i;const r=[],a=O(),o=function(c,f){f===void 0&&(f={});const p=a.MutationObserver||a.WebkitMutationObserver,u=new p(h=>{if(e.__preventObserver__)return;if(h.length===1){n("observerUpdate",h[0]);return}const g=function(){n("observerUpdate",h[0])};a.requestAnimationFrame?a.requestAnimationFrame(g):a.setTimeout(g,0)});u.observe(c,{attributes:typeof f.attributes>"u"?!0:f.attributes,childList:typeof f.childList>"u"?!0:f.childList,characterData:typeof f.characterData>"u"?!0:f.characterData}),r.push(u)},l=()=>{if(e.params.observer){if(e.params.observeParents){const c=Me(e.hostEl);for(let f=0;f<c.length;f+=1)o(c[f])}o(e.hostEl,{childList:e.params.observeSlideChildren}),o(e.wrapperEl,{attributes:!1})}},d=()=>{r.forEach(c=>{c.disconnect()}),r.splice(0,r.length)};t({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",l),s("destroy",d)}var ke={on(i,e,t){const s=this;if(!s.eventsListeners||s.destroyed||typeof e!="function")return s;const n=t?"unshift":"push";return i.split(" ").forEach(r=>{s.eventsListeners[r]||(s.eventsListeners[r]=[]),s.eventsListeners[r][n](e)}),s},once(i,e,t){const s=this;if(!s.eventsListeners||s.destroyed||typeof e!="function")return s;function n(){s.off(i,n),n.__emitterProxy&&delete n.__emitterProxy;for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];e.apply(s,a)}return n.__emitterProxy=e,s.on(i,n,t)},onAny(i,e){const t=this;if(!t.eventsListeners||t.destroyed||typeof i!="function")return t;const s=e?"unshift":"push";return t.eventsAnyListeners.indexOf(i)<0&&t.eventsAnyListeners[s](i),t},offAny(i){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsAnyListeners)return e;const t=e.eventsAnyListeners.indexOf(i);return t>=0&&e.eventsAnyListeners.splice(t,1),e},off(i,e){const t=this;return!t.eventsListeners||t.destroyed||!t.eventsListeners||i.split(" ").forEach(s=>{typeof e>"u"?t.eventsListeners[s]=[]:t.eventsListeners[s]&&t.eventsListeners[s].forEach((n,r)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&t.eventsListeners[s].splice(r,1)})}),t},emit(){const i=this;if(!i.eventsListeners||i.destroyed||!i.eventsListeners)return i;let e,t,s;for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return typeof r[0]=="string"||Array.isArray(r[0])?(e=r[0],t=r.slice(1,r.length),s=i):(e=r[0].events,t=r[0].data,s=r[0].context||i),t.unshift(s),(Array.isArray(e)?e:e.split(" ")).forEach(l=>{i.eventsAnyListeners&&i.eventsAnyListeners.length&&i.eventsAnyListeners.forEach(d=>{d.apply(s,[l,...t])}),i.eventsListeners&&i.eventsListeners[l]&&i.eventsListeners[l].forEach(d=>{d.apply(s,t)})}),i}};function De(){const i=this;let e,t;const s=i.el;typeof i.params.width<"u"&&i.params.width!==null?e=i.params.width:e=s.clientWidth,typeof i.params.height<"u"&&i.params.height!==null?t=i.params.height:t=s.clientHeight,!(e===0&&i.isHorizontal()||t===0&&i.isVertical())&&(e=e-parseInt(D(s,"padding-left")||0,10)-parseInt(D(s,"padding-right")||0,10),t=t-parseInt(D(s,"padding-top")||0,10)-parseInt(D(s,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(t)&&(t=0),Object.assign(i,{width:e,height:t,size:i.isHorizontal()?e:t}))}function Ve(){const i=this;function e(w,b){return parseFloat(w.getPropertyValue(i.getDirectionLabel(b))||0)}const t=i.params,{wrapperEl:s,slidesEl:n,size:r,rtlTranslate:a,wrongRTL:o}=i,l=i.virtual&&t.virtual.enabled,d=l?i.virtual.slides.length:i.slides.length,c=G(n,`.${i.params.slideClass}, swiper-slide`),f=l?i.virtual.slides.length:c.length;let p=[];const u=[],h=[];let g=t.slidesOffsetBefore;typeof g=="function"&&(g=t.slidesOffsetBefore.call(i));let E=t.slidesOffsetAfter;typeof E=="function"&&(E=t.slidesOffsetAfter.call(i));const m=i.snapGrid.length,y=i.slidesGrid.length;let v=t.spaceBetween,S=-g,T=0,M=0;if(typeof r>"u")return;typeof v=="string"&&v.indexOf("%")>=0?v=parseFloat(v.replace("%",""))/100*r:typeof v=="string"&&(v=parseFloat(v)),i.virtualSize=-v,c.forEach(w=>{a?w.style.marginLeft="":w.style.marginRight="",w.style.marginBottom="",w.style.marginTop=""}),t.centeredSlides&&t.cssMode&&(N(s,"--swiper-centered-offset-before",""),N(s,"--swiper-centered-offset-after",""));const V=t.grid&&t.grid.rows>1&&i.grid;V?i.grid.initSlides(c):i.grid&&i.grid.unsetSlides();let I;const F=t.slidesPerView==="auto"&&t.breakpoints&&Object.keys(t.breakpoints).filter(w=>typeof t.breakpoints[w].slidesPerView<"u").length>0;for(let w=0;w<f;w+=1){I=0;let b;if(c[w]&&(b=c[w]),V&&i.grid.updateSlide(w,b,c),!(c[w]&&D(b,"display")==="none")){if(t.slidesPerView==="auto"){F&&(c[w].style[i.getDirectionLabel("width")]="");const P=getComputedStyle(b),x=b.style.transform,C=b.style.webkitTransform;if(x&&(b.style.transform="none"),C&&(b.style.webkitTransform="none"),t.roundLengths)I=i.isHorizontal()?ne(b,"width",!0):ne(b,"height",!0);else{const L=e(P,"width"),k=e(P,"padding-left"),me=e(P,"padding-right"),ee=e(P,"margin-left"),te=e(P,"margin-right"),ie=P.getPropertyValue("box-sizing");if(ie&&ie==="border-box")I=L+ee+te;else{const{clientWidth:ge,offsetWidth:ve}=b;I=L+k+me+ee+te+(ve-ge)}}x&&(b.style.transform=x),C&&(b.style.webkitTransform=C),t.roundLengths&&(I=Math.floor(I))}else I=(r-(t.slidesPerView-1)*v)/t.slidesPerView,t.roundLengths&&(I=Math.floor(I)),c[w]&&(c[w].style[i.getDirectionLabel("width")]=`${I}px`);c[w]&&(c[w].swiperSlideSize=I),h.push(I),t.centeredSlides?(S=S+I/2+T/2+v,T===0&&w!==0&&(S=S-r/2-v),w===0&&(S=S-r/2-v),Math.abs(S)<1/1e3&&(S=0),t.roundLengths&&(S=Math.floor(S)),M%t.slidesPerGroup===0&&p.push(S),u.push(S)):(t.roundLengths&&(S=Math.floor(S)),(M-Math.min(i.params.slidesPerGroupSkip,M))%i.params.slidesPerGroup===0&&p.push(S),u.push(S),S=S+I+v),i.virtualSize+=I+v,T=I,M+=1}}if(i.virtualSize=Math.max(i.virtualSize,r)+E,a&&o&&(t.effect==="slide"||t.effect==="coverflow")&&(s.style.width=`${i.virtualSize+v}px`),t.setWrapperSize&&(s.style[i.getDirectionLabel("width")]=`${i.virtualSize+v}px`),V&&i.grid.updateWrapperSize(I,p),!t.centeredSlides){const w=[];for(let b=0;b<p.length;b+=1){let P=p[b];t.roundLengths&&(P=Math.floor(P)),p[b]<=i.virtualSize-r&&w.push(P)}p=w,Math.floor(i.virtualSize-r)-Math.floor(p[p.length-1])>1&&p.push(i.virtualSize-r)}if(l&&t.loop){const w=h[0]+v;if(t.slidesPerGroup>1){const b=Math.ceil((i.virtual.slidesBefore+i.virtual.slidesAfter)/t.slidesPerGroup),P=w*t.slidesPerGroup;for(let x=0;x<b;x+=1)p.push(p[p.length-1]+P)}for(let b=0;b<i.virtual.slidesBefore+i.virtual.slidesAfter;b+=1)t.slidesPerGroup===1&&p.push(p[p.length-1]+w),u.push(u[u.length-1]+w),i.virtualSize+=w}if(p.length===0&&(p=[0]),v!==0){const w=i.isHorizontal()&&a?"marginLeft":i.getDirectionLabel("marginRight");c.filter((b,P)=>!t.cssMode||t.loop?!0:P!==c.length-1).forEach(b=>{b.style[w]=`${v}px`})}if(t.centeredSlides&&t.centeredSlidesBounds){let w=0;h.forEach(P=>{w+=P+(v||0)}),w-=v;const b=w-r;p=p.map(P=>P<=0?-g:P>b?b+E:P)}if(t.centerInsufficientSlides){let w=0;if(h.forEach(b=>{w+=b+(v||0)}),w-=v,w<r){const b=(r-w)/2;p.forEach((P,x)=>{p[x]=P-b}),u.forEach((P,x)=>{u[x]=P+b})}}if(Object.assign(i,{slides:c,snapGrid:p,slidesGrid:u,slidesSizesGrid:h}),t.centeredSlides&&t.cssMode&&!t.centeredSlidesBounds){N(s,"--swiper-centered-offset-before",`${-p[0]}px`),N(s,"--swiper-centered-offset-after",`${i.size/2-h[h.length-1]/2}px`);const w=-i.snapGrid[0],b=-i.slidesGrid[0];i.snapGrid=i.snapGrid.map(P=>P+w),i.slidesGrid=i.slidesGrid.map(P=>P+b)}if(f!==d&&i.emit("slidesLengthChange"),p.length!==m&&(i.params.watchOverflow&&i.checkOverflow(),i.emit("snapGridLengthChange")),u.length!==y&&i.emit("slidesGridLengthChange"),t.watchSlidesProgress&&i.updateSlidesOffset(),i.emit("slidesUpdated"),!l&&!t.cssMode&&(t.effect==="slide"||t.effect==="fade")){const w=`${t.containerModifierClass}backface-hidden`,b=i.el.classList.contains(w);f<=t.maxBackfaceHiddenSlides?b||i.el.classList.add(w):b&&i.el.classList.remove(w)}}function Fe(i){const e=this,t=[],s=e.virtual&&e.params.virtual.enabled;let n=0,r;typeof i=="number"?e.setTransition(i):i===!0&&e.setTransition(e.params.speed);const a=o=>s?e.slides[e.getSlideIndexByData(o)]:e.slides[o];if(e.params.slidesPerView!=="auto"&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach(o=>{t.push(o)});else for(r=0;r<Math.ceil(e.params.slidesPerView);r+=1){const o=e.activeIndex+r;if(o>e.slides.length&&!s)break;t.push(a(o))}else t.push(a(e.activeIndex));for(r=0;r<t.length;r+=1)if(typeof t[r]<"u"){const o=t[r].offsetHeight;n=o>n?o:n}(n||n===0)&&(e.wrapperEl.style.height=`${n}px`)}function Be(){const i=this,e=i.slides,t=i.isElement?i.isHorizontal()?i.wrapperEl.offsetLeft:i.wrapperEl.offsetTop:0;for(let s=0;s<e.length;s+=1)e[s].swiperSlideOffset=(i.isHorizontal()?e[s].offsetLeft:e[s].offsetTop)-t-i.cssOverflowAdjustment()}function _e(i){i===void 0&&(i=this&&this.translate||0);const e=this,t=e.params,{slides:s,rtlTranslate:n,snapGrid:r}=e;if(s.length===0)return;typeof s[0].swiperSlideOffset>"u"&&e.updateSlidesOffset();let a=-i;n&&(a=i),s.forEach(l=>{l.classList.remove(t.slideVisibleClass,t.slideFullyVisibleClass)}),e.visibleSlidesIndexes=[],e.visibleSlides=[];let o=t.spaceBetween;typeof o=="string"&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*e.size:typeof o=="string"&&(o=parseFloat(o));for(let l=0;l<s.length;l+=1){const d=s[l];let c=d.swiperSlideOffset;t.cssMode&&t.centeredSlides&&(c-=s[0].swiperSlideOffset);const f=(a+(t.centeredSlides?e.minTranslate():0)-c)/(d.swiperSlideSize+o),p=(a-r[0]+(t.centeredSlides?e.minTranslate():0)-c)/(d.swiperSlideSize+o),u=-(a-c),h=u+e.slidesSizesGrid[l],g=u>=0&&u<=e.size-e.slidesSizesGrid[l];(u>=0&&u<e.size-1||h>1&&h<=e.size||u<=0&&h>=e.size)&&(e.visibleSlides.push(d),e.visibleSlidesIndexes.push(l),s[l].classList.add(t.slideVisibleClass)),g&&s[l].classList.add(t.slideFullyVisibleClass),d.progress=n?-f:f,d.originalProgress=n?-p:p}}function Ne(i){const e=this;if(typeof i>"u"){const c=e.rtlTranslate?-1:1;i=e&&e.translate&&e.translate*c||0}const t=e.params,s=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:r,isEnd:a,progressLoop:o}=e;const l=r,d=a;if(s===0)n=0,r=!0,a=!0;else{n=(i-e.minTranslate())/s;const c=Math.abs(i-e.minTranslate())<1,f=Math.abs(i-e.maxTranslate())<1;r=c||n<=0,a=f||n>=1,c&&(n=0),f&&(n=1)}if(t.loop){const c=e.getSlideIndexByData(0),f=e.getSlideIndexByData(e.slides.length-1),p=e.slidesGrid[c],u=e.slidesGrid[f],h=e.slidesGrid[e.slidesGrid.length-1],g=Math.abs(i);g>=p?o=(g-p)/h:o=(g+h-u)/h,o>1&&(o-=1)}Object.assign(e,{progress:n,progressLoop:o,isBeginning:r,isEnd:a}),(t.watchSlidesProgress||t.centeredSlides&&t.autoHeight)&&e.updateSlidesProgress(i),r&&!l&&e.emit("reachBeginning toEdge"),a&&!d&&e.emit("reachEnd toEdge"),(l&&!r||d&&!a)&&e.emit("fromEdge"),e.emit("progress",n)}function Re(){const i=this,{slides:e,params:t,slidesEl:s,activeIndex:n}=i,r=i.virtual&&t.virtual.enabled,a=i.grid&&t.grid&&t.grid.rows>1,o=f=>G(s,`.${t.slideClass}${f}, swiper-slide${f}`)[0];e.forEach(f=>{f.classList.remove(t.slideActiveClass,t.slideNextClass,t.slidePrevClass)});let l,d,c;if(r)if(t.loop){let f=n-i.virtual.slidesBefore;f<0&&(f=i.virtual.slides.length+f),f>=i.virtual.slides.length&&(f-=i.virtual.slides.length),l=o(`[data-swiper-slide-index="${f}"]`)}else l=o(`[data-swiper-slide-index="${n}"]`);else a?(l=e.filter(f=>f.column===n)[0],c=e.filter(f=>f.column===n+1)[0],d=e.filter(f=>f.column===n-1)[0]):l=e[n];l&&(l.classList.add(t.slideActiveClass),a?(c&&c.classList.add(t.slideNextClass),d&&d.classList.add(t.slidePrevClass)):(c=Pe(l,`.${t.slideClass}, swiper-slide`)[0],t.loop&&!c&&(c=e[0]),c&&c.classList.add(t.slideNextClass),d=Ee(l,`.${t.slideClass}, swiper-slide`)[0],t.loop&&!d===0&&(d=e[e.length-1]),d&&d.classList.add(t.slidePrevClass))),i.emitSlidesClasses()}const R=(i,e)=>{if(!i||i.destroyed||!i.params)return;const t=()=>i.isElement?"swiper-slide":`.${i.params.slideClass}`,s=e.closest(t());if(s){let n=s.querySelector(`.${i.params.lazyPreloaderClass}`);!n&&i.isElement&&(s.shadowRoot?n=s.shadowRoot.querySelector(`.${i.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{s.shadowRoot&&(n=s.shadowRoot.querySelector(`.${i.params.lazyPreloaderClass}`),n&&n.remove())})),n&&n.remove()}},q=(i,e)=>{if(!i.slides[e])return;const t=i.slides[e].querySelector('[loading="lazy"]');t&&t.removeAttribute("loading")},Q=i=>{if(!i||i.destroyed||!i.params)return;let e=i.params.lazyPreloadPrevNext;const t=i.slides.length;if(!t||!e||e<0)return;e=Math.min(e,t);const s=i.params.slidesPerView==="auto"?i.slidesPerViewDynamic():Math.ceil(i.params.slidesPerView),n=i.activeIndex;if(i.params.grid&&i.params.grid.rows>1){const a=n,o=[a-e];o.push(...Array.from({length:e}).map((l,d)=>a+s+d)),i.slides.forEach((l,d)=>{o.includes(l.column)&&q(i,d)});return}const r=n+s-1;if(i.params.rewind||i.params.loop)for(let a=n-e;a<=r+e;a+=1){const o=(a%t+t)%t;(o<n||o>r)&&q(i,o)}else for(let a=Math.max(n-e,0);a<=Math.min(r+e,t-1);a+=1)a!==n&&(a>r||a<n)&&q(i,a)};function $e(i){const{slidesGrid:e,params:t}=i,s=i.rtlTranslate?i.translate:-i.translate;let n;for(let r=0;r<e.length;r+=1)typeof e[r+1]<"u"?s>=e[r]&&s<e[r+1]-(e[r+1]-e[r])/2?n=r:s>=e[r]&&s<e[r+1]&&(n=r+1):s>=e[r]&&(n=r);return t.normalizeSlideIndex&&(n<0||typeof n>"u")&&(n=0),n}function He(i){const e=this,t=e.rtlTranslate?e.translate:-e.translate,{snapGrid:s,params:n,activeIndex:r,realIndex:a,snapIndex:o}=e;let l=i,d;const c=u=>{let h=u-e.virtual.slidesBefore;return h<0&&(h=e.virtual.slides.length+h),h>=e.virtual.slides.length&&(h-=e.virtual.slides.length),h};if(typeof l>"u"&&(l=$e(e)),s.indexOf(t)>=0)d=s.indexOf(t);else{const u=Math.min(n.slidesPerGroupSkip,l);d=u+Math.floor((l-u)/n.slidesPerGroup)}if(d>=s.length&&(d=s.length-1),l===r&&!e.params.loop){d!==o&&(e.snapIndex=d,e.emit("snapIndexChange"));return}if(l===r&&e.params.loop&&e.virtual&&e.params.virtual.enabled){e.realIndex=c(l);return}const f=e.grid&&n.grid&&n.grid.rows>1;let p;if(e.virtual&&n.virtual.enabled&&n.loop)p=c(l);else if(f){const u=e.slides.filter(g=>g.column===l)[0];let h=parseInt(u.getAttribute("data-swiper-slide-index"),10);Number.isNaN(h)&&(h=Math.max(e.slides.indexOf(u),0)),p=Math.floor(h/n.grid.rows)}else if(e.slides[l]){const u=e.slides[l].getAttribute("data-swiper-slide-index");u?p=parseInt(u,10):p=l}else p=l;Object.assign(e,{previousSnapIndex:o,snapIndex:d,previousRealIndex:a,realIndex:p,previousIndex:r,activeIndex:l}),e.initialized&&Q(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(a!==p&&e.emit("realIndexChange"),e.emit("slideChange"))}function We(i,e){const t=this,s=t.params;let n=i.closest(`.${s.slideClass}, swiper-slide`);!n&&t.isElement&&e&&e.length>1&&e.includes(i)&&[...e.slice(e.indexOf(i)+1,e.length)].forEach(o=>{!n&&o.matches&&o.matches(`.${s.slideClass}, swiper-slide`)&&(n=o)});let r=!1,a;if(n){for(let o=0;o<t.slides.length;o+=1)if(t.slides[o]===n){r=!0,a=o;break}}if(n&&r)t.clickedSlide=n,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):t.clickedIndex=a;else{t.clickedSlide=void 0,t.clickedIndex=void 0;return}s.slideToClickedSlide&&t.clickedIndex!==void 0&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}var je={updateSize:De,updateSlides:Ve,updateAutoHeight:Fe,updateSlidesOffset:Be,updateSlidesProgress:_e,updateProgress:Ne,updateSlidesClasses:Re,updateActiveIndex:He,updateClickedSlide:We};function Ye(i){i===void 0&&(i=this.isHorizontal()?"x":"y");const e=this,{params:t,rtlTranslate:s,translate:n,wrapperEl:r}=e;if(t.virtualTranslate)return s?-n:n;if(t.cssMode)return n;let a=be(r,i);return a+=e.cssOverflowAdjustment(),s&&(a=-a),a||0}function qe(i,e){const t=this,{rtlTranslate:s,params:n,wrapperEl:r,progress:a}=t;let o=0,l=0;const d=0;t.isHorizontal()?o=s?-i:i:l=i,n.roundLengths&&(o=Math.floor(o),l=Math.floor(l)),t.previousTranslate=t.translate,t.translate=t.isHorizontal()?o:l,n.cssMode?r[t.isHorizontal()?"scrollLeft":"scrollTop"]=t.isHorizontal()?-o:-l:n.virtualTranslate||(t.isHorizontal()?o-=t.cssOverflowAdjustment():l-=t.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${l}px, ${d}px)`);let c;const f=t.maxTranslate()-t.minTranslate();f===0?c=0:c=(i-t.minTranslate())/f,c!==a&&t.updateProgress(i),t.emit("setTranslate",t.translate,e)}function Xe(){return-this.snapGrid[0]}function Ke(){return-this.snapGrid[this.snapGrid.length-1]}function Ue(i,e,t,s,n){i===void 0&&(i=0),e===void 0&&(e=this.params.speed),t===void 0&&(t=!0),s===void 0&&(s=!0);const r=this,{params:a,wrapperEl:o}=r;if(r.animating&&a.preventInteractionOnTransition)return!1;const l=r.minTranslate(),d=r.maxTranslate();let c;if(s&&i>l?c=l:s&&i<d?c=d:c=i,r.updateProgress(c),a.cssMode){const f=r.isHorizontal();if(e===0)o[f?"scrollLeft":"scrollTop"]=-c;else{if(!r.support.smoothScroll)return fe({swiper:r,targetPosition:-c,side:f?"left":"top"}),!0;o.scrollTo({[f?"left":"top"]:-c,behavior:"smooth"})}return!0}return e===0?(r.setTransition(0),r.setTranslate(c),t&&(r.emit("beforeTransitionStart",e,n),r.emit("transitionEnd"))):(r.setTransition(e),r.setTranslate(c),t&&(r.emit("beforeTransitionStart",e,n),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(p){!r||r.destroyed||p.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,t&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}var Je={getTranslate:Ye,setTranslate:qe,minTranslate:Xe,maxTranslate:Ke,translateTo:Ue};function Qe(i,e){const t=this;t.params.cssMode||(t.wrapperEl.style.transitionDuration=`${i}ms`,t.wrapperEl.style.transitionDelay=i===0?"0ms":""),t.emit("setTransition",i,e)}function pe(i){let{swiper:e,runCallbacks:t,direction:s,step:n}=i;const{activeIndex:r,previousIndex:a}=e;let o=s;if(o||(r>a?o="next":r<a?o="prev":o="reset"),e.emit(`transition${n}`),t&&r!==a){if(o==="reset"){e.emit(`slideResetTransition${n}`);return}e.emit(`slideChangeTransition${n}`),o==="next"?e.emit(`slideNextTransition${n}`):e.emit(`slidePrevTransition${n}`)}}function Ze(i,e){i===void 0&&(i=!0);const t=this,{params:s}=t;s.cssMode||(s.autoHeight&&t.updateAutoHeight(),pe({swiper:t,runCallbacks:i,direction:e,step:"Start"}))}function et(i,e){i===void 0&&(i=!0);const t=this,{params:s}=t;t.animating=!1,!s.cssMode&&(t.setTransition(0),pe({swiper:t,runCallbacks:i,direction:e,step:"End"}))}var tt={setTransition:Qe,transitionStart:Ze,transitionEnd:et};function it(i,e,t,s,n){i===void 0&&(i=0),e===void 0&&(e=this.params.speed),t===void 0&&(t=!0),typeof i=="string"&&(i=parseInt(i,10));const r=this;let a=i;a<0&&(a=0);const{params:o,snapGrid:l,slidesGrid:d,previousIndex:c,activeIndex:f,rtlTranslate:p,wrapperEl:u,enabled:h}=r;if(r.animating&&o.preventInteractionOnTransition||!h&&!s&&!n)return!1;const g=Math.min(r.params.slidesPerGroupSkip,a);let E=g+Math.floor((a-g)/r.params.slidesPerGroup);E>=l.length&&(E=l.length-1);const m=-l[E];if(o.normalizeSlideIndex)for(let v=0;v<d.length;v+=1){const S=-Math.floor(m*100),T=Math.floor(d[v]*100),M=Math.floor(d[v+1]*100);typeof d[v+1]<"u"?S>=T&&S<M-(M-T)/2?a=v:S>=T&&S<M&&(a=v+1):S>=T&&(a=v)}if(r.initialized&&a!==f&&(!r.allowSlideNext&&(p?m>r.translate&&m>r.minTranslate():m<r.translate&&m<r.minTranslate())||!r.allowSlidePrev&&m>r.translate&&m>r.maxTranslate()&&(f||0)!==a))return!1;a!==(c||0)&&t&&r.emit("beforeSlideChangeStart"),r.updateProgress(m);let y;if(a>f?y="next":a<f?y="prev":y="reset",p&&-m===r.translate||!p&&m===r.translate)return r.updateActiveIndex(a),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),o.effect!=="slide"&&r.setTranslate(m),y!=="reset"&&(r.transitionStart(t,y),r.transitionEnd(t,y)),!1;if(o.cssMode){const v=r.isHorizontal(),S=p?m:-m;if(e===0){const T=r.virtual&&r.params.virtual.enabled;T&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),T&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{u[v?"scrollLeft":"scrollTop"]=S})):u[v?"scrollLeft":"scrollTop"]=S,T&&requestAnimationFrame(()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1})}else{if(!r.support.smoothScroll)return fe({swiper:r,targetPosition:S,side:v?"left":"top"}),!0;u.scrollTo({[v?"left":"top"]:S,behavior:"smooth"})}return!0}return r.setTransition(e),r.setTranslate(m),r.updateActiveIndex(a),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,s),r.transitionStart(t,y),e===0?r.transitionEnd(t,y):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(S){!r||r.destroyed||S.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(t,y))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0}function st(i,e,t,s){i===void 0&&(i=0),e===void 0&&(e=this.params.speed),t===void 0&&(t=!0),typeof i=="string"&&(i=parseInt(i,10));const n=this,r=n.grid&&n.params.grid&&n.params.grid.rows>1;let a=i;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)a=a+n.virtual.slidesBefore;else{let o;if(r){const p=a*n.params.grid.rows;o=n.slides.filter(u=>u.getAttribute("data-swiper-slide-index")*1===p)[0].column}else o=n.getSlideIndexByData(a);const l=r?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:d}=n.params;let c=n.params.slidesPerView;c==="auto"?c=n.slidesPerViewDynamic():(c=Math.ceil(parseFloat(n.params.slidesPerView,10)),d&&c%2===0&&(c=c+1));let f=l-o<c;if(d&&(f=f||o<Math.ceil(c/2)),f){const p=d?o<n.activeIndex?"prev":"next":o-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:p,slideTo:!0,activeSlideIndex:p==="next"?o+1:o-l+1,slideRealIndex:p==="next"?n.realIndex:void 0})}if(r){const p=a*n.params.grid.rows;a=n.slides.filter(u=>u.getAttribute("data-swiper-slide-index")*1===p)[0].column}else a=n.getSlideIndexByData(a)}return requestAnimationFrame(()=>{n.slideTo(a,e,t,s)}),n}function rt(i,e,t){i===void 0&&(i=this.params.speed),e===void 0&&(e=!0);const s=this,{enabled:n,params:r,animating:a}=s;if(!n)return s;let o=r.slidesPerGroup;r.slidesPerView==="auto"&&r.slidesPerGroup===1&&r.slidesPerGroupAuto&&(o=Math.max(s.slidesPerViewDynamic("current",!0),1));const l=s.activeIndex<r.slidesPerGroupSkip?1:o,d=s.virtual&&r.virtual.enabled;if(r.loop){if(a&&!d&&r.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&r.cssMode)return requestAnimationFrame(()=>{s.slideTo(s.activeIndex+l,i,e,t)}),!0}return r.rewind&&s.isEnd?s.slideTo(0,i,e,t):s.slideTo(s.activeIndex+l,i,e,t)}function nt(i,e,t){i===void 0&&(i=this.params.speed),e===void 0&&(e=!0);const s=this,{params:n,snapGrid:r,slidesGrid:a,rtlTranslate:o,enabled:l,animating:d}=s;if(!l)return s;const c=s.virtual&&n.virtual.enabled;if(n.loop){if(d&&!c&&n.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}const f=o?s.translate:-s.translate;function p(m){return m<0?-Math.floor(Math.abs(m)):Math.floor(m)}const u=p(f),h=r.map(m=>p(m));let g=r[h.indexOf(u)-1];if(typeof g>"u"&&n.cssMode){let m;r.forEach((y,v)=>{u>=y&&(m=v)}),typeof m<"u"&&(g=r[m>0?m-1:m])}let E=0;if(typeof g<"u"&&(E=a.indexOf(g),E<0&&(E=s.activeIndex-1),n.slidesPerView==="auto"&&n.slidesPerGroup===1&&n.slidesPerGroupAuto&&(E=E-s.slidesPerViewDynamic("previous",!0)+1,E=Math.max(E,0))),n.rewind&&s.isBeginning){const m=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(m,i,e,t)}else if(n.loop&&s.activeIndex===0&&n.cssMode)return requestAnimationFrame(()=>{s.slideTo(E,i,e,t)}),!0;return s.slideTo(E,i,e,t)}function lt(i,e,t){i===void 0&&(i=this.params.speed),e===void 0&&(e=!0);const s=this;return s.slideTo(s.activeIndex,i,e,t)}function at(i,e,t,s){i===void 0&&(i=this.params.speed),e===void 0&&(e=!0),s===void 0&&(s=.5);const n=this;let r=n.activeIndex;const a=Math.min(n.params.slidesPerGroupSkip,r),o=a+Math.floor((r-a)/n.params.slidesPerGroup),l=n.rtlTranslate?n.translate:-n.translate;if(l>=n.snapGrid[o]){const d=n.snapGrid[o],c=n.snapGrid[o+1];l-d>(c-d)*s&&(r+=n.params.slidesPerGroup)}else{const d=n.snapGrid[o-1],c=n.snapGrid[o];l-d<=(c-d)*s&&(r-=n.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,n.slidesGrid.length-1),n.slideTo(r,i,e,t)}function ot(){const i=this,{params:e,slidesEl:t}=i,s=e.slidesPerView==="auto"?i.slidesPerViewDynamic():e.slidesPerView;let n=i.clickedIndex,r;const a=i.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(i.animating)return;r=parseInt(i.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?n<i.loopedSlides-s/2||n>i.slides.length-i.loopedSlides+s/2?(i.loopFix(),n=i.getSlideIndex(G(t,`${a}[data-swiper-slide-index="${r}"]`)[0]),U(()=>{i.slideTo(n)})):i.slideTo(n):n>i.slides.length-s?(i.loopFix(),n=i.getSlideIndex(G(t,`${a}[data-swiper-slide-index="${r}"]`)[0]),U(()=>{i.slideTo(n)})):i.slideTo(n)}else i.slideTo(n)}var dt={slideTo:it,slideToLoop:st,slideNext:rt,slidePrev:nt,slideReset:lt,slideToClosest:at,slideToClickedSlide:ot};function ct(i){const e=this,{params:t,slidesEl:s}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;const n=()=>{G(s,`.${t.slideClass}, swiper-slide`).forEach((f,p)=>{f.setAttribute("data-swiper-slide-index",p)})},r=e.grid&&t.grid&&t.grid.rows>1,a=t.slidesPerGroup*(r?t.grid.rows:1),o=e.slides.length%a!==0,l=r&&e.slides.length%t.grid.rows!==0,d=c=>{for(let f=0;f<c;f+=1){const p=e.isElement?J("swiper-slide",[t.slideBlankClass]):J("div",[t.slideClass,t.slideBlankClass]);e.slidesEl.append(p)}};if(o){if(t.loopAddBlankSlides){const c=a-e.slides.length%a;d(c),e.recalcSlides(),e.updateSlides()}else H("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(l){if(t.loopAddBlankSlides){const c=t.grid.rows-e.slides.length%t.grid.rows;d(c),e.recalcSlides(),e.updateSlides()}else H("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();e.loopFix({slideRealIndex:i,direction:t.centeredSlides?void 0:"next"})}function ft(i){let{slideRealIndex:e,slideTo:t=!0,direction:s,setTranslate:n,activeSlideIndex:r,byController:a,byMousewheel:o}=i===void 0?{}:i;const l=this;if(!l.params.loop)return;l.emit("beforeLoopFix");const{slides:d,allowSlidePrev:c,allowSlideNext:f,slidesEl:p,params:u}=l,{centeredSlides:h}=u;if(l.allowSlidePrev=!0,l.allowSlideNext=!0,l.virtual&&u.virtual.enabled){t&&(!u.centeredSlides&&l.snapIndex===0?l.slideTo(l.virtual.slides.length,0,!1,!0):u.centeredSlides&&l.snapIndex<u.slidesPerView?l.slideTo(l.virtual.slides.length+l.snapIndex,0,!1,!0):l.snapIndex===l.snapGrid.length-1&&l.slideTo(l.virtual.slidesBefore,0,!1,!0)),l.allowSlidePrev=c,l.allowSlideNext=f,l.emit("loopFix");return}let g=u.slidesPerView;g==="auto"?g=l.slidesPerViewDynamic():(g=Math.ceil(parseFloat(u.slidesPerView,10)),h&&g%2===0&&(g=g+1));const E=u.slidesPerGroupAuto?g:u.slidesPerGroup;let m=E;m%E!==0&&(m+=E-m%E),m+=u.loopAdditionalSlides,l.loopedSlides=m;const y=l.grid&&u.grid&&u.grid.rows>1;d.length<g+m?H("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):y&&u.grid.fill==="row"&&H("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const v=[],S=[];let T=l.activeIndex;typeof r>"u"?r=l.getSlideIndex(d.filter(x=>x.classList.contains(u.slideActiveClass))[0]):T=r;const M=s==="next"||!s,V=s==="prev"||!s;let I=0,F=0;const w=y?Math.ceil(d.length/u.grid.rows):d.length,P=(y?d[r].column:r)+(h&&typeof n>"u"?-g/2+.5:0);if(P<m){I=Math.max(m-P,E);for(let x=0;x<m-P;x+=1){const C=x-Math.floor(x/w)*w;if(y){const L=w-C-1;for(let k=d.length-1;k>=0;k-=1)d[k].column===L&&v.push(k)}else v.push(w-C-1)}}else if(P+g>w-m){F=Math.max(P-(w-m*2),E);for(let x=0;x<F;x+=1){const C=x-Math.floor(x/w)*w;y?d.forEach((L,k)=>{L.column===C&&S.push(k)}):S.push(C)}}if(l.__preventObserver__=!0,requestAnimationFrame(()=>{l.__preventObserver__=!1}),V&&v.forEach(x=>{d[x].swiperLoopMoveDOM=!0,p.prepend(d[x]),d[x].swiperLoopMoveDOM=!1}),M&&S.forEach(x=>{d[x].swiperLoopMoveDOM=!0,p.append(d[x]),d[x].swiperLoopMoveDOM=!1}),l.recalcSlides(),u.slidesPerView==="auto"?l.updateSlides():y&&(v.length>0&&V||S.length>0&&M)&&l.slides.forEach((x,C)=>{l.grid.updateSlide(C,x,l.slides)}),u.watchSlidesProgress&&l.updateSlidesOffset(),t){if(v.length>0&&V){if(typeof e>"u"){const x=l.slidesGrid[T],L=l.slidesGrid[T+I]-x;o?l.setTranslate(l.translate-L):(l.slideTo(T+I,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-L,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-L))}else if(n){const x=y?v.length/u.grid.rows:v.length;l.slideTo(l.activeIndex+x,0,!1,!0),l.touchEventsData.currentTranslate=l.translate}}else if(S.length>0&&M)if(typeof e>"u"){const x=l.slidesGrid[T],L=l.slidesGrid[T-F]-x;o?l.setTranslate(l.translate-L):(l.slideTo(T-F,0,!1,!0),n&&(l.touchEventsData.startTranslate=l.touchEventsData.startTranslate-L,l.touchEventsData.currentTranslate=l.touchEventsData.currentTranslate-L))}else{const x=y?S.length/u.grid.rows:S.length;l.slideTo(l.activeIndex-x,0,!1,!0)}}if(l.allowSlidePrev=c,l.allowSlideNext=f,l.controller&&l.controller.control&&!a){const x={slideRealIndex:e,direction:s,setTranslate:n,activeSlideIndex:r,byController:!0};Array.isArray(l.controller.control)?l.controller.control.forEach(C=>{!C.destroyed&&C.params.loop&&C.loopFix({...x,slideTo:C.params.slidesPerView===u.slidesPerView?t:!1})}):l.controller.control instanceof l.constructor&&l.controller.control.params.loop&&l.controller.control.loopFix({...x,slideTo:l.controller.control.params.slidesPerView===u.slidesPerView?t:!1})}l.emit("loopFix")}function ut(){const i=this,{params:e,slidesEl:t}=i;if(!e.loop||i.virtual&&i.params.virtual.enabled)return;i.recalcSlides();const s=[];i.slides.forEach(n=>{const r=typeof n.swiperSlideIndex>"u"?n.getAttribute("data-swiper-slide-index")*1:n.swiperSlideIndex;s[r]=n}),i.slides.forEach(n=>{n.removeAttribute("data-swiper-slide-index")}),s.forEach(n=>{t.append(n)}),i.recalcSlides(),i.slideTo(i.realIndex,0)}var pt={loopCreate:ct,loopFix:ft,loopDestroy:ut};function ht(i){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const t=e.params.touchEventsTarget==="container"?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),t.style.cursor="move",t.style.cursor=i?"grabbing":"grab",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1})}function mt(){const i=this;i.params.watchOverflow&&i.isLocked||i.params.cssMode||(i.isElement&&(i.__preventObserver__=!0),i[i.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",i.isElement&&requestAnimationFrame(()=>{i.__preventObserver__=!1}))}var gt={setGrabCursor:ht,unsetGrabCursor:mt};function vt(i,e){e===void 0&&(e=this);function t(s){if(!s||s===B()||s===O())return null;s.assignedSlot&&(s=s.assignedSlot);const n=s.closest(i);return!n&&!s.getRootNode?null:n||t(s.getRootNode().host)}return t(e)}function le(i,e,t){const s=O(),{params:n}=i,r=n.edgeSwipeDetection,a=n.edgeSwipeThreshold;return r&&(t<=a||t>=s.innerWidth-a)?r==="prevent"?(e.preventDefault(),!0):!1:!0}function wt(i){const e=this,t=B();let s=i;s.originalEvent&&(s=s.originalEvent);const n=e.touchEventsData;if(s.type==="pointerdown"){if(n.pointerId!==null&&n.pointerId!==s.pointerId)return;n.pointerId=s.pointerId}else s.type==="touchstart"&&s.targetTouches.length===1&&(n.touchId=s.targetTouches[0].identifier);if(s.type==="touchstart"){le(e,s,s.targetTouches[0].pageX);return}const{params:r,touches:a,enabled:o}=e;if(!o||!r.simulateTouch&&s.pointerType==="mouse"||e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let l=s.target;if(r.touchEventsTarget==="wrapper"&&!e.wrapperEl.contains(l)||"which"in s&&s.which===3||"button"in s&&s.button>0||n.isTouched&&n.isMoved)return;const d=!!r.noSwipingClass&&r.noSwipingClass!=="",c=s.composedPath?s.composedPath():s.path;d&&s.target&&s.target.shadowRoot&&c&&(l=c[0]);const f=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,p=!!(s.target&&s.target.shadowRoot);if(r.noSwiping&&(p?vt(f,l):l.closest(f))){e.allowClick=!0;return}if(r.swipeHandler&&!l.closest(r.swipeHandler))return;a.currentX=s.pageX,a.currentY=s.pageY;const u=a.currentX,h=a.currentY;if(!le(e,s,u))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=u,a.startY=h,n.touchStartTime=$(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1);let g=!0;l.matches(n.focusableElements)&&(g=!1,l.nodeName==="SELECT"&&(n.isTouched=!1)),t.activeElement&&t.activeElement.matches(n.focusableElements)&&t.activeElement!==l&&t.activeElement.blur();const E=g&&e.allowTouchMove&&r.touchStartPreventDefault;(r.touchStartForcePreventDefault||E)&&!l.isContentEditable&&s.preventDefault(),r.freeMode&&r.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",s)}function St(i){const e=B(),t=this,s=t.touchEventsData,{params:n,touches:r,rtlTranslate:a,enabled:o}=t;if(!o||!n.simulateTouch&&i.pointerType==="mouse")return;let l=i;if(l.originalEvent&&(l=l.originalEvent),l.type==="pointermove"&&(s.touchId!==null||l.pointerId!==s.pointerId))return;let d;if(l.type==="touchmove"){if(d=[...l.changedTouches].filter(M=>M.identifier===s.touchId)[0],!d||d.identifier!==s.touchId)return}else d=l;if(!s.isTouched){s.startMoving&&s.isScrolling&&t.emit("touchMoveOpposite",l);return}const c=d.pageX,f=d.pageY;if(l.preventedByNestedSwiper){r.startX=c,r.startY=f;return}if(!t.allowTouchMove){l.target.matches(s.focusableElements)||(t.allowClick=!1),s.isTouched&&(Object.assign(r,{startX:c,startY:f,currentX:c,currentY:f}),s.touchStartTime=$());return}if(n.touchReleaseOnEdges&&!n.loop){if(t.isVertical()){if(f<r.startY&&t.translate<=t.maxTranslate()||f>r.startY&&t.translate>=t.minTranslate()){s.isTouched=!1,s.isMoved=!1;return}}else if(c<r.startX&&t.translate<=t.maxTranslate()||c>r.startX&&t.translate>=t.minTranslate())return}if(e.activeElement&&l.target===e.activeElement&&l.target.matches(s.focusableElements)){s.isMoved=!0,t.allowClick=!1;return}s.allowTouchCallbacks&&t.emit("touchMove",l),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=c,r.currentY=f;const p=r.currentX-r.startX,u=r.currentY-r.startY;if(t.params.threshold&&Math.sqrt(p**2+u**2)<t.params.threshold)return;if(typeof s.isScrolling>"u"){let M;t.isHorizontal()&&r.currentY===r.startY||t.isVertical()&&r.currentX===r.startX?s.isScrolling=!1:p*p+u*u>=25&&(M=Math.atan2(Math.abs(u),Math.abs(p))*180/Math.PI,s.isScrolling=t.isHorizontal()?M>n.touchAngle:90-M>n.touchAngle)}if(s.isScrolling&&t.emit("touchMoveOpposite",l),typeof s.startMoving>"u"&&(r.currentX!==r.startX||r.currentY!==r.startY)&&(s.startMoving=!0),s.isScrolling){s.isTouched=!1;return}if(!s.startMoving)return;t.allowClick=!1,!n.cssMode&&l.cancelable&&l.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&l.stopPropagation();let h=t.isHorizontal()?p:u,g=t.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;n.oneWayMovement&&(h=Math.abs(h)*(a?1:-1),g=Math.abs(g)*(a?1:-1)),r.diff=h,h*=n.touchRatio,a&&(h=-h,g=-g);const E=t.touchesDirection;t.swipeDirection=h>0?"prev":"next",t.touchesDirection=g>0?"prev":"next";const m=t.params.loop&&!n.cssMode,y=t.touchesDirection==="next"&&t.allowSlideNext||t.touchesDirection==="prev"&&t.allowSlidePrev;if(!s.isMoved){if(m&&y&&t.loopFix({direction:t.swipeDirection}),s.startTranslate=t.getTranslate(),t.setTransition(0),t.animating){const M=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});t.wrapperEl.dispatchEvent(M)}s.allowMomentumBounce=!1,n.grabCursor&&(t.allowSlideNext===!0||t.allowSlidePrev===!0)&&t.setGrabCursor(!0),t.emit("sliderFirstMove",l)}let v;if(new Date().getTime(),s.isMoved&&s.allowThresholdMove&&E!==t.touchesDirection&&m&&y&&Math.abs(h)>=1){Object.assign(r,{startX:c,startY:f,currentX:c,currentY:f,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,s.startTranslate=s.currentTranslate;return}t.emit("sliderMove",l),s.isMoved=!0,s.currentTranslate=h+s.startTranslate;let S=!0,T=n.resistanceRatio;if(n.touchReleaseOnEdges&&(T=0),h>0?(m&&y&&!v&&s.allowThresholdMove&&s.currentTranslate>(n.centeredSlides?t.minTranslate()-t.slidesSizesGrid[t.activeIndex+1]:t.minTranslate())&&t.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>t.minTranslate()&&(S=!1,n.resistance&&(s.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+s.startTranslate+h)**T))):h<0&&(m&&y&&!v&&s.allowThresholdMove&&s.currentTranslate<(n.centeredSlides?t.maxTranslate()+t.slidesSizesGrid[t.slidesSizesGrid.length-1]:t.maxTranslate())&&t.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:t.slides.length-(n.slidesPerView==="auto"?t.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),s.currentTranslate<t.maxTranslate()&&(S=!1,n.resistance&&(s.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-s.startTranslate-h)**T))),S&&(l.preventedByNestedSwiper=!0),!t.allowSlideNext&&t.swipeDirection==="next"&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!t.allowSlidePrev&&t.swipeDirection==="prev"&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),!t.allowSlidePrev&&!t.allowSlideNext&&(s.currentTranslate=s.startTranslate),n.threshold>0)if(Math.abs(h)>n.threshold||s.allowThresholdMove){if(!s.allowThresholdMove){s.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,s.currentTranslate=s.startTranslate,r.diff=t.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY;return}}else{s.currentTranslate=s.startTranslate;return}!n.followFinger||n.cssMode||((n.freeMode&&n.freeMode.enabled&&t.freeMode||n.watchSlidesProgress)&&(t.updateActiveIndex(),t.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&t.freeMode&&t.freeMode.onTouchMove(),t.updateProgress(s.currentTranslate),t.setTranslate(s.currentTranslate))}function Tt(i){const e=this,t=e.touchEventsData;let s=i;s.originalEvent&&(s=s.originalEvent);let n;if(s.type==="touchend"||s.type==="touchcancel"){if(n=[...s.changedTouches].filter(T=>T.identifier===t.touchId)[0],!n||n.identifier!==t.touchId)return}else{if(t.touchId!==null||s.pointerId!==t.pointerId)return;n=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)&&!(["pointercancel","contextmenu"].includes(s.type)&&(e.browser.isSafari||e.browser.isWebView)))return;t.pointerId=null,t.touchId=null;const{params:a,touches:o,rtlTranslate:l,slidesGrid:d,enabled:c}=e;if(!c||!a.simulateTouch&&s.pointerType==="mouse")return;if(t.allowTouchCallbacks&&e.emit("touchEnd",s),t.allowTouchCallbacks=!1,!t.isTouched){t.isMoved&&a.grabCursor&&e.setGrabCursor(!1),t.isMoved=!1,t.startMoving=!1;return}a.grabCursor&&t.isMoved&&t.isTouched&&(e.allowSlideNext===!0||e.allowSlidePrev===!0)&&e.setGrabCursor(!1);const f=$(),p=f-t.touchStartTime;if(e.allowClick){const T=s.path||s.composedPath&&s.composedPath();e.updateClickedSlide(T&&T[0]||s.target,T),e.emit("tap click",s),p<300&&f-t.lastClickTime<300&&e.emit("doubleTap doubleClick",s)}if(t.lastClickTime=$(),U(()=>{e.destroyed||(e.allowClick=!0)}),!t.isTouched||!t.isMoved||!e.swipeDirection||o.diff===0&&!t.loopSwapReset||t.currentTranslate===t.startTranslate&&!t.loopSwapReset){t.isTouched=!1,t.isMoved=!1,t.startMoving=!1;return}t.isTouched=!1,t.isMoved=!1,t.startMoving=!1;let u;if(a.followFinger?u=l?e.translate:-e.translate:u=-t.currentTranslate,a.cssMode)return;if(a.freeMode&&a.freeMode.enabled){e.freeMode.onTouchEnd({currentPos:u});return}const h=u>=-e.maxTranslate()&&!e.params.loop;let g=0,E=e.slidesSizesGrid[0];for(let T=0;T<d.length;T+=T<a.slidesPerGroupSkip?1:a.slidesPerGroup){const M=T<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;typeof d[T+M]<"u"?(h||u>=d[T]&&u<d[T+M])&&(g=T,E=d[T+M]-d[T]):(h||u>=d[T])&&(g=T,E=d[d.length-1]-d[d.length-2])}let m=null,y=null;a.rewind&&(e.isBeginning?y=a.virtual&&a.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const v=(u-d[g])/E,S=g<a.slidesPerGroupSkip-1?1:a.slidesPerGroup;if(p>a.longSwipesMs){if(!a.longSwipes){e.slideTo(e.activeIndex);return}e.swipeDirection==="next"&&(v>=a.longSwipesRatio?e.slideTo(a.rewind&&e.isEnd?m:g+S):e.slideTo(g)),e.swipeDirection==="prev"&&(v>1-a.longSwipesRatio?e.slideTo(g+S):y!==null&&v<0&&Math.abs(v)>a.longSwipesRatio?e.slideTo(y):e.slideTo(g))}else{if(!a.shortSwipes){e.slideTo(e.activeIndex);return}e.navigation&&(s.target===e.navigation.nextEl||s.target===e.navigation.prevEl)?s.target===e.navigation.nextEl?e.slideTo(g+S):e.slideTo(g):(e.swipeDirection==="next"&&e.slideTo(m!==null?m:g+S),e.swipeDirection==="prev"&&e.slideTo(y!==null?y:g))}}function ae(){const i=this,{params:e,el:t}=i;if(t&&t.offsetWidth===0)return;e.breakpoints&&i.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:n,snapGrid:r}=i,a=i.virtual&&i.params.virtual.enabled;i.allowSlideNext=!0,i.allowSlidePrev=!0,i.updateSize(),i.updateSlides(),i.updateSlidesClasses();const o=a&&e.loop;(e.slidesPerView==="auto"||e.slidesPerView>1)&&i.isEnd&&!i.isBeginning&&!i.params.centeredSlides&&!o?i.slideTo(i.slides.length-1,0,!1,!0):i.params.loop&&!a?i.slideToLoop(i.realIndex,0,!1,!0):i.slideTo(i.activeIndex,0,!1,!0),i.autoplay&&i.autoplay.running&&i.autoplay.paused&&(clearTimeout(i.autoplay.resizeTimeout),i.autoplay.resizeTimeout=setTimeout(()=>{i.autoplay&&i.autoplay.running&&i.autoplay.paused&&i.autoplay.resume()},500)),i.allowSlidePrev=n,i.allowSlideNext=s,i.params.watchOverflow&&r!==i.snapGrid&&i.checkOverflow()}function xt(i){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&i.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(i.stopPropagation(),i.stopImmediatePropagation())))}function bt(){const i=this,{wrapperEl:e,rtlTranslate:t,enabled:s}=i;if(!s)return;i.previousTranslate=i.translate,i.isHorizontal()?i.translate=-e.scrollLeft:i.translate=-e.scrollTop,i.translate===0&&(i.translate=0),i.updateActiveIndex(),i.updateSlidesClasses();let n;const r=i.maxTranslate()-i.minTranslate();r===0?n=0:n=(i.translate-i.minTranslate())/r,n!==i.progress&&i.updateProgress(t?-i.translate:i.translate),i.emit("setTranslate",i.translate,!1)}function yt(i){const e=this;R(e,i.target),!(e.params.cssMode||e.params.slidesPerView!=="auto"&&!e.params.autoHeight)&&e.update()}function Et(){const i=this;i.documentTouchHandlerProceeded||(i.documentTouchHandlerProceeded=!0,i.params.touchReleaseOnEdges&&(i.el.style.touchAction="auto"))}const he=(i,e)=>{const t=B(),{params:s,el:n,wrapperEl:r,device:a}=i,o=!!s.nested,l=e==="on"?"addEventListener":"removeEventListener",d=e;t[l]("touchstart",i.onDocumentTouchStart,{passive:!1,capture:o}),n[l]("touchstart",i.onTouchStart,{passive:!1}),n[l]("pointerdown",i.onTouchStart,{passive:!1}),t[l]("touchmove",i.onTouchMove,{passive:!1,capture:o}),t[l]("pointermove",i.onTouchMove,{passive:!1,capture:o}),t[l]("touchend",i.onTouchEnd,{passive:!0}),t[l]("pointerup",i.onTouchEnd,{passive:!0}),t[l]("pointercancel",i.onTouchEnd,{passive:!0}),t[l]("touchcancel",i.onTouchEnd,{passive:!0}),t[l]("pointerout",i.onTouchEnd,{passive:!0}),t[l]("pointerleave",i.onTouchEnd,{passive:!0}),t[l]("contextmenu",i.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&n[l]("click",i.onClick,!0),s.cssMode&&r[l]("scroll",i.onScroll),s.updateOnWindowResize?i[d](a.ios||a.android?"resize orientationchange observerUpdate":"resize observerUpdate",ae,!0):i[d]("observerUpdate",ae,!0),n[l]("load",i.onLoad,{capture:!0})};function Pt(){const i=this,{params:e}=i;i.onTouchStart=wt.bind(i),i.onTouchMove=St.bind(i),i.onTouchEnd=Tt.bind(i),i.onDocumentTouchStart=Et.bind(i),e.cssMode&&(i.onScroll=bt.bind(i)),i.onClick=xt.bind(i),i.onLoad=yt.bind(i),he(i,"on")}function Mt(){he(this,"off")}var It={attachEvents:Pt,detachEvents:Mt};const oe=(i,e)=>i.grid&&e.grid&&e.grid.rows>1;function Ct(){const i=this,{realIndex:e,initialized:t,params:s,el:n}=i,r=s.breakpoints;if(!r||r&&Object.keys(r).length===0)return;const a=i.getBreakpoint(r,i.params.breakpointsBase,i.el);if(!a||i.currentBreakpoint===a)return;const l=(a in r?r[a]:void 0)||i.originalParams,d=oe(i,s),c=oe(i,l),f=s.enabled;d&&!c?(n.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),i.emitContainerClasses()):!d&&c&&(n.classList.add(`${s.containerModifierClass}grid`),(l.grid.fill&&l.grid.fill==="column"||!l.grid.fill&&s.grid.fill==="column")&&n.classList.add(`${s.containerModifierClass}grid-column`),i.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach(m=>{if(typeof l[m]>"u")return;const y=s[m]&&s[m].enabled,v=l[m]&&l[m].enabled;y&&!v&&i[m].disable(),!y&&v&&i[m].enable()});const p=l.direction&&l.direction!==s.direction,u=s.loop&&(l.slidesPerView!==s.slidesPerView||p),h=s.loop;p&&t&&i.changeDirection(),z(i.params,l);const g=i.params.enabled,E=i.params.loop;Object.assign(i,{allowTouchMove:i.params.allowTouchMove,allowSlideNext:i.params.allowSlideNext,allowSlidePrev:i.params.allowSlidePrev}),f&&!g?i.disable():!f&&g&&i.enable(),i.currentBreakpoint=a,i.emit("_beforeBreakpoint",l),t&&(u?(i.loopDestroy(),i.loopCreate(e),i.updateSlides()):!h&&E?(i.loopCreate(e),i.updateSlides()):h&&!E&&i.loopDestroy()),i.emit("breakpoint",l)}function Lt(i,e,t){if(e===void 0&&(e="window"),!i||e==="container"&&!t)return;let s=!1;const n=O(),r=e==="window"?n.innerHeight:t.clientHeight,a=Object.keys(i).map(o=>{if(typeof o=="string"&&o.indexOf("@")===0){const l=parseFloat(o.substr(1));return{value:r*l,point:o}}return{value:o,point:o}});a.sort((o,l)=>parseInt(o.value,10)-parseInt(l.value,10));for(let o=0;o<a.length;o+=1){const{point:l,value:d}=a[o];e==="window"?n.matchMedia(`(min-width: ${d}px)`).matches&&(s=l):d<=t.clientWidth&&(s=l)}return s||"max"}var zt={setBreakpoint:Ct,getBreakpoint:Lt};function Ot(i,e){const t=[];return i.forEach(s=>{typeof s=="object"?Object.keys(s).forEach(n=>{s[n]&&t.push(e+n)}):typeof s=="string"&&t.push(e+s)}),t}function At(){const i=this,{classNames:e,params:t,rtl:s,el:n,device:r}=i,a=Ot(["initialized",t.direction,{"free-mode":i.params.freeMode&&t.freeMode.enabled},{autoheight:t.autoHeight},{rtl:s},{grid:t.grid&&t.grid.rows>1},{"grid-column":t.grid&&t.grid.rows>1&&t.grid.fill==="column"},{android:r.android},{ios:r.ios},{"css-mode":t.cssMode},{centered:t.cssMode&&t.centeredSlides},{"watch-progress":t.watchSlidesProgress}],t.containerModifierClass);e.push(...a),n.classList.add(...e),i.emitContainerClasses()}function Gt(){const i=this,{el:e,classNames:t}=i;e.classList.remove(...t),i.emitContainerClasses()}var kt={addClasses:At,removeClasses:Gt};function Dt(){const i=this,{isLocked:e,params:t}=i,{slidesOffsetBefore:s}=t;if(s){const n=i.slides.length-1,r=i.slidesGrid[n]+i.slidesSizesGrid[n]+s*2;i.isLocked=i.size>r}else i.isLocked=i.snapGrid.length===1;t.allowSlideNext===!0&&(i.allowSlideNext=!i.isLocked),t.allowSlidePrev===!0&&(i.allowSlidePrev=!i.isLocked),e&&e!==i.isLocked&&(i.isEnd=!1),e!==i.isLocked&&i.emit(i.isLocked?"lock":"unlock")}var Vt={checkOverflow:Dt},de={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function Ft(i,e){return function(s){s===void 0&&(s={});const n=Object.keys(s)[0],r=s[n];if(typeof r!="object"||r===null){z(e,s);return}if(i[n]===!0&&(i[n]={enabled:!0}),n==="navigation"&&i[n]&&i[n].enabled&&!i[n].prevEl&&!i[n].nextEl&&(i[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&i[n]&&i[n].enabled&&!i[n].el&&(i[n].auto=!0),!(n in i&&"enabled"in r)){z(e,s);return}typeof i[n]=="object"&&!("enabled"in i[n])&&(i[n].enabled=!0),i[n]||(i[n]={enabled:!1}),z(e,s)}}const X={eventsEmitter:ke,update:je,translate:Je,transition:tt,slide:dt,loop:pt,grabCursor:gt,events:It,breakpoints:zt,checkOverflow:Vt,classes:kt},K={};class A{constructor(){let e,t;for(var s=arguments.length,n=new Array(s),r=0;r<s;r++)n[r]=arguments[r];n.length===1&&n[0].constructor&&Object.prototype.toString.call(n[0]).slice(8,-1)==="Object"?t=n[0]:[e,t]=n,t||(t={}),t=z({},t),e&&!t.el&&(t.el=e);const a=B();if(t.el&&typeof t.el=="string"&&a.querySelectorAll(t.el).length>1){const c=[];return a.querySelectorAll(t.el).forEach(f=>{const p=z({},t,{el:f});c.push(new A(p))}),c}const o=this;o.__swiper__=!0,o.support=ue(),o.device=Le({userAgent:t.userAgent}),o.browser=Oe(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],t.modules&&Array.isArray(t.modules)&&o.modules.push(...t.modules);const l={};o.modules.forEach(c=>{c({params:t,swiper:o,extendParams:Ft(t,l),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})});const d=z({},de,l);return o.params=z({},d,K,t),o.originalParams=z({},o.params),o.passedParams=z({},t),o.params&&o.params.on&&Object.keys(o.params.on).forEach(c=>{o.on(c,o.params.on[c])}),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return o.params.direction==="horizontal"},isVertical(){return o.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:t,params:s}=this,n=G(t,`.${s.slideClass}, swiper-slide`),r=re(n[0]);return re(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter(t=>t.getAttribute("data-swiper-slide-index")*1===e)[0])}recalcSlides(){const e=this,{slidesEl:t,params:s}=e;e.slides=G(t,`.${s.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){const s=this;e=Math.min(Math.max(e,0),1);const n=s.minTranslate(),a=(s.maxTranslate()-n)*e+n;s.translateTo(a,typeof t>"u"?0:t),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=e.el.className.split(" ").filter(s=>s.indexOf("swiper")===0||s.indexOf(e.params.containerModifierClass)===0);e.emit("_containerClasses",t.join(" "))}getSlideClasses(e){const t=this;return t.destroyed?"":e.className.split(" ").filter(s=>s.indexOf("swiper-slide")===0||s.indexOf(t.params.slideClass)===0).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const t=[];e.slides.forEach(s=>{const n=e.getSlideClasses(s);t.push({slideEl:s,classNames:n}),e.emit("_slideClass",s,n)}),e.emit("_slideClasses",t)}slidesPerViewDynamic(e,t){e===void 0&&(e="current"),t===void 0&&(t=!1);const s=this,{params:n,slides:r,slidesGrid:a,slidesSizesGrid:o,size:l,activeIndex:d}=s;let c=1;if(typeof n.slidesPerView=="number")return n.slidesPerView;if(n.centeredSlides){let f=r[d]?r[d].swiperSlideSize:0,p;for(let u=d+1;u<r.length;u+=1)r[u]&&!p&&(f+=r[u].swiperSlideSize,c+=1,f>l&&(p=!0));for(let u=d-1;u>=0;u-=1)r[u]&&!p&&(f+=r[u].swiperSlideSize,c+=1,f>l&&(p=!0))}else if(e==="current")for(let f=d+1;f<r.length;f+=1)(t?a[f]+o[f]-a[d]<l:a[f]-a[d]<l)&&(c+=1);else for(let f=d-1;f>=0;f-=1)a[d]-a[f]<l&&(c+=1);return c}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:s}=e;s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(a=>{a.complete&&R(e,a)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses();function n(){const a=e.rtlTranslate?e.translate*-1:e.translate,o=Math.min(Math.max(a,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.freeMode&&s.freeMode.enabled&&!s.cssMode)n(),s.autoHeight&&e.updateAutoHeight();else{if((s.slidesPerView==="auto"||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const a=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(a.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||n()}s.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t){t===void 0&&(t=!0);const s=this,n=s.params.direction;return e||(e=n==="horizontal"?"vertical":"horizontal"),e===n||e!=="horizontal"&&e!=="vertical"||(s.el.classList.remove(`${s.params.containerModifierClass}${n}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach(r=>{e==="vertical"?r.style.width="":r.style.height=""}),s.emit("changeDirection"),t&&s.update()),s}changeLanguageDirection(e){const t=this;t.rtl&&e==="rtl"||!t.rtl&&e==="ltr"||(t.rtl=e==="rtl",t.rtlTranslate=t.params.direction==="horizontal"&&t.rtl,t.rtl?(t.el.classList.add(`${t.params.containerModifierClass}rtl`),t.el.dir="rtl"):(t.el.classList.remove(`${t.params.containerModifierClass}rtl`),t.el.dir="ltr"),t.update())}mount(e){const t=this;if(t.mounted)return!0;let s=e||t.params.el;if(typeof s=="string"&&(s=document.querySelector(s)),!s)return!1;s.swiper=t,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName==="SWIPER-CONTAINER"&&(t.isElement=!0);const n=()=>`.${(t.params.wrapperClass||"").trim().split(" ").join(".")}`;let a=(()=>s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(n()):G(s,n())[0])();return!a&&t.params.createElements&&(a=J("div",t.params.wrapperClass),s.append(a),G(s,`.${t.params.slideClass}`).forEach(o=>{a.append(o)})),Object.assign(t,{el:s,wrapperEl:a,slidesEl:t.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:a,hostEl:t.isElement?s.parentNode.host:s,mounted:!0,rtl:s.dir.toLowerCase()==="rtl"||D(s,"direction")==="rtl",rtlTranslate:t.params.direction==="horizontal"&&(s.dir.toLowerCase()==="rtl"||D(s,"direction")==="rtl"),wrongRTL:D(a,"display")==="-webkit-box"}),!0}init(e){const t=this;if(t.initialized||t.mount(e)===!1)return t;t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.loop&&t.virtual&&t.params.virtual.enabled?t.slideTo(t.params.initialSlide+t.virtual.slidesBefore,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.params.loop&&t.loopCreate(),t.attachEvents();const n=[...t.el.querySelectorAll('[loading="lazy"]')];return t.isElement&&n.push(...t.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach(r=>{r.complete?R(t,r):r.addEventListener("load",a=>{R(t,a.target)})}),Q(t),t.initialized=!0,Q(t),t.emit("init"),t.emit("afterInit"),t}destroy(e,t){e===void 0&&(e=!0),t===void 0&&(t=!0);const s=this,{params:n,el:r,wrapperEl:a,slides:o}=s;return typeof s.params>"u"||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),n.loop&&s.loopDestroy(),t&&(s.removeClasses(),r.removeAttribute("style"),a.removeAttribute("style"),o&&o.length&&o.forEach(l=>{l.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),l.removeAttribute("style"),l.removeAttribute("data-swiper-slide-index")})),s.emit("destroy"),Object.keys(s.eventsListeners).forEach(l=>{s.off(l)}),e!==!1&&(s.el.swiper=null,Te(s)),s.destroyed=!0),null}static extendDefaults(e){z(K,e)}static get extendedDefaults(){return K}static get defaults(){return de}static installModule(e){A.prototype.__modules__||(A.prototype.__modules__=[]);const t=A.prototype.__modules__;typeof e=="function"&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?(e.forEach(t=>A.installModule(t)),A):(A.installModule(e),A)}}Object.keys(X).forEach(i=>{Object.keys(X[i]).forEach(e=>{A.prototype[e]=X[i][e]})});A.use([Ae,Ge]);export{A as S,G as a,ne as b,J as c,de as d,_t as e,re as f,Bt as g,Me as h,B as i};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
