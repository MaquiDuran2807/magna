import{u as pe,_ as U,b as _n,Q as Mn,c as An,R as Pn}from"./@tanstack/react-query-devtools-a5fc292d.js";import{l as kn,j as c}from"./spinner-75e68d5d.js";import{r as u,a as M,g as jt}from"./react-1cdf6ce0.js";import{r as In,a as ce}from"./react-dom-983a5519.js";import{L as se,N as st,a as Dn,O as $n,b as Bn,c as zn,R as Fn}from"./react-router-dom-3d2ba1f5.js";import{a as Vn}from"./axios-28bc18a3.js";import{d as Hn,S as Kn,a as qn,c as Tt,b as Wn,f as Be,h as Un,i as Me}from"./swiper-dad05047.js";import{m as Gn}from"./framer-motion-e3192eb3.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const r of s)if(r.type==="childList")for(const i of r.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&n(i)}).observe(document,{childList:!0,subtree:!0});function a(s){const r={};return s.integrity&&(r.integrity=s.integrity),s.referrerPolicy&&(r.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?r.credentials="include":s.crossOrigin==="anonymous"?r.credentials="omit":r.credentials="same-origin",r}function n(s){if(s.ep)return;s.ep=!0;const r=a(s);fetch(s.href,r)}})();var ze={},it=In;ze.createRoot=it.createRoot,ze.hydrateRoot=it.hydrateRoot;function Xn(t,e){var a=t==null?null:typeof Symbol<"u"&&t[Symbol.iterator]||t["@@iterator"];if(a!=null){var n,s,r,i,l=[],o=!0,m=!1;try{if(r=(a=a.call(t)).next,e===0){if(Object(a)!==a)return;o=!1}else for(;!(o=(n=r.call(a)).done)&&(l.push(n.value),l.length!==e);o=!0);}catch(p){m=!0,s=p}finally{try{if(!o&&a.return!=null&&(i=a.return(),Object(i)!==i))return}finally{if(m)throw s}}return l}}function ot(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(s){return Object.getOwnPropertyDescriptor(t,s).enumerable})),a.push.apply(a,n)}return a}function ye(t){for(var e=1;e<arguments.length;e++){var a=arguments[e]!=null?arguments[e]:{};e%2?ot(Object(a),!0).forEach(function(n){Yn(t,n,a[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):ot(Object(a)).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(a,n))})}return t}function Yn(t,e,a){return e=aa(e),e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function Qn(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}function Ot(t,e){if(t==null)return{};var a=Qn(t,e),n,s;if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(s=0;s<r.length;s++)n=r[s],!(e.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}function Zn(t,e){return Jn(t)||Xn(t,e)||ea(t,e)||ta()}function Jn(t){if(Array.isArray(t))return t}function ea(t,e){if(t){if(typeof t=="string")return lt(t,e);var a=Object.prototype.toString.call(t).slice(8,-1);if(a==="Object"&&t.constructor&&(a=t.constructor.name),a==="Map"||a==="Set")return Array.from(t);if(a==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(a))return lt(t,e)}}function lt(t,e){(e==null||e>t.length)&&(e=t.length);for(var a=0,n=new Array(e);a<e;a++)n[a]=t[a];return n}function ta(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function na(t,e){if(typeof t!="object"||t===null)return t;var a=t[Symbol.toPrimitive];if(a!==void 0){var n=a.call(t,e||"default");if(typeof n!="object")return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function aa(t){var e=na(t,"string");return typeof e=="symbol"?e:String(e)}var ra=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],sa=function(e,a){var n=e.animationData,s=e.loop,r=e.autoplay,i=e.initialSegment,l=e.onComplete,o=e.onLoopComplete,m=e.onEnterFrame,p=e.onSegmentStart,g=e.onConfigReady,E=e.onDataReady,T=e.onDataFailed,x=e.onLoadedImages,b=e.onDOMLoaded,y=e.onDestroy;e.lottieRef,e.renderer,e.name,e.assetsPath,e.rendererSettings;var h=Ot(e,ra),d=u.useState(!1),f=Zn(d,2),w=f[0],O=f[1],C=u.useRef(),N=u.useRef(null),A=function(){var _;(_=C.current)===null||_===void 0||_.play()},j=function(){var _;(_=C.current)===null||_===void 0||_.stop()},I=function(){var _;(_=C.current)===null||_===void 0||_.pause()},D=function(_){var B;(B=C.current)===null||B===void 0||B.setSpeed(_)},V=function(_,B){var F;(F=C.current)===null||F===void 0||F.goToAndPlay(_,B)},k=function(_,B){var F;(F=C.current)===null||F===void 0||F.goToAndStop(_,B)},v=function(_){var B;(B=C.current)===null||B===void 0||B.setDirection(_)},S=function(_,B){var F;(F=C.current)===null||F===void 0||F.playSegments(_,B)},L=function(_){var B;(B=C.current)===null||B===void 0||B.setSubframe(_)},H=function(_){var B;return(B=C.current)===null||B===void 0?void 0:B.getDuration(_)},R=function(){var _;(_=C.current)===null||_===void 0||_.destroy(),C.current=void 0},P=function(){var _=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},B;if(N.current){(B=C.current)===null||B===void 0||B.destroy();var F=ye(ye(ye({},e),_),{},{container:N.current});return C.current=kn.loadAnimation(F),O(!!C.current),function(){var K;(K=C.current)===null||K===void 0||K.destroy(),C.current=void 0}}};u.useEffect(function(){var $=P();return function(){return $==null?void 0:$()}},[n,s]),u.useEffect(function(){C.current&&(C.current.autoplay=!!r)},[r]),u.useEffect(function(){if(C.current){if(!i){C.current.resetSegments(!0);return}!Array.isArray(i)||!i.length||((C.current.currentRawFrame<i[0]||C.current.currentRawFrame>i[1])&&(C.current.currentRawFrame=i[0]),C.current.setSegment(i[0],i[1]))}},[i]),u.useEffect(function(){var $=[{name:"complete",handler:l},{name:"loopComplete",handler:o},{name:"enterFrame",handler:m},{name:"segmentStart",handler:p},{name:"config_ready",handler:g},{name:"data_ready",handler:E},{name:"data_failed",handler:T},{name:"loaded_images",handler:x},{name:"DOMLoaded",handler:b},{name:"destroy",handler:y}],_=$.filter(function(F){return F.handler!=null});if(_.length){var B=_.map(function(F){var K;return(K=C.current)===null||K===void 0||K.addEventListener(F.name,F.handler),function(){var Q;(Q=C.current)===null||Q===void 0||Q.removeEventListener(F.name,F.handler)}});return function(){B.forEach(function(F){return F()})}}},[l,o,m,p,g,E,T,x,b,y]);var z=M.createElement("div",ye({style:a,ref:N},h));return{View:z,play:A,stop:j,pause:I,setSpeed:D,goToAndStop:k,goToAndPlay:V,setDirection:v,playSegments:S,setSubframe:L,getDuration:H,destroy:R,animationContainerRef:N,animationLoaded:w,animationItem:C.current}};function ia(t){var e=t.getBoundingClientRect(),a=e.top,n=e.height,s=window.innerHeight-a,r=window.innerHeight+n;return s/r}function oa(t,e,a){var n=t.getBoundingClientRect(),s=n.top,r=n.left,i=n.width,l=n.height,o=(e-r)/i,m=(a-s)/l;return{x:o,y:m}}var la=function(e){var a=e.wrapperRef,n=e.animationItem,s=e.mode,r=e.actions;u.useEffect(function(){var i=a.current;if(!(!i||!n||!r.length)){n.stop();var l=function(){var p=null,g=function(){var T=ia(i),x=r.find(function(y){var h=y.visibility;return h&&T>=h[0]&&T<=h[1]});if(x){if(x.type==="seek"&&x.visibility&&x.frames.length===2){var b=x.frames[0]+Math.ceil((T-x.visibility[0])/(x.visibility[1]-x.visibility[0])*x.frames[1]);//! goToAndStop must be relative to the start of the current segment
n.goToAndStop(b-n.firstFrame-1,!0)}x.type==="loop"&&(p===null||p!==x.frames||n.isPaused)&&(n.playSegments(x.frames,!0),p=x.frames),x.type==="play"&&n.isPaused&&(n.resetSegments(!0),n.play()),x.type==="stop"&&n.goToAndStop(x.frames[0]-n.firstFrame-1,!0)}};return document.addEventListener("scroll",g),function(){document.removeEventListener("scroll",g)}},o=function(){var p=function(x,b){var y=x,h=b;if(y!==-1&&h!==-1){var d=oa(i,y,h);y=d.x,h=d.y}var f=r.find(function(C){var N=C.position;return N&&Array.isArray(N.x)&&Array.isArray(N.y)?y>=N.x[0]&&y<=N.x[1]&&h>=N.y[0]&&h<=N.y[1]:N&&!Number.isNaN(N.x)&&!Number.isNaN(N.y)?y===N.x&&h===N.y:!1});if(f){if(f.type==="seek"&&f.position&&Array.isArray(f.position.x)&&Array.isArray(f.position.y)&&f.frames.length===2){var w=(y-f.position.x[0])/(f.position.x[1]-f.position.x[0]),O=(h-f.position.y[0])/(f.position.y[1]-f.position.y[0]);n.playSegments(f.frames,!0),n.goToAndStop(Math.ceil((w+O)/2*(f.frames[1]-f.frames[0])),!0)}f.type==="loop"&&n.playSegments(f.frames,!0),f.type==="play"&&(n.isPaused&&n.resetSegments(!1),n.playSegments(f.frames)),f.type==="stop"&&n.goToAndStop(f.frames[0],!0)}},g=function(x){p(x.clientX,x.clientY)},E=function(){p(-1,-1)};return i.addEventListener("mousemove",g),i.addEventListener("mouseout",E),function(){i.removeEventListener("mousemove",g),i.removeEventListener("mouseout",E)}};switch(s){case"scroll":return l();case"cursor":return o()}}},[s,n])},ca=function(e){var a=e.actions,n=e.mode,s=e.lottieObj,r=s.animationItem,i=s.View,l=s.animationContainerRef;return la({actions:a,animationItem:r,mode:n,wrapperRef:l}),i},ua=["style","interactivity"],da=function(e){var a,n,s,r=e.style,i=e.interactivity,l=Ot(e,ua),o=sa(l,r),m=o.View,p=o.play,g=o.stop,E=o.pause,T=o.setSpeed,x=o.goToAndStop,b=o.goToAndPlay,y=o.setDirection,h=o.playSegments,d=o.setSubframe,f=o.getDuration,w=o.destroy,O=o.animationContainerRef,C=o.animationLoaded,N=o.animationItem;return u.useEffect(function(){e.lottieRef&&(e.lottieRef.current={play:p,stop:g,pause:E,setSpeed:T,goToAndPlay:b,goToAndStop:x,setDirection:y,playSegments:h,setSubframe:d,getDuration:f,destroy:w,animationContainerRef:O,animationLoaded:C,animationItem:N})},[(a=e.lottieRef)===null||a===void 0?void 0:a.current]),ca({lottieObj:{View:m,play:p,stop:g,pause:E,setSpeed:T,goToAndStop:x,goToAndPlay:b,setDirection:y,playSegments:h,setSubframe:d,getDuration:f,destroy:w,animationContainerRef:O,animationLoaded:C,animationItem:N},actions:(n=i==null?void 0:i.actions)!==null&&n!==void 0?n:[],mode:(s=i==null?void 0:i.mode)!==null&&s!==void 0?s:"scroll"})};const fa="Comp 2",pa=0,ma=500,va=500,ga={g:"LottieFiles AE 3.5.3"},ha=[{ty:4,nm:"Shape Layer 7",sr:1,st:0,op:30,ip:0,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:1},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:4},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:14},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:17},{s:[100,100,100],t:27}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:0,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:3.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:14,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:17.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:28}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.0431,.2392,.5686],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:1},{ty:4,nm:"Shape Layer 6",sr:1,st:1,op:31,ip:1,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:2},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:5},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:15},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:18},{s:[100,100,100],t:28}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:1,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:4.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:15,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:18.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:29}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.9882,.2392,.1294],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:2},{ty:4,nm:"Shape Layer 5",sr:1,st:2,op:32,ip:2,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:3},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:6},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:16},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:19},{s:[100,100,100],t:29}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:2,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:5.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:16,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:19.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:30}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[1,1,1],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:3}],ya="4.8.0",xa=20,ba=30,Ea=0,Ca=[],wa={nm:fa,ddd:pa,h:ma,w:va,meta:ga,layers:ha,v:ya,fr:xa,op:ba,ip:Ea,assets:Ca},ct={container:{animation:"fade-in 1s forwards",display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},lottie:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},Nt=()=>{const[t,e]=u.useState(0);return u.useEffect(()=>{const a=setInterval(()=>{e(n=>n===100?(clearInterval(a),n):n+1)},50);return()=>{clearInterval(a)}},[]),c.jsxs("div",{style:ct.container,children:[c.jsx(da,{animationData:wa,loop:!0,height:200,width:200}),c.jsxs("div",{children:[c.jsx("div",{style:ct.container,children:c.jsxs("div",{children:[t,"% Loaded"]})}),");"]})]})},Vi=Object.freeze(Object.defineProperty({__proto__:null,default:Nt},Symbol.toStringTag,{value:"Module"})),Lt="https://magnaingenieriaytopografia.com",ee=Vn.create({baseURL:Lt,headers:{"Content-type":"application/json"}});ee.interceptors.request.use(async t=>{const e=localStorage.getItem("token");return e&&(t.headers.Authorization=`JWT ${e}`),t});const Sa=async()=>{try{return(await ee.get("equipos/")).data}catch(t){console.log(t);return}},ja=async()=>{try{const t=await ee.get("servicios/servicios-and-subservicios/");return console.log(t.data,"aqui estoy en fetchServices"),t.data}catch(t){console.log(t);return}},Ta=async()=>{try{return(await ee.get("proyectos/")).data}catch(t){console.log(t);return}},Oa=async()=>{try{return(await ee.get("proyectos/images/")).data}catch(t){console.log(t);return}},Hi=async()=>{try{return(await ee.get("servicios/brochure/")).data}catch(t){console.log(t);return}},Na="/static/static/nosotros-f0edd203.jpg",La="/static/static/servicios-b9ae097a.png",Ra="/static/static/projects-d98326dc.png",_a="/static/static/topo-01ca573f.png",Ma="/static/static/ingenieria-0e1c6d5d.png",Aa="/static/static/medio-df076d7d.png",Pa=async()=>{const t=await[Na,La,Ra,_a,Ma,Aa],e=await[];await t.forEach(a=>{const n=new Image;n.src=a,e.push(n)})},ka=({children:t})=>{const{error:e,isError:a}=pe({queryKey:["workers"],queryFn:Sa,staleTime:18e5,refetchOnWindowFocus:!1,refetchInterval:18e5}),{data:n,error:s,isLoading:r,isError:i}=pe({queryKey:["services"],queryFn:ja,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30});console.log(n,"aqui estoy en servicios");const{error:l,isError:o}=pe({queryKey:["projects"],queryFn:Ta,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30}),{error:m}=pe({queryKey:["projectsImages"],queryFn:Oa,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30});return r&&console.log("loading"),(a||i||o)&&console.log(e,s,l,m,"aqui estoy en error"),Pa(),c.jsx(c.Fragment,{children:t})},Rt=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function ie(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"&&!t.__swiper__}function ue(t,e){const a=["__proto__","constructor","prototype"];Object.keys(e).filter(n=>a.indexOf(n)<0).forEach(n=>{typeof t[n]>"u"?t[n]=e[n]:ie(e[n])&&ie(t[n])&&Object.keys(e[n]).length>0?e[n].__swiper__?t[n]=e[n]:ue(t[n],e[n]):t[n]=e[n]})}function _t(t){return t===void 0&&(t={}),t.navigation&&typeof t.navigation.nextEl>"u"&&typeof t.navigation.prevEl>"u"}function Mt(t){return t===void 0&&(t={}),t.pagination&&typeof t.pagination.el>"u"}function At(t){return t===void 0&&(t={}),t.scrollbar&&typeof t.scrollbar.el>"u"}function Pt(t){t===void 0&&(t="");const e=t.split(" ").map(n=>n.trim()).filter(n=>!!n),a=[];return e.forEach(n=>{a.indexOf(n)<0&&a.push(n)}),a.join(" ")}function Ia(t){return t===void 0&&(t=""),t?t.includes("swiper-wrapper")?t:`swiper-wrapper ${t}`:"swiper-wrapper"}function Da(t){let{swiper:e,slides:a,passedParams:n,changedParams:s,nextEl:r,prevEl:i,scrollbarEl:l,paginationEl:o}=t;const m=s.filter(j=>j!=="children"&&j!=="direction"&&j!=="wrapperClass"),{params:p,pagination:g,navigation:E,scrollbar:T,virtual:x,thumbs:b}=e;let y,h,d,f,w,O,C,N;s.includes("thumbs")&&n.thumbs&&n.thumbs.swiper&&p.thumbs&&!p.thumbs.swiper&&(y=!0),s.includes("controller")&&n.controller&&n.controller.control&&p.controller&&!p.controller.control&&(h=!0),s.includes("pagination")&&n.pagination&&(n.pagination.el||o)&&(p.pagination||p.pagination===!1)&&g&&!g.el&&(d=!0),s.includes("scrollbar")&&n.scrollbar&&(n.scrollbar.el||l)&&(p.scrollbar||p.scrollbar===!1)&&T&&!T.el&&(f=!0),s.includes("navigation")&&n.navigation&&(n.navigation.prevEl||i)&&(n.navigation.nextEl||r)&&(p.navigation||p.navigation===!1)&&E&&!E.prevEl&&!E.nextEl&&(w=!0);const A=j=>{e[j]&&(e[j].destroy(),j==="navigation"?(e.isElement&&(e[j].prevEl.remove(),e[j].nextEl.remove()),p[j].prevEl=void 0,p[j].nextEl=void 0,e[j].prevEl=void 0,e[j].nextEl=void 0):(e.isElement&&e[j].el.remove(),p[j].el=void 0,e[j].el=void 0))};s.includes("loop")&&e.isElement&&(p.loop&&!n.loop?O=!0:!p.loop&&n.loop?C=!0:N=!0),m.forEach(j=>{if(ie(p[j])&&ie(n[j]))Object.assign(p[j],n[j]),(j==="navigation"||j==="pagination"||j==="scrollbar")&&"enabled"in n[j]&&!n[j].enabled&&A(j);else{const I=n[j];(I===!0||I===!1)&&(j==="navigation"||j==="pagination"||j==="scrollbar")?I===!1&&A(j):p[j]=n[j]}}),m.includes("controller")&&!h&&e.controller&&e.controller.control&&p.controller&&p.controller.control&&(e.controller.control=p.controller.control),s.includes("children")&&a&&x&&p.virtual.enabled?(x.slides=a,x.update(!0)):s.includes("virtual")&&x&&p.virtual.enabled&&(a&&(x.slides=a),x.update(!0)),s.includes("children")&&a&&p.loop&&(N=!0),y&&b.init()&&b.update(!0),h&&(e.controller.control=p.controller.control),d&&(e.isElement&&(!o||typeof o=="string")&&(o=document.createElement("div"),o.classList.add("swiper-pagination"),o.part.add("pagination"),e.el.appendChild(o)),o&&(p.pagination.el=o),g.init(),g.render(),g.update()),f&&(e.isElement&&(!l||typeof l=="string")&&(l=document.createElement("div"),l.classList.add("swiper-scrollbar"),l.part.add("scrollbar"),e.el.appendChild(l)),l&&(p.scrollbar.el=l),T.init(),T.updateSize(),T.setTranslate()),w&&(e.isElement&&((!r||typeof r=="string")&&(r=document.createElement("div"),r.classList.add("swiper-button-next"),r.innerHTML=e.hostEl.constructor.nextButtonSvg,r.part.add("button-next"),e.el.appendChild(r)),(!i||typeof i=="string")&&(i=document.createElement("div"),i.classList.add("swiper-button-prev"),i.innerHTML=e.hostEl.constructor.prevButtonSvg,i.part.add("button-prev"),e.el.appendChild(i))),r&&(p.navigation.nextEl=r),i&&(p.navigation.prevEl=i),E.init(),E.update()),s.includes("allowSlideNext")&&(e.allowSlideNext=n.allowSlideNext),s.includes("allowSlidePrev")&&(e.allowSlidePrev=n.allowSlidePrev),s.includes("direction")&&e.changeDirection(n.direction,!1),(O||N)&&e.loopDestroy(),(C||N)&&e.loopCreate(),e.update()}function $a(t,e){t===void 0&&(t={}),e===void 0&&(e=!0);const a={on:{}},n={},s={};ue(a,Hn),a._emitClasses=!0,a.init=!1;const r={},i=Rt.map(o=>o.replace(/_/,"")),l=Object.assign({},t);return Object.keys(l).forEach(o=>{typeof t[o]>"u"||(i.indexOf(o)>=0?ie(t[o])?(a[o]={},s[o]={},ue(a[o],t[o]),ue(s[o],t[o])):(a[o]=t[o],s[o]=t[o]):o.search(/on[A-Z]/)===0&&typeof t[o]=="function"?e?n[`${o[2].toLowerCase()}${o.substr(3)}`]=t[o]:a.on[`${o[2].toLowerCase()}${o.substr(3)}`]=t[o]:r[o]=t[o])}),["navigation","pagination","scrollbar"].forEach(o=>{a[o]===!0&&(a[o]={}),a[o]===!1&&delete a[o]}),{params:a,passedParams:s,rest:r,events:n}}function Ba(t,e){let{el:a,nextEl:n,prevEl:s,paginationEl:r,scrollbarEl:i,swiper:l}=t;_t(e)&&n&&s&&(l.params.navigation.nextEl=n,l.originalParams.navigation.nextEl=n,l.params.navigation.prevEl=s,l.originalParams.navigation.prevEl=s),Mt(e)&&r&&(l.params.pagination.el=r,l.originalParams.pagination.el=r),At(e)&&i&&(l.params.scrollbar.el=i,l.originalParams.scrollbar.el=i),l.init(a)}function za(t,e,a,n,s){const r=[];if(!e)return r;const i=o=>{r.indexOf(o)<0&&r.push(o)};if(a&&n){const o=n.map(s),m=a.map(s);o.join("")!==m.join("")&&i("children"),n.length!==a.length&&i("children")}return Rt.filter(o=>o[0]==="_").map(o=>o.replace(/_/,"")).forEach(o=>{if(o in t&&o in e)if(ie(t[o])&&ie(e[o])){const m=Object.keys(t[o]),p=Object.keys(e[o]);m.length!==p.length?i(o):(m.forEach(g=>{t[o][g]!==e[o][g]&&i(o)}),p.forEach(g=>{t[o][g]!==e[o][g]&&i(o)}))}else t[o]!==e[o]&&i(o)}),r}const Fa=t=>{!t||t.destroyed||!t.params.virtual||t.params.virtual&&!t.params.virtual.enabled||(t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.parallax&&t.params.parallax&&t.params.parallax.enabled&&t.parallax.setTranslate())};function Ce(){return Ce=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t},Ce.apply(this,arguments)}function kt(t){return t.type&&t.type.displayName&&t.type.displayName.includes("SwiperSlide")}function It(t){const e=[];return M.Children.toArray(t).forEach(a=>{kt(a)?e.push(a):a.props&&a.props.children&&It(a.props.children).forEach(n=>e.push(n))}),e}function Va(t){const e=[],a={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return M.Children.toArray(t).forEach(n=>{if(kt(n))e.push(n);else if(n.props&&n.props.slot&&a[n.props.slot])a[n.props.slot].push(n);else if(n.props&&n.props.children){const s=It(n.props.children);s.length>0?s.forEach(r=>e.push(r)):a["container-end"].push(n)}else a["container-end"].push(n)}),{slides:e,slots:a}}function Ha(t,e,a){if(!a)return null;const n=p=>{let g=p;return p<0?g=e.length+p:g>=e.length&&(g=g-e.length),g},s=t.isHorizontal()?{[t.rtlTranslate?"right":"left"]:`${a.offset}px`}:{top:`${a.offset}px`},{from:r,to:i}=a,l=t.params.loop?-e.length:0,o=t.params.loop?e.length*2:e.length,m=[];for(let p=l;p<o;p+=1)p>=r&&p<=i&&m.push(e[n(p)]);return m.map((p,g)=>M.cloneElement(p,{swiper:t,style:s,key:`slide-${g}`}))}function ve(t,e){return typeof window>"u"?u.useEffect(t,e):u.useLayoutEffect(t,e)}const ut=u.createContext(null),Dt=u.createContext(null),Ka=()=>u.useContext(Dt),$t=u.forwardRef(function(t,e){let{className:a,tag:n="div",wrapperTag:s="div",children:r,onSwiper:i,...l}=t===void 0?{}:t,o=!1;const[m,p]=u.useState("swiper"),[g,E]=u.useState(null),[T,x]=u.useState(!1),b=u.useRef(!1),y=u.useRef(null),h=u.useRef(null),d=u.useRef(null),f=u.useRef(null),w=u.useRef(null),O=u.useRef(null),C=u.useRef(null),N=u.useRef(null),{params:A,passedParams:j,rest:I,events:D}=$a(l),{slides:V,slots:k}=Va(r),v=()=>{x(!T)};Object.assign(A.on,{_containerClasses(P,z){p(z)}});const S=()=>{Object.assign(A.on,D),o=!0;const P={...A};if(delete P.wrapperClass,h.current=new Kn(P),h.current.virtual&&h.current.params.virtual.enabled){h.current.virtual.slides=V;const z={cache:!1,slides:V,renderExternal:E,renderExternalUpdate:!1};ue(h.current.params.virtual,z),ue(h.current.originalParams.virtual,z)}};y.current||S(),h.current&&h.current.on("_beforeBreakpoint",v);const L=()=>{o||!D||!h.current||Object.keys(D).forEach(P=>{h.current.on(P,D[P])})},H=()=>{!D||!h.current||Object.keys(D).forEach(P=>{h.current.off(P,D[P])})};u.useEffect(()=>()=>{h.current&&h.current.off("_beforeBreakpoint",v)}),u.useEffect(()=>{!b.current&&h.current&&(h.current.emitSlidesClasses(),b.current=!0)}),ve(()=>{if(e&&(e.current=y.current),!!y.current)return h.current.destroyed&&S(),Ba({el:y.current,nextEl:w.current,prevEl:O.current,paginationEl:C.current,scrollbarEl:N.current,swiper:h.current},A),i&&i(h.current),()=>{h.current&&!h.current.destroyed&&h.current.destroy(!0,!1)}},[]),ve(()=>{L();const P=za(j,d.current,V,f.current,z=>z.key);return d.current=j,f.current=V,P.length&&h.current&&!h.current.destroyed&&Da({swiper:h.current,slides:V,passedParams:j,changedParams:P,nextEl:w.current,prevEl:O.current,scrollbarEl:N.current,paginationEl:C.current}),()=>{H()}}),ve(()=>{Fa(h.current)},[g]);function R(){return A.virtual?Ha(h.current,V,g):V.map((P,z)=>M.cloneElement(P,{swiper:h.current,swiperSlideIndex:z}))}return M.createElement(n,Ce({ref:y,className:Pt(`${m}${a?` ${a}`:""}`)},I),M.createElement(Dt.Provider,{value:h.current},k["container-start"],M.createElement(s,{className:Ia(A.wrapperClass)},k["wrapper-start"],R(),k["wrapper-end"]),_t(A)&&M.createElement(M.Fragment,null,M.createElement("div",{ref:O,className:"swiper-button-prev"}),M.createElement("div",{ref:w,className:"swiper-button-next"})),At(A)&&M.createElement("div",{ref:N,className:"swiper-scrollbar"}),Mt(A)&&M.createElement("div",{ref:C,className:"swiper-pagination"}),k["container-end"]))});$t.displayName="Swiper";const Bt=u.forwardRef(function(t,e){let{tag:a="div",children:n,className:s="",swiper:r,zoom:i,lazy:l,virtualIndex:o,swiperSlideIndex:m,...p}=t===void 0?{}:t;const g=u.useRef(null),[E,T]=u.useState("swiper-slide"),[x,b]=u.useState(!1);function y(w,O,C){O===g.current&&T(C)}ve(()=>{if(typeof m<"u"&&(g.current.swiperSlideIndex=m),e&&(e.current=g.current),!(!g.current||!r)){if(r.destroyed){E!=="swiper-slide"&&T("swiper-slide");return}return r.on("_slideClass",y),()=>{r&&r.off("_slideClass",y)}}}),ve(()=>{r&&g.current&&!r.destroyed&&T(r.getSlideClasses(g.current))},[r]);const h={isActive:E.indexOf("swiper-slide-active")>=0,isVisible:E.indexOf("swiper-slide-visible")>=0,isPrev:E.indexOf("swiper-slide-prev")>=0,isNext:E.indexOf("swiper-slide-next")>=0},d=()=>typeof n=="function"?n(h):n,f=()=>{b(!0)};return M.createElement(a,Ce({ref:g,className:Pt(`${E}${s?` ${s}`:""}`),"data-swiper-slide-index":o,onLoad:f},p),i&&M.createElement(ut.Provider,{value:h},M.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":typeof i=="number"?i:void 0},d(),l&&!x&&M.createElement("div",{className:"swiper-lazy-preloader"}))),!i&&M.createElement(ut.Provider,{value:h},d(),l&&!x&&M.createElement("div",{className:"swiper-lazy-preloader"})))});Bt.displayName="SwiperSlide";function zt(t,e,a,n){return t.params.createElements&&Object.keys(n).forEach(s=>{if(!a[s]&&a.auto===!0){let r=qn(t.el,`.${n[s]}`)[0];r||(r=Tt("div",n[s]),r.className=n[s],t.el.append(r)),a[s]=r,e[s]=r}}),a}function qa(t){let{swiper:e,extendParams:a,on:n,emit:s}=t;a({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};const r=b=>(Array.isArray(b)?b:[b]).filter(y=>!!y);function i(b){let y;return b&&typeof b=="string"&&e.isElement&&(y=e.el.querySelector(b),y)?y:(b&&(typeof b=="string"&&(y=[...document.querySelectorAll(b)]),e.params.uniqueNavElements&&typeof b=="string"&&y.length>1&&e.el.querySelectorAll(b).length===1&&(y=e.el.querySelector(b))),b&&!y?b:y)}function l(b,y){const h=e.params.navigation;b=r(b),b.forEach(d=>{d&&(d.classList[y?"add":"remove"](...h.disabledClass.split(" ")),d.tagName==="BUTTON"&&(d.disabled=y),e.params.watchOverflow&&e.enabled&&d.classList[e.isLocked?"add":"remove"](h.lockClass))})}function o(){const{nextEl:b,prevEl:y}=e.navigation;if(e.params.loop){l(y,!1),l(b,!1);return}l(y,e.isBeginning&&!e.params.rewind),l(b,e.isEnd&&!e.params.rewind)}function m(b){b.preventDefault(),!(e.isBeginning&&!e.params.loop&&!e.params.rewind)&&(e.slidePrev(),s("navigationPrev"))}function p(b){b.preventDefault(),!(e.isEnd&&!e.params.loop&&!e.params.rewind)&&(e.slideNext(),s("navigationNext"))}function g(){const b=e.params.navigation;if(e.params.navigation=zt(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(b.nextEl||b.prevEl))return;let y=i(b.nextEl),h=i(b.prevEl);Object.assign(e.navigation,{nextEl:y,prevEl:h}),y=r(y),h=r(h);const d=(f,w)=>{f&&f.addEventListener("click",w==="next"?p:m),!e.enabled&&f&&f.classList.add(...b.lockClass.split(" "))};y.forEach(f=>d(f,"next")),h.forEach(f=>d(f,"prev"))}function E(){let{nextEl:b,prevEl:y}=e.navigation;b=r(b),y=r(y);const h=(d,f)=>{d.removeEventListener("click",f==="next"?p:m),d.classList.remove(...e.params.navigation.disabledClass.split(" "))};b.forEach(d=>h(d,"next")),y.forEach(d=>h(d,"prev"))}n("init",()=>{e.params.navigation.enabled===!1?x():(g(),o())}),n("toEdge fromEdge lock unlock",()=>{o()}),n("destroy",()=>{E()}),n("enable disable",()=>{let{nextEl:b,prevEl:y}=e.navigation;if(b=r(b),y=r(y),e.enabled){o();return}[...b,...y].filter(h=>!!h).forEach(h=>h.classList.add(e.params.navigation.lockClass))}),n("click",(b,y)=>{let{nextEl:h,prevEl:d}=e.navigation;h=r(h),d=r(d);const f=y.target;if(e.params.navigation.hideOnClick&&!d.includes(f)&&!h.includes(f)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===f||e.pagination.el.contains(f)))return;let w;h.length?w=h[0].classList.contains(e.params.navigation.hiddenClass):d.length&&(w=d[0].classList.contains(e.params.navigation.hiddenClass)),s(w===!0?"navigationShow":"navigationHide"),[...h,...d].filter(O=>!!O).forEach(O=>O.classList.toggle(e.params.navigation.hiddenClass))}});const T=()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),g(),o()},x=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),E()};Object.assign(e.navigation,{enable:T,disable:x,update:o,init:g,destroy:E})}function ae(t){return t===void 0&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function Wa(t){let{swiper:e,extendParams:a,on:n,emit:s}=t;const r="swiper-pagination";a({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:d=>d,formatFractionTotal:d=>d,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let i,l=0;const o=d=>(Array.isArray(d)?d:[d]).filter(f=>!!f);function m(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&e.pagination.el.length===0}function p(d,f){const{bulletActiveClass:w}=e.params.pagination;d&&(d=d[`${f==="prev"?"previous":"next"}ElementSibling`],d&&(d.classList.add(`${w}-${f}`),d=d[`${f==="prev"?"previous":"next"}ElementSibling`],d&&d.classList.add(`${w}-${f}-${f}`)))}function g(d){const f=d.target.closest(ae(e.params.pagination.bulletClass));if(!f)return;d.preventDefault();const w=Be(f)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===w)return;e.slideToLoop(w)}else e.slideTo(w)}function E(){const d=e.rtl,f=e.params.pagination;if(m())return;let w=e.pagination.el;w=o(w);let O,C;const N=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,A=e.params.loop?Math.ceil(N/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(C=e.previousRealIndex||0,O=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):typeof e.snapIndex<"u"?(O=e.snapIndex,C=e.previousSnapIndex):(C=e.previousIndex||0,O=e.activeIndex||0),f.type==="bullets"&&e.pagination.bullets&&e.pagination.bullets.length>0){const j=e.pagination.bullets;let I,D,V;if(f.dynamicBullets&&(i=Wn(j[0],e.isHorizontal()?"width":"height",!0),w.forEach(k=>{k.style[e.isHorizontal()?"width":"height"]=`${i*(f.dynamicMainBullets+4)}px`}),f.dynamicMainBullets>1&&C!==void 0&&(l+=O-(C||0),l>f.dynamicMainBullets-1?l=f.dynamicMainBullets-1:l<0&&(l=0)),I=Math.max(O-l,0),D=I+(Math.min(j.length,f.dynamicMainBullets)-1),V=(D+I)/2),j.forEach(k=>{const v=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(S=>`${f.bulletActiveClass}${S}`)].map(S=>typeof S=="string"&&S.includes(" ")?S.split(" "):S).flat();k.classList.remove(...v)}),w.length>1)j.forEach(k=>{const v=Be(k);v===O?k.classList.add(...f.bulletActiveClass.split(" ")):e.isElement&&k.setAttribute("part","bullet"),f.dynamicBullets&&(v>=I&&v<=D&&k.classList.add(...`${f.bulletActiveClass}-main`.split(" ")),v===I&&p(k,"prev"),v===D&&p(k,"next"))});else{const k=j[O];if(k&&k.classList.add(...f.bulletActiveClass.split(" ")),e.isElement&&j.forEach((v,S)=>{v.setAttribute("part",S===O?"bullet-active":"bullet")}),f.dynamicBullets){const v=j[I],S=j[D];for(let L=I;L<=D;L+=1)j[L]&&j[L].classList.add(...`${f.bulletActiveClass}-main`.split(" "));p(v,"prev"),p(S,"next")}}if(f.dynamicBullets){const k=Math.min(j.length,f.dynamicMainBullets+4),v=(i*k-i)/2-V*i,S=d?"right":"left";j.forEach(L=>{L.style[e.isHorizontal()?S:"top"]=`${v}px`})}}w.forEach((j,I)=>{if(f.type==="fraction"&&(j.querySelectorAll(ae(f.currentClass)).forEach(D=>{D.textContent=f.formatFractionCurrent(O+1)}),j.querySelectorAll(ae(f.totalClass)).forEach(D=>{D.textContent=f.formatFractionTotal(A)})),f.type==="progressbar"){let D;f.progressbarOpposite?D=e.isHorizontal()?"vertical":"horizontal":D=e.isHorizontal()?"horizontal":"vertical";const V=(O+1)/A;let k=1,v=1;D==="horizontal"?k=V:v=V,j.querySelectorAll(ae(f.progressbarFillClass)).forEach(S=>{S.style.transform=`translate3d(0,0,0) scaleX(${k}) scaleY(${v})`,S.style.transitionDuration=`${e.params.speed}ms`})}f.type==="custom"&&f.renderCustom?(j.innerHTML=f.renderCustom(e,O+1,A),I===0&&s("paginationRender",j)):(I===0&&s("paginationRender",j),s("paginationUpdate",j)),e.params.watchOverflow&&e.enabled&&j.classList[e.isLocked?"add":"remove"](f.lockClass)})}function T(){const d=e.params.pagination;if(m())return;const f=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let w=e.pagination.el;w=o(w);let O="";if(d.type==="bullets"){let C=e.params.loop?Math.ceil(f/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&C>f&&(C=f);for(let N=0;N<C;N+=1)d.renderBullet?O+=d.renderBullet.call(e,N,d.bulletClass):O+=`<${d.bulletElement} ${e.isElement?'part="bullet"':""} class="${d.bulletClass}"></${d.bulletElement}>`}d.type==="fraction"&&(d.renderFraction?O=d.renderFraction.call(e,d.currentClass,d.totalClass):O=`<span class="${d.currentClass}"></span> / <span class="${d.totalClass}"></span>`),d.type==="progressbar"&&(d.renderProgressbar?O=d.renderProgressbar.call(e,d.progressbarFillClass):O=`<span class="${d.progressbarFillClass}"></span>`),e.pagination.bullets=[],w.forEach(C=>{d.type!=="custom"&&(C.innerHTML=O||""),d.type==="bullets"&&e.pagination.bullets.push(...C.querySelectorAll(ae(d.bulletClass)))}),d.type!=="custom"&&s("paginationRender",w[0])}function x(){e.params.pagination=zt(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const d=e.params.pagination;if(!d.el)return;let f;typeof d.el=="string"&&e.isElement&&(f=e.el.querySelector(d.el)),!f&&typeof d.el=="string"&&(f=[...document.querySelectorAll(d.el)]),f||(f=d.el),!(!f||f.length===0)&&(e.params.uniqueNavElements&&typeof d.el=="string"&&Array.isArray(f)&&f.length>1&&(f=[...e.el.querySelectorAll(d.el)],f.length>1&&(f=f.filter(w=>Un(w,".swiper")[0]===e.el)[0])),Array.isArray(f)&&f.length===1&&(f=f[0]),Object.assign(e.pagination,{el:f}),f=o(f),f.forEach(w=>{d.type==="bullets"&&d.clickable&&w.classList.add(...(d.clickableClass||"").split(" ")),w.classList.add(d.modifierClass+d.type),w.classList.add(e.isHorizontal()?d.horizontalClass:d.verticalClass),d.type==="bullets"&&d.dynamicBullets&&(w.classList.add(`${d.modifierClass}${d.type}-dynamic`),l=0,d.dynamicMainBullets<1&&(d.dynamicMainBullets=1)),d.type==="progressbar"&&d.progressbarOpposite&&w.classList.add(d.progressbarOppositeClass),d.clickable&&w.addEventListener("click",g),e.enabled||w.classList.add(d.lockClass)}))}function b(){const d=e.params.pagination;if(m())return;let f=e.pagination.el;f&&(f=o(f),f.forEach(w=>{w.classList.remove(d.hiddenClass),w.classList.remove(d.modifierClass+d.type),w.classList.remove(e.isHorizontal()?d.horizontalClass:d.verticalClass),d.clickable&&(w.classList.remove(...(d.clickableClass||"").split(" ")),w.removeEventListener("click",g))})),e.pagination.bullets&&e.pagination.bullets.forEach(w=>w.classList.remove(...d.bulletActiveClass.split(" ")))}n("changeDirection",()=>{if(!e.pagination||!e.pagination.el)return;const d=e.params.pagination;let{el:f}=e.pagination;f=o(f),f.forEach(w=>{w.classList.remove(d.horizontalClass,d.verticalClass),w.classList.add(e.isHorizontal()?d.horizontalClass:d.verticalClass)})}),n("init",()=>{e.params.pagination.enabled===!1?h():(x(),T(),E())}),n("activeIndexChange",()=>{typeof e.snapIndex>"u"&&E()}),n("snapIndexChange",()=>{E()}),n("snapGridLengthChange",()=>{T(),E()}),n("destroy",()=>{b()}),n("enable disable",()=>{let{el:d}=e.pagination;d&&(d=o(d),d.forEach(f=>f.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass)))}),n("lock unlock",()=>{E()}),n("click",(d,f)=>{const w=f.target,O=o(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&O&&O.length>0&&!w.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&w===e.navigation.nextEl||e.navigation.prevEl&&w===e.navigation.prevEl))return;const C=O[0].classList.contains(e.params.pagination.hiddenClass);s(C===!0?"paginationShow":"paginationHide"),O.forEach(N=>N.classList.toggle(e.params.pagination.hiddenClass))}});const y=()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:d}=e.pagination;d&&(d=o(d),d.forEach(f=>f.classList.remove(e.params.pagination.paginationDisabledClass))),x(),T(),E()},h=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:d}=e.pagination;d&&(d=o(d),d.forEach(f=>f.classList.add(e.params.pagination.paginationDisabledClass))),b()};Object.assign(e.pagination,{enable:y,disable:h,render:T,update:E,init:x,destroy:b})}function Ua(t){let{swiper:e,extendParams:a,on:n}=t;a({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let s=null;function r(v){const S=s;S.length!==0&&(S.innerHTML="",S.innerHTML=v)}const i=v=>(Array.isArray(v)?v:[v]).filter(S=>!!S);function l(v){v===void 0&&(v=16);const S=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(v).replace(/x/g,S)}function o(v){v=i(v),v.forEach(S=>{S.setAttribute("tabIndex","0")})}function m(v){v=i(v),v.forEach(S=>{S.setAttribute("tabIndex","-1")})}function p(v,S){v=i(v),v.forEach(L=>{L.setAttribute("role",S)})}function g(v,S){v=i(v),v.forEach(L=>{L.setAttribute("aria-roledescription",S)})}function E(v,S){v=i(v),v.forEach(L=>{L.setAttribute("aria-controls",S)})}function T(v,S){v=i(v),v.forEach(L=>{L.setAttribute("aria-label",S)})}function x(v,S){v=i(v),v.forEach(L=>{L.setAttribute("id",S)})}function b(v,S){v=i(v),v.forEach(L=>{L.setAttribute("aria-live",S)})}function y(v){v=i(v),v.forEach(S=>{S.setAttribute("aria-disabled",!0)})}function h(v){v=i(v),v.forEach(S=>{S.setAttribute("aria-disabled",!1)})}function d(v){if(v.keyCode!==13&&v.keyCode!==32)return;const S=e.params.a11y,L=v.target;e.pagination&&e.pagination.el&&(L===e.pagination.el||e.pagination.el.contains(v.target))&&!v.target.matches(ae(e.params.pagination.bulletClass))||(e.navigation&&e.navigation.nextEl&&L===e.navigation.nextEl&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?r(S.lastSlideMessage):r(S.nextSlideMessage)),e.navigation&&e.navigation.prevEl&&L===e.navigation.prevEl&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?r(S.firstSlideMessage):r(S.prevSlideMessage)),e.pagination&&L.matches(ae(e.params.pagination.bulletClass))&&L.click())}function f(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:v,prevEl:S}=e.navigation;S&&(e.isBeginning?(y(S),m(S)):(h(S),o(S))),v&&(e.isEnd?(y(v),m(v)):(h(v),o(v)))}function w(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function O(){return w()&&e.params.pagination.clickable}function C(){const v=e.params.a11y;w()&&e.pagination.bullets.forEach(S=>{e.params.pagination.clickable&&(o(S),e.params.pagination.renderBullet||(p(S,"button"),T(S,v.paginationBulletMessage.replace(/\{\{index\}\}/,Be(S)+1)))),S.matches(ae(e.params.pagination.bulletActiveClass))?S.setAttribute("aria-current","true"):S.removeAttribute("aria-current")})}const N=(v,S,L)=>{o(v),v.tagName!=="BUTTON"&&(p(v,"button"),v.addEventListener("keydown",d)),T(v,L),E(v,S)},A=()=>{e.a11y.clicked=!0},j=()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{e.destroyed||(e.a11y.clicked=!1)})})},I=v=>{if(e.a11y.clicked)return;const S=v.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!S||!e.slides.includes(S))return;const L=e.slides.indexOf(S)===e.activeIndex,H=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(S);L||H||v.sourceCapabilities&&v.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(S),0))},D=()=>{const v=e.params.a11y;v.itemRoleDescriptionMessage&&g(e.slides,v.itemRoleDescriptionMessage),v.slideRole&&p(e.slides,v.slideRole);const S=e.slides.length;v.slideLabelMessage&&e.slides.forEach((L,H)=>{const R=e.params.loop?parseInt(L.getAttribute("data-swiper-slide-index"),10):H,P=v.slideLabelMessage.replace(/\{\{index\}\}/,R+1).replace(/\{\{slidesLength\}\}/,S);T(L,P)})},V=()=>{const v=e.params.a11y;e.el.append(s);const S=e.el;v.containerRoleDescriptionMessage&&g(S,v.containerRoleDescriptionMessage),v.containerMessage&&T(S,v.containerMessage);const L=e.wrapperEl,H=v.id||L.getAttribute("id")||`swiper-wrapper-${l(16)}`,R=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";x(L,H),b(L,R),D();let{nextEl:P,prevEl:z}=e.navigation?e.navigation:{};P=i(P),z=i(z),P&&P.forEach($=>N($,H,v.nextSlideMessage)),z&&z.forEach($=>N($,H,v.prevSlideMessage)),O()&&i(e.pagination.el).forEach(_=>{_.addEventListener("keydown",d)}),e.el.addEventListener("focus",I,!0),e.el.addEventListener("pointerdown",A,!0),e.el.addEventListener("pointerup",j,!0)};function k(){s&&s.remove();let{nextEl:v,prevEl:S}=e.navigation?e.navigation:{};v=i(v),S=i(S),v&&v.forEach(L=>L.removeEventListener("keydown",d)),S&&S.forEach(L=>L.removeEventListener("keydown",d)),O()&&i(e.pagination.el).forEach(H=>{H.removeEventListener("keydown",d)}),e.el.removeEventListener("focus",I,!0),e.el.removeEventListener("pointerdown",A,!0),e.el.removeEventListener("pointerup",j,!0)}n("beforeInit",()=>{s=Tt("span",e.params.a11y.notificationClass),s.setAttribute("aria-live","assertive"),s.setAttribute("aria-atomic","true")}),n("afterInit",()=>{e.params.a11y.enabled&&V()}),n("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{e.params.a11y.enabled&&D()}),n("fromEdge toEdge afterInit lock unlock",()=>{e.params.a11y.enabled&&f()}),n("paginationUpdate",()=>{e.params.a11y.enabled&&C()}),n("destroy",()=>{e.params.a11y.enabled&&k()})}function Ga(t){let{swiper:e,extendParams:a,on:n,emit:s,params:r}=t;e.autoplay={running:!1,paused:!1,timeLeft:0},a({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let i,l,o=r&&r.autoplay?r.autoplay.delay:3e3,m=r&&r.autoplay?r.autoplay.delay:3e3,p,g=new Date().getTime(),E,T,x,b,y,h,d;function f(R){!e||e.destroyed||!e.wrapperEl||R.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",f),!d&&I())}const w=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?E=!0:E&&(m=p,E=!1);const R=e.autoplay.paused?p:g+m-new Date().getTime();e.autoplay.timeLeft=R,s("autoplayTimeLeft",R,R/o),l=requestAnimationFrame(()=>{w()})},O=()=>{let R;return e.virtual&&e.params.virtual.enabled?R=e.slides.filter(z=>z.classList.contains("swiper-slide-active"))[0]:R=e.slides[e.activeIndex],R?parseInt(R.getAttribute("data-swiper-autoplay"),10):void 0},C=R=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(l),w();let P=typeof R>"u"?e.params.autoplay.delay:R;o=e.params.autoplay.delay,m=e.params.autoplay.delay;const z=O();!Number.isNaN(z)&&z>0&&typeof R>"u"&&(P=z,o=z,m=z),p=P;const $=e.params.speed,_=()=>{!e||e.destroyed||(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev($,!0,!0),s("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,$,!0,!0),s("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext($,!0,!0),s("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,$,!0,!0),s("autoplay")),e.params.cssMode&&(g=new Date().getTime(),requestAnimationFrame(()=>{C()})))};return P>0?(clearTimeout(i),i=setTimeout(()=>{_()},P)):requestAnimationFrame(()=>{_()}),P},N=()=>{g=new Date().getTime(),e.autoplay.running=!0,C(),s("autoplayStart")},A=()=>{e.autoplay.running=!1,clearTimeout(i),cancelAnimationFrame(l),s("autoplayStop")},j=(R,P)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(i),R||(h=!0);const z=()=>{s("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",f):I()};if(e.autoplay.paused=!0,P){y&&(p=e.params.autoplay.delay),y=!1,z();return}p=(p||e.params.autoplay.delay)-(new Date().getTime()-g),!(e.isEnd&&p<0&&!e.params.loop)&&(p<0&&(p=0),z())},I=()=>{e.isEnd&&p<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(g=new Date().getTime(),h?(h=!1,C(p)):C(),e.autoplay.paused=!1,s("autoplayResume"))},D=()=>{if(e.destroyed||!e.autoplay.running)return;const R=Me();R.visibilityState==="hidden"&&(h=!0,j(!0)),R.visibilityState==="visible"&&I()},V=R=>{R.pointerType==="mouse"&&(h=!0,d=!0,!(e.animating||e.autoplay.paused)&&j(!0))},k=R=>{R.pointerType==="mouse"&&(d=!1,e.autoplay.paused&&I())},v=()=>{e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",V),e.el.addEventListener("pointerleave",k))},S=()=>{e.el.removeEventListener("pointerenter",V),e.el.removeEventListener("pointerleave",k)},L=()=>{Me().addEventListener("visibilitychange",D)},H=()=>{Me().removeEventListener("visibilitychange",D)};n("init",()=>{e.params.autoplay.enabled&&(v(),L(),N())}),n("destroy",()=>{S(),H(),e.autoplay.running&&A()}),n("_freeModeStaticRelease",()=>{(x||h)&&I()}),n("_freeModeNoMomentumRelease",()=>{e.params.autoplay.disableOnInteraction?A():j(!0,!0)}),n("beforeTransitionStart",(R,P,z)=>{e.destroyed||!e.autoplay.running||(z||!e.params.autoplay.disableOnInteraction?j(!0,!0):A())}),n("sliderFirstMove",()=>{if(!(e.destroyed||!e.autoplay.running)){if(e.params.autoplay.disableOnInteraction){A();return}T=!0,x=!1,h=!1,b=setTimeout(()=>{h=!0,x=!0,j(!0)},200)}}),n("touchEnd",()=>{if(!(e.destroyed||!e.autoplay.running||!T)){if(clearTimeout(b),clearTimeout(i),e.params.autoplay.disableOnInteraction){x=!1,T=!1;return}x&&e.params.cssMode&&I(),x=!1,T=!1}}),n("slideChange",()=>{e.destroyed||!e.autoplay.running||(y=!0)}),Object.assign(e.autoplay,{start:N,stop:A,pause:j,resume:I})}var Fe=new Map,xe=new WeakMap,dt=0,Xa=void 0;function Ya(t){return t?(xe.has(t)||(dt+=1,xe.set(t,dt.toString())),xe.get(t)):"0"}function Qa(t){return Object.keys(t).sort().filter(e=>t[e]!==void 0).map(e=>`${e}_${e==="root"?Ya(t.root):t[e]}`).toString()}function Za(t){let e=Qa(t),a=Fe.get(e);if(!a){const n=new Map;let s;const r=new IntersectionObserver(i=>{i.forEach(l=>{var o;const m=l.isIntersecting&&s.some(p=>l.intersectionRatio>=p);t.trackVisibility&&typeof l.isVisible>"u"&&(l.isVisible=m),(o=n.get(l.target))==null||o.forEach(p=>{p(m,l)})})},t);s=r.thresholds||(Array.isArray(t.threshold)?t.threshold:[t.threshold||0]),a={id:e,observer:r,elements:n},Fe.set(e,a)}return a}function Ja(t,e,a={},n=Xa){if(typeof window.IntersectionObserver>"u"&&n!==void 0){const o=t.getBoundingClientRect();return e(n,{isIntersecting:n,target:t,intersectionRatio:typeof a.threshold=="number"?a.threshold:0,time:0,boundingClientRect:o,intersectionRect:o,rootBounds:o}),()=>{}}const{id:s,observer:r,elements:i}=Za(a);let l=i.get(t)||[];return i.has(t)||i.set(t,l),l.push(e),r.observe(t),function(){l.splice(l.indexOf(e),1),l.length===0&&(i.delete(t),r.unobserve(t)),i.size===0&&(r.disconnect(),Fe.delete(s))}}function er({threshold:t,delay:e,trackVisibility:a,rootMargin:n,root:s,triggerOnce:r,skip:i,initialInView:l,fallbackInView:o,onChange:m}={}){var p;const[g,E]=u.useState(null),T=u.useRef(),[x,b]=u.useState({inView:!!l,entry:void 0});T.current=m,u.useEffect(()=>{if(i||!g)return;let f;return f=Ja(g,(w,O)=>{b({inView:w,entry:O}),T.current&&T.current(w,O),O.isIntersecting&&r&&f&&(f(),f=void 0)},{root:s,rootMargin:n,threshold:t,trackVisibility:a,delay:e},o),()=>{f&&f()}},[Array.isArray(t)?t.toString():t,g,s,n,r,i,a,o,e]);const y=(p=x.entry)==null?void 0:p.target,h=u.useRef();!g&&y&&!r&&!i&&h.current!==y&&(h.current=y,b({inView:!!l,entry:void 0}));const d=[E,x.inView,x.entry];return d.ref=d[0],d.inView=d[1],d.entry=d[2],d}const tr=()=>{const t=Ka();return c.jsxs(c.Fragment,{children:[c.jsx("span",{onClick:()=>t.slideNext(),role:"button",className:"swiper-button-next custom-next-icon","aria-label":"Botón para pasar a la siguiente diapositiva"}),c.jsx("span",{onClick:()=>t.slidePrev(),className:"swiper-button-prev custom-prev-icon","aria-label":"Botón para pasar a la diapositiva anterior"})]})},nr=()=>{const{data:t}=pe({queryKey:["services"],staleTime:18e5,refetchOnWindowFocus:!1,refetchOnMount:!1,refetchOnReconnect:!1,refetchInterval:18e5});if(!t)return null;const e=t==null?void 0:t.map(()=>er({triggerOnce:!1,threshold:.5})),a={hidden:{opacity:0,y:50},show:{opacity:1,y:0,transition:{duration:1}},exit:{opacity:0,y:50}};return c.jsx($t,{spaceBetween:0,slidesPerView:1,autoplay:{delay:5e3,disableOnInteraction:!1,pauseOnMouseEnter:!0},modules:[Ga,Wa,qa,Ua],className:"mySwiper",children:t==null?void 0:t.map((n,s)=>c.jsx(Bt,{children:c.jsx("div",{className:"container-fluid sliders",style:{backgroundImage:`linear-gradient(to bottom left,rgba(0, 0, 0, 0.8) 0%,rgba(0, 0, 0, 0.7) 35%,rgba(0, 0, 0, 0.8) 100%), url( ${n.imagen})`},children:c.jsx(Gn.div,{ref:e[s].ref,variants:a,initial:"hidden",animate:e[s].inView?"show":"hidden",exit:"exit",children:c.jsx("div",{className:"container",children:c.jsx("div",{className:"row",children:c.jsxs("div",{className:"col-12 col-lg-8  description",children:[c.jsx("h1",{className:"title text-capitalize",children:n.nombre}),c.jsx("br",{}),c.jsx("p",{className:"text-white col-12 col-lg-10 ",children:n.descripcion}),c.jsxs("div",{className:"col-12 ",children:[c.jsx("br",{}),c.jsx(se,{to:"/contact",children:c.jsx("button",{className:"llamado",children:"Contactar"})})]}),c.jsx(tr,{})]})})})})})},s))})};var Ft={exports:{}};/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/(function(t){(function(){var e={}.hasOwnProperty;function a(){for(var r="",i=0;i<arguments.length;i++){var l=arguments[i];l&&(r=s(r,n(l)))}return r}function n(r){if(typeof r=="string"||typeof r=="number")return r;if(typeof r!="object")return"";if(Array.isArray(r))return a.apply(null,r);if(r.toString!==Object.prototype.toString&&!r.toString.toString().includes("[native code]"))return r.toString();var i="";for(var l in r)e.call(r,l)&&r[l]&&(i=s(i,l));return i}function s(r,i){return i?r?r+" "+i:r+i:r}t.exports?(a.default=a,t.exports=a):window.classNames=a})()})(Ft);var ar=Ft.exports;const W=jt(ar);function Ve(){return Ve=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var a=arguments[e];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(t[n]=a[n])}return t},Ve.apply(this,arguments)}function Vt(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}function ft(t){return"default"+t.charAt(0).toUpperCase()+t.substr(1)}function rr(t){var e=sr(t,"string");return typeof e=="symbol"?e:String(e)}function sr(t,e){if(typeof t!="object"||t===null)return t;var a=t[Symbol.toPrimitive];if(a!==void 0){var n=a.call(t,e||"default");if(typeof n!="object")return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function ir(t,e,a){var n=u.useRef(t!==void 0),s=u.useState(e),r=s[0],i=s[1],l=t!==void 0,o=n.current;return n.current=l,!l&&o&&r!==e&&i(e),[l?t:r,u.useCallback(function(m){for(var p=arguments.length,g=new Array(p>1?p-1:0),E=1;E<p;E++)g[E-1]=arguments[E];a&&a.apply(void 0,[m].concat(g)),i(m)},[a])]}function Ht(t,e){return Object.keys(e).reduce(function(a,n){var s,r=a,i=r[ft(n)],l=r[n],o=Vt(r,[ft(n),n].map(rr)),m=e[n],p=ir(l,i,t[m]),g=p[0],E=p[1];return Ve({},o,(s={},s[n]=g,s[m]=E,s))},t)}function He(t,e){return He=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(n,s){return n.__proto__=s,n},He(t,e)}function or(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,He(t,e)}const lr=["xxl","xl","lg","md","sm","xs"],cr="xs",Xe=u.createContext({prefixes:{},breakpoints:lr,minBreakpoint:cr});function G(t,e){const{prefixes:a}=u.useContext(Xe);return t||a[e]||e}function Ki(){const{breakpoints:t}=u.useContext(Xe);return t}function qi(){const{minBreakpoint:t}=u.useContext(Xe);return t}function Ye(t){return t&&t.ownerDocument||document}function ur(t){var e=Ye(t);return e&&e.defaultView||window}function dr(t,e){return ur(t).getComputedStyle(t,e)}var fr=/([A-Z])/g;function pr(t){return t.replace(fr,"-$1").toLowerCase()}var mr=/^ms-/;function be(t){return pr(t).replace(mr,"-ms-")}var vr=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;function gr(t){return!!(t&&vr.test(t))}function J(t,e){var a="",n="";if(typeof e=="string")return t.style.getPropertyValue(be(e))||dr(t).getPropertyValue(be(e));Object.keys(e).forEach(function(s){var r=e[s];!r&&r!==0?t.style.removeProperty(be(s)):gr(s)?n+=s+"("+r+") ":a+=be(s)+": "+r+";"}),n&&(a+="transform: "+n+";"),t.style.cssText+=";"+a}var Kt={exports:{}},hr="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",yr=hr,xr=yr;function qt(){}function Wt(){}Wt.resetWarningCache=qt;var br=function(){function t(n,s,r,i,l,o){if(o!==xr){var m=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw m.name="Invariant Violation",m}}t.isRequired=t;function e(){return t}var a={array:t,bigint:t,bool:t,func:t,number:t,object:t,string:t,symbol:t,any:t,arrayOf:e,element:t,elementType:t,instanceOf:e,node:t,objectOf:e,oneOf:e,oneOfType:e,shape:e,exact:e,checkPropTypes:Wt,resetWarningCache:qt};return a.PropTypes=a,a};Kt.exports=br();var Er=Kt.exports;const Ae=jt(Er),pt={disabled:!1},Ut=M.createContext(null);var Cr=function(e){return e.scrollTop},me="unmounted",ne="exited",Y="entering",Z="entered",ge="exiting",te=function(t){or(e,t);function e(n,s){var r;r=t.call(this,n,s)||this;var i=s,l=i&&!i.isMounting?n.enter:n.appear,o;return r.appearStatus=null,n.in?l?(o=ne,r.appearStatus=Y):o=Z:n.unmountOnExit||n.mountOnEnter?o=me:o=ne,r.state={status:o},r.nextCallback=null,r}e.getDerivedStateFromProps=function(s,r){var i=s.in;return i&&r.status===me?{status:ne}:null};var a=e.prototype;return a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(s){var r=null;if(s!==this.props){var i=this.state.status;this.props.in?i!==Y&&i!==Z&&(r=Y):(i===Y||i===Z)&&(r=ge)}this.updateStatus(!1,r)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var s=this.props.timeout,r,i,l;return r=i=l=s,s!=null&&typeof s!="number"&&(r=s.exit,i=s.enter,l=s.appear!==void 0?s.appear:i),{exit:r,enter:i,appear:l}},a.updateStatus=function(s,r){if(s===void 0&&(s=!1),r!==null)if(this.cancelNextCallback(),r===Y){if(this.props.unmountOnExit||this.props.mountOnEnter){var i=this.props.nodeRef?this.props.nodeRef.current:ce.findDOMNode(this);i&&Cr(i)}this.performEnter(s)}else this.performExit();else this.props.unmountOnExit&&this.state.status===ne&&this.setState({status:me})},a.performEnter=function(s){var r=this,i=this.props.enter,l=this.context?this.context.isMounting:s,o=this.props.nodeRef?[l]:[ce.findDOMNode(this),l],m=o[0],p=o[1],g=this.getTimeouts(),E=l?g.appear:g.enter;if(!s&&!i||pt.disabled){this.safeSetState({status:Z},function(){r.props.onEntered(m)});return}this.props.onEnter(m,p),this.safeSetState({status:Y},function(){r.props.onEntering(m,p),r.onTransitionEnd(E,function(){r.safeSetState({status:Z},function(){r.props.onEntered(m,p)})})})},a.performExit=function(){var s=this,r=this.props.exit,i=this.getTimeouts(),l=this.props.nodeRef?void 0:ce.findDOMNode(this);if(!r||pt.disabled){this.safeSetState({status:ne},function(){s.props.onExited(l)});return}this.props.onExit(l),this.safeSetState({status:ge},function(){s.props.onExiting(l),s.onTransitionEnd(i.exit,function(){s.safeSetState({status:ne},function(){s.props.onExited(l)})})})},a.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(s,r){r=this.setNextCallback(r),this.setState(s,r)},a.setNextCallback=function(s){var r=this,i=!0;return this.nextCallback=function(l){i&&(i=!1,r.nextCallback=null,s(l))},this.nextCallback.cancel=function(){i=!1},this.nextCallback},a.onTransitionEnd=function(s,r){this.setNextCallback(r);var i=this.props.nodeRef?this.props.nodeRef.current:ce.findDOMNode(this),l=s==null&&!this.props.addEndListener;if(!i||l){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[i,this.nextCallback],m=o[0],p=o[1];this.props.addEndListener(m,p)}s!=null&&setTimeout(this.nextCallback,s)},a.render=function(){var s=this.state.status;if(s===me)return null;var r=this.props,i=r.children;r.in,r.mountOnEnter,r.unmountOnExit,r.appear,r.enter,r.exit,r.timeout,r.addEndListener,r.onEnter,r.onEntering,r.onEntered,r.onExit,r.onExiting,r.onExited,r.nodeRef;var l=Vt(r,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return M.createElement(Ut.Provider,{value:null},typeof i=="function"?i(s,l):M.cloneElement(M.Children.only(i),l))},e}(M.Component);te.contextType=Ut;te.propTypes={};function oe(){}te.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:oe,onEntering:oe,onEntered:oe,onExit:oe,onExiting:oe,onExited:oe};te.UNMOUNTED=me;te.EXITED=ne;te.ENTERING=Y;te.ENTERED=Z;te.EXITING=ge;const wr=te,je=!!(typeof window<"u"&&window.document&&window.document.createElement);var Ke=!1,qe=!1;try{var Pe={get passive(){return Ke=!0},get once(){return qe=Ke=!0}};je&&(window.addEventListener("test",Pe,Pe),window.removeEventListener("test",Pe,!0))}catch{}function Sr(t,e,a,n){if(n&&typeof n!="boolean"&&!qe){var s=n.once,r=n.capture,i=a;!qe&&s&&(i=a.__once||function l(o){this.removeEventListener(e,l,r),a.call(this,o)},a.__once=i),t.addEventListener(e,i,Ke?n:r)}t.addEventListener(e,a,n)}function jr(t,e,a,n){var s=n&&typeof n!="boolean"?n.capture:n;t.removeEventListener(e,a,s),a.__once&&t.removeEventListener(e,a.__once,s)}function we(t,e,a,n){return Sr(t,e,a,n),function(){jr(t,e,a,n)}}function Tr(t,e,a,n){if(a===void 0&&(a=!1),n===void 0&&(n=!0),t){var s=document.createEvent("HTMLEvents");s.initEvent(e,a,n),t.dispatchEvent(s)}}function Or(t){var e=J(t,"transitionDuration")||"",a=e.indexOf("ms")===-1?1e3:1;return parseFloat(e)*a}function Nr(t,e,a){a===void 0&&(a=5);var n=!1,s=setTimeout(function(){n||Tr(t,"transitionend",!0)},e+a),r=we(t,"transitionend",function(){n=!0},{once:!0});return function(){clearTimeout(s),r()}}function Lr(t,e,a,n){a==null&&(a=Or(t)||0);var s=Nr(t,a,n),r=we(t,"transitionend",e);return function(){s(),r()}}function mt(t,e){const a=J(t,e)||"",n=a.indexOf("ms")===-1?1e3:1;return parseFloat(a)*n}function Qe(t,e){const a=mt(t,"transitionDuration"),n=mt(t,"transitionDelay"),s=Lr(t,r=>{r.target===t&&(s(),e(r))},a+n)}function fe(...t){return t.filter(e=>e!=null).reduce((e,a)=>{if(typeof a!="function")throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return e===null?a:function(...s){e.apply(this,s),a.apply(this,s)}},null)}function Gt(t){t.offsetHeight}const vt=t=>!t||typeof t=="function"?t:e=>{t.current=e};function Rr(t,e){const a=vt(t),n=vt(e);return s=>{a&&a(s),n&&n(s)}}function Te(t,e){return u.useMemo(()=>Rr(t,e),[t,e])}function _r(t){return t&&"setState"in t?ce.findDOMNode(t):t??null}const Mr=M.forwardRef(({onEnter:t,onEntering:e,onEntered:a,onExit:n,onExiting:s,onExited:r,addEndListener:i,children:l,childRef:o,...m},p)=>{const g=u.useRef(null),E=Te(g,o),T=C=>{E(_r(C))},x=C=>N=>{C&&g.current&&C(g.current,N)},b=u.useCallback(x(t),[t]),y=u.useCallback(x(e),[e]),h=u.useCallback(x(a),[a]),d=u.useCallback(x(n),[n]),f=u.useCallback(x(s),[s]),w=u.useCallback(x(r),[r]),O=u.useCallback(x(i),[i]);return c.jsx(wr,{ref:p,...m,onEnter:b,onEntered:h,onEntering:y,onExit:d,onExited:w,onExiting:f,addEndListener:O,nodeRef:g,children:typeof l=="function"?(C,N)=>l(C,{...N,ref:T}):M.cloneElement(l,{ref:T})})}),Ze=Mr,Ar={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};function Pr(t,e){const a=`offset${t[0].toUpperCase()}${t.slice(1)}`,n=e[a],s=Ar[t];return n+parseInt(J(e,s[0]),10)+parseInt(J(e,s[1]),10)}const kr={[ne]:"collapse",[ge]:"collapsing",[Y]:"collapsing",[Z]:"collapse show"},Ir=M.forwardRef(({onEnter:t,onEntering:e,onEntered:a,onExit:n,onExiting:s,className:r,children:i,dimension:l="height",in:o=!1,timeout:m=300,mountOnEnter:p=!1,unmountOnExit:g=!1,appear:E=!1,getDimensionValue:T=Pr,...x},b)=>{const y=typeof l=="function"?l():l,h=u.useMemo(()=>fe(C=>{C.style[y]="0"},t),[y,t]),d=u.useMemo(()=>fe(C=>{const N=`scroll${y[0].toUpperCase()}${y.slice(1)}`;C.style[y]=`${C[N]}px`},e),[y,e]),f=u.useMemo(()=>fe(C=>{C.style[y]=null},a),[y,a]),w=u.useMemo(()=>fe(C=>{C.style[y]=`${T(y,C)}px`,Gt(C)},n),[n,T,y]),O=u.useMemo(()=>fe(C=>{C.style[y]=null},s),[y,s]);return c.jsx(Ze,{ref:b,addEndListener:Qe,...x,"aria-expanded":x.role?o:null,onEnter:h,onEntering:d,onEntered:f,onExit:w,onExiting:O,childRef:i.ref,in:o,timeout:m,mountOnEnter:p,unmountOnExit:g,appear:E,children:(C,N)=>M.cloneElement(i,{...N,className:W(r,i.props.className,kr[C],y==="width"&&"collapse-horizontal")})})}),Dr=Ir;function $r(t){const e=u.useRef(t);return u.useEffect(()=>{e.current=t},[t]),e}function X(t){const e=$r(t);return u.useCallback(function(...a){return e.current&&e.current(...a)},[e])}const Br=t=>u.forwardRef((e,a)=>c.jsx("div",{...e,ref:a,className:W(e.className,t)}));function zr(){const t=u.useRef(!0),e=u.useRef(()=>t.current);return u.useEffect(()=>(t.current=!0,()=>{t.current=!1}),[]),e.current}function Fr(t){const e=u.useRef(null);return u.useEffect(()=>{e.current=t}),e.current}const Vr=typeof global<"u"&&global.navigator&&global.navigator.product==="ReactNative",Hr=typeof document<"u",We=Hr||Vr?u.useLayoutEffect:u.useEffect,Kr=["as","disabled"];function qr(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}function Wr(t){return!t||t.trim()==="#"}function Xt({tagName:t,disabled:e,href:a,target:n,rel:s,role:r,onClick:i,tabIndex:l=0,type:o}){t||(a!=null||n!=null||s!=null?t="a":t="button");const m={tagName:t};if(t==="button")return[{type:o||"button",disabled:e},m];const p=E=>{if((e||t==="a"&&Wr(a))&&E.preventDefault(),e){E.stopPropagation();return}i==null||i(E)},g=E=>{E.key===" "&&(E.preventDefault(),p(E))};return t==="a"&&(a||(a="#"),e&&(a=void 0)),[{role:r??"button",disabled:void 0,tabIndex:e?void 0:l,href:a,target:t==="a"?n:void 0,"aria-disabled":e||void 0,rel:t==="a"?s:void 0,onClick:p,onKeyDown:g},m]}const Yt=u.forwardRef((t,e)=>{let{as:a,disabled:n}=t,s=qr(t,Kr);const[r,{tagName:i}]=Xt(Object.assign({tagName:a,disabled:n},s));return c.jsx(i,Object.assign({},s,r,{ref:e}))});Yt.displayName="Button";const Ur=["onKeyDown"];function Gr(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}function Xr(t){return!t||t.trim()==="#"}const Qt=u.forwardRef((t,e)=>{let{onKeyDown:a}=t,n=Gr(t,Ur);const[s]=Xt(Object.assign({tagName:"a"},n)),r=X(i=>{s.onKeyDown(i),a==null||a(i)});return Xr(n.href)||n.role==="button"?c.jsx("a",Object.assign({ref:e},n,s,{onKeyDown:r})):c.jsx("a",Object.assign({ref:e},n,{onKeyDown:a}))});Qt.displayName="Anchor";const Yr=Qt,Qr={[Y]:"show",[Z]:"show"},Zt=u.forwardRef(({className:t,children:e,transitionClasses:a={},onEnter:n,...s},r)=>{const i={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,...s},l=u.useCallback((o,m)=>{Gt(o),n==null||n(o,m)},[n]);return c.jsx(Ze,{ref:r,addEndListener:Qe,...i,onEnter:l,childRef:e.ref,children:(o,m)=>u.cloneElement(e,{...m,className:W("fade",t,e.props.className,Qr[o],a[o])})})});Zt.displayName="Fade";const Zr=Zt,Jr={"aria-label":Ae.string,onClick:Ae.func,variant:Ae.oneOf(["white"])},Je=u.forwardRef(({className:t,variant:e,"aria-label":a="Close",...n},s)=>c.jsx("button",{ref:s,type:"button",className:W("btn-close",e&&`btn-close-${e}`,t),"aria-label":a,...n}));Je.displayName="CloseButton";Je.propTypes=Jr;const es=Je,Jt=u.createContext(null);Jt.displayName="CardHeaderContext";const ts=Jt;function ns(t){const e=u.useRef(t);return e.current=t,e}function as(t){const e=ns(t);u.useEffect(()=>()=>e.current(),[])}var rs=Function.prototype.bind.call(Function.prototype.call,[].slice);function re(t,e){return rs(t.querySelectorAll(e))}function ss(){const[,t]=u.useReducer(e=>!e,!1);return t}function gt(t,e){if(t.contains)return t.contains(e);if(t.compareDocumentPosition)return t===e||!!(t.compareDocumentPosition(e)&16)}const is=u.createContext(null),et=(t,e=null)=>t!=null?String(t):e||null,Se=is,en=u.createContext(null);en.displayName="NavContext";const tn=en,os="data-rr-ui-",ls="rrUi";function Oe(t){return`${os}${t}`}function cs(t){return`${ls}${t}`}const nn=u.createContext(je?window:void 0);nn.Provider;function tt(){return u.useContext(nn)}const an=u.createContext(null);an.displayName="NavbarContext";const de=an,us=u.createContext(null),rn=us,ds=["as","active","eventKey"];function fs(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}function sn({key:t,onClick:e,active:a,id:n,role:s,disabled:r}){const i=u.useContext(Se),l=u.useContext(tn),o=u.useContext(rn);let m=a;const p={role:s};if(l){!s&&l.role==="tablist"&&(p.role="tab");const g=l.getControllerId(t??null),E=l.getControlledId(t??null);p[Oe("event-key")]=t,p.id=g||n,m=a==null&&t!=null?l.activeKey===t:a,(m||!(o!=null&&o.unmountOnExit)&&!(o!=null&&o.mountOnEnter))&&(p["aria-controls"]=E)}return p.role==="tab"&&(p["aria-selected"]=m,m||(p.tabIndex=-1),r&&(p.tabIndex=-1,p["aria-disabled"]=!0)),p.onClick=X(g=>{r||(e==null||e(g),t!=null&&i&&!g.isPropagationStopped()&&i(t,g))}),[p,{isActive:m}]}const on=u.forwardRef((t,e)=>{let{as:a=Yt,active:n,eventKey:s}=t,r=fs(t,ds);const[i,l]=sn(Object.assign({key:et(s,r.href),active:n},r));return i[Oe("active")]=l.isActive,c.jsx(a,Object.assign({},r,i,{ref:e}))});on.displayName="NavItem";const ps=on,ms=["as","onSelect","activeKey","role","onKeyDown"];function vs(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}const ht=()=>{},yt=Oe("event-key"),ln=u.forwardRef((t,e)=>{let{as:a="div",onSelect:n,activeKey:s,role:r,onKeyDown:i}=t,l=vs(t,ms);const o=ss(),m=u.useRef(!1),p=u.useContext(Se),g=u.useContext(rn);let E,T;g&&(r=r||"tablist",s=g.activeKey,E=g.getControlledId,T=g.getControllerId);const x=u.useRef(null),b=f=>{const w=x.current;if(!w)return null;const O=re(w,`[${yt}]:not([aria-disabled=true])`),C=w.querySelector("[aria-selected=true]");if(!C||C!==document.activeElement)return null;const N=O.indexOf(C);if(N===-1)return null;let A=N+f;return A>=O.length&&(A=0),A<0&&(A=O.length-1),O[A]},y=(f,w)=>{f!=null&&(n==null||n(f,w),p==null||p(f,w))},h=f=>{if(i==null||i(f),!g)return;let w;switch(f.key){case"ArrowLeft":case"ArrowUp":w=b(-1);break;case"ArrowRight":case"ArrowDown":w=b(1);break;default:return}w&&(f.preventDefault(),y(w.dataset[cs("EventKey")]||null,f),m.current=!0,o())};u.useEffect(()=>{if(x.current&&m.current){const f=x.current.querySelector(`[${yt}][aria-selected=true]`);f==null||f.focus()}m.current=!1});const d=Te(e,x);return c.jsx(Se.Provider,{value:y,children:c.jsx(tn.Provider,{value:{role:r,activeKey:et(s),getControlledId:E||ht,getControllerId:T||ht},children:c.jsx(a,Object.assign({},l,{onKeyDown:h,ref:d,role:r}))})})});ln.displayName="Nav";const gs=Object.assign(ln,{Item:ps});function ke(t){t===void 0&&(t=Ye());try{var e=t.activeElement;return!e||!e.nodeName?null:e}catch{return t.body}}function hs(t=document){const e=t.defaultView;return Math.abs(e.innerWidth-t.documentElement.clientWidth)}const xt=Oe("modal-open");class ys{constructor({ownerDocument:e,handleContainerOverflow:a=!0,isRTL:n=!1}={}){this.handleContainerOverflow=a,this.isRTL=n,this.modals=[],this.ownerDocument=e}getScrollbarWidth(){return hs(this.ownerDocument)}getElement(){return(this.ownerDocument||document).body}setModalAttributes(e){}removeModalAttributes(e){}setContainerStyle(e){const a={overflow:"hidden"},n=this.isRTL?"paddingLeft":"paddingRight",s=this.getElement();e.style={overflow:s.style.overflow,[n]:s.style[n]},e.scrollBarWidth&&(a[n]=`${parseInt(J(s,n)||"0",10)+e.scrollBarWidth}px`),s.setAttribute(xt,""),J(s,a)}reset(){[...this.modals].forEach(e=>this.remove(e))}removeContainerStyle(e){const a=this.getElement();a.removeAttribute(xt),Object.assign(a.style,e.style)}add(e){let a=this.modals.indexOf(e);return a!==-1||(a=this.modals.length,this.modals.push(e),this.setModalAttributes(e),a!==0)||(this.state={scrollBarWidth:this.getScrollbarWidth(),style:{}},this.handleContainerOverflow&&this.setContainerStyle(this.state)),a}remove(e){const a=this.modals.indexOf(e);a!==-1&&(this.modals.splice(a,1),!this.modals.length&&this.handleContainerOverflow&&this.removeContainerStyle(this.state),this.removeModalAttributes(e))}isTopModal(e){return!!this.modals.length&&this.modals[this.modals.length-1]===e}}const nt=ys,Ie=(t,e)=>je?t==null?(e||Ye()).body:(typeof t=="function"&&(t=t()),t&&"current"in t&&(t=t.current),t&&("nodeType"in t||t.getBoundingClientRect)?t:null):null;function xs(t,e){const a=tt(),[n,s]=u.useState(()=>Ie(t,a==null?void 0:a.document));if(!n){const r=Ie(t);r&&s(r)}return u.useEffect(()=>{e&&n&&e(n)},[e,n]),u.useEffect(()=>{const r=Ie(t);r!==n&&s(r)},[t,n]),n}function bs({children:t,in:e,onExited:a,mountOnEnter:n,unmountOnExit:s}){const r=u.useRef(null),i=u.useRef(e),l=X(a);u.useEffect(()=>{e?i.current=!0:l(r.current)},[e,l]);const o=Te(r,t.ref),m=u.cloneElement(t,{ref:o});return e?m:s||!i.current&&n?null:m}function Es({in:t,onTransition:e}){const a=u.useRef(null),n=u.useRef(!0),s=X(e);return We(()=>{if(!a.current)return;let r=!1;return s({in:t,element:a.current,initial:n.current,isStale:()=>r}),()=>{r=!0}},[t,s]),We(()=>(n.current=!1,()=>{n.current=!0}),[]),a}function Cs({children:t,in:e,onExited:a,onEntered:n,transition:s}){const[r,i]=u.useState(!e);e&&r&&i(!1);const l=Es({in:!!e,onTransition:m=>{const p=()=>{m.isStale()||(m.in?n==null||n(m.element,m.initial):(i(!0),a==null||a(m.element)))};Promise.resolve(s(m)).then(p,g=>{throw m.in||i(!0),g})}}),o=Te(l,t.ref);return r&&!e?null:u.cloneElement(t,{ref:o})}function bt(t,e,a){return t?c.jsx(t,Object.assign({},a)):e?c.jsx(Cs,Object.assign({},a,{transition:e})):c.jsx(bs,Object.assign({},a))}function ws(t){return t.code==="Escape"||t.keyCode===27}const Ss=["show","role","className","style","children","backdrop","keyboard","onBackdropClick","onEscapeKeyDown","transition","runTransition","backdropTransition","runBackdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","manager","container","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered"];function js(t,e){if(t==null)return{};var a={},n=Object.keys(t),s,r;for(r=0;r<n.length;r++)s=n[r],!(e.indexOf(s)>=0)&&(a[s]=t[s]);return a}let De;function Ts(t){return De||(De=new nt({ownerDocument:t==null?void 0:t.document})),De}function Os(t){const e=tt(),a=t||Ts(e),n=u.useRef({dialog:null,backdrop:null});return Object.assign(n.current,{add:()=>a.add(n.current),remove:()=>a.remove(n.current),isTopModal:()=>a.isTopModal(n.current),setDialogRef:u.useCallback(s=>{n.current.dialog=s},[]),setBackdropRef:u.useCallback(s=>{n.current.backdrop=s},[])})}const cn=u.forwardRef((t,e)=>{let{show:a=!1,role:n="dialog",className:s,style:r,children:i,backdrop:l=!0,keyboard:o=!0,onBackdropClick:m,onEscapeKeyDown:p,transition:g,runTransition:E,backdropTransition:T,runBackdropTransition:x,autoFocus:b=!0,enforceFocus:y=!0,restoreFocus:h=!0,restoreFocusOptions:d,renderDialog:f,renderBackdrop:w=q=>c.jsx("div",Object.assign({},q)),manager:O,container:C,onShow:N,onHide:A=()=>{},onExit:j,onExited:I,onExiting:D,onEnter:V,onEntering:k,onEntered:v}=t,S=js(t,Ss);const L=tt(),H=xs(C),R=Os(O),P=zr(),z=Fr(a),[$,_]=u.useState(!a),B=u.useRef(null);u.useImperativeHandle(e,()=>R,[R]),je&&!z&&a&&(B.current=ke(L==null?void 0:L.document)),a&&$&&_(!1);const F=X(()=>{if(R.add(),Le.current=we(document,"keydown",Ln),Ne.current=we(document,"focus",()=>setTimeout(Q),!0),N&&N(),b){var q,rt;const _e=ke((q=(rt=R.dialog)==null?void 0:rt.ownerDocument)!=null?q:L==null?void 0:L.document);R.dialog&&_e&&!gt(R.dialog,_e)&&(B.current=_e,R.dialog.focus())}}),K=X(()=>{if(R.remove(),Le.current==null||Le.current(),Ne.current==null||Ne.current(),h){var q;(q=B.current)==null||q.focus==null||q.focus(d),B.current=null}});u.useEffect(()=>{!a||!H||F()},[a,H,F]),u.useEffect(()=>{$&&K()},[$,K]),as(()=>{K()});const Q=X(()=>{if(!y||!P()||!R.isTopModal())return;const q=ke(L==null?void 0:L.document);R.dialog&&q&&!gt(R.dialog,q)&&R.dialog.focus()}),Nn=X(q=>{q.target===q.currentTarget&&(m==null||m(q),l===!0&&A())}),Ln=X(q=>{o&&ws(q)&&R.isTopModal()&&(p==null||p(q),q.defaultPrevented||A())}),Ne=u.useRef(),Le=u.useRef(),Rn=(...q)=>{_(!0),I==null||I(...q)};if(!H)return null;const at=Object.assign({role:n,ref:R.setDialogRef,"aria-modal":n==="dialog"?!0:void 0},S,{style:r,className:s,tabIndex:-1});let Re=f?f(at):c.jsx("div",Object.assign({},at,{children:u.cloneElement(i,{role:"document"})}));Re=bt(g,E,{unmountOnExit:!0,mountOnEnter:!0,appear:!0,in:!!a,onExit:j,onExiting:D,onExited:Rn,onEnter:V,onEntering:k,onEntered:v,children:Re});let he=null;return l&&(he=w({ref:R.setBackdropRef,onClick:Nn}),he=bt(T,x,{in:!!a,appear:!0,mountOnEnter:!0,unmountOnExit:!0,children:he})),c.jsx(c.Fragment,{children:ce.createPortal(c.jsxs(c.Fragment,{children:[he,Re]}),H)})});cn.displayName="Modal";const Ns=Object.assign(cn,{Manager:nt});function Ls(t,e){return t.classList?!!e&&t.classList.contains(e):(" "+(t.className.baseVal||t.className)+" ").indexOf(" "+e+" ")!==-1}function Rs(t,e){t.classList?t.classList.add(e):Ls(t,e)||(typeof t.className=="string"?t.className=t.className+" "+e:t.setAttribute("class",(t.className&&t.className.baseVal||"")+" "+e))}function Et(t,e){return t.replace(new RegExp("(^|\\s)"+e+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}function _s(t,e){t.classList?t.classList.remove(e):typeof t.className=="string"?t.className=Et(t.className,e):t.setAttribute("class",Et(t.className&&t.className.baseVal||"",e))}const le={FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"};class un extends nt{adjustAndStore(e,a,n){const s=a.style[e];a.dataset[e]=s,J(a,{[e]:`${parseFloat(J(a,e))+n}px`})}restore(e,a){const n=a.dataset[e];n!==void 0&&(delete a.dataset[e],J(a,{[e]:n}))}setContainerStyle(e){super.setContainerStyle(e);const a=this.getElement();if(Rs(a,"modal-open"),!e.scrollBarWidth)return;const n=this.isRTL?"paddingLeft":"paddingRight",s=this.isRTL?"marginLeft":"marginRight";re(a,le.FIXED_CONTENT).forEach(r=>this.adjustAndStore(n,r,e.scrollBarWidth)),re(a,le.STICKY_CONTENT).forEach(r=>this.adjustAndStore(s,r,-e.scrollBarWidth)),re(a,le.NAVBAR_TOGGLER).forEach(r=>this.adjustAndStore(s,r,e.scrollBarWidth))}removeContainerStyle(e){super.removeContainerStyle(e);const a=this.getElement();_s(a,"modal-open");const n=this.isRTL?"paddingLeft":"paddingRight",s=this.isRTL?"marginLeft":"marginRight";re(a,le.FIXED_CONTENT).forEach(r=>this.restore(n,r)),re(a,le.STICKY_CONTENT).forEach(r=>this.restore(s,r)),re(a,le.NAVBAR_TOGGLER).forEach(r=>this.restore(s,r))}}let $e;function Ms(t){return $e||($e=new un(t)),$e}const As=un,Ps=u.createContext({onHide(){}}),dn=Ps,ks=u.forwardRef(({closeLabel:t="Close",closeVariant:e,closeButton:a=!1,onHide:n,children:s,...r},i)=>{const l=u.useContext(dn),o=X(()=>{l==null||l.onHide(),n==null||n()});return c.jsxs("div",{ref:i,...r,children:[s,a&&c.jsx(es,{"aria-label":t,variant:e,onClick:o})]})}),Is=ks;var Ct={exports:{}},Ue={exports:{}};(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=a;function a(n){function s(i,l,o,m,p,g){var E=m||"<<anonymous>>",T=g||o;if(l[o]==null)return i?new Error("Required "+p+" `"+T+"` was not specified "+("in `"+E+"`.")):null;for(var x=arguments.length,b=Array(x>6?x-6:0),y=6;y<x;y++)b[y-6]=arguments[y];return n.apply(void 0,[l,o,E,p,T].concat(b))}var r=s.bind(null,!1);return r.isRequired=s.bind(null,!0),r}t.exports=e.default})(Ue,Ue.exports);var Ds=Ue.exports;(function(t,e){Object.defineProperty(e,"__esModule",{value:!0}),e.default=r;var a=Ds,n=s(a);function s(i){return i&&i.__esModule?i:{default:i}}function r(){for(var i=arguments.length,l=Array(i),o=0;o<i;o++)l[o]=arguments[o];function m(){for(var p=arguments.length,g=Array(p),E=0;E<p;E++)g[E]=arguments[E];var T=null;return l.forEach(function(x){if(T==null){var b=x.apply(void 0,g);b!=null&&(T=b)}}),T}return(0,n.default)(m)}t.exports=e.default})(Ct,Ct.exports);const fn=u.forwardRef(({className:t,bsPrefix:e,as:a="div",...n},s)=>(e=G(e,"nav-item"),c.jsx(a,{ref:s,className:W(t,e),...n})));fn.displayName="NavItem";const $s=fn,pn=u.forwardRef(({bsPrefix:t,className:e,as:a=Yr,active:n,eventKey:s,disabled:r=!1,...i},l)=>{t=G(t,"nav-link");const[o,m]=sn({key:et(s,i.href),active:n,disabled:r,...i});return c.jsx(a,{...i,...o,ref:l,disabled:r,className:W(e,t,r&&"disabled",m.isActive&&"active")})});pn.displayName="NavLink";const Bs=pn,mn=u.forwardRef((t,e)=>{const{as:a="div",bsPrefix:n,variant:s,fill:r=!1,justify:i=!1,navbar:l,navbarScroll:o,className:m,activeKey:p,...g}=Ht(t,{activeKey:"onSelect"}),E=G(n,"nav");let T,x,b=!1;const y=u.useContext(de),h=u.useContext(ts);return y?(T=y.bsPrefix,b=l??!0):h&&({cardHeaderBsPrefix:x}=h),c.jsx(gs,{as:a,ref:e,activeKey:p,className:W(m,{[E]:!b,[`${T}-nav`]:b,[`${T}-nav-scroll`]:b&&o,[`${x}-${s}`]:!!x,[`${E}-${s}`]:!!s,[`${E}-fill`]:r,[`${E}-justified`]:i}),...g})});mn.displayName="Nav";const zs=Object.assign(mn,{Item:$s,Link:Bs}),vn=u.forwardRef(({bsPrefix:t,className:e,as:a,...n},s)=>{t=G(t,"navbar-brand");const r=a||(n.href?"a":"span");return c.jsx(r,{...n,ref:s,className:W(e,t)})});vn.displayName="NavbarBrand";const Fs=vn,gn=u.forwardRef(({children:t,bsPrefix:e,...a},n)=>{e=G(e,"navbar-collapse");const s=u.useContext(de);return c.jsx(Dr,{in:!!(s&&s.expanded),...a,children:c.jsx("div",{ref:n,className:e,children:t})})});gn.displayName="NavbarCollapse";const Vs=gn,hn=u.forwardRef(({bsPrefix:t,className:e,children:a,label:n="Toggle navigation",as:s="button",onClick:r,...i},l)=>{t=G(t,"navbar-toggler");const{onToggle:o,expanded:m}=u.useContext(de)||{},p=X(g=>{r&&r(g),o&&o()});return s==="button"&&(i.type="button"),c.jsx(s,{...i,ref:l,onClick:p,"aria-label":n,className:W(e,t,!m&&"collapsed"),children:a||c.jsx("span",{className:`${t}-icon`})})});hn.displayName="NavbarToggle";const Hs=hn,Ge=new WeakMap,wt=(t,e)=>{if(!t||!e)return;const a=Ge.get(e)||new Map;Ge.set(e,a);let n=a.get(t);return n||(n=e.matchMedia(t),n.refCount=0,a.set(n.media,n)),n};function Ks(t,e=typeof window>"u"?void 0:window){const a=wt(t,e),[n,s]=u.useState(()=>a?a.matches:!1);return We(()=>{let r=wt(t,e);if(!r)return s(!1);let i=Ge.get(e);const l=()=>{s(r.matches)};return r.refCount++,r.addListener(l),l(),()=>{r.removeListener(l),r.refCount--,r.refCount<=0&&(i==null||i.delete(r.media)),r=void 0}},[t]),n}function qs(t){const e=Object.keys(t);function a(l,o){return l===o?o:l?`${l} and ${o}`:o}function n(l){return e[Math.min(e.indexOf(l)+1,e.length-1)]}function s(l){const o=n(l);let m=t[o];return typeof m=="number"?m=`${m-.2}px`:m=`calc(${m} - 0.2px)`,`(max-width: ${m})`}function r(l){let o=t[l];return typeof o=="number"&&(o=`${o}px`),`(min-width: ${o})`}function i(l,o,m){let p;typeof l=="object"?(p=l,m=o,o=!0):(o=o||!0,p={[l]:o});let g=u.useMemo(()=>Object.entries(p).reduce((E,[T,x])=>((x==="up"||x===!0)&&(E=a(E,r(T))),(x==="down"||x===!0)&&(E=a(E,s(T))),E),""),[JSON.stringify(p)]);return Ks(g,m)}return i}const Ws=qs({xs:0,sm:576,md:768,lg:992,xl:1200,xxl:1400}),yn=u.forwardRef(({className:t,bsPrefix:e,as:a="div",...n},s)=>(e=G(e,"offcanvas-body"),c.jsx(a,{ref:s,className:W(t,e),...n})));yn.displayName="OffcanvasBody";const Us=yn,Gs={[Y]:"show",[Z]:"show"},xn=u.forwardRef(({bsPrefix:t,className:e,children:a,in:n=!1,mountOnEnter:s=!1,unmountOnExit:r=!1,appear:i=!1,...l},o)=>(t=G(t,"offcanvas"),c.jsx(Ze,{ref:o,addEndListener:Qe,in:n,mountOnEnter:s,unmountOnExit:r,appear:i,...l,childRef:a.ref,children:(m,p)=>u.cloneElement(a,{...p,className:W(e,a.props.className,(m===Y||m===ge)&&`${t}-toggling`,Gs[m])})})));xn.displayName="OffcanvasToggling";const Xs=xn,bn=u.forwardRef(({bsPrefix:t,className:e,closeLabel:a="Close",closeButton:n=!1,...s},r)=>(t=G(t,"offcanvas-header"),c.jsx(Is,{ref:r,...s,className:W(e,t),closeLabel:a,closeButton:n})));bn.displayName="OffcanvasHeader";const Ys=bn,Qs=Br("h5"),En=u.forwardRef(({className:t,bsPrefix:e,as:a=Qs,...n},s)=>(e=G(e,"offcanvas-title"),c.jsx(a,{ref:s,className:W(t,e),...n})));En.displayName="OffcanvasTitle";const Zs=En;function Js(t){return c.jsx(Xs,{...t})}function ei(t){return c.jsx(Zr,{...t})}const Cn=u.forwardRef(({bsPrefix:t,className:e,children:a,"aria-labelledby":n,placement:s="start",responsive:r,show:i=!1,backdrop:l=!0,keyboard:o=!0,scroll:m=!1,onEscapeKeyDown:p,onShow:g,onHide:E,container:T,autoFocus:x=!0,enforceFocus:b=!0,restoreFocus:y=!0,restoreFocusOptions:h,onEntered:d,onExit:f,onExiting:w,onEnter:O,onEntering:C,onExited:N,backdropClassName:A,manager:j,renderStaticNode:I=!1,...D},V)=>{const k=u.useRef();t=G(t,"offcanvas");const{onToggle:v}=u.useContext(de)||{},[S,L]=u.useState(!1),H=Ws(r||"xs","up");u.useEffect(()=>{L(r?i&&!H:i)},[i,r,H]);const R=X(()=>{v==null||v(),E==null||E()}),P=u.useMemo(()=>({onHide:R}),[R]);function z(){return j||(m?(k.current||(k.current=new As({handleContainerOverflow:!1})),k.current):Ms())}const $=(K,...Q)=>{K&&(K.style.visibility="visible"),O==null||O(K,...Q)},_=(K,...Q)=>{K&&(K.style.visibility=""),N==null||N(...Q)},B=u.useCallback(K=>c.jsx("div",{...K,className:W(`${t}-backdrop`,A)}),[A,t]),F=K=>c.jsx("div",{...K,...D,className:W(e,r?`${t}-${r}`:t,`${t}-${s}`),"aria-labelledby":n,children:a});return c.jsxs(c.Fragment,{children:[!S&&(r||I)&&F({}),c.jsx(dn.Provider,{value:P,children:c.jsx(Ns,{show:S,ref:V,backdrop:l,container:T,keyboard:o,autoFocus:x,enforceFocus:b&&!m,restoreFocus:y,restoreFocusOptions:h,onEscapeKeyDown:p,onShow:g,onHide:R,onEnter:$,onEntering:C,onEntered:d,onExit:f,onExiting:w,onExited:_,manager:z(),transition:Js,backdropTransition:ei,renderBackdrop:B,renderDialog:F})})]})});Cn.displayName="Offcanvas";const ti=Object.assign(Cn,{Body:Us,Header:Ys,Title:Zs}),wn=u.forwardRef((t,e)=>{const a=u.useContext(de);return c.jsx(ti,{ref:e,show:!!(a!=null&&a.expanded),...t,renderStaticNode:!0})});wn.displayName="NavbarOffcanvas";const ni=wn,Sn=u.forwardRef(({className:t,bsPrefix:e,as:a="span",...n},s)=>(e=G(e,"navbar-text"),c.jsx(a,{ref:s,className:W(t,e),...n})));Sn.displayName="NavbarText";const ai=Sn,jn=u.forwardRef((t,e)=>{const{bsPrefix:a,expand:n=!0,variant:s="light",bg:r,fixed:i,sticky:l,className:o,as:m="nav",expanded:p,onToggle:g,onSelect:E,collapseOnSelect:T=!1,...x}=Ht(t,{expanded:"onToggle"}),b=G(a,"navbar"),y=u.useCallback((...f)=>{E==null||E(...f),T&&p&&(g==null||g(!1))},[E,T,p,g]);x.role===void 0&&m!=="nav"&&(x.role="navigation");let h=`${b}-expand`;typeof n=="string"&&(h=`${h}-${n}`);const d=u.useMemo(()=>({onToggle:()=>g==null?void 0:g(!p),bsPrefix:b,expanded:!!p,expand:n}),[b,p,n,g]);return c.jsx(de.Provider,{value:d,children:c.jsx(Se.Provider,{value:y,children:c.jsx(m,{ref:e,...x,className:W(o,b,n&&h,s&&`${b}-${s}`,r&&`bg-${r}`,l&&`sticky-${l}`,i&&`fixed-${i}`)})})})});jn.displayName="Navbar";const Ee=Object.assign(jn,{Brand:Fs,Collapse:Vs,Offcanvas:ni,Text:ai,Toggle:Hs});const ri=({title:t,titleId:e,...a})=>c.jsxs("svg",{...a,xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",id:"Capa_1",x:0,y:0,style:{},viewBox:"0 0 550 103.97",width:"15em",height:"2.5em","aria-labelledby":e,children:[t?c.jsx("title",{id:e,children:t}):null,c.jsx("style",{children:".st0{fill:#13396f}.st1{fill:#9c9c9c}.st2{fill:#fefefe}"}),c.jsx("path",{d:"m191.6 19.5-.4.4c-1.2 2.1-2.3 4.2-3.5 6.3l-5.4 9.6c-.8 1.5-1.6 3-2.5 4.5-1.8 3-3.4 6.1-5.1 9.1-.9 1.5-1.6 3.1-2.5 4.6-1.8 3-3.5 6-5.1 9.1-.2.4-.6.8-.8 1.2-.9 1.8-1 1.8-3.1 1.6-.2 0-.4 0-.5-.2-.1-1.2-1.3-1.9-1.7-3-.9-2.6-2.4-4.9-3.6-7.4-.7-1.5-1.4-3-2.1-4.4-1.6-3.2-3.2-6.4-5-9.5-.8-1.4-1.4-2.8-2.1-4.1-1.8-3.3-3.4-6.6-5.1-10-.8-1.5-1.3-3.1-2.3-4.5-.9-1.3-1.2-2.8-2.1-4.1-.3.4-.2.7-.2 1-.2 13.5-.4 27-.7 40.6 0 .8.2 1.1 1.1 1.2 2.4.2 4.7.4 7 .6.6 0 .8.3.7.8 0 .7-.1 1.4 0 2.1 0 .6-.2.7-.9.7l-22.4-.3c-.7 0-1-.1-.9-.8.1-.8-.3-2 .2-2.5.5-.6 1.8-.2 2.7-.3 1.6-.1 3.3-.3 4.9-.3.9 0 1.1-.3 1.1-1.1l.6-38.4c0-2.7.1-5.4.1-8.1 0-.5 0-.8-.8-.8-2.5-.1-5-.9-7.5-.9h-.1c-1-.7-.2-1.6-.4-2.3-.1-.4.1-.7.6-.6h.8c7.8.1 15.6.3 23.4.3 1.4 0 2.1.5 2.6 1.5 1 2.4 2.4 4.6 3.5 6.9 1.7 3.5 3.6 6.9 5.4 10.4.8 1.4 1.4 2.9 2.2 4.3 1.7 3.1 3.3 6.3 4.9 9.4.7 1.2 1.2 2.5 2 3.8.7-.9 1.3-1.8 1.9-2.7l3.6-6.3c.9-1.6 1.7-3.3 2.6-5 1.7-2.9 3.5-5.8 5.1-8.7l2.1-3.9c1.6-2.8 3.2-5.7 4.8-8.5.2-.4.5-.6 1.1-.6 8.6.1 17.1.3 25.7.4.6 0 .8.2.8.7-.1.7.2 1.6-.2 2.1-.4.6-1.4.2-2.1.3-1.9.2-3.7.6-5.6.6-.5 0-.7.2-.7.6v.5c-.2 15.4-.5 30.7-.7 46 0 .9.3 1.1 1.2 1.2 2.2.2 4.5.4 6.7.6.6 0 .7.3.7.7 0 .3 0 .5-.1.8-.1 1.4-.8 2.1-2.4 2.1-10.1-.2-20.1-.3-30.2-.4-.9 0-1.2-.2-1.1-1 .1-.8-.2-1.9.2-2.4s1.6-.2 2.5-.2c1.9-.1 3.7-.3 5.6-.4.5 0 .7-.2.7-.6v-.3l.6-41.2c.1-.3.1-.5.2-.8zM391.5 24.5v1.1c-.2 12.9-.4 25.8-.7 38.7 0 .9.2 1.1 1.2 1.2 2.4.2 4.7.4 7 .6.5 0 .7.2.7.7 0 .8-.1 1.5 0 2.3 0 .5-.2.6-.8.6l-22.6-.3c-.6 0-.9-.2-.8-.8.1-.6.1-1.3 0-1.9 0-.7.3-.9 1-.9 2.3-.1 4.5-.3 6.8-.4.7 0 1.1-.2 1.1-1 .2-15.4.5-30.9.7-46.3 0-.8-.3-1-1.1-1-2.4-.1-4.8-.8-7.2-.9-.2 0-.5-.1-.5-.3 0-.8 0-1.6.1-2.4 0-.3.5-.3.8-.3 5 .1 10 .1 15.1.2 2.2 0 4.4.1 6.6.1.6 0 1 .2 1.4.6 2.5 3 5.1 6 7.7 8.9 1.5 1.7 3.1 3.4 4.6 5.1 2.4 2.7 4.9 5.4 7.3 8.2 2.4 2.7 4.8 5.3 7.2 8 1.4 1.7 3 3.2 4.5 4.9.2-.2.1-.4.1-.6.2-9.9.3-19.8.5-29.7 0-.8-.2-1.1-1.1-1.1-2.5-.1-4.8-.8-7.3-.9-.6 0-.5-.4-.4-.7.2-.8-.4-1.6.4-2.3.1-.1.5 0 .7 0l22.4.3c.8 0 1.1.2 1 .9-.1 1.9 0 1.9-2.2 2.1-2 .2-4 .6-6.1.6-.7 0-.7.4-.7.8-.1 3.5-.1 7.1-.2 10.6l-.6 39.9c0 .8-.1 1.1-1.1 1-1.4-.1-2.7-.1-4.1-.1-.7 0-1.1-.2-1.5-.7-2.1-2.4-4.2-4.9-6.4-7.3-1.6-1.7-3.1-3.5-4.7-5.2-2.4-2.7-4.9-5.5-7.3-8.2-2.4-2.7-4.9-5.4-7.2-8.1-2.4-2.8-5-5.4-7.3-8.2-1.5-1.7-3-3.4-4.6-5-.6-.8-1.4-1.7-2.4-2.8zM355.6 43.4c4.9.1 9.8.2 14.7.2.8 0 1.2.2 1.1 1-.1.4 0 .8 0 1.2 0 .7-.3 1.1-1.1 1.2-1.4.2-2.7.4-4.1.5-1.4.1-1.5.3-1.5 1.5-.1 5.2-.2 10.5-.2 15.7 0 .9-.1 1.3-1.3 1.6-4.6 1-9.2 1.7-13.9 2.3-4.9.6-9.9 1-14.9.9-3.2-.1-6.5-.3-9.6-1.1-3.7-.8-7.4-1.8-10.8-3.4-.6-.3-1.1-.7-1.6-1-1.7-1.1-3.6-2-5.2-3.4-.1-.1-.3-.2-.4-.3-1.3-1.7-2.9-3.2-4.1-5-1.2-1.8-1.7-3.7-2.5-5.6-2.4-6.1-1.6-12.3-.2-18.4.5-2.1 1.7-4.1 3-6 1.1-1.5 2.2-3 3.4-4.5.8-1 1.8-1.8 3-2.3.5-.2.8-.6 1.2-.9 2.1-1.6 4.6-2.5 7.1-3.4 2.8-1.1 5.7-1.6 8.7-2.1 2-.3 3.9-.1 5.9-.3 6.2-.5 12.3 0 18.3 1 3.9.7 7.8 1.7 11.7 2.5.5.1.6.3.6.7-.1 3.9-.1 7.9-.2 11.8 0 .5-.1.7-.7.6-1-.1-2-.1-3.1-.1-.7 0-.9-.2-1-.8-.1-1.8-.5-3.6-.6-5.4-.1-1.4-1.4-1.9-2.5-2.4-6.2-2.8-12.8-3.8-19.7-3.6-3.2.1-6.2 1-9 2.2-2.4 1.1-4.1 2.8-5.7 4.7-1.1 1.3-1.7 2.7-2.3 4.2-3 7.6-3.2 15.5-1.3 23.3 1 4.1 3.3 8 7.3 10.7 3.4 2.2 7.2 3.4 11.4 3.6 4 .2 7.9-.1 11.7-.9.9-.2 1.2-.6 1.2-1.4 0-4.9.1-9.7.2-14.6 0-.5-.2-.7-.7-.7-2.4-.1-4.8-.8-7.2-.9-.5 0-.6-.2-.6-.6-.1-2.7-.1-2.7 2.9-2.6 4 .2 8.3.3 12.6.3zM506.9 71.3c-4.7-.1-9.4-.2-14.1-.2-.7 0-.9-.1-.9-.8.1-.9-.3-1.9.2-2.5.5-.7 1.7-.2 2.6-.3 1.4-.2 2.8-.3 4.2-.4.6 0 .7-.2.5-.6-1.3-2.4-1.9-5.1-3.2-7.6-.7-1.4-1.1-3-1.7-4.4-.5-1.4-1.6-2.1-3.1-2.1-7.6-.1-15.2-.2-22.8-.4-.7 0-1 .2-1.3.8-1.1 2-1.7 4.3-2.8 6.3-.9 1.6-1.4 3.3-2.2 5-.3.6-.6 1.2-1 1.8-.2.4-.1.6.5.6 2.4.2 4.8.5 7.2.7.6.1.9.2.8.8-.1.9.4 2.1-.3 2.7-.5.4-1.8.1-2.7.1-5.6-.1-11.2-.2-16.9-.2-.7 0-1-.1-.9-.8.1-.7.1-1.5 0-2.2 0-.4.1-.5.6-.6 3.9-.3 3.9-.4 5.4-3.6 1.3-2.9 2.6-5.7 4.1-8.5.9-1.7 1.6-3.6 2.6-5.3.9-1.6 1.5-3.3 2.4-4.8 1-1.7 1.6-3.5 2.5-5.2 1.1-1.8 1.7-3.8 2.7-5.5.9-1.5 1.4-3.2 2.3-4.8 1-1.7 1.6-3.6 2.6-5.3 1-1.8 1.6-3.7 2.7-5.4.7-1.2 1.3-2.4 1.8-3.7.2-.5.5-.6 1-.6 4.2.1 8.5.1 12.8.2.8 0 1.2.3 1.6 1 1.9 3.6 3.2 7.4 4.9 11.1.8 1.7 1.3 3.4 2.1 5 1 1.9 1.5 3.9 2.5 5.8.9 1.7 1.4 3.6 2.3 5.3 1 1.8 1.5 3.8 2.4 5.5 1 1.8 1.5 3.8 2.4 5.7 1.7 3.6 3.3 7.2 4.8 10.9.2.6.6 1.3.9 1.9.3.6.9.8 1.5.8 1 .2 2.1.3 3.1.4.5.1.8.2.8.8-.1.9.4 2.2-.3 2.8-.5.4-1.9.1-2.8.1-3.9-.2-7.9-.2-11.8-.3zm-25.8-48.2-4.5 9.3c-.8 1.7-1.6 3.4-2.4 5.2-1.4 3-2.9 6-4.2 9-.2.6-.2.8.5.8h3.6c5.3.1 10.5.2 15.8.2 1.4 0 1.5.3 1-1.3-.6-1.8-1.3-3.5-2.1-5.2-.9-1.8-1.5-3.8-2.4-5.6-1.2-2.5-2.2-5.2-3.2-7.8-.5-1.7-1.4-3.1-2.1-4.6zM270.4 63.3c-.5-.5-.7-.9-.8-1.4-1.1-3.3-2.7-6.5-3.9-9.9-.3-1-.9-1.9-1.2-2.9-.2-.6-.6-.5-1.1-.5-4.1-.1-8.2-.1-12.3-.2s-8-.1-12-.2c-.7 0-1 .2-1.2.7-1.3 3.2-2.6 6.4-4.1 9.6-.5 1.2-1 2.3-1.6 3.5-.3.6-.1.8.6.9l6.9.6c.6 0 .8.2.8.7-.1.9.3 2.1-.2 2.7-.5.6-1.8.1-2.8.1-5.5-.1-11-.2-16.6-.2-.8 0-1-.2-1-.9.1-.8-.2-1.8.2-2.4.4-.6 1.6-.2 2.4-.3 1.8-.2 2.7-1.1 3.4-2.6 1.6-3.6 3.2-7.2 5.1-10.7.8-1.5 1.4-3.1 2.2-4.6 1.9-3.7 3.6-7.5 5.4-11.2.8-1.5 1.4-3.1 2.2-4.6 1.9-3.7 3.6-7.5 5.4-11.2.6-1.3 1.3-2.6 1.9-4 .5-1.1 1.3-2.1 1.7-3.3.1-.4.4-.5.8-.5 4.5.1 9.1.1 13.6.2.4 0 .6.1.8.5 1 2.5 2.1 5 3.2 7.5 1.6 3.7 3.2 7.5 4.9 11.2.6 1.3 1.1 2.6 1.7 3.9 1 2.3 1.9 4.7 3 7 .8 1.9 1.4 3.8 2.4 5.7 1 1.8 1.5 3.7 2.4 5.6 1.7 3.5 3.3 7 4.6 10.6.2.6.7.9 1.4 1l3.6.6c.6.1.8.3.7.8v.1c0 .9.3 2.1-.2 2.6-.5.6-1.9.1-2.8.1-8.6-.1-17.2-.3-25.8-.4-1.1 0-1.4-.3-1.3-1.2.1-2.3.1-2.2 2.6-2.4 1.3-.2 3-.4 5-.6zm-30-19.7 21.7.3c-.6-1.5-1.1-2.9-1.8-4.3-.9-1.9-1.5-3.9-2.4-5.8-1-2.3-1.9-4.6-2.8-7-.9-2.3-2-4.5-2.9-6.8-.1-.2-.1-.5-.3-.5-1.6 2.1-2.2 4.5-3.5 6.7-1.1 1.8-1.7 3.7-2.6 5.6-1.4 2.8-2.6 5.6-3.8 8.4-.5 1.2-1.3 2.2-1.6 3.4z",className:"st0"}),c.jsx("path",{d:"M76.7 77.8c1.1 3.1 2.7 6.1 4.1 9.1.1.3.2.5.3.8.7 1.6 1.2 3.2 2.1 4.7.2.3.4.7.4 1.2-1.4-.7-2.4-1.8-3.6-2.8-2.7-2.3-5.4-4.6-8.2-6.9-.5-.4-.6-.4-1 .1-1.1 1.5-2.3 2.9-3.7 4.1-1.1 1-2.5 1.5-3.8 2.1-4.6 2.2-9.6 3.1-14.6 3.8-1.6.2-3.3-.2-4.9-.2-5 0-9.8-.7-14.4-2.4-2.5-.9-4.8-2.1-7-3.5-1.7-1.1-3.2-2.3-4.7-3.7-.7-.6-1.1-.1-1.5.2-.9.7-1.7 1.4-2.6 2.1-2.2 1.7-4.3 3.5-6.5 5.3-.4.3-.9.6-1.5.8 2.6-5.3 5.1-10.5 7.7-15.8h1.1l44 .6c2.4 0 4.8-.1 7.2.1.2.1.4.2.5.3 2.9 2.5 5.7 5 8.7 7.4 1.2 1 2.2 2.2 3.7 3-1.6-3.6-3.1-7.1-4.6-10.6 1.1.2 1.9.2 2.8.2zM22.6 58.7c.4-1.6 1.2-3 1.9-4.5.1-.2.3-.4.4-.6 1.4-3 2.7-6 4.2-8.9 1.8-3.6 3.5-7.2 5.3-10.8.7-1.4 1.3-2.8 2-4.2 1.9-3.8 3.7-7.5 5.5-11.3.9-1.8 1.7-3.6 2.5-5.4.5-1 1.2-1.5 1.9-1.1.6.3.8 1 1.1 1.5.3.5.4 1.1.7 1.6 1.1 2.7 2.4 5.4 3.6 8.1 1.5 3.4 3.1 6.8 4.6 10.2 1.6 3.5 3.1 7 4.8 10.5.8 1.8 1.5 3.6 2.3 5.3 1.7 3.5 3.3 7 4.8 10.5.1.3.6.5.5.9-1.4-.6-2.7-1.5-3.9-2.5.4-.3.1-.6 0-.9-.3-.9-.9-1.8-1.3-2.7-1.5-3.5-3-7.1-4.7-10.6-.9-1.8-1.6-3.7-2.4-5.6-1.6-3.5-3.2-7-4.7-10.5-1.2-2.8-2.6-5.6-3.7-8.4-.2-.5-.2-1-.7-1.4-.1 1.8-.3 3.5-.4 5.1-.4 8.5-.5 17.1-.8 25.7 0 .3-.1.7.2.9-.5.3-1 .7-1.5 1-.9.4-1.6 1.2-2.6 1.2-1.4 0-2.8-.2-4.2-.8-1.3-.5-2.7-.7-4.1-.3-1.1.4-2.1 1.1-3 1.9-2 1.6-4 3.3-6.1 4.7-.6.5-1.3 1.2-2.2 1.4z",className:"st1"}),c.jsx("path",{d:"M22.6 58.7c1-.2 1.6-.9 2.3-1.4 2.1-1.5 4.1-3.1 6.1-4.7.9-.7 1.9-1.5 3-1.9 1.3-.5 2.8-.3 4.1.3 1.3.6 2.7.8 4.2.8 1 0 1.7-.8 2.6-1.2.6-.2 1-.6 1.5-1 .8-.3 1.4-.9 2.1-1.3.7-.4 1.5-.9 2.3-1 1.5-.2 2.9.3 4.1 1.1 1.8 1.3 3.1 3 4.7 4.4 1.8 1.7 3.4 3.4 5.3 5 1.2 1 2.4 1.9 3.9 2.5 1.4 1.2 3.2 1.6 4.9 1.8 5.6.4 11.3.4 16.9.5 1.5 0 .9.8 1 1.4.2.8-.3.9-1.1.9-5.3-.1-10.6-.2-15.9-.2-1.5 0-2.9-.5-4.3-.8-1-.4-2-.9-3-1.2-.4-.5-1.1-.7-1.7-1.1-2.7-1.7-5-3.8-7.1-6-1.8-1.8-3.6-3.5-5.5-5.2-.9-.9-1.9-1-3.1-.4-1.5.7-2.7 1.9-4 2.8-.6.4-1.2.9-1.8 1.1-2.2.7-4.5.7-6.6-.4-1.4-.7-2.5-.7-3.8.3l-3.9 3c-.9.8-1.8 1.6-2.8 2.3-2 1.5-4.1 2.8-6.5 3.7-.1 0-.3-.1-.2.2-6.2.6-12.3 0-18.4.1-.9 0-1-.2-1-1 .1-1.5.1-1.5 1.8-1.5 4.7.1 9.5.1 14.2.2 1.5 0 3-.2 4.2-1.1.5-.3 1.1-.3 1.4-.8.1.1.2 0 .1-.2z",className:"st0"}),c.jsx("path",{d:"M70.8 65.2c1.4.5 2.8.6 4.3.7 5.2.1 10.3.2 15.5.2.8 0 1.2.2 1.1 1-.1 1.5 0 1.5-1.7 1.5-5.1-.1-10.2-.2-15.3-.2-.8 0-1.7-.3-2.5-.2-.9-.3-1.8-.2-2.7-.4-3.3-.8-6.4-2.2-9.4-3.8-2.7-1.4-5.3-2.8-8.1-4-2-.8-4-1.6-6.3-1.4-.7 0-1.3-.3-2.1-.1-1.1.3-2 .8-2.9 1.4-.5.3-.9.6-1.5.7-1.5.3-2.8.2-4.2-.2-1.2-.3-2.4-.5-3.4.4-1 .8-2 1.6-3 2.3-3 2.1-6.2 3.6-10.1 3.7-.1 0-.3-.1-.2.2-5.5-.1-10.9-.2-16.4-.2-.9 0-1.1-.2-1.1-1 .1-1.6 0-1.6 1.9-1.6l15.6.3c.5 0 1 .1 1.6-.1h.6c2.8-.5 4.9-2.2 7.1-3.7 1.2-.9 2.5-1.7 3.8-2.6.6-.5 1.4-.6 2.1-.3 2.3 1 4.4.4 6.5-.4 1.9-.8 3.9-1.3 6-1.4.8.4 1.7.1 2.5.3 2.7.5 5 1.5 7.3 2.8 2.5 1.3 5 2.7 7.6 4 1.4.7 3 1.3 4.6 1.6-.1.2.1.2.2.2.8 0 1.7.3 2.6.3z",className:"st0"}),c.jsx("path",{d:"M16.8 70c-4.3 0-8.6.1-12.8.1H.7c-.5 0-.7-.2-.7-.6v-.2C0 67 0 67 2.5 67.1l15.2.3c.2 0 .4 0 .6-.1 1.4.2 2.7.1 4.1-.2 3.7-.7 7-2.4 10.3-4 .8-.4 1.5-.9 2.5-.9 2 0 4.1 0 6 .7 2.8 1 5.7 1.7 8.8 1.2 1.2-.1 2.4-.2 3.7-.2 1.2 0 2.4 0 3.6.5 2.7 1.1 5.3 2.3 8 3.4 1.5.6 3.1 1.1 4.8.9h2.5l17.3.3c1.1 0 1.4.2 1.3 1.2-.1 1.3 0 1.3-1.5 1.3-5.2-.1-10.4-.2-15.7-.2h-2.6c-2.1.1-4.1-.3-6-1-2.8-1-5.5-2.2-8.2-3.4-1.4-.6-2.9-.8-4.4-.4-1 0-1.8.3-2.7.6-1.1.3-2.1.4-3.1.1-2.4-.8-4.8-1.7-7.2-2.5-1.7-.6-3.3-.7-5 .1-2.5 1.1-4.9 2.3-7.5 3.2-1.7.6-3.4 1.3-5.1 1.6-1.8.3-3.6.3-5.4.4zM76.7 77.8H74c-2.8 0-5.5-.1-8.3-.1-2.4-.2-4.8 0-7.2-.1l-44-.6h-1.1c-3.8 0-7.8-.1-11.7-.2-.9 0-1.1-.2-1.1-1 .1-1.7 0-1.7 1.8-1.6 4.2.1 8.4.1 12.5.1.3 0 .6.1.9.1 14.9.2 29.8.5 44.6.7.7 0 1.4 0 2.1-.1 3.4.2 6.8.2 10.2.2h2.5c4.2.1 8.5.2 12.7.2h1.5c1.6.1 1.3-.2 1.4 1.3.1 1-.3 1.2-1.4 1.2-4.1 0-8.4 0-12.7-.1z",className:"st0"}),c.jsx("path",{d:"M74.1 72.4c5 .1 10 .2 14.9.3 1.9 0 1.9 0 1.9 1.8 0 .6-.2.7-.8.7-4.9-.2-9.7-.3-14.6-.4H72.6c-2.5-.2-5.1-.4-7.6-.9-1.5-.3-3.1-.8-4.7-.8.1-.2-.1-.2-.2-.2l-2.4-.6c-4.3-1-8.7-1.9-13.2-1.5-3.5.4-7.1.6-10.6 1-6.2.7-12.4 1.9-18.7 1.8-4.5-.2-9-.3-13.5-.4-.9 0-1.2-.2-1.1-1v-.6c-.1-.7.1-1 1-.9 4.3.2 8.5.4 12.8.6h1.8c.5 0 .9.1 1.4 0 2-.2 4.1-.6 6.1-.8 4.4-.4 8.8-1.1 13.3-1.7 1.5-.2 3-.6 4.6-.5 4.7.1 9.4-.3 13.9.7 2.2.6 4.4 1.2 6.5 1.8 3.1.8 6.2 1.8 9.5 1.5.9 0 1.7.1 2.6.1zM162.5 94.1c-1.8.9-3.6 1.4-5.6 1.2-2.5-.3-4.6-1.5-5.7-3.4-2.1-3.5-.1-6.2 3.1-7.8 2.6-1.3 5.2-.7 7.8.3.2.1.4.2.7.2h.2c-.2-1.2.8-.9 1.5-.9 2.2.1 1.7-.1 1.8 1.6 0 3.4.1 6.8-.4 10.1-.5 2.9-1.5 4.1-5.2 4.8-3.3.6-6.4.2-9.2-1.6-.4-.3-.4-.5 0-.8.1-.1.2-.1.3-.2.4-.4.3-1.2 1.1-1.2.6 0 1 .5 1.6.7 1.4.6 2.9.8 4.4.8 2.1-.1 4.1-1.3 3.6-3.8zm-3.7-1.1c1.1.2 2-.6 2.9-1.3 1.4-1 1.4-3.8.1-4.7-2.1-1.4-5.8-1.3-7.4 1-.5.7-.7 1.4-.4 2.1.6 1.5 2.7 2.8 4.8 2.9zM380.6 97.6c-1.4.5-2.7 1.2-4.3 1.2-2.1 0-3.9-.7-5.5-2-2.3-1.9-2.9-4.7-1.2-7 1.3-1.7 3.2-2.7 5.6-2.8 1.7-.1 3.4 0 4.9 1 .5.3.9.4 1.2-.2.4-.8 1.1-.4 1.8-.4 1.1-.1 1.4.2 1.4 1.3 0 3.4.1 6.8-.4 10.1-.5 3.2-2 4.5-5.5 5.1-3.1.6-6 0-8.7-1.4-.6-.3-.8-.6-.3-1.3 1-1.3.9-1.3 2.5-.7 1.5.6 3 1 4.7 1 2.6 0 4-1.3 4.1-3.6.1-.1.1-.2 0-.2-.2-.2-.2-.1-.3-.1zm-3.8-8.1c-1.7-.2-3 .4-4.1 1.4-.6.6-.7 1.4-.5 2.3.2.8.3 1.6 1.4 2.1 2.7 1.4 4.2 1.4 6.5-.4 1-.8 1.2-3.4.3-4.2-1-.8-2.2-1.4-3.6-1.2zM337 97.4c0 1.7-.1 3.3-.1 4.9 0 .6-.2.8-.8.8-2.9 0-2.9 0-2.9-2.6.1-4.4.1-8.8.2-13.1 0-.8.2-1.1 1.1-.8.9.3 2 0 2.8.8.2.2.3-.1.4-.1 3-1.8 8.5-.6 10.2 1.7 1.6 2.1 1.8 4.7.1 6.9-2.5 3.2-5.4 3.9-9.3 2.2-.5-.2-1-.4-1.7-.7zm8.6-4.8c.1-2.6-1.1-3.6-4.6-3.6-2.1 0-3.8 1.4-3.8 3.3 0 2.2 1.9 4.2 4.1 4.1 2.7-.2 4.1-.9 4.3-3.8z",className:"st0"}),c.jsx("path",{d:"M15.2 73.6c6.3.1 12.5-1.1 18.7-1.8 3.5-.4 7.1-.7 10.6-1 4.5-.5 8.9.4 13.2 1.5l2.4.6c.1.1.2.1.2.2.7.8 1.7 1.2 2.3 2.1-.7 0-1.4.1-2.1.1-14.9-.2-29.8-.5-44.6-.7-.3 0-.6-.1-.9-.1-.1-.4.1-.7.2-.9z",className:"st1"}),c.jsx("path",{d:"M104.1 51.3c.3-16.7.5-33.4.8-50 0-.4-.4-1.2.4-1.2s.4.8.4 1.3c-.1 11.6-.4 23.3-.4 34.9-.1 21.8-.6 43.6-.9 65.4v.8c0 .3-.3.3-.5.3s-.5 0-.5-.3v-.8c.2-16.9.5-33.7.7-50.4zM217.1 91.6c.2.9.6 1.5 1.5 1.9 1.3.6 2.5 1.2 4.1 1 .8-.1 1.5-.3 2.1-.8.4-.2.8-.5 1.3-.2.6.4 1.3 1 1.2 1.6-.1.6-.9 1-1.6 1.2-3.7 1.1-7.2.9-10.3-1.5-1.4-1.1-2.1-4.2-1.5-6.2.9-2.9 3.3-3.8 6.2-4.1 3.5-.4 6.1.9 8 3.5.7 1 .5 2.2.5 3.4 0 .5-.5.3-.8.3-2.6 0-5.2-.1-7.8-.1-1 .1-1.9 0-2.9 0zm3.9-1.7c1.1 0 2.2 0 3.4.1.9.1.8-.2.6-.8-.5-1.2-1.4-1.9-2.8-2.2-2-.5-4.4.6-5 2.2-.2.5-.1.8.6.8 1-.2 2.1-.1 3.2-.1zM408.6 98.6c-2.7 2.1-6.4 1.7-8.9-.6-1-.9-.8-3.1.3-4 1.5-1.3 3.3-1.4 5.2-1.5 1 0 2.1 0 3.2.1.6 0 .6-.2.6-.6-.2-1.2-1.3-1.9-2.9-2.1-1.5-.1-2.9.1-4.2.7-.6.2-.9.1-1.1-.4-.1-.2-.2-.4-.4-.6-.7-.9-.7-.9.5-1.3 2.8-.9 5.6-1.3 8.5-.3 2.1.8 3 2.4 3.2 4.2.2 2.4 0 4.8 0 7.3 0 .4-.2.5-.6.5h-2.3c-1-.2-.6-1-1.1-1.4zm-3.3-.9c2.2.1 3.4-.9 3.5-2.5 0-.2.2-.6-.3-.6-1.6 0-3.2-.2-4.8.1-1.3.3-1.6 1.4-.7 2.3.7.7 1.6.6 2.3.7zM178.9 91c-1.7 0-3.4 0-5.1-.1-.7 0-.7.2-.5.7.6 1 1.6 1.6 2.6 1.9 1.6.5 3.3.7 4.8-.4.3-.2.8-.4 1.3-.2.6.4 1 1 1.3 1.6.1.2-.3.3-.5.4-2.7 1.8-5.7 1.8-8.6.8-4.9-1.7-5.7-5.8-3.5-9.4 1.2-1.9 3.4-2.5 5.7-2.6 3.1-.1 5.6.9 7.5 3.2.9 1.1.7 2.5.7 3.8 0 .4-.4.3-.7.3-1.6.1-3.3 0-5 0zm-1.5-1.8c1.2 0 2.3 0 3.5.1.3 0 .8 0 .5-.4-.8-1.1-1.4-2.4-3.2-2.7-1.6-.3-3.8.4-4.8 1.7-.2.3-.4.7-.2 1.1.1.4.6.2.9.2h3.3zM443.1 98.8c-2.1 1.9-4.4 1.8-6.6 1.3-2.5-.7-3.9-2.2-3.2-4.4.4-1.6 1.9-2.1 3.3-2.4 1.8-.4 3.6-.3 5.5-.2 1.1 0 1.1-.1.8-1-.2-.7-.7-1.2-1.5-1.3-1.9-.5-3.8-.5-5.6.3-.5.2-.7.1-.9-.3 0-.1-.1-.1-.1-.2-1-1.5-1.1-1.5.8-2 2.8-.8 5.6-.9 8.4.2 1.1.4 1.7 1.1 2 2.1.6 1.9.9 3.8.8 5.8-.1 1.1-.1 2.1-.1 3.2 0 .5-.1.8-.8.7-.4-.1-.9-.1-1.3 0-1-.1-1.6-.3-1.5-1.8zm-3.6-.5h.6c2.1-.4 2.8-.9 2.9-2.6 0-.4-.1-.5-.5-.5-1.3 0-2.7-.2-4 0-.8.1-1.4.4-1.9.9-.2.2-.2.4-.1.7.8.9 1.6 1.5 3 1.5zM263.9 94c0 1-.1 2 0 3.1 0 .6-.5.6-.9.5-.9-.2-2.1.6-2.5-.5-.4-.9-.3-1.1-1.1-.4-2.1 1.6-6.2.9-7.9-.8-1.4-1.4-1.6-4.3 1.4-5.1 2.1-.6 4.2-.6 6.3-.6.4 0 1 .2 1.1-.2.1-.5 0-1-.5-1.5-.7-.7-1.5-.9-2.4-1-1.5-.1-3.1-.1-4.5.6-.4.2-.7.2-.9-.2-.1-.2-.2-.4-.4-.6-.8-1.2-.7-1.3.8-1.7 2.4-.7 4.7-.8 7.2-.3 3 .6 4 1.6 4.2 4.7.2 1.4.3 2.7.1 4zm-5.7-1.7c-1.1 0-2.2 0-3.2.3-.5.1-1.1.3-1.2.8-.1.6.2 1.1.7 1.4 1.6 1.1 4.4.8 5.5-.7.3-.4.6-1 .4-1.5-.2-.4-.8-.2-1.2-.2-.3-.2-.7-.1-1-.1zM323 86.1c4.4.1 7 2 7.6 5.3.6 3.4-1.4 5.7-4.6 6.8-3.8 1.2-7.1.3-9.8-2.3-2-1.9-1.6-5.7.6-7.6 1.9-1.7 4.1-2.2 6.2-2.2zm-.2 10c.2 0 .7-.1 1.1-.2 1.6-.3 3-1.7 3.3-3.2.3-1.6-.3-2.7-1.8-3.5-1.1-.6-2.2-.6-3.4-.3-.6.1-1.4-.1-2 .5-1.3 1.3-1.8 3.1-1 4.7.8 1.2 2 1.9 3.8 2zM132.8 89.4c0-1.8.1-3.6.1-5.4 0-.5.2-.8.8-.7.6.1 1.1 0 1.7 0 .5 0 .8.1 1 .5.2.5.5.5.9.3 2.4-1.3 4.9-1.1 7.4-.3 1.5.5 2.2 1.8 2.6 3 .6 2.1.4 4.2.3 6.4 0 .2 0 .3-.1.5-.1.7.3 1.7-.2 1.9-.9.3-2.1.1-3.1.1-.6 0-.3-.5-.3-.8 0-1.8.1-3.7.1-5.6 0-.3 0-.6-.1-.9-.3-1.7-.9-2.3-2.3-2.6-2-.4-3.2 0-4.3 1.3-1.1 1.4-.9 2.9-1 4.5-.1 1.1-.1 2.2 0 3.3 0 .6-.2.7-.8.7-2.7 0-2.7 0-2.6-2.4-.2-1.3-.1-2.5-.1-3.8zM359.4 99.1c-4.5.2-8.6-2.8-8.2-6.9.2-2.6 1.7-3.9 4.3-4.9 2.5-.9 5-1 7.6.1 3.9 1.6 5 6.1 2.7 8.9-1.4 1.8-3.6 2.7-6.4 2.8zm4.1-6.3c.2-1.7-1.7-3.6-4.3-3.7-2.7-.1-4.4 1.7-4.4 3.7 0 2.1 1.7 3.7 3.9 3.8 2.6.2 4.9-2.1 4.8-3.8zM273.7 85.5c3.7-.1 3.7-.1 5 2.9.7 1.6 1.6 3.2 2.4 4.8.4.7.8.6 1.1.1.3-.3.5-.7.6-1.1.8-2.1 2.1-3.9 3-5.9.2-.5.6-.7 1.2-.7.7.1 1.5.1 2.2.1.5 0 .7.2.3.5-.3.2-.4.5-.5.7-1.4 2.6-2.6 5.2-4.1 7.7-1.2 1.9-2 3.9-3.5 5.7-2.1 2.6-5 2.4-7.6 1.3-.5-.2-.7-.6-.4-1.1 0-.1.1-.1.1-.2.5-.9 1.2-1.1 2.3-.8 1.5.6 3.3-.1 3.8-1.5.1-.4.2-.9-.1-1.2-.4-.4-.6-.9-.8-1.4-1.1-2.5-2.5-4.8-3.6-7.3-.4-.8-1-1.6-1.4-2.6zM191.6 85.3c2.1-1.2 4.3-1.5 6.6-1.1 2.5.5 4 2 4.2 4.4.2 2.5 0 4.9 0 7.4 0 .5-.2.7-.8.6h-1.5c-.9 0-1.3-.4-1.3-1.3.1-1.7.2-3.3.1-5 0-1-.4-1.8-.9-2.7-.6-.9-1.5-1-2.5-1-2.2-.1-3.3.4-3.9 2.4-.6 2.1-.3 4.3-.4 6.4 0 .8-.2 1-1.1 1-2.6-.1-2.6-.1-2.6-2.4.1-3 .1-5.9.1-8.9 0-.8.3-1.1 1.1-.9.3.1.7 0 1.1 0 .9 0 1.9-.1 1.8 1.1zM305.7 82.2c2.4 0 4.8.1 7.2.1.7 0 1 .2 1 .8 0 1.9 0 1.9-2.1 1.9-1.1 0-2.2 0-3.4-.1-.6 0-.8.1-.8.7 0 3.9-.1 7.8-.1 11.8 0 .6-.1.8-.9.8-2.8 0-2.8 0-2.8-2.6 0-3.3.1-6.7.1-10.1 0-.6-.1-.8-.9-.8-1.6.1-3.2 0-4.7 0-.6 0-.8-.1-.8-.8 0-2 0-2 2.2-2 2 .3 4 .3 6 .3zM416.9 95c0-1.4 0-2.8.1-4.1 0-.5-.1-.7-.7-.8-1.8-.1-1.9-.2-1.7-1.9.1-.4.2-.5.6-.4h1.3c.4 0 .6-.1.6-.5.4-3.3 1.8-4.4 6.1-4.3.3 0 .6.1.9.2 1.7.4 1.7.3 1 1.8-.2.5-.6.6-1 .6-.5 0-1-.1-1.5-.2-1.3-.1-2.3 1-2.2 2.2 0 .4.4.3.6.3.8 0 1.7.1 2.5 0 .7 0 1 .2.9.8v.8c.1.7-.2.9-1 .8-.7-.1-1.3 0-2-.1s-.8.2-.8.8c0 2.8-.1 5.5-.1 8.2 0 .7-.2.8-1 .8-2.7-.1-2.7 0-2.7-2.6 0-.7.1-1.6.1-2.4z",className:"st0"}),c.jsx("path",{d:"M55.5 69c-4.6-1-9.3-.6-13.9-.7-1.5 0-3 .3-4.6.5-4.4.5-8.8 1.2-13.3 1.7-2 .2-4.1.5-6.1.8-.4.1-.9 0-1.4 0 .1-.4.3-.9.4-1.3 1.8-.1 3.6-.1 5.4-.4 1.8-.3 3.4-1 5.1-1.6 2.6-.9 5-2.1 7.5-3.2 1.7-.8 3.3-.6 5-.1 2.4.8 4.8 1.7 7.2 2.5.9.3 1.9.2 2.9-.1.9-.3 1.8-.6 2.7-.6 1.3.8 2.4 1.5 3.1 2.5zM45.8 55.8c-2.1.1-4.1.6-6 1.4-2 .9-4.2 1.5-6.5.4-.7-.3-1.4-.2-2.1.3-1.2.9-2.5 1.7-3.8 2.6-2.2 1.5-4.3 3.1-7.1 3.7h-.6c0-.5.5-.8.4-1.4.1 0 .2-.1.2-.2 2.4-.9 4.5-2.2 6.5-3.7 1-.7 1.9-1.5 2.8-2.3 1.3-1 2.6-2.1 3.9-3 1.3-1 2.5-1 3.8-.3 2.1 1.1 4.3 1.1 6.6.4.7-.2 1.2-.7 1.8-1.1.2 1.2.1 2.2.1 3.2z",className:"st1"}),c.jsx("path",{d:"M49.9 64.1c-3.1.5-5.9-.2-8.8-1.2-1.9-.7-4-.7-6-.7-1 0-1.7.5-2.5.9-3.3 1.6-6.6 3.2-10.3 4-1.3.3-2.7.4-4.1.2v-.4c.1-.1.2-.1.2-.2 3.9-.1 7.1-1.6 10.1-3.7 1-.8 2-1.5 3-2.3 1-.8 2.2-.7 3.4-.4 1.4.3 2.8.5 4.2.2.6-.1 1.1-.4 1.5-.7.9-.6 1.8-1.1 2.9-1.4.8-.2 1.4.1 2.1.1v.9c-.1.8.1 1.4.9 1.9 1.4.8 2.4 1.9 3.4 2.8z",className:"st1"}),c.jsx("path",{d:"M124 87.3c0-2.3.1-4.7.1-7 0-.8.3-1.1 1.1-1 .7.1 1.5.1 2.2 0 .6 0 .7.2.7.7l-.3 14.7c0 .5-.2.8-.8.7-1-.1-2.4.3-3-.2-.5-.5-.1-1.7-.1-2.6.1-1.7.1-3.5.1-5.3zM231.6 90.9c0-1.8.1-3.6.1-5.4 0-.5.1-.8.8-.7.5.1 1.1 0 1.6 0 .6 0 .9.1 1.1.6.1.4.3.6.8.2 1.2-.8 2.7-.8 4.1-1h.2c.6.8.1 1.6.3 2.4.1.5-.4.4-.7.4h-.7c-2.3 0-3 .6-3.7 2.6-.6 2-.3 4-.4 6.1 0 .6-.1.8-.9.8-2.6 0-2.6 0-2.5-2.4-.2-1-.1-2.3-.1-3.6zM392 88.9c1.5-1.4 3.1-1.6 4.6-1.7.5 0 .7.1.6.5v.4c0 .6.2 1.4-.1 1.9-.4.5-1.3.2-2 .1-1.4-.1-2.7 1.4-3 2.6-.4 2-.3 3.9-.2 5.9 0 .7-.1 1-1 1-2.5-.1-2.5 0-2.4-2.3 0-3.1.1-6.1.1-9.2 0-.6.2-.9.9-.8h.7c.9.1 2.1-.2 1.8 1.6zM426.3 93.9c0-1.8.1-3.6.1-5.4 0-.5.1-.6.7-.6 3 0 3 0 3 2.7 0 2.9-.1 5.9-.1 8.8 0 .7-.2.9-1 .8-2.8-.1-2.8 0-2.7-2.5v-3.8zM210 90.6c0 1.8-.1 3.5-.1 5.3 0 .6-.1.8-.9.8-2.6 0-2.6 0-2.6-2.4.1-3 .1-6 .1-9 0-.7.2-1 .9-.8h.8c1.1 0 1.7.6 1.7 1.6.2 1.5.1 3 .1 4.5zM243.4 91.1c0-1.8.1-3.6.1-5.4 0-.5.2-.7.8-.7 2.7 0 2.7 0 2.6 2.4 0 3-.1 6.1 0 9.1 0 .7-.2.8-1 .8-2.6-.1-2.6 0-2.5-2.3v-3.9zM208.6 82.5c-1.3 0-2.2-.7-2.1-1.7.1-1 .8-1.8 1.5-1.8 1.6 0 3.1.8 3 1.6 0 .9-1.4 1.9-2.4 1.9zM250.7 80.2c-2.4 1.4-4.1 3.7-7.4 3.1.5-.8 1.2-1.4 1.9-2 .5-.4.7-1.1 1.3-1.1 1.3-.1 2.6 0 4.2 0zM426.1 86.1c1.1-.9 2-1.9 3-2.9.1-.2.4-.2.6-.2 1 .2 2.1.3 3.4.5-2.1 1.5-3.9 3.2-7 2.6z",className:"st0"}),c.jsx("path",{d:"M70.8 65.2c-.9-.1-1.8-.3-2.7-.6-.1-.1-.2-.1-.2-.2.1-.7-.5-1.1-.5-1.8 1.1.3 2 .8 3 1.2.1.6.3 1 .4 1.4zM74.1 72.4h-2.5c-.1-.4-.3-.7-.4-1.1h2.6c.1.3.2.7.3 1.1zM72.4 68.7h-2.5c-.1-.3-.2-.6-.4-.9.9.2 1.8.1 2.7.4.1.2.2.3.2.5zM72.6 74.7h2.7v.6h-2.5c0-.2-.1-.4-.2-.6zM22.6 58.7c0 .1 0 .2-.1.2 0-.1 0-.2.1-.2zM83.7 93.7c.1 0 0 0 0 0z",className:"st1"}),c.jsx("path",{d:"M65.8 77.7c2.8 0 5.5.1 8.3.1 1.5 3.5 3.1 7 4.6 10.6-1.6-.8-2.5-2-3.7-3-3-2.4-5.8-4.9-8.7-7.4-.1-.1-.3-.2-.5-.3zM64.8 57.9c-1.8-1.6-3.5-3.4-5.2-5-1.6-1.5-2.9-3.2-4.7-4.4-1.2-.8-2.6-1.3-4.1-1.1-.9.1-1.6.6-2.3 1-.7.4-1.3 1-2.1 1.3-.3-.2-.2-.6-.2-.9.2-8.5.4-17.1.8-25.7.1-1.6.2-3.3.4-5.1.5.5.5 1 .7 1.4 1.1 2.8 2.5 5.6 3.7 8.4 1.5 3.5 3.1 7 4.7 10.5.8 1.8 1.5 3.7 2.4 5.6 1.7 3.5 3.2 7 4.7 10.6.4.9.9 1.8 1.3 2.7 0 .1.4.4-.1.7z",className:"st2"}),c.jsx("path",{d:"M67.4 62.7c.1.6.6 1.1.5 1.8-1.6-.3-3.2-.9-4.6-1.6-2.6-1.2-5.1-2.6-7.6-4-2.3-1.2-4.7-2.3-7.3-2.8-.8-.2-1.7.1-2.5-.3 0-1 0-2 .1-3 1.4-.9 2.5-2.1 4-2.8 1.2-.6 2.2-.5 3.1.4 1.9 1.7 3.7 3.5 5.5 5.2 2.2 2.2 4.5 4.3 7.1 6 .5.4 1.2.5 1.7 1.1zM20.5 62.8c-.1 0-.2.1-.2.2-.2-.3 0-.2.2-.2zM69.6 67.7c.1.3.2.6.4.9-1.7.2-3.2-.3-4.8-.9-2.7-1.1-5.4-2.2-8-3.4-1.1-.5-2.4-.5-3.6-.5-1.2 0-2.4.1-3.7.2-1.1-1-2-2-3.2-2.8-.8-.5-1-1.1-.9-1.9v-.9c2.3-.2 4.3.6 6.3 1.4 2.8 1.2 5.5 2.6 8.1 4 2.9 1.8 6 3.1 9.4 3.9z",className:"st2"}),c.jsx("path",{d:"M67.9 64.4c.1.1.2.1.2.2-.1 0-.3 0-.2-.2zM18.5 66.8c-.1.1-.2.1-.2.2-.1-.3.1-.2.2-.2zM71.2 71.2c.1.4.3.7.4 1.1-3.3.2-6.4-.7-9.5-1.5-2.2-.6-4.4-1.2-6.5-1.8-.8-1-1.9-1.8-3-2.5 1.5-.5 3-.2 4.4.4 2.7 1.2 5.4 2.4 8.2 3.4 1.9.6 3.9 1 6 .9zM72.6 74.7c.1.2.1.4.2.5-3.4 0-6.8 0-10.2-.2-.5-.9-1.6-1.3-2.3-2.1 1.6 0 3.1.5 4.7.8 2.6.6 5.1.8 7.6 1zM60.4 72.9c-.1-.1-.2-.1-.2-.2.1.1.3 0 .2.2zM380.6 97.6c.1 0 .1-.1.2 0s.1.2 0 .2c-.1-.1-.2-.1-.2-.2z",className:"st2"})]}),si=()=>{const t="text-black";return c.jsx(c.Fragment,{children:c.jsx("div",{className:"  ",children:c.jsx(Ee,{className:" pt-0 mt-0 p-0",expand:"lg",fixed:"top",children:c.jsxs("div",{className:"navbarra container-fluid ",children:[c.jsx(Ee.Brand,{className:"brand ",as:se,to:"/",children:c.jsx(ri,{width:260,className:"logoMagna"})}),c.jsx(Ee.Toggle,{"aria-controls":"basic-navbar-nav"}),c.jsx(Ee.Collapse,{id:"basic-navbar-nav ",children:c.jsxs(zs,{className:"ms-auto",children:[c.jsx(se,{className:`links nav navbar p-0  ${t} `,to:"/AboutUS",children:"Quiénes somos"}),c.jsx(st,{className:`links nav navbar p-0 ${t} `,to:"/servicios#header",children:"Servicios"}),c.jsx(se,{className:`links nav navbar p-0 ${t} `,to:"/contact",children:"Contacto"}),c.jsx(st,{className:`links nav navbar p-0 ${t} `,to:"/projects",children:"Proyectos"}),c.jsx(se,{className:`links nav navbar p-0 ${t} `,to:"/cotizador",children:"Login"}),c.jsx(se,{to:"/blog",className:"links nav navbar p-0 text-black",children:"blog "}),c.jsx("a",{className:`links nav navbar p-0 ${t} `,href:"/store/",children:c.jsx("div",{className:"store",children:c.jsx("span",{children:"Magnatienda"})})})]})})]})})})})},ii=u.lazy(()=>U(()=>import("./floawhatsapp-7c6a976d.js"),["static/floawhatsapp-7c6a976d.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/useLazyload-da8a0755.js"])),oi=u.lazy(()=>U(()=>import("./footer1-d75c55ee.js"),["static/footer1-d75c55ee.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/index.esm-387aec9d.js","static/index.esm-6df78010.js","static/useLazyload-da8a0755.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/footer1-8a106b42.css"])),li=({children:t})=>{const e=u.useRef(null),a=Dn();return u.useEffect(()=>{e.current&&e.current.scrollIntoView({behavior:"smooth"})},[a]),c.jsxs(c.Fragment,{children:[c.jsx("div",{ref:e,children:c.jsx(si,{})}),t,c.jsx(oi,{}),c.jsx(ii,{})]})},ci="/static/static/paneles-d37cdd61.jpeg";const Tn=()=>(console.log("me rendericé ProyectoPanel====================="),c.jsx("section",{className:"about-us",children:c.jsx("div",{className:"container",children:c.jsxs("div",{className:"row",children:[c.jsx("div",{className:"col-12 col-lg-6 d-flex justify-content-center  ",children:c.jsxs("div",{className:"marco",children:[c.jsx("img",{src:ci,alt:"paneles",className:"img-paneles"}),c.jsxs("div",{className:"experiencia",children:[c.jsx("h4",{className:"text-center",children:c.jsx("strong",{children:"10 +"})}),c.jsx("h6",{children:"Años de Experiencia"})]})]})}),c.jsxs("div",{className:"col-12 col-lg-6",children:[c.jsx("div",{className:"row",children:c.jsxs("div",{className:"col-12",children:[c.jsx("h6",{children:c.jsx("strong",{children:"Proyectos"})}),c.jsxs("h2",{className:"titulo-proyectos",children:["Innovación y Precisión: ",c.jsx("span",{children:"Nuestra Huella"})," en la Energía Solar"]}),c.jsx("br",{}),c.jsx("p",{children:"Como líderes en ingeniería y topografía, nuestra experiencia abarca una amplia gama de proyectos, demostrando nuestro compromiso con la innovación y la precisión. Nuestro equipo altamente capacitado, equipado con tecnología de vanguardia, ha superado desafíos y se ha adaptado a diversas condiciones y requisitos. Estamos orgullosos de los resultados precisos y eficientes que hemos logrado y esperamos tener la oportunidad de colaborar en tu próximo proyecto."}),c.jsx("p",{children:"Nuestro equipo de trabajo está conformado por profesionales altamente capacitados y con amplia experiencia en el sector, lo que nos permite brindar un servicio de calidad y cumplimiento a nuestros clientes."}),c.jsxs("p",{children:[c.jsx("strong",{children:"¡Descubre cómo estamos dejando nuestra huella en estos sectores cruciales!"}),"."]})]})}),c.jsx("div",{className:"row",children:c.jsx("div",{className:"col-12",children:c.jsx("button",{className:" boton-1 ",children:c.jsx(se,{to:"/projects",children:" Ver más"})})})})]})]})})})),Wi=Object.freeze(Object.defineProperty({__proto__:null,default:Tn},Symbol.toStringTag,{value:"Module"})),ui=u.lazy(()=>U(()=>import("./proyectos-3296ce13.js"),["static/proyectos-3296ce13.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/setionHeader-0090b7fc.js","static/framer-motion-e3192eb3.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/Recurso 1-101c8ab1.js","static/ScreenSize-8bca974b.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/proyectos-6b00c577.css"])),di=u.lazy(()=>U(()=>import("./Servicios-e5882be8.js"),["static/Servicios-e5882be8.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/setionHeader-0090b7fc.js","static/framer-motion-e3192eb3.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/Servicios-7ee61343.css"])),fi=u.lazy(()=>U(()=>import("./statistics-cbc29e3e.js"),["static/statistics-cbc29e3e.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/framer-motion-e3192eb3.js","static/index.esm-387aec9d.js","static/useLazyload-da8a0755.js","static/statistics-82cccfca.css"])),pi=u.lazy(()=>U(()=>import("./clients-c9034117.js"),["static/clients-c9034117.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/framer-motion-e3192eb3.js","static/@motionone/utils-c4fa4a5e.js","static/setionHeader-0090b7fc.js","static/useLazyload-da8a0755.js","static/clients-94957311.css"])),mi=u.lazy(()=>U(()=>import("./Equipos-f9f73094.js"),["static/Equipos-f9f73094.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/Recurso 1-101c8ab1.js","static/setionHeader-0090b7fc.js","static/framer-motion-e3192eb3.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/useLazyload-da8a0755.js","static/react-dom-983a5519.js","static/react-router-dom-3d2ba1f5.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/Equipos-306f34d9.css"])),vi=u.lazy(()=>U(()=>import("./contact-12829c86.js"),["static/contact-12829c86.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/framer-motion-e3192eb3.js","static/ScreenSize-8bca974b.js","static/useLazyload-da8a0755.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-dom-983a5519.js","static/react-router-dom-3d2ba1f5.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/contact-9274f72c.css"]));function gi(){return c.jsx(c.Fragment,{children:c.jsxs(li,{children:[c.jsx(nr,{}),c.jsx(u.Suspense,{children:c.jsx(Tn,{})}),c.jsx(u.Suspense,{children:c.jsx(di,{})}),c.jsx(u.Suspense,{children:c.jsx(ui,{})}),c.jsxs(u.Suspense,{children:[c.jsx("br",{}),c.jsx("br",{}),c.jsx(fi,{})]}),c.jsx(u.Suspense,{children:c.jsx(pi,{})}),c.jsx(u.Suspense,{children:c.jsx(mi,{})}),c.jsx(u.Suspense,{children:c.jsx(vi,{})}),"+"]})})}const Ui=()=>_n({mutationKey:["signin"],mutationFn:async({email:t,password:e})=>(await ee.post("auth/jwt/create/",{email:t,password:e})).data,onSuccess:async t=>{await localStorage.setItem("token",t.access),await localStorage.setItem("refreshToken",t.refresh)}}),hi=async()=>{let t=!1;return await ee.post("auth/jwt/refresh/",{refresh:localStorage.getItem("refreshToken")}).then(async e=>{console.log("refresh token antes de guardar",localStorage.getItem("refreshToken")),await localStorage.setItem("token",e.data.access),await console.log("refresh token despues de guardar",localStorage.getItem("refreshToken")),t=!0}).catch(e=>{console.log(e,"error aqui estoy en useRefreshTokenMutation"),localStorage.removeItem("token"),localStorage.removeItem("refreshToken"),t=!1}),t},yi=async()=>{let t=!1;return await ee.post("auth/jwt/verify/",{token:localStorage.getItem("token")}).then(()=>{t=!0}).catch(async e=>{console.log(e,"error aqui estoy en useVerfyTokenMutation");const a=await hi();console.log(a,"successrefresh aqui estoy en useVerfyTokenMutation"),a&&(t=!0)}),t},On=u.createContext({isTokenValid:!1,firstView:0,firstViewCount:()=>{},validateToken:()=>{},logout:()=>{}});function xi({children:t}){const[e,a]=u.useState(!1),[n,s]=u.useState(!0),[r,i]=u.useState(0),l=()=>{i(r+1)},o=async()=>{a(!1)},m=async()=>{if(!await localStorage.getItem("token")){console.log("no hay token"),a(!1),s(!1);return}const g=await yi();if(console.log(g,"successToken====================================="),g){console.log("token valido"),a(!0),s(!1);return}s(!1)};return u.useEffect(()=>{m()},[]),c.jsx(On.Provider,{value:{isTokenValid:e,firstView:r,validateToken:m,logout:o,firstViewCount:l},children:n?c.jsx("div",{children:"loading..."}):t})}function bi(){const t=u.useContext(On);if(!t)throw new Error("useAuth must be used within an AuthProvider");return t}function Ei(){return bi().isTokenValid?c.jsx($n,{}):c.jsx(Bn,{to:"/login"})}const Ci=(t,e)=>`
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            ${t.map(s=>{const r=new URL(e+s.path);let i="monthly",l=.5,o=new Date().toISOString().split("T")[0];return s.path==="/"?l=1:s.path==="/servicios"?l=.9:s.path==="/aboutUs"&&(l=.8),`
            <url>
                <loc>${r.href}</loc>
                <lastmod>${o}</lastmod>
                <changefreq>${i}</changefreq>
                <priority>${l}</priority>
            </url>
        `}).join(`
`)}
        </urlset>
    `,wi=()=>{const a=Ci([{path:"/"},{path:"/login"},{path:"/aboutUs"},{path:"/services_topografia"},{path:"/services_ingenieria"},{path:"/services_ambiental"},{path:"/servicios"},{path:"/servicios/:id"},{path:"/projects"},{path:"/projects/:id"},{path:"/contact"},{path:"/blog"},{path:"/blog/:id"},{path:"/",children:[{path:"/cotizador"}]}],Lt);return c.jsx("pre",{children:a})},Si=M.lazy(()=>U(()=>import("./login-753a3219.js"),["static/login-753a3219.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/useLazyload-da8a0755.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/framer-motion-e3192eb3.js","static/login-8a9de2ec.css"])),ji=M.lazy(()=>U(()=>import("./cotizador-d66d51a9.js"),["static/cotizador-d66d51a9.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/useLazyload-da8a0755.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-dom-983a5519.js","static/react-router-dom-3d2ba1f5.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/framer-motion-e3192eb3.js"])),Ti=M.lazy(()=>U(()=>import("./aboutUs-4be55c4a.js"),["static/aboutUs-4be55c4a.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-1cdf6ce0.js","static/spinner-75e68d5d.js","static/banner-ae774052.js","static/index.esm-387aec9d.js","static/index.esm-d847aead.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/framer-motion-e3192eb3.js","static/banner-14f0fbed.css","static/index.esm-6df78010.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/aboutUs-5367be92.css"])),Oi=M.lazy(()=>U(()=>import("./projects-1eed170b.js"),["static/projects-1eed170b.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/banner-ae774052.js","static/index.esm-387aec9d.js","static/index.esm-d847aead.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/framer-motion-e3192eb3.js","static/banner-14f0fbed.css","static/cardsProjects-f0d867fe.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/useLazyload-da8a0755.js","static/cardsProjects-577b53fd.css","static/axios-28bc18a3.js","static/swiper-dad05047.js"])),St=M.lazy(()=>U(()=>import("./servecesDetail-d557c10e.js"),["static/servecesDetail-d557c10e.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-1cdf6ce0.js","static/spinner-75e68d5d.js","static/index.esm-c6bbc34e.js","static/index.esm-387aec9d.js","static/banner-ae774052.js","static/index.esm-d847aead.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/framer-motion-e3192eb3.js","static/banner-14f0fbed.css","static/ScreenSize-8bca974b.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/servecesDetail-da5155c3.css"])),Ni=M.lazy(()=>U(()=>import("./projecsDetail-7136c657.js"),["static/projecsDetail-7136c657.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-1cdf6ce0.js","static/spinner-75e68d5d.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/banner-ae774052.js","static/index.esm-387aec9d.js","static/index.esm-d847aead.js","static/framer-motion-e3192eb3.js","static/banner-14f0fbed.css","static/swiper-dad05047.js","static/axios-28bc18a3.js","static/projecsDetail-8b168550.css"])),Li=M.lazy(()=>U(()=>import("./contact-ba369c67.js"),["static/contact-ba369c67.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-1cdf6ce0.js","static/spinner-75e68d5d.js","static/banner-ae774052.js","static/index.esm-387aec9d.js","static/index.esm-d847aead.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/framer-motion-e3192eb3.js","static/banner-14f0fbed.css","static/index.esm-6df78010.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/contact-69420918.css"])),Ri=M.lazy(()=>U(()=>import("./blogDetail-8fa3206a.js"),["static/blogDetail-8fa3206a.js","static/spinner-75e68d5d.js","static/react-1cdf6ce0.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/sidebarBolgs-2c71f253.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/floawhatsapp-7c6a976d.js","static/footer1-d75c55ee.js","static/index.esm-387aec9d.js","static/index.esm-6df78010.js","static/footer1-8a106b42.css","static/index.esm-c6bbc34e.js","static/sidebarBolgs-76b71244.css","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/framer-motion-e3192eb3.js"])),_i=M.lazy(()=>U(()=>import("./blog-fe2455a5.js"),["static/blog-fe2455a5.js","static/@tanstack/react-query-devtools-a5fc292d.js","static/react-1cdf6ce0.js","static/spinner-75e68d5d.js","static/sidebarBolgs-2c71f253.js","static/react-router-dom-3d2ba1f5.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/floawhatsapp-7c6a976d.js","static/footer1-d75c55ee.js","static/index.esm-387aec9d.js","static/index.esm-6df78010.js","static/footer1-8a106b42.css","static/index.esm-c6bbc34e.js","static/sidebarBolgs-76b71244.css","static/index.esm-d847aead.js","static/axios-28bc18a3.js","static/swiper-dad05047.js","static/framer-motion-e3192eb3.js"])),Mi=new Mn,Ai=zn([{path:"/",element:c.jsx(gi,{})},{path:"/sitemap.xml",element:c.jsx(wi,{})},{path:"/login",element:c.jsx(Si,{})},{path:"/aboutUs",element:c.jsx(Ti,{})},{path:"/servicios",element:c.jsx(St,{issue:"Servicios"})},{path:"/servicios/:id",element:c.jsx(St,{issue:"detailservices"})},{path:"/projects",element:c.jsx(Oi,{})},{path:"/projects/:projectArg",element:c.jsx(Ni,{})},{path:"/contact",element:c.jsx(Li,{})},{path:"/blog",element:c.jsx(_i,{})},{path:"/blog/:id",element:c.jsx(Ri,{})},{path:"/",element:c.jsx(Ei,{}),children:[{path:"/cotizador",element:c.jsx(ji,{})}]}]);ze.createRoot(document.getElementById("root")).render(c.jsx(M.StrictMode,{children:c.jsx(xi,{children:c.jsx(An,{client:Mi,children:c.jsx(ka,{children:c.jsxs(M.Suspense,{fallback:c.jsx(Nt,{}),children:[c.jsx(Fn,{router:Ai}),c.jsx(Pn,{initialIsOpen:!1})]})})})})}));export{Lt as A,qa as N,li as P,$t as S,Na as a,Ga as b,Wa as c,Bt as d,La as e,_a as f,Ma as g,Aa as h,Ra as i,G as j,W as k,ee as l,Ee as m,ri as n,zs as o,Hi as p,Xt as q,Ki as r,qi as s,Ae as t,bi as u,Ui as v,si as w,Vi as x,Wi as y};


//# sourceMappingURL=data:application/json;base64,