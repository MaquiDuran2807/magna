import{r as reactExports,c as commonjsGlobal,g as getDefaultExportFromCjs}from"./react-1cdf6ce0.js";var jsxRuntime={exports:{}},reactJsxRuntime_production_min={};/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(t,e,r){var i,s={},a=null,o=null;r!==void 0&&(a=""+r),e.key!==void 0&&(a=""+e.key),e.ref!==void 0&&(o=e.ref);for(i in e)m.call(e,i)&&!p.hasOwnProperty(i)&&(s[i]=e[i]);if(t&&t.defaultProps)for(i in e=t.defaultProps,e)s[i]===void 0&&(s[i]=e[i]);return{$$typeof:k,type:t,key:a,ref:o,props:s,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;jsxRuntime.exports=reactJsxRuntime_production_min;var jsxRuntimeExports=jsxRuntime.exports,lottie$1={exports:{}};(function(module,exports){typeof navigator<"u"&&function(t,e){module.exports=e()}(commonjsGlobal,function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(e){_useWebWorker=!!e},getWebWorker=function(){return _useWebWorker},setLocationHref=function(e){locationHref=e},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,i=t.length,s;for(r=0;r<i;r+=1){s=t[r].prototype;for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e.prototype[a]=s[a])}}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(e){this.audios=[],this.audioFactory=e,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(r){this.audios.push(r)},pause:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].pause()},resume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].resume()},setRate:function(r){var i,s=this.audios.length;for(i=0;i<s;i+=1)this.audios[i].setRate(r)},createAudio:function(r){return this.audioFactory?this.audioFactory(r):window.Howl?new window.Howl({src:[r]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(r){this.audioFactory=r},setVolume:function(r){this._volume=r,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(r,i){var s=0,a=[],o;switch(r){case"int16":case"uint8c":o=1;break;default:o=1.1;break}for(s=0;s<i;s+=1)a.push(o);return a}function e(r,i){return r==="float32"?new Float32Array(i):r==="int16"?new Int16Array(i):r==="uint8c"?new Uint8ClampedArray(i):t(r,i)}return typeof Uint8ClampedArray=="function"&&typeof Float32Array=="function"?e:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$6=function(r){return typeof r}:_typeof$6=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};(function(){var t=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],e,r=t.length;for(e=0;e<r;e+=1)BMMath[t[e]]=Math[t[e]]})(),BMMath.random=Math.random,BMMath.abs=function(t){var e=_typeof$6(t);if(e==="object"&&t.length){var r=createSizedArray(t.length),i,s=t.length;for(i=0;i<s;i+=1)r[i]=Math.abs(t[i]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,i){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=i<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,i){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=i<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}var createElementID=function(){var t=0;return function(){return t+=1,idPrefix$1+"__lottie_element_"+t}}();function HSVtoRGB(t,e,r){var i,s,a,o,c,h,d,S;switch(o=Math.floor(t*6),c=t*6-o,h=r*(1-e),d=r*(1-c*e),S=r*(1-(1-c)*e),o%6){case 0:i=r,s=S,a=h;break;case 1:i=d,s=r,a=h;break;case 2:i=h,s=r,a=S;break;case 3:i=h,s=d,a=r;break;case 4:i=S,s=h,a=r;break;case 5:i=r,s=h,a=d;break}return[i,s,a]}function RGBtoHSV(t,e,r){var i=Math.max(t,e,r),s=Math.min(t,e,r),a=i-s,o,c=i===0?0:a/i,h=i/255;switch(i){case s:o=0;break;case t:o=e-r+a*(e<r?6:0),o/=6*a;break;case e:o=r-t+a*2,o/=6*a;break;case r:o=t-e+a*4,o/=6*a;break}return[o,c,h]}function addSaturationToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t=[],e,r;for(e=0;e<256;e+=1)r=e.toString(16),t[e]=r.length===1?"0"+r:r;return function(i,s,a){return i<0&&(i=0),s<0&&(s=0),a<0&&(a=0),"#"+t[i]+t[s]+t[a]}}(),setSubframeEnabled=function(e){subframeEnabled=!!e},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(e){expressionsPlugin=e},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(e){expressionsInterfaces=e},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(e){defaultCurveSegments=e},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(e){idPrefix$1=e};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$5=function(r){return typeof r}:_typeof$5=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$5(t)}var dataManager=function(){var t=1,e=[],r,i,s={onmessage:function(){},postMessage:function(C){r({data:C})}},a={postMessage:function(C){s.onmessage({data:C})}};function o(v){if(window.Worker&&window.Blob&&getWebWorker()){var C=new Blob(["var _workerSelf = self; self.onmessage = ",v.toString()],{type:"text/javascript"}),x=URL.createObjectURL(C);return new Worker(x)}return r=v,s}function c(){i||(i=o(function(C){function x(){function F(G,M){var I,E,_=G.length,D,R,N,Y;for(E=0;E<_;E+=1)if(I=G[E],"ks"in I&&!I.completed){if(I.completed=!0,I.hasMask){var X=I.masksProperties;for(R=X.length,D=0;D<R;D+=1)if(X[D].pt.k.i)T(X[D].pt.k);else for(Y=X[D].pt.k.length,N=0;N<Y;N+=1)X[D].pt.k[N].s&&T(X[D].pt.k[N].s[0]),X[D].pt.k[N].e&&T(X[D].pt.k[N].e[0])}I.ty===0?(I.layers=u(I.refId,M),F(I.layers,M)):I.ty===4?P(I.shapes):I.ty===5&&H(I)}}function y(G,M){if(G){var I=0,E=G.length;for(I=0;I<E;I+=1)G[I].t===1&&(G[I].data.layers=u(G[I].data.refId,M),F(G[I].data.layers,M))}}function g(G,M){for(var I=0,E=M.length;I<E;){if(M[I].id===G)return M[I];I+=1}return null}function u(G,M){var I=g(G,M);return I?I.layers.__used?JSON.parse(JSON.stringify(I.layers)):(I.layers.__used=!0,I.layers):null}function P(G){var M,I=G.length,E,_;for(M=I-1;M>=0;M-=1)if(G[M].ty==="sh")if(G[M].ks.k.i)T(G[M].ks.k);else for(_=G[M].ks.k.length,E=0;E<_;E+=1)G[M].ks.k[E].s&&T(G[M].ks.k[E].s[0]),G[M].ks.k[E].e&&T(G[M].ks.k[E].e[0]);else G[M].ty==="gr"&&P(G[M].it)}function T(G){var M,I=G.i.length;for(M=0;M<I;M+=1)G.i[M][0]+=G.v[M][0],G.i[M][1]+=G.v[M][1],G.o[M][0]+=G.v[M][0],G.o[M][1]+=G.v[M][1]}function w(G,M){var I=M?M.split("."):[100,100,100];return G[0]>I[0]?!0:I[0]>G[0]?!1:G[1]>I[1]?!0:I[1]>G[1]?!1:G[2]>I[2]?!0:I[2]>G[2]?!1:null}var V=function(){var G=[4,4,14];function M(E){var _=E.t.d;E.t.d={k:[{s:_,t:0}]}}function I(E){var _,D=E.length;for(_=0;_<D;_+=1)E[_].ty===5&&M(E[_])}return function(E){if(w(G,E.v)&&(I(E.layers),E.assets)){var _,D=E.assets.length;for(_=0;_<D;_+=1)E.assets[_].layers&&I(E.assets[_].layers)}}}(),L=function(){var G=[4,7,99];return function(M){if(M.chars&&!w(G,M.v)){var I,E=M.chars.length;for(I=0;I<E;I+=1){var _=M.chars[I];_.data&&_.data.shapes&&(P(_.data.shapes),_.data.ip=0,_.data.op=99999,_.data.st=0,_.data.sr=1,_.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},M.chars[I].t||(_.data.shapes.push({ty:"no"}),_.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}}(),B=function(){var G=[5,7,15];function M(E){var _=E.t.p;typeof _.a=="number"&&(_.a={a:0,k:_.a}),typeof _.p=="number"&&(_.p={a:0,k:_.p}),typeof _.r=="number"&&(_.r={a:0,k:_.r})}function I(E){var _,D=E.length;for(_=0;_<D;_+=1)E[_].ty===5&&M(E[_])}return function(E){if(w(G,E.v)&&(I(E.layers),E.assets)){var _,D=E.assets.length;for(_=0;_<D;_+=1)E.assets[_].layers&&I(E.assets[_].layers)}}}(),W=function(){var G=[4,1,9];function M(E){var _,D=E.length,R,N;for(_=0;_<D;_+=1)if(E[_].ty==="gr")M(E[_].it);else if(E[_].ty==="fl"||E[_].ty==="st")if(E[_].c.k&&E[_].c.k[0].i)for(N=E[_].c.k.length,R=0;R<N;R+=1)E[_].c.k[R].s&&(E[_].c.k[R].s[0]/=255,E[_].c.k[R].s[1]/=255,E[_].c.k[R].s[2]/=255,E[_].c.k[R].s[3]/=255),E[_].c.k[R].e&&(E[_].c.k[R].e[0]/=255,E[_].c.k[R].e[1]/=255,E[_].c.k[R].e[2]/=255,E[_].c.k[R].e[3]/=255);else E[_].c.k[0]/=255,E[_].c.k[1]/=255,E[_].c.k[2]/=255,E[_].c.k[3]/=255}function I(E){var _,D=E.length;for(_=0;_<D;_+=1)E[_].ty===4&&M(E[_].shapes)}return function(E){if(w(G,E.v)&&(I(E.layers),E.assets)){var _,D=E.assets.length;for(_=0;_<D;_+=1)E.assets[_].layers&&I(E.assets[_].layers)}}}(),z=function(){var G=[4,4,18];function M(E){var _,D=E.length,R,N;for(_=D-1;_>=0;_-=1)if(E[_].ty==="sh")if(E[_].ks.k.i)E[_].ks.k.c=E[_].closed;else for(N=E[_].ks.k.length,R=0;R<N;R+=1)E[_].ks.k[R].s&&(E[_].ks.k[R].s[0].c=E[_].closed),E[_].ks.k[R].e&&(E[_].ks.k[R].e[0].c=E[_].closed);else E[_].ty==="gr"&&M(E[_].it)}function I(E){var _,D,R=E.length,N,Y,X,Z;for(D=0;D<R;D+=1){if(_=E[D],_.hasMask){var J=_.masksProperties;for(Y=J.length,N=0;N<Y;N+=1)if(J[N].pt.k.i)J[N].pt.k.c=J[N].cl;else for(Z=J[N].pt.k.length,X=0;X<Z;X+=1)J[N].pt.k[X].s&&(J[N].pt.k[X].s[0].c=J[N].cl),J[N].pt.k[X].e&&(J[N].pt.k[X].e[0].c=J[N].cl)}_.ty===4&&M(_.shapes)}}return function(E){if(w(G,E.v)&&(I(E.layers),E.assets)){var _,D=E.assets.length;for(_=0;_<D;_+=1)E.assets[_].layers&&I(E.assets[_].layers)}}}();function O(G){G.__complete||(W(G),V(G),L(G),B(G),z(G),F(G.layers,G.assets),y(G.chars,G.assets),G.__complete=!0)}function H(G){G.t.a.length===0&&"m"in G.t.p}var j={};return j.completeData=O,j.checkColors=W,j.checkChars=L,j.checkPathProperties=B,j.checkShapes=z,j.completeLayers=F,j}if(a.dataManager||(a.dataManager=x()),a.assetLoader||(a.assetLoader=function(){function F(g){var u=g.getResponseHeader("content-type");return u&&g.responseType==="json"&&u.indexOf("json")!==-1||g.response&&_typeof$5(g.response)==="object"?g.response:g.response&&typeof g.response=="string"?JSON.parse(g.response):g.responseText?JSON.parse(g.responseText):null}function y(g,u,P,T){var w,V=new XMLHttpRequest;try{V.responseType="json"}catch{}V.onreadystatechange=function(){if(V.readyState===4)if(V.status===200)w=F(V),P(w);else try{w=F(V),P(w)}catch(L){T&&T(L)}};try{V.open(["G","E","T"].join(""),g,!0)}catch{V.open(["G","E","T"].join(""),u+"/"+g,!0)}V.send()}return{load:y}}()),C.data.type==="loadAnimation")a.assetLoader.load(C.data.path,C.data.fullPath,function(F){a.dataManager.completeData(F),a.postMessage({id:C.data.id,payload:F,status:"success"})},function(){a.postMessage({id:C.data.id,status:"error"})});else if(C.data.type==="complete"){var b=C.data.animation;a.dataManager.completeData(b),a.postMessage({id:C.data.id,payload:b,status:"success"})}else C.data.type==="loadData"&&a.assetLoader.load(C.data.path,C.data.fullPath,function(F){a.postMessage({id:C.data.id,payload:F,status:"success"})},function(){a.postMessage({id:C.data.id,status:"error"})})}),i.onmessage=function(v){var C=v.data,x=C.id,b=e[x];e[x]=null,C.status==="success"?b.onComplete(C.payload):b.onError&&b.onError()})}function h(v,C){t+=1;var x="processId_"+t;return e[x]={onComplete:v,onError:C},x}function d(v,C,x){c();var b=h(C,x);i.postMessage({type:"loadAnimation",path:v,fullPath:window.location.origin+window.location.pathname,id:b})}function S(v,C,x){c();var b=h(C,x);i.postMessage({type:"loadData",path:v,fullPath:window.location.origin+window.location.pathname,id:b})}function A(v,C,x){c();var b=h(C,x);i.postMessage({type:"complete",animation:v,id:b})}return{loadAnimation:d,loadData:S,completeAnimation:A}}(),ImagePreloader=function(){var t=function(){var y=createTag("canvas");y.width=1,y.height=1;var g=y.getContext("2d");return g.fillStyle="rgba(0,0,0,0)",g.fillRect(0,0,1,1),y}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function i(y,g,u){var P="";if(y.e)P=y.p;else if(g){var T=y.p;T.indexOf("images/")!==-1&&(T=T.split("/")[1]),P=g+T}else P=u,P+=y.u?y.u:"",P+=y.p;return P}function s(y){var g=0,u=setInterval((function(){var P=y.getBBox();(P.width||g>500)&&(this._imageLoaded(),clearInterval(u)),g+=1}).bind(this),50)}function a(y){var g=i(y,this.assetsPath,this.path),u=createNS("image");isSafari?this.testImageLoaded(u):u.addEventListener("load",this._imageLoaded,!1),u.addEventListener("error",(function(){P.img=t,this._imageLoaded()}).bind(this),!1),u.setAttributeNS("http://www.w3.org/1999/xlink","href",g),this._elementHelper.append?this._elementHelper.append(u):this._elementHelper.appendChild(u);var P={img:u,assetData:y};return P}function o(y){var g=i(y,this.assetsPath,this.path),u=createTag("img");u.crossOrigin="anonymous",u.addEventListener("load",this._imageLoaded,!1),u.addEventListener("error",(function(){P.img=t,this._imageLoaded()}).bind(this),!1),u.src=g;var P={img:u,assetData:y};return P}function c(y){var g={assetData:y},u=i(y,this.assetsPath,this.path);return dataManager.loadData(u,(function(P){g.img=P,this._footageLoaded()}).bind(this),(function(){g.img={},this._footageLoaded()}).bind(this)),g}function h(y,g){this.imagesLoadedCb=g;var u,P=y.length;for(u=0;u<P;u+=1)y[u].layers||(!y[u].t||y[u].t==="seq"?(this.totalImages+=1,this.images.push(this._createImageData(y[u]))):y[u].t===3&&(this.totalFootages+=1,this.images.push(this.createFootageData(y[u]))))}function d(y){this.path=y||""}function S(y){this.assetsPath=y||""}function A(y){for(var g=0,u=this.images.length;g<u;){if(this.images[g].assetData===y)return this.images[g].img;g+=1}return null}function v(){this.imagesLoadedCb=null,this.images.length=0}function C(){return this.totalImages===this.loadedAssets}function x(){return this.totalFootages===this.loadedFootagesCount}function b(y,g){y==="svg"?(this._elementHelper=g,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}function F(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=s.bind(this),this.createFootageData=c.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return F.prototype={loadAssets:h,setAssetsPath:S,setPath:d,loadedImages:C,loadedFootages:x,destroy:v,getAsset:A,createImgData:o,createImageData:a,imageLoaded:e,footageLoaded:r,setCacheType:b},F}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(e,r){if(this._cbs[e])for(var i=this._cbs[e],s=0;s<i.length;s+=1)i[s](r)},addEventListener:function(e,r){return this._cbs[e]||(this._cbs[e]=[]),this._cbs[e].push(r),(function(){this.removeEventListener(e,r)}).bind(this)},removeEventListener:function(e,r){if(!r)this._cbs[e]=null;else if(this._cbs[e]){for(var i=0,s=this._cbs[e].length;i<s;)this._cbs[e][i]===r&&(this._cbs[e].splice(i,1),i-=1,s-=1),i+=1;this._cbs[e].length||(this._cbs[e]=null)}}};var markerParser=function(){function t(e){for(var r=e.split(`\r
`),i={},s,a=0,o=0;o<r.length;o+=1)s=r[o].split(":"),s.length===2&&(i[s[0]]=s[1].trim(),a+=1);if(a===0)throw new Error;return i}return function(e){for(var r=[],i=0;i<e.length;i+=1){var s=e[i],a={time:s.tm,duration:s.dr};try{a.payload=JSON.parse(e[i].cm)}catch{try{a.payload=t(e[i].cm)}catch{a.payload={name:e[i].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function t(e){this.compositions.push(e)}return function(){function e(r){for(var i=0,s=this.compositions.length;i<s;){if(this.compositions[i].data&&this.compositions[i].data.nm===r)return this.compositions[i].prepareFrame&&this.compositions[i].data.xt&&this.compositions[i].prepareFrame(this.currentFrame),this.compositions[i].compInterface;i+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(e,r){renderers[e]=r};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$4=function(r){return typeof r}:_typeof$4=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,t.loop===""||t.loop===null||t.loop===void 0||t.loop===!0?this.loop=!0:t.loop===!1?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay="autoplay"in t?t.autoplay:!0,this.name=t.name?t.name:"",this.autoloadSegments=Object.prototype.hasOwnProperty.call(t,"autoloadSegments")?t.autoloadSegments:!0,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(t.path.lastIndexOf("\\")!==-1?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&_typeof$4(e)!=="object"&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},i=t.attributes;r.path=i.getNamedItem("data-animation-path")?i.getNamedItem("data-animation-path").value:i.getNamedItem("data-bm-path")?i.getNamedItem("data-bm-path").value:i.getNamedItem("bm-path")?i.getNamedItem("bm-path").value:"",r.animType=i.getNamedItem("data-anim-type")?i.getNamedItem("data-anim-type").value:i.getNamedItem("data-bm-type")?i.getNamedItem("data-bm-type").value:i.getNamedItem("bm-type")?i.getNamedItem("bm-type").value:i.getNamedItem("data-bm-renderer")?i.getNamedItem("data-bm-renderer").value:i.getNamedItem("bm-renderer")?i.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var s=i.getNamedItem("data-anim-loop")?i.getNamedItem("data-anim-loop").value:i.getNamedItem("data-bm-loop")?i.getNamedItem("data-bm-loop").value:i.getNamedItem("bm-loop")?i.getNamedItem("bm-loop").value:"";s==="false"?r.loop=!1:s==="true"?r.loop=!0:s!==""&&(r.loop=parseInt(s,10));var a=i.getNamedItem("data-anim-autoplay")?i.getNamedItem("data-anim-autoplay").value:i.getNamedItem("data-bm-autoplay")?i.getNamedItem("data-bm-autoplay").value:i.getNamedItem("bm-autoplay")?i.getNamedItem("bm-autoplay").value:!0;r.autoplay=a!=="false",r.name=i.getNamedItem("data-name")?i.getNamedItem("data-name").value:i.getNamedItem("data-bm-name")?i.getNamedItem("data-bm-name").value:i.getNamedItem("bm-name")?i.getNamedItem("bm-name").value:"";var o=i.getNamedItem("data-anim-prerender")?i.getNamedItem("data-anim-prerender").value:i.getNamedItem("data-bm-prerender")?i.getNamedItem("data-bm-prerender").value:i.getNamedItem("bm-prerender")?i.getNamedItem("bm-prerender").value:"";o==="false"&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e=this.animationData.layers,r,i=e.length,s=t.layers,a,o=s.length;for(a=0;a<o;a+=1)for(r=0;r<i;){if(e[r].id===s[a].id){e[r]=s[a];break}r+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,r=0;r<i;r+=1)this.animationData.assets.push(t.assets[r]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||t.length===0||!this.autoloadSegments){this.trigger("data_ready"),this.timeCompleted=this.totalFrames;return}var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),(function(){this.trigger("data_failed")}).bind(this))},AnimationItem.prototype.loadSegments=function(){var t=this.animationData.segments;t||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(e){this.triggerConfigError(e)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=="canvas")&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout((function(){this.trigger("DOMLoaded")}).bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r=typeof t=="number"?t:void 0,i=typeof e=="number"?e:void 0;this.renderer.updateContainerSize(r,i)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!(this.isLoaded===!1||!this.renderer))try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||this.isPaused===!0&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||this.isPaused===!1&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(this.isPaused===!0?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if(e=this.markers[r],e.payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&this.goToAndStop(s.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&(s.duration?this.playSegments([s.time,s.time+s.duration],!0):this.goToAndStop(s.time,!0))}else this.goToAndStop(i,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!(this.isPaused===!0||this.isLoaded===!1)){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?!this.loop||this.playCount===this.loop?this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):e<0?this.checkSegments(e%this.totalFrames)||(this.loop&&!(this.playCount--<=0&&this.loop!==!0)?(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0):(r=!0,e=0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,r!==-1&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),_typeof$4(t[0])==="object"){var r,i=t.length;for(r=0;r<i;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return this.segments.length?(this.adjustSegment(this.segments.shift(),t),!0):!1},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;r.indexOf("images/")!==-1&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{var i=this.renderer.getElementByPath(t);i.updateDocumentData(e,r)}catch{}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}t==="enterFrame"&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),t==="loopComplete"&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),t==="complete"&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),t==="segmentStart"&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),t==="destroy"&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,i=0,s=0,a=!0,o=!1;function c(M){for(var I=0,E=M.target;I<i;)e[I].animation===E&&(e.splice(I,1),I-=1,i-=1,E.isPaused||A()),I+=1}function h(M,I){if(!M)return null;for(var E=0;E<i;){if(e[E].elem===M&&e[E].elem!==null)return e[E].animation;E+=1}var _=new AnimationItem;return v(_,M),_.setData(M,I),_}function d(){var M,I=e.length,E=[];for(M=0;M<I;M+=1)E.push(e[M].animation);return E}function S(){s+=1,W()}function A(){s-=1}function v(M,I){M.addEventListener("destroy",c),M.addEventListener("_active",S),M.addEventListener("_idle",A),e.push({elem:I,animation:M}),i+=1}function C(M){var I=new AnimationItem;return v(I,null),I.setParams(M),I}function x(M,I){var E;for(E=0;E<i;E+=1)e[E].animation.setSpeed(M,I)}function b(M,I){var E;for(E=0;E<i;E+=1)e[E].animation.setDirection(M,I)}function F(M){var I;for(I=0;I<i;I+=1)e[I].animation.play(M)}function y(M){var I=M-r,E;for(E=0;E<i;E+=1)e[E].animation.advanceTime(I);r=M,s&&!o?window.requestAnimationFrame(y):a=!0}function g(M){r=M,window.requestAnimationFrame(y)}function u(M){var I;for(I=0;I<i;I+=1)e[I].animation.pause(M)}function P(M,I,E){var _;for(_=0;_<i;_+=1)e[_].animation.goToAndStop(M,I,E)}function T(M){var I;for(I=0;I<i;I+=1)e[I].animation.stop(M)}function w(M){var I;for(I=0;I<i;I+=1)e[I].animation.togglePause(M)}function V(M){var I;for(I=i-1;I>=0;I-=1)e[I].animation.destroy(M)}function L(M,I,E){var _=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),D,R=_.length;for(D=0;D<R;D+=1)E&&_[D].setAttribute("data-bm-type",E),h(_[D],M);if(I&&R===0){E||(E="svg");var N=document.getElementsByTagName("body")[0];N.innerText="";var Y=createTag("div");Y.style.width="100%",Y.style.height="100%",Y.setAttribute("data-bm-type",E),N.appendChild(Y),h(Y,M)}}function B(){var M;for(M=0;M<i;M+=1)e[M].animation.resize()}function W(){!o&&s&&a&&(window.requestAnimationFrame(g),a=!1)}function z(){o=!0}function O(){o=!1,W()}function H(M,I){var E;for(E=0;E<i;E+=1)e[E].animation.setVolume(M,I)}function j(M){var I;for(I=0;I<i;I+=1)e[I].animation.mute(M)}function G(M){var I;for(I=0;I<i;I+=1)e[I].animation.unmute(M)}return t.registerAnimation=h,t.loadAnimation=C,t.setSpeed=x,t.setDirection=b,t.play=F,t.pause=u,t.stop=T,t.togglePause=w,t.searchAnimations=L,t.resize=B,t.goToAndStop=P,t.destroy=V,t.freeze=z,t.unfreeze=O,t.setVolume=H,t.mute=j,t.unmute=G,t.getRegisteredAnimations=d,t}(),BezierFactory=function(){var t={};t.getBezierEasing=r;var e={};function r(g,u,P,T,w){var V=w||("bez_"+g+"_"+u+"_"+P+"_"+T).replace(/\./g,"p");if(e[V])return e[V];var L=new y([g,u,P,T]);return e[V]=L,L}var i=4,s=.001,a=1e-7,o=10,c=11,h=1/(c-1),d=typeof Float32Array=="function";function S(g,u){return 1-3*u+3*g}function A(g,u){return 3*u-6*g}function v(g){return 3*g}function C(g,u,P){return((S(u,P)*g+A(u,P))*g+v(u))*g}function x(g,u,P){return 3*S(u,P)*g*g+2*A(u,P)*g+v(u)}function b(g,u,P,T,w){var V,L,B=0;do L=u+(P-u)/2,V=C(L,T,w)-g,V>0?P=L:u=L;while(Math.abs(V)>a&&++B<o);return L}function F(g,u,P,T){for(var w=0;w<i;++w){var V=x(u,P,T);if(V===0)return u;var L=C(u,P,T)-g;u-=L/V}return u}function y(g){this._p=g,this._mSampleValues=d?new Float32Array(c):new Array(c),this._precomputed=!1,this.get=this.get.bind(this)}return y.prototype={get:function(u){var P=this._p[0],T=this._p[1],w=this._p[2],V=this._p[3];return this._precomputed||this._precompute(),P===T&&w===V?u:u===0?0:u===1?1:C(this._getTForX(u),T,V)},_precompute:function(){var u=this._p[0],P=this._p[1],T=this._p[2],w=this._p[3];this._precomputed=!0,(u!==P||T!==w)&&this._calcSampleValues()},_calcSampleValues:function(){for(var u=this._p[0],P=this._p[2],T=0;T<c;++T)this._mSampleValues[T]=C(T*h,u,P)},_getTForX:function(u){for(var P=this._p[0],T=this._p[2],w=this._mSampleValues,V=0,L=1,B=c-1;L!==B&&w[L]<=u;++L)V+=h;--L;var W=(u-w[L])/(w[L+1]-w[L]),z=V+W*h,O=x(z,P,T);return O>=s?F(u,z,P,T):O===0?z:b(u,V,V+h,P,T)}},t}(),pooling=function(){function t(e){return e.concat(createSizedArray(e.length))}return{double:t}}(),poolFactory=function(){return function(t,e,r){var i=0,s=t,a=createSizedArray(s),o={newElement:c,release:h};function c(){var d;return i?(i-=1,d=a[i]):d=e(),d}function h(d){i===s&&(a=pooling.double(a),s*=2),r&&r(d),a[i]=d,i+=1}return o}}(),bezierLengthPool=function(){function t(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}return poolFactory(8,t)}(),segmentsLengthPool=function(){function t(){return{lengths:[],totalLength:0}}function e(r){var i,s=r.lengths.length;for(i=0;i<s;i+=1)bezierLengthPool.release(r.lengths[i]);r.lengths.length=0}return poolFactory(8,t,e)}();function bezFunction(){var t=Math;function e(v,C,x,b,F,y){var g=v*b+C*F+x*y-F*b-y*v-x*C;return g>-.001&&g<.001}function r(v,C,x,b,F,y,g,u,P){if(x===0&&y===0&&P===0)return e(v,C,b,F,g,u);var T=t.sqrt(t.pow(b-v,2)+t.pow(F-C,2)+t.pow(y-x,2)),w=t.sqrt(t.pow(g-v,2)+t.pow(u-C,2)+t.pow(P-x,2)),V=t.sqrt(t.pow(g-b,2)+t.pow(u-F,2)+t.pow(P-y,2)),L;return T>w?T>V?L=T-w-V:L=V-w-T:V>w?L=V-w-T:L=w-T-V,L>-1e-4&&L<1e-4}var i=function(){return function(v,C,x,b){var F=getDefaultCurveSegments(),y,g,u,P,T,w=0,V,L=[],B=[],W=bezierLengthPool.newElement();for(u=x.length,y=0;y<F;y+=1){for(T=y/(F-1),V=0,g=0;g<u;g+=1)P=bmPow(1-T,3)*v[g]+3*bmPow(1-T,2)*T*x[g]+3*(1-T)*bmPow(T,2)*b[g]+bmPow(T,3)*C[g],L[g]=P,B[g]!==null&&(V+=bmPow(L[g]-B[g],2)),B[g]=L[g];V&&(V=bmSqrt(V),w+=V),W.percents[y]=T,W.lengths[y]=w}return W.addedLength=w,W}}();function s(v){var C=segmentsLengthPool.newElement(),x=v.c,b=v.v,F=v.o,y=v.i,g,u=v._length,P=C.lengths,T=0;for(g=0;g<u-1;g+=1)P[g]=i(b[g],b[g+1],F[g],y[g+1]),T+=P[g].addedLength;return x&&u&&(P[g]=i(b[g],b[0],F[g],y[0]),T+=P[g].addedLength),C.totalLength=T,C}function a(v){this.segmentLength=0,this.points=new Array(v)}function o(v,C){this.partialLength=v,this.point=C}var c=function(){var v={};return function(C,x,b,F){var y=(C[0]+"_"+C[1]+"_"+x[0]+"_"+x[1]+"_"+b[0]+"_"+b[1]+"_"+F[0]+"_"+F[1]).replace(/\./g,"p");if(!v[y]){var g=getDefaultCurveSegments(),u,P,T,w,V,L=0,B,W,z=null;C.length===2&&(C[0]!==x[0]||C[1]!==x[1])&&e(C[0],C[1],x[0],x[1],C[0]+b[0],C[1]+b[1])&&e(C[0],C[1],x[0],x[1],x[0]+F[0],x[1]+F[1])&&(g=2);var O=new a(g);for(T=b.length,u=0;u<g;u+=1){for(W=createSizedArray(T),V=u/(g-1),B=0,P=0;P<T;P+=1)w=bmPow(1-V,3)*C[P]+3*bmPow(1-V,2)*V*(C[P]+b[P])+3*(1-V)*bmPow(V,2)*(x[P]+F[P])+bmPow(V,3)*x[P],W[P]=w,z!==null&&(B+=bmPow(W[P]-z[P],2));B=bmSqrt(B),L+=B,O.points[u]=new o(B,W),z=W}O.segmentLength=L,v[y]=O}return v[y]}}();function h(v,C){var x=C.percents,b=C.lengths,F=x.length,y=bmFloor((F-1)*v),g=v*C.addedLength,u=0;if(y===F-1||y===0||g===b[y])return x[y];for(var P=b[y]>g?-1:1,T=!0;T;)if(b[y]<=g&&b[y+1]>g?(u=(g-b[y])/(b[y+1]-b[y]),T=!1):y+=P,y<0||y>=F-1){if(y===F-1)return x[y];T=!1}return x[y]+(x[y+1]-x[y])*u}function d(v,C,x,b,F,y){var g=h(F,y),u=1-g,P=t.round((u*u*u*v[0]+(g*u*u+u*g*u+u*u*g)*x[0]+(g*g*u+u*g*g+g*u*g)*b[0]+g*g*g*C[0])*1e3)/1e3,T=t.round((u*u*u*v[1]+(g*u*u+u*g*u+u*u*g)*x[1]+(g*g*u+u*g*g+g*u*g)*b[1]+g*g*g*C[1])*1e3)/1e3;return[P,T]}var S=createTypedArray("float32",8);function A(v,C,x,b,F,y,g){F<0?F=0:F>1&&(F=1);var u=h(F,g);y=y>1?1:y;var P=h(y,g),T,w=v.length,V=1-u,L=1-P,B=V*V*V,W=u*V*V*3,z=u*u*V*3,O=u*u*u,H=V*V*L,j=u*V*L+V*u*L+V*V*P,G=u*u*L+V*u*P+u*V*P,M=u*u*P,I=V*L*L,E=u*L*L+V*P*L+V*L*P,_=u*P*L+V*P*P+u*L*P,D=u*P*P,R=L*L*L,N=P*L*L+L*P*L+L*L*P,Y=P*P*L+L*P*P+P*L*P,X=P*P*P;for(T=0;T<w;T+=1)S[T*4]=t.round((B*v[T]+W*x[T]+z*b[T]+O*C[T])*1e3)/1e3,S[T*4+1]=t.round((H*v[T]+j*x[T]+G*b[T]+M*C[T])*1e3)/1e3,S[T*4+2]=t.round((I*v[T]+E*x[T]+_*b[T]+D*C[T])*1e3)/1e3,S[T*4+3]=t.round((R*v[T]+N*x[T]+Y*b[T]+X*C[T])*1e3)/1e3;return S}return{getSegmentsLength:s,getNewSegment:A,getPointInSegment:d,buildBezierData:c,pointOnLine2D:e,pointOnLine3D:r}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r=this.offsetTime,i;this.propType==="multidimensional"&&(i=createTypedArray("float32",this.pv.length));for(var s=e.lastIndex,a=s,o=this.keyframes.length-1,c=!0,h,d,S;c;){if(h=this.keyframes[a],d=this.keyframes[a+1],a===o-1&&t>=d.t-r){h.h&&(h=d),s=0;break}if(d.t-r>t){s=a;break}a<o-1?a+=1:(s=0,c=!1)}S=this.keyframesMetadata[a]||{};var A,v,C,x,b,F,y=d.t-r,g=h.t-r,u;if(h.to){S.bezierData||(S.bezierData=bez.buildBezierData(h.s,d.s||h.e,h.to,h.ti));var P=S.bezierData;if(t>=y||t<g){var T=t>=y?P.points.length-1:0;for(v=P.points[T].point.length,A=0;A<v;A+=1)i[A]=P.points[T].point[A]}else{S.__fnct?F=S.__fnct:(F=BezierFactory.getBezierEasing(h.o.x,h.o.y,h.i.x,h.i.y,h.n).get,S.__fnct=F),C=F((t-g)/(y-g));var w=P.segmentLength*C,V,L=e.lastFrame<t&&e._lastKeyframeIndex===a?e._lastAddedLength:0;for(b=e.lastFrame<t&&e._lastKeyframeIndex===a?e._lastPoint:0,c=!0,x=P.points.length;c;){if(L+=P.points[b].partialLength,w===0||C===0||b===P.points.length-1){for(v=P.points[b].point.length,A=0;A<v;A+=1)i[A]=P.points[b].point[A];break}else if(w>=L&&w<L+P.points[b+1].partialLength){for(V=(w-L)/P.points[b+1].partialLength,v=P.points[b].point.length,A=0;A<v;A+=1)i[A]=P.points[b].point[A]+(P.points[b+1].point[A]-P.points[b].point[A])*V;break}b<x-1?b+=1:c=!1}e._lastPoint=b,e._lastAddedLength=L-P.points[b].partialLength,e._lastKeyframeIndex=a}}else{var B,W,z,O,H;if(o=h.s.length,u=d.s||h.e,this.sh&&h.h!==1)if(t>=y)i[0]=u[0],i[1]=u[1],i[2]=u[2];else if(t<=g)i[0]=h.s[0],i[1]=h.s[1],i[2]=h.s[2];else{var j=createQuaternion(h.s),G=createQuaternion(u),M=(t-g)/(y-g);quaternionToEuler(i,slerp(j,G,M))}else for(a=0;a<o;a+=1)h.h!==1&&(t>=y?C=1:t<g?C=0:(h.o.x.constructor===Array?(S.__fnct||(S.__fnct=[]),S.__fnct[a]?F=S.__fnct[a]:(B=h.o.x[a]===void 0?h.o.x[0]:h.o.x[a],W=h.o.y[a]===void 0?h.o.y[0]:h.o.y[a],z=h.i.x[a]===void 0?h.i.x[0]:h.i.x[a],O=h.i.y[a]===void 0?h.i.y[0]:h.i.y[a],F=BezierFactory.getBezierEasing(B,W,z,O).get,S.__fnct[a]=F)):S.__fnct?F=S.__fnct:(B=h.o.x,W=h.o.y,z=h.i.x,O=h.i.y,F=BezierFactory.getBezierEasing(B,W,z,O).get,h.keyframeMetadata=F),C=F((t-g)/(y-g)))),u=d.s||h.e,H=h.h===1?h.s[a]:h.s[a]+(u[a]-h.s[a])*C,this.propType==="multidimensional"?i[a]=H:i=H}return e.lastIndex=s,i}function slerp(t,e,r){var i=[],s=t[0],a=t[1],o=t[2],c=t[3],h=e[0],d=e[1],S=e[2],A=e[3],v,C,x,b,F;return C=s*h+a*d+o*S+c*A,C<0&&(C=-C,h=-h,d=-d,S=-S,A=-A),1-C>1e-6?(v=Math.acos(C),x=Math.sin(v),b=Math.sin((1-r)*v)/x,F=Math.sin(r*v)/x):(b=1-r,F=r),i[0]=b*s+F*h,i[1]=b*a+F*d,i[2]=b*o+F*S,i[3]=b*c+F*A,i}function quaternionToEuler(t,e){var r=e[0],i=e[1],s=e[2],a=e[3],o=Math.atan2(2*i*a-2*r*s,1-2*i*i-2*s*s),c=Math.asin(2*r*i+2*s*a),h=Math.atan2(2*r*a-2*i*s,1-2*r*r-2*s*s);t[0]=o/degToRads,t[1]=c/degToRads,t[2]=h/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,i=t[2]*degToRads,s=Math.cos(e/2),a=Math.cos(r/2),o=Math.cos(i/2),c=Math.sin(e/2),h=Math.sin(r/2),d=Math.sin(i/2),S=s*a*o-c*h*d,A=c*h*o+s*a*d,v=c*a*o+s*h*d,C=s*h*o-c*a*d;return[A,v,C,S]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(t,this._caching);this.pv=i}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if(this.propType==="unidimensional")e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,i=this.v.length;r<i;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(!(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)){if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=this._isFirstFrame;var t,e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,i){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,i){this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var s,a=e.k.length;for(this.v=createTypedArray("float32",a),this.pv=createTypedArray("float32",a),this.vel=createTypedArray("float32",a),s=0;s<a;s+=1)this.v[s]=e.k[s]*this.mult,this.pv[s]=e.k[s];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,i){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,i){this.propType="multidimensional";var s,a=e.k.length,o,c,h,d;for(s=0;s<a-1;s+=1)e.k[s].to&&e.k[s].s&&e.k[s+1]&&e.k[s+1].s&&(o=e.k[s].s,c=e.k[s+1].s,h=e.k[s].to,d=e.k[s].ti,(o.length===2&&!(o[0]===c[0]&&o[1]===c[1])&&bez.pointOnLine2D(o[0],o[1],c[0],c[1],o[0]+h[0],o[1]+h[1])&&bez.pointOnLine2D(o[0],o[1],c[0],c[1],c[0]+d[0],c[1]+d[1])||o.length===3&&!(o[0]===c[0]&&o[1]===c[1]&&o[2]===c[2])&&bez.pointOnLine3D(o[0],o[1],o[2],c[0],c[1],c[2],o[0]+h[0],o[1]+h[1],o[2]+h[2])&&bez.pointOnLine3D(o[0],o[1],o[2],c[0],c[1],c[2],c[0]+d[0],c[1]+d[1],c[2]+d[2]))&&(e.k[s].to=null,e.k[s].ti=null),o[0]===c[0]&&o[1]===c[1]&&h[0]===0&&h[1]===0&&d[0]===0&&d[1]===0&&(o.length===2||o[2]===c[2]&&h[2]===0&&d[2]===0)&&(e.k[s].to=null,e.k[s].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var S=e.k[0].s.length;for(this.v=createTypedArray("float32",S),this.pv=createTypedArray("float32",S),s=0;s<S;s+=1)this.v[s]=initFrame,this.pv[s]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",S)},this.addEffect=addEffect}var PropertyFactory=function(){function t(r,i,s,a,o){i.sid&&(i=r.globalData.slotManager.getProp(i));var c;if(!i.k.length)c=new ValueProperty(r,i,a,o);else if(typeof i.k[0]=="number")c=new MultiDimensionalProperty(r,i,a,o);else switch(s){case 0:c=new KeyframedValueProperty(r,i,a,o);break;case 1:c=new KeyframedMultidimensionalProperty(r,i,a,o);break}return c.effectsSequence.length&&o.addDynamicProperty(c),c}var e={getProp:t};return e}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&(this.dynamicProperties.push(e),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var e,r=this.dynamicProperties.length;for(e=0;e<r;e+=1)this.dynamicProperties[e].getValue(),this.dynamicProperties[e]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(e){this.container=e,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=function(){function t(){return createTypedArray("float32",2)}return poolFactory(8,t)}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,i,s){var a;switch(this._length=Math.max(this._length,i+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[];break}(!a[i]||a[i]&&!s)&&(a[i]=pointPool.newElement()),a[i][0]=t,a[i][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,i,s,a,o,c){this.setXYAt(t,e,"v",o,c),this.setXYAt(r,i,"o",o,c),this.setXYAt(s,a,"i",o,c)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,i=this.i,s=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],i[0][0],i[0][1],r[0][0],r[0][1],0,!1),s=1);var a=this._length-1,o=this._length,c;for(c=s;c<o;c+=1)t.setTripleAt(e[a][0],e[a][1],i[a][0],i[a][1],r[a][0],r[a][1],c,!1),a-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=function(){function t(){return new ShapePath}function e(s){var a=s._length,o;for(o=0;o<a;o+=1)pointPool.release(s.v[o]),pointPool.release(s.i[o]),pointPool.release(s.o[o]),s.v[o]=null,s.i[o]=null,s.o[o]=null;s._length=0,s.c=!1}function r(s){var a=i.newElement(),o,c=s._length===void 0?s.v.length:s._length;for(a.setLength(c),a.c=s.c,o=0;o<c;o+=1)a.setTripleAt(s.v[o][0],s.v[o][1],s.o[o][0],s.o[o][1],s.i[o][0],s.i[o][1],o);return a}var i=poolFactory(4,t,e);return i.clone=r,i}();function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=function(){var t={newShapeCollection:s,release:a},e=0,r=4,i=createSizedArray(r);function s(){var o;return e?(e-=1,o=i[e]):o=new ShapeCollection,o}function a(o){var c,h=o._length;for(c=0;c<h;c+=1)shapePool.release(o.shapes[c]);o._length=0,e===r&&(i=pooling.double(i),r*=2),i[e]=o,e+=1}return t}(),ShapePropertyFactory=function(){var t=-999999;function e(y,g,u){var P=u.lastIndex,T,w,V,L,B,W,z,O,H,j=this.keyframes;if(y<j[0].t-this.offsetTime)T=j[0].s[0],V=!0,P=0;else if(y>=j[j.length-1].t-this.offsetTime)T=j[j.length-1].s?j[j.length-1].s[0]:j[j.length-2].e[0],V=!0;else{for(var G=P,M=j.length-1,I=!0,E,_,D;I&&(E=j[G],_=j[G+1],!(_.t-this.offsetTime>y));)G<M-1?G+=1:I=!1;if(D=this.keyframesMetadata[G]||{},V=E.h===1,P=G,!V){if(y>=_.t-this.offsetTime)O=1;else if(y<E.t-this.offsetTime)O=0;else{var R;D.__fnct?R=D.__fnct:(R=BezierFactory.getBezierEasing(E.o.x,E.o.y,E.i.x,E.i.y).get,D.__fnct=R),O=R((y-(E.t-this.offsetTime))/(_.t-this.offsetTime-(E.t-this.offsetTime)))}w=_.s?_.s[0]:E.e[0]}T=E.s[0]}for(W=g._length,z=T.i[0].length,u.lastIndex=P,L=0;L<W;L+=1)for(B=0;B<z;B+=1)H=V?T.i[L][B]:T.i[L][B]+(w.i[L][B]-T.i[L][B])*O,g.i[L][B]=H,H=V?T.o[L][B]:T.o[L][B]+(w.o[L][B]-T.o[L][B])*O,g.o[L][B]=H,H=V?T.v[L][B]:T.v[L][B]+(w.v[L][B]-T.v[L][B])*O,g.v[L][B]=H}function r(){var y=this.comp.renderedFrame-this.offsetTime,g=this.keyframes[0].t-this.offsetTime,u=this.keyframes[this.keyframes.length-1].t-this.offsetTime,P=this._caching.lastFrame;return P!==t&&(P<g&&y<g||P>u&&y>u)||(this._caching.lastIndex=P<y?this._caching.lastIndex:0,this.interpolateShape(y,this.pv,this._caching)),this._caching.lastFrame=y,this.pv}function i(){this.paths=this.localShapeCollection}function s(y,g){if(y._length!==g._length||y.c!==g.c)return!1;var u,P=y._length;for(u=0;u<P;u+=1)if(y.v[u][0]!==g.v[u][0]||y.v[u][1]!==g.v[u][1]||y.o[u][0]!==g.o[u][0]||y.o[u][1]!==g.o[u][1]||y.i[u][0]!==g.i[u][0]||y.i[u][1]!==g.i[u][1])return!1;return!0}function a(y){s(this.v,y)||(this.v=shapePool.clone(y),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function o(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length){this._mdf=!1;return}if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=!1;var y;this.kf?y=this.pv:this.data.ks?y=this.data.ks.k:y=this.data.pt.k;var g,u=this.effectsSequence.length;for(g=0;g<u;g+=1)y=this.effectsSequence[g](y);this.setVValue(y),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function c(y,g,u){this.propType="shape",this.comp=y.comp,this.container=y,this.elem=y,this.data=g,this.k=!1,this.kf=!1,this._mdf=!1;var P=u===3?g.pt.k:g.ks.k;this.v=shapePool.clone(P),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function h(y){this.effectsSequence.push(y),this.container.addDynamicProperty(this)}c.prototype.interpolateShape=e,c.prototype.getValue=o,c.prototype.setVValue=a,c.prototype.addEffect=h;function d(y,g,u){this.propType="shape",this.comp=y.comp,this.elem=y,this.container=y,this.offsetTime=y.data.st,this.keyframes=u===3?g.pt.k:g.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var P=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,P),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=i,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}d.prototype.getValue=o,d.prototype.interpolateShape=e,d.prototype.setVValue=a,d.prototype.addEffect=h;var S=function(){var y=roundCorner;function g(u,P){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=P.d,this.elem=u,this.comp=u.comp,this.frameId=-1,this.initDynamicPropertyContainer(u),this.p=PropertyFactory.getProp(u,P.p,1,0,this),this.s=PropertyFactory.getProp(u,P.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return g.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var P=this.p.v[0],T=this.p.v[1],w=this.s.v[0]/2,V=this.s.v[1]/2,L=this.d!==3,B=this.v;B.v[0][0]=P,B.v[0][1]=T-V,B.v[1][0]=L?P+w:P-w,B.v[1][1]=T,B.v[2][0]=P,B.v[2][1]=T+V,B.v[3][0]=L?P-w:P+w,B.v[3][1]=T,B.i[0][0]=L?P-w*y:P+w*y,B.i[0][1]=T-V,B.i[1][0]=L?P+w:P-w,B.i[1][1]=T-V*y,B.i[2][0]=L?P+w*y:P-w*y,B.i[2][1]=T+V,B.i[3][0]=L?P-w:P+w,B.i[3][1]=T+V*y,B.o[0][0]=L?P+w*y:P-w*y,B.o[0][1]=T-V,B.o[1][0]=L?P+w:P-w,B.o[1][1]=T+V*y,B.o[2][0]=L?P-w*y:P+w*y,B.o[2][1]=T+V,B.o[3][0]=L?P-w:P+w,B.o[3][1]=T-V*y}},extendPrototype([DynamicPropertyContainer],g),g}(),A=function(){function y(g,u){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=g,this.comp=g.comp,this.data=u,this.frameId=-1,this.d=u.d,this.initDynamicPropertyContainer(g),u.sy===1?(this.ir=PropertyFactory.getProp(g,u.ir,0,0,this),this.is=PropertyFactory.getProp(g,u.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(g,u.pt,0,0,this),this.p=PropertyFactory.getProp(g,u.p,1,0,this),this.r=PropertyFactory.getProp(g,u.r,0,degToRads,this),this.or=PropertyFactory.getProp(g,u.or,0,0,this),this.os=PropertyFactory.getProp(g,u.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return y.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var u=Math.floor(this.pt.v)*2,P=Math.PI*2/u,T=!0,w=this.or.v,V=this.ir.v,L=this.os.v,B=this.is.v,W=2*Math.PI*w/(u*2),z=2*Math.PI*V/(u*2),O,H,j,G,M=-Math.PI/2;M+=this.r.v;var I=this.data.d===3?-1:1;for(this.v._length=0,O=0;O<u;O+=1){H=T?w:V,j=T?L:B,G=T?W:z;var E=H*Math.cos(M),_=H*Math.sin(M),D=E===0&&_===0?0:_/Math.sqrt(E*E+_*_),R=E===0&&_===0?0:-E/Math.sqrt(E*E+_*_);E+=+this.p.v[0],_+=+this.p.v[1],this.v.setTripleAt(E,_,E-D*G*j*I,_-R*G*j*I,E+D*G*j*I,_+R*G*j*I,O,!0),T=!T,M+=P*I}},convertPolygonToPath:function(){var u=Math.floor(this.pt.v),P=Math.PI*2/u,T=this.or.v,w=this.os.v,V=2*Math.PI*T/(u*4),L,B=-Math.PI*.5,W=this.data.d===3?-1:1;for(B+=this.r.v,this.v._length=0,L=0;L<u;L+=1){var z=T*Math.cos(B),O=T*Math.sin(B),H=z===0&&O===0?0:O/Math.sqrt(z*z+O*O),j=z===0&&O===0?0:-z/Math.sqrt(z*z+O*O);z+=+this.p.v[0],O+=+this.p.v[1],this.v.setTripleAt(z,O,z-H*V*w*W,O-j*V*w*W,z+H*V*w*W,O+j*V*w*W,L,!0),B+=P*W}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],y),y}(),v=function(){function y(g,u){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=g,this.comp=g.comp,this.frameId=-1,this.d=u.d,this.initDynamicPropertyContainer(g),this.p=PropertyFactory.getProp(g,u.p,1,0,this),this.s=PropertyFactory.getProp(g,u.s,1,0,this),this.r=PropertyFactory.getProp(g,u.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return y.prototype={convertRectToPath:function(){var u=this.p.v[0],P=this.p.v[1],T=this.s.v[0]/2,w=this.s.v[1]/2,V=bmMin(T,w,this.r.v),L=V*(1-roundCorner);this.v._length=0,this.d===2||this.d===1?(this.v.setTripleAt(u+T,P-w+V,u+T,P-w+V,u+T,P-w+L,0,!0),this.v.setTripleAt(u+T,P+w-V,u+T,P+w-L,u+T,P+w-V,1,!0),V!==0?(this.v.setTripleAt(u+T-V,P+w,u+T-V,P+w,u+T-L,P+w,2,!0),this.v.setTripleAt(u-T+V,P+w,u-T+L,P+w,u-T+V,P+w,3,!0),this.v.setTripleAt(u-T,P+w-V,u-T,P+w-V,u-T,P+w-L,4,!0),this.v.setTripleAt(u-T,P-w+V,u-T,P-w+L,u-T,P-w+V,5,!0),this.v.setTripleAt(u-T+V,P-w,u-T+V,P-w,u-T+L,P-w,6,!0),this.v.setTripleAt(u+T-V,P-w,u+T-L,P-w,u+T-V,P-w,7,!0)):(this.v.setTripleAt(u-T,P+w,u-T+L,P+w,u-T,P+w,2),this.v.setTripleAt(u-T,P-w,u-T,P-w+L,u-T,P-w,3))):(this.v.setTripleAt(u+T,P-w+V,u+T,P-w+L,u+T,P-w+V,0,!0),V!==0?(this.v.setTripleAt(u+T-V,P-w,u+T-V,P-w,u+T-L,P-w,1,!0),this.v.setTripleAt(u-T+V,P-w,u-T+L,P-w,u-T+V,P-w,2,!0),this.v.setTripleAt(u-T,P-w+V,u-T,P-w+V,u-T,P-w+L,3,!0),this.v.setTripleAt(u-T,P+w-V,u-T,P+w-L,u-T,P+w-V,4,!0),this.v.setTripleAt(u-T+V,P+w,u-T+V,P+w,u-T+L,P+w,5,!0),this.v.setTripleAt(u+T-V,P+w,u+T-L,P+w,u+T-V,P+w,6,!0),this.v.setTripleAt(u+T,P+w-V,u+T,P+w-V,u+T,P+w-L,7,!0)):(this.v.setTripleAt(u-T,P-w,u-T+L,P-w,u-T,P-w,1,!0),this.v.setTripleAt(u-T,P+w,u-T,P+w-L,u-T,P+w,2,!0),this.v.setTripleAt(u+T,P+w,u+T-L,P+w,u+T,P+w,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],y),y}();function C(y,g,u){var P;if(u===3||u===4){var T=u===3?g.pt:g.ks,w=T.k;w.length?P=new d(y,g,u):P=new c(y,g,u)}else u===5?P=new v(y,g):u===6?P=new S(y,g):u===7&&(P=new A(y,g));return P.k&&y.addDynamicProperty(P),P}function x(){return c}function b(){return d}var F={};return F.getShapeProp=C,F.getConstructorFunction=x,F.getKeyframedConstructorFunction=b,F}();/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */var Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,i=Math.round;function s(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(E){if(E===0)return this;var _=t(E),D=e(E);return this._t(_,-D,0,0,D,_,0,0,0,0,1,0,0,0,0,1)}function o(E){if(E===0)return this;var _=t(E),D=e(E);return this._t(1,0,0,0,0,_,-D,0,0,D,_,0,0,0,0,1)}function c(E){if(E===0)return this;var _=t(E),D=e(E);return this._t(_,0,D,0,0,1,0,0,-D,0,_,0,0,0,0,1)}function h(E){if(E===0)return this;var _=t(E),D=e(E);return this._t(_,-D,0,0,D,_,0,0,0,0,1,0,0,0,0,1)}function d(E,_){return this._t(1,_,E,1,0,0)}function S(E,_){return this.shear(r(E),r(_))}function A(E,_){var D=t(_),R=e(_);return this._t(D,R,0,0,-R,D,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(E),1,0,0,0,0,1,0,0,0,0,1)._t(D,-R,0,0,R,D,0,0,0,0,1,0,0,0,0,1)}function v(E,_,D){return!D&&D!==0&&(D=1),E===1&&_===1&&D===1?this:this._t(E,0,0,0,0,_,0,0,0,0,D,0,0,0,0,1)}function C(E,_,D,R,N,Y,X,Z,J,U,tt,nt,et,Q,it,K){return this.props[0]=E,this.props[1]=_,this.props[2]=D,this.props[3]=R,this.props[4]=N,this.props[5]=Y,this.props[6]=X,this.props[7]=Z,this.props[8]=J,this.props[9]=U,this.props[10]=tt,this.props[11]=nt,this.props[12]=et,this.props[13]=Q,this.props[14]=it,this.props[15]=K,this}function x(E,_,D){return D=D||0,E!==0||_!==0||D!==0?this._t(1,0,0,0,0,1,0,0,0,0,1,0,E,_,D,1):this}function b(E,_,D,R,N,Y,X,Z,J,U,tt,nt,et,Q,it,K){var $=this.props;if(E===1&&_===0&&D===0&&R===0&&N===0&&Y===1&&X===0&&Z===0&&J===0&&U===0&&tt===1&&nt===0)return $[12]=$[12]*E+$[15]*et,$[13]=$[13]*Y+$[15]*Q,$[14]=$[14]*tt+$[15]*it,$[15]*=K,this._identityCalculated=!1,this;var ht=$[0],ct=$[1],lt=$[2],ot=$[3],ft=$[4],pt=$[5],rt=$[6],ut=$[7],mt=$[8],st=$[9],dt=$[10],at=$[11],vt=$[12],yt=$[13],gt=$[14],bt=$[15];return $[0]=ht*E+ct*N+lt*J+ot*et,$[1]=ht*_+ct*Y+lt*U+ot*Q,$[2]=ht*D+ct*X+lt*tt+ot*it,$[3]=ht*R+ct*Z+lt*nt+ot*K,$[4]=ft*E+pt*N+rt*J+ut*et,$[5]=ft*_+pt*Y+rt*U+ut*Q,$[6]=ft*D+pt*X+rt*tt+ut*it,$[7]=ft*R+pt*Z+rt*nt+ut*K,$[8]=mt*E+st*N+dt*J+at*et,$[9]=mt*_+st*Y+dt*U+at*Q,$[10]=mt*D+st*X+dt*tt+at*it,$[11]=mt*R+st*Z+dt*nt+at*K,$[12]=vt*E+yt*N+gt*J+bt*et,$[13]=vt*_+yt*Y+gt*U+bt*Q,$[14]=vt*D+yt*X+gt*tt+bt*it,$[15]=vt*R+yt*Z+gt*nt+bt*K,this._identityCalculated=!1,this}function F(E){var _=E.props;return this.transform(_[0],_[1],_[2],_[3],_[4],_[5],_[6],_[7],_[8],_[9],_[10],_[11],_[12],_[13],_[14],_[15])}function y(){return this._identityCalculated||(this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1),this._identityCalculated=!0),this._identity}function g(E){for(var _=0;_<16;){if(E.props[_]!==this.props[_])return!1;_+=1}return!0}function u(E){var _;for(_=0;_<16;_+=1)E.props[_]=this.props[_];return E}function P(E){var _;for(_=0;_<16;_+=1)this.props[_]=E[_]}function T(E,_,D){return{x:E*this.props[0]+_*this.props[4]+D*this.props[8]+this.props[12],y:E*this.props[1]+_*this.props[5]+D*this.props[9]+this.props[13],z:E*this.props[2]+_*this.props[6]+D*this.props[10]+this.props[14]}}function w(E,_,D){return E*this.props[0]+_*this.props[4]+D*this.props[8]+this.props[12]}function V(E,_,D){return E*this.props[1]+_*this.props[5]+D*this.props[9]+this.props[13]}function L(E,_,D){return E*this.props[2]+_*this.props[6]+D*this.props[10]+this.props[14]}function B(){var E=this.props[0]*this.props[5]-this.props[1]*this.props[4],_=this.props[5]/E,D=-this.props[1]/E,R=-this.props[4]/E,N=this.props[0]/E,Y=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/E,X=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/E,Z=new Matrix;return Z.props[0]=_,Z.props[1]=D,Z.props[4]=R,Z.props[5]=N,Z.props[12]=Y,Z.props[13]=X,Z}function W(E){var _=this.getInverseMatrix();return _.applyToPointArray(E[0],E[1],E[2]||0)}function z(E){var _,D=E.length,R=[];for(_=0;_<D;_+=1)R[_]=W(E[_]);return R}function O(E,_,D){var R=createTypedArray("float32",6);if(this.isIdentity())R[0]=E[0],R[1]=E[1],R[2]=_[0],R[3]=_[1],R[4]=D[0],R[5]=D[1];else{var N=this.props[0],Y=this.props[1],X=this.props[4],Z=this.props[5],J=this.props[12],U=this.props[13];R[0]=E[0]*N+E[1]*X+J,R[1]=E[0]*Y+E[1]*Z+U,R[2]=_[0]*N+_[1]*X+J,R[3]=_[0]*Y+_[1]*Z+U,R[4]=D[0]*N+D[1]*X+J,R[5]=D[0]*Y+D[1]*Z+U}return R}function H(E,_,D){var R;return this.isIdentity()?R=[E,_,D]:R=[E*this.props[0]+_*this.props[4]+D*this.props[8]+this.props[12],E*this.props[1]+_*this.props[5]+D*this.props[9]+this.props[13],E*this.props[2]+_*this.props[6]+D*this.props[10]+this.props[14]],R}function j(E,_){if(this.isIdentity())return E+","+_;var D=this.props;return Math.round((E*D[0]+_*D[4]+D[12])*100)/100+","+Math.round((E*D[1]+_*D[5]+D[13])*100)/100}function G(){for(var E=0,_=this.props,D="matrix3d(",R=1e4;E<16;)D+=i(_[E]*R)/R,D+=E===15?")":",",E+=1;return D}function M(E){var _=1e4;return E<1e-6&&E>0||E>-1e-6&&E<0?i(E*_)/_:E}function I(){var E=this.props,_=M(E[0]),D=M(E[1]),R=M(E[4]),N=M(E[5]),Y=M(E[12]),X=M(E[13]);return"matrix("+_+","+D+","+R+","+N+","+Y+","+X+")"}return function(){this.reset=s,this.rotate=a,this.rotateX=o,this.rotateY=c,this.rotateZ=h,this.skew=S,this.skewFromAxis=A,this.shear=d,this.scale=v,this.setTransform=C,this.translate=x,this.transform=b,this.multiply=F,this.applyToPoint=T,this.applyToX=w,this.applyToY=V,this.applyToZ=L,this.applyToPointArray=H,this.applyToTriplePoints=O,this.applyToPointStringified=j,this.toCSS=G,this.to2dCSS=I,this.clone=u,this.cloneFromProps=P,this.equals=g,this.inversePoints=z,this.inversePoint=W,this.getInverseMatrix=B,this._t=this.transform,this.isIdentity=y,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$3=function(r){return typeof r}:_typeof$3=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$3(t)}var lottie={};function setLocation(t){setLocationHref(t)}function searchAnimations(){animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return animationManager.loadAnimation(t)}function setQuality(t){if(typeof t=="string")switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10);break}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t)}function inBrowser(){return typeof navigator<"u"}function installPlugin(t,e){t==="expressions"&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";function checkReady(){document.readyState==="complete"&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var i=e[r].split("=");if(decodeURIComponent(i[0])==t)return decodeURIComponent(i[1])}return null}var queryString="";{var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{_typeof$3(exports)!=="object"&&(window.bodymovin=lottie)}catch(t){}var ShapeModifiers=function(){var t={},e={};t.registerModifier=r,t.getModifier=i;function r(s,a){e[s]||(e[s]=a)}function i(s,a,o){return new e[s](a,o)}return t}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,i,s){var a=[];e<=1?a.push({s:t,e}):t>=1?a.push({s:t-1,e:e-1}):(a.push({s:t,e:1}),a.push({s:0,e:e-1}));var o=[],c,h=a.length,d;for(c=0;c<h;c+=1)if(d=a[c],!(d.e*s<i||d.s*s>i+r)){var S,A;d.s*s<=i?S=0:S=(d.s*s-i)/r,d.e*s>=i+r?A=1:A=(d.e*s-i)/r,o.push([S,A])}return o.length||o.push([0,0]),o},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r;if(this._mdf||t){var i=this.o.v%360/360;if(i<0&&(i+=1),this.s.v>1?e=1+i:this.s.v<0?e=0+i:e=this.s.v+i,this.e.v>1?r=1+i:this.e.v<0?r=0+i:r=this.e.v+i,e>r){var s=e;e=r,r=s}e=Math.round(e*1e4)*1e-4,r=Math.round(r*1e4)*1e-4,this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var a,o,c=this.shapes.length,h,d,S,A,v,C=0;if(r===e)for(o=0;o<c;o+=1)this.shapes[o].localShapeCollection.releaseShapes(),this.shapes[o].shape._mdf=!0,this.shapes[o].shape.paths=this.shapes[o].localShapeCollection,this._mdf&&(this.shapes[o].pathsData.length=0);else if(r===1&&e===0||r===0&&e===1){if(this._mdf)for(o=0;o<c;o+=1)this.shapes[o].pathsData.length=0,this.shapes[o].shape._mdf=!0}else{var x=[],b,F;for(o=0;o<c;o+=1)if(b=this.shapes[o],!b.shape._mdf&&!this._mdf&&!t&&this.m!==2)b.shape.paths=b.localShapeCollection;else{if(a=b.shape.paths,d=a._length,v=0,!b.shape._mdf&&b.pathsData.length)v=b.totalShapeLength;else{for(S=this.releasePathsData(b.pathsData),h=0;h<d;h+=1)A=bez.getSegmentsLength(a.shapes[h]),S.push(A),v+=A.totalLength;b.totalShapeLength=v,b.pathsData=S}C+=v,b.shape._mdf=!0}var y=e,g=r,u=0,P;for(o=c-1;o>=0;o-=1)if(b=this.shapes[o],b.shape._mdf){for(F=b.localShapeCollection,F.releaseShapes(),this.m===2&&c>1?(P=this.calculateShapeEdges(e,r,b.totalShapeLength,u,C),u+=b.totalShapeLength):P=[[y,g]],d=P.length,h=0;h<d;h+=1){y=P[h][0],g=P[h][1],x.length=0,g<=1?x.push({s:b.totalShapeLength*y,e:b.totalShapeLength*g}):y>=1?x.push({s:b.totalShapeLength*(y-1),e:b.totalShapeLength*(g-1)}):(x.push({s:b.totalShapeLength*y,e:b.totalShapeLength}),x.push({s:0,e:b.totalShapeLength*(g-1)}));var T=this.addShapes(b,x[0]);if(x[0].s!==x[0].e){if(x.length>1){var w=b.shape.paths.shapes[b.shape.paths._length-1];if(w.c){var V=T.pop();this.addPaths(T,F),T=this.addShapes(b,x[1],V)}else this.addPaths(T,F),T=this.addShapes(b,x[1])}this.addPaths(T,F)}}b.shape.paths=F}}},TrimModifier.prototype.addPaths=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,i,s,a,o){s.setXYAt(e[0],e[1],"o",a),s.setXYAt(r[0],r[1],"i",a+1),o&&s.setXYAt(t[0],t[1],"v",a),s.setXYAt(i[0],i[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,i){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),i&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var i=t.pathsData,s=t.shape.paths.shapes,a,o=t.shape.paths._length,c,h,d=0,S,A,v,C,x=[],b,F=!0;for(r?(A=r._length,b=r._length):(r=shapePool.newElement(),A=0,b=0),x.push(r),a=0;a<o;a+=1){for(v=i[a].lengths,r.c=s[a].c,h=s[a].c?v.length:v.length+1,c=1;c<h;c+=1)if(S=v[c-1],d+S.addedLength<e.s)d+=S.addedLength,r.c=!1;else if(d>e.e){r.c=!1;break}else e.s<=d&&e.e>=d+S.addedLength?(this.addSegment(s[a].v[c-1],s[a].o[c-1],s[a].i[c],s[a].v[c],r,A,F),F=!1):(C=bez.getNewSegment(s[a].v[c-1],s[a].v[c],s[a].o[c-1],s[a].i[c],(e.s-d)/S.addedLength,(e.e-d)/S.addedLength,v[c-1]),this.addSegmentFromArray(C,r,A,F),F=!1,r.c=!1),d+=S.addedLength,A+=1;if(s[a].c&&v.length){if(S=v[c-1],d<=e.e){var y=v[c-1].addedLength;e.s<=d&&e.e>=d+y?(this.addSegment(s[a].v[c-1],s[a].o[c-1],s[a].i[0],s[a].v[0],r,A,F),F=!1):(C=bez.getNewSegment(s[a].v[c-1],s[a].v[0],s[a].o[c-1],s[a].i[0],(e.s-d)/y,(e.e-d)/y,v[c-1]),this.addSegmentFromArray(C,r,A,F),F=!1,r.c=!1)}else r.c=!1;d+=S.addedLength,A+=1}if(r._length&&(r.setXYAt(r.v[b][0],r.v[b][1],"i",b),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>e.e)break;a<o-1&&(r=shapePool.newElement(),F=!0,x.push(r),A=0)}return x};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,i=[0,0],s=t._length,a=0;for(a=0;a<s;a+=1)i[0]+=t.v[a][0],i[1]+=t.v[a][1];i[0]/=s,i[1]/=s;var o=shapePool.newElement();o.c=t.c;var c,h,d,S,A,v;for(a=0;a<s;a+=1)c=t.v[a][0]+(i[0]-t.v[a][0])*r,h=t.v[a][1]+(i[1]-t.v[a][1])*r,d=t.o[a][0]+(i[0]-t.o[a][0])*-r,S=t.o[a][1]+(i[1]-t.o[a][1])*-r,A=t.i[a][0]+(i[0]-t.i[a][0])*-r,v=t.i[a][1]+(i[1]-t.i[a][1])*-r,o.setTripleAt(c,h,d,S,A,v,a);return o},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,o=this.amount.v;if(o!==0){var c,h;for(r=0;r<i;r+=1){if(c=this.shapes[r],h=c.localShapeCollection,!(!c.shape._mdf&&!this._mdf&&!t))for(h.releaseShapes(),c.shape._mdf=!0,e=c.shape.paths.shapes,a=c.shape.paths._length,s=0;s<a;s+=1)h.addShape(this.processPath(e[s],o));c.shape.paths=c.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(h){var d=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||d,this.a&&h.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&h.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&h.skewFromAxis(-this.sk.v,this.sa.v),this.r?h.rotate(-this.r.v):h.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?h.translate(this.px.v,this.py.v,-this.pz.v):h.translate(this.px.v,this.py.v,0):h.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function r(h){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||h){var d;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var S,A;if(d=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(S=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/d,0),A=this.p.getValueAtTime(this.p.keyframes[0].t/d,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(S=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/d,0),A=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/d,0)):(S=this.p.pv,A=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/d,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){S=[],A=[];var v=this.px,C=this.py;v._caching.lastFrame+v.offsetTime<=v.keyframes[0].t?(S[0]=v.getValueAtTime((v.keyframes[0].t+.01)/d,0),S[1]=C.getValueAtTime((C.keyframes[0].t+.01)/d,0),A[0]=v.getValueAtTime(v.keyframes[0].t/d,0),A[1]=C.getValueAtTime(C.keyframes[0].t/d,0)):v._caching.lastFrame+v.offsetTime>=v.keyframes[v.keyframes.length-1].t?(S[0]=v.getValueAtTime(v.keyframes[v.keyframes.length-1].t/d,0),S[1]=C.getValueAtTime(C.keyframes[C.keyframes.length-1].t/d,0),A[0]=v.getValueAtTime((v.keyframes[v.keyframes.length-1].t-.01)/d,0),A[1]=C.getValueAtTime((C.keyframes[C.keyframes.length-1].t-.01)/d,0)):(S=[v.pv,C.pv],A[0]=v.getValueAtTime((v._caching.lastFrame+v.offsetTime-.01)/d,v.offsetTime),A[1]=C.getValueAtTime((C._caching.lastFrame+C.offsetTime-.01)/d,C.offsetTime))}else A=t,S=A;this.v.rotate(-Math.atan2(S[1]-A[1],S[0]-A[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function i(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length)this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1;else return;if(!this.s.effectsSequence.length)this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2;else return;if(this.sk)if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length)this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3;else return;this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length&&(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}function s(){}function a(h){this._addDynamicProperty(h),this.elem.addDynamicProperty(h),this._isDirty=!0}function o(h,d,S){if(this.elem=h,this.frameId=-1,this.propType="transform",this.data=d,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(S||h),d.p&&d.p.s?(this.px=PropertyFactory.getProp(h,d.p.x,0,0,this),this.py=PropertyFactory.getProp(h,d.p.y,0,0,this),d.p.z&&(this.pz=PropertyFactory.getProp(h,d.p.z,0,0,this))):this.p=PropertyFactory.getProp(h,d.p||{k:[0,0,0]},1,0,this),d.rx){if(this.rx=PropertyFactory.getProp(h,d.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(h,d.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(h,d.rz,0,degToRads,this),d.or.k[0].ti){var A,v=d.or.k.length;for(A=0;A<v;A+=1)d.or.k[A].to=null,d.or.k[A].ti=null}this.or=PropertyFactory.getProp(h,d.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(h,d.r||{k:0},0,degToRads,this);d.sk&&(this.sk=PropertyFactory.getProp(h,d.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(h,d.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(h,d.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(h,d.s||{k:[100,100,100]},1,.01,this),d.o?this.o=PropertyFactory.getProp(h,d.o,0,.01,h):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}o.prototype={applyToMatrix:e,getValue:r,precalculateMatrix:i,autoOrient:s},extendPrototype([DynamicPropertyContainer],o),o.prototype.addDynamicProperty=a,o.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function c(h,d,S){return new o(h,d,S)}return{getTransformProperty:c}}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,i,s,a){var o=a?-1:1,c=i.s.v[0]+(1-i.s.v[0])*(1-s),h=i.s.v[1]+(1-i.s.v[1])*(1-s);t.translate(i.p.v[0]*o*s,i.p.v[1]*o*s,i.p.v[2]),e.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),e.rotate(-i.r.v*o*s),e.translate(i.a.v[0],i.a.v[1],i.a.v[2]),r.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),r.scale(a?1/c:c,a?1/h:h),r.translate(i.a.v[0],i.a.v[1],i.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,i){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=i,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,t[e].ty==="gr"&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]._render=e,t[r].ty==="gr"&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,i,s,a,o=!1;if(this._mdf||t){var c=Math.ceil(this.c.v);if(this._groups.length<c){for(;this._groups.length<c;){var h={it:this.cloneElements(this._elements),ty:"gr"};h.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,h),this._groups.splice(0,0,h),this._currentCopies+=1}this.elem.reloadShapes(),o=!0}a=0;var d;for(i=0;i<=this._groups.length-1;i+=1){if(d=a<c,this._groups[i]._render=d,this.changeGroupRender(this._groups[i].it,d),!d){var S=this.elemsData[i].it,A=S[S.length-1];A.transform.op.v!==0?(A.transform.op._mdf=!0,A.transform.op.v=0):A.transform.op._mdf=!1}a+=1}this._currentCopies=c;var v=this.o.v,C=v%1,x=v>0?Math.floor(v):Math.ceil(v),b=this.pMatrix.props,F=this.rMatrix.props,y=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var g=0;if(v>0){for(;g<x;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),g+=1;C&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,C,!1),g+=C)}else if(v<0){for(;g>x;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),g-=1;C&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-C,!0),g-=C)}i=this.data.m===1?0:this._currentCopies-1,s=this.data.m===1?1:-1,a=this._currentCopies;for(var u,P;a;){if(e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,P=r.length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1)),g!==0){for((i!==0&&s===1||i!==this._currentCopies-1&&s===-1)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8],F[9],F[10],F[11],F[12],F[13],F[14],F[15]),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),this.matrix.transform(b[0],b[1],b[2],b[3],b[4],b[5],b[6],b[7],b[8],b[9],b[10],b[11],b[12],b[13],b[14],b[15]),u=0;u<P;u+=1)r[u]=this.matrix.props[u];this.matrix.reset()}else for(this.matrix.reset(),u=0;u<P;u+=1)r[u]=this.matrix.props[u];g+=1,a-=1,i+=s}}else for(a=this._currentCopies,i=0,s=1;a;)e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,a-=1,i+=s;return o},RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r=shapePool.newElement();r.c=t.c;var i,s=t._length,a,o,c,h,d,S,A=0,v,C,x,b,F,y;for(i=0;i<s;i+=1)a=t.v[i],c=t.o[i],o=t.i[i],a[0]===c[0]&&a[1]===c[1]&&a[0]===o[0]&&a[1]===o[1]?(i===0||i===s-1)&&!t.c?(r.setTripleAt(a[0],a[1],c[0],c[1],o[0],o[1],A),A+=1):(i===0?h=t.v[s-1]:h=t.v[i-1],d=Math.sqrt(Math.pow(a[0]-h[0],2)+Math.pow(a[1]-h[1],2)),S=d?Math.min(d/2,e)/d:0,F=a[0]+(h[0]-a[0])*S,v=F,y=a[1]-(a[1]-h[1])*S,C=y,x=v-(v-a[0])*roundCorner,b=C-(C-a[1])*roundCorner,r.setTripleAt(v,C,x,b,F,y,A),A+=1,i===s-1?h=t.v[0]:h=t.v[i+1],d=Math.sqrt(Math.pow(a[0]-h[0],2)+Math.pow(a[1]-h[1],2)),S=d?Math.min(d/2,e)/d:0,x=a[0]+(h[0]-a[0])*S,v=x,b=a[1]+(h[1]-a[1])*S,C=b,F=v-(v-a[0])*roundCorner,y=C-(C-a[1])*roundCorner,r.setTripleAt(v,C,x,b,F,y,A),A+=1):(r.setTripleAt(t.v[i][0],t.v[i][1],t.o[i][0],t.o[i][1],t.i[i][0],t.i[i][1],A),A+=1);return r},RoundCornersModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,o=this.rd.v;if(o!==0){var c,h;for(r=0;r<i;r+=1){if(c=this.shapes[r],h=c.localShapeCollection,!(!c.shape._mdf&&!this._mdf&&!t))for(h.releaseShapes(),c.shape._mdf=!0,e=c.shape.paths.shapes,a=c.shape.paths._length,s=0;s<a;s+=1)h.addShape(this.processPath(e[s],o));c.shape.paths=c.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function floatEqual(t,e){return Math.abs(t-e)*1e5<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(t===0)return[];var i=e*e-4*t*r;if(i<0)return[];var s=-e/(2*t);if(i===0)return[s];var a=Math.sqrt(i)/(2*t);return[s-a,s+a]}function polynomialCoefficients(t,e,r,i){return[-t+3*e-3*r+i,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,i,s){s&&pointEqual(t,e)&&(e=lerpPoint(t,i,1/3)),s&&pointEqual(r,i)&&(r=lerpPoint(t,i,2/3));var a=polynomialCoefficients(t[0],e[0],r[0],i[0]),o=polynomialCoefficients(t[1],e[1],r[1],i[1]);this.a=[a[0],o[0]],this.b=[a[1],o[1]],this.c=[a[2],o[2]],this.d=[a[3],o[3]],this.points=[t,e,r,i]}PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var i=Math.sqrt(r);return floatZero(i)?i>0&&i<1?[e]:[]:[e-i,e+i].filter(function(s){return s>0&&s<1})},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),i=lerpPoint(this.points[2],this.points[3],t),s=lerpPoint(e,r,t),a=lerpPoint(r,i,t),o=lerpPoint(s,a,t);return[new PolynomialBezier(this.points[0],e,s,o,!0),new PolynomialBezier(o,a,i,this.points[3],!0)]};function extrema(t,e){var r=t.points[0][e],i=t.points[t.points.length-1][e];if(r>i){var s=i;i=r,r=s}for(var a=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),o=0;o<a.length;o+=1)if(a[o]>0&&a[o]<1){var c=t.point(a[o])[e];c<r?r=c:c>i&&(i=c)}return{min:r,max:i}}PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}};function intersectData(t,e,r){var i=t.boundingBox();return{cx:i.cx,cy:i.cy,width:i.width,height:i.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return Math.abs(t.cx-e.cx)*2<t.width+e.width&&Math.abs(t.cy-e.cy)*2<t.height+e.height}function intersectsImpl(t,e,r,i,s,a){if(boxIntersect(t,e)){if(r>=a||t.width<=i&&t.height<=i&&e.width<=i&&e.height<=i){s.push([t.t,e.t]);return}var o=splitData(t),c=splitData(e);intersectsImpl(o[0],c[0],r+1,i,s,a),intersectsImpl(o[0],c[1],r+1,i,s,a),intersectsImpl(o[1],c[0],r+1,i,s,a),intersectsImpl(o[1],c[1],r+1,i,s,a)}}PolynomialBezier.prototype.intersections=function(t,e,r){e===void 0&&(e=2),r===void 0&&(r=7);var i=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,i,r),i},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)};function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,i){var s=[t[0],t[1],1],a=[e[0],e[1],1],o=[r[0],r[1],1],c=[i[0],i[1],1],h=crossProduct(crossProduct(s,a),crossProduct(o,c));return floatZero(h[2])?null:[h[0]/h[2],h[1]/h[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0};function setPoint(t,e,r,i,s,a,o){var c=r-Math.PI/2,h=r+Math.PI/2,d=e[0]+Math.cos(r)*i*s,S=e[1]-Math.sin(r)*i*s;t.setTripleAt(d,S,d+Math.cos(c)*a,S-Math.sin(c)*a,d+Math.cos(h)*o,S-Math.sin(h)*o,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],i=-Math.PI*.5,s=[Math.cos(i)*r[0]-Math.sin(i)*r[1],Math.sin(i)*r[0]+Math.cos(i)*r[1]];return s}function getProjectingAngle(t,e){var r=e===0?t.length()-1:e-1,i=(e+1)%t.length(),s=t.v[r],a=t.v[i],o=getPerpendicularVector(s,a);return Math.atan2(0,1)-Math.atan2(o[1],o[0])}function zigZagCorner(t,e,r,i,s,a,o){var c=getProjectingAngle(e,r),h=e.v[r%e._length],d=e.v[r===0?e._length-1:r-1],S=e.v[(r+1)%e._length],A=a===2?Math.sqrt(Math.pow(h[0]-d[0],2)+Math.pow(h[1]-d[1],2)):0,v=a===2?Math.sqrt(Math.pow(h[0]-S[0],2)+Math.pow(h[1]-S[1],2)):0;setPoint(t,e.v[r%e._length],c,o,i,v/((s+1)*2),A/((s+1)*2))}function zigZagSegment(t,e,r,i,s,a){for(var o=0;o<i;o+=1){var c=(o+1)/(i+1),h=s===2?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,d=e.normalAngle(c),S=e.point(c);setPoint(t,S,d,a,r,h/((i+1)*2),h/((i+1)*2)),a=-a}return a}ZigZagModifier.prototype.processPath=function(t,e,r,i){var s=t._length,a=shapePool.newElement();if(a.c=t.c,t.c||(s-=1),s===0)return a;var o=-1,c=PolynomialBezier.shapeSegment(t,0);zigZagCorner(a,t,0,e,r,i,o);for(var h=0;h<s;h+=1)o=zigZagSegment(a,c,e,r,i,-o),h===s-1&&!t.c?c=null:c=PolynomialBezier.shapeSegment(t,(h+1)%s),zigZagCorner(a,t,h+1,e,r,i,o);return a},ZigZagModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,o=this.amplitude.v,c=Math.max(0,Math.round(this.frequency.v)),h=this.pointsType.v;if(o!==0){var d,S;for(r=0;r<i;r+=1){if(d=this.shapes[r],S=d.localShapeCollection,!(!d.shape._mdf&&!this._mdf&&!t))for(S.releaseShapes(),d.shape._mdf=!0,e=d.shape.paths.shapes,a=d.shape.paths._length,s=0;s<a;s+=1)S.addShape(this.processPath(e[s],o,c,h));d.shape.paths=d.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function linearOffset(t,e,r){var i=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,i,r),polarOffset(e,i,r)]}function offsetSegment(t,e){var r,i,s,a,o,c,h;h=linearOffset(t.points[0],t.points[1],e),r=h[0],i=h[1],h=linearOffset(t.points[1],t.points[2],e),s=h[0],a=h[1],h=linearOffset(t.points[2],t.points[3],e),o=h[0],c=h[1];var d=lineIntersection(r,i,s,a);d===null&&(d=i);var S=lineIntersection(o,c,s,a);return S===null&&(S=o),new PolynomialBezier(r,d,S,c)}function joinLines(t,e,r,i,s){var a=e.points[3],o=r.points[0];if(i===3||pointEqual(a,o))return a;if(i===2){var c=-e.tangentAngle(1),h=-r.tangentAngle(0)+Math.PI,d=lineIntersection(a,polarOffset(a,c+Math.PI/2,100),o,polarOffset(o,c+Math.PI/2,100)),S=d?pointDistance(d,a):pointDistance(a,o)/2,A=polarOffset(a,c,2*S*roundCorner);return t.setXYAt(A[0],A[1],"o",t.length()-1),A=polarOffset(o,h,2*S*roundCorner),t.setTripleAt(o[0],o[1],o[0],o[1],A[0],A[1],t.length()),o}var v=pointEqual(a,e.points[2])?e.points[0]:e.points[2],C=pointEqual(o,r.points[1])?r.points[3]:r.points[1],x=lineIntersection(v,a,o,C);return x&&pointDistance(x,a)<s?(t.setTripleAt(x[0],x[1],x[0],x[1],x[0],x[1],t.length()),x):a}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),i=e.slice(),s=getIntersection(t[t.length-1],e[0]);return s&&(r[t.length-1]=t[t.length-1].split(s[0])[0],i[0]=e[0].split(s[1])[1]),t.length>1&&e.length>1&&(s=getIntersection(t[0],e[e.length-1]),s)?[[t[0].split(s[0])[0]],[e[e.length-1].split(s[1])[1]]]:[r,i]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r=t.inflectionPoints(),i,s,a,o;if(r.length===0)return[offsetSegment(t,e)];if(r.length===1||floatEqual(r[1],1))return a=t.split(r[0]),i=a[0],s=a[1],[offsetSegment(i,e),offsetSegment(s,e)];a=t.split(r[0]),i=a[0];var c=(r[1]-r[0])/(1-r[0]);return a=a[1].split(c),o=a[0],s=a[1],[offsetSegment(i,e),offsetSegment(o,e),offsetSegment(s,e)]}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=this.amount.effectsSequence.length!==0},OffsetPathModifier.prototype.processPath=function(t,e,r,i){var s=shapePool.newElement();s.c=t.c;var a=t.length();t.c||(a-=1);var o,c,h,d=[];for(o=0;o<a;o+=1)h=PolynomialBezier.shapeSegment(t,o),d.push(offsetSegmentSplit(h,e));if(!t.c)for(o=a-1;o>=0;o-=1)h=PolynomialBezier.shapeSegmentInverted(t,o),d.push(offsetSegmentSplit(h,e));d=pruneIntersections(d);var S=null,A=null;for(o=0;o<d.length;o+=1){var v=d[o];for(A&&(S=joinLines(s,A,v[0],r,i)),A=v[v.length-1],c=0;c<v.length;c+=1)h=v[c],S&&pointEqual(h.points[0],S)?s.setXYAt(h.points[1][0],h.points[1][1],"o",s.length()-1):s.setTripleAt(h.points[0][0],h.points[0][1],h.points[1][0],h.points[1][1],h.points[0][0],h.points[0][1],s.length()),s.setTripleAt(h.points[3][0],h.points[3][1],h.points[3][0],h.points[3][1],h.points[2][0],h.points[2][1],s.length()),S=h.points[3]}return d.length&&joinLines(s,A,d[0][0],r,i),s},OffsetPathModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,o=this.amount.v,c=this.miterLimit.v,h=this.lineJoin;if(o!==0){var d,S;for(r=0;r<i;r+=1){if(d=this.shapes[r],S=d.localShapeCollection,!(!d.shape._mdf&&!this._mdf&&!t))for(S.releaseShapes(),d.shape._mdf=!0,e=d.shape.paths.shapes,a=d.shape.paths._length,s=0;s<a;s+=1)S.addShape(this.processPath(e[s],o,h,c));d.shape.paths=d.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",i="normal",s=e.length,a,o=0;o<s;o+=1)switch(a=e[o].toLowerCase(),a){case"italic":i="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200";break}return{style:i,weight:t.fWeight||r}}var FontManager=function(){var t=5e3,e={w:0,size:0,shapes:[],data:{shapes:[]}},r=[];r=r.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var i=127988,s=917631,a=917601,o=917626,c=65039,h=8205,d=127462,S=127487,A=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function v(M){var I=M.split(","),E,_=I.length,D=[];for(E=0;E<_;E+=1)I[E]!=="sans-serif"&&I[E]!=="monospace"&&D.push(I[E]);return D.join(",")}function C(M,I){var E=createTag("span");E.setAttribute("aria-hidden",!0),E.style.fontFamily=I;var _=createTag("span");_.innerText="giItT1WQy@!-/#",E.style.position="absolute",E.style.left="-10000px",E.style.top="-10000px",E.style.fontSize="300px",E.style.fontVariant="normal",E.style.fontStyle="normal",E.style.fontWeight="normal",E.style.letterSpacing="0",E.appendChild(_),document.body.appendChild(E);var D=_.offsetWidth;return _.style.fontFamily=v(M)+", "+I,{node:_,w:D,parent:E}}function x(){var M,I=this.fonts.length,E,_,D=I;for(M=0;M<I;M+=1)this.fonts[M].loaded?D-=1:this.fonts[M].fOrigin==="n"||this.fonts[M].origin===0?this.fonts[M].loaded=!0:(E=this.fonts[M].monoCase.node,_=this.fonts[M].monoCase.w,E.offsetWidth!==_?(D-=1,this.fonts[M].loaded=!0):(E=this.fonts[M].sansCase.node,_=this.fonts[M].sansCase.w,E.offsetWidth!==_&&(D-=1,this.fonts[M].loaded=!0)),this.fonts[M].loaded&&(this.fonts[M].sansCase.parent.parentNode.removeChild(this.fonts[M].sansCase.parent),this.fonts[M].monoCase.parent.parentNode.removeChild(this.fonts[M].monoCase.parent)));D!==0&&Date.now()-this.initTime<t?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)}function b(M,I){var E=document.body&&I?"svg":"canvas",_,D=getFontProperties(M);if(E==="svg"){var R=createNS("text");R.style.fontSize="100px",R.setAttribute("font-family",M.fFamily),R.setAttribute("font-style",D.style),R.setAttribute("font-weight",D.weight),R.textContent="1",M.fClass?(R.style.fontFamily="inherit",R.setAttribute("class",M.fClass)):R.style.fontFamily=M.fFamily,I.appendChild(R),_=R}else{var N=new OffscreenCanvas(500,500).getContext("2d");N.font=D.style+" "+D.weight+" 100px "+M.fFamily,_=N}function Y(X){return E==="svg"?(_.textContent=X,_.getComputedTextLength()):_.measureText(X).width}return{measureText:Y}}function F(M,I){if(!M){this.isLoaded=!0;return}if(this.chars){this.isLoaded=!0,this.fonts=M.list;return}if(!document.body){this.isLoaded=!0,M.list.forEach(function(tt){tt.helper=b(tt),tt.cache={}}),this.fonts=M.list;return}var E=M.list,_,D=E.length,R=D;for(_=0;_<D;_+=1){var N=!0,Y,X;if(E[_].loaded=!1,E[_].monoCase=C(E[_].fFamily,"monospace"),E[_].sansCase=C(E[_].fFamily,"sans-serif"),!E[_].fPath)E[_].loaded=!0,R-=1;else if(E[_].fOrigin==="p"||E[_].origin===3){if(Y=document.querySelectorAll('style[f-forigin="p"][f-family="'+E[_].fFamily+'"], style[f-origin="3"][f-family="'+E[_].fFamily+'"]'),Y.length>0&&(N=!1),N){var Z=createTag("style");Z.setAttribute("f-forigin",E[_].fOrigin),Z.setAttribute("f-origin",E[_].origin),Z.setAttribute("f-family",E[_].fFamily),Z.type="text/css",Z.innerText="@font-face {font-family: "+E[_].fFamily+"; font-style: normal; src: url('"+E[_].fPath+"');}",I.appendChild(Z)}}else if(E[_].fOrigin==="g"||E[_].origin===1){for(Y=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),X=0;X<Y.length;X+=1)Y[X].href.indexOf(E[_].fPath)!==-1&&(N=!1);if(N){var J=createTag("link");J.setAttribute("f-forigin",E[_].fOrigin),J.setAttribute("f-origin",E[_].origin),J.type="text/css",J.rel="stylesheet",J.href=E[_].fPath,document.body.appendChild(J)}}else if(E[_].fOrigin==="t"||E[_].origin===2){for(Y=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),X=0;X<Y.length;X+=1)E[_].fPath===Y[X].src&&(N=!1);if(N){var U=createTag("link");U.setAttribute("f-forigin",E[_].fOrigin),U.setAttribute("f-origin",E[_].origin),U.setAttribute("rel","stylesheet"),U.setAttribute("href",E[_].fPath),I.appendChild(U)}}E[_].helper=b(E[_],I),E[_].cache={},this.fonts.push(E[_])}R===0?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function y(M){if(M){this.chars||(this.chars=[]);var I,E=M.length,_,D=this.chars.length,R;for(I=0;I<E;I+=1){for(_=0,R=!1;_<D;)this.chars[_].style===M[I].style&&this.chars[_].fFamily===M[I].fFamily&&this.chars[_].ch===M[I].ch&&(R=!0),_+=1;R||(this.chars.push(M[I]),D+=1)}}}function g(M,I,E){for(var _=0,D=this.chars.length;_<D;){if(this.chars[_].ch===M&&this.chars[_].style===I&&this.chars[_].fFamily===E)return this.chars[_];_+=1}return(typeof M=="string"&&M.charCodeAt(0)!==13||!M)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",M,I,E)),e}function u(M,I,E){var _=this.getFontByName(I),D=M;if(!_.cache[D]){var R=_.helper;if(M===" "){var N=R.measureText("|"+M+"|"),Y=R.measureText("||");_.cache[D]=(N-Y)/100}else _.cache[D]=R.measureText(M)/100}return _.cache[D]*E}function P(M){for(var I=0,E=this.fonts.length;I<E;){if(this.fonts[I].fName===M)return this.fonts[I];I+=1}return this.fonts[0]}function T(M){var I=0,E=M.charCodeAt(0);if(E>=55296&&E<=56319){var _=M.charCodeAt(1);_>=56320&&_<=57343&&(I=(E-55296)*1024+_-56320+65536)}return I}function w(M,I){var E=M.toString(16)+I.toString(16);return A.indexOf(E)!==-1}function V(M){return M===h}function L(M){return M===c}function B(M){var I=T(M);return I>=d&&I<=S}function W(M){return B(M.substr(0,2))&&B(M.substr(2,2))}function z(M){return r.indexOf(M)!==-1}function O(M,I){var E=T(M.substr(I,2));if(E!==i)return!1;var _=0;for(I+=2;_<5;){if(E=T(M.substr(I,2)),E<a||E>o)return!1;_+=1,I+=2}return T(M.substr(I,2))===s}function H(){this.isLoaded=!0}var j=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};j.isModifier=w,j.isZeroWidthJoiner=V,j.isFlagEmoji=W,j.isRegionalCode=B,j.isCombinedCharacter=z,j.isRegionalFlag=O,j.isVariationSelector=L,j.BLACK_FLAG_CODE_POINT=i;var G={addChars:y,addFonts:F,getCharData:g,getFontByName:P,measureText:u,checkLoadedFonts:x,setIsLoaded:H};return j.prototype=G,j}();function SlotManager(t){this.animationData=t}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t};function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(e){this.renderableComponents.indexOf(e)===-1&&this.renderableComponents.push(e)},removeRenderableComponent:function(e){this.renderableComponents.indexOf(e)!==-1&&this.renderableComponents.splice(this.renderableComponents.indexOf(e),1)},prepareRenderableFrame:function(e){this.checkLayerLimits(e)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(e){this.data.ip-this.data.st<=e&&this.data.op-this.data.st>e?this.isInRange!==!0&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):this.isInRange!==!1&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var e,r=this.renderableComponents.length;for(e=0;e<r;e+=1)this.renderableComponents[e].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return this.data.ty===5?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=function(){var t={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(e){return t[e]||""}}();function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r=t.ef||[];this.effectElements=[];var i,s=r.length,a;for(i=0;i<s;i+=1)a=new GroupEffect(r[i],e),this.effectElements.push(a)}function GroupEffect(t,e){this.init(t,e)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var r,i=this.data.ef.length,s,a=this.data.ef;for(r=0;r<i;r+=1){switch(s=null,a[r].ty){case 0:s=new SliderEffect(a[r],e,this);break;case 1:s=new AngleEffect(a[r],e,this);break;case 2:s=new ColorEffect(a[r],e,this);break;case 3:s=new PointEffect(a[r],e,this);break;case 4:case 7:s=new CheckboxEffect(a[r],e,this);break;case 10:s=new LayerIndexEffect(a[r],e,this);break;case 11:s=new MaskIndexEffect(a[r],e,this);break;case 5:s=new EffectsManager(a[r],e);break;default:s=new NoValueEffect(a[r]);break}s&&this.effectElements.push(s)}};function BaseElement(){}BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var e=0,r=this.data.masksProperties.length;e<r;){if(this.data.masksProperties[e].mode!=="n"&&this.data.masksProperties[e].cl!==!1)return!0;e+=1}return!1},initExpressions:function(){var e=getExpressionInterfaces();if(e){var r=e("layer"),i=e("effects"),s=e("shape"),a=e("text"),o=e("comp");this.layerInterface=r(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var c=i.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(c),this.data.ty===0||this.data.xt?this.compInterface=o(this):this.data.ty===4?(this.layerInterface.shapeInterface=s(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):this.data.ty===5&&(this.layerInterface.textInterface=a(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var e=getBlendMode(this.data.bm),r=this.baseElement||this.layerElement;r.style["mix-blend-mode"]=e},initBaseData:function(e,r,i){this.globalData=r,this.comp=i,this.data=e,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}};function FrameElement(){}FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(e,r){var i,s=this.dynamicProperties.length;for(i=0;i<s;i+=1)(r||this._isParent&&this.dynamicProperties[i].propType==="transform")&&(this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&this.dynamicProperties.push(e)}};function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData};function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var i=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(i),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(t){var e,r=this.layers.length,i;for(this.completeLayers=!0,e=r-1;e>=0;e-=1)this.elements[e]||(i=this.layers[e],i.ip-i.st<=t-this.layers[e].st&&i.op-i.st>t-this.layers[e].st&&this.buildItem(e)),this.completeLayers=this.elements[e]?this.completeLayers:!1;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t);default:return this.createNull(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){this.completeLayers=!1;var e,r=t.length,i,s=this.layers.length;for(e=0;e<r;e+=1)for(i=0;i<s;){if(this.layers[i].id===t[e].id){this.layers[i]=t[e];break}i+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var i=this.elements,s=this.layers,a=0,o=s.length;a<o;)s[a].ind==e&&(!i[a]||i[a]===!0?(this.buildItem(a),this.addPendingElement(t)):(r.push(i[a]),i[a].setAsParent(),s[a].parent!==void 0?this.buildElementParenting(t,s[a].parent,r):t.setHierarchy(r))),a+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e]);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e=t.shift(),r;if(typeof e=="number")r=this.elements[e];else{var i,s=this.elements.length;for(i=0;i<s;i+=1)if(this.elements[i].data.nm===e){r=this.elements[i];break}}return t.length===0?r:r.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}TransformElement.prototype={initTransform:function(){var e=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:e,localMat:e,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var e,r=this.finalTransform.mat,i=0,s=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;i<s;){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}i+=1}if(this.finalTransform._matMdf)for(e=this.finalTransform.mProp.v.props,r.cloneFromProps(e),i=0;i<s;i+=1)r.multiply(this.hierarchy[i].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var e=0,r=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;e<r;)this.localTransforms[e]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[e]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),e+=1;if(this.finalTransform._localMatMdf){var i=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(i),e=1;e<r;e+=1){var s=this.localTransforms[e].matrix;i.multiply(s)}i.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var a=this.finalTransform.localOpacity;for(e=0;e<r;e+=1)a*=this.localTransforms[e].opacity*.01;this.finalTransform.localOpacity=a}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var e=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(e.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var r=0,i=e.length;for(r=0;r<i;r+=1)this.localTransforms.push(e[r])}}},globalToLocal:function(e){var r=[];r.push(this.finalTransform);for(var i=!0,s=this.comp;i;)s.finalTransform?(s.data.hasMask&&r.splice(0,0,s.finalTransform),s=s.comp):i=!1;var a,o=r.length,c;for(a=0;a<o;a+=1)c=r[a].mat.applyToPointArray(0,0,0),e=[e[0]-c[0],e[1]-c[1],0];return e},mHelper:new Matrix};function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var i=this.globalData.defs,s,a=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(a),this.solidPath="";var o,c=this.masksProperties,h=0,d=[],S,A,v=createElementID(),C,x,b,F,y="clipPath",g="clip-path";for(s=0;s<a;s+=1)if((c[s].mode!=="a"&&c[s].mode!=="n"||c[s].inv||c[s].o.k!==100||c[s].o.x)&&(y="mask",g="mask"),(c[s].mode==="s"||c[s].mode==="i")&&h===0?(C=createNS("rect"),C.setAttribute("fill","#ffffff"),C.setAttribute("width",this.element.comp.data.w||0),C.setAttribute("height",this.element.comp.data.h||0),d.push(C)):C=null,o=createNS("path"),c[s].mode==="n")this.viewData[s]={op:PropertyFactory.getProp(this.element,c[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,c[s],3),elem:o,lastPath:""},i.appendChild(o);else{h+=1,o.setAttribute("fill",c[s].mode==="s"?"#000000":"#ffffff"),o.setAttribute("clip-rule","nonzero");var u;if(c[s].x.k!==0?(y="mask",g="mask",F=PropertyFactory.getProp(this.element,c[s].x,0,null,this.element),u=createElementID(),x=createNS("filter"),x.setAttribute("id",u),b=createNS("feMorphology"),b.setAttribute("operator","erode"),b.setAttribute("in","SourceGraphic"),b.setAttribute("radius","0"),x.appendChild(b),i.appendChild(x),o.setAttribute("stroke",c[s].mode==="s"?"#000000":"#ffffff")):(b=null,F=null),this.storedData[s]={elem:o,x:F,expan:b,lastPath:"",lastOperator:"",filterId:u,lastRadius:0},c[s].mode==="i"){A=d.length;var P=createNS("g");for(S=0;S<A;S+=1)P.appendChild(d[S]);var T=createNS("mask");T.setAttribute("mask-type","alpha"),T.setAttribute("id",v+"_"+h),T.appendChild(o),i.appendChild(T),P.setAttribute("mask","url("+getLocationHref()+"#"+v+"_"+h+")"),d.length=0,d.push(P)}else d.push(o);c[s].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[s]={elem:o,lastPath:"",op:PropertyFactory.getProp(this.element,c[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,c[s],3),invRect:C},this.viewData[s].prop.k||this.drawPath(c[s],this.viewData[s].prop.v,this.viewData[s])}for(this.maskElement=createNS(y),a=d.length,s=0;s<a;s+=1)this.maskElement.appendChild(d[s]);h>0&&(this.maskElement.setAttribute("id",v),this.element.maskedElement.setAttribute(g,"url("+getLocationHref()+"#"+v+")"),i.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e=this.element.finalTransform.mat,r,i=this.masksProperties.length;for(r=0;r<i;r+=1)if((this.viewData[r].prop._mdf||t)&&this.drawPath(this.masksProperties[r],this.viewData[r].prop.v,this.viewData[r]),(this.viewData[r].op._mdf||t)&&this.viewData[r].elem.setAttribute("fill-opacity",this.viewData[r].op.v),this.masksProperties[r].mode!=="n"&&(this.viewData[r].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[r].invRect.setAttribute("transform",e.getInverseMatrix().to2dCSS()),this.storedData[r].x&&(this.storedData[r].x._mdf||t))){var s=this.storedData[r].expan;this.storedData[r].x.v<0?(this.storedData[r].lastOperator!=="erode"&&(this.storedData[r].lastOperator="erode",this.storedData[r].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[r].filterId+")")),s.setAttribute("radius",-this.storedData[r].x.v)):(this.storedData[r].lastOperator!=="dilate"&&(this.storedData[r].lastOperator="dilate",this.storedData[r].elem.setAttribute("filter",null)),this.storedData[r].elem.setAttribute("stroke-width",this.storedData[r].x.v*2))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,t+=" h-"+this.globalData.compSize.w,t+=" v-"+this.globalData.compSize.h+" ",t},MaskElement.prototype.drawPath=function(t,e,r){var i=" M"+e.v[0][0]+","+e.v[0][1],s,a;for(a=e._length,s=1;s<a;s+=1)i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[s][0]+","+e.i[s][1]+" "+e.v[s][0]+","+e.v[s][1];if(e.c&&a>1&&(i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==i){var o="";r.elem&&(e.c&&(o=t.inv?this.solidPath+i:i),r.elem.setAttribute("d",o)),r.lastPath=i}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory=function(){var t={};t.createFilter=e,t.createAlphaToLuminanceFilter=r;function e(i,s){var a=createNS("filter");return a.setAttribute("id",i),s!==!0&&(a.setAttribute("filterUnits","objectBoundingBox"),a.setAttribute("x","0%"),a.setAttribute("y","0%"),a.setAttribute("width","100%"),a.setAttribute("height","100%")),a}function r(){var i=createNS("feColorMatrix");return i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),i}return t}(),featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:typeof OffscreenCanvas<"u"};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r="SourceGraphic",i=t.data.ef?t.data.ef.length:0,s=createElementID(),a=filtersFactory.createFilter(s,!0),o=0;this.filters=[];var c;for(e=0;e<i;e+=1){c=null;var h=t.data.ef[e].ty;if(registeredEffects$1[h]){var d=registeredEffects$1[h].effect;c=new d(a,t.effectsManager.effectElements[e],t,idPrefix+o,r),r=idPrefix+o,registeredEffects$1[h].countsAsEffect&&(o+=1)}c&&this.filters.push(c)}o&&(t.globalData.defs.appendChild(a),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+s+")")),this.filters.length&&t.addRenderableComponent(this)}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var e=null;if(this.data.td){this.matteMasks={};var r=createNS("g");r.setAttribute("id",this.layerId),r.appendChild(this.layerElement),e=r,this.globalData.defs.appendChild(r)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),e=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.ty===0&&!this.data.hd){var i=createNS("clipPath"),s=createNS("path");s.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var a=createElementID();if(i.setAttribute("id",a),i.appendChild(s),this.globalData.defs.appendChild(i),this.checkMasks()){var o=createNS("g");o.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")"),o.appendChild(this.layerElement),this.transformedElement=o,e?e.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")")}this.data.bm!==0&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(e){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[e]){var r=this.layerId+"_"+e,i,s,a,o;if(e===1||e===3){var c=createNS("mask");c.setAttribute("id",r),c.setAttribute("mask-type",e===3?"luminance":"alpha"),a=createNS("use"),a.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),c.appendChild(a),this.globalData.defs.appendChild(c),!featureSupport.maskType&&e===1&&(c.setAttribute("mask-type","luminance"),i=createElementID(),s=filtersFactory.createFilter(i),this.globalData.defs.appendChild(s),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),o=createNS("g"),o.appendChild(a),c.appendChild(o),o.setAttribute("filter","url("+getLocationHref()+"#"+i+")"))}else if(e===2){var h=createNS("mask");h.setAttribute("id",r),h.setAttribute("mask-type","alpha");var d=createNS("g");h.appendChild(d),i=createElementID(),s=filtersFactory.createFilter(i);var S=createNS("feComponentTransfer");S.setAttribute("in","SourceGraphic"),s.appendChild(S);var A=createNS("feFuncA");A.setAttribute("type","table"),A.setAttribute("tableValues","1.0 0.0"),S.appendChild(A),this.globalData.defs.appendChild(s);var v=createNS("rect");v.setAttribute("width",this.comp.data.w),v.setAttribute("height",this.comp.data.h),v.setAttribute("x","0"),v.setAttribute("y","0"),v.setAttribute("fill","#ffffff"),v.setAttribute("opacity","0"),d.setAttribute("filter","url("+getLocationHref()+"#"+i+")"),d.appendChild(v),a=createNS("use"),a.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),d.appendChild(a),featureSupport.maskType||(h.setAttribute("mask-type","luminance"),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),o=createNS("g"),d.appendChild(v),o.appendChild(this.layerElement),d.appendChild(o)),this.globalData.defs.appendChild(h)}this.matteMasks[e]=r}return this.matteMasks[e]},setMatte:function(e){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+e+")")}};function HierarchyElement(){}HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(e){this.hierarchy=e},setAsParent:function(){this._isParent=!0},checkParenting:function(){this.data.parent!==void 0&&this.comp.buildElementParenting(this,this.data.parent,[])}};function RenderableDOMElement(){}(function(){var t={initElement:function(r,i,s){this.initFrame(),this.initBaseData(r,i,s),this.initTransform(r,i,s),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var r=this.baseElement||this.layerElement;r.style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var r=this.baseElement||this.layerElement;r.style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(r){this._mdf=!1,this.prepareRenderableFrame(r),this.prepareProperties(r,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}};extendPrototype([RenderableElement,createProxyFunction(t)],RenderableDOMElement)})();function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect};function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function(e){var r,i=this.shapeModifiers.length;for(r=0;r<i;r+=1)this.shapeModifiers[r].addShape(e)},isShapeInAnimatedModifiers:function(e){for(var r=0,i=this.shapeModifiers.length;r<i;)if(this.shapeModifiers[r].isAnimatedWithShape(e))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var e,r=this.shapes.length;for(e=0;e<r;e+=1)this.shapes[e].sh.reset();r=this.shapeModifiers.length;var i;for(e=r-1;e>=0&&(i=this.shapeModifiers[e].processShapes(this._isFirstFrame),!i);e-=1);}},searchProcessedElement:function(e){for(var r=this.processedElements,i=0,s=r.length;i<s;){if(r[i].elem===e)return r[i].pos;i+=1}return 0},addProcessedElement:function(e,r){for(var i=this.processedElements,s=i.length;s;)if(s-=1,i[s].elem===e){i[s].pos=r;return}i.push(new ProcessedElement(e,r))},prepareFrame:function(e){this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var i=0,s=t.length;i<s;){if(t[i].mProps.dynamicProperties.length){this._isAnimated=!0;break}i+=1}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0};function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=t.hd===!0,this.pElem=createNS("path"),this.msElem=null}SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1};function DashProperty(t,e,r,i){this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(i);var s,a=e.length||0,o;for(s=0;s<a;s+=1)o=PropertyFactory.getProp(t,e[s].v,0,0,this),this.k=o.k||this.k,this.dataProps[s]={n:e[s].n,p:o};this.k||this.getValue(!0),this._isAnimated=this.k}DashProperty.prototype.getValue=function(t){if(!(this.elem.globalData.frameId===this.frameId&&!t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for(this.renderer==="svg"&&(this.dashStr=""),e=0;e<r;e+=1)this.dataProps[e].n!=="o"?this.renderer==="svg"?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",e.p*4);var i=e.k.k[0].s?e.k.k[0].s.length-e.p*4:e.k.k.length-e.p*4;this.o=createTypedArray("float32",i),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=i,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,i=this.o.length/2,s;r<i;){if(s=Math.abs(t[r*4]-t[e*4+r*2]),s>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r=this.data.p*4,i,s;for(e=0;e<r;e+=1)i=e%4===0?100:255,s=Math.round(this.prop.v[e]*i),this.c[e]!==s&&(this.c[e]=s,this._cmdf=!t);if(this.o.length)for(r=this.prop.v.length,e=this.data.p*4;e<r;e+=1)i=e%2===0?100:1,s=e%2===0?Math.round(this.prop.v[e]*100):this.prop.v[e],this.o[e-this.data.p*4]!==s&&(this.o[e-this.data.p*4]=s,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),i=createNS(e.t===1?"linearGradient":"radialGradient");i.setAttribute("id",r),i.setAttribute("spreadMethod","pad"),i.setAttribute("gradientUnits","userSpaceOnUse");var s=[],a,o,c;for(c=e.g.p*4,o=0;o<c;o+=4)a=createNS("stop"),i.appendChild(a),s.push(a);t.setAttribute(e.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=i,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,i,s,a=createNS("mask"),o=createNS("path");a.appendChild(o);var c=createElementID(),h=createElementID();a.setAttribute("id",h);var d=createNS(t.t===1?"linearGradient":"radialGradient");d.setAttribute("id",c),d.setAttribute("spreadMethod","pad"),d.setAttribute("gradientUnits","userSpaceOnUse"),s=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var S=this.stops;for(i=t.g.p*4;i<s;i+=2)r=createNS("stop"),r.setAttribute("stop-color","rgb(255,255,255)"),d.appendChild(r),S.push(r);o.setAttribute(t.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+c+")"),t.ty==="gs"&&(o.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),t.lj===1&&o.setAttribute("stroke-miterlimit",t.ml)),this.of=d,this.ms=a,this.ost=S,this.maskId=h,e.msElem=o}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}var buildShapeString=function(e,r,i,s){if(r===0)return"";var a=e.o,o=e.i,c=e.v,h,d=" M"+s.applyToPointStringified(c[0][0],c[0][1]);for(h=1;h<r;h+=1)d+=" C"+s.applyToPointStringified(a[h-1][0],a[h-1][1])+" "+s.applyToPointStringified(o[h][0],o[h][1])+" "+s.applyToPointStringified(c[h][0],c[h][1]);return i&&r&&(d+=" C"+s.applyToPointStringified(a[h-1][0],a[h-1][1])+" "+s.applyToPointStringified(o[0][0],o[0][1])+" "+s.applyToPointStringified(c[0][0],c[0][1]),d+="z"),d},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix,r={createRenderFunction:i};function i(A){switch(A.ty){case"fl":return c;case"gf":return d;case"gs":return h;case"st":return S;case"sh":case"el":case"rc":case"sr":return o;case"tr":return s;case"no":return a;default:return null}}function s(A,v,C){(C||v.transform.op._mdf)&&v.transform.container.setAttribute("opacity",v.transform.op.v),(C||v.transform.mProps._mdf)&&v.transform.container.setAttribute("transform",v.transform.mProps.v.to2dCSS())}function a(){}function o(A,v,C){var x,b,F,y,g,u,P=v.styles.length,T=v.lvl,w,V,L,B;for(u=0;u<P;u+=1){if(y=v.sh._mdf||C,v.styles[u].lvl<T){for(V=e.reset(),L=T-v.styles[u].lvl,B=v.transformers.length-1;!y&&L>0;)y=v.transformers[B].mProps._mdf||y,L-=1,B-=1;if(y)for(L=T-v.styles[u].lvl,B=v.transformers.length-1;L>0;)V.multiply(v.transformers[B].mProps.v),L-=1,B-=1}else V=t;if(w=v.sh.paths,b=w._length,y){for(F="",x=0;x<b;x+=1)g=w.shapes[x],g&&g._length&&(F+=buildShapeString(g,g._length,g.c,V));v.caches[u]=F}else F=v.caches[u];v.styles[u].d+=A.hd===!0?"":F,v.styles[u]._mdf=y||v.styles[u]._mdf}}function c(A,v,C){var x=v.style;(v.c._mdf||C)&&x.pElem.setAttribute("fill","rgb("+bmFloor(v.c.v[0])+","+bmFloor(v.c.v[1])+","+bmFloor(v.c.v[2])+")"),(v.o._mdf||C)&&x.pElem.setAttribute("fill-opacity",v.o.v)}function h(A,v,C){d(A,v,C),S(A,v,C)}function d(A,v,C){var x=v.gf,b=v.g._hasOpacity,F=v.s.v,y=v.e.v;if(v.o._mdf||C){var g=A.ty==="gf"?"fill-opacity":"stroke-opacity";v.style.pElem.setAttribute(g,v.o.v)}if(v.s._mdf||C){var u=A.t===1?"x1":"cx",P=u==="x1"?"y1":"cy";x.setAttribute(u,F[0]),x.setAttribute(P,F[1]),b&&!v.g._collapsable&&(v.of.setAttribute(u,F[0]),v.of.setAttribute(P,F[1]))}var T,w,V,L;if(v.g._cmdf||C){T=v.cst;var B=v.g.c;for(V=T.length,w=0;w<V;w+=1)L=T[w],L.setAttribute("offset",B[w*4]+"%"),L.setAttribute("stop-color","rgb("+B[w*4+1]+","+B[w*4+2]+","+B[w*4+3]+")")}if(b&&(v.g._omdf||C)){var W=v.g.o;for(v.g._collapsable?T=v.cst:T=v.ost,V=T.length,w=0;w<V;w+=1)L=T[w],v.g._collapsable||L.setAttribute("offset",W[w*2]+"%"),L.setAttribute("stop-opacity",W[w*2+1])}if(A.t===1)(v.e._mdf||C)&&(x.setAttribute("x2",y[0]),x.setAttribute("y2",y[1]),b&&!v.g._collapsable&&(v.of.setAttribute("x2",y[0]),v.of.setAttribute("y2",y[1])));else{var z;if((v.s._mdf||v.e._mdf||C)&&(z=Math.sqrt(Math.pow(F[0]-y[0],2)+Math.pow(F[1]-y[1],2)),x.setAttribute("r",z),b&&!v.g._collapsable&&v.of.setAttribute("r",z)),v.e._mdf||v.h._mdf||v.a._mdf||C){z||(z=Math.sqrt(Math.pow(F[0]-y[0],2)+Math.pow(F[1]-y[1],2)));var O=Math.atan2(y[1]-F[1],y[0]-F[0]),H=v.h.v;H>=1?H=.99:H<=-1&&(H=-.99);var j=z*H,G=Math.cos(O+v.a.v)*j+F[0],M=Math.sin(O+v.a.v)*j+F[1];x.setAttribute("fx",G),x.setAttribute("fy",M),b&&!v.g._collapsable&&(v.of.setAttribute("fx",G),v.of.setAttribute("fy",M))}}}function S(A,v,C){var x=v.style,b=v.d;b&&(b._mdf||C)&&b.dashStr&&(x.pElem.setAttribute("stroke-dasharray",b.dashStr),x.pElem.setAttribute("stroke-dashoffset",b.dashoffset[0])),v.c&&(v.c._mdf||C)&&x.pElem.setAttribute("stroke","rgb("+bmFloor(v.c.v[0])+","+bmFloor(v.c.v[1])+","+bmFloor(v.c.v[2])+")"),(v.o._mdf||C)&&x.pElem.setAttribute("stroke-opacity",v.o.v),(v.w._mdf||C)&&(x.pElem.setAttribute("stroke-width",v.w.v),x.msElem&&x.msElem.setAttribute("stroke-width",v.w.v))}return r}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e=this.shapes.length,r,i,s=this.stylesList.length,a,o=[],c=!1;for(i=0;i<s;i+=1){for(a=this.stylesList[i],c=!1,o.length=0,t=0;t<e;t+=1)r=this.shapes[t],r.styles.indexOf(a)!==-1&&(o.push(r),c=r._isAnimated||c);o.length>1&&c&&this.setShapesAsAnimated(o)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,i=new SVGStyleData(t,e),s=i.pElem;if(t.ty==="st")r=new SVGStrokeStyleData(this,t,i);else if(t.ty==="fl")r=new SVGFillStyleData(this,t,i);else if(t.ty==="gf"||t.ty==="gs"){var a=t.ty==="gf"?SVGGradientFillStyleData:SVGGradientStrokeStyleData;r=new a(this,t,i),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),s.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))}else t.ty==="no"&&(r=new SVGNoStyleData(this,t,i));return(t.ty==="st"||t.ty==="gs")&&(s.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),s.setAttribute("fill-opacity","0"),t.lj===1&&s.setAttribute("stroke-miterlimit",t.ml)),t.r===2&&s.setAttribute("fill-rule","evenodd"),t.ln&&s.setAttribute("id",t.ln),t.cl&&s.setAttribute("class",t.cl),t.bm&&(s.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(i),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),i=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var i=4;t.ty==="rc"?i=5:t.ty==="el"?i=6:t.ty==="sr"&&(i=7);var s=ShapePropertyFactory.getShapeProp(this,t,i,this),a=new SVGShapeData(e,r,s);return this.shapes.push(a),this.addShapeToModifiers(a),this.addToAnimatedContents(t,a),a},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,i=this.animatedContents.length;r<i;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e=t.styles,r,i=this.stylesList.length;for(r=0;r<i;r+=1)this.stylesList[r].closed||e.push(this.stylesList[r])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,i,s,a,o){var c=[].concat(a),h,d=t.length-1,S,A,v=[],C=[],x,b,F;for(h=d;h>=0;h-=1){if(F=this.searchProcessedElement(t[h]),F?e[h]=r[F-1]:t[h]._render=o,t[h].ty==="fl"||t[h].ty==="st"||t[h].ty==="gf"||t[h].ty==="gs"||t[h].ty==="no")F?e[h].style.closed=!1:e[h]=this.createStyleElement(t[h],s),t[h]._render&&e[h].style.pElem.parentNode!==i&&i.appendChild(e[h].style.pElem),v.push(e[h].style);else if(t[h].ty==="gr"){if(!F)e[h]=this.createGroupElement(t[h]);else for(A=e[h].it.length,S=0;S<A;S+=1)e[h].prevViewData[S]=e[h].it[S];this.searchShapes(t[h].it,e[h].it,e[h].prevViewData,e[h].gr,s+1,c,o),t[h]._render&&e[h].gr.parentNode!==i&&i.appendChild(e[h].gr)}else t[h].ty==="tr"?(F||(e[h]=this.createTransformElement(t[h],i)),x=e[h].transform,c.push(x)):t[h].ty==="sh"||t[h].ty==="rc"||t[h].ty==="el"||t[h].ty==="sr"?(F||(e[h]=this.createShapeElement(t[h],c,s)),this.setElementStyles(e[h])):t[h].ty==="tm"||t[h].ty==="rd"||t[h].ty==="ms"||t[h].ty==="pb"||t[h].ty==="zz"||t[h].ty==="op"?(F?(b=e[h],b.closed=!1):(b=ShapeModifiers.getModifier(t[h].ty),b.init(this,t[h]),e[h]=b,this.shapeModifiers.push(b)),C.push(b)):t[h].ty==="rp"&&(F?(b=e[h],b.closed=!0):(b=ShapeModifiers.getModifier(t[h].ty),e[h]=b,b.init(this,t,h,e),this.shapeModifiers.push(b),o=!1),C.push(b));this.addProcessedElement(t[h],h+1)}for(d=v.length,h=0;h<d;h+=1)v[h].closed=!0;for(d=C.length,h=0;h<d;h+=1)C[h].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e=this.animatedContents.length,r;for(t=0;t<e;t+=1)r=this.animatedContents[t],(this._isFirstFrame||r.element._isAnimated)&&r.data!==!0&&r.fn(r.data,r.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null};function LetterProps(t,e,r,i,s,a){this.o=t,this.sw=e,this.sc=r,this.fc=i,this.m=s,this.p=a,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!i,m:!0,p:!0}}LetterProps.prototype.update=function(t,e,r,i,s,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var o=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,o=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,o=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,o=!0),this.fc!==i&&(this.fc=i,this._mdf.fc=!0,o=!0),this.m!==s&&(this.m=s,this._mdf.m=!0,o=!0),a.length&&(this.p[0]!==a[0]||this.p[1]!==a[1]||this.p[4]!==a[4]||this.p[5]!==a[5]||this.p[12]!==a[12]||this.p[13]!==a[13])&&(this.p=a,this._mdf.p=!0,o=!0),o};function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(!((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!t)){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return}this.lock=!0,this._mdf=!1;var i,s=this.effectsSequence.length,a=t||this.data.d.k[this.keysIndex].s;for(i=0;i<s;i+=1)r!==this.keysIndex?a=this.effectsSequence[i](a,a.t):a=this.effectsSequence[i](this.currentData,a.t);e!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,i=t.length;r<=i-1&&!(r===i-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e=[],r=0,i=t.length,s,a,o=!1,c=!1,h="";r<i;)o=c,c=!1,s=t.charCodeAt(r),h=t.charAt(r),FontManager.isCombinedCharacter(s)?o=!0:s>=55296&&s<=56319?FontManager.isRegionalFlag(t,r)?h=t.substr(r,14):(a=t.charCodeAt(r+1),a>=56320&&a<=57343&&(FontManager.isModifier(s,a)?(h=t.substr(r,2),o=!0):FontManager.isFlagEmoji(t.substr(r,4))?h=t.substr(r,4):h=t.substr(r,2))):s>56319?(a=t.charCodeAt(r+1),FontManager.isVariationSelector(s)&&(o=!0)):FontManager.isZeroWidthJoiner(s)&&(o=!0,c=!0),o?(e[e.length-1]+=h,o=!1):e.push(h),r+=h.length;return e},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e=this.elem.globalData.fontManager,r=this.data,i=[],s,a,o,c=0,h,d=r.m.g,S=0,A=0,v=0,C=[],x=0,b=0,F,y,g=e.getFontByName(t.f),u,P=0,T=getFontProperties(g);t.fWeight=T.weight,t.fStyle=T.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),a=t.finalText.length,t.finalLineHeight=t.lh;var w=t.tr/1e3*t.finalSize,V;if(t.sz)for(var L=!0,B=t.sz[0],W=t.sz[1],z,O;L;){O=this.buildFinalText(t.t),z=0,x=0,a=O.length,w=t.tr/1e3*t.finalSize;var H=-1;for(s=0;s<a;s+=1)V=O[s].charCodeAt(0),o=!1,O[s]===" "?H=s:(V===13||V===3)&&(x=0,o=!0,z+=t.finalLineHeight||t.finalSize*1.2),e.chars?(u=e.getCharData(O[s],g.fStyle,g.fFamily),P=o?0:u.w*t.finalSize/100):P=e.measureText(O[s],t.f,t.finalSize),x+P>B&&O[s]!==" "?(H===-1?a+=1:s=H,z+=t.finalLineHeight||t.finalSize*1.2,O.splice(s,H===s?1:0,"\r"),H=-1,x=0):(x+=P,x+=w);z+=g.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&W<z?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=O,a=t.finalText.length,L=!1)}x=-w,P=0;var j=0,G;for(s=0;s<a;s+=1)if(o=!1,G=t.finalText[s],V=G.charCodeAt(0),V===13||V===3?(j=0,C.push(x),b=x>b?x:b,x=-2*w,h="",o=!0,v+=1):h=G,e.chars?(u=e.getCharData(G,g.fStyle,e.getFontByName(t.f).fFamily),P=o?0:u.w*t.finalSize/100):P=e.measureText(h,t.f,t.finalSize),G===" "?j+=P+w:(x+=P+w+j,j=0),i.push({l:P,an:P,add:S,n:o,anIndexes:[],val:h,line:v,animatorJustifyOffset:0}),d==2){if(S+=P,h===""||h===" "||s===a-1){for((h===""||h===" ")&&(S-=P);A<=s;)i[A].an=S,i[A].ind=c,i[A].extra=P,A+=1;c+=1,S=0}}else if(d==3){if(S+=P,h===""||s===a-1){for(h===""&&(S-=P);A<=s;)i[A].an=S,i[A].ind=c,i[A].extra=P,A+=1;S=0,c+=1}}else i[c].ind=c,i[c].extra=0,c+=1;if(t.l=i,b=x>b?x:b,C.push(x),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=b,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=C;var M=r.a,I,E;y=M.length;var _,D,R=[];for(F=0;F<y;F+=1){for(I=M[F],I.a.sc&&(t.strokeColorAnim=!0),I.a.sw&&(t.strokeWidthAnim=!0),(I.a.fc||I.a.fh||I.a.fs||I.a.fb)&&(t.fillColorAnim=!0),D=0,_=I.s.b,s=0;s<a;s+=1)E=i[s],E.anIndexes[F]=D,(_==1&&E.val!==""||_==2&&E.val!==""&&E.val!==" "||_==3&&(E.n||E.val==" "||s==a-1)||_==4&&(E.n||s==a-1))&&(I.s.rn===1&&R.push(D),D+=1);r.a[F].s.totalChars=D;var N=-1,Y;if(I.s.rn===1)for(s=0;s<a;s+=1)E=i[s],N!=E.anIndexes[F]&&(N=E.anIndexes[F],Y=R.splice(Math.floor(Math.random()*R.length),1)[0]),E.anIndexes[F]=Y}t.yOffset=t.finalLineHeight||t.finalSize*1.2,t.ls=t.ls||0,t.ascent=g.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=e===void 0?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function i(a,o){this._currentTextLength=-1,this.k=!1,this.data=o,this.elem=a,this.comp=a.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(a),this.s=PropertyFactory.getProp(a,o.s||{k:0},0,0,this),"e"in o?this.e=PropertyFactory.getProp(a,o.e,0,0,this):this.e={v:100},this.o=PropertyFactory.getProp(a,o.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(a,o.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(a,o.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(a,o.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(a,o.a,0,.01,this),this.dynamicProperties.length||this.getValue()}i.prototype={getMult:function(o){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var c=0,h=0,d=1,S=1;this.ne.v>0?c=this.ne.v/100:h=-this.ne.v/100,this.xe.v>0?d=1-this.xe.v/100:S=1+this.xe.v/100;var A=BezierFactory.getBezierEasing(c,h,d,S).get,v=0,C=this.finalS,x=this.finalE,b=this.data.sh;if(b===2)x===C?v=o>=x?1:0:v=t(0,e(.5/(x-C)+(o-C)/(x-C),1)),v=A(v);else if(b===3)x===C?v=o>=x?0:1:v=1-t(0,e(.5/(x-C)+(o-C)/(x-C),1)),v=A(v);else if(b===4)x===C?v=0:(v=t(0,e(.5/(x-C)+(o-C)/(x-C),1)),v<.5?v*=2:v=1-2*(v-.5)),v=A(v);else if(b===5){if(x===C)v=0;else{var F=x-C;o=e(t(0,o+.5-C),x-C);var y=-F/2+o,g=F/2;v=Math.sqrt(1-y*y/(g*g))}v=A(v)}else b===6?(x===C?v=0:(o=e(t(0,o+.5-C),x-C),v=(1+Math.cos(Math.PI+Math.PI*2*o/(x-C)))/2),v=A(v)):(o>=r(C)&&(o-C<0?v=t(0,e(e(x,1)-(C-o),1)):v=t(0,e(x-o,1))),v=A(v));if(this.sm.v!==100){var u=this.sm.v*.01;u===0&&(u=1e-8);var P=.5-u*.5;v<P?v=0:(v=(v-P)/u,v>1&&(v=1))}return v*this.a.v},getValue:function(o){this.iterateDynamicProperties(),this._mdf=o||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,o&&this.data.r===2&&(this.e.v=this._currentTextLength);var c=this.data.r===2?1:100/this.data.totalChars,h=this.o.v/c,d=this.s.v/c+h,S=this.e.v/c+h;if(d>S){var A=d;d=S,S=A}this.finalS=d,this.finalE=S}},extendPrototype([DynamicPropertyContainer],i);function s(a,o,c){return new i(a,o)}return{getTextSelectorProp:s}}();function TextAnimatorDataProperty(t,e,r){var i={propType:!1},s=PropertyFactory.getProp,a=e.a;this.a={r:a.r?s(t,a.r,0,degToRads,r):i,rx:a.rx?s(t,a.rx,0,degToRads,r):i,ry:a.ry?s(t,a.ry,0,degToRads,r):i,sk:a.sk?s(t,a.sk,0,degToRads,r):i,sa:a.sa?s(t,a.sa,0,degToRads,r):i,s:a.s?s(t,a.s,1,.01,r):i,a:a.a?s(t,a.a,1,0,r):i,o:a.o?s(t,a.o,0,.01,r):i,p:a.p?s(t,a.p,1,0,r):i,sw:a.sw?s(t,a.sw,0,0,r):i,sc:a.sc?s(t,a.sc,1,0,r):i,fc:a.fc?s(t,a.fc,1,0,r):i,fh:a.fh?s(t,a.fh,0,0,r):i,fs:a.fs?s(t,a.fs,0,.01,r):i,fb:a.fb?s(t,a.fb,0,.01,r):i,t:a.t?s(t,a.t,0,0,r):i},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}TextAnimatorProperty.prototype.searchProperties=function(){var t,e=this._textData.a.length,r,i=PropertyFactory.getProp;for(t=0;t<e;t+=1)r=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,r,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:i(this._elem,this._textData.p.a,0,0,this),f:i(this._elem,this._textData.p.f,0,0,this),l:i(this._elem,this._textData.p.l,0,0,this),r:i(this._elem,this._textData.p.r,0,0,this),p:i(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=i(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,!(!this._mdf&&!this._isFirstFrame&&!e&&(!this._hasMaskedPath||!this._pathData.m._mdf))){this._isFirstFrame=!1;var r=this._moreOptions.alignment.v,i=this._animatorsData,s=this._textData,a=this.mHelper,o=this._renderType,c=this.renderedLetters.length,h,d,S,A,v=t.l,C,x,b,F,y,g,u,P,T,w,V,L,B,W,z;if(this._hasMaskedPath){if(z=this._pathData.m,!this._pathData.n||this._pathData._mdf){var O=z.v;this._pathData.r.v&&(O=O.reverse()),C={tLength:0,segments:[]},A=O._length-1;var H;for(L=0,S=0;S<A;S+=1)H=bez.buildBezierData(O.v[S],O.v[S+1],[O.o[S][0]-O.v[S][0],O.o[S][1]-O.v[S][1]],[O.i[S+1][0]-O.v[S+1][0],O.i[S+1][1]-O.v[S+1][1]]),C.tLength+=H.segmentLength,C.segments.push(H),L+=H.segmentLength;S=A,z.v.c&&(H=bez.buildBezierData(O.v[S],O.v[0],[O.o[S][0]-O.v[S][0],O.o[S][1]-O.v[S][1]],[O.i[0][0]-O.v[0][0],O.i[0][1]-O.v[0][1]]),C.tLength+=H.segmentLength,C.segments.push(H),L+=H.segmentLength),this._pathData.pi=C}if(C=this._pathData.pi,x=this._pathData.f.v,u=0,g=1,F=0,y=!0,w=C.segments,x<0&&z.v.c)for(C.tLength<Math.abs(x)&&(x=-Math.abs(x)%C.tLength),u=w.length-1,T=w[u].points,g=T.length-1;x<0;)x+=T[g].partialLength,g-=1,g<0&&(u-=1,T=w[u].points,g=T.length-1);T=w[u].points,P=T[g-1],b=T[g],V=b.partialLength}A=v.length,h=0,d=0;var j=t.finalSize*1.2*.714,G=!0,M,I,E,_,D;_=i.length;var R,N=-1,Y,X,Z,J=x,U=u,tt=g,nt=-1,et,Q,it,K,$,ht,ct,lt,ot="",ft=this.defaultPropsArray,pt;if(t.j===2||t.j===1){var rt=0,ut=0,mt=t.j===2?-.5:-1,st=0,dt=!0;for(S=0;S<A;S+=1)if(v[S].n){for(rt&&(rt+=ut);st<S;)v[st].animatorJustifyOffset=rt,st+=1;rt=0,dt=!0}else{for(E=0;E<_;E+=1)M=i[E].a,M.t.propType&&(dt&&t.j===2&&(ut+=M.t.v*mt),I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),R.length?rt+=M.t.v*R[0]*mt:rt+=M.t.v*R*mt);dt=!1}for(rt&&(rt+=ut);st<S;)v[st].animatorJustifyOffset=rt,st+=1}for(S=0;S<A;S+=1){if(a.reset(),et=1,v[S].n)h=0,d+=t.yOffset,d+=G?1:0,x=J,G=!1,this._hasMaskedPath&&(u=U,g=tt,T=w[u].points,P=T[g-1],b=T[g],V=b.partialLength,F=0),ot="",lt="",ht="",pt="",ft=this.defaultPropsArray;else{if(this._hasMaskedPath){if(nt!==v[S].line){switch(t.j){case 1:x+=L-t.lineWidths[v[S].line];break;case 2:x+=(L-t.lineWidths[v[S].line])/2;break}nt=v[S].line}N!==v[S].ind&&(v[N]&&(x+=v[N].extra),x+=v[S].an/2,N=v[S].ind),x+=r[0]*v[S].an*.005;var at=0;for(E=0;E<_;E+=1)M=i[E].a,M.p.propType&&(I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),R.length?at+=M.p.v[0]*R[0]:at+=M.p.v[0]*R),M.a.propType&&(I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),R.length?at+=M.a.v[0]*R[0]:at+=M.a.v[0]*R);for(y=!0,this._pathData.a.v&&(x=v[0].an*.5+(L-this._pathData.f.v-v[0].an*.5-v[v.length-1].an*.5)*N/(A-1),x+=this._pathData.f.v);y;)F+V>=x+at||!T?(B=(x+at-F)/b.partialLength,X=P.point[0]+(b.point[0]-P.point[0])*B,Z=P.point[1]+(b.point[1]-P.point[1])*B,a.translate(-r[0]*v[S].an*.005,-(r[1]*j)*.01),y=!1):T&&(F+=b.partialLength,g+=1,g>=T.length&&(g=0,u+=1,w[u]?T=w[u].points:z.v.c?(g=0,u=0,T=w[u].points):(F-=b.partialLength,T=null)),T&&(P=b,b=T[g],V=b.partialLength));Y=v[S].an/2-v[S].add,a.translate(-Y,0,0)}else Y=v[S].an/2-v[S].add,a.translate(-Y,0,0),a.translate(-r[0]*v[S].an*.005,-r[1]*j*.01,0);for(E=0;E<_;E+=1)M=i[E].a,M.t.propType&&(I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),(h!==0||t.j!==0)&&(this._hasMaskedPath?R.length?x+=M.t.v*R[0]:x+=M.t.v*R:R.length?h+=M.t.v*R[0]:h+=M.t.v*R));for(t.strokeWidthAnim&&(it=t.sw||0),t.strokeColorAnim&&(t.sc?Q=[t.sc[0],t.sc[1],t.sc[2]]:Q=[0,0,0]),t.fillColorAnim&&t.fc&&(K=[t.fc[0],t.fc[1],t.fc[2]]),E=0;E<_;E+=1)M=i[E].a,M.a.propType&&(I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),R.length?a.translate(-M.a.v[0]*R[0],-M.a.v[1]*R[1],M.a.v[2]*R[2]):a.translate(-M.a.v[0]*R,-M.a.v[1]*R,M.a.v[2]*R));for(E=0;E<_;E+=1)M=i[E].a,M.s.propType&&(I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),R.length?a.scale(1+(M.s.v[0]-1)*R[0],1+(M.s.v[1]-1)*R[1],1):a.scale(1+(M.s.v[0]-1)*R,1+(M.s.v[1]-1)*R,1));for(E=0;E<_;E+=1){if(M=i[E].a,I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),M.sk.propType&&(R.length?a.skewFromAxis(-M.sk.v*R[0],M.sa.v*R[1]):a.skewFromAxis(-M.sk.v*R,M.sa.v*R)),M.r.propType&&(R.length?a.rotateZ(-M.r.v*R[2]):a.rotateZ(-M.r.v*R)),M.ry.propType&&(R.length?a.rotateY(M.ry.v*R[1]):a.rotateY(M.ry.v*R)),M.rx.propType&&(R.length?a.rotateX(M.rx.v*R[0]):a.rotateX(M.rx.v*R)),M.o.propType&&(R.length?et+=(M.o.v*R[0]-et)*R[0]:et+=(M.o.v*R-et)*R),t.strokeWidthAnim&&M.sw.propType&&(R.length?it+=M.sw.v*R[0]:it+=M.sw.v*R),t.strokeColorAnim&&M.sc.propType)for($=0;$<3;$+=1)R.length?Q[$]+=(M.sc.v[$]-Q[$])*R[0]:Q[$]+=(M.sc.v[$]-Q[$])*R;if(t.fillColorAnim&&t.fc){if(M.fc.propType)for($=0;$<3;$+=1)R.length?K[$]+=(M.fc.v[$]-K[$])*R[0]:K[$]+=(M.fc.v[$]-K[$])*R;M.fh.propType&&(R.length?K=addHueToRGB(K,M.fh.v*R[0]):K=addHueToRGB(K,M.fh.v*R)),M.fs.propType&&(R.length?K=addSaturationToRGB(K,M.fs.v*R[0]):K=addSaturationToRGB(K,M.fs.v*R)),M.fb.propType&&(R.length?K=addBrightnessToRGB(K,M.fb.v*R[0]):K=addBrightnessToRGB(K,M.fb.v*R))}}for(E=0;E<_;E+=1)M=i[E].a,M.p.propType&&(I=i[E].s,R=I.getMult(v[S].anIndexes[E],s.a[E].s.totalChars),this._hasMaskedPath?R.length?a.translate(0,M.p.v[1]*R[0],-M.p.v[2]*R[1]):a.translate(0,M.p.v[1]*R,-M.p.v[2]*R):R.length?a.translate(M.p.v[0]*R[0],M.p.v[1]*R[1],-M.p.v[2]*R[2]):a.translate(M.p.v[0]*R,M.p.v[1]*R,-M.p.v[2]*R));if(t.strokeWidthAnim&&(ht=it<0?0:it),t.strokeColorAnim&&(ct="rgb("+Math.round(Q[0]*255)+","+Math.round(Q[1]*255)+","+Math.round(Q[2]*255)+")"),t.fillColorAnim&&t.fc&&(lt="rgb("+Math.round(K[0]*255)+","+Math.round(K[1]*255)+","+Math.round(K[2]*255)+")"),this._hasMaskedPath){if(a.translate(0,-t.ls),a.translate(0,r[1]*j*.01+d,0),this._pathData.p.v){W=(b.point[1]-P.point[1])/(b.point[0]-P.point[0]);var vt=Math.atan(W)*180/Math.PI;b.point[0]<P.point[0]&&(vt+=180),a.rotate(-vt*Math.PI/180)}a.translate(X,Z,0),x-=r[0]*v[S].an*.005,v[S+1]&&N!==v[S+1].ind&&(x+=v[S].an/2,x+=t.tr*.001*t.finalSize)}else{switch(a.translate(h,d,0),t.ps&&a.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:a.translate(v[S].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[v[S].line]),0,0);break;case 2:a.translate(v[S].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[v[S].line])/2,0,0);break}a.translate(0,-t.ls),a.translate(Y,0,0),a.translate(r[0]*v[S].an*.005,r[1]*j*.01,0),h+=v[S].l+t.tr*.001*t.finalSize}o==="html"?ot=a.toCSS():o==="svg"?ot=a.to2dCSS():ft=[a.props[0],a.props[1],a.props[2],a.props[3],a.props[4],a.props[5],a.props[6],a.props[7],a.props[8],a.props[9],a.props[10],a.props[11],a.props[12],a.props[13],a.props[14],a.props[15]],pt=et}c<=S?(D=new LetterProps(pt,ht,ct,lt,ot,ft),this.renderedLetters.push(D),c+=1,this.lettersChangedFlag=!0):(D=this.renderedLetters[S],this.lettersChangedFlag=D.update(pt,ht,ct,lt,ot,ft)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,i=e.length,s,a="";for(r=0;r<i;r+=1)e[r].ty==="sh"&&(s=e[r].ks.k,a+=buildShapeString(s,s.i.length,!0,t));return a},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,i,s){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0);break}e.translate(i,s,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(t[0]*255)+","+Math.round(t[1]*255)+","+Math.round(t[2]*255)+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,i=[],s="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(i.push(s),s=""):s+=t[e],e+=1;return i.push(s),i},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var i=r.it[r.it.length-1];i.s&&(i.s.k[0]=e,i.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var t,e,r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var i=this.globalData.fontManager.getFontByName(r.f);if(i.fClass)this.layerElement.setAttribute("class",i.fClass);else{this.layerElement.setAttribute("font-family",i.fFamily);var s=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",s)}this.layerElement.setAttribute("aria-label",r.t);var o=r.l||[],c=!!this.globalData.fontManager.chars;e=o.length;var h,d=this.mHelper,S="",A=this.data.singleShape,v=0,C=0,x=!0,b=r.tr*.001*r.finalSize;if(A&&!c&&!r.sz){var F=this.textContainer,y="start";switch(r.j){case 1:y="end";break;case 2:y="middle";break;default:y="start";break}F.setAttribute("text-anchor",y),F.setAttribute("letter-spacing",b);var g=this.buildTextContents(r.finalText);for(e=g.length,C=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)h=this.textSpans[t].span||createNS("tspan"),h.textContent=g[t],h.setAttribute("x",0),h.setAttribute("y",C),h.style.display="inherit",F.appendChild(h),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=h,C+=r.finalLineHeight;this.layerElement.appendChild(F)}else{var u=this.textSpans.length,P;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!c||!A||t===0){if(h=u>t?this.textSpans[t].span:createNS(c?"g":"text"),u<=t){if(h.setAttribute("stroke-linecap","butt"),h.setAttribute("stroke-linejoin","round"),h.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=h,c){var T=createNS("g");h.appendChild(T),this.textSpans[t].childSpan=T}this.textSpans[t].span=h,this.layerElement.appendChild(h)}h.style.display="inherit"}if(d.reset(),A&&(o[t].n&&(v=-b,C+=r.yOffset,C+=x?1:0,x=!1),this.applyTextPropertiesToMatrix(r,d,o[t].line,v,C),v+=o[t].l||0,v+=b),c){P=this.globalData.fontManager.getCharData(r.finalText[t],i.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily);var w;if(P.t===1)w=new SVGCompElement(P.data,this.globalData,this);else{var V=emptyShapeData;P.data&&P.data.shapes&&(V=this.buildShapeData(P.data,r.finalSize)),w=new SVGShapeElement(V,this.globalData,this)}if(this.textSpans[t].glyph){var L=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(L.layerElement),L.destroy()}this.textSpans[t].glyph=w,w._debug=!0,w.prepareFrame(0),w.renderFrame(),this.textSpans[t].childSpan.appendChild(w.layerElement),P.t===1&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else A&&h.setAttribute("transform","translate("+d.props[12]+","+d.props[13]+")"),h.textContent=o[t].val,h.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}A&&h&&h.setAttribute("d",S)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e=this.textSpans.length,r;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<e;t+=1)r=this.textSpans[t].glyph,r&&(r.prepareFrame(this.comp.renderedFrame-this.data.st),r._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var t,e,r=this.textAnimator.renderedLetters,i=this.textProperty.currentData.l;e=i.length;var s,a,o;for(t=0;t<e;t+=1)i[t].n||(s=r[t],a=this.textSpans[t].span,o=this.textSpans[t].glyph,o&&o.renderFrame(),s._mdf.m&&a.setAttribute("transform",s.m),s._mdf.o&&a.setAttribute("opacity",s.o),s._mdf.sw&&a.setAttribute("stroke-width",s.sw),s._mdf.sc&&a.setAttribute("stroke",s.sc),s._mdf.fc&&a.setAttribute("fill",s.fc))}};function ISolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)};function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),this.renderConfig.focusable!==void 0&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),i=createNS("rect");i.setAttribute("width",t.w),i.setAttribute("height",t.h),i.setAttribute("x",0),i.setAttribute("y",0);var s=createElementID();r.setAttribute("id",s),r.appendChild(i),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+s+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(this.layers[t].ty===0&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var i="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(i===-1)return;if(!this.elements[i]||this.elements[i]===!0)this.buildItem(i),this.addPendingElement(r);else{var s=e[i],a=s.getMatte(this.layers[t].tt);r.setMatte(a)}}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var i="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,s=this.elements[i],a=s.getMatte(this.layers[e].tt);t.setMatte(a);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(!(this.renderedFrame===t||this.destroyed)){t===null?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var e,r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var i=0,s;i<e;)this.elements[i]&&this.elements[i]!==!0&&this.elements[i].getBaseElement()&&(s=this.elements[i].getBaseElement()),i+=1;s?this.layerElement.insertBefore(r,s):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),(this.data.xt||!e.progressiveLoad)&&this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),!(!this.isInRange&&!this.data.xt)){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,i=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()};function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var i=createNS("title"),s=createElementID();i.setAttribute("id",s),i.textContent=e.title,this.svgElement.appendChild(i),r+=s}if(e&&e.description){var a=createNS("desc"),o=createElementID();a.setAttribute("id",o),a.textContent=e.description,this.svgElement.appendChild(a),r+=" "+o}r&&this.svgElement.setAttribute("aria-labelledby",r);var c=createNS("defs");this.svgElement.appendChild(c);var h=createNS("g");this.svgElement.appendChild(h),this.layerElement=h,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&e.hideOnTransparent===!1),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:c,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}ShapeTransformManager.prototype={addTransformSequence:function(e){var r,i=e.length,s="_";for(r=0;r<i;r+=1)s+=e[r].transform.key+"_";var a=this.sequences[s];return a||(a={transforms:[].concat(e),finalTransform:new Matrix,_mdf:!1},this.sequences[s]=a,this.sequenceList.push(a)),a},processSequence:function(e,r){for(var i=0,s=e.transforms.length,a=r;i<s&&!r;){if(e.transforms[i].transform.mProps._mdf){a=!0;break}i+=1}if(a)for(e.finalTransform.reset(),i=s-1;i>=0;i-=1)e.finalTransform.multiply(e.transforms[i].transform.mProps.v);e._mdf=a},processSequences:function(e){var r,i=this.sequenceList.length;for(r=0;r<i;r+=1)this.processSequence(this.sequenceList[r],e)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var e="__lottie_element_luma_buffer",r=null,i=null,s=null;function a(){var h=createNS("svg"),d=createNS("filter"),S=createNS("feColorMatrix");return d.setAttribute("id",e),S.setAttribute("type","matrix"),S.setAttribute("color-interpolation-filters","sRGB"),S.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),d.appendChild(S),h.appendChild(d),h.setAttribute("id",e+"_svg"),featureSupport.svgLumaHidden&&(h.style.display="none"),h}function o(){r||(s=a(),document.body.appendChild(s),r=createTag("canvas"),i=r.getContext("2d"),i.filter="url(#"+e+")",i.fillStyle="rgba(0,0,0,0)",i.fillRect(0,0,1,1))}function c(h){return r||o(),r.width=h.width,r.height=h.height,i.filter="url(#"+e+")",r}return{load:o,get:c}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader=function(){return{loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas}}(),registeredEffects={};function CVEffects(t){var e,r=t.data.ef?t.data.ef.length:0;this.filters=[];var i;for(e=0;e<r;e+=1){i=null;var s=t.data.ef[e].ty;if(registeredEffects[s]){var a=registeredEffects[s].effect;i=new a(t.effectsManager.effectElements[e],t)}i&&this.filters.push(i)}this.filters.length&&t.addRenderableComponent(this)}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var r,i=this.masksProperties.length,s=!1;for(r=0;r<i;r+=1)this.masksProperties[r].mode!=="n"&&(s=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=s,s&&this.element.addRenderableComponent(this)}CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t=this.element.finalTransform.mat,e=this.element.canvasContext,r,i=this.masksProperties.length,s,a,o;for(e.beginPath(),r=0;r<i;r+=1)if(this.masksProperties[r].mode!=="n"){this.masksProperties[r].inv&&(e.moveTo(0,0),e.lineTo(this.element.globalData.compSize.w,0),e.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),e.lineTo(0,this.element.globalData.compSize.h),e.lineTo(0,0)),o=this.viewData[r].v,s=t.applyToPointArray(o.v[0][0],o.v[0][1],0),e.moveTo(s[0],s[1]);var c,h=o._length;for(c=1;c<h;c+=1)a=t.applyToTriplePoints(o.o[c-1],o.i[c],o.v[c]),e.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5]);a=t.applyToTriplePoints(o.o[c-1],o.i[0],o.v[0]),e.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5])}this.element.globalData.renderer.save(!0),e.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};function CVBaseElement(){}var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var e=this.globalData.canvasContext,r=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(r);var i=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(i),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var e=this.globalData;if(e.blendMode!==this.data.bm){e.blendMode=this.data.bm;var r=getBlendMode(this.data.bm);e.canvasContext.globalCompositeOperation=r}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){!this.hidden&&(!this.isInRange||this.isTransparent)&&(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(e){e.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var e=this.buffers[0],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var e=this.buffers[1],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform);var i=this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1);if(i.renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var s=assetLoader.getLumaCanvas(this.canvasContext.canvas),a=s.getContext("2d");a.drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(s,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(e,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(e){if(!(this.hidden||this.data.hd)&&!(this.data.td===1&&!e)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var r=this.data.ty===0;this.prepareLayer(),this.globalData.renderer.save(r),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(r),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(t,e,r,i){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var s=4;e.ty==="rc"?s=5:e.ty==="el"?s=6:e.ty==="sr"&&(s=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,s,t);var a,o=r.length,c;for(a=0;a<o;a+=1)r[a].closed||(c={transforms:i.addTransformSequence(r[a].transforms),trNodes:[]},this.styledShapes.push(c),r[a].elements.push(c))}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:t.hd===!0},i={};if(t.ty==="fl"||t.ty==="st"?(i.c=PropertyFactory.getProp(this,t.c,1,255,this),i.c.k||(r.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")")):(t.ty==="gf"||t.ty==="gs")&&(i.s=PropertyFactory.getProp(this,t.s,1,null,this),i.e=PropertyFactory.getProp(this,t.e,1,null,this),i.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),i.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),i.g=new GradientProperty(this,t.g,this)),i.o=PropertyFactory.getProp(this,t.o,0,.01,this),t.ty==="st"||t.ty==="gs"){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],t.lj==1&&(r.ml=t.ml),i.w=PropertyFactory.getProp(this,t.w,0,null,this),i.w.k||(r.wi=i.w.v),t.d){var s=new DashProperty(this,t.d,"canvas",this);i.d=s,i.d.k||(r.da=i.d.dashArray,r.do=i.d.dashoffset[0])}}else r.r=t.r===2?"evenodd":"nonzero";return this.stylesList.push(r),i.style=r,i},CVShapeElement.prototype.createGroupElement=function(){var t={it:[],prevViewData:[]};return t},CVShapeElement.prototype.createTransformElement=function(t){var e={transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}};return e},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,i,s){var a,o=t.length-1,c,h,d=[],S=[],A,v,C,x=[].concat(s);for(a=o;a>=0;a-=1){if(A=this.searchProcessedElement(t[a]),A?e[a]=r[A-1]:t[a]._shouldRender=i,t[a].ty==="fl"||t[a].ty==="st"||t[a].ty==="gf"||t[a].ty==="gs")A?e[a].style.closed=!1:e[a]=this.createStyleElement(t[a],x),d.push(e[a].style);else if(t[a].ty==="gr"){if(!A)e[a]=this.createGroupElement(t[a]);else for(h=e[a].it.length,c=0;c<h;c+=1)e[a].prevViewData[c]=e[a].it[c];this.searchShapes(t[a].it,e[a].it,e[a].prevViewData,i,x)}else t[a].ty==="tr"?(A||(C=this.createTransformElement(t[a]),e[a]=C),x.push(e[a]),this.addTransformToStyleList(e[a])):t[a].ty==="sh"||t[a].ty==="rc"||t[a].ty==="el"||t[a].ty==="sr"?A||(e[a]=this.createShapeElement(t[a])):t[a].ty==="tm"||t[a].ty==="rd"||t[a].ty==="pb"||t[a].ty==="zz"||t[a].ty==="op"?(A?(v=e[a],v.closed=!1):(v=ShapeModifiers.getModifier(t[a].ty),v.init(this,t[a]),e[a]=v,this.shapeModifiers.push(v)),S.push(v)):t[a].ty==="rp"&&(A?(v=e[a],v.closed=!0):(v=ShapeModifiers.getModifier(t[a].ty),e[a]=v,v.init(this,t,a,e),this.shapeModifiers.push(v),i=!1),S.push(v));this.addProcessedElement(t[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(d),o=S.length,a=0;a<o;a+=1)S[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e=this.stylesList.length,r,i,s,a,o,c,h=this.globalData.renderer,d=this.globalData.canvasContext,S,A;for(t=0;t<e;t+=1)if(A=this.stylesList[t],S=A.type,!((S==="st"||S==="gs")&&A.wi===0||!A.data._shouldRender||A.coOp===0||this.globalData.currentGlobalAlpha===0)){for(h.save(),o=A.elements,S==="st"||S==="gs"?(h.ctxStrokeStyle(S==="st"?A.co:A.grd),h.ctxLineWidth(A.wi),h.ctxLineCap(A.lc),h.ctxLineJoin(A.lj),h.ctxMiterLimit(A.ml||0)):h.ctxFillStyle(S==="fl"?A.co:A.grd),h.ctxOpacity(A.coOp),S!=="st"&&S!=="gs"&&d.beginPath(),h.ctxTransform(A.preTransforms.finalTransform.props),i=o.length,r=0;r<i;r+=1){for((S==="st"||S==="gs")&&(d.beginPath(),A.da&&(d.setLineDash(A.da),d.lineDashOffset=A.do)),c=o[r].trNodes,a=c.length,s=0;s<a;s+=1)c[s].t==="m"?d.moveTo(c[s].p[0],c[s].p[1]):c[s].t==="c"?d.bezierCurveTo(c[s].pts[0],c[s].pts[1],c[s].pts[2],c[s].pts[3],c[s].pts[4],c[s].pts[5]):d.closePath();(S==="st"||S==="gs")&&(h.ctxStroke(),A.da&&d.setLineDash(this.dashResetter))}S!=="st"&&S!=="gs"&&this.globalData.renderer.ctxFill(A.r),h.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,i){var s,a=e.length-1,o;for(o=t,s=a;s>=0;s-=1)e[s].ty==="tr"?(o=r[s].transform,this.renderShapeTransform(t,o)):e[s].ty==="sh"||e[s].ty==="el"||e[s].ty==="rc"||e[s].ty==="sr"?this.renderPath(e[s],r[s]):e[s].ty==="fl"?this.renderFill(e[s],r[s],o):e[s].ty==="st"?this.renderStroke(e[s],r[s],o):e[s].ty==="gf"||e[s].ty==="gs"?this.renderGradientFill(e[s],r[s],o):e[s].ty==="gr"?this.renderShape(o,e[s].it,r[s].it):e[s].ty;i&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r=t.trNodes,i=e.paths,s,a,o,c=i._length;r.length=0;var h=t.transforms.finalTransform;for(o=0;o<c;o+=1){var d=i.shapes[o];if(d&&d.v){for(a=d._length,s=1;s<a;s+=1)s===1&&r.push({t:"m",p:h.applyToPointArray(d.v[0][0],d.v[0][1],0)}),r.push({t:"c",pts:h.applyToTriplePoints(d.o[s-1],d.i[s],d.v[s])});a===1&&r.push({t:"m",p:h.applyToPointArray(d.v[0][0],d.v[0][1],0)}),d.c&&a&&(r.push({t:"c",pts:h.applyToTriplePoints(d.o[s-1],d.i[0],d.v[0])}),r.push({t:"z"}))}}t.trNodes=r}},CVShapeElement.prototype.renderPath=function(t,e){if(t.hd!==!0&&t._shouldRender){var r,i=e.styledShapes.length;for(r=0;r<i;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var i=e.style;(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var i=e.style,s;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||t.t!==1&&(e.h._mdf||e.a._mdf)){var a=this.globalData.canvasContext,o=e.s.v,c=e.e.v;if(t.t===1)s=a.createLinearGradient(o[0],o[1],c[0],c[1]);else{var h=Math.sqrt(Math.pow(o[0]-c[0],2)+Math.pow(o[1]-c[1],2)),d=Math.atan2(c[1]-o[1],c[0]-o[0]),S=e.h.v;S>=1?S=.99:S<=-1&&(S=-.99);var A=h*S,v=Math.cos(d+e.a.v)*A+o[0],C=Math.sin(d+e.a.v)*A+o[1];s=a.createRadialGradient(v,C,0,o[0],o[1],h)}var x,b=t.g.p,F=e.g.c,y=1;for(x=0;x<b;x+=1)e.g._hasOpacity&&e.g._collapsable&&(y=e.g.o[x*2+1]),s.addColorStop(F[x*4]/100,"rgba("+F[x*4+1]+","+F[x*4+2]+","+F[x*4+3]+","+y+")");i.grd=s}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var i=e.style,s=e.d;s&&(s._mdf||this._isFirstFrame)&&(i.da=s.dashArray,i.do=s.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(i.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0};function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var i=this.globalData.fontManager.getFontByName(t.f),s,a,o=t.l,c=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,a=t.finalText.length;var h,d,S,A,v,C,x,b,F,y,g=this.data.singleShape,u=t.tr*.001*t.finalSize,P=0,T=0,w=!0,V=0;for(s=0;s<a;s+=1){h=this.globalData.fontManager.getCharData(t.finalText[s],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),d=h&&h.data||{},c.reset(),g&&o[s].n&&(P=-u,T+=t.yOffset,T+=w?1:0,w=!1),v=d.shapes?d.shapes[0].it:[],x=v.length,c.scale(t.finalSize/100,t.finalSize/100),g&&this.applyTextPropertiesToMatrix(t,c,o[s].line,P,T),F=createSizedArray(x-1);var L=0;for(C=0;C<x;C+=1)if(v[C].ty==="sh"){for(A=v[C].ks.k.i.length,b=v[C].ks.k,y=[],S=1;S<A;S+=1)S===1&&y.push(c.applyToX(b.v[0][0],b.v[0][1],0),c.applyToY(b.v[0][0],b.v[0][1],0)),y.push(c.applyToX(b.o[S-1][0],b.o[S-1][1],0),c.applyToY(b.o[S-1][0],b.o[S-1][1],0),c.applyToX(b.i[S][0],b.i[S][1],0),c.applyToY(b.i[S][0],b.i[S][1],0),c.applyToX(b.v[S][0],b.v[S][1],0),c.applyToY(b.v[S][0],b.v[S][1],0));y.push(c.applyToX(b.o[S-1][0],b.o[S-1][1],0),c.applyToY(b.o[S-1][0],b.o[S-1][1],0),c.applyToX(b.i[0][0],b.i[0][1],0),c.applyToY(b.i[0][0],b.i[0][1],0),c.applyToX(b.v[0][0],b.v[0][1],0),c.applyToY(b.v[0][0],b.v[0][1],0)),F[L]=y,L+=1}g&&(P+=o[s].l,P+=u),this.textSpans[V]?this.textSpans[V].elem=F:this.textSpans[V]={elem:F},V+=1}},CVTextElement.prototype.renderInnerContent=function(){this.validateText();var t=this.canvasContext;t.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var e,r,i,s,a,o,c=this.textAnimator.renderedLetters,h=this.textProperty.currentData.l;r=h.length;var d,S=null,A=null,v=null,C,x,b=this.globalData.renderer;for(e=0;e<r;e+=1)if(!h[e].n){if(d=c[e],d&&(b.save(),b.ctxTransform(d.p),b.ctxOpacity(d.o)),this.fill){for(d&&d.fc?S!==d.fc&&(b.ctxFillStyle(d.fc),S=d.fc):S!==this.values.fill&&(S=this.values.fill,b.ctxFillStyle(this.values.fill)),C=this.textSpans[e].elem,s=C.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(x=C[i],o=x.length,this.globalData.canvasContext.moveTo(x[0],x[1]),a=2;a<o;a+=6)this.globalData.canvasContext.bezierCurveTo(x[a],x[a+1],x[a+2],x[a+3],x[a+4],x[a+5]);this.globalData.canvasContext.closePath(),b.ctxFill()}if(this.stroke){for(d&&d.sw?v!==d.sw&&(v=d.sw,b.ctxLineWidth(d.sw)):v!==this.values.sWidth&&(v=this.values.sWidth,b.ctxLineWidth(this.values.sWidth)),d&&d.sc?A!==d.sc&&(A=d.sc,b.ctxStrokeStyle(d.sc)):A!==this.values.stroke&&(A=this.values.stroke,b.ctxStrokeStyle(this.values.stroke)),C=this.textSpans[e].elem,s=C.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(x=C[i],o=x.length,this.globalData.canvasContext.moveTo(x[0],x[1]),a=2;a<o;a+=6)this.globalData.canvasContext.bezierCurveTo(x[a],x[a+1],x[a+2],x[a+3],x[a+4],x[a+5]);this.globalData.canvasContext.closePath(),b.ctxStroke()}d&&this.globalData.renderer.restore()}};function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e=t.getContext("2d"),r=this.img.width,i=this.img.height,s=r/i,a=this.assetData.w/this.assetData.h,o,c,h=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>a&&h==="xMidYMid slice"||s<a&&h!=="xMidYMid slice"?(c=i,o=c*a):(o=r,c=o/a),e.drawImage(this.img,(r-o)/2,(i-c)/2,o,c,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null};function CVSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){t[0]===1&&t[1]===0&&t[4]===0&&t[5]===1&&t[12]===0&&t[13]===0||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,i){this.canvasContext.fillRect(t,e,r,i)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}this.contextData.reset()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){this.reset();var r,i;t?(r=t,i=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=i):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,i=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=i*this.renderConfig.dpr);var s,a;if(this.renderConfig.preserveAspectRatio.indexOf("meet")!==-1||this.renderConfig.preserveAspectRatio.indexOf("slice")!==-1){var o=this.renderConfig.preserveAspectRatio.split(" "),c=o[1]||"meet",h=o[0]||"xMidYMid",d=h.substr(0,4),S=h.substr(4);s=r/i,a=this.transformCanvas.w/this.transformCanvas.h,a>s&&c==="meet"||a<s&&c==="slice"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr)),d==="xMid"&&(a<s&&c==="meet"||a>s&&c==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))/2*this.renderConfig.dpr:d==="xMax"&&(a<s&&c==="meet"||a>s&&c==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))*this.renderConfig.dpr:this.transformCanvas.tx=0,S==="YMid"&&(a>s&&c==="meet"||a<s&&c==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:S==="YMax"&&(a>s&&c==="meet"||a<s&&c==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:this.transformCanvas.ty=0}else this.renderConfig.preserveAspectRatio==="none"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText="");var t,e=this.layers?this.layers.length:0;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if(!(this.renderedFrame===t&&this.renderConfig.clearCanvas===!0&&!e||this.destroyed||t===-1)){this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var r,i=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(this.renderConfig.clearCanvas===!0?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();this.renderConfig.clearCanvas!==!0&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"};function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){this.stack=[],this.cArrPos=0,this.cTr=new Matrix;var t,e=15;for(t=0;t<e;t+=1){var r=new CanvasContext;this.stack[t]=r}this._length=e,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}CVContextData.prototype.duplicate=function(){var t=this._length*2,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e=this.stack[this.cArrPos],r=e.transform,i,s=this.cTr.props;for(i=0;i<16;i+=1)s[i]=r[i];if(t){this.nativeContext.restore();var a=this.stack[this.cArrPos+1];this.appliedFillStyle=a.fillStyle,this.appliedStrokeStyle=a.strokeStyle,this.appliedLineWidth=a.lineWidth,this.appliedLineCap=a.lineCap,this.appliedLineJoin=a.lineJoin,this.appliedMiterLimit=a.miterLimit}this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),(t||e.opacity!==-1&&this.currentOpacity!==e.opacity)&&(this.nativeContext.globalAlpha=e.opacity,this.currentOpacity=e.opacity),this.currentFillStyle=e.fillStyle,this.currentStrokeStyle=e.strokeStyle,this.currentLineWidth=e.lineWidth,this.currentLineCap=e.lineCap,this.currentLineJoin=e.lineJoin,this.currentMiterLimit=e.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r=this.stack[this.cArrPos],i;for(i=0;i<16;i+=1)r.transform[i]=e[i];this.cArrPos+=1;var s=this.stack[this.cArrPos];s.opacity=r.opacity,s.fillStyle=r.fillStyle,s.strokeStyle=r.strokeStyle,s.lineWidth=r.lineWidth,s.lineCap=r.lineCap,s.lineJoin=r.lineJoin,s.miterLimit=r.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,i){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,i)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()};function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip();var e,r=this.layers.length;for(e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var t,e=this.layers.length;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:e&&e.clearCanvas!==void 0?e.clearCanvas:!0,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.bm!==0&&this.setBlendMode()},renderElement:function(){var e=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var r=this.finalTransform.mat.toCSS();e.transform=r,e.webkitTransform=r}this.finalTransform._opMdf&&(e.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?(t=createNS("rect"),t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(t=createTag("div"),t.style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)};function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r=t.sh.v,i=t.transformers,s,a=r._length,o,c,h,d;if(!(a<=1)){for(s=0;s<a-1;s+=1)o=this.getTransformedPoint(i,r.v[s]),c=this.getTransformedPoint(i,r.o[s]),h=this.getTransformedPoint(i,r.i[s+1]),d=this.getTransformedPoint(i,r.v[s+1]),this.checkBounds(o,c,h,d,e);r.c&&(o=this.getTransformedPoint(i,r.v[s]),c=this.getTransformedPoint(i,r.o[s]),h=this.getTransformedPoint(i,r.i[0]),d=this.getTransformedPoint(i,r.v[0]),this.checkBounds(o,c,h,d,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,i,s){this.getBoundsOfCurve(t,e,r,i);var a=this.shapeBoundingBox;s.x=bmMin(a.left,s.x),s.xMax=bmMax(a.right,s.xMax),s.y=bmMin(a.top,s.y),s.yMax=bmMax(a.bottom,s.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,i){for(var s=[[t[0],i[0]],[t[1],i[1]]],a,o,c,h,d,S,A,v=0;v<2;++v)o=6*t[v]-12*e[v]+6*r[v],a=-3*t[v]+9*e[v]-9*r[v]+3*i[v],c=3*e[v]-3*t[v],o|=0,a|=0,c|=0,a===0&&o===0||(a===0?(h=-c/o,h>0&&h<1&&s[v].push(this.calculateF(h,t,e,r,i,v))):(d=o*o-4*c*a,d>=0&&(S=(-o+bmSqrt(d))/(2*a),S>0&&S<1&&s[v].push(this.calculateF(S,t,e,r,i,v)),A=(-o-bmSqrt(d))/(2*a),A>0&&A<1&&s[v].push(this.calculateF(A,t,e,r,i,v)))));this.shapeBoundingBox.left=bmMin.apply(null,s[0]),this.shapeBoundingBox.top=bmMin.apply(null,s[1]),this.shapeBoundingBox.right=bmMax.apply(null,s[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,s[1])},HShapeElement.prototype.calculateF=function(t,e,r,i,s,a){return bmPow(1-t,3)*e[a]+3*bmPow(1-t,2)*t*r[a]+3*(1-t)*bmPow(t,2)*i[a]+bmPow(t,3)*s[a]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var i=0;i<t.keyframes.length;i+=1){var s=t.keyframes[i].s;s>r&&(r=s)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var i=this.shapeCont.style,s="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";i.transform=s,i.webkitTransform=s}}};function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var i=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{e.fontFamily=i.fFamily;var s=t.fWeight,a=t.fStyle;e.fontStyle=a,e.fontWeight=s}var o,c,h=t.l;c=h.length;var d,S,A,v=this.mHelper,C,x="",b=0;for(o=0;o<c;o+=1){if(this.globalData.fontManager.chars?(this.textPaths[b]?d=this.textPaths[b]:(d=createNS("path"),d.setAttribute("stroke-linecap",lineCapEnum[1]),d.setAttribute("stroke-linejoin",lineJoinEnum[2]),d.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[b]?(S=this.textSpans[b],A=S.children[0]):(S=createTag("div"),S.style.lineHeight=0,A=createNS("svg"),A.appendChild(d),styleDiv(S)))):this.isMasked?d=this.textPaths[b]?this.textPaths[b]:createNS("text"):this.textSpans[b]?(S=this.textSpans[b],d=this.textPaths[b]):(S=createTag("span"),styleDiv(S),d=createTag("span"),styleDiv(d),S.appendChild(d)),this.globalData.fontManager.chars){var F=this.globalData.fontManager.getCharData(t.finalText[o],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),y;if(F?y=F.data:y=null,v.reset(),y&&y.shapes&&y.shapes.length&&(C=y.shapes[0].it,v.scale(t.finalSize/100,t.finalSize/100),x=this.createPathShape(v,C),d.setAttribute("d",x)),this.isMasked)this.innerElem.appendChild(d);else{if(this.innerElem.appendChild(S),y&&y.shapes){document.body.appendChild(A);var g=A.getBBox();A.setAttribute("width",g.width+2),A.setAttribute("height",g.height+2),A.setAttribute("viewBox",g.x-1+" "+(g.y-1)+" "+(g.width+2)+" "+(g.height+2));var u=A.style,P="translate("+(g.x-1)+"px,"+(g.y-1)+"px)";u.transform=P,u.webkitTransform=P,h[o].yOffset=g.y-1}else A.setAttribute("width",1),A.setAttribute("height",1);S.appendChild(A)}}else if(d.textContent=h[o].val,d.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(d);else{this.innerElem.appendChild(S);var T=d.style,w="translate3d(0,"+-t.finalSize/1.2+"px,0)";T.transform=w,T.webkitTransform=w}this.isMasked?this.textSpans[b]=d:this.textSpans[b]=S,this.textSpans[b].style.display="block",this.textPaths[b]=d,b+=1}for(;b<this.textSpans.length;)this.textSpans[b].style.display="none",b+=1},HTextElement.prototype.renderInnerContent=function(){this.validateText();var t;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),!(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag)){var r,i,s=0,a=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;i=o.length;var c,h,d;for(r=0;r<i;r+=1)o[r].n?s+=1:(h=this.textSpans[r],d=this.textPaths[r],c=a[s],s+=1,c._mdf.m&&(this.isMasked?h.setAttribute("transform",c.m):(h.style.webkitTransform=c.m,h.style.transform=c.m)),h.style.opacity=c.o,c.sw&&c._mdf.sw&&d.setAttribute("stroke-width",c.sw),c.sc&&c._mdf.sc&&d.setAttribute("stroke",c.sc),c.fc&&c._mdf.fc&&(d.setAttribute("fill",c.fc),d.style.color=c.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var S=this.innerElem.getBBox();this.currentBBox.w!==S.width&&(this.currentBBox.w=S.width,this.svgElement.setAttribute("width",S.width)),this.currentBBox.h!==S.height&&(this.currentBBox.h=S.height,this.svgElement.setAttribute("height",S.height));var A=1;if(this.currentBBox.w!==S.width+A*2||this.currentBBox.h!==S.height+A*2||this.currentBBox.x!==S.x-A||this.currentBBox.y!==S.y-A){this.currentBBox.w=S.width+A*2,this.currentBBox.h=S.height+A*2,this.currentBBox.x=S.x-A,this.currentBBox.y=S.y-A,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var v="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=v,t.webkitTransform=v}}}};function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var i=PropertyFactory.getProp;if(this.pe=i(this,t.pe,0,0,this),t.ks.p.s?(this.px=i(this,t.ks.p.x,1,0,this),this.py=i(this,t.ks.p.y,1,0,this),this.pz=i(this,t.ks.p.z,1,0,this)):this.p=i(this,t.ks.p,1,0,this),t.ks.a&&(this.a=i(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var s,a=t.ks.or.k.length;for(s=0;s<a;s+=1)t.ks.or.k[s].to=null,t.ks.or.k[s].ti=null}this.or=i(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=i(this,t.ks.rx,0,degToRads,this),this.ry=i(this,t.ks.ry,0,degToRads,this),this.rz=i(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e=this.comp.threeDElements.length,r,i,s;for(t=0;t<e;t+=1)if(r=this.comp.threeDElements[t],r.type==="3d"){i=r.perspectiveElem.style,s=r.container.style;var a=this.pe.v+"px",o="0px 0px 0px",c="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";i.perspective=a,i.webkitPerspective=a,s.transformOrigin=o,s.mozTransformOrigin=o,s.webkitTransformOrigin=o,i.transform=c,i.webkitTransform=c}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t=this._isFirstFrame,e,r;if(this.hierarchy)for(r=this.hierarchy.length,e=0;e<r;e+=1)t=this.hierarchy[e].finalTransform.mProp._mdf||t;if(t||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(r=this.hierarchy.length-1,e=r;e>=0;e-=1){var i=this.hierarchy[e].finalTransform.mProp;this.mat.translate(-i.p.v[0],-i.p.v[1],i.p.v[2]),this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]),this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v),this.mat.scale(1/i.s.v[0],1/i.s.v[1],1/i.s.v[2]),this.mat.translate(i.a.v[0],i.a.v[1],i.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var s;this.p?s=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:s=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)+Math.pow(s[2],2)),o=[s[0]/a,s[1]/a,s[2]/a],c=Math.sqrt(o[2]*o[2]+o[0]*o[0]),h=Math.atan2(o[1],c),d=Math.atan2(o[0],-o[2]);this.mat.rotateY(d).rotateX(-h)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var S=!this._prevMat.equals(this.mat);if((S||this.pe._mdf)&&this.comp.threeDElements){r=this.comp.threeDElements.length;var A,v,C;for(e=0;e<r;e+=1)if(A=this.comp.threeDElements[e],A.type==="3d"){if(S){var x=this.mat.toCSS();C=A.container.style,C.transform=x,C.webkitTransform=x}this.pe._mdf&&(v=A.perspectiveElem.style,v.perspective=this.pe.v+"px",v.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null};function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)};function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var i=this.layers[e];if(!i.ddd||!this.supports3d)if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var s=0,a,o,c;s<e;)this.elements[s]&&this.elements[s]!==!0&&this.elements[s].getBaseElement&&(o=this.elements[s],c=this.layers[s].ddd?this.getThreeDContainerByPos(s):o.getBaseElement(),a=c||a),s+=1;a?(!i.ddd||!this.supports3d)&&this.layerElement.insertBefore(r,a):(!i.ddd||!this.supports3d)&&this.layerElement.appendChild(r)}else this.addTo3dContainer(r,e)}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r=createTag("div"),i,s;styleDiv(r);var a=createTag("div");if(styleDiv(a),e==="3d"){i=r.style,i.width=this.globalData.compSize.w+"px",i.height=this.globalData.compSize.h+"px";var o="50% 50%";i.webkitTransformOrigin=o,i.mozTransformOrigin=o,i.transformOrigin=o,s=a.style;var c="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";s.transform=c,s.webkitTransform=c}r.appendChild(a);var h={container:a,perspectiveElem:r,startPos:t,endPos:t,type:e};return this.threeDElements.push(h),h},HybridRendererBase.prototype.build3dContainers=function(){var t,e=this.layers.length,r,i="";for(t=0;t<e;t+=1)this.layers[t].ddd&&this.layers[t].ty!==3?(i!=="3d"&&(i="3d",r=this.createThreeDContainer(t,"3d")),r.endPos=Math.max(r.endPos,t)):(i!=="2d"&&(i="2d",r=this.createThreeDContainer(t,"2d")),r.endPos=Math.max(r.endPos,t));for(e=this.threeDElements.length,t=e-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,i=this.threeDElements.length;r<i;){if(e<=this.threeDElements[r].endPos){for(var s=this.threeDElements[r].startPos,a;s<e;)this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s].getBaseElement()),s+=1;a?this.threeDElements[r].container.insertBefore(t,a):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,i=e.style;i.width=t.w+"px",i.height=t.h+"px",this.resizerElem=e,styleDiv(e),i.transformStyle="flat",i.mozTransformStyle="flat",i.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),i.overflow="hidden";var s=createNS("svg");s.setAttribute("width","1"),s.setAttribute("height","1"),styleDiv(s),this.resizerElem.appendChild(s);var a=createNS("defs");s.appendChild(a),this.data=t,this.setupGlobalData(t,s),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,r=t/e,i=this.globalData.compSize.w/this.globalData.compSize.h,s,a,o,c;i>r?(s=t/this.globalData.compSize.w,a=t/this.globalData.compSize.w,o=0,c=(e-this.globalData.compSize.h*(t/this.globalData.compSize.w))/2):(s=e/this.globalData.compSize.h,a=e/this.globalData.compSize.h,o=(t-this.globalData.compSize.w*(e/this.globalData.compSize.h))/2,c=0);var h=this.resizerElem.style;h.webkitTransform="matrix3d("+s+",0,0,0,0,"+a+",0,0,0,0,1,0,"+o+","+c+",0,1)",h.transform=h.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t=this.globalData.compSize.w,e=this.globalData.compSize.h,r,i=this.threeDElements.length;for(r=0;r<i;r+=1){var s=this.threeDElements[r].perspectiveElem.style;s.webkitPerspective=Math.sqrt(Math.pow(t,2)+Math.pow(e,2))+"px",s.perspective=s.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,i=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var s=this.createComp(t[e],i,this.globalData.comp,null);s.initExpressions(),this.globalData.projectInterface.registerComposition(s)}};function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r=0,i;r<e;)this.elements[r]&&this.elements[r].getBaseElement&&(i=this.elements[r].getBaseElement()),r+=1;i?this.layerElement.insertBefore(t,i):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(){return function(t){function e(r){for(var i=0,s=t.layers.length;i<s;){if(t.layers[i].nm===r||t.layers[i].ind===r)return t.elements[i].layerInterface;i+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e}}();function _typeof$2(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$2=function(r){return typeof r}:_typeof$2=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$2(t)}function seedRandom(t,e){var r=this,i=256,s=6,a=52,o="random",c=e.pow(i,s),h=e.pow(2,a),d=h*2,S=i-1,A;function v(u,P,T){var w=[];P=P===!0?{entropy:!0}:P||{};var V=F(b(P.entropy?[u,g(t)]:u===null?y():u,3),w),L=new C(w),B=function(){for(var z=L.g(s),O=c,H=0;z<h;)z=(z+H)*i,O*=i,H=L.g(1);for(;z>=d;)z/=2,O/=2,H>>>=1;return(z+H)/O};return B.int32=function(){return L.g(4)|0},B.quick=function(){return L.g(4)/4294967296},B.double=B,F(g(L.S),t),(P.pass||T||function(W,z,O,H){return H&&(H.S&&x(H,L),W.state=function(){return x(L,{})}),O?(e[o]=W,z):W})(B,V,"global"in P?P.global:this==e,P.state)}e["seed"+o]=v;function C(u){var P,T=u.length,w=this,V=0,L=w.i=w.j=0,B=w.S=[];for(T||(u=[T++]);V<i;)B[V]=V++;for(V=0;V<i;V++)B[V]=B[L=S&L+u[V%T]+(P=B[V])],B[L]=P;w.g=function(W){for(var z,O=0,H=w.i,j=w.j,G=w.S;W--;)z=G[H=S&H+1],O=O*i+G[S&(G[H]=G[j=S&j+z])+(G[j]=z)];return w.i=H,w.j=j,O}}function x(u,P){return P.i=u.i,P.j=u.j,P.S=u.S.slice(),P}function b(u,P){var T=[],w=_typeof$2(u),V;if(P&&w=="object")for(V in u)try{T.push(b(u[V],P-1))}catch{}return T.length?T:w=="string"?u:u+"\0"}function F(u,P){for(var T=u+"",w,V=0;V<T.length;)P[S&V]=S&(w^=P[S&V]*19)+T.charCodeAt(V++);return g(P)}function y(){try{var u=new Uint8Array(i);return(r.crypto||r.msCrypto).getRandomValues(u),g(u)}catch{var P=r.navigator,T=P&&P.plugins;return[+new Date,r,T,r.screen,g(t)]}}function g(u){return String.fromCharCode.apply(0,u)}F(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$1=function(r){return typeof r}:_typeof$1=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return t==="number"||e instanceof Number||t==="boolean"||t==="string"}function $bm_neg(t){var e=_typeof$1(t);if(e==="number"||t instanceof Number||e==="boolean")return-t;if($bm_isInstanceOfArray(t)){var r,i=t.length,s=[];for(r=0;r<i;r+=1)s[r]=-t[r];return s}return t.propType?t.v:-t}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e)||r==="string"||i==="string")return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,a=t.length,o=e.length,c=[];s<a||s<o;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?c[s]=t[s]+e[s]:c[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return c}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e))return r==="string"&&(t=parseInt(t,10)),i==="string"&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,a=t.length,o=e.length,c=[];s<a||s<o;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?c[s]=t[s]-e[s]:c[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return c}return 0}function mul(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t*e;var a,o;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(o=t.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=t[a]*e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(o=e.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=t*e[a];return s}return 0}function div(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t/e;var a,o;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(o=t.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=t[a]/e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(o=e.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=t/e[a];return s}return 0}function mod(t,e){return typeof t=="string"&&(t=parseInt(t,10)),typeof e=="string"&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var i=r;r=e,e=i}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if(typeof t=="number"||t instanceof Number)return e=e||0,Math.abs(t-e);e||(e=helperLengthArray);var r,i=Math.min(t.length,e.length),s=0;for(r=0;r<i;r+=1)s+=Math.pow(e[r]-t[r],2);return Math.sqrt(s)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e=t[0],r=t[1],i=t[2],s=Math.max(e,r,i),a=Math.min(e,r,i),o,c,h=(s+a)/2;if(s===a)o=0,c=0;else{var d=s-a;switch(c=h>.5?d/(2-s-a):d/(s+a),s){case e:o=(r-i)/d+(r<i?6:0);break;case r:o=(i-e)/d+2;break;case i:o=(e-r)/d+4;break}o/=6}return[o,c,h,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+(e-t)*6*r:r<1/2?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e=t[0],r=t[1],i=t[2],s,a,o;if(r===0)s=i,o=i,a=i;else{var c=i<.5?i*(1+r):i+r-i*r,h=2*i-c;s=hue2rgb(h,c,e+1/3),a=hue2rgb(h,c,e),o=hue2rgb(h,c,e-1/3)}return[s,a,o,t[3]]}function linear(t,e,r,i,s){if((i===void 0||s===void 0)&&(i=e,s=r,e=0,r=1),r<e){var a=r;r=e,e=a}if(t<=e)return i;if(t>=r)return s;var o=r===e?0:(t-e)/(r-e);if(!i.length)return i+(s-i)*o;var c,h=i.length,d=createTypedArray("float32",h);for(c=0;c<h;c+=1)d[c]=i[c]+(s[c]-i[c])*o;return d}function random(t,e){if(e===void 0&&(t===void 0?(t=0,e=1):(e=t,t=void 0)),e.length){var r,i=e.length;t||(t=createTypedArray("float32",i));var s=createTypedArray("float32",i),a=BMMath.random();for(r=0;r<i;r+=1)s[r]=t[r]+a*(e[r]-t[r]);return s}t===void 0&&(t=0);var o=BMMath.random();return t+o*(e-t)}function createPath(t,e,r,i){var s,a=t.length,o=shapePool.newElement();o.setPathData(!!i,a);var c=[0,0],h,d;for(s=0;s<a;s+=1)h=e&&e[s]?e[s]:c,d=r&&r[s]?r[s]:c,o.setTripleAt(t[s][0],t[s][1],d[0]+t[s][0],d[1]+t[s][1],h[0]+t[s][0],h[1]+t[s][1],s,!0);return o}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=val.indexOf("random")!==-1,elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||this.data.hd!==!0,wiggle=(function t(e,r){var i,s,a=this.pv.length?this.pv.length:1,o=createTypedArray("float32",a);e=5;var c=Math.floor(time*e);for(i=0,s=0;i<c;){for(s=0;s<a;s+=1)o[s]+=-r+r*2*BMMath.random();i+=1}var h=time*e,d=h-Math.floor(h),S=createTypedArray("float32",a);if(a>1){for(s=0;s<a;s+=1)S[s]=this.pv[s]+o[s]+(-r+r*2*BMMath.random())*d;return S}return this.pv+o[0]+(-r+r*2*BMMath.random())*d}).bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty));function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],i=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads,s=-Math.atan2(r[1],r[2])/degToRads;return[s,i,0]}function easeOut(t,e,r,i,s){return applyEase(easeOutBez,t,e,r,i,s)}function easeIn(t,e,r,i,s){return applyEase(easeInBez,t,e,r,i,s)}function ease(t,e,r,i,s){return applyEase(easeInOutBez,t,e,r,i,s)}function applyEase(t,e,r,i,s,a){s===void 0?(s=r,a=i):e=(e-r)/(i-r),e>1?e=1:e<0&&(e=0);var o=t(e);if($bm_isInstanceOfArray(s)){var c,h=s.length,d=createTypedArray("float32",h);for(c=0;c<h;c+=1)d[c]=(a[c]-s[c])*o+s[c];return d}return(a-s)*o+s}function nearestKey(t){var e,r=data.k.length,i,s;if(!data.k.length||typeof data.k[0]=="number")i=0,s=0;else if(i=-1,t*=elem.comp.globalData.frameRate,t<data.k[0].t)i=1,s=data.k[0].t;else{for(e=0;e<r-1;e+=1)if(t===data.k[e].t){i=e+1,s=data.k[e].t;break}else if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(i=e+2,s=data.k[e+1].t):(i=e+1,s=data.k[e].t);break}i===-1&&(i=e+1,s=data.k[e].t)}var a={};return a.index=i,a.time=s/elem.comp.globalData.frameRate,a}function key(t){var e,r,i;if(!data.k.length||typeof data.k[0]=="number")throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var s=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(i=s.length,r=0;r<i;r+=1)e[r]=s[r],e.value[r]=s[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return!t&&t!==0&&(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return typeof value=="string"?e===void 0?value.substring(t):value.substring(t,e):""}function substr(t,e){return typeof value=="string"?e===void 0?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=t===0?0:Math.floor(time*t)/t,value=valueAtTime(time)}var time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!!(elem.hierarchy&&elem.hierarchy.length),parent,randSeed=Math.floor(Math.random()*1e6),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&this.propType!=="textSelector"?value:(this.propType==="textSelector"&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),elemType===4&&!content&&(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!!(elem.hierarchy&&elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt,scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={};t.initExpressions=e,t.resetFrame=ExpressionManager.resetFrame;function e(r){var i=0,s=[];function a(){i+=1}function o(){i-=1,i===0&&h()}function c(d){s.indexOf(d)===-1&&s.push(d)}function h(){var d,S=s.length;for(d=0;d<S;d+=1)s[d].release();s.length=0}r.renderer.compInterface=CompExpressionInterface(r.renderer),r.renderer.globalData.projectInterface.registerComposition(r.renderer),r.renderer.globalData.pushExpression=a,r.renderer.globalData.popExpression=o,r.renderer.globalData.registerExpressionProperty=c}return t}(),MaskManagerInterface=function(){function t(r,i){this._mask=r,this._data=i}Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),this._mask.op.v*100}});var e=function(i){var s=createSizedArray(i.viewData.length),a,o=i.viewData.length;for(a=0;a<o;a+=1)s[a]=new t(i.viewData[a],i.masksProperties[a]);var c=function(d){for(a=0;a<o;){if(i.masksProperties[a].nm===d)return s[a];a+=1}return null};return c};return e}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(o,c,h){Object.defineProperty(o,"velocity",{get:function(){return c.getVelocityAtTime(c.comp.currentFrame)}}),o.numKeys=c.keyframes?c.keyframes.length:0,o.key=function(d){if(!o.numKeys)return 0;var S="";"s"in c.keyframes[d-1]?S=c.keyframes[d-1].s:"e"in c.keyframes[d-2]?S=c.keyframes[d-2].e:S=c.keyframes[d-2].s;var A=h==="unidimensional"?new Number(S):Object.assign({},S);return A.time=c.keyframes[d-1].t/c.elem.comp.globalData.frameRate,A.value=h==="unidimensional"?S[0]:S,A},o.valueAtTime=c.getValueAtTime,o.speedAtTime=c.getSpeedAtTime,o.velocityAtTime=c.getVelocityAtTime,o.propertyGroup=c.propertyGroup}function i(o){(!o||!("pv"in o))&&(o=t);var c=1/o.mult,h=o.pv*c,d=new Number(h);return d.value=h,r(d,o,"unidimensional"),function(){return o.k&&o.getValue(),h=o.v*c,d.value!==h&&(d=new Number(h),d.value=h,r(d,o,"unidimensional")),d}}function s(o){(!o||!("pv"in o))&&(o=e);var c=1/o.mult,h=o.data&&o.data.l||o.pv.length,d=createTypedArray("float32",h),S=createTypedArray("float32",h);return d.value=S,r(d,o,"multidimensional"),function(){o.k&&o.getValue();for(var A=0;A<h;A+=1)S[A]=o.v[A]*c,d[A]=S[A];return d}}function a(){return t}return function(o){return o?o.propType==="unidimensional"?i(o):s(o):a}}(),TransformExpressionInterface=function(){return function(t){function e(o){switch(o){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)});var r,i,s,a;return t.p?a=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),i=ExpressionPropertyInterface(t.py),t.pz&&(s=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?a():[r(),i(),s?s():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e}}(),LayerExpressionInterface=function(){function t(d){var S=new Matrix;if(d!==void 0){var A=this._elem.finalTransform.mProp.getValueAtTime(d);A.clone(S)}else{var v=this._elem.finalTransform.mProp;v.applyToMatrix(S)}return S}function e(d,S){var A=this.getMatrix(S);return A.props[12]=0,A.props[13]=0,A.props[14]=0,this.applyPoint(A,d)}function r(d,S){var A=this.getMatrix(S);return this.applyPoint(A,d)}function i(d,S){var A=this.getMatrix(S);return A.props[12]=0,A.props[13]=0,A.props[14]=0,this.invertPoint(A,d)}function s(d,S){var A=this.getMatrix(S);return this.invertPoint(A,d)}function a(d,S){if(this._elem.hierarchy&&this._elem.hierarchy.length){var A,v=this._elem.hierarchy.length;for(A=0;A<v;A+=1)this._elem.hierarchy[A].finalTransform.mProp.applyToMatrix(d)}return d.applyToPointArray(S[0],S[1],S[2]||0)}function o(d,S){if(this._elem.hierarchy&&this._elem.hierarchy.length){var A,v=this._elem.hierarchy.length;for(A=0;A<v;A+=1)this._elem.hierarchy[A].finalTransform.mProp.applyToMatrix(d)}return d.inversePoint(S)}function c(d){var S=new Matrix;if(S.reset(),this._elem.finalTransform.mProp.applyToMatrix(S),this._elem.hierarchy&&this._elem.hierarchy.length){var A,v=this._elem.hierarchy.length;for(A=0;A<v;A+=1)this._elem.hierarchy[A].finalTransform.mProp.applyToMatrix(S);return S.inversePoint(d)}return S.inversePoint(d)}function h(){return[1,1,1,1]}return function(d){var S;function A(b){C.mask=new MaskManagerInterface(b,d)}function v(b){C.effect=b}function C(b){switch(b){case"ADBE Root Vectors Group":case"Contents":case 2:return C.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return S;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return C.effect;case"ADBE Text Properties":return C.textInterface;default:return null}}C.getMatrix=t,C.invertPoint=o,C.applyPoint=a,C.toWorld=r,C.toWorldVec=e,C.fromWorld=s,C.fromWorldVec=i,C.toComp=r,C.fromComp=c,C.sampleImage=h,C.sourceRectAtTime=d.sourceRectAtTime.bind(d),C._elem=d,S=TransformExpressionInterface(d.finalTransform.mProp);var x=getDescriptor(S,"anchorPoint");return Object.defineProperties(C,{hasParent:{get:function(){return d.hierarchy.length}},parent:{get:function(){return d.hierarchy[0].layerInterface}},rotation:getDescriptor(S,"rotation"),scale:getDescriptor(S,"scale"),position:getDescriptor(S,"position"),opacity:getDescriptor(S,"opacity"),anchorPoint:x,anchor_point:x,transform:{get:function(){return S}},active:{get:function(){return d.isInRange}}}),C.startTime=d.data.st,C.index=d.data.ind,C.source=d.data.refId,C.height=d.data.ty===0?d.data.h:100,C.width=d.data.ty===0?d.data.w:100,C.inPoint=d.data.ip/d.comp.globalData.frameRate,C.outPoint=d.data.op/d.comp.globalData.frameRate,C._name=d.data.nm,C.registerMaskInterface=A,C.registerEffectsInterface=v,C}}(),propertyGroupFactory=function(){return function(t,e){return function(r){return r=r===void 0?1:r,r<=0?t:e(r-1)}}}(),PropertyInterface=function(){return function(t,e){var r={_name:t};function i(s){return s=s===void 0?1:s,s<=0?r:e(s-1)}return i}}(),EffectsExpressionInterface=function(){var t={createEffectsInterface:e};function e(s,a){if(s.effectsManager){var o=[],c=s.data.ef,h,d=s.effectsManager.effectElements.length;for(h=0;h<d;h+=1)o.push(r(c[h],s.effectsManager.effectElements[h],a,s));var S=s.data.ef||[],A=function(C){for(h=0,d=S.length;h<d;){if(C===S[h].nm||C===S[h].mn||C===S[h].ix)return o[h];h+=1}return null};return Object.defineProperty(A,"numProperties",{get:function(){return S.length}}),A}return null}function r(s,a,o,c){function h(C){for(var x=s.ef,b=0,F=x.length;b<F;){if(C===x[b].nm||C===x[b].mn||C===x[b].ix)return x[b].ty===5?S[b]:S[b]();b+=1}throw new Error}var d=propertyGroupFactory(h,o),S=[],A,v=s.ef.length;for(A=0;A<v;A+=1)s.ef[A].ty===5?S.push(r(s.ef[A],a.effectElements[A],a.effectElements[A].propertyGroup,c)):S.push(i(a.effectElements[A],s.ef[A].ty,c,d));return s.mn==="ADBE Color Control"&&Object.defineProperty(h,"color",{get:function(){return S[0]()}}),Object.defineProperties(h,{numProperties:{get:function(){return s.np}},_name:{value:s.nm},propertyGroup:{value:d}}),h.enabled=s.en!==0,h.active=h.enabled,h}function i(s,a,o,c){var h=ExpressionPropertyInterface(s.p);function d(){return a===10?o.comp.compInterface(s.p.v):h()}return s.p.setGroupProperty&&s.p.setGroupProperty(PropertyInterface("",c)),d}return t}(),ShapePathInterface=function(){return function(e,r,i){var s=r.sh;function a(c){return c==="Shape"||c==="shape"||c==="Path"||c==="path"||c==="ADBE Vector Shape"||c===2?a.path:null}var o=propertyGroupFactory(a,i);return s.setGroupProperty(PropertyInterface("Path",o)),Object.defineProperties(a,{path:{get:function(){return s.k&&s.getValue(),s}},shape:{get:function(){return s.k&&s.getValue(),s}},_name:{value:e.nm},ix:{value:e.ix},propertyIndex:{value:e.ix},mn:{value:e.mn},propertyGroup:{value:i}}),a}}(),ShapeExpressionInterface=function(){function t(x,b,F){var y=[],g,u=x?x.length:0;for(g=0;g<u;g+=1)x[g].ty==="gr"?y.push(r(x[g],b[g],F)):x[g].ty==="fl"?y.push(i(x[g],b[g],F)):x[g].ty==="st"?y.push(o(x[g],b[g],F)):x[g].ty==="tm"?y.push(c(x[g],b[g],F)):x[g].ty==="tr"||(x[g].ty==="el"?y.push(d(x[g],b[g],F)):x[g].ty==="sr"?y.push(S(x[g],b[g],F)):x[g].ty==="sh"?y.push(ShapePathInterface(x[g],b[g],F)):x[g].ty==="rc"?y.push(A(x[g],b[g],F)):x[g].ty==="rd"?y.push(v(x[g],b[g],F)):x[g].ty==="rp"?y.push(C(x[g],b[g],F)):x[g].ty==="gf"?y.push(s(x[g],b[g],F)):y.push(a(x[g],b[g])));return y}function e(x,b,F){var y,g=function(T){for(var w=0,V=y.length;w<V;){if(y[w]._name===T||y[w].mn===T||y[w].propertyIndex===T||y[w].ix===T||y[w].ind===T)return y[w];w+=1}return typeof T=="number"?y[T-1]:null};g.propertyGroup=propertyGroupFactory(g,F),y=t(x.it,b.it,g.propertyGroup),g.numProperties=y.length;var u=h(x.it[x.it.length-1],b.it[b.it.length-1],g.propertyGroup);return g.transform=u,g.propertyIndex=x.cix,g._name=x.nm,g}function r(x,b,F){var y=function(T){switch(T){case"ADBE Vectors Group":case"Contents":case 2:return y.content;default:return y.transform}};y.propertyGroup=propertyGroupFactory(y,F);var g=e(x,b,y.propertyGroup),u=h(x.it[x.it.length-1],b.it[b.it.length-1],y.propertyGroup);return y.content=g,y.transform=u,Object.defineProperty(y,"_name",{get:function(){return x.nm}}),y.numProperties=x.np,y.propertyIndex=x.ix,y.nm=x.nm,y.mn=x.mn,y}function i(x,b,F){function y(g){return g==="Color"||g==="color"?y.color:g==="Opacity"||g==="opacity"?y.opacity:null}return Object.defineProperties(y,{color:{get:ExpressionPropertyInterface(b.c)},opacity:{get:ExpressionPropertyInterface(b.o)},_name:{value:x.nm},mn:{value:x.mn}}),b.c.setGroupProperty(PropertyInterface("Color",F)),b.o.setGroupProperty(PropertyInterface("Opacity",F)),y}function s(x,b,F){function y(g){return g==="Start Point"||g==="start point"?y.startPoint:g==="End Point"||g==="end point"?y.endPoint:g==="Opacity"||g==="opacity"?y.opacity:null}return Object.defineProperties(y,{startPoint:{get:ExpressionPropertyInterface(b.s)},endPoint:{get:ExpressionPropertyInterface(b.e)},opacity:{get:ExpressionPropertyInterface(b.o)},type:{get:function(){return"a"}},_name:{value:x.nm},mn:{value:x.mn}}),b.s.setGroupProperty(PropertyInterface("Start Point",F)),b.e.setGroupProperty(PropertyInterface("End Point",F)),b.o.setGroupProperty(PropertyInterface("Opacity",F)),y}function a(){function x(){return null}return x}function o(x,b,F){var y=propertyGroupFactory(V,F),g=propertyGroupFactory(w,y);function u(L){Object.defineProperty(w,x.d[L].nm,{get:ExpressionPropertyInterface(b.d.dataProps[L].p)})}var P,T=x.d?x.d.length:0,w={};for(P=0;P<T;P+=1)u(P),b.d.dataProps[P].p.setGroupProperty(g);function V(L){return L==="Color"||L==="color"?V.color:L==="Opacity"||L==="opacity"?V.opacity:L==="Stroke Width"||L==="stroke width"?V.strokeWidth:null}return Object.defineProperties(V,{color:{get:ExpressionPropertyInterface(b.c)},opacity:{get:ExpressionPropertyInterface(b.o)},strokeWidth:{get:ExpressionPropertyInterface(b.w)},dash:{get:function(){return w}},_name:{value:x.nm},mn:{value:x.mn}}),b.c.setGroupProperty(PropertyInterface("Color",y)),b.o.setGroupProperty(PropertyInterface("Opacity",y)),b.w.setGroupProperty(PropertyInterface("Stroke Width",y)),V}function c(x,b,F){function y(u){return u===x.e.ix||u==="End"||u==="end"?y.end:u===x.s.ix?y.start:u===x.o.ix?y.offset:null}var g=propertyGroupFactory(y,F);return y.propertyIndex=x.ix,b.s.setGroupProperty(PropertyInterface("Start",g)),b.e.setGroupProperty(PropertyInterface("End",g)),b.o.setGroupProperty(PropertyInterface("Offset",g)),y.propertyIndex=x.ix,y.propertyGroup=F,Object.defineProperties(y,{start:{get:ExpressionPropertyInterface(b.s)},end:{get:ExpressionPropertyInterface(b.e)},offset:{get:ExpressionPropertyInterface(b.o)},_name:{value:x.nm}}),y.mn=x.mn,y}function h(x,b,F){function y(u){return x.a.ix===u||u==="Anchor Point"?y.anchorPoint:x.o.ix===u||u==="Opacity"?y.opacity:x.p.ix===u||u==="Position"?y.position:x.r.ix===u||u==="Rotation"||u==="ADBE Vector Rotation"?y.rotation:x.s.ix===u||u==="Scale"?y.scale:x.sk&&x.sk.ix===u||u==="Skew"?y.skew:x.sa&&x.sa.ix===u||u==="Skew Axis"?y.skewAxis:null}var g=propertyGroupFactory(y,F);return b.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",g)),b.transform.mProps.p.setGroupProperty(PropertyInterface("Position",g)),b.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",g)),b.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",g)),b.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",g)),b.transform.mProps.sk&&(b.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",g)),b.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",g))),b.transform.op.setGroupProperty(PropertyInterface("Opacity",g)),Object.defineProperties(y,{opacity:{get:ExpressionPropertyInterface(b.transform.mProps.o)},position:{get:ExpressionPropertyInterface(b.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(b.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(b.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(b.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(b.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(b.transform.mProps.sa)},_name:{value:x.nm}}),y.ty="tr",y.mn=x.mn,y.propertyGroup=F,y}function d(x,b,F){function y(P){return x.p.ix===P?y.position:x.s.ix===P?y.size:null}var g=propertyGroupFactory(y,F);y.propertyIndex=x.ix;var u=b.sh.ty==="tm"?b.sh.prop:b.sh;return u.s.setGroupProperty(PropertyInterface("Size",g)),u.p.setGroupProperty(PropertyInterface("Position",g)),Object.defineProperties(y,{size:{get:ExpressionPropertyInterface(u.s)},position:{get:ExpressionPropertyInterface(u.p)},_name:{value:x.nm}}),y.mn=x.mn,y}function S(x,b,F){function y(P){return x.p.ix===P?y.position:x.r.ix===P?y.rotation:x.pt.ix===P?y.points:x.or.ix===P||P==="ADBE Vector Star Outer Radius"?y.outerRadius:x.os.ix===P?y.outerRoundness:x.ir&&(x.ir.ix===P||P==="ADBE Vector Star Inner Radius")?y.innerRadius:x.is&&x.is.ix===P?y.innerRoundness:null}var g=propertyGroupFactory(y,F),u=b.sh.ty==="tm"?b.sh.prop:b.sh;return y.propertyIndex=x.ix,u.or.setGroupProperty(PropertyInterface("Outer Radius",g)),u.os.setGroupProperty(PropertyInterface("Outer Roundness",g)),u.pt.setGroupProperty(PropertyInterface("Points",g)),u.p.setGroupProperty(PropertyInterface("Position",g)),u.r.setGroupProperty(PropertyInterface("Rotation",g)),x.ir&&(u.ir.setGroupProperty(PropertyInterface("Inner Radius",g)),u.is.setGroupProperty(PropertyInterface("Inner Roundness",g))),Object.defineProperties(y,{position:{get:ExpressionPropertyInterface(u.p)},rotation:{get:ExpressionPropertyInterface(u.r)},points:{get:ExpressionPropertyInterface(u.pt)},outerRadius:{get:ExpressionPropertyInterface(u.or)},outerRoundness:{get:ExpressionPropertyInterface(u.os)},innerRadius:{get:ExpressionPropertyInterface(u.ir)},innerRoundness:{get:ExpressionPropertyInterface(u.is)},_name:{value:x.nm}}),y.mn=x.mn,y}function A(x,b,F){function y(P){return x.p.ix===P?y.position:x.r.ix===P?y.roundness:x.s.ix===P||P==="Size"||P==="ADBE Vector Rect Size"?y.size:null}var g=propertyGroupFactory(y,F),u=b.sh.ty==="tm"?b.sh.prop:b.sh;return y.propertyIndex=x.ix,u.p.setGroupProperty(PropertyInterface("Position",g)),u.s.setGroupProperty(PropertyInterface("Size",g)),u.r.setGroupProperty(PropertyInterface("Rotation",g)),Object.defineProperties(y,{position:{get:ExpressionPropertyInterface(u.p)},roundness:{get:ExpressionPropertyInterface(u.r)},size:{get:ExpressionPropertyInterface(u.s)},_name:{value:x.nm}}),y.mn=x.mn,y}function v(x,b,F){function y(P){return x.r.ix===P||P==="Round Corners 1"?y.radius:null}var g=propertyGroupFactory(y,F),u=b;return y.propertyIndex=x.ix,u.rd.setGroupProperty(PropertyInterface("Radius",g)),Object.defineProperties(y,{radius:{get:ExpressionPropertyInterface(u.rd)},_name:{value:x.nm}}),y.mn=x.mn,y}function C(x,b,F){function y(P){return x.c.ix===P||P==="Copies"?y.copies:x.o.ix===P||P==="Offset"?y.offset:null}var g=propertyGroupFactory(y,F),u=b;return y.propertyIndex=x.ix,u.c.setGroupProperty(PropertyInterface("Copies",g)),u.o.setGroupProperty(PropertyInterface("Offset",g)),Object.defineProperties(y,{copies:{get:ExpressionPropertyInterface(u.c)},offset:{get:ExpressionPropertyInterface(u.o)},_name:{value:x.nm}}),y.mn=x.mn,y}return function(x,b,F){var y;function g(P){if(typeof P=="number")return P=P===void 0?1:P,P===0?F:y[P-1];for(var T=0,w=y.length;T<w;){if(y[T]._name===P)return y[T];T+=1}return null}function u(){return F}return g.propertyGroup=propertyGroupFactory(g,u),y=t(x,b,g.propertyGroup),g.numProperties=y.length,g._name="Contents",g}}(),TextExpressionInterface=function(){return function(t){var e;function r(i){switch(i){case"ADBE Text Document":return r.sourceText;default:return null}}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var s=t.textProperty.currentData.t;return(!e||s!==e.value)&&(e=new String(s),e.value=s||new String(s),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r}}();function _typeof(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(r){return typeof r}:_typeof=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof(t)}var FootageInterface=function(){var t=function(i){var s="",a=i.getFootageData();function o(){return s="",a=i.getFootageData(),c}function c(h){if(a[h])return s=h,a=a[h],_typeof(a)==="object"?c:a;var d=h.indexOf(s);if(d!==-1){var S=parseInt(h.substr(d+s.length),10);return a=a[S],_typeof(a)==="object"?c:a}return""}return o},e=function(i){function s(a){return a==="Outline"?s.outlineInterface():null}return s._name="Outline",s.outlineInterface=t(i),s};return function(r){function i(s){return s==="Data"?i.dataInterface:null}return i._name="Data",i.dataInterface=e(r),i}}(),interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers=function(){function t(o,c,h){c.x&&(h.k=!0,h.x=!0,h.initiateExpression=ExpressionManager.initiateExpression,h.effectsSequence.push(h.initiateExpression(o,c,h).bind(h)))}function e(o){return o*=this.elem.globalData.frameRate,o-=this.offsetTime,o!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<o?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(o,this._cachingAtTime),this._cachingAtTime.lastFrame=o),this._cachingAtTime.value}function r(o){var c=-.01,h=this.getValueAtTime(o),d=this.getValueAtTime(o+c),S=0;if(h.length){var A;for(A=0;A<h.length;A+=1)S+=Math.pow(d[A]-h[A],2);S=Math.sqrt(S)*100}else S=0;return S}function i(o){if(this.vel!==void 0)return this.vel;var c=-.001,h=this.getValueAtTime(o),d=this.getValueAtTime(o+c),S;if(h.length){S=createTypedArray("float32",h.length);var A;for(A=0;A<h.length;A+=1)S[A]=(d[A]-h[A])/c}else S=(d-h)/c;return S}function s(){return this.pv}function a(o){this.propertyGroup=o}return{searchExpressions:t,getSpeedAtTime:r,getVelocityAtTime:i,getValueAtTime:e,getStaticValueAtTime:s,setGroupProperty:a}}();function addPropertyDecorator(){function t(v,C,x){if(!this.k||!this.keyframes)return this.pv;v=v?v.toLowerCase():"";var b=this.comp.renderedFrame,F=this.keyframes,y=F[F.length-1].t;if(b<=y)return this.pv;var g,u;x?(C?g=Math.abs(y-this.elem.comp.globalData.frameRate*C):g=Math.max(0,y-this.elem.data.ip),u=y-g):((!C||C>F.length-1)&&(C=F.length-1),u=F[F.length-1-C].t,g=y-u);var P,T,w;if(v==="pingpong"){var V=Math.floor((b-u)/g);if(V%2!==0)return this.getValueAtTime((g-(b-u)%g+u)/this.comp.globalData.frameRate,0)}else if(v==="offset"){var L=this.getValueAtTime(u/this.comp.globalData.frameRate,0),B=this.getValueAtTime(y/this.comp.globalData.frameRate,0),W=this.getValueAtTime(((b-u)%g+u)/this.comp.globalData.frameRate,0),z=Math.floor((b-u)/g);if(this.pv.length){for(w=new Array(L.length),T=w.length,P=0;P<T;P+=1)w[P]=(B[P]-L[P])*z+W[P];return w}return(B-L)*z+W}else if(v==="continue"){var O=this.getValueAtTime(y/this.comp.globalData.frameRate,0),H=this.getValueAtTime((y-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(w=new Array(O.length),T=w.length,P=0;P<T;P+=1)w[P]=O[P]+(O[P]-H[P])*((b-y)/this.comp.globalData.frameRate)/5e-4;return w}return O+(O-H)*((b-y)/.001)}return this.getValueAtTime(((b-u)%g+u)/this.comp.globalData.frameRate,0)}function e(v,C,x){if(!this.k)return this.pv;v=v?v.toLowerCase():"";var b=this.comp.renderedFrame,F=this.keyframes,y=F[0].t;if(b>=y)return this.pv;var g,u;x?(C?g=Math.abs(this.elem.comp.globalData.frameRate*C):g=Math.max(0,this.elem.data.op-y),u=y+g):((!C||C>F.length-1)&&(C=F.length-1),u=F[C].t,g=u-y);var P,T,w;if(v==="pingpong"){var V=Math.floor((y-b)/g);if(V%2===0)return this.getValueAtTime(((y-b)%g+y)/this.comp.globalData.frameRate,0)}else if(v==="offset"){var L=this.getValueAtTime(y/this.comp.globalData.frameRate,0),B=this.getValueAtTime(u/this.comp.globalData.frameRate,0),W=this.getValueAtTime((g-(y-b)%g+y)/this.comp.globalData.frameRate,0),z=Math.floor((y-b)/g)+1;if(this.pv.length){for(w=new Array(L.length),T=w.length,P=0;P<T;P+=1)w[P]=W[P]-(B[P]-L[P])*z;return w}return W-(B-L)*z}else if(v==="continue"){var O=this.getValueAtTime(y/this.comp.globalData.frameRate,0),H=this.getValueAtTime((y+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(w=new Array(O.length),T=w.length,P=0;P<T;P+=1)w[P]=O[P]+(O[P]-H[P])*(y-b)/.001;return w}return O+(O-H)*(y-b)/.001}return this.getValueAtTime((g-((y-b)%g+y))/this.comp.globalData.frameRate,0)}function r(v,C){if(!this.k)return this.pv;if(v=(v||.4)*.5,C=Math.floor(C||5),C<=1)return this.pv;var x=this.comp.renderedFrame/this.comp.globalData.frameRate,b=x-v,F=x+v,y=C>1?(F-b)/(C-1):1,g=0,u=0,P;this.pv.length?P=createTypedArray("float32",this.pv.length):P=0;for(var T;g<C;){if(T=this.getValueAtTime(b+g*y),this.pv.length)for(u=0;u<this.pv.length;u+=1)P[u]+=T[u];else P+=T;g+=1}if(this.pv.length)for(u=0;u<this.pv.length;u+=1)P[u]/=C;else P/=C;return P}function i(v){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var C=this._transformCachingAtTime.v;if(C.cloneFromProps(this.pre.props),this.appliedTransformations<1){var x=this.a.getValueAtTime(v);C.translate(-x[0]*this.a.mult,-x[1]*this.a.mult,x[2]*this.a.mult)}if(this.appliedTransformations<2){var b=this.s.getValueAtTime(v);C.scale(b[0]*this.s.mult,b[1]*this.s.mult,b[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var F=this.sk.getValueAtTime(v),y=this.sa.getValueAtTime(v);C.skewFromAxis(-F*this.sk.mult,y*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var g=this.r.getValueAtTime(v);C.rotate(-g*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var u=this.rz.getValueAtTime(v),P=this.ry.getValueAtTime(v),T=this.rx.getValueAtTime(v),w=this.or.getValueAtTime(v);C.rotateZ(-u*this.rz.mult).rotateY(P*this.ry.mult).rotateX(T*this.rx.mult).rotateZ(-w[2]*this.or.mult).rotateY(w[1]*this.or.mult).rotateX(w[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var V=this.px.getValueAtTime(v),L=this.py.getValueAtTime(v);if(this.data.p.z){var B=this.pz.getValueAtTime(v);C.translate(V*this.px.mult,L*this.py.mult,-B*this.pz.mult)}else C.translate(V*this.px.mult,L*this.py.mult,0)}else{var W=this.p.getValueAtTime(v);C.translate(W[0]*this.p.mult,W[1]*this.p.mult,-W[2]*this.p.mult)}return C}function s(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(v,C,x){var b=a(v,C,x);return b.dynamicProperties.length?b.getValueAtTime=i.bind(b):b.getValueAtTime=s.bind(b),b.setGroupProperty=expressionHelpers.setGroupProperty,b};var o=PropertyFactory.getProp;PropertyFactory.getProp=function(v,C,x,b,F){var y=o(v,C,x,b,F);y.kf?y.getValueAtTime=expressionHelpers.getValueAtTime.bind(y):y.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(y),y.setGroupProperty=expressionHelpers.setGroupProperty,y.loopOut=t,y.loopIn=e,y.smooth=r,y.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(y),y.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(y),y.numKeys=C.a===1?C.k.length:0,y.propertyIndex=C.ix;var g=0;return x!==0&&(g=createTypedArray("float32",C.a===1?C.k[0].s.length:C.k.length)),y._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:g},expressionHelpers.searchExpressions(v,C,y),y.k&&F.addDynamicProperty(y),y};function c(v){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),v*=this.elem.globalData.frameRate,v-=this.offsetTime,v!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<v?this._caching.lastIndex:0,this._cachingAtTime.lastTime=v,this.interpolateShape(v,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}var h=ShapePropertyFactory.getConstructorFunction(),d=ShapePropertyFactory.getKeyframedConstructorFunction();function S(){}S.prototype={vertices:function(C,x){this.k&&this.getValue();var b=this.v;x!==void 0&&(b=this.getValueAtTime(x,0));var F,y=b._length,g=b[C],u=b.v,P=createSizedArray(y);for(F=0;F<y;F+=1)C==="i"||C==="o"?P[F]=[g[F][0]-u[F][0],g[F][1]-u[F][1]]:P[F]=[g[F][0],g[F][1]];return P},points:function(C){return this.vertices("v",C)},inTangents:function(C){return this.vertices("i",C)},outTangents:function(C){return this.vertices("o",C)},isClosed:function(){return this.v.c},pointOnPath:function(C,x){var b=this.v;x!==void 0&&(b=this.getValueAtTime(x,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(b));for(var F=this._segmentsLength,y=F.lengths,g=F.totalLength*C,u=0,P=y.length,T=0,w;u<P;){if(T+y[u].addedLength>g){var V=u,L=b.c&&u===P-1?0:u+1,B=(g-T)/y[u].addedLength;w=bez.getPointInSegment(b.v[V],b.v[L],b.o[V],b.i[L],B,y[u]);break}else T+=y[u].addedLength;u+=1}return w||(w=b.c?[b.v[0][0],b.v[0][1]]:[b.v[b._length-1][0],b.v[b._length-1][1]]),w},vectorOnPath:function(C,x,b){C==1?C=this.v.c:C==0&&(C=.999);var F=this.pointOnPath(C,x),y=this.pointOnPath(C+.001,x),g=y[0]-F[0],u=y[1]-F[1],P=Math.sqrt(Math.pow(g,2)+Math.pow(u,2));if(P===0)return[0,0];var T=b==="tangent"?[g/P,u/P]:[-u/P,g/P];return T},tangentOnPath:function(C,x){return this.vectorOnPath(C,x,"tangent")},normalOnPath:function(C,x){return this.vectorOnPath(C,x,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([S],h),extendPrototype([S],d),d.prototype.getValueAtTime=c,d.prototype.initiateExpression=ExpressionManager.initiateExpression;var A=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(v,C,x,b,F){var y=A(v,C,x,b,F);return y.propertyIndex=C.ix,y.lock=!1,x===3?expressionHelpers.searchExpressions(v,C.pt,y):x===4&&expressionHelpers.searchExpressions(v,C.ks,y),y.k&&v.addDynamicProperty(y),y}}function initialize$1(){addPropertyDecorator()}function addDecorator(){function t(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}TextProperty.prototype.getExpressionValue=function(e,r){var i=this.calculateExpression(r);if(e.t!==i){var s={};return this.copyData(s,e),s.t=i.toString(),s.__complete=!1,s}return e},TextProperty.prototype.searchProperty=function(){var e=this.searchKeyframes(),r=this.searchExpressions();return this.kf=e||r,this.kf},TextProperty.prototype.searchExpressions=t}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function t(e,r){var i=createNS("feMerge");i.setAttribute("result",e);var s,a;for(a=0;a<r.length;a+=1)s=createNS("feMergeNode"),s.setAttribute("in",r[a]),i.appendChild(s),i.appendChild(s);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,i,s){this.filterManager=e;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=a,a.setAttribute("result",i+"_tint_1"),t.appendChild(a),a=createNS("feColorMatrix"),a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",i+"_tint_2"),t.appendChild(a),this.matrixFilter=a;var o=this.createMergeNode(i,[s,i+"_tint_1",i+"_tint_2"]);t.appendChild(o)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+i+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}};function SVGFillFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","sRGB"),s.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),s.setAttribute("result",i),t.appendChild(s),this.matrixFilter=s}SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}};function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}SVGStrokeEffect.prototype.initialize=function(){var t=this.elem.layerElement.children||this.elem.layerElement.childNodes,e,r,i,s;for(this.filterManager.effectElements[1].p.v===1?(s=this.elem.maskManager.masksProperties.length,i=0):(i=this.filterManager.effectElements[0].p.v-1,s=i+1),r=createNS("g"),r.setAttribute("fill","none"),r.setAttribute("stroke-linecap","round"),r.setAttribute("stroke-dashoffset",1),i;i<s;i+=1)e=createNS("path"),r.appendChild(e),this.paths.push({p:e,m:i});if(this.filterManager.effectElements[10].p.v===3){var a=createNS("mask"),o=createElementID();a.setAttribute("id",o),a.setAttribute("mask-type","alpha"),a.appendChild(r),this.elem.globalData.defs.appendChild(a);var c=createNS("g");for(c.setAttribute("mask","url("+getLocationHref()+"#"+o+")");t[0];)c.appendChild(t[0]);this.elem.layerElement.appendChild(c),this.masker=a,r.setAttribute("stroke","#fff")}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2)for(t=this.elem.layerElement.children||this.elem.layerElement.childNodes;t.length;)this.elem.layerElement.removeChild(t[0]);this.elem.layerElement.appendChild(r),this.elem.layerElement.removeAttribute("mask"),r.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=r},SVGStrokeEffect.prototype.renderFrame=function(t){this.initialized||this.initialize();var e,r=this.paths.length,i,s;for(e=0;e<r;e+=1)if(this.paths[e].m!==-1&&(i=this.elem.maskManager.viewData[this.paths[e].m],s=this.paths[e].p,(t||this.filterManager._mdf||i.prop._mdf)&&s.setAttribute("d",i.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||i.prop._mdf)){var a;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var o=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,c=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,h=s.getTotalLength();a="0 0 0 "+h*o+" ";var d=h*(c-o),S=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01,A=Math.floor(d/S),v;for(v=0;v<A;v+=1)a+="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+h*10+" 0 0"}else a="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01;s.setAttribute("stroke-dasharray",a)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",this.filterManager.effectElements[4].p.v*2),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2)&&(t||this.filterManager.effectElements[3].p._mdf)){var C=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(C[0]*255)+","+bmFloor(C[1]*255)+","+bmFloor(C[2]*255)+")")}};function SVGTritoneFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","linearRGB"),s.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(s);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",i),this.matrixFilter=a;var o=createNS("feFuncR");o.setAttribute("type","table"),a.appendChild(o),this.feFuncR=o;var c=createNS("feFuncG");c.setAttribute("type","table"),a.appendChild(c),this.feFuncG=c;var h=createNS("feFuncB");h.setAttribute("type","table"),a.appendChild(h),this.feFuncB=h,t.appendChild(a)}SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v,s=i[0]+" "+r[0]+" "+e[0],a=i[1]+" "+r[1]+" "+e[1],o=i[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",s),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",o)}};function SVGProLevelsFilter(t,e,r,i){this.filterManager=e;var s=this.filterManager.effectElements,a=createNS("feComponentTransfer");(s[10].p.k||s[10].p.v!==0||s[11].p.k||s[11].p.v!==1||s[12].p.k||s[12].p.v!==1||s[13].p.k||s[13].p.v!==0||s[14].p.k||s[14].p.v!==1)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(s[17].p.k||s[17].p.v!==0||s[18].p.k||s[18].p.v!==1||s[19].p.k||s[19].p.v!==1||s[20].p.k||s[20].p.v!==0||s[21].p.k||s[21].p.v!==1)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(s[24].p.k||s[24].p.v!==0||s[25].p.k||s[25].p.v!==1||s[26].p.k||s[26].p.v!==1||s[27].p.k||s[27].p.v!==0||s[28].p.k||s[28].p.v!==1)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(s[31].p.k||s[31].p.v!==0||s[32].p.k||s[32].p.v!==1||s[33].p.k||s[33].p.v!==1||s[34].p.k||s[34].p.v!==0||s[35].p.k||s[35].p.v!==1)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(a)),(s[3].p.k||s[3].p.v!==0||s[4].p.k||s[4].p.v!==1||s[5].p.k||s[5].p.v!==1||s[6].p.k||s[6].p.v!==0||s[7].p.k||s[7].p.v!==1)&&(a=createNS("feComponentTransfer"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",i),t.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,i,s){for(var a=0,o=256,c,h=Math.min(t,e),d=Math.max(t,e),S=Array.call(null,{length:o}),A,v=0,C=s-i,x=e-t;a<=256;)c=a/256,c<=h?A=x<0?s:i:c>=d?A=x<0?i:s:A=i+C*Math.pow((c-t)/x,1/r),S[v]=A,v+=1,a+=256/(o-1);return S.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}};function SVGDropShadowEffect(t,e,r,i,s){var a=e.container.globalData.renderConfig.filterSize,o=e.data.fs||a;t.setAttribute("x",o.x||a.x),t.setAttribute("y",o.y||a.y),t.setAttribute("width",o.width||a.width),t.setAttribute("height",o.height||a.height),this.filterManager=e;var c=createNS("feGaussianBlur");c.setAttribute("in","SourceAlpha"),c.setAttribute("result",i+"_drop_shadow_1"),c.setAttribute("stdDeviation","0"),this.feGaussianBlur=c,t.appendChild(c);var h=createNS("feOffset");h.setAttribute("dx","25"),h.setAttribute("dy","0"),h.setAttribute("in",i+"_drop_shadow_1"),h.setAttribute("result",i+"_drop_shadow_2"),this.feOffset=h,t.appendChild(h);var d=createNS("feFlood");d.setAttribute("flood-color","#00ff00"),d.setAttribute("flood-opacity","1"),d.setAttribute("result",i+"_drop_shadow_3"),this.feFlood=d,t.appendChild(d);var S=createNS("feComposite");S.setAttribute("in",i+"_drop_shadow_3"),S.setAttribute("in2",i+"_drop_shadow_2"),S.setAttribute("operator","in"),S.setAttribute("result",i+"_drop_shadow_4"),t.appendChild(S);var A=this.createMergeNode(i,[i+"_drop_shadow_4",s]);t.appendChild(A)}extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(e[0]*255),Math.round(e[1]*255),Math.round(e[2]*255)))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,i=(this.filterManager.effectElements[2].p.v-90)*degToRads,s=r*Math.cos(i),a=r*Math.sin(i);this.feOffset.setAttribute("dx",s),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var i=r.children,s=0,a=i.length;s<a&&i[s]!==t.layerElement;)s+=1;var o;s<=a-2&&(o=i[s+1]);var c=createNS("use");c.setAttribute("href","#"+e),o?r.insertBefore(c,o):r.appendChild(c)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),i=createNS("mask");i.setAttribute("id",e.layerId),i.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var s=t.globalData.defs;s.appendChild(i);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(e,r),a.appendChild(e.layerElement),s.appendChild(a);var o=createNS("use");o.setAttribute("href","#"+r),i.appendChild(o),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,i=e.length;r<i;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()};function SVGGaussianBlurEffect(t,e,r,i){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("result",i),t.appendChild(s),this.feGaussianBlur=s}SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3,r=this.filterManager.effectElements[0].p.v*e,i=this.filterManager.effectElements[1].p.v,s=i==3?0:r,a=i==2?0:r;this.feGaussianBlur.setAttribute("stdDeviation",s+" "+a);var o=this.filterManager.effectElements[2].p.v==1?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",o)}};function TransformEffect(){}TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,i=e[1].p.v,s=e[2].p.v===1,a=e[3].p.v,o=s?a:e[4].p.v,c=e[5].p.v,h=e[6].p.v,d=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(o*.01,a*.01,1),this.matrix.rotate(-d*degToRads),this.matrix.skewFromAxis(-c*degToRads,(h+90)*degToRads),this.matrix.translate(i[0],i[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}};function SVGTransformEffect(t,e){this.init(e)}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(t){this.init(t)}return extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie})})(lottie$1,lottie$1.exports);var lottieExports=lottie$1.exports;const lottie=getDefaultExportFromCjs(lottieExports);export{jsxRuntimeExports as j,lottie as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3Bpbm5lci03NWU2OGQ1ZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC9qc3gtcnVudGltZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb3R0aWUtd2ViL2J1aWxkL3BsYXllci9sb3R0aWUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtanN4LXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO3ZhciBmPXJlcXVpcmUoXCJyZWFjdFwiKSxrPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLGw9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxuPWYuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQuUmVhY3RDdXJyZW50T3duZXIscD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gcShjLGEsZyl7dmFyIGIsZD17fSxlPW51bGwsaD1udWxsO3ZvaWQgMCE9PWcmJihlPVwiXCIrZyk7dm9pZCAwIT09YS5rZXkmJihlPVwiXCIrYS5rZXkpO3ZvaWQgMCE9PWEucmVmJiYoaD1hLnJlZik7Zm9yKGIgaW4gYSltLmNhbGwoYSxiKSYmIXAuaGFzT3duUHJvcGVydHkoYikmJihkW2JdPWFbYl0pO2lmKGMmJmMuZGVmYXVsdFByb3BzKWZvcihiIGluIGE9Yy5kZWZhdWx0UHJvcHMsYSl2b2lkIDA9PT1kW2JdJiYoZFtiXT1hW2JdKTtyZXR1cm57JCR0eXBlb2Y6ayx0eXBlOmMsa2V5OmUscmVmOmgscHJvcHM6ZCxfb3duZXI6bi5jdXJyZW50fX1leHBvcnRzLkZyYWdtZW50PWw7ZXhwb3J0cy5qc3g9cTtleHBvcnRzLmpzeHM9cTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiKHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIpICYmIChmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZ2xvYmFsLmxvdHRpZSA9IGZhY3RvcnkoKSk7XG59KSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgdmFyIHN2Z05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJztcbiAgdmFyIGxvY2F0aW9uSHJlZiA9ICcnO1xuICB2YXIgX3VzZVdlYldvcmtlciA9IGZhbHNlO1xuICB2YXIgaW5pdGlhbERlZmF1bHRGcmFtZSA9IC05OTk5OTk7XG5cbiAgdmFyIHNldFdlYldvcmtlciA9IGZ1bmN0aW9uIHNldFdlYldvcmtlcihmbGFnKSB7XG4gICAgX3VzZVdlYldvcmtlciA9ICEhZmxhZztcbiAgfTtcblxuICB2YXIgZ2V0V2ViV29ya2VyID0gZnVuY3Rpb24gZ2V0V2ViV29ya2VyKCkge1xuICAgIHJldHVybiBfdXNlV2ViV29ya2VyO1xuICB9O1xuXG4gIHZhciBzZXRMb2NhdGlvbkhyZWYgPSBmdW5jdGlvbiBzZXRMb2NhdGlvbkhyZWYodmFsdWUpIHtcbiAgICBsb2NhdGlvbkhyZWYgPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2V0TG9jYXRpb25IcmVmID0gZnVuY3Rpb24gZ2V0TG9jYXRpb25IcmVmKCkge1xuICAgIHJldHVybiBsb2NhdGlvbkhyZWY7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGFnKHR5cGUpIHtcbiAgICAvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXh0ZW5kUHJvdG90eXBlKHNvdXJjZXMsIGRlc3RpbmF0aW9uKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuICAgIHZhciBzb3VyY2VQcm90b3R5cGU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHNvdXJjZVByb3RvdHlwZSA9IHNvdXJjZXNbaV0ucHJvdG90eXBlO1xuXG4gICAgICBmb3IgKHZhciBhdHRyIGluIHNvdXJjZVByb3RvdHlwZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZVByb3RvdHlwZSwgYXR0cikpIGRlc3RpbmF0aW9uLnByb3RvdHlwZVthdHRyXSA9IHNvdXJjZVByb3RvdHlwZVthdHRyXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZXNjcmlwdG9yKG9iamVjdCwgcHJvcCkge1xuICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgcHJvcCk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVQcm94eUZ1bmN0aW9uKHByb3RvdHlwZSkge1xuICAgIGZ1bmN0aW9uIFByb3h5RnVuY3Rpb24oKSB7fVxuXG4gICAgUHJveHlGdW5jdGlvbi5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgcmV0dXJuIFByb3h5RnVuY3Rpb247XG4gIH1cblxuICAvLyBpbXBvcnQgSG93bCBmcm9tICcuLi8uLi8zcmRfcGFydHkvaG93bGVyJztcbiAgdmFyIGF1ZGlvQ29udHJvbGxlckZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQXVkaW9Db250cm9sbGVyKGF1ZGlvRmFjdG9yeSkge1xuICAgICAgdGhpcy5hdWRpb3MgPSBbXTtcbiAgICAgIHRoaXMuYXVkaW9GYWN0b3J5ID0gYXVkaW9GYWN0b3J5O1xuICAgICAgdGhpcy5fdm9sdW1lID0gMTtcbiAgICAgIHRoaXMuX2lzTXV0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBBdWRpb0NvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuICAgICAgYWRkQXVkaW86IGZ1bmN0aW9uIGFkZEF1ZGlvKGF1ZGlvKSB7XG4gICAgICAgIHRoaXMuYXVkaW9zLnB1c2goYXVkaW8pO1xuICAgICAgfSxcbiAgICAgIHBhdXNlOiBmdW5jdGlvbiBwYXVzZSgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmF1ZGlvcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb3NbaV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlc3VtZTogZnVuY3Rpb24gcmVzdW1lKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNldFJhdGU6IGZ1bmN0aW9uIHNldFJhdGUocmF0ZVZhbHVlKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5hdWRpb3MubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuYXVkaW9zW2ldLnNldFJhdGUocmF0ZVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZUF1ZGlvOiBmdW5jdGlvbiBjcmVhdGVBdWRpbyhhc3NldFBhdGgpIHtcbiAgICAgICAgaWYgKHRoaXMuYXVkaW9GYWN0b3J5KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9GYWN0b3J5KGFzc2V0UGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAod2luZG93Lkhvd2wpIHtcbiAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5Ib3dsKHtcbiAgICAgICAgICAgIHNyYzogW2Fzc2V0UGF0aF1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaXNQbGF5aW5nOiBmYWxzZSxcbiAgICAgICAgICBwbGF5OiBmdW5jdGlvbiBwbGF5KCkge1xuICAgICAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2VlazogZnVuY3Rpb24gc2VlaygpIHtcbiAgICAgICAgICAgIHRoaXMuaXNQbGF5aW5nID0gZmFsc2U7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBwbGF5aW5nOiBmdW5jdGlvbiBwbGF5aW5nKCkge30sXG4gICAgICAgICAgcmF0ZTogZnVuY3Rpb24gcmF0ZSgpIHt9LFxuICAgICAgICAgIHNldFZvbHVtZTogZnVuY3Rpb24gc2V0Vm9sdW1lKCkge31cbiAgICAgICAgfTtcbiAgICAgIH0sXG4gICAgICBzZXRBdWRpb0ZhY3Rvcnk6IGZ1bmN0aW9uIHNldEF1ZGlvRmFjdG9yeShhdWRpb0ZhY3RvcnkpIHtcbiAgICAgICAgdGhpcy5hdWRpb0ZhY3RvcnkgPSBhdWRpb0ZhY3Rvcnk7XG4gICAgICB9LFxuICAgICAgc2V0Vm9sdW1lOiBmdW5jdGlvbiBzZXRWb2x1bWUodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fdm9sdW1lID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlVm9sdW1lKCk7XG4gICAgICB9LFxuICAgICAgbXV0ZTogZnVuY3Rpb24gbXV0ZSgpIHtcbiAgICAgICAgdGhpcy5faXNNdXRlZCA9IHRydWU7XG5cbiAgICAgICAgdGhpcy5fdXBkYXRlVm9sdW1lKCk7XG4gICAgICB9LFxuICAgICAgdW5tdXRlOiBmdW5jdGlvbiB1bm11dGUoKSB7XG4gICAgICAgIHRoaXMuX2lzTXV0ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLl91cGRhdGVWb2x1bWUoKTtcbiAgICAgIH0sXG4gICAgICBnZXRWb2x1bWU6IGZ1bmN0aW9uIGdldFZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZvbHVtZTtcbiAgICAgIH0sXG4gICAgICBfdXBkYXRlVm9sdW1lOiBmdW5jdGlvbiBfdXBkYXRlVm9sdW1lKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS52b2x1bWUodGhpcy5fdm9sdW1lICogKHRoaXMuX2lzTXV0ZWQgPyAwIDogMSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5ldyBBdWRpb0NvbnRyb2xsZXIoKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGNyZWF0ZVR5cGVkQXJyYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlUmVndWxhckFycmF5KHR5cGUsIGxlbikge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGFyciA9IFtdO1xuICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnaW50MTYnOlxuICAgICAgICBjYXNlICd1aW50OGMnOlxuICAgICAgICAgIHZhbHVlID0gMTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHZhbHVlID0gMS4xO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2godmFsdWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5KHR5cGUsIGxlbikge1xuICAgICAgaWYgKHR5cGUgPT09ICdmbG9hdDMyJykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShsZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ2ludDE2Jykge1xuICAgICAgICByZXR1cm4gbmV3IEludDE2QXJyYXkobGVuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09ICd1aW50OGMnKSB7XG4gICAgICAgIHJldHVybiBuZXcgVWludDhDbGFtcGVkQXJyYXkobGVuKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNyZWF0ZVJlZ3VsYXJBcnJheSh0eXBlLCBsZW4pO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgVWludDhDbGFtcGVkQXJyYXkgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIEZsb2F0MzJBcnJheSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIGNyZWF0ZVR5cGVkQXJyYXlGYWN0b3J5O1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVSZWd1bGFyQXJyYXk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBjcmVhdGVTaXplZEFycmF5KGxlbikge1xuICAgIHJldHVybiBBcnJheS5hcHBseShudWxsLCB7XG4gICAgICBsZW5ndGg6IGxlblxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQ2KG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDYgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ2ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNihvYmopOyB9XG4gIHZhciBzdWJmcmFtZUVuYWJsZWQgPSB0cnVlO1xuICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBudWxsO1xuICB2YXIgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gbnVsbDtcbiAgdmFyIGlkUHJlZml4JDEgPSAnJztcbiAgdmFyIGlzU2FmYXJpID0gL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgdmFyIF9zaG91bGRSb3VuZFZhbHVlcyA9IGZhbHNlO1xuICB2YXIgYm1Qb3cgPSBNYXRoLnBvdztcbiAgdmFyIGJtU3FydCA9IE1hdGguc3FydDtcbiAgdmFyIGJtRmxvb3IgPSBNYXRoLmZsb29yO1xuICB2YXIgYm1NYXggPSBNYXRoLm1heDtcbiAgdmFyIGJtTWluID0gTWF0aC5taW47XG4gIHZhciBCTU1hdGggPSB7fTtcblxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwcm9wZXJ0eU5hbWVzID0gWydhYnMnLCAnYWNvcycsICdhY29zaCcsICdhc2luJywgJ2FzaW5oJywgJ2F0YW4nLCAnYXRhbmgnLCAnYXRhbjInLCAnY2VpbCcsICdjYnJ0JywgJ2V4cG0xJywgJ2NsejMyJywgJ2NvcycsICdjb3NoJywgJ2V4cCcsICdmbG9vcicsICdmcm91bmQnLCAnaHlwb3QnLCAnaW11bCcsICdsb2cnLCAnbG9nMXAnLCAnbG9nMicsICdsb2cxMCcsICdtYXgnLCAnbWluJywgJ3BvdycsICdyYW5kb20nLCAncm91bmQnLCAnc2lnbicsICdzaW4nLCAnc2luaCcsICdzcXJ0JywgJ3RhbicsICd0YW5oJywgJ3RydW5jJywgJ0UnLCAnTE4xMCcsICdMTjInLCAnTE9HMTBFJywgJ0xPRzJFJywgJ1BJJywgJ1NRUlQxXzInLCAnU1FSVDInXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gcHJvcGVydHlOYW1lcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIEJNTWF0aFtwcm9wZXJ0eU5hbWVzW2ldXSA9IE1hdGhbcHJvcGVydHlOYW1lc1tpXV07XG4gICAgfVxuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIFByb2plY3RJbnRlcmZhY2UkMSgpIHtcbiAgICByZXR1cm4ge307XG4gIH1cblxuICBCTU1hdGgucmFuZG9tID0gTWF0aC5yYW5kb207XG5cbiAgQk1NYXRoLmFicyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB2YXIgdE9mVmFsID0gX3R5cGVvZiQ2KHZhbCk7XG5cbiAgICBpZiAodE9mVmFsID09PSAnb2JqZWN0JyAmJiB2YWwubGVuZ3RoKSB7XG4gICAgICB2YXIgYWJzQXJyID0gY3JlYXRlU2l6ZWRBcnJheSh2YWwubGVuZ3RoKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhYnNBcnJbaV0gPSBNYXRoLmFicyh2YWxbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWJzQXJyO1xuICAgIH1cblxuICAgIHJldHVybiBNYXRoLmFicyh2YWwpO1xuICB9O1xuXG4gIHZhciBkZWZhdWx0Q3VydmVTZWdtZW50cyA9IDE1MDtcbiAgdmFyIGRlZ1RvUmFkcyA9IE1hdGguUEkgLyAxODA7XG4gIHZhciByb3VuZENvcm5lciA9IDAuNTUxOTtcblxuICBmdW5jdGlvbiByb3VuZFZhbHVlcyhmbGFnKSB7XG4gICAgX3Nob3VsZFJvdW5kVmFsdWVzID0gISFmbGFnO1xuICB9XG5cbiAgZnVuY3Rpb24gYm1SbmQodmFsdWUpIHtcbiAgICBpZiAoX3Nob3VsZFJvdW5kVmFsdWVzKSB7XG4gICAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgZnVuY3Rpb24gc3R5bGVEaXYoZWxlbWVudCkge1xuICAgIGVsZW1lbnQuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgIGVsZW1lbnQuc3R5bGUudG9wID0gMDtcbiAgICBlbGVtZW50LnN0eWxlLmxlZnQgPSAwO1xuICAgIGVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSAnMCAwJztcbiAgICBlbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9ICcwIDAnO1xuICAgIGVsZW1lbnQuc3R5bGUuYmFja2ZhY2VWaXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0QmFja2ZhY2VWaXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIGVsZW1lbnQuc3R5bGUudHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICAgIGVsZW1lbnQuc3R5bGUubW96VHJhbnNmb3JtU3R5bGUgPSAncHJlc2VydmUtM2QnO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1FbnRlckZyYW1lRXZlbnQodHlwZSwgY3VycmVudFRpbWUsIHRvdGFsVGltZSwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmN1cnJlbnRUaW1lID0gY3VycmVudFRpbWU7XG4gICAgdGhpcy50b3RhbFRpbWUgPSB0b3RhbFRpbWU7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmcmFtZU11bHRpcGxpZXIgPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db21wbGV0ZUV2ZW50KHR5cGUsIGZyYW1lTXVsdGlwbGllcikge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy5kaXJlY3Rpb24gPSBmcmFtZU11bHRpcGxpZXIgPCAwID8gLTEgOiAxO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db21wbGV0ZUxvb3BFdmVudCh0eXBlLCB0b3RhbExvb3BzLCBjdXJyZW50TG9vcCwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmN1cnJlbnRMb29wID0gY3VycmVudExvb3A7XG4gICAgdGhpcy50b3RhbExvb3BzID0gdG90YWxMb29wcztcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGZyYW1lTXVsdGlwbGllciA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICBmdW5jdGlvbiBCTVNlZ21lbnRTdGFydEV2ZW50KHR5cGUsIGZpcnN0RnJhbWUsIHRvdGFsRnJhbWVzKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmZpcnN0RnJhbWUgPSBmaXJzdEZyYW1lO1xuICAgIHRoaXMudG90YWxGcmFtZXMgPSB0b3RhbEZyYW1lcztcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNRGVzdHJveUV2ZW50KHR5cGUsIHRhcmdldCkge1xuICAgIHRoaXMudHlwZSA9IHR5cGU7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBCTVJlbmRlckZyYW1lRXJyb3JFdmVudChuYXRpdmVFcnJvciwgY3VycmVudFRpbWUpIHtcbiAgICB0aGlzLnR5cGUgPSAncmVuZGVyRnJhbWVFcnJvcic7XG4gICAgdGhpcy5uYXRpdmVFcnJvciA9IG5hdGl2ZUVycm9yO1xuICAgIHRoaXMuY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNQ29uZmlnRXJyb3JFdmVudChuYXRpdmVFcnJvcikge1xuICAgIHRoaXMudHlwZSA9ICdjb25maWdFcnJvcic7XG4gICAgdGhpcy5uYXRpdmVFcnJvciA9IG5hdGl2ZUVycm9yO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1BbmltYXRpb25Db25maWdFcnJvckV2ZW50KHR5cGUsIG5hdGl2ZUVycm9yKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLm5hdGl2ZUVycm9yID0gbmF0aXZlRXJyb3I7XG4gIH1cblxuICB2YXIgY3JlYXRlRWxlbWVudElEID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY291bnQgPSAwO1xuICAgIHJldHVybiBmdW5jdGlvbiBjcmVhdGVJRCgpIHtcbiAgICAgIF9jb3VudCArPSAxO1xuICAgICAgcmV0dXJuIGlkUHJlZml4JDEgKyAnX19sb3R0aWVfZWxlbWVudF8nICsgX2NvdW50O1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBIU1Z0b1JHQihoLCBzLCB2KSB7XG4gICAgdmFyIHI7XG4gICAgdmFyIGc7XG4gICAgdmFyIGI7XG4gICAgdmFyIGk7XG4gICAgdmFyIGY7XG4gICAgdmFyIHA7XG4gICAgdmFyIHE7XG4gICAgdmFyIHQ7XG4gICAgaSA9IE1hdGguZmxvb3IoaCAqIDYpO1xuICAgIGYgPSBoICogNiAtIGk7XG4gICAgcCA9IHYgKiAoMSAtIHMpO1xuICAgIHEgPSB2ICogKDEgLSBmICogcyk7XG4gICAgdCA9IHYgKiAoMSAtICgxIC0gZikgKiBzKTtcblxuICAgIHN3aXRjaCAoaSAlIDYpIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgciA9IHY7XG4gICAgICAgIGcgPSB0O1xuICAgICAgICBiID0gcDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgciA9IHE7XG4gICAgICAgIGcgPSB2O1xuICAgICAgICBiID0gcDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgciA9IHA7XG4gICAgICAgIGcgPSB2O1xuICAgICAgICBiID0gdDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgciA9IHA7XG4gICAgICAgIGcgPSBxO1xuICAgICAgICBiID0gdjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgciA9IHQ7XG4gICAgICAgIGcgPSBwO1xuICAgICAgICBiID0gdjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgNTpcbiAgICAgICAgciA9IHY7XG4gICAgICAgIGcgPSBwO1xuICAgICAgICBiID0gcTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBbciwgZywgYl07XG4gIH1cblxuICBmdW5jdGlvbiBSR0J0b0hTVihyLCBnLCBiKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICB2YXIgaDtcbiAgICB2YXIgcyA9IG1heCA9PT0gMCA/IDAgOiBkIC8gbWF4O1xuICAgIHZhciB2ID0gbWF4IC8gMjU1O1xuXG4gICAgc3dpdGNoIChtYXgpIHtcbiAgICAgIGNhc2UgbWluOlxuICAgICAgICBoID0gMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgcjpcbiAgICAgICAgaCA9IGcgLSBiICsgZCAqIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgaCAvPSA2ICogZDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZzpcbiAgICAgICAgaCA9IGIgLSByICsgZCAqIDI7XG4gICAgICAgIGggLz0gNiAqIGQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGI6XG4gICAgICAgIGggPSByIC0gZyArIGQgKiA0O1xuICAgICAgICBoIC89IDYgKiBkO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtoLCBzLCB2XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFNhdHVyYXRpb25Ub1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlsxXSArPSBvZmZzZXQ7XG5cbiAgICBpZiAoaHN2WzFdID4gMSkge1xuICAgICAgaHN2WzFdID0gMTtcbiAgICB9IGVsc2UgaWYgKGhzdlsxXSA8PSAwKSB7XG4gICAgICBoc3ZbMV0gPSAwO1xuICAgIH1cblxuICAgIHJldHVybiBIU1Z0b1JHQihoc3ZbMF0sIGhzdlsxXSwgaHN2WzJdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEJyaWdodG5lc3NUb1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlsyXSArPSBvZmZzZXQ7XG5cbiAgICBpZiAoaHN2WzJdID4gMSkge1xuICAgICAgaHN2WzJdID0gMTtcbiAgICB9IGVsc2UgaWYgKGhzdlsyXSA8IDApIHtcbiAgICAgIGhzdlsyXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkSHVlVG9SR0IoY29sb3IsIG9mZnNldCkge1xuICAgIHZhciBoc3YgPSBSR0J0b0hTVihjb2xvclswXSAqIDI1NSwgY29sb3JbMV0gKiAyNTUsIGNvbG9yWzJdICogMjU1KTtcbiAgICBoc3ZbMF0gKz0gb2Zmc2V0IC8gMzYwO1xuXG4gICAgaWYgKGhzdlswXSA+IDEpIHtcbiAgICAgIGhzdlswXSAtPSAxO1xuICAgIH0gZWxzZSBpZiAoaHN2WzBdIDwgMCkge1xuICAgICAgaHN2WzBdICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgdmFyIHJnYlRvSGV4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb2xvck1hcCA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBoZXg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMjU2OyBpICs9IDEpIHtcbiAgICAgIGhleCA9IGkudG9TdHJpbmcoMTYpO1xuICAgICAgY29sb3JNYXBbaV0gPSBoZXgubGVuZ3RoID09PSAxID8gJzAnICsgaGV4IDogaGV4O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAociwgZywgYikge1xuICAgICAgaWYgKHIgPCAwKSB7XG4gICAgICAgIHIgPSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoZyA8IDApIHtcbiAgICAgICAgZyA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChiIDwgMCkge1xuICAgICAgICBiID0gMDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcjJyArIGNvbG9yTWFwW3JdICsgY29sb3JNYXBbZ10gKyBjb2xvck1hcFtiXTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHNldFN1YmZyYW1lRW5hYmxlZCA9IGZ1bmN0aW9uIHNldFN1YmZyYW1lRW5hYmxlZChmbGFnKSB7XG4gICAgc3ViZnJhbWVFbmFibGVkID0gISFmbGFnO1xuICB9O1xuXG4gIHZhciBnZXRTdWJmcmFtZUVuYWJsZWQgPSBmdW5jdGlvbiBnZXRTdWJmcmFtZUVuYWJsZWQoKSB7XG4gICAgcmV0dXJuIHN1YmZyYW1lRW5hYmxlZDtcbiAgfTtcblxuICB2YXIgc2V0RXhwcmVzc2lvbnNQbHVnaW4gPSBmdW5jdGlvbiBzZXRFeHByZXNzaW9uc1BsdWdpbih2YWx1ZSkge1xuICAgIGV4cHJlc3Npb25zUGx1Z2luID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldEV4cHJlc3Npb25zUGx1Z2luID0gZnVuY3Rpb24gZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zUGx1Z2luO1xuICB9O1xuXG4gIHZhciBzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyA9IGZ1bmN0aW9uIHNldEV4cHJlc3Npb25JbnRlcmZhY2VzKHZhbHVlKSB7XG4gICAgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldEV4cHJlc3Npb25JbnRlcmZhY2VzID0gZnVuY3Rpb24gZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMoKSB7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25zSW50ZXJmYWNlcztcbiAgfTtcblxuICB2YXIgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMgPSBmdW5jdGlvbiBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyh2YWx1ZSkge1xuICAgIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gZnVuY3Rpb24gZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzO1xuICB9O1xuXG4gIHZhciBzZXRJZFByZWZpeCA9IGZ1bmN0aW9uIHNldElkUHJlZml4KHZhbHVlKSB7XG4gICAgaWRQcmVmaXgkMSA9IHZhbHVlO1xuICB9O1xuXG4gIHZhciBnZXRJZFByZWZpeCA9IGZ1bmN0aW9uIGdldElkUHJlZml4KCkge1xuICAgIHJldHVybiBpZFByZWZpeCQxO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU5TKHR5cGUpIHtcbiAgICAvLyByZXR1cm4ge2FwcGVuZENoaWxkOmZ1bmN0aW9uKCl7fSxzZXRBdHRyaWJ1dGU6ZnVuY3Rpb24oKXt9LHN0eWxlOnt9fVxuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoc3ZnTlMsIHR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQ1KG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDUgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQ1ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkNShvYmopOyB9XG5cbiAgdmFyIGRhdGFNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY291bnRlcklkID0gMTtcbiAgICB2YXIgcHJvY2Vzc2VzID0gW107XG4gICAgdmFyIHdvcmtlckZuO1xuICAgIHZhciB3b3JrZXJJbnN0YW5jZTtcbiAgICB2YXIgd29ya2VyUHJveHkgPSB7XG4gICAgICBvbm1lc3NhZ2U6IGZ1bmN0aW9uIG9ubWVzc2FnZSgpIHt9LFxuICAgICAgcG9zdE1lc3NhZ2U6IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKHBhdGgpIHtcbiAgICAgICAgd29ya2VyRm4oe1xuICAgICAgICAgIGRhdGE6IHBhdGhcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgX3dvcmtlclNlbGYgPSB7XG4gICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gcG9zdE1lc3NhZ2UoZGF0YSkge1xuICAgICAgICB3b3JrZXJQcm94eS5vbm1lc3NhZ2Uoe1xuICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVdvcmtlcihmbikge1xuICAgICAgaWYgKHdpbmRvdy5Xb3JrZXIgJiYgd2luZG93LkJsb2IgJiYgZ2V0V2ViV29ya2VyKCkpIHtcbiAgICAgICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbJ3ZhciBfd29ya2VyU2VsZiA9IHNlbGY7IHNlbGYub25tZXNzYWdlID0gJywgZm4udG9TdHJpbmcoKV0sIHtcbiAgICAgICAgICB0eXBlOiAndGV4dC9qYXZhc2NyaXB0J1xuICAgICAgICB9KTsgLy8gdmFyIGJsb2IgPSBuZXcgQmxvYihbJ3NlbGYub25tZXNzYWdlID0gJywgZm4udG9TdHJpbmcoKV0sIHsgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcgfSk7XG5cbiAgICAgICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICAgIHJldHVybiBuZXcgV29ya2VyKHVybCk7XG4gICAgICB9XG5cbiAgICAgIHdvcmtlckZuID0gZm47XG4gICAgICByZXR1cm4gd29ya2VyUHJveHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0dXBXb3JrZXIoKSB7XG4gICAgICBpZiAoIXdvcmtlckluc3RhbmNlKSB7XG4gICAgICAgIHdvcmtlckluc3RhbmNlID0gY3JlYXRlV29ya2VyKGZ1bmN0aW9uIHdvcmtlclN0YXJ0KGUpIHtcbiAgICAgICAgICBmdW5jdGlvbiBkYXRhRnVuY3Rpb25NYW5hZ2VyKCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVMYXllcnMobGF5ZXJzLCBjb21wcykge1xuICAgICAgICAgICAgICB2YXIgbGF5ZXJEYXRhO1xuICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG4gICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICB2YXIgakxlbjtcbiAgICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICAgIHZhciBrTGVuO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIGxheWVyRGF0YSA9IGxheWVyc1tpXTtcblxuICAgICAgICAgICAgICAgIGlmICgna3MnIGluIGxheWVyRGF0YSAmJiAhbGF5ZXJEYXRhLmNvbXBsZXRlZCkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhLmNvbXBsZXRlZCA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEuaGFzTWFzaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza1Byb3BzID0gbGF5ZXJEYXRhLm1hc2tzUHJvcGVydGllcztcbiAgICAgICAgICAgICAgICAgICAgakxlbiA9IG1hc2tQcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQuay5pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKG1hc2tQcm9wc1tqXS5wdC5rKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga0xlbiA9IG1hc2tQcm9wc1tqXS5wdC5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0Lmtba10uc1swXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0Lmtba10uZVswXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRGF0YS50eSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBsYXllckRhdGEubGF5ZXJzID0gZmluZENvbXBMYXllcnMobGF5ZXJEYXRhLnJlZklkLCBjb21wcyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTGF5ZXJzKGxheWVyRGF0YS5sYXllcnMsIGNvbXBzKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobGF5ZXJEYXRhLnR5ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlU2hhcGVzKGxheWVyRGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYXllckRhdGEudHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVUZXh0KGxheWVyRGF0YSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvbXBsZXRlQ2hhcnMoY2hhcnMsIGFzc2V0cykge1xuICAgICAgICAgICAgICBpZiAoY2hhcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGNoYXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNoYXJzW2ldLnQgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGNvbXBEYXRhID0gZmluZENvbXAoY2hhcnNbaV0uZGF0YS5yZWZJZCwgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNbaV0uZGF0YS5sYXllcnMgPSBmaW5kQ29tcExheWVycyhjaGFyc1tpXS5kYXRhLnJlZklkLCBhc3NldHMpOyAvLyBjaGFyc1tpXS5kYXRhLmlwID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0uZGF0YS5vcCA9IDk5OTk5O1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLnN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0uZGF0YS5zciA9IDE7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJzW2ldLncgPSBjb21wRGF0YS53O1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLmtzID0ge1xuICAgICAgICAgICAgICAgICAgICAvLyAgIGE6IHsgazogWzAsIDAsIDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcDogeyBrOiBbMCwgLWNvbXBEYXRhLmgsIDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgcjogeyBrOiAwLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgczogeyBrOiBbMTAwLCAxMDBdLCBhOiAwIH0sXG4gICAgICAgICAgICAgICAgICAgIC8vICAgbzogeyBrOiAxMDAsIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gfTtcblxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUxheWVycyhjaGFyc1tpXS5kYXRhLmxheWVycywgYXNzZXRzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENvbXAoaWQsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgdmFyIGxlbiA9IGNvbXBzLmxlbmd0aDtcblxuICAgICAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgICAgIGlmIChjb21wc1tpXS5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBjb21wc1tpXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZmluZENvbXBMYXllcnMoaWQsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBjb21wID0gZmluZENvbXAoaWQsIGNvbXBzKTtcblxuICAgICAgICAgICAgICBpZiAoY29tcCkge1xuICAgICAgICAgICAgICAgIGlmICghY29tcC5sYXllcnMuX191c2VkKSB7XG4gICAgICAgICAgICAgICAgICBjb21wLmxheWVycy5fX3VzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXAubGF5ZXJzO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGNvbXAubGF5ZXJzKSk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVTaGFwZXMoYXJyKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gYXJyLmxlbmd0aDtcbiAgICAgICAgICAgICAgdmFyIGo7XG4gICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFycltpXS50eSA9PT0gJ3NoJykge1xuICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Muayk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBqTGVuID0gYXJyW2ldLmtzLmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Mua1tqXS5zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhhcnJbaV0ua3Mua1tqXS5lWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMoYXJyW2ldLml0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhwYXRoKSB7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gcGF0aC5pLmxlbmd0aDtcblxuICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBwYXRoLmlbaV1bMF0gKz0gcGF0aC52W2ldWzBdO1xuICAgICAgICAgICAgICAgIHBhdGguaVtpXVsxXSArPSBwYXRoLnZbaV1bMV07XG4gICAgICAgICAgICAgICAgcGF0aC5vW2ldWzBdICs9IHBhdGgudltpXVswXTtcbiAgICAgICAgICAgICAgICBwYXRoLm9baV1bMV0gKz0gcGF0aC52W2ldWzFdO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoZWNrVmVyc2lvbihtaW5pbXVtLCBhbmltVmVyc2lvblN0cmluZykge1xuICAgICAgICAgICAgICB2YXIgYW5pbVZlcnNpb24gPSBhbmltVmVyc2lvblN0cmluZyA/IGFuaW1WZXJzaW9uU3RyaW5nLnNwbGl0KCcuJykgOiBbMTAwLCAxMDAsIDEwMF07XG5cbiAgICAgICAgICAgICAgaWYgKG1pbmltdW1bMF0gPiBhbmltVmVyc2lvblswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFuaW1WZXJzaW9uWzBdID4gbWluaW11bVswXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtaW5pbXVtWzFdID4gYW5pbVZlcnNpb25bMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChhbmltVmVyc2lvblsxXSA+IG1pbmltdW1bMV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAobWluaW11bVsyXSA+IGFuaW1WZXJzaW9uWzJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5pbVZlcnNpb25bMl0gPiBtaW5pbXVtWzJdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBjaGVja1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCA0LCAxNF07XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gdXBkYXRlVGV4dExheWVyKHRleHRMYXllcikge1xuICAgICAgICAgICAgICAgIHZhciBkb2N1bWVudERhdGEgPSB0ZXh0TGF5ZXIudC5kO1xuICAgICAgICAgICAgICAgIHRleHRMYXllci50LmQgPSB7XG4gICAgICAgICAgICAgICAgICBrOiBbe1xuICAgICAgICAgICAgICAgICAgICBzOiBkb2N1bWVudERhdGEsXG4gICAgICAgICAgICAgICAgICAgIHQ6IDBcbiAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tDaGFycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzQsIDcsIDk5XTtcbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuY2hhcnMgJiYgIWNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICB2YXIgbGVuID0gYW5pbWF0aW9uRGF0YS5jaGFycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY2hhckRhdGEgPSBhbmltYXRpb25EYXRhLmNoYXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGFyRGF0YS5kYXRhICYmIGNoYXJEYXRhLmRhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMoY2hhckRhdGEuZGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEuaXAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEub3AgPSA5OTk5OTtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnN0ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLmtzID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFsxMDAsIDEwMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogMTAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgIGlmICghYW5pbWF0aW9uRGF0YS5jaGFyc1tpXS50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNoYXBlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHk6ICdubydcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhckRhdGEuZGF0YS5zaGFwZXNbMF0uaXQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHA6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogWzEwMCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzazoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eTogJ3RyJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tQYXRoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzUsIDcsIDE1XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0TGF5ZXIodGV4dExheWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhdGhEYXRhID0gdGV4dExheWVyLnQucDtcblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aERhdGEuYSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgIHBhdGhEYXRhLmEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgICAgICAgIGs6IHBhdGhEYXRhLmFcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXRoRGF0YS5wID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgcGF0aERhdGEucCA9IHtcbiAgICAgICAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgICAgICAgazogcGF0aERhdGEucFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhdGhEYXRhLnIgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICBwYXRoRGF0YS5yID0ge1xuICAgICAgICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICAgICAgICBrOiBwYXRoRGF0YS5yXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGV4dExheWVyKGxheWVyc1tpXSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tDb2xvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCAxLCA5XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBpdGVyYXRlU2hhcGVzKHNoYXBlcykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBzaGFwZXMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTaGFwZXMoc2hhcGVzW2ldLml0KTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZmwnIHx8IHNoYXBlc1tpXS50eSA9PT0gJ3N0Jykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLmMuayAmJiBzaGFwZXNbaV0uYy5rWzBdLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBqTGVuID0gc2hhcGVzW2ldLmMuay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcGVzW2ldLmMua1tqXS5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1swXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1sxXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1syXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlc1tpXS5jLmtbal0uc1szXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZXNbaV0uYy5rW2pdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzBdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzFdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzJdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5lWzNdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1swXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1sxXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1syXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1szXSAvPSAyNTU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBmdW5jdGlvbiBpdGVyYXRlTGF5ZXJzKGxheWVycykge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJzW2ldLnR5ID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVTaGFwZXMobGF5ZXJzW2ldLnNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICB2YXIgY2hlY2tTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBtaW5pbXVtVmVyc2lvbiA9IFs0LCA0LCAxOF07XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVDbG9zaW5nU2hhcGVzKGFycikge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChhcnJbaV0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0ua3Muay5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBqTGVuID0gYXJyW2ldLmtzLmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rW2pdLnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldLmtzLmtbal0uc1swXS5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS5rcy5rW2pdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW2ldLmtzLmtbal0uZVswXS5jID0gYXJyW2ldLmNsb3NlZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlQ2xvc2luZ1NoYXBlcyhhcnJbaV0uaXQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxheWVyRGF0YTtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgICB2YXIgajtcbiAgICAgICAgICAgICAgICB2YXIgakxlbjtcbiAgICAgICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgICAgICB2YXIga0xlbjtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgbGF5ZXJEYXRhID0gbGF5ZXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJEYXRhLmhhc01hc2spIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hc2tQcm9wcyA9IGxheWVyRGF0YS5tYXNrc1Byb3BlcnRpZXM7XG4gICAgICAgICAgICAgICAgICAgIGpMZW4gPSBtYXNrUHJvcHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0LmsuaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0LmsuYyA9IG1hc2tQcm9wc1tqXS5jbDtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAga0xlbiA9IG1hc2tQcm9wc1tqXS5wdC5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Byb3BzW2pdLnB0Lmtba10ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tQcm9wc1tqXS5wdC5rW2tdLnNbMF0uYyA9IG1hc2tQcm9wc1tqXS5jbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQua1trXS5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0Lmtba10uZVswXS5jID0gbWFza1Byb3BzW2pdLmNsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEudHkgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVDbG9zaW5nU2hhcGVzKGxheWVyRGF0YS5zaGFwZXMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1ZlcnNpb24obWluaW11bVZlcnNpb24sIGFuaW1hdGlvbkRhdGEudikpIHtcbiAgICAgICAgICAgICAgICAgIGl0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5sYXllcnMpO1xuXG4gICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhbmltYXRpb25EYXRhLmFzc2V0cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0oKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVEYXRhKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuX19jb21wbGV0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNoZWNrQ29sb3JzKGFuaW1hdGlvbkRhdGEpO1xuICAgICAgICAgICAgICBjaGVja1RleHQoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrQ2hhcnMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrUGF0aFByb3BlcnRpZXMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrU2hhcGVzKGFuaW1hdGlvbkRhdGEpO1xuICAgICAgICAgICAgICBjb21wbGV0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycywgYW5pbWF0aW9uRGF0YS5hc3NldHMpO1xuICAgICAgICAgICAgICBjb21wbGV0ZUNoYXJzKGFuaW1hdGlvbkRhdGEuY2hhcnMsIGFuaW1hdGlvbkRhdGEuYXNzZXRzKTtcbiAgICAgICAgICAgICAgYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVUZXh0KGRhdGEpIHtcbiAgICAgICAgICAgICAgaWYgKGRhdGEudC5hLmxlbmd0aCA9PT0gMCAmJiAhKCdtJyBpbiBkYXRhLnQucCkpIHsvLyBkYXRhLnNpbmdsZVNoYXBlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbW9kdWxlT2IgPSB7fTtcbiAgICAgICAgICAgIG1vZHVsZU9iLmNvbXBsZXRlRGF0YSA9IGNvbXBsZXRlRGF0YTtcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrQ29sb3JzID0gY2hlY2tDb2xvcnM7XG4gICAgICAgICAgICBtb2R1bGVPYi5jaGVja0NoYXJzID0gY2hlY2tDaGFycztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrUGF0aFByb3BlcnRpZXMgPSBjaGVja1BhdGhQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgbW9kdWxlT2IuY2hlY2tTaGFwZXMgPSBjaGVja1NoYXBlcztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNvbXBsZXRlTGF5ZXJzID0gY29tcGxldGVMYXllcnM7XG4gICAgICAgICAgICByZXR1cm4gbW9kdWxlT2I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfd29ya2VyU2VsZi5kYXRhTWFuYWdlcikge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIgPSBkYXRhRnVuY3Rpb25NYW5hZ2VyKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFfd29ya2VyU2VsZi5hc3NldExvYWRlcikge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuYXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGZvcm1hdFJlc3BvbnNlKHhocikge1xuICAgICAgICAgICAgICAgIC8vIHVzaW5nIHR5cGVvZiBkb3VibGVzIHRoZSB0aW1lIG9mIGV4ZWN1dGlvbiBvZiB0aGlzIG1ldGhvZCxcbiAgICAgICAgICAgICAgICAvLyBzbyBpZiBhdmFpbGFibGUsIGl0J3MgYmV0dGVyIHRvIHVzZSB0aGUgaGVhZGVyIHRvIHZhbGlkYXRlIHRoZSB0eXBlXG4gICAgICAgICAgICAgICAgdmFyIGNvbnRlbnRUeXBlSGVhZGVyID0geGhyLmdldFJlc3BvbnNlSGVhZGVyKCdjb250ZW50LXR5cGUnKTtcblxuICAgICAgICAgICAgICAgIGlmIChjb250ZW50VHlwZUhlYWRlciAmJiB4aHIucmVzcG9uc2VUeXBlID09PSAnanNvbicgJiYgY29udGVudFR5cGVIZWFkZXIuaW5kZXhPZignanNvbicpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlICYmIF90eXBlb2YkNSh4aHIucmVzcG9uc2UpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIHhoci5yZXNwb25zZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlc3BvbnNlICYmIHR5cGVvZiB4aHIucmVzcG9uc2UgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2VUZXh0KSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGxvYWRBc3NldChwYXRoLCBmdWxsUGF0aCwgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOyAvLyBzZXQgcmVzcG9uc2VUeXBlIGFmdGVyIGNhbGxpbmcgb3BlbiBvciBJRSB3aWxsIGJyZWFrLlxuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoaXMgY3Jhc2hlcyBvbiBBbmRyb2lkIFdlYlZpZXcgcHJpb3IgdG8gS2l0S2F0XG4gICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2pzb24nO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxuXG5cbiAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvcm1hdFJlc3BvbnNlKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2socmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZSA9IGZvcm1hdFJlc3BvbnNlKHhocik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAvLyBIYWNrIHRvIHdvcmthcm91bmQgYmFubmVyIHZhbGlkYXRpb25cbiAgICAgICAgICAgICAgICAgIHhoci5vcGVuKFsnRycsICdFJywgJ1QnXS5qb2luKCcnKSwgcGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgIC8vIEhhY2sgdG8gd29ya2Fyb3VuZCBiYW5uZXIgdmFsaWRhdGlvblxuICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oWydHJywgJ0UnLCAnVCddLmpvaW4oJycpLCBmdWxsUGF0aCArICcvJyArIHBhdGgsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxvYWQ6IGxvYWRBc3NldFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChlLmRhdGEudHlwZSA9PT0gJ2xvYWRBbmltYXRpb24nKSB7XG4gICAgICAgICAgICBfd29ya2VyU2VsZi5hc3NldExvYWRlci5sb2FkKGUuZGF0YS5wYXRoLCBlLmRhdGEuZnVsbFBhdGgsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLmRhdGFNYW5hZ2VyLmNvbXBsZXRlRGF0YShkYXRhKTtcblxuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuZGF0YS50eXBlID09PSAnY29tcGxldGUnKSB7XG4gICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gZS5kYXRhLmFuaW1hdGlvbjtcblxuICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIuY29tcGxldGVEYXRhKGFuaW1hdGlvbik7XG5cbiAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgcGF5bG9hZDogYW5pbWF0aW9uLFxuICAgICAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJ1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChlLmRhdGEudHlwZSA9PT0gJ2xvYWREYXRhJykge1xuICAgICAgICAgICAgX3dvcmtlclNlbGYuYXNzZXRMb2FkZXIubG9hZChlLmRhdGEucGF0aCwgZS5kYXRhLmZ1bGxQYXRoLCBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBwYXlsb2FkOiBkYXRhLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICBfd29ya2VyU2VsZi5wb3N0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgaWQ6IGUuZGF0YS5pZCxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdlcnJvcidcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHdvcmtlckluc3RhbmNlLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgIHZhciBkYXRhID0gZXZlbnQuZGF0YTtcbiAgICAgICAgICB2YXIgaWQgPSBkYXRhLmlkO1xuICAgICAgICAgIHZhciBwcm9jZXNzID0gcHJvY2Vzc2VzW2lkXTtcbiAgICAgICAgICBwcm9jZXNzZXNbaWRdID0gbnVsbDtcblxuICAgICAgICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm9uQ29tcGxldGUoZGF0YS5wYXlsb2FkKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHByb2Nlc3Mub25FcnJvcikge1xuICAgICAgICAgICAgcHJvY2Vzcy5vbkVycm9yKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVByb2Nlc3Mob25Db21wbGV0ZSwgb25FcnJvcikge1xuICAgICAgX2NvdW50ZXJJZCArPSAxO1xuICAgICAgdmFyIGlkID0gJ3Byb2Nlc3NJZF8nICsgX2NvdW50ZXJJZDtcbiAgICAgIHByb2Nlc3Nlc1tpZF0gPSB7XG4gICAgICAgIG9uQ29tcGxldGU6IG9uQ29tcGxldGUsXG4gICAgICAgIG9uRXJyb3I6IG9uRXJyb3JcbiAgICAgIH07XG4gICAgICByZXR1cm4gaWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZEFuaW1hdGlvbihwYXRoLCBvbkNvbXBsZXRlLCBvbkVycm9yKSB7XG4gICAgICBzZXR1cFdvcmtlcigpO1xuICAgICAgdmFyIHByb2Nlc3NJZCA9IGNyZWF0ZVByb2Nlc3Mob25Db21wbGV0ZSwgb25FcnJvcik7XG4gICAgICB3b3JrZXJJbnN0YW5jZS5wb3N0TWVzc2FnZSh7XG4gICAgICAgIHR5cGU6ICdsb2FkQW5pbWF0aW9uJyxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgZnVsbFBhdGg6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWREYXRhKHBhdGgsIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2xvYWREYXRhJyxcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgZnVsbFBhdGg6IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlQW5pbWF0aW9uKGFuaW0sIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2NvbXBsZXRlJyxcbiAgICAgICAgYW5pbWF0aW9uOiBhbmltLFxuICAgICAgICBpZDogcHJvY2Vzc0lkXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbG9hZEFuaW1hdGlvbjogbG9hZEFuaW1hdGlvbixcbiAgICAgIGxvYWREYXRhOiBsb2FkRGF0YSxcbiAgICAgIGNvbXBsZXRlQW5pbWF0aW9uOiBjb21wbGV0ZUFuaW1hdGlvblxuICAgIH07XG4gIH0oKTtcblxuICB2YXIgSW1hZ2VQcmVsb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3h5SW1hZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgY2FudmFzID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICAgIGNhbnZhcy53aWR0aCA9IDE7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gMTtcbiAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwKSc7XG4gICAgICBjdHguZmlsbFJlY3QoMCwgMCwgMSwgMSk7XG4gICAgICByZXR1cm4gY2FudmFzO1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGltYWdlTG9hZGVkKCkge1xuICAgICAgdGhpcy5sb2FkZWRBc3NldHMgKz0gMTtcblxuICAgICAgaWYgKHRoaXMubG9hZGVkQXNzZXRzID09PSB0aGlzLnRvdGFsSW1hZ2VzICYmIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9PT0gdGhpcy50b3RhbEZvb3RhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENiKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvb3RhZ2VMb2FkZWQoKSB7XG4gICAgICB0aGlzLmxvYWRlZEZvb3RhZ2VzQ291bnQgKz0gMTtcblxuICAgICAgaWYgKHRoaXMubG9hZGVkQXNzZXRzID09PSB0aGlzLnRvdGFsSW1hZ2VzICYmIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9PT0gdGhpcy50b3RhbEZvb3RhZ2VzKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc0xvYWRlZENiKSB7XG4gICAgICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFzc2V0c1BhdGgoYXNzZXREYXRhLCBhc3NldHNQYXRoLCBvcmlnaW5hbFBhdGgpIHtcbiAgICAgIHZhciBwYXRoID0gJyc7XG5cbiAgICAgIGlmIChhc3NldERhdGEuZSkge1xuICAgICAgICBwYXRoID0gYXNzZXREYXRhLnA7XG4gICAgICB9IGVsc2UgaWYgKGFzc2V0c1BhdGgpIHtcbiAgICAgICAgdmFyIGltYWdlUGF0aCA9IGFzc2V0RGF0YS5wO1xuXG4gICAgICAgIGlmIChpbWFnZVBhdGguaW5kZXhPZignaW1hZ2VzLycpICE9PSAtMSkge1xuICAgICAgICAgIGltYWdlUGF0aCA9IGltYWdlUGF0aC5zcGxpdCgnLycpWzFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcGF0aCA9IGFzc2V0c1BhdGggKyBpbWFnZVBhdGg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICAgICAgICBwYXRoICs9IGFzc2V0RGF0YS51ID8gYXNzZXREYXRhLnUgOiAnJztcbiAgICAgICAgcGF0aCArPSBhc3NldERhdGEucDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGVzdEltYWdlTG9hZGVkKGltZykge1xuICAgICAgdmFyIF9jb3VudCA9IDA7XG4gICAgICB2YXIgaW50ZXJ2YWxJZCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGJveCA9IGltZy5nZXRCQm94KCk7XG5cbiAgICAgICAgaWYgKGJveC53aWR0aCB8fCBfY291bnQgPiA1MDApIHtcbiAgICAgICAgICB0aGlzLl9pbWFnZUxvYWRlZCgpO1xuXG4gICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnRlcnZhbElkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9jb3VudCArPSAxO1xuICAgICAgfS5iaW5kKHRoaXMpLCA1MCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW1hZ2VEYXRhKGFzc2V0RGF0YSkge1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgdmFyIGltZyA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuXG4gICAgICBpZiAoaXNTYWZhcmkpIHtcbiAgICAgICAgdGhpcy50ZXN0SW1hZ2VMb2FkZWQoaW1nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5faW1hZ2VMb2FkZWQsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBvYi5pbWcgPSBwcm94eUltYWdlO1xuXG4gICAgICAgIHRoaXMuX2ltYWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgIGltZy5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgcGF0aCk7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZChpbWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudEhlbHBlci5hcHBlbmRDaGlsZChpbWcpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2IgPSB7XG4gICAgICAgIGltZzogaW1nLFxuICAgICAgICBhc3NldERhdGE6IGFzc2V0RGF0YVxuICAgICAgfTtcbiAgICAgIHJldHVybiBvYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbWdEYXRhKGFzc2V0RGF0YSkge1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGFzc2V0RGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgdmFyIGltZyA9IGNyZWF0ZVRhZygnaW1nJyk7XG4gICAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5faW1hZ2VMb2FkZWQsIGZhbHNlKTtcbiAgICAgIGltZy5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2IuaW1nID0gcHJveHlJbWFnZTtcblxuICAgICAgICB0aGlzLl9pbWFnZUxvYWRlZCgpO1xuICAgICAgfS5iaW5kKHRoaXMpLCBmYWxzZSk7XG4gICAgICBpbWcuc3JjID0gcGF0aDtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgaW1nOiBpbWcsXG4gICAgICAgIGFzc2V0RGF0YTogYXNzZXREYXRhXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9iO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZvb3RhZ2VEYXRhKGRhdGEpIHtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgYXNzZXREYXRhOiBkYXRhXG4gICAgICB9O1xuICAgICAgdmFyIHBhdGggPSBnZXRBc3NldHNQYXRoKGRhdGEsIHRoaXMuYXNzZXRzUGF0aCwgdGhpcy5wYXRoKTtcbiAgICAgIGRhdGFNYW5hZ2VyLmxvYWREYXRhKHBhdGgsIGZ1bmN0aW9uIChmb290YWdlRGF0YSkge1xuICAgICAgICBvYi5pbWcgPSBmb290YWdlRGF0YTtcblxuICAgICAgICB0aGlzLl9mb290YWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgb2IuaW1nID0ge307XG5cbiAgICAgICAgdGhpcy5fZm9vdGFnZUxvYWRlZCgpO1xuICAgICAgfS5iaW5kKHRoaXMpKTtcbiAgICAgIHJldHVybiBvYjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkQXNzZXRzKGFzc2V0cywgY2IpIHtcbiAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkQ2IgPSBjYjtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGFzc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoIWFzc2V0c1tpXS5sYXllcnMpIHtcbiAgICAgICAgICBpZiAoIWFzc2V0c1tpXS50IHx8IGFzc2V0c1tpXS50ID09PSAnc2VxJykge1xuICAgICAgICAgICAgdGhpcy50b3RhbEltYWdlcyArPSAxO1xuICAgICAgICAgICAgdGhpcy5pbWFnZXMucHVzaCh0aGlzLl9jcmVhdGVJbWFnZURhdGEoYXNzZXRzW2ldKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhc3NldHNbaV0udCA9PT0gMykge1xuICAgICAgICAgICAgdGhpcy50b3RhbEZvb3RhZ2VzICs9IDE7XG4gICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKHRoaXMuY3JlYXRlRm9vdGFnZURhdGEoYXNzZXRzW2ldKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UGF0aChwYXRoKSB7XG4gICAgICB0aGlzLnBhdGggPSBwYXRoIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEFzc2V0c1BhdGgocGF0aCkge1xuICAgICAgdGhpcy5hc3NldHNQYXRoID0gcGF0aCB8fCAnJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRBc3NldChhc3NldERhdGEpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmltYWdlcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmltYWdlc1tpXS5hc3NldERhdGEgPT09IGFzc2V0RGF0YSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmltYWdlc1tpXS5pbWc7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmltYWdlc0xvYWRlZENiID0gbnVsbDtcbiAgICAgIHRoaXMuaW1hZ2VzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGVkSW1hZ2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxJbWFnZXMgPT09IHRoaXMubG9hZGVkQXNzZXRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRlZEZvb3RhZ2VzKCkge1xuICAgICAgcmV0dXJuIHRoaXMudG90YWxGb290YWdlcyA9PT0gdGhpcy5sb2FkZWRGb290YWdlc0NvdW50O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldENhY2hlVHlwZSh0eXBlLCBlbGVtZW50SGVscGVyKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdGhpcy5fZWxlbWVudEhlbHBlciA9IGVsZW1lbnRIZWxwZXI7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUltYWdlRGF0YSA9IHRoaXMuY3JlYXRlSW1hZ2VEYXRhLmJpbmQodGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jcmVhdGVJbWFnZURhdGEgPSB0aGlzLmNyZWF0ZUltZ0RhdGEuYmluZCh0aGlzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBJbWFnZVByZWxvYWRlckZhY3RvcnkoKSB7XG4gICAgICB0aGlzLl9pbWFnZUxvYWRlZCA9IGltYWdlTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLl9mb290YWdlTG9hZGVkID0gZm9vdGFnZUxvYWRlZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy50ZXN0SW1hZ2VMb2FkZWQgPSB0ZXN0SW1hZ2VMb2FkZWQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuY3JlYXRlRm9vdGFnZURhdGEgPSBjcmVhdGVGb290YWdlRGF0YS5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5hc3NldHNQYXRoID0gJyc7XG4gICAgICB0aGlzLnBhdGggPSAnJztcbiAgICAgIHRoaXMudG90YWxJbWFnZXMgPSAwO1xuICAgICAgdGhpcy50b3RhbEZvb3RhZ2VzID0gMDtcbiAgICAgIHRoaXMubG9hZGVkQXNzZXRzID0gMDtcbiAgICAgIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCA9IDA7XG4gICAgICB0aGlzLmltYWdlc0xvYWRlZENiID0gbnVsbDtcbiAgICAgIHRoaXMuaW1hZ2VzID0gW107XG4gICAgfVxuXG4gICAgSW1hZ2VQcmVsb2FkZXJGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgIGxvYWRBc3NldHM6IGxvYWRBc3NldHMsXG4gICAgICBzZXRBc3NldHNQYXRoOiBzZXRBc3NldHNQYXRoLFxuICAgICAgc2V0UGF0aDogc2V0UGF0aCxcbiAgICAgIGxvYWRlZEltYWdlczogbG9hZGVkSW1hZ2VzLFxuICAgICAgbG9hZGVkRm9vdGFnZXM6IGxvYWRlZEZvb3RhZ2VzLFxuICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgIGdldEFzc2V0OiBnZXRBc3NldCxcbiAgICAgIGNyZWF0ZUltZ0RhdGE6IGNyZWF0ZUltZ0RhdGEsXG4gICAgICBjcmVhdGVJbWFnZURhdGE6IGNyZWF0ZUltYWdlRGF0YSxcbiAgICAgIGltYWdlTG9hZGVkOiBpbWFnZUxvYWRlZCxcbiAgICAgIGZvb3RhZ2VMb2FkZWQ6IGZvb3RhZ2VMb2FkZWQsXG4gICAgICBzZXRDYWNoZVR5cGU6IHNldENhY2hlVHlwZVxuICAgIH07XG4gICAgcmV0dXJuIEltYWdlUHJlbG9hZGVyRmFjdG9yeTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIEJhc2VFdmVudCgpIHt9XG5cbiAgQmFzZUV2ZW50LnByb3RvdHlwZSA9IHtcbiAgICB0cmlnZ2VyRXZlbnQ6IGZ1bmN0aW9uIHRyaWdnZXJFdmVudChldmVudE5hbWUsIGFyZ3MpIHtcbiAgICAgIGlmICh0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2JzW2V2ZW50TmFtZV07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBjYWxsYmFja3NbaV0oYXJncyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZEV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjaykge1xuICAgICAgaWYgKCF0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXS5wdXNoKGNhbGxiYWNrKTtcblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH0sXG4gICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5fY2JzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fY2JzW2V2ZW50TmFtZV0ubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2Nic1tldmVudE5hbWVdW2ldID09PSBjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fY2JzW2V2ZW50TmFtZV0uc3BsaWNlKGksIDEpO1xuXG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICBsZW4gLT0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2Nic1tldmVudE5hbWVdLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2YXIgbWFya2VyUGFyc2VyID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHBhcnNlUGF5bG9hZExpbmVzKHBheWxvYWQpIHtcbiAgICAgIHZhciBsaW5lcyA9IHBheWxvYWQuc3BsaXQoJ1xcclxcbicpO1xuICAgICAgdmFyIGtleXMgPSB7fTtcbiAgICAgIHZhciBsaW5lO1xuICAgICAgdmFyIGtleXNDb3VudCA9IDA7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgbGluZSA9IGxpbmVzW2ldLnNwbGl0KCc6Jyk7XG5cbiAgICAgICAgaWYgKGxpbmUubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAga2V5c1tsaW5lWzBdXSA9IGxpbmVbMV0udHJpbSgpO1xuICAgICAgICAgIGtleXNDb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChrZXlzQ291bnQgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBrZXlzO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoX21hcmtlcnMpIHtcbiAgICAgIHZhciBtYXJrZXJzID0gW107XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX21hcmtlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgdmFyIF9tYXJrZXIgPSBfbWFya2Vyc1tpXTtcbiAgICAgICAgdmFyIG1hcmtlckRhdGEgPSB7XG4gICAgICAgICAgdGltZTogX21hcmtlci50bSxcbiAgICAgICAgICBkdXJhdGlvbjogX21hcmtlci5kclxuICAgICAgICB9O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgbWFya2VyRGF0YS5wYXlsb2FkID0gSlNPTi5wYXJzZShfbWFya2Vyc1tpXS5jbSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgbWFya2VyRGF0YS5wYXlsb2FkID0gcGFyc2VQYXlsb2FkTGluZXMoX21hcmtlcnNbaV0uY20pO1xuICAgICAgICAgIH0gY2F0Y2ggKF9fKSB7XG4gICAgICAgICAgICBtYXJrZXJEYXRhLnBheWxvYWQgPSB7XG4gICAgICAgICAgICAgIG5hbWU6IF9tYXJrZXJzW2ldLmNtXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtlcnMucHVzaChtYXJrZXJEYXRhKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hcmtlcnM7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBQcm9qZWN0SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9zaXRpb24oY29tcCkge1xuICAgICAgdGhpcy5jb21wb3NpdGlvbnMucHVzaChjb21wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgZnVuY3Rpb24gX3RoaXNQcm9qZWN0RnVuY3Rpb24obmFtZSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmNvbXBvc2l0aW9ucy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5jb21wb3NpdGlvbnNbaV0uZGF0YSAmJiB0aGlzLmNvbXBvc2l0aW9uc1tpXS5kYXRhLm5tID09PSBuYW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wb3NpdGlvbnNbaV0ucHJlcGFyZUZyYW1lICYmIHRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEueHQpIHtcbiAgICAgICAgICAgICAgdGhpcy5jb21wb3NpdGlvbnNbaV0ucHJlcGFyZUZyYW1lKHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcG9zaXRpb25zW2ldLmNvbXBJbnRlcmZhY2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIF90aGlzUHJvamVjdEZ1bmN0aW9uLmNvbXBvc2l0aW9ucyA9IFtdO1xuICAgICAgX3RoaXNQcm9qZWN0RnVuY3Rpb24uY3VycmVudEZyYW1lID0gMDtcbiAgICAgIF90aGlzUHJvamVjdEZ1bmN0aW9uLnJlZ2lzdGVyQ29tcG9zaXRpb24gPSByZWdpc3RlckNvbXBvc2l0aW9uO1xuICAgICAgcmV0dXJuIF90aGlzUHJvamVjdEZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgcmVuZGVyZXJzID0ge307XG5cbiAgdmFyIHJlZ2lzdGVyUmVuZGVyZXIgPSBmdW5jdGlvbiByZWdpc3RlclJlbmRlcmVyKGtleSwgdmFsdWUpIHtcbiAgICByZW5kZXJlcnNba2V5XSA9IHZhbHVlO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFJlbmRlcmVyKGtleSkge1xuICAgIHJldHVybiByZW5kZXJlcnNba2V5XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRSZW5kZXJlcigpIHtcbiAgICAvLyBSZXR1cm5zIGNhbnZhcyBieSBkZWZhdWx0IGZvciBjb21wYXRpYmlsaXR5XG4gICAgaWYgKHJlbmRlcmVycy5jYW52YXMpIHtcbiAgICAgIHJldHVybiAnY2FudmFzJztcbiAgICB9IC8vIFJldHVybnMgYW55IHJlbmRlcmVyIHRoYXQgaXMgcmVnaXN0ZXJlZFxuXG5cbiAgICBmb3IgKHZhciBrZXkgaW4gcmVuZGVyZXJzKSB7XG4gICAgICBpZiAocmVuZGVyZXJzW2tleV0pIHtcbiAgICAgICAgcmV0dXJuIGtleTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mJDQob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkNCA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDQgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQ0KG9iaik7IH1cblxuICB2YXIgQW5pbWF0aW9uSXRlbSA9IGZ1bmN0aW9uIEFuaW1hdGlvbkl0ZW0oKSB7XG4gICAgdGhpcy5fY2JzID0gW107XG4gICAgdGhpcy5uYW1lID0gJyc7XG4gICAgdGhpcy5wYXRoID0gJyc7XG4gICAgdGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgIHRoaXMuY3VycmVudEZyYW1lID0gMDtcbiAgICB0aGlzLmN1cnJlbnRSYXdGcmFtZSA9IDA7XG4gICAgdGhpcy5maXJzdEZyYW1lID0gMDtcbiAgICB0aGlzLnRvdGFsRnJhbWVzID0gMDtcbiAgICB0aGlzLmZyYW1lUmF0ZSA9IDA7XG4gICAgdGhpcy5mcmFtZU11bHQgPSAwO1xuICAgIHRoaXMucGxheVNwZWVkID0gMTtcbiAgICB0aGlzLnBsYXlEaXJlY3Rpb24gPSAxO1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcbiAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSB7fTtcbiAgICB0aGlzLmFzc2V0cyA9IFtdO1xuICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgIHRoaXMuYXV0b3BsYXkgPSBmYWxzZTtcbiAgICB0aGlzLmxvb3AgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuYW5pbWF0aW9uSUQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB0aGlzLmFzc2V0c1BhdGggPSAnJztcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSAwO1xuICAgIHRoaXMuc2VnbWVudFBvcyA9IDA7XG4gICAgdGhpcy5pc1N1YmZyYW1lRW5hYmxlZCA9IGdldFN1YmZyYW1lRW5hYmxlZCgpO1xuICAgIHRoaXMuc2VnbWVudHMgPSBbXTtcbiAgICB0aGlzLl9pZGxlID0gdHJ1ZTtcbiAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gZmFsc2U7XG4gICAgdGhpcy5wcm9qZWN0SW50ZXJmYWNlID0gUHJvamVjdEludGVyZmFjZSgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIgPSBuZXcgSW1hZ2VQcmVsb2FkZXIoKTtcbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlciA9IGF1ZGlvQ29udHJvbGxlckZhY3RvcnkoKTtcbiAgICB0aGlzLm1hcmtlcnMgPSBbXTtcbiAgICB0aGlzLmNvbmZpZ0FuaW1hdGlvbiA9IHRoaXMuY29uZmlnQW5pbWF0aW9uLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNldHVwRXJyb3IgPSB0aGlzLm9uU2V0dXBFcnJvci5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25TZWdtZW50Q29tcGxldGUgPSB0aGlzLm9uU2VnbWVudENvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQgPSBuZXcgQk1FbnRlckZyYW1lRXZlbnQoJ2RyYXduRnJhbWUnLCAwLCAwLCAwKTtcbiAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luID0gZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKTtcbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFdmVudF0sIEFuaW1hdGlvbkl0ZW0pO1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFBhcmFtcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICBpZiAocGFyYW1zLndyYXBwZXIgfHwgcGFyYW1zLmNvbnRhaW5lcikge1xuICAgICAgdGhpcy53cmFwcGVyID0gcGFyYW1zLndyYXBwZXIgfHwgcGFyYW1zLmNvbnRhaW5lcjtcbiAgICB9XG5cbiAgICB2YXIgYW5pbVR5cGUgPSAnc3ZnJztcblxuICAgIGlmIChwYXJhbXMuYW5pbVR5cGUpIHtcbiAgICAgIGFuaW1UeXBlID0gcGFyYW1zLmFuaW1UeXBlO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLnJlbmRlcmVyKSB7XG4gICAgICBhbmltVHlwZSA9IHBhcmFtcy5yZW5kZXJlcjtcbiAgICB9XG5cbiAgICB2YXIgUmVuZGVyZXJDbGFzcyA9IGdldFJlbmRlcmVyKGFuaW1UeXBlKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gbmV3IFJlbmRlcmVyQ2xhc3ModGhpcywgcGFyYW1zLnJlbmRlcmVyU2V0dGluZ3MpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0Q2FjaGVUeXBlKGFuaW1UeXBlLCB0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRQcm9qZWN0SW50ZXJmYWNlKHRoaXMucHJvamVjdEludGVyZmFjZSk7XG4gICAgdGhpcy5hbmltVHlwZSA9IGFuaW1UeXBlO1xuXG4gICAgaWYgKHBhcmFtcy5sb29wID09PSAnJyB8fCBwYXJhbXMubG9vcCA9PT0gbnVsbCB8fCBwYXJhbXMubG9vcCA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtcy5sb29wID09PSB0cnVlKSB7XG4gICAgICB0aGlzLmxvb3AgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zLmxvb3AgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmxvb3AgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sb29wID0gcGFyc2VJbnQocGFyYW1zLmxvb3AsIDEwKTtcbiAgICB9XG5cbiAgICB0aGlzLmF1dG9wbGF5ID0gJ2F1dG9wbGF5JyBpbiBwYXJhbXMgPyBwYXJhbXMuYXV0b3BsYXkgOiB0cnVlO1xuICAgIHRoaXMubmFtZSA9IHBhcmFtcy5uYW1lID8gcGFyYW1zLm5hbWUgOiAnJztcbiAgICB0aGlzLmF1dG9sb2FkU2VnbWVudHMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1zLCAnYXV0b2xvYWRTZWdtZW50cycpID8gcGFyYW1zLmF1dG9sb2FkU2VnbWVudHMgOiB0cnVlO1xuICAgIHRoaXMuYXNzZXRzUGF0aCA9IHBhcmFtcy5hc3NldHNQYXRoO1xuICAgIHRoaXMuaW5pdGlhbFNlZ21lbnQgPSBwYXJhbXMuaW5pdGlhbFNlZ21lbnQ7XG5cbiAgICBpZiAocGFyYW1zLmF1ZGlvRmFjdG9yeSkge1xuICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIuc2V0QXVkaW9GYWN0b3J5KHBhcmFtcy5hdWRpb0ZhY3RvcnkpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXMuYW5pbWF0aW9uRGF0YSkge1xuICAgICAgdGhpcy5zZXR1cEFuaW1hdGlvbihwYXJhbXMuYW5pbWF0aW9uRGF0YSk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMucGF0aCkge1xuICAgICAgaWYgKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCdcXFxcJykgIT09IC0xKSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhcmFtcy5wYXRoLnN1YnN0cigwLCBwYXJhbXMucGF0aC5sYXN0SW5kZXhPZignXFxcXCcpICsgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnBhdGggPSBwYXJhbXMucGF0aC5zdWJzdHIoMCwgcGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmZpbGVOYW1lID0gcGFyYW1zLnBhdGguc3Vic3RyKHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCcvJykgKyAxKTtcbiAgICAgIHRoaXMuZmlsZU5hbWUgPSB0aGlzLmZpbGVOYW1lLnN1YnN0cigwLCB0aGlzLmZpbGVOYW1lLmxhc3RJbmRleE9mKCcuanNvbicpKTtcbiAgICAgIGRhdGFNYW5hZ2VyLmxvYWRBbmltYXRpb24ocGFyYW1zLnBhdGgsIHRoaXMuY29uZmlnQW5pbWF0aW9uLCB0aGlzLm9uU2V0dXBFcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLm9uU2V0dXBFcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyaWdnZXIoJ2RhdGFfZmFpbGVkJyk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0dXBBbmltYXRpb24gPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGRhdGFNYW5hZ2VyLmNvbXBsZXRlQW5pbWF0aW9uKGRhdGEsIHRoaXMuY29uZmlnQW5pbWF0aW9uKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXREYXRhID0gZnVuY3Rpb24gKHdyYXBwZXIsIGFuaW1hdGlvbkRhdGEpIHtcbiAgICBpZiAoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgaWYgKF90eXBlb2YkNChhbmltYXRpb25EYXRhKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgYW5pbWF0aW9uRGF0YSA9IEpTT04ucGFyc2UoYW5pbWF0aW9uRGF0YSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHBhcmFtcyA9IHtcbiAgICAgIHdyYXBwZXI6IHdyYXBwZXIsXG4gICAgICBhbmltYXRpb25EYXRhOiBhbmltYXRpb25EYXRhXG4gICAgfTtcbiAgICB2YXIgd3JhcHBlckF0dHJpYnV0ZXMgPSB3cmFwcGVyLmF0dHJpYnV0ZXM7XG4gICAgcGFyYW1zLnBhdGggPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbWF0aW9uLXBhdGgnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbWF0aW9uLXBhdGgnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wYXRoJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXBhdGgnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcGF0aCcpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wYXRoJykudmFsdWUgOiAnJztcbiAgICBwYXJhbXMuYW5pbVR5cGUgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS10eXBlJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tdHlwZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXR5cGUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tdHlwZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS10eXBlJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcmVuZGVyZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcmVuZGVyZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKSA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcmVuZGVyZXInKS52YWx1ZSA6IGdldFJlZ2lzdGVyZWRSZW5kZXJlcigpIHx8ICdjYW52YXMnO1xuICAgIHZhciBsb29wID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tbG9vcCcpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLWxvb3AnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1sb29wJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWxvb3AnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tbG9vcCcpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1sb29wJykudmFsdWUgOiAnJztcblxuICAgIGlmIChsb29wID09PSAnZmFsc2UnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAobG9vcCA9PT0gJ3RydWUnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChsb29wICE9PSAnJykge1xuICAgICAgcGFyYW1zLmxvb3AgPSBwYXJzZUludChsb29wLCAxMCk7XG4gICAgfVxuXG4gICAgdmFyIGF1dG9wbGF5ID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tYXV0b3BsYXknKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1hdXRvcGxheScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWF1dG9wbGF5JykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWF1dG9wbGF5JykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWF1dG9wbGF5JykudmFsdWUgOiB0cnVlO1xuICAgIHBhcmFtcy5hdXRvcGxheSA9IGF1dG9wbGF5ICE9PSAnZmFsc2UnO1xuICAgIHBhcmFtcy5uYW1lID0gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLW5hbWUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtbmFtZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLW5hbWUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tbmFtZScpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1uYW1lJykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLW5hbWUnKS52YWx1ZSA6ICcnO1xuICAgIHZhciBwcmVyZW5kZXIgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1wcmVyZW5kZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wcmVyZW5kZXInKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcHJlcmVuZGVyJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXByZXJlbmRlcicpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wcmVyZW5kZXInKS52YWx1ZSA6ICcnO1xuXG4gICAgaWYgKHByZXJlbmRlciA9PT0gJ2ZhbHNlJykge1xuICAgICAgcGFyYW1zLnByZXJlbmRlciA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLnBhdGgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGVzdHJveScpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldFBhcmFtcyhwYXJhbXMpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5pbmNsdWRlTGF5ZXJzID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoZGF0YS5vcCA+IHRoaXMuYW5pbWF0aW9uRGF0YS5vcCkge1xuICAgICAgdGhpcy5hbmltYXRpb25EYXRhLm9wID0gZGF0YS5vcDtcbiAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKGRhdGEub3AgLSB0aGlzLmFuaW1hdGlvbkRhdGEuaXApO1xuICAgIH1cblxuICAgIHZhciBsYXllcnMgPSB0aGlzLmFuaW1hdGlvbkRhdGEubGF5ZXJzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuICAgIHZhciBuZXdMYXllcnMgPSBkYXRhLmxheWVycztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IG5ld0xheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKGxheWVyc1tpXS5pZCA9PT0gbmV3TGF5ZXJzW2pdLmlkKSB7XG4gICAgICAgICAgbGF5ZXJzW2ldID0gbmV3TGF5ZXJzW2pdO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkYXRhLmNoYXJzIHx8IGRhdGEuZm9udHMpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRDaGFycyhkYXRhLmNoYXJzKTtcbiAgICAgIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRGb250cyhkYXRhLmZvbnRzLCB0aGlzLnJlbmRlcmVyLmdsb2JhbERhdGEuZGVmcyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYXNzZXRzKSB7XG4gICAgICBsZW4gPSBkYXRhLmFzc2V0cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzLnB1c2goZGF0YS5hc3NldHNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlID0gZmFsc2U7XG4gICAgZGF0YU1hbmFnZXIuY29tcGxldGVBbmltYXRpb24odGhpcy5hbmltYXRpb25EYXRhLCB0aGlzLm9uU2VnbWVudENvbXBsZXRlKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5vblNlZ21lbnRDb21wbGV0ZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdGhpcy5hbmltYXRpb25EYXRhID0gZGF0YTtcbiAgICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuXG4gICAgaWYgKGV4cHJlc3Npb25zUGx1Z2luKSB7XG4gICAgICBleHByZXNzaW9uc1BsdWdpbi5pbml0RXhwcmVzc2lvbnModGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkTmV4dFNlZ21lbnQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5sb2FkTmV4dFNlZ21lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gdGhpcy5hbmltYXRpb25EYXRhLnNlZ21lbnRzO1xuXG4gICAgaWYgKCFzZWdtZW50cyB8fCBzZWdtZW50cy5sZW5ndGggPT09IDAgfHwgIXRoaXMuYXV0b2xvYWRTZWdtZW50cykge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhX3JlYWR5Jyk7XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzZWdtZW50ID0gc2VnbWVudHMuc2hpZnQoKTtcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSBzZWdtZW50LnRpbWUgKiB0aGlzLmZyYW1lUmF0ZTtcbiAgICB2YXIgc2VnbWVudFBhdGggPSB0aGlzLnBhdGggKyB0aGlzLmZpbGVOYW1lICsgJ18nICsgdGhpcy5zZWdtZW50UG9zICsgJy5qc29uJztcbiAgICB0aGlzLnNlZ21lbnRQb3MgKz0gMTtcbiAgICBkYXRhTWFuYWdlci5sb2FkRGF0YShzZWdtZW50UGF0aCwgdGhpcy5pbmNsdWRlTGF5ZXJzLmJpbmQodGhpcyksIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMudHJpZ2dlcignZGF0YV9mYWlsZWQnKTtcbiAgICB9LmJpbmQodGhpcykpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmxvYWRTZWdtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VnbWVudHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuc2VnbWVudHM7XG5cbiAgICBpZiAoIXNlZ21lbnRzKSB7XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgIH1cblxuICAgIHRoaXMubG9hZE5leHRTZWdtZW50KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaW1hZ2VzTG9hZGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudHJpZ2dlcignbG9hZGVkX2ltYWdlcycpO1xuICAgIHRoaXMuY2hlY2tMb2FkZWQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wcmVsb2FkSW1hZ2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0c1BhdGgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuc2V0UGF0aCh0aGlzLnBhdGgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIubG9hZEFzc2V0cyh0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzLCB0aGlzLmltYWdlc0xvYWRlZC5iaW5kKHRoaXMpKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5hbmltYXRpb25EYXRhID0gYW5pbURhdGE7XG5cbiAgICAgIGlmICh0aGlzLmluaXRpYWxTZWdtZW50KSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKHRoaXMuaW5pdGlhbFNlZ21lbnRbMV0gLSB0aGlzLmluaXRpYWxTZWdtZW50WzBdKTtcbiAgICAgICAgdGhpcy5maXJzdEZyYW1lID0gTWF0aC5yb3VuZCh0aGlzLmluaXRpYWxTZWdtZW50WzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBNYXRoLmZsb29yKHRoaXMuYW5pbWF0aW9uRGF0YS5vcCAtIHRoaXMuYW5pbWF0aW9uRGF0YS5pcCk7XG4gICAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IE1hdGgucm91bmQodGhpcy5hbmltYXRpb25EYXRhLmlwKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJlci5jb25maWdBbmltYXRpb24oYW5pbURhdGEpO1xuXG4gICAgICBpZiAoIWFuaW1EYXRhLmFzc2V0cykge1xuICAgICAgICBhbmltRGF0YS5hc3NldHMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hc3NldHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuYXNzZXRzO1xuICAgICAgdGhpcy5mcmFtZVJhdGUgPSB0aGlzLmFuaW1hdGlvbkRhdGEuZnI7XG4gICAgICB0aGlzLmZyYW1lTXVsdCA9IHRoaXMuYW5pbWF0aW9uRGF0YS5mciAvIDEwMDA7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNlYXJjaEV4dHJhQ29tcG9zaXRpb25zKGFuaW1EYXRhLmFzc2V0cyk7XG4gICAgICB0aGlzLm1hcmtlcnMgPSBtYXJrZXJQYXJzZXIoYW5pbURhdGEubWFya2VycyB8fCBbXSk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbmZpZ19yZWFkeScpO1xuICAgICAgdGhpcy5wcmVsb2FkSW1hZ2VzKCk7XG4gICAgICB0aGlzLmxvYWRTZWdtZW50cygpO1xuICAgICAgdGhpcy51cGRhRnJhbWVNb2RpZmllcigpO1xuICAgICAgdGhpcy53YWl0Rm9yRm9udHNMb2FkZWQoKTtcblxuICAgICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIucGF1c2UoKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy50cmlnZ2VyQ29uZmlnRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS53YWl0Rm9yRm9udHNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlcmVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5pc0xvYWRlZCkge1xuICAgICAgdGhpcy5jaGVja0xvYWRlZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KHRoaXMud2FpdEZvckZvbnRzTG9hZGVkLmJpbmQodGhpcyksIDIwKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuY2hlY2tMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzTG9hZGVkICYmIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5pc0xvYWRlZCAmJiAodGhpcy5pbWFnZVByZWxvYWRlci5sb2FkZWRJbWFnZXMoKSB8fCB0aGlzLnJlbmRlcmVyLnJlbmRlcmVyVHlwZSAhPT0gJ2NhbnZhcycpICYmIHRoaXMuaW1hZ2VQcmVsb2FkZXIubG9hZGVkRm9vdGFnZXMoKSkge1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICB2YXIgZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuXG4gICAgICBpZiAoZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgICAgZXhwcmVzc2lvbnNQbHVnaW4uaW5pdEV4cHJlc3Npb25zKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLmluaXRJdGVtcygpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudHJpZ2dlcignRE9NTG9hZGVkJyk7XG4gICAgICB9LmJpbmQodGhpcyksIDApO1xuICAgICAgdGhpcy5nb3RvRnJhbWUoKTtcblxuICAgICAgaWYgKHRoaXMuYXV0b3BsYXkpIHtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnJlc2l6ZSA9IGZ1bmN0aW9uICh3aWR0aCwgaGVpZ2h0KSB7XG4gICAgLy8gQWRkaW5nIHRoaXMgdmFsaWRhdGlvbiBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkgaW4gY2FzZSBhbiBldmVudCBvYmplY3Qgd2FzIGJlaW5nIHBhc3NlZCBkb3duXG4gICAgdmFyIF93aWR0aCA9IHR5cGVvZiB3aWR0aCA9PT0gJ251bWJlcicgPyB3aWR0aCA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBfaGVpZ2h0ID0gdHlwZW9mIGhlaWdodCA9PT0gJ251bWJlcicgPyBoZWlnaHQgOiB1bmRlZmluZWQ7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnVwZGF0ZUNvbnRhaW5lclNpemUoX3dpZHRoLCBfaGVpZ2h0KTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRTdWJmcmFtZSA9IGZ1bmN0aW9uIChmbGFnKSB7XG4gICAgdGhpcy5pc1N1YmZyYW1lRW5hYmxlZCA9ICEhZmxhZztcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb3RvRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLmlzU3ViZnJhbWVFbmFibGVkID8gdGhpcy5jdXJyZW50UmF3RnJhbWUgOiB+fnRoaXMuY3VycmVudFJhd0ZyYW1lOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWJpdHdpc2VcblxuICAgIGlmICh0aGlzLnRpbWVDb21wbGV0ZWQgIT09IHRoaXMudG90YWxGcmFtZXMgJiYgdGhpcy5jdXJyZW50RnJhbWUgPiB0aGlzLnRpbWVDb21wbGV0ZWQpIHtcbiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy50aW1lQ29tcGxldGVkO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignZW50ZXJGcmFtZScpO1xuICAgIHRoaXMucmVuZGVyRnJhbWUoKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2RyYXduRnJhbWUnKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pc0xvYWRlZCA9PT0gZmFsc2UgfHwgIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgaWYgKHRoaXMuZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgICAgdGhpcy5leHByZXNzaW9uc1BsdWdpbi5yZXNldEZyYW1lKCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZXIucmVuZGVyRnJhbWUodGhpcy5jdXJyZW50RnJhbWUgKyB0aGlzLmZpcnN0RnJhbWUpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnRyaWdnZXJSZW5kZXJGcmFtZUVycm9yKGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucGxheSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQgPT09IHRydWUpIHtcbiAgICAgIHRoaXMuaXNQYXVzZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX3BsYXknKTtcbiAgICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnJlc3VtZSgpO1xuXG4gICAgICBpZiAodGhpcy5faWRsZSkge1xuICAgICAgICB0aGlzLl9pZGxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJpZ2dlcignX2FjdGl2ZScpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLmlzUGF1c2VkID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX3BhdXNlJyk7XG4gICAgICB0aGlzLl9pZGxlID0gdHJ1ZTtcbiAgICAgIHRoaXMudHJpZ2dlcignX2lkbGUnKTtcbiAgICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnBhdXNlKCk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnRvZ2dsZVBhdXNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5wbGF5KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc3RvcCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wYXVzZSgpO1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcbiAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gZmFsc2U7XG4gICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSgwKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRNYXJrZXJEYXRhID0gZnVuY3Rpb24gKG1hcmtlck5hbWUpIHtcbiAgICB2YXIgbWFya2VyO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1hcmtlcnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIG1hcmtlciA9IHRoaXMubWFya2Vyc1tpXTtcblxuICAgICAgaWYgKG1hcmtlci5wYXlsb2FkICYmIG1hcmtlci5wYXlsb2FkLm5hbWUgPT09IG1hcmtlck5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb1RvQW5kU3RvcCA9IGZ1bmN0aW9uICh2YWx1ZSwgaXNGcmFtZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBudW1WYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICBpZiAoaXNOYU4obnVtVmFsdWUpKSB7XG4gICAgICB2YXIgbWFya2VyID0gdGhpcy5nZXRNYXJrZXJEYXRhKHZhbHVlKTtcblxuICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICB0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLCB0cnVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzRnJhbWUpIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKHZhbHVlICogdGhpcy5mcmFtZU1vZGlmaWVyKTtcbiAgICB9XG5cbiAgICB0aGlzLnBhdXNlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ29Ub0FuZFBsYXkgPSBmdW5jdGlvbiAodmFsdWUsIGlzRnJhbWUsIG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbnVtVmFsdWUgPSBOdW1iZXIodmFsdWUpO1xuXG4gICAgaWYgKGlzTmFOKG51bVZhbHVlKSkge1xuICAgICAgdmFyIG1hcmtlciA9IHRoaXMuZ2V0TWFya2VyRGF0YSh2YWx1ZSk7XG5cbiAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgaWYgKCFtYXJrZXIuZHVyYXRpb24pIHtcbiAgICAgICAgICB0aGlzLmdvVG9BbmRTdG9wKG1hcmtlci50aW1lLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnBsYXlTZWdtZW50cyhbbWFya2VyLnRpbWUsIG1hcmtlci50aW1lICsgbWFya2VyLmR1cmF0aW9uXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nb1RvQW5kU3RvcChudW1WYWx1ZSwgaXNGcmFtZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgdGhpcy5wbGF5KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuYWR2YW5jZVRpbWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSB8fCB0aGlzLmlzTG9hZGVkID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0VmFsdWUgPSB0aGlzLmN1cnJlbnRSYXdGcmFtZSArIHZhbHVlICogdGhpcy5mcmFtZU1vZGlmaWVyO1xuICAgIHZhciBfaXNDb21wbGV0ZSA9IGZhbHNlOyAvLyBDaGVja2luZyBpZiBuZXh0VmFsdWUgPiB0b3RhbEZyYW1lcyAtIDEgZm9yIGFkZHJlc3Npbmcgbm9uIGxvb3BpbmcgYW5kIGxvb3BpbmcgYW5pbWF0aW9ucy5cbiAgICAvLyBJZiBhbmltYXRpb24gd29uJ3QgbG9vcCwgaXQgc2hvdWxkIHN0b3AgYXQgdG90YWxGcmFtZXMgLSAxLiBJZiBpdCB3aWxsIGxvb3AgaXQgc2hvdWxkIGNvbXBsZXRlIHRoZSBsYXN0IGZyYW1lIGFuZCB0aGVuIGxvb3AuXG5cbiAgICBpZiAobmV4dFZhbHVlID49IHRoaXMudG90YWxGcmFtZXMgLSAxICYmIHRoaXMuZnJhbWVNb2RpZmllciA+IDApIHtcbiAgICAgIGlmICghdGhpcy5sb29wIHx8IHRoaXMucGxheUNvdW50ID09PSB0aGlzLmxvb3ApIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrU2VnbWVudHMobmV4dFZhbHVlID4gdGhpcy50b3RhbEZyYW1lcyA/IG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMgOiAwKSkge1xuICAgICAgICAgIF9pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICBuZXh0VmFsdWUgPSB0aGlzLnRvdGFsRnJhbWVzIC0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXh0VmFsdWUgPj0gdGhpcy50b3RhbEZyYW1lcykge1xuICAgICAgICB0aGlzLnBsYXlDb3VudCArPSAxO1xuXG4gICAgICAgIGlmICghdGhpcy5jaGVja1NlZ21lbnRzKG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMpKSB7XG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZShuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKTtcbiAgICAgICAgICB0aGlzLl9jb21wbGV0ZWRMb29wID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0VmFsdWUgPCAwKSB7XG4gICAgICBpZiAoIXRoaXMuY2hlY2tTZWdtZW50cyhuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKSkge1xuICAgICAgICBpZiAodGhpcy5sb29wICYmICEodGhpcy5wbGF5Q291bnQtLSA8PSAwICYmIHRoaXMubG9vcCAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBsdXNwbHVzXG4gICAgICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSh0aGlzLnRvdGFsRnJhbWVzICsgbmV4dFZhbHVlICUgdGhpcy50b3RhbEZyYW1lcyk7XG5cbiAgICAgICAgICBpZiAoIXRoaXMuX2NvbXBsZXRlZExvb3ApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlZExvb3AgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIoJ2xvb3BDb21wbGV0ZScpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgbmV4dFZhbHVlID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKF9pc0NvbXBsZXRlKSB7XG4gICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSk7XG4gICAgICB0aGlzLnBhdXNlKCk7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2NvbXBsZXRlJyk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmFkanVzdFNlZ21lbnQgPSBmdW5jdGlvbiAoYXJyLCBvZmZzZXQpIHtcbiAgICB0aGlzLnBsYXlDb3VudCA9IDA7XG5cbiAgICBpZiAoYXJyWzFdIDwgYXJyWzBdKSB7XG4gICAgICBpZiAodGhpcy5mcmFtZU1vZGlmaWVyID4gMCkge1xuICAgICAgICBpZiAodGhpcy5wbGF5U3BlZWQgPCAwKSB7XG4gICAgICAgICAgdGhpcy5zZXRTcGVlZCgtdGhpcy5wbGF5U3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0RGlyZWN0aW9uKC0xKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdGFsRnJhbWVzID0gYXJyWzBdIC0gYXJyWzFdO1xuICAgICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IGFyclsxXTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodGhpcy50b3RhbEZyYW1lcyAtIDAuMDAxIC0gb2Zmc2V0KTtcbiAgICB9IGVsc2UgaWYgKGFyclsxXSA+IGFyclswXSkge1xuICAgICAgaWYgKHRoaXMuZnJhbWVNb2RpZmllciA8IDApIHtcbiAgICAgICAgaWYgKHRoaXMucGxheVNwZWVkIDwgMCkge1xuICAgICAgICAgIHRoaXMuc2V0U3BlZWQoLXRoaXMucGxheVNwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnNldERpcmVjdGlvbigxKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLnRvdGFsRnJhbWVzID0gYXJyWzFdIC0gYXJyWzBdO1xuICAgICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgIHRoaXMuZmlyc3RGcmFtZSA9IGFyclswXTtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUoMC4wMDEgKyBvZmZzZXQpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlcignc2VnbWVudFN0YXJ0Jyk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0U2VnbWVudCA9IGZ1bmN0aW9uIChpbml0LCBlbmQpIHtcbiAgICB2YXIgcGVuZGluZ0ZyYW1lID0gLTE7XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudFJhd0ZyYW1lICsgdGhpcy5maXJzdEZyYW1lIDwgaW5pdCkge1xuICAgICAgICBwZW5kaW5nRnJhbWUgPSBpbml0O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmN1cnJlbnRSYXdGcmFtZSArIHRoaXMuZmlyc3RGcmFtZSA+IGVuZCkge1xuICAgICAgICBwZW5kaW5nRnJhbWUgPSBlbmQgLSBpbml0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZmlyc3RGcmFtZSA9IGluaXQ7XG4gICAgdGhpcy50b3RhbEZyYW1lcyA9IGVuZCAtIGluaXQ7XG4gICAgdGhpcy50aW1lQ29tcGxldGVkID0gdGhpcy50b3RhbEZyYW1lcztcblxuICAgIGlmIChwZW5kaW5nRnJhbWUgIT09IC0xKSB7XG4gICAgICB0aGlzLmdvVG9BbmRTdG9wKHBlbmRpbmdGcmFtZSwgdHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnBsYXlTZWdtZW50cyA9IGZ1bmN0aW9uIChhcnIsIGZvcmNlRmxhZykge1xuICAgIGlmIChmb3JjZUZsYWcpIHtcbiAgICAgIHRoaXMuc2VnbWVudHMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBpZiAoX3R5cGVvZiQ0KGFyclswXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zZWdtZW50cy5wdXNoKGFycltpXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VnbWVudHMucHVzaChhcnIpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCAmJiBmb3JjZUZsYWcpIHtcbiAgICAgIHRoaXMuYWRqdXN0U2VnbWVudCh0aGlzLnNlZ21lbnRzLnNoaWZ0KCksIDApO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucmVzZXRTZWdtZW50cyA9IGZ1bmN0aW9uIChmb3JjZUZsYWcpIHtcbiAgICB0aGlzLnNlZ21lbnRzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5zZWdtZW50cy5wdXNoKFt0aGlzLmFuaW1hdGlvbkRhdGEuaXAsIHRoaXMuYW5pbWF0aW9uRGF0YS5vcF0pO1xuXG4gICAgaWYgKGZvcmNlRmxhZykge1xuICAgICAgdGhpcy5jaGVja1NlZ21lbnRzKDApO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jaGVja1NlZ21lbnRzID0gZnVuY3Rpb24gKG9mZnNldCkge1xuICAgIGlmICh0aGlzLnNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgdGhpcy5hZGp1c3RTZWdtZW50KHRoaXMuc2VnbWVudHMuc2hpZnQoKSwgb2Zmc2V0KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUgfHwgIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLmltYWdlUHJlbG9hZGVyLmRlc3Ryb3koKTtcbiAgICB0aGlzLnRyaWdnZXIoJ2Rlc3Ryb3knKTtcbiAgICB0aGlzLl9jYnMgPSBudWxsO1xuICAgIHRoaXMub25FbnRlckZyYW1lID0gbnVsbDtcbiAgICB0aGlzLm9uTG9vcENvbXBsZXRlID0gbnVsbDtcbiAgICB0aGlzLm9uQ29tcGxldGUgPSBudWxsO1xuICAgIHRoaXMub25TZWdtZW50U3RhcnQgPSBudWxsO1xuICAgIHRoaXMub25EZXN0cm95ID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlcmVyID0gbnVsbDtcbiAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luID0gbnVsbDtcbiAgICB0aGlzLmltYWdlUHJlbG9hZGVyID0gbnVsbDtcbiAgICB0aGlzLnByb2plY3RJbnRlcmZhY2UgPSBudWxsO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jdXJyZW50UmF3RnJhbWUgPSB2YWx1ZTtcbiAgICB0aGlzLmdvdG9GcmFtZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFNwZWVkID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHRoaXMucGxheVNwZWVkID0gdmFsO1xuICAgIHRoaXMudXBkYUZyYW1lTW9kaWZpZXIoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXREaXJlY3Rpb24gPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgdGhpcy5wbGF5RGlyZWN0aW9uID0gdmFsIDwgMCA/IC0xIDogMTtcbiAgICB0aGlzLnVwZGFGcmFtZU1vZGlmaWVyKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0TG9vcCA9IGZ1bmN0aW9uIChpc0xvb3BpbmcpIHtcbiAgICB0aGlzLmxvb3AgPSBpc0xvb3Bpbmc7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0Vm9sdW1lID0gZnVuY3Rpb24gKHZhbCwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnNldFZvbHVtZSh2YWwpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldFZvbHVtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5hdWRpb0NvbnRyb2xsZXIuZ2V0Vm9sdW1lKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUubXV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIubXV0ZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnVubXV0ZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIudW5tdXRlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYUZyYW1lTW9kaWZpZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mcmFtZU1vZGlmaWVyID0gdGhpcy5mcmFtZU11bHQgKiB0aGlzLnBsYXlTcGVlZCAqIHRoaXMucGxheURpcmVjdGlvbjtcbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci5zZXRSYXRlKHRoaXMucGxheVNwZWVkICogdGhpcy5wbGF5RGlyZWN0aW9uKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnBhdGg7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0QXNzZXRzUGF0aCA9IGZ1bmN0aW9uIChhc3NldERhdGEpIHtcbiAgICB2YXIgcGF0aCA9ICcnO1xuXG4gICAgaWYgKGFzc2V0RGF0YS5lKSB7XG4gICAgICBwYXRoID0gYXNzZXREYXRhLnA7XG4gICAgfSBlbHNlIGlmICh0aGlzLmFzc2V0c1BhdGgpIHtcbiAgICAgIHZhciBpbWFnZVBhdGggPSBhc3NldERhdGEucDtcblxuICAgICAgaWYgKGltYWdlUGF0aC5pbmRleE9mKCdpbWFnZXMvJykgIT09IC0xKSB7XG4gICAgICAgIGltYWdlUGF0aCA9IGltYWdlUGF0aC5zcGxpdCgnLycpWzFdO1xuICAgICAgfVxuXG4gICAgICBwYXRoID0gdGhpcy5hc3NldHNQYXRoICsgaW1hZ2VQYXRoO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gdGhpcy5wYXRoO1xuICAgICAgcGF0aCArPSBhc3NldERhdGEudSA/IGFzc2V0RGF0YS51IDogJyc7XG4gICAgICBwYXRoICs9IGFzc2V0RGF0YS5wO1xuICAgIH1cblxuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldEFzc2V0RGF0YSA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy5hc3NldHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChpZCA9PT0gdGhpcy5hc3NldHNbaV0uaWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXNzZXRzW2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLmhpZGUoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVuZGVyZXIuc2hvdygpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldER1cmF0aW9uID0gZnVuY3Rpb24gKGlzRnJhbWUpIHtcbiAgICByZXR1cm4gaXNGcmFtZSA/IHRoaXMudG90YWxGcmFtZXMgOiB0aGlzLnRvdGFsRnJhbWVzIC8gdGhpcy5mcmFtZVJhdGU7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKHBhdGgsIGRvY3VtZW50RGF0YSwgaW5kZXgpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnJlbmRlcmVyLmdldEVsZW1lbnRCeVBhdGgocGF0aCk7XG4gICAgICBlbGVtZW50LnVwZGF0ZURvY3VtZW50RGF0YShkb2N1bWVudERhdGEsIGluZGV4KTtcbiAgICB9IGNhdGNoIChlcnJvcikgey8vIFRPRE86IGRlY2lkZSBob3cgdG8gaGFuZGxlIGNhdGNoIGNhc2VcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlciA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKHRoaXMuX2NicyAmJiB0aGlzLl9jYnNbbmFtZV0pIHtcbiAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICBjYXNlICdlbnRlckZyYW1lJzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1FbnRlckZyYW1lRXZlbnQobmFtZSwgdGhpcy5jdXJyZW50RnJhbWUsIHRoaXMudG90YWxGcmFtZXMsIHRoaXMuZnJhbWVNb2RpZmllcikpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2RyYXduRnJhbWUnOlxuICAgICAgICAgIHRoaXMuZHJhd25GcmFtZUV2ZW50LmN1cnJlbnRUaW1lID0gdGhpcy5jdXJyZW50RnJhbWU7XG4gICAgICAgICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQudG90YWxUaW1lID0gdGhpcy50b3RhbEZyYW1lcztcbiAgICAgICAgICB0aGlzLmRyYXduRnJhbWVFdmVudC5kaXJlY3Rpb24gPSB0aGlzLmZyYW1lTW9kaWZpZXI7XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgdGhpcy5kcmF3bkZyYW1lRXZlbnQpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xvb3BDb21wbGV0ZSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSwgdGhpcy5sb29wLCB0aGlzLnBsYXlDb3VudCwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdjb21wbGV0ZSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNQ29tcGxldGVFdmVudChuYW1lLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3NlZ21lbnRTdGFydCc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNU2VnbWVudFN0YXJ0RXZlbnQobmFtZSwgdGhpcy5maXJzdEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZGVzdHJveSc6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSwgbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsIHRoaXMpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnZW50ZXJGcmFtZScgJiYgdGhpcy5vbkVudGVyRnJhbWUpIHtcbiAgICAgIHRoaXMub25FbnRlckZyYW1lLmNhbGwodGhpcywgbmV3IEJNRW50ZXJGcmFtZUV2ZW50KG5hbWUsIHRoaXMuY3VycmVudEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnbG9vcENvbXBsZXRlJyAmJiB0aGlzLm9uTG9vcENvbXBsZXRlKSB7XG4gICAgICB0aGlzLm9uTG9vcENvbXBsZXRlLmNhbGwodGhpcywgbmV3IEJNQ29tcGxldGVMb29wRXZlbnQobmFtZSwgdGhpcy5sb29wLCB0aGlzLnBsYXlDb3VudCwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gJ2NvbXBsZXRlJyAmJiB0aGlzLm9uQ29tcGxldGUpIHtcbiAgICAgIHRoaXMub25Db21wbGV0ZS5jYWxsKHRoaXMsIG5ldyBCTUNvbXBsZXRlRXZlbnQobmFtZSwgdGhpcy5mcmFtZU11bHQpKTtcbiAgICB9XG5cbiAgICBpZiAobmFtZSA9PT0gJ3NlZ21lbnRTdGFydCcgJiYgdGhpcy5vblNlZ21lbnRTdGFydCkge1xuICAgICAgdGhpcy5vblNlZ21lbnRTdGFydC5jYWxsKHRoaXMsIG5ldyBCTVNlZ21lbnRTdGFydEV2ZW50KG5hbWUsIHRoaXMuZmlyc3RGcmFtZSwgdGhpcy50b3RhbEZyYW1lcykpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnZGVzdHJveScgJiYgdGhpcy5vbkRlc3Ryb3kpIHtcbiAgICAgIHRoaXMub25EZXN0cm95LmNhbGwodGhpcywgbmV3IEJNRGVzdHJveUV2ZW50KG5hbWUsIHRoaXMpKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlclJlbmRlckZyYW1lRXJyb3IgPSBmdW5jdGlvbiAobmF0aXZlRXJyb3IpIHtcbiAgICB2YXIgZXJyb3IgPSBuZXcgQk1SZW5kZXJGcmFtZUVycm9yRXZlbnQobmF0aXZlRXJyb3IsIHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnZXJyb3InLCBlcnJvcik7XG5cbiAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnRyaWdnZXJDb25maWdFcnJvciA9IGZ1bmN0aW9uIChuYXRpdmVFcnJvcikge1xuICAgIHZhciBlcnJvciA9IG5ldyBCTUNvbmZpZ0Vycm9yRXZlbnQobmF0aXZlRXJyb3IsIHRoaXMuY3VycmVudEZyYW1lKTtcbiAgICB0aGlzLnRyaWdnZXJFdmVudCgnZXJyb3InLCBlcnJvcik7XG5cbiAgICBpZiAodGhpcy5vbkVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBhbmltYXRpb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtb2R1bGVPYiA9IHt9O1xuICAgIHZhciByZWdpc3RlcmVkQW5pbWF0aW9ucyA9IFtdO1xuICAgIHZhciBpbml0VGltZSA9IDA7XG4gICAgdmFyIGxlbiA9IDA7XG4gICAgdmFyIHBsYXlpbmdBbmltYXRpb25zTnVtID0gMDtcbiAgICB2YXIgX3N0b3BwZWQgPSB0cnVlO1xuICAgIHZhciBfaXNGcm96ZW4gPSBmYWxzZTtcblxuICAgIGZ1bmN0aW9uIHJlbW92ZUVsZW1lbnQoZXYpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBhbmltSXRlbSA9IGV2LnRhcmdldDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbiA9PT0gYW5pbUl0ZW0pIHtcbiAgICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgIGxlbiAtPSAxO1xuXG4gICAgICAgICAgaWYgKCFhbmltSXRlbS5pc1BhdXNlZCkge1xuICAgICAgICAgICAgc3VidHJhY3RQbGF5aW5nQ291bnQoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJBbmltYXRpb24oZWxlbWVudCwgYW5pbWF0aW9uRGF0YSkge1xuICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5lbGVtID09PSBlbGVtZW50ICYmIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmVsZW0gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgYW5pbUl0ZW0gPSBuZXcgQW5pbWF0aW9uSXRlbSgpO1xuICAgICAgc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sIGVsZW1lbnQpO1xuICAgICAgYW5pbUl0ZW0uc2V0RGF0YShlbGVtZW50LCBhbmltYXRpb25EYXRhKTtcbiAgICAgIHJldHVybiBhbmltSXRlbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucygpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbkFuaW1zID0gcmVnaXN0ZXJlZEFuaW1hdGlvbnMubGVuZ3RoO1xuICAgICAgdmFyIGFuaW1hdGlvbnMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbkFuaW1zOyBpICs9IDEpIHtcbiAgICAgICAgYW5pbWF0aW9ucy5wdXNoKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhbmltYXRpb25zO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFBsYXlpbmdDb3VudCgpIHtcbiAgICAgIHBsYXlpbmdBbmltYXRpb25zTnVtICs9IDE7XG4gICAgICBhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0UGxheWluZ0NvdW50KCkge1xuICAgICAgcGxheWluZ0FuaW1hdGlvbnNOdW0gLT0gMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cEFuaW1hdGlvbihhbmltSXRlbSwgZWxlbWVudCkge1xuICAgICAgYW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZGVzdHJveScsIHJlbW92ZUVsZW1lbnQpO1xuICAgICAgYW5pbUl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignX2FjdGl2ZScsIGFkZFBsYXlpbmdDb3VudCk7XG4gICAgICBhbmltSXRlbS5hZGRFdmVudExpc3RlbmVyKCdfaWRsZScsIHN1YnRyYWN0UGxheWluZ0NvdW50KTtcbiAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zLnB1c2goe1xuICAgICAgICBlbGVtOiBlbGVtZW50LFxuICAgICAgICBhbmltYXRpb246IGFuaW1JdGVtXG4gICAgICB9KTtcbiAgICAgIGxlbiArPSAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRBbmltYXRpb24ocGFyYW1zKSB7XG4gICAgICB2YXIgYW5pbUl0ZW0gPSBuZXcgQW5pbWF0aW9uSXRlbSgpO1xuICAgICAgc2V0dXBBbmltYXRpb24oYW5pbUl0ZW0sIG51bGwpO1xuICAgICAgYW5pbUl0ZW0uc2V0UGFyYW1zKHBhcmFtcyk7XG4gICAgICByZXR1cm4gYW5pbUl0ZW07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0U3BlZWQodmFsLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldFNwZWVkKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXREaXJlY3Rpb24odmFsLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnNldERpcmVjdGlvbih2YWwsIGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGxheShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnBsYXkoYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXN1bWUobm93VGltZSkge1xuICAgICAgdmFyIGVsYXBzZWRUaW1lID0gbm93VGltZSAtIGluaXRUaW1lO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uYWR2YW5jZVRpbWUoZWxhcHNlZFRpbWUpO1xuICAgICAgfVxuXG4gICAgICBpbml0VGltZSA9IG5vd1RpbWU7XG5cbiAgICAgIGlmIChwbGF5aW5nQW5pbWF0aW9uc051bSAmJiAhX2lzRnJvemVuKSB7XG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9zdG9wcGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaXJzdChub3dUaW1lKSB7XG4gICAgICBpbml0VGltZSA9IG5vd1RpbWU7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlc3VtZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGF1c2UoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5wYXVzZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lLCBhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lLCBhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0b3AoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5zdG9wKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9nZ2xlUGF1c2UoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi50b2dnbGVQYXVzZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc3Ryb3koYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLmRlc3Ryb3koYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWFyY2hBbmltYXRpb25zKGFuaW1hdGlvbkRhdGEsIHN0YW5kYWxvbmUsIHJlbmRlcmVyKSB7XG4gICAgICB2YXIgYW5pbUVsZW1lbnRzID0gW10uY29uY2F0KFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbG90dGllJykpLCBbXS5zbGljZS5jYWxsKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2JvZHltb3ZpbicpKSk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW5BbmltcyA9IGFuaW1FbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5BbmltczsgaSArPSAxKSB7XG4gICAgICAgIGlmIChyZW5kZXJlcikge1xuICAgICAgICAgIGFuaW1FbGVtZW50c1tpXS5zZXRBdHRyaWJ1dGUoJ2RhdGEtYm0tdHlwZScsIHJlbmRlcmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVyQW5pbWF0aW9uKGFuaW1FbGVtZW50c1tpXSwgYW5pbWF0aW9uRGF0YSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzdGFuZGFsb25lICYmIGxlbkFuaW1zID09PSAwKSB7XG4gICAgICAgIGlmICghcmVuZGVyZXIpIHtcbiAgICAgICAgICByZW5kZXJlciA9ICdzdmcnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGJvZHkgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpWzBdO1xuICAgICAgICBib2R5LmlubmVyVGV4dCA9ICcnO1xuICAgICAgICB2YXIgZGl2ID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICAgICAgZGl2LnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICBkaXYuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICBkaXYuc2V0QXR0cmlidXRlKCdkYXRhLWJtLXR5cGUnLCByZW5kZXJlcik7XG4gICAgICAgIGJvZHkuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgcmVnaXN0ZXJBbmltYXRpb24oZGl2LCBhbmltYXRpb25EYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5yZXNpemUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhY3RpdmF0ZSgpIHtcbiAgICAgIGlmICghX2lzRnJvemVuICYmIHBsYXlpbmdBbmltYXRpb25zTnVtKSB7XG4gICAgICAgIGlmIChfc3RvcHBlZCkge1xuICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZmlyc3QpO1xuICAgICAgICAgIF9zdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcmVlemUoKSB7XG4gICAgICBfaXNGcm96ZW4gPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVuZnJlZXplKCkge1xuICAgICAgX2lzRnJvemVuID0gZmFsc2U7XG4gICAgICBhY3RpdmF0ZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZvbHVtZSh2YWwsIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uc2V0Vm9sdW1lKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtdXRlKGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24ubXV0ZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVubXV0ZShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnVubXV0ZShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1vZHVsZU9iLnJlZ2lzdGVyQW5pbWF0aW9uID0gcmVnaXN0ZXJBbmltYXRpb247XG4gICAgbW9kdWxlT2IubG9hZEFuaW1hdGlvbiA9IGxvYWRBbmltYXRpb247XG4gICAgbW9kdWxlT2Iuc2V0U3BlZWQgPSBzZXRTcGVlZDtcbiAgICBtb2R1bGVPYi5zZXREaXJlY3Rpb24gPSBzZXREaXJlY3Rpb247XG4gICAgbW9kdWxlT2IucGxheSA9IHBsYXk7XG4gICAgbW9kdWxlT2IucGF1c2UgPSBwYXVzZTtcbiAgICBtb2R1bGVPYi5zdG9wID0gc3RvcDtcbiAgICBtb2R1bGVPYi50b2dnbGVQYXVzZSA9IHRvZ2dsZVBhdXNlO1xuICAgIG1vZHVsZU9iLnNlYXJjaEFuaW1hdGlvbnMgPSBzZWFyY2hBbmltYXRpb25zO1xuICAgIG1vZHVsZU9iLnJlc2l6ZSA9IHJlc2l6ZTsgLy8gbW9kdWxlT2Iuc3RhcnQgPSBzdGFydDtcblxuICAgIG1vZHVsZU9iLmdvVG9BbmRTdG9wID0gZ29Ub0FuZFN0b3A7XG4gICAgbW9kdWxlT2IuZGVzdHJveSA9IGRlc3Ryb3k7XG4gICAgbW9kdWxlT2IuZnJlZXplID0gZnJlZXplO1xuICAgIG1vZHVsZU9iLnVuZnJlZXplID0gdW5mcmVlemU7XG4gICAgbW9kdWxlT2Iuc2V0Vm9sdW1lID0gc2V0Vm9sdW1lO1xuICAgIG1vZHVsZU9iLm11dGUgPSBtdXRlO1xuICAgIG1vZHVsZU9iLnVubXV0ZSA9IHVubXV0ZTtcbiAgICBtb2R1bGVPYi5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyA9IGdldFJlZ2lzdGVyZWRBbmltYXRpb25zO1xuICAgIHJldHVybiBtb2R1bGVPYjtcbiAgfSgpO1xuXG4gIC8qIGVzbGludC1kaXNhYmxlICovXG4gIHZhciBCZXppZXJGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIC8qKlxyXG4gICAgICAgKiBCZXppZXJFYXNpbmcgLSB1c2UgYmV6aWVyIGN1cnZlIGZvciB0cmFuc2l0aW9uIGVhc2luZyBmdW5jdGlvblxyXG4gICAgICAgKiBieSBHYcOrdGFuIFJlbmF1ZGVhdSAyMDE0IC0gMjAxNSDigJMgTUlUIExpY2Vuc2VcclxuICAgICAgICpcclxuICAgICAgICogQ3JlZGl0czogaXMgYmFzZWQgb24gRmlyZWZveCdzIG5zU01JTEtleVNwbGluZS5jcHBcclxuICAgICAgICogVXNhZ2U6XHJcbiAgICAgICAqIHZhciBzcGxpbmUgPSBCZXppZXJFYXNpbmcoWyAwLjI1LCAwLjEsIDAuMjUsIDEuMCBdKVxyXG4gICAgICAgKiBzcGxpbmUuZ2V0KHgpID0+IHJldHVybnMgdGhlIGVhc2luZyB2YWx1ZSB8IHggbXVzdCBiZSBpbiBbMCwgMV0gcmFuZ2VcclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgdmFyIG9iID0ge307XG4gICAgb2IuZ2V0QmV6aWVyRWFzaW5nID0gZ2V0QmV6aWVyRWFzaW5nO1xuICAgIHZhciBiZXppZXJzID0ge307XG5cbiAgICBmdW5jdGlvbiBnZXRCZXppZXJFYXNpbmcoYSwgYiwgYywgZCwgbm0pIHtcbiAgICAgIHZhciBzdHIgPSBubSB8fCAoJ2Jlel8nICsgYSArICdfJyArIGIgKyAnXycgKyBjICsgJ18nICsgZCkucmVwbGFjZSgvXFwuL2csICdwJyk7XG5cbiAgICAgIGlmIChiZXppZXJzW3N0cl0pIHtcbiAgICAgICAgcmV0dXJuIGJlemllcnNbc3RyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJlekVhc2luZyA9IG5ldyBCZXppZXJFYXNpbmcoW2EsIGIsIGMsIGRdKTtcbiAgICAgIGJlemllcnNbc3RyXSA9IGJlekVhc2luZztcbiAgICAgIHJldHVybiBiZXpFYXNpbmc7XG4gICAgfSAvLyBUaGVzZSB2YWx1ZXMgYXJlIGVzdGFibGlzaGVkIGJ5IGVtcGlyaWNpc20gd2l0aCB0ZXN0cyAodHJhZGVvZmY6IHBlcmZvcm1hbmNlIFZTIHByZWNpc2lvbilcblxuXG4gICAgdmFyIE5FV1RPTl9JVEVSQVRJT05TID0gNDtcbiAgICB2YXIgTkVXVE9OX01JTl9TTE9QRSA9IDAuMDAxO1xuICAgIHZhciBTVUJESVZJU0lPTl9QUkVDSVNJT04gPSAwLjAwMDAwMDE7XG4gICAgdmFyIFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TID0gMTA7XG4gICAgdmFyIGtTcGxpbmVUYWJsZVNpemUgPSAxMTtcbiAgICB2YXIga1NhbXBsZVN0ZXBTaXplID0gMS4wIC8gKGtTcGxpbmVUYWJsZVNpemUgLSAxLjApO1xuICAgIHZhciBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPSB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nO1xuXG4gICAgZnVuY3Rpb24gQShhQTEsIGFBMikge1xuICAgICAgcmV0dXJuIDEuMCAtIDMuMCAqIGFBMiArIDMuMCAqIGFBMTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBCKGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMy4wICogYUEyIC0gNi4wICogYUExO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEMoYUExKSB7XG4gICAgICByZXR1cm4gMy4wICogYUExO1xuICAgIH0gLy8gUmV0dXJucyB4KHQpIGdpdmVuIHQsIHgxLCBhbmQgeDIsIG9yIHkodCkgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cblxuXG4gICAgZnVuY3Rpb24gY2FsY0JlemllcihhVCwgYUExLCBhQTIpIHtcbiAgICAgIHJldHVybiAoKEEoYUExLCBhQTIpICogYVQgKyBCKGFBMSwgYUEyKSkgKiBhVCArIEMoYUExKSkgKiBhVDtcbiAgICB9IC8vIFJldHVybnMgZHgvZHQgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgZHkvZHQgZ2l2ZW4gdCwgeTEsIGFuZCB5Mi5cblxuXG4gICAgZnVuY3Rpb24gZ2V0U2xvcGUoYVQsIGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMy4wICogQShhQTEsIGFBMikgKiBhVCAqIGFUICsgMi4wICogQihhQTEsIGFBMikgKiBhVCArIEMoYUExKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBiaW5hcnlTdWJkaXZpZGUoYVgsIGFBLCBhQiwgbVgxLCBtWDIpIHtcbiAgICAgIHZhciBjdXJyZW50WCxcbiAgICAgICAgICBjdXJyZW50VCxcbiAgICAgICAgICBpID0gMDtcblxuICAgICAgZG8ge1xuICAgICAgICBjdXJyZW50VCA9IGFBICsgKGFCIC0gYUEpIC8gMi4wO1xuICAgICAgICBjdXJyZW50WCA9IGNhbGNCZXppZXIoY3VycmVudFQsIG1YMSwgbVgyKSAtIGFYO1xuXG4gICAgICAgIGlmIChjdXJyZW50WCA+IDAuMCkge1xuICAgICAgICAgIGFCID0gY3VycmVudFQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYUEgPSBjdXJyZW50VDtcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAoTWF0aC5hYnMoY3VycmVudFgpID4gU1VCRElWSVNJT05fUFJFQ0lTSU9OICYmICsraSA8IFNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TKTtcblxuICAgICAgcmV0dXJuIGN1cnJlbnRUO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBhR3Vlc3NULCBtWDEsIG1YMikge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBORVdUT05fSVRFUkFUSU9OUzsgKytpKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2xvcGUgPSBnZXRTbG9wZShhR3Vlc3NULCBtWDEsIG1YMik7XG4gICAgICAgIGlmIChjdXJyZW50U2xvcGUgPT09IDAuMCkgcmV0dXJuIGFHdWVzc1Q7XG4gICAgICAgIHZhciBjdXJyZW50WCA9IGNhbGNCZXppZXIoYUd1ZXNzVCwgbVgxLCBtWDIpIC0gYVg7XG4gICAgICAgIGFHdWVzc1QgLT0gY3VycmVudFggLyBjdXJyZW50U2xvcGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhR3Vlc3NUO1xuICAgIH1cbiAgICAvKipcclxuICAgICAgICogcG9pbnRzIGlzIGFuIGFycmF5IG9mIFsgbVgxLCBtWTEsIG1YMiwgbVkyIF1cclxuICAgICAgICovXG5cblxuICAgIGZ1bmN0aW9uIEJlemllckVhc2luZyhwb2ludHMpIHtcbiAgICAgIHRoaXMuX3AgPSBwb2ludHM7XG4gICAgICB0aGlzLl9tU2FtcGxlVmFsdWVzID0gZmxvYXQzMkFycmF5U3VwcG9ydGVkID8gbmV3IEZsb2F0MzJBcnJheShrU3BsaW5lVGFibGVTaXplKSA6IG5ldyBBcnJheShrU3BsaW5lVGFibGVTaXplKTtcbiAgICAgIHRoaXMuX3ByZWNvbXB1dGVkID0gZmFsc2U7XG4gICAgICB0aGlzLmdldCA9IHRoaXMuZ2V0LmJpbmQodGhpcyk7XG4gICAgfVxuXG4gICAgQmV6aWVyRWFzaW5nLnByb3RvdHlwZSA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KHgpIHtcbiAgICAgICAgdmFyIG1YMSA9IHRoaXMuX3BbMF0sXG4gICAgICAgICAgICBtWTEgPSB0aGlzLl9wWzFdLFxuICAgICAgICAgICAgbVgyID0gdGhpcy5fcFsyXSxcbiAgICAgICAgICAgIG1ZMiA9IHRoaXMuX3BbM107XG4gICAgICAgIGlmICghdGhpcy5fcHJlY29tcHV0ZWQpIHRoaXMuX3ByZWNvbXB1dGUoKTtcbiAgICAgICAgaWYgKG1YMSA9PT0gbVkxICYmIG1YMiA9PT0gbVkyKSByZXR1cm4geDsgLy8gbGluZWFyXG4gICAgICAgIC8vIEJlY2F1c2UgSmF2YVNjcmlwdCBudW1iZXIgYXJlIGltcHJlY2lzZSwgd2Ugc2hvdWxkIGd1YXJhbnRlZSB0aGUgZXh0cmVtZXMgYXJlIHJpZ2h0LlxuXG4gICAgICAgIGlmICh4ID09PSAwKSByZXR1cm4gMDtcbiAgICAgICAgaWYgKHggPT09IDEpIHJldHVybiAxO1xuICAgICAgICByZXR1cm4gY2FsY0Jlemllcih0aGlzLl9nZXRURm9yWCh4KSwgbVkxLCBtWTIpO1xuICAgICAgfSxcbiAgICAgIC8vIFByaXZhdGUgcGFydFxuICAgICAgX3ByZWNvbXB1dGU6IGZ1bmN0aW9uIF9wcmVjb21wdXRlKCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1ZMSA9IHRoaXMuX3BbMV0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdLFxuICAgICAgICAgICAgbVkyID0gdGhpcy5fcFszXTtcbiAgICAgICAgdGhpcy5fcHJlY29tcHV0ZWQgPSB0cnVlO1xuXG4gICAgICAgIGlmIChtWDEgIT09IG1ZMSB8fCBtWDIgIT09IG1ZMikge1xuICAgICAgICAgIHRoaXMuX2NhbGNTYW1wbGVWYWx1ZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jYWxjU2FtcGxlVmFsdWVzOiBmdW5jdGlvbiBfY2FsY1NhbXBsZVZhbHVlcygpIHtcbiAgICAgICAgdmFyIG1YMSA9IHRoaXMuX3BbMF0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga1NwbGluZVRhYmxlU2l6ZTsgKytpKSB7XG4gICAgICAgICAgdGhpcy5fbVNhbXBsZVZhbHVlc1tpXSA9IGNhbGNCZXppZXIoaSAqIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICAvKipcclxuICAgICAgICAgICAqIGdldFRGb3JYIGNob3NlIHRoZSBmYXN0ZXN0IGhldXJpc3RpYyB0byBkZXRlcm1pbmUgdGhlIHBlcmNlbnRhZ2UgdmFsdWUgcHJlY2lzZWx5IGZyb20gYSBnaXZlbiBYIHByb2plY3Rpb24uXHJcbiAgICAgICAgICAgKi9cbiAgICAgIF9nZXRURm9yWDogZnVuY3Rpb24gX2dldFRGb3JYKGFYKSB7XG4gICAgICAgIHZhciBtWDEgPSB0aGlzLl9wWzBdLFxuICAgICAgICAgICAgbVgyID0gdGhpcy5fcFsyXSxcbiAgICAgICAgICAgIG1TYW1wbGVWYWx1ZXMgPSB0aGlzLl9tU2FtcGxlVmFsdWVzO1xuICAgICAgICB2YXIgaW50ZXJ2YWxTdGFydCA9IDAuMDtcbiAgICAgICAgdmFyIGN1cnJlbnRTYW1wbGUgPSAxO1xuICAgICAgICB2YXIgbGFzdFNhbXBsZSA9IGtTcGxpbmVUYWJsZVNpemUgLSAxO1xuXG4gICAgICAgIGZvciAoOyBjdXJyZW50U2FtcGxlICE9PSBsYXN0U2FtcGxlICYmIG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0gPD0gYVg7ICsrY3VycmVudFNhbXBsZSkge1xuICAgICAgICAgIGludGVydmFsU3RhcnQgKz0ga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgLS1jdXJyZW50U2FtcGxlOyAvLyBJbnRlcnBvbGF0ZSB0byBwcm92aWRlIGFuIGluaXRpYWwgZ3Vlc3MgZm9yIHRcblxuICAgICAgICB2YXIgZGlzdCA9IChhWCAtIG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZV0pIC8gKG1TYW1wbGVWYWx1ZXNbY3VycmVudFNhbXBsZSArIDFdIC0gbVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSk7XG4gICAgICAgIHZhciBndWVzc0ZvclQgPSBpbnRlcnZhbFN0YXJ0ICsgZGlzdCAqIGtTYW1wbGVTdGVwU2l6ZTtcbiAgICAgICAgdmFyIGluaXRpYWxTbG9wZSA9IGdldFNsb3BlKGd1ZXNzRm9yVCwgbVgxLCBtWDIpO1xuXG4gICAgICAgIGlmIChpbml0aWFsU2xvcGUgPj0gTkVXVE9OX01JTl9TTE9QRSkge1xuICAgICAgICAgIHJldHVybiBuZXd0b25SYXBoc29uSXRlcmF0ZShhWCwgZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5pdGlhbFNsb3BlID09PSAwLjApIHtcbiAgICAgICAgICByZXR1cm4gZ3Vlc3NGb3JUO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGJpbmFyeVN1YmRpdmlkZShhWCwgaW50ZXJ2YWxTdGFydCwgaW50ZXJ2YWxTdGFydCArIGtTYW1wbGVTdGVwU2l6ZSwgbVgxLCBtWDIpO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIHBvb2xpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gX2RvdWJsZShhcnIpIHtcbiAgICAgIHJldHVybiBhcnIuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkoYXJyLmxlbmd0aCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBcImRvdWJsZVwiOiBfZG91YmxlXG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBwb29sRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGluaXRpYWxMZW5ndGgsIF9jcmVhdGUsIF9yZWxlYXNlKSB7XG4gICAgICB2YXIgX2xlbmd0aCA9IDA7XG4gICAgICB2YXIgX21heExlbmd0aCA9IGluaXRpYWxMZW5ndGg7XG4gICAgICB2YXIgcG9vbCA9IGNyZWF0ZVNpemVkQXJyYXkoX21heExlbmd0aCk7XG4gICAgICB2YXIgb2IgPSB7XG4gICAgICAgIG5ld0VsZW1lbnQ6IG5ld0VsZW1lbnQsXG4gICAgICAgIHJlbGVhc2U6IHJlbGVhc2VcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIG5ld0VsZW1lbnQoKSB7XG4gICAgICAgIHZhciBlbGVtZW50O1xuXG4gICAgICAgIGlmIChfbGVuZ3RoKSB7XG4gICAgICAgICAgX2xlbmd0aCAtPSAxO1xuICAgICAgICAgIGVsZW1lbnQgPSBwb29sW19sZW5ndGhdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVsZW1lbnQgPSBfY3JlYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcmVsZWFzZShlbGVtZW50KSB7XG4gICAgICAgIGlmIChfbGVuZ3RoID09PSBfbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgcG9vbCA9IHBvb2xpbmdbXCJkb3VibGVcIl0ocG9vbCk7XG4gICAgICAgICAgX21heExlbmd0aCAqPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKF9yZWxlYXNlKSB7XG4gICAgICAgICAgX3JlbGVhc2UoZWxlbWVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBwb29sW19sZW5ndGhdID0gZWxlbWVudDtcbiAgICAgICAgX2xlbmd0aCArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2I7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBiZXppZXJMZW5ndGhQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGFkZGVkTGVuZ3RoOiAwLFxuICAgICAgICBwZXJjZW50czogY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCkpLFxuICAgICAgICBsZW5ndGhzOiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSlcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvb2xGYWN0b3J5KDgsIGNyZWF0ZSk7XG4gIH0oKTtcblxuICB2YXIgc2VnbWVudHNMZW5ndGhQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxlbmd0aHM6IFtdLFxuICAgICAgICB0b3RhbExlbmd0aDogMFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxlYXNlKGVsZW1lbnQpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGVsZW1lbnQubGVuZ3Rocy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBiZXppZXJMZW5ndGhQb29sLnJlbGVhc2UoZWxlbWVudC5sZW5ndGhzW2ldKTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5sZW5ndGhzLmxlbmd0aCA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvb2xGYWN0b3J5KDgsIGNyZWF0ZSwgcmVsZWFzZSk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBiZXpGdW5jdGlvbigpIHtcbiAgICB2YXIgbWF0aCA9IE1hdGg7XG5cbiAgICBmdW5jdGlvbiBwb2ludE9uTGluZTJEKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpIHtcbiAgICAgIHZhciBkZXQxID0geDEgKiB5MiArIHkxICogeDMgKyB4MiAqIHkzIC0geDMgKiB5MiAtIHkzICogeDEgLSB4MiAqIHkxO1xuICAgICAgcmV0dXJuIGRldDEgPiAtMC4wMDEgJiYgZGV0MSA8IDAuMDAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBvaW50T25MaW5lM0QoeDEsIHkxLCB6MSwgeDIsIHkyLCB6MiwgeDMsIHkzLCB6Mykge1xuICAgICAgaWYgKHoxID09PSAwICYmIHoyID09PSAwICYmIHozID09PSAwKSB7XG4gICAgICAgIHJldHVybiBwb2ludE9uTGluZTJEKHgxLCB5MSwgeDIsIHkyLCB4MywgeTMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlzdDEgPSBtYXRoLnNxcnQobWF0aC5wb3coeDIgLSB4MSwgMikgKyBtYXRoLnBvdyh5MiAtIHkxLCAyKSArIG1hdGgucG93KHoyIC0gejEsIDIpKTtcbiAgICAgIHZhciBkaXN0MiA9IG1hdGguc3FydChtYXRoLnBvdyh4MyAtIHgxLCAyKSArIG1hdGgucG93KHkzIC0geTEsIDIpICsgbWF0aC5wb3coejMgLSB6MSwgMikpO1xuICAgICAgdmFyIGRpc3QzID0gbWF0aC5zcXJ0KG1hdGgucG93KHgzIC0geDIsIDIpICsgbWF0aC5wb3coeTMgLSB5MiwgMikgKyBtYXRoLnBvdyh6MyAtIHoyLCAyKSk7XG4gICAgICB2YXIgZGlmZkRpc3Q7XG5cbiAgICAgIGlmIChkaXN0MSA+IGRpc3QyKSB7XG4gICAgICAgIGlmIChkaXN0MSA+IGRpc3QzKSB7XG4gICAgICAgICAgZGlmZkRpc3QgPSBkaXN0MSAtIGRpc3QyIC0gZGlzdDM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlmZkRpc3QgPSBkaXN0MyAtIGRpc3QyIC0gZGlzdDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGlzdDMgPiBkaXN0Mikge1xuICAgICAgICBkaWZmRGlzdCA9IGRpc3QzIC0gZGlzdDIgLSBkaXN0MTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpZmZEaXN0ID0gZGlzdDIgLSBkaXN0MSAtIGRpc3QzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZGlmZkRpc3QgPiAtMC4wMDAxICYmIGRpZmZEaXN0IDwgMC4wMDAxO1xuICAgIH1cblxuICAgIHZhciBnZXRCZXppZXJMZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCkge1xuICAgICAgICB2YXIgY3VydmVTZWdtZW50cyA9IGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCk7XG4gICAgICAgIHZhciBrO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbjtcbiAgICAgICAgdmFyIHB0Q29vcmQ7XG4gICAgICAgIHZhciBwZXJjO1xuICAgICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuICAgICAgICB2YXIgcHREaXN0YW5jZTtcbiAgICAgICAgdmFyIHBvaW50ID0gW107XG4gICAgICAgIHZhciBsYXN0UG9pbnQgPSBbXTtcbiAgICAgICAgdmFyIGxlbmd0aERhdGEgPSBiZXppZXJMZW5ndGhQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgICAgbGVuID0gcHQzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY3VydmVTZWdtZW50czsgayArPSAxKSB7XG4gICAgICAgICAgcGVyYyA9IGsgLyAoY3VydmVTZWdtZW50cyAtIDEpO1xuICAgICAgICAgIHB0RGlzdGFuY2UgPSAwO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBwdENvb3JkID0gYm1Qb3coMSAtIHBlcmMsIDMpICogcHQxW2ldICsgMyAqIGJtUG93KDEgLSBwZXJjLCAyKSAqIHBlcmMgKiBwdDNbaV0gKyAzICogKDEgLSBwZXJjKSAqIGJtUG93KHBlcmMsIDIpICogcHQ0W2ldICsgYm1Qb3cocGVyYywgMykgKiBwdDJbaV07XG4gICAgICAgICAgICBwb2ludFtpXSA9IHB0Q29vcmQ7XG5cbiAgICAgICAgICAgIGlmIChsYXN0UG9pbnRbaV0gIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcHREaXN0YW5jZSArPSBibVBvdyhwb2ludFtpXSAtIGxhc3RQb2ludFtpXSwgMik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxhc3RQb2ludFtpXSA9IHBvaW50W2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwdERpc3RhbmNlKSB7XG4gICAgICAgICAgICBwdERpc3RhbmNlID0gYm1TcXJ0KHB0RGlzdGFuY2UpO1xuICAgICAgICAgICAgYWRkZWRMZW5ndGggKz0gcHREaXN0YW5jZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZW5ndGhEYXRhLnBlcmNlbnRzW2tdID0gcGVyYztcbiAgICAgICAgICBsZW5ndGhEYXRhLmxlbmd0aHNba10gPSBhZGRlZExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGxlbmd0aERhdGEuYWRkZWRMZW5ndGggPSBhZGRlZExlbmd0aDtcbiAgICAgICAgcmV0dXJuIGxlbmd0aERhdGE7XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGdldFNlZ21lbnRzTGVuZ3RoKHNoYXBlRGF0YSkge1xuICAgICAgdmFyIHNlZ21lbnRzTGVuZ3RoID0gc2VnbWVudHNMZW5ndGhQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHZhciBjbG9zZWQgPSBzaGFwZURhdGEuYztcbiAgICAgIHZhciBwYXRoViA9IHNoYXBlRGF0YS52O1xuICAgICAgdmFyIHBhdGhPID0gc2hhcGVEYXRhLm87XG4gICAgICB2YXIgcGF0aEkgPSBzaGFwZURhdGEuaTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlRGF0YS5fbGVuZ3RoO1xuICAgICAgdmFyIGxlbmd0aHMgPSBzZWdtZW50c0xlbmd0aC5sZW5ndGhzO1xuICAgICAgdmFyIHRvdGFsTGVuZ3RoID0gMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7IGkgKz0gMSkge1xuICAgICAgICBsZW5ndGhzW2ldID0gZ2V0QmV6aWVyTGVuZ3RoKHBhdGhWW2ldLCBwYXRoVltpICsgMV0sIHBhdGhPW2ldLCBwYXRoSVtpICsgMV0pO1xuICAgICAgICB0b3RhbExlbmd0aCArPSBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBpZiAoY2xvc2VkICYmIGxlbikge1xuICAgICAgICBsZW5ndGhzW2ldID0gZ2V0QmV6aWVyTGVuZ3RoKHBhdGhWW2ldLCBwYXRoVlswXSwgcGF0aE9baV0sIHBhdGhJWzBdKTtcbiAgICAgICAgdG90YWxMZW5ndGggKz0gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgIH1cblxuICAgICAgc2VnbWVudHNMZW5ndGgudG90YWxMZW5ndGggPSB0b3RhbExlbmd0aDtcbiAgICAgIHJldHVybiBzZWdtZW50c0xlbmd0aDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBCZXppZXJEYXRhKGxlbmd0aCkge1xuICAgICAgdGhpcy5zZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgIHRoaXMucG9pbnRzID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gUG9pbnREYXRhKHBhcnRpYWwsIHBvaW50KSB7XG4gICAgICB0aGlzLnBhcnRpYWxMZW5ndGggPSBwYXJ0aWFsO1xuICAgICAgdGhpcy5wb2ludCA9IHBvaW50O1xuICAgIH1cblxuICAgIHZhciBidWlsZEJlemllckRhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmVkRGF0YSA9IHt9O1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChwdDEsIHB0MiwgcHQzLCBwdDQpIHtcbiAgICAgICAgdmFyIGJlemllck5hbWUgPSAocHQxWzBdICsgJ18nICsgcHQxWzFdICsgJ18nICsgcHQyWzBdICsgJ18nICsgcHQyWzFdICsgJ18nICsgcHQzWzBdICsgJ18nICsgcHQzWzFdICsgJ18nICsgcHQ0WzBdICsgJ18nICsgcHQ0WzFdKS5yZXBsYWNlKC9cXC4vZywgJ3AnKTtcblxuICAgICAgICBpZiAoIXN0b3JlZERhdGFbYmV6aWVyTmFtZV0pIHtcbiAgICAgICAgICB2YXIgY3VydmVTZWdtZW50cyA9IGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCk7XG4gICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIGxlbjtcbiAgICAgICAgICB2YXIgcHRDb29yZDtcbiAgICAgICAgICB2YXIgcGVyYztcbiAgICAgICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuICAgICAgICAgIHZhciBwdERpc3RhbmNlO1xuICAgICAgICAgIHZhciBwb2ludDtcbiAgICAgICAgICB2YXIgbGFzdFBvaW50ID0gbnVsbDtcblxuICAgICAgICAgIGlmIChwdDEubGVuZ3RoID09PSAyICYmIChwdDFbMF0gIT09IHB0MlswXSB8fCBwdDFbMV0gIT09IHB0MlsxXSkgJiYgcG9pbnRPbkxpbmUyRChwdDFbMF0sIHB0MVsxXSwgcHQyWzBdLCBwdDJbMV0sIHB0MVswXSArIHB0M1swXSwgcHQxWzFdICsgcHQzWzFdKSAmJiBwb2ludE9uTGluZTJEKHB0MVswXSwgcHQxWzFdLCBwdDJbMF0sIHB0MlsxXSwgcHQyWzBdICsgcHQ0WzBdLCBwdDJbMV0gKyBwdDRbMV0pKSB7XG4gICAgICAgICAgICBjdXJ2ZVNlZ21lbnRzID0gMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYmV6aWVyRGF0YSA9IG5ldyBCZXppZXJEYXRhKGN1cnZlU2VnbWVudHMpO1xuICAgICAgICAgIGxlbiA9IHB0My5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY3VydmVTZWdtZW50czsgayArPSAxKSB7XG4gICAgICAgICAgICBwb2ludCA9IGNyZWF0ZVNpemVkQXJyYXkobGVuKTtcbiAgICAgICAgICAgIHBlcmMgPSBrIC8gKGN1cnZlU2VnbWVudHMgLSAxKTtcbiAgICAgICAgICAgIHB0RGlzdGFuY2UgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgcHRDb29yZCA9IGJtUG93KDEgLSBwZXJjLCAzKSAqIHB0MVtpXSArIDMgKiBibVBvdygxIC0gcGVyYywgMikgKiBwZXJjICogKHB0MVtpXSArIHB0M1tpXSkgKyAzICogKDEgLSBwZXJjKSAqIGJtUG93KHBlcmMsIDIpICogKHB0MltpXSArIHB0NFtpXSkgKyBibVBvdyhwZXJjLCAzKSAqIHB0MltpXTtcbiAgICAgICAgICAgICAgcG9pbnRbaV0gPSBwdENvb3JkO1xuXG4gICAgICAgICAgICAgIGlmIChsYXN0UG9pbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBwdERpc3RhbmNlICs9IGJtUG93KHBvaW50W2ldIC0gbGFzdFBvaW50W2ldLCAyKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwdERpc3RhbmNlID0gYm1TcXJ0KHB0RGlzdGFuY2UpO1xuICAgICAgICAgICAgYWRkZWRMZW5ndGggKz0gcHREaXN0YW5jZTtcbiAgICAgICAgICAgIGJlemllckRhdGEucG9pbnRzW2tdID0gbmV3IFBvaW50RGF0YShwdERpc3RhbmNlLCBwb2ludCk7XG4gICAgICAgICAgICBsYXN0UG9pbnQgPSBwb2ludDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBiZXppZXJEYXRhLnNlZ21lbnRMZW5ndGggPSBhZGRlZExlbmd0aDtcbiAgICAgICAgICBzdG9yZWREYXRhW2Jlemllck5hbWVdID0gYmV6aWVyRGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBzdG9yZWREYXRhW2Jlemllck5hbWVdO1xuICAgICAgfTtcbiAgICB9KCk7XG5cbiAgICBmdW5jdGlvbiBnZXREaXN0YW5jZVBlcmMocGVyYywgYmV6aWVyRGF0YSkge1xuICAgICAgdmFyIHBlcmNlbnRzID0gYmV6aWVyRGF0YS5wZXJjZW50cztcbiAgICAgIHZhciBsZW5ndGhzID0gYmV6aWVyRGF0YS5sZW5ndGhzO1xuICAgICAgdmFyIGxlbiA9IHBlcmNlbnRzLmxlbmd0aDtcbiAgICAgIHZhciBpbml0UG9zID0gYm1GbG9vcigobGVuIC0gMSkgKiBwZXJjKTtcbiAgICAgIHZhciBsZW5ndGhQb3MgPSBwZXJjICogYmV6aWVyRGF0YS5hZGRlZExlbmd0aDtcbiAgICAgIHZhciBsUGVyYyA9IDA7XG5cbiAgICAgIGlmIChpbml0UG9zID09PSBsZW4gLSAxIHx8IGluaXRQb3MgPT09IDAgfHwgbGVuZ3RoUG9zID09PSBsZW5ndGhzW2luaXRQb3NdKSB7XG4gICAgICAgIHJldHVybiBwZXJjZW50c1tpbml0UG9zXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGRpciA9IGxlbmd0aHNbaW5pdFBvc10gPiBsZW5ndGhQb3MgPyAtMSA6IDE7XG4gICAgICB2YXIgZmxhZyA9IHRydWU7XG5cbiAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgIGlmIChsZW5ndGhzW2luaXRQb3NdIDw9IGxlbmd0aFBvcyAmJiBsZW5ndGhzW2luaXRQb3MgKyAxXSA+IGxlbmd0aFBvcykge1xuICAgICAgICAgIGxQZXJjID0gKGxlbmd0aFBvcyAtIGxlbmd0aHNbaW5pdFBvc10pIC8gKGxlbmd0aHNbaW5pdFBvcyArIDFdIC0gbGVuZ3Roc1tpbml0UG9zXSk7XG4gICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluaXRQb3MgKz0gZGlyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluaXRQb3MgPCAwIHx8IGluaXRQb3MgPj0gbGVuIC0gMSkge1xuICAgICAgICAgIC8vIEZJWCBmb3IgVHlwZWRBcnJheXMgdGhhdCBkb24ndCBzdG9yZSBmbG9hdGluZyBwb2ludCB2YWx1ZXMgd2l0aCBlbm91Z2ggYWNjdXJhY3lcbiAgICAgICAgICBpZiAoaW5pdFBvcyA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgcmV0dXJuIHBlcmNlbnRzW2luaXRQb3NdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGVyY2VudHNbaW5pdFBvc10gKyAocGVyY2VudHNbaW5pdFBvcyArIDFdIC0gcGVyY2VudHNbaW5pdFBvc10pICogbFBlcmM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UG9pbnRJblNlZ21lbnQocHQxLCBwdDIsIHB0MywgcHQ0LCBwZXJjZW50LCBiZXppZXJEYXRhKSB7XG4gICAgICB2YXIgdDEgPSBnZXREaXN0YW5jZVBlcmMocGVyY2VudCwgYmV6aWVyRGF0YSk7XG4gICAgICB2YXIgdTEgPSAxIC0gdDE7XG4gICAgICB2YXIgcHRYID0gbWF0aC5yb3VuZCgodTEgKiB1MSAqIHUxICogcHQxWzBdICsgKHQxICogdTEgKiB1MSArIHUxICogdDEgKiB1MSArIHUxICogdTEgKiB0MSkgKiBwdDNbMF0gKyAodDEgKiB0MSAqIHUxICsgdTEgKiB0MSAqIHQxICsgdDEgKiB1MSAqIHQxKSAqIHB0NFswXSArIHQxICogdDEgKiB0MSAqIHB0MlswXSkgKiAxMDAwKSAvIDEwMDA7XG4gICAgICB2YXIgcHRZID0gbWF0aC5yb3VuZCgodTEgKiB1MSAqIHUxICogcHQxWzFdICsgKHQxICogdTEgKiB1MSArIHUxICogdDEgKiB1MSArIHUxICogdTEgKiB0MSkgKiBwdDNbMV0gKyAodDEgKiB0MSAqIHUxICsgdTEgKiB0MSAqIHQxICsgdDEgKiB1MSAqIHQxKSAqIHB0NFsxXSArIHQxICogdDEgKiB0MSAqIHB0MlsxXSkgKiAxMDAwKSAvIDEwMDA7XG4gICAgICByZXR1cm4gW3B0WCwgcHRZXTtcbiAgICB9XG5cbiAgICB2YXIgYmV6aWVyU2VnbWVudFBvaW50cyA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCA4KTtcblxuICAgIGZ1bmN0aW9uIGdldE5ld1NlZ21lbnQocHQxLCBwdDIsIHB0MywgcHQ0LCBzdGFydFBlcmMsIGVuZFBlcmMsIGJlemllckRhdGEpIHtcbiAgICAgIGlmIChzdGFydFBlcmMgPCAwKSB7XG4gICAgICAgIHN0YXJ0UGVyYyA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHN0YXJ0UGVyYyA+IDEpIHtcbiAgICAgICAgc3RhcnRQZXJjID0gMTtcbiAgICAgIH1cblxuICAgICAgdmFyIHQwID0gZ2V0RGlzdGFuY2VQZXJjKHN0YXJ0UGVyYywgYmV6aWVyRGF0YSk7XG4gICAgICBlbmRQZXJjID0gZW5kUGVyYyA+IDEgPyAxIDogZW5kUGVyYztcbiAgICAgIHZhciB0MSA9IGdldERpc3RhbmNlUGVyYyhlbmRQZXJjLCBiZXppZXJEYXRhKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHB0MS5sZW5ndGg7XG4gICAgICB2YXIgdTAgPSAxIC0gdDA7XG4gICAgICB2YXIgdTEgPSAxIC0gdDE7XG4gICAgICB2YXIgdTB1MHUwID0gdTAgKiB1MCAqIHUwO1xuICAgICAgdmFyIHQwdTB1MF8zID0gdDAgKiB1MCAqIHUwICogMzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB1MF8zID0gdDAgKiB0MCAqIHUwICogMzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB0MCA9IHQwICogdDAgKiB0MDsgLy9cblxuICAgICAgdmFyIHUwdTB1MSA9IHUwICogdTAgKiB1MTtcbiAgICAgIHZhciB0MHUwdTFfMyA9IHQwICogdTAgKiB1MSArIHUwICogdDAgKiB1MSArIHUwICogdTAgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDB1MV8zID0gdDAgKiB0MCAqIHUxICsgdTAgKiB0MCAqIHQxICsgdDAgKiB1MCAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MHQxID0gdDAgKiB0MCAqIHQxOyAvL1xuXG4gICAgICB2YXIgdTB1MXUxID0gdTAgKiB1MSAqIHUxO1xuICAgICAgdmFyIHQwdTF1MV8zID0gdDAgKiB1MSAqIHUxICsgdTAgKiB0MSAqIHUxICsgdTAgKiB1MSAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MXUxXzMgPSB0MCAqIHQxICogdTEgKyB1MCAqIHQxICogdDEgKyB0MCAqIHUxICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQxdDEgPSB0MCAqIHQxICogdDE7IC8vXG5cbiAgICAgIHZhciB1MXUxdTEgPSB1MSAqIHUxICogdTE7XG4gICAgICB2YXIgdDF1MXUxXzMgPSB0MSAqIHUxICogdTEgKyB1MSAqIHQxICogdTEgKyB1MSAqIHUxICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MXQxdTFfMyA9IHQxICogdDEgKiB1MSArIHUxICogdDEgKiB0MSArIHQxICogdTEgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQxdDF0MSA9IHQxICogdDEgKiB0MTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJlemllclNlZ21lbnRQb2ludHNbaSAqIDRdID0gbWF0aC5yb3VuZCgodTB1MHUwICogcHQxW2ldICsgdDB1MHUwXzMgKiBwdDNbaV0gKyB0MHQwdTBfMyAqIHB0NFtpXSArIHQwdDB0MCAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNCArIDFdID0gbWF0aC5yb3VuZCgodTB1MHUxICogcHQxW2ldICsgdDB1MHUxXzMgKiBwdDNbaV0gKyB0MHQwdTFfMyAqIHB0NFtpXSArIHQwdDB0MSAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNCArIDJdID0gbWF0aC5yb3VuZCgodTB1MXUxICogcHQxW2ldICsgdDB1MXUxXzMgKiBwdDNbaV0gKyB0MHQxdTFfMyAqIHB0NFtpXSArIHQwdDF0MSAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNCArIDNdID0gbWF0aC5yb3VuZCgodTF1MXUxICogcHQxW2ldICsgdDF1MXUxXzMgKiBwdDNbaV0gKyB0MXQxdTFfMyAqIHB0NFtpXSArIHQxdDF0MSAqIHB0MltpXSkgKiAxMDAwKSAvIDEwMDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBiZXppZXJTZWdtZW50UG9pbnRzO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRTZWdtZW50c0xlbmd0aDogZ2V0U2VnbWVudHNMZW5ndGgsXG4gICAgICBnZXROZXdTZWdtZW50OiBnZXROZXdTZWdtZW50LFxuICAgICAgZ2V0UG9pbnRJblNlZ21lbnQ6IGdldFBvaW50SW5TZWdtZW50LFxuICAgICAgYnVpbGRCZXppZXJEYXRhOiBidWlsZEJlemllckRhdGEsXG4gICAgICBwb2ludE9uTGluZTJEOiBwb2ludE9uTGluZTJELFxuICAgICAgcG9pbnRPbkxpbmUzRDogcG9pbnRPbkxpbmUzRFxuICAgIH07XG4gIH1cblxuICB2YXIgYmV6ID0gYmV6RnVuY3Rpb24oKTtcblxuICB2YXIgaW5pdEZyYW1lID0gaW5pdGlhbERlZmF1bHRGcmFtZTtcbiAgdmFyIG1hdGhBYnMgPSBNYXRoLmFicztcblxuICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVZhbHVlKGZyYW1lTnVtLCBjYWNoaW5nKSB7XG4gICAgdmFyIG9mZnNldFRpbWUgPSB0aGlzLm9mZnNldFRpbWU7XG4gICAgdmFyIG5ld1ZhbHVlO1xuXG4gICAgaWYgKHRoaXMucHJvcFR5cGUgPT09ICdtdWx0aWRpbWVuc2lvbmFsJykge1xuICAgICAgbmV3VmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgdGhpcy5wdi5sZW5ndGgpO1xuICAgIH1cblxuICAgIHZhciBpdGVyYXRpb25JbmRleCA9IGNhY2hpbmcubGFzdEluZGV4O1xuICAgIHZhciBpID0gaXRlcmF0aW9uSW5kZXg7XG4gICAgdmFyIGxlbiA9IHRoaXMua2V5ZnJhbWVzLmxlbmd0aCAtIDE7XG4gICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgIHZhciBrZXlEYXRhO1xuICAgIHZhciBuZXh0S2V5RGF0YTtcbiAgICB2YXIga2V5ZnJhbWVNZXRhZGF0YTtcblxuICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICBrZXlEYXRhID0gdGhpcy5rZXlmcmFtZXNbaV07XG4gICAgICBuZXh0S2V5RGF0YSA9IHRoaXMua2V5ZnJhbWVzW2kgKyAxXTtcblxuICAgICAgaWYgKGkgPT09IGxlbiAtIDEgJiYgZnJhbWVOdW0gPj0gbmV4dEtleURhdGEudCAtIG9mZnNldFRpbWUpIHtcbiAgICAgICAgaWYgKGtleURhdGEuaCkge1xuICAgICAgICAgIGtleURhdGEgPSBuZXh0S2V5RGF0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZXJhdGlvbkluZGV4ID0gMDtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXh0S2V5RGF0YS50IC0gb2Zmc2V0VGltZSA+IGZyYW1lTnVtKSB7XG4gICAgICAgIGl0ZXJhdGlvbkluZGV4ID0gaTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChpIDwgbGVuIC0gMSkge1xuICAgICAgICBpICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVyYXRpb25JbmRleCA9IDA7XG4gICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBrZXlmcmFtZU1ldGFkYXRhID0gdGhpcy5rZXlmcmFtZXNNZXRhZGF0YVtpXSB8fCB7fTtcbiAgICB2YXIgaztcbiAgICB2YXIga0xlbjtcbiAgICB2YXIgcGVyYztcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgajtcbiAgICB2YXIgZm5jO1xuICAgIHZhciBuZXh0S2V5VGltZSA9IG5leHRLZXlEYXRhLnQgLSBvZmZzZXRUaW1lO1xuICAgIHZhciBrZXlUaW1lID0ga2V5RGF0YS50IC0gb2Zmc2V0VGltZTtcbiAgICB2YXIgZW5kVmFsdWU7XG5cbiAgICBpZiAoa2V5RGF0YS50bykge1xuICAgICAgaWYgKCFrZXlmcmFtZU1ldGFkYXRhLmJlemllckRhdGEpIHtcbiAgICAgICAga2V5ZnJhbWVNZXRhZGF0YS5iZXppZXJEYXRhID0gYmV6LmJ1aWxkQmV6aWVyRGF0YShrZXlEYXRhLnMsIG5leHRLZXlEYXRhLnMgfHwga2V5RGF0YS5lLCBrZXlEYXRhLnRvLCBrZXlEYXRhLnRpKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGJlemllckRhdGEgPSBrZXlmcmFtZU1ldGFkYXRhLmJlemllckRhdGE7XG5cbiAgICAgIGlmIChmcmFtZU51bSA+PSBuZXh0S2V5VGltZSB8fCBmcmFtZU51bSA8IGtleVRpbWUpIHtcbiAgICAgICAgdmFyIGluZCA9IGZyYW1lTnVtID49IG5leHRLZXlUaW1lID8gYmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoIC0gMSA6IDA7XG4gICAgICAgIGtMZW4gPSBiZXppZXJEYXRhLnBvaW50c1tpbmRdLnBvaW50Lmxlbmd0aDtcblxuICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgbmV3VmFsdWVba10gPSBiZXppZXJEYXRhLnBvaW50c1tpbmRdLnBvaW50W2tdO1xuICAgICAgICB9IC8vIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID0gLTE7XG5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCkge1xuICAgICAgICAgIGZuYyA9IGtleWZyYW1lTWV0YWRhdGEuX19mbmN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKGtleURhdGEuby54LCBrZXlEYXRhLm8ueSwga2V5RGF0YS5pLngsIGtleURhdGEuaS55LCBrZXlEYXRhLm4pLmdldDtcbiAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCA9IGZuYztcbiAgICAgICAgfVxuXG4gICAgICAgIHBlcmMgPSBmbmMoKGZyYW1lTnVtIC0ga2V5VGltZSkgLyAobmV4dEtleVRpbWUgLSBrZXlUaW1lKSk7XG4gICAgICAgIHZhciBkaXN0YW5jZUluTGluZSA9IGJlemllckRhdGEuc2VnbWVudExlbmd0aCAqIHBlcmM7XG4gICAgICAgIHZhciBzZWdtZW50UGVyYztcbiAgICAgICAgdmFyIGFkZGVkTGVuZ3RoID0gY2FjaGluZy5sYXN0RnJhbWUgPCBmcmFtZU51bSAmJiBjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9PT0gaSA/IGNhY2hpbmcuX2xhc3RBZGRlZExlbmd0aCA6IDA7XG4gICAgICAgIGogPSBjYWNoaW5nLmxhc3RGcmFtZSA8IGZyYW1lTnVtICYmIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID09PSBpID8gY2FjaGluZy5fbGFzdFBvaW50IDogMDtcbiAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgIGpMZW4gPSBiZXppZXJEYXRhLnBvaW50cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgICBhZGRlZExlbmd0aCArPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wYXJ0aWFsTGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKGRpc3RhbmNlSW5MaW5lID09PSAwIHx8IHBlcmMgPT09IDAgfHwgaiA9PT0gYmV6aWVyRGF0YS5wb2ludHMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAga0xlbiA9IGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICBuZXdWYWx1ZVtrXSA9IGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50W2tdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlSW5MaW5lID49IGFkZGVkTGVuZ3RoICYmIGRpc3RhbmNlSW5MaW5lIDwgYWRkZWRMZW5ndGggKyBiZXppZXJEYXRhLnBvaW50c1tqICsgMV0ucGFydGlhbExlbmd0aCkge1xuICAgICAgICAgICAgc2VnbWVudFBlcmMgPSAoZGlzdGFuY2VJbkxpbmUgLSBhZGRlZExlbmd0aCkgLyBiZXppZXJEYXRhLnBvaW50c1tqICsgMV0ucGFydGlhbExlbmd0aDtcbiAgICAgICAgICAgIGtMZW4gPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludC5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgbmV3VmFsdWVba10gPSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXSArIChiZXppZXJEYXRhLnBvaW50c1tqICsgMV0ucG9pbnRba10gLSBiZXppZXJEYXRhLnBvaW50c1tqXS5wb2ludFtrXSkgKiBzZWdtZW50UGVyYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGogPCBqTGVuIC0gMSkge1xuICAgICAgICAgICAgaiArPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2FjaGluZy5fbGFzdFBvaW50ID0gajtcbiAgICAgICAgY2FjaGluZy5fbGFzdEFkZGVkTGVuZ3RoID0gYWRkZWRMZW5ndGggLSBiZXppZXJEYXRhLnBvaW50c1tqXS5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICBjYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9IGk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBvdXRYO1xuICAgICAgdmFyIG91dFk7XG4gICAgICB2YXIgaW5YO1xuICAgICAgdmFyIGluWTtcbiAgICAgIHZhciBrZXlWYWx1ZTtcbiAgICAgIGxlbiA9IGtleURhdGEucy5sZW5ndGg7XG4gICAgICBlbmRWYWx1ZSA9IG5leHRLZXlEYXRhLnMgfHwga2V5RGF0YS5lO1xuXG4gICAgICBpZiAodGhpcy5zaCAmJiBrZXlEYXRhLmggIT09IDEpIHtcbiAgICAgICAgaWYgKGZyYW1lTnVtID49IG5leHRLZXlUaW1lKSB7XG4gICAgICAgICAgbmV3VmFsdWVbMF0gPSBlbmRWYWx1ZVswXTtcbiAgICAgICAgICBuZXdWYWx1ZVsxXSA9IGVuZFZhbHVlWzFdO1xuICAgICAgICAgIG5ld1ZhbHVlWzJdID0gZW5kVmFsdWVbMl07XG4gICAgICAgIH0gZWxzZSBpZiAoZnJhbWVOdW0gPD0ga2V5VGltZSkge1xuICAgICAgICAgIG5ld1ZhbHVlWzBdID0ga2V5RGF0YS5zWzBdO1xuICAgICAgICAgIG5ld1ZhbHVlWzFdID0ga2V5RGF0YS5zWzFdO1xuICAgICAgICAgIG5ld1ZhbHVlWzJdID0ga2V5RGF0YS5zWzJdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBxdWF0U3RhcnQgPSBjcmVhdGVRdWF0ZXJuaW9uKGtleURhdGEucyk7XG4gICAgICAgICAgdmFyIHF1YXRFbmQgPSBjcmVhdGVRdWF0ZXJuaW9uKGVuZFZhbHVlKTtcbiAgICAgICAgICB2YXIgdGltZSA9IChmcmFtZU51bSAtIGtleVRpbWUpIC8gKG5leHRLZXlUaW1lIC0ga2V5VGltZSk7XG4gICAgICAgICAgcXVhdGVybmlvblRvRXVsZXIobmV3VmFsdWUsIHNsZXJwKHF1YXRTdGFydCwgcXVhdEVuZCwgdGltZSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAoa2V5RGF0YS5oICE9PSAxKSB7XG4gICAgICAgICAgICBpZiAoZnJhbWVOdW0gPj0gbmV4dEtleVRpbWUpIHtcbiAgICAgICAgICAgICAgcGVyYyA9IDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZyYW1lTnVtIDwga2V5VGltZSkge1xuICAgICAgICAgICAgICBwZXJjID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmIChrZXlEYXRhLm8ueC5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtleWZyYW1lTWV0YWRhdGEuX19mbmN0KSB7XG4gICAgICAgICAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCA9IFtdO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICgha2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3RbaV0pIHtcbiAgICAgICAgICAgICAgICAgIG91dFggPSBrZXlEYXRhLm8ueFtpXSA9PT0gdW5kZWZpbmVkID8ga2V5RGF0YS5vLnhbMF0gOiBrZXlEYXRhLm8ueFtpXTtcbiAgICAgICAgICAgICAgICAgIG91dFkgPSBrZXlEYXRhLm8ueVtpXSA9PT0gdW5kZWZpbmVkID8ga2V5RGF0YS5vLnlbMF0gOiBrZXlEYXRhLm8ueVtpXTtcbiAgICAgICAgICAgICAgICAgIGluWCA9IGtleURhdGEuaS54W2ldID09PSB1bmRlZmluZWQgPyBrZXlEYXRhLmkueFswXSA6IGtleURhdGEuaS54W2ldO1xuICAgICAgICAgICAgICAgICAgaW5ZID0ga2V5RGF0YS5pLnlbaV0gPT09IHVuZGVmaW5lZCA/IGtleURhdGEuaS55WzBdIDoga2V5RGF0YS5pLnlbaV07XG4gICAgICAgICAgICAgICAgICBmbmMgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhvdXRYLCBvdXRZLCBpblgsIGluWSkuZ2V0O1xuICAgICAgICAgICAgICAgICAga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3RbaV0gPSBmbmM7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZuYyA9IGtleWZyYW1lTWV0YWRhdGEuX19mbmN0W2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmICgha2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QpIHtcbiAgICAgICAgICAgICAgICBvdXRYID0ga2V5RGF0YS5vLng7XG4gICAgICAgICAgICAgICAgb3V0WSA9IGtleURhdGEuby55O1xuICAgICAgICAgICAgICAgIGluWCA9IGtleURhdGEuaS54O1xuICAgICAgICAgICAgICAgIGluWSA9IGtleURhdGEuaS55O1xuICAgICAgICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKG91dFgsIG91dFksIGluWCwgaW5ZKS5nZXQ7XG4gICAgICAgICAgICAgICAga2V5RGF0YS5rZXlmcmFtZU1ldGFkYXRhID0gZm5jO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZuYyA9IGtleWZyYW1lTWV0YWRhdGEuX19mbmN0O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcGVyYyA9IGZuYygoZnJhbWVOdW0gLSBrZXlUaW1lKSAvIChuZXh0S2V5VGltZSAtIGtleVRpbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlbmRWYWx1ZSA9IG5leHRLZXlEYXRhLnMgfHwga2V5RGF0YS5lO1xuICAgICAgICAgIGtleVZhbHVlID0ga2V5RGF0YS5oID09PSAxID8ga2V5RGF0YS5zW2ldIDoga2V5RGF0YS5zW2ldICsgKGVuZFZhbHVlW2ldIC0ga2V5RGF0YS5zW2ldKSAqIHBlcmM7XG5cbiAgICAgICAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ211bHRpZGltZW5zaW9uYWwnKSB7XG4gICAgICAgICAgICBuZXdWYWx1ZVtpXSA9IGtleVZhbHVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGtleVZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNhY2hpbmcubGFzdEluZGV4ID0gaXRlcmF0aW9uSW5kZXg7XG4gICAgcmV0dXJuIG5ld1ZhbHVlO1xuICB9IC8vIGJhc2VkIG9uIEBUb2ppJ3MgaHR0cHM6Ly9naXRodWIuY29tL3RvamkvZ2wtbWF0cml4L1xuXG5cbiAgZnVuY3Rpb24gc2xlcnAoYSwgYiwgdCkge1xuICAgIHZhciBvdXQgPSBbXTtcbiAgICB2YXIgYXggPSBhWzBdO1xuICAgIHZhciBheSA9IGFbMV07XG4gICAgdmFyIGF6ID0gYVsyXTtcbiAgICB2YXIgYXcgPSBhWzNdO1xuICAgIHZhciBieCA9IGJbMF07XG4gICAgdmFyIGJ5ID0gYlsxXTtcbiAgICB2YXIgYnogPSBiWzJdO1xuICAgIHZhciBidyA9IGJbM107XG4gICAgdmFyIG9tZWdhO1xuICAgIHZhciBjb3NvbTtcbiAgICB2YXIgc2lub207XG4gICAgdmFyIHNjYWxlMDtcbiAgICB2YXIgc2NhbGUxO1xuICAgIGNvc29tID0gYXggKiBieCArIGF5ICogYnkgKyBheiAqIGJ6ICsgYXcgKiBidztcblxuICAgIGlmIChjb3NvbSA8IDAuMCkge1xuICAgICAgY29zb20gPSAtY29zb207XG4gICAgICBieCA9IC1ieDtcbiAgICAgIGJ5ID0gLWJ5O1xuICAgICAgYnogPSAtYno7XG4gICAgICBidyA9IC1idztcbiAgICB9XG5cbiAgICBpZiAoMS4wIC0gY29zb20gPiAwLjAwMDAwMSkge1xuICAgICAgb21lZ2EgPSBNYXRoLmFjb3MoY29zb20pO1xuICAgICAgc2lub20gPSBNYXRoLnNpbihvbWVnYSk7XG4gICAgICBzY2FsZTAgPSBNYXRoLnNpbigoMS4wIC0gdCkgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICAgIHNjYWxlMSA9IE1hdGguc2luKHQgKiBvbWVnYSkgLyBzaW5vbTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2NhbGUwID0gMS4wIC0gdDtcbiAgICAgIHNjYWxlMSA9IHQ7XG4gICAgfVxuXG4gICAgb3V0WzBdID0gc2NhbGUwICogYXggKyBzY2FsZTEgKiBieDtcbiAgICBvdXRbMV0gPSBzY2FsZTAgKiBheSArIHNjYWxlMSAqIGJ5O1xuICAgIG91dFsyXSA9IHNjYWxlMCAqIGF6ICsgc2NhbGUxICogYno7XG4gICAgb3V0WzNdID0gc2NhbGUwICogYXcgKyBzY2FsZTEgKiBidztcbiAgICByZXR1cm4gb3V0O1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhdGVybmlvblRvRXVsZXIob3V0LCBxdWF0KSB7XG4gICAgdmFyIHF4ID0gcXVhdFswXTtcbiAgICB2YXIgcXkgPSBxdWF0WzFdO1xuICAgIHZhciBxeiA9IHF1YXRbMl07XG4gICAgdmFyIHF3ID0gcXVhdFszXTtcbiAgICB2YXIgaGVhZGluZyA9IE1hdGguYXRhbjIoMiAqIHF5ICogcXcgLSAyICogcXggKiBxeiwgMSAtIDIgKiBxeSAqIHF5IC0gMiAqIHF6ICogcXopO1xuICAgIHZhciBhdHRpdHVkZSA9IE1hdGguYXNpbigyICogcXggKiBxeSArIDIgKiBxeiAqIHF3KTtcbiAgICB2YXIgYmFuayA9IE1hdGguYXRhbjIoMiAqIHF4ICogcXcgLSAyICogcXkgKiBxeiwgMSAtIDIgKiBxeCAqIHF4IC0gMiAqIHF6ICogcXopO1xuICAgIG91dFswXSA9IGhlYWRpbmcgLyBkZWdUb1JhZHM7XG4gICAgb3V0WzFdID0gYXR0aXR1ZGUgLyBkZWdUb1JhZHM7XG4gICAgb3V0WzJdID0gYmFuayAvIGRlZ1RvUmFkcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVF1YXRlcm5pb24odmFsdWVzKSB7XG4gICAgdmFyIGhlYWRpbmcgPSB2YWx1ZXNbMF0gKiBkZWdUb1JhZHM7XG4gICAgdmFyIGF0dGl0dWRlID0gdmFsdWVzWzFdICogZGVnVG9SYWRzO1xuICAgIHZhciBiYW5rID0gdmFsdWVzWzJdICogZGVnVG9SYWRzO1xuICAgIHZhciBjMSA9IE1hdGguY29zKGhlYWRpbmcgLyAyKTtcbiAgICB2YXIgYzIgPSBNYXRoLmNvcyhhdHRpdHVkZSAvIDIpO1xuICAgIHZhciBjMyA9IE1hdGguY29zKGJhbmsgLyAyKTtcbiAgICB2YXIgczEgPSBNYXRoLnNpbihoZWFkaW5nIC8gMik7XG4gICAgdmFyIHMyID0gTWF0aC5zaW4oYXR0aXR1ZGUgLyAyKTtcbiAgICB2YXIgczMgPSBNYXRoLnNpbihiYW5rIC8gMik7XG4gICAgdmFyIHcgPSBjMSAqIGMyICogYzMgLSBzMSAqIHMyICogczM7XG4gICAgdmFyIHggPSBzMSAqIHMyICogYzMgKyBjMSAqIGMyICogczM7XG4gICAgdmFyIHkgPSBzMSAqIGMyICogYzMgKyBjMSAqIHMyICogczM7XG4gICAgdmFyIHogPSBjMSAqIHMyICogYzMgLSBzMSAqIGMyICogczM7XG4gICAgcmV0dXJuIFt4LCB5LCB6LCB3XTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbHVlQXRDdXJyZW50VGltZSgpIHtcbiAgICB2YXIgZnJhbWVOdW0gPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICB2YXIgaW5pdFRpbWUgPSB0aGlzLmtleWZyYW1lc1swXS50IC0gdGhpcy5vZmZzZXRUaW1lO1xuICAgIHZhciBlbmRUaW1lID0gdGhpcy5rZXlmcmFtZXNbdGhpcy5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIHRoaXMub2Zmc2V0VGltZTtcblxuICAgIGlmICghKGZyYW1lTnVtID09PSB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSB8fCB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSAhPT0gaW5pdEZyYW1lICYmICh0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA+PSBlbmRUaW1lICYmIGZyYW1lTnVtID49IGVuZFRpbWUgfHwgdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPCBpbml0VGltZSAmJiBmcmFtZU51bSA8IGluaXRUaW1lKSkpIHtcbiAgICAgIGlmICh0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA+PSBmcmFtZU51bSkge1xuICAgICAgICB0aGlzLl9jYWNoaW5nLl9sYXN0S2V5ZnJhbWVJbmRleCA9IC0xO1xuICAgICAgICB0aGlzLl9jYWNoaW5nLmxhc3RJbmRleCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciByZW5kZXJSZXN1bHQgPSB0aGlzLmludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sIHRoaXMuX2NhY2hpbmcpO1xuICAgICAgdGhpcy5wdiA9IHJlbmRlclJlc3VsdDtcbiAgICB9XG5cbiAgICB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA9IGZyYW1lTnVtO1xuICAgIHJldHVybiB0aGlzLnB2O1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0VlZhbHVlKHZhbCkge1xuICAgIHZhciBtdWx0aXBsaWVkVmFsdWU7XG5cbiAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJykge1xuICAgICAgbXVsdGlwbGllZFZhbHVlID0gdmFsICogdGhpcy5tdWx0O1xuXG4gICAgICBpZiAobWF0aEFicyh0aGlzLnYgLSBtdWx0aXBsaWVkVmFsdWUpID4gMC4wMDAwMSkge1xuICAgICAgICB0aGlzLnYgPSBtdWx0aXBsaWVkVmFsdWU7XG4gICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnYubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBtdWx0aXBsaWVkVmFsdWUgPSB2YWxbaV0gKiB0aGlzLm11bHQ7XG5cbiAgICAgICAgaWYgKG1hdGhBYnModGhpcy52W2ldIC0gbXVsdGlwbGllZFZhbHVlKSA+IDAuMDAwMDEpIHtcbiAgICAgICAgICB0aGlzLnZbaV0gPSBtdWx0aXBsaWVkVmFsdWU7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlKCkge1xuICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQgfHwgIXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmxvY2spIHtcbiAgICAgIHRoaXMuc2V0VlZhbHVlKHRoaXMucHYpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMubG9jayA9IHRydWU7XG4gICAgdGhpcy5fbWRmID0gdGhpcy5faXNGaXJzdEZyYW1lO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gICAgdmFyIGZpbmFsVmFsdWUgPSB0aGlzLmtmID8gdGhpcy5wdiA6IHRoaXMuZGF0YS5rO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRWVmFsdWUoZmluYWxWYWx1ZSk7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgdGhpcy5sb2NrID0gZmFsc2U7XG4gICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEVmZmVjdChlZmZlY3RGdW5jdGlvbikge1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlLnB1c2goZWZmZWN0RnVuY3Rpb24pO1xuICAgIHRoaXMuY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFZhbHVlUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wcm9wVHlwZSA9ICd1bmlkaW1lbnNpb25hbCc7XG4gICAgdGhpcy5tdWx0ID0gbXVsdCB8fCAxO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy52ID0gbXVsdCA/IGRhdGEuayAqIG11bHQgOiBkYXRhLms7XG4gICAgdGhpcy5wdiA9IGRhdGEuaztcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICB0aGlzLmtmID0gZmFsc2U7XG4gICAgdGhpcy52ZWwgPSAwO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLmdldFZhbHVlID0gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtcbiAgICB0aGlzLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICB0aGlzLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIE11bHRpRGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICB0aGlzLnByb3BUeXBlID0gJ211bHRpZGltZW5zaW9uYWwnO1xuICAgIHRoaXMubXVsdCA9IG11bHQgfHwgMTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgIHRoaXMuayA9IGZhbHNlO1xuICAgIHRoaXMua2YgPSBmYWxzZTtcbiAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZGF0YS5rLmxlbmd0aDtcbiAgICB0aGlzLnYgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICB0aGlzLnB2ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgdGhpcy52ZWwgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy52W2ldID0gZGF0YS5rW2ldICogdGhpcy5tdWx0O1xuICAgICAgdGhpcy5wdltpXSA9IGRhdGEua1tpXTtcbiAgICB9XG5cbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgdGhpcy5zZXRWVmFsdWUgPSBzZXRWVmFsdWU7XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBLZXlmcmFtZWRWYWx1ZVByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcikge1xuICAgIHRoaXMucHJvcFR5cGUgPSAndW5pZGltZW5zaW9uYWwnO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gZGF0YS5rO1xuICAgIHRoaXMua2V5ZnJhbWVzTWV0YWRhdGEgPSBbXTtcbiAgICB0aGlzLm9mZnNldFRpbWUgPSBlbGVtLmRhdGEuc3Q7XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5fY2FjaGluZyA9IHtcbiAgICAgIGxhc3RGcmFtZTogaW5pdEZyYW1lLFxuICAgICAgbGFzdEluZGV4OiAwLFxuICAgICAgdmFsdWU6IDAsXG4gICAgICBfbGFzdEtleWZyYW1lSW5kZXg6IC0xXG4gICAgfTtcbiAgICB0aGlzLmsgPSB0cnVlO1xuICAgIHRoaXMua2YgPSB0cnVlO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5tdWx0ID0gbXVsdCB8fCAxO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgIHRoaXMudiA9IGluaXRGcmFtZTtcbiAgICB0aGlzLnB2ID0gaW5pdEZyYW1lO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgdGhpcy5zZXRWVmFsdWUgPSBzZXRWVmFsdWU7XG4gICAgdGhpcy5pbnRlcnBvbGF0ZVZhbHVlID0gaW50ZXJwb2xhdGVWYWx1ZTtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtnZXRWYWx1ZUF0Q3VycmVudFRpbWUuYmluZCh0aGlzKV07XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICBmdW5jdGlvbiBLZXlmcmFtZWRNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wcm9wVHlwZSA9ICdtdWx0aWRpbWVuc2lvbmFsJztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZGF0YS5rLmxlbmd0aDtcbiAgICB2YXIgcztcbiAgICB2YXIgZTtcbiAgICB2YXIgdG87XG4gICAgdmFyIHRpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7IGkgKz0gMSkge1xuICAgICAgaWYgKGRhdGEua1tpXS50byAmJiBkYXRhLmtbaV0ucyAmJiBkYXRhLmtbaSArIDFdICYmIGRhdGEua1tpICsgMV0ucykge1xuICAgICAgICBzID0gZGF0YS5rW2ldLnM7XG4gICAgICAgIGUgPSBkYXRhLmtbaSArIDFdLnM7XG4gICAgICAgIHRvID0gZGF0YS5rW2ldLnRvO1xuICAgICAgICB0aSA9IGRhdGEua1tpXS50aTtcblxuICAgICAgICBpZiAocy5sZW5ndGggPT09IDIgJiYgIShzWzBdID09PSBlWzBdICYmIHNbMV0gPT09IGVbMV0pICYmIGJlei5wb2ludE9uTGluZTJEKHNbMF0sIHNbMV0sIGVbMF0sIGVbMV0sIHNbMF0gKyB0b1swXSwgc1sxXSArIHRvWzFdKSAmJiBiZXoucG9pbnRPbkxpbmUyRChzWzBdLCBzWzFdLCBlWzBdLCBlWzFdLCBlWzBdICsgdGlbMF0sIGVbMV0gKyB0aVsxXSkgfHwgcy5sZW5ndGggPT09IDMgJiYgIShzWzBdID09PSBlWzBdICYmIHNbMV0gPT09IGVbMV0gJiYgc1syXSA9PT0gZVsyXSkgJiYgYmV6LnBvaW50T25MaW5lM0Qoc1swXSwgc1sxXSwgc1syXSwgZVswXSwgZVsxXSwgZVsyXSwgc1swXSArIHRvWzBdLCBzWzFdICsgdG9bMV0sIHNbMl0gKyB0b1syXSkgJiYgYmV6LnBvaW50T25MaW5lM0Qoc1swXSwgc1sxXSwgc1syXSwgZVswXSwgZVsxXSwgZVsyXSwgZVswXSArIHRpWzBdLCBlWzFdICsgdGlbMV0sIGVbMl0gKyB0aVsyXSkpIHtcbiAgICAgICAgICBkYXRhLmtbaV0udG8gPSBudWxsO1xuICAgICAgICAgIGRhdGEua1tpXS50aSA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc1swXSA9PT0gZVswXSAmJiBzWzFdID09PSBlWzFdICYmIHRvWzBdID09PSAwICYmIHRvWzFdID09PSAwICYmIHRpWzBdID09PSAwICYmIHRpWzFdID09PSAwKSB7XG4gICAgICAgICAgaWYgKHMubGVuZ3RoID09PSAyIHx8IHNbMl0gPT09IGVbMl0gJiYgdG9bMl0gPT09IDAgJiYgdGlbMl0gPT09IDApIHtcbiAgICAgICAgICAgIGRhdGEua1tpXS50byA9IG51bGw7XG4gICAgICAgICAgICBkYXRhLmtbaV0udGkgPSBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW2dldFZhbHVlQXRDdXJyZW50VGltZS5iaW5kKHRoaXMpXTtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMua2V5ZnJhbWVzID0gZGF0YS5rO1xuICAgIHRoaXMua2V5ZnJhbWVzTWV0YWRhdGEgPSBbXTtcbiAgICB0aGlzLm9mZnNldFRpbWUgPSBlbGVtLmRhdGEuc3Q7XG4gICAgdGhpcy5rID0gdHJ1ZTtcbiAgICB0aGlzLmtmID0gdHJ1ZTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMubXVsdCA9IG11bHQgfHwgMTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICB0aGlzLmdldFZhbHVlID0gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtcbiAgICB0aGlzLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICB0aGlzLmludGVycG9sYXRlVmFsdWUgPSBpbnRlcnBvbGF0ZVZhbHVlO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHZhciBhcnJMZW4gPSBkYXRhLmtbMF0ucy5sZW5ndGg7XG4gICAgdGhpcy52ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGFyckxlbik7XG4gICAgdGhpcy5wdiA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBhcnJMZW4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGFyckxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnZbaV0gPSBpbml0RnJhbWU7XG4gICAgICB0aGlzLnB2W2ldID0gaW5pdEZyYW1lO1xuICAgIH1cblxuICAgIHRoaXMuX2NhY2hpbmcgPSB7XG4gICAgICBsYXN0RnJhbWU6IGluaXRGcmFtZSxcbiAgICAgIGxhc3RJbmRleDogMCxcbiAgICAgIHZhbHVlOiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgYXJyTGVuKVxuICAgIH07XG4gICAgdGhpcy5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG4gIH1cblxuICB2YXIgUHJvcGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGdldFByb3AoZWxlbSwgZGF0YSwgdHlwZSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgICBpZiAoZGF0YS5zaWQpIHtcbiAgICAgICAgZGF0YSA9IGVsZW0uZ2xvYmFsRGF0YS5zbG90TWFuYWdlci5nZXRQcm9wKGRhdGEpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcDtcblxuICAgICAgaWYgKCFkYXRhLmsubGVuZ3RoKSB7XG4gICAgICAgIHAgPSBuZXcgVmFsdWVQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZGF0YS5rWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICBwID0gbmV3IE11bHRpRGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgcCA9IG5ldyBLZXlmcmFtZWRWYWx1ZVByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHAgPSBuZXcgS2V5ZnJhbWVkTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcik7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkocCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIHZhciBvYiA9IHtcbiAgICAgIGdldFByb3A6IGdldFByb3BcbiAgICB9O1xuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcigpIHt9XG5cbiAgRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyLnByb3RvdHlwZSA9IHtcbiAgICBhZGREeW5hbWljUHJvcGVydHk6IGZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKSB7XG4gICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5pbmRleE9mKHByb3ApID09PSAtMSkge1xuICAgICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLnB1c2gocHJvcCk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgICAgICAgdGhpcy5faXNBbmltYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBpdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM6IGZ1bmN0aW9uIGl0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uX21kZikge1xuICAgICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGluaXREeW5hbWljUHJvcGVydHlDb250YWluZXI6IGZ1bmN0aW9uIGluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyKSB7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMgPSBbXTtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdGhpcy5faXNBbmltYXRlZCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcG9pbnRQb29sID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHJldHVybiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvb2xGYWN0b3J5KDgsIGNyZWF0ZSk7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTaGFwZVBhdGgoKSB7XG4gICAgdGhpcy5jID0gZmFsc2U7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tYXhMZW5ndGggPSA4O1xuICAgIHRoaXMudiA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKTtcbiAgICB0aGlzLm8gPSBjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7XG4gICAgdGhpcy5pID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpO1xuICB9XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5zZXRQYXRoRGF0YSA9IGZ1bmN0aW9uIChjbG9zZWQsIGxlbikge1xuICAgIHRoaXMuYyA9IGNsb3NlZDtcbiAgICB0aGlzLnNldExlbmd0aChsZW4pO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICB0aGlzLnZbaV0gPSBwb2ludFBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgdGhpcy5vW2ldID0gcG9pbnRQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHRoaXMuaVtpXSA9IHBvaW50UG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICBpICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUuc2V0TGVuZ3RoID0gZnVuY3Rpb24gKGxlbikge1xuICAgIHdoaWxlICh0aGlzLl9tYXhMZW5ndGggPCBsZW4pIHtcbiAgICAgIHRoaXMuZG91YmxlQXJyYXlMZW5ndGgoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sZW5ndGggPSBsZW47XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5kb3VibGVBcnJheUxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnYgPSB0aGlzLnYuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKSk7XG4gICAgdGhpcy5pID0gdGhpcy5pLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO1xuICAgIHRoaXMubyA9IHRoaXMuby5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTtcbiAgICB0aGlzLl9tYXhMZW5ndGggKj0gMjtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnNldFhZQXQgPSBmdW5jdGlvbiAoeCwgeSwgdHlwZSwgcG9zLCByZXBsYWNlKSB7XG4gICAgdmFyIGFycjtcbiAgICB0aGlzLl9sZW5ndGggPSBNYXRoLm1heCh0aGlzLl9sZW5ndGgsIHBvcyArIDEpO1xuXG4gICAgaWYgKHRoaXMuX2xlbmd0aCA+PSB0aGlzLl9tYXhMZW5ndGgpIHtcbiAgICAgIHRoaXMuZG91YmxlQXJyYXlMZW5ndGgoKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgIGNhc2UgJ3YnOlxuICAgICAgICBhcnIgPSB0aGlzLnY7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdpJzpcbiAgICAgICAgYXJyID0gdGhpcy5pO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnbyc6XG4gICAgICAgIGFyciA9IHRoaXMubztcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGFyciA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoIWFycltwb3NdIHx8IGFycltwb3NdICYmICFyZXBsYWNlKSB7XG4gICAgICBhcnJbcG9zXSA9IHBvaW50UG9vbC5uZXdFbGVtZW50KCk7XG4gICAgfVxuXG4gICAgYXJyW3Bvc11bMF0gPSB4O1xuICAgIGFycltwb3NdWzFdID0geTtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnNldFRyaXBsZUF0ID0gZnVuY3Rpb24gKHZYLCB2WSwgb1gsIG9ZLCBpWCwgaVksIHBvcywgcmVwbGFjZSkge1xuICAgIHRoaXMuc2V0WFlBdCh2WCwgdlksICd2JywgcG9zLCByZXBsYWNlKTtcbiAgICB0aGlzLnNldFhZQXQob1gsIG9ZLCAnbycsIHBvcywgcmVwbGFjZSk7XG4gICAgdGhpcy5zZXRYWUF0KGlYLCBpWSwgJ2knLCBwb3MsIHJlcGxhY2UpO1xuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUucmV2ZXJzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3UGF0aCA9IG5ldyBTaGFwZVBhdGgoKTtcbiAgICBuZXdQYXRoLnNldFBhdGhEYXRhKHRoaXMuYywgdGhpcy5fbGVuZ3RoKTtcbiAgICB2YXIgdmVydGljZXMgPSB0aGlzLnY7XG4gICAgdmFyIG91dFBvaW50cyA9IHRoaXMubztcbiAgICB2YXIgaW5Qb2ludHMgPSB0aGlzLmk7XG4gICAgdmFyIGluaXQgPSAwO1xuXG4gICAgaWYgKHRoaXMuYykge1xuICAgICAgbmV3UGF0aC5zZXRUcmlwbGVBdCh2ZXJ0aWNlc1swXVswXSwgdmVydGljZXNbMF1bMV0sIGluUG9pbnRzWzBdWzBdLCBpblBvaW50c1swXVsxXSwgb3V0UG9pbnRzWzBdWzBdLCBvdXRQb2ludHNbMF1bMV0sIDAsIGZhbHNlKTtcbiAgICAgIGluaXQgPSAxO1xuICAgIH1cblxuICAgIHZhciBjbnQgPSB0aGlzLl9sZW5ndGggLSAxO1xuICAgIHZhciBsZW4gPSB0aGlzLl9sZW5ndGg7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSBpbml0OyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIG5ld1BhdGguc2V0VHJpcGxlQXQodmVydGljZXNbY250XVswXSwgdmVydGljZXNbY250XVsxXSwgaW5Qb2ludHNbY250XVswXSwgaW5Qb2ludHNbY250XVsxXSwgb3V0UG9pbnRzW2NudF1bMF0sIG91dFBvaW50c1tjbnRdWzFdLCBpLCBmYWxzZSk7XG4gICAgICBjbnQgLT0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3UGF0aDtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLmxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fbGVuZ3RoO1xuICB9O1xuXG4gIHZhciBzaGFwZVBvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIG5ldyBTaGFwZVBhdGgoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxlYXNlKHNoYXBlUGF0aCkge1xuICAgICAgdmFyIGxlbiA9IHNoYXBlUGF0aC5fbGVuZ3RoO1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBwb2ludFBvb2wucmVsZWFzZShzaGFwZVBhdGgudltpXSk7XG4gICAgICAgIHBvaW50UG9vbC5yZWxlYXNlKHNoYXBlUGF0aC5pW2ldKTtcbiAgICAgICAgcG9pbnRQb29sLnJlbGVhc2Uoc2hhcGVQYXRoLm9baV0pO1xuICAgICAgICBzaGFwZVBhdGgudltpXSA9IG51bGw7XG4gICAgICAgIHNoYXBlUGF0aC5pW2ldID0gbnVsbDtcbiAgICAgICAgc2hhcGVQYXRoLm9baV0gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBzaGFwZVBhdGguX2xlbmd0aCA9IDA7XG4gICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKHNoYXBlKSB7XG4gICAgICB2YXIgY2xvbmVkID0gZmFjdG9yeS5uZXdFbGVtZW50KCk7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZS5fbGVuZ3RoID09PSB1bmRlZmluZWQgPyBzaGFwZS52Lmxlbmd0aCA6IHNoYXBlLl9sZW5ndGg7XG4gICAgICBjbG9uZWQuc2V0TGVuZ3RoKGxlbik7XG4gICAgICBjbG9uZWQuYyA9IHNoYXBlLmM7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBjbG9uZWQuc2V0VHJpcGxlQXQoc2hhcGUudltpXVswXSwgc2hhcGUudltpXVsxXSwgc2hhcGUub1tpXVswXSwgc2hhcGUub1tpXVsxXSwgc2hhcGUuaVtpXVswXSwgc2hhcGUuaVtpXVsxXSwgaSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZWQ7XG4gICAgfVxuXG4gICAgdmFyIGZhY3RvcnkgPSBwb29sRmFjdG9yeSg0LCBjcmVhdGUsIHJlbGVhc2UpO1xuICAgIGZhY3RvcnkuY2xvbmUgPSBjbG9uZTtcbiAgICByZXR1cm4gZmFjdG9yeTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNoYXBlQ29sbGVjdGlvbigpIHtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX21heExlbmd0aCA9IDQ7XG4gICAgdGhpcy5zaGFwZXMgPSBjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7XG4gIH1cblxuICBTaGFwZUNvbGxlY3Rpb24ucHJvdG90eXBlLmFkZFNoYXBlID0gZnVuY3Rpb24gKHNoYXBlRGF0YSkge1xuICAgIGlmICh0aGlzLl9sZW5ndGggPT09IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgdGhpcy5zaGFwZXMgPSB0aGlzLnNoYXBlcy5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTtcbiAgICAgIHRoaXMuX21heExlbmd0aCAqPSAyO1xuICAgIH1cblxuICAgIHRoaXMuc2hhcGVzW3RoaXMuX2xlbmd0aF0gPSBzaGFwZURhdGE7XG4gICAgdGhpcy5fbGVuZ3RoICs9IDE7XG4gIH07XG5cbiAgU2hhcGVDb2xsZWN0aW9uLnByb3RvdHlwZS5yZWxlYXNlU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRoaXMuX2xlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzaGFwZVBvb2wucmVsZWFzZSh0aGlzLnNoYXBlc1tpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgfTtcblxuICB2YXIgc2hhcGVDb2xsZWN0aW9uUG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7XG4gICAgICBuZXdTaGFwZUNvbGxlY3Rpb246IG5ld1NoYXBlQ29sbGVjdGlvbixcbiAgICAgIHJlbGVhc2U6IHJlbGVhc2VcbiAgICB9O1xuICAgIHZhciBfbGVuZ3RoID0gMDtcbiAgICB2YXIgX21heExlbmd0aCA9IDQ7XG4gICAgdmFyIHBvb2wgPSBjcmVhdGVTaXplZEFycmF5KF9tYXhMZW5ndGgpO1xuXG4gICAgZnVuY3Rpb24gbmV3U2hhcGVDb2xsZWN0aW9uKCkge1xuICAgICAgdmFyIHNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgaWYgKF9sZW5ndGgpIHtcbiAgICAgICAgX2xlbmd0aCAtPSAxO1xuICAgICAgICBzaGFwZUNvbGxlY3Rpb24gPSBwb29sW19sZW5ndGhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2hhcGVDb2xsZWN0aW9uID0gbmV3IFNoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2hhcGVDb2xsZWN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGVhc2Uoc2hhcGVDb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZUNvbGxlY3Rpb24uX2xlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlUG9vbC5yZWxlYXNlKHNoYXBlQ29sbGVjdGlvbi5zaGFwZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICBzaGFwZUNvbGxlY3Rpb24uX2xlbmd0aCA9IDA7XG5cbiAgICAgIGlmIChfbGVuZ3RoID09PSBfbWF4TGVuZ3RoKSB7XG4gICAgICAgIHBvb2wgPSBwb29saW5nW1wiZG91YmxlXCJdKHBvb2wpO1xuICAgICAgICBfbWF4TGVuZ3RoICo9IDI7XG4gICAgICB9XG5cbiAgICAgIHBvb2xbX2xlbmd0aF0gPSBzaGFwZUNvbGxlY3Rpb247XG4gICAgICBfbGVuZ3RoICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIFNoYXBlUHJvcGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbml0RnJhbWUgPSAtOTk5OTk5O1xuXG4gICAgZnVuY3Rpb24gaW50ZXJwb2xhdGVTaGFwZShmcmFtZU51bSwgcHJldmlvdXNWYWx1ZSwgY2FjaGluZykge1xuICAgICAgdmFyIGl0ZXJhdGlvbkluZGV4ID0gY2FjaGluZy5sYXN0SW5kZXg7XG4gICAgICB2YXIga2V5UHJvcFM7XG4gICAgICB2YXIga2V5UHJvcEU7XG4gICAgICB2YXIgaXNIb2xkO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgaztcbiAgICAgIHZhciBqTGVuO1xuICAgICAgdmFyIGtMZW47XG4gICAgICB2YXIgcGVyYztcbiAgICAgIHZhciB2ZXJ0ZXhWYWx1ZTtcbiAgICAgIHZhciBrZiA9IHRoaXMua2V5ZnJhbWVzO1xuXG4gICAgICBpZiAoZnJhbWVOdW0gPCBrZlswXS50IC0gdGhpcy5vZmZzZXRUaW1lKSB7XG4gICAgICAgIGtleVByb3BTID0ga2ZbMF0uc1swXTtcbiAgICAgICAgaXNIb2xkID0gdHJ1ZTtcbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSAwO1xuICAgICAgfSBlbHNlIGlmIChmcmFtZU51bSA+PSBrZltrZi5sZW5ndGggLSAxXS50IC0gdGhpcy5vZmZzZXRUaW1lKSB7XG4gICAgICAgIGtleVByb3BTID0ga2Zba2YubGVuZ3RoIC0gMV0ucyA/IGtmW2tmLmxlbmd0aCAtIDFdLnNbMF0gOiBrZltrZi5sZW5ndGggLSAyXS5lWzBdO1xuICAgICAgICAvKiBpZihrZltrZi5sZW5ndGggLSAxXS5zKXtcclxuICAgICAgICAgICAgICAgICAga2V5UHJvcFMgPSBrZltrZi5sZW5ndGggLSAxXS5zWzBdO1xyXG4gICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICBrZXlQcm9wUyA9IGtmW2tmLmxlbmd0aCAtIDJdLmVbMF07XHJcbiAgICAgICAgICAgICAgfSAqL1xuXG4gICAgICAgIGlzSG9sZCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IGl0ZXJhdGlvbkluZGV4O1xuICAgICAgICB2YXIgbGVuID0ga2YubGVuZ3RoIC0gMTtcbiAgICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgICB2YXIga2V5RGF0YTtcbiAgICAgICAgdmFyIG5leHRLZXlEYXRhO1xuICAgICAgICB2YXIga2V5ZnJhbWVNZXRhZGF0YTtcblxuICAgICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICAgIGtleURhdGEgPSBrZltpXTtcbiAgICAgICAgICBuZXh0S2V5RGF0YSA9IGtmW2kgKyAxXTtcblxuICAgICAgICAgIGlmIChuZXh0S2V5RGF0YS50IC0gdGhpcy5vZmZzZXRUaW1lID4gZnJhbWVOdW0pIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpIDwgbGVuIC0gMSkge1xuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAga2V5ZnJhbWVNZXRhZGF0YSA9IHRoaXMua2V5ZnJhbWVzTWV0YWRhdGFbaV0gfHwge307XG4gICAgICAgIGlzSG9sZCA9IGtleURhdGEuaCA9PT0gMTtcbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSBpO1xuXG4gICAgICAgIGlmICghaXNIb2xkKSB7XG4gICAgICAgICAgaWYgKGZyYW1lTnVtID49IG5leHRLZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpIHtcbiAgICAgICAgICAgIHBlcmMgPSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZnJhbWVOdW0gPCBrZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpIHtcbiAgICAgICAgICAgIHBlcmMgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgZm5jO1xuXG4gICAgICAgICAgICBpZiAoa2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QpIHtcbiAgICAgICAgICAgICAgZm5jID0ga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3Q7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmbmMgPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZyhrZXlEYXRhLm8ueCwga2V5RGF0YS5vLnksIGtleURhdGEuaS54LCBrZXlEYXRhLmkueSkuZ2V0O1xuICAgICAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCA9IGZuYztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGVyYyA9IGZuYygoZnJhbWVOdW0gLSAoa2V5RGF0YS50IC0gdGhpcy5vZmZzZXRUaW1lKSkgLyAobmV4dEtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSAtIChrZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAga2V5UHJvcEUgPSBuZXh0S2V5RGF0YS5zID8gbmV4dEtleURhdGEuc1swXSA6IGtleURhdGEuZVswXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGtleVByb3BTID0ga2V5RGF0YS5zWzBdO1xuICAgICAgfVxuXG4gICAgICBqTGVuID0gcHJldmlvdXNWYWx1ZS5fbGVuZ3RoO1xuICAgICAga0xlbiA9IGtleVByb3BTLmlbMF0ubGVuZ3RoO1xuICAgICAgY2FjaGluZy5sYXN0SW5kZXggPSBpdGVyYXRpb25JbmRleDtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgdmVydGV4VmFsdWUgPSBpc0hvbGQgPyBrZXlQcm9wUy5pW2pdW2tdIDoga2V5UHJvcFMuaVtqXVtrXSArIChrZXlQcm9wRS5pW2pdW2tdIC0ga2V5UHJvcFMuaVtqXVtrXSkgKiBwZXJjO1xuICAgICAgICAgIHByZXZpb3VzVmFsdWUuaVtqXVtrXSA9IHZlcnRleFZhbHVlO1xuICAgICAgICAgIHZlcnRleFZhbHVlID0gaXNIb2xkID8ga2V5UHJvcFMub1tqXVtrXSA6IGtleVByb3BTLm9bal1ba10gKyAoa2V5UHJvcEUub1tqXVtrXSAtIGtleVByb3BTLm9bal1ba10pICogcGVyYztcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlLm9bal1ba10gPSB2ZXJ0ZXhWYWx1ZTtcbiAgICAgICAgICB2ZXJ0ZXhWYWx1ZSA9IGlzSG9sZCA/IGtleVByb3BTLnZbal1ba10gOiBrZXlQcm9wUy52W2pdW2tdICsgKGtleVByb3BFLnZbal1ba10gLSBrZXlQcm9wUy52W2pdW2tdKSAqIHBlcmM7XG4gICAgICAgICAgcHJldmlvdXNWYWx1ZS52W2pdW2tdID0gdmVydGV4VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVNoYXBlQ3VycmVudFRpbWUoKSB7XG4gICAgICB2YXIgZnJhbWVOdW0gPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICAgIHZhciBpbml0VGltZSA9IHRoaXMua2V5ZnJhbWVzWzBdLnQgLSB0aGlzLm9mZnNldFRpbWU7XG4gICAgICB2YXIgZW5kVGltZSA9IHRoaXMua2V5ZnJhbWVzW3RoaXMua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSB0aGlzLm9mZnNldFRpbWU7XG4gICAgICB2YXIgbGFzdEZyYW1lID0gdGhpcy5fY2FjaGluZy5sYXN0RnJhbWU7XG5cbiAgICAgIGlmICghKGxhc3RGcmFtZSAhPT0gaW5pdEZyYW1lICYmIChsYXN0RnJhbWUgPCBpbml0VGltZSAmJiBmcmFtZU51bSA8IGluaXRUaW1lIHx8IGxhc3RGcmFtZSA+IGVuZFRpbWUgJiYgZnJhbWVOdW0gPiBlbmRUaW1lKSkpIHtcbiAgICAgICAgLy8vIC9cbiAgICAgICAgdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggPSBsYXN0RnJhbWUgPCBmcmFtZU51bSA/IHRoaXMuX2NhY2hpbmcubGFzdEluZGV4IDogMDtcbiAgICAgICAgdGhpcy5pbnRlcnBvbGF0ZVNoYXBlKGZyYW1lTnVtLCB0aGlzLnB2LCB0aGlzLl9jYWNoaW5nKTsgLy8vIC9cbiAgICAgIH1cblxuICAgICAgdGhpcy5fY2FjaGluZy5sYXN0RnJhbWUgPSBmcmFtZU51bTtcbiAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2V0U2hhcGUoKSB7XG4gICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaGFwZXNFcXVhbChzaGFwZTEsIHNoYXBlMikge1xuICAgICAgaWYgKHNoYXBlMS5fbGVuZ3RoICE9PSBzaGFwZTIuX2xlbmd0aCB8fCBzaGFwZTEuYyAhPT0gc2hhcGUyLmMpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZTEuX2xlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZTEudltpXVswXSAhPT0gc2hhcGUyLnZbaV1bMF0gfHwgc2hhcGUxLnZbaV1bMV0gIT09IHNoYXBlMi52W2ldWzFdIHx8IHNoYXBlMS5vW2ldWzBdICE9PSBzaGFwZTIub1tpXVswXSB8fCBzaGFwZTEub1tpXVsxXSAhPT0gc2hhcGUyLm9baV1bMV0gfHwgc2hhcGUxLmlbaV1bMF0gIT09IHNoYXBlMi5pW2ldWzBdIHx8IHNoYXBlMS5pW2ldWzFdICE9PSBzaGFwZTIuaVtpXVsxXSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRWVmFsdWUobmV3UGF0aCkge1xuICAgICAgaWYgKCFzaGFwZXNFcXVhbCh0aGlzLnYsIG5ld1BhdGgpKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5jbG9uZShuZXdQYXRoKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTtcbiAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZSgpIHtcbiAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5sb2NrKSB7XG4gICAgICAgIHRoaXMuc2V0VlZhbHVlKHRoaXMucHYpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMubG9jayA9IHRydWU7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgIHZhciBmaW5hbFZhbHVlO1xuXG4gICAgICBpZiAodGhpcy5rZikge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5wdjtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLmtzKSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmRhdGEua3MuaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmRhdGEucHQuaztcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlW2ldKGZpbmFsVmFsdWUpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNldFZWYWx1ZShmaW5hbFZhbHVlKTtcbiAgICAgIHRoaXMubG9jayA9IGZhbHNlO1xuICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpIHtcbiAgICAgIHRoaXMucHJvcFR5cGUgPSAnc2hhcGUnO1xuICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBlbGVtO1xuICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgIHRoaXMua2YgPSBmYWxzZTtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdmFyIHBhdGhEYXRhID0gdHlwZSA9PT0gMyA/IGRhdGEucHQuayA6IGRhdGEua3MuaztcbiAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5jbG9uZShwYXRoRGF0YSk7XG4gICAgICB0aGlzLnB2ID0gc2hhcGVQb29sLmNsb25lKHRoaXMudik7XG4gICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTtcbiAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgdGhpcy5wYXRocy5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgdGhpcy5yZXNldCA9IHJlc2V0U2hhcGU7XG4gICAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEVmZmVjdChlZmZlY3RGdW5jdGlvbikge1xuICAgICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UucHVzaChlZmZlY3RGdW5jdGlvbik7XG4gICAgICB0aGlzLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gICAgfVxuXG4gICAgU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuaW50ZXJwb2xhdGVTaGFwZSA9IGludGVycG9sYXRlU2hhcGU7XG4gICAgU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIFNoYXBlUHJvcGVydHkucHJvdG90eXBlLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICBTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG5cbiAgICBmdW5jdGlvbiBLZXlmcmFtZWRTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpIHtcbiAgICAgIHRoaXMucHJvcFR5cGUgPSAnc2hhcGUnO1xuICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gZWxlbTtcbiAgICAgIHRoaXMub2Zmc2V0VGltZSA9IGVsZW0uZGF0YS5zdDtcbiAgICAgIHRoaXMua2V5ZnJhbWVzID0gdHlwZSA9PT0gMyA/IGRhdGEucHQuayA6IGRhdGEua3MuaztcbiAgICAgIHRoaXMua2V5ZnJhbWVzTWV0YWRhdGEgPSBbXTtcbiAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICB0aGlzLmtmID0gdHJ1ZTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmtleWZyYW1lc1swXS5zWzBdLmkubGVuZ3RoO1xuICAgICAgdGhpcy52ID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHRoaXMudi5zZXRQYXRoRGF0YSh0aGlzLmtleWZyYW1lc1swXS5zWzBdLmMsIGxlbik7XG4gICAgICB0aGlzLnB2ID0gc2hhcGVQb29sLmNsb25lKHRoaXMudik7XG4gICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVDb2xsZWN0aW9uUG9vbC5uZXdTaGFwZUNvbGxlY3Rpb24oKTtcbiAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgdGhpcy5wYXRocy5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgdGhpcy5sYXN0RnJhbWUgPSBpbml0RnJhbWU7XG4gICAgICB0aGlzLnJlc2V0ID0gcmVzZXRTaGFwZTtcbiAgICAgIHRoaXMuX2NhY2hpbmcgPSB7XG4gICAgICAgIGxhc3RGcmFtZTogaW5pdEZyYW1lLFxuICAgICAgICBsYXN0SW5kZXg6IDBcbiAgICAgIH07XG4gICAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZSA9IFtpbnRlcnBvbGF0ZVNoYXBlQ3VycmVudFRpbWUuYmluZCh0aGlzKV07XG4gICAgfVxuXG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHkucHJvdG90eXBlLmludGVycG9sYXRlU2hhcGUgPSBpbnRlcnBvbGF0ZVNoYXBlO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHkucHJvdG90eXBlLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3QgPSBhZGRFZmZlY3Q7XG5cbiAgICB2YXIgRWxsU2hhcGVQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjUG9pbnQgPSByb3VuZENvcm5lcjtcblxuICAgICAgZnVuY3Rpb24gRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnYuc2V0UGF0aERhdGEodHJ1ZSwgNCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgICB0aGlzLmQgPSBkYXRhLmQ7XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICAgICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAxLCAwLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmsgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuY29udmVydEVsbFRvUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIEVsbFNoYXBlUHJvcGVydHlGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgICAgcmVzZXQ6IHJlc2V0U2hhcGUsXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgICAgdGhpcy5jb252ZXJ0RWxsVG9QYXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0RWxsVG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0RWxsVG9QYXRoKCkge1xuICAgICAgICAgIHZhciBwMCA9IHRoaXMucC52WzBdO1xuICAgICAgICAgIHZhciBwMSA9IHRoaXMucC52WzFdO1xuICAgICAgICAgIHZhciBzMCA9IHRoaXMucy52WzBdIC8gMjtcbiAgICAgICAgICB2YXIgczEgPSB0aGlzLnMudlsxXSAvIDI7XG5cbiAgICAgICAgICB2YXIgX2N3ID0gdGhpcy5kICE9PSAzO1xuXG4gICAgICAgICAgdmFyIF92ID0gdGhpcy52O1xuICAgICAgICAgIF92LnZbMF1bMF0gPSBwMDtcbiAgICAgICAgICBfdi52WzBdWzFdID0gcDEgLSBzMTtcbiAgICAgICAgICBfdi52WzFdWzBdID0gX2N3ID8gcDAgKyBzMCA6IHAwIC0gczA7XG4gICAgICAgICAgX3YudlsxXVsxXSA9IHAxO1xuICAgICAgICAgIF92LnZbMl1bMF0gPSBwMDtcbiAgICAgICAgICBfdi52WzJdWzFdID0gcDEgKyBzMTtcbiAgICAgICAgICBfdi52WzNdWzBdID0gX2N3ID8gcDAgLSBzMCA6IHAwICsgczA7XG4gICAgICAgICAgX3YudlszXVsxXSA9IHAxO1xuICAgICAgICAgIF92LmlbMF1bMF0gPSBfY3cgPyBwMCAtIHMwICogY1BvaW50IDogcDAgKyBzMCAqIGNQb2ludDtcbiAgICAgICAgICBfdi5pWzBdWzFdID0gcDEgLSBzMTtcbiAgICAgICAgICBfdi5pWzFdWzBdID0gX2N3ID8gcDAgKyBzMCA6IHAwIC0gczA7XG4gICAgICAgICAgX3YuaVsxXVsxXSA9IHAxIC0gczEgKiBjUG9pbnQ7XG4gICAgICAgICAgX3YuaVsyXVswXSA9IF9jdyA/IHAwICsgczAgKiBjUG9pbnQgOiBwMCAtIHMwICogY1BvaW50O1xuICAgICAgICAgIF92LmlbMl1bMV0gPSBwMSArIHMxO1xuICAgICAgICAgIF92LmlbM11bMF0gPSBfY3cgPyBwMCAtIHMwIDogcDAgKyBzMDtcbiAgICAgICAgICBfdi5pWzNdWzFdID0gcDEgKyBzMSAqIGNQb2ludDtcbiAgICAgICAgICBfdi5vWzBdWzBdID0gX2N3ID8gcDAgKyBzMCAqIGNQb2ludCA6IHAwIC0gczAgKiBjUG9pbnQ7XG4gICAgICAgICAgX3Yub1swXVsxXSA9IHAxIC0gczE7XG4gICAgICAgICAgX3Yub1sxXVswXSA9IF9jdyA/IHAwICsgczAgOiBwMCAtIHMwO1xuICAgICAgICAgIF92Lm9bMV1bMV0gPSBwMSArIHMxICogY1BvaW50O1xuICAgICAgICAgIF92Lm9bMl1bMF0gPSBfY3cgPyBwMCAtIHMwICogY1BvaW50IDogcDAgKyBzMCAqIGNQb2ludDtcbiAgICAgICAgICBfdi5vWzJdWzFdID0gcDEgKyBzMTtcbiAgICAgICAgICBfdi5vWzNdWzBdID0gX2N3ID8gcDAgLSBzMCA6IHAwICsgczA7XG4gICAgICAgICAgX3Yub1szXVsxXSA9IHAxIC0gczEgKiBjUG9pbnQ7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIEVsbFNoYXBlUHJvcGVydHlGYWN0b3J5KTtcbiAgICAgIHJldHVybiBFbGxTaGFwZVByb3BlcnR5RmFjdG9yeTtcbiAgICB9KCk7XG5cbiAgICB2YXIgU3RhclNoYXBlUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnYuc2V0UGF0aERhdGEodHJ1ZSwgMCk7XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgICAgIHRoaXMuZCA9IGRhdGEuZDtcbiAgICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuXG4gICAgICAgIGlmIChkYXRhLnN5ID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5pciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaXIsIDAsIDAsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuaXMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmlzLCAwLCAwLjAxLCB0aGlzKTtcbiAgICAgICAgICB0aGlzLmNvbnZlcnRUb1BhdGggPSB0aGlzLmNvbnZlcnRTdGFyVG9QYXRoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuY29udmVydFRvUGF0aCA9IHRoaXMuY29udmVydFBvbHlnb25Ub1BhdGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnB0ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wdCwgMCwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucCwgMSwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMuciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5vciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEub3IsIDAsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLm9zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vcywgMCwgMC4wMSwgdGhpcyk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5rID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5LnByb3RvdHlwZSA9IHtcbiAgICAgICAgcmVzZXQ6IHJlc2V0U2hhcGUsXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0U3RhclRvUGF0aDogZnVuY3Rpb24gY29udmVydFN0YXJUb1BhdGgoKSB7XG4gICAgICAgICAgdmFyIG51bVB0cyA9IE1hdGguZmxvb3IodGhpcy5wdC52KSAqIDI7XG4gICAgICAgICAgdmFyIGFuZ2xlID0gTWF0aC5QSSAqIDIgLyBudW1QdHM7XG4gICAgICAgICAgLyogdGhpcy52LnYubGVuZ3RoID0gbnVtUHRzO1xyXG4gICAgICAgICAgICAgICAgICB0aGlzLnYuaS5sZW5ndGggPSBudW1QdHM7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudi5vLmxlbmd0aCA9IG51bVB0czsgKi9cblxuICAgICAgICAgIHZhciBsb25nRmxhZyA9IHRydWU7XG4gICAgICAgICAgdmFyIGxvbmdSYWQgPSB0aGlzLm9yLnY7XG4gICAgICAgICAgdmFyIHNob3J0UmFkID0gdGhpcy5pci52O1xuICAgICAgICAgIHZhciBsb25nUm91bmQgPSB0aGlzLm9zLnY7XG4gICAgICAgICAgdmFyIHNob3J0Um91bmQgPSB0aGlzLmlzLnY7XG4gICAgICAgICAgdmFyIGxvbmdQZXJpbVNlZ21lbnQgPSAyICogTWF0aC5QSSAqIGxvbmdSYWQgLyAobnVtUHRzICogMik7XG4gICAgICAgICAgdmFyIHNob3J0UGVyaW1TZWdtZW50ID0gMiAqIE1hdGguUEkgKiBzaG9ydFJhZCAvIChudW1QdHMgKiAyKTtcbiAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICB2YXIgcmFkO1xuICAgICAgICAgIHZhciByb3VuZG5lc3M7XG4gICAgICAgICAgdmFyIHBlcmltU2VnbWVudDtcbiAgICAgICAgICB2YXIgY3VycmVudEFuZyA9IC1NYXRoLlBJIC8gMjtcbiAgICAgICAgICBjdXJyZW50QW5nICs9IHRoaXMuci52O1xuICAgICAgICAgIHZhciBkaXIgPSB0aGlzLmRhdGEuZCA9PT0gMyA/IC0xIDogMTtcbiAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IDA7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUHRzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJhZCA9IGxvbmdGbGFnID8gbG9uZ1JhZCA6IHNob3J0UmFkO1xuICAgICAgICAgICAgcm91bmRuZXNzID0gbG9uZ0ZsYWcgPyBsb25nUm91bmQgOiBzaG9ydFJvdW5kO1xuICAgICAgICAgICAgcGVyaW1TZWdtZW50ID0gbG9uZ0ZsYWcgPyBsb25nUGVyaW1TZWdtZW50IDogc2hvcnRQZXJpbVNlZ21lbnQ7XG4gICAgICAgICAgICB2YXIgeCA9IHJhZCAqIE1hdGguY29zKGN1cnJlbnRBbmcpO1xuICAgICAgICAgICAgdmFyIHkgPSByYWQgKiBNYXRoLnNpbihjdXJyZW50QW5nKTtcbiAgICAgICAgICAgIHZhciBveCA9IHggPT09IDAgJiYgeSA9PT0gMCA/IDAgOiB5IC8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgdmFyIG95ID0geCA9PT0gMCAmJiB5ID09PSAwID8gMCA6IC14IC8gTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpO1xuICAgICAgICAgICAgeCArPSArdGhpcy5wLnZbMF07XG4gICAgICAgICAgICB5ICs9ICt0aGlzLnAudlsxXTtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdCh4LCB5LCB4IC0gb3ggKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHkgLSBveSAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeCArIG94ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB5ICsgb3kgKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIGksIHRydWUpO1xuICAgICAgICAgICAgLyogdGhpcy52LnZbaV0gPSBbeCx5XTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudi5pW2ldID0gW3grb3gqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXIseStveSpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnYub1tpXSA9IFt4LW94KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyLHktb3kqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy52Ll9sZW5ndGggPSBudW1QdHM7ICovXG5cbiAgICAgICAgICAgIGxvbmdGbGFnID0gIWxvbmdGbGFnO1xuICAgICAgICAgICAgY3VycmVudEFuZyArPSBhbmdsZSAqIGRpcjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRQb2x5Z29uVG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0UG9seWdvblRvUGF0aCgpIHtcbiAgICAgICAgICB2YXIgbnVtUHRzID0gTWF0aC5mbG9vcih0aGlzLnB0LnYpO1xuICAgICAgICAgIHZhciBhbmdsZSA9IE1hdGguUEkgKiAyIC8gbnVtUHRzO1xuICAgICAgICAgIHZhciByYWQgPSB0aGlzLm9yLnY7XG4gICAgICAgICAgdmFyIHJvdW5kbmVzcyA9IHRoaXMub3MudjtcbiAgICAgICAgICB2YXIgcGVyaW1TZWdtZW50ID0gMiAqIE1hdGguUEkgKiByYWQgLyAobnVtUHRzICogNCk7XG4gICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgdmFyIGN1cnJlbnRBbmcgPSAtTWF0aC5QSSAqIDAuNTtcbiAgICAgICAgICB2YXIgZGlyID0gdGhpcy5kYXRhLmQgPT09IDMgPyAtMSA6IDE7XG4gICAgICAgICAgY3VycmVudEFuZyArPSB0aGlzLnIudjtcbiAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IDA7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbnVtUHRzOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciB4ID0gcmFkICogTWF0aC5jb3MoY3VycmVudEFuZyk7XG4gICAgICAgICAgICB2YXIgeSA9IHJhZCAqIE1hdGguc2luKGN1cnJlbnRBbmcpO1xuICAgICAgICAgICAgdmFyIG94ID0geCA9PT0gMCAmJiB5ID09PSAwID8gMCA6IHkgLyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICB2YXIgb3kgPSB4ID09PSAwICYmIHkgPT09IDAgPyAwIDogLXggLyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICB4ICs9ICt0aGlzLnAudlswXTtcbiAgICAgICAgICAgIHkgKz0gK3RoaXMucC52WzFdO1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHgsIHksIHggLSBveCAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeSAtIG95ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB4ICsgb3ggKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHkgKyBveSAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgaSwgdHJ1ZSk7XG4gICAgICAgICAgICBjdXJyZW50QW5nICs9IGFuZ2xlICogZGlyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMucGF0aHMubGVuZ3RoID0gMDtcbiAgICAgICAgICB0aGlzLnBhdGhzWzBdID0gdGhpcy52O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkpO1xuICAgICAgcmV0dXJuIFN0YXJTaGFwZVByb3BlcnR5RmFjdG9yeTtcbiAgICB9KCk7XG5cbiAgICB2YXIgUmVjdFNoYXBlUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICB0aGlzLnYuYyA9IHRydWU7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgICAgICB0aGlzLmQgPSBkYXRhLmQ7XG4gICAgICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yLCAwLCAwLCB0aGlzKTtcblxuICAgICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmsgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgICAgIHRoaXMuY29udmVydFJlY3RUb1BhdGgoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgICBjb252ZXJ0UmVjdFRvUGF0aDogZnVuY3Rpb24gY29udmVydFJlY3RUb1BhdGgoKSB7XG4gICAgICAgICAgdmFyIHAwID0gdGhpcy5wLnZbMF07XG4gICAgICAgICAgdmFyIHAxID0gdGhpcy5wLnZbMV07XG4gICAgICAgICAgdmFyIHYwID0gdGhpcy5zLnZbMF0gLyAyO1xuICAgICAgICAgIHZhciB2MSA9IHRoaXMucy52WzFdIC8gMjtcbiAgICAgICAgICB2YXIgcm91bmQgPSBibU1pbih2MCwgdjEsIHRoaXMuci52KTtcbiAgICAgICAgICB2YXIgY1BvaW50ID0gcm91bmQgKiAoMSAtIHJvdW5kQ29ybmVyKTtcbiAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IDA7XG5cbiAgICAgICAgICBpZiAodGhpcy5kID09PSAyIHx8IHRoaXMuZCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgKyB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCArIHYwLCBwMSAtIHYxICsgY1BvaW50LCAwLCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwICsgdjAsIHAxICsgdjEgLSBjUG9pbnQsIHAwICsgdjAsIHAxICsgdjEgLSByb3VuZCwgMSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChyb3VuZCAhPT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSArIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxICsgdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxICsgdjEsIDIsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSArIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSArIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxICsgdjEsIDMsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCAtIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwIC0gdjAsIHAxICsgdjEgLSBjUG9pbnQsIDQsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCAtIHYwLCBwMSAtIHYxICsgY1BvaW50LCBwMCAtIHYwLCBwMSAtIHYxICsgcm91bmQsIDUsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSAtIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxIC0gdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxIC0gdjEsIDYsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSAtIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSAtIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxIC0gdjEsIDcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxICsgdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxICsgdjEsIHAwIC0gdjAsIHAxICsgdjEsIDIpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSwgcDAgLSB2MCwgcDEgLSB2MSArIGNQb2ludCwgcDAgLSB2MCwgcDEgLSB2MSwgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwICsgdjAsIHAxIC0gdjEgKyBjUG9pbnQsIHAwICsgdjAsIHAxIC0gdjEgKyByb3VuZCwgMCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChyb3VuZCAhPT0gMCkge1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSAtIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxIC0gdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxIC0gdjEsIDEsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSAtIHYxLCBwMCAtIHYwICsgY1BvaW50LCBwMSAtIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxIC0gdjEsIDIsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCAtIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwIC0gdjAsIHAxIC0gdjEgKyBjUG9pbnQsIDMsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCAtIHYwLCBwMSArIHYxIC0gY1BvaW50LCBwMCAtIHYwLCBwMSArIHYxIC0gcm91bmQsIDQsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCArIHJvdW5kLCBwMSArIHYxLCBwMCAtIHYwICsgcm91bmQsIHAxICsgdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxICsgdjEsIDUsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCAtIHJvdW5kLCBwMSArIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSArIHYxLCBwMCArIHYwIC0gcm91bmQsIHAxICsgdjEsIDYsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCwgcDEgKyB2MSAtIHJvdW5kLCBwMCArIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwICsgdjAsIHAxICsgdjEgLSBjUG9pbnQsIDcsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwIC0gdjAsIHAxIC0gdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxIC0gdjEsIHAwIC0gdjAsIHAxIC0gdjEsIDEsIHRydWUpO1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSwgcDAgLSB2MCwgcDEgKyB2MSAtIGNQb2ludCwgcDAgLSB2MCwgcDEgKyB2MSwgMiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSArIHYxLCBwMCArIHYwIC0gY1BvaW50LCBwMSArIHYxLCBwMCArIHYwLCBwMSArIHYxLCAzLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGdldFZhbHVlOiBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgICAgdGhpcy5jb252ZXJ0UmVjdFRvUGF0aCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcmVzZXQ6IHJlc2V0U2hhcGVcbiAgICAgIH07XG4gICAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFJlY3RTaGFwZVByb3BlcnR5RmFjdG9yeSk7XG4gICAgICByZXR1cm4gUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5O1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGdldFNoYXBlUHJvcChlbGVtLCBkYXRhLCB0eXBlKSB7XG4gICAgICB2YXIgcHJvcDtcblxuICAgICAgaWYgKHR5cGUgPT09IDMgfHwgdHlwZSA9PT0gNCkge1xuICAgICAgICB2YXIgZGF0YVByb3AgPSB0eXBlID09PSAzID8gZGF0YS5wdCA6IGRhdGEua3M7XG4gICAgICAgIHZhciBrZXlzID0gZGF0YVByb3AuaztcblxuICAgICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICBwcm9wID0gbmV3IEtleWZyYW1lZFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvcCA9IG5ldyBTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEsIHR5cGUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDUpIHtcbiAgICAgICAgcHJvcCA9IG5ldyBSZWN0U2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNikge1xuICAgICAgICBwcm9wID0gbmV3IEVsbFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDcpIHtcbiAgICAgICAgcHJvcCA9IG5ldyBTdGFyU2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3Auaykge1xuICAgICAgICBlbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JGdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBTaGFwZVByb3BlcnR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eTtcbiAgICB9XG5cbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5nZXRTaGFwZVByb3AgPSBnZXRTaGFwZVByb3A7XG4gICAgb2IuZ2V0Q29uc3RydWN0b3JGdW5jdGlvbiA9IGdldENvbnN0cnVjdG9yRnVuY3Rpb247XG4gICAgb2IuZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbiA9IGdldEtleWZyYW1lZENvbnN0cnVjdG9yRnVuY3Rpb247XG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgLyohXHJcbiAgIFRyYW5zZm9ybWF0aW9uIE1hdHJpeCB2Mi4wXHJcbiAgIChjKSBFcGlzdGVtZXggMjAxNC0yMDE1XHJcbiAgIHd3dy5lcGlzdGVtZXguY29tXHJcbiAgIEJ5IEtlbiBGeXJzdGVuYmVyZ1xyXG4gICBDb250cmlidXRpb25zIGJ5IGxlZW9uaXlhLlxyXG4gICBMaWNlbnNlOiBNSVQsIGhlYWRlciByZXF1aXJlZC5cclxuICAgKi9cblxuICAvKipcclxuICAgKiAyRCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggb2JqZWN0IGluaXRpYWxpemVkIHdpdGggaWRlbnRpdHkgbWF0cml4LlxyXG4gICAqXHJcbiAgICogVGhlIG1hdHJpeCBjYW4gc3luY2hyb25pemUgYSBjYW52YXMgY29udGV4dCBieSBzdXBwbHlpbmcgdGhlIGNvbnRleHRcclxuICAgKiBhcyBhbiBhcmd1bWVudCwgb3IgbGF0ZXIgYXBwbHkgY3VycmVudCBhYnNvbHV0ZSB0cmFuc2Zvcm0gdG8gYW5cclxuICAgKiBleGlzdGluZyBjb250ZXh0LlxyXG4gICAqXHJcbiAgICogQWxsIHZhbHVlcyBhcmUgaGFuZGxlZCBhcyBmbG9hdGluZyBwb2ludCB2YWx1ZXMuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0NhbnZhc1JlbmRlcmluZ0NvbnRleHQyRH0gW2NvbnRleHRdIC0gT3B0aW9uYWwgY29udGV4dCB0byBzeW5jIHdpdGggTWF0cml4XHJcbiAgICogQHByb3Age251bWJlcn0gYSAtIHNjYWxlIHhcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBiIC0gc2hlYXIgeVxyXG4gICAqIEBwcm9wIHtudW1iZXJ9IGMgLSBzaGVhciB4XHJcbiAgICogQHByb3Age251bWJlcn0gZCAtIHNjYWxlIHlcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBlIC0gdHJhbnNsYXRlIHhcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBmIC0gdHJhbnNsYXRlIHlcclxuICAgKiBAcHJvcCB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfG51bGx9IFtjb250ZXh0PW51bGxdIC0gc2V0IG9yIGdldCBjdXJyZW50IGNhbnZhcyBjb250ZXh0XHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICovXG5cbiAgdmFyIE1hdHJpeCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX2NvcyA9IE1hdGguY29zO1xuICAgIHZhciBfc2luID0gTWF0aC5zaW47XG4gICAgdmFyIF90YW4gPSBNYXRoLnRhbjtcbiAgICB2YXIgX3JuZCA9IE1hdGgucm91bmQ7XG5cbiAgICBmdW5jdGlvbiByZXNldCgpIHtcbiAgICAgIHRoaXMucHJvcHNbMF0gPSAxO1xuICAgICAgdGhpcy5wcm9wc1sxXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzJdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbM10gPSAwO1xuICAgICAgdGhpcy5wcm9wc1s0XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzVdID0gMTtcbiAgICAgIHRoaXMucHJvcHNbNl0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1s3XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzhdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbOV0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxMF0gPSAxO1xuICAgICAgdGhpcy5wcm9wc1sxMV0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxMl0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxM10gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxNF0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1sxNV0gPSAxO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcm90YXRlKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVYKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDAsIDAsIG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVZKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KG1Db3MsIDAsIG1TaW4sIDAsIDAsIDEsIDAsIDAsIC1tU2luLCAwLCBtQ29zLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGVaKGFuZ2xlKSB7XG4gICAgICBpZiAoYW5nbGUgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBtQ29zID0gX2NvcyhhbmdsZSk7XG5cbiAgICAgIHZhciBtU2luID0gX3NpbihhbmdsZSk7XG5cbiAgICAgIHJldHVybiB0aGlzLl90KG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaGVhcihzeCwgc3kpIHtcbiAgICAgIHJldHVybiB0aGlzLl90KDEsIHN5LCBzeCwgMSwgMCwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2tldyhheCwgYXkpIHtcbiAgICAgIHJldHVybiB0aGlzLnNoZWFyKF90YW4oYXgpLCBfdGFuKGF5KSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2tld0Zyb21BeGlzKGF4LCBhbmdsZSkge1xuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgbVNpbiwgMCwgMCwgLW1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpLl90KDEsIDAsIDAsIDAsIF90YW4oYXgpLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKS5fdChtQ29zLCAtbVNpbiwgMCwgMCwgbVNpbiwgbUNvcywgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSk7IC8vIHJldHVybiB0aGlzLl90KG1Db3MsIG1TaW4sIC1tU2luLCBtQ29zLCAwLCAwKS5fdCgxLCAwLCBfdGFuKGF4KSwgMSwgMCwgMCkuX3QobUNvcywgLW1TaW4sIG1TaW4sIG1Db3MsIDAsIDApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNjYWxlKHN4LCBzeSwgc3opIHtcbiAgICAgIGlmICghc3ogJiYgc3ogIT09IDApIHtcbiAgICAgICAgc3ogPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3ggPT09IDEgJiYgc3kgPT09IDEgJiYgc3ogPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl90KHN4LCAwLCAwLCAwLCAwLCBzeSwgMCwgMCwgMCwgMCwgc3osIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zZm9ybShhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBpLCBqLCBrLCBsLCBtLCBuLCBvLCBwKSB7XG4gICAgICB0aGlzLnByb3BzWzBdID0gYTtcbiAgICAgIHRoaXMucHJvcHNbMV0gPSBiO1xuICAgICAgdGhpcy5wcm9wc1syXSA9IGM7XG4gICAgICB0aGlzLnByb3BzWzNdID0gZDtcbiAgICAgIHRoaXMucHJvcHNbNF0gPSBlO1xuICAgICAgdGhpcy5wcm9wc1s1XSA9IGY7XG4gICAgICB0aGlzLnByb3BzWzZdID0gZztcbiAgICAgIHRoaXMucHJvcHNbN10gPSBoO1xuICAgICAgdGhpcy5wcm9wc1s4XSA9IGk7XG4gICAgICB0aGlzLnByb3BzWzldID0gajtcbiAgICAgIHRoaXMucHJvcHNbMTBdID0gaztcbiAgICAgIHRoaXMucHJvcHNbMTFdID0gbDtcbiAgICAgIHRoaXMucHJvcHNbMTJdID0gbTtcbiAgICAgIHRoaXMucHJvcHNbMTNdID0gbjtcbiAgICAgIHRoaXMucHJvcHNbMTRdID0gbztcbiAgICAgIHRoaXMucHJvcHNbMTVdID0gcDtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZSh0eCwgdHksIHR6KSB7XG4gICAgICB0eiA9IHR6IHx8IDA7XG5cbiAgICAgIGlmICh0eCAhPT0gMCB8fCB0eSAhPT0gMCB8fCB0eiAhPT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdCgxLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxLCAwLCB0eCwgdHksIHR6LCAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKGEyLCBiMiwgYzIsIGQyLCBlMiwgZjIsIGcyLCBoMiwgaTIsIGoyLCBrMiwgbDIsIG0yLCBuMiwgbzIsIHAyKSB7XG4gICAgICB2YXIgX3AgPSB0aGlzLnByb3BzO1xuXG4gICAgICBpZiAoYTIgPT09IDEgJiYgYjIgPT09IDAgJiYgYzIgPT09IDAgJiYgZDIgPT09IDAgJiYgZTIgPT09IDAgJiYgZjIgPT09IDEgJiYgZzIgPT09IDAgJiYgaDIgPT09IDAgJiYgaTIgPT09IDAgJiYgajIgPT09IDAgJiYgazIgPT09IDEgJiYgbDIgPT09IDApIHtcbiAgICAgICAgLy8gTk9URTogY29tbWVudGluZyB0aGlzIGNvbmRpdGlvbiBiZWNhdXNlIFR1cmJvRmFuIGRlb3B0aW1pemVzIGNvZGUgd2hlbiBwcmVzZW50XG4gICAgICAgIC8vIGlmKG0yICE9PSAwIHx8IG4yICE9PSAwIHx8IG8yICE9PSAwKXtcbiAgICAgICAgX3BbMTJdID0gX3BbMTJdICogYTIgKyBfcFsxNV0gKiBtMjtcbiAgICAgICAgX3BbMTNdID0gX3BbMTNdICogZjIgKyBfcFsxNV0gKiBuMjtcbiAgICAgICAgX3BbMTRdID0gX3BbMTRdICogazIgKyBfcFsxNV0gKiBvMjtcbiAgICAgICAgX3BbMTVdICo9IHAyOyAvLyB9XG5cbiAgICAgICAgdGhpcy5faWRlbnRpdHlDYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICB2YXIgYTEgPSBfcFswXTtcbiAgICAgIHZhciBiMSA9IF9wWzFdO1xuICAgICAgdmFyIGMxID0gX3BbMl07XG4gICAgICB2YXIgZDEgPSBfcFszXTtcbiAgICAgIHZhciBlMSA9IF9wWzRdO1xuICAgICAgdmFyIGYxID0gX3BbNV07XG4gICAgICB2YXIgZzEgPSBfcFs2XTtcbiAgICAgIHZhciBoMSA9IF9wWzddO1xuICAgICAgdmFyIGkxID0gX3BbOF07XG4gICAgICB2YXIgajEgPSBfcFs5XTtcbiAgICAgIHZhciBrMSA9IF9wWzEwXTtcbiAgICAgIHZhciBsMSA9IF9wWzExXTtcbiAgICAgIHZhciBtMSA9IF9wWzEyXTtcbiAgICAgIHZhciBuMSA9IF9wWzEzXTtcbiAgICAgIHZhciBvMSA9IF9wWzE0XTtcbiAgICAgIHZhciBwMSA9IF9wWzE1XTtcbiAgICAgIC8qIG1hdHJpeCBvcmRlciAoY2FudmFzIGNvbXBhdGlibGUpOlxyXG4gICAgICAgICAgICogYWNlXHJcbiAgICAgICAgICAgKiBiZGZcclxuICAgICAgICAgICAqIDAwMVxyXG4gICAgICAgICAgICovXG5cbiAgICAgIF9wWzBdID0gYTEgKiBhMiArIGIxICogZTIgKyBjMSAqIGkyICsgZDEgKiBtMjtcbiAgICAgIF9wWzFdID0gYTEgKiBiMiArIGIxICogZjIgKyBjMSAqIGoyICsgZDEgKiBuMjtcbiAgICAgIF9wWzJdID0gYTEgKiBjMiArIGIxICogZzIgKyBjMSAqIGsyICsgZDEgKiBvMjtcbiAgICAgIF9wWzNdID0gYTEgKiBkMiArIGIxICogaDIgKyBjMSAqIGwyICsgZDEgKiBwMjtcbiAgICAgIF9wWzRdID0gZTEgKiBhMiArIGYxICogZTIgKyBnMSAqIGkyICsgaDEgKiBtMjtcbiAgICAgIF9wWzVdID0gZTEgKiBiMiArIGYxICogZjIgKyBnMSAqIGoyICsgaDEgKiBuMjtcbiAgICAgIF9wWzZdID0gZTEgKiBjMiArIGYxICogZzIgKyBnMSAqIGsyICsgaDEgKiBvMjtcbiAgICAgIF9wWzddID0gZTEgKiBkMiArIGYxICogaDIgKyBnMSAqIGwyICsgaDEgKiBwMjtcbiAgICAgIF9wWzhdID0gaTEgKiBhMiArIGoxICogZTIgKyBrMSAqIGkyICsgbDEgKiBtMjtcbiAgICAgIF9wWzldID0gaTEgKiBiMiArIGoxICogZjIgKyBrMSAqIGoyICsgbDEgKiBuMjtcbiAgICAgIF9wWzEwXSA9IGkxICogYzIgKyBqMSAqIGcyICsgazEgKiBrMiArIGwxICogbzI7XG4gICAgICBfcFsxMV0gPSBpMSAqIGQyICsgajEgKiBoMiArIGsxICogbDIgKyBsMSAqIHAyO1xuICAgICAgX3BbMTJdID0gbTEgKiBhMiArIG4xICogZTIgKyBvMSAqIGkyICsgcDEgKiBtMjtcbiAgICAgIF9wWzEzXSA9IG0xICogYjIgKyBuMSAqIGYyICsgbzEgKiBqMiArIHAxICogbjI7XG4gICAgICBfcFsxNF0gPSBtMSAqIGMyICsgbjEgKiBnMiArIG8xICogazIgKyBwMSAqIG8yO1xuICAgICAgX3BbMTVdID0gbTEgKiBkMiArIG4xICogaDIgKyBvMSAqIGwyICsgcDEgKiBwMjtcbiAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbXVsdGlwbHkobWF0cml4KSB7XG4gICAgICB2YXIgbWF0cml4UHJvcHMgPSBtYXRyaXgucHJvcHM7XG4gICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0obWF0cml4UHJvcHNbMF0sIG1hdHJpeFByb3BzWzFdLCBtYXRyaXhQcm9wc1syXSwgbWF0cml4UHJvcHNbM10sIG1hdHJpeFByb3BzWzRdLCBtYXRyaXhQcm9wc1s1XSwgbWF0cml4UHJvcHNbNl0sIG1hdHJpeFByb3BzWzddLCBtYXRyaXhQcm9wc1s4XSwgbWF0cml4UHJvcHNbOV0sIG1hdHJpeFByb3BzWzEwXSwgbWF0cml4UHJvcHNbMTFdLCBtYXRyaXhQcm9wc1sxMl0sIG1hdHJpeFByb3BzWzEzXSwgbWF0cml4UHJvcHNbMTRdLCBtYXRyaXhQcm9wc1sxNV0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzSWRlbnRpdHkoKSB7XG4gICAgICBpZiAoIXRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCkge1xuICAgICAgICB0aGlzLl9pZGVudGl0eSA9ICEodGhpcy5wcm9wc1swXSAhPT0gMSB8fCB0aGlzLnByb3BzWzFdICE9PSAwIHx8IHRoaXMucHJvcHNbMl0gIT09IDAgfHwgdGhpcy5wcm9wc1szXSAhPT0gMCB8fCB0aGlzLnByb3BzWzRdICE9PSAwIHx8IHRoaXMucHJvcHNbNV0gIT09IDEgfHwgdGhpcy5wcm9wc1s2XSAhPT0gMCB8fCB0aGlzLnByb3BzWzddICE9PSAwIHx8IHRoaXMucHJvcHNbOF0gIT09IDAgfHwgdGhpcy5wcm9wc1s5XSAhPT0gMCB8fCB0aGlzLnByb3BzWzEwXSAhPT0gMSB8fCB0aGlzLnByb3BzWzExXSAhPT0gMCB8fCB0aGlzLnByb3BzWzEyXSAhPT0gMCB8fCB0aGlzLnByb3BzWzEzXSAhPT0gMCB8fCB0aGlzLnByb3BzWzE0XSAhPT0gMCB8fCB0aGlzLnByb3BzWzE1XSAhPT0gMSk7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9pZGVudGl0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlcXVhbHMobWF0cikge1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IDE2KSB7XG4gICAgICAgIGlmIChtYXRyLnByb3BzW2ldICE9PSB0aGlzLnByb3BzW2ldKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZShtYXRyKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgICAgbWF0ci5wcm9wc1tpXSA9IHRoaXMucHJvcHNbaV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lRnJvbVByb3BzKHByb3BzKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IDE2OyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5wcm9wc1tpXSA9IHByb3BzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9Qb2ludCh4LCB5LCB6KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB4OiB4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXSxcbiAgICAgICAgeTogeCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM10sXG4gICAgICAgIHo6IHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XVxuICAgICAgfTtcbiAgICAgIC8qIHJldHVybiB7XHJcbiAgICAgICAgICAgeDogeCAqIG1lLmEgKyB5ICogbWUuYyArIG1lLmUsXHJcbiAgICAgICAgICAgeTogeCAqIG1lLmIgKyB5ICogbWUuZCArIG1lLmZcclxuICAgICAgICAgICB9OyAqL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9YKHgsIHksIHopIHtcbiAgICAgIHJldHVybiB4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvWSh4LCB5LCB6KSB7XG4gICAgICByZXR1cm4geCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1ooeCwgeSwgeikge1xuICAgICAgcmV0dXJuIHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJbnZlcnNlTWF0cml4KCkge1xuICAgICAgdmFyIGRldGVybWluYW50ID0gdGhpcy5wcm9wc1swXSAqIHRoaXMucHJvcHNbNV0gLSB0aGlzLnByb3BzWzFdICogdGhpcy5wcm9wc1s0XTtcbiAgICAgIHZhciBhID0gdGhpcy5wcm9wc1s1XSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGIgPSAtdGhpcy5wcm9wc1sxXSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGMgPSAtdGhpcy5wcm9wc1s0XSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGQgPSB0aGlzLnByb3BzWzBdIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZSA9ICh0aGlzLnByb3BzWzRdICogdGhpcy5wcm9wc1sxM10gLSB0aGlzLnByb3BzWzVdICogdGhpcy5wcm9wc1sxMl0pIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZiA9IC0odGhpcy5wcm9wc1swXSAqIHRoaXMucHJvcHNbMTNdIC0gdGhpcy5wcm9wc1sxXSAqIHRoaXMucHJvcHNbMTJdKSAvIGRldGVybWluYW50O1xuICAgICAgdmFyIGludmVyc2VNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzBdID0gYTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMV0gPSBiO1xuICAgICAgaW52ZXJzZU1hdHJpeC5wcm9wc1s0XSA9IGM7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzVdID0gZDtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMTJdID0gZTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMTNdID0gZjtcbiAgICAgIHJldHVybiBpbnZlcnNlTWF0cml4O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmVyc2VQb2ludChwdCkge1xuICAgICAgdmFyIGludmVyc2VNYXRyaXggPSB0aGlzLmdldEludmVyc2VNYXRyaXgoKTtcbiAgICAgIHJldHVybiBpbnZlcnNlTWF0cml4LmFwcGx5VG9Qb2ludEFycmF5KHB0WzBdLCBwdFsxXSwgcHRbMl0gfHwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJzZVBvaW50cyhwdHMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHB0cy5sZW5ndGg7XG4gICAgICB2YXIgcmV0UHRzID0gW107XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZXRQdHNbaV0gPSBpbnZlcnNlUG9pbnQocHRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJldFB0cztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvVHJpcGxlUG9pbnRzKHB0MSwgcHQyLCBwdDMpIHtcbiAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgNik7XG5cbiAgICAgIGlmICh0aGlzLmlzSWRlbnRpdHkoKSkge1xuICAgICAgICBhcnJbMF0gPSBwdDFbMF07XG4gICAgICAgIGFyclsxXSA9IHB0MVsxXTtcbiAgICAgICAgYXJyWzJdID0gcHQyWzBdO1xuICAgICAgICBhcnJbM10gPSBwdDJbMV07XG4gICAgICAgIGFycls0XSA9IHB0M1swXTtcbiAgICAgICAgYXJyWzVdID0gcHQzWzFdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHAwID0gdGhpcy5wcm9wc1swXTtcbiAgICAgICAgdmFyIHAxID0gdGhpcy5wcm9wc1sxXTtcbiAgICAgICAgdmFyIHA0ID0gdGhpcy5wcm9wc1s0XTtcbiAgICAgICAgdmFyIHA1ID0gdGhpcy5wcm9wc1s1XTtcbiAgICAgICAgdmFyIHAxMiA9IHRoaXMucHJvcHNbMTJdO1xuICAgICAgICB2YXIgcDEzID0gdGhpcy5wcm9wc1sxM107XG4gICAgICAgIGFyclswXSA9IHB0MVswXSAqIHAwICsgcHQxWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFyclsxXSA9IHB0MVswXSAqIHAxICsgcHQxWzFdICogcDUgKyBwMTM7XG4gICAgICAgIGFyclsyXSA9IHB0MlswXSAqIHAwICsgcHQyWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFyclszXSA9IHB0MlswXSAqIHAxICsgcHQyWzFdICogcDUgKyBwMTM7XG4gICAgICAgIGFycls0XSA9IHB0M1swXSAqIHAwICsgcHQzWzFdICogcDQgKyBwMTI7XG4gICAgICAgIGFycls1XSA9IHB0M1swXSAqIHAxICsgcHQzWzFdICogcDUgKyBwMTM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50QXJyYXkoeCwgeSwgeikge1xuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIGFyciA9IFt4LCB5LCB6XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFyciA9IFt4ICogdGhpcy5wcm9wc1swXSArIHkgKiB0aGlzLnByb3BzWzRdICsgeiAqIHRoaXMucHJvcHNbOF0gKyB0aGlzLnByb3BzWzEyXSwgeCAqIHRoaXMucHJvcHNbMV0gKyB5ICogdGhpcy5wcm9wc1s1XSArIHogKiB0aGlzLnByb3BzWzldICsgdGhpcy5wcm9wc1sxM10sIHggKiB0aGlzLnByb3BzWzJdICsgeSAqIHRoaXMucHJvcHNbNl0gKyB6ICogdGhpcy5wcm9wc1sxMF0gKyB0aGlzLnByb3BzWzE0XV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoeCwgeSkge1xuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIHJldHVybiB4ICsgJywnICsgeTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wID0gdGhpcy5wcm9wcztcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKCh4ICogX3BbMF0gKyB5ICogX3BbNF0gKyBfcFsxMl0pICogMTAwKSAvIDEwMCArICcsJyArIE1hdGgucm91bmQoKHggKiBfcFsxXSArIHkgKiBfcFs1XSArIF9wWzEzXSkgKiAxMDApIC8gMTAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvQ1NTKCkge1xuICAgICAgLy8gRG9lc24ndCBtYWtlIG11Y2ggc2Vuc2UgdG8gYWRkIHRoaXMgb3B0aW1pemF0aW9uLiBJZiBpdCBpcyBhbiBpZGVudGl0eSBtYXRyaXgsIGl0J3MgdmVyeSBsaWtlbHkgdGhpcyB3aWxsIGdldCBjYWxsZWQgb25seSBvbmNlIHNpbmNlIGl0IHdvbid0IGJlIGtleWZyYW1lZC5cblxuICAgICAgLyogaWYodGhpcy5pc0lkZW50aXR5KCkpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICB9ICovXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgcHJvcHMgPSB0aGlzLnByb3BzO1xuICAgICAgdmFyIGNzc1ZhbHVlID0gJ21hdHJpeDNkKCc7XG4gICAgICB2YXIgdiA9IDEwMDAwO1xuXG4gICAgICB3aGlsZSAoaSA8IDE2KSB7XG4gICAgICAgIGNzc1ZhbHVlICs9IF9ybmQocHJvcHNbaV0gKiB2KSAvIHY7XG4gICAgICAgIGNzc1ZhbHVlICs9IGkgPT09IDE1ID8gJyknIDogJywnO1xuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjc3NWYWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3VuZE1hdHJpeFByb3BlcnR5KHZhbCkge1xuICAgICAgdmFyIHYgPSAxMDAwMDtcblxuICAgICAgaWYgKHZhbCA8IDAuMDAwMDAxICYmIHZhbCA+IDAgfHwgdmFsID4gLTAuMDAwMDAxICYmIHZhbCA8IDApIHtcbiAgICAgICAgcmV0dXJuIF9ybmQodmFsICogdikgLyB2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvMmRDU1MoKSB7XG4gICAgICAvLyBEb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBhZGQgdGhpcyBvcHRpbWl6YXRpb24uIElmIGl0IGlzIGFuIGlkZW50aXR5IG1hdHJpeCwgaXQncyB2ZXJ5IGxpa2VseSB0aGlzIHdpbGwgZ2V0IGNhbGxlZCBvbmx5IG9uY2Ugc2luY2UgaXQgd29uJ3QgYmUga2V5ZnJhbWVkLlxuXG4gICAgICAvKiBpZih0aGlzLmlzSWRlbnRpdHkoKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgIH0gKi9cbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG5cbiAgICAgIHZhciBfYSA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbMF0pO1xuXG4gICAgICB2YXIgX2IgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzFdKTtcblxuICAgICAgdmFyIF9jID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1s0XSk7XG5cbiAgICAgIHZhciBfZCA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbNV0pO1xuXG4gICAgICB2YXIgX2UgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzEyXSk7XG5cbiAgICAgIHZhciBfZiA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbMTNdKTtcblxuICAgICAgcmV0dXJuICdtYXRyaXgoJyArIF9hICsgJywnICsgX2IgKyAnLCcgKyBfYyArICcsJyArIF9kICsgJywnICsgX2UgKyAnLCcgKyBfZiArICcpJztcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5yZXNldCA9IHJlc2V0O1xuICAgICAgdGhpcy5yb3RhdGUgPSByb3RhdGU7XG4gICAgICB0aGlzLnJvdGF0ZVggPSByb3RhdGVYO1xuICAgICAgdGhpcy5yb3RhdGVZID0gcm90YXRlWTtcbiAgICAgIHRoaXMucm90YXRlWiA9IHJvdGF0ZVo7XG4gICAgICB0aGlzLnNrZXcgPSBza2V3O1xuICAgICAgdGhpcy5za2V3RnJvbUF4aXMgPSBza2V3RnJvbUF4aXM7XG4gICAgICB0aGlzLnNoZWFyID0gc2hlYXI7XG4gICAgICB0aGlzLnNjYWxlID0gc2NhbGU7XG4gICAgICB0aGlzLnNldFRyYW5zZm9ybSA9IHNldFRyYW5zZm9ybTtcbiAgICAgIHRoaXMudHJhbnNsYXRlID0gdHJhbnNsYXRlO1xuICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICB0aGlzLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgICB0aGlzLmFwcGx5VG9Qb2ludCA9IGFwcGx5VG9Qb2ludDtcbiAgICAgIHRoaXMuYXBwbHlUb1ggPSBhcHBseVRvWDtcbiAgICAgIHRoaXMuYXBwbHlUb1kgPSBhcHBseVRvWTtcbiAgICAgIHRoaXMuYXBwbHlUb1ogPSBhcHBseVRvWjtcbiAgICAgIHRoaXMuYXBwbHlUb1BvaW50QXJyYXkgPSBhcHBseVRvUG9pbnRBcnJheTtcbiAgICAgIHRoaXMuYXBwbHlUb1RyaXBsZVBvaW50cyA9IGFwcGx5VG9UcmlwbGVQb2ludHM7XG4gICAgICB0aGlzLmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkID0gYXBwbHlUb1BvaW50U3RyaW5naWZpZWQ7XG4gICAgICB0aGlzLnRvQ1NTID0gdG9DU1M7XG4gICAgICB0aGlzLnRvMmRDU1MgPSB0bzJkQ1NTO1xuICAgICAgdGhpcy5jbG9uZSA9IGNsb25lO1xuICAgICAgdGhpcy5jbG9uZUZyb21Qcm9wcyA9IGNsb25lRnJvbVByb3BzO1xuICAgICAgdGhpcy5lcXVhbHMgPSBlcXVhbHM7XG4gICAgICB0aGlzLmludmVyc2VQb2ludHMgPSBpbnZlcnNlUG9pbnRzO1xuICAgICAgdGhpcy5pbnZlcnNlUG9pbnQgPSBpbnZlcnNlUG9pbnQ7XG4gICAgICB0aGlzLmdldEludmVyc2VNYXRyaXggPSBnZXRJbnZlcnNlTWF0cml4O1xuICAgICAgdGhpcy5fdCA9IHRoaXMudHJhbnNmb3JtO1xuICAgICAgdGhpcy5pc0lkZW50aXR5ID0gaXNJZGVudGl0eTtcbiAgICAgIHRoaXMuX2lkZW50aXR5ID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2lkZW50aXR5Q2FsY3VsYXRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5wcm9wcyA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCAxNik7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIF90eXBlb2YkMyhvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQzID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMyA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDMob2JqKTsgfVxuICB2YXIgbG90dGllID0ge307XG4gIHZhciBzdGFuZGFsb25lID0gJ19fW1NUQU5EQUxPTkVdX18nO1xuICB2YXIgYW5pbWF0aW9uRGF0YSA9ICdfX1tBTklNQVRJT05EQVRBXV9fJztcbiAgdmFyIHJlbmRlcmVyID0gJyc7XG5cbiAgZnVuY3Rpb24gc2V0TG9jYXRpb24oaHJlZikge1xuICAgIHNldExvY2F0aW9uSHJlZihocmVmKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNlYXJjaEFuaW1hdGlvbnMoKSB7XG4gICAgaWYgKHN0YW5kYWxvbmUgPT09IHRydWUpIHtcbiAgICAgIGFuaW1hdGlvbk1hbmFnZXIuc2VhcmNoQW5pbWF0aW9ucyhhbmltYXRpb25EYXRhLCBzdGFuZGFsb25lLCByZW5kZXJlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFuaW1hdGlvbk1hbmFnZXIuc2VhcmNoQW5pbWF0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN1YmZyYW1lUmVuZGVyaW5nKGZsYWcpIHtcbiAgICBzZXRTdWJmcmFtZUVuYWJsZWQoZmxhZyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRQcmVmaXgocHJlZml4KSB7XG4gICAgc2V0SWRQcmVmaXgocHJlZml4KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvYWRBbmltYXRpb24ocGFyYW1zKSB7XG4gICAgaWYgKHN0YW5kYWxvbmUgPT09IHRydWUpIHtcbiAgICAgIHBhcmFtcy5hbmltYXRpb25EYXRhID0gSlNPTi5wYXJzZShhbmltYXRpb25EYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5pbWF0aW9uTWFuYWdlci5sb2FkQW5pbWF0aW9uKHBhcmFtcyk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRRdWFsaXR5KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgY2FzZSAnaGlnaCc6XG4gICAgICAgICAgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoMjAwKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICBjYXNlICdtZWRpdW0nOlxuICAgICAgICAgIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKDUwKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsb3cnOlxuICAgICAgICAgIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKDEwKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc05hTih2YWx1ZSkgJiYgdmFsdWUgPiAxKSB7XG4gICAgICBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKGdldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKCkgPj0gNTApIHtcbiAgICAgIHJvdW5kVmFsdWVzKGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcm91bmRWYWx1ZXModHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5Ccm93c2VyKCkge1xuICAgIHJldHVybiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJztcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc3RhbGxQbHVnaW4odHlwZSwgcGx1Z2luKSB7XG4gICAgaWYgKHR5cGUgPT09ICdleHByZXNzaW9ucycpIHtcbiAgICAgIHNldEV4cHJlc3Npb25zUGx1Z2luKHBsdWdpbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RmFjdG9yeShuYW1lKSB7XG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICdwcm9wZXJ0eUZhY3RvcnknOlxuICAgICAgICByZXR1cm4gUHJvcGVydHlGYWN0b3J5O1xuXG4gICAgICBjYXNlICdzaGFwZVByb3BlcnR5RmFjdG9yeSc6XG4gICAgICAgIHJldHVybiBTaGFwZVByb3BlcnR5RmFjdG9yeTtcblxuICAgICAgY2FzZSAnbWF0cml4JzpcbiAgICAgICAgcmV0dXJuIE1hdHJpeDtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgbG90dGllLnBsYXkgPSBhbmltYXRpb25NYW5hZ2VyLnBsYXk7XG4gIGxvdHRpZS5wYXVzZSA9IGFuaW1hdGlvbk1hbmFnZXIucGF1c2U7XG4gIGxvdHRpZS5zZXRMb2NhdGlvbkhyZWYgPSBzZXRMb2NhdGlvbjtcbiAgbG90dGllLnRvZ2dsZVBhdXNlID0gYW5pbWF0aW9uTWFuYWdlci50b2dnbGVQYXVzZTtcbiAgbG90dGllLnNldFNwZWVkID0gYW5pbWF0aW9uTWFuYWdlci5zZXRTcGVlZDtcbiAgbG90dGllLnNldERpcmVjdGlvbiA9IGFuaW1hdGlvbk1hbmFnZXIuc2V0RGlyZWN0aW9uO1xuICBsb3R0aWUuc3RvcCA9IGFuaW1hdGlvbk1hbmFnZXIuc3RvcDtcbiAgbG90dGllLnNlYXJjaEFuaW1hdGlvbnMgPSBzZWFyY2hBbmltYXRpb25zO1xuICBsb3R0aWUucmVnaXN0ZXJBbmltYXRpb24gPSBhbmltYXRpb25NYW5hZ2VyLnJlZ2lzdGVyQW5pbWF0aW9uO1xuICBsb3R0aWUubG9hZEFuaW1hdGlvbiA9IGxvYWRBbmltYXRpb247XG4gIGxvdHRpZS5zZXRTdWJmcmFtZVJlbmRlcmluZyA9IHNldFN1YmZyYW1lUmVuZGVyaW5nO1xuICBsb3R0aWUucmVzaXplID0gYW5pbWF0aW9uTWFuYWdlci5yZXNpemU7IC8vIGxvdHRpZS5zdGFydCA9IHN0YXJ0O1xuXG4gIGxvdHRpZS5nb1RvQW5kU3RvcCA9IGFuaW1hdGlvbk1hbmFnZXIuZ29Ub0FuZFN0b3A7XG4gIGxvdHRpZS5kZXN0cm95ID0gYW5pbWF0aW9uTWFuYWdlci5kZXN0cm95O1xuICBsb3R0aWUuc2V0UXVhbGl0eSA9IHNldFF1YWxpdHk7XG4gIGxvdHRpZS5pbkJyb3dzZXIgPSBpbkJyb3dzZXI7XG4gIGxvdHRpZS5pbnN0YWxsUGx1Z2luID0gaW5zdGFsbFBsdWdpbjtcbiAgbG90dGllLmZyZWV6ZSA9IGFuaW1hdGlvbk1hbmFnZXIuZnJlZXplO1xuICBsb3R0aWUudW5mcmVlemUgPSBhbmltYXRpb25NYW5hZ2VyLnVuZnJlZXplO1xuICBsb3R0aWUuc2V0Vm9sdW1lID0gYW5pbWF0aW9uTWFuYWdlci5zZXRWb2x1bWU7XG4gIGxvdHRpZS5tdXRlID0gYW5pbWF0aW9uTWFuYWdlci5tdXRlO1xuICBsb3R0aWUudW5tdXRlID0gYW5pbWF0aW9uTWFuYWdlci51bm11dGU7XG4gIGxvdHRpZS5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyA9IGFuaW1hdGlvbk1hbmFnZXIuZ2V0UmVnaXN0ZXJlZEFuaW1hdGlvbnM7XG4gIGxvdHRpZS51c2VXZWJXb3JrZXIgPSBzZXRXZWJXb3JrZXI7XG4gIGxvdHRpZS5zZXRJRFByZWZpeCA9IHNldFByZWZpeDtcbiAgbG90dGllLl9fZ2V0RmFjdG9yeSA9IGdldEZhY3Rvcnk7XG4gIGxvdHRpZS52ZXJzaW9uID0gJzUuMTIuMic7XG5cbiAgZnVuY3Rpb24gY2hlY2tSZWFkeSgpIHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgY2xlYXJJbnRlcnZhbChyZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCk7XG4gICAgICBzZWFyY2hBbmltYXRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UXVlcnlWYXJpYWJsZSh2YXJpYWJsZSkge1xuICAgIHZhciB2YXJzID0gcXVlcnlTdHJpbmcuc3BsaXQoJyYnKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdmFyIHBhaXIgPSB2YXJzW2ldLnNwbGl0KCc9Jyk7XG5cbiAgICAgIGlmIChkZWNvZGVVUklDb21wb25lbnQocGFpclswXSkgPT0gdmFyaWFibGUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBxdWVyeVN0cmluZyA9ICcnO1xuXG4gIGlmIChzdGFuZGFsb25lKSB7XG4gICAgdmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnc2NyaXB0Jyk7XG4gICAgdmFyIGluZGV4ID0gc2NyaXB0cy5sZW5ndGggLSAxO1xuICAgIHZhciBteVNjcmlwdCA9IHNjcmlwdHNbaW5kZXhdIHx8IHtcbiAgICAgIHNyYzogJydcbiAgICB9O1xuICAgIHF1ZXJ5U3RyaW5nID0gbXlTY3JpcHQuc3JjID8gbXlTY3JpcHQuc3JjLnJlcGxhY2UoL15bXlxcP10rXFw/Py8sICcnKSA6ICcnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5cbiAgICByZW5kZXJlciA9IGdldFF1ZXJ5VmFyaWFibGUoJ3JlbmRlcmVyJyk7XG4gIH1cblxuICB2YXIgcmVhZHlTdGF0ZUNoZWNrSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbChjaGVja1JlYWR5LCAxMDApOyAvLyB0aGlzIGFkZHMgYm9keW1vdmluIHRvIHRoZSB3aW5kb3cgb2JqZWN0IGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXG4gIHRyeSB7XG4gICAgaWYgKCEoKHR5cGVvZiBleHBvcnRzID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YkMyhleHBvcnRzKSkgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSAmJiAhKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuICAgICkge1xuICAgICAgd2luZG93LmJvZHltb3ZpbiA9IGxvdHRpZTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikgey8vXG4gIH1cblxuICB2YXIgU2hhcGVNb2RpZmllcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge307XG4gICAgdmFyIG1vZGlmaWVycyA9IHt9O1xuICAgIG9iLnJlZ2lzdGVyTW9kaWZpZXIgPSByZWdpc3Rlck1vZGlmaWVyO1xuICAgIG9iLmdldE1vZGlmaWVyID0gZ2V0TW9kaWZpZXI7XG5cbiAgICBmdW5jdGlvbiByZWdpc3Rlck1vZGlmaWVyKG5tLCBmYWN0b3J5KSB7XG4gICAgICBpZiAoIW1vZGlmaWVyc1tubV0pIHtcbiAgICAgICAgbW9kaWZpZXJzW25tXSA9IGZhY3Rvcnk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0TW9kaWZpZXIobm0sIGVsZW0sIGRhdGEpIHtcbiAgICAgIHJldHVybiBuZXcgbW9kaWZpZXJzW25tXShlbGVtLCBkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTaGFwZU1vZGlmaWVyKCkge31cblxuICBTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge307XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGVUb01vZGlmaWVyID0gZnVuY3Rpb24gKCkge307XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgIC8vIEFkZGluZyBzaGFwZSB0byBkeW5hbWljIHByb3BlcnRpZXMuIEl0IGNvdmVycyB0aGUgY2FzZSB3aGVyZSBhIHNoYXBlIGhhcyBubyBlZmZlY3RzIGFwcGxpZWQsIHRvIHJlc2V0IGl0J3MgX21kZiBzdGF0ZSBvbiBldmVyeSB0aWNrLlxuICAgICAgZGF0YS5zaC5jb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KGRhdGEuc2gpO1xuICAgICAgdmFyIHNoYXBlRGF0YSA9IHtcbiAgICAgICAgc2hhcGU6IGRhdGEuc2gsXG4gICAgICAgIGRhdGE6IGRhdGEsXG4gICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uOiBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpXG4gICAgICB9O1xuICAgICAgdGhpcy5zaGFwZXMucHVzaChzaGFwZURhdGEpO1xuICAgICAgdGhpcy5hZGRTaGFwZVRvTW9kaWZpZXIoc2hhcGVEYXRhKTtcblxuICAgICAgaWYgKHRoaXMuX2lzQW5pbWF0ZWQpIHtcbiAgICAgICAgZGF0YS5zZXRBc0FuaW1hdGVkKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNoYXBlTW9kaWZpZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzKGVsZW0sIGRhdGEpO1xuICAgIHRoaXMuZnJhbWVJZCA9IGluaXRpYWxEZWZhdWx0RnJhbWU7XG4gICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICB0aGlzLmsgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc0tleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNoYXBlTW9kaWZpZXIpO1xuXG4gIGZ1bmN0aW9uIFRyaW1Nb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgVHJpbU1vZGlmaWVyKTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5lLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAsIHRoaXMpO1xuICAgIHRoaXMuc1ZhbHVlID0gMDtcbiAgICB0aGlzLmVWYWx1ZSA9IDA7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5tID0gZGF0YS5tO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMucy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoIHx8ICEhdGhpcy5lLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggfHwgISF0aGlzLm8uZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlVG9Nb2RpZmllciA9IGZ1bmN0aW9uIChzaGFwZURhdGEpIHtcbiAgICBzaGFwZURhdGEucGF0aHNEYXRhID0gW107XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5jYWxjdWxhdGVTaGFwZUVkZ2VzID0gZnVuY3Rpb24gKHMsIGUsIHNoYXBlTGVuZ3RoLCBhZGRlZExlbmd0aCwgdG90YWxNb2RpZmllckxlbmd0aCkge1xuICAgIHZhciBzZWdtZW50cyA9IFtdO1xuXG4gICAgaWYgKGUgPD0gMSkge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IHMsXG4gICAgICAgIGU6IGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocyA+PSAxKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgczogcyAtIDEsXG4gICAgICAgIGU6IGUgLSAxXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IHMsXG4gICAgICAgIGU6IDFcbiAgICAgIH0pO1xuICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgIHM6IDAsXG4gICAgICAgIGU6IGUgLSAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc2hhcGVTZWdtZW50cyA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzZWdtZW50cy5sZW5ndGg7XG4gICAgdmFyIHNlZ21lbnRPYjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc2VnbWVudE9iID0gc2VnbWVudHNbaV07XG5cbiAgICAgIGlmICghKHNlZ21lbnRPYi5lICogdG90YWxNb2RpZmllckxlbmd0aCA8IGFkZGVkTGVuZ3RoIHx8IHNlZ21lbnRPYi5zICogdG90YWxNb2RpZmllckxlbmd0aCA+IGFkZGVkTGVuZ3RoICsgc2hhcGVMZW5ndGgpKSB7XG4gICAgICAgIHZhciBzaGFwZVM7XG4gICAgICAgIHZhciBzaGFwZUU7XG5cbiAgICAgICAgaWYgKHNlZ21lbnRPYi5zICogdG90YWxNb2RpZmllckxlbmd0aCA8PSBhZGRlZExlbmd0aCkge1xuICAgICAgICAgIHNoYXBlUyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVTID0gKHNlZ21lbnRPYi5zICogdG90YWxNb2RpZmllckxlbmd0aCAtIGFkZGVkTGVuZ3RoKSAvIHNoYXBlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNlZ21lbnRPYi5lICogdG90YWxNb2RpZmllckxlbmd0aCA+PSBhZGRlZExlbmd0aCArIHNoYXBlTGVuZ3RoKSB7XG4gICAgICAgICAgc2hhcGVFID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFwZUUgPSAoc2VnbWVudE9iLmUgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoIC0gYWRkZWRMZW5ndGgpIC8gc2hhcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZVNlZ21lbnRzLnB1c2goW3NoYXBlUywgc2hhcGVFXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCFzaGFwZVNlZ21lbnRzLmxlbmd0aCkge1xuICAgICAgc2hhcGVTZWdtZW50cy5wdXNoKFswLCAwXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlU2VnbWVudHM7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5yZWxlYXNlUGF0aHNEYXRhID0gZnVuY3Rpb24gKHBhdGhzRGF0YSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBwYXRoc0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBzZWdtZW50c0xlbmd0aFBvb2wucmVsZWFzZShwYXRoc0RhdGFbaV0pO1xuICAgIH1cblxuICAgIHBhdGhzRGF0YS5sZW5ndGggPSAwO1xuICAgIHJldHVybiBwYXRoc0RhdGE7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgcztcbiAgICB2YXIgZTtcblxuICAgIGlmICh0aGlzLl9tZGYgfHwgX2lzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIG8gPSB0aGlzLm8udiAlIDM2MCAvIDM2MDtcblxuICAgICAgaWYgKG8gPCAwKSB7XG4gICAgICAgIG8gKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucy52ID4gMSkge1xuICAgICAgICBzID0gMSArIG87XG4gICAgICB9IGVsc2UgaWYgKHRoaXMucy52IDwgMCkge1xuICAgICAgICBzID0gMCArIG87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzID0gdGhpcy5zLnYgKyBvO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5lLnYgPiAxKSB7XG4gICAgICAgIGUgPSAxICsgbztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5lLnYgPCAwKSB7XG4gICAgICAgIGUgPSAwICsgbztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGUgPSB0aGlzLmUudiArIG87XG4gICAgICB9XG5cbiAgICAgIGlmIChzID4gZSkge1xuICAgICAgICB2YXIgX3MgPSBzO1xuICAgICAgICBzID0gZTtcbiAgICAgICAgZSA9IF9zO1xuICAgICAgfVxuXG4gICAgICBzID0gTWF0aC5yb3VuZChzICogMTAwMDApICogMC4wMDAxO1xuICAgICAgZSA9IE1hdGgucm91bmQoZSAqIDEwMDAwKSAqIDAuMDAwMTtcbiAgICAgIHRoaXMuc1ZhbHVlID0gcztcbiAgICAgIHRoaXMuZVZhbHVlID0gZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcyA9IHRoaXMuc1ZhbHVlO1xuICAgICAgZSA9IHRoaXMuZVZhbHVlO1xuICAgIH1cblxuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIHBhdGhzRGF0YTtcbiAgICB2YXIgcGF0aERhdGE7XG4gICAgdmFyIHRvdGFsU2hhcGVMZW5ndGg7XG4gICAgdmFyIHRvdGFsTW9kaWZpZXJMZW5ndGggPSAwO1xuXG4gICAgaWYgKGUgPT09IHMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5sb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5zaGFwZS5wYXRocyA9IHRoaXMuc2hhcGVzW2ldLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICAgIGlmICh0aGlzLl9tZGYpIHtcbiAgICAgICAgICB0aGlzLnNoYXBlc1tpXS5wYXRoc0RhdGEubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShlID09PSAxICYmIHMgPT09IDAgfHwgZSA9PT0gMCAmJiBzID09PSAxKSkge1xuICAgICAgdmFyIHNlZ21lbnRzID0gW107XG4gICAgICB2YXIgc2hhcGVEYXRhO1xuICAgICAgdmFyIGxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgc2hhcGVEYXRhID0gdGhpcy5zaGFwZXNbaV07IC8vIGlmIHNoYXBlIGhhc24ndCBjaGFuZ2VkIGFuZCB0cmltIHByb3BlcnRpZXMgaGF2ZW4ndCBjaGFuZ2VkLCBjYWNoZWQgcHJldmlvdXMgcGF0aCBjYW4gYmUgdXNlZFxuXG4gICAgICAgIGlmICghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSAmJiB0aGlzLm0gIT09IDIpIHtcbiAgICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVQYXRocyA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocztcbiAgICAgICAgICBqTGVuID0gc2hhcGVQYXRocy5fbGVuZ3RoO1xuICAgICAgICAgIHRvdGFsU2hhcGVMZW5ndGggPSAwO1xuXG4gICAgICAgICAgaWYgKCFzaGFwZURhdGEuc2hhcGUuX21kZiAmJiBzaGFwZURhdGEucGF0aHNEYXRhLmxlbmd0aCkge1xuICAgICAgICAgICAgdG90YWxTaGFwZUxlbmd0aCA9IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYXRoc0RhdGEgPSB0aGlzLnJlbGVhc2VQYXRoc0RhdGEoc2hhcGVEYXRhLnBhdGhzRGF0YSk7XG5cbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgcGF0aERhdGEgPSBiZXouZ2V0U2VnbWVudHNMZW5ndGgoc2hhcGVQYXRocy5zaGFwZXNbal0pO1xuICAgICAgICAgICAgICBwYXRoc0RhdGEucHVzaChwYXRoRGF0YSk7XG4gICAgICAgICAgICAgIHRvdGFsU2hhcGVMZW5ndGggKz0gcGF0aERhdGEudG90YWxMZW5ndGg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoID0gdG90YWxTaGFwZUxlbmd0aDtcbiAgICAgICAgICAgIHNoYXBlRGF0YS5wYXRoc0RhdGEgPSBwYXRoc0RhdGE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdG90YWxNb2RpZmllckxlbmd0aCArPSB0b3RhbFNoYXBlTGVuZ3RoO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc2hhcGVTID0gcztcbiAgICAgIHZhciBzaGFwZUUgPSBlO1xuICAgICAgdmFyIGFkZGVkTGVuZ3RoID0gMDtcbiAgICAgIHZhciBlZGdlcztcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc2hhcGVEYXRhID0gdGhpcy5zaGFwZXNbaV07XG5cbiAgICAgICAgaWYgKHNoYXBlRGF0YS5zaGFwZS5fbWRmKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpOyAvLyBpZiBtID09PSAyIG1lYW5zIHBhdGhzIGFyZSB0cmltbWVkIGluZGl2aWR1YWxseSBzbyBlZGdlcyBuZWVkIHRvIGJlIGZvdW5kIGZvciB0aGlzIHNwZWNpZmljIHNoYXBlIHJlbGF0aXZlIHRvIHdob2VsIGdyb3VwXG5cbiAgICAgICAgICBpZiAodGhpcy5tID09PSAyICYmIGxlbiA+IDEpIHtcbiAgICAgICAgICAgIGVkZ2VzID0gdGhpcy5jYWxjdWxhdGVTaGFwZUVkZ2VzKHMsIGUsIHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoLCBhZGRlZExlbmd0aCwgdG90YWxNb2RpZmllckxlbmd0aCk7XG4gICAgICAgICAgICBhZGRlZExlbmd0aCArPSBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWRnZXMgPSBbW3NoYXBlUywgc2hhcGVFXV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgakxlbiA9IGVkZ2VzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHNoYXBlUyA9IGVkZ2VzW2pdWzBdO1xuICAgICAgICAgICAgc2hhcGVFID0gZWRnZXNbal1bMV07XG4gICAgICAgICAgICBzZWdtZW50cy5sZW5ndGggPSAwO1xuXG4gICAgICAgICAgICBpZiAoc2hhcGVFIDw9IDEpIHtcbiAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiBzaGFwZVMsXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiBzaGFwZUVcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHNoYXBlUyA+PSAxKSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHM6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogKHNoYXBlUyAtIDEpLFxuICAgICAgICAgICAgICAgIGU6IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoICogKHNoYXBlRSAtIDEpXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiBzaGFwZVMsXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGhcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiAoc2hhcGVFIC0gMSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuZXdTaGFwZXNEYXRhID0gdGhpcy5hZGRTaGFwZXMoc2hhcGVEYXRhLCBzZWdtZW50c1swXSk7XG5cbiAgICAgICAgICAgIGlmIChzZWdtZW50c1swXS5zICE9PSBzZWdtZW50c1swXS5lKSB7XG4gICAgICAgICAgICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgdmFyIGxhc3RTaGFwZUluQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5zaGFwZXNbc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgICAgIGlmIChsYXN0U2hhcGVJbkNvbGxlY3Rpb24uYykge1xuICAgICAgICAgICAgICAgICAgdmFyIGxhc3RTaGFwZSA9IG5ld1NoYXBlc0RhdGEucG9wKCk7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIG5ld1NoYXBlc0RhdGEgPSB0aGlzLmFkZFNoYXBlcyhzaGFwZURhdGEsIHNlZ21lbnRzWzFdLCBsYXN0U2hhcGUpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICB0aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgIG5ld1NoYXBlc0RhdGEgPSB0aGlzLmFkZFNoYXBlcyhzaGFwZURhdGEsIHNlZ21lbnRzWzFdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICB0aGlzLmFkZFBhdGhzKG5ld1NoYXBlc0RhdGEsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodGhpcy5fbWRmKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgLy8gUmVsZWFzaWduIFRyaW0gQ2FjaGVkIHBhdGhzIGRhdGEgd2hlbiBubyB0cmltIGFwcGxpZWQgaW4gY2FzZSBzaGFwZXMgYXJlIG1vZGlmaWVkIGluYmV0d2Vlbi5cbiAgICAgICAgLy8gRG9uJ3QgcmVtb3ZlIHRoaXMgZXZlbiBpZiBpdCdzIGxvc2luZyBjYWNoZWQgaW5mby5cbiAgICAgICAgdGhpcy5zaGFwZXNbaV0ucGF0aHNEYXRhLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFBhdGhzID0gZnVuY3Rpb24gKG5ld1BhdGhzLCBsb2NhbFNoYXBlQ29sbGVjdGlvbikge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBuZXdQYXRocy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKG5ld1BhdGhzW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTZWdtZW50ID0gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCwgc2hhcGVQYXRoLCBwb3MsIG5ld1NoYXBlKSB7XG4gICAgc2hhcGVQYXRoLnNldFhZQXQocHQyWzBdLCBwdDJbMV0sICdvJywgcG9zKTtcbiAgICBzaGFwZVBhdGguc2V0WFlBdChwdDNbMF0sIHB0M1sxXSwgJ2knLCBwb3MgKyAxKTtcblxuICAgIGlmIChuZXdTaGFwZSkge1xuICAgICAgc2hhcGVQYXRoLnNldFhZQXQocHQxWzBdLCBwdDFbMV0sICd2JywgcG9zKTtcbiAgICB9XG5cbiAgICBzaGFwZVBhdGguc2V0WFlBdChwdDRbMF0sIHB0NFsxXSwgJ3YnLCBwb3MgKyAxKTtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFNlZ21lbnRGcm9tQXJyYXkgPSBmdW5jdGlvbiAocG9pbnRzLCBzaGFwZVBhdGgsIHBvcywgbmV3U2hhcGUpIHtcbiAgICBzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbMV0sIHBvaW50c1s1XSwgJ28nLCBwb3MpO1xuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1syXSwgcG9pbnRzWzZdLCAnaScsIHBvcyArIDEpO1xuXG4gICAgaWYgKG5ld1NoYXBlKSB7XG4gICAgICBzaGFwZVBhdGguc2V0WFlBdChwb2ludHNbMF0sIHBvaW50c1s0XSwgJ3YnLCBwb3MpO1xuICAgIH1cblxuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1szXSwgcG9pbnRzWzddLCAndicsIHBvcyArIDEpO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGVzID0gZnVuY3Rpb24gKHNoYXBlRGF0YSwgc2hhcGVTZWdtZW50LCBzaGFwZVBhdGgpIHtcbiAgICB2YXIgcGF0aHNEYXRhID0gc2hhcGVEYXRhLnBhdGhzRGF0YTtcbiAgICB2YXIgc2hhcGVQYXRocyA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5zaGFwZXM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5fbGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG4gICAgdmFyIGN1cnJlbnRMZW5ndGhEYXRhO1xuICAgIHZhciBzZWdtZW50Q291bnQ7XG4gICAgdmFyIGxlbmd0aHM7XG4gICAgdmFyIHNlZ21lbnQ7XG4gICAgdmFyIHNoYXBlcyA9IFtdO1xuICAgIHZhciBpbml0UG9zO1xuICAgIHZhciBuZXdTaGFwZSA9IHRydWU7XG5cbiAgICBpZiAoIXNoYXBlUGF0aCkge1xuICAgICAgc2hhcGVQYXRoID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIHNlZ21lbnRDb3VudCA9IDA7XG4gICAgICBpbml0UG9zID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VnbWVudENvdW50ID0gc2hhcGVQYXRoLl9sZW5ndGg7XG4gICAgICBpbml0UG9zID0gc2hhcGVQYXRoLl9sZW5ndGg7XG4gICAgfVxuXG4gICAgc2hhcGVzLnB1c2goc2hhcGVQYXRoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbGVuZ3RocyA9IHBhdGhzRGF0YVtpXS5sZW5ndGhzO1xuICAgICAgc2hhcGVQYXRoLmMgPSBzaGFwZVBhdGhzW2ldLmM7XG4gICAgICBqTGVuID0gc2hhcGVQYXRoc1tpXS5jID8gbGVuZ3Rocy5sZW5ndGggOiBsZW5ndGhzLmxlbmd0aCArIDE7XG5cbiAgICAgIGZvciAoaiA9IDE7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgY3VycmVudExlbmd0aERhdGEgPSBsZW5ndGhzW2ogLSAxXTtcblxuICAgICAgICBpZiAoYWRkZWRMZW5ndGggKyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCA8IHNoYXBlU2VnbWVudC5zKSB7XG4gICAgICAgICAgYWRkZWRMZW5ndGggKz0gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGg7XG4gICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIGlmIChhZGRlZExlbmd0aCA+IHNoYXBlU2VnbWVudC5lKSB7XG4gICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoc2hhcGVTZWdtZW50LnMgPD0gYWRkZWRMZW5ndGggJiYgc2hhcGVTZWdtZW50LmUgPj0gYWRkZWRMZW5ndGggKyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hZGRTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0ub1tqIC0gMV0sIHNoYXBlUGF0aHNbaV0uaVtqXSwgc2hhcGVQYXRoc1tpXS52W2pdLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuICAgICAgICAgICAgbmV3U2hhcGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VnbWVudCA9IGJlei5nZXROZXdTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0udltqXSwgc2hhcGVQYXRoc1tpXS5vW2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5pW2pdLCAoc2hhcGVTZWdtZW50LnMgLSBhZGRlZExlbmd0aCkgLyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCwgKHNoYXBlU2VnbWVudC5lIC0gYWRkZWRMZW5ndGgpIC8gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGgsIGxlbmd0aHNbaiAtIDFdKTtcbiAgICAgICAgICAgIHRoaXMuYWRkU2VnbWVudEZyb21BcnJheShzZWdtZW50LCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpOyAvLyB0aGlzLmFkZFNlZ21lbnQoc2VnbWVudC5wdDEsIHNlZ21lbnQucHQzLCBzZWdtZW50LnB0NCwgc2VnbWVudC5wdDIsIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7XG5cbiAgICAgICAgICAgIG5ld1NoYXBlID0gZmFsc2U7XG4gICAgICAgICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoO1xuICAgICAgICAgIHNlZ21lbnRDb3VudCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzaGFwZVBhdGhzW2ldLmMgJiYgbGVuZ3Rocy5sZW5ndGgpIHtcbiAgICAgICAgY3VycmVudExlbmd0aERhdGEgPSBsZW5ndGhzW2ogLSAxXTtcblxuICAgICAgICBpZiAoYWRkZWRMZW5ndGggPD0gc2hhcGVTZWdtZW50LmUpIHtcbiAgICAgICAgICB2YXIgc2VnbWVudExlbmd0aCA9IGxlbmd0aHNbaiAtIDFdLmFkZGVkTGVuZ3RoO1xuXG4gICAgICAgICAgaWYgKHNoYXBlU2VnbWVudC5zIDw9IGFkZGVkTGVuZ3RoICYmIHNoYXBlU2VnbWVudC5lID49IGFkZGVkTGVuZ3RoICsgc2VnbWVudExlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5hZGRTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0ub1tqIC0gMV0sIHNoYXBlUGF0aHNbaV0uaVswXSwgc2hhcGVQYXRoc1tpXS52WzBdLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuICAgICAgICAgICAgbmV3U2hhcGUgPSBmYWxzZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VnbWVudCA9IGJlei5nZXROZXdTZWdtZW50KHNoYXBlUGF0aHNbaV0udltqIC0gMV0sIHNoYXBlUGF0aHNbaV0udlswXSwgc2hhcGVQYXRoc1tpXS5vW2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5pWzBdLCAoc2hhcGVTZWdtZW50LnMgLSBhZGRlZExlbmd0aCkgLyBzZWdtZW50TGVuZ3RoLCAoc2hhcGVTZWdtZW50LmUgLSBhZGRlZExlbmd0aCkgLyBzZWdtZW50TGVuZ3RoLCBsZW5ndGhzW2ogLSAxXSk7XG4gICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnRGcm9tQXJyYXkoc2VnbWVudCwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTsgLy8gdGhpcy5hZGRTZWdtZW50KHNlZ21lbnQucHQxLCBzZWdtZW50LnB0Mywgc2VnbWVudC5wdDQsIHNlZ21lbnQucHQyLCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpO1xuXG4gICAgICAgICAgICBuZXdTaGFwZSA9IGZhbHNlO1xuICAgICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVQYXRoLmMgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZGVkTGVuZ3RoICs9IGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoO1xuICAgICAgICBzZWdtZW50Q291bnQgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNoYXBlUGF0aC5fbGVuZ3RoKSB7XG4gICAgICAgIHNoYXBlUGF0aC5zZXRYWUF0KHNoYXBlUGF0aC52W2luaXRQb3NdWzBdLCBzaGFwZVBhdGgudltpbml0UG9zXVsxXSwgJ2knLCBpbml0UG9zKTtcbiAgICAgICAgc2hhcGVQYXRoLnNldFhZQXQoc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGggLSAxXVswXSwgc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGggLSAxXVsxXSwgJ28nLCBzaGFwZVBhdGguX2xlbmd0aCAtIDEpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYWRkZWRMZW5ndGggPiBzaGFwZVNlZ21lbnQuZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPCBsZW4gLSAxKSB7XG4gICAgICAgIHNoYXBlUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIG5ld1NoYXBlID0gdHJ1ZTtcbiAgICAgICAgc2hhcGVzLnB1c2goc2hhcGVQYXRoKTtcbiAgICAgICAgc2VnbWVudENvdW50ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVzO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIpO1xuXG4gIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMuYW1vdW50ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hLCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLmFtb3VudC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICB9O1xuXG4gIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGFtb3VudCkge1xuICAgIHZhciBwZXJjZW50ID0gYW1vdW50IC8gMTAwO1xuICAgIHZhciBjZW50ZXJQb2ludCA9IFswLCAwXTtcbiAgICB2YXIgcGF0aExlbmd0aCA9IHBhdGguX2xlbmd0aDtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGF0aExlbmd0aDsgaSArPSAxKSB7XG4gICAgICBjZW50ZXJQb2ludFswXSArPSBwYXRoLnZbaV1bMF07XG4gICAgICBjZW50ZXJQb2ludFsxXSArPSBwYXRoLnZbaV1bMV07XG4gICAgfVxuXG4gICAgY2VudGVyUG9pbnRbMF0gLz0gcGF0aExlbmd0aDtcbiAgICBjZW50ZXJQb2ludFsxXSAvPSBwYXRoTGVuZ3RoO1xuICAgIHZhciBjbG9uZWRQYXRoID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICBjbG9uZWRQYXRoLmMgPSBwYXRoLmM7XG4gICAgdmFyIHZYO1xuICAgIHZhciB2WTtcbiAgICB2YXIgb1g7XG4gICAgdmFyIG9ZO1xuICAgIHZhciBpWDtcbiAgICB2YXIgaVk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgcGF0aExlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2WCA9IHBhdGgudltpXVswXSArIChjZW50ZXJQb2ludFswXSAtIHBhdGgudltpXVswXSkgKiBwZXJjZW50O1xuICAgICAgdlkgPSBwYXRoLnZbaV1bMV0gKyAoY2VudGVyUG9pbnRbMV0gLSBwYXRoLnZbaV1bMV0pICogcGVyY2VudDtcbiAgICAgIG9YID0gcGF0aC5vW2ldWzBdICsgKGNlbnRlclBvaW50WzBdIC0gcGF0aC5vW2ldWzBdKSAqIC1wZXJjZW50O1xuICAgICAgb1kgPSBwYXRoLm9baV1bMV0gKyAoY2VudGVyUG9pbnRbMV0gLSBwYXRoLm9baV1bMV0pICogLXBlcmNlbnQ7XG4gICAgICBpWCA9IHBhdGguaVtpXVswXSArIChjZW50ZXJQb2ludFswXSAtIHBhdGguaVtpXVswXSkgKiAtcGVyY2VudDtcbiAgICAgIGlZID0gcGF0aC5pW2ldWzFdICsgKGNlbnRlclBvaW50WzFdIC0gcGF0aC5pW2ldWzFdKSAqIC1wZXJjZW50O1xuICAgICAgY2xvbmVkUGF0aC5zZXRUcmlwbGVBdCh2WCwgdlksIG9YLCBvWSwgaVgsIGlZLCBpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkUGF0aDtcbiAgfTtcblxuICBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgc2hhcGVQYXRocztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBhbW91bnQgPSB0aGlzLmFtb3VudC52O1xuXG4gICAgaWYgKGFtb3VudCAhPT0gMCkge1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAoISghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSwgYW1vdW50KSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZWZhdWx0VmVjdG9yID0gWzAsIDBdO1xuXG4gICAgZnVuY3Rpb24gYXBwbHlUb01hdHJpeChtYXQpIHtcbiAgICAgIHZhciBfbWRmID0gdGhpcy5fbWRmO1xuICAgICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgICAgIHRoaXMuX21kZiA9IHRoaXMuX21kZiB8fCBfbWRmO1xuXG4gICAgICBpZiAodGhpcy5hKSB7XG4gICAgICAgIG1hdC50cmFuc2xhdGUoLXRoaXMuYS52WzBdLCAtdGhpcy5hLnZbMV0sIHRoaXMuYS52WzJdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucykge1xuICAgICAgICBtYXQuc2NhbGUodGhpcy5zLnZbMF0sIHRoaXMucy52WzFdLCB0aGlzLnMudlsyXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNrKSB7XG4gICAgICAgIG1hdC5za2V3RnJvbUF4aXMoLXRoaXMuc2sudiwgdGhpcy5zYS52KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucikge1xuICAgICAgICBtYXQucm90YXRlKC10aGlzLnIudik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXQucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5wLnMpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5wLnopIHtcbiAgICAgICAgICBtYXQudHJhbnNsYXRlKHRoaXMucHgudiwgdGhpcy5weS52LCAtdGhpcy5wei52KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXQudHJhbnNsYXRlKHRoaXMucHgudiwgdGhpcy5weS52LCAwKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbWF0LnRyYW5zbGF0ZSh0aGlzLnAudlswXSwgdGhpcy5wLnZbMV0sIC10aGlzLnAudlsyXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJvY2Vzc0tleXMoZm9yY2VSZW5kZXIpIHtcbiAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNEaXJ0eSkge1xuICAgICAgICB0aGlzLnByZWNhbGN1bGF0ZU1hdHJpeCgpO1xuICAgICAgICB0aGlzLl9pc0RpcnR5ID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgIGlmICh0aGlzLl9tZGYgfHwgZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgdmFyIGZyYW1lUmF0ZTtcbiAgICAgICAgdGhpcy52LmNsb25lRnJvbVByb3BzKHRoaXMucHJlLnByb3BzKTtcblxuICAgICAgICBpZiAodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMSkge1xuICAgICAgICAgIHRoaXMudi50cmFuc2xhdGUoLXRoaXMuYS52WzBdLCAtdGhpcy5hLnZbMV0sIHRoaXMuYS52WzJdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAyKSB7XG4gICAgICAgICAgdGhpcy52LnNjYWxlKHRoaXMucy52WzBdLCB0aGlzLnMudlsxXSwgdGhpcy5zLnZbMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc2sgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMykge1xuICAgICAgICAgIHRoaXMudi5za2V3RnJvbUF4aXMoLXRoaXMuc2sudiwgdGhpcy5zYS52KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnIgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgNCkge1xuICAgICAgICAgIHRoaXMudi5yb3RhdGUoLXRoaXMuci52KTtcbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5yICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDQpIHtcbiAgICAgICAgICB0aGlzLnYucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmF1dG9PcmllbnRlZCkge1xuICAgICAgICAgIHZhciB2MTtcbiAgICAgICAgICB2YXIgdjI7XG4gICAgICAgICAgZnJhbWVSYXRlID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuXG4gICAgICAgICAgaWYgKHRoaXMucCAmJiB0aGlzLnAua2V5ZnJhbWVzICYmIHRoaXMucC5nZXRWYWx1ZUF0VGltZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucC5fY2FjaGluZy5sYXN0RnJhbWUgKyB0aGlzLnAub2Zmc2V0VGltZSA8PSB0aGlzLnAua2V5ZnJhbWVzWzBdLnQpIHtcbiAgICAgICAgICAgICAgdjEgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5rZXlmcmFtZXNbMF0udCArIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjIgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGhpcy5wLmtleWZyYW1lc1swXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wLl9jYWNoaW5nLmxhc3RGcmFtZSArIHRoaXMucC5vZmZzZXRUaW1lID49IHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGggLSAxXS50KSB7XG4gICAgICAgICAgICAgIHYxID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjIgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5rZXlmcmFtZXNbdGhpcy5wLmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC0gMC4wNSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdjEgPSB0aGlzLnAucHY7XG4gICAgICAgICAgICAgIHYyID0gdGhpcy5wLmdldFZhbHVlQXRUaW1lKCh0aGlzLnAuX2NhY2hpbmcubGFzdEZyYW1lICsgdGhpcy5wLm9mZnNldFRpbWUgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgdGhpcy5wLm9mZnNldFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5weCAmJiB0aGlzLnB4LmtleWZyYW1lcyAmJiB0aGlzLnB5LmtleWZyYW1lcyAmJiB0aGlzLnB4LmdldFZhbHVlQXRUaW1lICYmIHRoaXMucHkuZ2V0VmFsdWVBdFRpbWUpIHtcbiAgICAgICAgICAgIHYxID0gW107XG4gICAgICAgICAgICB2MiA9IFtdO1xuICAgICAgICAgICAgdmFyIHB4ID0gdGhpcy5weDtcbiAgICAgICAgICAgIHZhciBweSA9IHRoaXMucHk7XG5cbiAgICAgICAgICAgIGlmIChweC5fY2FjaGluZy5sYXN0RnJhbWUgKyBweC5vZmZzZXRUaW1lIDw9IHB4LmtleWZyYW1lc1swXS50KSB7XG4gICAgICAgICAgICAgIHYxWzBdID0gcHguZ2V0VmFsdWVBdFRpbWUoKHB4LmtleWZyYW1lc1swXS50ICsgMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MVsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKChweS5rZXlmcmFtZXNbMF0udCArIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjJbMF0gPSBweC5nZXRWYWx1ZUF0VGltZShweC5rZXlmcmFtZXNbMF0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUocHkua2V5ZnJhbWVzWzBdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChweC5fY2FjaGluZy5sYXN0RnJhbWUgKyBweC5vZmZzZXRUaW1lID49IHB4LmtleWZyYW1lc1tweC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCkge1xuICAgICAgICAgICAgICB2MVswXSA9IHB4LmdldFZhbHVlQXRUaW1lKHB4LmtleWZyYW1lc1tweC5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYxWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUocHkua2V5ZnJhbWVzW3B5LmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjJbMF0gPSBweC5nZXRWYWx1ZUF0VGltZSgocHgua2V5ZnJhbWVzW3B4LmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC0gMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MlsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKChweS5rZXlmcmFtZXNbcHkua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2MSA9IFtweC5wdiwgcHkucHZdO1xuICAgICAgICAgICAgICB2MlswXSA9IHB4LmdldFZhbHVlQXRUaW1lKChweC5fY2FjaGluZy5sYXN0RnJhbWUgKyBweC5vZmZzZXRUaW1lIC0gMC4wMSkgLyBmcmFtZVJhdGUsIHB4Lm9mZnNldFRpbWUpO1xuICAgICAgICAgICAgICB2MlsxXSA9IHB5LmdldFZhbHVlQXRUaW1lKChweS5fY2FjaGluZy5sYXN0RnJhbWUgKyBweS5vZmZzZXRUaW1lIC0gMC4wMSkgLyBmcmFtZVJhdGUsIHB5Lm9mZnNldFRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2MiA9IGRlZmF1bHRWZWN0b3I7XG4gICAgICAgICAgICB2MSA9IHYyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudi5yb3RhdGUoLU1hdGguYXRhbjIodjFbMV0gLSB2MlsxXSwgdjFbMF0gLSB2MlswXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS5wICYmIHRoaXMuZGF0YS5wLnMpIHtcbiAgICAgICAgICBpZiAodGhpcy5kYXRhLnAueikge1xuICAgICAgICAgICAgdGhpcy52LnRyYW5zbGF0ZSh0aGlzLnB4LnYsIHRoaXMucHkudiwgLXRoaXMucHoudik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudi50cmFuc2xhdGUodGhpcy5weC52LCB0aGlzLnB5LnYsIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnYudHJhbnNsYXRlKHRoaXMucC52WzBdLCB0aGlzLnAudlsxXSwgLXRoaXMucC52WzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByZWNhbGN1bGF0ZU1hdHJpeCgpIHtcbiAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDA7XG4gICAgICB0aGlzLnByZS5yZXNldCgpO1xuXG4gICAgICBpZiAoIXRoaXMuYS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJlLnRyYW5zbGF0ZSgtdGhpcy5hLnZbMF0sIC10aGlzLmEudlsxXSwgdGhpcy5hLnZbMl0pO1xuICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMucy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJlLnNjYWxlKHRoaXMucy52WzBdLCB0aGlzLnMudlsxXSwgdGhpcy5zLnZbMl0pO1xuICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zaykge1xuICAgICAgICBpZiAoIXRoaXMuc2suZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAmJiAhdGhpcy5zYS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcmUuc2tld0Zyb21BeGlzKC10aGlzLnNrLnYsIHRoaXMuc2Eudik7XG4gICAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucikge1xuICAgICAgICBpZiAoIXRoaXMuci5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5wcmUucm90YXRlKC10aGlzLnIudik7XG4gICAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gNDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5yei5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICYmICF0aGlzLnJ5LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggJiYgIXRoaXMucnguZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAmJiAhdGhpcy5vci5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMucHJlLnJvdGF0ZVooLXRoaXMucnoudikucm90YXRlWSh0aGlzLnJ5LnYpLnJvdGF0ZVgodGhpcy5yeC52KS5yb3RhdGVaKC10aGlzLm9yLnZbMl0pLnJvdGF0ZVkodGhpcy5vci52WzFdKS5yb3RhdGVYKHRoaXMub3IudlswXSk7XG4gICAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXV0b09yaWVudCgpIHsvL1xuICAgICAgLy8gdmFyIHByZXZQID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKSB7XG4gICAgICB0aGlzLl9hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG5cbiAgICAgIHRoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG4gICAgICB0aGlzLl9pc0RpcnR5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgIHRoaXMucHJvcFR5cGUgPSAndHJhbnNmb3JtJztcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLnYgPSBuZXcgTWF0cml4KCk7IC8vIFByZWNhbGN1bGF0ZWQgbWF0cml4IHdpdGggbm9uIGFuaW1hdGVkIHByb3BlcnRpZXNcblxuICAgICAgdGhpcy5wcmUgPSBuZXcgTWF0cml4KCk7XG4gICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAwO1xuICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGNvbnRhaW5lciB8fCBlbGVtKTtcblxuICAgICAgaWYgKGRhdGEucCAmJiBkYXRhLnAucykge1xuICAgICAgICB0aGlzLnB4ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLngsIDAsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLnB5ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLnksIDAsIDAsIHRoaXMpO1xuXG4gICAgICAgIGlmIChkYXRhLnAueikge1xuICAgICAgICAgIHRoaXMucHogPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAueiwgMCwgMCwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucCB8fCB7XG4gICAgICAgICAgazogWzAsIDAsIDBdXG4gICAgICAgIH0sIDEsIDAsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5yeCkge1xuICAgICAgICB0aGlzLnJ4ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yeCwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yeSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucnksIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICAgIHRoaXMucnogPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnJ6LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuXG4gICAgICAgIGlmIChkYXRhLm9yLmtbMF0udGkpIHtcbiAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICB2YXIgbGVuID0gZGF0YS5vci5rLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgZGF0YS5vci5rW2ldLnRvID0gbnVsbDtcbiAgICAgICAgICAgIGRhdGEub3Iua1tpXS50aSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEub3IsIDEsIGRlZ1RvUmFkcywgdGhpcyk7IC8vIHNoIEluZGljYXRlcyBpdCBuZWVkcyB0byBiZSBjYXBwZWQgYmV0d2VlbiAtMTgwIGFuZCAxODBcblxuICAgICAgICB0aGlzLm9yLnNoID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuciA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciB8fCB7XG4gICAgICAgICAgazogMFxuICAgICAgICB9LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5zaykge1xuICAgICAgICB0aGlzLnNrID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zaywgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5zYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuc2EsIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSB8fCB7XG4gICAgICAgIGs6IFswLCAwLCAwXVxuICAgICAgfSwgMSwgMCwgdGhpcyk7XG4gICAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMgfHwge1xuICAgICAgICBrOiBbMTAwLCAxMDAsIDEwMF1cbiAgICAgIH0sIDEsIDAuMDEsIHRoaXMpOyAvLyBPcGFjaXR5IGlzIG5vdCBwYXJ0IG9mIHRoZSB0cmFuc2Zvcm0gcHJvcGVydGllcywgdGhhdCdzIHdoeSBpdCB3b24ndCB1c2UgdGhpcy5keW5hbWljUHJvcGVydGllcy4gVGhhdCB3YXkgdHJhbnNmb3JtcyB3b24ndCBnZXQgdXBkYXRlZCBpZiBvcGFjaXR5IGNoYW5nZXMuXG5cbiAgICAgIGlmIChkYXRhLm8pIHtcbiAgICAgICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLjAxLCBlbGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubyA9IHtcbiAgICAgICAgICBfbWRmOiBmYWxzZSxcbiAgICAgICAgICB2OiAxXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2lzRGlydHkgPSB0cnVlO1xuXG4gICAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVHJhbnNmb3JtUHJvcGVydHkucHJvdG90eXBlID0ge1xuICAgICAgYXBwbHlUb01hdHJpeDogYXBwbHlUb01hdHJpeCxcbiAgICAgIGdldFZhbHVlOiBwcm9jZXNzS2V5cyxcbiAgICAgIHByZWNhbGN1bGF0ZU1hdHJpeDogcHJlY2FsY3VsYXRlTWF0cml4LFxuICAgICAgYXV0b09yaWVudDogYXV0b09yaWVudFxuICAgIH07XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBUcmFuc2Zvcm1Qcm9wZXJ0eSk7XG4gICAgVHJhbnNmb3JtUHJvcGVydHkucHJvdG90eXBlLmFkZER5bmFtaWNQcm9wZXJ0eSA9IGFkZER5bmFtaWNQcm9wZXJ0eTtcbiAgICBUcmFuc2Zvcm1Qcm9wZXJ0eS5wcm90b3R5cGUuX2FkZER5bmFtaWNQcm9wZXJ0eSA9IER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lci5wcm90b3R5cGUuYWRkRHluYW1pY1Byb3BlcnR5O1xuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YSwgY29udGFpbmVyKSB7XG4gICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFRyYW5zZm9ybVByb3BlcnR5OiBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eVxuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBSZXBlYXRlck1vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBSZXBlYXRlck1vZGlmaWVyKTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmMsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy50ciA9IFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLnRyLCB0aGlzKTtcbiAgICB0aGlzLnNvID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS50ci5zbywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5lbyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudHIuZW8sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHRoaXMucE1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLnJNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5zTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMudE1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLm1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5hcHBseVRyYW5zZm9ybXMgPSBmdW5jdGlvbiAocE1hdHJpeCwgck1hdHJpeCwgc01hdHJpeCwgdHJhbnNmb3JtLCBwZXJjLCBpbnYpIHtcbiAgICB2YXIgZGlyID0gaW52ID8gLTEgOiAxO1xuICAgIHZhciBzY2FsZVggPSB0cmFuc2Zvcm0ucy52WzBdICsgKDEgLSB0cmFuc2Zvcm0ucy52WzBdKSAqICgxIC0gcGVyYyk7XG4gICAgdmFyIHNjYWxlWSA9IHRyYW5zZm9ybS5zLnZbMV0gKyAoMSAtIHRyYW5zZm9ybS5zLnZbMV0pICogKDEgLSBwZXJjKTtcbiAgICBwTWF0cml4LnRyYW5zbGF0ZSh0cmFuc2Zvcm0ucC52WzBdICogZGlyICogcGVyYywgdHJhbnNmb3JtLnAudlsxXSAqIGRpciAqIHBlcmMsIHRyYW5zZm9ybS5wLnZbMl0pO1xuICAgIHJNYXRyaXgudHJhbnNsYXRlKC10cmFuc2Zvcm0uYS52WzBdLCAtdHJhbnNmb3JtLmEudlsxXSwgdHJhbnNmb3JtLmEudlsyXSk7XG4gICAgck1hdHJpeC5yb3RhdGUoLXRyYW5zZm9ybS5yLnYgKiBkaXIgKiBwZXJjKTtcbiAgICByTWF0cml4LnRyYW5zbGF0ZSh0cmFuc2Zvcm0uYS52WzBdLCB0cmFuc2Zvcm0uYS52WzFdLCB0cmFuc2Zvcm0uYS52WzJdKTtcbiAgICBzTWF0cml4LnRyYW5zbGF0ZSgtdHJhbnNmb3JtLmEudlswXSwgLXRyYW5zZm9ybS5hLnZbMV0sIHRyYW5zZm9ybS5hLnZbMl0pO1xuICAgIHNNYXRyaXguc2NhbGUoaW52ID8gMSAvIHNjYWxlWCA6IHNjYWxlWCwgaW52ID8gMSAvIHNjYWxlWSA6IHNjYWxlWSk7XG4gICAgc01hdHJpeC50cmFuc2xhdGUodHJhbnNmb3JtLmEudlswXSwgdHJhbnNmb3JtLmEudlsxXSwgdHJhbnNmb3JtLmEudlsyXSk7XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlbGVtLCBhcnIsIHBvcywgZWxlbXNEYXRhKSB7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmFyciA9IGFycjtcbiAgICB0aGlzLnBvcyA9IHBvcztcbiAgICB0aGlzLmVsZW1zRGF0YSA9IGVsZW1zRGF0YTtcbiAgICB0aGlzLl9jdXJyZW50Q29waWVzID0gMDtcbiAgICB0aGlzLl9lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuX2dyb3VwcyA9IFtdO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmluaXRNb2RpZmllclByb3BlcnRpZXMoZWxlbSwgYXJyW3Bvc10pO1xuXG4gICAgd2hpbGUgKHBvcyA+IDApIHtcbiAgICAgIHBvcyAtPSAxOyAvLyB0aGlzLl9lbGVtZW50cy51bnNoaWZ0KGFyci5zcGxpY2UocG9zLDEpWzBdKTtcblxuICAgICAgdGhpcy5fZWxlbWVudHMudW5zaGlmdChhcnJbcG9zXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmsgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5yZXNldEVsZW1lbnRzID0gZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZWxlbWVudHNbaV0uX3Byb2Nlc3NlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAoZWxlbWVudHNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgdGhpcy5yZXNldEVsZW1lbnRzKGVsZW1lbnRzW2ldLml0KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUuY2xvbmVFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtZW50cykge1xuICAgIHZhciBuZXdFbGVtZW50cyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoZWxlbWVudHMpKTtcbiAgICB0aGlzLnJlc2V0RWxlbWVudHMobmV3RWxlbWVudHMpO1xuICAgIHJldHVybiBuZXdFbGVtZW50cztcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5jaGFuZ2VHcm91cFJlbmRlciA9IGZ1bmN0aW9uIChlbGVtZW50cywgcmVuZGVyRmxhZykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGVsZW1lbnRzW2ldLl9yZW5kZXIgPSByZW5kZXJGbGFnO1xuXG4gICAgICBpZiAoZWxlbWVudHNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgdGhpcy5jaGFuZ2VHcm91cFJlbmRlcihlbGVtZW50c1tpXS5pdCwgcmVuZGVyRmxhZyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBpdGVtcztcbiAgICB2YXIgaXRlbXNUcmFuc2Zvcm07XG4gICAgdmFyIGk7XG4gICAgdmFyIGRpcjtcbiAgICB2YXIgY29udDtcbiAgICB2YXIgaGFzUmVsb2FkZWQgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9tZGYgfHwgX2lzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGNvcGllcyA9IE1hdGguY2VpbCh0aGlzLmMudik7XG5cbiAgICAgIGlmICh0aGlzLl9ncm91cHMubGVuZ3RoIDwgY29waWVzKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLl9ncm91cHMubGVuZ3RoIDwgY29waWVzKSB7XG4gICAgICAgICAgdmFyIGdyb3VwID0ge1xuICAgICAgICAgICAgaXQ6IHRoaXMuY2xvbmVFbGVtZW50cyh0aGlzLl9lbGVtZW50cyksXG4gICAgICAgICAgICB0eTogJ2dyJ1xuICAgICAgICAgIH07XG4gICAgICAgICAgZ3JvdXAuaXQucHVzaCh7XG4gICAgICAgICAgICBhOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiAxLFxuICAgICAgICAgICAgICBrOiBbMCwgMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBubTogJ1RyYW5zZm9ybScsXG4gICAgICAgICAgICBvOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiA3LFxuICAgICAgICAgICAgICBrOiAxMDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBwOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiAyLFxuICAgICAgICAgICAgICBrOiBbMCwgMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByOiB7XG4gICAgICAgICAgICAgIGE6IDEsXG4gICAgICAgICAgICAgIGl4OiA2LFxuICAgICAgICAgICAgICBrOiBbe1xuICAgICAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICAgICAgZTogMCxcbiAgICAgICAgICAgICAgICB0OiAwXG4gICAgICAgICAgICAgIH0sIHtcbiAgICAgICAgICAgICAgICBzOiAwLFxuICAgICAgICAgICAgICAgIGU6IDAsXG4gICAgICAgICAgICAgICAgdDogMVxuICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDMsXG4gICAgICAgICAgICAgIGs6IFsxMDAsIDEwMF1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzYToge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogNSxcbiAgICAgICAgICAgICAgazogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNrOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiA0LFxuICAgICAgICAgICAgICBrOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHk6ICd0cidcbiAgICAgICAgICB9KTtcbiAgICAgICAgICB0aGlzLmFyci5zcGxpY2UoMCwgMCwgZ3JvdXApO1xuXG4gICAgICAgICAgdGhpcy5fZ3JvdXBzLnNwbGljZSgwLCAwLCBncm91cCk7XG5cbiAgICAgICAgICB0aGlzLl9jdXJyZW50Q29waWVzICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVsZW0ucmVsb2FkU2hhcGVzKCk7XG4gICAgICAgIGhhc1JlbG9hZGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgY29udCA9IDA7XG4gICAgICB2YXIgcmVuZGVyRmxhZztcblxuICAgICAgZm9yIChpID0gMDsgaSA8PSB0aGlzLl9ncm91cHMubGVuZ3RoIC0gMTsgaSArPSAxKSB7XG4gICAgICAgIHJlbmRlckZsYWcgPSBjb250IDwgY29waWVzO1xuICAgICAgICB0aGlzLl9ncm91cHNbaV0uX3JlbmRlciA9IHJlbmRlckZsYWc7XG4gICAgICAgIHRoaXMuY2hhbmdlR3JvdXBSZW5kZXIodGhpcy5fZ3JvdXBzW2ldLml0LCByZW5kZXJGbGFnKTtcblxuICAgICAgICBpZiAoIXJlbmRlckZsYWcpIHtcbiAgICAgICAgICB2YXIgZWxlbXMgPSB0aGlzLmVsZW1zRGF0YVtpXS5pdDtcbiAgICAgICAgICB2YXIgdHJhbnNmb3JtRGF0YSA9IGVsZW1zW2VsZW1zLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgaWYgKHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLnYgIT09IDApIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLl9tZGYgPSB0cnVlO1xuICAgICAgICAgICAgdHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AudiA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybURhdGEudHJhbnNmb3JtLm9wLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2N1cnJlbnRDb3BpZXMgPSBjb3BpZXM7IC8vLyAvXG5cbiAgICAgIHZhciBvZmZzZXQgPSB0aGlzLm8udjtcbiAgICAgIHZhciBvZmZzZXRNb2R1bG8gPSBvZmZzZXQgJSAxO1xuICAgICAgdmFyIHJvdW5kT2Zmc2V0ID0gb2Zmc2V0ID4gMCA/IE1hdGguZmxvb3Iob2Zmc2V0KSA6IE1hdGguY2VpbChvZmZzZXQpO1xuICAgICAgdmFyIHBQcm9wcyA9IHRoaXMucE1hdHJpeC5wcm9wcztcbiAgICAgIHZhciByUHJvcHMgPSB0aGlzLnJNYXRyaXgucHJvcHM7XG4gICAgICB2YXIgc1Byb3BzID0gdGhpcy5zTWF0cml4LnByb3BzO1xuICAgICAgdGhpcy5wTWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLnJNYXRyaXgucmVzZXQoKTtcbiAgICAgIHRoaXMuc01hdHJpeC5yZXNldCgpO1xuICAgICAgdGhpcy50TWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLm1hdHJpeC5yZXNldCgpO1xuICAgICAgdmFyIGl0ZXJhdGlvbiA9IDA7XG5cbiAgICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICAgIHdoaWxlIChpdGVyYXRpb24gPCByb3VuZE9mZnNldCkge1xuICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCwgdGhpcy5yTWF0cml4LCB0aGlzLnNNYXRyaXgsIHRoaXMudHIsIDEsIGZhbHNlKTtcbiAgICAgICAgICBpdGVyYXRpb24gKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvZmZzZXRNb2R1bG8pIHtcbiAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsIHRoaXMuck1hdHJpeCwgdGhpcy5zTWF0cml4LCB0aGlzLnRyLCBvZmZzZXRNb2R1bG8sIGZhbHNlKTtcbiAgICAgICAgICBpdGVyYXRpb24gKz0gb2Zmc2V0TW9kdWxvO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdGlvbiA+IHJvdW5kT2Zmc2V0KSB7XG4gICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgMSwgdHJ1ZSk7XG4gICAgICAgICAgaXRlcmF0aW9uIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob2Zmc2V0TW9kdWxvKSB7XG4gICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgLW9mZnNldE1vZHVsbywgdHJ1ZSk7XG4gICAgICAgICAgaXRlcmF0aW9uIC09IG9mZnNldE1vZHVsbztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpID0gdGhpcy5kYXRhLm0gPT09IDEgPyAwIDogdGhpcy5fY3VycmVudENvcGllcyAtIDE7XG4gICAgICBkaXIgPSB0aGlzLmRhdGEubSA9PT0gMSA/IDEgOiAtMTtcbiAgICAgIGNvbnQgPSB0aGlzLl9jdXJyZW50Q29waWVzO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbjtcblxuICAgICAgd2hpbGUgKGNvbnQpIHtcbiAgICAgICAgaXRlbXMgPSB0aGlzLmVsZW1zRGF0YVtpXS5pdDtcbiAgICAgICAgaXRlbXNUcmFuc2Zvcm0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ubVByb3BzLnYucHJvcHM7XG4gICAgICAgIGpMZW4gPSBpdGVtc1RyYW5zZm9ybS5sZW5ndGg7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5tUHJvcHMuX21kZiA9IHRydWU7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5vcC5fbWRmID0gdHJ1ZTtcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm9wLnYgPSB0aGlzLl9jdXJyZW50Q29waWVzID09PSAxID8gdGhpcy5zby52IDogdGhpcy5zby52ICsgKHRoaXMuZW8udiAtIHRoaXMuc28udikgKiAoaSAvICh0aGlzLl9jdXJyZW50Q29waWVzIC0gMSkpO1xuXG4gICAgICAgIGlmIChpdGVyYXRpb24gIT09IDApIHtcbiAgICAgICAgICBpZiAoaSAhPT0gMCAmJiBkaXIgPT09IDEgfHwgaSAhPT0gdGhpcy5fY3VycmVudENvcGllcyAtIDEgJiYgZGlyID09PSAtMSkge1xuICAgICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgMSwgZmFsc2UpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubWF0cml4LnRyYW5zZm9ybShyUHJvcHNbMF0sIHJQcm9wc1sxXSwgclByb3BzWzJdLCByUHJvcHNbM10sIHJQcm9wc1s0XSwgclByb3BzWzVdLCByUHJvcHNbNl0sIHJQcm9wc1s3XSwgclByb3BzWzhdLCByUHJvcHNbOV0sIHJQcm9wc1sxMF0sIHJQcm9wc1sxMV0sIHJQcm9wc1sxMl0sIHJQcm9wc1sxM10sIHJQcm9wc1sxNF0sIHJQcm9wc1sxNV0pO1xuICAgICAgICAgIHRoaXMubWF0cml4LnRyYW5zZm9ybShzUHJvcHNbMF0sIHNQcm9wc1sxXSwgc1Byb3BzWzJdLCBzUHJvcHNbM10sIHNQcm9wc1s0XSwgc1Byb3BzWzVdLCBzUHJvcHNbNl0sIHNQcm9wc1s3XSwgc1Byb3BzWzhdLCBzUHJvcHNbOV0sIHNQcm9wc1sxMF0sIHNQcm9wc1sxMV0sIHNQcm9wc1sxMl0sIHNQcm9wc1sxM10sIHNQcm9wc1sxNF0sIHNQcm9wc1sxNV0pO1xuICAgICAgICAgIHRoaXMubWF0cml4LnRyYW5zZm9ybShwUHJvcHNbMF0sIHBQcm9wc1sxXSwgcFByb3BzWzJdLCBwUHJvcHNbM10sIHBQcm9wc1s0XSwgcFByb3BzWzVdLCBwUHJvcHNbNl0sIHBQcm9wc1s3XSwgcFByb3BzWzhdLCBwUHJvcHNbOV0sIHBQcm9wc1sxMF0sIHBQcm9wc1sxMV0sIHBQcm9wc1sxMl0sIHBQcm9wc1sxM10sIHBQcm9wc1sxNF0sIHBQcm9wc1sxNV0pO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNUcmFuc2Zvcm1bal0gPSB0aGlzLm1hdHJpeC5wcm9wc1tqXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLm1hdHJpeC5yZXNldCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubWF0cml4LnJlc2V0KCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBpdGVtc1RyYW5zZm9ybVtqXSA9IHRoaXMubWF0cml4LnByb3BzW2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZXJhdGlvbiArPSAxO1xuICAgICAgICBjb250IC09IDE7XG4gICAgICAgIGkgKz0gZGlyO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb250ID0gdGhpcy5fY3VycmVudENvcGllcztcbiAgICAgIGkgPSAwO1xuICAgICAgZGlyID0gMTtcblxuICAgICAgd2hpbGUgKGNvbnQpIHtcbiAgICAgICAgaXRlbXMgPSB0aGlzLmVsZW1zRGF0YVtpXS5pdDtcbiAgICAgICAgaXRlbXNUcmFuc2Zvcm0gPSBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ubVByb3BzLnYucHJvcHM7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5tUHJvcHMuX21kZiA9IGZhbHNlO1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ub3AuX21kZiA9IGZhbHNlO1xuICAgICAgICBjb250IC09IDE7XG4gICAgICAgIGkgKz0gZGlyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBoYXNSZWxvYWRlZDtcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGZ1bmN0aW9uIFJvdW5kQ29ybmVyc01vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBSb3VuZENvcm5lcnNNb2RpZmllcik7XG5cbiAgUm91bmRDb3JuZXJzTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMucmQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMucmQuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfTtcblxuICBSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGggPSBmdW5jdGlvbiAocGF0aCwgcm91bmQpIHtcbiAgICB2YXIgY2xvbmVkUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgY2xvbmVkUGF0aC5jID0gcGF0aC5jO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBwYXRoLl9sZW5ndGg7XG4gICAgdmFyIGN1cnJlbnRWO1xuICAgIHZhciBjdXJyZW50STtcbiAgICB2YXIgY3VycmVudE87XG4gICAgdmFyIGNsb3NlclY7XG4gICAgdmFyIGRpc3RhbmNlO1xuICAgIHZhciBuZXdQb3NQZXJjO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHZYO1xuICAgIHZhciB2WTtcbiAgICB2YXIgb1g7XG4gICAgdmFyIG9ZO1xuICAgIHZhciBpWDtcbiAgICB2YXIgaVk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGN1cnJlbnRWID0gcGF0aC52W2ldO1xuICAgICAgY3VycmVudE8gPSBwYXRoLm9baV07XG4gICAgICBjdXJyZW50SSA9IHBhdGguaVtpXTtcblxuICAgICAgaWYgKGN1cnJlbnRWWzBdID09PSBjdXJyZW50T1swXSAmJiBjdXJyZW50VlsxXSA9PT0gY3VycmVudE9bMV0gJiYgY3VycmVudFZbMF0gPT09IGN1cnJlbnRJWzBdICYmIGN1cnJlbnRWWzFdID09PSBjdXJyZW50SVsxXSkge1xuICAgICAgICBpZiAoKGkgPT09IDAgfHwgaSA9PT0gbGVuIC0gMSkgJiYgIXBhdGguYykge1xuICAgICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQoY3VycmVudFZbMF0sIGN1cnJlbnRWWzFdLCBjdXJyZW50T1swXSwgY3VycmVudE9bMV0sIGN1cnJlbnRJWzBdLCBjdXJyZW50SVsxXSwgaW5kZXgpO1xuICAgICAgICAgIC8qIGNsb25lZFBhdGgudltpbmRleF0gPSBjdXJyZW50VjtcclxuICAgICAgICAgICAgICAgICAgY2xvbmVkUGF0aC5vW2luZGV4XSA9IGN1cnJlbnRPO1xyXG4gICAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLmlbaW5kZXhdID0gY3VycmVudEk7ICovXG5cbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2xlbiAtIDFdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2kgLSAxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50VlswXSAtIGNsb3NlclZbMF0sIDIpICsgTWF0aC5wb3coY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdLCAyKSk7XG4gICAgICAgICAgbmV3UG9zUGVyYyA9IGRpc3RhbmNlID8gTWF0aC5taW4oZGlzdGFuY2UgLyAyLCByb3VuZCkgLyBkaXN0YW5jZSA6IDA7XG4gICAgICAgICAgaVggPSBjdXJyZW50VlswXSArIChjbG9zZXJWWzBdIC0gY3VycmVudFZbMF0pICogbmV3UG9zUGVyYztcbiAgICAgICAgICB2WCA9IGlYO1xuICAgICAgICAgIGlZID0gY3VycmVudFZbMV0gLSAoY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlkgPSBpWTtcbiAgICAgICAgICBvWCA9IHZYIC0gKHZYIC0gY3VycmVudFZbMF0pICogcm91bmRDb3JuZXI7XG4gICAgICAgICAgb1kgPSB2WSAtICh2WSAtIGN1cnJlbnRWWzFdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQodlgsIHZZLCBvWCwgb1ksIGlYLCBpWSwgaW5kZXgpO1xuICAgICAgICAgIGluZGV4ICs9IDE7XG5cbiAgICAgICAgICBpZiAoaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgICAgY2xvc2VyViA9IHBhdGgudlswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvc2VyViA9IHBhdGgudltpICsgMV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLnNxcnQoTWF0aC5wb3coY3VycmVudFZbMF0gLSBjbG9zZXJWWzBdLCAyKSArIE1hdGgucG93KGN1cnJlbnRWWzFdIC0gY2xvc2VyVlsxXSwgMikpO1xuICAgICAgICAgIG5ld1Bvc1BlcmMgPSBkaXN0YW5jZSA/IE1hdGgubWluKGRpc3RhbmNlIC8gMiwgcm91bmQpIC8gZGlzdGFuY2UgOiAwO1xuICAgICAgICAgIG9YID0gY3VycmVudFZbMF0gKyAoY2xvc2VyVlswXSAtIGN1cnJlbnRWWzBdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlggPSBvWDtcbiAgICAgICAgICBvWSA9IGN1cnJlbnRWWzFdICsgKGNsb3NlclZbMV0gLSBjdXJyZW50VlsxXSkgKiBuZXdQb3NQZXJjO1xuICAgICAgICAgIHZZID0gb1k7XG4gICAgICAgICAgaVggPSB2WCAtICh2WCAtIGN1cnJlbnRWWzBdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGlZID0gdlkgLSAodlkgLSBjdXJyZW50VlsxXSkgKiByb3VuZENvcm5lcjtcbiAgICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHZYLCB2WSwgb1gsIG9ZLCBpWCwgaVksIGluZGV4KTtcbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHBhdGgudltpXVswXSwgcGF0aC52W2ldWzFdLCBwYXRoLm9baV1bMF0sIHBhdGgub1tpXVsxXSwgcGF0aC5pW2ldWzBdLCBwYXRoLmlbaV1bMV0sIGluZGV4KTtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkUGF0aDtcbiAgfTtcblxuICBSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIHNoYXBlUGF0aHM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcmQgPSB0aGlzLnJkLnY7XG5cbiAgICBpZiAocmQgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIHJkKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgc2hhcGVEYXRhLnNoYXBlLnBhdGhzID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBmbG9hdEVxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpICogMTAwMDAwIDw9IE1hdGgubWluKE1hdGguYWJzKGEpLCBNYXRoLmFicyhiKSk7XG4gIH1cblxuICBmdW5jdGlvbiBmbG9hdFplcm8oZikge1xuICAgIHJldHVybiBNYXRoLmFicyhmKSA8PSAwLjAwMDAxO1xuICB9XG5cbiAgZnVuY3Rpb24gbGVycChwMCwgcDEsIGFtb3VudCkge1xuICAgIHJldHVybiBwMCAqICgxIC0gYW1vdW50KSArIHAxICogYW1vdW50O1xuICB9XG5cbiAgZnVuY3Rpb24gbGVycFBvaW50KHAwLCBwMSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIFtsZXJwKHAwWzBdLCBwMVswXSwgYW1vdW50KSwgbGVycChwMFsxXSwgcDFbMV0sIGFtb3VudCldO1xuICB9XG5cbiAgZnVuY3Rpb24gcXVhZFJvb3RzKGEsIGIsIGMpIHtcbiAgICAvLyBubyByb290XG4gICAgaWYgKGEgPT09IDApIHJldHVybiBbXTtcbiAgICB2YXIgcyA9IGIgKiBiIC0gNCAqIGEgKiBjOyAvLyBDb21wbGV4IHJvb3RzXG5cbiAgICBpZiAocyA8IDApIHJldHVybiBbXTtcbiAgICB2YXIgc2luZ2xlUm9vdCA9IC1iIC8gKDIgKiBhKTsgLy8gMSByb290XG5cbiAgICBpZiAocyA9PT0gMCkgcmV0dXJuIFtzaW5nbGVSb290XTtcbiAgICB2YXIgZGVsdGEgPSBNYXRoLnNxcnQocykgLyAoMiAqIGEpOyAvLyAyIHJvb3RzXG5cbiAgICByZXR1cm4gW3NpbmdsZVJvb3QgLSBkZWx0YSwgc2luZ2xlUm9vdCArIGRlbHRhXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbHlub21pYWxDb2VmZmljaWVudHMocDAsIHAxLCBwMiwgcDMpIHtcbiAgICByZXR1cm4gWy1wMCArIDMgKiBwMSAtIDMgKiBwMiArIHAzLCAzICogcDAgLSA2ICogcDEgKyAzICogcDIsIC0zICogcDAgKyAzICogcDEsIHAwXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNpbmdsZVBvaW50KHApIHtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIocCwgcCwgcCwgcCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gUG9seW5vbWlhbEJlemllcihwMCwgcDEsIHAyLCBwMywgbGluZWFyaXplKSB7XG4gICAgaWYgKGxpbmVhcml6ZSAmJiBwb2ludEVxdWFsKHAwLCBwMSkpIHtcbiAgICAgIHAxID0gbGVycFBvaW50KHAwLCBwMywgMSAvIDMpO1xuICAgIH1cblxuICAgIGlmIChsaW5lYXJpemUgJiYgcG9pbnRFcXVhbChwMiwgcDMpKSB7XG4gICAgICBwMiA9IGxlcnBQb2ludChwMCwgcDMsIDIgLyAzKTtcbiAgICB9XG5cbiAgICB2YXIgY29lZmZ4ID0gcG9seW5vbWlhbENvZWZmaWNpZW50cyhwMFswXSwgcDFbMF0sIHAyWzBdLCBwM1swXSk7XG4gICAgdmFyIGNvZWZmeSA9IHBvbHlub21pYWxDb2VmZmljaWVudHMocDBbMV0sIHAxWzFdLCBwMlsxXSwgcDNbMV0pO1xuICAgIHRoaXMuYSA9IFtjb2VmZnhbMF0sIGNvZWZmeVswXV07XG4gICAgdGhpcy5iID0gW2NvZWZmeFsxXSwgY29lZmZ5WzFdXTtcbiAgICB0aGlzLmMgPSBbY29lZmZ4WzJdLCBjb2VmZnlbMl1dO1xuICAgIHRoaXMuZCA9IFtjb2VmZnhbM10sIGNvZWZmeVszXV07XG4gICAgdGhpcy5wb2ludHMgPSBbcDAsIHAxLCBwMiwgcDNdO1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUucG9pbnQgPSBmdW5jdGlvbiAodCkge1xuICAgIHJldHVybiBbKCh0aGlzLmFbMF0gKiB0ICsgdGhpcy5iWzBdKSAqIHQgKyB0aGlzLmNbMF0pICogdCArIHRoaXMuZFswXSwgKCh0aGlzLmFbMV0gKiB0ICsgdGhpcy5iWzFdKSAqIHQgKyB0aGlzLmNbMV0pICogdCArIHRoaXMuZFsxXV07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuZGVyaXZhdGl2ZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIFsoMyAqIHQgKiB0aGlzLmFbMF0gKyAyICogdGhpcy5iWzBdKSAqIHQgKyB0aGlzLmNbMF0sICgzICogdCAqIHRoaXMuYVsxXSArIDIgKiB0aGlzLmJbMV0pICogdCArIHRoaXMuY1sxXV07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUudGFuZ2VudEFuZ2xlID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgcCA9IHRoaXMuZGVyaXZhdGl2ZSh0KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihwWzFdLCBwWzBdKTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5ub3JtYWxBbmdsZSA9IGZ1bmN0aW9uICh0KSB7XG4gICAgdmFyIHAgPSB0aGlzLmRlcml2YXRpdmUodCk7XG4gICAgcmV0dXJuIE1hdGguYXRhbjIocFswXSwgcFsxXSk7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuaW5mbGVjdGlvblBvaW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZGVub20gPSB0aGlzLmFbMV0gKiB0aGlzLmJbMF0gLSB0aGlzLmFbMF0gKiB0aGlzLmJbMV07XG4gICAgaWYgKGZsb2F0WmVybyhkZW5vbSkpIHJldHVybiBbXTtcbiAgICB2YXIgdGN1c3AgPSAtMC41ICogKHRoaXMuYVsxXSAqIHRoaXMuY1swXSAtIHRoaXMuYVswXSAqIHRoaXMuY1sxXSkgLyBkZW5vbTtcbiAgICB2YXIgc3F1YXJlID0gdGN1c3AgKiB0Y3VzcCAtIDEgLyAzICogKHRoaXMuYlsxXSAqIHRoaXMuY1swXSAtIHRoaXMuYlswXSAqIHRoaXMuY1sxXSkgLyBkZW5vbTtcbiAgICBpZiAoc3F1YXJlIDwgMCkgcmV0dXJuIFtdO1xuICAgIHZhciByb290ID0gTWF0aC5zcXJ0KHNxdWFyZSk7XG5cbiAgICBpZiAoZmxvYXRaZXJvKHJvb3QpKSB7XG4gICAgICBpZiAocm9vdCA+IDAgJiYgcm9vdCA8IDEpIHJldHVybiBbdGN1c3BdO1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHJldHVybiBbdGN1c3AgLSByb290LCB0Y3VzcCArIHJvb3RdLmZpbHRlcihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHIgPiAwICYmIHIgPCAxO1xuICAgIH0pO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLnNwbGl0ID0gZnVuY3Rpb24gKHQpIHtcbiAgICBpZiAodCA8PSAwKSByZXR1cm4gW3NpbmdsZVBvaW50KHRoaXMucG9pbnRzWzBdKSwgdGhpc107XG4gICAgaWYgKHQgPj0gMSkgcmV0dXJuIFt0aGlzLCBzaW5nbGVQb2ludCh0aGlzLnBvaW50c1t0aGlzLnBvaW50cy5sZW5ndGggLSAxXSldO1xuICAgIHZhciBwMTAgPSBsZXJwUG9pbnQodGhpcy5wb2ludHNbMF0sIHRoaXMucG9pbnRzWzFdLCB0KTtcbiAgICB2YXIgcDExID0gbGVycFBvaW50KHRoaXMucG9pbnRzWzFdLCB0aGlzLnBvaW50c1syXSwgdCk7XG4gICAgdmFyIHAxMiA9IGxlcnBQb2ludCh0aGlzLnBvaW50c1syXSwgdGhpcy5wb2ludHNbM10sIHQpO1xuICAgIHZhciBwMjAgPSBsZXJwUG9pbnQocDEwLCBwMTEsIHQpO1xuICAgIHZhciBwMjEgPSBsZXJwUG9pbnQocDExLCBwMTIsIHQpO1xuICAgIHZhciBwMyA9IGxlcnBQb2ludChwMjAsIHAyMSwgdCk7XG4gICAgcmV0dXJuIFtuZXcgUG9seW5vbWlhbEJlemllcih0aGlzLnBvaW50c1swXSwgcDEwLCBwMjAsIHAzLCB0cnVlKSwgbmV3IFBvbHlub21pYWxCZXppZXIocDMsIHAyMSwgcDEyLCB0aGlzLnBvaW50c1szXSwgdHJ1ZSldO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGV4dHJlbWEoYmV6LCBjb21wKSB7XG4gICAgdmFyIG1pbiA9IGJlei5wb2ludHNbMF1bY29tcF07XG4gICAgdmFyIG1heCA9IGJlei5wb2ludHNbYmV6LnBvaW50cy5sZW5ndGggLSAxXVtjb21wXTtcblxuICAgIGlmIChtaW4gPiBtYXgpIHtcbiAgICAgIHZhciBlID0gbWF4O1xuICAgICAgbWF4ID0gbWluO1xuICAgICAgbWluID0gZTtcbiAgICB9IC8vIERlcml2YXRpdmUgcm9vdHMgdG8gZmluZCBtaW4vbWF4XG5cblxuICAgIHZhciBmID0gcXVhZFJvb3RzKDMgKiBiZXouYVtjb21wXSwgMiAqIGJlei5iW2NvbXBdLCBiZXouY1tjb21wXSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGYubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChmW2ldID4gMCAmJiBmW2ldIDwgMSkge1xuICAgICAgICB2YXIgdmFsID0gYmV6LnBvaW50KGZbaV0pW2NvbXBdO1xuICAgICAgICBpZiAodmFsIDwgbWluKSBtaW4gPSB2YWw7ZWxzZSBpZiAodmFsID4gbWF4KSBtYXggPSB2YWw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG1pbjogbWluLFxuICAgICAgbWF4OiBtYXhcbiAgICB9O1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuYm91bmRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB4OiBleHRyZW1hKHRoaXMsIDApLFxuICAgICAgeTogZXh0cmVtYSh0aGlzLCAxKVxuICAgIH07XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuYm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJvdW5kcyA9IHRoaXMuYm91bmRzKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxlZnQ6IGJvdW5kcy54Lm1pbixcbiAgICAgIHJpZ2h0OiBib3VuZHMueC5tYXgsXG4gICAgICB0b3A6IGJvdW5kcy55Lm1pbixcbiAgICAgIGJvdHRvbTogYm91bmRzLnkubWF4LFxuICAgICAgd2lkdGg6IGJvdW5kcy54Lm1heCAtIGJvdW5kcy54Lm1pbixcbiAgICAgIGhlaWdodDogYm91bmRzLnkubWF4IC0gYm91bmRzLnkubWluLFxuICAgICAgY3g6IChib3VuZHMueC5tYXggKyBib3VuZHMueC5taW4pIC8gMixcbiAgICAgIGN5OiAoYm91bmRzLnkubWF4ICsgYm91bmRzLnkubWluKSAvIDJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIGludGVyc2VjdERhdGEoYmV6LCB0MSwgdDIpIHtcbiAgICB2YXIgYm94ID0gYmV6LmJvdW5kaW5nQm94KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGN4OiBib3guY3gsXG4gICAgICBjeTogYm94LmN5LFxuICAgICAgd2lkdGg6IGJveC53aWR0aCxcbiAgICAgIGhlaWdodDogYm94LmhlaWdodCxcbiAgICAgIGJlejogYmV6LFxuICAgICAgdDogKHQxICsgdDIpIC8gMixcbiAgICAgIHQxOiB0MSxcbiAgICAgIHQyOiB0MlxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBzcGxpdERhdGEoZGF0YSkge1xuICAgIHZhciBzcGxpdCA9IGRhdGEuYmV6LnNwbGl0KDAuNSk7XG4gICAgcmV0dXJuIFtpbnRlcnNlY3REYXRhKHNwbGl0WzBdLCBkYXRhLnQxLCBkYXRhLnQpLCBpbnRlcnNlY3REYXRhKHNwbGl0WzFdLCBkYXRhLnQsIGRhdGEudDIpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJveEludGVyc2VjdChiMSwgYjIpIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoYjEuY3ggLSBiMi5jeCkgKiAyIDwgYjEud2lkdGggKyBiMi53aWR0aCAmJiBNYXRoLmFicyhiMS5jeSAtIGIyLmN5KSAqIDIgPCBiMS5oZWlnaHQgKyBiMi5oZWlnaHQ7XG4gIH1cblxuICBmdW5jdGlvbiBpbnRlcnNlY3RzSW1wbChkMSwgZDIsIGRlcHRoLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbikge1xuICAgIGlmICghYm94SW50ZXJzZWN0KGQxLCBkMikpIHJldHVybjtcblxuICAgIGlmIChkZXB0aCA+PSBtYXhSZWN1cnNpb24gfHwgZDEud2lkdGggPD0gdG9sZXJhbmNlICYmIGQxLmhlaWdodCA8PSB0b2xlcmFuY2UgJiYgZDIud2lkdGggPD0gdG9sZXJhbmNlICYmIGQyLmhlaWdodCA8PSB0b2xlcmFuY2UpIHtcbiAgICAgIGludGVyc2VjdGlvbnMucHVzaChbZDEudCwgZDIudF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBkMXMgPSBzcGxpdERhdGEoZDEpO1xuICAgIHZhciBkMnMgPSBzcGxpdERhdGEoZDIpO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1swXSwgZDJzWzBdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgICBpbnRlcnNlY3RzSW1wbChkMXNbMF0sIGQyc1sxXSwgZGVwdGggKyAxLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgaW50ZXJzZWN0c0ltcGwoZDFzWzFdLCBkMnNbMF0sIGRlcHRoICsgMSwgdG9sZXJhbmNlLCBpbnRlcnNlY3Rpb25zLCBtYXhSZWN1cnNpb24pO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1sxXSwgZDJzWzFdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgfVxuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLmludGVyc2VjdGlvbnMgPSBmdW5jdGlvbiAob3RoZXIsIHRvbGVyYW5jZSwgbWF4UmVjdXJzaW9uKSB7XG4gICAgaWYgKHRvbGVyYW5jZSA9PT0gdW5kZWZpbmVkKSB0b2xlcmFuY2UgPSAyO1xuICAgIGlmIChtYXhSZWN1cnNpb24gPT09IHVuZGVmaW5lZCkgbWF4UmVjdXJzaW9uID0gNztcbiAgICB2YXIgaW50ZXJzZWN0aW9ucyA9IFtdO1xuICAgIGludGVyc2VjdHNJbXBsKGludGVyc2VjdERhdGEodGhpcywgMCwgMSksIGludGVyc2VjdERhdGEob3RoZXIsIDAsIDEpLCAwLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgcmV0dXJuIGludGVyc2VjdGlvbnM7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQgPSBmdW5jdGlvbiAoc2hhcGVQYXRoLCBpbmRleCkge1xuICAgIHZhciBuZXh0SW5kZXggPSAoaW5kZXggKyAxKSAlIHNoYXBlUGF0aC5sZW5ndGgoKTtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIoc2hhcGVQYXRoLnZbaW5kZXhdLCBzaGFwZVBhdGgub1tpbmRleF0sIHNoYXBlUGF0aC5pW25leHRJbmRleF0sIHNoYXBlUGF0aC52W25leHRJbmRleF0sIHRydWUpO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIuc2hhcGVTZWdtZW50SW52ZXJ0ZWQgPSBmdW5jdGlvbiAoc2hhcGVQYXRoLCBpbmRleCkge1xuICAgIHZhciBuZXh0SW5kZXggPSAoaW5kZXggKyAxKSAlIHNoYXBlUGF0aC5sZW5ndGgoKTtcbiAgICByZXR1cm4gbmV3IFBvbHlub21pYWxCZXppZXIoc2hhcGVQYXRoLnZbbmV4dEluZGV4XSwgc2hhcGVQYXRoLmlbbmV4dEluZGV4XSwgc2hhcGVQYXRoLm9baW5kZXhdLCBzaGFwZVBhdGgudltpbmRleF0sIHRydWUpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGNyb3NzUHJvZHVjdChhLCBiKSB7XG4gICAgcmV0dXJuIFthWzFdICogYlsyXSAtIGFbMl0gKiBiWzFdLCBhWzJdICogYlswXSAtIGFbMF0gKiBiWzJdLCBhWzBdICogYlsxXSAtIGFbMV0gKiBiWzBdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpbmVJbnRlcnNlY3Rpb24oc3RhcnQxLCBlbmQxLCBzdGFydDIsIGVuZDIpIHtcbiAgICB2YXIgdjEgPSBbc3RhcnQxWzBdLCBzdGFydDFbMV0sIDFdO1xuICAgIHZhciB2MiA9IFtlbmQxWzBdLCBlbmQxWzFdLCAxXTtcbiAgICB2YXIgdjMgPSBbc3RhcnQyWzBdLCBzdGFydDJbMV0sIDFdO1xuICAgIHZhciB2NCA9IFtlbmQyWzBdLCBlbmQyWzFdLCAxXTtcbiAgICB2YXIgciA9IGNyb3NzUHJvZHVjdChjcm9zc1Byb2R1Y3QodjEsIHYyKSwgY3Jvc3NQcm9kdWN0KHYzLCB2NCkpO1xuICAgIGlmIChmbG9hdFplcm8oclsyXSkpIHJldHVybiBudWxsO1xuICAgIHJldHVybiBbclswXSAvIHJbMl0sIHJbMV0gLyByWzJdXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvbGFyT2Zmc2V0KHAsIGFuZ2xlLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gW3BbMF0gKyBNYXRoLmNvcyhhbmdsZSkgKiBsZW5ndGgsIHBbMV0gLSBNYXRoLnNpbihhbmdsZSkgKiBsZW5ndGhdO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnREaXN0YW5jZShwMSwgcDIpIHtcbiAgICByZXR1cm4gTWF0aC5oeXBvdChwMVswXSAtIHAyWzBdLCBwMVsxXSAtIHAyWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvaW50RXF1YWwocDEsIHAyKSB7XG4gICAgcmV0dXJuIGZsb2F0RXF1YWwocDFbMF0sIHAyWzBdKSAmJiBmbG9hdEVxdWFsKHAxWzFdLCBwMlsxXSk7XG4gIH1cblxuICBmdW5jdGlvbiBaaWdaYWdNb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgWmlnWmFnTW9kaWZpZXIpO1xuXG4gIFppZ1phZ01vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmFtcGxpdHVkZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5mcmVxdWVuY3kgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMucG9pbnRzVHlwZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucHQsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLmFtcGxpdHVkZS5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICE9PSAwIHx8IHRoaXMuZnJlcXVlbmN5LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDAgfHwgdGhpcy5wb2ludHNUeXBlLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDA7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwb2ludCwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBvdXRBbXBsaXR1ZGUsIGluQW1wbGl0dWRlKSB7XG4gICAgdmFyIGFuZ08gPSBhbmdsZSAtIE1hdGguUEkgLyAyO1xuICAgIHZhciBhbmdJID0gYW5nbGUgKyBNYXRoLlBJIC8gMjtcbiAgICB2YXIgcHggPSBwb2ludFswXSArIE1hdGguY29zKGFuZ2xlKSAqIGRpcmVjdGlvbiAqIGFtcGxpdHVkZTtcbiAgICB2YXIgcHkgPSBwb2ludFsxXSAtIE1hdGguc2luKGFuZ2xlKSAqIGRpcmVjdGlvbiAqIGFtcGxpdHVkZTtcbiAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQocHgsIHB5LCBweCArIE1hdGguY29zKGFuZ08pICogb3V0QW1wbGl0dWRlLCBweSAtIE1hdGguc2luKGFuZ08pICogb3V0QW1wbGl0dWRlLCBweCArIE1hdGguY29zKGFuZ0kpICogaW5BbXBsaXR1ZGUsIHB5IC0gTWF0aC5zaW4oYW5nSSkgKiBpbkFtcGxpdHVkZSwgb3V0cHV0QmV6aWVyLmxlbmd0aCgpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFBlcnBlbmRpY3VsYXJWZWN0b3IocHQxLCBwdDIpIHtcbiAgICB2YXIgdmVjdG9yID0gW3B0MlswXSAtIHB0MVswXSwgcHQyWzFdIC0gcHQxWzFdXTtcbiAgICB2YXIgcm90ID0gLU1hdGguUEkgKiAwLjU7XG4gICAgdmFyIHJvdGF0ZWRWZWN0b3IgPSBbTWF0aC5jb3Mocm90KSAqIHZlY3RvclswXSAtIE1hdGguc2luKHJvdCkgKiB2ZWN0b3JbMV0sIE1hdGguc2luKHJvdCkgKiB2ZWN0b3JbMF0gKyBNYXRoLmNvcyhyb3QpICogdmVjdG9yWzFdXTtcbiAgICByZXR1cm4gcm90YXRlZFZlY3RvcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFByb2plY3RpbmdBbmdsZShwYXRoLCBjdXIpIHtcbiAgICB2YXIgcHJldkluZGV4ID0gY3VyID09PSAwID8gcGF0aC5sZW5ndGgoKSAtIDEgOiBjdXIgLSAxO1xuICAgIHZhciBuZXh0SW5kZXggPSAoY3VyICsgMSkgJSBwYXRoLmxlbmd0aCgpO1xuICAgIHZhciBwcmV2UG9pbnQgPSBwYXRoLnZbcHJldkluZGV4XTtcbiAgICB2YXIgbmV4dFBvaW50ID0gcGF0aC52W25leHRJbmRleF07XG4gICAgdmFyIHBWZWN0b3IgPSBnZXRQZXJwZW5kaWN1bGFyVmVjdG9yKHByZXZQb2ludCwgbmV4dFBvaW50KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMigwLCAxKSAtIE1hdGguYXRhbjIocFZlY3RvclsxXSwgcFZlY3RvclswXSk7XG4gIH1cblxuICBmdW5jdGlvbiB6aWdaYWdDb3JuZXIob3V0cHV0QmV6aWVyLCBwYXRoLCBjdXIsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbikge1xuICAgIHZhciBhbmdsZSA9IGdldFByb2plY3RpbmdBbmdsZShwYXRoLCBjdXIpO1xuICAgIHZhciBwb2ludCA9IHBhdGgudltjdXIgJSBwYXRoLl9sZW5ndGhdO1xuICAgIHZhciBwcmV2UG9pbnQgPSBwYXRoLnZbY3VyID09PSAwID8gcGF0aC5fbGVuZ3RoIC0gMSA6IGN1ciAtIDFdO1xuICAgIHZhciBuZXh0UG9pbnQgPSBwYXRoLnZbKGN1ciArIDEpICUgcGF0aC5fbGVuZ3RoXTtcbiAgICB2YXIgcHJldkRpc3QgPSBwb2ludFR5cGUgPT09IDIgPyBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnRbMF0gLSBwcmV2UG9pbnRbMF0sIDIpICsgTWF0aC5wb3cocG9pbnRbMV0gLSBwcmV2UG9pbnRbMV0sIDIpKSA6IDA7XG4gICAgdmFyIG5leHREaXN0ID0gcG9pbnRUeXBlID09PSAyID8gTWF0aC5zcXJ0KE1hdGgucG93KHBvaW50WzBdIC0gbmV4dFBvaW50WzBdLCAyKSArIE1hdGgucG93KHBvaW50WzFdIC0gbmV4dFBvaW50WzFdLCAyKSkgOiAwO1xuICAgIHNldFBvaW50KG91dHB1dEJlemllciwgcGF0aC52W2N1ciAlIHBhdGguX2xlbmd0aF0sIGFuZ2xlLCBkaXJlY3Rpb24sIGFtcGxpdHVkZSwgbmV4dERpc3QgLyAoKGZyZXF1ZW5jeSArIDEpICogMiksIHByZXZEaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBwb2ludFR5cGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gemlnWmFnU2VnbWVudChvdXRwdXRCZXppZXIsIHNlZ21lbnQsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZnJlcXVlbmN5OyBpICs9IDEpIHtcbiAgICAgIHZhciB0ID0gKGkgKyAxKSAvIChmcmVxdWVuY3kgKyAxKTtcbiAgICAgIHZhciBkaXN0ID0gcG9pbnRUeXBlID09PSAyID8gTWF0aC5zcXJ0KE1hdGgucG93KHNlZ21lbnQucG9pbnRzWzNdWzBdIC0gc2VnbWVudC5wb2ludHNbMF1bMF0sIDIpICsgTWF0aC5wb3coc2VnbWVudC5wb2ludHNbM11bMV0gLSBzZWdtZW50LnBvaW50c1swXVsxXSwgMikpIDogMDtcbiAgICAgIHZhciBhbmdsZSA9IHNlZ21lbnQubm9ybWFsQW5nbGUodCk7XG4gICAgICB2YXIgcG9pbnQgPSBzZWdtZW50LnBvaW50KHQpO1xuICAgICAgc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwb2ludCwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBkaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBkaXN0IC8gKChmcmVxdWVuY3kgKyAxKSAqIDIpLCBwb2ludFR5cGUpO1xuICAgICAgZGlyZWN0aW9uID0gLWRpcmVjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZGlyZWN0aW9uO1xuICB9XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NQYXRoID0gZnVuY3Rpb24gKHBhdGgsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUpIHtcbiAgICB2YXIgY291bnQgPSBwYXRoLl9sZW5ndGg7XG4gICAgdmFyIGNsb25lZFBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIGNsb25lZFBhdGguYyA9IHBhdGguYztcblxuICAgIGlmICghcGF0aC5jKSB7XG4gICAgICBjb3VudCAtPSAxO1xuICAgIH1cblxuICAgIGlmIChjb3VudCA9PT0gMCkgcmV0dXJuIGNsb25lZFBhdGg7XG4gICAgdmFyIGRpcmVjdGlvbiA9IC0xO1xuICAgIHZhciBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQocGF0aCwgMCk7XG4gICAgemlnWmFnQ29ybmVyKGNsb25lZFBhdGgsIHBhdGgsIDAsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbik7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIGRpcmVjdGlvbiA9IHppZ1phZ1NlZ21lbnQoY2xvbmVkUGF0aCwgc2VnbWVudCwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgLWRpcmVjdGlvbik7XG5cbiAgICAgIGlmIChpID09PSBjb3VudCAtIDEgJiYgIXBhdGguYykge1xuICAgICAgICBzZWdtZW50ID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlZ21lbnQgPSBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudChwYXRoLCAoaSArIDEpICUgY291bnQpO1xuICAgICAgfVxuXG4gICAgICB6aWdaYWdDb3JuZXIoY2xvbmVkUGF0aCwgcGF0aCwgaSArIDEsIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsb25lZFBhdGg7XG4gIH07XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFtcGxpdHVkZSA9IHRoaXMuYW1wbGl0dWRlLnY7XG4gICAgdmFyIGZyZXF1ZW5jeSA9IE1hdGgubWF4KDAsIE1hdGgucm91bmQodGhpcy5mcmVxdWVuY3kudikpO1xuICAgIHZhciBwb2ludFR5cGUgPSB0aGlzLnBvaW50c1R5cGUudjtcblxuICAgIGlmIChhbXBsaXR1ZGUgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIGFtcGxpdHVkZSwgZnJlcXVlbmN5LCBwb2ludFR5cGUpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGxpbmVhck9mZnNldChwMSwgcDIsIGFtb3VudCkge1xuICAgIHZhciBhbmdsZSA9IE1hdGguYXRhbjIocDJbMF0gLSBwMVswXSwgcDJbMV0gLSBwMVsxXSk7XG4gICAgcmV0dXJuIFtwb2xhck9mZnNldChwMSwgYW5nbGUsIGFtb3VudCksIHBvbGFyT2Zmc2V0KHAyLCBhbmdsZSwgYW1vdW50KV07XG4gIH1cblxuICBmdW5jdGlvbiBvZmZzZXRTZWdtZW50KHNlZ21lbnQsIGFtb3VudCkge1xuICAgIHZhciBwMDtcbiAgICB2YXIgcDFhO1xuICAgIHZhciBwMWI7XG4gICAgdmFyIHAyYjtcbiAgICB2YXIgcDJhO1xuICAgIHZhciBwMztcbiAgICB2YXIgZTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzBdLCBzZWdtZW50LnBvaW50c1sxXSwgYW1vdW50KTtcbiAgICBwMCA9IGVbMF07XG4gICAgcDFhID0gZVsxXTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzFdLCBzZWdtZW50LnBvaW50c1syXSwgYW1vdW50KTtcbiAgICBwMWIgPSBlWzBdO1xuICAgIHAyYiA9IGVbMV07XG4gICAgZSA9IGxpbmVhck9mZnNldChzZWdtZW50LnBvaW50c1syXSwgc2VnbWVudC5wb2ludHNbM10sIGFtb3VudCk7XG4gICAgcDJhID0gZVswXTtcbiAgICBwMyA9IGVbMV07XG4gICAgdmFyIHAxID0gbGluZUludGVyc2VjdGlvbihwMCwgcDFhLCBwMWIsIHAyYik7XG4gICAgaWYgKHAxID09PSBudWxsKSBwMSA9IHAxYTtcbiAgICB2YXIgcDIgPSBsaW5lSW50ZXJzZWN0aW9uKHAyYSwgcDMsIHAxYiwgcDJiKTtcbiAgICBpZiAocDIgPT09IG51bGwpIHAyID0gcDJhO1xuICAgIHJldHVybiBuZXcgUG9seW5vbWlhbEJlemllcihwMCwgcDEsIHAyLCBwMyk7XG4gIH1cblxuICBmdW5jdGlvbiBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBzZWcxLCBzZWcyLCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkge1xuICAgIHZhciBwMCA9IHNlZzEucG9pbnRzWzNdO1xuICAgIHZhciBwMSA9IHNlZzIucG9pbnRzWzBdOyAvLyBCZXZlbFxuXG4gICAgaWYgKGxpbmVKb2luID09PSAzKSByZXR1cm4gcDA7IC8vIENvbm5lY3RlZCwgdGhleSBkb24ndCBuZWVkIGEgam9pbnRcblxuICAgIGlmIChwb2ludEVxdWFsKHAwLCBwMSkpIHJldHVybiBwMDsgLy8gUm91bmRcblxuICAgIGlmIChsaW5lSm9pbiA9PT0gMikge1xuICAgICAgdmFyIGFuZ2xlT3V0ID0gLXNlZzEudGFuZ2VudEFuZ2xlKDEpO1xuICAgICAgdmFyIGFuZ2xlSW4gPSAtc2VnMi50YW5nZW50QW5nbGUoMCkgKyBNYXRoLlBJO1xuICAgICAgdmFyIGNlbnRlciA9IGxpbmVJbnRlcnNlY3Rpb24ocDAsIHBvbGFyT2Zmc2V0KHAwLCBhbmdsZU91dCArIE1hdGguUEkgLyAyLCAxMDApLCBwMSwgcG9sYXJPZmZzZXQocDEsIGFuZ2xlT3V0ICsgTWF0aC5QSSAvIDIsIDEwMCkpO1xuICAgICAgdmFyIHJhZGl1cyA9IGNlbnRlciA/IHBvaW50RGlzdGFuY2UoY2VudGVyLCBwMCkgOiBwb2ludERpc3RhbmNlKHAwLCBwMSkgLyAyO1xuICAgICAgdmFyIHRhbiA9IHBvbGFyT2Zmc2V0KHAwLCBhbmdsZU91dCwgMiAqIHJhZGl1cyAqIHJvdW5kQ29ybmVyKTtcbiAgICAgIG91dHB1dEJlemllci5zZXRYWUF0KHRhblswXSwgdGFuWzFdLCAnbycsIG91dHB1dEJlemllci5sZW5ndGgoKSAtIDEpO1xuICAgICAgdGFuID0gcG9sYXJPZmZzZXQocDEsIGFuZ2xlSW4sIDIgKiByYWRpdXMgKiByb3VuZENvcm5lcik7XG4gICAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQocDFbMF0sIHAxWzFdLCBwMVswXSwgcDFbMV0sIHRhblswXSwgdGFuWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgcmV0dXJuIHAxO1xuICAgIH0gLy8gTWl0ZXJcblxuXG4gICAgdmFyIHQwID0gcG9pbnRFcXVhbChwMCwgc2VnMS5wb2ludHNbMl0pID8gc2VnMS5wb2ludHNbMF0gOiBzZWcxLnBvaW50c1syXTtcbiAgICB2YXIgdDEgPSBwb2ludEVxdWFsKHAxLCBzZWcyLnBvaW50c1sxXSkgPyBzZWcyLnBvaW50c1szXSA6IHNlZzIucG9pbnRzWzFdO1xuICAgIHZhciBpbnRlcnNlY3Rpb24gPSBsaW5lSW50ZXJzZWN0aW9uKHQwLCBwMCwgcDEsIHQxKTtcblxuICAgIGlmIChpbnRlcnNlY3Rpb24gJiYgcG9pbnREaXN0YW5jZShpbnRlcnNlY3Rpb24sIHAwKSA8IG1pdGVyTGltaXQpIHtcbiAgICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChpbnRlcnNlY3Rpb25bMF0sIGludGVyc2VjdGlvblsxXSwgaW50ZXJzZWN0aW9uWzBdLCBpbnRlcnNlY3Rpb25bMV0sIGludGVyc2VjdGlvblswXSwgaW50ZXJzZWN0aW9uWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgcmV0dXJuIGludGVyc2VjdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gcDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbnRlcnNlY3Rpb24oYSwgYikge1xuICAgIHZhciBpbnRlcnNlY3QgPSBhLmludGVyc2VjdGlvbnMoYik7XG4gICAgaWYgKGludGVyc2VjdC5sZW5ndGggJiYgZmxvYXRFcXVhbChpbnRlcnNlY3RbMF1bMF0sIDEpKSBpbnRlcnNlY3Quc2hpZnQoKTtcbiAgICBpZiAoaW50ZXJzZWN0Lmxlbmd0aCkgcmV0dXJuIGludGVyc2VjdFswXTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydW5lU2VnbWVudEludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgdmFyIG91dGEgPSBhLnNsaWNlKCk7XG4gICAgdmFyIG91dGIgPSBiLnNsaWNlKCk7XG4gICAgdmFyIGludGVyc2VjdCA9IGdldEludGVyc2VjdGlvbihhW2EubGVuZ3RoIC0gMV0sIGJbMF0pO1xuXG4gICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgb3V0YVthLmxlbmd0aCAtIDFdID0gYVthLmxlbmd0aCAtIDFdLnNwbGl0KGludGVyc2VjdFswXSlbMF07XG4gICAgICBvdXRiWzBdID0gYlswXS5zcGxpdChpbnRlcnNlY3RbMV0pWzFdO1xuICAgIH1cblxuICAgIGlmIChhLmxlbmd0aCA+IDEgJiYgYi5sZW5ndGggPiAxKSB7XG4gICAgICBpbnRlcnNlY3QgPSBnZXRJbnRlcnNlY3Rpb24oYVswXSwgYltiLmxlbmd0aCAtIDFdKTtcblxuICAgICAgaWYgKGludGVyc2VjdCkge1xuICAgICAgICByZXR1cm4gW1thWzBdLnNwbGl0KGludGVyc2VjdFswXSlbMF1dLCBbYltiLmxlbmd0aCAtIDFdLnNwbGl0KGludGVyc2VjdFsxXSlbMV1dXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gW291dGEsIG91dGJdO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ1bmVJbnRlcnNlY3Rpb25zKHNlZ21lbnRzKSB7XG4gICAgdmFyIGU7XG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBlID0gcHJ1bmVTZWdtZW50SW50ZXJzZWN0aW9uKHNlZ21lbnRzW2kgLSAxXSwgc2VnbWVudHNbaV0pO1xuICAgICAgc2VnbWVudHNbaSAtIDFdID0gZVswXTtcbiAgICAgIHNlZ21lbnRzW2ldID0gZVsxXTtcbiAgICB9XG5cbiAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgZSA9IHBydW5lU2VnbWVudEludGVyc2VjdGlvbihzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSwgc2VnbWVudHNbMF0pO1xuICAgICAgc2VnbWVudHNbc2VnbWVudHMubGVuZ3RoIC0gMV0gPSBlWzBdO1xuICAgICAgc2VnbWVudHNbMF0gPSBlWzFdO1xuICAgIH1cblxuICAgIHJldHVybiBzZWdtZW50cztcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZnNldFNlZ21lbnRTcGxpdChzZWdtZW50LCBhbW91bnQpIHtcbiAgICAvKlxyXG4gICAgICBXZSBzcGxpdCBlYWNoIGJlemllciBzZWdtZW50IGludG8gc21hbGxlciBwaWVjZXMgYmFzZWRcclxuICAgICAgb24gaW5mbGVjdGlvbiBwb2ludHMsIHRoaXMgZW5zdXJlcyB0aGUgY29udHJvbCBwb2ludFxyXG4gICAgICBwb2x5Z29uIGlzIGNvbnZleC5cclxuICAgICAgICAoQSBjdWJpYyBiZXppZXIgY2FuIGhhdmUgbm9uZSwgb25lLCBvciB0d28gaW5mbGVjdGlvbiBwb2ludHMpXHJcbiAgICAqL1xuICAgIHZhciBmbGV4ID0gc2VnbWVudC5pbmZsZWN0aW9uUG9pbnRzKCk7XG4gICAgdmFyIGxlZnQ7XG4gICAgdmFyIHJpZ2h0O1xuICAgIHZhciBzcGxpdDtcbiAgICB2YXIgbWlkO1xuXG4gICAgaWYgKGZsZXgubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gW29mZnNldFNlZ21lbnQoc2VnbWVudCwgYW1vdW50KV07XG4gICAgfVxuXG4gICAgaWYgKGZsZXgubGVuZ3RoID09PSAxIHx8IGZsb2F0RXF1YWwoZmxleFsxXSwgMSkpIHtcbiAgICAgIHNwbGl0ID0gc2VnbWVudC5zcGxpdChmbGV4WzBdKTtcbiAgICAgIGxlZnQgPSBzcGxpdFswXTtcbiAgICAgIHJpZ2h0ID0gc3BsaXRbMV07XG4gICAgICByZXR1cm4gW29mZnNldFNlZ21lbnQobGVmdCwgYW1vdW50KSwgb2Zmc2V0U2VnbWVudChyaWdodCwgYW1vdW50KV07XG4gICAgfVxuXG4gICAgc3BsaXQgPSBzZWdtZW50LnNwbGl0KGZsZXhbMF0pO1xuICAgIGxlZnQgPSBzcGxpdFswXTtcbiAgICB2YXIgdCA9IChmbGV4WzFdIC0gZmxleFswXSkgLyAoMSAtIGZsZXhbMF0pO1xuICAgIHNwbGl0ID0gc3BsaXRbMV0uc3BsaXQodCk7XG4gICAgbWlkID0gc3BsaXRbMF07XG4gICAgcmlnaHQgPSBzcGxpdFsxXTtcbiAgICByZXR1cm4gW29mZnNldFNlZ21lbnQobGVmdCwgYW1vdW50KSwgb2Zmc2V0U2VnbWVudChtaWQsIGFtb3VudCksIG9mZnNldFNlZ21lbnQocmlnaHQsIGFtb3VudCldO1xuICB9XG5cbiAgZnVuY3Rpb24gT2Zmc2V0UGF0aE1vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBPZmZzZXRQYXRoTW9kaWZpZXIpO1xuXG4gIE9mZnNldFBhdGhNb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5hbW91bnQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmEsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMubWl0ZXJMaW1pdCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubWwsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMubGluZUpvaW4gPSBkYXRhLmxqO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLmFtb3VudC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICE9PSAwO1xuICB9O1xuXG4gIE9mZnNldFBhdGhNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGggPSBmdW5jdGlvbiAoaW5wdXRCZXppZXIsIGFtb3VudCwgbGluZUpvaW4sIG1pdGVyTGltaXQpIHtcbiAgICB2YXIgb3V0cHV0QmV6aWVyID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICBvdXRwdXRCZXppZXIuYyA9IGlucHV0QmV6aWVyLmM7XG4gICAgdmFyIGNvdW50ID0gaW5wdXRCZXppZXIubGVuZ3RoKCk7XG5cbiAgICBpZiAoIWlucHV0QmV6aWVyLmMpIHtcbiAgICAgIGNvdW50IC09IDE7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGo7XG4gICAgdmFyIHNlZ21lbnQ7XG4gICAgdmFyIG11bHRpU2VnbWVudHMgPSBbXTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBjb3VudDsgaSArPSAxKSB7XG4gICAgICBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnQoaW5wdXRCZXppZXIsIGkpO1xuICAgICAgbXVsdGlTZWdtZW50cy5wdXNoKG9mZnNldFNlZ21lbnRTcGxpdChzZWdtZW50LCBhbW91bnQpKTtcbiAgICB9XG5cbiAgICBpZiAoIWlucHV0QmV6aWVyLmMpIHtcbiAgICAgIGZvciAoaSA9IGNvdW50IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc2VnbWVudCA9IFBvbHlub21pYWxCZXppZXIuc2hhcGVTZWdtZW50SW52ZXJ0ZWQoaW5wdXRCZXppZXIsIGkpO1xuICAgICAgICBtdWx0aVNlZ21lbnRzLnB1c2gob2Zmc2V0U2VnbWVudFNwbGl0KHNlZ21lbnQsIGFtb3VudCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIG11bHRpU2VnbWVudHMgPSBwcnVuZUludGVyc2VjdGlvbnMobXVsdGlTZWdtZW50cyk7IC8vIEFkZCBiZXppZXIgc2VnbWVudHMgdG8gdGhlIG91dHB1dCBhbmQgYXBwbHkgbGluZSBqb2ludHNcblxuICAgIHZhciBsYXN0UG9pbnQgPSBudWxsO1xuICAgIHZhciBsYXN0U2VnID0gbnVsbDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBtdWx0aVNlZ21lbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgbXVsdGlTZWdtZW50ID0gbXVsdGlTZWdtZW50c1tpXTtcbiAgICAgIGlmIChsYXN0U2VnKSBsYXN0UG9pbnQgPSBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBsYXN0U2VnLCBtdWx0aVNlZ21lbnRbMF0sIGxpbmVKb2luLCBtaXRlckxpbWl0KTtcbiAgICAgIGxhc3RTZWcgPSBtdWx0aVNlZ21lbnRbbXVsdGlTZWdtZW50Lmxlbmd0aCAtIDFdO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgbXVsdGlTZWdtZW50Lmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIHNlZ21lbnQgPSBtdWx0aVNlZ21lbnRbal07XG5cbiAgICAgICAgaWYgKGxhc3RQb2ludCAmJiBwb2ludEVxdWFsKHNlZ21lbnQucG9pbnRzWzBdLCBsYXN0UG9pbnQpKSB7XG4gICAgICAgICAgb3V0cHV0QmV6aWVyLnNldFhZQXQoc2VnbWVudC5wb2ludHNbMV1bMF0sIHNlZ21lbnQucG9pbnRzWzFdWzFdLCAnbycsIG91dHB1dEJlemllci5sZW5ndGgoKSAtIDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChzZWdtZW50LnBvaW50c1swXVswXSwgc2VnbWVudC5wb2ludHNbMF1bMV0sIHNlZ21lbnQucG9pbnRzWzFdWzBdLCBzZWdtZW50LnBvaW50c1sxXVsxXSwgc2VnbWVudC5wb2ludHNbMF1bMF0sIHNlZ21lbnQucG9pbnRzWzBdWzFdLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgb3V0cHV0QmV6aWVyLnNldFRyaXBsZUF0KHNlZ21lbnQucG9pbnRzWzNdWzBdLCBzZWdtZW50LnBvaW50c1szXVsxXSwgc2VnbWVudC5wb2ludHNbM11bMF0sIHNlZ21lbnQucG9pbnRzWzNdWzFdLCBzZWdtZW50LnBvaW50c1syXVswXSwgc2VnbWVudC5wb2ludHNbMl1bMV0sIG91dHB1dEJlemllci5sZW5ndGgoKSk7XG4gICAgICAgIGxhc3RQb2ludCA9IHNlZ21lbnQucG9pbnRzWzNdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtdWx0aVNlZ21lbnRzLmxlbmd0aCkgam9pbkxpbmVzKG91dHB1dEJlemllciwgbGFzdFNlZywgbXVsdGlTZWdtZW50c1swXVswXSwgbGluZUpvaW4sIG1pdGVyTGltaXQpO1xuICAgIHJldHVybiBvdXRwdXRCZXppZXI7XG4gIH07XG5cbiAgT2Zmc2V0UGF0aE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgc2hhcGVQYXRocztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBhbW91bnQgPSB0aGlzLmFtb3VudC52O1xuICAgIHZhciBtaXRlckxpbWl0ID0gdGhpcy5taXRlckxpbWl0LnY7XG4gICAgdmFyIGxpbmVKb2luID0gdGhpcy5saW5lSm9pbjtcblxuICAgIGlmIChhbW91bnQgIT09IDApIHtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKCEoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmICF0aGlzLl9tZGYgJiYgIV9pc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24ucmVsZWFzZVNoYXBlcygpO1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICAgICAgICBqTGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnByb2Nlc3NQYXRoKHNoYXBlUGF0aHNbal0sIGFtb3VudCwgbGluZUpvaW4sIG1pdGVyTGltaXQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKSB7XG4gICAgdmFyIHN0eWxlcyA9IGZvbnREYXRhLmZTdHlsZSA/IGZvbnREYXRhLmZTdHlsZS5zcGxpdCgnICcpIDogW107XG4gICAgdmFyIGZXZWlnaHQgPSAnbm9ybWFsJztcbiAgICB2YXIgZlN0eWxlID0gJ25vcm1hbCc7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG4gICAgdmFyIHN0eWxlTmFtZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHN0eWxlTmFtZSA9IHN0eWxlc1tpXS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBzd2l0Y2ggKHN0eWxlTmFtZSkge1xuICAgICAgICBjYXNlICdpdGFsaWMnOlxuICAgICAgICAgIGZTdHlsZSA9ICdpdGFsaWMnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2JvbGQnOlxuICAgICAgICAgIGZXZWlnaHQgPSAnNzAwJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdibGFjayc6XG4gICAgICAgICAgZldlaWdodCA9ICc5MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICAgICAgZldlaWdodCA9ICc1MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlZ3VsYXInOlxuICAgICAgICBjYXNlICdub3JtYWwnOlxuICAgICAgICAgIGZXZWlnaHQgPSAnNDAwJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdsaWdodCc6XG4gICAgICAgIGNhc2UgJ3RoaW4nOlxuICAgICAgICAgIGZXZWlnaHQgPSAnMjAwJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzdHlsZTogZlN0eWxlLFxuICAgICAgd2VpZ2h0OiBmb250RGF0YS5mV2VpZ2h0IHx8IGZXZWlnaHRcbiAgICB9O1xuICB9XG5cbiAgdmFyIEZvbnRNYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXhXYWl0aW5nVGltZSA9IDUwMDA7XG4gICAgdmFyIGVtcHR5Q2hhciA9IHtcbiAgICAgIHc6IDAsXG4gICAgICBzaXplOiAwLFxuICAgICAgc2hhcGVzOiBbXSxcbiAgICAgIGRhdGE6IHtcbiAgICAgICAgc2hhcGVzOiBbXVxuICAgICAgfVxuICAgIH07XG4gICAgdmFyIGNvbWJpbmVkQ2hhcmFjdGVycyA9IFtdOyAvLyBIaW5kaSBjaGFyYWN0ZXJzXG5cbiAgICBjb21iaW5lZENoYXJhY3RlcnMgPSBjb21iaW5lZENoYXJhY3RlcnMuY29uY2F0KFsyMzA0LCAyMzA1LCAyMzA2LCAyMzA3LCAyMzYyLCAyMzYzLCAyMzY0LCAyMzY0LCAyMzY2LCAyMzY3LCAyMzY4LCAyMzY5LCAyMzcwLCAyMzcxLCAyMzcyLCAyMzczLCAyMzc0LCAyMzc1LCAyMzc2LCAyMzc3LCAyMzc4LCAyMzc5LCAyMzgwLCAyMzgxLCAyMzgyLCAyMzgzLCAyMzg3LCAyMzg4LCAyMzg5LCAyMzkwLCAyMzkxLCAyNDAyLCAyNDAzXSk7XG4gICAgdmFyIEJMQUNLX0ZMQUdfQ09ERV9QT0lOVCA9IDEyNzk4ODtcbiAgICB2YXIgQ0FOQ0VMX1RBR19DT0RFX1BPSU5UID0gOTE3NjMxO1xuICAgIHZhciBBX1RBR19DT0RFX1BPSU5UID0gOTE3NjAxO1xuICAgIHZhciBaX1RBR19DT0RFX1BPSU5UID0gOTE3NjI2O1xuICAgIHZhciBWQVJJQVRJT05fU0VMRUNUT1JfMTZfQ09ERV9QT0lOVCA9IDY1MDM5O1xuICAgIHZhciBaRVJPX1dJRFRIX0pPSU5FUl9DT0RFX1BPSU5UID0gODIwNTtcbiAgICB2YXIgUkVHSU9OQUxfQ0hBUkFDVEVSX0FfQ09ERV9QT0lOVCA9IDEyNzQ2MjtcbiAgICB2YXIgUkVHSU9OQUxfQ0hBUkFDVEVSX1pfQ09ERV9QT0lOVCA9IDEyNzQ4NztcbiAgICB2YXIgc3Vycm9nYXRlTW9kaWZpZXJzID0gWydkODNjZGZmYicsICdkODNjZGZmYycsICdkODNjZGZmZCcsICdkODNjZGZmZScsICdkODNjZGZmZiddO1xuXG4gICAgZnVuY3Rpb24gdHJpbUZvbnRPcHRpb25zKGZvbnQpIHtcbiAgICAgIHZhciBmYW1pbHlBcnJheSA9IGZvbnQuc3BsaXQoJywnKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGZhbWlseUFycmF5Lmxlbmd0aDtcbiAgICAgIHZhciBlbmFibGVkRmFtaWxpZXMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChmYW1pbHlBcnJheVtpXSAhPT0gJ3NhbnMtc2VyaWYnICYmIGZhbWlseUFycmF5W2ldICE9PSAnbW9ub3NwYWNlJykge1xuICAgICAgICAgIGVuYWJsZWRGYW1pbGllcy5wdXNoKGZhbWlseUFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW5hYmxlZEZhbWlsaWVzLmpvaW4oJywnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRVcE5vZGUoZm9udCwgZmFtaWx5KSB7XG4gICAgICB2YXIgcGFyZW50Tm9kZSA9IGNyZWF0ZVRhZygnc3BhbicpOyAvLyBOb2RlIGlzIGludmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycy5cblxuICAgICAgcGFyZW50Tm9kZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgdHJ1ZSk7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRGYW1pbHkgPSBmYW1pbHk7XG4gICAgICB2YXIgbm9kZSA9IGNyZWF0ZVRhZygnc3BhbicpOyAvLyBDaGFyYWN0ZXJzIHRoYXQgdmFyeSBzaWduaWZpY2FudGx5IGFtb25nIGRpZmZlcmVudCBmb250c1xuXG4gICAgICBub2RlLmlubmVyVGV4dCA9ICdnaUl0VDFXUXlAIS0vIyc7IC8vIFZpc2libGUgLSBzbyB3ZSBjYW4gbWVhc3VyZSBpdCAtIGJ1dCBub3Qgb24gdGhlIHNjcmVlblxuXG4gICAgICBwYXJlbnROb2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUubGVmdCA9ICctMTAwMDBweCc7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLnRvcCA9ICctMTAwMDBweCc7IC8vIExhcmdlIGZvbnQgc2l6ZSBtYWtlcyBldmVuIHN1YnRsZSBjaGFuZ2VzIG9idmlvdXNcblxuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250U2l6ZSA9ICczMDBweCc7IC8vIFJlc2V0IGFueSBmb250IHByb3BlcnRpZXNcblxuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250VmFyaWFudCA9ICdub3JtYWwnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250U3R5bGUgPSAnbm9ybWFsJztcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUuZm9udFdlaWdodCA9ICdub3JtYWwnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5sZXR0ZXJTcGFjaW5nID0gJzAnO1xuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGFyZW50Tm9kZSk7IC8vIFJlbWVtYmVyIHdpZHRoIHdpdGggbm8gYXBwbGllZCB3ZWIgZm9udFxuXG4gICAgICB2YXIgd2lkdGggPSBub2RlLm9mZnNldFdpZHRoO1xuICAgICAgbm9kZS5zdHlsZS5mb250RmFtaWx5ID0gdHJpbUZvbnRPcHRpb25zKGZvbnQpICsgJywgJyArIGZhbWlseTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgIHc6IHdpZHRoLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudE5vZGVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tMb2FkZWRGb250cygpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZm9udHMubGVuZ3RoO1xuICAgICAgdmFyIG5vZGU7XG4gICAgICB2YXIgdztcbiAgICAgIHZhciBsb2FkZWRDb3VudCA9IGxlbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmZvbnRzW2ldLmxvYWRlZCkge1xuICAgICAgICAgIGxvYWRlZENvdW50IC09IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5mb250c1tpXS5mT3JpZ2luID09PSAnbicgfHwgdGhpcy5mb250c1tpXS5vcmlnaW4gPT09IDApIHtcbiAgICAgICAgICB0aGlzLmZvbnRzW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbm9kZSA9IHRoaXMuZm9udHNbaV0ubW9ub0Nhc2Uubm9kZTtcbiAgICAgICAgICB3ID0gdGhpcy5mb250c1tpXS5tb25vQ2FzZS53O1xuXG4gICAgICAgICAgaWYgKG5vZGUub2Zmc2V0V2lkdGggIT09IHcpIHtcbiAgICAgICAgICAgIGxvYWRlZENvdW50IC09IDE7XG4gICAgICAgICAgICB0aGlzLmZvbnRzW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUgPSB0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLm5vZGU7XG4gICAgICAgICAgICB3ID0gdGhpcy5mb250c1tpXS5zYW5zQ2FzZS53O1xuXG4gICAgICAgICAgICBpZiAobm9kZS5vZmZzZXRXaWR0aCAhPT0gdykge1xuICAgICAgICAgICAgICBsb2FkZWRDb3VudCAtPSAxO1xuICAgICAgICAgICAgICB0aGlzLmZvbnRzW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMuZm9udHNbaV0ubG9hZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLnBhcmVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2UucGFyZW50KTtcbiAgICAgICAgICAgIHRoaXMuZm9udHNbaV0ubW9ub0Nhc2UucGFyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb250c1tpXS5tb25vQ2FzZS5wYXJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobG9hZGVkQ291bnQgIT09IDAgJiYgRGF0ZS5ub3coKSAtIHRoaXMuaW5pdFRpbWUgPCBtYXhXYWl0aW5nVGltZSkge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tMb2FkZWRGb250c0JpbmRlZCwgMjApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0VGltZW91dCh0aGlzLnNldElzTG9hZGVkQmluZGVkLCAxMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSGVscGVyKGZvbnREYXRhLCBkZWYpIHtcbiAgICAgIHZhciBlbmdpbmUgPSBkb2N1bWVudC5ib2R5ICYmIGRlZiA/ICdzdmcnIDogJ2NhbnZhcyc7XG4gICAgICB2YXIgaGVscGVyO1xuICAgICAgdmFyIGZvbnRQcm9wcyA9IGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKTtcblxuICAgICAgaWYgKGVuZ2luZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdmFyIHRIZWxwZXIgPSBjcmVhdGVOUygndGV4dCcpO1xuICAgICAgICB0SGVscGVyLnN0eWxlLmZvbnRTaXplID0gJzEwMHB4JzsgLy8gdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gZm9udERhdGEuZkZhbWlseTtcblxuICAgICAgICB0SGVscGVyLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCBmb250RGF0YS5mRmFtaWx5KTtcbiAgICAgICAgdEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLCBmb250UHJvcHMuc3R5bGUpO1xuICAgICAgICB0SGVscGVyLnNldEF0dHJpYnV0ZSgnZm9udC13ZWlnaHQnLCBmb250UHJvcHMud2VpZ2h0KTtcbiAgICAgICAgdEhlbHBlci50ZXh0Q29udGVudCA9ICcxJztcblxuICAgICAgICBpZiAoZm9udERhdGEuZkNsYXNzKSB7XG4gICAgICAgICAgdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gJ2luaGVyaXQnO1xuICAgICAgICAgIHRIZWxwZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsIGZvbnREYXRhLmZDbGFzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdEhlbHBlci5zdHlsZS5mb250RmFtaWx5ID0gZm9udERhdGEuZkZhbWlseTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlZi5hcHBlbmRDaGlsZCh0SGVscGVyKTtcbiAgICAgICAgaGVscGVyID0gdEhlbHBlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciB0Q2FudmFzSGVscGVyID0gbmV3IE9mZnNjcmVlbkNhbnZhcyg1MDAsIDUwMCkuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdENhbnZhc0hlbHBlci5mb250ID0gZm9udFByb3BzLnN0eWxlICsgJyAnICsgZm9udFByb3BzLndlaWdodCArICcgMTAwcHggJyArIGZvbnREYXRhLmZGYW1pbHk7XG4gICAgICAgIGhlbHBlciA9IHRDYW52YXNIZWxwZXI7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG1lYXN1cmUodGV4dCkge1xuICAgICAgICBpZiAoZW5naW5lID09PSAnc3ZnJykge1xuICAgICAgICAgIGhlbHBlci50ZXh0Q29udGVudCA9IHRleHQ7XG4gICAgICAgICAgcmV0dXJuIGhlbHBlci5nZXRDb21wdXRlZFRleHRMZW5ndGgoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBoZWxwZXIubWVhc3VyZVRleHQodGV4dCkud2lkdGg7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1lYXN1cmVUZXh0OiBtZWFzdXJlXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZEZvbnRzKGZvbnREYXRhLCBkZWZzKSB7XG4gICAgICBpZiAoIWZvbnREYXRhKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmNoYXJzKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmZvbnRzID0gZm9udERhdGEubGlzdDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRvY3VtZW50LmJvZHkpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIGZvbnREYXRhLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIGRhdGEuaGVscGVyID0gY3JlYXRlSGVscGVyKGRhdGEpO1xuICAgICAgICAgIGRhdGEuY2FjaGUgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZm9udHMgPSBmb250RGF0YS5saXN0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBmb250QXJyID0gZm9udERhdGEubGlzdDtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGZvbnRBcnIubGVuZ3RoO1xuICAgICAgdmFyIF9wZW5kaW5nRm9udHMgPSBsZW47XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB2YXIgc2hvdWxkTG9hZEZvbnQgPSB0cnVlO1xuICAgICAgICB2YXIgbG9hZGVkU2VsZWN0b3I7XG4gICAgICAgIHZhciBqO1xuICAgICAgICBmb250QXJyW2ldLmxvYWRlZCA9IGZhbHNlO1xuICAgICAgICBmb250QXJyW2ldLm1vbm9DYXNlID0gc2V0VXBOb2RlKGZvbnRBcnJbaV0uZkZhbWlseSwgJ21vbm9zcGFjZScpO1xuICAgICAgICBmb250QXJyW2ldLnNhbnNDYXNlID0gc2V0VXBOb2RlKGZvbnRBcnJbaV0uZkZhbWlseSwgJ3NhbnMtc2VyaWYnKTtcblxuICAgICAgICBpZiAoIWZvbnRBcnJbaV0uZlBhdGgpIHtcbiAgICAgICAgICBmb250QXJyW2ldLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgX3BlbmRpbmdGb250cyAtPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKGZvbnRBcnJbaV0uZk9yaWdpbiA9PT0gJ3AnIHx8IGZvbnRBcnJbaV0ub3JpZ2luID09PSAzKSB7XG4gICAgICAgICAgbG9hZGVkU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZVtmLWZvcmlnaW49XCJwXCJdW2YtZmFtaWx5PVwiJyArIGZvbnRBcnJbaV0uZkZhbWlseSArICdcIl0sIHN0eWxlW2Ytb3JpZ2luPVwiM1wiXVtmLWZhbWlseT1cIicgKyBmb250QXJyW2ldLmZGYW1pbHkgKyAnXCJdJyk7XG5cbiAgICAgICAgICBpZiAobG9hZGVkU2VsZWN0b3IubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgc2hvdWxkTG9hZEZvbnQgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hvdWxkTG9hZEZvbnQpIHtcbiAgICAgICAgICAgIHZhciBzID0gY3JlYXRlVGFnKCdzdHlsZScpO1xuICAgICAgICAgICAgcy5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsIGZvbnRBcnJbaV0uZk9yaWdpbik7XG4gICAgICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZi1vcmlnaW4nLCBmb250QXJyW2ldLm9yaWdpbik7XG4gICAgICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZi1mYW1pbHknLCBmb250QXJyW2ldLmZGYW1pbHkpO1xuICAgICAgICAgICAgcy50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgIHMuaW5uZXJUZXh0ID0gJ0Bmb250LWZhY2Uge2ZvbnQtZmFtaWx5OiAnICsgZm9udEFycltpXS5mRmFtaWx5ICsgXCI7IGZvbnQtc3R5bGU6IG5vcm1hbDsgc3JjOiB1cmwoJ1wiICsgZm9udEFycltpXS5mUGF0aCArIFwiJyk7fVwiO1xuICAgICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udEFycltpXS5mT3JpZ2luID09PSAnZycgfHwgZm9udEFycltpXS5vcmlnaW4gPT09IDEpIHtcbiAgICAgICAgICBsb2FkZWRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2xpbmtbZi1mb3JpZ2luPVwiZ1wiXSwgbGlua1tmLW9yaWdpbj1cIjFcIl0nKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsb2FkZWRTZWxlY3Rvci5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgaWYgKGxvYWRlZFNlbGVjdG9yW2pdLmhyZWYuaW5kZXhPZihmb250QXJyW2ldLmZQYXRoKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgLy8gRm9udCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgICBzaG91bGRMb2FkRm9udCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRMb2FkRm9udCkge1xuICAgICAgICAgICAgdmFyIGwgPSBjcmVhdGVUYWcoJ2xpbmsnKTtcbiAgICAgICAgICAgIGwuc2V0QXR0cmlidXRlKCdmLWZvcmlnaW4nLCBmb250QXJyW2ldLmZPcmlnaW4pO1xuICAgICAgICAgICAgbC5zZXRBdHRyaWJ1dGUoJ2Ytb3JpZ2luJywgZm9udEFycltpXS5vcmlnaW4pO1xuICAgICAgICAgICAgbC50eXBlID0gJ3RleHQvY3NzJztcbiAgICAgICAgICAgIGwucmVsID0gJ3N0eWxlc2hlZXQnO1xuICAgICAgICAgICAgbC5ocmVmID0gZm9udEFycltpXS5mUGF0aDtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZvbnRBcnJbaV0uZk9yaWdpbiA9PT0gJ3QnIHx8IGZvbnRBcnJbaV0ub3JpZ2luID09PSAyKSB7XG4gICAgICAgICAgbG9hZGVkU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzY3JpcHRbZi1mb3JpZ2luPVwidFwiXSwgc2NyaXB0W2Ytb3JpZ2luPVwiMlwiXScpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxvYWRlZFNlbGVjdG9yLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBpZiAoZm9udEFycltpXS5mUGF0aCA9PT0gbG9hZGVkU2VsZWN0b3Jbal0uc3JjKSB7XG4gICAgICAgICAgICAgIC8vIEZvbnQgaXMgYWxyZWFkeSBsb2FkZWRcbiAgICAgICAgICAgICAgc2hvdWxkTG9hZEZvbnQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hvdWxkTG9hZEZvbnQpIHtcbiAgICAgICAgICAgIHZhciBzYyA9IGNyZWF0ZVRhZygnbGluaycpO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdmLWZvcmlnaW4nLCBmb250QXJyW2ldLmZPcmlnaW4pO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdmLW9yaWdpbicsIGZvbnRBcnJbaV0ub3JpZ2luKTtcbiAgICAgICAgICAgIHNjLnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKTtcbiAgICAgICAgICAgIHNjLnNldEF0dHJpYnV0ZSgnaHJlZicsIGZvbnRBcnJbaV0uZlBhdGgpO1xuICAgICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChzYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9udEFycltpXS5oZWxwZXIgPSBjcmVhdGVIZWxwZXIoZm9udEFycltpXSwgZGVmcyk7XG4gICAgICAgIGZvbnRBcnJbaV0uY2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5mb250cy5wdXNoKGZvbnRBcnJbaV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoX3BlbmRpbmdGb250cyA9PT0gMCkge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9uIHNvbWUgY2FzZXMgZXZlbiBpZiB0aGUgZm9udCBpcyBsb2FkZWQsIGl0IHdvbid0IGxvYWQgY29ycmVjdGx5IHdoZW4gbWVhc3VyaW5nIHRleHQgb24gY2FudmFzLlxuICAgICAgICAvLyBBZGRpbmcgdGhpcyB0aW1lb3V0IHNlZW1zIHRvIGZpeCBpdFxuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuY2hlY2tMb2FkZWRGb250cy5iaW5kKHRoaXMpLCAxMDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZENoYXJzKGNoYXJzKSB7XG4gICAgICBpZiAoIWNoYXJzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmNoYXJzKSB7XG4gICAgICAgIHRoaXMuY2hhcnMgPSBbXTtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gY2hhcnMubGVuZ3RoO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbiA9IHRoaXMuY2hhcnMubGVuZ3RoO1xuICAgICAgdmFyIGZvdW5kO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaiA9IDA7XG4gICAgICAgIGZvdW5kID0gZmFsc2U7XG5cbiAgICAgICAgd2hpbGUgKGogPCBqTGVuKSB7XG4gICAgICAgICAgaWYgKHRoaXMuY2hhcnNbal0uc3R5bGUgPT09IGNoYXJzW2ldLnN0eWxlICYmIHRoaXMuY2hhcnNbal0uZkZhbWlseSA9PT0gY2hhcnNbaV0uZkZhbWlseSAmJiB0aGlzLmNoYXJzW2pdLmNoID09PSBjaGFyc1tpXS5jaCkge1xuICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGogKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZm91bmQpIHtcbiAgICAgICAgICB0aGlzLmNoYXJzLnB1c2goY2hhcnNbaV0pO1xuICAgICAgICAgIGpMZW4gKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENoYXJEYXRhKF9jaGFyLCBzdHlsZSwgZm9udCkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuY2hhcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAodGhpcy5jaGFyc1tpXS5jaCA9PT0gX2NoYXIgJiYgdGhpcy5jaGFyc1tpXS5zdHlsZSA9PT0gc3R5bGUgJiYgdGhpcy5jaGFyc1tpXS5mRmFtaWx5ID09PSBmb250KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuY2hhcnNbaV07XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICgodHlwZW9mIF9jaGFyID09PSAnc3RyaW5nJyAmJiBfY2hhci5jaGFyQ29kZUF0KDApICE9PSAxMyB8fCAhX2NoYXIpICYmIGNvbnNvbGUgJiYgY29uc29sZS53YXJuIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgJiYgIXRoaXMuX3dhcm5lZCkge1xuICAgICAgICB0aGlzLl93YXJuZWQgPSB0cnVlO1xuICAgICAgICBjb25zb2xlLndhcm4oJ01pc3NpbmcgY2hhcmFjdGVyIGZyb20gZXhwb3J0ZWQgY2hhcmFjdGVycyBsaXN0OiAnLCBfY2hhciwgc3R5bGUsIGZvbnQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVtcHR5Q2hhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtZWFzdXJlVGV4dChfY2hhcjIsIGZvbnROYW1lLCBzaXplKSB7XG4gICAgICB2YXIgZm9udERhdGEgPSB0aGlzLmdldEZvbnRCeU5hbWUoZm9udE5hbWUpOyAvLyBVc2luZyB0aGUgY2hhciBpbnN0ZWFkIG9mIGNoYXIuY2hhckNvZGVBdCgwKVxuICAgICAgLy8gdG8gYXZvaWQgY29sbGlzaW9ucyBiZXR3ZWVuIGVxdWFsIGNoYXJzXG5cbiAgICAgIHZhciBpbmRleCA9IF9jaGFyMjtcblxuICAgICAgaWYgKCFmb250RGF0YS5jYWNoZVtpbmRleF0pIHtcbiAgICAgICAgdmFyIHRIZWxwZXIgPSBmb250RGF0YS5oZWxwZXI7XG5cbiAgICAgICAgaWYgKF9jaGFyMiA9PT0gJyAnKSB7XG4gICAgICAgICAgdmFyIGRvdWJsZVNpemUgPSB0SGVscGVyLm1lYXN1cmVUZXh0KCd8JyArIF9jaGFyMiArICd8Jyk7XG4gICAgICAgICAgdmFyIHNpbmdsZVNpemUgPSB0SGVscGVyLm1lYXN1cmVUZXh0KCd8fCcpO1xuICAgICAgICAgIGZvbnREYXRhLmNhY2hlW2luZGV4XSA9IChkb3VibGVTaXplIC0gc2luZ2xlU2l6ZSkgLyAxMDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9udERhdGEuY2FjaGVbaW5kZXhdID0gdEhlbHBlci5tZWFzdXJlVGV4dChfY2hhcjIpIC8gMTAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb250RGF0YS5jYWNoZVtpbmRleF0gKiBzaXplO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEZvbnRCeU5hbWUobmFtZSkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZm9udHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAodGhpcy5mb250c1tpXS5mTmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmZvbnRzW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5mb250c1swXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb2RlUG9pbnQoc3RyaW5nKSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gMDtcbiAgICAgIHZhciBmaXJzdCA9IHN0cmluZy5jaGFyQ29kZUF0KDApO1xuXG4gICAgICBpZiAoZmlyc3QgPj0gMHhEODAwICYmIGZpcnN0IDw9IDB4REJGRikge1xuICAgICAgICB2YXIgc2Vjb25kID0gc3RyaW5nLmNoYXJDb2RlQXQoMSk7XG5cbiAgICAgICAgaWYgKHNlY29uZCA+PSAweERDMDAgJiYgc2Vjb25kIDw9IDB4REZGRikge1xuICAgICAgICAgIGNvZGVQb2ludCA9IChmaXJzdCAtIDB4RDgwMCkgKiAweDQwMCArIHNlY29uZCAtIDB4REMwMCArIDB4MTAwMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvZGVQb2ludDtcbiAgICB9IC8vIFNraW4gdG9uZSBtb2RpZmllcnNcblxuXG4gICAgZnVuY3Rpb24gaXNNb2RpZmllcihmaXJzdENoYXJDb2RlLCBzZWNvbmRDaGFyQ29kZSkge1xuICAgICAgdmFyIHN1bSA9IGZpcnN0Q2hhckNvZGUudG9TdHJpbmcoMTYpICsgc2Vjb25kQ2hhckNvZGUudG9TdHJpbmcoMTYpO1xuICAgICAgcmV0dXJuIHN1cnJvZ2F0ZU1vZGlmaWVycy5pbmRleE9mKHN1bSkgIT09IC0xO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzWmVyb1dpZHRoSm9pbmVyKGNoYXJDb2RlKSB7XG4gICAgICByZXR1cm4gY2hhckNvZGUgPT09IFpFUk9fV0lEVEhfSk9JTkVSX0NPREVfUE9JTlQ7XG4gICAgfSAvLyBUaGlzIGNvZGVwb2ludCBtYXkgY2hhbmdlIHRoZSBhcHBlYXJhbmNlIG9mIHRoZSBwcmVjZWRpbmcgY2hhcmFjdGVyLlxuICAgIC8vIElmIHRoYXQgaXMgYSBzeW1ib2wsIGRpbmdiYXQgb3IgZW1vamksIFUrRkUwRiBmb3JjZXMgaXQgdG8gYmUgcmVuZGVyZWRcbiAgICAvLyBhcyBhIGNvbG9yZnVsIGltYWdlIGFzIGNvbXBhcmVkIHRvIGEgbW9ub2Nocm9tZSB0ZXh0IHZhcmlhbnQuXG5cblxuICAgIGZ1bmN0aW9uIGlzVmFyaWF0aW9uU2VsZWN0b3IoY2hhckNvZGUpIHtcbiAgICAgIHJldHVybiBjaGFyQ29kZSA9PT0gVkFSSUFUSU9OX1NFTEVDVE9SXzE2X0NPREVfUE9JTlQ7XG4gICAgfSAvLyBUaGUgcmVnaW9uYWwgaW5kaWNhdG9yIHN5bWJvbHMgYXJlIGEgc2V0IG9mIDI2IGFscGhhYmV0aWMgVW5pY29kZVxuICAgIC8vLyBjaGFyYWN0ZXJzIChB4oCTWikgaW50ZW5kZWQgdG8gYmUgdXNlZCB0byBlbmNvZGUgSVNPIDMxNjYtMSBhbHBoYS0yXG4gICAgLy8gdHdvLWxldHRlciBjb3VudHJ5IGNvZGVzIGluIGEgd2F5IHRoYXQgYWxsb3dzIG9wdGlvbmFsIHNwZWNpYWwgdHJlYXRtZW50LlxuXG5cbiAgICBmdW5jdGlvbiBpc1JlZ2lvbmFsQ29kZShzdHJpbmcpIHtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSBnZXRDb2RlUG9pbnQoc3RyaW5nKTtcblxuICAgICAgaWYgKGNvZGVQb2ludCA+PSBSRUdJT05BTF9DSEFSQUNURVJfQV9DT0RFX1BPSU5UICYmIGNvZGVQb2ludCA8PSBSRUdJT05BTF9DSEFSQUNURVJfWl9DT0RFX1BPSU5UKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBTb21lIEVtb2ppIGltcGxlbWVudGF0aW9ucyByZXByZXNlbnQgY29tYmluYXRpb25zIG9mXG4gICAgLy8gdHdvIOKAnHJlZ2lvbmFsIGluZGljYXRvcuKAnSBsZXR0ZXJzIGFzIGEgc2luZ2xlIGZsYWcgc3ltYm9sLlxuXG5cbiAgICBmdW5jdGlvbiBpc0ZsYWdFbW9qaShzdHJpbmcpIHtcbiAgICAgIHJldHVybiBpc1JlZ2lvbmFsQ29kZShzdHJpbmcuc3Vic3RyKDAsIDIpKSAmJiBpc1JlZ2lvbmFsQ29kZShzdHJpbmcuc3Vic3RyKDIsIDIpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0NvbWJpbmVkQ2hhcmFjdGVyKF9jaGFyMykge1xuICAgICAgcmV0dXJuIGNvbWJpbmVkQ2hhcmFjdGVycy5pbmRleE9mKF9jaGFyMykgIT09IC0xO1xuICAgIH0gLy8gUmVnaW9uYWwgZmxhZ3Mgc3RhcnQgd2l0aCBhIEJMQUNLX0ZMQUdfQ09ERV9QT0lOVFxuICAgIC8vIGZvbG93ZWQgYnkgNSBjaGFycyBpbiB0aGUgVEFHIHJhbmdlXG4gICAgLy8gYW5kIGVuZCB3aXRoIGEgQ0FOQ0VMX1RBR19DT0RFX1BPSU5UXG5cblxuICAgIGZ1bmN0aW9uIGlzUmVnaW9uYWxGbGFnKHRleHQsIGluZGV4KSB7XG4gICAgICB2YXIgY29kZVBvaW50ID0gZ2V0Q29kZVBvaW50KHRleHQuc3Vic3RyKGluZGV4LCAyKSk7XG5cbiAgICAgIGlmIChjb2RlUG9pbnQgIT09IEJMQUNLX0ZMQUdfQ09ERV9QT0lOVCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb3VudCA9IDA7XG4gICAgICBpbmRleCArPSAyO1xuXG4gICAgICB3aGlsZSAoY291bnQgPCA1KSB7XG4gICAgICAgIGNvZGVQb2ludCA9IGdldENvZGVQb2ludCh0ZXh0LnN1YnN0cihpbmRleCwgMikpO1xuXG4gICAgICAgIGlmIChjb2RlUG9pbnQgPCBBX1RBR19DT0RFX1BPSU5UIHx8IGNvZGVQb2ludCA+IFpfVEFHX0NPREVfUE9JTlQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICBpbmRleCArPSAyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZ2V0Q29kZVBvaW50KHRleHQuc3Vic3RyKGluZGV4LCAyKSkgPT09IENBTkNFTF9UQUdfQ09ERV9QT0lOVDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRJc0xvYWRlZCgpIHtcbiAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBGb250ID0gZnVuY3Rpb24gRm9udCgpIHtcbiAgICAgIHRoaXMuZm9udHMgPSBbXTtcbiAgICAgIHRoaXMuY2hhcnMgPSBudWxsO1xuICAgICAgdGhpcy50eXBla2l0TG9hZGVkID0gMDtcbiAgICAgIHRoaXMuaXNMb2FkZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuX3dhcm5lZCA9IGZhbHNlO1xuICAgICAgdGhpcy5pbml0VGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLnNldElzTG9hZGVkQmluZGVkID0gdGhpcy5zZXRJc0xvYWRlZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5jaGVja0xvYWRlZEZvbnRzQmluZGVkID0gdGhpcy5jaGVja0xvYWRlZEZvbnRzLmJpbmQodGhpcyk7XG4gICAgfTtcblxuICAgIEZvbnQuaXNNb2RpZmllciA9IGlzTW9kaWZpZXI7XG4gICAgRm9udC5pc1plcm9XaWR0aEpvaW5lciA9IGlzWmVyb1dpZHRoSm9pbmVyO1xuICAgIEZvbnQuaXNGbGFnRW1vamkgPSBpc0ZsYWdFbW9qaTtcbiAgICBGb250LmlzUmVnaW9uYWxDb2RlID0gaXNSZWdpb25hbENvZGU7XG4gICAgRm9udC5pc0NvbWJpbmVkQ2hhcmFjdGVyID0gaXNDb21iaW5lZENoYXJhY3RlcjtcbiAgICBGb250LmlzUmVnaW9uYWxGbGFnID0gaXNSZWdpb25hbEZsYWc7XG4gICAgRm9udC5pc1ZhcmlhdGlvblNlbGVjdG9yID0gaXNWYXJpYXRpb25TZWxlY3RvcjtcbiAgICBGb250LkJMQUNLX0ZMQUdfQ09ERV9QT0lOVCA9IEJMQUNLX0ZMQUdfQ09ERV9QT0lOVDtcbiAgICB2YXIgZm9udFByb3RvdHlwZSA9IHtcbiAgICAgIGFkZENoYXJzOiBhZGRDaGFycyxcbiAgICAgIGFkZEZvbnRzOiBhZGRGb250cyxcbiAgICAgIGdldENoYXJEYXRhOiBnZXRDaGFyRGF0YSxcbiAgICAgIGdldEZvbnRCeU5hbWU6IGdldEZvbnRCeU5hbWUsXG4gICAgICBtZWFzdXJlVGV4dDogbWVhc3VyZVRleHQsXG4gICAgICBjaGVja0xvYWRlZEZvbnRzOiBjaGVja0xvYWRlZEZvbnRzLFxuICAgICAgc2V0SXNMb2FkZWQ6IHNldElzTG9hZGVkXG4gICAgfTtcbiAgICBGb250LnByb3RvdHlwZSA9IGZvbnRQcm90b3R5cGU7XG4gICAgcmV0dXJuIEZvbnQ7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTbG90TWFuYWdlcihhbmltYXRpb25EYXRhKSB7XG4gICAgdGhpcy5hbmltYXRpb25EYXRhID0gYW5pbWF0aW9uRGF0YTtcbiAgfVxuXG4gIFNsb3RNYW5hZ2VyLnByb3RvdHlwZS5nZXRQcm9wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25EYXRhLnNsb3RzICYmIHRoaXMuYW5pbWF0aW9uRGF0YS5zbG90c1tkYXRhLnNpZF0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRhdGEsIHRoaXMuYW5pbWF0aW9uRGF0YS5zbG90c1tkYXRhLnNpZF0ucCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgZnVuY3Rpb24gc2xvdEZhY3RvcnkoYW5pbWF0aW9uRGF0YSkge1xuICAgIHJldHVybiBuZXcgU2xvdE1hbmFnZXIoYW5pbWF0aW9uRGF0YSk7XG4gIH1cblxuICBmdW5jdGlvbiBSZW5kZXJhYmxlRWxlbWVudCgpIHt9XG5cbiAgUmVuZGVyYWJsZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGluaXRSZW5kZXJhYmxlOiBmdW5jdGlvbiBpbml0UmVuZGVyYWJsZSgpIHtcbiAgICAgIC8vIGxheWVyJ3MgdmlzaWJpbGl0eSByZWxhdGVkIHRvIGlucG9pbnQgYW5kIG91dHBvaW50LiBSZW5hbWUgaXNWaXNpYmxlIHRvIGlzSW5SYW5nZVxuICAgICAgdGhpcy5pc0luUmFuZ2UgPSBmYWxzZTsgLy8gbGF5ZXIncyBkaXNwbGF5IHN0YXRlXG5cbiAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7IC8vIElmIGxheWVyJ3MgdHJhbnNwYXJlbmN5IGVxdWFscyAwLCBpdCBjYW4gYmUgaGlkZGVuXG5cbiAgICAgIHRoaXMuaXNUcmFuc3BhcmVudCA9IGZhbHNlOyAvLyBsaXN0IG9mIGFuaW1hdGVkIGNvbXBvbmVudHNcblxuICAgICAgdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cyA9IFtdO1xuICAgIH0sXG4gICAgYWRkUmVuZGVyYWJsZUNvbXBvbmVudDogZnVuY3Rpb24gYWRkUmVuZGVyYWJsZUNvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW1vdmVSZW5kZXJhYmxlQ29tcG9uZW50OiBmdW5jdGlvbiByZW1vdmVSZW5kZXJhYmxlQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpICE9PSAtMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLnNwbGljZSh0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLmluZGV4T2YoY29tcG9uZW50KSwgMSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBwcmVwYXJlUmVuZGVyYWJsZUZyYW1lOiBmdW5jdGlvbiBwcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSkge1xuICAgICAgdGhpcy5jaGVja0xheWVyTGltaXRzKG51bSk7XG4gICAgfSxcbiAgICBjaGVja1RyYW5zcGFyZW5jeTogZnVuY3Rpb24gY2hlY2tUcmFuc3BhcmVuY3koKSB7XG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnYgPD0gMCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNUcmFuc3BhcmVudCAmJiB0aGlzLmdsb2JhbERhdGEucmVuZGVyQ29uZmlnLmhpZGVPblRyYW5zcGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5pc1RyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5pc1RyYW5zcGFyZW50ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuc2hvdygpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqIEluaXRpYWxpemVzIGZyYW1lIHJlbGF0ZWQgcHJvcGVydGllcy5cclxuICAgICAgICpcclxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG51bVxyXG4gICAgICAgKiBjdXJyZW50IGZyYW1lIG51bWJlciBpbiBMYXllcidzIHRpbWVcclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgY2hlY2tMYXllckxpbWl0czogZnVuY3Rpb24gY2hlY2tMYXllckxpbWl0cyhudW0pIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuaXAgLSB0aGlzLmRhdGEuc3QgPD0gbnVtICYmIHRoaXMuZGF0YS5vcCAtIHRoaXMuZGF0YS5zdCA+IG51bSkge1xuICAgICAgICBpZiAodGhpcy5pc0luUmFuZ2UgIT09IHRydWUpIHtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuX21kZiA9IHRydWU7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmlzSW5SYW5nZSA9IHRydWU7XG4gICAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0luUmFuZ2UgIT09IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc0luUmFuZ2UgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJSZW5kZXJhYmxlOiBmdW5jdGlvbiByZW5kZXJSZW5kZXJhYmxlKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzW2ldLnJlbmRlckZyYW1lKHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgICAvKiB0aGlzLm1hc2tNYW5hZ2VyLnJlbmRlckZyYW1lKHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0KTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyLnJlbmRlckZyYW1lKHRoaXMuX2lzRmlyc3RGcmFtZSk7ICovXG5cbiAgICB9LFxuICAgIHNvdXJjZVJlY3RBdFRpbWU6IGZ1bmN0aW9uIHNvdXJjZVJlY3RBdFRpbWUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHdpZHRoOiAxMDAsXG4gICAgICAgIGhlaWdodDogMTAwXG4gICAgICB9O1xuICAgIH0sXG4gICAgZ2V0TGF5ZXJTaXplOiBmdW5jdGlvbiBnZXRMYXllclNpemUoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnR5ID09PSA1KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdzogdGhpcy5kYXRhLnRleHREYXRhLndpZHRoLFxuICAgICAgICAgIGg6IHRoaXMuZGF0YS50ZXh0RGF0YS5oZWlnaHRcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdzogdGhpcy5kYXRhLndpZHRoLFxuICAgICAgICBoOiB0aGlzLmRhdGEuaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2YXIgZ2V0QmxlbmRNb2RlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBibGVuZE1vZGVFbnVtcyA9IHtcbiAgICAgIDA6ICdzb3VyY2Utb3ZlcicsXG4gICAgICAxOiAnbXVsdGlwbHknLFxuICAgICAgMjogJ3NjcmVlbicsXG4gICAgICAzOiAnb3ZlcmxheScsXG4gICAgICA0OiAnZGFya2VuJyxcbiAgICAgIDU6ICdsaWdodGVuJyxcbiAgICAgIDY6ICdjb2xvci1kb2RnZScsXG4gICAgICA3OiAnY29sb3ItYnVybicsXG4gICAgICA4OiAnaGFyZC1saWdodCcsXG4gICAgICA5OiAnc29mdC1saWdodCcsXG4gICAgICAxMDogJ2RpZmZlcmVuY2UnLFxuICAgICAgMTE6ICdleGNsdXNpb24nLFxuICAgICAgMTI6ICdodWUnLFxuICAgICAgMTM6ICdzYXR1cmF0aW9uJyxcbiAgICAgIDE0OiAnY29sb3InLFxuICAgICAgMTU6ICdsdW1pbm9zaXR5J1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChtb2RlKSB7XG4gICAgICByZXR1cm4gYmxlbmRNb2RlRW51bXNbbW9kZV0gfHwgJyc7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNsaWRlckVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBBbmdsZUVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBDb2xvckVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDEsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBQb2ludEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDEsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBMYXllckluZGV4RWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMCwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE1hc2tJbmRleEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBDaGVja2JveEVmZmVjdChkYXRhLCBlbGVtLCBjb250YWluZXIpIHtcbiAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnYsIDAsIDAsIGNvbnRhaW5lcik7XG4gIH1cblxuICBmdW5jdGlvbiBOb1ZhbHVlRWZmZWN0KCkge1xuICAgIHRoaXMucCA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gRWZmZWN0c01hbmFnZXIoZGF0YSwgZWxlbWVudCkge1xuICAgIHZhciBlZmZlY3RzID0gZGF0YS5lZiB8fCBbXTtcbiAgICB0aGlzLmVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVmZmVjdHMubGVuZ3RoO1xuICAgIHZhciBlZmZlY3RJdGVtO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBlZmZlY3RJdGVtID0gbmV3IEdyb3VwRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQpO1xuICAgICAgdGhpcy5lZmZlY3RFbGVtZW50cy5wdXNoKGVmZmVjdEl0ZW0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIEdyb3VwRWZmZWN0KGRhdGEsIGVsZW1lbnQpIHtcbiAgICB0aGlzLmluaXQoZGF0YSwgZWxlbWVudCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIEdyb3VwRWZmZWN0KTtcbiAgR3JvdXBFZmZlY3QucHJvdG90eXBlLmdldFZhbHVlID0gR3JvdXBFZmZlY3QucHJvdG90eXBlLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcztcblxuICBHcm91cEVmZmVjdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChkYXRhLCBlbGVtZW50KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW1lbnQpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmRhdGEuZWYubGVuZ3RoO1xuICAgIHZhciBlZmY7XG4gICAgdmFyIGVmZmVjdHMgPSB0aGlzLmRhdGEuZWY7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGVmZiA9IG51bGw7XG5cbiAgICAgIHN3aXRjaCAoZWZmZWN0c1tpXS50eSkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgZWZmID0gbmV3IFNsaWRlckVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgZWZmID0gbmV3IEFuZ2xlRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBlZmYgPSBuZXcgQ29sb3JFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIGVmZiA9IG5ldyBQb2ludEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQ6XG4gICAgICAgIGNhc2UgNzpcbiAgICAgICAgICBlZmYgPSBuZXcgQ2hlY2tib3hFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICBlZmYgPSBuZXcgTGF5ZXJJbmRleEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDExOlxuICAgICAgICAgIGVmZiA9IG5ldyBNYXNrSW5kZXhFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIGVmZiA9IG5ldyBFZmZlY3RzTWFuYWdlcihlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgLy8gY2FzZSA2OlxuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZWZmID0gbmV3IE5vVmFsdWVFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChlZmYpIHtcbiAgICAgICAgdGhpcy5lZmZlY3RFbGVtZW50cy5wdXNoKGVmZik7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEJhc2VFbGVtZW50KCkge31cblxuICBCYXNlRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgY2hlY2tNYXNrczogZnVuY3Rpb24gY2hlY2tNYXNrcygpIHtcbiAgICAgIGlmICghdGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJyAmJiB0aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzW2ldLmNsICE9PSBmYWxzZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBpbml0RXhwcmVzc2lvbnM6IGZ1bmN0aW9uIGluaXRFeHByZXNzaW9ucygpIHtcbiAgICAgIHZhciBleHByZXNzaW9uc0ludGVyZmFjZXMgPSBnZXRFeHByZXNzaW9uSW50ZXJmYWNlcygpO1xuXG4gICAgICBpZiAoIWV4cHJlc3Npb25zSW50ZXJmYWNlcykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2xheWVyJyk7XG4gICAgICB2YXIgRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2VmZmVjdHMnKTtcbiAgICAgIHZhciBTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ3NoYXBlJyk7XG4gICAgICB2YXIgVGV4dEV4cHJlc3Npb25JbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ3RleHQnKTtcbiAgICAgIHZhciBDb21wRXhwcmVzc2lvbkludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygnY29tcCcpO1xuICAgICAgdGhpcy5sYXllckludGVyZmFjZSA9IExheWVyRXhwcmVzc2lvbkludGVyZmFjZSh0aGlzKTtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrICYmIHRoaXMubWFza01hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS5yZWdpc3Rlck1hc2tJbnRlcmZhY2UodGhpcy5tYXNrTWFuYWdlcik7XG4gICAgICB9XG5cbiAgICAgIHZhciBlZmZlY3RzSW50ZXJmYWNlID0gRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UuY3JlYXRlRWZmZWN0c0ludGVyZmFjZSh0aGlzLCB0aGlzLmxheWVySW50ZXJmYWNlKTtcbiAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UucmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlKGVmZmVjdHNJbnRlcmZhY2UpO1xuXG4gICAgICBpZiAodGhpcy5kYXRhLnR5ID09PSAwIHx8IHRoaXMuZGF0YS54dCkge1xuICAgICAgICB0aGlzLmNvbXBJbnRlcmZhY2UgPSBDb21wRXhwcmVzc2lvbkludGVyZmFjZSh0aGlzKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnR5ID09PSA0KSB7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2Uuc2hhcGVJbnRlcmZhY2UgPSBTaGFwZUV4cHJlc3Npb25JbnRlcmZhY2UodGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5sYXllckludGVyZmFjZSk7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UuY29udGVudCA9IHRoaXMubGF5ZXJJbnRlcmZhY2Uuc2hhcGVJbnRlcmZhY2U7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS50eSA9PT0gNSkge1xuICAgICAgICB0aGlzLmxheWVySW50ZXJmYWNlLnRleHRJbnRlcmZhY2UgPSBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSh0aGlzKTtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS50ZXh0ID0gdGhpcy5sYXllckludGVyZmFjZS50ZXh0SW50ZXJmYWNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0QmxlbmRNb2RlOiBmdW5jdGlvbiBzZXRCbGVuZE1vZGUoKSB7XG4gICAgICB2YXIgYmxlbmRNb2RlVmFsdWUgPSBnZXRCbGVuZE1vZGUodGhpcy5kYXRhLmJtKTtcbiAgICAgIHZhciBlbGVtID0gdGhpcy5iYXNlRWxlbWVudCB8fCB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgIGVsZW0uc3R5bGVbJ21peC1ibGVuZC1tb2RlJ10gPSBibGVuZE1vZGVWYWx1ZTtcbiAgICB9LFxuICAgIGluaXRCYXNlRGF0YTogZnVuY3Rpb24gaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YSA9IGdsb2JhbERhdGE7XG4gICAgICB0aGlzLmNvbXAgPSBjb21wO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMubGF5ZXJJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpOyAvLyBTdHJldGNoIGZhY3RvciBmb3Igb2xkIGFuaW1hdGlvbnMgbWlzc2luZyB0aGlzIHByb3BlcnR5LlxuXG4gICAgICBpZiAoIXRoaXMuZGF0YS5zcikge1xuICAgICAgICB0aGlzLmRhdGEuc3IgPSAxO1xuICAgICAgfSAvLyBlZmZlY3RzIG1hbmFnZXJcblxuXG4gICAgICB0aGlzLmVmZmVjdHNNYW5hZ2VyID0gbmV3IEVmZmVjdHNNYW5hZ2VyKHRoaXMuZGF0YSwgdGhpcywgdGhpcy5keW5hbWljUHJvcGVydGllcyk7XG4gICAgfSxcbiAgICBnZXRUeXBlOiBmdW5jdGlvbiBnZXRUeXBlKCkge1xuICAgICAgcmV0dXJuIHRoaXMudHlwZTtcbiAgICB9LFxuICAgIHNvdXJjZVJlY3RBdFRpbWU6IGZ1bmN0aW9uIHNvdXJjZVJlY3RBdFRpbWUoKSB7fVxuICB9O1xuXG4gIC8qKlxyXG4gICAqIEBmaWxlXHJcbiAgICogSGFuZGxlcyBlbGVtZW50J3MgbGF5ZXIgZnJhbWUgdXBkYXRlLlxyXG4gICAqIENoZWNrcyBsYXllciBpbiBwb2ludCBhbmQgb3V0IHBvaW50XHJcbiAgICpcclxuICAgKi9cbiAgZnVuY3Rpb24gRnJhbWVFbGVtZW50KCkge31cblxuICBGcmFtZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIC8qKlxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICogSW5pdGlhbGl6ZXMgZnJhbWUgcmVsYXRlZCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBpbml0RnJhbWU6IGZ1bmN0aW9uIGluaXRGcmFtZSgpIHtcbiAgICAgIC8vIHNldCB0byB0cnVlIHdoZW4gaW5wb2ludCBpcyByZW5kZXJlZFxuICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7IC8vIGxpc3Qgb2YgYW5pbWF0ZWQgcHJvcGVydGllc1xuXG4gICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzID0gW107IC8vIElmIGxheWVyIGhhcyBiZWVuIG1vZGlmaWVkIGluIGN1cnJlbnQgdGljayB0aGlzIHdpbGwgYmUgdHJ1ZVxuXG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBDYWxjdWxhdGVzIGFsbCBkeW5hbWljIHZhbHVlc1xyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtXHJcbiAgICAgICAqIGN1cnJlbnQgZnJhbWUgbnVtYmVyIGluIExheWVyJ3MgdGltZVxyXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzVmlzaWJsZVxyXG4gICAgICAgKiBpZiBsYXllcnMgaXMgY3VycmVudGx5IGluIHJhbmdlXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIHByZXBhcmVQcm9wZXJ0aWVzOiBmdW5jdGlvbiBwcmVwYXJlUHJvcGVydGllcyhudW0sIGlzVmlzaWJsZSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXNWaXNpYmxlIHx8IHRoaXMuX2lzUGFyZW50ICYmIHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0ucHJvcFR5cGUgPT09ICd0cmFuc2Zvcm0nKSB7XG4gICAgICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uX21kZikge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZER5bmFtaWNQcm9wZXJ0eTogZnVuY3Rpb24gYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApIHtcbiAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gRm9vdGFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0UmVuZGVyYWJsZSgpO1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5mb290YWdlRGF0YSA9IGdsb2JhbERhdGEuaW1hZ2VMb2FkZXIuZ2V0QXNzZXQodGhpcy5hc3NldERhdGEpO1xuICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsIEJhc2VFbGVtZW50LCBGcmFtZUVsZW1lbnRdLCBGb290YWdlRWxlbWVudCk7XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge307XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLmluaXRFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZXhwcmVzc2lvbnNJbnRlcmZhY2VzID0gZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMoKTtcblxuICAgIGlmICghZXhwcmVzc2lvbnNJbnRlcmZhY2VzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIEZvb3RhZ2VJbnRlcmZhY2UgPSBleHByZXNzaW9uc0ludGVyZmFjZXMoJ2Zvb3RhZ2UnKTtcbiAgICB0aGlzLmxheWVySW50ZXJmYWNlID0gRm9vdGFnZUludGVyZmFjZSh0aGlzKTtcbiAgfTtcblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUuZ2V0Rm9vdGFnZURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZm9vdGFnZURhdGE7XG4gIH07XG5cbiAgZnVuY3Rpb24gQXVkaW9FbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuZ2V0QXNzZXREYXRhKGRhdGEucmVmSWQpO1xuICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuX2lzUGxheWluZyA9IGZhbHNlO1xuICAgIHRoaXMuX2NhblBsYXkgPSBmYWxzZTtcbiAgICB2YXIgYXNzZXRQYXRoID0gdGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0c1BhdGgodGhpcy5hc3NldERhdGEpO1xuICAgIHRoaXMuYXVkaW8gPSB0aGlzLmdsb2JhbERhdGEuYXVkaW9Db250cm9sbGVyLmNyZWF0ZUF1ZGlvKGFzc2V0UGF0aCk7XG4gICAgdGhpcy5fY3VycmVudFRpbWUgPSAwO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5hdWRpb0NvbnRyb2xsZXIuYWRkQXVkaW8odGhpcyk7XG4gICAgdGhpcy5fdm9sdW1lTXVsdGlwbGllciA9IDE7XG4gICAgdGhpcy5fdm9sdW1lID0gMTtcbiAgICB0aGlzLl9wcmV2aW91c1ZvbHVtZSA9IG51bGw7XG4gICAgdGhpcy50bSA9IGRhdGEudG0gPyBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLnRtLCAwLCBnbG9iYWxEYXRhLmZyYW1lUmF0ZSwgdGhpcykgOiB7XG4gICAgICBfcGxhY2Vob2xkZXI6IHRydWVcbiAgICB9O1xuICAgIHRoaXMubHYgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLmF1ICYmIGRhdGEuYXUubHYgPyBkYXRhLmF1Lmx2IDoge1xuICAgICAgazogWzEwMF1cbiAgICB9LCAxLCAwLjAxLCB0aGlzKTtcbiAgfVxuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0sIHRydWUpO1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0cnVlKTtcblxuICAgIGlmICghdGhpcy50bS5fcGxhY2Vob2xkZXIpIHtcbiAgICAgIHZhciB0aW1lUmVtYXBwZWQgPSB0aGlzLnRtLnY7XG4gICAgICB0aGlzLl9jdXJyZW50VGltZSA9IHRpbWVSZW1hcHBlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY3VycmVudFRpbWUgPSBudW0gLyB0aGlzLmRhdGEuc3I7XG4gICAgfVxuXG4gICAgdGhpcy5fdm9sdW1lID0gdGhpcy5sdi52WzBdO1xuICAgIHZhciB0b3RhbFZvbHVtZSA9IHRoaXMuX3ZvbHVtZSAqIHRoaXMuX3ZvbHVtZU11bHRpcGxpZXI7XG5cbiAgICBpZiAodGhpcy5fcHJldmlvdXNWb2x1bWUgIT09IHRvdGFsVm9sdW1lKSB7XG4gICAgICB0aGlzLl9wcmV2aW91c1ZvbHVtZSA9IHRvdGFsVm9sdW1lO1xuICAgICAgdGhpcy5hdWRpby52b2x1bWUodG90YWxWb2x1bWUpO1xuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW1JlbmRlcmFibGVFbGVtZW50LCBCYXNlRWxlbWVudCwgRnJhbWVFbGVtZW50XSwgQXVkaW9FbGVtZW50KTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzSW5SYW5nZSAmJiB0aGlzLl9jYW5QbGF5KSB7XG4gICAgICBpZiAoIXRoaXMuX2lzUGxheWluZykge1xuICAgICAgICB0aGlzLmF1ZGlvLnBsYXkoKTtcbiAgICAgICAgdGhpcy5hdWRpby5zZWVrKHRoaXMuX2N1cnJlbnRUaW1lIC8gdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSk7XG4gICAgICAgIHRoaXMuX2lzUGxheWluZyA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLmF1ZGlvLnBsYXlpbmcoKSB8fCBNYXRoLmFicyh0aGlzLl9jdXJyZW50VGltZSAvIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZVJhdGUgLSB0aGlzLmF1ZGlvLnNlZWsoKSkgPiAwLjEpIHtcbiAgICAgICAgdGhpcy5hdWRpby5zZWVrKHRoaXMuX2N1cnJlbnRUaW1lIC8gdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHsvLyB0aGlzLmF1ZGlvLnBsYXkoKVxuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmF1ZGlvLnBhdXNlKCk7XG4gICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgdGhpcy5fY2FuUGxheSA9IGZhbHNlO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2NhblBsYXkgPSB0cnVlO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc2V0UmF0ZSA9IGZ1bmN0aW9uIChyYXRlVmFsdWUpIHtcbiAgICB0aGlzLmF1ZGlvLnJhdGUocmF0ZVZhbHVlKTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnZvbHVtZSA9IGZ1bmN0aW9uICh2b2x1bWVWYWx1ZSkge1xuICAgIHRoaXMuX3ZvbHVtZU11bHRpcGxpZXIgPSB2b2x1bWVWYWx1ZTtcbiAgICB0aGlzLl9wcmV2aW91c1ZvbHVtZSA9IHZvbHVtZVZhbHVlICogdGhpcy5fdm9sdW1lO1xuICAgIHRoaXMuYXVkaW8udm9sdW1lKHRoaXMuX3ByZXZpb3VzVm9sdW1lKTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuaW5pdEV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge307XG5cbiAgZnVuY3Rpb24gQmFzZVJlbmRlcmVyKCkge31cblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNoZWNrTGF5ZXJzID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG4gICAgdmFyIGRhdGE7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IHRydWU7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKCF0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIGRhdGEgPSB0aGlzLmxheWVyc1tpXTtcblxuICAgICAgICBpZiAoZGF0YS5pcCAtIGRhdGEuc3QgPD0gbnVtIC0gdGhpcy5sYXllcnNbaV0uc3QgJiYgZGF0YS5vcCAtIGRhdGEuc3QgPiBudW0gLSB0aGlzLmxheWVyc1tpXS5zdCkge1xuICAgICAgICAgIHRoaXMuYnVpbGRJdGVtKGkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSB0aGlzLmVsZW1lbnRzW2ldID8gdGhpcy5jb21wbGV0ZUxheWVycyA6IGZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuY2hlY2tQZW5kaW5nRWxlbWVudHMoKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUl0ZW0gPSBmdW5jdGlvbiAobGF5ZXIpIHtcbiAgICBzd2l0Y2ggKGxheWVyLnR5KSB7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUltYWdlKGxheWVyKTtcblxuICAgICAgY2FzZSAwOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDb21wKGxheWVyKTtcblxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTb2xpZChsYXllcik7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTnVsbChsYXllcik7XG5cbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlU2hhcGUobGF5ZXIpO1xuXG4gICAgICBjYXNlIDU6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRleHQobGF5ZXIpO1xuXG4gICAgICBjYXNlIDY6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUF1ZGlvKGxheWVyKTtcblxuICAgICAgY2FzZSAxMzpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQ2FtZXJhKGxheWVyKTtcblxuICAgICAgY2FzZSAxNTpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRm9vdGFnZShsYXllcik7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZU51bGwobGF5ZXIpO1xuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNhbWVyYSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdVxcJ3JlIHVzaW5nIGEgM2QgY2FtZXJhLiBUcnkgdGhlIGh0bWwgcmVuZGVyZXIuJyk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVBdWRpbyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBBdWRpb0VsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUZvb3RhZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgRm9vdGFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkQWxsSXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5idWlsZEl0ZW0oaSk7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja1BlbmRpbmdFbGVtZW50cygpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuaW5jbHVkZUxheWVycyA9IGZ1bmN0aW9uIChuZXdMYXllcnMpIHtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IG5ld0xheWVycy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGogPSAwO1xuXG4gICAgICB3aGlsZSAoaiA8IGpMZW4pIHtcbiAgICAgICAgaWYgKHRoaXMubGF5ZXJzW2pdLmlkID09PSBuZXdMYXllcnNbaV0uaWQpIHtcbiAgICAgICAgICB0aGlzLmxheWVyc1tqXSA9IG5ld0xheWVyc1tpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGogKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZXRQcm9qZWN0SW50ZXJmYWNlID0gZnVuY3Rpb24gKHBJbnRlcmZhY2UpIHtcbiAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZSA9IHBJbnRlcmZhY2U7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5pbml0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmdsb2JhbERhdGEucHJvZ3Jlc3NpdmVMb2FkKSB7XG4gICAgICB0aGlzLmJ1aWxkQWxsSXRlbXMoKTtcbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEVsZW1lbnRQYXJlbnRpbmcgPSBmdW5jdGlvbiAoZWxlbWVudCwgcGFyZW50TmFtZSwgaGllcmFyY2h5KSB7XG4gICAgdmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cztcbiAgICB2YXIgbGF5ZXJzID0gdGhpcy5sYXllcnM7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChsYXllcnNbaV0uaW5kID09IHBhcmVudE5hbWUpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgaWYgKCFlbGVtZW50c1tpXSB8fCBlbGVtZW50c1tpXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuYnVpbGRJdGVtKGkpO1xuICAgICAgICAgIHRoaXMuYWRkUGVuZGluZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGllcmFyY2h5LnB1c2goZWxlbWVudHNbaV0pO1xuICAgICAgICAgIGVsZW1lbnRzW2ldLnNldEFzUGFyZW50KCk7XG5cbiAgICAgICAgICBpZiAobGF5ZXJzW2ldLnBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmJ1aWxkRWxlbWVudFBhcmVudGluZyhlbGVtZW50LCBsYXllcnNbaV0ucGFyZW50LCBoaWVyYXJjaHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnNldEhpZXJhcmNoeShoaWVyYXJjaHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuYWRkUGVuZGluZ0VsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzLnB1c2goZWxlbWVudCk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZWFyY2hFeHRyYUNvbXBvc2l0aW9ucyA9IGZ1bmN0aW9uIChhc3NldHMpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gYXNzZXRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKGFzc2V0c1tpXS54dCkge1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMuY3JlYXRlQ29tcChhc3NldHNbaV0pO1xuICAgICAgICBjb21wLmluaXRFeHByZXNzaW9ucygpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5yZWdpc3RlckNvbXBvc2l0aW9uKGNvbXApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmdldEVsZW1lbnRCeUlkID0gZnVuY3Rpb24gKGluZCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0uZGF0YS5pbmQgPT09IGluZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbGVtZW50c1tpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmdldEVsZW1lbnRCeVBhdGggPSBmdW5jdGlvbiAocGF0aCkge1xuICAgIHZhciBwYXRoVmFsdWUgPSBwYXRoLnNoaWZ0KCk7XG4gICAgdmFyIGVsZW1lbnQ7XG5cbiAgICBpZiAodHlwZW9mIHBhdGhWYWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW3BhdGhWYWx1ZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0uZGF0YS5ubSA9PT0gcGF0aFZhbHVlKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50LmdldEVsZW1lbnRCeVBhdGgocGF0aCk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5zZXR1cEdsb2JhbERhdGEgPSBmdW5jdGlvbiAoYW5pbURhdGEsIGZvbnRzQ29udGFpbmVyKSB7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyID0gbmV3IEZvbnRNYW5hZ2VyKCk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnNsb3RNYW5hZ2VyID0gc2xvdEZhY3RvcnkoYW5pbURhdGEpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5hZGRDaGFycyhhbmltRGF0YS5jaGFycyk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZEZvbnRzKGFuaW1EYXRhLmZvbnRzLCBmb250c0NvbnRhaW5lcik7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0RGF0YSA9IHRoaXMuYW5pbWF0aW9uSXRlbS5nZXRBc3NldERhdGEuYmluZCh0aGlzLmFuaW1hdGlvbkl0ZW0pO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoID0gdGhpcy5hbmltYXRpb25JdGVtLmdldEFzc2V0c1BhdGguYmluZCh0aGlzLmFuaW1hdGlvbkl0ZW0pO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5pbWFnZUxvYWRlciA9IHRoaXMuYW5pbWF0aW9uSXRlbS5pbWFnZVByZWxvYWRlcjtcbiAgICB0aGlzLmdsb2JhbERhdGEuYXVkaW9Db250cm9sbGVyID0gdGhpcy5hbmltYXRpb25JdGVtLmF1ZGlvQ29udHJvbGxlcjtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVJZCA9IDA7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSA9IGFuaW1EYXRhLmZyO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5ubSA9IGFuaW1EYXRhLm5tO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZSA9IHtcbiAgICAgIHc6IGFuaW1EYXRhLncsXG4gICAgICBoOiBhbmltRGF0YS5oXG4gICAgfTtcbiAgfTtcblxuICB2YXIgZWZmZWN0VHlwZXMgPSB7XG4gICAgVFJBTlNGT1JNX0VGRkVDVDogJ3RyYW5zZm9ybUVGZmVjdCdcbiAgfTtcblxuICBmdW5jdGlvbiBUcmFuc2Zvcm1FbGVtZW50KCkge31cblxuICBUcmFuc2Zvcm1FbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBpbml0VHJhbnNmb3JtOiBmdW5jdGlvbiBpbml0VHJhbnNmb3JtKCkge1xuICAgICAgdmFyIG1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0gPSB7XG4gICAgICAgIG1Qcm9wOiB0aGlzLmRhdGEua3MgPyBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHkodGhpcywgdGhpcy5kYXRhLmtzLCB0aGlzKSA6IHtcbiAgICAgICAgICBvOiAwXG4gICAgICAgIH0sXG4gICAgICAgIF9tYXRNZGY6IGZhbHNlLFxuICAgICAgICBfbG9jYWxNYXRNZGY6IGZhbHNlLFxuICAgICAgICBfb3BNZGY6IGZhbHNlLFxuICAgICAgICBtYXQ6IG1hdCxcbiAgICAgICAgbG9jYWxNYXQ6IG1hdCxcbiAgICAgICAgbG9jYWxPcGFjaXR5OiAxXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5kYXRhLmFvKSB7XG4gICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AuYXV0b09yaWVudGVkID0gdHJ1ZTtcbiAgICAgIH0gLy8gVE9ETzogY2hlY2sgVFlQRSAxMTogR3VpZGVkIGVsZW1lbnRzXG5cblxuICAgICAgaWYgKHRoaXMuZGF0YS50eSAhPT0gMTEpIHsvLyB0aGlzLmNyZWF0ZUVsZW1lbnRzKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJUcmFuc2Zvcm06IGZ1bmN0aW9uIHJlbmRlclRyYW5zZm9ybSgpIHtcbiAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lO1xuICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZTtcblxuICAgICAgaWYgKHRoaXMuaGllcmFyY2h5KSB7XG4gICAgICAgIHZhciBtYXQ7XG4gICAgICAgIHZhciBmaW5hbE1hdCA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0O1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmhpZXJhcmNoeS5sZW5ndGg7IC8vIENoZWNraW5nIGlmIGFueSBvZiB0aGUgdHJhbnNmb3JtYXRpb24gbWF0cmljZXMgaW4gdGhlIGhpZXJhcmNoeSBjaGFpbiBoYXMgY2hhbmdlZC5cblxuICAgICAgICBpZiAoIXRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuX21kZikge1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYgPSB0cnVlO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgICBtYXQgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnYucHJvcHM7XG4gICAgICAgICAgZmluYWxNYXQuY2xvbmVGcm9tUHJvcHMobWF0KTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgZmluYWxNYXQubXVsdGlwbHkodGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3Audik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYpIHtcbiAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGY7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby52O1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyTG9jYWxUcmFuc2Zvcm06IGZ1bmN0aW9uIHJlbmRlckxvY2FsVHJhbnNmb3JtKCkge1xuICAgICAgaWYgKHRoaXMubG9jYWxUcmFuc2Zvcm1zKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMubG9jYWxUcmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGY7XG5cbiAgICAgICAgaWYgKCF0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZiB8fCAhdGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxUcmFuc2Zvcm1zW2ldLl9tZGYpIHtcbiAgICAgICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhbFRyYW5zZm9ybXNbaV0uX29wTWRmICYmICF0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Auby52O1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZiA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYpIHtcbiAgICAgICAgICB2YXIgbG9jYWxNYXQgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsTWF0O1xuICAgICAgICAgIHRoaXMubG9jYWxUcmFuc2Zvcm1zWzBdLm1hdHJpeC5jbG9uZShsb2NhbE1hdCk7XG5cbiAgICAgICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBsbWF0ID0gdGhpcy5sb2NhbFRyYW5zZm9ybXNbaV0ubWF0cml4O1xuICAgICAgICAgICAgbG9jYWxNYXQubXVsdGlwbHkobG1hdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbG9jYWxNYXQubXVsdGlwbHkodGhpcy5maW5hbFRyYW5zZm9ybS5tYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgICAgdmFyIGxvY2FsT3AgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eTtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgbG9jYWxPcCAqPSB0aGlzLmxvY2FsVHJhbnNmb3Jtc1tpXS5vcGFjaXR5ICogMC4wMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSA9IGxvY2FsT3A7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNlYXJjaEVmZmVjdFRyYW5zZm9ybXM6IGZ1bmN0aW9uIHNlYXJjaEVmZmVjdFRyYW5zZm9ybXMoKSB7XG4gICAgICBpZiAodGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIpIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybUVmZmVjdHMgPSB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlci5nZXRFZmZlY3RzKGVmZmVjdFR5cGVzLlRSQU5TRk9STV9FRkZFQ1QpO1xuXG4gICAgICAgIGlmICh0cmFuc2Zvcm1FZmZlY3RzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMubG9jYWxUcmFuc2Zvcm1zID0gW107XG4gICAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgICAgdmFyIGxlbiA9IHRyYW5zZm9ybUVmZmVjdHMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsVHJhbnNmb3Jtcy5wdXNoKHRyYW5zZm9ybUVmZmVjdHNbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZ2xvYmFsVG9Mb2NhbDogZnVuY3Rpb24gZ2xvYmFsVG9Mb2NhbChwdCkge1xuICAgICAgdmFyIHRyYW5zZm9ybXMgPSBbXTtcbiAgICAgIHRyYW5zZm9ybXMucHVzaCh0aGlzLmZpbmFsVHJhbnNmb3JtKTtcbiAgICAgIHZhciBmbGFnID0gdHJ1ZTtcbiAgICAgIHZhciBjb21wID0gdGhpcy5jb21wO1xuXG4gICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICBpZiAoY29tcC5maW5hbFRyYW5zZm9ybSkge1xuICAgICAgICAgIGlmIChjb21wLmRhdGEuaGFzTWFzaykge1xuICAgICAgICAgICAgdHJhbnNmb3Jtcy5zcGxpY2UoMCwgMCwgY29tcC5maW5hbFRyYW5zZm9ybSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tcCA9IGNvbXAuY29tcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICB2YXIgcHROZXc7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBwdE5ldyA9IHRyYW5zZm9ybXNbaV0ubWF0LmFwcGx5VG9Qb2ludEFycmF5KDAsIDAsIDApOyAvLyBwdE5ldyA9IHRyYW5zZm9ybXNbaV0ubWF0LmFwcGx5VG9Qb2ludEFycmF5KHB0WzBdLHB0WzFdLHB0WzJdKTtcblxuICAgICAgICBwdCA9IFtwdFswXSAtIHB0TmV3WzBdLCBwdFsxXSAtIHB0TmV3WzFdLCAwXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHB0O1xuICAgIH0sXG4gICAgbUhlbHBlcjogbmV3IE1hdHJpeCgpXG4gIH07XG5cbiAgZnVuY3Rpb24gTWFza0VsZW1lbnQoZGF0YSwgZWxlbWVudCwgZ2xvYmFsRGF0YSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSBnbG9iYWxEYXRhO1xuICAgIHRoaXMuc3RvcmVkRGF0YSA9IFtdO1xuICAgIHRoaXMubWFza3NQcm9wZXJ0aWVzID0gdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllcyB8fCBbXTtcbiAgICB0aGlzLm1hc2tFbGVtZW50ID0gbnVsbDtcbiAgICB2YXIgZGVmcyA9IHRoaXMuZ2xvYmFsRGF0YS5kZWZzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLm1hc2tzUHJvcGVydGllcyA/IHRoaXMubWFza3NQcm9wZXJ0aWVzLmxlbmd0aCA6IDA7XG4gICAgdGhpcy52aWV3RGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkobGVuKTtcbiAgICB0aGlzLnNvbGlkUGF0aCA9ICcnO1xuICAgIHZhciBwYXRoO1xuICAgIHZhciBwcm9wZXJ0aWVzID0gdGhpcy5tYXNrc1Byb3BlcnRpZXM7XG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB2YXIgY3VycmVudE1hc2tzID0gW107XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGxheWVySWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB2YXIgcmVjdDtcbiAgICB2YXIgZXhwYW5zb3I7XG4gICAgdmFyIGZlTW9ycGg7XG4gICAgdmFyIHg7XG4gICAgdmFyIG1hc2tUeXBlID0gJ2NsaXBQYXRoJztcbiAgICB2YXIgbWFza1JlZiA9ICdjbGlwLXBhdGgnO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAocHJvcGVydGllc1tpXS5tb2RlICE9PSAnYScgJiYgcHJvcGVydGllc1tpXS5tb2RlICE9PSAnbicgfHwgcHJvcGVydGllc1tpXS5pbnYgfHwgcHJvcGVydGllc1tpXS5vLmsgIT09IDEwMCB8fCBwcm9wZXJ0aWVzW2ldLm8ueCkge1xuICAgICAgICBtYXNrVHlwZSA9ICdtYXNrJztcbiAgICAgICAgbWFza1JlZiA9ICdtYXNrJztcbiAgICAgIH1cblxuICAgICAgaWYgKChwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdzJyB8fCBwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdpJykgJiYgY291bnQgPT09IDApIHtcbiAgICAgICAgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgJyNmZmZmZmYnKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5lbGVtZW50LmNvbXAuZGF0YS53IHx8IDApO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5lbGVtZW50LmNvbXAuZGF0YS5oIHx8IDApO1xuICAgICAgICBjdXJyZW50TWFza3MucHVzaChyZWN0KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlY3QgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBwYXRoID0gY3JlYXRlTlMoJ3BhdGgnKTtcblxuICAgICAgaWYgKHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ24nKSB7XG4gICAgICAgIC8vIFRPRE8gbW92ZSB0aGlzIHRvIGEgZmFjdG9yeSBvciB0byBhIGNvbnN0cnVjdG9yXG4gICAgICAgIHRoaXMudmlld0RhdGFbaV0gPSB7XG4gICAgICAgICAgb3A6IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXS5vLCAwLCAwLjAxLCB0aGlzLmVsZW1lbnQpLFxuICAgICAgICAgIHByb3A6IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0sIDMpLFxuICAgICAgICAgIGVsZW06IHBhdGgsXG4gICAgICAgICAgbGFzdFBhdGg6ICcnXG4gICAgICAgIH07XG4gICAgICAgIGRlZnMuYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsIHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ3MnID8gJyMwMDAwMDAnIDogJyNmZmZmZmYnKTtcbiAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcnVsZScsICdub256ZXJvJyk7XG4gICAgICAgIHZhciBmaWx0ZXJJRDtcblxuICAgICAgICBpZiAocHJvcGVydGllc1tpXS54LmsgIT09IDApIHtcbiAgICAgICAgICBtYXNrVHlwZSA9ICdtYXNrJztcbiAgICAgICAgICBtYXNrUmVmID0gJ21hc2snO1xuICAgICAgICAgIHggPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0ueCwgMCwgbnVsbCwgdGhpcy5lbGVtZW50KTtcbiAgICAgICAgICBmaWx0ZXJJRCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICAgIGV4cGFuc29yID0gY3JlYXRlTlMoJ2ZpbHRlcicpO1xuICAgICAgICAgIGV4cGFuc29yLnNldEF0dHJpYnV0ZSgnaWQnLCBmaWx0ZXJJRCk7XG4gICAgICAgICAgZmVNb3JwaCA9IGNyZWF0ZU5TKCdmZU1vcnBob2xvZ3knKTtcbiAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgnb3BlcmF0b3InLCAnZXJvZGUnKTtcbiAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgnaW4nLCAnU291cmNlR3JhcGhpYycpO1xuICAgICAgICAgIGZlTW9ycGguc2V0QXR0cmlidXRlKCdyYWRpdXMnLCAnMCcpO1xuICAgICAgICAgIGV4cGFuc29yLmFwcGVuZENoaWxkKGZlTW9ycGgpO1xuICAgICAgICAgIGRlZnMuYXBwZW5kQ2hpbGQoZXhwYW5zb3IpO1xuICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCBwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdzJyA/ICcjMDAwMDAwJyA6ICcjZmZmZmZmJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmVNb3JwaCA9IG51bGw7XG4gICAgICAgICAgeCA9IG51bGw7XG4gICAgICAgIH0gLy8gVE9ETyBtb3ZlIHRoaXMgdG8gYSBmYWN0b3J5IG9yIHRvIGEgY29uc3RydWN0b3JcblxuXG4gICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXSA9IHtcbiAgICAgICAgICBlbGVtOiBwYXRoLFxuICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgZXhwYW46IGZlTW9ycGgsXG4gICAgICAgICAgbGFzdFBhdGg6ICcnLFxuICAgICAgICAgIGxhc3RPcGVyYXRvcjogJycsXG4gICAgICAgICAgZmlsdGVySWQ6IGZpbHRlcklELFxuICAgICAgICAgIGxhc3RSYWRpdXM6IDBcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAocHJvcGVydGllc1tpXS5tb2RlID09PSAnaScpIHtcbiAgICAgICAgICBqTGVuID0gY3VycmVudE1hc2tzLmxlbmd0aDtcbiAgICAgICAgICB2YXIgZyA9IGNyZWF0ZU5TKCdnJyk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBnLmFwcGVuZENoaWxkKGN1cnJlbnRNYXNrc1tqXSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIG1hc2sgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnYWxwaGEnKTtcbiAgICAgICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCBsYXllcklkICsgJ18nICsgY291bnQpO1xuICAgICAgICAgIG1hc2suYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChtYXNrKTtcbiAgICAgICAgICBnLnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgbGF5ZXJJZCArICdfJyArIGNvdW50ICsgJyknKTtcbiAgICAgICAgICBjdXJyZW50TWFza3MubGVuZ3RoID0gMDtcbiAgICAgICAgICBjdXJyZW50TWFza3MucHVzaChnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50TWFza3MucHVzaChwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLmludiAmJiAhdGhpcy5zb2xpZFBhdGgpIHtcbiAgICAgICAgICB0aGlzLnNvbGlkUGF0aCA9IHRoaXMuY3JlYXRlTGF5ZXJTb2xpZFBhdGgoKTtcbiAgICAgICAgfSAvLyBUT0RPIG1vdmUgdGhpcyB0byBhIGZhY3Rvcnkgb3IgdG8gYSBjb25zdHJ1Y3RvclxuXG5cbiAgICAgICAgdGhpcy52aWV3RGF0YVtpXSA9IHtcbiAgICAgICAgICBlbGVtOiBwYXRoLFxuICAgICAgICAgIGxhc3RQYXRoOiAnJyxcbiAgICAgICAgICBvcDogUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcy5lbGVtZW50LCBwcm9wZXJ0aWVzW2ldLm8sIDAsIDAuMDEsIHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgcHJvcDogU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXSwgMyksXG4gICAgICAgICAgaW52UmVjdDogcmVjdFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghdGhpcy52aWV3RGF0YVtpXS5wcm9wLmspIHtcbiAgICAgICAgICB0aGlzLmRyYXdQYXRoKHByb3BlcnRpZXNbaV0sIHRoaXMudmlld0RhdGFbaV0ucHJvcC52LCB0aGlzLnZpZXdEYXRhW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubWFza0VsZW1lbnQgPSBjcmVhdGVOUyhtYXNrVHlwZSk7XG4gICAgbGVuID0gY3VycmVudE1hc2tzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5tYXNrRWxlbWVudC5hcHBlbmRDaGlsZChjdXJyZW50TWFza3NbaV0pO1xuICAgIH1cblxuICAgIGlmIChjb3VudCA+IDApIHtcbiAgICAgIHRoaXMubWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGxheWVySWQpO1xuICAgICAgdGhpcy5lbGVtZW50Lm1hc2tlZEVsZW1lbnQuc2V0QXR0cmlidXRlKG1hc2tSZWYsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgbGF5ZXJJZCArICcpJyk7XG4gICAgICBkZWZzLmFwcGVuZENoaWxkKHRoaXMubWFza0VsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnZpZXdEYXRhLmxlbmd0aCkge1xuICAgICAgdGhpcy5lbGVtZW50LmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tQcm9wZXJ0eSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICByZXR1cm4gdGhpcy52aWV3RGF0YVtwb3NdLnByb3A7XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGlzRmlyc3RGcmFtZSkge1xuICAgIHZhciBmaW5hbE1hdCA9IHRoaXMuZWxlbWVudC5maW5hbFRyYW5zZm9ybS5tYXQ7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubWFza3NQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMudmlld0RhdGFbaV0ucHJvcC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICB0aGlzLmRyYXdQYXRoKHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLCB0aGlzLnZpZXdEYXRhW2ldLnByb3AudiwgdGhpcy52aWV3RGF0YVtpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnZpZXdEYXRhW2ldLm9wLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMudmlld0RhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsIHRoaXMudmlld0RhdGFbaV0ub3Audik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5tb2RlICE9PSAnbicpIHtcbiAgICAgICAgaWYgKHRoaXMudmlld0RhdGFbaV0uaW52UmVjdCAmJiAodGhpcy5lbGVtZW50LmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSkge1xuICAgICAgICAgIHRoaXMudmlld0RhdGFbaV0uaW52UmVjdC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGZpbmFsTWF0LmdldEludmVyc2VNYXRyaXgoKS50bzJkQ1NTKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3RvcmVkRGF0YVtpXS54ICYmICh0aGlzLnN0b3JlZERhdGFbaV0ueC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICB2YXIgZmVNb3JwaCA9IHRoaXMuc3RvcmVkRGF0YVtpXS5leHBhbjtcblxuICAgICAgICAgIGlmICh0aGlzLnN0b3JlZERhdGFbaV0ueC52IDwgMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuc3RvcmVkRGF0YVtpXS5sYXN0T3BlcmF0b3IgIT09ICdlcm9kZScpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciA9ICdlcm9kZSc7XG4gICAgICAgICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXS5lbGVtLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyB0aGlzLnN0b3JlZERhdGFbaV0uZmlsdGVySWQgKyAnKScpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmZU1vcnBoLnNldEF0dHJpYnV0ZSgncmFkaXVzJywgLXRoaXMuc3RvcmVkRGF0YVtpXS54LnYpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciAhPT0gJ2RpbGF0ZScpIHtcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciA9ICdkaWxhdGUnO1xuICAgICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsIG51bGwpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0uZWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHRoaXMuc3RvcmVkRGF0YVtpXS54LnYgKiAyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tlbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLm1hc2tFbGVtZW50O1xuICB9O1xuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVMYXllclNvbGlkUGF0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcGF0aCA9ICdNMCwwICc7XG4gICAgcGF0aCArPSAnIGgnICsgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgcGF0aCArPSAnIHYnICsgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgcGF0aCArPSAnIGgtJyArIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgIHBhdGggKz0gJyB2LScgKyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCArICcgJztcbiAgICByZXR1cm4gcGF0aDtcbiAgfTtcblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUuZHJhd1BhdGggPSBmdW5jdGlvbiAocGF0aERhdGEsIHBhdGhOb2Rlcywgdmlld0RhdGEpIHtcbiAgICB2YXIgcGF0aFN0cmluZyA9ICcgTScgKyBwYXRoTm9kZXMudlswXVswXSArICcsJyArIHBhdGhOb2Rlcy52WzBdWzFdO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgbGVuID0gcGF0aE5vZGVzLl9sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIC8vIHBhdGhTdHJpbmcgKz0gXCIgQ1wiK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0gKyBcIiBcIitwYXRoTm9kZXMuaVtpXVswXSsnLCcrcGF0aE5vZGVzLmlbaV1bMV0gKyBcIiBcIitwYXRoTm9kZXMudltpXVswXSsnLCcrcGF0aE5vZGVzLnZbaV1bMV07XG4gICAgICBwYXRoU3RyaW5nICs9ICcgQycgKyBwYXRoTm9kZXMub1tpIC0gMV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMub1tpIC0gMV1bMV0gKyAnICcgKyBwYXRoTm9kZXMuaVtpXVswXSArICcsJyArIHBhdGhOb2Rlcy5pW2ldWzFdICsgJyAnICsgcGF0aE5vZGVzLnZbaV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMudltpXVsxXTtcbiAgICB9IC8vIHBhdGhTdHJpbmcgKz0gXCIgQ1wiK3BhdGhOb2Rlcy5vW2ktMV1bMF0rJywnK3BhdGhOb2Rlcy5vW2ktMV1bMV0gKyBcIiBcIitwYXRoTm9kZXMuaVswXVswXSsnLCcrcGF0aE5vZGVzLmlbMF1bMV0gKyBcIiBcIitwYXRoTm9kZXMudlswXVswXSsnLCcrcGF0aE5vZGVzLnZbMF1bMV07XG5cblxuICAgIGlmIChwYXRoTm9kZXMuYyAmJiBsZW4gPiAxKSB7XG4gICAgICBwYXRoU3RyaW5nICs9ICcgQycgKyBwYXRoTm9kZXMub1tpIC0gMV1bMF0gKyAnLCcgKyBwYXRoTm9kZXMub1tpIC0gMV1bMV0gKyAnICcgKyBwYXRoTm9kZXMuaVswXVswXSArICcsJyArIHBhdGhOb2Rlcy5pWzBdWzFdICsgJyAnICsgcGF0aE5vZGVzLnZbMF1bMF0gKyAnLCcgKyBwYXRoTm9kZXMudlswXVsxXTtcbiAgICB9IC8vIHBhdGhOb2Rlcy5fX3JlbmRlcmVkU3RyaW5nID0gcGF0aFN0cmluZztcblxuXG4gICAgaWYgKHZpZXdEYXRhLmxhc3RQYXRoICE9PSBwYXRoU3RyaW5nKSB7XG4gICAgICB2YXIgcGF0aFNoYXBlVmFsdWUgPSAnJztcblxuICAgICAgaWYgKHZpZXdEYXRhLmVsZW0pIHtcbiAgICAgICAgaWYgKHBhdGhOb2Rlcy5jKSB7XG4gICAgICAgICAgcGF0aFNoYXBlVmFsdWUgPSBwYXRoRGF0YS5pbnYgPyB0aGlzLnNvbGlkUGF0aCArIHBhdGhTdHJpbmcgOiBwYXRoU3RyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgdmlld0RhdGEuZWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLCBwYXRoU2hhcGVWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHZpZXdEYXRhLmxhc3RQYXRoID0gcGF0aFN0cmluZztcbiAgICB9XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSBudWxsO1xuICAgIHRoaXMubWFza0VsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgdGhpcy5tYXNrc1Byb3BlcnRpZXMgPSBudWxsO1xuICB9O1xuXG4gIHZhciBmaWx0ZXJzRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5jcmVhdGVGaWx0ZXIgPSBjcmVhdGVGaWx0ZXI7XG4gICAgb2IuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlciA9IGNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXI7XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVGaWx0ZXIoZmlsSWQsIHNraXBDb29yZGluYXRlcykge1xuICAgICAgdmFyIGZpbCA9IGNyZWF0ZU5TKCdmaWx0ZXInKTtcbiAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2lkJywgZmlsSWQpO1xuXG4gICAgICBpZiAoc2tpcENvb3JkaW5hdGVzICE9PSB0cnVlKSB7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2ZpbHRlclVuaXRzJywgJ29iamVjdEJvdW5kaW5nQm94Jyk7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ3gnLCAnMCUnKTtcbiAgICAgICAgZmlsLnNldEF0dHJpYnV0ZSgneScsICcwJScpO1xuICAgICAgICBmaWwuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxMDAlJyk7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcxMDAlJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmaWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpIHtcbiAgICAgIHZhciBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAgMCAwIDEgMCAgMCAwIDAgMSAwICAwIDAgMCAxIDAgIDAgMCAwIDEgMScpO1xuICAgICAgcmV0dXJuIGZlQ29sb3JNYXRyaXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIGZlYXR1cmVTdXBwb3J0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHtcbiAgICAgIG1hc2tUeXBlOiB0cnVlLFxuICAgICAgc3ZnTHVtYUhpZGRlbjogdHJ1ZSxcbiAgICAgIG9mZnNjcmVlbkNhbnZhczogdHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICB9O1xuXG4gICAgaWYgKC9NU0lFIDEwL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvTVNJRSA5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvcnY6MTEuMC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgfHwgL0VkZ2VcXC9cXGQuL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkge1xuICAgICAgb2IubWFza1R5cGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoL2ZpcmVmb3gvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICBvYi5zdmdMdW1hSGlkZGVuID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIHJlZ2lzdGVyZWRFZmZlY3RzJDEgPSB7fTtcbiAgdmFyIGlkUHJlZml4ID0gJ2ZpbHRlcl9yZXN1bHRfJztcblxuICBmdW5jdGlvbiBTVkdFZmZlY3RzKGVsZW0pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgc291cmNlID0gJ1NvdXJjZUdyYXBoaWMnO1xuICAgIHZhciBsZW4gPSBlbGVtLmRhdGEuZWYgPyBlbGVtLmRhdGEuZWYubGVuZ3RoIDogMDtcbiAgICB2YXIgZmlsSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB2YXIgZmlsID0gZmlsdGVyc0ZhY3RvcnkuY3JlYXRlRmlsdGVyKGZpbElkLCB0cnVlKTtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIHZhciBmaWx0ZXJNYW5hZ2VyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaWx0ZXJNYW5hZ2VyID0gbnVsbDtcbiAgICAgIHZhciB0eXBlID0gZWxlbS5kYXRhLmVmW2ldLnR5O1xuXG4gICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHMkMVt0eXBlXSkge1xuICAgICAgICB2YXIgRWZmZWN0ID0gcmVnaXN0ZXJlZEVmZmVjdHMkMVt0eXBlXS5lZmZlY3Q7XG4gICAgICAgIGZpbHRlck1hbmFnZXIgPSBuZXcgRWZmZWN0KGZpbCwgZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbSwgaWRQcmVmaXggKyBjb3VudCwgc291cmNlKTtcbiAgICAgICAgc291cmNlID0gaWRQcmVmaXggKyBjb3VudDtcblxuICAgICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHMkMVt0eXBlXS5jb3VudHNBc0VmZmVjdCkge1xuICAgICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbHRlck1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLnB1c2goZmlsdGVyTWFuYWdlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvdW50KSB7XG4gICAgICBlbGVtLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChmaWwpO1xuICAgICAgZWxlbS5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWx0ZXInLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGZpbElkICsgJyknKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWx0ZXJzLmxlbmd0aCkge1xuICAgICAgZWxlbS5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIFNWR0VmZmVjdHMucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5maWx0ZXJzW2ldLnJlbmRlckZyYW1lKF9pc0ZpcnN0RnJhbWUpO1xuICAgIH1cbiAgfTtcblxuICBTVkdFZmZlY3RzLnByb3RvdHlwZS5nZXRFZmZlY3RzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcbiAgICB2YXIgZWZmZWN0cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzW2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgZWZmZWN0cy5wdXNoKHRoaXMuZmlsdGVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QkMShpZCwgZWZmZWN0LCBjb3VudHNBc0VmZmVjdCkge1xuICAgIHJlZ2lzdGVyZWRFZmZlY3RzJDFbaWRdID0ge1xuICAgICAgZWZmZWN0OiBlZmZlY3QsXG4gICAgICBjb3VudHNBc0VmZmVjdDogY291bnRzQXNFZmZlY3RcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gU1ZHQmFzZUVsZW1lbnQoKSB7fVxuXG4gIFNWR0Jhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBpbml0UmVuZGVyZXJFbGVtZW50OiBmdW5jdGlvbiBpbml0UmVuZGVyZXJFbGVtZW50KCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCkge1xuICAgICAgdGhpcy5tYXR0ZUVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgIHRoaXMubWFza2VkRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHZhciBsYXllckVsZW1lbnRQYXJlbnQgPSBudWxsOyAvLyBJZiB0aGlzIGxheWVyIGFjdHMgYXMgYSBtYXNrIGZvciB0aGUgZm9sbG93aW5nIGxheWVyXG5cbiAgICAgIGlmICh0aGlzLmRhdGEudGQpIHtcbiAgICAgICAgdGhpcy5tYXR0ZU1hc2tzID0ge307XG4gICAgICAgIHZhciBnZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgIGdnLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmxheWVySWQpO1xuICAgICAgICBnZy5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgIGxheWVyRWxlbWVudFBhcmVudCA9IGdnO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChnZyk7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZGF0YS50dCkge1xuICAgICAgICB0aGlzLm1hdHRlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgIGxheWVyRWxlbWVudFBhcmVudCA9IHRoaXMubWF0dGVFbGVtZW50O1xuICAgICAgICB0aGlzLmJhc2VFbGVtZW50ID0gdGhpcy5tYXR0ZUVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmJhc2VFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEubG4pIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMuZGF0YS5sbik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuY2wpIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRoaXMuZGF0YS5jbCk7XG4gICAgICB9IC8vIENsaXBwaW5nIGNvbXBvc2l0aW9ucyB0byBoaWRlIGNvbnRlbnQgdGhhdCBleGNlZWRzIGJvdW5kYXJpZXMuIElmIGNvbGxhcHNlZCB0cmFuc2Zvcm1hdGlvbnMgaXMgb24sIGNvbXBvbmVudCBzaG91bGQgbm90IGJlIGNsaXBwZWRcblxuXG4gICAgICBpZiAodGhpcy5kYXRhLnR5ID09PSAwICYmICF0aGlzLmRhdGEuaGQpIHtcbiAgICAgICAgdmFyIGNwID0gY3JlYXRlTlMoJ2NsaXBQYXRoJyk7XG4gICAgICAgIHZhciBwdCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICAgIHB0LnNldEF0dHJpYnV0ZSgnZCcsICdNMCwwIEwnICsgdGhpcy5kYXRhLncgKyAnLDAgTCcgKyB0aGlzLmRhdGEudyArICcsJyArIHRoaXMuZGF0YS5oICsgJyBMMCwnICsgdGhpcy5kYXRhLmggKyAneicpO1xuICAgICAgICB2YXIgY2xpcElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICAgIGNwLnNldEF0dHJpYnV0ZSgnaWQnLCBjbGlwSWQpO1xuICAgICAgICBjcC5hcHBlbmRDaGlsZChwdCk7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGNwKTtcblxuICAgICAgICBpZiAodGhpcy5jaGVja01hc2tzKCkpIHtcbiAgICAgICAgICB2YXIgY3BHcm91cCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgY3BHcm91cC5zZXRBdHRyaWJ1dGUoJ2NsaXAtcGF0aCcsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgY2xpcElkICsgJyknKTtcbiAgICAgICAgICBjcEdyb3VwLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IGNwR3JvdXA7XG5cbiAgICAgICAgICBpZiAobGF5ZXJFbGVtZW50UGFyZW50KSB7XG4gICAgICAgICAgICBsYXllckVsZW1lbnRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJhc2VFbGVtZW50ID0gdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBjbGlwSWQgKyAnKScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuYm0gIT09IDApIHtcbiAgICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckVsZW1lbnQ6IGZ1bmN0aW9uIHJlbmRlckVsZW1lbnQoKSB7XG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbG9jYWxNYXRNZGYpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsTWF0LnRvMmRDU1MoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95QmFzZUVsZW1lbnQ6IGZ1bmN0aW9uIGRlc3Ryb3lCYXNlRWxlbWVudCgpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMubWF0dGVFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgZ2V0QmFzZUVsZW1lbnQ6IGZ1bmN0aW9uIGdldEJhc2VFbGVtZW50KCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5oZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgfSxcbiAgICBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50czogZnVuY3Rpb24gY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKSB7XG4gICAgICB0aGlzLm1hc2tNYW5hZ2VyID0gbmV3IE1hc2tFbGVtZW50KHRoaXMuZGF0YSwgdGhpcywgdGhpcy5nbG9iYWxEYXRhKTtcbiAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyID0gbmV3IFNWR0VmZmVjdHModGhpcyk7XG4gICAgICB0aGlzLnNlYXJjaEVmZmVjdFRyYW5zZm9ybXMoKTtcbiAgICB9LFxuICAgIGdldE1hdHRlOiBmdW5jdGlvbiBnZXRNYXR0ZShtYXR0ZVR5cGUpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5vdCBiZSBhIGNvbW1vbiBjYXNlLiBCdXQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHdlJ2xsIGNyZWF0ZSB0aGUgbWF0dGUgb2JqZWN0LlxuICAgICAgLy8gSXQgc29sdmVzIGFuaW1hdGlvbnMgdGhhdCBoYXZlIHR3byBjb25zZWN1dGl2ZSBsYXllcnMgbWFya2VkIGFzIG1hdHRlIG1hc2tzLlxuICAgICAgLy8gV2hpY2ggaXMgYW4gdW5kZWZpbmVkIGJlaGF2aW9yIGluIEFFLlxuICAgICAgaWYgKCF0aGlzLm1hdHRlTWFza3MpIHtcbiAgICAgICAgdGhpcy5tYXR0ZU1hc2tzID0ge307XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5tYXR0ZU1hc2tzW21hdHRlVHlwZV0pIHtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5sYXllcklkICsgJ18nICsgbWF0dGVUeXBlO1xuICAgICAgICB2YXIgZmlsSWQ7XG4gICAgICAgIHZhciBmaWw7XG4gICAgICAgIHZhciB1c2VFbGVtZW50O1xuICAgICAgICB2YXIgZ2c7XG5cbiAgICAgICAgaWYgKG1hdHRlVHlwZSA9PT0gMSB8fCBtYXR0ZVR5cGUgPT09IDMpIHtcbiAgICAgICAgICB2YXIgbWFza2VyID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCBtYXR0ZVR5cGUgPT09IDMgPyAnbHVtaW5hbmNlJyA6ICdhbHBoYScpO1xuICAgICAgICAgIHVzZUVsZW1lbnQgPSBjcmVhdGVOUygndXNlJyk7XG4gICAgICAgICAgdXNlRWxlbWVudC5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgJyMnICsgdGhpcy5sYXllcklkKTtcbiAgICAgICAgICBtYXNrZXIuYXBwZW5kQ2hpbGQodXNlRWxlbWVudCk7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQobWFza2VyKTtcblxuICAgICAgICAgIGlmICghZmVhdHVyZVN1cHBvcnQubWFza1R5cGUgJiYgbWF0dGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICBtYXNrZXIuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnbHVtaW5hbmNlJyk7XG4gICAgICAgICAgICBmaWxJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICAgICAgZmlsID0gZmlsdGVyc0ZhY3RvcnkuY3JlYXRlRmlsdGVyKGZpbElkKTtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGZpbCk7XG4gICAgICAgICAgICBmaWwuYXBwZW5kQ2hpbGQoZmlsdGVyc0ZhY3RvcnkuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpKTtcbiAgICAgICAgICAgIGdnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgICAgIGdnLmFwcGVuZENoaWxkKHVzZUVsZW1lbnQpO1xuICAgICAgICAgICAgbWFza2VyLmFwcGVuZENoaWxkKGdnKTtcbiAgICAgICAgICAgIGdnLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBmaWxJZCArICcpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG1hdHRlVHlwZSA9PT0gMikge1xuICAgICAgICAgIHZhciBtYXNrR3JvdXAgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgICAgIG1hc2tHcm91cC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgIG1hc2tHcm91cC5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuICAgICAgICAgIHZhciBtYXNrR3JvdXBlciA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgbWFza0dyb3VwLmFwcGVuZENoaWxkKG1hc2tHcm91cGVyKTtcbiAgICAgICAgICBmaWxJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgICAgIGZpbCA9IGZpbHRlcnNGYWN0b3J5LmNyZWF0ZUZpbHRlcihmaWxJZCk7IC8vLyAvXG5cbiAgICAgICAgICB2YXIgZmVDVHIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO1xuICAgICAgICAgIGZlQ1RyLnNldEF0dHJpYnV0ZSgnaW4nLCAnU291cmNlR3JhcGhpYycpO1xuICAgICAgICAgIGZpbC5hcHBlbmRDaGlsZChmZUNUcik7XG4gICAgICAgICAgdmFyIGZlRnVuYyA9IGNyZWF0ZU5TKCdmZUZ1bmNBJyk7XG4gICAgICAgICAgZmVGdW5jLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgICAgICAgIGZlRnVuYy5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgJzEuMCAwLjAnKTtcbiAgICAgICAgICBmZUNUci5hcHBlbmRDaGlsZChmZUZ1bmMpOyAvLy8gL1xuXG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZmlsKTtcbiAgICAgICAgICB2YXIgYWxwaGFSZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTtcbiAgICAgICAgICBhbHBoYVJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuY29tcC5kYXRhLncpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuY29tcC5kYXRhLmgpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ3gnLCAnMCcpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCAnMCcpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnI2ZmZmZmZicpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCAnMCcpO1xuICAgICAgICAgIG1hc2tHcm91cGVyLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBmaWxJZCArICcpJyk7XG4gICAgICAgICAgbWFza0dyb3VwZXIuYXBwZW5kQ2hpbGQoYWxwaGFSZWN0KTtcbiAgICAgICAgICB1c2VFbGVtZW50ID0gY3JlYXRlTlMoJ3VzZScpO1xuICAgICAgICAgIHVzZUVsZW1lbnQuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAnaHJlZicsICcjJyArIHRoaXMubGF5ZXJJZCk7XG4gICAgICAgICAgbWFza0dyb3VwZXIuYXBwZW5kQ2hpbGQodXNlRWxlbWVudCk7XG5cbiAgICAgICAgICBpZiAoIWZlYXR1cmVTdXBwb3J0Lm1hc2tUeXBlKSB7XG4gICAgICAgICAgICBtYXNrR3JvdXAuc2V0QXR0cmlidXRlKCdtYXNrLXR5cGUnLCAnbHVtaW5hbmNlJyk7XG4gICAgICAgICAgICBmaWwuYXBwZW5kQ2hpbGQoZmlsdGVyc0ZhY3RvcnkuY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcigpKTtcbiAgICAgICAgICAgIGdnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgICAgIG1hc2tHcm91cGVyLmFwcGVuZENoaWxkKGFscGhhUmVjdCk7XG4gICAgICAgICAgICBnZy5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgICAgICBtYXNrR3JvdXBlci5hcHBlbmRDaGlsZChnZyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQobWFza0dyb3VwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWF0dGVNYXNrc1ttYXR0ZVR5cGVdID0gaWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLm1hdHRlTWFza3NbbWF0dGVUeXBlXTtcbiAgICB9LFxuICAgIHNldE1hdHRlOiBmdW5jdGlvbiBzZXRNYXR0ZShpZCkge1xuICAgICAgaWYgKCF0aGlzLm1hdHRlRWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWF0dGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgaWQgKyAnKScpO1xuICAgIH1cbiAgfTtcblxuICAvKipcclxuICAgKiBAZmlsZVxyXG4gICAqIEhhbmRsZXMgQUUncyBsYXllciBwYXJlbnRpbmcgcHJvcGVydHkuXHJcbiAgICpcclxuICAgKi9cbiAgZnVuY3Rpb24gSGllcmFyY2h5RWxlbWVudCgpIHt9XG5cbiAgSGllcmFyY2h5RWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBJbml0aWFsaXplcyBoaWVyYXJjaHkgcHJvcGVydGllc1xyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBpbml0SGllcmFyY2h5OiBmdW5jdGlvbiBpbml0SGllcmFyY2h5KCkge1xuICAgICAgLy8gZWxlbWVudCdzIHBhcmVudCBsaXN0XG4gICAgICB0aGlzLmhpZXJhcmNoeSA9IFtdOyAvLyBpZiBlbGVtZW50IGlzIHBhcmVudCBvZiBhbm90aGVyIGxheWVyIF9pc1BhcmVudCB3aWxsIGJlIHRydWVcblxuICAgICAgdGhpcy5faXNQYXJlbnQgPSBmYWxzZTtcbiAgICAgIHRoaXMuY2hlY2tQYXJlbnRpbmcoKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBTZXRzIGxheWVyJ3MgaGllcmFyY2h5LlxyXG4gICAgICAgKiBAcGFyYW0ge2FycmF5fSBoaWVyYXJjaFxyXG4gICAgICAgKiBsYXllcidzIHBhcmVudCBsaXN0XHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIHNldEhpZXJhcmNoeTogZnVuY3Rpb24gc2V0SGllcmFyY2h5KGhpZXJhcmNoeSkge1xuICAgICAgdGhpcy5oaWVyYXJjaHkgPSBoaWVyYXJjaHk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICogU2V0cyBsYXllciBhcyBwYXJlbnQuXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIHNldEFzUGFyZW50OiBmdW5jdGlvbiBzZXRBc1BhcmVudCgpIHtcbiAgICAgIHRoaXMuX2lzUGFyZW50ID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBTZWFyY2hlcyBsYXllcidzIHBhcmVudGluZyBjaGFpblxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBjaGVja1BhcmVudGluZzogZnVuY3Rpb24gY2hlY2tQYXJlbnRpbmcoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnBhcmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuY29tcC5idWlsZEVsZW1lbnRQYXJlbnRpbmcodGhpcywgdGhpcy5kYXRhLnBhcmVudCwgW10pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBSZW5kZXJhYmxlRE9NRWxlbWVudCgpIHt9XG5cbiAgKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgX3Byb3RvdHlwZSA9IHtcbiAgICAgIGluaXRFbGVtZW50OiBmdW5jdGlvbiBpbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgICAgICB0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgICAgICB0aGlzLmluaXRSZW5kZXJhYmxlKCk7XG4gICAgICAgIHRoaXMuaW5pdFJlbmRlcmVyRWxlbWVudCgpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCk7XG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDb250ZW50KCk7XG4gICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgfSxcbiAgICAgIGhpZGU6IGZ1bmN0aW9uIGhpZGUoKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdISURFJywgdGhpcyk7XG4gICAgICAgIGlmICghdGhpcy5oaWRkZW4gJiYgKCF0aGlzLmlzSW5SYW5nZSB8fCB0aGlzLmlzVHJhbnNwYXJlbnQpKSB7XG4gICAgICAgICAgdmFyIGVsZW0gPSB0aGlzLmJhc2VFbGVtZW50IHx8IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBzaG93OiBmdW5jdGlvbiBzaG93KCkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnU0hPVycsIHRoaXMpO1xuICAgICAgICBpZiAodGhpcy5pc0luUmFuZ2UgJiYgIXRoaXMuaXNUcmFuc3BhcmVudCkge1xuICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhkKSB7XG4gICAgICAgICAgICB2YXIgZWxlbSA9IHRoaXMuYmFzZUVsZW1lbnQgfHwgdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICAgICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuaGlkZGVuID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHJlbmRlckZyYW1lOiBmdW5jdGlvbiByZW5kZXJGcmFtZSgpIHtcbiAgICAgICAgLy8gSWYgaXQgaXMgZXhwb3J0ZWQgYXMgaGlkZGVuIChkYXRhLmhkID09PSB0cnVlKSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgICAvLyBJZiBpdCBpcyBub3QgdmlzaWJsZSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgICBpZiAodGhpcy5kYXRhLmhkIHx8IHRoaXMuaGlkZGVuKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGhpcy5yZW5kZXJSZW5kZXJhYmxlKCk7XG4gICAgICAgIHRoaXMucmVuZGVyTG9jYWxUcmFuc2Zvcm0oKTtcbiAgICAgICAgdGhpcy5yZW5kZXJFbGVtZW50KCk7XG4gICAgICAgIHRoaXMucmVuZGVySW5uZXJDb250ZW50KCk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVuZGVySW5uZXJDb250ZW50OiBmdW5jdGlvbiByZW5kZXJJbm5lckNvbnRlbnQoKSB7fSxcbiAgICAgIHByZXBhcmVGcmFtZTogZnVuY3Rpb24gcHJlcGFyZUZyYW1lKG51bSkge1xuICAgICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7XG4gICAgICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG4gICAgICAgIHRoaXMuY2hlY2tUcmFuc3BhcmVuY3koKTtcbiAgICAgIH0sXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLmlubmVyRWxlbSA9IG51bGw7XG4gICAgICAgIHRoaXMuZGVzdHJveUJhc2VFbGVtZW50KCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBleHRlbmRQcm90b3R5cGUoW1JlbmRlcmFibGVFbGVtZW50LCBjcmVhdGVQcm94eUZ1bmN0aW9uKF9wcm90b3R5cGUpXSwgUmVuZGVyYWJsZURPTUVsZW1lbnQpO1xuICB9KSgpO1xuXG4gIGZ1bmN0aW9uIElJbWFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG5cbiAgICBpZiAodGhpcy5hc3NldERhdGEgJiYgdGhpcy5hc3NldERhdGEuc2lkKSB7XG4gICAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuc2xvdE1hbmFnZXIuZ2V0UHJvcCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnNvdXJjZVJlY3QgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6IHRoaXMuYXNzZXREYXRhLncsXG4gICAgICBoZWlnaHQ6IHRoaXMuYXNzZXREYXRhLmhcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBJSW1hZ2VFbGVtZW50KTtcblxuICBJSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhc3NldFBhdGggPSB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgdGhpcy5pbm5lckVsZW0gPSBjcmVhdGVOUygnaW1hZ2UnKTtcbiAgICB0aGlzLmlubmVyRWxlbS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5hc3NldERhdGEudyArICdweCcpO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5hc3NldERhdGEuaCArICdweCcpO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgncHJlc2VydmVBc3BlY3RSYXRpbycsIHRoaXMuYXNzZXREYXRhLnByIHx8IHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvKTtcbiAgICB0aGlzLmlubmVyRWxlbS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgYXNzZXRQYXRoKTtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmlubmVyRWxlbSk7XG4gIH07XG5cbiAgSUltYWdlRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5zb3VyY2VSZWN0O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFByb2Nlc3NlZEVsZW1lbnQoZWxlbWVudCwgcG9zaXRpb24pIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtZW50O1xuICAgIHRoaXMucG9zID0gcG9zaXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBJU2hhcGVFbGVtZW50KCkge31cblxuICBJU2hhcGVFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBhZGRTaGFwZVRvTW9kaWZpZXJzOiBmdW5jdGlvbiBhZGRTaGFwZVRvTW9kaWZpZXJzKGRhdGEpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVNb2RpZmllcnMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5zaGFwZU1vZGlmaWVyc1tpXS5hZGRTaGFwZShkYXRhKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGlzU2hhcGVJbkFuaW1hdGVkTW9kaWZpZXJzOiBmdW5jdGlvbiBpc1NoYXBlSW5BbmltYXRlZE1vZGlmaWVycyhkYXRhKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zaGFwZU1vZGlmaWVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLnNoYXBlTW9kaWZpZXJzW2ldLmlzQW5pbWF0ZWRXaXRoU2hhcGUoZGF0YSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICByZW5kZXJNb2RpZmllcnM6IGZ1bmN0aW9uIHJlbmRlck1vZGlmaWVycygpIHtcbiAgICAgIGlmICghdGhpcy5zaGFwZU1vZGlmaWVycy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNoYXBlc1tpXS5zaC5yZXNldCgpO1xuICAgICAgfVxuXG4gICAgICBsZW4gPSB0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aDtcbiAgICAgIHZhciBzaG91bGRCcmVha1Byb2Nlc3M7XG5cbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHNob3VsZEJyZWFrUHJvY2VzcyA9IHRoaXMuc2hhcGVNb2RpZmllcnNbaV0ucHJvY2Vzc1NoYXBlcyh0aGlzLl9pc0ZpcnN0RnJhbWUpOyAvLyB3b3JrYXJvdW5kIHRvIGZpeCBjYXNlcyB3aGVyZSBhIHJlcGVhdGVyIHJlc2V0cyB0aGUgc2hhcGUgc28gdGhlIGZvbGxvd2luZyBwcm9jZXNzZXMgZ2V0IGNhbGxlZCB0d2ljZVxuICAgICAgICAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHNvbHV0aW9uIGZvciB0aGlzXG5cbiAgICAgICAgaWYgKHNob3VsZEJyZWFrUHJvY2Vzcykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZWFyY2hQcm9jZXNzZWRFbGVtZW50OiBmdW5jdGlvbiBzZWFyY2hQcm9jZXNzZWRFbGVtZW50KGVsZW0pIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMucHJvY2Vzc2VkRWxlbWVudHM7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAoZWxlbWVudHNbaV0uZWxlbSA9PT0gZWxlbSkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50c1tpXS5wb3M7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH0sXG4gICAgYWRkUHJvY2Vzc2VkRWxlbWVudDogZnVuY3Rpb24gYWRkUHJvY2Vzc2VkRWxlbWVudChlbGVtLCBwb3MpIHtcbiAgICAgIHZhciBlbGVtZW50cyA9IHRoaXMucHJvY2Vzc2VkRWxlbWVudHM7XG4gICAgICB2YXIgaSA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkpIHtcbiAgICAgICAgaSAtPSAxO1xuXG4gICAgICAgIGlmIChlbGVtZW50c1tpXS5lbGVtID09PSBlbGVtKSB7XG4gICAgICAgICAgZWxlbWVudHNbaV0ucG9zID0gcG9zO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlbGVtZW50cy5wdXNoKG5ldyBQcm9jZXNzZWRFbGVtZW50KGVsZW0sIHBvcykpO1xuICAgIH0sXG4gICAgcHJlcGFyZUZyYW1lOiBmdW5jdGlvbiBwcmVwYXJlRnJhbWUobnVtKSB7XG4gICAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBsaW5lQ2FwRW51bSA9IHtcbiAgICAxOiAnYnV0dCcsXG4gICAgMjogJ3JvdW5kJyxcbiAgICAzOiAnc3F1YXJlJ1xuICB9O1xuICB2YXIgbGluZUpvaW5FbnVtID0ge1xuICAgIDE6ICdtaXRlcicsXG4gICAgMjogJ3JvdW5kJyxcbiAgICAzOiAnYmV2ZWwnXG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHU2hhcGVEYXRhKHRyYW5zZm9ybWVycywgbGV2ZWwsIHNoYXBlKSB7XG4gICAgdGhpcy5jYWNoZXMgPSBbXTtcbiAgICB0aGlzLnN0eWxlcyA9IFtdO1xuICAgIHRoaXMudHJhbnNmb3JtZXJzID0gdHJhbnNmb3JtZXJzO1xuICAgIHRoaXMubFN0ciA9ICcnO1xuICAgIHRoaXMuc2ggPSBzaGFwZTtcbiAgICB0aGlzLmx2bCA9IGxldmVsOyAvLyBUT0RPIGZpbmQgaWYgdGhlcmUgYXJlIHNvbWUgY2FzZXMgd2hlcmUgX2lzQW5pbWF0ZWQgY2FuIGJlIGZhbHNlLlxuICAgIC8vIEZvciBub3csIHNpbmNlIHNoYXBlcyBhZGQgdXAgd2l0aCBvdGhlciBzaGFwZXMuIFRoZXkgaGF2ZSB0byBiZSBjYWxjdWxhdGVkIGV2ZXJ5IHRpbWUuXG4gICAgLy8gT25lIHdheSBvZiBmaW5kaW5nIG91dCBpcyBjaGVja2luZyBpZiBhbGwgc3R5bGVzIGFzc29jaWF0ZWQgdG8gdGhpcyBzaGFwZSBkZXBlbmQgb25seSBvZiB0aGlzIHNoYXBlXG5cbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISFzaGFwZS5rOyAvLyBUT0RPOiBjb21tZW50aW5nIHRoaXMgZm9yIG5vdyBzaW5jZSBhbGwgc2hhcGVzIGFyZSBhbmltYXRlZFxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0cmFuc2Zvcm1lcnMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmICh0cmFuc2Zvcm1lcnNbaV0ubVByb3BzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLl9pc0FuaW1hdGVkID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG4gIH1cblxuICBTVkdTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRydWU7XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHU3R5bGVEYXRhKGRhdGEsIGxldmVsKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnR5cGUgPSBkYXRhLnR5O1xuICAgIHRoaXMuZCA9ICcnO1xuICAgIHRoaXMubHZsID0gbGV2ZWw7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5jbG9zZWQgPSBkYXRhLmhkID09PSB0cnVlO1xuICAgIHRoaXMucEVsZW0gPSBjcmVhdGVOUygncGF0aCcpO1xuICAgIHRoaXMubXNFbGVtID0gbnVsbDtcbiAgfVxuXG4gIFNWR1N0eWxlRGF0YS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kID0gJyc7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gIH07XG5cbiAgZnVuY3Rpb24gRGFzaFByb3BlcnR5KGVsZW0sIGRhdGEsIHJlbmRlcmVyLCBjb250YWluZXIpIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuZGF0YVByb3BzID0gY3JlYXRlU2l6ZWRBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyO1xuICAgIHRoaXMuayA9IGZhbHNlO1xuICAgIHRoaXMuZGFzaFN0ciA9ICcnO1xuICAgIHRoaXMuZGFzaEFycmF5ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGRhdGEubGVuZ3RoID8gZGF0YS5sZW5ndGggLSAxIDogMCk7XG4gICAgdGhpcy5kYXNob2Zmc2V0ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDEpO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBkYXRhLmxlbmd0aCB8fCAwO1xuICAgIHZhciBwcm9wO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBwcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YVtpXS52LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMuayA9IHByb3AuayB8fCB0aGlzLms7XG4gICAgICB0aGlzLmRhdGFQcm9wc1tpXSA9IHtcbiAgICAgICAgbjogZGF0YVtpXS5uLFxuICAgICAgICBwOiBwcm9wXG4gICAgICB9O1xuICAgIH1cblxuICAgIGlmICghdGhpcy5rKSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cblxuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLms7XG4gIH1cblxuICBEYXNoUHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCAmJiAhZm9yY2VSZW5kZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG4gICAgdGhpcy5fbWRmID0gdGhpcy5fbWRmIHx8IGZvcmNlUmVuZGVyO1xuXG4gICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZGF0YVByb3BzLmxlbmd0aDtcblxuICAgICAgaWYgKHRoaXMucmVuZGVyZXIgPT09ICdzdmcnKSB7XG4gICAgICAgIHRoaXMuZGFzaFN0ciA9ICcnO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVByb3BzW2ldLm4gIT09ICdvJykge1xuICAgICAgICAgIGlmICh0aGlzLnJlbmRlcmVyID09PSAnc3ZnJykge1xuICAgICAgICAgICAgdGhpcy5kYXNoU3RyICs9ICcgJyArIHRoaXMuZGF0YVByb3BzW2ldLnAudjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5kYXNoQXJyYXlbaV0gPSB0aGlzLmRhdGFQcm9wc1tpXS5wLnY7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuZGFzaG9mZnNldFswXSA9IHRoaXMuZGF0YVByb3BzW2ldLnAudjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIERhc2hQcm9wZXJ0eSk7XG5cbiAgZnVuY3Rpb24gU1ZHU3Ryb2tlU3R5bGVEYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmQgPSBuZXcgRGFzaFByb3BlcnR5KGVsZW0sIGRhdGEuZCB8fCB7fSwgJ3N2ZycsIHRoaXMpO1xuICAgIHRoaXMuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGVPYjtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLl9pc0FuaW1hdGVkO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdTdHJva2VTdHlsZURhdGEpO1xuXG4gIGZ1bmN0aW9uIFNWR0ZpbGxTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLmMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmMsIDEsIDI1NSwgdGhpcyk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlT2I7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR0ZpbGxTdHlsZURhdGEpO1xuXG4gIGZ1bmN0aW9uIFNWR05vU3R5bGVEYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZU9iO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdOb1N0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gR3JhZGllbnRQcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuYyA9IGNyZWF0ZVR5cGVkQXJyYXkoJ3VpbnQ4YycsIGRhdGEucCAqIDQpO1xuICAgIHZhciBjTGVuZ3RoID0gZGF0YS5rLmtbMF0ucyA/IGRhdGEuay5rWzBdLnMubGVuZ3RoIC0gZGF0YS5wICogNCA6IGRhdGEuay5rLmxlbmd0aCAtIGRhdGEucCAqIDQ7XG4gICAgdGhpcy5vID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGNMZW5ndGgpO1xuICAgIHRoaXMuX2NtZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9vbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fY29sbGFwc2FibGUgPSB0aGlzLmNoZWNrQ29sbGFwc2FibGUoKTtcbiAgICB0aGlzLl9oYXNPcGFjaXR5ID0gY0xlbmd0aDtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyKTtcbiAgICB0aGlzLnByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmssIDEsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuayA9IHRoaXMucHJvcC5rO1xuICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gIH1cblxuICBHcmFkaWVudFByb3BlcnR5LnByb3RvdHlwZS5jb21wYXJlUG9pbnRzID0gZnVuY3Rpb24gKHZhbHVlcywgcG9pbnRzKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLm8ubGVuZ3RoIC8gMjtcbiAgICB2YXIgZGlmZjtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBkaWZmID0gTWF0aC5hYnModmFsdWVzW2kgKiA0XSAtIHZhbHVlc1twb2ludHMgKiA0ICsgaSAqIDJdKTtcblxuICAgICAgaWYgKGRpZmYgPiAwLjAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEdyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmNoZWNrQ29sbGFwc2FibGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuby5sZW5ndGggLyAyICE9PSB0aGlzLmMubGVuZ3RoIC8gNCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmRhdGEuay5rWzBdLnMpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmRhdGEuay5rLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbXBhcmVQb2ludHModGhpcy5kYXRhLmsua1tpXS5zLCB0aGlzLmRhdGEucCkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghdGhpcy5jb21wYXJlUG9pbnRzKHRoaXMuZGF0YS5rLmssIHRoaXMuZGF0YS5wKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIEdyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgdGhpcy5wcm9wLmdldFZhbHVlKCk7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fY21kZiA9IGZhbHNlO1xuICAgIHRoaXMuX29tZGYgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLnByb3AuX21kZiB8fCBmb3JjZVJlbmRlcikge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5kYXRhLnAgKiA0O1xuICAgICAgdmFyIG11bHQ7XG4gICAgICB2YXIgdmFsO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgbXVsdCA9IGkgJSA0ID09PSAwID8gMTAwIDogMjU1O1xuICAgICAgICB2YWwgPSBNYXRoLnJvdW5kKHRoaXMucHJvcC52W2ldICogbXVsdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuY1tpXSAhPT0gdmFsKSB7XG4gICAgICAgICAgdGhpcy5jW2ldID0gdmFsO1xuICAgICAgICAgIHRoaXMuX2NtZGYgPSAhZm9yY2VSZW5kZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuby5sZW5ndGgpIHtcbiAgICAgICAgbGVuID0gdGhpcy5wcm9wLnYubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IHRoaXMuZGF0YS5wICogNDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgbXVsdCA9IGkgJSAyID09PSAwID8gMTAwIDogMTtcbiAgICAgICAgICB2YWwgPSBpICUgMiA9PT0gMCA/IE1hdGgucm91bmQodGhpcy5wcm9wLnZbaV0gKiAxMDApIDogdGhpcy5wcm9wLnZbaV07XG5cbiAgICAgICAgICBpZiAodGhpcy5vW2kgLSB0aGlzLmRhdGEucCAqIDRdICE9PSB2YWwpIHtcbiAgICAgICAgICAgIHRoaXMub1tpIC0gdGhpcy5kYXRhLnAgKiA0XSA9IHZhbDtcbiAgICAgICAgICAgIHRoaXMuX29tZGYgPSAhZm9yY2VSZW5kZXI7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX21kZiA9ICFmb3JjZVJlbmRlcjtcbiAgICB9XG4gIH07XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBHcmFkaWVudFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5pbml0R3JhZGllbnREYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpO1xuICB9XG5cbiAgU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5pbml0R3JhZGllbnREYXRhID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucywgMSwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5lLCAxLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmggPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmggfHwge1xuICAgICAgazogMFxuICAgIH0sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSB8fCB7XG4gICAgICBrOiAwXG4gICAgfSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLmcgPSBuZXcgR3JhZGllbnRQcm9wZXJ0eShlbGVtLCBkYXRhLmcsIHRoaXMpO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZU9iO1xuICAgIHRoaXMuc3RvcHMgPSBbXTtcbiAgICB0aGlzLnNldEdyYWRpZW50RGF0YShzdHlsZU9iLnBFbGVtLCBkYXRhKTtcbiAgICB0aGlzLnNldEdyYWRpZW50T3BhY2l0eShkYXRhLCBzdHlsZU9iKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLl9pc0FuaW1hdGVkO1xuICB9O1xuXG4gIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YS5wcm90b3R5cGUuc2V0R3JhZGllbnREYXRhID0gZnVuY3Rpb24gKHBhdGhFbGVtZW50LCBkYXRhKSB7XG4gICAgdmFyIGdyYWRpZW50SWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICB2YXIgZ2ZpbGwgPSBjcmVhdGVOUyhkYXRhLnQgPT09IDEgPyAnbGluZWFyR3JhZGllbnQnIDogJ3JhZGlhbEdyYWRpZW50Jyk7XG4gICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdpZCcsIGdyYWRpZW50SWQpO1xuICAgIGdmaWxsLnNldEF0dHJpYnV0ZSgnc3ByZWFkTWV0aG9kJywgJ3BhZCcpO1xuICAgIGdmaWxsLnNldEF0dHJpYnV0ZSgnZ3JhZGllbnRVbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xuICAgIHZhciBzdG9wcyA9IFtdO1xuICAgIHZhciBzdG9wO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIGpMZW4gPSBkYXRhLmcucCAqIDQ7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSA0KSB7XG4gICAgICBzdG9wID0gY3JlYXRlTlMoJ3N0b3AnKTtcbiAgICAgIGdmaWxsLmFwcGVuZENoaWxkKHN0b3ApO1xuICAgICAgc3RvcHMucHVzaChzdG9wKTtcbiAgICB9XG5cbiAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoZGF0YS50eSA9PT0gJ2dmJyA/ICdmaWxsJyA6ICdzdHJva2UnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGdyYWRpZW50SWQgKyAnKScpO1xuICAgIHRoaXMuZ2YgPSBnZmlsbDtcbiAgICB0aGlzLmNzdCA9IHN0b3BzO1xuICB9O1xuXG4gIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YS5wcm90b3R5cGUuc2V0R3JhZGllbnRPcGFjaXR5ID0gZnVuY3Rpb24gKGRhdGEsIHN0eWxlT2IpIHtcbiAgICBpZiAodGhpcy5nLl9oYXNPcGFjaXR5ICYmICF0aGlzLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICB2YXIgc3RvcDtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGpMZW47XG4gICAgICB2YXIgbWFzayA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygncGF0aCcpO1xuICAgICAgbWFzay5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgICB2YXIgb3BhY2l0eUlkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICB2YXIgbWFza0lkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCBtYXNrSWQpO1xuICAgICAgdmFyIG9wRmlsbCA9IGNyZWF0ZU5TKGRhdGEudCA9PT0gMSA/ICdsaW5lYXJHcmFkaWVudCcgOiAncmFkaWFsR3JhZGllbnQnKTtcbiAgICAgIG9wRmlsbC5zZXRBdHRyaWJ1dGUoJ2lkJywgb3BhY2l0eUlkKTtcbiAgICAgIG9wRmlsbC5zZXRBdHRyaWJ1dGUoJ3NwcmVhZE1ldGhvZCcsICdwYWQnKTtcbiAgICAgIG9wRmlsbC5zZXRBdHRyaWJ1dGUoJ2dyYWRpZW50VW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKTtcbiAgICAgIGpMZW4gPSBkYXRhLmcuay5rWzBdLnMgPyBkYXRhLmcuay5rWzBdLnMubGVuZ3RoIDogZGF0YS5nLmsuay5sZW5ndGg7XG4gICAgICB2YXIgc3RvcHMgPSB0aGlzLnN0b3BzO1xuXG4gICAgICBmb3IgKGogPSBkYXRhLmcucCAqIDQ7IGogPCBqTGVuOyBqICs9IDIpIHtcbiAgICAgICAgc3RvcCA9IGNyZWF0ZU5TKCdzdG9wJyk7XG4gICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywgJ3JnYigyNTUsMjU1LDI1NSknKTtcbiAgICAgICAgb3BGaWxsLmFwcGVuZENoaWxkKHN0b3ApO1xuICAgICAgICBzdG9wcy5wdXNoKHN0b3ApO1xuICAgICAgfVxuXG4gICAgICBtYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoZGF0YS50eSA9PT0gJ2dmJyA/ICdmaWxsJyA6ICdzdHJva2UnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIG9wYWNpdHlJZCArICcpJyk7XG5cbiAgICAgIGlmIChkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBsaW5lQ2FwRW51bVtkYXRhLmxjIHx8IDJdKTtcbiAgICAgICAgbWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCBsaW5lSm9pbkVudW1bZGF0YS5saiB8fCAyXSk7XG5cbiAgICAgICAgaWYgKGRhdGEubGogPT09IDEpIHtcbiAgICAgICAgICBtYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgZGF0YS5tbCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5vZiA9IG9wRmlsbDtcbiAgICAgIHRoaXMubXMgPSBtYXNrO1xuICAgICAgdGhpcy5vc3QgPSBzdG9wcztcbiAgICAgIHRoaXMubWFza0lkID0gbWFza0lkO1xuICAgICAgc3R5bGVPYi5tc0VsZW0gPSBtYXNrRWxlbWVudDtcbiAgICB9XG4gIH07XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEpO1xuXG4gIGZ1bmN0aW9uIFNWR0dyYWRpZW50U3Ryb2tlU3R5bGVEYXRhKGVsZW0sIGRhdGEsIHN0eWxlT2IpIHtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuICAgIHRoaXMudyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5kID0gbmV3IERhc2hQcm9wZXJ0eShlbGVtLCBkYXRhLmQgfHwge30sICdzdmcnLCB0aGlzKTtcbiAgICB0aGlzLmluaXRHcmFkaWVudERhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYik7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9ICEhdGhpcy5faXNBbmltYXRlZDtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLCBEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBTVkdHcmFkaWVudFN0cm9rZVN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU2hhcGVHcm91cERhdGEoKSB7XG4gICAgdGhpcy5pdCA9IFtdO1xuICAgIHRoaXMucHJldlZpZXdEYXRhID0gW107XG4gICAgdGhpcy5nciA9IGNyZWF0ZU5TKCdnJyk7XG4gIH1cblxuICBmdW5jdGlvbiBTVkdUcmFuc2Zvcm1EYXRhKG1Qcm9wcywgb3AsIGNvbnRhaW5lcikge1xuICAgIHRoaXMudHJhbnNmb3JtID0ge1xuICAgICAgbVByb3BzOiBtUHJvcHMsXG4gICAgICBvcDogb3AsXG4gICAgICBjb250YWluZXI6IGNvbnRhaW5lclxuICAgIH07XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0aGlzLnRyYW5zZm9ybS5tUHJvcHMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoIHx8IHRoaXMudHJhbnNmb3JtLm9wLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gIH1cblxuICB2YXIgYnVpbGRTaGFwZVN0cmluZyA9IGZ1bmN0aW9uIGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLCBsZW5ndGgsIGNsb3NlZCwgbWF0KSB7XG4gICAgaWYgKGxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIHZhciBfbyA9IHBhdGhOb2Rlcy5vO1xuICAgIHZhciBfaSA9IHBhdGhOb2Rlcy5pO1xuICAgIHZhciBfdiA9IHBhdGhOb2Rlcy52O1xuICAgIHZhciBpO1xuICAgIHZhciBzaGFwZVN0cmluZyA9ICcgTScgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX3ZbMF1bMF0sIF92WzBdWzFdKTtcblxuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgc2hhcGVTdHJpbmcgKz0gJyBDJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfb1tpIC0gMV1bMF0sIF9vW2kgLSAxXVsxXSkgKyAnICcgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX2lbaV1bMF0sIF9pW2ldWzFdKSArICcgJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfdltpXVswXSwgX3ZbaV1bMV0pO1xuICAgIH1cblxuICAgIGlmIChjbG9zZWQgJiYgbGVuZ3RoKSB7XG4gICAgICBzaGFwZVN0cmluZyArPSAnIEMnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9vW2kgLSAxXVswXSwgX29baSAtIDFdWzFdKSArICcgJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfaVswXVswXSwgX2lbMF1bMV0pICsgJyAnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF92WzBdWzBdLCBfdlswXVsxXSk7XG4gICAgICBzaGFwZVN0cmluZyArPSAneic7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlU3RyaW5nO1xuICB9O1xuXG4gIHZhciBTVkdFbGVtZW50c1JlbmRlcmVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfaWRlbnRpdHlNYXRyaXggPSBuZXcgTWF0cml4KCk7XG5cbiAgICB2YXIgX21hdHJpeEhlbHBlciA9IG5ldyBNYXRyaXgoKTtcblxuICAgIHZhciBvYiA9IHtcbiAgICAgIGNyZWF0ZVJlbmRlckZ1bmN0aW9uOiBjcmVhdGVSZW5kZXJGdW5jdGlvblxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVSZW5kZXJGdW5jdGlvbihkYXRhKSB7XG4gICAgICBzd2l0Y2ggKGRhdGEudHkpIHtcbiAgICAgICAgY2FzZSAnZmwnOlxuICAgICAgICAgIHJldHVybiByZW5kZXJGaWxsO1xuXG4gICAgICAgIGNhc2UgJ2dmJzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyR3JhZGllbnQ7XG5cbiAgICAgICAgY2FzZSAnZ3MnOlxuICAgICAgICAgIHJldHVybiByZW5kZXJHcmFkaWVudFN0cm9rZTtcblxuICAgICAgICBjYXNlICdzdCc6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlclN0cm9rZTtcblxuICAgICAgICBjYXNlICdzaCc6XG4gICAgICAgIGNhc2UgJ2VsJzpcbiAgICAgICAgY2FzZSAncmMnOlxuICAgICAgICBjYXNlICdzcic6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlclBhdGg7XG5cbiAgICAgICAgY2FzZSAndHInOlxuICAgICAgICAgIHJldHVybiByZW5kZXJDb250ZW50VHJhbnNmb3JtO1xuXG4gICAgICAgIGNhc2UgJ25vJzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyTm9vcDtcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckNvbnRlbnRUcmFuc2Zvcm0oc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICBpZiAoaXNGaXJzdEZyYW1lIHx8IGl0ZW1EYXRhLnRyYW5zZm9ybS5vcC5fbWRmKSB7XG4gICAgICAgIGl0ZW1EYXRhLnRyYW5zZm9ybS5jb250YWluZXIuc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgaXRlbURhdGEudHJhbnNmb3JtLm9wLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNGaXJzdEZyYW1lIHx8IGl0ZW1EYXRhLnRyYW5zZm9ybS5tUHJvcHMuX21kZikge1xuICAgICAgICBpdGVtRGF0YS50cmFuc2Zvcm0uY29udGFpbmVyLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgaXRlbURhdGEudHJhbnNmb3JtLm1Qcm9wcy52LnRvMmRDU1MoKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyTm9vcCgpIHt9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJQYXRoKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbjtcbiAgICAgIHZhciBwYXRoU3RyaW5nVHJhbnNmb3JtZWQ7XG4gICAgICB2YXIgcmVkcmF3O1xuICAgICAgdmFyIHBhdGhOb2RlcztcbiAgICAgIHZhciBsO1xuICAgICAgdmFyIGxMZW4gPSBpdGVtRGF0YS5zdHlsZXMubGVuZ3RoO1xuICAgICAgdmFyIGx2bCA9IGl0ZW1EYXRhLmx2bDtcbiAgICAgIHZhciBwYXRocztcbiAgICAgIHZhciBtYXQ7XG4gICAgICB2YXIgaXRlcmF0aW9ucztcbiAgICAgIHZhciBrO1xuXG4gICAgICBmb3IgKGwgPSAwOyBsIDwgbExlbjsgbCArPSAxKSB7XG4gICAgICAgIHJlZHJhdyA9IGl0ZW1EYXRhLnNoLl9tZGYgfHwgaXNGaXJzdEZyYW1lO1xuXG4gICAgICAgIGlmIChpdGVtRGF0YS5zdHlsZXNbbF0ubHZsIDwgbHZsKSB7XG4gICAgICAgICAgbWF0ID0gX21hdHJpeEhlbHBlci5yZXNldCgpO1xuICAgICAgICAgIGl0ZXJhdGlvbnMgPSBsdmwgLSBpdGVtRGF0YS5zdHlsZXNbbF0ubHZsO1xuICAgICAgICAgIGsgPSBpdGVtRGF0YS50cmFuc2Zvcm1lcnMubGVuZ3RoIC0gMTtcblxuICAgICAgICAgIHdoaWxlICghcmVkcmF3ICYmIGl0ZXJhdGlvbnMgPiAwKSB7XG4gICAgICAgICAgICByZWRyYXcgPSBpdGVtRGF0YS50cmFuc2Zvcm1lcnNba10ubVByb3BzLl9tZGYgfHwgcmVkcmF3O1xuICAgICAgICAgICAgaXRlcmF0aW9ucyAtPSAxO1xuICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZWRyYXcpIHtcbiAgICAgICAgICAgIGl0ZXJhdGlvbnMgPSBsdmwgLSBpdGVtRGF0YS5zdHlsZXNbbF0ubHZsO1xuICAgICAgICAgICAgayA9IGl0ZW1EYXRhLnRyYW5zZm9ybWVycy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgICB3aGlsZSAoaXRlcmF0aW9ucyA+IDApIHtcbiAgICAgICAgICAgICAgbWF0Lm11bHRpcGx5KGl0ZW1EYXRhLnRyYW5zZm9ybWVyc1trXS5tUHJvcHMudik7XG4gICAgICAgICAgICAgIGl0ZXJhdGlvbnMgLT0gMTtcbiAgICAgICAgICAgICAgayAtPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXQgPSBfaWRlbnRpdHlNYXRyaXg7XG4gICAgICAgIH1cblxuICAgICAgICBwYXRocyA9IGl0ZW1EYXRhLnNoLnBhdGhzO1xuICAgICAgICBqTGVuID0gcGF0aHMuX2xlbmd0aDtcblxuICAgICAgICBpZiAocmVkcmF3KSB7XG4gICAgICAgICAgcGF0aFN0cmluZ1RyYW5zZm9ybWVkID0gJyc7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoTm9kZXMgPSBwYXRocy5zaGFwZXNbal07XG5cbiAgICAgICAgICAgIGlmIChwYXRoTm9kZXMgJiYgcGF0aE5vZGVzLl9sZW5ndGgpIHtcbiAgICAgICAgICAgICAgcGF0aFN0cmluZ1RyYW5zZm9ybWVkICs9IGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLCBwYXRoTm9kZXMuX2xlbmd0aCwgcGF0aE5vZGVzLmMsIG1hdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXRlbURhdGEuY2FjaGVzW2xdID0gcGF0aFN0cmluZ1RyYW5zZm9ybWVkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhdGhTdHJpbmdUcmFuc2Zvcm1lZCA9IGl0ZW1EYXRhLmNhY2hlc1tsXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGl0ZW1EYXRhLnN0eWxlc1tsXS5kICs9IHN0eWxlRGF0YS5oZCA9PT0gdHJ1ZSA/ICcnIDogcGF0aFN0cmluZ1RyYW5zZm9ybWVkO1xuICAgICAgICBpdGVtRGF0YS5zdHlsZXNbbF0uX21kZiA9IHJlZHJhdyB8fCBpdGVtRGF0YS5zdHlsZXNbbF0uX21kZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJGaWxsKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIHN0eWxlRWxlbSA9IGl0ZW1EYXRhLnN0eWxlO1xuXG4gICAgICBpZiAoaXRlbURhdGEuYy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdmaWxsJywgJ3JnYignICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMl0pICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgaXRlbURhdGEuby52KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJHcmFkaWVudFN0cm9rZShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHJlbmRlckdyYWRpZW50KHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSk7XG4gICAgICByZW5kZXJTdHJva2Uoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJHcmFkaWVudChzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHZhciBnZmlsbCA9IGl0ZW1EYXRhLmdmO1xuICAgICAgdmFyIGhhc09wYWNpdHkgPSBpdGVtRGF0YS5nLl9oYXNPcGFjaXR5O1xuICAgICAgdmFyIHB0MSA9IGl0ZW1EYXRhLnMudjtcbiAgICAgIHZhciBwdDIgPSBpdGVtRGF0YS5lLnY7XG5cbiAgICAgIGlmIChpdGVtRGF0YS5vLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHZhciBhdHRyID0gc3R5bGVEYXRhLnR5ID09PSAnZ2YnID8gJ2ZpbGwtb3BhY2l0eScgOiAnc3Ryb2tlLW9wYWNpdHknO1xuICAgICAgICBpdGVtRGF0YS5zdHlsZS5wRWxlbS5zZXRBdHRyaWJ1dGUoYXR0ciwgaXRlbURhdGEuby52KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1EYXRhLnMuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdmFyIGF0dHIxID0gc3R5bGVEYXRhLnQgPT09IDEgPyAneDEnIDogJ2N4JztcbiAgICAgICAgdmFyIGF0dHIyID0gYXR0cjEgPT09ICd4MScgPyAneTEnIDogJ2N5JztcbiAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKGF0dHIxLCBwdDFbMF0pO1xuICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoYXR0cjIsIHB0MVsxXSk7XG5cbiAgICAgICAgaWYgKGhhc09wYWNpdHkgJiYgIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKGF0dHIxLCBwdDFbMF0pO1xuICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZShhdHRyMiwgcHQxWzFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc3RvcHM7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgc3RvcDtcblxuICAgICAgaWYgKGl0ZW1EYXRhLmcuX2NtZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHN0b3BzID0gaXRlbURhdGEuY3N0O1xuICAgICAgICB2YXIgY1ZhbHVlcyA9IGl0ZW1EYXRhLmcuYztcbiAgICAgICAgbGVuID0gc3RvcHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHN0b3AgPSBzdG9wc1tpXTtcbiAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZSgnb2Zmc2V0JywgY1ZhbHVlc1tpICogNF0gKyAnJScpO1xuICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdzdG9wLWNvbG9yJywgJ3JnYignICsgY1ZhbHVlc1tpICogNCArIDFdICsgJywnICsgY1ZhbHVlc1tpICogNCArIDJdICsgJywnICsgY1ZhbHVlc1tpICogNCArIDNdICsgJyknKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoaGFzT3BhY2l0eSAmJiAoaXRlbURhdGEuZy5fb21kZiB8fCBpc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgIHZhciBvVmFsdWVzID0gaXRlbURhdGEuZy5vO1xuXG4gICAgICAgIGlmIChpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgIHN0b3BzID0gaXRlbURhdGEuY3N0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0b3BzID0gaXRlbURhdGEub3N0O1xuICAgICAgICB9XG5cbiAgICAgICAgbGVuID0gc3RvcHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHN0b3AgPSBzdG9wc1tpXTtcblxuICAgICAgICAgIGlmICghaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdvZmZzZXQnLCBvVmFsdWVzW2kgKiAyXSArICclJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ3N0b3Atb3BhY2l0eScsIG9WYWx1ZXNbaSAqIDIgKyAxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN0eWxlRGF0YS50ID09PSAxKSB7XG4gICAgICAgIGlmIChpdGVtRGF0YS5lLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCd4MicsIHB0MlswXSk7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCd5MicsIHB0MlsxXSk7XG5cbiAgICAgICAgICBpZiAoaGFzT3BhY2l0eSAmJiAhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgneDInLCBwdDJbMF0pO1xuICAgICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCd5MicsIHB0MlsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmFkO1xuXG4gICAgICAgIGlmIChpdGVtRGF0YS5zLl9tZGYgfHwgaXRlbURhdGEuZS5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICAgIHJhZCA9IE1hdGguc3FydChNYXRoLnBvdyhwdDFbMF0gLSBwdDJbMF0sIDIpICsgTWF0aC5wb3cocHQxWzFdIC0gcHQyWzFdLCAyKSk7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdyJywgcmFkKTtcblxuICAgICAgICAgIGlmIChoYXNPcGFjaXR5ICYmICFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCdyJywgcmFkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXRlbURhdGEuZS5fbWRmIHx8IGl0ZW1EYXRhLmguX21kZiB8fCBpdGVtRGF0YS5hLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgaWYgKCFyYWQpIHtcbiAgICAgICAgICAgIHJhZCA9IE1hdGguc3FydChNYXRoLnBvdyhwdDFbMF0gLSBwdDJbMF0sIDIpICsgTWF0aC5wb3cocHQxWzFdIC0gcHQyWzFdLCAyKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGFuZyA9IE1hdGguYXRhbjIocHQyWzFdIC0gcHQxWzFdLCBwdDJbMF0gLSBwdDFbMF0pO1xuICAgICAgICAgIHZhciBwZXJjZW50ID0gaXRlbURhdGEuaC52O1xuXG4gICAgICAgICAgaWYgKHBlcmNlbnQgPj0gMSkge1xuICAgICAgICAgICAgcGVyY2VudCA9IDAuOTk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwZXJjZW50IDw9IC0xKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gLTAuOTk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGRpc3QgPSByYWQgKiBwZXJjZW50O1xuICAgICAgICAgIHZhciB4ID0gTWF0aC5jb3MoYW5nICsgaXRlbURhdGEuYS52KSAqIGRpc3QgKyBwdDFbMF07XG4gICAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVsxXTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ2Z4JywgeCk7XG4gICAgICAgICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdmeScsIHkpO1xuXG4gICAgICAgICAgaWYgKGhhc09wYWNpdHkgJiYgIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ2Z4JywgeCk7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ2Z5JywgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vIGdmaWxsLnNldEF0dHJpYnV0ZSgnZnknLCcyMDAnKTtcblxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlclN0cm9rZShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcbiAgICAgIHZhciBkID0gaXRlbURhdGEuZDtcblxuICAgICAgaWYgKGQgJiYgKGQuX21kZiB8fCBpc0ZpcnN0RnJhbWUpICYmIGQuZGFzaFN0cikge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgZC5kYXNoU3RyKTtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnLCBkLmRhc2hvZmZzZXRbMF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEuYyAmJiAoaXRlbURhdGEuYy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ3JnYignICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMl0pICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgc3R5bGVFbGVtLnBFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW9wYWNpdHknLCBpdGVtRGF0YS5vLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEudy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBpdGVtRGF0YS53LnYpO1xuXG4gICAgICAgIGlmIChzdHlsZUVsZW0ubXNFbGVtKSB7XG4gICAgICAgICAgc3R5bGVFbGVtLm1zRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIGl0ZW1EYXRhLncudik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICBmdW5jdGlvbiBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIC8vIExpc3Qgb2YgZHJhd2FibGUgZWxlbWVudHNcbiAgICB0aGlzLnNoYXBlcyA9IFtdOyAvLyBGdWxsIHNoYXBlIGRhdGFcblxuICAgIHRoaXMuc2hhcGVzRGF0YSA9IGRhdGEuc2hhcGVzOyAvLyBMaXN0IG9mIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBzaGFwZXNcblxuICAgIHRoaXMuc3R5bGVzTGlzdCA9IFtdOyAvLyBMaXN0IG9mIG1vZGlmaWVycyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBzaGFwZXNcblxuICAgIHRoaXMuc2hhcGVNb2RpZmllcnMgPSBbXTsgLy8gTGlzdCBvZiBpdGVtcyBpbiBzaGFwZSB0cmVlXG5cbiAgICB0aGlzLml0ZW1zRGF0YSA9IFtdOyAvLyBMaXN0IG9mIGl0ZW1zIGluIHByZXZpb3VzIHNoYXBlIHRyZWVcblxuICAgIHRoaXMucHJvY2Vzc2VkRWxlbWVudHMgPSBbXTsgLy8gTGlzdCBvZiBhbmltYXRlZCBjb21wb25lbnRzXG5cbiAgICB0aGlzLmFuaW1hdGVkQ29udGVudHMgPSBbXTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApOyAvLyBNb3ZpbmcgYW55IHByb3BlcnR5IHRoYXQgZG9lc24ndCBnZXQgdG9vIG11Y2ggYWNjZXNzIGFmdGVyIGluaXRpYWxpemF0aW9uIGJlY2F1c2Ugb2Ygdjggd2F5IG9mIGhhbmRsaW5nIG1vcmUgdGhhbiAxMCBwcm9wZXJ0aWVzLlxuICAgIC8vIExpc3Qgb2YgZWxlbWVudHMgdGhhdCBoYXZlIGJlZW4gY3JlYXRlZFxuXG4gICAgdGhpcy5wcmV2Vmlld0RhdGEgPSBbXTsgLy8gTW92aW5nIGFueSBwcm9wZXJ0eSB0aGF0IGRvZXNuJ3QgZ2V0IHRvbyBtdWNoIGFjY2VzcyBhZnRlciBpbml0aWFsaXphdGlvbiBiZWNhdXNlIG9mIHY4IHdheSBvZiBoYW5kbGluZyBtb3JlIHRoYW4gMTAgcHJvcGVydGllcy5cbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIFNWR0Jhc2VFbGVtZW50LCBJU2hhcGVFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50XSwgU1ZHU2hhcGVFbGVtZW50KTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRTZWNvbmRhcnlFbGVtZW50ID0gZnVuY3Rpb24gKCkge307XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmJ1aWxkRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLnByZXZWaWV3RGF0YSwgdGhpcy5sYXllckVsZW1lbnQsIDAsIFtdLCB0cnVlKTtcbiAgICB0aGlzLmZpbHRlclVuaXF1ZVNoYXBlcygpO1xuICB9O1xuICAvKlxyXG4gIFRoaXMgbWV0aG9kIHNlYXJjaGVzIGZvciBtdWx0aXBsZSBzaGFwZXMgdGhhdCBhZmZlY3QgYSBzaW5nbGUgZWxlbWVudCBhbmQgb25lIG9mIHRoZW0gaXMgYW5pbWF0ZWRcclxuICAqL1xuXG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5maWx0ZXJVbmlxdWVTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgc2hhcGU7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuICAgIHZhciBzdHlsZTtcbiAgICB2YXIgdGVtcFNoYXBlcyA9IFtdO1xuICAgIHZhciBhcmVBbmltYXRlZCA9IGZhbHNlO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgc3R5bGUgPSB0aGlzLnN0eWxlc0xpc3Rbal07XG4gICAgICBhcmVBbmltYXRlZCA9IGZhbHNlO1xuICAgICAgdGVtcFNoYXBlcy5sZW5ndGggPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgc2hhcGUgPSB0aGlzLnNoYXBlc1tpXTtcblxuICAgICAgICBpZiAoc2hhcGUuc3R5bGVzLmluZGV4T2Yoc3R5bGUpICE9PSAtMSkge1xuICAgICAgICAgIHRlbXBTaGFwZXMucHVzaChzaGFwZSk7XG4gICAgICAgICAgYXJlQW5pbWF0ZWQgPSBzaGFwZS5faXNBbmltYXRlZCB8fCBhcmVBbmltYXRlZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGVtcFNoYXBlcy5sZW5ndGggPiAxICYmIGFyZUFuaW1hdGVkKSB7XG4gICAgICAgIHRoaXMuc2V0U2hhcGVzQXNBbmltYXRlZCh0ZW1wU2hhcGVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZXRTaGFwZXNBc0FuaW1hdGVkID0gZnVuY3Rpb24gKHNoYXBlcykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzaGFwZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBzaGFwZXNbaV0uc2V0QXNBbmltYXRlZCgpO1xuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBsZXZlbCkge1xuICAgIC8vIFRPRE86IHByZXZlbnQgZHJhd2luZyBvZiBoaWRkZW4gc3R5bGVzXG4gICAgdmFyIGVsZW1lbnREYXRhO1xuICAgIHZhciBzdHlsZU9iID0gbmV3IFNWR1N0eWxlRGF0YShkYXRhLCBsZXZlbCk7XG4gICAgdmFyIHBhdGhFbGVtZW50ID0gc3R5bGVPYi5wRWxlbTtcblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnKSB7XG4gICAgICBlbGVtZW50RGF0YSA9IG5ldyBTVkdTdHJva2VTdHlsZURhdGEodGhpcywgZGF0YSwgc3R5bGVPYik7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZmwnKSB7XG4gICAgICBlbGVtZW50RGF0YSA9IG5ldyBTVkdGaWxsU3R5bGVEYXRhKHRoaXMsIGRhdGEsIHN0eWxlT2IpO1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2dmJyB8fCBkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICB2YXIgR3JhZGllbnRDb25zdHJ1Y3RvciA9IGRhdGEudHkgPT09ICdnZicgPyBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEgOiBTVkdHcmFkaWVudFN0cm9rZVN0eWxlRGF0YTtcbiAgICAgIGVsZW1lbnREYXRhID0gbmV3IEdyYWRpZW50Q29uc3RydWN0b3IodGhpcywgZGF0YSwgc3R5bGVPYik7XG4gICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChlbGVtZW50RGF0YS5nZik7XG5cbiAgICAgIGlmIChlbGVtZW50RGF0YS5tYXNrSWQpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZWxlbWVudERhdGEubXMpO1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChlbGVtZW50RGF0YS5vZik7XG4gICAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnbWFzaycsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZWxlbWVudERhdGEubWFza0lkICsgJyknKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdubycpIHtcbiAgICAgIGVsZW1lbnREYXRhID0gbmV3IFNWR05vU3R5bGVEYXRhKHRoaXMsIGRhdGEsIHN0eWxlT2IpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBsaW5lQ2FwRW51bVtkYXRhLmxjIHx8IDJdKTtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVqb2luJywgbGluZUpvaW5FbnVtW2RhdGEubGogfHwgMl0pO1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMCcpO1xuXG4gICAgICBpZiAoZGF0YS5saiA9PT0gMSkge1xuICAgICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgZGF0YS5tbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuciA9PT0gMikge1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsLXJ1bGUnLCAnZXZlbm9kZCcpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmxuKSB7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgZGF0YS5sbik7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2wpIHtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBkYXRhLmNsKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5ibSkge1xuICAgICAgcGF0aEVsZW1lbnQuc3R5bGVbJ21peC1ibGVuZC1tb2RlJ10gPSBnZXRCbGVuZE1vZGUoZGF0YS5ibSk7XG4gICAgfVxuXG4gICAgdGhpcy5zdHlsZXNMaXN0LnB1c2goc3R5bGVPYik7XG4gICAgdGhpcy5hZGRUb0FuaW1hdGVkQ29udGVudHMoZGF0YSwgZWxlbWVudERhdGEpO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUdyb3VwRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IFNoYXBlR3JvdXBEYXRhKCk7XG5cbiAgICBpZiAoZGF0YS5sbikge1xuICAgICAgZWxlbWVudERhdGEuZ3Iuc2V0QXR0cmlidXRlKCdpZCcsIGRhdGEubG4pO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmNsKSB7XG4gICAgICBlbGVtZW50RGF0YS5nci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgZGF0YS5jbCk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuYm0pIHtcbiAgICAgIGVsZW1lbnREYXRhLmdyLnN0eWxlWydtaXgtYmxlbmQtbW9kZSddID0gZ2V0QmxlbmRNb2RlKGRhdGEuYm0pO1xuICAgIH1cblxuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVRyYW5zZm9ybUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgY29udGFpbmVyKSB7XG4gICAgdmFyIHRyYW5zZm9ybVByb3BlcnR5ID0gVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsIGRhdGEsIHRoaXMpO1xuICAgIHZhciBlbGVtZW50RGF0YSA9IG5ldyBTVkdUcmFuc2Zvcm1EYXRhKHRyYW5zZm9ybVByb3BlcnR5LCB0cmFuc2Zvcm1Qcm9wZXJ0eS5vLCBjb250YWluZXIpO1xuICAgIHRoaXMuYWRkVG9BbmltYXRlZENvbnRlbnRzKGRhdGEsIGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTaGFwZUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgb3duVHJhbnNmb3JtZXJzLCBsZXZlbCkge1xuICAgIHZhciB0eSA9IDQ7XG5cbiAgICBpZiAoZGF0YS50eSA9PT0gJ3JjJykge1xuICAgICAgdHkgPSA1O1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2VsJykge1xuICAgICAgdHkgPSA2O1xuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ3NyJykge1xuICAgICAgdHkgPSA3O1xuICAgIH1cblxuICAgIHZhciBzaGFwZVByb3BlcnR5ID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKHRoaXMsIGRhdGEsIHR5LCB0aGlzKTtcbiAgICB2YXIgZWxlbWVudERhdGEgPSBuZXcgU1ZHU2hhcGVEYXRhKG93blRyYW5zZm9ybWVycywgbGV2ZWwsIHNoYXBlUHJvcGVydHkpO1xuICAgIHRoaXMuc2hhcGVzLnB1c2goZWxlbWVudERhdGEpO1xuICAgIHRoaXMuYWRkU2hhcGVUb01vZGlmaWVycyhlbGVtZW50RGF0YSk7XG4gICAgdGhpcy5hZGRUb0FuaW1hdGVkQ29udGVudHMoZGF0YSwgZWxlbWVudERhdGEpO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmFkZFRvQW5pbWF0ZWRDb250ZW50cyA9IGZ1bmN0aW9uIChkYXRhLCBlbGVtZW50KSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmFuaW1hdGVkQ29udGVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmICh0aGlzLmFuaW1hdGVkQ29udGVudHNbaV0uZWxlbWVudCA9PT0gZWxlbWVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGVkQ29udGVudHMucHVzaCh7XG4gICAgICBmbjogU1ZHRWxlbWVudHNSZW5kZXJlci5jcmVhdGVSZW5kZXJGdW5jdGlvbihkYXRhKSxcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZXRFbGVtZW50U3R5bGVzID0gZnVuY3Rpb24gKGVsZW1lbnREYXRhKSB7XG4gICAgdmFyIGFyciA9IGVsZW1lbnREYXRhLnN0eWxlcztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IHRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzTGlzdFtqXS5jbG9zZWQpIHtcbiAgICAgICAgYXJyLnB1c2godGhpcy5zdHlsZXNMaXN0W2pdKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZWxvYWRTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5pdGVtc0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnByZXZWaWV3RGF0YVtpXSA9IHRoaXMuaXRlbXNEYXRhW2ldO1xuICAgIH1cblxuICAgIHRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRoaXMucHJldlZpZXdEYXRhLCB0aGlzLmxheWVyRWxlbWVudCwgMCwgW10sIHRydWUpO1xuICAgIHRoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7XG4gICAgbGVuID0gdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlck1vZGlmaWVycygpO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuc2VhcmNoU2hhcGVzID0gZnVuY3Rpb24gKGFyciwgaXRlbXNEYXRhLCBwcmV2Vmlld0RhdGEsIGNvbnRhaW5lciwgbGV2ZWwsIHRyYW5zZm9ybWVycywgcmVuZGVyKSB7XG4gICAgdmFyIG93blRyYW5zZm9ybWVycyA9IFtdLmNvbmNhdCh0cmFuc2Zvcm1lcnMpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgb3duU3R5bGVzID0gW107XG4gICAgdmFyIG93bk1vZGlmaWVycyA9IFtdO1xuICAgIHZhciBjdXJyZW50VHJhbnNmb3JtO1xuICAgIHZhciBtb2RpZmllcjtcbiAgICB2YXIgcHJvY2Vzc2VkUG9zO1xuXG4gICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgcHJvY2Vzc2VkUG9zID0gdGhpcy5zZWFyY2hQcm9jZXNzZWRFbGVtZW50KGFycltpXSk7XG5cbiAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgIGFycltpXS5fcmVuZGVyID0gcmVuZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNEYXRhW2ldID0gcHJldlZpZXdEYXRhW3Byb2Nlc3NlZFBvcyAtIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyW2ldLnR5ID09PSAnZmwnIHx8IGFycltpXS50eSA9PT0gJ3N0JyB8fCBhcnJbaV0udHkgPT09ICdnZicgfHwgYXJyW2ldLnR5ID09PSAnZ3MnIHx8IGFycltpXS50eSA9PT0gJ25vJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlU3R5bGVFbGVtZW50KGFycltpXSwgbGV2ZWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXS5zdHlsZS5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcnJbaV0uX3JlbmRlcikge1xuICAgICAgICAgIGlmIChpdGVtc0RhdGFbaV0uc3R5bGUucEVsZW0ucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbXNEYXRhW2ldLnN0eWxlLnBFbGVtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBvd25TdHlsZXMucHVzaChpdGVtc0RhdGFbaV0uc3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGpMZW4gPSBpdGVtc0RhdGFbaV0uaXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YVtqXSA9IGl0ZW1zRGF0YVtpXS5pdFtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlYXJjaFNoYXBlcyhhcnJbaV0uaXQsIGl0ZW1zRGF0YVtpXS5pdCwgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YSwgaXRlbXNEYXRhW2ldLmdyLCBsZXZlbCArIDEsIG93blRyYW5zZm9ybWVycywgcmVuZGVyKTtcblxuICAgICAgICBpZiAoYXJyW2ldLl9yZW5kZXIpIHtcbiAgICAgICAgICBpZiAoaXRlbXNEYXRhW2ldLmdyLnBhcmVudE5vZGUgIT09IGNvbnRhaW5lcikge1xuICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGl0ZW1zRGF0YVtpXS5ncik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3RyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlVHJhbnNmb3JtRWxlbWVudChhcnJbaV0sIGNvbnRhaW5lcik7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50VHJhbnNmb3JtID0gaXRlbXNEYXRhW2ldLnRyYW5zZm9ybTtcbiAgICAgICAgb3duVHJhbnNmb3JtZXJzLnB1c2goY3VycmVudFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3NoJyB8fCBhcnJbaV0udHkgPT09ICdyYycgfHwgYXJyW2ldLnR5ID09PSAnZWwnIHx8IGFycltpXS50eSA9PT0gJ3NyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlU2hhcGVFbGVtZW50KGFycltpXSwgb3duVHJhbnNmb3JtZXJzLCBsZXZlbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNldEVsZW1lbnRTdHlsZXMoaXRlbXNEYXRhW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndG0nIHx8IGFycltpXS50eSA9PT0gJ3JkJyB8fCBhcnJbaV0udHkgPT09ICdtcycgfHwgYXJyW2ldLnR5ID09PSAncGInIHx8IGFycltpXS50eSA9PT0gJ3p6JyB8fCBhcnJbaV0udHkgPT09ICdvcCcpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBtb2RpZmllciA9IFNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7XG4gICAgICAgICAgbW9kaWZpZXIuaW5pdCh0aGlzLCBhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3JwJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSBtb2RpZmllcjtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFyciwgaSwgaXRlbXNEYXRhKTtcbiAgICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIHJlbmRlciA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGlmaWVyID0gaXRlbXNEYXRhW2ldO1xuICAgICAgICAgIG1vZGlmaWVyLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0sIGkgKyAxKTtcbiAgICB9XG5cbiAgICBsZW4gPSBvd25TdHlsZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBvd25TdHlsZXNbaV0uY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBsZW4gPSBvd25Nb2RpZmllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBvd25Nb2RpZmllcnNbaV0uY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJTaGFwZSgpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5zdHlsZXNMaXN0W2ldLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlc0xpc3RbaV0ubXNFbGVtKSB7XG4gICAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLm1zRWxlbS5zZXRBdHRyaWJ1dGUoJ2QnLCB0aGlzLnN0eWxlc0xpc3RbaV0uZCk7IC8vIEFkZGluZyBNMCAwIGZpeGVzIHNhbWUgbWFzayBidWcgb24gYWxsIGJyb3dzZXJzXG5cbiAgICAgICAgICB0aGlzLnN0eWxlc0xpc3RbaV0uZCA9ICdNMCAwJyArIHRoaXMuc3R5bGVzTGlzdFtpXS5kO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnBFbGVtLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMuc3R5bGVzTGlzdFtpXS5kIHx8ICdNMCAwJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyU2hhcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuYW5pbWF0ZWRDb250ZW50cy5sZW5ndGg7XG4gICAgdmFyIGFuaW1hdGVkQ29udGVudDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgYW5pbWF0ZWRDb250ZW50ID0gdGhpcy5hbmltYXRlZENvbnRlbnRzW2ldO1xuXG4gICAgICBpZiAoKHRoaXMuX2lzRmlyc3RGcmFtZSB8fCBhbmltYXRlZENvbnRlbnQuZWxlbWVudC5faXNBbmltYXRlZCkgJiYgYW5pbWF0ZWRDb250ZW50LmRhdGEgIT09IHRydWUpIHtcbiAgICAgICAgYW5pbWF0ZWRDb250ZW50LmZuKGFuaW1hdGVkQ29udGVudC5kYXRhLCBhbmltYXRlZENvbnRlbnQuZWxlbWVudCwgdGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZGVzdHJveUJhc2VFbGVtZW50KCk7XG4gICAgdGhpcy5zaGFwZXNEYXRhID0gbnVsbDtcbiAgICB0aGlzLml0ZW1zRGF0YSA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gTGV0dGVyUHJvcHMobywgc3csIHNjLCBmYywgbSwgcCkge1xuICAgIHRoaXMubyA9IG87XG4gICAgdGhpcy5zdyA9IHN3O1xuICAgIHRoaXMuc2MgPSBzYztcbiAgICB0aGlzLmZjID0gZmM7XG4gICAgdGhpcy5tID0gbTtcbiAgICB0aGlzLnAgPSBwO1xuICAgIHRoaXMuX21kZiA9IHtcbiAgICAgIG86IHRydWUsXG4gICAgICBzdzogISFzdyxcbiAgICAgIHNjOiAhIXNjLFxuICAgICAgZmM6ICEhZmMsXG4gICAgICBtOiB0cnVlLFxuICAgICAgcDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBMZXR0ZXJQcm9wcy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKG8sIHN3LCBzYywgZmMsIG0sIHApIHtcbiAgICB0aGlzLl9tZGYubyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5zdyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5zYyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5mYyA9IGZhbHNlO1xuICAgIHRoaXMuX21kZi5tID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmLnAgPSBmYWxzZTtcbiAgICB2YXIgdXBkYXRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMubyAhPT0gbykge1xuICAgICAgdGhpcy5vID0gbztcbiAgICAgIHRoaXMuX21kZi5vID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnN3ICE9PSBzdykge1xuICAgICAgdGhpcy5zdyA9IHN3O1xuICAgICAgdGhpcy5fbWRmLnN3ID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNjICE9PSBzYykge1xuICAgICAgdGhpcy5zYyA9IHNjO1xuICAgICAgdGhpcy5fbWRmLnNjID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZjICE9PSBmYykge1xuICAgICAgdGhpcy5mYyA9IGZjO1xuICAgICAgdGhpcy5fbWRmLmZjID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm0gIT09IG0pIHtcbiAgICAgIHRoaXMubSA9IG07XG4gICAgICB0aGlzLl9tZGYubSA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocC5sZW5ndGggJiYgKHRoaXMucFswXSAhPT0gcFswXSB8fCB0aGlzLnBbMV0gIT09IHBbMV0gfHwgdGhpcy5wWzRdICE9PSBwWzRdIHx8IHRoaXMucFs1XSAhPT0gcFs1XSB8fCB0aGlzLnBbMTJdICE9PSBwWzEyXSB8fCB0aGlzLnBbMTNdICE9PSBwWzEzXSkpIHtcbiAgICAgIHRoaXMucCA9IHA7XG4gICAgICB0aGlzLl9tZGYucCA9IHRydWU7XG4gICAgICB1cGRhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfTtcblxuICBmdW5jdGlvbiBUZXh0UHJvcGVydHkoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuX2ZyYW1lSWQgPSBpbml0aWFsRGVmYXVsdEZyYW1lO1xuICAgIHRoaXMucHYgPSAnJztcbiAgICB0aGlzLnYgPSAnJztcbiAgICB0aGlzLmtmID0gZmFsc2U7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcblxuICAgIGlmIChkYXRhLmQgJiYgZGF0YS5kLnNpZCkge1xuICAgICAgZGF0YS5kID0gZWxlbS5nbG9iYWxEYXRhLnNsb3RNYW5hZ2VyLmdldFByb3AoZGF0YS5kKTtcbiAgICB9XG5cbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb21wID0gdGhpcy5lbGVtLmNvbXA7XG4gICAgdGhpcy5rZXlzSW5kZXggPSAwO1xuICAgIHRoaXMuY2FuUmVzaXplID0gZmFsc2U7XG4gICAgdGhpcy5taW5pbXVtRm9udFNpemUgPSAxO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgdGhpcy5jdXJyZW50RGF0YSA9IHtcbiAgICAgIGFzY2VudDogMCxcbiAgICAgIGJveFdpZHRoOiB0aGlzLmRlZmF1bHRCb3hXaWR0aCxcbiAgICAgIGY6ICcnLFxuICAgICAgZlN0eWxlOiAnJyxcbiAgICAgIGZXZWlnaHQ6ICcnLFxuICAgICAgZmM6ICcnLFxuICAgICAgajogJycsXG4gICAgICBqdXN0aWZ5T2Zmc2V0OiAnJyxcbiAgICAgIGw6IFtdLFxuICAgICAgbGg6IDAsXG4gICAgICBsaW5lV2lkdGhzOiBbXSxcbiAgICAgIGxzOiAnJyxcbiAgICAgIG9mOiAnJyxcbiAgICAgIHM6ICcnLFxuICAgICAgc2M6ICcnLFxuICAgICAgc3c6IDAsXG4gICAgICB0OiAwLFxuICAgICAgdHI6IDAsXG4gICAgICBzejogMCxcbiAgICAgIHBzOiBudWxsLFxuICAgICAgZmlsbENvbG9yQW5pbTogZmFsc2UsXG4gICAgICBzdHJva2VDb2xvckFuaW06IGZhbHNlLFxuICAgICAgc3Ryb2tlV2lkdGhBbmltOiBmYWxzZSxcbiAgICAgIHlPZmZzZXQ6IDAsXG4gICAgICBmaW5hbFNpemU6IDAsXG4gICAgICBmaW5hbFRleHQ6IFtdLFxuICAgICAgZmluYWxMaW5lSGVpZ2h0OiAwLFxuICAgICAgX19jb21wbGV0ZTogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuY29weURhdGEodGhpcy5jdXJyZW50RGF0YSwgdGhpcy5kYXRhLmQua1swXS5zKTtcblxuICAgIGlmICghdGhpcy5zZWFyY2hQcm9wZXJ0eSgpKSB7XG4gICAgICB0aGlzLmNvbXBsZXRlVGV4dERhdGEodGhpcy5jdXJyZW50RGF0YSk7XG4gICAgfVxuICB9XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5kZWZhdWx0Qm94V2lkdGggPSBbMCwgMF07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5jb3B5RGF0YSA9IGZ1bmN0aW9uIChvYmosIGRhdGEpIHtcbiAgICBmb3IgKHZhciBzIGluIGRhdGEpIHtcbiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZGF0YSwgcykpIHtcbiAgICAgICAgb2JqW3NdID0gZGF0YVtzXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2V0Q3VycmVudERhdGEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghZGF0YS5fX2NvbXBsZXRlKSB7XG4gICAgICB0aGlzLmNvbXBsZXRlVGV4dERhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RGF0YSA9IGRhdGE7XG4gICAgdGhpcy5jdXJyZW50RGF0YS5ib3hXaWR0aCA9IHRoaXMuY3VycmVudERhdGEuYm94V2lkdGggfHwgdGhpcy5kZWZhdWx0Qm94V2lkdGg7XG4gICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaFByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaEtleWZyYW1lcygpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoS2V5ZnJhbWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMua2YgPSB0aGlzLmRhdGEuZC5rLmxlbmd0aCA+IDE7XG5cbiAgICBpZiAodGhpcy5rZikge1xuICAgICAgdGhpcy5hZGRFZmZlY3QodGhpcy5nZXRLZXlmcmFtZVZhbHVlLmJpbmQodGhpcykpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmtmO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuYWRkRWZmZWN0ID0gZnVuY3Rpb24gKGVmZmVjdEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UucHVzaChlZmZlY3RGdW5jdGlvbik7XG4gICAgdGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKF9maW5hbFZhbHVlKSB7XG4gICAgaWYgKCh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQgfHwgIXRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCkgJiYgIV9maW5hbFZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50RGF0YS50ID0gdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucy50O1xuICAgIHZhciBjdXJyZW50VmFsdWUgPSB0aGlzLmN1cnJlbnREYXRhO1xuICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmtleXNJbmRleDtcblxuICAgIGlmICh0aGlzLmxvY2spIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudERhdGEodGhpcy5jdXJyZW50RGF0YSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sb2NrID0gdHJ1ZTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICAgIHZhciBmaW5hbFZhbHVlID0gX2ZpbmFsVmFsdWUgfHwgdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucztcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgLy8gQ2hlY2tpbmcgaWYgaW5kZXggY2hhbmdlZCB0byBwcmV2ZW50IGNyZWF0aW5nIGEgbmV3IG9iamVjdCBldmVyeSB0aW1lIHRoZSBleHByZXNzaW9uIHVwZGF0ZXMuXG4gICAgICBpZiAoY3VycmVudEluZGV4ICE9PSB0aGlzLmtleXNJbmRleCkge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSwgZmluYWxWYWx1ZS50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZVtpXSh0aGlzLmN1cnJlbnREYXRhLCBmaW5hbFZhbHVlLnQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50VmFsdWUgIT09IGZpbmFsVmFsdWUpIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudERhdGEoZmluYWxWYWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy52ID0gdGhpcy5jdXJyZW50RGF0YTtcbiAgICB0aGlzLnB2ID0gdGhpcy52O1xuICAgIHRoaXMubG9jayA9IGZhbHNlO1xuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5nZXRLZXlmcmFtZVZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciB0ZXh0S2V5cyA9IHRoaXMuZGF0YS5kLms7XG4gICAgdmFyIGZyYW1lTnVtID0gdGhpcy5lbGVtLmNvbXAucmVuZGVyZWRGcmFtZTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRleHRLZXlzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDw9IGxlbiAtIDEpIHtcbiAgICAgIGlmIChpID09PSBsZW4gLSAxIHx8IHRleHRLZXlzW2kgKyAxXS50ID4gZnJhbWVOdW0pIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5rZXlzSW5kZXggIT09IGkpIHtcbiAgICAgIHRoaXMua2V5c0luZGV4ID0gaTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5kYXRhLmQua1t0aGlzLmtleXNJbmRleF0ucztcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmJ1aWxkRmluYWxUZXh0ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICB2YXIgY2hhcmFjdGVyc0FycmF5ID0gW107XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0ZXh0Lmxlbmd0aDtcbiAgICB2YXIgY2hhckNvZGU7XG4gICAgdmFyIHNlY29uZENoYXJDb2RlO1xuICAgIHZhciBzaG91bGRDb21iaW5lID0gZmFsc2U7XG4gICAgdmFyIHNob3VsZENvbWJpbmVOZXh0ID0gZmFsc2U7XG4gICAgdmFyIGN1cnJlbnRDaGFycyA9ICcnO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHNob3VsZENvbWJpbmUgPSBzaG91bGRDb21iaW5lTmV4dDtcbiAgICAgIHNob3VsZENvbWJpbmVOZXh0ID0gZmFsc2U7XG4gICAgICBjaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpKTtcbiAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuY2hhckF0KGkpO1xuXG4gICAgICBpZiAoRm9udE1hbmFnZXIuaXNDb21iaW5lZENoYXJhY3RlcihjaGFyQ29kZSkpIHtcbiAgICAgICAgc2hvdWxkQ29tYmluZSA9IHRydWU7IC8vIEl0J3MgYSBwb3RlbnRpYWwgc3Vycm9nYXRlIHBhaXIgKHRoaXMgaXMgdGhlIEhpZ2ggc3Vycm9nYXRlKVxuICAgICAgfSBlbHNlIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICAgIGlmIChGb250TWFuYWdlci5pc1JlZ2lvbmFsRmxhZyh0ZXh0LCBpKSkge1xuICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDE0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWNvbmRDaGFyQ29kZSA9IHRleHQuY2hhckNvZGVBdChpICsgMSk7IC8vIEl0J3MgYSBzdXJyb2dhdGUgcGFpciAodGhpcyBpcyB0aGUgTG93IHN1cnJvZ2F0ZSlcblxuICAgICAgICAgIGlmIChzZWNvbmRDaGFyQ29kZSA+PSAweERDMDAgJiYgc2Vjb25kQ2hhckNvZGUgPD0gMHhERkZGKSB7XG4gICAgICAgICAgICBpZiAoRm9udE1hbmFnZXIuaXNNb2RpZmllcihjaGFyQ29kZSwgc2Vjb25kQ2hhckNvZGUpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDIpO1xuICAgICAgICAgICAgICBzaG91bGRDb21iaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRm9udE1hbmFnZXIuaXNGbGFnRW1vamkodGV4dC5zdWJzdHIoaSwgNCkpKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRDaGFycyA9IHRleHQuc3Vic3RyKGksIDQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3VycmVudENoYXJzID0gdGV4dC5zdWJzdHIoaSwgMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID4gMHhEQkZGKSB7XG4gICAgICAgIHNlY29uZENoYXJDb2RlID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTtcblxuICAgICAgICBpZiAoRm9udE1hbmFnZXIuaXNWYXJpYXRpb25TZWxlY3RvcihjaGFyQ29kZSkpIHtcbiAgICAgICAgICBzaG91bGRDb21iaW5lID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChGb250TWFuYWdlci5pc1plcm9XaWR0aEpvaW5lcihjaGFyQ29kZSkpIHtcbiAgICAgICAgc2hvdWxkQ29tYmluZSA9IHRydWU7XG4gICAgICAgIHNob3VsZENvbWJpbmVOZXh0ID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZENvbWJpbmUpIHtcbiAgICAgICAgY2hhcmFjdGVyc0FycmF5W2NoYXJhY3RlcnNBcnJheS5sZW5ndGggLSAxXSArPSBjdXJyZW50Q2hhcnM7XG4gICAgICAgIHNob3VsZENvbWJpbmUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNoYXJhY3RlcnNBcnJheS5wdXNoKGN1cnJlbnRDaGFycyk7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gY3VycmVudENoYXJzLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gY2hhcmFjdGVyc0FycmF5O1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuY29tcGxldGVUZXh0RGF0YSA9IGZ1bmN0aW9uIChkb2N1bWVudERhdGEpIHtcbiAgICBkb2N1bWVudERhdGEuX19jb21wbGV0ZSA9IHRydWU7XG4gICAgdmFyIGZvbnRNYW5hZ2VyID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZm9udE1hbmFnZXI7XG4gICAgdmFyIGRhdGEgPSB0aGlzLmRhdGE7XG4gICAgdmFyIGxldHRlcnMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBuZXdMaW5lRmxhZztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciB2YWw7XG4gICAgdmFyIGFuY2hvckdyb3VwaW5nID0gZGF0YS5tLmc7XG4gICAgdmFyIGN1cnJlbnRTaXplID0gMDtcbiAgICB2YXIgY3VycmVudFBvcyA9IDA7XG4gICAgdmFyIGN1cnJlbnRMaW5lID0gMDtcbiAgICB2YXIgbGluZVdpZHRocyA9IFtdO1xuICAgIHZhciBsaW5lV2lkdGggPSAwO1xuICAgIHZhciBtYXhMaW5lV2lkdGggPSAwO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBmb250RGF0YSA9IGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO1xuICAgIHZhciBjaGFyRGF0YTtcbiAgICB2YXIgY0xlbmd0aCA9IDA7XG4gICAgdmFyIGZvbnRQcm9wcyA9IGdldEZvbnRQcm9wZXJ0aWVzKGZvbnREYXRhKTtcbiAgICBkb2N1bWVudERhdGEuZldlaWdodCA9IGZvbnRQcm9wcy53ZWlnaHQ7XG4gICAgZG9jdW1lbnREYXRhLmZTdHlsZSA9IGZvbnRQcm9wcy5zdHlsZTtcbiAgICBkb2N1bWVudERhdGEuZmluYWxTaXplID0gZG9jdW1lbnREYXRhLnM7XG4gICAgZG9jdW1lbnREYXRhLmZpbmFsVGV4dCA9IHRoaXMuYnVpbGRGaW5hbFRleHQoZG9jdW1lbnREYXRhLnQpO1xuICAgIGxlbiA9IGRvY3VtZW50RGF0YS5maW5hbFRleHQubGVuZ3RoO1xuICAgIGRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHQgPSBkb2N1bWVudERhdGEubGg7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyIC8gMTAwMCAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG4gICAgdmFyIGNoYXJDb2RlO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5zeikge1xuICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgdmFyIGJveFdpZHRoID0gZG9jdW1lbnREYXRhLnN6WzBdO1xuICAgICAgdmFyIGJveEhlaWdodCA9IGRvY3VtZW50RGF0YS5zelsxXTtcbiAgICAgIHZhciBjdXJyZW50SGVpZ2h0O1xuICAgICAgdmFyIGZpbmFsVGV4dDtcblxuICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgZmluYWxUZXh0ID0gdGhpcy5idWlsZEZpbmFsVGV4dChkb2N1bWVudERhdGEudCk7XG4gICAgICAgIGN1cnJlbnRIZWlnaHQgPSAwO1xuICAgICAgICBsaW5lV2lkdGggPSAwO1xuICAgICAgICBsZW4gPSBmaW5hbFRleHQubGVuZ3RoO1xuICAgICAgICB0cmFja2luZ09mZnNldCA9IGRvY3VtZW50RGF0YS50ciAvIDEwMDAgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgICAgICB2YXIgbGFzdFNwYWNlSW5kZXggPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBjaGFyQ29kZSA9IGZpbmFsVGV4dFtpXS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgIG5ld0xpbmVGbGFnID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAoZmluYWxUZXh0W2ldID09PSAnICcpIHtcbiAgICAgICAgICAgIGxhc3RTcGFjZUluZGV4ID0gaTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID09PSAxMyB8fCBjaGFyQ29kZSA9PT0gMykge1xuICAgICAgICAgICAgbGluZVdpZHRoID0gMDtcbiAgICAgICAgICAgIG5ld0xpbmVGbGFnID0gdHJ1ZTtcbiAgICAgICAgICAgIGN1cnJlbnRIZWlnaHQgKz0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCB8fCBkb2N1bWVudERhdGEuZmluYWxTaXplICogMS4yO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChmb250TWFuYWdlci5jaGFycykge1xuICAgICAgICAgICAgY2hhckRhdGEgPSBmb250TWFuYWdlci5nZXRDaGFyRGF0YShmaW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgZm9udERhdGEuZkZhbWlseSk7XG4gICAgICAgICAgICBjTGVuZ3RoID0gbmV3TGluZUZsYWcgPyAwIDogY2hhckRhdGEudyAqIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHRDYW52YXNIZWxwZXIuZm9udCA9IGRvY3VtZW50RGF0YS5zICsgJ3B4ICcrIGZvbnREYXRhLmZGYW1pbHk7XG4gICAgICAgICAgICBjTGVuZ3RoID0gZm9udE1hbmFnZXIubWVhc3VyZVRleHQoZmluYWxUZXh0W2ldLCBkb2N1bWVudERhdGEuZiwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGxpbmVXaWR0aCArIGNMZW5ndGggPiBib3hXaWR0aCAmJiBmaW5hbFRleHRbaV0gIT09ICcgJykge1xuICAgICAgICAgICAgaWYgKGxhc3RTcGFjZUluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICBsZW4gKz0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGkgPSBsYXN0U3BhY2VJbmRleDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudEhlaWdodCArPSBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0IHx8IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiAxLjI7XG4gICAgICAgICAgICBmaW5hbFRleHQuc3BsaWNlKGksIGxhc3RTcGFjZUluZGV4ID09PSBpID8gMSA6IDAsICdcXHInKTsgLy8gZmluYWxUZXh0ID0gZmluYWxUZXh0LnN1YnN0cigwLGkpICsgXCJcXHJcIiArIGZpbmFsVGV4dC5zdWJzdHIoaSA9PT0gbGFzdFNwYWNlSW5kZXggPyBpICsgMSA6IGkpO1xuXG4gICAgICAgICAgICBsYXN0U3BhY2VJbmRleCA9IC0xO1xuICAgICAgICAgICAgbGluZVdpZHRoID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbGluZVdpZHRoICs9IGNMZW5ndGg7XG4gICAgICAgICAgICBsaW5lV2lkdGggKz0gdHJhY2tpbmdPZmZzZXQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEhlaWdodCArPSBmb250RGF0YS5hc2NlbnQgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuXG4gICAgICAgIGlmICh0aGlzLmNhblJlc2l6ZSAmJiBkb2N1bWVudERhdGEuZmluYWxTaXplID4gdGhpcy5taW5pbXVtRm9udFNpemUgJiYgYm94SGVpZ2h0IDwgY3VycmVudEhlaWdodCkge1xuICAgICAgICAgIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLT0gMTtcbiAgICAgICAgICBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0ID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIGRvY3VtZW50RGF0YS5saCAvIGRvY3VtZW50RGF0YS5zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRvY3VtZW50RGF0YS5maW5hbFRleHQgPSBmaW5hbFRleHQ7XG4gICAgICAgICAgbGVuID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7XG4gICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGluZVdpZHRoID0gLXRyYWNraW5nT2Zmc2V0O1xuICAgIGNMZW5ndGggPSAwO1xuICAgIHZhciB1bmNvbGxhcHNlZFNwYWNlcyA9IDA7XG4gICAgdmFyIGN1cnJlbnRDaGFyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBuZXdMaW5lRmxhZyA9IGZhbHNlO1xuICAgICAgY3VycmVudENoYXIgPSBkb2N1bWVudERhdGEuZmluYWxUZXh0W2ldO1xuICAgICAgY2hhckNvZGUgPSBjdXJyZW50Q2hhci5jaGFyQ29kZUF0KDApO1xuXG4gICAgICBpZiAoY2hhckNvZGUgPT09IDEzIHx8IGNoYXJDb2RlID09PSAzKSB7XG4gICAgICAgIHVuY29sbGFwc2VkU3BhY2VzID0gMDtcbiAgICAgICAgbGluZVdpZHRocy5wdXNoKGxpbmVXaWR0aCk7XG4gICAgICAgIG1heExpbmVXaWR0aCA9IGxpbmVXaWR0aCA+IG1heExpbmVXaWR0aCA/IGxpbmVXaWR0aCA6IG1heExpbmVXaWR0aDtcbiAgICAgICAgbGluZVdpZHRoID0gLTIgKiB0cmFja2luZ09mZnNldDtcbiAgICAgICAgdmFsID0gJyc7XG4gICAgICAgIG5ld0xpbmVGbGFnID0gdHJ1ZTtcbiAgICAgICAgY3VycmVudExpbmUgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IGN1cnJlbnRDaGFyO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgY2hhckRhdGEgPSBmb250TWFuYWdlci5nZXRDaGFyRGF0YShjdXJyZW50Q2hhciwgZm9udERhdGEuZlN0eWxlLCBmb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTtcbiAgICAgICAgY0xlbmd0aCA9IG5ld0xpbmVGbGFnID8gMCA6IGNoYXJEYXRhLncgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdmFyIGNoYXJXaWR0aCA9IGZvbnRNYW5hZ2VyLm1lYXN1cmVUZXh0KHZhbCwgZG9jdW1lbnREYXRhLmYsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgICAgICAvLyB0Q2FudmFzSGVscGVyLmZvbnQgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICsgJ3B4ICcrIGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHk7XG4gICAgICAgIGNMZW5ndGggPSBmb250TWFuYWdlci5tZWFzdXJlVGV4dCh2YWwsIGRvY3VtZW50RGF0YS5mLCBkb2N1bWVudERhdGEuZmluYWxTaXplKTtcbiAgICAgIH0gLy9cblxuXG4gICAgICBpZiAoY3VycmVudENoYXIgPT09ICcgJykge1xuICAgICAgICB1bmNvbGxhcHNlZFNwYWNlcyArPSBjTGVuZ3RoICsgdHJhY2tpbmdPZmZzZXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsaW5lV2lkdGggKz0gY0xlbmd0aCArIHRyYWNraW5nT2Zmc2V0ICsgdW5jb2xsYXBzZWRTcGFjZXM7XG4gICAgICAgIHVuY29sbGFwc2VkU3BhY2VzID0gMDtcbiAgICAgIH1cblxuICAgICAgbGV0dGVycy5wdXNoKHtcbiAgICAgICAgbDogY0xlbmd0aCxcbiAgICAgICAgYW46IGNMZW5ndGgsXG4gICAgICAgIGFkZDogY3VycmVudFNpemUsXG4gICAgICAgIG46IG5ld0xpbmVGbGFnLFxuICAgICAgICBhbkluZGV4ZXM6IFtdLFxuICAgICAgICB2YWw6IHZhbCxcbiAgICAgICAgbGluZTogY3VycmVudExpbmUsXG4gICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldDogMFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChhbmNob3JHcm91cGluZyA9PSAyKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIGN1cnJlbnRTaXplICs9IGNMZW5ndGg7XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJycgfHwgdmFsID09PSAnICcgfHwgaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgIGlmICh2YWwgPT09ICcnIHx8IHZhbCA9PT0gJyAnKSB7XG4gICAgICAgICAgICBjdXJyZW50U2l6ZSAtPSBjTGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChjdXJyZW50UG9zIDw9IGkpIHtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uYW4gPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uaW5kID0gaW5kZXg7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmV4dHJhID0gY0xlbmd0aDtcbiAgICAgICAgICAgIGN1cnJlbnRQb3MgKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICAgIGN1cnJlbnRTaXplID0gMDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChhbmNob3JHcm91cGluZyA9PSAzKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIGN1cnJlbnRTaXplICs9IGNMZW5ndGg7XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJycgfHwgaSA9PT0gbGVuIC0gMSkge1xuICAgICAgICAgIGlmICh2YWwgPT09ICcnKSB7XG4gICAgICAgICAgICBjdXJyZW50U2l6ZSAtPSBjTGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChjdXJyZW50UG9zIDw9IGkpIHtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uYW4gPSBjdXJyZW50U2l6ZTtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uaW5kID0gaW5kZXg7XG4gICAgICAgICAgICBsZXR0ZXJzW2N1cnJlbnRQb3NdLmV4dHJhID0gY0xlbmd0aDtcbiAgICAgICAgICAgIGN1cnJlbnRQb3MgKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50U2l6ZSA9IDA7XG4gICAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0dGVyc1tpbmRleF0uaW5kID0gaW5kZXg7XG4gICAgICAgIGxldHRlcnNbaW5kZXhdLmV4dHJhID0gMDtcbiAgICAgICAgaW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2N1bWVudERhdGEubCA9IGxldHRlcnM7XG4gICAgbWF4TGluZVdpZHRoID0gbGluZVdpZHRoID4gbWF4TGluZVdpZHRoID8gbGluZVdpZHRoIDogbWF4TGluZVdpZHRoO1xuICAgIGxpbmVXaWR0aHMucHVzaChsaW5lV2lkdGgpO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5zeikge1xuICAgICAgZG9jdW1lbnREYXRhLmJveFdpZHRoID0gZG9jdW1lbnREYXRhLnN6WzBdO1xuICAgICAgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudERhdGEuYm94V2lkdGggPSBtYXhMaW5lV2lkdGg7XG5cbiAgICAgIHN3aXRjaCAoZG9jdW1lbnREYXRhLmopIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ID0gLWRvY3VtZW50RGF0YS5ib3hXaWR0aDtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgPSAtZG9jdW1lbnREYXRhLmJveFdpZHRoIC8gMjtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ID0gMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkb2N1bWVudERhdGEubGluZVdpZHRocyA9IGxpbmVXaWR0aHM7XG4gICAgdmFyIGFuaW1hdG9ycyA9IGRhdGEuYTtcbiAgICB2YXIgYW5pbWF0b3JEYXRhO1xuICAgIHZhciBsZXR0ZXJEYXRhO1xuICAgIGpMZW4gPSBhbmltYXRvcnMubGVuZ3RoO1xuICAgIHZhciBiYXNlZDtcbiAgICB2YXIgaW5kO1xuICAgIHZhciBpbmRleGVzID0gW107XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBhbmltYXRvckRhdGEgPSBhbmltYXRvcnNbal07XG5cbiAgICAgIGlmIChhbmltYXRvckRhdGEuYS5zYykge1xuICAgICAgICBkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdG9yRGF0YS5hLnN3KSB7XG4gICAgICAgIGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0b3JEYXRhLmEuZmMgfHwgYW5pbWF0b3JEYXRhLmEuZmggfHwgYW5pbWF0b3JEYXRhLmEuZnMgfHwgYW5pbWF0b3JEYXRhLmEuZmIpIHtcbiAgICAgICAgZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpbmQgPSAwO1xuICAgICAgYmFzZWQgPSBhbmltYXRvckRhdGEucy5iO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgbGV0dGVyRGF0YSA9IGxldHRlcnNbaV07XG4gICAgICAgIGxldHRlckRhdGEuYW5JbmRleGVzW2pdID0gaW5kO1xuXG4gICAgICAgIGlmIChiYXNlZCA9PSAxICYmIGxldHRlckRhdGEudmFsICE9PSAnJyB8fCBiYXNlZCA9PSAyICYmIGxldHRlckRhdGEudmFsICE9PSAnJyAmJiBsZXR0ZXJEYXRhLnZhbCAhPT0gJyAnIHx8IGJhc2VkID09IDMgJiYgKGxldHRlckRhdGEubiB8fCBsZXR0ZXJEYXRhLnZhbCA9PSAnICcgfHwgaSA9PSBsZW4gLSAxKSB8fCBiYXNlZCA9PSA0ICYmIChsZXR0ZXJEYXRhLm4gfHwgaSA9PSBsZW4gLSAxKSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgICAgaWYgKGFuaW1hdG9yRGF0YS5zLnJuID09PSAxKSB7XG4gICAgICAgICAgICBpbmRleGVzLnB1c2goaW5kKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpbmQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkYXRhLmFbal0ucy50b3RhbENoYXJzID0gaW5kO1xuICAgICAgdmFyIGN1cnJlbnRJbmQgPSAtMTtcbiAgICAgIHZhciBuZXdJbmQ7XG5cbiAgICAgIGlmIChhbmltYXRvckRhdGEucy5ybiA9PT0gMSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBsZXR0ZXJEYXRhID0gbGV0dGVyc1tpXTtcblxuICAgICAgICAgIGlmIChjdXJyZW50SW5kICE9IGxldHRlckRhdGEuYW5JbmRleGVzW2pdKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgICAgY3VycmVudEluZCA9IGxldHRlckRhdGEuYW5JbmRleGVzW2pdO1xuICAgICAgICAgICAgbmV3SW5kID0gaW5kZXhlcy5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogaW5kZXhlcy5sZW5ndGgpLCAxKVswXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXR0ZXJEYXRhLmFuSW5kZXhlc1tqXSA9IG5ld0luZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50RGF0YS55T2Zmc2V0ID0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCB8fCBkb2N1bWVudERhdGEuZmluYWxTaXplICogMS4yO1xuICAgIGRvY3VtZW50RGF0YS5scyA9IGRvY3VtZW50RGF0YS5scyB8fCAwO1xuICAgIGRvY3VtZW50RGF0YS5hc2NlbnQgPSBmb250RGF0YS5hc2NlbnQgKiBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKG5ld0RhdGEsIGluZGV4KSB7XG4gICAgaW5kZXggPSBpbmRleCA9PT0gdW5kZWZpbmVkID8gdGhpcy5rZXlzSW5kZXggOiBpbmRleDtcbiAgICB2YXIgZERhdGEgPSB0aGlzLmNvcHlEYXRhKHt9LCB0aGlzLmRhdGEuZC5rW2luZGV4XS5zKTtcbiAgICBkRGF0YSA9IHRoaXMuY29weURhdGEoZERhdGEsIG5ld0RhdGEpO1xuICAgIHRoaXMuZGF0YS5kLmtbaW5kZXhdLnMgPSBkRGF0YTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlKGluZGV4KTtcbiAgICB0aGlzLnNldEN1cnJlbnREYXRhKGREYXRhKTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUucmVjYWxjdWxhdGUgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgZERhdGEgPSB0aGlzLmRhdGEuZC5rW2luZGV4XS5zO1xuICAgIGREYXRhLl9fY29tcGxldGUgPSBmYWxzZTtcbiAgICB0aGlzLmtleXNJbmRleCA9IDA7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLmdldFZhbHVlKGREYXRhKTtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmNhblJlc2l6ZUZvbnQgPSBmdW5jdGlvbiAoX2NhblJlc2l6ZSkge1xuICAgIHRoaXMuY2FuUmVzaXplID0gX2NhblJlc2l6ZTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlKHRoaXMua2V5c0luZGV4KTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2V0TWluaW11bUZvbnRTaXplID0gZnVuY3Rpb24gKF9mb250VmFsdWUpIHtcbiAgICB0aGlzLm1pbmltdW1Gb250U2l6ZSA9IE1hdGguZmxvb3IoX2ZvbnRWYWx1ZSkgfHwgMTtcbiAgICB0aGlzLnJlY2FsY3VsYXRlKHRoaXMua2V5c0luZGV4KTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIHZhciBUZXh0U2VsZWN0b3JQcm9wID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBtYXggPSBNYXRoLm1heDtcbiAgICB2YXIgbWluID0gTWF0aC5taW47XG4gICAgdmFyIGZsb29yID0gTWF0aC5mbG9vcjtcblxuICAgIGZ1bmN0aW9uIFRleHRTZWxlY3RvclByb3BGYWN0b3J5KGVsZW0sIGRhdGEpIHtcbiAgICAgIHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoID0gLTE7XG4gICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgdGhpcy5maW5hbFMgPSAwO1xuICAgICAgdGhpcy5maW5hbEUgPSAwO1xuICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG5cbiAgICAgIGlmICgnZScgaW4gZGF0YSkge1xuICAgICAgICB0aGlzLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmUsIDAsIDAsIHRoaXMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lID0ge1xuICAgICAgICAgIHY6IDEwMFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8gfHwge1xuICAgICAgICBrOiAwXG4gICAgICB9LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMueGUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnhlIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG4gICAgICB0aGlzLm5lID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5uZSB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5zbSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuc20gfHwge1xuICAgICAgICBrOiAxMDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5hID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hLCAwLCAwLjAxLCB0aGlzKTtcblxuICAgICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmdldFZhbHVlKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgZ2V0TXVsdDogZnVuY3Rpb24gZ2V0TXVsdChpbmQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoICE9PSB0aGlzLmVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmwubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHgxID0gMDtcbiAgICAgICAgdmFyIHkxID0gMDtcbiAgICAgICAgdmFyIHgyID0gMTtcbiAgICAgICAgdmFyIHkyID0gMTtcblxuICAgICAgICBpZiAodGhpcy5uZS52ID4gMCkge1xuICAgICAgICAgIHgxID0gdGhpcy5uZS52IC8gMTAwLjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeTEgPSAtdGhpcy5uZS52IC8gMTAwLjA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy54ZS52ID4gMCkge1xuICAgICAgICAgIHgyID0gMS4wIC0gdGhpcy54ZS52IC8gMTAwLjA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgeTIgPSAxLjAgKyB0aGlzLnhlLnYgLyAxMDAuMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlYXNlciA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKHgxLCB5MSwgeDIsIHkyKS5nZXQ7XG4gICAgICAgIHZhciBtdWx0ID0gMDtcbiAgICAgICAgdmFyIHMgPSB0aGlzLmZpbmFsUztcbiAgICAgICAgdmFyIGUgPSB0aGlzLmZpbmFsRTtcbiAgICAgICAgdmFyIHR5cGUgPSB0aGlzLmRhdGEuc2g7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09IDIpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IGluZCA+PSBlID8gMSA6IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSBtYXgoMCwgbWluKDAuNSAvIChlIC0gcykgKyAoaW5kIC0gcykgLyAoZSAtIHMpLCAxKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IGluZCA+PSBlID8gMCA6IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSAxIC0gbWF4KDAsIG1pbigwLjUgLyAoZSAtIHMpICsgKGluZCAtIHMpIC8gKGUgLSBzKSwgMSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA0KSB7XG4gICAgICAgICAgaWYgKGUgPT09IHMpIHtcbiAgICAgICAgICAgIG11bHQgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0ID0gbWF4KDAsIG1pbigwLjUgLyAoZSAtIHMpICsgKGluZCAtIHMpIC8gKGUgLSBzKSwgMSkpO1xuXG4gICAgICAgICAgICBpZiAobXVsdCA8IDAuNSkge1xuICAgICAgICAgICAgICBtdWx0ICo9IDI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtdWx0ID0gMSAtIDIgKiAobXVsdCAtIDAuNSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDUpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciB0b3QgPSBlIC0gcztcbiAgICAgICAgICAgIC8qIGluZCArPSAwLjU7XHJcbiAgICAgICAgICAgICAgICAgICAgICBtdWx0ID0gLTQvKHRvdCp0b3QpKihpbmQqaW5kKSsoNC90b3QpKmluZDsgKi9cblxuICAgICAgICAgICAgaW5kID0gbWluKG1heCgwLCBpbmQgKyAwLjUgLSBzKSwgZSAtIHMpO1xuICAgICAgICAgICAgdmFyIHggPSAtdG90IC8gMiArIGluZDtcbiAgICAgICAgICAgIHZhciBhID0gdG90IC8gMjtcbiAgICAgICAgICAgIG11bHQgPSBNYXRoLnNxcnQoMSAtIHggKiB4IC8gKGEgKiBhKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDYpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZCA9IG1pbihtYXgoMCwgaW5kICsgMC41IC0gcyksIGUgLSBzKTtcbiAgICAgICAgICAgIG11bHQgPSAoMSArIE1hdGguY29zKE1hdGguUEkgKyBNYXRoLlBJICogMiAqIGluZCAvIChlIC0gcykpKSAvIDI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGluZCA+PSBmbG9vcihzKSkge1xuICAgICAgICAgICAgaWYgKGluZCAtIHMgPCAwKSB7XG4gICAgICAgICAgICAgIG11bHQgPSBtYXgoMCwgbWluKG1pbihlLCAxKSAtIChzIC0gaW5kKSwgMSkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbXVsdCA9IG1heCgwLCBtaW4oZSAtIGluZCwgMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSAvLyBTbW9vdGhuZXNzIGltcGxlbWVudGF0aW9uLlxuICAgICAgICAvLyBUaGUgc21vb3RobmVzcyByZXByZXNlbnRzIGEgcmVkdWNlZCByYW5nZSBvZiB0aGUgb3JpZ2luYWwgWzA7IDFdIHJhbmdlLlxuICAgICAgICAvLyBpZiBzbW9vdGhuZXNzIGlzIDI1JSwgdGhlIG5ldyByYW5nZSB3aWxsIGJlIFswLjM3NTsgMC42MjVdXG4gICAgICAgIC8vIFN0ZXBzIGFyZTpcbiAgICAgICAgLy8gLSBmaW5kIHRoZSBsb3dlciB2YWx1ZSBvZiB0aGUgbmV3IHJhbmdlICh0aHJlc2hvbGQpXG4gICAgICAgIC8vIC0gaWYgbXVsdGlwbGllciBpcyBzbWFsbGVyIHRoYW4gdGhhdCB2YWx1ZSwgZmxvb3IgaXQgdG8gMFxuICAgICAgICAvLyAtIGlmIGl0IGlzIGxhcmdlcixcbiAgICAgICAgLy8gICAgIC0gc3VidHJhY3QgdGhlIHRocmVzaG9sZFxuICAgICAgICAvLyAgICAgLSBkaXZpZGUgaXQgYnkgdGhlIHNtb290aG5lc3MgKHRoaXMgd2lsbCByZXR1cm4gdGhlIHJhbmdlIHRvIFswOyAxXSlcbiAgICAgICAgLy8gTm90ZTogSWYgaXQgZG9lc24ndCB3b3JrIG9uIHNvbWUgc2NlbmFyaW9zLCBjb25zaWRlciBhcHBseWluZyBpdCBiZWZvcmUgdGhlIGVhc2VyLlxuXG5cbiAgICAgICAgaWYgKHRoaXMuc20udiAhPT0gMTAwKSB7XG4gICAgICAgICAgdmFyIHNtb290aG5lc3MgPSB0aGlzLnNtLnYgKiAwLjAxO1xuXG4gICAgICAgICAgaWYgKHNtb290aG5lc3MgPT09IDApIHtcbiAgICAgICAgICAgIHNtb290aG5lc3MgPSAwLjAwMDAwMDAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciB0aHJlc2hvbGQgPSAwLjUgLSBzbW9vdGhuZXNzICogMC41O1xuXG4gICAgICAgICAgaWYgKG11bHQgPCB0aHJlc2hvbGQpIHtcbiAgICAgICAgICAgIG11bHQgPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtdWx0ID0gKG11bHQgLSB0aHJlc2hvbGQpIC8gc21vb3RobmVzcztcblxuICAgICAgICAgICAgaWYgKG11bHQgPiAxKSB7XG4gICAgICAgICAgICAgIG11bHQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtdWx0ICogdGhpcy5hLnY7XG4gICAgICB9LFxuICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKG5ld0NoYXJzRmxhZykge1xuICAgICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuICAgICAgICB0aGlzLl9tZGYgPSBuZXdDaGFyc0ZsYWcgfHwgdGhpcy5fbWRmO1xuICAgICAgICB0aGlzLl9jdXJyZW50VGV4dExlbmd0aCA9IHRoaXMuZWxlbS50ZXh0UHJvcGVydHkuY3VycmVudERhdGEubC5sZW5ndGggfHwgMDtcblxuICAgICAgICBpZiAobmV3Q2hhcnNGbGFnICYmIHRoaXMuZGF0YS5yID09PSAyKSB7XG4gICAgICAgICAgdGhpcy5lLnYgPSB0aGlzLl9jdXJyZW50VGV4dExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXZpc29yID0gdGhpcy5kYXRhLnIgPT09IDIgPyAxIDogMTAwIC8gdGhpcy5kYXRhLnRvdGFsQ2hhcnM7XG4gICAgICAgIHZhciBvID0gdGhpcy5vLnYgLyBkaXZpc29yO1xuICAgICAgICB2YXIgcyA9IHRoaXMucy52IC8gZGl2aXNvciArIG87XG4gICAgICAgIHZhciBlID0gdGhpcy5lLnYgLyBkaXZpc29yICsgbztcblxuICAgICAgICBpZiAocyA+IGUpIHtcbiAgICAgICAgICB2YXIgX3MgPSBzO1xuICAgICAgICAgIHMgPSBlO1xuICAgICAgICAgIGUgPSBfcztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmluYWxTID0gcztcbiAgICAgICAgdGhpcy5maW5hbEUgPSBlO1xuICAgICAgfVxuICAgIH07XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeSk7XG5cbiAgICBmdW5jdGlvbiBnZXRUZXh0U2VsZWN0b3JQcm9wKGVsZW0sIGRhdGEsIGFycikge1xuICAgICAgcmV0dXJuIG5ldyBUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeShlbGVtLCBkYXRhLCBhcnIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBnZXRUZXh0U2VsZWN0b3JQcm9wOiBnZXRUZXh0U2VsZWN0b3JQcm9wXG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFRleHRBbmltYXRvckRhdGFQcm9wZXJ0eShlbGVtLCBhbmltYXRvclByb3BzLCBjb250YWluZXIpIHtcbiAgICB2YXIgZGVmYXVsdERhdGEgPSB7XG4gICAgICBwcm9wVHlwZTogZmFsc2VcbiAgICB9O1xuICAgIHZhciBnZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG4gICAgdmFyIHRleHRBbmltYXRvckFuaW1hdGFibGVzID0gYW5pbWF0b3JQcm9wcy5hO1xuICAgIHRoaXMuYSA9IHtcbiAgICAgIHI6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnIgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnIsIDAsIGRlZ1RvUmFkcywgY29udGFpbmVyKSA6IGRlZmF1bHREYXRhLFxuICAgICAgcng6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ4ID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5yeCwgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICByeTogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucnkgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ5LCAwLCBkZWdUb1JhZHMsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHNrOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zayA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2ssIDAsIGRlZ1RvUmFkcywgY29udGFpbmVyKSA6IGRlZmF1bHREYXRhLFxuICAgICAgc2E6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNhID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zYSwgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zLCAxLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBhOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5hID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5hLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBvOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5vID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5vLCAwLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBwOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5wID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5wLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzdzogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc3cgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnN3LCAwLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzYzogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2MgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNjLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmYzogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmMgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZjLCAxLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmaDogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmggPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZoLCAwLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmczogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZnMgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZzLCAwLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBmYjogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmIgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmZiLCAwLCAwLjAxLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICB0OiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy50ID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy50LCAwLCAwLCBjb250YWluZXIpIDogZGVmYXVsdERhdGFcbiAgICB9O1xuICAgIHRoaXMucyA9IFRleHRTZWxlY3RvclByb3AuZ2V0VGV4dFNlbGVjdG9yUHJvcChlbGVtLCBhbmltYXRvclByb3BzLnMsIGNvbnRhaW5lcik7XG4gICAgdGhpcy5zLnQgPSBhbmltYXRvclByb3BzLnMudDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFRleHRBbmltYXRvclByb3BlcnR5KHRleHREYXRhLCByZW5kZXJUeXBlLCBlbGVtKSB7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLl9oYXNNYXNrZWRQYXRoID0gZmFsc2U7XG4gICAgdGhpcy5fZnJhbWVJZCA9IC0xO1xuICAgIHRoaXMuX3RleHREYXRhID0gdGV4dERhdGE7XG4gICAgdGhpcy5fcmVuZGVyVHlwZSA9IHJlbmRlclR5cGU7XG4gICAgdGhpcy5fZWxlbSA9IGVsZW07XG4gICAgdGhpcy5fYW5pbWF0b3JzRGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fdGV4dERhdGEuYS5sZW5ndGgpO1xuICAgIHRoaXMuX3BhdGhEYXRhID0ge307XG4gICAgdGhpcy5fbW9yZU9wdGlvbnMgPSB7XG4gICAgICBhbGlnbm1lbnQ6IHt9XG4gICAgfTtcbiAgICB0aGlzLnJlbmRlcmVkTGV0dGVycyA9IFtdO1xuICAgIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnID0gZmFsc2U7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICB9XG5cbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLnNlYXJjaFByb3BlcnRpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuX3RleHREYXRhLmEubGVuZ3RoO1xuICAgIHZhciBhbmltYXRvclByb3BzO1xuICAgIHZhciBnZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGFuaW1hdG9yUHJvcHMgPSB0aGlzLl90ZXh0RGF0YS5hW2ldO1xuICAgICAgdGhpcy5fYW5pbWF0b3JzRGF0YVtpXSA9IG5ldyBUZXh0QW5pbWF0b3JEYXRhUHJvcGVydHkodGhpcy5fZWxlbSwgYW5pbWF0b3JQcm9wcywgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX3RleHREYXRhLnAgJiYgJ20nIGluIHRoaXMuX3RleHREYXRhLnApIHtcbiAgICAgIHRoaXMuX3BhdGhEYXRhID0ge1xuICAgICAgICBhOiBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLnAuYSwgMCwgMCwgdGhpcyksXG4gICAgICAgIGY6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5mLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgbDogZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5wLmwsIDAsIDAsIHRoaXMpLFxuICAgICAgICByOiBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLnAuciwgMCwgMCwgdGhpcyksXG4gICAgICAgIHA6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5wLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgbTogdGhpcy5fZWxlbS5tYXNrTWFuYWdlci5nZXRNYXNrUHJvcGVydHkodGhpcy5fdGV4dERhdGEucC5tKVxuICAgICAgfTtcbiAgICAgIHRoaXMuX2hhc01hc2tlZFBhdGggPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9oYXNNYXNrZWRQYXRoID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5fbW9yZU9wdGlvbnMuYWxpZ25tZW50ID0gZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5tLmEsIDEsIDAsIHRoaXMpO1xuICB9O1xuXG4gIFRleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5nZXRNZWFzdXJlcyA9IGZ1bmN0aW9uIChkb2N1bWVudERhdGEsIGxldHRlcnNDaGFuZ2VkRmxhZykge1xuICAgIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnID0gbGV0dGVyc0NoYW5nZWRGbGFnO1xuXG4gICAgaWYgKCF0aGlzLl9tZGYgJiYgIXRoaXMuX2lzRmlyc3RGcmFtZSAmJiAhbGV0dGVyc0NoYW5nZWRGbGFnICYmICghdGhpcy5faGFzTWFza2VkUGF0aCB8fCAhdGhpcy5fcGF0aERhdGEubS5fbWRmKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgIHZhciBhbGlnbm1lbnQgPSB0aGlzLl9tb3JlT3B0aW9ucy5hbGlnbm1lbnQudjtcbiAgICB2YXIgYW5pbWF0b3JzID0gdGhpcy5fYW5pbWF0b3JzRGF0YTtcbiAgICB2YXIgdGV4dERhdGEgPSB0aGlzLl90ZXh0RGF0YTtcbiAgICB2YXIgbWF0cml4SGVscGVyID0gdGhpcy5tSGVscGVyO1xuICAgIHZhciByZW5kZXJUeXBlID0gdGhpcy5fcmVuZGVyVHlwZTtcbiAgICB2YXIgcmVuZGVyZWRMZXR0ZXJzQ291bnQgPSB0aGlzLnJlbmRlcmVkTGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHhQb3M7XG4gICAgdmFyIHlQb3M7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sO1xuICAgIHZhciBwYXRoSW5mbztcbiAgICB2YXIgY3VycmVudExlbmd0aDtcbiAgICB2YXIgY3VycmVudFBvaW50O1xuICAgIHZhciBzZWdtZW50TGVuZ3RoO1xuICAgIHZhciBmbGFnO1xuICAgIHZhciBwb2ludEluZDtcbiAgICB2YXIgc2VnbWVudEluZDtcbiAgICB2YXIgcHJldlBvaW50O1xuICAgIHZhciBwb2ludHM7XG4gICAgdmFyIHNlZ21lbnRzO1xuICAgIHZhciBwYXJ0aWFsTGVuZ3RoO1xuICAgIHZhciB0b3RhbExlbmd0aDtcbiAgICB2YXIgcGVyYztcbiAgICB2YXIgdGFuQW5nbGU7XG4gICAgdmFyIG1hc2s7XG5cbiAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgbWFzayA9IHRoaXMuX3BhdGhEYXRhLm07XG5cbiAgICAgIGlmICghdGhpcy5fcGF0aERhdGEubiB8fCB0aGlzLl9wYXRoRGF0YS5fbWRmKSB7XG4gICAgICAgIHZhciBwYXRocyA9IG1hc2sudjtcblxuICAgICAgICBpZiAodGhpcy5fcGF0aERhdGEuci52KSB7XG4gICAgICAgICAgcGF0aHMgPSBwYXRocy5yZXZlcnNlKCk7XG4gICAgICAgIH0gLy8gVE9ETzogcmVsZWFzZSBiZXppZXIgZGF0YSBjYWNoZWQgZnJvbSBwcmV2aW91cyBwYXRoSW5mbzogdGhpcy5fcGF0aERhdGEucGlcblxuXG4gICAgICAgIHBhdGhJbmZvID0ge1xuICAgICAgICAgIHRMZW5ndGg6IDAsXG4gICAgICAgICAgc2VnbWVudHM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGxlbiA9IHBhdGhzLl9sZW5ndGggLSAxO1xuICAgICAgICB2YXIgYmV6aWVyRGF0YTtcbiAgICAgICAgdG90YWxMZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGJlemllckRhdGEgPSBiZXouYnVpbGRCZXppZXJEYXRhKHBhdGhzLnZbaV0sIHBhdGhzLnZbaSArIDFdLCBbcGF0aHMub1tpXVswXSAtIHBhdGhzLnZbaV1bMF0sIHBhdGhzLm9baV1bMV0gLSBwYXRocy52W2ldWzFdXSwgW3BhdGhzLmlbaSArIDFdWzBdIC0gcGF0aHMudltpICsgMV1bMF0sIHBhdGhzLmlbaSArIDFdWzFdIC0gcGF0aHMudltpICsgMV1bMV1dKTtcbiAgICAgICAgICBwYXRoSW5mby50TGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgICBwYXRoSW5mby5zZWdtZW50cy5wdXNoKGJlemllckRhdGEpO1xuICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgPSBsZW47XG5cbiAgICAgICAgaWYgKG1hc2sudi5jKSB7XG4gICAgICAgICAgYmV6aWVyRGF0YSA9IGJlei5idWlsZEJlemllckRhdGEocGF0aHMudltpXSwgcGF0aHMudlswXSwgW3BhdGhzLm9baV1bMF0gLSBwYXRocy52W2ldWzBdLCBwYXRocy5vW2ldWzFdIC0gcGF0aHMudltpXVsxXV0sIFtwYXRocy5pWzBdWzBdIC0gcGF0aHMudlswXVswXSwgcGF0aHMuaVswXVsxXSAtIHBhdGhzLnZbMF1bMV1dKTtcbiAgICAgICAgICBwYXRoSW5mby50TGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgICBwYXRoSW5mby5zZWdtZW50cy5wdXNoKGJlemllckRhdGEpO1xuICAgICAgICAgIHRvdGFsTGVuZ3RoICs9IGJlemllckRhdGEuc2VnbWVudExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BhdGhEYXRhLnBpID0gcGF0aEluZm87XG4gICAgICB9XG5cbiAgICAgIHBhdGhJbmZvID0gdGhpcy5fcGF0aERhdGEucGk7XG4gICAgICBjdXJyZW50TGVuZ3RoID0gdGhpcy5fcGF0aERhdGEuZi52O1xuICAgICAgc2VnbWVudEluZCA9IDA7XG4gICAgICBwb2ludEluZCA9IDE7XG4gICAgICBzZWdtZW50TGVuZ3RoID0gMDtcbiAgICAgIGZsYWcgPSB0cnVlO1xuICAgICAgc2VnbWVudHMgPSBwYXRoSW5mby5zZWdtZW50cztcblxuICAgICAgaWYgKGN1cnJlbnRMZW5ndGggPCAwICYmIG1hc2sudi5jKSB7XG4gICAgICAgIGlmIChwYXRoSW5mby50TGVuZ3RoIDwgTWF0aC5hYnMoY3VycmVudExlbmd0aCkpIHtcbiAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gLU1hdGguYWJzKGN1cnJlbnRMZW5ndGgpICUgcGF0aEluZm8udExlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNlZ21lbnRJbmQgPSBzZWdtZW50cy5sZW5ndGggLSAxO1xuICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgIHBvaW50SW5kID0gcG9pbnRzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgd2hpbGUgKGN1cnJlbnRMZW5ndGggPCAwKSB7XG4gICAgICAgICAgY3VycmVudExlbmd0aCArPSBwb2ludHNbcG9pbnRJbmRdLnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgcG9pbnRJbmQgLT0gMTtcblxuICAgICAgICAgIGlmIChwb2ludEluZCA8IDApIHtcbiAgICAgICAgICAgIHNlZ21lbnRJbmQgLT0gMTtcbiAgICAgICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgICAgIHBvaW50SW5kID0gcG9pbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgIHByZXZQb2ludCA9IHBvaW50c1twb2ludEluZCAtIDFdO1xuICAgICAgY3VycmVudFBvaW50ID0gcG9pbnRzW3BvaW50SW5kXTtcbiAgICAgIHBhcnRpYWxMZW5ndGggPSBjdXJyZW50UG9pbnQucGFydGlhbExlbmd0aDtcbiAgICB9XG5cbiAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICB4UG9zID0gMDtcbiAgICB5UG9zID0gMDtcbiAgICB2YXIgeU9mZiA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiAxLjIgKiAwLjcxNDtcbiAgICB2YXIgZmlyc3RMaW5lID0gdHJ1ZTtcbiAgICB2YXIgYW5pbWF0b3JQcm9wcztcbiAgICB2YXIgYW5pbWF0b3JTZWxlY3RvcjtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgbGV0dGVyVmFsdWU7XG4gICAgakxlbiA9IGFuaW1hdG9ycy5sZW5ndGg7XG4gICAgdmFyIG11bHQ7XG4gICAgdmFyIGluZCA9IC0xO1xuICAgIHZhciBvZmZmO1xuICAgIHZhciB4UGF0aFBvcztcbiAgICB2YXIgeVBhdGhQb3M7XG4gICAgdmFyIGluaXRQYXRoUG9zID0gY3VycmVudExlbmd0aDtcbiAgICB2YXIgaW5pdFNlZ21lbnRJbmQgPSBzZWdtZW50SW5kO1xuICAgIHZhciBpbml0UG9pbnRJbmQgPSBwb2ludEluZDtcbiAgICB2YXIgY3VycmVudExpbmUgPSAtMTtcbiAgICB2YXIgZWxlbU9wYWNpdHk7XG4gICAgdmFyIHNjO1xuICAgIHZhciBzdztcbiAgICB2YXIgZmM7XG4gICAgdmFyIGs7XG4gICAgdmFyIGxldHRlclN3O1xuICAgIHZhciBsZXR0ZXJTYztcbiAgICB2YXIgbGV0dGVyRmM7XG4gICAgdmFyIGxldHRlck0gPSAnJztcbiAgICB2YXIgbGV0dGVyUCA9IHRoaXMuZGVmYXVsdFByb3BzQXJyYXk7XG4gICAgdmFyIGxldHRlck87IC8vXG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLmogPT09IDIgfHwgZG9jdW1lbnREYXRhLmogPT09IDEpIHtcbiAgICAgIHZhciBhbmltYXRvckp1c3RpZnlPZmZzZXQgPSAwO1xuICAgICAgdmFyIGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0ID0gMDtcbiAgICAgIHZhciBqdXN0aWZ5T2Zmc2V0TXVsdCA9IGRvY3VtZW50RGF0YS5qID09PSAyID8gLTAuNSA6IC0xO1xuICAgICAgdmFyIGxhc3RJbmRleCA9IDA7XG4gICAgICB2YXIgaXNOZXdMaW5lID0gdHJ1ZTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgICBpZiAoYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0KSB7XG4gICAgICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgKz0gYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2hpbGUgKGxhc3RJbmRleCA8IGkpIHtcbiAgICAgICAgICAgIGxldHRlcnNbbGFzdEluZGV4XS5hbmltYXRvckp1c3RpZnlPZmZzZXQgPSBhbmltYXRvckp1c3RpZnlPZmZzZXQ7XG4gICAgICAgICAgICBsYXN0SW5kZXggKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgPSAwO1xuICAgICAgICAgIGlzTmV3TGluZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy50LnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChpc05ld0xpbmUgJiYgZG9jdW1lbnREYXRhLmogPT09IDIpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvckZpcnN0Q2hhck9mZnNldCArPSBhbmltYXRvclByb3BzLnQudiAqIGp1c3RpZnlPZmZzZXRNdWx0O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMudC52ICogbXVsdFswXSAqIGp1c3RpZnlPZmZzZXRNdWx0O1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldCArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHQgKiBqdXN0aWZ5T2Zmc2V0TXVsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlzTmV3TGluZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRvckp1c3RpZnlPZmZzZXQpIHtcbiAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICs9IGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0O1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAobGFzdEluZGV4IDwgaSkge1xuICAgICAgICBsZXR0ZXJzW2xhc3RJbmRleF0uYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ID0gYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0O1xuICAgICAgICBsYXN0SW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9IC8vXG5cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbWF0cml4SGVscGVyLnJlc2V0KCk7XG4gICAgICBlbGVtT3BhY2l0eSA9IDE7XG5cbiAgICAgIGlmIChsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgeFBvcyA9IDA7XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgIGN1cnJlbnRMZW5ndGggPSBpbml0UGF0aFBvcztcbiAgICAgICAgZmlyc3RMaW5lID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHRoaXMuX2hhc01hc2tlZFBhdGgpIHtcbiAgICAgICAgICBzZWdtZW50SW5kID0gaW5pdFNlZ21lbnRJbmQ7XG4gICAgICAgICAgcG9pbnRJbmQgPSBpbml0UG9pbnRJbmQ7XG4gICAgICAgICAgcG9pbnRzID0gc2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO1xuICAgICAgICAgIHByZXZQb2ludCA9IHBvaW50c1twb2ludEluZCAtIDFdO1xuICAgICAgICAgIGN1cnJlbnRQb2ludCA9IHBvaW50c1twb2ludEluZF07XG4gICAgICAgICAgcGFydGlhbExlbmd0aCA9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgIHNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0dGVyTSA9ICcnO1xuICAgICAgICBsZXR0ZXJGYyA9ICcnO1xuICAgICAgICBsZXR0ZXJTdyA9ICcnO1xuICAgICAgICBsZXR0ZXJPID0gJyc7XG4gICAgICAgIGxldHRlclAgPSB0aGlzLmRlZmF1bHRQcm9wc0FycmF5O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc01hc2tlZFBhdGgpIHtcbiAgICAgICAgICBpZiAoY3VycmVudExpbmUgIT09IGxldHRlcnNbaV0ubGluZSkge1xuICAgICAgICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSB0b3RhbExlbmd0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gKHRvdGFsTGVuZ3RoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXSkgLyAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRMaW5lID0gbGV0dGVyc1tpXS5saW5lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpbmQgIT09IGxldHRlcnNbaV0uaW5kKSB7XG4gICAgICAgICAgICBpZiAobGV0dGVyc1tpbmRdKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gbGV0dGVyc1tpbmRdLmV4dHJhO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGxldHRlcnNbaV0uYW4gLyAyO1xuICAgICAgICAgICAgaW5kID0gbGV0dGVyc1tpXS5pbmQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudExlbmd0aCArPSBhbGlnbm1lbnRbMF0gKiBsZXR0ZXJzW2ldLmFuICogMC4wMDU7XG4gICAgICAgICAgdmFyIGFuaW1hdG9yT2Zmc2V0ID0gMDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcblxuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvck9mZnNldCArPSBhbmltYXRvclByb3BzLnAudlswXSAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy5wLnZbMF0gKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmEucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0WzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yT2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMuYS52WzBdICogbXVsdDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZsYWcgPSB0cnVlOyAvLyBGb3JjZSBhbGlnbm1lbnQgb25seSB3b3JrcyB3aXRoIGEgc2luZ2xlIGxpbmUgZm9yIG5vd1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3BhdGhEYXRhLmEudikge1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCA9IGxldHRlcnNbMF0uYW4gKiAwLjUgKyAodG90YWxMZW5ndGggLSB0aGlzLl9wYXRoRGF0YS5mLnYgLSBsZXR0ZXJzWzBdLmFuICogMC41IC0gbGV0dGVyc1tsZXR0ZXJzLmxlbmd0aCAtIDFdLmFuICogMC41KSAqIGluZCAvIChsZW4gLSAxKTtcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gdGhpcy5fcGF0aERhdGEuZi52O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgICAgICBpZiAoc2VnbWVudExlbmd0aCArIHBhcnRpYWxMZW5ndGggPj0gY3VycmVudExlbmd0aCArIGFuaW1hdG9yT2Zmc2V0IHx8ICFwb2ludHMpIHtcbiAgICAgICAgICAgICAgcGVyYyA9IChjdXJyZW50TGVuZ3RoICsgYW5pbWF0b3JPZmZzZXQgLSBzZWdtZW50TGVuZ3RoKSAvIGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICB4UGF0aFBvcyA9IHByZXZQb2ludC5wb2ludFswXSArIChjdXJyZW50UG9pbnQucG9pbnRbMF0gLSBwcmV2UG9pbnQucG9pbnRbMF0pICogcGVyYztcbiAgICAgICAgICAgICAgeVBhdGhQb3MgPSBwcmV2UG9pbnQucG9pbnRbMV0gKyAoY3VycmVudFBvaW50LnBvaW50WzFdIC0gcHJldlBvaW50LnBvaW50WzFdKSAqIHBlcmM7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNSwgLShhbGlnbm1lbnRbMV0gKiB5T2ZmKSAqIDAuMDEpO1xuICAgICAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoICs9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICBwb2ludEluZCArPSAxO1xuXG4gICAgICAgICAgICAgIGlmIChwb2ludEluZCA+PSBwb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRJbmQgPSAwO1xuICAgICAgICAgICAgICAgIHNlZ21lbnRJbmQgKz0gMTtcblxuICAgICAgICAgICAgICAgIGlmICghc2VnbWVudHNbc2VnbWVudEluZF0pIHtcbiAgICAgICAgICAgICAgICAgIGlmIChtYXNrLnYuYykge1xuICAgICAgICAgICAgICAgICAgICBwb2ludEluZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRJbmQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoIC09IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBwb2ludHMgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHBvaW50cykge1xuICAgICAgICAgICAgICAgIHByZXZQb2ludCA9IGN1cnJlbnRQb2ludDtcbiAgICAgICAgICAgICAgICBjdXJyZW50UG9pbnQgPSBwb2ludHNbcG9pbnRJbmRdO1xuICAgICAgICAgICAgICAgIHBhcnRpYWxMZW5ndGggPSBjdXJyZW50UG9pbnQucGFydGlhbExlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG9mZmYgPSBsZXR0ZXJzW2ldLmFuIC8gMiAtIGxldHRlcnNbaV0uYWRkO1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLW9mZmYsIDAsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9mZmYgPSBsZXR0ZXJzW2ldLmFuIC8gMiAtIGxldHRlcnNbaV0uYWRkO1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLW9mZmYsIDAsIDApOyAvLyBHcm91cGluZyBhbGlnbm1lbnRcblxuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNSwgLWFsaWdubWVudFsxXSAqIHlPZmYgKiAwLjAxLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy50LnByb3BUeXBlKSB7XG4gICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7IC8vIFRoaXMgY29uZGl0aW9uIGlzIHRvIHByZXZlbnQgYXBwbHlpbmcgdHJhY2tpbmcgdG8gZmlyc3QgY2hhcmFjdGVyIGluIGVhY2ggbGluZS4gTWlnaHQgYmUgYmV0dGVyIHRvIHVzZSBhIGJvb2xlYW4gXCJpc05ld0xpbmVcIlxuXG4gICAgICAgICAgICBpZiAoeFBvcyAhPT0gMCB8fCBkb2N1bWVudERhdGEuaiAhPT0gMCkge1xuICAgICAgICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHRbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHhQb3MgKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0WzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHhQb3MgKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0pIHtcbiAgICAgICAgICBzdyA9IGRvY3VtZW50RGF0YS5zdyB8fCAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0pIHtcbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnNjKSB7XG4gICAgICAgICAgICBzYyA9IFtkb2N1bWVudERhdGEuc2NbMF0sIGRvY3VtZW50RGF0YS5zY1sxXSwgZG9jdW1lbnREYXRhLnNjWzJdXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2MgPSBbMCwgMCwgMF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5maWxsQ29sb3JBbmltICYmIGRvY3VtZW50RGF0YS5mYykge1xuICAgICAgICAgIGZjID0gW2RvY3VtZW50RGF0YS5mY1swXSwgZG9jdW1lbnREYXRhLmZjWzFdLCBkb2N1bWVudERhdGEuZmNbMl1dO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmEucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yU2VsZWN0b3IgPSBhbmltYXRvcnNbal0ucztcbiAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFuaW1hdG9yUHJvcHMuYS52WzBdICogbXVsdFswXSwgLWFuaW1hdG9yUHJvcHMuYS52WzFdICogbXVsdFsxXSwgYW5pbWF0b3JQcm9wcy5hLnZbMl0gKiBtdWx0WzJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoLWFuaW1hdG9yUHJvcHMuYS52WzBdICogbXVsdCwgLWFuaW1hdG9yUHJvcHMuYS52WzFdICogbXVsdCwgYW5pbWF0b3JQcm9wcy5hLnZbMl0gKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnNjYWxlKDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMF0gLSAxKSAqIG11bHRbMF0sIDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMV0gLSAxKSAqIG11bHRbMV0sIDEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnNjYWxlKDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMF0gLSAxKSAqIG11bHQsIDEgKyAoYW5pbWF0b3JQcm9wcy5zLnZbMV0gLSAxKSAqIG11bHQsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG4gICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnNrLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnNrZXdGcm9tQXhpcygtYW5pbWF0b3JQcm9wcy5zay52ICogbXVsdFswXSwgYW5pbWF0b3JQcm9wcy5zYS52ICogbXVsdFsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2tld0Zyb21BeGlzKC1hbmltYXRvclByb3BzLnNrLnYgKiBtdWx0LCBhbmltYXRvclByb3BzLnNhLnYgKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5yLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVooLWFuaW1hdG9yUHJvcHMuci52ICogbXVsdFsyXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWigtYW5pbWF0b3JQcm9wcy5yLnYgKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5yeS5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVZKGFuaW1hdG9yUHJvcHMucnkudiAqIG11bHRbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVkoYW5pbWF0b3JQcm9wcy5yeS52ICogbXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucngucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWChhbmltYXRvclByb3BzLnJ4LnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVYKGFuaW1hdG9yUHJvcHMucngudiAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLm8ucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBlbGVtT3BhY2l0eSArPSAoYW5pbWF0b3JQcm9wcy5vLnYgKiBtdWx0WzBdIC0gZWxlbU9wYWNpdHkpICogbXVsdFswXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGVsZW1PcGFjaXR5ICs9IChhbmltYXRvclByb3BzLm8udiAqIG11bHQgLSBlbGVtT3BhY2l0eSkgKiBtdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkb2N1bWVudERhdGEuc3Ryb2tlV2lkdGhBbmltICYmIGFuaW1hdG9yUHJvcHMuc3cucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBzdyArPSBhbmltYXRvclByb3BzLnN3LnYgKiBtdWx0WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc3cgKz0gYW5pbWF0b3JQcm9wcy5zdy52ICogbXVsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZUNvbG9yQW5pbSAmJiBhbmltYXRvclByb3BzLnNjLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgMzsgayArPSAxKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNjW2tdICs9IChhbmltYXRvclByb3BzLnNjLnZba10gLSBzY1trXSkgKiBtdWx0WzBdO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjW2tdICs9IChhbmltYXRvclByb3BzLnNjLnZba10gLSBzY1trXSkgKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5maWxsQ29sb3JBbmltICYmIGRvY3VtZW50RGF0YS5mYykge1xuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuZmMucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IDM7IGsgKz0gMSkge1xuICAgICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgZmNba10gKz0gKGFuaW1hdG9yUHJvcHMuZmMudltrXSAtIGZjW2tdKSAqIG11bHRbMF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGZjW2tdICs9IChhbmltYXRvclByb3BzLmZjLnZba10gLSBmY1trXSkgKiBtdWx0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5maC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZEh1ZVRvUkdCKGZjLCBhbmltYXRvclByb3BzLmZoLnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZEh1ZVRvUkdCKGZjLCBhbmltYXRvclByb3BzLmZoLnYgKiBtdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5mcy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZFNhdHVyYXRpb25Ub1JHQihmYywgYW5pbWF0b3JQcm9wcy5mcy52ICogbXVsdFswXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmMgPSBhZGRTYXR1cmF0aW9uVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZnMudiAqIG11bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmZiLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkQnJpZ2h0bmVzc1RvUkdCKGZjLCBhbmltYXRvclByb3BzLmZiLnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZEJyaWdodG5lc3NUb1JHQihmYywgYW5pbWF0b3JQcm9wcy5mYi52ICogbXVsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMucC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdFswXSwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdFsxXSk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCBhbmltYXRvclByb3BzLnAudlsxXSAqIG11bHQsIC1hbmltYXRvclByb3BzLnAudlsyXSAqIG11bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoYW5pbWF0b3JQcm9wcy5wLnZbMF0gKiBtdWx0WzBdLCBhbmltYXRvclByb3BzLnAudlsxXSAqIG11bHRbMV0sIC1hbmltYXRvclByb3BzLnAudlsyXSAqIG11bHRbMl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShhbmltYXRvclByb3BzLnAudlswXSAqIG11bHQsIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdCwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0pIHtcbiAgICAgICAgICBsZXR0ZXJTdyA9IHN3IDwgMCA/IDAgOiBzdztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltKSB7XG4gICAgICAgICAgbGV0dGVyU2MgPSAncmdiKCcgKyBNYXRoLnJvdW5kKHNjWzBdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoc2NbMV0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChzY1syXSAqIDI1NSkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gJiYgZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICAgICAgbGV0dGVyRmMgPSAncmdiKCcgKyBNYXRoLnJvdW5kKGZjWzBdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoZmNbMV0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChmY1syXSAqIDI1NSkgKyAnKSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoMCwgLWRvY3VtZW50RGF0YS5scyk7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCBhbGlnbm1lbnRbMV0gKiB5T2ZmICogMC4wMSArIHlQb3MsIDApO1xuXG4gICAgICAgICAgaWYgKHRoaXMuX3BhdGhEYXRhLnAudikge1xuICAgICAgICAgICAgdGFuQW5nbGUgPSAoY3VycmVudFBvaW50LnBvaW50WzFdIC0gcHJldlBvaW50LnBvaW50WzFdKSAvIChjdXJyZW50UG9pbnQucG9pbnRbMF0gLSBwcmV2UG9pbnQucG9pbnRbMF0pO1xuICAgICAgICAgICAgdmFyIHJvdCA9IE1hdGguYXRhbih0YW5BbmdsZSkgKiAxODAgLyBNYXRoLlBJO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFBvaW50LnBvaW50WzBdIDwgcHJldlBvaW50LnBvaW50WzBdKSB7XG4gICAgICAgICAgICAgIHJvdCArPSAxODA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGUoLXJvdCAqIE1hdGguUEkgLyAxODApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoeFBhdGhQb3MsIHlQYXRoUG9zLCAwKTtcbiAgICAgICAgICBjdXJyZW50TGVuZ3RoIC09IGFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNTtcblxuICAgICAgICAgIGlmIChsZXR0ZXJzW2kgKyAxXSAmJiBpbmQgIT09IGxldHRlcnNbaSArIDFdLmluZCkge1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBsZXR0ZXJzW2ldLmFuIC8gMjtcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKHhQb3MsIHlQb3MsIDApO1xuXG4gICAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5wcykge1xuICAgICAgICAgICAgLy8gbWF0cml4SGVscGVyLnRyYW5zbGF0ZShkb2N1bWVudERhdGEucHNbMF0sZG9jdW1lbnREYXRhLnBzWzFdLDApO1xuICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShkb2N1bWVudERhdGEucHNbMF0sIGRvY3VtZW50RGF0YS5wc1sxXSArIGRvY3VtZW50RGF0YS5hc2NlbnQsIDApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN3aXRjaCAoZG9jdW1lbnREYXRhLmopIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShsZXR0ZXJzW2ldLmFuaW1hdG9ySnVzdGlmeU9mZnNldCArIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV0pLCAwLCAwKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShsZXR0ZXJzW2ldLmFuaW1hdG9ySnVzdGlmeU9mZnNldCArIGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xldHRlcnNbaV0ubGluZV0pIC8gMiwgMCwgMCk7XG4gICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIC1kb2N1bWVudERhdGEubHMpO1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUob2ZmZiwgMCwgMCk7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShhbGlnbm1lbnRbMF0gKiBsZXR0ZXJzW2ldLmFuICogMC4wMDUsIGFsaWdubWVudFsxXSAqIHlPZmYgKiAwLjAxLCAwKTtcbiAgICAgICAgICB4UG9zICs9IGxldHRlcnNbaV0ubCArIGRvY3VtZW50RGF0YS50ciAqIDAuMDAxICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJUeXBlID09PSAnaHRtbCcpIHtcbiAgICAgICAgICBsZXR0ZXJNID0gbWF0cml4SGVscGVyLnRvQ1NTKCk7XG4gICAgICAgIH0gZWxzZSBpZiAocmVuZGVyVHlwZSA9PT0gJ3N2ZycpIHtcbiAgICAgICAgICBsZXR0ZXJNID0gbWF0cml4SGVscGVyLnRvMmRDU1MoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXR0ZXJQID0gW21hdHJpeEhlbHBlci5wcm9wc1swXSwgbWF0cml4SGVscGVyLnByb3BzWzFdLCBtYXRyaXhIZWxwZXIucHJvcHNbMl0sIG1hdHJpeEhlbHBlci5wcm9wc1szXSwgbWF0cml4SGVscGVyLnByb3BzWzRdLCBtYXRyaXhIZWxwZXIucHJvcHNbNV0sIG1hdHJpeEhlbHBlci5wcm9wc1s2XSwgbWF0cml4SGVscGVyLnByb3BzWzddLCBtYXRyaXhIZWxwZXIucHJvcHNbOF0sIG1hdHJpeEhlbHBlci5wcm9wc1s5XSwgbWF0cml4SGVscGVyLnByb3BzWzEwXSwgbWF0cml4SGVscGVyLnByb3BzWzExXSwgbWF0cml4SGVscGVyLnByb3BzWzEyXSwgbWF0cml4SGVscGVyLnByb3BzWzEzXSwgbWF0cml4SGVscGVyLnByb3BzWzE0XSwgbWF0cml4SGVscGVyLnByb3BzWzE1XV07XG4gICAgICAgIH1cblxuICAgICAgICBsZXR0ZXJPID0gZWxlbU9wYWNpdHk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZW5kZXJlZExldHRlcnNDb3VudCA8PSBpKSB7XG4gICAgICAgIGxldHRlclZhbHVlID0gbmV3IExldHRlclByb3BzKGxldHRlck8sIGxldHRlclN3LCBsZXR0ZXJTYywgbGV0dGVyRmMsIGxldHRlck0sIGxldHRlclApO1xuICAgICAgICB0aGlzLnJlbmRlcmVkTGV0dGVycy5wdXNoKGxldHRlclZhbHVlKTtcbiAgICAgICAgcmVuZGVyZWRMZXR0ZXJzQ291bnQgKz0gMTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0dGVyVmFsdWUgPSB0aGlzLnJlbmRlcmVkTGV0dGVyc1tpXTtcbiAgICAgICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSBsZXR0ZXJWYWx1ZS51cGRhdGUobGV0dGVyTywgbGV0dGVyU3csIGxldHRlclNjLCBsZXR0ZXJGYywgbGV0dGVyTSwgbGV0dGVyUCkgfHwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWc7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLl9mcmFtZUlkID0gdGhpcy5fZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgfTtcblxuICBUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUubUhlbHBlciA9IG5ldyBNYXRyaXgoKTtcbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmRlZmF1bHRQcm9wc0FycmF5ID0gW107XG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgVGV4dEFuaW1hdG9yUHJvcGVydHkpO1xuXG4gIGZ1bmN0aW9uIElUZXh0RWxlbWVudCgpIHt9XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSB0cnVlO1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkgPSBuZXcgVGV4dFByb3BlcnR5KHRoaXMsIGRhdGEudCwgdGhpcy5keW5hbWljUHJvcGVydGllcyk7XG4gICAgdGhpcy50ZXh0QW5pbWF0b3IgPSBuZXcgVGV4dEFuaW1hdG9yUHJvcGVydHkoZGF0YS50LCB0aGlzLnJlbmRlclR5cGUsIHRoaXMpO1xuICAgIHRoaXMuaW5pdFRyYW5zZm9ybShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJhYmxlKCk7XG4gICAgdGhpcy5pbml0UmVuZGVyZXJFbGVtZW50KCk7XG4gICAgdGhpcy5jcmVhdGVDb250YWluZXJFbGVtZW50cygpO1xuICAgIHRoaXMuY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKTtcbiAgICB0aGlzLmhpZGUoKTtcbiAgICB0aGlzLnRleHRBbmltYXRvci5zZWFyY2hQcm9wZXJ0aWVzKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMpO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0pO1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVQYXRoU2hhcGUgPSBmdW5jdGlvbiAobWF0cml4SGVscGVyLCBzaGFwZXMpIHtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIHBhdGhOb2RlcztcbiAgICB2YXIgc2hhcGVTdHIgPSAnJztcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgIGlmIChzaGFwZXNbal0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgcGF0aE5vZGVzID0gc2hhcGVzW2pdLmtzLms7XG4gICAgICAgIHNoYXBlU3RyICs9IGJ1aWxkU2hhcGVTdHJpbmcocGF0aE5vZGVzLCBwYXRoTm9kZXMuaS5sZW5ndGgsIHRydWUsIG1hdHJpeEhlbHBlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNoYXBlU3RyO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUudXBkYXRlRG9jdW1lbnREYXRhID0gZnVuY3Rpb24gKG5ld0RhdGEsIGluZGV4KSB7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkudXBkYXRlRG9jdW1lbnREYXRhKG5ld0RhdGEsIGluZGV4KTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmNhblJlc2l6ZUZvbnQgPSBmdW5jdGlvbiAoX2NhblJlc2l6ZSkge1xuICAgIHRoaXMudGV4dFByb3BlcnR5LmNhblJlc2l6ZUZvbnQoX2NhblJlc2l6ZSk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5zZXRNaW5pbXVtRm9udFNpemUgPSBmdW5jdGlvbiAoX2ZvbnRTaXplKSB7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkuc2V0TWluaW11bUZvbnRTaXplKF9mb250U2l6ZSk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5hcHBseVRleHRQcm9wZXJ0aWVzVG9NYXRyaXggPSBmdW5jdGlvbiAoZG9jdW1lbnREYXRhLCBtYXRyaXhIZWxwZXIsIGxpbmVOdW1iZXIsIHhQb3MsIHlQb3MpIHtcbiAgICBpZiAoZG9jdW1lbnREYXRhLnBzKSB7XG4gICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSwgZG9jdW1lbnREYXRhLnBzWzFdICsgZG9jdW1lbnREYXRhLmFzY2VudCwgMCk7XG4gICAgfVxuXG4gICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCAtZG9jdW1lbnREYXRhLmxzLCAwKTtcblxuICAgIHN3aXRjaCAoZG9jdW1lbnREYXRhLmopIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCArIChkb2N1bWVudERhdGEuYm94V2lkdGggLSBkb2N1bWVudERhdGEubGluZVdpZHRoc1tsaW5lTnVtYmVyXSksIDAsIDApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xpbmVOdW1iZXJdKSAvIDIsIDAsIDApO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSh4UG9zLCB5UG9zLCAwKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmJ1aWxkQ29sb3IgPSBmdW5jdGlvbiAoY29sb3JEYXRhKSB7XG4gICAgcmV0dXJuICdyZ2IoJyArIE1hdGgucm91bmQoY29sb3JEYXRhWzBdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoY29sb3JEYXRhWzFdICogMjU1KSArICcsJyArIE1hdGgucm91bmQoY29sb3JEYXRhWzJdICogMjU1KSArICcpJztcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmVtcHR5UHJvcCA9IG5ldyBMZXR0ZXJQcm9wcygpO1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUudmFsaWRhdGVUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnRleHRQcm9wZXJ0eS5fbWRmIHx8IHRoaXMudGV4dFByb3BlcnR5Ll9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHRoaXMuYnVpbGROZXdUZXh0KCk7XG4gICAgICB0aGlzLnRleHRQcm9wZXJ0eS5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICB0aGlzLnRleHRQcm9wZXJ0eS5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBlbXB0eVNoYXBlRGF0YSA9IHtcbiAgICBzaGFwZXM6IFtdXG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHVGV4dExvdHRpZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMudGV4dFNwYW5zID0gW107XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ3N2Zyc7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIFNWR0Jhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVET01FbGVtZW50LCBJVGV4dEVsZW1lbnRdLCBTVkdUZXh0TG90dGllRWxlbWVudCk7XG5cbiAgU1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuZGF0YS5zaW5nbGVTaGFwZSAmJiAhdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICB0aGlzLnRleHRDb250YWluZXIgPSBjcmVhdGVOUygndGV4dCcpO1xuICAgIH1cbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuYnVpbGRUZXh0Q29udGVudHMgPSBmdW5jdGlvbiAodGV4dEFycmF5KSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0ZXh0QXJyYXkubGVuZ3RoO1xuICAgIHZhciB0ZXh0Q29udGVudHMgPSBbXTtcbiAgICB2YXIgY3VycmVudFRleHRDb250ZW50ID0gJyc7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHRleHRBcnJheVtpXSA9PT0gU3RyaW5nLmZyb21DaGFyQ29kZSgxMykgfHwgdGV4dEFycmF5W2ldID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMpKSB7XG4gICAgICAgIHRleHRDb250ZW50cy5wdXNoKGN1cnJlbnRUZXh0Q29udGVudCk7XG4gICAgICAgIGN1cnJlbnRUZXh0Q29udGVudCA9ICcnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY3VycmVudFRleHRDb250ZW50ICs9IHRleHRBcnJheVtpXTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHRleHRDb250ZW50cy5wdXNoKGN1cnJlbnRUZXh0Q29udGVudCk7XG4gICAgcmV0dXJuIHRleHRDb250ZW50cztcbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuYnVpbGRTaGFwZURhdGEgPSBmdW5jdGlvbiAoZGF0YSwgc2NhbGUpIHtcbiAgICAvLyBkYXRhIHNob3VsZCBwcm9iYWJseSBiZSBjbG9uZWQgdG8gYXBwbHkgc2NhbGUgc2VwYXJhdGVseSB0byBlYWNoIGluc3RhbmNlIG9mIGEgdGV4dCBvbiBkaWZmZXJlbnQgbGF5ZXJzXG4gICAgLy8gYnV0IHNpbmNlIHRleHQgaW50ZXJuYWwgY29udGVudCBnZXRzIG9ubHkgcmVuZGVyZWQgb25jZSBhbmQgdGhlbiBpdCdzIG5ldmVyIHJlcmVuZGVyZWQsXG4gICAgLy8gaXQncyBwcm9iYWJseSBzYWZlIG5vdCB0byBjbG9uZSBkYXRhIGFuZCByZXVzZSBhbHdheXMgdGhlIHNhbWUgaW5zdGFuY2UgZXZlbiBpZiB0aGUgb2JqZWN0IGlzIG11dGF0ZWQuXG4gICAgLy8gQXZvaWRpbmcgY2xvbmluZyBpcyBwcmVmZXJyZWQgc2luY2UgY2xvbmluZyBlYWNoIGNoYXJhY3RlciBzaGFwZSBkYXRhIGlzIGV4cGVuc2l2ZVxuICAgIGlmIChkYXRhLnNoYXBlcyAmJiBkYXRhLnNoYXBlcy5sZW5ndGgpIHtcbiAgICAgIHZhciBzaGFwZSA9IGRhdGEuc2hhcGVzWzBdO1xuXG4gICAgICBpZiAoc2hhcGUuaXQpIHtcbiAgICAgICAgdmFyIHNoYXBlSXRlbSA9IHNoYXBlLml0W3NoYXBlLml0Lmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIGlmIChzaGFwZUl0ZW0ucykge1xuICAgICAgICAgIHNoYXBlSXRlbS5zLmtbMF0gPSBzY2FsZTtcbiAgICAgICAgICBzaGFwZUl0ZW0ucy5rWzFdID0gc2NhbGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuYnVpbGROZXdUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgdmFyIGRvY3VtZW50RGF0YSA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gY3JlYXRlU2l6ZWRBcnJheShkb2N1bWVudERhdGEgPyBkb2N1bWVudERhdGEubC5sZW5ndGggOiAwKTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuZmMpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZmlsbCcsIHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuZmMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3JnYmEoMCwwLDAsMCknKTtcbiAgICB9XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLnNjKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuc2MpKTtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgZG9jdW1lbnREYXRhLnN3KTtcbiAgICB9XG5cbiAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTtcblxuICAgIGlmIChmb250RGF0YS5mQ2xhc3MpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBmb250RGF0YS5mQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgZm9udERhdGEuZkZhbWlseSk7XG4gICAgICB2YXIgZldlaWdodCA9IGRvY3VtZW50RGF0YS5mV2VpZ2h0O1xuICAgICAgdmFyIGZTdHlsZSA9IGRvY3VtZW50RGF0YS5mU3R5bGU7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLCBmU3R5bGUpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsIGZXZWlnaHQpO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIGRvY3VtZW50RGF0YS50KTtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sIHx8IFtdO1xuICAgIHZhciB1c2VzR2x5cGhzID0gISF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnM7XG4gICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHRTcGFuO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdmFyIHNoYXBlU3RyID0gJyc7XG4gICAgdmFyIHNpbmdsZVNoYXBlID0gdGhpcy5kYXRhLnNpbmdsZVNoYXBlO1xuICAgIHZhciB4UG9zID0gMDtcbiAgICB2YXIgeVBvcyA9IDA7XG4gICAgdmFyIGZpcnN0TGluZSA9IHRydWU7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuXG4gICAgaWYgKHNpbmdsZVNoYXBlICYmICF1c2VzR2x5cGhzICYmICFkb2N1bWVudERhdGEuc3opIHtcbiAgICAgIHZhciB0RWxlbWVudCA9IHRoaXMudGV4dENvbnRhaW5lcjtcbiAgICAgIHZhciBqdXN0aWZ5ID0gJ3N0YXJ0JztcblxuICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAganVzdGlmeSA9ICdlbmQnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBqdXN0aWZ5ID0gJ21pZGRsZSc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBqdXN0aWZ5ID0gJ3N0YXJ0JztcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgdEVsZW1lbnQuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsIGp1c3RpZnkpO1xuICAgICAgdEVsZW1lbnQuc2V0QXR0cmlidXRlKCdsZXR0ZXItc3BhY2luZycsIHRyYWNraW5nT2Zmc2V0KTtcbiAgICAgIHZhciB0ZXh0Q29udGVudCA9IHRoaXMuYnVpbGRUZXh0Q29udGVudHMoZG9jdW1lbnREYXRhLmZpbmFsVGV4dCk7XG4gICAgICBsZW4gPSB0ZXh0Q29udGVudC5sZW5ndGg7XG4gICAgICB5UG9zID0gZG9jdW1lbnREYXRhLnBzID8gZG9jdW1lbnREYXRhLnBzWzFdICsgZG9jdW1lbnREYXRhLmFzY2VudCA6IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gfHwgY3JlYXRlTlMoJ3RzcGFuJyk7XG4gICAgICAgIHRTcGFuLnRleHRDb250ZW50ID0gdGV4dENvbnRlbnRbaV07XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgneCcsIDApO1xuICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3knLCB5UG9zKTtcbiAgICAgICAgdFNwYW4uc3R5bGUuZGlzcGxheSA9ICdpbmhlcml0JztcbiAgICAgICAgdEVsZW1lbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuXG4gICAgICAgIGlmICghdGhpcy50ZXh0U3BhbnNbaV0pIHtcbiAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXSA9IHtcbiAgICAgICAgICAgIHNwYW46IG51bGwsXG4gICAgICAgICAgICBnbHlwaDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5zcGFuID0gdFNwYW47XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY2FjaGVkU3BhbnNMZW5ndGggPSB0aGlzLnRleHRTcGFucy5sZW5ndGg7XG4gICAgICB2YXIgY2hhckRhdGE7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoIXRoaXMudGV4dFNwYW5zW2ldKSB7XG4gICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0gPSB7XG4gICAgICAgICAgICBzcGFuOiBudWxsLFxuICAgICAgICAgICAgY2hpbGRTcGFuOiBudWxsLFxuICAgICAgICAgICAgZ2x5cGg6IG51bGxcbiAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1c2VzR2x5cGhzIHx8ICFzaW5nbGVTaGFwZSB8fCBpID09PSAwKSB7XG4gICAgICAgICAgdFNwYW4gPSBjYWNoZWRTcGFuc0xlbmd0aCA+IGkgPyB0aGlzLnRleHRTcGFuc1tpXS5zcGFuIDogY3JlYXRlTlModXNlc0dseXBocyA/ICdnJyA6ICd0ZXh0Jyk7XG5cbiAgICAgICAgICBpZiAoY2FjaGVkU3BhbnNMZW5ndGggPD0gaSkge1xuICAgICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsICdidXR0Jyk7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsICdyb3VuZCcpO1xuICAgICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbWl0ZXJsaW1pdCcsICc0Jyk7XG4gICAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5zcGFuID0gdFNwYW47XG5cbiAgICAgICAgICAgIGlmICh1c2VzR2x5cGhzKSB7XG4gICAgICAgICAgICAgIHZhciBjaGlsZFNwYW4gPSBjcmVhdGVOUygnZycpO1xuICAgICAgICAgICAgICB0U3Bhbi5hcHBlbmRDaGlsZChjaGlsZFNwYW4pO1xuICAgICAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5jaGlsZFNwYW4gPSBjaGlsZFNwYW47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gPSB0U3BhbjtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0U3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0cml4SGVscGVyLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKHNpbmdsZVNoYXBlKSB7XG4gICAgICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICAgICAgeFBvcyA9IC10cmFja2luZ09mZnNldDtcbiAgICAgICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgICAgICB5UG9zICs9IGZpcnN0TGluZSA/IDEgOiAwO1xuICAgICAgICAgICAgZmlyc3RMaW5lID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5hcHBseVRleHRQcm9wZXJ0aWVzVG9NYXRyaXgoZG9jdW1lbnREYXRhLCBtYXRyaXhIZWxwZXIsIGxldHRlcnNbaV0ubGluZSwgeFBvcywgeVBvcyk7XG4gICAgICAgICAgeFBvcyArPSBsZXR0ZXJzW2ldLmwgfHwgMDsgLy8geFBvcyArPSBsZXR0ZXJzW2ldLnZhbCA9PT0gJyAnID8gMCA6IHRyYWNraW5nT2Zmc2V0O1xuXG4gICAgICAgICAgeFBvcyArPSB0cmFja2luZ09mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1c2VzR2x5cGhzKSB7XG4gICAgICAgICAgY2hhckRhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXSwgZm9udERhdGEuZlN0eWxlLCB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseSk7XG4gICAgICAgICAgdmFyIGdseXBoRWxlbWVudDsgLy8gdCA9PT0gMSBtZWFucyB0aGUgY2hhcmFjdGVyIGhhcyBiZWVuIHJlcGxhY2VkIHdpdGggYW4gYW5pbWF0ZWQgc2hhcGVkXG5cbiAgICAgICAgICBpZiAoY2hhckRhdGEudCA9PT0gMSkge1xuICAgICAgICAgICAgZ2x5cGhFbGVtZW50ID0gbmV3IFNWR0NvbXBFbGVtZW50KGNoYXJEYXRhLmRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gZW1wdHlTaGFwZURhdGE7XG5cbiAgICAgICAgICAgIGlmIChjaGFyRGF0YS5kYXRhICYmIGNoYXJEYXRhLmRhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAgIGRhdGEgPSB0aGlzLmJ1aWxkU2hhcGVEYXRhKGNoYXJEYXRhLmRhdGEsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBnbHlwaEVsZW1lbnQgPSBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHRoaXMudGV4dFNwYW5zW2ldLmdseXBoKSB7XG4gICAgICAgICAgICB2YXIgZ2x5cGggPSB0aGlzLnRleHRTcGFuc1tpXS5nbHlwaDtcbiAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLmNoaWxkU3Bhbi5yZW1vdmVDaGlsZChnbHlwaC5sYXllckVsZW1lbnQpO1xuICAgICAgICAgICAgZ2x5cGguZGVzdHJveSgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLmdseXBoID0gZ2x5cGhFbGVtZW50O1xuICAgICAgICAgIGdseXBoRWxlbWVudC5fZGVidWcgPSB0cnVlO1xuICAgICAgICAgIGdseXBoRWxlbWVudC5wcmVwYXJlRnJhbWUoMCk7XG4gICAgICAgICAgZ2x5cGhFbGVtZW50LnJlbmRlckZyYW1lKCk7XG4gICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uY2hpbGRTcGFuLmFwcGVuZENoaWxkKGdseXBoRWxlbWVudC5sYXllckVsZW1lbnQpOyAvLyB3aGVuIHVzaW5nIGFuaW1hdGVkIHNoYXBlcywgdGhlIGxheWVyIHdpbGwgYmUgc2NhbGVkIGluc3RlYWQgb2YgcmVwbGFjaW5nIHRoZSBpbnRlcm5hbCBzY2FsZVxuICAgICAgICAgIC8vIHRoaXMgbWlnaHQgaGF2ZSBpc3N1ZXMgd2l0aCBzdHJva2VzIGFuZCBtaWdodCBuZWVkIGEgZGlmZmVyZW50IHNvbHV0aW9uXG5cbiAgICAgICAgICBpZiAoY2hhckRhdGEudCA9PT0gMSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uY2hpbGRTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3NjYWxlKCcgKyBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwICsgJywnICsgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCArICcpJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzaW5nbGVTaGFwZSkge1xuICAgICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBtYXRyaXhIZWxwZXIucHJvcHNbMTJdICsgJywnICsgbWF0cml4SGVscGVyLnByb3BzWzEzXSArICcpJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdFNwYW4udGV4dENvbnRlbnQgPSBsZXR0ZXJzW2ldLnZhbDtcbiAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywgJ3htbDpzcGFjZScsICdwcmVzZXJ2ZScpO1xuICAgICAgICB9IC8vXG5cbiAgICAgIH1cblxuICAgICAgaWYgKHNpbmdsZVNoYXBlICYmIHRTcGFuKSB7XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnZCcsIHNoYXBlU3RyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoaSA8IHRoaXMudGV4dFNwYW5zLmxlbmd0aCkge1xuICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uc3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHRoaXMuX3NpemVDaGFuZ2VkID0gdHJ1ZTtcbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnByZXBhcmVGcmFtZSh0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMuZGF0YS5zdCk7XG4gICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcblxuICAgIGlmICh0aGlzLl9zaXplQ2hhbmdlZCkge1xuICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHZhciB0ZXh0Qm94ID0gdGhpcy5sYXllckVsZW1lbnQuZ2V0QkJveCgpO1xuICAgICAgdGhpcy5iYm94ID0ge1xuICAgICAgICB0b3A6IHRleHRCb3gueSxcbiAgICAgICAgbGVmdDogdGV4dEJveC54LFxuICAgICAgICB3aWR0aDogdGV4dEJveC53aWR0aCxcbiAgICAgICAgaGVpZ2h0OiB0ZXh0Qm94LmhlaWdodFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5iYm94O1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5nZXRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy50ZXh0U3BhbnMubGVuZ3RoO1xuICAgIHZhciBnbHlwaEVsZW1lbnQ7XG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGdseXBoRWxlbWVudCA9IHRoaXMudGV4dFNwYW5zW2ldLmdseXBoO1xuXG4gICAgICBpZiAoZ2x5cGhFbGVtZW50KSB7XG4gICAgICAgIGdseXBoRWxlbWVudC5wcmVwYXJlRnJhbWUodGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLSB0aGlzLmRhdGEuc3QpO1xuXG4gICAgICAgIGlmIChnbHlwaEVsZW1lbnQuX21kZikge1xuICAgICAgICAgIHRoaXMuX21kZiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZhbGlkYXRlVGV4dCgpO1xuXG4gICAgaWYgKCF0aGlzLmRhdGEuc2luZ2xlU2hhcGUgfHwgdGhpcy5fbWRmKSB7XG4gICAgICB0aGlzLnRleHRBbmltYXRvci5nZXRNZWFzdXJlcyh0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YSwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO1xuXG4gICAgICBpZiAodGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgfHwgdGhpcy50ZXh0QW5pbWF0b3IubGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgICAgIHRoaXMuX3NpemVDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW47XG4gICAgICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgICAgIHZhciBsZXR0ZXJzID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEubDtcbiAgICAgICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICAgICAgdmFyIHRleHRTcGFuO1xuICAgICAgICB2YXIgZ2x5cGhFbGVtZW50O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGlmICghbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgICAgICByZW5kZXJlZExldHRlciA9IHJlbmRlcmVkTGV0dGVyc1tpXTtcbiAgICAgICAgICAgIHRleHRTcGFuID0gdGhpcy50ZXh0U3BhbnNbaV0uc3BhbjtcbiAgICAgICAgICAgIGdseXBoRWxlbWVudCA9IHRoaXMudGV4dFNwYW5zW2ldLmdseXBoO1xuXG4gICAgICAgICAgICBpZiAoZ2x5cGhFbGVtZW50KSB7XG4gICAgICAgICAgICAgIGdseXBoRWxlbWVudC5yZW5kZXJGcmFtZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5tKSB7XG4gICAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgcmVuZGVyZWRMZXR0ZXIubSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLm8pIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdvcGFjaXR5JywgcmVuZGVyZWRMZXR0ZXIubyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLnN3KSB7XG4gICAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgcmVuZGVyZWRMZXR0ZXIuc3cpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5zYykge1xuICAgICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHJlbmRlcmVkTGV0dGVyLnNjKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYuZmMpIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdmaWxsJywgcmVuZGVyZWRMZXR0ZXIuZmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBJU29saWRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtJSW1hZ2VFbGVtZW50XSwgSVNvbGlkRWxlbWVudCk7XG5cbiAgSVNvbGlkRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7IC8vLyAvcmVjdC5zdHlsZS53aWR0aCA9IHRoaXMuZGF0YS5zdztcbiAgICAvLy8gL3JlY3Quc3R5bGUuaGVpZ2h0ID0gdGhpcy5kYXRhLnNoO1xuICAgIC8vLyAvcmVjdC5zdHlsZS5maWxsID0gdGhpcy5kYXRhLnNjO1xuXG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5kYXRhLnN3KTtcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5kYXRhLnNoKTtcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsIHRoaXMuZGF0YS5zYyk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQocmVjdCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gTnVsbEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0SGllcmFyY2h5KCk7XG4gIH1cblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0cnVlKTtcbiAgfTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgTnVsbEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUuc291cmNlUmVjdEF0VGltZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge307XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50XSwgTnVsbEVsZW1lbnQpO1xuXG4gIGZ1bmN0aW9uIFNWR1JlbmRlcmVyQmFzZSgpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlUmVuZGVyZXJdLCBTVkdSZW5kZXJlckJhc2UpO1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlTnVsbCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBOdWxsRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU2hhcGUgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFNWR1RleHRMb3R0aWVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBJSW1hZ2VFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTb2xpZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBJU29saWRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd4bWxucycsICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3htbG5zOnhsaW5rJywgJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnKTtcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy52aWV3Qm94U2l6ZSkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIHRoaXMucmVuZGVyQ29uZmlnLnZpZXdCb3hTaXplKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsICcwIDAgJyArIGFuaW1EYXRhLncgKyAnICcgKyBhbmltRGF0YS5oKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMucmVuZGVyQ29uZmlnLnZpZXdCb3hPbmx5KSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGFuaW1EYXRhLncpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYW5pbURhdGEuaCk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCknO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnN0eWxlLmNvbnRlbnRWaXNpYmlsaXR5ID0gdGhpcy5yZW5kZXJDb25maWcuY29udGVudFZpc2liaWxpdHk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLndpZHRoKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMucmVuZGVyQ29uZmlnLndpZHRoKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaGVpZ2h0KSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLnJlbmRlckNvbmZpZy5oZWlnaHQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5yZW5kZXJDb25maWcuY2xhc3NOYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaWQpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5yZW5kZXJDb25maWcuaWQpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5mb2N1c2FibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9jdXNhYmxlJywgdGhpcy5yZW5kZXJDb25maWcuZm9jdXNhYmxlKTtcbiAgICB9XG5cbiAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgdGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpbyk7IC8vIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGUzZCgwLDAsMCknO1xuICAgIC8vIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLm1velRyYW5zZm9ybU9yaWdpbiA9IHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9IHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlWyctd2Via2l0LXRyYW5zZm9ybSddID0gXCIwcHggMHB4IDBweFwiO1xuXG4gICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuYXBwZW5kQ2hpbGQodGhpcy5zdmdFbGVtZW50KTsgLy8gTWFzayBhbmltYXRpb25cblxuICAgIHZhciBkZWZzID0gdGhpcy5nbG9iYWxEYXRhLmRlZnM7XG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIGRlZnMpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQgPSB0aGlzLnJlbmRlckNvbmZpZy5wcm9ncmVzc2l2ZUxvYWQ7XG4gICAgdGhpcy5kYXRhID0gYW5pbURhdGE7XG4gICAgdmFyIG1hc2tFbGVtZW50ID0gY3JlYXRlTlMoJ2NsaXBQYXRoJyk7XG4gICAgdmFyIHJlY3QgPSBjcmVhdGVOUygncmVjdCcpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIGFuaW1EYXRhLncpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBhbmltRGF0YS5oKTtcbiAgICByZWN0LnNldEF0dHJpYnV0ZSgneCcsIDApO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd5JywgMCk7XG4gICAgdmFyIG1hc2tJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBtYXNrSWQpO1xuICAgIG1hc2tFbGVtZW50LmFwcGVuZENoaWxkKHJlY3QpO1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBtYXNrSWQgKyAnKScpO1xuICAgIGRlZnMuYXBwZW5kQ2hpbGQobWFza0VsZW1lbnQpO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMuZWxlbWVudHMgPSBjcmVhdGVTaXplZEFycmF5KGFuaW1EYXRhLmxheWVycy5sZW5ndGgpO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gbnVsbDtcbiAgICB0aGlzLmdsb2JhbERhdGEuZGVmcyA9IG51bGw7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzID8gdGhpcy5sYXllcnMubGVuZ3RoIDogMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gbnVsbDtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLnVwZGF0ZUNvbnRhaW5lclNpemUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmZpbmRJbmRleEJ5SW5kID0gZnVuY3Rpb24gKGluZCkge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5sYXllcnNbaV0uaW5kID09PSBpbmQpIHtcbiAgICAgICAgcmV0dXJuIGk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIC0xO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGRJdGVtID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBpZiAoZWxlbWVudHNbcG9zXSB8fCB0aGlzLmxheWVyc1twb3NdLnR5ID09PSA5OSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnRzW3Bvc10gPSB0cnVlO1xuICAgIHZhciBlbGVtZW50ID0gdGhpcy5jcmVhdGVJdGVtKHRoaXMubGF5ZXJzW3Bvc10pO1xuICAgIGVsZW1lbnRzW3Bvc10gPSBlbGVtZW50O1xuXG4gICAgaWYgKGdldEV4cHJlc3Npb25zUGx1Z2luKCkpIHtcbiAgICAgIGlmICh0aGlzLmxheWVyc1twb3NdLnR5ID09PSAwKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oZWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnQuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgfVxuXG4gICAgdGhpcy5hcHBlbmRFbGVtZW50SW5Qb3MoZWxlbWVudCwgcG9zKTtcblxuICAgIGlmICh0aGlzLmxheWVyc1twb3NdLnR0KSB7XG4gICAgICB2YXIgZWxlbWVudEluZGV4ID0gJ3RwJyBpbiB0aGlzLmxheWVyc1twb3NdID8gdGhpcy5maW5kSW5kZXhCeUluZCh0aGlzLmxheWVyc1twb3NdLnRwKSA6IHBvcyAtIDE7XG5cbiAgICAgIGlmIChlbGVtZW50SW5kZXggPT09IC0xKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF0gfHwgdGhpcy5lbGVtZW50c1tlbGVtZW50SW5kZXhdID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuYnVpbGRJdGVtKGVsZW1lbnRJbmRleCk7XG4gICAgICAgIHRoaXMuYWRkUGVuZGluZ0VsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF0dGVFbGVtZW50ID0gZWxlbWVudHNbZWxlbWVudEluZGV4XTtcbiAgICAgICAgdmFyIG1hdHRlTWFzayA9IG1hdHRlRWxlbWVudC5nZXRNYXR0ZSh0aGlzLmxheWVyc1twb3NdLnR0KTtcbiAgICAgICAgZWxlbWVudC5zZXRNYXR0ZShtYXR0ZU1hc2spO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNoZWNrUGVuZGluZ0VsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlICh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wZW5kaW5nRWxlbWVudHMucG9wKCk7XG4gICAgICBlbGVtZW50LmNoZWNrUGFyZW50aW5nKCk7XG5cbiAgICAgIGlmIChlbGVtZW50LmRhdGEudHQpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSA9PT0gZWxlbWVudCkge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnRJbmRleCA9ICd0cCcgaW4gZWxlbWVudC5kYXRhID8gdGhpcy5maW5kSW5kZXhCeUluZChlbGVtZW50LmRhdGEudHApIDogaSAtIDE7XG4gICAgICAgICAgICB2YXIgbWF0dGVFbGVtZW50ID0gdGhpcy5lbGVtZW50c1tlbGVtZW50SW5kZXhdO1xuICAgICAgICAgICAgdmFyIG1hdHRlTWFzayA9IG1hdHRlRWxlbWVudC5nZXRNYXR0ZSh0aGlzLmxheWVyc1tpXS50dCk7XG4gICAgICAgICAgICBlbGVtZW50LnNldE1hdHRlKG1hdHRlTWFzayk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICBpZiAodGhpcy5yZW5kZXJlZEZyYW1lID09PSBudW0gfHwgdGhpcy5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAobnVtID09PSBudWxsKSB7XG4gICAgICBudW0gPSB0aGlzLnJlbmRlcmVkRnJhbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IG51bTtcbiAgICB9IC8vIGNvbnNvbGUubG9nKCctLS0tLS0tJyk7XG4gICAgLy8gY29uc29sZS5sb2coJ0ZSQU1FICcsbnVtKTtcblxuXG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lTnVtID0gbnVtO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZUlkICs9IDE7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuY3VycmVudEZyYW1lID0gbnVtO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gZmFsc2U7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyhudW0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKG51bSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5nbG9iYWxEYXRhLl9tZGYpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZW5kZXJGcmFtZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuYXBwZW5kRWxlbWVudEluUG9zID0gZnVuY3Rpb24gKGVsZW1lbnQsIHBvcykge1xuICAgIHZhciBuZXdFbGVtZW50ID0gZWxlbWVudC5nZXRCYXNlRWxlbWVudCgpO1xuXG4gICAgaWYgKCFuZXdFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBuZXh0RWxlbWVudDtcblxuICAgIHdoaWxlIChpIDwgcG9zKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldICE9PSB0cnVlICYmIHRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQoKSkge1xuICAgICAgICBuZXh0RWxlbWVudCA9IHRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQoKTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIGlmIChuZXh0RWxlbWVudCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuaW5zZXJ0QmVmb3JlKG5ld0VsZW1lbnQsIG5leHRFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQobmV3RWxlbWVudCk7XG4gICAgfVxuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfTtcblxuICBmdW5jdGlvbiBJQ29tcEVsZW1lbnQoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBJQ29tcEVsZW1lbnQpO1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0VHJhbnNmb3JtKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJlckVsZW1lbnQoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpO1xuXG4gICAgaWYgKHRoaXMuZGF0YS54dCB8fCAhZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQpIHtcbiAgICAgIHRoaXMuYnVpbGRBbGxJdGVtcygpO1xuICAgIH1cblxuICAgIHRoaXMuaGlkZSgpO1xuICB9O1xuICAvKiBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbigpe1xyXG4gICAgICBpZighdGhpcy5oaWRkZW4pe1xyXG4gICAgICAgICAgdGhpcy5oaWRlRWxlbWVudCgpO1xyXG4gICAgICAgICAgdmFyIGksbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgICAgICBmb3IoIGkgPSAwOyBpIDwgbGVuOyBpKz0xICl7XHJcbiAgICAgICAgICAgICAgaWYodGhpcy5lbGVtZW50c1tpXSl7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudHNbaV0uaGlkZSgpO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgfVxyXG4gIH07ICovXG5cblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IGZ1bmN0aW9uIChudW0pIHtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICB0aGlzLnByZXBhcmVQcm9wZXJ0aWVzKG51bSwgdGhpcy5pc0luUmFuZ2UpO1xuXG4gICAgaWYgKCF0aGlzLmlzSW5SYW5nZSAmJiAhdGhpcy5kYXRhLnh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnRtLl9wbGFjZWhvbGRlcikge1xuICAgICAgdmFyIHRpbWVSZW1hcHBlZCA9IHRoaXMudG0udjtcblxuICAgICAgaWYgKHRpbWVSZW1hcHBlZCA9PT0gdGhpcy5kYXRhLm9wKSB7XG4gICAgICAgIHRpbWVSZW1hcHBlZCA9IHRoaXMuZGF0YS5vcCAtIDE7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IHRpbWVSZW1hcHBlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtIC8gdGhpcy5kYXRhLnNyO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyh0aGlzLnJlbmRlcmVkRnJhbWUpO1xuICAgIH0gLy8gVGhpcyBpdGVyYXRpb24gbmVlZHMgdG8gYmUgYmFja3dhcmRzIGJlY2F1c2Ugb2YgaG93IGV4cHJlc3Npb25zIGNvbm5lY3QgYmV0d2VlbiBlYWNoIG90aGVyXG5cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKHRoaXMucmVuZGVyZWRGcmFtZSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcblxuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXS5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSUNvbXBFbGVtZW50LnByb3RvdHlwZS5zZXRFbGVtZW50cyA9IGZ1bmN0aW9uIChlbGVtcykge1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtcztcbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmdldEVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRzO1xuICB9O1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveUVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95RWxlbWVudHMoKTtcbiAgICB0aGlzLmRlc3Ryb3lCYXNlRWxlbWVudCgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0NvbXBFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmxheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9IHRydWU7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IHRoaXMubGF5ZXJzID8gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLmxheWVycy5sZW5ndGgpIDogW107XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRtID0gZGF0YS50bSA/IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEudG0sIDAsIGdsb2JhbERhdGEuZnJhbWVSYXRlLCB0aGlzKSA6IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR1JlbmRlcmVyQmFzZSwgSUNvbXBFbGVtZW50LCBTVkdCYXNlRWxlbWVudF0sIFNWR0NvbXBFbGVtZW50KTtcblxuICBTVkdDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1JlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMuc3ZnRWxlbWVudCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICB2YXIgYXJpYUxhYmVsID0gJyc7XG5cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy50aXRsZSkge1xuICAgICAgdmFyIHRpdGxlRWxlbWVudCA9IGNyZWF0ZU5TKCd0aXRsZScpO1xuICAgICAgdmFyIHRpdGxlSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIHRpdGxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGl0bGVJZCk7XG4gICAgICB0aXRsZUVsZW1lbnQudGV4dENvbnRlbnQgPSBjb25maWcudGl0bGU7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuYXBwZW5kQ2hpbGQodGl0bGVFbGVtZW50KTtcbiAgICAgIGFyaWFMYWJlbCArPSB0aXRsZUlkO1xuICAgIH1cblxuICAgIGlmIChjb25maWcgJiYgY29uZmlnLmRlc2NyaXB0aW9uKSB7XG4gICAgICB2YXIgZGVzY0VsZW1lbnQgPSBjcmVhdGVOUygnZGVzYycpO1xuICAgICAgdmFyIGRlc2NJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgZGVzY0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIGRlc2NJZCk7XG4gICAgICBkZXNjRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbmZpZy5kZXNjcmlwdGlvbjtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChkZXNjRWxlbWVudCk7XG4gICAgICBhcmlhTGFiZWwgKz0gJyAnICsgZGVzY0lkO1xuICAgIH1cblxuICAgIGlmIChhcmlhTGFiZWwpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWxsZWRieScsIGFyaWFMYWJlbCk7XG4gICAgfVxuXG4gICAgdmFyIGRlZnMgPSBjcmVhdGVOUygnZGVmcycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChkZWZzKTtcbiAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQgPSBtYXNrRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcucHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgbWVldCcsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBjb250ZW50VmlzaWJpbGl0eTogY29uZmlnICYmIGNvbmZpZy5jb250ZW50VmlzaWJpbGl0eSB8fCAndmlzaWJsZScsXG4gICAgICBwcm9ncmVzc2l2ZUxvYWQ6IGNvbmZpZyAmJiBjb25maWcucHJvZ3Jlc3NpdmVMb2FkIHx8IGZhbHNlLFxuICAgICAgaGlkZU9uVHJhbnNwYXJlbnQ6ICEoY29uZmlnICYmIGNvbmZpZy5oaWRlT25UcmFuc3BhcmVudCA9PT0gZmFsc2UpLFxuICAgICAgdmlld0JveE9ubHk6IGNvbmZpZyAmJiBjb25maWcudmlld0JveE9ubHkgfHwgZmFsc2UsXG4gICAgICB2aWV3Qm94U2l6ZTogY29uZmlnICYmIGNvbmZpZy52aWV3Qm94U2l6ZSB8fCBmYWxzZSxcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpZDogY29uZmlnICYmIGNvbmZpZy5pZCB8fCAnJyxcbiAgICAgIGZvY3VzYWJsZTogY29uZmlnICYmIGNvbmZpZy5mb2N1c2FibGUsXG4gICAgICBmaWx0ZXJTaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUud2lkdGggfHwgJzEwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHQgfHwgJzEwMCUnLFxuICAgICAgICB4OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueCB8fCAnMCUnLFxuICAgICAgICB5OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueSB8fCAnMCUnXG4gICAgICB9LFxuICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcud2lkdGgsXG4gICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuaGVpZ2h0LFxuICAgICAgcnVuRXhwcmVzc2lvbnM6ICFjb25maWcgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zXG4gICAgfTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIGRlZnM6IGRlZnMsXG4gICAgICByZW5kZXJDb25maWc6IHRoaXMucmVuZGVyQ29uZmlnXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ3N2Zyc7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR1JlbmRlcmVyQmFzZV0sIFNWR1JlbmRlcmVyKTtcblxuICBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFNoYXBlVHJhbnNmb3JtTWFuYWdlcigpIHtcbiAgICB0aGlzLnNlcXVlbmNlcyA9IHt9O1xuICAgIHRoaXMuc2VxdWVuY2VMaXN0ID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1fa2V5X2NvdW50ID0gMDtcbiAgfVxuXG4gIFNoYXBlVHJhbnNmb3JtTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gICAgYWRkVHJhbnNmb3JtU2VxdWVuY2U6IGZ1bmN0aW9uIGFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIGtleSA9ICdfJztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGtleSArPSB0cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5rZXkgKyAnXyc7XG4gICAgICB9XG5cbiAgICAgIHZhciBzZXF1ZW5jZSA9IHRoaXMuc2VxdWVuY2VzW2tleV07XG5cbiAgICAgIGlmICghc2VxdWVuY2UpIHtcbiAgICAgICAgc2VxdWVuY2UgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtczogW10uY29uY2F0KHRyYW5zZm9ybXMpLFxuICAgICAgICAgIGZpbmFsVHJhbnNmb3JtOiBuZXcgTWF0cml4KCksXG4gICAgICAgICAgX21kZjogZmFsc2VcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZXF1ZW5jZXNba2V5XSA9IHNlcXVlbmNlO1xuICAgICAgICB0aGlzLnNlcXVlbmNlTGlzdC5wdXNoKHNlcXVlbmNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHNlcXVlbmNlO1xuICAgIH0sXG4gICAgcHJvY2Vzc1NlcXVlbmNlOiBmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2Uoc2VxdWVuY2UsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHNlcXVlbmNlLnRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgdmFyIF9tZGYgPSBpc0ZpcnN0RnJhbWU7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuICYmICFpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgaWYgKHNlcXVlbmNlLnRyYW5zZm9ybXNbaV0udHJhbnNmb3JtLm1Qcm9wcy5fbWRmKSB7XG4gICAgICAgICAgX21kZiA9IHRydWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChfbWRmKSB7XG4gICAgICAgIHNlcXVlbmNlLmZpbmFsVHJhbnNmb3JtLnJlc2V0KCk7XG5cbiAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBzZXF1ZW5jZS5maW5hbFRyYW5zZm9ybS5tdWx0aXBseShzZXF1ZW5jZS50cmFuc2Zvcm1zW2ldLnRyYW5zZm9ybS5tUHJvcHMudik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgc2VxdWVuY2UuX21kZiA9IF9tZGY7XG4gICAgfSxcbiAgICBwcm9jZXNzU2VxdWVuY2VzOiBmdW5jdGlvbiBwcm9jZXNzU2VxdWVuY2VzKGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zZXF1ZW5jZUxpc3QubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgdGhpcy5wcm9jZXNzU2VxdWVuY2UodGhpcy5zZXF1ZW5jZUxpc3RbaV0sIGlzRmlyc3RGcmFtZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICBnZXROZXdLZXk6IGZ1bmN0aW9uIGdldE5ld0tleSgpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtX2tleV9jb3VudCArPSAxO1xuICAgICAgcmV0dXJuICdfJyArIHRoaXMudHJhbnNmb3JtX2tleV9jb3VudDtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGx1bWFMb2FkZXIgPSBmdW5jdGlvbiBsdW1hTG9hZGVyKCkge1xuICAgIHZhciBpZCA9ICdfX2xvdHRpZV9lbGVtZW50X2x1bWFfYnVmZmVyJztcbiAgICB2YXIgbHVtYUJ1ZmZlciA9IG51bGw7XG4gICAgdmFyIGx1bWFCdWZmZXJDdHggPSBudWxsO1xuICAgIHZhciBzdmcgPSBudWxsOyAvLyBUaGlzIGFsdGVybmF0ZSBzb2x1dGlvbiBoYXMgYSBzbGlnaHQgZGVsYXkgYmVmb3JlIHRoZSBmaWx0ZXIgaXMgYXBwbGllZCwgcmVzdWx0aW5nIGluIGEgZmxpY2tlciBvbiB0aGUgZmlyc3QgZnJhbWUuXG4gICAgLy8gS2VlcGluZyB0aGlzIGhlcmUgZm9yIHJlZmVyZW5jZSwgYW5kIGluIHRoZSBmdXR1cmUsIGlmIG9mZnNjcmVlbiBjYW52YXMgc3VwcG9ydHMgdXJsIGZpbHRlcnMsIHRoaXMgY2FuIGJlIHVzZWQuXG4gICAgLy8gRm9yIG5vdywgbmVpdGhlciBvZiB0aGVtIHdvcmsgZm9yIG9mZnNjcmVlbiBjYW52YXMsIHNvIGNhbnZhcyB3b3JrZXJzIGNhbid0IHN1cHBvcnQgdGhlIGx1bWEgdHJhY2sgbWF0dGUgbWFzay5cbiAgICAvLyBOYW1pbmcgaXQgc29sdXRpb24gMiB0byBtYXJrIHRoZSBleHRyYSBjb21tZW50IGxpbmVzLlxuXG4gICAgLypcclxuICAgIHZhciBzdmdTdHJpbmcgPSBbXHJcbiAgICAgICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj4nLFxyXG4gICAgICAnPGZpbHRlciBpZD1cIicgKyBpZCArICdcIj4nLFxyXG4gICAgICAnPGZlQ29sb3JNYXRyaXggdHlwZT1cIm1hdHJpeFwiIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycz1cInNSR0JcIiB2YWx1ZXM9XCInLFxyXG4gICAgICAnMC4zLCAwLjMsIDAuMywgMCwgMCwgJyxcclxuICAgICAgJzAuMywgMC4zLCAwLjMsIDAsIDAsICcsXHJcbiAgICAgICcwLjMsIDAuMywgMC4zLCAwLCAwLCAnLFxyXG4gICAgICAnMC4zLCAwLjMsIDAuMywgMCwgMCcsXHJcbiAgICAgICdcIi8+JyxcclxuICAgICAgJzwvZmlsdGVyPicsXHJcbiAgICAgICc8L3N2Zz4nLFxyXG4gICAgXS5qb2luKCcnKTtcclxuICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3N2Z1N0cmluZ10sIHsgdHlwZTogJ2ltYWdlL3N2Zyt4bWwnIH0pO1xyXG4gICAgdmFyIHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XHJcbiAgICAqL1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlTHVtYVN2Z0ZpbHRlcigpIHtcbiAgICAgIHZhciBfc3ZnID0gY3JlYXRlTlMoJ3N2ZycpO1xuXG4gICAgICB2YXIgZmlsID0gY3JlYXRlTlMoJ2ZpbHRlcicpO1xuICAgICAgdmFyIG1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgICBmaWwuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTtcbiAgICAgIG1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgICBtYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgICAgbWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAsIDAuMywgMC4zLCAwLjMsIDAsIDAnKTtcbiAgICAgIGZpbC5hcHBlbmRDaGlsZChtYXRyaXgpO1xuXG4gICAgICBfc3ZnLmFwcGVuZENoaWxkKGZpbCk7XG5cbiAgICAgIF9zdmcuc2V0QXR0cmlidXRlKCdpZCcsIGlkICsgJ19zdmcnKTtcblxuICAgICAgaWYgKGZlYXR1cmVTdXBwb3J0LnN2Z0x1bWFIaWRkZW4pIHtcbiAgICAgICAgX3N2Zy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3N2ZztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkTHVtYSgpIHtcbiAgICAgIGlmICghbHVtYUJ1ZmZlcikge1xuICAgICAgICBzdmcgPSBjcmVhdGVMdW1hU3ZnRmlsdGVyKCk7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICAgICAgbHVtYUJ1ZmZlciA9IGNyZWF0ZVRhZygnY2FudmFzJyk7XG4gICAgICAgIGx1bWFCdWZmZXJDdHggPSBsdW1hQnVmZmVyLmdldENvbnRleHQoJzJkJyk7IC8vIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gYHVybCgnJHt1cmx9I19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInKWA7IC8vIHBhcnQgb2Ygc29sdXRpb24gMlxuXG4gICAgICAgIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gJ3VybCgjJyArIGlkICsgJyknO1xuICAgICAgICBsdW1hQnVmZmVyQ3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICAgICAgbHVtYUJ1ZmZlckN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRMdW1hKGNhbnZhcykge1xuICAgICAgaWYgKCFsdW1hQnVmZmVyKSB7XG4gICAgICAgIGxvYWRMdW1hKCk7XG4gICAgICB9XG5cbiAgICAgIGx1bWFCdWZmZXIud2lkdGggPSBjYW52YXMud2lkdGg7XG4gICAgICBsdW1hQnVmZmVyLmhlaWdodCA9IGNhbnZhcy5oZWlnaHQ7IC8vIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gYHVybCgnJHt1cmx9I19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInKWA7IC8vIHBhcnQgb2Ygc29sdXRpb24gMlxuXG4gICAgICBsdW1hQnVmZmVyQ3R4LmZpbHRlciA9ICd1cmwoIycgKyBpZCArICcpJztcbiAgICAgIHJldHVybiBsdW1hQnVmZmVyO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsb2FkOiBsb2FkTHVtYSxcbiAgICAgIGdldDogZ2V0THVtYVxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAoZmVhdHVyZVN1cHBvcnQub2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgICByZXR1cm4gbmV3IE9mZnNjcmVlbkNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICB9XG5cbiAgICB2YXIgY2FudmFzID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgIHJldHVybiBjYW52YXM7XG4gIH1cblxuICB2YXIgYXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRMdW1hQ2FudmFzOiBsdW1hTG9hZGVyLmxvYWQsXG4gICAgICBnZXRMdW1hQ2FudmFzOiBsdW1hTG9hZGVyLmdldCxcbiAgICAgIGNyZWF0ZUNhbnZhczogY3JlYXRlQ2FudmFzXG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciByZWdpc3RlcmVkRWZmZWN0cyA9IHt9O1xuXG4gIGZ1bmN0aW9uIENWRWZmZWN0cyhlbGVtKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVsZW0uZGF0YS5lZiA/IGVsZW0uZGF0YS5lZi5sZW5ndGggOiAwO1xuICAgIHRoaXMuZmlsdGVycyA9IFtdO1xuICAgIHZhciBmaWx0ZXJNYW5hZ2VyO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBmaWx0ZXJNYW5hZ2VyID0gbnVsbDtcbiAgICAgIHZhciB0eXBlID0gZWxlbS5kYXRhLmVmW2ldLnR5O1xuXG4gICAgICBpZiAocmVnaXN0ZXJlZEVmZmVjdHNbdHlwZV0pIHtcbiAgICAgICAgdmFyIEVmZmVjdCA9IHJlZ2lzdGVyZWRFZmZlY3RzW3R5cGVdLmVmZmVjdDtcbiAgICAgICAgZmlsdGVyTWFuYWdlciA9IG5ldyBFZmZlY3QoZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWx0ZXJNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuZmlsdGVycy5wdXNoKGZpbHRlck1hbmFnZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICBlbGVtLmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgQ1ZFZmZlY3RzLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZmlsdGVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMuZmlsdGVyc1tpXS5yZW5kZXJGcmFtZShfaXNGaXJzdEZyYW1lKTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZFZmZlY3RzLnByb3RvdHlwZS5nZXRFZmZlY3RzID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcbiAgICB2YXIgZWZmZWN0cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJzW2ldLnR5cGUgPT09IHR5cGUpIHtcbiAgICAgICAgZWZmZWN0cy5wdXNoKHRoaXMuZmlsdGVyc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVmZmVjdHM7XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJFZmZlY3QoaWQsIGVmZmVjdCkge1xuICAgIHJlZ2lzdGVyZWRFZmZlY3RzW2lkXSA9IHtcbiAgICAgIGVmZmVjdDogZWZmZWN0XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENWTWFza0VsZW1lbnQoZGF0YSwgZWxlbWVudCkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm1hc2tzUHJvcGVydGllcyA9IHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXMgfHwgW107XG4gICAgdGhpcy52aWV3RGF0YSA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHZhciBoYXNNYXNrcyA9IGZhbHNlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nKSB7XG4gICAgICAgIGhhc01hc2tzID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy52aWV3RGF0YVtpXSA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcCh0aGlzLmVsZW1lbnQsIHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLCAzKTtcbiAgICB9XG5cbiAgICB0aGlzLmhhc01hc2tzID0gaGFzTWFza3M7XG5cbiAgICBpZiAoaGFzTWFza3MpIHtcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRSZW5kZXJhYmxlQ29tcG9uZW50KHRoaXMpO1xuICAgIH1cbiAgfVxuXG4gIENWTWFza0VsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5oYXNNYXNrcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciB0cmFuc2Zvcm0gPSB0aGlzLmVsZW1lbnQuZmluYWxUcmFuc2Zvcm0ubWF0O1xuICAgIHZhciBjdHggPSB0aGlzLmVsZW1lbnQuY2FudmFzQ29udGV4dDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuICAgIHZhciBwdDtcbiAgICB2YXIgcHRzO1xuICAgIHZhciBkYXRhO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJykge1xuICAgICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0uaW52KSB7XG4gICAgICAgICAgY3R4Lm1vdmVUbygwLCAwKTtcbiAgICAgICAgICBjdHgubGluZVRvKHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLmNvbXBTaXplLncsIDApO1xuICAgICAgICAgIGN0eC5saW5lVG8odGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUudywgdGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUuaCk7XG4gICAgICAgICAgY3R4LmxpbmVUbygwLCB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKTtcbiAgICAgICAgICBjdHgubGluZVRvKDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YSA9IHRoaXMudmlld0RhdGFbaV0udjtcbiAgICAgICAgcHQgPSB0cmFuc2Zvcm0uYXBwbHlUb1BvaW50QXJyYXkoZGF0YS52WzBdWzBdLCBkYXRhLnZbMF1bMV0sIDApO1xuICAgICAgICBjdHgubW92ZVRvKHB0WzBdLCBwdFsxXSk7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgakxlbiA9IGRhdGEuX2xlbmd0aDtcblxuICAgICAgICBmb3IgKGogPSAxOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgcHRzID0gdHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2ogLSAxXSwgZGF0YS5pW2pdLCBkYXRhLnZbal0pO1xuICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHB0c1swXSwgcHRzWzFdLCBwdHNbMl0sIHB0c1szXSwgcHRzWzRdLCBwdHNbNV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcHRzID0gdHJhbnNmb3JtLmFwcGx5VG9UcmlwbGVQb2ludHMoZGF0YS5vW2ogLSAxXSwgZGF0YS5pWzBdLCBkYXRhLnZbMF0pO1xuICAgICAgICBjdHguYmV6aWVyQ3VydmVUbyhwdHNbMF0sIHB0c1sxXSwgcHRzWzJdLCBwdHNbM10sIHB0c1s0XSwgcHRzWzVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5yZW5kZXJlci5zYXZlKHRydWUpO1xuICAgIGN0eC5jbGlwKCk7XG4gIH07XG5cbiAgQ1ZNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza1Byb3BlcnR5ID0gTWFza0VsZW1lbnQucHJvdG90eXBlLmdldE1hc2tQcm9wZXJ0eTtcblxuICBDVk1hc2tFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZCYXNlRWxlbWVudCgpIHt9XG5cbiAgdmFyIG9wZXJhdGlvbnNNYXAgPSB7XG4gICAgMTogJ3NvdXJjZS1pbicsXG4gICAgMjogJ3NvdXJjZS1vdXQnLFxuICAgIDM6ICdzb3VyY2UtaW4nLFxuICAgIDQ6ICdzb3VyY2Utb3V0J1xuICB9O1xuICBDVkJhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBjcmVhdGVFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlRWxlbWVudHMoKSB7fSxcbiAgICBpbml0UmVuZGVyZXJFbGVtZW50OiBmdW5jdGlvbiBpbml0UmVuZGVyZXJFbGVtZW50KCkge30sXG4gICAgY3JlYXRlQ29udGFpbmVyRWxlbWVudHM6IGZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCkge1xuICAgICAgLy8gSWYgdGhlIGxheWVyIGlzIG1hc2tlZCB3ZSB3aWxsIHVzZSB0d28gYnVmZmVycyB0byBzdG9yZSBlYWNoIGRpZmZlcmVudCBzdGF0ZXMgb2YgdGhlIGRyYXdpbmdcbiAgICAgIC8vIFRoaXMgc29sdXRpb24gaXMgbm90IGlkZWFsIGZvciBzZXZlcmFsIHJlYXNvbi4gQnV0IHVuZm9ydHVuYXRlbHksIGJlY2F1c2Ugb2YgdGhlIHJlY3Vyc2l2ZVxuICAgICAgLy8gbmF0dXJlIG9mIHRoZSByZW5kZXIgdHJlZSwgaXQncyB0aGUgb25seSBzaW1wbGUgd2F5IHRvIG1ha2Ugc3VyZSBvbmUgaW5uZXIgbWFzayBkb2Vzbid0IG92ZXJyaWRlIGFuIG91dGVyIG1hc2suXG4gICAgICAvLyBUT0RPOiB0cnkgdG8gcmVkdWNlIHRoZSBzaXplIG9mIHRoZXNlIGJ1ZmZlcnMgdG8gdGhlIHNpemUgb2YgdGhlIGNvbXBvc2l0aW9uIGNvbnRhbmluZyB0aGUgbGF5ZXJcbiAgICAgIC8vIEl0IG1pZ2h0IGJlIGNoYWxsZW5naW5nIGJlY2F1c2UgdGhlIGxheWVyIG1vc3QgbGlrZWx5IGlzIHRyYW5zZm9ybWVkIGluIHNvbWUgd2F5XG4gICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDEpIHtcbiAgICAgICAgdGhpcy5idWZmZXJzID0gW107XG4gICAgICAgIHZhciBjYW52YXNDb250ZXh0ID0gdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQ7XG4gICAgICAgIHZhciBidWZmZXJDYW52YXMgPSBhc3NldExvYWRlci5jcmVhdGVDYW52YXMoY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGgsIGNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlckNhbnZhcyk7XG4gICAgICAgIHZhciBidWZmZXJDYW52YXMyID0gYXNzZXRMb2FkZXIuY3JlYXRlQ2FudmFzKGNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoLCBjYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB0aGlzLmJ1ZmZlcnMucHVzaChidWZmZXJDYW52YXMyKTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDMgJiYgIWRvY3VtZW50Ll9pc1Byb3h5KSB7XG4gICAgICAgICAgYXNzZXRMb2FkZXIubG9hZEx1bWFDYW52YXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzID0gdGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcztcbiAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyID0gbmV3IENWRWZmZWN0cyh0aGlzKTtcbiAgICAgIHRoaXMuc2VhcmNoRWZmZWN0VHJhbnNmb3JtcygpO1xuICAgIH0sXG4gICAgY3JlYXRlQ29udGVudDogZnVuY3Rpb24gY3JlYXRlQ29udGVudCgpIHt9LFxuICAgIHNldEJsZW5kTW9kZTogZnVuY3Rpb24gc2V0QmxlbmRNb2RlKCkge1xuICAgICAgdmFyIGdsb2JhbERhdGEgPSB0aGlzLmdsb2JhbERhdGE7XG5cbiAgICAgIGlmIChnbG9iYWxEYXRhLmJsZW5kTW9kZSAhPT0gdGhpcy5kYXRhLmJtKSB7XG4gICAgICAgIGdsb2JhbERhdGEuYmxlbmRNb2RlID0gdGhpcy5kYXRhLmJtO1xuICAgICAgICB2YXIgYmxlbmRNb2RlVmFsdWUgPSBnZXRCbGVuZE1vZGUodGhpcy5kYXRhLmJtKTtcbiAgICAgICAgZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IGJsZW5kTW9kZVZhbHVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHM6IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCkge1xuICAgICAgdGhpcy5tYXNrTWFuYWdlciA9IG5ldyBDVk1hc2tFbGVtZW50KHRoaXMuZGF0YSwgdGhpcyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybUVmZmVjdHMgPSB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlci5nZXRFZmZlY3RzKGVmZmVjdFR5cGVzLlRSQU5TRk9STV9FRkZFQ1QpO1xuICAgIH0sXG4gICAgaGlkZUVsZW1lbnQ6IGZ1bmN0aW9uIGhpZGVFbGVtZW50KCkge1xuICAgICAgaWYgKCF0aGlzLmhpZGRlbiAmJiAoIXRoaXMuaXNJblJhbmdlIHx8IHRoaXMuaXNUcmFuc3BhcmVudCkpIHtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2hvd0VsZW1lbnQ6IGZ1bmN0aW9uIHNob3dFbGVtZW50KCkge1xuICAgICAgaWYgKHRoaXMuaXNJblJhbmdlICYmICF0aGlzLmlzVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5tYXNrTWFuYWdlci5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNsZWFyQ2FudmFzOiBmdW5jdGlvbiBjbGVhckNhbnZhcyhjYW52YXNDb250ZXh0KSB7XG4gICAgICBjYW52YXNDb250ZXh0LmNsZWFyUmVjdCh0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHksIHRoaXMudHJhbnNmb3JtQ2FudmFzLncgKiB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCwgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5KTtcbiAgICB9LFxuICAgIHByZXBhcmVMYXllcjogZnVuY3Rpb24gcHJlcGFyZUxheWVyKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAxKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbMF07XG4gICAgICAgIHZhciBidWZmZXJDdHggPSBidWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5jbGVhckNhbnZhcyhidWZmZXJDdHgpOyAvLyBvbiB0aGUgZmlyc3QgYnVmZmVyIHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBnbG9iYWwgZHJhd2luZ1xuXG4gICAgICAgIGJ1ZmZlckN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcywgMCwgMCk7IC8vIFRoZSBuZXh0IGZvdXIgbGluZXMgYXJlIHRvIGNsZWFyIHRoZSBjYW52YXNcbiAgICAgICAgLy8gVE9ETzogQ2hlY2sgaWYgdGhlcmUgaXMgYSB3YXkgdG8gY2xlYXIgdGhlIGNhbnZhcyB3aXRob3V0IHJlc2V0dGluZyB0aGUgdHJhbnNmb3JtXG5cbiAgICAgICAgdGhpcy5jdXJyZW50VHJhbnNmb3JtID0gdGhpcy5jYW52YXNDb250ZXh0LmdldFRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKHRoaXMuY2FudmFzQ29udGV4dCk7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0odGhpcy5jdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGV4aXRMYXllcjogZnVuY3Rpb24gZXhpdExheWVyKCkge1xuICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAxKSB7XG4gICAgICAgIHZhciBidWZmZXIgPSB0aGlzLmJ1ZmZlcnNbMV07IC8vIE9uIHRoZSBzZWNvbmQgYnVmZmVyIHdlIHN0b3JlIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBnbG9iYWwgZHJhd2luZ1xuICAgICAgICAvLyB0aGF0IG9ubHkgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllclxuICAgICAgICAvLyAoaWYgaXQgaXMgYSBjb21wb3NpdGlvbiwgaXQgYWxzbyBpbmNsdWRlcyB0aGUgbmVzdGVkIGxheWVycylcblxuICAgICAgICB2YXIgYnVmZmVyQ3R4ID0gYnVmZmVyLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXMoYnVmZmVyQ3R4KTtcbiAgICAgICAgYnVmZmVyQ3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLCAwLCAwKTsgLy8gV2UgY2xlYXIgdGhlIGNhbnZhcyBhZ2FpblxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5jYW52YXNDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBXZSBkcmF3IHRoZSBtYXNrXG5cbiAgICAgICAgdmFyIG1hc2sgPSB0aGlzLmNvbXAuZ2V0RWxlbWVudEJ5SWQoJ3RwJyBpbiB0aGlzLmRhdGEgPyB0aGlzLmRhdGEudHAgOiB0aGlzLmRhdGEuaW5kIC0gMSk7XG4gICAgICAgIG1hc2sucmVuZGVyRnJhbWUodHJ1ZSk7IC8vIFdlIGRyYXcgdGhlIHNlY29uZCBidWZmZXIgKHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhpcyBsYXllcilcblxuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApOyAvLyBJZiB0aGUgbWFzayBpcyBhIEx1bWEgbWF0dGUsIHdlIG5lZWQgdG8gZG8gdHdvIGV4dHJhIHBhaW50aW5nIG9wZXJhdGlvbnNcbiAgICAgICAgLy8gdGhlIF9pc1Byb3h5IGNoZWNrIGlzIHRvIGF2b2lkIGRyYXdpbmcgYSBmYWtlIGNhbnZhcyBpbiB3b3JrZXJzIHRoYXQgd2lsbCB0aHJvdyBhbiBlcnJvclxuXG4gICAgICAgIGlmICh0aGlzLmRhdGEudHQgPj0gMyAmJiAhZG9jdW1lbnQuX2lzUHJveHkpIHtcbiAgICAgICAgICAvLyBXZSBjb3B5IHRoZSBwYWludGVkIG1hc2sgdG8gYSBidWZmZXIgdGhhdCBoYXMgYSBjb2xvciBtYXRyaXggZmlsdGVyIGFwcGxpZWQgdG8gaXRcbiAgICAgICAgICAvLyB0aGF0IGFwcGxpZXMgdGhlIHJnYiB2YWx1ZXMgdG8gdGhlIGFscGhhIGNoYW5uZWxcbiAgICAgICAgICB2YXIgbHVtYUJ1ZmZlciA9IGFzc2V0TG9hZGVyLmdldEx1bWFDYW52YXModGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcyk7XG4gICAgICAgICAgdmFyIGx1bWFCdWZmZXJDdHggPSBsdW1hQnVmZmVyLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgICAgbHVtYUJ1ZmZlckN0eC5kcmF3SW1hZ2UodGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcywgMCwgMCk7XG4gICAgICAgICAgdGhpcy5jbGVhckNhbnZhcyh0aGlzLmNhbnZhc0NvbnRleHQpOyAvLyB3ZSByZXBhaW50IHRoZSBjb250ZXh0IHdpdGggdGhlIG1hc2sgYXBwbGllZCB0byBpdFxuXG4gICAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmRyYXdJbWFnZShsdW1hQnVmZmVyLCAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSBvcGVyYXRpb25zTWFwW3RoaXMuZGF0YS50dF07XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UoYnVmZmVyLCAwLCAwKTsgLy8gV2UgZmluYWxseSBkcmF3IHRoZSBmaXJzdCBidWZmZXIgKHRoYXQgY29udGFpbnMgdGhlIGNvbnRlbnQgb2YgdGhlIGdsb2JhbCBkcmF3aW5nKVxuICAgICAgICAvLyBXZSB1c2UgZGVzdGluYXRpb24tb3ZlciB0byBkcmF3IHRoZSBnbG9iYWwgZHJhd2luZyBiZWxvdyB0aGUgY3VycmVudCBsYXllclxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnZGVzdGluYXRpb24tb3Zlcic7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5idWZmZXJzWzBdLCAwLCAwKTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pOyAvLyBXZSByZXNldCB0aGUgZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIHRvIHNvdXJjZS1vdmVyLCB0aGUgc3RhbmRhcmQgdHlwZSBvZiBvcGVyYXRpb25cblxuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckZyYW1lOiBmdW5jdGlvbiByZW5kZXJGcmFtZShmb3JjZVJlbmRlcikge1xuICAgICAgaWYgKHRoaXMuaGlkZGVuIHx8IHRoaXMuZGF0YS5oZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEudGQgPT09IDEgJiYgIWZvcmNlUmVuZGVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRoaXMucmVuZGVyUmVuZGVyYWJsZSgpO1xuICAgICAgdGhpcy5yZW5kZXJMb2NhbFRyYW5zZm9ybSgpO1xuICAgICAgdGhpcy5zZXRCbGVuZE1vZGUoKTtcbiAgICAgIHZhciBmb3JjZVJlYWxTdGFjayA9IHRoaXMuZGF0YS50eSA9PT0gMDtcbiAgICAgIHRoaXMucHJlcGFyZUxheWVyKCk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuc2F2ZShmb3JjZVJlYWxTdGFjayk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4VHJhbnNmb3JtKHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxNYXQucHJvcHMpO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLmN0eE9wYWNpdHkodGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE9wYWNpdHkpO1xuICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKGZvcmNlUmVhbFN0YWNrKTtcbiAgICAgIHRoaXMuZXhpdExheWVyKCk7XG5cbiAgICAgIGlmICh0aGlzLm1hc2tNYW5hZ2VyLmhhc01hc2tzKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKHRydWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IG51bGw7XG4gICAgICB0aGlzLmRhdGEgPSBudWxsO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhID0gbnVsbDtcbiAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgIH0sXG4gICAgbUhlbHBlcjogbmV3IE1hdHJpeCgpXG4gIH07XG4gIENWQmFzZUVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBDVkJhc2VFbGVtZW50LnByb3RvdHlwZS5oaWRlRWxlbWVudDtcbiAgQ1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuc2hvdyA9IENWQmFzZUVsZW1lbnQucHJvdG90eXBlLnNob3dFbGVtZW50O1xuXG4gIGZ1bmN0aW9uIENWU2hhcGVEYXRhKGVsZW1lbnQsIGRhdGEsIHN0eWxlcywgdHJhbnNmb3Jtc01hbmFnZXIpIHtcbiAgICB0aGlzLnN0eWxlZFNoYXBlcyA9IFtdO1xuICAgIHRoaXMudHIgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG4gICAgdmFyIHR5ID0gNDtcblxuICAgIGlmIChkYXRhLnR5ID09PSAncmMnKSB7XG4gICAgICB0eSA9IDU7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZWwnKSB7XG4gICAgICB0eSA9IDY7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnc3InKSB7XG4gICAgICB0eSA9IDc7XG4gICAgfVxuXG4gICAgdGhpcy5zaCA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldFNoYXBlUHJvcChlbGVtZW50LCBkYXRhLCB0eSwgZWxlbWVudCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG4gICAgdmFyIHN0eWxlZFNoYXBlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXN0eWxlc1tpXS5jbG9zZWQpIHtcbiAgICAgICAgc3R5bGVkU2hhcGUgPSB7XG4gICAgICAgICAgdHJhbnNmb3JtczogdHJhbnNmb3Jtc01hbmFnZXIuYWRkVHJhbnNmb3JtU2VxdWVuY2Uoc3R5bGVzW2ldLnRyYW5zZm9ybXMpLFxuICAgICAgICAgIHRyTm9kZXM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc3R5bGVkU2hhcGVzLnB1c2goc3R5bGVkU2hhcGUpO1xuICAgICAgICBzdHlsZXNbaV0uZWxlbWVudHMucHVzaChzdHlsZWRTaGFwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQ1ZTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQgPSBTVkdTaGFwZURhdGEucHJvdG90eXBlLnNldEFzQW5pbWF0ZWQ7XG5cbiAgZnVuY3Rpb24gQ1ZTaGFwZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuc2hhcGVzID0gW107XG4gICAgdGhpcy5zaGFwZXNEYXRhID0gZGF0YS5zaGFwZXM7XG4gICAgdGhpcy5zdHlsZXNMaXN0ID0gW107XG4gICAgdGhpcy5pdGVtc0RhdGEgPSBbXTtcbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdO1xuICAgIHRoaXMuc2hhcGVNb2RpZmllcnMgPSBbXTtcbiAgICB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1zTWFuYWdlciA9IG5ldyBTaGFwZVRyYW5zZm9ybU1hbmFnZXIoKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSVNoYXBlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIENWU2hhcGVFbGVtZW50KTtcbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gUmVuZGVyYWJsZURPTUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUudHJhbnNmb3JtSGVscGVyID0ge1xuICAgIG9wYWNpdHk6IDEsXG4gICAgX29wTWRmOiBmYWxzZVxuICB9O1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGFzaFJlc2V0dGVyID0gW107XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRydWUsIFtdKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIHRyYW5zZm9ybXMpIHtcbiAgICB2YXIgc3R5bGVFbGVtID0ge1xuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIHR5cGU6IGRhdGEudHksXG4gICAgICBwcmVUcmFuc2Zvcm1zOiB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLmFkZFRyYW5zZm9ybVNlcXVlbmNlKHRyYW5zZm9ybXMpLFxuICAgICAgdHJhbnNmb3JtczogW10sXG4gICAgICBlbGVtZW50czogW10sXG4gICAgICBjbG9zZWQ6IGRhdGEuaGQgPT09IHRydWVcbiAgICB9O1xuICAgIHZhciBlbGVtZW50RGF0YSA9IHt9O1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdmbCcgfHwgZGF0YS50eSA9PT0gJ3N0Jykge1xuICAgICAgZWxlbWVudERhdGEuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcblxuICAgICAgaWYgKCFlbGVtZW50RGF0YS5jLmspIHtcbiAgICAgICAgc3R5bGVFbGVtLmNvID0gJ3JnYignICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihlbGVtZW50RGF0YS5jLnZbMl0pICsgJyknO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ2dmJyB8fCBkYXRhLnR5ID09PSAnZ3MnKSB7XG4gICAgICBlbGVtZW50RGF0YS5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5zLCAxLCBudWxsLCB0aGlzKTtcbiAgICAgIGVsZW1lbnREYXRhLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLmUsIDEsIG51bGwsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuaCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuaCB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAuMDEsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuYSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYSB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICBlbGVtZW50RGF0YS5nID0gbmV3IEdyYWRpZW50UHJvcGVydHkodGhpcywgZGF0YS5nLCB0aGlzKTtcbiAgICB9XG5cbiAgICBlbGVtZW50RGF0YS5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcblxuICAgIGlmIChkYXRhLnR5ID09PSAnc3QnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIHN0eWxlRWxlbS5sYyA9IGxpbmVDYXBFbnVtW2RhdGEubGMgfHwgMl07XG4gICAgICBzdHlsZUVsZW0ubGogPSBsaW5lSm9pbkVudW1bZGF0YS5saiB8fCAyXTtcblxuICAgICAgaWYgKGRhdGEubGogPT0gMSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBzdHlsZUVsZW0ubWwgPSBkYXRhLm1sO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50RGF0YS53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcblxuICAgICAgaWYgKCFlbGVtZW50RGF0YS53LmspIHtcbiAgICAgICAgc3R5bGVFbGVtLndpID0gZWxlbWVudERhdGEudy52O1xuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5kKSB7XG4gICAgICAgIHZhciBkID0gbmV3IERhc2hQcm9wZXJ0eSh0aGlzLCBkYXRhLmQsICdjYW52YXMnLCB0aGlzKTtcbiAgICAgICAgZWxlbWVudERhdGEuZCA9IGQ7XG5cbiAgICAgICAgaWYgKCFlbGVtZW50RGF0YS5kLmspIHtcbiAgICAgICAgICBzdHlsZUVsZW0uZGEgPSBlbGVtZW50RGF0YS5kLmRhc2hBcnJheTtcbiAgICAgICAgICBzdHlsZUVsZW1bXCJkb1wiXSA9IGVsZW1lbnREYXRhLmQuZGFzaG9mZnNldFswXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHlsZUVsZW0uciA9IGRhdGEuciA9PT0gMiA/ICdldmVub2RkJyA6ICdub256ZXJvJztcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlc0xpc3QucHVzaChzdHlsZUVsZW0pO1xuICAgIGVsZW1lbnREYXRhLnN0eWxlID0gc3R5bGVFbGVtO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlR3JvdXBFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50RGF0YSA9IHtcbiAgICAgIGl0OiBbXSxcbiAgICAgIHByZXZWaWV3RGF0YTogW11cbiAgICB9O1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlVHJhbnNmb3JtRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0ge1xuICAgICAgdHJhbnNmb3JtOiB7XG4gICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgIF9vcE1kZjogZmFsc2UsXG4gICAgICAgIGtleTogdGhpcy50cmFuc2Zvcm1zTWFuYWdlci5nZXROZXdLZXkoKSxcbiAgICAgICAgb3A6IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEubywgMCwgMC4wMSwgdGhpcyksXG4gICAgICAgIG1Qcm9wczogVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KHRoaXMsIGRhdGEsIHRoaXMpXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYXBlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IENWU2hhcGVEYXRhKHRoaXMsIGRhdGEsIHRoaXMuc3R5bGVzTGlzdCwgdGhpcy50cmFuc2Zvcm1zTWFuYWdlcik7XG4gICAgdGhpcy5zaGFwZXMucHVzaChlbGVtZW50RGF0YSk7XG4gICAgdGhpcy5hZGRTaGFwZVRvTW9kaWZpZXJzKGVsZW1lbnREYXRhKTtcbiAgICByZXR1cm4gZWxlbWVudERhdGE7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbG9hZFNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLml0ZW1zRGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMucHJldlZpZXdEYXRhW2ldID0gdGhpcy5pdGVtc0RhdGFbaV07XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRydWUsIFtdKTtcbiAgICBsZW4gPSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyTW9kaWZpZXJzKCk7XG4gICAgdGhpcy50cmFuc2Zvcm1zTWFuYWdlci5wcm9jZXNzU2VxdWVuY2VzKHRoaXMuX2lzRmlyc3RGcmFtZSk7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLmFkZFRyYW5zZm9ybVRvU3R5bGVMaXN0ID0gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzTGlzdFtpXS5jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnRyYW5zZm9ybXMucHVzaCh0cmFuc2Zvcm0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKCF0aGlzLnN0eWxlc0xpc3RbaV0uY2xvc2VkKSB7XG4gICAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS50cmFuc2Zvcm1zLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2xvc2VTdHlsZXMgPSBmdW5jdGlvbiAoc3R5bGVzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHN0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHN0eWxlc1tpXS5jbG9zZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuc2VhcmNoU2hhcGVzID0gZnVuY3Rpb24gKGFyciwgaXRlbXNEYXRhLCBwcmV2Vmlld0RhdGEsIHNob3VsZFJlbmRlciwgdHJhbnNmb3Jtcykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoIC0gMTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgb3duU3R5bGVzID0gW107XG4gICAgdmFyIG93bk1vZGlmaWVycyA9IFtdO1xuICAgIHZhciBwcm9jZXNzZWRQb3M7XG4gICAgdmFyIG1vZGlmaWVyO1xuICAgIHZhciBjdXJyZW50VHJhbnNmb3JtO1xuICAgIHZhciBvd25UcmFuc2Zvcm1zID0gW10uY29uY2F0KHRyYW5zZm9ybXMpO1xuXG4gICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgcHJvY2Vzc2VkUG9zID0gdGhpcy5zZWFyY2hQcm9jZXNzZWRFbGVtZW50KGFycltpXSk7XG5cbiAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgIGFycltpXS5fc2hvdWxkUmVuZGVyID0gc2hvdWxkUmVuZGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlbXNEYXRhW2ldID0gcHJldlZpZXdEYXRhW3Byb2Nlc3NlZFBvcyAtIDFdO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJyW2ldLnR5ID09PSAnZmwnIHx8IGFycltpXS50eSA9PT0gJ3N0JyB8fCBhcnJbaV0udHkgPT09ICdnZicgfHwgYXJyW2ldLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVTdHlsZUVsZW1lbnQoYXJyW2ldLCBvd25UcmFuc2Zvcm1zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0uc3R5bGUuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25TdHlsZXMucHVzaChpdGVtc0RhdGFbaV0uc3R5bGUpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZUdyb3VwRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGpMZW4gPSBpdGVtc0RhdGFbaV0uaXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YVtqXSA9IGl0ZW1zRGF0YVtpXS5pdFtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNlYXJjaFNoYXBlcyhhcnJbaV0uaXQsIGl0ZW1zRGF0YVtpXS5pdCwgaXRlbXNEYXRhW2ldLnByZXZWaWV3RGF0YSwgc2hvdWxkUmVuZGVyLCBvd25UcmFuc2Zvcm1zKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndHInKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgY3VycmVudFRyYW5zZm9ybSA9IHRoaXMuY3JlYXRlVHJhbnNmb3JtRWxlbWVudChhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgICAgIH1cblxuICAgICAgICBvd25UcmFuc2Zvcm1zLnB1c2goaXRlbXNEYXRhW2ldKTtcbiAgICAgICAgdGhpcy5hZGRUcmFuc2Zvcm1Ub1N0eWxlTGlzdChpdGVtc0RhdGFbaV0pO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdzaCcgfHwgYXJyW2ldLnR5ID09PSAncmMnIHx8IGFycltpXS50eSA9PT0gJ2VsJyB8fCBhcnJbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVNoYXBlRWxlbWVudChhcnJbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3RtJyB8fCBhcnJbaV0udHkgPT09ICdyZCcgfHwgYXJyW2ldLnR5ID09PSAncGInIHx8IGFycltpXS50eSA9PT0gJ3p6JyB8fCBhcnJbaV0udHkgPT09ICdvcCcpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBtb2RpZmllciA9IFNoYXBlTW9kaWZpZXJzLmdldE1vZGlmaWVyKGFycltpXS50eSk7XG4gICAgICAgICAgbW9kaWZpZXIuaW5pdCh0aGlzLCBhcnJbaV0pO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3JwJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSBtb2RpZmllcjtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFyciwgaSwgaXRlbXNEYXRhKTtcbiAgICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzLnB1c2gobW9kaWZpZXIpO1xuICAgICAgICAgIHNob3VsZFJlbmRlciA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1vZGlmaWVyID0gaXRlbXNEYXRhW2ldO1xuICAgICAgICAgIG1vZGlmaWVyLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBvd25Nb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuYWRkUHJvY2Vzc2VkRWxlbWVudChhcnJbaV0sIGkgKyAxKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbW92ZVRyYW5zZm9ybUZyb21TdHlsZUxpc3QoKTtcbiAgICB0aGlzLmNsb3NlU3R5bGVzKG93blN0eWxlcyk7XG4gICAgbGVuID0gb3duTW9kaWZpZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgb3duTW9kaWZpZXJzW2ldLmNsb3NlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1IZWxwZXIub3BhY2l0eSA9IDE7XG4gICAgdGhpcy50cmFuc2Zvcm1IZWxwZXIuX29wTWRmID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgICB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLnByb2Nlc3NTZXF1ZW5jZXModGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgICB0aGlzLnJlbmRlclNoYXBlKHRoaXMudHJhbnNmb3JtSGVscGVyLCB0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0cnVlKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyU2hhcGVUcmFuc2Zvcm0gPSBmdW5jdGlvbiAocGFyZW50VHJhbnNmb3JtLCBncm91cFRyYW5zZm9ybSkge1xuICAgIGlmIChwYXJlbnRUcmFuc2Zvcm0uX29wTWRmIHx8IGdyb3VwVHJhbnNmb3JtLm9wLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBncm91cFRyYW5zZm9ybS5vcGFjaXR5ID0gcGFyZW50VHJhbnNmb3JtLm9wYWNpdHk7XG4gICAgICBncm91cFRyYW5zZm9ybS5vcGFjaXR5ICo9IGdyb3VwVHJhbnNmb3JtLm9wLnY7XG4gICAgICBncm91cFRyYW5zZm9ybS5fb3BNZGYgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZHJhd0xheWVyID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciBlbGVtcztcbiAgICB2YXIgbm9kZXM7XG4gICAgdmFyIHJlbmRlcmVyID0gdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyO1xuICAgIHZhciBjdHggPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICB2YXIgdHlwZTtcbiAgICB2YXIgY3VycmVudFN0eWxlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBjdXJyZW50U3R5bGUgPSB0aGlzLnN0eWxlc0xpc3RbaV07XG4gICAgICB0eXBlID0gY3VycmVudFN0eWxlLnR5cGU7IC8vIFNraXBwaW5nIHN0eWxlIHdoZW5cbiAgICAgIC8vIFN0cm9rZSB3aWR0aCBlcXVhbHMgMFxuICAgICAgLy8gc3R5bGUgc2hvdWxkIG5vdCBiZSByZW5kZXJlZCAoZXh0cmEgdW51c2VkIHJlcGVhdGVycylcbiAgICAgIC8vIGN1cnJlbnQgb3BhY2l0eSBlcXVhbHMgMFxuICAgICAgLy8gZ2xvYmFsIG9wYWNpdHkgZXF1YWxzIDBcblxuICAgICAgaWYgKCEoKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykgJiYgY3VycmVudFN0eWxlLndpID09PSAwIHx8ICFjdXJyZW50U3R5bGUuZGF0YS5fc2hvdWxkUmVuZGVyIHx8IGN1cnJlbnRTdHlsZS5jb09wID09PSAwIHx8IHRoaXMuZ2xvYmFsRGF0YS5jdXJyZW50R2xvYmFsQWxwaGEgPT09IDApKSB7XG4gICAgICAgIHJlbmRlcmVyLnNhdmUoKTtcbiAgICAgICAgZWxlbXMgPSBjdXJyZW50U3R5bGUuZWxlbWVudHM7XG5cbiAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHR5cGUgPT09ICdzdCcgPyBjdXJyZW50U3R5bGUuY28gOiBjdXJyZW50U3R5bGUuZ3JkKTsgLy8gY3R4LnN0cm9rZVN0eWxlID0gdHlwZSA9PT0gJ3N0JyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQ7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgoY3VycmVudFN0eWxlLndpKTsgLy8gY3R4LmxpbmVXaWR0aCA9IGN1cnJlbnRTdHlsZS53aTtcblxuICAgICAgICAgIHJlbmRlcmVyLmN0eExpbmVDYXAoY3VycmVudFN0eWxlLmxjKTsgLy8gY3R4LmxpbmVDYXAgPSBjdXJyZW50U3R5bGUubGM7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhMaW5lSm9pbihjdXJyZW50U3R5bGUubGopOyAvLyBjdHgubGluZUpvaW4gPSBjdXJyZW50U3R5bGUubGo7XG5cbiAgICAgICAgICByZW5kZXJlci5jdHhNaXRlckxpbWl0KGN1cnJlbnRTdHlsZS5tbCB8fCAwKTsgLy8gY3R4Lm1pdGVyTGltaXQgPSBjdXJyZW50U3R5bGUubWwgfHwgMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW5kZXJlci5jdHhGaWxsU3R5bGUodHlwZSA9PT0gJ2ZsJyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQpOyAvLyBjdHguZmlsbFN0eWxlID0gdHlwZSA9PT0gJ2ZsJyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQ7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5jdHhPcGFjaXR5KGN1cnJlbnRTdHlsZS5jb09wKTtcblxuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0JyAmJiB0eXBlICE9PSAnZ3MnKSB7XG4gICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVuZGVyZXIuY3R4VHJhbnNmb3JtKGN1cnJlbnRTdHlsZS5wcmVUcmFuc2Zvcm1zLmZpbmFsVHJhbnNmb3JtLnByb3BzKTtcbiAgICAgICAgakxlbiA9IGVsZW1zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0eWxlLmRhKSB7XG4gICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaChjdXJyZW50U3R5bGUuZGEpO1xuICAgICAgICAgICAgICBjdHgubGluZURhc2hPZmZzZXQgPSBjdXJyZW50U3R5bGVbXCJkb1wiXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBub2RlcyA9IGVsZW1zW2pdLnRyTm9kZXM7XG4gICAgICAgICAga0xlbiA9IG5vZGVzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChub2Rlc1trXS50ID09PSAnbScpIHtcbiAgICAgICAgICAgICAgY3R4Lm1vdmVUbyhub2Rlc1trXS5wWzBdLCBub2Rlc1trXS5wWzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobm9kZXNba10udCA9PT0gJ2MnKSB7XG4gICAgICAgICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKG5vZGVzW2tdLnB0c1swXSwgbm9kZXNba10ucHRzWzFdLCBub2Rlc1trXS5wdHNbMl0sIG5vZGVzW2tdLnB0c1szXSwgbm9kZXNba10ucHRzWzRdLCBub2Rlc1trXS5wdHNbNV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlID09PSAnc3QnIHx8IHR5cGUgPT09ICdncycpIHtcbiAgICAgICAgICAgIC8vIGN0eC5zdHJva2UoKTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZSgpO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudFN0eWxlLmRhKSB7XG4gICAgICAgICAgICAgIGN0eC5zZXRMaW5lRGFzaCh0aGlzLmRhc2hSZXNldHRlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGUgIT09ICdzdCcgJiYgdHlwZSAhPT0gJ2dzJykge1xuICAgICAgICAgIC8vIGN0eC5maWxsKGN1cnJlbnRTdHlsZS5yKTtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbChjdXJyZW50U3R5bGUucik7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTaGFwZSA9IGZ1bmN0aW9uIChwYXJlbnRUcmFuc2Zvcm0sIGl0ZW1zLCBkYXRhLCBpc01haW4pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZ3JvdXBUcmFuc2Zvcm07XG4gICAgZ3JvdXBUcmFuc2Zvcm0gPSBwYXJlbnRUcmFuc2Zvcm07XG5cbiAgICBmb3IgKGkgPSBsZW47IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAoaXRlbXNbaV0udHkgPT09ICd0cicpIHtcbiAgICAgICAgZ3JvdXBUcmFuc2Zvcm0gPSBkYXRhW2ldLnRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5yZW5kZXJTaGFwZVRyYW5zZm9ybShwYXJlbnRUcmFuc2Zvcm0sIGdyb3VwVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdzaCcgfHwgaXRlbXNbaV0udHkgPT09ICdlbCcgfHwgaXRlbXNbaV0udHkgPT09ICdyYycgfHwgaXRlbXNbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJQYXRoKGl0ZW1zW2ldLCBkYXRhW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdmbCcpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJGaWxsKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnc3QnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU3Ryb2tlKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnZ2YnIHx8IGl0ZW1zW2ldLnR5ID09PSAnZ3MnKSB7XG4gICAgICAgIHRoaXMucmVuZGVyR3JhZGllbnRGaWxsKGl0ZW1zW2ldLCBkYXRhW2ldLCBncm91cFRyYW5zZm9ybSk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU2hhcGUoZ3JvdXBUcmFuc2Zvcm0sIGl0ZW1zW2ldLml0LCBkYXRhW2ldLml0KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICd0bScpIHsvL1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc01haW4pIHtcbiAgICAgIHRoaXMuZHJhd0xheWVyKCk7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTdHlsZWRTaGFwZSA9IGZ1bmN0aW9uIChzdHlsZWRTaGFwZSwgc2hhcGUpIHtcbiAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lIHx8IHNoYXBlLl9tZGYgfHwgc3R5bGVkU2hhcGUudHJhbnNmb3Jtcy5fbWRmKSB7XG4gICAgICB2YXIgc2hhcGVOb2RlcyA9IHN0eWxlZFNoYXBlLnRyTm9kZXM7XG4gICAgICB2YXIgcGF0aHMgPSBzaGFwZS5wYXRocztcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciBqO1xuICAgICAgdmFyIGpMZW4gPSBwYXRocy5fbGVuZ3RoO1xuICAgICAgc2hhcGVOb2Rlcy5sZW5ndGggPSAwO1xuICAgICAgdmFyIGdyb3VwVHJhbnNmb3JtTWF0ID0gc3R5bGVkU2hhcGUudHJhbnNmb3Jtcy5maW5hbFRyYW5zZm9ybTtcblxuICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICB2YXIgcGF0aE5vZGVzID0gcGF0aHMuc2hhcGVzW2pdO1xuXG4gICAgICAgIGlmIChwYXRoTm9kZXMgJiYgcGF0aE5vZGVzLnYpIHtcbiAgICAgICAgICBsZW4gPSBwYXRoTm9kZXMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0OiAnbScsXG4gICAgICAgICAgICAgICAgcDogZ3JvdXBUcmFuc2Zvcm1NYXQuYXBwbHlUb1BvaW50QXJyYXkocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgdDogJ2MnLFxuICAgICAgICAgICAgICBwdHM6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9UcmlwbGVQb2ludHMocGF0aE5vZGVzLm9baSAtIDFdLCBwYXRoTm9kZXMuaVtpXSwgcGF0aE5vZGVzLnZbaV0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGVuID09PSAxKSB7XG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAnbScsXG4gICAgICAgICAgICAgIHA6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9Qb2ludEFycmF5KHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwYXRoTm9kZXMuYyAmJiBsZW4pIHtcbiAgICAgICAgICAgIHNoYXBlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgIHQ6ICdjJyxcbiAgICAgICAgICAgICAgcHRzOiBncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvVHJpcGxlUG9pbnRzKHBhdGhOb2Rlcy5vW2kgLSAxXSwgcGF0aE5vZGVzLmlbMF0sIHBhdGhOb2Rlcy52WzBdKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAneidcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdHlsZWRTaGFwZS50ck5vZGVzID0gc2hhcGVOb2RlcztcbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclBhdGggPSBmdW5jdGlvbiAocGF0aERhdGEsIGl0ZW1EYXRhKSB7XG4gICAgaWYgKHBhdGhEYXRhLmhkICE9PSB0cnVlICYmIHBhdGhEYXRhLl9zaG91bGRSZW5kZXIpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGl0ZW1EYXRhLnN0eWxlZFNoYXBlcy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnJlbmRlclN0eWxlZFNoYXBlKGl0ZW1EYXRhLnN0eWxlZFNoYXBlc1tpXSwgaXRlbURhdGEuc2gpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRmlsbCA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcblxuICAgIGlmIChpdGVtRGF0YS5jLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0uY28gPSAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKSc7XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBncm91cFRyYW5zZm9ybS5fb3BNZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0uY29PcCA9IGl0ZW1EYXRhLm8udiAqIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJHcmFkaWVudEZpbGwgPSBmdW5jdGlvbiAoc3R5bGVEYXRhLCBpdGVtRGF0YSwgZ3JvdXBUcmFuc2Zvcm0pIHtcbiAgICB2YXIgc3R5bGVFbGVtID0gaXRlbURhdGEuc3R5bGU7XG4gICAgdmFyIGdyZDtcblxuICAgIGlmICghc3R5bGVFbGVtLmdyZCB8fCBpdGVtRGF0YS5nLl9tZGYgfHwgaXRlbURhdGEucy5fbWRmIHx8IGl0ZW1EYXRhLmUuX21kZiB8fCBzdHlsZURhdGEudCAhPT0gMSAmJiAoaXRlbURhdGEuaC5fbWRmIHx8IGl0ZW1EYXRhLmEuX21kZikpIHtcbiAgICAgIHZhciBjdHggPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgIHZhciBwdDEgPSBpdGVtRGF0YS5zLnY7XG4gICAgICB2YXIgcHQyID0gaXRlbURhdGEuZS52O1xuXG4gICAgICBpZiAoc3R5bGVEYXRhLnQgPT09IDEpIHtcbiAgICAgICAgZ3JkID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KHB0MVswXSwgcHQxWzFdLCBwdDJbMF0sIHB0MlsxXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgdmFyIGFuZyA9IE1hdGguYXRhbjIocHQyWzFdIC0gcHQxWzFdLCBwdDJbMF0gLSBwdDFbMF0pO1xuICAgICAgICB2YXIgcGVyY2VudCA9IGl0ZW1EYXRhLmgudjtcblxuICAgICAgICBpZiAocGVyY2VudCA+PSAxKSB7XG4gICAgICAgICAgcGVyY2VudCA9IDAuOTk7XG4gICAgICAgIH0gZWxzZSBpZiAocGVyY2VudCA8PSAtMSkge1xuICAgICAgICAgIHBlcmNlbnQgPSAtMC45OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaXN0ID0gcmFkICogcGVyY2VudDtcbiAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVswXTtcbiAgICAgICAgdmFyIHkgPSBNYXRoLnNpbihhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVsxXTtcbiAgICAgICAgZ3JkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHgsIHksIDAsIHB0MVswXSwgcHQxWzFdLCByYWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzdHlsZURhdGEuZy5wO1xuICAgICAgdmFyIGNWYWx1ZXMgPSBpdGVtRGF0YS5nLmM7XG4gICAgICB2YXIgb3BhY2l0eSA9IDE7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlbURhdGEuZy5faGFzT3BhY2l0eSAmJiBpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgIG9wYWNpdHkgPSBpdGVtRGF0YS5nLm9baSAqIDIgKyAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdyZC5hZGRDb2xvclN0b3AoY1ZhbHVlc1tpICogNF0gLyAxMDAsICdyZ2JhKCcgKyBjVmFsdWVzW2kgKiA0ICsgMV0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgMl0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgM10gKyAnLCcgKyBvcGFjaXR5ICsgJyknKTtcbiAgICAgIH1cblxuICAgICAgc3R5bGVFbGVtLmdyZCA9IGdyZDtcbiAgICB9XG5cbiAgICBzdHlsZUVsZW0uY29PcCA9IGl0ZW1EYXRhLm8udiAqIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHk7XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclN0cm9rZSA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcbiAgICB2YXIgZCA9IGl0ZW1EYXRhLmQ7XG5cbiAgICBpZiAoZCAmJiAoZC5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgIHN0eWxlRWxlbS5kYSA9IGQuZGFzaEFycmF5O1xuICAgICAgc3R5bGVFbGVtW1wiZG9cIl0gPSBkLmRhc2hvZmZzZXRbMF07XG4gICAgfVxuXG4gICAgaWYgKGl0ZW1EYXRhLmMuX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jbyA9ICdyZ2IoJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzBdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzFdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzJdKSArICcpJztcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGdyb3VwVHJhbnNmb3JtLl9vcE1kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jb09wID0gaXRlbURhdGEuby52ICogZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEudy5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgc3R5bGVFbGVtLndpID0gaXRlbURhdGEudy52O1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IG51bGw7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoID0gMDtcbiAgICB0aGlzLml0ZW1zRGF0YS5sZW5ndGggPSAwO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENWVGV4dEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMudGV4dFNwYW5zID0gW107XG4gICAgdGhpcy55T2Zmc2V0ID0gMDtcbiAgICB0aGlzLmZpbGxDb2xvckFuaW0gPSBmYWxzZTtcbiAgICB0aGlzLnN0cm9rZUNvbG9yQW5pbSA9IGZhbHNlO1xuICAgIHRoaXMuc3Ryb2tlV2lkdGhBbmltID0gZmFsc2U7XG4gICAgdGhpcy5zdHJva2UgPSBmYWxzZTtcbiAgICB0aGlzLmZpbGwgPSBmYWxzZTtcbiAgICB0aGlzLmp1c3RpZnlPZmZzZXQgPSAwO1xuICAgIHRoaXMuY3VycmVudFJlbmRlciA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ2NhbnZhcyc7XG4gICAgdGhpcy52YWx1ZXMgPSB7XG4gICAgICBmaWxsOiAncmdiYSgwLDAsMCwwKScsXG4gICAgICBzdHJva2U6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIHNXaWR0aDogMCxcbiAgICAgIGZWYWx1ZTogJydcbiAgICB9O1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50LCBJVGV4dEVsZW1lbnRdLCBDVlRleHRFbGVtZW50KTtcbiAgQ1ZUZXh0RWxlbWVudC5wcm90b3R5cGUudEhlbHBlciA9IGNyZWF0ZVRhZygnY2FudmFzJykuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBDVlRleHRFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvY3VtZW50RGF0YSA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gY3JlYXRlU2l6ZWRBcnJheShkb2N1bWVudERhdGEubCA/IGRvY3VtZW50RGF0YS5sLmxlbmd0aCA6IDApO1xuICAgIHZhciBoYXNGaWxsID0gZmFsc2U7XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICBoYXNGaWxsID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsdWVzLmZpbGwgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLmZjKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy52YWx1ZXMuZmlsbCA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICB9XG5cbiAgICB0aGlzLmZpbGwgPSBoYXNGaWxsO1xuICAgIHZhciBoYXNTdHJva2UgPSBmYWxzZTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIGhhc1N0cm9rZSA9IHRydWU7XG4gICAgICB0aGlzLnZhbHVlcy5zdHJva2UgPSB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLnNjKTtcbiAgICAgIHRoaXMudmFsdWVzLnNXaWR0aCA9IGRvY3VtZW50RGF0YS5zdztcbiAgICB9XG5cbiAgICB2YXIgZm9udERhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZik7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgbGV0dGVycyA9IGRvY3VtZW50RGF0YS5sO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdGhpcy5zdHJva2UgPSBoYXNTdHJva2U7XG4gICAgdGhpcy52YWx1ZXMuZlZhbHVlID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSArICdweCAnICsgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHk7XG4gICAgbGVuID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7IC8vIHRoaXMudEhlbHBlci5mb250ID0gdGhpcy52YWx1ZXMuZlZhbHVlO1xuXG4gICAgdmFyIGNoYXJEYXRhO1xuICAgIHZhciBzaGFwZURhdGE7XG4gICAgdmFyIGs7XG4gICAgdmFyIGtMZW47XG4gICAgdmFyIHNoYXBlcztcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcGF0aE5vZGVzO1xuICAgIHZhciBjb21tYW5kcztcbiAgICB2YXIgcGF0aEFycjtcbiAgICB2YXIgc2luZ2xlU2hhcGUgPSB0aGlzLmRhdGEuc2luZ2xlU2hhcGU7XG4gICAgdmFyIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgIHZhciB4UG9zID0gMDtcbiAgICB2YXIgeVBvcyA9IDA7XG4gICAgdmFyIGZpcnN0TGluZSA9IHRydWU7XG4gICAgdmFyIGNudCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGNoYXJEYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO1xuICAgICAgc2hhcGVEYXRhID0gY2hhckRhdGEgJiYgY2hhckRhdGEuZGF0YSB8fCB7fTtcbiAgICAgIG1hdHJpeEhlbHBlci5yZXNldCgpO1xuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUgJiYgbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIHhQb3MgPSAtdHJhY2tpbmdPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZG9jdW1lbnREYXRhLnlPZmZzZXQ7XG4gICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgIGZpcnN0TGluZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBzaGFwZXMgPSBzaGFwZURhdGEuc2hhcGVzID8gc2hhcGVEYXRhLnNoYXBlc1swXS5pdCA6IFtdO1xuICAgICAgakxlbiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCk7XG5cbiAgICAgIGlmIChzaW5nbGVTaGFwZSkge1xuICAgICAgICB0aGlzLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGV0dGVyc1tpXS5saW5lLCB4UG9zLCB5UG9zKTtcbiAgICAgIH1cblxuICAgICAgY29tbWFuZHMgPSBjcmVhdGVTaXplZEFycmF5KGpMZW4gLSAxKTtcbiAgICAgIHZhciBjb21tYW5kc0NvdW50ZXIgPSAwO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZXNbal0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICBrTGVuID0gc2hhcGVzW2pdLmtzLmsuaS5sZW5ndGg7XG4gICAgICAgICAgcGF0aE5vZGVzID0gc2hhcGVzW2pdLmtzLms7XG4gICAgICAgICAgcGF0aEFyciA9IFtdO1xuXG4gICAgICAgICAgZm9yIChrID0gMTsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgaWYgKGsgPT09IDEpIHtcbiAgICAgICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHBhdGhBcnIucHVzaChtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLm9bayAtIDFdWzBdLCBwYXRoTm9kZXMub1trIC0gMV1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLm9bayAtIDFdWzBdLCBwYXRoTm9kZXMub1trIC0gMV1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLmlba11bMF0sIHBhdGhOb2Rlcy5pW2tdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9ZKHBhdGhOb2Rlcy5pW2tdWzBdLCBwYXRoTm9kZXMuaVtrXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMudltrXVswXSwgcGF0aE5vZGVzLnZba11bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLnZba11bMF0sIHBhdGhOb2Rlcy52W2tdWzFdLCAwKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMuaVswXVswXSwgcGF0aE5vZGVzLmlbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLmlbMF1bMF0sIHBhdGhOb2Rlcy5pWzBdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApKTtcbiAgICAgICAgICBjb21tYW5kc1tjb21tYW5kc0NvdW50ZXJdID0gcGF0aEFycjtcbiAgICAgICAgICBjb21tYW5kc0NvdW50ZXIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUpIHtcbiAgICAgICAgeFBvcyArPSBsZXR0ZXJzW2ldLmw7XG4gICAgICAgIHhQb3MgKz0gdHJhY2tpbmdPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnRleHRTcGFuc1tjbnRdKSB7XG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0uZWxlbSA9IGNvbW1hbmRzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZXh0U3BhbnNbY250XSA9IHtcbiAgICAgICAgICBlbGVtOiBjb21tYW5kc1xuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICBjbnQgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZUZXh0RWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudmFsaWRhdGVUZXh0KCk7XG4gICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICBjdHguZm9udCA9IHRoaXMudmFsdWVzLmZWYWx1ZTtcbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4TGluZUNhcCgnYnV0dCcpOyAvLyBjdHgubGluZUNhcCA9ICdidXR0JztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhMaW5lSm9pbignbWl0ZXInKTsgLy8gY3R4LmxpbmVKb2luID0gJ21pdGVyJztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhNaXRlckxpbWl0KDQpOyAvLyBjdHgubWl0ZXJMaW1pdCA9IDQ7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5zaW5nbGVTaGFwZSkge1xuICAgICAgdGhpcy50ZXh0QW5pbWF0b3IuZ2V0TWVhc3VyZXModGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGEsIHRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICB2YXIgbGFzdEZpbGwgPSBudWxsO1xuICAgIHZhciBsYXN0U3Ryb2tlID0gbnVsbDtcbiAgICB2YXIgbGFzdFN0cm9rZVcgPSBudWxsO1xuICAgIHZhciBjb21tYW5kcztcbiAgICB2YXIgcGF0aEFycjtcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICghbGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIHJlbmRlcmVkTGV0dGVyID0gcmVuZGVyZWRMZXR0ZXJzW2ldO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlcikge1xuICAgICAgICAgIHJlbmRlcmVyLnNhdmUoKTtcbiAgICAgICAgICByZW5kZXJlci5jdHhUcmFuc2Zvcm0ocmVuZGVyZWRMZXR0ZXIucCk7XG4gICAgICAgICAgcmVuZGVyZXIuY3R4T3BhY2l0eShyZW5kZXJlZExldHRlci5vKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbGwpIHtcbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuZmMpIHtcbiAgICAgICAgICAgIGlmIChsYXN0RmlsbCAhPT0gcmVuZGVyZWRMZXR0ZXIuZmMpIHtcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4RmlsbFN0eWxlKHJlbmRlcmVkTGV0dGVyLmZjKTtcbiAgICAgICAgICAgICAgbGFzdEZpbGwgPSByZW5kZXJlZExldHRlci5mYzsgLy8gY3R4LmZpbGxTdHlsZSA9IHJlbmRlcmVkTGV0dGVyLmZjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobGFzdEZpbGwgIT09IHRoaXMudmFsdWVzLmZpbGwpIHtcbiAgICAgICAgICAgIGxhc3RGaWxsID0gdGhpcy52YWx1ZXMuZmlsbDtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGxTdHlsZSh0aGlzLnZhbHVlcy5maWxsKTsgLy8gY3R4LmZpbGxTdHlsZSA9IHRoaXMudmFsdWVzLmZpbGw7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tbWFuZHMgPSB0aGlzLnRleHRTcGFuc1tpXS5lbGVtO1xuICAgICAgICAgIGpMZW4gPSBjb21tYW5kcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoQXJyID0gY29tbWFuZHNbal07XG4gICAgICAgICAgICBrTGVuID0gcGF0aEFyci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5tb3ZlVG8ocGF0aEFyclswXSwgcGF0aEFyclsxXSk7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDI7IGsgPCBrTGVuOyBrICs9IDYpIHtcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLCBwYXRoQXJyW2sgKyAxXSwgcGF0aEFycltrICsgMl0sIHBhdGhBcnJbayArIDNdLCBwYXRoQXJyW2sgKyA0XSwgcGF0aEFycltrICsgNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGwoKTsgLy8gdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuZmlsbCgpO1xuICAgICAgICAgIC8vLyBjdHguZmlsbFRleHQodGhpcy50ZXh0U3BhbnNbaV0udmFsLDAsMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdHJva2UpIHtcbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuc3cpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3Ryb2tlVyAhPT0gcmVuZGVyZWRMZXR0ZXIuc3cpIHtcbiAgICAgICAgICAgICAgbGFzdFN0cm9rZVcgPSByZW5kZXJlZExldHRlci5zdztcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4TGluZVdpZHRoKHJlbmRlcmVkTGV0dGVyLnN3KTsgLy8gY3R4LmxpbmVXaWR0aCA9IHJlbmRlcmVkTGV0dGVyLnN3O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAobGFzdFN0cm9rZVcgIT09IHRoaXMudmFsdWVzLnNXaWR0aCkge1xuICAgICAgICAgICAgbGFzdFN0cm9rZVcgPSB0aGlzLnZhbHVlcy5zV2lkdGg7XG4gICAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgodGhpcy52YWx1ZXMuc1dpZHRoKTsgLy8gY3R4LmxpbmVXaWR0aCA9IHRoaXMudmFsdWVzLnNXaWR0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIgJiYgcmVuZGVyZWRMZXR0ZXIuc2MpIHtcbiAgICAgICAgICAgIGlmIChsYXN0U3Ryb2tlICE9PSByZW5kZXJlZExldHRlci5zYykge1xuICAgICAgICAgICAgICBsYXN0U3Ryb2tlID0gcmVuZGVyZWRMZXR0ZXIuc2M7XG4gICAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHJlbmRlcmVkTGV0dGVyLnNjKTsgLy8gY3R4LnN0cm9rZVN0eWxlID0gcmVuZGVyZWRMZXR0ZXIuc2M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0U3Ryb2tlICE9PSB0aGlzLnZhbHVlcy5zdHJva2UpIHtcbiAgICAgICAgICAgIGxhc3RTdHJva2UgPSB0aGlzLnZhbHVlcy5zdHJva2U7XG4gICAgICAgICAgICByZW5kZXJlci5jdHhTdHJva2VTdHlsZSh0aGlzLnZhbHVlcy5zdHJva2UpOyAvLyBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnZhbHVlcy5zdHJva2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tbWFuZHMgPSB0aGlzLnRleHRTcGFuc1tpXS5lbGVtO1xuICAgICAgICAgIGpMZW4gPSBjb21tYW5kcy5sZW5ndGg7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBwYXRoQXJyID0gY29tbWFuZHNbal07XG4gICAgICAgICAgICBrTGVuID0gcGF0aEFyci5sZW5ndGg7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5tb3ZlVG8ocGF0aEFyclswXSwgcGF0aEFyclsxXSk7XG5cbiAgICAgICAgICAgIGZvciAoayA9IDI7IGsgPCBrTGVuOyBrICs9IDYpIHtcbiAgICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuYmV6aWVyQ3VydmVUbyhwYXRoQXJyW2tdLCBwYXRoQXJyW2sgKyAxXSwgcGF0aEFycltrICsgMl0sIHBhdGhBcnJbayArIDNdLCBwYXRoQXJyW2sgKyA0XSwgcGF0aEFycltrICsgNV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZSgpOyAvLyB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5zdHJva2UoKTtcbiAgICAgICAgICAvLy8gY3R4LnN0cm9rZVRleHQobGV0dGVyc1tpXS52YWwsMCwwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlcikge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5yZXN0b3JlKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZJbWFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5pbWcgPSBnbG9iYWxEYXRhLmltYWdlTG9hZGVyLmdldEFzc2V0KHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgQ1ZCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIENWSW1hZ2VFbGVtZW50KTtcbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudDtcbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZSA9IElJbWFnZUVsZW1lbnQucHJvdG90eXBlLnByZXBhcmVGcmFtZTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5pbWcud2lkdGggJiYgKHRoaXMuYXNzZXREYXRhLncgIT09IHRoaXMuaW1nLndpZHRoIHx8IHRoaXMuYXNzZXREYXRhLmggIT09IHRoaXMuaW1nLmhlaWdodCkpIHtcbiAgICAgIHZhciBjYW52YXMgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgY2FudmFzLndpZHRoID0gdGhpcy5hc3NldERhdGEudztcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSB0aGlzLmFzc2V0RGF0YS5oO1xuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgdmFyIGltZ1cgPSB0aGlzLmltZy53aWR0aDtcbiAgICAgIHZhciBpbWdIID0gdGhpcy5pbWcuaGVpZ2h0O1xuICAgICAgdmFyIGltZ1JlbCA9IGltZ1cgLyBpbWdIO1xuICAgICAgdmFyIGNhbnZhc1JlbCA9IHRoaXMuYXNzZXREYXRhLncgLyB0aGlzLmFzc2V0RGF0YS5oO1xuICAgICAgdmFyIHdpZHRoQ3JvcDtcbiAgICAgIHZhciBoZWlnaHRDcm9wO1xuICAgICAgdmFyIHBhciA9IHRoaXMuYXNzZXREYXRhLnByIHx8IHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvO1xuXG4gICAgICBpZiAoaW1nUmVsID4gY2FudmFzUmVsICYmIHBhciA9PT0gJ3hNaWRZTWlkIHNsaWNlJyB8fCBpbWdSZWwgPCBjYW52YXNSZWwgJiYgcGFyICE9PSAneE1pZFlNaWQgc2xpY2UnKSB7XG4gICAgICAgIGhlaWdodENyb3AgPSBpbWdIO1xuICAgICAgICB3aWR0aENyb3AgPSBoZWlnaHRDcm9wICogY2FudmFzUmVsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2lkdGhDcm9wID0gaW1nVztcbiAgICAgICAgaGVpZ2h0Q3JvcCA9IHdpZHRoQ3JvcCAvIGNhbnZhc1JlbDtcbiAgICAgIH1cblxuICAgICAgY3R4LmRyYXdJbWFnZSh0aGlzLmltZywgKGltZ1cgLSB3aWR0aENyb3ApIC8gMiwgKGltZ0ggLSBoZWlnaHRDcm9wKSAvIDIsIHdpZHRoQ3JvcCwgaGVpZ2h0Q3JvcCwgMCwgMCwgdGhpcy5hc3NldERhdGEudywgdGhpcy5hc3NldERhdGEuaCk7XG4gICAgICB0aGlzLmltZyA9IGNhbnZhcztcbiAgICB9XG4gIH07XG5cbiAgQ1ZJbWFnZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZHJhd0ltYWdlKHRoaXMuaW1nLCAwLCAwKTtcbiAgfTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmltZyA9IG51bGw7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgQ1ZTb2xpZEVsZW1lbnQpO1xuICBDVlNvbGlkRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVlNvbGlkRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gSUltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lO1xuXG4gIENWU29saWRFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy8gdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbFN0eWxlKHRoaXMuZGF0YS5zYyk7IC8vIGN0eC5maWxsU3R5bGUgPSB0aGlzLmRhdGEuc2M7XG5cbiAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4RmlsbFJlY3QoMCwgMCwgdGhpcy5kYXRhLnN3LCB0aGlzLmRhdGEuc2gpOyAvLyBjdHguZmlsbFJlY3QoMCwgMCwgdGhpcy5kYXRhLnN3LCB0aGlzLmRhdGEuc2gpO1xuICAgIC8vXG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXJCYXNlKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIENhbnZhc1JlbmRlcmVyQmFzZSk7XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlNoYXBlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlVGV4dCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlRleHRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkltYWdlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU29saWQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgQ1ZTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZU51bGwgPSBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbDtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eFRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIGlmIChwcm9wc1swXSA9PT0gMSAmJiBwcm9wc1sxXSA9PT0gMCAmJiBwcm9wc1s0XSA9PT0gMCAmJiBwcm9wc1s1XSA9PT0gMSAmJiBwcm9wc1sxMl0gPT09IDAgJiYgcHJvcHNbMTNdID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnRyYW5zZm9ybShwcm9wc1swXSwgcHJvcHNbMV0sIHByb3BzWzRdLCBwcm9wc1s1XSwgcHJvcHNbMTJdLCBwcm9wc1sxM10pO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4T3BhY2l0eSA9IGZ1bmN0aW9uIChvcCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxBbHBoYSAqPSBvcCA8IDAgPyAwIDogb3A7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhGaWxsU3R5bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbFN0eWxlID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhTdHJva2VTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5zdHJva2VTdHlsZSA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TGluZVdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmxpbmVXaWR0aCA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TGluZUNhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5saW5lQ2FwID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhMaW5lSm9pbiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5saW5lSm9pbiA9IHZhbHVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4TWl0ZXJMaW1pdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5taXRlckxpbWl0ID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhGaWxsID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbChydWxlKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eEZpbGxSZWN0ID0gZnVuY3Rpb24gKHgsIHksIHcsIGgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhTdHJva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnN0cm9rZSgpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcykge1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHREYXRhLnJlc2V0KCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5zYXZlKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKGFjdGlvbkZsYWcpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChhY3Rpb25GbGFnKSB7XG4gICAgICB0aGlzLmdsb2JhbERhdGEuYmxlbmRNb2RlID0gJ3NvdXJjZS1vdmVyJztcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHREYXRhLnJlc3RvcmUoYWN0aW9uRmxhZyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgdmFyIGNvbnRhaW5lclN0eWxlID0gdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zdHlsZTtcbiAgICAgIGNvbnRhaW5lclN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgY29udGFpbmVyU3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgdmFyIG9yaWdpbiA9ICcwcHggMHB4IDBweCc7XG4gICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICBjb250YWluZXJTdHlsZVsnLXdlYmtpdC10cmFuc2Zvcm0nXSA9IG9yaWdpbjtcbiAgICAgIGNvbnRhaW5lclN0eWxlLmNvbnRlbnRWaXNpYmlsaXR5ID0gdGhpcy5yZW5kZXJDb25maWcuY29udGVudFZpc2liaWxpdHk7XG4gICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyKTtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuaWQpIHtcbiAgICAgICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5yZW5kZXJDb25maWcuaWQpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSB0aGlzLnJlbmRlckNvbmZpZy5jb250ZXh0O1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dERhdGEuc2V0Q29udGV4dCh0aGlzLmNhbnZhc0NvbnRleHQpO1xuICAgIHRoaXMuZGF0YSA9IGFuaW1EYXRhO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzID0ge1xuICAgICAgdzogYW5pbURhdGEudyxcbiAgICAgIGg6IGFuaW1EYXRhLmgsXG4gICAgICBzeDogMCxcbiAgICAgIHN5OiAwLFxuICAgICAgdHg6IDAsXG4gICAgICB0eTogMFxuICAgIH07XG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIGRvY3VtZW50LmJvZHkpO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0ID0gdGhpcy5jYW52YXNDb250ZXh0O1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlciA9IHRoaXM7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmlzRGFzaGVkID0gZmFsc2U7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCA9IHRoaXMucmVuZGVyQ29uZmlnLnByb2dyZXNzaXZlTG9hZDtcbiAgICB0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzID0gdGhpcy50cmFuc2Zvcm1DYW52YXM7XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkoYW5pbURhdGEubGF5ZXJzLmxlbmd0aCk7XG4gICAgdGhpcy51cGRhdGVDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLnJlc2V0KCk7XG4gICAgdmFyIGVsZW1lbnRXaWR0aDtcbiAgICB2YXIgZWxlbWVudEhlaWdodDtcblxuICAgIGlmICh3aWR0aCkge1xuICAgICAgZWxlbWVudFdpZHRoID0gd2lkdGg7XG4gICAgICBlbGVtZW50SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy53aWR0aCA9IGVsZW1lbnRXaWR0aDtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gZWxlbWVudEhlaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyICYmIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIpIHtcbiAgICAgICAgZWxlbWVudFdpZHRoID0gdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgIGVsZW1lbnRIZWlnaHQgPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRIZWlnaHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50V2lkdGggPSB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoO1xuICAgICAgICBlbGVtZW50SGVpZ2h0ID0gdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGggPSBlbGVtZW50V2lkdGggKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCA9IGVsZW1lbnRIZWlnaHQgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgfVxuXG4gICAgdmFyIGVsZW1lbnRSZWw7XG4gICAgdmFyIGFuaW1hdGlvblJlbDtcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvLmluZGV4T2YoJ21lZXQnKSAhPT0gLTEgfHwgdGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5pbmRleE9mKCdzbGljZScpICE9PSAtMSkge1xuICAgICAgdmFyIHBhciA9IHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8uc3BsaXQoJyAnKTtcbiAgICAgIHZhciBmaWxsVHlwZSA9IHBhclsxXSB8fCAnbWVldCc7XG4gICAgICB2YXIgcG9zID0gcGFyWzBdIHx8ICd4TWlkWU1pZCc7XG4gICAgICB2YXIgeFBvcyA9IHBvcy5zdWJzdHIoMCwgNCk7XG4gICAgICB2YXIgeVBvcyA9IHBvcy5zdWJzdHIoNCk7XG4gICAgICBlbGVtZW50UmVsID0gZWxlbWVudFdpZHRoIC8gZWxlbWVudEhlaWdodDtcbiAgICAgIGFuaW1hdGlvblJlbCA9IHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oO1xuXG4gICAgICBpZiAoYW5pbWF0aW9uUmVsID4gZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50V2lkdGggLyAodGhpcy50cmFuc2Zvcm1DYW52YXMudyAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gZWxlbWVudFdpZHRoIC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50SGVpZ2h0IC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLmggLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSA9IGVsZW1lbnRIZWlnaHQgLyAodGhpcy50cmFuc2Zvcm1DYW52YXMuaCAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICB9XG5cbiAgICAgIGlmICh4UG9zID09PSAneE1pZCcgJiYgKGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkgLyAyICogdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgfSBlbHNlIGlmICh4UG9zID09PSAneE1heCcgJiYgKGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy53ICogKGVsZW1lbnRIZWlnaHQgLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKSkgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmICh5UG9zID09PSAnWU1pZCcgJiYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPCBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy53KSkgLyAyICogdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgfSBlbHNlIGlmICh5UG9zID09PSAnWU1heCcgJiYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdtZWV0JyB8fCBhbmltYXRpb25SZWwgPCBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnc2xpY2UnKSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy50cmFuc2Zvcm1DYW52YXMuaCAqIChlbGVtZW50V2lkdGggLyB0aGlzLnRyYW5zZm9ybUNhbnZhcy53KSkgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IDA7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvID09PSAnbm9uZScpIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN4ID0gZWxlbWVudFdpZHRoIC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLncgLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3kgPSBlbGVtZW50SGVpZ2h0IC8gKHRoaXMudHJhbnNmb3JtQ2FudmFzLmggLyB0aGlzLnJlbmRlckNvbmZpZy5kcHIpO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHggPSAwO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHkgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCA9IHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHggPSAwO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMudHkgPSAwO1xuICAgIH1cblxuICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnByb3BzID0gW3RoaXMudHJhbnNmb3JtQ2FudmFzLnN4LCAwLCAwLCAwLCAwLCB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSwgMCwgMCwgMCwgMCwgMSwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHgsIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR5LCAwLCAxXTtcbiAgICAvKiB2YXIgaSwgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XHJcbiAgICAgIGZvcihpPTA7aTxsZW47aSs9MSl7XHJcbiAgICAgICAgICBpZih0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0uZGF0YS50eSA9PT0gMCl7XHJcbiAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZXNpemUodGhpcy5nbG9iYWxEYXRhLnRyYW5zZm9ybUNhbnZhcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgIH0gKi9cblxuICAgIHRoaXMuY3R4VHJhbnNmb3JtKHRoaXMudHJhbnNmb3JtQ2FudmFzLnByb3BzKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnJlY3QoMCwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudywgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCk7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5jbGlwKCk7XG4gICAgdGhpcy5yZW5kZXJGcmFtZSh0aGlzLnJlbmRlcmVkRnJhbWUsIHRydWUpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMgJiYgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIpIHtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmlubmVyVGV4dCA9ICcnO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycyA/IHRoaXMubGF5ZXJzLmxlbmd0aCA6IDA7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dCA9IG51bGw7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAobnVtLCBmb3JjZVJlbmRlcikge1xuICAgIGlmICh0aGlzLnJlbmRlcmVkRnJhbWUgPT09IG51bSAmJiB0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcyA9PT0gdHJ1ZSAmJiAhZm9yY2VSZW5kZXIgfHwgdGhpcy5kZXN0cm95ZWQgfHwgbnVtID09PSAtMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IG51bTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVOdW0gPSBudW0gLSB0aGlzLmFuaW1hdGlvbkl0ZW0uX2lzRmlyc3RGcmFtZTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVJZCArPSAxO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzIHx8IGZvcmNlUmVuZGVyO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLmN1cnJlbnRGcmFtZSA9IG51bTsgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tJyk7XG4gICAgLy8gY29uc29sZS5sb2coJ05FVzogJyxudW0pO1xuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGlmICghdGhpcy5jb21wbGV0ZUxheWVycykge1xuICAgICAgdGhpcy5jaGVja0xheWVycyhudW0pO1xuICAgIH1cblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucHJlcGFyZUZyYW1lKG51bSAtIHRoaXMubGF5ZXJzW2ldLnN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5nbG9iYWxEYXRhLl9tZGYpIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcyA9PT0gdHJ1ZSkge1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMudHJhbnNmb3JtQ2FudmFzLncsIHRoaXMudHJhbnNmb3JtQ2FudmFzLmgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zYXZlKCk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlbmRlckZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzICE9PSB0cnVlKSB7XG4gICAgICAgIHRoaXMucmVzdG9yZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmJ1aWxkSXRlbSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzO1xuXG4gICAgaWYgKGVsZW1lbnRzW3Bvc10gfHwgdGhpcy5sYXllcnNbcG9zXS50eSA9PT0gOTkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IHRoaXMuY3JlYXRlSXRlbSh0aGlzLmxheWVyc1twb3NdLCB0aGlzLCB0aGlzLmdsb2JhbERhdGEpO1xuICAgIGVsZW1lbnRzW3Bvc10gPSBlbGVtZW50O1xuICAgIGVsZW1lbnQuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgLyogaWYodGhpcy5sYXllcnNbcG9zXS50eSA9PT0gMCl7XHJcbiAgICAgICAgICBlbGVtZW50LnJlc2l6ZSh0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzKTtcclxuICAgICAgfSAqL1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMucGVuZGluZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBlbmRpbmdFbGVtZW50cy5wb3AoKTtcbiAgICAgIGVsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgfTtcblxuICBmdW5jdGlvbiBDYW52YXNDb250ZXh0KCkge1xuICAgIHRoaXMub3BhY2l0eSA9IC0xO1xuICAgIHRoaXMudHJhbnNmb3JtID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDE2KTtcbiAgICB0aGlzLmZpbGxTdHlsZSA9ICcnO1xuICAgIHRoaXMuc3Ryb2tlU3R5bGUgPSAnJztcbiAgICB0aGlzLmxpbmVXaWR0aCA9ICcnO1xuICAgIHRoaXMubGluZUNhcCA9ICcnO1xuICAgIHRoaXMubGluZUpvaW4gPSAnJztcbiAgICB0aGlzLm1pdGVyTGltaXQgPSAnJztcbiAgICB0aGlzLmlkID0gTWF0aC5yYW5kb20oKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENWQ29udGV4dERhdGEoKSB7XG4gICAgdGhpcy5zdGFjayA9IFtdO1xuICAgIHRoaXMuY0FyclBvcyA9IDA7XG4gICAgdGhpcy5jVHIgPSBuZXcgTWF0cml4KCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IDE1O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB2YXIgY2FudmFzQ29udGV4dCA9IG5ldyBDYW52YXNDb250ZXh0KCk7XG4gICAgICB0aGlzLnN0YWNrW2ldID0gY2FudmFzQ29udGV4dDtcbiAgICB9XG5cbiAgICB0aGlzLl9sZW5ndGggPSBsZW47XG4gICAgdGhpcy5uYXRpdmVDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLnRyYW5zZm9ybU1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLmN1cnJlbnRPcGFjaXR5ID0gMTsgLy9cblxuICAgIHRoaXMuY3VycmVudEZpbGxTdHlsZSA9ICcnO1xuICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUgPSAnJztcbiAgICB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50TGluZVdpZHRoID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkTGluZVdpZHRoID0gJyc7IC8vXG5cbiAgICB0aGlzLmN1cnJlbnRMaW5lQ2FwID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkTGluZUNhcCA9ICcnOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50TGluZUpvaW4gPSAnJztcbiAgICB0aGlzLmFwcGxpZWRMaW5lSm9pbiA9ICcnOyAvL1xuXG4gICAgdGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCA9ICcnO1xuICAgIHRoaXMuY3VycmVudE1pdGVyTGltaXQgPSAnJztcbiAgfVxuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmR1cGxpY2F0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbmV3TGVuZ3RoID0gdGhpcy5fbGVuZ3RoICogMjtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICBmb3IgKGkgPSB0aGlzLl9sZW5ndGg7IGkgPCBuZXdMZW5ndGg7IGkgKz0gMSkge1xuICAgICAgdGhpcy5zdGFja1tpXSA9IG5ldyBDYW52YXNDb250ZXh0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5fbGVuZ3RoID0gbmV3TGVuZ3RoO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY0FyclBvcyA9IDA7XG4gICAgdGhpcy5jVHIucmVzZXQoKTtcbiAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSA9IDE7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUucmVzdG9yZSA9IGZ1bmN0aW9uIChmb3JjZVJlc3RvcmUpIHtcbiAgICB0aGlzLmNBcnJQb3MgLT0gMTtcbiAgICB2YXIgY3VycmVudENvbnRleHQgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc107XG4gICAgdmFyIHRyYW5zZm9ybSA9IGN1cnJlbnRDb250ZXh0LnRyYW5zZm9ybTtcbiAgICB2YXIgaTtcbiAgICB2YXIgYXJyID0gdGhpcy5jVHIucHJvcHM7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgYXJyW2ldID0gdHJhbnNmb3JtW2ldO1xuICAgIH1cblxuICAgIGlmIChmb3JjZVJlc3RvcmUpIHtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5yZXN0b3JlKCk7XG4gICAgICB2YXIgcHJldlN0YWNrID0gdGhpcy5zdGFja1t0aGlzLmNBcnJQb3MgKyAxXTtcbiAgICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9IHByZXZTdGFjay5maWxsU3R5bGU7XG4gICAgICB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSA9IHByZXZTdGFjay5zdHJva2VTdHlsZTtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVXaWR0aCA9IHByZXZTdGFjay5saW5lV2lkdGg7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lQ2FwID0gcHJldlN0YWNrLmxpbmVDYXA7XG4gICAgICB0aGlzLmFwcGxpZWRMaW5lSm9pbiA9IHByZXZTdGFjay5saW5lSm9pbjtcbiAgICAgIHRoaXMuYXBwbGllZE1pdGVyTGltaXQgPSBwcmV2U3RhY2subWl0ZXJMaW1pdDtcbiAgICB9XG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc2V0VHJhbnNmb3JtKHRyYW5zZm9ybVswXSwgdHJhbnNmb3JtWzFdLCB0cmFuc2Zvcm1bNF0sIHRyYW5zZm9ybVs1XSwgdHJhbnNmb3JtWzEyXSwgdHJhbnNmb3JtWzEzXSk7XG5cbiAgICBpZiAoZm9yY2VSZXN0b3JlIHx8IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHkgIT09IC0xICYmIHRoaXMuY3VycmVudE9wYWNpdHkgIT09IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHkpIHtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5nbG9iYWxBbHBoYSA9IGN1cnJlbnRDb250ZXh0Lm9wYWNpdHk7XG4gICAgICB0aGlzLmN1cnJlbnRPcGFjaXR5ID0gY3VycmVudENvbnRleHQub3BhY2l0eTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnRGaWxsU3R5bGUgPSBjdXJyZW50Q29udGV4dC5maWxsU3R5bGU7XG4gICAgdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUgPSBjdXJyZW50Q29udGV4dC5zdHJva2VTdHlsZTtcbiAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSBjdXJyZW50Q29udGV4dC5saW5lV2lkdGg7XG4gICAgdGhpcy5jdXJyZW50TGluZUNhcCA9IGN1cnJlbnRDb250ZXh0LmxpbmVDYXA7XG4gICAgdGhpcy5jdXJyZW50TGluZUpvaW4gPSBjdXJyZW50Q29udGV4dC5saW5lSm9pbjtcbiAgICB0aGlzLmN1cnJlbnRNaXRlckxpbWl0ID0gY3VycmVudENvbnRleHQubWl0ZXJMaW1pdDtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5zYXZlID0gZnVuY3Rpb24gKHNhdmVPbk5hdGl2ZUZsYWcpIHtcbiAgICBpZiAoc2F2ZU9uTmF0aXZlRmxhZykge1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LnNhdmUoKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLmNUci5wcm9wcztcblxuICAgIGlmICh0aGlzLl9sZW5ndGggPD0gdGhpcy5jQXJyUG9zKSB7XG4gICAgICB0aGlzLmR1cGxpY2F0ZSgpO1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50U3RhY2sgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc107XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgY3VycmVudFN0YWNrLnRyYW5zZm9ybVtpXSA9IHByb3BzW2ldO1xuICAgIH1cblxuICAgIHRoaXMuY0FyclBvcyArPSAxO1xuICAgIHZhciBuZXdTdGFjayA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXTtcbiAgICBuZXdTdGFjay5vcGFjaXR5ID0gY3VycmVudFN0YWNrLm9wYWNpdHk7XG4gICAgbmV3U3RhY2suZmlsbFN0eWxlID0gY3VycmVudFN0YWNrLmZpbGxTdHlsZTtcbiAgICBuZXdTdGFjay5zdHJva2VTdHlsZSA9IGN1cnJlbnRTdGFjay5zdHJva2VTdHlsZTtcbiAgICBuZXdTdGFjay5saW5lV2lkdGggPSBjdXJyZW50U3RhY2subGluZVdpZHRoO1xuICAgIG5ld1N0YWNrLmxpbmVDYXAgPSBjdXJyZW50U3RhY2subGluZUNhcDtcbiAgICBuZXdTdGFjay5saW5lSm9pbiA9IGN1cnJlbnRTdGFjay5saW5lSm9pbjtcbiAgICBuZXdTdGFjay5taXRlckxpbWl0ID0gY3VycmVudFN0YWNrLm1pdGVyTGltaXQ7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc2V0T3BhY2l0eSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5ID0gdmFsdWU7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc2V0Q29udGV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMubmF0aXZlQ29udGV4dCA9IHZhbHVlO1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmZpbGxTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uZmlsbFN0eWxlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50RmlsbFN0eWxlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uZmlsbFN0eWxlID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnN0cm9rZVN0eWxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5zdHJva2VTdHlsZSAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudFN0cm9rZVN0eWxlID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10uc3Ryb2tlU3R5bGUgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubGluZVdpZHRoID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lV2lkdGggIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lV2lkdGggPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubGluZUNhcCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZUNhcCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmVDYXAgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lQ2FwID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmxpbmVKb2luID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lSm9pbiAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmVKb2luID0gdmFsdWU7XG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubGluZUpvaW4gPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubWl0ZXJMaW1pdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ubWl0ZXJMaW1pdCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudE1pdGVyTGltaXQgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5taXRlckxpbWl0ID0gdmFsdWU7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwcm9wcykge1xuICAgIHRoaXMudHJhbnNmb3JtTWF0LmNsb25lRnJvbVByb3BzKHByb3BzKTsgLy8gVGFraW5nIHRoZSBsYXN0IHRyYW5zZm9ybSB2YWx1ZSBmcm9tIHRoZSBzdG9yZWQgc3RhY2sgb2YgdHJhbnNmb3Jtc1xuXG4gICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm0gPSB0aGlzLmNUcjsgLy8gQXBwbHlpbmcgdGhlIGxhc3QgdHJhbnNmb3JtIHZhbHVlIGFmdGVyIHRoZSBuZXcgdHJhbnNmb3JtIHRvIHJlc3BlY3QgdGhlIG9yZGVyIG9mIHRyYW5zZm9ybWF0aW9uc1xuXG4gICAgdGhpcy50cmFuc2Zvcm1NYXQubXVsdGlwbHkoY3VycmVudFRyYW5zZm9ybSk7IC8vIFN0b3JpbmcgdGhlIG5ldyB0cmFuc2Zvcm1lZCB2YWx1ZSBpbiB0aGUgc3RvcmVkIHRyYW5zZm9ybVxuXG4gICAgY3VycmVudFRyYW5zZm9ybS5jbG9uZUZyb21Qcm9wcyh0aGlzLnRyYW5zZm9ybU1hdC5wcm9wcyk7XG4gICAgdmFyIHRyUHJvcHMgPSBjdXJyZW50VHJhbnNmb3JtLnByb3BzOyAvLyBBcHBseWluZyB0aGUgbmV3IHRyYW5zZm9ybSB0byB0aGUgY2FudmFzXG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc2V0VHJhbnNmb3JtKHRyUHJvcHNbMF0sIHRyUHJvcHNbMV0sIHRyUHJvcHNbNF0sIHRyUHJvcHNbNV0sIHRyUHJvcHNbMTJdLCB0clByb3BzWzEzXSk7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUub3BhY2l0eSA9IGZ1bmN0aW9uIChvcCkge1xuICAgIHZhciBjdXJyZW50T3BhY2l0eSA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5O1xuICAgIGN1cnJlbnRPcGFjaXR5ICo9IG9wIDwgMCA/IDAgOiBvcDtcblxuICAgIGlmICh0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSAhPT0gY3VycmVudE9wYWNpdHkpIHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRPcGFjaXR5ICE9PSBvcCkge1xuICAgICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZ2xvYmFsQWxwaGEgPSBvcDtcbiAgICAgICAgdGhpcy5jdXJyZW50T3BhY2l0eSA9IG9wO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnN0YWNrW3RoaXMuY0FyclBvc10ub3BhY2l0eSA9IGN1cnJlbnRPcGFjaXR5O1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICBpZiAodGhpcy5hcHBsaWVkRmlsbFN0eWxlICE9PSB0aGlzLmN1cnJlbnRGaWxsU3R5bGUpIHtcbiAgICAgIHRoaXMuYXBwbGllZEZpbGxTdHlsZSA9IHRoaXMuY3VycmVudEZpbGxTdHlsZTtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmFwcGxpZWRGaWxsU3R5bGU7XG4gICAgfVxuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LmZpbGwocnVsZSk7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuZmlsbFJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgdywgaCkge1xuICAgIGlmICh0aGlzLmFwcGxpZWRGaWxsU3R5bGUgIT09IHRoaXMuY3VycmVudEZpbGxTdHlsZSkge1xuICAgICAgdGhpcy5hcHBsaWVkRmlsbFN0eWxlID0gdGhpcy5jdXJyZW50RmlsbFN0eWxlO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYXBwbGllZEZpbGxTdHlsZTtcbiAgICB9XG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc3Ryb2tlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmFwcGxpZWRTdHJva2VTdHlsZSAhPT0gdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUpIHtcbiAgICAgIHRoaXMuYXBwbGllZFN0cm9rZVN0eWxlID0gdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGU7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmFwcGxpZWRTdHJva2VTdHlsZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBsaWVkTGluZVdpZHRoICE9PSB0aGlzLmN1cnJlbnRMaW5lV2lkdGgpIHtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVXaWR0aCA9IHRoaXMuY3VycmVudExpbmVXaWR0aDtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5saW5lV2lkdGggPSB0aGlzLmFwcGxpZWRMaW5lV2lkdGg7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwbGllZExpbmVDYXAgIT09IHRoaXMuY3VycmVudExpbmVDYXApIHtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVDYXAgPSB0aGlzLmN1cnJlbnRMaW5lQ2FwO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmxpbmVDYXAgPSB0aGlzLmFwcGxpZWRMaW5lQ2FwO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcGxpZWRMaW5lSm9pbiAhPT0gdGhpcy5jdXJyZW50TGluZUpvaW4pIHtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVKb2luID0gdGhpcy5jdXJyZW50TGluZUpvaW47XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQubGluZUpvaW4gPSB0aGlzLmFwcGxpZWRMaW5lSm9pbjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCAhPT0gdGhpcy5jdXJyZW50TWl0ZXJMaW1pdCkge1xuICAgICAgdGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCA9IHRoaXMuY3VycmVudE1pdGVyTGltaXQ7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQubWl0ZXJMaW1pdCA9IHRoaXMuYXBwbGllZE1pdGVyTGltaXQ7XG4gICAgfVxuXG4gICAgdGhpcy5uYXRpdmVDb250ZXh0LnN0cm9rZSgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENWQ29tcEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSBmYWxzZTtcbiAgICB0aGlzLmxheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5sYXllcnMubGVuZ3RoKTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMudG0gPSBkYXRhLnRtID8gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS50bSwgMCwgZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIHRoaXMpIDoge1xuICAgICAgX3BsYWNlaG9sZGVyOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQ2FudmFzUmVuZGVyZXJCYXNlLCBJQ29tcEVsZW1lbnQsIENWQmFzZUVsZW1lbnRdLCBDVkNvbXBFbGVtZW50KTtcblxuICBDVkNvbXBFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGN0eCA9IHRoaXMuY2FudmFzQ29udGV4dDtcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbygwLCAwKTtcbiAgICBjdHgubGluZVRvKHRoaXMuZGF0YS53LCAwKTtcbiAgICBjdHgubGluZVRvKHRoaXMuZGF0YS53LCB0aGlzLmRhdGEuaCk7XG4gICAgY3R4LmxpbmVUbygwLCB0aGlzLmRhdGEuaCk7XG4gICAgY3R4LmxpbmVUbygwLCAwKTtcbiAgICBjdHguY2xpcCgpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgaWYgKHRoaXMuY29tcGxldGVMYXllcnMgfHwgdGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlbmRlckZyYW1lKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWQ29tcEVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmxheWVycyA9IG51bGw7XG4gICAgdGhpcy5lbGVtZW50cyA9IG51bGw7XG4gIH07XG5cbiAgQ1ZDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkNvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ2FudmFzUmVuZGVyZXIoYW5pbWF0aW9uSXRlbSwgY29uZmlnKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gYW5pbWF0aW9uSXRlbTtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIGNsZWFyQ2FudmFzOiBjb25maWcgJiYgY29uZmlnLmNsZWFyQ2FudmFzICE9PSB1bmRlZmluZWQgPyBjb25maWcuY2xlYXJDYW52YXMgOiB0cnVlLFxuICAgICAgY29udGV4dDogY29uZmlnICYmIGNvbmZpZy5jb250ZXh0IHx8IG51bGwsXG4gICAgICBwcm9ncmVzc2l2ZUxvYWQ6IGNvbmZpZyAmJiBjb25maWcucHJvZ3Jlc3NpdmVMb2FkIHx8IGZhbHNlLFxuICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBtZWV0JyxcbiAgICAgIGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIHNsaWNlJyxcbiAgICAgIGNvbnRlbnRWaXNpYmlsaXR5OiBjb25maWcgJiYgY29uZmlnLmNvbnRlbnRWaXNpYmlsaXR5IHx8ICd2aXNpYmxlJyxcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpZDogY29uZmlnICYmIGNvbmZpZy5pZCB8fCAnJyxcbiAgICAgIHJ1bkV4cHJlc3Npb25zOiAhY29uZmlnIHx8IGNvbmZpZy5ydW5FeHByZXNzaW9ucyA9PT0gdW5kZWZpbmVkIHx8IGNvbmZpZy5ydW5FeHByZXNzaW9uc1xuICAgIH07XG4gICAgdGhpcy5yZW5kZXJDb25maWcuZHByID0gY29uZmlnICYmIGNvbmZpZy5kcHIgfHwgMTtcblxuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5yZW5kZXJDb25maWcuZHByID0gY29uZmlnICYmIGNvbmZpZy5kcHIgfHwgd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSAtMTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBmcmFtZU51bTogLTEsXG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIHJlbmRlckNvbmZpZzogdGhpcy5yZW5kZXJDb25maWcsXG4gICAgICBjdXJyZW50R2xvYmFsQWxwaGE6IC0xXG4gICAgfTtcbiAgICB0aGlzLmNvbnRleHREYXRhID0gbmV3IENWQ29udGV4dERhdGEoKTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnRyYW5zZm9ybU1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnY2FudmFzJztcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcykge1xuICAgICAgdGhpcy5jdHhUcmFuc2Zvcm0gPSB0aGlzLmNvbnRleHREYXRhLnRyYW5zZm9ybS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhPcGFjaXR5ID0gdGhpcy5jb250ZXh0RGF0YS5vcGFjaXR5LmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eEZpbGxTdHlsZSA9IHRoaXMuY29udGV4dERhdGEuZmlsbFN0eWxlLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eFN0cm9rZVN0eWxlID0gdGhpcy5jb250ZXh0RGF0YS5zdHJva2VTdHlsZS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhMaW5lV2lkdGggPSB0aGlzLmNvbnRleHREYXRhLmxpbmVXaWR0aC5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhMaW5lQ2FwID0gdGhpcy5jb250ZXh0RGF0YS5saW5lQ2FwLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eExpbmVKb2luID0gdGhpcy5jb250ZXh0RGF0YS5saW5lSm9pbi5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhNaXRlckxpbWl0ID0gdGhpcy5jb250ZXh0RGF0YS5taXRlckxpbWl0LmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eEZpbGwgPSB0aGlzLmNvbnRleHREYXRhLmZpbGwuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4RmlsbFJlY3QgPSB0aGlzLmNvbnRleHREYXRhLmZpbGxSZWN0LmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eFN0cm9rZSA9IHRoaXMuY29udGV4dERhdGEuc3Ryb2tlLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLnNhdmUgPSB0aGlzLmNvbnRleHREYXRhLnNhdmUuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICB9XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0NhbnZhc1JlbmRlcmVyQmFzZV0sIENhbnZhc1JlbmRlcmVyKTtcblxuICBDYW52YXNSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVkNvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gSEJhc2VFbGVtZW50KCkge31cblxuICBIQmFzZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGNoZWNrQmxlbmRNb2RlOiBmdW5jdGlvbiBjaGVja0JsZW5kTW9kZSgpIHt9LFxuICAgIGluaXRSZW5kZXJlckVsZW1lbnQ6IGZ1bmN0aW9uIGluaXRSZW5kZXJlckVsZW1lbnQoKSB7XG4gICAgICB0aGlzLmJhc2VFbGVtZW50ID0gY3JlYXRlVGFnKHRoaXMuZGF0YS50ZyB8fCAnZGl2Jyk7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQgPSBjcmVhdGVOUygnc3ZnJyk7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgdGhpcy5tYXNrZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmxheWVyRWxlbWVudCk7XG4gICAgICAgIHRoaXMuYmFzZUVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zdmdFbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gdGhpcy5iYXNlRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgc3R5bGVEaXYodGhpcy5iYXNlRWxlbWVudCk7XG4gICAgfSxcbiAgICBjcmVhdGVDb250YWluZXJFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKSB7XG4gICAgICB0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlciA9IG5ldyBDVkVmZmVjdHModGhpcyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgICB0aGlzLm1hc2tlZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5sbikge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5kYXRhLmxuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5jbCkge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5kYXRhLmNsKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5ibSAhPT0gMCkge1xuICAgICAgICB0aGlzLnNldEJsZW5kTW9kZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyRWxlbWVudDogZnVuY3Rpb24gcmVuZGVyRWxlbWVudCgpIHtcbiAgICAgIHZhciB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZSA9IHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID8gdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQuc3R5bGUgOiB7fTtcblxuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICB2YXIgbWF0cml4VmFsdWUgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1hdC50b0NTUygpO1xuICAgICAgICB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZS50cmFuc2Zvcm0gPSBtYXRyaXhWYWx1ZTtcbiAgICAgICAgdHJhbnNmb3JtZWRFbGVtZW50U3R5bGUud2Via2l0VHJhbnNmb3JtID0gbWF0cml4VmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZS5vcGFjaXR5ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnY7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJGcmFtZTogZnVuY3Rpb24gcmVuZGVyRnJhbWUoKSB7XG4gICAgICAvLyBJZiBpdCBpcyBleHBvcnRlZCBhcyBoaWRkZW4gKGRhdGEuaGQgPT09IHRydWUpIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAvLyBJZiBpdCBpcyBub3QgdmlzaWJsZSBubyBuZWVkIHRvIHJlbmRlclxuICAgICAgaWYgKHRoaXMuZGF0YS5oZCB8fCB0aGlzLmhpZGRlbikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyVHJhbnNmb3JtKCk7XG4gICAgICB0aGlzLnJlbmRlclJlbmRlcmFibGUoKTtcbiAgICAgIHRoaXMucmVuZGVyRWxlbWVudCgpO1xuICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcblxuICAgICAgaWYgKHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudCA9IG51bGw7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IG51bGw7XG5cbiAgICAgIGlmICh0aGlzLm1hdHRlRWxlbWVudCkge1xuICAgICAgICB0aGlzLm1hdHRlRWxlbWVudCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLm1hc2tNYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMubWFza01hbmFnZXIuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1hc2tNYW5hZ2VyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzOiBmdW5jdGlvbiBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpIHtcbiAgICAgIHRoaXMubWFza01hbmFnZXIgPSBuZXcgTWFza0VsZW1lbnQodGhpcy5kYXRhLCB0aGlzLCB0aGlzLmdsb2JhbERhdGEpO1xuICAgIH0sXG4gICAgYWRkRWZmZWN0czogZnVuY3Rpb24gYWRkRWZmZWN0cygpIHt9LFxuICAgIHNldE1hdHRlOiBmdW5jdGlvbiBzZXRNYXR0ZSgpIHt9XG4gIH07XG4gIEhCYXNlRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBTVkdCYXNlRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQ7XG4gIEhCYXNlRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveUJhc2VFbGVtZW50ID0gSEJhc2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95O1xuICBIQmFzZUVsZW1lbnQucHJvdG90eXBlLmJ1aWxkRWxlbWVudFBhcmVudGluZyA9IEJhc2VSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRFbGVtZW50UGFyZW50aW5nO1xuXG4gIGZ1bmN0aW9uIEhTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBIU29saWRFbGVtZW50KTtcblxuICBIU29saWRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0O1xuXG4gICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICByZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuZGF0YS5zdyk7XG4gICAgICByZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5kYXRhLnNoKTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5kYXRhLnNjKTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5kYXRhLnN3KTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuZGF0YS5zaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlY3QgPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgICAgcmVjdC5zdHlsZS53aWR0aCA9IHRoaXMuZGF0YS5zdyArICdweCc7XG4gICAgICByZWN0LnN0eWxlLmhlaWdodCA9IHRoaXMuZGF0YS5zaCArICdweCc7XG4gICAgICByZWN0LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IHRoaXMuZGF0YS5zYztcbiAgICB9XG5cbiAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChyZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBIU2hhcGVFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICAvLyBMaXN0IG9mIGRyYXdhYmxlIGVsZW1lbnRzXG4gICAgdGhpcy5zaGFwZXMgPSBbXTsgLy8gRnVsbCBzaGFwZSBkYXRhXG5cbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBkYXRhLnNoYXBlczsgLy8gTGlzdCBvZiBzdHlsZXMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG5cbiAgICB0aGlzLnN0eWxlc0xpc3QgPSBbXTsgLy8gTGlzdCBvZiBtb2RpZmllcnMgdGhhdCB3aWxsIGJlIGFwcGxpZWQgdG8gc2hhcGVzXG5cbiAgICB0aGlzLnNoYXBlTW9kaWZpZXJzID0gW107IC8vIExpc3Qgb2YgaXRlbXMgaW4gc2hhcGUgdHJlZVxuXG4gICAgdGhpcy5pdGVtc0RhdGEgPSBbXTsgLy8gTGlzdCBvZiBpdGVtcyBpbiBwcmV2aW91cyBzaGFwZSB0cmVlXG5cbiAgICB0aGlzLnByb2Nlc3NlZEVsZW1lbnRzID0gW107IC8vIExpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xuXG4gICAgdGhpcy5hbmltYXRlZENvbnRlbnRzID0gW107XG4gICAgdGhpcy5zaGFwZXNDb250YWluZXIgPSBjcmVhdGVOUygnZycpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7IC8vIE1vdmluZyBhbnkgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGdldCB0b28gbXVjaCBhY2Nlc3MgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gYmVjYXVzZSBvZiB2OCB3YXkgb2YgaGFuZGxpbmcgbW9yZSB0aGFuIDEwIHByb3BlcnRpZXMuXG4gICAgLy8gTGlzdCBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG5cbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdO1xuICAgIHRoaXMuY3VycmVudEJCb3ggPSB7XG4gICAgICB4OiA5OTk5OTksXG4gICAgICB5OiAtOTk5OTk5LFxuICAgICAgaDogMCxcbiAgICAgIHc6IDBcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSFNvbGlkRWxlbWVudCwgU1ZHU2hhcGVFbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnRdLCBIU2hhcGVFbGVtZW50KTtcbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuX3JlbmRlclNoYXBlRnJhbWUgPSBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQ7XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY29udDtcbiAgICB0aGlzLmJhc2VFbGVtZW50LnN0eWxlLmZvbnRTaXplID0gMDtcblxuICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5zaGFwZXNDb250YWluZXIpO1xuICAgICAgY29udCA9IHRoaXMuc3ZnRWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICAgIHZhciBzaXplID0gdGhpcy5jb21wLmRhdGEgPyB0aGlzLmNvbXAuZGF0YSA6IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZTtcbiAgICAgIGNvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHNpemUudyk7XG4gICAgICBjb250LnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jywgc2l6ZS5oKTtcbiAgICAgIGNvbnQuYXBwZW5kQ2hpbGQodGhpcy5zaGFwZXNDb250YWluZXIpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRoaXMuc2hhcGVzQ29udGFpbmVyLCAwLCBbXSwgdHJ1ZSk7XG4gICAgdGhpcy5maWx0ZXJVbmlxdWVTaGFwZXMoKTtcbiAgICB0aGlzLnNoYXBlQ29udCA9IGNvbnQ7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuZ2V0VHJhbnNmb3JtZWRQb2ludCA9IGZ1bmN0aW9uICh0cmFuc2Zvcm1lcnMsIHBvaW50KSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRyYW5zZm9ybWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHBvaW50ID0gdHJhbnNmb3JtZXJzW2ldLm1Qcm9wcy52LmFwcGx5VG9Qb2ludEFycmF5KHBvaW50WzBdLCBwb2ludFsxXSwgMCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvaW50O1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNhbGN1bGF0ZVNoYXBlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoaXRlbSwgYm91bmRpbmdCb3gpIHtcbiAgICB2YXIgc2hhcGUgPSBpdGVtLnNoLnY7XG4gICAgdmFyIHRyYW5zZm9ybWVycyA9IGl0ZW0udHJhbnNmb3JtZXJzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBzaGFwZS5fbGVuZ3RoO1xuICAgIHZhciB2UG9pbnQ7XG4gICAgdmFyIG9Qb2ludDtcbiAgICB2YXIgbmV4dElQb2ludDtcbiAgICB2YXIgbmV4dFZQb2ludDtcblxuICAgIGlmIChsZW4gPD0gMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4gLSAxOyBpICs9IDEpIHtcbiAgICAgIHZQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLnZbaV0pO1xuICAgICAgb1BvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUub1tpXSk7XG4gICAgICBuZXh0SVBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUuaVtpICsgMV0pO1xuICAgICAgbmV4dFZQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLnZbaSArIDFdKTtcbiAgICAgIHRoaXMuY2hlY2tCb3VuZHModlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQsIGJvdW5kaW5nQm94KTtcbiAgICB9XG5cbiAgICBpZiAoc2hhcGUuYykge1xuICAgICAgdlBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUudltpXSk7XG4gICAgICBvUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS5vW2ldKTtcbiAgICAgIG5leHRJUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS5pWzBdKTtcbiAgICAgIG5leHRWUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS52WzBdKTtcbiAgICAgIHRoaXMuY2hlY2tCb3VuZHModlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQsIGJvdW5kaW5nQm94KTtcbiAgICB9XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2hlY2tCb3VuZHMgPSBmdW5jdGlvbiAodlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQsIGJvdW5kaW5nQm94KSB7XG4gICAgdGhpcy5nZXRCb3VuZHNPZkN1cnZlKHZQb2ludCwgb1BvaW50LCBuZXh0SVBvaW50LCBuZXh0VlBvaW50KTtcbiAgICB2YXIgYm91bmRzID0gdGhpcy5zaGFwZUJvdW5kaW5nQm94O1xuICAgIGJvdW5kaW5nQm94LnggPSBibU1pbihib3VuZHMubGVmdCwgYm91bmRpbmdCb3gueCk7XG4gICAgYm91bmRpbmdCb3gueE1heCA9IGJtTWF4KGJvdW5kcy5yaWdodCwgYm91bmRpbmdCb3gueE1heCk7XG4gICAgYm91bmRpbmdCb3gueSA9IGJtTWluKGJvdW5kcy50b3AsIGJvdW5kaW5nQm94LnkpO1xuICAgIGJvdW5kaW5nQm94LnlNYXggPSBibU1heChib3VuZHMuYm90dG9tLCBib3VuZGluZ0JveC55TWF4KTtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zaGFwZUJvdW5kaW5nQm94ID0ge1xuICAgIGxlZnQ6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgdG9wOiAwLFxuICAgIGJvdHRvbTogMFxuICB9O1xuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS50ZW1wQm91bmRpbmdCb3ggPSB7XG4gICAgeDogMCxcbiAgICB4TWF4OiAwLFxuICAgIHk6IDAsXG4gICAgeU1heDogMCxcbiAgICB3aWR0aDogMCxcbiAgICBoZWlnaHQ6IDBcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5nZXRCb3VuZHNPZkN1cnZlID0gZnVuY3Rpb24gKHAwLCBwMSwgcDIsIHAzKSB7XG4gICAgdmFyIGJvdW5kcyA9IFtbcDBbMF0sIHAzWzBdXSwgW3AwWzFdLCBwM1sxXV1dO1xuXG4gICAgZm9yICh2YXIgYSwgYiwgYywgdCwgYjJhYywgdDEsIHQyLCBpID0gMDsgaSA8IDI7ICsraSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wbHVzcGx1c1xuICAgICAgYiA9IDYgKiBwMFtpXSAtIDEyICogcDFbaV0gKyA2ICogcDJbaV07XG4gICAgICBhID0gLTMgKiBwMFtpXSArIDkgKiBwMVtpXSAtIDkgKiBwMltpXSArIDMgKiBwM1tpXTtcbiAgICAgIGMgPSAzICogcDFbaV0gLSAzICogcDBbaV07XG4gICAgICBiIHw9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgICBhIHw9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgICBjIHw9IDA7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgICBpZiAoYSA9PT0gMCAmJiBiID09PSAwKSB7Ly9cbiAgICAgIH0gZWxzZSBpZiAoYSA9PT0gMCkge1xuICAgICAgICB0ID0gLWMgLyBiO1xuXG4gICAgICAgIGlmICh0ID4gMCAmJiB0IDwgMSkge1xuICAgICAgICAgIGJvdW5kc1tpXS5wdXNoKHRoaXMuY2FsY3VsYXRlRih0LCBwMCwgcDEsIHAyLCBwMywgaSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiMmFjID0gYiAqIGIgLSA0ICogYyAqIGE7XG5cbiAgICAgICAgaWYgKGIyYWMgPj0gMCkge1xuICAgICAgICAgIHQxID0gKC1iICsgYm1TcXJ0KGIyYWMpKSAvICgyICogYSk7XG4gICAgICAgICAgaWYgKHQxID4gMCAmJiB0MSA8IDEpIGJvdW5kc1tpXS5wdXNoKHRoaXMuY2FsY3VsYXRlRih0MSwgcDAsIHAxLCBwMiwgcDMsIGkpKTtcbiAgICAgICAgICB0MiA9ICgtYiAtIGJtU3FydChiMmFjKSkgLyAoMiAqIGEpO1xuICAgICAgICAgIGlmICh0MiA+IDAgJiYgdDIgPCAxKSBib3VuZHNbaV0ucHVzaCh0aGlzLmNhbGN1bGF0ZUYodDIsIHAwLCBwMSwgcDIsIHAzLCBpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnNoYXBlQm91bmRpbmdCb3gubGVmdCA9IGJtTWluLmFwcGx5KG51bGwsIGJvdW5kc1swXSk7XG4gICAgdGhpcy5zaGFwZUJvdW5kaW5nQm94LnRvcCA9IGJtTWluLmFwcGx5KG51bGwsIGJvdW5kc1sxXSk7XG4gICAgdGhpcy5zaGFwZUJvdW5kaW5nQm94LnJpZ2h0ID0gYm1NYXguYXBwbHkobnVsbCwgYm91bmRzWzBdKTtcbiAgICB0aGlzLnNoYXBlQm91bmRpbmdCb3guYm90dG9tID0gYm1NYXguYXBwbHkobnVsbCwgYm91bmRzWzFdKTtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jYWxjdWxhdGVGID0gZnVuY3Rpb24gKHQsIHAwLCBwMSwgcDIsIHAzLCBpKSB7XG4gICAgcmV0dXJuIGJtUG93KDEgLSB0LCAzKSAqIHAwW2ldICsgMyAqIGJtUG93KDEgLSB0LCAyKSAqIHQgKiBwMVtpXSArIDMgKiAoMSAtIHQpICogYm1Qb3codCwgMikgKiBwMltpXSArIGJtUG93KHQsIDMpICogcDNbaV07XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2FsY3VsYXRlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAoaXRlbXNEYXRhLCBib3VuZGluZ0JveCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBpdGVtc0RhdGEubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoaXRlbXNEYXRhW2ldICYmIGl0ZW1zRGF0YVtpXS5zaCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZVNoYXBlQm91bmRpbmdCb3goaXRlbXNEYXRhW2ldLCBib3VuZGluZ0JveCk7XG4gICAgICB9IGVsc2UgaWYgKGl0ZW1zRGF0YVtpXSAmJiBpdGVtc0RhdGFbaV0uaXQpIHtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVCb3VuZGluZ0JveChpdGVtc0RhdGFbaV0uaXQsIGJvdW5kaW5nQm94KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNEYXRhW2ldICYmIGl0ZW1zRGF0YVtpXS5zdHlsZSAmJiBpdGVtc0RhdGFbaV0udykge1xuICAgICAgICB0aGlzLmV4cGFuZFN0cm9rZUJvdW5kaW5nQm94KGl0ZW1zRGF0YVtpXS53LCBib3VuZGluZ0JveCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmV4cGFuZFN0cm9rZUJvdW5kaW5nQm94ID0gZnVuY3Rpb24gKHdpZHRoUHJvcGVydHksIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIHdpZHRoID0gMDtcblxuICAgIGlmICh3aWR0aFByb3BlcnR5LmtleWZyYW1lcykge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB3aWR0aFByb3BlcnR5LmtleWZyYW1lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIga2Z3ID0gd2lkdGhQcm9wZXJ0eS5rZXlmcmFtZXNbaV0ucztcblxuICAgICAgICBpZiAoa2Z3ID4gd2lkdGgpIHtcbiAgICAgICAgICB3aWR0aCA9IGtmdztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB3aWR0aCAqPSB3aWR0aFByb3BlcnR5Lm11bHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpZHRoID0gd2lkdGhQcm9wZXJ0eS52ICogd2lkdGhQcm9wZXJ0eS5tdWx0O1xuICAgIH1cblxuICAgIGJvdW5kaW5nQm94LnggLT0gd2lkdGg7XG4gICAgYm91bmRpbmdCb3gueE1heCArPSB3aWR0aDtcbiAgICBib3VuZGluZ0JveC55IC09IHdpZHRoO1xuICAgIGJvdW5kaW5nQm94LnlNYXggKz0gd2lkdGg7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3VycmVudEJveENvbnRhaW5zID0gZnVuY3Rpb24gKGJveCkge1xuICAgIHJldHVybiB0aGlzLmN1cnJlbnRCQm94LnggPD0gYm94LnggJiYgdGhpcy5jdXJyZW50QkJveC55IDw9IGJveC55ICYmIHRoaXMuY3VycmVudEJCb3gud2lkdGggKyB0aGlzLmN1cnJlbnRCQm94LnggPj0gYm94LnggKyBib3gud2lkdGggJiYgdGhpcy5jdXJyZW50QkJveC5oZWlnaHQgKyB0aGlzLmN1cnJlbnRCQm94LnkgPj0gYm94LnkgKyBib3guaGVpZ2h0O1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9yZW5kZXJTaGFwZUZyYW1lKCk7XG5cbiAgICBpZiAoIXRoaXMuaGlkZGVuICYmICh0aGlzLl9pc0ZpcnN0RnJhbWUgfHwgdGhpcy5fbWRmKSkge1xuICAgICAgdmFyIHRlbXBCb3VuZGluZ0JveCA9IHRoaXMudGVtcEJvdW5kaW5nQm94O1xuICAgICAgdmFyIG1heCA9IDk5OTk5OTtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC54ID0gbWF4O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LnhNYXggPSAtbWF4O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LnkgPSBtYXg7XG4gICAgICB0ZW1wQm91bmRpbmdCb3gueU1heCA9IC1tYXg7XG4gICAgICB0aGlzLmNhbGN1bGF0ZUJvdW5kaW5nQm94KHRoaXMuaXRlbXNEYXRhLCB0ZW1wQm91bmRpbmdCb3gpO1xuICAgICAgdGVtcEJvdW5kaW5nQm94LndpZHRoID0gdGVtcEJvdW5kaW5nQm94LnhNYXggPCB0ZW1wQm91bmRpbmdCb3gueCA/IDAgOiB0ZW1wQm91bmRpbmdCb3gueE1heCAtIHRlbXBCb3VuZGluZ0JveC54O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LmhlaWdodCA9IHRlbXBCb3VuZGluZ0JveC55TWF4IDwgdGVtcEJvdW5kaW5nQm94LnkgPyAwIDogdGVtcEJvdW5kaW5nQm94LnlNYXggLSB0ZW1wQm91bmRpbmdCb3gueTsgLy8gdmFyIHRlbXBCb3VuZGluZ0JveCA9IHRoaXMuc2hhcGVDb250LmdldEJCb3goKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJveENvbnRhaW5zKHRlbXBCb3VuZGluZ0JveCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC53ICE9PSB0ZW1wQm91bmRpbmdCb3gud2lkdGgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC53ID0gdGVtcEJvdW5kaW5nQm94LndpZHRoO1xuICAgICAgICB0aGlzLnNoYXBlQ29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGVtcEJvdW5kaW5nQm94LndpZHRoKTtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCQm94LmggIT09IHRlbXBCb3VuZGluZ0JveC5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gdGVtcEJvdW5kaW5nQm94LmhlaWdodDtcbiAgICAgICAgdGhpcy5zaGFwZUNvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0ZW1wQm91bmRpbmdCb3guaGVpZ2h0KTtcbiAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaGFuZ2VkIHx8IHRoaXMuY3VycmVudEJCb3gueCAhPT0gdGVtcEJvdW5kaW5nQm94LnggfHwgdGhpcy5jdXJyZW50QkJveC55ICE9PSB0ZW1wQm91bmRpbmdCb3gueSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LncgPSB0ZW1wQm91bmRpbmdCb3gud2lkdGg7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3guaCA9IHRlbXBCb3VuZGluZ0JveC5oZWlnaHQ7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gueCA9IHRlbXBCb3VuZGluZ0JveC54O1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LnkgPSB0ZW1wQm91bmRpbmdCb3gueTtcbiAgICAgICAgdGhpcy5zaGFwZUNvbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgdGhpcy5jdXJyZW50QkJveC54ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC55ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC53ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC5oKTtcbiAgICAgICAgdmFyIHNoYXBlU3R5bGUgPSB0aGlzLnNoYXBlQ29udC5zdHlsZTtcbiAgICAgICAgdmFyIHNoYXBlVHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5jdXJyZW50QkJveC54ICsgJ3B4LCcgKyB0aGlzLmN1cnJlbnRCQm94LnkgKyAncHgpJztcbiAgICAgICAgc2hhcGVTdHlsZS50cmFuc2Zvcm0gPSBzaGFwZVRyYW5zZm9ybTtcbiAgICAgICAgc2hhcGVTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzaGFwZVRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gSFRleHRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLnRleHRTcGFucyA9IFtdO1xuICAgIHRoaXMudGV4dFBhdGhzID0gW107XG4gICAgdGhpcy5jdXJyZW50QkJveCA9IHtcbiAgICAgIHg6IDk5OTk5OSxcbiAgICAgIHk6IC05OTk5OTksXG4gICAgICBoOiAwLFxuICAgICAgdzogMFxuICAgIH07XG4gICAgdGhpcy5yZW5kZXJUeXBlID0gJ3N2Zyc7XG4gICAgdGhpcy5pc01hc2tlZCA9IGZhbHNlO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQsIElUZXh0RWxlbWVudF0sIEhUZXh0RWxlbWVudCk7XG5cbiAgSFRleHRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaXNNYXNrZWQgPSB0aGlzLmNoZWNrTWFza3MoKTtcblxuICAgIGlmICh0aGlzLmlzTWFza2VkKSB7XG4gICAgICB0aGlzLnJlbmRlclR5cGUgPSAnc3ZnJztcbiAgICAgIHRoaXMuY29tcFcgPSB0aGlzLmNvbXAuZGF0YS53O1xuICAgICAgdGhpcy5jb21wSCA9IHRoaXMuY29tcC5kYXRhLmg7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuY29tcFcpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5jb21wSCk7XG4gICAgICB2YXIgZyA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICB0aGlzLm1hc2tlZEVsZW1lbnQuYXBwZW5kQ2hpbGQoZyk7XG4gICAgICB0aGlzLmlubmVyRWxlbSA9IGc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVuZGVyVHlwZSA9ICdodG1sJztcbiAgICAgIHRoaXMuaW5uZXJFbGVtID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja1BhcmVudGluZygpO1xuICB9O1xuXG4gIEhUZXh0RWxlbWVudC5wcm90b3R5cGUuYnVpbGROZXdUZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkb2N1bWVudERhdGEgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YTtcbiAgICB0aGlzLnJlbmRlcmVkTGV0dGVycyA9IGNyZWF0ZVNpemVkQXJyYXkoZG9jdW1lbnREYXRhLmwgPyBkb2N1bWVudERhdGEubC5sZW5ndGggOiAwKTtcbiAgICB2YXIgaW5uZXJFbGVtU3R5bGUgPSB0aGlzLmlubmVyRWxlbS5zdHlsZTtcbiAgICB2YXIgdGV4dENvbG9yID0gZG9jdW1lbnREYXRhLmZjID8gdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5mYykgOiAncmdiYSgwLDAsMCwwKSc7XG4gICAgaW5uZXJFbGVtU3R5bGUuZmlsbCA9IHRleHRDb2xvcjtcbiAgICBpbm5lckVsZW1TdHlsZS5jb2xvciA9IHRleHRDb2xvcjtcblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIGlubmVyRWxlbVN0eWxlLnN0cm9rZSA9IHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuc2MpO1xuICAgICAgaW5uZXJFbGVtU3R5bGUuc3Ryb2tlV2lkdGggPSBkb2N1bWVudERhdGEuc3cgKyAncHgnO1xuICAgIH1cblxuICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTtcblxuICAgIGlmICghdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICBpbm5lckVsZW1TdHlsZS5mb250U2l6ZSA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKyAncHgnO1xuICAgICAgaW5uZXJFbGVtU3R5bGUubGluZUhlaWdodCA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKyAncHgnO1xuXG4gICAgICBpZiAoZm9udERhdGEuZkNsYXNzKSB7XG4gICAgICAgIHRoaXMuaW5uZXJFbGVtLmNsYXNzTmFtZSA9IGZvbnREYXRhLmZDbGFzcztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlubmVyRWxlbVN0eWxlLmZvbnRGYW1pbHkgPSBmb250RGF0YS5mRmFtaWx5O1xuICAgICAgICB2YXIgZldlaWdodCA9IGRvY3VtZW50RGF0YS5mV2VpZ2h0O1xuICAgICAgICB2YXIgZlN0eWxlID0gZG9jdW1lbnREYXRhLmZTdHlsZTtcbiAgICAgICAgaW5uZXJFbGVtU3R5bGUuZm9udFN0eWxlID0gZlN0eWxlO1xuICAgICAgICBpbm5lckVsZW1TdHlsZS5mb250V2VpZ2h0ID0gZldlaWdodDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmw7XG4gICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHRTcGFuO1xuICAgIHZhciB0UGFyZW50O1xuICAgIHZhciB0Q29udDtcbiAgICB2YXIgbWF0cml4SGVscGVyID0gdGhpcy5tSGVscGVyO1xuICAgIHZhciBzaGFwZXM7XG4gICAgdmFyIHNoYXBlU3RyID0gJyc7XG4gICAgdmFyIGNudCA9IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLnRleHRQYXRoc1tjbnRdKSB7XG4gICAgICAgICAgdFNwYW4gPSBjcmVhdGVOUygncGF0aCcpO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVjYXAnLCBsaW5lQ2FwRW51bVsxXSk7XG4gICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCBsaW5lSm9pbkVudW1bMl0pO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW1pdGVybGltaXQnLCAnNCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRTcGFuID0gdGhpcy50ZXh0UGF0aHNbY250XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgIGlmICh0aGlzLnRleHRTcGFuc1tjbnRdKSB7XG4gICAgICAgICAgICB0UGFyZW50ID0gdGhpcy50ZXh0U3BhbnNbY250XTtcbiAgICAgICAgICAgIHRDb250ID0gdFBhcmVudC5jaGlsZHJlblswXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdFBhcmVudCA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgICAgICAgICB0UGFyZW50LnN0eWxlLmxpbmVIZWlnaHQgPSAwO1xuICAgICAgICAgICAgdENvbnQgPSBjcmVhdGVOUygnc3ZnJyk7XG4gICAgICAgICAgICB0Q29udC5hcHBlbmRDaGlsZCh0U3Bhbik7XG4gICAgICAgICAgICBzdHlsZURpdih0UGFyZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgaWYgKHRoaXMudGV4dFNwYW5zW2NudF0pIHtcbiAgICAgICAgICB0UGFyZW50ID0gdGhpcy50ZXh0U3BhbnNbY250XTtcbiAgICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFBhdGhzW2NudF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdFBhcmVudCA9IGNyZWF0ZVRhZygnc3BhbicpO1xuICAgICAgICAgIHN0eWxlRGl2KHRQYXJlbnQpO1xuICAgICAgICAgIHRTcGFuID0gY3JlYXRlVGFnKCdzcGFuJyk7XG4gICAgICAgICAgc3R5bGVEaXYodFNwYW4pO1xuICAgICAgICAgIHRQYXJlbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0U3BhbiA9IHRoaXMudGV4dFBhdGhzW2NudF0gPyB0aGlzLnRleHRQYXRoc1tjbnRdIDogY3JlYXRlTlMoJ3RleHQnKTtcbiAgICAgIH0gLy8gdFNwYW4uc2V0QXR0cmlidXRlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xuXG5cbiAgICAgIGlmICh0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgICAgdmFyIGNoYXJEYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV0sIGZvbnREYXRhLmZTdHlsZSwgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO1xuICAgICAgICB2YXIgc2hhcGVEYXRhO1xuXG4gICAgICAgIGlmIChjaGFyRGF0YSkge1xuICAgICAgICAgIHNoYXBlRGF0YSA9IGNoYXJEYXRhLmRhdGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2hhcGVEYXRhID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hdHJpeEhlbHBlci5yZXNldCgpO1xuXG4gICAgICAgIGlmIChzaGFwZURhdGEgJiYgc2hhcGVEYXRhLnNoYXBlcyAmJiBzaGFwZURhdGEuc2hhcGVzLmxlbmd0aCkge1xuICAgICAgICAgIHNoYXBlcyA9IHNoYXBlRGF0YS5zaGFwZXNbMF0uaXQ7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnNjYWxlKGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDAsIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDApO1xuICAgICAgICAgIHNoYXBlU3RyID0gdGhpcy5jcmVhdGVQYXRoU2hhcGUobWF0cml4SGVscGVyLCBzaGFwZXMpO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnZCcsIHNoYXBlU3RyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgIHRoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRQYXJlbnQpO1xuXG4gICAgICAgICAgaWYgKHNoYXBlRGF0YSAmJiBzaGFwZURhdGEuc2hhcGVzKSB7XG4gICAgICAgICAgICAvLyBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIGlzIG5lZWRlZCB0byBnZXQgZXhhY3QgbWVhc3VyZSBvZiBzaGFwZVxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0Q29udCk7XG4gICAgICAgICAgICB2YXIgYm91bmRpbmdCb3ggPSB0Q29udC5nZXRCQm94KCk7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYm91bmRpbmdCb3gud2lkdGggKyAyKTtcbiAgICAgICAgICAgIHRDb250LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgYm91bmRpbmdCb3guaGVpZ2h0ICsgMik7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCBib3VuZGluZ0JveC54IC0gMSArICcgJyArIChib3VuZGluZ0JveC55IC0gMSkgKyAnICcgKyAoYm91bmRpbmdCb3gud2lkdGggKyAyKSArICcgJyArIChib3VuZGluZ0JveC5oZWlnaHQgKyAyKSk7XG4gICAgICAgICAgICB2YXIgdENvbnRTdHlsZSA9IHRDb250LnN0eWxlO1xuICAgICAgICAgICAgdmFyIHRDb250VHJhbnNsYXRpb24gPSAndHJhbnNsYXRlKCcgKyAoYm91bmRpbmdCb3gueCAtIDEpICsgJ3B4LCcgKyAoYm91bmRpbmdCb3gueSAtIDEpICsgJ3B4KSc7XG4gICAgICAgICAgICB0Q29udFN0eWxlLnRyYW5zZm9ybSA9IHRDb250VHJhbnNsYXRpb247XG4gICAgICAgICAgICB0Q29udFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRDb250VHJhbnNsYXRpb247XG4gICAgICAgICAgICBsZXR0ZXJzW2ldLnlPZmZzZXQgPSBib3VuZGluZ0JveC55IC0gMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIDEpO1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAxKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0UGFyZW50LmFwcGVuZENoaWxkKHRDb250KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0U3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRTcGFuLnRleHRDb250ZW50ID0gbGV0dGVyc1tpXS52YWw7XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnLCAneG1sOnNwYWNlJywgJ3ByZXNlcnZlJyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgICAgdGhpcy5pbm5lckVsZW0uYXBwZW5kQ2hpbGQodFBhcmVudCk7IC8vXG5cbiAgICAgICAgICB2YXIgdFN0eWxlID0gdFNwYW4uc3R5bGU7XG4gICAgICAgICAgdmFyIHRTcGFuVHJhbnNsYXRpb24gPSAndHJhbnNsYXRlM2QoMCwnICsgLWRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxLjIgKyAncHgsMCknO1xuICAgICAgICAgIHRTdHlsZS50cmFuc2Zvcm0gPSB0U3BhblRyYW5zbGF0aW9uO1xuICAgICAgICAgIHRTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0U3BhblRyYW5zbGF0aW9uO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgfVxuICAgICAgfSAvL1xuXG5cbiAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICB0aGlzLnRleHRTcGFuc1tjbnRdID0gdFBhcmVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0gPSB0U3BhbjtcbiAgICAgIH1cblxuICAgICAgdGhpcy50ZXh0U3BhbnNbY250XS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMudGV4dFBhdGhzW2NudF0gPSB0U3BhbjtcbiAgICAgIGNudCArPSAxO1xuICAgIH1cblxuICAgIHdoaWxlIChjbnQgPCB0aGlzLnRleHRTcGFucy5sZW5ndGgpIHtcbiAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIGNudCArPSAxO1xuICAgIH1cbiAgfTtcblxuICBIVGV4dEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnZhbGlkYXRlVGV4dCgpO1xuICAgIHZhciBzdmdTdHlsZTtcblxuICAgIGlmICh0aGlzLmRhdGEuc2luZ2xlU2hhcGUpIHtcbiAgICAgIGlmICghdGhpcy5faXNGaXJzdEZyYW1lICYmICF0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzTWFza2VkICYmIHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICAvLyBUb2RvIEJlbmNobWFyayBpZiB1c2luZyB0aGlzIGlzIGJldHRlciB0aGFuIGdldEJCb3hcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlswXSArICcgJyArIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlsxXSArICcgJyArIHRoaXMuY29tcFcgKyAnICcgKyB0aGlzLmNvbXBIKTtcbiAgICAgICAgc3ZnU3R5bGUgPSB0aGlzLnN2Z0VsZW1lbnQuc3R5bGU7XG4gICAgICAgIHZhciB0cmFuc2xhdGlvbiA9ICd0cmFuc2xhdGUoJyArIC10aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLnAudlswXSArICdweCwnICsgLXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AucC52WzFdICsgJ3B4KSc7XG4gICAgICAgIHN2Z1N0eWxlLnRyYW5zZm9ybSA9IHRyYW5zbGF0aW9uO1xuICAgICAgICBzdmdTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSB0cmFuc2xhdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnRleHRBbmltYXRvci5nZXRNZWFzdXJlcyh0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YSwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO1xuXG4gICAgaWYgKCF0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyAmJiAhdGhpcy50ZXh0QW5pbWF0b3IubGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciByZW5kZXJlZExldHRlcnMgPSB0aGlzLnRleHRBbmltYXRvci5yZW5kZXJlZExldHRlcnM7XG4gICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHZhciByZW5kZXJlZExldHRlcjtcbiAgICB2YXIgdGV4dFNwYW47XG4gICAgdmFyIHRleHRQYXRoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAobGV0dGVyc1tpXS5uKSB7XG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0U3BhbiA9IHRoaXMudGV4dFNwYW5zW2ldO1xuICAgICAgICB0ZXh0UGF0aCA9IHRoaXMudGV4dFBhdGhzW2ldO1xuICAgICAgICByZW5kZXJlZExldHRlciA9IHJlbmRlcmVkTGV0dGVyc1tjb3VudF07XG4gICAgICAgIGNvdW50ICs9IDE7XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYubSkge1xuICAgICAgICAgIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICAgICAgdGV4dFNwYW4uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gcmVuZGVyZWRMZXR0ZXIubTtcbiAgICAgICAgICAgIHRleHRTcGFuLnN0eWxlLnRyYW5zZm9ybSA9IHJlbmRlcmVkTGV0dGVyLm07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgcmVuZGVyZWRMZXR0ZXIubSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IC8vLyAvdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdvcGFjaXR5JyxyZW5kZXJlZExldHRlci5vKTtcblxuXG4gICAgICAgIHRleHRTcGFuLnN0eWxlLm9wYWNpdHkgPSByZW5kZXJlZExldHRlci5vO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlci5zdyAmJiByZW5kZXJlZExldHRlci5fbWRmLnN3KSB7XG4gICAgICAgICAgdGV4dFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCByZW5kZXJlZExldHRlci5zdyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuc2MgJiYgcmVuZGVyZWRMZXR0ZXIuX21kZi5zYykge1xuICAgICAgICAgIHRleHRQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgcmVuZGVyZWRMZXR0ZXIuc2MpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLmZjICYmIHJlbmRlcmVkTGV0dGVyLl9tZGYuZmMpIHtcbiAgICAgICAgICB0ZXh0UGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCByZW5kZXJlZExldHRlci5mYyk7XG4gICAgICAgICAgdGV4dFBhdGguc3R5bGUuY29sb3IgPSByZW5kZXJlZExldHRlci5mYztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmlubmVyRWxlbS5nZXRCQm94ICYmICF0aGlzLmhpZGRlbiAmJiAodGhpcy5faXNGaXJzdEZyYW1lIHx8IHRoaXMuX21kZikpIHtcbiAgICAgIHZhciBib3VuZGluZ0JveCA9IHRoaXMuaW5uZXJFbGVtLmdldEJCb3goKTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3gudyAhPT0gYm91bmRpbmdCb3gud2lkdGgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC53ID0gYm91bmRpbmdCb3gud2lkdGg7XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYm91bmRpbmdCb3gud2lkdGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC5oICE9PSBib3VuZGluZ0JveC5oZWlnaHQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gYm91bmRpbmdCb3guaGVpZ2h0O1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBib3VuZGluZ0JveC5oZWlnaHQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWFyZ2luID0gMTtcblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3gudyAhPT0gYm91bmRpbmdCb3gud2lkdGggKyBtYXJnaW4gKiAyIHx8IHRoaXMuY3VycmVudEJCb3guaCAhPT0gYm91bmRpbmdCb3guaGVpZ2h0ICsgbWFyZ2luICogMiB8fCB0aGlzLmN1cnJlbnRCQm94LnggIT09IGJvdW5kaW5nQm94LnggLSBtYXJnaW4gfHwgdGhpcy5jdXJyZW50QkJveC55ICE9PSBib3VuZGluZ0JveC55IC0gbWFyZ2luKSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gudyA9IGJvdW5kaW5nQm94LndpZHRoICsgbWFyZ2luICogMjtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gYm91bmRpbmdCb3guaGVpZ2h0ICsgbWFyZ2luICogMjtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC54ID0gYm91bmRpbmdCb3gueCAtIG1hcmdpbjtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC55ID0gYm91bmRpbmdCb3gueSAtIG1hcmdpbjtcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIHRoaXMuY3VycmVudEJCb3gueCArICcgJyArIHRoaXMuY3VycmVudEJCb3gueSArICcgJyArIHRoaXMuY3VycmVudEJCb3gudyArICcgJyArIHRoaXMuY3VycmVudEJCb3guaCk7XG4gICAgICAgIHN2Z1N0eWxlID0gdGhpcy5zdmdFbGVtZW50LnN0eWxlO1xuICAgICAgICB2YXIgc3ZnVHJhbnNmb3JtID0gJ3RyYW5zbGF0ZSgnICsgdGhpcy5jdXJyZW50QkJveC54ICsgJ3B4LCcgKyB0aGlzLmN1cnJlbnRCQm94LnkgKyAncHgpJztcbiAgICAgICAgc3ZnU3R5bGUudHJhbnNmb3JtID0gc3ZnVHJhbnNmb3JtO1xuICAgICAgICBzdmdTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBzdmdUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEhDYW1lcmFFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdEJhc2VEYXRhKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgIHZhciBnZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG4gICAgdGhpcy5wZSA9IGdldFByb3AodGhpcywgZGF0YS5wZSwgMCwgMCwgdGhpcyk7XG5cbiAgICBpZiAoZGF0YS5rcy5wLnMpIHtcbiAgICAgIHRoaXMucHggPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucC54LCAxLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMucHkgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucC55LCAxLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMucHogPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucC56LCAxLCAwLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnAsIDEsIDAsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmtzLmEpIHtcbiAgICAgIHRoaXMuYSA9IGdldFByb3AodGhpcywgZGF0YS5rcy5hLCAxLCAwLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5rcy5vci5rLmxlbmd0aCAmJiBkYXRhLmtzLm9yLmtbMF0udG8pIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGRhdGEua3Mub3Iuay5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBkYXRhLmtzLm9yLmtbaV0udG8gPSBudWxsO1xuICAgICAgICBkYXRhLmtzLm9yLmtbaV0udGkgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMub3IgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3Mub3IsIDEsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgdGhpcy5vci5zaCA9IHRydWU7XG4gICAgdGhpcy5yeCA9IGdldFByb3AodGhpcywgZGF0YS5rcy5yeCwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLnJ5ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnJ5LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMucnogPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucnosIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgdGhpcy5tYXQgPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5fcHJldk1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlOyAvLyBUT0RPOiBmaW5kIGEgYmV0dGVyIHdheSB0byBtYWtlIHRoZSBIQ2FtZXJhIGVsZW1lbnQgdG8gYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBMYXllckludGVyZmFjZSBhbmQgVHJhbnNmb3JtSW50ZXJmYWNlLlxuXG4gICAgdGhpcy5maW5hbFRyYW5zZm9ybSA9IHtcbiAgICAgIG1Qcm9wOiB0aGlzXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudF0sIEhDYW1lcmFFbGVtZW50KTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuc2V0dXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuY29tcC50aHJlZURFbGVtZW50cy5sZW5ndGg7XG4gICAgdmFyIGNvbXA7XG4gICAgdmFyIHBlcnNwZWN0aXZlU3R5bGU7XG4gICAgdmFyIGNvbnRhaW5lclN0eWxlO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAvLyBbcGVyc3BlY3RpdmVFbGVtLGNvbnRhaW5lcl1cbiAgICAgIGNvbXAgPSB0aGlzLmNvbXAudGhyZWVERWxlbWVudHNbaV07XG5cbiAgICAgIGlmIChjb21wLnR5cGUgPT09ICczZCcpIHtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZSA9IGNvbXAucGVyc3BlY3RpdmVFbGVtLnN0eWxlO1xuICAgICAgICBjb250YWluZXJTdHlsZSA9IGNvbXAuY29udGFpbmVyLnN0eWxlO1xuICAgICAgICB2YXIgcGVyc3BlY3RpdmUgPSB0aGlzLnBlLnYgKyAncHgnO1xuICAgICAgICB2YXIgb3JpZ2luID0gJzBweCAwcHggMHB4JztcbiAgICAgICAgdmFyIG1hdHJpeCA9ICdtYXRyaXgzZCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxKSc7XG4gICAgICAgIHBlcnNwZWN0aXZlU3R5bGUucGVyc3BlY3RpdmUgPSBwZXJzcGVjdGl2ZTtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlO1xuICAgICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICAgIGNvbnRhaW5lclN0eWxlLm1velRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgY29udGFpbmVyU3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gb3JpZ2luO1xuICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLnRyYW5zZm9ybSA9IG1hdHJpeDtcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge307XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfbWRmID0gdGhpcy5faXNGaXJzdEZyYW1lO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG5cbiAgICBpZiAodGhpcy5oaWVyYXJjaHkpIHtcbiAgICAgIGxlbiA9IHRoaXMuaGllcmFyY2h5Lmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIF9tZGYgPSB0aGlzLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmIHx8IF9tZGY7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKF9tZGYgfHwgdGhpcy5wZS5fbWRmIHx8IHRoaXMucCAmJiB0aGlzLnAuX21kZiB8fCB0aGlzLnB4ICYmICh0aGlzLnB4Ll9tZGYgfHwgdGhpcy5weS5fbWRmIHx8IHRoaXMucHouX21kZikgfHwgdGhpcy5yeC5fbWRmIHx8IHRoaXMucnkuX21kZiB8fCB0aGlzLnJ6Ll9tZGYgfHwgdGhpcy5vci5fbWRmIHx8IHRoaXMuYSAmJiB0aGlzLmEuX21kZikge1xuICAgICAgdGhpcy5tYXQucmVzZXQoKTtcblxuICAgICAgaWYgKHRoaXMuaGllcmFyY2h5KSB7XG4gICAgICAgIGxlbiA9IHRoaXMuaGllcmFyY2h5Lmxlbmd0aCAtIDE7XG5cbiAgICAgICAgZm9yIChpID0gbGVuOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIHZhciBtVHJhbnNmID0gdGhpcy5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3A7XG4gICAgICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKC1tVHJhbnNmLnAudlswXSwgLW1UcmFuc2YucC52WzFdLCBtVHJhbnNmLnAudlsyXSk7XG4gICAgICAgICAgdGhpcy5tYXQucm90YXRlWCgtbVRyYW5zZi5vci52WzBdKS5yb3RhdGVZKC1tVHJhbnNmLm9yLnZbMV0pLnJvdGF0ZVoobVRyYW5zZi5vci52WzJdKTtcbiAgICAgICAgICB0aGlzLm1hdC5yb3RhdGVYKC1tVHJhbnNmLnJ4LnYpLnJvdGF0ZVkoLW1UcmFuc2Yucnkudikucm90YXRlWihtVHJhbnNmLnJ6LnYpO1xuICAgICAgICAgIHRoaXMubWF0LnNjYWxlKDEgLyBtVHJhbnNmLnMudlswXSwgMSAvIG1UcmFuc2Yucy52WzFdLCAxIC8gbVRyYW5zZi5zLnZbMl0pO1xuICAgICAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZShtVHJhbnNmLmEudlswXSwgbVRyYW5zZi5hLnZbMV0sIG1UcmFuc2YuYS52WzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wKSB7XG4gICAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSgtdGhpcy5wLnZbMF0sIC10aGlzLnAudlsxXSwgdGhpcy5wLnZbMl0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKC10aGlzLnB4LnYsIC10aGlzLnB5LnYsIHRoaXMucHoudik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmEpIHtcbiAgICAgICAgdmFyIGRpZmZWZWN0b3I7XG5cbiAgICAgICAgaWYgKHRoaXMucCkge1xuICAgICAgICAgIGRpZmZWZWN0b3IgPSBbdGhpcy5wLnZbMF0gLSB0aGlzLmEudlswXSwgdGhpcy5wLnZbMV0gLSB0aGlzLmEudlsxXSwgdGhpcy5wLnZbMl0gLSB0aGlzLmEudlsyXV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlmZlZlY3RvciA9IFt0aGlzLnB4LnYgLSB0aGlzLmEudlswXSwgdGhpcy5weS52IC0gdGhpcy5hLnZbMV0sIHRoaXMucHoudiAtIHRoaXMuYS52WzJdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYWcgPSBNYXRoLnNxcnQoTWF0aC5wb3coZGlmZlZlY3RvclswXSwgMikgKyBNYXRoLnBvdyhkaWZmVmVjdG9yWzFdLCAyKSArIE1hdGgucG93KGRpZmZWZWN0b3JbMl0sIDIpKTsgLy8gdmFyIGxvb2tEaXIgPSBnZXROb3JtYWxpemVkUG9pbnQoZ2V0RGlmZlZlY3Rvcih0aGlzLmEudix0aGlzLnAudikpO1xuXG4gICAgICAgIHZhciBsb29rRGlyID0gW2RpZmZWZWN0b3JbMF0gLyBtYWcsIGRpZmZWZWN0b3JbMV0gLyBtYWcsIGRpZmZWZWN0b3JbMl0gLyBtYWddO1xuICAgICAgICB2YXIgbG9va0xlbmd0aE9uWFogPSBNYXRoLnNxcnQobG9va0RpclsyXSAqIGxvb2tEaXJbMl0gKyBsb29rRGlyWzBdICogbG9va0RpclswXSk7XG4gICAgICAgIHZhciBtUm90YXRpb25YID0gTWF0aC5hdGFuMihsb29rRGlyWzFdLCBsb29rTGVuZ3RoT25YWik7XG4gICAgICAgIHZhciBtUm90YXRpb25ZID0gTWF0aC5hdGFuMihsb29rRGlyWzBdLCAtbG9va0RpclsyXSk7XG4gICAgICAgIHRoaXMubWF0LnJvdGF0ZVkobVJvdGF0aW9uWSkucm90YXRlWCgtbVJvdGF0aW9uWCk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMubWF0LnJvdGF0ZVgoLXRoaXMucngudikucm90YXRlWSgtdGhpcy5yeS52KS5yb3RhdGVaKHRoaXMucnoudik7XG4gICAgICB0aGlzLm1hdC5yb3RhdGVYKC10aGlzLm9yLnZbMF0pLnJvdGF0ZVkoLXRoaXMub3IudlsxXSkucm90YXRlWih0aGlzLm9yLnZbMl0pO1xuICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53IC8gMiwgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmggLyAyLCAwKTtcbiAgICAgIHRoaXMubWF0LnRyYW5zbGF0ZSgwLCAwLCB0aGlzLnBlLnYpO1xuICAgICAgdmFyIGhhc01hdHJpeENoYW5nZWQgPSAhdGhpcy5fcHJldk1hdC5lcXVhbHModGhpcy5tYXQpO1xuXG4gICAgICBpZiAoKGhhc01hdHJpeENoYW5nZWQgfHwgdGhpcy5wZS5fbWRmKSAmJiB0aGlzLmNvbXAudGhyZWVERWxlbWVudHMpIHtcbiAgICAgICAgbGVuID0gdGhpcy5jb21wLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIGNvbXA7XG4gICAgICAgIHZhciBwZXJzcGVjdGl2ZVN0eWxlO1xuICAgICAgICB2YXIgY29udGFpbmVyU3R5bGU7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgY29tcCA9IHRoaXMuY29tcC50aHJlZURFbGVtZW50c1tpXTtcblxuICAgICAgICAgIGlmIChjb21wLnR5cGUgPT09ICczZCcpIHtcbiAgICAgICAgICAgIGlmIChoYXNNYXRyaXhDaGFuZ2VkKSB7XG4gICAgICAgICAgICAgIHZhciBtYXRWYWx1ZSA9IHRoaXMubWF0LnRvQ1NTKCk7XG4gICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlID0gY29tcC5jb250YWluZXIuc3R5bGU7XG4gICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybSA9IG1hdFZhbHVlO1xuICAgICAgICAgICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBtYXRWYWx1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMucGUuX21kZikge1xuICAgICAgICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlID0gY29tcC5wZXJzcGVjdGl2ZUVsZW0uc3R5bGU7XG4gICAgICAgICAgICAgIHBlcnNwZWN0aXZlU3R5bGUucGVyc3BlY3RpdmUgPSB0aGlzLnBlLnYgKyAncHgnO1xuICAgICAgICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID0gdGhpcy5wZS52ICsgJ3B4JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hdC5jbG9uZSh0aGlzLl9wcmV2TWF0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgfTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0cnVlKTtcbiAgfTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBISW1hZ2VFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmFzc2V0RGF0YSA9IGdsb2JhbERhdGEuZ2V0QXNzZXREYXRhKGRhdGEucmVmSWQpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIQmFzZUVsZW1lbnQsIEhTb2xpZEVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnRdLCBISW1hZ2VFbGVtZW50KTtcblxuICBISW1hZ2VFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBhc3NldFBhdGggPSB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgdmFyIGltZyA9IG5ldyBJbWFnZSgpO1xuXG4gICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICB0aGlzLmltYWdlRWxlbSA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuICAgICAgdGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuYXNzZXREYXRhLncgKyAncHgnKTtcbiAgICAgIHRoaXMuaW1hZ2VFbGVtLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5hc3NldERhdGEuaCArICdweCcpO1xuICAgICAgdGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAnaHJlZicsIGFzc2V0UGF0aCk7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLmltYWdlRWxlbSk7XG4gICAgICB0aGlzLmJhc2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmFzc2V0RGF0YS53KTtcbiAgICAgIHRoaXMuYmFzZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmFzc2V0RGF0YS5oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoaW1nKTtcbiAgICB9XG5cbiAgICBpbWcuY3Jvc3NPcmlnaW4gPSAnYW5vbnltb3VzJztcbiAgICBpbWcuc3JjID0gYXNzZXRQYXRoO1xuXG4gICAgaWYgKHRoaXMuZGF0YS5sbikge1xuICAgICAgdGhpcy5iYXNlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5kYXRhLmxuKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gSHlicmlkUmVuZGVyZXJCYXNlKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMucmVuZGVyQ29uZmlnID0ge1xuICAgICAgY2xhc3NOYW1lOiBjb25maWcgJiYgY29uZmlnLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgIGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIHNsaWNlJyxcbiAgICAgIGhpZGVPblRyYW5zcGFyZW50OiAhKGNvbmZpZyAmJiBjb25maWcuaGlkZU9uVHJhbnNwYXJlbnQgPT09IGZhbHNlKSxcbiAgICAgIGZpbHRlclNpemU6IHtcbiAgICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS53aWR0aCB8fCAnNDAwJScsXG4gICAgICAgIGhlaWdodDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLmhlaWdodCB8fCAnNDAwJScsXG4gICAgICAgIHg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS54IHx8ICctMTAwJScsXG4gICAgICAgIHk6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS55IHx8ICctMTAwJSdcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHtcbiAgICAgIF9tZGY6IGZhbHNlLFxuICAgICAgZnJhbWVOdW06IC0xLFxuICAgICAgcmVuZGVyQ29uZmlnOiB0aGlzLnJlbmRlckNvbmZpZ1xuICAgIH07XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy50aHJlZURFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnaHRtbCc7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIEh5YnJpZFJlbmRlcmVyQmFzZSk7XG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGRJdGVtID0gU1ZHUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkSXRlbTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNoZWNrUGVuZGluZ0VsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHdoaWxlICh0aGlzLnBlbmRpbmdFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5wZW5kaW5nRWxlbWVudHMucG9wKCk7XG4gICAgICBlbGVtZW50LmNoZWNrUGFyZW50aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuYXBwZW5kRWxlbWVudEluUG9zID0gZnVuY3Rpb24gKGVsZW1lbnQsIHBvcykge1xuICAgIHZhciBuZXdET01FbGVtZW50ID0gZWxlbWVudC5nZXRCYXNlRWxlbWVudCgpO1xuXG4gICAgaWYgKCFuZXdET01FbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGxheWVyID0gdGhpcy5sYXllcnNbcG9zXTtcblxuICAgIGlmICghbGF5ZXIuZGRkIHx8ICF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIGlmICh0aGlzLnRocmVlREVsZW1lbnRzKSB7XG4gICAgICAgIHRoaXMuYWRkVG8zZENvbnRhaW5lcihuZXdET01FbGVtZW50LCBwb3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbmV4dERPTUVsZW1lbnQ7XG4gICAgICAgIHZhciBuZXh0TGF5ZXI7XG4gICAgICAgIHZhciB0bXBET01FbGVtZW50O1xuXG4gICAgICAgIHdoaWxlIChpIDwgcG9zKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXSAhPT0gdHJ1ZSAmJiB0aGlzLmVsZW1lbnRzW2ldLmdldEJhc2VFbGVtZW50KSB7XG4gICAgICAgICAgICBuZXh0TGF5ZXIgPSB0aGlzLmVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgdG1wRE9NRWxlbWVudCA9IHRoaXMubGF5ZXJzW2ldLmRkZCA/IHRoaXMuZ2V0VGhyZWVEQ29udGFpbmVyQnlQb3MoaSkgOiBuZXh0TGF5ZXIuZ2V0QmFzZUVsZW1lbnQoKTtcbiAgICAgICAgICAgIG5leHRET01FbGVtZW50ID0gdG1wRE9NRWxlbWVudCB8fCBuZXh0RE9NRWxlbWVudDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dERPTUVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAoIWxheWVyLmRkZCB8fCAhdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUobmV3RE9NRWxlbWVudCwgbmV4dERPTUVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghbGF5ZXIuZGRkIHx8ICF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChuZXdET01FbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmFkZFRvM2RDb250YWluZXIobmV3RE9NRWxlbWVudCwgcG9zKTtcbiAgICB9XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBTVkdUZXh0TG90dGllRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSFRleHRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVDYW1lcmEgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuY2FtZXJhID0gbmV3IEhDYW1lcmFFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXMuY2FtZXJhO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlSW1hZ2UgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IElJbWFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhJbWFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVNvbGlkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBJU29saWRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIU29saWRFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVOdWxsID0gU1ZHUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZU51bGw7XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5nZXRUaHJlZURDb250YWluZXJCeVBvcyA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmICh0aGlzLnRocmVlREVsZW1lbnRzW2ldLnN0YXJ0UG9zIDw9IHBvcyAmJiB0aGlzLnRocmVlREVsZW1lbnRzW2ldLmVuZFBvcyA+PSBwb3MpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudGhyZWVERWxlbWVudHNbaV0ucGVyc3BlY3RpdmVFbGVtO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUaHJlZURDb250YWluZXIgPSBmdW5jdGlvbiAocG9zLCB0eXBlKSB7XG4gICAgdmFyIHBlcnNwZWN0aXZlRWxlbSA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgdmFyIHN0eWxlO1xuICAgIHZhciBjb250YWluZXJTdHlsZTtcbiAgICBzdHlsZURpdihwZXJzcGVjdGl2ZUVsZW0pO1xuICAgIHZhciBjb250YWluZXIgPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgIHN0eWxlRGl2KGNvbnRhaW5lcik7XG5cbiAgICBpZiAodHlwZSA9PT0gJzNkJykge1xuICAgICAgc3R5bGUgPSBwZXJzcGVjdGl2ZUVsZW0uc3R5bGU7XG4gICAgICBzdHlsZS53aWR0aCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53ICsgJ3B4JztcbiAgICAgIHN0eWxlLmhlaWdodCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oICsgJ3B4JztcbiAgICAgIHZhciBjZW50ZXIgPSAnNTAlIDUwJSc7XG4gICAgICBzdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSBjZW50ZXI7XG4gICAgICBzdHlsZS5tb3pUcmFuc2Zvcm1PcmlnaW4gPSBjZW50ZXI7XG4gICAgICBzdHlsZS50cmFuc2Zvcm1PcmlnaW4gPSBjZW50ZXI7XG4gICAgICBjb250YWluZXJTdHlsZSA9IGNvbnRhaW5lci5zdHlsZTtcbiAgICAgIHZhciBtYXRyaXggPSAnbWF0cml4M2QoMSwwLDAsMCwwLDEsMCwwLDAsMCwxLDAsMCwwLDAsMSknO1xuICAgICAgY29udGFpbmVyU3R5bGUudHJhbnNmb3JtID0gbWF0cml4O1xuICAgICAgY29udGFpbmVyU3R5bGUud2Via2l0VHJhbnNmb3JtID0gbWF0cml4O1xuICAgIH1cblxuICAgIHBlcnNwZWN0aXZlRWxlbS5hcHBlbmRDaGlsZChjb250YWluZXIpOyAvLyB0aGlzLnJlc2l6ZXJFbGVtLmFwcGVuZENoaWxkKHBlcnNwZWN0aXZlRWxlbSk7XG5cbiAgICB2YXIgdGhyZWVEQ29udGFpbmVyRGF0YSA9IHtcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgICAgcGVyc3BlY3RpdmVFbGVtOiBwZXJzcGVjdGl2ZUVsZW0sXG4gICAgICBzdGFydFBvczogcG9zLFxuICAgICAgZW5kUG9zOiBwb3MsXG4gICAgICB0eXBlOiB0eXBlXG4gICAgfTtcbiAgICB0aGlzLnRocmVlREVsZW1lbnRzLnB1c2godGhyZWVEQ29udGFpbmVyRGF0YSk7XG4gICAgcmV0dXJuIHRocmVlRENvbnRhaW5lckRhdGE7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5idWlsZDNkQ29udGFpbmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuICAgIHZhciBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YTtcbiAgICB2YXIgY3VycmVudENvbnRhaW5lciA9ICcnO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5sYXllcnNbaV0uZGRkICYmIHRoaXMubGF5ZXJzW2ldLnR5ICE9PSAzKSB7XG4gICAgICAgIGlmIChjdXJyZW50Q29udGFpbmVyICE9PSAnM2QnKSB7XG4gICAgICAgICAgY3VycmVudENvbnRhaW5lciA9ICczZCc7XG4gICAgICAgICAgbGFzdFRocmVlRENvbnRhaW5lckRhdGEgPSB0aGlzLmNyZWF0ZVRocmVlRENvbnRhaW5lcihpLCAnM2QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcyA9IE1hdGgubWF4KGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcywgaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudENvbnRhaW5lciAhPT0gJzJkJykge1xuICAgICAgICAgIGN1cnJlbnRDb250YWluZXIgPSAnMmQnO1xuICAgICAgICAgIGxhc3RUaHJlZURDb250YWluZXJEYXRhID0gdGhpcy5jcmVhdGVUaHJlZURDb250YWluZXIoaSwgJzJkJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MgPSBNYXRoLm1heChsYXN0VGhyZWVEQ29udGFpbmVyRGF0YS5lbmRQb3MsIGkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxlbiA9IHRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIHRoaXMucmVzaXplckVsZW0uYXBwZW5kQ2hpbGQodGhpcy50aHJlZURFbGVtZW50c1tpXS5wZXJzcGVjdGl2ZUVsZW0pO1xuICAgIH1cbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmFkZFRvM2RDb250YWluZXIgPSBmdW5jdGlvbiAoZWxlbSwgcG9zKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAocG9zIDw9IHRoaXMudGhyZWVERWxlbWVudHNbaV0uZW5kUG9zKSB7XG4gICAgICAgIHZhciBqID0gdGhpcy50aHJlZURFbGVtZW50c1tpXS5zdGFydFBvcztcbiAgICAgICAgdmFyIG5leHRFbGVtZW50O1xuXG4gICAgICAgIHdoaWxlIChqIDwgcG9zKSB7XG4gICAgICAgICAgaWYgKHRoaXMuZWxlbWVudHNbal0gJiYgdGhpcy5lbGVtZW50c1tqXS5nZXRCYXNlRWxlbWVudCkge1xuICAgICAgICAgICAgbmV4dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHRFbGVtZW50KSB7XG4gICAgICAgICAgdGhpcy50aHJlZURFbGVtZW50c1tpXS5jb250YWluZXIuaW5zZXJ0QmVmb3JlKGVsZW0sIG5leHRFbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnRocmVlREVsZW1lbnRzW2ldLmNvbnRhaW5lci5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY29uZmlnQW5pbWF0aW9uID0gZnVuY3Rpb24gKGFuaW1EYXRhKSB7XG4gICAgdmFyIHJlc2l6ZXJFbGVtID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICB2YXIgd3JhcHBlciA9IHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyO1xuICAgIHZhciBzdHlsZSA9IHJlc2l6ZXJFbGVtLnN0eWxlO1xuICAgIHN0eWxlLndpZHRoID0gYW5pbURhdGEudyArICdweCc7XG4gICAgc3R5bGUuaGVpZ2h0ID0gYW5pbURhdGEuaCArICdweCc7XG4gICAgdGhpcy5yZXNpemVyRWxlbSA9IHJlc2l6ZXJFbGVtO1xuICAgIHN0eWxlRGl2KHJlc2l6ZXJFbGVtKTtcbiAgICBzdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdmbGF0JztcbiAgICBzdHlsZS5tb3pUcmFuc2Zvcm1TdHlsZSA9ICdmbGF0JztcbiAgICBzdHlsZS53ZWJraXRUcmFuc2Zvcm1TdHlsZSA9ICdmbGF0JztcblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpIHtcbiAgICAgIHJlc2l6ZXJFbGVtLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQocmVzaXplckVsZW0pO1xuICAgIHN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgdmFyIHN2ZyA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKCd3aWR0aCcsICcxJyk7XG4gICAgc3ZnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgJzEnKTtcbiAgICBzdHlsZURpdihzdmcpO1xuICAgIHRoaXMucmVzaXplckVsZW0uYXBwZW5kQ2hpbGQoc3ZnKTtcbiAgICB2YXIgZGVmcyA9IGNyZWF0ZU5TKCdkZWZzJyk7XG4gICAgc3ZnLmFwcGVuZENoaWxkKGRlZnMpO1xuICAgIHRoaXMuZGF0YSA9IGFuaW1EYXRhOyAvLyBNYXNrIGFuaW1hdGlvblxuXG4gICAgdGhpcy5zZXR1cEdsb2JhbERhdGEoYW5pbURhdGEsIHN2Zyk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMgPSBkZWZzO1xuICAgIHRoaXMubGF5ZXJzID0gYW5pbURhdGEubGF5ZXJzO1xuICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gdGhpcy5yZXNpemVyRWxlbTtcbiAgICB0aGlzLmJ1aWxkM2RDb250YWluZXJzKCk7XG4gICAgdGhpcy51cGRhdGVDb250YWluZXJTaXplKCk7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lciA9IG51bGw7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMgPSBudWxsO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycyA/IHRoaXMubGF5ZXJzLmxlbmd0aCA6IDA7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3koKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnRzLmxlbmd0aCA9IDA7XG4gICAgdGhpcy5kZXN0cm95ZWQgPSB0cnVlO1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IG51bGw7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS51cGRhdGVDb250YWluZXJTaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtZW50V2lkdGggPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRXaWR0aDtcbiAgICB2YXIgZWxlbWVudEhlaWdodCA9IHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLm9mZnNldEhlaWdodDtcbiAgICB2YXIgZWxlbWVudFJlbCA9IGVsZW1lbnRXaWR0aCAvIGVsZW1lbnRIZWlnaHQ7XG4gICAgdmFyIGFuaW1hdGlvblJlbCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53IC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgdmFyIHN4O1xuICAgIHZhciBzeTtcbiAgICB2YXIgdHg7XG4gICAgdmFyIHR5O1xuXG4gICAgaWYgKGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwpIHtcbiAgICAgIHN4ID0gZWxlbWVudFdpZHRoIC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgICBzeSA9IGVsZW1lbnRXaWR0aCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgICAgdHggPSAwO1xuICAgICAgdHkgPSAoZWxlbWVudEhlaWdodCAtIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oICogKGVsZW1lbnRXaWR0aCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS53KSkgLyAyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzeCA9IGVsZW1lbnRIZWlnaHQgLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICAgIHN5ID0gZWxlbWVudEhlaWdodCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgICAgdHggPSAoZWxlbWVudFdpZHRoIC0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncgKiAoZWxlbWVudEhlaWdodCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKSkgLyAyO1xuICAgICAgdHkgPSAwO1xuICAgIH1cblxuICAgIHZhciBzdHlsZSA9IHRoaXMucmVzaXplckVsZW0uc3R5bGU7XG4gICAgc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ21hdHJpeDNkKCcgKyBzeCArICcsMCwwLDAsMCwnICsgc3kgKyAnLDAsMCwwLDAsMSwwLCcgKyB0eCArICcsJyArIHR5ICsgJywwLDEpJztcbiAgICBzdHlsZS50cmFuc2Zvcm0gPSBzdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IFNWR1JlbmRlcmVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZXNpemVyRWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2l6ZXJFbGVtLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuaW5pdEl0ZW1zID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYnVpbGRBbGxJdGVtcygpO1xuXG4gICAgaWYgKHRoaXMuY2FtZXJhKSB7XG4gICAgICB0aGlzLmNhbWVyYS5zZXR1cCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY1dpZHRoID0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgICB2YXIgY0hlaWdodCA9IHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy50aHJlZURFbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB2YXIgc3R5bGUgPSB0aGlzLnRocmVlREVsZW1lbnRzW2ldLnBlcnNwZWN0aXZlRWxlbS5zdHlsZTtcbiAgICAgICAgc3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPSBNYXRoLnNxcnQoTWF0aC5wb3coY1dpZHRoLCAyKSArIE1hdGgucG93KGNIZWlnaHQsIDIpKSArICdweCc7XG4gICAgICAgIHN0eWxlLnBlcnNwZWN0aXZlID0gc3R5bGUud2Via2l0UGVyc3BlY3RpdmU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2VhcmNoRXh0cmFDb21wb3NpdGlvbnMgPSBmdW5jdGlvbiAoYXNzZXRzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGFzc2V0cy5sZW5ndGg7XG4gICAgdmFyIGZsb2F0aW5nQ29udGFpbmVyID0gY3JlYXRlVGFnKCdkaXYnKTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKGFzc2V0c1tpXS54dCkge1xuICAgICAgICB2YXIgY29tcCA9IHRoaXMuY3JlYXRlQ29tcChhc3NldHNbaV0sIGZsb2F0aW5nQ29udGFpbmVyLCB0aGlzLmdsb2JhbERhdGEuY29tcCwgbnVsbCk7XG4gICAgICAgIGNvbXAuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oY29tcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIEhDb21wRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5sYXllcnMgPSBkYXRhLmxheWVycztcbiAgICB0aGlzLnN1cHBvcnRzM2QgPSAhZGF0YS5oYXNNYXNrO1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSBmYWxzZTtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZWxlbWVudHMgPSB0aGlzLmxheWVycyA/IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5sYXllcnMubGVuZ3RoKSA6IFtdO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy50bSA9IGRhdGEudG0gPyBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLnRtLCAwLCBnbG9iYWxEYXRhLmZyYW1lUmF0ZSwgdGhpcykgOiB7XG4gICAgICBfcGxhY2Vob2xkZXI6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtIeWJyaWRSZW5kZXJlckJhc2UsIElDb21wRWxlbWVudCwgSEJhc2VFbGVtZW50XSwgSENvbXBFbGVtZW50KTtcbiAgSENvbXBFbGVtZW50LnByb3RvdHlwZS5fY3JlYXRlQmFzZUNvbnRhaW5lckVsZW1lbnRzID0gSENvbXBFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250YWluZXJFbGVtZW50cztcblxuICBIQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2NyZWF0ZUJhc2VDb250YWluZXJFbGVtZW50cygpOyAvLyBkaXZFbGVtZW50LnN0eWxlLmNsaXAgPSAncmVjdCgwcHgsICcrdGhpcy5kYXRhLncrJ3B4LCAnK3RoaXMuZGF0YS5oKydweCwgMHB4KSc7XG5cblxuICAgIGlmICh0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmRhdGEudyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmRhdGEuaCk7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IHRoaXMuYmFzZUVsZW1lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgfVxuICB9O1xuXG4gIEhDb21wRWxlbWVudC5wcm90b3R5cGUuYWRkVG8zZENvbnRhaW5lciA9IGZ1bmN0aW9uIChlbGVtLCBwb3MpIHtcbiAgICB2YXIgaiA9IDA7XG4gICAgdmFyIG5leHRFbGVtZW50O1xuXG4gICAgd2hpbGUgKGogPCBwb3MpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2pdICYmIHRoaXMuZWxlbWVudHNbal0uZ2V0QmFzZUVsZW1lbnQpIHtcbiAgICAgICAgbmV4dEVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KCk7XG4gICAgICB9XG5cbiAgICAgIGogKz0gMTtcbiAgICB9XG5cbiAgICBpZiAobmV4dEVsZW1lbnQpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50Lmluc2VydEJlZm9yZShlbGVtLCBuZXh0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuICAgIH1cbiAgfTtcblxuICBIQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbXAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBIeWJyaWRSZW5kZXJlcihhbmltYXRpb25JdGVtLCBjb25maWcpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBhbmltYXRpb25JdGVtO1xuICAgIHRoaXMubGF5ZXJzID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSAtMTtcbiAgICB0aGlzLnJlbmRlckNvbmZpZyA9IHtcbiAgICAgIGNsYXNzTmFtZTogY29uZmlnICYmIGNvbmZpZy5jbGFzc05hbWUgfHwgJycsXG4gICAgICBpbWFnZVByZXNlcnZlQXNwZWN0UmF0aW86IGNvbmZpZyAmJiBjb25maWcuaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBzbGljZScsXG4gICAgICBoaWRlT25UcmFuc3BhcmVudDogIShjb25maWcgJiYgY29uZmlnLmhpZGVPblRyYW5zcGFyZW50ID09PSBmYWxzZSksXG4gICAgICBmaWx0ZXJTaXplOiB7XG4gICAgICAgIHdpZHRoOiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUud2lkdGggfHwgJzQwMCUnLFxuICAgICAgICBoZWlnaHQ6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS5oZWlnaHQgfHwgJzQwMCUnLFxuICAgICAgICB4OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueCB8fCAnLTEwMCUnLFxuICAgICAgICB5OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUueSB8fCAnLTEwMCUnXG4gICAgICB9LFxuICAgICAgcnVuRXhwcmVzc2lvbnM6ICFjb25maWcgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zXG4gICAgfTtcbiAgICB0aGlzLmdsb2JhbERhdGEgPSB7XG4gICAgICBfbWRmOiBmYWxzZSxcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIHJlbmRlckNvbmZpZzogdGhpcy5yZW5kZXJDb25maWdcbiAgICB9O1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IFtdO1xuICAgIHRoaXMudGhyZWVERWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IGZhbHNlO1xuICAgIHRoaXMuY2FtZXJhID0gbnVsbDtcbiAgICB0aGlzLnN1cHBvcnRzM2QgPSB0cnVlO1xuICAgIHRoaXMucmVuZGVyZXJUeXBlID0gJ2h0bWwnO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtIeWJyaWRSZW5kZXJlckJhc2VdLCBIeWJyaWRSZW5kZXJlcik7XG5cbiAgSHlicmlkUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUNvbXAgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICB2YXIgQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChjb21wKSB7XG4gICAgICBmdW5jdGlvbiBfdGhpc0xheWVyRnVuY3Rpb24obmFtZSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBjb21wLmxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoY29tcC5sYXllcnNbaV0ubm0gPT09IG5hbWUgfHwgY29tcC5sYXllcnNbaV0uaW5kID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcC5lbGVtZW50c1tpXS5sYXllckludGVyZmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDsgLy8gcmV0dXJuIHthY3RpdmU6ZmFsc2V9O1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNMYXllckZ1bmN0aW9uLCAnX25hbWUnLCB7XG4gICAgICAgIHZhbHVlOiBjb21wLmRhdGEubm1cbiAgICAgIH0pO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmxheWVyID0gX3RoaXNMYXllckZ1bmN0aW9uO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnBpeGVsQXNwZWN0ID0gMTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5oZWlnaHQgPSBjb21wLmRhdGEuaCB8fCBjb21wLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi53aWR0aCA9IGNvbXAuZGF0YS53IHx8IGNvbXAuZ2xvYmFsRGF0YS5jb21wU2l6ZS53O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnBpeGVsQXNwZWN0ID0gMTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcmFtZUR1cmF0aW9uID0gMSAvIGNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZGlzcGxheVN0YXJ0VGltZSA9IDA7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ubnVtTGF5ZXJzID0gY29tcC5sYXllcnMubGVuZ3RoO1xuICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQyKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDIgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQyID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkMihvYmopOyB9XG5cbiAgLyogZXNsaW50LWRpc2FibGUgKi9cblxuICAvKlxyXG4gICBDb3B5cmlnaHQgMjAxNCBEYXZpZCBCYXUuXHJcblxyXG4gICBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmdcclxuICAgYSBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXHJcbiAgIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xyXG4gICB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXHJcbiAgIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0b1xyXG4gICBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG9cclxuICAgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuICAgVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmVcclxuICAgaW5jbHVkZWQgaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELFxyXG4gICBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0ZcclxuICAgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxyXG4gICBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWVxyXG4gICBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxyXG4gICBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxyXG4gICBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cclxuXHJcbiAgICovXG4gIGZ1bmN0aW9uIHNlZWRSYW5kb20ocG9vbCwgbWF0aCkge1xuICAgIC8vXG4gICAgLy8gVGhlIGZvbGxvd2luZyBjb25zdGFudHMgYXJlIHJlbGF0ZWQgdG8gSUVFRSA3NTQgbGltaXRzLlxuICAgIC8vXG4gICAgdmFyIGdsb2JhbCA9IHRoaXMsXG4gICAgICAgIHdpZHRoID0gMjU2LFxuICAgICAgICAvLyBlYWNoIFJDNCBvdXRwdXQgaXMgMCA8PSB4IDwgMjU2XG4gICAgY2h1bmtzID0gNixcbiAgICAgICAgLy8gYXQgbGVhc3Qgc2l4IFJDNCBvdXRwdXRzIGZvciBlYWNoIGRvdWJsZVxuICAgIGRpZ2l0cyA9IDUyLFxuICAgICAgICAvLyB0aGVyZSBhcmUgNTIgc2lnbmlmaWNhbnQgZGlnaXRzIGluIGEgZG91YmxlXG4gICAgcm5nbmFtZSA9ICdyYW5kb20nLFxuICAgICAgICAvLyBybmduYW1lOiBuYW1lIGZvciBNYXRoLnJhbmRvbSBhbmQgTWF0aC5zZWVkcmFuZG9tXG4gICAgc3RhcnRkZW5vbSA9IG1hdGgucG93KHdpZHRoLCBjaHVua3MpLFxuICAgICAgICBzaWduaWZpY2FuY2UgPSBtYXRoLnBvdygyLCBkaWdpdHMpLFxuICAgICAgICBvdmVyZmxvdyA9IHNpZ25pZmljYW5jZSAqIDIsXG4gICAgICAgIG1hc2sgPSB3aWR0aCAtIDEsXG4gICAgICAgIG5vZGVjcnlwdG87IC8vIG5vZGUuanMgY3J5cHRvIG1vZHVsZSwgaW5pdGlhbGl6ZWQgYXQgdGhlIGJvdHRvbS5cbiAgICAvL1xuICAgIC8vIHNlZWRyYW5kb20oKVxuICAgIC8vIFRoaXMgaXMgdGhlIHNlZWRyYW5kb20gZnVuY3Rpb24gZGVzY3JpYmVkIGFib3ZlLlxuICAgIC8vXG5cbiAgICBmdW5jdGlvbiBzZWVkcmFuZG9tKHNlZWQsIG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgICB2YXIga2V5ID0gW107XG4gICAgICBvcHRpb25zID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IHtcbiAgICAgICAgZW50cm9weTogdHJ1ZVxuICAgICAgfSA6IG9wdGlvbnMgfHwge307IC8vIEZsYXR0ZW4gdGhlIHNlZWQgc3RyaW5nIG9yIGJ1aWxkIG9uZSBmcm9tIGxvY2FsIGVudHJvcHkgaWYgbmVlZGVkLlxuXG4gICAgICB2YXIgc2hvcnRzZWVkID0gbWl4a2V5KGZsYXR0ZW4ob3B0aW9ucy5lbnRyb3B5ID8gW3NlZWQsIHRvc3RyaW5nKHBvb2wpXSA6IHNlZWQgPT09IG51bGwgPyBhdXRvc2VlZCgpIDogc2VlZCwgMyksIGtleSk7IC8vIFVzZSB0aGUgc2VlZCB0byBpbml0aWFsaXplIGFuIEFSQzQgZ2VuZXJhdG9yLlxuXG4gICAgICB2YXIgYXJjNCA9IG5ldyBBUkM0KGtleSk7IC8vIFRoaXMgZnVuY3Rpb24gcmV0dXJucyBhIHJhbmRvbSBkb3VibGUgaW4gWzAsIDEpIHRoYXQgY29udGFpbnNcbiAgICAgIC8vIHJhbmRvbW5lc3MgaW4gZXZlcnkgYml0IG9mIHRoZSBtYW50aXNzYSBvZiB0aGUgSUVFRSA3NTQgdmFsdWUuXG5cbiAgICAgIHZhciBwcm5nID0gZnVuY3Rpb24gcHJuZygpIHtcbiAgICAgICAgdmFyIG4gPSBhcmM0LmcoY2h1bmtzKSxcbiAgICAgICAgICAgIC8vIFN0YXJ0IHdpdGggYSBudW1lcmF0b3IgbiA8IDIgXiA0OFxuICAgICAgICBkID0gc3RhcnRkZW5vbSxcbiAgICAgICAgICAgIC8vICAgYW5kIGRlbm9taW5hdG9yIGQgPSAyIF4gNDguXG4gICAgICAgIHggPSAwOyAvLyAgIGFuZCBubyAnZXh0cmEgbGFzdCBieXRlJy5cblxuICAgICAgICB3aGlsZSAobiA8IHNpZ25pZmljYW5jZSkge1xuICAgICAgICAgIC8vIEZpbGwgdXAgYWxsIHNpZ25pZmljYW50IGRpZ2l0cyBieVxuICAgICAgICAgIG4gPSAobiArIHgpICogd2lkdGg7IC8vICAgc2hpZnRpbmcgbnVtZXJhdG9yIGFuZFxuXG4gICAgICAgICAgZCAqPSB3aWR0aDsgLy8gICBkZW5vbWluYXRvciBhbmQgZ2VuZXJhdGluZyBhXG5cbiAgICAgICAgICB4ID0gYXJjNC5nKDEpOyAvLyAgIG5ldyBsZWFzdC1zaWduaWZpY2FudC1ieXRlLlxuICAgICAgICB9XG5cbiAgICAgICAgd2hpbGUgKG4gPj0gb3ZlcmZsb3cpIHtcbiAgICAgICAgICAvLyBUbyBhdm9pZCByb3VuZGluZyB1cCwgYmVmb3JlIGFkZGluZ1xuICAgICAgICAgIG4gLz0gMjsgLy8gICBsYXN0IGJ5dGUsIHNoaWZ0IGV2ZXJ5dGhpbmdcblxuICAgICAgICAgIGQgLz0gMjsgLy8gICByaWdodCB1c2luZyBpbnRlZ2VyIG1hdGggdW50aWxcblxuICAgICAgICAgIHggPj4+PSAxOyAvLyAgIHdlIGhhdmUgZXhhY3RseSB0aGUgZGVzaXJlZCBiaXRzLlxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuICsgeCkgLyBkOyAvLyBGb3JtIHRoZSBudW1iZXIgd2l0aGluIFswLCAxKS5cbiAgICAgIH07XG5cbiAgICAgIHBybmcuaW50MzIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBhcmM0LmcoNCkgfCAwO1xuICAgICAgfTtcblxuICAgICAgcHJuZy5xdWljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyYzQuZyg0KSAvIDB4MTAwMDAwMDAwO1xuICAgICAgfTtcblxuICAgICAgcHJuZ1tcImRvdWJsZVwiXSA9IHBybmc7IC8vIE1peCB0aGUgcmFuZG9tbmVzcyBpbnRvIGFjY3VtdWxhdGVkIGVudHJvcHkuXG5cbiAgICAgIG1peGtleSh0b3N0cmluZyhhcmM0LlMpLCBwb29sKTsgLy8gQ2FsbGluZyBjb252ZW50aW9uOiB3aGF0IHRvIHJldHVybiBhcyBhIGZ1bmN0aW9uIG9mIHBybmcsIHNlZWQsIGlzX21hdGguXG5cbiAgICAgIHJldHVybiAob3B0aW9ucy5wYXNzIHx8IGNhbGxiYWNrIHx8IGZ1bmN0aW9uIChwcm5nLCBzZWVkLCBpc19tYXRoX2NhbGwsIHN0YXRlKSB7XG4gICAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICAgIC8vIExvYWQgdGhlIGFyYzQgc3RhdGUgZnJvbSB0aGUgZ2l2ZW4gc3RhdGUgaWYgaXQgaGFzIGFuIFMgYXJyYXkuXG4gICAgICAgICAgaWYgKHN0YXRlLlMpIHtcbiAgICAgICAgICAgIGNvcHkoc3RhdGUsIGFyYzQpO1xuICAgICAgICAgIH0gLy8gT25seSBwcm92aWRlIHRoZSAuc3RhdGUgbWV0aG9kIGlmIHJlcXVlc3RlZCB2aWEgb3B0aW9ucy5zdGF0ZS5cblxuXG4gICAgICAgICAgcHJuZy5zdGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjb3B5KGFyYzQsIHt9KTtcbiAgICAgICAgICB9O1xuICAgICAgICB9IC8vIElmIGNhbGxlZCBhcyBhIG1ldGhvZCBvZiBNYXRoIChNYXRoLnNlZWRyYW5kb20oKSksIG11dGF0ZVxuICAgICAgICAvLyBNYXRoLnJhbmRvbSBiZWNhdXNlIHRoYXQgaXMgaG93IHNlZWRyYW5kb20uanMgaGFzIHdvcmtlZCBzaW5jZSB2MS4wLlxuXG5cbiAgICAgICAgaWYgKGlzX21hdGhfY2FsbCkge1xuICAgICAgICAgIG1hdGhbcm5nbmFtZV0gPSBwcm5nO1xuICAgICAgICAgIHJldHVybiBzZWVkO1xuICAgICAgICB9IC8vIE90aGVyd2lzZSwgaXQgaXMgYSBuZXdlciBjYWxsaW5nIGNvbnZlbnRpb24sIHNvIHJldHVybiB0aGVcbiAgICAgICAgLy8gcHJuZyBkaXJlY3RseS5cbiAgICAgICAgZWxzZSByZXR1cm4gcHJuZztcbiAgICAgIH0pKHBybmcsIHNob3J0c2VlZCwgJ2dsb2JhbCcgaW4gb3B0aW9ucyA/IG9wdGlvbnMuZ2xvYmFsIDogdGhpcyA9PSBtYXRoLCBvcHRpb25zLnN0YXRlKTtcbiAgICB9XG5cbiAgICBtYXRoWydzZWVkJyArIHJuZ25hbWVdID0gc2VlZHJhbmRvbTsgLy9cbiAgICAvLyBBUkM0XG4gICAgLy9cbiAgICAvLyBBbiBBUkM0IGltcGxlbWVudGF0aW9uLiAgVGhlIGNvbnN0cnVjdG9yIHRha2VzIGEga2V5IGluIHRoZSBmb3JtIG9mXG4gICAgLy8gYW4gYXJyYXkgb2YgYXQgbW9zdCAod2lkdGgpIGludGVnZXJzIHRoYXQgc2hvdWxkIGJlIDAgPD0geCA8ICh3aWR0aCkuXG4gICAgLy9cbiAgICAvLyBUaGUgZyhjb3VudCkgbWV0aG9kIHJldHVybnMgYSBwc2V1ZG9yYW5kb20gaW50ZWdlciB0aGF0IGNvbmNhdGVuYXRlc1xuICAgIC8vIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBmcm9tIEFSQzQuICBJdHMgcmV0dXJuIHZhbHVlIGlzIGEgbnVtYmVyIHhcbiAgICAvLyB0aGF0IGlzIGluIHRoZSByYW5nZSAwIDw9IHggPCAod2lkdGggXiBjb3VudCkuXG4gICAgLy9cblxuICAgIGZ1bmN0aW9uIEFSQzQoa2V5KSB7XG4gICAgICB2YXIgdCxcbiAgICAgICAgICBrZXlsZW4gPSBrZXkubGVuZ3RoLFxuICAgICAgICAgIG1lID0gdGhpcyxcbiAgICAgICAgICBpID0gMCxcbiAgICAgICAgICBqID0gbWUuaSA9IG1lLmogPSAwLFxuICAgICAgICAgIHMgPSBtZS5TID0gW107IC8vIFRoZSBlbXB0eSBrZXkgW10gaXMgdHJlYXRlZCBhcyBbMF0uXG5cbiAgICAgIGlmICgha2V5bGVuKSB7XG4gICAgICAgIGtleSA9IFtrZXlsZW4rK107XG4gICAgICB9IC8vIFNldCB1cCBTIHVzaW5nIHRoZSBzdGFuZGFyZCBrZXkgc2NoZWR1bGluZyBhbGdvcml0aG0uXG5cblxuICAgICAgd2hpbGUgKGkgPCB3aWR0aCkge1xuICAgICAgICBzW2ldID0gaSsrO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgd2lkdGg7IGkrKykge1xuICAgICAgICBzW2ldID0gc1tqID0gbWFzayAmIGogKyBrZXlbaSAlIGtleWxlbl0gKyAodCA9IHNbaV0pXTtcbiAgICAgICAgc1tqXSA9IHQ7XG4gICAgICB9IC8vIFRoZSBcImdcIiBtZXRob2QgcmV0dXJucyB0aGUgbmV4dCAoY291bnQpIG91dHB1dHMgYXMgb25lIG51bWJlci5cblxuXG4gICAgICBtZS5nID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgICAgIC8vIFVzaW5nIGluc3RhbmNlIG1lbWJlcnMgaW5zdGVhZCBvZiBjbG9zdXJlIHN0YXRlIG5lYXJseSBkb3VibGVzIHNwZWVkLlxuICAgICAgICB2YXIgdCxcbiAgICAgICAgICAgIHIgPSAwLFxuICAgICAgICAgICAgaSA9IG1lLmksXG4gICAgICAgICAgICBqID0gbWUuaixcbiAgICAgICAgICAgIHMgPSBtZS5TO1xuXG4gICAgICAgIHdoaWxlIChjb3VudC0tKSB7XG4gICAgICAgICAgdCA9IHNbaSA9IG1hc2sgJiBpICsgMV07XG4gICAgICAgICAgciA9IHIgKiB3aWR0aCArIHNbbWFzayAmIChzW2ldID0gc1tqID0gbWFzayAmIGogKyB0XSkgKyAoc1tqXSA9IHQpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmkgPSBpO1xuICAgICAgICBtZS5qID0gajtcbiAgICAgICAgcmV0dXJuIHI7IC8vIEZvciByb2J1c3QgdW5wcmVkaWN0YWJpbGl0eSwgdGhlIGZ1bmN0aW9uIGNhbGwgYmVsb3cgYXV0b21hdGljYWxseVxuICAgICAgICAvLyBkaXNjYXJkcyBhbiBpbml0aWFsIGJhdGNoIG9mIHZhbHVlcy4gIFRoaXMgaXMgY2FsbGVkIFJDNC1kcm9wWzI1Nl0uXG4gICAgICAgIC8vIFNlZSBodHRwOi8vZ29vZ2xlLmNvbS9zZWFyY2g/cT1yc2ErZmx1aHJlcityZXNwb25zZSZidG5JXG4gICAgICB9O1xuICAgIH0gLy9cbiAgICAvLyBjb3B5KClcbiAgICAvLyBDb3BpZXMgaW50ZXJuYWwgc3RhdGUgb2YgQVJDNCB0byBvciBmcm9tIGEgcGxhaW4gb2JqZWN0LlxuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIGNvcHkoZiwgdCkge1xuICAgICAgdC5pID0gZi5pO1xuICAgICAgdC5qID0gZi5qO1xuICAgICAgdC5TID0gZi5TLnNsaWNlKCk7XG4gICAgICByZXR1cm4gdDtcbiAgICB9IC8vXG4gICAgLy8gZmxhdHRlbigpXG4gICAgLy8gQ29udmVydHMgYW4gb2JqZWN0IHRyZWUgdG8gbmVzdGVkIGFycmF5cyBvZiBzdHJpbmdzLlxuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIGZsYXR0ZW4ob2JqLCBkZXB0aCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHR5cCA9IF90eXBlb2YkMihvYmopLFxuICAgICAgICAgIHByb3A7XG5cbiAgICAgIGlmIChkZXB0aCAmJiB0eXAgPT0gJ29iamVjdCcpIHtcbiAgICAgICAgZm9yIChwcm9wIGluIG9iaikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChmbGF0dGVuKG9ialtwcm9wXSwgZGVwdGggLSAxKSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA/IHJlc3VsdCA6IHR5cCA9PSAnc3RyaW5nJyA/IG9iaiA6IG9iaiArICdcXDAnO1xuICAgIH0gLy9cbiAgICAvLyBtaXhrZXkoKVxuICAgIC8vIE1peGVzIGEgc3RyaW5nIHNlZWQgaW50byBhIGtleSB0aGF0IGlzIGFuIGFycmF5IG9mIGludGVnZXJzLCBhbmRcbiAgICAvLyByZXR1cm5zIGEgc2hvcnRlbmVkIHN0cmluZyBzZWVkIHRoYXQgaXMgZXF1aXZhbGVudCB0byB0aGUgcmVzdWx0IGtleS5cbiAgICAvL1xuXG5cbiAgICBmdW5jdGlvbiBtaXhrZXkoc2VlZCwga2V5KSB7XG4gICAgICB2YXIgc3RyaW5nc2VlZCA9IHNlZWQgKyAnJyxcbiAgICAgICAgICBzbWVhcixcbiAgICAgICAgICBqID0gMDtcblxuICAgICAgd2hpbGUgKGogPCBzdHJpbmdzZWVkLmxlbmd0aCkge1xuICAgICAgICBrZXlbbWFzayAmIGpdID0gbWFzayAmIChzbWVhciBePSBrZXlbbWFzayAmIGpdICogMTkpICsgc3RyaW5nc2VlZC5jaGFyQ29kZUF0KGorKyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b3N0cmluZyhrZXkpO1xuICAgIH0gLy9cbiAgICAvLyBhdXRvc2VlZCgpXG4gICAgLy8gUmV0dXJucyBhbiBvYmplY3QgZm9yIGF1dG9zZWVkaW5nLCB1c2luZyB3aW5kb3cuY3J5cHRvIGFuZCBOb2RlIGNyeXB0b1xuICAgIC8vIG1vZHVsZSBpZiBhdmFpbGFibGUuXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gYXV0b3NlZWQoKSB7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAobm9kZWNyeXB0bykge1xuICAgICAgICAgIHJldHVybiB0b3N0cmluZyhub2RlY3J5cHRvLnJhbmRvbUJ5dGVzKHdpZHRoKSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3V0ID0gbmV3IFVpbnQ4QXJyYXkod2lkdGgpO1xuICAgICAgICAoZ2xvYmFsLmNyeXB0byB8fCBnbG9iYWwubXNDcnlwdG8pLmdldFJhbmRvbVZhbHVlcyhvdXQpO1xuICAgICAgICByZXR1cm4gdG9zdHJpbmcob3V0KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdmFyIGJyb3dzZXIgPSBnbG9iYWwubmF2aWdhdG9yLFxuICAgICAgICAgICAgcGx1Z2lucyA9IGJyb3dzZXIgJiYgYnJvd3Nlci5wbHVnaW5zO1xuICAgICAgICByZXR1cm4gWytuZXcgRGF0ZSgpLCBnbG9iYWwsIHBsdWdpbnMsIGdsb2JhbC5zY3JlZW4sIHRvc3RyaW5nKHBvb2wpXTtcbiAgICAgIH1cbiAgICB9IC8vXG4gICAgLy8gdG9zdHJpbmcoKVxuICAgIC8vIENvbnZlcnRzIGFuIGFycmF5IG9mIGNoYXJjb2RlcyB0byBhIHN0cmluZ1xuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIHRvc3RyaW5nKGEpIHtcbiAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsIGEpO1xuICAgIH0gLy9cbiAgICAvLyBXaGVuIHNlZWRyYW5kb20uanMgaXMgbG9hZGVkLCB3ZSBpbW1lZGlhdGVseSBtaXggYSBmZXcgYml0c1xuICAgIC8vIGZyb20gdGhlIGJ1aWx0LWluIFJORyBpbnRvIHRoZSBlbnRyb3B5IHBvb2wuICBCZWNhdXNlIHdlIGRvXG4gICAgLy8gbm90IHdhbnQgdG8gaW50ZXJmZXJlIHdpdGggZGV0ZXJtaW5pc3RpYyBQUk5HIHN0YXRlIGxhdGVyLFxuICAgIC8vIHNlZWRyYW5kb20gd2lsbCBub3QgY2FsbCBtYXRoLnJhbmRvbSBvbiBpdHMgb3duIGFnYWluIGFmdGVyXG4gICAgLy8gaW5pdGlhbGl6YXRpb24uXG4gICAgLy9cblxuXG4gICAgbWl4a2V5KG1hdGgucmFuZG9tKCksIHBvb2wpOyAvL1xuICAgIC8vIE5vZGVqcyBhbmQgQU1EIHN1cHBvcnQ6IGV4cG9ydCB0aGUgaW1wbGVtZW50YXRpb24gYXMgYSBtb2R1bGUgdXNpbmdcbiAgICAvLyBlaXRoZXIgY29udmVudGlvbi5cbiAgICAvL1xuICAgIC8vIEVuZCBhbm9ueW1vdXMgc2NvcGUsIGFuZCBwYXNzIGluaXRpYWwgdmFsdWVzLlxuICB9XG5cbiAgO1xuXG4gIGZ1bmN0aW9uIGluaXRpYWxpemUkMihCTU1hdGgpIHtcbiAgICBzZWVkUmFuZG9tKFtdLCBCTU1hdGgpO1xuICB9XG5cbiAgdmFyIHByb3BUeXBlcyA9IHtcbiAgICBTSEFQRTogJ3NoYXBlJ1xuICB9O1xuXG4gIGZ1bmN0aW9uIF90eXBlb2YkMShvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQxID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkMSA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDEob2JqKTsgfVxuXG4gIHZhciBFeHByZXNzaW9uTWFuYWdlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgb2IgPSB7fTtcbiAgICB2YXIgTWF0aCA9IEJNTWF0aDtcbiAgICB2YXIgd2luZG93ID0gbnVsbDtcbiAgICB2YXIgZG9jdW1lbnQgPSBudWxsO1xuICAgIHZhciBYTUxIdHRwUmVxdWVzdCA9IG51bGw7XG4gICAgdmFyIGZldGNoID0gbnVsbDtcbiAgICB2YXIgZnJhbWVzID0gbnVsbDtcbiAgICB2YXIgX2xvdHRpZUdsb2JhbCA9IHt9O1xuICAgIGluaXRpYWxpemUkMihCTU1hdGgpO1xuXG4gICAgZnVuY3Rpb24gcmVzZXRGcmFtZSgpIHtcbiAgICAgIF9sb3R0aWVHbG9iYWwgPSB7fTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYXJyKSB7XG4gICAgICByZXR1cm4gYXJyLmNvbnN0cnVjdG9yID09PSBBcnJheSB8fCBhcnIuY29uc3RydWN0b3IgPT09IEZsb2F0MzJBcnJheTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWVyYWJsZSh0T2ZWLCB2KSB7XG4gICAgICByZXR1cm4gdE9mViA9PT0gJ251bWJlcicgfHwgdiBpbnN0YW5jZW9mIE51bWJlciB8fCB0T2ZWID09PSAnYm9vbGVhbicgfHwgdE9mViA9PT0gJ3N0cmluZyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gJGJtX25lZyhhKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgaWYgKHRPZkEgPT09ICdudW1iZXInIHx8IGEgaW5zdGFuY2VvZiBOdW1iZXIgfHwgdE9mQSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiAtYTtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbkEgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldEFyciA9IFtdO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5BOyBpICs9IDEpIHtcbiAgICAgICAgICByZXRBcnJbaV0gPSAtYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChhLnByb3BUeXBlKSB7XG4gICAgICAgIHJldHVybiBhLnY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAtYTtcbiAgICB9XG5cbiAgICB2YXIgZWFzZUluQmV6ID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoMC4zMzMsIDAsIDAuODMzLCAwLjgzMywgJ2Vhc2VJbicpLmdldDtcbiAgICB2YXIgZWFzZU91dEJleiA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKDAuMTY3LCAwLjE2NywgMC42NjcsIDEsICdlYXNlT3V0JykuZ2V0O1xuICAgIHZhciBlYXNlSW5PdXRCZXogPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZygwLjMzLCAwLCAwLjY2NywgMSwgJ2Vhc2VJbk91dCcpLmdldDtcblxuICAgIGZ1bmN0aW9uIHN1bShhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSB8fCB0T2ZBID09PSAnc3RyaW5nJyB8fCB0T2ZCID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gYSArIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgaXNOdW1lcmFibGUodE9mQiwgYikpIHtcbiAgICAgICAgYSA9IGEuc2xpY2UoMCk7XG4gICAgICAgIGFbMF0gKz0gYjtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgYiA9IGIuc2xpY2UoMCk7XG4gICAgICAgIGJbMF0gPSBhICsgYlswXTtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbkEgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFyIGxlbkIgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldEFyciA9IFtdO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuQSB8fCBpIDwgbGVuQikge1xuICAgICAgICAgIGlmICgodHlwZW9mIGFbaV0gPT09ICdudW1iZXInIHx8IGFbaV0gaW5zdGFuY2VvZiBOdW1iZXIpICYmICh0eXBlb2YgYltpXSA9PT0gJ251bWJlcicgfHwgYltpXSBpbnN0YW5jZW9mIE51bWJlcikpIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGFbaV0gKyBiW2ldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRBcnJbaV0gPSBiW2ldID09PSB1bmRlZmluZWQgPyBhW2ldIDogYVtpXSB8fCBiW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIHZhciBhZGQgPSBzdW07XG5cbiAgICBmdW5jdGlvbiBzdWIoYSwgYikge1xuICAgICAgdmFyIHRPZkEgPSBfdHlwZW9mJDEoYSk7XG5cbiAgICAgIHZhciB0T2ZCID0gX3R5cGVvZiQxKGIpO1xuXG4gICAgICBpZiAoaXNOdW1lcmFibGUodE9mQSwgYSkgJiYgaXNOdW1lcmFibGUodE9mQiwgYikpIHtcbiAgICAgICAgaWYgKHRPZkEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYSA9IHBhcnNlSW50KGEsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0T2ZCID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGIgPSBwYXJzZUludChiLCAxMCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYSAtIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgaXNOdW1lcmFibGUodE9mQiwgYikpIHtcbiAgICAgICAgYSA9IGEuc2xpY2UoMCk7XG4gICAgICAgIGFbMF0gLT0gYjtcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgYiA9IGIuc2xpY2UoMCk7XG4gICAgICAgIGJbMF0gPSBhIC0gYlswXTtcbiAgICAgICAgcmV0dXJuIGI7XG4gICAgICB9XG5cbiAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkoYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbkEgPSBhLmxlbmd0aDtcbiAgICAgICAgdmFyIGxlbkIgPSBiLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldEFyciA9IFtdO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuQSB8fCBpIDwgbGVuQikge1xuICAgICAgICAgIGlmICgodHlwZW9mIGFbaV0gPT09ICdudW1iZXInIHx8IGFbaV0gaW5zdGFuY2VvZiBOdW1iZXIpICYmICh0eXBlb2YgYltpXSA9PT0gJ251bWJlcicgfHwgYltpXSBpbnN0YW5jZW9mIE51bWJlcikpIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGFbaV0gLSBiW2ldO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXRBcnJbaV0gPSBiW2ldID09PSB1bmRlZmluZWQgPyBhW2ldIDogYVtpXSB8fCBiW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXRBcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG11bChhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIHZhciBhcnI7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICByZXR1cm4gYSAqIGI7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBsZW4gPSBhLmxlbmd0aDtcbiAgICAgICAgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyW2ldID0gYVtpXSAqIGI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNOdW1lcmFibGUodE9mQSwgYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIGxlbiA9IGIubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhICogYltpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpdihhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIHZhciBhcnI7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICByZXR1cm4gYSAvIGI7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBsZW4gPSBhLmxlbmd0aDtcbiAgICAgICAgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyW2ldID0gYVtpXSAvIGI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNOdW1lcmFibGUodE9mQSwgYSkgJiYgJGJtX2lzSW5zdGFuY2VPZkFycmF5KGIpKSB7XG4gICAgICAgIGxlbiA9IGIubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhIC8gYltpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChhLCBiKSB7XG4gICAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGEgPSBwYXJzZUludChhLCAxMCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgYiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYiA9IHBhcnNlSW50KGIsIDEwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGEgJSBiO1xuICAgIH1cblxuICAgIHZhciAkYm1fc3VtID0gc3VtO1xuICAgIHZhciAkYm1fc3ViID0gc3ViO1xuICAgIHZhciAkYm1fbXVsID0gbXVsO1xuICAgIHZhciAkYm1fZGl2ID0gZGl2O1xuICAgIHZhciAkYm1fbW9kID0gbW9kO1xuXG4gICAgZnVuY3Rpb24gY2xhbXAobnVtLCBtaW4sIG1heCkge1xuICAgICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgICB2YXIgbW0gPSBtYXg7XG4gICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgbWluID0gbW07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChudW0sIG1pbiksIG1heCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmFkaWFuc1RvRGVncmVlcyh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgLyBkZWdUb1JhZHM7XG4gICAgfVxuXG4gICAgdmFyIHJhZGlhbnNfdG9fZGVncmVlcyA9IHJhZGlhbnNUb0RlZ3JlZXM7XG5cbiAgICBmdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCAqIGRlZ1RvUmFkcztcbiAgICB9XG5cbiAgICB2YXIgZGVncmVlc190b19yYWRpYW5zID0gcmFkaWFuc1RvRGVncmVlcztcbiAgICB2YXIgaGVscGVyTGVuZ3RoQXJyYXkgPSBbMCwgMCwgMCwgMCwgMCwgMF07XG5cbiAgICBmdW5jdGlvbiBsZW5ndGgoYXJyMSwgYXJyMikge1xuICAgICAgaWYgKHR5cGVvZiBhcnIxID09PSAnbnVtYmVyJyB8fCBhcnIxIGluc3RhbmNlb2YgTnVtYmVyKSB7XG4gICAgICAgIGFycjIgPSBhcnIyIHx8IDA7XG4gICAgICAgIHJldHVybiBNYXRoLmFicyhhcnIxIC0gYXJyMik7XG4gICAgICB9XG5cbiAgICAgIGlmICghYXJyMikge1xuICAgICAgICBhcnIyID0gaGVscGVyTGVuZ3RoQXJyYXk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IE1hdGgubWluKGFycjEubGVuZ3RoLCBhcnIyLmxlbmd0aCk7XG4gICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYWRkZWRMZW5ndGggKz0gTWF0aC5wb3coYXJyMltpXSAtIGFycjFbaV0sIDIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KGFkZGVkTGVuZ3RoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemUodmVjKSB7XG4gICAgICByZXR1cm4gZGl2KHZlYywgbGVuZ3RoKHZlYykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJnYlRvSHNsKHZhbCkge1xuICAgICAgdmFyIHIgPSB2YWxbMF07XG4gICAgICB2YXIgZyA9IHZhbFsxXTtcbiAgICAgIHZhciBiID0gdmFsWzJdO1xuICAgICAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICAgICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgICAgdmFyIGg7XG4gICAgICB2YXIgcztcbiAgICAgIHZhciBsID0gKG1heCArIG1pbikgLyAyO1xuXG4gICAgICBpZiAobWF4ID09PSBtaW4pIHtcbiAgICAgICAgaCA9IDA7IC8vIGFjaHJvbWF0aWNcblxuICAgICAgICBzID0gMDsgLy8gYWNocm9tYXRpY1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGQgPSBtYXggLSBtaW47XG4gICAgICAgIHMgPSBsID4gMC41ID8gZCAvICgyIC0gbWF4IC0gbWluKSA6IGQgLyAobWF4ICsgbWluKTtcblxuICAgICAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgIGggPSAoZyAtIGIpIC8gZCArIChnIDwgYiA/IDYgOiAwKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBnOlxuICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBiOlxuICAgICAgICAgICAgaCA9IChyIC0gZykgLyBkICsgNDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaCAvPSA2O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW2gsIHMsIGwsIHZhbFszXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHVlMnJnYihwLCBxLCB0KSB7XG4gICAgICBpZiAodCA8IDApIHQgKz0gMTtcbiAgICAgIGlmICh0ID4gMSkgdCAtPSAxO1xuICAgICAgaWYgKHQgPCAxIC8gNikgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gICAgICBpZiAodCA8IDEgLyAyKSByZXR1cm4gcTtcbiAgICAgIGlmICh0IDwgMiAvIDMpIHJldHVybiBwICsgKHEgLSBwKSAqICgyIC8gMyAtIHQpICogNjtcbiAgICAgIHJldHVybiBwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhzbFRvUmdiKHZhbCkge1xuICAgICAgdmFyIGggPSB2YWxbMF07XG4gICAgICB2YXIgcyA9IHZhbFsxXTtcbiAgICAgIHZhciBsID0gdmFsWzJdO1xuICAgICAgdmFyIHI7XG4gICAgICB2YXIgZztcbiAgICAgIHZhciBiO1xuXG4gICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICByID0gbDsgLy8gYWNocm9tYXRpY1xuXG4gICAgICAgIGIgPSBsOyAvLyBhY2hyb21hdGljXG5cbiAgICAgICAgZyA9IGw7IC8vIGFjaHJvbWF0aWNcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBxID0gbCA8IDAuNSA/IGwgKiAoMSArIHMpIDogbCArIHMgLSBsICogcztcbiAgICAgICAgdmFyIHAgPSAyICogbCAtIHE7XG4gICAgICAgIHIgPSBodWUycmdiKHAsIHEsIGggKyAxIC8gMyk7XG4gICAgICAgIGcgPSBodWUycmdiKHAsIHEsIGgpO1xuICAgICAgICBiID0gaHVlMnJnYihwLCBxLCBoIC0gMSAvIDMpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gW3IsIGcsIGIsIHZhbFszXV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGluZWFyKHQsIHRNaW4sIHRNYXgsIHZhbHVlMSwgdmFsdWUyKSB7XG4gICAgICBpZiAodmFsdWUxID09PSB1bmRlZmluZWQgfHwgdmFsdWUyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWUxID0gdE1pbjtcbiAgICAgICAgdmFsdWUyID0gdE1heDtcbiAgICAgICAgdE1pbiA9IDA7XG4gICAgICAgIHRNYXggPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodE1heCA8IHRNaW4pIHtcbiAgICAgICAgdmFyIF90TWluID0gdE1heDtcbiAgICAgICAgdE1heCA9IHRNaW47XG4gICAgICAgIHRNaW4gPSBfdE1pbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHQgPD0gdE1pbikge1xuICAgICAgICByZXR1cm4gdmFsdWUxO1xuICAgICAgfVxuXG4gICAgICBpZiAodCA+PSB0TWF4KSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTI7XG4gICAgICB9XG5cbiAgICAgIHZhciBwZXJjID0gdE1heCA9PT0gdE1pbiA/IDAgOiAodCAtIHRNaW4pIC8gKHRNYXggLSB0TWluKTtcblxuICAgICAgaWYgKCF2YWx1ZTEubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTEgKyAodmFsdWUyIC0gdmFsdWUxKSAqIHBlcmM7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHZhbHVlMS5sZW5ndGg7XG4gICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhcnJbaV0gPSB2YWx1ZTFbaV0gKyAodmFsdWUyW2ldIC0gdmFsdWUxW2ldKSAqIHBlcmM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmFuZG9tKG1pbiwgbWF4KSB7XG4gICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKG1pbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICBtYXggPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1heCA9IG1pbjtcbiAgICAgICAgICBtaW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1heC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSBtYXgubGVuZ3RoO1xuXG4gICAgICAgIGlmICghbWluKSB7XG4gICAgICAgICAgbWluID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICAgIHZhciBybmQgPSBCTU1hdGgucmFuZG9tKCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyW2ldID0gbWluW2ldICsgcm5kICogKG1heFtpXSAtIG1pbltpXSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfVxuXG4gICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWluID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJuZG0gPSBCTU1hdGgucmFuZG9tKCk7XG4gICAgICByZXR1cm4gbWluICsgcm5kbSAqIChtYXggLSBtaW4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVBhdGgocG9pbnRzLCBpblRhbmdlbnRzLCBvdXRUYW5nZW50cywgY2xvc2VkKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBwb2ludHMubGVuZ3RoO1xuICAgICAgdmFyIHBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgcGF0aC5zZXRQYXRoRGF0YSghIWNsb3NlZCwgbGVuKTtcbiAgICAgIHZhciBhcnJQbGFjZWhvbGRlciA9IFswLCAwXTtcbiAgICAgIHZhciBpblZlcnRleFBvaW50O1xuICAgICAgdmFyIG91dFZlcnRleFBvaW50O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaW5WZXJ0ZXhQb2ludCA9IGluVGFuZ2VudHMgJiYgaW5UYW5nZW50c1tpXSA/IGluVGFuZ2VudHNbaV0gOiBhcnJQbGFjZWhvbGRlcjtcbiAgICAgICAgb3V0VmVydGV4UG9pbnQgPSBvdXRUYW5nZW50cyAmJiBvdXRUYW5nZW50c1tpXSA/IG91dFRhbmdlbnRzW2ldIDogYXJyUGxhY2Vob2xkZXI7XG4gICAgICAgIHBhdGguc2V0VHJpcGxlQXQocG9pbnRzW2ldWzBdLCBwb2ludHNbaV1bMV0sIG91dFZlcnRleFBvaW50WzBdICsgcG9pbnRzW2ldWzBdLCBvdXRWZXJ0ZXhQb2ludFsxXSArIHBvaW50c1tpXVsxXSwgaW5WZXJ0ZXhQb2ludFswXSArIHBvaW50c1tpXVswXSwgaW5WZXJ0ZXhQb2ludFsxXSArIHBvaW50c1tpXVsxXSwgaSwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluaXRpYXRlRXhwcmVzc2lvbihlbGVtLCBkYXRhLCBwcm9wZXJ0eSkge1xuICAgICAgLy8gQmFpbCBvdXQgaWYgd2UgZG9uJ3Qgd2FudCBleHByZXNzaW9uc1xuICAgICAgZnVuY3Rpb24gbm9PcChfdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIF92YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFlbGVtLmdsb2JhbERhdGEucmVuZGVyQ29uZmlnLnJ1bkV4cHJlc3Npb25zKSB7XG4gICAgICAgIHJldHVybiBub09wO1xuICAgICAgfVxuXG4gICAgICB2YXIgdmFsID0gZGF0YS54O1xuICAgICAgdmFyIG5lZWRzVmVsb2NpdHkgPSAvdmVsb2NpdHkoPyFbXFx3XFxkXSkvLnRlc3QodmFsKTtcblxuICAgICAgdmFyIF9uZWVkc1JhbmRvbSA9IHZhbC5pbmRleE9mKCdyYW5kb20nKSAhPT0gLTE7XG5cbiAgICAgIHZhciBlbGVtVHlwZSA9IGVsZW0uZGF0YS50eTtcbiAgICAgIHZhciB0cmFuc2Zvcm07XG4gICAgICB2YXIgJGJtX3RyYW5zZm9ybTtcbiAgICAgIHZhciBjb250ZW50O1xuICAgICAgdmFyIGVmZmVjdDtcbiAgICAgIHZhciB0aGlzUHJvcGVydHkgPSBwcm9wZXJ0eTtcbiAgICAgIHRoaXNQcm9wZXJ0eS52YWx1ZUF0VGltZSA9IHRoaXNQcm9wZXJ0eS5nZXRWYWx1ZUF0VGltZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzUHJvcGVydHksICd2YWx1ZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXNQcm9wZXJ0eS52O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGVsZW0uY29tcC5mcmFtZUR1cmF0aW9uID0gMSAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIGVsZW0uY29tcC5kaXNwbGF5U3RhcnRUaW1lID0gMDtcbiAgICAgIHZhciBpblBvaW50ID0gZWxlbS5kYXRhLmlwIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgdmFyIG91dFBvaW50ID0gZWxlbS5kYXRhLm9wIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgdmFyIHdpZHRoID0gZWxlbS5kYXRhLnN3ID8gZWxlbS5kYXRhLnN3IDogMDtcbiAgICAgIHZhciBoZWlnaHQgPSBlbGVtLmRhdGEuc2ggPyBlbGVtLmRhdGEuc2ggOiAwO1xuICAgICAgdmFyIG5hbWUgPSBlbGVtLmRhdGEubm07XG4gICAgICB2YXIgbG9vcEluO1xuICAgICAgdmFyIGxvb3BfaW47XG4gICAgICB2YXIgbG9vcE91dDtcbiAgICAgIHZhciBsb29wX291dDtcbiAgICAgIHZhciBzbW9vdGg7XG4gICAgICB2YXIgdG9Xb3JsZDtcbiAgICAgIHZhciBmcm9tV29ybGQ7XG4gICAgICB2YXIgZnJvbUNvbXA7XG4gICAgICB2YXIgdG9Db21wO1xuICAgICAgdmFyIGZyb21Db21wVG9TdXJmYWNlO1xuICAgICAgdmFyIHBvc2l0aW9uO1xuICAgICAgdmFyIHJvdGF0aW9uO1xuICAgICAgdmFyIGFuY2hvclBvaW50O1xuICAgICAgdmFyIHNjYWxlO1xuICAgICAgdmFyIHRoaXNMYXllcjtcbiAgICAgIHZhciB0aGlzQ29tcDtcbiAgICAgIHZhciBtYXNrO1xuICAgICAgdmFyIHZhbHVlQXRUaW1lO1xuICAgICAgdmFyIHZlbG9jaXR5QXRUaW1lO1xuICAgICAgdmFyIHNjb3BlZF9ibV9ydDsgLy8gdmFsID0gdmFsLnJlcGxhY2UoLyhcXFxcP1wifCcpKChodHRwKShzKT8oOlxcLykpP1xcLy4qPyhcXFxcP1wifCcpL2csIFwiXFxcIlxcXCJcIik7IC8vIGRldGVyIHBvdGVudGlhbCBuZXR3b3JrIGNhbGxzXG5cbiAgICAgIHZhciBleHByZXNzaW9uX2Z1bmN0aW9uID0gZXZhbCgnW2Z1bmN0aW9uIF9leHByZXNzaW9uX2Z1bmN0aW9uKCl7JyArIHZhbCArICc7c2NvcGVkX2JtX3J0PSRibV9ydH1dJylbMF07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXG4gICAgICB2YXIgbnVtS2V5cyA9IHByb3BlcnR5LmtmID8gZGF0YS5rLmxlbmd0aCA6IDA7XG4gICAgICB2YXIgYWN0aXZlID0gIXRoaXMuZGF0YSB8fCB0aGlzLmRhdGEuaGQgIT09IHRydWU7XG5cbiAgICAgIHZhciB3aWdnbGUgPSBmdW5jdGlvbiB3aWdnbGUoZnJlcSwgYW1wKSB7XG4gICAgICAgIHZhciBpV2lnZ2xlO1xuICAgICAgICB2YXIgajtcbiAgICAgICAgdmFyIGxlbldpZ2dsZSA9IHRoaXMucHYubGVuZ3RoID8gdGhpcy5wdi5sZW5ndGggOiAxO1xuICAgICAgICB2YXIgYWRkZWRBbXBzID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbldpZ2dsZSk7XG4gICAgICAgIGZyZXEgPSA1O1xuICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IE1hdGguZmxvb3IodGltZSAqIGZyZXEpO1xuICAgICAgICBpV2lnZ2xlID0gMDtcbiAgICAgICAgaiA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGlXaWdnbGUgPCBpdGVyYXRpb25zKSB7XG4gICAgICAgICAgLy8gdmFyIHJuZCA9IEJNTWF0aC5yYW5kb20oKTtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGVuV2lnZ2xlOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFkZGVkQW1wc1tqXSArPSAtYW1wICsgYW1wICogMiAqIEJNTWF0aC5yYW5kb20oKTsgLy8gYWRkZWRBbXBzW2pdICs9IC1hbXAgKyBhbXAqMipybmQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaVdpZ2dsZSArPSAxO1xuICAgICAgICB9IC8vIHZhciBybmQyID0gQk1NYXRoLnJhbmRvbSgpO1xuXG5cbiAgICAgICAgdmFyIHBlcmlvZHMgPSB0aW1lICogZnJlcTtcbiAgICAgICAgdmFyIHBlcmMgPSBwZXJpb2RzIC0gTWF0aC5mbG9vcihwZXJpb2RzKTtcbiAgICAgICAgdmFyIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW5XaWdnbGUpO1xuXG4gICAgICAgIGlmIChsZW5XaWdnbGUgPiAxKSB7XG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxlbldpZ2dsZTsgaiArPSAxKSB7XG4gICAgICAgICAgICBhcnJbal0gPSB0aGlzLnB2W2pdICsgYWRkZWRBbXBzW2pdICsgKC1hbXAgKyBhbXAgKiAyICogQk1NYXRoLnJhbmRvbSgpKSAqIHBlcmM7IC8vIGFycltqXSA9IHRoaXMucHZbal0gKyBhZGRlZEFtcHNbal0gKyAoLWFtcCArIGFtcCoyKnJuZCkqcGVyYztcbiAgICAgICAgICAgIC8vIGFycltpXSA9IHRoaXMucHZbaV0gKyBhZGRlZEFtcCArIGFtcDEqcGVyYyArIGFtcDIqKDEtcGVyYyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnB2ICsgYWRkZWRBbXBzWzBdICsgKC1hbXAgKyBhbXAgKiAyICogQk1NYXRoLnJhbmRvbSgpKSAqIHBlcmM7XG4gICAgICB9LmJpbmQodGhpcyk7XG5cbiAgICAgIGlmICh0aGlzUHJvcGVydHkubG9vcEluKSB7XG4gICAgICAgIGxvb3BJbiA9IHRoaXNQcm9wZXJ0eS5sb29wSW4uYmluZCh0aGlzUHJvcGVydHkpO1xuICAgICAgICBsb29wX2luID0gbG9vcEluO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1Byb3BlcnR5Lmxvb3BPdXQpIHtcbiAgICAgICAgbG9vcE91dCA9IHRoaXNQcm9wZXJ0eS5sb29wT3V0LmJpbmQodGhpc1Byb3BlcnR5KTtcbiAgICAgICAgbG9vcF9vdXQgPSBsb29wT3V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpc1Byb3BlcnR5LnNtb290aCkge1xuICAgICAgICBzbW9vdGggPSB0aGlzUHJvcGVydHkuc21vb3RoLmJpbmQodGhpc1Byb3BlcnR5KTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9vcEluRHVyYXRpb24odHlwZSwgZHVyYXRpb24pIHtcbiAgICAgICAgcmV0dXJuIGxvb3BJbih0eXBlLCBkdXJhdGlvbiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxvb3BPdXREdXJhdGlvbih0eXBlLCBkdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gbG9vcE91dCh0eXBlLCBkdXJhdGlvbiwgdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmdldFZhbHVlQXRUaW1lKSB7XG4gICAgICAgIHZhbHVlQXRUaW1lID0gdGhpcy5nZXRWYWx1ZUF0VGltZS5iaW5kKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5nZXRWZWxvY2l0eUF0VGltZSkge1xuICAgICAgICB2ZWxvY2l0eUF0VGltZSA9IHRoaXMuZ2V0VmVsb2NpdHlBdFRpbWUuYmluZCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXAgPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLmJpbmQoZWxlbS5jb21wLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZSk7XG5cbiAgICAgIGZ1bmN0aW9uIGxvb2tBdChlbGVtMSwgZWxlbTIpIHtcbiAgICAgICAgdmFyIGZWZWMgPSBbZWxlbTJbMF0gLSBlbGVtMVswXSwgZWxlbTJbMV0gLSBlbGVtMVsxXSwgZWxlbTJbMl0gLSBlbGVtMVsyXV07XG4gICAgICAgIHZhciBwaXRjaCA9IE1hdGguYXRhbjIoZlZlY1swXSwgTWF0aC5zcXJ0KGZWZWNbMV0gKiBmVmVjWzFdICsgZlZlY1syXSAqIGZWZWNbMl0pKSAvIGRlZ1RvUmFkcztcbiAgICAgICAgdmFyIHlhdyA9IC1NYXRoLmF0YW4yKGZWZWNbMV0sIGZWZWNbMl0pIC8gZGVnVG9SYWRzO1xuICAgICAgICByZXR1cm4gW3lhdywgcGl0Y2gsIDBdO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlYXNlT3V0KHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RWFzZShlYXNlT3V0QmV6LCB0LCB0TWluLCB0TWF4LCB2YWwxLCB2YWwyKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZWFzZUluKHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RWFzZShlYXNlSW5CZXosIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlYXNlKHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgcmV0dXJuIGFwcGx5RWFzZShlYXNlSW5PdXRCZXosIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBhcHBseUVhc2UoZm4sIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpIHtcbiAgICAgICAgaWYgKHZhbDEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHZhbDEgPSB0TWluO1xuICAgICAgICAgIHZhbDIgPSB0TWF4O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHQgPSAodCAtIHRNaW4pIC8gKHRNYXggLSB0TWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ID4gMSkge1xuICAgICAgICAgIHQgPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHQgPCAwKSB7XG4gICAgICAgICAgdCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbXVsdCA9IGZuKHQpO1xuXG4gICAgICAgIGlmICgkYm1faXNJbnN0YW5jZU9mQXJyYXkodmFsMSkpIHtcbiAgICAgICAgICB2YXIgaUtleTtcbiAgICAgICAgICB2YXIgbGVuS2V5ID0gdmFsMS5sZW5ndGg7XG4gICAgICAgICAgdmFyIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW5LZXkpO1xuXG4gICAgICAgICAgZm9yIChpS2V5ID0gMDsgaUtleSA8IGxlbktleTsgaUtleSArPSAxKSB7XG4gICAgICAgICAgICBhcnJbaUtleV0gPSAodmFsMltpS2V5XSAtIHZhbDFbaUtleV0pICogbXVsdCArIHZhbDFbaUtleV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAodmFsMiAtIHZhbDEpICogbXVsdCArIHZhbDE7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIG5lYXJlc3RLZXkodGltZSkge1xuICAgICAgICB2YXIgaUtleTtcbiAgICAgICAgdmFyIGxlbktleSA9IGRhdGEuay5sZW5ndGg7XG4gICAgICAgIHZhciBpbmRleDtcbiAgICAgICAgdmFyIGtleVRpbWU7XG5cbiAgICAgICAgaWYgKCFkYXRhLmsubGVuZ3RoIHx8IHR5cGVvZiBkYXRhLmtbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICAgIGtleVRpbWUgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgdGltZSAqPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG5cbiAgICAgICAgICBpZiAodGltZSA8IGRhdGEua1swXS50KSB7XG4gICAgICAgICAgICBpbmRleCA9IDE7XG4gICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rWzBdLnQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoaUtleSA9IDA7IGlLZXkgPCBsZW5LZXkgLSAxOyBpS2V5ICs9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKHRpbWUgPT09IGRhdGEua1tpS2V5XS50KSB7XG4gICAgICAgICAgICAgICAgaW5kZXggPSBpS2V5ICsgMTtcbiAgICAgICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rW2lLZXldLnQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAodGltZSA+IGRhdGEua1tpS2V5XS50ICYmIHRpbWUgPCBkYXRhLmtbaUtleSArIDFdLnQpIHtcbiAgICAgICAgICAgICAgICBpZiAodGltZSAtIGRhdGEua1tpS2V5XS50ID4gZGF0YS5rW2lLZXkgKyAxXS50IC0gdGltZSkge1xuICAgICAgICAgICAgICAgICAgaW5kZXggPSBpS2V5ICsgMjtcbiAgICAgICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleSArIDFdLnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIGluZGV4ID0gaUtleSArIDE7XG4gICAgICAgICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rW2lLZXldLnQ7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgICBpbmRleCA9IGlLZXkgKyAxO1xuICAgICAgICAgICAgICBrZXlUaW1lID0gZGF0YS5rW2lLZXldLnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG9iS2V5ID0ge307XG4gICAgICAgIG9iS2V5LmluZGV4ID0gaW5kZXg7XG4gICAgICAgIG9iS2V5LnRpbWUgPSBrZXlUaW1lIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgICByZXR1cm4gb2JLZXk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGtleShpbmQpIHtcbiAgICAgICAgdmFyIG9iS2V5O1xuICAgICAgICB2YXIgaUtleTtcbiAgICAgICAgdmFyIGxlbktleTtcblxuICAgICAgICBpZiAoIWRhdGEuay5sZW5ndGggfHwgdHlwZW9mIGRhdGEua1swXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBwcm9wZXJ0eSBoYXMgbm8ga2V5ZnJhbWUgYXQgaW5kZXggJyArIGluZCk7XG4gICAgICAgIH1cblxuICAgICAgICBpbmQgLT0gMTtcbiAgICAgICAgb2JLZXkgPSB7XG4gICAgICAgICAgdGltZTogZGF0YS5rW2luZF0udCAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSxcbiAgICAgICAgICB2YWx1ZTogW11cbiAgICAgICAgfTtcbiAgICAgICAgdmFyIGFyciA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLmtbaW5kXSwgJ3MnKSA/IGRhdGEua1tpbmRdLnMgOiBkYXRhLmtbaW5kIC0gMV0uZTtcbiAgICAgICAgbGVuS2V5ID0gYXJyLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGlLZXkgPSAwOyBpS2V5IDwgbGVuS2V5OyBpS2V5ICs9IDEpIHtcbiAgICAgICAgICBvYktleVtpS2V5XSA9IGFycltpS2V5XTtcbiAgICAgICAgICBvYktleS52YWx1ZVtpS2V5XSA9IGFycltpS2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvYktleTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gZnJhbWVzVG9UaW1lKGZyLCBmcHMpIHtcbiAgICAgICAgaWYgKCFmcHMpIHtcbiAgICAgICAgICBmcHMgPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnIgLyBmcHM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHRpbWVUb0ZyYW1lcyh0LCBmcHMpIHtcbiAgICAgICAgaWYgKCF0ICYmIHQgIT09IDApIHtcbiAgICAgICAgICB0ID0gdGltZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZnBzKSB7XG4gICAgICAgICAgZnBzID0gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHQgKiBmcHM7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNlZWRSYW5kb20oc2VlZCkge1xuICAgICAgICBCTU1hdGguc2VlZHJhbmRvbShyYW5kU2VlZCArIHNlZWQpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzb3VyY2VSZWN0QXRUaW1lKCkge1xuICAgICAgICByZXR1cm4gZWxlbS5zb3VyY2VSZWN0QXRUaW1lKCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN1YnN0cmluZyhpbml0LCBlbmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHJpbmcoaW5pdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhpbml0LCBlbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzdWJzdHIoaW5pdCwgZW5kKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyKGluaXQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoaW5pdCwgZW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9zdGVyaXplVGltZShmcmFtZXNQZXJTZWNvbmQpIHtcbiAgICAgICAgdGltZSA9IGZyYW1lc1BlclNlY29uZCA9PT0gMCA/IDAgOiBNYXRoLmZsb29yKHRpbWUgKiBmcmFtZXNQZXJTZWNvbmQpIC8gZnJhbWVzUGVyU2Vjb25kO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdGltZTtcbiAgICAgIHZhciB2ZWxvY2l0eTtcbiAgICAgIHZhciB2YWx1ZTtcbiAgICAgIHZhciB0ZXh0O1xuICAgICAgdmFyIHRleHRJbmRleDtcbiAgICAgIHZhciB0ZXh0VG90YWw7XG4gICAgICB2YXIgc2VsZWN0b3JWYWx1ZTtcbiAgICAgIHZhciBpbmRleCA9IGVsZW0uZGF0YS5pbmQ7XG4gICAgICB2YXIgaGFzUGFyZW50ID0gISEoZWxlbS5oaWVyYXJjaHkgJiYgZWxlbS5oaWVyYXJjaHkubGVuZ3RoKTtcbiAgICAgIHZhciBwYXJlbnQ7XG4gICAgICB2YXIgcmFuZFNlZWQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMDAwKTtcbiAgICAgIHZhciBnbG9iYWxEYXRhID0gZWxlbS5nbG9iYWxEYXRhO1xuXG4gICAgICBmdW5jdGlvbiBleGVjdXRlRXhwcmVzc2lvbihfdmFsdWUpIHtcbiAgICAgICAgLy8gZ2xvYmFsRGF0YS5wdXNoRXhwcmVzc2lvbigpO1xuICAgICAgICB2YWx1ZSA9IF92YWx1ZTtcblxuICAgICAgICBpZiAodGhpcy5mcmFtZUV4cHJlc3Npb25JZCA9PT0gZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgJiYgdGhpcy5wcm9wVHlwZSAhPT0gJ3RleHRTZWxlY3RvcicpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ3RleHRTZWxlY3RvcicpIHtcbiAgICAgICAgICB0ZXh0SW5kZXggPSB0aGlzLnRleHRJbmRleDtcbiAgICAgICAgICB0ZXh0VG90YWwgPSB0aGlzLnRleHRUb3RhbDtcbiAgICAgICAgICBzZWxlY3RvclZhbHVlID0gdGhpcy5zZWxlY3RvclZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzTGF5ZXIpIHtcbiAgICAgICAgICB0ZXh0ID0gZWxlbS5sYXllckludGVyZmFjZS50ZXh0O1xuICAgICAgICAgIHRoaXNMYXllciA9IGVsZW0ubGF5ZXJJbnRlcmZhY2U7XG4gICAgICAgICAgdGhpc0NvbXAgPSBlbGVtLmNvbXAuY29tcEludGVyZmFjZTtcbiAgICAgICAgICB0b1dvcmxkID0gdGhpc0xheWVyLnRvV29ybGQuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIGZyb21Xb3JsZCA9IHRoaXNMYXllci5mcm9tV29ybGQuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIGZyb21Db21wID0gdGhpc0xheWVyLmZyb21Db21wLmJpbmQodGhpc0xheWVyKTtcbiAgICAgICAgICB0b0NvbXAgPSB0aGlzTGF5ZXIudG9Db21wLmJpbmQodGhpc0xheWVyKTtcbiAgICAgICAgICBtYXNrID0gdGhpc0xheWVyLm1hc2sgPyB0aGlzTGF5ZXIubWFzay5iaW5kKHRoaXNMYXllcikgOiBudWxsO1xuICAgICAgICAgIGZyb21Db21wVG9TdXJmYWNlID0gZnJvbUNvbXA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRyYW5zZm9ybSkge1xuICAgICAgICAgIHRyYW5zZm9ybSA9IGVsZW0ubGF5ZXJJbnRlcmZhY2UoJ0FEQkUgVHJhbnNmb3JtIEdyb3VwJyk7XG4gICAgICAgICAgJGJtX3RyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblxuICAgICAgICAgIGlmICh0cmFuc2Zvcm0pIHtcbiAgICAgICAgICAgIGFuY2hvclBvaW50ID0gdHJhbnNmb3JtLmFuY2hvclBvaW50O1xuICAgICAgICAgICAgLyogcG9zaXRpb24gPSB0cmFuc2Zvcm0ucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICByb3RhdGlvbiA9IHRyYW5zZm9ybS5yb3RhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgIHNjYWxlID0gdHJhbnNmb3JtLnNjYWxlOyAqL1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbGVtVHlwZSA9PT0gNCAmJiAhY29udGVudCkge1xuICAgICAgICAgIGNvbnRlbnQgPSB0aGlzTGF5ZXIoJ0FEQkUgUm9vdCBWZWN0b3JzIEdyb3VwJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWVmZmVjdCkge1xuICAgICAgICAgIGVmZmVjdCA9IHRoaXNMYXllcig0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhhc1BhcmVudCA9ICEhKGVsZW0uaGllcmFyY2h5ICYmIGVsZW0uaGllcmFyY2h5Lmxlbmd0aCk7XG5cbiAgICAgICAgaWYgKGhhc1BhcmVudCAmJiAhcGFyZW50KSB7XG4gICAgICAgICAgcGFyZW50ID0gZWxlbS5oaWVyYXJjaHlbMF0ubGF5ZXJJbnRlcmZhY2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG5cbiAgICAgICAgaWYgKF9uZWVkc1JhbmRvbSkge1xuICAgICAgICAgIHNlZWRSYW5kb20ocmFuZFNlZWQgKyB0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZWVkc1ZlbG9jaXR5KSB7XG4gICAgICAgICAgdmVsb2NpdHkgPSB2ZWxvY2l0eUF0VGltZSh0aW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGV4cHJlc3Npb25fZnVuY3Rpb24oKTtcbiAgICAgICAgdGhpcy5mcmFtZUV4cHJlc3Npb25JZCA9IGVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkOyAvLyBUT0RPOiBDaGVjayBpZiBpdCdzIHBvc3NpYmxlIHRvIHJldHVybiBvbiBTaGFwZUludGVyZmFjZSB0aGUgLnYgdmFsdWVcbiAgICAgICAgLy8gQ2hhbmdlZCB0aGlzIHRvIGEgdGVybmFyeSBvcGVyYXRpb24gYmVjYXVzZSBSb2xsdXAgZmFpbGVkIGNvbXBpbGluZyBpdCBjb3JyZWN0bHlcblxuICAgICAgICBzY29wZWRfYm1fcnQgPSBzY29wZWRfYm1fcnQucHJvcFR5cGUgPT09IHByb3BUeXBlcy5TSEFQRSA/IHNjb3BlZF9ibV9ydC52IDogc2NvcGVkX2JtX3J0O1xuICAgICAgICByZXR1cm4gc2NvcGVkX2JtX3J0O1xuICAgICAgfSAvLyBCdW5kbGVycyB3aWxsIHNlZSB0aGVzZSBhcyBkZWFkIGNvZGUgYW5kIHVubGVzcyB3ZSByZWZlcmVuY2UgdGhlbVxuXG5cbiAgICAgIGV4ZWN1dGVFeHByZXNzaW9uLl9fcHJldmVudERlYWRDb2RlUmVtb3ZhbCA9IFskYm1fdHJhbnNmb3JtLCBhbmNob3JQb2ludCwgdGltZSwgdmVsb2NpdHksIGluUG9pbnQsIG91dFBvaW50LCB3aWR0aCwgaGVpZ2h0LCBuYW1lLCBsb29wX2luLCBsb29wX291dCwgc21vb3RoLCB0b0NvbXAsIGZyb21Db21wVG9TdXJmYWNlLCB0b1dvcmxkLCBmcm9tV29ybGQsIG1hc2ssIHBvc2l0aW9uLCByb3RhdGlvbiwgc2NhbGUsIHRoaXNDb21wLCBudW1LZXlzLCBhY3RpdmUsIHdpZ2dsZSwgbG9vcEluRHVyYXRpb24sIGxvb3BPdXREdXJhdGlvbiwgY29tcCwgbG9va0F0LCBlYXNlT3V0LCBlYXNlSW4sIGVhc2UsIG5lYXJlc3RLZXksIGtleSwgdGV4dCwgdGV4dEluZGV4LCB0ZXh0VG90YWwsIHNlbGVjdG9yVmFsdWUsIGZyYW1lc1RvVGltZSwgdGltZVRvRnJhbWVzLCBzb3VyY2VSZWN0QXRUaW1lLCBzdWJzdHJpbmcsIHN1YnN0ciwgcG9zdGVyaXplVGltZSwgaW5kZXgsIGdsb2JhbERhdGFdO1xuICAgICAgcmV0dXJuIGV4ZWN1dGVFeHByZXNzaW9uO1xuICAgIH1cblxuICAgIG9iLmluaXRpYXRlRXhwcmVzc2lvbiA9IGluaXRpYXRlRXhwcmVzc2lvbjtcbiAgICBvYi5fX3ByZXZlbnREZWFkQ29kZVJlbW92YWwgPSBbd2luZG93LCBkb2N1bWVudCwgWE1MSHR0cFJlcXVlc3QsIGZldGNoLCBmcmFtZXMsICRibV9uZWcsIGFkZCwgJGJtX3N1bSwgJGJtX3N1YiwgJGJtX211bCwgJGJtX2RpdiwgJGJtX21vZCwgY2xhbXAsIHJhZGlhbnNfdG9fZGVncmVlcywgZGVncmVlc1RvUmFkaWFucywgZGVncmVlc190b19yYWRpYW5zLCBub3JtYWxpemUsIHJnYlRvSHNsLCBoc2xUb1JnYiwgbGluZWFyLCByYW5kb20sIGNyZWF0ZVBhdGgsIF9sb3R0aWVHbG9iYWxdO1xuICAgIG9iLnJlc2V0RnJhbWUgPSByZXNldEZyYW1lO1xuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBFeHByZXNzaW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5pbml0RXhwcmVzc2lvbnMgPSBpbml0RXhwcmVzc2lvbnM7XG4gICAgb2IucmVzZXRGcmFtZSA9IEV4cHJlc3Npb25NYW5hZ2VyLnJlc2V0RnJhbWU7XG5cbiAgICBmdW5jdGlvbiBpbml0RXhwcmVzc2lvbnMoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgc3RhY2tDb3VudCA9IDA7XG4gICAgICB2YXIgcmVnaXN0ZXJzID0gW107XG5cbiAgICAgIGZ1bmN0aW9uIHB1c2hFeHByZXNzaW9uKCkge1xuICAgICAgICBzdGFja0NvdW50ICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBvcEV4cHJlc3Npb24oKSB7XG4gICAgICAgIHN0YWNrQ291bnQgLT0gMTtcblxuICAgICAgICBpZiAoc3RhY2tDb3VudCA9PT0gMCkge1xuICAgICAgICAgIHJlbGVhc2VJbnN0YW5jZXMoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWdpc3RlckV4cHJlc3Npb25Qcm9wZXJ0eShleHByZXNzaW9uKSB7XG4gICAgICAgIGlmIChyZWdpc3RlcnMuaW5kZXhPZihleHByZXNzaW9uKSA9PT0gLTEpIHtcbiAgICAgICAgICByZWdpc3RlcnMucHVzaChleHByZXNzaW9uKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWxlYXNlSW5zdGFuY2VzKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHJlZ2lzdGVycy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgcmVnaXN0ZXJzW2ldLnJlbGVhc2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lzdGVycy5sZW5ndGggPSAwO1xuICAgICAgfVxuXG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuY29tcEludGVyZmFjZSA9IENvbXBFeHByZXNzaW9uSW50ZXJmYWNlKGFuaW1hdGlvbi5yZW5kZXJlcik7XG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oYW5pbWF0aW9uLnJlbmRlcmVyKTtcbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnB1c2hFeHByZXNzaW9uID0gcHVzaEV4cHJlc3Npb247XG4gICAgICBhbmltYXRpb24ucmVuZGVyZXIuZ2xvYmFsRGF0YS5wb3BFeHByZXNzaW9uID0gcG9wRXhwcmVzc2lvbjtcbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5ID0gcmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIE1hc2tNYW5hZ2VySW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE1hc2tJbnRlcmZhY2UobWFzaywgZGF0YSkge1xuICAgICAgdGhpcy5fbWFzayA9IG1hc2s7XG4gICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFza0ludGVyZmFjZS5wcm90b3R5cGUsICdtYXNrUGF0aCcsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fbWFzay5wcm9wLmspIHtcbiAgICAgICAgICB0aGlzLl9tYXNrLnByb3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXNrLnByb3A7XG4gICAgICB9XG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1hc2tJbnRlcmZhY2UucHJvdG90eXBlLCAnbWFza09wYWNpdHknLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hc2sub3Auaykge1xuICAgICAgICAgIHRoaXMuX21hc2sub3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9tYXNrLm9wLnYgKiAxMDA7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgTWFza01hbmFnZXIgPSBmdW5jdGlvbiBNYXNrTWFuYWdlcihtYXNrTWFuYWdlcikge1xuICAgICAgdmFyIF9tYXNrc0ludGVyZmFjZXMgPSBjcmVhdGVTaXplZEFycmF5KG1hc2tNYW5hZ2VyLnZpZXdEYXRhLmxlbmd0aCk7XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IG1hc2tNYW5hZ2VyLnZpZXdEYXRhLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIF9tYXNrc0ludGVyZmFjZXNbaV0gPSBuZXcgTWFza0ludGVyZmFjZShtYXNrTWFuYWdlci52aWV3RGF0YVtpXSwgbWFza01hbmFnZXIubWFza3NQcm9wZXJ0aWVzW2ldKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1hc2tGdW5jdGlvbiA9IGZ1bmN0aW9uIG1hc2tGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIGkgPSAwO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKG1hc2tNYW5hZ2VyLm1hc2tzUHJvcGVydGllc1tpXS5ubSA9PT0gbmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIF9tYXNrc0ludGVyZmFjZXNbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gbWFza0Z1bmN0aW9uO1xuICAgIH07XG5cbiAgICByZXR1cm4gTWFza01hbmFnZXI7XG4gIH0oKTtcblxuICB2YXIgRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZWZhdWx0VW5pZGltZW5zaW9uYWxWYWx1ZSA9IHtcbiAgICAgIHB2OiAwLFxuICAgICAgdjogMCxcbiAgICAgIG11bHQ6IDFcbiAgICB9O1xuICAgIHZhciBkZWZhdWx0TXVsdGlkaW1lbnNpb25hbFZhbHVlID0ge1xuICAgICAgcHY6IFswLCAwLCAwXSxcbiAgICAgIHY6IFswLCAwLCAwXSxcbiAgICAgIG11bHQ6IDFcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCB0eXBlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCAndmVsb2NpdHknLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBwcm9wZXJ0eS5nZXRWZWxvY2l0eUF0VGltZShwcm9wZXJ0eS5jb21wLmN1cnJlbnRGcmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLm51bUtleXMgPSBwcm9wZXJ0eS5rZXlmcmFtZXMgPyBwcm9wZXJ0eS5rZXlmcmFtZXMubGVuZ3RoIDogMDtcblxuICAgICAgZXhwcmVzc2lvblZhbHVlLmtleSA9IGZ1bmN0aW9uIChwb3MpIHtcbiAgICAgICAgaWYgKCFleHByZXNzaW9uVmFsdWUubnVtS2V5cykge1xuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHZhbHVlID0gJyc7XG5cbiAgICAgICAgaWYgKCdzJyBpbiBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMV0pIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAxXS5zO1xuICAgICAgICB9IGVsc2UgaWYgKCdlJyBpbiBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMl0pIHtcbiAgICAgICAgICB2YWx1ZSA9IHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAyXS5lO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlID0gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDJdLnM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsdWVQcm9wID0gdHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJyA/IG5ldyBOdW1iZXIodmFsdWUpIDogT2JqZWN0LmFzc2lnbih7fSwgdmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXG4gICAgICAgIHZhbHVlUHJvcC50aW1lID0gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDFdLnQgLyBwcm9wZXJ0eS5lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIHZhbHVlUHJvcC52YWx1ZSA9IHR5cGUgPT09ICd1bmlkaW1lbnNpb25hbCcgPyB2YWx1ZVswXSA6IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWVQcm9wO1xuICAgICAgfTtcblxuICAgICAgZXhwcmVzc2lvblZhbHVlLnZhbHVlQXRUaW1lID0gcHJvcGVydHkuZ2V0VmFsdWVBdFRpbWU7XG4gICAgICBleHByZXNzaW9uVmFsdWUuc3BlZWRBdFRpbWUgPSBwcm9wZXJ0eS5nZXRTcGVlZEF0VGltZTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52ZWxvY2l0eUF0VGltZSA9IHByb3BlcnR5LmdldFZlbG9jaXR5QXRUaW1lO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eS5wcm9wZXJ0eUdyb3VwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFVuaWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpIHtcbiAgICAgIGlmICghcHJvcGVydHkgfHwgISgncHYnIGluIHByb3BlcnR5KSkge1xuICAgICAgICBwcm9wZXJ0eSA9IGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbXVsdCA9IDEgLyBwcm9wZXJ0eS5tdWx0O1xuICAgICAgdmFyIHZhbCA9IHByb3BlcnR5LnB2ICogbXVsdDtcbiAgICAgIHZhciBleHByZXNzaW9uVmFsdWUgPSBuZXcgTnVtYmVyKHZhbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52YWx1ZSA9IHZhbDtcbiAgICAgIGNvbXBsZXRlUHJvcGVydHkoZXhwcmVzc2lvblZhbHVlLCBwcm9wZXJ0eSwgJ3VuaWRpbWVuc2lvbmFsJyk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocHJvcGVydHkuaykge1xuICAgICAgICAgIHByb3BlcnR5LmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YWwgPSBwcm9wZXJ0eS52ICogbXVsdDtcblxuICAgICAgICBpZiAoZXhwcmVzc2lvblZhbHVlLnZhbHVlICE9PSB2YWwpIHtcbiAgICAgICAgICBleHByZXNzaW9uVmFsdWUgPSBuZXcgTnVtYmVyKHZhbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cbiAgICAgICAgICBleHByZXNzaW9uVmFsdWUudmFsdWUgPSB2YWw7XG4gICAgICAgICAgY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCAndW5pZGltZW5zaW9uYWwnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uVmFsdWU7XG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZShwcm9wZXJ0eSkge1xuICAgICAgaWYgKCFwcm9wZXJ0eSB8fCAhKCdwdicgaW4gcHJvcGVydHkpKSB7XG4gICAgICAgIHByb3BlcnR5ID0gZGVmYXVsdE11bHRpZGltZW5zaW9uYWxWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG11bHQgPSAxIC8gcHJvcGVydHkubXVsdDtcbiAgICAgIHZhciBsZW4gPSBwcm9wZXJ0eS5kYXRhICYmIHByb3BlcnR5LmRhdGEubCB8fCBwcm9wZXJ0eS5wdi5sZW5ndGg7XG4gICAgICB2YXIgZXhwcmVzc2lvblZhbHVlID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbik7XG4gICAgICB2YXIgYXJyVmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS52YWx1ZSA9IGFyclZhbHVlO1xuICAgICAgY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCAnbXVsdGlkaW1lbnNpb25hbCcpO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5LmspIHtcbiAgICAgICAgICBwcm9wZXJ0eS5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGFyclZhbHVlW2ldID0gcHJvcGVydHkudltpXSAqIG11bHQ7XG4gICAgICAgICAgZXhwcmVzc2lvblZhbHVlW2ldID0gYXJyVmFsdWVbaV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhwcmVzc2lvblZhbHVlO1xuICAgICAgfTtcbiAgICB9IC8vIFRPRE86IHRyeSB0byBhdm9pZCB1c2luZyB0aGlzIGdldHRlclxuXG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0R2V0dGVyKCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRHZXR0ZXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wZXJ0eS5wcm9wVHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJykge1xuICAgICAgICByZXR1cm4gVW5pZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZShwcm9wZXJ0eSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHlJbnRlcmZhY2UocHJvcGVydHkpO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgVHJhbnNmb3JtRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRyYW5zZm9ybSkge1xuICAgICAgZnVuY3Rpb24gX3RoaXNGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgJ3NjYWxlJzpcbiAgICAgICAgICBjYXNlICdTY2FsZSc6XG4gICAgICAgICAgY2FzZSAnQURCRSBTY2FsZSc6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24uc2NhbGU7XG5cbiAgICAgICAgICBjYXNlICdyb3RhdGlvbic6XG4gICAgICAgICAgY2FzZSAnUm90YXRpb24nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRpb24nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRlIFonOlxuICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi5yb3RhdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUm90YXRlIFgnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ueFJvdGF0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBSb3RhdGUgWSc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi55Um90YXRpb247XG5cbiAgICAgICAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgICAgICAgY2FzZSAnUG9zaXRpb24nOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgUG9zaXRpb24nOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnBvc2l0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBQb3NpdGlvbl8wJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnhQb3NpdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUG9zaXRpb25fMSc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi55UG9zaXRpb247XG5cbiAgICAgICAgICBjYXNlICdBREJFIFBvc2l0aW9uXzInOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24uelBvc2l0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnYW5jaG9yUG9pbnQnOlxuICAgICAgICAgIGNhc2UgJ0FuY2hvclBvaW50JzpcbiAgICAgICAgICBjYXNlICdBbmNob3IgUG9pbnQnOlxuICAgICAgICAgIGNhc2UgJ0FEQkUgQW5jaG9yUG9pbnQnOlxuICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLmFuY2hvclBvaW50O1xuXG4gICAgICAgICAgY2FzZSAnb3BhY2l0eSc6XG4gICAgICAgICAgY2FzZSAnT3BhY2l0eSc6XG4gICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLm9wYWNpdHk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdyb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnIgfHwgdHJhbnNmb3JtLnJ6KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3pSb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ6IHx8IHRyYW5zZm9ybS5yKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3hSb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ4KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3lSb3RhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnJ5KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3NjYWxlJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucylcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgX3B4O1xuXG4gICAgICB2YXIgX3B5O1xuXG4gICAgICB2YXIgX3B6O1xuXG4gICAgICB2YXIgX3RyYW5zZm9ybUZhY3Rvcnk7XG5cbiAgICAgIGlmICh0cmFuc2Zvcm0ucCkge1xuICAgICAgICBfdHJhbnNmb3JtRmFjdG9yeSA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfcHggPSBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB4KTtcbiAgICAgICAgX3B5ID0gRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weSk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybS5weikge1xuICAgICAgICAgIF9weiA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHopO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAncG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGlmICh0cmFuc2Zvcm0ucCkge1xuICAgICAgICAgICAgcmV0dXJuIF90cmFuc2Zvcm1GYWN0b3J5KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFtfcHgoKSwgX3B5KCksIF9weiA/IF9weigpIDogMF07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd4UG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weClcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd5UG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weSlcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICd6UG9zaXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weilcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdhbmNob3JQb2ludCcsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLmEpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnb3BhY2l0eScsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLm8pXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnc2tldycsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnNrKVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3NrZXdBeGlzJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0uc2EpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnb3JpZW50YXRpb24nLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5vcilcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0TWF0cml4KHRpbWUpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgICBpZiAodGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhciBwcm9wTWF0cml4ID0gdGhpcy5fZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcC5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblxuICAgICAgICBwcm9wTWF0cml4LmNsb25lKHRvV29ybGRNYXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRyYW5zZm9ybU1hdCA9IHRoaXMuX2VsZW0uZmluYWxUcmFuc2Zvcm0ubVByb3A7XG4gICAgICAgIHRyYW5zZm9ybU1hdC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9Xb3JsZE1hdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1dvcmxkVmVjKGFyciwgdGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSB0aGlzLmdldE1hdHJpeCh0aW1lKTtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTJdID0gMDtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTNdID0gMDtcbiAgICAgIHRvV29ybGRNYXQucHJvcHNbMTRdID0gMDtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b1dvcmxkKGFyciwgdGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSB0aGlzLmdldE1hdHJpeCh0aW1lKTtcbiAgICAgIHJldHVybiB0aGlzLmFwcGx5UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tV29ybGRWZWMoYXJyLCB0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IHRoaXMuZ2V0TWF0cml4KHRpbWUpO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxMl0gPSAwO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxM10gPSAwO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxNF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuaW52ZXJ0UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tV29ybGQoYXJyLCB0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IHRoaXMuZ2V0TWF0cml4KHRpbWUpO1xuICAgICAgcmV0dXJuIHRoaXMuaW52ZXJ0UG9pbnQodG9Xb3JsZE1hdCwgYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVBvaW50KG1hdHJpeCwgYXJyKSB7XG4gICAgICBpZiAodGhpcy5fZWxlbS5oaWVyYXJjaHkgJiYgdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuX2VsZW0uaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmFwcGx5VG9NYXRyaXgobWF0cml4KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0cml4LmFwcGx5VG9Qb2ludEFycmF5KGFyclswXSwgYXJyWzFdLCBhcnJbMl0gfHwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJ0UG9pbnQobWF0cml4LCBhcnIpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtLmhpZXJhcmNoeSAmJiB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbS5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuYXBwbHlUb01hdHJpeChtYXRyaXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyaXguaW52ZXJzZVBvaW50KGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZnJvbUNvbXAoYXJyKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIHRvV29ybGRNYXQucmVzZXQoKTtcblxuICAgICAgdGhpcy5fZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KHRvV29ybGRNYXQpO1xuXG4gICAgICBpZiAodGhpcy5fZWxlbS5oaWVyYXJjaHkgJiYgdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5fZWxlbS5oaWVyYXJjaHkubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuX2VsZW0uaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmFwcGx5VG9NYXRyaXgodG9Xb3JsZE1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdG9Xb3JsZE1hdC5pbnZlcnNlUG9pbnQoYXJyKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRvV29ybGRNYXQuaW52ZXJzZVBvaW50KGFycik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2FtcGxlSW1hZ2UoKSB7XG4gICAgICByZXR1cm4gWzEsIDEsIDEsIDFdO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIHRyYW5zZm9ybUludGVyZmFjZTtcblxuICAgICAgZnVuY3Rpb24gX3JlZ2lzdGVyTWFza0ludGVyZmFjZShtYXNrTWFuYWdlcikge1xuICAgICAgICBfdGhpc0xheWVyRnVuY3Rpb24ubWFzayA9IG5ldyBNYXNrTWFuYWdlckludGVyZmFjZShtYXNrTWFuYWdlciwgZWxlbSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIF9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UoZWZmZWN0cykge1xuICAgICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZWZmZWN0ID0gZWZmZWN0cztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3RoaXNMYXllckZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSAnQURCRSBSb290IFZlY3RvcnMgR3JvdXAnOlxuICAgICAgICAgIGNhc2UgJ0NvbnRlbnRzJzpcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uLnNoYXBlSW50ZXJmYWNlO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICBjYXNlICdUcmFuc2Zvcm0nOlxuICAgICAgICAgIGNhc2UgJ3RyYW5zZm9ybSc6XG4gICAgICAgICAgY2FzZSAnQURCRSBUcmFuc2Zvcm0gR3JvdXAnOlxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUludGVyZmFjZTtcblxuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBjYXNlICdBREJFIEVmZmVjdCBQYXJhZGUnOlxuICAgICAgICAgIGNhc2UgJ2VmZmVjdHMnOlxuICAgICAgICAgIGNhc2UgJ0VmZmVjdHMnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5lZmZlY3Q7XG5cbiAgICAgICAgICBjYXNlICdBREJFIFRleHQgUHJvcGVydGllcyc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uLnRleHRJbnRlcmZhY2U7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmdldE1hdHJpeCA9IGdldE1hdHJpeDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5pbnZlcnRQb2ludCA9IGludmVydFBvaW50O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmFwcGx5UG9pbnQgPSBhcHBseVBvaW50O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnRvV29ybGQgPSB0b1dvcmxkO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnRvV29ybGRWZWMgPSB0b1dvcmxkVmVjO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmZyb21Xb3JsZCA9IGZyb21Xb3JsZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcm9tV29ybGRWZWMgPSBmcm9tV29ybGRWZWM7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24udG9Db21wID0gdG9Xb3JsZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5mcm9tQ29tcCA9IGZyb21Db21wO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnNhbXBsZUltYWdlID0gc2FtcGxlSW1hZ2U7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uc291cmNlUmVjdEF0VGltZSA9IGVsZW0uc291cmNlUmVjdEF0VGltZS5iaW5kKGVsZW0pO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLl9lbGVtID0gZWxlbTtcbiAgICAgIHRyYW5zZm9ybUludGVyZmFjZSA9IFRyYW5zZm9ybUV4cHJlc3Npb25JbnRlcmZhY2UoZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcCk7XG4gICAgICB2YXIgYW5jaG9yUG9pbnREZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdhbmNob3JQb2ludCcpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoX3RoaXNMYXllckZ1bmN0aW9uLCB7XG4gICAgICAgIGhhc1BhcmVudDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uaGllcmFyY2h5Lmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHBhcmVudDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uaGllcmFyY2h5WzBdLmxheWVySW50ZXJmYWNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRpb246IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAncm90YXRpb24nKSxcbiAgICAgICAgc2NhbGU6IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAnc2NhbGUnKSxcbiAgICAgICAgcG9zaXRpb246IGdldERlc2NyaXB0b3IodHJhbnNmb3JtSW50ZXJmYWNlLCAncG9zaXRpb24nKSxcbiAgICAgICAgb3BhY2l0eTogZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdvcGFjaXR5JyksXG4gICAgICAgIGFuY2hvclBvaW50OiBhbmNob3JQb2ludERlc2NyaXB0b3IsXG4gICAgICAgIGFuY2hvcl9wb2ludDogYW5jaG9yUG9pbnREZXNjcmlwdG9yLFxuICAgICAgICB0cmFuc2Zvcm06IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1JbnRlcmZhY2U7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBhY3RpdmU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtLmlzSW5SYW5nZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnN0YXJ0VGltZSA9IGVsZW0uZGF0YS5zdDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5pbmRleCA9IGVsZW0uZGF0YS5pbmQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uc291cmNlID0gZWxlbS5kYXRhLnJlZklkO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmhlaWdodCA9IGVsZW0uZGF0YS50eSA9PT0gMCA/IGVsZW0uZGF0YS5oIDogMTAwO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLndpZHRoID0gZWxlbS5kYXRhLnR5ID09PSAwID8gZWxlbS5kYXRhLncgOiAxMDA7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uaW5Qb2ludCA9IGVsZW0uZGF0YS5pcCAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5vdXRQb2ludCA9IGVsZW0uZGF0YS5vcCAvIGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5fbmFtZSA9IGVsZW0uZGF0YS5ubTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5yZWdpc3Rlck1hc2tJbnRlcmZhY2UgPSBfcmVnaXN0ZXJNYXNrSW50ZXJmYWNlO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnJlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZSA9IF9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2U7XG4gICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgcHJvcGVydHlHcm91cEZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChpbnRlcmZhY2VGdW5jdGlvbiwgcGFyZW50UHJvcGVydHlHcm91cCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgdmFsID0gdmFsID09PSB1bmRlZmluZWQgPyAxIDogdmFsO1xuXG4gICAgICAgIGlmICh2YWwgPD0gMCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJlbnRQcm9wZXJ0eUdyb3VwKHZhbCAtIDEpO1xuICAgICAgfTtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFByb3BlcnR5SW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAocHJvcGVydHlOYW1lLCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgaW50ZXJmYWNlRnVuY3Rpb24gPSB7XG4gICAgICAgIF9uYW1lOiBwcm9wZXJ0eU5hbWVcbiAgICAgIH07XG5cbiAgICAgIGZ1bmN0aW9uIF9wcm9wZXJ0eUdyb3VwKHZhbCkge1xuICAgICAgICB2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IDEgOiB2YWw7XG5cbiAgICAgICAgaWYgKHZhbCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXAodmFsIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfcHJvcGVydHlHcm91cDtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIEVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHtcbiAgICAgIGNyZWF0ZUVmZmVjdHNJbnRlcmZhY2U6IGNyZWF0ZUVmZmVjdHNJbnRlcmZhY2VcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRWZmZWN0c0ludGVyZmFjZShlbGVtLCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBpZiAoZWxlbS5lZmZlY3RzTWFuYWdlcikge1xuICAgICAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSBbXTtcbiAgICAgICAgdmFyIGVmZmVjdHNEYXRhID0gZWxlbS5kYXRhLmVmO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGVmZmVjdEVsZW1lbnRzLnB1c2goY3JlYXRlR3JvdXBJbnRlcmZhY2UoZWZmZWN0c0RhdGFbaV0sIGVsZW0uZWZmZWN0c01hbmFnZXIuZWZmZWN0RWxlbWVudHNbaV0sIHByb3BlcnR5R3JvdXAsIGVsZW0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlZmZlY3RzID0gZWxlbS5kYXRhLmVmIHx8IFtdO1xuXG4gICAgICAgIHZhciBncm91cEludGVyZmFjZSA9IGZ1bmN0aW9uIGdyb3VwSW50ZXJmYWNlKG5hbWUpIHtcbiAgICAgICAgICBpID0gMDtcbiAgICAgICAgICBsZW4gPSBlZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gZWZmZWN0c1tpXS5ubSB8fCBuYW1lID09PSBlZmZlY3RzW2ldLm1uIHx8IG5hbWUgPT09IGVmZmVjdHNbaV0uaXgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdyb3VwSW50ZXJmYWNlLCAnbnVtUHJvcGVydGllcycsIHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBlZmZlY3RzLmxlbmd0aDtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZ3JvdXBJbnRlcmZhY2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUdyb3VwSW50ZXJmYWNlKGRhdGEsIGVsZW1lbnRzLCBwcm9wZXJ0eUdyb3VwLCBlbGVtKSB7XG4gICAgICBmdW5jdGlvbiBncm91cEludGVyZmFjZShuYW1lKSB7XG4gICAgICAgIHZhciBlZmZlY3RzID0gZGF0YS5lZjtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gZWZmZWN0cy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gZWZmZWN0c1tpXS5ubSB8fCBuYW1lID09PSBlZmZlY3RzW2ldLm1uIHx8IG5hbWUgPT09IGVmZmVjdHNbaV0uaXgpIHtcbiAgICAgICAgICAgIGlmIChlZmZlY3RzW2ldLnR5ID09PSA1KSB7XG4gICAgICAgICAgICAgIHJldHVybiBlZmZlY3RFbGVtZW50c1tpXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzW2ldKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGdyb3VwSW50ZXJmYWNlLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gW107XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBkYXRhLmVmLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChkYXRhLmVmW2ldLnR5ID09PSA1KSB7XG4gICAgICAgICAgZWZmZWN0RWxlbWVudHMucHVzaChjcmVhdGVHcm91cEludGVyZmFjZShkYXRhLmVmW2ldLCBlbGVtZW50cy5lZmZlY3RFbGVtZW50c1tpXSwgZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0ucHJvcGVydHlHcm91cCwgZWxlbSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVmZmVjdEVsZW1lbnRzLnB1c2goY3JlYXRlVmFsdWVJbnRlcmZhY2UoZWxlbWVudHMuZWZmZWN0RWxlbWVudHNbaV0sIGRhdGEuZWZbaV0udHksIGVsZW0sIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEubW4gPT09ICdBREJFIENvbG9yIENvbnRyb2wnKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShncm91cEludGVyZmFjZSwgJ2NvbG9yJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzWzBdKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZ3JvdXBJbnRlcmZhY2UsIHtcbiAgICAgICAgbnVtUHJvcGVydGllczoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEubnA7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBkYXRhLm5tXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnR5R3JvdXA6IHtcbiAgICAgICAgICB2YWx1ZTogX3Byb3BlcnR5R3JvdXBcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBncm91cEludGVyZmFjZS5lbmFibGVkID0gZGF0YS5lbiAhPT0gMDtcbiAgICAgIGdyb3VwSW50ZXJmYWNlLmFjdGl2ZSA9IGdyb3VwSW50ZXJmYWNlLmVuYWJsZWQ7XG4gICAgICByZXR1cm4gZ3JvdXBJbnRlcmZhY2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVmFsdWVJbnRlcmZhY2UoZWxlbWVudCwgdHlwZSwgZWxlbSwgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGV4cHJlc3Npb25Qcm9wZXJ0eSA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShlbGVtZW50LnApO1xuXG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IDEwKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW0uY29tcC5jb21wSW50ZXJmYWNlKGVsZW1lbnQucC52KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uUHJvcGVydHkoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVsZW1lbnQucC5zZXRHcm91cFByb3BlcnR5KSB7XG4gICAgICAgIGVsZW1lbnQucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCcnLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgU2hhcGVQYXRoSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBwYXRoSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIHByb3AgPSB2aWV3LnNoO1xuXG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ1NoYXBlJyB8fCB2YWwgPT09ICdzaGFwZScgfHwgdmFsID09PSAnUGF0aCcgfHwgdmFsID09PSAncGF0aCcgfHwgdmFsID09PSAnQURCRSBWZWN0b3IgU2hhcGUnIHx8IHZhbCA9PT0gMikge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wYXRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgcHJvcC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQYXRoJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHBhdGg6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIGlmIChwcm9wLmspIHtcbiAgICAgICAgICAgICAgcHJvcC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNoYXBlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgICAgICAgIHByb3AuZ2V0VmFsdWUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9LFxuICAgICAgICBpeDoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5peFxuICAgICAgICB9LFxuICAgICAgICBwcm9wZXJ0eUluZGV4OiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLml4XG4gICAgICAgIH0sXG4gICAgICAgIG1uOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm1uXG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnR5R3JvdXA6IHtcbiAgICAgICAgICB2YWx1ZTogcHJvcGVydHlHcm91cFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBpdGVyYXRlRWxlbWVudHMoc2hhcGVzLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgYXJyID0gW107XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZXMgPyBzaGFwZXMubGVuZ3RoIDogMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzaGFwZXNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgICBhcnIucHVzaChncm91cEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZmwnKSB7XG4gICAgICAgICAgYXJyLnB1c2goZmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnc3QnKSB7XG4gICAgICAgICAgYXJyLnB1c2goc3Ryb2tlSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICd0bScpIHtcbiAgICAgICAgICBhcnIucHVzaCh0cmltSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICd0cicpIHsvLyBhcnIucHVzaCh0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSx2aWV3W2ldLHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdlbCcpIHtcbiAgICAgICAgICBhcnIucHVzaChlbGxpcHNlSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdzcicpIHtcbiAgICAgICAgICBhcnIucHVzaChzdGFySW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdzaCcpIHtcbiAgICAgICAgICBhcnIucHVzaChTaGFwZVBhdGhJbnRlcmZhY2Uoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAncmMnKSB7XG4gICAgICAgICAgYXJyLnB1c2gocmVjdEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAncmQnKSB7XG4gICAgICAgICAgYXJyLnB1c2gocm91bmRlZEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAncnAnKSB7XG4gICAgICAgICAgYXJyLnB1c2gocmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ2dmJykge1xuICAgICAgICAgIGFyci5wdXNoKGdyYWRpZW50RmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYXJyLnB1c2goZGVmYXVsdEludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb250ZW50c0ludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VzO1xuXG4gICAgICB2YXIgaW50ZXJmYWNlRnVuY3Rpb24gPSBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gaW50ZXJmYWNlcy5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoaW50ZXJmYWNlc1tpXS5fbmFtZSA9PT0gdmFsdWUgfHwgaW50ZXJmYWNlc1tpXS5tbiA9PT0gdmFsdWUgfHwgaW50ZXJmYWNlc1tpXS5wcm9wZXJ0eUluZGV4ID09PSB2YWx1ZSB8fCBpbnRlcmZhY2VzW2ldLml4ID09PSB2YWx1ZSB8fCBpbnRlcmZhY2VzW2ldLmluZCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VzW2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZXNbdmFsdWUgLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfTtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcbiAgICAgIGludGVyZmFjZXMgPSBpdGVyYXRlRWxlbWVudHMoc2hhcGUuaXQsIHZpZXcuaXQsIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXApO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubnVtUHJvcGVydGllcyA9IGludGVyZmFjZXMubGVuZ3RoO1xuICAgICAgdmFyIHRyYW5zZm9ybUludGVyZmFjZSA9IHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUuaXRbc2hhcGUuaXQubGVuZ3RoIC0gMV0sIHZpZXcuaXRbdmlldy5pdC5sZW5ndGggLSAxXSwgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1JbnRlcmZhY2U7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuY2l4O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24uX25hbWUgPSBzaGFwZS5ubTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBncm91cEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBzd2l0Y2ggKHZhbHVlKSB7XG4gICAgICAgICAgY2FzZSAnQURCRSBWZWN0b3JzIEdyb3VwJzpcbiAgICAgICAgICBjYXNlICdDb250ZW50cyc6XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQ7XG4gICAgICAgICAgLy8gTm90IG5lY2Vzc2FyeSBmb3Igbm93LiBLZWVwaW5nIHRoZW0gaGVyZSBpbiBjYXNlIGEgbmV3IGNhc2UgYXBwZWFyc1xuICAgICAgICAgIC8vIGNhc2UgJ0FEQkUgVmVjdG9yIFRyYW5zZm9ybSBHcm91cCc6XG4gICAgICAgICAgLy8gY2FzZSAzOlxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG4gICAgICB2YXIgY29udGVudCA9IGNvbnRlbnRzSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICB2YXIgdHJhbnNmb3JtSW50ZXJmYWNlID0gdHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeShzaGFwZS5pdFtzaGFwZS5pdC5sZW5ndGggLSAxXSwgdmlldy5pdFt2aWV3Lml0Lmxlbmd0aCAtIDFdLCBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24udHJhbnNmb3JtID0gdHJhbnNmb3JtSW50ZXJmYWNlO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGludGVyZmFjZUZ1bmN0aW9uLCAnX25hbWUnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIHJldHVybiBzaGFwZS5ubTtcbiAgICAgICAgfVxuICAgICAgfSk7IC8vIGludGVyZmFjZUZ1bmN0aW9uLmNvbnRlbnQgPSBpbnRlcmZhY2VGdW5jdGlvbjtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubnVtUHJvcGVydGllcyA9IHNoYXBlLm5wO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubm0gPSBzaGFwZS5ubTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnQ29sb3InIHx8IHZhbCA9PT0gJ2NvbG9yJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdPcGFjaXR5JyB8fCB2YWwgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5jKVxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9LFxuICAgICAgICBtbjoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5tblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZpZXcuYy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdDb2xvcicsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdyYWRpZW50RmlsbEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnU3RhcnQgUG9pbnQnIHx8IHZhbCA9PT0gJ3N0YXJ0IHBvaW50Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zdGFydFBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ0VuZCBQb2ludCcgfHwgdmFsID09PSAnZW5kIHBvaW50Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5lbmRQb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdPcGFjaXR5JyB8fCB2YWwgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHN0YXJ0UG9pbnQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnMpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZFBvaW50OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5lKVxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICB0eXBlOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2EnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfSxcbiAgICAgICAgbW46IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubW5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2aWV3LnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU3RhcnQgUG9pbnQnLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LmUuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnRW5kIFBvaW50JywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVmYXVsdEludGVyZmFjZUZhY3RvcnkoKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdHJva2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBfZGFzaFByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShkYXNoT2IsIF9wcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgZnVuY3Rpb24gYWRkUHJvcGVydHlUb0Rhc2hPYihpKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShkYXNoT2IsIHNoYXBlLmRbaV0ubm0sIHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmQuZGF0YVByb3BzW2ldLnApXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBzaGFwZS5kID8gc2hhcGUuZC5sZW5ndGggOiAwO1xuICAgICAgdmFyIGRhc2hPYiA9IHt9O1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYWRkUHJvcGVydHlUb0Rhc2hPYihpKTtcbiAgICAgICAgdmlldy5kLmRhdGFQcm9wc1tpXS5wLnNldEdyb3VwUHJvcGVydHkoX2Rhc2hQcm9wZXJ0eUdyb3VwKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdDb2xvcicgfHwgdmFsID09PSAnY29sb3InKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ09wYWNpdHknIHx8IHZhbCA9PT0gJ29wYWNpdHknKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSAnU3Ryb2tlIFdpZHRoJyB8fCB2YWwgPT09ICdzdHJva2Ugd2lkdGgnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnN0cm9rZVdpZHRoO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIGNvbG9yOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5jKVxuICAgICAgICB9LFxuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICBzdHJva2VXaWR0aDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudylcbiAgICAgICAgfSxcbiAgICAgICAgZGFzaDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGRhc2hPYjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH0sXG4gICAgICAgIG1uOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmlldy5jLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0NvbG9yJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTdHJva2UgV2lkdGgnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyaW1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gc2hhcGUuZS5peCB8fCB2YWwgPT09ICdFbmQnIHx8IHZhbCA9PT0gJ2VuZCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uZW5kO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gc2hhcGUucy5peCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zdGFydDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09IHNoYXBlLm8uaXgpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgdmlldy5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1N0YXJ0JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuZS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdFbmQnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09mZnNldCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cDtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5zKVxuICAgICAgICB9LFxuICAgICAgICBlbmQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmUpXG4gICAgICAgIH0sXG4gICAgICAgIG9mZnNldDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcubylcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5hLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0FuY2hvciBQb2ludCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uYW5jaG9yUG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuby5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdPcGFjaXR5Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vcGFjaXR5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnAuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnUG9zaXRpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnIuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnUm90YXRpb24nIHx8IHZhbHVlID09PSAnQURCRSBWZWN0b3IgUm90YXRpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnJvdGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnMuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnU2NhbGUnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNjYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnNrICYmIHNoYXBlLnNrLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1NrZXcnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNrZXc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuc2EgJiYgc2hhcGUuc2EuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnU2tldyBBeGlzJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5za2V3QXhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9zaXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLmEuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnQW5jaG9yIFBvaW50JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NjYWxlJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5yLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JvdGF0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcblxuICAgICAgaWYgKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zaykge1xuICAgICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2suc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2tldycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zYS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTa2V3IEFuZ2xlJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIH1cblxuICAgICAgdmlldy50cmFuc2Zvcm0ub3Auc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICBvcGFjaXR5OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLm8pXG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnApXG4gICAgICAgIH0sXG4gICAgICAgIGFuY2hvclBvaW50OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLmEpXG4gICAgICAgIH0sXG4gICAgICAgIHNjYWxlOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnMpXG4gICAgICAgIH0sXG4gICAgICAgIHJvdGF0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnIpXG4gICAgICAgIH0sXG4gICAgICAgIHNrZXc6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2spXG4gICAgICAgIH0sXG4gICAgICAgIHNrZXdBeGlzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy50cmFuc2Zvcm0ubVByb3BzLnNhKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnR5ID0gJ3RyJztcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cDtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlbGxpcHNlSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLnAuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnMuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNpemU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICB2YXIgcHJvcCA9IHZpZXcuc2gudHkgPT09ICd0bScgPyB2aWV3LnNoLnByb3AgOiB2aWV3LnNoO1xuICAgICAgcHJvcC5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NpemUnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1Bvc2l0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnMpXG4gICAgICAgIH0sXG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhckludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5wLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5yLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yb3RhdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5wdC5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucG9pbnRzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLm9yLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFN0YXIgT3V0ZXIgUmFkaXVzJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vdXRlclJhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5vcy5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3V0ZXJSb3VuZG5lc3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuaXIgJiYgKHNoYXBlLmlyLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFN0YXIgSW5uZXIgUmFkaXVzJykpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uaW5uZXJSYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuaXMgJiYgc2hhcGUuaXMuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmlubmVyUm91bmRuZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIHByb3AgPSB2aWV3LnNoLnR5ID09PSAndG0nID8gdmlldy5zaC5wcm9wIDogdmlldy5zaDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHByb3Aub3Iuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3V0ZXIgUmFkaXVzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3Aub3Muc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3V0ZXIgUm91bmRuZXNzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3AucHQuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9pbnRzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3AucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUm90YXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuXG4gICAgICBpZiAoc2hhcGUuaXIpIHtcbiAgICAgICAgcHJvcC5pci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdJbm5lciBSYWRpdXMnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgICBwcm9wLmlzLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0lubmVyIFJvdW5kbmVzcycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wKVxuICAgICAgICB9LFxuICAgICAgICByb3RhdGlvbjoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucilcbiAgICAgICAgfSxcbiAgICAgICAgcG9pbnRzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wdClcbiAgICAgICAgfSxcbiAgICAgICAgb3V0ZXJSYWRpdXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLm9yKVxuICAgICAgICB9LFxuICAgICAgICBvdXRlclJvdW5kbmVzczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3Aub3MpXG4gICAgICAgIH0sXG4gICAgICAgIGlubmVyUmFkaXVzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5pcilcbiAgICAgICAgfSxcbiAgICAgICAgaW5uZXJSb3VuZG5lc3M6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLmlzKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVjdEludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5wLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb3NpdGlvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5yLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yb3VuZG5lc3M7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUucy5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdTaXplJyB8fCB2YWx1ZSA9PT0gJ0FEQkUgVmVjdG9yIFJlY3QgU2l6ZScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBwcm9wID0gdmlldy5zaC50eSA9PT0gJ3RtJyA/IHZpZXcuc2gucHJvcCA6IHZpZXcuc2g7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBwcm9wLnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9zaXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5zLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NpemUnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5yLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JvdGF0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5wKVxuICAgICAgICB9LFxuICAgICAgICByb3VuZG5lc3M6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnIpXG4gICAgICAgIH0sXG4gICAgICAgIHNpemU6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnMpXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3VuZGVkSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLnIuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnUm91bmQgQ29ybmVycyAxJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5yYWRpdXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgcHJvcCA9IHZpZXc7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBwcm9wLnJkLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1JhZGl1cycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhpbnRlcmZhY2VGdW5jdGlvbiwge1xuICAgICAgICByYWRpdXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnJkKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUuYy5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdDb3BpZXMnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvcGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5vLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ09mZnNldCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIHByb3AgPSB2aWV3O1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgcHJvcC5jLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0NvcGllcycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT2Zmc2V0JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIGNvcGllczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AuYylcbiAgICAgICAgfSxcbiAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5vKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzaGFwZXMsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VzO1xuXG4gICAgICBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSB1bmRlZmluZWQgPyAxIDogdmFsdWU7XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wZXJ0eUdyb3VwO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VzW3ZhbHVlIC0gMV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBpbnRlcmZhY2VzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChpbnRlcmZhY2VzW2ldLl9uYW1lID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVyZmFjZXNbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHBhcmVudEdyb3VwV3JhcHBlcigpIHtcbiAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXA7XG4gICAgICB9XG5cbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoX2ludGVyZmFjZUZ1bmN0aW9uLCBwYXJlbnRHcm91cFdyYXBwZXIpO1xuICAgICAgaW50ZXJmYWNlcyA9IGl0ZXJhdGVFbGVtZW50cyhzaGFwZXMsIHZpZXcsIF9pbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5udW1Qcm9wZXJ0aWVzID0gaW50ZXJmYWNlcy5sZW5ndGg7XG4gICAgICBfaW50ZXJmYWNlRnVuY3Rpb24uX25hbWUgPSAnQ29udGVudHMnO1xuICAgICAgcmV0dXJuIF9pbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFRleHRFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIF9zb3VyY2VUZXh0O1xuXG4gICAgICBmdW5jdGlvbiBfdGhpc0xheWVyRnVuY3Rpb24obmFtZSkge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdBREJFIFRleHQgRG9jdW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbi5zb3VyY2VUZXh0O1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0xheWVyRnVuY3Rpb24sICdzb3VyY2VUZXh0Jywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICBlbGVtLnRleHRQcm9wZXJ0eS5nZXRWYWx1ZSgpO1xuICAgICAgICAgIHZhciBzdHJpbmdWYWx1ZSA9IGVsZW0udGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLnQ7XG5cbiAgICAgICAgICBpZiAoIV9zb3VyY2VUZXh0IHx8IHN0cmluZ1ZhbHVlICE9PSBfc291cmNlVGV4dC52YWx1ZSkge1xuICAgICAgICAgICAgX3NvdXJjZVRleHQgPSBuZXcgU3RyaW5nKHN0cmluZ1ZhbHVlKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcbiAgICAgICAgICAgIC8vIElmIHN0cmluZ1ZhbHVlIGlzIGFuIGVtcHR5IHN0cmluZywgZXZhbCByZXR1cm5zIHVuZGVmaW5lZCwgc28gaXQgaGFzIHRvIGJlIHJldHVybmVkIGFzIGEgU3RyaW5nIHByaW1pdGl2ZVxuXG4gICAgICAgICAgICBfc291cmNlVGV4dC52YWx1ZSA9IHN0cmluZ1ZhbHVlIHx8IG5ldyBTdHJpbmcoc3RyaW5nVmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3NvdXJjZVRleHQsICdzdHlsZScsIHtcbiAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgIGZpbGxDb2xvcjogZWxlbS50ZXh0UHJvcGVydHkuY3VycmVudERhdGEuZmNcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gX3NvdXJjZVRleHQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIF90aGlzTGF5ZXJGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2Yob2JqKTsgfVxuXG4gIHZhciBGb290YWdlSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeSA9IGZ1bmN0aW9uIG91dGxpbmVJbnRlcmZhY2VGYWN0b3J5KGVsZW0pIHtcbiAgICAgIHZhciBjdXJyZW50UHJvcGVydHlOYW1lID0gJyc7XG4gICAgICB2YXIgY3VycmVudFByb3BlcnR5ID0gZWxlbS5nZXRGb290YWdlRGF0YSgpO1xuXG4gICAgICBmdW5jdGlvbiBpbml0KCkge1xuICAgICAgICBjdXJyZW50UHJvcGVydHlOYW1lID0gJyc7XG4gICAgICAgIGN1cnJlbnRQcm9wZXJ0eSA9IGVsZW0uZ2V0Rm9vdGFnZURhdGEoKTtcbiAgICAgICAgcmV0dXJuIHNlYXJjaFByb3BlcnR5O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBzZWFyY2hQcm9wZXJ0eSh2YWx1ZSkge1xuICAgICAgICBpZiAoY3VycmVudFByb3BlcnR5W3ZhbHVlXSkge1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eU5hbWUgPSB2YWx1ZTtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50UHJvcGVydHlbdmFsdWVdO1xuXG4gICAgICAgICAgaWYgKF90eXBlb2YoY3VycmVudFByb3BlcnR5KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hQcm9wZXJ0eTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY3VycmVudFByb3BlcnR5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHByb3BlcnR5TmFtZUluZGV4ID0gdmFsdWUuaW5kZXhPZihjdXJyZW50UHJvcGVydHlOYW1lKTtcblxuICAgICAgICBpZiAocHJvcGVydHlOYW1lSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgdmFyIGluZGV4ID0gcGFyc2VJbnQodmFsdWUuc3Vic3RyKHByb3BlcnR5TmFtZUluZGV4ICsgY3VycmVudFByb3BlcnR5TmFtZS5sZW5ndGgpLCAxMCk7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5ID0gY3VycmVudFByb3BlcnR5W2luZGV4XTtcblxuICAgICAgICAgIGlmIChfdHlwZW9mKGN1cnJlbnRQcm9wZXJ0eSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICByZXR1cm4gc2VhcmNoUHJvcGVydHk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGN1cnJlbnRQcm9wZXJ0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGluaXQ7XG4gICAgfTtcblxuICAgIHZhciBkYXRhSW50ZXJmYWNlRmFjdG9yeSA9IGZ1bmN0aW9uIGRhdGFJbnRlcmZhY2VGYWN0b3J5KGVsZW0pIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gJ091dGxpbmUnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm91dGxpbmVJbnRlcmZhY2UoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5fbmFtZSA9ICdPdXRsaW5lJztcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm91dGxpbmVJbnRlcmZhY2UgPSBvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeShlbGVtKTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICBmdW5jdGlvbiBfaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnRGF0YScpIHtcbiAgICAgICAgICByZXR1cm4gX2ludGVyZmFjZUZ1bmN0aW9uLmRhdGFJbnRlcmZhY2U7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLl9uYW1lID0gJ0RhdGEnO1xuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLmRhdGFJbnRlcmZhY2UgPSBkYXRhSW50ZXJmYWNlRmFjdG9yeShlbGVtKTtcbiAgICAgIHJldHVybiBfaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBpbnRlcmZhY2VzID0ge1xuICAgIGxheWVyOiBMYXllckV4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgZWZmZWN0czogRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgY29tcDogQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UsXG4gICAgc2hhcGU6IFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICB0ZXh0OiBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICBmb290YWdlOiBGb290YWdlSW50ZXJmYWNlXG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0SW50ZXJmYWNlKHR5cGUpIHtcbiAgICByZXR1cm4gaW50ZXJmYWNlc1t0eXBlXSB8fCBudWxsO1xuICB9XG5cbiAgdmFyIGV4cHJlc3Npb25IZWxwZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIHNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEsIHByb3ApIHtcbiAgICAgIGlmIChkYXRhLngpIHtcbiAgICAgICAgcHJvcC5rID0gdHJ1ZTtcbiAgICAgICAgcHJvcC54ID0gdHJ1ZTtcbiAgICAgICAgcHJvcC5pbml0aWF0ZUV4cHJlc3Npb24gPSBFeHByZXNzaW9uTWFuYWdlci5pbml0aWF0ZUV4cHJlc3Npb247XG4gICAgICAgIHByb3AuZWZmZWN0c1NlcXVlbmNlLnB1c2gocHJvcC5pbml0aWF0ZUV4cHJlc3Npb24oZWxlbSwgZGF0YSwgcHJvcCkuYmluZChwcm9wKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0pIHtcbiAgICAgIGZyYW1lTnVtICo9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIGZyYW1lTnVtIC09IHRoaXMub2Zmc2V0VGltZTtcblxuICAgICAgaWYgKGZyYW1lTnVtICE9PSB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZSkge1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RJbmRleCA9IHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEZyYW1lIDwgZnJhbWVOdW0gPyB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RJbmRleCA6IDA7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUudmFsdWUgPSB0aGlzLmludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sIHRoaXMuX2NhY2hpbmdBdFRpbWUpO1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RGcmFtZSA9IGZyYW1lTnVtO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGluZ0F0VGltZS52YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTcGVlZEF0VGltZShmcmFtZU51bSkge1xuICAgICAgdmFyIGRlbHRhID0gLTAuMDE7XG4gICAgICB2YXIgdjEgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtKTtcbiAgICAgIHZhciB2MiA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0gKyBkZWx0YSk7XG4gICAgICB2YXIgc3BlZWQgPSAwO1xuXG4gICAgICBpZiAodjEubGVuZ3RoKSB7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2MS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIHNwZWVkICs9IE1hdGgucG93KHYyW2ldIC0gdjFbaV0sIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgc3BlZWQgPSBNYXRoLnNxcnQoc3BlZWQpICogMTAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BlZWQgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc3BlZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VmVsb2NpdHlBdFRpbWUoZnJhbWVOdW0pIHtcbiAgICAgIGlmICh0aGlzLnZlbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlbDtcbiAgICAgIH1cblxuICAgICAgdmFyIGRlbHRhID0gLTAuMDAxOyAvLyBmcmFtZU51bSArPSB0aGlzLmVsZW0uZGF0YS5zdDtcblxuICAgICAgdmFyIHYxID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmcmFtZU51bSk7XG4gICAgICB2YXIgdjIgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtICsgZGVsdGEpO1xuICAgICAgdmFyIHZlbG9jaXR5O1xuXG4gICAgICBpZiAodjEubGVuZ3RoKSB7XG4gICAgICAgIHZlbG9jaXR5ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIHYxLmxlbmd0aCk7XG4gICAgICAgIHZhciBpO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2MS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIC8vIHJlbW92aW5nIGZyYW1lUmF0ZVxuICAgICAgICAgIC8vIGlmIG5lZWRlZCwgZG9uJ3QgYWRkIGl0IGhlcmVcbiAgICAgICAgICAvLyB2ZWxvY2l0eVtpXSA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZSooKHYyW2ldIC0gdjFbaV0pL2RlbHRhKTtcbiAgICAgICAgICB2ZWxvY2l0eVtpXSA9ICh2MltpXSAtIHYxW2ldKSAvIGRlbHRhO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2ZWxvY2l0eSA9ICh2MiAtIHYxKSAvIGRlbHRhO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmVsb2NpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGljVmFsdWVBdFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRHcm91cFByb3BlcnR5KHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHRoaXMucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNlYXJjaEV4cHJlc3Npb25zOiBzZWFyY2hFeHByZXNzaW9ucyxcbiAgICAgIGdldFNwZWVkQXRUaW1lOiBnZXRTcGVlZEF0VGltZSxcbiAgICAgIGdldFZlbG9jaXR5QXRUaW1lOiBnZXRWZWxvY2l0eUF0VGltZSxcbiAgICAgIGdldFZhbHVlQXRUaW1lOiBnZXRWYWx1ZUF0VGltZSxcbiAgICAgIGdldFN0YXRpY1ZhbHVlQXRUaW1lOiBnZXRTdGF0aWNWYWx1ZUF0VGltZSxcbiAgICAgIHNldEdyb3VwUHJvcGVydHk6IHNldEdyb3VwUHJvcGVydHlcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gYWRkUHJvcGVydHlEZWNvcmF0b3IoKSB7XG4gICAgZnVuY3Rpb24gbG9vcE91dCh0eXBlLCBkdXJhdGlvbiwgZHVyYXRpb25GbGFnKSB7XG4gICAgICBpZiAoIXRoaXMuayB8fCAhdGhpcy5rZXlmcmFtZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlID8gdHlwZS50b0xvd2VyQ2FzZSgpIDogJyc7XG4gICAgICB2YXIgY3VycmVudEZyYW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWU7XG4gICAgICB2YXIga2V5ZnJhbWVzID0gdGhpcy5rZXlmcmFtZXM7XG4gICAgICB2YXIgbGFzdEtleUZyYW1lID0ga2V5ZnJhbWVzW2tleWZyYW1lcy5sZW5ndGggLSAxXS50O1xuXG4gICAgICBpZiAoY3VycmVudEZyYW1lIDw9IGxhc3RLZXlGcmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN5Y2xlRHVyYXRpb247XG4gICAgICB2YXIgZmlyc3RLZXlGcmFtZTtcblxuICAgICAgaWYgKCFkdXJhdGlvbkZsYWcpIHtcbiAgICAgICAgaWYgKCFkdXJhdGlvbiB8fCBkdXJhdGlvbiA+IGtleWZyYW1lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgZHVyYXRpb24gPSBrZXlmcmFtZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpcnN0S2V5RnJhbWUgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDEgLSBkdXJhdGlvbl0udDtcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGxhc3RLZXlGcmFtZSAtIGZpcnN0S2V5RnJhbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgY3ljbGVEdXJhdGlvbiA9IE1hdGgubWF4KDAsIGxhc3RLZXlGcmFtZSAtIHRoaXMuZWxlbS5kYXRhLmlwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjeWNsZUR1cmF0aW9uID0gTWF0aC5hYnMobGFzdEtleUZyYW1lIC0gdGhpcy5lbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUgKiBkdXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBmaXJzdEtleUZyYW1lID0gbGFzdEtleUZyYW1lIC0gY3ljbGVEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuICAgICAgdmFyIHJldDtcblxuICAgICAgaWYgKHR5cGUgPT09ICdwaW5ncG9uZycpIHtcbiAgICAgICAgdmFyIGl0ZXJhdGlvbnMgPSBNYXRoLmZsb29yKChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAvIGN5Y2xlRHVyYXRpb24pO1xuXG4gICAgICAgIGlmIChpdGVyYXRpb25zICUgMiAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uIC0gKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvZmZzZXQnKSB7XG4gICAgICAgIHZhciBpbml0ViA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZmlyc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBlbmRWID0gdGhpcy5nZXRWYWx1ZUF0VGltZShsYXN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcblxuICAgICAgICB2YXIgcmVwZWF0cyA9IE1hdGguZmxvb3IoKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGluaXRWLmxlbmd0aCk7XG4gICAgICAgICAgbGVuID0gcmV0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcmV0W2ldID0gKGVuZFZbaV0gLSBpbml0VltpXSkgKiByZXBlYXRzICsgY3VycmVudFtpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChlbmRWIC0gaW5pdFYpICogcmVwZWF0cyArIGN1cnJlbnQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdjb250aW51ZScpIHtcbiAgICAgICAgdmFyIGxhc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUobGFzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIG5leHRMYXN0VmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKChsYXN0S2V5RnJhbWUgLSAwLjAwMSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IG5ldyBBcnJheShsYXN0VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICBsZW4gPSByZXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICByZXRbaV0gPSBsYXN0VmFsdWVbaV0gKyAobGFzdFZhbHVlW2ldIC0gbmV4dExhc3RWYWx1ZVtpXSkgKiAoKGN1cnJlbnRGcmFtZSAtIGxhc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUpIC8gMC4wMDA1OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsYXN0VmFsdWUgKyAobGFzdFZhbHVlIC0gbmV4dExhc3RWYWx1ZSkgKiAoKGN1cnJlbnRGcmFtZSAtIGxhc3RLZXlGcmFtZSkgLyAwLjAwMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlQXRUaW1lKCgoY3VycmVudEZyYW1lIC0gZmlyc3RLZXlGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9vcEluKHR5cGUsIGR1cmF0aW9uLCBkdXJhdGlvbkZsYWcpIHtcbiAgICAgIGlmICghdGhpcy5rKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB0eXBlID0gdHlwZSA/IHR5cGUudG9Mb3dlckNhc2UoKSA6ICcnO1xuICAgICAgdmFyIGN1cnJlbnRGcmFtZSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lO1xuICAgICAgdmFyIGtleWZyYW1lcyA9IHRoaXMua2V5ZnJhbWVzO1xuICAgICAgdmFyIGZpcnN0S2V5RnJhbWUgPSBrZXlmcmFtZXNbMF0udDtcblxuICAgICAgaWYgKGN1cnJlbnRGcmFtZSA+PSBmaXJzdEtleUZyYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB2YXIgY3ljbGVEdXJhdGlvbjtcbiAgICAgIHZhciBsYXN0S2V5RnJhbWU7XG5cbiAgICAgIGlmICghZHVyYXRpb25GbGFnKSB7XG4gICAgICAgIGlmICghZHVyYXRpb24gfHwgZHVyYXRpb24gPiBrZXlmcmFtZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGR1cmF0aW9uID0ga2V5ZnJhbWVzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0S2V5RnJhbWUgPSBrZXlmcmFtZXNbZHVyYXRpb25dLnQ7XG4gICAgICAgIGN5Y2xlRHVyYXRpb24gPSBsYXN0S2V5RnJhbWUgLSBmaXJzdEtleUZyYW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBNYXRoLm1heCgwLCB0aGlzLmVsZW0uZGF0YS5vcCAtIGZpcnN0S2V5RnJhbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBNYXRoLmFicyh0aGlzLmVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSAqIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RLZXlGcmFtZSA9IGZpcnN0S2V5RnJhbWUgKyBjeWNsZUR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgcmV0O1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ3Bpbmdwb25nJykge1xuICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IE1hdGguZmxvb3IoKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgJSAyID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnb2Zmc2V0Jykge1xuICAgICAgICB2YXIgaW5pdFYgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZpcnN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgZW5kViA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUobGFzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSB0aGlzLmdldFZhbHVlQXRUaW1lKChjeWNsZUR1cmF0aW9uIC0gKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIHJlcGVhdHMgPSBNYXRoLmZsb29yKChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAvIGN5Y2xlRHVyYXRpb24pICsgMTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoaW5pdFYubGVuZ3RoKTtcbiAgICAgICAgICBsZW4gPSByZXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICByZXRbaV0gPSBjdXJyZW50W2ldIC0gKGVuZFZbaV0gLSBpbml0VltpXSkgKiByZXBlYXRzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY3VycmVudCAtIChlbmRWIC0gaW5pdFYpICogcmVwZWF0cztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NvbnRpbnVlJykge1xuICAgICAgICB2YXIgZmlyc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZmlyc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBuZXh0Rmlyc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGZpcnN0S2V5RnJhbWUgKyAwLjAwMSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IG5ldyBBcnJheShmaXJzdFZhbHVlLmxlbmd0aCk7XG4gICAgICAgICAgbGVuID0gcmV0Lmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgcmV0W2ldID0gZmlyc3RWYWx1ZVtpXSArIChmaXJzdFZhbHVlW2ldIC0gbmV4dEZpcnN0VmFsdWVbaV0pICogKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpIC8gMC4wMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmaXJzdFZhbHVlICsgKGZpcnN0VmFsdWUgLSBuZXh0Rmlyc3RWYWx1ZSkgKiAoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgLyAwLjAwMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGN5Y2xlRHVyYXRpb24gLSAoKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzbW9vdGgod2lkdGgsIHNhbXBsZXMpIHtcbiAgICAgIGlmICghdGhpcy5rKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB3aWR0aCA9ICh3aWR0aCB8fCAwLjQpICogMC41O1xuICAgICAgc2FtcGxlcyA9IE1hdGguZmxvb3Ioc2FtcGxlcyB8fCA1KTtcblxuICAgICAgaWYgKHNhbXBsZXMgPD0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdmFyIGN1cnJlbnRUaW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICB2YXIgaW5pdEZyYW1lID0gY3VycmVudFRpbWUgLSB3aWR0aDtcbiAgICAgIHZhciBlbmRGcmFtZSA9IGN1cnJlbnRUaW1lICsgd2lkdGg7XG4gICAgICB2YXIgc2FtcGxlRnJlcXVlbmN5ID0gc2FtcGxlcyA+IDEgPyAoZW5kRnJhbWUgLSBpbml0RnJhbWUpIC8gKHNhbXBsZXMgLSAxKSA6IDE7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgaiA9IDA7XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCB0aGlzLnB2Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICB9XG5cbiAgICAgIHZhciBzYW1wbGVWYWx1ZTtcblxuICAgICAgd2hpbGUgKGkgPCBzYW1wbGVzKSB7XG4gICAgICAgIHNhbXBsZVZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZShpbml0RnJhbWUgKyBpICogc2FtcGxlRnJlcXVlbmN5KTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5wdi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgdmFsdWVbal0gKz0gc2FtcGxlVmFsdWVbal07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbHVlICs9IHNhbXBsZVZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXMucHYubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICB2YWx1ZVtqXSAvPSBzYW1wbGVzO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSAvPSBzYW1wbGVzO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtVmFsdWVBdFRpbWUodGltZSkge1xuICAgICAgaWYgKCF0aGlzLl90cmFuc2Zvcm1DYWNoaW5nQXRUaW1lKSB7XG4gICAgICAgIHRoaXMuX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUgPSB7XG4gICAgICAgICAgdjogbmV3IE1hdHJpeCgpXG4gICAgICAgIH07XG4gICAgICB9IC8vLyAvXG5cblxuICAgICAgdmFyIG1hdHJpeCA9IHRoaXMuX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUudjtcbiAgICAgIG1hdHJpeC5jbG9uZUZyb21Qcm9wcyh0aGlzLnByZS5wcm9wcyk7XG5cbiAgICAgIGlmICh0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAxKSB7XG4gICAgICAgIHZhciBhbmNob3IgPSB0aGlzLmEuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC50cmFuc2xhdGUoLWFuY2hvclswXSAqIHRoaXMuYS5tdWx0LCAtYW5jaG9yWzFdICogdGhpcy5hLm11bHQsIGFuY2hvclsyXSAqIHRoaXMuYS5tdWx0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDIpIHtcbiAgICAgICAgdmFyIHNjYWxlID0gdGhpcy5zLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXguc2NhbGUoc2NhbGVbMF0gKiB0aGlzLnMubXVsdCwgc2NhbGVbMV0gKiB0aGlzLnMubXVsdCwgc2NhbGVbMl0gKiB0aGlzLnMubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNrICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDMpIHtcbiAgICAgICAgdmFyIHNrZXcgPSB0aGlzLnNrLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgc2tld0F4aXMgPSB0aGlzLnNhLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXguc2tld0Zyb21BeGlzKC1za2V3ICogdGhpcy5zay5tdWx0LCBza2V3QXhpcyAqIHRoaXMuc2EubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnIgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgNCkge1xuICAgICAgICB2YXIgcm90YXRpb24gPSB0aGlzLnIuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC5yb3RhdGUoLXJvdGF0aW9uICogdGhpcy5yLm11bHQpO1xuICAgICAgfSBlbHNlIGlmICghdGhpcy5yICYmIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDQpIHtcbiAgICAgICAgdmFyIHJvdGF0aW9uWiA9IHRoaXMucnouZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIHZhciByb3RhdGlvblkgPSB0aGlzLnJ5LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgcm90YXRpb25YID0gdGhpcy5yeC5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgdmFyIG9yaWVudGF0aW9uID0gdGhpcy5vci5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnJvdGF0ZVooLXJvdGF0aW9uWiAqIHRoaXMucnoubXVsdCkucm90YXRlWShyb3RhdGlvblkgKiB0aGlzLnJ5Lm11bHQpLnJvdGF0ZVgocm90YXRpb25YICogdGhpcy5yeC5tdWx0KS5yb3RhdGVaKC1vcmllbnRhdGlvblsyXSAqIHRoaXMub3IubXVsdCkucm90YXRlWShvcmllbnRhdGlvblsxXSAqIHRoaXMub3IubXVsdCkucm90YXRlWChvcmllbnRhdGlvblswXSAqIHRoaXMub3IubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmRhdGEucCAmJiB0aGlzLmRhdGEucC5zKSB7XG4gICAgICAgIHZhciBwb3NpdGlvblggPSB0aGlzLnB4LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgcG9zaXRpb25ZID0gdGhpcy5weS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhLnAueikge1xuICAgICAgICAgIHZhciBwb3NpdGlvblogPSB0aGlzLnB6LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICAgIG1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25YICogdGhpcy5weC5tdWx0LCBwb3NpdGlvblkgKiB0aGlzLnB5Lm11bHQsIC1wb3NpdGlvblogKiB0aGlzLnB6Lm11bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25YICogdGhpcy5weC5tdWx0LCBwb3NpdGlvblkgKiB0aGlzLnB5Lm11bHQsIDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcG9zaXRpb24gPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25bMF0gKiB0aGlzLnAubXVsdCwgcG9zaXRpb25bMV0gKiB0aGlzLnAubXVsdCwgLXBvc2l0aW9uWzJdICogdGhpcy5wLm11bHQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWF0cml4OyAvLy8gL1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lKCkge1xuICAgICAgcmV0dXJuIHRoaXMudi5jbG9uZShuZXcgTWF0cml4KCkpO1xuICAgIH1cblxuICAgIHZhciBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eSA9IFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eTtcblxuICAgIFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eSA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICAgIHZhciBwcm9wID0gZ2V0VHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YSwgY29udGFpbmVyKTtcblxuICAgICAgaWYgKHByb3AuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHByb3AuZ2V0VmFsdWVBdFRpbWUgPSBnZXRUcmFuc2Zvcm1WYWx1ZUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcC5nZXRWYWx1ZUF0VGltZSA9IGdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHByb3Auc2V0R3JvdXBQcm9wZXJ0eSA9IGV4cHJlc3Npb25IZWxwZXJzLnNldEdyb3VwUHJvcGVydHk7XG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9O1xuXG4gICAgdmFyIHByb3BlcnR5R2V0UHJvcCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wO1xuXG4gICAgUHJvcGVydHlGYWN0b3J5LmdldFByb3AgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSwgdHlwZSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BlcnR5R2V0UHJvcChlbGVtLCBkYXRhLCB0eXBlLCBtdWx0LCBjb250YWluZXIpOyAvLyBwcm9wLmdldFZlbG9jaXR5QXRUaW1lID0gZ2V0VmVsb2NpdHlBdFRpbWU7XG4gICAgICAvLyBwcm9wLmxvb3BPdXQgPSBsb29wT3V0O1xuICAgICAgLy8gcHJvcC5sb29wSW4gPSBsb29wSW47XG5cbiAgICAgIGlmIChwcm9wLmtmKSB7XG4gICAgICAgIHByb3AuZ2V0VmFsdWVBdFRpbWUgPSBleHByZXNzaW9uSGVscGVycy5nZXRWYWx1ZUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvcC5nZXRWYWx1ZUF0VGltZSA9IGV4cHJlc3Npb25IZWxwZXJzLmdldFN0YXRpY1ZhbHVlQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHByb3Auc2V0R3JvdXBQcm9wZXJ0eSA9IGV4cHJlc3Npb25IZWxwZXJzLnNldEdyb3VwUHJvcGVydHk7XG4gICAgICBwcm9wLmxvb3BPdXQgPSBsb29wT3V0O1xuICAgICAgcHJvcC5sb29wSW4gPSBsb29wSW47XG4gICAgICBwcm9wLnNtb290aCA9IHNtb290aDtcbiAgICAgIHByb3AuZ2V0VmVsb2NpdHlBdFRpbWUgPSBleHByZXNzaW9uSGVscGVycy5nZXRWZWxvY2l0eUF0VGltZS5iaW5kKHByb3ApO1xuICAgICAgcHJvcC5nZXRTcGVlZEF0VGltZSA9IGV4cHJlc3Npb25IZWxwZXJzLmdldFNwZWVkQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICBwcm9wLm51bUtleXMgPSBkYXRhLmEgPT09IDEgPyBkYXRhLmsubGVuZ3RoIDogMDtcbiAgICAgIHByb3AucHJvcGVydHlJbmRleCA9IGRhdGEuaXg7XG4gICAgICB2YXIgdmFsdWUgPSAwO1xuXG4gICAgICBpZiAodHlwZSAhPT0gMCkge1xuICAgICAgICB2YWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBkYXRhLmEgPT09IDEgPyBkYXRhLmtbMF0ucy5sZW5ndGggOiBkYXRhLmsubGVuZ3RoKTtcbiAgICAgIH1cblxuICAgICAgcHJvcC5fY2FjaGluZ0F0VGltZSA9IHtcbiAgICAgICAgbGFzdEZyYW1lOiBpbml0aWFsRGVmYXVsdEZyYW1lLFxuICAgICAgICBsYXN0SW5kZXg6IDAsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICAgIGV4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEsIHByb3ApO1xuXG4gICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgIGNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRTaGFwZVZhbHVlQXRUaW1lKGZyYW1lTnVtKSB7XG4gICAgICAvLyBGb3Igbm93IHRoaXMgY2FjaGluZyBvYmplY3QgaXMgY3JlYXRlZCBvbmx5IHdoZW4gbmVlZGVkIGluc3RlYWQgb2YgY3JlYXRpbmcgaXQgd2hlbiB0aGUgc2hhcGUgaXMgaW5pdGlhbGl6ZWQuXG4gICAgICBpZiAoIXRoaXMuX2NhY2hpbmdBdFRpbWUpIHtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZSA9IHtcbiAgICAgICAgICBzaGFwZVZhbHVlOiBzaGFwZVBvb2wuY2xvbmUodGhpcy5wdiksXG4gICAgICAgICAgbGFzdEluZGV4OiAwLFxuICAgICAgICAgIGxhc3RUaW1lOiBpbml0aWFsRGVmYXVsdEZyYW1lXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGZyYW1lTnVtICo9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIGZyYW1lTnVtIC09IHRoaXMub2Zmc2V0VGltZTtcblxuICAgICAgaWYgKGZyYW1lTnVtICE9PSB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lKSB7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEluZGV4ID0gdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0VGltZSA8IGZyYW1lTnVtID8gdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggOiAwO1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lID0gZnJhbWVOdW07XG4gICAgICAgIHRoaXMuaW50ZXJwb2xhdGVTaGFwZShmcmFtZU51bSwgdGhpcy5fY2FjaGluZ0F0VGltZS5zaGFwZVZhbHVlLCB0aGlzLl9jYWNoaW5nQXRUaW1lKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2NhY2hpbmdBdFRpbWUuc2hhcGVWYWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24gPSBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRDb25zdHJ1Y3RvckZ1bmN0aW9uKCk7XG4gICAgdmFyIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbigpO1xuXG4gICAgZnVuY3Rpb24gU2hhcGVFeHByZXNzaW9ucygpIHt9XG5cbiAgICBTaGFwZUV4cHJlc3Npb25zLnByb3RvdHlwZSA9IHtcbiAgICAgIHZlcnRpY2VzOiBmdW5jdGlvbiB2ZXJ0aWNlcyhwcm9wLCB0aW1lKSB7XG4gICAgICAgIGlmICh0aGlzLmspIHtcbiAgICAgICAgICB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hhcGVQYXRoID0gdGhpcy52O1xuXG4gICAgICAgIGlmICh0aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzaGFwZVBhdGggPSB0aGlzLmdldFZhbHVlQXRUaW1lKHRpbWUsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSBzaGFwZVBhdGguX2xlbmd0aDtcbiAgICAgICAgdmFyIHZlcnRpY2VzID0gc2hhcGVQYXRoW3Byb3BdO1xuICAgICAgICB2YXIgcG9pbnRzID0gc2hhcGVQYXRoLnY7XG4gICAgICAgIHZhciBhcnIgPSBjcmVhdGVTaXplZEFycmF5KGxlbik7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHByb3AgPT09ICdpJyB8fCBwcm9wID09PSAnbycpIHtcbiAgICAgICAgICAgIGFycltpXSA9IFt2ZXJ0aWNlc1tpXVswXSAtIHBvaW50c1tpXVswXSwgdmVydGljZXNbaV1bMV0gLSBwb2ludHNbaV1bMV1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhcnJbaV0gPSBbdmVydGljZXNbaV1bMF0sIHZlcnRpY2VzW2ldWzFdXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIHBvaW50czogZnVuY3Rpb24gcG9pbnRzKHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMoJ3YnLCB0aW1lKTtcbiAgICAgIH0sXG4gICAgICBpblRhbmdlbnRzOiBmdW5jdGlvbiBpblRhbmdlbnRzKHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMoJ2knLCB0aW1lKTtcbiAgICAgIH0sXG4gICAgICBvdXRUYW5nZW50czogZnVuY3Rpb24gb3V0VGFuZ2VudHModGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcygnbycsIHRpbWUpO1xuICAgICAgfSxcbiAgICAgIGlzQ2xvc2VkOiBmdW5jdGlvbiBpc0Nsb3NlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudi5jO1xuICAgICAgfSxcbiAgICAgIHBvaW50T25QYXRoOiBmdW5jdGlvbiBwb2ludE9uUGF0aChwZXJjLCB0aW1lKSB7XG4gICAgICAgIHZhciBzaGFwZVBhdGggPSB0aGlzLnY7XG5cbiAgICAgICAgaWYgKHRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNoYXBlUGF0aCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX3NlZ21lbnRzTGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fc2VnbWVudHNMZW5ndGggPSBiZXouZ2V0U2VnbWVudHNMZW5ndGgoc2hhcGVQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWdtZW50c0xlbmd0aCA9IHRoaXMuX3NlZ21lbnRzTGVuZ3RoO1xuICAgICAgICB2YXIgbGVuZ3RocyA9IHNlZ21lbnRzTGVuZ3RoLmxlbmd0aHM7XG4gICAgICAgIHZhciBsZW5ndGhQb3MgPSBzZWdtZW50c0xlbmd0aC50b3RhbExlbmd0aCAqIHBlcmM7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IGxlbmd0aHMubGVuZ3RoO1xuICAgICAgICB2YXIgYWNjdW11bGF0ZWRMZW5ndGggPSAwO1xuICAgICAgICB2YXIgcHQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAoYWNjdW11bGF0ZWRMZW5ndGggKyBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoID4gbGVuZ3RoUG9zKSB7XG4gICAgICAgICAgICB2YXIgaW5pdEluZGV4ID0gaTtcbiAgICAgICAgICAgIHZhciBlbmRJbmRleCA9IHNoYXBlUGF0aC5jICYmIGkgPT09IGxlbiAtIDEgPyAwIDogaSArIDE7XG4gICAgICAgICAgICB2YXIgc2VnbWVudFBlcmMgPSAobGVuZ3RoUG9zIC0gYWNjdW11bGF0ZWRMZW5ndGgpIC8gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgICAgICAgIHB0ID0gYmV6LmdldFBvaW50SW5TZWdtZW50KHNoYXBlUGF0aC52W2luaXRJbmRleF0sIHNoYXBlUGF0aC52W2VuZEluZGV4XSwgc2hhcGVQYXRoLm9baW5pdEluZGV4XSwgc2hhcGVQYXRoLmlbZW5kSW5kZXhdLCBzZWdtZW50UGVyYywgbGVuZ3Roc1tpXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjdW11bGF0ZWRMZW5ndGggKz0gbGVuZ3Roc1tpXS5hZGRlZExlbmd0aDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXB0KSB7XG4gICAgICAgICAgcHQgPSBzaGFwZVBhdGguYyA/IFtzaGFwZVBhdGgudlswXVswXSwgc2hhcGVQYXRoLnZbMF1bMV1dIDogW3NoYXBlUGF0aC52W3NoYXBlUGF0aC5fbGVuZ3RoIC0gMV1bMF0sIHNoYXBlUGF0aC52W3NoYXBlUGF0aC5fbGVuZ3RoIC0gMV1bMV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHB0O1xuICAgICAgfSxcbiAgICAgIHZlY3Rvck9uUGF0aDogZnVuY3Rpb24gdmVjdG9yT25QYXRoKHBlcmMsIHRpbWUsIHZlY3RvclR5cGUpIHtcbiAgICAgICAgLy8gcGVyYyBkb2Vzbid0IHVzZSB0cmlwbGUgZXF1YWxpdHkgYmVjYXVzZSBpdCBjYW4gYmUgYSBOdW1iZXIgb2JqZWN0IGFzIHdlbGwgYXMgYSBwcmltaXRpdmUuXG4gICAgICAgIGlmIChwZXJjID09IDEpIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgIHBlcmMgPSB0aGlzLnYuYztcbiAgICAgICAgfSBlbHNlIGlmIChwZXJjID09IDApIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICAgIHBlcmMgPSAwLjk5OTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwdDEgPSB0aGlzLnBvaW50T25QYXRoKHBlcmMsIHRpbWUpO1xuICAgICAgICB2YXIgcHQyID0gdGhpcy5wb2ludE9uUGF0aChwZXJjICsgMC4wMDEsIHRpbWUpO1xuICAgICAgICB2YXIgeExlbmd0aCA9IHB0MlswXSAtIHB0MVswXTtcbiAgICAgICAgdmFyIHlMZW5ndGggPSBwdDJbMV0gLSBwdDFbMV07XG4gICAgICAgIHZhciBtYWduaXR1ZGUgPSBNYXRoLnNxcnQoTWF0aC5wb3coeExlbmd0aCwgMikgKyBNYXRoLnBvdyh5TGVuZ3RoLCAyKSk7XG5cbiAgICAgICAgaWYgKG1hZ25pdHVkZSA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBbMCwgMF07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdW5pdFZlY3RvciA9IHZlY3RvclR5cGUgPT09ICd0YW5nZW50JyA/IFt4TGVuZ3RoIC8gbWFnbml0dWRlLCB5TGVuZ3RoIC8gbWFnbml0dWRlXSA6IFsteUxlbmd0aCAvIG1hZ25pdHVkZSwgeExlbmd0aCAvIG1hZ25pdHVkZV07XG4gICAgICAgIHJldHVybiB1bml0VmVjdG9yO1xuICAgICAgfSxcbiAgICAgIHRhbmdlbnRPblBhdGg6IGZ1bmN0aW9uIHRhbmdlbnRPblBhdGgocGVyYywgdGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZWN0b3JPblBhdGgocGVyYywgdGltZSwgJ3RhbmdlbnQnKTtcbiAgICAgIH0sXG4gICAgICBub3JtYWxPblBhdGg6IGZ1bmN0aW9uIG5vcm1hbE9uUGF0aChwZXJjLCB0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY3Rvck9uUGF0aChwZXJjLCB0aW1lLCAnbm9ybWFsJyk7XG4gICAgICB9LFxuICAgICAgc2V0R3JvdXBQcm9wZXJ0eTogZXhwcmVzc2lvbkhlbHBlcnMuc2V0R3JvdXBQcm9wZXJ0eSxcbiAgICAgIGdldFZhbHVlQXRUaW1lOiBleHByZXNzaW9uSGVscGVycy5nZXRTdGF0aWNWYWx1ZUF0VGltZVxuICAgIH07XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZUV4cHJlc3Npb25zXSwgU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24pO1xuICAgIGV4dGVuZFByb3RvdHlwZShbU2hhcGVFeHByZXNzaW9uc10sIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uKTtcbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbi5wcm90b3R5cGUuZ2V0VmFsdWVBdFRpbWUgPSBnZXRTaGFwZVZhbHVlQXRUaW1lO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uLnByb3RvdHlwZS5pbml0aWF0ZUV4cHJlc3Npb24gPSBFeHByZXNzaW9uTWFuYWdlci5pbml0aWF0ZUV4cHJlc3Npb247XG4gICAgdmFyIHByb3BlcnR5R2V0U2hhcGVQcm9wID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wO1xuXG4gICAgU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEsIHR5cGUsIGFyciwgdHJpbXMpIHtcbiAgICAgIHZhciBwcm9wID0gcHJvcGVydHlHZXRTaGFwZVByb3AoZWxlbSwgZGF0YSwgdHlwZSwgYXJyLCB0cmltcyk7XG4gICAgICBwcm9wLnByb3BlcnR5SW5kZXggPSBkYXRhLml4O1xuICAgICAgcHJvcC5sb2NrID0gZmFsc2U7XG5cbiAgICAgIGlmICh0eXBlID09PSAzKSB7XG4gICAgICAgIGV4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEucHQsIHByb3ApO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA0KSB7XG4gICAgICAgIGV4cHJlc3Npb25IZWxwZXJzLnNlYXJjaEV4cHJlc3Npb25zKGVsZW0sIGRhdGEua3MsIHByb3ApO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgIGVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSQxKCkge1xuICAgIGFkZFByb3BlcnR5RGVjb3JhdG9yKCk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGREZWNvcmF0b3IoKSB7XG4gICAgZnVuY3Rpb24gc2VhcmNoRXhwcmVzc2lvbnMoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLmQueCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUV4cHJlc3Npb24gPSBFeHByZXNzaW9uTWFuYWdlci5pbml0aWF0ZUV4cHJlc3Npb24uYmluZCh0aGlzKSh0aGlzLmVsZW0sIHRoaXMuZGF0YS5kLCB0aGlzKTtcbiAgICAgICAgdGhpcy5hZGRFZmZlY3QodGhpcy5nZXRFeHByZXNzaW9uVmFsdWUuYmluZCh0aGlzKSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmdldEV4cHJlc3Npb25WYWx1ZSA9IGZ1bmN0aW9uIChjdXJyZW50VmFsdWUsIHRleHQpIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IHRoaXMuY2FsY3VsYXRlRXhwcmVzc2lvbih0ZXh0KTtcblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZS50ICE9PSBuZXdWYWx1ZSkge1xuICAgICAgICB2YXIgbmV3RGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmNvcHlEYXRhKG5ld0RhdGEsIGN1cnJlbnRWYWx1ZSk7XG4gICAgICAgIG5ld0RhdGEudCA9IG5ld1ZhbHVlLnRvU3RyaW5nKCk7XG4gICAgICAgIG5ld0RhdGEuX19jb21wbGV0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGN1cnJlbnRWYWx1ZTtcbiAgICB9O1xuXG4gICAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBpc0tleWZyYW1lZCA9IHRoaXMuc2VhcmNoS2V5ZnJhbWVzKCk7XG4gICAgICB2YXIgaGFzRXhwcmVzc2lvbnMgPSB0aGlzLnNlYXJjaEV4cHJlc3Npb25zKCk7XG4gICAgICB0aGlzLmtmID0gaXNLZXlmcmFtZWQgfHwgaGFzRXhwcmVzc2lvbnM7XG4gICAgICByZXR1cm4gdGhpcy5rZjtcbiAgICB9O1xuXG4gICAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hFeHByZXNzaW9ucyA9IHNlYXJjaEV4cHJlc3Npb25zO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICBhZGREZWNvcmF0b3IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNWR0NvbXBvc2FibGVFZmZlY3QoKSB7fVxuXG4gIFNWR0NvbXBvc2FibGVFZmZlY3QucHJvdG90eXBlID0ge1xuICAgIGNyZWF0ZU1lcmdlTm9kZTogZnVuY3Rpb24gY3JlYXRlTWVyZ2VOb2RlKHJlc3VsdElkLCBpbnMpIHtcbiAgICAgIHZhciBmZU1lcmdlID0gY3JlYXRlTlMoJ2ZlTWVyZ2UnKTtcbiAgICAgIGZlTWVyZ2Uuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCByZXN1bHRJZCk7XG4gICAgICB2YXIgZmVNZXJnZU5vZGU7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGlucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBmZU1lcmdlTm9kZSA9IGNyZWF0ZU5TKCdmZU1lcmdlTm9kZScpO1xuICAgICAgICBmZU1lcmdlTm9kZS5zZXRBdHRyaWJ1dGUoJ2luJywgaW5zW2ldKTtcbiAgICAgICAgZmVNZXJnZS5hcHBlbmRDaGlsZChmZU1lcmdlTm9kZSk7XG4gICAgICAgIGZlTWVyZ2UuYXBwZW5kQ2hpbGQoZmVNZXJnZU5vZGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZmVNZXJnZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpbmVhckZpbHRlclZhbHVlID0gJzAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAgMCAwJztcblxuICBmdW5jdGlvbiBTVkdUaW50RmlsdGVyKGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQsIHNvdXJjZSkge1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnbGluZWFyUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIGxpbmVhckZpbHRlclZhbHVlICsgJyAxIDAnKTtcbiAgICB0aGlzLmxpbmVhckZpbHRlciA9IGZlQ29sb3JNYXRyaXg7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ190aW50XzEnKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7XG4gICAgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAgMCAwIDAgMCAxIDAnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX3RpbnRfMicpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTtcbiAgICB0aGlzLm1hdHJpeEZpbHRlciA9IGZlQ29sb3JNYXRyaXg7XG4gICAgdmFyIGZlTWVyZ2UgPSB0aGlzLmNyZWF0ZU1lcmdlTm9kZShpZCwgW3NvdXJjZSwgaWQgKyAnX3RpbnRfMScsIGlkICsgJ190aW50XzInXSk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlTWVyZ2UpO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTVkdDb21wb3NhYmxlRWZmZWN0XSwgU1ZHVGludEZpbHRlcik7XG5cbiAgU1ZHVGludEZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIHZhciBjb2xvckJsYWNrID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICAgIHZhciBjb2xvcldoaXRlID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudjtcbiAgICAgIHZhciBvcGFjaXR5ID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudiAvIDEwMDtcbiAgICAgIHRoaXMubGluZWFyRmlsdGVyLnNldEF0dHJpYnV0ZSgndmFsdWVzJywgbGluZWFyRmlsdGVyVmFsdWUgKyAnICcgKyBvcGFjaXR5ICsgJyAwJyk7XG4gICAgICB0aGlzLm1hdHJpeEZpbHRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsIGNvbG9yV2hpdGVbMF0gLSBjb2xvckJsYWNrWzBdICsgJyAwIDAgMCAnICsgY29sb3JCbGFja1swXSArICcgJyArIChjb2xvcldoaXRlWzFdIC0gY29sb3JCbGFja1sxXSkgKyAnIDAgMCAwICcgKyBjb2xvckJsYWNrWzFdICsgJyAnICsgKGNvbG9yV2hpdGVbMl0gLSBjb2xvckJsYWNrWzJdKSArICcgMCAwIDAgJyArIGNvbG9yQmxhY2tbMl0gKyAnIDAgMCAwIDEgMCcpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdGaWxsRmlsdGVyKGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQpIHtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29sb3JNYXRyaXgpO1xuICAgIHRoaXMubWF0cml4RmlsdGVyID0gZmVDb2xvck1hdHJpeDtcbiAgfVxuXG4gIFNWR0ZpbGxGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgY29sb3IgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52O1xuICAgICAgdmFyIG9wYWNpdHkgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC52O1xuICAgICAgdGhpcy5tYXRyaXhGaWx0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMCAwIDAgMCAnICsgY29sb3JbMF0gKyAnIDAgMCAwIDAgJyArIGNvbG9yWzFdICsgJyAwIDAgMCAwICcgKyBjb2xvclsyXSArICcgMCAwIDAgJyArIG9wYWNpdHkgKyAnIDAnKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHU3Ryb2tlRWZmZWN0KGZpbCwgZmlsdGVyTWFuYWdlciwgZWxlbSkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5wYXRocyA9IFtdO1xuICB9XG5cbiAgU1ZHU3Ryb2tlRWZmZWN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbGVtQ2hpbGRyZW4gPSB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmNoaWxkcmVuIHx8IHRoaXMuZWxlbS5sYXllckVsZW1lbnQuY2hpbGROb2RlcztcbiAgICB2YXIgcGF0aDtcbiAgICB2YXIgZ3JvdXBQYXRoO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG5cbiAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudiA9PT0gMSkge1xuICAgICAgbGVuID0gdGhpcy5lbGVtLm1hc2tNYW5hZ2VyLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG4gICAgICBpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgaSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnYgLSAxO1xuICAgICAgbGVuID0gaSArIDE7XG4gICAgfVxuXG4gICAgZ3JvdXBQYXRoID0gY3JlYXRlTlMoJ2cnKTtcbiAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgJ25vbmUnKTtcbiAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsICdyb3VuZCcpO1xuICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNob2Zmc2V0JywgMSk7XG5cbiAgICBmb3IgKGk7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcGF0aCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICBncm91cFBhdGguYXBwZW5kQ2hpbGQocGF0aCk7XG4gICAgICB0aGlzLnBhdGhzLnB1c2goe1xuICAgICAgICBwOiBwYXRoLFxuICAgICAgICBtOiBpXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDMpIHtcbiAgICAgIHZhciBtYXNrID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgIHZhciBpZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgbWFzay5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgbWFzay5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuICAgICAgbWFzay5hcHBlbmRDaGlsZChncm91cFBhdGgpO1xuICAgICAgdGhpcy5lbGVtLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChtYXNrKTtcbiAgICAgIHZhciBnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgIGcuc2V0QXR0cmlidXRlKCdtYXNrJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBpZCArICcpJyk7XG5cbiAgICAgIHdoaWxlIChlbGVtQ2hpbGRyZW5bMF0pIHtcbiAgICAgICAgZy5hcHBlbmRDaGlsZChlbGVtQ2hpbGRyZW5bMF0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGcpO1xuICAgICAgdGhpcy5tYXNrZXIgPSBtYXNrO1xuICAgICAgZ3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJyNmZmYnKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAxIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxMF0ucC52ID09PSAyKSB7XG4gICAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDIpIHtcbiAgICAgICAgZWxlbUNoaWxkcmVuID0gdGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZHJlbiB8fCB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmNoaWxkTm9kZXM7XG5cbiAgICAgICAgd2hpbGUgKGVsZW1DaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LnJlbW92ZUNoaWxkKGVsZW1DaGlsZHJlblswXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChncm91cFBhdGgpO1xuICAgICAgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ21hc2snKTtcbiAgICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjZmZmJyk7XG4gICAgfVxuXG4gICAgdGhpcy5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgdGhpcy5wYXRoTWFza2VyID0gZ3JvdXBQYXRoO1xuICB9O1xuXG4gIFNWR1N0cm9rZUVmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoIXRoaXMuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnBhdGhzLmxlbmd0aDtcbiAgICB2YXIgbWFzaztcbiAgICB2YXIgcGF0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMucGF0aHNbaV0ubSAhPT0gLTEpIHtcbiAgICAgICAgbWFzayA9IHRoaXMuZWxlbS5tYXNrTWFuYWdlci52aWV3RGF0YVt0aGlzLnBhdGhzW2ldLm1dO1xuICAgICAgICBwYXRoID0gdGhpcy5wYXRoc1tpXS5wO1xuXG4gICAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZiB8fCBtYXNrLnByb3AuX21kZikge1xuICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdkJywgbWFzay5sYXN0UGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAuX21kZiB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLl9tZGYgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzhdLnAuX21kZiB8fCBtYXNrLnByb3AuX21kZikge1xuICAgICAgICAgIHZhciBkYXNoYXJyYXlWYWx1ZTtcblxuICAgICAgICAgIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC52ICE9PSAwIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLnYgIT09IDEwMCkge1xuICAgICAgICAgICAgdmFyIHMgPSBNYXRoLm1pbih0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbN10ucC52LCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC52KSAqIDAuMDE7XG4gICAgICAgICAgICB2YXIgZSA9IE1hdGgubWF4KHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLnYsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLnYpICogMC4wMTtcbiAgICAgICAgICAgIHZhciBsID0gcGF0aC5nZXRUb3RhbExlbmd0aCgpO1xuICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgPSAnMCAwIDAgJyArIGwgKiBzICsgJyAnO1xuICAgICAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsICogKGUgLSBzKTtcbiAgICAgICAgICAgIHZhciBzZWdtZW50ID0gMSArIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYgKiAyICogdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzldLnAudiAqIDAuMDE7XG4gICAgICAgICAgICB2YXIgdW5pdHMgPSBNYXRoLmZsb29yKGxpbmVMZW5ndGggLyBzZWdtZW50KTtcbiAgICAgICAgICAgIHZhciBqO1xuXG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgdW5pdHM7IGogKz0gMSkge1xuICAgICAgICAgICAgICBkYXNoYXJyYXlWYWx1ZSArPSAnMSAnICsgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAqIDIgKiB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC52ICogMC4wMSArICcgJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgKz0gJzAgJyArIGwgKiAxMCArICcgMCAwJztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGFzaGFycmF5VmFsdWUgPSAnMSAnICsgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAqIDIgKiB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC52ICogMC4wMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsIGRhc2hhcnJheVZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmKSB7XG4gICAgICB0aGlzLnBhdGhNYXNrZXIuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52ICogMik7XG4gICAgfVxuXG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s2XS5wLl9tZGYpIHtcbiAgICAgIHRoaXMucGF0aE1hc2tlci5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNl0ucC52KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDEgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDIpIHtcbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC5fbWRmKSB7XG4gICAgICAgIHZhciBjb2xvciA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLnY7XG4gICAgICAgIHRoaXMucGF0aE1hc2tlci5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdyZ2IoJyArIGJtRmxvb3IoY29sb3JbMF0gKiAyNTUpICsgJywnICsgYm1GbG9vcihjb2xvclsxXSAqIDI1NSkgKyAnLCcgKyBibUZsb29yKGNvbG9yWzJdICogMjU1KSArICcpJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1RyaXRvbmVGaWx0ZXIoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCkge1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnbGluZWFyUkdCJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwIDAgMCAxIDAnKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7XG4gICAgdmFyIGZlQ29tcG9uZW50VHJhbnNmZXIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgdGhpcy5tYXRyaXhGaWx0ZXIgPSBmZUNvbXBvbmVudFRyYW5zZmVyO1xuICAgIHZhciBmZUZ1bmNSID0gY3JlYXRlTlMoJ2ZlRnVuY1InKTtcbiAgICBmZUZ1bmNSLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jUik7XG4gICAgdGhpcy5mZUZ1bmNSID0gZmVGdW5jUjtcbiAgICB2YXIgZmVGdW5jRyA9IGNyZWF0ZU5TKCdmZUZ1bmNHJyk7XG4gICAgZmVGdW5jRy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGFibGUnKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLmFwcGVuZENoaWxkKGZlRnVuY0cpO1xuICAgIHRoaXMuZmVGdW5jRyA9IGZlRnVuY0c7XG4gICAgdmFyIGZlRnVuY0IgPSBjcmVhdGVOUygnZmVGdW5jQicpO1xuICAgIGZlRnVuY0Iuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmNCKTtcbiAgICB0aGlzLmZlRnVuY0IgPSBmZUZ1bmNCO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgfVxuXG4gIFNWR1RyaXRvbmVGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgY29sb3IxID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICAgIHZhciBjb2xvcjIgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52O1xuICAgICAgdmFyIGNvbG9yMyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnY7XG4gICAgICB2YXIgdGFibGVSID0gY29sb3IzWzBdICsgJyAnICsgY29sb3IyWzBdICsgJyAnICsgY29sb3IxWzBdO1xuICAgICAgdmFyIHRhYmxlRyA9IGNvbG9yM1sxXSArICcgJyArIGNvbG9yMlsxXSArICcgJyArIGNvbG9yMVsxXTtcbiAgICAgIHZhciB0YWJsZUIgPSBjb2xvcjNbMl0gKyAnICcgKyBjb2xvcjJbMl0gKyAnICcgKyBjb2xvcjFbMl07XG4gICAgICB0aGlzLmZlRnVuY1Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHRhYmxlUik7XG4gICAgICB0aGlzLmZlRnVuY0cuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHRhYmxlRyk7XG4gICAgICB0aGlzLmZlRnVuY0Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHRhYmxlQik7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR1Byb0xldmVsc0ZpbHRlcihmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkKSB7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHM7XG4gICAgdmFyIGZlQ29tcG9uZW50VHJhbnNmZXIgPSBjcmVhdGVOUygnZmVDb21wb25lbnRUcmFuc2ZlcicpOyAvLyBSZWRcblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1sxMF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMTFdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxMV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzEyXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTJdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1sxM10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzEzXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMTRdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxNF0ucC52ICE9PSAxKSB7XG4gICAgICB0aGlzLmZlRnVuY1IgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jUicsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH0gLy8gR3JlZW5cblxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzE3XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTddLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1sxOF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzE4XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMTldLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxOV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzIwXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjBdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1syMV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzIxXS5wLnYgIT09IDEpIHtcbiAgICAgIHRoaXMuZmVGdW5jRyA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNHJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfSAvLyBCbHVlXG5cblxuICAgIGlmIChlZmZlY3RFbGVtZW50c1syNF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI0XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMjVdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syNV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzI2XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjZdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1syN10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI3XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbMjhdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syOF0ucC52ICE9PSAxKSB7XG4gICAgICB0aGlzLmZlRnVuY0IgPSB0aGlzLmNyZWF0ZUZlRnVuYygnZmVGdW5jQicsIGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICAgIH0gLy8gQWxwaGFcblxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzMxXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzFdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1szMl0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzMyXS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMzNdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szM10ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzM0XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzRdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1szNV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzM1XS5wLnYgIT09IDEpIHtcbiAgICAgIHRoaXMuZmVGdW5jQSA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNBJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfSAvLyBSR0JcblxuXG4gICAgaWYgKHRoaXMuZmVGdW5jUiB8fCB0aGlzLmZlRnVuY0cgfHwgdGhpcy5mZUZ1bmNCIHx8IHRoaXMuZmVGdW5jQSkge1xuICAgICAgZmVDb21wb25lbnRUcmFuc2Zlci5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfVxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzNdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szXS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbNF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzRdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1s1XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbNV0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzZdLnAuayB8fCBlZmZlY3RFbGVtZW50c1s2XS5wLnYgIT09IDAgfHwgZWZmZWN0RWxlbWVudHNbN10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzddLnAudiAhPT0gMSkge1xuICAgICAgZmVDb21wb25lbnRUcmFuc2ZlciA9IGNyZWF0ZU5TKCdmZUNvbXBvbmVudFRyYW5zZmVyJyk7XG4gICAgICBmZUNvbXBvbmVudFRyYW5zZmVyLnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCk7XG4gICAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgICB0aGlzLmZlRnVuY1JDb21wb3NlZCA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNSJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgICB0aGlzLmZlRnVuY0dDb21wb3NlZCA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNHJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgICB0aGlzLmZlRnVuY0JDb21wb3NlZCA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNCJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfVxuICB9XG5cbiAgU1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5jcmVhdGVGZUZ1bmMgPSBmdW5jdGlvbiAodHlwZSwgZmVDb21wb25lbnRUcmFuc2Zlcikge1xuICAgIHZhciBmZUZ1bmMgPSBjcmVhdGVOUyh0eXBlKTtcbiAgICBmZUZ1bmMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmMpO1xuICAgIHJldHVybiBmZUZ1bmM7XG4gIH07XG5cbiAgU1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5nZXRUYWJsZVZhbHVlID0gZnVuY3Rpb24gKGlucHV0QmxhY2ssIGlucHV0V2hpdGUsIGdhbW1hLCBvdXRwdXRCbGFjaywgb3V0cHV0V2hpdGUpIHtcbiAgICB2YXIgY250ID0gMDtcbiAgICB2YXIgc2VnbWVudHMgPSAyNTY7XG4gICAgdmFyIHBlcmM7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKGlucHV0QmxhY2ssIGlucHV0V2hpdGUpO1xuICAgIHZhciBtYXggPSBNYXRoLm1heChpbnB1dEJsYWNrLCBpbnB1dFdoaXRlKTtcbiAgICB2YXIgdGFibGUgPSBBcnJheS5jYWxsKG51bGwsIHtcbiAgICAgIGxlbmd0aDogc2VnbWVudHNcbiAgICB9KTtcbiAgICB2YXIgY29sb3JWYWx1ZTtcbiAgICB2YXIgcG9zID0gMDtcbiAgICB2YXIgb3V0cHV0RGVsdGEgPSBvdXRwdXRXaGl0ZSAtIG91dHB1dEJsYWNrO1xuICAgIHZhciBpbnB1dERlbHRhID0gaW5wdXRXaGl0ZSAtIGlucHV0QmxhY2s7XG5cbiAgICB3aGlsZSAoY250IDw9IDI1Nikge1xuICAgICAgcGVyYyA9IGNudCAvIDI1NjtcblxuICAgICAgaWYgKHBlcmMgPD0gbWluKSB7XG4gICAgICAgIGNvbG9yVmFsdWUgPSBpbnB1dERlbHRhIDwgMCA/IG91dHB1dFdoaXRlIDogb3V0cHV0QmxhY2s7XG4gICAgICB9IGVsc2UgaWYgKHBlcmMgPj0gbWF4KSB7XG4gICAgICAgIGNvbG9yVmFsdWUgPSBpbnB1dERlbHRhIDwgMCA/IG91dHB1dEJsYWNrIDogb3V0cHV0V2hpdGU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb2xvclZhbHVlID0gb3V0cHV0QmxhY2sgKyBvdXRwdXREZWx0YSAqIE1hdGgucG93KChwZXJjIC0gaW5wdXRCbGFjaykgLyBpbnB1dERlbHRhLCAxIC8gZ2FtbWEpO1xuICAgICAgfVxuXG4gICAgICB0YWJsZVtwb3NdID0gY29sb3JWYWx1ZTtcbiAgICAgIHBvcyArPSAxO1xuICAgICAgY250ICs9IDI1NiAvIChzZWdtZW50cyAtIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB0YWJsZS5qb2luKCcgJyk7XG4gIH07XG5cbiAgU1ZHUHJvTGV2ZWxzRmlsdGVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgdmFyIHZhbDtcbiAgICAgIHZhciBlZmZlY3RFbGVtZW50cyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50cztcblxuICAgICAgaWYgKHRoaXMuZmVGdW5jUkNvbXBvc2VkICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1szXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzVdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1s2XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbN10ucC5fbWRmKSkge1xuICAgICAgICB2YWwgPSB0aGlzLmdldFRhYmxlVmFsdWUoZWZmZWN0RWxlbWVudHNbM10ucC52LCBlZmZlY3RFbGVtZW50c1s0XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzVdLnAudiwgZWZmZWN0RWxlbWVudHNbNl0ucC52LCBlZmZlY3RFbGVtZW50c1s3XS5wLnYpO1xuICAgICAgICB0aGlzLmZlRnVuY1JDb21wb3NlZC5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgICAgdGhpcy5mZUZ1bmNHQ29tcG9zZWQuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICAgIHRoaXMuZmVGdW5jQkNvbXBvc2VkLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNSICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1sxMF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzExXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTJdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxM10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzE0XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1sxMF0ucC52LCBlZmZlY3RFbGVtZW50c1sxMV0ucC52LCBlZmZlY3RFbGVtZW50c1sxMl0ucC52LCBlZmZlY3RFbGVtZW50c1sxM10ucC52LCBlZmZlY3RFbGVtZW50c1sxNF0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNSLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNHICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1sxN10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzE4XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTldLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syMF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzIxXS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1sxN10ucC52LCBlZmZlY3RFbGVtZW50c1sxOF0ucC52LCBlZmZlY3RFbGVtZW50c1sxOV0ucC52LCBlZmZlY3RFbGVtZW50c1syMF0ucC52LCBlZmZlY3RFbGVtZW50c1syMV0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNHLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNCICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1syNF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzI1XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjZdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syN10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzI4XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1syNF0ucC52LCBlZmZlY3RFbGVtZW50c1syNV0ucC52LCBlZmZlY3RFbGVtZW50c1syNl0ucC52LCBlZmZlY3RFbGVtZW50c1syN10ucC52LCBlZmZlY3RFbGVtZW50c1syOF0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNCLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNBICYmIChmb3JjZVJlbmRlciB8fCBlZmZlY3RFbGVtZW50c1szMV0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzMyXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMzNdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1szNF0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzM1XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1szMV0ucC52LCBlZmZlY3RFbGVtZW50c1szMl0ucC52LCBlZmZlY3RFbGVtZW50c1szM10ucC52LCBlZmZlY3RFbGVtZW50c1szNF0ucC52LCBlZmZlY3RFbGVtZW50c1szNV0ucC52KTtcbiAgICAgICAgdGhpcy5mZUZ1bmNBLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdEcm9wU2hhZG93RWZmZWN0KGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQsIHNvdXJjZSkge1xuICAgIHZhciBnbG9iYWxGaWx0ZXJTaXplID0gZmlsdGVyTWFuYWdlci5jb250YWluZXIuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuZmlsdGVyU2l6ZTtcbiAgICB2YXIgZmlsdGVyU2l6ZSA9IGZpbHRlck1hbmFnZXIuZGF0YS5mcyB8fCBnbG9iYWxGaWx0ZXJTaXplO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3gnLCBmaWx0ZXJTaXplLnggfHwgZ2xvYmFsRmlsdGVyU2l6ZS54KTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd5JywgZmlsdGVyU2l6ZS55IHx8IGdsb2JhbEZpbHRlclNpemUueSk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBmaWx0ZXJTaXplLndpZHRoIHx8IGdsb2JhbEZpbHRlclNpemUud2lkdGgpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGZpbHRlclNpemUuaGVpZ2h0IHx8IGdsb2JhbEZpbHRlclNpemUuaGVpZ2h0KTtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUdhdXNzaWFuQmx1ciA9IGNyZWF0ZU5TKCdmZUdhdXNzaWFuQmx1cicpO1xuICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnaW4nLCAnU291cmNlQWxwaGEnKTtcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ19kcm9wX3NoYWRvd18xJyk7XG4gICAgZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLCAnMCcpO1xuICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIgPSBmZUdhdXNzaWFuQmx1cjtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVHYXVzc2lhbkJsdXIpO1xuICAgIHZhciBmZU9mZnNldCA9IGNyZWF0ZU5TKCdmZU9mZnNldCcpO1xuICAgIGZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHgnLCAnMjUnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R5JywgJzAnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2luJywgaWQgKyAnX2Ryb3Bfc2hhZG93XzEnKTtcbiAgICBmZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ19kcm9wX3NoYWRvd18yJyk7XG4gICAgdGhpcy5mZU9mZnNldCA9IGZlT2Zmc2V0O1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZU9mZnNldCk7XG4gICAgdmFyIGZlRmxvb2QgPSBjcmVhdGVOUygnZmVGbG9vZCcpO1xuICAgIGZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1jb2xvcicsICcjMDBmZjAwJyk7XG4gICAgZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLW9wYWNpdHknLCAnMScpO1xuICAgIGZlRmxvb2Quc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfZHJvcF9zaGFkb3dfMycpO1xuICAgIHRoaXMuZmVGbG9vZCA9IGZlRmxvb2Q7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlRmxvb2QpO1xuICAgIHZhciBmZUNvbXBvc2l0ZSA9IGNyZWF0ZU5TKCdmZUNvbXBvc2l0ZScpO1xuICAgIGZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnaW4nLCBpZCArICdfZHJvcF9zaGFkb3dfMycpO1xuICAgIGZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnaW4yJywgaWQgKyAnX2Ryb3Bfc2hhZG93XzInKTtcbiAgICBmZUNvbXBvc2l0ZS5zZXRBdHRyaWJ1dGUoJ29wZXJhdG9yJywgJ2luJyk7XG4gICAgZmVDb21wb3NpdGUuc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfZHJvcF9zaGFkb3dfNCcpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvc2l0ZSk7XG4gICAgdmFyIGZlTWVyZ2UgPSB0aGlzLmNyZWF0ZU1lcmdlTm9kZShpZCwgW2lkICsgJ19kcm9wX3NoYWRvd180Jywgc291cmNlXSk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlTWVyZ2UpOyAvL1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTVkdDb21wb3NhYmxlRWZmZWN0XSwgU1ZHRHJvcFNoYWRvd0VmZmVjdCk7XG5cbiAgU1ZHRHJvcFNoYWRvd0VmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC5fbWRmKSB7XG4gICAgICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52IC8gNCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC5fbWRmKSB7XG4gICAgICAgIHZhciBjb2wgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O1xuICAgICAgICB0aGlzLmZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1jb2xvcicsIHJnYlRvSGV4KE1hdGgucm91bmQoY29sWzBdICogMjU1KSwgTWF0aC5yb3VuZChjb2xbMV0gKiAyNTUpLCBNYXRoLnJvdW5kKGNvbFsyXSAqIDI1NSkpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLl9tZGYpIHtcbiAgICAgICAgdGhpcy5mZUZsb29kLnNldEF0dHJpYnV0ZSgnZmxvb2Qtb3BhY2l0eScsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnYgLyAyNTUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAuX21kZiB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbM10ucC5fbWRmKSB7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLnY7XG4gICAgICAgIHZhciBhbmdsZSA9ICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52IC0gOTApICogZGVnVG9SYWRzO1xuICAgICAgICB2YXIgeCA9IGRpc3RhbmNlICogTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICB2YXIgeSA9IGRpc3RhbmNlICogTWF0aC5zaW4oYW5nbGUpO1xuICAgICAgICB0aGlzLmZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHgnLCB4KTtcbiAgICAgICAgdGhpcy5mZU9mZnNldC5zZXRBdHRyaWJ1dGUoJ2R5JywgeSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBfc3ZnTWF0dGVTeW1ib2xzID0gW107XG5cbiAgZnVuY3Rpb24gU1ZHTWF0dGUzRWZmZWN0KGZpbHRlckVsZW0sIGZpbHRlck1hbmFnZXIsIGVsZW0pIHtcbiAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB0aGlzLmZpbHRlckVsZW0gPSBmaWx0ZXJFbGVtO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgZWxlbS5tYXR0ZUVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgIGVsZW0ubWF0dGVFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0ubGF5ZXJFbGVtZW50KTtcbiAgICBlbGVtLm1hdHRlRWxlbWVudC5hcHBlbmRDaGlsZChlbGVtLnRyYW5zZm9ybWVkRWxlbWVudCk7XG4gICAgZWxlbS5iYXNlRWxlbWVudCA9IGVsZW0ubWF0dGVFbGVtZW50O1xuICB9XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5maW5kU3ltYm9sID0gZnVuY3Rpb24gKG1hc2spIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IF9zdmdNYXR0ZVN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChfc3ZnTWF0dGVTeW1ib2xzW2ldID09PSBtYXNrKSB7XG4gICAgICAgIHJldHVybiBfc3ZnTWF0dGVTeW1ib2xzW2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5yZXBsYWNlSW5QYXJlbnQgPSBmdW5jdGlvbiAobWFzaywgc3ltYm9sSWQpIHtcbiAgICB2YXIgcGFyZW50Tm9kZSA9IG1hc2subGF5ZXJFbGVtZW50LnBhcmVudE5vZGU7XG5cbiAgICBpZiAoIXBhcmVudE5vZGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgY2hpbGRyZW4gPSBwYXJlbnROb2RlLmNoaWxkcmVuO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gY2hpbGRyZW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXSA9PT0gbWFzay5sYXllckVsZW1lbnQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dENoaWxkO1xuXG4gICAgaWYgKGkgPD0gbGVuIC0gMikge1xuICAgICAgbmV4dENoaWxkID0gY2hpbGRyZW5baSArIDFdO1xuICAgIH1cblxuICAgIHZhciB1c2VFbGVtID0gY3JlYXRlTlMoJ3VzZScpO1xuICAgIHVzZUVsZW0uc2V0QXR0cmlidXRlKCdocmVmJywgJyMnICsgc3ltYm9sSWQpO1xuXG4gICAgaWYgKG5leHRDaGlsZCkge1xuICAgICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodXNlRWxlbSwgbmV4dENoaWxkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh1c2VFbGVtKTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5zZXRFbGVtZW50QXNNYXNrID0gZnVuY3Rpb24gKGVsZW0sIG1hc2spIHtcbiAgICBpZiAoIXRoaXMuZmluZFN5bWJvbChtYXNrKSkge1xuICAgICAgdmFyIHN5bWJvbElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICB2YXIgbWFza2VyID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ2lkJywgbWFzay5sYXllcklkKTtcbiAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuXG4gICAgICBfc3ZnTWF0dGVTeW1ib2xzLnB1c2gobWFzayk7XG5cbiAgICAgIHZhciBkZWZzID0gZWxlbS5nbG9iYWxEYXRhLmRlZnM7XG4gICAgICBkZWZzLmFwcGVuZENoaWxkKG1hc2tlcik7XG4gICAgICB2YXIgc3ltYm9sID0gY3JlYXRlTlMoJ3N5bWJvbCcpO1xuICAgICAgc3ltYm9sLnNldEF0dHJpYnV0ZSgnaWQnLCBzeW1ib2xJZCk7XG4gICAgICB0aGlzLnJlcGxhY2VJblBhcmVudChtYXNrLCBzeW1ib2xJZCk7XG4gICAgICBzeW1ib2wuYXBwZW5kQ2hpbGQobWFzay5sYXllckVsZW1lbnQpO1xuICAgICAgZGVmcy5hcHBlbmRDaGlsZChzeW1ib2wpO1xuICAgICAgdmFyIHVzZUVsZW0gPSBjcmVhdGVOUygndXNlJyk7XG4gICAgICB1c2VFbGVtLnNldEF0dHJpYnV0ZSgnaHJlZicsICcjJyArIHN5bWJvbElkKTtcbiAgICAgIG1hc2tlci5hcHBlbmRDaGlsZCh1c2VFbGVtKTtcbiAgICAgIG1hc2suZGF0YS5oZCA9IGZhbHNlO1xuICAgICAgbWFzay5zaG93KCk7XG4gICAgfVxuXG4gICAgZWxlbS5zZXRNYXR0ZShtYXNrLmxheWVySWQpO1xuICB9O1xuXG4gIFNWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaW5kID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICB2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW0uY29tcC5lbGVtZW50cztcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAoZWxlbWVudHNbaV0gJiYgZWxlbWVudHNbaV0uZGF0YS5pbmQgPT09IGluZCkge1xuICAgICAgICB0aGlzLnNldEVsZW1lbnRBc01hc2sodGhpcy5lbGVtLCBlbGVtZW50c1tpXSk7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgfTtcblxuICBTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0dhdXNzaWFuQmx1ckVmZmVjdChmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkKSB7XG4gICAgLy8gT3V0c2V0IHRoZSBmaWx0ZXIgcmVnaW9uIGJ5IDEwMCUgb24gYWxsIHNpZGVzIHRvIGFjY29tbW9kYXRlIGJsdXIgZXhwYW5zaW9uLlxuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3gnLCAnLTEwMCUnKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd5JywgJy0xMDAlJyk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMzAwJScpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICczMDAlJyk7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZmVHYXVzc2lhbkJsdXIgPSBjcmVhdGVOUygnZmVHYXVzc2lhbkJsdXInKTtcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVHYXVzc2lhbkJsdXIpO1xuICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIgPSBmZUdhdXNzaWFuQmx1cjtcbiAgfVxuXG4gIFNWR0dhdXNzaWFuQmx1ckVmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIC8vIEVtcGlyaWNhbCB2YWx1ZSwgbWF0Y2hpbmcgQUUncyBibHVyIGFwcGVhcmFuY2UuXG4gICAgICB2YXIga0JsdXJyaW5lc3NUb1NpZ21hID0gMC4zO1xuICAgICAgdmFyIHNpZ21hID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudiAqIGtCbHVycmluZXNzVG9TaWdtYTsgLy8gRGltZW5zaW9ucyBtYXBwaW5nOlxuICAgICAgLy9cbiAgICAgIC8vICAgMSAtPiBob3Jpem9udGFsICYgdmVydGljYWxcbiAgICAgIC8vICAgMiAtPiBob3Jpem9udGFsIG9ubHlcbiAgICAgIC8vICAgMyAtPiB2ZXJ0aWNhbCBvbmx5XG4gICAgICAvL1xuXG4gICAgICB2YXIgZGltZW5zaW9ucyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnY7XG4gICAgICB2YXIgc2lnbWFYID0gZGltZW5zaW9ucyA9PSAzID8gMCA6IHNpZ21hOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXG4gICAgICB2YXIgc2lnbWFZID0gZGltZW5zaW9ucyA9PSAyID8gMCA6IHNpZ21hOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXG4gICAgICB0aGlzLmZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnc3RkRGV2aWF0aW9uJywgc2lnbWFYICsgJyAnICsgc2lnbWFZKTsgLy8gUmVwZWF0IGVkZ2VzIG1hcHBpbmc6XG4gICAgICAvL1xuICAgICAgLy8gICAwIC0+IG9mZiAtPiBkdXBsaWNhdGVcbiAgICAgIC8vICAgMSAtPiBvbiAgLT4gd3JhcFxuXG4gICAgICB2YXIgZWRnZU1vZGUgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52ID09IDEgPyAnd3JhcCcgOiAnZHVwbGljYXRlJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcblxuICAgICAgdGhpcy5mZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ2VkZ2VNb2RlJywgZWRnZU1vZGUpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBUcmFuc2Zvcm1FZmZlY3QoKSB7fVxuXG4gIFRyYW5zZm9ybUVmZmVjdC5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlZmZlY3RzTWFuYWdlcikge1xuICAgIHRoaXMuZWZmZWN0c01hbmFnZXIgPSBlZmZlY3RzTWFuYWdlcjtcbiAgICB0aGlzLnR5cGUgPSBlZmZlY3RUeXBlcy5UUkFOU0ZPUk1fRUZGRUNUO1xuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMub3BhY2l0eSA9IC0xO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMuX29wTWRmID0gZmFsc2U7XG4gIH07XG5cbiAgVHJhbnNmb3JtRWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZUZyYW1lKSB7XG4gICAgdGhpcy5fb3BNZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcblxuICAgIGlmIChmb3JjZUZyYW1lIHx8IHRoaXMuZWZmZWN0c01hbmFnZXIuX21kZikge1xuICAgICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gdGhpcy5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50cztcbiAgICAgIHZhciBhbmNob3IgPSBlZmZlY3RFbGVtZW50c1swXS5wLnY7XG4gICAgICB2YXIgcG9zaXRpb24gPSBlZmZlY3RFbGVtZW50c1sxXS5wLnY7XG4gICAgICB2YXIgaXNVbmlmb3JtU2NhbGUgPSBlZmZlY3RFbGVtZW50c1syXS5wLnYgPT09IDE7XG4gICAgICB2YXIgc2NhbGVIZWlnaHQgPSBlZmZlY3RFbGVtZW50c1szXS5wLnY7XG4gICAgICB2YXIgc2NhbGVXaWR0aCA9IGlzVW5pZm9ybVNjYWxlID8gc2NhbGVIZWlnaHQgOiBlZmZlY3RFbGVtZW50c1s0XS5wLnY7XG4gICAgICB2YXIgc2tldyA9IGVmZmVjdEVsZW1lbnRzWzVdLnAudjtcbiAgICAgIHZhciBza2V3QXhpcyA9IGVmZmVjdEVsZW1lbnRzWzZdLnAudjtcbiAgICAgIHZhciByb3RhdGlvbiA9IGVmZmVjdEVsZW1lbnRzWzddLnAudjtcbiAgICAgIHRoaXMubWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLm1hdHJpeC50cmFuc2xhdGUoLWFuY2hvclswXSwgLWFuY2hvclsxXSwgYW5jaG9yWzJdKTtcbiAgICAgIHRoaXMubWF0cml4LnNjYWxlKHNjYWxlV2lkdGggKiAwLjAxLCBzY2FsZUhlaWdodCAqIDAuMDEsIDEpO1xuICAgICAgdGhpcy5tYXRyaXgucm90YXRlKC1yb3RhdGlvbiAqIGRlZ1RvUmFkcyk7XG4gICAgICB0aGlzLm1hdHJpeC5za2V3RnJvbUF4aXMoLXNrZXcgKiBkZWdUb1JhZHMsIChza2V3QXhpcyArIDkwKSAqIGRlZ1RvUmFkcyk7XG4gICAgICB0aGlzLm1hdHJpeC50cmFuc2xhdGUocG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdLCAwKTtcbiAgICAgIHRoaXMuX21kZiA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLm9wYWNpdHkgIT09IGVmZmVjdEVsZW1lbnRzWzhdLnAudikge1xuICAgICAgICB0aGlzLm9wYWNpdHkgPSBlZmZlY3RFbGVtZW50c1s4XS5wLnY7XG4gICAgICAgIHRoaXMuX29wTWRmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHVHJhbnNmb3JtRWZmZWN0KF8sIGZpbHRlck1hbmFnZXIpIHtcbiAgICB0aGlzLmluaXQoZmlsdGVyTWFuYWdlcik7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1RyYW5zZm9ybUVmZmVjdF0sIFNWR1RyYW5zZm9ybUVmZmVjdCk7XG5cbiAgZnVuY3Rpb24gQ1ZUcmFuc2Zvcm1FZmZlY3QoZWZmZWN0c01hbmFnZXIpIHtcbiAgICB0aGlzLmluaXQoZWZmZWN0c01hbmFnZXIpO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtUcmFuc2Zvcm1FZmZlY3RdLCBDVlRyYW5zZm9ybUVmZmVjdCk7XG5cbiAgcmVnaXN0ZXJSZW5kZXJlcignY2FudmFzJywgQ2FudmFzUmVuZGVyZXIpO1xuICByZWdpc3RlclJlbmRlcmVyKCdodG1sJywgSHlicmlkUmVuZGVyZXIpO1xuICByZWdpc3RlclJlbmRlcmVyKCdzdmcnLCBTVkdSZW5kZXJlcik7IC8vIFJlZ2lzdGVyaW5nIHNoYXBlIG1vZGlmaWVyc1xuXG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3RtJywgVHJpbU1vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncGInLCBQdWNrZXJBbmRCbG9hdE1vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncnAnLCBSZXBlYXRlck1vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigncmQnLCBSb3VuZENvcm5lcnNNb2RpZmllcik7XG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ3p6JywgWmlnWmFnTW9kaWZpZXIpO1xuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCdvcCcsIE9mZnNldFBhdGhNb2RpZmllcik7IC8vIFJlZ2lzdGVyaW5nIGV4cHJlc3Npb24gcGx1Z2luXG5cbiAgc2V0RXhwcmVzc2lvbnNQbHVnaW4oRXhwcmVzc2lvbnMpO1xuICBzZXRFeHByZXNzaW9uSW50ZXJmYWNlcyhnZXRJbnRlcmZhY2UpO1xuICBpbml0aWFsaXplJDEoKTtcbiAgaW5pdGlhbGl6ZSgpOyAvLyBSZWdpc3RlcmluZyBzdmcgZWZmZWN0c1xuXG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjAsIFNWR1RpbnRGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDIxLCBTVkdGaWxsRmlsdGVyLCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyMiwgU1ZHU3Ryb2tlRWZmZWN0LCBmYWxzZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjMsIFNWR1RyaXRvbmVGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDI0LCBTVkdQcm9MZXZlbHNGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDI1LCBTVkdEcm9wU2hhZG93RWZmZWN0LCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyOCwgU1ZHTWF0dGUzRWZmZWN0LCBmYWxzZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjksIFNWR0dhdXNzaWFuQmx1ckVmZmVjdCwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMzUsIFNWR1RyYW5zZm9ybUVmZmVjdCwgZmFsc2UpO1xuICByZWdpc3RlckVmZmVjdCgzNSwgQ1ZUcmFuc2Zvcm1FZmZlY3QpO1xuXG4gIHJldHVybiBsb3R0aWU7XG5cbn0pKTtcbiJdLCJuYW1lcyI6WyJyZXF1aXJlJCQwIiwiYyIsImEiLCJnIiwiYiIsImQiLCJlIiwiaCIsImpzeFJ1bnRpbWVNb2R1bGUiLCJnbG9iYWwiLCJmYWN0b3J5IiwidGhpcyIsImZsYWciLCJ2YWx1ZSIsInR5cGUiLCJzb3VyY2VzIiwiZGVzdGluYXRpb24iLCJpIiwibGVuIiwic291cmNlUHJvdG90eXBlIiwiYXR0ciIsIm9iamVjdCIsInByb3AiLCJwcm90b3R5cGUiLCJQcm94eUZ1bmN0aW9uIiwiQXVkaW9Db250cm9sbGVyIiwiYXVkaW9GYWN0b3J5IiwiYXVkaW8iLCJyYXRlVmFsdWUiLCJhc3NldFBhdGgiLCJjcmVhdGVSZWd1bGFyQXJyYXkiLCJhcnIiLCJjcmVhdGVUeXBlZEFycmF5RmFjdG9yeSIsIm9iaiIsInByb3BlcnR5TmFtZXMiLCJ2YWwiLCJ0T2ZWYWwiLCJhYnNBcnIiLCJlbGVtZW50IiwiY3VycmVudFRpbWUiLCJ0b3RhbFRpbWUiLCJmcmFtZU11bHRpcGxpZXIiLCJ0b3RhbExvb3BzIiwiY3VycmVudExvb3AiLCJmaXJzdEZyYW1lIiwidG90YWxGcmFtZXMiLCJ0YXJnZXQiLCJuYXRpdmVFcnJvciIsIl9jb3VudCIsInMiLCJ2IiwiciIsImYiLCJwIiwicSIsInQiLCJtYXgiLCJtaW4iLCJjb2xvciIsIm9mZnNldCIsImhzdiIsImNvbG9yTWFwIiwiaGV4IiwiX2NvdW50ZXJJZCIsInByb2Nlc3NlcyIsIndvcmtlckZuIiwid29ya2VySW5zdGFuY2UiLCJ3b3JrZXJQcm94eSIsInBhdGgiLCJfd29ya2VyU2VsZiIsImRhdGEiLCJjcmVhdGVXb3JrZXIiLCJmbiIsImJsb2IiLCJ1cmwiLCJzZXR1cFdvcmtlciIsImRhdGFGdW5jdGlvbk1hbmFnZXIiLCJjb21wbGV0ZUxheWVycyIsImxheWVycyIsImNvbXBzIiwibGF5ZXJEYXRhIiwiaiIsImpMZW4iLCJrIiwia0xlbiIsIm1hc2tQcm9wcyIsImNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMiLCJmaW5kQ29tcExheWVycyIsImNvbXBsZXRlU2hhcGVzIiwiY29tcGxldGVUZXh0IiwiY29tcGxldGVDaGFycyIsImNoYXJzIiwiYXNzZXRzIiwiZmluZENvbXAiLCJpZCIsImNvbXAiLCJjaGVja1ZlcnNpb24iLCJtaW5pbXVtIiwiYW5pbVZlcnNpb25TdHJpbmciLCJhbmltVmVyc2lvbiIsImNoZWNrVGV4dCIsIm1pbmltdW1WZXJzaW9uIiwidXBkYXRlVGV4dExheWVyIiwidGV4dExheWVyIiwiZG9jdW1lbnREYXRhIiwiaXRlcmF0ZUxheWVycyIsImFuaW1hdGlvbkRhdGEiLCJjaGVja0NoYXJzIiwiY2hhckRhdGEiLCJjaGVja1BhdGhQcm9wZXJ0aWVzIiwicGF0aERhdGEiLCJjaGVja0NvbG9ycyIsIml0ZXJhdGVTaGFwZXMiLCJzaGFwZXMiLCJjaGVja1NoYXBlcyIsImNvbXBsZXRlQ2xvc2luZ1NoYXBlcyIsImNvbXBsZXRlRGF0YSIsIm1vZHVsZU9iIiwiZm9ybWF0UmVzcG9uc2UiLCJ4aHIiLCJjb250ZW50VHlwZUhlYWRlciIsImxvYWRBc3NldCIsImZ1bGxQYXRoIiwiY2FsbGJhY2siLCJlcnJvckNhbGxiYWNrIiwicmVzcG9uc2UiLCJlcnIiLCJhbmltYXRpb24iLCJldmVudCIsInByb2Nlc3MiLCJjcmVhdGVQcm9jZXNzIiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJsb2FkQW5pbWF0aW9uIiwicHJvY2Vzc0lkIiwibG9hZERhdGEiLCJjb21wbGV0ZUFuaW1hdGlvbiIsImFuaW0iLCJwcm94eUltYWdlIiwiY2FudmFzIiwiY3R4IiwiaW1hZ2VMb2FkZWQiLCJmb290YWdlTG9hZGVkIiwiZ2V0QXNzZXRzUGF0aCIsImFzc2V0RGF0YSIsImFzc2V0c1BhdGgiLCJvcmlnaW5hbFBhdGgiLCJpbWFnZVBhdGgiLCJ0ZXN0SW1hZ2VMb2FkZWQiLCJpbWciLCJpbnRlcnZhbElkIiwiYm94IiwiY3JlYXRlSW1hZ2VEYXRhIiwib2IiLCJjcmVhdGVJbWdEYXRhIiwiY3JlYXRlRm9vdGFnZURhdGEiLCJmb290YWdlRGF0YSIsImxvYWRBc3NldHMiLCJjYiIsInNldFBhdGgiLCJzZXRBc3NldHNQYXRoIiwiZ2V0QXNzZXQiLCJkZXN0cm95IiwibG9hZGVkSW1hZ2VzIiwibG9hZGVkRm9vdGFnZXMiLCJzZXRDYWNoZVR5cGUiLCJlbGVtZW50SGVscGVyIiwiSW1hZ2VQcmVsb2FkZXJGYWN0b3J5IiwiZXZlbnROYW1lIiwiYXJncyIsImNhbGxiYWNrcyIsInBhcnNlUGF5bG9hZExpbmVzIiwicGF5bG9hZCIsImxpbmVzIiwia2V5cyIsImxpbmUiLCJrZXlzQ291bnQiLCJfbWFya2VycyIsIm1hcmtlcnMiLCJfbWFya2VyIiwibWFya2VyRGF0YSIsInJlZ2lzdGVyQ29tcG9zaXRpb24iLCJfdGhpc1Byb2plY3RGdW5jdGlvbiIsIm5hbWUiLCJrZXkiLCJwYXJhbXMiLCJhbmltVHlwZSIsIlJlbmRlcmVyQ2xhc3MiLCJ3cmFwcGVyIiwid3JhcHBlckF0dHJpYnV0ZXMiLCJsb29wIiwiYXV0b3BsYXkiLCJwcmVyZW5kZXIiLCJuZXdMYXllcnMiLCJleHByZXNzaW9uc1BsdWdpbiIsInNlZ21lbnRzIiwic2VnbWVudCIsInNlZ21lbnRQYXRoIiwiYW5pbURhdGEiLCJlcnJvciIsIndpZHRoIiwiaGVpZ2h0IiwiX3dpZHRoIiwiX2hlaWdodCIsIm1hcmtlck5hbWUiLCJtYXJrZXIiLCJpc0ZyYW1lIiwibnVtVmFsdWUiLCJuZXh0VmFsdWUiLCJfaXNDb21wbGV0ZSIsImluaXQiLCJlbmQiLCJwZW5kaW5nRnJhbWUiLCJmb3JjZUZsYWciLCJpc0xvb3BpbmciLCJpbmRleCIsInJlZ2lzdGVyZWRBbmltYXRpb25zIiwiaW5pdFRpbWUiLCJwbGF5aW5nQW5pbWF0aW9uc051bSIsIl9zdG9wcGVkIiwiX2lzRnJvemVuIiwicmVtb3ZlRWxlbWVudCIsImV2IiwiYW5pbUl0ZW0iLCJzdWJ0cmFjdFBsYXlpbmdDb3VudCIsInJlZ2lzdGVyQW5pbWF0aW9uIiwic2V0dXBBbmltYXRpb24iLCJnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyIsImxlbkFuaW1zIiwiYW5pbWF0aW9ucyIsImFkZFBsYXlpbmdDb3VudCIsImFjdGl2YXRlIiwic2V0U3BlZWQiLCJzZXREaXJlY3Rpb24iLCJwbGF5IiwicmVzdW1lIiwibm93VGltZSIsImVsYXBzZWRUaW1lIiwiZmlyc3QiLCJwYXVzZSIsImdvVG9BbmRTdG9wIiwic3RvcCIsInRvZ2dsZVBhdXNlIiwic2VhcmNoQW5pbWF0aW9ucyIsInN0YW5kYWxvbmUiLCJyZW5kZXJlciIsImFuaW1FbGVtZW50cyIsImJvZHkiLCJkaXYiLCJyZXNpemUiLCJmcmVlemUiLCJ1bmZyZWV6ZSIsInNldFZvbHVtZSIsIm11dGUiLCJ1bm11dGUiLCJnZXRCZXppZXJFYXNpbmciLCJiZXppZXJzIiwibm0iLCJzdHIiLCJiZXpFYXNpbmciLCJCZXppZXJFYXNpbmciLCJORVdUT05fSVRFUkFUSU9OUyIsIk5FV1RPTl9NSU5fU0xPUEUiLCJTVUJESVZJU0lPTl9QUkVDSVNJT04iLCJTVUJESVZJU0lPTl9NQVhfSVRFUkFUSU9OUyIsImtTcGxpbmVUYWJsZVNpemUiLCJrU2FtcGxlU3RlcFNpemUiLCJmbG9hdDMyQXJyYXlTdXBwb3J0ZWQiLCJBIiwiYUExIiwiYUEyIiwiQiIsIkMiLCJjYWxjQmV6aWVyIiwiYVQiLCJnZXRTbG9wZSIsImJpbmFyeVN1YmRpdmlkZSIsImFYIiwiYUEiLCJhQiIsIm1YMSIsIm1YMiIsImN1cnJlbnRYIiwiY3VycmVudFQiLCJuZXd0b25SYXBoc29uSXRlcmF0ZSIsImFHdWVzc1QiLCJjdXJyZW50U2xvcGUiLCJwb2ludHMiLCJ4IiwibVkxIiwibVkyIiwibVNhbXBsZVZhbHVlcyIsImludGVydmFsU3RhcnQiLCJjdXJyZW50U2FtcGxlIiwibGFzdFNhbXBsZSIsImRpc3QiLCJndWVzc0ZvclQiLCJpbml0aWFsU2xvcGUiLCJfZG91YmxlIiwiaW5pdGlhbExlbmd0aCIsIl9jcmVhdGUiLCJfcmVsZWFzZSIsIl9sZW5ndGgiLCJfbWF4TGVuZ3RoIiwicG9vbCIsIm5ld0VsZW1lbnQiLCJyZWxlYXNlIiwiY3JlYXRlIiwibWF0aCIsInBvaW50T25MaW5lMkQiLCJ4MSIsInkxIiwieDIiLCJ5MiIsIngzIiwieTMiLCJkZXQxIiwicG9pbnRPbkxpbmUzRCIsInoxIiwiejIiLCJ6MyIsImRpc3QxIiwiZGlzdDIiLCJkaXN0MyIsImRpZmZEaXN0IiwiZ2V0QmV6aWVyTGVuZ3RoIiwicHQxIiwicHQyIiwicHQzIiwicHQ0IiwiY3VydmVTZWdtZW50cyIsInB0Q29vcmQiLCJwZXJjIiwiYWRkZWRMZW5ndGgiLCJwdERpc3RhbmNlIiwicG9pbnQiLCJsYXN0UG9pbnQiLCJsZW5ndGhEYXRhIiwiZ2V0U2VnbWVudHNMZW5ndGgiLCJzaGFwZURhdGEiLCJzZWdtZW50c0xlbmd0aCIsImNsb3NlZCIsInBhdGhWIiwicGF0aE8iLCJwYXRoSSIsImxlbmd0aHMiLCJ0b3RhbExlbmd0aCIsIkJlemllckRhdGEiLCJsZW5ndGgiLCJQb2ludERhdGEiLCJwYXJ0aWFsIiwiYnVpbGRCZXppZXJEYXRhIiwic3RvcmVkRGF0YSIsImJlemllck5hbWUiLCJiZXppZXJEYXRhIiwiZ2V0RGlzdGFuY2VQZXJjIiwicGVyY2VudHMiLCJpbml0UG9zIiwibGVuZ3RoUG9zIiwibFBlcmMiLCJkaXIiLCJnZXRQb2ludEluU2VnbWVudCIsInBlcmNlbnQiLCJ0MSIsInUxIiwicHRYIiwicHRZIiwiYmV6aWVyU2VnbWVudFBvaW50cyIsImdldE5ld1NlZ21lbnQiLCJzdGFydFBlcmMiLCJlbmRQZXJjIiwidDAiLCJ1MCIsInUwdTB1MCIsInQwdTB1MF8zIiwidDB0MHUwXzMiLCJ0MHQwdDAiLCJ1MHUwdTEiLCJ0MHUwdTFfMyIsInQwdDB1MV8zIiwidDB0MHQxIiwidTB1MXUxIiwidDB1MXUxXzMiLCJ0MHQxdTFfMyIsInQwdDF0MSIsInUxdTF1MSIsInQxdTF1MV8zIiwidDF0MXUxXzMiLCJ0MXQxdDEiLCJmcmFtZU51bSIsImNhY2hpbmciLCJvZmZzZXRUaW1lIiwibmV3VmFsdWUiLCJpdGVyYXRpb25JbmRleCIsImtleURhdGEiLCJuZXh0S2V5RGF0YSIsImtleWZyYW1lTWV0YWRhdGEiLCJmbmMiLCJuZXh0S2V5VGltZSIsImtleVRpbWUiLCJlbmRWYWx1ZSIsImluZCIsImRpc3RhbmNlSW5MaW5lIiwic2VnbWVudFBlcmMiLCJvdXRYIiwib3V0WSIsImluWCIsImluWSIsImtleVZhbHVlIiwicXVhdFN0YXJ0IiwicXVhdEVuZCIsInRpbWUiLCJvdXQiLCJheCIsImF5IiwiYXoiLCJhdyIsImJ4IiwiYnkiLCJieiIsImJ3Iiwib21lZ2EiLCJjb3NvbSIsInNpbm9tIiwic2NhbGUwIiwic2NhbGUxIiwicXVhdCIsInF4IiwicXkiLCJxeiIsInF3IiwiaGVhZGluZyIsImF0dGl0dWRlIiwiYmFuayIsInZhbHVlcyIsImMxIiwiYzIiLCJjMyIsInMxIiwiczIiLCJzMyIsInciLCJ5IiwieiIsImVuZFRpbWUiLCJyZW5kZXJSZXN1bHQiLCJtdWx0aXBsaWVkVmFsdWUiLCJmaW5hbFZhbHVlIiwiZWZmZWN0RnVuY3Rpb24iLCJlbGVtIiwibXVsdCIsImNvbnRhaW5lciIsInRvIiwidGkiLCJhcnJMZW4iLCJnZXRQcm9wIiwicG9zIiwicmVwbGFjZSIsInZYIiwidlkiLCJvWCIsIm9ZIiwiaVgiLCJpWSIsIm5ld1BhdGgiLCJ2ZXJ0aWNlcyIsIm91dFBvaW50cyIsImluUG9pbnRzIiwiY250Iiwic2hhcGVQYXRoIiwiY2xvbmUiLCJzaGFwZSIsImNsb25lZCIsIm5ld1NoYXBlQ29sbGVjdGlvbiIsInNoYXBlQ29sbGVjdGlvbiIsImluaXRGcmFtZSIsImludGVycG9sYXRlU2hhcGUiLCJwcmV2aW91c1ZhbHVlIiwia2V5UHJvcFMiLCJrZXlQcm9wRSIsImlzSG9sZCIsInZlcnRleFZhbHVlIiwia2YiLCJpbnRlcnBvbGF0ZVNoYXBlQ3VycmVudFRpbWUiLCJsYXN0RnJhbWUiLCJyZXNldFNoYXBlIiwic2hhcGVzRXF1YWwiLCJzaGFwZTEiLCJzaGFwZTIiLCJzZXRWVmFsdWUiLCJwcm9jZXNzRWZmZWN0c1NlcXVlbmNlIiwiU2hhcGVQcm9wZXJ0eSIsImFkZEVmZmVjdCIsIktleWZyYW1lZFNoYXBlUHJvcGVydHkiLCJFbGxTaGFwZVByb3BlcnR5IiwiY1BvaW50IiwiRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJwMCIsInAxIiwiczAiLCJfY3ciLCJfdiIsIlN0YXJTaGFwZVByb3BlcnR5IiwiU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5IiwibnVtUHRzIiwiYW5nbGUiLCJsb25nRmxhZyIsImxvbmdSYWQiLCJzaG9ydFJhZCIsImxvbmdSb3VuZCIsInNob3J0Um91bmQiLCJsb25nUGVyaW1TZWdtZW50Iiwic2hvcnRQZXJpbVNlZ21lbnQiLCJyYWQiLCJyb3VuZG5lc3MiLCJwZXJpbVNlZ21lbnQiLCJjdXJyZW50QW5nIiwib3giLCJveSIsIlJlY3RTaGFwZVByb3BlcnR5IiwiUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5IiwidjAiLCJ2MSIsInJvdW5kIiwiZ2V0U2hhcGVQcm9wIiwiZGF0YVByb3AiLCJnZXRDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbiIsIl9jb3MiLCJfc2luIiwiX3RhbiIsIl9ybmQiLCJyZXNldCIsInJvdGF0ZSIsIm1Db3MiLCJtU2luIiwicm90YXRlWCIsInJvdGF0ZVkiLCJyb3RhdGVaIiwic2hlYXIiLCJzeCIsInN5Iiwic2tldyIsInNrZXdGcm9tQXhpcyIsInNjYWxlIiwic3oiLCJzZXRUcmFuc2Zvcm0iLCJsIiwibSIsIm4iLCJvIiwidHJhbnNsYXRlIiwidHgiLCJ0eSIsInR6IiwidHJhbnNmb3JtIiwiYTIiLCJiMiIsImQyIiwiZTIiLCJmMiIsImcyIiwiaDIiLCJpMiIsImoyIiwiazIiLCJsMiIsIm0yIiwibjIiLCJvMiIsInAyIiwiX3AiLCJhMSIsImIxIiwiZDEiLCJlMSIsImYxIiwiZzEiLCJoMSIsImkxIiwiajEiLCJrMSIsImwxIiwibTEiLCJuMSIsIm8xIiwibXVsdGlwbHkiLCJtYXRyaXgiLCJtYXRyaXhQcm9wcyIsImlzSWRlbnRpdHkiLCJlcXVhbHMiLCJtYXRyIiwiY2xvbmVGcm9tUHJvcHMiLCJwcm9wcyIsImFwcGx5VG9Qb2ludCIsImFwcGx5VG9YIiwiYXBwbHlUb1kiLCJhcHBseVRvWiIsImdldEludmVyc2VNYXRyaXgiLCJkZXRlcm1pbmFudCIsImludmVyc2VNYXRyaXgiLCJpbnZlcnNlUG9pbnQiLCJwdCIsImludmVyc2VQb2ludHMiLCJwdHMiLCJyZXRQdHMiLCJhcHBseVRvVHJpcGxlUG9pbnRzIiwicDQiLCJwNSIsInAxMiIsInAxMyIsImFwcGx5VG9Qb2ludEFycmF5IiwiYXBwbHlUb1BvaW50U3RyaW5naWZpZWQiLCJ0b0NTUyIsImNzc1ZhbHVlIiwicm91bmRNYXRyaXhQcm9wZXJ0eSIsInRvMmRDU1MiLCJfYSIsIl9iIiwiX2MiLCJfZCIsIl9lIiwiX2YiLCJocmVmIiwicHJlZml4IiwicGx1Z2luIiwidmFyaWFibGUiLCJ2YXJzIiwicGFpciIsIm1vZGlmaWVycyIsInJlZ2lzdGVyTW9kaWZpZXIiLCJnZXRNb2RpZmllciIsInNoYXBlTGVuZ3RoIiwidG90YWxNb2RpZmllckxlbmd0aCIsInNoYXBlU2VnbWVudHMiLCJzZWdtZW50T2IiLCJzaGFwZVMiLCJzaGFwZUUiLCJwYXRoc0RhdGEiLCJfaXNGaXJzdEZyYW1lIiwiX3MiLCJzaGFwZVBhdGhzIiwidG90YWxTaGFwZUxlbmd0aCIsImxvY2FsU2hhcGVDb2xsZWN0aW9uIiwiZWRnZXMiLCJuZXdTaGFwZXNEYXRhIiwibGFzdFNoYXBlSW5Db2xsZWN0aW9uIiwibGFzdFNoYXBlIiwibmV3UGF0aHMiLCJuZXdTaGFwZSIsInNoYXBlU2VnbWVudCIsImN1cnJlbnRMZW5ndGhEYXRhIiwic2VnbWVudENvdW50Iiwic2VnbWVudExlbmd0aCIsImFtb3VudCIsImNlbnRlclBvaW50IiwicGF0aExlbmd0aCIsImNsb25lZFBhdGgiLCJkZWZhdWx0VmVjdG9yIiwiYXBwbHlUb01hdHJpeCIsIm1hdCIsIl9tZGYiLCJwcm9jZXNzS2V5cyIsImZvcmNlUmVuZGVyIiwiZnJhbWVSYXRlIiwidjIiLCJweCIsInB5IiwicHJlY2FsY3VsYXRlTWF0cml4IiwiYXV0b09yaWVudCIsImFkZER5bmFtaWNQcm9wZXJ0eSIsIlRyYW5zZm9ybVByb3BlcnR5IiwiZ2V0VHJhbnNmb3JtUHJvcGVydHkiLCJwTWF0cml4Iiwick1hdHJpeCIsInNNYXRyaXgiLCJpbnYiLCJzY2FsZVgiLCJzY2FsZVkiLCJlbGVtc0RhdGEiLCJlbGVtZW50cyIsIm5ld0VsZW1lbnRzIiwicmVuZGVyRmxhZyIsIml0ZW1zIiwiaXRlbXNUcmFuc2Zvcm0iLCJjb250IiwiaGFzUmVsb2FkZWQiLCJjb3BpZXMiLCJncm91cCIsImVsZW1zIiwidHJhbnNmb3JtRGF0YSIsIm9mZnNldE1vZHVsbyIsInJvdW5kT2Zmc2V0IiwicFByb3BzIiwiclByb3BzIiwic1Byb3BzIiwiaXRlcmF0aW9uIiwiY3VycmVudFYiLCJjdXJyZW50SSIsImN1cnJlbnRPIiwiY2xvc2VyViIsImRpc3RhbmNlIiwibmV3UG9zUGVyYyIsInJkIiwic2luZ2xlUm9vdCIsImRlbHRhIiwicDMiLCJsaW5lYXJpemUiLCJjb2VmZngiLCJjb2VmZnkiLCJkZW5vbSIsInRjdXNwIiwic3F1YXJlIiwicm9vdCIsInAxMCIsInAxMSIsInAyMCIsInAyMSIsImJleiIsImJvdW5kcyIsInQyIiwic3BsaXQiLCJkZXB0aCIsInRvbGVyYW5jZSIsImludGVyc2VjdGlvbnMiLCJtYXhSZWN1cnNpb24iLCJkMXMiLCJkMnMiLCJvdGhlciIsIm5leHRJbmRleCIsInN0YXJ0MSIsImVuZDEiLCJzdGFydDIiLCJlbmQyIiwidjMiLCJ2NCIsIm91dHB1dEJlemllciIsImRpcmVjdGlvbiIsImFtcGxpdHVkZSIsIm91dEFtcGxpdHVkZSIsImluQW1wbGl0dWRlIiwiYW5nTyIsImFuZ0kiLCJ2ZWN0b3IiLCJyb3QiLCJyb3RhdGVkVmVjdG9yIiwiY3VyIiwicHJldkluZGV4IiwicHJldlBvaW50IiwibmV4dFBvaW50IiwicFZlY3RvciIsImZyZXF1ZW5jeSIsInBvaW50VHlwZSIsInByZXZEaXN0IiwibmV4dERpc3QiLCJjb3VudCIsInAxYSIsInAxYiIsInAyYiIsInAyYSIsInNlZzEiLCJzZWcyIiwibGluZUpvaW4iLCJtaXRlckxpbWl0IiwiYW5nbGVPdXQiLCJhbmdsZUluIiwiY2VudGVyIiwicmFkaXVzIiwidGFuIiwiaW50ZXJzZWN0aW9uIiwiaW50ZXJzZWN0Iiwib3V0YSIsIm91dGIiLCJmbGV4IiwibGVmdCIsInJpZ2h0IiwibWlkIiwiaW5wdXRCZXppZXIiLCJtdWx0aVNlZ21lbnRzIiwibGFzdFNlZyIsIm11bHRpU2VnbWVudCIsImZvbnREYXRhIiwic3R5bGVzIiwiZldlaWdodCIsImZTdHlsZSIsInN0eWxlTmFtZSIsIm1heFdhaXRpbmdUaW1lIiwiZW1wdHlDaGFyIiwiY29tYmluZWRDaGFyYWN0ZXJzIiwiQkxBQ0tfRkxBR19DT0RFX1BPSU5UIiwiQ0FOQ0VMX1RBR19DT0RFX1BPSU5UIiwiQV9UQUdfQ09ERV9QT0lOVCIsIlpfVEFHX0NPREVfUE9JTlQiLCJWQVJJQVRJT05fU0VMRUNUT1JfMTZfQ09ERV9QT0lOVCIsIlpFUk9fV0lEVEhfSk9JTkVSX0NPREVfUE9JTlQiLCJSRUdJT05BTF9DSEFSQUNURVJfQV9DT0RFX1BPSU5UIiwiUkVHSU9OQUxfQ0hBUkFDVEVSX1pfQ09ERV9QT0lOVCIsInN1cnJvZ2F0ZU1vZGlmaWVycyIsInRyaW1Gb250T3B0aW9ucyIsImZvbnQiLCJmYW1pbHlBcnJheSIsImVuYWJsZWRGYW1pbGllcyIsInNldFVwTm9kZSIsImZhbWlseSIsInBhcmVudE5vZGUiLCJub2RlIiwiY2hlY2tMb2FkZWRGb250cyIsImxvYWRlZENvdW50IiwiY3JlYXRlSGVscGVyIiwiZGVmIiwiZW5naW5lIiwiaGVscGVyIiwiZm9udFByb3BzIiwidEhlbHBlciIsInRDYW52YXNIZWxwZXIiLCJtZWFzdXJlIiwidGV4dCIsImFkZEZvbnRzIiwiZGVmcyIsImZvbnRBcnIiLCJfcGVuZGluZ0ZvbnRzIiwic2hvdWxkTG9hZEZvbnQiLCJsb2FkZWRTZWxlY3RvciIsInNjIiwiYWRkQ2hhcnMiLCJmb3VuZCIsImdldENoYXJEYXRhIiwiX2NoYXIiLCJzdHlsZSIsIm1lYXN1cmVUZXh0IiwiX2NoYXIyIiwiZm9udE5hbWUiLCJzaXplIiwiZG91YmxlU2l6ZSIsInNpbmdsZVNpemUiLCJnZXRGb250QnlOYW1lIiwiZ2V0Q29kZVBvaW50Iiwic3RyaW5nIiwiY29kZVBvaW50Iiwic2Vjb25kIiwiaXNNb2RpZmllciIsImZpcnN0Q2hhckNvZGUiLCJzZWNvbmRDaGFyQ29kZSIsInN1bSIsImlzWmVyb1dpZHRoSm9pbmVyIiwiY2hhckNvZGUiLCJpc1ZhcmlhdGlvblNlbGVjdG9yIiwiaXNSZWdpb25hbENvZGUiLCJpc0ZsYWdFbW9qaSIsImlzQ29tYmluZWRDaGFyYWN0ZXIiLCJfY2hhcjMiLCJpc1JlZ2lvbmFsRmxhZyIsInNldElzTG9hZGVkIiwiRm9udCIsImZvbnRQcm90b3R5cGUiLCJjb21wb25lbnQiLCJudW0iLCJibGVuZE1vZGVFbnVtcyIsIm1vZGUiLCJlZmZlY3RzIiwiZWZmZWN0SXRlbSIsImVmZiIsImV4cHJlc3Npb25zSW50ZXJmYWNlcyIsIkxheWVyRXhwcmVzc2lvbkludGVyZmFjZSIsIkVmZmVjdHNFeHByZXNzaW9uSW50ZXJmYWNlIiwiU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlIiwiVGV4dEV4cHJlc3Npb25JbnRlcmZhY2UiLCJDb21wRXhwcmVzc2lvbkludGVyZmFjZSIsImVmZmVjdHNJbnRlcmZhY2UiLCJibGVuZE1vZGVWYWx1ZSIsImdsb2JhbERhdGEiLCJpc1Zpc2libGUiLCJGb290YWdlSW50ZXJmYWNlIiwidGltZVJlbWFwcGVkIiwidG90YWxWb2x1bWUiLCJ2b2x1bWVWYWx1ZSIsImxheWVyIiwicEludGVyZmFjZSIsInBhcmVudE5hbWUiLCJoaWVyYXJjaHkiLCJwYXRoVmFsdWUiLCJmb250c0NvbnRhaW5lciIsImZpbmFsTWF0IiwibG9jYWxNYXQiLCJsbWF0IiwibG9jYWxPcCIsInRyYW5zZm9ybUVmZmVjdHMiLCJ0cmFuc2Zvcm1zIiwicHROZXciLCJwcm9wZXJ0aWVzIiwiY3VycmVudE1hc2tzIiwibGF5ZXJJZCIsInJlY3QiLCJleHBhbnNvciIsImZlTW9ycGgiLCJtYXNrVHlwZSIsIm1hc2tSZWYiLCJmaWx0ZXJJRCIsIm1hc2siLCJpc0ZpcnN0RnJhbWUiLCJwYXRoTm9kZXMiLCJ2aWV3RGF0YSIsInBhdGhTdHJpbmciLCJwYXRoU2hhcGVWYWx1ZSIsImNyZWF0ZUZpbHRlciIsImNyZWF0ZUFscGhhVG9MdW1pbmFuY2VGaWx0ZXIiLCJmaWxJZCIsInNraXBDb29yZGluYXRlcyIsImZpbCIsImZlQ29sb3JNYXRyaXgiLCJzb3VyY2UiLCJmaWx0ZXJNYW5hZ2VyIiwiRWZmZWN0IiwiZWZmZWN0IiwiY291bnRzQXNFZmZlY3QiLCJsYXllckVsZW1lbnRQYXJlbnQiLCJnZyIsImNwIiwiY2xpcElkIiwiY3BHcm91cCIsIm1hdHRlVHlwZSIsInVzZUVsZW1lbnQiLCJtYXNrZXIiLCJtYXNrR3JvdXAiLCJtYXNrR3JvdXBlciIsImZlQ1RyIiwiZmVGdW5jIiwiYWxwaGFSZWN0IiwiX3Byb3RvdHlwZSIsInBvc2l0aW9uIiwic2hvdWxkQnJlYWtQcm9jZXNzIiwidHJhbnNmb3JtZXJzIiwibGV2ZWwiLCJzdHlsZU9iIiwiY0xlbmd0aCIsImRpZmYiLCJwYXRoRWxlbWVudCIsImdyYWRpZW50SWQiLCJnZmlsbCIsInN0b3BzIiwibWFza0VsZW1lbnQiLCJvcGFjaXR5SWQiLCJtYXNrSWQiLCJvcEZpbGwiLCJtUHJvcHMiLCJvcCIsIl9vIiwiX2kiLCJzaGFwZVN0cmluZyIsIl9pZGVudGl0eU1hdHJpeCIsIl9tYXRyaXhIZWxwZXIiLCJjcmVhdGVSZW5kZXJGdW5jdGlvbiIsInJlbmRlckZpbGwiLCJyZW5kZXJHcmFkaWVudCIsInJlbmRlckdyYWRpZW50U3Ryb2tlIiwicmVuZGVyU3Ryb2tlIiwicmVuZGVyUGF0aCIsInJlbmRlckNvbnRlbnRUcmFuc2Zvcm0iLCJyZW5kZXJOb29wIiwic3R5bGVEYXRhIiwiaXRlbURhdGEiLCJwYXRoU3RyaW5nVHJhbnNmb3JtZWQiLCJyZWRyYXciLCJsTGVuIiwibHZsIiwicGF0aHMiLCJpdGVyYXRpb25zIiwic3R5bGVFbGVtIiwiaGFzT3BhY2l0eSIsImF0dHIxIiwiYXR0cjIiLCJjVmFsdWVzIiwib1ZhbHVlcyIsImFuZyIsInRlbXBTaGFwZXMiLCJhcmVBbmltYXRlZCIsImVsZW1lbnREYXRhIiwiR3JhZGllbnRDb25zdHJ1Y3RvciIsInRyYW5zZm9ybVByb3BlcnR5Iiwib3duVHJhbnNmb3JtZXJzIiwic2hhcGVQcm9wZXJ0eSIsIml0ZW1zRGF0YSIsInByZXZWaWV3RGF0YSIsInJlbmRlciIsIm93blN0eWxlcyIsIm93bk1vZGlmaWVycyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJtb2RpZmllciIsInByb2Nlc3NlZFBvcyIsImFuaW1hdGVkQ29udGVudCIsInN3IiwiZmMiLCJ1cGRhdGVkIiwiX2ZpbmFsVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJjdXJyZW50SW5kZXgiLCJ0ZXh0S2V5cyIsImNoYXJhY3RlcnNBcnJheSIsInNob3VsZENvbWJpbmUiLCJzaG91bGRDb21iaW5lTmV4dCIsImN1cnJlbnRDaGFycyIsImZvbnRNYW5hZ2VyIiwibGV0dGVycyIsIm5ld0xpbmVGbGFnIiwiYW5jaG9yR3JvdXBpbmciLCJjdXJyZW50U2l6ZSIsImN1cnJlbnRQb3MiLCJjdXJyZW50TGluZSIsImxpbmVXaWR0aHMiLCJsaW5lV2lkdGgiLCJtYXhMaW5lV2lkdGgiLCJ0cmFja2luZ09mZnNldCIsImJveFdpZHRoIiwiYm94SGVpZ2h0IiwiY3VycmVudEhlaWdodCIsImZpbmFsVGV4dCIsImxhc3RTcGFjZUluZGV4IiwidW5jb2xsYXBzZWRTcGFjZXMiLCJjdXJyZW50Q2hhciIsImFuaW1hdG9ycyIsImFuaW1hdG9yRGF0YSIsImxldHRlckRhdGEiLCJiYXNlZCIsImluZGV4ZXMiLCJjdXJyZW50SW5kIiwibmV3SW5kIiwibmV3RGF0YSIsImREYXRhIiwiX2NhblJlc2l6ZSIsIl9mb250VmFsdWUiLCJmbG9vciIsIlRleHRTZWxlY3RvclByb3BGYWN0b3J5IiwiZWFzZXIiLCJ0b3QiLCJzbW9vdGhuZXNzIiwidGhyZXNob2xkIiwibmV3Q2hhcnNGbGFnIiwiZGl2aXNvciIsImdldFRleHRTZWxlY3RvclByb3AiLCJhbmltYXRvclByb3BzIiwiZGVmYXVsdERhdGEiLCJ0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcyIsInRleHREYXRhIiwicmVuZGVyVHlwZSIsImxldHRlcnNDaGFuZ2VkRmxhZyIsImFsaWdubWVudCIsIm1hdHJpeEhlbHBlciIsInJlbmRlcmVkTGV0dGVyc0NvdW50IiwieFBvcyIsInlQb3MiLCJwYXRoSW5mbyIsImN1cnJlbnRMZW5ndGgiLCJjdXJyZW50UG9pbnQiLCJwb2ludEluZCIsInNlZ21lbnRJbmQiLCJwYXJ0aWFsTGVuZ3RoIiwidGFuQW5nbGUiLCJ5T2ZmIiwiZmlyc3RMaW5lIiwiYW5pbWF0b3JTZWxlY3RvciIsImxldHRlclZhbHVlIiwib2ZmZiIsInhQYXRoUG9zIiwieVBhdGhQb3MiLCJpbml0UGF0aFBvcyIsImluaXRTZWdtZW50SW5kIiwiaW5pdFBvaW50SW5kIiwiZWxlbU9wYWNpdHkiLCJsZXR0ZXJTdyIsImxldHRlclNjIiwibGV0dGVyRmMiLCJsZXR0ZXJNIiwibGV0dGVyUCIsImxldHRlck8iLCJhbmltYXRvckp1c3RpZnlPZmZzZXQiLCJhbmltYXRvckZpcnN0Q2hhck9mZnNldCIsImp1c3RpZnlPZmZzZXRNdWx0IiwibGFzdEluZGV4IiwiaXNOZXdMaW5lIiwiYW5pbWF0b3JPZmZzZXQiLCJzaGFwZVN0ciIsIl9mb250U2l6ZSIsImxpbmVOdW1iZXIiLCJjb2xvckRhdGEiLCJ0ZXh0QXJyYXkiLCJ0ZXh0Q29udGVudHMiLCJjdXJyZW50VGV4dENvbnRlbnQiLCJzaGFwZUl0ZW0iLCJ1c2VzR2x5cGhzIiwidFNwYW4iLCJzaW5nbGVTaGFwZSIsInRFbGVtZW50IiwianVzdGlmeSIsInRleHRDb250ZW50IiwiY2FjaGVkU3BhbnNMZW5ndGgiLCJjaGlsZFNwYW4iLCJnbHlwaEVsZW1lbnQiLCJnbHlwaCIsInRleHRCb3giLCJyZW5kZXJlZExldHRlcnMiLCJyZW5kZXJlZExldHRlciIsInRleHRTcGFuIiwiZWxlbWVudEluZGV4IiwibWF0dGVFbGVtZW50IiwibWF0dGVNYXNrIiwibmV4dEVsZW1lbnQiLCJhbmltYXRpb25JdGVtIiwiY29uZmlnIiwiYXJpYUxhYmVsIiwidGl0bGVFbGVtZW50IiwidGl0bGVJZCIsImRlc2NFbGVtZW50IiwiZGVzY0lkIiwic2VxdWVuY2UiLCJsdW1hQnVmZmVyIiwibHVtYUJ1ZmZlckN0eCIsInN2ZyIsImNyZWF0ZUx1bWFTdmdGaWx0ZXIiLCJfc3ZnIiwibG9hZEx1bWEiLCJnZXRMdW1hIiwiaGFzTWFza3MiLCJjYW52YXNDb250ZXh0IiwiYnVmZmVyQ2FudmFzIiwiYnVmZmVyQ2FudmFzMiIsImJ1ZmZlciIsImJ1ZmZlckN0eCIsImZvcmNlUmVhbFN0YWNrIiwidHJhbnNmb3Jtc01hbmFnZXIiLCJzdHlsZWRTaGFwZSIsInNob3VsZFJlbmRlciIsIm93blRyYW5zZm9ybXMiLCJwYXJlbnRUcmFuc2Zvcm0iLCJncm91cFRyYW5zZm9ybSIsIm5vZGVzIiwiY3VycmVudFN0eWxlIiwiaXNNYWluIiwic2hhcGVOb2RlcyIsImdyb3VwVHJhbnNmb3JtTWF0IiwiZ3JkIiwib3BhY2l0eSIsImhhc0ZpbGwiLCJoYXNTdHJva2UiLCJjb21tYW5kcyIsInBhdGhBcnIiLCJjb21tYW5kc0NvdW50ZXIiLCJsYXN0RmlsbCIsImxhc3RTdHJva2UiLCJsYXN0U3Ryb2tlVyIsImltZ1ciLCJpbWdIIiwiaW1nUmVsIiwiY2FudmFzUmVsIiwid2lkdGhDcm9wIiwiaGVpZ2h0Q3JvcCIsInBhciIsInJ1bGUiLCJhY3Rpb25GbGFnIiwiY29udGFpbmVyU3R5bGUiLCJvcmlnaW4iLCJlbGVtZW50V2lkdGgiLCJlbGVtZW50SGVpZ2h0IiwiZWxlbWVudFJlbCIsImFuaW1hdGlvblJlbCIsImZpbGxUeXBlIiwibmV3TGVuZ3RoIiwiZm9yY2VSZXN0b3JlIiwiY3VycmVudENvbnRleHQiLCJwcmV2U3RhY2siLCJzYXZlT25OYXRpdmVGbGFnIiwiY3VycmVudFN0YWNrIiwibmV3U3RhY2siLCJ0clByb3BzIiwiY3VycmVudE9wYWNpdHkiLCJ0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZSIsIm1hdHJpeFZhbHVlIiwiaXRlbSIsImJvdW5kaW5nQm94IiwidlBvaW50Iiwib1BvaW50IiwibmV4dElQb2ludCIsIm5leHRWUG9pbnQiLCJiMmFjIiwid2lkdGhQcm9wZXJ0eSIsImtmdyIsInRlbXBCb3VuZGluZ0JveCIsImNoYW5nZWQiLCJzaGFwZVN0eWxlIiwic2hhcGVUcmFuc2Zvcm0iLCJpbm5lckVsZW1TdHlsZSIsInRleHRDb2xvciIsInRQYXJlbnQiLCJ0Q29udCIsInRDb250U3R5bGUiLCJ0Q29udFRyYW5zbGF0aW9uIiwidFN0eWxlIiwidFNwYW5UcmFuc2xhdGlvbiIsInN2Z1N0eWxlIiwidHJhbnNsYXRpb24iLCJ0ZXh0UGF0aCIsIm1hcmdpbiIsInN2Z1RyYW5zZm9ybSIsInBlcnNwZWN0aXZlU3R5bGUiLCJwZXJzcGVjdGl2ZSIsIm1UcmFuc2YiLCJkaWZmVmVjdG9yIiwibWFnIiwibG9va0RpciIsImxvb2tMZW5ndGhPblhaIiwibVJvdGF0aW9uWCIsIm1Sb3RhdGlvblkiLCJoYXNNYXRyaXhDaGFuZ2VkIiwibWF0VmFsdWUiLCJuZXdET01FbGVtZW50IiwibmV4dERPTUVsZW1lbnQiLCJuZXh0TGF5ZXIiLCJ0bXBET01FbGVtZW50IiwicGVyc3BlY3RpdmVFbGVtIiwidGhyZWVEQ29udGFpbmVyRGF0YSIsImxhc3RUaHJlZURDb250YWluZXJEYXRhIiwiY3VycmVudENvbnRhaW5lciIsInJlc2l6ZXJFbGVtIiwiY1dpZHRoIiwiY0hlaWdodCIsImZsb2F0aW5nQ29udGFpbmVyIiwiX3RoaXNMYXllckZ1bmN0aW9uIiwiY2h1bmtzIiwiZGlnaXRzIiwicm5nbmFtZSIsInN0YXJ0ZGVub20iLCJzaWduaWZpY2FuY2UiLCJvdmVyZmxvdyIsIm5vZGVjcnlwdG8iLCJzZWVkcmFuZG9tIiwic2VlZCIsIm9wdGlvbnMiLCJzaG9ydHNlZWQiLCJtaXhrZXkiLCJmbGF0dGVuIiwidG9zdHJpbmciLCJhdXRvc2VlZCIsImFyYzQiLCJBUkM0IiwicHJuZyIsImlzX21hdGhfY2FsbCIsInN0YXRlIiwiY29weSIsImtleWxlbiIsIm1lIiwicmVzdWx0IiwidHlwIiwic3RyaW5nc2VlZCIsInNtZWFyIiwiYnJvd3NlciIsInBsdWdpbnMiLCJCTU1hdGgiLCJ0T2ZWIiwidE9mQSIsImxlbkEiLCJyZXRBcnIiLCJ0T2ZCIiwibGVuQiIsIm1tIiwiYXJyMSIsImFycjIiLCJ2ZWMiLCJ0TWluIiwidE1heCIsInZhbHVlMSIsInZhbHVlMiIsIl90TWluIiwicm5kIiwicm5kbSIsImluVGFuZ2VudHMiLCJvdXRUYW5nZW50cyIsImFyclBsYWNlaG9sZGVyIiwiaW5WZXJ0ZXhQb2ludCIsIm91dFZlcnRleFBvaW50IiwiX3ZhbHVlIiwid2lnZ2xlIiwiZnJlcSIsImFtcCIsImlXaWdnbGUiLCJsZW5XaWdnbGUiLCJhZGRlZEFtcHMiLCJwZXJpb2RzIiwiZHVyYXRpb24iLCJlbGVtMSIsImVsZW0yIiwiZlZlYyIsInBpdGNoIiwieWF3IiwidmFsMSIsInZhbDIiLCJpS2V5IiwibGVuS2V5Iiwib2JLZXkiLCJmciIsImZwcyIsImZyYW1lc1BlclNlY29uZCIsImluaXRFeHByZXNzaW9ucyIsInN0YWNrQ291bnQiLCJyZWdpc3RlcnMiLCJwdXNoRXhwcmVzc2lvbiIsInBvcEV4cHJlc3Npb24iLCJyZWxlYXNlSW5zdGFuY2VzIiwicmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHkiLCJleHByZXNzaW9uIiwiTWFza0ludGVyZmFjZSIsIk1hc2tNYW5hZ2VyIiwibWFza01hbmFnZXIiLCJfbWFza3NJbnRlcmZhY2VzIiwibWFza0Z1bmN0aW9uIiwiZGVmYXVsdFVuaWRpbWVuc2lvbmFsVmFsdWUiLCJkZWZhdWx0TXVsdGlkaW1lbnNpb25hbFZhbHVlIiwiY29tcGxldGVQcm9wZXJ0eSIsImV4cHJlc3Npb25WYWx1ZSIsInByb3BlcnR5IiwidmFsdWVQcm9wIiwiVW5pZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZSIsIk11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZSIsImFyclZhbHVlIiwiZGVmYXVsdEdldHRlciIsIl90aGlzRnVuY3Rpb24iLCJfcHgiLCJfcHkiLCJfcHoiLCJfdHJhbnNmb3JtRmFjdG9yeSIsImdldE1hdHJpeCIsInRvV29ybGRNYXQiLCJwcm9wTWF0cml4IiwidHJhbnNmb3JtTWF0IiwidG9Xb3JsZFZlYyIsInRvV29ybGQiLCJmcm9tV29ybGRWZWMiLCJmcm9tV29ybGQiLCJhcHBseVBvaW50IiwiaW52ZXJ0UG9pbnQiLCJmcm9tQ29tcCIsInNhbXBsZUltYWdlIiwidHJhbnNmb3JtSW50ZXJmYWNlIiwiX3JlZ2lzdGVyTWFza0ludGVyZmFjZSIsIl9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UiLCJhbmNob3JQb2ludERlc2NyaXB0b3IiLCJpbnRlcmZhY2VGdW5jdGlvbiIsInBhcmVudFByb3BlcnR5R3JvdXAiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eUdyb3VwIiwiX3Byb3BlcnR5R3JvdXAiLCJjcmVhdGVFZmZlY3RzSW50ZXJmYWNlIiwiZWZmZWN0RWxlbWVudHMiLCJlZmZlY3RzRGF0YSIsImNyZWF0ZUdyb3VwSW50ZXJmYWNlIiwiZ3JvdXBJbnRlcmZhY2UiLCJjcmVhdGVWYWx1ZUludGVyZmFjZSIsImV4cHJlc3Npb25Qcm9wZXJ0eSIsInZpZXciLCJpdGVyYXRlRWxlbWVudHMiLCJncm91cEludGVyZmFjZUZhY3RvcnkiLCJmaWxsSW50ZXJmYWNlRmFjdG9yeSIsInN0cm9rZUludGVyZmFjZUZhY3RvcnkiLCJ0cmltSW50ZXJmYWNlRmFjdG9yeSIsImVsbGlwc2VJbnRlcmZhY2VGYWN0b3J5Iiwic3RhckludGVyZmFjZUZhY3RvcnkiLCJyZWN0SW50ZXJmYWNlRmFjdG9yeSIsInJvdW5kZWRJbnRlcmZhY2VGYWN0b3J5IiwicmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5IiwiZ3JhZGllbnRGaWxsSW50ZXJmYWNlRmFjdG9yeSIsImRlZmF1bHRJbnRlcmZhY2VGYWN0b3J5IiwiY29udGVudHNJbnRlcmZhY2VGYWN0b3J5IiwiaW50ZXJmYWNlcyIsInRyYW5zZm9ybUludGVyZmFjZUZhY3RvcnkiLCJjb250ZW50IiwiX2Rhc2hQcm9wZXJ0eUdyb3VwIiwiZGFzaE9iIiwiYWRkUHJvcGVydHlUb0Rhc2hPYiIsIl9pbnRlcmZhY2VGdW5jdGlvbiIsInBhcmVudEdyb3VwV3JhcHBlciIsIl9zb3VyY2VUZXh0Iiwic3RyaW5nVmFsdWUiLCJvdXRsaW5lSW50ZXJmYWNlRmFjdG9yeSIsImN1cnJlbnRQcm9wZXJ0eU5hbWUiLCJjdXJyZW50UHJvcGVydHkiLCJzZWFyY2hQcm9wZXJ0eSIsInByb3BlcnR5TmFtZUluZGV4IiwiZGF0YUludGVyZmFjZUZhY3RvcnkiLCJzZWFyY2hFeHByZXNzaW9ucyIsImdldFZhbHVlQXRUaW1lIiwiZ2V0U3BlZWRBdFRpbWUiLCJzcGVlZCIsImdldFZlbG9jaXR5QXRUaW1lIiwidmVsb2NpdHkiLCJnZXRTdGF0aWNWYWx1ZUF0VGltZSIsInNldEdyb3VwUHJvcGVydHkiLCJsb29wT3V0IiwiZHVyYXRpb25GbGFnIiwiY3VycmVudEZyYW1lIiwia2V5ZnJhbWVzIiwibGFzdEtleUZyYW1lIiwiY3ljbGVEdXJhdGlvbiIsImZpcnN0S2V5RnJhbWUiLCJyZXQiLCJpbml0ViIsImVuZFYiLCJjdXJyZW50IiwicmVwZWF0cyIsImxhc3RWYWx1ZSIsIm5leHRMYXN0VmFsdWUiLCJsb29wSW4iLCJmaXJzdFZhbHVlIiwibmV4dEZpcnN0VmFsdWUiLCJzbW9vdGgiLCJzYW1wbGVzIiwiZW5kRnJhbWUiLCJzYW1wbGVGcmVxdWVuY3kiLCJzYW1wbGVWYWx1ZSIsImdldFRyYW5zZm9ybVZhbHVlQXRUaW1lIiwiYW5jaG9yIiwic2tld0F4aXMiLCJyb3RhdGlvbiIsInJvdGF0aW9uWiIsInJvdGF0aW9uWSIsInJvdGF0aW9uWCIsIm9yaWVudGF0aW9uIiwicG9zaXRpb25YIiwicG9zaXRpb25ZIiwicG9zaXRpb25aIiwiZ2V0VHJhbnNmb3JtU3RhdGljVmFsdWVBdFRpbWUiLCJwcm9wZXJ0eUdldFByb3AiLCJnZXRTaGFwZVZhbHVlQXRUaW1lIiwiU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24iLCJLZXlmcmFtZWRTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbiIsIlNoYXBlRXhwcmVzc2lvbnMiLCJhY2N1bXVsYXRlZExlbmd0aCIsImluaXRJbmRleCIsImVuZEluZGV4IiwidmVjdG9yVHlwZSIsInhMZW5ndGgiLCJ5TGVuZ3RoIiwibWFnbml0dWRlIiwidW5pdFZlY3RvciIsInByb3BlcnR5R2V0U2hhcGVQcm9wIiwidHJpbXMiLCJpc0tleWZyYW1lZCIsImhhc0V4cHJlc3Npb25zIiwiY3JlYXRlTWVyZ2VOb2RlIiwicmVzdWx0SWQiLCJpbnMiLCJmZU1lcmdlIiwiZmVNZXJnZU5vZGUiLCJmaWx0ZXIiLCJjb2xvckJsYWNrIiwiY29sb3JXaGl0ZSIsImVsZW1DaGlsZHJlbiIsImdyb3VwUGF0aCIsImRhc2hhcnJheVZhbHVlIiwibGluZUxlbmd0aCIsInVuaXRzIiwiZmVDb21wb25lbnRUcmFuc2ZlciIsImZlRnVuY1IiLCJmZUZ1bmNHIiwiZmVGdW5jQiIsImNvbG9yMSIsImNvbG9yMiIsImNvbG9yMyIsInRhYmxlUiIsInRhYmxlRyIsInRhYmxlQiIsImlucHV0QmxhY2siLCJpbnB1dFdoaXRlIiwiZ2FtbWEiLCJvdXRwdXRCbGFjayIsIm91dHB1dFdoaXRlIiwidGFibGUiLCJjb2xvclZhbHVlIiwib3V0cHV0RGVsdGEiLCJpbnB1dERlbHRhIiwiZ2xvYmFsRmlsdGVyU2l6ZSIsImZpbHRlclNpemUiLCJmZUdhdXNzaWFuQmx1ciIsImZlT2Zmc2V0IiwiZmVGbG9vZCIsImZlQ29tcG9zaXRlIiwiY29sIiwiZmlsdGVyRWxlbSIsInN5bWJvbElkIiwiY2hpbGRyZW4iLCJuZXh0Q2hpbGQiLCJ1c2VFbGVtIiwic3ltYm9sIiwia0JsdXJyaW5lc3NUb1NpZ21hIiwic2lnbWEiLCJkaW1lbnNpb25zIiwic2lnbWFYIiwic2lnbWFZIiwiZWRnZU1vZGUiLCJlZmZlY3RzTWFuYWdlciIsImZvcmNlRnJhbWUiLCJpc1VuaWZvcm1TY2FsZSIsInNjYWxlSGVpZ2h0Iiwic2NhbGVX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QUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFDbEIrRCxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0YsRUFBS0UsRUFDbENFLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUNiRyxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0osRUFBU0UsRUFBS0UsRUFBS0osRUFDaERNLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFDbEIrRCxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0YsRUFBS0UsRUFDbENFLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFBS3lELEVBQ3ZCTSxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0osRUFBU0UsRUFBS0UsRUFBS0osRUFDaERNLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFDbEIrRCxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0YsRUFBS0UsRUFDbENFLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFBS3lELEVBQ3ZCTSxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0osRUFBU0UsRUFBS0UsRUFBS0osRUFDaERNLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFDbEIrRCxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0YsRUFBS0UsRUFDbENFLEVBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFJSCxFQUFLNUQsRUFBS3lELEVBQ3ZCTSxFQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBSUQsRUFBTUgsRUFBS0UsRUFBS0osRUFBU0Us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ekIsRUFBS3dCLEVBQUl2QixFQUFLd0IsRUFBSzNCLEVBQVFFLEVBQUt3QixFQUFJdkIsRUFBS3dCLEVBQUksQ0FBQyxLQUdyRixLQUFLLEVBQUUsWUFBWXpCLEVBQUt3QixFQUFJdkIsRUFBS3dCLEVBQUtDLEVBQU8xQixFQUFLd0IsRUFBSXZCLEVBQUt3QixFQUFLM0IsRUFBUUUsRUFBS3dCLEVBQUl2QixFQUFLd0IsRUFBS0MsRUFBTyxFQUFHLEVBQUksRUFFckdBLElBQVUsR0FDWixLQUFLLEVBQUUsWUFBWTFCLEVBQUt3QixFQUFLRSxFQUFPekIsRUFBS3dCLEVBQUl6QixFQUFLd0IsRUFBS0UsRUFBT3pCLEVBQUt3QixFQUFJekIsRUFBS3dCLEVBQUsxQixFQUFRRyxFQUFLd0IsRUFBSSxFQUFHLEVBQUksRUFDekcsS0FBSyxFQUFFLFlBQVl6QixFQUFLd0IsRUFBS0UsRUFBT3pCLEVBQUt3QixFQUFJekIsRUFBS3dCLEVBQUsxQixFQUFRRyxFQUFLd0IsRUFBSXpCLEVBQUt3QixFQUFLRSxFQUFPekIsRUFBS3dCLEVBQUksRUFBRyxFQUFJLEVBQ3pHLEtBQUssRUFBRSxZQUFZekIsRUFBS3dCLEVBQUl2QixFQUFLd0IsRUFBS0MsRUFBTzFCLEVBQUt3QixFQUFJdkIsRUFBS3dCLEVBQUtDLEVBQU8xQixFQUFLd0IsRUFBSXZCLEVBQUt3QixFQUFLM0IsRUFBUSxFQUFHLEVBQUksRUFDekcsS0FBSyxFQUFFLFlBQVlFLEVBQUt3QixFQUFJdkIsRUFBS3dCLEVBQUtDLEVBQU8xQixFQUFLd0IsRUFBSXZCLEVBQUt3QixFQUFLM0IsRUFBUUUsRUFBS3dCLEVBQUl2QixFQUFLd0IsRUFBS0MsRUFBTyxFQUFHLEVBQUksRUFDekcsS0FBSyxFQUFFLFlBQVkxQixFQUFLd0IsRUFBS0UsRUFBT3pCLEVBQUt3QixFQUFJekIsRUFBS3dCLEVBQUtFLEVBQU96QixFQUFLd0IsRUFBSXpCLEVBQUt3QixFQUFLMUIsRUFBUUcsRUFBS3dCLEVBQUksRUFBRyxFQUFJLEVBQ3pHLEtBQUssRUFBRSxZQUFZekIs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QUtBLElBQVEsS0FDbkUsS0FBSyxnQkFBZ0IsS0FBSyxRQUFTLEtBQUssUUFBUyxLQUFLLFFBQVMsS0FBSyxHQUFJLEVBQUcsRUFBSyxFQUdsRixLQUFLLE9BQU8sVUFBVThVLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxFQUFFLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxFQUFFLEVBQUdBLEVBQU8sRUFBRSxDQUFDLEVBQzFNLEtBQUssT0FBTyxVQUFVQyxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxFQUFFLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxFQUFFLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsQ0FBQyxFQUMxTSxLQUFLLE9BQU8sVUFBVUYsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxFQUFFLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxF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QVUsS0FBSyxVQUFVbnFDLENBQUMsRUFBRSxlQUFlLE1BQy9DLEtBQUssSUFBSSxVQUFVLENBQUNtcUMsRUFBUSxFQUFFLEVBQUUsQ0FBQyxFQUFHLENBQUNBLEVBQVEsRUFBRSxFQUFFLENBQUMsRUFBR0EsRUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQ25FLEtBQUssSUFBSSxRQUFRLENBQUNBLEVBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQ0EsRUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUUsUUFBUUEsRUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQ3BGLEtBQUssSUFBSSxRQUFRLENBQUNBLEVBQVEsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDQSxFQUFRLEdBQUcsQ0FBQyxFQUFFLFFBQVFBLEVBQVEsR0FBRyxDQUFDLEVBQzNFLEtBQUssSUFBSSxNQUFNLEVBQUlBLEVBQVEsRUFBRSxFQUFFLENBQUMsRUFBRyxFQUFJQSxFQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUcsRUFBSUEsRUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQ3pFLEtBQUssSUFBSSxVQUFVQSxFQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUdBLEVBQVEsRUFBRSxFQUFFLENBQUMsRUFBR0EsRUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ2xFLENBU0gsR0FOSSxLQUFLLEVBQ1AsS0FBSyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBRTFELEtBQUssSUFBSSxVQUFVLENBQUMsS0FBSyxHQUFHLEVBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUdsRCxLQUFLLEVBQUcsQ0FDVixJQUFJQyxFQUVBLEtBQUssRUFDUEEsRUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBSSxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFJLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBRTdGQSxFQUFhLENBQUMsS0FBSyxHQUFHLEVBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFHLEtBQUssR0FBRyxFQUFJLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRyxLQUFLLEdBQUcsRUFBSSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFHekYsSUFBSUMsRUFBTSxLQUFLLEtBQUssS0FBSyxJQUFJRCxFQUFXLENBQUMsRUFBRyxDQUFDLEVBQUksS0FBSyxJQUFJQSxFQUFXLENBQUMsRUFBRyxDQUFDLEVBQUksS0FBSyxJQUFJQSxFQUFXLENBQUMsRUFBRyxDQUFDLENBQUMsRUFFcEdFLEVBQVUsQ0FBQ0YsRUFBVyxDQUFDLEVBQUlDLEVBQUtELEVBQVcsQ0FBQyxFQUFJQyxFQUFLRCxFQUFXLENBQUMsRUFBSUMsQ0FBRyxFQUN4RUUsRUFBaUIsS0FBSyxLQUFLRCxFQUFRLENBQUMsRUFBSUEsRUFBUSxDQUFDLEVBQUlBLEVBQVEsQ0FBQyxFQUFJQSxFQUFRLENBQUMsQ0FBQyxFQUM1RUUsRUFBYSxLQUFLLE1BQU1GLEVBQVEsQ0FBQyxFQUFHQyxDQUFjLEVBQ2xERSxFQUFhLEtBQUssTUFBTUgsRUFBUSxDQUFDLEVBQUcsQ0FBQ0EsRUFBUSxDQUFDLENBQUMsRUFDbkQsS0FBSyxJQUFJLFFBQVFHLENBQVUsRUFBRSxRQUFRLENBQUNELENBQVUsQ0FDakQsQ0FFRCxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsUUFBUSxLQUFLLEdBQUcsQ0FBQyxFQUNsRSxLQUFLLElBQUksUUFBUSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEtBQUssR0FBRyxFQUFFLENB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S0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxJQUFNLEtBQy9SLEtBQUssUUFBVSxLQUFLLGFBQWEsVUFBVzRHLENBQW1CLElBSTdENUcsRUFBZSxFQUFFLEVBQUUsRUFBRSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLElBQU0sR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLElBQU0sR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLElBQU0sR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLElBQU0sR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLElBQU0sS0FDL1IsS0FBSyxRQUFVLEtBQUssYUFBYSxVQUFXNEcsQ0FBbUIsSUFJN0Q1RyxFQUFlLEVBQUUsRUFBRSxFQUFFLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsSUFBTSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsSUFBTSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsSUFBTSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsSUFBTSxHQUFLQSxFQUFlLEVBQUUsRUFBRSxFQUFFLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsSUFBTSxLQUMvUixLQUFLLFFBQVUsS0FBSyxhQUFhLFVBQVc0RyxDQUFtQixJQUk3RDVHLEVBQWUsRUFBRSxFQUFFLEVBQUUsR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxJQUFNLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxJQUFNLEdBQUtBLEVBQWUsRUFBRSxFQUFFLEVBQUUsR0FBS0EsRUFBZSxFQUFFLEVBQUUsRUFBRSxJQUFNLEdBQUtBLEVB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
