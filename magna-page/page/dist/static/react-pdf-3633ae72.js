var ts=Object.defineProperty;var es=(ct,u,it)=>u in ct?ts(ct,u,{enumerable:!0,configurable:!0,writable:!0,value:it}):ct[u]=it;var ie=(ct,u,it)=>(es(ct,typeof u!="symbol"?u+"":u,it),it),Be=(ct,u,it)=>{if(!u.has(ct))throw TypeError("Cannot "+it)};var t=(ct,u,it)=>(Be(ct,u,"read from private field"),it?it.call(ct):u.get(ct)),L=(ct,u,it)=>{if(u.has(ct))throw TypeError("Cannot add the same private member more than once");u instanceof WeakSet?u.add(ct):u.set(ct,it)},tt=(ct,u,it,c)=>(Be(ct,u,"write to private field"),c?c.call(ct,it):u.set(ct,it),it);var me=(ct,u,it,c)=>({set _(x){tt(ct,u,x,it)},get _(){return t(ct,u,c)}}),G=(ct,u,it)=>(Be(ct,u,"access private method"),it);import{g as getDefaultExportFromCjs}from"./react-a84639bd.js";import{c as commonjsRequire,r as require$$5}from"./@react-pdf/renderer-d806818e.js";function _mergeNamespaces(ct,u){for(var it=0;it<u.length;it++){const c=u[it];if(typeof c!="string"&&!Array.isArray(c)){for(const x in c)if(x!=="default"&&!(x in ct)){const at=Object.getOwnPropertyDescriptor(c,x);at&&Object.defineProperty(ct,x,at.get?at:{enumerable:!0,get:()=>c[x]})}}}return Object.freeze(Object.defineProperty(ct,Symbol.toStringTag,{value:"Module"}))}var propTypes={exports:{}},ReactPropTypesSecret$1="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",ReactPropTypesSecret_1=ReactPropTypesSecret$1,ReactPropTypesSecret=ReactPropTypesSecret_1;function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction;var factoryWithThrowingShims=function(){function ct(c,x,at,$,gt,U){if(U!==ReactPropTypesSecret){var M=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw M.name="Invariant Violation",M}}ct.isRequired=ct;function u(){return ct}var it={array:ct,bigint:ct,bool:ct,func:ct,number:ct,object:ct,string:ct,symbol:ct,any:ct,arrayOf:u,element:ct,elementType:ct,instanceOf:u,node:ct,objectOf:u,oneOf:u,oneOfType:u,shape:u,exact:u,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return it.PropTypes=it,it};propTypes.exports=factoryWithThrowingShims();var propTypesExports=propTypes.exports;const PropTypes=getDefaultExportFromCjs(propTypesExports);var warning=function(){},warning_1=warning;const warning$1=getDefaultExportFromCjs(warning_1);function r(ct){var u,it,c="";if(typeof ct=="string"||typeof ct=="number")c+=ct;else if(typeof ct=="object")if(Array.isArray(ct)){var x=ct.length;for(u=0;u<x;u++)ct[u]&&(it=r(ct[u]))&&(c&&(c+=" "),c+=it)}else for(it in ct)ct[it]&&(c&&(c+=" "),c+=it);return c}function clsx(){for(var ct,u,it=0,c="",x=arguments.length;it<x;it++)(ct=arguments[it])&&(u=r(ct))&&(c&&(c+=" "),c+=u);return c}var pdf$1={exports:{}};(function(module,exports){(function(u,it){module.exports=u.pdfjsLib=it()})(globalThis,()=>(()=>{var __webpack_modules__=[,(ct,u)=>{var Yt;Object.defineProperty(u,"__esModule",{value:!0}),u.VerbosityLevel=u.Util=u.UnknownErrorException=u.UnexpectedResponseException=u.TextRenderingMode=u.RenderingIntentFlag=u.PromiseCapability=u.PermissionFlag=u.PasswordResponses=u.PasswordException=u.PageActionEventType=u.OPS=u.MissingPDFException=u.MAX_IMAGE_SIZE_TO_CACHE=u.LINE_FACTOR=u.LINE_DESCENT_FACTOR=u.InvalidPDFException=u.ImageKind=u.IDENTITY_MATRIX=u.FormatError=u.FeatureTest=u.FONT_IDENTITY_MATRIX=u.DocumentActionEventType=u.CMapCompressionType=u.BaseException=u.BASELINE_FACTOR=u.AnnotationType=u.AnnotationReplyType=u.AnnotationPrefix=u.AnnotationMode=u.AnnotationFlag=u.AnnotationFieldFlag=u.AnnotationEditorType=u.AnnotationEditorPrefix=u.AnnotationEditorParamsType=u.AnnotationBorderStyleType=u.AnnotationActionEventType=u.AbortException=void 0,u.assert=ht,u.bytesToString=B,u.createValidAbsoluteUrl=Ct,u.getModificationDate=Tt,u.getUuid=Vt,u.getVerbosityLevel=V,u.info=nt,u.isArrayBuffer=ut,u.isArrayEqual=wt,u.isNodeJS=void 0,u.normalizeUnicode=$t,u.objectFromMap=dt,u.objectSize=rt,u.setVerbosityLevel=w,u.shadow=kt,u.string32=Z,u.stringToBytes=et,u.stringToPDFString=pt,u.stringToUTF8String=J,u.unreachable=H,u.utf8StringToString=Q,u.warn=ot;const it=typeof process=="object"&&process+""=="[object process]"&&!process.versions.nw&&!(process.versions.electron&&process.type&&process.type!=="browser");u.isNodeJS=it;const c=[1,0,0,1,0,0];u.IDENTITY_MATRIX=c;const x=[.001,0,0,.001,0,0];u.FONT_IDENTITY_MATRIX=x;const at=1e7;u.MAX_IMAGE_SIZE_TO_CACHE=at;const $=1.35;u.LINE_FACTOR=$;const gt=.35;u.LINE_DESCENT_FACTOR=gt;const U=gt/$;u.BASELINE_FACTOR=U;const M={ANY:1,DISPLAY:2,PRINT:4,SAVE:8,ANNOTATIONS_FORMS:16,ANNOTATIONS_STORAGE:32,ANNOTATIONS_DISABLE:64,OPLIST:256};u.RenderingIntentFlag=M;const m={DISABLE:0,ENABLE:1,ENABLE_FORMS:2,ENABLE_STORAGE:3};u.AnnotationMode=m;const O="pdfjs_internal_editor_";u.AnnotationEditorPrefix=O;const N={DISABLE:-1,NONE:0,FREETEXT:3,STAMP:13,INK:15};u.AnnotationEditorType=N;const k={RESIZE:1,CREATE:2,FREETEXT_SIZE:11,FREETEXT_COLOR:12,FREETEXT_OPACITY:13,INK_COLOR:21,INK_THICKNESS:22,INK_OPACITY:23};u.AnnotationEditorParamsType=k;const S={PRINT:4,MODIFY_CONTENTS:8,COPY:16,MODIFY_ANNOTATIONS:32,FILL_INTERACTIVE_FORMS:256,COPY_FOR_ACCESSIBILITY:512,ASSEMBLE:1024,PRINT_HIGH_QUALITY:2048};u.PermissionFlag=S;const v={FILL:0,STROKE:1,FILL_STROKE:2,INVISIBLE:3,FILL_ADD_TO_PATH:4,STROKE_ADD_TO_PATH:5,FILL_STROKE_ADD_TO_PATH:6,ADD_TO_PATH:7,FILL_STROKE_MASK:3,ADD_TO_PATH_FLAG:4};u.TextRenderingMode=v;const f={GRAYSCALE_1BPP:1,RGB_24BPP:2,RGBA_32BPP:3};u.ImageKind=f;const A={TEXT:1,LINK:2,FREETEXT:3,LINE:4,SQUARE:5,CIRCLE:6,POLYGON:7,POLYLINE:8,HIGHLIGHT:9,UNDERLINE:10,SQUIGGLY:11,STRIKEOUT:12,STAMP:13,CARET:14,INK:15,POPUP:16,FILEATTACHMENT:17,SOUND:18,MOVIE:19,WIDGET:20,SCREEN:21,PRINTERMARK:22,TRAPNET:23,WATERMARK:24,THREED:25,REDACT:26};u.AnnotationType=A;const C={GROUP:"Group",REPLY:"R"};u.AnnotationReplyType=C;const T={INVISIBLE:1,HIDDEN:2,PRINT:4,NOZOOM:8,NOROTATE:16,NOVIEW:32,READONLY:64,LOCKED:128,TOGGLENOVIEW:256,LOCKEDCONTENTS:512};u.AnnotationFlag=T;const y={READONLY:1,REQUIRED:2,NOEXPORT:4,MULTILINE:4096,PASSWORD:8192,NOTOGGLETOOFF:16384,RADIO:32768,PUSHBUTTON:65536,COMBO:131072,EDIT:262144,SORT:524288,FILESELECT:1048576,MULTISELECT:2097152,DONOTSPELLCHECK:4194304,DONOTSCROLL:8388608,COMB:16777216,RICHTEXT:33554432,RADIOSINUNISON:33554432,COMMITONSELCHANGE:67108864};u.AnnotationFieldFlag=y;const o={SOLID:1,DASHED:2,BEVELED:3,INSET:4,UNDERLINE:5};u.AnnotationBorderStyleType=o;const h={E:"Mouse Enter",X:"Mouse Exit",D:"Mouse Down",U:"Mouse Up",Fo:"Focus",Bl:"Blur",PO:"PageOpen",PC:"PageClose",PV:"PageVisible",PI:"PageInvisible",K:"Keystroke",F:"Format",V:"Validate",C:"Calculate"};u.AnnotationActionEventType=h;const F={WC:"WillClose",WS:"WillSave",DS:"DidSave",WP:"WillPrint",DP:"DidPrint"};u.DocumentActionEventType=F;const g={O:"PageOpen",C:"PageClose"};u.PageActionEventType=g;const a={ERRORS:0,WARNINGS:1,INFOS:5};u.VerbosityLevel=a;const P={NONE:0,BINARY:1};u.CMapCompressionType=P;const b={dependency:1,setLineWidth:2,setLineCap:3,setLineJoin:4,setMiterLimit:5,setDash:6,setRenderingIntent:7,setFlatness:8,setGState:9,save:10,restore:11,transform:12,moveTo:13,lineTo:14,curveTo:15,curveTo2:16,curveTo3:17,closePath:18,rectangle:19,stroke:20,closeStroke:21,fill:22,eoFill:23,fillStroke:24,eoFillStroke:25,closeFillStroke:26,closeEOFillStroke:27,endPath:28,clip:29,eoClip:30,beginText:31,endText:32,setCharSpacing:33,setWordSpacing:34,setHScale:35,setLeading:36,setFont:37,setTextRenderingMode:38,setTextRise:39,moveText:40,setLeadingMoveText:41,setTextMatrix:42,nextLine:43,showText:44,showSpacedText:45,nextLineShowText:46,nextLineSetSpacingShowText:47,setCharWidth:48,setCharWidthAndBounds:49,setStrokeColorSpace:50,setFillColorSpace:51,setStrokeColor:52,setStrokeColorN:53,setFillColor:54,setFillColorN:55,setStrokeGray:56,setFillGray:57,setStrokeRGBColor:58,setFillRGBColor:59,setStrokeCMYKColor:60,setFillCMYKColor:61,shadingFill:62,beginInlineImage:63,beginImageData:64,endInlineImage:65,paintXObject:66,markPoint:67,markPointProps:68,beginMarkedContent:69,beginMarkedContentProps:70,endMarkedContent:71,beginCompat:72,endCompat:73,paintFormXObjectBegin:74,paintFormXObjectEnd:75,beginGroup:76,endGroup:77,beginAnnotation:80,endAnnotation:81,paintImageMaskXObject:83,paintImageMaskXObjectGroup:84,paintImageXObject:85,paintInlineImageXObject:86,paintInlineImageXObjectGroup:87,paintImageXObjectRepeat:88,paintImageMaskXObjectRepeat:89,paintSolidColorImageMask:90,constructPath:91};u.OPS=b;const j={NEED_PASSWORD:1,INCORRECT_PASSWORD:2};u.PasswordResponses=j;let X=a.WARNINGS;function w(lt){Number.isInteger(lt)&&(X=lt)}function V(){return X}function nt(lt){X>=a.INFOS&&console.log(`Info: ${lt}`)}function ot(lt){X>=a.WARNINGS&&console.log(`Warning: ${lt}`)}function H(lt){throw new Error(lt)}function ht(lt,K){lt||H(K)}function mt(lt){switch(lt==null?void 0:lt.protocol){case"http:":case"https:":case"ftp:":case"mailto:":case"tel:":return!0;default:return!1}}function Ct(lt,K=null,z=null){if(!lt)return null;try{if(z&&typeof lt=="string"){if(z.addDefaultProtocol&&lt.startsWith("www.")){const yt=lt.match(/\./g);(yt==null?void 0:yt.length)>=2&&(lt=`http://${lt}`)}if(z.tryConvertEncoding)try{lt=J(lt)}catch{}}const _t=K?new URL(lt,K):new URL(lt);if(mt(_t))return _t}catch{}return null}function kt(lt,K,z,_t=!1){return Object.defineProperty(lt,K,{value:z,enumerable:!_t,configurable:!0,writable:!1}),z}const E=function(){function K(z,_t){this.constructor===K&&H("Cannot initialize BaseException."),this.message=z,this.name=_t}return K.prototype=new Error,K.constructor=K,K}();u.BaseException=E;class i extends E{constructor(K,z){super(K,"PasswordException"),this.code=z}}u.PasswordException=i;class n extends E{constructor(K,z){super(K,"UnknownErrorException"),this.details=z}}u.UnknownErrorException=n;class s extends E{constructor(K){super(K,"InvalidPDFException")}}u.InvalidPDFException=s;class l extends E{constructor(K){super(K,"MissingPDFException")}}u.MissingPDFException=l;class d extends E{constructor(K,z){super(K,"UnexpectedResponseException"),this.status=z}}u.UnexpectedResponseException=d;class _ extends E{constructor(K){super(K,"FormatError")}}u.FormatError=_;class R extends E{constructor(K){super(K,"AbortException")}}u.AbortException=R;function B(lt){(typeof lt!="object"||(lt==null?void 0:lt.length)===void 0)&&H("Invalid argument for bytesToString");const K=lt.length,z=8192;if(K<z)return String.fromCharCode.apply(null,lt);const _t=[];for(let yt=0;yt<K;yt+=z){const ee=Math.min(yt+z,K),te=lt.subarray(yt,ee);_t.push(String.fromCharCode.apply(null,te))}return _t.join("")}function et(lt){typeof lt!="string"&&H("Invalid argument for stringToBytes");const K=lt.length,z=new Uint8Array(K);for(let _t=0;_t<K;++_t)z[_t]=lt.charCodeAt(_t)&255;return z}function Z(lt){return String.fromCharCode(lt>>24&255,lt>>16&255,lt>>8&255,lt&255)}function rt(lt){return Object.keys(lt).length}function dt(lt){const K=Object.create(null);for(const[z,_t]of lt)K[z]=_t;return K}function vt(){const lt=new Uint8Array(4);return lt[0]=1,new Uint32Array(lt.buffer,0,1)[0]===1}function ft(){try{return new Function(""),!0}catch{return!1}}class Mt{static get isLittleEndian(){return kt(this,"isLittleEndian",vt())}static get isEvalSupported(){return kt(this,"isEvalSupported",ft())}static get isOffscreenCanvasSupported(){return kt(this,"isOffscreenCanvasSupported",typeof OffscreenCanvas<"u")}static get platform(){return typeof navigator>"u"?kt(this,"platform",{isWin:!1,isMac:!1}):kt(this,"platform",{isWin:navigator.platform.includes("Win"),isMac:navigator.platform.includes("Mac")})}static get isCSSRoundSupported(){var K,z;return kt(this,"isCSSRoundSupported",(z=(K=globalThis.CSS)==null?void 0:K.supports)==null?void 0:z.call(K,"width: round(1.5px, 1px)"))}}u.FeatureTest=Mt;const Ut=[...Array(256).keys()].map(lt=>lt.toString(16).padStart(2,"0"));class Et{static makeHexColor(K,z,_t){return`#${Ut[K]}${Ut[z]}${Ut[_t]}`}static scaleMinMax(K,z){let _t;K[0]?(K[0]<0&&(_t=z[0],z[0]=z[1],z[1]=_t),z[0]*=K[0],z[1]*=K[0],K[3]<0&&(_t=z[2],z[2]=z[3],z[3]=_t),z[2]*=K[3],z[3]*=K[3]):(_t=z[0],z[0]=z[2],z[2]=_t,_t=z[1],z[1]=z[3],z[3]=_t,K[1]<0&&(_t=z[2],z[2]=z[3],z[3]=_t),z[2]*=K[1],z[3]*=K[1],K[2]<0&&(_t=z[0],z[0]=z[1],z[1]=_t),z[0]*=K[2],z[1]*=K[2]),z[0]+=K[4],z[1]+=K[4],z[2]+=K[5],z[3]+=K[5]}static transform(K,z){return[K[0]*z[0]+K[2]*z[1],K[1]*z[0]+K[3]*z[1],K[0]*z[2]+K[2]*z[3],K[1]*z[2]+K[3]*z[3],K[0]*z[4]+K[2]*z[5]+K[4],K[1]*z[4]+K[3]*z[5]+K[5]]}static applyTransform(K,z){const _t=K[0]*z[0]+K[1]*z[2]+z[4],yt=K[0]*z[1]+K[1]*z[3]+z[5];return[_t,yt]}static applyInverseTransform(K,z){const _t=z[0]*z[3]-z[1]*z[2],yt=(K[0]*z[3]-K[1]*z[2]+z[2]*z[5]-z[4]*z[3])/_t,ee=(-K[0]*z[1]+K[1]*z[0]+z[4]*z[1]-z[5]*z[0])/_t;return[yt,ee]}static getAxialAlignedBoundingBox(K,z){const _t=this.applyTransform(K,z),yt=this.applyTransform(K.slice(2,4),z),ee=this.applyTransform([K[0],K[3]],z),te=this.applyTransform([K[2],K[1]],z);return[Math.min(_t[0],yt[0],ee[0],te[0]),Math.min(_t[1],yt[1],ee[1],te[1]),Math.max(_t[0],yt[0],ee[0],te[0]),Math.max(_t[1],yt[1],ee[1],te[1])]}static inverseTransform(K){const z=K[0]*K[3]-K[1]*K[2];return[K[3]/z,-K[1]/z,-K[2]/z,K[0]/z,(K[2]*K[5]-K[4]*K[3])/z,(K[4]*K[1]-K[5]*K[0])/z]}static singularValueDecompose2dScale(K){const z=[K[0],K[2],K[1],K[3]],_t=K[0]*z[0]+K[1]*z[2],yt=K[0]*z[1]+K[1]*z[3],ee=K[2]*z[0]+K[3]*z[2],te=K[2]*z[1]+K[3]*z[3],Y=(_t+te)/2,St=Math.sqrt((_t+te)**2-4*(_t*te-ee*yt))/2,Ot=Y+St||1,Pt=Y-St||1;return[Math.sqrt(Ot),Math.sqrt(Pt)]}static normalizeRect(K){const z=K.slice(0);return K[0]>K[2]&&(z[0]=K[2],z[2]=K[0]),K[1]>K[3]&&(z[1]=K[3],z[3]=K[1]),z}static intersect(K,z){const _t=Math.max(Math.min(K[0],K[2]),Math.min(z[0],z[2])),yt=Math.min(Math.max(K[0],K[2]),Math.max(z[0],z[2]));if(_t>yt)return null;const ee=Math.max(Math.min(K[1],K[3]),Math.min(z[1],z[3])),te=Math.min(Math.max(K[1],K[3]),Math.max(z[1],z[3]));return ee>te?null:[_t,ee,yt,te]}static bezierBoundingBox(K,z,_t,yt,ee,te,Y,St){const Ot=[],Pt=[[],[]];let Nt,Bt,Qt,At,Kt,Lt,D,e;for(let q=0;q<2;++q){if(q===0?(Bt=6*K-12*_t+6*ee,Nt=-3*K+9*_t-9*ee+3*Y,Qt=3*_t-3*K):(Bt=6*z-12*yt+6*te,Nt=-3*z+9*yt-9*te+3*St,Qt=3*yt-3*z),Math.abs(Nt)<1e-12){if(Math.abs(Bt)<1e-12)continue;At=-Qt/Bt,0<At&&At<1&&Ot.push(At);continue}D=Bt*Bt-4*Qt*Nt,e=Math.sqrt(D),!(D<0)&&(Kt=(-Bt+e)/(2*Nt),0<Kt&&Kt<1&&Ot.push(Kt),Lt=(-Bt-e)/(2*Nt),0<Lt&&Lt<1&&Ot.push(Lt))}let p=Ot.length,I;const W=p;for(;p--;)At=Ot[p],I=1-At,Pt[0][p]=I*I*I*K+3*I*I*At*_t+3*I*At*At*ee+At*At*At*Y,Pt[1][p]=I*I*I*z+3*I*I*At*yt+3*I*At*At*te+At*At*At*St;return Pt[0][W]=K,Pt[1][W]=z,Pt[0][W+1]=Y,Pt[1][W+1]=St,Pt[0].length=Pt[1].length=W+2,[Math.min(...Pt[0]),Math.min(...Pt[1]),Math.max(...Pt[0]),Math.max(...Pt[1])]}}u.Util=Et;const It=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,728,711,710,729,733,731,730,732,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8226,8224,8225,8230,8212,8211,402,8260,8249,8250,8722,8240,8222,8220,8221,8216,8217,8218,8482,64257,64258,321,338,352,376,381,305,322,339,353,382,0,8364];function pt(lt){if(lt[0]>="ï"){let z;if(lt[0]==="þ"&&lt[1]==="ÿ"?z="utf-16be":lt[0]==="ÿ"&&lt[1]==="þ"?z="utf-16le":lt[0]==="ï"&&lt[1]==="»"&&lt[2]==="¿"&&(z="utf-8"),z)try{const _t=new TextDecoder(z,{fatal:!0}),yt=et(lt);return _t.decode(yt)}catch(_t){ot(`stringToPDFString: "${_t}".`)}}const K=[];for(let z=0,_t=lt.length;z<_t;z++){const yt=It[lt.charCodeAt(z)];K.push(yt?String.fromCharCode(yt):lt.charAt(z))}return K.join("")}function J(lt){return decodeURIComponent(escape(lt))}function Q(lt){return unescape(encodeURIComponent(lt))}function ut(lt){return typeof lt=="object"&&(lt==null?void 0:lt.byteLength)!==void 0}function wt(lt,K){if(lt.length!==K.length)return!1;for(let z=0,_t=lt.length;z<_t;z++)if(lt[z]!==K[z])return!1;return!0}function Tt(lt=new Date){return[lt.getUTCFullYear().toString(),(lt.getUTCMonth()+1).toString().padStart(2,"0"),lt.getUTCDate().toString().padStart(2,"0"),lt.getUTCHours().toString().padStart(2,"0"),lt.getUTCMinutes().toString().padStart(2,"0"),lt.getUTCSeconds().toString().padStart(2,"0")].join("")}class Wt{constructor(){L(this,Yt,!1);this.promise=new Promise((K,z)=>{this.resolve=_t=>{tt(this,Yt,!0),K(_t)},this.reject=_t=>{tt(this,Yt,!0),z(_t)}})}get settled(){return t(this,Yt)}}Yt=new WeakMap,u.PromiseCapability=Wt;let zt=null,Ht=null;function $t(lt){return zt||(zt=/([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu,Ht=new Map([["ﬅ","ſt"]])),lt.replaceAll(zt,(K,z,_t)=>z?z.normalize("NFKC"):Ht.get(_t))}function Vt(){if(typeof crypto<"u"&&typeof(crypto==null?void 0:crypto.randomUUID)=="function")return crypto.randomUUID();const lt=new Uint8Array(32);if(typeof crypto<"u"&&typeof(crypto==null?void 0:crypto.getRandomValues)=="function")crypto.getRandomValues(lt);else for(let K=0;K<32;K++)lt[K]=Math.floor(Math.random()*255);return B(lt)}const Gt="pdfjs_internal_id_";u.AnnotationPrefix=Gt},(__unused_webpack_module,exports,__w_pdfjs_require__)=>{var ct,it,c,x,de,$,we,U,M,m,O,N,k,S,v,f,Ce,C,T,Ue,o,h;Object.defineProperty(exports,"__esModule",{value:!0}),exports.RenderTask=exports.PDFWorkerUtil=exports.PDFWorker=exports.PDFPageProxy=exports.PDFDocumentProxy=exports.PDFDocumentLoadingTask=exports.PDFDataRangeTransport=exports.LoopbackPort=exports.DefaultStandardFontDataFactory=exports.DefaultFilterFactory=exports.DefaultCanvasFactory=exports.DefaultCMapReaderFactory=void 0,Object.defineProperty(exports,"SVGGraphics",{enumerable:!0,get:function(){return _displaySvg.SVGGraphics}}),exports.build=void 0,exports.getDocument=getDocument,exports.version=void 0;var _util=__w_pdfjs_require__(1),_annotation_storage=__w_pdfjs_require__(3),_display_utils=__w_pdfjs_require__(6),_font_loader=__w_pdfjs_require__(9),_displayNode_utils=__w_pdfjs_require__(10),_canvas=__w_pdfjs_require__(11),_worker_options=__w_pdfjs_require__(14),_message_handler=__w_pdfjs_require__(15),_metadata=__w_pdfjs_require__(16),_optional_content_config=__w_pdfjs_require__(17),_transport_stream=__w_pdfjs_require__(18),_displayFetch_stream=__w_pdfjs_require__(19),_displayNetwork=__w_pdfjs_require__(22),_displayNode_stream=__w_pdfjs_require__(23),_displaySvg=__w_pdfjs_require__(24),_xfa_text=__w_pdfjs_require__(25);const DEFAULT_RANGE_CHUNK_SIZE=65536,RENDERING_CANCELLED_TIMEOUT=100,DELAYED_CLEANUP_TIMEOUT=5e3,DefaultCanvasFactory=_util.isNodeJS?_displayNode_utils.NodeCanvasFactory:_display_utils.DOMCanvasFactory;exports.DefaultCanvasFactory=DefaultCanvasFactory;const DefaultCMapReaderFactory=_util.isNodeJS?_displayNode_utils.NodeCMapReaderFactory:_display_utils.DOMCMapReaderFactory;exports.DefaultCMapReaderFactory=DefaultCMapReaderFactory;const DefaultFilterFactory=_util.isNodeJS?_displayNode_utils.NodeFilterFactory:_display_utils.DOMFilterFactory;exports.DefaultFilterFactory=DefaultFilterFactory;const DefaultStandardFontDataFactory=_util.isNodeJS?_displayNode_utils.NodeStandardFontDataFactory:_display_utils.DOMStandardFontDataFactory;exports.DefaultStandardFontDataFactory=DefaultStandardFontDataFactory;function getDocument(g){if(typeof g=="string"||g instanceof URL?g={url:g}:(0,_util.isArrayBuffer)(g)&&(g={data:g}),typeof g!="object")throw new Error("Invalid parameter in getDocument, need parameter object.");if(!g.url&&!g.data&&!g.range)throw new Error("Invalid parameter object: need either .data, .range or .url");const a=new PDFDocumentLoadingTask,{docId:P}=a,b=g.url?getUrlProp(g.url):null,j=g.data?getDataProp(g.data):null,X=g.httpHeaders||null,w=g.withCredentials===!0,V=g.password??null,nt=g.range instanceof PDFDataRangeTransport?g.range:null,ot=Number.isInteger(g.rangeChunkSize)&&g.rangeChunkSize>0?g.rangeChunkSize:DEFAULT_RANGE_CHUNK_SIZE;let H=g.worker instanceof PDFWorker?g.worker:null;const ht=g.verbosity,mt=typeof g.docBaseUrl=="string"&&!(0,_display_utils.isDataScheme)(g.docBaseUrl)?g.docBaseUrl:null,Ct=typeof g.cMapUrl=="string"?g.cMapUrl:null,kt=g.cMapPacked!==!1,E=g.CMapReaderFactory||DefaultCMapReaderFactory,i=typeof g.standardFontDataUrl=="string"?g.standardFontDataUrl:null,n=g.StandardFontDataFactory||DefaultStandardFontDataFactory,s=g.stopAtErrors!==!0,l=Number.isInteger(g.maxImageSize)&&g.maxImageSize>-1?g.maxImageSize:-1,d=g.isEvalSupported!==!1,_=typeof g.isOffscreenCanvasSupported=="boolean"?g.isOffscreenCanvasSupported:!_util.isNodeJS,R=Number.isInteger(g.canvasMaxAreaInBytes)?g.canvasMaxAreaInBytes:-1,B=typeof g.disableFontFace=="boolean"?g.disableFontFace:_util.isNodeJS,et=g.fontExtraProperties===!0,Z=g.enableXfa===!0,rt=g.ownerDocument||globalThis.document,dt=g.disableRange===!0,vt=g.disableStream===!0,ft=g.disableAutoFetch===!0,Mt=g.pdfBug===!0,Ut=nt?nt.length:g.length??NaN,Et=typeof g.useSystemFonts=="boolean"?g.useSystemFonts:!_util.isNodeJS&&!B,It=typeof g.useWorkerFetch=="boolean"?g.useWorkerFetch:E===_display_utils.DOMCMapReaderFactory&&n===_display_utils.DOMStandardFontDataFactory&&Ct&&i&&(0,_display_utils.isValidFetchUrl)(Ct,document.baseURI)&&(0,_display_utils.isValidFetchUrl)(i,document.baseURI),pt=g.canvasFactory||new DefaultCanvasFactory({ownerDocument:rt}),J=g.filterFactory||new DefaultFilterFactory({docId:P,ownerDocument:rt}),Q=null;(0,_util.setVerbosityLevel)(ht);const ut={canvasFactory:pt,filterFactory:J};if(It||(ut.cMapReaderFactory=new E({baseUrl:Ct,isCompressed:kt}),ut.standardFontDataFactory=new n({baseUrl:i})),!H){const Wt={verbosity:ht,port:_worker_options.GlobalWorkerOptions.workerPort};H=Wt.port?PDFWorker.fromPort(Wt):new PDFWorker(Wt),a._worker=H}const wt={docId:P,apiVersion:"3.11.174",data:j,password:V,disableAutoFetch:ft,rangeChunkSize:ot,length:Ut,docBaseUrl:mt,enableXfa:Z,evaluatorOptions:{maxImageSize:l,disableFontFace:B,ignoreErrors:s,isEvalSupported:d,isOffscreenCanvasSupported:_,canvasMaxAreaInBytes:R,fontExtraProperties:et,useSystemFonts:Et,cMapUrl:It?Ct:null,standardFontDataUrl:It?i:null}},Tt={ignoreErrors:s,isEvalSupported:d,disableFontFace:B,fontExtraProperties:et,enableXfa:Z,ownerDocument:rt,disableAutoFetch:ft,pdfBug:Mt,styleElement:Q};return H.promise.then(function(){if(a.destroyed)throw new Error("Loading aborted");const Wt=_fetchDocument(H,wt),zt=new Promise(function(Ht){let $t;nt?$t=new _transport_stream.PDFDataTransportStream({length:Ut,initialData:nt.initialData,progressiveDone:nt.progressiveDone,contentDispositionFilename:nt.contentDispositionFilename,disableRange:dt,disableStream:vt},nt):j||($t=(Gt=>_util.isNodeJS?new _displayNode_stream.PDFNodeStream(Gt):(0,_display_utils.isValidFetchUrl)(Gt.url)?new _displayFetch_stream.PDFFetchStream(Gt):new _displayNetwork.PDFNetworkStream(Gt))({url:b,length:Ut,httpHeaders:X,withCredentials:w,rangeChunkSize:ot,disableRange:dt,disableStream:vt})),Ht($t)});return Promise.all([Wt,zt]).then(function([Ht,$t]){if(a.destroyed)throw new Error("Loading aborted");const Vt=new _message_handler.MessageHandler(P,Ht,H.port),Gt=new WorkerTransport(Vt,a,$t,Tt,ut);a._transport=Gt,Vt.send("Ready",null)})}).catch(a._capability.reject),a}async function _fetchDocument(g,a){if(g.destroyed)throw new Error("Worker was destroyed");const P=await g.messageHandler.sendWithPromise("GetDocRequest",a,a.data?[a.data.buffer]:null);if(g.destroyed)throw new Error("Worker was destroyed");return P}function getUrlProp(g){if(g instanceof URL)return g.href;try{return new URL(g,window.location).href}catch{if(_util.isNodeJS&&typeof g=="string")return g}throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.")}function getDataProp(g){if(_util.isNodeJS&&typeof Buffer<"u"&&g instanceof Buffer)throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");if(g instanceof Uint8Array&&g.byteLength===g.buffer.byteLength)return g;if(typeof g=="string")return(0,_util.stringToBytes)(g);if(typeof g=="object"&&!isNaN(g==null?void 0:g.length)||(0,_util.isArrayBuffer)(g))return new Uint8Array(g);throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.")}const u=class u{constructor(){this._capability=new _util.PromiseCapability,this._transport=null,this._worker=null,this.docId=`d${me(u,ct)._++}`,this.destroyed=!1,this.onPassword=null,this.onProgress=null}get promise(){return this._capability.promise}async destroy(){var a,P,b;this.destroyed=!0;try{(a=this._worker)!=null&&a.port&&(this._worker._pendingDestroy=!0),await((P=this._transport)==null?void 0:P.destroy())}catch(j){throw(b=this._worker)!=null&&b.port&&delete this._worker._pendingDestroy,j}this._transport=null,this._worker&&(this._worker.destroy(),this._worker=null)}};ct=new WeakMap,L(u,ct,0);let PDFDocumentLoadingTask=u;exports.PDFDocumentLoadingTask=PDFDocumentLoadingTask;class PDFDataRangeTransport{constructor(a,P,b=!1,j=null){this.length=a,this.initialData=P,this.progressiveDone=b,this.contentDispositionFilename=j,this._rangeListeners=[],this._progressListeners=[],this._progressiveReadListeners=[],this._progressiveDoneListeners=[],this._readyCapability=new _util.PromiseCapability}addRangeListener(a){this._rangeListeners.push(a)}addProgressListener(a){this._progressListeners.push(a)}addProgressiveReadListener(a){this._progressiveReadListeners.push(a)}addProgressiveDoneListener(a){this._progressiveDoneListeners.push(a)}onDataRange(a,P){for(const b of this._rangeListeners)b(a,P)}onDataProgress(a,P){this._readyCapability.promise.then(()=>{for(const b of this._progressListeners)b(a,P)})}onDataProgressiveRead(a){this._readyCapability.promise.then(()=>{for(const P of this._progressiveReadListeners)P(a)})}onDataProgressiveDone(){this._readyCapability.promise.then(()=>{for(const a of this._progressiveDoneListeners)a()})}transportReady(){this._readyCapability.resolve()}requestDataRange(a,P){(0,_util.unreachable)("Abstract method PDFDataRangeTransport.requestDataRange")}abort(){}}exports.PDFDataRangeTransport=PDFDataRangeTransport;class PDFDocumentProxy{constructor(a,P){this._pdfInfo=a,this._transport=P,Object.defineProperty(this,"getJavaScript",{value:()=>((0,_display_utils.deprecated)("`PDFDocumentProxy.getJavaScript`, please use `PDFDocumentProxy.getJSActions` instead."),this.getJSActions().then(b=>{if(!b)return b;const j=[];for(const X in b)j.push(...b[X]);return j}))})}get annotationStorage(){return this._transport.annotationStorage}get filterFactory(){return this._transport.filterFactory}get numPages(){return this._pdfInfo.numPages}get fingerprints(){return this._pdfInfo.fingerprints}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}get allXfaHtml(){return this._transport._htmlForXfa}getPage(a){return this._transport.getPage(a)}getPageIndex(a){return this._transport.getPageIndex(a)}getDestinations(){return this._transport.getDestinations()}getDestination(a){return this._transport.getDestination(a)}getPageLabels(){return this._transport.getPageLabels()}getPageLayout(){return this._transport.getPageLayout()}getPageMode(){return this._transport.getPageMode()}getViewerPreferences(){return this._transport.getViewerPreferences()}getOpenAction(){return this._transport.getOpenAction()}getAttachments(){return this._transport.getAttachments()}getJSActions(){return this._transport.getDocJSActions()}getOutline(){return this._transport.getOutline()}getOptionalContentConfig(){return this._transport.getOptionalContentConfig()}getPermissions(){return this._transport.getPermissions()}getMetadata(){return this._transport.getMetadata()}getMarkInfo(){return this._transport.getMarkInfo()}getData(){return this._transport.getData()}saveDocument(){return this._transport.saveDocument()}getDownloadInfo(){return this._transport.downloadInfoCapability.promise}cleanup(a=!1){return this._transport.startCleanup(a||this.isPureXfa)}destroy(){return this.loadingTask.destroy()}get loadingParams(){return this._transport.loadingParams}get loadingTask(){return this._transport.loadingTask}getFieldObjects(){return this._transport.getFieldObjects()}hasJSActions(){return this._transport.hasJSActions()}getCalculationOrderIds(){return this._transport.getCalculationOrderIds()}}exports.PDFDocumentProxy=PDFDocumentProxy;class PDFPageProxy{constructor(a,P,b,j=!1){L(this,x);L(this,$);L(this,it,null);L(this,c,!1);this._pageIndex=a,this._pageInfo=P,this._transport=b,this._stats=j?new _display_utils.StatTimer:null,this._pdfBug=j,this.commonObjs=b.commonObjs,this.objs=new PDFObjects,this._maybeCleanupAfterRender=!1,this._intentStates=new Map,this.destroyed=!1}get pageNumber(){return this._pageIndex+1}get rotate(){return this._pageInfo.rotate}get ref(){return this._pageInfo.ref}get userUnit(){return this._pageInfo.userUnit}get view(){return this._pageInfo.view}getViewport({scale:a,rotation:P=this.rotate,offsetX:b=0,offsetY:j=0,dontFlip:X=!1}={}){return new _display_utils.PageViewport({viewBox:this.view,scale:a,rotation:P,offsetX:b,offsetY:j,dontFlip:X})}getAnnotations({intent:a="display"}={}){const P=this._transport.getRenderingIntent(a);return this._transport.getAnnotations(this._pageIndex,P.renderingIntent)}getJSActions(){return this._transport.getPageJSActions(this._pageIndex)}get filterFactory(){return this._transport.filterFactory}get isPureXfa(){return(0,_util.shadow)(this,"isPureXfa",!!this._transport._htmlForXfa)}async getXfa(){var a;return((a=this._transport._htmlForXfa)==null?void 0:a.children[this._pageIndex])||null}render({canvasContext:a,viewport:P,intent:b="display",annotationMode:j=_util.AnnotationMode.ENABLE,transform:X=null,background:w=null,optionalContentConfigPromise:V=null,annotationCanvasMap:nt=null,pageColors:ot=null,printAnnotationStorage:H=null}){var n,s;(n=this._stats)==null||n.time("Overall");const ht=this._transport.getRenderingIntent(b,j,H);tt(this,c,!1),G(this,$,we).call(this),V||(V=this._transport.getOptionalContentConfig());let mt=this._intentStates.get(ht.cacheKey);mt||(mt=Object.create(null),this._intentStates.set(ht.cacheKey,mt)),mt.streamReaderCancelTimeout&&(clearTimeout(mt.streamReaderCancelTimeout),mt.streamReaderCancelTimeout=null);const Ct=!!(ht.renderingIntent&_util.RenderingIntentFlag.PRINT);mt.displayReadyCapability||(mt.displayReadyCapability=new _util.PromiseCapability,mt.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(s=this._stats)==null||s.time("Page Request"),this._pumpOperatorList(ht));const kt=l=>{var d,_;mt.renderTasks.delete(E),(this._maybeCleanupAfterRender||Ct)&&tt(this,c,!0),G(this,x,de).call(this,!Ct),l?(E.capability.reject(l),this._abortOperatorList({intentState:mt,reason:l instanceof Error?l:new Error(l)})):E.capability.resolve(),(d=this._stats)==null||d.timeEnd("Rendering"),(_=this._stats)==null||_.timeEnd("Overall")},E=new InternalRenderTask({callback:kt,params:{canvasContext:a,viewport:P,transform:X,background:w},objs:this.objs,commonObjs:this.commonObjs,annotationCanvasMap:nt,operatorList:mt.operatorList,pageIndex:this._pageIndex,canvasFactory:this._transport.canvasFactory,filterFactory:this._transport.filterFactory,useRequestAnimationFrame:!Ct,pdfBug:this._pdfBug,pageColors:ot});(mt.renderTasks||(mt.renderTasks=new Set)).add(E);const i=E.task;return Promise.all([mt.displayReadyCapability.promise,V]).then(([l,d])=>{var _;if(this.destroyed){kt();return}(_=this._stats)==null||_.time("Rendering"),E.initializeGraphics({transparency:l,optionalContentConfig:d}),E.operatorListChanged()}).catch(kt),i}getOperatorList({intent:a="display",annotationMode:P=_util.AnnotationMode.ENABLE,printAnnotationStorage:b=null}={}){var nt;function j(){w.operatorList.lastChunk&&(w.opListReadCapability.resolve(w.operatorList),w.renderTasks.delete(V))}const X=this._transport.getRenderingIntent(a,P,b,!0);let w=this._intentStates.get(X.cacheKey);w||(w=Object.create(null),this._intentStates.set(X.cacheKey,w));let V;return w.opListReadCapability||(V=Object.create(null),V.operatorListChanged=j,w.opListReadCapability=new _util.PromiseCapability,(w.renderTasks||(w.renderTasks=new Set)).add(V),w.operatorList={fnArray:[],argsArray:[],lastChunk:!1,separateAnnots:null},(nt=this._stats)==null||nt.time("Page Request"),this._pumpOperatorList(X)),w.opListReadCapability.promise}streamTextContent({includeMarkedContent:a=!1,disableNormalization:P=!1}={}){return this._transport.messageHandler.sendWithStream("GetTextContent",{pageIndex:this._pageIndex,includeMarkedContent:a===!0,disableNormalization:P===!0},{highWaterMark:100,size(j){return j.items.length}})}getTextContent(a={}){if(this._transport._htmlForXfa)return this.getXfa().then(b=>_xfa_text.XfaText.textContent(b));const P=this.streamTextContent(a);return new Promise(function(b,j){function X(){w.read().then(function({value:nt,done:ot}){if(ot){b(V);return}Object.assign(V.styles,nt.styles),V.items.push(...nt.items),X()},j)}const w=P.getReader(),V={items:[],styles:Object.create(null)};X()})}getStructTree(){return this._transport.getStructTree(this._pageIndex)}_destroy(){this.destroyed=!0;const a=[];for(const P of this._intentStates.values())if(this._abortOperatorList({intentState:P,reason:new Error("Page was destroyed."),force:!0}),!P.opListReadCapability)for(const b of P.renderTasks)a.push(b.completed),b.cancel();return this.objs.clear(),tt(this,c,!1),G(this,$,we).call(this),Promise.all(a)}cleanup(a=!1){tt(this,c,!0);const P=G(this,x,de).call(this,!1);return a&&P&&this._stats&&(this._stats=new _display_utils.StatTimer),P}_startRenderPage(a,P){var j,X;const b=this._intentStates.get(P);b&&((j=this._stats)==null||j.timeEnd("Page Request"),(X=b.displayReadyCapability)==null||X.resolve(a))}_renderPageChunk(a,P){for(let b=0,j=a.length;b<j;b++)P.operatorList.fnArray.push(a.fnArray[b]),P.operatorList.argsArray.push(a.argsArray[b]);P.operatorList.lastChunk=a.lastChunk,P.operatorList.separateAnnots=a.separateAnnots;for(const b of P.renderTasks)b.operatorListChanged();a.lastChunk&&G(this,x,de).call(this,!0)}_pumpOperatorList({renderingIntent:a,cacheKey:P,annotationStorageSerializable:b}){const{map:j,transfers:X}=b,V=this._transport.messageHandler.sendWithStream("GetOperatorList",{pageIndex:this._pageIndex,intent:a,cacheKey:P,annotationStorage:j},X).getReader(),nt=this._intentStates.get(P);nt.streamReader=V;const ot=()=>{V.read().then(({value:H,done:ht})=>{if(ht){nt.streamReader=null;return}this._transport.destroyed||(this._renderPageChunk(H,nt),ot())},H=>{if(nt.streamReader=null,!this._transport.destroyed){if(nt.operatorList){nt.operatorList.lastChunk=!0;for(const ht of nt.renderTasks)ht.operatorListChanged();G(this,x,de).call(this,!0)}if(nt.displayReadyCapability)nt.displayReadyCapability.reject(H);else if(nt.opListReadCapability)nt.opListReadCapability.reject(H);else throw H}})};ot()}_abortOperatorList({intentState:a,reason:P,force:b=!1}){if(a.streamReader){if(a.streamReaderCancelTimeout&&(clearTimeout(a.streamReaderCancelTimeout),a.streamReaderCancelTimeout=null),!b){if(a.renderTasks.size>0)return;if(P instanceof _display_utils.RenderingCancelledException){let j=RENDERING_CANCELLED_TIMEOUT;P.extraDelay>0&&P.extraDelay<1e3&&(j+=P.extraDelay),a.streamReaderCancelTimeout=setTimeout(()=>{a.streamReaderCancelTimeout=null,this._abortOperatorList({intentState:a,reason:P,force:!0})},j);return}}if(a.streamReader.cancel(new _util.AbortException(P.message)).catch(()=>{}),a.streamReader=null,!this._transport.destroyed){for(const[j,X]of this._intentStates)if(X===a){this._intentStates.delete(j);break}this.cleanup()}}}get stats(){return this._stats}}it=new WeakMap,c=new WeakMap,x=new WeakSet,de=function(a=!1){if(G(this,$,we).call(this),!t(this,c)||this.destroyed)return!1;if(a)return tt(this,it,setTimeout(()=>{tt(this,it,null),G(this,x,de).call(this,!1)},DELAYED_CLEANUP_TIMEOUT)),!1;for(const{renderTasks:P,operatorList:b}of this._intentStates.values())if(P.size>0||!b.lastChunk)return!1;return this._intentStates.clear(),this.objs.clear(),tt(this,c,!1),!0},$=new WeakSet,we=function(){t(this,it)&&(clearTimeout(t(this,it)),tt(this,it,null))},exports.PDFPageProxy=PDFPageProxy;class LoopbackPort{constructor(){L(this,U,new Set);L(this,M,Promise.resolve())}postMessage(a,P){const b={data:structuredClone(a,P?{transfer:P}:null)};t(this,M).then(()=>{for(const j of t(this,U))j.call(this,b)})}addEventListener(a,P){t(this,U).add(P)}removeEventListener(a,P){t(this,U).delete(P)}terminate(){t(this,U).clear()}}U=new WeakMap,M=new WeakMap,exports.LoopbackPort=LoopbackPort;const PDFWorkerUtil={isWorkerDisabled:!1,fallbackWorkerSrc:null,fakeWorkerId:0};exports.PDFWorkerUtil=PDFWorkerUtil;{if(_util.isNodeJS&&typeof commonjsRequire=="function")PDFWorkerUtil.isWorkerDisabled=!0,PDFWorkerUtil.fallbackWorkerSrc="./pdf.worker.js";else if(typeof document=="object"){const g=(m=document==null?void 0:document.currentScript)==null?void 0:m.src;g&&(PDFWorkerUtil.fallbackWorkerSrc=g.replace(/(\.(?:min\.)?js)(\?.*)?$/i,".worker$1$2"))}PDFWorkerUtil.isSameOrigin=function(g,a){let P;try{if(P=new URL(g),!P.origin||P.origin==="null")return!1}catch{return!1}const b=new URL(a,P);return P.origin===b.origin},PDFWorkerUtil.createCDNWrapper=function(g){const a=`importScripts("${g}");`;return URL.createObjectURL(new Blob([a]))}}const _PDFWorker=class _PDFWorker{constructor({name:g=null,port:a=null,verbosity:P=(0,_util.getVerbosityLevel)()}={}){var b;if(this.name=g,this.destroyed=!1,this.verbosity=P,this._readyCapability=new _util.PromiseCapability,this._port=null,this._webWorker=null,this._messageHandler=null,a){if((b=t(_PDFWorker,O))!=null&&b.has(a))throw new Error("Cannot use more than one PDFWorker per port.");(t(_PDFWorker,O)||tt(_PDFWorker,O,new WeakMap)).set(a,this),this._initializeFromPort(a);return}this._initialize()}get promise(){return this._readyCapability.promise}get port(){return this._port}get messageHandler(){return this._messageHandler}_initializeFromPort(g){this._port=g,this._messageHandler=new _message_handler.MessageHandler("main","worker",g),this._messageHandler.on("ready",function(){}),this._readyCapability.resolve(),this._messageHandler.send("configure",{verbosity:this.verbosity})}_initialize(){if(!PDFWorkerUtil.isWorkerDisabled&&!_PDFWorker._mainThreadWorkerMessageHandler){let{workerSrc:g}=_PDFWorker;try{PDFWorkerUtil.isSameOrigin(window.location.href,g)||(g=PDFWorkerUtil.createCDNWrapper(new URL(g,window.location).href));const a=new Worker(g),P=new _message_handler.MessageHandler("main","worker",a),b=()=>{a.removeEventListener("error",j),P.destroy(),a.terminate(),this.destroyed?this._readyCapability.reject(new Error("Worker was destroyed")):this._setupFakeWorker()},j=()=>{this._webWorker||b()};a.addEventListener("error",j),P.on("test",w=>{if(a.removeEventListener("error",j),this.destroyed){b();return}w?(this._messageHandler=P,this._port=a,this._webWorker=a,this._readyCapability.resolve(),P.send("configure",{verbosity:this.verbosity})):(this._setupFakeWorker(),P.destroy(),a.terminate())}),P.on("ready",w=>{if(a.removeEventListener("error",j),this.destroyed){b();return}try{X()}catch{this._setupFakeWorker()}});const X=()=>{const w=new Uint8Array;P.send("test",w,[w.buffer])};X();return}catch{(0,_util.info)("The worker has been disabled.")}}this._setupFakeWorker()}_setupFakeWorker(){PDFWorkerUtil.isWorkerDisabled||((0,_util.warn)("Setting up fake worker."),PDFWorkerUtil.isWorkerDisabled=!0),_PDFWorker._setupFakeWorkerGlobal.then(g=>{if(this.destroyed){this._readyCapability.reject(new Error("Worker was destroyed"));return}const a=new LoopbackPort;this._port=a;const P=`fake${PDFWorkerUtil.fakeWorkerId++}`,b=new _message_handler.MessageHandler(P+"_worker",P,a);g.setup(b,a);const j=new _message_handler.MessageHandler(P,P+"_worker",a);this._messageHandler=j,this._readyCapability.resolve(),j.send("configure",{verbosity:this.verbosity})}).catch(g=>{this._readyCapability.reject(new Error(`Setting up fake worker failed: "${g.message}".`))})}destroy(){var g;this.destroyed=!0,this._webWorker&&(this._webWorker.terminate(),this._webWorker=null),(g=t(_PDFWorker,O))==null||g.delete(this._port),this._port=null,this._messageHandler&&(this._messageHandler.destroy(),this._messageHandler=null)}static fromPort(g){var P;if(!(g!=null&&g.port))throw new Error("PDFWorker.fromPort - invalid method signature.");const a=(P=t(this,O))==null?void 0:P.get(g.port);if(a){if(a._pendingDestroy)throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");return a}return new _PDFWorker(g)}static get workerSrc(){if(_worker_options.GlobalWorkerOptions.workerSrc)return _worker_options.GlobalWorkerOptions.workerSrc;if(PDFWorkerUtil.fallbackWorkerSrc!==null)return _util.isNodeJS||(0,_display_utils.deprecated)('No "GlobalWorkerOptions.workerSrc" specified.'),PDFWorkerUtil.fallbackWorkerSrc;throw new Error('No "GlobalWorkerOptions.workerSrc" specified.')}static get _mainThreadWorkerMessageHandler(){var g;try{return((g=globalThis.pdfjsWorker)==null?void 0:g.WorkerMessageHandler)||null}catch{return null}}static get _setupFakeWorkerGlobal(){const loader=async()=>{const mainWorkerMessageHandler=this._mainThreadWorkerMessageHandler;if(mainWorkerMessageHandler)return mainWorkerMessageHandler;if(_util.isNodeJS&&typeof commonjsRequire=="function"){const worker=eval("require")(this.workerSrc);return worker.WorkerMessageHandler}return await(0,_display_utils.loadScript)(this.workerSrc),window.pdfjsWorker.WorkerMessageHandler};return(0,_util.shadow)(this,"_setupFakeWorkerGlobal",loader())}};O=new WeakMap,L(_PDFWorker,O,void 0);let PDFWorker=_PDFWorker;exports.PDFWorker=PDFWorker;class WorkerTransport{constructor(a,P,b,j,X){L(this,f);L(this,N,new Map);L(this,k,new Map);L(this,S,new Map);L(this,v,null);this.messageHandler=a,this.loadingTask=P,this.commonObjs=new PDFObjects,this.fontLoader=new _font_loader.FontLoader({ownerDocument:j.ownerDocument,styleElement:j.styleElement}),this._params=j,this.canvasFactory=X.canvasFactory,this.filterFactory=X.filterFactory,this.cMapReaderFactory=X.cMapReaderFactory,this.standardFontDataFactory=X.standardFontDataFactory,this.destroyed=!1,this.destroyCapability=null,this._networkStream=b,this._fullReader=null,this._lastProgress=null,this.downloadInfoCapability=new _util.PromiseCapability,this.setupMessageHandler()}get annotationStorage(){return(0,_util.shadow)(this,"annotationStorage",new _annotation_storage.AnnotationStorage)}getRenderingIntent(a,P=_util.AnnotationMode.ENABLE,b=null,j=!1){let X=_util.RenderingIntentFlag.DISPLAY,w=_annotation_storage.SerializableEmpty;switch(a){case"any":X=_util.RenderingIntentFlag.ANY;break;case"display":break;case"print":X=_util.RenderingIntentFlag.PRINT;break;default:(0,_util.warn)(`getRenderingIntent - invalid intent: ${a}`)}switch(P){case _util.AnnotationMode.DISABLE:X+=_util.RenderingIntentFlag.ANNOTATIONS_DISABLE;break;case _util.AnnotationMode.ENABLE:break;case _util.AnnotationMode.ENABLE_FORMS:X+=_util.RenderingIntentFlag.ANNOTATIONS_FORMS;break;case _util.AnnotationMode.ENABLE_STORAGE:X+=_util.RenderingIntentFlag.ANNOTATIONS_STORAGE,w=(X&_util.RenderingIntentFlag.PRINT&&b instanceof _annotation_storage.PrintAnnotationStorage?b:this.annotationStorage).serializable;break;default:(0,_util.warn)(`getRenderingIntent - invalid annotationMode: ${P}`)}return j&&(X+=_util.RenderingIntentFlag.OPLIST),{renderingIntent:X,cacheKey:`${X}_${w.hash}`,annotationStorageSerializable:w}}destroy(){var b;if(this.destroyCapability)return this.destroyCapability.promise;this.destroyed=!0,this.destroyCapability=new _util.PromiseCapability,(b=t(this,v))==null||b.reject(new Error("Worker was destroyed during onPassword callback"));const a=[];for(const j of t(this,k).values())a.push(j._destroy());t(this,k).clear(),t(this,S).clear(),this.hasOwnProperty("annotationStorage")&&this.annotationStorage.resetModified();const P=this.messageHandler.sendWithPromise("Terminate",null);return a.push(P),Promise.all(a).then(()=>{var j;this.commonObjs.clear(),this.fontLoader.clear(),t(this,N).clear(),this.filterFactory.destroy(),(j=this._networkStream)==null||j.cancelAllRequests(new _util.AbortException("Worker was terminated.")),this.messageHandler&&(this.messageHandler.destroy(),this.messageHandler=null),this.destroyCapability.resolve()},this.destroyCapability.reject),this.destroyCapability.promise}setupMessageHandler(){const{messageHandler:a,loadingTask:P}=this;a.on("GetReader",(b,j)=>{(0,_util.assert)(this._networkStream,"GetReader - no `IPDFStream` instance available."),this._fullReader=this._networkStream.getFullReader(),this._fullReader.onProgress=X=>{this._lastProgress={loaded:X.loaded,total:X.total}},j.onPull=()=>{this._fullReader.read().then(function({value:X,done:w}){if(w){j.close();return}(0,_util.assert)(X instanceof ArrayBuffer,"GetReader - expected an ArrayBuffer."),j.enqueue(new Uint8Array(X),1,[X])}).catch(X=>{j.error(X)})},j.onCancel=X=>{this._fullReader.cancel(X),j.ready.catch(w=>{if(!this.destroyed)throw w})}}),a.on("ReaderHeadersReady",b=>{const j=new _util.PromiseCapability,X=this._fullReader;return X.headersReady.then(()=>{var w;(!X.isStreamingSupported||!X.isRangeSupported)&&(this._lastProgress&&((w=P.onProgress)==null||w.call(P,this._lastProgress)),X.onProgress=V=>{var nt;(nt=P.onProgress)==null||nt.call(P,{loaded:V.loaded,total:V.total})}),j.resolve({isStreamingSupported:X.isStreamingSupported,isRangeSupported:X.isRangeSupported,contentLength:X.contentLength})},j.reject),j.promise}),a.on("GetRangeReader",(b,j)=>{(0,_util.assert)(this._networkStream,"GetRangeReader - no `IPDFStream` instance available.");const X=this._networkStream.getRangeReader(b.begin,b.end);if(!X){j.close();return}j.onPull=()=>{X.read().then(function({value:w,done:V}){if(V){j.close();return}(0,_util.assert)(w instanceof ArrayBuffer,"GetRangeReader - expected an ArrayBuffer."),j.enqueue(new Uint8Array(w),1,[w])}).catch(w=>{j.error(w)})},j.onCancel=w=>{X.cancel(w),j.ready.catch(V=>{if(!this.destroyed)throw V})}}),a.on("GetDoc",({pdfInfo:b})=>{this._numPages=b.numPages,this._htmlForXfa=b.htmlForXfa,delete b.htmlForXfa,P._capability.resolve(new PDFDocumentProxy(b,this))}),a.on("DocException",function(b){let j;switch(b.name){case"PasswordException":j=new _util.PasswordException(b.message,b.code);break;case"InvalidPDFException":j=new _util.InvalidPDFException(b.message);break;case"MissingPDFException":j=new _util.MissingPDFException(b.message);break;case"UnexpectedResponseException":j=new _util.UnexpectedResponseException(b.message,b.status);break;case"UnknownErrorException":j=new _util.UnknownErrorException(b.message,b.details);break;default:(0,_util.unreachable)("DocException - expected a valid Error.")}P._capability.reject(j)}),a.on("PasswordRequest",b=>{if(tt(this,v,new _util.PromiseCapability),P.onPassword){const j=X=>{X instanceof Error?t(this,v).reject(X):t(this,v).resolve({password:X})};try{P.onPassword(j,b.code)}catch(X){t(this,v).reject(X)}}else t(this,v).reject(new _util.PasswordException(b.message,b.code));return t(this,v).promise}),a.on("DataLoaded",b=>{var j;(j=P.onProgress)==null||j.call(P,{loaded:b.length,total:b.length}),this.downloadInfoCapability.resolve(b)}),a.on("StartRenderPage",b=>{if(this.destroyed)return;t(this,k).get(b.pageIndex)._startRenderPage(b.transparency,b.cacheKey)}),a.on("commonobj",([b,j,X])=>{var w;if(!this.destroyed&&!this.commonObjs.has(b))switch(j){case"Font":const V=this._params;if("error"in X){const H=X.error;(0,_util.warn)(`Error during font loading: ${H}`),this.commonObjs.resolve(b,H);break}const nt=V.pdfBug&&((w=globalThis.FontInspector)!=null&&w.enabled)?(H,ht)=>globalThis.FontInspector.fontAdded(H,ht):null,ot=new _font_loader.FontFaceObject(X,{isEvalSupported:V.isEvalSupported,disableFontFace:V.disableFontFace,ignoreErrors:V.ignoreErrors,inspectFont:nt});this.fontLoader.bind(ot).catch(H=>a.sendWithPromise("FontFallback",{id:b})).finally(()=>{!V.fontExtraProperties&&ot.data&&(ot.data=null),this.commonObjs.resolve(b,ot)});break;case"FontPath":case"Image":case"Pattern":this.commonObjs.resolve(b,X);break;default:throw new Error(`Got unknown common object type ${j}`)}}),a.on("obj",([b,j,X,w])=>{var nt;if(this.destroyed)return;const V=t(this,k).get(j);if(!V.objs.has(b))switch(X){case"Image":if(V.objs.resolve(b,w),w){let ot;if(w.bitmap){const{width:H,height:ht}=w;ot=H*ht*4}else ot=((nt=w.data)==null?void 0:nt.length)||0;ot>_util.MAX_IMAGE_SIZE_TO_CACHE&&(V._maybeCleanupAfterRender=!0)}break;case"Pattern":V.objs.resolve(b,w);break;default:throw new Error(`Got unknown object type ${X}`)}}),a.on("DocProgress",b=>{var j;this.destroyed||(j=P.onProgress)==null||j.call(P,{loaded:b.loaded,total:b.total})}),a.on("FetchBuiltInCMap",b=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.cMapReaderFactory?this.cMapReaderFactory.fetch(b):Promise.reject(new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter."))),a.on("FetchStandardFontData",b=>this.destroyed?Promise.reject(new Error("Worker was destroyed.")):this.standardFontDataFactory?this.standardFontDataFactory.fetch(b):Promise.reject(new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.")))}getData(){return this.messageHandler.sendWithPromise("GetData",null)}saveDocument(){var b;this.annotationStorage.size<=0&&(0,_util.warn)("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");const{map:a,transfers:P}=this.annotationStorage.serializable;return this.messageHandler.sendWithPromise("SaveDocument",{isPureXfa:!!this._htmlForXfa,numPages:this._numPages,annotationStorage:a,filename:((b=this._fullReader)==null?void 0:b.filename)??null},P).finally(()=>{this.annotationStorage.resetModified()})}getPage(a){if(!Number.isInteger(a)||a<=0||a>this._numPages)return Promise.reject(new Error("Invalid page request."));const P=a-1,b=t(this,S).get(P);if(b)return b;const j=this.messageHandler.sendWithPromise("GetPage",{pageIndex:P}).then(X=>{if(this.destroyed)throw new Error("Transport destroyed");const w=new PDFPageProxy(P,X,this,this._params.pdfBug);return t(this,k).set(P,w),w});return t(this,S).set(P,j),j}getPageIndex(a){return typeof a!="object"||a===null||!Number.isInteger(a.num)||a.num<0||!Number.isInteger(a.gen)||a.gen<0?Promise.reject(new Error("Invalid pageIndex request.")):this.messageHandler.sendWithPromise("GetPageIndex",{num:a.num,gen:a.gen})}getAnnotations(a,P){return this.messageHandler.sendWithPromise("GetAnnotations",{pageIndex:a,intent:P})}getFieldObjects(){return G(this,f,Ce).call(this,"GetFieldObjects")}hasJSActions(){return G(this,f,Ce).call(this,"HasJSActions")}getCalculationOrderIds(){return this.messageHandler.sendWithPromise("GetCalculationOrderIds",null)}getDestinations(){return this.messageHandler.sendWithPromise("GetDestinations",null)}getDestination(a){return typeof a!="string"?Promise.reject(new Error("Invalid destination request.")):this.messageHandler.sendWithPromise("GetDestination",{id:a})}getPageLabels(){return this.messageHandler.sendWithPromise("GetPageLabels",null)}getPageLayout(){return this.messageHandler.sendWithPromise("GetPageLayout",null)}getPageMode(){return this.messageHandler.sendWithPromise("GetPageMode",null)}getViewerPreferences(){return this.messageHandler.sendWithPromise("GetViewerPreferences",null)}getOpenAction(){return this.messageHandler.sendWithPromise("GetOpenAction",null)}getAttachments(){return this.messageHandler.sendWithPromise("GetAttachments",null)}getDocJSActions(){return G(this,f,Ce).call(this,"GetDocJSActions")}getPageJSActions(a){return this.messageHandler.sendWithPromise("GetPageJSActions",{pageIndex:a})}getStructTree(a){return this.messageHandler.sendWithPromise("GetStructTree",{pageIndex:a})}getOutline(){return this.messageHandler.sendWithPromise("GetOutline",null)}getOptionalContentConfig(){return this.messageHandler.sendWithPromise("GetOptionalContentConfig",null).then(a=>new _optional_content_config.OptionalContentConfig(a))}getPermissions(){return this.messageHandler.sendWithPromise("GetPermissions",null)}getMetadata(){const a="GetMetadata",P=t(this,N).get(a);if(P)return P;const b=this.messageHandler.sendWithPromise(a,null).then(j=>{var X,w;return{info:j[0],metadata:j[1]?new _metadata.Metadata(j[1]):null,contentDispositionFilename:((X=this._fullReader)==null?void 0:X.filename)??null,contentLength:((w=this._fullReader)==null?void 0:w.contentLength)??null}});return t(this,N).set(a,b),b}getMarkInfo(){return this.messageHandler.sendWithPromise("GetMarkInfo",null)}async startCleanup(a=!1){if(!this.destroyed){await this.messageHandler.sendWithPromise("Cleanup",null);for(const P of t(this,k).values())if(!P.cleanup())throw new Error(`startCleanup: Page ${P.pageNumber} is currently rendering.`);this.commonObjs.clear(),a||this.fontLoader.clear(),t(this,N).clear(),this.filterFactory.destroy(!0)}}get loadingParams(){const{disableAutoFetch:a,enableXfa:P}=this._params;return(0,_util.shadow)(this,"loadingParams",{disableAutoFetch:a,enableXfa:P})}}N=new WeakMap,k=new WeakMap,S=new WeakMap,v=new WeakMap,f=new WeakSet,Ce=function(a,P=null){const b=t(this,N).get(a);if(b)return b;const j=this.messageHandler.sendWithPromise(a,P);return t(this,N).set(a,j),j};class PDFObjects{constructor(){L(this,T);L(this,C,Object.create(null))}get(a,P=null){if(P){const j=G(this,T,Ue).call(this,a);return j.capability.promise.then(()=>P(j.data)),null}const b=t(this,C)[a];if(!(b!=null&&b.capability.settled))throw new Error(`Requesting object that isn't resolved yet ${a}.`);return b.data}has(a){const P=t(this,C)[a];return(P==null?void 0:P.capability.settled)||!1}resolve(a,P=null){const b=G(this,T,Ue).call(this,a);b.data=P,b.capability.resolve()}clear(){var a;for(const P in t(this,C)){const{data:b}=t(this,C)[P];(a=b==null?void 0:b.bitmap)==null||a.close()}tt(this,C,Object.create(null))}}C=new WeakMap,T=new WeakSet,Ue=function(a){var P;return(P=t(this,C))[a]||(P[a]={capability:new _util.PromiseCapability,data:null})};class RenderTask{constructor(a){L(this,o,null);tt(this,o,a),this.onContinue=null}get promise(){return t(this,o).capability.promise}cancel(a=0){t(this,o).cancel(null,a)}get separateAnnots(){const{separateAnnots:a}=t(this,o).operatorList;if(!a)return!1;const{annotationCanvasMap:P}=t(this,o);return a.form||a.canvas&&(P==null?void 0:P.size)>0}}o=new WeakMap,exports.RenderTask=RenderTask;const F=class F{constructor({callback:a,params:P,objs:b,commonObjs:j,annotationCanvasMap:X,operatorList:w,pageIndex:V,canvasFactory:nt,filterFactory:ot,useRequestAnimationFrame:H=!1,pdfBug:ht=!1,pageColors:mt=null}){this.callback=a,this.params=P,this.objs=b,this.commonObjs=j,this.annotationCanvasMap=X,this.operatorListIdx=null,this.operatorList=w,this._pageIndex=V,this.canvasFactory=nt,this.filterFactory=ot,this._pdfBug=ht,this.pageColors=mt,this.running=!1,this.graphicsReadyCallback=null,this.graphicsReady=!1,this._useRequestAnimationFrame=H===!0&&typeof window<"u",this.cancelled=!1,this.capability=new _util.PromiseCapability,this.task=new RenderTask(this),this._cancelBound=this.cancel.bind(this),this._continueBound=this._continue.bind(this),this._scheduleNextBound=this._scheduleNext.bind(this),this._nextBound=this._next.bind(this),this._canvas=P.canvasContext.canvas}get completed(){return this.capability.promise.catch(function(){})}initializeGraphics({transparency:a=!1,optionalContentConfig:P}){var V,nt;if(this.cancelled)return;if(this._canvas){if(t(F,h).has(this._canvas))throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");t(F,h).add(this._canvas)}this._pdfBug&&((V=globalThis.StepperManager)!=null&&V.enabled)&&(this.stepper=globalThis.StepperManager.create(this._pageIndex),this.stepper.init(this.operatorList),this.stepper.nextBreakPoint=this.stepper.getNextBreakPoint());const{canvasContext:b,viewport:j,transform:X,background:w}=this.params;this.gfx=new _canvas.CanvasGraphics(b,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:P},this.annotationCanvasMap,this.pageColors),this.gfx.beginDrawing({transform:X,viewport:j,transparency:a,background:w}),this.operatorListIdx=0,this.graphicsReady=!0,(nt=this.graphicsReadyCallback)==null||nt.call(this)}cancel(a=null,P=0){var b;this.running=!1,this.cancelled=!0,(b=this.gfx)==null||b.endDrawing(),t(F,h).delete(this._canvas),this.callback(a||new _display_utils.RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex+1}`,P))}operatorListChanged(){var a;if(!this.graphicsReady){this.graphicsReadyCallback||(this.graphicsReadyCallback=this._continueBound);return}(a=this.stepper)==null||a.updateOperatorList(this.operatorList),!this.running&&this._continue()}_continue(){this.running=!0,!this.cancelled&&(this.task.onContinue?this.task.onContinue(this._scheduleNextBound):this._scheduleNext())}_scheduleNext(){this._useRequestAnimationFrame?window.requestAnimationFrame(()=>{this._nextBound().catch(this._cancelBound)}):Promise.resolve().then(this._nextBound).catch(this._cancelBound)}async _next(){this.cancelled||(this.operatorListIdx=this.gfx.executeOperatorList(this.operatorList,this.operatorListIdx,this._continueBound,this.stepper),this.operatorListIdx===this.operatorList.argsArray.length&&(this.running=!1,this.operatorList.lastChunk&&(this.gfx.endDrawing(),t(F,h).delete(this._canvas),this.callback())))}};h=new WeakMap,L(F,h,new WeakSet);let InternalRenderTask=F;const version="3.11.174";exports.version=version;const build="ce8716743";exports.build=build},(ct,u,it)=>{var M,m,O,yi,k;Object.defineProperty(u,"__esModule",{value:!0}),u.SerializableEmpty=u.PrintAnnotationStorage=u.AnnotationStorage=void 0;var c=it(1),x=it(4),at=it(8);const $=Object.freeze({map:null,hash:"",transfers:void 0});u.SerializableEmpty=$;class gt{constructor(){L(this,O);L(this,M,!1);L(this,m,new Map);this.onSetModified=null,this.onResetModified=null,this.onAnnotationEditor=null}getValue(v,f){const A=t(this,m).get(v);return A===void 0?f:Object.assign(f,A)}getRawValue(v){return t(this,m).get(v)}remove(v){if(t(this,m).delete(v),t(this,m).size===0&&this.resetModified(),typeof this.onAnnotationEditor=="function"){for(const f of t(this,m).values())if(f instanceof x.AnnotationEditor)return;this.onAnnotationEditor(null)}}setValue(v,f){const A=t(this,m).get(v);let C=!1;if(A!==void 0)for(const[T,y]of Object.entries(f))A[T]!==y&&(C=!0,A[T]=y);else C=!0,t(this,m).set(v,f);C&&G(this,O,yi).call(this),f instanceof x.AnnotationEditor&&typeof this.onAnnotationEditor=="function"&&this.onAnnotationEditor(f.constructor._type)}has(v){return t(this,m).has(v)}getAll(){return t(this,m).size>0?(0,c.objectFromMap)(t(this,m)):null}setAll(v){for(const[f,A]of Object.entries(v))this.setValue(f,A)}get size(){return t(this,m).size}resetModified(){t(this,M)&&(tt(this,M,!1),typeof this.onResetModified=="function"&&this.onResetModified())}get print(){return new U(this)}get serializable(){if(t(this,m).size===0)return $;const v=new Map,f=new at.MurmurHash3_64,A=[],C=Object.create(null);let T=!1;for(const[y,o]of t(this,m)){const h=o instanceof x.AnnotationEditor?o.serialize(!1,C):o;h&&(v.set(y,h),f.update(`${y}:${JSON.stringify(h)}`),T||(T=!!h.bitmap))}if(T)for(const y of v.values())y.bitmap&&A.push(y.bitmap);return v.size>0?{map:v,hash:f.hexdigest(),transfers:A}:$}}M=new WeakMap,m=new WeakMap,O=new WeakSet,yi=function(){t(this,M)||(tt(this,M,!0),typeof this.onSetModified=="function"&&this.onSetModified())},u.AnnotationStorage=gt;class U extends gt{constructor(f){super();L(this,k,void 0);const{map:A,hash:C,transfers:T}=f.serializable,y=structuredClone(A,T?{transfer:T}:null);tt(this,k,{map:y,hash:C,transfers:T})}get print(){(0,c.unreachable)("Should not call PrintAnnotationStorage.print")}get serializable(){return t(this,k)}}k=new WeakMap,u.PrintAnnotationStorage=U},(ct,u,it)=>{var U,M,m,O,N,k,S,v,f,A,C,T,y,o,h,je,g,We,P,He,j,Ge,w,vi,nt,Si,H,Ei,mt,ze,kt,wi;Object.defineProperty(u,"__esModule",{value:!0}),u.AnnotationEditor=void 0;var c=it(5),x=it(1),at=it(6);const i=class i{constructor(s){L(this,h);L(this,g);L(this,j);L(this,w);L(this,nt);L(this,H);L(this,mt);L(this,kt);L(this,U,"");L(this,M,!1);L(this,m,null);L(this,O,null);L(this,N,null);L(this,k,!1);L(this,S,null);L(this,v,this.focusin.bind(this));L(this,f,this.focusout.bind(this));L(this,A,!1);L(this,C,!1);L(this,T,!1);ie(this,"_initialOptions",Object.create(null));ie(this,"_uiManager",null);ie(this,"_focusEventsAllowed",!0);ie(this,"_l10nPromise",null);L(this,y,!1);L(this,o,i._zIndex++);this.constructor===i&&(0,x.unreachable)("Cannot initialize AnnotationEditor."),this.parent=s.parent,this.id=s.id,this.width=this.height=null,this.pageIndex=s.parent.pageIndex,this.name=s.name,this.div=null,this._uiManager=s.uiManager,this.annotationElementId=null,this._willKeepAspectRatio=!1,this._initialOptions.isCentered=s.isCentered,this._structTreeParentId=null;const{rotation:l,rawDims:{pageWidth:d,pageHeight:_,pageX:R,pageY:B}}=this.parent.viewport;this.rotation=l,this.pageRotation=(360+l-this._uiManager.viewParameters.rotation)%360,this.pageDimensions=[d,_],this.pageTranslation=[R,B];const[et,Z]=this.parentDimensions;this.x=s.x/et,this.y=s.y/Z,this.isAttachedToDOM=!1,this.deleted=!1}get editorType(){return Object.getPrototypeOf(this).constructor._type}static get _defaultLineColor(){return(0,x.shadow)(this,"_defaultLineColor",this._colorManager.getHexCode("CanvasText"))}static deleteAnnotationElement(s){const l=new gt({id:s.parent.getNextId(),parent:s.parent,uiManager:s._uiManager});l.annotationElementId=s.annotationElementId,l.deleted=!0,l._uiManager.addToAnnotationStorage(l)}static initialize(s,l=null){if(i._l10nPromise||(i._l10nPromise=new Map(["editor_alt_text_button_label","editor_alt_text_edit_button_label","editor_alt_text_decorative_tooltip"].map(_=>[_,s.get(_)]))),l!=null&&l.strings)for(const _ of l.strings)i._l10nPromise.set(_,s.get(_));if(i._borderLineWidth!==-1)return;const d=getComputedStyle(document.documentElement);i._borderLineWidth=parseFloat(d.getPropertyValue("--outline-width"))||0}static updateDefaultParams(s,l){}static get defaultPropertiesToUpdate(){return[]}static isHandlingMimeForPasting(s){return!1}static paste(s,l){(0,x.unreachable)("Not implemented")}get propertiesToUpdate(){return[]}get _isDraggable(){return t(this,y)}set _isDraggable(s){var l;tt(this,y,s),(l=this.div)==null||l.classList.toggle("draggable",s)}center(){const[s,l]=this.pageDimensions;switch(this.parentRotation){case 90:this.x-=this.height*l/(s*2),this.y+=this.width*s/(l*2);break;case 180:this.x+=this.width/2,this.y+=this.height/2;break;case 270:this.x+=this.height*l/(s*2),this.y-=this.width*s/(l*2);break;default:this.x-=this.width/2,this.y-=this.height/2;break}this.fixAndSetPosition()}addCommands(s){this._uiManager.addCommands(s)}get currentLayer(){return this._uiManager.currentLayer}setInBackground(){this.div.style.zIndex=0}setInForeground(){this.div.style.zIndex=t(this,o)}setParent(s){s!==null&&(this.pageIndex=s.pageIndex,this.pageDimensions=s.pageDimensions),this.parent=s}focusin(s){this._focusEventsAllowed&&(t(this,A)?tt(this,A,!1):this.parent.setSelected(this))}focusout(s){var d;if(!this._focusEventsAllowed||!this.isAttachedToDOM)return;const l=s.relatedTarget;l!=null&&l.closest(`#${this.id}`)||(s.preventDefault(),(d=this.parent)!=null&&d.isMultipleSelection||this.commitOrRemove())}commitOrRemove(){this.isEmpty()?this.remove():this.commit()}commit(){this.addToAnnotationStorage()}addToAnnotationStorage(){this._uiManager.addToAnnotationStorage(this)}setAt(s,l,d,_){const[R,B]=this.parentDimensions;[d,_]=this.screenToPageTranslation(d,_),this.x=(s+d)/R,this.y=(l+_)/B,this.fixAndSetPosition()}translate(s,l){G(this,h,je).call(this,this.parentDimensions,s,l)}translateInPage(s,l){G(this,h,je).call(this,this.pageDimensions,s,l),this.div.scrollIntoView({block:"nearest"})}drag(s,l){const[d,_]=this.parentDimensions;if(this.x+=s/d,this.y+=l/_,this.parent&&(this.x<0||this.x>1||this.y<0||this.y>1)){const{x:rt,y:dt}=this.div.getBoundingClientRect();this.parent.findNewParent(this,rt,dt)&&(this.x-=Math.floor(this.x),this.y-=Math.floor(this.y))}let{x:R,y:B}=this;const[et,Z]=G(this,g,We).call(this);R+=et,B+=Z,this.div.style.left=`${(100*R).toFixed(2)}%`,this.div.style.top=`${(100*B).toFixed(2)}%`,this.div.scrollIntoView({block:"nearest"})}fixAndSetPosition(){const[s,l]=this.pageDimensions;let{x:d,y:_,width:R,height:B}=this;switch(R*=s,B*=l,d*=s,_*=l,this.rotation){case 0:d=Math.max(0,Math.min(s-R,d)),_=Math.max(0,Math.min(l-B,_));break;case 90:d=Math.max(0,Math.min(s-B,d)),_=Math.min(l,Math.max(R,_));break;case 180:d=Math.min(s,Math.max(R,d)),_=Math.min(l,Math.max(B,_));break;case 270:d=Math.min(s,Math.max(B,d)),_=Math.max(0,Math.min(l-R,_));break}this.x=d/=s,this.y=_/=l;const[et,Z]=G(this,g,We).call(this);d+=et,_+=Z;const{style:rt}=this.div;rt.left=`${(100*d).toFixed(2)}%`,rt.top=`${(100*_).toFixed(2)}%`,this.moveInDOM()}screenToPageTranslation(s,l){var d;return G(d=i,P,He).call(d,s,l,this.parentRotation)}pageTranslationToScreen(s,l){var d;return G(d=i,P,He).call(d,s,l,360-this.parentRotation)}get parentScale(){return this._uiManager.viewParameters.realScale}get parentRotation(){return(this._uiManager.viewParameters.rotation+this.pageRotation)%360}get parentDimensions(){const{parentScale:s,pageDimensions:[l,d]}=this,_=l*s,R=d*s;return x.FeatureTest.isCSSRoundSupported?[Math.round(_),Math.round(R)]:[_,R]}setDims(s,l){var R;const[d,_]=this.parentDimensions;this.div.style.width=`${(100*s/d).toFixed(2)}%`,t(this,k)||(this.div.style.height=`${(100*l/_).toFixed(2)}%`),(R=t(this,m))==null||R.classList.toggle("small",s<i.SMALL_EDITOR_SIZE||l<i.SMALL_EDITOR_SIZE)}fixDims(){const{style:s}=this.div,{height:l,width:d}=s,_=d.endsWith("%"),R=!t(this,k)&&l.endsWith("%");if(_&&R)return;const[B,et]=this.parentDimensions;_||(s.width=`${(100*parseFloat(d)/B).toFixed(2)}%`),!t(this,k)&&!R&&(s.height=`${(100*parseFloat(l)/et).toFixed(2)}%`)}getInitialTranslation(){return[0,0]}async addAltTextButton(){if(t(this,m))return;const s=tt(this,m,document.createElement("button"));s.className="altText";const l=await i._l10nPromise.get("editor_alt_text_button_label");s.textContent=l,s.setAttribute("aria-label",l),s.tabIndex="0",s.addEventListener("contextmenu",at.noContextMenu),s.addEventListener("pointerdown",d=>d.stopPropagation()),s.addEventListener("click",d=>{d.preventDefault(),this._uiManager.editAltText(this)},{capture:!0}),s.addEventListener("keydown",d=>{d.target===s&&d.key==="Enter"&&(d.preventDefault(),this._uiManager.editAltText(this))}),G(this,mt,ze).call(this),this.div.append(s),i.SMALL_EDITOR_SIZE||(i.SMALL_EDITOR_SIZE=Math.min(128,Math.round(s.getBoundingClientRect().width*1.4)))}getClientDimensions(){return this.div.getBoundingClientRect()}get altTextData(){return{altText:t(this,U),decorative:t(this,M)}}set altTextData({altText:s,decorative:l}){t(this,U)===s&&t(this,M)===l||(tt(this,U,s),tt(this,M,l),G(this,mt,ze).call(this))}render(){this.div=document.createElement("div"),this.div.setAttribute("data-editor-rotation",(360-this.rotation)%360),this.div.className=this.name,this.div.setAttribute("id",this.id),this.div.setAttribute("tabIndex",0),this.setInForeground(),this.div.addEventListener("focusin",t(this,v)),this.div.addEventListener("focusout",t(this,f));const[s,l]=this.parentDimensions;this.parentRotation%180!==0&&(this.div.style.maxWidth=`${(100*l/s).toFixed(2)}%`,this.div.style.maxHeight=`${(100*s/l).toFixed(2)}%`);const[d,_]=this.getInitialTranslation();return this.translate(d,_),(0,c.bindEvents)(this,this.div,["pointerdown"]),this.div}pointerdown(s){const{isMac:l}=x.FeatureTest.platform;if(s.button!==0||s.ctrlKey&&l){s.preventDefault();return}tt(this,A,!0),G(this,kt,wi).call(this,s)}moveInDOM(){var s;(s=this.parent)==null||s.moveEditorInDOM(this)}_setParentAndPosition(s,l,d){s.changeParent(this),this.x=l,this.y=d,this.fixAndSetPosition()}getRect(s,l){const d=this.parentScale,[_,R]=this.pageDimensions,[B,et]=this.pageTranslation,Z=s/d,rt=l/d,dt=this.x*_,vt=this.y*R,ft=this.width*_,Mt=this.height*R;switch(this.rotation){case 0:return[dt+Z+B,R-vt-rt-Mt+et,dt+Z+ft+B,R-vt-rt+et];case 90:return[dt+rt+B,R-vt+Z+et,dt+rt+Mt+B,R-vt+Z+ft+et];case 180:return[dt-Z-ft+B,R-vt+rt+et,dt-Z+B,R-vt+rt+Mt+et];case 270:return[dt-rt-Mt+B,R-vt-Z-ft+et,dt-rt+B,R-vt-Z+et];default:throw new Error("Invalid rotation")}}getRectInCurrentCoords(s,l){const[d,_,R,B]=s,et=R-d,Z=B-_;switch(this.rotation){case 0:return[d,l-B,et,Z];case 90:return[d,l-_,Z,et];case 180:return[R,l-_,et,Z];case 270:return[R,l-B,Z,et];default:throw new Error("Invalid rotation")}}onceAdded(){}isEmpty(){return!1}enableEditMode(){tt(this,T,!0)}disableEditMode(){tt(this,T,!1)}isInEditMode(){return t(this,T)}shouldGetKeyboardEvents(){return!1}needsToBeRebuilt(){return this.div&&!this.isAttachedToDOM}rebuild(){var s,l;(s=this.div)==null||s.addEventListener("focusin",t(this,v)),(l=this.div)==null||l.addEventListener("focusout",t(this,f))}serialize(s=!1,l=null){(0,x.unreachable)("An editor must be serializable")}static deserialize(s,l,d){const _=new this.prototype.constructor({parent:l,id:l.getNextId(),uiManager:d});_.rotation=s.rotation;const[R,B]=_.pageDimensions,[et,Z,rt,dt]=_.getRectInCurrentCoords(s.rect,B);return _.x=et/R,_.y=Z/B,_.width=rt/R,_.height=dt/B,_}remove(){var s;this.div.removeEventListener("focusin",t(this,v)),this.div.removeEventListener("focusout",t(this,f)),this.isEmpty()||this.commit(),this.parent?this.parent.remove(this):this._uiManager.removeEditor(this),(s=t(this,m))==null||s.remove(),tt(this,m,null),tt(this,O,null)}get isResizable(){return!1}makeResizable(){this.isResizable&&(G(this,w,vi).call(this),t(this,S).classList.remove("hidden"))}select(){var s;this.makeResizable(),(s=this.div)==null||s.classList.add("selectedEditor")}unselect(){var s,l,d;(s=t(this,S))==null||s.classList.add("hidden"),(l=this.div)==null||l.classList.remove("selectedEditor"),(d=this.div)!=null&&d.contains(document.activeElement)&&this._uiManager.currentLayer.div.focus()}updateParams(s,l){}disableEditing(){t(this,m)&&(t(this,m).hidden=!0)}enableEditing(){t(this,m)&&(t(this,m).hidden=!1)}enterInEditMode(){}get contentDiv(){return this.div}get isEditing(){return t(this,C)}set isEditing(s){tt(this,C,s),this.parent&&(s?(this.parent.setSelected(this),this.parent.setActiveEditor(this)):this.parent.setActiveEditor(null))}setAspectRatio(s,l){tt(this,k,!0);const d=s/l,{style:_}=this.div;_.aspectRatio=d,_.height="auto"}static get MIN_SIZE(){return 16}};U=new WeakMap,M=new WeakMap,m=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakMap,S=new WeakMap,v=new WeakMap,f=new WeakMap,A=new WeakMap,C=new WeakMap,T=new WeakMap,y=new WeakMap,o=new WeakMap,h=new WeakSet,je=function([s,l],d,_){[d,_]=this.screenToPageTranslation(d,_),this.x+=d/s,this.y+=_/l,this.fixAndSetPosition()},g=new WeakSet,We=function(){const[s,l]=this.parentDimensions,{_borderLineWidth:d}=i,_=d/s,R=d/l;switch(this.rotation){case 90:return[-_,R];case 180:return[_,R];case 270:return[_,-R];default:return[-_,-R]}},P=new WeakSet,He=function(s,l,d){switch(d){case 90:return[l,-s];case 180:return[-s,-l];case 270:return[-l,s];default:return[s,l]}},j=new WeakSet,Ge=function(s){switch(s){case 90:{const[l,d]=this.pageDimensions;return[0,-l/d,d/l,0]}case 180:return[-1,0,0,-1];case 270:{const[l,d]=this.pageDimensions;return[0,l/d,-d/l,0]}default:return[1,0,0,1]}},w=new WeakSet,vi=function(){if(t(this,S))return;tt(this,S,document.createElement("div")),t(this,S).classList.add("resizers");const s=["topLeft","topRight","bottomRight","bottomLeft"];this._willKeepAspectRatio||s.push("topMiddle","middleRight","bottomMiddle","middleLeft");for(const l of s){const d=document.createElement("div");t(this,S).append(d),d.classList.add("resizer",l),d.addEventListener("pointerdown",G(this,nt,Si).bind(this,l)),d.addEventListener("contextmenu",at.noContextMenu)}this.div.prepend(t(this,S))},nt=new WeakSet,Si=function(s,l){l.preventDefault();const{isMac:d}=x.FeatureTest.platform;if(l.button!==0||l.ctrlKey&&d)return;const _=G(this,H,Ei).bind(this,s),R=this._isDraggable;this._isDraggable=!1;const B={passive:!0,capture:!0};window.addEventListener("pointermove",_,B);const et=this.x,Z=this.y,rt=this.width,dt=this.height,vt=this.parent.div.style.cursor,ft=this.div.style.cursor;this.div.style.cursor=this.parent.div.style.cursor=window.getComputedStyle(l.target).cursor;const Mt=()=>{this._isDraggable=R,window.removeEventListener("pointerup",Mt),window.removeEventListener("blur",Mt),window.removeEventListener("pointermove",_,B),this.parent.div.style.cursor=vt,this.div.style.cursor=ft;const Ut=this.x,Et=this.y,It=this.width,pt=this.height;Ut===et&&Et===Z&&It===rt&&pt===dt||this.addCommands({cmd:()=>{this.width=It,this.height=pt,this.x=Ut,this.y=Et;const[J,Q]=this.parentDimensions;this.setDims(J*It,Q*pt),this.fixAndSetPosition()},undo:()=>{this.width=rt,this.height=dt,this.x=et,this.y=Z;const[J,Q]=this.parentDimensions;this.setDims(J*rt,Q*dt),this.fixAndSetPosition()},mustExec:!0})};window.addEventListener("pointerup",Mt),window.addEventListener("blur",Mt)},H=new WeakSet,Ei=function(s,l){const[d,_]=this.parentDimensions,R=this.x,B=this.y,et=this.width,Z=this.height,rt=i.MIN_SIZE/d,dt=i.MIN_SIZE/_,vt=_t=>Math.round(_t*1e4)/1e4,ft=G(this,j,Ge).call(this,this.rotation),Mt=(_t,yt)=>[ft[0]*_t+ft[2]*yt,ft[1]*_t+ft[3]*yt],Ut=G(this,j,Ge).call(this,360-this.rotation),Et=(_t,yt)=>[Ut[0]*_t+Ut[2]*yt,Ut[1]*_t+Ut[3]*yt];let It,pt,J=!1,Q=!1;switch(s){case"topLeft":J=!0,It=(_t,yt)=>[0,0],pt=(_t,yt)=>[_t,yt];break;case"topMiddle":It=(_t,yt)=>[_t/2,0],pt=(_t,yt)=>[_t/2,yt];break;case"topRight":J=!0,It=(_t,yt)=>[_t,0],pt=(_t,yt)=>[0,yt];break;case"middleRight":Q=!0,It=(_t,yt)=>[_t,yt/2],pt=(_t,yt)=>[0,yt/2];break;case"bottomRight":J=!0,It=(_t,yt)=>[_t,yt],pt=(_t,yt)=>[0,0];break;case"bottomMiddle":It=(_t,yt)=>[_t/2,yt],pt=(_t,yt)=>[_t/2,0];break;case"bottomLeft":J=!0,It=(_t,yt)=>[0,yt],pt=(_t,yt)=>[_t,0];break;case"middleLeft":Q=!0,It=(_t,yt)=>[0,yt/2],pt=(_t,yt)=>[_t,yt/2];break}const ut=It(et,Z),wt=pt(et,Z);let Tt=Mt(...wt);const Wt=vt(R+Tt[0]),zt=vt(B+Tt[1]);let Ht=1,$t=1,[Vt,Gt]=this.screenToPageTranslation(l.movementX,l.movementY);if([Vt,Gt]=Et(Vt/d,Gt/_),J){const _t=Math.hypot(et,Z);Ht=$t=Math.max(Math.min(Math.hypot(wt[0]-ut[0]-Vt,wt[1]-ut[1]-Gt)/_t,1/et,1/Z),rt/et,dt/Z)}else Q?Ht=Math.max(rt,Math.min(1,Math.abs(wt[0]-ut[0]-Vt)))/et:$t=Math.max(dt,Math.min(1,Math.abs(wt[1]-ut[1]-Gt)))/Z;const Yt=vt(et*Ht),lt=vt(Z*$t);Tt=Mt(...pt(Yt,lt));const K=Wt-Tt[0],z=zt-Tt[1];this.width=Yt,this.height=lt,this.x=K,this.y=z,this.setDims(d*Yt,_*lt),this.fixAndSetPosition()},mt=new WeakSet,ze=async function(){var d;const s=t(this,m);if(!s)return;if(!t(this,U)&&!t(this,M)){s.classList.remove("done"),(d=t(this,O))==null||d.remove();return}i._l10nPromise.get("editor_alt_text_edit_button_label").then(_=>{s.setAttribute("aria-label",_)});let l=t(this,O);if(!l){tt(this,O,l=document.createElement("span")),l.className="tooltip",l.setAttribute("role","tooltip");const _=l.id=`alt-text-tooltip-${this.id}`;s.setAttribute("aria-describedby",_);const R=100;s.addEventListener("mouseenter",()=>{tt(this,N,setTimeout(()=>{tt(this,N,null),t(this,O).classList.add("show"),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"alt_text_tooltip"}}})},R))}),s.addEventListener("mouseleave",()=>{var B;clearTimeout(t(this,N)),tt(this,N,null),(B=t(this,O))==null||B.classList.remove("show")})}s.classList.add("done"),l.innerText=t(this,M)?await i._l10nPromise.get("editor_alt_text_decorative_tooltip"):t(this,U),l.parentNode||s.append(l)},kt=new WeakSet,wi=function(s){if(!this._isDraggable)return;const l=this._uiManager.isSelected(this);this._uiManager.setUpDragSession();let d,_;l&&(d={passive:!0,capture:!0},_=B=>{const[et,Z]=this.screenToPageTranslation(B.movementX,B.movementY);this._uiManager.dragSelectedEditors(et,Z)},window.addEventListener("pointermove",_,d));const R=()=>{if(window.removeEventListener("pointerup",R),window.removeEventListener("blur",R),l&&window.removeEventListener("pointermove",_,d),tt(this,A,!1),!this._uiManager.endDragSession()){const{isMac:B}=x.FeatureTest.platform;s.ctrlKey&&!B||s.shiftKey||s.metaKey&&B?this.parent.toggleSelected(this):this.parent.setSelected(this)}};window.addEventListener("pointerup",R),window.addEventListener("blur",R)},L(i,P),ie(i,"_borderLineWidth",-1),ie(i,"_colorManager",new c.ColorManager),ie(i,"_zIndex",1),ie(i,"SMALL_EDITOR_SIZE",0);let $=i;u.AnnotationEditor=$;class gt extends ${constructor(s){super(s),this.annotationElementId=s.annotationElementId,this.deleted=!0}serialize(){return{id:this.annotationElementId,deleted:!0,pageIndex:this.pageIndex}}}},(ct,u,it)=>{var k,S,v,f,A,Xe,y,o,h,F,g,Ci,b,j,X,w,V,nt,ot,H,ht,mt,Ct,kt,E,i,n,s,l,d,_,R,B,et,Z,rt,dt,vt,ft,Mt,Ut,Et,It,pt,J,Q,ut,Ti,Tt,$e,zt,Ve,$t,Te,Gt,qe,lt,Ye,z,ae,yt,be,te,Pi,St,xi,Pt,Ke,Bt,_e,At,Je;Object.defineProperty(u,"__esModule",{value:!0}),u.KeyboardManager=u.CommandManager=u.ColorManager=u.AnnotationEditorUIManager=void 0,u.bindEvents=at,u.opacityToHex=$;var c=it(1),x=it(6);function at(D,e,p){for(const I of p)e.addEventListener(I,D[I].bind(D))}function $(D){return Math.round(Math.min(255,Math.max(1,255*D))).toString(16).padStart(2,"0")}class gt{constructor(){L(this,k,0)}getId(){return`${c.AnnotationEditorPrefix}${me(this,k)._++}`}}k=new WeakMap;const T=class T{constructor(){L(this,A);L(this,S,(0,c.getUuid)());L(this,v,0);L(this,f,null)}static get _isSVGFittingCanvas(){const e='data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>',I=new OffscreenCanvas(1,3).getContext("2d"),W=new Image;W.src=e;const q=W.decode().then(()=>(I.drawImage(W,0,0,1,1,0,0,1,3),new Uint32Array(I.getImageData(0,0,1,1).data.buffer)[0]===0));return(0,c.shadow)(this,"_isSVGFittingCanvas",q)}async getFromFile(e){const{lastModified:p,name:I,size:W,type:q}=e;return G(this,A,Xe).call(this,`${p}_${I}_${W}_${q}`,e)}async getFromUrl(e){return G(this,A,Xe).call(this,e,e)}async getFromId(e){t(this,f)||tt(this,f,new Map);const p=t(this,f).get(e);return p?p.bitmap?(p.refCounter+=1,p):p.file?this.getFromFile(p.file):this.getFromUrl(p.url):null}getSvgUrl(e){const p=t(this,f).get(e);return p!=null&&p.isSvg?p.svgUrl:null}deleteId(e){t(this,f)||tt(this,f,new Map);const p=t(this,f).get(e);p&&(p.refCounter-=1,p.refCounter===0&&(p.bitmap=null))}isValidId(e){return e.startsWith(`image_${t(this,S)}_`)}};S=new WeakMap,v=new WeakMap,f=new WeakMap,A=new WeakSet,Xe=async function(e,p){t(this,f)||tt(this,f,new Map);let I=t(this,f).get(e);if(I===null)return null;if(I!=null&&I.bitmap)return I.refCounter+=1,I;try{I||(I={bitmap:null,id:`image_${t(this,S)}_${me(this,v)._++}`,refCounter:0,isSvg:!1});let W;if(typeof p=="string"){I.url=p;const q=await fetch(p);if(!q.ok)throw new Error(q.statusText);W=await q.blob()}else W=I.file=p;if(W.type==="image/svg+xml"){const q=T._isSVGFittingCanvas,st=new FileReader,bt=new Image,Ft=new Promise((xt,Xt)=>{bt.onload=()=>{I.bitmap=bt,I.isSvg=!0,xt()},st.onload=async()=>{const Rt=I.svgUrl=st.result;bt.src=await q?`${Rt}#svgView(preserveAspectRatio(none))`:Rt},bt.onerror=st.onerror=Xt});st.readAsDataURL(W),await Ft}else I.bitmap=await createImageBitmap(W);I.refCounter=1}catch(W){console.error(W),I=null}return t(this,f).set(e,I),I&&t(this,f).set(I.id,I),I};let U=T;class M{constructor(e=128){L(this,y,[]);L(this,o,!1);L(this,h,void 0);L(this,F,-1);tt(this,h,e)}add({cmd:e,undo:p,mustExec:I,type:W=NaN,overwriteIfSameType:q=!1,keepUndo:st=!1}){if(I&&e(),t(this,o))return;const bt={cmd:e,undo:p,type:W};if(t(this,F)===-1){t(this,y).length>0&&(t(this,y).length=0),tt(this,F,0),t(this,y).push(bt);return}if(q&&t(this,y)[t(this,F)].type===W){st&&(bt.undo=t(this,y)[t(this,F)].undo),t(this,y)[t(this,F)]=bt;return}const Ft=t(this,F)+1;Ft===t(this,h)?t(this,y).splice(0,1):(tt(this,F,Ft),Ft<t(this,y).length&&t(this,y).splice(Ft)),t(this,y).push(bt)}undo(){t(this,F)!==-1&&(tt(this,o,!0),t(this,y)[t(this,F)].undo(),tt(this,o,!1),tt(this,F,t(this,F)-1))}redo(){t(this,F)<t(this,y).length-1&&(tt(this,F,t(this,F)+1),tt(this,o,!0),t(this,y)[t(this,F)].cmd(),tt(this,o,!1))}hasSomethingToUndo(){return t(this,F)!==-1}hasSomethingToRedo(){return t(this,F)<t(this,y).length-1}destroy(){tt(this,y,null)}}y=new WeakMap,o=new WeakMap,h=new WeakMap,F=new WeakMap,u.CommandManager=M;class m{constructor(e){L(this,g);this.buffer=[],this.callbacks=new Map,this.allKeys=new Set;const{isMac:p}=c.FeatureTest.platform;for(const[I,W,q={}]of e)for(const st of I){const bt=st.startsWith("mac+");p&&bt?(this.callbacks.set(st.slice(4),{callback:W,options:q}),this.allKeys.add(st.split("+").at(-1))):!p&&!bt&&(this.callbacks.set(st,{callback:W,options:q}),this.allKeys.add(st.split("+").at(-1)))}}exec(e,p){if(!this.allKeys.has(p.key))return;const I=this.callbacks.get(G(this,g,Ci).call(this,p));if(!I)return;const{callback:W,options:{bubbles:q=!1,args:st=[],checker:bt=null}}=I;bt&&!bt(e,p)||(W.bind(e,...st)(),q||(p.stopPropagation(),p.preventDefault()))}}g=new WeakSet,Ci=function(e){e.altKey&&this.buffer.push("alt"),e.ctrlKey&&this.buffer.push("ctrl"),e.metaKey&&this.buffer.push("meta"),e.shiftKey&&this.buffer.push("shift"),this.buffer.push(e.key);const p=this.buffer.join("+");return this.buffer.length=0,p},u.KeyboardManager=m;const P=class P{get _colors(){const e=new Map([["CanvasText",null],["Canvas",null]]);return(0,x.getColorValues)(e),(0,c.shadow)(this,"_colors",e)}convert(e){const p=(0,x.getRGB)(e);if(!window.matchMedia("(forced-colors: active)").matches)return p;for(const[I,W]of this._colors)if(W.every((q,st)=>q===p[st]))return P._colorsMapping.get(I);return p}getHexCode(e){const p=this._colors.get(e);return p?c.Util.makeHexColor(...p):e}};ie(P,"_colorsMapping",new Map([["CanvasText",[0,0,0]],["Canvas",[255,255,255]]]));let O=P;u.ColorManager=O;const Lt=class Lt{constructor(e,p,I,W,q,st){L(this,ut);L(this,Tt);L(this,zt);L(this,$t);L(this,Gt);L(this,lt);L(this,z);L(this,yt);L(this,te);L(this,St);L(this,Pt);L(this,Bt);L(this,At);L(this,b,null);L(this,j,new Map);L(this,X,new Map);L(this,w,null);L(this,V,null);L(this,nt,new M);L(this,ot,0);L(this,H,new Set);L(this,ht,null);L(this,mt,null);L(this,Ct,new Set);L(this,kt,null);L(this,E,new gt);L(this,i,!1);L(this,n,!1);L(this,s,null);L(this,l,c.AnnotationEditorType.NONE);L(this,d,new Set);L(this,_,null);L(this,R,this.blur.bind(this));L(this,B,this.focus.bind(this));L(this,et,this.copy.bind(this));L(this,Z,this.cut.bind(this));L(this,rt,this.paste.bind(this));L(this,dt,this.keydown.bind(this));L(this,vt,this.onEditingAction.bind(this));L(this,ft,this.onPageChanging.bind(this));L(this,Mt,this.onScaleChanging.bind(this));L(this,Ut,this.onRotationChanging.bind(this));L(this,Et,{isEditing:!1,isEmpty:!0,hasSomethingToUndo:!1,hasSomethingToRedo:!1,hasSelectedEditor:!1});L(this,It,[0,0]);L(this,pt,null);L(this,J,null);L(this,Q,null);tt(this,J,e),tt(this,Q,p),tt(this,w,I),this._eventBus=W,this._eventBus._on("editingaction",t(this,vt)),this._eventBus._on("pagechanging",t(this,ft)),this._eventBus._on("scalechanging",t(this,Mt)),this._eventBus._on("rotationchanging",t(this,Ut)),tt(this,V,q.annotationStorage),tt(this,kt,q.filterFactory),tt(this,_,st),this.viewParameters={realScale:x.PixelsPerInch.PDF_TO_CSS_UNITS,rotation:0}}static get _keyboardManager(){const e=Lt.prototype,p=q=>{const{activeElement:st}=document;return st&&t(q,J).contains(st)&&q.hasSomethingToControl()},I=this.TRANSLATE_SMALL,W=this.TRANSLATE_BIG;return(0,c.shadow)(this,"_keyboardManager",new m([[["ctrl+a","mac+meta+a"],e.selectAll],[["ctrl+z","mac+meta+z"],e.undo],[["ctrl+y","ctrl+shift+z","mac+meta+shift+z","ctrl+shift+Z","mac+meta+shift+Z"],e.redo],[["Backspace","alt+Backspace","ctrl+Backspace","shift+Backspace","mac+Backspace","mac+alt+Backspace","mac+ctrl+Backspace","Delete","ctrl+Delete","shift+Delete","mac+Delete"],e.delete],[["Escape","mac+Escape"],e.unselectAll],[["ArrowLeft","mac+ArrowLeft"],e.translateSelectedEditors,{args:[-I,0],checker:p}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],e.translateSelectedEditors,{args:[-W,0],checker:p}],[["ArrowRight","mac+ArrowRight"],e.translateSelectedEditors,{args:[I,0],checker:p}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],e.translateSelectedEditors,{args:[W,0],checker:p}],[["ArrowUp","mac+ArrowUp"],e.translateSelectedEditors,{args:[0,-I],checker:p}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],e.translateSelectedEditors,{args:[0,-W],checker:p}],[["ArrowDown","mac+ArrowDown"],e.translateSelectedEditors,{args:[0,I],checker:p}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],e.translateSelectedEditors,{args:[0,W],checker:p}]]))}destroy(){G(this,$t,Te).call(this),G(this,Tt,$e).call(this),this._eventBus._off("editingaction",t(this,vt)),this._eventBus._off("pagechanging",t(this,ft)),this._eventBus._off("scalechanging",t(this,Mt)),this._eventBus._off("rotationchanging",t(this,Ut));for(const e of t(this,X).values())e.destroy();t(this,X).clear(),t(this,j).clear(),t(this,Ct).clear(),tt(this,b,null),t(this,d).clear(),t(this,nt).destroy(),t(this,w).destroy()}get hcmFilter(){return(0,c.shadow)(this,"hcmFilter",t(this,_)?t(this,kt).addHCMFilter(t(this,_).foreground,t(this,_).background):"none")}get direction(){return(0,c.shadow)(this,"direction",getComputedStyle(t(this,J)).direction)}editAltText(e){var p;(p=t(this,w))==null||p.editAltText(this,e)}onPageChanging({pageNumber:e}){tt(this,ot,e-1)}focusMainContainer(){t(this,J).focus()}findParent(e,p){for(const I of t(this,X).values()){const{x:W,y:q,width:st,height:bt}=I.div.getBoundingClientRect();if(e>=W&&e<=W+st&&p>=q&&p<=q+bt)return I}return null}disableUserSelect(e=!1){t(this,Q).classList.toggle("noUserSelect",e)}addShouldRescale(e){t(this,Ct).add(e)}removeShouldRescale(e){t(this,Ct).delete(e)}onScaleChanging({scale:e}){this.commitOrRemove(),this.viewParameters.realScale=e*x.PixelsPerInch.PDF_TO_CSS_UNITS;for(const p of t(this,Ct))p.onScaleChanging()}onRotationChanging({pagesRotation:e}){this.commitOrRemove(),this.viewParameters.rotation=e}addToAnnotationStorage(e){!e.isEmpty()&&t(this,V)&&!t(this,V).has(e.id)&&t(this,V).setValue(e.id,e)}blur(){if(!this.hasSelection)return;const{activeElement:e}=document;for(const p of t(this,d))if(p.div.contains(e)){tt(this,s,[p,e]),p._focusEventsAllowed=!1;break}}focus(){if(!t(this,s))return;const[e,p]=t(this,s);tt(this,s,null),p.addEventListener("focusin",()=>{e._focusEventsAllowed=!0},{once:!0}),p.focus()}addEditListeners(){G(this,zt,Ve).call(this),G(this,Gt,qe).call(this)}removeEditListeners(){G(this,$t,Te).call(this),G(this,lt,Ye).call(this)}copy(e){var I;if(e.preventDefault(),(I=t(this,b))==null||I.commitOrRemove(),!this.hasSelection)return;const p=[];for(const W of t(this,d)){const q=W.serialize(!0);q&&p.push(q)}p.length!==0&&e.clipboardData.setData("application/pdfjs",JSON.stringify(p))}cut(e){this.copy(e),this.delete()}paste(e){e.preventDefault();const{clipboardData:p}=e;for(const q of p.items)for(const st of t(this,mt))if(st.isHandlingMimeForPasting(q.type)){st.paste(q,this.currentLayer);return}let I=p.getData("application/pdfjs");if(!I)return;try{I=JSON.parse(I)}catch(q){(0,c.warn)(`paste: "${q.message}".`);return}if(!Array.isArray(I))return;this.unselectAll();const W=this.currentLayer;try{const q=[];for(const Ft of I){const xt=W.deserialize(Ft);if(!xt)return;q.push(xt)}const st=()=>{for(const Ft of q)G(this,Pt,Ke).call(this,Ft);G(this,At,Je).call(this,q)},bt=()=>{for(const Ft of q)Ft.remove()};this.addCommands({cmd:st,undo:bt,mustExec:!0})}catch(q){(0,c.warn)(`paste: "${q.message}".`)}}keydown(e){var p;(p=this.getActive())!=null&&p.shouldGetKeyboardEvents()||Lt._keyboardManager.exec(this,e)}onEditingAction(e){["undo","redo","delete","selectAll"].includes(e.name)&&this[e.name]()}setEditingState(e){e?(G(this,ut,Ti).call(this),G(this,zt,Ve).call(this),G(this,Gt,qe).call(this),G(this,z,ae).call(this,{isEditing:t(this,l)!==c.AnnotationEditorType.NONE,isEmpty:G(this,Bt,_e).call(this),hasSomethingToUndo:t(this,nt).hasSomethingToUndo(),hasSomethingToRedo:t(this,nt).hasSomethingToRedo(),hasSelectedEditor:!1})):(G(this,Tt,$e).call(this),G(this,$t,Te).call(this),G(this,lt,Ye).call(this),G(this,z,ae).call(this,{isEditing:!1}),this.disableUserSelect(!1))}registerEditorTypes(e){if(!t(this,mt)){tt(this,mt,e);for(const p of t(this,mt))G(this,yt,be).call(this,p.defaultPropertiesToUpdate)}}getId(){return t(this,E).getId()}get currentLayer(){return t(this,X).get(t(this,ot))}getLayer(e){return t(this,X).get(e)}get currentPageIndex(){return t(this,ot)}addLayer(e){t(this,X).set(e.pageIndex,e),t(this,i)?e.enable():e.disable()}removeLayer(e){t(this,X).delete(e.pageIndex)}updateMode(e,p=null){if(t(this,l)!==e){if(tt(this,l,e),e===c.AnnotationEditorType.NONE){this.setEditingState(!1),G(this,St,xi).call(this);return}this.setEditingState(!0),G(this,te,Pi).call(this),this.unselectAll();for(const I of t(this,X).values())I.updateMode(e);if(p){for(const I of t(this,j).values())if(I.annotationElementId===p){this.setSelected(I),I.enterInEditMode();break}}}}updateToolbar(e){e!==t(this,l)&&this._eventBus.dispatch("switchannotationeditormode",{source:this,mode:e})}updateParams(e,p){if(t(this,mt)){if(e===c.AnnotationEditorParamsType.CREATE){this.currentLayer.addNewEditor(e);return}for(const I of t(this,d))I.updateParams(e,p);for(const I of t(this,mt))I.updateDefaultParams(e,p)}}enableWaiting(e=!1){if(t(this,n)!==e){tt(this,n,e);for(const p of t(this,X).values())e?p.disableClick():p.enableClick(),p.div.classList.toggle("waiting",e)}}getEditors(e){const p=[];for(const I of t(this,j).values())I.pageIndex===e&&p.push(I);return p}getEditor(e){return t(this,j).get(e)}addEditor(e){t(this,j).set(e.id,e)}removeEditor(e){var p;t(this,j).delete(e.id),this.unselect(e),(!e.annotationElementId||!t(this,H).has(e.annotationElementId))&&((p=t(this,V))==null||p.remove(e.id))}addDeletedAnnotationElement(e){t(this,H).add(e.annotationElementId),e.deleted=!0}isDeletedAnnotationElement(e){return t(this,H).has(e)}removeDeletedAnnotationElement(e){t(this,H).delete(e.annotationElementId),e.deleted=!1}setActiveEditor(e){t(this,b)!==e&&(tt(this,b,e),e&&G(this,yt,be).call(this,e.propertiesToUpdate))}toggleSelected(e){if(t(this,d).has(e)){t(this,d).delete(e),e.unselect(),G(this,z,ae).call(this,{hasSelectedEditor:this.hasSelection});return}t(this,d).add(e),e.select(),G(this,yt,be).call(this,e.propertiesToUpdate),G(this,z,ae).call(this,{hasSelectedEditor:!0})}setSelected(e){for(const p of t(this,d))p!==e&&p.unselect();t(this,d).clear(),t(this,d).add(e),e.select(),G(this,yt,be).call(this,e.propertiesToUpdate),G(this,z,ae).call(this,{hasSelectedEditor:!0})}isSelected(e){return t(this,d).has(e)}unselect(e){e.unselect(),t(this,d).delete(e),G(this,z,ae).call(this,{hasSelectedEditor:this.hasSelection})}get hasSelection(){return t(this,d).size!==0}undo(){t(this,nt).undo(),G(this,z,ae).call(this,{hasSomethingToUndo:t(this,nt).hasSomethingToUndo(),hasSomethingToRedo:!0,isEmpty:G(this,Bt,_e).call(this)})}redo(){t(this,nt).redo(),G(this,z,ae).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:t(this,nt).hasSomethingToRedo(),isEmpty:G(this,Bt,_e).call(this)})}addCommands(e){t(this,nt).add(e),G(this,z,ae).call(this,{hasSomethingToUndo:!0,hasSomethingToRedo:!1,isEmpty:G(this,Bt,_e).call(this)})}delete(){if(this.commitOrRemove(),!this.hasSelection)return;const e=[...t(this,d)],p=()=>{for(const W of e)W.remove()},I=()=>{for(const W of e)G(this,Pt,Ke).call(this,W)};this.addCommands({cmd:p,undo:I,mustExec:!0})}commitOrRemove(){var e;(e=t(this,b))==null||e.commitOrRemove()}hasSomethingToControl(){return t(this,b)||this.hasSelection}selectAll(){for(const e of t(this,d))e.commit();G(this,At,Je).call(this,t(this,j).values())}unselectAll(){if(t(this,b)){t(this,b).commitOrRemove();return}if(this.hasSelection){for(const e of t(this,d))e.unselect();t(this,d).clear(),G(this,z,ae).call(this,{hasSelectedEditor:!1})}}translateSelectedEditors(e,p,I=!1){if(I||this.commitOrRemove(),!this.hasSelection)return;t(this,It)[0]+=e,t(this,It)[1]+=p;const[W,q]=t(this,It),st=[...t(this,d)],bt=1e3;t(this,pt)&&clearTimeout(t(this,pt)),tt(this,pt,setTimeout(()=>{tt(this,pt,null),t(this,It)[0]=t(this,It)[1]=0,this.addCommands({cmd:()=>{for(const Ft of st)t(this,j).has(Ft.id)&&Ft.translateInPage(W,q)},undo:()=>{for(const Ft of st)t(this,j).has(Ft.id)&&Ft.translateInPage(-W,-q)},mustExec:!1})},bt));for(const Ft of st)Ft.translateInPage(e,p)}setUpDragSession(){if(this.hasSelection){this.disableUserSelect(!0),tt(this,ht,new Map);for(const e of t(this,d))t(this,ht).set(e,{savedX:e.x,savedY:e.y,savedPageIndex:e.pageIndex,newX:0,newY:0,newPageIndex:-1})}}endDragSession(){if(!t(this,ht))return!1;this.disableUserSelect(!1);const e=t(this,ht);tt(this,ht,null);let p=!1;for(const[{x:W,y:q,pageIndex:st},bt]of e)bt.newX=W,bt.newY=q,bt.newPageIndex=st,p||(p=W!==bt.savedX||q!==bt.savedY||st!==bt.savedPageIndex);if(!p)return!1;const I=(W,q,st,bt)=>{if(t(this,j).has(W.id)){const Ft=t(this,X).get(bt);Ft?W._setParentAndPosition(Ft,q,st):(W.pageIndex=bt,W.x=q,W.y=st)}};return this.addCommands({cmd:()=>{for(const[W,{newX:q,newY:st,newPageIndex:bt}]of e)I(W,q,st,bt)},undo:()=>{for(const[W,{savedX:q,savedY:st,savedPageIndex:bt}]of e)I(W,q,st,bt)},mustExec:!0}),!0}dragSelectedEditors(e,p){if(t(this,ht))for(const I of t(this,ht).keys())I.drag(e,p)}rebuild(e){if(e.parent===null){const p=this.getLayer(e.pageIndex);p?(p.changeParent(e),p.addOrRebuild(e)):(this.addEditor(e),this.addToAnnotationStorage(e),e.rebuild())}else e.parent.addOrRebuild(e)}isActive(e){return t(this,b)===e}getActive(){return t(this,b)}getMode(){return t(this,l)}get imageManager(){return(0,c.shadow)(this,"imageManager",new U)}};b=new WeakMap,j=new WeakMap,X=new WeakMap,w=new WeakMap,V=new WeakMap,nt=new WeakMap,ot=new WeakMap,H=new WeakMap,ht=new WeakMap,mt=new WeakMap,Ct=new WeakMap,kt=new WeakMap,E=new WeakMap,i=new WeakMap,n=new WeakMap,s=new WeakMap,l=new WeakMap,d=new WeakMap,_=new WeakMap,R=new WeakMap,B=new WeakMap,et=new WeakMap,Z=new WeakMap,rt=new WeakMap,dt=new WeakMap,vt=new WeakMap,ft=new WeakMap,Mt=new WeakMap,Ut=new WeakMap,Et=new WeakMap,It=new WeakMap,pt=new WeakMap,J=new WeakMap,Q=new WeakMap,ut=new WeakSet,Ti=function(){window.addEventListener("focus",t(this,B)),window.addEventListener("blur",t(this,R))},Tt=new WeakSet,$e=function(){window.removeEventListener("focus",t(this,B)),window.removeEventListener("blur",t(this,R))},zt=new WeakSet,Ve=function(){window.addEventListener("keydown",t(this,dt),{capture:!0})},$t=new WeakSet,Te=function(){window.removeEventListener("keydown",t(this,dt),{capture:!0})},Gt=new WeakSet,qe=function(){document.addEventListener("copy",t(this,et)),document.addEventListener("cut",t(this,Z)),document.addEventListener("paste",t(this,rt))},lt=new WeakSet,Ye=function(){document.removeEventListener("copy",t(this,et)),document.removeEventListener("cut",t(this,Z)),document.removeEventListener("paste",t(this,rt))},z=new WeakSet,ae=function(e){Object.entries(e).some(([I,W])=>t(this,Et)[I]!==W)&&this._eventBus.dispatch("annotationeditorstateschanged",{source:this,details:Object.assign(t(this,Et),e)})},yt=new WeakSet,be=function(e){this._eventBus.dispatch("annotationeditorparamschanged",{source:this,details:e})},te=new WeakSet,Pi=function(){if(!t(this,i)){tt(this,i,!0);for(const e of t(this,X).values())e.enable()}},St=new WeakSet,xi=function(){if(this.unselectAll(),t(this,i)){tt(this,i,!1);for(const e of t(this,X).values())e.disable()}},Pt=new WeakSet,Ke=function(e){const p=t(this,X).get(e.pageIndex);p?p.addOrRebuild(e):this.addEditor(e)},Bt=new WeakSet,_e=function(){if(t(this,j).size===0)return!0;if(t(this,j).size===1)for(const e of t(this,j).values())return e.isEmpty();return!1},At=new WeakSet,Je=function(e){t(this,d).clear();for(const p of e)p.isEmpty()||(t(this,d).add(p),p.select());G(this,z,ae).call(this,{hasSelectedEditor:!0})},ie(Lt,"TRANSLATE_SMALL",1),ie(Lt,"TRANSLATE_BIG",10);let N=Lt;u.AnnotationEditorUIManager=N},(ct,u,it)=>{var ot,H,ht,mt,Ct,kt,E,i,n,s,l,d,ue,R,fe,et,Qe,rt,Pe,vt,xe,Mt,Ae,Et,ye;Object.defineProperty(u,"__esModule",{value:!0}),u.StatTimer=u.RenderingCancelledException=u.PixelsPerInch=u.PageViewport=u.PDFDateString=u.DOMStandardFontDataFactory=u.DOMSVGFactory=u.DOMFilterFactory=u.DOMCanvasFactory=u.DOMCMapReaderFactory=void 0,u.deprecated=F,u.getColorValues=j,u.getCurrentTransform=X,u.getCurrentTransformInverse=w,u.getFilenameFromUrl=A,u.getPdfFilenameFromUrl=C,u.getRGB=b,u.getXfaPageViewport=P,u.isDataScheme=v,u.isPdfFile=f,u.isValidFetchUrl=y,u.loadScript=h,u.noContextMenu=o,u.setLayerDimensions=V;var c=it(7),x=it(1);const at="http://www.w3.org/2000/svg",nt=class nt{};ie(nt,"CSS",96),ie(nt,"PDF",72),ie(nt,"PDF_TO_CSS_UNITS",nt.CSS/nt.PDF);let $=nt;u.PixelsPerInch=$;class gt extends c.BaseFilterFactory{constructor({docId:Q,ownerDocument:ut=globalThis.document}={}){super();L(this,d);L(this,R);L(this,et);L(this,rt);L(this,vt);L(this,Mt);L(this,Et);L(this,ot,void 0);L(this,H,void 0);L(this,ht,void 0);L(this,mt,void 0);L(this,Ct,void 0);L(this,kt,void 0);L(this,E,void 0);L(this,i,void 0);L(this,n,void 0);L(this,s,void 0);L(this,l,0);tt(this,ht,Q),tt(this,mt,ut)}addFilter(Q){if(!Q)return"none";let ut=t(this,d,ue).get(Q);if(ut)return ut;let wt,Tt,Wt,zt;if(Q.length===1){const Gt=Q[0],Yt=new Array(256);for(let lt=0;lt<256;lt++)Yt[lt]=Gt[lt]/255;zt=wt=Tt=Wt=Yt.join(",")}else{const[Gt,Yt,lt]=Q,K=new Array(256),z=new Array(256),_t=new Array(256);for(let yt=0;yt<256;yt++)K[yt]=Gt[yt]/255,z[yt]=Yt[yt]/255,_t[yt]=lt[yt]/255;wt=K.join(","),Tt=z.join(","),Wt=_t.join(","),zt=`${wt}${Tt}${Wt}`}if(ut=t(this,d,ue).get(zt),ut)return t(this,d,ue).set(Q,ut),ut;const Ht=`g_${t(this,ht)}_transfer_map_${me(this,l)._++}`,$t=`url(#${Ht})`;t(this,d,ue).set(Q,$t),t(this,d,ue).set(zt,$t);const Vt=G(this,rt,Pe).call(this,Ht);return G(this,Mt,Ae).call(this,wt,Tt,Wt,Vt),$t}addHCMFilter(Q,ut){var Yt;const wt=`${Q}-${ut}`;if(t(this,kt)===wt)return t(this,E);if(tt(this,kt,wt),tt(this,E,"none"),(Yt=t(this,Ct))==null||Yt.remove(),!Q||!ut)return t(this,E);const Tt=G(this,Et,ye).call(this,Q);Q=x.Util.makeHexColor(...Tt);const Wt=G(this,Et,ye).call(this,ut);if(ut=x.Util.makeHexColor(...Wt),t(this,R,fe).style.color="",Q==="#000000"&&ut==="#ffffff"||Q===ut)return t(this,E);const zt=new Array(256);for(let lt=0;lt<=255;lt++){const K=lt/255;zt[lt]=K<=.03928?K/12.92:((K+.055)/1.055)**2.4}const Ht=zt.join(","),$t=`g_${t(this,ht)}_hcm_filter`,Vt=tt(this,i,G(this,rt,Pe).call(this,$t));G(this,Mt,Ae).call(this,Ht,Ht,Ht,Vt),G(this,et,Qe).call(this,Vt);const Gt=(lt,K)=>{const z=Tt[lt]/255,_t=Wt[lt]/255,yt=new Array(K+1);for(let ee=0;ee<=K;ee++)yt[ee]=z+ee/K*(_t-z);return yt.join(",")};return G(this,Mt,Ae).call(this,Gt(0,5),Gt(1,5),Gt(2,5),Vt),tt(this,E,`url(#${$t})`),t(this,E)}addHighlightHCMFilter(Q,ut,wt,Tt){var _t;const Wt=`${Q}-${ut}-${wt}-${Tt}`;if(t(this,n)===Wt)return t(this,s);if(tt(this,n,Wt),tt(this,s,"none"),(_t=t(this,i))==null||_t.remove(),!Q||!ut)return t(this,s);const[zt,Ht]=[Q,ut].map(G(this,Et,ye).bind(this));let $t=Math.round(.2126*zt[0]+.7152*zt[1]+.0722*zt[2]),Vt=Math.round(.2126*Ht[0]+.7152*Ht[1]+.0722*Ht[2]),[Gt,Yt]=[wt,Tt].map(G(this,Et,ye).bind(this));Vt<$t&&([$t,Vt,Gt,Yt]=[Vt,$t,Yt,Gt]),t(this,R,fe).style.color="";const lt=(yt,ee,te)=>{const Y=new Array(256),St=(Vt-$t)/te,Ot=yt/255,Pt=(ee-yt)/(255*te);let Nt=0;for(let Bt=0;Bt<=te;Bt++){const Qt=Math.round($t+Bt*St),At=Ot+Bt*Pt;for(let Kt=Nt;Kt<=Qt;Kt++)Y[Kt]=At;Nt=Qt+1}for(let Bt=Nt;Bt<256;Bt++)Y[Bt]=Y[Nt-1];return Y.join(",")},K=`g_${t(this,ht)}_hcm_highlight_filter`,z=tt(this,i,G(this,rt,Pe).call(this,K));return G(this,et,Qe).call(this,z),G(this,Mt,Ae).call(this,lt(Gt[0],Yt[0],5),lt(Gt[1],Yt[1],5),lt(Gt[2],Yt[2],5),z),tt(this,s,`url(#${K})`),t(this,s)}destroy(Q=!1){Q&&(t(this,E)||t(this,s))||(t(this,H)&&(t(this,H).parentNode.parentNode.remove(),tt(this,H,null)),t(this,ot)&&(t(this,ot).clear(),tt(this,ot,null)),tt(this,l,0))}}ot=new WeakMap,H=new WeakMap,ht=new WeakMap,mt=new WeakMap,Ct=new WeakMap,kt=new WeakMap,E=new WeakMap,i=new WeakMap,n=new WeakMap,s=new WeakMap,l=new WeakMap,d=new WeakSet,ue=function(){return t(this,ot)||tt(this,ot,new Map)},R=new WeakSet,fe=function(){if(!t(this,H)){const Q=t(this,mt).createElement("div"),{style:ut}=Q;ut.visibility="hidden",ut.contain="strict",ut.width=ut.height=0,ut.position="absolute",ut.top=ut.left=0,ut.zIndex=-1;const wt=t(this,mt).createElementNS(at,"svg");wt.setAttribute("width",0),wt.setAttribute("height",0),tt(this,H,t(this,mt).createElementNS(at,"defs")),Q.append(wt),wt.append(t(this,H)),t(this,mt).body.append(Q)}return t(this,H)},et=new WeakSet,Qe=function(Q){const ut=t(this,mt).createElementNS(at,"feColorMatrix");ut.setAttribute("type","matrix"),ut.setAttribute("values","0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"),Q.append(ut)},rt=new WeakSet,Pe=function(Q){const ut=t(this,mt).createElementNS(at,"filter");return ut.setAttribute("color-interpolation-filters","sRGB"),ut.setAttribute("id",Q),t(this,R,fe).append(ut),ut},vt=new WeakSet,xe=function(Q,ut,wt){const Tt=t(this,mt).createElementNS(at,ut);Tt.setAttribute("type","discrete"),Tt.setAttribute("tableValues",wt),Q.append(Tt)},Mt=new WeakSet,Ae=function(Q,ut,wt,Tt){const Wt=t(this,mt).createElementNS(at,"feComponentTransfer");Tt.append(Wt),G(this,vt,xe).call(this,Wt,"feFuncR",Q),G(this,vt,xe).call(this,Wt,"feFuncG",ut),G(this,vt,xe).call(this,Wt,"feFuncB",wt)},Et=new WeakSet,ye=function(Q){return t(this,R,fe).style.color=Q,b(getComputedStyle(t(this,R,fe)).getPropertyValue("color"))},u.DOMFilterFactory=gt;class U extends c.BaseCanvasFactory{constructor({ownerDocument:J=globalThis.document}={}){super(),this._document=J}_createCanvas(J,Q){const ut=this._document.createElement("canvas");return ut.width=J,ut.height=Q,ut}}u.DOMCanvasFactory=U;async function M(pt,J=!1){if(y(pt,document.baseURI)){const Q=await fetch(pt);if(!Q.ok)throw new Error(Q.statusText);return J?new Uint8Array(await Q.arrayBuffer()):(0,x.stringToBytes)(await Q.text())}return new Promise((Q,ut)=>{const wt=new XMLHttpRequest;wt.open("GET",pt,!0),J&&(wt.responseType="arraybuffer"),wt.onreadystatechange=()=>{if(wt.readyState===XMLHttpRequest.DONE){if(wt.status===200||wt.status===0){let Tt;if(J&&wt.response?Tt=new Uint8Array(wt.response):!J&&wt.responseText&&(Tt=(0,x.stringToBytes)(wt.responseText)),Tt){Q(Tt);return}}ut(new Error(wt.statusText))}},wt.send(null)})}class m extends c.BaseCMapReaderFactory{_fetchData(J,Q){return M(J,this.isCompressed).then(ut=>({cMapData:ut,compressionType:Q}))}}u.DOMCMapReaderFactory=m;class O extends c.BaseStandardFontDataFactory{_fetchData(J){return M(J,!0)}}u.DOMStandardFontDataFactory=O;class N extends c.BaseSVGFactory{_createSVG(J){return document.createElementNS(at,J)}}u.DOMSVGFactory=N;class k{constructor({viewBox:J,scale:Q,rotation:ut,offsetX:wt=0,offsetY:Tt=0,dontFlip:Wt=!1}){this.viewBox=J,this.scale=Q,this.rotation=ut,this.offsetX=wt,this.offsetY=Tt;const zt=(J[2]+J[0])/2,Ht=(J[3]+J[1])/2;let $t,Vt,Gt,Yt;switch(ut%=360,ut<0&&(ut+=360),ut){case 180:$t=-1,Vt=0,Gt=0,Yt=1;break;case 90:$t=0,Vt=1,Gt=1,Yt=0;break;case 270:$t=0,Vt=-1,Gt=-1,Yt=0;break;case 0:$t=1,Vt=0,Gt=0,Yt=-1;break;default:throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.")}Wt&&(Gt=-Gt,Yt=-Yt);let lt,K,z,_t;$t===0?(lt=Math.abs(Ht-J[1])*Q+wt,K=Math.abs(zt-J[0])*Q+Tt,z=(J[3]-J[1])*Q,_t=(J[2]-J[0])*Q):(lt=Math.abs(zt-J[0])*Q+wt,K=Math.abs(Ht-J[1])*Q+Tt,z=(J[2]-J[0])*Q,_t=(J[3]-J[1])*Q),this.transform=[$t*Q,Vt*Q,Gt*Q,Yt*Q,lt-$t*Q*zt-Gt*Q*Ht,K-Vt*Q*zt-Yt*Q*Ht],this.width=z,this.height=_t}get rawDims(){const{viewBox:J}=this;return(0,x.shadow)(this,"rawDims",{pageWidth:J[2]-J[0],pageHeight:J[3]-J[1],pageX:J[0],pageY:J[1]})}clone({scale:J=this.scale,rotation:Q=this.rotation,offsetX:ut=this.offsetX,offsetY:wt=this.offsetY,dontFlip:Tt=!1}={}){return new k({viewBox:this.viewBox.slice(),scale:J,rotation:Q,offsetX:ut,offsetY:wt,dontFlip:Tt})}convertToViewportPoint(J,Q){return x.Util.applyTransform([J,Q],this.transform)}convertToViewportRectangle(J){const Q=x.Util.applyTransform([J[0],J[1]],this.transform),ut=x.Util.applyTransform([J[2],J[3]],this.transform);return[Q[0],Q[1],ut[0],ut[1]]}convertToPdfPoint(J,Q){return x.Util.applyInverseTransform([J,Q],this.transform)}}u.PageViewport=k;class S extends x.BaseException{constructor(J,Q=0){super(J,"RenderingCancelledException"),this.extraDelay=Q}}u.RenderingCancelledException=S;function v(pt){const J=pt.length;let Q=0;for(;Q<J&&pt[Q].trim()==="";)Q++;return pt.substring(Q,Q+5).toLowerCase()==="data:"}function f(pt){return typeof pt=="string"&&/\.pdf$/i.test(pt)}function A(pt,J=!1){return J||([pt]=pt.split(/[#?]/,1)),pt.substring(pt.lastIndexOf("/")+1)}function C(pt,J="document.pdf"){if(typeof pt!="string")return J;if(v(pt))return(0,x.warn)('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'),J;const Q=/^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/,ut=/[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,wt=Q.exec(pt);let Tt=ut.exec(wt[1])||ut.exec(wt[2])||ut.exec(wt[3]);if(Tt&&(Tt=Tt[0],Tt.includes("%")))try{Tt=ut.exec(decodeURIComponent(Tt))[0]}catch{}return Tt||J}class T{constructor(){ie(this,"started",Object.create(null));ie(this,"times",[])}time(J){J in this.started&&(0,x.warn)(`Timer is already running for ${J}`),this.started[J]=Date.now()}timeEnd(J){J in this.started||(0,x.warn)(`Timer has not been started for ${J}`),this.times.push({name:J,start:this.started[J],end:Date.now()}),delete this.started[J]}toString(){const J=[];let Q=0;for(const{name:ut}of this.times)Q=Math.max(ut.length,Q);for(const{name:ut,start:wt,end:Tt}of this.times)J.push(`${ut.padEnd(Q)} ${Tt-wt}ms
`);return J.join("")}}u.StatTimer=T;function y(pt,J){try{const{protocol:Q}=J?new URL(pt,J):new URL(pt);return Q==="http:"||Q==="https:"}catch{return!1}}function o(pt){pt.preventDefault()}function h(pt,J=!1){return new Promise((Q,ut)=>{const wt=document.createElement("script");wt.src=pt,wt.onload=function(Tt){J&&wt.remove(),Q(Tt)},wt.onerror=function(){ut(new Error(`Cannot load script at: ${wt.src}`))},(document.head||document.documentElement).append(wt)})}function F(pt){console.log("Deprecated API usage: "+pt)}let g;class a{static toDateObject(J){if(!J||typeof J!="string")return null;g||(g=new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?"));const Q=g.exec(J);if(!Q)return null;const ut=parseInt(Q[1],10);let wt=parseInt(Q[2],10);wt=wt>=1&&wt<=12?wt-1:0;let Tt=parseInt(Q[3],10);Tt=Tt>=1&&Tt<=31?Tt:1;let Wt=parseInt(Q[4],10);Wt=Wt>=0&&Wt<=23?Wt:0;let zt=parseInt(Q[5],10);zt=zt>=0&&zt<=59?zt:0;let Ht=parseInt(Q[6],10);Ht=Ht>=0&&Ht<=59?Ht:0;const $t=Q[7]||"Z";let Vt=parseInt(Q[8],10);Vt=Vt>=0&&Vt<=23?Vt:0;let Gt=parseInt(Q[9],10)||0;return Gt=Gt>=0&&Gt<=59?Gt:0,$t==="-"?(Wt+=Vt,zt+=Gt):$t==="+"&&(Wt-=Vt,zt-=Gt),new Date(Date.UTC(ut,wt,Tt,Wt,zt,Ht))}}u.PDFDateString=a;function P(pt,{scale:J=1,rotation:Q=0}){const{width:ut,height:wt}=pt.attributes.style,Tt=[0,0,parseInt(ut),parseInt(wt)];return new k({viewBox:Tt,scale:J,rotation:Q})}function b(pt){if(pt.startsWith("#")){const J=parseInt(pt.slice(1),16);return[(J&16711680)>>16,(J&65280)>>8,J&255]}return pt.startsWith("rgb(")?pt.slice(4,-1).split(",").map(J=>parseInt(J)):pt.startsWith("rgba(")?pt.slice(5,-1).split(",").map(J=>parseInt(J)).slice(0,3):((0,x.warn)(`Not a valid color format: "${pt}"`),[0,0,0])}function j(pt){const J=document.createElement("span");J.style.visibility="hidden",document.body.append(J);for(const Q of pt.keys()){J.style.color=Q;const ut=window.getComputedStyle(J).color;pt.set(Q,b(ut))}J.remove()}function X(pt){const{a:J,b:Q,c:ut,d:wt,e:Tt,f:Wt}=pt.getTransform();return[J,Q,ut,wt,Tt,Wt]}function w(pt){const{a:J,b:Q,c:ut,d:wt,e:Tt,f:Wt}=pt.getTransform().invertSelf();return[J,Q,ut,wt,Tt,Wt]}function V(pt,J,Q=!1,ut=!0){if(J instanceof k){const{pageWidth:wt,pageHeight:Tt}=J.rawDims,{style:Wt}=pt,zt=x.FeatureTest.isCSSRoundSupported,Ht=`var(--scale-factor) * ${wt}px`,$t=`var(--scale-factor) * ${Tt}px`,Vt=zt?`round(${Ht}, 1px)`:`calc(${Ht})`,Gt=zt?`round(${$t}, 1px)`:`calc(${$t})`;!Q||J.rotation%180===0?(Wt.width=Vt,Wt.height=Gt):(Wt.width=Gt,Wt.height=Vt)}ut&&pt.setAttribute("data-main-rotation",J.rotation)}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.BaseStandardFontDataFactory=u.BaseSVGFactory=u.BaseFilterFactory=u.BaseCanvasFactory=u.BaseCMapReaderFactory=void 0;var c=it(1);class x{constructor(){this.constructor===x&&(0,c.unreachable)("Cannot initialize BaseFilterFactory.")}addFilter(m){return"none"}addHCMFilter(m,O){return"none"}addHighlightHCMFilter(m,O,N,k){return"none"}destroy(m=!1){}}u.BaseFilterFactory=x;class at{constructor(){this.constructor===at&&(0,c.unreachable)("Cannot initialize BaseCanvasFactory.")}create(m,O){if(m<=0||O<=0)throw new Error("Invalid canvas size");const N=this._createCanvas(m,O);return{canvas:N,context:N.getContext("2d")}}reset(m,O,N){if(!m.canvas)throw new Error("Canvas is not specified");if(O<=0||N<=0)throw new Error("Invalid canvas size");m.canvas.width=O,m.canvas.height=N}destroy(m){if(!m.canvas)throw new Error("Canvas is not specified");m.canvas.width=0,m.canvas.height=0,m.canvas=null,m.context=null}_createCanvas(m,O){(0,c.unreachable)("Abstract method `_createCanvas` called.")}}u.BaseCanvasFactory=at;class ${constructor({baseUrl:m=null,isCompressed:O=!0}){this.constructor===$&&(0,c.unreachable)("Cannot initialize BaseCMapReaderFactory."),this.baseUrl=m,this.isCompressed=O}async fetch({name:m}){if(!this.baseUrl)throw new Error('The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.');if(!m)throw new Error("CMap name must be specified.");const O=this.baseUrl+m+(this.isCompressed?".bcmap":""),N=this.isCompressed?c.CMapCompressionType.BINARY:c.CMapCompressionType.NONE;return this._fetchData(O,N).catch(k=>{throw new Error(`Unable to load ${this.isCompressed?"binary ":""}CMap at: ${O}`)})}_fetchData(m,O){(0,c.unreachable)("Abstract method `_fetchData` called.")}}u.BaseCMapReaderFactory=$;class gt{constructor({baseUrl:m=null}){this.constructor===gt&&(0,c.unreachable)("Cannot initialize BaseStandardFontDataFactory."),this.baseUrl=m}async fetch({filename:m}){if(!this.baseUrl)throw new Error('The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.');if(!m)throw new Error("Font filename must be specified.");const O=`${this.baseUrl}${m}`;return this._fetchData(O).catch(N=>{throw new Error(`Unable to load font data at: ${O}`)})}_fetchData(m){(0,c.unreachable)("Abstract method `_fetchData` called.")}}u.BaseStandardFontDataFactory=gt;class U{constructor(){this.constructor===U&&(0,c.unreachable)("Cannot initialize BaseSVGFactory.")}create(m,O,N=!1){if(m<=0||O<=0)throw new Error("Invalid SVG dimensions");const k=this._createSVG("svg:svg");return k.setAttribute("version","1.1"),N||(k.setAttribute("width",`${m}px`),k.setAttribute("height",`${O}px`)),k.setAttribute("preserveAspectRatio","none"),k.setAttribute("viewBox",`0 0 ${m} ${O}`),k}createElement(m){if(typeof m!="string")throw new Error("Invalid SVG element type");return this._createSVG(m)}_createSVG(m){(0,c.unreachable)("Abstract method `_createSVG` called.")}}u.BaseSVGFactory=U},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.MurmurHash3_64=void 0;var c=it(1);const x=3285377520,at=4294901760,$=65535;class gt{constructor(M){this.h1=M?M&4294967295:x,this.h2=M?M&4294967295:x}update(M){let m,O;if(typeof M=="string"){m=new Uint8Array(M.length*2),O=0;for(let F=0,g=M.length;F<g;F++){const a=M.charCodeAt(F);a<=255?m[O++]=a:(m[O++]=a>>>8,m[O++]=a&255)}}else if((0,c.isArrayBuffer)(M))m=M.slice(),O=m.byteLength;else throw new Error("Wrong data format in MurmurHash3_64_update. Input must be a string or array.");const N=O>>2,k=O-N*4,S=new Uint32Array(m.buffer,0,N);let v=0,f=0,A=this.h1,C=this.h2;const T=3432918353,y=461845907,o=T&$,h=y&$;for(let F=0;F<N;F++)F&1?(v=S[F],v=v*T&at|v*o&$,v=v<<15|v>>>17,v=v*y&at|v*h&$,A^=v,A=A<<13|A>>>19,A=A*5+3864292196):(f=S[F],f=f*T&at|f*o&$,f=f<<15|f>>>17,f=f*y&at|f*h&$,C^=f,C=C<<13|C>>>19,C=C*5+3864292196);switch(v=0,k){case 3:v^=m[N*4+2]<<16;case 2:v^=m[N*4+1]<<8;case 1:v^=m[N*4],v=v*T&at|v*o&$,v=v<<15|v>>>17,v=v*y&at|v*h&$,N&1?A^=v:C^=v}this.h1=A,this.h2=C}hexdigest(){let M=this.h1,m=this.h2;return M^=m>>>1,M=M*3981806797&at|M*36045&$,m=m*4283543511&at|((m<<16|M>>>16)*2950163797&at)>>>16,M^=m>>>1,M=M*444984403&at|M*60499&$,m=m*3301882366&at|((m<<16|M>>>16)*3120437893&at)>>>16,M^=m>>>1,(M>>>0).toString(16).padStart(8,"0")+(m>>>0).toString(16).padStart(8,"0")}}u.MurmurHash3_64=gt},(ct,u,it)=>{var $;Object.defineProperty(u,"__esModule",{value:!0}),u.FontLoader=u.FontFaceObject=void 0;var c=it(1);class x{constructor({ownerDocument:U=globalThis.document,styleElement:M=null}){L(this,$,new Set);this._document=U,this.nativeFontFaces=new Set,this.styleElement=null,this.loadingRequests=[],this.loadTestFontId=0}addNativeFontFace(U){this.nativeFontFaces.add(U),this._document.fonts.add(U)}removeNativeFontFace(U){this.nativeFontFaces.delete(U),this._document.fonts.delete(U)}insertRule(U){this.styleElement||(this.styleElement=this._document.createElement("style"),this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));const M=this.styleElement.sheet;M.insertRule(U,M.cssRules.length)}clear(){for(const U of this.nativeFontFaces)this._document.fonts.delete(U);this.nativeFontFaces.clear(),t(this,$).clear(),this.styleElement&&(this.styleElement.remove(),this.styleElement=null)}async loadSystemFont(U){if(!(!U||t(this,$).has(U.loadedName))){if((0,c.assert)(!this.disableFontFace,"loadSystemFont shouldn't be called when `disableFontFace` is set."),this.isFontLoadingAPISupported){const{loadedName:M,src:m,style:O}=U,N=new FontFace(M,m,O);this.addNativeFontFace(N);try{await N.load(),t(this,$).add(M)}catch{(0,c.warn)(`Cannot load system font: ${U.baseFontName}, installing it could help to improve PDF rendering.`),this.removeNativeFontFace(N)}return}(0,c.unreachable)("Not implemented: loadSystemFont without the Font Loading API.")}}async bind(U){if(U.attached||U.missingFile&&!U.systemFontInfo)return;if(U.attached=!0,U.systemFontInfo){await this.loadSystemFont(U.systemFontInfo);return}if(this.isFontLoadingAPISupported){const m=U.createNativeFontFace();if(m){this.addNativeFontFace(m);try{await m.loaded}catch(O){throw(0,c.warn)(`Failed to load font '${m.family}': '${O}'.`),U.disableFontFace=!0,O}}return}const M=U.createFontFaceRule();if(M){if(this.insertRule(M),this.isSyncFontLoadingSupported)return;await new Promise(m=>{const O=this._queueLoadingCallback(m);this._prepareFontLoadEvent(U,O)})}}get isFontLoadingAPISupported(){var M;const U=!!((M=this._document)!=null&&M.fonts);return(0,c.shadow)(this,"isFontLoadingAPISupported",U)}get isSyncFontLoadingSupported(){let U=!1;return(c.isNodeJS||typeof navigator<"u"&&/Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent))&&(U=!0),(0,c.shadow)(this,"isSyncFontLoadingSupported",U)}_queueLoadingCallback(U){function M(){for((0,c.assert)(!O.done,"completeRequest() cannot be called twice."),O.done=!0;m.length>0&&m[0].done;){const N=m.shift();setTimeout(N.callback,0)}}const{loadingRequests:m}=this,O={done:!1,complete:M,callback:U};return m.push(O),O}get _loadTestFont(){const U=atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");return(0,c.shadow)(this,"_loadTestFont",U)}_prepareFontLoadEvent(U,M){function m(b,j){return b.charCodeAt(j)<<24|b.charCodeAt(j+1)<<16|b.charCodeAt(j+2)<<8|b.charCodeAt(j+3)&255}function O(b,j,X,w){const V=b.substring(0,j),nt=b.substring(j+X);return V+w+nt}let N,k;const S=this._document.createElement("canvas");S.width=1,S.height=1;const v=S.getContext("2d");let f=0;function A(b,j){if(++f>30){(0,c.warn)("Load test font never loaded."),j();return}if(v.font="30px "+b,v.fillText(".",0,20),v.getImageData(0,0,1,1).data[3]>0){j();return}setTimeout(A.bind(null,b,j))}const C=`lt${Date.now()}${this.loadTestFontId++}`;let T=this._loadTestFont;T=O(T,976,C.length,C);const o=16,h=1482184792;let F=m(T,o);for(N=0,k=C.length-3;N<k;N+=4)F=F-h+m(C,N)|0;N<C.length&&(F=F-h+m(C+"XXX",N)|0),T=O(T,o,4,(0,c.string32)(F));const g=`url(data:font/opentype;base64,${btoa(T)});`,a=`@font-face {font-family:"${C}";src:${g}}`;this.insertRule(a);const P=this._document.createElement("div");P.style.visibility="hidden",P.style.width=P.style.height="10px",P.style.position="absolute",P.style.top=P.style.left="0px";for(const b of[U.loadedName,C]){const j=this._document.createElement("span");j.textContent="Hi",j.style.fontFamily=b,P.append(j)}this._document.body.append(P),A(C,()=>{P.remove(),M.complete()})}}$=new WeakMap,u.FontLoader=x;class at{constructor(U,{isEvalSupported:M=!0,disableFontFace:m=!1,ignoreErrors:O=!1,inspectFont:N=null}){this.compiledGlyphs=Object.create(null);for(const k in U)this[k]=U[k];this.isEvalSupported=M!==!1,this.disableFontFace=m===!0,this.ignoreErrors=O===!0,this._inspectFont=N}createNativeFontFace(){var M;if(!this.data||this.disableFontFace)return null;let U;if(!this.cssFontInfo)U=new FontFace(this.loadedName,this.data,{});else{const m={weight:this.cssFontInfo.fontWeight};this.cssFontInfo.italicAngle&&(m.style=`oblique ${this.cssFontInfo.italicAngle}deg`),U=new FontFace(this.cssFontInfo.fontFamily,this.data,m)}return(M=this._inspectFont)==null||M.call(this,this),U}createFontFaceRule(){var O;if(!this.data||this.disableFontFace)return null;const U=(0,c.bytesToString)(this.data),M=`url(data:${this.mimetype};base64,${btoa(U)});`;let m;if(!this.cssFontInfo)m=`@font-face {font-family:"${this.loadedName}";src:${M}}`;else{let N=`font-weight: ${this.cssFontInfo.fontWeight};`;this.cssFontInfo.italicAngle&&(N+=`font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),m=`@font-face {font-family:"${this.cssFontInfo.fontFamily}";${N}src:${M}}`}return(O=this._inspectFont)==null||O.call(this,this,M),m}getPathGenerator(U,M){if(this.compiledGlyphs[M]!==void 0)return this.compiledGlyphs[M];let m;try{m=U.get(this.loadedName+"_path_"+M)}catch(O){if(!this.ignoreErrors)throw O;return(0,c.warn)(`getPathGenerator - ignoring character: "${O}".`),this.compiledGlyphs[M]=function(N,k){}}if(this.isEvalSupported&&c.FeatureTest.isEvalSupported){const O=[];for(const N of m){const k=N.args!==void 0?N.args.join(","):"";O.push("c.",N.cmd,"(",k,`);
`)}return this.compiledGlyphs[M]=new Function("c","size",O.join(""))}return this.compiledGlyphs[M]=function(O,N){for(const k of m)k.cmd==="scale"&&(k.args=[N,-N]),O[k.cmd].apply(O,k.args)}}}u.FontFaceObject=at},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.NodeStandardFontDataFactory=u.NodeFilterFactory=u.NodeCanvasFactory=u.NodeCMapReaderFactory=void 0;var c=it(7);it(1);const x=function(M){return new Promise((m,O)=>{require$$5.readFile(M,(k,S)=>{if(k||!S){O(new Error(k));return}m(new Uint8Array(S))})})};class at extends c.BaseFilterFactory{}u.NodeFilterFactory=at;class $ extends c.BaseCanvasFactory{_createCanvas(m,O){return require$$5.createCanvas(m,O)}}u.NodeCanvasFactory=$;class gt extends c.BaseCMapReaderFactory{_fetchData(m,O){return x(m).then(N=>({cMapData:N,compressionType:O}))}}u.NodeCMapReaderFactory=gt;class U extends c.BaseStandardFontDataFactory{_fetchData(m){return x(m)}}u.NodeStandardFontDataFactory=U},(ct,u,it)=>{var H,Ze,mt,ti;Object.defineProperty(u,"__esModule",{value:!0}),u.CanvasGraphics=void 0;var c=it(1),x=it(6),at=it(12),$=it(13);const gt=16,U=100,M=4096,m=15,O=10,N=1e3,k=16;function S(E,i){if(E._removeMirroring)throw new Error("Context is already forwarding operations.");E.__originalSave=E.save,E.__originalRestore=E.restore,E.__originalRotate=E.rotate,E.__originalScale=E.scale,E.__originalTranslate=E.translate,E.__originalTransform=E.transform,E.__originalSetTransform=E.setTransform,E.__originalResetTransform=E.resetTransform,E.__originalClip=E.clip,E.__originalMoveTo=E.moveTo,E.__originalLineTo=E.lineTo,E.__originalBezierCurveTo=E.bezierCurveTo,E.__originalRect=E.rect,E.__originalClosePath=E.closePath,E.__originalBeginPath=E.beginPath,E._removeMirroring=()=>{E.save=E.__originalSave,E.restore=E.__originalRestore,E.rotate=E.__originalRotate,E.scale=E.__originalScale,E.translate=E.__originalTranslate,E.transform=E.__originalTransform,E.setTransform=E.__originalSetTransform,E.resetTransform=E.__originalResetTransform,E.clip=E.__originalClip,E.moveTo=E.__originalMoveTo,E.lineTo=E.__originalLineTo,E.bezierCurveTo=E.__originalBezierCurveTo,E.rect=E.__originalRect,E.closePath=E.__originalClosePath,E.beginPath=E.__originalBeginPath,delete E._removeMirroring},E.save=function(){i.save(),this.__originalSave()},E.restore=function(){i.restore(),this.__originalRestore()},E.translate=function(s,l){i.translate(s,l),this.__originalTranslate(s,l)},E.scale=function(s,l){i.scale(s,l),this.__originalScale(s,l)},E.transform=function(s,l,d,_,R,B){i.transform(s,l,d,_,R,B),this.__originalTransform(s,l,d,_,R,B)},E.setTransform=function(s,l,d,_,R,B){i.setTransform(s,l,d,_,R,B),this.__originalSetTransform(s,l,d,_,R,B)},E.resetTransform=function(){i.resetTransform(),this.__originalResetTransform()},E.rotate=function(s){i.rotate(s),this.__originalRotate(s)},E.clip=function(s){i.clip(s),this.__originalClip(s)},E.moveTo=function(n,s){i.moveTo(n,s),this.__originalMoveTo(n,s)},E.lineTo=function(n,s){i.lineTo(n,s),this.__originalLineTo(n,s)},E.bezierCurveTo=function(n,s,l,d,_,R){i.bezierCurveTo(n,s,l,d,_,R),this.__originalBezierCurveTo(n,s,l,d,_,R)},E.rect=function(n,s,l,d){i.rect(n,s,l,d),this.__originalRect(n,s,l,d)},E.closePath=function(){i.closePath(),this.__originalClosePath()},E.beginPath=function(){i.beginPath(),this.__originalBeginPath()}}class v{constructor(i){this.canvasFactory=i,this.cache=Object.create(null)}getCanvas(i,n,s){let l;return this.cache[i]!==void 0?(l=this.cache[i],this.canvasFactory.reset(l,n,s)):(l=this.canvasFactory.create(n,s),this.cache[i]=l),l}delete(i){delete this.cache[i]}clear(){for(const i in this.cache){const n=this.cache[i];this.canvasFactory.destroy(n),delete this.cache[i]}}}function f(E,i,n,s,l,d,_,R,B,et){const[Z,rt,dt,vt,ft,Mt]=(0,x.getCurrentTransform)(E);if(rt===0&&dt===0){const It=_*Z+ft,pt=Math.round(It),J=R*vt+Mt,Q=Math.round(J),ut=(_+B)*Z+ft,wt=Math.abs(Math.round(ut)-pt)||1,Tt=(R+et)*vt+Mt,Wt=Math.abs(Math.round(Tt)-Q)||1;return E.setTransform(Math.sign(Z),0,0,Math.sign(vt),pt,Q),E.drawImage(i,n,s,l,d,0,0,wt,Wt),E.setTransform(Z,rt,dt,vt,ft,Mt),[wt,Wt]}if(Z===0&&vt===0){const It=R*dt+ft,pt=Math.round(It),J=_*rt+Mt,Q=Math.round(J),ut=(R+et)*dt+ft,wt=Math.abs(Math.round(ut)-pt)||1,Tt=(_+B)*rt+Mt,Wt=Math.abs(Math.round(Tt)-Q)||1;return E.setTransform(0,Math.sign(rt),Math.sign(dt),0,pt,Q),E.drawImage(i,n,s,l,d,0,0,Wt,wt),E.setTransform(Z,rt,dt,vt,ft,Mt),[Wt,wt]}E.drawImage(i,n,s,l,d,_,R,B,et);const Ut=Math.hypot(Z,rt),Et=Math.hypot(dt,vt);return[Ut*B,Et*et]}function A(E){const{width:i,height:n}=E;if(i>N||n>N)return null;const s=1e3,l=new Uint8Array([0,2,4,0,1,0,5,4,8,10,0,8,0,2,1,0]),d=i+1;let _=new Uint8Array(d*(n+1)),R,B,et;const Z=i+7&-8;let rt=new Uint8Array(Z*n),dt=0;for(const Et of E.data){let It=128;for(;It>0;)rt[dt++]=Et&It?0:255,It>>=1}let vt=0;for(dt=0,rt[dt]!==0&&(_[0]=1,++vt),B=1;B<i;B++)rt[dt]!==rt[dt+1]&&(_[B]=rt[dt]?2:1,++vt),dt++;for(rt[dt]!==0&&(_[B]=2,++vt),R=1;R<n;R++){dt=R*Z,et=R*d,rt[dt-Z]!==rt[dt]&&(_[et]=rt[dt]?1:8,++vt);let Et=(rt[dt]?4:0)+(rt[dt-Z]?8:0);for(B=1;B<i;B++)Et=(Et>>2)+(rt[dt+1]?4:0)+(rt[dt-Z+1]?8:0),l[Et]&&(_[et+B]=l[Et],++vt),dt++;if(rt[dt-Z]!==rt[dt]&&(_[et+B]=rt[dt]?2:4,++vt),vt>s)return null}for(dt=Z*(n-1),et=R*d,rt[dt]!==0&&(_[et]=8,++vt),B=1;B<i;B++)rt[dt]!==rt[dt+1]&&(_[et+B]=rt[dt]?4:8,++vt),dt++;if(rt[dt]!==0&&(_[et+B]=4,++vt),vt>s)return null;const ft=new Int32Array([0,d,-1,0,-d,0,0,0,1]),Mt=new Path2D;for(R=0;vt&&R<=n;R++){let Et=R*d;const It=Et+i;for(;Et<It&&!_[Et];)Et++;if(Et===It)continue;Mt.moveTo(Et%d,R);const pt=Et;let J=_[Et];do{const Q=ft[J];do Et+=Q;while(!_[Et]);const ut=_[Et];ut!==5&&ut!==10?(J=ut,_[Et]=0):(J=ut&51*J>>4,_[Et]&=J>>2|J<<2),Mt.lineTo(Et%d,Et/d|0),_[Et]||--vt}while(pt!==Et);--R}return rt=null,_=null,function(Et){Et.save(),Et.scale(1/i,-1/n),Et.translate(0,-n),Et.fill(Mt),Et.beginPath(),Et.restore()}}class C{constructor(i,n){this.alphaIsShape=!1,this.fontSize=0,this.fontSizeScale=1,this.textMatrix=c.IDENTITY_MATRIX,this.textMatrixScale=1,this.fontMatrix=c.FONT_IDENTITY_MATRIX,this.leading=0,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRenderingMode=c.TextRenderingMode.FILL,this.textRise=0,this.fillColor="#000000",this.strokeColor="#000000",this.patternFill=!1,this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.activeSMask=null,this.transferMaps="none",this.startNewPathAndClipBox([0,0,i,n])}clone(){const i=Object.create(this);return i.clipBox=this.clipBox.slice(),i}setCurrentPoint(i,n){this.x=i,this.y=n}updatePathMinMax(i,n,s){[n,s]=c.Util.applyTransform([n,s],i),this.minX=Math.min(this.minX,n),this.minY=Math.min(this.minY,s),this.maxX=Math.max(this.maxX,n),this.maxY=Math.max(this.maxY,s)}updateRectMinMax(i,n){const s=c.Util.applyTransform(n,i),l=c.Util.applyTransform(n.slice(2),i);this.minX=Math.min(this.minX,s[0],l[0]),this.minY=Math.min(this.minY,s[1],l[1]),this.maxX=Math.max(this.maxX,s[0],l[0]),this.maxY=Math.max(this.maxY,s[1],l[1])}updateScalingPathMinMax(i,n){c.Util.scaleMinMax(i,n),this.minX=Math.min(this.minX,n[0]),this.maxX=Math.max(this.maxX,n[1]),this.minY=Math.min(this.minY,n[2]),this.maxY=Math.max(this.maxY,n[3])}updateCurvePathMinMax(i,n,s,l,d,_,R,B,et,Z){const rt=c.Util.bezierBoundingBox(n,s,l,d,_,R,B,et);if(Z){Z[0]=Math.min(Z[0],rt[0],rt[2]),Z[1]=Math.max(Z[1],rt[0],rt[2]),Z[2]=Math.min(Z[2],rt[1],rt[3]),Z[3]=Math.max(Z[3],rt[1],rt[3]);return}this.updateRectMinMax(i,rt)}getPathBoundingBox(i=at.PathType.FILL,n=null){const s=[this.minX,this.minY,this.maxX,this.maxY];if(i===at.PathType.STROKE){n||(0,c.unreachable)("Stroke bounding box must include transform.");const l=c.Util.singularValueDecompose2dScale(n),d=l[0]*this.lineWidth/2,_=l[1]*this.lineWidth/2;s[0]-=d,s[1]-=_,s[2]+=d,s[3]+=_}return s}updateClipFromPath(){const i=c.Util.intersect(this.clipBox,this.getPathBoundingBox());this.startNewPathAndClipBox(i||[0,0,0,0])}isEmptyClip(){return this.minX===1/0}startNewPathAndClipBox(i){this.clipBox=i,this.minX=1/0,this.minY=1/0,this.maxX=0,this.maxY=0}getClippedPathBoundingBox(i=at.PathType.FILL,n=null){return c.Util.intersect(this.clipBox,this.getPathBoundingBox(i,n))}}function T(E,i){if(typeof ImageData<"u"&&i instanceof ImageData){E.putImageData(i,0,0);return}const n=i.height,s=i.width,l=n%k,d=(n-l)/k,_=l===0?d:d+1,R=E.createImageData(s,k);let B=0,et;const Z=i.data,rt=R.data;let dt,vt,ft,Mt;if(i.kind===c.ImageKind.GRAYSCALE_1BPP){const Ut=Z.byteLength,Et=new Uint32Array(rt.buffer,0,rt.byteLength>>2),It=Et.length,pt=s+7>>3,J=4294967295,Q=c.FeatureTest.isLittleEndian?4278190080:255;for(dt=0;dt<_;dt++){for(ft=dt<d?k:l,et=0,vt=0;vt<ft;vt++){const ut=Ut-B;let wt=0;const Tt=ut>pt?s:ut*8-7,Wt=Tt&-8;let zt=0,Ht=0;for(;wt<Wt;wt+=8)Ht=Z[B++],Et[et++]=Ht&128?J:Q,Et[et++]=Ht&64?J:Q,Et[et++]=Ht&32?J:Q,Et[et++]=Ht&16?J:Q,Et[et++]=Ht&8?J:Q,Et[et++]=Ht&4?J:Q,Et[et++]=Ht&2?J:Q,Et[et++]=Ht&1?J:Q;for(;wt<Tt;wt++)zt===0&&(Ht=Z[B++],zt=128),Et[et++]=Ht&zt?J:Q,zt>>=1}for(;et<It;)Et[et++]=0;E.putImageData(R,0,dt*k)}}else if(i.kind===c.ImageKind.RGBA_32BPP){for(vt=0,Mt=s*k*4,dt=0;dt<d;dt++)rt.set(Z.subarray(B,B+Mt)),B+=Mt,E.putImageData(R,0,vt),vt+=k;dt<_&&(Mt=s*l*4,rt.set(Z.subarray(B,B+Mt)),E.putImageData(R,0,vt))}else if(i.kind===c.ImageKind.RGB_24BPP)for(ft=k,Mt=s*ft,dt=0;dt<_;dt++){for(dt>=d&&(ft=l,Mt=s*ft),et=0,vt=Mt;vt--;)rt[et++]=Z[B++],rt[et++]=Z[B++],rt[et++]=Z[B++],rt[et++]=255;E.putImageData(R,0,dt*k)}else throw new Error(`bad image kind: ${i.kind}`)}function y(E,i){if(i.bitmap){E.drawImage(i.bitmap,0,0);return}const n=i.height,s=i.width,l=n%k,d=(n-l)/k,_=l===0?d:d+1,R=E.createImageData(s,k);let B=0;const et=i.data,Z=R.data;for(let rt=0;rt<_;rt++){const dt=rt<d?k:l;({srcPos:B}=(0,$.convertBlackAndWhiteToRGBA)({src:et,srcPos:B,dest:Z,width:s,height:dt,nonBlackColor:0})),E.putImageData(R,0,rt*k)}}function o(E,i){const n=["strokeStyle","fillStyle","fillRule","globalAlpha","lineWidth","lineCap","lineJoin","miterLimit","globalCompositeOperation","font","filter"];for(const s of n)E[s]!==void 0&&(i[s]=E[s]);E.setLineDash!==void 0&&(i.setLineDash(E.getLineDash()),i.lineDashOffset=E.lineDashOffset)}function h(E){if(E.strokeStyle=E.fillStyle="#000000",E.fillRule="nonzero",E.globalAlpha=1,E.lineWidth=1,E.lineCap="butt",E.lineJoin="miter",E.miterLimit=10,E.globalCompositeOperation="source-over",E.font="10px sans-serif",E.setLineDash!==void 0&&(E.setLineDash([]),E.lineDashOffset=0),!c.isNodeJS){const{filter:i}=E;i!=="none"&&i!==""&&(E.filter="none")}}function F(E,i,n,s){const l=E.length;for(let d=3;d<l;d+=4){const _=E[d];if(_===0)E[d-3]=i,E[d-2]=n,E[d-1]=s;else if(_<255){const R=255-_;E[d-3]=E[d-3]*_+i*R>>8,E[d-2]=E[d-2]*_+n*R>>8,E[d-1]=E[d-1]*_+s*R>>8}}}function g(E,i,n){const s=E.length,l=1/255;for(let d=3;d<s;d+=4){const _=n?n[E[d]]:E[d];i[d]=i[d]*_*l|0}}function a(E,i,n){const s=E.length;for(let l=3;l<s;l+=4){const d=E[l-3]*77+E[l-2]*152+E[l-1]*28;i[l]=n?i[l]*n[d>>8]>>8:i[l]*d>>16}}function P(E,i,n,s,l,d,_,R,B,et,Z){const rt=!!d,dt=rt?d[0]:0,vt=rt?d[1]:0,ft=rt?d[2]:0,Mt=l==="Luminosity"?a:g,Et=Math.min(s,Math.ceil(1048576/n));for(let It=0;It<s;It+=Et){const pt=Math.min(Et,s-It),J=E.getImageData(R-et,It+(B-Z),n,pt),Q=i.getImageData(R,It+B,n,pt);rt&&F(J.data,dt,vt,ft),Mt(J.data,Q.data,_),i.putImageData(Q,R,It+B)}}function b(E,i,n,s){const l=s[0],d=s[1],_=s[2]-l,R=s[3]-d;_===0||R===0||(P(i.context,n,_,R,i.subtype,i.backdrop,i.transferMap,l,d,i.offsetX,i.offsetY),E.save(),E.globalAlpha=1,E.globalCompositeOperation="source-over",E.setTransform(1,0,0,1,0,0),E.drawImage(n.canvas,0,0),E.restore())}function j(E,i){const n=c.Util.singularValueDecompose2dScale(E);n[0]=Math.fround(n[0]),n[1]=Math.fround(n[1]);const s=Math.fround((globalThis.devicePixelRatio||1)*x.PixelsPerInch.PDF_TO_CSS_UNITS);return i!==void 0?i:n[0]<=s||n[1]<=s}const X=["butt","round","square"],w=["miter","round","bevel"],V={},nt={},kt=class kt{constructor(i,n,s,l,d,{optionalContentConfig:_,markedContentStack:R=null},B,et){L(this,H);L(this,mt);this.ctx=i,this.current=new C(this.ctx.canvas.width,this.ctx.canvas.height),this.stateStack=[],this.pendingClip=null,this.pendingEOFill=!1,this.res=null,this.xobjs=null,this.commonObjs=n,this.objs=s,this.canvasFactory=l,this.filterFactory=d,this.groupStack=[],this.processingType3=null,this.baseTransform=null,this.baseTransformStack=[],this.groupLevel=0,this.smaskStack=[],this.smaskCounter=0,this.tempSMask=null,this.suspendedCtx=null,this.contentVisible=!0,this.markedContentStack=R||[],this.optionalContentConfig=_,this.cachedCanvases=new v(this.canvasFactory),this.cachedPatterns=new Map,this.annotationCanvasMap=B,this.viewportScale=1,this.outputScaleX=1,this.outputScaleY=1,this.pageColors=et,this._cachedScaleForStroking=[-1,0],this._cachedGetSinglePixelWidth=null,this._cachedBitmapsMap=new Map}getObject(i,n=null){return typeof i=="string"?i.startsWith("g_")?this.commonObjs.get(i):this.objs.get(i):n}beginDrawing({transform:i,viewport:n,transparency:s=!1,background:l=null}){const d=this.ctx.canvas.width,_=this.ctx.canvas.height,R=this.ctx.fillStyle;if(this.ctx.fillStyle=l||"#ffffff",this.ctx.fillRect(0,0,d,_),this.ctx.fillStyle=R,s){const B=this.cachedCanvases.getCanvas("transparent",d,_);this.compositeCtx=this.ctx,this.transparentCanvas=B.canvas,this.ctx=B.context,this.ctx.save(),this.ctx.transform(...(0,x.getCurrentTransform)(this.compositeCtx))}this.ctx.save(),h(this.ctx),i&&(this.ctx.transform(...i),this.outputScaleX=i[0],this.outputScaleY=i[0]),this.ctx.transform(...n.transform),this.viewportScale=n.scale,this.baseTransform=(0,x.getCurrentTransform)(this.ctx)}executeOperatorList(i,n,s,l){const d=i.argsArray,_=i.fnArray;let R=n||0;const B=d.length;if(B===R)return R;const et=B-R>O&&typeof s=="function",Z=et?Date.now()+m:0;let rt=0;const dt=this.commonObjs,vt=this.objs;let ft;for(;;){if(l!==void 0&&R===l.nextBreakPoint)return l.breakIt(R,s),R;if(ft=_[R],ft!==c.OPS.dependency)this[ft].apply(this,d[R]);else for(const Mt of d[R]){const Ut=Mt.startsWith("g_")?dt:vt;if(!Ut.has(Mt))return Ut.get(Mt,s),R}if(R++,R===B)return R;if(et&&++rt>O){if(Date.now()>Z)return s(),R;rt=0}}}endDrawing(){G(this,H,Ze).call(this),this.cachedCanvases.clear(),this.cachedPatterns.clear();for(const i of this._cachedBitmapsMap.values()){for(const n of i.values())typeof HTMLCanvasElement<"u"&&n instanceof HTMLCanvasElement&&(n.width=n.height=0);i.clear()}this._cachedBitmapsMap.clear(),G(this,mt,ti).call(this)}_scaleImage(i,n){const s=i.width,l=i.height;let d=Math.max(Math.hypot(n[0],n[1]),1),_=Math.max(Math.hypot(n[2],n[3]),1),R=s,B=l,et="prescale1",Z,rt;for(;d>2&&R>1||_>2&&B>1;){let dt=R,vt=B;d>2&&R>1&&(dt=R>=16384?Math.floor(R/2)-1||1:Math.ceil(R/2),d/=R/dt),_>2&&B>1&&(vt=B>=16384?Math.floor(B/2)-1||1:Math.ceil(B)/2,_/=B/vt),Z=this.cachedCanvases.getCanvas(et,dt,vt),rt=Z.context,rt.clearRect(0,0,dt,vt),rt.drawImage(i,0,0,R,B,0,0,dt,vt),i=Z.canvas,R=dt,B=vt,et=et==="prescale1"?"prescale2":"prescale1"}return{img:i,paintWidth:R,paintHeight:B}}_createMaskCanvas(i){const n=this.ctx,{width:s,height:l}=i,d=this.current.fillColor,_=this.current.patternFill,R=(0,x.getCurrentTransform)(n);let B,et,Z,rt;if((i.bitmap||i.data)&&i.count>1){const wt=i.bitmap||i.data.buffer;et=JSON.stringify(_?R:[R.slice(0,4),d]),B=this._cachedBitmapsMap.get(wt),B||(B=new Map,this._cachedBitmapsMap.set(wt,B));const Tt=B.get(et);if(Tt&&!_){const Wt=Math.round(Math.min(R[0],R[2])+R[4]),zt=Math.round(Math.min(R[1],R[3])+R[5]);return{canvas:Tt,offsetX:Wt,offsetY:zt}}Z=Tt}Z||(rt=this.cachedCanvases.getCanvas("maskCanvas",s,l),y(rt.context,i));let dt=c.Util.transform(R,[1/s,0,0,-1/l,0,0]);dt=c.Util.transform(dt,[1,0,0,1,0,-l]);const vt=c.Util.applyTransform([0,0],dt),ft=c.Util.applyTransform([s,l],dt),Mt=c.Util.normalizeRect([vt[0],vt[1],ft[0],ft[1]]),Ut=Math.round(Mt[2]-Mt[0])||1,Et=Math.round(Mt[3]-Mt[1])||1,It=this.cachedCanvases.getCanvas("fillCanvas",Ut,Et),pt=It.context,J=Math.min(vt[0],ft[0]),Q=Math.min(vt[1],ft[1]);pt.translate(-J,-Q),pt.transform(...dt),Z||(Z=this._scaleImage(rt.canvas,(0,x.getCurrentTransformInverse)(pt)),Z=Z.img,B&&_&&B.set(et,Z)),pt.imageSmoothingEnabled=j((0,x.getCurrentTransform)(pt),i.interpolate),f(pt,Z,0,0,Z.width,Z.height,0,0,s,l),pt.globalCompositeOperation="source-in";const ut=c.Util.transform((0,x.getCurrentTransformInverse)(pt),[1,0,0,1,-J,-Q]);return pt.fillStyle=_?d.getPattern(n,this,ut,at.PathType.FILL):d,pt.fillRect(0,0,s,l),B&&!_&&(this.cachedCanvases.delete("fillCanvas"),B.set(et,It.canvas)),{canvas:It.canvas,offsetX:Math.round(J),offsetY:Math.round(Q)}}setLineWidth(i){i!==this.current.lineWidth&&(this._cachedScaleForStroking[0]=-1),this.current.lineWidth=i,this.ctx.lineWidth=i}setLineCap(i){this.ctx.lineCap=X[i]}setLineJoin(i){this.ctx.lineJoin=w[i]}setMiterLimit(i){this.ctx.miterLimit=i}setDash(i,n){const s=this.ctx;s.setLineDash!==void 0&&(s.setLineDash(i),s.lineDashOffset=n)}setRenderingIntent(i){}setFlatness(i){}setGState(i){for(const[n,s]of i)switch(n){case"LW":this.setLineWidth(s);break;case"LC":this.setLineCap(s);break;case"LJ":this.setLineJoin(s);break;case"ML":this.setMiterLimit(s);break;case"D":this.setDash(s[0],s[1]);break;case"RI":this.setRenderingIntent(s);break;case"FL":this.setFlatness(s);break;case"Font":this.setFont(s[0],s[1]);break;case"CA":this.current.strokeAlpha=s;break;case"ca":this.current.fillAlpha=s,this.ctx.globalAlpha=s;break;case"BM":this.ctx.globalCompositeOperation=s;break;case"SMask":this.current.activeSMask=s?this.tempSMask:null,this.tempSMask=null,this.checkSMaskState();break;case"TR":this.ctx.filter=this.current.transferMaps=this.filterFactory.addFilter(s);break}}get inSMaskMode(){return!!this.suspendedCtx}checkSMaskState(){const i=this.inSMaskMode;this.current.activeSMask&&!i?this.beginSMaskMode():!this.current.activeSMask&&i&&this.endSMaskMode()}beginSMaskMode(){if(this.inSMaskMode)throw new Error("beginSMaskMode called while already in smask mode");const i=this.ctx.canvas.width,n=this.ctx.canvas.height,s="smaskGroupAt"+this.groupLevel,l=this.cachedCanvases.getCanvas(s,i,n);this.suspendedCtx=this.ctx,this.ctx=l.context;const d=this.ctx;d.setTransform(...(0,x.getCurrentTransform)(this.suspendedCtx)),o(this.suspendedCtx,d),S(d,this.suspendedCtx),this.setGState([["BM","source-over"],["ca",1],["CA",1]])}endSMaskMode(){if(!this.inSMaskMode)throw new Error("endSMaskMode called while not in smask mode");this.ctx._removeMirroring(),o(this.ctx,this.suspendedCtx),this.ctx=this.suspendedCtx,this.suspendedCtx=null}compose(i){if(!this.current.activeSMask)return;i?(i[0]=Math.floor(i[0]),i[1]=Math.floor(i[1]),i[2]=Math.ceil(i[2]),i[3]=Math.ceil(i[3])):i=[0,0,this.ctx.canvas.width,this.ctx.canvas.height];const n=this.current.activeSMask,s=this.suspendedCtx;b(s,n,this.ctx,i),this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.clearRect(0,0,this.ctx.canvas.width,this.ctx.canvas.height),this.ctx.restore()}save(){this.inSMaskMode?(o(this.ctx,this.suspendedCtx),this.suspendedCtx.save()):this.ctx.save();const i=this.current;this.stateStack.push(i),this.current=i.clone()}restore(){this.stateStack.length===0&&this.inSMaskMode&&this.endSMaskMode(),this.stateStack.length!==0&&(this.current=this.stateStack.pop(),this.inSMaskMode?(this.suspendedCtx.restore(),o(this.suspendedCtx,this.ctx)):this.ctx.restore(),this.checkSMaskState(),this.pendingClip=null,this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null)}transform(i,n,s,l,d,_){this.ctx.transform(i,n,s,l,d,_),this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null}constructPath(i,n,s){const l=this.ctx,d=this.current;let _=d.x,R=d.y,B,et;const Z=(0,x.getCurrentTransform)(l),rt=Z[0]===0&&Z[3]===0||Z[1]===0&&Z[2]===0,dt=rt?s.slice(0):null;for(let vt=0,ft=0,Mt=i.length;vt<Mt;vt++)switch(i[vt]|0){case c.OPS.rectangle:_=n[ft++],R=n[ft++];const Ut=n[ft++],Et=n[ft++],It=_+Ut,pt=R+Et;l.moveTo(_,R),Ut===0||Et===0?l.lineTo(It,pt):(l.lineTo(It,R),l.lineTo(It,pt),l.lineTo(_,pt)),rt||d.updateRectMinMax(Z,[_,R,It,pt]),l.closePath();break;case c.OPS.moveTo:_=n[ft++],R=n[ft++],l.moveTo(_,R),rt||d.updatePathMinMax(Z,_,R);break;case c.OPS.lineTo:_=n[ft++],R=n[ft++],l.lineTo(_,R),rt||d.updatePathMinMax(Z,_,R);break;case c.OPS.curveTo:B=_,et=R,_=n[ft+4],R=n[ft+5],l.bezierCurveTo(n[ft],n[ft+1],n[ft+2],n[ft+3],_,R),d.updateCurvePathMinMax(Z,B,et,n[ft],n[ft+1],n[ft+2],n[ft+3],_,R,dt),ft+=6;break;case c.OPS.curveTo2:B=_,et=R,l.bezierCurveTo(_,R,n[ft],n[ft+1],n[ft+2],n[ft+3]),d.updateCurvePathMinMax(Z,B,et,_,R,n[ft],n[ft+1],n[ft+2],n[ft+3],dt),_=n[ft+2],R=n[ft+3],ft+=4;break;case c.OPS.curveTo3:B=_,et=R,_=n[ft+2],R=n[ft+3],l.bezierCurveTo(n[ft],n[ft+1],_,R,_,R),d.updateCurvePathMinMax(Z,B,et,n[ft],n[ft+1],_,R,_,R,dt),ft+=4;break;case c.OPS.closePath:l.closePath();break}rt&&d.updateScalingPathMinMax(Z,dt),d.setCurrentPoint(_,R)}closePath(){this.ctx.closePath()}stroke(i=!0){const n=this.ctx,s=this.current.strokeColor;n.globalAlpha=this.current.strokeAlpha,this.contentVisible&&(typeof s=="object"&&(s!=null&&s.getPattern)?(n.save(),n.strokeStyle=s.getPattern(n,this,(0,x.getCurrentTransformInverse)(n),at.PathType.STROKE),this.rescaleAndStroke(!1),n.restore()):this.rescaleAndStroke(!0)),i&&this.consumePath(this.current.getClippedPathBoundingBox()),n.globalAlpha=this.current.fillAlpha}closeStroke(){this.closePath(),this.stroke()}fill(i=!0){const n=this.ctx,s=this.current.fillColor,l=this.current.patternFill;let d=!1;l&&(n.save(),n.fillStyle=s.getPattern(n,this,(0,x.getCurrentTransformInverse)(n),at.PathType.FILL),d=!0);const _=this.current.getClippedPathBoundingBox();this.contentVisible&&_!==null&&(this.pendingEOFill?(n.fill("evenodd"),this.pendingEOFill=!1):n.fill()),d&&n.restore(),i&&this.consumePath(_)}eoFill(){this.pendingEOFill=!0,this.fill()}fillStroke(){this.fill(!1),this.stroke(!1),this.consumePath()}eoFillStroke(){this.pendingEOFill=!0,this.fillStroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.pendingEOFill=!0,this.closePath(),this.fillStroke()}endPath(){this.consumePath()}clip(){this.pendingClip=V}eoClip(){this.pendingClip=nt}beginText(){this.current.textMatrix=c.IDENTITY_MATRIX,this.current.textMatrixScale=1,this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}endText(){const i=this.pendingTextPaths,n=this.ctx;if(i===void 0){n.beginPath();return}n.save(),n.beginPath();for(const s of i)n.setTransform(...s.transform),n.translate(s.x,s.y),s.addToPath(n,s.fontSize);n.restore(),n.clip(),n.beginPath(),delete this.pendingTextPaths}setCharSpacing(i){this.current.charSpacing=i}setWordSpacing(i){this.current.wordSpacing=i}setHScale(i){this.current.textHScale=i/100}setLeading(i){this.current.leading=-i}setFont(i,n){var Z;const s=this.commonObjs.get(i),l=this.current;if(!s)throw new Error(`Can't find font for ${i}`);if(l.fontMatrix=s.fontMatrix||c.FONT_IDENTITY_MATRIX,(l.fontMatrix[0]===0||l.fontMatrix[3]===0)&&(0,c.warn)("Invalid font matrix for font "+i),n<0?(n=-n,l.fontDirection=-1):l.fontDirection=1,this.current.font=s,this.current.fontSize=n,s.isType3Font)return;const d=s.loadedName||"sans-serif",_=((Z=s.systemFontInfo)==null?void 0:Z.css)||`"${d}", ${s.fallbackName}`;let R="normal";s.black?R="900":s.bold&&(R="bold");const B=s.italic?"italic":"normal";let et=n;n<gt?et=gt:n>U&&(et=U),this.current.fontSizeScale=n/et,this.ctx.font=`${B} ${R} ${et}px ${_}`}setTextRenderingMode(i){this.current.textRenderingMode=i}setTextRise(i){this.current.textRise=i}moveText(i,n){this.current.x=this.current.lineX+=i,this.current.y=this.current.lineY+=n}setLeadingMoveText(i,n){this.setLeading(-n),this.moveText(i,n)}setTextMatrix(i,n,s,l,d,_){this.current.textMatrix=[i,n,s,l,d,_],this.current.textMatrixScale=Math.hypot(i,n),this.current.x=this.current.lineX=0,this.current.y=this.current.lineY=0}nextLine(){this.moveText(0,this.current.leading)}paintChar(i,n,s,l){const d=this.ctx,_=this.current,R=_.font,B=_.textRenderingMode,et=_.fontSize/_.fontSizeScale,Z=B&c.TextRenderingMode.FILL_STROKE_MASK,rt=!!(B&c.TextRenderingMode.ADD_TO_PATH_FLAG),dt=_.patternFill&&!R.missingFile;let vt;(R.disableFontFace||rt||dt)&&(vt=R.getPathGenerator(this.commonObjs,i)),R.disableFontFace||dt?(d.save(),d.translate(n,s),d.beginPath(),vt(d,et),l&&d.setTransform(...l),(Z===c.TextRenderingMode.FILL||Z===c.TextRenderingMode.FILL_STROKE)&&d.fill(),(Z===c.TextRenderingMode.STROKE||Z===c.TextRenderingMode.FILL_STROKE)&&d.stroke(),d.restore()):((Z===c.TextRenderingMode.FILL||Z===c.TextRenderingMode.FILL_STROKE)&&d.fillText(i,n,s),(Z===c.TextRenderingMode.STROKE||Z===c.TextRenderingMode.FILL_STROKE)&&d.strokeText(i,n,s)),rt&&(this.pendingTextPaths||(this.pendingTextPaths=[])).push({transform:(0,x.getCurrentTransform)(d),x:n,y:s,fontSize:et,addToPath:vt})}get isFontSubpixelAAEnabled(){const{context:i}=this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled",10,10);i.scale(1.5,1),i.fillText("I",0,10);const n=i.getImageData(0,0,10,10).data;let s=!1;for(let l=3;l<n.length;l+=4)if(n[l]>0&&n[l]<255){s=!0;break}return(0,c.shadow)(this,"isFontSubpixelAAEnabled",s)}showText(i){const n=this.current,s=n.font;if(s.isType3Font)return this.showType3Text(i);const l=n.fontSize;if(l===0)return;const d=this.ctx,_=n.fontSizeScale,R=n.charSpacing,B=n.wordSpacing,et=n.fontDirection,Z=n.textHScale*et,rt=i.length,dt=s.vertical,vt=dt?1:-1,ft=s.defaultVMetrics,Mt=l*n.fontMatrix[0],Ut=n.textRenderingMode===c.TextRenderingMode.FILL&&!s.disableFontFace&&!n.patternFill;d.save(),d.transform(...n.textMatrix),d.translate(n.x,n.y+n.textRise),et>0?d.scale(Z,-1):d.scale(Z,1);let Et;if(n.patternFill){d.save();const ut=n.fillColor.getPattern(d,this,(0,x.getCurrentTransformInverse)(d),at.PathType.FILL);Et=(0,x.getCurrentTransform)(d),d.restore(),d.fillStyle=ut}let It=n.lineWidth;const pt=n.textMatrixScale;if(pt===0||It===0){const ut=n.textRenderingMode&c.TextRenderingMode.FILL_STROKE_MASK;(ut===c.TextRenderingMode.STROKE||ut===c.TextRenderingMode.FILL_STROKE)&&(It=this.getSinglePixelWidth())}else It/=pt;if(_!==1&&(d.scale(_,_),It/=_),d.lineWidth=It,s.isInvalidPDFjsFont){const ut=[];let wt=0;for(const Tt of i)ut.push(Tt.unicode),wt+=Tt.width;d.fillText(ut.join(""),0,0),n.x+=wt*Mt*Z,d.restore(),this.compose();return}let J=0,Q;for(Q=0;Q<rt;++Q){const ut=i[Q];if(typeof ut=="number"){J+=vt*ut*l/1e3;continue}let wt=!1;const Tt=(ut.isSpace?B:0)+R,Wt=ut.fontChar,zt=ut.accent;let Ht,$t,Vt=ut.width;if(dt){const Yt=ut.vmetric||ft,lt=-(ut.vmetric?Yt[1]:Vt*.5)*Mt,K=Yt[2]*Mt;Vt=Yt?-Yt[0]:Vt,Ht=lt/_,$t=(J+K)/_}else Ht=J/_,$t=0;if(s.remeasure&&Vt>0){const Yt=d.measureText(Wt).width*1e3/l*_;if(Vt<Yt&&this.isFontSubpixelAAEnabled){const lt=Vt/Yt;wt=!0,d.save(),d.scale(lt,1),Ht/=lt}else Vt!==Yt&&(Ht+=(Vt-Yt)/2e3*l/_)}if(this.contentVisible&&(ut.isInFont||s.missingFile)){if(Ut&&!zt)d.fillText(Wt,Ht,$t);else if(this.paintChar(Wt,Ht,$t,Et),zt){const Yt=Ht+l*zt.offset.x/_,lt=$t-l*zt.offset.y/_;this.paintChar(zt.fontChar,Yt,lt,Et)}}const Gt=dt?Vt*Mt-Tt*et:Vt*Mt+Tt*et;J+=Gt,wt&&d.restore()}dt?n.y-=J:n.x+=J*Z,d.restore(),this.compose()}showType3Text(i){const n=this.ctx,s=this.current,l=s.font,d=s.fontSize,_=s.fontDirection,R=l.vertical?1:-1,B=s.charSpacing,et=s.wordSpacing,Z=s.textHScale*_,rt=s.fontMatrix||c.FONT_IDENTITY_MATRIX,dt=i.length,vt=s.textRenderingMode===c.TextRenderingMode.INVISIBLE;let ft,Mt,Ut,Et;if(!(vt||d===0)){for(this._cachedScaleForStroking[0]=-1,this._cachedGetSinglePixelWidth=null,n.save(),n.transform(...s.textMatrix),n.translate(s.x,s.y),n.scale(Z,_),ft=0;ft<dt;++ft){if(Mt=i[ft],typeof Mt=="number"){Et=R*Mt*d/1e3,this.ctx.translate(Et,0),s.x+=Et*Z;continue}const It=(Mt.isSpace?et:0)+B,pt=l.charProcOperatorList[Mt.operatorListId];if(!pt){(0,c.warn)(`Type3 character "${Mt.operatorListId}" is not available.`);continue}this.contentVisible&&(this.processingType3=Mt,this.save(),n.scale(d,d),n.transform(...rt),this.executeOperatorList(pt),this.restore()),Ut=c.Util.applyTransform([Mt.width,0],rt)[0]*d+It,n.translate(Ut,0),s.x+=Ut*Z}n.restore(),this.processingType3=null}}setCharWidth(i,n){}setCharWidthAndBounds(i,n,s,l,d,_){this.ctx.rect(s,l,d-s,_-l),this.ctx.clip(),this.endPath()}getColorN_Pattern(i){let n;if(i[0]==="TilingPattern"){const s=i[1],l=this.baseTransform||(0,x.getCurrentTransform)(this.ctx),d={createCanvasGraphics:_=>new kt(_,this.commonObjs,this.objs,this.canvasFactory,this.filterFactory,{optionalContentConfig:this.optionalContentConfig,markedContentStack:this.markedContentStack})};n=new at.TilingPattern(i,s,this.ctx,d,l)}else n=this._getPattern(i[1],i[2]);return n}setStrokeColorN(){this.current.strokeColor=this.getColorN_Pattern(arguments)}setFillColorN(){this.current.fillColor=this.getColorN_Pattern(arguments),this.current.patternFill=!0}setStrokeRGBColor(i,n,s){const l=c.Util.makeHexColor(i,n,s);this.ctx.strokeStyle=l,this.current.strokeColor=l}setFillRGBColor(i,n,s){const l=c.Util.makeHexColor(i,n,s);this.ctx.fillStyle=l,this.current.fillColor=l,this.current.patternFill=!1}_getPattern(i,n=null){let s;return this.cachedPatterns.has(i)?s=this.cachedPatterns.get(i):(s=(0,at.getShadingPattern)(this.getObject(i)),this.cachedPatterns.set(i,s)),n&&(s.matrix=n),s}shadingFill(i){if(!this.contentVisible)return;const n=this.ctx;this.save();const s=this._getPattern(i);n.fillStyle=s.getPattern(n,this,(0,x.getCurrentTransformInverse)(n),at.PathType.SHADING);const l=(0,x.getCurrentTransformInverse)(n);if(l){const{width:d,height:_}=n.canvas,[R,B,et,Z]=c.Util.getAxialAlignedBoundingBox([0,0,d,_],l);this.ctx.fillRect(R,B,et-R,Z-B)}else this.ctx.fillRect(-1e10,-1e10,2e10,2e10);this.compose(this.current.getClippedPathBoundingBox()),this.restore()}beginInlineImage(){(0,c.unreachable)("Should not call beginInlineImage")}beginImageData(){(0,c.unreachable)("Should not call beginImageData")}paintFormXObjectBegin(i,n){if(this.contentVisible&&(this.save(),this.baseTransformStack.push(this.baseTransform),Array.isArray(i)&&i.length===6&&this.transform(...i),this.baseTransform=(0,x.getCurrentTransform)(this.ctx),n)){const s=n[2]-n[0],l=n[3]-n[1];this.ctx.rect(n[0],n[1],s,l),this.current.updateRectMinMax((0,x.getCurrentTransform)(this.ctx),n),this.clip(),this.endPath()}}paintFormXObjectEnd(){this.contentVisible&&(this.restore(),this.baseTransform=this.baseTransformStack.pop())}beginGroup(i){if(!this.contentVisible)return;this.save(),this.inSMaskMode&&(this.endSMaskMode(),this.current.activeSMask=null);const n=this.ctx;i.isolated||(0,c.info)("TODO: Support non-isolated groups."),i.knockout&&(0,c.warn)("Knockout groups not supported.");const s=(0,x.getCurrentTransform)(n);if(i.matrix&&n.transform(...i.matrix),!i.bbox)throw new Error("Bounding box is required.");let l=c.Util.getAxialAlignedBoundingBox(i.bbox,(0,x.getCurrentTransform)(n));const d=[0,0,n.canvas.width,n.canvas.height];l=c.Util.intersect(l,d)||[0,0,0,0];const _=Math.floor(l[0]),R=Math.floor(l[1]);let B=Math.max(Math.ceil(l[2])-_,1),et=Math.max(Math.ceil(l[3])-R,1),Z=1,rt=1;B>M&&(Z=B/M,B=M),et>M&&(rt=et/M,et=M),this.current.startNewPathAndClipBox([0,0,B,et]);let dt="groupAt"+this.groupLevel;i.smask&&(dt+="_smask_"+this.smaskCounter++%2);const vt=this.cachedCanvases.getCanvas(dt,B,et),ft=vt.context;ft.scale(1/Z,1/rt),ft.translate(-_,-R),ft.transform(...s),i.smask?this.smaskStack.push({canvas:vt.canvas,context:ft,offsetX:_,offsetY:R,scaleX:Z,scaleY:rt,subtype:i.smask.subtype,backdrop:i.smask.backdrop,transferMap:i.smask.transferMap||null,startTransformInverse:null}):(n.setTransform(1,0,0,1,0,0),n.translate(_,R),n.scale(Z,rt),n.save()),o(n,ft),this.ctx=ft,this.setGState([["BM","source-over"],["ca",1],["CA",1]]),this.groupStack.push(n),this.groupLevel++}endGroup(i){if(!this.contentVisible)return;this.groupLevel--;const n=this.ctx,s=this.groupStack.pop();if(this.ctx=s,this.ctx.imageSmoothingEnabled=!1,i.smask)this.tempSMask=this.smaskStack.pop(),this.restore();else{this.ctx.restore();const l=(0,x.getCurrentTransform)(this.ctx);this.restore(),this.ctx.save(),this.ctx.setTransform(...l);const d=c.Util.getAxialAlignedBoundingBox([0,0,n.canvas.width,n.canvas.height],l);this.ctx.drawImage(n.canvas,0,0),this.ctx.restore(),this.compose(d)}}beginAnnotation(i,n,s,l,d){if(G(this,H,Ze).call(this),h(this.ctx),this.ctx.save(),this.save(),this.baseTransform&&this.ctx.setTransform(...this.baseTransform),Array.isArray(n)&&n.length===4){const _=n[2]-n[0],R=n[3]-n[1];if(d&&this.annotationCanvasMap){s=s.slice(),s[4]-=n[0],s[5]-=n[1],n=n.slice(),n[0]=n[1]=0,n[2]=_,n[3]=R;const[B,et]=c.Util.singularValueDecompose2dScale((0,x.getCurrentTransform)(this.ctx)),{viewportScale:Z}=this,rt=Math.ceil(_*this.outputScaleX*Z),dt=Math.ceil(R*this.outputScaleY*Z);this.annotationCanvas=this.canvasFactory.create(rt,dt);const{canvas:vt,context:ft}=this.annotationCanvas;this.annotationCanvasMap.set(i,vt),this.annotationCanvas.savedCtx=this.ctx,this.ctx=ft,this.ctx.save(),this.ctx.setTransform(B,0,0,-et,0,R*et),h(this.ctx)}else h(this.ctx),this.ctx.rect(n[0],n[1],_,R),this.ctx.clip(),this.endPath()}this.current=new C(this.ctx.canvas.width,this.ctx.canvas.height),this.transform(...s),this.transform(...l)}endAnnotation(){this.annotationCanvas&&(this.ctx.restore(),G(this,mt,ti).call(this),this.ctx=this.annotationCanvas.savedCtx,delete this.annotationCanvas.savedCtx,delete this.annotationCanvas)}paintImageMaskXObject(i){if(!this.contentVisible)return;const n=i.count;i=this.getObject(i.data,i),i.count=n;const s=this.ctx,l=this.processingType3;if(l&&(l.compiled===void 0&&(l.compiled=A(i)),l.compiled)){l.compiled(s);return}const d=this._createMaskCanvas(i),_=d.canvas;s.save(),s.setTransform(1,0,0,1,0,0),s.drawImage(_,d.offsetX,d.offsetY),s.restore(),this.compose()}paintImageMaskXObjectRepeat(i,n,s=0,l=0,d,_){if(!this.contentVisible)return;i=this.getObject(i.data,i);const R=this.ctx;R.save();const B=(0,x.getCurrentTransform)(R);R.transform(n,s,l,d,0,0);const et=this._createMaskCanvas(i);R.setTransform(1,0,0,1,et.offsetX-B[4],et.offsetY-B[5]);for(let Z=0,rt=_.length;Z<rt;Z+=2){const dt=c.Util.transform(B,[n,s,l,d,_[Z],_[Z+1]]),[vt,ft]=c.Util.applyTransform([0,0],dt);R.drawImage(et.canvas,vt,ft)}R.restore(),this.compose()}paintImageMaskXObjectGroup(i){if(!this.contentVisible)return;const n=this.ctx,s=this.current.fillColor,l=this.current.patternFill;for(const d of i){const{data:_,width:R,height:B,transform:et}=d,Z=this.cachedCanvases.getCanvas("maskCanvas",R,B),rt=Z.context;rt.save();const dt=this.getObject(_,d);y(rt,dt),rt.globalCompositeOperation="source-in",rt.fillStyle=l?s.getPattern(rt,this,(0,x.getCurrentTransformInverse)(n),at.PathType.FILL):s,rt.fillRect(0,0,R,B),rt.restore(),n.save(),n.transform(...et),n.scale(1,-1),f(n,Z.canvas,0,0,R,B,0,-1,1,1),n.restore()}this.compose()}paintImageXObject(i){if(!this.contentVisible)return;const n=this.getObject(i);if(!n){(0,c.warn)("Dependent image isn't ready yet");return}this.paintInlineImageXObject(n)}paintImageXObjectRepeat(i,n,s,l){if(!this.contentVisible)return;const d=this.getObject(i);if(!d){(0,c.warn)("Dependent image isn't ready yet");return}const _=d.width,R=d.height,B=[];for(let et=0,Z=l.length;et<Z;et+=2)B.push({transform:[n,0,0,s,l[et],l[et+1]],x:0,y:0,w:_,h:R});this.paintInlineImageXObjectGroup(d,B)}applyTransferMapsToCanvas(i){return this.current.transferMaps!=="none"&&(i.filter=this.current.transferMaps,i.drawImage(i.canvas,0,0),i.filter="none"),i.canvas}applyTransferMapsToBitmap(i){if(this.current.transferMaps==="none")return i.bitmap;const{bitmap:n,width:s,height:l}=i,d=this.cachedCanvases.getCanvas("inlineImage",s,l),_=d.context;return _.filter=this.current.transferMaps,_.drawImage(n,0,0),_.filter="none",d.canvas}paintInlineImageXObject(i){if(!this.contentVisible)return;const n=i.width,s=i.height,l=this.ctx;if(this.save(),!c.isNodeJS){const{filter:R}=l;R!=="none"&&R!==""&&(l.filter="none")}l.scale(1/n,-1/s);let d;if(i.bitmap)d=this.applyTransferMapsToBitmap(i);else if(typeof HTMLElement=="function"&&i instanceof HTMLElement||!i.data)d=i;else{const B=this.cachedCanvases.getCanvas("inlineImage",n,s).context;T(B,i),d=this.applyTransferMapsToCanvas(B)}const _=this._scaleImage(d,(0,x.getCurrentTransformInverse)(l));l.imageSmoothingEnabled=j((0,x.getCurrentTransform)(l),i.interpolate),f(l,_.img,0,0,_.paintWidth,_.paintHeight,0,-s,n,s),this.compose(),this.restore()}paintInlineImageXObjectGroup(i,n){if(!this.contentVisible)return;const s=this.ctx;let l;if(i.bitmap)l=i.bitmap;else{const d=i.width,_=i.height,B=this.cachedCanvases.getCanvas("inlineImage",d,_).context;T(B,i),l=this.applyTransferMapsToCanvas(B)}for(const d of n)s.save(),s.transform(...d.transform),s.scale(1,-1),f(s,l,d.x,d.y,d.w,d.h,0,-1,1,1),s.restore();this.compose()}paintSolidColorImageMask(){this.contentVisible&&(this.ctx.fillRect(0,0,1,1),this.compose())}markPoint(i){}markPointProps(i,n){}beginMarkedContent(i){this.markedContentStack.push({visible:!0})}beginMarkedContentProps(i,n){i==="OC"?this.markedContentStack.push({visible:this.optionalContentConfig.isVisible(n)}):this.markedContentStack.push({visible:!0}),this.contentVisible=this.isContentVisible()}endMarkedContent(){this.markedContentStack.pop(),this.contentVisible=this.isContentVisible()}beginCompat(){}endCompat(){}consumePath(i){const n=this.current.isEmptyClip();this.pendingClip&&this.current.updateClipFromPath(),this.pendingClip||this.compose(i);const s=this.ctx;this.pendingClip&&(n||(this.pendingClip===nt?s.clip("evenodd"):s.clip()),this.pendingClip=null),this.current.startNewPathAndClipBox(this.current.clipBox),s.beginPath()}getSinglePixelWidth(){if(!this._cachedGetSinglePixelWidth){const i=(0,x.getCurrentTransform)(this.ctx);if(i[1]===0&&i[2]===0)this._cachedGetSinglePixelWidth=1/Math.min(Math.abs(i[0]),Math.abs(i[3]));else{const n=Math.abs(i[0]*i[3]-i[2]*i[1]),s=Math.hypot(i[0],i[2]),l=Math.hypot(i[1],i[3]);this._cachedGetSinglePixelWidth=Math.max(s,l)/n}}return this._cachedGetSinglePixelWidth}getScaleForStroking(){if(this._cachedScaleForStroking[0]===-1){const{lineWidth:i}=this.current,{a:n,b:s,c:l,d}=this.ctx.getTransform();let _,R;if(s===0&&l===0){const B=Math.abs(n),et=Math.abs(d);if(B===et)if(i===0)_=R=1/B;else{const Z=B*i;_=R=Z<1?1/Z:1}else if(i===0)_=1/B,R=1/et;else{const Z=B*i,rt=et*i;_=Z<1?1/Z:1,R=rt<1?1/rt:1}}else{const B=Math.abs(n*d-s*l),et=Math.hypot(n,s),Z=Math.hypot(l,d);if(i===0)_=Z/B,R=et/B;else{const rt=i*B;_=Z>rt?Z/rt:1,R=et>rt?et/rt:1}}this._cachedScaleForStroking[0]=_,this._cachedScaleForStroking[1]=R}return this._cachedScaleForStroking}rescaleAndStroke(i){const{ctx:n}=this,{lineWidth:s}=this.current,[l,d]=this.getScaleForStroking();if(n.lineWidth=s||1,l===1&&d===1){n.stroke();return}const _=n.getLineDash();if(i&&n.save(),n.scale(l,d),_.length>0){const R=Math.max(l,d);n.setLineDash(_.map(B=>B/R)),n.lineDashOffset/=R}n.stroke(),i&&n.restore()}isContentVisible(){for(let i=this.markedContentStack.length-1;i>=0;i--)if(!this.markedContentStack[i].visible)return!1;return!0}};H=new WeakSet,Ze=function(){for(;this.stateStack.length||this.inSMaskMode;)this.restore();this.ctx.restore(),this.transparentCanvas&&(this.ctx=this.compositeCtx,this.ctx.save(),this.ctx.setTransform(1,0,0,1,0,0),this.ctx.drawImage(this.transparentCanvas,0,0),this.ctx.restore(),this.transparentCanvas=null)},mt=new WeakSet,ti=function(){if(this.pageColors){const i=this.filterFactory.addHCMFilter(this.pageColors.foreground,this.pageColors.background);if(i!=="none"){const n=this.ctx.filter;this.ctx.filter=i,this.ctx.drawImage(this.ctx.canvas,0,0),this.ctx.filter=n}}};let ot=kt;u.CanvasGraphics=ot;for(const E in c.OPS)ot.prototype[E]!==void 0&&(ot.prototype[c.OPS[E]]=ot.prototype[E])},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.TilingPattern=u.PathType=void 0,u.getShadingPattern=k;var c=it(1),x=it(6);const at={FILL:"Fill",STROKE:"Stroke",SHADING:"Shading"};u.PathType=at;function $(A,C){if(!C)return;const T=C[2]-C[0],y=C[3]-C[1],o=new Path2D;o.rect(C[0],C[1],T,y),A.clip(o)}class gt{constructor(){this.constructor===gt&&(0,c.unreachable)("Cannot initialize BaseShadingPattern.")}getPattern(){(0,c.unreachable)("Abstract method `getPattern` called.")}}class U extends gt{constructor(C){super(),this._type=C[1],this._bbox=C[2],this._colorStops=C[3],this._p0=C[4],this._p1=C[5],this._r0=C[6],this._r1=C[7],this.matrix=null}_createGradient(C){let T;this._type==="axial"?T=C.createLinearGradient(this._p0[0],this._p0[1],this._p1[0],this._p1[1]):this._type==="radial"&&(T=C.createRadialGradient(this._p0[0],this._p0[1],this._r0,this._p1[0],this._p1[1],this._r1));for(const y of this._colorStops)T.addColorStop(y[0],y[1]);return T}getPattern(C,T,y,o){let h;if(o===at.STROKE||o===at.FILL){const F=T.current.getClippedPathBoundingBox(o,(0,x.getCurrentTransform)(C))||[0,0,0,0],g=Math.ceil(F[2]-F[0])||1,a=Math.ceil(F[3]-F[1])||1,P=T.cachedCanvases.getCanvas("pattern",g,a,!0),b=P.context;b.clearRect(0,0,b.canvas.width,b.canvas.height),b.beginPath(),b.rect(0,0,b.canvas.width,b.canvas.height),b.translate(-F[0],-F[1]),y=c.Util.transform(y,[1,0,0,1,F[0],F[1]]),b.transform(...T.baseTransform),this.matrix&&b.transform(...this.matrix),$(b,this._bbox),b.fillStyle=this._createGradient(b),b.fill(),h=C.createPattern(P.canvas,"no-repeat");const j=new DOMMatrix(y);h.setTransform(j)}else $(C,this._bbox),h=this._createGradient(C);return h}}function M(A,C,T,y,o,h,F,g){const a=C.coords,P=C.colors,b=A.data,j=A.width*4;let X;a[T+1]>a[y+1]&&(X=T,T=y,y=X,X=h,h=F,F=X),a[y+1]>a[o+1]&&(X=y,y=o,o=X,X=F,F=g,g=X),a[T+1]>a[y+1]&&(X=T,T=y,y=X,X=h,h=F,F=X);const w=(a[T]+C.offsetX)*C.scaleX,V=(a[T+1]+C.offsetY)*C.scaleY,nt=(a[y]+C.offsetX)*C.scaleX,ot=(a[y+1]+C.offsetY)*C.scaleY,H=(a[o]+C.offsetX)*C.scaleX,ht=(a[o+1]+C.offsetY)*C.scaleY;if(V>=ht)return;const mt=P[h],Ct=P[h+1],kt=P[h+2],E=P[F],i=P[F+1],n=P[F+2],s=P[g],l=P[g+1],d=P[g+2],_=Math.round(V),R=Math.round(ht);let B,et,Z,rt,dt,vt,ft,Mt;for(let Ut=_;Ut<=R;Ut++){if(Ut<ot){const Q=Ut<V?0:(V-Ut)/(V-ot);B=w-(w-nt)*Q,et=mt-(mt-E)*Q,Z=Ct-(Ct-i)*Q,rt=kt-(kt-n)*Q}else{let Q;Ut>ht?Q=1:ot===ht?Q=0:Q=(ot-Ut)/(ot-ht),B=nt-(nt-H)*Q,et=E-(E-s)*Q,Z=i-(i-l)*Q,rt=n-(n-d)*Q}let Et;Ut<V?Et=0:Ut>ht?Et=1:Et=(V-Ut)/(V-ht),dt=w-(w-H)*Et,vt=mt-(mt-s)*Et,ft=Ct-(Ct-l)*Et,Mt=kt-(kt-d)*Et;const It=Math.round(Math.min(B,dt)),pt=Math.round(Math.max(B,dt));let J=j*Ut+It*4;for(let Q=It;Q<=pt;Q++)Et=(B-Q)/(B-dt),Et<0?Et=0:Et>1&&(Et=1),b[J++]=et-(et-vt)*Et|0,b[J++]=Z-(Z-ft)*Et|0,b[J++]=rt-(rt-Mt)*Et|0,b[J++]=255}}function m(A,C,T){const y=C.coords,o=C.colors;let h,F;switch(C.type){case"lattice":const g=C.verticesPerRow,a=Math.floor(y.length/g)-1,P=g-1;for(h=0;h<a;h++){let b=h*g;for(let j=0;j<P;j++,b++)M(A,T,y[b],y[b+1],y[b+g],o[b],o[b+1],o[b+g]),M(A,T,y[b+g+1],y[b+1],y[b+g],o[b+g+1],o[b+1],o[b+g])}break;case"triangles":for(h=0,F=y.length;h<F;h+=3)M(A,T,y[h],y[h+1],y[h+2],o[h],o[h+1],o[h+2]);break;default:throw new Error("illegal figure")}}class O extends gt{constructor(C){super(),this._coords=C[2],this._colors=C[3],this._figures=C[4],this._bounds=C[5],this._bbox=C[7],this._background=C[8],this.matrix=null}_createMeshCanvas(C,T,y){const g=Math.floor(this._bounds[0]),a=Math.floor(this._bounds[1]),P=Math.ceil(this._bounds[2])-g,b=Math.ceil(this._bounds[3])-a,j=Math.min(Math.ceil(Math.abs(P*C[0]*1.1)),3e3),X=Math.min(Math.ceil(Math.abs(b*C[1]*1.1)),3e3),w=P/j,V=b/X,nt={coords:this._coords,colors:this._colors,offsetX:-g,offsetY:-a,scaleX:1/w,scaleY:1/V},ot=j+2*2,H=X+2*2,ht=y.getCanvas("mesh",ot,H,!1),mt=ht.context,Ct=mt.createImageData(j,X);if(T){const E=Ct.data;for(let i=0,n=E.length;i<n;i+=4)E[i]=T[0],E[i+1]=T[1],E[i+2]=T[2],E[i+3]=255}for(const E of this._figures)m(Ct,E,nt);return mt.putImageData(Ct,2,2),{canvas:ht.canvas,offsetX:g-2*w,offsetY:a-2*V,scaleX:w,scaleY:V}}getPattern(C,T,y,o){$(C,this._bbox);let h;if(o===at.SHADING)h=c.Util.singularValueDecompose2dScale((0,x.getCurrentTransform)(C));else if(h=c.Util.singularValueDecompose2dScale(T.baseTransform),this.matrix){const g=c.Util.singularValueDecompose2dScale(this.matrix);h=[h[0]*g[0],h[1]*g[1]]}const F=this._createMeshCanvas(h,o===at.SHADING?null:this._background,T.cachedCanvases);return o!==at.SHADING&&(C.setTransform(...T.baseTransform),this.matrix&&C.transform(...this.matrix)),C.translate(F.offsetX,F.offsetY),C.scale(F.scaleX,F.scaleY),C.createPattern(F.canvas,"no-repeat")}}class N extends gt{getPattern(){return"hotpink"}}function k(A){switch(A[0]){case"RadialAxial":return new U(A);case"Mesh":return new O(A);case"Dummy":return new N}throw new Error(`Unknown IR type: ${A[0]}`)}const S={COLORED:1,UNCOLORED:2},f=class f{constructor(C,T,y,o,h){this.operatorList=C[2],this.matrix=C[3]||[1,0,0,1,0,0],this.bbox=C[4],this.xstep=C[5],this.ystep=C[6],this.paintType=C[7],this.tilingType=C[8],this.color=T,this.ctx=y,this.canvasGraphicsFactory=o,this.baseTransform=h}createPatternCanvas(C){const T=this.operatorList,y=this.bbox,o=this.xstep,h=this.ystep,F=this.paintType,g=this.tilingType,a=this.color,P=this.canvasGraphicsFactory;(0,c.info)("TilingType: "+g);const b=y[0],j=y[1],X=y[2],w=y[3],V=c.Util.singularValueDecompose2dScale(this.matrix),nt=c.Util.singularValueDecompose2dScale(this.baseTransform),ot=[V[0]*nt[0],V[1]*nt[1]],H=this.getSizeAndScale(o,this.ctx.canvas.width,ot[0]),ht=this.getSizeAndScale(h,this.ctx.canvas.height,ot[1]),mt=C.cachedCanvases.getCanvas("pattern",H.size,ht.size,!0),Ct=mt.context,kt=P.createCanvasGraphics(Ct);kt.groupLevel=C.groupLevel,this.setFillAndStrokeStyleToContext(kt,F,a);let E=b,i=j,n=X,s=w;return b<0&&(E=0,n+=Math.abs(b)),j<0&&(i=0,s+=Math.abs(j)),Ct.translate(-(H.scale*E),-(ht.scale*i)),kt.transform(H.scale,0,0,ht.scale,0,0),Ct.save(),this.clipBbox(kt,E,i,n,s),kt.baseTransform=(0,x.getCurrentTransform)(kt.ctx),kt.executeOperatorList(T),kt.endDrawing(),{canvas:mt.canvas,scaleX:H.scale,scaleY:ht.scale,offsetX:E,offsetY:i}}getSizeAndScale(C,T,y){C=Math.abs(C);const o=Math.max(f.MAX_PATTERN_SIZE,T);let h=Math.ceil(C*y);return h>=o?h=o:y=h/C,{scale:y,size:h}}clipBbox(C,T,y,o,h){const F=o-T,g=h-y;C.ctx.rect(T,y,F,g),C.current.updateRectMinMax((0,x.getCurrentTransform)(C.ctx),[T,y,o,h]),C.clip(),C.endPath()}setFillAndStrokeStyleToContext(C,T,y){const o=C.ctx,h=C.current;switch(T){case S.COLORED:const F=this.ctx;o.fillStyle=F.fillStyle,o.strokeStyle=F.strokeStyle,h.fillColor=F.fillStyle,h.strokeColor=F.strokeStyle;break;case S.UNCOLORED:const g=c.Util.makeHexColor(y[0],y[1],y[2]);o.fillStyle=g,o.strokeStyle=g,h.fillColor=g,h.strokeColor=g;break;default:throw new c.FormatError(`Unsupported paint type: ${T}`)}}getPattern(C,T,y,o){let h=y;o!==at.SHADING&&(h=c.Util.transform(h,T.baseTransform),this.matrix&&(h=c.Util.transform(h,this.matrix)));const F=this.createPatternCanvas(T);let g=new DOMMatrix(h);g=g.translate(F.offsetX,F.offsetY),g=g.scale(1/F.scaleX,1/F.scaleY);const a=C.createPattern(F.canvas,"repeat");return a.setTransform(g),a}};ie(f,"MAX_PATTERN_SIZE",3e3);let v=f;u.TilingPattern=v},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.convertBlackAndWhiteToRGBA=at,u.convertToRGBA=x,u.grayToRGBA=gt;var c=it(1);function x(U){switch(U.kind){case c.ImageKind.GRAYSCALE_1BPP:return at(U);case c.ImageKind.RGB_24BPP:return $(U)}return null}function at({src:U,srcPos:M=0,dest:m,width:O,height:N,nonBlackColor:k=4294967295,inverseDecode:S=!1}){const v=c.FeatureTest.isLittleEndian?4278190080:255,[f,A]=S?[k,v]:[v,k],C=O>>3,T=O&7,y=U.length;m=new Uint32Array(m.buffer);let o=0;for(let h=0;h<N;h++){for(const g=M+C;M<g;M++){const a=M<y?U[M]:255;m[o++]=a&128?A:f,m[o++]=a&64?A:f,m[o++]=a&32?A:f,m[o++]=a&16?A:f,m[o++]=a&8?A:f,m[o++]=a&4?A:f,m[o++]=a&2?A:f,m[o++]=a&1?A:f}if(T===0)continue;const F=M<y?U[M++]:255;for(let g=0;g<T;g++)m[o++]=F&1<<7-g?A:f}return{srcPos:M,destPos:o}}function $({src:U,srcPos:M=0,dest:m,destPos:O=0,width:N,height:k}){let S=0;const v=U.length>>2,f=new Uint32Array(U.buffer,M,v);if(c.FeatureTest.isLittleEndian){for(;S<v-2;S+=3,O+=4){const A=f[S],C=f[S+1],T=f[S+2];m[O]=A|4278190080,m[O+1]=A>>>24|C<<8|4278190080,m[O+2]=C>>>16|T<<16|4278190080,m[O+3]=T>>>8|4278190080}for(let A=S*4,C=U.length;A<C;A+=3)m[O++]=U[A]|U[A+1]<<8|U[A+2]<<16|4278190080}else{for(;S<v-2;S+=3,O+=4){const A=f[S],C=f[S+1],T=f[S+2];m[O]=A|255,m[O+1]=A<<24|C>>>8|255,m[O+2]=C<<16|T>>>16|255,m[O+3]=T<<8|255}for(let A=S*4,C=U.length;A<C;A+=3)m[O++]=U[A]<<24|U[A+1]<<16|U[A+2]<<8|255}return{srcPos:M,destPos:O}}function gt(U,M){if(c.FeatureTest.isLittleEndian)for(let m=0,O=U.length;m<O;m++)M[m]=U[m]*65793|4278190080;else for(let m=0,O=U.length;m<O;m++)M[m]=U[m]*16843008|255}},(ct,u)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.GlobalWorkerOptions=void 0;const it=Object.create(null);u.GlobalWorkerOptions=it,it.workerPort=null,it.workerSrc=""},(ct,u,it)=>{var U,ki,m,Fi,N,ke;Object.defineProperty(u,"__esModule",{value:!0}),u.MessageHandler=void 0;var c=it(1);const x={UNKNOWN:0,DATA:1,ERROR:2},at={UNKNOWN:0,CANCEL:1,CANCEL_COMPLETE:2,CLOSE:3,ENQUEUE:4,ERROR:5,PULL:6,PULL_COMPLETE:7,START_COMPLETE:8};function $(S){switch(S instanceof Error||typeof S=="object"&&S!==null||(0,c.unreachable)('wrapReason: Expected "reason" to be a (possibly cloned) Error.'),S.name){case"AbortException":return new c.AbortException(S.message);case"MissingPDFException":return new c.MissingPDFException(S.message);case"PasswordException":return new c.PasswordException(S.message,S.code);case"UnexpectedResponseException":return new c.UnexpectedResponseException(S.message,S.status);case"UnknownErrorException":return new c.UnknownErrorException(S.message,S.details);default:return new c.UnknownErrorException(S.message,S.toString())}}class gt{constructor(v,f,A){L(this,U);L(this,m);L(this,N);this.sourceName=v,this.targetName=f,this.comObj=A,this.callbackId=1,this.streamId=1,this.streamSinks=Object.create(null),this.streamControllers=Object.create(null),this.callbackCapabilities=Object.create(null),this.actionHandler=Object.create(null),this._onComObjOnMessage=C=>{const T=C.data;if(T.targetName!==this.sourceName)return;if(T.stream){G(this,m,Fi).call(this,T);return}if(T.callback){const o=T.callbackId,h=this.callbackCapabilities[o];if(!h)throw new Error(`Cannot resolve callback ${o}`);if(delete this.callbackCapabilities[o],T.callback===x.DATA)h.resolve(T.data);else if(T.callback===x.ERROR)h.reject($(T.reason));else throw new Error("Unexpected callback case");return}const y=this.actionHandler[T.action];if(!y)throw new Error(`Unknown action from worker: ${T.action}`);if(T.callbackId){const o=this.sourceName,h=T.sourceName;new Promise(function(F){F(y(T.data))}).then(function(F){A.postMessage({sourceName:o,targetName:h,callback:x.DATA,callbackId:T.callbackId,data:F})},function(F){A.postMessage({sourceName:o,targetName:h,callback:x.ERROR,callbackId:T.callbackId,reason:$(F)})});return}if(T.streamId){G(this,U,ki).call(this,T);return}y(T.data)},A.addEventListener("message",this._onComObjOnMessage)}on(v,f){const A=this.actionHandler;if(A[v])throw new Error(`There is already an actionName called "${v}"`);A[v]=f}send(v,f,A){this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:v,data:f},A)}sendWithPromise(v,f,A){const C=this.callbackId++,T=new c.PromiseCapability;this.callbackCapabilities[C]=T;try{this.comObj.postMessage({sourceName:this.sourceName,targetName:this.targetName,action:v,callbackId:C,data:f},A)}catch(y){T.reject(y)}return T.promise}sendWithStream(v,f,A,C){const T=this.streamId++,y=this.sourceName,o=this.targetName,h=this.comObj;return new ReadableStream({start:F=>{const g=new c.PromiseCapability;return this.streamControllers[T]={controller:F,startCall:g,pullCall:null,cancelCall:null,isClosed:!1},h.postMessage({sourceName:y,targetName:o,action:v,streamId:T,data:f,desiredSize:F.desiredSize},C),g.promise},pull:F=>{const g=new c.PromiseCapability;return this.streamControllers[T].pullCall=g,h.postMessage({sourceName:y,targetName:o,stream:at.PULL,streamId:T,desiredSize:F.desiredSize}),g.promise},cancel:F=>{(0,c.assert)(F instanceof Error,"cancel must have a valid reason");const g=new c.PromiseCapability;return this.streamControllers[T].cancelCall=g,this.streamControllers[T].isClosed=!0,h.postMessage({sourceName:y,targetName:o,stream:at.CANCEL,streamId:T,reason:$(F)}),g.promise}},A)}destroy(){this.comObj.removeEventListener("message",this._onComObjOnMessage)}}U=new WeakSet,ki=function(v){const f=v.streamId,A=this.sourceName,C=v.sourceName,T=this.comObj,y=this,o=this.actionHandler[v.action],h={enqueue(F,g=1,a){if(this.isCancelled)return;const P=this.desiredSize;this.desiredSize-=g,P>0&&this.desiredSize<=0&&(this.sinkCapability=new c.PromiseCapability,this.ready=this.sinkCapability.promise),T.postMessage({sourceName:A,targetName:C,stream:at.ENQUEUE,streamId:f,chunk:F},a)},close(){this.isCancelled||(this.isCancelled=!0,T.postMessage({sourceName:A,targetName:C,stream:at.CLOSE,streamId:f}),delete y.streamSinks[f])},error(F){(0,c.assert)(F instanceof Error,"error must have a valid reason"),!this.isCancelled&&(this.isCancelled=!0,T.postMessage({sourceName:A,targetName:C,stream:at.ERROR,streamId:f,reason:$(F)}))},sinkCapability:new c.PromiseCapability,onPull:null,onCancel:null,isCancelled:!1,desiredSize:v.desiredSize,ready:null};h.sinkCapability.resolve(),h.ready=h.sinkCapability.promise,this.streamSinks[f]=h,new Promise(function(F){F(o(v.data,h))}).then(function(){T.postMessage({sourceName:A,targetName:C,stream:at.START_COMPLETE,streamId:f,success:!0})},function(F){T.postMessage({sourceName:A,targetName:C,stream:at.START_COMPLETE,streamId:f,reason:$(F)})})},m=new WeakSet,Fi=function(v){const f=v.streamId,A=this.sourceName,C=v.sourceName,T=this.comObj,y=this.streamControllers[f],o=this.streamSinks[f];switch(v.stream){case at.START_COMPLETE:v.success?y.startCall.resolve():y.startCall.reject($(v.reason));break;case at.PULL_COMPLETE:v.success?y.pullCall.resolve():y.pullCall.reject($(v.reason));break;case at.PULL:if(!o){T.postMessage({sourceName:A,targetName:C,stream:at.PULL_COMPLETE,streamId:f,success:!0});break}o.desiredSize<=0&&v.desiredSize>0&&o.sinkCapability.resolve(),o.desiredSize=v.desiredSize,new Promise(function(h){var F;h((F=o.onPull)==null?void 0:F.call(o))}).then(function(){T.postMessage({sourceName:A,targetName:C,stream:at.PULL_COMPLETE,streamId:f,success:!0})},function(h){T.postMessage({sourceName:A,targetName:C,stream:at.PULL_COMPLETE,streamId:f,reason:$(h)})});break;case at.ENQUEUE:if((0,c.assert)(y,"enqueue should have stream controller"),y.isClosed)break;y.controller.enqueue(v.chunk);break;case at.CLOSE:if((0,c.assert)(y,"close should have stream controller"),y.isClosed)break;y.isClosed=!0,y.controller.close(),G(this,N,ke).call(this,y,f);break;case at.ERROR:(0,c.assert)(y,"error should have stream controller"),y.controller.error($(v.reason)),G(this,N,ke).call(this,y,f);break;case at.CANCEL_COMPLETE:v.success?y.cancelCall.resolve():y.cancelCall.reject($(v.reason)),G(this,N,ke).call(this,y,f);break;case at.CANCEL:if(!o)break;new Promise(function(h){var F;h((F=o.onCancel)==null?void 0:F.call(o,$(v.reason)))}).then(function(){T.postMessage({sourceName:A,targetName:C,stream:at.CANCEL_COMPLETE,streamId:f,success:!0})},function(h){T.postMessage({sourceName:A,targetName:C,stream:at.CANCEL_COMPLETE,streamId:f,reason:$(h)})}),o.sinkCapability.reject($(v.reason)),o.isCancelled=!0,delete this.streamSinks[f];break;default:throw new Error("Unexpected stream case")}},N=new WeakSet,ke=async function(v,f){var A,C,T;await Promise.allSettled([(A=v.startCall)==null?void 0:A.promise,(C=v.pullCall)==null?void 0:C.promise,(T=v.cancelCall)==null?void 0:T.promise]),delete this.streamControllers[f]},u.MessageHandler=gt},(ct,u,it)=>{var at,$;Object.defineProperty(u,"__esModule",{value:!0}),u.Metadata=void 0;var c=it(1);class x{constructor({parsedData:U,rawData:M}){L(this,at,void 0);L(this,$,void 0);tt(this,at,U),tt(this,$,M)}getRaw(){return t(this,$)}get(U){return t(this,at).get(U)??null}getAll(){return(0,c.objectFromMap)(t(this,at))}has(U){return t(this,at).has(U)}}at=new WeakMap,$=new WeakMap,u.Metadata=x},(ct,u,it)=>{var U,M,m,O,N,k,ei;Object.defineProperty(u,"__esModule",{value:!0}),u.OptionalContentConfig=void 0;var c=it(1),x=it(8);const at=Symbol("INTERNAL");class ${constructor(f,A){L(this,U,!0);this.name=f,this.intent=A}get visible(){return t(this,U)}_setVisible(f,A){f!==at&&(0,c.unreachable)("Internal method `_setVisible` called."),tt(this,U,A)}}U=new WeakMap;class gt{constructor(f){L(this,k);L(this,M,null);L(this,m,new Map);L(this,O,null);L(this,N,null);if(this.name=null,this.creator=null,f!==null){this.name=f.name,this.creator=f.creator,tt(this,N,f.order);for(const A of f.groups)t(this,m).set(A.id,new $(A.name,A.intent));if(f.baseState==="OFF")for(const A of t(this,m).values())A._setVisible(at,!1);for(const A of f.on)t(this,m).get(A)._setVisible(at,!0);for(const A of f.off)t(this,m).get(A)._setVisible(at,!1);tt(this,O,this.getHash())}}isVisible(f){if(t(this,m).size===0)return!0;if(!f)return(0,c.warn)("Optional content group not defined."),!0;if(f.type==="OCG")return t(this,m).has(f.id)?t(this,m).get(f.id).visible:((0,c.warn)(`Optional content group not found: ${f.id}`),!0);if(f.type==="OCMD"){if(f.expression)return G(this,k,ei).call(this,f.expression);if(!f.policy||f.policy==="AnyOn"){for(const A of f.ids){if(!t(this,m).has(A))return(0,c.warn)(`Optional content group not found: ${A}`),!0;if(t(this,m).get(A).visible)return!0}return!1}else if(f.policy==="AllOn"){for(const A of f.ids){if(!t(this,m).has(A))return(0,c.warn)(`Optional content group not found: ${A}`),!0;if(!t(this,m).get(A).visible)return!1}return!0}else if(f.policy==="AnyOff"){for(const A of f.ids){if(!t(this,m).has(A))return(0,c.warn)(`Optional content group not found: ${A}`),!0;if(!t(this,m).get(A).visible)return!0}return!1}else if(f.policy==="AllOff"){for(const A of f.ids){if(!t(this,m).has(A))return(0,c.warn)(`Optional content group not found: ${A}`),!0;if(t(this,m).get(A).visible)return!1}return!0}return(0,c.warn)(`Unknown optional content policy ${f.policy}.`),!0}return(0,c.warn)(`Unknown group type ${f.type}.`),!0}setVisibility(f,A=!0){if(!t(this,m).has(f)){(0,c.warn)(`Optional content group not found: ${f}`);return}t(this,m).get(f)._setVisible(at,!!A),tt(this,M,null)}get hasInitialVisibility(){return t(this,O)===null||this.getHash()===t(this,O)}getOrder(){return t(this,m).size?t(this,N)?t(this,N).slice():[...t(this,m).keys()]:null}getGroups(){return t(this,m).size>0?(0,c.objectFromMap)(t(this,m)):null}getGroup(f){return t(this,m).get(f)||null}getHash(){if(t(this,M)!==null)return t(this,M);const f=new x.MurmurHash3_64;for(const[A,C]of t(this,m))f.update(`${A}:${C.visible}`);return tt(this,M,f.hexdigest())}}M=new WeakMap,m=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakSet,ei=function(f){const A=f.length;if(A<2)return!0;const C=f[0];for(let T=1;T<A;T++){const y=f[T];let o;if(Array.isArray(y))o=G(this,k,ei).call(this,y);else if(t(this,m).has(y))o=t(this,m).get(y).visible;else return(0,c.warn)(`Optional content group not found: ${y}`),!0;switch(C){case"And":if(!o)return!1;break;case"Or":if(o)return!0;break;case"Not":return!o;default:return!0}}return C==="And"},u.OptionalContentConfig=gt},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.PDFDataTransportStream=void 0;var c=it(1),x=it(6);class at{constructor({length:M,initialData:m,progressiveDone:O=!1,contentDispositionFilename:N=null,disableRange:k=!1,disableStream:S=!1},v){if((0,c.assert)(v,'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.'),this._queuedChunks=[],this._progressiveDone=O,this._contentDispositionFilename=N,(m==null?void 0:m.length)>0){const f=m instanceof Uint8Array&&m.byteLength===m.buffer.byteLength?m.buffer:new Uint8Array(m).buffer;this._queuedChunks.push(f)}this._pdfDataRangeTransport=v,this._isStreamingSupported=!S,this._isRangeSupported=!k,this._contentLength=M,this._fullRequestReader=null,this._rangeReaders=[],this._pdfDataRangeTransport.addRangeListener((f,A)=>{this._onReceiveData({begin:f,chunk:A})}),this._pdfDataRangeTransport.addProgressListener((f,A)=>{this._onProgress({loaded:f,total:A})}),this._pdfDataRangeTransport.addProgressiveReadListener(f=>{this._onReceiveData({chunk:f})}),this._pdfDataRangeTransport.addProgressiveDoneListener(()=>{this._onProgressiveDone()}),this._pdfDataRangeTransport.transportReady()}_onReceiveData({begin:M,chunk:m}){const O=m instanceof Uint8Array&&m.byteLength===m.buffer.byteLength?m.buffer:new Uint8Array(m).buffer;if(M===void 0)this._fullRequestReader?this._fullRequestReader._enqueue(O):this._queuedChunks.push(O);else{const N=this._rangeReaders.some(function(k){return k._begin!==M?!1:(k._enqueue(O),!0)});(0,c.assert)(N,"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.")}}get _progressiveDataLength(){var M;return((M=this._fullRequestReader)==null?void 0:M._loaded)??0}_onProgress(M){var m,O,N,k;M.total===void 0?(O=(m=this._rangeReaders[0])==null?void 0:m.onProgress)==null||O.call(m,{loaded:M.loaded}):(k=(N=this._fullRequestReader)==null?void 0:N.onProgress)==null||k.call(N,{loaded:M.loaded,total:M.total})}_onProgressiveDone(){var M;(M=this._fullRequestReader)==null||M.progressiveDone(),this._progressiveDone=!0}_removeRangeReader(M){const m=this._rangeReaders.indexOf(M);m>=0&&this._rangeReaders.splice(m,1)}getFullReader(){(0,c.assert)(!this._fullRequestReader,"PDFDataTransportStream.getFullReader can only be called once.");const M=this._queuedChunks;return this._queuedChunks=null,new $(this,M,this._progressiveDone,this._contentDispositionFilename)}getRangeReader(M,m){if(m<=this._progressiveDataLength)return null;const O=new gt(this,M,m);return this._pdfDataRangeTransport.requestDataRange(M,m),this._rangeReaders.push(O),O}cancelAllRequests(M){var m;(m=this._fullRequestReader)==null||m.cancel(M);for(const O of this._rangeReaders.slice(0))O.cancel(M);this._pdfDataRangeTransport.abort()}}u.PDFDataTransportStream=at;class ${constructor(M,m,O=!1,N=null){this._stream=M,this._done=O||!1,this._filename=(0,x.isPdfFile)(N)?N:null,this._queuedChunks=m||[],this._loaded=0;for(const k of this._queuedChunks)this._loaded+=k.byteLength;this._requests=[],this._headersReady=Promise.resolve(),M._fullRequestReader=this,this.onProgress=null}_enqueue(M){this._done||(this._requests.length>0?this._requests.shift().resolve({value:M,done:!1}):this._queuedChunks.push(M),this._loaded+=M.byteLength)}get headersReady(){return this._headersReady}get filename(){return this._filename}get isRangeSupported(){return this._stream._isRangeSupported}get isStreamingSupported(){return this._stream._isStreamingSupported}get contentLength(){return this._stream._contentLength}async read(){if(this._queuedChunks.length>0)return{value:this._queuedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const M=new c.PromiseCapability;return this._requests.push(M),M.promise}cancel(M){this._done=!0;for(const m of this._requests)m.resolve({value:void 0,done:!0});this._requests.length=0}progressiveDone(){this._done||(this._done=!0)}}class gt{constructor(M,m,O){this._stream=M,this._begin=m,this._end=O,this._queuedChunk=null,this._requests=[],this._done=!1,this.onProgress=null}_enqueue(M){if(!this._done){if(this._requests.length===0)this._queuedChunk=M;else{this._requests.shift().resolve({value:M,done:!1});for(const O of this._requests)O.resolve({value:void 0,done:!0});this._requests.length=0}this._done=!0,this._stream._removeRangeReader(this)}}get isStreamingSupported(){return!1}async read(){if(this._queuedChunk){const m=this._queuedChunk;return this._queuedChunk=null,{value:m,done:!1}}if(this._done)return{value:void 0,done:!0};const M=new c.PromiseCapability;return this._requests.push(M),M.promise}cancel(M){this._done=!0;for(const m of this._requests)m.resolve({value:void 0,done:!0});this._requests.length=0,this._stream._removeRangeReader(this)}}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.PDFFetchStream=void 0;var c=it(1),x=it(20);function at(O,N,k){return{method:"GET",headers:O,signal:k.signal,mode:"cors",credentials:N?"include":"same-origin",redirect:"follow"}}function $(O){const N=new Headers;for(const k in O){const S=O[k];S!==void 0&&N.append(k,S)}return N}function gt(O){return O instanceof Uint8Array?O.buffer:O instanceof ArrayBuffer?O:((0,c.warn)(`getArrayBuffer - unexpected data format: ${O}`),new Uint8Array(O).buffer)}class U{constructor(N){this.source=N,this.isHttp=/^https?:/i.test(N.url),this.httpHeaders=this.isHttp&&N.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var N;return((N=this._fullRequestReader)==null?void 0:N._loaded)??0}getFullReader(){return(0,c.assert)(!this._fullRequestReader,"PDFFetchStream.getFullReader can only be called once."),this._fullRequestReader=new M(this),this._fullRequestReader}getRangeReader(N,k){if(k<=this._progressiveDataLength)return null;const S=new m(this,N,k);return this._rangeRequestReaders.push(S),S}cancelAllRequests(N){var k;(k=this._fullRequestReader)==null||k.cancel(N);for(const S of this._rangeRequestReaders.slice(0))S.cancel(N)}}u.PDFFetchStream=U;class M{constructor(N){this._stream=N,this._reader=null,this._loaded=0,this._filename=null;const k=N.source;this._withCredentials=k.withCredentials||!1,this._contentLength=k.length,this._headersCapability=new c.PromiseCapability,this._disableRange=k.disableRange||!1,this._rangeChunkSize=k.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._abortController=new AbortController,this._isStreamingSupported=!k.disableStream,this._isRangeSupported=!k.disableRange,this._headers=$(this._stream.httpHeaders);const S=k.url;fetch(S,at(this._headers,this._withCredentials,this._abortController)).then(v=>{if(!(0,x.validateResponseStatus)(v.status))throw(0,x.createResponseStatusError)(v.status,S);this._reader=v.body.getReader(),this._headersCapability.resolve();const f=T=>v.headers.get(T),{allowRangeRequests:A,suggestedLength:C}=(0,x.validateRangeRequestCapabilities)({getResponseHeader:f,isHttp:this._stream.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=A,this._contentLength=C||this._contentLength,this._filename=(0,x.extractFilenameFromHeader)(f),!this._isStreamingSupported&&this._isRangeSupported&&this.cancel(new c.AbortException("Streaming is disabled."))}).catch(this._headersCapability.reject),this.onProgress=null}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var S;await this._headersCapability.promise;const{value:N,done:k}=await this._reader.read();return k?{value:N,done:k}:(this._loaded+=N.byteLength,(S=this.onProgress)==null||S.call(this,{loaded:this._loaded,total:this._contentLength}),{value:gt(N),done:!1})}cancel(N){var k;(k=this._reader)==null||k.cancel(N),this._abortController.abort()}}class m{constructor(N,k,S){this._stream=N,this._reader=null,this._loaded=0;const v=N.source;this._withCredentials=v.withCredentials||!1,this._readCapability=new c.PromiseCapability,this._isStreamingSupported=!v.disableStream,this._abortController=new AbortController,this._headers=$(this._stream.httpHeaders),this._headers.append("Range",`bytes=${k}-${S-1}`);const f=v.url;fetch(f,at(this._headers,this._withCredentials,this._abortController)).then(A=>{if(!(0,x.validateResponseStatus)(A.status))throw(0,x.createResponseStatusError)(A.status,f);this._readCapability.resolve(),this._reader=A.body.getReader()}).catch(this._readCapability.reject),this.onProgress=null}get isStreamingSupported(){return this._isStreamingSupported}async read(){var S;await this._readCapability.promise;const{value:N,done:k}=await this._reader.read();return k?{value:N,done:k}:(this._loaded+=N.byteLength,(S=this.onProgress)==null||S.call(this,{loaded:this._loaded}),{value:gt(N),done:!1})}cancel(N){var k;(k=this._reader)==null||k.cancel(N),this._abortController.abort()}}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.createResponseStatusError=U,u.extractFilenameFromHeader=gt,u.validateRangeRequestCapabilities=$,u.validateResponseStatus=M;var c=it(1),x=it(21),at=it(6);function $({getResponseHeader:m,isHttp:O,rangeChunkSize:N,disableRange:k}){const S={allowRangeRequests:!1,suggestedLength:void 0},v=parseInt(m("Content-Length"),10);return!Number.isInteger(v)||(S.suggestedLength=v,v<=2*N)||k||!O||m("Accept-Ranges")!=="bytes"||(m("Content-Encoding")||"identity")!=="identity"||(S.allowRangeRequests=!0),S}function gt(m){const O=m("Content-Disposition");if(O){let N=(0,x.getFilenameFromContentDispositionHeader)(O);if(N.includes("%"))try{N=decodeURIComponent(N)}catch{}if((0,at.isPdfFile)(N))return N}return null}function U(m,O){return m===404||m===0&&O.startsWith("file:")?new c.MissingPDFException('Missing PDF "'+O+'".'):new c.UnexpectedResponseException(`Unexpected server response (${m}) while retrieving PDF "${O}".`,m)}function M(m){return m===200||m===206}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.getFilenameFromContentDispositionHeader=x;var c=it(1);function x(at){let $=!0,gt=U("filename\\*","i").exec(at);if(gt){gt=gt[1];let v=N(gt);return v=unescape(v),v=k(v),v=S(v),m(v)}if(gt=O(at),gt){const v=S(gt);return m(v)}if(gt=U("filename","i").exec(at),gt){gt=gt[1];let v=N(gt);return v=S(v),m(v)}function U(v,f){return new RegExp("(?:^|;)\\s*"+v+'\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',f)}function M(v,f){if(v){if(!/^[\x00-\xFF]+$/.test(f))return f;try{const A=new TextDecoder(v,{fatal:!0}),C=(0,c.stringToBytes)(f);f=A.decode(C),$=!1}catch{}}return f}function m(v){return $&&/[\x80-\xff]/.test(v)&&(v=M("utf-8",v),$&&(v=M("iso-8859-1",v))),v}function O(v){const f=[];let A;const C=U("filename\\*((?!0\\d)\\d+)(\\*?)","ig");for(;(A=C.exec(v))!==null;){let[,y,o,h]=A;if(y=parseInt(y,10),y in f){if(y===0)break;continue}f[y]=[o,h]}const T=[];for(let y=0;y<f.length&&y in f;++y){let[o,h]=f[y];h=N(h),o&&(h=unescape(h),y===0&&(h=k(h))),T.push(h)}return T.join("")}function N(v){if(v.startsWith('"')){const f=v.slice(1).split('\\"');for(let A=0;A<f.length;++A){const C=f[A].indexOf('"');C!==-1&&(f[A]=f[A].slice(0,C),f.length=A+1),f[A]=f[A].replaceAll(/\\(.)/g,"$1")}v=f.join('"')}return v}function k(v){const f=v.indexOf("'");if(f===-1)return v;const A=v.slice(0,f),T=v.slice(f+1).replace(/^[^']*'/,"");return M(A,T)}function S(v){return!v.startsWith("=?")||/[\x00-\x19\x80-\xff]/.test(v)?v:v.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,function(f,A,C,T){if(C==="q"||C==="Q")return T=T.replaceAll("_"," "),T=T.replaceAll(/=([0-9a-fA-F]{2})/g,function(y,o){return String.fromCharCode(parseInt(o,16))}),M(A,T);try{T=atob(T)}catch{}return M(A,T)})}return""}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.PDFNetworkStream=void 0;var c=it(1),x=it(20);const at=200,$=206;function gt(N){const k=N.response;return typeof k!="string"?k:(0,c.stringToBytes)(k).buffer}class U{constructor(k,S={}){this.url=k,this.isHttp=/^https?:/i.test(k),this.httpHeaders=this.isHttp&&S.httpHeaders||Object.create(null),this.withCredentials=S.withCredentials||!1,this.currXhrId=0,this.pendingRequests=Object.create(null)}requestRange(k,S,v){const f={begin:k,end:S};for(const A in v)f[A]=v[A];return this.request(f)}requestFull(k){return this.request(k)}request(k){const S=new XMLHttpRequest,v=this.currXhrId++,f=this.pendingRequests[v]={xhr:S};S.open("GET",this.url),S.withCredentials=this.withCredentials;for(const A in this.httpHeaders){const C=this.httpHeaders[A];C!==void 0&&S.setRequestHeader(A,C)}return this.isHttp&&"begin"in k&&"end"in k?(S.setRequestHeader("Range",`bytes=${k.begin}-${k.end-1}`),f.expectedStatus=$):f.expectedStatus=at,S.responseType="arraybuffer",k.onError&&(S.onerror=function(A){k.onError(S.status)}),S.onreadystatechange=this.onStateChange.bind(this,v),S.onprogress=this.onProgress.bind(this,v),f.onHeadersReceived=k.onHeadersReceived,f.onDone=k.onDone,f.onError=k.onError,f.onProgress=k.onProgress,S.send(null),v}onProgress(k,S){var f;const v=this.pendingRequests[k];v&&((f=v.onProgress)==null||f.call(v,S))}onStateChange(k,S){var y,o,h;const v=this.pendingRequests[k];if(!v)return;const f=v.xhr;if(f.readyState>=2&&v.onHeadersReceived&&(v.onHeadersReceived(),delete v.onHeadersReceived),f.readyState!==4||!(k in this.pendingRequests))return;if(delete this.pendingRequests[k],f.status===0&&this.isHttp){(y=v.onError)==null||y.call(v,f.status);return}const A=f.status||at;if(!(A===at&&v.expectedStatus===$)&&A!==v.expectedStatus){(o=v.onError)==null||o.call(v,f.status);return}const T=gt(f);if(A===$){const F=f.getResponseHeader("Content-Range"),g=/bytes (\d+)-(\d+)\/(\d+)/.exec(F);v.onDone({begin:parseInt(g[1],10),chunk:T})}else T?v.onDone({begin:0,chunk:T}):(h=v.onError)==null||h.call(v,f.status)}getRequestXhr(k){return this.pendingRequests[k].xhr}isPendingRequest(k){return k in this.pendingRequests}abortRequest(k){const S=this.pendingRequests[k].xhr;delete this.pendingRequests[k],S.abort()}}class M{constructor(k){this._source=k,this._manager=new U(k.url,{httpHeaders:k.httpHeaders,withCredentials:k.withCredentials}),this._rangeChunkSize=k.rangeChunkSize,this._fullRequestReader=null,this._rangeRequestReaders=[]}_onRangeRequestReaderClosed(k){const S=this._rangeRequestReaders.indexOf(k);S>=0&&this._rangeRequestReaders.splice(S,1)}getFullReader(){return(0,c.assert)(!this._fullRequestReader,"PDFNetworkStream.getFullReader can only be called once."),this._fullRequestReader=new m(this._manager,this._source),this._fullRequestReader}getRangeReader(k,S){const v=new O(this._manager,k,S);return v.onClosed=this._onRangeRequestReaderClosed.bind(this),this._rangeRequestReaders.push(v),v}cancelAllRequests(k){var S;(S=this._fullRequestReader)==null||S.cancel(k);for(const v of this._rangeRequestReaders.slice(0))v.cancel(k)}}u.PDFNetworkStream=M;class m{constructor(k,S){this._manager=k;const v={onHeadersReceived:this._onHeadersReceived.bind(this),onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=S.url,this._fullRequestId=k.requestFull(v),this._headersReceivedCapability=new c.PromiseCapability,this._disableRange=S.disableRange||!1,this._contentLength=S.length,this._rangeChunkSize=S.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!1,this._isRangeSupported=!1,this._cachedChunks=[],this._requests=[],this._done=!1,this._storedError=void 0,this._filename=null,this.onProgress=null}_onHeadersReceived(){const k=this._fullRequestId,S=this._manager.getRequestXhr(k),v=C=>S.getResponseHeader(C),{allowRangeRequests:f,suggestedLength:A}=(0,x.validateRangeRequestCapabilities)({getResponseHeader:v,isHttp:this._manager.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});f&&(this._isRangeSupported=!0),this._contentLength=A||this._contentLength,this._filename=(0,x.extractFilenameFromHeader)(v),this._isRangeSupported&&this._manager.abortRequest(k),this._headersReceivedCapability.resolve()}_onDone(k){if(k&&(this._requests.length>0?this._requests.shift().resolve({value:k.chunk,done:!1}):this._cachedChunks.push(k.chunk)),this._done=!0,!(this._cachedChunks.length>0)){for(const S of this._requests)S.resolve({value:void 0,done:!0});this._requests.length=0}}_onError(k){this._storedError=(0,x.createResponseStatusError)(k,this._url),this._headersReceivedCapability.reject(this._storedError);for(const S of this._requests)S.reject(this._storedError);this._requests.length=0,this._cachedChunks.length=0}_onProgress(k){var S;(S=this.onProgress)==null||S.call(this,{loaded:k.loaded,total:k.lengthComputable?k.total:this._contentLength})}get filename(){return this._filename}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}get contentLength(){return this._contentLength}get headersReady(){return this._headersReceivedCapability.promise}async read(){if(this._storedError)throw this._storedError;if(this._cachedChunks.length>0)return{value:this._cachedChunks.shift(),done:!1};if(this._done)return{value:void 0,done:!0};const k=new c.PromiseCapability;return this._requests.push(k),k.promise}cancel(k){this._done=!0,this._headersReceivedCapability.reject(k);for(const S of this._requests)S.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._fullRequestId)&&this._manager.abortRequest(this._fullRequestId),this._fullRequestReader=null}}class O{constructor(k,S,v){this._manager=k;const f={onDone:this._onDone.bind(this),onError:this._onError.bind(this),onProgress:this._onProgress.bind(this)};this._url=k.url,this._requestId=k.requestRange(S,v,f),this._requests=[],this._queuedChunk=null,this._done=!1,this._storedError=void 0,this.onProgress=null,this.onClosed=null}_close(){var k;(k=this.onClosed)==null||k.call(this,this)}_onDone(k){const S=k.chunk;this._requests.length>0?this._requests.shift().resolve({value:S,done:!1}):this._queuedChunk=S,this._done=!0;for(const v of this._requests)v.resolve({value:void 0,done:!0});this._requests.length=0,this._close()}_onError(k){this._storedError=(0,x.createResponseStatusError)(k,this._url);for(const S of this._requests)S.reject(this._storedError);this._requests.length=0,this._queuedChunk=null}_onProgress(k){var S;this.isStreamingSupported||(S=this.onProgress)==null||S.call(this,{loaded:k.loaded})}get isStreamingSupported(){return!1}async read(){if(this._storedError)throw this._storedError;if(this._queuedChunk!==null){const S=this._queuedChunk;return this._queuedChunk=null,{value:S,done:!1}}if(this._done)return{value:void 0,done:!0};const k=new c.PromiseCapability;return this._requests.push(k),k.promise}cancel(k){this._done=!0;for(const S of this._requests)S.resolve({value:void 0,done:!0});this._requests.length=0,this._manager.isPendingRequest(this._requestId)&&this._manager.abortRequest(this._requestId),this._close()}}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.PDFNodeStream=void 0;var c=it(1),x=it(20);const at=/^file:\/\/\/[a-zA-Z]:\//;function $(v){const f=require$$5,A=f.parse(v);return A.protocol==="file:"||A.host?A:/^[a-z]:[/\\]/i.test(v)?f.parse(`file:///${v}`):(A.host||(A.protocol="file:"),A)}class gt{constructor(f){this.source=f,this.url=$(f.url),this.isHttp=this.url.protocol==="http:"||this.url.protocol==="https:",this.isFsUrl=this.url.protocol==="file:",this.httpHeaders=this.isHttp&&f.httpHeaders||{},this._fullRequestReader=null,this._rangeRequestReaders=[]}get _progressiveDataLength(){var f;return((f=this._fullRequestReader)==null?void 0:f._loaded)??0}getFullReader(){return(0,c.assert)(!this._fullRequestReader,"PDFNodeStream.getFullReader can only be called once."),this._fullRequestReader=this.isFsUrl?new k(this):new O(this),this._fullRequestReader}getRangeReader(f,A){if(A<=this._progressiveDataLength)return null;const C=this.isFsUrl?new S(this,f,A):new N(this,f,A);return this._rangeRequestReaders.push(C),C}cancelAllRequests(f){var A;(A=this._fullRequestReader)==null||A.cancel(f);for(const C of this._rangeRequestReaders.slice(0))C.cancel(f)}}u.PDFNodeStream=gt;class U{constructor(f){this._url=f.url,this._done=!1,this._storedError=null,this.onProgress=null;const A=f.source;this._contentLength=A.length,this._loaded=0,this._filename=null,this._disableRange=A.disableRange||!1,this._rangeChunkSize=A.rangeChunkSize,!this._rangeChunkSize&&!this._disableRange&&(this._disableRange=!0),this._isStreamingSupported=!A.disableStream,this._isRangeSupported=!A.disableRange,this._readableStream=null,this._readCapability=new c.PromiseCapability,this._headersCapability=new c.PromiseCapability}get headersReady(){return this._headersCapability.promise}get filename(){return this._filename}get contentLength(){return this._contentLength}get isRangeSupported(){return this._isRangeSupported}get isStreamingSupported(){return this._isStreamingSupported}async read(){var C;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const f=this._readableStream.read();return f===null?(this._readCapability=new c.PromiseCapability,this.read()):(this._loaded+=f.length,(C=this.onProgress)==null||C.call(this,{loaded:this._loaded,total:this._contentLength}),{value:new Uint8Array(f).buffer,done:!1})}cancel(f){if(!this._readableStream){this._error(f);return}this._readableStream.destroy(f)}_error(f){this._storedError=f,this._readCapability.resolve()}_setReadableStream(f){this._readableStream=f,f.on("readable",()=>{this._readCapability.resolve()}),f.on("end",()=>{f.destroy(),this._done=!0,this._readCapability.resolve()}),f.on("error",A=>{this._error(A)}),!this._isStreamingSupported&&this._isRangeSupported&&this._error(new c.AbortException("streaming is disabled")),this._storedError&&this._readableStream.destroy(this._storedError)}}class M{constructor(f){this._url=f.url,this._done=!1,this._storedError=null,this.onProgress=null,this._loaded=0,this._readableStream=null,this._readCapability=new c.PromiseCapability;const A=f.source;this._isStreamingSupported=!A.disableStream}get isStreamingSupported(){return this._isStreamingSupported}async read(){var C;if(await this._readCapability.promise,this._done)return{value:void 0,done:!0};if(this._storedError)throw this._storedError;const f=this._readableStream.read();return f===null?(this._readCapability=new c.PromiseCapability,this.read()):(this._loaded+=f.length,(C=this.onProgress)==null||C.call(this,{loaded:this._loaded}),{value:new Uint8Array(f).buffer,done:!1})}cancel(f){if(!this._readableStream){this._error(f);return}this._readableStream.destroy(f)}_error(f){this._storedError=f,this._readCapability.resolve()}_setReadableStream(f){this._readableStream=f,f.on("readable",()=>{this._readCapability.resolve()}),f.on("end",()=>{f.destroy(),this._done=!0,this._readCapability.resolve()}),f.on("error",A=>{this._error(A)}),this._storedError&&this._readableStream.destroy(this._storedError)}}function m(v,f){return{protocol:v.protocol,auth:v.auth,host:v.hostname,port:v.port,path:v.path,method:"GET",headers:f}}class O extends U{constructor(f){super(f);const A=C=>{if(C.statusCode===404){const h=new c.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=h,this._headersCapability.reject(h);return}this._headersCapability.resolve(),this._setReadableStream(C);const T=h=>this._readableStream.headers[h.toLowerCase()],{allowRangeRequests:y,suggestedLength:o}=(0,x.validateRangeRequestCapabilities)({getResponseHeader:T,isHttp:f.isHttp,rangeChunkSize:this._rangeChunkSize,disableRange:this._disableRange});this._isRangeSupported=y,this._contentLength=o||this._contentLength,this._filename=(0,x.extractFilenameFromHeader)(T)};if(this._request=null,this._url.protocol==="http:"){const C=require$$5;this._request=C.request(m(this._url,f.httpHeaders),A)}else{const C=require$$5;this._request=C.request(m(this._url,f.httpHeaders),A)}this._request.on("error",C=>{this._storedError=C,this._headersCapability.reject(C)}),this._request.end()}}class N extends M{constructor(f,A,C){super(f),this._httpHeaders={};for(const y in f.httpHeaders){const o=f.httpHeaders[y];o!==void 0&&(this._httpHeaders[y]=o)}this._httpHeaders.Range=`bytes=${A}-${C-1}`;const T=y=>{if(y.statusCode===404){const o=new c.MissingPDFException(`Missing PDF "${this._url}".`);this._storedError=o;return}this._setReadableStream(y)};if(this._request=null,this._url.protocol==="http:"){const y=require$$5;this._request=y.request(m(this._url,this._httpHeaders),T)}else{const y=require$$5;this._request=y.request(m(this._url,this._httpHeaders),T)}this._request.on("error",y=>{this._storedError=y}),this._request.end()}}class k extends U{constructor(f){super(f);let A=decodeURIComponent(this._url.path);at.test(this._url.href)&&(A=A.replace(/^\//,""));const C=require$$5;C.lstat(A,(T,y)=>{if(T){T.code==="ENOENT"&&(T=new c.MissingPDFException(`Missing PDF "${A}".`)),this._storedError=T,this._headersCapability.reject(T);return}this._contentLength=y.size,this._setReadableStream(C.createReadStream(A)),this._headersCapability.resolve()})}}class S extends M{constructor(f,A,C){super(f);let T=decodeURIComponent(this._url.path);at.test(this._url.href)&&(T=T.replace(/^\//,""));const y=require$$5;this._setReadableStream(y.createReadStream(T,{start:A,end:C-1}))}}},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.SVGGraphics=void 0;var c=it(6),x=it(1);const at={fontStyle:"normal",fontWeight:"normal",fillColor:"#000000"},$="http://www.w3.org/XML/1998/namespace",gt="http://www.w3.org/1999/xlink",U=["butt","round","square"],M=["miter","round","bevel"],m=function(y,o="",h=!1){if(URL.createObjectURL&&typeof Blob<"u"&&!h)return URL.createObjectURL(new Blob([y],{type:o}));const F="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";let g=`data:${o};base64,`;for(let a=0,P=y.length;a<P;a+=3){const b=y[a]&255,j=y[a+1]&255,X=y[a+2]&255,w=b>>2,V=(b&3)<<4|j>>4,nt=a+1<P?(j&15)<<2|X>>6:64,ot=a+2<P?X&63:64;g+=F[w]+F[V]+F[nt]+F[ot]}return g},O=function(){const y=new Uint8Array([137,80,78,71,13,10,26,10]),o=12,h=new Int32Array(256);for(let X=0;X<256;X++){let w=X;for(let V=0;V<8;V++)w=w&1?3988292384^w>>1&2147483647:w>>1&2147483647;h[X]=w}function F(X,w,V){let nt=-1;for(let ot=w;ot<V;ot++){const H=(nt^X[ot])&255,ht=h[H];nt=nt>>>8^ht}return nt^-1}function g(X,w,V,nt){let ot=nt;const H=w.length;V[ot]=H>>24&255,V[ot+1]=H>>16&255,V[ot+2]=H>>8&255,V[ot+3]=H&255,ot+=4,V[ot]=X.charCodeAt(0)&255,V[ot+1]=X.charCodeAt(1)&255,V[ot+2]=X.charCodeAt(2)&255,V[ot+3]=X.charCodeAt(3)&255,ot+=4,V.set(w,ot),ot+=w.length;const ht=F(V,nt+4,ot);V[ot]=ht>>24&255,V[ot+1]=ht>>16&255,V[ot+2]=ht>>8&255,V[ot+3]=ht&255}function a(X,w,V){let nt=1,ot=0;for(let H=w;H<V;++H)nt=(nt+(X[H]&255))%65521,ot=(ot+nt)%65521;return ot<<16|nt}function P(X){if(!x.isNodeJS)return b(X);try{const w=parseInt(process.versions.node)>=8?X:Buffer.from(X),V=require$$5.deflateSync(w,{level:9});return V instanceof Uint8Array?V:new Uint8Array(V)}catch(w){(0,x.warn)("Not compressing PNG because zlib.deflateSync is unavailable: "+w)}return b(X)}function b(X){let w=X.length;const V=65535,nt=Math.ceil(w/V),ot=new Uint8Array(2+w+nt*5+4);let H=0;ot[H++]=120,ot[H++]=156;let ht=0;for(;w>V;)ot[H++]=0,ot[H++]=255,ot[H++]=255,ot[H++]=0,ot[H++]=0,ot.set(X.subarray(ht,ht+V),H),H+=V,ht+=V,w-=V;ot[H++]=1,ot[H++]=w&255,ot[H++]=w>>8&255,ot[H++]=~w&65535&255,ot[H++]=(~w&65535)>>8&255,ot.set(X.subarray(ht),H),H+=X.length-ht;const mt=a(X,0,X.length);return ot[H++]=mt>>24&255,ot[H++]=mt>>16&255,ot[H++]=mt>>8&255,ot[H++]=mt&255,ot}function j(X,w,V,nt){const ot=X.width,H=X.height;let ht,mt,Ct;const kt=X.data;switch(w){case x.ImageKind.GRAYSCALE_1BPP:mt=0,ht=1,Ct=ot+7>>3;break;case x.ImageKind.RGB_24BPP:mt=2,ht=8,Ct=ot*3;break;case x.ImageKind.RGBA_32BPP:mt=6,ht=8,Ct=ot*4;break;default:throw new Error("invalid format")}const E=new Uint8Array((1+Ct)*H);let i=0,n=0;for(let B=0;B<H;++B)E[i++]=0,E.set(kt.subarray(n,n+Ct),i),n+=Ct,i+=Ct;if(w===x.ImageKind.GRAYSCALE_1BPP&&nt){i=0;for(let B=0;B<H;B++){i++;for(let et=0;et<Ct;et++)E[i++]^=255}}const s=new Uint8Array([ot>>24&255,ot>>16&255,ot>>8&255,ot&255,H>>24&255,H>>16&255,H>>8&255,H&255,ht,mt,0,0,0]),l=P(E),d=y.length+o*3+s.length+l.length,_=new Uint8Array(d);let R=0;return _.set(y,R),R+=y.length,g("IHDR",s,_,R),R+=o+s.length,g("IDATA",l,_,R),R+=o+l.length,g("IEND",new Uint8Array(0),_,R),m(_,"image/png",V)}return function(w,V,nt){const ot=w.kind===void 0?x.ImageKind.GRAYSCALE_1BPP:w.kind;return j(w,ot,V,nt)}}();class N{constructor(){this.fontSizeScale=1,this.fontWeight=at.fontWeight,this.fontSize=0,this.textMatrix=x.IDENTITY_MATRIX,this.fontMatrix=x.FONT_IDENTITY_MATRIX,this.leading=0,this.textRenderingMode=x.TextRenderingMode.FILL,this.textMatrixScale=1,this.x=0,this.y=0,this.lineX=0,this.lineY=0,this.charSpacing=0,this.wordSpacing=0,this.textHScale=1,this.textRise=0,this.fillColor=at.fillColor,this.strokeColor="#000000",this.fillAlpha=1,this.strokeAlpha=1,this.lineWidth=1,this.lineJoin="",this.lineCap="",this.miterLimit=0,this.dashArray=[],this.dashPhase=0,this.dependencies=[],this.activeClipUrl=null,this.clipGroup=null,this.maskId=""}clone(){return Object.create(this)}setCurrentPoint(o,h){this.x=o,this.y=h}}function k(y){let o=[];const h=[];for(const F of y){if(F.fn==="save"){o.push({fnId:92,fn:"group",items:[]}),h.push(o),o=o.at(-1).items;continue}F.fn==="restore"?o=h.pop():o.push(F)}return o}function S(y){if(Number.isInteger(y))return y.toString();const o=y.toFixed(10);let h=o.length-1;if(o[h]!=="0")return o;do h--;while(o[h]==="0");return o.substring(0,o[h]==="."?h:h+1)}function v(y){if(y[4]===0&&y[5]===0){if(y[1]===0&&y[2]===0)return y[0]===1&&y[3]===1?"":`scale(${S(y[0])} ${S(y[3])})`;if(y[0]===y[3]&&y[1]===-y[2]){const o=Math.acos(y[0])*180/Math.PI;return`rotate(${S(o)})`}}else if(y[0]===1&&y[1]===0&&y[2]===0&&y[3]===1)return`translate(${S(y[4])} ${S(y[5])})`;return`matrix(${S(y[0])} ${S(y[1])} ${S(y[2])} ${S(y[3])} ${S(y[4])} ${S(y[5])})`}let f=0,A=0,C=0;class T{constructor(o,h,F=!1){(0,c.deprecated)("The SVG back-end is no longer maintained and *may* be removed in the future."),this.svgFactory=new c.DOMSVGFactory,this.current=new N,this.transformMatrix=x.IDENTITY_MATRIX,this.transformStack=[],this.extraStack=[],this.commonObjs=o,this.objs=h,this.pendingClip=null,this.pendingEOFill=!1,this.embedFonts=!1,this.embeddedFonts=Object.create(null),this.cssStyle=null,this.forceDataSchema=!!F,this._operatorIdMapping=[];for(const g in x.OPS)this._operatorIdMapping[x.OPS[g]]=g}getObject(o,h=null){return typeof o=="string"?o.startsWith("g_")?this.commonObjs.get(o):this.objs.get(o):h}save(){this.transformStack.push(this.transformMatrix);const o=this.current;this.extraStack.push(o),this.current=o.clone()}restore(){this.transformMatrix=this.transformStack.pop(),this.current=this.extraStack.pop(),this.pendingClip=null,this.tgrp=null}group(o){this.save(),this.executeOpTree(o),this.restore()}loadDependencies(o){const h=o.fnArray,F=o.argsArray;for(let g=0,a=h.length;g<a;g++)if(h[g]===x.OPS.dependency)for(const P of F[g]){const b=P.startsWith("g_")?this.commonObjs:this.objs,j=new Promise(X=>{b.get(P,X)});this.current.dependencies.push(j)}return Promise.all(this.current.dependencies)}transform(o,h,F,g,a,P){const b=[o,h,F,g,a,P];this.transformMatrix=x.Util.transform(this.transformMatrix,b),this.tgrp=null}getSVG(o,h){this.viewport=h;const F=this._initialize(h);return this.loadDependencies(o).then(()=>(this.transformMatrix=x.IDENTITY_MATRIX,this.executeOpTree(this.convertOpList(o)),F))}convertOpList(o){const h=this._operatorIdMapping,F=o.argsArray,g=o.fnArray,a=[];for(let P=0,b=g.length;P<b;P++){const j=g[P];a.push({fnId:j,fn:h[j],args:F[P]})}return k(a)}executeOpTree(o){for(const h of o){const F=h.fn,g=h.fnId,a=h.args;switch(g|0){case x.OPS.beginText:this.beginText();break;case x.OPS.dependency:break;case x.OPS.setLeading:this.setLeading(a);break;case x.OPS.setLeadingMoveText:this.setLeadingMoveText(a[0],a[1]);break;case x.OPS.setFont:this.setFont(a);break;case x.OPS.showText:this.showText(a[0]);break;case x.OPS.showSpacedText:this.showText(a[0]);break;case x.OPS.endText:this.endText();break;case x.OPS.moveText:this.moveText(a[0],a[1]);break;case x.OPS.setCharSpacing:this.setCharSpacing(a[0]);break;case x.OPS.setWordSpacing:this.setWordSpacing(a[0]);break;case x.OPS.setHScale:this.setHScale(a[0]);break;case x.OPS.setTextMatrix:this.setTextMatrix(a[0],a[1],a[2],a[3],a[4],a[5]);break;case x.OPS.setTextRise:this.setTextRise(a[0]);break;case x.OPS.setTextRenderingMode:this.setTextRenderingMode(a[0]);break;case x.OPS.setLineWidth:this.setLineWidth(a[0]);break;case x.OPS.setLineJoin:this.setLineJoin(a[0]);break;case x.OPS.setLineCap:this.setLineCap(a[0]);break;case x.OPS.setMiterLimit:this.setMiterLimit(a[0]);break;case x.OPS.setFillRGBColor:this.setFillRGBColor(a[0],a[1],a[2]);break;case x.OPS.setStrokeRGBColor:this.setStrokeRGBColor(a[0],a[1],a[2]);break;case x.OPS.setStrokeColorN:this.setStrokeColorN(a);break;case x.OPS.setFillColorN:this.setFillColorN(a);break;case x.OPS.shadingFill:this.shadingFill(a[0]);break;case x.OPS.setDash:this.setDash(a[0],a[1]);break;case x.OPS.setRenderingIntent:this.setRenderingIntent(a[0]);break;case x.OPS.setFlatness:this.setFlatness(a[0]);break;case x.OPS.setGState:this.setGState(a[0]);break;case x.OPS.fill:this.fill();break;case x.OPS.eoFill:this.eoFill();break;case x.OPS.stroke:this.stroke();break;case x.OPS.fillStroke:this.fillStroke();break;case x.OPS.eoFillStroke:this.eoFillStroke();break;case x.OPS.clip:this.clip("nonzero");break;case x.OPS.eoClip:this.clip("evenodd");break;case x.OPS.paintSolidColorImageMask:this.paintSolidColorImageMask();break;case x.OPS.paintImageXObject:this.paintImageXObject(a[0]);break;case x.OPS.paintInlineImageXObject:this.paintInlineImageXObject(a[0]);break;case x.OPS.paintImageMaskXObject:this.paintImageMaskXObject(a[0]);break;case x.OPS.paintFormXObjectBegin:this.paintFormXObjectBegin(a[0],a[1]);break;case x.OPS.paintFormXObjectEnd:this.paintFormXObjectEnd();break;case x.OPS.closePath:this.closePath();break;case x.OPS.closeStroke:this.closeStroke();break;case x.OPS.closeFillStroke:this.closeFillStroke();break;case x.OPS.closeEOFillStroke:this.closeEOFillStroke();break;case x.OPS.nextLine:this.nextLine();break;case x.OPS.transform:this.transform(a[0],a[1],a[2],a[3],a[4],a[5]);break;case x.OPS.constructPath:this.constructPath(a[0],a[1]);break;case x.OPS.endPath:this.endPath();break;case 92:this.group(h.items);break;default:(0,x.warn)(`Unimplemented operator ${F}`);break}}}setWordSpacing(o){this.current.wordSpacing=o}setCharSpacing(o){this.current.charSpacing=o}nextLine(){this.moveText(0,this.current.leading)}setTextMatrix(o,h,F,g,a,P){const b=this.current;b.textMatrix=b.lineMatrix=[o,h,F,g,a,P],b.textMatrixScale=Math.hypot(o,h),b.x=b.lineX=0,b.y=b.lineY=0,b.xcoords=[],b.ycoords=[],b.tspan=this.svgFactory.createElement("svg:tspan"),b.tspan.setAttributeNS(null,"font-family",b.fontFamily),b.tspan.setAttributeNS(null,"font-size",`${S(b.fontSize)}px`),b.tspan.setAttributeNS(null,"y",S(-b.y)),b.txtElement=this.svgFactory.createElement("svg:text"),b.txtElement.append(b.tspan)}beginText(){const o=this.current;o.x=o.lineX=0,o.y=o.lineY=0,o.textMatrix=x.IDENTITY_MATRIX,o.lineMatrix=x.IDENTITY_MATRIX,o.textMatrixScale=1,o.tspan=this.svgFactory.createElement("svg:tspan"),o.txtElement=this.svgFactory.createElement("svg:text"),o.txtgrp=this.svgFactory.createElement("svg:g"),o.xcoords=[],o.ycoords=[]}moveText(o,h){const F=this.current;F.x=F.lineX+=o,F.y=F.lineY+=h,F.xcoords=[],F.ycoords=[],F.tspan=this.svgFactory.createElement("svg:tspan"),F.tspan.setAttributeNS(null,"font-family",F.fontFamily),F.tspan.setAttributeNS(null,"font-size",`${S(F.fontSize)}px`),F.tspan.setAttributeNS(null,"y",S(-F.y))}showText(o){const h=this.current,F=h.font,g=h.fontSize;if(g===0)return;const a=h.fontSizeScale,P=h.charSpacing,b=h.wordSpacing,j=h.fontDirection,X=h.textHScale*j,w=F.vertical,V=w?1:-1,nt=F.defaultVMetrics,ot=g*h.fontMatrix[0];let H=0;for(const Ct of o){if(Ct===null){H+=j*b;continue}else if(typeof Ct=="number"){H+=V*Ct*g/1e3;continue}const kt=(Ct.isSpace?b:0)+P,E=Ct.fontChar;let i,n,s=Ct.width;if(w){let d;const _=Ct.vmetric||nt;d=Ct.vmetric?_[1]:s*.5,d=-d*ot;const R=_[2]*ot;s=_?-_[0]:s,i=d/a,n=(H+R)/a}else i=H/a,n=0;(Ct.isInFont||F.missingFile)&&(h.xcoords.push(h.x+i),w&&h.ycoords.push(-h.y+n),h.tspan.textContent+=E);const l=w?s*ot-kt*j:s*ot+kt*j;H+=l}h.tspan.setAttributeNS(null,"x",h.xcoords.map(S).join(" ")),w?h.tspan.setAttributeNS(null,"y",h.ycoords.map(S).join(" ")):h.tspan.setAttributeNS(null,"y",S(-h.y)),w?h.y-=H:h.x+=H*X,h.tspan.setAttributeNS(null,"font-family",h.fontFamily),h.tspan.setAttributeNS(null,"font-size",`${S(h.fontSize)}px`),h.fontStyle!==at.fontStyle&&h.tspan.setAttributeNS(null,"font-style",h.fontStyle),h.fontWeight!==at.fontWeight&&h.tspan.setAttributeNS(null,"font-weight",h.fontWeight);const ht=h.textRenderingMode&x.TextRenderingMode.FILL_STROKE_MASK;if(ht===x.TextRenderingMode.FILL||ht===x.TextRenderingMode.FILL_STROKE?(h.fillColor!==at.fillColor&&h.tspan.setAttributeNS(null,"fill",h.fillColor),h.fillAlpha<1&&h.tspan.setAttributeNS(null,"fill-opacity",h.fillAlpha)):h.textRenderingMode===x.TextRenderingMode.ADD_TO_PATH?h.tspan.setAttributeNS(null,"fill","transparent"):h.tspan.setAttributeNS(null,"fill","none"),ht===x.TextRenderingMode.STROKE||ht===x.TextRenderingMode.FILL_STROKE){const Ct=1/(h.textMatrixScale||1);this._setStrokeAttributes(h.tspan,Ct)}let mt=h.textMatrix;h.textRise!==0&&(mt=mt.slice(),mt[5]+=h.textRise),h.txtElement.setAttributeNS(null,"transform",`${v(mt)} scale(${S(X)}, -1)`),h.txtElement.setAttributeNS($,"xml:space","preserve"),h.txtElement.append(h.tspan),h.txtgrp.append(h.txtElement),this._ensureTransformGroup().append(h.txtElement)}setLeadingMoveText(o,h){this.setLeading(-h),this.moveText(o,h)}addFontStyle(o){if(!o.data)throw new Error('addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.');this.cssStyle||(this.cssStyle=this.svgFactory.createElement("svg:style"),this.cssStyle.setAttributeNS(null,"type","text/css"),this.defs.append(this.cssStyle));const h=m(o.data,o.mimetype,this.forceDataSchema);this.cssStyle.textContent+=`@font-face { font-family: "${o.loadedName}"; src: url(${h}); }
`}setFont(o){const h=this.current,F=this.commonObjs.get(o[0]);let g=o[1];h.font=F,this.embedFonts&&!F.missingFile&&!this.embeddedFonts[F.loadedName]&&(this.addFontStyle(F),this.embeddedFonts[F.loadedName]=F),h.fontMatrix=F.fontMatrix||x.FONT_IDENTITY_MATRIX;let a="normal";F.black?a="900":F.bold&&(a="bold");const P=F.italic?"italic":"normal";g<0?(g=-g,h.fontDirection=-1):h.fontDirection=1,h.fontSize=g,h.fontFamily=F.loadedName,h.fontWeight=a,h.fontStyle=P,h.tspan=this.svgFactory.createElement("svg:tspan"),h.tspan.setAttributeNS(null,"y",S(-h.y)),h.xcoords=[],h.ycoords=[]}endText(){var h;const o=this.current;o.textRenderingMode&x.TextRenderingMode.ADD_TO_PATH_FLAG&&((h=o.txtElement)!=null&&h.hasChildNodes())&&(o.element=o.txtElement,this.clip("nonzero"),this.endPath())}setLineWidth(o){o>0&&(this.current.lineWidth=o)}setLineCap(o){this.current.lineCap=U[o]}setLineJoin(o){this.current.lineJoin=M[o]}setMiterLimit(o){this.current.miterLimit=o}setStrokeAlpha(o){this.current.strokeAlpha=o}setStrokeRGBColor(o,h,F){this.current.strokeColor=x.Util.makeHexColor(o,h,F)}setFillAlpha(o){this.current.fillAlpha=o}setFillRGBColor(o,h,F){this.current.fillColor=x.Util.makeHexColor(o,h,F),this.current.tspan=this.svgFactory.createElement("svg:tspan"),this.current.xcoords=[],this.current.ycoords=[]}setStrokeColorN(o){this.current.strokeColor=this._makeColorN_Pattern(o)}setFillColorN(o){this.current.fillColor=this._makeColorN_Pattern(o)}shadingFill(o){const{width:h,height:F}=this.viewport,g=x.Util.inverseTransform(this.transformMatrix),[a,P,b,j]=x.Util.getAxialAlignedBoundingBox([0,0,h,F],g),X=this.svgFactory.createElement("svg:rect");X.setAttributeNS(null,"x",a),X.setAttributeNS(null,"y",P),X.setAttributeNS(null,"width",b-a),X.setAttributeNS(null,"height",j-P),X.setAttributeNS(null,"fill",this._makeShadingPattern(o)),this.current.fillAlpha<1&&X.setAttributeNS(null,"fill-opacity",this.current.fillAlpha),this._ensureTransformGroup().append(X)}_makeColorN_Pattern(o){return o[0]==="TilingPattern"?this._makeTilingPattern(o):this._makeShadingPattern(o)}_makeTilingPattern(o){const h=o[1],F=o[2],g=o[3]||x.IDENTITY_MATRIX,[a,P,b,j]=o[4],X=o[5],w=o[6],V=o[7],nt=`shading${C++}`,[ot,H,ht,mt]=x.Util.normalizeRect([...x.Util.applyTransform([a,P],g),...x.Util.applyTransform([b,j],g)]),[Ct,kt]=x.Util.singularValueDecompose2dScale(g),E=X*Ct,i=w*kt,n=this.svgFactory.createElement("svg:pattern");n.setAttributeNS(null,"id",nt),n.setAttributeNS(null,"patternUnits","userSpaceOnUse"),n.setAttributeNS(null,"width",E),n.setAttributeNS(null,"height",i),n.setAttributeNS(null,"x",`${ot}`),n.setAttributeNS(null,"y",`${H}`);const s=this.svg,l=this.transformMatrix,d=this.current.fillColor,_=this.current.strokeColor,R=this.svgFactory.create(ht-ot,mt-H);if(this.svg=R,this.transformMatrix=g,V===2){const B=x.Util.makeHexColor(...h);this.current.fillColor=B,this.current.strokeColor=B}return this.executeOpTree(this.convertOpList(F)),this.svg=s,this.transformMatrix=l,this.current.fillColor=d,this.current.strokeColor=_,n.append(R.childNodes[0]),this.defs.append(n),`url(#${nt})`}_makeShadingPattern(o){switch(typeof o=="string"&&(o=this.objs.get(o)),o[0]){case"RadialAxial":const h=`shading${C++}`,F=o[3];let g;switch(o[1]){case"axial":const a=o[4],P=o[5];g=this.svgFactory.createElement("svg:linearGradient"),g.setAttributeNS(null,"id",h),g.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),g.setAttributeNS(null,"x1",a[0]),g.setAttributeNS(null,"y1",a[1]),g.setAttributeNS(null,"x2",P[0]),g.setAttributeNS(null,"y2",P[1]);break;case"radial":const b=o[4],j=o[5],X=o[6],w=o[7];g=this.svgFactory.createElement("svg:radialGradient"),g.setAttributeNS(null,"id",h),g.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),g.setAttributeNS(null,"cx",j[0]),g.setAttributeNS(null,"cy",j[1]),g.setAttributeNS(null,"r",w),g.setAttributeNS(null,"fx",b[0]),g.setAttributeNS(null,"fy",b[1]),g.setAttributeNS(null,"fr",X);break;default:throw new Error(`Unknown RadialAxial type: ${o[1]}`)}for(const a of F){const P=this.svgFactory.createElement("svg:stop");P.setAttributeNS(null,"offset",a[0]),P.setAttributeNS(null,"stop-color",a[1]),g.append(P)}return this.defs.append(g),`url(#${h})`;case"Mesh":return(0,x.warn)("Unimplemented pattern Mesh"),null;case"Dummy":return"hotpink";default:throw new Error(`Unknown IR type: ${o[0]}`)}}setDash(o,h){this.current.dashArray=o,this.current.dashPhase=h}constructPath(o,h){const F=this.current;let g=F.x,a=F.y,P=[],b=0;for(const j of o)switch(j|0){case x.OPS.rectangle:g=h[b++],a=h[b++];const X=h[b++],w=h[b++],V=g+X,nt=a+w;P.push("M",S(g),S(a),"L",S(V),S(a),"L",S(V),S(nt),"L",S(g),S(nt),"Z");break;case x.OPS.moveTo:g=h[b++],a=h[b++],P.push("M",S(g),S(a));break;case x.OPS.lineTo:g=h[b++],a=h[b++],P.push("L",S(g),S(a));break;case x.OPS.curveTo:g=h[b+4],a=h[b+5],P.push("C",S(h[b]),S(h[b+1]),S(h[b+2]),S(h[b+3]),S(g),S(a)),b+=6;break;case x.OPS.curveTo2:P.push("C",S(g),S(a),S(h[b]),S(h[b+1]),S(h[b+2]),S(h[b+3])),g=h[b+2],a=h[b+3],b+=4;break;case x.OPS.curveTo3:g=h[b+2],a=h[b+3],P.push("C",S(h[b]),S(h[b+1]),S(g),S(a),S(g),S(a)),b+=4;break;case x.OPS.closePath:P.push("Z");break}P=P.join(" "),F.path&&o.length>0&&o[0]!==x.OPS.rectangle&&o[0]!==x.OPS.moveTo?P=F.path.getAttributeNS(null,"d")+P:(F.path=this.svgFactory.createElement("svg:path"),this._ensureTransformGroup().append(F.path)),F.path.setAttributeNS(null,"d",P),F.path.setAttributeNS(null,"fill","none"),F.element=F.path,F.setCurrentPoint(g,a)}endPath(){const o=this.current;if(o.path=null,!this.pendingClip)return;if(!o.element){this.pendingClip=null;return}const h=`clippath${f++}`,F=this.svgFactory.createElement("svg:clipPath");F.setAttributeNS(null,"id",h),F.setAttributeNS(null,"transform",v(this.transformMatrix));const g=o.element.cloneNode(!0);if(this.pendingClip==="evenodd"?g.setAttributeNS(null,"clip-rule","evenodd"):g.setAttributeNS(null,"clip-rule","nonzero"),this.pendingClip=null,F.append(g),this.defs.append(F),o.activeClipUrl){o.clipGroup=null;for(const a of this.extraStack)a.clipGroup=null;F.setAttributeNS(null,"clip-path",o.activeClipUrl)}o.activeClipUrl=`url(#${h})`,this.tgrp=null}clip(o){this.pendingClip=o}closePath(){const o=this.current;if(o.path){const h=`${o.path.getAttributeNS(null,"d")}Z`;o.path.setAttributeNS(null,"d",h)}}setLeading(o){this.current.leading=-o}setTextRise(o){this.current.textRise=o}setTextRenderingMode(o){this.current.textRenderingMode=o}setHScale(o){this.current.textHScale=o/100}setRenderingIntent(o){}setFlatness(o){}setGState(o){for(const[h,F]of o)switch(h){case"LW":this.setLineWidth(F);break;case"LC":this.setLineCap(F);break;case"LJ":this.setLineJoin(F);break;case"ML":this.setMiterLimit(F);break;case"D":this.setDash(F[0],F[1]);break;case"RI":this.setRenderingIntent(F);break;case"FL":this.setFlatness(F);break;case"Font":this.setFont(F);break;case"CA":this.setStrokeAlpha(F);break;case"ca":this.setFillAlpha(F);break;default:(0,x.warn)(`Unimplemented graphic state operator ${h}`);break}}fill(){const o=this.current;o.element&&(o.element.setAttributeNS(null,"fill",o.fillColor),o.element.setAttributeNS(null,"fill-opacity",o.fillAlpha),this.endPath())}stroke(){const o=this.current;o.element&&(this._setStrokeAttributes(o.element),o.element.setAttributeNS(null,"fill","none"),this.endPath())}_setStrokeAttributes(o,h=1){const F=this.current;let g=F.dashArray;h!==1&&g.length>0&&(g=g.map(function(a){return h*a})),o.setAttributeNS(null,"stroke",F.strokeColor),o.setAttributeNS(null,"stroke-opacity",F.strokeAlpha),o.setAttributeNS(null,"stroke-miterlimit",S(F.miterLimit)),o.setAttributeNS(null,"stroke-linecap",F.lineCap),o.setAttributeNS(null,"stroke-linejoin",F.lineJoin),o.setAttributeNS(null,"stroke-width",S(h*F.lineWidth)+"px"),o.setAttributeNS(null,"stroke-dasharray",g.map(S).join(" ")),o.setAttributeNS(null,"stroke-dashoffset",S(h*F.dashPhase)+"px")}eoFill(){var o;(o=this.current.element)==null||o.setAttributeNS(null,"fill-rule","evenodd"),this.fill()}fillStroke(){this.stroke(),this.fill()}eoFillStroke(){var o;(o=this.current.element)==null||o.setAttributeNS(null,"fill-rule","evenodd"),this.fillStroke()}closeStroke(){this.closePath(),this.stroke()}closeFillStroke(){this.closePath(),this.fillStroke()}closeEOFillStroke(){this.closePath(),this.eoFillStroke()}paintSolidColorImageMask(){const o=this.svgFactory.createElement("svg:rect");o.setAttributeNS(null,"x","0"),o.setAttributeNS(null,"y","0"),o.setAttributeNS(null,"width","1px"),o.setAttributeNS(null,"height","1px"),o.setAttributeNS(null,"fill",this.current.fillColor),this._ensureTransformGroup().append(o)}paintImageXObject(o){const h=this.getObject(o);if(!h){(0,x.warn)(`Dependent image with object ID ${o} is not ready yet`);return}this.paintInlineImageXObject(h)}paintInlineImageXObject(o,h){const F=o.width,g=o.height,a=O(o,this.forceDataSchema,!!h),P=this.svgFactory.createElement("svg:rect");P.setAttributeNS(null,"x","0"),P.setAttributeNS(null,"y","0"),P.setAttributeNS(null,"width",S(F)),P.setAttributeNS(null,"height",S(g)),this.current.element=P,this.clip("nonzero");const b=this.svgFactory.createElement("svg:image");b.setAttributeNS(gt,"xlink:href",a),b.setAttributeNS(null,"x","0"),b.setAttributeNS(null,"y",S(-g)),b.setAttributeNS(null,"width",S(F)+"px"),b.setAttributeNS(null,"height",S(g)+"px"),b.setAttributeNS(null,"transform",`scale(${S(1/F)} ${S(-1/g)})`),h?h.append(b):this._ensureTransformGroup().append(b)}paintImageMaskXObject(o){const h=this.getObject(o.data,o);if(h.bitmap){(0,x.warn)("paintImageMaskXObject: ImageBitmap support is not implemented, ensure that the `isOffscreenCanvasSupported` API parameter is disabled.");return}const F=this.current,g=h.width,a=h.height,P=F.fillColor;F.maskId=`mask${A++}`;const b=this.svgFactory.createElement("svg:mask");b.setAttributeNS(null,"id",F.maskId);const j=this.svgFactory.createElement("svg:rect");j.setAttributeNS(null,"x","0"),j.setAttributeNS(null,"y","0"),j.setAttributeNS(null,"width",S(g)),j.setAttributeNS(null,"height",S(a)),j.setAttributeNS(null,"fill",P),j.setAttributeNS(null,"mask",`url(#${F.maskId})`),this.defs.append(b),this._ensureTransformGroup().append(j),this.paintInlineImageXObject(h,b)}paintFormXObjectBegin(o,h){if(Array.isArray(o)&&o.length===6&&this.transform(o[0],o[1],o[2],o[3],o[4],o[5]),h){const F=h[2]-h[0],g=h[3]-h[1],a=this.svgFactory.createElement("svg:rect");a.setAttributeNS(null,"x",h[0]),a.setAttributeNS(null,"y",h[1]),a.setAttributeNS(null,"width",S(F)),a.setAttributeNS(null,"height",S(g)),this.current.element=a,this.clip("nonzero"),this.endPath()}}paintFormXObjectEnd(){}_initialize(o){const h=this.svgFactory.create(o.width,o.height),F=this.svgFactory.createElement("svg:defs");h.append(F),this.defs=F;const g=this.svgFactory.createElement("svg:g");return g.setAttributeNS(null,"transform",v(o.transform)),h.append(g),this.svg=g,h}_ensureClipGroup(){if(!this.current.clipGroup){const o=this.svgFactory.createElement("svg:g");o.setAttributeNS(null,"clip-path",this.current.activeClipUrl),this.svg.append(o),this.current.clipGroup=o}return this.current.clipGroup}_ensureTransformGroup(){return this.tgrp||(this.tgrp=this.svgFactory.createElement("svg:g"),this.tgrp.setAttributeNS(null,"transform",v(this.transformMatrix)),this.current.activeClipUrl?this._ensureClipGroup().append(this.tgrp):this.svg.append(this.tgrp)),this.tgrp}}u.SVGGraphics=T},(ct,u)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.XfaText=void 0;class it{static textContent(x){const at=[],$={items:at,styles:Object.create(null)};function gt(U){var O;if(!U)return;let M=null;const m=U.name;if(m==="#text")M=U.value;else if(it.shouldBuildText(m))(O=U==null?void 0:U.attributes)!=null&&O.textContent?M=U.attributes.textContent:U.value&&(M=U.value);else return;if(M!==null&&at.push({str:M}),!!U.children)for(const N of U.children)gt(N)}return gt(x),$}static shouldBuildText(x){return!(x==="textarea"||x==="input"||x==="option"||x==="select")}}u.XfaText=it},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.TextLayerRenderTask=void 0,u.renderTextLayer=v,u.updateTextLayer=f;var c=it(1),x=it(6);const at=1e5,$=30,gt=.8,U=new Map;function M(A,C){let T;if(C&&c.FeatureTest.isOffscreenCanvasSupported)T=new OffscreenCanvas(A,A).getContext("2d",{alpha:!1});else{const y=document.createElement("canvas");y.width=y.height=A,T=y.getContext("2d",{alpha:!1})}return T}function m(A,C){const T=U.get(A);if(T)return T;const y=M($,C);y.font=`${$}px ${A}`;const o=y.measureText("");let h=o.fontBoundingBoxAscent,F=Math.abs(o.fontBoundingBoxDescent);if(h){const a=h/(h+F);return U.set(A,a),y.canvas.width=y.canvas.height=0,a}y.strokeStyle="red",y.clearRect(0,0,$,$),y.strokeText("g",0,0);let g=y.getImageData(0,0,$,$).data;F=0;for(let a=g.length-1-3;a>=0;a-=4)if(g[a]>0){F=Math.ceil(a/4/$);break}y.clearRect(0,0,$,$),y.strokeText("A",0,$),g=y.getImageData(0,0,$,$).data,h=0;for(let a=0,P=g.length;a<P;a+=4)if(g[a]>0){h=$-Math.floor(a/4/$);break}if(y.canvas.width=y.canvas.height=0,h){const a=h/(h+F);return U.set(A,a),a}return U.set(A,gt),gt}function O(A,C,T){const y=document.createElement("span"),o={angle:0,canvasWidth:0,hasText:C.str!=="",hasEOL:C.hasEOL,fontSize:0};A._textDivs.push(y);const h=c.Util.transform(A._transform,C.transform);let F=Math.atan2(h[1],h[0]);const g=T[C.fontName];g.vertical&&(F+=Math.PI/2);const a=Math.hypot(h[2],h[3]),P=a*m(g.fontFamily,A._isOffscreenCanvasSupported);let b,j;F===0?(b=h[4],j=h[5]-P):(b=h[4]+P*Math.sin(F),j=h[5]-P*Math.cos(F));const X="calc(var(--scale-factor)*",w=y.style;A._container===A._rootContainer?(w.left=`${(100*b/A._pageWidth).toFixed(2)}%`,w.top=`${(100*j/A._pageHeight).toFixed(2)}%`):(w.left=`${X}${b.toFixed(2)}px)`,w.top=`${X}${j.toFixed(2)}px)`),w.fontSize=`${X}${a.toFixed(2)}px)`,w.fontFamily=g.fontFamily,o.fontSize=a,y.setAttribute("role","presentation"),y.textContent=C.str,y.dir=C.dir,A._fontInspectorEnabled&&(y.dataset.fontName=C.fontName),F!==0&&(o.angle=F*(180/Math.PI));let V=!1;if(C.str.length>1)V=!0;else if(C.str!==" "&&C.transform[0]!==C.transform[3]){const nt=Math.abs(C.transform[0]),ot=Math.abs(C.transform[3]);nt!==ot&&Math.max(nt,ot)/Math.min(nt,ot)>1.5&&(V=!0)}V&&(o.canvasWidth=g.vertical?C.height:C.width),A._textDivProperties.set(y,o),A._isReadableStream&&A._layoutText(y)}function N(A){const{div:C,scale:T,properties:y,ctx:o,prevFontSize:h,prevFontFamily:F}=A,{style:g}=C;let a="";if(y.canvasWidth!==0&&y.hasText){const{fontFamily:P}=g,{canvasWidth:b,fontSize:j}=y;(h!==j||F!==P)&&(o.font=`${j*T}px ${P}`,A.prevFontSize=j,A.prevFontFamily=P);const{width:X}=o.measureText(C.textContent);X>0&&(a=`scaleX(${b*T/X})`)}y.angle!==0&&(a=`rotate(${y.angle}deg) ${a}`),a.length>0&&(g.transform=a)}function k(A){if(A._canceled)return;const C=A._textDivs,T=A._capability;if(C.length>at){T.resolve();return}if(!A._isReadableStream)for(const o of C)A._layoutText(o);T.resolve()}class S{constructor({textContentSource:C,container:T,viewport:y,textDivs:o,textDivProperties:h,textContentItemsStr:F,isOffscreenCanvasSupported:g}){var X;this._textContentSource=C,this._isReadableStream=C instanceof ReadableStream,this._container=this._rootContainer=T,this._textDivs=o||[],this._textContentItemsStr=F||[],this._isOffscreenCanvasSupported=g,this._fontInspectorEnabled=!!((X=globalThis.FontInspector)!=null&&X.enabled),this._reader=null,this._textDivProperties=h||new WeakMap,this._canceled=!1,this._capability=new c.PromiseCapability,this._layoutTextParams={prevFontSize:null,prevFontFamily:null,div:null,scale:y.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:M(0,g)};const{pageWidth:a,pageHeight:P,pageX:b,pageY:j}=y.rawDims;this._transform=[1,0,0,-1,-b,j+P],this._pageWidth=a,this._pageHeight=P,(0,x.setLayerDimensions)(T,y),this._capability.promise.finally(()=>{this._layoutTextParams=null}).catch(()=>{})}get promise(){return this._capability.promise}cancel(){this._canceled=!0,this._reader&&(this._reader.cancel(new c.AbortException("TextLayer task cancelled.")).catch(()=>{}),this._reader=null),this._capability.reject(new c.AbortException("TextLayer task cancelled."))}_processItems(C,T){for(const y of C){if(y.str===void 0){if(y.type==="beginMarkedContentProps"||y.type==="beginMarkedContent"){const o=this._container;this._container=document.createElement("span"),this._container.classList.add("markedContent"),y.id!==null&&this._container.setAttribute("id",`${y.id}`),o.append(this._container)}else y.type==="endMarkedContent"&&(this._container=this._container.parentNode);continue}this._textContentItemsStr.push(y.str),O(this,y,T)}}_layoutText(C){const T=this._layoutTextParams.properties=this._textDivProperties.get(C);if(this._layoutTextParams.div=C,N(this._layoutTextParams),T.hasText&&this._container.append(C),T.hasEOL){const y=document.createElement("br");y.setAttribute("role","presentation"),this._container.append(y)}}_render(){const C=new c.PromiseCapability;let T=Object.create(null);if(this._isReadableStream){const y=()=>{this._reader.read().then(({value:o,done:h})=>{if(h){C.resolve();return}Object.assign(T,o.styles),this._processItems(o.items,T),y()},C.reject)};this._reader=this._textContentSource.getReader(),y()}else if(this._textContentSource){const{items:y,styles:o}=this._textContentSource;this._processItems(y,o),C.resolve()}else throw new Error('No "textContentSource" parameter specified.');C.promise.then(()=>{T=null,k(this)},this._capability.reject)}}u.TextLayerRenderTask=S;function v(A){!A.textContentSource&&(A.textContent||A.textContentStream)&&((0,x.deprecated)("The TextLayerRender `textContent`/`textContentStream` parameters will be removed in the future, please use `textContentSource` instead."),A.textContentSource=A.textContent||A.textContentStream);const{container:C,viewport:T}=A,y=getComputedStyle(C),o=y.getPropertyValue("visibility"),h=parseFloat(y.getPropertyValue("--scale-factor"));o==="visible"&&(!h||Math.abs(h-T.scale)>1e-5)&&console.error("The `--scale-factor` CSS-variable must be set, to the same value as `viewport.scale`, either on the `container`-element itself or higher up in the DOM.");const F=new S(A);return F._render(),F}function f({container:A,viewport:C,textDivs:T,textDivProperties:y,isOffscreenCanvasSupported:o,mustRotate:h=!0,mustRescale:F=!0}){if(h&&(0,x.setLayerDimensions)(A,{rotation:C.rotation}),F){const g=M(0,o),P={prevFontSize:null,prevFontFamily:null,div:null,scale:C.scale*(globalThis.devicePixelRatio||1),properties:null,ctx:g};for(const b of T)P.properties=y.get(b),P.div=b,N(P)}}},(ct,u,it)=>{var m,O,N,k,S,v,f,A,C,T,y,ii,h,Fe,g,si,P,ni;Object.defineProperty(u,"__esModule",{value:!0}),u.AnnotationEditorLayer=void 0;var c=it(1),x=it(4),at=it(28),$=it(33),gt=it(6),U=it(34);const j=class j{constructor({uiManager:w,pageIndex:V,div:nt,accessibilityManager:ot,annotationLayer:H,viewport:ht,l10n:mt}){L(this,y);L(this,h);L(this,g);L(this,P);L(this,m,void 0);L(this,O,!1);L(this,N,null);L(this,k,this.pointerup.bind(this));L(this,S,this.pointerdown.bind(this));L(this,v,new Map);L(this,f,!1);L(this,A,!1);L(this,C,!1);L(this,T,void 0);const Ct=[at.FreeTextEditor,$.InkEditor,U.StampEditor];if(!j._initialized){j._initialized=!0;for(const kt of Ct)kt.initialize(mt)}w.registerEditorTypes(Ct),tt(this,T,w),this.pageIndex=V,this.div=nt,tt(this,m,ot),tt(this,N,H),this.viewport=ht,t(this,T).addLayer(this)}get isEmpty(){return t(this,v).size===0}updateToolbar(w){t(this,T).updateToolbar(w)}updateMode(w=t(this,T).getMode()){G(this,P,ni).call(this),w===c.AnnotationEditorType.INK?(this.addInkEditorIfNeeded(!1),this.disableClick()):this.enableClick(),w!==c.AnnotationEditorType.NONE&&(this.div.classList.toggle("freeTextEditing",w===c.AnnotationEditorType.FREETEXT),this.div.classList.toggle("inkEditing",w===c.AnnotationEditorType.INK),this.div.classList.toggle("stampEditing",w===c.AnnotationEditorType.STAMP),this.div.hidden=!1)}addInkEditorIfNeeded(w){if(!w&&t(this,T).getMode()!==c.AnnotationEditorType.INK)return;if(!w){for(const nt of t(this,v).values())if(nt.isEmpty()){nt.setInBackground();return}}G(this,h,Fe).call(this,{offsetX:0,offsetY:0},!1).setInBackground()}setEditingState(w){t(this,T).setEditingState(w)}addCommands(w){t(this,T).addCommands(w)}enable(){this.div.style.pointerEvents="auto";const w=new Set;for(const nt of t(this,v).values())nt.enableEditing(),nt.annotationElementId&&w.add(nt.annotationElementId);if(!t(this,N))return;const V=t(this,N).getEditableAnnotations();for(const nt of V){if(nt.hide(),t(this,T).isDeletedAnnotationElement(nt.data.id)||w.has(nt.data.id))continue;const ot=this.deserialize(nt);ot&&(this.addOrRebuild(ot),ot.enableEditing())}}disable(){var V;tt(this,C,!0),this.div.style.pointerEvents="none";const w=new Set;for(const nt of t(this,v).values()){if(nt.disableEditing(),!nt.annotationElementId||nt.serialize()!==null){w.add(nt.annotationElementId);continue}(V=this.getEditableAnnotation(nt.annotationElementId))==null||V.show(),nt.remove()}if(t(this,N)){const nt=t(this,N).getEditableAnnotations();for(const ot of nt){const{id:H}=ot.data;w.has(H)||t(this,T).isDeletedAnnotationElement(H)||ot.show()}}G(this,P,ni).call(this),this.isEmpty&&(this.div.hidden=!0),tt(this,C,!1)}getEditableAnnotation(w){var V;return((V=t(this,N))==null?void 0:V.getEditableAnnotation(w))||null}setActiveEditor(w){t(this,T).getActive()!==w&&t(this,T).setActiveEditor(w)}enableClick(){this.div.addEventListener("pointerdown",t(this,S)),this.div.addEventListener("pointerup",t(this,k))}disableClick(){this.div.removeEventListener("pointerdown",t(this,S)),this.div.removeEventListener("pointerup",t(this,k))}attach(w){t(this,v).set(w.id,w);const{annotationElementId:V}=w;V&&t(this,T).isDeletedAnnotationElement(V)&&t(this,T).removeDeletedAnnotationElement(w)}detach(w){var V;t(this,v).delete(w.id),(V=t(this,m))==null||V.removePointerInTextLayer(w.contentDiv),!t(this,C)&&w.annotationElementId&&t(this,T).addDeletedAnnotationElement(w)}remove(w){this.detach(w),t(this,T).removeEditor(w),w.div.contains(document.activeElement)&&setTimeout(()=>{t(this,T).focusMainContainer()},0),w.div.remove(),w.isAttachedToDOM=!1,t(this,A)||this.addInkEditorIfNeeded(!1)}changeParent(w){var V;w.parent!==this&&(w.annotationElementId&&(t(this,T).addDeletedAnnotationElement(w.annotationElementId),x.AnnotationEditor.deleteAnnotationElement(w),w.annotationElementId=null),this.attach(w),(V=w.parent)==null||V.detach(w),w.setParent(this),w.div&&w.isAttachedToDOM&&(w.div.remove(),this.div.append(w.div)))}add(w){if(this.changeParent(w),t(this,T).addEditor(w),this.attach(w),!w.isAttachedToDOM){const V=w.render();this.div.append(V),w.isAttachedToDOM=!0}w.fixAndSetPosition(),w.onceAdded(),t(this,T).addToAnnotationStorage(w)}moveEditorInDOM(w){var nt;if(!w.isAttachedToDOM)return;const{activeElement:V}=document;w.div.contains(V)&&(w._focusEventsAllowed=!1,setTimeout(()=>{w.div.contains(document.activeElement)?w._focusEventsAllowed=!0:(w.div.addEventListener("focusin",()=>{w._focusEventsAllowed=!0},{once:!0}),V.focus())},0)),w._structTreeParentId=(nt=t(this,m))==null?void 0:nt.moveElementInDOM(this.div,w.div,w.contentDiv,!0)}addOrRebuild(w){w.needsToBeRebuilt()?w.rebuild():this.add(w)}addUndoableEditor(w){const V=()=>w._uiManager.rebuild(w),nt=()=>{w.remove()};this.addCommands({cmd:V,undo:nt,mustExec:!1})}getNextId(){return t(this,T).getId()}pasteEditor(w,V){t(this,T).updateToolbar(w),t(this,T).updateMode(w);const{offsetX:nt,offsetY:ot}=G(this,g,si).call(this),H=this.getNextId(),ht=G(this,y,ii).call(this,{parent:this,id:H,x:nt,y:ot,uiManager:t(this,T),isCentered:!0,...V});ht&&this.add(ht)}deserialize(w){switch(w.annotationType??w.annotationEditorType){case c.AnnotationEditorType.FREETEXT:return at.FreeTextEditor.deserialize(w,this,t(this,T));case c.AnnotationEditorType.INK:return $.InkEditor.deserialize(w,this,t(this,T));case c.AnnotationEditorType.STAMP:return U.StampEditor.deserialize(w,this,t(this,T))}return null}addNewEditor(){G(this,h,Fe).call(this,G(this,g,si).call(this),!0)}setSelected(w){t(this,T).setSelected(w)}toggleSelected(w){t(this,T).toggleSelected(w)}isSelected(w){return t(this,T).isSelected(w)}unselect(w){t(this,T).unselect(w)}pointerup(w){const{isMac:V}=c.FeatureTest.platform;if(!(w.button!==0||w.ctrlKey&&V)&&w.target===this.div&&t(this,f)){if(tt(this,f,!1),!t(this,O)){tt(this,O,!0);return}if(t(this,T).getMode()===c.AnnotationEditorType.STAMP){t(this,T).unselectAll();return}G(this,h,Fe).call(this,w,!1)}}pointerdown(w){if(t(this,f)){tt(this,f,!1);return}const{isMac:V}=c.FeatureTest.platform;if(w.button!==0||w.ctrlKey&&V||w.target!==this.div)return;tt(this,f,!0);const nt=t(this,T).getActive();tt(this,O,!nt||nt.isEmpty())}findNewParent(w,V,nt){const ot=t(this,T).findParent(V,nt);return ot===null||ot===this?!1:(ot.changeParent(w),!0)}destroy(){var w,V;((w=t(this,T).getActive())==null?void 0:w.parent)===this&&(t(this,T).commitOrRemove(),t(this,T).setActiveEditor(null));for(const nt of t(this,v).values())(V=t(this,m))==null||V.removePointerInTextLayer(nt.contentDiv),nt.setParent(null),nt.isAttachedToDOM=!1,nt.div.remove();this.div=null,t(this,v).clear(),t(this,T).removeLayer(this)}render({viewport:w}){this.viewport=w,(0,gt.setLayerDimensions)(this.div,w);for(const V of t(this,T).getEditors(this.pageIndex))this.add(V);this.updateMode()}update({viewport:w}){t(this,T).commitOrRemove(),this.viewport=w,(0,gt.setLayerDimensions)(this.div,{rotation:w.rotation}),this.updateMode()}get pageDimensions(){const{pageWidth:w,pageHeight:V}=this.viewport.rawDims;return[w,V]}};m=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakMap,S=new WeakMap,v=new WeakMap,f=new WeakMap,A=new WeakMap,C=new WeakMap,T=new WeakMap,y=new WeakSet,ii=function(w){switch(t(this,T).getMode()){case c.AnnotationEditorType.FREETEXT:return new at.FreeTextEditor(w);case c.AnnotationEditorType.INK:return new $.InkEditor(w);case c.AnnotationEditorType.STAMP:return new U.StampEditor(w)}return null},h=new WeakSet,Fe=function(w,V){const nt=this.getNextId(),ot=G(this,y,ii).call(this,{parent:this,id:nt,x:w.offsetX,y:w.offsetY,uiManager:t(this,T),isCentered:V});return ot&&this.add(ot),ot},g=new WeakSet,si=function(){const{x:w,y:V,width:nt,height:ot}=this.div.getBoundingClientRect(),H=Math.max(0,w),ht=Math.max(0,V),mt=Math.min(window.innerWidth,w+nt),Ct=Math.min(window.innerHeight,V+ot),kt=(H+mt)/2-w,E=(ht+Ct)/2-V,[i,n]=this.viewport.rotation%180===0?[kt,E]:[E,kt];return{offsetX:i,offsetY:n}},P=new WeakSet,ni=function(){tt(this,A,!0);for(const w of t(this,v).values())w.isEmpty()&&w.remove();tt(this,A,!1)},ie(j,"_initialized",!1);let M=j;u.AnnotationEditorLayer=M},(ct,u,it)=>{var U,M,m,O,N,k,S,v,f,A,Mi,T,Ri,o,Di,F,ve,a,ri,b,Ii,X,ai;Object.defineProperty(u,"__esModule",{value:!0}),u.FreeTextEditor=void 0;var c=it(1),x=it(5),at=it(4),$=it(29);const V=class V extends at.AnnotationEditor{constructor(H){super({...H,name:"freeTextEditor"});L(this,A);L(this,T);L(this,o);L(this,F);L(this,a);L(this,b);L(this,X);L(this,U,this.editorDivBlur.bind(this));L(this,M,this.editorDivFocus.bind(this));L(this,m,this.editorDivInput.bind(this));L(this,O,this.editorDivKeydown.bind(this));L(this,N,void 0);L(this,k,"");L(this,S,`${this.id}-editor`);L(this,v,void 0);L(this,f,null);tt(this,N,H.color||V._defaultColor||at.AnnotationEditor._defaultLineColor),tt(this,v,H.fontSize||V._defaultFontSize)}static get _keyboardManager(){const H=V.prototype,ht=kt=>kt.isEmpty(),mt=x.AnnotationEditorUIManager.TRANSLATE_SMALL,Ct=x.AnnotationEditorUIManager.TRANSLATE_BIG;return(0,c.shadow)(this,"_keyboardManager",new x.KeyboardManager([[["ctrl+s","mac+meta+s","ctrl+p","mac+meta+p"],H.commitOrRemove,{bubbles:!0}],[["ctrl+Enter","mac+meta+Enter","Escape","mac+Escape"],H.commitOrRemove],[["ArrowLeft","mac+ArrowLeft"],H._translateEmpty,{args:[-mt,0],checker:ht}],[["ctrl+ArrowLeft","mac+shift+ArrowLeft"],H._translateEmpty,{args:[-Ct,0],checker:ht}],[["ArrowRight","mac+ArrowRight"],H._translateEmpty,{args:[mt,0],checker:ht}],[["ctrl+ArrowRight","mac+shift+ArrowRight"],H._translateEmpty,{args:[Ct,0],checker:ht}],[["ArrowUp","mac+ArrowUp"],H._translateEmpty,{args:[0,-mt],checker:ht}],[["ctrl+ArrowUp","mac+shift+ArrowUp"],H._translateEmpty,{args:[0,-Ct],checker:ht}],[["ArrowDown","mac+ArrowDown"],H._translateEmpty,{args:[0,mt],checker:ht}],[["ctrl+ArrowDown","mac+shift+ArrowDown"],H._translateEmpty,{args:[0,Ct],checker:ht}]]))}static initialize(H){at.AnnotationEditor.initialize(H,{strings:["free_text2_default_content","editor_free_text2_aria_label"]});const ht=getComputedStyle(document.documentElement);this._internalPadding=parseFloat(ht.getPropertyValue("--freetext-padding"))}static updateDefaultParams(H,ht){switch(H){case c.AnnotationEditorParamsType.FREETEXT_SIZE:V._defaultFontSize=ht;break;case c.AnnotationEditorParamsType.FREETEXT_COLOR:V._defaultColor=ht;break}}updateParams(H,ht){switch(H){case c.AnnotationEditorParamsType.FREETEXT_SIZE:G(this,A,Mi).call(this,ht);break;case c.AnnotationEditorParamsType.FREETEXT_COLOR:G(this,T,Ri).call(this,ht);break}}static get defaultPropertiesToUpdate(){return[[c.AnnotationEditorParamsType.FREETEXT_SIZE,V._defaultFontSize],[c.AnnotationEditorParamsType.FREETEXT_COLOR,V._defaultColor||at.AnnotationEditor._defaultLineColor]]}get propertiesToUpdate(){return[[c.AnnotationEditorParamsType.FREETEXT_SIZE,t(this,v)],[c.AnnotationEditorParamsType.FREETEXT_COLOR,t(this,N)]]}_translateEmpty(H,ht){this._uiManager.translateSelectedEditors(H,ht,!0)}getInitialTranslation(){const H=this.parentScale;return[-V._internalPadding*H,-(V._internalPadding+t(this,v))*H]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.isAttachedToDOM||this.parent.add(this)))}enableEditMode(){this.isInEditMode()||(this.parent.setEditingState(!1),this.parent.updateToolbar(c.AnnotationEditorType.FREETEXT),super.enableEditMode(),this.overlayDiv.classList.remove("enabled"),this.editorDiv.contentEditable=!0,this._isDraggable=!1,this.div.removeAttribute("aria-activedescendant"),this.editorDiv.addEventListener("keydown",t(this,O)),this.editorDiv.addEventListener("focus",t(this,M)),this.editorDiv.addEventListener("blur",t(this,U)),this.editorDiv.addEventListener("input",t(this,m)))}disableEditMode(){this.isInEditMode()&&(this.parent.setEditingState(!0),super.disableEditMode(),this.overlayDiv.classList.add("enabled"),this.editorDiv.contentEditable=!1,this.div.setAttribute("aria-activedescendant",t(this,S)),this._isDraggable=!0,this.editorDiv.removeEventListener("keydown",t(this,O)),this.editorDiv.removeEventListener("focus",t(this,M)),this.editorDiv.removeEventListener("blur",t(this,U)),this.editorDiv.removeEventListener("input",t(this,m)),this.div.focus({preventScroll:!0}),this.isEditing=!1,this.parent.div.classList.add("freeTextEditing"))}focusin(H){this._focusEventsAllowed&&(super.focusin(H),H.target!==this.editorDiv&&this.editorDiv.focus())}onceAdded(){var H;if(this.width){G(this,X,ai).call(this);return}this.enableEditMode(),this.editorDiv.focus(),(H=this._initialOptions)!=null&&H.isCentered&&this.center(),this._initialOptions=null}isEmpty(){return!this.editorDiv||this.editorDiv.innerText.trim()===""}remove(){this.isEditing=!1,this.parent&&(this.parent.setEditingState(!0),this.parent.div.classList.add("freeTextEditing")),super.remove()}commit(){if(!this.isInEditMode())return;super.commit(),this.disableEditMode();const H=t(this,k),ht=tt(this,k,G(this,o,Di).call(this).trimEnd());if(H===ht)return;const mt=Ct=>{if(tt(this,k,Ct),!Ct){this.remove();return}G(this,a,ri).call(this),this._uiManager.rebuild(this),G(this,F,ve).call(this)};this.addCommands({cmd:()=>{mt(ht)},undo:()=>{mt(H)},mustExec:!1}),G(this,F,ve).call(this)}shouldGetKeyboardEvents(){return this.isInEditMode()}enterInEditMode(){this.enableEditMode(),this.editorDiv.focus()}dblclick(H){this.enterInEditMode()}keydown(H){H.target===this.div&&H.key==="Enter"&&(this.enterInEditMode(),H.preventDefault())}editorDivKeydown(H){V._keyboardManager.exec(this,H)}editorDivFocus(H){this.isEditing=!0}editorDivBlur(H){this.isEditing=!1}editorDivInput(H){this.parent.div.classList.toggle("freeTextEditing",this.isEmpty())}disableEditing(){this.editorDiv.setAttribute("role","comment"),this.editorDiv.removeAttribute("aria-multiline")}enableEditing(){this.editorDiv.setAttribute("role","textbox"),this.editorDiv.setAttribute("aria-multiline",!0)}render(){if(this.div)return this.div;let H,ht;this.width&&(H=this.x,ht=this.y),super.render(),this.editorDiv=document.createElement("div"),this.editorDiv.className="internal",this.editorDiv.setAttribute("id",t(this,S)),this.enableEditing(),at.AnnotationEditor._l10nPromise.get("editor_free_text2_aria_label").then(Ct=>{var kt;return(kt=this.editorDiv)==null?void 0:kt.setAttribute("aria-label",Ct)}),at.AnnotationEditor._l10nPromise.get("free_text2_default_content").then(Ct=>{var kt;return(kt=this.editorDiv)==null?void 0:kt.setAttribute("default-content",Ct)}),this.editorDiv.contentEditable=!0;const{style:mt}=this.editorDiv;if(mt.fontSize=`calc(${t(this,v)}px * var(--scale-factor))`,mt.color=t(this,N),this.div.append(this.editorDiv),this.overlayDiv=document.createElement("div"),this.overlayDiv.classList.add("overlay","enabled"),this.div.append(this.overlayDiv),(0,x.bindEvents)(this,this.div,["dblclick","keydown"]),this.width){const[Ct,kt]=this.parentDimensions;if(this.annotationElementId){const{position:E}=t(this,f);let[i,n]=this.getInitialTranslation();[i,n]=this.pageTranslationToScreen(i,n);const[s,l]=this.pageDimensions,[d,_]=this.pageTranslation;let R,B;switch(this.rotation){case 0:R=H+(E[0]-d)/s,B=ht+this.height-(E[1]-_)/l;break;case 90:R=H+(E[0]-d)/s,B=ht-(E[1]-_)/l,[i,n]=[n,-i];break;case 180:R=H-this.width+(E[0]-d)/s,B=ht-(E[1]-_)/l,[i,n]=[-i,-n];break;case 270:R=H+(E[0]-d-this.height*l)/s,B=ht+(E[1]-_-this.width*s)/l,[i,n]=[-n,i];break}this.setAt(R*Ct,B*kt,i,n)}else this.setAt(H*Ct,ht*kt,this.width*Ct,this.height*kt);G(this,a,ri).call(this),this._isDraggable=!0,this.editorDiv.contentEditable=!1}else this._isDraggable=!1,this.editorDiv.contentEditable=!0;return this.div}get contentDiv(){return this.editorDiv}static deserialize(H,ht,mt){let Ct=null;if(H instanceof $.FreeTextAnnotationElement){const{data:{defaultAppearanceData:{fontSize:E,fontColor:i},rect:n,rotation:s,id:l},textContent:d,textPosition:_,parent:{page:{pageNumber:R}}}=H;if(!d||d.length===0)return null;Ct=H={annotationType:c.AnnotationEditorType.FREETEXT,color:Array.from(i),fontSize:E,value:d.join(`
`),position:_,pageIndex:R-1,rect:n,rotation:s,id:l,deleted:!1}}const kt=super.deserialize(H,ht,mt);return tt(kt,v,H.fontSize),tt(kt,N,c.Util.makeHexColor(...H.color)),tt(kt,k,H.value),kt.annotationElementId=H.id||null,tt(kt,f,Ct),kt}serialize(H=!1){if(this.isEmpty())return null;if(this.deleted)return{pageIndex:this.pageIndex,id:this.annotationElementId,deleted:!0};const ht=V._internalPadding*this.parentScale,mt=this.getRect(ht,ht),Ct=at.AnnotationEditor._colorManager.convert(this.isAttachedToDOM?getComputedStyle(this.editorDiv).color:t(this,N)),kt={annotationType:c.AnnotationEditorType.FREETEXT,color:Ct,fontSize:t(this,v),value:t(this,k),pageIndex:this.pageIndex,rect:mt,rotation:this.rotation,structTreeParentId:this._structTreeParentId};return H?kt:this.annotationElementId&&!G(this,b,Ii).call(this,kt)?null:(kt.id=this.annotationElementId,kt)}};U=new WeakMap,M=new WeakMap,m=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakMap,S=new WeakMap,v=new WeakMap,f=new WeakMap,A=new WeakSet,Mi=function(H){const ht=Ct=>{this.editorDiv.style.fontSize=`calc(${Ct}px * var(--scale-factor))`,this.translate(0,-(Ct-t(this,v))*this.parentScale),tt(this,v,Ct),G(this,F,ve).call(this)},mt=t(this,v);this.addCommands({cmd:()=>{ht(H)},undo:()=>{ht(mt)},mustExec:!0,type:c.AnnotationEditorParamsType.FREETEXT_SIZE,overwriteIfSameType:!0,keepUndo:!0})},T=new WeakSet,Ri=function(H){const ht=t(this,N);this.addCommands({cmd:()=>{tt(this,N,this.editorDiv.style.color=H)},undo:()=>{tt(this,N,this.editorDiv.style.color=ht)},mustExec:!0,type:c.AnnotationEditorParamsType.FREETEXT_COLOR,overwriteIfSameType:!0,keepUndo:!0})},o=new WeakSet,Di=function(){const H=this.editorDiv.getElementsByTagName("div");if(H.length===0)return this.editorDiv.innerText;const ht=[];for(const mt of H)ht.push(mt.innerText.replace(/\r\n?|\n/,""));return ht.join(`
`)},F=new WeakSet,ve=function(){const[H,ht]=this.parentDimensions;let mt;if(this.isAttachedToDOM)mt=this.div.getBoundingClientRect();else{const{currentLayer:Ct,div:kt}=this,E=kt.style.display;kt.style.display="hidden",Ct.div.append(this.div),mt=kt.getBoundingClientRect(),kt.remove(),kt.style.display=E}this.rotation%180===this.parentRotation%180?(this.width=mt.width/H,this.height=mt.height/ht):(this.width=mt.height/H,this.height=mt.width/ht),this.fixAndSetPosition()},a=new WeakSet,ri=function(){if(this.editorDiv.replaceChildren(),!!t(this,k))for(const H of t(this,k).split(`
`)){const ht=document.createElement("div");ht.append(H?document.createTextNode(H):document.createElement("br")),this.editorDiv.append(ht)}},b=new WeakSet,Ii=function(H){const{value:ht,fontSize:mt,color:Ct,rect:kt,pageIndex:E}=t(this,f);return H.value!==ht||H.fontSize!==mt||H.rect.some((i,n)=>Math.abs(i-kt[n])>=1)||H.color.some((i,n)=>i!==Ct[n])||H.pageIndex!==E},X=new WeakSet,ai=function(H=!1){if(!this.annotationElementId)return;if(G(this,F,ve).call(this),!H&&(this.width===0||this.height===0)){setTimeout(()=>G(this,X,ai).call(this,!0),0);return}const ht=V._internalPadding*this.parentScale;t(this,f).rect=this.getRect(ht,ht)},ie(V,"_freeTextDefaultContent",""),ie(V,"_internalPadding",0),ie(V,"_defaultColor",null),ie(V,"_defaultFontSize",10),ie(V,"_type","freetext");let gt=V;u.FreeTextEditor=gt},(ct,u,it)=>{var n,l,he,_,Li,B,et,Z,rt,dt,vt,ft,Mt,Ut,Et,It,pt,J,Q,ut,wt,Tt,Wt,Oi,Ht,Me,Vt,oi,Yt,li,K,z,_t,yt,ee,te,Y,ci,Ot,Pt,Nt,Bt,Ni,At,hi;Object.defineProperty(u,"__esModule",{value:!0}),u.StampAnnotationElement=u.InkAnnotationElement=u.FreeTextAnnotationElement=u.AnnotationLayer=void 0;var c=it(1),x=it(6),at=it(3),$=it(30),gt=it(31),U=it(32);const M=1e3,m=9,O=new WeakSet;function N(Lt){return{width:Lt[2]-Lt[0],height:Lt[3]-Lt[1]}}class k{static create(D){switch(D.data.annotationType){case c.AnnotationType.LINK:return new v(D);case c.AnnotationType.TEXT:return new f(D);case c.AnnotationType.WIDGET:switch(D.data.fieldType){case"Tx":return new C(D);case"Btn":return D.data.radioButton?new o(D):D.data.checkBox?new y(D):new h(D);case"Ch":return new F(D);case"Sig":return new T(D)}return new A(D);case c.AnnotationType.POPUP:return new g(D);case c.AnnotationType.FREETEXT:return new P(D);case c.AnnotationType.LINE:return new b(D);case c.AnnotationType.SQUARE:return new j(D);case c.AnnotationType.CIRCLE:return new X(D);case c.AnnotationType.POLYLINE:return new w(D);case c.AnnotationType.CARET:return new nt(D);case c.AnnotationType.INK:return new ot(D);case c.AnnotationType.POLYGON:return new V(D);case c.AnnotationType.HIGHLIGHT:return new H(D);case c.AnnotationType.UNDERLINE:return new ht(D);case c.AnnotationType.SQUIGGLY:return new mt(D);case c.AnnotationType.STRIKEOUT:return new Ct(D);case c.AnnotationType.STAMP:return new kt(D);case c.AnnotationType.FILEATTACHMENT:return new E(D);default:return new S(D)}}}const s=class s{constructor(D,{isRenderable:e=!1,ignoreBorder:p=!1,createQuadrilaterals:I=!1}={}){L(this,n,!1);this.isRenderable=e,this.data=D.data,this.layer=D.layer,this.linkService=D.linkService,this.downloadManager=D.downloadManager,this.imageResourcesPath=D.imageResourcesPath,this.renderForms=D.renderForms,this.svgFactory=D.svgFactory,this.annotationStorage=D.annotationStorage,this.enableScripting=D.enableScripting,this.hasJSActions=D.hasJSActions,this._fieldObjects=D.fieldObjects,this.parent=D.parent,e&&(this.container=this._createContainer(p)),I&&this._createQuadrilaterals()}static _hasPopupData({titleObj:D,contentsObj:e,richText:p}){return!!(D!=null&&D.str||e!=null&&e.str||p!=null&&p.str)}get hasPopupData(){return s._hasPopupData(this.data)}_createContainer(D){const{data:e,parent:{page:p,viewport:I}}=this,W=document.createElement("section");W.setAttribute("data-annotation-id",e.id),this instanceof A||(W.tabIndex=M),W.style.zIndex=this.parent.zIndex++,this.data.popupRef&&W.setAttribute("aria-haspopup","dialog"),e.noRotate&&W.classList.add("norotate");const{pageWidth:q,pageHeight:st,pageX:bt,pageY:Ft}=I.rawDims;if(!e.rect||this instanceof g){const{rotation:jt}=e;return!e.hasOwnCanvas&&jt!==0&&this.setRotation(jt,W),W}const{width:xt,height:Xt}=N(e.rect),Rt=c.Util.normalizeRect([e.rect[0],p.view[3]-e.rect[1]+p.view[1],e.rect[2],p.view[3]-e.rect[3]+p.view[1]]);if(!D&&e.borderStyle.width>0){W.style.borderWidth=`${e.borderStyle.width}px`;const jt=e.borderStyle.horizontalCornerRadius,qt=e.borderStyle.verticalCornerRadius;if(jt>0||qt>0){const Zt=`calc(${jt}px * var(--scale-factor)) / calc(${qt}px * var(--scale-factor))`;W.style.borderRadius=Zt}else if(this instanceof o){const Zt=`calc(${xt}px * var(--scale-factor)) / calc(${Xt}px * var(--scale-factor))`;W.style.borderRadius=Zt}switch(e.borderStyle.style){case c.AnnotationBorderStyleType.SOLID:W.style.borderStyle="solid";break;case c.AnnotationBorderStyleType.DASHED:W.style.borderStyle="dashed";break;case c.AnnotationBorderStyleType.BEVELED:(0,c.warn)("Unimplemented border style: beveled");break;case c.AnnotationBorderStyleType.INSET:(0,c.warn)("Unimplemented border style: inset");break;case c.AnnotationBorderStyleType.UNDERLINE:W.style.borderBottomStyle="solid";break}const Jt=e.borderColor||null;Jt?(tt(this,n,!0),W.style.borderColor=c.Util.makeHexColor(Jt[0]|0,Jt[1]|0,Jt[2]|0)):W.style.borderWidth=0}W.style.left=`${100*(Rt[0]-bt)/q}%`,W.style.top=`${100*(Rt[1]-Ft)/st}%`;const{rotation:Dt}=e;return e.hasOwnCanvas||Dt===0?(W.style.width=`${100*xt/q}%`,W.style.height=`${100*Xt/st}%`):this.setRotation(Dt,W),W}setRotation(D,e=this.container){if(!this.data.rect)return;const{pageWidth:p,pageHeight:I}=this.parent.viewport.rawDims,{width:W,height:q}=N(this.data.rect);let st,bt;D%180===0?(st=100*W/p,bt=100*q/I):(st=100*q/p,bt=100*W/I),e.style.width=`${st}%`,e.style.height=`${bt}%`,e.setAttribute("data-main-rotation",(360-D)%360)}get _commonActions(){const D=(e,p,I)=>{const W=I.detail[e],q=W[0],st=W.slice(1);I.target.style[p]=$.ColorConverters[`${q}_HTML`](st),this.annotationStorage.setValue(this.data.id,{[p]:$.ColorConverters[`${q}_rgb`](st)})};return(0,c.shadow)(this,"_commonActions",{display:e=>{const{display:p}=e.detail,I=p%2===1;this.container.style.visibility=I?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noView:I,noPrint:p===1||p===2})},print:e=>{this.annotationStorage.setValue(this.data.id,{noPrint:!e.detail.print})},hidden:e=>{const{hidden:p}=e.detail;this.container.style.visibility=p?"hidden":"visible",this.annotationStorage.setValue(this.data.id,{noPrint:p,noView:p})},focus:e=>{setTimeout(()=>e.target.focus({preventScroll:!1}),0)},userName:e=>{e.target.title=e.detail.userName},readonly:e=>{e.target.disabled=e.detail.readonly},required:e=>{this._setRequired(e.target,e.detail.required)},bgColor:e=>{D("bgColor","backgroundColor",e)},fillColor:e=>{D("fillColor","backgroundColor",e)},fgColor:e=>{D("fgColor","color",e)},textColor:e=>{D("textColor","color",e)},borderColor:e=>{D("borderColor","borderColor",e)},strokeColor:e=>{D("strokeColor","borderColor",e)},rotation:e=>{const p=e.detail.rotation;this.setRotation(p),this.annotationStorage.setValue(this.data.id,{rotation:p})}})}_dispatchEventFromSandbox(D,e){const p=this._commonActions;for(const I of Object.keys(e.detail)){const W=D[I]||p[I];W==null||W(e)}}_setDefaultPropertiesFromJS(D){if(!this.enableScripting)return;const e=this.annotationStorage.getRawValue(this.data.id);if(!e)return;const p=this._commonActions;for(const[I,W]of Object.entries(e)){const q=p[I];if(q){const st={detail:{[I]:W},target:D};q(st),delete e[I]}}}_createQuadrilaterals(){if(!this.container)return;const{quadPoints:D}=this.data;if(!D)return;const[e,p,I,W]=this.data.rect;if(D.length===1){const[,{x:qt,y:Jt},{x:Zt,y:ne}]=D[0];if(I===qt&&W===Jt&&e===Zt&&p===ne)return}const{style:q}=this.container;let st;if(t(this,n)){const{borderColor:qt,borderWidth:Jt}=q;q.borderWidth=0,st=["url('data:image/svg+xml;utf8,",'<svg xmlns="http://www.w3.org/2000/svg"',' preserveAspectRatio="none" viewBox="0 0 1 1">',`<g fill="transparent" stroke="${qt}" stroke-width="${Jt}">`],this.container.classList.add("hasBorder")}const bt=I-e,Ft=W-p,{svgFactory:xt}=this,Xt=xt.createElement("svg");Xt.classList.add("quadrilateralsContainer"),Xt.setAttribute("width",0),Xt.setAttribute("height",0);const Rt=xt.createElement("defs");Xt.append(Rt);const Dt=xt.createElement("clipPath"),jt=`clippath_${this.data.id}`;Dt.setAttribute("id",jt),Dt.setAttribute("clipPathUnits","objectBoundingBox"),Rt.append(Dt);for(const[,{x:qt,y:Jt},{x:Zt,y:ne}]of D){const se=xt.createElement("rect"),re=(Zt-e)/bt,le=(W-Jt)/Ft,ce=(qt-Zt)/bt,Ai=(Jt-ne)/Ft;se.setAttribute("x",re),se.setAttribute("y",le),se.setAttribute("width",ce),se.setAttribute("height",Ai),Dt.append(se),st==null||st.push(`<rect vector-effect="non-scaling-stroke" x="${re}" y="${le}" width="${ce}" height="${Ai}"/>`)}t(this,n)&&(st.push("</g></svg>')"),q.backgroundImage=st.join("")),this.container.append(Xt),this.container.style.clipPath=`url(#${jt})`}_createPopup(){const{container:D,data:e}=this;D.setAttribute("aria-haspopup","dialog");const p=new g({data:{color:e.color,titleObj:e.titleObj,modificationDate:e.modificationDate,contentsObj:e.contentsObj,richText:e.richText,parentRect:e.rect,borderStyle:0,id:`popup_${e.id}`,rotation:e.rotation},parent:this.parent,elements:[this]});this.parent.div.append(p.render())}render(){(0,c.unreachable)("Abstract method `AnnotationElement.render` called")}_getElementsByName(D,e=null){const p=[];if(this._fieldObjects){const I=this._fieldObjects[D];if(I)for(const{page:W,id:q,exportValues:st}of I){if(W===-1||q===e)continue;const bt=typeof st=="string"?st:null,Ft=document.querySelector(`[data-element-id="${q}"]`);if(Ft&&!O.has(Ft)){(0,c.warn)(`_getElementsByName - element not allowed: ${q}`);continue}p.push({id:q,exportValue:bt,domElement:Ft})}return p}for(const I of document.getElementsByName(D)){const{exportValue:W}=I,q=I.getAttribute("data-element-id");q!==e&&O.has(I)&&p.push({id:q,exportValue:W,domElement:I})}return p}show(){var D;this.container&&(this.container.hidden=!1),(D=this.popup)==null||D.maybeShow()}hide(){var D;this.container&&(this.container.hidden=!0),(D=this.popup)==null||D.forceHide()}getElementsToTriggerPopup(){return this.container}addHighlightArea(){const D=this.getElementsToTriggerPopup();if(Array.isArray(D))for(const e of D)e.classList.add("highlightArea");else D.classList.add("highlightArea")}_editOnDoubleClick(){const{annotationEditorType:D,data:{id:e}}=this;this.container.addEventListener("dblclick",()=>{var p;(p=this.linkService.eventBus)==null||p.dispatch("switchannotationeditormode",{source:this,mode:D,editId:e})})}};n=new WeakMap;let S=s;class v extends S{constructor(e,p=null){super(e,{isRenderable:!0,ignoreBorder:!!(p!=null&&p.ignoreBorder),createQuadrilaterals:!0});L(this,l);L(this,_);this.isTooltipOnly=e.data.isTooltipOnly}render(){const{data:e,linkService:p}=this,I=document.createElement("a");I.setAttribute("data-element-id",e.id);let W=!1;return e.url?(p.addLinkAttributes(I,e.url,e.newWindow),W=!0):e.action?(this._bindNamedAction(I,e.action),W=!0):e.attachment?(this._bindAttachment(I,e.attachment),W=!0):e.setOCGState?(G(this,_,Li).call(this,I,e.setOCGState),W=!0):e.dest?(this._bindLink(I,e.dest),W=!0):(e.actions&&(e.actions.Action||e.actions["Mouse Up"]||e.actions["Mouse Down"])&&this.enableScripting&&this.hasJSActions&&(this._bindJSAction(I,e),W=!0),e.resetForm?(this._bindResetFormAction(I,e.resetForm),W=!0):this.isTooltipOnly&&!W&&(this._bindLink(I,""),W=!0)),this.container.classList.add("linkAnnotation"),W&&this.container.append(I),this.container}_bindLink(e,p){e.href=this.linkService.getDestinationHash(p),e.onclick=()=>(p&&this.linkService.goToDestination(p),!1),(p||p==="")&&G(this,l,he).call(this)}_bindNamedAction(e,p){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeNamedAction(p),!1),G(this,l,he).call(this)}_bindAttachment(e,p){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>{var I;return(I=this.downloadManager)==null||I.openOrDownloadData(this.container,p.content,p.filename),!1},G(this,l,he).call(this)}_bindJSAction(e,p){e.href=this.linkService.getAnchorUrl("");const I=new Map([["Action","onclick"],["Mouse Up","onmouseup"],["Mouse Down","onmousedown"]]);for(const W of Object.keys(p.actions)){const q=I.get(W);q&&(e[q]=()=>{var st;return(st=this.linkService.eventBus)==null||st.dispatch("dispatcheventinsandbox",{source:this,detail:{id:p.id,name:W}}),!1})}e.onclick||(e.onclick=()=>!1),G(this,l,he).call(this)}_bindResetFormAction(e,p){const I=e.onclick;if(I||(e.href=this.linkService.getAnchorUrl("")),G(this,l,he).call(this),!this._fieldObjects){(0,c.warn)('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'),I||(e.onclick=()=>!1);return}e.onclick=()=>{var Xt;I==null||I();const{fields:W,refs:q,include:st}=p,bt=[];if(W.length!==0||q.length!==0){const Rt=new Set(q);for(const Dt of W){const jt=this._fieldObjects[Dt]||[];for(const{id:qt}of jt)Rt.add(qt)}for(const Dt of Object.values(this._fieldObjects))for(const jt of Dt)Rt.has(jt.id)===st&&bt.push(jt)}else for(const Rt of Object.values(this._fieldObjects))bt.push(...Rt);const Ft=this.annotationStorage,xt=[];for(const Rt of bt){const{id:Dt}=Rt;switch(xt.push(Dt),Rt.type){case"text":{const qt=Rt.defaultValue||"";Ft.setValue(Dt,{value:qt});break}case"checkbox":case"radiobutton":{const qt=Rt.defaultValue===Rt.exportValues;Ft.setValue(Dt,{value:qt});break}case"combobox":case"listbox":{const qt=Rt.defaultValue||"";Ft.setValue(Dt,{value:qt});break}default:continue}const jt=document.querySelector(`[data-element-id="${Dt}"]`);if(jt){if(!O.has(jt)){(0,c.warn)(`_bindResetFormAction - element not allowed: ${Dt}`);continue}}else continue;jt.dispatchEvent(new Event("resetform"))}return this.enableScripting&&((Xt=this.linkService.eventBus)==null||Xt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:"app",ids:xt,name:"ResetForm"}})),!1}}}l=new WeakSet,he=function(){this.container.setAttribute("data-internal-link","")},_=new WeakSet,Li=function(e,p){e.href=this.linkService.getAnchorUrl(""),e.onclick=()=>(this.linkService.executeSetOCGState(p),!1),G(this,l,he).call(this)};class f extends S{constructor(D){super(D,{isRenderable:!0})}render(){this.container.classList.add("textAnnotation");const D=document.createElement("img");return D.src=this.imageResourcesPath+"annotation-"+this.data.name.toLowerCase()+".svg",D.alt="[{{type}} Annotation]",D.dataset.l10nId="text_annotation_type",D.dataset.l10nArgs=JSON.stringify({type:this.data.name}),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.append(D),this.container}}class A extends S{render(){return this.data.alternativeText&&(this.container.title=this.data.alternativeText),this.container}showElementAndHideCanvas(D){var e;this.data.hasOwnCanvas&&(((e=D.previousSibling)==null?void 0:e.nodeName)==="CANVAS"&&(D.previousSibling.hidden=!0),D.hidden=!1)}_getKeyModifier(D){const{isWin:e,isMac:p}=c.FeatureTest.platform;return e&&D.ctrlKey||p&&D.metaKey}_setEventListener(D,e,p,I,W){p.includes("mouse")?D.addEventListener(p,q=>{var st;(st=this.linkService.eventBus)==null||st.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:I,value:W(q),shift:q.shiftKey,modifier:this._getKeyModifier(q)}})}):D.addEventListener(p,q=>{var st;if(p==="blur"){if(!e.focused||!q.relatedTarget)return;e.focused=!1}else if(p==="focus"){if(e.focused)return;e.focused=!0}W&&((st=this.linkService.eventBus)==null||st.dispatch("dispatcheventinsandbox",{source:this,detail:{id:this.data.id,name:I,value:W(q)}}))})}_setEventListeners(D,e,p,I){var W,q,st;for(const[bt,Ft]of p)(Ft==="Action"||(W=this.data.actions)!=null&&W[Ft])&&((Ft==="Focus"||Ft==="Blur")&&(e||(e={focused:!1})),this._setEventListener(D,e,bt,Ft,I),Ft==="Focus"&&!((q=this.data.actions)!=null&&q.Blur)?this._setEventListener(D,e,"blur","Blur",null):Ft==="Blur"&&!((st=this.data.actions)!=null&&st.Focus)&&this._setEventListener(D,e,"focus","Focus",null))}_setBackgroundColor(D){const e=this.data.backgroundColor||null;D.style.backgroundColor=e===null?"transparent":c.Util.makeHexColor(e[0],e[1],e[2])}_setTextStyle(D){const e=["left","center","right"],{fontColor:p}=this.data.defaultAppearanceData,I=this.data.defaultAppearanceData.fontSize||m,W=D.style;let q;const st=2,bt=Ft=>Math.round(10*Ft)/10;if(this.data.multiLine){const Ft=Math.abs(this.data.rect[3]-this.data.rect[1]-st),xt=Math.round(Ft/(c.LINE_FACTOR*I))||1,Xt=Ft/xt;q=Math.min(I,bt(Xt/c.LINE_FACTOR))}else{const Ft=Math.abs(this.data.rect[3]-this.data.rect[1]-st);q=Math.min(I,bt(Ft/c.LINE_FACTOR))}W.fontSize=`calc(${q}px * var(--scale-factor))`,W.color=c.Util.makeHexColor(p[0],p[1],p[2]),this.data.textAlignment!==null&&(W.textAlign=e[this.data.textAlignment])}_setRequired(D,e){e?D.setAttribute("required",!0):D.removeAttribute("required"),D.setAttribute("aria-required",e)}}class C extends A{constructor(D){const e=D.renderForms||!D.data.hasAppearance&&!!D.data.fieldValue;super(D,{isRenderable:e})}setPropertyOnSiblings(D,e,p,I){const W=this.annotationStorage;for(const q of this._getElementsByName(D.name,D.id))q.domElement&&(q.domElement[e]=p),W.setValue(q.id,{[I]:p})}render(){var I,W;const D=this.annotationStorage,e=this.data.id;this.container.classList.add("textWidgetAnnotation");let p=null;if(this.renderForms){const q=D.getValue(e,{value:this.data.fieldValue});let st=q.value||"";const bt=D.getValue(e,{charLimit:this.data.maxLen}).charLimit;bt&&st.length>bt&&(st=st.slice(0,bt));let Ft=q.formattedValue||((I=this.data.textContent)==null?void 0:I.join(`
`))||null;Ft&&this.data.comb&&(Ft=Ft.replaceAll(/\s+/g,""));const xt={userValue:st,formattedValue:Ft,lastCommittedValue:null,commitKey:1,focused:!1};this.data.multiLine?(p=document.createElement("textarea"),p.textContent=Ft??st,this.data.doNotScroll&&(p.style.overflowY="hidden")):(p=document.createElement("input"),p.type="text",p.setAttribute("value",Ft??st),this.data.doNotScroll&&(p.style.overflowX="hidden")),this.data.hasOwnCanvas&&(p.hidden=!0),O.add(p),p.setAttribute("data-element-id",e),p.disabled=this.data.readOnly,p.name=this.data.fieldName,p.tabIndex=M,this._setRequired(p,this.data.required),bt&&(p.maxLength=bt),p.addEventListener("input",Rt=>{D.setValue(e,{value:Rt.target.value}),this.setPropertyOnSiblings(p,"value",Rt.target.value,"value"),xt.formattedValue=null}),p.addEventListener("resetform",Rt=>{const Dt=this.data.defaultFieldValue??"";p.value=xt.userValue=Dt,xt.formattedValue=null});let Xt=Rt=>{const{formattedValue:Dt}=xt;Dt!=null&&(Rt.target.value=Dt),Rt.target.scrollLeft=0};if(this.enableScripting&&this.hasJSActions){p.addEventListener("focus",Dt=>{if(xt.focused)return;const{target:jt}=Dt;xt.userValue&&(jt.value=xt.userValue),xt.lastCommittedValue=jt.value,xt.commitKey=1,xt.focused=!0}),p.addEventListener("updatefromsandbox",Dt=>{this.showElementAndHideCanvas(Dt.target);const jt={value(qt){xt.userValue=qt.detail.value??"",D.setValue(e,{value:xt.userValue.toString()}),qt.target.value=xt.userValue},formattedValue(qt){const{formattedValue:Jt}=qt.detail;xt.formattedValue=Jt,Jt!=null&&qt.target!==document.activeElement&&(qt.target.value=Jt),D.setValue(e,{formattedValue:Jt})},selRange(qt){qt.target.setSelectionRange(...qt.detail.selRange)},charLimit:qt=>{var se;const{charLimit:Jt}=qt.detail,{target:Zt}=qt;if(Jt===0){Zt.removeAttribute("maxLength");return}Zt.setAttribute("maxLength",Jt);let ne=xt.userValue;!ne||ne.length<=Jt||(ne=ne.slice(0,Jt),Zt.value=xt.userValue=ne,D.setValue(e,{value:ne}),(se=this.linkService.eventBus)==null||se.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:ne,willCommit:!0,commitKey:1,selStart:Zt.selectionStart,selEnd:Zt.selectionEnd}}))}};this._dispatchEventFromSandbox(jt,Dt)}),p.addEventListener("keydown",Dt=>{var Jt;xt.commitKey=1;let jt=-1;if(Dt.key==="Escape"?jt=0:Dt.key==="Enter"&&!this.data.multiLine?jt=2:Dt.key==="Tab"&&(xt.commitKey=3),jt===-1)return;const{value:qt}=Dt.target;xt.lastCommittedValue!==qt&&(xt.lastCommittedValue=qt,xt.userValue=qt,(Jt=this.linkService.eventBus)==null||Jt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:qt,willCommit:!0,commitKey:jt,selStart:Dt.target.selectionStart,selEnd:Dt.target.selectionEnd}}))});const Rt=Xt;Xt=null,p.addEventListener("blur",Dt=>{var qt;if(!xt.focused||!Dt.relatedTarget)return;xt.focused=!1;const{value:jt}=Dt.target;xt.userValue=jt,xt.lastCommittedValue!==jt&&((qt=this.linkService.eventBus)==null||qt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:jt,willCommit:!0,commitKey:xt.commitKey,selStart:Dt.target.selectionStart,selEnd:Dt.target.selectionEnd}})),Rt(Dt)}),(W=this.data.actions)!=null&&W.Keystroke&&p.addEventListener("beforeinput",Dt=>{var le;xt.lastCommittedValue=null;const{data:jt,target:qt}=Dt,{value:Jt,selectionStart:Zt,selectionEnd:ne}=qt;let se=Zt,re=ne;switch(Dt.inputType){case"deleteWordBackward":{const ce=Jt.substring(0,Zt).match(/\w*[^\w]*$/);ce&&(se-=ce[0].length);break}case"deleteWordForward":{const ce=Jt.substring(Zt).match(/^[^\w]*\w*/);ce&&(re+=ce[0].length);break}case"deleteContentBackward":Zt===ne&&(se-=1);break;case"deleteContentForward":Zt===ne&&(re+=1);break}Dt.preventDefault(),(le=this.linkService.eventBus)==null||le.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:Jt,change:jt||"",willCommit:!1,selStart:se,selEnd:re}})}),this._setEventListeners(p,xt,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],Dt=>Dt.target.value)}if(Xt&&p.addEventListener("blur",Xt),this.data.comb){const Dt=(this.data.rect[2]-this.data.rect[0])/bt;p.classList.add("comb"),p.style.letterSpacing=`calc(${Dt}px * var(--scale-factor) - 1ch)`}}else p=document.createElement("div"),p.textContent=this.data.fieldValue,p.style.verticalAlign="middle",p.style.display="table-cell";return this._setTextStyle(p),this._setBackgroundColor(p),this._setDefaultPropertiesFromJS(p),this.container.append(p),this.container}}class T extends A{constructor(D){super(D,{isRenderable:!!D.data.hasOwnCanvas})}}class y extends A{constructor(D){super(D,{isRenderable:D.renderForms})}render(){const D=this.annotationStorage,e=this.data,p=e.id;let I=D.getValue(p,{value:e.exportValue===e.fieldValue}).value;typeof I=="string"&&(I=I!=="Off",D.setValue(p,{value:I})),this.container.classList.add("buttonWidgetAnnotation","checkBox");const W=document.createElement("input");return O.add(W),W.setAttribute("data-element-id",p),W.disabled=e.readOnly,this._setRequired(W,this.data.required),W.type="checkbox",W.name=e.fieldName,I&&W.setAttribute("checked",!0),W.setAttribute("exportValue",e.exportValue),W.tabIndex=M,W.addEventListener("change",q=>{const{name:st,checked:bt}=q.target;for(const Ft of this._getElementsByName(st,p)){const xt=bt&&Ft.exportValue===e.exportValue;Ft.domElement&&(Ft.domElement.checked=xt),D.setValue(Ft.id,{value:xt})}D.setValue(p,{value:bt})}),W.addEventListener("resetform",q=>{const st=e.defaultFieldValue||"Off";q.target.checked=st===e.exportValue}),this.enableScripting&&this.hasJSActions&&(W.addEventListener("updatefromsandbox",q=>{const st={value(bt){bt.target.checked=bt.detail.value!=="Off",D.setValue(p,{value:bt.target.checked})}};this._dispatchEventFromSandbox(st,q)}),this._setEventListeners(W,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],q=>q.target.checked)),this._setBackgroundColor(W),this._setDefaultPropertiesFromJS(W),this.container.append(W),this.container}}class o extends A{constructor(D){super(D,{isRenderable:D.renderForms})}render(){this.container.classList.add("buttonWidgetAnnotation","radioButton");const D=this.annotationStorage,e=this.data,p=e.id;let I=D.getValue(p,{value:e.fieldValue===e.buttonValue}).value;typeof I=="string"&&(I=I!==e.buttonValue,D.setValue(p,{value:I}));const W=document.createElement("input");if(O.add(W),W.setAttribute("data-element-id",p),W.disabled=e.readOnly,this._setRequired(W,this.data.required),W.type="radio",W.name=e.fieldName,I&&W.setAttribute("checked",!0),W.tabIndex=M,W.addEventListener("change",q=>{const{name:st,checked:bt}=q.target;for(const Ft of this._getElementsByName(st,p))D.setValue(Ft.id,{value:!1});D.setValue(p,{value:bt})}),W.addEventListener("resetform",q=>{const st=e.defaultFieldValue;q.target.checked=st!=null&&st===e.buttonValue}),this.enableScripting&&this.hasJSActions){const q=e.buttonValue;W.addEventListener("updatefromsandbox",st=>{const bt={value:Ft=>{const xt=q===Ft.detail.value;for(const Xt of this._getElementsByName(Ft.target.name)){const Rt=xt&&Xt.id===p;Xt.domElement&&(Xt.domElement.checked=Rt),D.setValue(Xt.id,{value:Rt})}}};this._dispatchEventFromSandbox(bt,st)}),this._setEventListeners(W,null,[["change","Validate"],["change","Action"],["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"]],st=>st.target.checked)}return this._setBackgroundColor(W),this._setDefaultPropertiesFromJS(W),this.container.append(W),this.container}}class h extends v{constructor(D){super(D,{ignoreBorder:D.data.hasAppearance})}render(){const D=super.render();D.classList.add("buttonWidgetAnnotation","pushButton"),this.data.alternativeText&&(D.title=this.data.alternativeText);const e=D.lastChild;return this.enableScripting&&this.hasJSActions&&e&&(this._setDefaultPropertiesFromJS(e),e.addEventListener("updatefromsandbox",p=>{this._dispatchEventFromSandbox({},p)})),D}}class F extends A{constructor(D){super(D,{isRenderable:D.renderForms})}render(){this.container.classList.add("choiceWidgetAnnotation");const D=this.annotationStorage,e=this.data.id,p=D.getValue(e,{value:this.data.fieldValue}),I=document.createElement("select");O.add(I),I.setAttribute("data-element-id",e),I.disabled=this.data.readOnly,this._setRequired(I,this.data.required),I.name=this.data.fieldName,I.tabIndex=M;let W=this.data.combo&&this.data.options.length>0;this.data.combo||(I.size=this.data.options.length,this.data.multiSelect&&(I.multiple=!0)),I.addEventListener("resetform",xt=>{const Xt=this.data.defaultFieldValue;for(const Rt of I.options)Rt.selected=Rt.value===Xt});for(const xt of this.data.options){const Xt=document.createElement("option");Xt.textContent=xt.displayValue,Xt.value=xt.exportValue,p.value.includes(xt.exportValue)&&(Xt.setAttribute("selected",!0),W=!1),I.append(Xt)}let q=null;if(W){const xt=document.createElement("option");xt.value=" ",xt.setAttribute("hidden",!0),xt.setAttribute("selected",!0),I.prepend(xt),q=()=>{xt.remove(),I.removeEventListener("input",q),q=null},I.addEventListener("input",q)}const st=xt=>{const Xt=xt?"value":"textContent",{options:Rt,multiple:Dt}=I;return Dt?Array.prototype.filter.call(Rt,jt=>jt.selected).map(jt=>jt[Xt]):Rt.selectedIndex===-1?null:Rt[Rt.selectedIndex][Xt]};let bt=st(!1);const Ft=xt=>{const Xt=xt.target.options;return Array.prototype.map.call(Xt,Rt=>({displayValue:Rt.textContent,exportValue:Rt.value}))};return this.enableScripting&&this.hasJSActions?(I.addEventListener("updatefromsandbox",xt=>{const Xt={value(Rt){q==null||q();const Dt=Rt.detail.value,jt=new Set(Array.isArray(Dt)?Dt:[Dt]);for(const qt of I.options)qt.selected=jt.has(qt.value);D.setValue(e,{value:st(!0)}),bt=st(!1)},multipleSelection(Rt){I.multiple=!0},remove(Rt){const Dt=I.options,jt=Rt.detail.remove;Dt[jt].selected=!1,I.remove(jt),Dt.length>0&&Array.prototype.findIndex.call(Dt,Jt=>Jt.selected)===-1&&(Dt[0].selected=!0),D.setValue(e,{value:st(!0),items:Ft(Rt)}),bt=st(!1)},clear(Rt){for(;I.length!==0;)I.remove(0);D.setValue(e,{value:null,items:[]}),bt=st(!1)},insert(Rt){const{index:Dt,displayValue:jt,exportValue:qt}=Rt.detail.insert,Jt=I.children[Dt],Zt=document.createElement("option");Zt.textContent=jt,Zt.value=qt,Jt?Jt.before(Zt):I.append(Zt),D.setValue(e,{value:st(!0),items:Ft(Rt)}),bt=st(!1)},items(Rt){const{items:Dt}=Rt.detail;for(;I.length!==0;)I.remove(0);for(const jt of Dt){const{displayValue:qt,exportValue:Jt}=jt,Zt=document.createElement("option");Zt.textContent=qt,Zt.value=Jt,I.append(Zt)}I.options.length>0&&(I.options[0].selected=!0),D.setValue(e,{value:st(!0),items:Ft(Rt)}),bt=st(!1)},indices(Rt){const Dt=new Set(Rt.detail.indices);for(const jt of Rt.target.options)jt.selected=Dt.has(jt.index);D.setValue(e,{value:st(!0)}),bt=st(!1)},editable(Rt){Rt.target.disabled=!Rt.detail.editable}};this._dispatchEventFromSandbox(Xt,xt)}),I.addEventListener("input",xt=>{var Rt;const Xt=st(!0);D.setValue(e,{value:Xt}),xt.preventDefault(),(Rt=this.linkService.eventBus)==null||Rt.dispatch("dispatcheventinsandbox",{source:this,detail:{id:e,name:"Keystroke",value:bt,changeEx:Xt,willCommit:!1,commitKey:1,keyDown:!1}})}),this._setEventListeners(I,null,[["focus","Focus"],["blur","Blur"],["mousedown","Mouse Down"],["mouseenter","Mouse Enter"],["mouseleave","Mouse Exit"],["mouseup","Mouse Up"],["input","Action"],["input","Validate"]],xt=>xt.target.value)):I.addEventListener("input",function(xt){D.setValue(e,{value:st(!0)})}),this.data.combo&&this._setTextStyle(I),this._setBackgroundColor(I),this._setDefaultPropertiesFromJS(I),this.container.append(I),this.container}}class g extends S{constructor(D){const{data:e,elements:p}=D;super(D,{isRenderable:S._hasPopupData(e)}),this.elements=p}render(){this.container.classList.add("popupAnnotation");const D=new a({container:this.container,color:this.data.color,titleObj:this.data.titleObj,modificationDate:this.data.modificationDate,contentsObj:this.data.contentsObj,richText:this.data.richText,rect:this.data.rect,parentRect:this.data.parentRect||null,parent:this.parent,elements:this.elements,open:this.data.open}),e=[];for(const p of this.elements)p.popup=D,e.push(p.data.id),p.addHighlightArea();return this.container.setAttribute("aria-controls",e.map(p=>`${c.AnnotationPrefix}${p}`).join(",")),this.container}}class a{constructor({container:D,color:e,elements:p,titleObj:I,modificationDate:W,contentsObj:q,richText:st,parent:bt,rect:Ft,parentRect:xt,open:Xt}){L(this,Wt);L(this,Ht);L(this,Vt);L(this,Yt);L(this,B,null);L(this,et,G(this,Wt,Oi).bind(this));L(this,Z,G(this,Yt,li).bind(this));L(this,rt,G(this,Vt,oi).bind(this));L(this,dt,G(this,Ht,Me).bind(this));L(this,vt,null);L(this,ft,null);L(this,Mt,null);L(this,Ut,null);L(this,Et,null);L(this,It,null);L(this,pt,!1);L(this,J,null);L(this,Q,null);L(this,ut,null);L(this,wt,null);L(this,Tt,!1);var Dt;tt(this,ft,D),tt(this,wt,I),tt(this,Mt,q),tt(this,ut,st),tt(this,Et,bt),tt(this,vt,e),tt(this,Q,Ft),tt(this,It,xt),tt(this,Ut,p);const Rt=x.PDFDateString.toDateObject(W);Rt&&tt(this,B,bt.l10n.get("annotation_date_string",{date:Rt.toLocaleDateString(),time:Rt.toLocaleTimeString()})),this.trigger=p.flatMap(jt=>jt.getElementsToTriggerPopup());for(const jt of this.trigger)jt.addEventListener("click",t(this,dt)),jt.addEventListener("mouseenter",t(this,rt)),jt.addEventListener("mouseleave",t(this,Z)),jt.classList.add("popupTriggerArea");for(const jt of p)(Dt=jt.container)==null||Dt.addEventListener("keydown",t(this,et));t(this,ft).hidden=!0,Xt&&G(this,Ht,Me).call(this)}render(){if(t(this,J))return;const{page:{view:D},viewport:{rawDims:{pageWidth:e,pageHeight:p,pageX:I,pageY:W}}}=t(this,Et),q=tt(this,J,document.createElement("div"));if(q.className="popup",t(this,vt)){const se=q.style.outlineColor=c.Util.makeHexColor(...t(this,vt));CSS.supports("background-color","color-mix(in srgb, red 30%, white)")?q.style.backgroundColor=`color-mix(in srgb, ${se} 30%, white)`:q.style.backgroundColor=c.Util.makeHexColor(...t(this,vt).map(le=>Math.floor(.7*(255-le)+le)))}const st=document.createElement("span");st.className="header";const bt=document.createElement("h1");if(st.append(bt),{dir:bt.dir,str:bt.textContent}=t(this,wt),q.append(st),t(this,B)){const se=document.createElement("span");se.classList.add("popupDate"),t(this,B).then(re=>{se.textContent=re}),st.append(se)}const Ft=t(this,Mt),xt=t(this,ut);if(xt!=null&&xt.str&&(!(Ft!=null&&Ft.str)||Ft.str===xt.str))U.XfaLayer.render({xfaHtml:xt.html,intent:"richText",div:q}),q.lastChild.classList.add("richText","popupContent");else{const se=this._formatContents(Ft);q.append(se)}let Xt=!!t(this,It),Rt=Xt?t(this,It):t(this,Q);for(const se of t(this,Ut))if(!Rt||c.Util.intersect(se.data.rect,Rt)!==null){Rt=se.data.rect,Xt=!0;break}const Dt=c.Util.normalizeRect([Rt[0],D[3]-Rt[1]+D[1],Rt[2],D[3]-Rt[3]+D[1]]),jt=5,qt=Xt?Rt[2]-Rt[0]+jt:0,Jt=Dt[0]+qt,Zt=Dt[1],{style:ne}=t(this,ft);ne.left=`${100*(Jt-I)/e}%`,ne.top=`${100*(Zt-W)/p}%`,t(this,ft).append(q)}_formatContents({str:D,dir:e}){const p=document.createElement("p");p.classList.add("popupContent"),p.dir=e;const I=D.split(/(?:\r\n?|\n)/);for(let W=0,q=I.length;W<q;++W){const st=I[W];p.append(document.createTextNode(st)),W<q-1&&p.append(document.createElement("br"))}return p}forceHide(){tt(this,Tt,this.isVisible),t(this,Tt)&&(t(this,ft).hidden=!0)}maybeShow(){t(this,Tt)&&(tt(this,Tt,!1),t(this,ft).hidden=!1)}get isVisible(){return t(this,ft).hidden===!1}}B=new WeakMap,et=new WeakMap,Z=new WeakMap,rt=new WeakMap,dt=new WeakMap,vt=new WeakMap,ft=new WeakMap,Mt=new WeakMap,Ut=new WeakMap,Et=new WeakMap,It=new WeakMap,pt=new WeakMap,J=new WeakMap,Q=new WeakMap,ut=new WeakMap,wt=new WeakMap,Tt=new WeakMap,Wt=new WeakSet,Oi=function(D){D.altKey||D.shiftKey||D.ctrlKey||D.metaKey||(D.key==="Enter"||D.key==="Escape"&&t(this,pt))&&G(this,Ht,Me).call(this)},Ht=new WeakSet,Me=function(){tt(this,pt,!t(this,pt)),t(this,pt)?(G(this,Vt,oi).call(this),t(this,ft).addEventListener("click",t(this,dt)),t(this,ft).addEventListener("keydown",t(this,et))):(G(this,Yt,li).call(this),t(this,ft).removeEventListener("click",t(this,dt)),t(this,ft).removeEventListener("keydown",t(this,et)))},Vt=new WeakSet,oi=function(){t(this,J)||this.render(),this.isVisible?t(this,pt)&&t(this,ft).classList.add("focused"):(t(this,ft).hidden=!1,t(this,ft).style.zIndex=parseInt(t(this,ft).style.zIndex)+1e3)},Yt=new WeakSet,li=function(){t(this,ft).classList.remove("focused"),!(t(this,pt)||!this.isVisible)&&(t(this,ft).hidden=!0,t(this,ft).style.zIndex=parseInt(t(this,ft).style.zIndex)-1e3)};class P extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0}),this.textContent=D.data.textContent,this.textPosition=D.data.textPosition,this.annotationEditorType=c.AnnotationEditorType.FREETEXT}render(){if(this.container.classList.add("freeTextAnnotation"),this.textContent){const D=document.createElement("div");D.classList.add("annotationTextContent"),D.setAttribute("role","comment");for(const e of this.textContent){const p=document.createElement("span");p.textContent=e,D.append(p)}this.container.append(D)}return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this._editOnDoubleClick(),this.container}}u.FreeTextAnnotationElement=P;class b extends S{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});L(this,K,null)}render(){this.container.classList.add("lineAnnotation");const e=this.data,{width:p,height:I}=N(e.rect),W=this.svgFactory.create(p,I,!0),q=tt(this,K,this.svgFactory.createElement("svg:line"));return q.setAttribute("x1",e.rect[2]-e.lineCoordinates[0]),q.setAttribute("y1",e.rect[3]-e.lineCoordinates[1]),q.setAttribute("x2",e.rect[2]-e.lineCoordinates[2]),q.setAttribute("y2",e.rect[3]-e.lineCoordinates[3]),q.setAttribute("stroke-width",e.borderStyle.width||1),q.setAttribute("stroke","transparent"),q.setAttribute("fill","transparent"),W.append(q),this.container.append(W),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,K)}addHighlightArea(){this.container.classList.add("highlightArea")}}K=new WeakMap;class j extends S{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});L(this,z,null)}render(){this.container.classList.add("squareAnnotation");const e=this.data,{width:p,height:I}=N(e.rect),W=this.svgFactory.create(p,I,!0),q=e.borderStyle.width,st=tt(this,z,this.svgFactory.createElement("svg:rect"));return st.setAttribute("x",q/2),st.setAttribute("y",q/2),st.setAttribute("width",p-q),st.setAttribute("height",I-q),st.setAttribute("stroke-width",q||1),st.setAttribute("stroke","transparent"),st.setAttribute("fill","transparent"),W.append(st),this.container.append(W),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,z)}addHighlightArea(){this.container.classList.add("highlightArea")}}z=new WeakMap;class X extends S{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});L(this,_t,null)}render(){this.container.classList.add("circleAnnotation");const e=this.data,{width:p,height:I}=N(e.rect),W=this.svgFactory.create(p,I,!0),q=e.borderStyle.width,st=tt(this,_t,this.svgFactory.createElement("svg:ellipse"));return st.setAttribute("cx",p/2),st.setAttribute("cy",I/2),st.setAttribute("rx",p/2-q/2),st.setAttribute("ry",I/2-q/2),st.setAttribute("stroke-width",q||1),st.setAttribute("stroke","transparent"),st.setAttribute("fill","transparent"),W.append(st),this.container.append(W),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,_t)}addHighlightArea(){this.container.classList.add("highlightArea")}}_t=new WeakMap;class w extends S{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});L(this,yt,null);this.containerClassName="polylineAnnotation",this.svgElementName="svg:polyline"}render(){this.container.classList.add(this.containerClassName);const e=this.data,{width:p,height:I}=N(e.rect),W=this.svgFactory.create(p,I,!0);let q=[];for(const bt of e.vertices){const Ft=bt.x-e.rect[0],xt=e.rect[3]-bt.y;q.push(Ft+","+xt)}q=q.join(" ");const st=tt(this,yt,this.svgFactory.createElement(this.svgElementName));return st.setAttribute("points",q),st.setAttribute("stroke-width",e.borderStyle.width||1),st.setAttribute("stroke","transparent"),st.setAttribute("fill","transparent"),W.append(st),this.container.append(W),!e.popupRef&&this.hasPopupData&&this._createPopup(),this.container}getElementsToTriggerPopup(){return t(this,yt)}addHighlightArea(){this.container.classList.add("highlightArea")}}yt=new WeakMap;class V extends w{constructor(D){super(D),this.containerClassName="polygonAnnotation",this.svgElementName="svg:polygon"}}class nt extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("caretAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}class ot extends S{constructor(e){super(e,{isRenderable:!0,ignoreBorder:!0});L(this,ee,[]);this.containerClassName="inkAnnotation",this.svgElementName="svg:polyline",this.annotationEditorType=c.AnnotationEditorType.INK}render(){this.container.classList.add(this.containerClassName);const e=this.data,{width:p,height:I}=N(e.rect),W=this.svgFactory.create(p,I,!0);for(const q of e.inkLists){let st=[];for(const Ft of q){const xt=Ft.x-e.rect[0],Xt=e.rect[3]-Ft.y;st.push(`${xt},${Xt}`)}st=st.join(" ");const bt=this.svgFactory.createElement(this.svgElementName);t(this,ee).push(bt),bt.setAttribute("points",st),bt.setAttribute("stroke-width",e.borderStyle.width||1),bt.setAttribute("stroke","transparent"),bt.setAttribute("fill","transparent"),!e.popupRef&&this.hasPopupData&&this._createPopup(),W.append(bt)}return this.container.append(W),this.container}getElementsToTriggerPopup(){return t(this,ee)}addHighlightArea(){this.container.classList.add("highlightArea")}}ee=new WeakMap,u.InkAnnotationElement=ot;class H extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("highlightAnnotation"),this.container}}class ht extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("underlineAnnotation"),this.container}}class mt extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("squigglyAnnotation"),this.container}}class Ct extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0,createQuadrilaterals:!0})}render(){return!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container.classList.add("strikeoutAnnotation"),this.container}}class kt extends S{constructor(D){super(D,{isRenderable:!0,ignoreBorder:!0})}render(){return this.container.classList.add("stampAnnotation"),!this.data.popupRef&&this.hasPopupData&&this._createPopup(),this.container}}u.StampAnnotationElement=kt;class E extends S{constructor(e){var W;super(e,{isRenderable:!0});L(this,Y);L(this,te,null);const{filename:p,content:I}=this.data.file;this.filename=(0,x.getFilenameFromUrl)(p,!0),this.content=I,(W=this.linkService.eventBus)==null||W.dispatch("fileattachmentannotation",{source:this,filename:p,content:I})}render(){this.container.classList.add("fileAttachmentAnnotation");const{container:e,data:p}=this;let I;p.hasAppearance||p.fillAlpha===0?I=document.createElement("div"):(I=document.createElement("img"),I.src=`${this.imageResourcesPath}annotation-${/paperclip/i.test(p.name)?"paperclip":"pushpin"}.svg`,p.fillAlpha&&p.fillAlpha<1&&(I.style=`filter: opacity(${Math.round(p.fillAlpha*100)}%);`)),I.addEventListener("dblclick",G(this,Y,ci).bind(this)),tt(this,te,I);const{isMac:W}=c.FeatureTest.platform;return e.addEventListener("keydown",q=>{q.key==="Enter"&&(W?q.metaKey:q.ctrlKey)&&G(this,Y,ci).call(this)}),!p.popupRef&&this.hasPopupData?this._createPopup():I.classList.add("popupTriggerArea"),e.append(I),e}getElementsToTriggerPopup(){return t(this,te)}addHighlightArea(){this.container.classList.add("highlightArea")}}te=new WeakMap,Y=new WeakSet,ci=function(){var e;(e=this.downloadManager)==null||e.openOrDownloadData(this.container,this.content,this.filename)};class i{constructor({div:D,accessibilityManager:e,annotationCanvasMap:p,l10n:I,page:W,viewport:q}){L(this,Bt);L(this,At);L(this,Ot,null);L(this,Pt,null);L(this,Nt,new Map);this.div=D,tt(this,Ot,e),tt(this,Pt,p),this.l10n=I,this.page=W,this.viewport=q,this.zIndex=0,this.l10n||(this.l10n=gt.NullL10n)}async render(D){const{annotations:e}=D,p=this.div;(0,x.setLayerDimensions)(p,this.viewport);const I=new Map,W={data:null,layer:p,linkService:D.linkService,downloadManager:D.downloadManager,imageResourcesPath:D.imageResourcesPath||"",renderForms:D.renderForms!==!1,svgFactory:new x.DOMSVGFactory,annotationStorage:D.annotationStorage||new at.AnnotationStorage,enableScripting:D.enableScripting===!0,hasJSActions:D.hasJSActions,fieldObjects:D.fieldObjects,parent:this,elements:null};for(const q of e){if(q.noHTML)continue;const st=q.annotationType===c.AnnotationType.POPUP;if(st){const xt=I.get(q.id);if(!xt)continue;W.elements=xt}else{const{width:xt,height:Xt}=N(q.rect);if(xt<=0||Xt<=0)continue}W.data=q;const bt=k.create(W);if(!bt.isRenderable)continue;if(!st&&q.popupRef){const xt=I.get(q.popupRef);xt?xt.push(bt):I.set(q.popupRef,[bt])}bt.annotationEditorType>0&&t(this,Nt).set(bt.data.id,bt);const Ft=bt.render();q.hidden&&(Ft.style.visibility="hidden"),G(this,Bt,Ni).call(this,Ft,q.id)}G(this,At,hi).call(this),await this.l10n.translate(p)}update({viewport:D}){const e=this.div;this.viewport=D,(0,x.setLayerDimensions)(e,{rotation:D.rotation}),G(this,At,hi).call(this),e.hidden=!1}getEditableAnnotations(){return Array.from(t(this,Nt).values())}getEditableAnnotation(D){return t(this,Nt).get(D)}}Ot=new WeakMap,Pt=new WeakMap,Nt=new WeakMap,Bt=new WeakSet,Ni=function(D,e){var I;const p=D.firstChild||D;p.id=`${c.AnnotationPrefix}${e}`,this.div.append(D),(I=t(this,Ot))==null||I.moveElementInDOM(this.div,D,p,!1)},At=new WeakSet,hi=function(){if(!t(this,Pt))return;const D=this.div;for(const[e,p]of t(this,Pt)){const I=D.querySelector(`[data-annotation-id="${e}"]`);if(!I)continue;const{firstChild:W}=I;W?W.nodeName==="CANVAS"?W.replaceWith(p):W.before(p):I.append(p)}t(this,Pt).clear()},u.AnnotationLayer=i},(ct,u)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.ColorConverters=void 0;function it(at){return Math.floor(Math.max(0,Math.min(1,at))*255).toString(16).padStart(2,"0")}function c(at){return Math.max(0,Math.min(255,255*at))}class x{static CMYK_G([$,gt,U,M]){return["G",1-Math.min(1,.3*$+.59*U+.11*gt+M)]}static G_CMYK([$]){return["CMYK",0,0,0,1-$]}static G_RGB([$]){return["RGB",$,$,$]}static G_rgb([$]){return $=c($),[$,$,$]}static G_HTML([$]){const gt=it($);return`#${gt}${gt}${gt}`}static RGB_G([$,gt,U]){return["G",.3*$+.59*gt+.11*U]}static RGB_rgb($){return $.map(c)}static RGB_HTML($){return`#${$.map(it).join("")}`}static T_HTML(){return"#00000000"}static T_rgb(){return[null]}static CMYK_RGB([$,gt,U,M]){return["RGB",1-Math.min(1,$+M),1-Math.min(1,U+M),1-Math.min(1,gt+M)]}static CMYK_rgb([$,gt,U,M]){return[c(1-Math.min(1,$+M)),c(1-Math.min(1,U+M)),c(1-Math.min(1,gt+M))]}static CMYK_HTML($){const gt=this.CMYK_RGB($).slice(1);return this.RGB_HTML(gt)}static RGB_CMYK([$,gt,U]){const M=1-$,m=1-gt,O=1-U,N=Math.min(M,m,O);return["CMYK",M,m,O,N]}}u.ColorConverters=x},(ct,u)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.NullL10n=void 0,u.getL10nFallback=c;const it={of_pages:"of {{pagesCount}}",page_of_pages:"({{pageNumber}} of {{pagesCount}})",document_properties_kb:"{{size_kb}} KB ({{size_b}} bytes)",document_properties_mb:"{{size_mb}} MB ({{size_b}} bytes)",document_properties_date_string:"{{date}}, {{time}}",document_properties_page_size_unit_inches:"in",document_properties_page_size_unit_millimeters:"mm",document_properties_page_size_orientation_portrait:"portrait",document_properties_page_size_orientation_landscape:"landscape",document_properties_page_size_name_a3:"A3",document_properties_page_size_name_a4:"A4",document_properties_page_size_name_letter:"Letter",document_properties_page_size_name_legal:"Legal",document_properties_page_size_dimension_string:"{{width}} × {{height}} {{unit}} ({{orientation}})",document_properties_page_size_dimension_name_string:"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})",document_properties_linearized_yes:"Yes",document_properties_linearized_no:"No",additional_layers:"Additional Layers",page_landmark:"Page {{page}}",thumb_page_title:"Page {{page}}",thumb_page_canvas:"Thumbnail of Page {{page}}",find_reached_top:"Reached top of document, continued from bottom",find_reached_bottom:"Reached end of document, continued from top","find_match_count[one]":"{{current}} of {{total}} match","find_match_count[other]":"{{current}} of {{total}} matches","find_match_count_limit[one]":"More than {{limit}} match","find_match_count_limit[other]":"More than {{limit}} matches",find_not_found:"Phrase not found",page_scale_width:"Page Width",page_scale_fit:"Page Fit",page_scale_auto:"Automatic Zoom",page_scale_actual:"Actual Size",page_scale_percent:"{{scale}}%",loading_error:"An error occurred while loading the PDF.",invalid_file_error:"Invalid or corrupted PDF file.",missing_file_error:"Missing PDF file.",unexpected_response_error:"Unexpected server response.",rendering_error:"An error occurred while rendering the page.",annotation_date_string:"{{date}}, {{time}}",printing_not_supported:"Warning: Printing is not fully supported by this browser.",printing_not_ready:"Warning: The PDF is not fully loaded for printing.",web_fonts_disabled:"Web fonts are disabled: unable to use embedded PDF fonts.",free_text2_default_content:"Start typing…",editor_free_text2_aria_label:"Text Editor",editor_ink2_aria_label:"Draw Editor",editor_ink_canvas_aria_label:"User-created image",editor_alt_text_button_label:"Alt text",editor_alt_text_edit_button_label:"Edit alt text",editor_alt_text_decorative_tooltip:"Marked as decorative"};it.print_progress_percent="{{progress}}%";function c($,gt){switch($){case"find_match_count":$=`find_match_count[${gt.total===1?"one":"other"}]`;break;case"find_match_count_limit":$=`find_match_count_limit[${gt.limit===1?"one":"other"}]`;break}return it[$]||""}function x($,gt){return gt?$.replaceAll(/\{\{\s*(\w+)\s*\}\}/g,(U,M)=>M in gt?gt[M]:"{{"+M+"}}"):$}const at={async getLanguage(){return"en-us"},async getDirection(){return"ltr"},async get($,gt=null,U=c($,gt)){return x(U,gt)},async translate($){}};u.NullL10n=at},(ct,u,it)=>{Object.defineProperty(u,"__esModule",{value:!0}),u.XfaLayer=void 0;var c=it(25);class x{static setupStorage($,gt,U,M,m){const O=M.getValue(gt,{value:null});switch(U.name){case"textarea":if(O.value!==null&&($.textContent=O.value),m==="print")break;$.addEventListener("input",N=>{M.setValue(gt,{value:N.target.value})});break;case"input":if(U.attributes.type==="radio"||U.attributes.type==="checkbox"){if(O.value===U.attributes.xfaOn?$.setAttribute("checked",!0):O.value===U.attributes.xfaOff&&$.removeAttribute("checked"),m==="print")break;$.addEventListener("change",N=>{M.setValue(gt,{value:N.target.checked?N.target.getAttribute("xfaOn"):N.target.getAttribute("xfaOff")})})}else{if(O.value!==null&&$.setAttribute("value",O.value),m==="print")break;$.addEventListener("input",N=>{M.setValue(gt,{value:N.target.value})})}break;case"select":if(O.value!==null){$.setAttribute("value",O.value);for(const N of U.children)N.attributes.value===O.value?N.attributes.selected=!0:N.attributes.hasOwnProperty("selected")&&delete N.attributes.selected}$.addEventListener("input",N=>{const k=N.target.options,S=k.selectedIndex===-1?"":k[k.selectedIndex].value;M.setValue(gt,{value:S})});break}}static setAttributes({html:$,element:gt,storage:U=null,intent:M,linkService:m}){const{attributes:O}=gt,N=$ instanceof HTMLAnchorElement;O.type==="radio"&&(O.name=`${O.name}-${M}`);for(const[k,S]of Object.entries(O))if(S!=null)switch(k){case"class":S.length&&$.setAttribute(k,S.join(" "));break;case"dataId":break;case"id":$.setAttribute("data-element-id",S);break;case"style":Object.assign($.style,S);break;case"textContent":$.textContent=S;break;default:(!N||k!=="href"&&k!=="newWindow")&&$.setAttribute(k,S)}N&&m.addLinkAttributes($,O.href,O.newWindow),U&&O.dataId&&this.setupStorage($,O.dataId,gt,U)}static render($){var v;const gt=$.annotationStorage,U=$.linkService,M=$.xfaHtml,m=$.intent||"display",O=document.createElement(M.name);M.attributes&&this.setAttributes({html:O,element:M,intent:m,linkService:U});const N=[[M,-1,O]],k=$.div;if(k.append(O),$.viewport){const f=`matrix(${$.viewport.transform.join(",")})`;k.style.transform=f}m!=="richText"&&k.setAttribute("class","xfaLayer xfaFont");const S=[];for(;N.length>0;){const[f,A,C]=N.at(-1);if(A+1===f.children.length){N.pop();continue}const T=f.children[++N.at(-1)[1]];if(T===null)continue;const{name:y}=T;if(y==="#text"){const h=document.createTextNode(T.value);S.push(h),C.append(h);continue}const o=(v=T==null?void 0:T.attributes)!=null&&v.xmlns?document.createElementNS(T.attributes.xmlns,y):document.createElement(y);if(C.append(o),T.attributes&&this.setAttributes({html:o,element:T,storage:gt,intent:m,linkService:U}),T.children&&T.children.length>0)N.push([T,-1,o]);else if(T.value){const h=document.createTextNode(T.value);c.XfaText.shouldBuildText(y)&&S.push(h),o.append(h)}}for(const f of k.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))f.setAttribute("readOnly",!0);return{textDivs:S}}static update($){const gt=`matrix(${$.viewport.transform.join(",")})`;$.div.style.transform=gt,$.div.hidden=!1}}u.XfaLayer=x},(ct,u,it)=>{var M,m,O,N,k,S,v,f,A,C,T,y,o,h,F,Bi,a,Ui,b,ji,X,Wi,V,di,ot,Hi,ht,ui,Ct,Gi,E,zi,n,Xi,l,$i,_,Vi,B,oe,Z,fi,dt,Re,ft,De,Ut,pe,It,pi,J,Ie,ut,qi,Tt,gi,zt,Yi,$t,Ki,Gt,mi,lt,Le,z,ge;Object.defineProperty(u,"__esModule",{value:!0}),u.InkEditor=void 0;var c=it(1),x=it(4),at=it(29),$=it(6),gt=it(5);const yt=class yt extends x.AnnotationEditor{constructor(Y){super({...Y,name:"inkEditor"});L(this,F);L(this,a);L(this,b);L(this,X);L(this,V);L(this,ot);L(this,ht);L(this,Ct);L(this,E);L(this,n);L(this,l);L(this,_);L(this,B);L(this,Z);L(this,dt);L(this,ft);L(this,Ut);L(this,It);L(this,J);L(this,$t);L(this,Gt);L(this,lt);L(this,z);L(this,M,0);L(this,m,0);L(this,O,this.canvasPointermove.bind(this));L(this,N,this.canvasPointerleave.bind(this));L(this,k,this.canvasPointerup.bind(this));L(this,S,this.canvasPointerdown.bind(this));L(this,v,new Path2D);L(this,f,!1);L(this,A,!1);L(this,C,!1);L(this,T,null);L(this,y,0);L(this,o,0);L(this,h,null);this.color=Y.color||null,this.thickness=Y.thickness||null,this.opacity=Y.opacity||null,this.paths=[],this.bezierPath2D=[],this.allRawPaths=[],this.currentPath=[],this.scaleFactor=1,this.translationX=this.translationY=0,this.x=0,this.y=0,this._willKeepAspectRatio=!0}static initialize(Y){x.AnnotationEditor.initialize(Y,{strings:["editor_ink_canvas_aria_label","editor_ink2_aria_label"]})}static updateDefaultParams(Y,St){switch(Y){case c.AnnotationEditorParamsType.INK_THICKNESS:yt._defaultThickness=St;break;case c.AnnotationEditorParamsType.INK_COLOR:yt._defaultColor=St;break;case c.AnnotationEditorParamsType.INK_OPACITY:yt._defaultOpacity=St/100;break}}updateParams(Y,St){switch(Y){case c.AnnotationEditorParamsType.INK_THICKNESS:G(this,F,Bi).call(this,St);break;case c.AnnotationEditorParamsType.INK_COLOR:G(this,a,Ui).call(this,St);break;case c.AnnotationEditorParamsType.INK_OPACITY:G(this,b,ji).call(this,St);break}}static get defaultPropertiesToUpdate(){return[[c.AnnotationEditorParamsType.INK_THICKNESS,yt._defaultThickness],[c.AnnotationEditorParamsType.INK_COLOR,yt._defaultColor||x.AnnotationEditor._defaultLineColor],[c.AnnotationEditorParamsType.INK_OPACITY,Math.round(yt._defaultOpacity*100)]]}get propertiesToUpdate(){return[[c.AnnotationEditorParamsType.INK_THICKNESS,this.thickness||yt._defaultThickness],[c.AnnotationEditorParamsType.INK_COLOR,this.color||yt._defaultColor||x.AnnotationEditor._defaultLineColor],[c.AnnotationEditorParamsType.INK_OPACITY,Math.round(100*(this.opacity??yt._defaultOpacity))]]}rebuild(){this.parent&&(super.rebuild(),this.div!==null&&(this.canvas||(G(this,dt,Re).call(this),G(this,ft,De).call(this)),this.isAttachedToDOM||(this.parent.add(this),G(this,Ut,pe).call(this)),G(this,z,ge).call(this)))}remove(){this.canvas!==null&&(this.isEmpty()||this.commit(),this.canvas.width=this.canvas.height=0,this.canvas.remove(),this.canvas=null,t(this,T).disconnect(),tt(this,T,null),super.remove())}setParent(Y){!this.parent&&Y?this._uiManager.removeShouldRescale(this):this.parent&&Y===null&&this._uiManager.addShouldRescale(this),super.setParent(Y)}onScaleChanging(){const[Y,St]=this.parentDimensions,Ot=this.width*Y,Pt=this.height*St;this.setDimensions(Ot,Pt)}enableEditMode(){t(this,f)||this.canvas===null||(super.enableEditMode(),this._isDraggable=!1,this.canvas.addEventListener("pointerdown",t(this,S)))}disableEditMode(){!this.isInEditMode()||this.canvas===null||(super.disableEditMode(),this._isDraggable=!this.isEmpty(),this.div.classList.remove("editing"),this.canvas.removeEventListener("pointerdown",t(this,S)))}onceAdded(){this._isDraggable=!this.isEmpty()}isEmpty(){return this.paths.length===0||this.paths.length===1&&this.paths[0].length===0}commit(){t(this,f)||(super.commit(),this.isEditing=!1,this.disableEditMode(),this.setInForeground(),tt(this,f,!0),this.div.classList.add("disabled"),G(this,z,ge).call(this,!0),this.makeResizable(),this.parent.addInkEditorIfNeeded(!0),this.moveInDOM(),this.div.focus({preventScroll:!0}))}focusin(Y){this._focusEventsAllowed&&(super.focusin(Y),this.enableEditMode())}canvasPointerdown(Y){Y.button!==0||!this.isInEditMode()||t(this,f)||(this.setInForeground(),Y.preventDefault(),Y.type!=="mouse"&&this.div.focus(),G(this,ot,Hi).call(this,Y.offsetX,Y.offsetY))}canvasPointermove(Y){Y.preventDefault(),G(this,ht,ui).call(this,Y.offsetX,Y.offsetY)}canvasPointerup(Y){Y.preventDefault(),G(this,Z,fi).call(this,Y)}canvasPointerleave(Y){G(this,Z,fi).call(this,Y)}get isResizable(){return!this.isEmpty()&&t(this,f)}render(){if(this.div)return this.div;let Y,St;this.width&&(Y=this.x,St=this.y),super.render(),x.AnnotationEditor._l10nPromise.get("editor_ink2_aria_label").then(Qt=>{var At;return(At=this.div)==null?void 0:At.setAttribute("aria-label",Qt)});const[Ot,Pt,Nt,Bt]=G(this,X,Wi).call(this);if(this.setAt(Ot,Pt,0,0),this.setDims(Nt,Bt),G(this,dt,Re).call(this),this.width){const[Qt,At]=this.parentDimensions;this.setAspectRatio(this.width*Qt,this.height*At),this.setAt(Y*Qt,St*At,this.width*Qt,this.height*At),tt(this,C,!0),G(this,Ut,pe).call(this),this.setDims(this.width*Qt,this.height*At),G(this,B,oe).call(this),this.div.classList.add("disabled")}else this.div.classList.add("editing"),this.enableEditMode();return G(this,ft,De).call(this),this.div}setDimensions(Y,St){const Ot=Math.round(Y),Pt=Math.round(St);if(t(this,y)===Ot&&t(this,o)===Pt)return;tt(this,y,Ot),tt(this,o,Pt),this.canvas.style.visibility="hidden";const[Nt,Bt]=this.parentDimensions;this.width=Y/Nt,this.height=St/Bt,this.fixAndSetPosition(),t(this,f)&&G(this,It,pi).call(this,Y,St),G(this,Ut,pe).call(this),G(this,B,oe).call(this),this.canvas.style.visibility="visible",this.fixDims()}static deserialize(Y,St,Ot){var W,q,st;if(Y instanceof at.InkAnnotationElement)return null;const Pt=super.deserialize(Y,St,Ot);Pt.thickness=Y.thickness,Pt.color=c.Util.makeHexColor(...Y.color),Pt.opacity=Y.opacity;const[Nt,Bt]=Pt.pageDimensions,Qt=Pt.width*Nt,At=Pt.height*Bt,Kt=Pt.parentScale,Lt=Y.thickness/2;tt(Pt,f,!0),tt(Pt,y,Math.round(Qt)),tt(Pt,o,Math.round(At));const{paths:D,rect:e,rotation:p}=Y;for(let{bezier:bt}of D){bt=G(W=yt,zt,Yi).call(W,bt,e,p);const Ft=[];Pt.paths.push(Ft);let xt=Kt*(bt[0]-Lt),Xt=Kt*(bt[1]-Lt);for(let Dt=2,jt=bt.length;Dt<jt;Dt+=6){const qt=Kt*(bt[Dt]-Lt),Jt=Kt*(bt[Dt+1]-Lt),Zt=Kt*(bt[Dt+2]-Lt),ne=Kt*(bt[Dt+3]-Lt),se=Kt*(bt[Dt+4]-Lt),re=Kt*(bt[Dt+5]-Lt);Ft.push([[xt,Xt],[qt,Jt],[Zt,ne],[se,re]]),xt=se,Xt=re}const Rt=G(this,ut,qi).call(this,Ft);Pt.bezierPath2D.push(Rt)}const I=G(q=Pt,Gt,mi).call(q);return tt(Pt,m,Math.max(x.AnnotationEditor.MIN_SIZE,I[2]-I[0])),tt(Pt,M,Math.max(x.AnnotationEditor.MIN_SIZE,I[3]-I[1])),G(st=Pt,It,pi).call(st,Qt,At),Pt}serialize(){if(this.isEmpty())return null;const Y=this.getRect(0,0),St=x.AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);return{annotationType:c.AnnotationEditorType.INK,color:St,thickness:this.thickness,opacity:this.opacity,paths:G(this,$t,Ki).call(this,this.scaleFactor/this.parentScale,this.translationX,this.translationY,Y),pageIndex:this.pageIndex,rect:Y,rotation:this.rotation,structTreeParentId:this._structTreeParentId}}};M=new WeakMap,m=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakMap,S=new WeakMap,v=new WeakMap,f=new WeakMap,A=new WeakMap,C=new WeakMap,T=new WeakMap,y=new WeakMap,o=new WeakMap,h=new WeakMap,F=new WeakSet,Bi=function(Y){const St=this.thickness;this.addCommands({cmd:()=>{this.thickness=Y,G(this,z,ge).call(this)},undo:()=>{this.thickness=St,G(this,z,ge).call(this)},mustExec:!0,type:c.AnnotationEditorParamsType.INK_THICKNESS,overwriteIfSameType:!0,keepUndo:!0})},a=new WeakSet,Ui=function(Y){const St=this.color;this.addCommands({cmd:()=>{this.color=Y,G(this,B,oe).call(this)},undo:()=>{this.color=St,G(this,B,oe).call(this)},mustExec:!0,type:c.AnnotationEditorParamsType.INK_COLOR,overwriteIfSameType:!0,keepUndo:!0})},b=new WeakSet,ji=function(Y){Y/=100;const St=this.opacity;this.addCommands({cmd:()=>{this.opacity=Y,G(this,B,oe).call(this)},undo:()=>{this.opacity=St,G(this,B,oe).call(this)},mustExec:!0,type:c.AnnotationEditorParamsType.INK_OPACITY,overwriteIfSameType:!0,keepUndo:!0})},X=new WeakSet,Wi=function(){const{parentRotation:Y,parentDimensions:[St,Ot]}=this;switch(Y){case 90:return[0,Ot,Ot,St];case 180:return[St,Ot,St,Ot];case 270:return[St,0,Ot,St];default:return[0,0,St,Ot]}},V=new WeakSet,di=function(){const{ctx:Y,color:St,opacity:Ot,thickness:Pt,parentScale:Nt,scaleFactor:Bt}=this;Y.lineWidth=Pt*Nt/Bt,Y.lineCap="round",Y.lineJoin="round",Y.miterLimit=10,Y.strokeStyle=`${St}${(0,gt.opacityToHex)(Ot)}`},ot=new WeakSet,Hi=function(Y,St){this.canvas.addEventListener("contextmenu",$.noContextMenu),this.canvas.addEventListener("pointerleave",t(this,N)),this.canvas.addEventListener("pointermove",t(this,O)),this.canvas.addEventListener("pointerup",t(this,k)),this.canvas.removeEventListener("pointerdown",t(this,S)),this.isEditing=!0,t(this,C)||(tt(this,C,!0),G(this,Ut,pe).call(this),this.thickness||(this.thickness=yt._defaultThickness),this.color||(this.color=yt._defaultColor||x.AnnotationEditor._defaultLineColor),this.opacity??(this.opacity=yt._defaultOpacity)),this.currentPath.push([Y,St]),tt(this,A,!1),G(this,V,di).call(this),tt(this,h,()=>{G(this,n,Xi).call(this),t(this,h)&&window.requestAnimationFrame(t(this,h))}),window.requestAnimationFrame(t(this,h))},ht=new WeakSet,ui=function(Y,St){const[Ot,Pt]=this.currentPath.at(-1);if(this.currentPath.length>1&&Y===Ot&&St===Pt)return;const Nt=this.currentPath;let Bt=t(this,v);if(Nt.push([Y,St]),tt(this,A,!0),Nt.length<=2){Bt.moveTo(...Nt[0]),Bt.lineTo(Y,St);return}Nt.length===3&&(tt(this,v,Bt=new Path2D),Bt.moveTo(...Nt[0])),G(this,l,$i).call(this,Bt,...Nt.at(-3),...Nt.at(-2),Y,St)},Ct=new WeakSet,Gi=function(){if(this.currentPath.length===0)return;const Y=this.currentPath.at(-1);t(this,v).lineTo(...Y)},E=new WeakSet,zi=function(Y,St){tt(this,h,null),Y=Math.min(Math.max(Y,0),this.canvas.width),St=Math.min(Math.max(St,0),this.canvas.height),G(this,ht,ui).call(this,Y,St),G(this,Ct,Gi).call(this);let Ot;if(this.currentPath.length!==1)Ot=G(this,_,Vi).call(this);else{const At=[Y,St];Ot=[[At,At.slice(),At.slice(),At]]}const Pt=t(this,v),Nt=this.currentPath;this.currentPath=[],tt(this,v,new Path2D);const Bt=()=>{this.allRawPaths.push(Nt),this.paths.push(Ot),this.bezierPath2D.push(Pt),this.rebuild()},Qt=()=>{this.allRawPaths.pop(),this.paths.pop(),this.bezierPath2D.pop(),this.paths.length===0?this.remove():(this.canvas||(G(this,dt,Re).call(this),G(this,ft,De).call(this)),G(this,z,ge).call(this))};this.addCommands({cmd:Bt,undo:Qt,mustExec:!0})},n=new WeakSet,Xi=function(){if(!t(this,A))return;tt(this,A,!1);const Y=Math.ceil(this.thickness*this.parentScale),St=this.currentPath.slice(-3),Ot=St.map(Bt=>Bt[0]),Pt=St.map(Bt=>Bt[1]);Math.min(...Ot)-Y,Math.max(...Ot)+Y,Math.min(...Pt)-Y,Math.max(...Pt)+Y;const{ctx:Nt}=this;Nt.save(),Nt.clearRect(0,0,this.canvas.width,this.canvas.height);for(const Bt of this.bezierPath2D)Nt.stroke(Bt);Nt.stroke(t(this,v)),Nt.restore()},l=new WeakSet,$i=function(Y,St,Ot,Pt,Nt,Bt,Qt){const At=(St+Pt)/2,Kt=(Ot+Nt)/2,Lt=(Pt+Bt)/2,D=(Nt+Qt)/2;Y.bezierCurveTo(At+2*(Pt-At)/3,Kt+2*(Nt-Kt)/3,Lt+2*(Pt-Lt)/3,D+2*(Nt-D)/3,Lt,D)},_=new WeakSet,Vi=function(){const Y=this.currentPath;if(Y.length<=2)return[[Y[0],Y[0],Y.at(-1),Y.at(-1)]];const St=[];let Ot,[Pt,Nt]=Y[0];for(Ot=1;Ot<Y.length-2;Ot++){const[e,p]=Y[Ot],[I,W]=Y[Ot+1],q=(e+I)/2,st=(p+W)/2,bt=[Pt+2*(e-Pt)/3,Nt+2*(p-Nt)/3],Ft=[q+2*(e-q)/3,st+2*(p-st)/3];St.push([[Pt,Nt],bt,Ft,[q,st]]),[Pt,Nt]=[q,st]}const[Bt,Qt]=Y[Ot],[At,Kt]=Y[Ot+1],Lt=[Pt+2*(Bt-Pt)/3,Nt+2*(Qt-Nt)/3],D=[At+2*(Bt-At)/3,Kt+2*(Qt-Kt)/3];return St.push([[Pt,Nt],Lt,D,[At,Kt]]),St},B=new WeakSet,oe=function(){if(this.isEmpty()){G(this,J,Ie).call(this);return}G(this,V,di).call(this);const{canvas:Y,ctx:St}=this;St.setTransform(1,0,0,1,0,0),St.clearRect(0,0,Y.width,Y.height),G(this,J,Ie).call(this);for(const Ot of this.bezierPath2D)St.stroke(Ot)},Z=new WeakSet,fi=function(Y){this.canvas.removeEventListener("pointerleave",t(this,N)),this.canvas.removeEventListener("pointermove",t(this,O)),this.canvas.removeEventListener("pointerup",t(this,k)),this.canvas.addEventListener("pointerdown",t(this,S)),setTimeout(()=>{this.canvas.removeEventListener("contextmenu",$.noContextMenu)},10),G(this,E,zi).call(this,Y.offsetX,Y.offsetY),this.addToAnnotationStorage(),this.setInBackground()},dt=new WeakSet,Re=function(){this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=0,this.canvas.className="inkEditorCanvas",x.AnnotationEditor._l10nPromise.get("editor_ink_canvas_aria_label").then(Y=>{var St;return(St=this.canvas)==null?void 0:St.setAttribute("aria-label",Y)}),this.div.append(this.canvas),this.ctx=this.canvas.getContext("2d")},ft=new WeakSet,De=function(){tt(this,T,new ResizeObserver(Y=>{const St=Y[0].contentRect;St.width&&St.height&&this.setDimensions(St.width,St.height)})),t(this,T).observe(this.div)},Ut=new WeakSet,pe=function(){if(!t(this,C))return;const[Y,St]=this.parentDimensions;this.canvas.width=Math.ceil(this.width*Y),this.canvas.height=Math.ceil(this.height*St),G(this,J,Ie).call(this)},It=new WeakSet,pi=function(Y,St){const Ot=G(this,lt,Le).call(this),Pt=(Y-Ot)/t(this,m),Nt=(St-Ot)/t(this,M);this.scaleFactor=Math.min(Pt,Nt)},J=new WeakSet,Ie=function(){const Y=G(this,lt,Le).call(this)/2;this.ctx.setTransform(this.scaleFactor,0,0,this.scaleFactor,this.translationX*this.scaleFactor+Y,this.translationY*this.scaleFactor+Y)},ut=new WeakSet,qi=function(Y){const St=new Path2D;for(let Ot=0,Pt=Y.length;Ot<Pt;Ot++){const[Nt,Bt,Qt,At]=Y[Ot];Ot===0&&St.moveTo(...Nt),St.bezierCurveTo(Bt[0],Bt[1],Qt[0],Qt[1],At[0],At[1])}return St},Tt=new WeakSet,gi=function(Y,St,Ot){const[Pt,Nt,Bt,Qt]=St;switch(Ot){case 0:for(let At=0,Kt=Y.length;At<Kt;At+=2)Y[At]+=Pt,Y[At+1]=Qt-Y[At+1];break;case 90:for(let At=0,Kt=Y.length;At<Kt;At+=2){const Lt=Y[At];Y[At]=Y[At+1]+Pt,Y[At+1]=Lt+Nt}break;case 180:for(let At=0,Kt=Y.length;At<Kt;At+=2)Y[At]=Bt-Y[At],Y[At+1]+=Nt;break;case 270:for(let At=0,Kt=Y.length;At<Kt;At+=2){const Lt=Y[At];Y[At]=Bt-Y[At+1],Y[At+1]=Qt-Lt}break;default:throw new Error("Invalid rotation")}return Y},zt=new WeakSet,Yi=function(Y,St,Ot){const[Pt,Nt,Bt,Qt]=St;switch(Ot){case 0:for(let At=0,Kt=Y.length;At<Kt;At+=2)Y[At]-=Pt,Y[At+1]=Qt-Y[At+1];break;case 90:for(let At=0,Kt=Y.length;At<Kt;At+=2){const Lt=Y[At];Y[At]=Y[At+1]-Nt,Y[At+1]=Lt-Pt}break;case 180:for(let At=0,Kt=Y.length;At<Kt;At+=2)Y[At]=Bt-Y[At],Y[At+1]-=Nt;break;case 270:for(let At=0,Kt=Y.length;At<Kt;At+=2){const Lt=Y[At];Y[At]=Qt-Y[At+1],Y[At+1]=Bt-Lt}break;default:throw new Error("Invalid rotation")}return Y},$t=new WeakSet,Ki=function(Y,St,Ot,Pt){var Kt,Lt;const Nt=[],Bt=this.thickness/2,Qt=Y*St+Bt,At=Y*Ot+Bt;for(const D of this.paths){const e=[],p=[];for(let I=0,W=D.length;I<W;I++){const[q,st,bt,Ft]=D[I],xt=Y*q[0]+Qt,Xt=Y*q[1]+At,Rt=Y*st[0]+Qt,Dt=Y*st[1]+At,jt=Y*bt[0]+Qt,qt=Y*bt[1]+At,Jt=Y*Ft[0]+Qt,Zt=Y*Ft[1]+At;I===0&&(e.push(xt,Xt),p.push(xt,Xt)),e.push(Rt,Dt,jt,qt,Jt,Zt),p.push(Rt,Dt),I===W-1&&p.push(Jt,Zt)}Nt.push({bezier:G(Kt=yt,Tt,gi).call(Kt,e,Pt,this.rotation),points:G(Lt=yt,Tt,gi).call(Lt,p,Pt,this.rotation)})}return Nt},Gt=new WeakSet,mi=function(){let Y=1/0,St=-1/0,Ot=1/0,Pt=-1/0;for(const Nt of this.paths)for(const[Bt,Qt,At,Kt]of Nt){const Lt=c.Util.bezierBoundingBox(...Bt,...Qt,...At,...Kt);Y=Math.min(Y,Lt[0]),Ot=Math.min(Ot,Lt[1]),St=Math.max(St,Lt[2]),Pt=Math.max(Pt,Lt[3])}return[Y,Ot,St,Pt]},lt=new WeakSet,Le=function(){return t(this,f)?Math.ceil(this.thickness*this.parentScale):0},z=new WeakSet,ge=function(Y=!1){if(this.isEmpty())return;if(!t(this,f)){G(this,B,oe).call(this);return}const St=G(this,Gt,mi).call(this),Ot=G(this,lt,Le).call(this);tt(this,m,Math.max(x.AnnotationEditor.MIN_SIZE,St[2]-St[0])),tt(this,M,Math.max(x.AnnotationEditor.MIN_SIZE,St[3]-St[1]));const Pt=Math.ceil(Ot+t(this,m)*this.scaleFactor),Nt=Math.ceil(Ot+t(this,M)*this.scaleFactor),[Bt,Qt]=this.parentDimensions;this.width=Pt/Bt,this.height=Nt/Qt,this.setAspectRatio(Pt,Nt);const At=this.translationX,Kt=this.translationY;this.translationX=-St[0],this.translationY=-St[1],G(this,Ut,pe).call(this),G(this,B,oe).call(this),tt(this,y,Pt),tt(this,o,Nt),this.setDims(Pt,Nt);const Lt=Y?Ot/this.scaleFactor/2:0;this.translate(At-this.translationX-Lt,Kt-this.translationY-Lt)},L(yt,ut),L(yt,Tt),L(yt,zt),ie(yt,"_defaultColor",null),ie(yt,"_defaultOpacity",1),ie(yt,"_defaultThickness",1),ie(yt,"_type","ink");let U=yt;u.InkEditor=U},(ct,u,it)=>{var U,M,m,O,N,k,S,v,f,A,C,Se,y,Ee,h,Oe,g,bi,P,Ji,j,Qi,w,_i,nt,Ne,H,Zi;Object.defineProperty(u,"__esModule",{value:!0}),u.StampEditor=void 0;var c=it(1),x=it(4),at=it(6),$=it(29);const mt=class mt extends x.AnnotationEditor{constructor(E){super({...E,name:"stampEditor"});L(this,C);L(this,y);L(this,h);L(this,g);L(this,P);L(this,j);L(this,w);L(this,nt);L(this,H);L(this,U,null);L(this,M,null);L(this,m,null);L(this,O,null);L(this,N,null);L(this,k,null);L(this,S,null);L(this,v,null);L(this,f,!1);L(this,A,!1);tt(this,O,E.bitmapUrl),tt(this,N,E.bitmapFile)}static initialize(E){x.AnnotationEditor.initialize(E)}static get supportedTypes(){const E=["apng","avif","bmp","gif","jpeg","png","svg+xml","webp","x-icon"];return(0,c.shadow)(this,"supportedTypes",E.map(i=>`image/${i}`))}static get supportedTypesStr(){return(0,c.shadow)(this,"supportedTypesStr",this.supportedTypes.join(","))}static isHandlingMimeForPasting(E){return this.supportedTypes.includes(E)}static paste(E,i){i.pasteEditor(c.AnnotationEditorType.STAMP,{bitmapFile:E.getAsFile()})}remove(){var E,i;t(this,M)&&(tt(this,U,null),this._uiManager.imageManager.deleteId(t(this,M)),(E=t(this,k))==null||E.remove(),tt(this,k,null),(i=t(this,S))==null||i.disconnect(),tt(this,S,null)),super.remove()}rebuild(){if(!this.parent){t(this,M)&&G(this,h,Oe).call(this);return}super.rebuild(),this.div!==null&&(t(this,M)&&G(this,h,Oe).call(this),this.isAttachedToDOM||this.parent.add(this))}onceAdded(){this._isDraggable=!0,this.div.focus()}isEmpty(){return!(t(this,m)||t(this,U)||t(this,O)||t(this,N))}get isResizable(){return!0}render(){if(this.div)return this.div;let E,i;if(this.width&&(E=this.x,i=this.y),super.render(),this.div.hidden=!0,t(this,U)?G(this,g,bi).call(this):G(this,h,Oe).call(this),this.width){const[n,s]=this.parentDimensions;this.setAt(E*n,i*s,this.width*n,this.height*s)}return this.div}static deserialize(E,i,n){if(E instanceof $.StampAnnotationElement)return null;const s=super.deserialize(E,i,n),{rect:l,bitmapUrl:d,bitmapId:_,isSvg:R,accessibilityData:B}=E;_&&n.imageManager.isValidId(_)?tt(s,M,_):tt(s,O,d),tt(s,f,R);const[et,Z]=s.pageDimensions;return s.width=(l[2]-l[0])/et,s.height=(l[3]-l[1])/Z,B&&(s.altTextData=B),s}serialize(E=!1,i=null){if(this.isEmpty())return null;const n={annotationType:c.AnnotationEditorType.STAMP,bitmapId:t(this,M),pageIndex:this.pageIndex,rect:this.getRect(0,0),rotation:this.rotation,isSvg:t(this,f),structTreeParentId:this._structTreeParentId};if(E)return n.bitmapUrl=G(this,nt,Ne).call(this,!0),n.accessibilityData=this.altTextData,n;const{decorative:s,altText:l}=this.altTextData;if(!s&&l&&(n.accessibilityData={type:"Figure",alt:l}),i===null)return n;i.stamps||(i.stamps=new Map);const d=t(this,f)?(n.rect[2]-n.rect[0])*(n.rect[3]-n.rect[1]):null;if(!i.stamps.has(t(this,M)))i.stamps.set(t(this,M),{area:d,serialized:n}),n.bitmap=G(this,nt,Ne).call(this,!1);else if(t(this,f)){const _=i.stamps.get(t(this,M));d>_.area&&(_.area=d,_.serialized.bitmap.close(),_.serialized.bitmap=G(this,nt,Ne).call(this,!1))}return n}};U=new WeakMap,M=new WeakMap,m=new WeakMap,O=new WeakMap,N=new WeakMap,k=new WeakMap,S=new WeakMap,v=new WeakMap,f=new WeakMap,A=new WeakMap,C=new WeakSet,Se=function(E,i=!1){if(!E){this.remove();return}tt(this,U,E.bitmap),i||(tt(this,M,E.id),tt(this,f,E.isSvg)),G(this,g,bi).call(this)},y=new WeakSet,Ee=function(){tt(this,m,null),this._uiManager.enableWaiting(!1),t(this,k)&&this.div.focus()},h=new WeakSet,Oe=function(){if(t(this,M)){this._uiManager.enableWaiting(!0),this._uiManager.imageManager.getFromId(t(this,M)).then(i=>G(this,C,Se).call(this,i,!0)).finally(()=>G(this,y,Ee).call(this));return}if(t(this,O)){const i=t(this,O);tt(this,O,null),this._uiManager.enableWaiting(!0),tt(this,m,this._uiManager.imageManager.getFromUrl(i).then(n=>G(this,C,Se).call(this,n)).finally(()=>G(this,y,Ee).call(this)));return}if(t(this,N)){const i=t(this,N);tt(this,N,null),this._uiManager.enableWaiting(!0),tt(this,m,this._uiManager.imageManager.getFromFile(i).then(n=>G(this,C,Se).call(this,n)).finally(()=>G(this,y,Ee).call(this)));return}const E=document.createElement("input");E.type="file",E.accept=mt.supportedTypesStr,tt(this,m,new Promise(i=>{E.addEventListener("change",async()=>{if(!E.files||E.files.length===0)this.remove();else{this._uiManager.enableWaiting(!0);const n=await this._uiManager.imageManager.getFromFile(E.files[0]);G(this,C,Se).call(this,n)}i()}),E.addEventListener("cancel",()=>{this.remove(),i()})}).finally(()=>G(this,y,Ee).call(this))),E.click()},g=new WeakSet,bi=function(){const{div:E}=this;let{width:i,height:n}=t(this,U);const[s,l]=this.pageDimensions,d=.75;if(this.width)i=this.width*s,n=this.height*l;else if(i>d*s||n>d*l){const et=Math.min(d*s/i,d*l/n);i*=et,n*=et}const[_,R]=this.parentDimensions;this.setDims(i*_/s,n*R/l),this._uiManager.enableWaiting(!1);const B=tt(this,k,document.createElement("canvas"));E.append(B),E.hidden=!1,G(this,w,_i).call(this,i,n),G(this,H,Zi).call(this),t(this,A)||(this.parent.addUndoableEditor(this),tt(this,A,!0)),this._uiManager._eventBus.dispatch("reporttelemetry",{source:this,details:{type:"editing",subtype:this.editorType,data:{action:"inserted_image"}}}),this.addAltTextButton()},P=new WeakSet,Ji=function(E,i){var d;const[n,s]=this.parentDimensions;this.width=E/n,this.height=i/s,this.setDims(E,i),(d=this._initialOptions)!=null&&d.isCentered?this.center():this.fixAndSetPosition(),this._initialOptions=null,t(this,v)!==null&&clearTimeout(t(this,v)),tt(this,v,setTimeout(()=>{tt(this,v,null),G(this,w,_i).call(this,E,i)},200))},j=new WeakSet,Qi=function(E,i){const{width:n,height:s}=t(this,U);let l=n,d=s,_=t(this,U);for(;l>2*E||d>2*i;){const R=l,B=d;l>2*E&&(l=l>=16384?Math.floor(l/2)-1:Math.ceil(l/2)),d>2*i&&(d=d>=16384?Math.floor(d/2)-1:Math.ceil(d/2));const et=new OffscreenCanvas(l,d);et.getContext("2d").drawImage(_,0,0,R,B,0,0,l,d),_=et.transferToImageBitmap()}return _},w=new WeakSet,_i=function(E,i){E=Math.ceil(E),i=Math.ceil(i);const n=t(this,k);if(!n||n.width===E&&n.height===i)return;n.width=E,n.height=i;const s=t(this,f)?t(this,U):G(this,j,Qi).call(this,E,i),l=n.getContext("2d");l.filter=this._uiManager.hcmFilter,l.drawImage(s,0,0,s.width,s.height,0,0,E,i)},nt=new WeakSet,Ne=function(E){if(E){if(t(this,f)){const s=this._uiManager.imageManager.getSvgUrl(t(this,M));if(s)return s}const i=document.createElement("canvas");return{width:i.width,height:i.height}=t(this,U),i.getContext("2d").drawImage(t(this,U),0,0),i.toDataURL()}if(t(this,f)){const[i,n]=this.pageDimensions,s=Math.round(this.width*i*at.PixelsPerInch.PDF_TO_CSS_UNITS),l=Math.round(this.height*n*at.PixelsPerInch.PDF_TO_CSS_UNITS),d=new OffscreenCanvas(s,l);return d.getContext("2d").drawImage(t(this,U),0,0,t(this,U).width,t(this,U).height,0,0,s,l),d.transferToImageBitmap()}return structuredClone(t(this,U))},H=new WeakSet,Zi=function(){tt(this,S,new ResizeObserver(E=>{const i=E[0].contentRect;i.width&&i.height&&G(this,P,Ji).call(this,i.width,i.height)})),t(this,S).observe(this.div)},ie(mt,"_type","stamp");let gt=mt;u.StampEditor=gt}],__webpack_module_cache__={};function __w_pdfjs_require__(ct){var u=__webpack_module_cache__[ct];if(u!==void 0)return u.exports;var it=__webpack_module_cache__[ct]={exports:{}};return __webpack_modules__[ct](it,it.exports,__w_pdfjs_require__),it.exports}var __webpack_exports__={};return(()=>{var ct=__webpack_exports__;Object.defineProperty(ct,"__esModule",{value:!0}),Object.defineProperty(ct,"AbortException",{enumerable:!0,get:function(){return u.AbortException}}),Object.defineProperty(ct,"AnnotationEditorLayer",{enumerable:!0,get:function(){return at.AnnotationEditorLayer}}),Object.defineProperty(ct,"AnnotationEditorParamsType",{enumerable:!0,get:function(){return u.AnnotationEditorParamsType}}),Object.defineProperty(ct,"AnnotationEditorType",{enumerable:!0,get:function(){return u.AnnotationEditorType}}),Object.defineProperty(ct,"AnnotationEditorUIManager",{enumerable:!0,get:function(){return $.AnnotationEditorUIManager}}),Object.defineProperty(ct,"AnnotationLayer",{enumerable:!0,get:function(){return gt.AnnotationLayer}}),Object.defineProperty(ct,"AnnotationMode",{enumerable:!0,get:function(){return u.AnnotationMode}}),Object.defineProperty(ct,"CMapCompressionType",{enumerable:!0,get:function(){return u.CMapCompressionType}}),Object.defineProperty(ct,"DOMSVGFactory",{enumerable:!0,get:function(){return c.DOMSVGFactory}}),Object.defineProperty(ct,"FeatureTest",{enumerable:!0,get:function(){return u.FeatureTest}}),Object.defineProperty(ct,"GlobalWorkerOptions",{enumerable:!0,get:function(){return U.GlobalWorkerOptions}}),Object.defineProperty(ct,"ImageKind",{enumerable:!0,get:function(){return u.ImageKind}}),Object.defineProperty(ct,"InvalidPDFException",{enumerable:!0,get:function(){return u.InvalidPDFException}}),Object.defineProperty(ct,"MissingPDFException",{enumerable:!0,get:function(){return u.MissingPDFException}}),Object.defineProperty(ct,"OPS",{enumerable:!0,get:function(){return u.OPS}}),Object.defineProperty(ct,"PDFDataRangeTransport",{enumerable:!0,get:function(){return it.PDFDataRangeTransport}}),Object.defineProperty(ct,"PDFDateString",{enumerable:!0,get:function(){return c.PDFDateString}}),Object.defineProperty(ct,"PDFWorker",{enumerable:!0,get:function(){return it.PDFWorker}}),Object.defineProperty(ct,"PasswordResponses",{enumerable:!0,get:function(){return u.PasswordResponses}}),Object.defineProperty(ct,"PermissionFlag",{enumerable:!0,get:function(){return u.PermissionFlag}}),Object.defineProperty(ct,"PixelsPerInch",{enumerable:!0,get:function(){return c.PixelsPerInch}}),Object.defineProperty(ct,"PromiseCapability",{enumerable:!0,get:function(){return u.PromiseCapability}}),Object.defineProperty(ct,"RenderingCancelledException",{enumerable:!0,get:function(){return c.RenderingCancelledException}}),Object.defineProperty(ct,"SVGGraphics",{enumerable:!0,get:function(){return it.SVGGraphics}}),Object.defineProperty(ct,"UnexpectedResponseException",{enumerable:!0,get:function(){return u.UnexpectedResponseException}}),Object.defineProperty(ct,"Util",{enumerable:!0,get:function(){return u.Util}}),Object.defineProperty(ct,"VerbosityLevel",{enumerable:!0,get:function(){return u.VerbosityLevel}}),Object.defineProperty(ct,"XfaLayer",{enumerable:!0,get:function(){return M.XfaLayer}}),Object.defineProperty(ct,"build",{enumerable:!0,get:function(){return it.build}}),Object.defineProperty(ct,"createValidAbsoluteUrl",{enumerable:!0,get:function(){return u.createValidAbsoluteUrl}}),Object.defineProperty(ct,"getDocument",{enumerable:!0,get:function(){return it.getDocument}}),Object.defineProperty(ct,"getFilenameFromUrl",{enumerable:!0,get:function(){return c.getFilenameFromUrl}}),Object.defineProperty(ct,"getPdfFilenameFromUrl",{enumerable:!0,get:function(){return c.getPdfFilenameFromUrl}}),Object.defineProperty(ct,"getXfaPageViewport",{enumerable:!0,get:function(){return c.getXfaPageViewport}}),Object.defineProperty(ct,"isDataScheme",{enumerable:!0,get:function(){return c.isDataScheme}}),Object.defineProperty(ct,"isPdfFile",{enumerable:!0,get:function(){return c.isPdfFile}}),Object.defineProperty(ct,"loadScript",{enumerable:!0,get:function(){return c.loadScript}}),Object.defineProperty(ct,"noContextMenu",{enumerable:!0,get:function(){return c.noContextMenu}}),Object.defineProperty(ct,"normalizeUnicode",{enumerable:!0,get:function(){return u.normalizeUnicode}}),Object.defineProperty(ct,"renderTextLayer",{enumerable:!0,get:function(){return x.renderTextLayer}}),Object.defineProperty(ct,"setLayerDimensions",{enumerable:!0,get:function(){return c.setLayerDimensions}}),Object.defineProperty(ct,"shadow",{enumerable:!0,get:function(){return u.shadow}}),Object.defineProperty(ct,"updateTextLayer",{enumerable:!0,get:function(){return x.updateTextLayer}}),Object.defineProperty(ct,"version",{enumerable:!0,get:function(){return it.version}});var u=__w_pdfjs_require__(1),it=__w_pdfjs_require__(2),c=__w_pdfjs_require__(6),x=__w_pdfjs_require__(26),at=__w_pdfjs_require__(27),$=__w_pdfjs_require__(5),gt=__w_pdfjs_require__(29),U=__w_pdfjs_require__(14),M=__w_pdfjs_require__(32)})(),__webpack_exports__})())})(pdf$1);var pdfExports=pdf$1.exports;const pdf=getDefaultExportFromCjs(pdfExports),pdfjsModule=_mergeNamespaces({__proto__:null,default:pdf},[pdfExports]),pdfjs="default"in pdfjsModule?pdf:pdfjsModule,pdfjs$1=pdfjs,isBrowser=typeof document<"u",isLocalFileSystem=isBrowser&&window.location.protocol==="file:",allowFileAccessFromFilesTip="On Chromium based browsers, you can use --allow-file-access-from-files flag for debugging purposes.";function displayWorkerWarning(){warning$1(!isLocalFileSystem,`Loading PDF.js worker may not work on protocols other than HTTP/HTTPS. ${allowFileAccessFromFilesTip}`)}displayWorkerWarning();pdfjs$1.GlobalWorkerOptions.workerSrc="pdf.worker.js";export{PropTypes as P,clsx as c,pdfjs$1 as p};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
