var se=(e,t,s)=>{if(!t.has(e))throw TypeError("Cannot "+s)};var i=(e,t,s)=>(se(e,t,"read from private field"),s?s.call(e):t.get(e)),o=(e,t,s)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,s)},u=(e,t,s,r)=>(se(e,t,"write to private field"),r?r.call(e,s):t.set(e,s),s);var Wt=(e,t,s,r)=>({set _(n){u(e,t,n,s)},get _(){return i(e,t,r)}}),f=(e,t,s)=>(se(e,t,"access private method"),s);import{r as M}from"../react-a84639bd.js";const Xe="modulepreload",Ye=function(e){return"/static/"+e},Oe={},As=function(t,s,r){if(!s||s.length===0)return t();const n=document.getElementsByTagName("link");return Promise.all(s.map(a=>{if(a=Ye(a),a in Oe)return;Oe[a]=!0;const h=a.endsWith(".css"),l=h?'[rel="stylesheet"]':"";if(!!r)for(let c=n.length-1;c>=0;c--){const b=n[c];if(b.href===a&&(!h||b.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${a}"]${l}`))return;const p=document.createElement("link");if(p.rel=h?"stylesheet":Xe,h||(p.as="script",p.crossOrigin=""),p.href=a,document.head.appendChild(p),h)return new Promise((c,b)=>{p.addEventListener("load",c),p.addEventListener("error",()=>b(new Error(`Unable to preload CSS for ${a}`)))})})).then(()=>t()).catch(a=>{const h=new Event("vite:preloadError",{cancelable:!0});if(h.payload=a,window.dispatchEvent(h),!h.defaultPrevented)throw a})};var Ut=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.add(e),this.onSubscribe(),()=>{this.listeners.delete(e),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},At=typeof window>"u"||"Deno"in window;function N(){}function Ze(e,t){return typeof e=="function"?e(t):e}function re(e){return typeof e=="number"&&e>=0&&e!==1/0}function ke(e,t){return Math.max(e+(t||0)-Date.now(),0)}function we(e,t){const{type:s="all",exact:r,fetchStatus:n,predicate:a,queryKey:h,stale:l}=e;if(h){if(r){if(t.queryHash!==ge(h,t.options))return!1}else if(!Tt(t.queryKey,h))return!1}if(s!=="all"){const g=t.isActive();if(s==="active"&&!g||s==="inactive"&&g)return!1}return!(typeof l=="boolean"&&t.isStale()!==l||typeof n<"u"&&n!==t.state.fetchStatus||a&&!a(t))}function Pe(e,t){const{exact:s,status:r,predicate:n,mutationKey:a}=e;if(a){if(!t.options.mutationKey)return!1;if(s){if(yt(t.options.mutationKey)!==yt(a))return!1}else if(!Tt(t.options.mutationKey,a))return!1}return!(r&&t.state.status!==r||n&&!n(t))}function ge(e,t){return((t==null?void 0:t.queryKeyHashFn)||yt)(e)}function yt(e){return JSON.stringify(e,(t,s)=>ne(s)?Object.keys(s).sort().reduce((r,n)=>(r[n]=s[n],r),{}):s)}function Tt(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?!Object.keys(t).some(s=>!Tt(e[s],t[s])):!1}function Ke(e,t){if(e===t)return e;const s=Ce(e)&&Ce(t);if(s||ne(e)&&ne(t)){const r=s?e:Object.keys(e),n=r.length,a=s?t:Object.keys(t),h=a.length,l=s?[]:{};let g=0;for(let p=0;p<h;p++){const c=s?p:a[p];!s&&e[c]===void 0&&t[c]===void 0&&r.includes(c)?(l[c]=void 0,g++):(l[c]=Ke(e[c],t[c]),l[c]===e[c]&&e[c]!==void 0&&g++)}return n===h&&g===n?e:l}return t}function Xt(e,t){if(e&&!t||t&&!e)return!1;for(const s in e)if(e[s]!==t[s])return!1;return!0}function Ce(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function ne(e){if(!Re(e))return!1;const t=e.constructor;if(typeof t>"u")return!0;const s=t.prototype;return!(!Re(s)||!s.hasOwnProperty("isPrototypeOf"))}function Re(e){return Object.prototype.toString.call(e)==="[object Object]"}function ts(e){return new Promise(t=>{setTimeout(t,e)})}function ae(e,t,s){return typeof s.structuralSharing=="function"?s.structuralSharing(e,t):s.structuralSharing!==!1?Ke(e,t):t}function es(e,t,s=0){const r=[...e,t];return s&&r.length>s?r.slice(1):r}function ss(e,t,s=0){const r=[t,...e];return s&&r.length>s?r.slice(0,-1):r}var at,Y,pt,Ee,is=(Ee=class extends Ut{constructor(){super();o(this,at,void 0);o(this,Y,void 0);o(this,pt,void 0);u(this,pt,t=>{if(!At&&window.addEventListener){const s=()=>t();return window.addEventListener("visibilitychange",s,!1),()=>{window.removeEventListener("visibilitychange",s)}}})}onSubscribe(){i(this,Y)||this.setEventListener(i(this,pt))}onUnsubscribe(){var t;this.hasListeners()||((t=i(this,Y))==null||t.call(this),u(this,Y,void 0))}setEventListener(t){var s;u(this,pt,t),(s=i(this,Y))==null||s.call(this),u(this,Y,t(r=>{typeof r=="boolean"?this.setFocused(r):this.onFocus()}))}setFocused(t){i(this,at)!==t&&(u(this,at,t),this.onFocus())}onFocus(){this.listeners.forEach(t=>{t()})}isFocused(){var t;return typeof i(this,at)=="boolean"?i(this,at):((t=globalThis.document)==null?void 0:t.visibilityState)!=="hidden"}},at=new WeakMap,Y=new WeakMap,pt=new WeakMap,Ee),Yt=new is,mt,Z,vt,Me,rs=(Me=class extends Ut{constructor(){super();o(this,mt,!0);o(this,Z,void 0);o(this,vt,void 0);u(this,vt,t=>{if(!At&&window.addEventListener){const s=()=>t(!0),r=()=>t(!1);return window.addEventListener("online",s,!1),window.addEventListener("offline",r,!1),()=>{window.removeEventListener("online",s),window.removeEventListener("offline",r)}}})}onSubscribe(){i(this,Z)||this.setEventListener(i(this,vt))}onUnsubscribe(){var t;this.hasListeners()||((t=i(this,Z))==null||t.call(this),u(this,Z,void 0))}setEventListener(t){var s;u(this,vt,t),(s=i(this,Z))==null||s.call(this),u(this,Z,t(this.setOnline.bind(this)))}setOnline(t){i(this,mt)!==t&&(u(this,mt,t),this.listeners.forEach(r=>{r(t)}))}isOnline(){return i(this,mt)}},mt=new WeakMap,Z=new WeakMap,vt=new WeakMap,Me),Zt=new rs;function ns(e){return Math.min(1e3*2**e,3e4)}function ee(e){return(e??"online")==="online"?Zt.isOnline():!0}var Le=class{constructor(e){this.revert=e==null?void 0:e.revert,this.silent=e==null?void 0:e.silent}};function ie(e){return e instanceof Le}function je(e){let t=!1,s=0,r=!1,n,a,h;const l=new Promise((y,m)=>{a=y,h=m}),g=y=>{var m;r||(d(new Le(y)),(m=e.abort)==null||m.call(e))},p=()=>{t=!0},c=()=>{t=!1},b=()=>!Yt.isFocused()||e.networkMode!=="always"&&!Zt.isOnline(),v=y=>{var m;r||(r=!0,(m=e.onSuccess)==null||m.call(e,y),n==null||n(),a(y))},d=y=>{var m;r||(r=!0,(m=e.onError)==null||m.call(e,y),n==null||n(),h(y))},O=()=>new Promise(y=>{var m;n=Q=>{const w=r||!b();return w&&y(Q),w},(m=e.onPause)==null||m.call(e)}).then(()=>{var y;n=void 0,r||(y=e.onContinue)==null||y.call(e)}),F=()=>{if(r)return;let y;try{y=e.fn()}catch(m){y=Promise.reject(m)}Promise.resolve(y).then(v).catch(m=>{var I;if(r)return;const Q=e.retry??(At?0:3),w=e.retryDelay??ns,A=typeof w=="function"?w(s,m):w,T=Q===!0||typeof Q=="number"&&s<Q||typeof Q=="function"&&Q(s,m);if(t||!T){d(m);return}s++,(I=e.onFail)==null||I.call(e,s,m),ts(A).then(()=>{if(b())return O()}).then(()=>{t?d(m):F()})})};return ee(e.networkMode)?F():O().then(F),{promise:l,cancel:g,continue:()=>(n==null?void 0:n())?l:Promise.resolve(),cancelRetry:p,continueRetry:c}}function as(){let e=[],t=0,s=v=>{v()},r=v=>{v()},n=v=>setTimeout(v,0);const a=v=>{n=v},h=v=>{let d;t++;try{d=v()}finally{t--,t||p()}return d},l=v=>{t?e.push(v):n(()=>{s(v)})},g=v=>(...d)=>{l(()=>{v(...d)})},p=()=>{const v=e;e=[],v.length&&n(()=>{r(()=>{v.forEach(d=>{s(d)})})})};return{batch:h,batchCalls:g,schedule:l,setNotifyFunction:v=>{s=v},setBatchNotifyFunction:v=>{r=v},setScheduler:a}}var S=as(),ut,Qe,Ne=(Qe=class{constructor(){o(this,ut,void 0)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),re(this.gcTime)&&u(this,ut,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(e){this.gcTime=Math.max(this.gcTime||0,e??(At?1/0:5*60*1e3))}clearGcTimeout(){i(this,ut)&&(clearTimeout(i(this,ut)),u(this,ut,void 0))}},ut=new WeakMap,Qe),gt,bt,K,tt,L,E,It,ht,Ot,Vt,H,W,De,us=(De=class extends Ne{constructor(t){super();o(this,Ot);o(this,H);o(this,gt,void 0);o(this,bt,void 0);o(this,K,void 0);o(this,tt,void 0);o(this,L,void 0);o(this,E,void 0);o(this,It,void 0);o(this,ht,void 0);u(this,ht,!1),u(this,It,t.defaultOptions),f(this,Ot,Vt).call(this,t.options),u(this,E,[]),u(this,K,t.cache),this.queryKey=t.queryKey,this.queryHash=t.queryHash,u(this,gt,t.state||hs(this.options)),this.state=i(this,gt),this.scheduleGc()}get meta(){return this.options.meta}optionalRemove(){!i(this,E).length&&this.state.fetchStatus==="idle"&&i(this,K).remove(this)}setData(t,s){const r=ae(this.state.data,t,this.options);return f(this,H,W).call(this,{data:r,type:"success",dataUpdatedAt:s==null?void 0:s.updatedAt,manual:s==null?void 0:s.manual}),r}setState(t,s){f(this,H,W).call(this,{type:"setState",state:t,setStateOptions:s})}cancel(t){var r;const s=i(this,tt);return(r=i(this,L))==null||r.cancel(t),s?s.then(N).catch(N):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(i(this,gt))}isActive(){return i(this,E).some(t=>t.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||i(this,E).some(t=>t.getCurrentResult().isStale)}isStaleByTime(t=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!ke(this.state.dataUpdatedAt,t)}onFocus(){var s;const t=i(this,E).find(r=>r.shouldFetchOnWindowFocus());t==null||t.refetch({cancelRefetch:!1}),(s=i(this,L))==null||s.continue()}onOnline(){var s;const t=i(this,E).find(r=>r.shouldFetchOnReconnect());t==null||t.refetch({cancelRefetch:!1}),(s=i(this,L))==null||s.continue()}addObserver(t){i(this,E).includes(t)||(i(this,E).push(t),this.clearGcTimeout(),i(this,K).notify({type:"observerAdded",query:this,observer:t}))}removeObserver(t){i(this,E).includes(t)&&(u(this,E,i(this,E).filter(s=>s!==t)),i(this,E).length||(i(this,L)&&(i(this,ht)?i(this,L).cancel({revert:!0}):i(this,L).cancelRetry()),this.scheduleGc()),i(this,K).notify({type:"observerRemoved",query:this,observer:t}))}getObserversCount(){return i(this,E).length}invalidate(){this.state.isInvalidated||f(this,H,W).call(this,{type:"invalidate"})}fetch(t,s){var p,c,b,v;if(this.state.fetchStatus!=="idle"){if(this.state.dataUpdatedAt&&(s!=null&&s.cancelRefetch))this.cancel({silent:!0});else if(i(this,tt))return(p=i(this,L))==null||p.continueRetry(),i(this,tt)}if(t&&f(this,Ot,Vt).call(this,t),!this.options.queryFn){const d=i(this,E).find(O=>O.options.queryFn);d&&f(this,Ot,Vt).call(this,d.options)}const r=new AbortController,n={queryKey:this.queryKey,meta:this.meta},a=d=>{Object.defineProperty(d,"signal",{enumerable:!0,get:()=>(u(this,ht,!0),r.signal)})};a(n);const h=()=>this.options.queryFn?(u(this,ht,!1),this.options.persister?this.options.persister(this.options.queryFn,n,this):this.options.queryFn(n)):Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`)),l={fetchOptions:s,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:h};a(l),(c=this.options.behavior)==null||c.onFetch(l,this),u(this,bt,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((b=l.fetchOptions)==null?void 0:b.meta))&&f(this,H,W).call(this,{type:"fetch",meta:(v=l.fetchOptions)==null?void 0:v.meta});const g=d=>{var O,F,y,m;ie(d)&&d.silent||f(this,H,W).call(this,{type:"error",error:d}),ie(d)||((F=(O=i(this,K).config).onError)==null||F.call(O,d,this),(m=(y=i(this,K).config).onSettled)==null||m.call(y,this.state.data,d,this)),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return u(this,L,je({fn:l.fetchFn,abort:r.abort.bind(r),onSuccess:d=>{var O,F,y,m;if(typeof d>"u"){g(new Error(`${this.queryHash} data is undefined`));return}this.setData(d),(F=(O=i(this,K).config).onSuccess)==null||F.call(O,d,this),(m=(y=i(this,K).config).onSettled)==null||m.call(y,d,this.state.error,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:g,onFail:(d,O)=>{f(this,H,W).call(this,{type:"failed",failureCount:d,error:O})},onPause:()=>{f(this,H,W).call(this,{type:"pause"})},onContinue:()=>{f(this,H,W).call(this,{type:"continue"})},retry:l.options.retry,retryDelay:l.options.retryDelay,networkMode:l.options.networkMode})),u(this,tt,i(this,L).promise),i(this,tt)}},gt=new WeakMap,bt=new WeakMap,K=new WeakMap,tt=new WeakMap,L=new WeakMap,E=new WeakMap,It=new WeakMap,ht=new WeakMap,Ot=new WeakSet,Vt=function(t){this.options={...i(this,It),...t},this.updateGcTime(this.options.gcTime)},H=new WeakSet,W=function(t){const s=r=>{switch(t.type){case"failed":return{...r,fetchFailureCount:t.failureCount,fetchFailureReason:t.error};case"pause":return{...r,fetchStatus:"paused"};case"continue":return{...r,fetchStatus:"fetching"};case"fetch":return{...r,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:t.meta??null,fetchStatus:ee(this.options.networkMode)?"fetching":"paused",...!r.dataUpdatedAt&&{error:null,status:"pending"}};case"success":return{...r,data:t.data,dataUpdateCount:r.dataUpdateCount+1,dataUpdatedAt:t.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!t.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const n=t.error;return ie(n)&&n.revert&&i(this,bt)?{...i(this,bt),fetchStatus:"idle"}:{...r,error:n,errorUpdateCount:r.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:r.fetchFailureCount+1,fetchFailureReason:n,fetchStatus:"idle",status:"error"};case"invalidate":return{...r,isInvalidated:!0};case"setState":return{...r,...t.state}}};this.state=s(this.state),S.batch(()=>{i(this,E).forEach(r=>{r.onQueryUpdate()}),i(this,K).notify({query:this,type:"updated",action:t})})},De);function hs(e){const t=typeof e.initialData=="function"?e.initialData():e.initialData,s=typeof t<"u",r=s?typeof e.initialDataUpdatedAt=="function"?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0;return{data:t,dataUpdateCount:0,dataUpdatedAt:s?r??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:s?"success":"pending",fetchStatus:"idle"}}var B,Ae,os=(Ae=class extends Ut{constructor(t={}){super();o(this,B,void 0);this.config=t,u(this,B,new Map)}build(t,s,r){const n=s.queryKey,a=s.queryHash??ge(n,s);let h=this.get(a);return h||(h=new us({cache:this,queryKey:n,queryHash:a,options:t.defaultQueryOptions(s),state:r,defaultOptions:t.getQueryDefaults(n)}),this.add(h)),h}add(t){i(this,B).has(t.queryHash)||(i(this,B).set(t.queryHash,t),this.notify({type:"added",query:t}))}remove(t){const s=i(this,B).get(t.queryHash);s&&(t.destroy(),s===t&&i(this,B).delete(t.queryHash),this.notify({type:"removed",query:t}))}clear(){S.batch(()=>{this.getAll().forEach(t=>{this.remove(t)})})}get(t){return i(this,B).get(t)}getAll(){return[...i(this,B).values()]}find(t){const s={exact:!0,...t};return this.getAll().find(r=>we(s,r))}findAll(t={}){const s=this.getAll();return Object.keys(t).length>0?s.filter(r=>we(t,r)):s}notify(t){S.batch(()=>{this.listeners.forEach(s=>{s(t)})})}onFocus(){S.batch(()=>{this.getAll().forEach(t=>{t.onFocus()})})}onOnline(){S.batch(()=>{this.getAll().forEach(t=>{t.onOnline()})})}},B=new WeakMap,Ae),G,qt,q,wt,_,X,Ue,cs=(Ue=class extends Ne{constructor(t){super();o(this,_);o(this,G,void 0);o(this,qt,void 0);o(this,q,void 0);o(this,wt,void 0);this.mutationId=t.mutationId,u(this,qt,t.defaultOptions),u(this,q,t.mutationCache),u(this,G,[]),this.state=t.state||He(),this.setOptions(t.options),this.scheduleGc()}setOptions(t){this.options={...i(this,qt),...t},this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(t){i(this,G).includes(t)||(i(this,G).push(t),this.clearGcTimeout(),i(this,q).notify({type:"observerAdded",mutation:this,observer:t}))}removeObserver(t){u(this,G,i(this,G).filter(s=>s!==t)),this.scheduleGc(),i(this,q).notify({type:"observerRemoved",mutation:this,observer:t})}optionalRemove(){i(this,G).length||(this.state.status==="pending"?this.scheduleGc():i(this,q).remove(this))}continue(){var t;return((t=i(this,wt))==null?void 0:t.continue())??this.execute(this.state.variables)}async execute(t){var n,a,h,l,g,p,c,b,v,d,O,F,y,m,Q,w,A,T,I,D;const s=()=>(u(this,wt,je({fn:()=>this.options.mutationFn?this.options.mutationFn(t):Promise.reject(new Error("No mutationFn found")),onFail:(C,z)=>{f(this,_,X).call(this,{type:"failed",failureCount:C,error:z})},onPause:()=>{f(this,_,X).call(this,{type:"pause"})},onContinue:()=>{f(this,_,X).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode})),i(this,wt).promise),r=this.state.status==="pending";try{if(!r){f(this,_,X).call(this,{type:"pending",variables:t}),await((a=(n=i(this,q).config).onMutate)==null?void 0:a.call(n,t,this));const z=await((l=(h=this.options).onMutate)==null?void 0:l.call(h,t));z!==this.state.context&&f(this,_,X).call(this,{type:"pending",context:z,variables:t})}const C=await s();return await((p=(g=i(this,q).config).onSuccess)==null?void 0:p.call(g,C,t,this.state.context,this)),await((b=(c=this.options).onSuccess)==null?void 0:b.call(c,C,t,this.state.context)),await((d=(v=i(this,q).config).onSettled)==null?void 0:d.call(v,C,null,this.state.variables,this.state.context,this)),await((F=(O=this.options).onSettled)==null?void 0:F.call(O,C,null,t,this.state.context)),f(this,_,X).call(this,{type:"success",data:C}),C}catch(C){try{throw await((m=(y=i(this,q).config).onError)==null?void 0:m.call(y,C,t,this.state.context,this)),await((w=(Q=this.options).onError)==null?void 0:w.call(Q,C,t,this.state.context)),await((T=(A=i(this,q).config).onSettled)==null?void 0:T.call(A,void 0,C,this.state.variables,this.state.context,this)),await((D=(I=this.options).onSettled)==null?void 0:D.call(I,void 0,C,t,this.state.context)),C}finally{f(this,_,X).call(this,{type:"error",error:C})}}}},G=new WeakMap,qt=new WeakMap,q=new WeakMap,wt=new WeakMap,_=new WeakSet,X=function(t){const s=r=>{switch(t.type){case"failed":return{...r,failureCount:t.failureCount,failureReason:t.error};case"pause":return{...r,isPaused:!0};case"continue":return{...r,isPaused:!1};case"pending":return{...r,context:t.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!ee(this.options.networkMode),status:"pending",variables:t.variables,submittedAt:Date.now()};case"success":return{...r,data:t.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...r,data:void 0,error:t.error,failureCount:r.failureCount+1,failureReason:t.error,isPaused:!1,status:"error"}}};this.state=s(this.state),S.batch(()=>{i(this,G).forEach(r=>{r.onMutationUpdate(t)}),i(this,q).notify({mutation:this,type:"updated",action:t})})},Ue);function He(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var j,kt,ot,xe,ls=(xe=class extends Ut{constructor(t={}){super();o(this,j,void 0);o(this,kt,void 0);o(this,ot,void 0);this.config=t,u(this,j,[]),u(this,kt,0)}build(t,s,r){const n=new cs({mutationCache:this,mutationId:++Wt(this,kt)._,options:t.defaultMutationOptions(s),state:r});return this.add(n),n}add(t){i(this,j).push(t),this.notify({type:"added",mutation:t})}remove(t){u(this,j,i(this,j).filter(s=>s!==t)),this.notify({type:"removed",mutation:t})}clear(){S.batch(()=>{i(this,j).forEach(t=>{this.remove(t)})})}getAll(){return i(this,j)}find(t){const s={exact:!0,...t};return i(this,j).find(r=>Pe(s,r))}findAll(t={}){return i(this,j).filter(s=>Pe(t,s))}notify(t){S.batch(()=>{this.listeners.forEach(s=>{s(t)})})}resumePausedMutations(){return u(this,ot,(i(this,ot)??Promise.resolve()).then(()=>{const t=i(this,j).filter(s=>s.state.isPaused);return S.batch(()=>t.reduce((s,r)=>s.then(()=>r.continue().catch(N)),Promise.resolve()))}).then(()=>{u(this,ot,void 0)})),i(this,ot)}},j=new WeakMap,kt=new WeakMap,ot=new WeakMap,xe);function ue(e){return{onFetch:(t,s)=>{const r=async()=>{var O,F,y,m,Q;const n=t.options,a=(y=(F=(O=t.fetchOptions)==null?void 0:O.meta)==null?void 0:F.fetchMore)==null?void 0:y.direction,h=((m=t.state.data)==null?void 0:m.pages)||[],l=((Q=t.state.data)==null?void 0:Q.pageParams)||[],g={pages:[],pageParams:[]};let p=!1;const c=w=>{Object.defineProperty(w,"signal",{enumerable:!0,get:()=>(t.signal.aborted?p=!0:t.signal.addEventListener("abort",()=>{p=!0}),t.signal)})},b=t.options.queryFn||(()=>Promise.reject(new Error(`Missing queryFn: '${t.options.queryHash}'`))),v=async(w,A,T)=>{if(p)return Promise.reject();if(A==null&&w.pages.length)return Promise.resolve(w);const I={queryKey:t.queryKey,pageParam:A,direction:T?"backward":"forward",meta:t.options.meta};c(I);const D=await b(I),{maxPages:C}=t.options,z=T?ss:es;return{pages:z(w.pages,D,C),pageParams:z(w.pageParams,A,C)}};let d;if(a&&h.length){const w=a==="backward",A=w?Be:he,T={pages:h,pageParams:l},I=A(n,T);d=await v(T,I,w)}else{d=await v(g,l[0]??n.initialPageParam);const w=e??h.length;for(let A=1;A<w;A++){const T=he(n,d);d=await v(d,T)}}return d};t.options.persister?t.fetchFn=()=>{var n,a;return(a=(n=t.options).persister)==null?void 0:a.call(n,r,{queryKey:t.queryKey,meta:t.options.meta,signal:t.signal},s)}:t.fetchFn=r}}}function he(e,{pages:t,pageParams:s}){const r=t.length-1;return e.getNextPageParam(t[r],t,s[r],s)}function Be(e,{pages:t,pageParams:s}){var r;return(r=e.getPreviousPageParam)==null?void 0:r.call(e,t[0],t,s[0],s)}function ds(e,t){return t?he(e,t)!=null:!1}function fs(e,t){return!t||!e.getPreviousPageParam?!1:Be(e,t)!=null}var R,et,st,Pt,Ct,it,Rt,St,Te,Us=(Te=class{constructor(e={}){o(this,R,void 0);o(this,et,void 0);o(this,st,void 0);o(this,Pt,void 0);o(this,Ct,void 0);o(this,it,void 0);o(this,Rt,void 0);o(this,St,void 0);u(this,R,e.queryCache||new os),u(this,et,e.mutationCache||new ls),u(this,st,e.defaultOptions||{}),u(this,Pt,new Map),u(this,Ct,new Map),u(this,it,0)}mount(){Wt(this,it)._++,i(this,it)===1&&(u(this,Rt,Yt.subscribe(()=>{Yt.isFocused()&&(this.resumePausedMutations(),i(this,R).onFocus())})),u(this,St,Zt.subscribe(()=>{Zt.isOnline()&&(this.resumePausedMutations(),i(this,R).onOnline())})))}unmount(){var e,t;Wt(this,it)._--,i(this,it)===0&&((e=i(this,Rt))==null||e.call(this),u(this,Rt,void 0),(t=i(this,St))==null||t.call(this),u(this,St,void 0))}isFetching(e){return i(this,R).findAll({...e,fetchStatus:"fetching"}).length}isMutating(e){return i(this,et).findAll({...e,status:"pending"}).length}getQueryData(e){var t;return(t=i(this,R).find({queryKey:e}))==null?void 0:t.state.data}ensureQueryData(e){const t=this.getQueryData(e.queryKey);return t!==void 0?Promise.resolve(t):this.fetchQuery(e)}getQueriesData(e){return this.getQueryCache().findAll(e).map(({queryKey:t,state:s})=>{const r=s.data;return[t,r]})}setQueryData(e,t,s){const r=i(this,R).find({queryKey:e}),n=r==null?void 0:r.state.data,a=Ze(t,n);if(typeof a>"u")return;const h=this.defaultQueryOptions({queryKey:e});return i(this,R).build(this,h).setData(a,{...s,manual:!0})}setQueriesData(e,t,s){return S.batch(()=>this.getQueryCache().findAll(e).map(({queryKey:r})=>[r,this.setQueryData(r,t,s)]))}getQueryState(e){var t;return(t=i(this,R).find({queryKey:e}))==null?void 0:t.state}removeQueries(e){const t=i(this,R);S.batch(()=>{t.findAll(e).forEach(s=>{t.remove(s)})})}resetQueries(e,t){const s=i(this,R),r={type:"active",...e};return S.batch(()=>(s.findAll(e).forEach(n=>{n.reset()}),this.refetchQueries(r,t)))}cancelQueries(e={},t={}){const s={revert:!0,...t},r=S.batch(()=>i(this,R).findAll(e).map(n=>n.cancel(s)));return Promise.all(r).then(N).catch(N)}invalidateQueries(e={},t={}){return S.batch(()=>{if(i(this,R).findAll(e).forEach(r=>{r.invalidate()}),e.refetchType==="none")return Promise.resolve();const s={...e,type:e.refetchType??e.type??"active"};return this.refetchQueries(s,t)})}refetchQueries(e={},t){const s={...t,cancelRefetch:(t==null?void 0:t.cancelRefetch)??!0},r=S.batch(()=>i(this,R).findAll(e).filter(n=>!n.isDisabled()).map(n=>{let a=n.fetch(void 0,s);return s.throwOnError||(a=a.catch(N)),n.state.fetchStatus==="paused"?Promise.resolve():a}));return Promise.all(r).then(N)}fetchQuery(e){const t=this.defaultQueryOptions(e);typeof t.retry>"u"&&(t.retry=!1);const s=i(this,R).build(this,t);return s.isStaleByTime(t.staleTime)?s.fetch(t):Promise.resolve(s.state.data)}prefetchQuery(e){return this.fetchQuery(e).then(N).catch(N)}fetchInfiniteQuery(e){return e.behavior=ue(e.pages),this.fetchQuery(e)}prefetchInfiniteQuery(e){return this.fetchInfiniteQuery(e).then(N).catch(N)}resumePausedMutations(){return i(this,et).resumePausedMutations()}getQueryCache(){return i(this,R)}getMutationCache(){return i(this,et)}getDefaultOptions(){return i(this,st)}setDefaultOptions(e){u(this,st,e)}setQueryDefaults(e,t){i(this,Pt).set(yt(e),{queryKey:e,defaultOptions:t})}getQueryDefaults(e){const t=[...i(this,Pt).values()];let s={};return t.forEach(r=>{Tt(e,r.queryKey)&&(s={...s,...r.defaultOptions})}),s}setMutationDefaults(e,t){i(this,Ct).set(yt(e),{mutationKey:e,defaultOptions:t})}getMutationDefaults(e){const t=[...i(this,Ct).values()];let s={};return t.forEach(r=>{Tt(e,r.mutationKey)&&(s={...s,...r.defaultOptions})}),s}defaultQueryOptions(e){if(e!=null&&e._defaulted)return e;const t={...i(this,st).queries,...(e==null?void 0:e.queryKey)&&this.getQueryDefaults(e.queryKey),...e,_defaulted:!0};return t.queryHash||(t.queryHash=ge(t.queryKey,t)),typeof t.refetchOnReconnect>"u"&&(t.refetchOnReconnect=t.networkMode!=="always"),typeof t.throwOnError>"u"&&(t.throwOnError=!!t.suspense),typeof t.networkMode>"u"&&t.persister&&(t.networkMode="offlineFirst"),t}defaultMutationOptions(e){return e!=null&&e._defaulted?e:{...i(this,st).mutations,...(e==null?void 0:e.mutationKey)&&this.getMutationDefaults(e.mutationKey),...e,_defaulted:!0}}clear(){i(this,R).clear(),i(this,et).clear()}},R=new WeakMap,et=new WeakMap,st=new WeakMap,Pt=new WeakMap,Ct=new WeakMap,it=new WeakMap,Rt=new WeakMap,St=new WeakMap,Te),x,P,Kt,U,ct,Ft,$,Lt,Et,Mt,lt,dt,rt,Qt,ft,xt,jt,oe,Nt,ce,Ht,le,Bt,de,Gt,fe,_t,ye,$t,pe,te,_e,Ie,Ge=(Ie=class extends Ut{constructor(t,s){super();o(this,ft);o(this,jt);o(this,Nt);o(this,Ht);o(this,Bt);o(this,Gt);o(this,_t);o(this,$t);o(this,te);o(this,x,void 0);o(this,P,void 0);o(this,Kt,void 0);o(this,U,void 0);o(this,ct,void 0);o(this,Ft,void 0);o(this,$,void 0);o(this,Lt,void 0);o(this,Et,void 0);o(this,Mt,void 0);o(this,lt,void 0);o(this,dt,void 0);o(this,rt,void 0);o(this,Qt,new Set);this.options=s,u(this,x,t),u(this,$,null),this.bindMethods(),this.setOptions(s)}bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.size===1&&(i(this,P).addObserver(this),Se(i(this,P),this.options)?f(this,ft,xt).call(this):this.updateResult(),f(this,Bt,de).call(this))}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return me(i(this,P),this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return me(i(this,P),this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,f(this,Gt,fe).call(this),f(this,_t,ye).call(this),i(this,P).removeObserver(this)}setOptions(t,s){const r=this.options,n=i(this,P);if(this.options=i(this,x).defaultQueryOptions(t),Xt(r,this.options)||i(this,x).getQueryCache().notify({type:"observerOptionsUpdated",query:i(this,P),observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=r.queryKey),f(this,$t,pe).call(this);const a=this.hasListeners();a&&Fe(i(this,P),n,this.options,r)&&f(this,ft,xt).call(this),this.updateResult(s),a&&(i(this,P)!==n||this.options.enabled!==r.enabled||this.options.staleTime!==r.staleTime)&&f(this,jt,oe).call(this);const h=f(this,Nt,ce).call(this);a&&(i(this,P)!==n||this.options.enabled!==r.enabled||h!==i(this,rt))&&f(this,Ht,le).call(this,h)}getOptimisticResult(t){const s=i(this,x).getQueryCache().build(i(this,x),t),r=this.createResult(s,t);return ps(this,r)&&(u(this,U,r),u(this,Ft,this.options),u(this,ct,i(this,P).state)),r}getCurrentResult(){return i(this,U)}trackResult(t){const s={};return Object.keys(t).forEach(r=>{Object.defineProperty(s,r,{configurable:!1,enumerable:!0,get:()=>(i(this,Qt).add(r),t[r])})}),s}getCurrentQuery(){return i(this,P)}refetch({...t}={}){return this.fetch({...t})}fetchOptimistic(t){const s=i(this,x).defaultQueryOptions(t),r=i(this,x).getQueryCache().build(i(this,x),s);return r.isFetchingOptimistic=!0,r.fetch().then(()=>this.createResult(r,s))}fetch(t){return f(this,ft,xt).call(this,{...t,cancelRefetch:t.cancelRefetch??!0}).then(()=>(this.updateResult(),i(this,U)))}createResult(t,s){var I;const r=i(this,P),n=this.options,a=i(this,U),h=i(this,ct),l=i(this,Ft),p=t!==r?t.state:i(this,Kt),{state:c}=t;let{error:b,errorUpdatedAt:v,fetchStatus:d,status:O}=c,F=!1,y;if(s._optimisticResults){const D=this.hasListeners(),C=!D&&Se(t,s),z=D&&Fe(t,r,s,n);(C||z)&&(d=ee(t.options.networkMode)?"fetching":"paused",c.dataUpdatedAt||(O="pending")),s._optimisticResults==="isRestoring"&&(d="idle")}if(s.select&&typeof c.data<"u")if(a&&c.data===(h==null?void 0:h.data)&&s.select===i(this,Lt))y=i(this,Et);else try{u(this,Lt,s.select),y=s.select(c.data),y=ae(a==null?void 0:a.data,y,s),u(this,Et,y),u(this,$,null)}catch(D){u(this,$,D)}else y=c.data;if(typeof s.placeholderData<"u"&&typeof y>"u"&&O==="pending"){let D;if(a!=null&&a.isPlaceholderData&&s.placeholderData===(l==null?void 0:l.placeholderData))D=a.data;else if(D=typeof s.placeholderData=="function"?s.placeholderData((I=i(this,Mt))==null?void 0:I.state.data,i(this,Mt)):s.placeholderData,s.select&&typeof D<"u")try{D=s.select(D),u(this,$,null)}catch(C){u(this,$,C)}typeof D<"u"&&(O="success",y=ae(a==null?void 0:a.data,D,s),F=!0)}i(this,$)&&(b=i(this,$),y=i(this,Et),v=Date.now(),O="error");const m=d==="fetching",Q=O==="pending",w=O==="error",A=Q&&m;return{status:O,fetchStatus:d,isPending:Q,isSuccess:O==="success",isError:w,isInitialLoading:A,isLoading:A,data:y,dataUpdatedAt:c.dataUpdatedAt,error:b,errorUpdatedAt:v,failureCount:c.fetchFailureCount,failureReason:c.fetchFailureReason,errorUpdateCount:c.errorUpdateCount,isFetched:c.dataUpdateCount>0||c.errorUpdateCount>0,isFetchedAfterMount:c.dataUpdateCount>p.dataUpdateCount||c.errorUpdateCount>p.errorUpdateCount,isFetching:m,isRefetching:m&&!Q,isLoadingError:w&&c.dataUpdatedAt===0,isPaused:d==="paused",isPlaceholderData:F,isRefetchError:w&&c.dataUpdatedAt!==0,isStale:be(t,s),refetch:this.refetch}}updateResult(t){const s=i(this,U),r=this.createResult(i(this,P),this.options);if(u(this,ct,i(this,P).state),u(this,Ft,this.options),i(this,ct).data!==void 0&&u(this,Mt,i(this,P)),Xt(r,s))return;u(this,U,r);const n={},a=()=>{if(!s)return!0;const{notifyOnChangeProps:h}=this.options,l=typeof h=="function"?h():h;if(l==="all"||!l&&!i(this,Qt).size)return!0;const g=new Set(l??i(this,Qt));return this.options.throwOnError&&g.add("error"),Object.keys(i(this,U)).some(p=>{const c=p;return i(this,U)[c]!==s[c]&&g.has(c)})};(t==null?void 0:t.listeners)!==!1&&a()&&(n.listeners=!0),f(this,te,_e).call(this,{...n,...t})}onQueryUpdate(){this.updateResult(),this.hasListeners()&&f(this,Bt,de).call(this)}},x=new WeakMap,P=new WeakMap,Kt=new WeakMap,U=new WeakMap,ct=new WeakMap,Ft=new WeakMap,$=new WeakMap,Lt=new WeakMap,Et=new WeakMap,Mt=new WeakMap,lt=new WeakMap,dt=new WeakMap,rt=new WeakMap,Qt=new WeakMap,ft=new WeakSet,xt=function(t){f(this,$t,pe).call(this);let s=i(this,P).fetch(this.options,t);return t!=null&&t.throwOnError||(s=s.catch(N)),s},jt=new WeakSet,oe=function(){if(f(this,Gt,fe).call(this),At||i(this,U).isStale||!re(this.options.staleTime))return;const s=ke(i(this,U).dataUpdatedAt,this.options.staleTime)+1;u(this,lt,setTimeout(()=>{i(this,U).isStale||this.updateResult()},s))},Nt=new WeakSet,ce=function(){return(typeof this.options.refetchInterval=="function"?this.options.refetchInterval(i(this,P)):this.options.refetchInterval)??!1},Ht=new WeakSet,le=function(t){f(this,_t,ye).call(this),u(this,rt,t),!(At||this.options.enabled===!1||!re(i(this,rt))||i(this,rt)===0)&&u(this,dt,setInterval(()=>{(this.options.refetchIntervalInBackground||Yt.isFocused())&&f(this,ft,xt).call(this)},i(this,rt)))},Bt=new WeakSet,de=function(){f(this,jt,oe).call(this),f(this,Ht,le).call(this,f(this,Nt,ce).call(this))},Gt=new WeakSet,fe=function(){i(this,lt)&&(clearTimeout(i(this,lt)),u(this,lt,void 0))},_t=new WeakSet,ye=function(){i(this,dt)&&(clearInterval(i(this,dt)),u(this,dt,void 0))},$t=new WeakSet,pe=function(){const t=i(this,x).getQueryCache().build(i(this,x),this.options);if(t===i(this,P))return;const s=i(this,P);u(this,P,t),u(this,Kt,t.state),this.hasListeners()&&(s==null||s.removeObserver(this),t.addObserver(this))},te=new WeakSet,_e=function(t){S.batch(()=>{t.listeners&&this.listeners.forEach(s=>{s(i(this,U))}),i(this,x).getQueryCache().notify({query:i(this,P),type:"observerResultsUpdated"})})},Ie);function ys(e,t){return t.enabled!==!1&&!e.state.dataUpdatedAt&&!(e.state.status==="error"&&t.retryOnMount===!1)}function Se(e,t){return ys(e,t)||e.state.dataUpdatedAt>0&&me(e,t,t.refetchOnMount)}function me(e,t,s){if(t.enabled!==!1){const r=typeof s=="function"?s(e):s;return r==="always"||r!==!1&&be(e,t)}return!1}function Fe(e,t,s,r){return s.enabled!==!1&&(e!==t||r.enabled===!1)&&(!s.suspense||e.state.status!=="error")&&be(e,s)}function be(e,t){return e.isStaleByTime(t.staleTime)}function ps(e,t){return!Xt(e.getCurrentResult(),t)}var ms=class extends Ge{constructor(e,t){super(e,t)}bindMethods(){super.bindMethods(),this.fetchNextPage=this.fetchNextPage.bind(this),this.fetchPreviousPage=this.fetchPreviousPage.bind(this)}setOptions(e,t){super.setOptions({...e,behavior:ue()},t)}getOptimisticResult(e){return e.behavior=ue(),super.getOptimisticResult(e)}fetchNextPage(e){return this.fetch({...e,meta:{fetchMore:{direction:"forward"}}})}fetchPreviousPage(e){return this.fetch({...e,meta:{fetchMore:{direction:"backward"}}})}createResult(e,t){var g,p,c,b;const{state:s}=e,r=super.createResult(e,t),{isFetching:n,isRefetching:a}=r,h=n&&((p=(g=s.fetchMeta)==null?void 0:g.fetchMore)==null?void 0:p.direction)==="forward",l=n&&((b=(c=s.fetchMeta)==null?void 0:c.fetchMore)==null?void 0:b.direction)==="backward";return{...r,fetchNextPage:this.fetchNextPage,fetchPreviousPage:this.fetchPreviousPage,hasNextPage:ds(t,s.data),hasPreviousPage:fs(t,s.data),isFetchingNextPage:h,isFetchingPreviousPage:l,isRefetching:a&&!h&&!l}}},nt,V,k,J,Dt,Jt,zt,ve,qe,vs=(qe=class extends Ut{constructor(t,s){super();o(this,Dt);o(this,zt);o(this,nt,void 0);o(this,V,void 0);o(this,k,void 0);o(this,J,void 0);u(this,V,void 0),u(this,nt,t),this.setOptions(s),this.bindMethods(),f(this,Dt,Jt).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(t){var r;const s=this.options;this.options=i(this,nt).defaultMutationOptions(t),Xt(s,this.options)||i(this,nt).getMutationCache().notify({type:"observerOptionsUpdated",mutation:i(this,k),observer:this}),(r=i(this,k))==null||r.setOptions(this.options),s!=null&&s.mutationKey&&this.options.mutationKey&&yt(s.mutationKey)!==yt(this.options.mutationKey)&&this.reset()}onUnsubscribe(){var t;this.hasListeners()||(t=i(this,k))==null||t.removeObserver(this)}onMutationUpdate(t){f(this,Dt,Jt).call(this),f(this,zt,ve).call(this,t)}getCurrentResult(){return i(this,V)}reset(){var t;(t=i(this,k))==null||t.removeObserver(this),u(this,k,void 0),f(this,Dt,Jt).call(this),f(this,zt,ve).call(this)}mutate(t,s){var r;return u(this,J,s),(r=i(this,k))==null||r.removeObserver(this),u(this,k,i(this,nt).getMutationCache().build(i(this,nt),this.options)),i(this,k).addObserver(this),i(this,k).execute(t)}},nt=new WeakMap,V=new WeakMap,k=new WeakMap,J=new WeakMap,Dt=new WeakSet,Jt=function(){var s;const t=((s=i(this,k))==null?void 0:s.state)??He();u(this,V,{...t,isPending:t.status==="pending",isSuccess:t.status==="success",isError:t.status==="error",isIdle:t.status==="idle",mutate:this.mutate,reset:this.reset})},zt=new WeakSet,ve=function(t){S.batch(()=>{var s,r,n,a,h,l,g,p;if(i(this,J)&&this.hasListeners()){const c=i(this,V).variables,b=i(this,V).context;(t==null?void 0:t.type)==="success"?((r=(s=i(this,J)).onSuccess)==null||r.call(s,t.data,c,b),(a=(n=i(this,J)).onSettled)==null||a.call(n,t.data,null,c,b)):(t==null?void 0:t.type)==="error"&&((l=(h=i(this,J)).onError)==null||l.call(h,t.error,c,b),(p=(g=i(this,J)).onSettled)==null||p.call(g,void 0,t.error,c,b))}this.listeners.forEach(c=>{c(i(this,V))})})},qe),$e=M.createContext(void 0),ze=e=>{const t=M.useContext($e);if(e)return e;if(!t)throw new Error("No QueryClient set, use QueryClientProvider to set one");return t},xs=({client:e,children:t})=>(M.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]),M.createElement($e.Provider,{value:e},t)),We=M.createContext(!1),gs=()=>M.useContext(We);We.Provider;function bs(){let e=!1;return{clearReset:()=>{e=!1},reset:()=>{e=!0},isReset:()=>e}}var Os=M.createContext(bs()),ws=()=>M.useContext(Os);function Ve(e,t){return typeof e=="function"?e(...t):!!e}var Ps=(e,t)=>{(e.suspense||e.throwOnError)&&(t.isReset()||(e.retryOnMount=!1))},Cs=e=>{M.useEffect(()=>{e.clearReset()},[e])},Rs=({result:e,errorResetBoundary:t,throwOnError:s,query:r})=>e.isError&&!t.isReset()&&!e.isFetching&&r&&Ve(s,[e.error,r]),Ss=e=>{e.suspense&&typeof e.staleTime!="number"&&(e.staleTime=1e3)},Fs=(e,t)=>(e==null?void 0:e.suspense)&&t.isPending,Es=(e,t,s)=>t.fetchOptimistic(e).catch(()=>{s.clearReset()});function Je(e,t,s){const r=ze(s),n=gs(),a=ws(),h=r.defaultQueryOptions(e);h._optimisticResults=n?"isRestoring":"optimistic",Ss(h),Ps(h,a),Cs(a);const[l]=M.useState(()=>new t(r,h)),g=l.getOptimisticResult(h);if(M.useSyncExternalStore(M.useCallback(p=>{const c=n?()=>{}:l.subscribe(S.batchCalls(p));return l.updateResult(),c},[l,n]),()=>l.getCurrentResult(),()=>l.getCurrentResult()),M.useEffect(()=>{l.setOptions(h,{listeners:!1})},[h,l]),Fs(h,g))throw Es(h,l,a);if(Rs({result:g,errorResetBoundary:a,throwOnError:h.throwOnError,query:r.getQueryCache().get(h.queryHash)}))throw g.error;return h.notifyOnChangeProps?g:l.trackResult(g)}function Ts(e,t){return Je(e,Ge,t)}function Is(e,t){const s=ze(t),[r]=M.useState(()=>new vs(s,e));M.useEffect(()=>{r.setOptions(e)},[r,e]);const n=M.useSyncExternalStore(M.useCallback(h=>r.subscribe(S.batchCalls(h)),[r]),()=>r.getCurrentResult(),()=>r.getCurrentResult()),a=M.useCallback((h,l)=>{r.mutate(h,l).catch(Ms)},[r]);if(n.error&&Ve(r.options.throwOnError,[n.error]))throw n.error;return{...n,mutate:a,mutateAsync:n.mutate}}function Ms(){}function qs(e,t){return Je(e,ms,t)}var ks=function(){return null};export{Us as Q,ks as R,As as _,Is as a,xs as b,qs as c,Ts as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
