import{j as s}from"./@react-pdf/renderer-d806818e.js";import{r as c}from"./react-a84639bd.js";import{f as j,N as h}from"./index-4e58cea8.js";import"./@tanstack/react-query-devtools-32a2eb86.js";import"./react-dom-47c417a6.js";import"./react-router-dom-3e01f71a.js";import"./swiper-9dc9b1ac.js";import"./framer-motion-31cb7f15.js";import"./axios-28bc18a3.js";import"./react-pdf-3633ae72.js";import"./react-floating-whatsapp-31f2a923.js";import"./react-icons-293a2bbc.js";const P=()=>{const r=j();console.log("isAuthenticated ",r.isTokenValid);const l=()=>{r.logout()},[i,a]=c.useState({}),p=[{pregunta:"Pregunta 1",opciones:["Opción 1","Opción 2","Opción 3"],valores:[10,20,30]},{pregunta:"Pregunta 2",opciones:["Opción A","Opción B","Opción C"],valores:[15,25,35]},{pregunta:"Pregunta 3",opciones:["Opción X","Opción Y","Opción Z"],valores:[5,10,15]}],[d,u]=c.useState(0),x=async(o,t)=>{await n(),a(e=>({...e,[o]:t}))},n=()=>{const o=Object.values(i).reduce((t,e)=>t+e,0);console.log("Costo total del servicio:",o),u(o)};return s.jsxs("div",{children:[s.jsx(h,{}),s.jsx("button",{onClick:l,style:{padding:"100px"},children:"Logout"}),s.jsx("br",{}),s.jsx("br",{}),s.jsx("h1",{children:"Cotizador de Servicios"}),s.jsxs("div",{style:{display:"flex"},children:[s.jsx("div",{style:{flex:1},children:p.map(o=>s.jsxs("div",{children:[s.jsx("p",{children:o.pregunta}),o.opciones.map((t,e)=>s.jsxs("button",{onClick:()=>x(o.pregunta,o.valores[e]),children:[t,s.jsx("span",{children:i[o.pregunta]===o.valores[e]&&" ✅"})]},t))]},o.pregunta))}),s.jsxs("div",{style:{flex:1},children:[s.jsx("h2",{children:"Tarjeta de Valor"}),Object.entries(i).map(([o,t])=>s.jsxs("div",{children:[s.jsx("p",{children:o}),s.jsxs("p",{children:["Valor: ",t]})]},o)),s.jsxs("h6",{children:["Total: ",d]})]})]}),s.jsx("button",{onClick:n,children:"Calcular Costo"})]})};export{P as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY290aXphZG9yLTgwOTRjYzg4LmpzIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGFnZXMvY290aXphZG9yLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IE5hdkJhciB9IGZyb20gJy4uL2NvbXBvbmVudHMvbmF2QmFyJztcclxuaW1wb3J0IHsgdXNlQXV0aCB9IGZyb20gJy4uL2F1dGgvQXV0aFByb3ZpZGVyJztcclxuXHJcbmNvbnN0IENvdGl6YWRvcjogUmVhY3QuRkMgPSAoKSA9PiB7XHJcblxyXG4gICAgY29uc3QgYXV0aD11c2VBdXRoKCk7XHJcbiAgICBjb25zb2xlLmxvZyggXCJpc0F1dGhlbnRpY2F0ZWQgXCIsYXV0aC5pc1Rva2VuVmFsaWQpO1xyXG5cclxuICAgIGNvbnN0IGxvZ291dCA9ICgpID0+IHtcclxuICAgICAgICBhdXRoLmxvZ291dCgpO1xyXG4gICAgICB9O1xyXG4gICAgXHJcbiAgICBjb25zdCBbcmVzcHVlc3Rhcywgc2V0UmVzcHVlc3Rhc10gPSB1c2VTdGF0ZTx7IFtwcmVndW50YTogc3RyaW5nXTogbnVtYmVyIH0+KHt9KTtcclxuXHJcbiAgICAvLyBBcXXDrSBwdWVkZXMgb2J0ZW5lciBsYXMgcHJlZ3VudGFzIHkgc3VzIHZhbG9yZXMgZGVzZGUgbGEgYmFzZSBkZSBkYXRvc1xyXG4gICAgY29uc3QgcHJlZ3VudGFzID0gW1xyXG4gICAgICAgIHsgcHJlZ3VudGE6ICdQcmVndW50YSAxJywgb3BjaW9uZXM6IFsnT3BjacOzbiAxJywgJ09wY2nDs24gMicsICdPcGNpw7NuIDMnXSwgdmFsb3JlczogWzEwLCAyMCwgMzBdIH0sXHJcbiAgICAgICAgeyBwcmVndW50YTogJ1ByZWd1bnRhIDInLCBvcGNpb25lczogWydPcGNpw7NuIEEnLCAnT3BjacOzbiBCJywgJ09wY2nDs24gQyddLCB2YWxvcmVzOiBbMTUsIDI1LCAzNV0gfSxcclxuICAgICAgICB7IHByZWd1bnRhOiAnUHJlZ3VudGEgMycsIG9wY2lvbmVzOiBbJ09wY2nDs24gWCcsICdPcGNpw7NuIFknLCAnT3BjacOzbiBaJ10sIHZhbG9yZXM6IFs1LCAxMCwgMTVdIH0sXHJcbiAgICBcclxuICAgICAgICAvLyBBZ3JlZ2EgbcOhcyBwcmVndW50YXMgYXF1w61cclxuICAgIF07XHJcbiAgICBjb25zdCBbdG90YWwsIHNldFRvdGFsXSA9IHVzZVN0YXRlKDApO1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZVJlc3B1ZXN0YSA9IGFzeW5jIChwcmVndW50YTogc3RyaW5nLCB2YWxvcjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgYXdhaXQgY2FsY3VsYXJDb3N0b1NlcnZpY2lvKCk7XHJcbiAgICAgICAgc2V0UmVzcHVlc3RhcygocHJldlJlc3B1ZXN0YXMpID0+ICh7XHJcbiAgICAgICAgICAgIC4uLnByZXZSZXNwdWVzdGFzLFxyXG4gICAgICAgICAgICBbcHJlZ3VudGFdOiB2YWxvcixcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBjYWxjdWxhckNvc3RvU2VydmljaW8gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29zdG9Ub3RhbCA9IE9iamVjdC52YWx1ZXMocmVzcHVlc3RhcykucmVkdWNlKFxyXG4gICAgICAgICAgICAodG90YWwsIHZhbG9yKSA9PiB0b3RhbCArIHZhbG9yLFxyXG4gICAgICAgICAgICAwXHJcbiAgICAgICAgKTtcclxuICAgICAgICAvLyBBcXXDrSBwdWVkZXMgaGFjZXIgYWxnbyBjb24gZWwgY29zdG8gdG90YWwsIGNvbW8gbW9zdHJhcmxvIGVuIHBhbnRhbGxhIG8gZW52aWFybG8gYWwgc2Vydmlkb3JcclxuICAgICAgICBjb25zb2xlLmxvZygnQ29zdG8gdG90YWwgZGVsIHNlcnZpY2lvOicsIGNvc3RvVG90YWwpO1xyXG4gICAgICAgIHNldFRvdGFsKGNvc3RvVG90YWwpO1xyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxOYXZCYXIgLz5cclxuICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtsb2dvdXR9IHN0eWxlPXt7cGFkZGluZzpcIjEwMHB4XCJ9fT5Mb2dvdXQ8L2J1dHRvbj5cclxuICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgIDxiciAvPlxyXG4gICAgICAgICAgICA8aDE+Q290aXphZG9yIGRlIFNlcnZpY2lvczwvaDE+XHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgZGlzcGxheTogJ2ZsZXgnIH19PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBzdHlsZT17eyBmbGV4OiAxIH19PlxyXG4gICAgICAgICAgICAgICAgICAgIHtwcmVndW50YXMubWFwKChwcmVndW50YSkgPT4gKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGtleT17cHJlZ3VudGEucHJlZ3VudGF9PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+e3ByZWd1bnRhLnByZWd1bnRhfTwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwcmVndW50YS5vcGNpb25lcy5tYXAoKG9wY2lvbiwgaW5kZXgpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17b3BjaW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVSZXNwdWVzdGEocHJlZ3VudGEucHJlZ3VudGEsIHByZWd1bnRhLnZhbG9yZXNbaW5kZXhdKX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7b3BjaW9ufVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtyZXNwdWVzdGFzW3ByZWd1bnRhLnByZWd1bnRhXSA9PT0gcHJlZ3VudGEudmFsb3Jlc1tpbmRleF0gJiYgJyDinIUnfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHN0eWxlPXt7IGZsZXg6IDEgfX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPlRhcmpldGEgZGUgVmFsb3I8L2gyPlxyXG4gICAgICAgICAgICAgICAgICAgIHtPYmplY3QuZW50cmllcyhyZXNwdWVzdGFzKS5tYXAoKFtwcmVndW50YSwgdmFsb3JdKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYga2V5PXtwcmVndW50YX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD57cHJlZ3VudGF9PC9wPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+VmFsb3I6IHt2YWxvcn08L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICAgICAgICAgIDxoNj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgVG90YWw6IHt0b3RhbH1cclxuICAgICAgICAgICAgICAgICAgICA8L2g2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9e2NhbGN1bGFyQ29zdG9TZXJ2aWNpb30+Q2FsY3VsYXIgQ29zdG88L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb3RpemFkb3I7XHJcblxyXG5cclxuXHJcblxyXG4iXSwibmFtZXMiOlsiQ290aXphZG9yIiwiYXV0aCIsInVzZUF1dGgiLCJsb2dvdXQiLCJyZXNwdWVzdGFzIiwic2V0UmVzcHVlc3RhcyIsInVzZVN0YXRlIiwicHJlZ3VudGFzIiwidG90YWwiLCJzZXRUb3RhbCIsImhhbmRsZVJlc3B1ZXN0YSIsInByZWd1bnRhIiwidmFsb3IiLCJjYWxjdWxhckNvc3RvU2VydmljaW8iLCJwcmV2UmVzcHVlc3RhcyIsImNvc3RvVG90YWwiLCJqc3giLCJOYXZCYXIiLCJqc3hzIiwib3BjaW9uIiwiaW5kZXgiXSwibWFwcGluZ3MiOiJzZEFJQSxNQUFNQSxFQUFzQixJQUFNLENBRTlCLE1BQU1DLEVBQUtDLElBQ0gsUUFBQSxJQUFLLG1CQUFtQkQsRUFBSyxZQUFZLEVBRWpELE1BQU1FLEVBQVMsSUFBTSxDQUNqQkYsRUFBSyxPQUFPLENBQUEsRUFHVixDQUFDRyxFQUFZQyxDQUFhLEVBQUlDLEVBQUEsU0FBeUMsQ0FBRSxDQUFBLEVBR3pFQyxFQUFZLENBQ2QsQ0FBRSxTQUFVLGFBQWMsU0FBVSxDQUFDLFdBQVksV0FBWSxVQUFVLEVBQUcsUUFBUyxDQUFDLEdBQUksR0FBSSxFQUFFLENBQUUsRUFDaEcsQ0FBRSxTQUFVLGFBQWMsU0FBVSxDQUFDLFdBQVksV0FBWSxVQUFVLEVBQUcsUUFBUyxDQUFDLEdBQUksR0FBSSxFQUFFLENBQUUsRUFDaEcsQ0FBRSxTQUFVLGFBQWMsU0FBVSxDQUFDLFdBQVksV0FBWSxVQUFVLEVBQUcsUUFBUyxDQUFDLEVBQUcsR0FBSSxFQUFFLENBQUUsQ0FBQSxFQUk3RixDQUFDQyxFQUFPQyxDQUFRLEVBQUlILFdBQVMsQ0FBQyxFQUU5QkksRUFBa0IsTUFBT0MsRUFBa0JDLElBQWtCLENBQy9ELE1BQU1DLEVBQXNCLEVBQzVCUixFQUFlUyxJQUFvQixDQUMvQixHQUFHQSxFQUNILENBQUNILENBQVEsRUFBR0MsQ0FFZCxFQUFBLENBQUEsRUFLQUMsRUFBd0IsSUFBTSxDQUNoQyxNQUFNRSxFQUFhLE9BQU8sT0FBT1gsQ0FBVSxFQUFFLE9BQ3pDLENBQUNJLEVBQU9JLElBQVVKLEVBQVFJLEVBQzFCLENBQUEsRUFHSSxRQUFBLElBQUksNEJBQTZCRyxDQUFVLEVBQ25ETixFQUFTTSxDQUFVLENBQUEsRUFHdkIsY0FDSyxNQUNHLENBQUEsU0FBQSxDQUFBQyxFQUFBLElBQUNDLEVBQU8sRUFBQSxFQUNSRCxFQUFBQSxJQUFDLFVBQU8sUUFBU2IsRUFBUSxNQUFPLENBQUMsUUFBUSxPQUFPLEVBQUcsU0FBTSxRQUFBLENBQUEsUUFDeEQsS0FBRyxFQUFBLFFBQ0gsS0FBRyxFQUFBLEVBQ0phLEVBQUFBLElBQUMsTUFBRyxTQUFzQix3QkFBQSxDQUFBLFNBQ3pCLE1BQUksQ0FBQSxNQUFPLENBQUUsUUFBUyxNQUNuQixFQUFBLFNBQUEsQ0FBQ0EsRUFBQSxJQUFBLE1BQUEsQ0FBSSxNQUFPLENBQUUsS0FBTSxDQUFBLEVBQ2YsU0FBQVQsRUFBVSxJQUFLSSxHQUNaTyxFQUFBLEtBQUMsTUFDRyxDQUFBLFNBQUEsQ0FBQ0YsRUFBQUEsSUFBQSxJQUFBLENBQUcsV0FBUyxRQUFTLENBQUEsRUFDckJMLEVBQVMsU0FBUyxJQUFJLENBQUNRLEVBQVFDLElBQzVCRixFQUFBLEtBQUMsU0FBQSxDQUVHLFFBQVMsSUFBTVIsRUFBZ0JDLEVBQVMsU0FBVUEsRUFBUyxRQUFRUyxDQUFLLENBQUMsRUFHeEUsU0FBQSxDQUFBRCxFQUNESCxFQUFBQSxJQUFDLE9BQ0ksQ0FBQSxTQUFBWixFQUFXTyxFQUFTLFFBQVEsSUFBTUEsRUFBUyxRQUFRUyxDQUFLLEdBQUssSUFFbEUsQ0FBQSxDQUFBLENBQUEsRUFSS0QsQ0FBQSxDQVVaLENBZEssQ0FBQSxFQUFBUixFQUFTLFFBZW5CLENBQ0gsRUFDTCxTQUNDLE1BQUksQ0FBQSxNQUFPLENBQUUsS0FBTSxDQUNoQixFQUFBLFNBQUEsQ0FBQUssRUFBQUEsSUFBQyxNQUFHLFNBQWdCLGtCQUFBLENBQUEsRUFDbkIsT0FBTyxRQUFRWixDQUFVLEVBQUUsSUFBSSxDQUFDLENBQUNPLEVBQVVDLENBQUssSUFDN0NNLEVBQUFBLEtBQUMsTUFDRyxDQUFBLFNBQUEsQ0FBQUYsRUFBQUEsSUFBQyxLQUFHLFNBQVNMLENBQUEsQ0FBQSxTQUNaLElBQUUsQ0FBQSxTQUFBLENBQUEsVUFBUUMsQ0FBQSxFQUFNLENBQUEsQ0FBQSxFQUZYRCxDQUdWLENBQ0gsU0FDQSxLQUFHLENBQUEsU0FBQSxDQUFBLFVBQ1FILENBQUEsRUFDWixDQUFBLEVBQ0osQ0FBQSxFQUNKLEVBQ0NRLEVBQUEsSUFBQSxTQUFBLENBQU8sUUFBU0gsRUFBdUIsU0FBYyxpQkFBQSxDQUMxRCxDQUFBLENBQUEsQ0FFUiJ9
