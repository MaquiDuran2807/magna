import{_ as j,c as p}from"./@tanstack/react-query-devtools-32a2eb86.js";import{j as e}from"./@react-pdf/renderer-d806818e.js";import{r as o,b as f}from"./react-a84639bd.js";import{B as N,S as v,f as b,a as y}from"./sidebarBolgs-ac0e135a.js";import{L as x}from"./react-router-dom-3e01f71a.js";import{a as S}from"./index.esm-6aca8226.js";import"./index-4e58cea8.js";import"./react-dom-47c417a6.js";import"./swiper-9dc9b1ac.js";import"./framer-motion-31cb7f15.js";import"./axios-28bc18a3.js";import"./react-pdf-3633ae72.js";import"./react-floating-whatsapp-31f2a923.js";import"./react-icons-293a2bbc.js";import"./index.esm-59189682.js";const B=({blogs:i,search:a})=>e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"row",children:[a&&a.length===0&&e.jsx("h3",{children:"No se encontraron resultados"}),a&&a.length>0&&e.jsx("h3",{children:"Resultados de la búsqueda"}),a&&(a==null?void 0:a.map(s=>e.jsx("div",{className:"col-lg-4 col-md-4 col-sm-6 ",children:e.jsx(x,{to:`/blog/${s.id}`,className:"link-blogs",children:e.jsxs("div",{className:"card card-blog mt-3 small-card",children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:s.image,className:"img-fluid small-image",alt:s.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:s.title}),e.jsxs("p",{className:"card-text",children:[s.description.slice(0,200),"..."]})]})]})})},s.id))),a&&a.length>0&&e.jsx("hr",{className:"mt-5"})]}),e.jsx("div",{className:"row",children:i.map(s=>{let r="",l="",c="";return s.important===!1?(r="col-lg-4 col-md-4 col-sm-6",c="small-card",l="small-image"):s.important===!0?(r="col-lg-6 col-md-12 col-sm-12 ",l="big-image",c="big-card"):(r="col-lg-3 col-md-4 col-sm-6",l="small-image",c="small-card"),e.jsx("div",{className:r,children:e.jsx(x,{to:`/blog/${s.id}`,className:"link-blogs",children:e.jsxs("div",{className:`card card-blog mt-3 ${c}`,children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:s.image,className:` img-fluid ${l}`,alt:s.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:s.title}),e.jsxs("p",{className:"card-text",children:[s.description.slice(0,200),"..."]})]})]})})},s.id)})})]}),E=({setFilter:i})=>{const[a,s]=o.useState(""),r=l=>{s(l.target.value),i(l.target.value)};return e.jsxs("div",{children:[e.jsx("input",{type:"text",value:a,onChange:r,placeholder:"Buscar...",className:"blog-search"}),e.jsx(S,{className:"ms-2"})]})},P=f.lazy(()=>j(()=>import("./spinner-20db3d9c.js"),["static/spinner-20db3d9c.js","static/@react-pdf/renderer-d806818e.js","static/react-a84639bd.js","static/Animation - 1706024995672-958eeb33.js","static/framer-motion-31cb7f15.js"])),O=()=>{const[i,a]=o.useState(""),[s,r]=o.useState(null),{data:l,isError:c,isLoading:g,fetchNextPage:h,hasNextPage:n,isFetchingNextPage:d}=p({queryKey:["blogs"],queryFn:({pageParam:t=0})=>y(t),initialPageParam:"1",staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30,getNextPageParam:t=>{if(console.log(t,"lastPage"),t!=null&&t.nextPage)return console.log(t.nextPage,"lastPage.nextPage"),t.nextPage.split("=")[1]}});if(o.useEffect(()=>{if(!i)return;(async()=>{const m=await b(i);m&&r(m)})()},[i]),o.useEffect(()=>{l&&l.pages[0]&&console.log(l.pages[0].blogs,"data.pages[0].blogs")},[]),c)return e.jsx("div",{children:"Error"});if(g)return e.jsx(P,{});if(console.log(l,"data"),!l)return;const u=l.pages.flatMap(t=>(t==null?void 0:t.blogs)??[]);return e.jsx("div",{className:"blog-container pt-3",children:e.jsx(N,{children:e.jsxs("div",{className:"container-fluid",children:[e.jsx("div",{className:"blog-header  text-center",children:e.jsx("h1",{children:"MagnaBlog"})}),e.jsx("div",{className:" text-center",children:e.jsx(E,{setFilter:a})}),e.jsxs("div",{className:"blog-cards ",children:[e.jsxs("div",{className:"row",children:[e.jsx("div",{className:"col-lg-8 col-12",children:e.jsx(B,{blogs:u,search:s})}),e.jsx("div",{className:"col-md-4 col-12",children:e.jsx(v,{})})]}),e.jsx("button",{onClick:()=>h(),className:"btn btn-primary",type:"button",disabled:!n||d,style:{marginTop:"2rem"},children:d?"Loading more...":n?"Cargar más blogs":"No hay más blogs"})]})]})})})};export{O as default};


//# sourceMappingURL=data:application/json;base64,