import{Q as j,w as x,x as N,y as p,z as v,j as e,_ as P}from"./main-4eee1cc0.js";import{r as d,a as b}from"./react-1cdf6ce0.js";import{B as y,S as B,f as S,a as w}from"./sidebarBolgs-d2e048e3.js";import{L as f}from"./react-router-dom-6615ee3c.js";import{a as F}from"./index.esm-59187f3a.js";import{u as M}from"./useLazyload-da8a0755.js";import"./react-dom-983a5519.js";import"./floawhatsapp-1b7d5e68.js";import"./footer1-48ade6b9.js";import"./index.esm-90d987f3.js";import"./index.esm-135f59b5.js";import"./index.esm-37eb7c17.js";var R=class extends j{constructor(s,t){super(s,t)}bindMethods(){super.bindMethods(),this.fetchNextPage=this.fetchNextPage.bind(this),this.fetchPreviousPage=this.fetchPreviousPage.bind(this)}setOptions(s,t){super.setOptions({...s,behavior:x()},t)}getOptimisticResult(s){return s.behavior=x(),super.getOptimisticResult(s)}fetchNextPage(s){return this.fetch({...s,meta:{fetchMore:{direction:"forward"}}})}fetchPreviousPage(s){return this.fetch({...s,meta:{fetchMore:{direction:"backward"}}})}createResult(s,t){var n,o,g,i;const{state:a}=s,c=super.createResult(s,t),{isFetching:r,isRefetching:l}=c,m=r&&((o=(n=a.fetchMeta)==null?void 0:n.fetchMore)==null?void 0:o.direction)==="forward",h=r&&((i=(g=a.fetchMeta)==null?void 0:g.fetchMore)==null?void 0:i.direction)==="backward";return{...c,fetchNextPage:this.fetchNextPage,fetchPreviousPage:this.fetchPreviousPage,hasNextPage:N(t,a.data),hasPreviousPage:p(t,a.data),isFetchingNextPage:m,isFetchingPreviousPage:h,isRefetching:l&&!m&&!h}}};function L(s,t){return v(s,R,t)}const O=({blogs:s,search:t})=>e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"row",children:[t&&t.length===0&&e.jsx("h3",{children:"No se encontraron resultados"}),t&&t.length>0&&e.jsx("h3",{children:"Resultados de la búsqueda"}),t&&(t==null?void 0:t.map(a=>e.jsx("div",{className:"col-lg-4 col-md-4 col-sm-6 ",children:e.jsx(f,{to:`/blog/${a.id}`,className:"link-blogs",children:e.jsxs("div",{className:"card card-blog mt-3 small-card",children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:a.image,className:"img-fluid small-image",alt:a.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:a.title}),e.jsxs("p",{className:"card-text",children:[a.description.slice(0,200),"..."]})]})]})})},a.id))),t&&t.length>0&&e.jsx("hr",{className:"mt-5"})]}),e.jsx("div",{className:"row",children:s.map(a=>{let c="",r="",l="";return a.important===!1?(c="col-lg-4 col-md-4 col-sm-6",l="small-card",r="small-image"):a.important===!0?(c="col-lg-6 col-md-12 col-sm-12 ",r="big-image",l="big-card"):(c="col-lg-3 col-md-4 col-sm-6",r="small-image",l="small-card"),e.jsx("div",{className:c,children:e.jsx(f,{to:`/blog/${a.id}`,className:"link-blogs",children:e.jsxs("div",{className:`card card-blog mt-3 ${l}`,children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:a.image,className:` img-fluid ${r}`,alt:a.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:a.title}),e.jsxs("p",{className:"card-text",children:[a.description.slice(0,200),"..."]})]})]})})},a.id)})})]}),E=({setFilter:s})=>{const[t,a]=d.useState(""),c=r=>{a(r.target.value),s(r.target.value)};return e.jsxs("div",{children:[e.jsx("input",{type:"text",value:t,onChange:c,placeholder:"Buscar...",className:"blog-search"}),e.jsx(F,{className:"ms-2"})]})},_=b.lazy(()=>P(()=>import("./main-4eee1cc0.js").then(s=>s.a4),["static/main-4eee1cc0.js","static/react-1cdf6ce0.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js","static/index-1b6ebd60.css"])),C=()=>{const[s,t]=d.useState(""),[a,c]=d.useState(null),{data:r,isError:l,isLoading:m,fetchNextPage:h,hasNextPage:n,isFetchingNextPage:o}=L({queryKey:["blogs"],queryFn:({pageParam:i=0})=>w(i),initialPageParam:"1",staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30,getNextPageParam:i=>{if(console.log(i,"lastPage"),i!=null&&i.nextPage)return console.log(i.nextPage,"lastPage.nextPage"),i.nextPage.split("=")[1]}});if(d.useEffect(()=>{if(!s)return;(async()=>{const u=await S(s);u&&c(u)})()},[s]),d.useEffect(()=>{r&&r.pages[0]&&console.log(r.pages[0].blogs,"data.pages[0].blogs")},[]),l)return e.jsx("div",{children:"Error"});if(m)return e.jsx(_,{});if(console.log(r,"data"),!r)return;const g=r.pages.flatMap(i=>(i==null?void 0:i.blogs)??[]);return e.jsx("div",{className:"blog-container pt-3",children:e.jsx(y,{children:e.jsxs("div",{className:"container-fluid",children:[e.jsx("div",{className:"blog-header  text-center",children:e.jsx("h1",{children:"MagnaBlog"})}),e.jsx("div",{className:" text-center",children:e.jsx(E,{setFilter:t})}),e.jsxs("div",{className:"blog-cards ",children:[e.jsxs("div",{className:"row",children:[e.jsx("div",{className:"col-lg-8 col-12",children:e.jsx(O,{blogs:g,search:a})}),e.jsx("div",{className:"col-md-4 col-12",children:e.jsx(B,{})})]}),e.jsx("button",{onClick:()=>h(),className:"btn btn-primary",type:"button",disabled:!n||o,style:{marginTop:"2rem"},children:o?"Loading more...":n?"Cargar más blogs":"No hay más blogs"})]})]})})})};function G(){const{isVisible:s,ref:t}=M("100px");return e.jsx("div",{id:"LazyBlog",ref:t,children:s?e.jsx(C,{}):null})}export{G as default};


//# sourceMappingURL=data:application/json;base64,