import{j as s}from"./@react-pdf/renderer-d806818e.js";import{r as l}from"./react-a84639bd.js";import{g as Z,u as P}from"./AuthProvider-c4c28575.js";import{j as f,q as ee,k as p,r as oe,s as se,N as te}from"./main-4c38b34e.js";import{b as ae}from"./react-router-dom-10f375c6.js";import{P as y}from"./react-pdf-3633ae72.js";import"./@tanstack/react-query-devtools-5e1ae0d5.js";import"./axios-28bc18a3.js";import"./react-dom-47c417a6.js";import"./splashScreen-0d7c0e1b.js";import"./swiper-dad05047.js";import"./framer-motion-31cb7f15.js";import"./react-floating-whatsapp-31f2a923.js";import"./react-icons-293a2bbc.js";const T=l.forwardRef(({as:e,bsPrefix:o,variant:t="primary",size:a,active:n=!1,disabled:r=!1,className:i,...d},m)=>{const c=f(o,"btn"),[u,{tagName:h}]=ee({tagName:e,disabled:r,...d}),j=h;return s.jsx(j,{...u,...d,ref:m,disabled:r,className:p(i,c,n&&"active",t&&`${c}-${t}`,a&&`${c}-${a}`,d.href&&r&&"disabled")})});T.displayName="Button";const ne=T;function re(e,o){return l.Children.toArray(e).some(t=>l.isValidElement(t)&&t.type===o)}function le({as:e,bsPrefix:o,className:t,...a}){o=f(o,"col");const n=oe(),r=se(),i=[],d=[];return n.forEach(m=>{const c=a[m];delete a[m];let u,h,j;typeof c=="object"&&c!=null?{span:u,offset:h,order:j}=c:u=c;const x=m!==r?`-${m}`:"";u&&i.push(u===!0?`${o}${x}`:`${o}${x}-${u}`),j!=null&&d.push(`order${x}-${j}`),h!=null&&d.push(`offset${x}-${h}`)}),[{...a,className:p(t,...i,...d)},{as:e,bsPrefix:o,spans:i}]}const b=l.forwardRef((e,o)=>{const[{className:t,...a},{as:n="div",bsPrefix:r,spans:i}]=le(e);return s.jsx(n,{...a,ref:o,className:p(t,!i.length&&r)})});b.displayName="Col";const ce=b,ie={type:y.string,tooltip:y.bool,as:y.elementType},k=l.forwardRef(({as:e="div",className:o,type:t="valid",tooltip:a=!1,...n},r)=>s.jsx(e,{...n,ref:r,className:p(o,`${t}-${a?"tooltip":"feedback"}`)}));k.displayName="Feedback";k.propTypes=ie;const B=k,me=l.createContext({}),F=me,S=l.forwardRef(({id:e,bsPrefix:o,className:t,type:a="checkbox",isValid:n=!1,isInvalid:r=!1,as:i="input",...d},m)=>{const{controlId:c}=l.useContext(F);return o=f(o,"form-check-input"),s.jsx(i,{...d,ref:m,type:a,id:e||c,className:p(t,o,n&&"is-valid",r&&"is-invalid")})});S.displayName="FormCheckInput";const E=S,G=l.forwardRef(({bsPrefix:e,className:o,htmlFor:t,...a},n)=>{const{controlId:r}=l.useContext(F);return e=f(e,"form-check-label"),s.jsx("label",{...a,ref:n,htmlFor:t||r,className:p(o,e)})});G.displayName="FormCheckLabel";const w=G,O=l.forwardRef(({id:e,bsPrefix:o,bsSwitchPrefix:t,inline:a=!1,reverse:n=!1,disabled:r=!1,isValid:i=!1,isInvalid:d=!1,feedbackTooltip:m=!1,feedback:c,feedbackType:u,className:h,style:j,title:x="",type:$="checkbox",label:C,children:v,as:Q="input",...U},W)=>{o=f(o,"form-check"),t=f(t,"form-switch");const{controlId:R}=l.useContext(F),X=l.useMemo(()=>({controlId:e||R}),[R,e]),L=!v&&C!=null&&C!==!1||re(v,w),Y=s.jsx(E,{...U,type:$==="switch"?"checkbox":$,ref:W,isValid:i,isInvalid:d,disabled:r,as:Q});return s.jsx(F.Provider,{value:X,children:s.jsx("div",{style:j,className:p(h,L&&o,a&&`${o}-inline`,n&&`${o}-reverse`,$==="switch"&&t),children:v||s.jsxs(s.Fragment,{children:[Y,L&&s.jsx(w,{title:x,children:C}),c&&s.jsx(B,{type:u,tooltip:m,children:c})]})})})});O.displayName="FormCheck";const N=Object.assign(O,{Input:E,Label:w}),M=l.forwardRef(({bsPrefix:e,type:o,size:t,htmlSize:a,id:n,className:r,isValid:i=!1,isInvalid:d=!1,plaintext:m,readOnly:c,as:u="input",...h},j)=>{const{controlId:x}=l.useContext(F);return e=f(e,"form-control"),s.jsx(u,{...h,type:o,size:a,ref:j,readOnly:c,id:n||x,className:p(r,m?`${e}-plaintext`:e,t&&`${e}-${t}`,o==="color"&&`${e}-color`,i&&"is-valid",d&&"is-invalid")})});M.displayName="FormControl";const de=Object.assign(M,{Feedback:B}),V=l.forwardRef(({className:e,bsPrefix:o,as:t="div",...a},n)=>(o=f(o,"form-floating"),s.jsx(t,{ref:n,className:p(e,o),...a})));V.displayName="FormFloating";const pe=V,A=l.forwardRef(({controlId:e,as:o="div",...t},a)=>{const n=l.useMemo(()=>({controlId:e}),[e]);return s.jsx(F.Provider,{value:n,children:s.jsx(o,{...t,ref:a})})});A.displayName="FormGroup";const D=A,q=l.forwardRef(({as:e="label",bsPrefix:o,column:t=!1,visuallyHidden:a=!1,className:n,htmlFor:r,...i},d)=>{const{controlId:m}=l.useContext(F);o=f(o,"form-label");let c="col-form-label";typeof t=="string"&&(c=`${c} ${c}-${t}`);const u=p(n,o,a&&"visually-hidden",t&&c);return r=r||m,t?s.jsx(ce,{ref:d,as:"label",className:u,htmlFor:r,...i}):s.jsx(e,{ref:d,className:u,htmlFor:r,...i})});q.displayName="FormLabel";const ue=q,z=l.forwardRef(({bsPrefix:e,className:o,id:t,...a},n)=>{const{controlId:r}=l.useContext(F);return e=f(e,"form-range"),s.jsx("input",{...a,type:"range",ref:n,className:p(o,e),id:t||r})});z.displayName="FormRange";const fe=z,_=l.forwardRef(({bsPrefix:e,size:o,htmlSize:t,className:a,isValid:n=!1,isInvalid:r=!1,id:i,...d},m)=>{const{controlId:c}=l.useContext(F);return e=f(e,"form-select"),s.jsx("select",{...d,size:t,ref:m,className:p(a,e,o&&`${e}-${o}`,n&&"is-valid",r&&"is-invalid"),id:i||c})});_.displayName="FormSelect";const he=_,H=l.forwardRef(({bsPrefix:e,className:o,as:t="small",muted:a,...n},r)=>(e=f(e,"form-text"),s.jsx(t,{...n,ref:r,className:p(o,e,a&&"text-muted")})));H.displayName="FormText";const je=H,J=l.forwardRef((e,o)=>s.jsx(N,{...e,ref:o,type:"switch"}));J.displayName="Switch";const Fe=Object.assign(J,{Input:N.Input,Label:N.Label}),K=l.forwardRef(({bsPrefix:e,className:o,children:t,controlId:a,label:n,...r},i)=>(e=f(e,"form-floating"),s.jsxs(D,{ref:i,className:p(o,e),controlId:a,...r,children:[t,s.jsx("label",{htmlFor:a,children:n})]})));K.displayName="FloatingLabel";const xe=K,ge={_ref:y.any,validated:y.bool,as:y.elementType},I=l.forwardRef(({className:e,validated:o,as:t="form",...a},n)=>s.jsx(t,{...a,ref:n,className:p(e,o&&"was-validated")}));I.displayName="Form";I.propTypes=ge;const g=Object.assign(I,{Group:D,Control:de,Floating:pe,Check:N,Switch:Fe,Label:ue,Text:je,Range:fe,Select:he,FloatingLabel:xe});const Ee=()=>{const[e,o]=l.useState(""),[t,a]=l.useState(""),{mutateAsync:n}=Z(),r=P(),i=r.isTokenValid,d=async m=>{m.preventDefault();try{await n({email:e,password:t})&&await r.validateToken()}catch(c){console.log(c)}};return l.useEffect(()=>{},[]),i?s.jsx(ae,{to:"/cotizador"}):s.jsxs("div",{className:" contenedor-login",children:[s.jsx(te,{}),s.jsx("section",{className:"section-login",children:s.jsx("div",{className:"container login text-white",children:s.jsxs(g,{onSubmit:d,className:"row",children:[s.jsxs("div",{className:"col-10 col-sm-6 ",children:[s.jsx("h1",{children:"Iniciar sesión"}),s.jsxs(g.Group,{controlId:"formBasicEmail",children:[s.jsx(g.Label,{children:"Email"}),s.jsx(g.Control,{type:"email",placeholder:"Ingresa tu email",onChange:m=>o(m.target.value)})]}),s.jsxs(g.Group,{controlId:"formBasicPassword",children:[s.jsx(g.Label,{children:"Contraseña"}),s.jsx(g.Control,{type:"password",placeholder:"Ingresa tu contraseña",onChange:m=>a(m.target.value)})]}),s.jsx("br",{}),s.jsx(ne,{variant:"primary",type:"submit",children:"Iniciar sesión"})]}),s.jsxs("div",{className:"col-12 col-sm-6 rig text-center container ",children:[s.jsx("h2",{children:"Magna"}),s.jsx("br",{}),s.jsx("p",{className:"text-white",children:"Ingeniería y Topografía"}),s.jsx("br",{}),s.jsx("h5",{children:'"Dando forma al mundo, un proyecto a la vez."'})]})]})})})]})};export{Ee as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4tYmU2NjI3YzQuanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0J1dHRvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0VsZW1lbnRDaGlsZHJlbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0NvbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0ZlZWRiYWNrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybUNvbnRleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtQ2hlY2tJbnB1dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1ib290c3RyYXAvZXNtL0Zvcm1DaGVja0xhYmVsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybUNoZWNrLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybUNvbnRyb2wuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtRmxvYXRpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtR3JvdXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtTGFiZWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtUmFuZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Gb3JtU2VsZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybVRleHQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9Td2l0Y2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcmVhY3QtYm9vdHN0cmFwL2VzbS9GbG9hdGluZ0xhYmVsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWJvb3RzdHJhcC9lc20vRm9ybS5qcyIsIi4uLy4uL3NyYy9wYWdlcy9sb2dpbi50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQnV0dG9uUHJvcHMgfSBmcm9tICdAcmVzdGFydC91aS9CdXR0b24nO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBCdXR0b24gPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBhcyxcbiAgYnNQcmVmaXgsXG4gIHZhcmlhbnQgPSAncHJpbWFyeScsXG4gIHNpemUsXG4gIGFjdGl2ZSA9IGZhbHNlLFxuICBkaXNhYmxlZCA9IGZhbHNlLFxuICBjbGFzc05hbWUsXG4gIC4uLnByb3BzXG59LCByZWYpID0+IHtcbiAgY29uc3QgcHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnYnRuJyk7XG4gIGNvbnN0IFtidXR0b25Qcm9wcywge1xuICAgIHRhZ05hbWVcbiAgfV0gPSB1c2VCdXR0b25Qcm9wcyh7XG4gICAgdGFnTmFtZTogYXMsXG4gICAgZGlzYWJsZWQsXG4gICAgLi4ucHJvcHNcbiAgfSk7XG4gIGNvbnN0IENvbXBvbmVudCA9IHRhZ05hbWU7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDb21wb25lbnQsIHtcbiAgICAuLi5idXR0b25Qcm9wcyxcbiAgICAuLi5wcm9wcyxcbiAgICByZWY6IHJlZixcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcHJlZml4LCBhY3RpdmUgJiYgJ2FjdGl2ZScsIHZhcmlhbnQgJiYgYCR7cHJlZml4fS0ke3ZhcmlhbnR9YCwgc2l6ZSAmJiBgJHtwcmVmaXh9LSR7c2l6ZX1gLCBwcm9wcy5ocmVmICYmIGRpc2FibGVkICYmICdkaXNhYmxlZCcpXG4gIH0pO1xufSk7XG5CdXR0b24uZGlzcGxheU5hbWUgPSAnQnV0dG9uJztcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAsXG4gKiBidXQgb25seSBtYXBzIG92ZXIgY2hpbGRyZW4gdGhhdCBhcmUgXCJ2YWxpZCBlbGVtZW50c1wiLlxuICpcbiAqIFRoZSBtYXBGdW5jdGlvbiBwcm92aWRlZCBpbmRleCB3aWxsIGJlIG5vcm1hbGlzZWQgdG8gdGhlIGNvbXBvbmVudHMgbWFwcGVkLFxuICogc28gYW4gaW52YWxpZCBjb21wb25lbnQgd291bGQgbm90IGluY3JlYXNlIHRoZSBpbmRleC5cbiAqXG4gKi9cbmZ1bmN0aW9uIG1hcChjaGlsZHJlbiwgZnVuYykge1xuICBsZXQgaW5kZXggPSAwO1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBjaGlsZCA9PiAvKiNfX1BVUkVfXyovUmVhY3QuaXNWYWxpZEVsZW1lbnQoY2hpbGQpID8gZnVuYyhjaGlsZCwgaW5kZXgrKykgOiBjaGlsZCk7XG59XG5cbi8qKlxuICogSXRlcmF0ZXMgdGhyb3VnaCBjaGlsZHJlbiB0aGF0IGFyZSBcInZhbGlkIGVsZW1lbnRzXCIuXG4gKlxuICogVGhlIHByb3ZpZGVkIGZvckVhY2hGdW5jKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQgd2l0aCB0aGUgaW5kZXggcmVmbGVjdGluZyB0aGUgcG9zaXRpb24gcmVsYXRpdmUgdG8gXCJ2YWxpZCBjb21wb25lbnRzXCIuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY2hpbGRyZW4sIGZ1bmMpIHtcbiAgbGV0IGluZGV4ID0gMDtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgY2hpbGQgPT4ge1xuICAgIGlmICggLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGNoaWxkKSkgZnVuYyhjaGlsZCwgaW5kZXgrKyk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEZpbmRzIHdoZXRoZXIgYSBjb21wb25lbnQncyBgY2hpbGRyZW5gIHByb3AgaW5jbHVkZXMgYSBSZWFjdCBlbGVtZW50IG9mIHRoZVxuICogc3BlY2lmaWVkIHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGhhc0NoaWxkT2ZUeXBlKGNoaWxkcmVuLCB0eXBlKSB7XG4gIHJldHVybiBSZWFjdC5DaGlsZHJlbi50b0FycmF5KGNoaWxkcmVuKS5zb21lKGNoaWxkID0+IC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkgJiYgY2hpbGQudHlwZSA9PT0gdHlwZSk7XG59XG5leHBvcnQgeyBtYXAsIGZvckVhY2gsIGhhc0NoaWxkT2ZUeXBlIH07IiwiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4LCB1c2VCb290c3RyYXBCcmVha3BvaW50cywgdXNlQm9vdHN0cmFwTWluQnJlYWtwb2ludCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUNvbCh7XG4gIGFzLFxuICBic1ByZWZpeCxcbiAgY2xhc3NOYW1lLFxuICAuLi5wcm9wc1xufSkge1xuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2NvbCcpO1xuICBjb25zdCBicmVha3BvaW50cyA9IHVzZUJvb3RzdHJhcEJyZWFrcG9pbnRzKCk7XG4gIGNvbnN0IG1pbkJyZWFrcG9pbnQgPSB1c2VCb290c3RyYXBNaW5CcmVha3BvaW50KCk7XG4gIGNvbnN0IHNwYW5zID0gW107XG4gIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgYnJlYWtwb2ludHMuZm9yRWFjaChicmtQb2ludCA9PiB7XG4gICAgY29uc3QgcHJvcFZhbHVlID0gcHJvcHNbYnJrUG9pbnRdO1xuICAgIGRlbGV0ZSBwcm9wc1ticmtQb2ludF07XG4gICAgbGV0IHNwYW47XG4gICAgbGV0IG9mZnNldDtcbiAgICBsZXQgb3JkZXI7XG4gICAgaWYgKHR5cGVvZiBwcm9wVmFsdWUgPT09ICdvYmplY3QnICYmIHByb3BWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAoe1xuICAgICAgICBzcGFuLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIG9yZGVyXG4gICAgICB9ID0gcHJvcFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3BhbiA9IHByb3BWYWx1ZTtcbiAgICB9XG4gICAgY29uc3QgaW5maXggPSBicmtQb2ludCAhPT0gbWluQnJlYWtwb2ludCA/IGAtJHticmtQb2ludH1gIDogJyc7XG4gICAgaWYgKHNwYW4pIHNwYW5zLnB1c2goc3BhbiA9PT0gdHJ1ZSA/IGAke2JzUHJlZml4fSR7aW5maXh9YCA6IGAke2JzUHJlZml4fSR7aW5maXh9LSR7c3Bhbn1gKTtcbiAgICBpZiAob3JkZXIgIT0gbnVsbCkgY2xhc3Nlcy5wdXNoKGBvcmRlciR7aW5maXh9LSR7b3JkZXJ9YCk7XG4gICAgaWYgKG9mZnNldCAhPSBudWxsKSBjbGFzc2VzLnB1c2goYG9mZnNldCR7aW5maXh9LSR7b2Zmc2V0fWApO1xuICB9KTtcbiAgcmV0dXJuIFt7XG4gICAgLi4ucHJvcHMsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgLi4uc3BhbnMsIC4uLmNsYXNzZXMpXG4gIH0sIHtcbiAgICBhcyxcbiAgICBic1ByZWZpeCxcbiAgICBzcGFuc1xuICB9XTtcbn1cbmNvbnN0IENvbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKFxuLy8gTmVlZCB0byBkZWZpbmUgdGhlIGRlZmF1bHQgXCJhc1wiIGR1cmluZyBwcm9wIGRlc3RydWN0dXJpbmcgdG8gYmUgY29tcGF0aWJsZSB3aXRoIHN0eWxlZC1jb21wb25lbnRzIGdpdGh1Yi5jb20vcmVhY3QtYm9vdHN0cmFwL3JlYWN0LWJvb3RzdHJhcC9pc3N1ZXMvMzU5NVxuKHByb3BzLCByZWYpID0+IHtcbiAgY29uc3QgW3tcbiAgICBjbGFzc05hbWUsXG4gICAgLi4uY29sUHJvcHNcbiAgfSwge1xuICAgIGFzOiBDb21wb25lbnQgPSAnZGl2JyxcbiAgICBic1ByZWZpeCxcbiAgICBzcGFuc1xuICB9XSA9IHVzZUNvbChwcm9wcyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDb21wb25lbnQsIHtcbiAgICAuLi5jb2xQcm9wcyxcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCAhc3BhbnMubGVuZ3RoICYmIGJzUHJlZml4KVxuICB9KTtcbn0pO1xuQ29sLmRpc3BsYXlOYW1lID0gJ0NvbCc7XG5leHBvcnQgZGVmYXVsdCBDb2w7IiwiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgLyoqXG4gICAqIFNwZWNpZnkgd2hldGhlciB0aGUgZmVlZGJhY2sgaXMgZm9yIHZhbGlkIG9yIGludmFsaWQgZmllbGRzXG4gICAqXG4gICAqIEB0eXBlIHsoJ3ZhbGlkJ3wnaW52YWxpZCcpfVxuICAgKi9cbiAgdHlwZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgLyoqIERpc3BsYXkgZmVlZGJhY2sgYXMgYSB0b29sdGlwLiAqL1xuICB0b29sdGlwOiBQcm9wVHlwZXMuYm9vbCxcbiAgYXM6IFByb3BUeXBlcy5lbGVtZW50VHlwZVxufTtcbmNvbnN0IEZlZWRiYWNrID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoXG4vLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG4oe1xuICBhczogQ29tcG9uZW50ID0gJ2RpdicsXG4gIGNsYXNzTmFtZSxcbiAgdHlwZSA9ICd2YWxpZCcsXG4gIHRvb2x0aXAgPSBmYWxzZSxcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4gLyojX19QVVJFX18qL19qc3goQ29tcG9uZW50LCB7XG4gIC4uLnByb3BzLFxuICByZWY6IHJlZixcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgYCR7dHlwZX0tJHt0b29sdGlwID8gJ3Rvb2x0aXAnIDogJ2ZlZWRiYWNrJ31gKVxufSkpO1xuRmVlZGJhY2suZGlzcGxheU5hbWUgPSAnRmVlZGJhY2snO1xuRmVlZGJhY2sucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuZXhwb3J0IGRlZmF1bHQgRmVlZGJhY2s7IiwiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcblxuLy8gVE9ET1xuXG5jb25zdCBGb3JtQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KHt9KTtcbmV4cG9ydCBkZWZhdWx0IEZvcm1Db250ZXh0OyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IEZvcm1DaGVja0lucHV0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHtcbiAgaWQsXG4gIGJzUHJlZml4LFxuICBjbGFzc05hbWUsXG4gIHR5cGUgPSAnY2hlY2tib3gnLFxuICBpc1ZhbGlkID0gZmFsc2UsXG4gIGlzSW52YWxpZCA9IGZhbHNlLFxuICAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG4gIGFzOiBDb21wb25lbnQgPSAnaW5wdXQnLFxuICAuLi5wcm9wc1xufSwgcmVmKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb250cm9sSWRcbiAgfSA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2Zvcm0tY2hlY2staW5wdXQnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbXBvbmVudCwge1xuICAgIC4uLnByb3BzLFxuICAgIHJlZjogcmVmLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgaWQ6IGlkIHx8IGNvbnRyb2xJZCxcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgaXNWYWxpZCAmJiAnaXMtdmFsaWQnLCBpc0ludmFsaWQgJiYgJ2lzLWludmFsaWQnKVxuICB9KTtcbn0pO1xuRm9ybUNoZWNrSW5wdXQuZGlzcGxheU5hbWUgPSAnRm9ybUNoZWNrSW5wdXQnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUNoZWNrSW5wdXQ7IiwiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRm9ybUNoZWNrTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBic1ByZWZpeCxcbiAgY2xhc3NOYW1lLFxuICBodG1sRm9yLFxuICAuLi5wcm9wc1xufSwgcmVmKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb250cm9sSWRcbiAgfSA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2Zvcm0tY2hlY2stbGFiZWwnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwibGFiZWxcIiwge1xuICAgIC4uLnByb3BzLFxuICAgIHJlZjogcmVmLFxuICAgIGh0bWxGb3I6IGh0bWxGb3IgfHwgY29udHJvbElkLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KVxuICB9KTtcbn0pO1xuRm9ybUNoZWNrTGFiZWwuZGlzcGxheU5hbWUgPSAnRm9ybUNoZWNrTGFiZWwnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUNoZWNrTGFiZWw7IiwiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCwgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBGZWVkYmFjayBmcm9tICcuL0ZlZWRiYWNrJztcbmltcG9ydCBGb3JtQ2hlY2tJbnB1dCBmcm9tICcuL0Zvcm1DaGVja0lucHV0JztcbmltcG9ydCBGb3JtQ2hlY2tMYWJlbCBmcm9tICcuL0Zvcm1DaGVja0xhYmVsJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBoYXNDaGlsZE9mVHlwZSB9IGZyb20gJy4vRWxlbWVudENoaWxkcmVuJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5pbXBvcnQgeyBGcmFnbWVudCBhcyBfRnJhZ21lbnQgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmltcG9ydCB7IGpzeHMgYXMgX2pzeHMgfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IEZvcm1DaGVjayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIGlkLFxuICBic1ByZWZpeCxcbiAgYnNTd2l0Y2hQcmVmaXgsXG4gIGlubGluZSA9IGZhbHNlLFxuICByZXZlcnNlID0gZmFsc2UsXG4gIGRpc2FibGVkID0gZmFsc2UsXG4gIGlzVmFsaWQgPSBmYWxzZSxcbiAgaXNJbnZhbGlkID0gZmFsc2UsXG4gIGZlZWRiYWNrVG9vbHRpcCA9IGZhbHNlLFxuICBmZWVkYmFjayxcbiAgZmVlZGJhY2tUeXBlLFxuICBjbGFzc05hbWUsXG4gIHN0eWxlLFxuICB0aXRsZSA9ICcnLFxuICB0eXBlID0gJ2NoZWNrYm94JyxcbiAgbGFiZWwsXG4gIGNoaWxkcmVuLFxuICAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG4gIGFzID0gJ2lucHV0JyxcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4ge1xuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2Zvcm0tY2hlY2snKTtcbiAgYnNTd2l0Y2hQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNTd2l0Y2hQcmVmaXgsICdmb3JtLXN3aXRjaCcpO1xuICBjb25zdCB7XG4gICAgY29udHJvbElkXG4gIH0gPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KTtcbiAgY29uc3QgaW5uZXJGb3JtQ29udGV4dCA9IHVzZU1lbW8oKCkgPT4gKHtcbiAgICBjb250cm9sSWQ6IGlkIHx8IGNvbnRyb2xJZFxuICB9KSwgW2NvbnRyb2xJZCwgaWRdKTtcbiAgY29uc3QgaGFzTGFiZWwgPSAhY2hpbGRyZW4gJiYgbGFiZWwgIT0gbnVsbCAmJiBsYWJlbCAhPT0gZmFsc2UgfHwgaGFzQ2hpbGRPZlR5cGUoY2hpbGRyZW4sIEZvcm1DaGVja0xhYmVsKTtcbiAgY29uc3QgaW5wdXQgPSAvKiNfX1BVUkVfXyovX2pzeChGb3JtQ2hlY2tJbnB1dCwge1xuICAgIC4uLnByb3BzLFxuICAgIHR5cGU6IHR5cGUgPT09ICdzd2l0Y2gnID8gJ2NoZWNrYm94JyA6IHR5cGUsXG4gICAgcmVmOiByZWYsXG4gICAgaXNWYWxpZDogaXNWYWxpZCxcbiAgICBpc0ludmFsaWQ6IGlzSW52YWxpZCxcbiAgICBkaXNhYmxlZDogZGlzYWJsZWQsXG4gICAgYXM6IGFzXG4gIH0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogaW5uZXJGb3JtQ29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goXCJkaXZcIiwge1xuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgaGFzTGFiZWwgJiYgYnNQcmVmaXgsIGlubGluZSAmJiBgJHtic1ByZWZpeH0taW5saW5lYCwgcmV2ZXJzZSAmJiBgJHtic1ByZWZpeH0tcmV2ZXJzZWAsIHR5cGUgPT09ICdzd2l0Y2gnICYmIGJzU3dpdGNoUHJlZml4KSxcbiAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbiB8fCAvKiNfX1BVUkVfXyovX2pzeHMoX0ZyYWdtZW50LCB7XG4gICAgICAgIGNoaWxkcmVuOiBbaW5wdXQsIGhhc0xhYmVsICYmIC8qI19fUFVSRV9fKi9fanN4KEZvcm1DaGVja0xhYmVsLCB7XG4gICAgICAgICAgdGl0bGU6IHRpdGxlLFxuICAgICAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgICAgICB9KSwgZmVlZGJhY2sgJiYgLyojX19QVVJFX18qL19qc3goRmVlZGJhY2ssIHtcbiAgICAgICAgICB0eXBlOiBmZWVkYmFja1R5cGUsXG4gICAgICAgICAgdG9vbHRpcDogZmVlZGJhY2tUb29sdGlwLFxuICAgICAgICAgIGNoaWxkcmVuOiBmZWVkYmFja1xuICAgICAgICB9KV1cbiAgICAgIH0pXG4gICAgfSlcbiAgfSk7XG59KTtcbkZvcm1DaGVjay5kaXNwbGF5TmFtZSA9ICdGb3JtQ2hlY2snO1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmFzc2lnbihGb3JtQ2hlY2ssIHtcbiAgSW5wdXQ6IEZvcm1DaGVja0lucHV0LFxuICBMYWJlbDogRm9ybUNoZWNrTGFiZWxcbn0pOyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBGZWVkYmFjayBmcm9tICcuL0ZlZWRiYWNrJztcbmltcG9ydCBGb3JtQ29udGV4dCBmcm9tICcuL0Zvcm1Db250ZXh0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRm9ybUNvbnRyb2wgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBic1ByZWZpeCxcbiAgdHlwZSxcbiAgc2l6ZSxcbiAgaHRtbFNpemUsXG4gIGlkLFxuICBjbGFzc05hbWUsXG4gIGlzVmFsaWQgPSBmYWxzZSxcbiAgaXNJbnZhbGlkID0gZmFsc2UsXG4gIHBsYWludGV4dCxcbiAgcmVhZE9ubHksXG4gIC8vIE5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IFwiYXNcIiBkdXJpbmcgcHJvcCBkZXN0cnVjdHVyaW5nIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBzdHlsZWQtY29tcG9uZW50cyBnaXRodWIuY29tL3JlYWN0LWJvb3RzdHJhcC9yZWFjdC1ib290c3RyYXAvaXNzdWVzLzM1OTVcbiAgYXM6IENvbXBvbmVudCA9ICdpbnB1dCcsXG4gIC4uLnByb3BzXG59LCByZWYpID0+IHtcbiAgY29uc3Qge1xuICAgIGNvbnRyb2xJZFxuICB9ID0gdXNlQ29udGV4dChGb3JtQ29udGV4dCk7XG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnZm9ybS1jb250cm9sJyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY29udHJvbElkID09IG51bGwgfHwgIWlkLCAnYGNvbnRyb2xJZGAgaXMgaWdub3JlZCBvbiBgPEZvcm1Db250cm9sPmAgd2hlbiBgaWRgIGlzIHNwZWNpZmllZC4nKSA6IHZvaWQgMDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbXBvbmVudCwge1xuICAgIC4uLnByb3BzLFxuICAgIHR5cGU6IHR5cGUsXG4gICAgc2l6ZTogaHRtbFNpemUsXG4gICAgcmVmOiByZWYsXG4gICAgcmVhZE9ubHk6IHJlYWRPbmx5LFxuICAgIGlkOiBpZCB8fCBjb250cm9sSWQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgcGxhaW50ZXh0ID8gYCR7YnNQcmVmaXh9LXBsYWludGV4dGAgOiBic1ByZWZpeCwgc2l6ZSAmJiBgJHtic1ByZWZpeH0tJHtzaXplfWAsIHR5cGUgPT09ICdjb2xvcicgJiYgYCR7YnNQcmVmaXh9LWNvbG9yYCwgaXNWYWxpZCAmJiAnaXMtdmFsaWQnLCBpc0ludmFsaWQgJiYgJ2lzLWludmFsaWQnKVxuICB9KTtcbn0pO1xuRm9ybUNvbnRyb2wuZGlzcGxheU5hbWUgPSAnRm9ybUNvbnRyb2wnO1xuZXhwb3J0IGRlZmF1bHQgT2JqZWN0LmFzc2lnbihGb3JtQ29udHJvbCwge1xuICBGZWVkYmFja1xufSk7IiwiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBGb3JtRmxvYXRpbmcgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoe1xuICBjbGFzc05hbWUsXG4gIGJzUHJlZml4LFxuICBhczogQ29tcG9uZW50ID0gJ2RpdicsXG4gIC4uLnByb3BzXG59LCByZWYpID0+IHtcbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdmb3JtLWZsb2F0aW5nJyk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDb21wb25lbnQsIHtcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCksXG4gICAgLi4ucHJvcHNcbiAgfSk7XG59KTtcbkZvcm1GbG9hdGluZy5kaXNwbGF5TmFtZSA9ICdGb3JtRmxvYXRpbmcnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUZsb2F0aW5nOyIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRm9ybUdyb3VwID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHtcbiAgY29udHJvbElkLFxuICAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG4gIGFzOiBDb21wb25lbnQgPSAnZGl2JyxcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4ge1xuICBjb25zdCBjb250ZXh0ID0gdXNlTWVtbygoKSA9PiAoe1xuICAgIGNvbnRyb2xJZFxuICB9KSwgW2NvbnRyb2xJZF0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goRm9ybUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogY29udGV4dCxcbiAgICBjaGlsZHJlbjogLyojX19QVVJFX18qL19qc3goQ29tcG9uZW50LCB7XG4gICAgICAuLi5wcm9wcyxcbiAgICAgIHJlZjogcmVmXG4gICAgfSlcbiAgfSk7XG59KTtcbkZvcm1Hcm91cC5kaXNwbGF5TmFtZSA9ICdGb3JtR3JvdXAnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUdyb3VwOyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBDb2wgZnJvbSAnLi9Db2wnO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsgdXNlQm9vdHN0cmFwUHJlZml4IH0gZnJvbSAnLi9UaGVtZVByb3ZpZGVyJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBGb3JtTGFiZWwgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigoe1xuICAvLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG4gIGFzOiBDb21wb25lbnQgPSAnbGFiZWwnLFxuICBic1ByZWZpeCxcbiAgY29sdW1uID0gZmFsc2UsXG4gIHZpc3VhbGx5SGlkZGVuID0gZmFsc2UsXG4gIGNsYXNzTmFtZSxcbiAgaHRtbEZvcixcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4ge1xuICBjb25zdCB7XG4gICAgY29udHJvbElkXG4gIH0gPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KTtcbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdmb3JtLWxhYmVsJyk7XG4gIGxldCBjb2x1bW5DbGFzcyA9ICdjb2wtZm9ybS1sYWJlbCc7XG4gIGlmICh0eXBlb2YgY29sdW1uID09PSAnc3RyaW5nJykgY29sdW1uQ2xhc3MgPSBgJHtjb2x1bW5DbGFzc30gJHtjb2x1bW5DbGFzc30tJHtjb2x1bW59YDtcbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCwgdmlzdWFsbHlIaWRkZW4gJiYgJ3Zpc3VhbGx5LWhpZGRlbicsIGNvbHVtbiAmJiBjb2x1bW5DbGFzcyk7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoY29udHJvbElkID09IG51bGwgfHwgIWh0bWxGb3IsICdgY29udHJvbElkYCBpcyBpZ25vcmVkIG9uIGA8Rm9ybUxhYmVsPmAgd2hlbiBgaHRtbEZvcmAgaXMgc3BlY2lmaWVkLicpIDogdm9pZCAwO1xuICBodG1sRm9yID0gaHRtbEZvciB8fCBjb250cm9sSWQ7XG4gIGlmIChjb2x1bW4pIHJldHVybiAvKiNfX1BVUkVfXyovX2pzeChDb2wsIHtcbiAgICByZWY6IHJlZixcbiAgICBhczogXCJsYWJlbFwiLFxuICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICBodG1sRm9yOiBodG1sRm9yLFxuICAgIC4uLnByb3BzXG4gIH0pO1xuICByZXR1cm4gKFxuICAgIC8qI19fUFVSRV9fKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvbGFiZWwtaGFzLWZvciwganN4LWExMXkvbGFiZWwtaGFzLWFzc29jaWF0ZWQtY29udHJvbFxuICAgIF9qc3goQ29tcG9uZW50LCB7XG4gICAgICByZWY6IHJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgIGh0bWxGb3I6IGh0bWxGb3IsXG4gICAgICAuLi5wcm9wc1xuICAgIH0pXG4gICk7XG59KTtcbkZvcm1MYWJlbC5kaXNwbGF5TmFtZSA9ICdGb3JtTGFiZWwnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybUxhYmVsOyIsIlwidXNlIGNsaWVudFwiO1xuXG5pbXBvcnQgY2xhc3NOYW1lcyBmcm9tICdjbGFzc25hbWVzJztcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IEZvcm1Db250ZXh0IGZyb20gJy4vRm9ybUNvbnRleHQnO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IEZvcm1SYW5nZSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIGJzUHJlZml4LFxuICBjbGFzc05hbWUsXG4gIGlkLFxuICAuLi5wcm9wc1xufSwgcmVmKSA9PiB7XG4gIGNvbnN0IHtcbiAgICBjb250cm9sSWRcbiAgfSA9IHVzZUNvbnRleHQoRm9ybUNvbnRleHQpO1xuICBic1ByZWZpeCA9IHVzZUJvb3RzdHJhcFByZWZpeChic1ByZWZpeCwgJ2Zvcm0tcmFuZ2UnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KFwiaW5wdXRcIiwge1xuICAgIC4uLnByb3BzLFxuICAgIHR5cGU6IFwicmFuZ2VcIixcbiAgICByZWY6IHJlZixcbiAgICBjbGFzc05hbWU6IGNsYXNzTmFtZXMoY2xhc3NOYW1lLCBic1ByZWZpeCksXG4gICAgaWQ6IGlkIHx8IGNvbnRyb2xJZFxuICB9KTtcbn0pO1xuRm9ybVJhbmdlLmRpc3BsYXlOYW1lID0gJ0Zvcm1SYW5nZSc7XG5leHBvcnQgZGVmYXVsdCBGb3JtUmFuZ2U7IiwiXCJ1c2UgY2xpZW50XCI7XG5cbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgRm9ybUNvbnRleHQgZnJvbSAnLi9Gb3JtQ29udGV4dCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRm9ybVNlbGVjdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIGJzUHJlZml4LFxuICBzaXplLFxuICBodG1sU2l6ZSxcbiAgY2xhc3NOYW1lLFxuICBpc1ZhbGlkID0gZmFsc2UsXG4gIGlzSW52YWxpZCA9IGZhbHNlLFxuICBpZCxcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4ge1xuICBjb25zdCB7XG4gICAgY29udHJvbElkXG4gIH0gPSB1c2VDb250ZXh0KEZvcm1Db250ZXh0KTtcbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdmb3JtLXNlbGVjdCcpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3goXCJzZWxlY3RcIiwge1xuICAgIC4uLnByb3BzLFxuICAgIHNpemU6IGh0bWxTaXplLFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBzaXplICYmIGAke2JzUHJlZml4fS0ke3NpemV9YCwgaXNWYWxpZCAmJiBgaXMtdmFsaWRgLCBpc0ludmFsaWQgJiYgYGlzLWludmFsaWRgKSxcbiAgICBpZDogaWQgfHwgY29udHJvbElkXG4gIH0pO1xufSk7XG5Gb3JtU2VsZWN0LmRpc3BsYXlOYW1lID0gJ0Zvcm1TZWxlY3QnO1xuZXhwb3J0IGRlZmF1bHQgRm9ybVNlbGVjdDsiLCJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VCb290c3RyYXBQcmVmaXggfSBmcm9tICcuL1RoZW1lUHJvdmlkZXInO1xuaW1wb3J0IHsganN4IGFzIF9qc3ggfSBmcm9tIFwicmVhY3QvanN4LXJ1bnRpbWVcIjtcbmNvbnN0IEZvcm1UZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoXG4vLyBOZWVkIHRvIGRlZmluZSB0aGUgZGVmYXVsdCBcImFzXCIgZHVyaW5nIHByb3AgZGVzdHJ1Y3R1cmluZyB0byBiZSBjb21wYXRpYmxlIHdpdGggc3R5bGVkLWNvbXBvbmVudHMgZ2l0aHViLmNvbS9yZWFjdC1ib290c3RyYXAvcmVhY3QtYm9vdHN0cmFwL2lzc3Vlcy8zNTk1XG4oe1xuICBic1ByZWZpeCxcbiAgY2xhc3NOYW1lLFxuICBhczogQ29tcG9uZW50ID0gJ3NtYWxsJyxcbiAgbXV0ZWQsXG4gIC4uLnByb3BzXG59LCByZWYpID0+IHtcbiAgYnNQcmVmaXggPSB1c2VCb290c3RyYXBQcmVmaXgoYnNQcmVmaXgsICdmb3JtLXRleHQnKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fanN4KENvbXBvbmVudCwge1xuICAgIC4uLnByb3BzLFxuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4LCBtdXRlZCAmJiAndGV4dC1tdXRlZCcpXG4gIH0pO1xufSk7XG5Gb3JtVGV4dC5kaXNwbGF5TmFtZSA9ICdGb3JtVGV4dCc7XG5leHBvcnQgZGVmYXVsdCBGb3JtVGV4dDsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUNoZWNrIGZyb20gJy4vRm9ybUNoZWNrJztcbmltcG9ydCB7IGpzeCBhcyBfanN4IH0gZnJvbSBcInJlYWN0L2pzeC1ydW50aW1lXCI7XG5jb25zdCBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4gLyojX19QVVJFX18qL19qc3goRm9ybUNoZWNrLCB7XG4gIC4uLnByb3BzLFxuICByZWY6IHJlZixcbiAgdHlwZTogXCJzd2l0Y2hcIlxufSkpO1xuU3dpdGNoLmRpc3BsYXlOYW1lID0gJ1N3aXRjaCc7XG5leHBvcnQgZGVmYXVsdCBPYmplY3QuYXNzaWduKFN3aXRjaCwge1xuICBJbnB1dDogRm9ybUNoZWNrLklucHV0LFxuICBMYWJlbDogRm9ybUNoZWNrLkxhYmVsXG59KTsiLCJcInVzZSBjbGllbnRcIjtcblxuaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgRm9ybUdyb3VwIGZyb20gJy4vRm9ybUdyb3VwJztcbmltcG9ydCB7IHVzZUJvb3RzdHJhcFByZWZpeCB9IGZyb20gJy4vVGhlbWVQcm92aWRlcic7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuaW1wb3J0IHsganN4cyBhcyBfanN4cyB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgRmxvYXRpbmdMYWJlbCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKCh7XG4gIGJzUHJlZml4LFxuICBjbGFzc05hbWUsXG4gIGNoaWxkcmVuLFxuICBjb250cm9sSWQsXG4gIGxhYmVsLFxuICAuLi5wcm9wc1xufSwgcmVmKSA9PiB7XG4gIGJzUHJlZml4ID0gdXNlQm9vdHN0cmFwUHJlZml4KGJzUHJlZml4LCAnZm9ybS1mbG9hdGluZycpO1xuICByZXR1cm4gLyojX19QVVJFX18qL19qc3hzKEZvcm1Hcm91cCwge1xuICAgIHJlZjogcmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lcyhjbGFzc05hbWUsIGJzUHJlZml4KSxcbiAgICBjb250cm9sSWQ6IGNvbnRyb2xJZCxcbiAgICAuLi5wcm9wcyxcbiAgICBjaGlsZHJlbjogW2NoaWxkcmVuLCAvKiNfX1BVUkVfXyovX2pzeChcImxhYmVsXCIsIHtcbiAgICAgIGh0bWxGb3I6IGNvbnRyb2xJZCxcbiAgICAgIGNoaWxkcmVuOiBsYWJlbFxuICAgIH0pXVxuICB9KTtcbn0pO1xuRmxvYXRpbmdMYWJlbC5kaXNwbGF5TmFtZSA9ICdGbG9hdGluZ0xhYmVsJztcbmV4cG9ydCBkZWZhdWx0IEZsb2F0aW5nTGFiZWw7IiwiaW1wb3J0IGNsYXNzTmFtZXMgZnJvbSAnY2xhc3NuYW1lcyc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IEZvcm1DaGVjayBmcm9tICcuL0Zvcm1DaGVjayc7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9Gb3JtQ29udHJvbCc7XG5pbXBvcnQgRm9ybUZsb2F0aW5nIGZyb20gJy4vRm9ybUZsb2F0aW5nJztcbmltcG9ydCBGb3JtR3JvdXAgZnJvbSAnLi9Gb3JtR3JvdXAnO1xuaW1wb3J0IEZvcm1MYWJlbCBmcm9tICcuL0Zvcm1MYWJlbCc7XG5pbXBvcnQgRm9ybVJhbmdlIGZyb20gJy4vRm9ybVJhbmdlJztcbmltcG9ydCBGb3JtU2VsZWN0IGZyb20gJy4vRm9ybVNlbGVjdCc7XG5pbXBvcnQgRm9ybVRleHQgZnJvbSAnLi9Gb3JtVGV4dCc7XG5pbXBvcnQgU3dpdGNoIGZyb20gJy4vU3dpdGNoJztcbmltcG9ydCBGbG9hdGluZ0xhYmVsIGZyb20gJy4vRmxvYXRpbmdMYWJlbCc7XG5pbXBvcnQgeyBqc3ggYXMgX2pzeCB9IGZyb20gXCJyZWFjdC9qc3gtcnVudGltZVwiO1xuY29uc3QgcHJvcFR5cGVzID0ge1xuICAvKipcbiAgICogVGhlIEZvcm0gYHJlZmAgd2lsbCBiZSBmb3J3YXJkZWQgdG8gdGhlIHVuZGVybHlpbmcgZWxlbWVudCxcbiAgICogd2hpY2ggbWVhbnMsIHVubGVzcyBpdCdzIHJlbmRlcmVkIGBhc2AgYSBjb21wb3NpdGUgY29tcG9uZW50LFxuICAgKiBpdCB3aWxsIGJlIGEgRE9NIG5vZGUsIHdoZW4gcmVzb2x2ZWQuXG4gICAqXG4gICAqIEB0eXBlIHtSZWFjdFJlZn1cbiAgICogQGFsaWFzIHJlZlxuICAgKi9cbiAgX3JlZjogUHJvcFR5cGVzLmFueSxcbiAgLyoqXG4gICAqIE1hcmsgYSBmb3JtIGFzIGhhdmluZyBiZWVuIHZhbGlkYXRlZC4gU2V0dGluZyBpdCB0byBgdHJ1ZWAgd2lsbFxuICAgKiB0b2dnbGUgYW55IHZhbGlkYXRpb24gc3R5bGVzIG9uIHRoZSBmb3JtcyBlbGVtZW50cy5cbiAgICovXG4gIHZhbGlkYXRlZDogUHJvcFR5cGVzLmJvb2wsXG4gIGFzOiBQcm9wVHlwZXMuZWxlbWVudFR5cGVcbn07XG5jb25zdCBGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHtcbiAgY2xhc3NOYW1lLFxuICB2YWxpZGF0ZWQsXG4gIC8vIE5lZWQgdG8gZGVmaW5lIHRoZSBkZWZhdWx0IFwiYXNcIiBkdXJpbmcgcHJvcCBkZXN0cnVjdHVyaW5nIHRvIGJlIGNvbXBhdGlibGUgd2l0aCBzdHlsZWQtY29tcG9uZW50cyBnaXRodWIuY29tL3JlYWN0LWJvb3RzdHJhcC9yZWFjdC1ib290c3RyYXAvaXNzdWVzLzM1OTVcbiAgYXM6IENvbXBvbmVudCA9ICdmb3JtJyxcbiAgLi4ucHJvcHNcbn0sIHJlZikgPT4gLyojX19QVVJFX18qL19qc3goQ29tcG9uZW50LCB7XG4gIC4uLnByb3BzLFxuICByZWY6IHJlZixcbiAgY2xhc3NOYW1lOiBjbGFzc05hbWVzKGNsYXNzTmFtZSwgdmFsaWRhdGVkICYmICd3YXMtdmFsaWRhdGVkJylcbn0pKTtcbkZvcm0uZGlzcGxheU5hbWUgPSAnRm9ybSc7XG5Gb3JtLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbmV4cG9ydCBkZWZhdWx0IE9iamVjdC5hc3NpZ24oRm9ybSwge1xuICBHcm91cDogRm9ybUdyb3VwLFxuICBDb250cm9sOiBGb3JtQ29udHJvbCxcbiAgRmxvYXRpbmc6IEZvcm1GbG9hdGluZyxcbiAgQ2hlY2s6IEZvcm1DaGVjayxcbiAgU3dpdGNoLFxuICBMYWJlbDogRm9ybUxhYmVsLFxuICBUZXh0OiBGb3JtVGV4dCxcbiAgUmFuZ2U6IEZvcm1SYW5nZSxcbiAgU2VsZWN0OiBGb3JtU2VsZWN0LFxuICBGbG9hdGluZ0xhYmVsXG59KTsiLCIvLyBEYXRlOiAyLzEyLzIwMjMgc3RhcnRlZCAyOjIwcG1cclxuLy8gICAgICAgMi8xMi8yMDIzIGVuZGVkIDI6NTBwbVxyXG4vLyAgICAgIDEvMDIvMjAwNCB1cGRhdGVkIDk6MDBwbSAxNSBtaW51dG9zIDE1MCBhIDg0IGxpbmVhc1xyXG5pbXBvcnQgeyB1c2VTdGF0ZSx1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZUF1dGggfSBmcm9tIFwiLi4vYXV0aC9BdXRoUHJvdmlkZXJcIjtcclxuaW1wb3J0IHsgRm9ybSwgQnV0dG9uIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcclxuaW1wb3J0IHsgTmF2QmFyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9uYXZCYXInO1xyXG5pbXBvcnQgJy4vc3R5bGVzL2xvZ2luLmNzcydcclxuaW1wb3J0IHsgTmF2aWdhdGUgfSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJztcclxuaW1wb3J0IHsgdXNlU2lnbmluTXV0YXRpb24gfSBmcm9tICcuLi9hcGkvdXNlcic7XHJcblxyXG5jb25zdCBMb2dpbjogUmVhY3QuRkMgPSAgKCkgPT4ge1xyXG4gICAgY29uc3QgW2VtYWlsLCBzZXRFbWFpbF0gPSB1c2VTdGF0ZSgnJyk7XHJcbiAgICBjb25zdCBbcGFzc3dvcmQsIHNldFBhc3N3b3JkXSA9IHVzZVN0YXRlKCcnKTtcclxuICAgIGNvbnN0IHsgbXV0YXRlQXN5bmM6IHNpZ25pbiB9ID0gdXNlU2lnbmluTXV0YXRpb24oKVxyXG4gICAgY29uc3QgYXV0aD11c2VBdXRoKCk7XHJcbiAgICBjb25zdCBkYXRhID0gYXV0aC5pc1Rva2VuVmFsaWQ7XHJcbiAgICBcclxuICAgICAgICBjb25zdCBoYW5kbGVTdWJtaXQgPSBhc3luYyAoZXZlbnQ6IFJlYWN0LkZvcm1FdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YVRva2VucyA9YXdhaXQgc2lnbmluKHsgZW1haWwsIHBhc3N3b3JkIH0pXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YVRva2Vucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IGF1dGgudmFsaWRhdGVUb2tlbigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgXHJcbiAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIGhhbmRsZVN1Ym1pdDtcclxuICAgIH0sIFtdKTtcclxuICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIDxOYXZpZ2F0ZSB0bz1cIi9jb3RpemFkb3JcIiAvPjtcclxuICAgIH1cclxuICByZXR1cm4gKFxyXG4gICAgPGRpdiBjbGFzc05hbWU9JyBjb250ZW5lZG9yLWxvZ2luJz5cclxuICAgICAgICA8TmF2QmFyLz5cclxuICAgICAgICA8c2VjdGlvbiBjbGFzc05hbWU9J3NlY3Rpb24tbG9naW4nID5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbnRhaW5lciBsb2dpbiB0ZXh0LXdoaXRlJz5cclxuICAgICAgICAgICAgICAgIDxGb3JtIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9IGNsYXNzTmFtZT0ncm93Jz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMCBjb2wtc20tNiBcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGgxPkluaWNpYXIgc2VzacOzbjwvaDE+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtLkdyb3VwIGNvbnRyb2xJZD1cImZvcm1CYXNpY0VtYWlsXCIgPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9ybS5MYWJlbD5FbWFpbDwvRm9ybS5MYWJlbD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm0uQ29udHJvbCB0eXBlPVwiZW1haWxcIiBwbGFjZWhvbGRlcj1cIkluZ3Jlc2EgdHUgZW1haWxcIiBvbkNoYW5nZT17XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZXZlbnQ6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBzZXRFbWFpbChldmVudC50YXJnZXQudmFsdWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Gb3JtLkdyb3VwPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm0uR3JvdXAgY29udHJvbElkPVwiZm9ybUJhc2ljUGFzc3dvcmRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEZvcm0uTGFiZWw+Q29udHJhc2XDsWE8L0Zvcm0uTGFiZWw+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3JtLkNvbnRyb2wgdHlwZT1cInBhc3N3b3JkXCIgcGxhY2Vob2xkZXI9XCJJbmdyZXNhIHR1IGNvbnRyYXNlw7FhXCIgb25DaGFuZ2U9e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGV2ZW50OiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gc2V0UGFzc3dvcmQoZXZlbnQudGFyZ2V0LnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvRm9ybS5Hcm91cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGJyIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdmFyaWFudD1cInByaW1hcnlcIiB0eXBlPVwic3VibWl0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEluaWNpYXIgc2VzacOzblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgey8qIDxwPsK/Tm8gdGllbmVzIHVuYSBjdWVudGE/IDxhIGhyZWY9XCIvc2lnbnVwXCI+UmVnw61zdHJhdGU8L2E+PC9wPiAqL31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbC0xMiBjb2wtc20tNiByaWcgdGV4dC1jZW50ZXIgY29udGFpbmVyIFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hZ25hXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT0ndGV4dC13aGl0ZSc+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbmdlbmllcsOtYSB5IFRvcG9ncmFmw61hXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxici8+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiRGFuZG8gZm9ybWEgYWwgbXVuZG8sIHVuIHByb3llY3RvIGEgbGEgdmV6LlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDU+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9Gb3JtPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L3NlY3Rpb24+XHJcbiAgICA8L2Rpdj5cclxuICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTG9naW47XHJcblxyXG4iXSwibmFtZXMiOlsiQnV0dG9uIiwiUmVhY3QuZm9yd2FyZFJlZiIsImFzIiwiYnNQcmVmaXgiLCJ2YXJpYW50Iiwic2l6ZSIsImFjdGl2ZSIsImRpc2FibGVkIiwiY2xhc3NOYW1lIiwicHJvcHMiLCJyZWYiLCJwcmVmaXgiLCJ1c2VCb290c3RyYXBQcmVmaXgiLCJidXR0b25Qcm9wcyIsInRhZ05hbWUiLCJ1c2VCdXR0b25Qcm9wcyIsIkNvbXBvbmVudCIsIl9qc3giLCJjbGFzc05hbWVzIiwiQnV0dG9uJDEiLCJoYXNDaGlsZE9mVHlwZSIsImNoaWxkcmVuIiwidHlwZSIsIlJlYWN0LkNoaWxkcmVuIiwiY2hpbGQiLCJSZWFjdC5pc1ZhbGlkRWxlbWVudCIsInVzZUNvbCIsImJyZWFrcG9pbnRzIiwidXNlQm9vdHN0cmFwQnJlYWtwb2ludHMiLCJtaW5CcmVha3BvaW50IiwidXNlQm9vdHN0cmFwTWluQnJlYWtwb2ludCIsInNwYW5zIiwiY2xhc3NlcyIsImJya1BvaW50IiwicHJvcFZhbHVlIiwic3BhbiIsIm9mZnNldCIsIm9yZGVyIiwiaW5maXgiLCJDb2wiLCJjb2xQcm9wcyIsIkNvbCQxIiwicHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiRmVlZGJhY2siLCJ0b29sdGlwIiwiRmVlZGJhY2skMSIsIkZvcm1Db250ZXh0IiwiUmVhY3QuY3JlYXRlQ29udGV4dCIsIkZvcm1Db250ZXh0JDEiLCJGb3JtQ2hlY2tJbnB1dCIsImlkIiwiaXNWYWxpZCIsImlzSW52YWxpZCIsImNvbnRyb2xJZCIsInVzZUNvbnRleHQiLCJGb3JtQ2hlY2tJbnB1dCQxIiwiRm9ybUNoZWNrTGFiZWwiLCJodG1sRm9yIiwiRm9ybUNoZWNrTGFiZWwkMSIsIkZvcm1DaGVjayIsImJzU3dpdGNoUHJlZml4IiwiaW5saW5lIiwicmV2ZXJzZSIsImZlZWRiYWNrVG9vbHRpcCIsImZlZWRiYWNrIiwiZmVlZGJhY2tUeXBlIiwic3R5bGUiLCJ0aXRsZSIsImxhYmVsIiwiaW5uZXJGb3JtQ29udGV4dCIsInVzZU1lbW8iLCJoYXNMYWJlbCIsImlucHV0IiwiX2pzeHMiLCJfRnJhZ21lbnQiLCJGb3JtQ2hlY2skMSIsIkZvcm1Db250cm9sIiwiaHRtbFNpemUiLCJwbGFpbnRleHQiLCJyZWFkT25seSIsIkZvcm1Db250cm9sJDEiLCJGb3JtRmxvYXRpbmciLCJGb3JtRmxvYXRpbmckMSIsIkZvcm1Hcm91cCIsImNvbnRleHQiLCJGb3JtR3JvdXAkMSIsIkZvcm1MYWJlbCIsImNvbHVtbiIsInZpc3VhbGx5SGlkZGVuIiwiY29sdW1uQ2xhc3MiLCJGb3JtTGFiZWwkMSIsIkZvcm1SYW5nZSIsIkZvcm1SYW5nZSQxIiwiRm9ybVNlbGVjdCIsIkZvcm1TZWxlY3QkMSIsIkZvcm1UZXh0IiwibXV0ZWQiLCJGb3JtVGV4dCQxIiwiU3dpdGNoIiwiU3dpdGNoJDEiLCJGbG9hdGluZ0xhYmVsIiwiRmxvYXRpbmdMYWJlbCQxIiwiRm9ybSIsInZhbGlkYXRlZCIsIkZvcm0kMSIsIkxvZ2luIiwiZW1haWwiLCJzZXRFbWFpbCIsInVzZVN0YXRlIiwicGFzc3dvcmQiLCJzZXRQYXNzd29yZCIsInNpZ25pbiIsInVzZVNpZ25pbk11dGF0aW9uIiwiYXV0aCIsInVzZUF1dGgiLCJkYXRhIiwiaGFuZGxlU3VibWl0IiwiZXZlbnQiLCJlcnJvciIsInVzZUVmZmVjdCIsImpzeCIsIk5hdmlnYXRlIiwianN4cyIsIk5hdkJhciJdLCJtYXBwaW5ncyI6InVtQkFPQSxNQUFNQSxFQUFzQkMsRUFBZ0IsV0FBQyxDQUFDLENBQzVDLEdBQUFDLEVBQ0EsU0FBQUMsRUFDQSxRQUFBQyxFQUFVLFVBQ1YsS0FBQUMsRUFDQSxPQUFBQyxFQUFTLEdBQ1QsU0FBQUMsRUFBVyxHQUNYLFVBQUFDLEVBQ0EsR0FBR0MsQ0FDTCxFQUFHQyxJQUFRLENBQ1QsTUFBTUMsRUFBU0MsRUFBbUJULEVBQVUsS0FBSyxFQUMzQyxDQUFDVSxFQUFhLENBQ2xCLFFBQUFDLENBQ0QsQ0FBQSxFQUFJQyxHQUFlLENBQ2xCLFFBQVNi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QUFNSSxFQUFLLHNCQUVWSyxFQUFPLENBQ1osUUFBUSxJQUFJQSxDQUFLLENBQ3JCLENBQUEsRUFNUixPQUhGQyxFQUFBQSxVQUFVLElBQU0sQ0FFZCxFQUFHLENBQUUsQ0FBQSxFQUNESixFQUNPSyxFQUFBLElBQUNDLEdBQVMsQ0FBQSxHQUFHLFlBQWEsQ0FBQSxFQUdyQ0MsRUFBQSxLQUFDLE1BQUksQ0FBQSxVQUFVLG9CQUNYLFNBQUEsQ0FBQUYsRUFBQSxJQUFDRyxHQUFNLEVBQUEsRUFDTkgsTUFBQSxVQUFBLENBQVEsVUFBVSxnQkFDZixTQUFDQSxFQUFBLElBQUEsTUFBQSxDQUFJLFVBQVUsNkJBQ1gsU0FBQ0UsRUFBQUEsS0FBQXBCLEVBQUEsQ0FBSyxTQUFVYyxFQUFjLFVBQVUsTUFDcEMsU0FBQSxDQUFDTSxFQUFBQSxLQUFBLE1BQUEsQ0FBSSxVQUFVLG1CQUNYLFNBQUEsQ0FBQUYsRUFBQUEsSUFBQyxNQUFHLFNBQWMsZ0JBQUEsQ0FBQSxFQUNqQkUsRUFBQSxLQUFBcEIsRUFBSyxNQUFMLENBQVcsVUFBVSxpQkFDdEIsU0FBQSxDQUFDa0IsRUFBQUEsSUFBQWxCLEVBQUssTUFBTCxDQUFXLFNBQUssT0FBQSxDQUFBLEVBQ2hCa0IsRUFBQSxJQUFBbEIsRUFBSyxRQUFMLENBQWEsS0FBSyxRQUFRLFlBQVksbUJBQW1CLFNBQ3JEZSxHQUErQ1YsRUFBU1UsRUFBTSxPQUFPLEtBQUssRUFDN0UsQ0FBQSxFQUNGLEVBRUNLLEVBQUEsS0FBQXBCLEVBQUssTUFBTCxDQUFXLFVBQVUsb0JBQ3RCLFNBQUEsQ0FBQ2tCLEVBQUFBLElBQUFsQixFQUFLLE1BQUwsQ0FBVyxTQUFVLFlBQUEsQ0FBQSxFQUNyQmtCLEVBQUEsSUFBQWxCLEVBQUssUUFBTCxDQUFhLEtBQUssV0FBVyxZQUFZLHdCQUF3QixTQUM3RGUsR0FBK0NQLEVBQVlPLEVBQU0sT0FBTyxLQUFLLEVBQ2hGLENBQUEsRUFDRixRQUNDLEtBQUcsRUFBQSxRQUNIdEgsR0FBTyxDQUFBLFFBQVEsVUFBVSxLQUFLLFNBQVMsU0FFeEMsaUJBQUEsQ0FBQSxFQUVKLEVBQ0EySCxFQUFBQSxLQUFDLE1BQUksQ0FBQSxVQUFVLDZDQUNYLFNBQUEsQ0FBQUYsRUFBQUEsSUFBQyxNQUFHLFNBRUosT0FBQSxDQUFBLFFBQ0MsS0FBRSxFQUFBLEVBQ0ZBLEVBQUEsSUFBQSxJQUFBLENBQUUsVUFBVSxhQUFhLFNBRTFCLDBCQUFBLFFBRUMsS0FBRSxFQUFBLEVBQ0hBLEVBQUFBLElBQUMsTUFBRyxTQUVKLCtDQUFBLENBQUEsQ0FBQSxFQUVKLENBQUEsQ0FDSixDQUFBLENBQ0osQ0FBQSxFQUNKLENBQ0osQ0FBQSxDQUFBLENBRUoiLCJ4X2dvb2dsZV9pZ25vcmVMaXN0IjpbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMSwxMiwxMywxNCwxNSwxNiwxN119
