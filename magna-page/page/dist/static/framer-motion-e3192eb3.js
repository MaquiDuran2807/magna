import{r as m,a as Es}from"./react-1cdf6ce0.js";const It=m.createContext({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),re=m.createContext({}),oe=m.createContext(null),ae=typeof document<"u",Tt=ae?m.useLayoutEffect:m.useEffect,Bs=m.createContext({strict:!1}),Ge=t=>t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),sr="framerAppearId",Fs="data-"+Ge(sr);function ir(t,e,n,s){const{visualElement:i}=m.useContext(re),o=m.useContext(Bs),r=m.useContext(oe),a=m.useContext(It).reducedMotion,c=m.useRef();s=s||o.renderer,!c.current&&s&&(c.current=s(t,{visualState:e,parent:i,props:n,presenceContext:r,blockInitialAnimation:r?r.initial===!1:!1,reducedMotionConfig:a}));const l=c.current;m.useInsertionEffect(()=>{l&&l.update(n,r)});const u=m.useRef(!!(n[Fs]&&!window.HandoffComplete));return Tt(()=>{l&&(l.render(),u.current&&l.animationState&&l.animationState.animateChanges())}),m.useEffect(()=>{l&&(l.updateFeatures(),!u.current&&l.animationState&&l.animationState.animateChanges(),u.current&&(u.current=!1,window.HandoffComplete=!0))}),l}function mt(t){return typeof t=="object"&&Object.prototype.hasOwnProperty.call(t,"current")}function rr(t,e,n){return m.useCallback(s=>{s&&t.mount&&t.mount(s),e&&(s?e.mount(s):e.unmount()),n&&(typeof n=="function"?n(s):mt(n)&&(n.current=s))},[e])}function Ft(t){return typeof t=="string"||Array.isArray(t)}function ce(t){return typeof t=="object"&&typeof t.start=="function"}const $e=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],Ke=["initial",...$e];function le(t){return ce(t.animate)||Ke.some(e=>Ft(t[e]))}function ks(t){return!!(le(t)||t.variants)}function or(t,e){if(le(t)){const{initial:n,animate:s}=t;return{initial:n===!1||Ft(n)?n:void 0,animate:Ft(s)?s:void 0}}return t.inherit!==!1?e:{}}function ar(t){const{initial:e,animate:n}=or(t,m.useContext(re));return m.useMemo(()=>({initial:e,animate:n}),[Tn(e),Tn(n)])}function Tn(t){return Array.isArray(t)?t.join(" "):t}const bn={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},kt={};for(const t in bn)kt[t]={isEnabled:e=>bn[t].some(n=>!!e[n])};function cr(t){for(const e in t)kt[e]={...kt[e],...t[e]}}const _e=m.createContext({}),Os=m.createContext({}),lr=Symbol.for("motionComponentSymbol");function ur({preloadedFeatures:t,createVisualElement:e,useRender:n,useVisualState:s,Component:i}){t&&cr(t);function o(a,c){let l;const u={...m.useContext(It),...a,layoutId:fr(a)},{isStatic:f}=u,h=ar(a),d=s(a,f);if(!f&&ae){h.visualElement=ir(i,d,u,e);const p=m.useContext(Os),v=m.useContext(Bs).strict;h.visualElement&&(l=h.visualElement.loadFeatures(u,v,t,p))}return m.createElement(re.Provider,{value:h},l&&h.visualElement?m.createElement(l,{visualElement:h.visualElement,...u}):null,n(i,a,rr(d,h.visualElement,c),d,f,h.visualElement))}const r=m.forwardRef(o);return r[lr]=i,r}function fr({layoutId:t}){const e=m.useContext(_e).id;return e&&t!==void 0?e+"-"+t:t}function hr(t){function e(s,i={}){return ur(t(s,i))}if(typeof Proxy>"u")return e;const n=new Map;return new Proxy(e,{get:(s,i)=>(n.has(i)||n.set(i,e(i)),n.get(i))})}const dr=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function Xe(t){return typeof t!="string"||t.includes("-")?!1:!!(dr.indexOf(t)>-1||/[A-Z]/.test(t))}const Jt={};function pr(t){Object.assign(Jt,t)}const jt=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],ht=new Set(jt);function Is(t,{layout:e,layoutId:n}){return ht.has(t)||t.startsWith("origin")||(e||n!==void 0)&&(!!Jt[t]||t==="opacity")}const O=t=>!!(t&&t.getVelocity),mr={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},gr=jt.length;function yr(t,{enableHardwareAcceleration:e=!0,allowTransformNone:n=!0},s,i){let o="";for(let r=0;r<gr;r++){const a=jt[r];if(t[a]!==void 0){const c=mr[a]||a;o+=`${c}(${t[a]}) `}}return e&&!t.z&&(o+="translateZ(0)"),o=o.trim(),i?o=i(t,s?"":o):n&&s&&(o="none"),o}const js=t=>e=>typeof e=="string"&&e.startsWith(t),Us=js("--"),Le=js("var(--"),vr=/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,xr=(t,e)=>e&&typeof t=="number"?e.transform(t):t,st=(t,e,n)=>Math.min(Math.max(n,t),e),dt={test:t=>typeof t=="number",parse:parseFloat,transform:t=>t},Mt={...dt,transform:t=>st(0,1,t)},Gt={...dt,default:1},Dt=t=>Math.round(t*1e5)/1e5,ue=/(-)?([\d]*\.?[\d])+/g,Ns=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,Pr=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function Ut(t){return typeof t=="string"}const Nt=t=>({test:e=>Ut(e)&&e.endsWith(t)&&e.split(" ").length===1,parse:parseFloat,transform:e=>`${e}${t}`}),J=Nt("deg"),G=Nt("%"),P=Nt("px"),Tr=Nt("vh"),br=Nt("vw"),Vn={...G,parse:t=>G.parse(t)/100,transform:t=>G.transform(t*100)},Sn={...dt,transform:Math.round},Ws={borderWidth:P,borderTopWidth:P,borderRightWidth:P,borderBottomWidth:P,borderLeftWidth:P,borderRadius:P,radius:P,borderTopLeftRadius:P,borderTopRightRadius:P,borderBottomRightRadius:P,borderBottomLeftRadius:P,width:P,maxWidth:P,height:P,maxHeight:P,size:P,top:P,right:P,bottom:P,left:P,padding:P,paddingTop:P,paddingRight:P,paddingBottom:P,paddingLeft:P,margin:P,marginTop:P,marginRight:P,marginBottom:P,marginLeft:P,rotate:J,rotateX:J,rotateY:J,rotateZ:J,scale:Gt,scaleX:Gt,scaleY:Gt,scaleZ:Gt,skew:J,skewX:J,skewY:J,distance:P,translateX:P,translateY:P,translateZ:P,x:P,y:P,z:P,perspective:P,transformPerspective:P,opacity:Mt,originX:Vn,originY:Vn,originZ:P,zIndex:Sn,fillOpacity:Mt,strokeOpacity:Mt,numOctaves:Sn};function Ye(t,e,n,s){const{style:i,vars:o,transform:r,transformOrigin:a}=t;let c=!1,l=!1,u=!0;for(const f in e){const h=e[f];if(Us(f)){o[f]=h;continue}const d=Ws[f],p=xr(h,d);if(ht.has(f)){if(c=!0,r[f]=p,!u)continue;h!==(d.default||0)&&(u=!1)}else f.startsWith("origin")?(l=!0,a[f]=p):i[f]=p}if(e.transform||(c||s?i.transform=yr(t.transform,n,u,s):i.transform&&(i.transform="none")),l){const{originX:f="50%",originY:h="50%",originZ:d=0}=a;i.transformOrigin=`${f} ${h} ${d}`}}const qe=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function zs(t,e,n){for(const s in e)!O(e[s])&&!Is(s,n)&&(t[s]=e[s])}function Vr({transformTemplate:t},e,n){return m.useMemo(()=>{const s=qe();return Ye(s,e,{enableHardwareAcceleration:!n},t),Object.assign({},s.vars,s.style)},[e])}function Sr(t,e,n){const s=t.style||{},i={};return zs(i,s,t),Object.assign(i,Vr(t,e,n)),t.transformValues?t.transformValues(i):i}function wr(t,e,n){const s={},i=Sr(t,e,n);return t.drag&&t.dragListener!==!1&&(s.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=t.drag===!0?"none":`pan-${t.drag==="x"?"y":"x"}`),t.tabIndex===void 0&&(t.onTap||t.onTapStart||t.whileTap)&&(s.tabIndex=0),s.style=i,s}const Ar=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function Qt(t){return t.startsWith("while")||t.startsWith("drag")&&t!=="draggable"||t.startsWith("layout")||t.startsWith("onTap")||t.startsWith("onPan")||Ar.has(t)}let Hs=t=>!Qt(t);function Cr(t){t&&(Hs=e=>e.startsWith("on")?!Qt(e):t(e))}try{Cr(require("@emotion/is-prop-valid").default)}catch{}function Mr(t,e,n){const s={};for(const i in t)i==="values"&&typeof t.values=="object"||(Hs(i)||n===!0&&Qt(i)||!e&&!Qt(i)||t.draggable&&i.startsWith("onDrag"))&&(s[i]=t[i]);return s}function wn(t,e,n){return typeof t=="string"?t:P.transform(e+n*t)}function Dr(t,e,n){const s=wn(e,t.x,t.width),i=wn(n,t.y,t.height);return`${s} ${i}`}const Lr={offset:"stroke-dashoffset",array:"stroke-dasharray"},Rr={offset:"strokeDashoffset",array:"strokeDasharray"};function Er(t,e,n=1,s=0,i=!0){t.pathLength=1;const o=i?Lr:Rr;t[o.offset]=P.transform(-s);const r=P.transform(e),a=P.transform(n);t[o.array]=`${r} ${a}`}function Ze(t,{attrX:e,attrY:n,attrScale:s,originX:i,originY:o,pathLength:r,pathSpacing:a=1,pathOffset:c=0,...l},u,f,h){if(Ye(t,l,u,h),f){t.style.viewBox&&(t.attrs.viewBox=t.style.viewBox);return}t.attrs=t.style,t.style={};const{attrs:d,style:p,dimensions:v}=t;d.transform&&(v&&(p.transform=d.transform),delete d.transform),v&&(i!==void 0||o!==void 0||p.transform)&&(p.transformOrigin=Dr(v,i!==void 0?i:.5,o!==void 0?o:.5)),e!==void 0&&(d.x=e),n!==void 0&&(d.y=n),s!==void 0&&(d.scale=s),r!==void 0&&Er(d,r,a,c,!1)}const Gs=()=>({...qe(),attrs:{}}),Je=t=>typeof t=="string"&&t.toLowerCase()==="svg";function Br(t,e,n,s){const i=m.useMemo(()=>{const o=Gs();return Ze(o,e,{enableHardwareAcceleration:!1},Je(s),t.transformTemplate),{...o.attrs,style:{...o.style}}},[e]);if(t.style){const o={};zs(o,t.style,t),i.style={...o,...i.style}}return i}function Fr(t=!1){return(n,s,i,{latestValues:o},r)=>{const c=(Xe(n)?Br:wr)(s,o,r,n),u={...Mr(s,typeof n=="string",t),...c,ref:i},{children:f}=s,h=m.useMemo(()=>O(f)?f.get():f,[f]);return m.createElement(n,{...u,children:h})}}function $s(t,{style:e,vars:n},s,i){Object.assign(t.style,e,i&&i.getProjectionStyles(s));for(const o in n)t.style.setProperty(o,n[o])}const Ks=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function _s(t,e,n,s){$s(t,e,void 0,s);for(const i in e.attrs)t.setAttribute(Ks.has(i)?i:Ge(i),e.attrs[i])}function Qe(t,e){const{style:n}=t,s={};for(const i in n)(O(n[i])||e.style&&O(e.style[i])||Is(i,t))&&(s[i]=n[i]);return s}function Xs(t,e){const n=Qe(t,e);for(const s in t)if(O(t[s])||O(e[s])){const i=jt.indexOf(s)!==-1?"attr"+s.charAt(0).toUpperCase()+s.substring(1):s;n[i]=t[s]}return n}function tn(t,e,n,s={},i={}){return typeof e=="function"&&(e=e(n!==void 0?n:t.custom,s,i)),typeof e=="string"&&(e=t.variants&&t.variants[e]),typeof e=="function"&&(e=e(n!==void 0?n:t.custom,s,i)),e}function Wt(t){const e=m.useRef(null);return e.current===null&&(e.current=t()),e.current}const te=t=>Array.isArray(t),kr=t=>!!(t&&typeof t=="object"&&t.mix&&t.toValue),Or=t=>te(t)?t[t.length-1]||0:t;function Xt(t){const e=O(t)?t.get():t;return kr(e)?e.toValue():e}function Ir({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},s,i,o){const r={latestValues:jr(s,i,o,t),renderState:e()};return n&&(r.mount=a=>n(s,a,r)),r}const Ys=t=>(e,n)=>{const s=m.useContext(re),i=m.useContext(oe),o=()=>Ir(t,e,s,i);return n?o():Wt(o)};function jr(t,e,n,s){const i={},o=s(t,{});for(const h in o)i[h]=Xt(o[h]);let{initial:r,animate:a}=t;const c=le(t),l=ks(t);e&&l&&!c&&t.inherit!==!1&&(r===void 0&&(r=e.initial),a===void 0&&(a=e.animate));let u=n?n.initial===!1:!1;u=u||r===!1;const f=u?a:r;return f&&typeof f!="boolean"&&!ce(f)&&(Array.isArray(f)?f:[f]).forEach(d=>{const p=tn(t,d);if(!p)return;const{transitionEnd:v,transition:x,...b}=p;for(const g in b){let y=b[g];if(Array.isArray(y)){const T=u?y.length-1:0;y=y[T]}y!==null&&(i[g]=y)}for(const g in v)i[g]=v[g]}),i}const L=t=>t;class An{constructor(){this.order=[],this.scheduled=new Set}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const n=this.order.indexOf(e);n!==-1&&(this.order.splice(n,1),this.scheduled.delete(e))}clear(){this.order.length=0,this.scheduled.clear()}}function Ur(t){let e=new An,n=new An,s=0,i=!1,o=!1;const r=new WeakSet,a={schedule:(c,l=!1,u=!1)=>{const f=u&&i,h=f?e:n;return l&&r.add(c),h.add(c)&&f&&i&&(s=e.order.length),c},cancel:c=>{n.remove(c),r.delete(c)},process:c=>{if(i){o=!0;return}if(i=!0,[e,n]=[n,e],n.clear(),s=e.order.length,s)for(let l=0;l<s;l++){const u=e.order[l];u(c),r.has(u)&&(a.schedule(u),t())}i=!1,o&&(o=!1,a.process(c))}};return a}const $t=["prepare","read","update","preRender","render","postRender"],Nr=40;function Wr(t,e){let n=!1,s=!0;const i={delta:0,timestamp:0,isProcessing:!1},o=$t.reduce((f,h)=>(f[h]=Ur(()=>n=!0),f),{}),r=f=>o[f].process(i),a=()=>{const f=performance.now();n=!1,i.delta=s?1e3/60:Math.max(Math.min(f-i.timestamp,Nr),1),i.timestamp=f,i.isProcessing=!0,$t.forEach(r),i.isProcessing=!1,n&&e&&(s=!1,t(a))},c=()=>{n=!0,s=!0,i.isProcessing||t(a)};return{schedule:$t.reduce((f,h)=>{const d=o[h];return f[h]=(p,v=!1,x=!1)=>(n||c(),d.schedule(p,v,x)),f},{}),cancel:f=>$t.forEach(h=>o[h].cancel(f)),state:i,steps:o}}const{schedule:w,cancel:W,state:F,steps:ge}=Wr(typeof requestAnimationFrame<"u"?requestAnimationFrame:L,!0),zr={useVisualState:Ys({scrapeMotionValuesFromProps:Xs,createRenderState:Gs,onMount:(t,e,{renderState:n,latestValues:s})=>{w.read(()=>{try{n.dimensions=typeof e.getBBox=="function"?e.getBBox():e.getBoundingClientRect()}catch{n.dimensions={x:0,y:0,width:0,height:0}}}),w.render(()=>{Ze(n,s,{enableHardwareAcceleration:!1},Je(e.tagName),t.transformTemplate),_s(e,n)})}})},Hr={useVisualState:Ys({scrapeMotionValuesFromProps:Qe,createRenderState:qe})};function Gr(t,{forwardMotionProps:e=!1},n,s){return{...Xe(t)?zr:Hr,preloadedFeatures:n,useRender:Fr(e),createVisualElement:s,Component:t}}function _(t,e,n,s={passive:!0}){return t.addEventListener(e,n,s),()=>t.removeEventListener(e,n)}const qs=t=>t.pointerType==="mouse"?typeof t.button!="number"||t.button<=0:t.isPrimary!==!1;function fe(t,e="page"){return{point:{x:t[e+"X"],y:t[e+"Y"]}}}const $r=t=>e=>qs(e)&&t(e,fe(e));function X(t,e,n,s){return _(t,e,$r(n),s)}const Kr=(t,e)=>n=>e(t(n)),et=(...t)=>t.reduce(Kr);function Zs(t){let e=null;return()=>{const n=()=>{e=null};return e===null?(e=t,n):!1}}const Cn=Zs("dragHorizontal"),Mn=Zs("dragVertical");function Js(t){let e=!1;if(t==="y")e=Mn();else if(t==="x")e=Cn();else{const n=Cn(),s=Mn();n&&s?e=()=>{n(),s()}:(n&&n(),s&&s())}return e}function Qs(){const t=Js(!0);return t?(t(),!1):!0}class rt{constructor(e){this.isMounted=!1,this.node=e}update(){}}function Dn(t,e){const n="pointer"+(e?"enter":"leave"),s="onHover"+(e?"Start":"End"),i=(o,r)=>{if(o.type==="touch"||Qs())return;const a=t.getProps();t.animationState&&a.whileHover&&t.animationState.setActive("whileHover",e),a[s]&&w.update(()=>a[s](o,r))};return X(t.current,n,i,{passive:!t.getProps()[s]})}class _r extends rt{mount(){this.unmount=et(Dn(this.node,!0),Dn(this.node,!1))}unmount(){}}class Xr extends rt{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch{e=!0}!e||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){!this.isActive||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=et(_(this.node.current,"focus",()=>this.onFocus()),_(this.node.current,"blur",()=>this.onBlur()))}unmount(){}}const ti=(t,e)=>e?t===e?!0:ti(t,e.parentElement):!1;function ye(t,e){if(!e)return;const n=new PointerEvent("pointer"+t);e(n,fe(n))}class Yr extends rt{constructor(){super(...arguments),this.removeStartListeners=L,this.removeEndListeners=L,this.removeAccessibleListeners=L,this.startPointerPress=(e,n)=>{if(this.removeEndListeners(),this.isPressing)return;const s=this.node.getProps(),o=X(window,"pointerup",(a,c)=>{if(!this.checkPressEnd())return;const{onTap:l,onTapCancel:u}=this.node.getProps();w.update(()=>{ti(this.node.current,a.target)?l&&l(a,c):u&&u(a,c)})},{passive:!(s.onTap||s.onPointerUp)}),r=X(window,"pointercancel",(a,c)=>this.cancelPress(a,c),{passive:!(s.onTapCancel||s.onPointerCancel)});this.removeEndListeners=et(o,r),this.startPress(e,n)},this.startAccessiblePress=()=>{const e=o=>{if(o.key!=="Enter"||this.isPressing)return;const r=a=>{a.key!=="Enter"||!this.checkPressEnd()||ye("up",(c,l)=>{const{onTap:u}=this.node.getProps();u&&w.update(()=>u(c,l))})};this.removeEndListeners(),this.removeEndListeners=_(this.node.current,"keyup",r),ye("down",(a,c)=>{this.startPress(a,c)})},n=_(this.node.current,"keydown",e),s=()=>{this.isPressing&&ye("cancel",(o,r)=>this.cancelPress(o,r))},i=_(this.node.current,"blur",s);this.removeAccessibleListeners=et(n,i)}}startPress(e,n){this.isPressing=!0;const{onTapStart:s,whileTap:i}=this.node.getProps();i&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),s&&w.update(()=>s(e,n))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!Qs()}cancelPress(e,n){if(!this.checkPressEnd())return;const{onTapCancel:s}=this.node.getProps();s&&w.update(()=>s(e,n))}mount(){const e=this.node.getProps(),n=X(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),s=_(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=et(n,s)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}const Re=new WeakMap,ve=new WeakMap,qr=t=>{const e=Re.get(t.target);e&&e(t)},Zr=t=>{t.forEach(qr)};function Jr({root:t,...e}){const n=t||document;ve.has(n)||ve.set(n,{});const s=ve.get(n),i=JSON.stringify(e);return s[i]||(s[i]=new IntersectionObserver(Zr,{root:t,...e})),s[i]}function Qr(t,e,n){const s=Jr(e);return Re.set(t,n),s.observe(t),()=>{Re.delete(t),s.unobserve(t)}}const to={some:0,all:1};class eo extends rt{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:n,margin:s,amount:i="some",once:o}=e,r={root:n?n.current:void 0,rootMargin:s,threshold:typeof i=="number"?i:to[i]},a=c=>{const{isIntersecting:l}=c;if(this.isInView===l||(this.isInView=l,o&&!l&&this.hasEnteredView))return;l&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",l);const{onViewportEnter:u,onViewportLeave:f}=this.node.getProps(),h=l?u:f;h&&h(c)};return Qr(this.node.current,r,a)}mount(){this.startObserver()}update(){if(typeof IntersectionObserver>"u")return;const{props:e,prevProps:n}=this.node;["amount","margin","root"].some(no(e,n))&&this.startObserver()}unmount(){}}function no({viewport:t={}},{viewport:e={}}={}){return n=>t[n]!==e[n]}const so={inView:{Feature:eo},tap:{Feature:Yr},focus:{Feature:Xr},hover:{Feature:_r}};function ei(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let s=0;s<n;s++)if(e[s]!==t[s])return!1;return!0}function io(t){const e={};return t.values.forEach((n,s)=>e[s]=n.get()),e}function ro(t){const e={};return t.values.forEach((n,s)=>e[s]=n.getVelocity()),e}function he(t,e,n){const s=t.getProps();return tn(s,e,n!==void 0?n:s.custom,io(t),ro(t))}let ni=L,de=L;const nt=t=>t*1e3,$=t=>t/1e3,oo={current:!1},si=t=>Array.isArray(t)&&typeof t[0]=="number";function ii(t){return!!(!t||typeof t=="string"&&ri[t]||si(t)||Array.isArray(t)&&t.every(ii))}const Ct=([t,e,n,s])=>`cubic-bezier(${t}, ${e}, ${n}, ${s})`,ri={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:Ct([0,.65,.55,1]),circOut:Ct([.55,0,1,.45]),backIn:Ct([.31,.01,.66,-.59]),backOut:Ct([.33,1.53,.69,.99])};function oi(t){if(t)return si(t)?Ct(t):Array.isArray(t)?t.map(oi):ri[t]}function ao(t,e,n,{delay:s=0,duration:i,repeat:o=0,repeatType:r="loop",ease:a,times:c}={}){const l={[e]:n};c&&(l.offset=c);const u=oi(a);return Array.isArray(u)&&(l.easing=u),t.animate(l,{delay:s,duration:i,easing:Array.isArray(u)?"linear":u,fill:"both",iterations:o+1,direction:r==="reverse"?"alternate":"normal"})}function co(t,{repeat:e,repeatType:n="loop"}){const s=e&&n!=="loop"&&e%2===1?0:t.length-1;return t[s]}const ai=(t,e,n)=>(((1-3*n+3*e)*t+(3*n-6*e))*t+3*e)*t,lo=1e-7,uo=12;function fo(t,e,n,s,i){let o,r,a=0;do r=e+(n-e)/2,o=ai(r,s,i)-t,o>0?n=r:e=r;while(Math.abs(o)>lo&&++a<uo);return r}function zt(t,e,n,s){if(t===e&&n===s)return L;const i=o=>fo(o,0,1,t,n);return o=>o===0||o===1?o:ai(i(o),e,s)}const ho=zt(.42,0,1,1),po=zt(0,0,.58,1),ci=zt(.42,0,.58,1),mo=t=>Array.isArray(t)&&typeof t[0]!="number",li=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,ui=t=>e=>1-t(1-e),en=t=>1-Math.sin(Math.acos(t)),fi=ui(en),go=li(en),hi=zt(.33,1.53,.69,.99),nn=ui(hi),yo=li(nn),vo=t=>(t*=2)<1?.5*nn(t):.5*(2-Math.pow(2,-10*(t-1))),xo={linear:L,easeIn:ho,easeInOut:ci,easeOut:po,circIn:en,circInOut:go,circOut:fi,backIn:nn,backInOut:yo,backOut:hi,anticipate:vo},Ln=t=>{if(Array.isArray(t)){de(t.length===4);const[e,n,s,i]=t;return zt(e,n,s,i)}else if(typeof t=="string")return xo[t];return t},sn=(t,e)=>n=>!!(Ut(n)&&Pr.test(n)&&n.startsWith(t)||e&&Object.prototype.hasOwnProperty.call(n,e)),di=(t,e,n)=>s=>{if(!Ut(s))return s;const[i,o,r,a]=s.match(ue);return{[t]:parseFloat(i),[e]:parseFloat(o),[n]:parseFloat(r),alpha:a!==void 0?parseFloat(a):1}},Po=t=>st(0,255,t),xe={...dt,transform:t=>Math.round(Po(t))},ft={test:sn("rgb","red"),parse:di("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:s=1})=>"rgba("+xe.transform(t)+", "+xe.transform(e)+", "+xe.transform(n)+", "+Dt(Mt.transform(s))+")"};function To(t){let e="",n="",s="",i="";return t.length>5?(e=t.substring(1,3),n=t.substring(3,5),s=t.substring(5,7),i=t.substring(7,9)):(e=t.substring(1,2),n=t.substring(2,3),s=t.substring(3,4),i=t.substring(4,5),e+=e,n+=n,s+=s,i+=i),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(s,16),alpha:i?parseInt(i,16)/255:1}}const Ee={test:sn("#"),parse:To,transform:ft.transform},gt={test:sn("hsl","hue"),parse:di("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:s=1})=>"hsla("+Math.round(t)+", "+G.transform(Dt(e))+", "+G.transform(Dt(n))+", "+Dt(Mt.transform(s))+")"},I={test:t=>ft.test(t)||Ee.test(t)||gt.test(t),parse:t=>ft.test(t)?ft.parse(t):gt.test(t)?gt.parse(t):Ee.parse(t),transform:t=>Ut(t)?t:t.hasOwnProperty("red")?ft.transform(t):gt.transform(t)},D=(t,e,n)=>-n*t+n*e+t;function Pe(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+(e-t)*6*n:n<1/2?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function bo({hue:t,saturation:e,lightness:n,alpha:s}){t/=360,e/=100,n/=100;let i=0,o=0,r=0;if(!e)i=o=r=n;else{const a=n<.5?n*(1+e):n+e-n*e,c=2*n-a;i=Pe(c,a,t+1/3),o=Pe(c,a,t),r=Pe(c,a,t-1/3)}return{red:Math.round(i*255),green:Math.round(o*255),blue:Math.round(r*255),alpha:s}}const Te=(t,e,n)=>{const s=t*t;return Math.sqrt(Math.max(0,n*(e*e-s)+s))},Vo=[Ee,ft,gt],So=t=>Vo.find(e=>e.test(t));function Rn(t){const e=So(t);let n=e.parse(t);return e===gt&&(n=bo(n)),n}const pi=(t,e)=>{const n=Rn(t),s=Rn(e),i={...n};return o=>(i.red=Te(n.red,s.red,o),i.green=Te(n.green,s.green,o),i.blue=Te(n.blue,s.blue,o),i.alpha=D(n.alpha,s.alpha,o),ft.transform(i))};function wo(t){var e,n;return isNaN(t)&&Ut(t)&&(((e=t.match(ue))===null||e===void 0?void 0:e.length)||0)+(((n=t.match(Ns))===null||n===void 0?void 0:n.length)||0)>0}const mi={regex:vr,countKey:"Vars",token:"${v}",parse:L},gi={regex:Ns,countKey:"Colors",token:"${c}",parse:I.parse},yi={regex:ue,countKey:"Numbers",token:"${n}",parse:dt.parse};function be(t,{regex:e,countKey:n,token:s,parse:i}){const o=t.tokenised.match(e);o&&(t["num"+n]=o.length,t.tokenised=t.tokenised.replace(e,s),t.values.push(...o.map(i)))}function ee(t){const e=t.toString(),n={value:e,tokenised:e,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&be(n,mi),be(n,gi),be(n,yi),n}function vi(t){return ee(t).values}function xi(t){const{values:e,numColors:n,numVars:s,tokenised:i}=ee(t),o=e.length;return r=>{let a=i;for(let c=0;c<o;c++)c<s?a=a.replace(mi.token,r[c]):c<s+n?a=a.replace(gi.token,I.transform(r[c])):a=a.replace(yi.token,Dt(r[c]));return a}}const Ao=t=>typeof t=="number"?0:t;function Co(t){const e=vi(t);return xi(t)(e.map(Ao))}const it={test:wo,parse:vi,createTransformer:xi,getAnimatableNone:Co},Pi=(t,e)=>n=>`${n>0?e:t}`;function Ti(t,e){return typeof t=="number"?n=>D(t,e,n):I.test(t)?pi(t,e):t.startsWith("var(")?Pi(t,e):Vi(t,e)}const bi=(t,e)=>{const n=[...t],s=n.length,i=t.map((o,r)=>Ti(o,e[r]));return o=>{for(let r=0;r<s;r++)n[r]=i[r](o);return n}},Mo=(t,e)=>{const n={...t,...e},s={};for(const i in n)t[i]!==void 0&&e[i]!==void 0&&(s[i]=Ti(t[i],e[i]));return i=>{for(const o in s)n[o]=s[o](i);return n}},Vi=(t,e)=>{const n=it.createTransformer(e),s=ee(t),i=ee(e);return s.numVars===i.numVars&&s.numColors===i.numColors&&s.numNumbers>=i.numNumbers?et(bi(s.values,i.values),n):Pi(t,e)},xt=(t,e,n)=>{const s=e-t;return s===0?1:(n-t)/s},En=(t,e)=>n=>D(t,e,n);function Do(t){return typeof t=="number"?En:typeof t=="string"?I.test(t)?pi:Vi:Array.isArray(t)?bi:typeof t=="object"?Mo:En}function Lo(t,e,n){const s=[],i=n||Do(t[0]),o=t.length-1;for(let r=0;r<o;r++){let a=i(t[r],t[r+1]);if(e){const c=Array.isArray(e)?e[r]||L:e;a=et(c,a)}s.push(a)}return s}function pe(t,e,{clamp:n=!0,ease:s,mixer:i}={}){const o=t.length;if(de(o===e.length),o===1)return()=>e[0];t[0]>t[o-1]&&(t=[...t].reverse(),e=[...e].reverse());const r=Lo(e,s,i),a=r.length,c=l=>{let u=0;if(a>1)for(;u<t.length-2&&!(l<t[u+1]);u++);const f=xt(t[u],t[u+1],l);return r[u](f)};return n?l=>c(st(t[0],t[o-1],l)):c}function Ro(t,e){const n=t[t.length-1];for(let s=1;s<=e;s++){const i=xt(0,e,s);t.push(D(n,1,i))}}function Si(t){const e=[0];return Ro(e,t.length-1),e}function Eo(t,e){return t.map(n=>n*e)}function Bo(t,e){return t.map(()=>e||ci).splice(0,t.length-1)}function ne({duration:t=300,keyframes:e,times:n,ease:s="easeInOut"}){const i=mo(s)?s.map(Ln):Ln(s),o={done:!1,value:e[0]},r=Eo(n&&n.length===e.length?n:Si(e),t),a=pe(r,e,{ease:Array.isArray(i)?i:Bo(e,i)});return{calculatedDuration:t,next:c=>(o.value=a(c),o.done=c>=t,o)}}function rn(t,e){return e?t*(1e3/e):0}const Fo=5;function wi(t,e,n){const s=Math.max(e-Fo,0);return rn(n-t(s),e-s)}const Ve=.001,ko=.01,Bn=10,Oo=.05,Io=1;function jo({duration:t=800,bounce:e=.25,velocity:n=0,mass:s=1}){let i,o;ni(t<=nt(Bn));let r=1-e;r=st(Oo,Io,r),t=st(ko,Bn,$(t)),r<1?(i=l=>{const u=l*r,f=u*t,h=u-n,d=Be(l,r),p=Math.exp(-f);return Ve-h/d*p},o=l=>{const f=l*r*t,h=f*n+n,d=Math.pow(r,2)*Math.pow(l,2)*t,p=Math.exp(-f),v=Be(Math.pow(l,2),r);return(-i(l)+Ve>0?-1:1)*((h-d)*p)/v}):(i=l=>{const u=Math.exp(-l*t),f=(l-n)*t+1;return-Ve+u*f},o=l=>{const u=Math.exp(-l*t),f=(n-l)*(t*t);return u*f});const a=5/t,c=No(i,o,a);if(t=nt(t),isNaN(c))return{stiffness:100,damping:10,duration:t};{const l=Math.pow(c,2)*s;return{stiffness:l,damping:r*2*Math.sqrt(s*l),duration:t}}}const Uo=12;function No(t,e,n){let s=n;for(let i=1;i<Uo;i++)s=s-t(s)/e(s);return s}function Be(t,e){return t*Math.sqrt(1-e*e)}const Wo=["duration","bounce"],zo=["stiffness","damping","mass"];function Fn(t,e){return e.some(n=>t[n]!==void 0)}function Ho(t){let e={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...t};if(!Fn(t,zo)&&Fn(t,Wo)){const n=jo(t);e={...e,...n,velocity:0,mass:1},e.isResolvedFromDuration=!0}return e}function Ai({keyframes:t,restDelta:e,restSpeed:n,...s}){const i=t[0],o=t[t.length-1],r={done:!1,value:i},{stiffness:a,damping:c,mass:l,velocity:u,duration:f,isResolvedFromDuration:h}=Ho(s),d=u?-$(u):0,p=c/(2*Math.sqrt(a*l)),v=o-i,x=$(Math.sqrt(a/l)),b=Math.abs(v)<5;n||(n=b?.01:2),e||(e=b?.005:.5);let g;if(p<1){const y=Be(x,p);g=T=>{const V=Math.exp(-p*x*T);return o-V*((d+p*x*v)/y*Math.sin(y*T)+v*Math.cos(y*T))}}else if(p===1)g=y=>o-Math.exp(-x*y)*(v+(d+x*v)*y);else{const y=x*Math.sqrt(p*p-1);g=T=>{const V=Math.exp(-p*x*T),R=Math.min(y*T,300);return o-V*((d+p*x*v)*Math.sinh(R)+y*v*Math.cosh(R))/y}}return{calculatedDuration:h&&f||null,next:y=>{const T=g(y);if(h)r.done=y>=f;else{let V=d;y!==0&&(p<1?V=wi(g,y,T):V=0);const R=Math.abs(V)<=n,C=Math.abs(o-T)<=e;r.done=R&&C}return r.value=r.done?o:T,r}}}function kn({keyframes:t,velocity:e=0,power:n=.8,timeConstant:s=325,bounceDamping:i=10,bounceStiffness:o=500,modifyTarget:r,min:a,max:c,restDelta:l=.5,restSpeed:u}){const f=t[0],h={done:!1,value:f},d=S=>a!==void 0&&S<a||c!==void 0&&S>c,p=S=>a===void 0?c:c===void 0||Math.abs(a-S)<Math.abs(c-S)?a:c;let v=n*e;const x=f+v,b=r===void 0?x:r(x);b!==x&&(v=b-f);const g=S=>-v*Math.exp(-S/s),y=S=>b+g(S),T=S=>{const A=g(S),U=y(S);h.done=Math.abs(A)<=l,h.value=h.done?b:U};let V,R;const C=S=>{d(h.value)&&(V=S,R=Ai({keyframes:[h.value,p(h.value)],velocity:wi(y,S,h.value),damping:i,stiffness:o,restDelta:l,restSpeed:u}))};return C(0),{calculatedDuration:null,next:S=>{let A=!1;return!R&&V===void 0&&(A=!0,T(S),C(S)),V!==void 0&&S>V?R.next(S-V):(!A&&T(S),h)}}}const Go=t=>{const e=({timestamp:n})=>t(n);return{start:()=>w.update(e,!0),stop:()=>W(e),now:()=>F.isProcessing?F.timestamp:performance.now()}},On=2e4;function In(t){let e=0;const n=50;let s=t.next(e);for(;!s.done&&e<On;)e+=n,s=t.next(e);return e>=On?1/0:e}const $o={decay:kn,inertia:kn,tween:ne,keyframes:ne,spring:Ai};function Ot({autoplay:t=!0,delay:e=0,driver:n=Go,keyframes:s,type:i="keyframes",repeat:o=0,repeatDelay:r=0,repeatType:a="loop",onPlay:c,onStop:l,onComplete:u,onUpdate:f,...h}){let d=1,p=!1,v,x;const b=()=>{x=new Promise(M=>{v=M})};b();let g;const y=$o[i]||ne;let T;y!==ne&&typeof s[0]!="number"&&(T=pe([0,100],s,{clamp:!1}),s=[0,100]);const V=y({...h,keyframes:s});let R;a==="mirror"&&(R=y({...h,keyframes:[...s].reverse(),velocity:-(h.velocity||0)}));let C="idle",S=null,A=null,U=null;V.calculatedDuration===null&&o&&(V.calculatedDuration=In(V));const{calculatedDuration:K}=V;let Y=1/0,q=1/0;K!==null&&(Y=K+r,q=Y*(o+1)-r);let k=0;const B=M=>{if(A===null)return;d>0&&(A=Math.min(A,M)),d<0&&(A=Math.min(M-q/d,A)),S!==null?k=S:k=Math.round(M-A)*d;const bt=k-e*(d>=0?1:-1),mn=d>=0?bt<0:bt>q;k=Math.max(bt,0),C==="finished"&&S===null&&(k=q);let gn=k,yn=V;if(o){const me=k/Y;let Ht=Math.floor(me),ot=me%1;!ot&&me>=1&&(ot=1),ot===1&&Ht--,Ht=Math.min(Ht,o+1);const xn=!!(Ht%2);xn&&(a==="reverse"?(ot=1-ot,r&&(ot-=r/Y)):a==="mirror"&&(yn=R));let Pn=st(0,1,ot);k>q&&(Pn=a==="reverse"&&xn?1:0),gn=Pn*Y}const Vt=mn?{done:!1,value:s[0]}:yn.next(gn);T&&(Vt.value=T(Vt.value));let{done:vn}=Vt;!mn&&K!==null&&(vn=d>=0?k>=q:k<=0);const nr=S===null&&(C==="finished"||C==="running"&&vn);return f&&f(Vt.value),nr&&er(),Vt},Z=()=>{g&&g.stop(),g=void 0},pt=()=>{C="idle",Z(),v(),b(),A=U=null},er=()=>{C="finished",u&&u(),Z(),v()},dn=()=>{if(p)return;g||(g=n(B));const M=g.now();c&&c(),S!==null?A=M-S:(!A||C==="finished")&&(A=M),C==="finished"&&b(),U=A,S=null,C="running",g.start()};t&&dn();const pn={then(M,bt){return x.then(M,bt)},get time(){return $(k)},set time(M){M=nt(M),k=M,S!==null||!g||d===0?S=M:A=g.now()-M/d},get duration(){const M=V.calculatedDuration===null?In(V):V.calculatedDuration;return $(M)},get speed(){return d},set speed(M){M===d||!g||(d=M,pn.time=$(k))},get state(){return C},play:dn,pause:()=>{C="paused",S=k},stop:()=>{p=!0,C!=="idle"&&(C="idle",l&&l(),pt())},cancel:()=>{U!==null&&B(U),pt()},complete:()=>{C="finished"},sample:M=>(A=0,B(M))};return pn}function Ko(t){let e;return()=>(e===void 0&&(e=t()),e)}const _o=Ko(()=>Object.hasOwnProperty.call(Element.prototype,"animate")),Xo=new Set(["opacity","clipPath","filter","transform","backgroundColor"]),Kt=10,Yo=2e4,qo=(t,e)=>e.type==="spring"||t==="backgroundColor"||!ii(e.ease);function Zo(t,e,{onUpdate:n,onComplete:s,...i}){if(!(_o()&&Xo.has(e)&&!i.repeatDelay&&i.repeatType!=="mirror"&&i.damping!==0&&i.type!=="inertia"))return!1;let r=!1,a,c;const l=()=>{c=new Promise(g=>{a=g})};l();let{keyframes:u,duration:f=300,ease:h,times:d}=i;if(qo(e,i)){const g=Ot({...i,repeat:0,delay:0});let y={done:!1,value:u[0]};const T=[];let V=0;for(;!y.done&&V<Yo;)y=g.sample(V),T.push(y.value),V+=Kt;d=void 0,u=T,f=V-Kt,h="linear"}const p=ao(t.owner.current,e,u,{...i,duration:f,ease:h,times:d}),v=()=>p.cancel(),x=()=>{w.update(v),a(),l()};return p.onfinish=()=>{t.set(co(u,i)),s&&s(),x()},{then(g,y){return c.then(g,y)},attachTimeline(g){return p.timeline=g,p.onfinish=null,L},get time(){return $(p.currentTime||0)},set time(g){p.currentTime=nt(g)},get speed(){return p.playbackRate},set speed(g){p.playbackRate=g},get duration(){return $(f)},play:()=>{r||(p.play(),W(v))},pause:()=>p.pause(),stop:()=>{if(r=!0,p.playState==="idle")return;const{currentTime:g}=p;if(g){const y=Ot({...i,autoplay:!1});t.setWithVelocity(y.sample(g-Kt).value,y.sample(g).value,Kt)}x()},complete:()=>p.finish(),cancel:x}}function Jo({keyframes:t,delay:e,onUpdate:n,onComplete:s}){const i=()=>(n&&n(t[t.length-1]),s&&s(),{time:0,speed:1,duration:0,play:L,pause:L,stop:L,then:o=>(o(),Promise.resolve()),cancel:L,complete:L});return e?Ot({keyframes:[0,1],duration:0,delay:e,onComplete:i}):i()}const Qo={type:"spring",stiffness:500,damping:25,restSpeed:10},ta=t=>({type:"spring",stiffness:550,damping:t===0?2*Math.sqrt(550):30,restSpeed:10}),ea={type:"keyframes",duration:.8},na={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},sa=(t,{keyframes:e})=>e.length>2?ea:ht.has(t)?t.startsWith("scale")?ta(e[1]):Qo:na,Fe=(t,e)=>t==="zIndex"?!1:!!(typeof e=="number"||Array.isArray(e)||typeof e=="string"&&(it.test(e)||e==="0")&&!e.startsWith("url(")),ia=new Set(["brightness","contrast","saturate","opacity"]);function ra(t){const[e,n]=t.slice(0,-1).split("(");if(e==="drop-shadow")return t;const[s]=n.match(ue)||[];if(!s)return t;const i=n.replace(s,"");let o=ia.has(e)?1:0;return s!==n&&(o*=100),e+"("+o+i+")"}const oa=/([a-z-]*)\(.*?\)/g,ke={...it,getAnimatableNone:t=>{const e=t.match(oa);return e?e.map(ra).join(" "):t}},aa={...Ws,color:I,backgroundColor:I,outlineColor:I,fill:I,stroke:I,borderColor:I,borderTopColor:I,borderRightColor:I,borderBottomColor:I,borderLeftColor:I,filter:ke,WebkitFilter:ke},on=t=>aa[t];function Ci(t,e){let n=on(t);return n!==ke&&(n=it),n.getAnimatableNone?n.getAnimatableNone(e):void 0}const Mi=t=>/^0[^.\s]+$/.test(t);function ca(t){if(typeof t=="number")return t===0;if(t!==null)return t==="none"||t==="0"||Mi(t)}function la(t,e,n,s){const i=Fe(e,n);let o;Array.isArray(n)?o=[...n]:o=[null,n];const r=s.from!==void 0?s.from:t.get();let a;const c=[];for(let l=0;l<o.length;l++)o[l]===null&&(o[l]=l===0?r:o[l-1]),ca(o[l])&&c.push(l),typeof o[l]=="string"&&o[l]!=="none"&&o[l]!=="0"&&(a=o[l]);if(i&&c.length&&a)for(let l=0;l<c.length;l++){const u=c[l];o[u]=Ci(e,a)}return o}function ua({when:t,delay:e,delayChildren:n,staggerChildren:s,staggerDirection:i,repeat:o,repeatType:r,repeatDelay:a,from:c,elapsed:l,...u}){return!!Object.keys(u).length}function an(t,e){return t[e]||t.default||t}const cn=(t,e,n,s={})=>i=>{const o=an(s,t)||{},r=o.delay||s.delay||0;let{elapsed:a=0}=s;a=a-nt(r);const c=la(e,t,n,o),l=c[0],u=c[c.length-1],f=Fe(t,l),h=Fe(t,u);let d={keyframes:c,velocity:e.getVelocity(),ease:"easeOut",...o,delay:-a,onUpdate:p=>{e.set(p),o.onUpdate&&o.onUpdate(p)},onComplete:()=>{i(),o.onComplete&&o.onComplete()}};if(ua(o)||(d={...d,...sa(t,d)}),d.duration&&(d.duration=nt(d.duration)),d.repeatDelay&&(d.repeatDelay=nt(d.repeatDelay)),!f||!h||oo.current||o.type===!1)return Jo(d);if(!s.isHandoff&&e.owner&&e.owner.current instanceof HTMLElement&&!e.owner.getProps().onUpdate){const p=Zo(e,t,d);if(p)return p}return Ot(d)};function se(t){return!!(O(t)&&t.add)}const Di=t=>/^\-?\d*\.?\d+$/.test(t);function ln(t,e){t.indexOf(e)===-1&&t.push(e)}function un(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class fn{constructor(){this.subscriptions=[]}add(e){return ln(this.subscriptions,e),()=>un(this.subscriptions,e)}notify(e,n,s){const i=this.subscriptions.length;if(i)if(i===1)this.subscriptions[0](e,n,s);else for(let o=0;o<i;o++){const r=this.subscriptions[o];r&&r(e,n,s)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const fa=t=>!isNaN(parseFloat(t)),Lt={current:void 0};class ha{constructor(e,n={}){this.version="10.16.16",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(s,i=!0)=>{this.prev=this.current,this.current=s;const{delta:o,timestamp:r}=F;this.lastUpdated!==r&&(this.timeDelta=o,this.lastUpdated=r,w.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),i&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>w.postRender(this.velocityCheck),this.velocityCheck=({timestamp:s})=>{s!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=fa(this.current),this.owner=n.owner}onChange(e){return this.on("change",e)}on(e,n){this.events[e]||(this.events[e]=new fn);const s=this.events[e].add(n);return e==="change"?()=>{s(),w.read(()=>{this.events.change.getSize()||this.stop()})}:s}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,n){this.passiveEffect=e,this.stopPassiveEffect=n}set(e,n=!0){!n||!this.passiveEffect?this.updateAndNotify(e,n):this.passiveEffect(e,this.updateAndNotify)}setWithVelocity(e,n,s){this.set(n),this.prev=e,this.timeDelta=s}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return Lt.current&&Lt.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?rn(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise(n=>{this.hasAnimated=!0,this.animation=e(n),this.events.animationStart&&this.events.animationStart.notify()}).then(()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()})}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function z(t,e){return new ha(t,e)}const Li=t=>e=>e.test(t),da={test:t=>t==="auto",parse:t=>t},Ri=[dt,P,G,J,br,Tr,da],St=t=>Ri.find(Li(t)),pa=[...Ri,I,it],ma=t=>pa.find(Li(t));function ga(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,z(n))}function ya(t,e){const n=he(t,e);let{transitionEnd:s={},transition:i={},...o}=n?t.makeTargetAnimatable(n,!1):{};o={...o,...s};for(const r in o){const a=Or(o[r]);ga(t,r,a)}}function va(t,e,n){var s,i;const o=Object.keys(e).filter(a=>!t.hasValue(a)),r=o.length;if(r)for(let a=0;a<r;a++){const c=o[a],l=e[c];let u=null;Array.isArray(l)&&(u=l[0]),u===null&&(u=(i=(s=n[c])!==null&&s!==void 0?s:t.readValue(c))!==null&&i!==void 0?i:e[c]),u!=null&&(typeof u=="string"&&(Di(u)||Mi(u))?u=parseFloat(u):!ma(u)&&it.test(l)&&(u=Ci(c,l)),t.addValue(c,z(u,{owner:t})),n[c]===void 0&&(n[c]=u),u!==null&&t.setBaseTarget(c,u))}}function xa(t,e){return e?(e[t]||e.default||e).from:void 0}function Pa(t,e,n){const s={};for(const i in t){const o=xa(i,e);if(o!==void 0)s[i]=o;else{const r=n.getValue(i);r&&(s[i]=r.get())}}return s}function Ta({protectedKeys:t,needsAnimating:e},n){const s=t.hasOwnProperty(n)&&e[n]!==!0;return e[n]=!1,s}function ba(t,e){const n=t.get();if(Array.isArray(e)){for(let s=0;s<e.length;s++)if(e[s]!==n)return!0}else return n!==e}function Ei(t,e,{delay:n=0,transitionOverride:s,type:i}={}){let{transition:o=t.getDefaultTransition(),transitionEnd:r,...a}=t.makeTargetAnimatable(e);const c=t.getValue("willChange");s&&(o=s);const l=[],u=i&&t.animationState&&t.animationState.getState()[i];for(const f in a){const h=t.getValue(f),d=a[f];if(!h||d===void 0||u&&Ta(u,f))continue;const p={delay:n,elapsed:0,...an(o||{},f)};if(window.HandoffAppearAnimations){const b=t.getProps()[Fs];if(b){const g=window.HandoffAppearAnimations(b,f,h,w);g!==null&&(p.elapsed=g,p.isHandoff=!0)}}let v=!p.isHandoff&&!ba(h,d);if(p.type==="spring"&&(h.getVelocity()||p.velocity)&&(v=!1),h.animation&&(v=!1),v)continue;h.start(cn(f,h,d,t.shouldReduceMotion&&ht.has(f)?{type:!1}:p));const x=h.animation;se(c)&&(c.add(f),x.then(()=>c.remove(f))),l.push(x)}return r&&Promise.all(l).then(()=>{r&&ya(t,r)}),l}function Oe(t,e,n={}){const s=he(t,e,n.custom);let{transition:i=t.getDefaultTransition()||{}}=s||{};n.transitionOverride&&(i=n.transitionOverride);const o=s?()=>Promise.all(Ei(t,s,n)):()=>Promise.resolve(),r=t.variantChildren&&t.variantChildren.size?(c=0)=>{const{delayChildren:l=0,staggerChildren:u,staggerDirection:f}=i;return Va(t,e,l+c,u,f,n)}:()=>Promise.resolve(),{when:a}=i;if(a){const[c,l]=a==="beforeChildren"?[o,r]:[r,o];return c().then(()=>l())}else return Promise.all([o(),r(n.delay)])}function Va(t,e,n=0,s=0,i=1,o){const r=[],a=(t.variantChildren.size-1)*s,c=i===1?(l=0)=>l*s:(l=0)=>a-l*s;return Array.from(t.variantChildren).sort(Sa).forEach((l,u)=>{l.notify("AnimationStart",e),r.push(Oe(l,e,{...o,delay:n+c(u)}).then(()=>l.notify("AnimationComplete",e)))}),Promise.all(r)}function Sa(t,e){return t.sortNodePosition(e)}function wa(t,e,n={}){t.notify("AnimationStart",e);let s;if(Array.isArray(e)){const i=e.map(o=>Oe(t,o,n));s=Promise.all(i)}else if(typeof e=="string")s=Oe(t,e,n);else{const i=typeof e=="function"?he(t,e,n.custom):e;s=Promise.all(Ei(t,i,n))}return s.then(()=>t.notify("AnimationComplete",e))}const Aa=[...$e].reverse(),Ca=$e.length;function Ma(t){return e=>Promise.all(e.map(({animation:n,options:s})=>wa(t,n,s)))}function Da(t){let e=Ma(t);const n=Ra();let s=!0;const i=(c,l)=>{const u=he(t,l);if(u){const{transition:f,transitionEnd:h,...d}=u;c={...c,...d,...h}}return c};function o(c){e=c(t)}function r(c,l){const u=t.getProps(),f=t.getVariantContext(!0)||{},h=[],d=new Set;let p={},v=1/0;for(let b=0;b<Ca;b++){const g=Aa[b],y=n[g],T=u[g]!==void 0?u[g]:f[g],V=Ft(T),R=g===l?y.isActive:null;R===!1&&(v=b);let C=T===f[g]&&T!==u[g]&&V;if(C&&s&&t.manuallyAnimateOnMount&&(C=!1),y.protectedKeys={...p},!y.isActive&&R===null||!T&&!y.prevProp||ce(T)||typeof T=="boolean")continue;const S=La(y.prevProp,T);let A=S||g===l&&y.isActive&&!C&&V||b>v&&V;const U=Array.isArray(T)?T:[T];let K=U.reduce(i,{});R===!1&&(K={});const{prevResolvedValues:Y={}}=y,q={...Y,...K},k=B=>{A=!0,d.delete(B),y.needsAnimating[B]=!0};for(const B in q){const Z=K[B],pt=Y[B];p.hasOwnProperty(B)||(Z!==pt?te(Z)&&te(pt)?!ei(Z,pt)||S?k(B):y.protectedKeys[B]=!0:Z!==void 0?k(B):d.add(B):Z!==void 0&&d.has(B)?k(B):y.protectedKeys[B]=!0)}y.prevProp=T,y.prevResolvedValues=K,y.isActive&&(p={...p,...K}),s&&t.blockInitialAnimation&&(A=!1),A&&!C&&h.push(...U.map(B=>({animation:B,options:{type:g,...c}})))}if(d.size){const b={};d.forEach(g=>{const y=t.getBaseTarget(g);y!==void 0&&(b[g]=y)}),h.push({animation:b})}let x=!!h.length;return s&&(u.initial===!1||u.initial===u.animate)&&!t.manuallyAnimateOnMount&&(x=!1),s=!1,x?e(h):Promise.resolve()}function a(c,l,u){var f;if(n[c].isActive===l)return Promise.resolve();(f=t.variantChildren)===null||f===void 0||f.forEach(d=>{var p;return(p=d.animationState)===null||p===void 0?void 0:p.setActive(c,l)}),n[c].isActive=l;const h=r(u,c);for(const d in n)n[d].protectedKeys={};return h}return{animateChanges:r,setActive:a,setAnimateFunction:o,getState:()=>n}}function La(t,e){return typeof e=="string"?e!==t:Array.isArray(e)?!ei(e,t):!1}function at(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}function Ra(){return{animate:at(!0),whileInView:at(),whileHover:at(),whileTap:at(),whileDrag:at(),whileFocus:at(),exit:at()}}class Ea extends rt{constructor(e){super(e),e.animationState||(e.animationState=Da(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),ce(e)&&(this.unmount=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:n}=this.node.prevProps||{};e!==n&&this.updateAnimationControlsSubscription()}unmount(){}}let Ba=0;class Fa extends rt{constructor(){super(...arguments),this.id=Ba++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:n,custom:s}=this.node.presenceContext,{isPresent:i}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===i)return;const o=this.node.animationState.setActive("exit",!e,{custom:s??this.node.getProps().custom});n&&!e&&o.then(()=>n(this.id))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}const ka={animation:{Feature:Ea},exit:{Feature:Fa}},jn=(t,e)=>Math.abs(t-e);function Oa(t,e){const n=jn(t.x,e.x),s=jn(t.y,e.y);return Math.sqrt(n**2+s**2)}class Bi{constructor(e,n,{transformPagePoint:s,contextWindow:i}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const u=we(this.lastMoveEventInfo,this.history),f=this.startEvent!==null,h=Oa(u.offset,{x:0,y:0})>=3;if(!f&&!h)return;const{point:d}=u,{timestamp:p}=F;this.history.push({...d,timestamp:p});const{onStart:v,onMove:x}=this.handlers;f||(v&&v(this.lastMoveEvent,u),this.startEvent=this.lastMoveEvent),x&&x(this.lastMoveEvent,u)},this.handlePointerMove=(u,f)=>{this.lastMoveEvent=u,this.lastMoveEventInfo=Se(f,this.transformPagePoint),w.update(this.updatePoint,!0)},this.handlePointerUp=(u,f)=>{if(this.end(),!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const{onEnd:h,onSessionEnd:d}=this.handlers,p=we(u.type==="pointercancel"?this.lastMoveEventInfo:Se(f,this.transformPagePoint),this.history);this.startEvent&&h&&h(u,p),d&&d(u,p)},!qs(e))return;this.handlers=n,this.transformPagePoint=s,this.contextWindow=i||window;const o=fe(e),r=Se(o,this.transformPagePoint),{point:a}=r,{timestamp:c}=F;this.history=[{...a,timestamp:c}];const{onSessionStart:l}=n;l&&l(e,we(r,this.history)),this.removeListeners=et(X(this.contextWindow,"pointermove",this.handlePointerMove),X(this.contextWindow,"pointerup",this.handlePointerUp),X(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),W(this.updatePoint)}}function Se(t,e){return e?{point:e(t.point)}:t}function Un(t,e){return{x:t.x-e.x,y:t.y-e.y}}function we({point:t},e){return{point:t,delta:Un(t,Fi(e)),offset:Un(t,Ia(e)),velocity:ja(e,.1)}}function Ia(t){return t[0]}function Fi(t){return t[t.length-1]}function ja(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,s=null;const i=Fi(t);for(;n>=0&&(s=t[n],!(i.timestamp-s.timestamp>nt(e)));)n--;if(!s)return{x:0,y:0};const o=$(i.timestamp-s.timestamp);if(o===0)return{x:0,y:0};const r={x:(i.x-s.x)/o,y:(i.y-s.y)/o};return r.x===1/0&&(r.x=0),r.y===1/0&&(r.y=0),r}function j(t){return t.max-t.min}function Ie(t,e=0,n=.01){return Math.abs(t-e)<=n}function Nn(t,e,n,s=.5){t.origin=s,t.originPoint=D(e.min,e.max,t.origin),t.scale=j(n)/j(e),(Ie(t.scale,1,1e-4)||isNaN(t.scale))&&(t.scale=1),t.translate=D(n.min,n.max,t.origin)-t.originPoint,(Ie(t.translate)||isNaN(t.translate))&&(t.translate=0)}function Rt(t,e,n,s){Nn(t.x,e.x,n.x,s?s.originX:void 0),Nn(t.y,e.y,n.y,s?s.originY:void 0)}function Wn(t,e,n){t.min=n.min+e.min,t.max=t.min+j(e)}function Ua(t,e,n){Wn(t.x,e.x,n.x),Wn(t.y,e.y,n.y)}function zn(t,e,n){t.min=e.min-n.min,t.max=t.min+j(e)}function Et(t,e,n){zn(t.x,e.x,n.x),zn(t.y,e.y,n.y)}function Na(t,{min:e,max:n},s){return e!==void 0&&t<e?t=s?D(e,t,s.min):Math.max(t,e):n!==void 0&&t>n&&(t=s?D(n,t,s.max):Math.min(t,n)),t}function Hn(t,e,n){return{min:e!==void 0?t.min+e:void 0,max:n!==void 0?t.max+n-(t.max-t.min):void 0}}function Wa(t,{top:e,left:n,bottom:s,right:i}){return{x:Hn(t.x,n,i),y:Hn(t.y,e,s)}}function Gn(t,e){let n=e.min-t.min,s=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,s]=[s,n]),{min:n,max:s}}function za(t,e){return{x:Gn(t.x,e.x),y:Gn(t.y,e.y)}}function Ha(t,e){let n=.5;const s=j(t),i=j(e);return i>s?n=xt(e.min,e.max-s,t.min):s>i&&(n=xt(t.min,t.max-i,e.min)),st(0,1,n)}function Ga(t,e){const n={};return e.min!==void 0&&(n.min=e.min-t.min),e.max!==void 0&&(n.max=e.max-t.min),n}const je=.35;function $a(t=je){return t===!1?t=0:t===!0&&(t=je),{x:$n(t,"left","right"),y:$n(t,"top","bottom")}}function $n(t,e,n){return{min:Kn(t,e),max:Kn(t,n)}}function Kn(t,e){return typeof t=="number"?t:t[e]||0}const _n=()=>({translate:0,scale:1,origin:0,originPoint:0}),yt=()=>({x:_n(),y:_n()}),Xn=()=>({min:0,max:0}),E=()=>({x:Xn(),y:Xn()});function H(t){return[t("x"),t("y")]}function ki({top:t,left:e,right:n,bottom:s}){return{x:{min:e,max:n},y:{min:t,max:s}}}function Ka({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}function _a(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),s=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:s.y,right:s.x}}function Ae(t){return t===void 0||t===1}function Ue({scale:t,scaleX:e,scaleY:n}){return!Ae(t)||!Ae(e)||!Ae(n)}function ct(t){return Ue(t)||Oi(t)||t.z||t.rotate||t.rotateX||t.rotateY}function Oi(t){return Yn(t.x)||Yn(t.y)}function Yn(t){return t&&t!=="0%"}function ie(t,e,n){const s=t-n,i=e*s;return n+i}function qn(t,e,n,s,i){return i!==void 0&&(t=ie(t,i,s)),ie(t,n,s)+e}function Ne(t,e=0,n=1,s,i){t.min=qn(t.min,e,n,s,i),t.max=qn(t.max,e,n,s,i)}function Ii(t,{x:e,y:n}){Ne(t.x,e.translate,e.scale,e.originPoint),Ne(t.y,n.translate,n.scale,n.originPoint)}function Xa(t,e,n,s=!1){const i=n.length;if(!i)return;e.x=e.y=1;let o,r;for(let a=0;a<i;a++){o=n[a],r=o.projectionDelta;const c=o.instance;c&&c.style&&c.style.display==="contents"||(s&&o.options.layoutScroll&&o.scroll&&o!==o.root&&vt(t,{x:-o.scroll.offset.x,y:-o.scroll.offset.y}),r&&(e.x*=r.x.scale,e.y*=r.y.scale,Ii(t,r)),s&&ct(o.latestValues)&&vt(t,o.latestValues))}e.x=Zn(e.x),e.y=Zn(e.y)}function Zn(t){return Number.isInteger(t)||t>1.0000000000001||t<.999999999999?t:1}function tt(t,e){t.min=t.min+e,t.max=t.max+e}function Jn(t,e,[n,s,i]){const o=e[i]!==void 0?e[i]:.5,r=D(t.min,t.max,o);Ne(t,e[n],e[s],r,e.scale)}const Ya=["x","scaleX","originX"],qa=["y","scaleY","originY"];function vt(t,e){Jn(t.x,e,Ya),Jn(t.y,e,qa)}function ji(t,e){return ki(_a(t.getBoundingClientRect(),e))}function Za(t,e,n){const s=ji(t,n),{scroll:i}=e;return i&&(tt(s.x,i.offset.x),tt(s.y,i.offset.y)),s}const Ui=({current:t})=>t?t.ownerDocument.defaultView:null,Ja=new WeakMap;class Qa{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=E(),this.visualElement=e}start(e,{snapToCursor:n=!1}={}){const{presenceContext:s}=this.visualElement;if(s&&s.isPresent===!1)return;const i=c=>{this.stopAnimation(),n&&this.snapToCursor(fe(c,"page").point)},o=(c,l)=>{const{drag:u,dragPropagation:f,onDragStart:h}=this.getProps();if(u&&!f&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Js(u),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),H(p=>{let v=this.getAxisMotionValue(p).get()||0;if(G.test(v)){const{projection:x}=this.visualElement;if(x&&x.layout){const b=x.layout.layoutBox[p];b&&(v=j(b)*(parseFloat(v)/100))}}this.originPoint[p]=v}),h&&w.update(()=>h(c,l),!1,!0);const{animationState:d}=this.visualElement;d&&d.setActive("whileDrag",!0)},r=(c,l)=>{const{dragPropagation:u,dragDirectionLock:f,onDirectionLock:h,onDrag:d}=this.getProps();if(!u&&!this.openGlobalLock)return;const{offset:p}=l;if(f&&this.currentDirection===null){this.currentDirection=tc(p),this.currentDirection!==null&&h&&h(this.currentDirection);return}this.updateAxis("x",l.point,p),this.updateAxis("y",l.point,p),this.visualElement.render(),d&&d(c,l)},a=(c,l)=>this.stop(c,l);this.panSession=new Bi(e,{onSessionStart:i,onStart:o,onMove:r,onSessionEnd:a},{transformPagePoint:this.visualElement.getTransformPagePoint(),contextWindow:Ui(this.visualElement)})}stop(e,n){const s=this.isDragging;if(this.cancel(),!s)return;const{velocity:i}=n;this.startAnimation(i);const{onDragEnd:o}=this.getProps();o&&w.update(()=>o(e,n))}cancel(){this.isDragging=!1;const{projection:e,animationState:n}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:s}=this.getProps();!s&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),n&&n.setActive("whileDrag",!1)}updateAxis(e,n,s){const{drag:i}=this.getProps();if(!s||!_t(e,i,this.currentDirection))return;const o=this.getAxisMotionValue(e);let r=this.originPoint[e]+s[e];this.constraints&&this.constraints[e]&&(r=Na(r,this.constraints[e],this.elastic[e])),o.set(r)}resolveConstraints(){var e;const{dragConstraints:n,dragElastic:s}=this.getProps(),i=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):(e=this.visualElement.projection)===null||e===void 0?void 0:e.layout,o=this.constraints;n&&mt(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):n&&i?this.constraints=Wa(i.layoutBox,n):this.constraints=!1,this.elastic=$a(s),o!==this.constraints&&i&&this.constraints&&!this.hasMutatedConstraints&&H(r=>{this.getAxisMotionValue(r)&&(this.constraints[r]=Ga(i.layoutBox[r],this.constraints[r]))})}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:n}=this.getProps();if(!e||!mt(e))return!1;const s=e.current,{projection:i}=this.visualElement;if(!i||!i.layout)return!1;const o=Za(s,i.root,this.visualElement.getTransformPagePoint());let r=za(i.layout.layoutBox,o);if(n){const a=n(Ka(r));this.hasMutatedConstraints=!!a,a&&(r=ki(a))}return r}startAnimation(e){const{drag:n,dragMomentum:s,dragElastic:i,dragTransition:o,dragSnapToOrigin:r,onDragTransitionEnd:a}=this.getProps(),c=this.constraints||{},l=H(u=>{if(!_t(u,n,this.currentDirection))return;let f=c&&c[u]||{};r&&(f={min:0,max:0});const h=i?200:1e6,d=i?40:1e7,p={type:"inertia",velocity:s?e[u]:0,bounceStiffness:h,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10,...o,...f};return this.startAxisValueAnimation(u,p)});return Promise.all(l).then(a)}startAxisValueAnimation(e,n){const s=this.getAxisMotionValue(e);return s.start(cn(e,s,0,n))}stopAnimation(){H(e=>this.getAxisMotionValue(e).stop())}getAxisMotionValue(e){const n="_drag"+e.toUpperCase(),s=this.visualElement.getProps(),i=s[n];return i||this.visualElement.getValue(e,(s.initial?s.initial[e]:void 0)||0)}snapToCursor(e){H(n=>{const{drag:s}=this.getProps();if(!_t(n,s,this.currentDirection))return;const{projection:i}=this.visualElement,o=this.getAxisMotionValue(n);if(i&&i.layout){const{min:r,max:a}=i.layout.layoutBox[n];o.set(e[n]-D(r,a,.5))}})}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:n}=this.getProps(),{projection:s}=this.visualElement;if(!mt(n)||!s||!this.constraints)return;this.stopAnimation();const i={x:0,y:0};H(r=>{const a=this.getAxisMotionValue(r);if(a){const c=a.get();i[r]=Ha({min:c,max:c},this.constraints[r])}});const{transformTemplate:o}=this.visualElement.getProps();this.visualElement.current.style.transform=o?o({},""):"none",s.root&&s.root.updateScroll(),s.updateLayout(),this.resolveConstraints(),H(r=>{if(!_t(r,e,null))return;const a=this.getAxisMotionValue(r),{min:c,max:l}=this.constraints[r];a.set(D(c,l,i[r]))})}addListeners(){if(!this.visualElement.current)return;Ja.set(this.visualElement,this);const e=this.visualElement.current,n=X(e,"pointerdown",c=>{const{drag:l,dragListener:u=!0}=this.getProps();l&&u&&this.start(c)}),s=()=>{const{dragConstraints:c}=this.getProps();mt(c)&&(this.constraints=this.resolveRefConstraints())},{projection:i}=this.visualElement,o=i.addEventListener("measure",s);i&&!i.layout&&(i.root&&i.root.updateScroll(),i.updateLayout()),s();const r=_(window,"resize",()=>this.scalePositionWithinConstraints()),a=i.addEventListener("didUpdate",({delta:c,hasLayoutChanged:l})=>{this.isDragging&&l&&(H(u=>{const f=this.getAxisMotionValue(u);f&&(this.originPoint[u]+=c[u].translate,f.set(f.get()+c[u].translate))}),this.visualElement.render())});return()=>{r(),n(),o(),a&&a()}}getProps(){const e=this.visualElement.getProps(),{drag:n=!1,dragDirectionLock:s=!1,dragPropagation:i=!1,dragConstraints:o=!1,dragElastic:r=je,dragMomentum:a=!0}=e;return{...e,drag:n,dragDirectionLock:s,dragPropagation:i,dragConstraints:o,dragElastic:r,dragMomentum:a}}}function _t(t,e,n){return(e===!0||e===t)&&(n===null||n===t)}function tc(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}class ec extends rt{constructor(e){super(e),this.removeGroupControls=L,this.removeListeners=L,this.controls=new Qa(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||L}unmount(){this.removeGroupControls(),this.removeListeners()}}const Qn=t=>(e,n)=>{t&&w.update(()=>t(e,n))};class nc extends rt{constructor(){super(...arguments),this.removePointerDownListener=L}onPointerDown(e){this.session=new Bi(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:Ui(this.node)})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:n,onPan:s,onPanEnd:i}=this.node.getProps();return{onSessionStart:Qn(e),onStart:Qn(n),onMove:s,onEnd:(o,r)=>{delete this.session,i&&w.update(()=>i(o,r))}}}mount(){this.removePointerDownListener=X(this.node.current,"pointerdown",e=>this.onPointerDown(e))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}function sc(){const t=m.useContext(oe);if(t===null)return[!0,null];const{isPresent:e,onExitComplete:n,register:s}=t,i=m.useId();return m.useEffect(()=>s(i),[]),!e&&n?[!1,()=>n&&n(i)]:[!0]}const Yt={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function ts(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const wt={correct:(t,e)=>{if(!e.target)return t;if(typeof t=="string")if(P.test(t))t=parseFloat(t);else return t;const n=ts(t,e.target.x),s=ts(t,e.target.y);return`${n}% ${s}%`}},ic={correct:(t,{treeScale:e,projectionDelta:n})=>{const s=t,i=it.parse(t);if(i.length>5)return s;const o=it.createTransformer(t),r=typeof i[0]!="number"?1:0,a=n.x.scale*e.x,c=n.y.scale*e.y;i[0+r]/=a,i[1+r]/=c;const l=D(a,c,.5);return typeof i[2+r]=="number"&&(i[2+r]/=l),typeof i[3+r]=="number"&&(i[3+r]/=l),o(i)}};class rc extends Es.Component{componentDidMount(){const{visualElement:e,layoutGroup:n,switchLayoutGroup:s,layoutId:i}=this.props,{projection:o}=e;pr(oc),o&&(n.group&&n.group.add(o),s&&s.register&&i&&s.register(o),o.root.didUpdate(),o.addEventListener("animationComplete",()=>{this.safeToRemove()}),o.setOptions({...o.options,onExitComplete:()=>this.safeToRemove()})),Yt.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:n,visualElement:s,drag:i,isPresent:o}=this.props,r=s.projection;return r&&(r.isPresent=o,i||e.layoutDependency!==n||n===void 0?r.willUpdate():this.safeToRemove(),e.isPresent!==o&&(o?r.promote():r.relegate()||w.postRender(()=>{const a=r.getStack();(!a||!a.members.length)&&this.safeToRemove()}))),null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask(()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()}))}componentWillUnmount(){const{visualElement:e,layoutGroup:n,switchLayoutGroup:s}=this.props,{projection:i}=e;i&&(i.scheduleCheckAfterUnmount(),n&&n.group&&n.group.remove(i),s&&s.deregister&&s.deregister(i))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function Ni(t){const[e,n]=sc(),s=m.useContext(_e);return Es.createElement(rc,{...t,layoutGroup:s,switchLayoutGroup:m.useContext(Os),isPresent:e,safeToRemove:n})}const oc={borderRadius:{...wt,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:wt,borderTopRightRadius:wt,borderBottomLeftRadius:wt,borderBottomRightRadius:wt,boxShadow:ic},Wi=["TopLeft","TopRight","BottomLeft","BottomRight"],ac=Wi.length,es=t=>typeof t=="string"?parseFloat(t):t,ns=t=>typeof t=="number"||P.test(t);function cc(t,e,n,s,i,o){i?(t.opacity=D(0,n.opacity!==void 0?n.opacity:1,lc(s)),t.opacityExit=D(e.opacity!==void 0?e.opacity:1,0,uc(s))):o&&(t.opacity=D(e.opacity!==void 0?e.opacity:1,n.opacity!==void 0?n.opacity:1,s));for(let r=0;r<ac;r++){const a=`border${Wi[r]}Radius`;let c=ss(e,a),l=ss(n,a);if(c===void 0&&l===void 0)continue;c||(c=0),l||(l=0),c===0||l===0||ns(c)===ns(l)?(t[a]=Math.max(D(es(c),es(l),s),0),(G.test(l)||G.test(c))&&(t[a]+="%")):t[a]=l}(e.rotate||n.rotate)&&(t.rotate=D(e.rotate||0,n.rotate||0,s))}function ss(t,e){return t[e]!==void 0?t[e]:t.borderRadius}const lc=zi(0,.5,fi),uc=zi(.5,.95,L);function zi(t,e,n){return s=>s<t?0:s>e?1:n(xt(t,e,s))}function is(t,e){t.min=e.min,t.max=e.max}function N(t,e){is(t.x,e.x),is(t.y,e.y)}function rs(t,e,n,s,i){return t-=e,t=ie(t,1/n,s),i!==void 0&&(t=ie(t,1/i,s)),t}function fc(t,e=0,n=1,s=.5,i,o=t,r=t){if(G.test(e)&&(e=parseFloat(e),e=D(r.min,r.max,e/100)-r.min),typeof e!="number")return;let a=D(o.min,o.max,s);t===o&&(a-=e),t.min=rs(t.min,e,n,a,i),t.max=rs(t.max,e,n,a,i)}function os(t,e,[n,s,i],o,r){fc(t,e[n],e[s],e[i],e.scale,o,r)}const hc=["x","scaleX","originX"],dc=["y","scaleY","originY"];function as(t,e,n,s){os(t.x,e,hc,n?n.x:void 0,s?s.x:void 0),os(t.y,e,dc,n?n.y:void 0,s?s.y:void 0)}function cs(t){return t.translate===0&&t.scale===1}function Hi(t){return cs(t.x)&&cs(t.y)}function pc(t,e){return t.x.min===e.x.min&&t.x.max===e.x.max&&t.y.min===e.y.min&&t.y.max===e.y.max}function Gi(t,e){return Math.round(t.x.min)===Math.round(e.x.min)&&Math.round(t.x.max)===Math.round(e.x.max)&&Math.round(t.y.min)===Math.round(e.y.min)&&Math.round(t.y.max)===Math.round(e.y.max)}function ls(t){return j(t.x)/j(t.y)}class mc{constructor(){this.members=[]}add(e){ln(this.members,e),e.scheduleRender()}remove(e){if(un(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const n=this.members[this.members.length-1];n&&this.promote(n)}}relegate(e){const n=this.members.findIndex(i=>e===i);if(n===0)return!1;let s;for(let i=n;i>=0;i--){const o=this.members[i];if(o.isPresent!==!1){s=o;break}}return s?(this.promote(s),!0):!1}promote(e,n){const s=this.lead;if(e!==s&&(this.prevLead=s,this.lead=e,e.show(),s)){s.instance&&s.scheduleRender(),e.scheduleRender(),e.resumeFrom=s,n&&(e.resumeFrom.preserveOpacity=!0),s.snapshot&&(e.snapshot=s.snapshot,e.snapshot.latestValues=s.animationValues||s.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:i}=e.options;i===!1&&s.hide()}}exitAnimationComplete(){this.members.forEach(e=>{const{options:n,resumingFrom:s}=e;n.onExitComplete&&n.onExitComplete(),s&&s.options.onExitComplete&&s.options.onExitComplete()})}scheduleRender(){this.members.forEach(e=>{e.instance&&e.scheduleRender(!1)})}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function us(t,e,n){let s="";const i=t.x.translate/e.x,o=t.y.translate/e.y;if((i||o)&&(s=`translate3d(${i}px, ${o}px, 0) `),(e.x!==1||e.y!==1)&&(s+=`scale(${1/e.x}, ${1/e.y}) `),n){const{rotate:c,rotateX:l,rotateY:u}=n;c&&(s+=`rotate(${c}deg) `),l&&(s+=`rotateX(${l}deg) `),u&&(s+=`rotateY(${u}deg) `)}const r=t.x.scale*e.x,a=t.y.scale*e.y;return(r!==1||a!==1)&&(s+=`scale(${r}, ${a})`),s||"none"}const gc=(t,e)=>t.depth-e.depth;class yc{constructor(){this.children=[],this.isDirty=!1}add(e){ln(this.children,e),this.isDirty=!0}remove(e){un(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(gc),this.isDirty=!1,this.children.forEach(e)}}function vc(t,e){const n=performance.now(),s=({timestamp:i})=>{const o=i-n;o>=e&&(W(s),t(o-e))};return w.read(s,!0),()=>W(s)}function xc(t){window.MotionDebug&&window.MotionDebug.record(t)}function Pc(t){return t instanceof SVGElement&&t.tagName!=="svg"}function Tc(t,e,n){const s=O(t)?t:z(t);return s.start(cn("",s,e,n)),s.animation}const fs=["","X","Y","Z"],bc={visibility:"hidden"},hs=1e3;let Vc=0;const lt={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function $i({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:s,resetTransform:i}){return class{constructor(r={},a=e==null?void 0:e()){this.id=Vc++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.projectionUpdateScheduled=!1,lt.totalNodes=lt.resolvedTargetDeltas=lt.recalculatedProjection=0,this.nodes.forEach(Ac),this.nodes.forEach(Rc),this.nodes.forEach(Ec),this.nodes.forEach(Cc),xc(lt)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=r,this.root=a?a.root||a:this,this.path=a?[...a.path,a]:[],this.parent=a,this.depth=a?a.depth+1:0;for(let c=0;c<this.path.length;c++)this.path[c].shouldResetTransform=!0;this.root===this&&(this.nodes=new yc)}addEventListener(r,a){return this.eventHandlers.has(r)||this.eventHandlers.set(r,new fn),this.eventHandlers.get(r).add(a)}notifyListeners(r,...a){const c=this.eventHandlers.get(r);c&&c.notify(...a)}hasListeners(r){return this.eventHandlers.has(r)}mount(r,a=this.root.hasTreeAnimated){if(this.instance)return;this.isSVG=Pc(r),this.instance=r;const{layoutId:c,layout:l,visualElement:u}=this.options;if(u&&!u.current&&u.mount(r),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),a&&(l||c)&&(this.isLayoutDirty=!0),t){let f;const h=()=>this.root.updateBlockedByResize=!1;t(r,()=>{this.root.updateBlockedByResize=!0,f&&f(),f=vc(h,250),Yt.hasAnimatedSinceResize&&(Yt.hasAnimatedSinceResize=!1,this.nodes.forEach(ps))})}c&&this.root.registerSharedNode(c,this),this.options.animate!==!1&&u&&(c||l)&&this.addEventListener("didUpdate",({delta:f,hasLayoutChanged:h,hasRelativeTargetChanged:d,layout:p})=>{if(this.isTreeAnimationBlocked()){this.target=void 0,this.relativeTarget=void 0;return}const v=this.options.transition||u.getDefaultTransition()||Ic,{onLayoutAnimationStart:x,onLayoutAnimationComplete:b}=u.getProps(),g=!this.targetLayout||!Gi(this.targetLayout,p)||d,y=!h&&d;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||y||h&&(g||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(f,y);const T={...an(v,"layout"),onPlay:x,onComplete:b};(u.shouldReduceMotion||this.options.layoutRoot)&&(T.delay=0,T.type=!1),this.startAnimation(T)}else h||ps(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=p})}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const r=this.getStack();r&&r.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,W(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(Bc),this.animationId++)}getTransformTemplate(){const{visualElement:r}=this.options;return r&&r.getProps().transformTemplate}willUpdate(r=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return}if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let u=0;u<this.path.length;u++){const f=this.path[u];f.shouldResetTransform=!0,f.updateScroll("snapshot"),f.options.layoutRoot&&f.willUpdate(!1)}const{layoutId:a,layout:c}=this.options;if(a===void 0&&!c)return;const l=this.getTransformTemplate();this.prevTransformTemplateValue=l?l(this.latestValues,""):void 0,this.updateSnapshot(),r&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked()){this.unblockUpdate(),this.clearAllSnapshots(),this.nodes.forEach(ds);return}this.isUpdating||this.nodes.forEach(Dc),this.isUpdating=!1,this.nodes.forEach(Lc),this.nodes.forEach(Sc),this.nodes.forEach(wc),this.clearAllSnapshots();const a=performance.now();F.delta=st(0,1e3/60,a-F.timestamp),F.timestamp=a,F.isProcessing=!0,ge.update.process(F),ge.preRender.process(F),ge.render.process(F),F.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask(()=>this.update()))}clearAllSnapshots(){this.nodes.forEach(Mc),this.sharedNodes.forEach(Fc)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,w.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){w.postRender(()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()})}updateSnapshot(){this.snapshot||!this.instance||(this.snapshot=this.measure())}updateLayout(){if(!this.instance||(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let c=0;c<this.path.length;c++)this.path[c].updateScroll();const r=this.layout;this.layout=this.measure(!1),this.layoutCorrected=E(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:a}=this.options;a&&a.notify("LayoutMeasure",this.layout.layoutBox,r?r.layoutBox:void 0)}updateScroll(r="measure"){let a=!!(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===r&&(a=!1),a&&(this.scroll={animationId:this.root.animationId,phase:r,isRoot:s(this.instance),offset:n(this.instance)})}resetTransform(){if(!i)return;const r=this.isLayoutDirty||this.shouldResetTransform,a=this.projectionDelta&&!Hi(this.projectionDelta),c=this.getTransformTemplate(),l=c?c(this.latestValues,""):void 0,u=l!==this.prevTransformTemplateValue;r&&(a||ct(this.latestValues)||u)&&(i(this.instance,l),this.shouldResetTransform=!1,this.scheduleRender())}measure(r=!0){const a=this.measurePageBox();let c=this.removeElementScroll(a);return r&&(c=this.removeTransform(c)),jc(c),{animationId:this.root.animationId,measuredBox:a,layoutBox:c,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:r}=this.options;if(!r)return E();const a=r.measureViewportBox(),{scroll:c}=this.root;return c&&(tt(a.x,c.offset.x),tt(a.y,c.offset.y)),a}removeElementScroll(r){const a=E();N(a,r);for(let c=0;c<this.path.length;c++){const l=this.path[c],{scroll:u,options:f}=l;if(l!==this.root&&u&&f.layoutScroll){if(u.isRoot){N(a,r);const{scroll:h}=this.root;h&&(tt(a.x,-h.offset.x),tt(a.y,-h.offset.y))}tt(a.x,u.offset.x),tt(a.y,u.offset.y)}}return a}applyTransform(r,a=!1){const c=E();N(c,r);for(let l=0;l<this.path.length;l++){const u=this.path[l];!a&&u.options.layoutScroll&&u.scroll&&u!==u.root&&vt(c,{x:-u.scroll.offset.x,y:-u.scroll.offset.y}),ct(u.latestValues)&&vt(c,u.latestValues)}return ct(this.latestValues)&&vt(c,this.latestValues),c}removeTransform(r){const a=E();N(a,r);for(let c=0;c<this.path.length;c++){const l=this.path[c];if(!l.instance||!ct(l.latestValues))continue;Ue(l.latestValues)&&l.updateSnapshot();const u=E(),f=l.measurePageBox();N(u,f),as(a,l.latestValues,l.snapshot?l.snapshot.layoutBox:void 0,u)}return ct(this.latestValues)&&as(a,this.latestValues),a}setTargetDelta(r){this.targetDelta=r,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(r){this.options={...this.options,...r,crossfade:r.crossfade!==void 0?r.crossfade:!0}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==F.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(r=!1){var a;const c=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=c.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=c.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=c.isSharedProjectionDirty);const l=!!this.resumingFrom||this!==c;if(!(r||l&&this.isSharedProjectionDirty||this.isProjectionDirty||!((a=this.parent)===null||a===void 0)&&a.isProjectionDirty||this.attemptToResolveRelativeTarget))return;const{layout:f,layoutId:h}=this.options;if(!(!this.layout||!(f||h))){if(this.resolvedRelativeTargetAt=F.timestamp,!this.targetDelta&&!this.relativeTarget){const d=this.getClosestProjectingParent();d&&d.layout&&this.animationProgress!==1?(this.relativeParent=d,this.forceRelativeParentToResolveTarget(),this.relativeTarget=E(),this.relativeTargetOrigin=E(),Et(this.relativeTargetOrigin,this.layout.layoutBox,d.layout.layoutBox),N(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(!(!this.relativeTarget&&!this.targetDelta)){if(this.target||(this.target=E(),this.targetWithTransforms=E()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),Ua(this.target,this.relativeTarget,this.relativeParent.target)):this.targetDelta?(this.resumingFrom?this.target=this.applyTransform(this.layout.layoutBox):N(this.target,this.layout.layoutBox),Ii(this.target,this.targetDelta)):N(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const d=this.getClosestProjectingParent();d&&!!d.resumingFrom==!!this.resumingFrom&&!d.options.layoutScroll&&d.target&&this.animationProgress!==1?(this.relativeParent=d,this.forceRelativeParentToResolveTarget(),this.relativeTarget=E(),this.relativeTargetOrigin=E(),Et(this.relativeTargetOrigin,this.target,d.target),N(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}lt.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(!(!this.parent||Ue(this.parent.latestValues)||Oi(this.parent.latestValues)))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return!!((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var r;const a=this.getLead(),c=!!this.resumingFrom||this!==a;let l=!0;if((this.isProjectionDirty||!((r=this.parent)===null||r===void 0)&&r.isProjectionDirty)&&(l=!1),c&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(l=!1),this.resolvedRelativeTargetAt===F.timestamp&&(l=!1),l)return;const{layout:u,layoutId:f}=this.options;if(this.isTreeAnimating=!!(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!(u||f))return;N(this.layoutCorrected,this.layout.layoutBox);const h=this.treeScale.x,d=this.treeScale.y;Xa(this.layoutCorrected,this.treeScale,this.path,c),a.layout&&!a.target&&(this.treeScale.x!==1||this.treeScale.y!==1)&&(a.target=a.layout.layoutBox);const{target:p}=a;if(!p){this.projectionTransform&&(this.projectionDelta=yt(),this.projectionTransform="none",this.scheduleRender());return}this.projectionDelta||(this.projectionDelta=yt(),this.projectionDeltaWithTransform=yt());const v=this.projectionTransform;Rt(this.projectionDelta,this.layoutCorrected,p,this.latestValues),this.projectionTransform=us(this.projectionDelta,this.treeScale),(this.projectionTransform!==v||this.treeScale.x!==h||this.treeScale.y!==d)&&(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",p)),lt.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(r=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),r){const a=this.getStack();a&&a.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(r,a=!1){const c=this.snapshot,l=c?c.latestValues:{},u={...this.latestValues},f=yt();(!this.relativeParent||!this.relativeParent.options.layoutRoot)&&(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!a;const h=E(),d=c?c.source:void 0,p=this.layout?this.layout.source:void 0,v=d!==p,x=this.getStack(),b=!x||x.members.length<=1,g=!!(v&&!b&&this.options.crossfade===!0&&!this.path.some(Oc));this.animationProgress=0;let y;this.mixTargetDelta=T=>{const V=T/1e3;ms(f.x,r.x,V),ms(f.y,r.y,V),this.setTargetDelta(f),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(Et(h,this.layout.layoutBox,this.relativeParent.layout.layoutBox),kc(this.relativeTarget,this.relativeTargetOrigin,h,V),y&&pc(this.relativeTarget,y)&&(this.isProjectionDirty=!1),y||(y=E()),N(y,this.relativeTarget)),v&&(this.animationValues=u,cc(u,l,this.latestValues,V,g,b)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=V},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(r){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(W(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=w.update(()=>{Yt.hasAnimatedSinceResize=!0,this.currentAnimation=Tc(0,hs,{...r,onUpdate:a=>{this.mixTargetDelta(a),r.onUpdate&&r.onUpdate(a)},onComplete:()=>{r.onComplete&&r.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0})}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const r=this.getStack();r&&r.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(hs),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const r=this.getLead();let{targetWithTransforms:a,target:c,layout:l,latestValues:u}=r;if(!(!a||!c||!l)){if(this!==r&&this.layout&&l&&Ki(this.options.animationType,this.layout.layoutBox,l.layoutBox)){c=this.target||E();const f=j(this.layout.layoutBox.x);c.x.min=r.target.x.min,c.x.max=c.x.min+f;const h=j(this.layout.layoutBox.y);c.y.min=r.target.y.min,c.y.max=c.y.min+h}N(a,c),vt(a,u),Rt(this.projectionDeltaWithTransform,this.layoutCorrected,a,u)}}registerSharedNode(r,a){this.sharedNodes.has(r)||this.sharedNodes.set(r,new mc),this.sharedNodes.get(r).add(a);const l=a.options.initialPromotionConfig;a.promote({transition:l?l.transition:void 0,preserveFollowOpacity:l&&l.shouldPreserveFollowOpacity?l.shouldPreserveFollowOpacity(a):void 0})}isLead(){const r=this.getStack();return r?r.lead===this:!0}getLead(){var r;const{layoutId:a}=this.options;return a?((r=this.getStack())===null||r===void 0?void 0:r.lead)||this:this}getPrevLead(){var r;const{layoutId:a}=this.options;return a?(r=this.getStack())===null||r===void 0?void 0:r.prevLead:void 0}getStack(){const{layoutId:r}=this.options;if(r)return this.root.sharedNodes.get(r)}promote({needsReset:r,transition:a,preserveFollowOpacity:c}={}){const l=this.getStack();l&&l.promote(this,c),r&&(this.projectionDelta=void 0,this.needsReset=!0),a&&this.setOptions({transition:a})}relegate(){const r=this.getStack();return r?r.relegate(this):!1}resetRotation(){const{visualElement:r}=this.options;if(!r)return;let a=!1;const{latestValues:c}=r;if((c.rotate||c.rotateX||c.rotateY||c.rotateZ)&&(a=!0),!a)return;const l={};for(let u=0;u<fs.length;u++){const f="rotate"+fs[u];c[f]&&(l[f]=c[f],r.setStaticValue(f,0))}r.render();for(const u in l)r.setStaticValue(u,l[u]);r.scheduleRender()}getProjectionStyles(r){var a,c;if(!this.instance||this.isSVG)return;if(!this.isVisible)return bc;const l={visibility:""},u=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,l.opacity="",l.pointerEvents=Xt(r==null?void 0:r.pointerEvents)||"",l.transform=u?u(this.latestValues,""):"none",l;const f=this.getLead();if(!this.projectionDelta||!this.layout||!f.target){const v={};return this.options.layoutId&&(v.opacity=this.latestValues.opacity!==void 0?this.latestValues.opacity:1,v.pointerEvents=Xt(r==null?void 0:r.pointerEvents)||""),this.hasProjected&&!ct(this.latestValues)&&(v.transform=u?u({},""):"none",this.hasProjected=!1),v}const h=f.animationValues||f.latestValues;this.applyTransformsToTarget(),l.transform=us(this.projectionDeltaWithTransform,this.treeScale,h),u&&(l.transform=u(h,l.transform));const{x:d,y:p}=this.projectionDelta;l.transformOrigin=`${d.origin*100}% ${p.origin*100}% 0`,f.animationValues?l.opacity=f===this?(c=(a=h.opacity)!==null&&a!==void 0?a:this.latestValues.opacity)!==null&&c!==void 0?c:1:this.preserveOpacity?this.latestValues.opacity:h.opacityExit:l.opacity=f===this?h.opacity!==void 0?h.opacity:"":h.opacityExit!==void 0?h.opacityExit:0;for(const v in Jt){if(h[v]===void 0)continue;const{correct:x,applyTo:b}=Jt[v],g=l.transform==="none"?h[v]:x(h[v],f);if(b){const y=b.length;for(let T=0;T<y;T++)l[b[T]]=g}else l[v]=g}return this.options.layoutId&&(l.pointerEvents=f===this?Xt(r==null?void 0:r.pointerEvents)||"":"none"),l}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach(r=>{var a;return(a=r.currentAnimation)===null||a===void 0?void 0:a.stop()}),this.root.nodes.forEach(ds),this.root.sharedNodes.clear()}}}function Sc(t){t.updateLayout()}function wc(t){var e;const n=((e=t.resumeFrom)===null||e===void 0?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&n&&t.hasListeners("didUpdate")){const{layoutBox:s,measuredBox:i}=t.layout,{animationType:o}=t.options,r=n.source!==t.layout.source;o==="size"?H(f=>{const h=r?n.measuredBox[f]:n.layoutBox[f],d=j(h);h.min=s[f].min,h.max=h.min+d}):Ki(o,n.layoutBox,s)&&H(f=>{const h=r?n.measuredBox[f]:n.layoutBox[f],d=j(s[f]);h.max=h.min+d,t.relativeTarget&&!t.currentAnimation&&(t.isProjectionDirty=!0,t.relativeTarget[f].max=t.relativeTarget[f].min+d)});const a=yt();Rt(a,s,n.layoutBox);const c=yt();r?Rt(c,t.applyTransform(i,!0),n.measuredBox):Rt(c,s,n.layoutBox);const l=!Hi(a);let u=!1;if(!t.resumeFrom){const f=t.getClosestProjectingParent();if(f&&!f.resumeFrom){const{snapshot:h,layout:d}=f;if(h&&d){const p=E();Et(p,n.layoutBox,h.layoutBox);const v=E();Et(v,s,d.layoutBox),Gi(p,v)||(u=!0),f.options.layoutRoot&&(t.relativeTarget=v,t.relativeTargetOrigin=p,t.relativeParent=f)}}}t.notifyListeners("didUpdate",{layout:s,snapshot:n,delta:c,layoutDelta:a,hasLayoutChanged:l,hasRelativeTargetChanged:u})}else if(t.isLead()){const{onExitComplete:s}=t.options;s&&s()}t.options.transition=void 0}function Ac(t){lt.totalNodes++,t.parent&&(t.isProjecting()||(t.isProjectionDirty=t.parent.isProjectionDirty),t.isSharedProjectionDirty||(t.isSharedProjectionDirty=!!(t.isProjectionDirty||t.parent.isProjectionDirty||t.parent.isSharedProjectionDirty)),t.isTransformDirty||(t.isTransformDirty=t.parent.isTransformDirty))}function Cc(t){t.isProjectionDirty=t.isSharedProjectionDirty=t.isTransformDirty=!1}function Mc(t){t.clearSnapshot()}function ds(t){t.clearMeasurements()}function Dc(t){t.isLayoutDirty=!1}function Lc(t){const{visualElement:e}=t.options;e&&e.getProps().onBeforeLayoutMeasure&&e.notify("BeforeLayoutMeasure"),t.resetTransform()}function ps(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0,t.isProjectionDirty=!0}function Rc(t){t.resolveTargetDelta()}function Ec(t){t.calcProjection()}function Bc(t){t.resetRotation()}function Fc(t){t.removeLeadSnapshot()}function ms(t,e,n){t.translate=D(e.translate,0,n),t.scale=D(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function gs(t,e,n,s){t.min=D(e.min,n.min,s),t.max=D(e.max,n.max,s)}function kc(t,e,n,s){gs(t.x,e.x,n.x,s),gs(t.y,e.y,n.y,s)}function Oc(t){return t.animationValues&&t.animationValues.opacityExit!==void 0}const Ic={duration:.45,ease:[.4,0,.1,1]},ys=t=>typeof navigator<"u"&&navigator.userAgent.toLowerCase().includes(t),vs=ys("applewebkit/")&&!ys("chrome/")?Math.round:L;function xs(t){t.min=vs(t.min),t.max=vs(t.max)}function jc(t){xs(t.x),xs(t.y)}function Ki(t,e,n){return t==="position"||t==="preserve-aspect"&&!Ie(ls(e),ls(n),.2)}const Uc=$i({attachResizeListener:(t,e)=>_(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),Ce={current:void 0},_i=$i({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!Ce.current){const t=new Uc({});t.mount(window),t.setOptions({layoutScroll:!0}),Ce.current=t}return Ce.current},resetTransform:(t,e)=>{t.style.transform=e!==void 0?e:"none"},checkIsScrollRoot:t=>window.getComputedStyle(t).position==="fixed"}),Nc={pan:{Feature:nc},drag:{Feature:ec,ProjectionNode:_i,MeasureLayout:Ni}},Wc=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function zc(t){const e=Wc.exec(t);if(!e)return[,];const[,n,s]=e;return[n,s]}function We(t,e,n=1){const[s,i]=zc(t);if(!s)return;const o=window.getComputedStyle(e).getPropertyValue(s);if(o){const r=o.trim();return Di(r)?parseFloat(r):r}else return Le(i)?We(i,e,n+1):i}function Hc(t,{...e},n){const s=t.current;if(!(s instanceof Element))return{target:e,transitionEnd:n};n&&(n={...n}),t.values.forEach(i=>{const o=i.get();if(!Le(o))return;const r=We(o,s);r&&i.set(r)});for(const i in e){const o=e[i];if(!Le(o))continue;const r=We(o,s);r&&(e[i]=r,n||(n={}),n[i]===void 0&&(n[i]=o))}return{target:e,transitionEnd:n}}const Gc=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),Xi=t=>Gc.has(t),$c=t=>Object.keys(t).some(Xi),Ps=t=>t===dt||t===P,Ts=(t,e)=>parseFloat(t.split(", ")[e]),bs=(t,e)=>(n,{transform:s})=>{if(s==="none"||!s)return 0;const i=s.match(/^matrix3d\((.+)\)$/);if(i)return Ts(i[1],e);{const o=s.match(/^matrix\((.+)\)$/);return o?Ts(o[1],t):0}},Kc=new Set(["x","y","z"]),_c=jt.filter(t=>!Kc.has(t));function Xc(t){const e=[];return _c.forEach(n=>{const s=t.getValue(n);s!==void 0&&(e.push([n,s.get()]),s.set(n.startsWith("scale")?1:0))}),e.length&&t.render(),e}const Pt={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:bs(4,13),y:bs(5,14)};Pt.translateX=Pt.x;Pt.translateY=Pt.y;const Yc=(t,e,n)=>{const s=e.measureViewportBox(),i=e.current,o=getComputedStyle(i),{display:r}=o,a={};r==="none"&&e.setStaticValue("display",t.display||"block"),n.forEach(l=>{a[l]=Pt[l](s,o)}),e.render();const c=e.measureViewportBox();return n.forEach(l=>{const u=e.getValue(l);u&&u.jump(a[l]),t[l]=Pt[l](c,o)}),t},qc=(t,e,n={},s={})=>{e={...e},s={...s};const i=Object.keys(e).filter(Xi);let o=[],r=!1;const a=[];if(i.forEach(c=>{const l=t.getValue(c);if(!t.hasValue(c))return;let u=n[c],f=St(u);const h=e[c];let d;if(te(h)){const p=h.length,v=h[0]===null?1:0;u=h[v],f=St(u);for(let x=v;x<p&&h[x]!==null;x++)d?de(St(h[x])===d):d=St(h[x])}else d=St(h);if(f!==d)if(Ps(f)&&Ps(d)){const p=l.get();typeof p=="string"&&l.set(parseFloat(p)),typeof h=="string"?e[c]=parseFloat(h):Array.isArray(h)&&d===P&&(e[c]=h.map(parseFloat))}else f!=null&&f.transform&&(d!=null&&d.transform)&&(u===0||h===0)?u===0?l.set(d.transform(u)):e[c]=f.transform(h):(r||(o=Xc(t),r=!0),a.push(c),s[c]=s[c]!==void 0?s[c]:e[c],l.jump(h))}),a.length){const c=a.indexOf("height")>=0?window.pageYOffset:null,l=Yc(e,t,a);return o.length&&o.forEach(([u,f])=>{t.getValue(u).set(f)}),t.render(),ae&&c!==null&&window.scrollTo({top:c}),{target:l,transitionEnd:s}}else return{target:e,transitionEnd:s}};function Zc(t,e,n,s){return $c(e)?qc(t,e,n,s):{target:e,transitionEnd:s}}const Jc=(t,e,n,s)=>{const i=Hc(t,e,s);return e=i.target,s=i.transitionEnd,Zc(t,e,n,s)},ze={current:null},Yi={current:!1};function Qc(){if(Yi.current=!0,!!ae)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>ze.current=t.matches;t.addListener(e),e()}else ze.current=!1}function tl(t,e,n){const{willChange:s}=e;for(const i in e){const o=e[i],r=n[i];if(O(o))t.addValue(i,o),se(s)&&s.add(i);else if(O(r))t.addValue(i,z(o,{owner:t})),se(s)&&s.remove(i);else if(r!==o)if(t.hasValue(i)){const a=t.getValue(i);!a.hasAnimated&&a.set(o)}else{const a=t.getStaticValue(i);t.addValue(i,z(a!==void 0?a:o,{owner:t}))}}for(const i in n)e[i]===void 0&&t.removeValue(i);return e}const Vs=new WeakMap,qi=Object.keys(kt),el=qi.length,Ss=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],nl=Ke.length;class sl{constructor({parent:e,props:n,presenceContext:s,reducedMotionConfig:i,visualState:o},r={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>w.render(this.render,!1,!0);const{latestValues:a,renderState:c}=o;this.latestValues=a,this.baseTarget={...a},this.initialValues=n.initial?{...a}:{},this.renderState=c,this.parent=e,this.props=n,this.presenceContext=s,this.depth=e?e.depth+1:0,this.reducedMotionConfig=i,this.options=r,this.isControllingVariants=le(n),this.isVariantNode=ks(n),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=!!(e&&e.current);const{willChange:l,...u}=this.scrapeMotionValuesFromProps(n,{});for(const f in u){const h=u[f];a[f]!==void 0&&O(h)&&(h.set(a[f],!1),se(l)&&l.add(f))}}scrapeMotionValuesFromProps(e,n){return{}}mount(e){this.current=e,Vs.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach((n,s)=>this.bindToMotionValue(s,n)),Yi.current||Qc(),this.shouldReduceMotion=this.reducedMotionConfig==="never"?!1:this.reducedMotionConfig==="always"?!0:ze.current,this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){Vs.delete(this.current),this.projection&&this.projection.unmount(),W(this.notifyUpdate),W(this.render),this.valueSubscriptions.forEach(e=>e()),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null}bindToMotionValue(e,n){const s=ht.has(e),i=n.on("change",r=>{this.latestValues[e]=r,this.props.onUpdate&&w.update(this.notifyUpdate,!1,!0),s&&this.projection&&(this.projection.isTransformDirty=!0)}),o=n.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,()=>{i(),o()})}sortNodePosition(e){return!this.current||!this.sortInstanceNodePosition||this.type!==e.type?0:this.sortInstanceNodePosition(this.current,e.current)}loadFeatures({children:e,...n},s,i,o){let r,a;for(let c=0;c<el;c++){const l=qi[c],{isEnabled:u,Feature:f,ProjectionNode:h,MeasureLayout:d}=kt[l];h&&(r=h),u(n)&&(!this.features[l]&&f&&(this.features[l]=new f(this)),d&&(a=d))}if(!this.projection&&r){this.projection=new r(this.latestValues,this.parent&&this.parent.projection);const{layoutId:c,layout:l,drag:u,dragConstraints:f,layoutScroll:h,layoutRoot:d}=n;this.projection.setOptions({layoutId:c,layout:l,alwaysMeasureLayout:!!u||f&&mt(f),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:typeof l=="string"?l:"both",initialPromotionConfig:o,layoutScroll:h,layoutRoot:d})}return a}updateFeatures(){for(const e in this.features){const n=this.features[e];n.isMounted?n.update():(n.mount(),n.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):E()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,n){this.latestValues[e]=n}makeTargetAnimatable(e,n=!0){return this.makeTargetAnimatableFromInstance(e,this.props,n)}update(e,n){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=n;for(let s=0;s<Ss.length;s++){const i=Ss[s];this.propEventSubscriptions[i]&&(this.propEventSubscriptions[i](),delete this.propEventSubscriptions[i]);const o=e["on"+i];o&&(this.propEventSubscriptions[i]=this.on(i,o))}this.prevMotionValues=tl(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const s=this.parent?this.parent.getVariantContext()||{}:{};return this.props.initial!==void 0&&(s.initial=this.props.initial),s}const n={};for(let s=0;s<nl;s++){const i=Ke[s],o=this.props[i];(Ft(o)||o===!1)&&(n[i]=o)}return n}addVariantChild(e){const n=this.getClosestVariantNode();if(n)return n.variantChildren&&n.variantChildren.add(e),()=>n.variantChildren.delete(e)}addValue(e,n){n!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,n)),this.values.set(e,n),this.latestValues[e]=n.get()}removeValue(e){this.values.delete(e);const n=this.valueSubscriptions.get(e);n&&(n(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,n){if(this.props.values&&this.props.values[e])return this.props.values[e];let s=this.values.get(e);return s===void 0&&n!==void 0&&(s=z(n,{owner:this}),this.addValue(e,s)),s}readValue(e){var n;return this.latestValues[e]!==void 0||!this.current?this.latestValues[e]:(n=this.getBaseTargetFromProps(this.props,e))!==null&&n!==void 0?n:this.readValueFromInstance(this.current,e,this.options)}setBaseTarget(e,n){this.baseTarget[e]=n}getBaseTarget(e){var n;const{initial:s}=this.props,i=typeof s=="string"||typeof s=="object"?(n=tn(this.props,s))===null||n===void 0?void 0:n[e]:void 0;if(s&&i!==void 0)return i;const o=this.getBaseTargetFromProps(this.props,e);return o!==void 0&&!O(o)?o:this.initialValues[e]!==void 0&&i===void 0?void 0:this.baseTarget[e]}on(e,n){return this.events[e]||(this.events[e]=new fn),this.events[e].add(n)}notify(e,...n){this.events[e]&&this.events[e].notify(...n)}}class Zi extends sl{sortInstanceNodePosition(e,n){return e.compareDocumentPosition(n)&2?1:-1}getBaseTargetFromProps(e,n){return e.style?e.style[n]:void 0}removeValueFromRenderState(e,{vars:n,style:s}){delete n[e],delete s[e]}makeTargetAnimatableFromInstance({transition:e,transitionEnd:n,...s},{transformValues:i},o){let r=Pa(s,e||{},this);if(i&&(n&&(n=i(n)),s&&(s=i(s)),r&&(r=i(r))),o){va(this,s,r);const a=Jc(this,s,r,n);n=a.transitionEnd,s=a.target}return{transition:e,transitionEnd:n,...s}}}function il(t){return window.getComputedStyle(t)}class rl extends Zi{readValueFromInstance(e,n){if(ht.has(n)){const s=on(n);return s&&s.default||0}else{const s=il(e),i=(Us(n)?s.getPropertyValue(n):s[n])||0;return typeof i=="string"?i.trim():i}}measureInstanceViewportBox(e,{transformPagePoint:n}){return ji(e,n)}build(e,n,s,i){Ye(e,n,s,i.transformTemplate)}scrapeMotionValuesFromProps(e,n){return Qe(e,n)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;O(e)&&(this.childSubscription=e.on("change",n=>{this.current&&(this.current.textContent=`${n}`)}))}renderInstance(e,n,s,i){$s(e,n,s,i)}}class ol extends Zi{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(e,n){return e[n]}readValueFromInstance(e,n){if(ht.has(n)){const s=on(n);return s&&s.default||0}return n=Ks.has(n)?n:Ge(n),e.getAttribute(n)}measureInstanceViewportBox(){return E()}scrapeMotionValuesFromProps(e,n){return Xs(e,n)}build(e,n,s,i){Ze(e,n,s,this.isSVGTag,i.transformTemplate)}renderInstance(e,n,s,i){_s(e,n,s,i)}mount(e){this.isSVGTag=Je(e.tagName),super.mount(e)}}const al=(t,e)=>Xe(t)?new ol(e,{enableHardwareAcceleration:!1}):new rl(e,{enableHardwareAcceleration:!0}),cl={layout:{ProjectionNode:_i,MeasureLayout:Ni}},ll={...ka,...so,...Nc,...cl},Yl=hr((t,e)=>Gr(t,e,ll,al));function Ji(){const t=m.useRef(!1);return Tt(()=>(t.current=!0,()=>{t.current=!1}),[]),t}function ul(){const t=Ji(),[e,n]=m.useState(0),s=m.useCallback(()=>{t.current&&n(e+1)},[e]);return[m.useCallback(()=>w.postRender(s),[s]),e]}class fl extends m.Component{getSnapshotBeforeUpdate(e){const n=this.props.childRef.current;if(n&&e.isPresent&&!this.props.isPresent){const s=this.props.sizeRef.current;s.height=n.offsetHeight||0,s.width=n.offsetWidth||0,s.top=n.offsetTop,s.left=n.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function hl({children:t,isPresent:e}){const n=m.useId(),s=m.useRef(null),i=m.useRef({width:0,height:0,top:0,left:0});return m.useInsertionEffect(()=>{const{width:o,height:r,top:a,left:c}=i.current;if(e||!s.current||!o||!r)return;s.current.dataset.motionPopId=n;const l=document.createElement("style");return document.head.appendChild(l),l.sheet&&l.sheet.insertRule(`
          [data-motion-pop-id="${n}"] {
            position: absolute !important;
            width: ${o}px !important;
            height: ${r}px !important;
            top: ${a}px !important;
            left: ${c}px !important;
          }
        `),()=>{document.head.removeChild(l)}},[e]),m.createElement(fl,{isPresent:e,childRef:s,sizeRef:i},m.cloneElement(t,{ref:s}))}const Me=({children:t,initial:e,isPresent:n,onExitComplete:s,custom:i,presenceAffectsLayout:o,mode:r})=>{const a=Wt(dl),c=m.useId(),l=m.useMemo(()=>({id:c,initial:e,isPresent:n,custom:i,onExitComplete:u=>{a.set(u,!0);for(const f of a.values())if(!f)return;s&&s()},register:u=>(a.set(u,!1),()=>a.delete(u))}),o?void 0:[n]);return m.useMemo(()=>{a.forEach((u,f)=>a.set(f,!1))},[n]),m.useEffect(()=>{!n&&!a.size&&s&&s()},[n]),r==="popLayout"&&(t=m.createElement(hl,{isPresent:n},t)),m.createElement(oe.Provider,{value:l},t)};function dl(){return new Map}function pl(t){return m.useEffect(()=>()=>t(),[])}const ut=t=>t.key||"";function ml(t,e){t.forEach(n=>{const s=ut(n);e.set(s,n)})}function gl(t){const e=[];return m.Children.forEach(t,n=>{m.isValidElement(n)&&e.push(n)}),e}const ql=({children:t,custom:e,initial:n=!0,onExitComplete:s,exitBeforeEnter:i,presenceAffectsLayout:o=!0,mode:r="sync"})=>{const a=m.useContext(_e).forceRender||ul()[0],c=Ji(),l=gl(t);let u=l;const f=m.useRef(new Map).current,h=m.useRef(u),d=m.useRef(new Map).current,p=m.useRef(!0);if(Tt(()=>{p.current=!1,ml(l,d),h.current=u}),pl(()=>{p.current=!0,d.clear(),f.clear()}),p.current)return m.createElement(m.Fragment,null,u.map(g=>m.createElement(Me,{key:ut(g),isPresent:!0,initial:n?void 0:!1,presenceAffectsLayout:o,mode:r},g)));u=[...u];const v=h.current.map(ut),x=l.map(ut),b=v.length;for(let g=0;g<b;g++){const y=v[g];x.indexOf(y)===-1&&!f.has(y)&&f.set(y,void 0)}return r==="wait"&&f.size&&(u=[]),f.forEach((g,y)=>{if(x.indexOf(y)!==-1)return;const T=d.get(y);if(!T)return;const V=v.indexOf(y);let R=g;if(!R){const C=()=>{f.delete(y);const S=Array.from(d.keys()).filter(A=>!x.includes(A));if(S.forEach(A=>d.delete(A)),h.current=l.filter(A=>{const U=ut(A);return U===y||S.includes(U)}),!f.size){if(c.current===!1)return;a(),s&&s()}};R=m.createElement(Me,{key:ut(T),isPresent:!1,onExitComplete:C,custom:e,presenceAffectsLayout:o,mode:r},T),f.set(y,R)}u.splice(V,0,R)}),u=u.map(g=>{const y=g.key;return f.has(y)?g:m.createElement(Me,{key:ut(g),isPresent:!0,presenceAffectsLayout:o,mode:r},g)}),m.createElement(m.Fragment,null,f.size?u:u.map(g=>m.cloneElement(g)))};function hn(t){const e=Wt(()=>z(t)),{isStatic:n}=m.useContext(It);if(n){const[,s]=m.useState(t);m.useEffect(()=>e.on("change",s),[])}return e}const yl=t=>typeof t=="object"&&t.mix,vl=t=>yl(t)?t.mix:void 0;function xl(...t){const e=!Array.isArray(t[0]),n=e?0:-1,s=t[0+n],i=t[1+n],o=t[2+n],r=t[3+n],a=pe(i,o,{mixer:vl(o[0]),...r});return e?a(s):a}function Qi(t,e){const n=hn(e()),s=()=>n.set(e());return s(),Tt(()=>{const i=()=>w.update(s,!1,!0),o=t.map(r=>r.on("change",i));return()=>{o.forEach(r=>r()),W(s)}}),n}function Pl(t){Lt.current=[],t();const e=Qi(Lt.current,t);return Lt.current=void 0,e}function Zl(t,e,n,s){if(typeof t=="function")return Pl(t);const i=typeof e=="function"?e:xl(e,n,s);return Array.isArray(t)?ws(t,i):ws([t],([o])=>i(o))}function ws(t,e){const n=Wt(()=>[]);return Qi(t,()=>{n.length=0;const s=t.length;for(let i=0;i<s;i++)n[i]=t[i].get();return e(n)})}function Jl(t,e={}){const{isStatic:n}=m.useContext(It),s=m.useRef(null),i=hn(O(t)?t.get():t),o=()=>{s.current&&s.current.stop()};return m.useInsertionEffect(()=>i.attach((r,a)=>{if(n)return a(r);if(o(),s.current=Ot({keyframes:[i.get(),r],velocity:i.getVelocity(),type:"spring",restDelta:.001,restSpeed:.01,...e,onUpdate:a}),!F.isProcessing){const c=performance.now()-F.timestamp;c<30&&(s.current.time=$(c))}return i.get()},o),[JSON.stringify(e)]),Tt(()=>{if(O(t))return t.on("change",r=>i.set(parseFloat(r)))},[i]),i}function Tl(t,e,n){m.useInsertionEffect(()=>t.on(e,n),[t,e,n])}function Ql(t){const e=hn(t.getVelocity());return Tl(t,"velocityChange",n=>{e.set(n)}),e}function tr(t,e,n){var s;if(typeof t=="string"){let i=document;e&&(de(!!e.current),i=e.current),n?((s=n[t])!==null&&s!==void 0||(n[t]=i.querySelectorAll(t)),t=n[t]):t=i.querySelectorAll(t)}else t instanceof Element&&(t=[t]);return Array.from(t||[])}const qt=new WeakMap;let Q;function bl(t,e){if(e){const{inlineSize:n,blockSize:s}=e[0];return{width:n,height:s}}else return t instanceof SVGElement&&"getBBox"in t?t.getBBox():{width:t.offsetWidth,height:t.offsetHeight}}function Vl({target:t,contentRect:e,borderBoxSize:n}){var s;(s=qt.get(t))===null||s===void 0||s.forEach(i=>{i({target:t,contentSize:e,get size(){return bl(t,n)}})})}function Sl(t){t.forEach(Vl)}function wl(){typeof ResizeObserver>"u"||(Q=new ResizeObserver(Sl))}function Al(t,e){Q||wl();const n=tr(t);return n.forEach(s=>{let i=qt.get(s);i||(i=new Set,qt.set(s,i)),i.add(e),Q==null||Q.observe(s)}),()=>{n.forEach(s=>{const i=qt.get(s);i==null||i.delete(e),i!=null&&i.size||Q==null||Q.unobserve(s)})}}const Zt=new Set;let Bt;function Cl(){Bt=()=>{const t={width:window.innerWidth,height:window.innerHeight},e={target:window,size:t,contentSize:t};Zt.forEach(n=>n(e))},window.addEventListener("resize",Bt)}function Ml(t){return Zt.add(t),Bt||Cl(),()=>{Zt.delete(t),!Zt.size&&Bt&&(Bt=void 0)}}function Dl(t,e){return typeof t=="function"?Ml(t):Al(t,e)}const Ll=50,As=()=>({current:0,offset:[],progress:0,scrollLength:0,targetOffset:0,targetLength:0,containerLength:0,velocity:0}),Rl=()=>({time:0,x:As(),y:As()}),El={x:{length:"Width",position:"Left"},y:{length:"Height",position:"Top"}};function Cs(t,e,n,s){const i=n[e],{length:o,position:r}=El[e],a=i.current,c=n.time;i.current=t["scroll"+r],i.scrollLength=t["scroll"+o]-t["client"+o],i.offset.length=0,i.offset[0]=0,i.offset[1]=i.scrollLength,i.progress=xt(0,i.scrollLength,i.current);const l=s-c;i.velocity=l>Ll?0:rn(i.current-a,l)}function Bl(t,e,n){Cs(t,"x",e,n),Cs(t,"y",e,n),e.time=n}function Fl(t,e){const n={x:0,y:0};let s=t;for(;s&&s!==e;)if(s instanceof HTMLElement)n.x+=s.offsetLeft,n.y+=s.offsetTop,s=s.offsetParent;else if(s.tagName==="svg"){const i=s.getBoundingClientRect();s=s.parentElement;const o=s.getBoundingClientRect();n.x+=i.left-o.left,n.y+=i.top-o.top}else if(s instanceof SVGGraphicsElement){const{x:i,y:o}=s.getBBox();n.x+=i,n.y+=o;let r=null,a=s.parentNode;for(;!r;)a.tagName==="svg"&&(r=a),a=s.parentNode;s=r}else break;return n}const kl={Enter:[[0,1],[1,1]],Exit:[[0,0],[1,0]],Any:[[1,0],[0,1]],All:[[0,0],[1,1]]},He={start:0,center:.5,end:1};function Ms(t,e,n=0){let s=0;if(He[t]!==void 0&&(t=He[t]),typeof t=="string"){const i=parseFloat(t);t.endsWith("px")?s=i:t.endsWith("%")?t=i/100:t.endsWith("vw")?s=i/100*document.documentElement.clientWidth:t.endsWith("vh")?s=i/100*document.documentElement.clientHeight:t=i}return typeof t=="number"&&(s=e*t),n+s}const Ol=[0,0];function Il(t,e,n,s){let i=Array.isArray(t)?t:Ol,o=0,r=0;return typeof t=="number"?i=[t,t]:typeof t=="string"&&(t=t.trim(),t.includes(" ")?i=t.split(" "):i=[t,He[t]?t:"0"]),o=Ms(i[0],n,s),r=Ms(i[1],e),o-r}const jl={x:0,y:0};function Ul(t){return"getBBox"in t&&t.tagName!=="svg"?t.getBBox():{width:t.clientWidth,height:t.clientHeight}}function Nl(t,e,n){let{offset:s=kl.All}=n;const{target:i=t,axis:o="y"}=n,r=o==="y"?"height":"width",a=i!==t?Fl(i,t):jl,c=i===t?{width:t.scrollWidth,height:t.scrollHeight}:Ul(i),l={width:t.clientWidth,height:t.clientHeight};e[o].offset.length=0;let u=!e[o].interpolate;const f=s.length;for(let h=0;h<f;h++){const d=Il(s[h],l[r],c[r],a[o]);!u&&d!==e[o].interpolatorOffsets[h]&&(u=!0),e[o].offset[h]=d}u&&(e[o].interpolate=pe(e[o].offset,Si(s)),e[o].interpolatorOffsets=[...e[o].offset]),e[o].progress=e[o].interpolate(e[o].current)}function Wl(t,e=t,n){if(n.x.targetOffset=0,n.y.targetOffset=0,e!==t){let s=e;for(;s&&s!==t;)n.x.targetOffset+=s.offsetLeft,n.y.targetOffset+=s.offsetTop,s=s.offsetParent}n.x.targetLength=e===t?e.scrollWidth:e.clientWidth,n.y.targetLength=e===t?e.scrollHeight:e.clientHeight,n.x.containerLength=t.clientWidth,n.y.containerLength=t.clientHeight}function zl(t,e,n,s={}){return{measure:()=>Wl(t,s.target,n),update:i=>{Bl(t,n,i),(s.offset||s.target)&&Nl(t,n,s)},notify:()=>e(n)}}const At=new WeakMap,Ds=new WeakMap,De=new WeakMap,Ls=t=>t===document.documentElement?window:t;function Hl(t,{container:e=document.documentElement,...n}={}){let s=De.get(e);s||(s=new Set,De.set(e,s));const i=Rl(),o=zl(e,t,i,n);if(s.add(o),!At.has(e)){const a=()=>{for(const h of s)h.measure()},c=()=>{for(const h of s)h.update(F.timestamp)},l=()=>{for(const h of s)h.notify()},u=()=>{w.read(a,!1,!0),w.update(c,!1,!0),w.update(l,!1,!0)};At.set(e,u);const f=Ls(e);window.addEventListener("resize",u,{passive:!0}),e!==document.documentElement&&Ds.set(e,Dl(e,u)),f.addEventListener("scroll",u,{passive:!0})}const r=At.get(e);return w.read(r,!1,!0),()=>{var a;W(r);const c=De.get(e);if(!c||(c.delete(o),c.size))return;const l=At.get(e);At.delete(e),l&&(Ls(e).removeEventListener("scroll",l),(a=Ds.get(e))===null||a===void 0||a(),window.removeEventListener("resize",l))}}function Rs(t,e){ni(!!(!e||e.current))}const Gl=()=>({scrollX:z(0),scrollY:z(0),scrollXProgress:z(0),scrollYProgress:z(0)});function tu({container:t,target:e,layoutEffect:n=!0,...s}={}){const i=Wt(Gl);return(n?Tt:m.useEffect)(()=>(Rs("target",e),Rs("container",t),Hl(({x:r,y:a})=>{i.scrollX.set(r.current),i.scrollXProgress.set(r.progress),i.scrollY.set(a.current),i.scrollYProgress.set(a.progress)},{...s,container:(t==null?void 0:t.current)||void 0,target:(e==null?void 0:e.current)||void 0})),[t,e,JSON.stringify(s.offset)]),i}function eu(t){const e=m.useRef(0),{isStatic:n}=m.useContext(It);m.useEffect(()=>{if(n)return;const s=({timestamp:i,delta:o})=>{e.current||(e.current=i),t(i-e.current,o)};return w.update(s,!0),()=>W(s)},[t])}const $l={some:0,all:1};function Kl(t,e,{root:n,margin:s,amount:i="some"}={}){const o=tr(t),r=new WeakMap,a=l=>{l.forEach(u=>{const f=r.get(u.target);if(u.isIntersecting!==!!f)if(u.isIntersecting){const h=e(u);typeof h=="function"?r.set(u.target,h):c.unobserve(u.target)}else f&&(f(u),r.delete(u.target))})},c=new IntersectionObserver(a,{root:n,rootMargin:s,threshold:typeof i=="number"?i:$l[i]});return o.forEach(l=>c.observe(l)),()=>c.disconnect()}function nu(t,{root:e,margin:n,amount:s,once:i=!1}={}){const[o,r]=m.useState(!1);return m.useEffect(()=>{if(!t.current||i&&o)return;const a=()=>(r(!0),i?void 0:()=>r(!1)),c={root:e&&e.current||void 0,margin:n,amount:s};return Kl(t.current,a,c)},[e,t,n,i]),o}export{ql as A,Jl as a,nu as b,tu as c,Ql as d,Zl as e,eu as f,Yl as m,hn as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
