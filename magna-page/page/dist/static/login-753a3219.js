import{j as o}from"./spinner-75e68d5d.js";import{r as l}from"./react-1cdf6ce0.js";import{j as f,q as Z,k as p,r as P,s as ee,t as g,v as se,u as oe,w as te}from"./main-85e60c12.js";import{u as ae}from"./useLazyload-da8a0755.js";import{b as ne}from"./react-router-dom-3d2ba1f5.js";import"./@tanstack/react-query-devtools-a5fc292d.js";import"./react-dom-983a5519.js";import"./axios-28bc18a3.js";import"./swiper-dad05047.js";import"./framer-motion-e3192eb3.js";const T=l.forwardRef(({as:e,bsPrefix:s,variant:t="primary",size:a,active:n=!1,disabled:r=!1,className:i,...d},m)=>{const c=f(s,"btn"),[u,{tagName:h}]=Z({tagName:e,disabled:r,...d}),j=h;return o.jsx(j,{...u,...d,ref:m,disabled:r,className:p(i,c,n&&"active",t&&`${c}-${t}`,a&&`${c}-${a}`,d.href&&r&&"disabled")})});T.displayName="Button";const re=T;function le(e,s){return l.Children.toArray(e).some(t=>l.isValidElement(t)&&t.type===s)}function ce({as:e,bsPrefix:s,className:t,...a}){s=f(s,"col");const n=P(),r=ee(),i=[],d=[];return n.forEach(m=>{const c=a[m];delete a[m];let u,h,j;typeof c=="object"&&c!=null?{span:u,offset:h,order:j}=c:u=c;const F=m!==r?`-${m}`:"";u&&i.push(u===!0?`${s}${F}`:`${s}${F}-${u}`),j!=null&&d.push(`order${F}-${j}`),h!=null&&d.push(`offset${F}-${h}`)}),[{...a,className:p(t,...i,...d)},{as:e,bsPrefix:s,spans:i}]}const b=l.forwardRef((e,s)=>{const[{className:t,...a},{as:n="div",bsPrefix:r,spans:i}]=ce(e);return o.jsx(n,{...a,ref:s,className:p(t,!i.length&&r)})});b.displayName="Col";const ie=b,me={type:g.string,tooltip:g.bool,as:g.elementType},k=l.forwardRef(({as:e="div",className:s,type:t="valid",tooltip:a=!1,...n},r)=>o.jsx(e,{...n,ref:r,className:p(s,`${t}-${a?"tooltip":"feedback"}`)}));k.displayName="Feedback";k.propTypes=me;const B=k,de=l.createContext({}),x=de,S=l.forwardRef(({id:e,bsPrefix:s,className:t,type:a="checkbox",isValid:n=!1,isInvalid:r=!1,as:i="input",...d},m)=>{const{controlId:c}=l.useContext(x);return s=f(s,"form-check-input"),o.jsx(i,{...d,ref:m,type:a,id:e||c,className:p(t,s,n&&"is-valid",r&&"is-invalid")})});S.displayName="FormCheckInput";const E=S,O=l.forwardRef(({bsPrefix:e,className:s,htmlFor:t,...a},n)=>{const{controlId:r}=l.useContext(x);return e=f(e,"form-check-label"),o.jsx("label",{...a,ref:n,htmlFor:t||r,className:p(s,e)})});O.displayName="FormCheckLabel";const w=O,G=l.forwardRef(({id:e,bsPrefix:s,bsSwitchPrefix:t,inline:a=!1,reverse:n=!1,disabled:r=!1,isValid:i=!1,isInvalid:d=!1,feedbackTooltip:m=!1,feedback:c,feedbackType:u,className:h,style:j,title:F="",type:$="checkbox",label:C,children:v,as:Q="input",...U},W)=>{s=f(s,"form-check"),t=f(t,"form-switch");const{controlId:L}=l.useContext(x),X=l.useMemo(()=>({controlId:e||L}),[L,e]),R=!v&&C!=null&&C!==!1||le(v,w),Y=o.jsx(E,{...U,type:$==="switch"?"checkbox":$,ref:W,isValid:i,isInvalid:d,disabled:r,as:Q});return o.jsx(x.Provider,{value:X,children:o.jsx("div",{style:j,className:p(h,R&&s,a&&`${s}-inline`,n&&`${s}-reverse`,$==="switch"&&t),children:v||o.jsxs(o.Fragment,{children:[Y,R&&o.jsx(w,{title:F,children:C}),c&&o.jsx(B,{type:u,tooltip:m,children:c})]})})})});G.displayName="FormCheck";const N=Object.assign(G,{Input:E,Label:w}),M=l.forwardRef(({bsPrefix:e,type:s,size:t,htmlSize:a,id:n,className:r,isValid:i=!1,isInvalid:d=!1,plaintext:m,readOnly:c,as:u="input",...h},j)=>{const{controlId:F}=l.useContext(x);return e=f(e,"form-control"),o.jsx(u,{...h,type:s,size:a,ref:j,readOnly:c,id:n||F,className:p(r,m?`${e}-plaintext`:e,t&&`${e}-${t}`,s==="color"&&`${e}-color`,i&&"is-valid",d&&"is-invalid")})});M.displayName="FormControl";const pe=Object.assign(M,{Feedback:B}),V=l.forwardRef(({className:e,bsPrefix:s,as:t="div",...a},n)=>(s=f(s,"form-floating"),o.jsx(t,{ref:n,className:p(e,s),...a})));V.displayName="FormFloating";const ue=V,z=l.forwardRef(({controlId:e,as:s="div",...t},a)=>{const n=l.useMemo(()=>({controlId:e}),[e]);return o.jsx(x.Provider,{value:n,children:o.jsx(s,{...t,ref:a})})});z.displayName="FormGroup";const A=z,D=l.forwardRef(({as:e="label",bsPrefix:s,column:t=!1,visuallyHidden:a=!1,className:n,htmlFor:r,...i},d)=>{const{controlId:m}=l.useContext(x);s=f(s,"form-label");let c="col-form-label";typeof t=="string"&&(c=`${c} ${c}-${t}`);const u=p(n,s,a&&"visually-hidden",t&&c);return r=r||m,t?o.jsx(ie,{ref:d,as:"label",className:u,htmlFor:r,...i}):o.jsx(e,{ref:d,className:u,htmlFor:r,...i})});D.displayName="FormLabel";const fe=D,q=l.forwardRef(({bsPrefix:e,className:s,id:t,...a},n)=>{const{controlId:r}=l.useContext(x);return e=f(e,"form-range"),o.jsx("input",{...a,type:"range",ref:n,className:p(s,e),id:t||r})});q.displayName="FormRange";const he=q,_=l.forwardRef(({bsPrefix:e,size:s,htmlSize:t,className:a,isValid:n=!1,isInvalid:r=!1,id:i,...d},m)=>{const{controlId:c}=l.useContext(x);return e=f(e,"form-select"),o.jsx("select",{...d,size:t,ref:m,className:p(a,e,s&&`${e}-${s}`,n&&"is-valid",r&&"is-invalid"),id:i||c})});_.displayName="FormSelect";const je=_,H=l.forwardRef(({bsPrefix:e,className:s,as:t="small",muted:a,...n},r)=>(e=f(e,"form-text"),o.jsx(t,{...n,ref:r,className:p(s,e,a&&"text-muted")})));H.displayName="FormText";const xe=H,J=l.forwardRef((e,s)=>o.jsx(N,{...e,ref:s,type:"switch"}));J.displayName="Switch";const Fe=Object.assign(J,{Input:N.Input,Label:N.Label}),K=l.forwardRef(({bsPrefix:e,className:s,children:t,controlId:a,label:n,...r},i)=>(e=f(e,"form-floating"),o.jsxs(A,{ref:i,className:p(s,e),controlId:a,...r,children:[t,o.jsx("label",{htmlFor:a,children:n})]})));K.displayName="FloatingLabel";const ye=K,ge={_ref:g.any,validated:g.bool,as:g.elementType},I=l.forwardRef(({className:e,validated:s,as:t="form",...a},n)=>o.jsx(t,{...a,ref:n,className:p(e,s&&"was-validated")}));I.displayName="Form";I.propTypes=ge;const y=Object.assign(I,{Group:A,Control:pe,Floating:ue,Check:N,Switch:Fe,Label:fe,Text:xe,Range:he,Select:je,FloatingLabel:ye});const Ne=()=>{const[e,s]=l.useState(""),[t,a]=l.useState(""),{mutateAsync:n}=se(),r=oe(),i=r.isTokenValid,d=async m=>{m.preventDefault();try{await n({email:e,password:t})&&await r.validateToken()}catch(c){console.log(c)}};return l.useEffect(()=>{},[]),i?o.jsx(ne,{to:"/cotizador"}):o.jsxs("div",{className:" contenedor-login",children:[o.jsx(te,{}),o.jsx("section",{className:"section-login",children:o.jsx("div",{className:"container login text-white",children:o.jsxs(y,{onSubmit:d,className:"row",children:[o.jsxs("div",{className:"col-10 col-sm-6 ",children:[o.jsx("h1",{children:"Iniciar sesión"}),o.jsxs(y.Group,{controlId:"formBasicEmail",children:[o.jsx(y.Label,{children:"Email"}),o.jsx(y.Control,{type:"email",placeholder:"Ingresa tu email",onChange:m=>s(m.target.value)})]}),o.jsxs(y.Group,{controlId:"formBasicPassword",children:[o.jsx(y.Label,{children:"Contraseña"}),o.jsx(y.Control,{type:"password",placeholder:"Ingresa tu contraseña",onChange:m=>a(m.target.value)})]}),o.jsx("br",{}),o.jsx(re,{variant:"primary",type:"submit",children:"Iniciar sesión"})]}),o.jsxs("div",{className:"col-12 col-sm-6 rig text-center container ",children:[o.jsx("h2",{children:"Magna"}),o.jsx("br",{}),o.jsx("p",{className:"text-white",children:"Ingeniería y Topografía"}),o.jsx("br",{}),o.jsx("h5",{children:'"Dando forma al mundo, un proyecto a la vez."'})]})]})})})]})};function Be(){const{isVisible:e,ref:s}=ae("100px");return o.jsx("div",{id:"LazyLogin",ref:s,children:e?o.jsx(Ne,{}):null})}export{Be as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
