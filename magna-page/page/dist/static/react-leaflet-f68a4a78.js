import{r as o,c as p,e as T}from"./react-dom-ac9704ec.js";import{l as m}from"./leaflet-cb8790d2.js";function b(r,n){const e=o.useRef(n);o.useEffect(function(){n!==e.current&&r.attributionControl!=null&&(e.current!=null&&r.attributionControl.removeAttribution(e.current),n!=null&&r.attributionControl.addAttribution(n)),e.current=n},[r,n])}const j=1;function N(r){return Object.freeze({__version:j,map:r})}function S(r,n){return Object.freeze({...r,...n})}const g=o.createContext(null),R=g.Provider;function I(){const r=o.useContext(g);if(r==null)throw new Error("No context provided: useLeafletContext() can only be used in a descendant of <MapContainer>");return r}function _(r){function n(e,t){const{instance:u,context:a}=r(e).current;return o.useImperativeHandle(t,()=>u),e.children==null?null:p.createElement(R,{value:a},e.children)}return o.forwardRef(n)}function A(r){function n(e,t){const[u,a]=o.useState(!1),{instance:c}=r(e,a).current;o.useImperativeHandle(t,()=>c),o.useEffect(function(){u&&c.update()},[c,u,e.children]);const f=c._contentNode;return f?T.createPortal(e.children,f):null}return o.forwardRef(n)}function D(r){function n(e,t){const{instance:u}=r(e).current;return o.useImperativeHandle(t,()=>u),null}return o.forwardRef(n)}function w(r,n){const e=o.useRef();o.useEffect(function(){return n!=null&&r.instance.on(n),e.current=n,function(){e.current!=null&&r.instance.off(e.current),e.current=null}},[r,n])}function v(r,n){const e=r.pane??n.pane;return e?{...r,pane:e}:r}function V(r,n){return function(t,u){const a=I(),c=r(v(t,a),a);return b(a.map,t.attribution),w(c.current,t.eventHandlers),n(c.current,a,t,u),c}}function L(r,n,e){return Object.freeze({instance:r,context:n,container:e})}function E(r,n){return n==null?function(t,u){const a=o.useRef();return a.current||(a.current=r(t,u)),a}:function(t,u){const a=o.useRef();a.current||(a.current=r(t,u));const c=o.useRef(t),{instance:f}=a.current;return o.useEffect(function(){c.current!==t&&(n(f,t,c.current),c.current=t)},[f,t,u]),a}}function Z(r,n){o.useEffect(function(){return(n.layerContainer??n.map).addLayer(r.instance),function(){var a;(a=n.layerContainer)==null||a.removeLayer(r.instance),n.map.removeLayer(r.instance)}},[n,r])}function P(r){return function(e){const t=I(),u=r(v(e,t),t);return b(t.map,e.attribution),w(u.current,e.eventHandlers),Z(u.current,t),u}}function k(r,n){const e=E(r,n),t=P(e);return _(t)}function B(r,n){const e=E(r),t=V(e,n);return A(t)}function G(r,n){const e=E(r,n),t=P(e);return D(t)}function U(r,n,e){const{opacity:t,zIndex:u}=n;t!=null&&t!==e.opacity&&r.setOpacity(t),u!=null&&u!==e.zIndex&&r.setZIndex(u)}function C(){return C=Object.assign||function(r){for(var n=1;n<arguments.length;n++){var e=arguments[n];for(var t in e)Object.prototype.hasOwnProperty.call(e,t)&&(r[t]=e[t])}return r},C.apply(this,arguments)}function X({bounds:r,boundsOptions:n,center:e,children:t,className:u,id:a,placeholder:c,style:f,whenReady:l,zoom:s,...d},x){const[H]=o.useState({className:u,id:a,style:f}),[i,M]=o.useState(null);o.useImperativeHandle(x,()=>(i==null?void 0:i.map)??null,[i]);const h=o.useCallback(O=>{if(O!==null&&i===null){const y=new m.Map(O,d);e!=null&&s!=null?y.setView(e,s):r!=null&&y.fitBounds(r,n),l!=null&&y.whenReady(l),M(N(y))}},[]);o.useEffect(()=>()=>{i==null||i.map.remove()},[i]);const z=i?p.createElement(R,{value:i},t):c??null;return p.createElement("div",C({},H,{ref:h}),z)}const J=o.forwardRef(X),K=k(function({position:n,...e},t){const u=new m.Marker(n,e);return L(u,S(t,{overlayContainer:u}))},function(n,e,t){e.position!==t.position&&n.setLatLng(e.position),e.icon!=null&&e.icon!==t.icon&&n.setIcon(e.icon),e.zIndexOffset!=null&&e.zIndexOffset!==t.zIndexOffset&&n.setZIndexOffset(e.zIndexOffset),e.opacity!=null&&e.opacity!==t.opacity&&n.setOpacity(e.opacity),n.dragging!=null&&e.draggable!==t.draggable&&(e.draggable===!0?n.dragging.enable():n.dragging.disable())}),Q=B(function(n,e){const t=new m.Popup(n,e.overlayContainer);return L(t,e)},function(n,e,{position:t},u){o.useEffect(function(){const{instance:c}=n;function f(s){s.popup===c&&(c.update(),u(!0))}function l(s){s.popup===c&&u(!1)}return e.map.on({popupopen:f,popupclose:l}),e.overlayContainer==null?(t!=null&&c.setLatLng(t),c.openOn(e.map)):e.overlayContainer.bindPopup(c),function(){var d;e.map.off({popupopen:f,popupclose:l}),(d=e.overlayContainer)==null||d.unbindPopup(),e.map.removeLayer(c)}},[n,e,u,t])}),W=G(function({url:n,...e},t){const u=new m.TileLayer(n,v(e,t));return L(u,t)},function(n,e,t){U(n,e,t);const{url:u}=e;u!=null&&u!==t.url&&n.setUrl(u)});export{J as M,Q as P,W as T,K as a};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
