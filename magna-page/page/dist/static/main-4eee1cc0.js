var Gt=(e,t,r)=>{if(!t.has(e))throw TypeError("Cannot "+r)};var G=(e,t,r)=>(Gt(e,t,"read from private field"),r?r.call(e):t.get(e)),ee=(e,t,r)=>{if(t.has(e))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(e):t.set(e,r)},J=(e,t,r,i)=>(Gt(e,t,"write to private field"),i?i.call(e,r):t.set(e,r),r);var jt=(e,t,r,i)=>({set _(s){J(e,t,s,r)},get _(){return G(e,t,i)}}),ie=(e,t,r)=>(Gt(e,t,"access private method"),r);import{r as reactExports,c as commonjsGlobal,g as getDefaultExportFromCjs,a as React}from"./react-1cdf6ce0.js";import{r as reactDomExports,a as ReactDOM}from"./react-dom-983a5519.js";import{L as Link,N as NavLink$2,u as useLocation,O as Outlet,a as Navigate,c as createBrowserRouter,R as RouterProvider}from"./react-router-dom-6615ee3c.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const o of a.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&i(o)}).observe(document,{childList:!0,subtree:!0});function r(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(s){if(s.ep)return;s.ep=!0;const a=r(s);fetch(s.href,a)}})();const scriptRel="modulepreload",assetsURL=function(e){return"/static/"+e},seen={},__vitePreload=function(t,r,i){if(!r||r.length===0)return t();const s=document.getElementsByTagName("link");return Promise.all(r.map(a=>{if(a=assetsURL(a),a in seen)return;seen[a]=!0;const o=a.endsWith(".css"),u=o?'[rel="stylesheet"]':"";if(!!i)for(let g=s.length-1;g>=0;g--){const x=s[g];if(x.href===a&&(!o||x.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${a}"]${u}`))return;const d=document.createElement("link");if(d.rel=o?"stylesheet":scriptRel,o||(d.as="script",d.crossOrigin=""),d.href=a,document.head.appendChild(d),o)return new Promise((g,x)=>{d.addEventListener("load",g),d.addEventListener("error",()=>x(new Error(`Unable to preload CSS for ${a}`)))})})).then(()=>t()).catch(a=>{const o=new Event("vite:preloadError",{cancelable:!0});if(o.payload=a,window.dispatchEvent(o),!o.defaultPrevented)throw a})};var jsxRuntime={exports:{}},reactJsxRuntime_production_min={};/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m$1=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};function q(e,t,r){var i,s={},a=null,o=null;r!==void 0&&(a=""+r),t.key!==void 0&&(a=""+t.key),t.ref!==void 0&&(o=t.ref);for(i in t)m$1.call(t,i)&&!p.hasOwnProperty(i)&&(s[i]=t[i]);if(e&&e.defaultProps)for(i in t=e.defaultProps,t)s[i]===void 0&&(s[i]=t[i]);return{$$typeof:k,type:e,key:a,ref:o,props:s,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;jsxRuntime.exports=reactJsxRuntime_production_min;var jsxRuntimeExports=jsxRuntime.exports,client={},m=reactDomExports;client.createRoot=m.createRoot,client.hydrateRoot=m.hydrateRoot;var Subscribable=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.add(e),this.onSubscribe(),()=>{this.listeners.delete(e),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},isServer=typeof window>"u"||"Deno"in window;function noop$5(){}function functionalUpdate(e,t){return typeof e=="function"?e(t):e}function isValidTimeout(e){return typeof e=="number"&&e>=0&&e!==1/0}function timeUntilStale(e,t){return Math.max(e+(t||0)-Date.now(),0)}function matchQuery(e,t){const{type:r="all",exact:i,fetchStatus:s,predicate:a,queryKey:o,stale:u}=e;if(o){if(i){if(t.queryHash!==hashQueryKeyByOptions(o,t.options))return!1}else if(!partialMatchKey(t.queryKey,o))return!1}if(r!=="all"){const c=t.isActive();if(r==="active"&&!c||r==="inactive"&&c)return!1}return!(typeof u=="boolean"&&t.isStale()!==u||typeof s<"u"&&s!==t.state.fetchStatus||a&&!a(t))}function matchMutation(e,t){const{exact:r,status:i,predicate:s,mutationKey:a}=e;if(a){if(!t.options.mutationKey)return!1;if(r){if(hashKey(t.options.mutationKey)!==hashKey(a))return!1}else if(!partialMatchKey(t.options.mutationKey,a))return!1}return!(i&&t.state.status!==i||s&&!s(t))}function hashQueryKeyByOptions(e,t){return((t==null?void 0:t.queryKeyHashFn)||hashKey)(e)}function hashKey(e){return JSON.stringify(e,(t,r)=>isPlainObject$1(r)?Object.keys(r).sort().reduce((i,s)=>(i[s]=r[s],i),{}):r)}function partialMatchKey(e,t){return e===t?!0:typeof e!=typeof t?!1:e&&t&&typeof e=="object"&&typeof t=="object"?!Object.keys(t).some(r=>!partialMatchKey(e[r],t[r])):!1}function replaceEqualDeep(e,t){if(e===t)return e;const r=isPlainArray(e)&&isPlainArray(t);if(r||isPlainObject$1(e)&&isPlainObject$1(t)){const i=r?e:Object.keys(e),s=i.length,a=r?t:Object.keys(t),o=a.length,u=r?[]:{};let c=0;for(let d=0;d<o;d++){const g=r?d:a[d];!r&&e[g]===void 0&&t[g]===void 0&&i.includes(g)?(u[g]=void 0,c++):(u[g]=replaceEqualDeep(e[g],t[g]),u[g]===e[g]&&e[g]!==void 0&&c++)}return s===o&&c===s?e:u}return t}function shallowEqualObjects(e,t){if(e&&!t||t&&!e)return!1;for(const r in e)if(e[r]!==t[r])return!1;return!0}function isPlainArray(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function isPlainObject$1(e){if(!hasObjectPrototype(e))return!1;const t=e.constructor;if(typeof t>"u")return!0;const r=t.prototype;return!(!hasObjectPrototype(r)||!r.hasOwnProperty("isPrototypeOf"))}function hasObjectPrototype(e){return Object.prototype.toString.call(e)==="[object Object]"}function sleep(e){return new Promise(t=>{setTimeout(t,e)})}function replaceData(e,t,r){return typeof r.structuralSharing=="function"?r.structuralSharing(e,t):r.structuralSharing!==!1?replaceEqualDeep(e,t):t}function addToEnd(e,t,r=0){const i=[...e,t];return r&&i.length>r?i.slice(1):i}function addToStart(e,t,r=0){const i=[t,...e];return r&&i.length>r?i.slice(0,-1):i}var Je,Ge,at,Jt,FocusManager=(Jt=class extends Subscribable{constructor(){super();ee(this,Je,void 0);ee(this,Ge,void 0);ee(this,at,void 0);J(this,at,t=>{if(!isServer&&window.addEventListener){const r=()=>t();return window.addEventListener("visibilitychange",r,!1),()=>{window.removeEventListener("visibilitychange",r)}}})}onSubscribe(){G(this,Ge)||this.setEventListener(G(this,at))}onUnsubscribe(){var t;this.hasListeners()||((t=G(this,Ge))==null||t.call(this),J(this,Ge,void 0))}setEventListener(t){var r;J(this,at,t),(r=G(this,Ge))==null||r.call(this),J(this,Ge,t(i=>{typeof i=="boolean"?this.setFocused(i):this.onFocus()}))}setFocused(t){G(this,Je)!==t&&(J(this,Je,t),this.onFocus())}onFocus(){this.listeners.forEach(t=>{t()})}isFocused(){var t;return typeof G(this,Je)=="boolean"?G(this,Je):((t=globalThis.document)==null?void 0:t.visibilityState)!=="hidden"}},Je=new WeakMap,Ge=new WeakMap,at=new WeakMap,Jt),focusManager=new FocusManager,ot,He,lt,Zt,OnlineManager=(Zt=class extends Subscribable{constructor(){super();ee(this,ot,!0);ee(this,He,void 0);ee(this,lt,void 0);J(this,lt,t=>{if(!isServer&&window.addEventListener){const r=()=>t(!0),i=()=>t(!1);return window.addEventListener("online",r,!1),window.addEventListener("offline",i,!1),()=>{window.removeEventListener("online",r),window.removeEventListener("offline",i)}}})}onSubscribe(){G(this,He)||this.setEventListener(G(this,lt))}onUnsubscribe(){var t;this.hasListeners()||((t=G(this,He))==null||t.call(this),J(this,He,void 0))}setEventListener(t){var r;J(this,lt,t),(r=G(this,He))==null||r.call(this),J(this,He,t(this.setOnline.bind(this)))}setOnline(t){G(this,ot)!==t&&(J(this,ot,t),this.listeners.forEach(i=>{i(t)}))}isOnline(){return G(this,ot)}},ot=new WeakMap,He=new WeakMap,lt=new WeakMap,Zt),onlineManager=new OnlineManager;function defaultRetryDelay(e){return Math.min(1e3*2**e,3e4)}function canFetch(e){return(e??"online")==="online"?onlineManager.isOnline():!0}var CancelledError=class{constructor(e){this.revert=e==null?void 0:e.revert,this.silent=e==null?void 0:e.silent}};function isCancelledError(e){return e instanceof CancelledError}function createRetryer(e){let t=!1,r=0,i=!1,s,a,o;const u=new Promise((M,C)=>{a=M,o=C}),c=M=>{var C;i||(P(new CancelledError(M)),(C=e.abort)==null||C.call(e))},d=()=>{t=!0},g=()=>{t=!1},x=()=>!focusManager.isFocused()||e.networkMode!=="always"&&!onlineManager.isOnline(),y=M=>{var C;i||(i=!0,(C=e.onSuccess)==null||C.call(e,M),s==null||s(),a(M))},P=M=>{var C;i||(i=!0,(C=e.onError)==null||C.call(e,M),s==null||s(),o(M))},E=()=>new Promise(M=>{var C;s=S=>{const b=i||!x();return b&&M(S),b},(C=e.onPause)==null||C.call(e)}).then(()=>{var M;s=void 0,i||(M=e.onContinue)==null||M.call(e)}),T=()=>{if(i)return;let M;try{M=e.fn()}catch(C){M=Promise.reject(C)}Promise.resolve(M).then(y).catch(C=>{var I;if(i)return;const S=e.retry??(isServer?0:3),b=e.retryDelay??defaultRetryDelay,A=typeof b=="function"?b(r,C):b,R=S===!0||typeof S=="number"&&r<S||typeof S=="function"&&S(r,C);if(t||!R){P(C);return}r++,(I=e.onFail)==null||I.call(e,r,C),sleep(A).then(()=>{if(x())return E()}).then(()=>{t?P(C):T()})})};return canFetch(e.networkMode)?T():E().then(T),{promise:u,cancel:c,continue:()=>(s==null?void 0:s())?u:Promise.resolve(),cancelRetry:d,continueRetry:g}}function createNotifyManager(){let e=[],t=0,r=y=>{y()},i=y=>{y()},s=y=>setTimeout(y,0);const a=y=>{s=y},o=y=>{let P;t++;try{P=y()}finally{t--,t||d()}return P},u=y=>{t?e.push(y):s(()=>{r(y)})},c=y=>(...P)=>{u(()=>{y(...P)})},d=()=>{const y=e;e=[],y.length&&s(()=>{i(()=>{y.forEach(P=>{r(P)})})})};return{batch:o,batchCalls:c,schedule:u,setNotifyFunction:y=>{r=y},setBatchNotifyFunction:y=>{i=y},setScheduler:a}}var notifyManager=createNotifyManager(),Ze,er,Removable=(er=class{constructor(){ee(this,Ze,void 0)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),isValidTimeout(this.gcTime)&&J(this,Ze,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(e){this.gcTime=Math.max(this.gcTime||0,e??(isServer?1/0:5*60*1e3))}clearGcTimeout(){G(this,Ze)&&(clearTimeout(G(this,Ze)),J(this,Ze,void 0))}},Ze=new WeakMap,er),ct,ut,Ee,We,Se,de,Pt,et,ft,Nt,Ae,De,tr,Query=(tr=class extends Removable{constructor(t){super();ee(this,ft);ee(this,Ae);ee(this,ct,void 0);ee(this,ut,void 0);ee(this,Ee,void 0);ee(this,We,void 0);ee(this,Se,void 0);ee(this,de,void 0);ee(this,Pt,void 0);ee(this,et,void 0);J(this,et,!1),J(this,Pt,t.defaultOptions),ie(this,ft,Nt).call(this,t.options),J(this,de,[]),J(this,Ee,t.cache),this.queryKey=t.queryKey,this.queryHash=t.queryHash,J(this,ct,t.state||getDefaultState$1(this.options)),this.state=G(this,ct),this.scheduleGc()}get meta(){return this.options.meta}optionalRemove(){!G(this,de).length&&this.state.fetchStatus==="idle"&&G(this,Ee).remove(this)}setData(t,r){const i=replaceData(this.state.data,t,this.options);return ie(this,Ae,De).call(this,{data:i,type:"success",dataUpdatedAt:r==null?void 0:r.updatedAt,manual:r==null?void 0:r.manual}),i}setState(t,r){ie(this,Ae,De).call(this,{type:"setState",state:t,setStateOptions:r})}cancel(t){var i;const r=G(this,We);return(i=G(this,Se))==null||i.cancel(t),r?r.then(noop$5).catch(noop$5):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(G(this,ct))}isActive(){return G(this,de).some(t=>t.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||G(this,de).some(t=>t.getCurrentResult().isStale)}isStaleByTime(t=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!timeUntilStale(this.state.dataUpdatedAt,t)}onFocus(){var r;const t=G(this,de).find(i=>i.shouldFetchOnWindowFocus());t==null||t.refetch({cancelRefetch:!1}),(r=G(this,Se))==null||r.continue()}onOnline(){var r;const t=G(this,de).find(i=>i.shouldFetchOnReconnect());t==null||t.refetch({cancelRefetch:!1}),(r=G(this,Se))==null||r.continue()}addObserver(t){G(this,de).includes(t)||(G(this,de).push(t),this.clearGcTimeout(),G(this,Ee).notify({type:"observerAdded",query:this,observer:t}))}removeObserver(t){G(this,de).includes(t)&&(J(this,de,G(this,de).filter(r=>r!==t)),G(this,de).length||(G(this,Se)&&(G(this,et)?G(this,Se).cancel({revert:!0}):G(this,Se).cancelRetry()),this.scheduleGc()),G(this,Ee).notify({type:"observerRemoved",query:this,observer:t}))}getObserversCount(){return G(this,de).length}invalidate(){this.state.isInvalidated||ie(this,Ae,De).call(this,{type:"invalidate"})}fetch(t,r){var d,g,x,y;if(this.state.fetchStatus!=="idle"){if(this.state.dataUpdatedAt&&(r!=null&&r.cancelRefetch))this.cancel({silent:!0});else if(G(this,We))return(d=G(this,Se))==null||d.continueRetry(),G(this,We)}if(t&&ie(this,ft,Nt).call(this,t),!this.options.queryFn){const P=G(this,de).find(E=>E.options.queryFn);P&&ie(this,ft,Nt).call(this,P.options)}const i=new AbortController,s={queryKey:this.queryKey,meta:this.meta},a=P=>{Object.defineProperty(P,"signal",{enumerable:!0,get:()=>(J(this,et,!0),i.signal)})};a(s);const o=()=>this.options.queryFn?(J(this,et,!1),this.options.persister?this.options.persister(this.options.queryFn,s,this):this.options.queryFn(s)):Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`)),u={fetchOptions:r,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:o};a(u),(g=this.options.behavior)==null||g.onFetch(u,this),J(this,ut,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((x=u.fetchOptions)==null?void 0:x.meta))&&ie(this,Ae,De).call(this,{type:"fetch",meta:(y=u.fetchOptions)==null?void 0:y.meta});const c=P=>{var E,T,M,C;isCancelledError(P)&&P.silent||ie(this,Ae,De).call(this,{type:"error",error:P}),isCancelledError(P)||((T=(E=G(this,Ee).config).onError)==null||T.call(E,P,this),(C=(M=G(this,Ee).config).onSettled)==null||C.call(M,this.state.data,P,this)),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return J(this,Se,createRetryer({fn:u.fetchFn,abort:i.abort.bind(i),onSuccess:P=>{var E,T,M,C;if(typeof P>"u"){c(new Error(`${this.queryHash} data is undefined`));return}this.setData(P),(T=(E=G(this,Ee).config).onSuccess)==null||T.call(E,P,this),(C=(M=G(this,Ee).config).onSettled)==null||C.call(M,P,this.state.error,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:c,onFail:(P,E)=>{ie(this,Ae,De).call(this,{type:"failed",failureCount:P,error:E})},onPause:()=>{ie(this,Ae,De).call(this,{type:"pause"})},onContinue:()=>{ie(this,Ae,De).call(this,{type:"continue"})},retry:u.options.retry,retryDelay:u.options.retryDelay,networkMode:u.options.networkMode})),J(this,We,G(this,Se).promise),G(this,We)}},ct=new WeakMap,ut=new WeakMap,Ee=new WeakMap,We=new WeakMap,Se=new WeakMap,de=new WeakMap,Pt=new WeakMap,et=new WeakMap,ft=new WeakSet,Nt=function(t){this.options={...G(this,Pt),...t},this.updateGcTime(this.options.gcTime)},Ae=new WeakSet,De=function(t){const r=i=>{switch(t.type){case"failed":return{...i,fetchFailureCount:t.failureCount,fetchFailureReason:t.error};case"pause":return{...i,fetchStatus:"paused"};case"continue":return{...i,fetchStatus:"fetching"};case"fetch":return{...i,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:t.meta??null,fetchStatus:canFetch(this.options.networkMode)?"fetching":"paused",...!i.dataUpdatedAt&&{error:null,status:"pending"}};case"success":return{...i,data:t.data,dataUpdateCount:i.dataUpdateCount+1,dataUpdatedAt:t.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!t.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const s=t.error;return isCancelledError(s)&&s.revert&&G(this,ut)?{...G(this,ut),fetchStatus:"idle"}:{...i,error:s,errorUpdateCount:i.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:i.fetchFailureCount+1,fetchFailureReason:s,fetchStatus:"idle",status:"error"};case"invalidate":return{...i,isInvalidated:!0};case"setState":return{...i,...t.state}}};this.state=r(this.state),notifyManager.batch(()=>{G(this,de).forEach(i=>{i.onQueryUpdate()}),G(this,Ee).notify({query:this,type:"updated",action:t})})},tr);function getDefaultState$1(e){const t=typeof e.initialData=="function"?e.initialData():e.initialData,r=typeof t<"u",i=r?typeof e.initialDataUpdatedAt=="function"?e.initialDataUpdatedAt():e.initialDataUpdatedAt:0;return{data:t,dataUpdateCount:0,dataUpdatedAt:r?i??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:r?"success":"pending",fetchStatus:"idle"}}var _e,rr,QueryCache=(rr=class extends Subscribable{constructor(t={}){super();ee(this,_e,void 0);this.config=t,J(this,_e,new Map)}build(t,r,i){const s=r.queryKey,a=r.queryHash??hashQueryKeyByOptions(s,r);let o=this.get(a);return o||(o=new Query({cache:this,queryKey:s,queryHash:a,options:t.defaultQueryOptions(r),state:i,defaultOptions:t.getQueryDefaults(s)}),this.add(o)),o}add(t){G(this,_e).has(t.queryHash)||(G(this,_e).set(t.queryHash,t),this.notify({type:"added",query:t}))}remove(t){const r=G(this,_e).get(t.queryHash);r&&(t.destroy(),r===t&&G(this,_e).delete(t.queryHash),this.notify({type:"removed",query:t}))}clear(){notifyManager.batch(()=>{this.getAll().forEach(t=>{this.remove(t)})})}get(t){return G(this,_e).get(t)}getAll(){return[...G(this,_e).values()]}find(t){const r={exact:!0,...t};return this.getAll().find(i=>matchQuery(r,i))}findAll(t={}){const r=this.getAll();return Object.keys(t).length>0?r.filter(i=>matchQuery(t,i)):r}notify(t){notifyManager.batch(()=>{this.listeners.forEach(r=>{r(t)})})}onFocus(){notifyManager.batch(()=>{this.getAll().forEach(t=>{t.onFocus()})})}onOnline(){notifyManager.batch(()=>{this.getAll().forEach(t=>{t.onOnline()})})}},_e=new WeakMap,rr),Re,Ct,xe,ht,ke,ze,ir,Mutation=(ir=class extends Removable{constructor(t){super();ee(this,ke);ee(this,Re,void 0);ee(this,Ct,void 0);ee(this,xe,void 0);ee(this,ht,void 0);this.mutationId=t.mutationId,J(this,Ct,t.defaultOptions),J(this,xe,t.mutationCache),J(this,Re,[]),this.state=t.state||getDefaultState(),this.setOptions(t.options),this.scheduleGc()}setOptions(t){this.options={...G(this,Ct),...t},this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(t){G(this,Re).includes(t)||(G(this,Re).push(t),this.clearGcTimeout(),G(this,xe).notify({type:"observerAdded",mutation:this,observer:t}))}removeObserver(t){J(this,Re,G(this,Re).filter(r=>r!==t)),this.scheduleGc(),G(this,xe).notify({type:"observerRemoved",mutation:this,observer:t})}optionalRemove(){G(this,Re).length||(this.state.status==="pending"?this.scheduleGc():G(this,xe).remove(this))}continue(){var t;return((t=G(this,ht))==null?void 0:t.continue())??this.execute(this.state.variables)}async execute(t){var s,a,o,u,c,d,g,x,y,P,E,T,M,C,S,b,A,R,I,D;const r=()=>(J(this,ht,createRetryer({fn:()=>this.options.mutationFn?this.options.mutationFn(t):Promise.reject(new Error("No mutationFn found")),onFail:(O,j)=>{ie(this,ke,ze).call(this,{type:"failed",failureCount:O,error:j})},onPause:()=>{ie(this,ke,ze).call(this,{type:"pause"})},onContinue:()=>{ie(this,ke,ze).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode})),G(this,ht).promise),i=this.state.status==="pending";try{if(!i){ie(this,ke,ze).call(this,{type:"pending",variables:t}),await((a=(s=G(this,xe).config).onMutate)==null?void 0:a.call(s,t,this));const j=await((u=(o=this.options).onMutate)==null?void 0:u.call(o,t));j!==this.state.context&&ie(this,ke,ze).call(this,{type:"pending",context:j,variables:t})}const O=await r();return await((d=(c=G(this,xe).config).onSuccess)==null?void 0:d.call(c,O,t,this.state.context,this)),await((x=(g=this.options).onSuccess)==null?void 0:x.call(g,O,t,this.state.context)),await((P=(y=G(this,xe).config).onSettled)==null?void 0:P.call(y,O,null,this.state.variables,this.state.context,this)),await((T=(E=this.options).onSettled)==null?void 0:T.call(E,O,null,t,this.state.context)),ie(this,ke,ze).call(this,{type:"success",data:O}),O}catch(O){try{throw await((C=(M=G(this,xe).config).onError)==null?void 0:C.call(M,O,t,this.state.context,this)),await((b=(S=this.options).onError)==null?void 0:b.call(S,O,t,this.state.context)),await((R=(A=G(this,xe).config).onSettled)==null?void 0:R.call(A,void 0,O,this.state.variables,this.state.context,this)),await((D=(I=this.options).onSettled)==null?void 0:D.call(I,void 0,O,t,this.state.context)),O}finally{ie(this,ke,ze).call(this,{type:"error",error:O})}}}},Re=new WeakMap,Ct=new WeakMap,xe=new WeakMap,ht=new WeakMap,ke=new WeakSet,ze=function(t){const r=i=>{switch(t.type){case"failed":return{...i,failureCount:t.failureCount,failureReason:t.error};case"pause":return{...i,isPaused:!0};case"continue":return{...i,isPaused:!1};case"pending":return{...i,context:t.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!canFetch(this.options.networkMode),status:"pending",variables:t.variables,submittedAt:Date.now()};case"success":return{...i,data:t.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...i,data:void 0,error:t.error,failureCount:i.failureCount+1,failureReason:t.error,isPaused:!1,status:"error"}}};this.state=r(this.state),notifyManager.batch(()=>{G(this,Re).forEach(i=>{i.onMutationUpdate(t)}),G(this,xe).notify({mutation:this,type:"updated",action:t})})},ir);function getDefaultState(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var Pe,Tt,tt,sr,MutationCache=(sr=class extends Subscribable{constructor(t={}){super();ee(this,Pe,void 0);ee(this,Tt,void 0);ee(this,tt,void 0);this.config=t,J(this,Pe,[]),J(this,Tt,0)}build(t,r,i){const s=new Mutation({mutationCache:this,mutationId:++jt(this,Tt)._,options:t.defaultMutationOptions(r),state:i});return this.add(s),s}add(t){G(this,Pe).push(t),this.notify({type:"added",mutation:t})}remove(t){J(this,Pe,G(this,Pe).filter(r=>r!==t)),this.notify({type:"removed",mutation:t})}clear(){notifyManager.batch(()=>{G(this,Pe).forEach(t=>{this.remove(t)})})}getAll(){return G(this,Pe)}find(t){const r={exact:!0,...t};return G(this,Pe).find(i=>matchMutation(r,i))}findAll(t={}){return G(this,Pe).filter(r=>matchMutation(t,r))}notify(t){notifyManager.batch(()=>{this.listeners.forEach(r=>{r(t)})})}resumePausedMutations(){return J(this,tt,(G(this,tt)??Promise.resolve()).then(()=>{const t=G(this,Pe).filter(r=>r.state.isPaused);return notifyManager.batch(()=>t.reduce((r,i)=>r.then(()=>i.continue().catch(noop$5)),Promise.resolve()))}).then(()=>{J(this,tt,void 0)})),G(this,tt)}},Pe=new WeakMap,Tt=new WeakMap,tt=new WeakMap,sr);function infiniteQueryBehavior(e){return{onFetch:(t,r)=>{const i=async()=>{var E,T,M,C,S;const s=t.options,a=(M=(T=(E=t.fetchOptions)==null?void 0:E.meta)==null?void 0:T.fetchMore)==null?void 0:M.direction,o=((C=t.state.data)==null?void 0:C.pages)||[],u=((S=t.state.data)==null?void 0:S.pageParams)||[],c={pages:[],pageParams:[]};let d=!1;const g=b=>{Object.defineProperty(b,"signal",{enumerable:!0,get:()=>(t.signal.aborted?d=!0:t.signal.addEventListener("abort",()=>{d=!0}),t.signal)})},x=t.options.queryFn||(()=>Promise.reject(new Error(`Missing queryFn: '${t.options.queryHash}'`))),y=async(b,A,R)=>{if(d)return Promise.reject();if(A==null&&b.pages.length)return Promise.resolve(b);const I={queryKey:t.queryKey,pageParam:A,direction:R?"backward":"forward",meta:t.options.meta};g(I);const D=await x(I),{maxPages:O}=t.options,j=R?addToStart:addToEnd;return{pages:j(b.pages,D,O),pageParams:j(b.pageParams,A,O)}};let P;if(a&&o.length){const b=a==="backward",A=b?getPreviousPageParam:getNextPageParam,R={pages:o,pageParams:u},I=A(s,R);P=await y(R,I,b)}else{P=await y(c,u[0]??s.initialPageParam);const b=e??o.length;for(let A=1;A<b;A++){const R=getNextPageParam(s,P);P=await y(P,R)}}return P};t.options.persister?t.fetchFn=()=>{var s,a;return(a=(s=t.options).persister)==null?void 0:a.call(s,i,{queryKey:t.queryKey,meta:t.options.meta,signal:t.signal},r)}:t.fetchFn=i}}}function getNextPageParam(e,{pages:t,pageParams:r}){const i=t.length-1;return e.getNextPageParam(t[i],t,r[i],r)}function getPreviousPageParam(e,{pages:t,pageParams:r}){var i;return(i=e.getPreviousPageParam)==null?void 0:i.call(e,t[0],t,r[0],r)}function hasNextPage(e,t){return t?getNextPageParam(e,t)!=null:!1}function hasPreviousPage(e,t){return!t||!e.getPreviousPageParam?!1:getPreviousPageParam(e,t)!=null}var fe,qe,Ue,pt,dt,Ke,mt,vt,nr,QueryClient=(nr=class{constructor(e={}){ee(this,fe,void 0);ee(this,qe,void 0);ee(this,Ue,void 0);ee(this,pt,void 0);ee(this,dt,void 0);ee(this,Ke,void 0);ee(this,mt,void 0);ee(this,vt,void 0);J(this,fe,e.queryCache||new QueryCache),J(this,qe,e.mutationCache||new MutationCache),J(this,Ue,e.defaultOptions||{}),J(this,pt,new Map),J(this,dt,new Map),J(this,Ke,0)}mount(){jt(this,Ke)._++,G(this,Ke)===1&&(J(this,mt,focusManager.subscribe(()=>{focusManager.isFocused()&&(this.resumePausedMutations(),G(this,fe).onFocus())})),J(this,vt,onlineManager.subscribe(()=>{onlineManager.isOnline()&&(this.resumePausedMutations(),G(this,fe).onOnline())})))}unmount(){var e,t;jt(this,Ke)._--,G(this,Ke)===0&&((e=G(this,mt))==null||e.call(this),J(this,mt,void 0),(t=G(this,vt))==null||t.call(this),J(this,vt,void 0))}isFetching(e){return G(this,fe).findAll({...e,fetchStatus:"fetching"}).length}isMutating(e){return G(this,qe).findAll({...e,status:"pending"}).length}getQueryData(e){var t;return(t=G(this,fe).find({queryKey:e}))==null?void 0:t.state.data}ensureQueryData(e){const t=this.getQueryData(e.queryKey);return t!==void 0?Promise.resolve(t):this.fetchQuery(e)}getQueriesData(e){return this.getQueryCache().findAll(e).map(({queryKey:t,state:r})=>{const i=r.data;return[t,i]})}setQueryData(e,t,r){const i=G(this,fe).find({queryKey:e}),s=i==null?void 0:i.state.data,a=functionalUpdate(t,s);if(typeof a>"u")return;const o=this.defaultQueryOptions({queryKey:e});return G(this,fe).build(this,o).setData(a,{...r,manual:!0})}setQueriesData(e,t,r){return notifyManager.batch(()=>this.getQueryCache().findAll(e).map(({queryKey:i})=>[i,this.setQueryData(i,t,r)]))}getQueryState(e){var t;return(t=G(this,fe).find({queryKey:e}))==null?void 0:t.state}removeQueries(e){const t=G(this,fe);notifyManager.batch(()=>{t.findAll(e).forEach(r=>{t.remove(r)})})}resetQueries(e,t){const r=G(this,fe),i={type:"active",...e};return notifyManager.batch(()=>(r.findAll(e).forEach(s=>{s.reset()}),this.refetchQueries(i,t)))}cancelQueries(e={},t={}){const r={revert:!0,...t},i=notifyManager.batch(()=>G(this,fe).findAll(e).map(s=>s.cancel(r)));return Promise.all(i).then(noop$5).catch(noop$5)}invalidateQueries(e={},t={}){return notifyManager.batch(()=>{if(G(this,fe).findAll(e).forEach(i=>{i.invalidate()}),e.refetchType==="none")return Promise.resolve();const r={...e,type:e.refetchType??e.type??"active"};return this.refetchQueries(r,t)})}refetchQueries(e={},t){const r={...t,cancelRefetch:(t==null?void 0:t.cancelRefetch)??!0},i=notifyManager.batch(()=>G(this,fe).findAll(e).filter(s=>!s.isDisabled()).map(s=>{let a=s.fetch(void 0,r);return r.throwOnError||(a=a.catch(noop$5)),s.state.fetchStatus==="paused"?Promise.resolve():a}));return Promise.all(i).then(noop$5)}fetchQuery(e){const t=this.defaultQueryOptions(e);typeof t.retry>"u"&&(t.retry=!1);const r=G(this,fe).build(this,t);return r.isStaleByTime(t.staleTime)?r.fetch(t):Promise.resolve(r.state.data)}prefetchQuery(e){return this.fetchQuery(e).then(noop$5).catch(noop$5)}fetchInfiniteQuery(e){return e.behavior=infiniteQueryBehavior(e.pages),this.fetchQuery(e)}prefetchInfiniteQuery(e){return this.fetchInfiniteQuery(e).then(noop$5).catch(noop$5)}resumePausedMutations(){return G(this,qe).resumePausedMutations()}getQueryCache(){return G(this,fe)}getMutationCache(){return G(this,qe)}getDefaultOptions(){return G(this,Ue)}setDefaultOptions(e){J(this,Ue,e)}setQueryDefaults(e,t){G(this,pt).set(hashKey(e),{queryKey:e,defaultOptions:t})}getQueryDefaults(e){const t=[...G(this,pt).values()];let r={};return t.forEach(i=>{partialMatchKey(e,i.queryKey)&&(r={...r,...i.defaultOptions})}),r}setMutationDefaults(e,t){G(this,dt).set(hashKey(e),{mutationKey:e,defaultOptions:t})}getMutationDefaults(e){const t=[...G(this,dt).values()];let r={};return t.forEach(i=>{partialMatchKey(e,i.mutationKey)&&(r={...r,...i.defaultOptions})}),r}defaultQueryOptions(e){if(e!=null&&e._defaulted)return e;const t={...G(this,Ue).queries,...(e==null?void 0:e.queryKey)&&this.getQueryDefaults(e.queryKey),...e,_defaulted:!0};return t.queryHash||(t.queryHash=hashQueryKeyByOptions(t.queryKey,t)),typeof t.refetchOnReconnect>"u"&&(t.refetchOnReconnect=t.networkMode!=="always"),typeof t.throwOnError>"u"&&(t.throwOnError=!!t.suspense),typeof t.networkMode>"u"&&t.persister&&(t.networkMode="offlineFirst"),t}defaultMutationOptions(e){return e!=null&&e._defaulted?e:{...G(this,Ue).mutations,...(e==null?void 0:e.mutationKey)&&this.getMutationDefaults(e.mutationKey),...e,_defaulted:!0}}clear(){G(this,fe).clear(),G(this,qe).clear()}},fe=new WeakMap,qe=new WeakMap,Ue=new WeakMap,pt=new WeakMap,dt=new WeakMap,Ke=new WeakMap,mt=new WeakMap,vt=new WeakMap,nr),ge,oe,wt,me,rt,gt,Ie,At,yt,xt,it,st,Xe,bt,nt,St,Mt,Ht,_t,Wt,Rt,qt,kt,Ut,It,Kt,Ft,Xt,Lt,Yt,zt,lr,ar,QueryObserver=(ar=class extends Subscribable{constructor(t,r){super();ee(this,nt);ee(this,Mt);ee(this,_t);ee(this,Rt);ee(this,kt);ee(this,It);ee(this,Ft);ee(this,Lt);ee(this,zt);ee(this,ge,void 0);ee(this,oe,void 0);ee(this,wt,void 0);ee(this,me,void 0);ee(this,rt,void 0);ee(this,gt,void 0);ee(this,Ie,void 0);ee(this,At,void 0);ee(this,yt,void 0);ee(this,xt,void 0);ee(this,it,void 0);ee(this,st,void 0);ee(this,Xe,void 0);ee(this,bt,new Set);this.options=r,J(this,ge,t),J(this,Ie,null),this.bindMethods(),this.setOptions(r)}bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.size===1&&(G(this,oe).addObserver(this),shouldFetchOnMount(G(this,oe),this.options)?ie(this,nt,St).call(this):this.updateResult(),ie(this,kt,Ut).call(this))}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return shouldFetchOn(G(this,oe),this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return shouldFetchOn(G(this,oe),this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,ie(this,It,Kt).call(this),ie(this,Ft,Xt).call(this),G(this,oe).removeObserver(this)}setOptions(t,r){const i=this.options,s=G(this,oe);if(this.options=G(this,ge).defaultQueryOptions(t),shallowEqualObjects(i,this.options)||G(this,ge).getQueryCache().notify({type:"observerOptionsUpdated",query:G(this,oe),observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=i.queryKey),ie(this,Lt,Yt).call(this);const a=this.hasListeners();a&&shouldFetchOptionally(G(this,oe),s,this.options,i)&&ie(this,nt,St).call(this),this.updateResult(r),a&&(G(this,oe)!==s||this.options.enabled!==i.enabled||this.options.staleTime!==i.staleTime)&&ie(this,Mt,Ht).call(this);const o=ie(this,_t,Wt).call(this);a&&(G(this,oe)!==s||this.options.enabled!==i.enabled||o!==G(this,Xe))&&ie(this,Rt,qt).call(this,o)}getOptimisticResult(t){const r=G(this,ge).getQueryCache().build(G(this,ge),t),i=this.createResult(r,t);return shouldAssignObserverCurrentProperties(this,i)&&(J(this,me,i),J(this,gt,this.options),J(this,rt,G(this,oe).state)),i}getCurrentResult(){return G(this,me)}trackResult(t){const r={};return Object.keys(t).forEach(i=>{Object.defineProperty(r,i,{configurable:!1,enumerable:!0,get:()=>(G(this,bt).add(i),t[i])})}),r}getCurrentQuery(){return G(this,oe)}refetch({...t}={}){return this.fetch({...t})}fetchOptimistic(t){const r=G(this,ge).defaultQueryOptions(t),i=G(this,ge).getQueryCache().build(G(this,ge),r);return i.isFetchingOptimistic=!0,i.fetch().then(()=>this.createResult(i,r))}fetch(t){return ie(this,nt,St).call(this,{...t,cancelRefetch:t.cancelRefetch??!0}).then(()=>(this.updateResult(),G(this,me)))}createResult(t,r){var I;const i=G(this,oe),s=this.options,a=G(this,me),o=G(this,rt),u=G(this,gt),d=t!==i?t.state:G(this,wt),{state:g}=t;let{error:x,errorUpdatedAt:y,fetchStatus:P,status:E}=g,T=!1,M;if(r._optimisticResults){const D=this.hasListeners(),O=!D&&shouldFetchOnMount(t,r),j=D&&shouldFetchOptionally(t,i,r,s);(O||j)&&(P=canFetch(t.options.networkMode)?"fetching":"paused",g.dataUpdatedAt||(E="pending")),r._optimisticResults==="isRestoring"&&(P="idle")}if(r.select&&typeof g.data<"u")if(a&&g.data===(o==null?void 0:o.data)&&r.select===G(this,At))M=G(this,yt);else try{J(this,At,r.select),M=r.select(g.data),M=replaceData(a==null?void 0:a.data,M,r),J(this,yt,M),J(this,Ie,null)}catch(D){J(this,Ie,D)}else M=g.data;if(typeof r.placeholderData<"u"&&typeof M>"u"&&E==="pending"){let D;if(a!=null&&a.isPlaceholderData&&r.placeholderData===(u==null?void 0:u.placeholderData))D=a.data;else if(D=typeof r.placeholderData=="function"?r.placeholderData((I=G(this,xt))==null?void 0:I.state.data,G(this,xt)):r.placeholderData,r.select&&typeof D<"u")try{D=r.select(D),J(this,Ie,null)}catch(O){J(this,Ie,O)}typeof D<"u"&&(E="success",M=replaceData(a==null?void 0:a.data,D,r),T=!0)}G(this,Ie)&&(x=G(this,Ie),M=G(this,yt),y=Date.now(),E="error");const C=P==="fetching",S=E==="pending",b=E==="error",A=S&&C;return{status:E,fetchStatus:P,isPending:S,isSuccess:E==="success",isError:b,isInitialLoading:A,isLoading:A,data:M,dataUpdatedAt:g.dataUpdatedAt,error:x,errorUpdatedAt:y,failureCount:g.fetchFailureCount,failureReason:g.fetchFailureReason,errorUpdateCount:g.errorUpdateCount,isFetched:g.dataUpdateCount>0||g.errorUpdateCount>0,isFetchedAfterMount:g.dataUpdateCount>d.dataUpdateCount||g.errorUpdateCount>d.errorUpdateCount,isFetching:C,isRefetching:C&&!S,isLoadingError:b&&g.dataUpdatedAt===0,isPaused:P==="paused",isPlaceholderData:T,isRefetchError:b&&g.dataUpdatedAt!==0,isStale:isStale(t,r),refetch:this.refetch}}updateResult(t){const r=G(this,me),i=this.createResult(G(this,oe),this.options);if(J(this,rt,G(this,oe).state),J(this,gt,this.options),G(this,rt).data!==void 0&&J(this,xt,G(this,oe)),shallowEqualObjects(i,r))return;J(this,me,i);const s={},a=()=>{if(!r)return!0;const{notifyOnChangeProps:o}=this.options,u=typeof o=="function"?o():o;if(u==="all"||!u&&!G(this,bt).size)return!0;const c=new Set(u??G(this,bt));return this.options.throwOnError&&c.add("error"),Object.keys(G(this,me)).some(d=>{const g=d;return G(this,me)[g]!==r[g]&&c.has(g)})};(t==null?void 0:t.listeners)!==!1&&a()&&(s.listeners=!0),ie(this,zt,lr).call(this,{...s,...t})}onQueryUpdate(){this.updateResult(),this.hasListeners()&&ie(this,kt,Ut).call(this)}},ge=new WeakMap,oe=new WeakMap,wt=new WeakMap,me=new WeakMap,rt=new WeakMap,gt=new WeakMap,Ie=new WeakMap,At=new WeakMap,yt=new WeakMap,xt=new WeakMap,it=new WeakMap,st=new WeakMap,Xe=new WeakMap,bt=new WeakMap,nt=new WeakSet,St=function(t){ie(this,Lt,Yt).call(this);let r=G(this,oe).fetch(this.options,t);return t!=null&&t.throwOnError||(r=r.catch(noop$5)),r},Mt=new WeakSet,Ht=function(){if(ie(this,It,Kt).call(this),isServer||G(this,me).isStale||!isValidTimeout(this.options.staleTime))return;const r=timeUntilStale(G(this,me).dataUpdatedAt,this.options.staleTime)+1;J(this,it,setTimeout(()=>{G(this,me).isStale||this.updateResult()},r))},_t=new WeakSet,Wt=function(){return(typeof this.options.refetchInterval=="function"?this.options.refetchInterval(G(this,oe)):this.options.refetchInterval)??!1},Rt=new WeakSet,qt=function(t){ie(this,Ft,Xt).call(this),J(this,Xe,t),!(isServer||this.options.enabled===!1||!isValidTimeout(G(this,Xe))||G(this,Xe)===0)&&J(this,st,setInterval(()=>{(this.options.refetchIntervalInBackground||focusManager.isFocused())&&ie(this,nt,St).call(this)},G(this,Xe)))},kt=new WeakSet,Ut=function(){ie(this,Mt,Ht).call(this),ie(this,Rt,qt).call(this,ie(this,_t,Wt).call(this))},It=new WeakSet,Kt=function(){G(this,it)&&(clearTimeout(G(this,it)),J(this,it,void 0))},Ft=new WeakSet,Xt=function(){G(this,st)&&(clearInterval(G(this,st)),J(this,st,void 0))},Lt=new WeakSet,Yt=function(){const t=G(this,ge).getQueryCache().build(G(this,ge),this.options);if(t===G(this,oe))return;const r=G(this,oe);J(this,oe,t),J(this,wt,t.state),this.hasListeners()&&(r==null||r.removeObserver(this),t.addObserver(this))},zt=new WeakSet,lr=function(t){notifyManager.batch(()=>{t.listeners&&this.listeners.forEach(r=>{r(G(this,me))}),G(this,ge).getQueryCache().notify({query:G(this,oe),type:"observerResultsUpdated"})})},ar);function shouldLoadOnMount(e,t){return t.enabled!==!1&&!e.state.dataUpdatedAt&&!(e.state.status==="error"&&t.retryOnMount===!1)}function shouldFetchOnMount(e,t){return shouldLoadOnMount(e,t)||e.state.dataUpdatedAt>0&&shouldFetchOn(e,t,t.refetchOnMount)}function shouldFetchOn(e,t,r){if(t.enabled!==!1){const i=typeof r=="function"?r(e):r;return i==="always"||i!==!1&&isStale(e,t)}return!1}function shouldFetchOptionally(e,t,r,i){return r.enabled!==!1&&(e!==t||i.enabled===!1)&&(!r.suspense||e.state.status!=="error")&&isStale(e,r)}function isStale(e,t){return e.isStaleByTime(t.staleTime)}function shouldAssignObserverCurrentProperties(e,t){return!shallowEqualObjects(e.getCurrentResult(),t)}var Ye,Ve,be,Be,Et,$t,Dt,Qt,or,MutationObserver$1=(or=class extends Subscribable{constructor(r,i){super();ee(this,Et);ee(this,Dt);ee(this,Ye,void 0);ee(this,Ve,void 0);ee(this,be,void 0);ee(this,Be,void 0);J(this,Ve,void 0),J(this,Ye,r),this.setOptions(i),this.bindMethods(),ie(this,Et,$t).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(r){var s;const i=this.options;this.options=G(this,Ye).defaultMutationOptions(r),shallowEqualObjects(i,this.options)||G(this,Ye).getMutationCache().notify({type:"observerOptionsUpdated",mutation:G(this,be),observer:this}),(s=G(this,be))==null||s.setOptions(this.options),i!=null&&i.mutationKey&&this.options.mutationKey&&hashKey(i.mutationKey)!==hashKey(this.options.mutationKey)&&this.reset()}onUnsubscribe(){var r;this.hasListeners()||(r=G(this,be))==null||r.removeObserver(this)}onMutationUpdate(r){ie(this,Et,$t).call(this),ie(this,Dt,Qt).call(this,r)}getCurrentResult(){return G(this,Ve)}reset(){var r;(r=G(this,be))==null||r.removeObserver(this),J(this,be,void 0),ie(this,Et,$t).call(this),ie(this,Dt,Qt).call(this)}mutate(r,i){var s;return J(this,Be,i),(s=G(this,be))==null||s.removeObserver(this),J(this,be,G(this,Ye).getMutationCache().build(G(this,Ye),this.options)),G(this,be).addObserver(this),G(this,be).execute(r)}},Ye=new WeakMap,Ve=new WeakMap,be=new WeakMap,Be=new WeakMap,Et=new WeakSet,$t=function(){var i;const r=((i=G(this,be))==null?void 0:i.state)??getDefaultState();J(this,Ve,{...r,isPending:r.status==="pending",isSuccess:r.status==="success",isError:r.status==="error",isIdle:r.status==="idle",mutate:this.mutate,reset:this.reset})},Dt=new WeakSet,Qt=function(r){notifyManager.batch(()=>{var i,s,a,o,u,c,d,g;if(G(this,Be)&&this.hasListeners()){const x=G(this,Ve).variables,y=G(this,Ve).context;(r==null?void 0:r.type)==="success"?((s=(i=G(this,Be)).onSuccess)==null||s.call(i,r.data,x,y),(o=(a=G(this,Be)).onSettled)==null||o.call(a,r.data,null,x,y)):(r==null?void 0:r.type)==="error"&&((c=(u=G(this,Be)).onError)==null||c.call(u,r.error,x,y),(g=(d=G(this,Be)).onSettled)==null||g.call(d,void 0,r.error,x,y))}this.listeners.forEach(x=>{x(G(this,Ve))})})},or),QueryClientContext=reactExports.createContext(void 0),useQueryClient=e=>{const t=reactExports.useContext(QueryClientContext);if(e)return e;if(!t)throw new Error("No QueryClient set, use QueryClientProvider to set one");return t},QueryClientProvider=({client:e,children:t})=>(reactExports.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]),reactExports.createElement(QueryClientContext.Provider,{value:e},t)),IsRestoringContext=reactExports.createContext(!1),useIsRestoring=()=>reactExports.useContext(IsRestoringContext);IsRestoringContext.Provider;function createValue(){let e=!1;return{clearReset:()=>{e=!1},reset:()=>{e=!0},isReset:()=>e}}var QueryErrorResetBoundaryContext=reactExports.createContext(createValue()),useQueryErrorResetBoundary=()=>reactExports.useContext(QueryErrorResetBoundaryContext);function shouldThrowError(e,t){return typeof e=="function"?e(...t):!!e}var ensurePreventErrorBoundaryRetry=(e,t)=>{(e.suspense||e.throwOnError)&&(t.isReset()||(e.retryOnMount=!1))},useClearResetErrorBoundary=e=>{reactExports.useEffect(()=>{e.clearReset()},[e])},getHasError=({result:e,errorResetBoundary:t,throwOnError:r,query:i})=>e.isError&&!t.isReset()&&!e.isFetching&&i&&shouldThrowError(r,[e.error,i]),ensureStaleTime=e=>{e.suspense&&typeof e.staleTime!="number"&&(e.staleTime=1e3)},shouldSuspend=(e,t)=>(e==null?void 0:e.suspense)&&t.isPending,fetchOptimistic=(e,t,r)=>t.fetchOptimistic(e).catch(()=>{r.clearReset()});function useBaseQuery(e,t,r){const i=useQueryClient(r),s=useIsRestoring(),a=useQueryErrorResetBoundary(),o=i.defaultQueryOptions(e);o._optimisticResults=s?"isRestoring":"optimistic",ensureStaleTime(o),ensurePreventErrorBoundaryRetry(o,a),useClearResetErrorBoundary(a);const[u]=reactExports.useState(()=>new t(i,o)),c=u.getOptimisticResult(o);if(reactExports.useSyncExternalStore(reactExports.useCallback(d=>{const g=s?()=>{}:u.subscribe(notifyManager.batchCalls(d));return u.updateResult(),g},[u,s]),()=>u.getCurrentResult(),()=>u.getCurrentResult()),reactExports.useEffect(()=>{u.setOptions(o,{listeners:!1})},[o,u]),shouldSuspend(o,c))throw fetchOptimistic(o,u,a);if(getHasError({result:c,errorResetBoundary:a,throwOnError:o.throwOnError,query:i.getQueryCache().get(o.queryHash)}))throw c.error;return o.notifyOnChangeProps?c:u.trackResult(c)}function useQuery(e,t){return useBaseQuery(e,QueryObserver,t)}function useMutation(e,t){const r=useQueryClient(t),[i]=reactExports.useState(()=>new MutationObserver$1(r,e));reactExports.useEffect(()=>{i.setOptions(e)},[i,e]);const s=reactExports.useSyncExternalStore(reactExports.useCallback(o=>i.subscribe(notifyManager.batchCalls(o)),[i]),()=>i.getCurrentResult(),()=>i.getCurrentResult()),a=reactExports.useCallback((o,u)=>{i.mutate(o,u).catch(noop$4)},[i]);if(s.error&&shouldThrowError(i.options.throwOnError,[s.error]))throw s.error;return{...s,mutate:a,mutateAsync:s.mutate}}function noop$4(){}var lottie$1={exports:{}};(function(module,exports){typeof navigator<"u"&&function(e,t){module.exports=t()}(commonjsGlobal,function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(t){_useWebWorker=!!t},getWebWorker=function(){return _useWebWorker},setLocationHref=function(t){locationHref=t},getLocationHref=function(){return locationHref};function createTag(e){return document.createElement(e)}function extendPrototype(e,t){var r,i=e.length,s;for(r=0;r<i;r+=1){s=e[r].prototype;for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(t.prototype[a]=s[a])}}function getDescriptor(e,t){return Object.getOwnPropertyDescriptor(e,t)}function createProxyFunction(e){function t(){}return t.prototype=e,t}var audioControllerFactory=function(){function e(t){this.audios=[],this.audioFactory=t,this._volume=1,this._isMuted=!1}return e.prototype={addAudio:function(r){this.audios.push(r)},pause:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].pause()},resume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].resume()},setRate:function(r){var i,s=this.audios.length;for(i=0;i<s;i+=1)this.audios[i].setRate(r)},createAudio:function(r){return this.audioFactory?this.audioFactory(r):window.Howl?new window.Howl({src:[r]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(r){this.audioFactory=r},setVolume:function(r){this._volume=r,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].volume(this._volume*(this._isMuted?0:1))}},function(){return new e}}(),createTypedArray=function(){function e(r,i){var s=0,a=[],o;switch(r){case"int16":case"uint8c":o=1;break;default:o=1.1;break}for(s=0;s<i;s+=1)a.push(o);return a}function t(r,i){return r==="float32"?new Float32Array(i):r==="int16"?new Int16Array(i):r==="uint8c"?new Uint8ClampedArray(i):e(r,i)}return typeof Uint8ClampedArray=="function"&&typeof Float32Array=="function"?t:e}();function createSizedArray(e){return Array.apply(null,{length:e})}function _typeof$6(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$6=function(r){return typeof r}:_typeof$6=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$6(e)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};(function(){var e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],t,r=e.length;for(t=0;t<r;t+=1)BMMath[e[t]]=Math[e[t]]})(),BMMath.random=Math.random,BMMath.abs=function(e){var t=_typeof$6(e);if(t==="object"&&e.length){var r=createSizedArray(e.length),i,s=e.length;for(i=0;i<s;i+=1)r[i]=Math.abs(e[i]);return r}return Math.abs(e)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function styleDiv(e){e.style.position="absolute",e.style.top=0,e.style.left=0,e.style.display="block",e.style.transformOrigin="0 0",e.style.webkitTransformOrigin="0 0",e.style.backfaceVisibility="visible",e.style.webkitBackfaceVisibility="visible",e.style.transformStyle="preserve-3d",e.style.webkitTransformStyle="preserve-3d",e.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(e,t,r,i){this.type=e,this.currentTime=t,this.totalTime=r,this.direction=i<0?-1:1}function BMCompleteEvent(e,t){this.type=e,this.direction=t<0?-1:1}function BMCompleteLoopEvent(e,t,r,i){this.type=e,this.currentLoop=r,this.totalLoops=t,this.direction=i<0?-1:1}function BMSegmentStartEvent(e,t,r){this.type=e,this.firstFrame=t,this.totalFrames=r}function BMDestroyEvent(e,t){this.type=e,this.target=t}function BMRenderFrameErrorEvent(e,t){this.type="renderFrameError",this.nativeError=e,this.currentTime=t}function BMConfigErrorEvent(e){this.type="configError",this.nativeError=e}var createElementID=function(){var e=0;return function(){return e+=1,idPrefix$1+"__lottie_element_"+e}}();function HSVtoRGB(e,t,r){var i,s,a,o,u,c,d,g;switch(o=Math.floor(e*6),u=e*6-o,c=r*(1-t),d=r*(1-u*t),g=r*(1-(1-u)*t),o%6){case 0:i=r,s=g,a=c;break;case 1:i=d,s=r,a=c;break;case 2:i=c,s=r,a=g;break;case 3:i=c,s=d,a=r;break;case 4:i=g,s=c,a=r;break;case 5:i=r,s=c,a=d;break}return[i,s,a]}function RGBtoHSV(e,t,r){var i=Math.max(e,t,r),s=Math.min(e,t,r),a=i-s,o,u=i===0?0:a/i,c=i/255;switch(i){case s:o=0;break;case e:o=t-r+a*(t<r?6:0),o/=6*a;break;case t:o=r-e+a*2,o/=6*a;break;case r:o=e-t+a*4,o/=6*a;break}return[o,u,c]}function addSaturationToRGB(e,t){var r=RGBtoHSV(e[0]*255,e[1]*255,e[2]*255);return r[1]+=t,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(e,t){var r=RGBtoHSV(e[0]*255,e[1]*255,e[2]*255);return r[2]+=t,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(e,t){var r=RGBtoHSV(e[0]*255,e[1]*255,e[2]*255);return r[0]+=t/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var e=[],t,r;for(t=0;t<256;t+=1)r=t.toString(16),e[t]=r.length===1?"0"+r:r;return function(i,s,a){return i<0&&(i=0),s<0&&(s=0),a<0&&(a=0),"#"+e[i]+e[s]+e[a]}}(),setSubframeEnabled=function(t){subframeEnabled=!!t},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(t){expressionsPlugin=t},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(t){expressionsInterfaces=t},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(t){defaultCurveSegments=t},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(t){idPrefix$1=t};function createNS(e){return document.createElementNS(svgNS,e)}function _typeof$5(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$5=function(r){return typeof r}:_typeof$5=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$5(e)}var dataManager=function(){var e=1,t=[],r,i,s={onmessage:function(){},postMessage:function(P){r({data:P})}},a={postMessage:function(P){s.onmessage({data:P})}};function o(y){if(window.Worker&&window.Blob&&getWebWorker()){var P=new Blob(["var _workerSelf = self; self.onmessage = ",y.toString()],{type:"text/javascript"}),E=URL.createObjectURL(P);return new Worker(E)}return r=y,s}function u(){i||(i=o(function(P){function E(){function M(N,L){var B,_,F=N.length,z,V,X,Y;for(_=0;_<F;_+=1)if(B=N[_],"ks"in B&&!B.completed){if(B.completed=!0,B.hasMask){var Q=B.masksProperties;for(V=Q.length,z=0;z<V;z+=1)if(Q[z].pt.k.i)R(Q[z].pt.k);else for(Y=Q[z].pt.k.length,X=0;X<Y;X+=1)Q[z].pt.k[X].s&&R(Q[z].pt.k[X].s[0]),Q[z].pt.k[X].e&&R(Q[z].pt.k[X].e[0])}B.ty===0?(B.layers=b(B.refId,L),M(B.layers,L)):B.ty===4?A(B.shapes):B.ty===5&&K(B)}}function C(N,L){if(N){var B=0,_=N.length;for(B=0;B<_;B+=1)N[B].t===1&&(N[B].data.layers=b(N[B].data.refId,L),M(N[B].data.layers,L))}}function S(N,L){for(var B=0,_=L.length;B<_;){if(L[B].id===N)return L[B];B+=1}return null}function b(N,L){var B=S(N,L);return B?B.layers.__used?JSON.parse(JSON.stringify(B.layers)):(B.layers.__used=!0,B.layers):null}function A(N){var L,B=N.length,_,F;for(L=B-1;L>=0;L-=1)if(N[L].ty==="sh")if(N[L].ks.k.i)R(N[L].ks.k);else for(F=N[L].ks.k.length,_=0;_<F;_+=1)N[L].ks.k[_].s&&R(N[L].ks.k[_].s[0]),N[L].ks.k[_].e&&R(N[L].ks.k[_].e[0]);else N[L].ty==="gr"&&A(N[L].it)}function R(N){var L,B=N.i.length;for(L=0;L<B;L+=1)N.i[L][0]+=N.v[L][0],N.i[L][1]+=N.v[L][1],N.o[L][0]+=N.v[L][0],N.o[L][1]+=N.v[L][1]}function I(N,L){var B=L?L.split("."):[100,100,100];return N[0]>B[0]?!0:B[0]>N[0]?!1:N[1]>B[1]?!0:B[1]>N[1]?!1:N[2]>B[2]?!0:B[2]>N[2]?!1:null}var D=function(){var N=[4,4,14];function L(_){var F=_.t.d;_.t.d={k:[{s:F,t:0}]}}function B(_){var F,z=_.length;for(F=0;F<z;F+=1)_[F].ty===5&&L(_[F])}return function(_){if(I(N,_.v)&&(B(_.layers),_.assets)){var F,z=_.assets.length;for(F=0;F<z;F+=1)_.assets[F].layers&&B(_.assets[F].layers)}}}(),O=function(){var N=[4,7,99];return function(L){if(L.chars&&!I(N,L.v)){var B,_=L.chars.length;for(B=0;B<_;B+=1){var F=L.chars[B];F.data&&F.data.shapes&&(A(F.data.shapes),F.data.ip=0,F.data.op=99999,F.data.st=0,F.data.sr=1,F.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},L.chars[B].t||(F.data.shapes.push({ty:"no"}),F.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}}(),j=function(){var N=[5,7,15];function L(_){var F=_.t.p;typeof F.a=="number"&&(F.a={a:0,k:F.a}),typeof F.p=="number"&&(F.p={a:0,k:F.p}),typeof F.r=="number"&&(F.r={a:0,k:F.r})}function B(_){var F,z=_.length;for(F=0;F<z;F+=1)_[F].ty===5&&L(_[F])}return function(_){if(I(N,_.v)&&(B(_.layers),_.assets)){var F,z=_.assets.length;for(F=0;F<z;F+=1)_.assets[F].layers&&B(_.assets[F].layers)}}}(),W=function(){var N=[4,1,9];function L(_){var F,z=_.length,V,X;for(F=0;F<z;F+=1)if(_[F].ty==="gr")L(_[F].it);else if(_[F].ty==="fl"||_[F].ty==="st")if(_[F].c.k&&_[F].c.k[0].i)for(X=_[F].c.k.length,V=0;V<X;V+=1)_[F].c.k[V].s&&(_[F].c.k[V].s[0]/=255,_[F].c.k[V].s[1]/=255,_[F].c.k[V].s[2]/=255,_[F].c.k[V].s[3]/=255),_[F].c.k[V].e&&(_[F].c.k[V].e[0]/=255,_[F].c.k[V].e[1]/=255,_[F].c.k[V].e[2]/=255,_[F].c.k[V].e[3]/=255);else _[F].c.k[0]/=255,_[F].c.k[1]/=255,_[F].c.k[2]/=255,_[F].c.k[3]/=255}function B(_){var F,z=_.length;for(F=0;F<z;F+=1)_[F].ty===4&&L(_[F].shapes)}return function(_){if(I(N,_.v)&&(B(_.layers),_.assets)){var F,z=_.assets.length;for(F=0;F<z;F+=1)_.assets[F].layers&&B(_.assets[F].layers)}}}(),U=function(){var N=[4,4,18];function L(_){var F,z=_.length,V,X;for(F=z-1;F>=0;F-=1)if(_[F].ty==="sh")if(_[F].ks.k.i)_[F].ks.k.c=_[F].closed;else for(X=_[F].ks.k.length,V=0;V<X;V+=1)_[F].ks.k[V].s&&(_[F].ks.k[V].s[0].c=_[F].closed),_[F].ks.k[V].e&&(_[F].ks.k[V].e[0].c=_[F].closed);else _[F].ty==="gr"&&L(_[F].it)}function B(_){var F,z,V=_.length,X,Y,Q,te;for(z=0;z<V;z+=1){if(F=_[z],F.hasMask){var re=F.masksProperties;for(Y=re.length,X=0;X<Y;X+=1)if(re[X].pt.k.i)re[X].pt.k.c=re[X].cl;else for(te=re[X].pt.k.length,Q=0;Q<te;Q+=1)re[X].pt.k[Q].s&&(re[X].pt.k[Q].s[0].c=re[X].cl),re[X].pt.k[Q].e&&(re[X].pt.k[Q].e[0].c=re[X].cl)}F.ty===4&&L(F.shapes)}}return function(_){if(I(N,_.v)&&(B(_.layers),_.assets)){var F,z=_.assets.length;for(F=0;F<z;F+=1)_.assets[F].layers&&B(_.assets[F].layers)}}}();function H(N){N.__complete||(W(N),D(N),O(N),j(N),U(N),M(N.layers,N.assets),C(N.chars,N.assets),N.__complete=!0)}function K(N){N.t.a.length===0&&"m"in N.t.p}var $={};return $.completeData=H,$.checkColors=W,$.checkChars=O,$.checkPathProperties=j,$.checkShapes=U,$.completeLayers=M,$}if(a.dataManager||(a.dataManager=E()),a.assetLoader||(a.assetLoader=function(){function M(S){var b=S.getResponseHeader("content-type");return b&&S.responseType==="json"&&b.indexOf("json")!==-1||S.response&&_typeof$5(S.response)==="object"?S.response:S.response&&typeof S.response=="string"?JSON.parse(S.response):S.responseText?JSON.parse(S.responseText):null}function C(S,b,A,R){var I,D=new XMLHttpRequest;try{D.responseType="json"}catch{}D.onreadystatechange=function(){if(D.readyState===4)if(D.status===200)I=M(D),A(I);else try{I=M(D),A(I)}catch(O){R&&R(O)}};try{D.open(["G","E","T"].join(""),S,!0)}catch{D.open(["G","E","T"].join(""),b+"/"+S,!0)}D.send()}return{load:C}}()),P.data.type==="loadAnimation")a.assetLoader.load(P.data.path,P.data.fullPath,function(M){a.dataManager.completeData(M),a.postMessage({id:P.data.id,payload:M,status:"success"})},function(){a.postMessage({id:P.data.id,status:"error"})});else if(P.data.type==="complete"){var T=P.data.animation;a.dataManager.completeData(T),a.postMessage({id:P.data.id,payload:T,status:"success"})}else P.data.type==="loadData"&&a.assetLoader.load(P.data.path,P.data.fullPath,function(M){a.postMessage({id:P.data.id,payload:M,status:"success"})},function(){a.postMessage({id:P.data.id,status:"error"})})}),i.onmessage=function(y){var P=y.data,E=P.id,T=t[E];t[E]=null,P.status==="success"?T.onComplete(P.payload):T.onError&&T.onError()})}function c(y,P){e+=1;var E="processId_"+e;return t[E]={onComplete:y,onError:P},E}function d(y,P,E){u();var T=c(P,E);i.postMessage({type:"loadAnimation",path:y,fullPath:window.location.origin+window.location.pathname,id:T})}function g(y,P,E){u();var T=c(P,E);i.postMessage({type:"loadData",path:y,fullPath:window.location.origin+window.location.pathname,id:T})}function x(y,P,E){u();var T=c(P,E);i.postMessage({type:"complete",animation:y,id:T})}return{loadAnimation:d,loadData:g,completeAnimation:x}}(),ImagePreloader=function(){var e=function(){var C=createTag("canvas");C.width=1,C.height=1;var S=C.getContext("2d");return S.fillStyle="rgba(0,0,0,0)",S.fillRect(0,0,1,1),C}();function t(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function i(C,S,b){var A="";if(C.e)A=C.p;else if(S){var R=C.p;R.indexOf("images/")!==-1&&(R=R.split("/")[1]),A=S+R}else A=b,A+=C.u?C.u:"",A+=C.p;return A}function s(C){var S=0,b=setInterval((function(){var A=C.getBBox();(A.width||S>500)&&(this._imageLoaded(),clearInterval(b)),S+=1}).bind(this),50)}function a(C){var S=i(C,this.assetsPath,this.path),b=createNS("image");isSafari?this.testImageLoaded(b):b.addEventListener("load",this._imageLoaded,!1),b.addEventListener("error",(function(){A.img=e,this._imageLoaded()}).bind(this),!1),b.setAttributeNS("http://www.w3.org/1999/xlink","href",S),this._elementHelper.append?this._elementHelper.append(b):this._elementHelper.appendChild(b);var A={img:b,assetData:C};return A}function o(C){var S=i(C,this.assetsPath,this.path),b=createTag("img");b.crossOrigin="anonymous",b.addEventListener("load",this._imageLoaded,!1),b.addEventListener("error",(function(){A.img=e,this._imageLoaded()}).bind(this),!1),b.src=S;var A={img:b,assetData:C};return A}function u(C){var S={assetData:C},b=i(C,this.assetsPath,this.path);return dataManager.loadData(b,(function(A){S.img=A,this._footageLoaded()}).bind(this),(function(){S.img={},this._footageLoaded()}).bind(this)),S}function c(C,S){this.imagesLoadedCb=S;var b,A=C.length;for(b=0;b<A;b+=1)C[b].layers||(!C[b].t||C[b].t==="seq"?(this.totalImages+=1,this.images.push(this._createImageData(C[b]))):C[b].t===3&&(this.totalFootages+=1,this.images.push(this.createFootageData(C[b]))))}function d(C){this.path=C||""}function g(C){this.assetsPath=C||""}function x(C){for(var S=0,b=this.images.length;S<b;){if(this.images[S].assetData===C)return this.images[S].img;S+=1}return null}function y(){this.imagesLoadedCb=null,this.images.length=0}function P(){return this.totalImages===this.loadedAssets}function E(){return this.totalFootages===this.loadedFootagesCount}function T(C,S){C==="svg"?(this._elementHelper=S,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}function M(){this._imageLoaded=t.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=s.bind(this),this.createFootageData=u.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return M.prototype={loadAssets:c,setAssetsPath:g,setPath:d,loadedImages:P,loadedFootages:E,destroy:y,getAsset:x,createImgData:o,createImageData:a,imageLoaded:t,footageLoaded:r,setCacheType:T},M}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(t,r){if(this._cbs[t])for(var i=this._cbs[t],s=0;s<i.length;s+=1)i[s](r)},addEventListener:function(t,r){return this._cbs[t]||(this._cbs[t]=[]),this._cbs[t].push(r),(function(){this.removeEventListener(t,r)}).bind(this)},removeEventListener:function(t,r){if(!r)this._cbs[t]=null;else if(this._cbs[t]){for(var i=0,s=this._cbs[t].length;i<s;)this._cbs[t][i]===r&&(this._cbs[t].splice(i,1),i-=1,s-=1),i+=1;this._cbs[t].length||(this._cbs[t]=null)}}};var markerParser=function(){function e(t){for(var r=t.split(`\r
`),i={},s,a=0,o=0;o<r.length;o+=1)s=r[o].split(":"),s.length===2&&(i[s[0]]=s[1].trim(),a+=1);if(a===0)throw new Error;return i}return function(t){for(var r=[],i=0;i<t.length;i+=1){var s=t[i],a={time:s.tm,duration:s.dr};try{a.payload=JSON.parse(t[i].cm)}catch{try{a.payload=e(t[i].cm)}catch{a.payload={name:t[i].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function e(t){this.compositions.push(t)}return function(){function t(r){for(var i=0,s=this.compositions.length;i<s;){if(this.compositions[i].data&&this.compositions[i].data.nm===r)return this.compositions[i].prepareFrame&&this.compositions[i].data.xt&&this.compositions[i].prepareFrame(this.currentFrame),this.compositions[i].compInterface;i+=1}return null}return t.compositions=[],t.currentFrame=0,t.registerComposition=e,t}}(),renderers={},registerRenderer=function(t,r){renderers[t]=r};function getRenderer(e){return renderers[e]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var e in renderers)if(renderers[e])return e;return""}function _typeof$4(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$4=function(r){return typeof r}:_typeof$4=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$4(e)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(e){(e.wrapper||e.container)&&(this.wrapper=e.wrapper||e.container);var t="svg";e.animType?t=e.animType:e.renderer&&(t=e.renderer);var r=getRenderer(t);this.renderer=new r(this,e.rendererSettings),this.imagePreloader.setCacheType(t,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=t,e.loop===""||e.loop===null||e.loop===void 0||e.loop===!0?this.loop=!0:e.loop===!1?this.loop=!1:this.loop=parseInt(e.loop,10),this.autoplay="autoplay"in e?e.autoplay:!0,this.name=e.name?e.name:"",this.autoloadSegments=Object.prototype.hasOwnProperty.call(e,"autoloadSegments")?e.autoloadSegments:!0,this.assetsPath=e.assetsPath,this.initialSegment=e.initialSegment,e.audioFactory&&this.audioController.setAudioFactory(e.audioFactory),e.animationData?this.setupAnimation(e.animationData):e.path&&(e.path.lastIndexOf("\\")!==-1?this.path=e.path.substr(0,e.path.lastIndexOf("\\")+1):this.path=e.path.substr(0,e.path.lastIndexOf("/")+1),this.fileName=e.path.substr(e.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(e.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(e){dataManager.completeAnimation(e,this.configAnimation)},AnimationItem.prototype.setData=function(e,t){t&&_typeof$4(t)!=="object"&&(t=JSON.parse(t));var r={wrapper:e,animationData:t},i=e.attributes;r.path=i.getNamedItem("data-animation-path")?i.getNamedItem("data-animation-path").value:i.getNamedItem("data-bm-path")?i.getNamedItem("data-bm-path").value:i.getNamedItem("bm-path")?i.getNamedItem("bm-path").value:"",r.animType=i.getNamedItem("data-anim-type")?i.getNamedItem("data-anim-type").value:i.getNamedItem("data-bm-type")?i.getNamedItem("data-bm-type").value:i.getNamedItem("bm-type")?i.getNamedItem("bm-type").value:i.getNamedItem("data-bm-renderer")?i.getNamedItem("data-bm-renderer").value:i.getNamedItem("bm-renderer")?i.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var s=i.getNamedItem("data-anim-loop")?i.getNamedItem("data-anim-loop").value:i.getNamedItem("data-bm-loop")?i.getNamedItem("data-bm-loop").value:i.getNamedItem("bm-loop")?i.getNamedItem("bm-loop").value:"";s==="false"?r.loop=!1:s==="true"?r.loop=!0:s!==""&&(r.loop=parseInt(s,10));var a=i.getNamedItem("data-anim-autoplay")?i.getNamedItem("data-anim-autoplay").value:i.getNamedItem("data-bm-autoplay")?i.getNamedItem("data-bm-autoplay").value:i.getNamedItem("bm-autoplay")?i.getNamedItem("bm-autoplay").value:!0;r.autoplay=a!=="false",r.name=i.getNamedItem("data-name")?i.getNamedItem("data-name").value:i.getNamedItem("data-bm-name")?i.getNamedItem("data-bm-name").value:i.getNamedItem("bm-name")?i.getNamedItem("bm-name").value:"";var o=i.getNamedItem("data-anim-prerender")?i.getNamedItem("data-anim-prerender").value:i.getNamedItem("data-bm-prerender")?i.getNamedItem("data-bm-prerender").value:i.getNamedItem("bm-prerender")?i.getNamedItem("bm-prerender").value:"";o==="false"&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(e){e.op>this.animationData.op&&(this.animationData.op=e.op,this.totalFrames=Math.floor(e.op-this.animationData.ip));var t=this.animationData.layers,r,i=t.length,s=e.layers,a,o=s.length;for(a=0;a<o;a+=1)for(r=0;r<i;){if(t[r].id===s[a].id){t[r]=s[a];break}r+=1}if((e.chars||e.fonts)&&(this.renderer.globalData.fontManager.addChars(e.chars),this.renderer.globalData.fontManager.addFonts(e.fonts,this.renderer.globalData.defs)),e.assets)for(i=e.assets.length,r=0;r<i;r+=1)this.animationData.assets.push(e.assets[r]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(e){this.animationData=e;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var e=this.animationData.segments;if(!e||e.length===0||!this.autoloadSegments){this.trigger("data_ready"),this.timeCompleted=this.totalFrames;return}var t=e.shift();this.timeCompleted=t.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),(function(){this.trigger("data_failed")}).bind(this))},AnimationItem.prototype.loadSegments=function(){var e=this.animationData.segments;e||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(e){if(this.renderer)try{this.animationData=e,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(e),e.assets||(e.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(e.assets),this.markers=markerParser(e.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(t){this.triggerConfigError(t)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=="canvas")&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.renderer.initItems(),setTimeout((function(){this.trigger("DOMLoaded")}).bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(e,t){var r=typeof e=="number"?e:void 0,i=typeof t=="number"?t:void 0;this.renderer.updateContainerSize(r,i)},AnimationItem.prototype.setSubframe=function(e){this.isSubframeEnabled=!!e},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!(this.isLoaded===!1||!this.renderer))try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(e){this.triggerRenderFrameError(e)}},AnimationItem.prototype.play=function(e){e&&this.name!==e||this.isPaused===!0&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(e){e&&this.name!==e||this.isPaused===!1&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(e){e&&this.name!==e||(this.isPaused===!0?this.play():this.pause())},AnimationItem.prototype.stop=function(e){e&&this.name!==e||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(e){for(var t,r=0;r<this.markers.length;r+=1)if(t=this.markers[r],t.payload&&t.payload.name===e)return t;return null},AnimationItem.prototype.goToAndStop=function(e,t,r){if(!(r&&this.name!==r)){var i=Number(e);if(isNaN(i)){var s=this.getMarkerData(e);s&&this.goToAndStop(s.time,!0)}else t?this.setCurrentRawFrameValue(e):this.setCurrentRawFrameValue(e*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(e,t,r){if(!(r&&this.name!==r)){var i=Number(e);if(isNaN(i)){var s=this.getMarkerData(e);s&&(s.duration?this.playSegments([s.time,s.time+s.duration],!0):this.goToAndStop(s.time,!0))}else this.goToAndStop(i,t,r);this.play()}},AnimationItem.prototype.advanceTime=function(e){if(!(this.isPaused===!0||this.isLoaded===!1)){var t=this.currentRawFrame+e*this.frameModifier,r=!1;t>=this.totalFrames-1&&this.frameModifier>0?!this.loop||this.playCount===this.loop?this.checkSegments(t>this.totalFrames?t%this.totalFrames:0)||(r=!0,t=this.totalFrames-1):t>=this.totalFrames?(this.playCount+=1,this.checkSegments(t%this.totalFrames)||(this.setCurrentRawFrameValue(t%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(t):t<0?this.checkSegments(t%this.totalFrames)||(this.loop&&!(this.playCount--<=0&&this.loop!==!0)?(this.setCurrentRawFrameValue(this.totalFrames+t%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0):(r=!0,t=0)):this.setCurrentRawFrameValue(t),r&&(this.setCurrentRawFrameValue(t),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(e,t){this.playCount=0,e[1]<e[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=e[0]-e[1],this.timeCompleted=this.totalFrames,this.firstFrame=e[1],this.setCurrentRawFrameValue(this.totalFrames-.001-t)):e[1]>e[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=e[1]-e[0],this.timeCompleted=this.totalFrames,this.firstFrame=e[0],this.setCurrentRawFrameValue(.001+t)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(e,t){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<e?r=e:this.currentRawFrame+this.firstFrame>t&&(r=t-e)),this.firstFrame=e,this.totalFrames=t-e,this.timeCompleted=this.totalFrames,r!==-1&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(e,t){if(t&&(this.segments.length=0),_typeof$4(e[0])==="object"){var r,i=e.length;for(r=0;r<i;r+=1)this.segments.push(e[r])}else this.segments.push(e);this.segments.length&&t&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(e){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),e&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(e){return this.segments.length?(this.adjustSegment(this.segments.shift(),e),!0):!1},AnimationItem.prototype.destroy=function(e){e&&this.name!==e||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(e){this.currentRawFrame=e,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(e){this.playSpeed=e,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(e){this.playDirection=e<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(e){this.loop=e},AnimationItem.prototype.setVolume=function(e,t){t&&this.name!==t||this.audioController.setVolume(e)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(e){e&&this.name!==e||this.audioController.mute()},AnimationItem.prototype.unmute=function(e){e&&this.name!==e||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(e){var t="";if(e.e)t=e.p;else if(this.assetsPath){var r=e.p;r.indexOf("images/")!==-1&&(r=r.split("/")[1]),t=this.assetsPath+r}else t=this.path,t+=e.u?e.u:"",t+=e.p;return t},AnimationItem.prototype.getAssetData=function(e){for(var t=0,r=this.assets.length;t<r;){if(e===this.assets[t].id)return this.assets[t];t+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(e){return e?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(e,t,r){try{var i=this.renderer.getElementByPath(e);i.updateDocumentData(t,r)}catch{}},AnimationItem.prototype.trigger=function(e){if(this._cbs&&this._cbs[e])switch(e){case"enterFrame":this.triggerEvent(e,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(e,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(e,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(e,new BMCompleteEvent(e,this.frameMult));break;case"segmentStart":this.triggerEvent(e,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(e,new BMDestroyEvent(e,this));break;default:this.triggerEvent(e)}e==="enterFrame"&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameMult)),e==="loopComplete"&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult)),e==="complete"&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(e,this.frameMult)),e==="segmentStart"&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames)),e==="destroy"&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(e,this))},AnimationItem.prototype.triggerRenderFrameError=function(e){var t=new BMRenderFrameErrorEvent(e,this.currentFrame);this.triggerEvent("error",t),this.onError&&this.onError.call(this,t)},AnimationItem.prototype.triggerConfigError=function(e){var t=new BMConfigErrorEvent(e,this.currentFrame);this.triggerEvent("error",t),this.onError&&this.onError.call(this,t)};var animationManager=function(){var e={},t=[],r=0,i=0,s=0,a=!0,o=!1;function u(L){for(var B=0,_=L.target;B<i;)t[B].animation===_&&(t.splice(B,1),B-=1,i-=1,_.isPaused||x()),B+=1}function c(L,B){if(!L)return null;for(var _=0;_<i;){if(t[_].elem===L&&t[_].elem!==null)return t[_].animation;_+=1}var F=new AnimationItem;return y(F,L),F.setData(L,B),F}function d(){var L,B=t.length,_=[];for(L=0;L<B;L+=1)_.push(t[L].animation);return _}function g(){s+=1,W()}function x(){s-=1}function y(L,B){L.addEventListener("destroy",u),L.addEventListener("_active",g),L.addEventListener("_idle",x),t.push({elem:B,animation:L}),i+=1}function P(L){var B=new AnimationItem;return y(B,null),B.setParams(L),B}function E(L,B){var _;for(_=0;_<i;_+=1)t[_].animation.setSpeed(L,B)}function T(L,B){var _;for(_=0;_<i;_+=1)t[_].animation.setDirection(L,B)}function M(L){var B;for(B=0;B<i;B+=1)t[B].animation.play(L)}function C(L){var B=L-r,_;for(_=0;_<i;_+=1)t[_].animation.advanceTime(B);r=L,s&&!o?window.requestAnimationFrame(C):a=!0}function S(L){r=L,window.requestAnimationFrame(C)}function b(L){var B;for(B=0;B<i;B+=1)t[B].animation.pause(L)}function A(L,B,_){var F;for(F=0;F<i;F+=1)t[F].animation.goToAndStop(L,B,_)}function R(L){var B;for(B=0;B<i;B+=1)t[B].animation.stop(L)}function I(L){var B;for(B=0;B<i;B+=1)t[B].animation.togglePause(L)}function D(L){var B;for(B=i-1;B>=0;B-=1)t[B].animation.destroy(L)}function O(L,B,_){var F=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),z,V=F.length;for(z=0;z<V;z+=1)_&&F[z].setAttribute("data-bm-type",_),c(F[z],L);if(B&&V===0){_||(_="svg");var X=document.getElementsByTagName("body")[0];X.innerText="";var Y=createTag("div");Y.style.width="100%",Y.style.height="100%",Y.setAttribute("data-bm-type",_),X.appendChild(Y),c(Y,L)}}function j(){var L;for(L=0;L<i;L+=1)t[L].animation.resize()}function W(){!o&&s&&a&&(window.requestAnimationFrame(S),a=!1)}function U(){o=!0}function H(){o=!1,W()}function K(L,B){var _;for(_=0;_<i;_+=1)t[_].animation.setVolume(L,B)}function $(L){var B;for(B=0;B<i;B+=1)t[B].animation.mute(L)}function N(L){var B;for(B=0;B<i;B+=1)t[B].animation.unmute(L)}return e.registerAnimation=c,e.loadAnimation=P,e.setSpeed=E,e.setDirection=T,e.play=M,e.pause=b,e.stop=R,e.togglePause=I,e.searchAnimations=O,e.resize=j,e.goToAndStop=A,e.destroy=D,e.freeze=U,e.unfreeze=H,e.setVolume=K,e.mute=$,e.unmute=N,e.getRegisteredAnimations=d,e}(),BezierFactory=function(){var e={};e.getBezierEasing=r;var t={};function r(S,b,A,R,I){var D=I||("bez_"+S+"_"+b+"_"+A+"_"+R).replace(/\./g,"p");if(t[D])return t[D];var O=new C([S,b,A,R]);return t[D]=O,O}var i=4,s=.001,a=1e-7,o=10,u=11,c=1/(u-1),d=typeof Float32Array=="function";function g(S,b){return 1-3*b+3*S}function x(S,b){return 3*b-6*S}function y(S){return 3*S}function P(S,b,A){return((g(b,A)*S+x(b,A))*S+y(b))*S}function E(S,b,A){return 3*g(b,A)*S*S+2*x(b,A)*S+y(b)}function T(S,b,A,R,I){var D,O,j=0;do O=b+(A-b)/2,D=P(O,R,I)-S,D>0?A=O:b=O;while(Math.abs(D)>a&&++j<o);return O}function M(S,b,A,R){for(var I=0;I<i;++I){var D=E(b,A,R);if(D===0)return b;var O=P(b,A,R)-S;b-=O/D}return b}function C(S){this._p=S,this._mSampleValues=d?new Float32Array(u):new Array(u),this._precomputed=!1,this.get=this.get.bind(this)}return C.prototype={get:function(b){var A=this._p[0],R=this._p[1],I=this._p[2],D=this._p[3];return this._precomputed||this._precompute(),A===R&&I===D?b:b===0?0:b===1?1:P(this._getTForX(b),R,D)},_precompute:function(){var b=this._p[0],A=this._p[1],R=this._p[2],I=this._p[3];this._precomputed=!0,(b!==A||R!==I)&&this._calcSampleValues()},_calcSampleValues:function(){for(var b=this._p[0],A=this._p[2],R=0;R<u;++R)this._mSampleValues[R]=P(R*c,b,A)},_getTForX:function(b){for(var A=this._p[0],R=this._p[2],I=this._mSampleValues,D=0,O=1,j=u-1;O!==j&&I[O]<=b;++O)D+=c;--O;var W=(b-I[O])/(I[O+1]-I[O]),U=D+W*c,H=E(U,A,R);return H>=s?M(b,U,A,R):H===0?U:T(b,D,D+c,A,R)}},e}(),pooling=function(){function e(t){return t.concat(createSizedArray(t.length))}return{double:e}}(),poolFactory=function(){return function(e,t,r){var i=0,s=e,a=createSizedArray(s),o={newElement:u,release:c};function u(){var d;return i?(i-=1,d=a[i]):d=t(),d}function c(d){i===s&&(a=pooling.double(a),s*=2),r&&r(d),a[i]=d,i+=1}return o}}(),bezierLengthPool=function(){function e(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}return poolFactory(8,e)}(),segmentsLengthPool=function(){function e(){return{lengths:[],totalLength:0}}function t(r){var i,s=r.lengths.length;for(i=0;i<s;i+=1)bezierLengthPool.release(r.lengths[i]);r.lengths.length=0}return poolFactory(8,e,t)}();function bezFunction(){var e=Math;function t(y,P,E,T,M,C){var S=y*T+P*M+E*C-M*T-C*y-E*P;return S>-.001&&S<.001}function r(y,P,E,T,M,C,S,b,A){if(E===0&&C===0&&A===0)return t(y,P,T,M,S,b);var R=e.sqrt(e.pow(T-y,2)+e.pow(M-P,2)+e.pow(C-E,2)),I=e.sqrt(e.pow(S-y,2)+e.pow(b-P,2)+e.pow(A-E,2)),D=e.sqrt(e.pow(S-T,2)+e.pow(b-M,2)+e.pow(A-C,2)),O;return R>I?R>D?O=R-I-D:O=D-I-R:D>I?O=D-I-R:O=I-R-D,O>-1e-4&&O<1e-4}var i=function(){return function(y,P,E,T){var M=getDefaultCurveSegments(),C,S,b,A,R,I=0,D,O=[],j=[],W=bezierLengthPool.newElement();for(b=E.length,C=0;C<M;C+=1){for(R=C/(M-1),D=0,S=0;S<b;S+=1)A=bmPow(1-R,3)*y[S]+3*bmPow(1-R,2)*R*E[S]+3*(1-R)*bmPow(R,2)*T[S]+bmPow(R,3)*P[S],O[S]=A,j[S]!==null&&(D+=bmPow(O[S]-j[S],2)),j[S]=O[S];D&&(D=bmSqrt(D),I+=D),W.percents[C]=R,W.lengths[C]=I}return W.addedLength=I,W}}();function s(y){var P=segmentsLengthPool.newElement(),E=y.c,T=y.v,M=y.o,C=y.i,S,b=y._length,A=P.lengths,R=0;for(S=0;S<b-1;S+=1)A[S]=i(T[S],T[S+1],M[S],C[S+1]),R+=A[S].addedLength;return E&&b&&(A[S]=i(T[S],T[0],M[S],C[0]),R+=A[S].addedLength),P.totalLength=R,P}function a(y){this.segmentLength=0,this.points=new Array(y)}function o(y,P){this.partialLength=y,this.point=P}var u=function(){var y={};return function(P,E,T,M){var C=(P[0]+"_"+P[1]+"_"+E[0]+"_"+E[1]+"_"+T[0]+"_"+T[1]+"_"+M[0]+"_"+M[1]).replace(/\./g,"p");if(!y[C]){var S=getDefaultCurveSegments(),b,A,R,I,D,O=0,j,W,U=null;P.length===2&&(P[0]!==E[0]||P[1]!==E[1])&&t(P[0],P[1],E[0],E[1],P[0]+T[0],P[1]+T[1])&&t(P[0],P[1],E[0],E[1],E[0]+M[0],E[1]+M[1])&&(S=2);var H=new a(S);for(R=T.length,b=0;b<S;b+=1){for(W=createSizedArray(R),D=b/(S-1),j=0,A=0;A<R;A+=1)I=bmPow(1-D,3)*P[A]+3*bmPow(1-D,2)*D*(P[A]+T[A])+3*(1-D)*bmPow(D,2)*(E[A]+M[A])+bmPow(D,3)*E[A],W[A]=I,U!==null&&(j+=bmPow(W[A]-U[A],2));j=bmSqrt(j),O+=j,H.points[b]=new o(j,W),U=W}H.segmentLength=O,y[C]=H}return y[C]}}();function c(y,P){var E=P.percents,T=P.lengths,M=E.length,C=bmFloor((M-1)*y),S=y*P.addedLength,b=0;if(C===M-1||C===0||S===T[C])return E[C];for(var A=T[C]>S?-1:1,R=!0;R;)if(T[C]<=S&&T[C+1]>S?(b=(S-T[C])/(T[C+1]-T[C]),R=!1):C+=A,C<0||C>=M-1){if(C===M-1)return E[C];R=!1}return E[C]+(E[C+1]-E[C])*b}function d(y,P,E,T,M,C){var S=c(M,C),b=1-S,A=e.round((b*b*b*y[0]+(S*b*b+b*S*b+b*b*S)*E[0]+(S*S*b+b*S*S+S*b*S)*T[0]+S*S*S*P[0])*1e3)/1e3,R=e.round((b*b*b*y[1]+(S*b*b+b*S*b+b*b*S)*E[1]+(S*S*b+b*S*S+S*b*S)*T[1]+S*S*S*P[1])*1e3)/1e3;return[A,R]}var g=createTypedArray("float32",8);function x(y,P,E,T,M,C,S){M<0?M=0:M>1&&(M=1);var b=c(M,S);C=C>1?1:C;var A=c(C,S),R,I=y.length,D=1-b,O=1-A,j=D*D*D,W=b*D*D*3,U=b*b*D*3,H=b*b*b,K=D*D*O,$=b*D*O+D*b*O+D*D*A,N=b*b*O+D*b*A+b*D*A,L=b*b*A,B=D*O*O,_=b*O*O+D*A*O+D*O*A,F=b*A*O+D*A*A+b*O*A,z=b*A*A,V=O*O*O,X=A*O*O+O*A*O+O*O*A,Y=A*A*O+O*A*A+A*O*A,Q=A*A*A;for(R=0;R<I;R+=1)g[R*4]=e.round((j*y[R]+W*E[R]+U*T[R]+H*P[R])*1e3)/1e3,g[R*4+1]=e.round((K*y[R]+$*E[R]+N*T[R]+L*P[R])*1e3)/1e3,g[R*4+2]=e.round((B*y[R]+_*E[R]+F*T[R]+z*P[R])*1e3)/1e3,g[R*4+3]=e.round((V*y[R]+X*E[R]+Y*T[R]+Q*P[R])*1e3)/1e3;return g}return{getSegmentsLength:s,getNewSegment:x,getPointInSegment:d,buildBezierData:u,pointOnLine2D:t,pointOnLine3D:r}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(e,t){var r=this.offsetTime,i;this.propType==="multidimensional"&&(i=createTypedArray("float32",this.pv.length));for(var s=t.lastIndex,a=s,o=this.keyframes.length-1,u=!0,c,d,g;u;){if(c=this.keyframes[a],d=this.keyframes[a+1],a===o-1&&e>=d.t-r){c.h&&(c=d),s=0;break}if(d.t-r>e){s=a;break}a<o-1?a+=1:(s=0,u=!1)}g=this.keyframesMetadata[a]||{};var x,y,P,E,T,M,C=d.t-r,S=c.t-r,b;if(c.to){g.bezierData||(g.bezierData=bez.buildBezierData(c.s,d.s||c.e,c.to,c.ti));var A=g.bezierData;if(e>=C||e<S){var R=e>=C?A.points.length-1:0;for(y=A.points[R].point.length,x=0;x<y;x+=1)i[x]=A.points[R].point[x]}else{g.__fnct?M=g.__fnct:(M=BezierFactory.getBezierEasing(c.o.x,c.o.y,c.i.x,c.i.y,c.n).get,g.__fnct=M),P=M((e-S)/(C-S));var I=A.segmentLength*P,D,O=t.lastFrame<e&&t._lastKeyframeIndex===a?t._lastAddedLength:0;for(T=t.lastFrame<e&&t._lastKeyframeIndex===a?t._lastPoint:0,u=!0,E=A.points.length;u;){if(O+=A.points[T].partialLength,I===0||P===0||T===A.points.length-1){for(y=A.points[T].point.length,x=0;x<y;x+=1)i[x]=A.points[T].point[x];break}else if(I>=O&&I<O+A.points[T+1].partialLength){for(D=(I-O)/A.points[T+1].partialLength,y=A.points[T].point.length,x=0;x<y;x+=1)i[x]=A.points[T].point[x]+(A.points[T+1].point[x]-A.points[T].point[x])*D;break}T<E-1?T+=1:u=!1}t._lastPoint=T,t._lastAddedLength=O-A.points[T].partialLength,t._lastKeyframeIndex=a}}else{var j,W,U,H,K;if(o=c.s.length,b=d.s||c.e,this.sh&&c.h!==1)if(e>=C)i[0]=b[0],i[1]=b[1],i[2]=b[2];else if(e<=S)i[0]=c.s[0],i[1]=c.s[1],i[2]=c.s[2];else{var $=createQuaternion(c.s),N=createQuaternion(b),L=(e-S)/(C-S);quaternionToEuler(i,slerp($,N,L))}else for(a=0;a<o;a+=1)c.h!==1&&(e>=C?P=1:e<S?P=0:(c.o.x.constructor===Array?(g.__fnct||(g.__fnct=[]),g.__fnct[a]?M=g.__fnct[a]:(j=c.o.x[a]===void 0?c.o.x[0]:c.o.x[a],W=c.o.y[a]===void 0?c.o.y[0]:c.o.y[a],U=c.i.x[a]===void 0?c.i.x[0]:c.i.x[a],H=c.i.y[a]===void 0?c.i.y[0]:c.i.y[a],M=BezierFactory.getBezierEasing(j,W,U,H).get,g.__fnct[a]=M)):g.__fnct?M=g.__fnct:(j=c.o.x,W=c.o.y,U=c.i.x,H=c.i.y,M=BezierFactory.getBezierEasing(j,W,U,H).get,c.keyframeMetadata=M),P=M((e-S)/(C-S)))),b=d.s||c.e,K=c.h===1?c.s[a]:c.s[a]+(b[a]-c.s[a])*P,this.propType==="multidimensional"?i[a]=K:i=K}return t.lastIndex=s,i}function slerp(e,t,r){var i=[],s=e[0],a=e[1],o=e[2],u=e[3],c=t[0],d=t[1],g=t[2],x=t[3],y,P,E,T,M;return P=s*c+a*d+o*g+u*x,P<0&&(P=-P,c=-c,d=-d,g=-g,x=-x),1-P>1e-6?(y=Math.acos(P),E=Math.sin(y),T=Math.sin((1-r)*y)/E,M=Math.sin(r*y)/E):(T=1-r,M=r),i[0]=T*s+M*c,i[1]=T*a+M*d,i[2]=T*o+M*g,i[3]=T*u+M*x,i}function quaternionToEuler(e,t){var r=t[0],i=t[1],s=t[2],a=t[3],o=Math.atan2(2*i*a-2*r*s,1-2*i*i-2*s*s),u=Math.asin(2*r*i+2*s*a),c=Math.atan2(2*r*a-2*i*s,1-2*r*r-2*s*s);e[0]=o/degToRads,e[1]=u/degToRads,e[2]=c/degToRads}function createQuaternion(e){var t=e[0]*degToRads,r=e[1]*degToRads,i=e[2]*degToRads,s=Math.cos(t/2),a=Math.cos(r/2),o=Math.cos(i/2),u=Math.sin(t/2),c=Math.sin(r/2),d=Math.sin(i/2),g=s*a*o-u*c*d,x=u*c*o+s*a*d,y=u*a*o+s*c*d,P=s*c*o-u*a*d;return[x,y,P,g]}function getValueAtCurrentTime(){var e=this.comp.renderedFrame-this.offsetTime,t=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(e===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&e>=r||this._caching.lastFrame<t&&e<t))){this._caching.lastFrame>=e&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(e,this._caching);this.pv=i}return this._caching.lastFrame=e,this.pv}function setVValue(e){var t;if(this.propType==="unidimensional")t=e*this.mult,mathAbs(this.v-t)>1e-5&&(this.v=t,this._mdf=!0);else for(var r=0,i=this.v.length;r<i;)t=e[r]*this.mult,mathAbs(this.v[r]-t)>1e-5&&(this.v[r]=t,this._mdf=!0),r+=1}function processEffectsSequence(){if(!(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)){if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=this._isFirstFrame;var e,t=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(e=0;e<t;e+=1)r=this.effectsSequence[e](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(e){this.effectsSequence.push(e),this.container.addDynamicProperty(this)}function ValueProperty(e,t,r,i){this.propType="unidimensional",this.mult=r||1,this.data=t,this.v=r?t.k*r:t.k,this.pv=t.k,this._mdf=!1,this.elem=e,this.container=i,this.comp=e.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(e,t,r,i){this.propType="multidimensional",this.mult=r||1,this.data=t,this._mdf=!1,this.elem=e,this.container=i,this.comp=e.comp,this.k=!1,this.kf=!1,this.frameId=-1;var s,a=t.k.length;for(this.v=createTypedArray("float32",a),this.pv=createTypedArray("float32",a),this.vel=createTypedArray("float32",a),s=0;s<a;s+=1)this.v[s]=t.k[s]*this.mult,this.pv[s]=t.k[s];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(e,t,r,i){this.propType="unidimensional",this.keyframes=t.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=t,this.mult=r||1,this.elem=e,this.container=i,this.comp=e.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(e,t,r,i){this.propType="multidimensional";var s,a=t.k.length,o,u,c,d;for(s=0;s<a-1;s+=1)t.k[s].to&&t.k[s].s&&t.k[s+1]&&t.k[s+1].s&&(o=t.k[s].s,u=t.k[s+1].s,c=t.k[s].to,d=t.k[s].ti,(o.length===2&&!(o[0]===u[0]&&o[1]===u[1])&&bez.pointOnLine2D(o[0],o[1],u[0],u[1],o[0]+c[0],o[1]+c[1])&&bez.pointOnLine2D(o[0],o[1],u[0],u[1],u[0]+d[0],u[1]+d[1])||o.length===3&&!(o[0]===u[0]&&o[1]===u[1]&&o[2]===u[2])&&bez.pointOnLine3D(o[0],o[1],o[2],u[0],u[1],u[2],o[0]+c[0],o[1]+c[1],o[2]+c[2])&&bez.pointOnLine3D(o[0],o[1],o[2],u[0],u[1],u[2],u[0]+d[0],u[1]+d[1],u[2]+d[2]))&&(t.k[s].to=null,t.k[s].ti=null),o[0]===u[0]&&o[1]===u[1]&&c[0]===0&&c[1]===0&&d[0]===0&&d[1]===0&&(o.length===2||o[2]===u[2]&&c[2]===0&&d[2]===0)&&(t.k[s].to=null,t.k[s].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=t,this.keyframes=t.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=e,this.container=i,this.comp=e.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var g=t.k[0].s.length;for(this.v=createTypedArray("float32",g),this.pv=createTypedArray("float32",g),s=0;s<g;s+=1)this.v[s]=initFrame,this.pv[s]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",g)},this.addEffect=addEffect}var PropertyFactory=function(){function e(r,i,s,a,o){i.sid&&(i=r.globalData.slotManager.getProp(i));var u;if(!i.k.length)u=new ValueProperty(r,i,a,o);else if(typeof i.k[0]=="number")u=new MultiDimensionalProperty(r,i,a,o);else switch(s){case 0:u=new KeyframedValueProperty(r,i,a,o);break;case 1:u=new KeyframedMultidimensionalProperty(r,i,a,o);break}return u.effectsSequence.length&&o.addDynamicProperty(u),u}var t={getProp:e};return t}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(t){this.dynamicProperties.indexOf(t)===-1&&(this.dynamicProperties.push(t),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var t,r=this.dynamicProperties.length;for(t=0;t<r;t+=1)this.dynamicProperties[t].getValue(),this.dynamicProperties[t]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(t){this.container=t,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=function(){function e(){return createTypedArray("float32",2)}return poolFactory(8,e)}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(e,t){this.c=e,this.setLength(t);for(var r=0;r<t;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(e){for(;this._maxLength<e;)this.doubleArrayLength();this._length=e},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(e,t,r,i,s){var a;switch(this._length=Math.max(this._length,i+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[];break}(!a[i]||a[i]&&!s)&&(a[i]=pointPool.newElement()),a[i][0]=e,a[i][1]=t},ShapePath.prototype.setTripleAt=function(e,t,r,i,s,a,o,u){this.setXYAt(e,t,"v",o,u),this.setXYAt(r,i,"o",o,u),this.setXYAt(s,a,"i",o,u)},ShapePath.prototype.reverse=function(){var e=new ShapePath;e.setPathData(this.c,this._length);var t=this.v,r=this.o,i=this.i,s=0;this.c&&(e.setTripleAt(t[0][0],t[0][1],i[0][0],i[0][1],r[0][0],r[0][1],0,!1),s=1);var a=this._length-1,o=this._length,u;for(u=s;u<o;u+=1)e.setTripleAt(t[a][0],t[a][1],i[a][0],i[a][1],r[a][0],r[a][1],u,!1),a-=1;return e},ShapePath.prototype.length=function(){return this._length};var shapePool=function(){function e(){return new ShapePath}function t(s){var a=s._length,o;for(o=0;o<a;o+=1)pointPool.release(s.v[o]),pointPool.release(s.i[o]),pointPool.release(s.o[o]),s.v[o]=null,s.i[o]=null,s.o[o]=null;s._length=0,s.c=!1}function r(s){var a=i.newElement(),o,u=s._length===void 0?s.v.length:s._length;for(a.setLength(u),a.c=s.c,o=0;o<u;o+=1)a.setTripleAt(s.v[o][0],s.v[o][1],s.o[o][0],s.o[o][1],s.i[o][0],s.i[o][1],o);return a}var i=poolFactory(4,e,t);return i.clone=r,i}();function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(e){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=e,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var e;for(e=0;e<this._length;e+=1)shapePool.release(this.shapes[e]);this._length=0};var shapeCollectionPool=function(){var e={newShapeCollection:s,release:a},t=0,r=4,i=createSizedArray(r);function s(){var o;return t?(t-=1,o=i[t]):o=new ShapeCollection,o}function a(o){var u,c=o._length;for(u=0;u<c;u+=1)shapePool.release(o.shapes[u]);o._length=0,t===r&&(i=pooling.double(i),r*=2),i[t]=o,t+=1}return e}(),ShapePropertyFactory=function(){var e=-999999;function t(C,S,b){var A=b.lastIndex,R,I,D,O,j,W,U,H,K,$=this.keyframes;if(C<$[0].t-this.offsetTime)R=$[0].s[0],D=!0,A=0;else if(C>=$[$.length-1].t-this.offsetTime)R=$[$.length-1].s?$[$.length-1].s[0]:$[$.length-2].e[0],D=!0;else{for(var N=A,L=$.length-1,B=!0,_,F,z;B&&(_=$[N],F=$[N+1],!(F.t-this.offsetTime>C));)N<L-1?N+=1:B=!1;if(z=this.keyframesMetadata[N]||{},D=_.h===1,A=N,!D){if(C>=F.t-this.offsetTime)H=1;else if(C<_.t-this.offsetTime)H=0;else{var V;z.__fnct?V=z.__fnct:(V=BezierFactory.getBezierEasing(_.o.x,_.o.y,_.i.x,_.i.y).get,z.__fnct=V),H=V((C-(_.t-this.offsetTime))/(F.t-this.offsetTime-(_.t-this.offsetTime)))}I=F.s?F.s[0]:_.e[0]}R=_.s[0]}for(W=S._length,U=R.i[0].length,b.lastIndex=A,O=0;O<W;O+=1)for(j=0;j<U;j+=1)K=D?R.i[O][j]:R.i[O][j]+(I.i[O][j]-R.i[O][j])*H,S.i[O][j]=K,K=D?R.o[O][j]:R.o[O][j]+(I.o[O][j]-R.o[O][j])*H,S.o[O][j]=K,K=D?R.v[O][j]:R.v[O][j]+(I.v[O][j]-R.v[O][j])*H,S.v[O][j]=K}function r(){var C=this.comp.renderedFrame-this.offsetTime,S=this.keyframes[0].t-this.offsetTime,b=this.keyframes[this.keyframes.length-1].t-this.offsetTime,A=this._caching.lastFrame;return A!==e&&(A<S&&C<S||A>b&&C>b)||(this._caching.lastIndex=A<C?this._caching.lastIndex:0,this.interpolateShape(C,this.pv,this._caching)),this._caching.lastFrame=C,this.pv}function i(){this.paths=this.localShapeCollection}function s(C,S){if(C._length!==S._length||C.c!==S.c)return!1;var b,A=C._length;for(b=0;b<A;b+=1)if(C.v[b][0]!==S.v[b][0]||C.v[b][1]!==S.v[b][1]||C.o[b][0]!==S.o[b][0]||C.o[b][1]!==S.o[b][1]||C.i[b][0]!==S.i[b][0]||C.i[b][1]!==S.i[b][1])return!1;return!0}function a(C){s(this.v,C)||(this.v=shapePool.clone(C),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function o(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length){this._mdf=!1;return}if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=!1;var C;this.kf?C=this.pv:this.data.ks?C=this.data.ks.k:C=this.data.pt.k;var S,b=this.effectsSequence.length;for(S=0;S<b;S+=1)C=this.effectsSequence[S](C);this.setVValue(C),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function u(C,S,b){this.propType="shape",this.comp=C.comp,this.container=C,this.elem=C,this.data=S,this.k=!1,this.kf=!1,this._mdf=!1;var A=b===3?S.pt.k:S.ks.k;this.v=shapePool.clone(A),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function c(C){this.effectsSequence.push(C),this.container.addDynamicProperty(this)}u.prototype.interpolateShape=t,u.prototype.getValue=o,u.prototype.setVValue=a,u.prototype.addEffect=c;function d(C,S,b){this.propType="shape",this.comp=C.comp,this.elem=C,this.container=C,this.offsetTime=C.data.st,this.keyframes=b===3?S.pt.k:S.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var A=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,A),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=e,this.reset=i,this._caching={lastFrame:e,lastIndex:0},this.effectsSequence=[r.bind(this)]}d.prototype.getValue=o,d.prototype.interpolateShape=t,d.prototype.setVValue=a,d.prototype.addEffect=c;var g=function(){var C=roundCorner;function S(b,A){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=A.d,this.elem=b,this.comp=b.comp,this.frameId=-1,this.initDynamicPropertyContainer(b),this.p=PropertyFactory.getProp(b,A.p,1,0,this),this.s=PropertyFactory.getProp(b,A.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return S.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var A=this.p.v[0],R=this.p.v[1],I=this.s.v[0]/2,D=this.s.v[1]/2,O=this.d!==3,j=this.v;j.v[0][0]=A,j.v[0][1]=R-D,j.v[1][0]=O?A+I:A-I,j.v[1][1]=R,j.v[2][0]=A,j.v[2][1]=R+D,j.v[3][0]=O?A-I:A+I,j.v[3][1]=R,j.i[0][0]=O?A-I*C:A+I*C,j.i[0][1]=R-D,j.i[1][0]=O?A+I:A-I,j.i[1][1]=R-D*C,j.i[2][0]=O?A+I*C:A-I*C,j.i[2][1]=R+D,j.i[3][0]=O?A-I:A+I,j.i[3][1]=R+D*C,j.o[0][0]=O?A+I*C:A-I*C,j.o[0][1]=R-D,j.o[1][0]=O?A+I:A-I,j.o[1][1]=R+D*C,j.o[2][0]=O?A-I*C:A+I*C,j.o[2][1]=R+D,j.o[3][0]=O?A-I:A+I,j.o[3][1]=R-D*C}},extendPrototype([DynamicPropertyContainer],S),S}(),x=function(){function C(S,b){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=S,this.comp=S.comp,this.data=b,this.frameId=-1,this.d=b.d,this.initDynamicPropertyContainer(S),b.sy===1?(this.ir=PropertyFactory.getProp(S,b.ir,0,0,this),this.is=PropertyFactory.getProp(S,b.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(S,b.pt,0,0,this),this.p=PropertyFactory.getProp(S,b.p,1,0,this),this.r=PropertyFactory.getProp(S,b.r,0,degToRads,this),this.or=PropertyFactory.getProp(S,b.or,0,0,this),this.os=PropertyFactory.getProp(S,b.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return C.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var b=Math.floor(this.pt.v)*2,A=Math.PI*2/b,R=!0,I=this.or.v,D=this.ir.v,O=this.os.v,j=this.is.v,W=2*Math.PI*I/(b*2),U=2*Math.PI*D/(b*2),H,K,$,N,L=-Math.PI/2;L+=this.r.v;var B=this.data.d===3?-1:1;for(this.v._length=0,H=0;H<b;H+=1){K=R?I:D,$=R?O:j,N=R?W:U;var _=K*Math.cos(L),F=K*Math.sin(L),z=_===0&&F===0?0:F/Math.sqrt(_*_+F*F),V=_===0&&F===0?0:-_/Math.sqrt(_*_+F*F);_+=+this.p.v[0],F+=+this.p.v[1],this.v.setTripleAt(_,F,_-z*N*$*B,F-V*N*$*B,_+z*N*$*B,F+V*N*$*B,H,!0),R=!R,L+=A*B}},convertPolygonToPath:function(){var b=Math.floor(this.pt.v),A=Math.PI*2/b,R=this.or.v,I=this.os.v,D=2*Math.PI*R/(b*4),O,j=-Math.PI*.5,W=this.data.d===3?-1:1;for(j+=this.r.v,this.v._length=0,O=0;O<b;O+=1){var U=R*Math.cos(j),H=R*Math.sin(j),K=U===0&&H===0?0:H/Math.sqrt(U*U+H*H),$=U===0&&H===0?0:-U/Math.sqrt(U*U+H*H);U+=+this.p.v[0],H+=+this.p.v[1],this.v.setTripleAt(U,H,U-K*D*I*W,H-$*D*I*W,U+K*D*I*W,H+$*D*I*W,O,!0),j+=A*W}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],C),C}(),y=function(){function C(S,b){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=S,this.comp=S.comp,this.frameId=-1,this.d=b.d,this.initDynamicPropertyContainer(S),this.p=PropertyFactory.getProp(S,b.p,1,0,this),this.s=PropertyFactory.getProp(S,b.s,1,0,this),this.r=PropertyFactory.getProp(S,b.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return C.prototype={convertRectToPath:function(){var b=this.p.v[0],A=this.p.v[1],R=this.s.v[0]/2,I=this.s.v[1]/2,D=bmMin(R,I,this.r.v),O=D*(1-roundCorner);this.v._length=0,this.d===2||this.d===1?(this.v.setTripleAt(b+R,A-I+D,b+R,A-I+D,b+R,A-I+O,0,!0),this.v.setTripleAt(b+R,A+I-D,b+R,A+I-O,b+R,A+I-D,1,!0),D!==0?(this.v.setTripleAt(b+R-D,A+I,b+R-D,A+I,b+R-O,A+I,2,!0),this.v.setTripleAt(b-R+D,A+I,b-R+O,A+I,b-R+D,A+I,3,!0),this.v.setTripleAt(b-R,A+I-D,b-R,A+I-D,b-R,A+I-O,4,!0),this.v.setTripleAt(b-R,A-I+D,b-R,A-I+O,b-R,A-I+D,5,!0),this.v.setTripleAt(b-R+D,A-I,b-R+D,A-I,b-R+O,A-I,6,!0),this.v.setTripleAt(b+R-D,A-I,b+R-O,A-I,b+R-D,A-I,7,!0)):(this.v.setTripleAt(b-R,A+I,b-R+O,A+I,b-R,A+I,2),this.v.setTripleAt(b-R,A-I,b-R,A-I+O,b-R,A-I,3))):(this.v.setTripleAt(b+R,A-I+D,b+R,A-I+O,b+R,A-I+D,0,!0),D!==0?(this.v.setTripleAt(b+R-D,A-I,b+R-D,A-I,b+R-O,A-I,1,!0),this.v.setTripleAt(b-R+D,A-I,b-R+O,A-I,b-R+D,A-I,2,!0),this.v.setTripleAt(b-R,A-I+D,b-R,A-I+D,b-R,A-I+O,3,!0),this.v.setTripleAt(b-R,A+I-D,b-R,A+I-O,b-R,A+I-D,4,!0),this.v.setTripleAt(b-R+D,A+I,b-R+D,A+I,b-R+O,A+I,5,!0),this.v.setTripleAt(b+R-D,A+I,b+R-O,A+I,b+R-D,A+I,6,!0),this.v.setTripleAt(b+R,A+I-D,b+R,A+I-D,b+R,A+I-O,7,!0)):(this.v.setTripleAt(b-R,A-I,b-R+O,A-I,b-R,A-I,1,!0),this.v.setTripleAt(b-R,A+I,b-R,A+I-O,b-R,A+I,2,!0),this.v.setTripleAt(b+R,A+I,b+R-O,A+I,b+R,A+I,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],C),C}();function P(C,S,b){var A;if(b===3||b===4){var R=b===3?S.pt:S.ks,I=R.k;I.length?A=new d(C,S,b):A=new u(C,S,b)}else b===5?A=new y(C,S):b===6?A=new g(C,S):b===7&&(A=new x(C,S));return A.k&&C.addDynamicProperty(A),A}function E(){return u}function T(){return d}var M={};return M.getShapeProp=P,M.getConstructorFunction=E,M.getKeyframedConstructorFunction=T,M}();/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */var Matrix=function(){var e=Math.cos,t=Math.sin,r=Math.tan,i=Math.round;function s(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(_){if(_===0)return this;var F=e(_),z=t(_);return this._t(F,-z,0,0,z,F,0,0,0,0,1,0,0,0,0,1)}function o(_){if(_===0)return this;var F=e(_),z=t(_);return this._t(1,0,0,0,0,F,-z,0,0,z,F,0,0,0,0,1)}function u(_){if(_===0)return this;var F=e(_),z=t(_);return this._t(F,0,z,0,0,1,0,0,-z,0,F,0,0,0,0,1)}function c(_){if(_===0)return this;var F=e(_),z=t(_);return this._t(F,-z,0,0,z,F,0,0,0,0,1,0,0,0,0,1)}function d(_,F){return this._t(1,F,_,1,0,0)}function g(_,F){return this.shear(r(_),r(F))}function x(_,F){var z=e(F),V=t(F);return this._t(z,V,0,0,-V,z,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(_),1,0,0,0,0,1,0,0,0,0,1)._t(z,-V,0,0,V,z,0,0,0,0,1,0,0,0,0,1)}function y(_,F,z){return!z&&z!==0&&(z=1),_===1&&F===1&&z===1?this:this._t(_,0,0,0,0,F,0,0,0,0,z,0,0,0,0,1)}function P(_,F,z,V,X,Y,Q,te,re,le,he,pe,ce,ae,ue,se){return this.props[0]=_,this.props[1]=F,this.props[2]=z,this.props[3]=V,this.props[4]=X,this.props[5]=Y,this.props[6]=Q,this.props[7]=te,this.props[8]=re,this.props[9]=le,this.props[10]=he,this.props[11]=pe,this.props[12]=ce,this.props[13]=ae,this.props[14]=ue,this.props[15]=se,this}function E(_,F,z){return z=z||0,_!==0||F!==0||z!==0?this._t(1,0,0,0,0,1,0,0,0,0,1,0,_,F,z,1):this}function T(_,F,z,V,X,Y,Q,te,re,le,he,pe,ce,ae,ue,se){var Z=this.props;if(_===1&&F===0&&z===0&&V===0&&X===0&&Y===1&&Q===0&&te===0&&re===0&&le===0&&he===1&&pe===0)return Z[12]=Z[12]*_+Z[15]*ce,Z[13]=Z[13]*Y+Z[15]*ae,Z[14]=Z[14]*he+Z[15]*ue,Z[15]*=se,this._identityCalculated=!1,this;var ne=Z[0],Ce=Z[1],ye=Z[2],Me=Z[3],Fe=Z[4],Le=Z[5],ve=Z[6],je=Z[7],Ne=Z[8],Te=Z[9],$e=Z[10],we=Z[11],Qe=Z[12],Ot=Z[13],Vt=Z[14],Bt=Z[15];return Z[0]=ne*_+Ce*X+ye*re+Me*ce,Z[1]=ne*F+Ce*Y+ye*le+Me*ae,Z[2]=ne*z+Ce*Q+ye*he+Me*ue,Z[3]=ne*V+Ce*te+ye*pe+Me*se,Z[4]=Fe*_+Le*X+ve*re+je*ce,Z[5]=Fe*F+Le*Y+ve*le+je*ae,Z[6]=Fe*z+Le*Q+ve*he+je*ue,Z[7]=Fe*V+Le*te+ve*pe+je*se,Z[8]=Ne*_+Te*X+$e*re+we*ce,Z[9]=Ne*F+Te*Y+$e*le+we*ae,Z[10]=Ne*z+Te*Q+$e*he+we*ue,Z[11]=Ne*V+Te*te+$e*pe+we*se,Z[12]=Qe*_+Ot*X+Vt*re+Bt*ce,Z[13]=Qe*F+Ot*Y+Vt*le+Bt*ae,Z[14]=Qe*z+Ot*Q+Vt*he+Bt*ue,Z[15]=Qe*V+Ot*te+Vt*pe+Bt*se,this._identityCalculated=!1,this}function M(_){var F=_.props;return this.transform(F[0],F[1],F[2],F[3],F[4],F[5],F[6],F[7],F[8],F[9],F[10],F[11],F[12],F[13],F[14],F[15])}function C(){return this._identityCalculated||(this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1),this._identityCalculated=!0),this._identity}function S(_){for(var F=0;F<16;){if(_.props[F]!==this.props[F])return!1;F+=1}return!0}function b(_){var F;for(F=0;F<16;F+=1)_.props[F]=this.props[F];return _}function A(_){var F;for(F=0;F<16;F+=1)this.props[F]=_[F]}function R(_,F,z){return{x:_*this.props[0]+F*this.props[4]+z*this.props[8]+this.props[12],y:_*this.props[1]+F*this.props[5]+z*this.props[9]+this.props[13],z:_*this.props[2]+F*this.props[6]+z*this.props[10]+this.props[14]}}function I(_,F,z){return _*this.props[0]+F*this.props[4]+z*this.props[8]+this.props[12]}function D(_,F,z){return _*this.props[1]+F*this.props[5]+z*this.props[9]+this.props[13]}function O(_,F,z){return _*this.props[2]+F*this.props[6]+z*this.props[10]+this.props[14]}function j(){var _=this.props[0]*this.props[5]-this.props[1]*this.props[4],F=this.props[5]/_,z=-this.props[1]/_,V=-this.props[4]/_,X=this.props[0]/_,Y=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/_,Q=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/_,te=new Matrix;return te.props[0]=F,te.props[1]=z,te.props[4]=V,te.props[5]=X,te.props[12]=Y,te.props[13]=Q,te}function W(_){var F=this.getInverseMatrix();return F.applyToPointArray(_[0],_[1],_[2]||0)}function U(_){var F,z=_.length,V=[];for(F=0;F<z;F+=1)V[F]=W(_[F]);return V}function H(_,F,z){var V=createTypedArray("float32",6);if(this.isIdentity())V[0]=_[0],V[1]=_[1],V[2]=F[0],V[3]=F[1],V[4]=z[0],V[5]=z[1];else{var X=this.props[0],Y=this.props[1],Q=this.props[4],te=this.props[5],re=this.props[12],le=this.props[13];V[0]=_[0]*X+_[1]*Q+re,V[1]=_[0]*Y+_[1]*te+le,V[2]=F[0]*X+F[1]*Q+re,V[3]=F[0]*Y+F[1]*te+le,V[4]=z[0]*X+z[1]*Q+re,V[5]=z[0]*Y+z[1]*te+le}return V}function K(_,F,z){var V;return this.isIdentity()?V=[_,F,z]:V=[_*this.props[0]+F*this.props[4]+z*this.props[8]+this.props[12],_*this.props[1]+F*this.props[5]+z*this.props[9]+this.props[13],_*this.props[2]+F*this.props[6]+z*this.props[10]+this.props[14]],V}function $(_,F){if(this.isIdentity())return _+","+F;var z=this.props;return Math.round((_*z[0]+F*z[4]+z[12])*100)/100+","+Math.round((_*z[1]+F*z[5]+z[13])*100)/100}function N(){for(var _=0,F=this.props,z="matrix3d(",V=1e4;_<16;)z+=i(F[_]*V)/V,z+=_===15?")":",",_+=1;return z}function L(_){var F=1e4;return _<1e-6&&_>0||_>-1e-6&&_<0?i(_*F)/F:_}function B(){var _=this.props,F=L(_[0]),z=L(_[1]),V=L(_[4]),X=L(_[5]),Y=L(_[12]),Q=L(_[13]);return"matrix("+F+","+z+","+V+","+X+","+Y+","+Q+")"}return function(){this.reset=s,this.rotate=a,this.rotateX=o,this.rotateY=u,this.rotateZ=c,this.skew=g,this.skewFromAxis=x,this.shear=d,this.scale=y,this.setTransform=P,this.translate=E,this.transform=T,this.multiply=M,this.applyToPoint=R,this.applyToX=I,this.applyToY=D,this.applyToZ=O,this.applyToPointArray=K,this.applyToTriplePoints=H,this.applyToPointStringified=$,this.toCSS=N,this.to2dCSS=B,this.clone=b,this.cloneFromProps=A,this.equals=S,this.inversePoints=U,this.inversePoint=W,this.getInverseMatrix=j,this._t=this.transform,this.isIdentity=C,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$3=function(r){return typeof r}:_typeof$3=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$3(e)}var lottie={};function setLocation(e){setLocationHref(e)}function searchAnimations(){animationManager.searchAnimations()}function setSubframeRendering(e){setSubframeEnabled(e)}function setPrefix(e){setIdPrefix(e)}function loadAnimation(e){return animationManager.loadAnimation(e)}function setQuality(e){if(typeof e=="string")switch(e){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10);break}else!isNaN(e)&&e>1&&setDefaultCurveSegments(e)}function inBrowser(){return typeof navigator<"u"}function installPlugin(e,t){e==="expressions"&&setExpressionsPlugin(t)}function getFactory(e){switch(e){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";function checkReady(){document.readyState==="complete"&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(e){for(var t=queryString.split("&"),r=0;r<t.length;r+=1){var i=t[r].split("=");if(decodeURIComponent(i[0])==e)return decodeURIComponent(i[1])}return null}var queryString="";{var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{_typeof$3(exports)!=="object"&&(window.bodymovin=lottie)}catch(e){}var ShapeModifiers=function(){var e={},t={};e.registerModifier=r,e.getModifier=i;function r(s,a){t[s]||(t[s]=a)}function i(s,a,o){return new t[s](a,o)}return e}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(e){if(!this.closed){e.sh.container.addDynamicProperty(e.sh);var t={shape:e.sh,data:e,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(t),this.addShapeToModifier(t),this._isAnimated&&e.setAsAnimated()}},ShapeModifier.prototype.init=function(e,t){this.shapes=[],this.elem=e,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,t),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(e,t){this.s=PropertyFactory.getProp(e,t.s,0,.01,this),this.e=PropertyFactory.getProp(e,t.e,0,.01,this),this.o=PropertyFactory.getProp(e,t.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=t.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(e){e.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(e,t,r,i,s){var a=[];t<=1?a.push({s:e,e:t}):e>=1?a.push({s:e-1,e:t-1}):(a.push({s:e,e:1}),a.push({s:0,e:t-1}));var o=[],u,c=a.length,d;for(u=0;u<c;u+=1)if(d=a[u],!(d.e*s<i||d.s*s>i+r)){var g,x;d.s*s<=i?g=0:g=(d.s*s-i)/r,d.e*s>=i+r?x=1:x=(d.e*s-i)/r,o.push([g,x])}return o.length||o.push([0,0]),o},TrimModifier.prototype.releasePathsData=function(e){var t,r=e.length;for(t=0;t<r;t+=1)segmentsLengthPool.release(e[t]);return e.length=0,e},TrimModifier.prototype.processShapes=function(e){var t,r;if(this._mdf||e){var i=this.o.v%360/360;if(i<0&&(i+=1),this.s.v>1?t=1+i:this.s.v<0?t=0+i:t=this.s.v+i,this.e.v>1?r=1+i:this.e.v<0?r=0+i:r=this.e.v+i,t>r){var s=t;t=r,r=s}t=Math.round(t*1e4)*1e-4,r=Math.round(r*1e4)*1e-4,this.sValue=t,this.eValue=r}else t=this.sValue,r=this.eValue;var a,o,u=this.shapes.length,c,d,g,x,y,P=0;if(r===t)for(o=0;o<u;o+=1)this.shapes[o].localShapeCollection.releaseShapes(),this.shapes[o].shape._mdf=!0,this.shapes[o].shape.paths=this.shapes[o].localShapeCollection,this._mdf&&(this.shapes[o].pathsData.length=0);else if(r===1&&t===0||r===0&&t===1){if(this._mdf)for(o=0;o<u;o+=1)this.shapes[o].pathsData.length=0,this.shapes[o].shape._mdf=!0}else{var E=[],T,M;for(o=0;o<u;o+=1)if(T=this.shapes[o],!T.shape._mdf&&!this._mdf&&!e&&this.m!==2)T.shape.paths=T.localShapeCollection;else{if(a=T.shape.paths,d=a._length,y=0,!T.shape._mdf&&T.pathsData.length)y=T.totalShapeLength;else{for(g=this.releasePathsData(T.pathsData),c=0;c<d;c+=1)x=bez.getSegmentsLength(a.shapes[c]),g.push(x),y+=x.totalLength;T.totalShapeLength=y,T.pathsData=g}P+=y,T.shape._mdf=!0}var C=t,S=r,b=0,A;for(o=u-1;o>=0;o-=1)if(T=this.shapes[o],T.shape._mdf){for(M=T.localShapeCollection,M.releaseShapes(),this.m===2&&u>1?(A=this.calculateShapeEdges(t,r,T.totalShapeLength,b,P),b+=T.totalShapeLength):A=[[C,S]],d=A.length,c=0;c<d;c+=1){C=A[c][0],S=A[c][1],E.length=0,S<=1?E.push({s:T.totalShapeLength*C,e:T.totalShapeLength*S}):C>=1?E.push({s:T.totalShapeLength*(C-1),e:T.totalShapeLength*(S-1)}):(E.push({s:T.totalShapeLength*C,e:T.totalShapeLength}),E.push({s:0,e:T.totalShapeLength*(S-1)}));var R=this.addShapes(T,E[0]);if(E[0].s!==E[0].e){if(E.length>1){var I=T.shape.paths.shapes[T.shape.paths._length-1];if(I.c){var D=R.pop();this.addPaths(R,M),R=this.addShapes(T,E[1],D)}else this.addPaths(R,M),R=this.addShapes(T,E[1])}this.addPaths(R,M)}}T.shape.paths=M}}},TrimModifier.prototype.addPaths=function(e,t){var r,i=e.length;for(r=0;r<i;r+=1)t.addShape(e[r])},TrimModifier.prototype.addSegment=function(e,t,r,i,s,a,o){s.setXYAt(t[0],t[1],"o",a),s.setXYAt(r[0],r[1],"i",a+1),o&&s.setXYAt(e[0],e[1],"v",a),s.setXYAt(i[0],i[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(e,t,r,i){t.setXYAt(e[1],e[5],"o",r),t.setXYAt(e[2],e[6],"i",r+1),i&&t.setXYAt(e[0],e[4],"v",r),t.setXYAt(e[3],e[7],"v",r+1)},TrimModifier.prototype.addShapes=function(e,t,r){var i=e.pathsData,s=e.shape.paths.shapes,a,o=e.shape.paths._length,u,c,d=0,g,x,y,P,E=[],T,M=!0;for(r?(x=r._length,T=r._length):(r=shapePool.newElement(),x=0,T=0),E.push(r),a=0;a<o;a+=1){for(y=i[a].lengths,r.c=s[a].c,c=s[a].c?y.length:y.length+1,u=1;u<c;u+=1)if(g=y[u-1],d+g.addedLength<t.s)d+=g.addedLength,r.c=!1;else if(d>t.e){r.c=!1;break}else t.s<=d&&t.e>=d+g.addedLength?(this.addSegment(s[a].v[u-1],s[a].o[u-1],s[a].i[u],s[a].v[u],r,x,M),M=!1):(P=bez.getNewSegment(s[a].v[u-1],s[a].v[u],s[a].o[u-1],s[a].i[u],(t.s-d)/g.addedLength,(t.e-d)/g.addedLength,y[u-1]),this.addSegmentFromArray(P,r,x,M),M=!1,r.c=!1),d+=g.addedLength,x+=1;if(s[a].c&&y.length){if(g=y[u-1],d<=t.e){var C=y[u-1].addedLength;t.s<=d&&t.e>=d+C?(this.addSegment(s[a].v[u-1],s[a].o[u-1],s[a].i[0],s[a].v[0],r,x,M),M=!1):(P=bez.getNewSegment(s[a].v[u-1],s[a].v[0],s[a].o[u-1],s[a].i[0],(t.s-d)/C,(t.e-d)/C,y[u-1]),this.addSegmentFromArray(P,r,x,M),M=!1,r.c=!1)}else r.c=!1;d+=g.addedLength,x+=1}if(r._length&&(r.setXYAt(r.v[T][0],r.v[T][1],"i",T),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),d>t.e)break;a<o-1&&(r=shapePool.newElement(),M=!0,E.push(r),x=0)}return E};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,t.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(e,t){var r=t/100,i=[0,0],s=e._length,a=0;for(a=0;a<s;a+=1)i[0]+=e.v[a][0],i[1]+=e.v[a][1];i[0]/=s,i[1]/=s;var o=shapePool.newElement();o.c=e.c;var u,c,d,g,x,y;for(a=0;a<s;a+=1)u=e.v[a][0]+(i[0]-e.v[a][0])*r,c=e.v[a][1]+(i[1]-e.v[a][1])*r,d=e.o[a][0]+(i[0]-e.o[a][0])*-r,g=e.o[a][1]+(i[1]-e.o[a][1])*-r,x=e.i[a][0]+(i[0]-e.i[a][0])*-r,y=e.i[a][1]+(i[1]-e.i[a][1])*-r,o.setTripleAt(u,c,d,g,x,y,a);return o},PuckerAndBloatModifier.prototype.processShapes=function(e){var t,r,i=this.shapes.length,s,a,o=this.amount.v;if(o!==0){var u,c;for(r=0;r<i;r+=1){if(u=this.shapes[r],c=u.localShapeCollection,!(!u.shape._mdf&&!this._mdf&&!e))for(c.releaseShapes(),u.shape._mdf=!0,t=u.shape.paths.shapes,a=u.shape.paths._length,s=0;s<a;s+=1)c.addShape(this.processPath(t[s],o));u.shape.paths=u.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var e=[0,0];function t(c){var d=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||d,this.a&&c.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&c.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&c.skewFromAxis(-this.sk.v,this.sa.v),this.r?c.rotate(-this.r.v):c.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?c.translate(this.px.v,this.py.v,-this.pz.v):c.translate(this.px.v,this.py.v,0):c.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function r(c){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||c){var d;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var g,x;if(d=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(g=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/d,0),x=this.p.getValueAtTime(this.p.keyframes[0].t/d,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(g=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/d,0),x=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/d,0)):(g=this.p.pv,x=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/d,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){g=[],x=[];var y=this.px,P=this.py;y._caching.lastFrame+y.offsetTime<=y.keyframes[0].t?(g[0]=y.getValueAtTime((y.keyframes[0].t+.01)/d,0),g[1]=P.getValueAtTime((P.keyframes[0].t+.01)/d,0),x[0]=y.getValueAtTime(y.keyframes[0].t/d,0),x[1]=P.getValueAtTime(P.keyframes[0].t/d,0)):y._caching.lastFrame+y.offsetTime>=y.keyframes[y.keyframes.length-1].t?(g[0]=y.getValueAtTime(y.keyframes[y.keyframes.length-1].t/d,0),g[1]=P.getValueAtTime(P.keyframes[P.keyframes.length-1].t/d,0),x[0]=y.getValueAtTime((y.keyframes[y.keyframes.length-1].t-.01)/d,0),x[1]=P.getValueAtTime((P.keyframes[P.keyframes.length-1].t-.01)/d,0)):(g=[y.pv,P.pv],x[0]=y.getValueAtTime((y._caching.lastFrame+y.offsetTime-.01)/d,y.offsetTime),x[1]=P.getValueAtTime((P._caching.lastFrame+P.offsetTime-.01)/d,P.offsetTime))}else x=e,g=x;this.v.rotate(-Math.atan2(g[1]-x[1],g[0]-x[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function i(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length)this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1;else return;if(!this.s.effectsSequence.length)this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2;else return;if(this.sk)if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length)this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3;else return;this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length&&(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}function s(){}function a(c){this._addDynamicProperty(c),this.elem.addDynamicProperty(c),this._isDirty=!0}function o(c,d,g){if(this.elem=c,this.frameId=-1,this.propType="transform",this.data=d,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(g||c),d.p&&d.p.s?(this.px=PropertyFactory.getProp(c,d.p.x,0,0,this),this.py=PropertyFactory.getProp(c,d.p.y,0,0,this),d.p.z&&(this.pz=PropertyFactory.getProp(c,d.p.z,0,0,this))):this.p=PropertyFactory.getProp(c,d.p||{k:[0,0,0]},1,0,this),d.rx){if(this.rx=PropertyFactory.getProp(c,d.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(c,d.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(c,d.rz,0,degToRads,this),d.or.k[0].ti){var x,y=d.or.k.length;for(x=0;x<y;x+=1)d.or.k[x].to=null,d.or.k[x].ti=null}this.or=PropertyFactory.getProp(c,d.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(c,d.r||{k:0},0,degToRads,this);d.sk&&(this.sk=PropertyFactory.getProp(c,d.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(c,d.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(c,d.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(c,d.s||{k:[100,100,100]},1,.01,this),d.o?this.o=PropertyFactory.getProp(c,d.o,0,.01,c):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}o.prototype={applyToMatrix:t,getValue:r,precalculateMatrix:i,autoOrient:s},extendPrototype([DynamicPropertyContainer],o),o.prototype.addDynamicProperty=a,o.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function u(c,d,g){return new o(c,d,g)}return{getTransformProperty:u}}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(e,t.c,0,null,this),this.o=PropertyFactory.getProp(e,t.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(e,t.tr,this),this.so=PropertyFactory.getProp(e,t.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(e,t.tr.eo,0,.01,this),this.data=t,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(e,t,r,i,s,a){var o=a?-1:1,u=i.s.v[0]+(1-i.s.v[0])*(1-s),c=i.s.v[1]+(1-i.s.v[1])*(1-s);e.translate(i.p.v[0]*o*s,i.p.v[1]*o*s,i.p.v[2]),t.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),t.rotate(-i.r.v*o*s),t.translate(i.a.v[0],i.a.v[1],i.a.v[2]),r.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),r.scale(a?1/u:u,a?1/c:c),r.translate(i.a.v[0],i.a.v[1],i.a.v[2])},RepeaterModifier.prototype.init=function(e,t,r,i){for(this.elem=e,this.arr=t,this.pos=r,this.elemsData=i,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,t[r]);r>0;)r-=1,this._elements.unshift(t[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(e){var t,r=e.length;for(t=0;t<r;t+=1)e[t]._processed=!1,e[t].ty==="gr"&&this.resetElements(e[t].it)},RepeaterModifier.prototype.cloneElements=function(e){var t=JSON.parse(JSON.stringify(e));return this.resetElements(t),t},RepeaterModifier.prototype.changeGroupRender=function(e,t){var r,i=e.length;for(r=0;r<i;r+=1)e[r]._render=t,e[r].ty==="gr"&&this.changeGroupRender(e[r].it,t)},RepeaterModifier.prototype.processShapes=function(e){var t,r,i,s,a,o=!1;if(this._mdf||e){var u=Math.ceil(this.c.v);if(this._groups.length<u){for(;this._groups.length<u;){var c={it:this.cloneElements(this._elements),ty:"gr"};c.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,c),this._groups.splice(0,0,c),this._currentCopies+=1}this.elem.reloadShapes(),o=!0}a=0;var d;for(i=0;i<=this._groups.length-1;i+=1){if(d=a<u,this._groups[i]._render=d,this.changeGroupRender(this._groups[i].it,d),!d){var g=this.elemsData[i].it,x=g[g.length-1];x.transform.op.v!==0?(x.transform.op._mdf=!0,x.transform.op.v=0):x.transform.op._mdf=!1}a+=1}this._currentCopies=u;var y=this.o.v,P=y%1,E=y>0?Math.floor(y):Math.ceil(y),T=this.pMatrix.props,M=this.rMatrix.props,C=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var S=0;if(y>0){for(;S<E;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),S+=1;P&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,P,!1),S+=P)}else if(y<0){for(;S>E;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),S-=1;P&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-P,!0),S-=P)}i=this.data.m===1?0:this._currentCopies-1,s=this.data.m===1?1:-1,a=this._currentCopies;for(var b,A;a;){if(t=this.elemsData[i].it,r=t[t.length-1].transform.mProps.v.props,A=r.length,t[t.length-1].transform.mProps._mdf=!0,t[t.length-1].transform.op._mdf=!0,t[t.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1)),S!==0){for((i!==0&&s===1||i!==this._currentCopies-1&&s===-1)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(M[0],M[1],M[2],M[3],M[4],M[5],M[6],M[7],M[8],M[9],M[10],M[11],M[12],M[13],M[14],M[15]),this.matrix.transform(C[0],C[1],C[2],C[3],C[4],C[5],C[6],C[7],C[8],C[9],C[10],C[11],C[12],C[13],C[14],C[15]),this.matrix.transform(T[0],T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13],T[14],T[15]),b=0;b<A;b+=1)r[b]=this.matrix.props[b];this.matrix.reset()}else for(this.matrix.reset(),b=0;b<A;b+=1)r[b]=this.matrix.props[b];S+=1,a-=1,i+=s}}else for(a=this._currentCopies,i=0,s=1;a;)t=this.elemsData[i].it,r=t[t.length-1].transform.mProps.v.props,t[t.length-1].transform.mProps._mdf=!1,t[t.length-1].transform.op._mdf=!1,a-=1,i+=s;return o},RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(e,t.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(e,t){var r=shapePool.newElement();r.c=e.c;var i,s=e._length,a,o,u,c,d,g,x=0,y,P,E,T,M,C;for(i=0;i<s;i+=1)a=e.v[i],u=e.o[i],o=e.i[i],a[0]===u[0]&&a[1]===u[1]&&a[0]===o[0]&&a[1]===o[1]?(i===0||i===s-1)&&!e.c?(r.setTripleAt(a[0],a[1],u[0],u[1],o[0],o[1],x),x+=1):(i===0?c=e.v[s-1]:c=e.v[i-1],d=Math.sqrt(Math.pow(a[0]-c[0],2)+Math.pow(a[1]-c[1],2)),g=d?Math.min(d/2,t)/d:0,M=a[0]+(c[0]-a[0])*g,y=M,C=a[1]-(a[1]-c[1])*g,P=C,E=y-(y-a[0])*roundCorner,T=P-(P-a[1])*roundCorner,r.setTripleAt(y,P,E,T,M,C,x),x+=1,i===s-1?c=e.v[0]:c=e.v[i+1],d=Math.sqrt(Math.pow(a[0]-c[0],2)+Math.pow(a[1]-c[1],2)),g=d?Math.min(d/2,t)/d:0,E=a[0]+(c[0]-a[0])*g,y=E,T=a[1]+(c[1]-a[1])*g,P=T,M=y-(y-a[0])*roundCorner,C=P-(P-a[1])*roundCorner,r.setTripleAt(y,P,E,T,M,C,x),x+=1):(r.setTripleAt(e.v[i][0],e.v[i][1],e.o[i][0],e.o[i][1],e.i[i][0],e.i[i][1],x),x+=1);return r},RoundCornersModifier.prototype.processShapes=function(e){var t,r,i=this.shapes.length,s,a,o=this.rd.v;if(o!==0){var u,c;for(r=0;r<i;r+=1){if(u=this.shapes[r],c=u.localShapeCollection,!(!u.shape._mdf&&!this._mdf&&!e))for(c.releaseShapes(),u.shape._mdf=!0,t=u.shape.paths.shapes,a=u.shape.paths._length,s=0;s<a;s+=1)c.addShape(this.processPath(t[s],o));u.shape.paths=u.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function floatEqual(e,t){return Math.abs(e-t)*1e5<=Math.min(Math.abs(e),Math.abs(t))}function floatZero(e){return Math.abs(e)<=1e-5}function lerp(e,t,r){return e*(1-r)+t*r}function lerpPoint(e,t,r){return[lerp(e[0],t[0],r),lerp(e[1],t[1],r)]}function quadRoots(e,t,r){if(e===0)return[];var i=t*t-4*e*r;if(i<0)return[];var s=-t/(2*e);if(i===0)return[s];var a=Math.sqrt(i)/(2*e);return[s-a,s+a]}function polynomialCoefficients(e,t,r,i){return[-e+3*t-3*r+i,3*e-6*t+3*r,-3*e+3*t,e]}function singlePoint(e){return new PolynomialBezier(e,e,e,e,!1)}function PolynomialBezier(e,t,r,i,s){s&&pointEqual(e,t)&&(t=lerpPoint(e,i,1/3)),s&&pointEqual(r,i)&&(r=lerpPoint(e,i,2/3));var a=polynomialCoefficients(e[0],t[0],r[0],i[0]),o=polynomialCoefficients(e[1],t[1],r[1],i[1]);this.a=[a[0],o[0]],this.b=[a[1],o[1]],this.c=[a[2],o[2]],this.d=[a[3],o[3]],this.points=[e,t,r,i]}PolynomialBezier.prototype.point=function(e){return[((this.a[0]*e+this.b[0])*e+this.c[0])*e+this.d[0],((this.a[1]*e+this.b[1])*e+this.c[1])*e+this.d[1]]},PolynomialBezier.prototype.derivative=function(e){return[(3*e*this.a[0]+2*this.b[0])*e+this.c[0],(3*e*this.a[1]+2*this.b[1])*e+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(e){var t=this.derivative(e);return Math.atan2(t[1],t[0])},PolynomialBezier.prototype.normalAngle=function(e){var t=this.derivative(e);return Math.atan2(t[0],t[1])},PolynomialBezier.prototype.inflectionPoints=function(){var e=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(e))return[];var t=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/e,r=t*t-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/e;if(r<0)return[];var i=Math.sqrt(r);return floatZero(i)?i>0&&i<1?[t]:[]:[t-i,t+i].filter(function(s){return s>0&&s<1})},PolynomialBezier.prototype.split=function(e){if(e<=0)return[singlePoint(this.points[0]),this];if(e>=1)return[this,singlePoint(this.points[this.points.length-1])];var t=lerpPoint(this.points[0],this.points[1],e),r=lerpPoint(this.points[1],this.points[2],e),i=lerpPoint(this.points[2],this.points[3],e),s=lerpPoint(t,r,e),a=lerpPoint(r,i,e),o=lerpPoint(s,a,e);return[new PolynomialBezier(this.points[0],t,s,o,!0),new PolynomialBezier(o,a,i,this.points[3],!0)]};function extrema(e,t){var r=e.points[0][t],i=e.points[e.points.length-1][t];if(r>i){var s=i;i=r,r=s}for(var a=quadRoots(3*e.a[t],2*e.b[t],e.c[t]),o=0;o<a.length;o+=1)if(a[o]>0&&a[o]<1){var u=e.point(a[o])[t];u<r?r=u:u>i&&(i=u)}return{min:r,max:i}}PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var e=this.bounds();return{left:e.x.min,right:e.x.max,top:e.y.min,bottom:e.y.max,width:e.x.max-e.x.min,height:e.y.max-e.y.min,cx:(e.x.max+e.x.min)/2,cy:(e.y.max+e.y.min)/2}};function intersectData(e,t,r){var i=e.boundingBox();return{cx:i.cx,cy:i.cy,width:i.width,height:i.height,bez:e,t:(t+r)/2,t1:t,t2:r}}function splitData(e){var t=e.bez.split(.5);return[intersectData(t[0],e.t1,e.t),intersectData(t[1],e.t,e.t2)]}function boxIntersect(e,t){return Math.abs(e.cx-t.cx)*2<e.width+t.width&&Math.abs(e.cy-t.cy)*2<e.height+t.height}function intersectsImpl(e,t,r,i,s,a){if(boxIntersect(e,t)){if(r>=a||e.width<=i&&e.height<=i&&t.width<=i&&t.height<=i){s.push([e.t,t.t]);return}var o=splitData(e),u=splitData(t);intersectsImpl(o[0],u[0],r+1,i,s,a),intersectsImpl(o[0],u[1],r+1,i,s,a),intersectsImpl(o[1],u[0],r+1,i,s,a),intersectsImpl(o[1],u[1],r+1,i,s,a)}}PolynomialBezier.prototype.intersections=function(e,t,r){t===void 0&&(t=2),r===void 0&&(r=7);var i=[];return intersectsImpl(intersectData(this,0,1),intersectData(e,0,1),0,t,i,r),i},PolynomialBezier.shapeSegment=function(e,t){var r=(t+1)%e.length();return new PolynomialBezier(e.v[t],e.o[t],e.i[r],e.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(e,t){var r=(t+1)%e.length();return new PolynomialBezier(e.v[r],e.i[r],e.o[t],e.v[t],!0)};function crossProduct(e,t){return[e[1]*t[2]-e[2]*t[1],e[2]*t[0]-e[0]*t[2],e[0]*t[1]-e[1]*t[0]]}function lineIntersection(e,t,r,i){var s=[e[0],e[1],1],a=[t[0],t[1],1],o=[r[0],r[1],1],u=[i[0],i[1],1],c=crossProduct(crossProduct(s,a),crossProduct(o,u));return floatZero(c[2])?null:[c[0]/c[2],c[1]/c[2]]}function polarOffset(e,t,r){return[e[0]+Math.cos(t)*r,e[1]-Math.sin(t)*r]}function pointDistance(e,t){return Math.hypot(e[0]-t[0],e[1]-t[1])}function pointEqual(e,t){return floatEqual(e[0],t[0])&&floatEqual(e[1],t[1])}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(e,t.s,0,null,this),this.frequency=PropertyFactory.getProp(e,t.r,0,null,this),this.pointsType=PropertyFactory.getProp(e,t.pt,0,null,this),this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0};function setPoint(e,t,r,i,s,a,o){var u=r-Math.PI/2,c=r+Math.PI/2,d=t[0]+Math.cos(r)*i*s,g=t[1]-Math.sin(r)*i*s;e.setTripleAt(d,g,d+Math.cos(u)*a,g-Math.sin(u)*a,d+Math.cos(c)*o,g-Math.sin(c)*o,e.length())}function getPerpendicularVector(e,t){var r=[t[0]-e[0],t[1]-e[1]],i=-Math.PI*.5,s=[Math.cos(i)*r[0]-Math.sin(i)*r[1],Math.sin(i)*r[0]+Math.cos(i)*r[1]];return s}function getProjectingAngle(e,t){var r=t===0?e.length()-1:t-1,i=(t+1)%e.length(),s=e.v[r],a=e.v[i],o=getPerpendicularVector(s,a);return Math.atan2(0,1)-Math.atan2(o[1],o[0])}function zigZagCorner(e,t,r,i,s,a,o){var u=getProjectingAngle(t,r),c=t.v[r%t._length],d=t.v[r===0?t._length-1:r-1],g=t.v[(r+1)%t._length],x=a===2?Math.sqrt(Math.pow(c[0]-d[0],2)+Math.pow(c[1]-d[1],2)):0,y=a===2?Math.sqrt(Math.pow(c[0]-g[0],2)+Math.pow(c[1]-g[1],2)):0;setPoint(e,t.v[r%t._length],u,o,i,y/((s+1)*2),x/((s+1)*2))}function zigZagSegment(e,t,r,i,s,a){for(var o=0;o<i;o+=1){var u=(o+1)/(i+1),c=s===2?Math.sqrt(Math.pow(t.points[3][0]-t.points[0][0],2)+Math.pow(t.points[3][1]-t.points[0][1],2)):0,d=t.normalAngle(u),g=t.point(u);setPoint(e,g,d,a,r,c/((i+1)*2),c/((i+1)*2)),a=-a}return a}ZigZagModifier.prototype.processPath=function(e,t,r,i){var s=e._length,a=shapePool.newElement();if(a.c=e.c,e.c||(s-=1),s===0)return a;var o=-1,u=PolynomialBezier.shapeSegment(e,0);zigZagCorner(a,e,0,t,r,i,o);for(var c=0;c<s;c+=1)o=zigZagSegment(a,u,t,r,i,-o),c===s-1&&!e.c?u=null:u=PolynomialBezier.shapeSegment(e,(c+1)%s),zigZagCorner(a,e,c+1,t,r,i,o);return a},ZigZagModifier.prototype.processShapes=function(e){var t,r,i=this.shapes.length,s,a,o=this.amplitude.v,u=Math.max(0,Math.round(this.frequency.v)),c=this.pointsType.v;if(o!==0){var d,g;for(r=0;r<i;r+=1){if(d=this.shapes[r],g=d.localShapeCollection,!(!d.shape._mdf&&!this._mdf&&!e))for(g.releaseShapes(),d.shape._mdf=!0,t=d.shape.paths.shapes,a=d.shape.paths._length,s=0;s<a;s+=1)g.addShape(this.processPath(t[s],o,u,c));d.shape.paths=d.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function linearOffset(e,t,r){var i=Math.atan2(t[0]-e[0],t[1]-e[1]);return[polarOffset(e,i,r),polarOffset(t,i,r)]}function offsetSegment(e,t){var r,i,s,a,o,u,c;c=linearOffset(e.points[0],e.points[1],t),r=c[0],i=c[1],c=linearOffset(e.points[1],e.points[2],t),s=c[0],a=c[1],c=linearOffset(e.points[2],e.points[3],t),o=c[0],u=c[1];var d=lineIntersection(r,i,s,a);d===null&&(d=i);var g=lineIntersection(o,u,s,a);return g===null&&(g=o),new PolynomialBezier(r,d,g,u)}function joinLines(e,t,r,i,s){var a=t.points[3],o=r.points[0];if(i===3||pointEqual(a,o))return a;if(i===2){var u=-t.tangentAngle(1),c=-r.tangentAngle(0)+Math.PI,d=lineIntersection(a,polarOffset(a,u+Math.PI/2,100),o,polarOffset(o,u+Math.PI/2,100)),g=d?pointDistance(d,a):pointDistance(a,o)/2,x=polarOffset(a,u,2*g*roundCorner);return e.setXYAt(x[0],x[1],"o",e.length()-1),x=polarOffset(o,c,2*g*roundCorner),e.setTripleAt(o[0],o[1],o[0],o[1],x[0],x[1],e.length()),o}var y=pointEqual(a,t.points[2])?t.points[0]:t.points[2],P=pointEqual(o,r.points[1])?r.points[3]:r.points[1],E=lineIntersection(y,a,o,P);return E&&pointDistance(E,a)<s?(e.setTripleAt(E[0],E[1],E[0],E[1],E[0],E[1],e.length()),E):a}function getIntersection(e,t){var r=e.intersections(t);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(e,t){var r=e.slice(),i=t.slice(),s=getIntersection(e[e.length-1],t[0]);return s&&(r[e.length-1]=e[e.length-1].split(s[0])[0],i[0]=t[0].split(s[1])[1]),e.length>1&&t.length>1&&(s=getIntersection(e[0],t[t.length-1]),s)?[[e[0].split(s[0])[0]],[t[t.length-1].split(s[1])[1]]]:[r,i]}function pruneIntersections(e){for(var t,r=1;r<e.length;r+=1)t=pruneSegmentIntersection(e[r-1],e[r]),e[r-1]=t[0],e[r]=t[1];return e.length>1&&(t=pruneSegmentIntersection(e[e.length-1],e[0]),e[e.length-1]=t[0],e[0]=t[1]),e}function offsetSegmentSplit(e,t){var r=e.inflectionPoints(),i,s,a,o;if(r.length===0)return[offsetSegment(e,t)];if(r.length===1||floatEqual(r[1],1))return a=e.split(r[0]),i=a[0],s=a[1],[offsetSegment(i,t),offsetSegment(s,t)];a=e.split(r[0]),i=a[0];var u=(r[1]-r[0])/(1-r[0]);return a=a[1].split(u),o=a[0],s=a[1],[offsetSegment(i,t),offsetSegment(o,t),offsetSegment(s,t)]}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(e,t){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,t.a,0,null,this),this.miterLimit=PropertyFactory.getProp(e,t.ml,0,null,this),this.lineJoin=t.lj,this._isAnimated=this.amount.effectsSequence.length!==0},OffsetPathModifier.prototype.processPath=function(e,t,r,i){var s=shapePool.newElement();s.c=e.c;var a=e.length();e.c||(a-=1);var o,u,c,d=[];for(o=0;o<a;o+=1)c=PolynomialBezier.shapeSegment(e,o),d.push(offsetSegmentSplit(c,t));if(!e.c)for(o=a-1;o>=0;o-=1)c=PolynomialBezier.shapeSegmentInverted(e,o),d.push(offsetSegmentSplit(c,t));d=pruneIntersections(d);var g=null,x=null;for(o=0;o<d.length;o+=1){var y=d[o];for(x&&(g=joinLines(s,x,y[0],r,i)),x=y[y.length-1],u=0;u<y.length;u+=1)c=y[u],g&&pointEqual(c.points[0],g)?s.setXYAt(c.points[1][0],c.points[1][1],"o",s.length()-1):s.setTripleAt(c.points[0][0],c.points[0][1],c.points[1][0],c.points[1][1],c.points[0][0],c.points[0][1],s.length()),s.setTripleAt(c.points[3][0],c.points[3][1],c.points[3][0],c.points[3][1],c.points[2][0],c.points[2][1],s.length()),g=c.points[3]}return d.length&&joinLines(s,x,d[0][0],r,i),s},OffsetPathModifier.prototype.processShapes=function(e){var t,r,i=this.shapes.length,s,a,o=this.amount.v,u=this.miterLimit.v,c=this.lineJoin;if(o!==0){var d,g;for(r=0;r<i;r+=1){if(d=this.shapes[r],g=d.localShapeCollection,!(!d.shape._mdf&&!this._mdf&&!e))for(g.releaseShapes(),d.shape._mdf=!0,t=d.shape.paths.shapes,a=d.shape.paths._length,s=0;s<a;s+=1)g.addShape(this.processPath(t[s],o,c,u));d.shape.paths=d.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function getFontProperties(e){for(var t=e.fStyle?e.fStyle.split(" "):[],r="normal",i="normal",s=t.length,a,o=0;o<s;o+=1)switch(a=t[o].toLowerCase(),a){case"italic":i="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200";break}return{style:i,weight:e.fWeight||r}}var FontManager=function(){var e=5e3,t={w:0,size:0,shapes:[],data:{shapes:[]}},r=[];r=r.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var i=127988,s=917631,a=917601,o=917626,u=65039,c=8205,d=127462,g=127487,x=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function y(L){var B=L.split(","),_,F=B.length,z=[];for(_=0;_<F;_+=1)B[_]!=="sans-serif"&&B[_]!=="monospace"&&z.push(B[_]);return z.join(",")}function P(L,B){var _=createTag("span");_.setAttribute("aria-hidden",!0),_.style.fontFamily=B;var F=createTag("span");F.innerText="giItT1WQy@!-/#",_.style.position="absolute",_.style.left="-10000px",_.style.top="-10000px",_.style.fontSize="300px",_.style.fontVariant="normal",_.style.fontStyle="normal",_.style.fontWeight="normal",_.style.letterSpacing="0",_.appendChild(F),document.body.appendChild(_);var z=F.offsetWidth;return F.style.fontFamily=y(L)+", "+B,{node:F,w:z,parent:_}}function E(){var L,B=this.fonts.length,_,F,z=B;for(L=0;L<B;L+=1)this.fonts[L].loaded?z-=1:this.fonts[L].fOrigin==="n"||this.fonts[L].origin===0?this.fonts[L].loaded=!0:(_=this.fonts[L].monoCase.node,F=this.fonts[L].monoCase.w,_.offsetWidth!==F?(z-=1,this.fonts[L].loaded=!0):(_=this.fonts[L].sansCase.node,F=this.fonts[L].sansCase.w,_.offsetWidth!==F&&(z-=1,this.fonts[L].loaded=!0)),this.fonts[L].loaded&&(this.fonts[L].sansCase.parent.parentNode.removeChild(this.fonts[L].sansCase.parent),this.fonts[L].monoCase.parent.parentNode.removeChild(this.fonts[L].monoCase.parent)));z!==0&&Date.now()-this.initTime<e?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)}function T(L,B){var _=document.body&&B?"svg":"canvas",F,z=getFontProperties(L);if(_==="svg"){var V=createNS("text");V.style.fontSize="100px",V.setAttribute("font-family",L.fFamily),V.setAttribute("font-style",z.style),V.setAttribute("font-weight",z.weight),V.textContent="1",L.fClass?(V.style.fontFamily="inherit",V.setAttribute("class",L.fClass)):V.style.fontFamily=L.fFamily,B.appendChild(V),F=V}else{var X=new OffscreenCanvas(500,500).getContext("2d");X.font=z.style+" "+z.weight+" 100px "+L.fFamily,F=X}function Y(Q){return _==="svg"?(F.textContent=Q,F.getComputedTextLength()):F.measureText(Q).width}return{measureText:Y}}function M(L,B){if(!L){this.isLoaded=!0;return}if(this.chars){this.isLoaded=!0,this.fonts=L.list;return}if(!document.body){this.isLoaded=!0,L.list.forEach(function(he){he.helper=T(he),he.cache={}}),this.fonts=L.list;return}var _=L.list,F,z=_.length,V=z;for(F=0;F<z;F+=1){var X=!0,Y,Q;if(_[F].loaded=!1,_[F].monoCase=P(_[F].fFamily,"monospace"),_[F].sansCase=P(_[F].fFamily,"sans-serif"),!_[F].fPath)_[F].loaded=!0,V-=1;else if(_[F].fOrigin==="p"||_[F].origin===3){if(Y=document.querySelectorAll('style[f-forigin="p"][f-family="'+_[F].fFamily+'"], style[f-origin="3"][f-family="'+_[F].fFamily+'"]'),Y.length>0&&(X=!1),X){var te=createTag("style");te.setAttribute("f-forigin",_[F].fOrigin),te.setAttribute("f-origin",_[F].origin),te.setAttribute("f-family",_[F].fFamily),te.type="text/css",te.innerText="@font-face {font-family: "+_[F].fFamily+"; font-style: normal; src: url('"+_[F].fPath+"');}",B.appendChild(te)}}else if(_[F].fOrigin==="g"||_[F].origin===1){for(Y=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),Q=0;Q<Y.length;Q+=1)Y[Q].href.indexOf(_[F].fPath)!==-1&&(X=!1);if(X){var re=createTag("link");re.setAttribute("f-forigin",_[F].fOrigin),re.setAttribute("f-origin",_[F].origin),re.type="text/css",re.rel="stylesheet",re.href=_[F].fPath,document.body.appendChild(re)}}else if(_[F].fOrigin==="t"||_[F].origin===2){for(Y=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),Q=0;Q<Y.length;Q+=1)_[F].fPath===Y[Q].src&&(X=!1);if(X){var le=createTag("link");le.setAttribute("f-forigin",_[F].fOrigin),le.setAttribute("f-origin",_[F].origin),le.setAttribute("rel","stylesheet"),le.setAttribute("href",_[F].fPath),B.appendChild(le)}}_[F].helper=T(_[F],B),_[F].cache={},this.fonts.push(_[F])}V===0?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function C(L){if(L){this.chars||(this.chars=[]);var B,_=L.length,F,z=this.chars.length,V;for(B=0;B<_;B+=1){for(F=0,V=!1;F<z;)this.chars[F].style===L[B].style&&this.chars[F].fFamily===L[B].fFamily&&this.chars[F].ch===L[B].ch&&(V=!0),F+=1;V||(this.chars.push(L[B]),z+=1)}}}function S(L,B,_){for(var F=0,z=this.chars.length;F<z;){if(this.chars[F].ch===L&&this.chars[F].style===B&&this.chars[F].fFamily===_)return this.chars[F];F+=1}return(typeof L=="string"&&L.charCodeAt(0)!==13||!L)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",L,B,_)),t}function b(L,B,_){var F=this.getFontByName(B),z=L;if(!F.cache[z]){var V=F.helper;if(L===" "){var X=V.measureText("|"+L+"|"),Y=V.measureText("||");F.cache[z]=(X-Y)/100}else F.cache[z]=V.measureText(L)/100}return F.cache[z]*_}function A(L){for(var B=0,_=this.fonts.length;B<_;){if(this.fonts[B].fName===L)return this.fonts[B];B+=1}return this.fonts[0]}function R(L){var B=0,_=L.charCodeAt(0);if(_>=55296&&_<=56319){var F=L.charCodeAt(1);F>=56320&&F<=57343&&(B=(_-55296)*1024+F-56320+65536)}return B}function I(L,B){var _=L.toString(16)+B.toString(16);return x.indexOf(_)!==-1}function D(L){return L===c}function O(L){return L===u}function j(L){var B=R(L);return B>=d&&B<=g}function W(L){return j(L.substr(0,2))&&j(L.substr(2,2))}function U(L){return r.indexOf(L)!==-1}function H(L,B){var _=R(L.substr(B,2));if(_!==i)return!1;var F=0;for(B+=2;F<5;){if(_=R(L.substr(B,2)),_<a||_>o)return!1;F+=1,B+=2}return R(L.substr(B,2))===s}function K(){this.isLoaded=!0}var $=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};$.isModifier=I,$.isZeroWidthJoiner=D,$.isFlagEmoji=W,$.isRegionalCode=j,$.isCombinedCharacter=U,$.isRegionalFlag=H,$.isVariationSelector=O,$.BLACK_FLAG_CODE_POINT=i;var N={addChars:C,addFonts:M,getCharData:S,getFontByName:A,measureText:b,checkLoadedFonts:E,setIsLoaded:K};return $.prototype=N,$}();function SlotManager(e){this.animationData=e}SlotManager.prototype.getProp=function(e){return this.animationData.slots&&this.animationData.slots[e.sid]?Object.assign(e,this.animationData.slots[e.sid].p):e};function slotFactory(e){return new SlotManager(e)}function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(t){this.renderableComponents.indexOf(t)===-1&&this.renderableComponents.push(t)},removeRenderableComponent:function(t){this.renderableComponents.indexOf(t)!==-1&&this.renderableComponents.splice(this.renderableComponents.indexOf(t),1)},prepareRenderableFrame:function(t){this.checkLayerLimits(t)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(t){this.data.ip-this.data.st<=t&&this.data.op-this.data.st>t?this.isInRange!==!0&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):this.isInRange!==!1&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var t,r=this.renderableComponents.length;for(t=0;t<r;t+=1)this.renderableComponents[t].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return this.data.ty===5?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=function(){var e={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(t){return e[t]||""}}();function SliderEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function AngleEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function ColorEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,1,0,r)}function PointEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,1,0,r)}function LayerIndexEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function MaskIndexEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function CheckboxEffect(e,t,r){this.p=PropertyFactory.getProp(t,e.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(e,t){var r=e.ef||[];this.effectElements=[];var i,s=r.length,a;for(i=0;i<s;i+=1)a=new GroupEffect(r[i],t),this.effectElements.push(a)}function GroupEffect(e,t){this.init(e,t)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(e,t){this.data=e,this.effectElements=[],this.initDynamicPropertyContainer(t);var r,i=this.data.ef.length,s,a=this.data.ef;for(r=0;r<i;r+=1){switch(s=null,a[r].ty){case 0:s=new SliderEffect(a[r],t,this);break;case 1:s=new AngleEffect(a[r],t,this);break;case 2:s=new ColorEffect(a[r],t,this);break;case 3:s=new PointEffect(a[r],t,this);break;case 4:case 7:s=new CheckboxEffect(a[r],t,this);break;case 10:s=new LayerIndexEffect(a[r],t,this);break;case 11:s=new MaskIndexEffect(a[r],t,this);break;case 5:s=new EffectsManager(a[r],t);break;default:s=new NoValueEffect(a[r]);break}s&&this.effectElements.push(s)}};function BaseElement(){}BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var t=0,r=this.data.masksProperties.length;t<r;){if(this.data.masksProperties[t].mode!=="n"&&this.data.masksProperties[t].cl!==!1)return!0;t+=1}return!1},initExpressions:function(){var t=getExpressionInterfaces();if(t){var r=t("layer"),i=t("effects"),s=t("shape"),a=t("text"),o=t("comp");this.layerInterface=r(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var u=i.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(u),this.data.ty===0||this.data.xt?this.compInterface=o(this):this.data.ty===4?(this.layerInterface.shapeInterface=s(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):this.data.ty===5&&(this.layerInterface.textInterface=a(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var t=getBlendMode(this.data.bm),r=this.baseElement||this.layerElement;r.style["mix-blend-mode"]=t},initBaseData:function(t,r,i){this.globalData=r,this.comp=i,this.data=t,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}};function FrameElement(){}FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(t,r){var i,s=this.dynamicProperties.length;for(i=0;i<s;i+=1)(r||this._isParent&&this.dynamicProperties[i].propType==="transform")&&(this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(t){this.dynamicProperties.indexOf(t)===-1&&this.dynamicProperties.push(t)}};function FootageElement(e,t,r){this.initFrame(),this.initRenderable(),this.assetData=t.getAssetData(e.refId),this.footageData=t.imageLoader.getAsset(this.assetData),this.initBaseData(e,t,r)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var e=getExpressionInterfaces();if(e){var t=e("footage");this.layerInterface=t(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData};function AudioElement(e,t,r){this.initFrame(),this.initRenderable(),this.assetData=t.getAssetData(e.refId),this.initBaseData(e,t,r),this._isPlaying=!1,this._canPlay=!1;var i=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(i),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,e.au&&e.au.lv?e.au.lv:{k:[100]},1,.01,this)}AudioElement.prototype.prepareFrame=function(e){if(this.prepareRenderableFrame(e,!0),this.prepareProperties(e,!0),this.tm._placeholder)this._currentTime=e/this.data.sr;else{var t=this.tm.v;this._currentTime=t}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(e){this.audio.rate(e)},AudioElement.prototype.volume=function(e){this._volumeMultiplier=e,this._previousVolume=e*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(e){var t,r=this.layers.length,i;for(this.completeLayers=!0,t=r-1;t>=0;t-=1)this.elements[t]||(i=this.layers[t],i.ip-i.st<=e-this.layers[t].st&&i.op-i.st>e-this.layers[t].st&&this.buildItem(t)),this.completeLayers=this.elements[t]?this.completeLayers:!1;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(e){switch(e.ty){case 2:return this.createImage(e);case 0:return this.createComp(e);case 1:return this.createSolid(e);case 3:return this.createNull(e);case 4:return this.createShape(e);case 5:return this.createText(e);case 6:return this.createAudio(e);case 13:return this.createCamera(e);case 15:return this.createFootage(e);default:return this.createNull(e)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(e){return new AudioElement(e,this.globalData,this)},BaseRenderer.prototype.createFootage=function(e){return new FootageElement(e,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)this.buildItem(e);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(e){this.completeLayers=!1;var t,r=e.length,i,s=this.layers.length;for(t=0;t<r;t+=1)for(i=0;i<s;){if(this.layers[i].id===e[t].id){this.layers[i]=e[t];break}i+=1}},BaseRenderer.prototype.setProjectInterface=function(e){this.globalData.projectInterface=e},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(e,t,r){for(var i=this.elements,s=this.layers,a=0,o=s.length;a<o;)s[a].ind==t&&(!i[a]||i[a]===!0?(this.buildItem(a),this.addPendingElement(e)):(r.push(i[a]),i[a].setAsParent(),s[a].parent!==void 0?this.buildElementParenting(e,s[a].parent,r):e.setHierarchy(r))),a+=1},BaseRenderer.prototype.addPendingElement=function(e){this.pendingElements.push(e)},BaseRenderer.prototype.searchExtraCompositions=function(e){var t,r=e.length;for(t=0;t<r;t+=1)if(e[t].xt){var i=this.createComp(e[t]);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},BaseRenderer.prototype.getElementById=function(e){var t,r=this.elements.length;for(t=0;t<r;t+=1)if(this.elements[t].data.ind===e)return this.elements[t];return null},BaseRenderer.prototype.getElementByPath=function(e){var t=e.shift(),r;if(typeof t=="number")r=this.elements[t];else{var i,s=this.elements.length;for(i=0;i<s;i+=1)if(this.elements[i].data.nm===t){r=this.elements[i];break}}return e.length===0?r:r.getElementByPath(e)},BaseRenderer.prototype.setupGlobalData=function(e,t){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(e),this.globalData.fontManager.addChars(e.chars),this.globalData.fontManager.addFonts(e.fonts,t),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=e.fr,this.globalData.nm=e.nm,this.globalData.compSize={w:e.w,h:e.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}TransformElement.prototype={initTransform:function(){var t=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:t,localMat:t,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var t,r=this.finalTransform.mat,i=0,s=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;i<s;){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}i+=1}if(this.finalTransform._matMdf)for(t=this.finalTransform.mProp.v.props,r.cloneFromProps(t),i=0;i<s;i+=1)r.multiply(this.hierarchy[i].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var t=0,r=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;t<r;)this.localTransforms[t]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[t]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),t+=1;if(this.finalTransform._localMatMdf){var i=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(i),t=1;t<r;t+=1){var s=this.localTransforms[t].matrix;i.multiply(s)}i.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var a=this.finalTransform.localOpacity;for(t=0;t<r;t+=1)a*=this.localTransforms[t].opacity*.01;this.finalTransform.localOpacity=a}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var t=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(t.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var r=0,i=t.length;for(r=0;r<i;r+=1)this.localTransforms.push(t[r])}}},globalToLocal:function(t){var r=[];r.push(this.finalTransform);for(var i=!0,s=this.comp;i;)s.finalTransform?(s.data.hasMask&&r.splice(0,0,s.finalTransform),s=s.comp):i=!1;var a,o=r.length,u;for(a=0;a<o;a+=1)u=r[a].mat.applyToPointArray(0,0,0),t=[t[0]-u[0],t[1]-u[1],0];return t},mHelper:new Matrix};function MaskElement(e,t,r){this.data=e,this.element=t,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var i=this.globalData.defs,s,a=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(a),this.solidPath="";var o,u=this.masksProperties,c=0,d=[],g,x,y=createElementID(),P,E,T,M,C="clipPath",S="clip-path";for(s=0;s<a;s+=1)if((u[s].mode!=="a"&&u[s].mode!=="n"||u[s].inv||u[s].o.k!==100||u[s].o.x)&&(C="mask",S="mask"),(u[s].mode==="s"||u[s].mode==="i")&&c===0?(P=createNS("rect"),P.setAttribute("fill","#ffffff"),P.setAttribute("width",this.element.comp.data.w||0),P.setAttribute("height",this.element.comp.data.h||0),d.push(P)):P=null,o=createNS("path"),u[s].mode==="n")this.viewData[s]={op:PropertyFactory.getProp(this.element,u[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,u[s],3),elem:o,lastPath:""},i.appendChild(o);else{c+=1,o.setAttribute("fill",u[s].mode==="s"?"#000000":"#ffffff"),o.setAttribute("clip-rule","nonzero");var b;if(u[s].x.k!==0?(C="mask",S="mask",M=PropertyFactory.getProp(this.element,u[s].x,0,null,this.element),b=createElementID(),E=createNS("filter"),E.setAttribute("id",b),T=createNS("feMorphology"),T.setAttribute("operator","erode"),T.setAttribute("in","SourceGraphic"),T.setAttribute("radius","0"),E.appendChild(T),i.appendChild(E),o.setAttribute("stroke",u[s].mode==="s"?"#000000":"#ffffff")):(T=null,M=null),this.storedData[s]={elem:o,x:M,expan:T,lastPath:"",lastOperator:"",filterId:b,lastRadius:0},u[s].mode==="i"){x=d.length;var A=createNS("g");for(g=0;g<x;g+=1)A.appendChild(d[g]);var R=createNS("mask");R.setAttribute("mask-type","alpha"),R.setAttribute("id",y+"_"+c),R.appendChild(o),i.appendChild(R),A.setAttribute("mask","url("+getLocationHref()+"#"+y+"_"+c+")"),d.length=0,d.push(A)}else d.push(o);u[s].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[s]={elem:o,lastPath:"",op:PropertyFactory.getProp(this.element,u[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,u[s],3),invRect:P},this.viewData[s].prop.k||this.drawPath(u[s],this.viewData[s].prop.v,this.viewData[s])}for(this.maskElement=createNS(C),a=d.length,s=0;s<a;s+=1)this.maskElement.appendChild(d[s]);c>0&&(this.maskElement.setAttribute("id",y),this.element.maskedElement.setAttribute(S,"url("+getLocationHref()+"#"+y+")"),i.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}MaskElement.prototype.getMaskProperty=function(e){return this.viewData[e].prop},MaskElement.prototype.renderFrame=function(e){var t=this.element.finalTransform.mat,r,i=this.masksProperties.length;for(r=0;r<i;r+=1)if((this.viewData[r].prop._mdf||e)&&this.drawPath(this.masksProperties[r],this.viewData[r].prop.v,this.viewData[r]),(this.viewData[r].op._mdf||e)&&this.viewData[r].elem.setAttribute("fill-opacity",this.viewData[r].op.v),this.masksProperties[r].mode!=="n"&&(this.viewData[r].invRect&&(this.element.finalTransform.mProp._mdf||e)&&this.viewData[r].invRect.setAttribute("transform",t.getInverseMatrix().to2dCSS()),this.storedData[r].x&&(this.storedData[r].x._mdf||e))){var s=this.storedData[r].expan;this.storedData[r].x.v<0?(this.storedData[r].lastOperator!=="erode"&&(this.storedData[r].lastOperator="erode",this.storedData[r].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[r].filterId+")")),s.setAttribute("radius",-this.storedData[r].x.v)):(this.storedData[r].lastOperator!=="dilate"&&(this.storedData[r].lastOperator="dilate",this.storedData[r].elem.setAttribute("filter",null)),this.storedData[r].elem.setAttribute("stroke-width",this.storedData[r].x.v*2))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var e="M0,0 ";return e+=" h"+this.globalData.compSize.w,e+=" v"+this.globalData.compSize.h,e+=" h-"+this.globalData.compSize.w,e+=" v-"+this.globalData.compSize.h+" ",e},MaskElement.prototype.drawPath=function(e,t,r){var i=" M"+t.v[0][0]+","+t.v[0][1],s,a;for(a=t._length,s=1;s<a;s+=1)i+=" C"+t.o[s-1][0]+","+t.o[s-1][1]+" "+t.i[s][0]+","+t.i[s][1]+" "+t.v[s][0]+","+t.v[s][1];if(t.c&&a>1&&(i+=" C"+t.o[s-1][0]+","+t.o[s-1][1]+" "+t.i[0][0]+","+t.i[0][1]+" "+t.v[0][0]+","+t.v[0][1]),r.lastPath!==i){var o="";r.elem&&(t.c&&(o=e.inv?this.solidPath+i:i),r.elem.setAttribute("d",o)),r.lastPath=i}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory=function(){var e={};e.createFilter=t,e.createAlphaToLuminanceFilter=r;function t(i,s){var a=createNS("filter");return a.setAttribute("id",i),s!==!0&&(a.setAttribute("filterUnits","objectBoundingBox"),a.setAttribute("x","0%"),a.setAttribute("y","0%"),a.setAttribute("width","100%"),a.setAttribute("height","100%")),a}function r(){var i=createNS("feColorMatrix");return i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),i}return e}(),featureSupport=function(){var e={maskType:!0,svgLumaHidden:!0,offscreenCanvas:typeof OffscreenCanvas<"u"};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(e.maskType=!1),/firefox/i.test(navigator.userAgent)&&(e.svgLumaHidden=!1),e}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(e){var t,r="SourceGraphic",i=e.data.ef?e.data.ef.length:0,s=createElementID(),a=filtersFactory.createFilter(s,!0),o=0;this.filters=[];var u;for(t=0;t<i;t+=1){u=null;var c=e.data.ef[t].ty;if(registeredEffects$1[c]){var d=registeredEffects$1[c].effect;u=new d(a,e.effectsManager.effectElements[t],e,idPrefix+o,r),r=idPrefix+o,registeredEffects$1[c].countsAsEffect&&(o+=1)}u&&this.filters.push(u)}o&&(e.globalData.defs.appendChild(a),e.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+s+")")),this.filters.length&&e.addRenderableComponent(this)}SVGEffects.prototype.renderFrame=function(e){var t,r=this.filters.length;for(t=0;t<r;t+=1)this.filters[t].renderFrame(e)},SVGEffects.prototype.getEffects=function(e){var t,r=this.filters.length,i=[];for(t=0;t<r;t+=1)this.filters[t].type===e&&i.push(this.filters[t]);return i};function registerEffect$1(e,t,r){registeredEffects$1[e]={effect:t,countsAsEffect:r}}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var t=null;if(this.data.td){this.matteMasks={};var r=createNS("g");r.setAttribute("id",this.layerId),r.appendChild(this.layerElement),t=r,this.globalData.defs.appendChild(r)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),t=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.ty===0&&!this.data.hd){var i=createNS("clipPath"),s=createNS("path");s.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var a=createElementID();if(i.setAttribute("id",a),i.appendChild(s),this.globalData.defs.appendChild(i),this.checkMasks()){var o=createNS("g");o.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")"),o.appendChild(this.layerElement),this.transformedElement=o,t?t.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")")}this.data.bm!==0&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(t){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[t]){var r=this.layerId+"_"+t,i,s,a,o;if(t===1||t===3){var u=createNS("mask");u.setAttribute("id",r),u.setAttribute("mask-type",t===3?"luminance":"alpha"),a=createNS("use"),a.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),u.appendChild(a),this.globalData.defs.appendChild(u),!featureSupport.maskType&&t===1&&(u.setAttribute("mask-type","luminance"),i=createElementID(),s=filtersFactory.createFilter(i),this.globalData.defs.appendChild(s),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),o=createNS("g"),o.appendChild(a),u.appendChild(o),o.setAttribute("filter","url("+getLocationHref()+"#"+i+")"))}else if(t===2){var c=createNS("mask");c.setAttribute("id",r),c.setAttribute("mask-type","alpha");var d=createNS("g");c.appendChild(d),i=createElementID(),s=filtersFactory.createFilter(i);var g=createNS("feComponentTransfer");g.setAttribute("in","SourceGraphic"),s.appendChild(g);var x=createNS("feFuncA");x.setAttribute("type","table"),x.setAttribute("tableValues","1.0 0.0"),g.appendChild(x),this.globalData.defs.appendChild(s);var y=createNS("rect");y.setAttribute("width",this.comp.data.w),y.setAttribute("height",this.comp.data.h),y.setAttribute("x","0"),y.setAttribute("y","0"),y.setAttribute("fill","#ffffff"),y.setAttribute("opacity","0"),d.setAttribute("filter","url("+getLocationHref()+"#"+i+")"),d.appendChild(y),a=createNS("use"),a.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),d.appendChild(a),featureSupport.maskType||(c.setAttribute("mask-type","luminance"),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),o=createNS("g"),d.appendChild(y),o.appendChild(this.layerElement),d.appendChild(o)),this.globalData.defs.appendChild(c)}this.matteMasks[t]=r}return this.matteMasks[t]},setMatte:function(t){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+t+")")}};function HierarchyElement(){}HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(t){this.hierarchy=t},setAsParent:function(){this._isParent=!0},checkParenting:function(){this.data.parent!==void 0&&this.comp.buildElementParenting(this,this.data.parent,[])}};function RenderableDOMElement(){}(function(){var e={initElement:function(r,i,s){this.initFrame(),this.initBaseData(r,i,s),this.initTransform(r,i,s),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var r=this.baseElement||this.layerElement;r.style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var r=this.baseElement||this.layerElement;r.style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(r){this._mdf=!1,this.prepareRenderableFrame(r),this.prepareProperties(r,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}};extendPrototype([RenderableElement,createProxyFunction(e)],RenderableDOMElement)})();function IImageElement(e,t,r){this.assetData=t.getAssetData(e.refId),this.assetData&&this.assetData.sid&&(this.assetData=t.slotManager.getProp(this.assetData)),this.initElement(e,t,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect};function ProcessedElement(e,t){this.elem=e,this.pos=t}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function(t){var r,i=this.shapeModifiers.length;for(r=0;r<i;r+=1)this.shapeModifiers[r].addShape(t)},isShapeInAnimatedModifiers:function(t){for(var r=0,i=this.shapeModifiers.length;r<i;)if(this.shapeModifiers[r].isAnimatedWithShape(t))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var t,r=this.shapes.length;for(t=0;t<r;t+=1)this.shapes[t].sh.reset();r=this.shapeModifiers.length;var i;for(t=r-1;t>=0&&(i=this.shapeModifiers[t].processShapes(this._isFirstFrame),!i);t-=1);}},searchProcessedElement:function(t){for(var r=this.processedElements,i=0,s=r.length;i<s;){if(r[i].elem===t)return r[i].pos;i+=1}return 0},addProcessedElement:function(t,r){for(var i=this.processedElements,s=i.length;s;)if(s-=1,i[s].elem===t){i[s].pos=r;return}i.push(new ProcessedElement(t,r))},prepareFrame:function(t){this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(e,t,r){this.caches=[],this.styles=[],this.transformers=e,this.lStr="",this.sh=r,this.lvl=t,this._isAnimated=!!r.k;for(var i=0,s=e.length;i<s;){if(e[i].mProps.dynamicProperties.length){this._isAnimated=!0;break}i+=1}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0};function SVGStyleData(e,t){this.data=e,this.type=e.ty,this.d="",this.lvl=t,this._mdf=!1,this.closed=e.hd===!0,this.pElem=createNS("path"),this.msElem=null}SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1};function DashProperty(e,t,r,i){this.elem=e,this.frameId=-1,this.dataProps=createSizedArray(t.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",t.length?t.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(i);var s,a=t.length||0,o;for(s=0;s<a;s+=1)o=PropertyFactory.getProp(e,t[s].v,0,0,this),this.k=o.k||this.k,this.dataProps[s]={n:t[s].n,p:o};this.k||this.getValue(!0),this._isAnimated=this.k}DashProperty.prototype.getValue=function(e){if(!(this.elem.globalData.frameId===this.frameId&&!e)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||e,this._mdf)){var t=0,r=this.dataProps.length;for(this.renderer==="svg"&&(this.dashStr=""),t=0;t<r;t+=1)this.dataProps[t].n!=="o"?this.renderer==="svg"?this.dashStr+=" "+this.dataProps[t].p.v:this.dashArray[t]=this.dataProps[t].p.v:this.dashoffset[0]=this.dataProps[t].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.w=PropertyFactory.getProp(e,t.w,0,null,this),this.d=new DashProperty(e,t.d||{},"svg",this),this.c=PropertyFactory.getProp(e,t.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.c=PropertyFactory.getProp(e,t.c,1,255,this),this.style=r}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.style=r}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(e,t,r){this.data=t,this.c=createTypedArray("uint8c",t.p*4);var i=t.k.k[0].s?t.k.k[0].s.length-t.p*4:t.k.k.length-t.p*4;this.o=createTypedArray("float32",i),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=i,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(e,t.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}GradientProperty.prototype.comparePoints=function(e,t){for(var r=0,i=this.o.length/2,s;r<i;){if(s=Math.abs(e[r*4]-e[t*4+r*2]),s>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4)return!1;if(this.data.k.k[0].s)for(var e=0,t=this.data.k.k.length;e<t;){if(!this.comparePoints(this.data.k.k[e].s,this.data.p))return!1;e+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(e){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||e){var t,r=this.data.p*4,i,s;for(t=0;t<r;t+=1)i=t%4===0?100:255,s=Math.round(this.prop.v[t]*i),this.c[t]!==s&&(this.c[t]=s,this._cmdf=!e);if(this.o.length)for(r=this.prop.v.length,t=this.data.p*4;t<r;t+=1)i=t%2===0?100:1,s=t%2===0?Math.round(this.prop.v[t]*100):this.prop.v[t],this.o[t-this.data.p*4]!==s&&(this.o[t-this.data.p*4]=s,this._omdf=!e);this._mdf=!e}},extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.initGradientData(e,t,r)}SVGGradientFillStyleData.prototype.initGradientData=function(e,t,r){this.o=PropertyFactory.getProp(e,t.o,0,.01,this),this.s=PropertyFactory.getProp(e,t.s,1,null,this),this.e=PropertyFactory.getProp(e,t.e,1,null,this),this.h=PropertyFactory.getProp(e,t.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(e,t.a||{k:0},0,degToRads,this),this.g=new GradientProperty(e,t.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,t),this.setGradientOpacity(t,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(e,t){var r=createElementID(),i=createNS(t.t===1?"linearGradient":"radialGradient");i.setAttribute("id",r),i.setAttribute("spreadMethod","pad"),i.setAttribute("gradientUnits","userSpaceOnUse");var s=[],a,o,u;for(u=t.g.p*4,o=0;o<u;o+=4)a=createNS("stop"),i.appendChild(a),s.push(a);e.setAttribute(t.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=i,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(e,t){if(this.g._hasOpacity&&!this.g._collapsable){var r,i,s,a=createNS("mask"),o=createNS("path");a.appendChild(o);var u=createElementID(),c=createElementID();a.setAttribute("id",c);var d=createNS(e.t===1?"linearGradient":"radialGradient");d.setAttribute("id",u),d.setAttribute("spreadMethod","pad"),d.setAttribute("gradientUnits","userSpaceOnUse"),s=e.g.k.k[0].s?e.g.k.k[0].s.length:e.g.k.k.length;var g=this.stops;for(i=e.g.p*4;i<s;i+=2)r=createNS("stop"),r.setAttribute("stop-color","rgb(255,255,255)"),d.appendChild(r),g.push(r);o.setAttribute(e.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+u+")"),e.ty==="gs"&&(o.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),e.lj===1&&o.setAttribute("stroke-miterlimit",e.ml)),this.of=d,this.ms=a,this.ost=g,this.maskId=c,t.msElem=o}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(e,t,r){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(e,t.w,0,null,this),this.d=new DashProperty(e,t.d||{},"svg",this),this.initGradientData(e,t,r),this._isAnimated=!!this._isAnimated}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(e,t,r){this.transform={mProps:e,op:t,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}var buildShapeString=function(t,r,i,s){if(r===0)return"";var a=t.o,o=t.i,u=t.v,c,d=" M"+s.applyToPointStringified(u[0][0],u[0][1]);for(c=1;c<r;c+=1)d+=" C"+s.applyToPointStringified(a[c-1][0],a[c-1][1])+" "+s.applyToPointStringified(o[c][0],o[c][1])+" "+s.applyToPointStringified(u[c][0],u[c][1]);return i&&r&&(d+=" C"+s.applyToPointStringified(a[c-1][0],a[c-1][1])+" "+s.applyToPointStringified(o[0][0],o[0][1])+" "+s.applyToPointStringified(u[0][0],u[0][1]),d+="z"),d},SVGElementsRenderer=function(){var e=new Matrix,t=new Matrix,r={createRenderFunction:i};function i(x){switch(x.ty){case"fl":return u;case"gf":return d;case"gs":return c;case"st":return g;case"sh":case"el":case"rc":case"sr":return o;case"tr":return s;case"no":return a;default:return null}}function s(x,y,P){(P||y.transform.op._mdf)&&y.transform.container.setAttribute("opacity",y.transform.op.v),(P||y.transform.mProps._mdf)&&y.transform.container.setAttribute("transform",y.transform.mProps.v.to2dCSS())}function a(){}function o(x,y,P){var E,T,M,C,S,b,A=y.styles.length,R=y.lvl,I,D,O,j;for(b=0;b<A;b+=1){if(C=y.sh._mdf||P,y.styles[b].lvl<R){for(D=t.reset(),O=R-y.styles[b].lvl,j=y.transformers.length-1;!C&&O>0;)C=y.transformers[j].mProps._mdf||C,O-=1,j-=1;if(C)for(O=R-y.styles[b].lvl,j=y.transformers.length-1;O>0;)D.multiply(y.transformers[j].mProps.v),O-=1,j-=1}else D=e;if(I=y.sh.paths,T=I._length,C){for(M="",E=0;E<T;E+=1)S=I.shapes[E],S&&S._length&&(M+=buildShapeString(S,S._length,S.c,D));y.caches[b]=M}else M=y.caches[b];y.styles[b].d+=x.hd===!0?"":M,y.styles[b]._mdf=C||y.styles[b]._mdf}}function u(x,y,P){var E=y.style;(y.c._mdf||P)&&E.pElem.setAttribute("fill","rgb("+bmFloor(y.c.v[0])+","+bmFloor(y.c.v[1])+","+bmFloor(y.c.v[2])+")"),(y.o._mdf||P)&&E.pElem.setAttribute("fill-opacity",y.o.v)}function c(x,y,P){d(x,y,P),g(x,y,P)}function d(x,y,P){var E=y.gf,T=y.g._hasOpacity,M=y.s.v,C=y.e.v;if(y.o._mdf||P){var S=x.ty==="gf"?"fill-opacity":"stroke-opacity";y.style.pElem.setAttribute(S,y.o.v)}if(y.s._mdf||P){var b=x.t===1?"x1":"cx",A=b==="x1"?"y1":"cy";E.setAttribute(b,M[0]),E.setAttribute(A,M[1]),T&&!y.g._collapsable&&(y.of.setAttribute(b,M[0]),y.of.setAttribute(A,M[1]))}var R,I,D,O;if(y.g._cmdf||P){R=y.cst;var j=y.g.c;for(D=R.length,I=0;I<D;I+=1)O=R[I],O.setAttribute("offset",j[I*4]+"%"),O.setAttribute("stop-color","rgb("+j[I*4+1]+","+j[I*4+2]+","+j[I*4+3]+")")}if(T&&(y.g._omdf||P)){var W=y.g.o;for(y.g._collapsable?R=y.cst:R=y.ost,D=R.length,I=0;I<D;I+=1)O=R[I],y.g._collapsable||O.setAttribute("offset",W[I*2]+"%"),O.setAttribute("stop-opacity",W[I*2+1])}if(x.t===1)(y.e._mdf||P)&&(E.setAttribute("x2",C[0]),E.setAttribute("y2",C[1]),T&&!y.g._collapsable&&(y.of.setAttribute("x2",C[0]),y.of.setAttribute("y2",C[1])));else{var U;if((y.s._mdf||y.e._mdf||P)&&(U=Math.sqrt(Math.pow(M[0]-C[0],2)+Math.pow(M[1]-C[1],2)),E.setAttribute("r",U),T&&!y.g._collapsable&&y.of.setAttribute("r",U)),y.e._mdf||y.h._mdf||y.a._mdf||P){U||(U=Math.sqrt(Math.pow(M[0]-C[0],2)+Math.pow(M[1]-C[1],2)));var H=Math.atan2(C[1]-M[1],C[0]-M[0]),K=y.h.v;K>=1?K=.99:K<=-1&&(K=-.99);var $=U*K,N=Math.cos(H+y.a.v)*$+M[0],L=Math.sin(H+y.a.v)*$+M[1];E.setAttribute("fx",N),E.setAttribute("fy",L),T&&!y.g._collapsable&&(y.of.setAttribute("fx",N),y.of.setAttribute("fy",L))}}}function g(x,y,P){var E=y.style,T=y.d;T&&(T._mdf||P)&&T.dashStr&&(E.pElem.setAttribute("stroke-dasharray",T.dashStr),E.pElem.setAttribute("stroke-dashoffset",T.dashoffset[0])),y.c&&(y.c._mdf||P)&&E.pElem.setAttribute("stroke","rgb("+bmFloor(y.c.v[0])+","+bmFloor(y.c.v[1])+","+bmFloor(y.c.v[2])+")"),(y.o._mdf||P)&&E.pElem.setAttribute("stroke-opacity",y.o.v),(y.w._mdf||P)&&(E.pElem.setAttribute("stroke-width",y.w.v),E.msElem&&E.msElem.setAttribute("stroke-width",y.w.v))}return r}();function SVGShapeElement(e,t,r){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(e,t,r),this.prevViewData=[]}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var e,t=this.shapes.length,r,i,s=this.stylesList.length,a,o=[],u=!1;for(i=0;i<s;i+=1){for(a=this.stylesList[i],u=!1,o.length=0,e=0;e<t;e+=1)r=this.shapes[e],r.styles.indexOf(a)!==-1&&(o.push(r),u=r._isAnimated||u);o.length>1&&u&&this.setShapesAsAnimated(o)}},SVGShapeElement.prototype.setShapesAsAnimated=function(e){var t,r=e.length;for(t=0;t<r;t+=1)e[t].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(e,t){var r,i=new SVGStyleData(e,t),s=i.pElem;if(e.ty==="st")r=new SVGStrokeStyleData(this,e,i);else if(e.ty==="fl")r=new SVGFillStyleData(this,e,i);else if(e.ty==="gf"||e.ty==="gs"){var a=e.ty==="gf"?SVGGradientFillStyleData:SVGGradientStrokeStyleData;r=new a(this,e,i),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),s.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))}else e.ty==="no"&&(r=new SVGNoStyleData(this,e,i));return(e.ty==="st"||e.ty==="gs")&&(s.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),s.setAttribute("fill-opacity","0"),e.lj===1&&s.setAttribute("stroke-miterlimit",e.ml)),e.r===2&&s.setAttribute("fill-rule","evenodd"),e.ln&&s.setAttribute("id",e.ln),e.cl&&s.setAttribute("class",e.cl),e.bm&&(s.style["mix-blend-mode"]=getBlendMode(e.bm)),this.stylesList.push(i),this.addToAnimatedContents(e,r),r},SVGShapeElement.prototype.createGroupElement=function(e){var t=new ShapeGroupData;return e.ln&&t.gr.setAttribute("id",e.ln),e.cl&&t.gr.setAttribute("class",e.cl),e.bm&&(t.gr.style["mix-blend-mode"]=getBlendMode(e.bm)),t},SVGShapeElement.prototype.createTransformElement=function(e,t){var r=TransformPropertyFactory.getTransformProperty(this,e,this),i=new SVGTransformData(r,r.o,t);return this.addToAnimatedContents(e,i),i},SVGShapeElement.prototype.createShapeElement=function(e,t,r){var i=4;e.ty==="rc"?i=5:e.ty==="el"?i=6:e.ty==="sr"&&(i=7);var s=ShapePropertyFactory.getShapeProp(this,e,i,this),a=new SVGShapeData(t,r,s);return this.shapes.push(a),this.addShapeToModifiers(a),this.addToAnimatedContents(e,a),a},SVGShapeElement.prototype.addToAnimatedContents=function(e,t){for(var r=0,i=this.animatedContents.length;r<i;){if(this.animatedContents[r].element===t)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(e),element:t,data:e})},SVGShapeElement.prototype.setElementStyles=function(e){var t=e.styles,r,i=this.stylesList.length;for(r=0;r<i;r+=1)this.stylesList[r].closed||t.push(this.stylesList[r])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var e,t=this.itemsData.length;for(e=0;e<t;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),t=this.dynamicProperties.length,e=0;e<t;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(e,t,r,i,s,a,o){var u=[].concat(a),c,d=e.length-1,g,x,y=[],P=[],E,T,M;for(c=d;c>=0;c-=1){if(M=this.searchProcessedElement(e[c]),M?t[c]=r[M-1]:e[c]._render=o,e[c].ty==="fl"||e[c].ty==="st"||e[c].ty==="gf"||e[c].ty==="gs"||e[c].ty==="no")M?t[c].style.closed=!1:t[c]=this.createStyleElement(e[c],s),e[c]._render&&t[c].style.pElem.parentNode!==i&&i.appendChild(t[c].style.pElem),y.push(t[c].style);else if(e[c].ty==="gr"){if(!M)t[c]=this.createGroupElement(e[c]);else for(x=t[c].it.length,g=0;g<x;g+=1)t[c].prevViewData[g]=t[c].it[g];this.searchShapes(e[c].it,t[c].it,t[c].prevViewData,t[c].gr,s+1,u,o),e[c]._render&&t[c].gr.parentNode!==i&&i.appendChild(t[c].gr)}else e[c].ty==="tr"?(M||(t[c]=this.createTransformElement(e[c],i)),E=t[c].transform,u.push(E)):e[c].ty==="sh"||e[c].ty==="rc"||e[c].ty==="el"||e[c].ty==="sr"?(M||(t[c]=this.createShapeElement(e[c],u,s)),this.setElementStyles(t[c])):e[c].ty==="tm"||e[c].ty==="rd"||e[c].ty==="ms"||e[c].ty==="pb"||e[c].ty==="zz"||e[c].ty==="op"?(M?(T=t[c],T.closed=!1):(T=ShapeModifiers.getModifier(e[c].ty),T.init(this,e[c]),t[c]=T,this.shapeModifiers.push(T)),P.push(T)):e[c].ty==="rp"&&(M?(T=t[c],T.closed=!0):(T=ShapeModifiers.getModifier(e[c].ty),t[c]=T,T.init(this,e,c,t),this.shapeModifiers.push(T),o=!1),P.push(T));this.addProcessedElement(e[c],c+1)}for(d=y.length,c=0;c<d;c+=1)y[c].closed=!0;for(d=P.length,c=0;c<d;c+=1)P[c].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var e,t=this.stylesList.length;for(e=0;e<t;e+=1)this.stylesList[e].reset();for(this.renderShape(),e=0;e<t;e+=1)(this.stylesList[e]._mdf||this._isFirstFrame)&&(this.stylesList[e].msElem&&(this.stylesList[e].msElem.setAttribute("d",this.stylesList[e].d),this.stylesList[e].d="M0 0"+this.stylesList[e].d),this.stylesList[e].pElem.setAttribute("d",this.stylesList[e].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var e,t=this.animatedContents.length,r;for(e=0;e<t;e+=1)r=this.animatedContents[e],(this._isFirstFrame||r.element._isAnimated)&&r.data!==!0&&r.fn(r.data,r.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null};function LetterProps(e,t,r,i,s,a){this.o=e,this.sw=t,this.sc=r,this.fc=i,this.m=s,this.p=a,this._mdf={o:!0,sw:!!t,sc:!!r,fc:!!i,m:!0,p:!0}}LetterProps.prototype.update=function(e,t,r,i,s,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var o=!1;return this.o!==e&&(this.o=e,this._mdf.o=!0,o=!0),this.sw!==t&&(this.sw=t,this._mdf.sw=!0,o=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,o=!0),this.fc!==i&&(this.fc=i,this._mdf.fc=!0,o=!0),this.m!==s&&(this.m=s,this._mdf.m=!0,o=!0),a.length&&(this.p[0]!==a[0]||this.p[1]!==a[1]||this.p[4]!==a[4]||this.p[5]!==a[5]||this.p[12]!==a[12]||this.p[13]!==a[13])&&(this.p=a,this._mdf.p=!0,o=!0),o};function TextProperty(e,t){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,t.d&&t.d.sid&&(t.d=e.globalData.slotManager.getProp(t.d)),this.data=t,this.elem=e,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e},TextProperty.prototype.setCurrentData=function(e){e.__complete||this.completeTextData(e),this.currentData=e,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(e){this.effectsSequence.push(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(e){if(!((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!e)){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var t=this.currentData,r=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return}this.lock=!0,this._mdf=!1;var i,s=this.effectsSequence.length,a=e||this.data.d.k[this.keysIndex].s;for(i=0;i<s;i+=1)r!==this.keysIndex?a=this.effectsSequence[i](a,a.t):a=this.effectsSequence[i](this.currentData,a.t);t!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var e=this.data.d.k,t=this.elem.comp.renderedFrame,r=0,i=e.length;r<=i-1&&!(r===i-1||e[r+1].t>t);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(e){for(var t=[],r=0,i=e.length,s,a,o=!1,u=!1,c="";r<i;)o=u,u=!1,s=e.charCodeAt(r),c=e.charAt(r),FontManager.isCombinedCharacter(s)?o=!0:s>=55296&&s<=56319?FontManager.isRegionalFlag(e,r)?c=e.substr(r,14):(a=e.charCodeAt(r+1),a>=56320&&a<=57343&&(FontManager.isModifier(s,a)?(c=e.substr(r,2),o=!0):FontManager.isFlagEmoji(e.substr(r,4))?c=e.substr(r,4):c=e.substr(r,2))):s>56319?(a=e.charCodeAt(r+1),FontManager.isVariationSelector(s)&&(o=!0)):FontManager.isZeroWidthJoiner(s)&&(o=!0,u=!0),o?(t[t.length-1]+=c,o=!1):t.push(c),r+=c.length;return t},TextProperty.prototype.completeTextData=function(e){e.__complete=!0;var t=this.elem.globalData.fontManager,r=this.data,i=[],s,a,o,u=0,c,d=r.m.g,g=0,x=0,y=0,P=[],E=0,T=0,M,C,S=t.getFontByName(e.f),b,A=0,R=getFontProperties(S);e.fWeight=R.weight,e.fStyle=R.style,e.finalSize=e.s,e.finalText=this.buildFinalText(e.t),a=e.finalText.length,e.finalLineHeight=e.lh;var I=e.tr/1e3*e.finalSize,D;if(e.sz)for(var O=!0,j=e.sz[0],W=e.sz[1],U,H;O;){H=this.buildFinalText(e.t),U=0,E=0,a=H.length,I=e.tr/1e3*e.finalSize;var K=-1;for(s=0;s<a;s+=1)D=H[s].charCodeAt(0),o=!1,H[s]===" "?K=s:(D===13||D===3)&&(E=0,o=!0,U+=e.finalLineHeight||e.finalSize*1.2),t.chars?(b=t.getCharData(H[s],S.fStyle,S.fFamily),A=o?0:b.w*e.finalSize/100):A=t.measureText(H[s],e.f,e.finalSize),E+A>j&&H[s]!==" "?(K===-1?a+=1:s=K,U+=e.finalLineHeight||e.finalSize*1.2,H.splice(s,K===s?1:0,"\r"),K=-1,E=0):(E+=A,E+=I);U+=S.ascent*e.finalSize/100,this.canResize&&e.finalSize>this.minimumFontSize&&W<U?(e.finalSize-=1,e.finalLineHeight=e.finalSize*e.lh/e.s):(e.finalText=H,a=e.finalText.length,O=!1)}E=-I,A=0;var $=0,N;for(s=0;s<a;s+=1)if(o=!1,N=e.finalText[s],D=N.charCodeAt(0),D===13||D===3?($=0,P.push(E),T=E>T?E:T,E=-2*I,c="",o=!0,y+=1):c=N,t.chars?(b=t.getCharData(N,S.fStyle,t.getFontByName(e.f).fFamily),A=o?0:b.w*e.finalSize/100):A=t.measureText(c,e.f,e.finalSize),N===" "?$+=A+I:(E+=A+I+$,$=0),i.push({l:A,an:A,add:g,n:o,anIndexes:[],val:c,line:y,animatorJustifyOffset:0}),d==2){if(g+=A,c===""||c===" "||s===a-1){for((c===""||c===" ")&&(g-=A);x<=s;)i[x].an=g,i[x].ind=u,i[x].extra=A,x+=1;u+=1,g=0}}else if(d==3){if(g+=A,c===""||s===a-1){for(c===""&&(g-=A);x<=s;)i[x].an=g,i[x].ind=u,i[x].extra=A,x+=1;g=0,u+=1}}else i[u].ind=u,i[u].extra=0,u+=1;if(e.l=i,T=E>T?E:T,P.push(E),e.sz)e.boxWidth=e.sz[0],e.justifyOffset=0;else switch(e.boxWidth=T,e.j){case 1:e.justifyOffset=-e.boxWidth;break;case 2:e.justifyOffset=-e.boxWidth/2;break;default:e.justifyOffset=0}e.lineWidths=P;var L=r.a,B,_;C=L.length;var F,z,V=[];for(M=0;M<C;M+=1){for(B=L[M],B.a.sc&&(e.strokeColorAnim=!0),B.a.sw&&(e.strokeWidthAnim=!0),(B.a.fc||B.a.fh||B.a.fs||B.a.fb)&&(e.fillColorAnim=!0),z=0,F=B.s.b,s=0;s<a;s+=1)_=i[s],_.anIndexes[M]=z,(F==1&&_.val!==""||F==2&&_.val!==""&&_.val!==" "||F==3&&(_.n||_.val==" "||s==a-1)||F==4&&(_.n||s==a-1))&&(B.s.rn===1&&V.push(z),z+=1);r.a[M].s.totalChars=z;var X=-1,Y;if(B.s.rn===1)for(s=0;s<a;s+=1)_=i[s],X!=_.anIndexes[M]&&(X=_.anIndexes[M],Y=V.splice(Math.floor(Math.random()*V.length),1)[0]),_.anIndexes[M]=Y}e.yOffset=e.finalLineHeight||e.finalSize*1.2,e.ls=e.ls||0,e.ascent=S.ascent*e.finalSize/100},TextProperty.prototype.updateDocumentData=function(e,t){t=t===void 0?this.keysIndex:t;var r=this.copyData({},this.data.d.k[t].s);r=this.copyData(r,e),this.data.d.k[t].s=r,this.recalculate(t),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(e){var t=this.data.d.k[e].s;t.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(t)},TextProperty.prototype.canResizeFont=function(e){this.canResize=e,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(e){this.minimumFontSize=Math.floor(e)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var e=Math.max,t=Math.min,r=Math.floor;function i(a,o){this._currentTextLength=-1,this.k=!1,this.data=o,this.elem=a,this.comp=a.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(a),this.s=PropertyFactory.getProp(a,o.s||{k:0},0,0,this),"e"in o?this.e=PropertyFactory.getProp(a,o.e,0,0,this):this.e={v:100},this.o=PropertyFactory.getProp(a,o.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(a,o.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(a,o.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(a,o.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(a,o.a,0,.01,this),this.dynamicProperties.length||this.getValue()}i.prototype={getMult:function(o){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var u=0,c=0,d=1,g=1;this.ne.v>0?u=this.ne.v/100:c=-this.ne.v/100,this.xe.v>0?d=1-this.xe.v/100:g=1+this.xe.v/100;var x=BezierFactory.getBezierEasing(u,c,d,g).get,y=0,P=this.finalS,E=this.finalE,T=this.data.sh;if(T===2)E===P?y=o>=E?1:0:y=e(0,t(.5/(E-P)+(o-P)/(E-P),1)),y=x(y);else if(T===3)E===P?y=o>=E?0:1:y=1-e(0,t(.5/(E-P)+(o-P)/(E-P),1)),y=x(y);else if(T===4)E===P?y=0:(y=e(0,t(.5/(E-P)+(o-P)/(E-P),1)),y<.5?y*=2:y=1-2*(y-.5)),y=x(y);else if(T===5){if(E===P)y=0;else{var M=E-P;o=t(e(0,o+.5-P),E-P);var C=-M/2+o,S=M/2;y=Math.sqrt(1-C*C/(S*S))}y=x(y)}else T===6?(E===P?y=0:(o=t(e(0,o+.5-P),E-P),y=(1+Math.cos(Math.PI+Math.PI*2*o/(E-P)))/2),y=x(y)):(o>=r(P)&&(o-P<0?y=e(0,t(t(E,1)-(P-o),1)):y=e(0,t(E-o,1))),y=x(y));if(this.sm.v!==100){var b=this.sm.v*.01;b===0&&(b=1e-8);var A=.5-b*.5;y<A?y=0:(y=(y-A)/b,y>1&&(y=1))}return y*this.a.v},getValue:function(o){this.iterateDynamicProperties(),this._mdf=o||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,o&&this.data.r===2&&(this.e.v=this._currentTextLength);var u=this.data.r===2?1:100/this.data.totalChars,c=this.o.v/u,d=this.s.v/u+c,g=this.e.v/u+c;if(d>g){var x=d;d=g,g=x}this.finalS=d,this.finalE=g}},extendPrototype([DynamicPropertyContainer],i);function s(a,o,u){return new i(a,o)}return{getTextSelectorProp:s}}();function TextAnimatorDataProperty(e,t,r){var i={propType:!1},s=PropertyFactory.getProp,a=t.a;this.a={r:a.r?s(e,a.r,0,degToRads,r):i,rx:a.rx?s(e,a.rx,0,degToRads,r):i,ry:a.ry?s(e,a.ry,0,degToRads,r):i,sk:a.sk?s(e,a.sk,0,degToRads,r):i,sa:a.sa?s(e,a.sa,0,degToRads,r):i,s:a.s?s(e,a.s,1,.01,r):i,a:a.a?s(e,a.a,1,0,r):i,o:a.o?s(e,a.o,0,.01,r):i,p:a.p?s(e,a.p,1,0,r):i,sw:a.sw?s(e,a.sw,0,0,r):i,sc:a.sc?s(e,a.sc,1,0,r):i,fc:a.fc?s(e,a.fc,1,0,r):i,fh:a.fh?s(e,a.fh,0,0,r):i,fs:a.fs?s(e,a.fs,0,.01,r):i,fb:a.fb?s(e,a.fb,0,.01,r):i,t:a.t?s(e,a.t,0,0,r):i},this.s=TextSelectorProp.getTextSelectorProp(e,t.s,r),this.s.t=t.s.t}function TextAnimatorProperty(e,t,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=e,this._renderType=t,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}TextAnimatorProperty.prototype.searchProperties=function(){var e,t=this._textData.a.length,r,i=PropertyFactory.getProp;for(e=0;e<t;e+=1)r=this._textData.a[e],this._animatorsData[e]=new TextAnimatorDataProperty(this._elem,r,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:i(this._elem,this._textData.p.a,0,0,this),f:i(this._elem,this._textData.p.f,0,0,this),l:i(this._elem,this._textData.p.l,0,0,this),r:i(this._elem,this._textData.p.r,0,0,this),p:i(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=i(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(e,t){if(this.lettersChangedFlag=t,!(!this._mdf&&!this._isFirstFrame&&!t&&(!this._hasMaskedPath||!this._pathData.m._mdf))){this._isFirstFrame=!1;var r=this._moreOptions.alignment.v,i=this._animatorsData,s=this._textData,a=this.mHelper,o=this._renderType,u=this.renderedLetters.length,c,d,g,x,y=e.l,P,E,T,M,C,S,b,A,R,I,D,O,j,W,U;if(this._hasMaskedPath){if(U=this._pathData.m,!this._pathData.n||this._pathData._mdf){var H=U.v;this._pathData.r.v&&(H=H.reverse()),P={tLength:0,segments:[]},x=H._length-1;var K;for(O=0,g=0;g<x;g+=1)K=bez.buildBezierData(H.v[g],H.v[g+1],[H.o[g][0]-H.v[g][0],H.o[g][1]-H.v[g][1]],[H.i[g+1][0]-H.v[g+1][0],H.i[g+1][1]-H.v[g+1][1]]),P.tLength+=K.segmentLength,P.segments.push(K),O+=K.segmentLength;g=x,U.v.c&&(K=bez.buildBezierData(H.v[g],H.v[0],[H.o[g][0]-H.v[g][0],H.o[g][1]-H.v[g][1]],[H.i[0][0]-H.v[0][0],H.i[0][1]-H.v[0][1]]),P.tLength+=K.segmentLength,P.segments.push(K),O+=K.segmentLength),this._pathData.pi=P}if(P=this._pathData.pi,E=this._pathData.f.v,b=0,S=1,M=0,C=!0,I=P.segments,E<0&&U.v.c)for(P.tLength<Math.abs(E)&&(E=-Math.abs(E)%P.tLength),b=I.length-1,R=I[b].points,S=R.length-1;E<0;)E+=R[S].partialLength,S-=1,S<0&&(b-=1,R=I[b].points,S=R.length-1);R=I[b].points,A=R[S-1],T=R[S],D=T.partialLength}x=y.length,c=0,d=0;var $=e.finalSize*1.2*.714,N=!0,L,B,_,F,z;F=i.length;var V,X=-1,Y,Q,te,re=E,le=b,he=S,pe=-1,ce,ae,ue,se,Z,ne,Ce,ye,Me="",Fe=this.defaultPropsArray,Le;if(e.j===2||e.j===1){var ve=0,je=0,Ne=e.j===2?-.5:-1,Te=0,$e=!0;for(g=0;g<x;g+=1)if(y[g].n){for(ve&&(ve+=je);Te<g;)y[Te].animatorJustifyOffset=ve,Te+=1;ve=0,$e=!0}else{for(_=0;_<F;_+=1)L=i[_].a,L.t.propType&&($e&&e.j===2&&(je+=L.t.v*Ne),B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),V.length?ve+=L.t.v*V[0]*Ne:ve+=L.t.v*V*Ne);$e=!1}for(ve&&(ve+=je);Te<g;)y[Te].animatorJustifyOffset=ve,Te+=1}for(g=0;g<x;g+=1){if(a.reset(),ce=1,y[g].n)c=0,d+=e.yOffset,d+=N?1:0,E=re,N=!1,this._hasMaskedPath&&(b=le,S=he,R=I[b].points,A=R[S-1],T=R[S],D=T.partialLength,M=0),Me="",ye="",ne="",Le="",Fe=this.defaultPropsArray;else{if(this._hasMaskedPath){if(pe!==y[g].line){switch(e.j){case 1:E+=O-e.lineWidths[y[g].line];break;case 2:E+=(O-e.lineWidths[y[g].line])/2;break}pe=y[g].line}X!==y[g].ind&&(y[X]&&(E+=y[X].extra),E+=y[g].an/2,X=y[g].ind),E+=r[0]*y[g].an*.005;var we=0;for(_=0;_<F;_+=1)L=i[_].a,L.p.propType&&(B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),V.length?we+=L.p.v[0]*V[0]:we+=L.p.v[0]*V),L.a.propType&&(B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),V.length?we+=L.a.v[0]*V[0]:we+=L.a.v[0]*V);for(C=!0,this._pathData.a.v&&(E=y[0].an*.5+(O-this._pathData.f.v-y[0].an*.5-y[y.length-1].an*.5)*X/(x-1),E+=this._pathData.f.v);C;)M+D>=E+we||!R?(j=(E+we-M)/T.partialLength,Q=A.point[0]+(T.point[0]-A.point[0])*j,te=A.point[1]+(T.point[1]-A.point[1])*j,a.translate(-r[0]*y[g].an*.005,-(r[1]*$)*.01),C=!1):R&&(M+=T.partialLength,S+=1,S>=R.length&&(S=0,b+=1,I[b]?R=I[b].points:U.v.c?(S=0,b=0,R=I[b].points):(M-=T.partialLength,R=null)),R&&(A=T,T=R[S],D=T.partialLength));Y=y[g].an/2-y[g].add,a.translate(-Y,0,0)}else Y=y[g].an/2-y[g].add,a.translate(-Y,0,0),a.translate(-r[0]*y[g].an*.005,-r[1]*$*.01,0);for(_=0;_<F;_+=1)L=i[_].a,L.t.propType&&(B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),(c!==0||e.j!==0)&&(this._hasMaskedPath?V.length?E+=L.t.v*V[0]:E+=L.t.v*V:V.length?c+=L.t.v*V[0]:c+=L.t.v*V));for(e.strokeWidthAnim&&(ue=e.sw||0),e.strokeColorAnim&&(e.sc?ae=[e.sc[0],e.sc[1],e.sc[2]]:ae=[0,0,0]),e.fillColorAnim&&e.fc&&(se=[e.fc[0],e.fc[1],e.fc[2]]),_=0;_<F;_+=1)L=i[_].a,L.a.propType&&(B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),V.length?a.translate(-L.a.v[0]*V[0],-L.a.v[1]*V[1],L.a.v[2]*V[2]):a.translate(-L.a.v[0]*V,-L.a.v[1]*V,L.a.v[2]*V));for(_=0;_<F;_+=1)L=i[_].a,L.s.propType&&(B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),V.length?a.scale(1+(L.s.v[0]-1)*V[0],1+(L.s.v[1]-1)*V[1],1):a.scale(1+(L.s.v[0]-1)*V,1+(L.s.v[1]-1)*V,1));for(_=0;_<F;_+=1){if(L=i[_].a,B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),L.sk.propType&&(V.length?a.skewFromAxis(-L.sk.v*V[0],L.sa.v*V[1]):a.skewFromAxis(-L.sk.v*V,L.sa.v*V)),L.r.propType&&(V.length?a.rotateZ(-L.r.v*V[2]):a.rotateZ(-L.r.v*V)),L.ry.propType&&(V.length?a.rotateY(L.ry.v*V[1]):a.rotateY(L.ry.v*V)),L.rx.propType&&(V.length?a.rotateX(L.rx.v*V[0]):a.rotateX(L.rx.v*V)),L.o.propType&&(V.length?ce+=(L.o.v*V[0]-ce)*V[0]:ce+=(L.o.v*V-ce)*V),e.strokeWidthAnim&&L.sw.propType&&(V.length?ue+=L.sw.v*V[0]:ue+=L.sw.v*V),e.strokeColorAnim&&L.sc.propType)for(Z=0;Z<3;Z+=1)V.length?ae[Z]+=(L.sc.v[Z]-ae[Z])*V[0]:ae[Z]+=(L.sc.v[Z]-ae[Z])*V;if(e.fillColorAnim&&e.fc){if(L.fc.propType)for(Z=0;Z<3;Z+=1)V.length?se[Z]+=(L.fc.v[Z]-se[Z])*V[0]:se[Z]+=(L.fc.v[Z]-se[Z])*V;L.fh.propType&&(V.length?se=addHueToRGB(se,L.fh.v*V[0]):se=addHueToRGB(se,L.fh.v*V)),L.fs.propType&&(V.length?se=addSaturationToRGB(se,L.fs.v*V[0]):se=addSaturationToRGB(se,L.fs.v*V)),L.fb.propType&&(V.length?se=addBrightnessToRGB(se,L.fb.v*V[0]):se=addBrightnessToRGB(se,L.fb.v*V))}}for(_=0;_<F;_+=1)L=i[_].a,L.p.propType&&(B=i[_].s,V=B.getMult(y[g].anIndexes[_],s.a[_].s.totalChars),this._hasMaskedPath?V.length?a.translate(0,L.p.v[1]*V[0],-L.p.v[2]*V[1]):a.translate(0,L.p.v[1]*V,-L.p.v[2]*V):V.length?a.translate(L.p.v[0]*V[0],L.p.v[1]*V[1],-L.p.v[2]*V[2]):a.translate(L.p.v[0]*V,L.p.v[1]*V,-L.p.v[2]*V));if(e.strokeWidthAnim&&(ne=ue<0?0:ue),e.strokeColorAnim&&(Ce="rgb("+Math.round(ae[0]*255)+","+Math.round(ae[1]*255)+","+Math.round(ae[2]*255)+")"),e.fillColorAnim&&e.fc&&(ye="rgb("+Math.round(se[0]*255)+","+Math.round(se[1]*255)+","+Math.round(se[2]*255)+")"),this._hasMaskedPath){if(a.translate(0,-e.ls),a.translate(0,r[1]*$*.01+d,0),this._pathData.p.v){W=(T.point[1]-A.point[1])/(T.point[0]-A.point[0]);var Qe=Math.atan(W)*180/Math.PI;T.point[0]<A.point[0]&&(Qe+=180),a.rotate(-Qe*Math.PI/180)}a.translate(Q,te,0),E-=r[0]*y[g].an*.005,y[g+1]&&X!==y[g+1].ind&&(E+=y[g].an/2,E+=e.tr*.001*e.finalSize)}else{switch(a.translate(c,d,0),e.ps&&a.translate(e.ps[0],e.ps[1]+e.ascent,0),e.j){case 1:a.translate(y[g].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[y[g].line]),0,0);break;case 2:a.translate(y[g].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[y[g].line])/2,0,0);break}a.translate(0,-e.ls),a.translate(Y,0,0),a.translate(r[0]*y[g].an*.005,r[1]*$*.01,0),c+=y[g].l+e.tr*.001*e.finalSize}o==="html"?Me=a.toCSS():o==="svg"?Me=a.to2dCSS():Fe=[a.props[0],a.props[1],a.props[2],a.props[3],a.props[4],a.props[5],a.props[6],a.props[7],a.props[8],a.props[9],a.props[10],a.props[11],a.props[12],a.props[13],a.props[14],a.props[15]],Le=ce}u<=g?(z=new LetterProps(Le,ne,Ce,ye,Me,Fe),this.renderedLetters.push(z),u+=1,this.lettersChangedFlag=!0):(z=this.renderedLetters[g],this.lettersChangedFlag=z.update(Le,ne,Ce,ye,Me,Fe)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(e,t,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(e,t,r),this.textProperty=new TextProperty(this,e.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(e.t,this.renderType,this),this.initTransform(e,t,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(e){this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)},ITextElement.prototype.createPathShape=function(e,t){var r,i=t.length,s,a="";for(r=0;r<i;r+=1)t[r].ty==="sh"&&(s=t[r].ks.k,a+=buildShapeString(s,s.i.length,!0,e));return a},ITextElement.prototype.updateDocumentData=function(e,t){this.textProperty.updateDocumentData(e,t)},ITextElement.prototype.canResizeFont=function(e){this.textProperty.canResizeFont(e)},ITextElement.prototype.setMinimumFontSize=function(e){this.textProperty.setMinimumFontSize(e)},ITextElement.prototype.applyTextPropertiesToMatrix=function(e,t,r,i,s){switch(e.ps&&t.translate(e.ps[0],e.ps[1]+e.ascent,0),t.translate(0,-e.ls,0),e.j){case 1:t.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[r]),0,0);break;case 2:t.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[r])/2,0,0);break}t.translate(i,s,0)},ITextElement.prototype.buildColor=function(e){return"rgb("+Math.round(e[0]*255)+","+Math.round(e[1]*255)+","+Math.round(e[2]*255)+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(e,t,r){this.textSpans=[],this.renderType="svg",this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(e){for(var t=0,r=e.length,i=[],s="";t<r;)e[t]===String.fromCharCode(13)||e[t]===String.fromCharCode(3)?(i.push(s),s=""):s+=e[t],t+=1;return i.push(s),i},SVGTextLottieElement.prototype.buildShapeData=function(e,t){if(e.shapes&&e.shapes.length){var r=e.shapes[0];if(r.it){var i=r.it[r.it.length-1];i.s&&(i.s.k[0]=t,i.s.k[1]=t)}}return e},SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var e,t,r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var i=this.globalData.fontManager.getFontByName(r.f);if(i.fClass)this.layerElement.setAttribute("class",i.fClass);else{this.layerElement.setAttribute("font-family",i.fFamily);var s=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",s)}this.layerElement.setAttribute("aria-label",r.t);var o=r.l||[],u=!!this.globalData.fontManager.chars;t=o.length;var c,d=this.mHelper,g="",x=this.data.singleShape,y=0,P=0,E=!0,T=r.tr*.001*r.finalSize;if(x&&!u&&!r.sz){var M=this.textContainer,C="start";switch(r.j){case 1:C="end";break;case 2:C="middle";break;default:C="start";break}M.setAttribute("text-anchor",C),M.setAttribute("letter-spacing",T);var S=this.buildTextContents(r.finalText);for(t=S.length,P=r.ps?r.ps[1]+r.ascent:0,e=0;e<t;e+=1)c=this.textSpans[e].span||createNS("tspan"),c.textContent=S[e],c.setAttribute("x",0),c.setAttribute("y",P),c.style.display="inherit",M.appendChild(c),this.textSpans[e]||(this.textSpans[e]={span:null,glyph:null}),this.textSpans[e].span=c,P+=r.finalLineHeight;this.layerElement.appendChild(M)}else{var b=this.textSpans.length,A;for(e=0;e<t;e+=1){if(this.textSpans[e]||(this.textSpans[e]={span:null,childSpan:null,glyph:null}),!u||!x||e===0){if(c=b>e?this.textSpans[e].span:createNS(u?"g":"text"),b<=e){if(c.setAttribute("stroke-linecap","butt"),c.setAttribute("stroke-linejoin","round"),c.setAttribute("stroke-miterlimit","4"),this.textSpans[e].span=c,u){var R=createNS("g");c.appendChild(R),this.textSpans[e].childSpan=R}this.textSpans[e].span=c,this.layerElement.appendChild(c)}c.style.display="inherit"}if(d.reset(),x&&(o[e].n&&(y=-T,P+=r.yOffset,P+=E?1:0,E=!1),this.applyTextPropertiesToMatrix(r,d,o[e].line,y,P),y+=o[e].l||0,y+=T),u){A=this.globalData.fontManager.getCharData(r.finalText[e],i.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily);var I;if(A.t===1)I=new SVGCompElement(A.data,this.globalData,this);else{var D=emptyShapeData;A.data&&A.data.shapes&&(D=this.buildShapeData(A.data,r.finalSize)),I=new SVGShapeElement(D,this.globalData,this)}if(this.textSpans[e].glyph){var O=this.textSpans[e].glyph;this.textSpans[e].childSpan.removeChild(O.layerElement),O.destroy()}this.textSpans[e].glyph=I,I._debug=!0,I.prepareFrame(0),I.renderFrame(),this.textSpans[e].childSpan.appendChild(I.layerElement),A.t===1&&this.textSpans[e].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else x&&c.setAttribute("transform","translate("+d.props[12]+","+d.props[13]+")"),c.textContent=o[e].val,c.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}x&&c&&c.setAttribute("d",g)}for(;e<this.textSpans.length;)this.textSpans[e].span.style.display="none",e+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var e=this.layerElement.getBBox();this.bbox={top:e.y,left:e.x,width:e.width,height:e.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var e,t=this.textSpans.length,r;for(this.renderedFrame=this.comp.renderedFrame,e=0;e<t;e+=1)r=this.textSpans[e].glyph,r&&(r.prepareFrame(this.comp.renderedFrame-this.data.st),r._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var e,t,r=this.textAnimator.renderedLetters,i=this.textProperty.currentData.l;t=i.length;var s,a,o;for(e=0;e<t;e+=1)i[e].n||(s=r[e],a=this.textSpans[e].span,o=this.textSpans[e].glyph,o&&o.renderFrame(),s._mdf.m&&a.setAttribute("transform",s.m),s._mdf.o&&a.setAttribute("opacity",s.o),s._mdf.sw&&a.setAttribute("stroke-width",s.sw),s._mdf.sc&&a.setAttribute("stroke",s.sc),s._mdf.fc&&a.setAttribute("fill",s.fc))}};function ISolidElement(e,t,r){this.initElement(e,t,r)}extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var e=createNS("rect");e.setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.layerElement.appendChild(e)};function NullElement(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initFrame(),this.initTransform(e,t,r),this.initHierarchy()}NullElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(e){return new NullElement(e,this.globalData,this)},SVGRendererBase.prototype.createShape=function(e){return new SVGShapeElement(e,this.globalData,this)},SVGRendererBase.prototype.createText=function(e){return new SVGTextLottieElement(e,this.globalData,this)},SVGRendererBase.prototype.createImage=function(e){return new IImageElement(e,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(e){return new ISolidElement(e,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(e){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+e.w+" "+e.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",e.w),this.svgElement.setAttribute("height",e.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),this.renderConfig.focusable!==void 0&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var t=this.globalData.defs;this.setupGlobalData(e,t),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=e;var r=createNS("clipPath"),i=createNS("rect");i.setAttribute("width",e.w),i.setAttribute("height",e.h),i.setAttribute("x",0),i.setAttribute("y",0);var s=createElementID();r.setAttribute("id",s),r.appendChild(i),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+s+")"),t.appendChild(r),this.layers=e.layers,this.elements=createSizedArray(e.layers.length)},SVGRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e,t=this.layers?this.layers.length:0;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(e){var t=0,r=this.layers.length;for(t=0;t<r;t+=1)if(this.layers[t].ind===e)return t;return-1},SVGRendererBase.prototype.buildItem=function(e){var t=this.elements;if(!(t[e]||this.layers[e].ty===99)){t[e]=!0;var r=this.createItem(this.layers[e]);if(t[e]=r,getExpressionsPlugin()&&(this.layers[e].ty===0&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,e),this.layers[e].tt){var i="tp"in this.layers[e]?this.findIndexByInd(this.layers[e].tp):e-1;if(i===-1)return;if(!this.elements[i]||this.elements[i]===!0)this.buildItem(i),this.addPendingElement(r);else{var s=t[i],a=s.getMatte(this.layers[e].tt);r.setMatte(a)}}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();if(e.checkParenting(),e.data.tt)for(var t=0,r=this.elements.length;t<r;){if(this.elements[t]===e){var i="tp"in e.data?this.findIndexByInd(e.data.tp):t-1,s=this.elements[i],a=s.getMatte(this.layers[t].tt);e.setMatte(a);break}t+=1}}},SVGRendererBase.prototype.renderFrame=function(e){if(!(this.renderedFrame===e||this.destroyed)){e===null?e=this.renderedFrame:this.renderedFrame=e,this.globalData.frameNum=e,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=e,this.globalData._mdf=!1;var t,r=this.layers.length;for(this.completeLayers||this.checkLayers(e),t=r-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].prepareFrame(e-this.layers[t].st);if(this.globalData._mdf)for(t=0;t<r;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(e,t){var r=e.getBaseElement();if(r){for(var i=0,s;i<t;)this.elements[i]&&this.elements[i]!==!0&&this.elements[i].getBaseElement()&&(s=this.elements[i].getBaseElement()),i+=1;s?this.layerElement.insertBefore(r,s):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initTransform(e,t,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),(this.data.xt||!t.progressiveLoad)&&this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(e){if(this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),!(!this.isInRange&&!this.data.xt)){if(this.tm._placeholder)this.renderedFrame=e/this.data.sr;else{var t=this.tm.v;t===this.data.op&&(t=this.data.op-1),this.renderedFrame=t}var r,i=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},ICompElement.prototype.setElements=function(e){this.elements=e},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var e,t=this.layers.length;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()};function SVGCompElement(e,t,r){this.layers=e.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,t,r),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)};function SVGRenderer(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(t&&t.title){var i=createNS("title"),s=createElementID();i.setAttribute("id",s),i.textContent=t.title,this.svgElement.appendChild(i),r+=s}if(t&&t.description){var a=createNS("desc"),o=createElementID();a.setAttribute("id",o),a.textContent=t.description,this.svgElement.appendChild(a),r+=" "+o}r&&this.svgElement.setAttribute("aria-labelledby",r);var u=createNS("defs");this.svgElement.appendChild(u);var c=createNS("g");this.svgElement.appendChild(c),this.layerElement=c,this.renderConfig={preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",progressiveLoad:t&&t.progressiveLoad||!1,hideOnTransparent:!(t&&t.hideOnTransparent===!1),viewBoxOnly:t&&t.viewBoxOnly||!1,viewBoxSize:t&&t.viewBoxSize||!1,className:t&&t.className||"",id:t&&t.id||"",focusable:t&&t.focusable,filterSize:{width:t&&t.filterSize&&t.filterSize.width||"100%",height:t&&t.filterSize&&t.filterSize.height||"100%",x:t&&t.filterSize&&t.filterSize.x||"0%",y:t&&t.filterSize&&t.filterSize.y||"0%"},width:t&&t.width,height:t&&t.height,runExpressions:!t||t.runExpressions===void 0||t.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:u,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)};function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}ShapeTransformManager.prototype={addTransformSequence:function(t){var r,i=t.length,s="_";for(r=0;r<i;r+=1)s+=t[r].transform.key+"_";var a=this.sequences[s];return a||(a={transforms:[].concat(t),finalTransform:new Matrix,_mdf:!1},this.sequences[s]=a,this.sequenceList.push(a)),a},processSequence:function(t,r){for(var i=0,s=t.transforms.length,a=r;i<s&&!r;){if(t.transforms[i].transform.mProps._mdf){a=!0;break}i+=1}if(a)for(t.finalTransform.reset(),i=s-1;i>=0;i-=1)t.finalTransform.multiply(t.transforms[i].transform.mProps.v);t._mdf=a},processSequences:function(t){var r,i=this.sequenceList.length;for(r=0;r<i;r+=1)this.processSequence(this.sequenceList[r],t)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var t="__lottie_element_luma_buffer",r=null,i=null,s=null;function a(){var c=createNS("svg"),d=createNS("filter"),g=createNS("feColorMatrix");return d.setAttribute("id",t),g.setAttribute("type","matrix"),g.setAttribute("color-interpolation-filters","sRGB"),g.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),d.appendChild(g),c.appendChild(d),c.setAttribute("id",t+"_svg"),featureSupport.svgLumaHidden&&(c.style.display="none"),c}function o(){r||(s=a(),document.body.appendChild(s),r=createTag("canvas"),i=r.getContext("2d"),i.filter="url(#"+t+")",i.fillStyle="rgba(0,0,0,0)",i.fillRect(0,0,1,1))}function u(c){return r||o(),r.width=c.width,r.height=c.height,i.filter="url(#"+t+")",r}return{load:o,get:u}};function createCanvas(e,t){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(e,t);var r=createTag("canvas");return r.width=e,r.height=t,r}var assetLoader=function(){return{loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas}}(),registeredEffects={};function CVEffects(e){var t,r=e.data.ef?e.data.ef.length:0;this.filters=[];var i;for(t=0;t<r;t+=1){i=null;var s=e.data.ef[t].ty;if(registeredEffects[s]){var a=registeredEffects[s].effect;i=new a(e.effectsManager.effectElements[t],e)}i&&this.filters.push(i)}this.filters.length&&e.addRenderableComponent(this)}CVEffects.prototype.renderFrame=function(e){var t,r=this.filters.length;for(t=0;t<r;t+=1)this.filters[t].renderFrame(e)},CVEffects.prototype.getEffects=function(e){var t,r=this.filters.length,i=[];for(t=0;t<r;t+=1)this.filters[t].type===e&&i.push(this.filters[t]);return i};function registerEffect(e,t){registeredEffects[e]={effect:t}}function CVMaskElement(e,t){this.data=e,this.element=t,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var r,i=this.masksProperties.length,s=!1;for(r=0;r<i;r+=1)this.masksProperties[r].mode!=="n"&&(s=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=s,s&&this.element.addRenderableComponent(this)}CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var e=this.element.finalTransform.mat,t=this.element.canvasContext,r,i=this.masksProperties.length,s,a,o;for(t.beginPath(),r=0;r<i;r+=1)if(this.masksProperties[r].mode!=="n"){this.masksProperties[r].inv&&(t.moveTo(0,0),t.lineTo(this.element.globalData.compSize.w,0),t.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),t.lineTo(0,this.element.globalData.compSize.h),t.lineTo(0,0)),o=this.viewData[r].v,s=e.applyToPointArray(o.v[0][0],o.v[0][1],0),t.moveTo(s[0],s[1]);var u,c=o._length;for(u=1;u<c;u+=1)a=e.applyToTriplePoints(o.o[u-1],o.i[u],o.v[u]),t.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5]);a=e.applyToTriplePoints(o.o[u-1],o.i[0],o.v[0]),t.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5])}this.element.globalData.renderer.save(!0),t.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};function CVBaseElement(){}var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var t=this.globalData.canvasContext,r=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(r);var i=assetLoader.createCanvas(t.canvas.width,t.canvas.height);this.buffers.push(i),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var t=this.globalData;if(t.blendMode!==this.data.bm){t.blendMode=this.data.bm;var r=getBlendMode(this.data.bm);t.canvasContext.globalCompositeOperation=r}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){!this.hidden&&(!this.isInRange||this.isTransparent)&&(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(t){t.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var t=this.buffers[0],r=t.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var t=this.buffers[1],r=t.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform);var i=this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1);if(i.renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var s=assetLoader.getLumaCanvas(this.canvasContext.canvas),a=s.getContext("2d");a.drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(s,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(t,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(t){if(!(this.hidden||this.data.hd)&&!(this.data.td===1&&!t)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var r=this.data.ty===0;this.prepareLayer(),this.globalData.renderer.save(r),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(r),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(e,t,r,i){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var s=4;t.ty==="rc"?s=5:t.ty==="el"?s=6:t.ty==="sr"&&(s=7),this.sh=ShapePropertyFactory.getShapeProp(e,t,s,e);var a,o=r.length,u;for(a=0;a<o;a+=1)r[a].closed||(u={transforms:i.addTransformSequence(r[a].transforms),trNodes:[]},this.styledShapes.push(u),r[a].elements.push(u))}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(e,t,r){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(e,t){var r={data:e,type:e.ty,preTransforms:this.transformsManager.addTransformSequence(t),transforms:[],elements:[],closed:e.hd===!0},i={};if(e.ty==="fl"||e.ty==="st"?(i.c=PropertyFactory.getProp(this,e.c,1,255,this),i.c.k||(r.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")")):(e.ty==="gf"||e.ty==="gs")&&(i.s=PropertyFactory.getProp(this,e.s,1,null,this),i.e=PropertyFactory.getProp(this,e.e,1,null,this),i.h=PropertyFactory.getProp(this,e.h||{k:0},0,.01,this),i.a=PropertyFactory.getProp(this,e.a||{k:0},0,degToRads,this),i.g=new GradientProperty(this,e.g,this)),i.o=PropertyFactory.getProp(this,e.o,0,.01,this),e.ty==="st"||e.ty==="gs"){if(r.lc=lineCapEnum[e.lc||2],r.lj=lineJoinEnum[e.lj||2],e.lj==1&&(r.ml=e.ml),i.w=PropertyFactory.getProp(this,e.w,0,null,this),i.w.k||(r.wi=i.w.v),e.d){var s=new DashProperty(this,e.d,"canvas",this);i.d=s,i.d.k||(r.da=i.d.dashArray,r.do=i.d.dashoffset[0])}}else r.r=e.r===2?"evenodd":"nonzero";return this.stylesList.push(r),i.style=r,i},CVShapeElement.prototype.createGroupElement=function(){var e={it:[],prevViewData:[]};return e},CVShapeElement.prototype.createTransformElement=function(e){var t={transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,e.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,e,this)}};return t},CVShapeElement.prototype.createShapeElement=function(e){var t=new CVShapeData(this,e,this.stylesList,this.transformsManager);return this.shapes.push(t),this.addShapeToModifiers(t),t},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var e,t=this.itemsData.length;for(e=0;e<t;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),t=this.dynamicProperties.length,e=0;e<t;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(e){var t,r=this.stylesList.length;for(t=0;t<r;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.push(e)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var e,t=this.stylesList.length;for(e=0;e<t;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.pop()},CVShapeElement.prototype.closeStyles=function(e){var t,r=e.length;for(t=0;t<r;t+=1)e[t].closed=!0},CVShapeElement.prototype.searchShapes=function(e,t,r,i,s){var a,o=e.length-1,u,c,d=[],g=[],x,y,P,E=[].concat(s);for(a=o;a>=0;a-=1){if(x=this.searchProcessedElement(e[a]),x?t[a]=r[x-1]:e[a]._shouldRender=i,e[a].ty==="fl"||e[a].ty==="st"||e[a].ty==="gf"||e[a].ty==="gs")x?t[a].style.closed=!1:t[a]=this.createStyleElement(e[a],E),d.push(t[a].style);else if(e[a].ty==="gr"){if(!x)t[a]=this.createGroupElement(e[a]);else for(c=t[a].it.length,u=0;u<c;u+=1)t[a].prevViewData[u]=t[a].it[u];this.searchShapes(e[a].it,t[a].it,t[a].prevViewData,i,E)}else e[a].ty==="tr"?(x||(P=this.createTransformElement(e[a]),t[a]=P),E.push(t[a]),this.addTransformToStyleList(t[a])):e[a].ty==="sh"||e[a].ty==="rc"||e[a].ty==="el"||e[a].ty==="sr"?x||(t[a]=this.createShapeElement(e[a])):e[a].ty==="tm"||e[a].ty==="rd"||e[a].ty==="pb"||e[a].ty==="zz"||e[a].ty==="op"?(x?(y=t[a],y.closed=!1):(y=ShapeModifiers.getModifier(e[a].ty),y.init(this,e[a]),t[a]=y,this.shapeModifiers.push(y)),g.push(y)):e[a].ty==="rp"&&(x?(y=t[a],y.closed=!0):(y=ShapeModifiers.getModifier(e[a].ty),t[a]=y,y.init(this,e,a,t),this.shapeModifiers.push(y),i=!1),g.push(y));this.addProcessedElement(e[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(d),o=g.length,a=0;a<o;a+=1)g[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(e,t){(e._opMdf||t.op._mdf||this._isFirstFrame)&&(t.opacity=e.opacity,t.opacity*=t.op.v,t._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var e,t=this.stylesList.length,r,i,s,a,o,u,c=this.globalData.renderer,d=this.globalData.canvasContext,g,x;for(e=0;e<t;e+=1)if(x=this.stylesList[e],g=x.type,!((g==="st"||g==="gs")&&x.wi===0||!x.data._shouldRender||x.coOp===0||this.globalData.currentGlobalAlpha===0)){for(c.save(),o=x.elements,g==="st"||g==="gs"?(c.ctxStrokeStyle(g==="st"?x.co:x.grd),c.ctxLineWidth(x.wi),c.ctxLineCap(x.lc),c.ctxLineJoin(x.lj),c.ctxMiterLimit(x.ml||0)):c.ctxFillStyle(g==="fl"?x.co:x.grd),c.ctxOpacity(x.coOp),g!=="st"&&g!=="gs"&&d.beginPath(),c.ctxTransform(x.preTransforms.finalTransform.props),i=o.length,r=0;r<i;r+=1){for((g==="st"||g==="gs")&&(d.beginPath(),x.da&&(d.setLineDash(x.da),d.lineDashOffset=x.do)),u=o[r].trNodes,a=u.length,s=0;s<a;s+=1)u[s].t==="m"?d.moveTo(u[s].p[0],u[s].p[1]):u[s].t==="c"?d.bezierCurveTo(u[s].pts[0],u[s].pts[1],u[s].pts[2],u[s].pts[3],u[s].pts[4],u[s].pts[5]):d.closePath();(g==="st"||g==="gs")&&(c.ctxStroke(),x.da&&d.setLineDash(this.dashResetter))}g!=="st"&&g!=="gs"&&this.globalData.renderer.ctxFill(x.r),c.restore()}},CVShapeElement.prototype.renderShape=function(e,t,r,i){var s,a=t.length-1,o;for(o=e,s=a;s>=0;s-=1)t[s].ty==="tr"?(o=r[s].transform,this.renderShapeTransform(e,o)):t[s].ty==="sh"||t[s].ty==="el"||t[s].ty==="rc"||t[s].ty==="sr"?this.renderPath(t[s],r[s]):t[s].ty==="fl"?this.renderFill(t[s],r[s],o):t[s].ty==="st"?this.renderStroke(t[s],r[s],o):t[s].ty==="gf"||t[s].ty==="gs"?this.renderGradientFill(t[s],r[s],o):t[s].ty==="gr"?this.renderShape(o,t[s].it,r[s].it):t[s].ty;i&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(e,t){if(this._isFirstFrame||t._mdf||e.transforms._mdf){var r=e.trNodes,i=t.paths,s,a,o,u=i._length;r.length=0;var c=e.transforms.finalTransform;for(o=0;o<u;o+=1){var d=i.shapes[o];if(d&&d.v){for(a=d._length,s=1;s<a;s+=1)s===1&&r.push({t:"m",p:c.applyToPointArray(d.v[0][0],d.v[0][1],0)}),r.push({t:"c",pts:c.applyToTriplePoints(d.o[s-1],d.i[s],d.v[s])});a===1&&r.push({t:"m",p:c.applyToPointArray(d.v[0][0],d.v[0][1],0)}),d.c&&a&&(r.push({t:"c",pts:c.applyToTriplePoints(d.o[s-1],d.i[0],d.v[0])}),r.push({t:"z"}))}}e.trNodes=r}},CVShapeElement.prototype.renderPath=function(e,t){if(e.hd!==!0&&e._shouldRender){var r,i=t.styledShapes.length;for(r=0;r<i;r+=1)this.renderStyledShape(t.styledShapes[r],t.sh)}},CVShapeElement.prototype.renderFill=function(e,t,r){var i=t.style;(t.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=t.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(e,t,r){var i=t.style,s;if(!i.grd||t.g._mdf||t.s._mdf||t.e._mdf||e.t!==1&&(t.h._mdf||t.a._mdf)){var a=this.globalData.canvasContext,o=t.s.v,u=t.e.v;if(e.t===1)s=a.createLinearGradient(o[0],o[1],u[0],u[1]);else{var c=Math.sqrt(Math.pow(o[0]-u[0],2)+Math.pow(o[1]-u[1],2)),d=Math.atan2(u[1]-o[1],u[0]-o[0]),g=t.h.v;g>=1?g=.99:g<=-1&&(g=-.99);var x=c*g,y=Math.cos(d+t.a.v)*x+o[0],P=Math.sin(d+t.a.v)*x+o[1];s=a.createRadialGradient(y,P,0,o[0],o[1],c)}var E,T=e.g.p,M=t.g.c,C=1;for(E=0;E<T;E+=1)t.g._hasOpacity&&t.g._collapsable&&(C=t.g.o[E*2+1]),s.addColorStop(M[E*4]/100,"rgba("+M[E*4+1]+","+M[E*4+2]+","+M[E*4+3]+","+C+")");i.grd=s}i.coOp=t.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(e,t,r){var i=t.style,s=t.d;s&&(s._mdf||this._isFirstFrame)&&(i.da=s.dashArray,i.do=s.dashoffset[0]),(t.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(t.c.v[0])+","+bmFloor(t.c.v[1])+","+bmFloor(t.c.v[2])+")"),(t.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=t.o.v*r.opacity),(t.w._mdf||this._isFirstFrame)&&(i.wi=t.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0};function CVTextElement(e,t,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var t=!1;e.fc?(t=!0,this.values.fill=this.buildColor(e.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=t;var r=!1;e.sc&&(r=!0,this.values.stroke=this.buildColor(e.sc),this.values.sWidth=e.sw);var i=this.globalData.fontManager.getFontByName(e.f),s,a,o=e.l,u=this.mHelper;this.stroke=r,this.values.fValue=e.finalSize+"px "+this.globalData.fontManager.getFontByName(e.f).fFamily,a=e.finalText.length;var c,d,g,x,y,P,E,T,M,C,S=this.data.singleShape,b=e.tr*.001*e.finalSize,A=0,R=0,I=!0,D=0;for(s=0;s<a;s+=1){c=this.globalData.fontManager.getCharData(e.finalText[s],i.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily),d=c&&c.data||{},u.reset(),S&&o[s].n&&(A=-b,R+=e.yOffset,R+=I?1:0,I=!1),y=d.shapes?d.shapes[0].it:[],E=y.length,u.scale(e.finalSize/100,e.finalSize/100),S&&this.applyTextPropertiesToMatrix(e,u,o[s].line,A,R),M=createSizedArray(E-1);var O=0;for(P=0;P<E;P+=1)if(y[P].ty==="sh"){for(x=y[P].ks.k.i.length,T=y[P].ks.k,C=[],g=1;g<x;g+=1)g===1&&C.push(u.applyToX(T.v[0][0],T.v[0][1],0),u.applyToY(T.v[0][0],T.v[0][1],0)),C.push(u.applyToX(T.o[g-1][0],T.o[g-1][1],0),u.applyToY(T.o[g-1][0],T.o[g-1][1],0),u.applyToX(T.i[g][0],T.i[g][1],0),u.applyToY(T.i[g][0],T.i[g][1],0),u.applyToX(T.v[g][0],T.v[g][1],0),u.applyToY(T.v[g][0],T.v[g][1],0));C.push(u.applyToX(T.o[g-1][0],T.o[g-1][1],0),u.applyToY(T.o[g-1][0],T.o[g-1][1],0),u.applyToX(T.i[0][0],T.i[0][1],0),u.applyToY(T.i[0][0],T.i[0][1],0),u.applyToX(T.v[0][0],T.v[0][1],0),u.applyToY(T.v[0][0],T.v[0][1],0)),M[O]=C,O+=1}S&&(A+=o[s].l,A+=b),this.textSpans[D]?this.textSpans[D].elem=M:this.textSpans[D]={elem:M},D+=1}},CVTextElement.prototype.renderInnerContent=function(){this.validateText();var e=this.canvasContext;e.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var t,r,i,s,a,o,u=this.textAnimator.renderedLetters,c=this.textProperty.currentData.l;r=c.length;var d,g=null,x=null,y=null,P,E,T=this.globalData.renderer;for(t=0;t<r;t+=1)if(!c[t].n){if(d=u[t],d&&(T.save(),T.ctxTransform(d.p),T.ctxOpacity(d.o)),this.fill){for(d&&d.fc?g!==d.fc&&(T.ctxFillStyle(d.fc),g=d.fc):g!==this.values.fill&&(g=this.values.fill,T.ctxFillStyle(this.values.fill)),P=this.textSpans[t].elem,s=P.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(E=P[i],o=E.length,this.globalData.canvasContext.moveTo(E[0],E[1]),a=2;a<o;a+=6)this.globalData.canvasContext.bezierCurveTo(E[a],E[a+1],E[a+2],E[a+3],E[a+4],E[a+5]);this.globalData.canvasContext.closePath(),T.ctxFill()}if(this.stroke){for(d&&d.sw?y!==d.sw&&(y=d.sw,T.ctxLineWidth(d.sw)):y!==this.values.sWidth&&(y=this.values.sWidth,T.ctxLineWidth(this.values.sWidth)),d&&d.sc?x!==d.sc&&(x=d.sc,T.ctxStrokeStyle(d.sc)):x!==this.values.stroke&&(x=this.values.stroke,T.ctxStrokeStyle(this.values.stroke)),P=this.textSpans[t].elem,s=P.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(E=P[i],o=E.length,this.globalData.canvasContext.moveTo(E[0],E[1]),a=2;a<o;a+=6)this.globalData.canvasContext.bezierCurveTo(E[a],E[a+1],E[a+2],E[a+3],E[a+4],E[a+5]);this.globalData.canvasContext.closePath(),T.ctxStroke()}d&&this.globalData.renderer.restore()}};function CVImageElement(e,t,r){this.assetData=t.getAssetData(e.refId),this.img=t.imageLoader.getAsset(this.assetData),this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var e=createTag("canvas");e.width=this.assetData.w,e.height=this.assetData.h;var t=e.getContext("2d"),r=this.img.width,i=this.img.height,s=r/i,a=this.assetData.w/this.assetData.h,o,u,c=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>a&&c==="xMidYMid slice"||s<a&&c!=="xMidYMid slice"?(u=i,o=u*a):(o=r,u=o/a),t.drawImage(this.img,(r-o)/2,(i-u)/2,o,u,0,0,this.assetData.w,this.assetData.h),this.img=e}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null};function CVSolidElement(e,t,r){this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(e){return new CVShapeElement(e,this.globalData,this)},CanvasRendererBase.prototype.createText=function(e){return new CVTextElement(e,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(e){return new CVImageElement(e,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(e){return new CVSolidElement(e,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(e){e[0]===1&&e[1]===0&&e[4]===0&&e[5]===1&&e[12]===0&&e[13]===0||this.canvasContext.transform(e[0],e[1],e[4],e[5],e[12],e[13])},CanvasRendererBase.prototype.ctxOpacity=function(e){this.canvasContext.globalAlpha*=e<0?0:e},CanvasRendererBase.prototype.ctxFillStyle=function(e){this.canvasContext.fillStyle=e},CanvasRendererBase.prototype.ctxStrokeStyle=function(e){this.canvasContext.strokeStyle=e},CanvasRendererBase.prototype.ctxLineWidth=function(e){this.canvasContext.lineWidth=e},CanvasRendererBase.prototype.ctxLineCap=function(e){this.canvasContext.lineCap=e},CanvasRendererBase.prototype.ctxLineJoin=function(e){this.canvasContext.lineJoin=e},CanvasRendererBase.prototype.ctxMiterLimit=function(e){this.canvasContext.miterLimit=e},CanvasRendererBase.prototype.ctxFill=function(e){this.canvasContext.fill(e)},CanvasRendererBase.prototype.ctxFillRect=function(e,t,r,i){this.canvasContext.fillRect(e,t,r,i)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}this.contextData.reset()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(e){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}e&&(this.globalData.blendMode="source-over"),this.contextData.restore(e)},CanvasRendererBase.prototype.configAnimation=function(e){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var t=this.animationItem.container.style;t.width="100%",t.height="100%";var r="0px 0px 0px";t.transformOrigin=r,t.mozTransformOrigin=r,t.webkitTransformOrigin=r,t["-webkit-transform"]=r,t.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=e,this.layers=e.layers,this.transformCanvas={w:e.w,h:e.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(e,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(e.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(e,t){this.reset();var r,i;e?(r=e,i=t,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=i):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,i=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=i*this.renderConfig.dpr);var s,a;if(this.renderConfig.preserveAspectRatio.indexOf("meet")!==-1||this.renderConfig.preserveAspectRatio.indexOf("slice")!==-1){var o=this.renderConfig.preserveAspectRatio.split(" "),u=o[1]||"meet",c=o[0]||"xMidYMid",d=c.substr(0,4),g=c.substr(4);s=r/i,a=this.transformCanvas.w/this.transformCanvas.h,a>s&&u==="meet"||a<s&&u==="slice"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr)),d==="xMid"&&(a<s&&u==="meet"||a>s&&u==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))/2*this.renderConfig.dpr:d==="xMax"&&(a<s&&u==="meet"||a>s&&u==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))*this.renderConfig.dpr:this.transformCanvas.tx=0,g==="YMid"&&(a>s&&u==="meet"||a<s&&u==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:g==="YMax"&&(a>s&&u==="meet"||a<s&&u==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:this.transformCanvas.ty=0}else this.renderConfig.preserveAspectRatio==="none"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText="");var e,t=this.layers?this.layers.length:0;for(e=t-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(e,t){if(!(this.renderedFrame===e&&this.renderConfig.clearCanvas===!0&&!t||this.destroyed||e===-1)){this.renderedFrame=e,this.globalData.frameNum=e-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||t,this.globalData.projectInterface.currentFrame=e;var r,i=this.layers.length;for(this.completeLayers||this.checkLayers(e),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(e-this.layers[r].st);if(this.globalData._mdf){for(this.renderConfig.clearCanvas===!0?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();this.renderConfig.clearCanvas!==!0&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(e){var t=this.elements;if(!(t[e]||this.layers[e].ty===99)){var r=this.createItem(this.layers[e],this,this.globalData);t[e]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();e.checkParenting()}},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"};function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){this.stack=[],this.cArrPos=0,this.cTr=new Matrix;var e,t=15;for(e=0;e<t;e+=1){var r=new CanvasContext;this.stack[e]=r}this._length=t,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}CVContextData.prototype.duplicate=function(){var e=this._length*2,t=0;for(t=this._length;t<e;t+=1)this.stack[t]=new CanvasContext;this._length=e},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(e){this.cArrPos-=1;var t=this.stack[this.cArrPos],r=t.transform,i,s=this.cTr.props;for(i=0;i<16;i+=1)s[i]=r[i];if(e){this.nativeContext.restore();var a=this.stack[this.cArrPos+1];this.appliedFillStyle=a.fillStyle,this.appliedStrokeStyle=a.strokeStyle,this.appliedLineWidth=a.lineWidth,this.appliedLineCap=a.lineCap,this.appliedLineJoin=a.lineJoin,this.appliedMiterLimit=a.miterLimit}this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),(e||t.opacity!==-1&&this.currentOpacity!==t.opacity)&&(this.nativeContext.globalAlpha=t.opacity,this.currentOpacity=t.opacity),this.currentFillStyle=t.fillStyle,this.currentStrokeStyle=t.strokeStyle,this.currentLineWidth=t.lineWidth,this.currentLineCap=t.lineCap,this.currentLineJoin=t.lineJoin,this.currentMiterLimit=t.miterLimit},CVContextData.prototype.save=function(e){e&&this.nativeContext.save();var t=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r=this.stack[this.cArrPos],i;for(i=0;i<16;i+=1)r.transform[i]=t[i];this.cArrPos+=1;var s=this.stack[this.cArrPos];s.opacity=r.opacity,s.fillStyle=r.fillStyle,s.strokeStyle=r.strokeStyle,s.lineWidth=r.lineWidth,s.lineCap=r.lineCap,s.lineJoin=r.lineJoin,s.miterLimit=r.miterLimit},CVContextData.prototype.setOpacity=function(e){this.stack[this.cArrPos].opacity=e},CVContextData.prototype.setContext=function(e){this.nativeContext=e},CVContextData.prototype.fillStyle=function(e){this.stack[this.cArrPos].fillStyle!==e&&(this.currentFillStyle=e,this.stack[this.cArrPos].fillStyle=e)},CVContextData.prototype.strokeStyle=function(e){this.stack[this.cArrPos].strokeStyle!==e&&(this.currentStrokeStyle=e,this.stack[this.cArrPos].strokeStyle=e)},CVContextData.prototype.lineWidth=function(e){this.stack[this.cArrPos].lineWidth!==e&&(this.currentLineWidth=e,this.stack[this.cArrPos].lineWidth=e)},CVContextData.prototype.lineCap=function(e){this.stack[this.cArrPos].lineCap!==e&&(this.currentLineCap=e,this.stack[this.cArrPos].lineCap=e)},CVContextData.prototype.lineJoin=function(e){this.stack[this.cArrPos].lineJoin!==e&&(this.currentLineJoin=e,this.stack[this.cArrPos].lineJoin=e)},CVContextData.prototype.miterLimit=function(e){this.stack[this.cArrPos].miterLimit!==e&&(this.currentMiterLimit=e,this.stack[this.cArrPos].miterLimit=e)},CVContextData.prototype.transform=function(e){this.transformMat.cloneFromProps(e);var t=this.cTr;this.transformMat.multiply(t),t.cloneFromProps(this.transformMat.props);var r=t.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(e){var t=this.stack[this.cArrPos].opacity;t*=e<0?0:e,this.stack[this.cArrPos].opacity!==t&&(this.currentOpacity!==e&&(this.nativeContext.globalAlpha=e,this.currentOpacity=e),this.stack[this.cArrPos].opacity=t)},CVContextData.prototype.fill=function(e){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(e)},CVContextData.prototype.fillRect=function(e,t,r,i){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(e,t,r,i)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()};function CVCompElement(e,t,r){this.completeLayers=!1,this.layers=e.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(e,t,r),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var e=this.canvasContext;e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip();var t,r=this.layers.length;for(t=r-1;t>=0;t-=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},CVCompElement.prototype.destroy=function(){var e,t=this.layers.length;for(e=t-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)};function CanvasRenderer(e,t){this.animationItem=e,this.renderConfig={clearCanvas:t&&t.clearCanvas!==void 0?t.clearCanvas:!0,context:t&&t.context||null,progressiveLoad:t&&t.progressiveLoad||!1,preserveAspectRatio:t&&t.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:t&&t.contentVisibility||"visible",className:t&&t.className||"",id:t&&t.id||"",runExpressions:!t||t.runExpressions===void 0||t.runExpressions},this.renderConfig.dpr=t&&t.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=t&&t.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.bm!==0&&this.setBlendMode()},renderElement:function(){var t=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var r=this.finalTransform.mat.toCSS();t.transform=r,t.webkitTransform=r}this.finalTransform._opMdf&&(t.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(e,t,r){this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var e;this.data.hasMask?(e=createNS("rect"),e.setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(e=createTag("div"),e.style.width=this.data.sw+"px",e.style.height=this.data.sh+"px",e.style.backgroundColor=this.data.sc),this.layerElement.appendChild(e)};function HShapeElement(e,t,r){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(e,t,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var e;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),e=this.svgElement;else{e=createNS("svg");var t=this.comp.data?this.comp.data:this.globalData.compSize;e.setAttribute("width",t.w),e.setAttribute("height",t.h),e.appendChild(this.shapesContainer),this.layerElement.appendChild(e)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=e},HShapeElement.prototype.getTransformedPoint=function(e,t){var r,i=e.length;for(r=0;r<i;r+=1)t=e[r].mProps.v.applyToPointArray(t[0],t[1],0);return t},HShapeElement.prototype.calculateShapeBoundingBox=function(e,t){var r=e.sh.v,i=e.transformers,s,a=r._length,o,u,c,d;if(!(a<=1)){for(s=0;s<a-1;s+=1)o=this.getTransformedPoint(i,r.v[s]),u=this.getTransformedPoint(i,r.o[s]),c=this.getTransformedPoint(i,r.i[s+1]),d=this.getTransformedPoint(i,r.v[s+1]),this.checkBounds(o,u,c,d,t);r.c&&(o=this.getTransformedPoint(i,r.v[s]),u=this.getTransformedPoint(i,r.o[s]),c=this.getTransformedPoint(i,r.i[0]),d=this.getTransformedPoint(i,r.v[0]),this.checkBounds(o,u,c,d,t))}},HShapeElement.prototype.checkBounds=function(e,t,r,i,s){this.getBoundsOfCurve(e,t,r,i);var a=this.shapeBoundingBox;s.x=bmMin(a.left,s.x),s.xMax=bmMax(a.right,s.xMax),s.y=bmMin(a.top,s.y),s.yMax=bmMax(a.bottom,s.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(e,t,r,i){for(var s=[[e[0],i[0]],[e[1],i[1]]],a,o,u,c,d,g,x,y=0;y<2;++y)o=6*e[y]-12*t[y]+6*r[y],a=-3*e[y]+9*t[y]-9*r[y]+3*i[y],u=3*t[y]-3*e[y],o|=0,a|=0,u|=0,a===0&&o===0||(a===0?(c=-u/o,c>0&&c<1&&s[y].push(this.calculateF(c,e,t,r,i,y))):(d=o*o-4*u*a,d>=0&&(g=(-o+bmSqrt(d))/(2*a),g>0&&g<1&&s[y].push(this.calculateF(g,e,t,r,i,y)),x=(-o-bmSqrt(d))/(2*a),x>0&&x<1&&s[y].push(this.calculateF(x,e,t,r,i,y)))));this.shapeBoundingBox.left=bmMin.apply(null,s[0]),this.shapeBoundingBox.top=bmMin.apply(null,s[1]),this.shapeBoundingBox.right=bmMax.apply(null,s[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,s[1])},HShapeElement.prototype.calculateF=function(e,t,r,i,s,a){return bmPow(1-e,3)*t[a]+3*bmPow(1-e,2)*e*r[a]+3*(1-e)*bmPow(e,2)*i[a]+bmPow(e,3)*s[a]},HShapeElement.prototype.calculateBoundingBox=function(e,t){var r,i=e.length;for(r=0;r<i;r+=1)e[r]&&e[r].sh?this.calculateShapeBoundingBox(e[r],t):e[r]&&e[r].it?this.calculateBoundingBox(e[r].it,t):e[r]&&e[r].style&&e[r].w&&this.expandStrokeBoundingBox(e[r].w,t)},HShapeElement.prototype.expandStrokeBoundingBox=function(e,t){var r=0;if(e.keyframes){for(var i=0;i<e.keyframes.length;i+=1){var s=e.keyframes[i].s;s>r&&(r=s)}r*=e.mult}else r=e.v*e.mult;t.x-=r,t.xMax+=r,t.y-=r,t.yMax+=r},HShapeElement.prototype.currentBoxContains=function(e){return this.currentBBox.x<=e.x&&this.currentBBox.y<=e.y&&this.currentBBox.width+this.currentBBox.x>=e.x+e.width&&this.currentBBox.height+this.currentBBox.y>=e.y+e.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var e=this.tempBoundingBox,t=999999;if(e.x=t,e.xMax=-t,e.y=t,e.yMax=-t,this.calculateBoundingBox(this.itemsData,e),e.width=e.xMax<e.x?0:e.xMax-e.x,e.height=e.yMax<e.y?0:e.yMax-e.y,this.currentBoxContains(e))return;var r=!1;if(this.currentBBox.w!==e.width&&(this.currentBBox.w=e.width,this.shapeCont.setAttribute("width",e.width),r=!0),this.currentBBox.h!==e.height&&(this.currentBBox.h=e.height,this.shapeCont.setAttribute("height",e.height),r=!0),r||this.currentBBox.x!==e.x||this.currentBBox.y!==e.y){this.currentBBox.w=e.width,this.currentBBox.h=e.height,this.currentBBox.x=e.x,this.currentBBox.y=e.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var i=this.shapeCont.style,s="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";i.transform=s,i.webkitTransform=s}}};function HTextElement(e,t,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var e=createNS("g");this.maskedElement.appendChild(e),this.innerElem=e}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var t=this.innerElem.style,r=e.fc?this.buildColor(e.fc):"rgba(0,0,0,0)";t.fill=r,t.color=r,e.sc&&(t.stroke=this.buildColor(e.sc),t.strokeWidth=e.sw+"px");var i=this.globalData.fontManager.getFontByName(e.f);if(!this.globalData.fontManager.chars)if(t.fontSize=e.finalSize+"px",t.lineHeight=e.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{t.fontFamily=i.fFamily;var s=e.fWeight,a=e.fStyle;t.fontStyle=a,t.fontWeight=s}var o,u,c=e.l;u=c.length;var d,g,x,y=this.mHelper,P,E="",T=0;for(o=0;o<u;o+=1){if(this.globalData.fontManager.chars?(this.textPaths[T]?d=this.textPaths[T]:(d=createNS("path"),d.setAttribute("stroke-linecap",lineCapEnum[1]),d.setAttribute("stroke-linejoin",lineJoinEnum[2]),d.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[T]?(g=this.textSpans[T],x=g.children[0]):(g=createTag("div"),g.style.lineHeight=0,x=createNS("svg"),x.appendChild(d),styleDiv(g)))):this.isMasked?d=this.textPaths[T]?this.textPaths[T]:createNS("text"):this.textSpans[T]?(g=this.textSpans[T],d=this.textPaths[T]):(g=createTag("span"),styleDiv(g),d=createTag("span"),styleDiv(d),g.appendChild(d)),this.globalData.fontManager.chars){var M=this.globalData.fontManager.getCharData(e.finalText[o],i.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily),C;if(M?C=M.data:C=null,y.reset(),C&&C.shapes&&C.shapes.length&&(P=C.shapes[0].it,y.scale(e.finalSize/100,e.finalSize/100),E=this.createPathShape(y,P),d.setAttribute("d",E)),this.isMasked)this.innerElem.appendChild(d);else{if(this.innerElem.appendChild(g),C&&C.shapes){document.body.appendChild(x);var S=x.getBBox();x.setAttribute("width",S.width+2),x.setAttribute("height",S.height+2),x.setAttribute("viewBox",S.x-1+" "+(S.y-1)+" "+(S.width+2)+" "+(S.height+2));var b=x.style,A="translate("+(S.x-1)+"px,"+(S.y-1)+"px)";b.transform=A,b.webkitTransform=A,c[o].yOffset=S.y-1}else x.setAttribute("width",1),x.setAttribute("height",1);g.appendChild(x)}}else if(d.textContent=c[o].val,d.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(d);else{this.innerElem.appendChild(g);var R=d.style,I="translate3d(0,"+-e.finalSize/1.2+"px,0)";R.transform=I,R.webkitTransform=I}this.isMasked?this.textSpans[T]=d:this.textSpans[T]=g,this.textSpans[T].style.display="block",this.textPaths[T]=d,T+=1}for(;T<this.textSpans.length;)this.textSpans[T].style.display="none",T+=1},HTextElement.prototype.renderInnerContent=function(){this.validateText();var e;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),e=this.svgElement.style;var t="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";e.transform=t,e.webkitTransform=t}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),!(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag)){var r,i,s=0,a=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;i=o.length;var u,c,d;for(r=0;r<i;r+=1)o[r].n?s+=1:(c=this.textSpans[r],d=this.textPaths[r],u=a[s],s+=1,u._mdf.m&&(this.isMasked?c.setAttribute("transform",u.m):(c.style.webkitTransform=u.m,c.style.transform=u.m)),c.style.opacity=u.o,u.sw&&u._mdf.sw&&d.setAttribute("stroke-width",u.sw),u.sc&&u._mdf.sc&&d.setAttribute("stroke",u.sc),u.fc&&u._mdf.fc&&(d.setAttribute("fill",u.fc),d.style.color=u.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var g=this.innerElem.getBBox();this.currentBBox.w!==g.width&&(this.currentBBox.w=g.width,this.svgElement.setAttribute("width",g.width)),this.currentBBox.h!==g.height&&(this.currentBBox.h=g.height,this.svgElement.setAttribute("height",g.height));var x=1;if(this.currentBBox.w!==g.width+x*2||this.currentBBox.h!==g.height+x*2||this.currentBBox.x!==g.x-x||this.currentBBox.y!==g.y-x){this.currentBBox.w=g.width+x*2,this.currentBBox.h=g.height+x*2,this.currentBBox.x=g.x-x,this.currentBBox.y=g.y-x,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),e=this.svgElement.style;var y="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";e.transform=y,e.webkitTransform=y}}}};function HCameraElement(e,t,r){this.initFrame(),this.initBaseData(e,t,r),this.initHierarchy();var i=PropertyFactory.getProp;if(this.pe=i(this,e.pe,0,0,this),e.ks.p.s?(this.px=i(this,e.ks.p.x,1,0,this),this.py=i(this,e.ks.p.y,1,0,this),this.pz=i(this,e.ks.p.z,1,0,this)):this.p=i(this,e.ks.p,1,0,this),e.ks.a&&(this.a=i(this,e.ks.a,1,0,this)),e.ks.or.k.length&&e.ks.or.k[0].to){var s,a=e.ks.or.k.length;for(s=0;s<a;s+=1)e.ks.or.k[s].to=null,e.ks.or.k[s].ti=null}this.or=i(this,e.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=i(this,e.ks.rx,0,degToRads,this),this.ry=i(this,e.ks.ry,0,degToRads,this),this.rz=i(this,e.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var e,t=this.comp.threeDElements.length,r,i,s;for(e=0;e<t;e+=1)if(r=this.comp.threeDElements[e],r.type==="3d"){i=r.perspectiveElem.style,s=r.container.style;var a=this.pe.v+"px",o="0px 0px 0px",u="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";i.perspective=a,i.webkitPerspective=a,s.transformOrigin=o,s.mozTransformOrigin=o,s.webkitTransformOrigin=o,i.transform=u,i.webkitTransform=u}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var e=this._isFirstFrame,t,r;if(this.hierarchy)for(r=this.hierarchy.length,t=0;t<r;t+=1)e=this.hierarchy[t].finalTransform.mProp._mdf||e;if(e||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(r=this.hierarchy.length-1,t=r;t>=0;t-=1){var i=this.hierarchy[t].finalTransform.mProp;this.mat.translate(-i.p.v[0],-i.p.v[1],i.p.v[2]),this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]),this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v),this.mat.scale(1/i.s.v[0],1/i.s.v[1],1/i.s.v[2]),this.mat.translate(i.a.v[0],i.a.v[1],i.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var s;this.p?s=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:s=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)+Math.pow(s[2],2)),o=[s[0]/a,s[1]/a,s[2]/a],u=Math.sqrt(o[2]*o[2]+o[0]*o[0]),c=Math.atan2(o[1],u),d=Math.atan2(o[0],-o[2]);this.mat.rotateY(d).rotateX(-c)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var g=!this._prevMat.equals(this.mat);if((g||this.pe._mdf)&&this.comp.threeDElements){r=this.comp.threeDElements.length;var x,y,P;for(t=0;t<r;t+=1)if(x=this.comp.threeDElements[t],x.type==="3d"){if(g){var E=this.mat.toCSS();P=x.container.style,P.transform=E,P.webkitTransform=E}this.pe._mdf&&(y=x.perspectiveElem.style,y.perspective=this.pe.v+"px",y.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null};function HImageElement(e,t,r){this.assetData=t.getAssetData(e.refId),this.initElement(e,t,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData),t=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(t),t.crossOrigin="anonymous",t.src=e,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)};function HybridRendererBase(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:t&&t.className||"",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(t&&t.hideOnTransparent===!1),filterSize:{width:t&&t.filterSize&&t.filterSize.width||"400%",height:t&&t.filterSize&&t.filterSize.height||"400%",x:t&&t.filterSize&&t.filterSize.x||"-100%",y:t&&t.filterSize&&t.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();e.checkParenting()}},HybridRendererBase.prototype.appendElementInPos=function(e,t){var r=e.getBaseElement();if(r){var i=this.layers[t];if(!i.ddd||!this.supports3d)if(this.threeDElements)this.addTo3dContainer(r,t);else{for(var s=0,a,o,u;s<t;)this.elements[s]&&this.elements[s]!==!0&&this.elements[s].getBaseElement&&(o=this.elements[s],u=this.layers[s].ddd?this.getThreeDContainerByPos(s):o.getBaseElement(),a=u||a),s+=1;a?(!i.ddd||!this.supports3d)&&this.layerElement.insertBefore(r,a):(!i.ddd||!this.supports3d)&&this.layerElement.appendChild(r)}else this.addTo3dContainer(r,t)}},HybridRendererBase.prototype.createShape=function(e){return this.supports3d?new HShapeElement(e,this.globalData,this):new SVGShapeElement(e,this.globalData,this)},HybridRendererBase.prototype.createText=function(e){return this.supports3d?new HTextElement(e,this.globalData,this):new SVGTextLottieElement(e,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(e){return this.camera=new HCameraElement(e,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(e){return this.supports3d?new HImageElement(e,this.globalData,this):new IImageElement(e,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(e){return this.supports3d?new HSolidElement(e,this.globalData,this):new ISolidElement(e,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(e){for(var t=0,r=this.threeDElements.length;t<r;){if(this.threeDElements[t].startPos<=e&&this.threeDElements[t].endPos>=e)return this.threeDElements[t].perspectiveElem;t+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(e,t){var r=createTag("div"),i,s;styleDiv(r);var a=createTag("div");if(styleDiv(a),t==="3d"){i=r.style,i.width=this.globalData.compSize.w+"px",i.height=this.globalData.compSize.h+"px";var o="50% 50%";i.webkitTransformOrigin=o,i.mozTransformOrigin=o,i.transformOrigin=o,s=a.style;var u="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";s.transform=u,s.webkitTransform=u}r.appendChild(a);var c={container:a,perspectiveElem:r,startPos:e,endPos:e,type:t};return this.threeDElements.push(c),c},HybridRendererBase.prototype.build3dContainers=function(){var e,t=this.layers.length,r,i="";for(e=0;e<t;e+=1)this.layers[e].ddd&&this.layers[e].ty!==3?(i!=="3d"&&(i="3d",r=this.createThreeDContainer(e,"3d")),r.endPos=Math.max(r.endPos,e)):(i!=="2d"&&(i="2d",r=this.createThreeDContainer(e,"2d")),r.endPos=Math.max(r.endPos,e));for(t=this.threeDElements.length,e=t-1;e>=0;e-=1)this.resizerElem.appendChild(this.threeDElements[e].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(e,t){for(var r=0,i=this.threeDElements.length;r<i;){if(t<=this.threeDElements[r].endPos){for(var s=this.threeDElements[r].startPos,a;s<t;)this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s].getBaseElement()),s+=1;a?this.threeDElements[r].container.insertBefore(e,a):this.threeDElements[r].container.appendChild(e);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(e){var t=createTag("div"),r=this.animationItem.wrapper,i=t.style;i.width=e.w+"px",i.height=e.h+"px",this.resizerElem=t,styleDiv(t),i.transformStyle="flat",i.mozTransformStyle="flat",i.webkitTransformStyle="flat",this.renderConfig.className&&t.setAttribute("class",this.renderConfig.className),r.appendChild(t),i.overflow="hidden";var s=createNS("svg");s.setAttribute("width","1"),s.setAttribute("height","1"),styleDiv(s),this.resizerElem.appendChild(s);var a=createNS("defs");s.appendChild(a),this.data=e,this.setupGlobalData(e,s),this.globalData.defs=a,this.layers=e.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e,t=this.layers?this.layers.length:0;for(e=0;e<t;e+=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var e=this.animationItem.wrapper.offsetWidth,t=this.animationItem.wrapper.offsetHeight,r=e/t,i=this.globalData.compSize.w/this.globalData.compSize.h,s,a,o,u;i>r?(s=e/this.globalData.compSize.w,a=e/this.globalData.compSize.w,o=0,u=(t-this.globalData.compSize.h*(e/this.globalData.compSize.w))/2):(s=t/this.globalData.compSize.h,a=t/this.globalData.compSize.h,o=(e-this.globalData.compSize.w*(t/this.globalData.compSize.h))/2,u=0);var c=this.resizerElem.style;c.webkitTransform="matrix3d("+s+",0,0,0,0,"+a+",0,0,0,0,1,0,"+o+","+u+",0,1)",c.transform=c.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var e=this.globalData.compSize.w,t=this.globalData.compSize.h,r,i=this.threeDElements.length;for(r=0;r<i;r+=1){var s=this.threeDElements[r].perspectiveElem.style;s.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(t,2))+"px",s.perspective=s.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(e){var t,r=e.length,i=createTag("div");for(t=0;t<r;t+=1)if(e[t].xt){var s=this.createComp(e[t],i,this.globalData.comp,null);s.initExpressions(),this.globalData.projectInterface.registerComposition(s)}};function HCompElement(e,t,r){this.layers=e.layers,this.supports3d=!e.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,t,r),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,t.frameRate,this):{_placeholder:!0}}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(e,t){for(var r=0,i;r<t;)this.elements[r]&&this.elements[r].getBaseElement&&(i=this.elements[r].getBaseElement()),r+=1;i?this.layerElement.insertBefore(e,i):this.layerElement.appendChild(e)},HCompElement.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)};function HybridRenderer(e,t){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:t&&t.className||"",imagePreserveAspectRatio:t&&t.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(t&&t.hideOnTransparent===!1),filterSize:{width:t&&t.filterSize&&t.filterSize.width||"400%",height:t&&t.filterSize&&t.filterSize.height||"400%",x:t&&t.filterSize&&t.filterSize.x||"-100%",y:t&&t.filterSize&&t.filterSize.y||"-100%"},runExpressions:!t||t.runExpressions===void 0||t.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)};var CompExpressionInterface=function(){return function(e){function t(r){for(var i=0,s=e.layers.length;i<s;){if(e.layers[i].nm===r||e.layers[i].ind===r)return e.elements[i].layerInterface;i+=1}return null}return Object.defineProperty(t,"_name",{value:e.data.nm}),t.layer=t,t.pixelAspect=1,t.height=e.data.h||e.globalData.compSize.h,t.width=e.data.w||e.globalData.compSize.w,t.pixelAspect=1,t.frameDuration=1/e.globalData.frameRate,t.displayStartTime=0,t.numLayers=e.layers.length,t}}();function _typeof$2(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$2=function(r){return typeof r}:_typeof$2=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$2(e)}function seedRandom(e,t){var r=this,i=256,s=6,a=52,o="random",u=t.pow(i,s),c=t.pow(2,a),d=c*2,g=i-1,x;function y(b,A,R){var I=[];A=A===!0?{entropy:!0}:A||{};var D=M(T(A.entropy?[b,S(e)]:b===null?C():b,3),I),O=new P(I),j=function(){for(var U=O.g(s),H=u,K=0;U<c;)U=(U+K)*i,H*=i,K=O.g(1);for(;U>=d;)U/=2,H/=2,K>>>=1;return(U+K)/H};return j.int32=function(){return O.g(4)|0},j.quick=function(){return O.g(4)/4294967296},j.double=j,M(S(O.S),e),(A.pass||R||function(W,U,H,K){return K&&(K.S&&E(K,O),W.state=function(){return E(O,{})}),H?(t[o]=W,U):W})(j,D,"global"in A?A.global:this==t,A.state)}t["seed"+o]=y;function P(b){var A,R=b.length,I=this,D=0,O=I.i=I.j=0,j=I.S=[];for(R||(b=[R++]);D<i;)j[D]=D++;for(D=0;D<i;D++)j[D]=j[O=g&O+b[D%R]+(A=j[D])],j[O]=A;I.g=function(W){for(var U,H=0,K=I.i,$=I.j,N=I.S;W--;)U=N[K=g&K+1],H=H*i+N[g&(N[K]=N[$=g&$+U])+(N[$]=U)];return I.i=K,I.j=$,H}}function E(b,A){return A.i=b.i,A.j=b.j,A.S=b.S.slice(),A}function T(b,A){var R=[],I=_typeof$2(b),D;if(A&&I=="object")for(D in b)try{R.push(T(b[D],A-1))}catch{}return R.length?R:I=="string"?b:b+"\0"}function M(b,A){for(var R=b+"",I,D=0;D<R.length;)A[g&D]=g&(I^=A[g&D]*19)+R.charCodeAt(D++);return S(A)}function C(){try{var b=new Uint8Array(i);return(r.crypto||r.msCrypto).getRandomValues(b),S(b)}catch{var A=r.navigator,R=A&&A.plugins;return[+new Date,r,R,r.screen,S(e)]}}function S(b){return String.fromCharCode.apply(0,b)}M(t.random(),e)}function initialize$2(e){seedRandom([],e)}var propTypes={SHAPE:"shape"};function _typeof$1(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$1=function(r){return typeof r}:_typeof$1=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$1(e)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(e){return e.constructor===Array||e.constructor===Float32Array}function isNumerable(e,t){return e==="number"||t instanceof Number||e==="boolean"||e==="string"}function $bm_neg(e){var t=_typeof$1(e);if(t==="number"||e instanceof Number||t==="boolean")return-e;if($bm_isInstanceOfArray(e)){var r,i=e.length,s=[];for(r=0;r<i;r+=1)s[r]=-e[r];return s}return e.propType?e.v:-e}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(e,t){var r=_typeof$1(e),i=_typeof$1(t);if(isNumerable(r,e)&&isNumerable(i,t)||r==="string"||i==="string")return e+t;if($bm_isInstanceOfArray(e)&&isNumerable(i,t))return e=e.slice(0),e[0]+=t,e;if(isNumerable(r,e)&&$bm_isInstanceOfArray(t))return t=t.slice(0),t[0]=e+t[0],t;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(t)){for(var s=0,a=e.length,o=t.length,u=[];s<a||s<o;)(typeof e[s]=="number"||e[s]instanceof Number)&&(typeof t[s]=="number"||t[s]instanceof Number)?u[s]=e[s]+t[s]:u[s]=t[s]===void 0?e[s]:e[s]||t[s],s+=1;return u}return 0}var add=sum;function sub(e,t){var r=_typeof$1(e),i=_typeof$1(t);if(isNumerable(r,e)&&isNumerable(i,t))return r==="string"&&(e=parseInt(e,10)),i==="string"&&(t=parseInt(t,10)),e-t;if($bm_isInstanceOfArray(e)&&isNumerable(i,t))return e=e.slice(0),e[0]-=t,e;if(isNumerable(r,e)&&$bm_isInstanceOfArray(t))return t=t.slice(0),t[0]=e-t[0],t;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(t)){for(var s=0,a=e.length,o=t.length,u=[];s<a||s<o;)(typeof e[s]=="number"||e[s]instanceof Number)&&(typeof t[s]=="number"||t[s]instanceof Number)?u[s]=e[s]-t[s]:u[s]=t[s]===void 0?e[s]:e[s]||t[s],s+=1;return u}return 0}function mul(e,t){var r=_typeof$1(e),i=_typeof$1(t),s;if(isNumerable(r,e)&&isNumerable(i,t))return e*t;var a,o;if($bm_isInstanceOfArray(e)&&isNumerable(i,t)){for(o=e.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=e[a]*t;return s}if(isNumerable(r,e)&&$bm_isInstanceOfArray(t)){for(o=t.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=e*t[a];return s}return 0}function div(e,t){var r=_typeof$1(e),i=_typeof$1(t),s;if(isNumerable(r,e)&&isNumerable(i,t))return e/t;var a,o;if($bm_isInstanceOfArray(e)&&isNumerable(i,t)){for(o=e.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=e[a]/t;return s}if(isNumerable(r,e)&&$bm_isInstanceOfArray(t)){for(o=t.length,s=createTypedArray("float32",o),a=0;a<o;a+=1)s[a]=e/t[a];return s}return 0}function mod(e,t){return typeof e=="string"&&(e=parseInt(e,10)),typeof t=="string"&&(t=parseInt(t,10)),e%t}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(e,t,r){if(t>r){var i=r;r=t,t=i}return Math.min(Math.max(e,t),r)}function radiansToDegrees(e){return e/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(e){return e*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(e,t){if(typeof e=="number"||e instanceof Number)return t=t||0,Math.abs(e-t);t||(t=helperLengthArray);var r,i=Math.min(e.length,t.length),s=0;for(r=0;r<i;r+=1)s+=Math.pow(t[r]-e[r],2);return Math.sqrt(s)}function normalize(e){return div(e,length(e))}function rgbToHsl(e){var t=e[0],r=e[1],i=e[2],s=Math.max(t,r,i),a=Math.min(t,r,i),o,u,c=(s+a)/2;if(s===a)o=0,u=0;else{var d=s-a;switch(u=c>.5?d/(2-s-a):d/(s+a),s){case t:o=(r-i)/d+(r<i?6:0);break;case r:o=(i-t)/d+2;break;case i:o=(t-r)/d+4;break}o/=6}return[o,u,c,e[3]]}function hue2rgb(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+(t-e)*6*r:r<1/2?t:r<2/3?e+(t-e)*(2/3-r)*6:e}function hslToRgb(e){var t=e[0],r=e[1],i=e[2],s,a,o;if(r===0)s=i,o=i,a=i;else{var u=i<.5?i*(1+r):i+r-i*r,c=2*i-u;s=hue2rgb(c,u,t+1/3),a=hue2rgb(c,u,t),o=hue2rgb(c,u,t-1/3)}return[s,a,o,e[3]]}function linear(e,t,r,i,s){if((i===void 0||s===void 0)&&(i=t,s=r,t=0,r=1),r<t){var a=r;r=t,t=a}if(e<=t)return i;if(e>=r)return s;var o=r===t?0:(e-t)/(r-t);if(!i.length)return i+(s-i)*o;var u,c=i.length,d=createTypedArray("float32",c);for(u=0;u<c;u+=1)d[u]=i[u]+(s[u]-i[u])*o;return d}function random(e,t){if(t===void 0&&(e===void 0?(e=0,t=1):(t=e,e=void 0)),t.length){var r,i=t.length;e||(e=createTypedArray("float32",i));var s=createTypedArray("float32",i),a=BMMath.random();for(r=0;r<i;r+=1)s[r]=e[r]+a*(t[r]-e[r]);return s}e===void 0&&(e=0);var o=BMMath.random();return e+o*(t-e)}function createPath(e,t,r,i){var s,a=e.length,o=shapePool.newElement();o.setPathData(!!i,a);var u=[0,0],c,d;for(s=0;s<a;s+=1)c=t&&t[s]?t[s]:u,d=r&&r[s]?r[s]:u,o.setTripleAt(e[s][0],e[s][1],d[0]+e[s][0],d[1]+e[s][1],c[0]+e[s][0],c[1]+e[s][1],s,!0);return o}function initiateExpression(elem,data,property){function noOp(e){return e}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=val.indexOf("random")!==-1,elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||this.data.hd!==!0,wiggle=(function e(t,r){var i,s,a=this.pv.length?this.pv.length:1,o=createTypedArray("float32",a);t=5;var u=Math.floor(time*t);for(i=0,s=0;i<u;){for(s=0;s<a;s+=1)o[s]+=-r+r*2*BMMath.random();i+=1}var c=time*t,d=c-Math.floor(c),g=createTypedArray("float32",a);if(a>1){for(s=0;s<a;s+=1)g[s]=this.pv[s]+o[s]+(-r+r*2*BMMath.random())*d;return g}return this.pv+o[0]+(-r+r*2*BMMath.random())*d}).bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty));function loopInDuration(e,t){return loopIn(e,t,!0)}function loopOutDuration(e,t){return loopOut(e,t,!0)}this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(e,t){var r=[t[0]-e[0],t[1]-e[1],t[2]-e[2]],i=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads,s=-Math.atan2(r[1],r[2])/degToRads;return[s,i,0]}function easeOut(e,t,r,i,s){return applyEase(easeOutBez,e,t,r,i,s)}function easeIn(e,t,r,i,s){return applyEase(easeInBez,e,t,r,i,s)}function ease(e,t,r,i,s){return applyEase(easeInOutBez,e,t,r,i,s)}function applyEase(e,t,r,i,s,a){s===void 0?(s=r,a=i):t=(t-r)/(i-r),t>1?t=1:t<0&&(t=0);var o=e(t);if($bm_isInstanceOfArray(s)){var u,c=s.length,d=createTypedArray("float32",c);for(u=0;u<c;u+=1)d[u]=(a[u]-s[u])*o+s[u];return d}return(a-s)*o+s}function nearestKey(e){var t,r=data.k.length,i,s;if(!data.k.length||typeof data.k[0]=="number")i=0,s=0;else if(i=-1,e*=elem.comp.globalData.frameRate,e<data.k[0].t)i=1,s=data.k[0].t;else{for(t=0;t<r-1;t+=1)if(e===data.k[t].t){i=t+1,s=data.k[t].t;break}else if(e>data.k[t].t&&e<data.k[t+1].t){e-data.k[t].t>data.k[t+1].t-e?(i=t+2,s=data.k[t+1].t):(i=t+1,s=data.k[t].t);break}i===-1&&(i=t+1,s=data.k[t].t)}var a={};return a.index=i,a.time=s/elem.comp.globalData.frameRate,a}function key(e){var t,r,i;if(!data.k.length||typeof data.k[0]=="number")throw new Error("The property has no keyframe at index "+e);e-=1,t={time:data.k[e].t/elem.comp.globalData.frameRate,value:[]};var s=Object.prototype.hasOwnProperty.call(data.k[e],"s")?data.k[e].s:data.k[e-1].e;for(i=s.length,r=0;r<i;r+=1)t[r]=s[r],t.value[r]=s[r];return t}function framesToTime(e,t){return t||(t=elem.comp.globalData.frameRate),e/t}function timeToFrames(e,t){return!e&&e!==0&&(e=time),t||(t=elem.comp.globalData.frameRate),e*t}function seedRandom(e){BMMath.seedrandom(randSeed+e)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(e,t){return typeof value=="string"?t===void 0?value.substring(e):value.substring(e,t):""}function substr(e,t){return typeof value=="string"?t===void 0?value.substr(e):value.substr(e,t):""}function posterizeTime(e){time=e===0?0:Math.floor(time*e)/e,value=valueAtTime(time)}var time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!!(elem.hierarchy&&elem.hierarchy.length),parent,randSeed=Math.floor(Math.random()*1e6),globalData=elem.globalData;function executeExpression(e){return value=e,this.frameExpressionId===elem.globalData.frameId&&this.propType!=="textSelector"?value:(this.propType==="textSelector"&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),elemType===4&&!content&&(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!!(elem.hierarchy&&elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt,scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var e={};e.initExpressions=t,e.resetFrame=ExpressionManager.resetFrame;function t(r){var i=0,s=[];function a(){i+=1}function o(){i-=1,i===0&&c()}function u(d){s.indexOf(d)===-1&&s.push(d)}function c(){var d,g=s.length;for(d=0;d<g;d+=1)s[d].release();s.length=0}r.renderer.compInterface=CompExpressionInterface(r.renderer),r.renderer.globalData.projectInterface.registerComposition(r.renderer),r.renderer.globalData.pushExpression=a,r.renderer.globalData.popExpression=o,r.renderer.globalData.registerExpressionProperty=u}return e}(),MaskManagerInterface=function(){function e(r,i){this._mask=r,this._data=i}Object.defineProperty(e.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(e.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),this._mask.op.v*100}});var t=function(i){var s=createSizedArray(i.viewData.length),a,o=i.viewData.length;for(a=0;a<o;a+=1)s[a]=new e(i.viewData[a],i.masksProperties[a]);var u=function(d){for(a=0;a<o;){if(i.masksProperties[a].nm===d)return s[a];a+=1}return null};return u};return t}(),ExpressionPropertyInterface=function(){var e={pv:0,v:0,mult:1},t={pv:[0,0,0],v:[0,0,0],mult:1};function r(o,u,c){Object.defineProperty(o,"velocity",{get:function(){return u.getVelocityAtTime(u.comp.currentFrame)}}),o.numKeys=u.keyframes?u.keyframes.length:0,o.key=function(d){if(!o.numKeys)return 0;var g="";"s"in u.keyframes[d-1]?g=u.keyframes[d-1].s:"e"in u.keyframes[d-2]?g=u.keyframes[d-2].e:g=u.keyframes[d-2].s;var x=c==="unidimensional"?new Number(g):Object.assign({},g);return x.time=u.keyframes[d-1].t/u.elem.comp.globalData.frameRate,x.value=c==="unidimensional"?g[0]:g,x},o.valueAtTime=u.getValueAtTime,o.speedAtTime=u.getSpeedAtTime,o.velocityAtTime=u.getVelocityAtTime,o.propertyGroup=u.propertyGroup}function i(o){(!o||!("pv"in o))&&(o=e);var u=1/o.mult,c=o.pv*u,d=new Number(c);return d.value=c,r(d,o,"unidimensional"),function(){return o.k&&o.getValue(),c=o.v*u,d.value!==c&&(d=new Number(c),d.value=c,r(d,o,"unidimensional")),d}}function s(o){(!o||!("pv"in o))&&(o=t);var u=1/o.mult,c=o.data&&o.data.l||o.pv.length,d=createTypedArray("float32",c),g=createTypedArray("float32",c);return d.value=g,r(d,o,"multidimensional"),function(){o.k&&o.getValue();for(var x=0;x<c;x+=1)g[x]=o.v[x]*u,d[x]=g[x];return d}}function a(){return e}return function(o){return o?o.propType==="unidimensional"?i(o):s(o):a}}(),TransformExpressionInterface=function(){return function(e){function t(o){switch(o){case"scale":case"Scale":case"ADBE Scale":case 6:return t.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return t.rotation;case"ADBE Rotate X":return t.xRotation;case"ADBE Rotate Y":return t.yRotation;case"position":case"Position":case"ADBE Position":case 2:return t.position;case"ADBE Position_0":return t.xPosition;case"ADBE Position_1":return t.yPosition;case"ADBE Position_2":return t.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return t.anchorPoint;case"opacity":case"Opacity":case 11:return t.opacity;default:return null}}Object.defineProperty(t,"rotation",{get:ExpressionPropertyInterface(e.r||e.rz)}),Object.defineProperty(t,"zRotation",{get:ExpressionPropertyInterface(e.rz||e.r)}),Object.defineProperty(t,"xRotation",{get:ExpressionPropertyInterface(e.rx)}),Object.defineProperty(t,"yRotation",{get:ExpressionPropertyInterface(e.ry)}),Object.defineProperty(t,"scale",{get:ExpressionPropertyInterface(e.s)});var r,i,s,a;return e.p?a=ExpressionPropertyInterface(e.p):(r=ExpressionPropertyInterface(e.px),i=ExpressionPropertyInterface(e.py),e.pz&&(s=ExpressionPropertyInterface(e.pz))),Object.defineProperty(t,"position",{get:function(){return e.p?a():[r(),i(),s?s():0]}}),Object.defineProperty(t,"xPosition",{get:ExpressionPropertyInterface(e.px)}),Object.defineProperty(t,"yPosition",{get:ExpressionPropertyInterface(e.py)}),Object.defineProperty(t,"zPosition",{get:ExpressionPropertyInterface(e.pz)}),Object.defineProperty(t,"anchorPoint",{get:ExpressionPropertyInterface(e.a)}),Object.defineProperty(t,"opacity",{get:ExpressionPropertyInterface(e.o)}),Object.defineProperty(t,"skew",{get:ExpressionPropertyInterface(e.sk)}),Object.defineProperty(t,"skewAxis",{get:ExpressionPropertyInterface(e.sa)}),Object.defineProperty(t,"orientation",{get:ExpressionPropertyInterface(e.or)}),t}}(),LayerExpressionInterface=function(){function e(d){var g=new Matrix;if(d!==void 0){var x=this._elem.finalTransform.mProp.getValueAtTime(d);x.clone(g)}else{var y=this._elem.finalTransform.mProp;y.applyToMatrix(g)}return g}function t(d,g){var x=this.getMatrix(g);return x.props[12]=0,x.props[13]=0,x.props[14]=0,this.applyPoint(x,d)}function r(d,g){var x=this.getMatrix(g);return this.applyPoint(x,d)}function i(d,g){var x=this.getMatrix(g);return x.props[12]=0,x.props[13]=0,x.props[14]=0,this.invertPoint(x,d)}function s(d,g){var x=this.getMatrix(g);return this.invertPoint(x,d)}function a(d,g){if(this._elem.hierarchy&&this._elem.hierarchy.length){var x,y=this._elem.hierarchy.length;for(x=0;x<y;x+=1)this._elem.hierarchy[x].finalTransform.mProp.applyToMatrix(d)}return d.applyToPointArray(g[0],g[1],g[2]||0)}function o(d,g){if(this._elem.hierarchy&&this._elem.hierarchy.length){var x,y=this._elem.hierarchy.length;for(x=0;x<y;x+=1)this._elem.hierarchy[x].finalTransform.mProp.applyToMatrix(d)}return d.inversePoint(g)}function u(d){var g=new Matrix;if(g.reset(),this._elem.finalTransform.mProp.applyToMatrix(g),this._elem.hierarchy&&this._elem.hierarchy.length){var x,y=this._elem.hierarchy.length;for(x=0;x<y;x+=1)this._elem.hierarchy[x].finalTransform.mProp.applyToMatrix(g);return g.inversePoint(d)}return g.inversePoint(d)}function c(){return[1,1,1,1]}return function(d){var g;function x(T){P.mask=new MaskManagerInterface(T,d)}function y(T){P.effect=T}function P(T){switch(T){case"ADBE Root Vectors Group":case"Contents":case 2:return P.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return g;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return P.effect;case"ADBE Text Properties":return P.textInterface;default:return null}}P.getMatrix=e,P.invertPoint=o,P.applyPoint=a,P.toWorld=r,P.toWorldVec=t,P.fromWorld=s,P.fromWorldVec=i,P.toComp=r,P.fromComp=u,P.sampleImage=c,P.sourceRectAtTime=d.sourceRectAtTime.bind(d),P._elem=d,g=TransformExpressionInterface(d.finalTransform.mProp);var E=getDescriptor(g,"anchorPoint");return Object.defineProperties(P,{hasParent:{get:function(){return d.hierarchy.length}},parent:{get:function(){return d.hierarchy[0].layerInterface}},rotation:getDescriptor(g,"rotation"),scale:getDescriptor(g,"scale"),position:getDescriptor(g,"position"),opacity:getDescriptor(g,"opacity"),anchorPoint:E,anchor_point:E,transform:{get:function(){return g}},active:{get:function(){return d.isInRange}}}),P.startTime=d.data.st,P.index=d.data.ind,P.source=d.data.refId,P.height=d.data.ty===0?d.data.h:100,P.width=d.data.ty===0?d.data.w:100,P.inPoint=d.data.ip/d.comp.globalData.frameRate,P.outPoint=d.data.op/d.comp.globalData.frameRate,P._name=d.data.nm,P.registerMaskInterface=x,P.registerEffectsInterface=y,P}}(),propertyGroupFactory=function(){return function(e,t){return function(r){return r=r===void 0?1:r,r<=0?e:t(r-1)}}}(),PropertyInterface=function(){return function(e,t){var r={_name:e};function i(s){return s=s===void 0?1:s,s<=0?r:t(s-1)}return i}}(),EffectsExpressionInterface=function(){var e={createEffectsInterface:t};function t(s,a){if(s.effectsManager){var o=[],u=s.data.ef,c,d=s.effectsManager.effectElements.length;for(c=0;c<d;c+=1)o.push(r(u[c],s.effectsManager.effectElements[c],a,s));var g=s.data.ef||[],x=function(P){for(c=0,d=g.length;c<d;){if(P===g[c].nm||P===g[c].mn||P===g[c].ix)return o[c];c+=1}return null};return Object.defineProperty(x,"numProperties",{get:function(){return g.length}}),x}return null}function r(s,a,o,u){function c(P){for(var E=s.ef,T=0,M=E.length;T<M;){if(P===E[T].nm||P===E[T].mn||P===E[T].ix)return E[T].ty===5?g[T]:g[T]();T+=1}throw new Error}var d=propertyGroupFactory(c,o),g=[],x,y=s.ef.length;for(x=0;x<y;x+=1)s.ef[x].ty===5?g.push(r(s.ef[x],a.effectElements[x],a.effectElements[x].propertyGroup,u)):g.push(i(a.effectElements[x],s.ef[x].ty,u,d));return s.mn==="ADBE Color Control"&&Object.defineProperty(c,"color",{get:function(){return g[0]()}}),Object.defineProperties(c,{numProperties:{get:function(){return s.np}},_name:{value:s.nm},propertyGroup:{value:d}}),c.enabled=s.en!==0,c.active=c.enabled,c}function i(s,a,o,u){var c=ExpressionPropertyInterface(s.p);function d(){return a===10?o.comp.compInterface(s.p.v):c()}return s.p.setGroupProperty&&s.p.setGroupProperty(PropertyInterface("",u)),d}return e}(),ShapePathInterface=function(){return function(t,r,i){var s=r.sh;function a(u){return u==="Shape"||u==="shape"||u==="Path"||u==="path"||u==="ADBE Vector Shape"||u===2?a.path:null}var o=propertyGroupFactory(a,i);return s.setGroupProperty(PropertyInterface("Path",o)),Object.defineProperties(a,{path:{get:function(){return s.k&&s.getValue(),s}},shape:{get:function(){return s.k&&s.getValue(),s}},_name:{value:t.nm},ix:{value:t.ix},propertyIndex:{value:t.ix},mn:{value:t.mn},propertyGroup:{value:i}}),a}}(),ShapeExpressionInterface=function(){function e(E,T,M){var C=[],S,b=E?E.length:0;for(S=0;S<b;S+=1)E[S].ty==="gr"?C.push(r(E[S],T[S],M)):E[S].ty==="fl"?C.push(i(E[S],T[S],M)):E[S].ty==="st"?C.push(o(E[S],T[S],M)):E[S].ty==="tm"?C.push(u(E[S],T[S],M)):E[S].ty==="tr"||(E[S].ty==="el"?C.push(d(E[S],T[S],M)):E[S].ty==="sr"?C.push(g(E[S],T[S],M)):E[S].ty==="sh"?C.push(ShapePathInterface(E[S],T[S],M)):E[S].ty==="rc"?C.push(x(E[S],T[S],M)):E[S].ty==="rd"?C.push(y(E[S],T[S],M)):E[S].ty==="rp"?C.push(P(E[S],T[S],M)):E[S].ty==="gf"?C.push(s(E[S],T[S],M)):C.push(a(E[S],T[S])));return C}function t(E,T,M){var C,S=function(R){for(var I=0,D=C.length;I<D;){if(C[I]._name===R||C[I].mn===R||C[I].propertyIndex===R||C[I].ix===R||C[I].ind===R)return C[I];I+=1}return typeof R=="number"?C[R-1]:null};S.propertyGroup=propertyGroupFactory(S,M),C=e(E.it,T.it,S.propertyGroup),S.numProperties=C.length;var b=c(E.it[E.it.length-1],T.it[T.it.length-1],S.propertyGroup);return S.transform=b,S.propertyIndex=E.cix,S._name=E.nm,S}function r(E,T,M){var C=function(R){switch(R){case"ADBE Vectors Group":case"Contents":case 2:return C.content;default:return C.transform}};C.propertyGroup=propertyGroupFactory(C,M);var S=t(E,T,C.propertyGroup),b=c(E.it[E.it.length-1],T.it[T.it.length-1],C.propertyGroup);return C.content=S,C.transform=b,Object.defineProperty(C,"_name",{get:function(){return E.nm}}),C.numProperties=E.np,C.propertyIndex=E.ix,C.nm=E.nm,C.mn=E.mn,C}function i(E,T,M){function C(S){return S==="Color"||S==="color"?C.color:S==="Opacity"||S==="opacity"?C.opacity:null}return Object.defineProperties(C,{color:{get:ExpressionPropertyInterface(T.c)},opacity:{get:ExpressionPropertyInterface(T.o)},_name:{value:E.nm},mn:{value:E.mn}}),T.c.setGroupProperty(PropertyInterface("Color",M)),T.o.setGroupProperty(PropertyInterface("Opacity",M)),C}function s(E,T,M){function C(S){return S==="Start Point"||S==="start point"?C.startPoint:S==="End Point"||S==="end point"?C.endPoint:S==="Opacity"||S==="opacity"?C.opacity:null}return Object.defineProperties(C,{startPoint:{get:ExpressionPropertyInterface(T.s)},endPoint:{get:ExpressionPropertyInterface(T.e)},opacity:{get:ExpressionPropertyInterface(T.o)},type:{get:function(){return"a"}},_name:{value:E.nm},mn:{value:E.mn}}),T.s.setGroupProperty(PropertyInterface("Start Point",M)),T.e.setGroupProperty(PropertyInterface("End Point",M)),T.o.setGroupProperty(PropertyInterface("Opacity",M)),C}function a(){function E(){return null}return E}function o(E,T,M){var C=propertyGroupFactory(D,M),S=propertyGroupFactory(I,C);function b(O){Object.defineProperty(I,E.d[O].nm,{get:ExpressionPropertyInterface(T.d.dataProps[O].p)})}var A,R=E.d?E.d.length:0,I={};for(A=0;A<R;A+=1)b(A),T.d.dataProps[A].p.setGroupProperty(S);function D(O){return O==="Color"||O==="color"?D.color:O==="Opacity"||O==="opacity"?D.opacity:O==="Stroke Width"||O==="stroke width"?D.strokeWidth:null}return Object.defineProperties(D,{color:{get:ExpressionPropertyInterface(T.c)},opacity:{get:ExpressionPropertyInterface(T.o)},strokeWidth:{get:ExpressionPropertyInterface(T.w)},dash:{get:function(){return I}},_name:{value:E.nm},mn:{value:E.mn}}),T.c.setGroupProperty(PropertyInterface("Color",C)),T.o.setGroupProperty(PropertyInterface("Opacity",C)),T.w.setGroupProperty(PropertyInterface("Stroke Width",C)),D}function u(E,T,M){function C(b){return b===E.e.ix||b==="End"||b==="end"?C.end:b===E.s.ix?C.start:b===E.o.ix?C.offset:null}var S=propertyGroupFactory(C,M);return C.propertyIndex=E.ix,T.s.setGroupProperty(PropertyInterface("Start",S)),T.e.setGroupProperty(PropertyInterface("End",S)),T.o.setGroupProperty(PropertyInterface("Offset",S)),C.propertyIndex=E.ix,C.propertyGroup=M,Object.defineProperties(C,{start:{get:ExpressionPropertyInterface(T.s)},end:{get:ExpressionPropertyInterface(T.e)},offset:{get:ExpressionPropertyInterface(T.o)},_name:{value:E.nm}}),C.mn=E.mn,C}function c(E,T,M){function C(b){return E.a.ix===b||b==="Anchor Point"?C.anchorPoint:E.o.ix===b||b==="Opacity"?C.opacity:E.p.ix===b||b==="Position"?C.position:E.r.ix===b||b==="Rotation"||b==="ADBE Vector Rotation"?C.rotation:E.s.ix===b||b==="Scale"?C.scale:E.sk&&E.sk.ix===b||b==="Skew"?C.skew:E.sa&&E.sa.ix===b||b==="Skew Axis"?C.skewAxis:null}var S=propertyGroupFactory(C,M);return T.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",S)),T.transform.mProps.p.setGroupProperty(PropertyInterface("Position",S)),T.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",S)),T.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",S)),T.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",S)),T.transform.mProps.sk&&(T.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",S)),T.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",S))),T.transform.op.setGroupProperty(PropertyInterface("Opacity",S)),Object.defineProperties(C,{opacity:{get:ExpressionPropertyInterface(T.transform.mProps.o)},position:{get:ExpressionPropertyInterface(T.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(T.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(T.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(T.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(T.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(T.transform.mProps.sa)},_name:{value:E.nm}}),C.ty="tr",C.mn=E.mn,C.propertyGroup=M,C}function d(E,T,M){function C(A){return E.p.ix===A?C.position:E.s.ix===A?C.size:null}var S=propertyGroupFactory(C,M);C.propertyIndex=E.ix;var b=T.sh.ty==="tm"?T.sh.prop:T.sh;return b.s.setGroupProperty(PropertyInterface("Size",S)),b.p.setGroupProperty(PropertyInterface("Position",S)),Object.defineProperties(C,{size:{get:ExpressionPropertyInterface(b.s)},position:{get:ExpressionPropertyInterface(b.p)},_name:{value:E.nm}}),C.mn=E.mn,C}function g(E,T,M){function C(A){return E.p.ix===A?C.position:E.r.ix===A?C.rotation:E.pt.ix===A?C.points:E.or.ix===A||A==="ADBE Vector Star Outer Radius"?C.outerRadius:E.os.ix===A?C.outerRoundness:E.ir&&(E.ir.ix===A||A==="ADBE Vector Star Inner Radius")?C.innerRadius:E.is&&E.is.ix===A?C.innerRoundness:null}var S=propertyGroupFactory(C,M),b=T.sh.ty==="tm"?T.sh.prop:T.sh;return C.propertyIndex=E.ix,b.or.setGroupProperty(PropertyInterface("Outer Radius",S)),b.os.setGroupProperty(PropertyInterface("Outer Roundness",S)),b.pt.setGroupProperty(PropertyInterface("Points",S)),b.p.setGroupProperty(PropertyInterface("Position",S)),b.r.setGroupProperty(PropertyInterface("Rotation",S)),E.ir&&(b.ir.setGroupProperty(PropertyInterface("Inner Radius",S)),b.is.setGroupProperty(PropertyInterface("Inner Roundness",S))),Object.defineProperties(C,{position:{get:ExpressionPropertyInterface(b.p)},rotation:{get:ExpressionPropertyInterface(b.r)},points:{get:ExpressionPropertyInterface(b.pt)},outerRadius:{get:ExpressionPropertyInterface(b.or)},outerRoundness:{get:ExpressionPropertyInterface(b.os)},innerRadius:{get:ExpressionPropertyInterface(b.ir)},innerRoundness:{get:ExpressionPropertyInterface(b.is)},_name:{value:E.nm}}),C.mn=E.mn,C}function x(E,T,M){function C(A){return E.p.ix===A?C.position:E.r.ix===A?C.roundness:E.s.ix===A||A==="Size"||A==="ADBE Vector Rect Size"?C.size:null}var S=propertyGroupFactory(C,M),b=T.sh.ty==="tm"?T.sh.prop:T.sh;return C.propertyIndex=E.ix,b.p.setGroupProperty(PropertyInterface("Position",S)),b.s.setGroupProperty(PropertyInterface("Size",S)),b.r.setGroupProperty(PropertyInterface("Rotation",S)),Object.defineProperties(C,{position:{get:ExpressionPropertyInterface(b.p)},roundness:{get:ExpressionPropertyInterface(b.r)},size:{get:ExpressionPropertyInterface(b.s)},_name:{value:E.nm}}),C.mn=E.mn,C}function y(E,T,M){function C(A){return E.r.ix===A||A==="Round Corners 1"?C.radius:null}var S=propertyGroupFactory(C,M),b=T;return C.propertyIndex=E.ix,b.rd.setGroupProperty(PropertyInterface("Radius",S)),Object.defineProperties(C,{radius:{get:ExpressionPropertyInterface(b.rd)},_name:{value:E.nm}}),C.mn=E.mn,C}function P(E,T,M){function C(A){return E.c.ix===A||A==="Copies"?C.copies:E.o.ix===A||A==="Offset"?C.offset:null}var S=propertyGroupFactory(C,M),b=T;return C.propertyIndex=E.ix,b.c.setGroupProperty(PropertyInterface("Copies",S)),b.o.setGroupProperty(PropertyInterface("Offset",S)),Object.defineProperties(C,{copies:{get:ExpressionPropertyInterface(b.c)},offset:{get:ExpressionPropertyInterface(b.o)},_name:{value:E.nm}}),C.mn=E.mn,C}return function(E,T,M){var C;function S(A){if(typeof A=="number")return A=A===void 0?1:A,A===0?M:C[A-1];for(var R=0,I=C.length;R<I;){if(C[R]._name===A)return C[R];R+=1}return null}function b(){return M}return S.propertyGroup=propertyGroupFactory(S,b),C=e(E,T,S.propertyGroup),S.numProperties=C.length,S._name="Contents",S}}(),TextExpressionInterface=function(){return function(e){var t;function r(i){switch(i){case"ADBE Text Document":return r.sourceText;default:return null}}return Object.defineProperty(r,"sourceText",{get:function(){e.textProperty.getValue();var s=e.textProperty.currentData.t;return(!t||s!==t.value)&&(t=new String(s),t.value=s||new String(s),Object.defineProperty(t,"style",{get:function(){return{fillColor:e.textProperty.currentData.fc}}})),t}}),r}}();function _typeof(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(r){return typeof r}:_typeof=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof(e)}var FootageInterface=function(){var e=function(i){var s="",a=i.getFootageData();function o(){return s="",a=i.getFootageData(),u}function u(c){if(a[c])return s=c,a=a[c],_typeof(a)==="object"?u:a;var d=c.indexOf(s);if(d!==-1){var g=parseInt(c.substr(d+s.length),10);return a=a[g],_typeof(a)==="object"?u:a}return""}return o},t=function(i){function s(a){return a==="Outline"?s.outlineInterface():null}return s._name="Outline",s.outlineInterface=e(i),s};return function(r){function i(s){return s==="Data"?i.dataInterface:null}return i._name="Data",i.dataInterface=t(r),i}}(),interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(e){return interfaces[e]||null}var expressionHelpers=function(){function e(o,u,c){u.x&&(c.k=!0,c.x=!0,c.initiateExpression=ExpressionManager.initiateExpression,c.effectsSequence.push(c.initiateExpression(o,u,c).bind(c)))}function t(o){return o*=this.elem.globalData.frameRate,o-=this.offsetTime,o!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<o?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(o,this._cachingAtTime),this._cachingAtTime.lastFrame=o),this._cachingAtTime.value}function r(o){var u=-.01,c=this.getValueAtTime(o),d=this.getValueAtTime(o+u),g=0;if(c.length){var x;for(x=0;x<c.length;x+=1)g+=Math.pow(d[x]-c[x],2);g=Math.sqrt(g)*100}else g=0;return g}function i(o){if(this.vel!==void 0)return this.vel;var u=-.001,c=this.getValueAtTime(o),d=this.getValueAtTime(o+u),g;if(c.length){g=createTypedArray("float32",c.length);var x;for(x=0;x<c.length;x+=1)g[x]=(d[x]-c[x])/u}else g=(d-c)/u;return g}function s(){return this.pv}function a(o){this.propertyGroup=o}return{searchExpressions:e,getSpeedAtTime:r,getVelocityAtTime:i,getValueAtTime:t,getStaticValueAtTime:s,setGroupProperty:a}}();function addPropertyDecorator(){function e(y,P,E){if(!this.k||!this.keyframes)return this.pv;y=y?y.toLowerCase():"";var T=this.comp.renderedFrame,M=this.keyframes,C=M[M.length-1].t;if(T<=C)return this.pv;var S,b;E?(P?S=Math.abs(C-this.elem.comp.globalData.frameRate*P):S=Math.max(0,C-this.elem.data.ip),b=C-S):((!P||P>M.length-1)&&(P=M.length-1),b=M[M.length-1-P].t,S=C-b);var A,R,I;if(y==="pingpong"){var D=Math.floor((T-b)/S);if(D%2!==0)return this.getValueAtTime((S-(T-b)%S+b)/this.comp.globalData.frameRate,0)}else if(y==="offset"){var O=this.getValueAtTime(b/this.comp.globalData.frameRate,0),j=this.getValueAtTime(C/this.comp.globalData.frameRate,0),W=this.getValueAtTime(((T-b)%S+b)/this.comp.globalData.frameRate,0),U=Math.floor((T-b)/S);if(this.pv.length){for(I=new Array(O.length),R=I.length,A=0;A<R;A+=1)I[A]=(j[A]-O[A])*U+W[A];return I}return(j-O)*U+W}else if(y==="continue"){var H=this.getValueAtTime(C/this.comp.globalData.frameRate,0),K=this.getValueAtTime((C-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(I=new Array(H.length),R=I.length,A=0;A<R;A+=1)I[A]=H[A]+(H[A]-K[A])*((T-C)/this.comp.globalData.frameRate)/5e-4;return I}return H+(H-K)*((T-C)/.001)}return this.getValueAtTime(((T-b)%S+b)/this.comp.globalData.frameRate,0)}function t(y,P,E){if(!this.k)return this.pv;y=y?y.toLowerCase():"";var T=this.comp.renderedFrame,M=this.keyframes,C=M[0].t;if(T>=C)return this.pv;var S,b;E?(P?S=Math.abs(this.elem.comp.globalData.frameRate*P):S=Math.max(0,this.elem.data.op-C),b=C+S):((!P||P>M.length-1)&&(P=M.length-1),b=M[P].t,S=b-C);var A,R,I;if(y==="pingpong"){var D=Math.floor((C-T)/S);if(D%2===0)return this.getValueAtTime(((C-T)%S+C)/this.comp.globalData.frameRate,0)}else if(y==="offset"){var O=this.getValueAtTime(C/this.comp.globalData.frameRate,0),j=this.getValueAtTime(b/this.comp.globalData.frameRate,0),W=this.getValueAtTime((S-(C-T)%S+C)/this.comp.globalData.frameRate,0),U=Math.floor((C-T)/S)+1;if(this.pv.length){for(I=new Array(O.length),R=I.length,A=0;A<R;A+=1)I[A]=W[A]-(j[A]-O[A])*U;return I}return W-(j-O)*U}else if(y==="continue"){var H=this.getValueAtTime(C/this.comp.globalData.frameRate,0),K=this.getValueAtTime((C+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(I=new Array(H.length),R=I.length,A=0;A<R;A+=1)I[A]=H[A]+(H[A]-K[A])*(C-T)/.001;return I}return H+(H-K)*(C-T)/.001}return this.getValueAtTime((S-((C-T)%S+C))/this.comp.globalData.frameRate,0)}function r(y,P){if(!this.k)return this.pv;if(y=(y||.4)*.5,P=Math.floor(P||5),P<=1)return this.pv;var E=this.comp.renderedFrame/this.comp.globalData.frameRate,T=E-y,M=E+y,C=P>1?(M-T)/(P-1):1,S=0,b=0,A;this.pv.length?A=createTypedArray("float32",this.pv.length):A=0;for(var R;S<P;){if(R=this.getValueAtTime(T+S*C),this.pv.length)for(b=0;b<this.pv.length;b+=1)A[b]+=R[b];else A+=R;S+=1}if(this.pv.length)for(b=0;b<this.pv.length;b+=1)A[b]/=P;else A/=P;return A}function i(y){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var P=this._transformCachingAtTime.v;if(P.cloneFromProps(this.pre.props),this.appliedTransformations<1){var E=this.a.getValueAtTime(y);P.translate(-E[0]*this.a.mult,-E[1]*this.a.mult,E[2]*this.a.mult)}if(this.appliedTransformations<2){var T=this.s.getValueAtTime(y);P.scale(T[0]*this.s.mult,T[1]*this.s.mult,T[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var M=this.sk.getValueAtTime(y),C=this.sa.getValueAtTime(y);P.skewFromAxis(-M*this.sk.mult,C*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var S=this.r.getValueAtTime(y);P.rotate(-S*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var b=this.rz.getValueAtTime(y),A=this.ry.getValueAtTime(y),R=this.rx.getValueAtTime(y),I=this.or.getValueAtTime(y);P.rotateZ(-b*this.rz.mult).rotateY(A*this.ry.mult).rotateX(R*this.rx.mult).rotateZ(-I[2]*this.or.mult).rotateY(I[1]*this.or.mult).rotateX(I[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var D=this.px.getValueAtTime(y),O=this.py.getValueAtTime(y);if(this.data.p.z){var j=this.pz.getValueAtTime(y);P.translate(D*this.px.mult,O*this.py.mult,-j*this.pz.mult)}else P.translate(D*this.px.mult,O*this.py.mult,0)}else{var W=this.p.getValueAtTime(y);P.translate(W[0]*this.p.mult,W[1]*this.p.mult,-W[2]*this.p.mult)}return P}function s(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(y,P,E){var T=a(y,P,E);return T.dynamicProperties.length?T.getValueAtTime=i.bind(T):T.getValueAtTime=s.bind(T),T.setGroupProperty=expressionHelpers.setGroupProperty,T};var o=PropertyFactory.getProp;PropertyFactory.getProp=function(y,P,E,T,M){var C=o(y,P,E,T,M);C.kf?C.getValueAtTime=expressionHelpers.getValueAtTime.bind(C):C.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(C),C.setGroupProperty=expressionHelpers.setGroupProperty,C.loopOut=e,C.loopIn=t,C.smooth=r,C.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(C),C.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(C),C.numKeys=P.a===1?P.k.length:0,C.propertyIndex=P.ix;var S=0;return E!==0&&(S=createTypedArray("float32",P.a===1?P.k[0].s.length:P.k.length)),C._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:S},expressionHelpers.searchExpressions(y,P,C),C.k&&M.addDynamicProperty(C),C};function u(y){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),y*=this.elem.globalData.frameRate,y-=this.offsetTime,y!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<y?this._caching.lastIndex:0,this._cachingAtTime.lastTime=y,this.interpolateShape(y,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}var c=ShapePropertyFactory.getConstructorFunction(),d=ShapePropertyFactory.getKeyframedConstructorFunction();function g(){}g.prototype={vertices:function(P,E){this.k&&this.getValue();var T=this.v;E!==void 0&&(T=this.getValueAtTime(E,0));var M,C=T._length,S=T[P],b=T.v,A=createSizedArray(C);for(M=0;M<C;M+=1)P==="i"||P==="o"?A[M]=[S[M][0]-b[M][0],S[M][1]-b[M][1]]:A[M]=[S[M][0],S[M][1]];return A},points:function(P){return this.vertices("v",P)},inTangents:function(P){return this.vertices("i",P)},outTangents:function(P){return this.vertices("o",P)},isClosed:function(){return this.v.c},pointOnPath:function(P,E){var T=this.v;E!==void 0&&(T=this.getValueAtTime(E,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(T));for(var M=this._segmentsLength,C=M.lengths,S=M.totalLength*P,b=0,A=C.length,R=0,I;b<A;){if(R+C[b].addedLength>S){var D=b,O=T.c&&b===A-1?0:b+1,j=(S-R)/C[b].addedLength;I=bez.getPointInSegment(T.v[D],T.v[O],T.o[D],T.i[O],j,C[b]);break}else R+=C[b].addedLength;b+=1}return I||(I=T.c?[T.v[0][0],T.v[0][1]]:[T.v[T._length-1][0],T.v[T._length-1][1]]),I},vectorOnPath:function(P,E,T){P==1?P=this.v.c:P==0&&(P=.999);var M=this.pointOnPath(P,E),C=this.pointOnPath(P+.001,E),S=C[0]-M[0],b=C[1]-M[1],A=Math.sqrt(Math.pow(S,2)+Math.pow(b,2));if(A===0)return[0,0];var R=T==="tangent"?[S/A,b/A]:[-b/A,S/A];return R},tangentOnPath:function(P,E){return this.vectorOnPath(P,E,"tangent")},normalOnPath:function(P,E){return this.vectorOnPath(P,E,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([g],c),extendPrototype([g],d),d.prototype.getValueAtTime=u,d.prototype.initiateExpression=ExpressionManager.initiateExpression;var x=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(y,P,E,T,M){var C=x(y,P,E,T,M);return C.propertyIndex=P.ix,C.lock=!1,E===3?expressionHelpers.searchExpressions(y,P.pt,C):E===4&&expressionHelpers.searchExpressions(y,P.ks,C),C.k&&y.addDynamicProperty(C),C}}function initialize$1(){addPropertyDecorator()}function addDecorator(){function e(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}TextProperty.prototype.getExpressionValue=function(t,r){var i=this.calculateExpression(r);if(t.t!==i){var s={};return this.copyData(s,t),s.t=i.toString(),s.__complete=!1,s}return t},TextProperty.prototype.searchProperty=function(){var t=this.searchKeyframes(),r=this.searchExpressions();return this.kf=t||r,this.kf},TextProperty.prototype.searchExpressions=e}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function e(t,r){var i=createNS("feMerge");i.setAttribute("result",t);var s,a;for(a=0;a<r.length;a+=1)s=createNS("feMergeNode"),s.setAttribute("in",r[a]),i.appendChild(s),i.appendChild(s);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(e,t,r,i,s){this.filterManager=t;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=a,a.setAttribute("result",i+"_tint_1"),e.appendChild(a),a=createNS("feColorMatrix"),a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",i+"_tint_2"),e.appendChild(a),this.matrixFilter=a;var o=this.createMergeNode(i,[s,i+"_tint_1",i+"_tint_2"]);e.appendChild(o)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+i+" 0"),this.matrixFilter.setAttribute("values",r[0]-t[0]+" 0 0 0 "+t[0]+" "+(r[1]-t[1])+" 0 0 0 "+t[1]+" "+(r[2]-t[2])+" 0 0 0 "+t[2]+" 0 0 0 1 0")}};function SVGFillFilter(e,t,r,i){this.filterManager=t;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","sRGB"),s.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),s.setAttribute("result",i),e.appendChild(s),this.matrixFilter=s}SVGFillFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+t[0]+" 0 0 0 0 "+t[1]+" 0 0 0 0 "+t[2]+" 0 0 0 "+r+" 0")}};function SVGStrokeEffect(e,t,r){this.initialized=!1,this.filterManager=t,this.elem=r,this.paths=[]}SVGStrokeEffect.prototype.initialize=function(){var e=this.elem.layerElement.children||this.elem.layerElement.childNodes,t,r,i,s;for(this.filterManager.effectElements[1].p.v===1?(s=this.elem.maskManager.masksProperties.length,i=0):(i=this.filterManager.effectElements[0].p.v-1,s=i+1),r=createNS("g"),r.setAttribute("fill","none"),r.setAttribute("stroke-linecap","round"),r.setAttribute("stroke-dashoffset",1),i;i<s;i+=1)t=createNS("path"),r.appendChild(t),this.paths.push({p:t,m:i});if(this.filterManager.effectElements[10].p.v===3){var a=createNS("mask"),o=createElementID();a.setAttribute("id",o),a.setAttribute("mask-type","alpha"),a.appendChild(r),this.elem.globalData.defs.appendChild(a);var u=createNS("g");for(u.setAttribute("mask","url("+getLocationHref()+"#"+o+")");e[0];)u.appendChild(e[0]);this.elem.layerElement.appendChild(u),this.masker=a,r.setAttribute("stroke","#fff")}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2)for(e=this.elem.layerElement.children||this.elem.layerElement.childNodes;e.length;)this.elem.layerElement.removeChild(e[0]);this.elem.layerElement.appendChild(r),this.elem.layerElement.removeAttribute("mask"),r.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=r},SVGStrokeEffect.prototype.renderFrame=function(e){this.initialized||this.initialize();var t,r=this.paths.length,i,s;for(t=0;t<r;t+=1)if(this.paths[t].m!==-1&&(i=this.elem.maskManager.viewData[this.paths[t].m],s=this.paths[t].p,(e||this.filterManager._mdf||i.prop._mdf)&&s.setAttribute("d",i.lastPath),e||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||i.prop._mdf)){var a;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var o=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,u=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,c=s.getTotalLength();a="0 0 0 "+c*o+" ";var d=c*(u-o),g=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01,x=Math.floor(d/g),y;for(y=0;y<x;y+=1)a+="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+c*10+" 0 0"}else a="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01;s.setAttribute("stroke-dasharray",a)}if((e||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",this.filterManager.effectElements[4].p.v*2),(e||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2)&&(e||this.filterManager.effectElements[3].p._mdf)){var P=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(P[0]*255)+","+bmFloor(P[1]*255)+","+bmFloor(P[2]*255)+")")}};function SVGTritoneFilter(e,t,r,i){this.filterManager=t;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","linearRGB"),s.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),e.appendChild(s);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",i),this.matrixFilter=a;var o=createNS("feFuncR");o.setAttribute("type","table"),a.appendChild(o),this.feFuncR=o;var u=createNS("feFuncG");u.setAttribute("type","table"),a.appendChild(u),this.feFuncG=u;var c=createNS("feFuncB");c.setAttribute("type","table"),a.appendChild(c),this.feFuncB=c,e.appendChild(a)}SVGTritoneFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v,s=i[0]+" "+r[0]+" "+t[0],a=i[1]+" "+r[1]+" "+t[1],o=i[2]+" "+r[2]+" "+t[2];this.feFuncR.setAttribute("tableValues",s),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",o)}};function SVGProLevelsFilter(e,t,r,i){this.filterManager=t;var s=this.filterManager.effectElements,a=createNS("feComponentTransfer");(s[10].p.k||s[10].p.v!==0||s[11].p.k||s[11].p.v!==1||s[12].p.k||s[12].p.v!==1||s[13].p.k||s[13].p.v!==0||s[14].p.k||s[14].p.v!==1)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(s[17].p.k||s[17].p.v!==0||s[18].p.k||s[18].p.v!==1||s[19].p.k||s[19].p.v!==1||s[20].p.k||s[20].p.v!==0||s[21].p.k||s[21].p.v!==1)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(s[24].p.k||s[24].p.v!==0||s[25].p.k||s[25].p.v!==1||s[26].p.k||s[26].p.v!==1||s[27].p.k||s[27].p.v!==0||s[28].p.k||s[28].p.v!==1)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(s[31].p.k||s[31].p.v!==0||s[32].p.k||s[32].p.v!==1||s[33].p.k||s[33].p.v!==1||s[34].p.k||s[34].p.v!==0||s[35].p.k||s[35].p.v!==1)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),e.appendChild(a)),(s[3].p.k||s[3].p.v!==0||s[4].p.k||s[4].p.v!==1||s[5].p.k||s[5].p.v!==1||s[6].p.k||s[6].p.v!==0||s[7].p.k||s[7].p.v!==1)&&(a=createNS("feComponentTransfer"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",i),e.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}SVGProLevelsFilter.prototype.createFeFunc=function(e,t){var r=createNS(e);return r.setAttribute("type","table"),t.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(e,t,r,i,s){for(var a=0,o=256,u,c=Math.min(e,t),d=Math.max(e,t),g=Array.call(null,{length:o}),x,y=0,P=s-i,E=t-e;a<=256;)u=a/256,u<=c?x=E<0?s:i:u>=d?x=E<0?i:s:x=i+P*Math.pow((u-e)/E,1/r),g[y]=x,y+=1,a+=256/(o-1);return g.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t,r=this.filterManager.effectElements;this.feFuncRComposed&&(e||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(t=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",t),this.feFuncGComposed.setAttribute("tableValues",t),this.feFuncBComposed.setAttribute("tableValues",t)),this.feFuncR&&(e||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(t=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",t)),this.feFuncG&&(e||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(t=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",t)),this.feFuncB&&(e||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(t=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",t)),this.feFuncA&&(e||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(t=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",t))}};function SVGDropShadowEffect(e,t,r,i,s){var a=t.container.globalData.renderConfig.filterSize,o=t.data.fs||a;e.setAttribute("x",o.x||a.x),e.setAttribute("y",o.y||a.y),e.setAttribute("width",o.width||a.width),e.setAttribute("height",o.height||a.height),this.filterManager=t;var u=createNS("feGaussianBlur");u.setAttribute("in","SourceAlpha"),u.setAttribute("result",i+"_drop_shadow_1"),u.setAttribute("stdDeviation","0"),this.feGaussianBlur=u,e.appendChild(u);var c=createNS("feOffset");c.setAttribute("dx","25"),c.setAttribute("dy","0"),c.setAttribute("in",i+"_drop_shadow_1"),c.setAttribute("result",i+"_drop_shadow_2"),this.feOffset=c,e.appendChild(c);var d=createNS("feFlood");d.setAttribute("flood-color","#00ff00"),d.setAttribute("flood-opacity","1"),d.setAttribute("result",i+"_drop_shadow_3"),this.feFlood=d,e.appendChild(d);var g=createNS("feComposite");g.setAttribute("in",i+"_drop_shadow_3"),g.setAttribute("in2",i+"_drop_shadow_2"),g.setAttribute("operator","in"),g.setAttribute("result",i+"_drop_shadow_4"),e.appendChild(g);var x=this.createMergeNode(i,[i+"_drop_shadow_4",s]);e.appendChild(x)}extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){if((e||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),e||this.filterManager.effectElements[0].p._mdf){var t=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(t[0]*255),Math.round(t[1]*255),Math.round(t[2]*255)))}if((e||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),e||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,i=(this.filterManager.effectElements[2].p.v-90)*degToRads,s=r*Math.cos(i),a=r*Math.sin(i);this.feOffset.setAttribute("dx",s),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(e,t,r){this.initialized=!1,this.filterManager=t,this.filterElem=e,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}SVGMatte3Effect.prototype.findSymbol=function(e){for(var t=0,r=_svgMatteSymbols.length;t<r;){if(_svgMatteSymbols[t]===e)return _svgMatteSymbols[t];t+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(e,t){var r=e.layerElement.parentNode;if(r){for(var i=r.children,s=0,a=i.length;s<a&&i[s]!==e.layerElement;)s+=1;var o;s<=a-2&&(o=i[s+1]);var u=createNS("use");u.setAttribute("href","#"+t),o?r.insertBefore(u,o):r.appendChild(u)}},SVGMatte3Effect.prototype.setElementAsMask=function(e,t){if(!this.findSymbol(t)){var r=createElementID(),i=createNS("mask");i.setAttribute("id",t.layerId),i.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(t);var s=e.globalData.defs;s.appendChild(i);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(t,r),a.appendChild(t.layerElement),s.appendChild(a);var o=createNS("use");o.setAttribute("href","#"+r),i.appendChild(o),t.data.hd=!1,t.show()}e.setMatte(t.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var e=this.filterManager.effectElements[0].p.v,t=this.elem.comp.elements,r=0,i=t.length;r<i;)t[r]&&t[r].data.ind===e&&this.setElementAsMask(this.elem,t[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()};function SVGGaussianBlurEffect(e,t,r,i){e.setAttribute("x","-100%"),e.setAttribute("y","-100%"),e.setAttribute("width","300%"),e.setAttribute("height","300%"),this.filterManager=t;var s=createNS("feGaussianBlur");s.setAttribute("result",i),e.appendChild(s),this.feGaussianBlur=s}SVGGaussianBlurEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var t=.3,r=this.filterManager.effectElements[0].p.v*t,i=this.filterManager.effectElements[1].p.v,s=i==3?0:r,a=i==2?0:r;this.feGaussianBlur.setAttribute("stdDeviation",s+" "+a);var o=this.filterManager.effectElements[2].p.v==1?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",o)}};function TransformEffect(){}TransformEffect.prototype.init=function(e){this.effectsManager=e,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(e){if(this._opMdf=!1,this._mdf=!1,e||this.effectsManager._mdf){var t=this.effectsManager.effectElements,r=t[0].p.v,i=t[1].p.v,s=t[2].p.v===1,a=t[3].p.v,o=s?a:t[4].p.v,u=t[5].p.v,c=t[6].p.v,d=t[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(o*.01,a*.01,1),this.matrix.rotate(-d*degToRads),this.matrix.skewFromAxis(-u*degToRads,(c+90)*degToRads),this.matrix.translate(i[0],i[1],0),this._mdf=!0,this.opacity!==t[8].p.v&&(this.opacity=t[8].p.v,this._opMdf=!0)}};function SVGTransformEffect(e,t){this.init(t)}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(e){this.init(e)}return extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie})})(lottie$1,lottie$1.exports);var lottieExports=lottie$1.exports;const lottie=getDefaultExportFromCjs(lottieExports);function _iterableToArrayLimit(e,t){var r=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(r!=null){var i,s,a,o,u=[],c=!0,d=!1;try{if(a=(r=r.call(e)).next,t===0){if(Object(r)!==r)return;c=!1}else for(;!(c=(i=a.call(r)).done)&&(u.push(i.value),u.length!==t);c=!0);}catch(g){d=!0,s=g}finally{try{if(!c&&r.return!=null&&(o=r.return(),Object(o)!==o))return}finally{if(d)throw s}}return u}}function ownKeys(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(e,s).enumerable})),r.push.apply(r,i)}return r}function _objectSpread2(e){for(var t=1;t<arguments.length;t++){var r=arguments[t]!=null?arguments[t]:{};t%2?ownKeys(Object(r),!0).forEach(function(i){_defineProperty(e,i,r[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(i){Object.defineProperty(e,i,Object.getOwnPropertyDescriptor(r,i))})}return e}function _defineProperty(e,t,r){return t=_toPropertyKey$1(t),t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function _objectWithoutPropertiesLoose$6(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function _objectWithoutProperties(e,t){if(e==null)return{};var r=_objectWithoutPropertiesLoose$6(e,t),i,s;if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)i=a[s],!(t.indexOf(i)>=0)&&Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _unsupportedIterableToArray(e,t){if(e){if(typeof e=="string")return _arrayLikeToArray(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);if(r==="Object"&&e.constructor&&(r=e.constructor.name),r==="Map"||r==="Set")return Array.from(e);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return _arrayLikeToArray(e,t)}}function _arrayLikeToArray(e,t){(t==null||t>e.length)&&(t=e.length);for(var r=0,i=new Array(t);r<t;r++)i[r]=e[r];return i}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _toPrimitive$1(e,t){if(typeof e!="object"||e===null)return e;var r=e[Symbol.toPrimitive];if(r!==void 0){var i=r.call(e,t||"default");if(typeof i!="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(t==="string"?String:Number)(e)}function _toPropertyKey$1(e){var t=_toPrimitive$1(e,"string");return typeof t=="symbol"?t:String(t)}var _excluded$1$1=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],useLottie=function e(t,r){var i=t.animationData,s=t.loop,a=t.autoplay,o=t.initialSegment,u=t.onComplete,c=t.onLoopComplete,d=t.onEnterFrame,g=t.onSegmentStart,x=t.onConfigReady,y=t.onDataReady,P=t.onDataFailed,E=t.onLoadedImages,T=t.onDOMLoaded,M=t.onDestroy;t.lottieRef,t.renderer,t.name,t.assetsPath,t.rendererSettings;var C=_objectWithoutProperties(t,_excluded$1$1),S=reactExports.useState(!1),b=_slicedToArray(S,2),A=b[0],R=b[1],I=reactExports.useRef(),D=reactExports.useRef(null),O=function(){var X;(X=I.current)===null||X===void 0||X.play()},j=function(){var X;(X=I.current)===null||X===void 0||X.stop()},W=function(){var X;(X=I.current)===null||X===void 0||X.pause()},U=function(X){var Y;(Y=I.current)===null||Y===void 0||Y.setSpeed(X)},H=function(X,Y){var Q;(Q=I.current)===null||Q===void 0||Q.goToAndPlay(X,Y)},K=function(X,Y){var Q;(Q=I.current)===null||Q===void 0||Q.goToAndStop(X,Y)},$=function(X){var Y;(Y=I.current)===null||Y===void 0||Y.setDirection(X)},N=function(X,Y){var Q;(Q=I.current)===null||Q===void 0||Q.playSegments(X,Y)},L=function(X){var Y;(Y=I.current)===null||Y===void 0||Y.setSubframe(X)},B=function(X){var Y;return(Y=I.current)===null||Y===void 0?void 0:Y.getDuration(X)},_=function(){var X;(X=I.current)===null||X===void 0||X.destroy(),I.current=void 0},F=function(){var X=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},Y;if(D.current){(Y=I.current)===null||Y===void 0||Y.destroy();var Q=_objectSpread2(_objectSpread2(_objectSpread2({},t),X),{},{container:D.current});return I.current=lottie.loadAnimation(Q),R(!!I.current),function(){var te;(te=I.current)===null||te===void 0||te.destroy(),I.current=void 0}}};reactExports.useEffect(function(){var V=F();return function(){return V==null?void 0:V()}},[i,s]),reactExports.useEffect(function(){I.current&&(I.current.autoplay=!!a)},[a]),reactExports.useEffect(function(){if(I.current){if(!o){I.current.resetSegments(!0);return}!Array.isArray(o)||!o.length||((I.current.currentRawFrame<o[0]||I.current.currentRawFrame>o[1])&&(I.current.currentRawFrame=o[0]),I.current.setSegment(o[0],o[1]))}},[o]),reactExports.useEffect(function(){var V=[{name:"complete",handler:u},{name:"loopComplete",handler:c},{name:"enterFrame",handler:d},{name:"segmentStart",handler:g},{name:"config_ready",handler:x},{name:"data_ready",handler:y},{name:"data_failed",handler:P},{name:"loaded_images",handler:E},{name:"DOMLoaded",handler:T},{name:"destroy",handler:M}],X=V.filter(function(Q){return Q.handler!=null});if(X.length){var Y=X.map(function(Q){var te;return(te=I.current)===null||te===void 0||te.addEventListener(Q.name,Q.handler),function(){var re;(re=I.current)===null||re===void 0||re.removeEventListener(Q.name,Q.handler)}});return function(){Y.forEach(function(Q){return Q()})}}},[u,c,d,g,x,y,P,E,T,M]);var z=React.createElement("div",_objectSpread2({style:r,ref:D},C));return{View:z,play:O,stop:j,pause:W,setSpeed:U,goToAndStop:K,goToAndPlay:H,setDirection:$,playSegments:N,setSubframe:L,getDuration:B,destroy:_,animationContainerRef:D,animationLoaded:A,animationItem:I.current}};function getContainerVisibility(e){var t=e.getBoundingClientRect(),r=t.top,i=t.height,s=window.innerHeight-r,a=window.innerHeight+i;return s/a}function getContainerCursorPosition(e,t,r){var i=e.getBoundingClientRect(),s=i.top,a=i.left,o=i.width,u=i.height,c=(t-a)/o,d=(r-s)/u;return{x:c,y:d}}var useInitInteractivity=function e(t){var r=t.wrapperRef,i=t.animationItem,s=t.mode,a=t.actions;reactExports.useEffect(function(){var o=r.current;if(!(!o||!i||!a.length)){i.stop();var u=function(){var g=null,x=function(){var P=getContainerVisibility(o),E=a.find(function(M){var C=M.visibility;return C&&P>=C[0]&&P<=C[1]});if(E){if(E.type==="seek"&&E.visibility&&E.frames.length===2){var T=E.frames[0]+Math.ceil((P-E.visibility[0])/(E.visibility[1]-E.visibility[0])*E.frames[1]);//! goToAndStop must be relative to the start of the current segment
i.goToAndStop(T-i.firstFrame-1,!0)}E.type==="loop"&&(g===null||g!==E.frames||i.isPaused)&&(i.playSegments(E.frames,!0),g=E.frames),E.type==="play"&&i.isPaused&&(i.resetSegments(!0),i.play()),E.type==="stop"&&i.goToAndStop(E.frames[0]-i.firstFrame-1,!0)}};return document.addEventListener("scroll",x),function(){document.removeEventListener("scroll",x)}},c=function(){var g=function(E,T){var M=E,C=T;if(M!==-1&&C!==-1){var S=getContainerCursorPosition(o,M,C);M=S.x,C=S.y}var b=a.find(function(I){var D=I.position;return D&&Array.isArray(D.x)&&Array.isArray(D.y)?M>=D.x[0]&&M<=D.x[1]&&C>=D.y[0]&&C<=D.y[1]:D&&!Number.isNaN(D.x)&&!Number.isNaN(D.y)?M===D.x&&C===D.y:!1});if(b){if(b.type==="seek"&&b.position&&Array.isArray(b.position.x)&&Array.isArray(b.position.y)&&b.frames.length===2){var A=(M-b.position.x[0])/(b.position.x[1]-b.position.x[0]),R=(C-b.position.y[0])/(b.position.y[1]-b.position.y[0]);i.playSegments(b.frames,!0),i.goToAndStop(Math.ceil((A+R)/2*(b.frames[1]-b.frames[0])),!0)}b.type==="loop"&&i.playSegments(b.frames,!0),b.type==="play"&&(i.isPaused&&i.resetSegments(!1),i.playSegments(b.frames)),b.type==="stop"&&i.goToAndStop(b.frames[0],!0)}},x=function(E){g(E.clientX,E.clientY)},y=function(){g(-1,-1)};return o.addEventListener("mousemove",x),o.addEventListener("mouseout",y),function(){o.removeEventListener("mousemove",x),o.removeEventListener("mouseout",y)}};switch(s){case"scroll":return u();case"cursor":return c()}}},[s,i])},useLottieInteractivity=function e(t){var r=t.actions,i=t.mode,s=t.lottieObj,a=s.animationItem,o=s.View,u=s.animationContainerRef;return useInitInteractivity({actions:r,animationItem:a,mode:i,wrapperRef:u}),o},_excluded$5=["style","interactivity"],Lottie=function e(t){var r,i,s,a=t.style,o=t.interactivity,u=_objectWithoutProperties(t,_excluded$5),c=useLottie(u,a),d=c.View,g=c.play,x=c.stop,y=c.pause,P=c.setSpeed,E=c.goToAndStop,T=c.goToAndPlay,M=c.setDirection,C=c.playSegments,S=c.setSubframe,b=c.getDuration,A=c.destroy,R=c.animationContainerRef,I=c.animationLoaded,D=c.animationItem;return reactExports.useEffect(function(){t.lottieRef&&(t.lottieRef.current={play:g,stop:x,pause:y,setSpeed:P,goToAndPlay:T,goToAndStop:E,setDirection:M,playSegments:C,setSubframe:S,getDuration:b,destroy:A,animationContainerRef:R,animationLoaded:I,animationItem:D})},[(r=t.lottieRef)===null||r===void 0?void 0:r.current]),useLottieInteractivity({lottieObj:{View:d,play:g,stop:x,pause:y,setSpeed:P,goToAndStop:E,goToAndPlay:T,setDirection:M,playSegments:C,setSubframe:S,getDuration:b,destroy:A,animationContainerRef:R,animationLoaded:I,animationItem:D},actions:(i=o==null?void 0:o.actions)!==null&&i!==void 0?i:[],mode:(s=o==null?void 0:o.mode)!==null&&s!==void 0?s:"scroll"})};const nm="Comp 2",ddd=0,h=500,w=500,meta={g:"LottieFiles AE 3.5.3"},layers=[{ty:4,nm:"Shape Layer 7",sr:1,st:0,op:30,ip:0,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:1},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:4},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:14},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:17},{s:[100,100,100],t:27}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:0,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:3.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:14,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:17.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:28}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.0431,.2392,.5686],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:1},{ty:4,nm:"Shape Layer 6",sr:1,st:1,op:31,ip:1,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:2},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:5},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:15},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:18},{s:[100,100,100],t:28}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:1,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:4.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:15,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:18.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:29}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.9882,.2392,.1294],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:2},{ty:4,nm:"Shape Layer 5",sr:1,st:2,op:32,ip:2,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:3},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:6},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:16},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:19},{s:[100,100,100],t:29}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:2,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:5.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:16,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:19.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:30}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[1,1,1],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:3}],v="4.8.0",fr=20,op=30,ip=0,assets=[],animationData={nm,ddd,h,w,meta,layers,v,fr,op,ip,assets},styles={container:{animation:"fade-in 1s forwards",display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},lottie:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},Spinner=()=>{const[e,t]=reactExports.useState(0);return reactExports.useEffect(()=>{const r=setInterval(()=>{t(i=>i===100?(clearInterval(r),i):i+1)},50);return()=>{clearInterval(r)}},[]),jsxRuntimeExports.jsxs("div",{style:styles.container,children:[jsxRuntimeExports.jsx(Lottie,{animationData,loop:!0,height:200,width:200}),jsxRuntimeExports.jsxs("div",{children:[jsxRuntimeExports.jsx("div",{style:styles.container,children:jsxRuntimeExports.jsxs("div",{children:[e,"% Loaded"]})}),");"]})]})},spinner=Object.freeze(Object.defineProperty({__proto__:null,default:Spinner},Symbol.toStringTag,{value:"Module"}));function bind(e,t){return function(){return e.apply(t,arguments)}}const{toString}=Object.prototype,{getPrototypeOf}=Object,kindOf=(e=>t=>{const r=toString.call(t);return e[r]||(e[r]=r.slice(8,-1).toLowerCase())})(Object.create(null)),kindOfTest=e=>(e=e.toLowerCase(),t=>kindOf(t)===e),typeOfTest=e=>t=>typeof t===e,{isArray}=Array,isUndefined=typeOfTest("undefined");function isBuffer(e){return e!==null&&!isUndefined(e)&&e.constructor!==null&&!isUndefined(e.constructor)&&isFunction(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const isArrayBuffer=kindOfTest("ArrayBuffer");function isArrayBufferView(e){let t;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?t=ArrayBuffer.isView(e):t=e&&e.buffer&&isArrayBuffer(e.buffer),t}const isString$1=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject$3=e=>e!==null&&typeof e=="object",isBoolean=e=>e===!0||e===!1,isPlainObject=e=>{if(kindOf(e)!=="object")return!1;const t=getPrototypeOf(e);return(t===null||t===Object.prototype||Object.getPrototypeOf(t)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isStream=e=>isObject$3(e)&&isFunction(e.pipe),isFormData=e=>{let t;return e&&(typeof FormData=="function"&&e instanceof FormData||isFunction(e.append)&&((t=kindOf(e))==="formdata"||t==="object"&&isFunction(e.toString)&&e.toString()==="[object FormData]"))},isURLSearchParams=kindOfTest("URLSearchParams"),trim=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function forEach(e,t,{allOwnKeys:r=!1}={}){if(e===null||typeof e>"u")return;let i,s;if(typeof e!="object"&&(e=[e]),isArray(e))for(i=0,s=e.length;i<s;i++)t.call(null,e[i],i,e);else{const a=r?Object.getOwnPropertyNames(e):Object.keys(e),o=a.length;let u;for(i=0;i<o;i++)u=a[i],t.call(null,e[u],u,e)}}function findKey(e,t){t=t.toLowerCase();const r=Object.keys(e);let i=r.length,s;for(;i-- >0;)if(s=r[i],t===s.toLowerCase())return s;return null}const _global=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),isContextDefined=e=>!isUndefined(e)&&e!==_global;function merge(){const{caseless:e}=isContextDefined(this)&&this||{},t={},r=(i,s)=>{const a=e&&findKey(t,s)||s;isPlainObject(t[a])&&isPlainObject(i)?t[a]=merge(t[a],i):isPlainObject(i)?t[a]=merge({},i):isArray(i)?t[a]=i.slice():t[a]=i};for(let i=0,s=arguments.length;i<s;i++)arguments[i]&&forEach(arguments[i],r);return t}const extend$3=(e,t,r,{allOwnKeys:i}={})=>(forEach(t,(s,a)=>{r&&isFunction(s)?e[a]=bind(s,r):e[a]=s},{allOwnKeys:i}),e),stripBOM=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),inherits=(e,t,r,i)=>{e.prototype=Object.create(t.prototype,i),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),r&&Object.assign(e.prototype,r)},toFlatObject=(e,t,r,i)=>{let s,a,o;const u={};if(t=t||{},e==null)return t;do{for(s=Object.getOwnPropertyNames(e),a=s.length;a-- >0;)o=s[a],(!i||i(o,e,t))&&!u[o]&&(t[o]=e[o],u[o]=!0);e=r!==!1&&getPrototypeOf(e)}while(e&&(!r||r(e,t))&&e!==Object.prototype);return t},endsWith=(e,t,r)=>{e=String(e),(r===void 0||r>e.length)&&(r=e.length),r-=t.length;const i=e.indexOf(t,r);return i!==-1&&i===r},toArray$1=e=>{if(!e)return null;if(isArray(e))return e;let t=e.length;if(!isNumber(t))return null;const r=new Array(t);for(;t-- >0;)r[t]=e[t];return r},isTypedArray=(e=>t=>e&&t instanceof e)(typeof Uint8Array<"u"&&getPrototypeOf(Uint8Array)),forEachEntry=(e,t)=>{const i=(e&&e[Symbol.iterator]).call(e);let s;for(;(s=i.next())&&!s.done;){const a=s.value;t.call(e,a[0],a[1])}},matchAll=(e,t)=>{let r;const i=[];for(;(r=e.exec(t))!==null;)i.push(r);return i},isHTMLForm=kindOfTest("HTMLFormElement"),toCamelCase=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(r,i,s){return i.toUpperCase()+s}),hasOwnProperty=(({hasOwnProperty:e})=>(t,r)=>e.call(t,r))(Object.prototype),isRegExp=kindOfTest("RegExp"),reduceDescriptors=(e,t)=>{const r=Object.getOwnPropertyDescriptors(e),i={};forEach(r,(s,a)=>{let o;(o=t(s,a,e))!==!1&&(i[a]=o||s)}),Object.defineProperties(e,i)},freezeMethods=e=>{reduceDescriptors(e,(t,r)=>{if(isFunction(e)&&["arguments","caller","callee"].indexOf(r)!==-1)return!1;const i=e[r];if(isFunction(i)){if(t.enumerable=!1,"writable"in t){t.writable=!1;return}t.set||(t.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")})}})},toObjectSet=(e,t)=>{const r={},i=s=>{s.forEach(a=>{r[a]=!0})};return isArray(e)?i(e):i(String(e).split(t)),r},noop$3=()=>{},toFiniteNumber=(e,t)=>(e=+e,Number.isFinite(e)?e:t),ALPHA="abcdefghijklmnopqrstuvwxyz",DIGIT="0123456789",ALPHABET={DIGIT,ALPHA,ALPHA_DIGIT:ALPHA+ALPHA.toUpperCase()+DIGIT},generateString=(e=16,t=ALPHABET.ALPHA_DIGIT)=>{let r="";const{length:i}=t;for(;e--;)r+=t[Math.random()*i|0];return r};function isSpecCompliantForm(e){return!!(e&&isFunction(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const toJSONObject=e=>{const t=new Array(10),r=(i,s)=>{if(isObject$3(i)){if(t.indexOf(i)>=0)return;if(!("toJSON"in i)){t[s]=i;const a=isArray(i)?[]:{};return forEach(i,(o,u)=>{const c=r(o,s+1);!isUndefined(c)&&(a[u]=c)}),t[s]=void 0,a}}return i};return r(e,0)},isAsyncFn=kindOfTest("AsyncFunction"),isThenable=e=>e&&(isObject$3(e)||isFunction(e))&&isFunction(e.then)&&isFunction(e.catch),utils$1={isArray,isArrayBuffer,isBuffer,isFormData,isArrayBufferView,isString:isString$1,isNumber,isBoolean,isObject:isObject$3,isPlainObject,isUndefined,isDate,isFile,isBlob,isRegExp,isFunction,isStream,isURLSearchParams,isTypedArray,isFileList,forEach,merge,extend:extend$3,trim,stripBOM,inherits,toFlatObject,kindOf,kindOfTest,endsWith,toArray:toArray$1,forEachEntry,matchAll,isHTMLForm,hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors,freezeMethods,toObjectSet,toCamelCase,noop:noop$3,toFiniteNumber,findKey,global:_global,isContextDefined,ALPHABET,generateString,isSpecCompliantForm,toJSONObject,isAsyncFn,isThenable};function AxiosError(e,t,r,i,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",t&&(this.code=t),r&&(this.config=r),i&&(this.request=i),s&&(this.response=s)}utils$1.inherits(AxiosError,Error,{toJSON:function e(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils$1.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{descriptors[e]={value:e}});Object.defineProperties(AxiosError,descriptors);Object.defineProperty(prototype$1,"isAxiosError",{value:!0});AxiosError.from=(e,t,r,i,s,a)=>{const o=Object.create(prototype$1);return utils$1.toFlatObject(e,o,function(c){return c!==Error.prototype},u=>u!=="isAxiosError"),AxiosError.call(o,e.message,t,r,i,s),o.cause=e,o.name=e.name,a&&Object.assign(o,a),o};const httpAdapter=null;function isVisitable(e){return utils$1.isPlainObject(e)||utils$1.isArray(e)}function removeBrackets(e){return utils$1.endsWith(e,"[]")?e.slice(0,-2):e}function renderKey(e,t,r){return e?e.concat(t).map(function(s,a){return s=removeBrackets(s),!r&&a?"["+s+"]":s}).join(r?".":""):t}function isFlatArray(e){return utils$1.isArray(e)&&!e.some(isVisitable)}const predicates=utils$1.toFlatObject(utils$1,{},null,function e(t){return/^is[A-Z]/.test(t)});function toFormData(e,t,r){if(!utils$1.isObject(e))throw new TypeError("target must be an object");t=t||new FormData,r=utils$1.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,function(T,M){return!utils$1.isUndefined(M[T])});const i=r.metaTokens,s=r.visitor||g,a=r.dots,o=r.indexes,c=(r.Blob||typeof Blob<"u"&&Blob)&&utils$1.isSpecCompliantForm(t);if(!utils$1.isFunction(s))throw new TypeError("visitor must be a function");function d(E){if(E===null)return"";if(utils$1.isDate(E))return E.toISOString();if(!c&&utils$1.isBlob(E))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils$1.isArrayBuffer(E)||utils$1.isTypedArray(E)?c&&typeof Blob=="function"?new Blob([E]):Buffer.from(E):E}function g(E,T,M){let C=E;if(E&&!M&&typeof E=="object"){if(utils$1.endsWith(T,"{}"))T=i?T:T.slice(0,-2),E=JSON.stringify(E);else if(utils$1.isArray(E)&&isFlatArray(E)||(utils$1.isFileList(E)||utils$1.endsWith(T,"[]"))&&(C=utils$1.toArray(E)))return T=removeBrackets(T),C.forEach(function(b,A){!(utils$1.isUndefined(b)||b===null)&&t.append(o===!0?renderKey([T],A,a):o===null?T:T+"[]",d(b))}),!1}return isVisitable(E)?!0:(t.append(renderKey(M,T,a),d(E)),!1)}const x=[],y=Object.assign(predicates,{defaultVisitor:g,convertValue:d,isVisitable});function P(E,T){if(!utils$1.isUndefined(E)){if(x.indexOf(E)!==-1)throw Error("Circular reference detected in "+T.join("."));x.push(E),utils$1.forEach(E,function(C,S){(!(utils$1.isUndefined(C)||C===null)&&s.call(t,C,utils$1.isString(S)?S.trim():S,T,y))===!0&&P(C,T?T.concat(S):[S])}),x.pop()}}if(!utils$1.isObject(e))throw new TypeError("data must be an object");return P(e),t}function encode$1(e){const t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(i){return t[i]})}function AxiosURLSearchParams(e,t){this._pairs=[],e&&toFormData(e,this,t)}const prototype=AxiosURLSearchParams.prototype;prototype.append=function e(t,r){this._pairs.push([t,r])};prototype.toString=function e(t){const r=t?function(i){return t.call(this,i,encode$1)}:encode$1;return this._pairs.map(function(s){return r(s[0])+"="+r(s[1])},"").join("&")};function encode(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(e,t,r){if(!t)return e;const i=r&&r.encode||encode,s=r&&r.serialize;let a;if(s?a=s(t,r):a=utils$1.isURLSearchParams(t)?t.toString():new AxiosURLSearchParams(t,r).toString(i),a){const o=e.indexOf("#");o!==-1&&(e=e.slice(0,o)),e+=(e.indexOf("?")===-1?"?":"&")+a}return e}class InterceptorManager{constructor(){this.handlers=[]}use(t,r,i){return this.handlers.push({fulfilled:t,rejected:r,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(t){this.handlers[t]&&(this.handlers[t]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(t){utils$1.forEach(this.handlers,function(i){i!==null&&t(i)})}}const InterceptorManager$1=InterceptorManager,transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1=typeof URLSearchParams<"u"?URLSearchParams:AxiosURLSearchParams,FormData$1=typeof FormData<"u"?FormData:null,Blob$1=typeof Blob<"u"?Blob:null,platform$1={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob$1},protocols:["http","https","file","blob","url","data"]},hasBrowserEnv=typeof window<"u"&&typeof document<"u",hasStandardBrowserEnv=(e=>hasBrowserEnv&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),hasStandardBrowserWebWorkerEnv=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),utils=Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv,hasStandardBrowserEnv,hasStandardBrowserWebWorkerEnv},Symbol.toStringTag,{value:"Module"})),platform={...utils,...platform$1};function toURLEncodedForm(e,t){return toFormData(e,new platform.classes.URLSearchParams,Object.assign({visitor:function(r,i,s,a){return platform.isNode&&utils$1.isBuffer(r)?(this.append(i,r.toString("base64")),!1):a.defaultVisitor.apply(this,arguments)}},t))}function parsePropPath(e){return utils$1.matchAll(/\w+|\[(\w*)]/g,e).map(t=>t[0]==="[]"?"":t[1]||t[0])}function arrayToObject(e){const t={},r=Object.keys(e);let i;const s=r.length;let a;for(i=0;i<s;i++)a=r[i],t[a]=e[a];return t}function formDataToJSON(e){function t(r,i,s,a){let o=r[a++];const u=Number.isFinite(+o),c=a>=r.length;return o=!o&&utils$1.isArray(s)?s.length:o,c?(utils$1.hasOwnProp(s,o)?s[o]=[s[o],i]:s[o]=i,!u):((!s[o]||!utils$1.isObject(s[o]))&&(s[o]=[]),t(r,i,s[o],a)&&utils$1.isArray(s[o])&&(s[o]=arrayToObject(s[o])),!u)}if(utils$1.isFormData(e)&&utils$1.isFunction(e.entries)){const r={};return utils$1.forEachEntry(e,(i,s)=>{t(parsePropPath(i),s,r,0)}),r}return null}function stringifySafely(e,t,r){if(utils$1.isString(e))try{return(t||JSON.parse)(e),utils$1.trim(e)}catch(i){if(i.name!=="SyntaxError")throw i}return(r||JSON.stringify)(e)}const defaults$1={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function e(t,r){const i=r.getContentType()||"",s=i.indexOf("application/json")>-1,a=utils$1.isObject(t);if(a&&utils$1.isHTMLForm(t)&&(t=new FormData(t)),utils$1.isFormData(t))return s&&s?JSON.stringify(formDataToJSON(t)):t;if(utils$1.isArrayBuffer(t)||utils$1.isBuffer(t)||utils$1.isStream(t)||utils$1.isFile(t)||utils$1.isBlob(t))return t;if(utils$1.isArrayBufferView(t))return t.buffer;if(utils$1.isURLSearchParams(t))return r.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),t.toString();let u;if(a){if(i.indexOf("application/x-www-form-urlencoded")>-1)return toURLEncodedForm(t,this.formSerializer).toString();if((u=utils$1.isFileList(t))||i.indexOf("multipart/form-data")>-1){const c=this.env&&this.env.FormData;return toFormData(u?{"files[]":t}:t,c&&new c,this.formSerializer)}}return a||s?(r.setContentType("application/json",!1),stringifySafely(t)):t}],transformResponse:[function e(t){const r=this.transitional||defaults$1.transitional,i=r&&r.forcedJSONParsing,s=this.responseType==="json";if(t&&utils$1.isString(t)&&(i&&!this.responseType||s)){const o=!(r&&r.silentJSONParsing)&&s;try{return JSON.parse(t)}catch(u){if(o)throw u.name==="SyntaxError"?AxiosError.from(u,AxiosError.ERR_BAD_RESPONSE,this,null,this.response):u}}return t}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function e(t){return t>=200&&t<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};utils$1.forEach(["delete","get","head","post","put","patch"],e=>{defaults$1.headers[e]={}});const defaults$2=defaults$1,ignoreDuplicateOf=utils$1.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),parseHeaders=e=>{const t={};let r,i,s;return e&&e.split(`
`).forEach(function(o){s=o.indexOf(":"),r=o.substring(0,s).trim().toLowerCase(),i=o.substring(s+1).trim(),!(!r||t[r]&&ignoreDuplicateOf[r])&&(r==="set-cookie"?t[r]?t[r].push(i):t[r]=[i]:t[r]=t[r]?t[r]+", "+i:i)}),t},$internals=Symbol("internals");function normalizeHeader(e){return e&&String(e).trim().toLowerCase()}function normalizeValue(e){return e===!1||e==null?e:utils$1.isArray(e)?e.map(normalizeValue):String(e)}function parseTokens(e){const t=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=r.exec(e);)t[i[1]]=i[2];return t}const isValidHeaderName=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function matchHeaderValue(e,t,r,i,s){if(utils$1.isFunction(i))return i.call(this,t,r);if(s&&(t=r),!!utils$1.isString(t)){if(utils$1.isString(i))return t.indexOf(i)!==-1;if(utils$1.isRegExp(i))return i.test(t)}}function formatHeader(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(t,r,i)=>r.toUpperCase()+i)}function buildAccessors(e,t){const r=utils$1.toCamelCase(" "+t);["get","set","has"].forEach(i=>{Object.defineProperty(e,i+r,{value:function(s,a,o){return this[i].call(this,t,s,a,o)},configurable:!0})})}class AxiosHeaders{constructor(t){t&&this.set(t)}set(t,r,i){const s=this;function a(u,c,d){const g=normalizeHeader(c);if(!g)throw new Error("header name must be a non-empty string");const x=utils$1.findKey(s,g);(!x||s[x]===void 0||d===!0||d===void 0&&s[x]!==!1)&&(s[x||c]=normalizeValue(u))}const o=(u,c)=>utils$1.forEach(u,(d,g)=>a(d,g,c));return utils$1.isPlainObject(t)||t instanceof this.constructor?o(t,r):utils$1.isString(t)&&(t=t.trim())&&!isValidHeaderName(t)?o(parseHeaders(t),r):t!=null&&a(r,t,i),this}get(t,r){if(t=normalizeHeader(t),t){const i=utils$1.findKey(this,t);if(i){const s=this[i];if(!r)return s;if(r===!0)return parseTokens(s);if(utils$1.isFunction(r))return r.call(this,s,i);if(utils$1.isRegExp(r))return r.exec(s);throw new TypeError("parser must be boolean|regexp|function")}}}has(t,r){if(t=normalizeHeader(t),t){const i=utils$1.findKey(this,t);return!!(i&&this[i]!==void 0&&(!r||matchHeaderValue(this,this[i],i,r)))}return!1}delete(t,r){const i=this;let s=!1;function a(o){if(o=normalizeHeader(o),o){const u=utils$1.findKey(i,o);u&&(!r||matchHeaderValue(i,i[u],u,r))&&(delete i[u],s=!0)}}return utils$1.isArray(t)?t.forEach(a):a(t),s}clear(t){const r=Object.keys(this);let i=r.length,s=!1;for(;i--;){const a=r[i];(!t||matchHeaderValue(this,this[a],a,t,!0))&&(delete this[a],s=!0)}return s}normalize(t){const r=this,i={};return utils$1.forEach(this,(s,a)=>{const o=utils$1.findKey(i,a);if(o){r[o]=normalizeValue(s),delete r[a];return}const u=t?formatHeader(a):String(a).trim();u!==a&&delete r[a],r[u]=normalizeValue(s),i[u]=!0}),this}concat(...t){return this.constructor.concat(this,...t)}toJSON(t){const r=Object.create(null);return utils$1.forEach(this,(i,s)=>{i!=null&&i!==!1&&(r[s]=t&&utils$1.isArray(i)?i.join(", "):i)}),r}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([t,r])=>t+": "+r).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(t){return t instanceof this?t:new this(t)}static concat(t,...r){const i=new this(t);return r.forEach(s=>i.set(s)),i}static accessor(t){const i=(this[$internals]=this[$internals]={accessors:{}}).accessors,s=this.prototype;function a(o){const u=normalizeHeader(o);i[u]||(buildAccessors(s,o),i[u]=!0)}return utils$1.isArray(t)?t.forEach(a):a(t),this}}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);utils$1.reduceDescriptors(AxiosHeaders.prototype,({value:e},t)=>{let r=t[0].toUpperCase()+t.slice(1);return{get:()=>e,set(i){this[r]=i}}});utils$1.freezeMethods(AxiosHeaders);const AxiosHeaders$1=AxiosHeaders;function transformData(e,t){const r=this||defaults$2,i=t||r,s=AxiosHeaders$1.from(i.headers);let a=i.data;return utils$1.forEach(e,function(u){a=u.call(r,a,s.normalize(),t?t.status:void 0)}),s.normalize(),a}function isCancel(e){return!!(e&&e.__CANCEL__)}function CanceledError(e,t,r){AxiosError.call(this,e??"canceled",AxiosError.ERR_CANCELED,t,r),this.name="CanceledError"}utils$1.inherits(CanceledError,AxiosError,{__CANCEL__:!0});function settle(e,t,r){const i=r.config.validateStatus;!r.status||!i||i(r.status)?e(r):t(new AxiosError("Request failed with status code "+r.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r))}const cookies=platform.hasStandardBrowserEnv?{write(e,t,r,i,s,a){const o=[e+"="+encodeURIComponent(t)];utils$1.isNumber(r)&&o.push("expires="+new Date(r).toGMTString()),utils$1.isString(i)&&o.push("path="+i),utils$1.isString(s)&&o.push("domain="+s),a===!0&&o.push("secure"),document.cookie=o.join("; ")},read(e){const t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function isAbsoluteURL(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function combineURLs(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}function buildFullPath(e,t){return e&&!isAbsoluteURL(t)?combineURLs(e,t):t}const isURLSameOrigin=platform.hasStandardBrowserEnv?function e(){const t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");let i;function s(a){let o=a;return t&&(r.setAttribute("href",o),o=r.href),r.setAttribute("href",o),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:r.pathname.charAt(0)==="/"?r.pathname:"/"+r.pathname}}return i=s(window.location.href),function(o){const u=utils$1.isString(o)?s(o):o;return u.protocol===i.protocol&&u.host===i.host}}():function e(){return function(){return!0}}();function parseProtocol(e){const t=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return t&&t[1]||""}function speedometer(e,t){e=e||10;const r=new Array(e),i=new Array(e);let s=0,a=0,o;return t=t!==void 0?t:1e3,function(c){const d=Date.now(),g=i[a];o||(o=d),r[s]=c,i[s]=d;let x=a,y=0;for(;x!==s;)y+=r[x++],x=x%e;if(s=(s+1)%e,s===a&&(a=(a+1)%e),d-o<t)return;const P=g&&d-g;return P?Math.round(y*1e3/P):void 0}}function progressEventReducer(e,t){let r=0;const i=speedometer(50,250);return s=>{const a=s.loaded,o=s.lengthComputable?s.total:void 0,u=a-r,c=i(u),d=a<=o;r=a;const g={loaded:a,total:o,progress:o?a/o:void 0,bytes:u,rate:c||void 0,estimated:c&&o&&d?(o-a)/c:void 0,event:s};g[t?"download":"upload"]=!0,e(g)}}const isXHRAdapterSupported=typeof XMLHttpRequest<"u",xhrAdapter=isXHRAdapterSupported&&function(e){return new Promise(function(r,i){let s=e.data;const a=AxiosHeaders$1.from(e.headers).normalize();let{responseType:o,withXSRFToken:u}=e,c;function d(){e.cancelToken&&e.cancelToken.unsubscribe(c),e.signal&&e.signal.removeEventListener("abort",c)}let g;if(utils$1.isFormData(s)){if(platform.hasStandardBrowserEnv||platform.hasStandardBrowserWebWorkerEnv)a.setContentType(!1);else if((g=a.getContentType())!==!1){const[T,...M]=g?g.split(";").map(C=>C.trim()).filter(Boolean):[];a.setContentType([T||"multipart/form-data",...M].join("; "))}}let x=new XMLHttpRequest;if(e.auth){const T=e.auth.username||"",M=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";a.set("Authorization","Basic "+btoa(T+":"+M))}const y=buildFullPath(e.baseURL,e.url);x.open(e.method.toUpperCase(),buildURL(y,e.params,e.paramsSerializer),!0),x.timeout=e.timeout;function P(){if(!x)return;const T=AxiosHeaders$1.from("getAllResponseHeaders"in x&&x.getAllResponseHeaders()),C={data:!o||o==="text"||o==="json"?x.responseText:x.response,status:x.status,statusText:x.statusText,headers:T,config:e,request:x};settle(function(b){r(b),d()},function(b){i(b),d()},C),x=null}if("onloadend"in x?x.onloadend=P:x.onreadystatechange=function(){!x||x.readyState!==4||x.status===0&&!(x.responseURL&&x.responseURL.indexOf("file:")===0)||setTimeout(P)},x.onabort=function(){x&&(i(new AxiosError("Request aborted",AxiosError.ECONNABORTED,e,x)),x=null)},x.onerror=function(){i(new AxiosError("Network Error",AxiosError.ERR_NETWORK,e,x)),x=null},x.ontimeout=function(){let M=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const C=e.transitional||transitionalDefaults;e.timeoutErrorMessage&&(M=e.timeoutErrorMessage),i(new AxiosError(M,C.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,e,x)),x=null},platform.hasStandardBrowserEnv&&(u&&utils$1.isFunction(u)&&(u=u(e)),u||u!==!1&&isURLSameOrigin(y))){const T=e.xsrfHeaderName&&e.xsrfCookieName&&cookies.read(e.xsrfCookieName);T&&a.set(e.xsrfHeaderName,T)}s===void 0&&a.setContentType(null),"setRequestHeader"in x&&utils$1.forEach(a.toJSON(),function(M,C){x.setRequestHeader(C,M)}),utils$1.isUndefined(e.withCredentials)||(x.withCredentials=!!e.withCredentials),o&&o!=="json"&&(x.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&x.addEventListener("progress",progressEventReducer(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&x.upload&&x.upload.addEventListener("progress",progressEventReducer(e.onUploadProgress)),(e.cancelToken||e.signal)&&(c=T=>{x&&(i(!T||T.type?new CanceledError(null,e,x):T),x.abort(),x=null)},e.cancelToken&&e.cancelToken.subscribe(c),e.signal&&(e.signal.aborted?c():e.signal.addEventListener("abort",c)));const E=parseProtocol(y);if(E&&platform.protocols.indexOf(E)===-1){i(new AxiosError("Unsupported protocol "+E+":",AxiosError.ERR_BAD_REQUEST,e));return}x.send(s||null)})},knownAdapters={http:httpAdapter,xhr:xhrAdapter};utils$1.forEach(knownAdapters,(e,t)=>{if(e){try{Object.defineProperty(e,"name",{value:t})}catch{}Object.defineProperty(e,"adapterName",{value:t})}});const renderReason=e=>`- ${e}`,isResolvedHandle=e=>utils$1.isFunction(e)||e===null||e===!1,adapters={getAdapter:e=>{e=utils$1.isArray(e)?e:[e];const{length:t}=e;let r,i;const s={};for(let a=0;a<t;a++){r=e[a];let o;if(i=r,!isResolvedHandle(r)&&(i=knownAdapters[(o=String(r)).toLowerCase()],i===void 0))throw new AxiosError(`Unknown adapter '${o}'`);if(i)break;s[o||"#"+a]=i}if(!i){const a=Object.entries(s).map(([u,c])=>`adapter ${u} `+(c===!1?"is not supported by the environment":"is not available in the build"));let o=t?a.length>1?`since :
`+a.map(renderReason).join(`
`):" "+renderReason(a[0]):"as no adapter specified";throw new AxiosError("There is no suitable adapter to dispatch the request "+o,"ERR_NOT_SUPPORT")}return i},adapters:knownAdapters};function throwIfCancellationRequested(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new CanceledError(null,e)}function dispatchRequest(e){return throwIfCancellationRequested(e),e.headers=AxiosHeaders$1.from(e.headers),e.data=transformData.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),adapters.getAdapter(e.adapter||defaults$2.adapter)(e).then(function(i){return throwIfCancellationRequested(e),i.data=transformData.call(e,e.transformResponse,i),i.headers=AxiosHeaders$1.from(i.headers),i},function(i){return isCancel(i)||(throwIfCancellationRequested(e),i&&i.response&&(i.response.data=transformData.call(e,e.transformResponse,i.response),i.response.headers=AxiosHeaders$1.from(i.response.headers))),Promise.reject(i)})}const headersToObject=e=>e instanceof AxiosHeaders$1?e.toJSON():e;function mergeConfig(e,t){t=t||{};const r={};function i(d,g,x){return utils$1.isPlainObject(d)&&utils$1.isPlainObject(g)?utils$1.merge.call({caseless:x},d,g):utils$1.isPlainObject(g)?utils$1.merge({},g):utils$1.isArray(g)?g.slice():g}function s(d,g,x){if(utils$1.isUndefined(g)){if(!utils$1.isUndefined(d))return i(void 0,d,x)}else return i(d,g,x)}function a(d,g){if(!utils$1.isUndefined(g))return i(void 0,g)}function o(d,g){if(utils$1.isUndefined(g)){if(!utils$1.isUndefined(d))return i(void 0,d)}else return i(void 0,g)}function u(d,g,x){if(x in t)return i(d,g);if(x in e)return i(void 0,d)}const c={url:a,method:a,data:a,baseURL:o,transformRequest:o,transformResponse:o,paramsSerializer:o,timeout:o,timeoutMessage:o,withCredentials:o,withXSRFToken:o,adapter:o,responseType:o,xsrfCookieName:o,xsrfHeaderName:o,onUploadProgress:o,onDownloadProgress:o,decompress:o,maxContentLength:o,maxBodyLength:o,beforeRedirect:o,transport:o,httpAgent:o,httpsAgent:o,cancelToken:o,socketPath:o,responseEncoding:o,validateStatus:u,headers:(d,g)=>s(headersToObject(d),headersToObject(g),!0)};return utils$1.forEach(Object.keys(Object.assign({},e,t)),function(g){const x=c[g]||s,y=x(e[g],t[g],g);utils$1.isUndefined(y)&&x!==u||(r[g]=y)}),r}const VERSION="1.6.2",validators$1={};["object","boolean","number","function","string","symbol"].forEach((e,t)=>{validators$1[e]=function(i){return typeof i===e||"a"+(t<1?"n ":" ")+e}});const deprecatedWarnings={};validators$1.transitional=function e(t,r,i){function s(a,o){return"[Axios v"+VERSION+"] Transitional option '"+a+"'"+o+(i?". "+i:"")}return(a,o,u)=>{if(t===!1)throw new AxiosError(s(o," has been removed"+(r?" in "+r:"")),AxiosError.ERR_DEPRECATED);return r&&!deprecatedWarnings[o]&&(deprecatedWarnings[o]=!0,console.warn(s(o," has been deprecated since v"+r+" and will be removed in the near future"))),t?t(a,o,u):!0}};function assertOptions(e,t,r){if(typeof e!="object")throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);const i=Object.keys(e);let s=i.length;for(;s-- >0;){const a=i[s],o=t[a];if(o){const u=e[a],c=u===void 0||o(u,a,e);if(c!==!0)throw new AxiosError("option "+a+" must be "+c,AxiosError.ERR_BAD_OPTION_VALUE);continue}if(r!==!0)throw new AxiosError("Unknown option "+a,AxiosError.ERR_BAD_OPTION)}}const validator={assertOptions,validators:validators$1},validators=validator.validators;class Axios{constructor(t){this.defaults=t,this.interceptors={request:new InterceptorManager$1,response:new InterceptorManager$1}}request(t,r){typeof t=="string"?(r=r||{},r.url=t):r=t||{},r=mergeConfig(this.defaults,r);const{transitional:i,paramsSerializer:s,headers:a}=r;i!==void 0&&validator.assertOptions(i,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),s!=null&&(utils$1.isFunction(s)?r.paramsSerializer={serialize:s}:validator.assertOptions(s,{encode:validators.function,serialize:validators.function},!0)),r.method=(r.method||this.defaults.method||"get").toLowerCase();let o=a&&utils$1.merge(a.common,a[r.method]);a&&utils$1.forEach(["delete","get","head","post","put","patch","common"],E=>{delete a[E]}),r.headers=AxiosHeaders$1.concat(o,a);const u=[];let c=!0;this.interceptors.request.forEach(function(T){typeof T.runWhen=="function"&&T.runWhen(r)===!1||(c=c&&T.synchronous,u.unshift(T.fulfilled,T.rejected))});const d=[];this.interceptors.response.forEach(function(T){d.push(T.fulfilled,T.rejected)});let g,x=0,y;if(!c){const E=[dispatchRequest.bind(this),void 0];for(E.unshift.apply(E,u),E.push.apply(E,d),y=E.length,g=Promise.resolve(r);x<y;)g=g.then(E[x++],E[x++]);return g}y=u.length;let P=r;for(x=0;x<y;){const E=u[x++],T=u[x++];try{P=E(P)}catch(M){T.call(this,M);break}}try{g=dispatchRequest.call(this,P)}catch(E){return Promise.reject(E)}for(x=0,y=d.length;x<y;)g=g.then(d[x++],d[x++]);return g}getUri(t){t=mergeConfig(this.defaults,t);const r=buildFullPath(t.baseURL,t.url);return buildURL(r,t.params,t.paramsSerializer)}}utils$1.forEach(["delete","get","head","options"],function e(t){Axios.prototype[t]=function(r,i){return this.request(mergeConfig(i||{},{method:t,url:r,data:(i||{}).data}))}});utils$1.forEach(["post","put","patch"],function e(t){function r(i){return function(a,o,u){return this.request(mergeConfig(u||{},{method:t,headers:i?{"Content-Type":"multipart/form-data"}:{},url:a,data:o}))}}Axios.prototype[t]=r(),Axios.prototype[t+"Form"]=r(!0)});const Axios$1=Axios;class CancelToken{constructor(t){if(typeof t!="function")throw new TypeError("executor must be a function.");let r;this.promise=new Promise(function(a){r=a});const i=this;this.promise.then(s=>{if(!i._listeners)return;let a=i._listeners.length;for(;a-- >0;)i._listeners[a](s);i._listeners=null}),this.promise.then=s=>{let a;const o=new Promise(u=>{i.subscribe(u),a=u}).then(s);return o.cancel=function(){i.unsubscribe(a)},o},t(function(a,o,u){i.reason||(i.reason=new CanceledError(a,o,u),r(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(t){if(this.reason){t(this.reason);return}this._listeners?this._listeners.push(t):this._listeners=[t]}unsubscribe(t){if(!this._listeners)return;const r=this._listeners.indexOf(t);r!==-1&&this._listeners.splice(r,1)}static source(){let t;return{token:new CancelToken(function(s){t=s}),cancel:t}}}const CancelToken$1=CancelToken;function spread(e){return function(r){return e.apply(null,r)}}function isAxiosError(e){return utils$1.isObject(e)&&e.isAxiosError===!0}const HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach(([e,t])=>{HttpStatusCode[t]=e});const HttpStatusCode$1=HttpStatusCode;function createInstance(e){const t=new Axios$1(e),r=bind(Axios$1.prototype.request,t);return utils$1.extend(r,Axios$1.prototype,t,{allOwnKeys:!0}),utils$1.extend(r,t,null,{allOwnKeys:!0}),r.create=function(s){return createInstance(mergeConfig(e,s))},r}const axios=createInstance(defaults$2);axios.Axios=Axios$1;axios.CanceledError=CanceledError;axios.CancelToken=CancelToken$1;axios.isCancel=isCancel;axios.VERSION=VERSION;axios.toFormData=toFormData;axios.AxiosError=AxiosError;axios.Cancel=axios.CanceledError;axios.all=function e(t){return Promise.all(t)};axios.spread=spread;axios.isAxiosError=isAxiosError;axios.mergeConfig=mergeConfig;axios.AxiosHeaders=AxiosHeaders$1;axios.formToJSON=e=>formDataToJSON(utils$1.isHTMLForm(e)?new FormData(e):e);axios.getAdapter=adapters.getAdapter;axios.HttpStatusCode=HttpStatusCode$1;axios.default=axios;const axios$1=axios,APIURL="https://magnaingenieriaytopografia.com",apiClient=axios$1.create({baseURL:APIURL,headers:{"Content-type":"application/json"}});apiClient.interceptors.request.use(async e=>{const t=localStorage.getItem("token");return t&&(e.headers.Authorization=`JWT ${t}`),e});const fetchWorkers=async()=>{try{return(await apiClient.get("equipos/")).data}catch(e){console.log(e);return}},fetchServices1=async()=>{try{const e=await apiClient.get("servicios/servicios-and-subservicios/");return console.log(e.data,"aqui estoy en fetchServices"),e.data}catch(e){console.log(e);return}},fetchProjects=async()=>{try{return(await apiClient.get("proyectos/")).data}catch(e){console.log(e);return}},fetchProjectsImages=async()=>{try{return(await apiClient.get("proyectos/images/")).data}catch(e){console.log(e);return}},fetchBrochure=async()=>{try{return(await apiClient.get("servicios/brochure/")).data}catch(e){console.log(e);return}},ServiciosIdProvider=({children:e})=>{const{data:t,error:r,isLoading:i,isError:s}=useQuery({queryKey:["services"],queryFn:fetchServices1,staleTime:18e5,refetchOnWindowFocus:!1,refetchInterval:18e5});console.log(t,"aqui estoy en servicios");const{error:a,isError:o}=useQuery({queryKey:["workers"],queryFn:fetchWorkers,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30}),{error:u,isError:c}=useQuery({queryKey:["projects"],queryFn:fetchProjects,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30}),{error:d}=useQuery({queryKey:["projectsImages"],queryFn:fetchProjectsImages,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30});return(o||c)&&console.log(a,u,d,"aqui estoy en error"),i?jsxRuntimeExports.jsx("div",{children:"cargando..."}):(s&&console.log(r,"aqui estoy en error"),jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment,{children:e}))};var classnames={exports:{}};/*!
	Copyright (c) 2018 Jed Watson.
	Licensed under the MIT License (MIT), see
	http://jedwatson.github.io/classnames
*/(function(e){(function(){var t={}.hasOwnProperty;function r(){for(var a="",o=0;o<arguments.length;o++){var u=arguments[o];u&&(a=s(a,i(u)))}return a}function i(a){if(typeof a=="string"||typeof a=="number")return a;if(typeof a!="object")return"";if(Array.isArray(a))return r.apply(null,a);if(a.toString!==Object.prototype.toString&&!a.toString.toString().includes("[native code]"))return a.toString();var o="";for(var u in a)t.call(a,u)&&a[u]&&(o=s(o,u));return o}function s(a,o){return o?a?a+" "+o:a+o:a}e.exports?(r.default=r,e.exports=r):window.classNames=r})()})(classnames);var classnamesExports=classnames.exports;const classNames=getDefaultExportFromCjs(classnamesExports);function _extends$1(){return _extends$1=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e},_extends$1.apply(this,arguments)}function _objectWithoutPropertiesLoose$5(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function defaultKey(e){return"default"+e.charAt(0).toUpperCase()+e.substr(1)}function _toPropertyKey(e){var t=_toPrimitive(e,"string");return typeof t=="symbol"?t:String(t)}function _toPrimitive(e,t){if(typeof e!="object"||e===null)return e;var r=e[Symbol.toPrimitive];if(r!==void 0){var i=r.call(e,t||"default");if(typeof i!="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(t==="string"?String:Number)(e)}function useUncontrolledProp(e,t,r){var i=reactExports.useRef(e!==void 0),s=reactExports.useState(t),a=s[0],o=s[1],u=e!==void 0,c=i.current;return i.current=u,!u&&c&&a!==t&&o(t),[u?e:a,reactExports.useCallback(function(d){for(var g=arguments.length,x=new Array(g>1?g-1:0),y=1;y<g;y++)x[y-1]=arguments[y];r&&r.apply(void 0,[d].concat(x)),o(d)},[r])]}function useUncontrolled(e,t){return Object.keys(t).reduce(function(r,i){var s,a=r,o=a[defaultKey(i)],u=a[i],c=_objectWithoutPropertiesLoose$5(a,[defaultKey(i),i].map(_toPropertyKey)),d=t[i],g=useUncontrolledProp(u,o,e[d]),x=g[0],y=g[1];return _extends$1({},c,(s={},s[i]=x,s[d]=y,s))},e)}function _setPrototypeOf(e,t){return _setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(i,s){return i.__proto__=s,i},_setPrototypeOf(e,t)}function _inheritsLoose(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,_setPrototypeOf(e,t)}const DEFAULT_BREAKPOINTS=["xxl","xl","lg","md","sm","xs"],DEFAULT_MIN_BREAKPOINT="xs",ThemeContext=reactExports.createContext({prefixes:{},breakpoints:DEFAULT_BREAKPOINTS,minBreakpoint:DEFAULT_MIN_BREAKPOINT});function useBootstrapPrefix(e,t){const{prefixes:r}=reactExports.useContext(ThemeContext);return e||r[t]||t}function useBootstrapBreakpoints(){const{breakpoints:e}=reactExports.useContext(ThemeContext);return e}function useBootstrapMinBreakpoint(){const{minBreakpoint:e}=reactExports.useContext(ThemeContext);return e}function ownerDocument(e){return e&&e.ownerDocument||document}function ownerWindow(e){var t=ownerDocument(e);return t&&t.defaultView||window}function getComputedStyle$3(e,t){return ownerWindow(e).getComputedStyle(e,t)}var rUpper=/([A-Z])/g;function hyphenate(e){return e.replace(rUpper,"-$1").toLowerCase()}var msPattern=/^ms-/;function hyphenateStyleName(e){return hyphenate(e).replace(msPattern,"-ms-")}var supportedTransforms=/^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i;function isTransform(e){return!!(e&&supportedTransforms.test(e))}function style(e,t){var r="",i="";if(typeof t=="string")return e.style.getPropertyValue(hyphenateStyleName(t))||getComputedStyle$3(e).getPropertyValue(hyphenateStyleName(t));Object.keys(t).forEach(function(s){var a=t[s];!a&&a!==0?e.style.removeProperty(hyphenateStyleName(s)):isTransform(s)?i+=s+"("+a+") ":r+=hyphenateStyleName(s)+": "+a+";"}),i&&(r+="transform: "+i+";"),e.style.cssText+=";"+r}var propTypes$1={exports:{}},ReactPropTypesSecret$1="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED",ReactPropTypesSecret_1=ReactPropTypesSecret$1,ReactPropTypesSecret=ReactPropTypesSecret_1;function emptyFunction(){}function emptyFunctionWithReset(){}emptyFunctionWithReset.resetWarningCache=emptyFunction;var factoryWithThrowingShims=function(){function e(i,s,a,o,u,c){if(c!==ReactPropTypesSecret){var d=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw d.name="Invariant Violation",d}}e.isRequired=e;function t(){return e}var r={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:emptyFunctionWithReset,resetWarningCache:emptyFunction};return r.PropTypes=r,r};propTypes$1.exports=factoryWithThrowingShims();var propTypesExports=propTypes$1.exports;const PropTypes=getDefaultExportFromCjs(propTypesExports),config={disabled:!1},TransitionGroupContext=React.createContext(null);var forceReflow=function e(t){return t.scrollTop},UNMOUNTED="unmounted",EXITED="exited",ENTERING="entering",ENTERED="entered",EXITING="exiting",Transition=function(e){_inheritsLoose(t,e);function t(i,s){var a;a=e.call(this,i,s)||this;var o=s,u=o&&!o.isMounting?i.enter:i.appear,c;return a.appearStatus=null,i.in?u?(c=EXITED,a.appearStatus=ENTERING):c=ENTERED:i.unmountOnExit||i.mountOnEnter?c=UNMOUNTED:c=EXITED,a.state={status:c},a.nextCallback=null,a}t.getDerivedStateFromProps=function(s,a){var o=s.in;return o&&a.status===UNMOUNTED?{status:EXITED}:null};var r=t.prototype;return r.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},r.componentDidUpdate=function(s){var a=null;if(s!==this.props){var o=this.state.status;this.props.in?o!==ENTERING&&o!==ENTERED&&(a=ENTERING):(o===ENTERING||o===ENTERED)&&(a=EXITING)}this.updateStatus(!1,a)},r.componentWillUnmount=function(){this.cancelNextCallback()},r.getTimeouts=function(){var s=this.props.timeout,a,o,u;return a=o=u=s,s!=null&&typeof s!="number"&&(a=s.exit,o=s.enter,u=s.appear!==void 0?s.appear:o),{exit:a,enter:o,appear:u}},r.updateStatus=function(s,a){if(s===void 0&&(s=!1),a!==null)if(this.cancelNextCallback(),a===ENTERING){if(this.props.unmountOnExit||this.props.mountOnEnter){var o=this.props.nodeRef?this.props.nodeRef.current:ReactDOM.findDOMNode(this);o&&forceReflow(o)}this.performEnter(s)}else this.performExit();else this.props.unmountOnExit&&this.state.status===EXITED&&this.setState({status:UNMOUNTED})},r.performEnter=function(s){var a=this,o=this.props.enter,u=this.context?this.context.isMounting:s,c=this.props.nodeRef?[u]:[ReactDOM.findDOMNode(this),u],d=c[0],g=c[1],x=this.getTimeouts(),y=u?x.appear:x.enter;if(!s&&!o||config.disabled){this.safeSetState({status:ENTERED},function(){a.props.onEntered(d)});return}this.props.onEnter(d,g),this.safeSetState({status:ENTERING},function(){a.props.onEntering(d,g),a.onTransitionEnd(y,function(){a.safeSetState({status:ENTERED},function(){a.props.onEntered(d,g)})})})},r.performExit=function(){var s=this,a=this.props.exit,o=this.getTimeouts(),u=this.props.nodeRef?void 0:ReactDOM.findDOMNode(this);if(!a||config.disabled){this.safeSetState({status:EXITED},function(){s.props.onExited(u)});return}this.props.onExit(u),this.safeSetState({status:EXITING},function(){s.props.onExiting(u),s.onTransitionEnd(o.exit,function(){s.safeSetState({status:EXITED},function(){s.props.onExited(u)})})})},r.cancelNextCallback=function(){this.nextCallback!==null&&(this.nextCallback.cancel(),this.nextCallback=null)},r.safeSetState=function(s,a){a=this.setNextCallback(a),this.setState(s,a)},r.setNextCallback=function(s){var a=this,o=!0;return this.nextCallback=function(u){o&&(o=!1,a.nextCallback=null,s(u))},this.nextCallback.cancel=function(){o=!1},this.nextCallback},r.onTransitionEnd=function(s,a){this.setNextCallback(a);var o=this.props.nodeRef?this.props.nodeRef.current:ReactDOM.findDOMNode(this),u=s==null&&!this.props.addEndListener;if(!o||u){setTimeout(this.nextCallback,0);return}if(this.props.addEndListener){var c=this.props.nodeRef?[this.nextCallback]:[o,this.nextCallback],d=c[0],g=c[1];this.props.addEndListener(d,g)}s!=null&&setTimeout(this.nextCallback,s)},r.render=function(){var s=this.state.status;if(s===UNMOUNTED)return null;var a=this.props,o=a.children;a.in,a.mountOnEnter,a.unmountOnExit,a.appear,a.enter,a.exit,a.timeout,a.addEndListener,a.onEnter,a.onEntering,a.onEntered,a.onExit,a.onExiting,a.onExited,a.nodeRef;var u=_objectWithoutPropertiesLoose$5(a,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]);return React.createElement(TransitionGroupContext.Provider,{value:null},typeof o=="function"?o(s,u):React.cloneElement(React.Children.only(o),u))},t}(React.Component);Transition.contextType=TransitionGroupContext;Transition.propTypes={};function noop$2(){}Transition.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:noop$2,onEntering:noop$2,onEntered:noop$2,onExit:noop$2,onExiting:noop$2,onExited:noop$2};Transition.UNMOUNTED=UNMOUNTED;Transition.EXITED=EXITED;Transition.ENTERING=ENTERING;Transition.ENTERED=ENTERED;Transition.EXITING=EXITING;const Transition$1=Transition,canUseDOM=!!(typeof window<"u"&&window.document&&window.document.createElement);var optionsSupported=!1,onceSupported=!1;try{var options={get passive(){return optionsSupported=!0},get once(){return onceSupported=optionsSupported=!0}};canUseDOM&&(window.addEventListener("test",options,options),window.removeEventListener("test",options,!0))}catch(e){}function addEventListener(e,t,r,i){if(i&&typeof i!="boolean"&&!onceSupported){var s=i.once,a=i.capture,o=r;!onceSupported&&s&&(o=r.__once||function u(c){this.removeEventListener(t,u,a),r.call(this,c)},r.__once=o),e.addEventListener(t,o,optionsSupported?i:a)}e.addEventListener(t,r,i)}function removeEventListener(e,t,r,i){var s=i&&typeof i!="boolean"?i.capture:i;e.removeEventListener(t,r,s),r.__once&&e.removeEventListener(t,r.__once,s)}function listen(e,t,r,i){return addEventListener(e,t,r,i),function(){removeEventListener(e,t,r,i)}}function triggerEvent(e,t,r,i){if(r===void 0&&(r=!1),i===void 0&&(i=!0),e){var s=document.createEvent("HTMLEvents");s.initEvent(t,r,i),e.dispatchEvent(s)}}function parseDuration$1(e){var t=style(e,"transitionDuration")||"",r=t.indexOf("ms")===-1?1e3:1;return parseFloat(t)*r}function emulateTransitionEnd(e,t,r){r===void 0&&(r=5);var i=!1,s=setTimeout(function(){i||triggerEvent(e,"transitionend",!0)},t+r),a=listen(e,"transitionend",function(){i=!0},{once:!0});return function(){clearTimeout(s),a()}}function transitionEnd$1(e,t,r,i){r==null&&(r=parseDuration$1(e)||0);var s=emulateTransitionEnd(e,r,i),a=listen(e,"transitionend",t);return function(){s(),a()}}function parseDuration(e,t){const r=style(e,t)||"",i=r.indexOf("ms")===-1?1e3:1;return parseFloat(r)*i}function transitionEndListener(e,t){const r=parseDuration(e,"transitionDuration"),i=parseDuration(e,"transitionDelay"),s=transitionEnd$1(e,a=>{a.target===e&&(s(),t(a))},r+i)}function createChainedFunction(...e){return e.filter(t=>t!=null).reduce((t,r)=>{if(typeof r!="function")throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");return t===null?r:function(...s){t.apply(this,s),r.apply(this,s)}},null)}function triggerBrowserReflow(e){e.offsetHeight}const toFnRef=e=>!e||typeof e=="function"?e:t=>{e.current=t};function mergeRefs(e,t){const r=toFnRef(e),i=toFnRef(t);return s=>{r&&r(s),i&&i(s)}}function useMergedRefs(e,t){return reactExports.useMemo(()=>mergeRefs(e,t),[e,t])}function safeFindDOMNode(e){return e&&"setState"in e?ReactDOM.findDOMNode(e):e??null}const TransitionWrapper=React.forwardRef(({onEnter:e,onEntering:t,onEntered:r,onExit:i,onExiting:s,onExited:a,addEndListener:o,children:u,childRef:c,...d},g)=>{const x=reactExports.useRef(null),y=useMergedRefs(x,c),P=I=>{y(safeFindDOMNode(I))},E=I=>D=>{I&&x.current&&I(x.current,D)},T=reactExports.useCallback(E(e),[e]),M=reactExports.useCallback(E(t),[t]),C=reactExports.useCallback(E(r),[r]),S=reactExports.useCallback(E(i),[i]),b=reactExports.useCallback(E(s),[s]),A=reactExports.useCallback(E(a),[a]),R=reactExports.useCallback(E(o),[o]);return jsxRuntimeExports.jsx(Transition$1,{ref:g,...d,onEnter:T,onEntered:C,onEntering:M,onExit:S,onExited:A,onExiting:b,addEndListener:R,nodeRef:x,children:typeof u=="function"?(I,D)=>u(I,{...D,ref:P}):React.cloneElement(u,{ref:P})})}),TransitionWrapper$1=TransitionWrapper,MARGINS={height:["marginTop","marginBottom"],width:["marginLeft","marginRight"]};function getDefaultDimensionValue(e,t){const r=`offset${e[0].toUpperCase()}${e.slice(1)}`,i=t[r],s=MARGINS[e];return i+parseInt(style(t,s[0]),10)+parseInt(style(t,s[1]),10)}const collapseStyles={[EXITED]:"collapse",[EXITING]:"collapsing",[ENTERING]:"collapsing",[ENTERED]:"collapse show"},Collapse=React.forwardRef(({onEnter:e,onEntering:t,onEntered:r,onExit:i,onExiting:s,className:a,children:o,dimension:u="height",in:c=!1,timeout:d=300,mountOnEnter:g=!1,unmountOnExit:x=!1,appear:y=!1,getDimensionValue:P=getDefaultDimensionValue,...E},T)=>{const M=typeof u=="function"?u():u,C=reactExports.useMemo(()=>createChainedFunction(I=>{I.style[M]="0"},e),[M,e]),S=reactExports.useMemo(()=>createChainedFunction(I=>{const D=`scroll${M[0].toUpperCase()}${M.slice(1)}`;I.style[M]=`${I[D]}px`},t),[M,t]),b=reactExports.useMemo(()=>createChainedFunction(I=>{I.style[M]=null},r),[M,r]),A=reactExports.useMemo(()=>createChainedFunction(I=>{I.style[M]=`${P(M,I)}px`,triggerBrowserReflow(I)},i),[i,P,M]),R=reactExports.useMemo(()=>createChainedFunction(I=>{I.style[M]=null},s),[M,s]);return jsxRuntimeExports.jsx(TransitionWrapper$1,{ref:T,addEndListener:transitionEndListener,...E,"aria-expanded":E.role?c:null,onEnter:C,onEntering:S,onEntered:b,onExit:A,onExiting:R,childRef:o.ref,in:c,timeout:d,mountOnEnter:g,unmountOnExit:x,appear:y,children:(I,D)=>React.cloneElement(o,{...D,className:classNames(a,o.props.className,collapseStyles[I],M==="width"&&"collapse-horizontal")})})}),Collapse$1=Collapse;function useCommittedRef(e){const t=reactExports.useRef(e);return reactExports.useEffect(()=>{t.current=e},[e]),t}function useEventCallback(e){const t=useCommittedRef(e);return reactExports.useCallback(function(...r){return t.current&&t.current(...r)},[t])}const divWithClassName=e=>reactExports.forwardRef((t,r)=>jsxRuntimeExports.jsx("div",{...t,ref:r,className:classNames(t.className,e)}));function useMounted(){const e=reactExports.useRef(!0),t=reactExports.useRef(()=>e.current);return reactExports.useEffect(()=>(e.current=!0,()=>{e.current=!1}),[]),t.current}function usePrevious(e){const t=reactExports.useRef(null);return reactExports.useEffect(()=>{t.current=e}),t.current}const isReactNative=typeof global<"u"&&global.navigator&&global.navigator.product==="ReactNative",isDOM=typeof document<"u",useIsomorphicEffect=isDOM||isReactNative?reactExports.useLayoutEffect:reactExports.useEffect,_excluded$4=["as","disabled"];function _objectWithoutPropertiesLoose$4(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function isTrivialHref$1(e){return!e||e.trim()==="#"}function useButtonProps({tagName:e,disabled:t,href:r,target:i,rel:s,role:a,onClick:o,tabIndex:u=0,type:c}){e||(r!=null||i!=null||s!=null?e="a":e="button");const d={tagName:e};if(e==="button")return[{type:c||"button",disabled:t},d];const g=y=>{if((t||e==="a"&&isTrivialHref$1(r))&&y.preventDefault(),t){y.stopPropagation();return}o==null||o(y)},x=y=>{y.key===" "&&(y.preventDefault(),g(y))};return e==="a"&&(r||(r="#"),t&&(r=void 0)),[{role:a??"button",disabled:void 0,tabIndex:t?void 0:u,href:r,target:e==="a"?i:void 0,"aria-disabled":t||void 0,rel:e==="a"?s:void 0,onClick:g,onKeyDown:x},d]}const Button=reactExports.forwardRef((e,t)=>{let{as:r,disabled:i}=e,s=_objectWithoutPropertiesLoose$4(e,_excluded$4);const[a,{tagName:o}]=useButtonProps(Object.assign({tagName:r,disabled:i},s));return jsxRuntimeExports.jsx(o,Object.assign({},s,a,{ref:t}))});Button.displayName="Button";const _excluded$3=["onKeyDown"];function _objectWithoutPropertiesLoose$3(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function isTrivialHref(e){return!e||e.trim()==="#"}const Anchor=reactExports.forwardRef((e,t)=>{let{onKeyDown:r}=e,i=_objectWithoutPropertiesLoose$3(e,_excluded$3);const[s]=useButtonProps(Object.assign({tagName:"a"},i)),a=useEventCallback(o=>{s.onKeyDown(o),r==null||r(o)});return isTrivialHref(i.href)||i.role==="button"?jsxRuntimeExports.jsx("a",Object.assign({ref:t},i,s,{onKeyDown:a})):jsxRuntimeExports.jsx("a",Object.assign({ref:t},i,{onKeyDown:r}))});Anchor.displayName="Anchor";const Anchor$1=Anchor,fadeStyles={[ENTERING]:"show",[ENTERED]:"show"},Fade=reactExports.forwardRef(({className:e,children:t,transitionClasses:r={},onEnter:i,...s},a)=>{const o={in:!1,timeout:300,mountOnEnter:!1,unmountOnExit:!1,appear:!1,...s},u=reactExports.useCallback((c,d)=>{triggerBrowserReflow(c),i==null||i(c,d)},[i]);return jsxRuntimeExports.jsx(TransitionWrapper$1,{ref:a,addEndListener:transitionEndListener,...o,onEnter:u,childRef:t.ref,children:(c,d)=>reactExports.cloneElement(t,{...d,className:classNames("fade",e,t.props.className,fadeStyles[c],r[c])})})});Fade.displayName="Fade";const Fade$1=Fade,propTypes={"aria-label":PropTypes.string,onClick:PropTypes.func,variant:PropTypes.oneOf(["white"])},CloseButton=reactExports.forwardRef(({className:e,variant:t,"aria-label":r="Close",...i},s)=>jsxRuntimeExports.jsx("button",{ref:s,type:"button",className:classNames("btn-close",t&&`btn-close-${t}`,e),"aria-label":r,...i}));CloseButton.displayName="CloseButton";CloseButton.propTypes=propTypes;const CloseButton$1=CloseButton,context$1=reactExports.createContext(null);context$1.displayName="CardHeaderContext";const CardHeaderContext=context$1;function useUpdatedRef(e){const t=reactExports.useRef(e);return t.current=e,t}function useWillUnmount(e){const t=useUpdatedRef(e);reactExports.useEffect(()=>()=>t.current(),[])}var toArray=Function.prototype.bind.call(Function.prototype.call,[].slice);function qsa(e,t){return toArray(e.querySelectorAll(t))}function useForceUpdate(){const[,e]=reactExports.useReducer(t=>!t,!1);return e}function contains(e,t){if(e.contains)return e.contains(t);if(e.compareDocumentPosition)return e===t||!!(e.compareDocumentPosition(t)&16)}const SelectableContext=reactExports.createContext(null),makeEventKey=(e,t=null)=>e!=null?String(e):t||null,SelectableContext$1=SelectableContext,NavContext=reactExports.createContext(null);NavContext.displayName="NavContext";const NavContext$1=NavContext,ATTRIBUTE_PREFIX="data-rr-ui-",PROPERTY_PREFIX="rrUi";function dataAttr(e){return`${ATTRIBUTE_PREFIX}${e}`}function dataProp(e){return`${PROPERTY_PREFIX}${e}`}const Context=reactExports.createContext(canUseDOM?window:void 0);Context.Provider;function useWindow(){return reactExports.useContext(Context)}const context=reactExports.createContext(null);context.displayName="NavbarContext";const NavbarContext=context,TabContext=reactExports.createContext(null),TabContext$1=TabContext,_excluded$2=["as","active","eventKey"];function _objectWithoutPropertiesLoose$2(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}function useNavItem({key:e,onClick:t,active:r,id:i,role:s,disabled:a}){const o=reactExports.useContext(SelectableContext$1),u=reactExports.useContext(NavContext$1),c=reactExports.useContext(TabContext$1);let d=r;const g={role:s};if(u){!s&&u.role==="tablist"&&(g.role="tab");const x=u.getControllerId(e??null),y=u.getControlledId(e??null);g[dataAttr("event-key")]=e,g.id=x||i,d=r==null&&e!=null?u.activeKey===e:r,(d||!(c!=null&&c.unmountOnExit)&&!(c!=null&&c.mountOnEnter))&&(g["aria-controls"]=y)}return g.role==="tab"&&(g["aria-selected"]=d,d||(g.tabIndex=-1),a&&(g.tabIndex=-1,g["aria-disabled"]=!0)),g.onClick=useEventCallback(x=>{a||(t==null||t(x),e!=null&&o&&!x.isPropagationStopped()&&o(e,x))}),[g,{isActive:d}]}const NavItem$2=reactExports.forwardRef((e,t)=>{let{as:r=Button,active:i,eventKey:s}=e,a=_objectWithoutPropertiesLoose$2(e,_excluded$2);const[o,u]=useNavItem(Object.assign({key:makeEventKey(s,a.href),active:i},a));return o[dataAttr("active")]=u.isActive,jsxRuntimeExports.jsx(r,Object.assign({},a,o,{ref:t}))});NavItem$2.displayName="NavItem";const NavItem$3=NavItem$2,_excluded$1=["as","onSelect","activeKey","role","onKeyDown"];function _objectWithoutPropertiesLoose$1(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}const noop$1=()=>{},EVENT_KEY_ATTR=dataAttr("event-key"),Nav$2=reactExports.forwardRef((e,t)=>{let{as:r="div",onSelect:i,activeKey:s,role:a,onKeyDown:o}=e,u=_objectWithoutPropertiesLoose$1(e,_excluded$1);const c=useForceUpdate(),d=reactExports.useRef(!1),g=reactExports.useContext(SelectableContext$1),x=reactExports.useContext(TabContext$1);let y,P;x&&(a=a||"tablist",s=x.activeKey,y=x.getControlledId,P=x.getControllerId);const E=reactExports.useRef(null),T=b=>{const A=E.current;if(!A)return null;const R=qsa(A,`[${EVENT_KEY_ATTR}]:not([aria-disabled=true])`),I=A.querySelector("[aria-selected=true]");if(!I||I!==document.activeElement)return null;const D=R.indexOf(I);if(D===-1)return null;let O=D+b;return O>=R.length&&(O=0),O<0&&(O=R.length-1),R[O]},M=(b,A)=>{b!=null&&(i==null||i(b,A),g==null||g(b,A))},C=b=>{if(o==null||o(b),!x)return;let A;switch(b.key){case"ArrowLeft":case"ArrowUp":A=T(-1);break;case"ArrowRight":case"ArrowDown":A=T(1);break;default:return}A&&(b.preventDefault(),M(A.dataset[dataProp("EventKey")]||null,b),d.current=!0,c())};reactExports.useEffect(()=>{if(E.current&&d.current){const b=E.current.querySelector(`[${EVENT_KEY_ATTR}][aria-selected=true]`);b==null||b.focus()}d.current=!1});const S=useMergedRefs(t,E);return jsxRuntimeExports.jsx(SelectableContext$1.Provider,{value:M,children:jsxRuntimeExports.jsx(NavContext$1.Provider,{value:{role:a,activeKey:makeEventKey(s),getControlledId:y||noop$1,getControllerId:P||noop$1},children:jsxRuntimeExports.jsx(r,Object.assign({},u,{onKeyDown:C,ref:S,role:a}))})})});Nav$2.displayName="Nav";const BaseNav=Object.assign(Nav$2,{Item:NavItem$3});function activeElement(e){e===void 0&&(e=ownerDocument());try{var t=e.activeElement;return!t||!t.nodeName?null:t}catch{return e.body}}function getBodyScrollbarWidth(e=document){const t=e.defaultView;return Math.abs(t.innerWidth-e.documentElement.clientWidth)}const OPEN_DATA_ATTRIBUTE=dataAttr("modal-open");class ModalManager{constructor({ownerDocument:t,handleContainerOverflow:r=!0,isRTL:i=!1}={}){this.handleContainerOverflow=r,this.isRTL=i,this.modals=[],this.ownerDocument=t}getScrollbarWidth(){return getBodyScrollbarWidth(this.ownerDocument)}getElement(){return(this.ownerDocument||document).body}setModalAttributes(t){}removeModalAttributes(t){}setContainerStyle(t){const r={overflow:"hidden"},i=this.isRTL?"paddingLeft":"paddingRight",s=this.getElement();t.style={overflow:s.style.overflow,[i]:s.style[i]},t.scrollBarWidth&&(r[i]=`${parseInt(style(s,i)||"0",10)+t.scrollBarWidth}px`),s.setAttribute(OPEN_DATA_ATTRIBUTE,""),style(s,r)}reset(){[...this.modals].forEach(t=>this.remove(t))}removeContainerStyle(t){const r=this.getElement();r.removeAttribute(OPEN_DATA_ATTRIBUTE),Object.assign(r.style,t.style)}add(t){let r=this.modals.indexOf(t);return r!==-1||(r=this.modals.length,this.modals.push(t),this.setModalAttributes(t),r!==0)||(this.state={scrollBarWidth:this.getScrollbarWidth(),style:{}},this.handleContainerOverflow&&this.setContainerStyle(this.state)),r}remove(t){const r=this.modals.indexOf(t);r!==-1&&(this.modals.splice(r,1),!this.modals.length&&this.handleContainerOverflow&&this.removeContainerStyle(this.state),this.removeModalAttributes(t))}isTopModal(t){return!!this.modals.length&&this.modals[this.modals.length-1]===t}}const ModalManager$1=ModalManager,resolveContainerRef=(e,t)=>canUseDOM?e==null?(t||ownerDocument()).body:(typeof e=="function"&&(e=e()),e&&"current"in e&&(e=e.current),e&&("nodeType"in e||e.getBoundingClientRect)?e:null):null;function useWaitForDOMRef(e,t){const r=useWindow(),[i,s]=reactExports.useState(()=>resolveContainerRef(e,r==null?void 0:r.document));if(!i){const a=resolveContainerRef(e);a&&s(a)}return reactExports.useEffect(()=>{t&&i&&t(i)},[t,i]),reactExports.useEffect(()=>{const a=resolveContainerRef(e);a!==i&&s(a)},[e,i]),i}function NoopTransition({children:e,in:t,onExited:r,mountOnEnter:i,unmountOnExit:s}){const a=reactExports.useRef(null),o=reactExports.useRef(t),u=useEventCallback(r);reactExports.useEffect(()=>{t?o.current=!0:u(a.current)},[t,u]);const c=useMergedRefs(a,e.ref),d=reactExports.cloneElement(e,{ref:c});return t?d:s||!o.current&&i?null:d}function useTransition({in:e,onTransition:t}){const r=reactExports.useRef(null),i=reactExports.useRef(!0),s=useEventCallback(t);return useIsomorphicEffect(()=>{if(!r.current)return;let a=!1;return s({in:e,element:r.current,initial:i.current,isStale:()=>a}),()=>{a=!0}},[e,s]),useIsomorphicEffect(()=>(i.current=!1,()=>{i.current=!0}),[]),r}function ImperativeTransition({children:e,in:t,onExited:r,onEntered:i,transition:s}){const[a,o]=reactExports.useState(!t);t&&a&&o(!1);const u=useTransition({in:!!t,onTransition:d=>{const g=()=>{d.isStale()||(d.in?i==null||i(d.element,d.initial):(o(!0),r==null||r(d.element)))};Promise.resolve(s(d)).then(g,x=>{throw d.in||o(!0),x})}}),c=useMergedRefs(u,e.ref);return a&&!t?null:reactExports.cloneElement(e,{ref:c})}function renderTransition(e,t,r){return e?jsxRuntimeExports.jsx(e,Object.assign({},r)):t?jsxRuntimeExports.jsx(ImperativeTransition,Object.assign({},r,{transition:t})):jsxRuntimeExports.jsx(NoopTransition,Object.assign({},r))}function isEscKey(e){return e.code==="Escape"||e.keyCode===27}const _excluded=["show","role","className","style","children","backdrop","keyboard","onBackdropClick","onEscapeKeyDown","transition","runTransition","backdropTransition","runBackdropTransition","autoFocus","enforceFocus","restoreFocus","restoreFocusOptions","renderDialog","renderBackdrop","manager","container","onShow","onHide","onExit","onExited","onExiting","onEnter","onEntering","onEntered"];function _objectWithoutPropertiesLoose(e,t){if(e==null)return{};var r={},i=Object.keys(e),s,a;for(a=0;a<i.length;a++)s=i[a],!(t.indexOf(s)>=0)&&(r[s]=e[s]);return r}let manager;function getManager(e){return manager||(manager=new ModalManager$1({ownerDocument:e==null?void 0:e.document})),manager}function useModalManager(e){const t=useWindow(),r=e||getManager(t),i=reactExports.useRef({dialog:null,backdrop:null});return Object.assign(i.current,{add:()=>r.add(i.current),remove:()=>r.remove(i.current),isTopModal:()=>r.isTopModal(i.current),setDialogRef:reactExports.useCallback(s=>{i.current.dialog=s},[]),setBackdropRef:reactExports.useCallback(s=>{i.current.backdrop=s},[])})}const Modal=reactExports.forwardRef((e,t)=>{let{show:r=!1,role:i="dialog",className:s,style:a,children:o,backdrop:u=!0,keyboard:c=!0,onBackdropClick:d,onEscapeKeyDown:g,transition:x,runTransition:y,backdropTransition:P,runBackdropTransition:E,autoFocus:T=!0,enforceFocus:M=!0,restoreFocus:C=!0,restoreFocusOptions:S,renderDialog:b,renderBackdrop:A=ne=>jsxRuntimeExports.jsx("div",Object.assign({},ne)),manager:R,container:I,onShow:D,onHide:O=()=>{},onExit:j,onExited:W,onExiting:U,onEnter:H,onEntering:K,onEntered:$}=e,N=_objectWithoutPropertiesLoose(e,_excluded);const L=useWindow(),B=useWaitForDOMRef(I),_=useModalManager(R),F=useMounted(),z=usePrevious(r),[V,X]=reactExports.useState(!r),Y=reactExports.useRef(null);reactExports.useImperativeHandle(t,()=>_,[_]),canUseDOM&&!z&&r&&(Y.current=activeElement(L==null?void 0:L.document)),r&&V&&X(!1);const Q=useEventCallback(()=>{if(_.add(),ce.current=listen(document,"keydown",he),pe.current=listen(document,"focus",()=>setTimeout(re),!0),D&&D(),T){var ne,Ce;const ye=activeElement((ne=(Ce=_.dialog)==null?void 0:Ce.ownerDocument)!=null?ne:L==null?void 0:L.document);_.dialog&&ye&&!contains(_.dialog,ye)&&(Y.current=ye,_.dialog.focus())}}),te=useEventCallback(()=>{if(_.remove(),ce.current==null||ce.current(),pe.current==null||pe.current(),C){var ne;(ne=Y.current)==null||ne.focus==null||ne.focus(S),Y.current=null}});reactExports.useEffect(()=>{!r||!B||Q()},[r,B,Q]),reactExports.useEffect(()=>{V&&te()},[V,te]),useWillUnmount(()=>{te()});const re=useEventCallback(()=>{if(!M||!F()||!_.isTopModal())return;const ne=activeElement(L==null?void 0:L.document);_.dialog&&ne&&!contains(_.dialog,ne)&&_.dialog.focus()}),le=useEventCallback(ne=>{ne.target===ne.currentTarget&&(d==null||d(ne),u===!0&&O())}),he=useEventCallback(ne=>{c&&isEscKey(ne)&&_.isTopModal()&&(g==null||g(ne),ne.defaultPrevented||O())}),pe=reactExports.useRef(),ce=reactExports.useRef(),ae=(...ne)=>{X(!0),W==null||W(...ne)};if(!B)return null;const ue=Object.assign({role:i,ref:_.setDialogRef,"aria-modal":i==="dialog"?!0:void 0},N,{style:a,className:s,tabIndex:-1});let se=b?b(ue):jsxRuntimeExports.jsx("div",Object.assign({},ue,{children:reactExports.cloneElement(o,{role:"document"})}));se=renderTransition(x,y,{unmountOnExit:!0,mountOnEnter:!0,appear:!0,in:!!r,onExit:j,onExiting:U,onExited:ae,onEnter:H,onEntering:K,onEntered:$,children:se});let Z=null;return u&&(Z=A({ref:_.setBackdropRef,onClick:le}),Z=renderTransition(P,E,{in:!!r,appear:!0,mountOnEnter:!0,unmountOnExit:!0,children:Z})),jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment,{children:ReactDOM.createPortal(jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[Z,se]}),B)})});Modal.displayName="Modal";const BaseModal=Object.assign(Modal,{Manager:ModalManager$1});function hasClass(e,t){return e.classList?!!t&&e.classList.contains(t):(" "+(e.className.baseVal||e.className)+" ").indexOf(" "+t+" ")!==-1}function addClass(e,t){e.classList?e.classList.add(t):hasClass(e,t)||(typeof e.className=="string"?e.className=e.className+" "+t:e.setAttribute("class",(e.className&&e.className.baseVal||"")+" "+t))}function replaceClassName(e,t){return e.replace(new RegExp("(^|\\s)"+t+"(?:\\s|$)","g"),"$1").replace(/\s+/g," ").replace(/^\s*|\s*$/g,"")}function removeClass(e,t){e.classList?e.classList.remove(t):typeof e.className=="string"?e.className=replaceClassName(e.className,t):e.setAttribute("class",replaceClassName(e.className&&e.className.baseVal||"",t))}const Selector={FIXED_CONTENT:".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",STICKY_CONTENT:".sticky-top",NAVBAR_TOGGLER:".navbar-toggler"};class BootstrapModalManager extends ModalManager$1{adjustAndStore(t,r,i){const s=r.style[t];r.dataset[t]=s,style(r,{[t]:`${parseFloat(style(r,t))+i}px`})}restore(t,r){const i=r.dataset[t];i!==void 0&&(delete r.dataset[t],style(r,{[t]:i}))}setContainerStyle(t){super.setContainerStyle(t);const r=this.getElement();if(addClass(r,"modal-open"),!t.scrollBarWidth)return;const i=this.isRTL?"paddingLeft":"paddingRight",s=this.isRTL?"marginLeft":"marginRight";qsa(r,Selector.FIXED_CONTENT).forEach(a=>this.adjustAndStore(i,a,t.scrollBarWidth)),qsa(r,Selector.STICKY_CONTENT).forEach(a=>this.adjustAndStore(s,a,-t.scrollBarWidth)),qsa(r,Selector.NAVBAR_TOGGLER).forEach(a=>this.adjustAndStore(s,a,t.scrollBarWidth))}removeContainerStyle(t){super.removeContainerStyle(t);const r=this.getElement();removeClass(r,"modal-open");const i=this.isRTL?"paddingLeft":"paddingRight",s=this.isRTL?"marginLeft":"marginRight";qsa(r,Selector.FIXED_CONTENT).forEach(a=>this.restore(i,a)),qsa(r,Selector.STICKY_CONTENT).forEach(a=>this.restore(s,a)),qsa(r,Selector.NAVBAR_TOGGLER).forEach(a=>this.restore(s,a))}}let sharedManager;function getSharedManager(e){return sharedManager||(sharedManager=new BootstrapModalManager(e)),sharedManager}const BootstrapModalManager$1=BootstrapModalManager,ModalContext=reactExports.createContext({onHide(){}}),ModalContext$1=ModalContext,AbstractModalHeader=reactExports.forwardRef(({closeLabel:e="Close",closeVariant:t,closeButton:r=!1,onHide:i,children:s,...a},o)=>{const u=reactExports.useContext(ModalContext$1),c=useEventCallback(()=>{u==null||u.onHide(),i==null||i()});return jsxRuntimeExports.jsxs("div",{ref:o,...a,children:[s,r&&jsxRuntimeExports.jsx(CloseButton$1,{"aria-label":e,variant:t,onClick:c})]})}),AbstractModalHeader$1=AbstractModalHeader;var all={exports:{}},createChainableTypeChecker={exports:{}};(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=r;function r(i){function s(o,u,c,d,g,x){var y=d||"<<anonymous>>",P=x||c;if(u[c]==null)return o?new Error("Required "+g+" `"+P+"` was not specified "+("in `"+y+"`.")):null;for(var E=arguments.length,T=Array(E>6?E-6:0),M=6;M<E;M++)T[M-6]=arguments[M];return i.apply(void 0,[u,c,y,g,P].concat(T))}var a=s.bind(null,!1);return a.isRequired=s.bind(null,!0),a}e.exports=t.default})(createChainableTypeChecker,createChainableTypeChecker.exports);var createChainableTypeCheckerExports=createChainableTypeChecker.exports;(function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var r=createChainableTypeCheckerExports,i=s(r);function s(o){return o&&o.__esModule?o:{default:o}}function a(){for(var o=arguments.length,u=Array(o),c=0;c<o;c++)u[c]=arguments[c];function d(){for(var g=arguments.length,x=Array(g),y=0;y<g;y++)x[y]=arguments[y];var P=null;return u.forEach(function(E){if(P==null){var T=E.apply(void 0,x);T!=null&&(P=T)}}),P}return(0,i.default)(d)}e.exports=t.default})(all,all.exports);const NavItem=reactExports.forwardRef(({className:e,bsPrefix:t,as:r="div",...i},s)=>(t=useBootstrapPrefix(t,"nav-item"),jsxRuntimeExports.jsx(r,{ref:s,className:classNames(e,t),...i})));NavItem.displayName="NavItem";const NavItem$1=NavItem,NavLink=reactExports.forwardRef(({bsPrefix:e,className:t,as:r=Anchor$1,active:i,eventKey:s,disabled:a=!1,...o},u)=>{e=useBootstrapPrefix(e,"nav-link");const[c,d]=useNavItem({key:makeEventKey(s,o.href),active:i,disabled:a,...o});return jsxRuntimeExports.jsx(r,{...o,...c,ref:u,disabled:a,className:classNames(t,e,a&&"disabled",d.isActive&&"active")})});NavLink.displayName="NavLink";const NavLink$1=NavLink,Nav=reactExports.forwardRef((e,t)=>{const{as:r="div",bsPrefix:i,variant:s,fill:a=!1,justify:o=!1,navbar:u,navbarScroll:c,className:d,activeKey:g,...x}=useUncontrolled(e,{activeKey:"onSelect"}),y=useBootstrapPrefix(i,"nav");let P,E,T=!1;const M=reactExports.useContext(NavbarContext),C=reactExports.useContext(CardHeaderContext);return M?(P=M.bsPrefix,T=u??!0):C&&({cardHeaderBsPrefix:E}=C),jsxRuntimeExports.jsx(BaseNav,{as:r,ref:t,activeKey:g,className:classNames(d,{[y]:!T,[`${P}-nav`]:T,[`${P}-nav-scroll`]:T&&c,[`${E}-${s}`]:!!E,[`${y}-${s}`]:!!s,[`${y}-fill`]:a,[`${y}-justified`]:o}),...x})});Nav.displayName="Nav";const Nav$1=Object.assign(Nav,{Item:NavItem$1,Link:NavLink$1}),NavbarBrand=reactExports.forwardRef(({bsPrefix:e,className:t,as:r,...i},s)=>{e=useBootstrapPrefix(e,"navbar-brand");const a=r||(i.href?"a":"span");return jsxRuntimeExports.jsx(a,{...i,ref:s,className:classNames(t,e)})});NavbarBrand.displayName="NavbarBrand";const NavbarBrand$1=NavbarBrand,NavbarCollapse=reactExports.forwardRef(({children:e,bsPrefix:t,...r},i)=>{t=useBootstrapPrefix(t,"navbar-collapse");const s=reactExports.useContext(NavbarContext);return jsxRuntimeExports.jsx(Collapse$1,{in:!!(s&&s.expanded),...r,children:jsxRuntimeExports.jsx("div",{ref:i,className:t,children:e})})});NavbarCollapse.displayName="NavbarCollapse";const NavbarCollapse$1=NavbarCollapse,NavbarToggle=reactExports.forwardRef(({bsPrefix:e,className:t,children:r,label:i="Toggle navigation",as:s="button",onClick:a,...o},u)=>{e=useBootstrapPrefix(e,"navbar-toggler");const{onToggle:c,expanded:d}=reactExports.useContext(NavbarContext)||{},g=useEventCallback(x=>{a&&a(x),c&&c()});return s==="button"&&(o.type="button"),jsxRuntimeExports.jsx(s,{...o,ref:u,onClick:g,"aria-label":i,className:classNames(t,e,!d&&"collapsed"),children:r||jsxRuntimeExports.jsx("span",{className:`${e}-icon`})})});NavbarToggle.displayName="NavbarToggle";const NavbarToggle$1=NavbarToggle,matchersByWindow=new WeakMap,getMatcher=(e,t)=>{if(!e||!t)return;const r=matchersByWindow.get(t)||new Map;matchersByWindow.set(t,r);let i=r.get(e);return i||(i=t.matchMedia(e),i.refCount=0,r.set(i.media,i)),i};function useMediaQuery(e,t=typeof window>"u"?void 0:window){const r=getMatcher(e,t),[i,s]=reactExports.useState(()=>r?r.matches:!1);return useIsomorphicEffect(()=>{let a=getMatcher(e,t);if(!a)return s(!1);let o=matchersByWindow.get(t);const u=()=>{s(a.matches)};return a.refCount++,a.addListener(u),u(),()=>{a.removeListener(u),a.refCount--,a.refCount<=0&&(o==null||o.delete(a.media)),a=void 0}},[e]),i}function createBreakpointHook(e){const t=Object.keys(e);function r(u,c){return u===c?c:u?`${u} and ${c}`:c}function i(u){return t[Math.min(t.indexOf(u)+1,t.length-1)]}function s(u){const c=i(u);let d=e[c];return typeof d=="number"?d=`${d-.2}px`:d=`calc(${d} - 0.2px)`,`(max-width: ${d})`}function a(u){let c=e[u];return typeof c=="number"&&(c=`${c}px`),`(min-width: ${c})`}function o(u,c,d){let g;typeof u=="object"?(g=u,d=c,c=!0):(c=c||!0,g={[u]:c});let x=reactExports.useMemo(()=>Object.entries(g).reduce((y,[P,E])=>((E==="up"||E===!0)&&(y=r(y,a(P))),(E==="down"||E===!0)&&(y=r(y,s(P))),y),""),[JSON.stringify(g)]);return useMediaQuery(x,d)}return o}const useBreakpoint=createBreakpointHook({xs:0,sm:576,md:768,lg:992,xl:1200,xxl:1400}),OffcanvasBody=reactExports.forwardRef(({className:e,bsPrefix:t,as:r="div",...i},s)=>(t=useBootstrapPrefix(t,"offcanvas-body"),jsxRuntimeExports.jsx(r,{ref:s,className:classNames(e,t),...i})));OffcanvasBody.displayName="OffcanvasBody";const OffcanvasBody$1=OffcanvasBody,transitionStyles={[ENTERING]:"show",[ENTERED]:"show"},OffcanvasToggling=reactExports.forwardRef(({bsPrefix:e,className:t,children:r,in:i=!1,mountOnEnter:s=!1,unmountOnExit:a=!1,appear:o=!1,...u},c)=>(e=useBootstrapPrefix(e,"offcanvas"),jsxRuntimeExports.jsx(TransitionWrapper$1,{ref:c,addEndListener:transitionEndListener,in:i,mountOnEnter:s,unmountOnExit:a,appear:o,...u,childRef:r.ref,children:(d,g)=>reactExports.cloneElement(r,{...g,className:classNames(t,r.props.className,(d===ENTERING||d===EXITING)&&`${e}-toggling`,transitionStyles[d])})})));OffcanvasToggling.displayName="OffcanvasToggling";const OffcanvasToggling$1=OffcanvasToggling,OffcanvasHeader=reactExports.forwardRef(({bsPrefix:e,className:t,closeLabel:r="Close",closeButton:i=!1,...s},a)=>(e=useBootstrapPrefix(e,"offcanvas-header"),jsxRuntimeExports.jsx(AbstractModalHeader$1,{ref:a,...s,className:classNames(t,e),closeLabel:r,closeButton:i})));OffcanvasHeader.displayName="OffcanvasHeader";const OffcanvasHeader$1=OffcanvasHeader,DivStyledAsH5=divWithClassName("h5"),OffcanvasTitle=reactExports.forwardRef(({className:e,bsPrefix:t,as:r=DivStyledAsH5,...i},s)=>(t=useBootstrapPrefix(t,"offcanvas-title"),jsxRuntimeExports.jsx(r,{ref:s,className:classNames(e,t),...i})));OffcanvasTitle.displayName="OffcanvasTitle";const OffcanvasTitle$1=OffcanvasTitle;function DialogTransition(e){return jsxRuntimeExports.jsx(OffcanvasToggling$1,{...e})}function BackdropTransition(e){return jsxRuntimeExports.jsx(Fade$1,{...e})}const Offcanvas=reactExports.forwardRef(({bsPrefix:e,className:t,children:r,"aria-labelledby":i,placement:s="start",responsive:a,show:o=!1,backdrop:u=!0,keyboard:c=!0,scroll:d=!1,onEscapeKeyDown:g,onShow:x,onHide:y,container:P,autoFocus:E=!0,enforceFocus:T=!0,restoreFocus:M=!0,restoreFocusOptions:C,onEntered:S,onExit:b,onExiting:A,onEnter:R,onEntering:I,onExited:D,backdropClassName:O,manager:j,renderStaticNode:W=!1,...U},H)=>{const K=reactExports.useRef();e=useBootstrapPrefix(e,"offcanvas");const{onToggle:$}=reactExports.useContext(NavbarContext)||{},[N,L]=reactExports.useState(!1),B=useBreakpoint(a||"xs","up");reactExports.useEffect(()=>{L(a?o&&!B:o)},[o,a,B]);const _=useEventCallback(()=>{$==null||$(),y==null||y()}),F=reactExports.useMemo(()=>({onHide:_}),[_]);function z(){return j||(d?(K.current||(K.current=new BootstrapModalManager$1({handleContainerOverflow:!1})),K.current):getSharedManager())}const V=(te,...re)=>{te&&(te.style.visibility="visible"),R==null||R(te,...re)},X=(te,...re)=>{te&&(te.style.visibility=""),D==null||D(...re)},Y=reactExports.useCallback(te=>jsxRuntimeExports.jsx("div",{...te,className:classNames(`${e}-backdrop`,O)}),[O,e]),Q=te=>jsxRuntimeExports.jsx("div",{...te,...U,className:classNames(t,a?`${e}-${a}`:e,`${e}-${s}`),"aria-labelledby":i,children:r});return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[!N&&(a||W)&&Q({}),jsxRuntimeExports.jsx(ModalContext$1.Provider,{value:F,children:jsxRuntimeExports.jsx(BaseModal,{show:N,ref:H,backdrop:u,container:P,keyboard:c,autoFocus:E,enforceFocus:T&&!d,restoreFocus:M,restoreFocusOptions:C,onEscapeKeyDown:g,onShow:x,onHide:_,onEnter:V,onEntering:I,onEntered:S,onExit:b,onExiting:A,onExited:X,manager:z(),transition:DialogTransition,backdropTransition:BackdropTransition,renderBackdrop:Y,renderDialog:Q})})]})});Offcanvas.displayName="Offcanvas";const Offcanvas$1=Object.assign(Offcanvas,{Body:OffcanvasBody$1,Header:OffcanvasHeader$1,Title:OffcanvasTitle$1}),NavbarOffcanvas=reactExports.forwardRef((e,t)=>{const r=reactExports.useContext(NavbarContext);return jsxRuntimeExports.jsx(Offcanvas$1,{ref:t,show:!!(r!=null&&r.expanded),...e,renderStaticNode:!0})});NavbarOffcanvas.displayName="NavbarOffcanvas";const NavbarOffcanvas$1=NavbarOffcanvas,NavbarText=reactExports.forwardRef(({className:e,bsPrefix:t,as:r="span",...i},s)=>(t=useBootstrapPrefix(t,"navbar-text"),jsxRuntimeExports.jsx(r,{ref:s,className:classNames(e,t),...i})));NavbarText.displayName="NavbarText";const NavbarText$1=NavbarText,Navbar=reactExports.forwardRef((e,t)=>{const{bsPrefix:r,expand:i=!0,variant:s="light",bg:a,fixed:o,sticky:u,className:c,as:d="nav",expanded:g,onToggle:x,onSelect:y,collapseOnSelect:P=!1,...E}=useUncontrolled(e,{expanded:"onToggle"}),T=useBootstrapPrefix(r,"navbar"),M=reactExports.useCallback((...b)=>{y==null||y(...b),P&&g&&(x==null||x(!1))},[y,P,g,x]);E.role===void 0&&d!=="nav"&&(E.role="navigation");let C=`${T}-expand`;typeof i=="string"&&(C=`${C}-${i}`);const S=reactExports.useMemo(()=>({onToggle:()=>x==null?void 0:x(!g),bsPrefix:T,expanded:!!g,expand:i}),[T,g,i,x]);return jsxRuntimeExports.jsx(NavbarContext.Provider,{value:S,children:jsxRuntimeExports.jsx(SelectableContext$1.Provider,{value:M,children:jsxRuntimeExports.jsx(d,{ref:t,...E,className:classNames(c,T,i&&C,s&&`${T}-${s}`,a&&`bg-${a}`,u&&`sticky-${u}`,o&&`fixed-${o}`)})})})});Navbar.displayName="Navbar";const Navbar$1=Object.assign(Navbar,{Brand:NavbarBrand$1,Collapse:NavbarCollapse$1,Offcanvas:NavbarOffcanvas$1,Text:NavbarText$1,Toggle:NavbarToggle$1}),navbar="",SvgComponent=({title:e,titleId:t,...r})=>jsxRuntimeExports.jsxs("svg",{...r,xmlns:"http://www.w3.org/2000/svg",xmlSpace:"preserve",id:"Capa_1",x:0,y:0,style:{},viewBox:"0 0 550 103.97",width:"15em",height:"2.5em","aria-labelledby":t,children:[e?jsxRuntimeExports.jsx("title",{id:t,children:e}):null,jsxRuntimeExports.jsx("style",{children:".st0{fill:#13396f}.st1{fill:#9c9c9c}.st2{fill:#fefefe}"}),jsxRuntimeExports.jsx("path",{d:"m191.6 19.5-.4.4c-1.2 2.1-2.3 4.2-3.5 6.3l-5.4 9.6c-.8 1.5-1.6 3-2.5 4.5-1.8 3-3.4 6.1-5.1 9.1-.9 1.5-1.6 3.1-2.5 4.6-1.8 3-3.5 6-5.1 9.1-.2.4-.6.8-.8 1.2-.9 1.8-1 1.8-3.1 1.6-.2 0-.4 0-.5-.2-.1-1.2-1.3-1.9-1.7-3-.9-2.6-2.4-4.9-3.6-7.4-.7-1.5-1.4-3-2.1-4.4-1.6-3.2-3.2-6.4-5-9.5-.8-1.4-1.4-2.8-2.1-4.1-1.8-3.3-3.4-6.6-5.1-10-.8-1.5-1.3-3.1-2.3-4.5-.9-1.3-1.2-2.8-2.1-4.1-.3.4-.2.7-.2 1-.2 13.5-.4 27-.7 40.6 0 .8.2 1.1 1.1 1.2 2.4.2 4.7.4 7 .6.6 0 .8.3.7.8 0 .7-.1 1.4 0 2.1 0 .6-.2.7-.9.7l-22.4-.3c-.7 0-1-.1-.9-.8.1-.8-.3-2 .2-2.5.5-.6 1.8-.2 2.7-.3 1.6-.1 3.3-.3 4.9-.3.9 0 1.1-.3 1.1-1.1l.6-38.4c0-2.7.1-5.4.1-8.1 0-.5 0-.8-.8-.8-2.5-.1-5-.9-7.5-.9h-.1c-1-.7-.2-1.6-.4-2.3-.1-.4.1-.7.6-.6h.8c7.8.1 15.6.3 23.4.3 1.4 0 2.1.5 2.6 1.5 1 2.4 2.4 4.6 3.5 6.9 1.7 3.5 3.6 6.9 5.4 10.4.8 1.4 1.4 2.9 2.2 4.3 1.7 3.1 3.3 6.3 4.9 9.4.7 1.2 1.2 2.5 2 3.8.7-.9 1.3-1.8 1.9-2.7l3.6-6.3c.9-1.6 1.7-3.3 2.6-5 1.7-2.9 3.5-5.8 5.1-8.7l2.1-3.9c1.6-2.8 3.2-5.7 4.8-8.5.2-.4.5-.6 1.1-.6 8.6.1 17.1.3 25.7.4.6 0 .8.2.8.7-.1.7.2 1.6-.2 2.1-.4.6-1.4.2-2.1.3-1.9.2-3.7.6-5.6.6-.5 0-.7.2-.7.6v.5c-.2 15.4-.5 30.7-.7 46 0 .9.3 1.1 1.2 1.2 2.2.2 4.5.4 6.7.6.6 0 .7.3.7.7 0 .3 0 .5-.1.8-.1 1.4-.8 2.1-2.4 2.1-10.1-.2-20.1-.3-30.2-.4-.9 0-1.2-.2-1.1-1 .1-.8-.2-1.9.2-2.4s1.6-.2 2.5-.2c1.9-.1 3.7-.3 5.6-.4.5 0 .7-.2.7-.6v-.3l.6-41.2c.1-.3.1-.5.2-.8zM391.5 24.5v1.1c-.2 12.9-.4 25.8-.7 38.7 0 .9.2 1.1 1.2 1.2 2.4.2 4.7.4 7 .6.5 0 .7.2.7.7 0 .8-.1 1.5 0 2.3 0 .5-.2.6-.8.6l-22.6-.3c-.6 0-.9-.2-.8-.8.1-.6.1-1.3 0-1.9 0-.7.3-.9 1-.9 2.3-.1 4.5-.3 6.8-.4.7 0 1.1-.2 1.1-1 .2-15.4.5-30.9.7-46.3 0-.8-.3-1-1.1-1-2.4-.1-4.8-.8-7.2-.9-.2 0-.5-.1-.5-.3 0-.8 0-1.6.1-2.4 0-.3.5-.3.8-.3 5 .1 10 .1 15.1.2 2.2 0 4.4.1 6.6.1.6 0 1 .2 1.4.6 2.5 3 5.1 6 7.7 8.9 1.5 1.7 3.1 3.4 4.6 5.1 2.4 2.7 4.9 5.4 7.3 8.2 2.4 2.7 4.8 5.3 7.2 8 1.4 1.7 3 3.2 4.5 4.9.2-.2.1-.4.1-.6.2-9.9.3-19.8.5-29.7 0-.8-.2-1.1-1.1-1.1-2.5-.1-4.8-.8-7.3-.9-.6 0-.5-.4-.4-.7.2-.8-.4-1.6.4-2.3.1-.1.5 0 .7 0l22.4.3c.8 0 1.1.2 1 .9-.1 1.9 0 1.9-2.2 2.1-2 .2-4 .6-6.1.6-.7 0-.7.4-.7.8-.1 3.5-.1 7.1-.2 10.6l-.6 39.9c0 .8-.1 1.1-1.1 1-1.4-.1-2.7-.1-4.1-.1-.7 0-1.1-.2-1.5-.7-2.1-2.4-4.2-4.9-6.4-7.3-1.6-1.7-3.1-3.5-4.7-5.2-2.4-2.7-4.9-5.5-7.3-8.2-2.4-2.7-4.9-5.4-7.2-8.1-2.4-2.8-5-5.4-7.3-8.2-1.5-1.7-3-3.4-4.6-5-.6-.8-1.4-1.7-2.4-2.8zM355.6 43.4c4.9.1 9.8.2 14.7.2.8 0 1.2.2 1.1 1-.1.4 0 .8 0 1.2 0 .7-.3 1.1-1.1 1.2-1.4.2-2.7.4-4.1.5-1.4.1-1.5.3-1.5 1.5-.1 5.2-.2 10.5-.2 15.7 0 .9-.1 1.3-1.3 1.6-4.6 1-9.2 1.7-13.9 2.3-4.9.6-9.9 1-14.9.9-3.2-.1-6.5-.3-9.6-1.1-3.7-.8-7.4-1.8-10.8-3.4-.6-.3-1.1-.7-1.6-1-1.7-1.1-3.6-2-5.2-3.4-.1-.1-.3-.2-.4-.3-1.3-1.7-2.9-3.2-4.1-5-1.2-1.8-1.7-3.7-2.5-5.6-2.4-6.1-1.6-12.3-.2-18.4.5-2.1 1.7-4.1 3-6 1.1-1.5 2.2-3 3.4-4.5.8-1 1.8-1.8 3-2.3.5-.2.8-.6 1.2-.9 2.1-1.6 4.6-2.5 7.1-3.4 2.8-1.1 5.7-1.6 8.7-2.1 2-.3 3.9-.1 5.9-.3 6.2-.5 12.3 0 18.3 1 3.9.7 7.8 1.7 11.7 2.5.5.1.6.3.6.7-.1 3.9-.1 7.9-.2 11.8 0 .5-.1.7-.7.6-1-.1-2-.1-3.1-.1-.7 0-.9-.2-1-.8-.1-1.8-.5-3.6-.6-5.4-.1-1.4-1.4-1.9-2.5-2.4-6.2-2.8-12.8-3.8-19.7-3.6-3.2.1-6.2 1-9 2.2-2.4 1.1-4.1 2.8-5.7 4.7-1.1 1.3-1.7 2.7-2.3 4.2-3 7.6-3.2 15.5-1.3 23.3 1 4.1 3.3 8 7.3 10.7 3.4 2.2 7.2 3.4 11.4 3.6 4 .2 7.9-.1 11.7-.9.9-.2 1.2-.6 1.2-1.4 0-4.9.1-9.7.2-14.6 0-.5-.2-.7-.7-.7-2.4-.1-4.8-.8-7.2-.9-.5 0-.6-.2-.6-.6-.1-2.7-.1-2.7 2.9-2.6 4 .2 8.3.3 12.6.3zM506.9 71.3c-4.7-.1-9.4-.2-14.1-.2-.7 0-.9-.1-.9-.8.1-.9-.3-1.9.2-2.5.5-.7 1.7-.2 2.6-.3 1.4-.2 2.8-.3 4.2-.4.6 0 .7-.2.5-.6-1.3-2.4-1.9-5.1-3.2-7.6-.7-1.4-1.1-3-1.7-4.4-.5-1.4-1.6-2.1-3.1-2.1-7.6-.1-15.2-.2-22.8-.4-.7 0-1 .2-1.3.8-1.1 2-1.7 4.3-2.8 6.3-.9 1.6-1.4 3.3-2.2 5-.3.6-.6 1.2-1 1.8-.2.4-.1.6.5.6 2.4.2 4.8.5 7.2.7.6.1.9.2.8.8-.1.9.4 2.1-.3 2.7-.5.4-1.8.1-2.7.1-5.6-.1-11.2-.2-16.9-.2-.7 0-1-.1-.9-.8.1-.7.1-1.5 0-2.2 0-.4.1-.5.6-.6 3.9-.3 3.9-.4 5.4-3.6 1.3-2.9 2.6-5.7 4.1-8.5.9-1.7 1.6-3.6 2.6-5.3.9-1.6 1.5-3.3 2.4-4.8 1-1.7 1.6-3.5 2.5-5.2 1.1-1.8 1.7-3.8 2.7-5.5.9-1.5 1.4-3.2 2.3-4.8 1-1.7 1.6-3.6 2.6-5.3 1-1.8 1.6-3.7 2.7-5.4.7-1.2 1.3-2.4 1.8-3.7.2-.5.5-.6 1-.6 4.2.1 8.5.1 12.8.2.8 0 1.2.3 1.6 1 1.9 3.6 3.2 7.4 4.9 11.1.8 1.7 1.3 3.4 2.1 5 1 1.9 1.5 3.9 2.5 5.8.9 1.7 1.4 3.6 2.3 5.3 1 1.8 1.5 3.8 2.4 5.5 1 1.8 1.5 3.8 2.4 5.7 1.7 3.6 3.3 7.2 4.8 10.9.2.6.6 1.3.9 1.9.3.6.9.8 1.5.8 1 .2 2.1.3 3.1.4.5.1.8.2.8.8-.1.9.4 2.2-.3 2.8-.5.4-1.9.1-2.8.1-3.9-.2-7.9-.2-11.8-.3zm-25.8-48.2-4.5 9.3c-.8 1.7-1.6 3.4-2.4 5.2-1.4 3-2.9 6-4.2 9-.2.6-.2.8.5.8h3.6c5.3.1 10.5.2 15.8.2 1.4 0 1.5.3 1-1.3-.6-1.8-1.3-3.5-2.1-5.2-.9-1.8-1.5-3.8-2.4-5.6-1.2-2.5-2.2-5.2-3.2-7.8-.5-1.7-1.4-3.1-2.1-4.6zM270.4 63.3c-.5-.5-.7-.9-.8-1.4-1.1-3.3-2.7-6.5-3.9-9.9-.3-1-.9-1.9-1.2-2.9-.2-.6-.6-.5-1.1-.5-4.1-.1-8.2-.1-12.3-.2s-8-.1-12-.2c-.7 0-1 .2-1.2.7-1.3 3.2-2.6 6.4-4.1 9.6-.5 1.2-1 2.3-1.6 3.5-.3.6-.1.8.6.9l6.9.6c.6 0 .8.2.8.7-.1.9.3 2.1-.2 2.7-.5.6-1.8.1-2.8.1-5.5-.1-11-.2-16.6-.2-.8 0-1-.2-1-.9.1-.8-.2-1.8.2-2.4.4-.6 1.6-.2 2.4-.3 1.8-.2 2.7-1.1 3.4-2.6 1.6-3.6 3.2-7.2 5.1-10.7.8-1.5 1.4-3.1 2.2-4.6 1.9-3.7 3.6-7.5 5.4-11.2.8-1.5 1.4-3.1 2.2-4.6 1.9-3.7 3.6-7.5 5.4-11.2.6-1.3 1.3-2.6 1.9-4 .5-1.1 1.3-2.1 1.7-3.3.1-.4.4-.5.8-.5 4.5.1 9.1.1 13.6.2.4 0 .6.1.8.5 1 2.5 2.1 5 3.2 7.5 1.6 3.7 3.2 7.5 4.9 11.2.6 1.3 1.1 2.6 1.7 3.9 1 2.3 1.9 4.7 3 7 .8 1.9 1.4 3.8 2.4 5.7 1 1.8 1.5 3.7 2.4 5.6 1.7 3.5 3.3 7 4.6 10.6.2.6.7.9 1.4 1l3.6.6c.6.1.8.3.7.8v.1c0 .9.3 2.1-.2 2.6-.5.6-1.9.1-2.8.1-8.6-.1-17.2-.3-25.8-.4-1.1 0-1.4-.3-1.3-1.2.1-2.3.1-2.2 2.6-2.4 1.3-.2 3-.4 5-.6zm-30-19.7 21.7.3c-.6-1.5-1.1-2.9-1.8-4.3-.9-1.9-1.5-3.9-2.4-5.8-1-2.3-1.9-4.6-2.8-7-.9-2.3-2-4.5-2.9-6.8-.1-.2-.1-.5-.3-.5-1.6 2.1-2.2 4.5-3.5 6.7-1.1 1.8-1.7 3.7-2.6 5.6-1.4 2.8-2.6 5.6-3.8 8.4-.5 1.2-1.3 2.2-1.6 3.4z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M76.7 77.8c1.1 3.1 2.7 6.1 4.1 9.1.1.3.2.5.3.8.7 1.6 1.2 3.2 2.1 4.7.2.3.4.7.4 1.2-1.4-.7-2.4-1.8-3.6-2.8-2.7-2.3-5.4-4.6-8.2-6.9-.5-.4-.6-.4-1 .1-1.1 1.5-2.3 2.9-3.7 4.1-1.1 1-2.5 1.5-3.8 2.1-4.6 2.2-9.6 3.1-14.6 3.8-1.6.2-3.3-.2-4.9-.2-5 0-9.8-.7-14.4-2.4-2.5-.9-4.8-2.1-7-3.5-1.7-1.1-3.2-2.3-4.7-3.7-.7-.6-1.1-.1-1.5.2-.9.7-1.7 1.4-2.6 2.1-2.2 1.7-4.3 3.5-6.5 5.3-.4.3-.9.6-1.5.8 2.6-5.3 5.1-10.5 7.7-15.8h1.1l44 .6c2.4 0 4.8-.1 7.2.1.2.1.4.2.5.3 2.9 2.5 5.7 5 8.7 7.4 1.2 1 2.2 2.2 3.7 3-1.6-3.6-3.1-7.1-4.6-10.6 1.1.2 1.9.2 2.8.2zM22.6 58.7c.4-1.6 1.2-3 1.9-4.5.1-.2.3-.4.4-.6 1.4-3 2.7-6 4.2-8.9 1.8-3.6 3.5-7.2 5.3-10.8.7-1.4 1.3-2.8 2-4.2 1.9-3.8 3.7-7.5 5.5-11.3.9-1.8 1.7-3.6 2.5-5.4.5-1 1.2-1.5 1.9-1.1.6.3.8 1 1.1 1.5.3.5.4 1.1.7 1.6 1.1 2.7 2.4 5.4 3.6 8.1 1.5 3.4 3.1 6.8 4.6 10.2 1.6 3.5 3.1 7 4.8 10.5.8 1.8 1.5 3.6 2.3 5.3 1.7 3.5 3.3 7 4.8 10.5.1.3.6.5.5.9-1.4-.6-2.7-1.5-3.9-2.5.4-.3.1-.6 0-.9-.3-.9-.9-1.8-1.3-2.7-1.5-3.5-3-7.1-4.7-10.6-.9-1.8-1.6-3.7-2.4-5.6-1.6-3.5-3.2-7-4.7-10.5-1.2-2.8-2.6-5.6-3.7-8.4-.2-.5-.2-1-.7-1.4-.1 1.8-.3 3.5-.4 5.1-.4 8.5-.5 17.1-.8 25.7 0 .3-.1.7.2.9-.5.3-1 .7-1.5 1-.9.4-1.6 1.2-2.6 1.2-1.4 0-2.8-.2-4.2-.8-1.3-.5-2.7-.7-4.1-.3-1.1.4-2.1 1.1-3 1.9-2 1.6-4 3.3-6.1 4.7-.6.5-1.3 1.2-2.2 1.4z",className:"st1"}),jsxRuntimeExports.jsx("path",{d:"M22.6 58.7c1-.2 1.6-.9 2.3-1.4 2.1-1.5 4.1-3.1 6.1-4.7.9-.7 1.9-1.5 3-1.9 1.3-.5 2.8-.3 4.1.3 1.3.6 2.7.8 4.2.8 1 0 1.7-.8 2.6-1.2.6-.2 1-.6 1.5-1 .8-.3 1.4-.9 2.1-1.3.7-.4 1.5-.9 2.3-1 1.5-.2 2.9.3 4.1 1.1 1.8 1.3 3.1 3 4.7 4.4 1.8 1.7 3.4 3.4 5.3 5 1.2 1 2.4 1.9 3.9 2.5 1.4 1.2 3.2 1.6 4.9 1.8 5.6.4 11.3.4 16.9.5 1.5 0 .9.8 1 1.4.2.8-.3.9-1.1.9-5.3-.1-10.6-.2-15.9-.2-1.5 0-2.9-.5-4.3-.8-1-.4-2-.9-3-1.2-.4-.5-1.1-.7-1.7-1.1-2.7-1.7-5-3.8-7.1-6-1.8-1.8-3.6-3.5-5.5-5.2-.9-.9-1.9-1-3.1-.4-1.5.7-2.7 1.9-4 2.8-.6.4-1.2.9-1.8 1.1-2.2.7-4.5.7-6.6-.4-1.4-.7-2.5-.7-3.8.3l-3.9 3c-.9.8-1.8 1.6-2.8 2.3-2 1.5-4.1 2.8-6.5 3.7-.1 0-.3-.1-.2.2-6.2.6-12.3 0-18.4.1-.9 0-1-.2-1-1 .1-1.5.1-1.5 1.8-1.5 4.7.1 9.5.1 14.2.2 1.5 0 3-.2 4.2-1.1.5-.3 1.1-.3 1.4-.8.1.1.2 0 .1-.2z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M70.8 65.2c1.4.5 2.8.6 4.3.7 5.2.1 10.3.2 15.5.2.8 0 1.2.2 1.1 1-.1 1.5 0 1.5-1.7 1.5-5.1-.1-10.2-.2-15.3-.2-.8 0-1.7-.3-2.5-.2-.9-.3-1.8-.2-2.7-.4-3.3-.8-6.4-2.2-9.4-3.8-2.7-1.4-5.3-2.8-8.1-4-2-.8-4-1.6-6.3-1.4-.7 0-1.3-.3-2.1-.1-1.1.3-2 .8-2.9 1.4-.5.3-.9.6-1.5.7-1.5.3-2.8.2-4.2-.2-1.2-.3-2.4-.5-3.4.4-1 .8-2 1.6-3 2.3-3 2.1-6.2 3.6-10.1 3.7-.1 0-.3-.1-.2.2-5.5-.1-10.9-.2-16.4-.2-.9 0-1.1-.2-1.1-1 .1-1.6 0-1.6 1.9-1.6l15.6.3c.5 0 1 .1 1.6-.1h.6c2.8-.5 4.9-2.2 7.1-3.7 1.2-.9 2.5-1.7 3.8-2.6.6-.5 1.4-.6 2.1-.3 2.3 1 4.4.4 6.5-.4 1.9-.8 3.9-1.3 6-1.4.8.4 1.7.1 2.5.3 2.7.5 5 1.5 7.3 2.8 2.5 1.3 5 2.7 7.6 4 1.4.7 3 1.3 4.6 1.6-.1.2.1.2.2.2.8 0 1.7.3 2.6.3z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M16.8 70c-4.3 0-8.6.1-12.8.1H.7c-.5 0-.7-.2-.7-.6v-.2C0 67 0 67 2.5 67.1l15.2.3c.2 0 .4 0 .6-.1 1.4.2 2.7.1 4.1-.2 3.7-.7 7-2.4 10.3-4 .8-.4 1.5-.9 2.5-.9 2 0 4.1 0 6 .7 2.8 1 5.7 1.7 8.8 1.2 1.2-.1 2.4-.2 3.7-.2 1.2 0 2.4 0 3.6.5 2.7 1.1 5.3 2.3 8 3.4 1.5.6 3.1 1.1 4.8.9h2.5l17.3.3c1.1 0 1.4.2 1.3 1.2-.1 1.3 0 1.3-1.5 1.3-5.2-.1-10.4-.2-15.7-.2h-2.6c-2.1.1-4.1-.3-6-1-2.8-1-5.5-2.2-8.2-3.4-1.4-.6-2.9-.8-4.4-.4-1 0-1.8.3-2.7.6-1.1.3-2.1.4-3.1.1-2.4-.8-4.8-1.7-7.2-2.5-1.7-.6-3.3-.7-5 .1-2.5 1.1-4.9 2.3-7.5 3.2-1.7.6-3.4 1.3-5.1 1.6-1.8.3-3.6.3-5.4.4zM76.7 77.8H74c-2.8 0-5.5-.1-8.3-.1-2.4-.2-4.8 0-7.2-.1l-44-.6h-1.1c-3.8 0-7.8-.1-11.7-.2-.9 0-1.1-.2-1.1-1 .1-1.7 0-1.7 1.8-1.6 4.2.1 8.4.1 12.5.1.3 0 .6.1.9.1 14.9.2 29.8.5 44.6.7.7 0 1.4 0 2.1-.1 3.4.2 6.8.2 10.2.2h2.5c4.2.1 8.5.2 12.7.2h1.5c1.6.1 1.3-.2 1.4 1.3.1 1-.3 1.2-1.4 1.2-4.1 0-8.4 0-12.7-.1z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M74.1 72.4c5 .1 10 .2 14.9.3 1.9 0 1.9 0 1.9 1.8 0 .6-.2.7-.8.7-4.9-.2-9.7-.3-14.6-.4H72.6c-2.5-.2-5.1-.4-7.6-.9-1.5-.3-3.1-.8-4.7-.8.1-.2-.1-.2-.2-.2l-2.4-.6c-4.3-1-8.7-1.9-13.2-1.5-3.5.4-7.1.6-10.6 1-6.2.7-12.4 1.9-18.7 1.8-4.5-.2-9-.3-13.5-.4-.9 0-1.2-.2-1.1-1v-.6c-.1-.7.1-1 1-.9 4.3.2 8.5.4 12.8.6h1.8c.5 0 .9.1 1.4 0 2-.2 4.1-.6 6.1-.8 4.4-.4 8.8-1.1 13.3-1.7 1.5-.2 3-.6 4.6-.5 4.7.1 9.4-.3 13.9.7 2.2.6 4.4 1.2 6.5 1.8 3.1.8 6.2 1.8 9.5 1.5.9 0 1.7.1 2.6.1zM162.5 94.1c-1.8.9-3.6 1.4-5.6 1.2-2.5-.3-4.6-1.5-5.7-3.4-2.1-3.5-.1-6.2 3.1-7.8 2.6-1.3 5.2-.7 7.8.3.2.1.4.2.7.2h.2c-.2-1.2.8-.9 1.5-.9 2.2.1 1.7-.1 1.8 1.6 0 3.4.1 6.8-.4 10.1-.5 2.9-1.5 4.1-5.2 4.8-3.3.6-6.4.2-9.2-1.6-.4-.3-.4-.5 0-.8.1-.1.2-.1.3-.2.4-.4.3-1.2 1.1-1.2.6 0 1 .5 1.6.7 1.4.6 2.9.8 4.4.8 2.1-.1 4.1-1.3 3.6-3.8zm-3.7-1.1c1.1.2 2-.6 2.9-1.3 1.4-1 1.4-3.8.1-4.7-2.1-1.4-5.8-1.3-7.4 1-.5.7-.7 1.4-.4 2.1.6 1.5 2.7 2.8 4.8 2.9zM380.6 97.6c-1.4.5-2.7 1.2-4.3 1.2-2.1 0-3.9-.7-5.5-2-2.3-1.9-2.9-4.7-1.2-7 1.3-1.7 3.2-2.7 5.6-2.8 1.7-.1 3.4 0 4.9 1 .5.3.9.4 1.2-.2.4-.8 1.1-.4 1.8-.4 1.1-.1 1.4.2 1.4 1.3 0 3.4.1 6.8-.4 10.1-.5 3.2-2 4.5-5.5 5.1-3.1.6-6 0-8.7-1.4-.6-.3-.8-.6-.3-1.3 1-1.3.9-1.3 2.5-.7 1.5.6 3 1 4.7 1 2.6 0 4-1.3 4.1-3.6.1-.1.1-.2 0-.2-.2-.2-.2-.1-.3-.1zm-3.8-8.1c-1.7-.2-3 .4-4.1 1.4-.6.6-.7 1.4-.5 2.3.2.8.3 1.6 1.4 2.1 2.7 1.4 4.2 1.4 6.5-.4 1-.8 1.2-3.4.3-4.2-1-.8-2.2-1.4-3.6-1.2zM337 97.4c0 1.7-.1 3.3-.1 4.9 0 .6-.2.8-.8.8-2.9 0-2.9 0-2.9-2.6.1-4.4.1-8.8.2-13.1 0-.8.2-1.1 1.1-.8.9.3 2 0 2.8.8.2.2.3-.1.4-.1 3-1.8 8.5-.6 10.2 1.7 1.6 2.1 1.8 4.7.1 6.9-2.5 3.2-5.4 3.9-9.3 2.2-.5-.2-1-.4-1.7-.7zm8.6-4.8c.1-2.6-1.1-3.6-4.6-3.6-2.1 0-3.8 1.4-3.8 3.3 0 2.2 1.9 4.2 4.1 4.1 2.7-.2 4.1-.9 4.3-3.8z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M15.2 73.6c6.3.1 12.5-1.1 18.7-1.8 3.5-.4 7.1-.7 10.6-1 4.5-.5 8.9.4 13.2 1.5l2.4.6c.1.1.2.1.2.2.7.8 1.7 1.2 2.3 2.1-.7 0-1.4.1-2.1.1-14.9-.2-29.8-.5-44.6-.7-.3 0-.6-.1-.9-.1-.1-.4.1-.7.2-.9z",className:"st1"}),jsxRuntimeExports.jsx("path",{d:"M104.1 51.3c.3-16.7.5-33.4.8-50 0-.4-.4-1.2.4-1.2s.4.8.4 1.3c-.1 11.6-.4 23.3-.4 34.9-.1 21.8-.6 43.6-.9 65.4v.8c0 .3-.3.3-.5.3s-.5 0-.5-.3v-.8c.2-16.9.5-33.7.7-50.4zM217.1 91.6c.2.9.6 1.5 1.5 1.9 1.3.6 2.5 1.2 4.1 1 .8-.1 1.5-.3 2.1-.8.4-.2.8-.5 1.3-.2.6.4 1.3 1 1.2 1.6-.1.6-.9 1-1.6 1.2-3.7 1.1-7.2.9-10.3-1.5-1.4-1.1-2.1-4.2-1.5-6.2.9-2.9 3.3-3.8 6.2-4.1 3.5-.4 6.1.9 8 3.5.7 1 .5 2.2.5 3.4 0 .5-.5.3-.8.3-2.6 0-5.2-.1-7.8-.1-1 .1-1.9 0-2.9 0zm3.9-1.7c1.1 0 2.2 0 3.4.1.9.1.8-.2.6-.8-.5-1.2-1.4-1.9-2.8-2.2-2-.5-4.4.6-5 2.2-.2.5-.1.8.6.8 1-.2 2.1-.1 3.2-.1zM408.6 98.6c-2.7 2.1-6.4 1.7-8.9-.6-1-.9-.8-3.1.3-4 1.5-1.3 3.3-1.4 5.2-1.5 1 0 2.1 0 3.2.1.6 0 .6-.2.6-.6-.2-1.2-1.3-1.9-2.9-2.1-1.5-.1-2.9.1-4.2.7-.6.2-.9.1-1.1-.4-.1-.2-.2-.4-.4-.6-.7-.9-.7-.9.5-1.3 2.8-.9 5.6-1.3 8.5-.3 2.1.8 3 2.4 3.2 4.2.2 2.4 0 4.8 0 7.3 0 .4-.2.5-.6.5h-2.3c-1-.2-.6-1-1.1-1.4zm-3.3-.9c2.2.1 3.4-.9 3.5-2.5 0-.2.2-.6-.3-.6-1.6 0-3.2-.2-4.8.1-1.3.3-1.6 1.4-.7 2.3.7.7 1.6.6 2.3.7zM178.9 91c-1.7 0-3.4 0-5.1-.1-.7 0-.7.2-.5.7.6 1 1.6 1.6 2.6 1.9 1.6.5 3.3.7 4.8-.4.3-.2.8-.4 1.3-.2.6.4 1 1 1.3 1.6.1.2-.3.3-.5.4-2.7 1.8-5.7 1.8-8.6.8-4.9-1.7-5.7-5.8-3.5-9.4 1.2-1.9 3.4-2.5 5.7-2.6 3.1-.1 5.6.9 7.5 3.2.9 1.1.7 2.5.7 3.8 0 .4-.4.3-.7.3-1.6.1-3.3 0-5 0zm-1.5-1.8c1.2 0 2.3 0 3.5.1.3 0 .8 0 .5-.4-.8-1.1-1.4-2.4-3.2-2.7-1.6-.3-3.8.4-4.8 1.7-.2.3-.4.7-.2 1.1.1.4.6.2.9.2h3.3zM443.1 98.8c-2.1 1.9-4.4 1.8-6.6 1.3-2.5-.7-3.9-2.2-3.2-4.4.4-1.6 1.9-2.1 3.3-2.4 1.8-.4 3.6-.3 5.5-.2 1.1 0 1.1-.1.8-1-.2-.7-.7-1.2-1.5-1.3-1.9-.5-3.8-.5-5.6.3-.5.2-.7.1-.9-.3 0-.1-.1-.1-.1-.2-1-1.5-1.1-1.5.8-2 2.8-.8 5.6-.9 8.4.2 1.1.4 1.7 1.1 2 2.1.6 1.9.9 3.8.8 5.8-.1 1.1-.1 2.1-.1 3.2 0 .5-.1.8-.8.7-.4-.1-.9-.1-1.3 0-1-.1-1.6-.3-1.5-1.8zm-3.6-.5h.6c2.1-.4 2.8-.9 2.9-2.6 0-.4-.1-.5-.5-.5-1.3 0-2.7-.2-4 0-.8.1-1.4.4-1.9.9-.2.2-.2.4-.1.7.8.9 1.6 1.5 3 1.5zM263.9 94c0 1-.1 2 0 3.1 0 .6-.5.6-.9.5-.9-.2-2.1.6-2.5-.5-.4-.9-.3-1.1-1.1-.4-2.1 1.6-6.2.9-7.9-.8-1.4-1.4-1.6-4.3 1.4-5.1 2.1-.6 4.2-.6 6.3-.6.4 0 1 .2 1.1-.2.1-.5 0-1-.5-1.5-.7-.7-1.5-.9-2.4-1-1.5-.1-3.1-.1-4.5.6-.4.2-.7.2-.9-.2-.1-.2-.2-.4-.4-.6-.8-1.2-.7-1.3.8-1.7 2.4-.7 4.7-.8 7.2-.3 3 .6 4 1.6 4.2 4.7.2 1.4.3 2.7.1 4zm-5.7-1.7c-1.1 0-2.2 0-3.2.3-.5.1-1.1.3-1.2.8-.1.6.2 1.1.7 1.4 1.6 1.1 4.4.8 5.5-.7.3-.4.6-1 .4-1.5-.2-.4-.8-.2-1.2-.2-.3-.2-.7-.1-1-.1zM323 86.1c4.4.1 7 2 7.6 5.3.6 3.4-1.4 5.7-4.6 6.8-3.8 1.2-7.1.3-9.8-2.3-2-1.9-1.6-5.7.6-7.6 1.9-1.7 4.1-2.2 6.2-2.2zm-.2 10c.2 0 .7-.1 1.1-.2 1.6-.3 3-1.7 3.3-3.2.3-1.6-.3-2.7-1.8-3.5-1.1-.6-2.2-.6-3.4-.3-.6.1-1.4-.1-2 .5-1.3 1.3-1.8 3.1-1 4.7.8 1.2 2 1.9 3.8 2zM132.8 89.4c0-1.8.1-3.6.1-5.4 0-.5.2-.8.8-.7.6.1 1.1 0 1.7 0 .5 0 .8.1 1 .5.2.5.5.5.9.3 2.4-1.3 4.9-1.1 7.4-.3 1.5.5 2.2 1.8 2.6 3 .6 2.1.4 4.2.3 6.4 0 .2 0 .3-.1.5-.1.7.3 1.7-.2 1.9-.9.3-2.1.1-3.1.1-.6 0-.3-.5-.3-.8 0-1.8.1-3.7.1-5.6 0-.3 0-.6-.1-.9-.3-1.7-.9-2.3-2.3-2.6-2-.4-3.2 0-4.3 1.3-1.1 1.4-.9 2.9-1 4.5-.1 1.1-.1 2.2 0 3.3 0 .6-.2.7-.8.7-2.7 0-2.7 0-2.6-2.4-.2-1.3-.1-2.5-.1-3.8zM359.4 99.1c-4.5.2-8.6-2.8-8.2-6.9.2-2.6 1.7-3.9 4.3-4.9 2.5-.9 5-1 7.6.1 3.9 1.6 5 6.1 2.7 8.9-1.4 1.8-3.6 2.7-6.4 2.8zm4.1-6.3c.2-1.7-1.7-3.6-4.3-3.7-2.7-.1-4.4 1.7-4.4 3.7 0 2.1 1.7 3.7 3.9 3.8 2.6.2 4.9-2.1 4.8-3.8zM273.7 85.5c3.7-.1 3.7-.1 5 2.9.7 1.6 1.6 3.2 2.4 4.8.4.7.8.6 1.1.1.3-.3.5-.7.6-1.1.8-2.1 2.1-3.9 3-5.9.2-.5.6-.7 1.2-.7.7.1 1.5.1 2.2.1.5 0 .7.2.3.5-.3.2-.4.5-.5.7-1.4 2.6-2.6 5.2-4.1 7.7-1.2 1.9-2 3.9-3.5 5.7-2.1 2.6-5 2.4-7.6 1.3-.5-.2-.7-.6-.4-1.1 0-.1.1-.1.1-.2.5-.9 1.2-1.1 2.3-.8 1.5.6 3.3-.1 3.8-1.5.1-.4.2-.9-.1-1.2-.4-.4-.6-.9-.8-1.4-1.1-2.5-2.5-4.8-3.6-7.3-.4-.8-1-1.6-1.4-2.6zM191.6 85.3c2.1-1.2 4.3-1.5 6.6-1.1 2.5.5 4 2 4.2 4.4.2 2.5 0 4.9 0 7.4 0 .5-.2.7-.8.6h-1.5c-.9 0-1.3-.4-1.3-1.3.1-1.7.2-3.3.1-5 0-1-.4-1.8-.9-2.7-.6-.9-1.5-1-2.5-1-2.2-.1-3.3.4-3.9 2.4-.6 2.1-.3 4.3-.4 6.4 0 .8-.2 1-1.1 1-2.6-.1-2.6-.1-2.6-2.4.1-3 .1-5.9.1-8.9 0-.8.3-1.1 1.1-.9.3.1.7 0 1.1 0 .9 0 1.9-.1 1.8 1.1zM305.7 82.2c2.4 0 4.8.1 7.2.1.7 0 1 .2 1 .8 0 1.9 0 1.9-2.1 1.9-1.1 0-2.2 0-3.4-.1-.6 0-.8.1-.8.7 0 3.9-.1 7.8-.1 11.8 0 .6-.1.8-.9.8-2.8 0-2.8 0-2.8-2.6 0-3.3.1-6.7.1-10.1 0-.6-.1-.8-.9-.8-1.6.1-3.2 0-4.7 0-.6 0-.8-.1-.8-.8 0-2 0-2 2.2-2 2 .3 4 .3 6 .3zM416.9 95c0-1.4 0-2.8.1-4.1 0-.5-.1-.7-.7-.8-1.8-.1-1.9-.2-1.7-1.9.1-.4.2-.5.6-.4h1.3c.4 0 .6-.1.6-.5.4-3.3 1.8-4.4 6.1-4.3.3 0 .6.1.9.2 1.7.4 1.7.3 1 1.8-.2.5-.6.6-1 .6-.5 0-1-.1-1.5-.2-1.3-.1-2.3 1-2.2 2.2 0 .4.4.3.6.3.8 0 1.7.1 2.5 0 .7 0 1 .2.9.8v.8c.1.7-.2.9-1 .8-.7-.1-1.3 0-2-.1s-.8.2-.8.8c0 2.8-.1 5.5-.1 8.2 0 .7-.2.8-1 .8-2.7-.1-2.7 0-2.7-2.6 0-.7.1-1.6.1-2.4z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M55.5 69c-4.6-1-9.3-.6-13.9-.7-1.5 0-3 .3-4.6.5-4.4.5-8.8 1.2-13.3 1.7-2 .2-4.1.5-6.1.8-.4.1-.9 0-1.4 0 .1-.4.3-.9.4-1.3 1.8-.1 3.6-.1 5.4-.4 1.8-.3 3.4-1 5.1-1.6 2.6-.9 5-2.1 7.5-3.2 1.7-.8 3.3-.6 5-.1 2.4.8 4.8 1.7 7.2 2.5.9.3 1.9.2 2.9-.1.9-.3 1.8-.6 2.7-.6 1.3.8 2.4 1.5 3.1 2.5zM45.8 55.8c-2.1.1-4.1.6-6 1.4-2 .9-4.2 1.5-6.5.4-.7-.3-1.4-.2-2.1.3-1.2.9-2.5 1.7-3.8 2.6-2.2 1.5-4.3 3.1-7.1 3.7h-.6c0-.5.5-.8.4-1.4.1 0 .2-.1.2-.2 2.4-.9 4.5-2.2 6.5-3.7 1-.7 1.9-1.5 2.8-2.3 1.3-1 2.6-2.1 3.9-3 1.3-1 2.5-1 3.8-.3 2.1 1.1 4.3 1.1 6.6.4.7-.2 1.2-.7 1.8-1.1.2 1.2.1 2.2.1 3.2z",className:"st1"}),jsxRuntimeExports.jsx("path",{d:"M49.9 64.1c-3.1.5-5.9-.2-8.8-1.2-1.9-.7-4-.7-6-.7-1 0-1.7.5-2.5.9-3.3 1.6-6.6 3.2-10.3 4-1.3.3-2.7.4-4.1.2v-.4c.1-.1.2-.1.2-.2 3.9-.1 7.1-1.6 10.1-3.7 1-.8 2-1.5 3-2.3 1-.8 2.2-.7 3.4-.4 1.4.3 2.8.5 4.2.2.6-.1 1.1-.4 1.5-.7.9-.6 1.8-1.1 2.9-1.4.8-.2 1.4.1 2.1.1v.9c-.1.8.1 1.4.9 1.9 1.4.8 2.4 1.9 3.4 2.8z",className:"st1"}),jsxRuntimeExports.jsx("path",{d:"M124 87.3c0-2.3.1-4.7.1-7 0-.8.3-1.1 1.1-1 .7.1 1.5.1 2.2 0 .6 0 .7.2.7.7l-.3 14.7c0 .5-.2.8-.8.7-1-.1-2.4.3-3-.2-.5-.5-.1-1.7-.1-2.6.1-1.7.1-3.5.1-5.3zM231.6 90.9c0-1.8.1-3.6.1-5.4 0-.5.1-.8.8-.7.5.1 1.1 0 1.6 0 .6 0 .9.1 1.1.6.1.4.3.6.8.2 1.2-.8 2.7-.8 4.1-1h.2c.6.8.1 1.6.3 2.4.1.5-.4.4-.7.4h-.7c-2.3 0-3 .6-3.7 2.6-.6 2-.3 4-.4 6.1 0 .6-.1.8-.9.8-2.6 0-2.6 0-2.5-2.4-.2-1-.1-2.3-.1-3.6zM392 88.9c1.5-1.4 3.1-1.6 4.6-1.7.5 0 .7.1.6.5v.4c0 .6.2 1.4-.1 1.9-.4.5-1.3.2-2 .1-1.4-.1-2.7 1.4-3 2.6-.4 2-.3 3.9-.2 5.9 0 .7-.1 1-1 1-2.5-.1-2.5 0-2.4-2.3 0-3.1.1-6.1.1-9.2 0-.6.2-.9.9-.8h.7c.9.1 2.1-.2 1.8 1.6zM426.3 93.9c0-1.8.1-3.6.1-5.4 0-.5.1-.6.7-.6 3 0 3 0 3 2.7 0 2.9-.1 5.9-.1 8.8 0 .7-.2.9-1 .8-2.8-.1-2.8 0-2.7-2.5v-3.8zM210 90.6c0 1.8-.1 3.5-.1 5.3 0 .6-.1.8-.9.8-2.6 0-2.6 0-2.6-2.4.1-3 .1-6 .1-9 0-.7.2-1 .9-.8h.8c1.1 0 1.7.6 1.7 1.6.2 1.5.1 3 .1 4.5zM243.4 91.1c0-1.8.1-3.6.1-5.4 0-.5.2-.7.8-.7 2.7 0 2.7 0 2.6 2.4 0 3-.1 6.1 0 9.1 0 .7-.2.8-1 .8-2.6-.1-2.6 0-2.5-2.3v-3.9zM208.6 82.5c-1.3 0-2.2-.7-2.1-1.7.1-1 .8-1.8 1.5-1.8 1.6 0 3.1.8 3 1.6 0 .9-1.4 1.9-2.4 1.9zM250.7 80.2c-2.4 1.4-4.1 3.7-7.4 3.1.5-.8 1.2-1.4 1.9-2 .5-.4.7-1.1 1.3-1.1 1.3-.1 2.6 0 4.2 0zM426.1 86.1c1.1-.9 2-1.9 3-2.9.1-.2.4-.2.6-.2 1 .2 2.1.3 3.4.5-2.1 1.5-3.9 3.2-7 2.6z",className:"st0"}),jsxRuntimeExports.jsx("path",{d:"M70.8 65.2c-.9-.1-1.8-.3-2.7-.6-.1-.1-.2-.1-.2-.2.1-.7-.5-1.1-.5-1.8 1.1.3 2 .8 3 1.2.1.6.3 1 .4 1.4zM74.1 72.4h-2.5c-.1-.4-.3-.7-.4-1.1h2.6c.1.3.2.7.3 1.1zM72.4 68.7h-2.5c-.1-.3-.2-.6-.4-.9.9.2 1.8.1 2.7.4.1.2.2.3.2.5zM72.6 74.7h2.7v.6h-2.5c0-.2-.1-.4-.2-.6zM22.6 58.7c0 .1 0 .2-.1.2 0-.1 0-.2.1-.2zM83.7 93.7c.1 0 0 0 0 0z",className:"st1"}),jsxRuntimeExports.jsx("path",{d:"M65.8 77.7c2.8 0 5.5.1 8.3.1 1.5 3.5 3.1 7 4.6 10.6-1.6-.8-2.5-2-3.7-3-3-2.4-5.8-4.9-8.7-7.4-.1-.1-.3-.2-.5-.3zM64.8 57.9c-1.8-1.6-3.5-3.4-5.2-5-1.6-1.5-2.9-3.2-4.7-4.4-1.2-.8-2.6-1.3-4.1-1.1-.9.1-1.6.6-2.3 1-.7.4-1.3 1-2.1 1.3-.3-.2-.2-.6-.2-.9.2-8.5.4-17.1.8-25.7.1-1.6.2-3.3.4-5.1.5.5.5 1 .7 1.4 1.1 2.8 2.5 5.6 3.7 8.4 1.5 3.5 3.1 7 4.7 10.5.8 1.8 1.5 3.7 2.4 5.6 1.7 3.5 3.2 7 4.7 10.6.4.9.9 1.8 1.3 2.7 0 .1.4.4-.1.7z",className:"st2"}),jsxRuntimeExports.jsx("path",{d:"M67.4 62.7c.1.6.6 1.1.5 1.8-1.6-.3-3.2-.9-4.6-1.6-2.6-1.2-5.1-2.6-7.6-4-2.3-1.2-4.7-2.3-7.3-2.8-.8-.2-1.7.1-2.5-.3 0-1 0-2 .1-3 1.4-.9 2.5-2.1 4-2.8 1.2-.6 2.2-.5 3.1.4 1.9 1.7 3.7 3.5 5.5 5.2 2.2 2.2 4.5 4.3 7.1 6 .5.4 1.2.5 1.7 1.1zM20.5 62.8c-.1 0-.2.1-.2.2-.2-.3 0-.2.2-.2zM69.6 67.7c.1.3.2.6.4.9-1.7.2-3.2-.3-4.8-.9-2.7-1.1-5.4-2.2-8-3.4-1.1-.5-2.4-.5-3.6-.5-1.2 0-2.4.1-3.7.2-1.1-1-2-2-3.2-2.8-.8-.5-1-1.1-.9-1.9v-.9c2.3-.2 4.3.6 6.3 1.4 2.8 1.2 5.5 2.6 8.1 4 2.9 1.8 6 3.1 9.4 3.9z",className:"st2"}),jsxRuntimeExports.jsx("path",{d:"M67.9 64.4c.1.1.2.1.2.2-.1 0-.3 0-.2-.2zM18.5 66.8c-.1.1-.2.1-.2.2-.1-.3.1-.2.2-.2zM71.2 71.2c.1.4.3.7.4 1.1-3.3.2-6.4-.7-9.5-1.5-2.2-.6-4.4-1.2-6.5-1.8-.8-1-1.9-1.8-3-2.5 1.5-.5 3-.2 4.4.4 2.7 1.2 5.4 2.4 8.2 3.4 1.9.6 3.9 1 6 .9zM72.6 74.7c.1.2.1.4.2.5-3.4 0-6.8 0-10.2-.2-.5-.9-1.6-1.3-2.3-2.1 1.6 0 3.1.5 4.7.8 2.6.6 5.1.8 7.6 1zM60.4 72.9c-.1-.1-.2-.1-.2-.2.1.1.3 0 .2.2zM380.6 97.6c.1 0 .1-.1.2 0s.1.2 0 .2c-.1-.1-.2-.1-.2-.2z",className:"st2"})]}),NavBar=()=>{const e="text-black";return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment,{children:jsxRuntimeExports.jsx("div",{className:"  ",children:jsxRuntimeExports.jsx(Navbar$1,{className:" pt-0 mt-0 p-0",expand:"lg",fixed:"top",children:jsxRuntimeExports.jsxs("div",{className:"navbarra container-fluid ",children:[jsxRuntimeExports.jsx(Navbar$1.Brand,{className:"brand ",as:Link,to:"/",children:jsxRuntimeExports.jsx(SvgComponent,{width:260,className:"logoMagna"})}),jsxRuntimeExports.jsx(Navbar$1.Toggle,{"aria-controls":"basic-navbar-nav"}),jsxRuntimeExports.jsx(Navbar$1.Collapse,{id:"basic-navbar-nav ",children:jsxRuntimeExports.jsxs(Nav$1,{className:"ms-auto",children:[jsxRuntimeExports.jsx(Link,{className:`links nav navbar p-0  ${e} `,to:"/AboutUS",children:"Quiénes somos"}),jsxRuntimeExports.jsx(NavLink$2,{className:`links nav navbar p-0 ${e} `,to:"/servicios#header",children:"Servicios"}),jsxRuntimeExports.jsx(Link,{className:`links nav navbar p-0 ${e} `,to:"/contact",children:"Contacto"}),jsxRuntimeExports.jsx(NavLink$2,{className:`links nav navbar p-0 ${e} `,to:"/projects",children:"Proyectos"}),jsxRuntimeExports.jsx(Link,{className:`links nav navbar p-0 ${e} `,to:"/cotizador",children:"Login"}),jsxRuntimeExports.jsx(Link,{to:"/blog",className:"links nav navbar p-0 text-black",children:"blog "}),jsxRuntimeExports.jsx("a",{className:`links nav navbar p-0 ${e} `,href:"/store/",children:jsxRuntimeExports.jsx("div",{className:"store",children:jsxRuntimeExports.jsx("span",{children:"Magnatienda"})})})]})})]})})})})},FloatWhatsapp=reactExports.lazy(()=>__vitePreload(()=>import("./floawhatsapp-1b7d5e68.js"),["static/floawhatsapp-1b7d5e68.js","static/react-1cdf6ce0.js","static/useLazyload-da8a0755.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js"])),LazyFooter1=reactExports.lazy(()=>__vitePreload(()=>import("./footer1-48ade6b9.js"),["static/footer1-48ade6b9.js","static/index.esm-90d987f3.js","static/react-1cdf6ce0.js","static/index.esm-135f59b5.js","static/useLazyload-da8a0755.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/footer1-8a106b42.css"])),PagesLayout=({children:e})=>{const t=reactExports.useRef(null),r=useLocation();return reactExports.useEffect(()=>{t.current&&t.current.scrollIntoView({behavior:"smooth"})},[r]),jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[jsxRuntimeExports.jsx("div",{ref:t,children:jsxRuntimeExports.jsx(NavBar,{})}),e,jsxRuntimeExports.jsx(LazyFooter1,{}),jsxRuntimeExports.jsx(FloatWhatsapp,{})]})};function isObject$2(e){return e!==null&&typeof e=="object"&&"constructor"in e&&e.constructor===Object}function extend$2(e,t){e===void 0&&(e={}),t===void 0&&(t={}),Object.keys(t).forEach(r=>{typeof e[r]>"u"?e[r]=t[r]:isObject$2(t[r])&&isObject$2(e[r])&&Object.keys(t[r]).length>0&&extend$2(e[r],t[r])})}const ssrDocument={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function getDocument(){const e=typeof document<"u"?document:{};return extend$2(e,ssrDocument),e}const ssrWindow={document:ssrDocument,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function e(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(e){return typeof setTimeout>"u"?(e(),null):setTimeout(e,0)},cancelAnimationFrame(e){typeof setTimeout>"u"||clearTimeout(e)}};function getWindow(){const e=typeof window<"u"?window:{};return extend$2(e,ssrWindow),e}function classesToTokens(e){return e===void 0&&(e=""),e.trim().split(" ").filter(t=>!!t.trim())}function deleteProps(e){const t=e;Object.keys(t).forEach(r=>{try{t[r]=null}catch{}try{delete t[r]}catch{}})}function nextTick(e,t){return t===void 0&&(t=0),setTimeout(e,t)}function now(){return Date.now()}function getComputedStyle$2(e){const t=getWindow();let r;return t.getComputedStyle&&(r=t.getComputedStyle(e,null)),!r&&e.currentStyle&&(r=e.currentStyle),r||(r=e.style),r}function getTranslate(e,t){t===void 0&&(t="x");const r=getWindow();let i,s,a;const o=getComputedStyle$2(e);return r.WebKitCSSMatrix?(s=o.transform||o.webkitTransform,s.split(",").length>6&&(s=s.split(", ").map(u=>u.replace(",",".")).join(", ")),a=new r.WebKitCSSMatrix(s==="none"?"":s)):(a=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),i=a.toString().split(",")),t==="x"&&(r.WebKitCSSMatrix?s=a.m41:i.length===16?s=parseFloat(i[12]):s=parseFloat(i[4])),t==="y"&&(r.WebKitCSSMatrix?s=a.m42:i.length===16?s=parseFloat(i[13]):s=parseFloat(i[5])),s||0}function isObject$1(e){return typeof e=="object"&&e!==null&&e.constructor&&Object.prototype.toString.call(e).slice(8,-1)==="Object"}function isNode(e){return typeof window<"u"&&typeof window.HTMLElement<"u"?e instanceof HTMLElement:e&&(e.nodeType===1||e.nodeType===11)}function extend$1(){const e=Object(arguments.length<=0?void 0:arguments[0]),t=["__proto__","constructor","prototype"];for(let r=1;r<arguments.length;r+=1){const i=r<0||arguments.length<=r?void 0:arguments[r];if(i!=null&&!isNode(i)){const s=Object.keys(Object(i)).filter(a=>t.indexOf(a)<0);for(let a=0,o=s.length;a<o;a+=1){const u=s[a],c=Object.getOwnPropertyDescriptor(i,u);c!==void 0&&c.enumerable&&(isObject$1(e[u])&&isObject$1(i[u])?i[u].__swiper__?e[u]=i[u]:extend$1(e[u],i[u]):!isObject$1(e[u])&&isObject$1(i[u])?(e[u]={},i[u].__swiper__?e[u]=i[u]:extend$1(e[u],i[u])):e[u]=i[u])}}}return e}function setCSSProperty(e,t,r){e.style.setProperty(t,r)}function animateCSSModeScroll(e){let{swiper:t,targetPosition:r,side:i}=e;const s=getWindow(),a=-t.translate;let o=null,u;const c=t.params.speed;t.wrapperEl.style.scrollSnapType="none",s.cancelAnimationFrame(t.cssModeFrameID);const d=r>a?"next":"prev",g=(y,P)=>d==="next"&&y>=P||d==="prev"&&y<=P,x=()=>{u=new Date().getTime(),o===null&&(o=u);const y=Math.max(Math.min((u-o)/c,1),0),P=.5-Math.cos(y*Math.PI)/2;let E=a+P*(r-a);if(g(E,r)&&(E=r),t.wrapperEl.scrollTo({[i]:E}),g(E,r)){t.wrapperEl.style.overflow="hidden",t.wrapperEl.style.scrollSnapType="",setTimeout(()=>{t.wrapperEl.style.overflow="",t.wrapperEl.scrollTo({[i]:E})}),s.cancelAnimationFrame(t.cssModeFrameID);return}t.cssModeFrameID=s.requestAnimationFrame(x)};x()}function getSlideTransformEl(e){return e.querySelector(".swiper-slide-transform")||e.shadowRoot&&e.shadowRoot.querySelector(".swiper-slide-transform")||e}function elementChildren(e,t){return t===void 0&&(t=""),[...e.children].filter(r=>r.matches(t))}function showWarning(e){try{console.warn(e);return}catch{}}function createElement(e,t){t===void 0&&(t=[]);const r=document.createElement(e);return r.classList.add(...Array.isArray(t)?t:classesToTokens(t)),r}function elementPrevAll(e,t){const r=[];for(;e.previousElementSibling;){const i=e.previousElementSibling;t?i.matches(t)&&r.push(i):r.push(i),e=i}return r}function elementNextAll(e,t){const r=[];for(;e.nextElementSibling;){const i=e.nextElementSibling;t?i.matches(t)&&r.push(i):r.push(i),e=i}return r}function elementStyle(e,t){return getWindow().getComputedStyle(e,null).getPropertyValue(t)}function elementIndex(e){let t=e,r;if(t){for(r=0;(t=t.previousSibling)!==null;)t.nodeType===1&&(r+=1);return r}}function elementParents(e,t){const r=[];let i=e.parentElement;for(;i;)t?i.matches(t)&&r.push(i):r.push(i),i=i.parentElement;return r}function elementTransitionEnd(e,t){function r(i){i.target===e&&(t.call(e,i),e.removeEventListener("transitionend",r))}t&&e.addEventListener("transitionend",r)}function elementOuterSize(e,t,r){const i=getWindow();return r?e[t==="width"?"offsetWidth":"offsetHeight"]+parseFloat(i.getComputedStyle(e,null).getPropertyValue(t==="width"?"margin-right":"margin-top"))+parseFloat(i.getComputedStyle(e,null).getPropertyValue(t==="width"?"margin-left":"margin-bottom")):e.offsetWidth}let support;function calcSupport(){const e=getWindow(),t=getDocument();return{smoothScroll:t.documentElement&&t.documentElement.style&&"scrollBehavior"in t.documentElement.style,touch:!!("ontouchstart"in e||e.DocumentTouch&&t instanceof e.DocumentTouch)}}function getSupport(){return support||(support=calcSupport()),support}let deviceCached;function calcDevice(e){let{userAgent:t}=e===void 0?{}:e;const r=getSupport(),i=getWindow(),s=i.navigator.platform,a=t||i.navigator.userAgent,o={ios:!1,android:!1},u=i.screen.width,c=i.screen.height,d=a.match(/(Android);?[\s\/]+([\d.]+)?/);let g=a.match(/(iPad).*OS\s([\d_]+)/);const x=a.match(/(iPod)(.*OS\s([\d_]+))?/),y=!g&&a.match(/(iPhone\sOS|iOS)\s([\d_]+)/),P=s==="Win32";let E=s==="MacIntel";const T=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!g&&E&&r.touch&&T.indexOf(`${u}x${c}`)>=0&&(g=a.match(/(Version)\/([\d.]+)/),g||(g=[0,1,"13_0_0"]),E=!1),d&&!P&&(o.os="android",o.android=!0),(g||y||x)&&(o.os="ios",o.ios=!0),o}function getDevice(e){return e===void 0&&(e={}),deviceCached||(deviceCached=calcDevice(e)),deviceCached}let browser;function calcBrowser(){const e=getWindow();let t=!1;function r(){const i=e.navigator.userAgent.toLowerCase();return i.indexOf("safari")>=0&&i.indexOf("chrome")<0&&i.indexOf("android")<0}if(r()){const i=String(e.navigator.userAgent);if(i.includes("Version/")){const[s,a]=i.split("Version/")[1].split(" ")[0].split(".").map(o=>Number(o));t=s<16||s===16&&a<2}}return{isSafari:t||r(),needPerspectiveFix:t,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(e.navigator.userAgent)}}function getBrowser(){return browser||(browser=calcBrowser()),browser}function Resize(e){let{swiper:t,on:r,emit:i}=e;const s=getWindow();let a=null,o=null;const u=()=>{!t||t.destroyed||!t.initialized||(i("beforeResize"),i("resize"))},c=()=>{!t||t.destroyed||!t.initialized||(a=new ResizeObserver(x=>{o=s.requestAnimationFrame(()=>{const{width:y,height:P}=t;let E=y,T=P;x.forEach(M=>{let{contentBoxSize:C,contentRect:S,target:b}=M;b&&b!==t.el||(E=S?S.width:(C[0]||C).inlineSize,T=S?S.height:(C[0]||C).blockSize)}),(E!==y||T!==P)&&u()})}),a.observe(t.el))},d=()=>{o&&s.cancelAnimationFrame(o),a&&a.unobserve&&t.el&&(a.unobserve(t.el),a=null)},g=()=>{!t||t.destroyed||!t.initialized||i("orientationchange")};r("init",()=>{if(t.params.resizeObserver&&typeof s.ResizeObserver<"u"){c();return}s.addEventListener("resize",u),s.addEventListener("orientationchange",g)}),r("destroy",()=>{d(),s.removeEventListener("resize",u),s.removeEventListener("orientationchange",g)})}function Observer(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;const a=[],o=getWindow(),u=function(g,x){x===void 0&&(x={});const y=o.MutationObserver||o.WebkitMutationObserver,P=new y(E=>{if(t.__preventObserver__)return;if(E.length===1){s("observerUpdate",E[0]);return}const T=function(){s("observerUpdate",E[0])};o.requestAnimationFrame?o.requestAnimationFrame(T):o.setTimeout(T,0)});P.observe(g,{attributes:typeof x.attributes>"u"?!0:x.attributes,childList:typeof x.childList>"u"?!0:x.childList,characterData:typeof x.characterData>"u"?!0:x.characterData}),a.push(P)},c=()=>{if(t.params.observer){if(t.params.observeParents){const g=elementParents(t.hostEl);for(let x=0;x<g.length;x+=1)u(g[x])}u(t.hostEl,{childList:t.params.observeSlideChildren}),u(t.wrapperEl,{attributes:!1})}},d=()=>{a.forEach(g=>{g.disconnect()}),a.splice(0,a.length)};r({observer:!1,observeParents:!1,observeSlideChildren:!1}),i("init",c),i("destroy",d)}var eventsEmitter={on(e,t,r){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;const s=r?"unshift":"push";return e.split(" ").forEach(a=>{i.eventsListeners[a]||(i.eventsListeners[a]=[]),i.eventsListeners[a][s](t)}),i},once(e,t,r){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;function s(){i.off(e,s),s.__emitterProxy&&delete s.__emitterProxy;for(var a=arguments.length,o=new Array(a),u=0;u<a;u++)o[u]=arguments[u];t.apply(i,o)}return s.__emitterProxy=t,i.on(e,s,r)},onAny(e,t){const r=this;if(!r.eventsListeners||r.destroyed||typeof e!="function")return r;const i=t?"unshift":"push";return r.eventsAnyListeners.indexOf(e)<0&&r.eventsAnyListeners[i](e),r},offAny(e){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsAnyListeners)return t;const r=t.eventsAnyListeners.indexOf(e);return r>=0&&t.eventsAnyListeners.splice(r,1),t},off(e,t){const r=this;return!r.eventsListeners||r.destroyed||!r.eventsListeners||e.split(" ").forEach(i=>{typeof t>"u"?r.eventsListeners[i]=[]:r.eventsListeners[i]&&r.eventsListeners[i].forEach((s,a)=>{(s===t||s.__emitterProxy&&s.__emitterProxy===t)&&r.eventsListeners[i].splice(a,1)})}),r},emit(){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsListeners)return e;let t,r,i;for(var s=arguments.length,a=new Array(s),o=0;o<s;o++)a[o]=arguments[o];return typeof a[0]=="string"||Array.isArray(a[0])?(t=a[0],r=a.slice(1,a.length),i=e):(t=a[0].events,r=a[0].data,i=a[0].context||e),r.unshift(i),(Array.isArray(t)?t:t.split(" ")).forEach(c=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach(d=>{d.apply(i,[c,...r])}),e.eventsListeners&&e.eventsListeners[c]&&e.eventsListeners[c].forEach(d=>{d.apply(i,r)})}),e}};function updateSize(){const e=this;let t,r;const i=e.el;typeof e.params.width<"u"&&e.params.width!==null?t=e.params.width:t=i.clientWidth,typeof e.params.height<"u"&&e.params.height!==null?r=e.params.height:r=i.clientHeight,!(t===0&&e.isHorizontal()||r===0&&e.isVertical())&&(t=t-parseInt(elementStyle(i,"padding-left")||0,10)-parseInt(elementStyle(i,"padding-right")||0,10),r=r-parseInt(elementStyle(i,"padding-top")||0,10)-parseInt(elementStyle(i,"padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(r)&&(r=0),Object.assign(e,{width:t,height:r,size:e.isHorizontal()?t:r}))}function updateSlides(){const e=this;function t(W,U){return parseFloat(W.getPropertyValue(e.getDirectionLabel(U))||0)}const r=e.params,{wrapperEl:i,slidesEl:s,size:a,rtlTranslate:o,wrongRTL:u}=e,c=e.virtual&&r.virtual.enabled,d=c?e.virtual.slides.length:e.slides.length,g=elementChildren(s,`.${e.params.slideClass}, swiper-slide`),x=c?e.virtual.slides.length:g.length;let y=[];const P=[],E=[];let T=r.slidesOffsetBefore;typeof T=="function"&&(T=r.slidesOffsetBefore.call(e));let M=r.slidesOffsetAfter;typeof M=="function"&&(M=r.slidesOffsetAfter.call(e));const C=e.snapGrid.length,S=e.slidesGrid.length;let b=r.spaceBetween,A=-T,R=0,I=0;if(typeof a>"u")return;typeof b=="string"&&b.indexOf("%")>=0?b=parseFloat(b.replace("%",""))/100*a:typeof b=="string"&&(b=parseFloat(b)),e.virtualSize=-b,g.forEach(W=>{o?W.style.marginLeft="":W.style.marginRight="",W.style.marginBottom="",W.style.marginTop=""}),r.centeredSlides&&r.cssMode&&(setCSSProperty(i,"--swiper-centered-offset-before",""),setCSSProperty(i,"--swiper-centered-offset-after",""));const D=r.grid&&r.grid.rows>1&&e.grid;D?e.grid.initSlides(g):e.grid&&e.grid.unsetSlides();let O;const j=r.slidesPerView==="auto"&&r.breakpoints&&Object.keys(r.breakpoints).filter(W=>typeof r.breakpoints[W].slidesPerView<"u").length>0;for(let W=0;W<x;W+=1){O=0;let U;if(g[W]&&(U=g[W]),D&&e.grid.updateSlide(W,U,g),!(g[W]&&elementStyle(U,"display")==="none")){if(r.slidesPerView==="auto"){j&&(g[W].style[e.getDirectionLabel("width")]="");const H=getComputedStyle(U),K=U.style.transform,$=U.style.webkitTransform;if(K&&(U.style.transform="none"),$&&(U.style.webkitTransform="none"),r.roundLengths)O=e.isHorizontal()?elementOuterSize(U,"width",!0):elementOuterSize(U,"height",!0);else{const N=t(H,"width"),L=t(H,"padding-left"),B=t(H,"padding-right"),_=t(H,"margin-left"),F=t(H,"margin-right"),z=H.getPropertyValue("box-sizing");if(z&&z==="border-box")O=N+_+F;else{const{clientWidth:V,offsetWidth:X}=U;O=N+L+B+_+F+(X-V)}}K&&(U.style.transform=K),$&&(U.style.webkitTransform=$),r.roundLengths&&(O=Math.floor(O))}else O=(a-(r.slidesPerView-1)*b)/r.slidesPerView,r.roundLengths&&(O=Math.floor(O)),g[W]&&(g[W].style[e.getDirectionLabel("width")]=`${O}px`);g[W]&&(g[W].swiperSlideSize=O),E.push(O),r.centeredSlides?(A=A+O/2+R/2+b,R===0&&W!==0&&(A=A-a/2-b),W===0&&(A=A-a/2-b),Math.abs(A)<1/1e3&&(A=0),r.roundLengths&&(A=Math.floor(A)),I%r.slidesPerGroup===0&&y.push(A),P.push(A)):(r.roundLengths&&(A=Math.floor(A)),(I-Math.min(e.params.slidesPerGroupSkip,I))%e.params.slidesPerGroup===0&&y.push(A),P.push(A),A=A+O+b),e.virtualSize+=O+b,R=O,I+=1}}if(e.virtualSize=Math.max(e.virtualSize,a)+M,o&&u&&(r.effect==="slide"||r.effect==="coverflow")&&(i.style.width=`${e.virtualSize+b}px`),r.setWrapperSize&&(i.style[e.getDirectionLabel("width")]=`${e.virtualSize+b}px`),D&&e.grid.updateWrapperSize(O,y),!r.centeredSlides){const W=[];for(let U=0;U<y.length;U+=1){let H=y[U];r.roundLengths&&(H=Math.floor(H)),y[U]<=e.virtualSize-a&&W.push(H)}y=W,Math.floor(e.virtualSize-a)-Math.floor(y[y.length-1])>1&&y.push(e.virtualSize-a)}if(c&&r.loop){const W=E[0]+b;if(r.slidesPerGroup>1){const U=Math.ceil((e.virtual.slidesBefore+e.virtual.slidesAfter)/r.slidesPerGroup),H=W*r.slidesPerGroup;for(let K=0;K<U;K+=1)y.push(y[y.length-1]+H)}for(let U=0;U<e.virtual.slidesBefore+e.virtual.slidesAfter;U+=1)r.slidesPerGroup===1&&y.push(y[y.length-1]+W),P.push(P[P.length-1]+W),e.virtualSize+=W}if(y.length===0&&(y=[0]),b!==0){const W=e.isHorizontal()&&o?"marginLeft":e.getDirectionLabel("marginRight");g.filter((U,H)=>!r.cssMode||r.loop?!0:H!==g.length-1).forEach(U=>{U.style[W]=`${b}px`})}if(r.centeredSlides&&r.centeredSlidesBounds){let W=0;E.forEach(H=>{W+=H+(b||0)}),W-=b;const U=W-a;y=y.map(H=>H<=0?-T:H>U?U+M:H)}if(r.centerInsufficientSlides){let W=0;if(E.forEach(U=>{W+=U+(b||0)}),W-=b,W<a){const U=(a-W)/2;y.forEach((H,K)=>{y[K]=H-U}),P.forEach((H,K)=>{P[K]=H+U})}}if(Object.assign(e,{slides:g,snapGrid:y,slidesGrid:P,slidesSizesGrid:E}),r.centeredSlides&&r.cssMode&&!r.centeredSlidesBounds){setCSSProperty(i,"--swiper-centered-offset-before",`${-y[0]}px`),setCSSProperty(i,"--swiper-centered-offset-after",`${e.size/2-E[E.length-1]/2}px`);const W=-e.snapGrid[0],U=-e.slidesGrid[0];e.snapGrid=e.snapGrid.map(H=>H+W),e.slidesGrid=e.slidesGrid.map(H=>H+U)}if(x!==d&&e.emit("slidesLengthChange"),y.length!==C&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),P.length!==S&&e.emit("slidesGridLengthChange"),r.watchSlidesProgress&&e.updateSlidesOffset(),e.emit("slidesUpdated"),!c&&!r.cssMode&&(r.effect==="slide"||r.effect==="fade")){const W=`${r.containerModifierClass}backface-hidden`,U=e.el.classList.contains(W);x<=r.maxBackfaceHiddenSlides?U||e.el.classList.add(W):U&&e.el.classList.remove(W)}}function updateAutoHeight(e){const t=this,r=[],i=t.virtual&&t.params.virtual.enabled;let s=0,a;typeof e=="number"?t.setTransition(e):e===!0&&t.setTransition(t.params.speed);const o=u=>i?t.slides[t.getSlideIndexByData(u)]:t.slides[u];if(t.params.slidesPerView!=="auto"&&t.params.slidesPerView>1)if(t.params.centeredSlides)(t.visibleSlides||[]).forEach(u=>{r.push(u)});else for(a=0;a<Math.ceil(t.params.slidesPerView);a+=1){const u=t.activeIndex+a;if(u>t.slides.length&&!i)break;r.push(o(u))}else r.push(o(t.activeIndex));for(a=0;a<r.length;a+=1)if(typeof r[a]<"u"){const u=r[a].offsetHeight;s=u>s?u:s}(s||s===0)&&(t.wrapperEl.style.height=`${s}px`)}function updateSlidesOffset(){const e=this,t=e.slides,r=e.isElement?e.isHorizontal()?e.wrapperEl.offsetLeft:e.wrapperEl.offsetTop:0;for(let i=0;i<t.length;i+=1)t[i].swiperSlideOffset=(e.isHorizontal()?t[i].offsetLeft:t[i].offsetTop)-r-e.cssOverflowAdjustment()}function updateSlidesProgress(e){e===void 0&&(e=this&&this.translate||0);const t=this,r=t.params,{slides:i,rtlTranslate:s,snapGrid:a}=t;if(i.length===0)return;typeof i[0].swiperSlideOffset>"u"&&t.updateSlidesOffset();let o=-e;s&&(o=e),i.forEach(c=>{c.classList.remove(r.slideVisibleClass,r.slideFullyVisibleClass)}),t.visibleSlidesIndexes=[],t.visibleSlides=[];let u=r.spaceBetween;typeof u=="string"&&u.indexOf("%")>=0?u=parseFloat(u.replace("%",""))/100*t.size:typeof u=="string"&&(u=parseFloat(u));for(let c=0;c<i.length;c+=1){const d=i[c];let g=d.swiperSlideOffset;r.cssMode&&r.centeredSlides&&(g-=i[0].swiperSlideOffset);const x=(o+(r.centeredSlides?t.minTranslate():0)-g)/(d.swiperSlideSize+u),y=(o-a[0]+(r.centeredSlides?t.minTranslate():0)-g)/(d.swiperSlideSize+u),P=-(o-g),E=P+t.slidesSizesGrid[c],T=P>=0&&P<=t.size-t.slidesSizesGrid[c];(P>=0&&P<t.size-1||E>1&&E<=t.size||P<=0&&E>=t.size)&&(t.visibleSlides.push(d),t.visibleSlidesIndexes.push(c),i[c].classList.add(r.slideVisibleClass)),T&&i[c].classList.add(r.slideFullyVisibleClass),d.progress=s?-x:x,d.originalProgress=s?-y:y}}function updateProgress(e){const t=this;if(typeof e>"u"){const g=t.rtlTranslate?-1:1;e=t&&t.translate&&t.translate*g||0}const r=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:s,isBeginning:a,isEnd:o,progressLoop:u}=t;const c=a,d=o;if(i===0)s=0,a=!0,o=!0;else{s=(e-t.minTranslate())/i;const g=Math.abs(e-t.minTranslate())<1,x=Math.abs(e-t.maxTranslate())<1;a=g||s<=0,o=x||s>=1,g&&(s=0),x&&(s=1)}if(r.loop){const g=t.getSlideIndexByData(0),x=t.getSlideIndexByData(t.slides.length-1),y=t.slidesGrid[g],P=t.slidesGrid[x],E=t.slidesGrid[t.slidesGrid.length-1],T=Math.abs(e);T>=y?u=(T-y)/E:u=(T+E-P)/E,u>1&&(u-=1)}Object.assign(t,{progress:s,progressLoop:u,isBeginning:a,isEnd:o}),(r.watchSlidesProgress||r.centeredSlides&&r.autoHeight)&&t.updateSlidesProgress(e),a&&!c&&t.emit("reachBeginning toEdge"),o&&!d&&t.emit("reachEnd toEdge"),(c&&!a||d&&!o)&&t.emit("fromEdge"),t.emit("progress",s)}function updateSlidesClasses(){const e=this,{slides:t,params:r,slidesEl:i,activeIndex:s}=e,a=e.virtual&&r.virtual.enabled,o=e.grid&&r.grid&&r.grid.rows>1,u=x=>elementChildren(i,`.${r.slideClass}${x}, swiper-slide${x}`)[0];t.forEach(x=>{x.classList.remove(r.slideActiveClass,r.slideNextClass,r.slidePrevClass)});let c,d,g;if(a)if(r.loop){let x=s-e.virtual.slidesBefore;x<0&&(x=e.virtual.slides.length+x),x>=e.virtual.slides.length&&(x-=e.virtual.slides.length),c=u(`[data-swiper-slide-index="${x}"]`)}else c=u(`[data-swiper-slide-index="${s}"]`);else o?(c=t.filter(x=>x.column===s)[0],g=t.filter(x=>x.column===s+1)[0],d=t.filter(x=>x.column===s-1)[0]):c=t[s];c&&(c.classList.add(r.slideActiveClass),o?(g&&g.classList.add(r.slideNextClass),d&&d.classList.add(r.slidePrevClass)):(g=elementNextAll(c,`.${r.slideClass}, swiper-slide`)[0],r.loop&&!g&&(g=t[0]),g&&g.classList.add(r.slideNextClass),d=elementPrevAll(c,`.${r.slideClass}, swiper-slide`)[0],r.loop&&!d===0&&(d=t[t.length-1]),d&&d.classList.add(r.slidePrevClass))),e.emitSlidesClasses()}const processLazyPreloader=(e,t)=>{if(!e||e.destroyed||!e.params)return;const r=()=>e.isElement?"swiper-slide":`.${e.params.slideClass}`,i=t.closest(r());if(i){let s=i.querySelector(`.${e.params.lazyPreloaderClass}`);!s&&e.isElement&&(i.shadowRoot?s=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{i.shadowRoot&&(s=i.shadowRoot.querySelector(`.${e.params.lazyPreloaderClass}`),s&&s.remove())})),s&&s.remove()}},unlazy=(e,t)=>{if(!e.slides[t])return;const r=e.slides[t].querySelector('[loading="lazy"]');r&&r.removeAttribute("loading")},preload=e=>{if(!e||e.destroyed||!e.params)return;let t=e.params.lazyPreloadPrevNext;const r=e.slides.length;if(!r||!t||t<0)return;t=Math.min(t,r);const i=e.params.slidesPerView==="auto"?e.slidesPerViewDynamic():Math.ceil(e.params.slidesPerView),s=e.activeIndex;if(e.params.grid&&e.params.grid.rows>1){const o=s,u=[o-t];u.push(...Array.from({length:t}).map((c,d)=>o+i+d)),e.slides.forEach((c,d)=>{u.includes(c.column)&&unlazy(e,d)});return}const a=s+i-1;if(e.params.rewind||e.params.loop)for(let o=s-t;o<=a+t;o+=1){const u=(o%r+r)%r;(u<s||u>a)&&unlazy(e,u)}else for(let o=Math.max(s-t,0);o<=Math.min(a+t,r-1);o+=1)o!==s&&(o>a||o<s)&&unlazy(e,o)};function getActiveIndexByTranslate(e){const{slidesGrid:t,params:r}=e,i=e.rtlTranslate?e.translate:-e.translate;let s;for(let a=0;a<t.length;a+=1)typeof t[a+1]<"u"?i>=t[a]&&i<t[a+1]-(t[a+1]-t[a])/2?s=a:i>=t[a]&&i<t[a+1]&&(s=a+1):i>=t[a]&&(s=a);return r.normalizeSlideIndex&&(s<0||typeof s>"u")&&(s=0),s}function updateActiveIndex(e){const t=this,r=t.rtlTranslate?t.translate:-t.translate,{snapGrid:i,params:s,activeIndex:a,realIndex:o,snapIndex:u}=t;let c=e,d;const g=P=>{let E=P-t.virtual.slidesBefore;return E<0&&(E=t.virtual.slides.length+E),E>=t.virtual.slides.length&&(E-=t.virtual.slides.length),E};if(typeof c>"u"&&(c=getActiveIndexByTranslate(t)),i.indexOf(r)>=0)d=i.indexOf(r);else{const P=Math.min(s.slidesPerGroupSkip,c);d=P+Math.floor((c-P)/s.slidesPerGroup)}if(d>=i.length&&(d=i.length-1),c===a&&!t.params.loop){d!==u&&(t.snapIndex=d,t.emit("snapIndexChange"));return}if(c===a&&t.params.loop&&t.virtual&&t.params.virtual.enabled){t.realIndex=g(c);return}const x=t.grid&&s.grid&&s.grid.rows>1;let y;if(t.virtual&&s.virtual.enabled&&s.loop)y=g(c);else if(x){const P=t.slides.filter(T=>T.column===c)[0];let E=parseInt(P.getAttribute("data-swiper-slide-index"),10);Number.isNaN(E)&&(E=Math.max(t.slides.indexOf(P),0)),y=Math.floor(E/s.grid.rows)}else if(t.slides[c]){const P=t.slides[c].getAttribute("data-swiper-slide-index");P?y=parseInt(P,10):y=c}else y=c;Object.assign(t,{previousSnapIndex:u,snapIndex:d,previousRealIndex:o,realIndex:y,previousIndex:a,activeIndex:c}),t.initialized&&preload(t),t.emit("activeIndexChange"),t.emit("snapIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&(o!==y&&t.emit("realIndexChange"),t.emit("slideChange"))}function updateClickedSlide(e,t){const r=this,i=r.params;let s=e.closest(`.${i.slideClass}, swiper-slide`);!s&&r.isElement&&t&&t.length>1&&t.includes(e)&&[...t.slice(t.indexOf(e)+1,t.length)].forEach(u=>{!s&&u.matches&&u.matches(`.${i.slideClass}, swiper-slide`)&&(s=u)});let a=!1,o;if(s){for(let u=0;u<r.slides.length;u+=1)if(r.slides[u]===s){a=!0,o=u;break}}if(s&&a)r.clickedSlide=s,r.virtual&&r.params.virtual.enabled?r.clickedIndex=parseInt(s.getAttribute("data-swiper-slide-index"),10):r.clickedIndex=o;else{r.clickedSlide=void 0,r.clickedIndex=void 0;return}i.slideToClickedSlide&&r.clickedIndex!==void 0&&r.clickedIndex!==r.activeIndex&&r.slideToClickedSlide()}var update={updateSize,updateSlides,updateAutoHeight,updateSlidesOffset,updateSlidesProgress,updateProgress,updateSlidesClasses,updateActiveIndex,updateClickedSlide};function getSwiperTranslate(e){e===void 0&&(e=this.isHorizontal()?"x":"y");const t=this,{params:r,rtlTranslate:i,translate:s,wrapperEl:a}=t;if(r.virtualTranslate)return i?-s:s;if(r.cssMode)return s;let o=getTranslate(a,e);return o+=t.cssOverflowAdjustment(),i&&(o=-o),o||0}function setTranslate(e,t){const r=this,{rtlTranslate:i,params:s,wrapperEl:a,progress:o}=r;let u=0,c=0;const d=0;r.isHorizontal()?u=i?-e:e:c=e,s.roundLengths&&(u=Math.floor(u),c=Math.floor(c)),r.previousTranslate=r.translate,r.translate=r.isHorizontal()?u:c,s.cssMode?a[r.isHorizontal()?"scrollLeft":"scrollTop"]=r.isHorizontal()?-u:-c:s.virtualTranslate||(r.isHorizontal()?u-=r.cssOverflowAdjustment():c-=r.cssOverflowAdjustment(),a.style.transform=`translate3d(${u}px, ${c}px, ${d}px)`);let g;const x=r.maxTranslate()-r.minTranslate();x===0?g=0:g=(e-r.minTranslate())/x,g!==o&&r.updateProgress(e),r.emit("setTranslate",r.translate,t)}function minTranslate(){return-this.snapGrid[0]}function maxTranslate(){return-this.snapGrid[this.snapGrid.length-1]}function translateTo(e,t,r,i,s){e===void 0&&(e=0),t===void 0&&(t=this.params.speed),r===void 0&&(r=!0),i===void 0&&(i=!0);const a=this,{params:o,wrapperEl:u}=a;if(a.animating&&o.preventInteractionOnTransition)return!1;const c=a.minTranslate(),d=a.maxTranslate();let g;if(i&&e>c?g=c:i&&e<d?g=d:g=e,a.updateProgress(g),o.cssMode){const x=a.isHorizontal();if(t===0)u[x?"scrollLeft":"scrollTop"]=-g;else{if(!a.support.smoothScroll)return animateCSSModeScroll({swiper:a,targetPosition:-g,side:x?"left":"top"}),!0;u.scrollTo({[x?"left":"top"]:-g,behavior:"smooth"})}return!0}return t===0?(a.setTransition(0),a.setTranslate(g),r&&(a.emit("beforeTransitionStart",t,s),a.emit("transitionEnd"))):(a.setTransition(t),a.setTranslate(g),r&&(a.emit("beforeTransitionStart",t,s),a.emit("transitionStart")),a.animating||(a.animating=!0,a.onTranslateToWrapperTransitionEnd||(a.onTranslateToWrapperTransitionEnd=function(y){!a||a.destroyed||y.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onTranslateToWrapperTransitionEnd),a.onTranslateToWrapperTransitionEnd=null,delete a.onTranslateToWrapperTransitionEnd,r&&a.emit("transitionEnd"))}),a.wrapperEl.addEventListener("transitionend",a.onTranslateToWrapperTransitionEnd))),!0}var translate={getTranslate:getSwiperTranslate,setTranslate,minTranslate,maxTranslate,translateTo};function setTransition(e,t){const r=this;r.params.cssMode||(r.wrapperEl.style.transitionDuration=`${e}ms`,r.wrapperEl.style.transitionDelay=e===0?"0ms":""),r.emit("setTransition",e,t)}function transitionEmit(e){let{swiper:t,runCallbacks:r,direction:i,step:s}=e;const{activeIndex:a,previousIndex:o}=t;let u=i;if(u||(a>o?u="next":a<o?u="prev":u="reset"),t.emit(`transition${s}`),r&&a!==o){if(u==="reset"){t.emit(`slideResetTransition${s}`);return}t.emit(`slideChangeTransition${s}`),u==="next"?t.emit(`slideNextTransition${s}`):t.emit(`slidePrevTransition${s}`)}}function transitionStart(e,t){e===void 0&&(e=!0);const r=this,{params:i}=r;i.cssMode||(i.autoHeight&&r.updateAutoHeight(),transitionEmit({swiper:r,runCallbacks:e,direction:t,step:"Start"}))}function transitionEnd(e,t){e===void 0&&(e=!0);const r=this,{params:i}=r;r.animating=!1,!i.cssMode&&(r.setTransition(0),transitionEmit({swiper:r,runCallbacks:e,direction:t,step:"End"}))}var transition={setTransition,transitionStart,transitionEnd};function slideTo(e,t,r,i,s){e===void 0&&(e=0),t===void 0&&(t=this.params.speed),r===void 0&&(r=!0),typeof e=="string"&&(e=parseInt(e,10));const a=this;let o=e;o<0&&(o=0);const{params:u,snapGrid:c,slidesGrid:d,previousIndex:g,activeIndex:x,rtlTranslate:y,wrapperEl:P,enabled:E}=a;if(a.animating&&u.preventInteractionOnTransition||!E&&!i&&!s)return!1;const T=Math.min(a.params.slidesPerGroupSkip,o);let M=T+Math.floor((o-T)/a.params.slidesPerGroup);M>=c.length&&(M=c.length-1);const C=-c[M];if(u.normalizeSlideIndex)for(let b=0;b<d.length;b+=1){const A=-Math.floor(C*100),R=Math.floor(d[b]*100),I=Math.floor(d[b+1]*100);typeof d[b+1]<"u"?A>=R&&A<I-(I-R)/2?o=b:A>=R&&A<I&&(o=b+1):A>=R&&(o=b)}if(a.initialized&&o!==x&&(!a.allowSlideNext&&(y?C>a.translate&&C>a.minTranslate():C<a.translate&&C<a.minTranslate())||!a.allowSlidePrev&&C>a.translate&&C>a.maxTranslate()&&(x||0)!==o))return!1;o!==(g||0)&&r&&a.emit("beforeSlideChangeStart"),a.updateProgress(C);let S;if(o>x?S="next":o<x?S="prev":S="reset",y&&-C===a.translate||!y&&C===a.translate)return a.updateActiveIndex(o),u.autoHeight&&a.updateAutoHeight(),a.updateSlidesClasses(),u.effect!=="slide"&&a.setTranslate(C),S!=="reset"&&(a.transitionStart(r,S),a.transitionEnd(r,S)),!1;if(u.cssMode){const b=a.isHorizontal(),A=y?C:-C;if(t===0){const R=a.virtual&&a.params.virtual.enabled;R&&(a.wrapperEl.style.scrollSnapType="none",a._immediateVirtual=!0),R&&!a._cssModeVirtualInitialSet&&a.params.initialSlide>0?(a._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{P[b?"scrollLeft":"scrollTop"]=A})):P[b?"scrollLeft":"scrollTop"]=A,R&&requestAnimationFrame(()=>{a.wrapperEl.style.scrollSnapType="",a._immediateVirtual=!1})}else{if(!a.support.smoothScroll)return animateCSSModeScroll({swiper:a,targetPosition:A,side:b?"left":"top"}),!0;P.scrollTo({[b?"left":"top"]:A,behavior:"smooth"})}return!0}return a.setTransition(t),a.setTranslate(C),a.updateActiveIndex(o),a.updateSlidesClasses(),a.emit("beforeTransitionStart",t,i),a.transitionStart(r,S),t===0?a.transitionEnd(r,S):a.animating||(a.animating=!0,a.onSlideToWrapperTransitionEnd||(a.onSlideToWrapperTransitionEnd=function(A){!a||a.destroyed||A.target===this&&(a.wrapperEl.removeEventListener("transitionend",a.onSlideToWrapperTransitionEnd),a.onSlideToWrapperTransitionEnd=null,delete a.onSlideToWrapperTransitionEnd,a.transitionEnd(r,S))}),a.wrapperEl.addEventListener("transitionend",a.onSlideToWrapperTransitionEnd)),!0}function slideToLoop(e,t,r,i){e===void 0&&(e=0),t===void 0&&(t=this.params.speed),r===void 0&&(r=!0),typeof e=="string"&&(e=parseInt(e,10));const s=this,a=s.grid&&s.params.grid&&s.params.grid.rows>1;let o=e;if(s.params.loop)if(s.virtual&&s.params.virtual.enabled)o=o+s.virtual.slidesBefore;else{let u;if(a){const y=o*s.params.grid.rows;u=s.slides.filter(P=>P.getAttribute("data-swiper-slide-index")*1===y)[0].column}else u=s.getSlideIndexByData(o);const c=a?Math.ceil(s.slides.length/s.params.grid.rows):s.slides.length,{centeredSlides:d}=s.params;let g=s.params.slidesPerView;g==="auto"?g=s.slidesPerViewDynamic():(g=Math.ceil(parseFloat(s.params.slidesPerView,10)),d&&g%2===0&&(g=g+1));let x=c-u<g;if(d&&(x=x||u<Math.ceil(g/2)),x){const y=d?u<s.activeIndex?"prev":"next":u-s.activeIndex-1<s.params.slidesPerView?"next":"prev";s.loopFix({direction:y,slideTo:!0,activeSlideIndex:y==="next"?u+1:u-c+1,slideRealIndex:y==="next"?s.realIndex:void 0})}if(a){const y=o*s.params.grid.rows;o=s.slides.filter(P=>P.getAttribute("data-swiper-slide-index")*1===y)[0].column}else o=s.getSlideIndexByData(o)}return requestAnimationFrame(()=>{s.slideTo(o,t,r,i)}),s}function slideNext(e,t,r){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0);const i=this,{enabled:s,params:a,animating:o}=i;if(!s)return i;let u=a.slidesPerGroup;a.slidesPerView==="auto"&&a.slidesPerGroup===1&&a.slidesPerGroupAuto&&(u=Math.max(i.slidesPerViewDynamic("current",!0),1));const c=i.activeIndex<a.slidesPerGroupSkip?1:u,d=i.virtual&&a.virtual.enabled;if(a.loop){if(o&&!d&&a.loopPreventsSliding)return!1;if(i.loopFix({direction:"next"}),i._clientLeft=i.wrapperEl.clientLeft,i.activeIndex===i.slides.length-1&&a.cssMode)return requestAnimationFrame(()=>{i.slideTo(i.activeIndex+c,e,t,r)}),!0}return a.rewind&&i.isEnd?i.slideTo(0,e,t,r):i.slideTo(i.activeIndex+c,e,t,r)}function slidePrev(e,t,r){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0);const i=this,{params:s,snapGrid:a,slidesGrid:o,rtlTranslate:u,enabled:c,animating:d}=i;if(!c)return i;const g=i.virtual&&s.virtual.enabled;if(s.loop){if(d&&!g&&s.loopPreventsSliding)return!1;i.loopFix({direction:"prev"}),i._clientLeft=i.wrapperEl.clientLeft}const x=u?i.translate:-i.translate;function y(C){return C<0?-Math.floor(Math.abs(C)):Math.floor(C)}const P=y(x),E=a.map(C=>y(C));let T=a[E.indexOf(P)-1];if(typeof T>"u"&&s.cssMode){let C;a.forEach((S,b)=>{P>=S&&(C=b)}),typeof C<"u"&&(T=a[C>0?C-1:C])}let M=0;if(typeof T<"u"&&(M=o.indexOf(T),M<0&&(M=i.activeIndex-1),s.slidesPerView==="auto"&&s.slidesPerGroup===1&&s.slidesPerGroupAuto&&(M=M-i.slidesPerViewDynamic("previous",!0)+1,M=Math.max(M,0))),s.rewind&&i.isBeginning){const C=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1;return i.slideTo(C,e,t,r)}else if(s.loop&&i.activeIndex===0&&s.cssMode)return requestAnimationFrame(()=>{i.slideTo(M,e,t,r)}),!0;return i.slideTo(M,e,t,r)}function slideReset(e,t,r){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0);const i=this;return i.slideTo(i.activeIndex,e,t,r)}function slideToClosest(e,t,r,i){e===void 0&&(e=this.params.speed),t===void 0&&(t=!0),i===void 0&&(i=.5);const s=this;let a=s.activeIndex;const o=Math.min(s.params.slidesPerGroupSkip,a),u=o+Math.floor((a-o)/s.params.slidesPerGroup),c=s.rtlTranslate?s.translate:-s.translate;if(c>=s.snapGrid[u]){const d=s.snapGrid[u],g=s.snapGrid[u+1];c-d>(g-d)*i&&(a+=s.params.slidesPerGroup)}else{const d=s.snapGrid[u-1],g=s.snapGrid[u];c-d<=(g-d)*i&&(a-=s.params.slidesPerGroup)}return a=Math.max(a,0),a=Math.min(a,s.slidesGrid.length-1),s.slideTo(a,e,t,r)}function slideToClickedSlide(){const e=this,{params:t,slidesEl:r}=e,i=t.slidesPerView==="auto"?e.slidesPerViewDynamic():t.slidesPerView;let s=e.clickedIndex,a;const o=e.isElement?"swiper-slide":`.${t.slideClass}`;if(t.loop){if(e.animating)return;a=parseInt(e.clickedSlide.getAttribute("data-swiper-slide-index"),10),t.centeredSlides?s<e.loopedSlides-i/2||s>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),s=e.getSlideIndex(elementChildren(r,`${o}[data-swiper-slide-index="${a}"]`)[0]),nextTick(()=>{e.slideTo(s)})):e.slideTo(s):s>e.slides.length-i?(e.loopFix(),s=e.getSlideIndex(elementChildren(r,`${o}[data-swiper-slide-index="${a}"]`)[0]),nextTick(()=>{e.slideTo(s)})):e.slideTo(s)}else e.slideTo(s)}var slide={slideTo,slideToLoop,slideNext,slidePrev,slideReset,slideToClosest,slideToClickedSlide};function loopCreate(e){const t=this,{params:r,slidesEl:i}=t;if(!r.loop||t.virtual&&t.params.virtual.enabled)return;const s=()=>{elementChildren(i,`.${r.slideClass}, swiper-slide`).forEach((x,y)=>{x.setAttribute("data-swiper-slide-index",y)})},a=t.grid&&r.grid&&r.grid.rows>1,o=r.slidesPerGroup*(a?r.grid.rows:1),u=t.slides.length%o!==0,c=a&&t.slides.length%r.grid.rows!==0,d=g=>{for(let x=0;x<g;x+=1){const y=t.isElement?createElement("swiper-slide",[r.slideBlankClass]):createElement("div",[r.slideClass,r.slideBlankClass]);t.slidesEl.append(y)}};if(u){if(r.loopAddBlankSlides){const g=o-t.slides.length%o;d(g),t.recalcSlides(),t.updateSlides()}else showWarning("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else if(c){if(r.loopAddBlankSlides){const g=r.grid.rows-t.slides.length%r.grid.rows;d(g),t.recalcSlides(),t.updateSlides()}else showWarning("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");s()}else s();t.loopFix({slideRealIndex:e,direction:r.centeredSlides?void 0:"next"})}function loopFix(e){let{slideRealIndex:t,slideTo:r=!0,direction:i,setTranslate:s,activeSlideIndex:a,byController:o,byMousewheel:u}=e===void 0?{}:e;const c=this;if(!c.params.loop)return;c.emit("beforeLoopFix");const{slides:d,allowSlidePrev:g,allowSlideNext:x,slidesEl:y,params:P}=c,{centeredSlides:E}=P;if(c.allowSlidePrev=!0,c.allowSlideNext=!0,c.virtual&&P.virtual.enabled){r&&(!P.centeredSlides&&c.snapIndex===0?c.slideTo(c.virtual.slides.length,0,!1,!0):P.centeredSlides&&c.snapIndex<P.slidesPerView?c.slideTo(c.virtual.slides.length+c.snapIndex,0,!1,!0):c.snapIndex===c.snapGrid.length-1&&c.slideTo(c.virtual.slidesBefore,0,!1,!0)),c.allowSlidePrev=g,c.allowSlideNext=x,c.emit("loopFix");return}let T=P.slidesPerView;T==="auto"?T=c.slidesPerViewDynamic():(T=Math.ceil(parseFloat(P.slidesPerView,10)),E&&T%2===0&&(T=T+1));const M=P.slidesPerGroupAuto?T:P.slidesPerGroup;let C=M;C%M!==0&&(C+=M-C%M),C+=P.loopAdditionalSlides,c.loopedSlides=C;const S=c.grid&&P.grid&&P.grid.rows>1;d.length<T+C?showWarning("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):S&&P.grid.fill==="row"&&showWarning("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const b=[],A=[];let R=c.activeIndex;typeof a>"u"?a=c.getSlideIndex(d.filter(K=>K.classList.contains(P.slideActiveClass))[0]):R=a;const I=i==="next"||!i,D=i==="prev"||!i;let O=0,j=0;const W=S?Math.ceil(d.length/P.grid.rows):d.length,H=(S?d[a].column:a)+(E&&typeof s>"u"?-T/2+.5:0);if(H<C){O=Math.max(C-H,M);for(let K=0;K<C-H;K+=1){const $=K-Math.floor(K/W)*W;if(S){const N=W-$-1;for(let L=d.length-1;L>=0;L-=1)d[L].column===N&&b.push(L)}else b.push(W-$-1)}}else if(H+T>W-C){j=Math.max(H-(W-C*2),M);for(let K=0;K<j;K+=1){const $=K-Math.floor(K/W)*W;S?d.forEach((N,L)=>{N.column===$&&A.push(L)}):A.push($)}}if(c.__preventObserver__=!0,requestAnimationFrame(()=>{c.__preventObserver__=!1}),D&&b.forEach(K=>{d[K].swiperLoopMoveDOM=!0,y.prepend(d[K]),d[K].swiperLoopMoveDOM=!1}),I&&A.forEach(K=>{d[K].swiperLoopMoveDOM=!0,y.append(d[K]),d[K].swiperLoopMoveDOM=!1}),c.recalcSlides(),P.slidesPerView==="auto"?c.updateSlides():S&&(b.length>0&&D||A.length>0&&I)&&c.slides.forEach((K,$)=>{c.grid.updateSlide($,K,c.slides)}),P.watchSlidesProgress&&c.updateSlidesOffset(),r){if(b.length>0&&D){if(typeof t>"u"){const K=c.slidesGrid[R],N=c.slidesGrid[R+O]-K;u?c.setTranslate(c.translate-N):(c.slideTo(R+O,0,!1,!0),s&&(c.touchEventsData.startTranslate=c.touchEventsData.startTranslate-N,c.touchEventsData.currentTranslate=c.touchEventsData.currentTranslate-N))}else if(s){const K=S?b.length/P.grid.rows:b.length;c.slideTo(c.activeIndex+K,0,!1,!0),c.touchEventsData.currentTranslate=c.translate}}else if(A.length>0&&I)if(typeof t>"u"){const K=c.slidesGrid[R],N=c.slidesGrid[R-j]-K;u?c.setTranslate(c.translate-N):(c.slideTo(R-j,0,!1,!0),s&&(c.touchEventsData.startTranslate=c.touchEventsData.startTranslate-N,c.touchEventsData.currentTranslate=c.touchEventsData.currentTranslate-N))}else{const K=S?A.length/P.grid.rows:A.length;c.slideTo(c.activeIndex-K,0,!1,!0)}}if(c.allowSlidePrev=g,c.allowSlideNext=x,c.controller&&c.controller.control&&!o){const K={slideRealIndex:t,direction:i,setTranslate:s,activeSlideIndex:a,byController:!0};Array.isArray(c.controller.control)?c.controller.control.forEach($=>{!$.destroyed&&$.params.loop&&$.loopFix({...K,slideTo:$.params.slidesPerView===P.slidesPerView?r:!1})}):c.controller.control instanceof c.constructor&&c.controller.control.params.loop&&c.controller.control.loopFix({...K,slideTo:c.controller.control.params.slidesPerView===P.slidesPerView?r:!1})}c.emit("loopFix")}function loopDestroy(){const e=this,{params:t,slidesEl:r}=e;if(!t.loop||e.virtual&&e.params.virtual.enabled)return;e.recalcSlides();const i=[];e.slides.forEach(s=>{const a=typeof s.swiperSlideIndex>"u"?s.getAttribute("data-swiper-slide-index")*1:s.swiperSlideIndex;i[a]=s}),e.slides.forEach(s=>{s.removeAttribute("data-swiper-slide-index")}),i.forEach(s=>{r.append(s)}),e.recalcSlides(),e.slideTo(e.realIndex,0)}var loop={loopCreate,loopFix,loopDestroy};function setGrabCursor(e){const t=this;if(!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)return;const r=t.params.touchEventsTarget==="container"?t.el:t.wrapperEl;t.isElement&&(t.__preventObserver__=!0),r.style.cursor="move",r.style.cursor=e?"grabbing":"grab",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1})}function unsetGrabCursor(){const e=this;e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e.isElement&&(e.__preventObserver__=!0),e[e.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1}))}var grabCursor={setGrabCursor,unsetGrabCursor};function closestElement(e,t){t===void 0&&(t=this);function r(i){if(!i||i===getDocument()||i===getWindow())return null;i.assignedSlot&&(i=i.assignedSlot);const s=i.closest(e);return!s&&!i.getRootNode?null:s||r(i.getRootNode().host)}return r(t)}function preventEdgeSwipe(e,t,r){const i=getWindow(),{params:s}=e,a=s.edgeSwipeDetection,o=s.edgeSwipeThreshold;return a&&(r<=o||r>=i.innerWidth-o)?a==="prevent"?(t.preventDefault(),!0):!1:!0}function onTouchStart(e){const t=this,r=getDocument();let i=e;i.originalEvent&&(i=i.originalEvent);const s=t.touchEventsData;if(i.type==="pointerdown"){if(s.pointerId!==null&&s.pointerId!==i.pointerId)return;s.pointerId=i.pointerId}else i.type==="touchstart"&&i.targetTouches.length===1&&(s.touchId=i.targetTouches[0].identifier);if(i.type==="touchstart"){preventEdgeSwipe(t,i,i.targetTouches[0].pageX);return}const{params:a,touches:o,enabled:u}=t;if(!u||!a.simulateTouch&&i.pointerType==="mouse"||t.animating&&a.preventInteractionOnTransition)return;!t.animating&&a.cssMode&&a.loop&&t.loopFix();let c=i.target;if(a.touchEventsTarget==="wrapper"&&!t.wrapperEl.contains(c)||"which"in i&&i.which===3||"button"in i&&i.button>0||s.isTouched&&s.isMoved)return;const d=!!a.noSwipingClass&&a.noSwipingClass!=="",g=i.composedPath?i.composedPath():i.path;d&&i.target&&i.target.shadowRoot&&g&&(c=g[0]);const x=a.noSwipingSelector?a.noSwipingSelector:`.${a.noSwipingClass}`,y=!!(i.target&&i.target.shadowRoot);if(a.noSwiping&&(y?closestElement(x,c):c.closest(x))){t.allowClick=!0;return}if(a.swipeHandler&&!c.closest(a.swipeHandler))return;o.currentX=i.pageX,o.currentY=i.pageY;const P=o.currentX,E=o.currentY;if(!preventEdgeSwipe(t,i,P))return;Object.assign(s,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=P,o.startY=E,s.touchStartTime=now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,a.threshold>0&&(s.allowThresholdMove=!1);let T=!0;c.matches(s.focusableElements)&&(T=!1,c.nodeName==="SELECT"&&(s.isTouched=!1)),r.activeElement&&r.activeElement.matches(s.focusableElements)&&r.activeElement!==c&&r.activeElement.blur();const M=T&&t.allowTouchMove&&a.touchStartPreventDefault;(a.touchStartForcePreventDefault||M)&&!c.isContentEditable&&i.preventDefault(),a.freeMode&&a.freeMode.enabled&&t.freeMode&&t.animating&&!a.cssMode&&t.freeMode.onTouchStart(),t.emit("touchStart",i)}function onTouchMove(e){const t=getDocument(),r=this,i=r.touchEventsData,{params:s,touches:a,rtlTranslate:o,enabled:u}=r;if(!u||!s.simulateTouch&&e.pointerType==="mouse")return;let c=e;if(c.originalEvent&&(c=c.originalEvent),c.type==="pointermove"&&(i.touchId!==null||c.pointerId!==i.pointerId))return;let d;if(c.type==="touchmove"){if(d=[...c.changedTouches].filter(I=>I.identifier===i.touchId)[0],!d||d.identifier!==i.touchId)return}else d=c;if(!i.isTouched){i.startMoving&&i.isScrolling&&r.emit("touchMoveOpposite",c);return}const g=d.pageX,x=d.pageY;if(c.preventedByNestedSwiper){a.startX=g,a.startY=x;return}if(!r.allowTouchMove){c.target.matches(i.focusableElements)||(r.allowClick=!1),i.isTouched&&(Object.assign(a,{startX:g,startY:x,currentX:g,currentY:x}),i.touchStartTime=now());return}if(s.touchReleaseOnEdges&&!s.loop){if(r.isVertical()){if(x<a.startY&&r.translate<=r.maxTranslate()||x>a.startY&&r.translate>=r.minTranslate()){i.isTouched=!1,i.isMoved=!1;return}}else if(g<a.startX&&r.translate<=r.maxTranslate()||g>a.startX&&r.translate>=r.minTranslate())return}if(t.activeElement&&c.target===t.activeElement&&c.target.matches(i.focusableElements)){i.isMoved=!0,r.allowClick=!1;return}i.allowTouchCallbacks&&r.emit("touchMove",c),a.previousX=a.currentX,a.previousY=a.currentY,a.currentX=g,a.currentY=x;const y=a.currentX-a.startX,P=a.currentY-a.startY;if(r.params.threshold&&Math.sqrt(y**2+P**2)<r.params.threshold)return;if(typeof i.isScrolling>"u"){let I;r.isHorizontal()&&a.currentY===a.startY||r.isVertical()&&a.currentX===a.startX?i.isScrolling=!1:y*y+P*P>=25&&(I=Math.atan2(Math.abs(P),Math.abs(y))*180/Math.PI,i.isScrolling=r.isHorizontal()?I>s.touchAngle:90-I>s.touchAngle)}if(i.isScrolling&&r.emit("touchMoveOpposite",c),typeof i.startMoving>"u"&&(a.currentX!==a.startX||a.currentY!==a.startY)&&(i.startMoving=!0),i.isScrolling){i.isTouched=!1;return}if(!i.startMoving)return;r.allowClick=!1,!s.cssMode&&c.cancelable&&c.preventDefault(),s.touchMoveStopPropagation&&!s.nested&&c.stopPropagation();let E=r.isHorizontal()?y:P,T=r.isHorizontal()?a.currentX-a.previousX:a.currentY-a.previousY;s.oneWayMovement&&(E=Math.abs(E)*(o?1:-1),T=Math.abs(T)*(o?1:-1)),a.diff=E,E*=s.touchRatio,o&&(E=-E,T=-T);const M=r.touchesDirection;r.swipeDirection=E>0?"prev":"next",r.touchesDirection=T>0?"prev":"next";const C=r.params.loop&&!s.cssMode,S=r.touchesDirection==="next"&&r.allowSlideNext||r.touchesDirection==="prev"&&r.allowSlidePrev;if(!i.isMoved){if(C&&S&&r.loopFix({direction:r.swipeDirection}),i.startTranslate=r.getTranslate(),r.setTransition(0),r.animating){const I=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});r.wrapperEl.dispatchEvent(I)}i.allowMomentumBounce=!1,s.grabCursor&&(r.allowSlideNext===!0||r.allowSlidePrev===!0)&&r.setGrabCursor(!0),r.emit("sliderFirstMove",c)}let b;if(new Date().getTime(),i.isMoved&&i.allowThresholdMove&&M!==r.touchesDirection&&C&&S&&Math.abs(E)>=1){Object.assign(a,{startX:g,startY:x,currentX:g,currentY:x,startTranslate:i.currentTranslate}),i.loopSwapReset=!0,i.startTranslate=i.currentTranslate;return}r.emit("sliderMove",c),i.isMoved=!0,i.currentTranslate=E+i.startTranslate;let A=!0,R=s.resistanceRatio;if(s.touchReleaseOnEdges&&(R=0),E>0?(C&&S&&!b&&i.allowThresholdMove&&i.currentTranslate>(s.centeredSlides?r.minTranslate()-r.slidesSizesGrid[r.activeIndex+1]:r.minTranslate())&&r.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),i.currentTranslate>r.minTranslate()&&(A=!1,s.resistance&&(i.currentTranslate=r.minTranslate()-1+(-r.minTranslate()+i.startTranslate+E)**R))):E<0&&(C&&S&&!b&&i.allowThresholdMove&&i.currentTranslate<(s.centeredSlides?r.maxTranslate()+r.slidesSizesGrid[r.slidesSizesGrid.length-1]:r.maxTranslate())&&r.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:r.slides.length-(s.slidesPerView==="auto"?r.slidesPerViewDynamic():Math.ceil(parseFloat(s.slidesPerView,10)))}),i.currentTranslate<r.maxTranslate()&&(A=!1,s.resistance&&(i.currentTranslate=r.maxTranslate()+1-(r.maxTranslate()-i.startTranslate-E)**R))),A&&(c.preventedByNestedSwiper=!0),!r.allowSlideNext&&r.swipeDirection==="next"&&i.currentTranslate<i.startTranslate&&(i.currentTranslate=i.startTranslate),!r.allowSlidePrev&&r.swipeDirection==="prev"&&i.currentTranslate>i.startTranslate&&(i.currentTranslate=i.startTranslate),!r.allowSlidePrev&&!r.allowSlideNext&&(i.currentTranslate=i.startTranslate),s.threshold>0)if(Math.abs(E)>s.threshold||i.allowThresholdMove){if(!i.allowThresholdMove){i.allowThresholdMove=!0,a.startX=a.currentX,a.startY=a.currentY,i.currentTranslate=i.startTranslate,a.diff=r.isHorizontal()?a.currentX-a.startX:a.currentY-a.startY;return}}else{i.currentTranslate=i.startTranslate;return}!s.followFinger||s.cssMode||((s.freeMode&&s.freeMode.enabled&&r.freeMode||s.watchSlidesProgress)&&(r.updateActiveIndex(),r.updateSlidesClasses()),s.freeMode&&s.freeMode.enabled&&r.freeMode&&r.freeMode.onTouchMove(),r.updateProgress(i.currentTranslate),r.setTranslate(i.currentTranslate))}function onTouchEnd(e){const t=this,r=t.touchEventsData;let i=e;i.originalEvent&&(i=i.originalEvent);let s;if(i.type==="touchend"||i.type==="touchcancel"){if(s=[...i.changedTouches].filter(R=>R.identifier===r.touchId)[0],!s||s.identifier!==r.touchId)return}else{if(r.touchId!==null||i.pointerId!==r.pointerId)return;s=i}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(i.type)&&!(["pointercancel","contextmenu"].includes(i.type)&&(t.browser.isSafari||t.browser.isWebView)))return;r.pointerId=null,r.touchId=null;const{params:o,touches:u,rtlTranslate:c,slidesGrid:d,enabled:g}=t;if(!g||!o.simulateTouch&&i.pointerType==="mouse")return;if(r.allowTouchCallbacks&&t.emit("touchEnd",i),r.allowTouchCallbacks=!1,!r.isTouched){r.isMoved&&o.grabCursor&&t.setGrabCursor(!1),r.isMoved=!1,r.startMoving=!1;return}o.grabCursor&&r.isMoved&&r.isTouched&&(t.allowSlideNext===!0||t.allowSlidePrev===!0)&&t.setGrabCursor(!1);const x=now(),y=x-r.touchStartTime;if(t.allowClick){const R=i.path||i.composedPath&&i.composedPath();t.updateClickedSlide(R&&R[0]||i.target,R),t.emit("tap click",i),y<300&&x-r.lastClickTime<300&&t.emit("doubleTap doubleClick",i)}if(r.lastClickTime=now(),nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!r.isTouched||!r.isMoved||!t.swipeDirection||u.diff===0&&!r.loopSwapReset||r.currentTranslate===r.startTranslate&&!r.loopSwapReset){r.isTouched=!1,r.isMoved=!1,r.startMoving=!1;return}r.isTouched=!1,r.isMoved=!1,r.startMoving=!1;let P;if(o.followFinger?P=c?t.translate:-t.translate:P=-r.currentTranslate,o.cssMode)return;if(o.freeMode&&o.freeMode.enabled){t.freeMode.onTouchEnd({currentPos:P});return}const E=P>=-t.maxTranslate()&&!t.params.loop;let T=0,M=t.slidesSizesGrid[0];for(let R=0;R<d.length;R+=R<o.slidesPerGroupSkip?1:o.slidesPerGroup){const I=R<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;typeof d[R+I]<"u"?(E||P>=d[R]&&P<d[R+I])&&(T=R,M=d[R+I]-d[R]):(E||P>=d[R])&&(T=R,M=d[d.length-1]-d[d.length-2])}let C=null,S=null;o.rewind&&(t.isBeginning?S=o.virtual&&o.virtual.enabled&&t.virtual?t.virtual.slides.length-1:t.slides.length-1:t.isEnd&&(C=0));const b=(P-d[T])/M,A=T<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;if(y>o.longSwipesMs){if(!o.longSwipes){t.slideTo(t.activeIndex);return}t.swipeDirection==="next"&&(b>=o.longSwipesRatio?t.slideTo(o.rewind&&t.isEnd?C:T+A):t.slideTo(T)),t.swipeDirection==="prev"&&(b>1-o.longSwipesRatio?t.slideTo(T+A):S!==null&&b<0&&Math.abs(b)>o.longSwipesRatio?t.slideTo(S):t.slideTo(T))}else{if(!o.shortSwipes){t.slideTo(t.activeIndex);return}t.navigation&&(i.target===t.navigation.nextEl||i.target===t.navigation.prevEl)?i.target===t.navigation.nextEl?t.slideTo(T+A):t.slideTo(T):(t.swipeDirection==="next"&&t.slideTo(C!==null?C:T+A),t.swipeDirection==="prev"&&t.slideTo(S!==null?S:T))}}function onResize(){const e=this,{params:t,el:r}=e;if(r&&r.offsetWidth===0)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:s,snapGrid:a}=e,o=e.virtual&&e.params.virtual.enabled;e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),e.updateSlidesClasses();const u=o&&t.loop;(t.slidesPerView==="auto"||t.slidesPerView>1)&&e.isEnd&&!e.isBeginning&&!e.params.centeredSlides&&!u?e.slideTo(e.slides.length-1,0,!1,!0):e.params.loop&&!o?e.slideToLoop(e.realIndex,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),e.autoplay&&e.autoplay.running&&e.autoplay.paused&&(clearTimeout(e.autoplay.resizeTimeout),e.autoplay.resizeTimeout=setTimeout(()=>{e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.resume()},500)),e.allowSlidePrev=s,e.allowSlideNext=i,e.params.watchOverflow&&a!==e.snapGrid&&e.checkOverflow()}function onClick(e){const t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}function onScroll(){const e=this,{wrapperEl:t,rtlTranslate:r,enabled:i}=e;if(!i)return;e.previousTranslate=e.translate,e.isHorizontal()?e.translate=-t.scrollLeft:e.translate=-t.scrollTop,e.translate===0&&(e.translate=0),e.updateActiveIndex(),e.updateSlidesClasses();let s;const a=e.maxTranslate()-e.minTranslate();a===0?s=0:s=(e.translate-e.minTranslate())/a,s!==e.progress&&e.updateProgress(r?-e.translate:e.translate),e.emit("setTranslate",e.translate,!1)}function onLoad(e){const t=this;processLazyPreloader(t,e.target),!(t.params.cssMode||t.params.slidesPerView!=="auto"&&!t.params.autoHeight)&&t.update()}function onDocumentTouchStart(){const e=this;e.documentTouchHandlerProceeded||(e.documentTouchHandlerProceeded=!0,e.params.touchReleaseOnEdges&&(e.el.style.touchAction="auto"))}const events=(e,t)=>{const r=getDocument(),{params:i,el:s,wrapperEl:a,device:o}=e,u=!!i.nested,c=t==="on"?"addEventListener":"removeEventListener",d=t;r[c]("touchstart",e.onDocumentTouchStart,{passive:!1,capture:u}),s[c]("touchstart",e.onTouchStart,{passive:!1}),s[c]("pointerdown",e.onTouchStart,{passive:!1}),r[c]("touchmove",e.onTouchMove,{passive:!1,capture:u}),r[c]("pointermove",e.onTouchMove,{passive:!1,capture:u}),r[c]("touchend",e.onTouchEnd,{passive:!0}),r[c]("pointerup",e.onTouchEnd,{passive:!0}),r[c]("pointercancel",e.onTouchEnd,{passive:!0}),r[c]("touchcancel",e.onTouchEnd,{passive:!0}),r[c]("pointerout",e.onTouchEnd,{passive:!0}),r[c]("pointerleave",e.onTouchEnd,{passive:!0}),r[c]("contextmenu",e.onTouchEnd,{passive:!0}),(i.preventClicks||i.preventClicksPropagation)&&s[c]("click",e.onClick,!0),i.cssMode&&a[c]("scroll",e.onScroll),i.updateOnWindowResize?e[d](o.ios||o.android?"resize orientationchange observerUpdate":"resize observerUpdate",onResize,!0):e[d]("observerUpdate",onResize,!0),s[c]("load",e.onLoad,{capture:!0})};function attachEvents(){const e=this,{params:t}=e;e.onTouchStart=onTouchStart.bind(e),e.onTouchMove=onTouchMove.bind(e),e.onTouchEnd=onTouchEnd.bind(e),e.onDocumentTouchStart=onDocumentTouchStart.bind(e),t.cssMode&&(e.onScroll=onScroll.bind(e)),e.onClick=onClick.bind(e),e.onLoad=onLoad.bind(e),events(e,"on")}function detachEvents(){events(this,"off")}var events$1={attachEvents,detachEvents};const isGridEnabled=(e,t)=>e.grid&&t.grid&&t.grid.rows>1;function setBreakpoint(){const e=this,{realIndex:t,initialized:r,params:i,el:s}=e,a=i.breakpoints;if(!a||a&&Object.keys(a).length===0)return;const o=e.getBreakpoint(a,e.params.breakpointsBase,e.el);if(!o||e.currentBreakpoint===o)return;const c=(o in a?a[o]:void 0)||e.originalParams,d=isGridEnabled(e,i),g=isGridEnabled(e,c),x=i.enabled;d&&!g?(s.classList.remove(`${i.containerModifierClass}grid`,`${i.containerModifierClass}grid-column`),e.emitContainerClasses()):!d&&g&&(s.classList.add(`${i.containerModifierClass}grid`),(c.grid.fill&&c.grid.fill==="column"||!c.grid.fill&&i.grid.fill==="column")&&s.classList.add(`${i.containerModifierClass}grid-column`),e.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach(C=>{if(typeof c[C]>"u")return;const S=i[C]&&i[C].enabled,b=c[C]&&c[C].enabled;S&&!b&&e[C].disable(),!S&&b&&e[C].enable()});const y=c.direction&&c.direction!==i.direction,P=i.loop&&(c.slidesPerView!==i.slidesPerView||y),E=i.loop;y&&r&&e.changeDirection(),extend$1(e.params,c);const T=e.params.enabled,M=e.params.loop;Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),x&&!T?e.disable():!x&&T&&e.enable(),e.currentBreakpoint=o,e.emit("_beforeBreakpoint",c),r&&(P?(e.loopDestroy(),e.loopCreate(t),e.updateSlides()):!E&&M?(e.loopCreate(t),e.updateSlides()):E&&!M&&e.loopDestroy()),e.emit("breakpoint",c)}function getBreakpoint(e,t,r){if(t===void 0&&(t="window"),!e||t==="container"&&!r)return;let i=!1;const s=getWindow(),a=t==="window"?s.innerHeight:r.clientHeight,o=Object.keys(e).map(u=>{if(typeof u=="string"&&u.indexOf("@")===0){const c=parseFloat(u.substr(1));return{value:a*c,point:u}}return{value:u,point:u}});o.sort((u,c)=>parseInt(u.value,10)-parseInt(c.value,10));for(let u=0;u<o.length;u+=1){const{point:c,value:d}=o[u];t==="window"?s.matchMedia(`(min-width: ${d}px)`).matches&&(i=c):d<=r.clientWidth&&(i=c)}return i||"max"}var breakpoints={setBreakpoint,getBreakpoint};function prepareClasses(e,t){const r=[];return e.forEach(i=>{typeof i=="object"?Object.keys(i).forEach(s=>{i[s]&&r.push(t+s)}):typeof i=="string"&&r.push(t+i)}),r}function addClasses(){const e=this,{classNames:t,params:r,rtl:i,el:s,device:a}=e,o=prepareClasses(["initialized",r.direction,{"free-mode":e.params.freeMode&&r.freeMode.enabled},{autoheight:r.autoHeight},{rtl:i},{grid:r.grid&&r.grid.rows>1},{"grid-column":r.grid&&r.grid.rows>1&&r.grid.fill==="column"},{android:a.android},{ios:a.ios},{"css-mode":r.cssMode},{centered:r.cssMode&&r.centeredSlides},{"watch-progress":r.watchSlidesProgress}],r.containerModifierClass);t.push(...o),s.classList.add(...t),e.emitContainerClasses()}function removeClasses(){const e=this,{el:t,classNames:r}=e;t.classList.remove(...r),e.emitContainerClasses()}var classes={addClasses,removeClasses};function checkOverflow(){const e=this,{isLocked:t,params:r}=e,{slidesOffsetBefore:i}=r;if(i){const s=e.slides.length-1,a=e.slidesGrid[s]+e.slidesSizesGrid[s]+i*2;e.isLocked=e.size>a}else e.isLocked=e.snapGrid.length===1;r.allowSlideNext===!0&&(e.allowSlideNext=!e.isLocked),r.allowSlidePrev===!0&&(e.allowSlidePrev=!e.isLocked),t&&t!==e.isLocked&&(e.isEnd=!1),t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock")}var checkOverflow$1={checkOverflow},defaults={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function moduleExtendParams(e,t){return function(i){i===void 0&&(i={});const s=Object.keys(i)[0],a=i[s];if(typeof a!="object"||a===null){extend$1(t,i);return}if(e[s]===!0&&(e[s]={enabled:!0}),s==="navigation"&&e[s]&&e[s].enabled&&!e[s].prevEl&&!e[s].nextEl&&(e[s].auto=!0),["pagination","scrollbar"].indexOf(s)>=0&&e[s]&&e[s].enabled&&!e[s].el&&(e[s].auto=!0),!(s in e&&"enabled"in a)){extend$1(t,i);return}typeof e[s]=="object"&&!("enabled"in e[s])&&(e[s].enabled=!0),e[s]||(e[s]={enabled:!1}),extend$1(t,i)}}const prototypes={eventsEmitter,update,translate,transition,slide,loop,grabCursor,events:events$1,breakpoints,checkOverflow:checkOverflow$1,classes},extendedDefaults={};let Swiper$1=class Oe{constructor(){let t,r;for(var i=arguments.length,s=new Array(i),a=0;a<i;a++)s[a]=arguments[a];s.length===1&&s[0].constructor&&Object.prototype.toString.call(s[0]).slice(8,-1)==="Object"?r=s[0]:[t,r]=s,r||(r={}),r=extend$1({},r),t&&!r.el&&(r.el=t);const o=getDocument();if(r.el&&typeof r.el=="string"&&o.querySelectorAll(r.el).length>1){const g=[];return o.querySelectorAll(r.el).forEach(x=>{const y=extend$1({},r,{el:x});g.push(new Oe(y))}),g}const u=this;u.__swiper__=!0,u.support=getSupport(),u.device=getDevice({userAgent:r.userAgent}),u.browser=getBrowser(),u.eventsListeners={},u.eventsAnyListeners=[],u.modules=[...u.__modules__],r.modules&&Array.isArray(r.modules)&&u.modules.push(...r.modules);const c={};u.modules.forEach(g=>{g({params:r,swiper:u,extendParams:moduleExtendParams(r,c),on:u.on.bind(u),once:u.once.bind(u),off:u.off.bind(u),emit:u.emit.bind(u)})});const d=extend$1({},defaults,c);return u.params=extend$1({},d,extendedDefaults,r),u.originalParams=extend$1({},u.params),u.passedParams=extend$1({},r),u.params&&u.params.on&&Object.keys(u.params.on).forEach(g=>{u.on(g,u.params.on[g])}),u.params&&u.params.onAny&&u.onAny(u.params.onAny),Object.assign(u,{enabled:u.params.enabled,el:t,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return u.params.direction==="horizontal"},isVertical(){return u.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:u.params.allowSlideNext,allowSlidePrev:u.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:u.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:u.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),u.emit("_swiper"),u.params.init&&u.init(),u}getDirectionLabel(t){return this.isHorizontal()?t:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[t]}getSlideIndex(t){const{slidesEl:r,params:i}=this,s=elementChildren(r,`.${i.slideClass}, swiper-slide`),a=elementIndex(s[0]);return elementIndex(t)-a}getSlideIndexByData(t){return this.getSlideIndex(this.slides.filter(r=>r.getAttribute("data-swiper-slide-index")*1===t)[0])}recalcSlides(){const t=this,{slidesEl:r,params:i}=t;t.slides=elementChildren(r,`.${i.slideClass}, swiper-slide`)}enable(){const t=this;t.enabled||(t.enabled=!0,t.params.grabCursor&&t.setGrabCursor(),t.emit("enable"))}disable(){const t=this;t.enabled&&(t.enabled=!1,t.params.grabCursor&&t.unsetGrabCursor(),t.emit("disable"))}setProgress(t,r){const i=this;t=Math.min(Math.max(t,0),1);const s=i.minTranslate(),o=(i.maxTranslate()-s)*t+s;i.translateTo(o,typeof r>"u"?0:r),i.updateActiveIndex(),i.updateSlidesClasses()}emitContainerClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const r=t.el.className.split(" ").filter(i=>i.indexOf("swiper")===0||i.indexOf(t.params.containerModifierClass)===0);t.emit("_containerClasses",r.join(" "))}getSlideClasses(t){const r=this;return r.destroyed?"":t.className.split(" ").filter(i=>i.indexOf("swiper-slide")===0||i.indexOf(r.params.slideClass)===0).join(" ")}emitSlidesClasses(){const t=this;if(!t.params._emitClasses||!t.el)return;const r=[];t.slides.forEach(i=>{const s=t.getSlideClasses(i);r.push({slideEl:i,classNames:s}),t.emit("_slideClass",i,s)}),t.emit("_slideClasses",r)}slidesPerViewDynamic(t,r){t===void 0&&(t="current"),r===void 0&&(r=!1);const i=this,{params:s,slides:a,slidesGrid:o,slidesSizesGrid:u,size:c,activeIndex:d}=i;let g=1;if(typeof s.slidesPerView=="number")return s.slidesPerView;if(s.centeredSlides){let x=a[d]?a[d].swiperSlideSize:0,y;for(let P=d+1;P<a.length;P+=1)a[P]&&!y&&(x+=a[P].swiperSlideSize,g+=1,x>c&&(y=!0));for(let P=d-1;P>=0;P-=1)a[P]&&!y&&(x+=a[P].swiperSlideSize,g+=1,x>c&&(y=!0))}else if(t==="current")for(let x=d+1;x<a.length;x+=1)(r?o[x]+u[x]-o[d]<c:o[x]-o[d]<c)&&(g+=1);else for(let x=d-1;x>=0;x-=1)o[d]-o[x]<c&&(g+=1);return g}update(){const t=this;if(!t||t.destroyed)return;const{snapGrid:r,params:i}=t;i.breakpoints&&t.setBreakpoint(),[...t.el.querySelectorAll('[loading="lazy"]')].forEach(o=>{o.complete&&processLazyPreloader(t,o)}),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses();function s(){const o=t.rtlTranslate?t.translate*-1:t.translate,u=Math.min(Math.max(o,t.maxTranslate()),t.minTranslate());t.setTranslate(u),t.updateActiveIndex(),t.updateSlidesClasses()}let a;if(i.freeMode&&i.freeMode.enabled&&!i.cssMode)s(),i.autoHeight&&t.updateAutoHeight();else{if((i.slidesPerView==="auto"||i.slidesPerView>1)&&t.isEnd&&!i.centeredSlides){const o=t.virtual&&i.virtual.enabled?t.virtual.slides:t.slides;a=t.slideTo(o.length-1,0,!1,!0)}else a=t.slideTo(t.activeIndex,0,!1,!0);a||s()}i.watchOverflow&&r!==t.snapGrid&&t.checkOverflow(),t.emit("update")}changeDirection(t,r){r===void 0&&(r=!0);const i=this,s=i.params.direction;return t||(t=s==="horizontal"?"vertical":"horizontal"),t===s||t!=="horizontal"&&t!=="vertical"||(i.el.classList.remove(`${i.params.containerModifierClass}${s}`),i.el.classList.add(`${i.params.containerModifierClass}${t}`),i.emitContainerClasses(),i.params.direction=t,i.slides.forEach(a=>{t==="vertical"?a.style.width="":a.style.height=""}),i.emit("changeDirection"),r&&i.update()),i}changeLanguageDirection(t){const r=this;r.rtl&&t==="rtl"||!r.rtl&&t==="ltr"||(r.rtl=t==="rtl",r.rtlTranslate=r.params.direction==="horizontal"&&r.rtl,r.rtl?(r.el.classList.add(`${r.params.containerModifierClass}rtl`),r.el.dir="rtl"):(r.el.classList.remove(`${r.params.containerModifierClass}rtl`),r.el.dir="ltr"),r.update())}mount(t){const r=this;if(r.mounted)return!0;let i=t||r.params.el;if(typeof i=="string"&&(i=document.querySelector(i)),!i)return!1;i.swiper=r,i.parentNode&&i.parentNode.host&&i.parentNode.host.nodeName==="SWIPER-CONTAINER"&&(r.isElement=!0);const s=()=>`.${(r.params.wrapperClass||"").trim().split(" ").join(".")}`;let o=(()=>i&&i.shadowRoot&&i.shadowRoot.querySelector?i.shadowRoot.querySelector(s()):elementChildren(i,s())[0])();return!o&&r.params.createElements&&(o=createElement("div",r.params.wrapperClass),i.append(o),elementChildren(i,`.${r.params.slideClass}`).forEach(u=>{o.append(u)})),Object.assign(r,{el:i,wrapperEl:o,slidesEl:r.isElement&&!i.parentNode.host.slideSlots?i.parentNode.host:o,hostEl:r.isElement?i.parentNode.host:i,mounted:!0,rtl:i.dir.toLowerCase()==="rtl"||elementStyle(i,"direction")==="rtl",rtlTranslate:r.params.direction==="horizontal"&&(i.dir.toLowerCase()==="rtl"||elementStyle(i,"direction")==="rtl"),wrongRTL:elementStyle(o,"display")==="-webkit-box"}),!0}init(t){const r=this;if(r.initialized||r.mount(t)===!1)return r;r.emit("beforeInit"),r.params.breakpoints&&r.setBreakpoint(),r.addClasses(),r.updateSize(),r.updateSlides(),r.params.watchOverflow&&r.checkOverflow(),r.params.grabCursor&&r.enabled&&r.setGrabCursor(),r.params.loop&&r.virtual&&r.params.virtual.enabled?r.slideTo(r.params.initialSlide+r.virtual.slidesBefore,0,r.params.runCallbacksOnInit,!1,!0):r.slideTo(r.params.initialSlide,0,r.params.runCallbacksOnInit,!1,!0),r.params.loop&&r.loopCreate(),r.attachEvents();const s=[...r.el.querySelectorAll('[loading="lazy"]')];return r.isElement&&s.push(...r.hostEl.querySelectorAll('[loading="lazy"]')),s.forEach(a=>{a.complete?processLazyPreloader(r,a):a.addEventListener("load",o=>{processLazyPreloader(r,o.target)})}),preload(r),r.initialized=!0,preload(r),r.emit("init"),r.emit("afterInit"),r}destroy(t,r){t===void 0&&(t=!0),r===void 0&&(r=!0);const i=this,{params:s,el:a,wrapperEl:o,slides:u}=i;return typeof i.params>"u"||i.destroyed||(i.emit("beforeDestroy"),i.initialized=!1,i.detachEvents(),s.loop&&i.loopDestroy(),r&&(i.removeClasses(),a.removeAttribute("style"),o.removeAttribute("style"),u&&u.length&&u.forEach(c=>{c.classList.remove(s.slideVisibleClass,s.slideFullyVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass),c.removeAttribute("style"),c.removeAttribute("data-swiper-slide-index")})),i.emit("destroy"),Object.keys(i.eventsListeners).forEach(c=>{i.off(c)}),t!==!1&&(i.el.swiper=null,deleteProps(i)),i.destroyed=!0),null}static extendDefaults(t){extend$1(extendedDefaults,t)}static get extendedDefaults(){return extendedDefaults}static get defaults(){return defaults}static installModule(t){Oe.prototype.__modules__||(Oe.prototype.__modules__=[]);const r=Oe.prototype.__modules__;typeof t=="function"&&r.indexOf(t)<0&&r.push(t)}static use(t){return Array.isArray(t)?(t.forEach(r=>Oe.installModule(r)),Oe):(Oe.installModule(t),Oe)}};Object.keys(prototypes).forEach(e=>{Object.keys(prototypes[e]).forEach(t=>{Swiper$1.prototype[t]=prototypes[e][t]})});Swiper$1.use([Resize,Observer]);const paramsList=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function isObject(e){return typeof e=="object"&&e!==null&&e.constructor&&Object.prototype.toString.call(e).slice(8,-1)==="Object"&&!e.__swiper__}function extend(e,t){const r=["__proto__","constructor","prototype"];Object.keys(t).filter(i=>r.indexOf(i)<0).forEach(i=>{typeof e[i]>"u"?e[i]=t[i]:isObject(t[i])&&isObject(e[i])&&Object.keys(t[i]).length>0?t[i].__swiper__?e[i]=t[i]:extend(e[i],t[i]):e[i]=t[i]})}function needsNavigation(e){return e===void 0&&(e={}),e.navigation&&typeof e.navigation.nextEl>"u"&&typeof e.navigation.prevEl>"u"}function needsPagination(e){return e===void 0&&(e={}),e.pagination&&typeof e.pagination.el>"u"}function needsScrollbar(e){return e===void 0&&(e={}),e.scrollbar&&typeof e.scrollbar.el>"u"}function uniqueClasses(e){e===void 0&&(e="");const t=e.split(" ").map(i=>i.trim()).filter(i=>!!i),r=[];return t.forEach(i=>{r.indexOf(i)<0&&r.push(i)}),r.join(" ")}function wrapperClass(e){return e===void 0&&(e=""),e?e.includes("swiper-wrapper")?e:`swiper-wrapper ${e}`:"swiper-wrapper"}function updateSwiper(e){let{swiper:t,slides:r,passedParams:i,changedParams:s,nextEl:a,prevEl:o,scrollbarEl:u,paginationEl:c}=e;const d=s.filter(j=>j!=="children"&&j!=="direction"&&j!=="wrapperClass"),{params:g,pagination:x,navigation:y,scrollbar:P,virtual:E,thumbs:T}=t;let M,C,S,b,A,R,I,D;s.includes("thumbs")&&i.thumbs&&i.thumbs.swiper&&g.thumbs&&!g.thumbs.swiper&&(M=!0),s.includes("controller")&&i.controller&&i.controller.control&&g.controller&&!g.controller.control&&(C=!0),s.includes("pagination")&&i.pagination&&(i.pagination.el||c)&&(g.pagination||g.pagination===!1)&&x&&!x.el&&(S=!0),s.includes("scrollbar")&&i.scrollbar&&(i.scrollbar.el||u)&&(g.scrollbar||g.scrollbar===!1)&&P&&!P.el&&(b=!0),s.includes("navigation")&&i.navigation&&(i.navigation.prevEl||o)&&(i.navigation.nextEl||a)&&(g.navigation||g.navigation===!1)&&y&&!y.prevEl&&!y.nextEl&&(A=!0);const O=j=>{t[j]&&(t[j].destroy(),j==="navigation"?(t.isElement&&(t[j].prevEl.remove(),t[j].nextEl.remove()),g[j].prevEl=void 0,g[j].nextEl=void 0,t[j].prevEl=void 0,t[j].nextEl=void 0):(t.isElement&&t[j].el.remove(),g[j].el=void 0,t[j].el=void 0))};s.includes("loop")&&t.isElement&&(g.loop&&!i.loop?R=!0:!g.loop&&i.loop?I=!0:D=!0),d.forEach(j=>{if(isObject(g[j])&&isObject(i[j]))Object.assign(g[j],i[j]),(j==="navigation"||j==="pagination"||j==="scrollbar")&&"enabled"in i[j]&&!i[j].enabled&&O(j);else{const W=i[j];(W===!0||W===!1)&&(j==="navigation"||j==="pagination"||j==="scrollbar")?W===!1&&O(j):g[j]=i[j]}}),d.includes("controller")&&!C&&t.controller&&t.controller.control&&g.controller&&g.controller.control&&(t.controller.control=g.controller.control),s.includes("children")&&r&&E&&g.virtual.enabled?(E.slides=r,E.update(!0)):s.includes("virtual")&&E&&g.virtual.enabled&&(r&&(E.slides=r),E.update(!0)),s.includes("children")&&r&&g.loop&&(D=!0),M&&T.init()&&T.update(!0),C&&(t.controller.control=g.controller.control),S&&(t.isElement&&(!c||typeof c=="string")&&(c=document.createElement("div"),c.classList.add("swiper-pagination"),c.part.add("pagination"),t.el.appendChild(c)),c&&(g.pagination.el=c),x.init(),x.render(),x.update()),b&&(t.isElement&&(!u||typeof u=="string")&&(u=document.createElement("div"),u.classList.add("swiper-scrollbar"),u.part.add("scrollbar"),t.el.appendChild(u)),u&&(g.scrollbar.el=u),P.init(),P.updateSize(),P.setTranslate()),A&&(t.isElement&&((!a||typeof a=="string")&&(a=document.createElement("div"),a.classList.add("swiper-button-next"),a.innerHTML=t.hostEl.constructor.nextButtonSvg,a.part.add("button-next"),t.el.appendChild(a)),(!o||typeof o=="string")&&(o=document.createElement("div"),o.classList.add("swiper-button-prev"),o.innerHTML=t.hostEl.constructor.prevButtonSvg,o.part.add("button-prev"),t.el.appendChild(o))),a&&(g.navigation.nextEl=a),o&&(g.navigation.prevEl=o),y.init(),y.update()),s.includes("allowSlideNext")&&(t.allowSlideNext=i.allowSlideNext),s.includes("allowSlidePrev")&&(t.allowSlidePrev=i.allowSlidePrev),s.includes("direction")&&t.changeDirection(i.direction,!1),(R||D)&&t.loopDestroy(),(I||D)&&t.loopCreate(),t.update()}function getParams(e,t){e===void 0&&(e={}),t===void 0&&(t=!0);const r={on:{}},i={},s={};extend(r,defaults),r._emitClasses=!0,r.init=!1;const a={},o=paramsList.map(c=>c.replace(/_/,"")),u=Object.assign({},e);return Object.keys(u).forEach(c=>{typeof e[c]>"u"||(o.indexOf(c)>=0?isObject(e[c])?(r[c]={},s[c]={},extend(r[c],e[c]),extend(s[c],e[c])):(r[c]=e[c],s[c]=e[c]):c.search(/on[A-Z]/)===0&&typeof e[c]=="function"?t?i[`${c[2].toLowerCase()}${c.substr(3)}`]=e[c]:r.on[`${c[2].toLowerCase()}${c.substr(3)}`]=e[c]:a[c]=e[c])}),["navigation","pagination","scrollbar"].forEach(c=>{r[c]===!0&&(r[c]={}),r[c]===!1&&delete r[c]}),{params:r,passedParams:s,rest:a,events:i}}function mountSwiper(e,t){let{el:r,nextEl:i,prevEl:s,paginationEl:a,scrollbarEl:o,swiper:u}=e;needsNavigation(t)&&i&&s&&(u.params.navigation.nextEl=i,u.originalParams.navigation.nextEl=i,u.params.navigation.prevEl=s,u.originalParams.navigation.prevEl=s),needsPagination(t)&&a&&(u.params.pagination.el=a,u.originalParams.pagination.el=a),needsScrollbar(t)&&o&&(u.params.scrollbar.el=o,u.originalParams.scrollbar.el=o),u.init(r)}function getChangedParams(e,t,r,i,s){const a=[];if(!t)return a;const o=c=>{a.indexOf(c)<0&&a.push(c)};if(r&&i){const c=i.map(s),d=r.map(s);c.join("")!==d.join("")&&o("children"),i.length!==r.length&&o("children")}return paramsList.filter(c=>c[0]==="_").map(c=>c.replace(/_/,"")).forEach(c=>{if(c in e&&c in t)if(isObject(e[c])&&isObject(t[c])){const d=Object.keys(e[c]),g=Object.keys(t[c]);d.length!==g.length?o(c):(d.forEach(x=>{e[c][x]!==t[c][x]&&o(c)}),g.forEach(x=>{e[c][x]!==t[c][x]&&o(c)}))}else e[c]!==t[c]&&o(c)}),a}const updateOnVirtualData=e=>{!e||e.destroyed||!e.params.virtual||e.params.virtual&&!e.params.virtual.enabled||(e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.parallax&&e.params.parallax&&e.params.parallax.enabled&&e.parallax.setTranslate())};function _extends(){return _extends=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(e[i]=r[i])}return e},_extends.apply(this,arguments)}function isChildSwiperSlide(e){return e.type&&e.type.displayName&&e.type.displayName.includes("SwiperSlide")}function processChildren(e){const t=[];return React.Children.toArray(e).forEach(r=>{isChildSwiperSlide(r)?t.push(r):r.props&&r.props.children&&processChildren(r.props.children).forEach(i=>t.push(i))}),t}function getChildren(e){const t=[],r={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return React.Children.toArray(e).forEach(i=>{if(isChildSwiperSlide(i))t.push(i);else if(i.props&&i.props.slot&&r[i.props.slot])r[i.props.slot].push(i);else if(i.props&&i.props.children){const s=processChildren(i.props.children);s.length>0?s.forEach(a=>t.push(a)):r["container-end"].push(i)}else r["container-end"].push(i)}),{slides:t,slots:r}}function renderVirtual(e,t,r){if(!r)return null;const i=g=>{let x=g;return g<0?x=t.length+g:x>=t.length&&(x=x-t.length),x},s=e.isHorizontal()?{[e.rtlTranslate?"right":"left"]:`${r.offset}px`}:{top:`${r.offset}px`},{from:a,to:o}=r,u=e.params.loop?-t.length:0,c=e.params.loop?t.length*2:t.length,d=[];for(let g=u;g<c;g+=1)g>=a&&g<=o&&d.push(t[i(g)]);return d.map((g,x)=>React.cloneElement(g,{swiper:e,style:s,key:`slide-${x}`}))}function useIsomorphicLayoutEffect$1(e,t){return typeof window>"u"?reactExports.useEffect(e,t):reactExports.useLayoutEffect(e,t)}const SwiperSlideContext=reactExports.createContext(null),SwiperContext=reactExports.createContext(null),useSwiper=()=>reactExports.useContext(SwiperContext),Swiper=reactExports.forwardRef(function(e,t){let{className:r,tag:i="div",wrapperTag:s="div",children:a,onSwiper:o,...u}=e===void 0?{}:e,c=!1;const[d,g]=reactExports.useState("swiper"),[x,y]=reactExports.useState(null),[P,E]=reactExports.useState(!1),T=reactExports.useRef(!1),M=reactExports.useRef(null),C=reactExports.useRef(null),S=reactExports.useRef(null),b=reactExports.useRef(null),A=reactExports.useRef(null),R=reactExports.useRef(null),I=reactExports.useRef(null),D=reactExports.useRef(null),{params:O,passedParams:j,rest:W,events:U}=getParams(u),{slides:H,slots:K}=getChildren(a),$=()=>{E(!P)};Object.assign(O.on,{_containerClasses(F,z){g(z)}});const N=()=>{Object.assign(O.on,U),c=!0;const F={...O};if(delete F.wrapperClass,C.current=new Swiper$1(F),C.current.virtual&&C.current.params.virtual.enabled){C.current.virtual.slides=H;const z={cache:!1,slides:H,renderExternal:y,renderExternalUpdate:!1};extend(C.current.params.virtual,z),extend(C.current.originalParams.virtual,z)}};M.current||N(),C.current&&C.current.on("_beforeBreakpoint",$);const L=()=>{c||!U||!C.current||Object.keys(U).forEach(F=>{C.current.on(F,U[F])})},B=()=>{!U||!C.current||Object.keys(U).forEach(F=>{C.current.off(F,U[F])})};reactExports.useEffect(()=>()=>{C.current&&C.current.off("_beforeBreakpoint",$)}),reactExports.useEffect(()=>{!T.current&&C.current&&(C.current.emitSlidesClasses(),T.current=!0)}),useIsomorphicLayoutEffect$1(()=>{if(t&&(t.current=M.current),!!M.current)return C.current.destroyed&&N(),mountSwiper({el:M.current,nextEl:A.current,prevEl:R.current,paginationEl:I.current,scrollbarEl:D.current,swiper:C.current},O),o&&o(C.current),()=>{C.current&&!C.current.destroyed&&C.current.destroy(!0,!1)}},[]),useIsomorphicLayoutEffect$1(()=>{L();const F=getChangedParams(j,S.current,H,b.current,z=>z.key);return S.current=j,b.current=H,F.length&&C.current&&!C.current.destroyed&&updateSwiper({swiper:C.current,slides:H,passedParams:j,changedParams:F,nextEl:A.current,prevEl:R.current,scrollbarEl:D.current,paginationEl:I.current}),()=>{B()}}),useIsomorphicLayoutEffect$1(()=>{updateOnVirtualData(C.current)},[x]);function _(){return O.virtual?renderVirtual(C.current,H,x):H.map((F,z)=>React.cloneElement(F,{swiper:C.current,swiperSlideIndex:z}))}return React.createElement(i,_extends({ref:M,className:uniqueClasses(`${d}${r?` ${r}`:""}`)},W),React.createElement(SwiperContext.Provider,{value:C.current},K["container-start"],React.createElement(s,{className:wrapperClass(O.wrapperClass)},K["wrapper-start"],_(),K["wrapper-end"]),needsNavigation(O)&&React.createElement(React.Fragment,null,React.createElement("div",{ref:R,className:"swiper-button-prev"}),React.createElement("div",{ref:A,className:"swiper-button-next"})),needsScrollbar(O)&&React.createElement("div",{ref:D,className:"swiper-scrollbar"}),needsPagination(O)&&React.createElement("div",{ref:I,className:"swiper-pagination"}),K["container-end"]))});Swiper.displayName="Swiper";const SwiperSlide=reactExports.forwardRef(function(e,t){let{tag:r="div",children:i,className:s="",swiper:a,zoom:o,lazy:u,virtualIndex:c,swiperSlideIndex:d,...g}=e===void 0?{}:e;const x=reactExports.useRef(null),[y,P]=reactExports.useState("swiper-slide"),[E,T]=reactExports.useState(!1);function M(A,R,I){R===x.current&&P(I)}useIsomorphicLayoutEffect$1(()=>{if(typeof d<"u"&&(x.current.swiperSlideIndex=d),t&&(t.current=x.current),!(!x.current||!a)){if(a.destroyed){y!=="swiper-slide"&&P("swiper-slide");return}return a.on("_slideClass",M),()=>{a&&a.off("_slideClass",M)}}}),useIsomorphicLayoutEffect$1(()=>{a&&x.current&&!a.destroyed&&P(a.getSlideClasses(x.current))},[a]);const C={isActive:y.indexOf("swiper-slide-active")>=0,isVisible:y.indexOf("swiper-slide-visible")>=0,isPrev:y.indexOf("swiper-slide-prev")>=0,isNext:y.indexOf("swiper-slide-next")>=0},S=()=>typeof i=="function"?i(C):i,b=()=>{T(!0)};return React.createElement(r,_extends({ref:x,className:uniqueClasses(`${y}${s?` ${s}`:""}`),"data-swiper-slide-index":c,onLoad:b},g),o&&React.createElement(SwiperSlideContext.Provider,{value:C},React.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":typeof o=="number"?o:void 0},S(),u&&!E&&React.createElement("div",{className:"swiper-lazy-preloader"}))),!o&&React.createElement(SwiperSlideContext.Provider,{value:C},S(),u&&!E&&React.createElement("div",{className:"swiper-lazy-preloader"})))});SwiperSlide.displayName="SwiperSlide";function createElementIfNotDefined(e,t,r,i){return e.params.createElements&&Object.keys(i).forEach(s=>{if(!r[s]&&r.auto===!0){let a=elementChildren(e.el,`.${i[s]}`)[0];a||(a=createElement("div",i[s]),a.className=i[s],e.el.append(a)),r[s]=a,t[s]=a}}),r}function Navigation(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;r({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),t.navigation={nextEl:null,prevEl:null};const a=T=>(Array.isArray(T)?T:[T]).filter(M=>!!M);function o(T){let M;return T&&typeof T=="string"&&t.isElement&&(M=t.el.querySelector(T),M)?M:(T&&(typeof T=="string"&&(M=[...document.querySelectorAll(T)]),t.params.uniqueNavElements&&typeof T=="string"&&M.length>1&&t.el.querySelectorAll(T).length===1&&(M=t.el.querySelector(T))),T&&!M?T:M)}function u(T,M){const C=t.params.navigation;T=a(T),T.forEach(S=>{S&&(S.classList[M?"add":"remove"](...C.disabledClass.split(" ")),S.tagName==="BUTTON"&&(S.disabled=M),t.params.watchOverflow&&t.enabled&&S.classList[t.isLocked?"add":"remove"](C.lockClass))})}function c(){const{nextEl:T,prevEl:M}=t.navigation;if(t.params.loop){u(M,!1),u(T,!1);return}u(M,t.isBeginning&&!t.params.rewind),u(T,t.isEnd&&!t.params.rewind)}function d(T){T.preventDefault(),!(t.isBeginning&&!t.params.loop&&!t.params.rewind)&&(t.slidePrev(),s("navigationPrev"))}function g(T){T.preventDefault(),!(t.isEnd&&!t.params.loop&&!t.params.rewind)&&(t.slideNext(),s("navigationNext"))}function x(){const T=t.params.navigation;if(t.params.navigation=createElementIfNotDefined(t,t.originalParams.navigation,t.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(T.nextEl||T.prevEl))return;let M=o(T.nextEl),C=o(T.prevEl);Object.assign(t.navigation,{nextEl:M,prevEl:C}),M=a(M),C=a(C);const S=(b,A)=>{b&&b.addEventListener("click",A==="next"?g:d),!t.enabled&&b&&b.classList.add(...T.lockClass.split(" "))};M.forEach(b=>S(b,"next")),C.forEach(b=>S(b,"prev"))}function y(){let{nextEl:T,prevEl:M}=t.navigation;T=a(T),M=a(M);const C=(S,b)=>{S.removeEventListener("click",b==="next"?g:d),S.classList.remove(...t.params.navigation.disabledClass.split(" "))};T.forEach(S=>C(S,"next")),M.forEach(S=>C(S,"prev"))}i("init",()=>{t.params.navigation.enabled===!1?E():(x(),c())}),i("toEdge fromEdge lock unlock",()=>{c()}),i("destroy",()=>{y()}),i("enable disable",()=>{let{nextEl:T,prevEl:M}=t.navigation;if(T=a(T),M=a(M),t.enabled){c();return}[...T,...M].filter(C=>!!C).forEach(C=>C.classList.add(t.params.navigation.lockClass))}),i("click",(T,M)=>{let{nextEl:C,prevEl:S}=t.navigation;C=a(C),S=a(S);const b=M.target;if(t.params.navigation.hideOnClick&&!S.includes(b)&&!C.includes(b)){if(t.pagination&&t.params.pagination&&t.params.pagination.clickable&&(t.pagination.el===b||t.pagination.el.contains(b)))return;let A;C.length?A=C[0].classList.contains(t.params.navigation.hiddenClass):S.length&&(A=S[0].classList.contains(t.params.navigation.hiddenClass)),s(A===!0?"navigationShow":"navigationHide"),[...C,...S].filter(R=>!!R).forEach(R=>R.classList.toggle(t.params.navigation.hiddenClass))}});const P=()=>{t.el.classList.remove(...t.params.navigation.navigationDisabledClass.split(" ")),x(),c()},E=()=>{t.el.classList.add(...t.params.navigation.navigationDisabledClass.split(" ")),y()};Object.assign(t.navigation,{enable:P,disable:E,update:c,init:x,destroy:y})}function classesToSelector(e){return e===void 0&&(e=""),`.${e.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function Pagination(e){let{swiper:t,extendParams:r,on:i,emit:s}=e;const a="swiper-pagination";r({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:S=>S,formatFractionTotal:S=>S,bulletClass:`${a}-bullet`,bulletActiveClass:`${a}-bullet-active`,modifierClass:`${a}-`,currentClass:`${a}-current`,totalClass:`${a}-total`,hiddenClass:`${a}-hidden`,progressbarFillClass:`${a}-progressbar-fill`,progressbarOppositeClass:`${a}-progressbar-opposite`,clickableClass:`${a}-clickable`,lockClass:`${a}-lock`,horizontalClass:`${a}-horizontal`,verticalClass:`${a}-vertical`,paginationDisabledClass:`${a}-disabled`}}),t.pagination={el:null,bullets:[]};let o,u=0;const c=S=>(Array.isArray(S)?S:[S]).filter(b=>!!b);function d(){return!t.params.pagination.el||!t.pagination.el||Array.isArray(t.pagination.el)&&t.pagination.el.length===0}function g(S,b){const{bulletActiveClass:A}=t.params.pagination;S&&(S=S[`${b==="prev"?"previous":"next"}ElementSibling`],S&&(S.classList.add(`${A}-${b}`),S=S[`${b==="prev"?"previous":"next"}ElementSibling`],S&&S.classList.add(`${A}-${b}-${b}`)))}function x(S){const b=S.target.closest(classesToSelector(t.params.pagination.bulletClass));if(!b)return;S.preventDefault();const A=elementIndex(b)*t.params.slidesPerGroup;if(t.params.loop){if(t.realIndex===A)return;t.slideToLoop(A)}else t.slideTo(A)}function y(){const S=t.rtl,b=t.params.pagination;if(d())return;let A=t.pagination.el;A=c(A);let R,I;const D=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.slides.length,O=t.params.loop?Math.ceil(D/t.params.slidesPerGroup):t.snapGrid.length;if(t.params.loop?(I=t.previousRealIndex||0,R=t.params.slidesPerGroup>1?Math.floor(t.realIndex/t.params.slidesPerGroup):t.realIndex):typeof t.snapIndex<"u"?(R=t.snapIndex,I=t.previousSnapIndex):(I=t.previousIndex||0,R=t.activeIndex||0),b.type==="bullets"&&t.pagination.bullets&&t.pagination.bullets.length>0){const j=t.pagination.bullets;let W,U,H;if(b.dynamicBullets&&(o=elementOuterSize(j[0],t.isHorizontal()?"width":"height",!0),A.forEach(K=>{K.style[t.isHorizontal()?"width":"height"]=`${o*(b.dynamicMainBullets+4)}px`}),b.dynamicMainBullets>1&&I!==void 0&&(u+=R-(I||0),u>b.dynamicMainBullets-1?u=b.dynamicMainBullets-1:u<0&&(u=0)),W=Math.max(R-u,0),U=W+(Math.min(j.length,b.dynamicMainBullets)-1),H=(U+W)/2),j.forEach(K=>{const $=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(N=>`${b.bulletActiveClass}${N}`)].map(N=>typeof N=="string"&&N.includes(" ")?N.split(" "):N).flat();K.classList.remove(...$)}),A.length>1)j.forEach(K=>{const $=elementIndex(K);$===R?K.classList.add(...b.bulletActiveClass.split(" ")):t.isElement&&K.setAttribute("part","bullet"),b.dynamicBullets&&($>=W&&$<=U&&K.classList.add(...`${b.bulletActiveClass}-main`.split(" ")),$===W&&g(K,"prev"),$===U&&g(K,"next"))});else{const K=j[R];if(K&&K.classList.add(...b.bulletActiveClass.split(" ")),t.isElement&&j.forEach(($,N)=>{$.setAttribute("part",N===R?"bullet-active":"bullet")}),b.dynamicBullets){const $=j[W],N=j[U];for(let L=W;L<=U;L+=1)j[L]&&j[L].classList.add(...`${b.bulletActiveClass}-main`.split(" "));g($,"prev"),g(N,"next")}}if(b.dynamicBullets){const K=Math.min(j.length,b.dynamicMainBullets+4),$=(o*K-o)/2-H*o,N=S?"right":"left";j.forEach(L=>{L.style[t.isHorizontal()?N:"top"]=`${$}px`})}}A.forEach((j,W)=>{if(b.type==="fraction"&&(j.querySelectorAll(classesToSelector(b.currentClass)).forEach(U=>{U.textContent=b.formatFractionCurrent(R+1)}),j.querySelectorAll(classesToSelector(b.totalClass)).forEach(U=>{U.textContent=b.formatFractionTotal(O)})),b.type==="progressbar"){let U;b.progressbarOpposite?U=t.isHorizontal()?"vertical":"horizontal":U=t.isHorizontal()?"horizontal":"vertical";const H=(R+1)/O;let K=1,$=1;U==="horizontal"?K=H:$=H,j.querySelectorAll(classesToSelector(b.progressbarFillClass)).forEach(N=>{N.style.transform=`translate3d(0,0,0) scaleX(${K}) scaleY(${$})`,N.style.transitionDuration=`${t.params.speed}ms`})}b.type==="custom"&&b.renderCustom?(j.innerHTML=b.renderCustom(t,R+1,O),W===0&&s("paginationRender",j)):(W===0&&s("paginationRender",j),s("paginationUpdate",j)),t.params.watchOverflow&&t.enabled&&j.classList[t.isLocked?"add":"remove"](b.lockClass)})}function P(){const S=t.params.pagination;if(d())return;const b=t.virtual&&t.params.virtual.enabled?t.virtual.slides.length:t.grid&&t.params.grid.rows>1?t.slides.length/Math.ceil(t.params.grid.rows):t.slides.length;let A=t.pagination.el;A=c(A);let R="";if(S.type==="bullets"){let I=t.params.loop?Math.ceil(b/t.params.slidesPerGroup):t.snapGrid.length;t.params.freeMode&&t.params.freeMode.enabled&&I>b&&(I=b);for(let D=0;D<I;D+=1)S.renderBullet?R+=S.renderBullet.call(t,D,S.bulletClass):R+=`<${S.bulletElement} ${t.isElement?'part="bullet"':""} class="${S.bulletClass}"></${S.bulletElement}>`}S.type==="fraction"&&(S.renderFraction?R=S.renderFraction.call(t,S.currentClass,S.totalClass):R=`<span class="${S.currentClass}"></span> / <span class="${S.totalClass}"></span>`),S.type==="progressbar"&&(S.renderProgressbar?R=S.renderProgressbar.call(t,S.progressbarFillClass):R=`<span class="${S.progressbarFillClass}"></span>`),t.pagination.bullets=[],A.forEach(I=>{S.type!=="custom"&&(I.innerHTML=R||""),S.type==="bullets"&&t.pagination.bullets.push(...I.querySelectorAll(classesToSelector(S.bulletClass)))}),S.type!=="custom"&&s("paginationRender",A[0])}function E(){t.params.pagination=createElementIfNotDefined(t,t.originalParams.pagination,t.params.pagination,{el:"swiper-pagination"});const S=t.params.pagination;if(!S.el)return;let b;typeof S.el=="string"&&t.isElement&&(b=t.el.querySelector(S.el)),!b&&typeof S.el=="string"&&(b=[...document.querySelectorAll(S.el)]),b||(b=S.el),!(!b||b.length===0)&&(t.params.uniqueNavElements&&typeof S.el=="string"&&Array.isArray(b)&&b.length>1&&(b=[...t.el.querySelectorAll(S.el)],b.length>1&&(b=b.filter(A=>elementParents(A,".swiper")[0]===t.el)[0])),Array.isArray(b)&&b.length===1&&(b=b[0]),Object.assign(t.pagination,{el:b}),b=c(b),b.forEach(A=>{S.type==="bullets"&&S.clickable&&A.classList.add(...(S.clickableClass||"").split(" ")),A.classList.add(S.modifierClass+S.type),A.classList.add(t.isHorizontal()?S.horizontalClass:S.verticalClass),S.type==="bullets"&&S.dynamicBullets&&(A.classList.add(`${S.modifierClass}${S.type}-dynamic`),u=0,S.dynamicMainBullets<1&&(S.dynamicMainBullets=1)),S.type==="progressbar"&&S.progressbarOpposite&&A.classList.add(S.progressbarOppositeClass),S.clickable&&A.addEventListener("click",x),t.enabled||A.classList.add(S.lockClass)}))}function T(){const S=t.params.pagination;if(d())return;let b=t.pagination.el;b&&(b=c(b),b.forEach(A=>{A.classList.remove(S.hiddenClass),A.classList.remove(S.modifierClass+S.type),A.classList.remove(t.isHorizontal()?S.horizontalClass:S.verticalClass),S.clickable&&(A.classList.remove(...(S.clickableClass||"").split(" ")),A.removeEventListener("click",x))})),t.pagination.bullets&&t.pagination.bullets.forEach(A=>A.classList.remove(...S.bulletActiveClass.split(" ")))}i("changeDirection",()=>{if(!t.pagination||!t.pagination.el)return;const S=t.params.pagination;let{el:b}=t.pagination;b=c(b),b.forEach(A=>{A.classList.remove(S.horizontalClass,S.verticalClass),A.classList.add(t.isHorizontal()?S.horizontalClass:S.verticalClass)})}),i("init",()=>{t.params.pagination.enabled===!1?C():(E(),P(),y())}),i("activeIndexChange",()=>{typeof t.snapIndex>"u"&&y()}),i("snapIndexChange",()=>{y()}),i("snapGridLengthChange",()=>{P(),y()}),i("destroy",()=>{T()}),i("enable disable",()=>{let{el:S}=t.pagination;S&&(S=c(S),S.forEach(b=>b.classList[t.enabled?"remove":"add"](t.params.pagination.lockClass)))}),i("lock unlock",()=>{y()}),i("click",(S,b)=>{const A=b.target,R=c(t.pagination.el);if(t.params.pagination.el&&t.params.pagination.hideOnClick&&R&&R.length>0&&!A.classList.contains(t.params.pagination.bulletClass)){if(t.navigation&&(t.navigation.nextEl&&A===t.navigation.nextEl||t.navigation.prevEl&&A===t.navigation.prevEl))return;const I=R[0].classList.contains(t.params.pagination.hiddenClass);s(I===!0?"paginationShow":"paginationHide"),R.forEach(D=>D.classList.toggle(t.params.pagination.hiddenClass))}});const M=()=>{t.el.classList.remove(t.params.pagination.paginationDisabledClass);let{el:S}=t.pagination;S&&(S=c(S),S.forEach(b=>b.classList.remove(t.params.pagination.paginationDisabledClass))),E(),P(),y()},C=()=>{t.el.classList.add(t.params.pagination.paginationDisabledClass);let{el:S}=t.pagination;S&&(S=c(S),S.forEach(b=>b.classList.add(t.params.pagination.paginationDisabledClass))),T()};Object.assign(t.pagination,{enable:M,disable:C,render:P,update:y,init:E,destroy:T})}function A11y(e){let{swiper:t,extendParams:r,on:i}=e;r({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),t.a11y={clicked:!1};let s=null;function a($){const N=s;N.length!==0&&(N.innerHTML="",N.innerHTML=$)}const o=$=>(Array.isArray($)?$:[$]).filter(N=>!!N);function u($){$===void 0&&($=16);const N=()=>Math.round(16*Math.random()).toString(16);return"x".repeat($).replace(/x/g,N)}function c($){$=o($),$.forEach(N=>{N.setAttribute("tabIndex","0")})}function d($){$=o($),$.forEach(N=>{N.setAttribute("tabIndex","-1")})}function g($,N){$=o($),$.forEach(L=>{L.setAttribute("role",N)})}function x($,N){$=o($),$.forEach(L=>{L.setAttribute("aria-roledescription",N)})}function y($,N){$=o($),$.forEach(L=>{L.setAttribute("aria-controls",N)})}function P($,N){$=o($),$.forEach(L=>{L.setAttribute("aria-label",N)})}function E($,N){$=o($),$.forEach(L=>{L.setAttribute("id",N)})}function T($,N){$=o($),$.forEach(L=>{L.setAttribute("aria-live",N)})}function M($){$=o($),$.forEach(N=>{N.setAttribute("aria-disabled",!0)})}function C($){$=o($),$.forEach(N=>{N.setAttribute("aria-disabled",!1)})}function S($){if($.keyCode!==13&&$.keyCode!==32)return;const N=t.params.a11y,L=$.target;t.pagination&&t.pagination.el&&(L===t.pagination.el||t.pagination.el.contains($.target))&&!$.target.matches(classesToSelector(t.params.pagination.bulletClass))||(t.navigation&&t.navigation.nextEl&&L===t.navigation.nextEl&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?a(N.lastSlideMessage):a(N.nextSlideMessage)),t.navigation&&t.navigation.prevEl&&L===t.navigation.prevEl&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?a(N.firstSlideMessage):a(N.prevSlideMessage)),t.pagination&&L.matches(classesToSelector(t.params.pagination.bulletClass))&&L.click())}function b(){if(t.params.loop||t.params.rewind||!t.navigation)return;const{nextEl:$,prevEl:N}=t.navigation;N&&(t.isBeginning?(M(N),d(N)):(C(N),c(N))),$&&(t.isEnd?(M($),d($)):(C($),c($)))}function A(){return t.pagination&&t.pagination.bullets&&t.pagination.bullets.length}function R(){return A()&&t.params.pagination.clickable}function I(){const $=t.params.a11y;A()&&t.pagination.bullets.forEach(N=>{t.params.pagination.clickable&&(c(N),t.params.pagination.renderBullet||(g(N,"button"),P(N,$.paginationBulletMessage.replace(/\{\{index\}\}/,elementIndex(N)+1)))),N.matches(classesToSelector(t.params.pagination.bulletActiveClass))?N.setAttribute("aria-current","true"):N.removeAttribute("aria-current")})}const D=($,N,L)=>{c($),$.tagName!=="BUTTON"&&(g($,"button"),$.addEventListener("keydown",S)),P($,L),y($,N)},O=()=>{t.a11y.clicked=!0},j=()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{t.destroyed||(t.a11y.clicked=!1)})})},W=$=>{if(t.a11y.clicked)return;const N=$.target.closest(`.${t.params.slideClass}, swiper-slide`);if(!N||!t.slides.includes(N))return;const L=t.slides.indexOf(N)===t.activeIndex,B=t.params.watchSlidesProgress&&t.visibleSlides&&t.visibleSlides.includes(N);L||B||$.sourceCapabilities&&$.sourceCapabilities.firesTouchEvents||(t.isHorizontal()?t.el.scrollLeft=0:t.el.scrollTop=0,t.slideTo(t.slides.indexOf(N),0))},U=()=>{const $=t.params.a11y;$.itemRoleDescriptionMessage&&x(t.slides,$.itemRoleDescriptionMessage),$.slideRole&&g(t.slides,$.slideRole);const N=t.slides.length;$.slideLabelMessage&&t.slides.forEach((L,B)=>{const _=t.params.loop?parseInt(L.getAttribute("data-swiper-slide-index"),10):B,F=$.slideLabelMessage.replace(/\{\{index\}\}/,_+1).replace(/\{\{slidesLength\}\}/,N);P(L,F)})},H=()=>{const $=t.params.a11y;t.el.append(s);const N=t.el;$.containerRoleDescriptionMessage&&x(N,$.containerRoleDescriptionMessage),$.containerMessage&&P(N,$.containerMessage);const L=t.wrapperEl,B=$.id||L.getAttribute("id")||`swiper-wrapper-${u(16)}`,_=t.params.autoplay&&t.params.autoplay.enabled?"off":"polite";E(L,B),T(L,_),U();let{nextEl:F,prevEl:z}=t.navigation?t.navigation:{};F=o(F),z=o(z),F&&F.forEach(V=>D(V,B,$.nextSlideMessage)),z&&z.forEach(V=>D(V,B,$.prevSlideMessage)),R()&&o(t.pagination.el).forEach(X=>{X.addEventListener("keydown",S)}),t.el.addEventListener("focus",W,!0),t.el.addEventListener("pointerdown",O,!0),t.el.addEventListener("pointerup",j,!0)};function K(){s&&s.remove();let{nextEl:$,prevEl:N}=t.navigation?t.navigation:{};$=o($),N=o(N),$&&$.forEach(L=>L.removeEventListener("keydown",S)),N&&N.forEach(L=>L.removeEventListener("keydown",S)),R()&&o(t.pagination.el).forEach(B=>{B.removeEventListener("keydown",S)}),t.el.removeEventListener("focus",W,!0),t.el.removeEventListener("pointerdown",O,!0),t.el.removeEventListener("pointerup",j,!0)}i("beforeInit",()=>{s=createElement("span",t.params.a11y.notificationClass),s.setAttribute("aria-live","assertive"),s.setAttribute("aria-atomic","true")}),i("afterInit",()=>{t.params.a11y.enabled&&H()}),i("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{t.params.a11y.enabled&&U()}),i("fromEdge toEdge afterInit lock unlock",()=>{t.params.a11y.enabled&&b()}),i("paginationUpdate",()=>{t.params.a11y.enabled&&I()}),i("destroy",()=>{t.params.a11y.enabled&&K()})}function Autoplay(e){let{swiper:t,extendParams:r,on:i,emit:s,params:a}=e;t.autoplay={running:!1,paused:!1,timeLeft:0},r({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let o,u,c=a&&a.autoplay?a.autoplay.delay:3e3,d=a&&a.autoplay?a.autoplay.delay:3e3,g,x=new Date().getTime(),y,P,E,T,M,C,S;function b(_){!t||t.destroyed||!t.wrapperEl||_.target===t.wrapperEl&&(t.wrapperEl.removeEventListener("transitionend",b),!S&&W())}const A=()=>{if(t.destroyed||!t.autoplay.running)return;t.autoplay.paused?y=!0:y&&(d=g,y=!1);const _=t.autoplay.paused?g:x+d-new Date().getTime();t.autoplay.timeLeft=_,s("autoplayTimeLeft",_,_/c),u=requestAnimationFrame(()=>{A()})},R=()=>{let _;return t.virtual&&t.params.virtual.enabled?_=t.slides.filter(z=>z.classList.contains("swiper-slide-active"))[0]:_=t.slides[t.activeIndex],_?parseInt(_.getAttribute("data-swiper-autoplay"),10):void 0},I=_=>{if(t.destroyed||!t.autoplay.running)return;cancelAnimationFrame(u),A();let F=typeof _>"u"?t.params.autoplay.delay:_;c=t.params.autoplay.delay,d=t.params.autoplay.delay;const z=R();!Number.isNaN(z)&&z>0&&typeof _>"u"&&(F=z,c=z,d=z),g=F;const V=t.params.speed,X=()=>{!t||t.destroyed||(t.params.autoplay.reverseDirection?!t.isBeginning||t.params.loop||t.params.rewind?(t.slidePrev(V,!0,!0),s("autoplay")):t.params.autoplay.stopOnLastSlide||(t.slideTo(t.slides.length-1,V,!0,!0),s("autoplay")):!t.isEnd||t.params.loop||t.params.rewind?(t.slideNext(V,!0,!0),s("autoplay")):t.params.autoplay.stopOnLastSlide||(t.slideTo(0,V,!0,!0),s("autoplay")),t.params.cssMode&&(x=new Date().getTime(),requestAnimationFrame(()=>{I()})))};return F>0?(clearTimeout(o),o=setTimeout(()=>{X()},F)):requestAnimationFrame(()=>{X()}),F},D=()=>{x=new Date().getTime(),t.autoplay.running=!0,I(),s("autoplayStart")},O=()=>{t.autoplay.running=!1,clearTimeout(o),cancelAnimationFrame(u),s("autoplayStop")},j=(_,F)=>{if(t.destroyed||!t.autoplay.running)return;clearTimeout(o),_||(C=!0);const z=()=>{s("autoplayPause"),t.params.autoplay.waitForTransition?t.wrapperEl.addEventListener("transitionend",b):W()};if(t.autoplay.paused=!0,F){M&&(g=t.params.autoplay.delay),M=!1,z();return}g=(g||t.params.autoplay.delay)-(new Date().getTime()-x),!(t.isEnd&&g<0&&!t.params.loop)&&(g<0&&(g=0),z())},W=()=>{t.isEnd&&g<0&&!t.params.loop||t.destroyed||!t.autoplay.running||(x=new Date().getTime(),C?(C=!1,I(g)):I(),t.autoplay.paused=!1,s("autoplayResume"))},U=()=>{if(t.destroyed||!t.autoplay.running)return;const _=getDocument();_.visibilityState==="hidden"&&(C=!0,j(!0)),_.visibilityState==="visible"&&W()},H=_=>{_.pointerType==="mouse"&&(C=!0,S=!0,!(t.animating||t.autoplay.paused)&&j(!0))},K=_=>{_.pointerType==="mouse"&&(S=!1,t.autoplay.paused&&W())},$=()=>{t.params.autoplay.pauseOnMouseEnter&&(t.el.addEventListener("pointerenter",H),t.el.addEventListener("pointerleave",K))},N=()=>{t.el.removeEventListener("pointerenter",H),t.el.removeEventListener("pointerleave",K)},L=()=>{getDocument().addEventListener("visibilitychange",U)},B=()=>{getDocument().removeEventListener("visibilitychange",U)};i("init",()=>{t.params.autoplay.enabled&&($(),L(),D())}),i("destroy",()=>{N(),B(),t.autoplay.running&&O()}),i("_freeModeStaticRelease",()=>{(E||C)&&W()}),i("_freeModeNoMomentumRelease",()=>{t.params.autoplay.disableOnInteraction?O():j(!0,!0)}),i("beforeTransitionStart",(_,F,z)=>{t.destroyed||!t.autoplay.running||(z||!t.params.autoplay.disableOnInteraction?j(!0,!0):O())}),i("sliderFirstMove",()=>{if(!(t.destroyed||!t.autoplay.running)){if(t.params.autoplay.disableOnInteraction){O();return}P=!0,E=!1,C=!1,T=setTimeout(()=>{C=!0,E=!0,j(!0)},200)}}),i("touchEnd",()=>{if(!(t.destroyed||!t.autoplay.running||!P)){if(clearTimeout(T),clearTimeout(o),t.params.autoplay.disableOnInteraction){E=!1,P=!1;return}E&&t.params.cssMode&&W(),E=!1,P=!1}}),i("slideChange",()=>{t.destroyed||!t.autoplay.running||(M=!0)}),Object.assign(t.autoplay,{start:D,stop:O,pause:j,resume:W})}var observerMap=new Map,RootIds=new WeakMap,rootId=0,unsupportedValue=void 0;function getRootId(e){return e?(RootIds.has(e)||(rootId+=1,RootIds.set(e,rootId.toString())),RootIds.get(e)):"0"}function optionsToId(e){return Object.keys(e).sort().filter(t=>e[t]!==void 0).map(t=>`${t}_${t==="root"?getRootId(e.root):e[t]}`).toString()}function createObserver(e){let t=optionsToId(e),r=observerMap.get(t);if(!r){const i=new Map;let s;const a=new IntersectionObserver(o=>{o.forEach(u=>{var c;const d=u.isIntersecting&&s.some(g=>u.intersectionRatio>=g);e.trackVisibility&&typeof u.isVisible>"u"&&(u.isVisible=d),(c=i.get(u.target))==null||c.forEach(g=>{g(d,u)})})},e);s=a.thresholds||(Array.isArray(e.threshold)?e.threshold:[e.threshold||0]),r={id:t,observer:a,elements:i},observerMap.set(t,r)}return r}function observe(e,t,r={},i=unsupportedValue){if(typeof window.IntersectionObserver>"u"&&i!==void 0){const c=e.getBoundingClientRect();return t(i,{isIntersecting:i,target:e,intersectionRatio:typeof r.threshold=="number"?r.threshold:0,time:0,boundingClientRect:c,intersectionRect:c,rootBounds:c}),()=>{}}const{id:s,observer:a,elements:o}=createObserver(r);let u=o.get(e)||[];return o.has(e)||o.set(e,u),u.push(t),a.observe(e),function(){u.splice(u.indexOf(t),1),u.length===0&&(o.delete(e),a.unobserve(e)),o.size===0&&(a.disconnect(),observerMap.delete(s))}}function useInView({threshold:e,delay:t,trackVisibility:r,rootMargin:i,root:s,triggerOnce:a,skip:o,initialInView:u,fallbackInView:c,onChange:d}={}){var g;const[x,y]=reactExports.useState(null),P=reactExports.useRef(),[E,T]=reactExports.useState({inView:!!u,entry:void 0});P.current=d,reactExports.useEffect(()=>{if(o||!x)return;let b;return b=observe(x,(A,R)=>{T({inView:A,entry:R}),P.current&&P.current(A,R),R.isIntersecting&&a&&b&&(b(),b=void 0)},{root:s,rootMargin:i,threshold:e,trackVisibility:r,delay:t},c),()=>{b&&b()}},[Array.isArray(e)?e.toString():e,x,s,i,a,o,r,c,t]);const M=(g=E.entry)==null?void 0:g.target,C=reactExports.useRef();!x&&M&&!a&&!o&&C.current!==M&&(C.current=M,T({inView:!!u,entry:void 0}));const S=[y,E.inView,E.entry];return S.ref=S[0],S.inView=S[1],S.entry=S[2],S}const MotionConfigContext=reactExports.createContext({transformPagePoint:e=>e,isStatic:!1,reducedMotion:"never"}),MotionContext=reactExports.createContext({}),PresenceContext=reactExports.createContext(null),isBrowser=typeof document<"u",useIsomorphicLayoutEffect=isBrowser?reactExports.useLayoutEffect:reactExports.useEffect,LazyContext=reactExports.createContext({strict:!1}),camelToDash=e=>e.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),optimizedAppearDataId="framerAppearId",optimizedAppearDataAttribute="data-"+camelToDash(optimizedAppearDataId);function useVisualElement(e,t,r,i){const{visualElement:s}=reactExports.useContext(MotionContext),a=reactExports.useContext(LazyContext),o=reactExports.useContext(PresenceContext),u=reactExports.useContext(MotionConfigContext).reducedMotion,c=reactExports.useRef();i=i||a.renderer,!c.current&&i&&(c.current=i(e,{visualState:t,parent:s,props:r,presenceContext:o,blockInitialAnimation:o?o.initial===!1:!1,reducedMotionConfig:u}));const d=c.current;reactExports.useInsertionEffect(()=>{d&&d.update(r,o)});const g=reactExports.useRef(!!(r[optimizedAppearDataAttribute]&&!window.HandoffComplete));return useIsomorphicLayoutEffect(()=>{d&&(d.render(),g.current&&d.animationState&&d.animationState.animateChanges())}),reactExports.useEffect(()=>{d&&(d.updateFeatures(),!g.current&&d.animationState&&d.animationState.animateChanges(),g.current&&(g.current=!1,window.HandoffComplete=!0))}),d}function isRefObject(e){return typeof e=="object"&&Object.prototype.hasOwnProperty.call(e,"current")}function useMotionRef(e,t,r){return reactExports.useCallback(i=>{i&&e.mount&&e.mount(i),t&&(i?t.mount(i):t.unmount()),r&&(typeof r=="function"?r(i):isRefObject(r)&&(r.current=i))},[t])}function isVariantLabel(e){return typeof e=="string"||Array.isArray(e)}function isAnimationControls(e){return typeof e=="object"&&typeof e.start=="function"}const variantPriorityOrder=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],variantProps=["initial",...variantPriorityOrder];function isControllingVariants(e){return isAnimationControls(e.animate)||variantProps.some(t=>isVariantLabel(e[t]))}function isVariantNode(e){return!!(isControllingVariants(e)||e.variants)}function getCurrentTreeVariants(e,t){if(isControllingVariants(e)){const{initial:r,animate:i}=e;return{initial:r===!1||isVariantLabel(r)?r:void 0,animate:isVariantLabel(i)?i:void 0}}return e.inherit!==!1?t:{}}function useCreateMotionContext(e){const{initial:t,animate:r}=getCurrentTreeVariants(e,reactExports.useContext(MotionContext));return reactExports.useMemo(()=>({initial:t,animate:r}),[variantLabelsAsDependency(t),variantLabelsAsDependency(r)])}function variantLabelsAsDependency(e){return Array.isArray(e)?e.join(" "):e}const featureProps={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},featureDefinitions={};for(const e in featureProps)featureDefinitions[e]={isEnabled:t=>featureProps[e].some(r=>!!t[r])};function loadFeatures(e){for(const t in e)featureDefinitions[t]={...featureDefinitions[t],...e[t]}}const LayoutGroupContext=reactExports.createContext({}),SwitchLayoutGroupContext=reactExports.createContext({}),motionComponentSymbol=Symbol.for("motionComponentSymbol");function createMotionComponent({preloadedFeatures:e,createVisualElement:t,useRender:r,useVisualState:i,Component:s}){e&&loadFeatures(e);function a(u,c){let d;const g={...reactExports.useContext(MotionConfigContext),...u,layoutId:useLayoutId(u)},{isStatic:x}=g,y=useCreateMotionContext(u),P=i(u,x);if(!x&&isBrowser){y.visualElement=useVisualElement(s,P,g,t);const E=reactExports.useContext(SwitchLayoutGroupContext),T=reactExports.useContext(LazyContext).strict;y.visualElement&&(d=y.visualElement.loadFeatures(g,T,e,E))}return reactExports.createElement(MotionContext.Provider,{value:y},d&&y.visualElement?reactExports.createElement(d,{visualElement:y.visualElement,...g}):null,r(s,u,useMotionRef(P,y.visualElement,c),P,x,y.visualElement))}const o=reactExports.forwardRef(a);return o[motionComponentSymbol]=s,o}function useLayoutId({layoutId:e}){const t=reactExports.useContext(LayoutGroupContext).id;return t&&e!==void 0?t+"-"+e:e}function createMotionProxy(e){function t(i,s={}){return createMotionComponent(e(i,s))}if(typeof Proxy>"u")return t;const r=new Map;return new Proxy(t,{get:(i,s)=>(r.has(s)||r.set(s,t(s)),r.get(s))})}const lowercaseSVGElements=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function isSVGComponent(e){return typeof e!="string"||e.includes("-")?!1:!!(lowercaseSVGElements.indexOf(e)>-1||/[A-Z]/.test(e))}const scaleCorrectors={};function addScaleCorrector(e){Object.assign(scaleCorrectors,e)}const transformPropOrder=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],transformProps=new Set(transformPropOrder);function isForcedMotionValue(e,{layout:t,layoutId:r}){return transformProps.has(e)||e.startsWith("origin")||(t||r!==void 0)&&(!!scaleCorrectors[e]||e==="opacity")}const isMotionValue=e=>!!(e&&e.getVelocity),translateAlias={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},numTransforms=transformPropOrder.length;function buildTransform(e,{enableHardwareAcceleration:t=!0,allowTransformNone:r=!0},i,s){let a="";for(let o=0;o<numTransforms;o++){const u=transformPropOrder[o];if(e[u]!==void 0){const c=translateAlias[u]||u;a+=`${c}(${e[u]}) `}}return t&&!e.z&&(a+="translateZ(0)"),a=a.trim(),s?a=s(e,i?"":a):r&&i&&(a="none"),a}const checkStringStartsWith=e=>t=>typeof t=="string"&&t.startsWith(e),isCSSVariableName=checkStringStartsWith("--"),isCSSVariableToken=checkStringStartsWith("var(--"),cssVariableRegex=/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,getValueAsType=(e,t)=>t&&typeof e=="number"?t.transform(e):e,clamp=(e,t,r)=>Math.min(Math.max(r,e),t),number={test:e=>typeof e=="number",parse:parseFloat,transform:e=>e},alpha={...number,transform:e=>clamp(0,1,e)},scale={...number,default:1},sanitize=e=>Math.round(e*1e5)/1e5,floatRegex=/(-)?([\d]*\.?[\d])+/g,colorRegex=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,singleColorRegex=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function isString(e){return typeof e=="string"}const createUnitType=e=>({test:t=>isString(t)&&t.endsWith(e)&&t.split(" ").length===1,parse:parseFloat,transform:t=>`${t}${e}`}),degrees=createUnitType("deg"),percent=createUnitType("%"),px=createUnitType("px"),vh=createUnitType("vh"),vw=createUnitType("vw"),progressPercentage={...percent,parse:e=>percent.parse(e)/100,transform:e=>percent.transform(e*100)},int={...number,transform:Math.round},numberValueTypes={borderWidth:px,borderTopWidth:px,borderRightWidth:px,borderBottomWidth:px,borderLeftWidth:px,borderRadius:px,radius:px,borderTopLeftRadius:px,borderTopRightRadius:px,borderBottomRightRadius:px,borderBottomLeftRadius:px,width:px,maxWidth:px,height:px,maxHeight:px,size:px,top:px,right:px,bottom:px,left:px,padding:px,paddingTop:px,paddingRight:px,paddingBottom:px,paddingLeft:px,margin:px,marginTop:px,marginRight:px,marginBottom:px,marginLeft:px,rotate:degrees,rotateX:degrees,rotateY:degrees,rotateZ:degrees,scale,scaleX:scale,scaleY:scale,scaleZ:scale,skew:degrees,skewX:degrees,skewY:degrees,distance:px,translateX:px,translateY:px,translateZ:px,x:px,y:px,z:px,perspective:px,transformPerspective:px,opacity:alpha,originX:progressPercentage,originY:progressPercentage,originZ:px,zIndex:int,fillOpacity:alpha,strokeOpacity:alpha,numOctaves:int};function buildHTMLStyles(e,t,r,i){const{style:s,vars:a,transform:o,transformOrigin:u}=e;let c=!1,d=!1,g=!0;for(const x in t){const y=t[x];if(isCSSVariableName(x)){a[x]=y;continue}const P=numberValueTypes[x],E=getValueAsType(y,P);if(transformProps.has(x)){if(c=!0,o[x]=E,!g)continue;y!==(P.default||0)&&(g=!1)}else x.startsWith("origin")?(d=!0,u[x]=E):s[x]=E}if(t.transform||(c||i?s.transform=buildTransform(e.transform,r,g,i):s.transform&&(s.transform="none")),d){const{originX:x="50%",originY:y="50%",originZ:P=0}=u;s.transformOrigin=`${x} ${y} ${P}`}}const createHtmlRenderState=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function copyRawValuesOnly(e,t,r){for(const i in t)!isMotionValue(t[i])&&!isForcedMotionValue(i,r)&&(e[i]=t[i])}function useInitialMotionValues({transformTemplate:e},t,r){return reactExports.useMemo(()=>{const i=createHtmlRenderState();return buildHTMLStyles(i,t,{enableHardwareAcceleration:!r},e),Object.assign({},i.vars,i.style)},[t])}function useStyle(e,t,r){const i=e.style||{},s={};return copyRawValuesOnly(s,i,e),Object.assign(s,useInitialMotionValues(e,t,r)),e.transformValues?e.transformValues(s):s}function useHTMLProps(e,t,r){const i={},s=useStyle(e,t,r);return e.drag&&e.dragListener!==!1&&(i.draggable=!1,s.userSelect=s.WebkitUserSelect=s.WebkitTouchCallout="none",s.touchAction=e.drag===!0?"none":`pan-${e.drag==="x"?"y":"x"}`),e.tabIndex===void 0&&(e.onTap||e.onTapStart||e.whileTap)&&(i.tabIndex=0),i.style=s,i}const validMotionProps=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function isValidMotionProp(e){return e.startsWith("while")||e.startsWith("drag")&&e!=="draggable"||e.startsWith("layout")||e.startsWith("onTap")||e.startsWith("onPan")||validMotionProps.has(e)}let shouldForward=e=>!isValidMotionProp(e);function loadExternalIsValidProp(e){e&&(shouldForward=t=>t.startsWith("on")?!isValidMotionProp(t):e(t))}try{loadExternalIsValidProp(require("@emotion/is-prop-valid").default)}catch(e){}function filterProps(e,t,r){const i={};for(const s in e)s==="values"&&typeof e.values=="object"||(shouldForward(s)||r===!0&&isValidMotionProp(s)||!t&&!isValidMotionProp(s)||e.draggable&&s.startsWith("onDrag"))&&(i[s]=e[s]);return i}function calcOrigin$1(e,t,r){return typeof e=="string"?e:px.transform(t+r*e)}function calcSVGTransformOrigin(e,t,r){const i=calcOrigin$1(t,e.x,e.width),s=calcOrigin$1(r,e.y,e.height);return`${i} ${s}`}const dashKeys={offset:"stroke-dashoffset",array:"stroke-dasharray"},camelKeys={offset:"strokeDashoffset",array:"strokeDasharray"};function buildSVGPath(e,t,r=1,i=0,s=!0){e.pathLength=1;const a=s?dashKeys:camelKeys;e[a.offset]=px.transform(-i);const o=px.transform(t),u=px.transform(r);e[a.array]=`${o} ${u}`}function buildSVGAttrs(e,{attrX:t,attrY:r,attrScale:i,originX:s,originY:a,pathLength:o,pathSpacing:u=1,pathOffset:c=0,...d},g,x,y){if(buildHTMLStyles(e,d,g,y),x){e.style.viewBox&&(e.attrs.viewBox=e.style.viewBox);return}e.attrs=e.style,e.style={};const{attrs:P,style:E,dimensions:T}=e;P.transform&&(T&&(E.transform=P.transform),delete P.transform),T&&(s!==void 0||a!==void 0||E.transform)&&(E.transformOrigin=calcSVGTransformOrigin(T,s!==void 0?s:.5,a!==void 0?a:.5)),t!==void 0&&(P.x=t),r!==void 0&&(P.y=r),i!==void 0&&(P.scale=i),o!==void 0&&buildSVGPath(P,o,u,c,!1)}const createSvgRenderState=()=>({...createHtmlRenderState(),attrs:{}}),isSVGTag=e=>typeof e=="string"&&e.toLowerCase()==="svg";function useSVGProps(e,t,r,i){const s=reactExports.useMemo(()=>{const a=createSvgRenderState();return buildSVGAttrs(a,t,{enableHardwareAcceleration:!1},isSVGTag(i),e.transformTemplate),{...a.attrs,style:{...a.style}}},[t]);if(e.style){const a={};copyRawValuesOnly(a,e.style,e),s.style={...a,...s.style}}return s}function createUseRender(e=!1){return(r,i,s,{latestValues:a},o)=>{const c=(isSVGComponent(r)?useSVGProps:useHTMLProps)(i,a,o,r),g={...filterProps(i,typeof r=="string",e),...c,ref:s},{children:x}=i,y=reactExports.useMemo(()=>isMotionValue(x)?x.get():x,[x]);return reactExports.createElement(r,{...g,children:y})}}function renderHTML(e,{style:t,vars:r},i,s){Object.assign(e.style,t,s&&s.getProjectionStyles(i));for(const a in r)e.style.setProperty(a,r[a])}const camelCaseAttributes=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function renderSVG(e,t,r,i){renderHTML(e,t,void 0,i);for(const s in t.attrs)e.setAttribute(camelCaseAttributes.has(s)?s:camelToDash(s),t.attrs[s])}function scrapeMotionValuesFromProps$1(e,t){const{style:r}=e,i={};for(const s in r)(isMotionValue(r[s])||t.style&&isMotionValue(t.style[s])||isForcedMotionValue(s,e))&&(i[s]=r[s]);return i}function scrapeMotionValuesFromProps(e,t){const r=scrapeMotionValuesFromProps$1(e,t);for(const i in e)if(isMotionValue(e[i])||isMotionValue(t[i])){const s=transformPropOrder.indexOf(i)!==-1?"attr"+i.charAt(0).toUpperCase()+i.substring(1):i;r[s]=e[i]}return r}function resolveVariantFromProps(e,t,r,i={},s={}){return typeof t=="function"&&(t=t(r!==void 0?r:e.custom,i,s)),typeof t=="string"&&(t=e.variants&&e.variants[t]),typeof t=="function"&&(t=t(r!==void 0?r:e.custom,i,s)),t}function useConstant(e){const t=reactExports.useRef(null);return t.current===null&&(t.current=e()),t.current}const isKeyframesTarget=e=>Array.isArray(e),isCustomValue=e=>!!(e&&typeof e=="object"&&e.mix&&e.toValue),resolveFinalValueInKeyframes=e=>isKeyframesTarget(e)?e[e.length-1]||0:e;function resolveMotionValue(e){const t=isMotionValue(e)?e.get():e;return isCustomValue(t)?t.toValue():t}function makeState({scrapeMotionValuesFromProps:e,createRenderState:t,onMount:r},i,s,a){const o={latestValues:makeLatestValues(i,s,a,e),renderState:t()};return r&&(o.mount=u=>r(i,u,o)),o}const makeUseVisualState=e=>(t,r)=>{const i=reactExports.useContext(MotionContext),s=reactExports.useContext(PresenceContext),a=()=>makeState(e,t,i,s);return r?a():useConstant(a)};function makeLatestValues(e,t,r,i){const s={},a=i(e,{});for(const y in a)s[y]=resolveMotionValue(a[y]);let{initial:o,animate:u}=e;const c=isControllingVariants(e),d=isVariantNode(e);t&&d&&!c&&e.inherit!==!1&&(o===void 0&&(o=t.initial),u===void 0&&(u=t.animate));let g=r?r.initial===!1:!1;g=g||o===!1;const x=g?u:o;return x&&typeof x!="boolean"&&!isAnimationControls(x)&&(Array.isArray(x)?x:[x]).forEach(P=>{const E=resolveVariantFromProps(e,P);if(!E)return;const{transitionEnd:T,transition:M,...C}=E;for(const S in C){let b=C[S];if(Array.isArray(b)){const A=g?b.length-1:0;b=b[A]}b!==null&&(s[S]=b)}for(const S in T)s[S]=T[S]}),s}const noop=e=>e;class Queue{constructor(){this.order=[],this.scheduled=new Set}add(t){if(!this.scheduled.has(t))return this.scheduled.add(t),this.order.push(t),!0}remove(t){const r=this.order.indexOf(t);r!==-1&&(this.order.splice(r,1),this.scheduled.delete(t))}clear(){this.order.length=0,this.scheduled.clear()}}function createRenderStep(e){let t=new Queue,r=new Queue,i=0,s=!1,a=!1;const o=new WeakSet,u={schedule:(c,d=!1,g=!1)=>{const x=g&&s,y=x?t:r;return d&&o.add(c),y.add(c)&&x&&s&&(i=t.order.length),c},cancel:c=>{r.remove(c),o.delete(c)},process:c=>{if(s){a=!0;return}if(s=!0,[t,r]=[r,t],r.clear(),i=t.order.length,i)for(let d=0;d<i;d++){const g=t.order[d];g(c),o.has(g)&&(u.schedule(g),e())}s=!1,a&&(a=!1,u.process(c))}};return u}const stepsOrder=["prepare","read","update","preRender","render","postRender"],maxElapsed=40;function createRenderBatcher(e,t){let r=!1,i=!0;const s={delta:0,timestamp:0,isProcessing:!1},a=stepsOrder.reduce((x,y)=>(x[y]=createRenderStep(()=>r=!0),x),{}),o=x=>a[x].process(s),u=()=>{const x=performance.now();r=!1,s.delta=i?1e3/60:Math.max(Math.min(x-s.timestamp,maxElapsed),1),s.timestamp=x,s.isProcessing=!0,stepsOrder.forEach(o),s.isProcessing=!1,r&&t&&(i=!1,e(u))},c=()=>{r=!0,i=!0,s.isProcessing||e(u)};return{schedule:stepsOrder.reduce((x,y)=>{const P=a[y];return x[y]=(E,T=!1,M=!1)=>(r||c(),P.schedule(E,T,M)),x},{}),cancel:x=>stepsOrder.forEach(y=>a[y].cancel(x)),state:s,steps:a}}const{schedule:frame,cancel:cancelFrame,state:frameData,steps}=createRenderBatcher(typeof requestAnimationFrame<"u"?requestAnimationFrame:noop,!0),svgMotionConfig={useVisualState:makeUseVisualState({scrapeMotionValuesFromProps,createRenderState:createSvgRenderState,onMount:(e,t,{renderState:r,latestValues:i})=>{frame.read(()=>{try{r.dimensions=typeof t.getBBox=="function"?t.getBBox():t.getBoundingClientRect()}catch{r.dimensions={x:0,y:0,width:0,height:0}}}),frame.render(()=>{buildSVGAttrs(r,i,{enableHardwareAcceleration:!1},isSVGTag(t.tagName),e.transformTemplate),renderSVG(t,r)})}})},htmlMotionConfig={useVisualState:makeUseVisualState({scrapeMotionValuesFromProps:scrapeMotionValuesFromProps$1,createRenderState:createHtmlRenderState})};function createDomMotionConfig(e,{forwardMotionProps:t=!1},r,i){return{...isSVGComponent(e)?svgMotionConfig:htmlMotionConfig,preloadedFeatures:r,useRender:createUseRender(t),createVisualElement:i,Component:e}}function addDomEvent(e,t,r,i={passive:!0}){return e.addEventListener(t,r,i),()=>e.removeEventListener(t,r)}const isPrimaryPointer=e=>e.pointerType==="mouse"?typeof e.button!="number"||e.button<=0:e.isPrimary!==!1;function extractEventInfo(e,t="page"){return{point:{x:e[t+"X"],y:e[t+"Y"]}}}const addPointerInfo=e=>t=>isPrimaryPointer(t)&&e(t,extractEventInfo(t));function addPointerEvent(e,t,r,i){return addDomEvent(e,t,addPointerInfo(r),i)}const combineFunctions=(e,t)=>r=>t(e(r)),pipe=(...e)=>e.reduce(combineFunctions);function createLock(e){let t=null;return()=>{const r=()=>{t=null};return t===null?(t=e,r):!1}}const globalHorizontalLock=createLock("dragHorizontal"),globalVerticalLock=createLock("dragVertical");function getGlobalLock(e){let t=!1;if(e==="y")t=globalVerticalLock();else if(e==="x")t=globalHorizontalLock();else{const r=globalHorizontalLock(),i=globalVerticalLock();r&&i?t=()=>{r(),i()}:(r&&r(),i&&i())}return t}function isDragActive(){const e=getGlobalLock(!0);return e?(e(),!1):!0}class Feature{constructor(t){this.isMounted=!1,this.node=t}update(){}}function addHoverEvent(e,t){const r="pointer"+(t?"enter":"leave"),i="onHover"+(t?"Start":"End"),s=(a,o)=>{if(a.type==="touch"||isDragActive())return;const u=e.getProps();e.animationState&&u.whileHover&&e.animationState.setActive("whileHover",t),u[i]&&frame.update(()=>u[i](a,o))};return addPointerEvent(e.current,r,s,{passive:!e.getProps()[i]})}class HoverGesture extends Feature{mount(){this.unmount=pipe(addHoverEvent(this.node,!0),addHoverEvent(this.node,!1))}unmount(){}}class FocusGesture extends Feature{constructor(){super(...arguments),this.isActive=!1}onFocus(){let t=!1;try{t=this.node.current.matches(":focus-visible")}catch{t=!0}!t||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){!this.isActive||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=pipe(addDomEvent(this.node.current,"focus",()=>this.onFocus()),addDomEvent(this.node.current,"blur",()=>this.onBlur()))}unmount(){}}const isNodeOrChild=(e,t)=>t?e===t?!0:isNodeOrChild(e,t.parentElement):!1;function fireSyntheticPointerEvent(e,t){if(!t)return;const r=new PointerEvent("pointer"+e);t(r,extractEventInfo(r))}class PressGesture extends Feature{constructor(){super(...arguments),this.removeStartListeners=noop,this.removeEndListeners=noop,this.removeAccessibleListeners=noop,this.startPointerPress=(t,r)=>{if(this.removeEndListeners(),this.isPressing)return;const i=this.node.getProps(),a=addPointerEvent(window,"pointerup",(u,c)=>{if(!this.checkPressEnd())return;const{onTap:d,onTapCancel:g}=this.node.getProps();frame.update(()=>{isNodeOrChild(this.node.current,u.target)?d&&d(u,c):g&&g(u,c)})},{passive:!(i.onTap||i.onPointerUp)}),o=addPointerEvent(window,"pointercancel",(u,c)=>this.cancelPress(u,c),{passive:!(i.onTapCancel||i.onPointerCancel)});this.removeEndListeners=pipe(a,o),this.startPress(t,r)},this.startAccessiblePress=()=>{const t=a=>{if(a.key!=="Enter"||this.isPressing)return;const o=u=>{u.key!=="Enter"||!this.checkPressEnd()||fireSyntheticPointerEvent("up",(c,d)=>{const{onTap:g}=this.node.getProps();g&&frame.update(()=>g(c,d))})};this.removeEndListeners(),this.removeEndListeners=addDomEvent(this.node.current,"keyup",o),fireSyntheticPointerEvent("down",(u,c)=>{this.startPress(u,c)})},r=addDomEvent(this.node.current,"keydown",t),i=()=>{this.isPressing&&fireSyntheticPointerEvent("cancel",(a,o)=>this.cancelPress(a,o))},s=addDomEvent(this.node.current,"blur",i);this.removeAccessibleListeners=pipe(r,s)}}startPress(t,r){this.isPressing=!0;const{onTapStart:i,whileTap:s}=this.node.getProps();s&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),i&&frame.update(()=>i(t,r))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!isDragActive()}cancelPress(t,r){if(!this.checkPressEnd())return;const{onTapCancel:i}=this.node.getProps();i&&frame.update(()=>i(t,r))}mount(){const t=this.node.getProps(),r=addPointerEvent(this.node.current,"pointerdown",this.startPointerPress,{passive:!(t.onTapStart||t.onPointerStart)}),i=addDomEvent(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=pipe(r,i)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}const observerCallbacks=new WeakMap,observers=new WeakMap,fireObserverCallback=e=>{const t=observerCallbacks.get(e.target);t&&t(e)},fireAllObserverCallbacks=e=>{e.forEach(fireObserverCallback)};function initIntersectionObserver({root:e,...t}){const r=e||document;observers.has(r)||observers.set(r,{});const i=observers.get(r),s=JSON.stringify(t);return i[s]||(i[s]=new IntersectionObserver(fireAllObserverCallbacks,{root:e,...t})),i[s]}function observeIntersection(e,t,r){const i=initIntersectionObserver(t);return observerCallbacks.set(e,r),i.observe(e),()=>{observerCallbacks.delete(e),i.unobserve(e)}}const thresholdNames={some:0,all:1};class InViewFeature extends Feature{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:t={}}=this.node.getProps(),{root:r,margin:i,amount:s="some",once:a}=t,o={root:r?r.current:void 0,rootMargin:i,threshold:typeof s=="number"?s:thresholdNames[s]},u=c=>{const{isIntersecting:d}=c;if(this.isInView===d||(this.isInView=d,a&&!d&&this.hasEnteredView))return;d&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",d);const{onViewportEnter:g,onViewportLeave:x}=this.node.getProps(),y=d?g:x;y&&y(c)};return observeIntersection(this.node.current,o,u)}mount(){this.startObserver()}update(){if(typeof IntersectionObserver>"u")return;const{props:t,prevProps:r}=this.node;["amount","margin","root"].some(hasViewportOptionChanged(t,r))&&this.startObserver()}unmount(){}}function hasViewportOptionChanged({viewport:e={}},{viewport:t={}}={}){return r=>e[r]!==t[r]}const gestureAnimations={inView:{Feature:InViewFeature},tap:{Feature:PressGesture},focus:{Feature:FocusGesture},hover:{Feature:HoverGesture}};function shallowCompare(e,t){if(!Array.isArray(t))return!1;const r=t.length;if(r!==e.length)return!1;for(let i=0;i<r;i++)if(t[i]!==e[i])return!1;return!0}function getCurrent(e){const t={};return e.values.forEach((r,i)=>t[i]=r.get()),t}function getVelocity$1(e){const t={};return e.values.forEach((r,i)=>t[i]=r.getVelocity()),t}function resolveVariant(e,t,r){const i=e.getProps();return resolveVariantFromProps(i,t,r!==void 0?r:i.custom,getCurrent(e),getVelocity$1(e))}let warning=noop,invariant=noop;const secondsToMilliseconds=e=>e*1e3,millisecondsToSeconds=e=>e/1e3,instantAnimationState={current:!1},isBezierDefinition=e=>Array.isArray(e)&&typeof e[0]=="number";function isWaapiSupportedEasing(e){return!!(!e||typeof e=="string"&&supportedWaapiEasing[e]||isBezierDefinition(e)||Array.isArray(e)&&e.every(isWaapiSupportedEasing))}const cubicBezierAsString=([e,t,r,i])=>`cubic-bezier(${e}, ${t}, ${r}, ${i})`,supportedWaapiEasing={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:cubicBezierAsString([0,.65,.55,1]),circOut:cubicBezierAsString([.55,0,1,.45]),backIn:cubicBezierAsString([.31,.01,.66,-.59]),backOut:cubicBezierAsString([.33,1.53,.69,.99])};function mapEasingToNativeEasing(e){if(e)return isBezierDefinition(e)?cubicBezierAsString(e):Array.isArray(e)?e.map(mapEasingToNativeEasing):supportedWaapiEasing[e]}function animateStyle(e,t,r,{delay:i=0,duration:s,repeat:a=0,repeatType:o="loop",ease:u,times:c}={}){const d={[t]:r};c&&(d.offset=c);const g=mapEasingToNativeEasing(u);return Array.isArray(g)&&(d.easing=g),e.animate(d,{delay:i,duration:s,easing:Array.isArray(g)?"linear":g,fill:"both",iterations:a+1,direction:o==="reverse"?"alternate":"normal"})}function getFinalKeyframe(e,{repeat:t,repeatType:r="loop"}){const i=t&&r!=="loop"&&t%2===1?0:e.length-1;return e[i]}const calcBezier=(e,t,r)=>(((1-3*r+3*t)*e+(3*r-6*t))*e+3*t)*e,subdivisionPrecision=1e-7,subdivisionMaxIterations=12;function binarySubdivide(e,t,r,i,s){let a,o,u=0;do o=t+(r-t)/2,a=calcBezier(o,i,s)-e,a>0?r=o:t=o;while(Math.abs(a)>subdivisionPrecision&&++u<subdivisionMaxIterations);return o}function cubicBezier(e,t,r,i){if(e===t&&r===i)return noop;const s=a=>binarySubdivide(a,0,1,e,r);return a=>a===0||a===1?a:calcBezier(s(a),t,i)}const easeIn=cubicBezier(.42,0,1,1),easeOut=cubicBezier(0,0,.58,1),easeInOut=cubicBezier(.42,0,.58,1),isEasingArray=e=>Array.isArray(e)&&typeof e[0]!="number",mirrorEasing=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,reverseEasing=e=>t=>1-e(1-t),circIn=e=>1-Math.sin(Math.acos(e)),circOut=reverseEasing(circIn),circInOut=mirrorEasing(circIn),backOut=cubicBezier(.33,1.53,.69,.99),backIn=reverseEasing(backOut),backInOut=mirrorEasing(backIn),anticipate=e=>(e*=2)<1?.5*backIn(e):.5*(2-Math.pow(2,-10*(e-1))),easingLookup={linear:noop,easeIn,easeInOut,easeOut,circIn,circInOut,circOut,backIn,backInOut,backOut,anticipate},easingDefinitionToFunction=e=>{if(Array.isArray(e)){invariant(e.length===4);const[t,r,i,s]=e;return cubicBezier(t,r,i,s)}else if(typeof e=="string")return easingLookup[e];return e},isColorString=(e,t)=>r=>!!(isString(r)&&singleColorRegex.test(r)&&r.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(r,t)),splitColor=(e,t,r)=>i=>{if(!isString(i))return i;const[s,a,o,u]=i.match(floatRegex);return{[e]:parseFloat(s),[t]:parseFloat(a),[r]:parseFloat(o),alpha:u!==void 0?parseFloat(u):1}},clampRgbUnit=e=>clamp(0,255,e),rgbUnit={...number,transform:e=>Math.round(clampRgbUnit(e))},rgba={test:isColorString("rgb","red"),parse:splitColor("red","green","blue"),transform:({red:e,green:t,blue:r,alpha:i=1})=>"rgba("+rgbUnit.transform(e)+", "+rgbUnit.transform(t)+", "+rgbUnit.transform(r)+", "+sanitize(alpha.transform(i))+")"};function parseHex(e){let t="",r="",i="",s="";return e.length>5?(t=e.substring(1,3),r=e.substring(3,5),i=e.substring(5,7),s=e.substring(7,9)):(t=e.substring(1,2),r=e.substring(2,3),i=e.substring(3,4),s=e.substring(4,5),t+=t,r+=r,i+=i,s+=s),{red:parseInt(t,16),green:parseInt(r,16),blue:parseInt(i,16),alpha:s?parseInt(s,16)/255:1}}const hex={test:isColorString("#"),parse:parseHex,transform:rgba.transform},hsla={test:isColorString("hsl","hue"),parse:splitColor("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:r,alpha:i=1})=>"hsla("+Math.round(e)+", "+percent.transform(sanitize(t))+", "+percent.transform(sanitize(r))+", "+sanitize(alpha.transform(i))+")"},color={test:e=>rgba.test(e)||hex.test(e)||hsla.test(e),parse:e=>rgba.test(e)?rgba.parse(e):hsla.test(e)?hsla.parse(e):hex.parse(e),transform:e=>isString(e)?e:e.hasOwnProperty("red")?rgba.transform(e):hsla.transform(e)},mix=(e,t,r)=>-r*e+r*t+e;function hueToRgb(e,t,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?e+(t-e)*6*r:r<1/2?t:r<2/3?e+(t-e)*(2/3-r)*6:e}function hslaToRgba({hue:e,saturation:t,lightness:r,alpha:i}){e/=360,t/=100,r/=100;let s=0,a=0,o=0;if(!t)s=a=o=r;else{const u=r<.5?r*(1+t):r+t-r*t,c=2*r-u;s=hueToRgb(c,u,e+1/3),a=hueToRgb(c,u,e),o=hueToRgb(c,u,e-1/3)}return{red:Math.round(s*255),green:Math.round(a*255),blue:Math.round(o*255),alpha:i}}const mixLinearColor=(e,t,r)=>{const i=e*e;return Math.sqrt(Math.max(0,r*(t*t-i)+i))},colorTypes=[hex,rgba,hsla],getColorType=e=>colorTypes.find(t=>t.test(e));function asRGBA(e){const t=getColorType(e);let r=t.parse(e);return t===hsla&&(r=hslaToRgba(r)),r}const mixColor=(e,t)=>{const r=asRGBA(e),i=asRGBA(t),s={...r};return a=>(s.red=mixLinearColor(r.red,i.red,a),s.green=mixLinearColor(r.green,i.green,a),s.blue=mixLinearColor(r.blue,i.blue,a),s.alpha=mix(r.alpha,i.alpha,a),rgba.transform(s))};function test(e){var t,r;return isNaN(e)&&isString(e)&&(((t=e.match(floatRegex))===null||t===void 0?void 0:t.length)||0)+(((r=e.match(colorRegex))===null||r===void 0?void 0:r.length)||0)>0}const cssVarTokeniser={regex:cssVariableRegex,countKey:"Vars",token:"${v}",parse:noop},colorTokeniser={regex:colorRegex,countKey:"Colors",token:"${c}",parse:color.parse},numberTokeniser={regex:floatRegex,countKey:"Numbers",token:"${n}",parse:number.parse};function tokenise(e,{regex:t,countKey:r,token:i,parse:s}){const a=e.tokenised.match(t);a&&(e["num"+r]=a.length,e.tokenised=e.tokenised.replace(t,i),e.values.push(...a.map(s)))}function analyseComplexValue(e){const t=e.toString(),r={value:t,tokenised:t,values:[],numVars:0,numColors:0,numNumbers:0};return r.value.includes("var(--")&&tokenise(r,cssVarTokeniser),tokenise(r,colorTokeniser),tokenise(r,numberTokeniser),r}function parseComplexValue(e){return analyseComplexValue(e).values}function createTransformer(e){const{values:t,numColors:r,numVars:i,tokenised:s}=analyseComplexValue(e),a=t.length;return o=>{let u=s;for(let c=0;c<a;c++)c<i?u=u.replace(cssVarTokeniser.token,o[c]):c<i+r?u=u.replace(colorTokeniser.token,color.transform(o[c])):u=u.replace(numberTokeniser.token,sanitize(o[c]));return u}}const convertNumbersToZero=e=>typeof e=="number"?0:e;function getAnimatableNone$1(e){const t=parseComplexValue(e);return createTransformer(e)(t.map(convertNumbersToZero))}const complex={test,parse:parseComplexValue,createTransformer,getAnimatableNone:getAnimatableNone$1},mixImmediate=(e,t)=>r=>`${r>0?t:e}`;function getMixer(e,t){return typeof e=="number"?r=>mix(e,t,r):color.test(e)?mixColor(e,t):e.startsWith("var(")?mixImmediate(e,t):mixComplex(e,t)}const mixArray=(e,t)=>{const r=[...e],i=r.length,s=e.map((a,o)=>getMixer(a,t[o]));return a=>{for(let o=0;o<i;o++)r[o]=s[o](a);return r}},mixObject=(e,t)=>{const r={...e,...t},i={};for(const s in r)e[s]!==void 0&&t[s]!==void 0&&(i[s]=getMixer(e[s],t[s]));return s=>{for(const a in i)r[a]=i[a](s);return r}},mixComplex=(e,t)=>{const r=complex.createTransformer(t),i=analyseComplexValue(e),s=analyseComplexValue(t);return i.numVars===s.numVars&&i.numColors===s.numColors&&i.numNumbers>=s.numNumbers?pipe(mixArray(i.values,s.values),r):mixImmediate(e,t)},progress=(e,t,r)=>{const i=t-e;return i===0?1:(r-e)/i},mixNumber=(e,t)=>r=>mix(e,t,r);function detectMixerFactory(e){return typeof e=="number"?mixNumber:typeof e=="string"?color.test(e)?mixColor:mixComplex:Array.isArray(e)?mixArray:typeof e=="object"?mixObject:mixNumber}function createMixers(e,t,r){const i=[],s=r||detectMixerFactory(e[0]),a=e.length-1;for(let o=0;o<a;o++){let u=s(e[o],e[o+1]);if(t){const c=Array.isArray(t)?t[o]||noop:t;u=pipe(c,u)}i.push(u)}return i}function interpolate(e,t,{clamp:r=!0,ease:i,mixer:s}={}){const a=e.length;if(invariant(a===t.length),a===1)return()=>t[0];e[0]>e[a-1]&&(e=[...e].reverse(),t=[...t].reverse());const o=createMixers(t,i,s),u=o.length,c=d=>{let g=0;if(u>1)for(;g<e.length-2&&!(d<e[g+1]);g++);const x=progress(e[g],e[g+1],d);return o[g](x)};return r?d=>c(clamp(e[0],e[a-1],d)):c}function fillOffset(e,t){const r=e[e.length-1];for(let i=1;i<=t;i++){const s=progress(0,t,i);e.push(mix(r,1,s))}}function defaultOffset(e){const t=[0];return fillOffset(t,e.length-1),t}function convertOffsetToTimes(e,t){return e.map(r=>r*t)}function defaultEasing(e,t){return e.map(()=>t||easeInOut).splice(0,e.length-1)}function keyframes({duration:e=300,keyframes:t,times:r,ease:i="easeInOut"}){const s=isEasingArray(i)?i.map(easingDefinitionToFunction):easingDefinitionToFunction(i),a={done:!1,value:t[0]},o=convertOffsetToTimes(r&&r.length===t.length?r:defaultOffset(t),e),u=interpolate(o,t,{ease:Array.isArray(s)?s:defaultEasing(t,s)});return{calculatedDuration:e,next:c=>(a.value=u(c),a.done=c>=e,a)}}function velocityPerSecond(e,t){return t?e*(1e3/t):0}const velocitySampleDuration=5;function calcGeneratorVelocity(e,t,r){const i=Math.max(t-velocitySampleDuration,0);return velocityPerSecond(r-e(i),t-i)}const safeMin=.001,minDuration=.01,maxDuration$1=10,minDamping=.05,maxDamping=1;function findSpring({duration:e=800,bounce:t=.25,velocity:r=0,mass:i=1}){let s,a;warning(e<=secondsToMilliseconds(maxDuration$1));let o=1-t;o=clamp(minDamping,maxDamping,o),e=clamp(minDuration,maxDuration$1,millisecondsToSeconds(e)),o<1?(s=d=>{const g=d*o,x=g*e,y=g-r,P=calcAngularFreq(d,o),E=Math.exp(-x);return safeMin-y/P*E},a=d=>{const x=d*o*e,y=x*r+r,P=Math.pow(o,2)*Math.pow(d,2)*e,E=Math.exp(-x),T=calcAngularFreq(Math.pow(d,2),o);return(-s(d)+safeMin>0?-1:1)*((y-P)*E)/T}):(s=d=>{const g=Math.exp(-d*e),x=(d-r)*e+1;return-safeMin+g*x},a=d=>{const g=Math.exp(-d*e),x=(r-d)*(e*e);return g*x});const u=5/e,c=approximateRoot(s,a,u);if(e=secondsToMilliseconds(e),isNaN(c))return{stiffness:100,damping:10,duration:e};{const d=Math.pow(c,2)*i;return{stiffness:d,damping:o*2*Math.sqrt(i*d),duration:e}}}const rootIterations=12;function approximateRoot(e,t,r){let i=r;for(let s=1;s<rootIterations;s++)i=i-e(i)/t(i);return i}function calcAngularFreq(e,t){return e*Math.sqrt(1-t*t)}const durationKeys=["duration","bounce"],physicsKeys=["stiffness","damping","mass"];function isSpringType(e,t){return t.some(r=>e[r]!==void 0)}function getSpringOptions(e){let t={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...e};if(!isSpringType(e,physicsKeys)&&isSpringType(e,durationKeys)){const r=findSpring(e);t={...t,...r,velocity:0,mass:1},t.isResolvedFromDuration=!0}return t}function spring({keyframes:e,restDelta:t,restSpeed:r,...i}){const s=e[0],a=e[e.length-1],o={done:!1,value:s},{stiffness:u,damping:c,mass:d,velocity:g,duration:x,isResolvedFromDuration:y}=getSpringOptions(i),P=g?-millisecondsToSeconds(g):0,E=c/(2*Math.sqrt(u*d)),T=a-s,M=millisecondsToSeconds(Math.sqrt(u/d)),C=Math.abs(T)<5;r||(r=C?.01:2),t||(t=C?.005:.5);let S;if(E<1){const b=calcAngularFreq(M,E);S=A=>{const R=Math.exp(-E*M*A);return a-R*((P+E*M*T)/b*Math.sin(b*A)+T*Math.cos(b*A))}}else if(E===1)S=b=>a-Math.exp(-M*b)*(T+(P+M*T)*b);else{const b=M*Math.sqrt(E*E-1);S=A=>{const R=Math.exp(-E*M*A),I=Math.min(b*A,300);return a-R*((P+E*M*T)*Math.sinh(I)+b*T*Math.cosh(I))/b}}return{calculatedDuration:y&&x||null,next:b=>{const A=S(b);if(y)o.done=b>=x;else{let R=P;b!==0&&(E<1?R=calcGeneratorVelocity(S,b,A):R=0);const I=Math.abs(R)<=r,D=Math.abs(a-A)<=t;o.done=I&&D}return o.value=o.done?a:A,o}}}function inertia({keyframes:e,velocity:t=0,power:r=.8,timeConstant:i=325,bounceDamping:s=10,bounceStiffness:a=500,modifyTarget:o,min:u,max:c,restDelta:d=.5,restSpeed:g}){const x=e[0],y={done:!1,value:x},P=O=>u!==void 0&&O<u||c!==void 0&&O>c,E=O=>u===void 0?c:c===void 0||Math.abs(u-O)<Math.abs(c-O)?u:c;let T=r*t;const M=x+T,C=o===void 0?M:o(M);C!==M&&(T=C-x);const S=O=>-T*Math.exp(-O/i),b=O=>C+S(O),A=O=>{const j=S(O),W=b(O);y.done=Math.abs(j)<=d,y.value=y.done?C:W};let R,I;const D=O=>{P(y.value)&&(R=O,I=spring({keyframes:[y.value,E(y.value)],velocity:calcGeneratorVelocity(b,O,y.value),damping:s,stiffness:a,restDelta:d,restSpeed:g}))};return D(0),{calculatedDuration:null,next:O=>{let j=!1;return!I&&R===void 0&&(j=!0,A(O),D(O)),R!==void 0&&O>R?I.next(O-R):(!j&&A(O),y)}}}const frameloopDriver=e=>{const t=({timestamp:r})=>e(r);return{start:()=>frame.update(t,!0),stop:()=>cancelFrame(t),now:()=>frameData.isProcessing?frameData.timestamp:performance.now()}},maxGeneratorDuration=2e4;function calcGeneratorDuration(e){let t=0;const r=50;let i=e.next(t);for(;!i.done&&t<maxGeneratorDuration;)t+=r,i=e.next(t);return t>=maxGeneratorDuration?1/0:t}const types={decay:inertia,inertia,tween:keyframes,keyframes,spring};function animateValue({autoplay:e=!0,delay:t=0,driver:r=frameloopDriver,keyframes:i,type:s="keyframes",repeat:a=0,repeatDelay:o=0,repeatType:u="loop",onPlay:c,onStop:d,onComplete:g,onUpdate:x,...y}){let P=1,E=!1,T,M;const C=()=>{M=new Promise(V=>{T=V})};C();let S;const b=types[s]||keyframes;let A;b!==keyframes&&typeof i[0]!="number"&&(A=interpolate([0,100],i,{clamp:!1}),i=[0,100]);const R=b({...y,keyframes:i});let I;u==="mirror"&&(I=b({...y,keyframes:[...i].reverse(),velocity:-(y.velocity||0)}));let D="idle",O=null,j=null,W=null;R.calculatedDuration===null&&a&&(R.calculatedDuration=calcGeneratorDuration(R));const{calculatedDuration:U}=R;let H=1/0,K=1/0;U!==null&&(H=U+o,K=H*(a+1)-o);let $=0;const N=V=>{if(j===null)return;P>0&&(j=Math.min(j,V)),P<0&&(j=Math.min(V-K/P,j)),O!==null?$=O:$=Math.round(V-j)*P;const X=$-t*(P>=0?1:-1),Y=P>=0?X<0:X>K;$=Math.max(X,0),D==="finished"&&O===null&&($=K);let Q=$,te=R;if(a){const pe=$/H;let ce=Math.floor(pe),ae=pe%1;!ae&&pe>=1&&(ae=1),ae===1&&ce--,ce=Math.min(ce,a+1);const ue=!!(ce%2);ue&&(u==="reverse"?(ae=1-ae,o&&(ae-=o/H)):u==="mirror"&&(te=I));let se=clamp(0,1,ae);$>K&&(se=u==="reverse"&&ue?1:0),Q=se*H}const re=Y?{done:!1,value:i[0]}:te.next(Q);A&&(re.value=A(re.value));let{done:le}=re;!Y&&U!==null&&(le=P>=0?$>=K:$<=0);const he=O===null&&(D==="finished"||D==="running"&&le);return x&&x(re.value),he&&_(),re},L=()=>{S&&S.stop(),S=void 0},B=()=>{D="idle",L(),T(),C(),j=W=null},_=()=>{D="finished",g&&g(),L(),T()},F=()=>{if(E)return;S||(S=r(N));const V=S.now();c&&c(),O!==null?j=V-O:(!j||D==="finished")&&(j=V),D==="finished"&&C(),W=j,O=null,D="running",S.start()};e&&F();const z={then(V,X){return M.then(V,X)},get time(){return millisecondsToSeconds($)},set time(V){V=secondsToMilliseconds(V),$=V,O!==null||!S||P===0?O=V:j=S.now()-V/P},get duration(){const V=R.calculatedDuration===null?calcGeneratorDuration(R):R.calculatedDuration;return millisecondsToSeconds(V)},get speed(){return P},set speed(V){V===P||!S||(P=V,z.time=millisecondsToSeconds($))},get state(){return D},play:F,pause:()=>{D="paused",O=$},stop:()=>{E=!0,D!=="idle"&&(D="idle",d&&d(),B())},cancel:()=>{W!==null&&N(W),B()},complete:()=>{D="finished"},sample:V=>(j=0,N(V))};return z}function memo(e){let t;return()=>(t===void 0&&(t=e()),t)}const supportsWaapi=memo(()=>Object.hasOwnProperty.call(Element.prototype,"animate")),acceleratedValues=new Set(["opacity","clipPath","filter","transform","backgroundColor"]),sampleDelta=10,maxDuration=2e4,requiresPregeneratedKeyframes=(e,t)=>t.type==="spring"||e==="backgroundColor"||!isWaapiSupportedEasing(t.ease);function createAcceleratedAnimation(e,t,{onUpdate:r,onComplete:i,...s}){if(!(supportsWaapi()&&acceleratedValues.has(t)&&!s.repeatDelay&&s.repeatType!=="mirror"&&s.damping!==0&&s.type!=="inertia"))return!1;let o=!1,u,c;const d=()=>{c=new Promise(S=>{u=S})};d();let{keyframes:g,duration:x=300,ease:y,times:P}=s;if(requiresPregeneratedKeyframes(t,s)){const S=animateValue({...s,repeat:0,delay:0});let b={done:!1,value:g[0]};const A=[];let R=0;for(;!b.done&&R<maxDuration;)b=S.sample(R),A.push(b.value),R+=sampleDelta;P=void 0,g=A,x=R-sampleDelta,y="linear"}const E=animateStyle(e.owner.current,t,g,{...s,duration:x,ease:y,times:P}),T=()=>E.cancel(),M=()=>{frame.update(T),u(),d()};return E.onfinish=()=>{e.set(getFinalKeyframe(g,s)),i&&i(),M()},{then(S,b){return c.then(S,b)},attachTimeline(S){return E.timeline=S,E.onfinish=null,noop},get time(){return millisecondsToSeconds(E.currentTime||0)},set time(S){E.currentTime=secondsToMilliseconds(S)},get speed(){return E.playbackRate},set speed(S){E.playbackRate=S},get duration(){return millisecondsToSeconds(x)},play:()=>{o||(E.play(),cancelFrame(T))},pause:()=>E.pause(),stop:()=>{if(o=!0,E.playState==="idle")return;const{currentTime:S}=E;if(S){const b=animateValue({...s,autoplay:!1});e.setWithVelocity(b.sample(S-sampleDelta).value,b.sample(S).value,sampleDelta)}M()},complete:()=>E.finish(),cancel:M}}function createInstantAnimation({keyframes:e,delay:t,onUpdate:r,onComplete:i}){const s=()=>(r&&r(e[e.length-1]),i&&i(),{time:0,speed:1,duration:0,play:noop,pause:noop,stop:noop,then:a=>(a(),Promise.resolve()),cancel:noop,complete:noop});return t?animateValue({keyframes:[0,1],duration:0,delay:t,onComplete:s}):s()}const underDampedSpring={type:"spring",stiffness:500,damping:25,restSpeed:10},criticallyDampedSpring=e=>({type:"spring",stiffness:550,damping:e===0?2*Math.sqrt(550):30,restSpeed:10}),keyframesTransition={type:"keyframes",duration:.8},ease={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},getDefaultTransition=(e,{keyframes:t})=>t.length>2?keyframesTransition:transformProps.has(e)?e.startsWith("scale")?criticallyDampedSpring(t[1]):underDampedSpring:ease,isAnimatable=(e,t)=>e==="zIndex"?!1:!!(typeof t=="number"||Array.isArray(t)||typeof t=="string"&&(complex.test(t)||t==="0")&&!t.startsWith("url(")),maxDefaults=new Set(["brightness","contrast","saturate","opacity"]);function applyDefaultFilter(e){const[t,r]=e.slice(0,-1).split("(");if(t==="drop-shadow")return e;const[i]=r.match(floatRegex)||[];if(!i)return e;const s=r.replace(i,"");let a=maxDefaults.has(t)?1:0;return i!==r&&(a*=100),t+"("+a+s+")"}const functionRegex=/([a-z-]*)\(.*?\)/g,filter={...complex,getAnimatableNone:e=>{const t=e.match(functionRegex);return t?t.map(applyDefaultFilter).join(" "):e}},defaultValueTypes={...numberValueTypes,color,backgroundColor:color,outlineColor:color,fill:color,stroke:color,borderColor:color,borderTopColor:color,borderRightColor:color,borderBottomColor:color,borderLeftColor:color,filter,WebkitFilter:filter},getDefaultValueType=e=>defaultValueTypes[e];function getAnimatableNone(e,t){let r=getDefaultValueType(e);return r!==filter&&(r=complex),r.getAnimatableNone?r.getAnimatableNone(t):void 0}const isZeroValueString=e=>/^0[^.\s]+$/.test(e);function isNone(e){if(typeof e=="number")return e===0;if(e!==null)return e==="none"||e==="0"||isZeroValueString(e)}function getKeyframes(e,t,r,i){const s=isAnimatable(t,r);let a;Array.isArray(r)?a=[...r]:a=[null,r];const o=i.from!==void 0?i.from:e.get();let u;const c=[];for(let d=0;d<a.length;d++)a[d]===null&&(a[d]=d===0?o:a[d-1]),isNone(a[d])&&c.push(d),typeof a[d]=="string"&&a[d]!=="none"&&a[d]!=="0"&&(u=a[d]);if(s&&c.length&&u)for(let d=0;d<c.length;d++){const g=c[d];a[g]=getAnimatableNone(t,u)}return a}function isTransitionDefined({when:e,delay:t,delayChildren:r,staggerChildren:i,staggerDirection:s,repeat:a,repeatType:o,repeatDelay:u,from:c,elapsed:d,...g}){return!!Object.keys(g).length}function getValueTransition(e,t){return e[t]||e.default||e}const animateMotionValue=(e,t,r,i={})=>s=>{const a=getValueTransition(i,e)||{},o=a.delay||i.delay||0;let{elapsed:u=0}=i;u=u-secondsToMilliseconds(o);const c=getKeyframes(t,e,r,a),d=c[0],g=c[c.length-1],x=isAnimatable(e,d),y=isAnimatable(e,g);let P={keyframes:c,velocity:t.getVelocity(),ease:"easeOut",...a,delay:-u,onUpdate:E=>{t.set(E),a.onUpdate&&a.onUpdate(E)},onComplete:()=>{s(),a.onComplete&&a.onComplete()}};if(isTransitionDefined(a)||(P={...P,...getDefaultTransition(e,P)}),P.duration&&(P.duration=secondsToMilliseconds(P.duration)),P.repeatDelay&&(P.repeatDelay=secondsToMilliseconds(P.repeatDelay)),!x||!y||instantAnimationState.current||a.type===!1)return createInstantAnimation(P);if(!i.isHandoff&&t.owner&&t.owner.current instanceof HTMLElement&&!t.owner.getProps().onUpdate){const E=createAcceleratedAnimation(t,e,P);if(E)return E}return animateValue(P)};function isWillChangeMotionValue(e){return!!(isMotionValue(e)&&e.add)}const isNumericalString=e=>/^\-?\d*\.?\d+$/.test(e);function addUniqueItem(e,t){e.indexOf(t)===-1&&e.push(t)}function removeItem(e,t){const r=e.indexOf(t);r>-1&&e.splice(r,1)}class SubscriptionManager{constructor(){this.subscriptions=[]}add(t){return addUniqueItem(this.subscriptions,t),()=>removeItem(this.subscriptions,t)}notify(t,r,i){const s=this.subscriptions.length;if(s)if(s===1)this.subscriptions[0](t,r,i);else for(let a=0;a<s;a++){const o=this.subscriptions[a];o&&o(t,r,i)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const isFloat=e=>!isNaN(parseFloat(e)),collectMotionValues={current:void 0};class MotionValue{constructor(t,r={}){this.version="10.16.16",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(i,s=!0)=>{this.prev=this.current,this.current=i;const{delta:a,timestamp:o}=frameData;this.lastUpdated!==o&&(this.timeDelta=a,this.lastUpdated=o,frame.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),s&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>frame.postRender(this.velocityCheck),this.velocityCheck=({timestamp:i})=>{i!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=t,this.canTrackVelocity=isFloat(this.current),this.owner=r.owner}onChange(t){return this.on("change",t)}on(t,r){this.events[t]||(this.events[t]=new SubscriptionManager);const i=this.events[t].add(r);return t==="change"?()=>{i(),frame.read(()=>{this.events.change.getSize()||this.stop()})}:i}clearListeners(){for(const t in this.events)this.events[t].clear()}attach(t,r){this.passiveEffect=t,this.stopPassiveEffect=r}set(t,r=!0){!r||!this.passiveEffect?this.updateAndNotify(t,r):this.passiveEffect(t,this.updateAndNotify)}setWithVelocity(t,r,i){this.set(r),this.prev=t,this.timeDelta=i}jump(t){this.updateAndNotify(t),this.prev=t,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return collectMotionValues.current&&collectMotionValues.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?velocityPerSecond(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(t){return this.stop(),new Promise(r=>{this.hasAnimated=!0,this.animation=t(r),this.events.animationStart&&this.events.animationStart.notify()}).then(()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()})}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function motionValue(e,t){return new MotionValue(e,t)}const testValueType=e=>t=>t.test(e),auto={test:e=>e==="auto",parse:e=>e},dimensionValueTypes=[number,px,percent,degrees,vw,vh,auto],findDimensionValueType=e=>dimensionValueTypes.find(testValueType(e)),valueTypes=[...dimensionValueTypes,color,complex],findValueType=e=>valueTypes.find(testValueType(e));function setMotionValue(e,t,r){e.hasValue(t)?e.getValue(t).set(r):e.addValue(t,motionValue(r))}function setTarget(e,t){const r=resolveVariant(e,t);let{transitionEnd:i={},transition:s={},...a}=r?e.makeTargetAnimatable(r,!1):{};a={...a,...i};for(const o in a){const u=resolveFinalValueInKeyframes(a[o]);setMotionValue(e,o,u)}}function checkTargetForNewValues(e,t,r){var i,s;const a=Object.keys(t).filter(u=>!e.hasValue(u)),o=a.length;if(o)for(let u=0;u<o;u++){const c=a[u],d=t[c];let g=null;Array.isArray(d)&&(g=d[0]),g===null&&(g=(s=(i=r[c])!==null&&i!==void 0?i:e.readValue(c))!==null&&s!==void 0?s:t[c]),g!=null&&(typeof g=="string"&&(isNumericalString(g)||isZeroValueString(g))?g=parseFloat(g):!findValueType(g)&&complex.test(d)&&(g=getAnimatableNone(c,d)),e.addValue(c,motionValue(g,{owner:e})),r[c]===void 0&&(r[c]=g),g!==null&&e.setBaseTarget(c,g))}}function getOriginFromTransition(e,t){return t?(t[e]||t.default||t).from:void 0}function getOrigin(e,t,r){const i={};for(const s in e){const a=getOriginFromTransition(s,t);if(a!==void 0)i[s]=a;else{const o=r.getValue(s);o&&(i[s]=o.get())}}return i}function shouldBlockAnimation({protectedKeys:e,needsAnimating:t},r){const i=e.hasOwnProperty(r)&&t[r]!==!0;return t[r]=!1,i}function hasKeyframesChanged(e,t){const r=e.get();if(Array.isArray(t)){for(let i=0;i<t.length;i++)if(t[i]!==r)return!0}else return r!==t}function animateTarget(e,t,{delay:r=0,transitionOverride:i,type:s}={}){let{transition:a=e.getDefaultTransition(),transitionEnd:o,...u}=e.makeTargetAnimatable(t);const c=e.getValue("willChange");i&&(a=i);const d=[],g=s&&e.animationState&&e.animationState.getState()[s];for(const x in u){const y=e.getValue(x),P=u[x];if(!y||P===void 0||g&&shouldBlockAnimation(g,x))continue;const E={delay:r,elapsed:0,...getValueTransition(a||{},x)};if(window.HandoffAppearAnimations){const C=e.getProps()[optimizedAppearDataAttribute];if(C){const S=window.HandoffAppearAnimations(C,x,y,frame);S!==null&&(E.elapsed=S,E.isHandoff=!0)}}let T=!E.isHandoff&&!hasKeyframesChanged(y,P);if(E.type==="spring"&&(y.getVelocity()||E.velocity)&&(T=!1),y.animation&&(T=!1),T)continue;y.start(animateMotionValue(x,y,P,e.shouldReduceMotion&&transformProps.has(x)?{type:!1}:E));const M=y.animation;isWillChangeMotionValue(c)&&(c.add(x),M.then(()=>c.remove(x))),d.push(M)}return o&&Promise.all(d).then(()=>{o&&setTarget(e,o)}),d}function animateVariant(e,t,r={}){const i=resolveVariant(e,t,r.custom);let{transition:s=e.getDefaultTransition()||{}}=i||{};r.transitionOverride&&(s=r.transitionOverride);const a=i?()=>Promise.all(animateTarget(e,i,r)):()=>Promise.resolve(),o=e.variantChildren&&e.variantChildren.size?(c=0)=>{const{delayChildren:d=0,staggerChildren:g,staggerDirection:x}=s;return animateChildren(e,t,d+c,g,x,r)}:()=>Promise.resolve(),{when:u}=s;if(u){const[c,d]=u==="beforeChildren"?[a,o]:[o,a];return c().then(()=>d())}else return Promise.all([a(),o(r.delay)])}function animateChildren(e,t,r=0,i=0,s=1,a){const o=[],u=(e.variantChildren.size-1)*i,c=s===1?(d=0)=>d*i:(d=0)=>u-d*i;return Array.from(e.variantChildren).sort(sortByTreeOrder).forEach((d,g)=>{d.notify("AnimationStart",t),o.push(animateVariant(d,t,{...a,delay:r+c(g)}).then(()=>d.notify("AnimationComplete",t)))}),Promise.all(o)}function sortByTreeOrder(e,t){return e.sortNodePosition(t)}function animateVisualElement(e,t,r={}){e.notify("AnimationStart",t);let i;if(Array.isArray(t)){const s=t.map(a=>animateVariant(e,a,r));i=Promise.all(s)}else if(typeof t=="string")i=animateVariant(e,t,r);else{const s=typeof t=="function"?resolveVariant(e,t,r.custom):t;i=Promise.all(animateTarget(e,s,r))}return i.then(()=>e.notify("AnimationComplete",t))}const reversePriorityOrder=[...variantPriorityOrder].reverse(),numAnimationTypes=variantPriorityOrder.length;function animateList(e){return t=>Promise.all(t.map(({animation:r,options:i})=>animateVisualElement(e,r,i)))}function createAnimationState(e){let t=animateList(e);const r=createState();let i=!0;const s=(c,d)=>{const g=resolveVariant(e,d);if(g){const{transition:x,transitionEnd:y,...P}=g;c={...c,...P,...y}}return c};function a(c){t=c(e)}function o(c,d){const g=e.getProps(),x=e.getVariantContext(!0)||{},y=[],P=new Set;let E={},T=1/0;for(let C=0;C<numAnimationTypes;C++){const S=reversePriorityOrder[C],b=r[S],A=g[S]!==void 0?g[S]:x[S],R=isVariantLabel(A),I=S===d?b.isActive:null;I===!1&&(T=C);let D=A===x[S]&&A!==g[S]&&R;if(D&&i&&e.manuallyAnimateOnMount&&(D=!1),b.protectedKeys={...E},!b.isActive&&I===null||!A&&!b.prevProp||isAnimationControls(A)||typeof A=="boolean")continue;const O=checkVariantsDidChange(b.prevProp,A);let j=O||S===d&&b.isActive&&!D&&R||C>T&&R;const W=Array.isArray(A)?A:[A];let U=W.reduce(s,{});I===!1&&(U={});const{prevResolvedValues:H={}}=b,K={...H,...U},$=N=>{j=!0,P.delete(N),b.needsAnimating[N]=!0};for(const N in K){const L=U[N],B=H[N];E.hasOwnProperty(N)||(L!==B?isKeyframesTarget(L)&&isKeyframesTarget(B)?!shallowCompare(L,B)||O?$(N):b.protectedKeys[N]=!0:L!==void 0?$(N):P.add(N):L!==void 0&&P.has(N)?$(N):b.protectedKeys[N]=!0)}b.prevProp=A,b.prevResolvedValues=U,b.isActive&&(E={...E,...U}),i&&e.blockInitialAnimation&&(j=!1),j&&!D&&y.push(...W.map(N=>({animation:N,options:{type:S,...c}})))}if(P.size){const C={};P.forEach(S=>{const b=e.getBaseTarget(S);b!==void 0&&(C[S]=b)}),y.push({animation:C})}let M=!!y.length;return i&&(g.initial===!1||g.initial===g.animate)&&!e.manuallyAnimateOnMount&&(M=!1),i=!1,M?t(y):Promise.resolve()}function u(c,d,g){var x;if(r[c].isActive===d)return Promise.resolve();(x=e.variantChildren)===null||x===void 0||x.forEach(P=>{var E;return(E=P.animationState)===null||E===void 0?void 0:E.setActive(c,d)}),r[c].isActive=d;const y=o(g,c);for(const P in r)r[P].protectedKeys={};return y}return{animateChanges:o,setActive:u,setAnimateFunction:a,getState:()=>r}}function checkVariantsDidChange(e,t){return typeof t=="string"?t!==e:Array.isArray(t)?!shallowCompare(t,e):!1}function createTypeState(e=!1){return{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}function createState(){return{animate:createTypeState(!0),whileInView:createTypeState(),whileHover:createTypeState(),whileTap:createTypeState(),whileDrag:createTypeState(),whileFocus:createTypeState(),exit:createTypeState()}}class AnimationFeature extends Feature{constructor(t){super(t),t.animationState||(t.animationState=createAnimationState(t))}updateAnimationControlsSubscription(){const{animate:t}=this.node.getProps();this.unmount(),isAnimationControls(t)&&(this.unmount=t.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:t}=this.node.getProps(),{animate:r}=this.node.prevProps||{};t!==r&&this.updateAnimationControlsSubscription()}unmount(){}}let id$1=0;class ExitAnimationFeature extends Feature{constructor(){super(...arguments),this.id=id$1++}update(){if(!this.node.presenceContext)return;const{isPresent:t,onExitComplete:r,custom:i}=this.node.presenceContext,{isPresent:s}=this.node.prevPresenceContext||{};if(!this.node.animationState||t===s)return;const a=this.node.animationState.setActive("exit",!t,{custom:i??this.node.getProps().custom});r&&!t&&a.then(()=>r(this.id))}mount(){const{register:t}=this.node.presenceContext||{};t&&(this.unmount=t(this.id))}unmount(){}}const animations={animation:{Feature:AnimationFeature},exit:{Feature:ExitAnimationFeature}},distance=(e,t)=>Math.abs(e-t);function distance2D(e,t){const r=distance(e.x,t.x),i=distance(e.y,t.y);return Math.sqrt(r**2+i**2)}class PanSession{constructor(t,r,{transformPagePoint:i,contextWindow:s}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const g=getPanInfo(this.lastMoveEventInfo,this.history),x=this.startEvent!==null,y=distance2D(g.offset,{x:0,y:0})>=3;if(!x&&!y)return;const{point:P}=g,{timestamp:E}=frameData;this.history.push({...P,timestamp:E});const{onStart:T,onMove:M}=this.handlers;x||(T&&T(this.lastMoveEvent,g),this.startEvent=this.lastMoveEvent),M&&M(this.lastMoveEvent,g)},this.handlePointerMove=(g,x)=>{this.lastMoveEvent=g,this.lastMoveEventInfo=transformPoint(x,this.transformPagePoint),frame.update(this.updatePoint,!0)},this.handlePointerUp=(g,x)=>{if(this.end(),!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const{onEnd:y,onSessionEnd:P}=this.handlers,E=getPanInfo(g.type==="pointercancel"?this.lastMoveEventInfo:transformPoint(x,this.transformPagePoint),this.history);this.startEvent&&y&&y(g,E),P&&P(g,E)},!isPrimaryPointer(t))return;this.handlers=r,this.transformPagePoint=i,this.contextWindow=s||window;const a=extractEventInfo(t),o=transformPoint(a,this.transformPagePoint),{point:u}=o,{timestamp:c}=frameData;this.history=[{...u,timestamp:c}];const{onSessionStart:d}=r;d&&d(t,getPanInfo(o,this.history)),this.removeListeners=pipe(addPointerEvent(this.contextWindow,"pointermove",this.handlePointerMove),addPointerEvent(this.contextWindow,"pointerup",this.handlePointerUp),addPointerEvent(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(t){this.handlers=t}end(){this.removeListeners&&this.removeListeners(),cancelFrame(this.updatePoint)}}function transformPoint(e,t){return t?{point:t(e.point)}:e}function subtractPoint(e,t){return{x:e.x-t.x,y:e.y-t.y}}function getPanInfo({point:e},t){return{point:e,delta:subtractPoint(e,lastDevicePoint(t)),offset:subtractPoint(e,startDevicePoint(t)),velocity:getVelocity(t,.1)}}function startDevicePoint(e){return e[0]}function lastDevicePoint(e){return e[e.length-1]}function getVelocity(e,t){if(e.length<2)return{x:0,y:0};let r=e.length-1,i=null;const s=lastDevicePoint(e);for(;r>=0&&(i=e[r],!(s.timestamp-i.timestamp>secondsToMilliseconds(t)));)r--;if(!i)return{x:0,y:0};const a=millisecondsToSeconds(s.timestamp-i.timestamp);if(a===0)return{x:0,y:0};const o={x:(s.x-i.x)/a,y:(s.y-i.y)/a};return o.x===1/0&&(o.x=0),o.y===1/0&&(o.y=0),o}function calcLength(e){return e.max-e.min}function isNear(e,t=0,r=.01){return Math.abs(e-t)<=r}function calcAxisDelta(e,t,r,i=.5){e.origin=i,e.originPoint=mix(t.min,t.max,e.origin),e.scale=calcLength(r)/calcLength(t),(isNear(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=mix(r.min,r.max,e.origin)-e.originPoint,(isNear(e.translate)||isNaN(e.translate))&&(e.translate=0)}function calcBoxDelta(e,t,r,i){calcAxisDelta(e.x,t.x,r.x,i?i.originX:void 0),calcAxisDelta(e.y,t.y,r.y,i?i.originY:void 0)}function calcRelativeAxis(e,t,r){e.min=r.min+t.min,e.max=e.min+calcLength(t)}function calcRelativeBox(e,t,r){calcRelativeAxis(e.x,t.x,r.x),calcRelativeAxis(e.y,t.y,r.y)}function calcRelativeAxisPosition(e,t,r){e.min=t.min-r.min,e.max=e.min+calcLength(t)}function calcRelativePosition(e,t,r){calcRelativeAxisPosition(e.x,t.x,r.x),calcRelativeAxisPosition(e.y,t.y,r.y)}function applyConstraints(e,{min:t,max:r},i){return t!==void 0&&e<t?e=i?mix(t,e,i.min):Math.max(e,t):r!==void 0&&e>r&&(e=i?mix(r,e,i.max):Math.min(e,r)),e}function calcRelativeAxisConstraints(e,t,r){return{min:t!==void 0?e.min+t:void 0,max:r!==void 0?e.max+r-(e.max-e.min):void 0}}function calcRelativeConstraints(e,{top:t,left:r,bottom:i,right:s}){return{x:calcRelativeAxisConstraints(e.x,r,s),y:calcRelativeAxisConstraints(e.y,t,i)}}function calcViewportAxisConstraints(e,t){let r=t.min-e.min,i=t.max-e.max;return t.max-t.min<e.max-e.min&&([r,i]=[i,r]),{min:r,max:i}}function calcViewportConstraints(e,t){return{x:calcViewportAxisConstraints(e.x,t.x),y:calcViewportAxisConstraints(e.y,t.y)}}function calcOrigin(e,t){let r=.5;const i=calcLength(e),s=calcLength(t);return s>i?r=progress(t.min,t.max-i,e.min):i>s&&(r=progress(e.min,e.max-s,t.min)),clamp(0,1,r)}function rebaseAxisConstraints(e,t){const r={};return t.min!==void 0&&(r.min=t.min-e.min),t.max!==void 0&&(r.max=t.max-e.min),r}const defaultElastic=.35;function resolveDragElastic(e=defaultElastic){return e===!1?e=0:e===!0&&(e=defaultElastic),{x:resolveAxisElastic(e,"left","right"),y:resolveAxisElastic(e,"top","bottom")}}function resolveAxisElastic(e,t,r){return{min:resolvePointElastic(e,t),max:resolvePointElastic(e,r)}}function resolvePointElastic(e,t){return typeof e=="number"?e:e[t]||0}const createAxisDelta=()=>({translate:0,scale:1,origin:0,originPoint:0}),createDelta=()=>({x:createAxisDelta(),y:createAxisDelta()}),createAxis=()=>({min:0,max:0}),createBox=()=>({x:createAxis(),y:createAxis()});function eachAxis(e){return[e("x"),e("y")]}function convertBoundingBoxToBox({top:e,left:t,right:r,bottom:i}){return{x:{min:t,max:r},y:{min:e,max:i}}}function convertBoxToBoundingBox({x:e,y:t}){return{top:t.min,right:e.max,bottom:t.max,left:e.min}}function transformBoxPoints(e,t){if(!t)return e;const r=t({x:e.left,y:e.top}),i=t({x:e.right,y:e.bottom});return{top:r.y,left:r.x,bottom:i.y,right:i.x}}function isIdentityScale(e){return e===void 0||e===1}function hasScale({scale:e,scaleX:t,scaleY:r}){return!isIdentityScale(e)||!isIdentityScale(t)||!isIdentityScale(r)}function hasTransform(e){return hasScale(e)||has2DTranslate(e)||e.z||e.rotate||e.rotateX||e.rotateY}function has2DTranslate(e){return is2DTranslate(e.x)||is2DTranslate(e.y)}function is2DTranslate(e){return e&&e!=="0%"}function scalePoint(e,t,r){const i=e-r,s=t*i;return r+s}function applyPointDelta(e,t,r,i,s){return s!==void 0&&(e=scalePoint(e,s,i)),scalePoint(e,r,i)+t}function applyAxisDelta(e,t=0,r=1,i,s){e.min=applyPointDelta(e.min,t,r,i,s),e.max=applyPointDelta(e.max,t,r,i,s)}function applyBoxDelta(e,{x:t,y:r}){applyAxisDelta(e.x,t.translate,t.scale,t.originPoint),applyAxisDelta(e.y,r.translate,r.scale,r.originPoint)}function applyTreeDeltas(e,t,r,i=!1){const s=r.length;if(!s)return;t.x=t.y=1;let a,o;for(let u=0;u<s;u++){a=r[u],o=a.projectionDelta;const c=a.instance;c&&c.style&&c.style.display==="contents"||(i&&a.options.layoutScroll&&a.scroll&&a!==a.root&&transformBox(e,{x:-a.scroll.offset.x,y:-a.scroll.offset.y}),o&&(t.x*=o.x.scale,t.y*=o.y.scale,applyBoxDelta(e,o)),i&&hasTransform(a.latestValues)&&transformBox(e,a.latestValues))}t.x=snapToDefault(t.x),t.y=snapToDefault(t.y)}function snapToDefault(e){return Number.isInteger(e)||e>1.0000000000001||e<.999999999999?e:1}function translateAxis(e,t){e.min=e.min+t,e.max=e.max+t}function transformAxis(e,t,[r,i,s]){const a=t[s]!==void 0?t[s]:.5,o=mix(e.min,e.max,a);applyAxisDelta(e,t[r],t[i],o,t.scale)}const xKeys$1=["x","scaleX","originX"],yKeys$1=["y","scaleY","originY"];function transformBox(e,t){transformAxis(e.x,t,xKeys$1),transformAxis(e.y,t,yKeys$1)}function measureViewportBox(e,t){return convertBoundingBoxToBox(transformBoxPoints(e.getBoundingClientRect(),t))}function measurePageBox(e,t,r){const i=measureViewportBox(e,r),{scroll:s}=t;return s&&(translateAxis(i.x,s.offset.x),translateAxis(i.y,s.offset.y)),i}const getContextWindow=({current:e})=>e?e.ownerDocument.defaultView:null,elementDragControls=new WeakMap;class VisualElementDragControls{constructor(t){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=createBox(),this.visualElement=t}start(t,{snapToCursor:r=!1}={}){const{presenceContext:i}=this.visualElement;if(i&&i.isPresent===!1)return;const s=c=>{this.stopAnimation(),r&&this.snapToCursor(extractEventInfo(c,"page").point)},a=(c,d)=>{const{drag:g,dragPropagation:x,onDragStart:y}=this.getProps();if(g&&!x&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=getGlobalLock(g),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),eachAxis(E=>{let T=this.getAxisMotionValue(E).get()||0;if(percent.test(T)){const{projection:M}=this.visualElement;if(M&&M.layout){const C=M.layout.layoutBox[E];C&&(T=calcLength(C)*(parseFloat(T)/100))}}this.originPoint[E]=T}),y&&frame.update(()=>y(c,d),!1,!0);const{animationState:P}=this.visualElement;P&&P.setActive("whileDrag",!0)},o=(c,d)=>{const{dragPropagation:g,dragDirectionLock:x,onDirectionLock:y,onDrag:P}=this.getProps();if(!g&&!this.openGlobalLock)return;const{offset:E}=d;if(x&&this.currentDirection===null){this.currentDirection=getCurrentDirection(E),this.currentDirection!==null&&y&&y(this.currentDirection);return}this.updateAxis("x",d.point,E),this.updateAxis("y",d.point,E),this.visualElement.render(),P&&P(c,d)},u=(c,d)=>this.stop(c,d);this.panSession=new PanSession(t,{onSessionStart:s,onStart:a,onMove:o,onSessionEnd:u},{transformPagePoint:this.visualElement.getTransformPagePoint(),contextWindow:getContextWindow(this.visualElement)})}stop(t,r){const i=this.isDragging;if(this.cancel(),!i)return;const{velocity:s}=r;this.startAnimation(s);const{onDragEnd:a}=this.getProps();a&&frame.update(()=>a(t,r))}cancel(){this.isDragging=!1;const{projection:t,animationState:r}=this.visualElement;t&&(t.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:i}=this.getProps();!i&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),r&&r.setActive("whileDrag",!1)}updateAxis(t,r,i){const{drag:s}=this.getProps();if(!i||!shouldDrag(t,s,this.currentDirection))return;const a=this.getAxisMotionValue(t);let o=this.originPoint[t]+i[t];this.constraints&&this.constraints[t]&&(o=applyConstraints(o,this.constraints[t],this.elastic[t])),a.set(o)}resolveConstraints(){var t;const{dragConstraints:r,dragElastic:i}=this.getProps(),s=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):(t=this.visualElement.projection)===null||t===void 0?void 0:t.layout,a=this.constraints;r&&isRefObject(r)?this.constraints||(this.constraints=this.resolveRefConstraints()):r&&s?this.constraints=calcRelativeConstraints(s.layoutBox,r):this.constraints=!1,this.elastic=resolveDragElastic(i),a!==this.constraints&&s&&this.constraints&&!this.hasMutatedConstraints&&eachAxis(o=>{this.getAxisMotionValue(o)&&(this.constraints[o]=rebaseAxisConstraints(s.layoutBox[o],this.constraints[o]))})}resolveRefConstraints(){const{dragConstraints:t,onMeasureDragConstraints:r}=this.getProps();if(!t||!isRefObject(t))return!1;const i=t.current,{projection:s}=this.visualElement;if(!s||!s.layout)return!1;const a=measurePageBox(i,s.root,this.visualElement.getTransformPagePoint());let o=calcViewportConstraints(s.layout.layoutBox,a);if(r){const u=r(convertBoxToBoundingBox(o));this.hasMutatedConstraints=!!u,u&&(o=convertBoundingBoxToBox(u))}return o}startAnimation(t){const{drag:r,dragMomentum:i,dragElastic:s,dragTransition:a,dragSnapToOrigin:o,onDragTransitionEnd:u}=this.getProps(),c=this.constraints||{},d=eachAxis(g=>{if(!shouldDrag(g,r,this.currentDirection))return;let x=c&&c[g]||{};o&&(x={min:0,max:0});const y=s?200:1e6,P=s?40:1e7,E={type:"inertia",velocity:i?t[g]:0,bounceStiffness:y,bounceDamping:P,timeConstant:750,restDelta:1,restSpeed:10,...a,...x};return this.startAxisValueAnimation(g,E)});return Promise.all(d).then(u)}startAxisValueAnimation(t,r){const i=this.getAxisMotionValue(t);return i.start(animateMotionValue(t,i,0,r))}stopAnimation(){eachAxis(t=>this.getAxisMotionValue(t).stop())}getAxisMotionValue(t){const r="_drag"+t.toUpperCase(),i=this.visualElement.getProps(),s=i[r];return s||this.visualElement.getValue(t,(i.initial?i.initial[t]:void 0)||0)}snapToCursor(t){eachAxis(r=>{const{drag:i}=this.getProps();if(!shouldDrag(r,i,this.currentDirection))return;const{projection:s}=this.visualElement,a=this.getAxisMotionValue(r);if(s&&s.layout){const{min:o,max:u}=s.layout.layoutBox[r];a.set(t[r]-mix(o,u,.5))}})}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:t,dragConstraints:r}=this.getProps(),{projection:i}=this.visualElement;if(!isRefObject(r)||!i||!this.constraints)return;this.stopAnimation();const s={x:0,y:0};eachAxis(o=>{const u=this.getAxisMotionValue(o);if(u){const c=u.get();s[o]=calcOrigin({min:c,max:c},this.constraints[o])}});const{transformTemplate:a}=this.visualElement.getProps();this.visualElement.current.style.transform=a?a({},""):"none",i.root&&i.root.updateScroll(),i.updateLayout(),this.resolveConstraints(),eachAxis(o=>{if(!shouldDrag(o,t,null))return;const u=this.getAxisMotionValue(o),{min:c,max:d}=this.constraints[o];u.set(mix(c,d,s[o]))})}addListeners(){if(!this.visualElement.current)return;elementDragControls.set(this.visualElement,this);const t=this.visualElement.current,r=addPointerEvent(t,"pointerdown",c=>{const{drag:d,dragListener:g=!0}=this.getProps();d&&g&&this.start(c)}),i=()=>{const{dragConstraints:c}=this.getProps();isRefObject(c)&&(this.constraints=this.resolveRefConstraints())},{projection:s}=this.visualElement,a=s.addEventListener("measure",i);s&&!s.layout&&(s.root&&s.root.updateScroll(),s.updateLayout()),i();const o=addDomEvent(window,"resize",()=>this.scalePositionWithinConstraints()),u=s.addEventListener("didUpdate",({delta:c,hasLayoutChanged:d})=>{this.isDragging&&d&&(eachAxis(g=>{const x=this.getAxisMotionValue(g);x&&(this.originPoint[g]+=c[g].translate,x.set(x.get()+c[g].translate))}),this.visualElement.render())});return()=>{o(),r(),a(),u&&u()}}getProps(){const t=this.visualElement.getProps(),{drag:r=!1,dragDirectionLock:i=!1,dragPropagation:s=!1,dragConstraints:a=!1,dragElastic:o=defaultElastic,dragMomentum:u=!0}=t;return{...t,drag:r,dragDirectionLock:i,dragPropagation:s,dragConstraints:a,dragElastic:o,dragMomentum:u}}}function shouldDrag(e,t,r){return(t===!0||t===e)&&(r===null||r===e)}function getCurrentDirection(e,t=10){let r=null;return Math.abs(e.y)>t?r="y":Math.abs(e.x)>t&&(r="x"),r}class DragGesture extends Feature{constructor(t){super(t),this.removeGroupControls=noop,this.removeListeners=noop,this.controls=new VisualElementDragControls(t)}mount(){const{dragControls:t}=this.node.getProps();t&&(this.removeGroupControls=t.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||noop}unmount(){this.removeGroupControls(),this.removeListeners()}}const asyncHandler=e=>(t,r)=>{e&&frame.update(()=>e(t,r))};class PanGesture extends Feature{constructor(){super(...arguments),this.removePointerDownListener=noop}onPointerDown(t){this.session=new PanSession(t,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:getContextWindow(this.node)})}createPanHandlers(){const{onPanSessionStart:t,onPanStart:r,onPan:i,onPanEnd:s}=this.node.getProps();return{onSessionStart:asyncHandler(t),onStart:asyncHandler(r),onMove:i,onEnd:(a,o)=>{delete this.session,s&&frame.update(()=>s(a,o))}}}mount(){this.removePointerDownListener=addPointerEvent(this.node.current,"pointerdown",t=>this.onPointerDown(t))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}function usePresence(){const e=reactExports.useContext(PresenceContext);if(e===null)return[!0,null];const{isPresent:t,onExitComplete:r,register:i}=e,s=reactExports.useId();return reactExports.useEffect(()=>i(s),[]),!t&&r?[!1,()=>r&&r(s)]:[!0]}const globalProjectionState={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function pixelsToPercent(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}const correctBorderRadius={correct:(e,t)=>{if(!t.target)return e;if(typeof e=="string")if(px.test(e))e=parseFloat(e);else return e;const r=pixelsToPercent(e,t.target.x),i=pixelsToPercent(e,t.target.y);return`${r}% ${i}%`}},correctBoxShadow={correct:(e,{treeScale:t,projectionDelta:r})=>{const i=e,s=complex.parse(e);if(s.length>5)return i;const a=complex.createTransformer(e),o=typeof s[0]!="number"?1:0,u=r.x.scale*t.x,c=r.y.scale*t.y;s[0+o]/=u,s[1+o]/=c;const d=mix(u,c,.5);return typeof s[2+o]=="number"&&(s[2+o]/=d),typeof s[3+o]=="number"&&(s[3+o]/=d),a(s)}};class MeasureLayoutWithContext extends React.Component{componentDidMount(){const{visualElement:t,layoutGroup:r,switchLayoutGroup:i,layoutId:s}=this.props,{projection:a}=t;addScaleCorrector(defaultScaleCorrectors),a&&(r.group&&r.group.add(a),i&&i.register&&s&&i.register(a),a.root.didUpdate(),a.addEventListener("animationComplete",()=>{this.safeToRemove()}),a.setOptions({...a.options,onExitComplete:()=>this.safeToRemove()})),globalProjectionState.hasEverUpdated=!0}getSnapshotBeforeUpdate(t){const{layoutDependency:r,visualElement:i,drag:s,isPresent:a}=this.props,o=i.projection;return o&&(o.isPresent=a,s||t.layoutDependency!==r||r===void 0?o.willUpdate():this.safeToRemove(),t.isPresent!==a&&(a?o.promote():o.relegate()||frame.postRender(()=>{const u=o.getStack();(!u||!u.members.length)&&this.safeToRemove()}))),null}componentDidUpdate(){const{projection:t}=this.props.visualElement;t&&(t.root.didUpdate(),queueMicrotask(()=>{!t.currentAnimation&&t.isLead()&&this.safeToRemove()}))}componentWillUnmount(){const{visualElement:t,layoutGroup:r,switchLayoutGroup:i}=this.props,{projection:s}=t;s&&(s.scheduleCheckAfterUnmount(),r&&r.group&&r.group.remove(s),i&&i.deregister&&i.deregister(s))}safeToRemove(){const{safeToRemove:t}=this.props;t&&t()}render(){return null}}function MeasureLayout(e){const[t,r]=usePresence(),i=reactExports.useContext(LayoutGroupContext);return React.createElement(MeasureLayoutWithContext,{...e,layoutGroup:i,switchLayoutGroup:reactExports.useContext(SwitchLayoutGroupContext),isPresent:t,safeToRemove:r})}const defaultScaleCorrectors={borderRadius:{...correctBorderRadius,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:correctBorderRadius,borderTopRightRadius:correctBorderRadius,borderBottomLeftRadius:correctBorderRadius,borderBottomRightRadius:correctBorderRadius,boxShadow:correctBoxShadow},borders=["TopLeft","TopRight","BottomLeft","BottomRight"],numBorders=borders.length,asNumber=e=>typeof e=="string"?parseFloat(e):e,isPx=e=>typeof e=="number"||px.test(e);function mixValues(e,t,r,i,s,a){s?(e.opacity=mix(0,r.opacity!==void 0?r.opacity:1,easeCrossfadeIn(i)),e.opacityExit=mix(t.opacity!==void 0?t.opacity:1,0,easeCrossfadeOut(i))):a&&(e.opacity=mix(t.opacity!==void 0?t.opacity:1,r.opacity!==void 0?r.opacity:1,i));for(let o=0;o<numBorders;o++){const u=`border${borders[o]}Radius`;let c=getRadius(t,u),d=getRadius(r,u);if(c===void 0&&d===void 0)continue;c||(c=0),d||(d=0),c===0||d===0||isPx(c)===isPx(d)?(e[u]=Math.max(mix(asNumber(c),asNumber(d),i),0),(percent.test(d)||percent.test(c))&&(e[u]+="%")):e[u]=d}(t.rotate||r.rotate)&&(e.rotate=mix(t.rotate||0,r.rotate||0,i))}function getRadius(e,t){return e[t]!==void 0?e[t]:e.borderRadius}const easeCrossfadeIn=compress(0,.5,circOut),easeCrossfadeOut=compress(.5,.95,noop);function compress(e,t,r){return i=>i<e?0:i>t?1:r(progress(e,t,i))}function copyAxisInto(e,t){e.min=t.min,e.max=t.max}function copyBoxInto(e,t){copyAxisInto(e.x,t.x),copyAxisInto(e.y,t.y)}function removePointDelta(e,t,r,i,s){return e-=t,e=scalePoint(e,1/r,i),s!==void 0&&(e=scalePoint(e,1/s,i)),e}function removeAxisDelta(e,t=0,r=1,i=.5,s,a=e,o=e){if(percent.test(t)&&(t=parseFloat(t),t=mix(o.min,o.max,t/100)-o.min),typeof t!="number")return;let u=mix(a.min,a.max,i);e===a&&(u-=t),e.min=removePointDelta(e.min,t,r,u,s),e.max=removePointDelta(e.max,t,r,u,s)}function removeAxisTransforms(e,t,[r,i,s],a,o){removeAxisDelta(e,t[r],t[i],t[s],t.scale,a,o)}const xKeys=["x","scaleX","originX"],yKeys=["y","scaleY","originY"];function removeBoxTransforms(e,t,r,i){removeAxisTransforms(e.x,t,xKeys,r?r.x:void 0,i?i.x:void 0),removeAxisTransforms(e.y,t,yKeys,r?r.y:void 0,i?i.y:void 0)}function isAxisDeltaZero(e){return e.translate===0&&e.scale===1}function isDeltaZero(e){return isAxisDeltaZero(e.x)&&isAxisDeltaZero(e.y)}function boxEquals(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}function boxEqualsRounded(e,t){return Math.round(e.x.min)===Math.round(t.x.min)&&Math.round(e.x.max)===Math.round(t.x.max)&&Math.round(e.y.min)===Math.round(t.y.min)&&Math.round(e.y.max)===Math.round(t.y.max)}function aspectRatio(e){return calcLength(e.x)/calcLength(e.y)}class NodeStack{constructor(){this.members=[]}add(t){addUniqueItem(this.members,t),t.scheduleRender()}remove(t){if(removeItem(this.members,t),t===this.prevLead&&(this.prevLead=void 0),t===this.lead){const r=this.members[this.members.length-1];r&&this.promote(r)}}relegate(t){const r=this.members.findIndex(s=>t===s);if(r===0)return!1;let i;for(let s=r;s>=0;s--){const a=this.members[s];if(a.isPresent!==!1){i=a;break}}return i?(this.promote(i),!0):!1}promote(t,r){const i=this.lead;if(t!==i&&(this.prevLead=i,this.lead=t,t.show(),i)){i.instance&&i.scheduleRender(),t.scheduleRender(),t.resumeFrom=i,r&&(t.resumeFrom.preserveOpacity=!0),i.snapshot&&(t.snapshot=i.snapshot,t.snapshot.latestValues=i.animationValues||i.latestValues),t.root&&t.root.isUpdating&&(t.isLayoutDirty=!0);const{crossfade:s}=t.options;s===!1&&i.hide()}}exitAnimationComplete(){this.members.forEach(t=>{const{options:r,resumingFrom:i}=t;r.onExitComplete&&r.onExitComplete(),i&&i.options.onExitComplete&&i.options.onExitComplete()})}scheduleRender(){this.members.forEach(t=>{t.instance&&t.scheduleRender(!1)})}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function buildProjectionTransform(e,t,r){let i="";const s=e.x.translate/t.x,a=e.y.translate/t.y;if((s||a)&&(i=`translate3d(${s}px, ${a}px, 0) `),(t.x!==1||t.y!==1)&&(i+=`scale(${1/t.x}, ${1/t.y}) `),r){const{rotate:c,rotateX:d,rotateY:g}=r;c&&(i+=`rotate(${c}deg) `),d&&(i+=`rotateX(${d}deg) `),g&&(i+=`rotateY(${g}deg) `)}const o=e.x.scale*t.x,u=e.y.scale*t.y;return(o!==1||u!==1)&&(i+=`scale(${o}, ${u})`),i||"none"}const compareByDepth=(e,t)=>e.depth-t.depth;class FlatTree{constructor(){this.children=[],this.isDirty=!1}add(t){addUniqueItem(this.children,t),this.isDirty=!0}remove(t){removeItem(this.children,t),this.isDirty=!0}forEach(t){this.isDirty&&this.children.sort(compareByDepth),this.isDirty=!1,this.children.forEach(t)}}function delay(e,t){const r=performance.now(),i=({timestamp:s})=>{const a=s-r;a>=t&&(cancelFrame(i),e(a-t))};return frame.read(i,!0),()=>cancelFrame(i)}function record(e){window.MotionDebug&&window.MotionDebug.record(e)}function isSVGElement(e){return e instanceof SVGElement&&e.tagName!=="svg"}function animateSingleValue(e,t,r){const i=isMotionValue(e)?e:motionValue(e);return i.start(animateMotionValue("",i,t,r)),i.animation}const transformAxes=["","X","Y","Z"],hiddenVisibility={visibility:"hidden"},animationTarget=1e3;let id=0;const projectionFrameData={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function createProjectionNode({attachResizeListener:e,defaultParent:t,measureScroll:r,checkIsScrollRoot:i,resetTransform:s}){return class{constructor(o={},u=t==null?void 0:t()){this.id=id++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.projectionUpdateScheduled=!1,projectionFrameData.totalNodes=projectionFrameData.resolvedTargetDeltas=projectionFrameData.recalculatedProjection=0,this.nodes.forEach(propagateDirtyNodes),this.nodes.forEach(resolveTargetDelta),this.nodes.forEach(calcProjection),this.nodes.forEach(cleanDirtyNodes),record(projectionFrameData)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=o,this.root=u?u.root||u:this,this.path=u?[...u.path,u]:[],this.parent=u,this.depth=u?u.depth+1:0;for(let c=0;c<this.path.length;c++)this.path[c].shouldResetTransform=!0;this.root===this&&(this.nodes=new FlatTree)}addEventListener(o,u){return this.eventHandlers.has(o)||this.eventHandlers.set(o,new SubscriptionManager),this.eventHandlers.get(o).add(u)}notifyListeners(o,...u){const c=this.eventHandlers.get(o);c&&c.notify(...u)}hasListeners(o){return this.eventHandlers.has(o)}mount(o,u=this.root.hasTreeAnimated){if(this.instance)return;this.isSVG=isSVGElement(o),this.instance=o;const{layoutId:c,layout:d,visualElement:g}=this.options;if(g&&!g.current&&g.mount(o),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),u&&(d||c)&&(this.isLayoutDirty=!0),e){let x;const y=()=>this.root.updateBlockedByResize=!1;e(o,()=>{this.root.updateBlockedByResize=!0,x&&x(),x=delay(y,250),globalProjectionState.hasAnimatedSinceResize&&(globalProjectionState.hasAnimatedSinceResize=!1,this.nodes.forEach(finishAnimation))})}c&&this.root.registerSharedNode(c,this),this.options.animate!==!1&&g&&(c||d)&&this.addEventListener("didUpdate",({delta:x,hasLayoutChanged:y,hasRelativeTargetChanged:P,layout:E})=>{if(this.isTreeAnimationBlocked()){this.target=void 0,this.relativeTarget=void 0;return}const T=this.options.transition||g.getDefaultTransition()||defaultLayoutTransition,{onLayoutAnimationStart:M,onLayoutAnimationComplete:C}=g.getProps(),S=!this.targetLayout||!boxEqualsRounded(this.targetLayout,E)||P,b=!y&&P;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||b||y&&(S||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(x,b);const A={...getValueTransition(T,"layout"),onPlay:M,onComplete:C};(g.shouldReduceMotion||this.options.layoutRoot)&&(A.delay=0,A.type=!1),this.startAnimation(A)}else y||finishAnimation(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=E})}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const o=this.getStack();o&&o.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,cancelFrame(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(resetRotation),this.animationId++)}getTransformTemplate(){const{visualElement:o}=this.options;return o&&o.getProps().transformTemplate}willUpdate(o=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return}if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let g=0;g<this.path.length;g++){const x=this.path[g];x.shouldResetTransform=!0,x.updateScroll("snapshot"),x.options.layoutRoot&&x.willUpdate(!1)}const{layoutId:u,layout:c}=this.options;if(u===void 0&&!c)return;const d=this.getTransformTemplate();this.prevTransformTemplateValue=d?d(this.latestValues,""):void 0,this.updateSnapshot(),o&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked()){this.unblockUpdate(),this.clearAllSnapshots(),this.nodes.forEach(clearMeasurements);return}this.isUpdating||this.nodes.forEach(clearIsLayoutDirty),this.isUpdating=!1,this.nodes.forEach(resetTransformStyle),this.nodes.forEach(updateLayout),this.nodes.forEach(notifyLayoutUpdate),this.clearAllSnapshots();const u=performance.now();frameData.delta=clamp(0,1e3/60,u-frameData.timestamp),frameData.timestamp=u,frameData.isProcessing=!0,steps.update.process(frameData),steps.preRender.process(frameData),steps.render.process(frameData),frameData.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask(()=>this.update()))}clearAllSnapshots(){this.nodes.forEach(clearSnapshot),this.sharedNodes.forEach(removeLeadSnapshots)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,frame.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){frame.postRender(()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()})}updateSnapshot(){this.snapshot||!this.instance||(this.snapshot=this.measure())}updateLayout(){if(!this.instance||(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let c=0;c<this.path.length;c++)this.path[c].updateScroll();const o=this.layout;this.layout=this.measure(!1),this.layoutCorrected=createBox(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:u}=this.options;u&&u.notify("LayoutMeasure",this.layout.layoutBox,o?o.layoutBox:void 0)}updateScroll(o="measure"){let u=!!(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===o&&(u=!1),u&&(this.scroll={animationId:this.root.animationId,phase:o,isRoot:i(this.instance),offset:r(this.instance)})}resetTransform(){if(!s)return;const o=this.isLayoutDirty||this.shouldResetTransform,u=this.projectionDelta&&!isDeltaZero(this.projectionDelta),c=this.getTransformTemplate(),d=c?c(this.latestValues,""):void 0,g=d!==this.prevTransformTemplateValue;o&&(u||hasTransform(this.latestValues)||g)&&(s(this.instance,d),this.shouldResetTransform=!1,this.scheduleRender())}measure(o=!0){const u=this.measurePageBox();let c=this.removeElementScroll(u);return o&&(c=this.removeTransform(c)),roundBox(c),{animationId:this.root.animationId,measuredBox:u,layoutBox:c,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:o}=this.options;if(!o)return createBox();const u=o.measureViewportBox(),{scroll:c}=this.root;return c&&(translateAxis(u.x,c.offset.x),translateAxis(u.y,c.offset.y)),u}removeElementScroll(o){const u=createBox();copyBoxInto(u,o);for(let c=0;c<this.path.length;c++){const d=this.path[c],{scroll:g,options:x}=d;if(d!==this.root&&g&&x.layoutScroll){if(g.isRoot){copyBoxInto(u,o);const{scroll:y}=this.root;y&&(translateAxis(u.x,-y.offset.x),translateAxis(u.y,-y.offset.y))}translateAxis(u.x,g.offset.x),translateAxis(u.y,g.offset.y)}}return u}applyTransform(o,u=!1){const c=createBox();copyBoxInto(c,o);for(let d=0;d<this.path.length;d++){const g=this.path[d];!u&&g.options.layoutScroll&&g.scroll&&g!==g.root&&transformBox(c,{x:-g.scroll.offset.x,y:-g.scroll.offset.y}),hasTransform(g.latestValues)&&transformBox(c,g.latestValues)}return hasTransform(this.latestValues)&&transformBox(c,this.latestValues),c}removeTransform(o){const u=createBox();copyBoxInto(u,o);for(let c=0;c<this.path.length;c++){const d=this.path[c];if(!d.instance||!hasTransform(d.latestValues))continue;hasScale(d.latestValues)&&d.updateSnapshot();const g=createBox(),x=d.measurePageBox();copyBoxInto(g,x),removeBoxTransforms(u,d.latestValues,d.snapshot?d.snapshot.layoutBox:void 0,g)}return hasTransform(this.latestValues)&&removeBoxTransforms(u,this.latestValues),u}setTargetDelta(o){this.targetDelta=o,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(o){this.options={...this.options,...o,crossfade:o.crossfade!==void 0?o.crossfade:!0}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==frameData.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(o=!1){var u;const c=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=c.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=c.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=c.isSharedProjectionDirty);const d=!!this.resumingFrom||this!==c;if(!(o||d&&this.isSharedProjectionDirty||this.isProjectionDirty||!((u=this.parent)===null||u===void 0)&&u.isProjectionDirty||this.attemptToResolveRelativeTarget))return;const{layout:x,layoutId:y}=this.options;if(!(!this.layout||!(x||y))){if(this.resolvedRelativeTargetAt=frameData.timestamp,!this.targetDelta&&!this.relativeTarget){const P=this.getClosestProjectingParent();P&&P.layout&&this.animationProgress!==1?(this.relativeParent=P,this.forceRelativeParentToResolveTarget(),this.relativeTarget=createBox(),this.relativeTargetOrigin=createBox(),calcRelativePosition(this.relativeTargetOrigin,this.layout.layoutBox,P.layout.layoutBox),copyBoxInto(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(!(!this.relativeTarget&&!this.targetDelta)){if(this.target||(this.target=createBox(),this.targetWithTransforms=createBox()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),calcRelativeBox(this.target,this.relativeTarget,this.relativeParent.target)):this.targetDelta?(this.resumingFrom?this.target=this.applyTransform(this.layout.layoutBox):copyBoxInto(this.target,this.layout.layoutBox),applyBoxDelta(this.target,this.targetDelta)):copyBoxInto(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const P=this.getClosestProjectingParent();P&&!!P.resumingFrom==!!this.resumingFrom&&!P.options.layoutScroll&&P.target&&this.animationProgress!==1?(this.relativeParent=P,this.forceRelativeParentToResolveTarget(),this.relativeTarget=createBox(),this.relativeTargetOrigin=createBox(),calcRelativePosition(this.relativeTargetOrigin,this.target,P.target),copyBoxInto(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}projectionFrameData.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(!(!this.parent||hasScale(this.parent.latestValues)||has2DTranslate(this.parent.latestValues)))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return!!((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var o;const u=this.getLead(),c=!!this.resumingFrom||this!==u;let d=!0;if((this.isProjectionDirty||!((o=this.parent)===null||o===void 0)&&o.isProjectionDirty)&&(d=!1),c&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(d=!1),this.resolvedRelativeTargetAt===frameData.timestamp&&(d=!1),d)return;const{layout:g,layoutId:x}=this.options;if(this.isTreeAnimating=!!(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!(g||x))return;copyBoxInto(this.layoutCorrected,this.layout.layoutBox);const y=this.treeScale.x,P=this.treeScale.y;applyTreeDeltas(this.layoutCorrected,this.treeScale,this.path,c),u.layout&&!u.target&&(this.treeScale.x!==1||this.treeScale.y!==1)&&(u.target=u.layout.layoutBox);const{target:E}=u;if(!E){this.projectionTransform&&(this.projectionDelta=createDelta(),this.projectionTransform="none",this.scheduleRender());return}this.projectionDelta||(this.projectionDelta=createDelta(),this.projectionDeltaWithTransform=createDelta());const T=this.projectionTransform;calcBoxDelta(this.projectionDelta,this.layoutCorrected,E,this.latestValues),this.projectionTransform=buildProjectionTransform(this.projectionDelta,this.treeScale),(this.projectionTransform!==T||this.treeScale.x!==y||this.treeScale.y!==P)&&(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",E)),projectionFrameData.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(o=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),o){const u=this.getStack();u&&u.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(o,u=!1){const c=this.snapshot,d=c?c.latestValues:{},g={...this.latestValues},x=createDelta();(!this.relativeParent||!this.relativeParent.options.layoutRoot)&&(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!u;const y=createBox(),P=c?c.source:void 0,E=this.layout?this.layout.source:void 0,T=P!==E,M=this.getStack(),C=!M||M.members.length<=1,S=!!(T&&!C&&this.options.crossfade===!0&&!this.path.some(hasOpacityCrossfade));this.animationProgress=0;let b;this.mixTargetDelta=A=>{const R=A/1e3;mixAxisDelta(x.x,o.x,R),mixAxisDelta(x.y,o.y,R),this.setTargetDelta(x),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(calcRelativePosition(y,this.layout.layoutBox,this.relativeParent.layout.layoutBox),mixBox(this.relativeTarget,this.relativeTargetOrigin,y,R),b&&boxEquals(this.relativeTarget,b)&&(this.isProjectionDirty=!1),b||(b=createBox()),copyBoxInto(b,this.relativeTarget)),T&&(this.animationValues=g,mixValues(g,d,this.latestValues,R,S,C)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=R},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(o){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(cancelFrame(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=frame.update(()=>{globalProjectionState.hasAnimatedSinceResize=!0,this.currentAnimation=animateSingleValue(0,animationTarget,{...o,onUpdate:u=>{this.mixTargetDelta(u),o.onUpdate&&o.onUpdate(u)},onComplete:()=>{o.onComplete&&o.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0})}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const o=this.getStack();o&&o.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(animationTarget),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const o=this.getLead();let{targetWithTransforms:u,target:c,layout:d,latestValues:g}=o;if(!(!u||!c||!d)){if(this!==o&&this.layout&&d&&shouldAnimatePositionOnly(this.options.animationType,this.layout.layoutBox,d.layoutBox)){c=this.target||createBox();const x=calcLength(this.layout.layoutBox.x);c.x.min=o.target.x.min,c.x.max=c.x.min+x;const y=calcLength(this.layout.layoutBox.y);c.y.min=o.target.y.min,c.y.max=c.y.min+y}copyBoxInto(u,c),transformBox(u,g),calcBoxDelta(this.projectionDeltaWithTransform,this.layoutCorrected,u,g)}}registerSharedNode(o,u){this.sharedNodes.has(o)||this.sharedNodes.set(o,new NodeStack),this.sharedNodes.get(o).add(u);const d=u.options.initialPromotionConfig;u.promote({transition:d?d.transition:void 0,preserveFollowOpacity:d&&d.shouldPreserveFollowOpacity?d.shouldPreserveFollowOpacity(u):void 0})}isLead(){const o=this.getStack();return o?o.lead===this:!0}getLead(){var o;const{layoutId:u}=this.options;return u?((o=this.getStack())===null||o===void 0?void 0:o.lead)||this:this}getPrevLead(){var o;const{layoutId:u}=this.options;return u?(o=this.getStack())===null||o===void 0?void 0:o.prevLead:void 0}getStack(){const{layoutId:o}=this.options;if(o)return this.root.sharedNodes.get(o)}promote({needsReset:o,transition:u,preserveFollowOpacity:c}={}){const d=this.getStack();d&&d.promote(this,c),o&&(this.projectionDelta=void 0,this.needsReset=!0),u&&this.setOptions({transition:u})}relegate(){const o=this.getStack();return o?o.relegate(this):!1}resetRotation(){const{visualElement:o}=this.options;if(!o)return;let u=!1;const{latestValues:c}=o;if((c.rotate||c.rotateX||c.rotateY||c.rotateZ)&&(u=!0),!u)return;const d={};for(let g=0;g<transformAxes.length;g++){const x="rotate"+transformAxes[g];c[x]&&(d[x]=c[x],o.setStaticValue(x,0))}o.render();for(const g in d)o.setStaticValue(g,d[g]);o.scheduleRender()}getProjectionStyles(o){var u,c;if(!this.instance||this.isSVG)return;if(!this.isVisible)return hiddenVisibility;const d={visibility:""},g=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,d.opacity="",d.pointerEvents=resolveMotionValue(o==null?void 0:o.pointerEvents)||"",d.transform=g?g(this.latestValues,""):"none",d;const x=this.getLead();if(!this.projectionDelta||!this.layout||!x.target){const T={};return this.options.layoutId&&(T.opacity=this.latestValues.opacity!==void 0?this.latestValues.opacity:1,T.pointerEvents=resolveMotionValue(o==null?void 0:o.pointerEvents)||""),this.hasProjected&&!hasTransform(this.latestValues)&&(T.transform=g?g({},""):"none",this.hasProjected=!1),T}const y=x.animationValues||x.latestValues;this.applyTransformsToTarget(),d.transform=buildProjectionTransform(this.projectionDeltaWithTransform,this.treeScale,y),g&&(d.transform=g(y,d.transform));const{x:P,y:E}=this.projectionDelta;d.transformOrigin=`${P.origin*100}% ${E.origin*100}% 0`,x.animationValues?d.opacity=x===this?(c=(u=y.opacity)!==null&&u!==void 0?u:this.latestValues.opacity)!==null&&c!==void 0?c:1:this.preserveOpacity?this.latestValues.opacity:y.opacityExit:d.opacity=x===this?y.opacity!==void 0?y.opacity:"":y.opacityExit!==void 0?y.opacityExit:0;for(const T in scaleCorrectors){if(y[T]===void 0)continue;const{correct:M,applyTo:C}=scaleCorrectors[T],S=d.transform==="none"?y[T]:M(y[T],x);if(C){const b=C.length;for(let A=0;A<b;A++)d[C[A]]=S}else d[T]=S}return this.options.layoutId&&(d.pointerEvents=x===this?resolveMotionValue(o==null?void 0:o.pointerEvents)||"":"none"),d}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach(o=>{var u;return(u=o.currentAnimation)===null||u===void 0?void 0:u.stop()}),this.root.nodes.forEach(clearMeasurements),this.root.sharedNodes.clear()}}}function updateLayout(e){e.updateLayout()}function notifyLayoutUpdate(e){var t;const r=((t=e.resumeFrom)===null||t===void 0?void 0:t.snapshot)||e.snapshot;if(e.isLead()&&e.layout&&r&&e.hasListeners("didUpdate")){const{layoutBox:i,measuredBox:s}=e.layout,{animationType:a}=e.options,o=r.source!==e.layout.source;a==="size"?eachAxis(x=>{const y=o?r.measuredBox[x]:r.layoutBox[x],P=calcLength(y);y.min=i[x].min,y.max=y.min+P}):shouldAnimatePositionOnly(a,r.layoutBox,i)&&eachAxis(x=>{const y=o?r.measuredBox[x]:r.layoutBox[x],P=calcLength(i[x]);y.max=y.min+P,e.relativeTarget&&!e.currentAnimation&&(e.isProjectionDirty=!0,e.relativeTarget[x].max=e.relativeTarget[x].min+P)});const u=createDelta();calcBoxDelta(u,i,r.layoutBox);const c=createDelta();o?calcBoxDelta(c,e.applyTransform(s,!0),r.measuredBox):calcBoxDelta(c,i,r.layoutBox);const d=!isDeltaZero(u);let g=!1;if(!e.resumeFrom){const x=e.getClosestProjectingParent();if(x&&!x.resumeFrom){const{snapshot:y,layout:P}=x;if(y&&P){const E=createBox();calcRelativePosition(E,r.layoutBox,y.layoutBox);const T=createBox();calcRelativePosition(T,i,P.layoutBox),boxEqualsRounded(E,T)||(g=!0),x.options.layoutRoot&&(e.relativeTarget=T,e.relativeTargetOrigin=E,e.relativeParent=x)}}}e.notifyListeners("didUpdate",{layout:i,snapshot:r,delta:c,layoutDelta:u,hasLayoutChanged:d,hasRelativeTargetChanged:g})}else if(e.isLead()){const{onExitComplete:i}=e.options;i&&i()}e.options.transition=void 0}function propagateDirtyNodes(e){projectionFrameData.totalNodes++,e.parent&&(e.isProjecting()||(e.isProjectionDirty=e.parent.isProjectionDirty),e.isSharedProjectionDirty||(e.isSharedProjectionDirty=!!(e.isProjectionDirty||e.parent.isProjectionDirty||e.parent.isSharedProjectionDirty)),e.isTransformDirty||(e.isTransformDirty=e.parent.isTransformDirty))}function cleanDirtyNodes(e){e.isProjectionDirty=e.isSharedProjectionDirty=e.isTransformDirty=!1}function clearSnapshot(e){e.clearSnapshot()}function clearMeasurements(e){e.clearMeasurements()}function clearIsLayoutDirty(e){e.isLayoutDirty=!1}function resetTransformStyle(e){const{visualElement:t}=e.options;t&&t.getProps().onBeforeLayoutMeasure&&t.notify("BeforeLayoutMeasure"),e.resetTransform()}function finishAnimation(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0,e.isProjectionDirty=!0}function resolveTargetDelta(e){e.resolveTargetDelta()}function calcProjection(e){e.calcProjection()}function resetRotation(e){e.resetRotation()}function removeLeadSnapshots(e){e.removeLeadSnapshot()}function mixAxisDelta(e,t,r){e.translate=mix(t.translate,0,r),e.scale=mix(t.scale,1,r),e.origin=t.origin,e.originPoint=t.originPoint}function mixAxis(e,t,r,i){e.min=mix(t.min,r.min,i),e.max=mix(t.max,r.max,i)}function mixBox(e,t,r,i){mixAxis(e.x,t.x,r.x,i),mixAxis(e.y,t.y,r.y,i)}function hasOpacityCrossfade(e){return e.animationValues&&e.animationValues.opacityExit!==void 0}const defaultLayoutTransition={duration:.45,ease:[.4,0,.1,1]},userAgentContains=e=>typeof navigator<"u"&&navigator.userAgent.toLowerCase().includes(e),roundPoint=userAgentContains("applewebkit/")&&!userAgentContains("chrome/")?Math.round:noop;function roundAxis(e){e.min=roundPoint(e.min),e.max=roundPoint(e.max)}function roundBox(e){roundAxis(e.x),roundAxis(e.y)}function shouldAnimatePositionOnly(e,t,r){return e==="position"||e==="preserve-aspect"&&!isNear(aspectRatio(t),aspectRatio(r),.2)}const DocumentProjectionNode=createProjectionNode({attachResizeListener:(e,t)=>addDomEvent(e,"resize",t),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),rootProjectionNode={current:void 0},HTMLProjectionNode=createProjectionNode({measureScroll:e=>({x:e.scrollLeft,y:e.scrollTop}),defaultParent:()=>{if(!rootProjectionNode.current){const e=new DocumentProjectionNode({});e.mount(window),e.setOptions({layoutScroll:!0}),rootProjectionNode.current=e}return rootProjectionNode.current},resetTransform:(e,t)=>{e.style.transform=t!==void 0?t:"none"},checkIsScrollRoot:e=>window.getComputedStyle(e).position==="fixed"}),drag={pan:{Feature:PanGesture},drag:{Feature:DragGesture,ProjectionNode:HTMLProjectionNode,MeasureLayout}},splitCSSVariableRegex=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function parseCSSVariable(e){const t=splitCSSVariableRegex.exec(e);if(!t)return[,];const[,r,i]=t;return[r,i]}function getVariableValue(e,t,r=1){const[i,s]=parseCSSVariable(e);if(!i)return;const a=window.getComputedStyle(t).getPropertyValue(i);if(a){const o=a.trim();return isNumericalString(o)?parseFloat(o):o}else return isCSSVariableToken(s)?getVariableValue(s,t,r+1):s}function resolveCSSVariables(e,{...t},r){const i=e.current;if(!(i instanceof Element))return{target:t,transitionEnd:r};r&&(r={...r}),e.values.forEach(s=>{const a=s.get();if(!isCSSVariableToken(a))return;const o=getVariableValue(a,i);o&&s.set(o)});for(const s in t){const a=t[s];if(!isCSSVariableToken(a))continue;const o=getVariableValue(a,i);o&&(t[s]=o,r||(r={}),r[s]===void 0&&(r[s]=a))}return{target:t,transitionEnd:r}}const positionalKeys=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),isPositionalKey=e=>positionalKeys.has(e),hasPositionalKey=e=>Object.keys(e).some(isPositionalKey),isNumOrPxType=e=>e===number||e===px,getPosFromMatrix=(e,t)=>parseFloat(e.split(", ")[t]),getTranslateFromMatrix=(e,t)=>(r,{transform:i})=>{if(i==="none"||!i)return 0;const s=i.match(/^matrix3d\((.+)\)$/);if(s)return getPosFromMatrix(s[1],t);{const a=i.match(/^matrix\((.+)\)$/);return a?getPosFromMatrix(a[1],e):0}},transformKeys=new Set(["x","y","z"]),nonTranslationalTransformKeys=transformPropOrder.filter(e=>!transformKeys.has(e));function removeNonTranslationalTransform(e){const t=[];return nonTranslationalTransformKeys.forEach(r=>{const i=e.getValue(r);i!==void 0&&(t.push([r,i.get()]),i.set(r.startsWith("scale")?1:0))}),t.length&&e.render(),t}const positionalValues={width:({x:e},{paddingLeft:t="0",paddingRight:r="0"})=>e.max-e.min-parseFloat(t)-parseFloat(r),height:({y:e},{paddingTop:t="0",paddingBottom:r="0"})=>e.max-e.min-parseFloat(t)-parseFloat(r),top:(e,{top:t})=>parseFloat(t),left:(e,{left:t})=>parseFloat(t),bottom:({y:e},{top:t})=>parseFloat(t)+(e.max-e.min),right:({x:e},{left:t})=>parseFloat(t)+(e.max-e.min),x:getTranslateFromMatrix(4,13),y:getTranslateFromMatrix(5,14)};positionalValues.translateX=positionalValues.x;positionalValues.translateY=positionalValues.y;const convertChangedValueTypes=(e,t,r)=>{const i=t.measureViewportBox(),s=t.current,a=getComputedStyle(s),{display:o}=a,u={};o==="none"&&t.setStaticValue("display",e.display||"block"),r.forEach(d=>{u[d]=positionalValues[d](i,a)}),t.render();const c=t.measureViewportBox();return r.forEach(d=>{const g=t.getValue(d);g&&g.jump(u[d]),e[d]=positionalValues[d](c,a)}),e},checkAndConvertChangedValueTypes=(e,t,r={},i={})=>{t={...t},i={...i};const s=Object.keys(t).filter(isPositionalKey);let a=[],o=!1;const u=[];if(s.forEach(c=>{const d=e.getValue(c);if(!e.hasValue(c))return;let g=r[c],x=findDimensionValueType(g);const y=t[c];let P;if(isKeyframesTarget(y)){const E=y.length,T=y[0]===null?1:0;g=y[T],x=findDimensionValueType(g);for(let M=T;M<E&&y[M]!==null;M++)P?invariant(findDimensionValueType(y[M])===P):P=findDimensionValueType(y[M])}else P=findDimensionValueType(y);if(x!==P)if(isNumOrPxType(x)&&isNumOrPxType(P)){const E=d.get();typeof E=="string"&&d.set(parseFloat(E)),typeof y=="string"?t[c]=parseFloat(y):Array.isArray(y)&&P===px&&(t[c]=y.map(parseFloat))}else x!=null&&x.transform&&(P!=null&&P.transform)&&(g===0||y===0)?g===0?d.set(P.transform(g)):t[c]=x.transform(y):(o||(a=removeNonTranslationalTransform(e),o=!0),u.push(c),i[c]=i[c]!==void 0?i[c]:t[c],d.jump(y))}),u.length){const c=u.indexOf("height")>=0?window.pageYOffset:null,d=convertChangedValueTypes(t,e,u);return a.length&&a.forEach(([g,x])=>{e.getValue(g).set(x)}),e.render(),isBrowser&&c!==null&&window.scrollTo({top:c}),{target:d,transitionEnd:i}}else return{target:t,transitionEnd:i}};function unitConversion(e,t,r,i){return hasPositionalKey(t)?checkAndConvertChangedValueTypes(e,t,r,i):{target:t,transitionEnd:i}}const parseDomVariant=(e,t,r,i)=>{const s=resolveCSSVariables(e,t,i);return t=s.target,i=s.transitionEnd,unitConversion(e,t,r,i)},prefersReducedMotion={current:null},hasReducedMotionListener={current:!1};function initPrefersReducedMotion(){if(hasReducedMotionListener.current=!0,!!isBrowser)if(window.matchMedia){const e=window.matchMedia("(prefers-reduced-motion)"),t=()=>prefersReducedMotion.current=e.matches;e.addListener(t),t()}else prefersReducedMotion.current=!1}function updateMotionValuesFromProps(e,t,r){const{willChange:i}=t;for(const s in t){const a=t[s],o=r[s];if(isMotionValue(a))e.addValue(s,a),isWillChangeMotionValue(i)&&i.add(s);else if(isMotionValue(o))e.addValue(s,motionValue(a,{owner:e})),isWillChangeMotionValue(i)&&i.remove(s);else if(o!==a)if(e.hasValue(s)){const u=e.getValue(s);!u.hasAnimated&&u.set(a)}else{const u=e.getStaticValue(s);e.addValue(s,motionValue(u!==void 0?u:a,{owner:e}))}}for(const s in r)t[s]===void 0&&e.removeValue(s);return t}const visualElementStore=new WeakMap,featureNames=Object.keys(featureDefinitions),numFeatures=featureNames.length,propEventHandlers=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],numVariantProps=variantProps.length;class VisualElement{constructor({parent:t,props:r,presenceContext:i,reducedMotionConfig:s,visualState:a},o={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>frame.render(this.render,!1,!0);const{latestValues:u,renderState:c}=a;this.latestValues=u,this.baseTarget={...u},this.initialValues=r.initial?{...u}:{},this.renderState=c,this.parent=t,this.props=r,this.presenceContext=i,this.depth=t?t.depth+1:0,this.reducedMotionConfig=s,this.options=o,this.isControllingVariants=isControllingVariants(r),this.isVariantNode=isVariantNode(r),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=!!(t&&t.current);const{willChange:d,...g}=this.scrapeMotionValuesFromProps(r,{});for(const x in g){const y=g[x];u[x]!==void 0&&isMotionValue(y)&&(y.set(u[x],!1),isWillChangeMotionValue(d)&&d.add(x))}}scrapeMotionValuesFromProps(t,r){return{}}mount(t){this.current=t,visualElementStore.set(t,this),this.projection&&!this.projection.instance&&this.projection.mount(t),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach((r,i)=>this.bindToMotionValue(i,r)),hasReducedMotionListener.current||initPrefersReducedMotion(),this.shouldReduceMotion=this.reducedMotionConfig==="never"?!1:this.reducedMotionConfig==="always"?!0:prefersReducedMotion.current,this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){visualElementStore.delete(this.current),this.projection&&this.projection.unmount(),cancelFrame(this.notifyUpdate),cancelFrame(this.render),this.valueSubscriptions.forEach(t=>t()),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const t in this.events)this.events[t].clear();for(const t in this.features)this.features[t].unmount();this.current=null}bindToMotionValue(t,r){const i=transformProps.has(t),s=r.on("change",o=>{this.latestValues[t]=o,this.props.onUpdate&&frame.update(this.notifyUpdate,!1,!0),i&&this.projection&&(this.projection.isTransformDirty=!0)}),a=r.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(t,()=>{s(),a()})}sortNodePosition(t){return!this.current||!this.sortInstanceNodePosition||this.type!==t.type?0:this.sortInstanceNodePosition(this.current,t.current)}loadFeatures({children:t,...r},i,s,a){let o,u;for(let c=0;c<numFeatures;c++){const d=featureNames[c],{isEnabled:g,Feature:x,ProjectionNode:y,MeasureLayout:P}=featureDefinitions[d];y&&(o=y),g(r)&&(!this.features[d]&&x&&(this.features[d]=new x(this)),P&&(u=P))}if(!this.projection&&o){this.projection=new o(this.latestValues,this.parent&&this.parent.projection);const{layoutId:c,layout:d,drag:g,dragConstraints:x,layoutScroll:y,layoutRoot:P}=r;this.projection.setOptions({layoutId:c,layout:d,alwaysMeasureLayout:!!g||x&&isRefObject(x),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:typeof d=="string"?d:"both",initialPromotionConfig:a,layoutScroll:y,layoutRoot:P})}return u}updateFeatures(){for(const t in this.features){const r=this.features[t];r.isMounted?r.update():(r.mount(),r.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):createBox()}getStaticValue(t){return this.latestValues[t]}setStaticValue(t,r){this.latestValues[t]=r}makeTargetAnimatable(t,r=!0){return this.makeTargetAnimatableFromInstance(t,this.props,r)}update(t,r){(t.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=t,this.prevPresenceContext=this.presenceContext,this.presenceContext=r;for(let i=0;i<propEventHandlers.length;i++){const s=propEventHandlers[i];this.propEventSubscriptions[s]&&(this.propEventSubscriptions[s](),delete this.propEventSubscriptions[s]);const a=t["on"+s];a&&(this.propEventSubscriptions[s]=this.on(s,a))}this.prevMotionValues=updateMotionValuesFromProps(this,this.scrapeMotionValuesFromProps(t,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(t){return this.props.variants?this.props.variants[t]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(t=!1){if(t)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const i=this.parent?this.parent.getVariantContext()||{}:{};return this.props.initial!==void 0&&(i.initial=this.props.initial),i}const r={};for(let i=0;i<numVariantProps;i++){const s=variantProps[i],a=this.props[s];(isVariantLabel(a)||a===!1)&&(r[s]=a)}return r}addVariantChild(t){const r=this.getClosestVariantNode();if(r)return r.variantChildren&&r.variantChildren.add(t),()=>r.variantChildren.delete(t)}addValue(t,r){r!==this.values.get(t)&&(this.removeValue(t),this.bindToMotionValue(t,r)),this.values.set(t,r),this.latestValues[t]=r.get()}removeValue(t){this.values.delete(t);const r=this.valueSubscriptions.get(t);r&&(r(),this.valueSubscriptions.delete(t)),delete this.latestValues[t],this.removeValueFromRenderState(t,this.renderState)}hasValue(t){return this.values.has(t)}getValue(t,r){if(this.props.values&&this.props.values[t])return this.props.values[t];let i=this.values.get(t);return i===void 0&&r!==void 0&&(i=motionValue(r,{owner:this}),this.addValue(t,i)),i}readValue(t){var r;return this.latestValues[t]!==void 0||!this.current?this.latestValues[t]:(r=this.getBaseTargetFromProps(this.props,t))!==null&&r!==void 0?r:this.readValueFromInstance(this.current,t,this.options)}setBaseTarget(t,r){this.baseTarget[t]=r}getBaseTarget(t){var r;const{initial:i}=this.props,s=typeof i=="string"||typeof i=="object"?(r=resolveVariantFromProps(this.props,i))===null||r===void 0?void 0:r[t]:void 0;if(i&&s!==void 0)return s;const a=this.getBaseTargetFromProps(this.props,t);return a!==void 0&&!isMotionValue(a)?a:this.initialValues[t]!==void 0&&s===void 0?void 0:this.baseTarget[t]}on(t,r){return this.events[t]||(this.events[t]=new SubscriptionManager),this.events[t].add(r)}notify(t,...r){this.events[t]&&this.events[t].notify(...r)}}class DOMVisualElement extends VisualElement{sortInstanceNodePosition(t,r){return t.compareDocumentPosition(r)&2?1:-1}getBaseTargetFromProps(t,r){return t.style?t.style[r]:void 0}removeValueFromRenderState(t,{vars:r,style:i}){delete r[t],delete i[t]}makeTargetAnimatableFromInstance({transition:t,transitionEnd:r,...i},{transformValues:s},a){let o=getOrigin(i,t||{},this);if(s&&(r&&(r=s(r)),i&&(i=s(i)),o&&(o=s(o))),a){checkTargetForNewValues(this,i,o);const u=parseDomVariant(this,i,o,r);r=u.transitionEnd,i=u.target}return{transition:t,transitionEnd:r,...i}}}function getComputedStyle$1(e){return window.getComputedStyle(e)}class HTMLVisualElement extends DOMVisualElement{readValueFromInstance(t,r){if(transformProps.has(r)){const i=getDefaultValueType(r);return i&&i.default||0}else{const i=getComputedStyle$1(t),s=(isCSSVariableName(r)?i.getPropertyValue(r):i[r])||0;return typeof s=="string"?s.trim():s}}measureInstanceViewportBox(t,{transformPagePoint:r}){return measureViewportBox(t,r)}build(t,r,i,s){buildHTMLStyles(t,r,i,s.transformTemplate)}scrapeMotionValuesFromProps(t,r){return scrapeMotionValuesFromProps$1(t,r)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:t}=this.props;isMotionValue(t)&&(this.childSubscription=t.on("change",r=>{this.current&&(this.current.textContent=`${r}`)}))}renderInstance(t,r,i,s){renderHTML(t,r,i,s)}}class SVGVisualElement extends DOMVisualElement{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(t,r){return t[r]}readValueFromInstance(t,r){if(transformProps.has(r)){const i=getDefaultValueType(r);return i&&i.default||0}return r=camelCaseAttributes.has(r)?r:camelToDash(r),t.getAttribute(r)}measureInstanceViewportBox(){return createBox()}scrapeMotionValuesFromProps(t,r){return scrapeMotionValuesFromProps(t,r)}build(t,r,i,s){buildSVGAttrs(t,r,i,this.isSVGTag,s.transformTemplate)}renderInstance(t,r,i,s){renderSVG(t,r,i,s)}mount(t){this.isSVGTag=isSVGTag(t.tagName),super.mount(t)}}const createDomVisualElement=(e,t)=>isSVGComponent(e)?new SVGVisualElement(t,{enableHardwareAcceleration:!1}):new HTMLVisualElement(t,{enableHardwareAcceleration:!0}),layout={layout:{ProjectionNode:HTMLProjectionNode,MeasureLayout}},preloadedFeatures={...animations,...gestureAnimations,...drag,...layout},motion=createMotionProxy((e,t)=>createDomMotionConfig(e,t,preloadedFeatures,createDomVisualElement)),navigation="",pagination="",scrollbar="",swiper="",BotonesSwiper=()=>{const e=useSwiper();return jsxRuntimeExports.jsxs(jsxRuntimeExports.Fragment,{children:[jsxRuntimeExports.jsx("span",{onClick:()=>e.slideNext(),role:"button",className:"swiper-button-next custom-next-icon","aria-label":"Botón para pasar a la siguiente diapositiva"}),jsxRuntimeExports.jsx("span",{onClick:()=>e.slidePrev(),className:"swiper-button-prev custom-prev-icon","aria-label":"Botón para pasar a la diapositiva anterior"})]})},Slider=reactExports.memo(()=>{const{data:e}=useQuery({queryKey:["services"],staleTime:18e5,refetchOnWindowFocus:!1,refetchOnMount:!1,refetchOnReconnect:!1,refetchInterval:18e5});if(!e)return null;const t=e==null?void 0:e.map(()=>useInView({triggerOnce:!1,threshold:.5})),r={hidden:{opacity:0,y:50},show:{opacity:1,y:0,transition:{duration:1}},exit:{opacity:0,y:50}};return jsxRuntimeExports.jsx(Swiper,{spaceBetween:0,slidesPerView:1,autoplay:{delay:5e3,disableOnInteraction:!1,pauseOnMouseEnter:!0},modules:[Autoplay,Pagination,Navigation,A11y],className:"mySwiper",children:e==null?void 0:e.map((i,s)=>jsxRuntimeExports.jsx(SwiperSlide,{children:jsxRuntimeExports.jsx("div",{className:"container-fluid sliders",style:{backgroundImage:`linear-gradient(to bottom left,rgba(0, 0, 0, 0.8) 0%,rgba(0, 0, 0, 0.7) 35%,rgba(0, 0, 0, 0.8) 100%), url( ${i.imagen})`},children:jsxRuntimeExports.jsx(motion.div,{ref:t[s].ref,variants:r,initial:"hidden",animate:t[s].inView?"show":"hidden",exit:"exit",children:jsxRuntimeExports.jsx("div",{className:"container",children:jsxRuntimeExports.jsx("div",{className:"row",children:jsxRuntimeExports.jsxs("div",{className:"col-12 col-lg-8  description",children:[jsxRuntimeExports.jsx("h1",{className:"title text-capitalize",children:i.nombre}),jsxRuntimeExports.jsx("br",{}),jsxRuntimeExports.jsx("p",{className:"text-white col-12 col-lg-10 ",children:i.descripcion}),jsxRuntimeExports.jsxs("div",{className:"col-12 ",children:[jsxRuntimeExports.jsx("br",{}),jsxRuntimeExports.jsx(Link,{to:"/contact",children:jsxRuntimeExports.jsx("button",{className:"llamado",children:"Contactar"})})]}),jsxRuntimeExports.jsx(BotonesSwiper,{})]})})})})})},s))})}),App$1="",paneles="/static/static/paneles-d37cdd61.jpeg",ProyectPanel="",imagen$1="/static/static/nosotros-f0edd203.jpg",imagenServicios="/static/static/servicios-b9ae097a.png",imagen="/static/static/projects-d98326dc.png",imagenTopografia="/static/static/topo-01ca573f.png",imagenIngenieria="/static/static/ingenieria-0e1c6d5d.png",imagenMedioAmbiente="/static/static/medio-df076d7d.png",AsyncImages=async()=>{const e=await[imagen$1,imagenServicios,imagen,imagenTopografia,imagenIngenieria,imagenMedioAmbiente],t=await[];await e.forEach(r=>{const i=new Image;i.src=r,t.push(i)}),console.log(t,"imagenes cargadas")},ProyectoPanel=reactExports.memo(()=>(reactExports.useEffect(()=>{AsyncImages()},[]),jsxRuntimeExports.jsx("section",{className:"about-us",children:jsxRuntimeExports.jsx("div",{className:"container",children:jsxRuntimeExports.jsxs("div",{className:"row",children:[jsxRuntimeExports.jsx("div",{className:"col-12 col-lg-6 d-flex justify-content-center  ",children:jsxRuntimeExports.jsxs("div",{className:"marco",children:[jsxRuntimeExports.jsx("img",{src:paneles,alt:"paneles",className:"img-paneles"}),jsxRuntimeExports.jsxs("div",{className:"experiencia",children:[jsxRuntimeExports.jsx("h4",{className:"text-center",children:jsxRuntimeExports.jsx("strong",{children:"10 +"})}),jsxRuntimeExports.jsx("h6",{children:"Años de Experiencia"})]})]})}),jsxRuntimeExports.jsxs("div",{className:"col-12 col-lg-6",children:[jsxRuntimeExports.jsx("div",{className:"row",children:jsxRuntimeExports.jsxs("div",{className:"col-12",children:[jsxRuntimeExports.jsx("h6",{children:jsxRuntimeExports.jsx("strong",{children:"Proyectos"})}),jsxRuntimeExports.jsxs("h2",{className:"titulo-proyectos",children:["Innovación y Precisión: ",jsxRuntimeExports.jsx("span",{children:"Nuestra Huella"})," en la Energía Solar"]}),jsxRuntimeExports.jsx("br",{}),jsxRuntimeExports.jsx("p",{children:"Como líderes en ingeniería y topografía, nuestra experiencia abarca una amplia gama de proyectos, demostrando nuestro compromiso con la innovación y la precisión. Nuestro equipo altamente capacitado, equipado con tecnología de vanguardia, ha superado desafíos y se ha adaptado a diversas condiciones y requisitos. Estamos orgullosos de los resultados precisos y eficientes que hemos logrado y esperamos tener la oportunidad de colaborar en tu próximo proyecto."}),jsxRuntimeExports.jsx("p",{children:"Nuestro equipo de trabajo está conformado por profesionales altamente capacitados y con amplia experiencia en el sector, lo que nos permite brindar un servicio de calidad y cumplimiento a nuestros clientes."}),jsxRuntimeExports.jsxs("p",{children:[jsxRuntimeExports.jsx("strong",{children:"¡Descubre cómo estamos dejando nuestra huella en estos sectores cruciales!"}),"."]})]})}),jsxRuntimeExports.jsx("div",{className:"row",children:jsxRuntimeExports.jsx("div",{className:"col-12",children:jsxRuntimeExports.jsx("button",{className:" boton-1 ",children:jsxRuntimeExports.jsx(Link,{to:"/projects",children:" Ver más"})})})})]})]})})}))),proyectoPanel=Object.freeze(Object.defineProperty({__proto__:null,default:ProyectoPanel},Symbol.toStringTag,{value:"Module"})),LazyProyectos=reactExports.lazy(()=>__vitePreload(()=>import("./proyectos-637dd722.js"),["static/proyectos-637dd722.js","static/setionHeader-1ab75cdb.js","static/Recurso 1-101c8ab1.js","static/ScreenSize-8bca974b.js","static/react-1cdf6ce0.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/proyectos-6b00c577.css"])),LazyServicios=reactExports.lazy(()=>__vitePreload(()=>import("./Servicios-d50f1f4b.js"),["static/Servicios-d50f1f4b.js","static/react-1cdf6ce0.js","static/setionHeader-1ab75cdb.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/Servicios-7ee61343.css"])),LazyStatistics=reactExports.lazy(()=>__vitePreload(()=>import("./statistics-01b08047.js"),["static/statistics-01b08047.js","static/react-1cdf6ce0.js","static/resolve-element-aa9e7ea1.js","static/index.esm-90d987f3.js","static/useLazyload-da8a0755.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js","static/statistics-82cccfca.css"])),LazyClients=reactExports.lazy(()=>__vitePreload(()=>import("./clients-73c0205f.js"),["static/clients-73c0205f.js","static/react-1cdf6ce0.js","static/resolve-element-aa9e7ea1.js","static/setionHeader-1ab75cdb.js","static/useLazyload-da8a0755.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js","static/clients-94957311.css"])),LazyEquipos=reactExports.lazy(()=>__vitePreload(()=>import("./Equipos-ecf7fa61.js"),["static/Equipos-ecf7fa61.js","static/Recurso 1-101c8ab1.js","static/setionHeader-1ab75cdb.js","static/useLazyload-da8a0755.js","static/react-1cdf6ce0.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js","static/Equipos-306f34d9.css"])),LazyContact=reactExports.lazy(()=>__vitePreload(()=>import("./contact-ebcd0e53.js"),["static/contact-ebcd0e53.js","static/react-1cdf6ce0.js","static/index-74ac2791.js","static/ScreenSize-8bca974b.js","static/useLazyload-da8a0755.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js","static/contact-9274f72c.css"]));function App(){return jsxRuntimeExports.jsx(jsxRuntimeExports.Fragment,{children:jsxRuntimeExports.jsxs(PagesLayout,{children:[jsxRuntimeExports.jsx(Slider,{}),jsxRuntimeExports.jsx(ProyectoPanel,{}),jsxRuntimeExports.jsx(LazyServicios,{}),jsxRuntimeExports.jsx(LazyProyectos,{}),jsxRuntimeExports.jsx("br",{}),jsxRuntimeExports.jsx("br",{}),jsxRuntimeExports.jsx(LazyStatistics,{}),jsxRuntimeExports.jsx(LazyClients,{}),jsxRuntimeExports.jsx(LazyEquipos,{}),jsxRuntimeExports.jsx(LazyContact,{})]})})}const useSigninMutation=()=>useMutation({mutationKey:["signin"],mutationFn:async({email:e,password:t})=>(await apiClient.post("auth/jwt/create/",{email:e,password:t})).data,onSuccess:async e=>{await localStorage.setItem("token",e.access),await localStorage.setItem("refreshToken",e.refresh)}}),useRefreshToken=async()=>{let e=!1;return await apiClient.post("auth/jwt/refresh/",{refresh:localStorage.getItem("refreshToken")}).then(async t=>{console.log("refresh token antes de guardar",localStorage.getItem("refreshToken")),await localStorage.setItem("token",t.data.access),await console.log("refresh token despues de guardar",localStorage.getItem("refreshToken")),e=!0}).catch(t=>{console.log(t,"error aqui estoy en useRefreshTokenMutation"),localStorage.removeItem("token"),localStorage.removeItem("refreshToken"),e=!1}),e},useVerfyToken=async()=>{let e=!1;return await apiClient.post("auth/jwt/verify/",{token:localStorage.getItem("token")}).then(()=>{e=!0}).catch(async t=>{console.log(t,"error aqui estoy en useVerfyTokenMutation");const r=await useRefreshToken();console.log(r,"successrefresh aqui estoy en useVerfyTokenMutation"),r&&(e=!0)}),e},AuthContext=reactExports.createContext({isTokenValid:!1,firstView:0,firstViewCount:()=>{},validateToken:()=>{},logout:()=>{}});let contador=0;function AuthProvider({children:e}){const[t,r]=reactExports.useState(!1),[i,s]=reactExports.useState(!0),[a,o]=reactExports.useState(0),u=()=>{o(a+1)},c=async()=>{console.log("logout"+contador++),await localStorage.removeItem("token"),await localStorage.removeItem("refreshToken"),r(!1)},d=async()=>{if(!await localStorage.getItem("token")){console.log("no hay token"),r(!1),s(!1);return}const x=await useVerfyToken();if(console.log(x,"successToken====================================="),x){console.log("token valido"),r(!0),s(!1);return}s(!1)};return reactExports.useEffect(()=>{d()},[]),jsxRuntimeExports.jsx(AuthContext.Provider,{value:{isTokenValid:t,firstView:a,validateToken:d,logout:c,firstViewCount:u},children:i?jsxRuntimeExports.jsx("div",{children:"loading..."}):e})}function useAuth(){const e=reactExports.useContext(AuthContext);if(!e)throw new Error("useAuth must be used within an AuthProvider");return e}function ProtectedRoute(){return console.log("ProtectedRoute"),useAuth().isTokenValid?jsxRuntimeExports.jsx(Outlet,{}):jsxRuntimeExports.jsx(Navigate,{to:"/login"})}const bootstrap_min="",index="";var ReactQueryDevtools2=function(){return null};const createSitemap=(e,t)=>`
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            ${e.map(s=>{const a=new URL(t+s.path);let o="monthly",u=.5,c=new Date().toISOString().split("T")[0];return s.path==="/"?u=1:s.path==="/servicios"?u=.9:s.path==="/aboutUs"&&(u=.8),`
            <url>
                <loc>${a.href}</loc>
                <lastmod>${c}</lastmod>
                <changefreq>${o}</changefreq>
                <priority>${u}</priority>
            </url>
        `}).join(`
`)}
        </urlset>
    `,Sitemap=()=>{const r=createSitemap([{path:"/"},{path:"/login"},{path:"/aboutUs"},{path:"/services_topografia"},{path:"/services_ingenieria"},{path:"/services_ambiental"},{path:"/servicios"},{path:"/servicios/:id"},{path:"/projects"},{path:"/projects/:id"},{path:"/contact"},{path:"/blog"},{path:"/blog/:id"},{path:"/",children:[{path:"/cotizador"}]}],APIURL);return jsxRuntimeExports.jsx("pre",{children:r})},Login=React.lazy(()=>__vitePreload(()=>import("./login-0972efa9.js"),["static/login-0972efa9.js","static/react-1cdf6ce0.js","static/useLazyload-da8a0755.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/login-8a9de2ec.css"])),Cotizador=React.lazy(()=>__vitePreload(()=>import("./cotizador-c99d5927.js"),["static/cotizador-c99d5927.js","static/react-1cdf6ce0.js","static/useLazyload-da8a0755.js","static/react-dom-983a5519.js","static/react-router-dom-6615ee3c.js"])),AboutUs=React.lazy(()=>__vitePreload(()=>import("./aboutUs-18f06574.js"),["static/aboutUs-18f06574.js","static/react-1cdf6ce0.js","static/banner-c7fe45a6.js","static/index.esm-90d987f3.js","static/index.esm-59187f3a.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/banner-14f0fbed.css","static/index.esm-135f59b5.js","static/aboutUs-5367be92.css"])),Projects=React.lazy(()=>__vitePreload(()=>import("./projects-79a39f18.js"),["static/projects-79a39f18.js","static/banner-c7fe45a6.js","static/index.esm-90d987f3.js","static/react-1cdf6ce0.js","static/index.esm-59187f3a.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/banner-14f0fbed.css","static/cardsProjects-82d6475b.js","static/useLazyload-da8a0755.js","static/cardsProjects-577b53fd.css"])),ServecesDetail=React.lazy(()=>__vitePreload(()=>import("./servecesDetail-5fc9ad43.js"),["static/servecesDetail-5fc9ad43.js","static/react-1cdf6ce0.js","static/index.esm-37eb7c17.js","static/index.esm-90d987f3.js","static/banner-c7fe45a6.js","static/index.esm-59187f3a.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/banner-14f0fbed.css","static/ScreenSize-8bca974b.js","static/index-74ac2791.js","static/servecesDetail-da5155c3.css"])),ProjectDetail=React.lazy(()=>__vitePreload(()=>import("./projecsDetail-e001ac46.js"),["static/projecsDetail-e001ac46.js","static/react-1cdf6ce0.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/banner-c7fe45a6.js","static/index.esm-90d987f3.js","static/index.esm-59187f3a.js","static/banner-14f0fbed.css","static/projecsDetail-8b168550.css"])),ContactPage=React.lazy(()=>__vitePreload(()=>import("./contact-626a92a3.js"),["static/contact-626a92a3.js","static/react-1cdf6ce0.js","static/banner-c7fe45a6.js","static/index.esm-90d987f3.js","static/index.esm-59187f3a.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/banner-14f0fbed.css","static/index.esm-135f59b5.js","static/contact-69420918.css"])),BlogDetail=React.lazy(()=>__vitePreload(()=>import("./blogDetail-4250fe3d.js"),["static/blogDetail-4250fe3d.js","static/sidebarBolgs-d2e048e3.js","static/react-1cdf6ce0.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/floawhatsapp-1b7d5e68.js","static/footer1-48ade6b9.js","static/index.esm-90d987f3.js","static/index.esm-135f59b5.js","static/footer1-8a106b42.css","static/index.esm-37eb7c17.js","static/sidebarBolgs-76b71244.css"])),Blog=React.lazy(()=>__vitePreload(()=>import("./blog-e16a633d.js"),["static/blog-e16a633d.js","static/react-1cdf6ce0.js","static/sidebarBolgs-d2e048e3.js","static/react-router-dom-6615ee3c.js","static/react-dom-983a5519.js","static/useLazyload-da8a0755.js","static/floawhatsapp-1b7d5e68.js","static/footer1-48ade6b9.js","static/index.esm-90d987f3.js","static/index.esm-135f59b5.js","static/footer1-8a106b42.css","static/index.esm-37eb7c17.js","static/sidebarBolgs-76b71244.css","static/index.esm-59187f3a.js"])),queryClient=new QueryClient,router=createBrowserRouter([{path:"/",element:jsxRuntimeExports.jsx(App,{})},{path:"/sitemap.xml",element:jsxRuntimeExports.jsx(Sitemap,{})},{path:"/login",element:jsxRuntimeExports.jsx(Login,{})},{path:"/aboutUs",element:jsxRuntimeExports.jsx(AboutUs,{})},{path:"/servicios",element:jsxRuntimeExports.jsx(ServecesDetail,{issue:"Servicios"})},{path:"/servicios/:id",element:jsxRuntimeExports.jsx(ServecesDetail,{issue:"detailservices"})},{path:"/projects",element:jsxRuntimeExports.jsx(Projects,{})},{path:"/projects/:projectArg",element:jsxRuntimeExports.jsx(ProjectDetail,{})},{path:"/contact",element:jsxRuntimeExports.jsx(ContactPage,{})},{path:"/blog",element:jsxRuntimeExports.jsx(Blog,{})},{path:"/blog/:id",element:jsxRuntimeExports.jsx(BlogDetail,{})},{path:"/",element:jsxRuntimeExports.jsx(ProtectedRoute,{}),children:[{path:"/cotizador",element:jsxRuntimeExports.jsx(Cotizador,{})}]}]);client.createRoot(document.getElementById("root")).render(jsxRuntimeExports.jsx(React.StrictMode,{children:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(QueryClientProvider,{client:queryClient,children:jsxRuntimeExports.jsx(ServiciosIdProvider,{children:jsxRuntimeExports.jsxs(AuthProvider,{children:[jsxRuntimeExports.jsx(RouterProvider,{router}),jsxRuntimeExports.jsx(ReactQueryDevtools2,{initialIsOpen:!1})]})})})})}));export{invariant as $,Autoplay as A,useMutation as B,apiClient as C,Navbar$1 as D,SvgComponent as E,Nav$1 as F,interpolate as G,useIsomorphicLayoutEffect as H,cancelFrame as I,frame as J,collectMotionValues as K,useConstant as L,progress as M,NavBar as N,velocityPerSecond as O,PropTypes as P,QueryObserver as Q,defaultOffset as R,Swiper as S,frameData as T,warning as U,motionValue as V,MotionConfigContext as W,isMotionValue as X,animateValue as Y,millisecondsToSeconds as Z,__vitePreload as _,useButtonProps as a,APIURL as a0,PresenceContext as a1,LayoutGroupContext as a2,fetchBrochure as a3,spinner as a4,proyectoPanel as a5,useBootstrapBreakpoints as b,classNames as c,useBootstrapMinBreakpoint as d,useSigninMutation as e,useAuth as f,PagesLayout as g,useQuery as h,imagen$1 as i,jsxRuntimeExports as j,imagen as k,Pagination as l,Navigation as m,SwiperSlide as n,imagenServicios as o,imagenTopografia as p,imagenIngenieria as q,imagenMedioAmbiente as r,motion as s,getSlideTransformEl as t,useBootstrapPrefix as u,elementTransitionEnd as v,infiniteQueryBehavior as w,hasNextPage as x,hasPreviousPage as y,useBaseQuery as z};


//# sourceMappingURL=data:application/json;base64,