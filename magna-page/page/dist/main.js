var ae=(t,e,r)=>{if(!e.has(t))throw TypeError("Cannot "+r)};var B=(t,e,r)=>(ae(t,e,"read from private field"),r?r.call(t):e.get(t)),Y=(t,e,r)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,r)},Q=(t,e,r,i)=>(ae(t,e,"write to private field"),i?i.call(t,r):e.set(t,r),r);var ie=(t,e,r,i)=>({set _(s){Q(t,e,s,r)},get _(){return B(t,e,i)}}),J=(t,e,r)=>(ae(t,e,"access private method"),r);import{r as reactExports,g as getDefaultExportFromCjs,j as jsxRuntimeExports,c as commonjsGlobal,R as React,_ as __vitePreload}from"./jsx-runtime-e1ec7694.js";import{r as reactDomExports,c as createBrowserRouter,R as RouterProvider}from"./index-aa9e9be7.js";import{i as isValidTimeout,a as isServer,r as replaceData,n as noop$1,t as timeUntilStale,c as createRetryer,b as notifyManager,d as isCancelledError,e as canFetch,S as Subscribable,h as hashQueryKeyByOptions,m as matchQuery,f as matchMutation,g as addToStart,j as addToEnd,k as focusManager,o as onlineManager,l as functionalUpdate,p as hashKey,q as partialMatchKey,s as shallowEqualObjects,u as useQueryClient,v as shouldThrowError,Q as QueryClientProvider}from"./utils-2d216c44.js";import{a as apiClient,A as APIURL}from"./apiClient-4214bebe.js";import{O as Outlet,N as Navigate}from"./index-3886bb60.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const n of s)if(n.type==="childList")for(const a of n.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&i(a)}).observe(document,{childList:!0,subtree:!0});function r(s){const n={};return s.integrity&&(n.integrity=s.integrity),s.referrerPolicy&&(n.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?n.credentials="include":s.crossOrigin==="anonymous"?n.credentials="omit":n.credentials="same-origin",n}function i(s){if(s.ep)return;s.ep=!0;const n=r(s);fetch(s.href,n)}})();var client={},m=reactDomExports;client.createRoot=m.createRoot,client.hydrateRoot=m.hydrateRoot;var Bt,he,Removable=(he=class{constructor(){Y(this,Bt,void 0)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),isValidTimeout(this.gcTime)&&Q(this,Bt,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(t){this.gcTime=Math.max(this.gcTime||0,t??(isServer?1/0:5*60*1e3))}clearGcTimeout(){B(this,Bt)&&(clearTimeout(B(this,Bt)),Q(this,Bt,void 0))}},Bt=new WeakMap,he),jt,Nt,lt,It,ft,et,Yt,Gt,Ht,se,dt,Ct,le,Query=(le=class extends Removable{constructor(e){super();Y(this,Ht);Y(this,dt);Y(this,jt,void 0);Y(this,Nt,void 0);Y(this,lt,void 0);Y(this,It,void 0);Y(this,ft,void 0);Y(this,et,void 0);Y(this,Yt,void 0);Y(this,Gt,void 0);Q(this,Gt,!1),Q(this,Yt,e.defaultOptions),J(this,Ht,se).call(this,e.options),Q(this,et,[]),Q(this,lt,e.cache),this.queryKey=e.queryKey,this.queryHash=e.queryHash,Q(this,jt,e.state||getDefaultState$1(this.options)),this.state=B(this,jt),this.scheduleGc()}get meta(){return this.options.meta}optionalRemove(){!B(this,et).length&&this.state.fetchStatus==="idle"&&B(this,lt).remove(this)}setData(e,r){const i=replaceData(this.state.data,e,this.options);return J(this,dt,Ct).call(this,{data:i,type:"success",dataUpdatedAt:r==null?void 0:r.updatedAt,manual:r==null?void 0:r.manual}),i}setState(e,r){J(this,dt,Ct).call(this,{type:"setState",state:e,setStateOptions:r})}cancel(e){var i;const r=B(this,It);return(i=B(this,ft))==null||i.cancel(e),r?r.then(noop$1).catch(noop$1):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(B(this,jt))}isActive(){return B(this,et).some(e=>e.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||B(this,et).some(e=>e.getCurrentResult().isStale)}isStaleByTime(e=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!timeUntilStale(this.state.dataUpdatedAt,e)}onFocus(){var r;const e=B(this,et).find(i=>i.shouldFetchOnWindowFocus());e==null||e.refetch({cancelRefetch:!1}),(r=B(this,ft))==null||r.continue()}onOnline(){var r;const e=B(this,et).find(i=>i.shouldFetchOnReconnect());e==null||e.refetch({cancelRefetch:!1}),(r=B(this,ft))==null||r.continue()}addObserver(e){B(this,et).includes(e)||(B(this,et).push(e),this.clearGcTimeout(),B(this,lt).notify({type:"observerAdded",query:this,observer:e}))}removeObserver(e){B(this,et).includes(e)&&(Q(this,et,B(this,et).filter(r=>r!==e)),B(this,et).length||(B(this,ft)&&(B(this,Gt)?B(this,ft).cancel({revert:!0}):B(this,ft).cancelRetry()),this.scheduleGc()),B(this,lt).notify({type:"observerRemoved",query:this,observer:e}))}getObserversCount(){return B(this,et).length}invalidate(){this.state.isInvalidated||J(this,dt,Ct).call(this,{type:"invalidate"})}fetch(e,r){var p,y,_,u;if(this.state.fetchStatus!=="idle"){if(this.state.dataUpdatedAt&&(r!=null&&r.cancelRefetch))this.cancel({silent:!0});else if(B(this,It))return(p=B(this,ft))==null||p.continueRetry(),B(this,It)}if(e&&J(this,Ht,se).call(this,e),!this.options.queryFn){const x=B(this,et).find(S=>S.options.queryFn);x&&J(this,Ht,se).call(this,x.options)}const i=new AbortController,s={queryKey:this.queryKey,meta:this.meta},n=x=>{Object.defineProperty(x,"signal",{enumerable:!0,get:()=>(Q(this,Gt,!0),i.signal)})};n(s);const a=()=>this.options.queryFn?(Q(this,Gt,!1),this.options.persister?this.options.persister(this.options.queryFn,s,this):this.options.queryFn(s)):Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`)),l={fetchOptions:r,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:a};n(l),(y=this.options.behavior)==null||y.onFetch(l,this),Q(this,Nt,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((_=l.fetchOptions)==null?void 0:_.meta))&&J(this,dt,Ct).call(this,{type:"fetch",meta:(u=l.fetchOptions)==null?void 0:u.meta});const o=x=>{var S,g,k,c;isCancelledError(x)&&x.silent||J(this,dt,Ct).call(this,{type:"error",error:x}),isCancelledError(x)||((g=(S=B(this,lt).config).onError)==null||g.call(S,x,this),(c=(k=B(this,lt).config).onSettled)==null||c.call(k,this.state.data,x,this)),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return Q(this,ft,createRetryer({fn:l.fetchFn,abort:i.abort.bind(i),onSuccess:x=>{var S,g,k,c;if(typeof x>"u"){o(new Error(`${this.queryHash} data is undefined`));return}this.setData(x),(g=(S=B(this,lt).config).onSuccess)==null||g.call(S,x,this),(c=(k=B(this,lt).config).onSettled)==null||c.call(k,x,this.state.error,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:o,onFail:(x,S)=>{J(this,dt,Ct).call(this,{type:"failed",failureCount:x,error:S})},onPause:()=>{J(this,dt,Ct).call(this,{type:"pause"})},onContinue:()=>{J(this,dt,Ct).call(this,{type:"continue"})},retry:l.options.retry,retryDelay:l.options.retryDelay,networkMode:l.options.networkMode})),Q(this,It,B(this,ft).promise),B(this,It)}},jt=new WeakMap,Nt=new WeakMap,lt=new WeakMap,It=new WeakMap,ft=new WeakMap,et=new WeakMap,Yt=new WeakMap,Gt=new WeakMap,Ht=new WeakSet,se=function(e){this.options={...B(this,Yt),...e},this.updateGcTime(this.options.gcTime)},dt=new WeakSet,Ct=function(e){const r=i=>{switch(e.type){case"failed":return{...i,fetchFailureCount:e.failureCount,fetchFailureReason:e.error};case"pause":return{...i,fetchStatus:"paused"};case"continue":return{...i,fetchStatus:"fetching"};case"fetch":return{...i,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:e.meta??null,fetchStatus:canFetch(this.options.networkMode)?"fetching":"paused",...!i.dataUpdatedAt&&{error:null,status:"pending"}};case"success":return{...i,data:e.data,dataUpdateCount:i.dataUpdateCount+1,dataUpdatedAt:e.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!e.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const s=e.error;return isCancelledError(s)&&s.revert&&B(this,Nt)?{...B(this,Nt),fetchStatus:"idle"}:{...i,error:s,errorUpdateCount:i.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:i.fetchFailureCount+1,fetchFailureReason:s,fetchStatus:"idle",status:"error"};case"invalidate":return{...i,isInvalidated:!0};case"setState":return{...i,...e.state}}};this.state=r(this.state),notifyManager.batch(()=>{B(this,et).forEach(i=>{i.onQueryUpdate()}),B(this,lt).notify({query:this,type:"updated",action:e})})},le);function getDefaultState$1(t){const e=typeof t.initialData=="function"?t.initialData():t.initialData,r=typeof e<"u",i=r?typeof t.initialDataUpdatedAt=="function"?t.initialDataUpdatedAt():t.initialDataUpdatedAt:0;return{data:e,dataUpdateCount:0,dataUpdatedAt:r?i??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:r?"success":"pending",fetchStatus:"idle"}}var yt,fe,QueryCache=(fe=class extends Subscribable{constructor(e={}){super();Y(this,yt,void 0);this.config=e,Q(this,yt,new Map)}build(e,r,i){const s=r.queryKey,n=r.queryHash??hashQueryKeyByOptions(s,r);let a=this.get(n);return a||(a=new Query({cache:this,queryKey:s,queryHash:n,options:e.defaultQueryOptions(r),state:i,defaultOptions:e.getQueryDefaults(s)}),this.add(a)),a}add(e){B(this,yt).has(e.queryHash)||(B(this,yt).set(e.queryHash,e),this.notify({type:"added",query:e}))}remove(e){const r=B(this,yt).get(e.queryHash);r&&(e.destroy(),r===e&&B(this,yt).delete(e.queryHash),this.notify({type:"removed",query:e}))}clear(){notifyManager.batch(()=>{this.getAll().forEach(e=>{this.remove(e)})})}get(e){return B(this,yt).get(e)}getAll(){return[...B(this,yt).values()]}find(e){const r={exact:!0,...e};return this.getAll().find(i=>matchQuery(r,i))}findAll(e={}){const r=this.getAll();return Object.keys(e).length>0?r.filter(i=>matchQuery(e,i)):r}notify(e){notifyManager.batch(()=>{this.listeners.forEach(r=>{r(e)})})}onFocus(){notifyManager.batch(()=>{this.getAll().forEach(e=>{e.onFocus()})})}onOnline(){notifyManager.batch(()=>{this.getAll().forEach(e=>{e.onOnline()})})}},yt=new WeakMap,fe),gt,Xt,ot,qt,bt,Ft,pe,Mutation=(pe=class extends Removable{constructor(e){super();Y(this,bt);Y(this,gt,void 0);Y(this,Xt,void 0);Y(this,ot,void 0);Y(this,qt,void 0);this.mutationId=e.mutationId,Q(this,Xt,e.defaultOptions),Q(this,ot,e.mutationCache),Q(this,gt,[]),this.state=e.state||getDefaultState(),this.setOptions(e.options),this.scheduleGc()}setOptions(e){this.options={...B(this,Xt),...e},this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(e){B(this,gt).includes(e)||(B(this,gt).push(e),this.clearGcTimeout(),B(this,ot).notify({type:"observerAdded",mutation:this,observer:e}))}removeObserver(e){Q(this,gt,B(this,gt).filter(r=>r!==e)),this.scheduleGc(),B(this,ot).notify({type:"observerRemoved",mutation:this,observer:e})}optionalRemove(){B(this,gt).length||(this.state.status==="pending"?this.scheduleGc():B(this,ot).remove(this))}continue(){var e;return((e=B(this,qt))==null?void 0:e.continue())??this.execute(this.state.variables)}async execute(e){var s,n,a,l,o,p,y,_,u,x,S,g,k,c,b,f,P,A,M,F;const r=()=>(Q(this,qt,createRetryer({fn:()=>this.options.mutationFn?this.options.mutationFn(e):Promise.reject(new Error("No mutationFn found")),onFail:(L,O)=>{J(this,bt,Ft).call(this,{type:"failed",failureCount:L,error:O})},onPause:()=>{J(this,bt,Ft).call(this,{type:"pause"})},onContinue:()=>{J(this,bt,Ft).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode})),B(this,qt).promise),i=this.state.status==="pending";try{if(!i){J(this,bt,Ft).call(this,{type:"pending",variables:e}),await((n=(s=B(this,ot).config).onMutate)==null?void 0:n.call(s,e,this));const O=await((l=(a=this.options).onMutate)==null?void 0:l.call(a,e));O!==this.state.context&&J(this,bt,Ft).call(this,{type:"pending",context:O,variables:e})}const L=await r();return await((p=(o=B(this,ot).config).onSuccess)==null?void 0:p.call(o,L,e,this.state.context,this)),await((_=(y=this.options).onSuccess)==null?void 0:_.call(y,L,e,this.state.context)),await((x=(u=B(this,ot).config).onSettled)==null?void 0:x.call(u,L,null,this.state.variables,this.state.context,this)),await((g=(S=this.options).onSettled)==null?void 0:g.call(S,L,null,e,this.state.context)),J(this,bt,Ft).call(this,{type:"success",data:L}),L}catch(L){try{throw await((c=(k=B(this,ot).config).onError)==null?void 0:c.call(k,L,e,this.state.context,this)),await((f=(b=this.options).onError)==null?void 0:f.call(b,L,e,this.state.context)),await((A=(P=B(this,ot).config).onSettled)==null?void 0:A.call(P,void 0,L,this.state.variables,this.state.context,this)),await((F=(M=this.options).onSettled)==null?void 0:F.call(M,void 0,L,e,this.state.context)),L}finally{J(this,bt,Ft).call(this,{type:"error",error:L})}}}},gt=new WeakMap,Xt=new WeakMap,ot=new WeakMap,qt=new WeakMap,bt=new WeakSet,Ft=function(e){const r=i=>{switch(e.type){case"failed":return{...i,failureCount:e.failureCount,failureReason:e.error};case"pause":return{...i,isPaused:!0};case"continue":return{...i,isPaused:!1};case"pending":return{...i,context:e.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!canFetch(this.options.networkMode),status:"pending",variables:e.variables,submittedAt:Date.now()};case"success":return{...i,data:e.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...i,data:void 0,error:e.error,failureCount:i.failureCount+1,failureReason:e.error,isPaused:!1,status:"error"}}};this.state=r(this.state),notifyManager.batch(()=>{B(this,gt).forEach(i=>{i.onMutationUpdate(e)}),B(this,ot).notify({mutation:this,type:"updated",action:e})})},pe);function getDefaultState(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var pt,Zt,zt,ue,MutationCache=(ue=class extends Subscribable{constructor(e={}){super();Y(this,pt,void 0);Y(this,Zt,void 0);Y(this,zt,void 0);this.config=e,Q(this,pt,[]),Q(this,Zt,0)}build(e,r,i){const s=new Mutation({mutationCache:this,mutationId:++ie(this,Zt)._,options:e.defaultMutationOptions(r),state:i});return this.add(s),s}add(e){B(this,pt).push(e),this.notify({type:"added",mutation:e})}remove(e){Q(this,pt,B(this,pt).filter(r=>r!==e)),this.notify({type:"removed",mutation:e})}clear(){notifyManager.batch(()=>{B(this,pt).forEach(e=>{this.remove(e)})})}getAll(){return B(this,pt)}find(e){const r={exact:!0,...e};return B(this,pt).find(i=>matchMutation(r,i))}findAll(e={}){return B(this,pt).filter(r=>matchMutation(e,r))}notify(e){notifyManager.batch(()=>{this.listeners.forEach(r=>{r(e)})})}resumePausedMutations(){return Q(this,zt,(B(this,zt)??Promise.resolve()).then(()=>{const e=B(this,pt).filter(r=>r.state.isPaused);return notifyManager.batch(()=>e.reduce((r,i)=>r.then(()=>i.continue().catch(noop$1)),Promise.resolve()))}).then(()=>{Q(this,zt,void 0)})),B(this,zt)}},pt=new WeakMap,Zt=new WeakMap,zt=new WeakMap,ue);function infiniteQueryBehavior(t){return{onFetch:(e,r)=>{const i=async()=>{var S,g,k,c,b;const s=e.options,n=(k=(g=(S=e.fetchOptions)==null?void 0:S.meta)==null?void 0:g.fetchMore)==null?void 0:k.direction,a=((c=e.state.data)==null?void 0:c.pages)||[],l=((b=e.state.data)==null?void 0:b.pageParams)||[],o={pages:[],pageParams:[]};let p=!1;const y=f=>{Object.defineProperty(f,"signal",{enumerable:!0,get:()=>(e.signal.aborted?p=!0:e.signal.addEventListener("abort",()=>{p=!0}),e.signal)})},_=e.options.queryFn||(()=>Promise.reject(new Error(`Missing queryFn: '${e.options.queryHash}'`))),u=async(f,P,A)=>{if(p)return Promise.reject();if(P==null&&f.pages.length)return Promise.resolve(f);const M={queryKey:e.queryKey,pageParam:P,direction:A?"backward":"forward",meta:e.options.meta};y(M);const F=await _(M),{maxPages:L}=e.options,O=A?addToStart:addToEnd;return{pages:O(f.pages,F,L),pageParams:O(f.pageParams,P,L)}};let x;if(n&&a.length){const f=n==="backward",P=f?getPreviousPageParam:getNextPageParam,A={pages:a,pageParams:l},M=P(s,A);x=await u(A,M,f)}else{x=await u(o,l[0]??s.initialPageParam);const f=t??a.length;for(let P=1;P<f;P++){const A=getNextPageParam(s,x);x=await u(x,A)}}return x};e.options.persister?e.fetchFn=()=>{var s,n;return(n=(s=e.options).persister)==null?void 0:n.call(s,i,{queryKey:e.queryKey,meta:e.options.meta,signal:e.signal},r)}:e.fetchFn=i}}}function getNextPageParam(t,{pages:e,pageParams:r}){const i=e.length-1;return t.getNextPageParam(e[i],e,r[i],r)}function getPreviousPageParam(t,{pages:e,pageParams:r}){var i;return(i=t.getPreviousPageParam)==null?void 0:i.call(t,e[0],e,r[0],r)}function hasNextPage(t,e){return e?getNextPageParam(t,e)!=null:!1}function hasPreviousPage(t,e){return!e||!t.getPreviousPageParam?!1:getPreviousPageParam(t,e)!=null}var tt,Rt,Lt,Wt,$t,Vt,Kt,Qt,ce,QueryClient=(ce=class{constructor(t={}){Y(this,tt,void 0);Y(this,Rt,void 0);Y(this,Lt,void 0);Y(this,Wt,void 0);Y(this,$t,void 0);Y(this,Vt,void 0);Y(this,Kt,void 0);Y(this,Qt,void 0);Q(this,tt,t.queryCache||new QueryCache),Q(this,Rt,t.mutationCache||new MutationCache),Q(this,Lt,t.defaultOptions||{}),Q(this,Wt,new Map),Q(this,$t,new Map),Q(this,Vt,0)}mount(){ie(this,Vt)._++,B(this,Vt)===1&&(Q(this,Kt,focusManager.subscribe(()=>{focusManager.isFocused()&&(this.resumePausedMutations(),B(this,tt).onFocus())})),Q(this,Qt,onlineManager.subscribe(()=>{onlineManager.isOnline()&&(this.resumePausedMutations(),B(this,tt).onOnline())})))}unmount(){var t,e;ie(this,Vt)._--,B(this,Vt)===0&&((t=B(this,Kt))==null||t.call(this),Q(this,Kt,void 0),(e=B(this,Qt))==null||e.call(this),Q(this,Qt,void 0))}isFetching(t){return B(this,tt).findAll({...t,fetchStatus:"fetching"}).length}isMutating(t){return B(this,Rt).findAll({...t,status:"pending"}).length}getQueryData(t){var e;return(e=B(this,tt).find({queryKey:t}))==null?void 0:e.state.data}ensureQueryData(t){const e=this.getQueryData(t.queryKey);return e!==void 0?Promise.resolve(e):this.fetchQuery(t)}getQueriesData(t){return this.getQueryCache().findAll(t).map(({queryKey:e,state:r})=>{const i=r.data;return[e,i]})}setQueryData(t,e,r){const i=B(this,tt).find({queryKey:t}),s=i==null?void 0:i.state.data,n=functionalUpdate(e,s);if(typeof n>"u")return;const a=this.defaultQueryOptions({queryKey:t});return B(this,tt).build(this,a).setData(n,{...r,manual:!0})}setQueriesData(t,e,r){return notifyManager.batch(()=>this.getQueryCache().findAll(t).map(({queryKey:i})=>[i,this.setQueryData(i,e,r)]))}getQueryState(t){var e;return(e=B(this,tt).find({queryKey:t}))==null?void 0:e.state}removeQueries(t){const e=B(this,tt);notifyManager.batch(()=>{e.findAll(t).forEach(r=>{e.remove(r)})})}resetQueries(t,e){const r=B(this,tt),i={type:"active",...t};return notifyManager.batch(()=>(r.findAll(t).forEach(s=>{s.reset()}),this.refetchQueries(i,e)))}cancelQueries(t={},e={}){const r={revert:!0,...e},i=notifyManager.batch(()=>B(this,tt).findAll(t).map(s=>s.cancel(r)));return Promise.all(i).then(noop$1).catch(noop$1)}invalidateQueries(t={},e={}){return notifyManager.batch(()=>{if(B(this,tt).findAll(t).forEach(i=>{i.invalidate()}),t.refetchType==="none")return Promise.resolve();const r={...t,type:t.refetchType??t.type??"active"};return this.refetchQueries(r,e)})}refetchQueries(t={},e){const r={...e,cancelRefetch:(e==null?void 0:e.cancelRefetch)??!0},i=notifyManager.batch(()=>B(this,tt).findAll(t).filter(s=>!s.isDisabled()).map(s=>{let n=s.fetch(void 0,r);return r.throwOnError||(n=n.catch(noop$1)),s.state.fetchStatus==="paused"?Promise.resolve():n}));return Promise.all(i).then(noop$1)}fetchQuery(t){const e=this.defaultQueryOptions(t);typeof e.retry>"u"&&(e.retry=!1);const r=B(this,tt).build(this,e);return r.isStaleByTime(e.staleTime)?r.fetch(e):Promise.resolve(r.state.data)}prefetchQuery(t){return this.fetchQuery(t).then(noop$1).catch(noop$1)}fetchInfiniteQuery(t){return t.behavior=infiniteQueryBehavior(t.pages),this.fetchQuery(t)}prefetchInfiniteQuery(t){return this.fetchInfiniteQuery(t).then(noop$1).catch(noop$1)}resumePausedMutations(){return B(this,Rt).resumePausedMutations()}getQueryCache(){return B(this,tt)}getMutationCache(){return B(this,Rt)}getDefaultOptions(){return B(this,Lt)}setDefaultOptions(t){Q(this,Lt,t)}setQueryDefaults(t,e){B(this,Wt).set(hashKey(t),{queryKey:t,defaultOptions:e})}getQueryDefaults(t){const e=[...B(this,Wt).values()];let r={};return e.forEach(i=>{partialMatchKey(t,i.queryKey)&&(r={...r,...i.defaultOptions})}),r}setMutationDefaults(t,e){B(this,$t).set(hashKey(t),{mutationKey:t,defaultOptions:e})}getMutationDefaults(t){const e=[...B(this,$t).values()];let r={};return e.forEach(i=>{partialMatchKey(t,i.mutationKey)&&(r={...r,...i.defaultOptions})}),r}defaultQueryOptions(t){if(t!=null&&t._defaulted)return t;const e={...B(this,Lt).queries,...(t==null?void 0:t.queryKey)&&this.getQueryDefaults(t.queryKey),...t,_defaulted:!0};return e.queryHash||(e.queryHash=hashQueryKeyByOptions(e.queryKey,e)),typeof e.refetchOnReconnect>"u"&&(e.refetchOnReconnect=e.networkMode!=="always"),typeof e.throwOnError>"u"&&(e.throwOnError=!!e.suspense),typeof e.networkMode>"u"&&e.persister&&(e.networkMode="offlineFirst"),e}defaultMutationOptions(t){return t!=null&&t._defaulted?t:{...B(this,Lt).mutations,...(t==null?void 0:t.mutationKey)&&this.getMutationDefaults(t.mutationKey),...t,_defaulted:!0}}clear(){B(this,tt).clear(),B(this,Rt).clear()}},tt=new WeakMap,Rt=new WeakMap,Lt=new WeakMap,Wt=new WeakMap,$t=new WeakMap,Vt=new WeakMap,Kt=new WeakMap,Qt=new WeakMap,ce),Dt,_t,ht,At,Ut,ne,Jt,oe,de,MutationObserver$1=(de=class extends Subscribable{constructor(r,i){super();Y(this,Ut);Y(this,Jt);Y(this,Dt,void 0);Y(this,_t,void 0);Y(this,ht,void 0);Y(this,At,void 0);Q(this,_t,void 0),Q(this,Dt,r),this.setOptions(i),this.bindMethods(),J(this,Ut,ne).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(r){var s;const i=this.options;this.options=B(this,Dt).defaultMutationOptions(r),shallowEqualObjects(i,this.options)||B(this,Dt).getMutationCache().notify({type:"observerOptionsUpdated",mutation:B(this,ht),observer:this}),(s=B(this,ht))==null||s.setOptions(this.options),i!=null&&i.mutationKey&&this.options.mutationKey&&hashKey(i.mutationKey)!==hashKey(this.options.mutationKey)&&this.reset()}onUnsubscribe(){var r;this.hasListeners()||(r=B(this,ht))==null||r.removeObserver(this)}onMutationUpdate(r){J(this,Ut,ne).call(this),J(this,Jt,oe).call(this,r)}getCurrentResult(){return B(this,_t)}reset(){var r;(r=B(this,ht))==null||r.removeObserver(this),Q(this,ht,void 0),J(this,Ut,ne).call(this),J(this,Jt,oe).call(this)}mutate(r,i){var s;return Q(this,At,i),(s=B(this,ht))==null||s.removeObserver(this),Q(this,ht,B(this,Dt).getMutationCache().build(B(this,Dt),this.options)),B(this,ht).addObserver(this),B(this,ht).execute(r)}},Dt=new WeakMap,_t=new WeakMap,ht=new WeakMap,At=new WeakMap,Ut=new WeakSet,ne=function(){var i;const r=((i=B(this,ht))==null?void 0:i.state)??getDefaultState();Q(this,_t,{...r,isPending:r.status==="pending",isSuccess:r.status==="success",isError:r.status==="error",isIdle:r.status==="idle",mutate:this.mutate,reset:this.reset})},Jt=new WeakSet,oe=function(r){notifyManager.batch(()=>{var i,s,n,a,l,o,p,y;if(B(this,At)&&this.hasListeners()){const _=B(this,_t).variables,u=B(this,_t).context;(r==null?void 0:r.type)==="success"?((s=(i=B(this,At)).onSuccess)==null||s.call(i,r.data,_,u),(a=(n=B(this,At)).onSettled)==null||a.call(n,r.data,null,_,u)):(r==null?void 0:r.type)==="error"&&((o=(l=B(this,At)).onError)==null||o.call(l,r.error,_,u),(y=(p=B(this,At)).onSettled)==null||y.call(p,void 0,r.error,_,u))}this.listeners.forEach(_=>{_(B(this,_t))})})},de);function useMutation(t,e){const r=useQueryClient(e),[i]=reactExports.useState(()=>new MutationObserver$1(r,t));reactExports.useEffect(()=>{i.setOptions(t)},[i,t]);const s=reactExports.useSyncExternalStore(reactExports.useCallback(a=>i.subscribe(notifyManager.batchCalls(a)),[i]),()=>i.getCurrentResult(),()=>i.getCurrentResult()),n=reactExports.useCallback((a,l)=>{i.mutate(a,l).catch(noop)},[i]);if(s.error&&shouldThrowError(i.options.throwOnError,[s.error]))throw s.error;return{...s,mutate:n,mutateAsync:s.mutate}}function noop(){}var dist={},ga4={},gtag={};(function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var e=function(){for(var s=arguments.length,n=new Array(s),a=0;a<s;a++)n[a]=arguments[a];if(typeof window<"u"){var l;typeof window.gtag>"u"&&(window.dataLayer=window.dataLayer||[],window.gtag=function(){window.dataLayer.push(arguments)}),(l=window).gtag.apply(l,n)}},r=e;t.default=r})(gtag);var format={};(function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=a;var e=/^(a|an|and|as|at|but|by|en|for|if|in|nor|of|on|or|per|the|to|vs?\.?|via)$/i;function r(l){return l.toString().trim().replace(/[A-Za-z0-9\u00C0-\u00FF]+[^\s-]*/g,function(o,p,y){return p>0&&p+o.length!==y.length&&o.search(e)>-1&&y.charAt(p-2)!==":"&&(y.charAt(p+o.length)!=="-"||y.charAt(p-1)==="-")&&y.charAt(p-1).search(/[^\s-]/)<0?o.toLowerCase():o.substr(1).search(/[A-Z]|\../)>-1?o:o.charAt(0).toUpperCase()+o.substr(1)})}function i(l){return typeof l=="string"&&l.indexOf("@")!==-1}var s="REDACTED (Potential Email Address)";function n(l){return i(l)?(console.warn("This arg looks like an email address, redacting."),s):l}function a(){var l=arguments.length>0&&arguments[0]!==void 0?arguments[0]:"",o=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0,p=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0,y=l||"";return o&&(y=r(l)),p&&(y=n(y)),y}})(format);(function(t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.GA4=void 0;var e=a(gtag),r=a(format),i=["eventCategory","eventAction","eventLabel","eventValue","hitType"],s=["title","location"],n=["page","hitType"];function a(D){return D&&D.__esModule?D:{default:D}}function l(D,I){if(D==null)return{};var C=o(D,I),T,d;if(Object.getOwnPropertySymbols){var E=Object.getOwnPropertySymbols(D);for(d=0;d<E.length;d++)T=E[d],!(I.indexOf(T)>=0)&&Object.prototype.propertyIsEnumerable.call(D,T)&&(C[T]=D[T])}return C}function o(D,I){if(D==null)return{};var C={},T=Object.keys(D),d,E;for(E=0;E<T.length;E++)d=T[E],!(I.indexOf(d)>=0)&&(C[d]=D[d]);return C}function p(D){"@babel/helpers - typeof";return p=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(I){return typeof I}:function(I){return I&&typeof Symbol=="function"&&I.constructor===Symbol&&I!==Symbol.prototype?"symbol":typeof I},p(D)}function y(D){return x(D)||u(D)||b(D)||_()}function _(){throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function u(D){if(typeof Symbol<"u"&&D[Symbol.iterator]!=null||D["@@iterator"]!=null)return Array.from(D)}function x(D){if(Array.isArray(D))return f(D)}function S(D,I){var C=Object.keys(D);if(Object.getOwnPropertySymbols){var T=Object.getOwnPropertySymbols(D);I&&(T=T.filter(function(d){return Object.getOwnPropertyDescriptor(D,d).enumerable})),C.push.apply(C,T)}return C}function g(D){for(var I=1;I<arguments.length;I++){var C=arguments[I]!=null?arguments[I]:{};I%2?S(Object(C),!0).forEach(function(T){O(D,T,C[T])}):Object.getOwnPropertyDescriptors?Object.defineProperties(D,Object.getOwnPropertyDescriptors(C)):S(Object(C)).forEach(function(T){Object.defineProperty(D,T,Object.getOwnPropertyDescriptor(C,T))})}return D}function k(D,I){return A(D)||P(D,I)||b(D,I)||c()}function c(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function b(D,I){if(D){if(typeof D=="string")return f(D,I);var C=Object.prototype.toString.call(D).slice(8,-1);if(C==="Object"&&D.constructor&&(C=D.constructor.name),C==="Map"||C==="Set")return Array.from(D);if(C==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(C))return f(D,I)}}function f(D,I){(I==null||I>D.length)&&(I=D.length);for(var C=0,T=new Array(I);C<I;C++)T[C]=D[C];return T}function P(D,I){var C=D==null?null:typeof Symbol<"u"&&D[Symbol.iterator]||D["@@iterator"];if(C!=null){var T,d,E,V,R=[],G=!0,j=!1;try{if(E=(C=C.call(D)).next,I===0){if(Object(C)!==C)return;G=!1}else for(;!(G=(T=E.call(C)).done)&&(R.push(T.value),R.length!==I);G=!0);}catch(N){j=!0,d=N}finally{try{if(!G&&C.return!=null&&(V=C.return(),Object(V)!==V))return}finally{if(j)throw d}}return R}}function A(D){if(Array.isArray(D))return D}function M(D,I){if(!(D instanceof I))throw new TypeError("Cannot call a class as a function")}function F(D,I){for(var C=0;C<I.length;C++){var T=I[C];T.enumerable=T.enumerable||!1,T.configurable=!0,"value"in T&&(T.writable=!0),Object.defineProperty(D,W(T.key),T)}}function L(D,I,C){return I&&F(D.prototype,I),C&&F(D,C),Object.defineProperty(D,"prototype",{writable:!1}),D}function O(D,I,C){return I=W(I),I in D?Object.defineProperty(D,I,{value:C,enumerable:!0,configurable:!0,writable:!0}):D[I]=C,D}function W(D){var I=H(D,"string");return p(I)==="symbol"?I:String(I)}function H(D,I){if(p(D)!=="object"||D===null)return D;var C=D[Symbol.toPrimitive];if(C!==void 0){var T=C.call(D,I||"default");if(p(T)!=="object")return T;throw new TypeError("@@toPrimitive must return a primitive value.")}return(I==="string"?String:Number)(D)}var z=function(){function D(){var I=this;M(this,D),O(this,"reset",function(){I.isInitialized=!1,I._testMode=!1,I._currentMeasurementId,I._hasLoadedGA=!1,I._isQueuing=!1,I._queueGtag=[]}),O(this,"_gtag",function(){for(var C=arguments.length,T=new Array(C),d=0;d<C;d++)T[d]=arguments[d];I._testMode||I._isQueuing?I._queueGtag.push(T):e.default.apply(void 0,T)}),O(this,"_loadGA",function(C,T){var d=arguments.length>2&&arguments[2]!==void 0?arguments[2]:"https://www.googletagmanager.com/gtag/js";if(!(typeof window>"u"||typeof document>"u")&&!I._hasLoadedGA){var E=document.createElement("script");E.async=!0,E.src="".concat(d,"?id=").concat(C),T&&E.setAttribute("nonce",T),document.body.appendChild(E),window.dataLayer=window.dataLayer||[],window.gtag=function(){window.dataLayer.push(arguments)},I._hasLoadedGA=!0}}),O(this,"_toGtagOptions",function(C){if(C){var T={cookieUpdate:"cookie_update",cookieExpires:"cookie_expires",cookieDomain:"cookie_domain",cookieFlags:"cookie_flags",userId:"user_id",clientId:"client_id",anonymizeIp:"anonymize_ip",contentGroup1:"content_group1",contentGroup2:"content_group2",contentGroup3:"content_group3",contentGroup4:"content_group4",contentGroup5:"content_group5",allowAdFeatures:"allow_google_signals",allowAdPersonalizationSignals:"allow_ad_personalization_signals",nonInteraction:"non_interaction",page:"page_path",hitCallback:"event_callback"},d=Object.entries(C).reduce(function(E,V){var R=k(V,2),G=R[0],j=R[1];return T[G]?E[T[G]]=j:E[G]=j,E},{});return d}}),O(this,"initialize",function(C){var T=arguments.length>1&&arguments[1]!==void 0?arguments[1]:{};if(!C)throw new Error("Require GA_MEASUREMENT_ID");var d=typeof C=="string"?[{trackingId:C}]:C;I._currentMeasurementId=d[0].trackingId;var E=T.gaOptions,V=T.gtagOptions,R=T.nonce,G=T.testMode,j=G===void 0?!1:G,N=T.gtagUrl;if(I._testMode=j,j||I._loadGA(I._currentMeasurementId,R,N),I.isInitialized||(I._gtag("js",new Date),d.forEach(function(Z){var rt=g(g(g({},I._toGtagOptions(g(g({},E),Z.gaOptions))),V),Z.gtagOptions);Object.keys(rt).length?I._gtag("config",Z.trackingId,rt):I._gtag("config",Z.trackingId)})),I.isInitialized=!0,!j){var K=y(I._queueGtag);for(I._queueGtag=[],I._isQueuing=!1;K.length;){var U=K.shift();I._gtag.apply(I,y(U)),U[0]==="get"&&(I._isQueuing=!0)}}}),O(this,"set",function(C){if(!C){console.warn("`fieldsObject` is required in .set()");return}if(p(C)!=="object"){console.warn("Expected `fieldsObject` arg to be an Object");return}Object.keys(C).length===0&&console.warn("empty `fieldsObject` given to .set()"),I._gaCommand("set",C)}),O(this,"_gaCommandSendEvent",function(C,T,d,E,V){I._gtag("event",T,g(g({event_category:C,event_label:d,value:E},V&&{non_interaction:V.nonInteraction}),I._toGtagOptions(V)))}),O(this,"_gaCommandSendEventParameters",function(){for(var C=arguments.length,T=new Array(C),d=0;d<C;d++)T[d]=arguments[d];if(typeof T[0]=="string")I._gaCommandSendEvent.apply(I,y(T.slice(1)));else{var E=T[0],V=E.eventCategory,R=E.eventAction,G=E.eventLabel,j=E.eventValue;E.hitType;var N=l(E,i);I._gaCommandSendEvent(V,R,G,j,N)}}),O(this,"_gaCommandSendTiming",function(C,T,d,E){I._gtag("event","timing_complete",{name:T,value:d,event_category:C,event_label:E})}),O(this,"_gaCommandSendPageview",function(C,T){if(T&&Object.keys(T).length){var d=I._toGtagOptions(T),E=d.title,V=d.location,R=l(d,s);I._gtag("event","page_view",g(g(g(g({},C&&{page_path:C}),E&&{page_title:E}),V&&{page_location:V}),R))}else C?I._gtag("event","page_view",{page_path:C}):I._gtag("event","page_view")}),O(this,"_gaCommandSendPageviewParameters",function(){for(var C=arguments.length,T=new Array(C),d=0;d<C;d++)T[d]=arguments[d];if(typeof T[0]=="string")I._gaCommandSendPageview.apply(I,y(T.slice(1)));else{var E=T[0],V=E.page;E.hitType;var R=l(E,n);I._gaCommandSendPageview(V,R)}}),O(this,"_gaCommandSend",function(){for(var C=arguments.length,T=new Array(C),d=0;d<C;d++)T[d]=arguments[d];var E=typeof T[0]=="string"?T[0]:T[0].hitType;switch(E){case"event":I._gaCommandSendEventParameters.apply(I,T);break;case"pageview":I._gaCommandSendPageviewParameters.apply(I,T);break;case"timing":I._gaCommandSendTiming.apply(I,y(T.slice(1)));break;case"screenview":case"transaction":case"item":case"social":case"exception":console.warn("Unsupported send command: ".concat(E));break;default:console.warn("Send command doesn't exist: ".concat(E))}}),O(this,"_gaCommandSet",function(){for(var C=arguments.length,T=new Array(C),d=0;d<C;d++)T[d]=arguments[d];typeof T[0]=="string"&&(T[0]=O({},T[0],T[1])),I._gtag("set",I._toGtagOptions(T[0]))}),O(this,"_gaCommand",function(C){for(var T=arguments.length,d=new Array(T>1?T-1:0),E=1;E<T;E++)d[E-1]=arguments[E];switch(C){case"send":I._gaCommandSend.apply(I,d);break;case"set":I._gaCommandSet.apply(I,d);break;default:console.warn("Command doesn't exist: ".concat(C))}}),O(this,"ga",function(){for(var C=arguments.length,T=new Array(C),d=0;d<C;d++)T[d]=arguments[d];if(typeof T[0]=="string")I._gaCommand.apply(I,T);else{var E=T[0];I._gtag("get",I._currentMeasurementId,"client_id",function(V){I._isQueuing=!1;var R=I._queueGtag;for(E({get:function(N){return N==="clientId"?V:N==="trackingId"?I._currentMeasurementId:N==="apiVersion"?"1":void 0}});R.length;){var G=R.shift();I._gtag.apply(I,y(G))}}),I._isQueuing=!0}return I.ga}),O(this,"event",function(C,T){if(typeof C=="string")I._gtag("event",C,I._toGtagOptions(T));else{var d=C.action,E=C.category,V=C.label,R=C.value,G=C.nonInteraction,j=C.transport;if(!E||!d){console.warn("args.category AND args.action are required in event()");return}var N={hitType:"event",eventCategory:(0,r.default)(E),eventAction:(0,r.default)(d)};V&&(N.eventLabel=(0,r.default)(V)),typeof R<"u"&&(typeof R!="number"?console.warn("Expected `args.value` arg to be a Number."):N.eventValue=R),typeof G<"u"&&(typeof G!="boolean"?console.warn("`args.nonInteraction` must be a boolean."):N.nonInteraction=G),typeof j<"u"&&(typeof j!="string"?console.warn("`args.transport` must be a string."):(["beacon","xhr","image"].indexOf(j)===-1&&console.warn("`args.transport` must be either one of these values: `beacon`, `xhr` or `image`"),N.transport=j)),I._gaCommand("send",N)}}),O(this,"send",function(C){I._gaCommand("send",C)}),this.reset()}return L(D,[{key:"gtag",value:function(){this._gtag.apply(this,arguments)}}]),D}();t.GA4=z;var q=new z;t.default=q})(ga4);(function(t){function e(l){"@babel/helpers - typeof";return e=typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?function(o){return typeof o}:function(o){return o&&typeof Symbol=="function"&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},e(l)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.ReactGAImplementation=void 0;var r=s(ga4);function i(l){if(typeof WeakMap!="function")return null;var o=new WeakMap,p=new WeakMap;return(i=function(_){return _?p:o})(l)}function s(l,o){if(!o&&l&&l.__esModule)return l;if(l===null||e(l)!=="object"&&typeof l!="function")return{default:l};var p=i(o);if(p&&p.has(l))return p.get(l);var y={},_=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in l)if(u!=="default"&&Object.prototype.hasOwnProperty.call(l,u)){var x=_?Object.getOwnPropertyDescriptor(l,u):null;x&&(x.get||x.set)?Object.defineProperty(y,u,x):y[u]=l[u]}return y.default=l,p&&p.set(l,y),y}var n=r.GA4;t.ReactGAImplementation=n;var a=r.default;t.default=a})(dist);const ReactGA=getDefaultExportFromCjs(dist),useSigninMutation=()=>useMutation({mutationKey:["signin"],mutationFn:async({email:t,password:e})=>(await apiClient.post("auth/jwt/create/",{email:t,password:e})).data,onSuccess:async t=>{await localStorage.setItem("token",t.access),await localStorage.setItem("refreshToken",t.refresh)}}),useRefreshToken=async()=>{let t=!1;return await apiClient.post("auth/jwt/refresh/",{refresh:localStorage.getItem("refreshToken")}).then(async e=>{console.log("refresh token antes de guardar",localStorage.getItem("refreshToken")),await localStorage.setItem("token",e.data.access),await console.log("refresh token despues de guardar",localStorage.getItem("refreshToken")),t=!0}).catch(e=>{console.log(e,"error aqui estoy en useRefreshTokenMutation"),localStorage.removeItem("token"),localStorage.removeItem("refreshToken"),t=!1}),t},useVerfyToken=async()=>{let t=!1;return await apiClient.post("auth/jwt/verify/",{token:localStorage.getItem("token")}).then(()=>{t=!0}).catch(async e=>{console.log(e,"error aqui estoy en useVerfyTokenMutation");const r=await useRefreshToken();console.log(r,"successrefresh aqui estoy en useVerfyTokenMutation"),r&&(t=!0)}),t},AuthContext=reactExports.createContext({isTokenValid:!1,validateToken:async()=>{},logout:async()=>{}});function AuthProvider({children:t}){const[e,r]=reactExports.useState(!1),i=async()=>{console.log("logout"),await localStorage.removeItem("token"),await localStorage.removeItem("refreshToken"),r(!1)},s=async()=>{if(!await localStorage.getItem("token")){console.log("no hay token"),r(!1);return}if(await useVerfyToken()){console.log("token valido"),r(!0);return}};return jsxRuntimeExports.jsx(AuthContext.Provider,{value:{isTokenValid:e,validateToken:s,logout:i},children:t})}function useAuth(){const t=reactExports.useContext(AuthContext);if(!t)throw new Error("useAuth must be used within an AuthProvider");return t}function ProtectedRoute(){const t=useAuth();return reactExports.useEffect(()=>{t.validateToken()},[]),t.isTokenValid?jsxRuntimeExports.jsx(Outlet,{}):jsxRuntimeExports.jsx(Navigate,{to:"/login"})}const bootstrap_min="",index="";var ReactQueryDevtools2=function(){return null};const createSitemap=(t,e)=>`
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            ${t.map(s=>{const n=new URL(e+s.path);let a="monthly",l=.5,o=new Date().toISOString().split("T")[0];return s.path==="/"?l=1:s.path==="/servicios"?l=.9:s.path==="/aboutUs"&&(l=.8),`
            <url>
                <loc>${n.href}</loc>
                <lastmod>${o}</lastmod>
                <changefreq>${a}</changefreq>
                <priority>${l}</priority>
            </url>
        `}).join(`
`)}
        </urlset>
    `,Sitemap=()=>{const r=createSitemap([{path:"/"},{path:"/login"},{path:"/aboutUs"},{path:"/services_topografia"},{path:"/services_ingenieria"},{path:"/services_ambiental"},{path:"/servicios"},{path:"/servicios/:id"},{path:"/projects"},{path:"/projects/:id"},{path:"/contact"},{path:"/blog"},{path:"/blog/:id"},{path:"/",children:[{path:"/cotizador"}]}],APIURL);return jsxRuntimeExports.jsx("pre",{children:r})};var lottie$1={exports:{}};(function(module,exports){typeof navigator<"u"&&function(t,e){module.exports=e()}(commonjsGlobal,function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(e){_useWebWorker=!!e},getWebWorker=function(){return _useWebWorker},setLocationHref=function(e){locationHref=e},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,i=t.length,s;for(r=0;r<i;r+=1){s=t[r].prototype;for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e.prototype[n]=s[n])}}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(e){this.audios=[],this.audioFactory=e,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(r){this.audios.push(r)},pause:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].pause()},resume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].resume()},setRate:function(r){var i,s=this.audios.length;for(i=0;i<s;i+=1)this.audios[i].setRate(r)},createAudio:function(r){return this.audioFactory?this.audioFactory(r):window.Howl?new window.Howl({src:[r]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(r){this.audioFactory=r},setVolume:function(r){this._volume=r,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(r,i){var s=0,n=[],a;switch(r){case"int16":case"uint8c":a=1;break;default:a=1.1;break}for(s=0;s<i;s+=1)n.push(a);return n}function e(r,i){return r==="float32"?new Float32Array(i):r==="int16"?new Int16Array(i):r==="uint8c"?new Uint8ClampedArray(i):t(r,i)}return typeof Uint8ClampedArray=="function"&&typeof Float32Array=="function"?e:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$6=function(r){return typeof r}:_typeof$6=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};(function(){var t=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],e,r=t.length;for(e=0;e<r;e+=1)BMMath[t[e]]=Math[t[e]]})(),BMMath.random=Math.random,BMMath.abs=function(t){var e=_typeof$6(t);if(e==="object"&&t.length){var r=createSizedArray(t.length),i,s=t.length;for(i=0;i<s;i+=1)r[i]=Math.abs(t[i]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,i){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=i<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,i){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=i<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}var createElementID=function(){var t=0;return function(){return t+=1,idPrefix$1+"__lottie_element_"+t}}();function HSVtoRGB(t,e,r){var i,s,n,a,l,o,p,y;switch(a=Math.floor(t*6),l=t*6-a,o=r*(1-e),p=r*(1-l*e),y=r*(1-(1-l)*e),a%6){case 0:i=r,s=y,n=o;break;case 1:i=p,s=r,n=o;break;case 2:i=o,s=r,n=y;break;case 3:i=o,s=p,n=r;break;case 4:i=y,s=o,n=r;break;case 5:i=r,s=o,n=p;break}return[i,s,n]}function RGBtoHSV(t,e,r){var i=Math.max(t,e,r),s=Math.min(t,e,r),n=i-s,a,l=i===0?0:n/i,o=i/255;switch(i){case s:a=0;break;case t:a=e-r+n*(e<r?6:0),a/=6*n;break;case e:a=r-t+n*2,a/=6*n;break;case r:a=t-e+n*4,a/=6*n;break}return[a,l,o]}function addSaturationToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t=[],e,r;for(e=0;e<256;e+=1)r=e.toString(16),t[e]=r.length===1?"0"+r:r;return function(i,s,n){return i<0&&(i=0),s<0&&(s=0),n<0&&(n=0),"#"+t[i]+t[s]+t[n]}}(),setSubframeEnabled=function(e){subframeEnabled=!!e},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(e){expressionsPlugin=e},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(e){expressionsInterfaces=e},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(e){defaultCurveSegments=e},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(e){idPrefix$1=e};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$5=function(r){return typeof r}:_typeof$5=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$5(t)}var dataManager=function(){var t=1,e=[],r,i,s={onmessage:function(){},postMessage:function(x){r({data:x})}},n={postMessage:function(x){s.onmessage({data:x})}};function a(u){if(window.Worker&&window.Blob&&getWebWorker()){var x=new Blob(["var _workerSelf = self; self.onmessage = ",u.toString()],{type:"text/javascript"}),S=URL.createObjectURL(x);return new Worker(S)}return r=u,s}function l(){i||(i=a(function(x){function S(){function k(I,C){var T,d,E=I.length,V,R,G,j;for(d=0;d<E;d+=1)if(T=I[d],"ks"in T&&!T.completed){if(T.completed=!0,T.hasMask){var N=T.masksProperties;for(R=N.length,V=0;V<R;V+=1)if(N[V].pt.k.i)A(N[V].pt.k);else for(j=N[V].pt.k.length,G=0;G<j;G+=1)N[V].pt.k[G].s&&A(N[V].pt.k[G].s[0]),N[V].pt.k[G].e&&A(N[V].pt.k[G].e[0])}T.ty===0?(T.layers=f(T.refId,C),k(T.layers,C)):T.ty===4?P(T.shapes):T.ty===5&&q(T)}}function c(I,C){if(I){var T=0,d=I.length;for(T=0;T<d;T+=1)I[T].t===1&&(I[T].data.layers=f(I[T].data.refId,C),k(I[T].data.layers,C))}}function b(I,C){for(var T=0,d=C.length;T<d;){if(C[T].id===I)return C[T];T+=1}return null}function f(I,C){var T=b(I,C);return T?T.layers.__used?JSON.parse(JSON.stringify(T.layers)):(T.layers.__used=!0,T.layers):null}function P(I){var C,T=I.length,d,E;for(C=T-1;C>=0;C-=1)if(I[C].ty==="sh")if(I[C].ks.k.i)A(I[C].ks.k);else for(E=I[C].ks.k.length,d=0;d<E;d+=1)I[C].ks.k[d].s&&A(I[C].ks.k[d].s[0]),I[C].ks.k[d].e&&A(I[C].ks.k[d].e[0]);else I[C].ty==="gr"&&P(I[C].it)}function A(I){var C,T=I.i.length;for(C=0;C<T;C+=1)I.i[C][0]+=I.v[C][0],I.i[C][1]+=I.v[C][1],I.o[C][0]+=I.v[C][0],I.o[C][1]+=I.v[C][1]}function M(I,C){var T=C?C.split("."):[100,100,100];return I[0]>T[0]?!0:T[0]>I[0]?!1:I[1]>T[1]?!0:T[1]>I[1]?!1:I[2]>T[2]?!0:T[2]>I[2]?!1:null}var F=function(){var I=[4,4,14];function C(d){var E=d.t.d;d.t.d={k:[{s:E,t:0}]}}function T(d){var E,V=d.length;for(E=0;E<V;E+=1)d[E].ty===5&&C(d[E])}return function(d){if(M(I,d.v)&&(T(d.layers),d.assets)){var E,V=d.assets.length;for(E=0;E<V;E+=1)d.assets[E].layers&&T(d.assets[E].layers)}}}(),L=function(){var I=[4,7,99];return function(C){if(C.chars&&!M(I,C.v)){var T,d=C.chars.length;for(T=0;T<d;T+=1){var E=C.chars[T];E.data&&E.data.shapes&&(P(E.data.shapes),E.data.ip=0,E.data.op=99999,E.data.st=0,E.data.sr=1,E.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},C.chars[T].t||(E.data.shapes.push({ty:"no"}),E.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}}(),O=function(){var I=[5,7,15];function C(d){var E=d.t.p;typeof E.a=="number"&&(E.a={a:0,k:E.a}),typeof E.p=="number"&&(E.p={a:0,k:E.p}),typeof E.r=="number"&&(E.r={a:0,k:E.r})}function T(d){var E,V=d.length;for(E=0;E<V;E+=1)d[E].ty===5&&C(d[E])}return function(d){if(M(I,d.v)&&(T(d.layers),d.assets)){var E,V=d.assets.length;for(E=0;E<V;E+=1)d.assets[E].layers&&T(d.assets[E].layers)}}}(),W=function(){var I=[4,1,9];function C(d){var E,V=d.length,R,G;for(E=0;E<V;E+=1)if(d[E].ty==="gr")C(d[E].it);else if(d[E].ty==="fl"||d[E].ty==="st")if(d[E].c.k&&d[E].c.k[0].i)for(G=d[E].c.k.length,R=0;R<G;R+=1)d[E].c.k[R].s&&(d[E].c.k[R].s[0]/=255,d[E].c.k[R].s[1]/=255,d[E].c.k[R].s[2]/=255,d[E].c.k[R].s[3]/=255),d[E].c.k[R].e&&(d[E].c.k[R].e[0]/=255,d[E].c.k[R].e[1]/=255,d[E].c.k[R].e[2]/=255,d[E].c.k[R].e[3]/=255);else d[E].c.k[0]/=255,d[E].c.k[1]/=255,d[E].c.k[2]/=255,d[E].c.k[3]/=255}function T(d){var E,V=d.length;for(E=0;E<V;E+=1)d[E].ty===4&&C(d[E].shapes)}return function(d){if(M(I,d.v)&&(T(d.layers),d.assets)){var E,V=d.assets.length;for(E=0;E<V;E+=1)d.assets[E].layers&&T(d.assets[E].layers)}}}(),H=function(){var I=[4,4,18];function C(d){var E,V=d.length,R,G;for(E=V-1;E>=0;E-=1)if(d[E].ty==="sh")if(d[E].ks.k.i)d[E].ks.k.c=d[E].closed;else for(G=d[E].ks.k.length,R=0;R<G;R+=1)d[E].ks.k[R].s&&(d[E].ks.k[R].s[0].c=d[E].closed),d[E].ks.k[R].e&&(d[E].ks.k[R].e[0].c=d[E].closed);else d[E].ty==="gr"&&C(d[E].it)}function T(d){var E,V,R=d.length,G,j,N,K;for(V=0;V<R;V+=1){if(E=d[V],E.hasMask){var U=E.masksProperties;for(j=U.length,G=0;G<j;G+=1)if(U[G].pt.k.i)U[G].pt.k.c=U[G].cl;else for(K=U[G].pt.k.length,N=0;N<K;N+=1)U[G].pt.k[N].s&&(U[G].pt.k[N].s[0].c=U[G].cl),U[G].pt.k[N].e&&(U[G].pt.k[N].e[0].c=U[G].cl)}E.ty===4&&C(E.shapes)}}return function(d){if(M(I,d.v)&&(T(d.layers),d.assets)){var E,V=d.assets.length;for(E=0;E<V;E+=1)d.assets[E].layers&&T(d.assets[E].layers)}}}();function z(I){I.__complete||(W(I),F(I),L(I),O(I),H(I),k(I.layers,I.assets),c(I.chars,I.assets),I.__complete=!0)}function q(I){I.t.a.length===0&&"m"in I.t.p}var D={};return D.completeData=z,D.checkColors=W,D.checkChars=L,D.checkPathProperties=O,D.checkShapes=H,D.completeLayers=k,D}if(n.dataManager||(n.dataManager=S()),n.assetLoader||(n.assetLoader=function(){function k(b){var f=b.getResponseHeader("content-type");return f&&b.responseType==="json"&&f.indexOf("json")!==-1||b.response&&_typeof$5(b.response)==="object"?b.response:b.response&&typeof b.response=="string"?JSON.parse(b.response):b.responseText?JSON.parse(b.responseText):null}function c(b,f,P,A){var M,F=new XMLHttpRequest;try{F.responseType="json"}catch{}F.onreadystatechange=function(){if(F.readyState===4)if(F.status===200)M=k(F),P(M);else try{M=k(F),P(M)}catch(L){A&&A(L)}};try{F.open(["G","E","T"].join(""),b,!0)}catch{F.open(["G","E","T"].join(""),f+"/"+b,!0)}F.send()}return{load:c}}()),x.data.type==="loadAnimation")n.assetLoader.load(x.data.path,x.data.fullPath,function(k){n.dataManager.completeData(k),n.postMessage({id:x.data.id,payload:k,status:"success"})},function(){n.postMessage({id:x.data.id,status:"error"})});else if(x.data.type==="complete"){var g=x.data.animation;n.dataManager.completeData(g),n.postMessage({id:x.data.id,payload:g,status:"success"})}else x.data.type==="loadData"&&n.assetLoader.load(x.data.path,x.data.fullPath,function(k){n.postMessage({id:x.data.id,payload:k,status:"success"})},function(){n.postMessage({id:x.data.id,status:"error"})})}),i.onmessage=function(u){var x=u.data,S=x.id,g=e[S];e[S]=null,x.status==="success"?g.onComplete(x.payload):g.onError&&g.onError()})}function o(u,x){t+=1;var S="processId_"+t;return e[S]={onComplete:u,onError:x},S}function p(u,x,S){l();var g=o(x,S);i.postMessage({type:"loadAnimation",path:u,fullPath:window.location.origin+window.location.pathname,id:g})}function y(u,x,S){l();var g=o(x,S);i.postMessage({type:"loadData",path:u,fullPath:window.location.origin+window.location.pathname,id:g})}function _(u,x,S){l();var g=o(x,S);i.postMessage({type:"complete",animation:u,id:g})}return{loadAnimation:p,loadData:y,completeAnimation:_}}(),ImagePreloader=function(){var t=function(){var c=createTag("canvas");c.width=1,c.height=1;var b=c.getContext("2d");return b.fillStyle="rgba(0,0,0,0)",b.fillRect(0,0,1,1),c}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function i(c,b,f){var P="";if(c.e)P=c.p;else if(b){var A=c.p;A.indexOf("images/")!==-1&&(A=A.split("/")[1]),P=b+A}else P=f,P+=c.u?c.u:"",P+=c.p;return P}function s(c){var b=0,f=setInterval((function(){var P=c.getBBox();(P.width||b>500)&&(this._imageLoaded(),clearInterval(f)),b+=1}).bind(this),50)}function n(c){var b=i(c,this.assetsPath,this.path),f=createNS("image");isSafari?this.testImageLoaded(f):f.addEventListener("load",this._imageLoaded,!1),f.addEventListener("error",(function(){P.img=t,this._imageLoaded()}).bind(this),!1),f.setAttributeNS("http://www.w3.org/1999/xlink","href",b),this._elementHelper.append?this._elementHelper.append(f):this._elementHelper.appendChild(f);var P={img:f,assetData:c};return P}function a(c){var b=i(c,this.assetsPath,this.path),f=createTag("img");f.crossOrigin="anonymous",f.addEventListener("load",this._imageLoaded,!1),f.addEventListener("error",(function(){P.img=t,this._imageLoaded()}).bind(this),!1),f.src=b;var P={img:f,assetData:c};return P}function l(c){var b={assetData:c},f=i(c,this.assetsPath,this.path);return dataManager.loadData(f,(function(P){b.img=P,this._footageLoaded()}).bind(this),(function(){b.img={},this._footageLoaded()}).bind(this)),b}function o(c,b){this.imagesLoadedCb=b;var f,P=c.length;for(f=0;f<P;f+=1)c[f].layers||(!c[f].t||c[f].t==="seq"?(this.totalImages+=1,this.images.push(this._createImageData(c[f]))):c[f].t===3&&(this.totalFootages+=1,this.images.push(this.createFootageData(c[f]))))}function p(c){this.path=c||""}function y(c){this.assetsPath=c||""}function _(c){for(var b=0,f=this.images.length;b<f;){if(this.images[b].assetData===c)return this.images[b].img;b+=1}return null}function u(){this.imagesLoadedCb=null,this.images.length=0}function x(){return this.totalImages===this.loadedAssets}function S(){return this.totalFootages===this.loadedFootagesCount}function g(c,b){c==="svg"?(this._elementHelper=b,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}function k(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=s.bind(this),this.createFootageData=l.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return k.prototype={loadAssets:o,setAssetsPath:y,setPath:p,loadedImages:x,loadedFootages:S,destroy:u,getAsset:_,createImgData:a,createImageData:n,imageLoaded:e,footageLoaded:r,setCacheType:g},k}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(e,r){if(this._cbs[e])for(var i=this._cbs[e],s=0;s<i.length;s+=1)i[s](r)},addEventListener:function(e,r){return this._cbs[e]||(this._cbs[e]=[]),this._cbs[e].push(r),(function(){this.removeEventListener(e,r)}).bind(this)},removeEventListener:function(e,r){if(!r)this._cbs[e]=null;else if(this._cbs[e]){for(var i=0,s=this._cbs[e].length;i<s;)this._cbs[e][i]===r&&(this._cbs[e].splice(i,1),i-=1,s-=1),i+=1;this._cbs[e].length||(this._cbs[e]=null)}}};var markerParser=function(){function t(e){for(var r=e.split(`\r
`),i={},s,n=0,a=0;a<r.length;a+=1)s=r[a].split(":"),s.length===2&&(i[s[0]]=s[1].trim(),n+=1);if(n===0)throw new Error;return i}return function(e){for(var r=[],i=0;i<e.length;i+=1){var s=e[i],n={time:s.tm,duration:s.dr};try{n.payload=JSON.parse(e[i].cm)}catch{try{n.payload=t(e[i].cm)}catch{n.payload={name:e[i].cm}}}r.push(n)}return r}}(),ProjectInterface=function(){function t(e){this.compositions.push(e)}return function(){function e(r){for(var i=0,s=this.compositions.length;i<s;){if(this.compositions[i].data&&this.compositions[i].data.nm===r)return this.compositions[i].prepareFrame&&this.compositions[i].data.xt&&this.compositions[i].prepareFrame(this.currentFrame),this.compositions[i].compInterface;i+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(e,r){renderers[e]=r};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$4=function(r){return typeof r}:_typeof$4=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,t.loop===""||t.loop===null||t.loop===void 0||t.loop===!0?this.loop=!0:t.loop===!1?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay="autoplay"in t?t.autoplay:!0,this.name=t.name?t.name:"",this.autoloadSegments=Object.prototype.hasOwnProperty.call(t,"autoloadSegments")?t.autoloadSegments:!0,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(t.path.lastIndexOf("\\")!==-1?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&_typeof$4(e)!=="object"&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},i=t.attributes;r.path=i.getNamedItem("data-animation-path")?i.getNamedItem("data-animation-path").value:i.getNamedItem("data-bm-path")?i.getNamedItem("data-bm-path").value:i.getNamedItem("bm-path")?i.getNamedItem("bm-path").value:"",r.animType=i.getNamedItem("data-anim-type")?i.getNamedItem("data-anim-type").value:i.getNamedItem("data-bm-type")?i.getNamedItem("data-bm-type").value:i.getNamedItem("bm-type")?i.getNamedItem("bm-type").value:i.getNamedItem("data-bm-renderer")?i.getNamedItem("data-bm-renderer").value:i.getNamedItem("bm-renderer")?i.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var s=i.getNamedItem("data-anim-loop")?i.getNamedItem("data-anim-loop").value:i.getNamedItem("data-bm-loop")?i.getNamedItem("data-bm-loop").value:i.getNamedItem("bm-loop")?i.getNamedItem("bm-loop").value:"";s==="false"?r.loop=!1:s==="true"?r.loop=!0:s!==""&&(r.loop=parseInt(s,10));var n=i.getNamedItem("data-anim-autoplay")?i.getNamedItem("data-anim-autoplay").value:i.getNamedItem("data-bm-autoplay")?i.getNamedItem("data-bm-autoplay").value:i.getNamedItem("bm-autoplay")?i.getNamedItem("bm-autoplay").value:!0;r.autoplay=n!=="false",r.name=i.getNamedItem("data-name")?i.getNamedItem("data-name").value:i.getNamedItem("data-bm-name")?i.getNamedItem("data-bm-name").value:i.getNamedItem("bm-name")?i.getNamedItem("bm-name").value:"";var a=i.getNamedItem("data-anim-prerender")?i.getNamedItem("data-anim-prerender").value:i.getNamedItem("data-bm-prerender")?i.getNamedItem("data-bm-prerender").value:i.getNamedItem("bm-prerender")?i.getNamedItem("bm-prerender").value:"";a==="false"&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e=this.animationData.layers,r,i=e.length,s=t.layers,n,a=s.length;for(n=0;n<a;n+=1)for(r=0;r<i;){if(e[r].id===s[n].id){e[r]=s[n];break}r+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,r=0;r<i;r+=1)this.animationData.assets.push(t.assets[r]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||t.length===0||!this.autoloadSegments){this.trigger("data_ready"),this.timeCompleted=this.totalFrames;return}var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),(function(){this.trigger("data_failed")}).bind(this))},AnimationItem.prototype.loadSegments=function(){var t=this.animationData.segments;t||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(e){this.triggerConfigError(e)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=="canvas")&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout((function(){this.trigger("DOMLoaded")}).bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r=typeof t=="number"?t:void 0,i=typeof e=="number"?e:void 0;this.renderer.updateContainerSize(r,i)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!(this.isLoaded===!1||!this.renderer))try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||this.isPaused===!0&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||this.isPaused===!1&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(this.isPaused===!0?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if(e=this.markers[r],e.payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&this.goToAndStop(s.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&(s.duration?this.playSegments([s.time,s.time+s.duration],!0):this.goToAndStop(s.time,!0))}else this.goToAndStop(i,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!(this.isPaused===!0||this.isLoaded===!1)){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?!this.loop||this.playCount===this.loop?this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):e<0?this.checkSegments(e%this.totalFrames)||(this.loop&&!(this.playCount--<=0&&this.loop!==!0)?(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0):(r=!0,e=0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,r!==-1&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),_typeof$4(t[0])==="object"){var r,i=t.length;for(r=0;r<i;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return this.segments.length?(this.adjustSegment(this.segments.shift(),t),!0):!1},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;r.indexOf("images/")!==-1&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{var i=this.renderer.getElementByPath(t);i.updateDocumentData(e,r)}catch{}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}t==="enterFrame"&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),t==="loopComplete"&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),t==="complete"&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),t==="segmentStart"&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),t==="destroy"&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,i=0,s=0,n=!0,a=!1;function l(C){for(var T=0,d=C.target;T<i;)e[T].animation===d&&(e.splice(T,1),T-=1,i-=1,d.isPaused||_()),T+=1}function o(C,T){if(!C)return null;for(var d=0;d<i;){if(e[d].elem===C&&e[d].elem!==null)return e[d].animation;d+=1}var E=new AnimationItem;return u(E,C),E.setData(C,T),E}function p(){var C,T=e.length,d=[];for(C=0;C<T;C+=1)d.push(e[C].animation);return d}function y(){s+=1,W()}function _(){s-=1}function u(C,T){C.addEventListener("destroy",l),C.addEventListener("_active",y),C.addEventListener("_idle",_),e.push({elem:T,animation:C}),i+=1}function x(C){var T=new AnimationItem;return u(T,null),T.setParams(C),T}function S(C,T){var d;for(d=0;d<i;d+=1)e[d].animation.setSpeed(C,T)}function g(C,T){var d;for(d=0;d<i;d+=1)e[d].animation.setDirection(C,T)}function k(C){var T;for(T=0;T<i;T+=1)e[T].animation.play(C)}function c(C){var T=C-r,d;for(d=0;d<i;d+=1)e[d].animation.advanceTime(T);r=C,s&&!a?window.requestAnimationFrame(c):n=!0}function b(C){r=C,window.requestAnimationFrame(c)}function f(C){var T;for(T=0;T<i;T+=1)e[T].animation.pause(C)}function P(C,T,d){var E;for(E=0;E<i;E+=1)e[E].animation.goToAndStop(C,T,d)}function A(C){var T;for(T=0;T<i;T+=1)e[T].animation.stop(C)}function M(C){var T;for(T=0;T<i;T+=1)e[T].animation.togglePause(C)}function F(C){var T;for(T=i-1;T>=0;T-=1)e[T].animation.destroy(C)}function L(C,T,d){var E=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),V,R=E.length;for(V=0;V<R;V+=1)d&&E[V].setAttribute("data-bm-type",d),o(E[V],C);if(T&&R===0){d||(d="svg");var G=document.getElementsByTagName("body")[0];G.innerText="";var j=createTag("div");j.style.width="100%",j.style.height="100%",j.setAttribute("data-bm-type",d),G.appendChild(j),o(j,C)}}function O(){var C;for(C=0;C<i;C+=1)e[C].animation.resize()}function W(){!a&&s&&n&&(window.requestAnimationFrame(b),n=!1)}function H(){a=!0}function z(){a=!1,W()}function q(C,T){var d;for(d=0;d<i;d+=1)e[d].animation.setVolume(C,T)}function D(C){var T;for(T=0;T<i;T+=1)e[T].animation.mute(C)}function I(C){var T;for(T=0;T<i;T+=1)e[T].animation.unmute(C)}return t.registerAnimation=o,t.loadAnimation=x,t.setSpeed=S,t.setDirection=g,t.play=k,t.pause=f,t.stop=A,t.togglePause=M,t.searchAnimations=L,t.resize=O,t.goToAndStop=P,t.destroy=F,t.freeze=H,t.unfreeze=z,t.setVolume=q,t.mute=D,t.unmute=I,t.getRegisteredAnimations=p,t}(),BezierFactory=function(){var t={};t.getBezierEasing=r;var e={};function r(b,f,P,A,M){var F=M||("bez_"+b+"_"+f+"_"+P+"_"+A).replace(/\./g,"p");if(e[F])return e[F];var L=new c([b,f,P,A]);return e[F]=L,L}var i=4,s=.001,n=1e-7,a=10,l=11,o=1/(l-1),p=typeof Float32Array=="function";function y(b,f){return 1-3*f+3*b}function _(b,f){return 3*f-6*b}function u(b){return 3*b}function x(b,f,P){return((y(f,P)*b+_(f,P))*b+u(f))*b}function S(b,f,P){return 3*y(f,P)*b*b+2*_(f,P)*b+u(f)}function g(b,f,P,A,M){var F,L,O=0;do L=f+(P-f)/2,F=x(L,A,M)-b,F>0?P=L:f=L;while(Math.abs(F)>n&&++O<a);return L}function k(b,f,P,A){for(var M=0;M<i;++M){var F=S(f,P,A);if(F===0)return f;var L=x(f,P,A)-b;f-=L/F}return f}function c(b){this._p=b,this._mSampleValues=p?new Float32Array(l):new Array(l),this._precomputed=!1,this.get=this.get.bind(this)}return c.prototype={get:function(f){var P=this._p[0],A=this._p[1],M=this._p[2],F=this._p[3];return this._precomputed||this._precompute(),P===A&&M===F?f:f===0?0:f===1?1:x(this._getTForX(f),A,F)},_precompute:function(){var f=this._p[0],P=this._p[1],A=this._p[2],M=this._p[3];this._precomputed=!0,(f!==P||A!==M)&&this._calcSampleValues()},_calcSampleValues:function(){for(var f=this._p[0],P=this._p[2],A=0;A<l;++A)this._mSampleValues[A]=x(A*o,f,P)},_getTForX:function(f){for(var P=this._p[0],A=this._p[2],M=this._mSampleValues,F=0,L=1,O=l-1;L!==O&&M[L]<=f;++L)F+=o;--L;var W=(f-M[L])/(M[L+1]-M[L]),H=F+W*o,z=S(H,P,A);return z>=s?k(f,H,P,A):z===0?H:g(f,F,F+o,P,A)}},t}(),pooling=function(){function t(e){return e.concat(createSizedArray(e.length))}return{double:t}}(),poolFactory=function(){return function(t,e,r){var i=0,s=t,n=createSizedArray(s),a={newElement:l,release:o};function l(){var p;return i?(i-=1,p=n[i]):p=e(),p}function o(p){i===s&&(n=pooling.double(n),s*=2),r&&r(p),n[i]=p,i+=1}return a}}(),bezierLengthPool=function(){function t(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}return poolFactory(8,t)}(),segmentsLengthPool=function(){function t(){return{lengths:[],totalLength:0}}function e(r){var i,s=r.lengths.length;for(i=0;i<s;i+=1)bezierLengthPool.release(r.lengths[i]);r.lengths.length=0}return poolFactory(8,t,e)}();function bezFunction(){var t=Math;function e(u,x,S,g,k,c){var b=u*g+x*k+S*c-k*g-c*u-S*x;return b>-.001&&b<.001}function r(u,x,S,g,k,c,b,f,P){if(S===0&&c===0&&P===0)return e(u,x,g,k,b,f);var A=t.sqrt(t.pow(g-u,2)+t.pow(k-x,2)+t.pow(c-S,2)),M=t.sqrt(t.pow(b-u,2)+t.pow(f-x,2)+t.pow(P-S,2)),F=t.sqrt(t.pow(b-g,2)+t.pow(f-k,2)+t.pow(P-c,2)),L;return A>M?A>F?L=A-M-F:L=F-M-A:F>M?L=F-M-A:L=M-A-F,L>-1e-4&&L<1e-4}var i=function(){return function(u,x,S,g){var k=getDefaultCurveSegments(),c,b,f,P,A,M=0,F,L=[],O=[],W=bezierLengthPool.newElement();for(f=S.length,c=0;c<k;c+=1){for(A=c/(k-1),F=0,b=0;b<f;b+=1)P=bmPow(1-A,3)*u[b]+3*bmPow(1-A,2)*A*S[b]+3*(1-A)*bmPow(A,2)*g[b]+bmPow(A,3)*x[b],L[b]=P,O[b]!==null&&(F+=bmPow(L[b]-O[b],2)),O[b]=L[b];F&&(F=bmSqrt(F),M+=F),W.percents[c]=A,W.lengths[c]=M}return W.addedLength=M,W}}();function s(u){var x=segmentsLengthPool.newElement(),S=u.c,g=u.v,k=u.o,c=u.i,b,f=u._length,P=x.lengths,A=0;for(b=0;b<f-1;b+=1)P[b]=i(g[b],g[b+1],k[b],c[b+1]),A+=P[b].addedLength;return S&&f&&(P[b]=i(g[b],g[0],k[b],c[0]),A+=P[b].addedLength),x.totalLength=A,x}function n(u){this.segmentLength=0,this.points=new Array(u)}function a(u,x){this.partialLength=u,this.point=x}var l=function(){var u={};return function(x,S,g,k){var c=(x[0]+"_"+x[1]+"_"+S[0]+"_"+S[1]+"_"+g[0]+"_"+g[1]+"_"+k[0]+"_"+k[1]).replace(/\./g,"p");if(!u[c]){var b=getDefaultCurveSegments(),f,P,A,M,F,L=0,O,W,H=null;x.length===2&&(x[0]!==S[0]||x[1]!==S[1])&&e(x[0],x[1],S[0],S[1],x[0]+g[0],x[1]+g[1])&&e(x[0],x[1],S[0],S[1],S[0]+k[0],S[1]+k[1])&&(b=2);var z=new n(b);for(A=g.length,f=0;f<b;f+=1){for(W=createSizedArray(A),F=f/(b-1),O=0,P=0;P<A;P+=1)M=bmPow(1-F,3)*x[P]+3*bmPow(1-F,2)*F*(x[P]+g[P])+3*(1-F)*bmPow(F,2)*(S[P]+k[P])+bmPow(F,3)*S[P],W[P]=M,H!==null&&(O+=bmPow(W[P]-H[P],2));O=bmSqrt(O),L+=O,z.points[f]=new a(O,W),H=W}z.segmentLength=L,u[c]=z}return u[c]}}();function o(u,x){var S=x.percents,g=x.lengths,k=S.length,c=bmFloor((k-1)*u),b=u*x.addedLength,f=0;if(c===k-1||c===0||b===g[c])return S[c];for(var P=g[c]>b?-1:1,A=!0;A;)if(g[c]<=b&&g[c+1]>b?(f=(b-g[c])/(g[c+1]-g[c]),A=!1):c+=P,c<0||c>=k-1){if(c===k-1)return S[c];A=!1}return S[c]+(S[c+1]-S[c])*f}function p(u,x,S,g,k,c){var b=o(k,c),f=1-b,P=t.round((f*f*f*u[0]+(b*f*f+f*b*f+f*f*b)*S[0]+(b*b*f+f*b*b+b*f*b)*g[0]+b*b*b*x[0])*1e3)/1e3,A=t.round((f*f*f*u[1]+(b*f*f+f*b*f+f*f*b)*S[1]+(b*b*f+f*b*b+b*f*b)*g[1]+b*b*b*x[1])*1e3)/1e3;return[P,A]}var y=createTypedArray("float32",8);function _(u,x,S,g,k,c,b){k<0?k=0:k>1&&(k=1);var f=o(k,b);c=c>1?1:c;var P=o(c,b),A,M=u.length,F=1-f,L=1-P,O=F*F*F,W=f*F*F*3,H=f*f*F*3,z=f*f*f,q=F*F*L,D=f*F*L+F*f*L+F*F*P,I=f*f*L+F*f*P+f*F*P,C=f*f*P,T=F*L*L,d=f*L*L+F*P*L+F*L*P,E=f*P*L+F*P*P+f*L*P,V=f*P*P,R=L*L*L,G=P*L*L+L*P*L+L*L*P,j=P*P*L+L*P*P+P*L*P,N=P*P*P;for(A=0;A<M;A+=1)y[A*4]=t.round((O*u[A]+W*S[A]+H*g[A]+z*x[A])*1e3)/1e3,y[A*4+1]=t.round((q*u[A]+D*S[A]+I*g[A]+C*x[A])*1e3)/1e3,y[A*4+2]=t.round((T*u[A]+d*S[A]+E*g[A]+V*x[A])*1e3)/1e3,y[A*4+3]=t.round((R*u[A]+G*S[A]+j*g[A]+N*x[A])*1e3)/1e3;return y}return{getSegmentsLength:s,getNewSegment:_,getPointInSegment:p,buildBezierData:l,pointOnLine2D:e,pointOnLine3D:r}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r=this.offsetTime,i;this.propType==="multidimensional"&&(i=createTypedArray("float32",this.pv.length));for(var s=e.lastIndex,n=s,a=this.keyframes.length-1,l=!0,o,p,y;l;){if(o=this.keyframes[n],p=this.keyframes[n+1],n===a-1&&t>=p.t-r){o.h&&(o=p),s=0;break}if(p.t-r>t){s=n;break}n<a-1?n+=1:(s=0,l=!1)}y=this.keyframesMetadata[n]||{};var _,u,x,S,g,k,c=p.t-r,b=o.t-r,f;if(o.to){y.bezierData||(y.bezierData=bez.buildBezierData(o.s,p.s||o.e,o.to,o.ti));var P=y.bezierData;if(t>=c||t<b){var A=t>=c?P.points.length-1:0;for(u=P.points[A].point.length,_=0;_<u;_+=1)i[_]=P.points[A].point[_]}else{y.__fnct?k=y.__fnct:(k=BezierFactory.getBezierEasing(o.o.x,o.o.y,o.i.x,o.i.y,o.n).get,y.__fnct=k),x=k((t-b)/(c-b));var M=P.segmentLength*x,F,L=e.lastFrame<t&&e._lastKeyframeIndex===n?e._lastAddedLength:0;for(g=e.lastFrame<t&&e._lastKeyframeIndex===n?e._lastPoint:0,l=!0,S=P.points.length;l;){if(L+=P.points[g].partialLength,M===0||x===0||g===P.points.length-1){for(u=P.points[g].point.length,_=0;_<u;_+=1)i[_]=P.points[g].point[_];break}else if(M>=L&&M<L+P.points[g+1].partialLength){for(F=(M-L)/P.points[g+1].partialLength,u=P.points[g].point.length,_=0;_<u;_+=1)i[_]=P.points[g].point[_]+(P.points[g+1].point[_]-P.points[g].point[_])*F;break}g<S-1?g+=1:l=!1}e._lastPoint=g,e._lastAddedLength=L-P.points[g].partialLength,e._lastKeyframeIndex=n}}else{var O,W,H,z,q;if(a=o.s.length,f=p.s||o.e,this.sh&&o.h!==1)if(t>=c)i[0]=f[0],i[1]=f[1],i[2]=f[2];else if(t<=b)i[0]=o.s[0],i[1]=o.s[1],i[2]=o.s[2];else{var D=createQuaternion(o.s),I=createQuaternion(f),C=(t-b)/(c-b);quaternionToEuler(i,slerp(D,I,C))}else for(n=0;n<a;n+=1)o.h!==1&&(t>=c?x=1:t<b?x=0:(o.o.x.constructor===Array?(y.__fnct||(y.__fnct=[]),y.__fnct[n]?k=y.__fnct[n]:(O=o.o.x[n]===void 0?o.o.x[0]:o.o.x[n],W=o.o.y[n]===void 0?o.o.y[0]:o.o.y[n],H=o.i.x[n]===void 0?o.i.x[0]:o.i.x[n],z=o.i.y[n]===void 0?o.i.y[0]:o.i.y[n],k=BezierFactory.getBezierEasing(O,W,H,z).get,y.__fnct[n]=k)):y.__fnct?k=y.__fnct:(O=o.o.x,W=o.o.y,H=o.i.x,z=o.i.y,k=BezierFactory.getBezierEasing(O,W,H,z).get,o.keyframeMetadata=k),x=k((t-b)/(c-b)))),f=p.s||o.e,q=o.h===1?o.s[n]:o.s[n]+(f[n]-o.s[n])*x,this.propType==="multidimensional"?i[n]=q:i=q}return e.lastIndex=s,i}function slerp(t,e,r){var i=[],s=t[0],n=t[1],a=t[2],l=t[3],o=e[0],p=e[1],y=e[2],_=e[3],u,x,S,g,k;return x=s*o+n*p+a*y+l*_,x<0&&(x=-x,o=-o,p=-p,y=-y,_=-_),1-x>1e-6?(u=Math.acos(x),S=Math.sin(u),g=Math.sin((1-r)*u)/S,k=Math.sin(r*u)/S):(g=1-r,k=r),i[0]=g*s+k*o,i[1]=g*n+k*p,i[2]=g*a+k*y,i[3]=g*l+k*_,i}function quaternionToEuler(t,e){var r=e[0],i=e[1],s=e[2],n=e[3],a=Math.atan2(2*i*n-2*r*s,1-2*i*i-2*s*s),l=Math.asin(2*r*i+2*s*n),o=Math.atan2(2*r*n-2*i*s,1-2*r*r-2*s*s);t[0]=a/degToRads,t[1]=l/degToRads,t[2]=o/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,i=t[2]*degToRads,s=Math.cos(e/2),n=Math.cos(r/2),a=Math.cos(i/2),l=Math.sin(e/2),o=Math.sin(r/2),p=Math.sin(i/2),y=s*n*a-l*o*p,_=l*o*a+s*n*p,u=l*n*a+s*o*p,x=s*o*a-l*n*p;return[_,u,x,y]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(t,this._caching);this.pv=i}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if(this.propType==="unidimensional")e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,i=this.v.length;r<i;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(!(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)){if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=this._isFirstFrame;var t,e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,i){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,i){this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var s,n=e.k.length;for(this.v=createTypedArray("float32",n),this.pv=createTypedArray("float32",n),this.vel=createTypedArray("float32",n),s=0;s<n;s+=1)this.v[s]=e.k[s]*this.mult,this.pv[s]=e.k[s];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,i){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,i){this.propType="multidimensional";var s,n=e.k.length,a,l,o,p;for(s=0;s<n-1;s+=1)e.k[s].to&&e.k[s].s&&e.k[s+1]&&e.k[s+1].s&&(a=e.k[s].s,l=e.k[s+1].s,o=e.k[s].to,p=e.k[s].ti,(a.length===2&&!(a[0]===l[0]&&a[1]===l[1])&&bez.pointOnLine2D(a[0],a[1],l[0],l[1],a[0]+o[0],a[1]+o[1])&&bez.pointOnLine2D(a[0],a[1],l[0],l[1],l[0]+p[0],l[1]+p[1])||a.length===3&&!(a[0]===l[0]&&a[1]===l[1]&&a[2]===l[2])&&bez.pointOnLine3D(a[0],a[1],a[2],l[0],l[1],l[2],a[0]+o[0],a[1]+o[1],a[2]+o[2])&&bez.pointOnLine3D(a[0],a[1],a[2],l[0],l[1],l[2],l[0]+p[0],l[1]+p[1],l[2]+p[2]))&&(e.k[s].to=null,e.k[s].ti=null),a[0]===l[0]&&a[1]===l[1]&&o[0]===0&&o[1]===0&&p[0]===0&&p[1]===0&&(a.length===2||a[2]===l[2]&&o[2]===0&&p[2]===0)&&(e.k[s].to=null,e.k[s].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var y=e.k[0].s.length;for(this.v=createTypedArray("float32",y),this.pv=createTypedArray("float32",y),s=0;s<y;s+=1)this.v[s]=initFrame,this.pv[s]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",y)},this.addEffect=addEffect}var PropertyFactory=function(){function t(r,i,s,n,a){i.sid&&(i=r.globalData.slotManager.getProp(i));var l;if(!i.k.length)l=new ValueProperty(r,i,n,a);else if(typeof i.k[0]=="number")l=new MultiDimensionalProperty(r,i,n,a);else switch(s){case 0:l=new KeyframedValueProperty(r,i,n,a);break;case 1:l=new KeyframedMultidimensionalProperty(r,i,n,a);break}return l.effectsSequence.length&&a.addDynamicProperty(l),l}var e={getProp:t};return e}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&(this.dynamicProperties.push(e),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var e,r=this.dynamicProperties.length;for(e=0;e<r;e+=1)this.dynamicProperties[e].getValue(),this.dynamicProperties[e]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(e){this.container=e,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=function(){function t(){return createTypedArray("float32",2)}return poolFactory(8,t)}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,i,s){var n;switch(this._length=Math.max(this._length,i+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":n=this.v;break;case"i":n=this.i;break;case"o":n=this.o;break;default:n=[];break}(!n[i]||n[i]&&!s)&&(n[i]=pointPool.newElement()),n[i][0]=t,n[i][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,i,s,n,a,l){this.setXYAt(t,e,"v",a,l),this.setXYAt(r,i,"o",a,l),this.setXYAt(s,n,"i",a,l)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,i=this.i,s=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],i[0][0],i[0][1],r[0][0],r[0][1],0,!1),s=1);var n=this._length-1,a=this._length,l;for(l=s;l<a;l+=1)t.setTripleAt(e[n][0],e[n][1],i[n][0],i[n][1],r[n][0],r[n][1],l,!1),n-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=function(){function t(){return new ShapePath}function e(s){var n=s._length,a;for(a=0;a<n;a+=1)pointPool.release(s.v[a]),pointPool.release(s.i[a]),pointPool.release(s.o[a]),s.v[a]=null,s.i[a]=null,s.o[a]=null;s._length=0,s.c=!1}function r(s){var n=i.newElement(),a,l=s._length===void 0?s.v.length:s._length;for(n.setLength(l),n.c=s.c,a=0;a<l;a+=1)n.setTripleAt(s.v[a][0],s.v[a][1],s.o[a][0],s.o[a][1],s.i[a][0],s.i[a][1],a);return n}var i=poolFactory(4,t,e);return i.clone=r,i}();function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=function(){var t={newShapeCollection:s,release:n},e=0,r=4,i=createSizedArray(r);function s(){var a;return e?(e-=1,a=i[e]):a=new ShapeCollection,a}function n(a){var l,o=a._length;for(l=0;l<o;l+=1)shapePool.release(a.shapes[l]);a._length=0,e===r&&(i=pooling.double(i),r*=2),i[e]=a,e+=1}return t}(),ShapePropertyFactory=function(){var t=-999999;function e(c,b,f){var P=f.lastIndex,A,M,F,L,O,W,H,z,q,D=this.keyframes;if(c<D[0].t-this.offsetTime)A=D[0].s[0],F=!0,P=0;else if(c>=D[D.length-1].t-this.offsetTime)A=D[D.length-1].s?D[D.length-1].s[0]:D[D.length-2].e[0],F=!0;else{for(var I=P,C=D.length-1,T=!0,d,E,V;T&&(d=D[I],E=D[I+1],!(E.t-this.offsetTime>c));)I<C-1?I+=1:T=!1;if(V=this.keyframesMetadata[I]||{},F=d.h===1,P=I,!F){if(c>=E.t-this.offsetTime)z=1;else if(c<d.t-this.offsetTime)z=0;else{var R;V.__fnct?R=V.__fnct:(R=BezierFactory.getBezierEasing(d.o.x,d.o.y,d.i.x,d.i.y).get,V.__fnct=R),z=R((c-(d.t-this.offsetTime))/(E.t-this.offsetTime-(d.t-this.offsetTime)))}M=E.s?E.s[0]:d.e[0]}A=d.s[0]}for(W=b._length,H=A.i[0].length,f.lastIndex=P,L=0;L<W;L+=1)for(O=0;O<H;O+=1)q=F?A.i[L][O]:A.i[L][O]+(M.i[L][O]-A.i[L][O])*z,b.i[L][O]=q,q=F?A.o[L][O]:A.o[L][O]+(M.o[L][O]-A.o[L][O])*z,b.o[L][O]=q,q=F?A.v[L][O]:A.v[L][O]+(M.v[L][O]-A.v[L][O])*z,b.v[L][O]=q}function r(){var c=this.comp.renderedFrame-this.offsetTime,b=this.keyframes[0].t-this.offsetTime,f=this.keyframes[this.keyframes.length-1].t-this.offsetTime,P=this._caching.lastFrame;return P!==t&&(P<b&&c<b||P>f&&c>f)||(this._caching.lastIndex=P<c?this._caching.lastIndex:0,this.interpolateShape(c,this.pv,this._caching)),this._caching.lastFrame=c,this.pv}function i(){this.paths=this.localShapeCollection}function s(c,b){if(c._length!==b._length||c.c!==b.c)return!1;var f,P=c._length;for(f=0;f<P;f+=1)if(c.v[f][0]!==b.v[f][0]||c.v[f][1]!==b.v[f][1]||c.o[f][0]!==b.o[f][0]||c.o[f][1]!==b.o[f][1]||c.i[f][0]!==b.i[f][0]||c.i[f][1]!==b.i[f][1])return!1;return!0}function n(c){s(this.v,c)||(this.v=shapePool.clone(c),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length){this._mdf=!1;return}if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=!1;var c;this.kf?c=this.pv:this.data.ks?c=this.data.ks.k:c=this.data.pt.k;var b,f=this.effectsSequence.length;for(b=0;b<f;b+=1)c=this.effectsSequence[b](c);this.setVValue(c),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function l(c,b,f){this.propType="shape",this.comp=c.comp,this.container=c,this.elem=c,this.data=b,this.k=!1,this.kf=!1,this._mdf=!1;var P=f===3?b.pt.k:b.ks.k;this.v=shapePool.clone(P),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function o(c){this.effectsSequence.push(c),this.container.addDynamicProperty(this)}l.prototype.interpolateShape=e,l.prototype.getValue=a,l.prototype.setVValue=n,l.prototype.addEffect=o;function p(c,b,f){this.propType="shape",this.comp=c.comp,this.elem=c,this.container=c,this.offsetTime=c.data.st,this.keyframes=f===3?b.pt.k:b.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var P=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,P),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=i,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}p.prototype.getValue=a,p.prototype.interpolateShape=e,p.prototype.setVValue=n,p.prototype.addEffect=o;var y=function(){var c=roundCorner;function b(f,P){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=P.d,this.elem=f,this.comp=f.comp,this.frameId=-1,this.initDynamicPropertyContainer(f),this.p=PropertyFactory.getProp(f,P.p,1,0,this),this.s=PropertyFactory.getProp(f,P.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return b.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var P=this.p.v[0],A=this.p.v[1],M=this.s.v[0]/2,F=this.s.v[1]/2,L=this.d!==3,O=this.v;O.v[0][0]=P,O.v[0][1]=A-F,O.v[1][0]=L?P+M:P-M,O.v[1][1]=A,O.v[2][0]=P,O.v[2][1]=A+F,O.v[3][0]=L?P-M:P+M,O.v[3][1]=A,O.i[0][0]=L?P-M*c:P+M*c,O.i[0][1]=A-F,O.i[1][0]=L?P+M:P-M,O.i[1][1]=A-F*c,O.i[2][0]=L?P+M*c:P-M*c,O.i[2][1]=A+F,O.i[3][0]=L?P-M:P+M,O.i[3][1]=A+F*c,O.o[0][0]=L?P+M*c:P-M*c,O.o[0][1]=A-F,O.o[1][0]=L?P+M:P-M,O.o[1][1]=A+F*c,O.o[2][0]=L?P-M*c:P+M*c,O.o[2][1]=A+F,O.o[3][0]=L?P-M:P+M,O.o[3][1]=A-F*c}},extendPrototype([DynamicPropertyContainer],b),b}(),_=function(){function c(b,f){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=b,this.comp=b.comp,this.data=f,this.frameId=-1,this.d=f.d,this.initDynamicPropertyContainer(b),f.sy===1?(this.ir=PropertyFactory.getProp(b,f.ir,0,0,this),this.is=PropertyFactory.getProp(b,f.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(b,f.pt,0,0,this),this.p=PropertyFactory.getProp(b,f.p,1,0,this),this.r=PropertyFactory.getProp(b,f.r,0,degToRads,this),this.or=PropertyFactory.getProp(b,f.or,0,0,this),this.os=PropertyFactory.getProp(b,f.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return c.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var f=Math.floor(this.pt.v)*2,P=Math.PI*2/f,A=!0,M=this.or.v,F=this.ir.v,L=this.os.v,O=this.is.v,W=2*Math.PI*M/(f*2),H=2*Math.PI*F/(f*2),z,q,D,I,C=-Math.PI/2;C+=this.r.v;var T=this.data.d===3?-1:1;for(this.v._length=0,z=0;z<f;z+=1){q=A?M:F,D=A?L:O,I=A?W:H;var d=q*Math.cos(C),E=q*Math.sin(C),V=d===0&&E===0?0:E/Math.sqrt(d*d+E*E),R=d===0&&E===0?0:-d/Math.sqrt(d*d+E*E);d+=+this.p.v[0],E+=+this.p.v[1],this.v.setTripleAt(d,E,d-V*I*D*T,E-R*I*D*T,d+V*I*D*T,E+R*I*D*T,z,!0),A=!A,C+=P*T}},convertPolygonToPath:function(){var f=Math.floor(this.pt.v),P=Math.PI*2/f,A=this.or.v,M=this.os.v,F=2*Math.PI*A/(f*4),L,O=-Math.PI*.5,W=this.data.d===3?-1:1;for(O+=this.r.v,this.v._length=0,L=0;L<f;L+=1){var H=A*Math.cos(O),z=A*Math.sin(O),q=H===0&&z===0?0:z/Math.sqrt(H*H+z*z),D=H===0&&z===0?0:-H/Math.sqrt(H*H+z*z);H+=+this.p.v[0],z+=+this.p.v[1],this.v.setTripleAt(H,z,H-q*F*M*W,z-D*F*M*W,H+q*F*M*W,z+D*F*M*W,L,!0),O+=P*W}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],c),c}(),u=function(){function c(b,f){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=b,this.comp=b.comp,this.frameId=-1,this.d=f.d,this.initDynamicPropertyContainer(b),this.p=PropertyFactory.getProp(b,f.p,1,0,this),this.s=PropertyFactory.getProp(b,f.s,1,0,this),this.r=PropertyFactory.getProp(b,f.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return c.prototype={convertRectToPath:function(){var f=this.p.v[0],P=this.p.v[1],A=this.s.v[0]/2,M=this.s.v[1]/2,F=bmMin(A,M,this.r.v),L=F*(1-roundCorner);this.v._length=0,this.d===2||this.d===1?(this.v.setTripleAt(f+A,P-M+F,f+A,P-M+F,f+A,P-M+L,0,!0),this.v.setTripleAt(f+A,P+M-F,f+A,P+M-L,f+A,P+M-F,1,!0),F!==0?(this.v.setTripleAt(f+A-F,P+M,f+A-F,P+M,f+A-L,P+M,2,!0),this.v.setTripleAt(f-A+F,P+M,f-A+L,P+M,f-A+F,P+M,3,!0),this.v.setTripleAt(f-A,P+M-F,f-A,P+M-F,f-A,P+M-L,4,!0),this.v.setTripleAt(f-A,P-M+F,f-A,P-M+L,f-A,P-M+F,5,!0),this.v.setTripleAt(f-A+F,P-M,f-A+F,P-M,f-A+L,P-M,6,!0),this.v.setTripleAt(f+A-F,P-M,f+A-L,P-M,f+A-F,P-M,7,!0)):(this.v.setTripleAt(f-A,P+M,f-A+L,P+M,f-A,P+M,2),this.v.setTripleAt(f-A,P-M,f-A,P-M+L,f-A,P-M,3))):(this.v.setTripleAt(f+A,P-M+F,f+A,P-M+L,f+A,P-M+F,0,!0),F!==0?(this.v.setTripleAt(f+A-F,P-M,f+A-F,P-M,f+A-L,P-M,1,!0),this.v.setTripleAt(f-A+F,P-M,f-A+L,P-M,f-A+F,P-M,2,!0),this.v.setTripleAt(f-A,P-M+F,f-A,P-M+F,f-A,P-M+L,3,!0),this.v.setTripleAt(f-A,P+M-F,f-A,P+M-L,f-A,P+M-F,4,!0),this.v.setTripleAt(f-A+F,P+M,f-A+F,P+M,f-A+L,P+M,5,!0),this.v.setTripleAt(f+A-F,P+M,f+A-L,P+M,f+A-F,P+M,6,!0),this.v.setTripleAt(f+A,P+M-F,f+A,P+M-F,f+A,P+M-L,7,!0)):(this.v.setTripleAt(f-A,P-M,f-A+L,P-M,f-A,P-M,1,!0),this.v.setTripleAt(f-A,P+M,f-A,P+M-L,f-A,P+M,2,!0),this.v.setTripleAt(f+A,P+M,f+A-L,P+M,f+A,P+M,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],c),c}();function x(c,b,f){var P;if(f===3||f===4){var A=f===3?b.pt:b.ks,M=A.k;M.length?P=new p(c,b,f):P=new l(c,b,f)}else f===5?P=new u(c,b):f===6?P=new y(c,b):f===7&&(P=new _(c,b));return P.k&&c.addDynamicProperty(P),P}function S(){return l}function g(){return p}var k={};return k.getShapeProp=x,k.getConstructorFunction=S,k.getKeyframedConstructorFunction=g,k}();/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */var Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,i=Math.round;function s(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function n(d){if(d===0)return this;var E=t(d),V=e(d);return this._t(E,-V,0,0,V,E,0,0,0,0,1,0,0,0,0,1)}function a(d){if(d===0)return this;var E=t(d),V=e(d);return this._t(1,0,0,0,0,E,-V,0,0,V,E,0,0,0,0,1)}function l(d){if(d===0)return this;var E=t(d),V=e(d);return this._t(E,0,V,0,0,1,0,0,-V,0,E,0,0,0,0,1)}function o(d){if(d===0)return this;var E=t(d),V=e(d);return this._t(E,-V,0,0,V,E,0,0,0,0,1,0,0,0,0,1)}function p(d,E){return this._t(1,E,d,1,0,0)}function y(d,E){return this.shear(r(d),r(E))}function _(d,E){var V=t(E),R=e(E);return this._t(V,R,0,0,-R,V,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(d),1,0,0,0,0,1,0,0,0,0,1)._t(V,-R,0,0,R,V,0,0,0,0,1,0,0,0,0,1)}function u(d,E,V){return!V&&V!==0&&(V=1),d===1&&E===1&&V===1?this:this._t(d,0,0,0,0,E,0,0,0,0,V,0,0,0,0,1)}function x(d,E,V,R,G,j,N,K,U,Z,rt,mt,st,it,at,X){return this.props[0]=d,this.props[1]=E,this.props[2]=V,this.props[3]=R,this.props[4]=G,this.props[5]=j,this.props[6]=N,this.props[7]=K,this.props[8]=U,this.props[9]=Z,this.props[10]=rt,this.props[11]=mt,this.props[12]=st,this.props[13]=it,this.props[14]=at,this.props[15]=X,this}function S(d,E,V){return V=V||0,d!==0||E!==0||V!==0?this._t(1,0,0,0,0,1,0,0,0,0,1,0,d,E,V,1):this}function g(d,E,V,R,G,j,N,K,U,Z,rt,mt,st,it,at,X){var $=this.props;if(d===1&&E===0&&V===0&&R===0&&G===0&&j===1&&N===0&&K===0&&U===0&&Z===0&&rt===1&&mt===0)return $[12]=$[12]*d+$[15]*st,$[13]=$[13]*j+$[15]*it,$[14]=$[14]*rt+$[15]*at,$[15]*=X,this._identityCalculated=!1,this;var St=$[0],Tt=$[1],Pt=$[2],vt=$[3],xt=$[4],Et=$[5],nt=$[6],Mt=$[7],kt=$[8],ut=$[9],wt=$[10],ct=$[11],Ot=$[12],te=$[13],ee=$[14],re=$[15];return $[0]=St*d+Tt*G+Pt*U+vt*st,$[1]=St*E+Tt*j+Pt*Z+vt*it,$[2]=St*V+Tt*N+Pt*rt+vt*at,$[3]=St*R+Tt*K+Pt*mt+vt*X,$[4]=xt*d+Et*G+nt*U+Mt*st,$[5]=xt*E+Et*j+nt*Z+Mt*it,$[6]=xt*V+Et*N+nt*rt+Mt*at,$[7]=xt*R+Et*K+nt*mt+Mt*X,$[8]=kt*d+ut*G+wt*U+ct*st,$[9]=kt*E+ut*j+wt*Z+ct*it,$[10]=kt*V+ut*N+wt*rt+ct*at,$[11]=kt*R+ut*K+wt*mt+ct*X,$[12]=Ot*d+te*G+ee*U+re*st,$[13]=Ot*E+te*j+ee*Z+re*it,$[14]=Ot*V+te*N+ee*rt+re*at,$[15]=Ot*R+te*K+ee*mt+re*X,this._identityCalculated=!1,this}function k(d){var E=d.props;return this.transform(E[0],E[1],E[2],E[3],E[4],E[5],E[6],E[7],E[8],E[9],E[10],E[11],E[12],E[13],E[14],E[15])}function c(){return this._identityCalculated||(this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1),this._identityCalculated=!0),this._identity}function b(d){for(var E=0;E<16;){if(d.props[E]!==this.props[E])return!1;E+=1}return!0}function f(d){var E;for(E=0;E<16;E+=1)d.props[E]=this.props[E];return d}function P(d){var E;for(E=0;E<16;E+=1)this.props[E]=d[E]}function A(d,E,V){return{x:d*this.props[0]+E*this.props[4]+V*this.props[8]+this.props[12],y:d*this.props[1]+E*this.props[5]+V*this.props[9]+this.props[13],z:d*this.props[2]+E*this.props[6]+V*this.props[10]+this.props[14]}}function M(d,E,V){return d*this.props[0]+E*this.props[4]+V*this.props[8]+this.props[12]}function F(d,E,V){return d*this.props[1]+E*this.props[5]+V*this.props[9]+this.props[13]}function L(d,E,V){return d*this.props[2]+E*this.props[6]+V*this.props[10]+this.props[14]}function O(){var d=this.props[0]*this.props[5]-this.props[1]*this.props[4],E=this.props[5]/d,V=-this.props[1]/d,R=-this.props[4]/d,G=this.props[0]/d,j=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/d,N=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/d,K=new Matrix;return K.props[0]=E,K.props[1]=V,K.props[4]=R,K.props[5]=G,K.props[12]=j,K.props[13]=N,K}function W(d){var E=this.getInverseMatrix();return E.applyToPointArray(d[0],d[1],d[2]||0)}function H(d){var E,V=d.length,R=[];for(E=0;E<V;E+=1)R[E]=W(d[E]);return R}function z(d,E,V){var R=createTypedArray("float32",6);if(this.isIdentity())R[0]=d[0],R[1]=d[1],R[2]=E[0],R[3]=E[1],R[4]=V[0],R[5]=V[1];else{var G=this.props[0],j=this.props[1],N=this.props[4],K=this.props[5],U=this.props[12],Z=this.props[13];R[0]=d[0]*G+d[1]*N+U,R[1]=d[0]*j+d[1]*K+Z,R[2]=E[0]*G+E[1]*N+U,R[3]=E[0]*j+E[1]*K+Z,R[4]=V[0]*G+V[1]*N+U,R[5]=V[0]*j+V[1]*K+Z}return R}function q(d,E,V){var R;return this.isIdentity()?R=[d,E,V]:R=[d*this.props[0]+E*this.props[4]+V*this.props[8]+this.props[12],d*this.props[1]+E*this.props[5]+V*this.props[9]+this.props[13],d*this.props[2]+E*this.props[6]+V*this.props[10]+this.props[14]],R}function D(d,E){if(this.isIdentity())return d+","+E;var V=this.props;return Math.round((d*V[0]+E*V[4]+V[12])*100)/100+","+Math.round((d*V[1]+E*V[5]+V[13])*100)/100}function I(){for(var d=0,E=this.props,V="matrix3d(",R=1e4;d<16;)V+=i(E[d]*R)/R,V+=d===15?")":",",d+=1;return V}function C(d){var E=1e4;return d<1e-6&&d>0||d>-1e-6&&d<0?i(d*E)/E:d}function T(){var d=this.props,E=C(d[0]),V=C(d[1]),R=C(d[4]),G=C(d[5]),j=C(d[12]),N=C(d[13]);return"matrix("+E+","+V+","+R+","+G+","+j+","+N+")"}return function(){this.reset=s,this.rotate=n,this.rotateX=a,this.rotateY=l,this.rotateZ=o,this.skew=y,this.skewFromAxis=_,this.shear=p,this.scale=u,this.setTransform=x,this.translate=S,this.transform=g,this.multiply=k,this.applyToPoint=A,this.applyToX=M,this.applyToY=F,this.applyToZ=L,this.applyToPointArray=q,this.applyToTriplePoints=z,this.applyToPointStringified=D,this.toCSS=I,this.to2dCSS=T,this.clone=f,this.cloneFromProps=P,this.equals=b,this.inversePoints=H,this.inversePoint=W,this.getInverseMatrix=O,this._t=this.transform,this.isIdentity=c,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$3=function(r){return typeof r}:_typeof$3=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$3(t)}var lottie={};function setLocation(t){setLocationHref(t)}function searchAnimations(){animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return animationManager.loadAnimation(t)}function setQuality(t){if(typeof t=="string")switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10);break}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t)}function inBrowser(){return typeof navigator<"u"}function installPlugin(t,e){t==="expressions"&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";function checkReady(){document.readyState==="complete"&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var i=e[r].split("=");if(decodeURIComponent(i[0])==t)return decodeURIComponent(i[1])}return null}var queryString="";{var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{_typeof$3(exports)!=="object"&&(window.bodymovin=lottie)}catch(t){}var ShapeModifiers=function(){var t={},e={};t.registerModifier=r,t.getModifier=i;function r(s,n){e[s]||(e[s]=n)}function i(s,n,a){return new e[s](n,a)}return t}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,i,s){var n=[];e<=1?n.push({s:t,e}):t>=1?n.push({s:t-1,e:e-1}):(n.push({s:t,e:1}),n.push({s:0,e:e-1}));var a=[],l,o=n.length,p;for(l=0;l<o;l+=1)if(p=n[l],!(p.e*s<i||p.s*s>i+r)){var y,_;p.s*s<=i?y=0:y=(p.s*s-i)/r,p.e*s>=i+r?_=1:_=(p.e*s-i)/r,a.push([y,_])}return a.length||a.push([0,0]),a},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r;if(this._mdf||t){var i=this.o.v%360/360;if(i<0&&(i+=1),this.s.v>1?e=1+i:this.s.v<0?e=0+i:e=this.s.v+i,this.e.v>1?r=1+i:this.e.v<0?r=0+i:r=this.e.v+i,e>r){var s=e;e=r,r=s}e=Math.round(e*1e4)*1e-4,r=Math.round(r*1e4)*1e-4,this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var n,a,l=this.shapes.length,o,p,y,_,u,x=0;if(r===e)for(a=0;a<l;a+=1)this.shapes[a].localShapeCollection.releaseShapes(),this.shapes[a].shape._mdf=!0,this.shapes[a].shape.paths=this.shapes[a].localShapeCollection,this._mdf&&(this.shapes[a].pathsData.length=0);else if(r===1&&e===0||r===0&&e===1){if(this._mdf)for(a=0;a<l;a+=1)this.shapes[a].pathsData.length=0,this.shapes[a].shape._mdf=!0}else{var S=[],g,k;for(a=0;a<l;a+=1)if(g=this.shapes[a],!g.shape._mdf&&!this._mdf&&!t&&this.m!==2)g.shape.paths=g.localShapeCollection;else{if(n=g.shape.paths,p=n._length,u=0,!g.shape._mdf&&g.pathsData.length)u=g.totalShapeLength;else{for(y=this.releasePathsData(g.pathsData),o=0;o<p;o+=1)_=bez.getSegmentsLength(n.shapes[o]),y.push(_),u+=_.totalLength;g.totalShapeLength=u,g.pathsData=y}x+=u,g.shape._mdf=!0}var c=e,b=r,f=0,P;for(a=l-1;a>=0;a-=1)if(g=this.shapes[a],g.shape._mdf){for(k=g.localShapeCollection,k.releaseShapes(),this.m===2&&l>1?(P=this.calculateShapeEdges(e,r,g.totalShapeLength,f,x),f+=g.totalShapeLength):P=[[c,b]],p=P.length,o=0;o<p;o+=1){c=P[o][0],b=P[o][1],S.length=0,b<=1?S.push({s:g.totalShapeLength*c,e:g.totalShapeLength*b}):c>=1?S.push({s:g.totalShapeLength*(c-1),e:g.totalShapeLength*(b-1)}):(S.push({s:g.totalShapeLength*c,e:g.totalShapeLength}),S.push({s:0,e:g.totalShapeLength*(b-1)}));var A=this.addShapes(g,S[0]);if(S[0].s!==S[0].e){if(S.length>1){var M=g.shape.paths.shapes[g.shape.paths._length-1];if(M.c){var F=A.pop();this.addPaths(A,k),A=this.addShapes(g,S[1],F)}else this.addPaths(A,k),A=this.addShapes(g,S[1])}this.addPaths(A,k)}}g.shape.paths=k}}},TrimModifier.prototype.addPaths=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,i,s,n,a){s.setXYAt(e[0],e[1],"o",n),s.setXYAt(r[0],r[1],"i",n+1),a&&s.setXYAt(t[0],t[1],"v",n),s.setXYAt(i[0],i[1],"v",n+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,i){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),i&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var i=t.pathsData,s=t.shape.paths.shapes,n,a=t.shape.paths._length,l,o,p=0,y,_,u,x,S=[],g,k=!0;for(r?(_=r._length,g=r._length):(r=shapePool.newElement(),_=0,g=0),S.push(r),n=0;n<a;n+=1){for(u=i[n].lengths,r.c=s[n].c,o=s[n].c?u.length:u.length+1,l=1;l<o;l+=1)if(y=u[l-1],p+y.addedLength<e.s)p+=y.addedLength,r.c=!1;else if(p>e.e){r.c=!1;break}else e.s<=p&&e.e>=p+y.addedLength?(this.addSegment(s[n].v[l-1],s[n].o[l-1],s[n].i[l],s[n].v[l],r,_,k),k=!1):(x=bez.getNewSegment(s[n].v[l-1],s[n].v[l],s[n].o[l-1],s[n].i[l],(e.s-p)/y.addedLength,(e.e-p)/y.addedLength,u[l-1]),this.addSegmentFromArray(x,r,_,k),k=!1,r.c=!1),p+=y.addedLength,_+=1;if(s[n].c&&u.length){if(y=u[l-1],p<=e.e){var c=u[l-1].addedLength;e.s<=p&&e.e>=p+c?(this.addSegment(s[n].v[l-1],s[n].o[l-1],s[n].i[0],s[n].v[0],r,_,k),k=!1):(x=bez.getNewSegment(s[n].v[l-1],s[n].v[0],s[n].o[l-1],s[n].i[0],(e.s-p)/c,(e.e-p)/c,u[l-1]),this.addSegmentFromArray(x,r,_,k),k=!1,r.c=!1)}else r.c=!1;p+=y.addedLength,_+=1}if(r._length&&(r.setXYAt(r.v[g][0],r.v[g][1],"i",g),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),p>e.e)break;n<a-1&&(r=shapePool.newElement(),k=!0,S.push(r),_=0)}return S};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,i=[0,0],s=t._length,n=0;for(n=0;n<s;n+=1)i[0]+=t.v[n][0],i[1]+=t.v[n][1];i[0]/=s,i[1]/=s;var a=shapePool.newElement();a.c=t.c;var l,o,p,y,_,u;for(n=0;n<s;n+=1)l=t.v[n][0]+(i[0]-t.v[n][0])*r,o=t.v[n][1]+(i[1]-t.v[n][1])*r,p=t.o[n][0]+(i[0]-t.o[n][0])*-r,y=t.o[n][1]+(i[1]-t.o[n][1])*-r,_=t.i[n][0]+(i[0]-t.i[n][0])*-r,u=t.i[n][1]+(i[1]-t.i[n][1])*-r,a.setTripleAt(l,o,p,y,_,u,n);return a},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.amount.v;if(a!==0){var l,o;for(r=0;r<i;r+=1){if(l=this.shapes[r],o=l.localShapeCollection,!(!l.shape._mdf&&!this._mdf&&!t))for(o.releaseShapes(),l.shape._mdf=!0,e=l.shape.paths.shapes,n=l.shape.paths._length,s=0;s<n;s+=1)o.addShape(this.processPath(e[s],a));l.shape.paths=l.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(o){var p=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||p,this.a&&o.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&o.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&o.skewFromAxis(-this.sk.v,this.sa.v),this.r?o.rotate(-this.r.v):o.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?o.translate(this.px.v,this.py.v,-this.pz.v):o.translate(this.px.v,this.py.v,0):o.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function r(o){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||o){var p;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var y,_;if(p=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(y=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/p,0),_=this.p.getValueAtTime(this.p.keyframes[0].t/p,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(y=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/p,0),_=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/p,0)):(y=this.p.pv,_=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/p,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){y=[],_=[];var u=this.px,x=this.py;u._caching.lastFrame+u.offsetTime<=u.keyframes[0].t?(y[0]=u.getValueAtTime((u.keyframes[0].t+.01)/p,0),y[1]=x.getValueAtTime((x.keyframes[0].t+.01)/p,0),_[0]=u.getValueAtTime(u.keyframes[0].t/p,0),_[1]=x.getValueAtTime(x.keyframes[0].t/p,0)):u._caching.lastFrame+u.offsetTime>=u.keyframes[u.keyframes.length-1].t?(y[0]=u.getValueAtTime(u.keyframes[u.keyframes.length-1].t/p,0),y[1]=x.getValueAtTime(x.keyframes[x.keyframes.length-1].t/p,0),_[0]=u.getValueAtTime((u.keyframes[u.keyframes.length-1].t-.01)/p,0),_[1]=x.getValueAtTime((x.keyframes[x.keyframes.length-1].t-.01)/p,0)):(y=[u.pv,x.pv],_[0]=u.getValueAtTime((u._caching.lastFrame+u.offsetTime-.01)/p,u.offsetTime),_[1]=x.getValueAtTime((x._caching.lastFrame+x.offsetTime-.01)/p,x.offsetTime))}else _=t,y=_;this.v.rotate(-Math.atan2(y[1]-_[1],y[0]-_[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function i(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length)this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1;else return;if(!this.s.effectsSequence.length)this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2;else return;if(this.sk)if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length)this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3;else return;this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length&&(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}function s(){}function n(o){this._addDynamicProperty(o),this.elem.addDynamicProperty(o),this._isDirty=!0}function a(o,p,y){if(this.elem=o,this.frameId=-1,this.propType="transform",this.data=p,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(y||o),p.p&&p.p.s?(this.px=PropertyFactory.getProp(o,p.p.x,0,0,this),this.py=PropertyFactory.getProp(o,p.p.y,0,0,this),p.p.z&&(this.pz=PropertyFactory.getProp(o,p.p.z,0,0,this))):this.p=PropertyFactory.getProp(o,p.p||{k:[0,0,0]},1,0,this),p.rx){if(this.rx=PropertyFactory.getProp(o,p.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(o,p.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(o,p.rz,0,degToRads,this),p.or.k[0].ti){var _,u=p.or.k.length;for(_=0;_<u;_+=1)p.or.k[_].to=null,p.or.k[_].ti=null}this.or=PropertyFactory.getProp(o,p.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(o,p.r||{k:0},0,degToRads,this);p.sk&&(this.sk=PropertyFactory.getProp(o,p.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(o,p.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(o,p.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(o,p.s||{k:[100,100,100]},1,.01,this),p.o?this.o=PropertyFactory.getProp(o,p.o,0,.01,o):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}a.prototype={applyToMatrix:e,getValue:r,precalculateMatrix:i,autoOrient:s},extendPrototype([DynamicPropertyContainer],a),a.prototype.addDynamicProperty=n,a.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function l(o,p,y){return new a(o,p,y)}return{getTransformProperty:l}}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,i,s,n){var a=n?-1:1,l=i.s.v[0]+(1-i.s.v[0])*(1-s),o=i.s.v[1]+(1-i.s.v[1])*(1-s);t.translate(i.p.v[0]*a*s,i.p.v[1]*a*s,i.p.v[2]),e.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),e.rotate(-i.r.v*a*s),e.translate(i.a.v[0],i.a.v[1],i.a.v[2]),r.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),r.scale(n?1/l:l,n?1/o:o),r.translate(i.a.v[0],i.a.v[1],i.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,i){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=i,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,t[e].ty==="gr"&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]._render=e,t[r].ty==="gr"&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,i,s,n,a=!1;if(this._mdf||t){var l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var o={it:this.cloneElements(this._elements),ty:"gr"};o.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,o),this._groups.splice(0,0,o),this._currentCopies+=1}this.elem.reloadShapes(),a=!0}n=0;var p;for(i=0;i<=this._groups.length-1;i+=1){if(p=n<l,this._groups[i]._render=p,this.changeGroupRender(this._groups[i].it,p),!p){var y=this.elemsData[i].it,_=y[y.length-1];_.transform.op.v!==0?(_.transform.op._mdf=!0,_.transform.op.v=0):_.transform.op._mdf=!1}n+=1}this._currentCopies=l;var u=this.o.v,x=u%1,S=u>0?Math.floor(u):Math.ceil(u),g=this.pMatrix.props,k=this.rMatrix.props,c=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var b=0;if(u>0){for(;b<S;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),b+=1;x&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,x,!1),b+=x)}else if(u<0){for(;b>S;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),b-=1;x&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-x,!0),b-=x)}i=this.data.m===1?0:this._currentCopies-1,s=this.data.m===1?1:-1,n=this._currentCopies;for(var f,P;n;){if(e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,P=r.length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1)),b!==0){for((i!==0&&s===1||i!==this._currentCopies-1&&s===-1)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(k[0],k[1],k[2],k[3],k[4],k[5],k[6],k[7],k[8],k[9],k[10],k[11],k[12],k[13],k[14],k[15]),this.matrix.transform(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15]),this.matrix.transform(g[0],g[1],g[2],g[3],g[4],g[5],g[6],g[7],g[8],g[9],g[10],g[11],g[12],g[13],g[14],g[15]),f=0;f<P;f+=1)r[f]=this.matrix.props[f];this.matrix.reset()}else for(this.matrix.reset(),f=0;f<P;f+=1)r[f]=this.matrix.props[f];b+=1,n-=1,i+=s}}else for(n=this._currentCopies,i=0,s=1;n;)e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,n-=1,i+=s;return a},RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r=shapePool.newElement();r.c=t.c;var i,s=t._length,n,a,l,o,p,y,_=0,u,x,S,g,k,c;for(i=0;i<s;i+=1)n=t.v[i],l=t.o[i],a=t.i[i],n[0]===l[0]&&n[1]===l[1]&&n[0]===a[0]&&n[1]===a[1]?(i===0||i===s-1)&&!t.c?(r.setTripleAt(n[0],n[1],l[0],l[1],a[0],a[1],_),_+=1):(i===0?o=t.v[s-1]:o=t.v[i-1],p=Math.sqrt(Math.pow(n[0]-o[0],2)+Math.pow(n[1]-o[1],2)),y=p?Math.min(p/2,e)/p:0,k=n[0]+(o[0]-n[0])*y,u=k,c=n[1]-(n[1]-o[1])*y,x=c,S=u-(u-n[0])*roundCorner,g=x-(x-n[1])*roundCorner,r.setTripleAt(u,x,S,g,k,c,_),_+=1,i===s-1?o=t.v[0]:o=t.v[i+1],p=Math.sqrt(Math.pow(n[0]-o[0],2)+Math.pow(n[1]-o[1],2)),y=p?Math.min(p/2,e)/p:0,S=n[0]+(o[0]-n[0])*y,u=S,g=n[1]+(o[1]-n[1])*y,x=g,k=u-(u-n[0])*roundCorner,c=x-(x-n[1])*roundCorner,r.setTripleAt(u,x,S,g,k,c,_),_+=1):(r.setTripleAt(t.v[i][0],t.v[i][1],t.o[i][0],t.o[i][1],t.i[i][0],t.i[i][1],_),_+=1);return r},RoundCornersModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.rd.v;if(a!==0){var l,o;for(r=0;r<i;r+=1){if(l=this.shapes[r],o=l.localShapeCollection,!(!l.shape._mdf&&!this._mdf&&!t))for(o.releaseShapes(),l.shape._mdf=!0,e=l.shape.paths.shapes,n=l.shape.paths._length,s=0;s<n;s+=1)o.addShape(this.processPath(e[s],a));l.shape.paths=l.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function floatEqual(t,e){return Math.abs(t-e)*1e5<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(t===0)return[];var i=e*e-4*t*r;if(i<0)return[];var s=-e/(2*t);if(i===0)return[s];var n=Math.sqrt(i)/(2*t);return[s-n,s+n]}function polynomialCoefficients(t,e,r,i){return[-t+3*e-3*r+i,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,i,s){s&&pointEqual(t,e)&&(e=lerpPoint(t,i,1/3)),s&&pointEqual(r,i)&&(r=lerpPoint(t,i,2/3));var n=polynomialCoefficients(t[0],e[0],r[0],i[0]),a=polynomialCoefficients(t[1],e[1],r[1],i[1]);this.a=[n[0],a[0]],this.b=[n[1],a[1]],this.c=[n[2],a[2]],this.d=[n[3],a[3]],this.points=[t,e,r,i]}PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var i=Math.sqrt(r);return floatZero(i)?i>0&&i<1?[e]:[]:[e-i,e+i].filter(function(s){return s>0&&s<1})},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),i=lerpPoint(this.points[2],this.points[3],t),s=lerpPoint(e,r,t),n=lerpPoint(r,i,t),a=lerpPoint(s,n,t);return[new PolynomialBezier(this.points[0],e,s,a,!0),new PolynomialBezier(a,n,i,this.points[3],!0)]};function extrema(t,e){var r=t.points[0][e],i=t.points[t.points.length-1][e];if(r>i){var s=i;i=r,r=s}for(var n=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),a=0;a<n.length;a+=1)if(n[a]>0&&n[a]<1){var l=t.point(n[a])[e];l<r?r=l:l>i&&(i=l)}return{min:r,max:i}}PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}};function intersectData(t,e,r){var i=t.boundingBox();return{cx:i.cx,cy:i.cy,width:i.width,height:i.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return Math.abs(t.cx-e.cx)*2<t.width+e.width&&Math.abs(t.cy-e.cy)*2<t.height+e.height}function intersectsImpl(t,e,r,i,s,n){if(boxIntersect(t,e)){if(r>=n||t.width<=i&&t.height<=i&&e.width<=i&&e.height<=i){s.push([t.t,e.t]);return}var a=splitData(t),l=splitData(e);intersectsImpl(a[0],l[0],r+1,i,s,n),intersectsImpl(a[0],l[1],r+1,i,s,n),intersectsImpl(a[1],l[0],r+1,i,s,n),intersectsImpl(a[1],l[1],r+1,i,s,n)}}PolynomialBezier.prototype.intersections=function(t,e,r){e===void 0&&(e=2),r===void 0&&(r=7);var i=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,i,r),i},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)};function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,i){var s=[t[0],t[1],1],n=[e[0],e[1],1],a=[r[0],r[1],1],l=[i[0],i[1],1],o=crossProduct(crossProduct(s,n),crossProduct(a,l));return floatZero(o[2])?null:[o[0]/o[2],o[1]/o[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0};function setPoint(t,e,r,i,s,n,a){var l=r-Math.PI/2,o=r+Math.PI/2,p=e[0]+Math.cos(r)*i*s,y=e[1]-Math.sin(r)*i*s;t.setTripleAt(p,y,p+Math.cos(l)*n,y-Math.sin(l)*n,p+Math.cos(o)*a,y-Math.sin(o)*a,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],i=-Math.PI*.5,s=[Math.cos(i)*r[0]-Math.sin(i)*r[1],Math.sin(i)*r[0]+Math.cos(i)*r[1]];return s}function getProjectingAngle(t,e){var r=e===0?t.length()-1:e-1,i=(e+1)%t.length(),s=t.v[r],n=t.v[i],a=getPerpendicularVector(s,n);return Math.atan2(0,1)-Math.atan2(a[1],a[0])}function zigZagCorner(t,e,r,i,s,n,a){var l=getProjectingAngle(e,r),o=e.v[r%e._length],p=e.v[r===0?e._length-1:r-1],y=e.v[(r+1)%e._length],_=n===2?Math.sqrt(Math.pow(o[0]-p[0],2)+Math.pow(o[1]-p[1],2)):0,u=n===2?Math.sqrt(Math.pow(o[0]-y[0],2)+Math.pow(o[1]-y[1],2)):0;setPoint(t,e.v[r%e._length],l,a,i,u/((s+1)*2),_/((s+1)*2))}function zigZagSegment(t,e,r,i,s,n){for(var a=0;a<i;a+=1){var l=(a+1)/(i+1),o=s===2?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,p=e.normalAngle(l),y=e.point(l);setPoint(t,y,p,n,r,o/((i+1)*2),o/((i+1)*2)),n=-n}return n}ZigZagModifier.prototype.processPath=function(t,e,r,i){var s=t._length,n=shapePool.newElement();if(n.c=t.c,t.c||(s-=1),s===0)return n;var a=-1,l=PolynomialBezier.shapeSegment(t,0);zigZagCorner(n,t,0,e,r,i,a);for(var o=0;o<s;o+=1)a=zigZagSegment(n,l,e,r,i,-a),o===s-1&&!t.c?l=null:l=PolynomialBezier.shapeSegment(t,(o+1)%s),zigZagCorner(n,t,o+1,e,r,i,a);return n},ZigZagModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.amplitude.v,l=Math.max(0,Math.round(this.frequency.v)),o=this.pointsType.v;if(a!==0){var p,y;for(r=0;r<i;r+=1){if(p=this.shapes[r],y=p.localShapeCollection,!(!p.shape._mdf&&!this._mdf&&!t))for(y.releaseShapes(),p.shape._mdf=!0,e=p.shape.paths.shapes,n=p.shape.paths._length,s=0;s<n;s+=1)y.addShape(this.processPath(e[s],a,l,o));p.shape.paths=p.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function linearOffset(t,e,r){var i=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,i,r),polarOffset(e,i,r)]}function offsetSegment(t,e){var r,i,s,n,a,l,o;o=linearOffset(t.points[0],t.points[1],e),r=o[0],i=o[1],o=linearOffset(t.points[1],t.points[2],e),s=o[0],n=o[1],o=linearOffset(t.points[2],t.points[3],e),a=o[0],l=o[1];var p=lineIntersection(r,i,s,n);p===null&&(p=i);var y=lineIntersection(a,l,s,n);return y===null&&(y=a),new PolynomialBezier(r,p,y,l)}function joinLines(t,e,r,i,s){var n=e.points[3],a=r.points[0];if(i===3||pointEqual(n,a))return n;if(i===2){var l=-e.tangentAngle(1),o=-r.tangentAngle(0)+Math.PI,p=lineIntersection(n,polarOffset(n,l+Math.PI/2,100),a,polarOffset(a,l+Math.PI/2,100)),y=p?pointDistance(p,n):pointDistance(n,a)/2,_=polarOffset(n,l,2*y*roundCorner);return t.setXYAt(_[0],_[1],"o",t.length()-1),_=polarOffset(a,o,2*y*roundCorner),t.setTripleAt(a[0],a[1],a[0],a[1],_[0],_[1],t.length()),a}var u=pointEqual(n,e.points[2])?e.points[0]:e.points[2],x=pointEqual(a,r.points[1])?r.points[3]:r.points[1],S=lineIntersection(u,n,a,x);return S&&pointDistance(S,n)<s?(t.setTripleAt(S[0],S[1],S[0],S[1],S[0],S[1],t.length()),S):n}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),i=e.slice(),s=getIntersection(t[t.length-1],e[0]);return s&&(r[t.length-1]=t[t.length-1].split(s[0])[0],i[0]=e[0].split(s[1])[1]),t.length>1&&e.length>1&&(s=getIntersection(t[0],e[e.length-1]),s)?[[t[0].split(s[0])[0]],[e[e.length-1].split(s[1])[1]]]:[r,i]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r=t.inflectionPoints(),i,s,n,a;if(r.length===0)return[offsetSegment(t,e)];if(r.length===1||floatEqual(r[1],1))return n=t.split(r[0]),i=n[0],s=n[1],[offsetSegment(i,e),offsetSegment(s,e)];n=t.split(r[0]),i=n[0];var l=(r[1]-r[0])/(1-r[0]);return n=n[1].split(l),a=n[0],s=n[1],[offsetSegment(i,e),offsetSegment(a,e),offsetSegment(s,e)]}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=this.amount.effectsSequence.length!==0},OffsetPathModifier.prototype.processPath=function(t,e,r,i){var s=shapePool.newElement();s.c=t.c;var n=t.length();t.c||(n-=1);var a,l,o,p=[];for(a=0;a<n;a+=1)o=PolynomialBezier.shapeSegment(t,a),p.push(offsetSegmentSplit(o,e));if(!t.c)for(a=n-1;a>=0;a-=1)o=PolynomialBezier.shapeSegmentInverted(t,a),p.push(offsetSegmentSplit(o,e));p=pruneIntersections(p);var y=null,_=null;for(a=0;a<p.length;a+=1){var u=p[a];for(_&&(y=joinLines(s,_,u[0],r,i)),_=u[u.length-1],l=0;l<u.length;l+=1)o=u[l],y&&pointEqual(o.points[0],y)?s.setXYAt(o.points[1][0],o.points[1][1],"o",s.length()-1):s.setTripleAt(o.points[0][0],o.points[0][1],o.points[1][0],o.points[1][1],o.points[0][0],o.points[0][1],s.length()),s.setTripleAt(o.points[3][0],o.points[3][1],o.points[3][0],o.points[3][1],o.points[2][0],o.points[2][1],s.length()),y=o.points[3]}return p.length&&joinLines(s,_,p[0][0],r,i),s},OffsetPathModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.amount.v,l=this.miterLimit.v,o=this.lineJoin;if(a!==0){var p,y;for(r=0;r<i;r+=1){if(p=this.shapes[r],y=p.localShapeCollection,!(!p.shape._mdf&&!this._mdf&&!t))for(y.releaseShapes(),p.shape._mdf=!0,e=p.shape.paths.shapes,n=p.shape.paths._length,s=0;s<n;s+=1)y.addShape(this.processPath(e[s],a,o,l));p.shape.paths=p.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",i="normal",s=e.length,n,a=0;a<s;a+=1)switch(n=e[a].toLowerCase(),n){case"italic":i="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200";break}return{style:i,weight:t.fWeight||r}}var FontManager=function(){var t=5e3,e={w:0,size:0,shapes:[],data:{shapes:[]}},r=[];r=r.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var i=127988,s=917631,n=917601,a=917626,l=65039,o=8205,p=127462,y=127487,_=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function u(C){var T=C.split(","),d,E=T.length,V=[];for(d=0;d<E;d+=1)T[d]!=="sans-serif"&&T[d]!=="monospace"&&V.push(T[d]);return V.join(",")}function x(C,T){var d=createTag("span");d.setAttribute("aria-hidden",!0),d.style.fontFamily=T;var E=createTag("span");E.innerText="giItT1WQy@!-/#",d.style.position="absolute",d.style.left="-10000px",d.style.top="-10000px",d.style.fontSize="300px",d.style.fontVariant="normal",d.style.fontStyle="normal",d.style.fontWeight="normal",d.style.letterSpacing="0",d.appendChild(E),document.body.appendChild(d);var V=E.offsetWidth;return E.style.fontFamily=u(C)+", "+T,{node:E,w:V,parent:d}}function S(){var C,T=this.fonts.length,d,E,V=T;for(C=0;C<T;C+=1)this.fonts[C].loaded?V-=1:this.fonts[C].fOrigin==="n"||this.fonts[C].origin===0?this.fonts[C].loaded=!0:(d=this.fonts[C].monoCase.node,E=this.fonts[C].monoCase.w,d.offsetWidth!==E?(V-=1,this.fonts[C].loaded=!0):(d=this.fonts[C].sansCase.node,E=this.fonts[C].sansCase.w,d.offsetWidth!==E&&(V-=1,this.fonts[C].loaded=!0)),this.fonts[C].loaded&&(this.fonts[C].sansCase.parent.parentNode.removeChild(this.fonts[C].sansCase.parent),this.fonts[C].monoCase.parent.parentNode.removeChild(this.fonts[C].monoCase.parent)));V!==0&&Date.now()-this.initTime<t?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)}function g(C,T){var d=document.body&&T?"svg":"canvas",E,V=getFontProperties(C);if(d==="svg"){var R=createNS("text");R.style.fontSize="100px",R.setAttribute("font-family",C.fFamily),R.setAttribute("font-style",V.style),R.setAttribute("font-weight",V.weight),R.textContent="1",C.fClass?(R.style.fontFamily="inherit",R.setAttribute("class",C.fClass)):R.style.fontFamily=C.fFamily,T.appendChild(R),E=R}else{var G=new OffscreenCanvas(500,500).getContext("2d");G.font=V.style+" "+V.weight+" 100px "+C.fFamily,E=G}function j(N){return d==="svg"?(E.textContent=N,E.getComputedTextLength()):E.measureText(N).width}return{measureText:j}}function k(C,T){if(!C){this.isLoaded=!0;return}if(this.chars){this.isLoaded=!0,this.fonts=C.list;return}if(!document.body){this.isLoaded=!0,C.list.forEach(function(rt){rt.helper=g(rt),rt.cache={}}),this.fonts=C.list;return}var d=C.list,E,V=d.length,R=V;for(E=0;E<V;E+=1){var G=!0,j,N;if(d[E].loaded=!1,d[E].monoCase=x(d[E].fFamily,"monospace"),d[E].sansCase=x(d[E].fFamily,"sans-serif"),!d[E].fPath)d[E].loaded=!0,R-=1;else if(d[E].fOrigin==="p"||d[E].origin===3){if(j=document.querySelectorAll('style[f-forigin="p"][f-family="'+d[E].fFamily+'"], style[f-origin="3"][f-family="'+d[E].fFamily+'"]'),j.length>0&&(G=!1),G){var K=createTag("style");K.setAttribute("f-forigin",d[E].fOrigin),K.setAttribute("f-origin",d[E].origin),K.setAttribute("f-family",d[E].fFamily),K.type="text/css",K.innerText="@font-face {font-family: "+d[E].fFamily+"; font-style: normal; src: url('"+d[E].fPath+"');}",T.appendChild(K)}}else if(d[E].fOrigin==="g"||d[E].origin===1){for(j=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),N=0;N<j.length;N+=1)j[N].href.indexOf(d[E].fPath)!==-1&&(G=!1);if(G){var U=createTag("link");U.setAttribute("f-forigin",d[E].fOrigin),U.setAttribute("f-origin",d[E].origin),U.type="text/css",U.rel="stylesheet",U.href=d[E].fPath,document.body.appendChild(U)}}else if(d[E].fOrigin==="t"||d[E].origin===2){for(j=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),N=0;N<j.length;N+=1)d[E].fPath===j[N].src&&(G=!1);if(G){var Z=createTag("link");Z.setAttribute("f-forigin",d[E].fOrigin),Z.setAttribute("f-origin",d[E].origin),Z.setAttribute("rel","stylesheet"),Z.setAttribute("href",d[E].fPath),T.appendChild(Z)}}d[E].helper=g(d[E],T),d[E].cache={},this.fonts.push(d[E])}R===0?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function c(C){if(C){this.chars||(this.chars=[]);var T,d=C.length,E,V=this.chars.length,R;for(T=0;T<d;T+=1){for(E=0,R=!1;E<V;)this.chars[E].style===C[T].style&&this.chars[E].fFamily===C[T].fFamily&&this.chars[E].ch===C[T].ch&&(R=!0),E+=1;R||(this.chars.push(C[T]),V+=1)}}}function b(C,T,d){for(var E=0,V=this.chars.length;E<V;){if(this.chars[E].ch===C&&this.chars[E].style===T&&this.chars[E].fFamily===d)return this.chars[E];E+=1}return(typeof C=="string"&&C.charCodeAt(0)!==13||!C)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",C,T,d)),e}function f(C,T,d){var E=this.getFontByName(T),V=C;if(!E.cache[V]){var R=E.helper;if(C===" "){var G=R.measureText("|"+C+"|"),j=R.measureText("||");E.cache[V]=(G-j)/100}else E.cache[V]=R.measureText(C)/100}return E.cache[V]*d}function P(C){for(var T=0,d=this.fonts.length;T<d;){if(this.fonts[T].fName===C)return this.fonts[T];T+=1}return this.fonts[0]}function A(C){var T=0,d=C.charCodeAt(0);if(d>=55296&&d<=56319){var E=C.charCodeAt(1);E>=56320&&E<=57343&&(T=(d-55296)*1024+E-56320+65536)}return T}function M(C,T){var d=C.toString(16)+T.toString(16);return _.indexOf(d)!==-1}function F(C){return C===o}function L(C){return C===l}function O(C){var T=A(C);return T>=p&&T<=y}function W(C){return O(C.substr(0,2))&&O(C.substr(2,2))}function H(C){return r.indexOf(C)!==-1}function z(C,T){var d=A(C.substr(T,2));if(d!==i)return!1;var E=0;for(T+=2;E<5;){if(d=A(C.substr(T,2)),d<n||d>a)return!1;E+=1,T+=2}return A(C.substr(T,2))===s}function q(){this.isLoaded=!0}var D=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};D.isModifier=M,D.isZeroWidthJoiner=F,D.isFlagEmoji=W,D.isRegionalCode=O,D.isCombinedCharacter=H,D.isRegionalFlag=z,D.isVariationSelector=L,D.BLACK_FLAG_CODE_POINT=i;var I={addChars:c,addFonts:k,getCharData:b,getFontByName:P,measureText:f,checkLoadedFonts:S,setIsLoaded:q};return D.prototype=I,D}();function SlotManager(t){this.animationData=t}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t};function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(e){this.renderableComponents.indexOf(e)===-1&&this.renderableComponents.push(e)},removeRenderableComponent:function(e){this.renderableComponents.indexOf(e)!==-1&&this.renderableComponents.splice(this.renderableComponents.indexOf(e),1)},prepareRenderableFrame:function(e){this.checkLayerLimits(e)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(e){this.data.ip-this.data.st<=e&&this.data.op-this.data.st>e?this.isInRange!==!0&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):this.isInRange!==!1&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var e,r=this.renderableComponents.length;for(e=0;e<r;e+=1)this.renderableComponents[e].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return this.data.ty===5?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=function(){var t={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(e){return t[e]||""}}();function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r=t.ef||[];this.effectElements=[];var i,s=r.length,n;for(i=0;i<s;i+=1)n=new GroupEffect(r[i],e),this.effectElements.push(n)}function GroupEffect(t,e){this.init(t,e)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var r,i=this.data.ef.length,s,n=this.data.ef;for(r=0;r<i;r+=1){switch(s=null,n[r].ty){case 0:s=new SliderEffect(n[r],e,this);break;case 1:s=new AngleEffect(n[r],e,this);break;case 2:s=new ColorEffect(n[r],e,this);break;case 3:s=new PointEffect(n[r],e,this);break;case 4:case 7:s=new CheckboxEffect(n[r],e,this);break;case 10:s=new LayerIndexEffect(n[r],e,this);break;case 11:s=new MaskIndexEffect(n[r],e,this);break;case 5:s=new EffectsManager(n[r],e);break;default:s=new NoValueEffect(n[r]);break}s&&this.effectElements.push(s)}};function BaseElement(){}BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var e=0,r=this.data.masksProperties.length;e<r;){if(this.data.masksProperties[e].mode!=="n"&&this.data.masksProperties[e].cl!==!1)return!0;e+=1}return!1},initExpressions:function(){var e=getExpressionInterfaces();if(e){var r=e("layer"),i=e("effects"),s=e("shape"),n=e("text"),a=e("comp");this.layerInterface=r(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var l=i.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(l),this.data.ty===0||this.data.xt?this.compInterface=a(this):this.data.ty===4?(this.layerInterface.shapeInterface=s(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):this.data.ty===5&&(this.layerInterface.textInterface=n(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var e=getBlendMode(this.data.bm),r=this.baseElement||this.layerElement;r.style["mix-blend-mode"]=e},initBaseData:function(e,r,i){this.globalData=r,this.comp=i,this.data=e,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}};function FrameElement(){}FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(e,r){var i,s=this.dynamicProperties.length;for(i=0;i<s;i+=1)(r||this._isParent&&this.dynamicProperties[i].propType==="transform")&&(this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&this.dynamicProperties.push(e)}};function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData};function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var i=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(i),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(t){var e,r=this.layers.length,i;for(this.completeLayers=!0,e=r-1;e>=0;e-=1)this.elements[e]||(i=this.layers[e],i.ip-i.st<=t-this.layers[e].st&&i.op-i.st>t-this.layers[e].st&&this.buildItem(e)),this.completeLayers=this.elements[e]?this.completeLayers:!1;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t);default:return this.createNull(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){this.completeLayers=!1;var e,r=t.length,i,s=this.layers.length;for(e=0;e<r;e+=1)for(i=0;i<s;){if(this.layers[i].id===t[e].id){this.layers[i]=t[e];break}i+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var i=this.elements,s=this.layers,n=0,a=s.length;n<a;)s[n].ind==e&&(!i[n]||i[n]===!0?(this.buildItem(n),this.addPendingElement(t)):(r.push(i[n]),i[n].setAsParent(),s[n].parent!==void 0?this.buildElementParenting(t,s[n].parent,r):t.setHierarchy(r))),n+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e]);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e=t.shift(),r;if(typeof e=="number")r=this.elements[e];else{var i,s=this.elements.length;for(i=0;i<s;i+=1)if(this.elements[i].data.nm===e){r=this.elements[i];break}}return t.length===0?r:r.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}TransformElement.prototype={initTransform:function(){var e=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:e,localMat:e,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var e,r=this.finalTransform.mat,i=0,s=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;i<s;){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}i+=1}if(this.finalTransform._matMdf)for(e=this.finalTransform.mProp.v.props,r.cloneFromProps(e),i=0;i<s;i+=1)r.multiply(this.hierarchy[i].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var e=0,r=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;e<r;)this.localTransforms[e]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[e]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),e+=1;if(this.finalTransform._localMatMdf){var i=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(i),e=1;e<r;e+=1){var s=this.localTransforms[e].matrix;i.multiply(s)}i.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var n=this.finalTransform.localOpacity;for(e=0;e<r;e+=1)n*=this.localTransforms[e].opacity*.01;this.finalTransform.localOpacity=n}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var e=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(e.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var r=0,i=e.length;for(r=0;r<i;r+=1)this.localTransforms.push(e[r])}}},globalToLocal:function(e){var r=[];r.push(this.finalTransform);for(var i=!0,s=this.comp;i;)s.finalTransform?(s.data.hasMask&&r.splice(0,0,s.finalTransform),s=s.comp):i=!1;var n,a=r.length,l;for(n=0;n<a;n+=1)l=r[n].mat.applyToPointArray(0,0,0),e=[e[0]-l[0],e[1]-l[1],0];return e},mHelper:new Matrix};function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var i=this.globalData.defs,s,n=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(n),this.solidPath="";var a,l=this.masksProperties,o=0,p=[],y,_,u=createElementID(),x,S,g,k,c="clipPath",b="clip-path";for(s=0;s<n;s+=1)if((l[s].mode!=="a"&&l[s].mode!=="n"||l[s].inv||l[s].o.k!==100||l[s].o.x)&&(c="mask",b="mask"),(l[s].mode==="s"||l[s].mode==="i")&&o===0?(x=createNS("rect"),x.setAttribute("fill","#ffffff"),x.setAttribute("width",this.element.comp.data.w||0),x.setAttribute("height",this.element.comp.data.h||0),p.push(x)):x=null,a=createNS("path"),l[s].mode==="n")this.viewData[s]={op:PropertyFactory.getProp(this.element,l[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,l[s],3),elem:a,lastPath:""},i.appendChild(a);else{o+=1,a.setAttribute("fill",l[s].mode==="s"?"#000000":"#ffffff"),a.setAttribute("clip-rule","nonzero");var f;if(l[s].x.k!==0?(c="mask",b="mask",k=PropertyFactory.getProp(this.element,l[s].x,0,null,this.element),f=createElementID(),S=createNS("filter"),S.setAttribute("id",f),g=createNS("feMorphology"),g.setAttribute("operator","erode"),g.setAttribute("in","SourceGraphic"),g.setAttribute("radius","0"),S.appendChild(g),i.appendChild(S),a.setAttribute("stroke",l[s].mode==="s"?"#000000":"#ffffff")):(g=null,k=null),this.storedData[s]={elem:a,x:k,expan:g,lastPath:"",lastOperator:"",filterId:f,lastRadius:0},l[s].mode==="i"){_=p.length;var P=createNS("g");for(y=0;y<_;y+=1)P.appendChild(p[y]);var A=createNS("mask");A.setAttribute("mask-type","alpha"),A.setAttribute("id",u+"_"+o),A.appendChild(a),i.appendChild(A),P.setAttribute("mask","url("+getLocationHref()+"#"+u+"_"+o+")"),p.length=0,p.push(P)}else p.push(a);l[s].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[s]={elem:a,lastPath:"",op:PropertyFactory.getProp(this.element,l[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,l[s],3),invRect:x},this.viewData[s].prop.k||this.drawPath(l[s],this.viewData[s].prop.v,this.viewData[s])}for(this.maskElement=createNS(c),n=p.length,s=0;s<n;s+=1)this.maskElement.appendChild(p[s]);o>0&&(this.maskElement.setAttribute("id",u),this.element.maskedElement.setAttribute(b,"url("+getLocationHref()+"#"+u+")"),i.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e=this.element.finalTransform.mat,r,i=this.masksProperties.length;for(r=0;r<i;r+=1)if((this.viewData[r].prop._mdf||t)&&this.drawPath(this.masksProperties[r],this.viewData[r].prop.v,this.viewData[r]),(this.viewData[r].op._mdf||t)&&this.viewData[r].elem.setAttribute("fill-opacity",this.viewData[r].op.v),this.masksProperties[r].mode!=="n"&&(this.viewData[r].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[r].invRect.setAttribute("transform",e.getInverseMatrix().to2dCSS()),this.storedData[r].x&&(this.storedData[r].x._mdf||t))){var s=this.storedData[r].expan;this.storedData[r].x.v<0?(this.storedData[r].lastOperator!=="erode"&&(this.storedData[r].lastOperator="erode",this.storedData[r].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[r].filterId+")")),s.setAttribute("radius",-this.storedData[r].x.v)):(this.storedData[r].lastOperator!=="dilate"&&(this.storedData[r].lastOperator="dilate",this.storedData[r].elem.setAttribute("filter",null)),this.storedData[r].elem.setAttribute("stroke-width",this.storedData[r].x.v*2))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,t+=" h-"+this.globalData.compSize.w,t+=" v-"+this.globalData.compSize.h+" ",t},MaskElement.prototype.drawPath=function(t,e,r){var i=" M"+e.v[0][0]+","+e.v[0][1],s,n;for(n=e._length,s=1;s<n;s+=1)i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[s][0]+","+e.i[s][1]+" "+e.v[s][0]+","+e.v[s][1];if(e.c&&n>1&&(i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==i){var a="";r.elem&&(e.c&&(a=t.inv?this.solidPath+i:i),r.elem.setAttribute("d",a)),r.lastPath=i}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory=function(){var t={};t.createFilter=e,t.createAlphaToLuminanceFilter=r;function e(i,s){var n=createNS("filter");return n.setAttribute("id",i),s!==!0&&(n.setAttribute("filterUnits","objectBoundingBox"),n.setAttribute("x","0%"),n.setAttribute("y","0%"),n.setAttribute("width","100%"),n.setAttribute("height","100%")),n}function r(){var i=createNS("feColorMatrix");return i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),i}return t}(),featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:typeof OffscreenCanvas<"u"};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r="SourceGraphic",i=t.data.ef?t.data.ef.length:0,s=createElementID(),n=filtersFactory.createFilter(s,!0),a=0;this.filters=[];var l;for(e=0;e<i;e+=1){l=null;var o=t.data.ef[e].ty;if(registeredEffects$1[o]){var p=registeredEffects$1[o].effect;l=new p(n,t.effectsManager.effectElements[e],t,idPrefix+a,r),r=idPrefix+a,registeredEffects$1[o].countsAsEffect&&(a+=1)}l&&this.filters.push(l)}a&&(t.globalData.defs.appendChild(n),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+s+")")),this.filters.length&&t.addRenderableComponent(this)}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var e=null;if(this.data.td){this.matteMasks={};var r=createNS("g");r.setAttribute("id",this.layerId),r.appendChild(this.layerElement),e=r,this.globalData.defs.appendChild(r)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),e=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.ty===0&&!this.data.hd){var i=createNS("clipPath"),s=createNS("path");s.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var n=createElementID();if(i.setAttribute("id",n),i.appendChild(s),this.globalData.defs.appendChild(i),this.checkMasks()){var a=createNS("g");a.setAttribute("clip-path","url("+getLocationHref()+"#"+n+")"),a.appendChild(this.layerElement),this.transformedElement=a,e?e.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+n+")")}this.data.bm!==0&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(e){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[e]){var r=this.layerId+"_"+e,i,s,n,a;if(e===1||e===3){var l=createNS("mask");l.setAttribute("id",r),l.setAttribute("mask-type",e===3?"luminance":"alpha"),n=createNS("use"),n.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(n),this.globalData.defs.appendChild(l),!featureSupport.maskType&&e===1&&(l.setAttribute("mask-type","luminance"),i=createElementID(),s=filtersFactory.createFilter(i),this.globalData.defs.appendChild(s),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),a=createNS("g"),a.appendChild(n),l.appendChild(a),a.setAttribute("filter","url("+getLocationHref()+"#"+i+")"))}else if(e===2){var o=createNS("mask");o.setAttribute("id",r),o.setAttribute("mask-type","alpha");var p=createNS("g");o.appendChild(p),i=createElementID(),s=filtersFactory.createFilter(i);var y=createNS("feComponentTransfer");y.setAttribute("in","SourceGraphic"),s.appendChild(y);var _=createNS("feFuncA");_.setAttribute("type","table"),_.setAttribute("tableValues","1.0 0.0"),y.appendChild(_),this.globalData.defs.appendChild(s);var u=createNS("rect");u.setAttribute("width",this.comp.data.w),u.setAttribute("height",this.comp.data.h),u.setAttribute("x","0"),u.setAttribute("y","0"),u.setAttribute("fill","#ffffff"),u.setAttribute("opacity","0"),p.setAttribute("filter","url("+getLocationHref()+"#"+i+")"),p.appendChild(u),n=createNS("use"),n.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),p.appendChild(n),featureSupport.maskType||(o.setAttribute("mask-type","luminance"),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),a=createNS("g"),p.appendChild(u),a.appendChild(this.layerElement),p.appendChild(a)),this.globalData.defs.appendChild(o)}this.matteMasks[e]=r}return this.matteMasks[e]},setMatte:function(e){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+e+")")}};function HierarchyElement(){}HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(e){this.hierarchy=e},setAsParent:function(){this._isParent=!0},checkParenting:function(){this.data.parent!==void 0&&this.comp.buildElementParenting(this,this.data.parent,[])}};function RenderableDOMElement(){}(function(){var t={initElement:function(r,i,s){this.initFrame(),this.initBaseData(r,i,s),this.initTransform(r,i,s),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var r=this.baseElement||this.layerElement;r.style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var r=this.baseElement||this.layerElement;r.style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(r){this._mdf=!1,this.prepareRenderableFrame(r),this.prepareProperties(r,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}};extendPrototype([RenderableElement,createProxyFunction(t)],RenderableDOMElement)})();function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect};function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function(e){var r,i=this.shapeModifiers.length;for(r=0;r<i;r+=1)this.shapeModifiers[r].addShape(e)},isShapeInAnimatedModifiers:function(e){for(var r=0,i=this.shapeModifiers.length;r<i;)if(this.shapeModifiers[r].isAnimatedWithShape(e))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var e,r=this.shapes.length;for(e=0;e<r;e+=1)this.shapes[e].sh.reset();r=this.shapeModifiers.length;var i;for(e=r-1;e>=0&&(i=this.shapeModifiers[e].processShapes(this._isFirstFrame),!i);e-=1);}},searchProcessedElement:function(e){for(var r=this.processedElements,i=0,s=r.length;i<s;){if(r[i].elem===e)return r[i].pos;i+=1}return 0},addProcessedElement:function(e,r){for(var i=this.processedElements,s=i.length;s;)if(s-=1,i[s].elem===e){i[s].pos=r;return}i.push(new ProcessedElement(e,r))},prepareFrame:function(e){this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var i=0,s=t.length;i<s;){if(t[i].mProps.dynamicProperties.length){this._isAnimated=!0;break}i+=1}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0};function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=t.hd===!0,this.pElem=createNS("path"),this.msElem=null}SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1};function DashProperty(t,e,r,i){this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(i);var s,n=e.length||0,a;for(s=0;s<n;s+=1)a=PropertyFactory.getProp(t,e[s].v,0,0,this),this.k=a.k||this.k,this.dataProps[s]={n:e[s].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}DashProperty.prototype.getValue=function(t){if(!(this.elem.globalData.frameId===this.frameId&&!t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for(this.renderer==="svg"&&(this.dashStr=""),e=0;e<r;e+=1)this.dataProps[e].n!=="o"?this.renderer==="svg"?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",e.p*4);var i=e.k.k[0].s?e.k.k[0].s.length-e.p*4:e.k.k.length-e.p*4;this.o=createTypedArray("float32",i),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=i,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,i=this.o.length/2,s;r<i;){if(s=Math.abs(t[r*4]-t[e*4+r*2]),s>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r=this.data.p*4,i,s;for(e=0;e<r;e+=1)i=e%4===0?100:255,s=Math.round(this.prop.v[e]*i),this.c[e]!==s&&(this.c[e]=s,this._cmdf=!t);if(this.o.length)for(r=this.prop.v.length,e=this.data.p*4;e<r;e+=1)i=e%2===0?100:1,s=e%2===0?Math.round(this.prop.v[e]*100):this.prop.v[e],this.o[e-this.data.p*4]!==s&&(this.o[e-this.data.p*4]=s,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),i=createNS(e.t===1?"linearGradient":"radialGradient");i.setAttribute("id",r),i.setAttribute("spreadMethod","pad"),i.setAttribute("gradientUnits","userSpaceOnUse");var s=[],n,a,l;for(l=e.g.p*4,a=0;a<l;a+=4)n=createNS("stop"),i.appendChild(n),s.push(n);t.setAttribute(e.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=i,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,i,s,n=createNS("mask"),a=createNS("path");n.appendChild(a);var l=createElementID(),o=createElementID();n.setAttribute("id",o);var p=createNS(t.t===1?"linearGradient":"radialGradient");p.setAttribute("id",l),p.setAttribute("spreadMethod","pad"),p.setAttribute("gradientUnits","userSpaceOnUse"),s=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var y=this.stops;for(i=t.g.p*4;i<s;i+=2)r=createNS("stop"),r.setAttribute("stop-color","rgb(255,255,255)"),p.appendChild(r),y.push(r);a.setAttribute(t.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+l+")"),t.ty==="gs"&&(a.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),a.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),t.lj===1&&a.setAttribute("stroke-miterlimit",t.ml)),this.of=p,this.ms=n,this.ost=y,this.maskId=o,e.msElem=a}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}var buildShapeString=function(e,r,i,s){if(r===0)return"";var n=e.o,a=e.i,l=e.v,o,p=" M"+s.applyToPointStringified(l[0][0],l[0][1]);for(o=1;o<r;o+=1)p+=" C"+s.applyToPointStringified(n[o-1][0],n[o-1][1])+" "+s.applyToPointStringified(a[o][0],a[o][1])+" "+s.applyToPointStringified(l[o][0],l[o][1]);return i&&r&&(p+=" C"+s.applyToPointStringified(n[o-1][0],n[o-1][1])+" "+s.applyToPointStringified(a[0][0],a[0][1])+" "+s.applyToPointStringified(l[0][0],l[0][1]),p+="z"),p},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix,r={createRenderFunction:i};function i(_){switch(_.ty){case"fl":return l;case"gf":return p;case"gs":return o;case"st":return y;case"sh":case"el":case"rc":case"sr":return a;case"tr":return s;case"no":return n;default:return null}}function s(_,u,x){(x||u.transform.op._mdf)&&u.transform.container.setAttribute("opacity",u.transform.op.v),(x||u.transform.mProps._mdf)&&u.transform.container.setAttribute("transform",u.transform.mProps.v.to2dCSS())}function n(){}function a(_,u,x){var S,g,k,c,b,f,P=u.styles.length,A=u.lvl,M,F,L,O;for(f=0;f<P;f+=1){if(c=u.sh._mdf||x,u.styles[f].lvl<A){for(F=e.reset(),L=A-u.styles[f].lvl,O=u.transformers.length-1;!c&&L>0;)c=u.transformers[O].mProps._mdf||c,L-=1,O-=1;if(c)for(L=A-u.styles[f].lvl,O=u.transformers.length-1;L>0;)F.multiply(u.transformers[O].mProps.v),L-=1,O-=1}else F=t;if(M=u.sh.paths,g=M._length,c){for(k="",S=0;S<g;S+=1)b=M.shapes[S],b&&b._length&&(k+=buildShapeString(b,b._length,b.c,F));u.caches[f]=k}else k=u.caches[f];u.styles[f].d+=_.hd===!0?"":k,u.styles[f]._mdf=c||u.styles[f]._mdf}}function l(_,u,x){var S=u.style;(u.c._mdf||x)&&S.pElem.setAttribute("fill","rgb("+bmFloor(u.c.v[0])+","+bmFloor(u.c.v[1])+","+bmFloor(u.c.v[2])+")"),(u.o._mdf||x)&&S.pElem.setAttribute("fill-opacity",u.o.v)}function o(_,u,x){p(_,u,x),y(_,u,x)}function p(_,u,x){var S=u.gf,g=u.g._hasOpacity,k=u.s.v,c=u.e.v;if(u.o._mdf||x){var b=_.ty==="gf"?"fill-opacity":"stroke-opacity";u.style.pElem.setAttribute(b,u.o.v)}if(u.s._mdf||x){var f=_.t===1?"x1":"cx",P=f==="x1"?"y1":"cy";S.setAttribute(f,k[0]),S.setAttribute(P,k[1]),g&&!u.g._collapsable&&(u.of.setAttribute(f,k[0]),u.of.setAttribute(P,k[1]))}var A,M,F,L;if(u.g._cmdf||x){A=u.cst;var O=u.g.c;for(F=A.length,M=0;M<F;M+=1)L=A[M],L.setAttribute("offset",O[M*4]+"%"),L.setAttribute("stop-color","rgb("+O[M*4+1]+","+O[M*4+2]+","+O[M*4+3]+")")}if(g&&(u.g._omdf||x)){var W=u.g.o;for(u.g._collapsable?A=u.cst:A=u.ost,F=A.length,M=0;M<F;M+=1)L=A[M],u.g._collapsable||L.setAttribute("offset",W[M*2]+"%"),L.setAttribute("stop-opacity",W[M*2+1])}if(_.t===1)(u.e._mdf||x)&&(S.setAttribute("x2",c[0]),S.setAttribute("y2",c[1]),g&&!u.g._collapsable&&(u.of.setAttribute("x2",c[0]),u.of.setAttribute("y2",c[1])));else{var H;if((u.s._mdf||u.e._mdf||x)&&(H=Math.sqrt(Math.pow(k[0]-c[0],2)+Math.pow(k[1]-c[1],2)),S.setAttribute("r",H),g&&!u.g._collapsable&&u.of.setAttribute("r",H)),u.e._mdf||u.h._mdf||u.a._mdf||x){H||(H=Math.sqrt(Math.pow(k[0]-c[0],2)+Math.pow(k[1]-c[1],2)));var z=Math.atan2(c[1]-k[1],c[0]-k[0]),q=u.h.v;q>=1?q=.99:q<=-1&&(q=-.99);var D=H*q,I=Math.cos(z+u.a.v)*D+k[0],C=Math.sin(z+u.a.v)*D+k[1];S.setAttribute("fx",I),S.setAttribute("fy",C),g&&!u.g._collapsable&&(u.of.setAttribute("fx",I),u.of.setAttribute("fy",C))}}}function y(_,u,x){var S=u.style,g=u.d;g&&(g._mdf||x)&&g.dashStr&&(S.pElem.setAttribute("stroke-dasharray",g.dashStr),S.pElem.setAttribute("stroke-dashoffset",g.dashoffset[0])),u.c&&(u.c._mdf||x)&&S.pElem.setAttribute("stroke","rgb("+bmFloor(u.c.v[0])+","+bmFloor(u.c.v[1])+","+bmFloor(u.c.v[2])+")"),(u.o._mdf||x)&&S.pElem.setAttribute("stroke-opacity",u.o.v),(u.w._mdf||x)&&(S.pElem.setAttribute("stroke-width",u.w.v),S.msElem&&S.msElem.setAttribute("stroke-width",u.w.v))}return r}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e=this.shapes.length,r,i,s=this.stylesList.length,n,a=[],l=!1;for(i=0;i<s;i+=1){for(n=this.stylesList[i],l=!1,a.length=0,t=0;t<e;t+=1)r=this.shapes[t],r.styles.indexOf(n)!==-1&&(a.push(r),l=r._isAnimated||l);a.length>1&&l&&this.setShapesAsAnimated(a)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,i=new SVGStyleData(t,e),s=i.pElem;if(t.ty==="st")r=new SVGStrokeStyleData(this,t,i);else if(t.ty==="fl")r=new SVGFillStyleData(this,t,i);else if(t.ty==="gf"||t.ty==="gs"){var n=t.ty==="gf"?SVGGradientFillStyleData:SVGGradientStrokeStyleData;r=new n(this,t,i),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),s.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))}else t.ty==="no"&&(r=new SVGNoStyleData(this,t,i));return(t.ty==="st"||t.ty==="gs")&&(s.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),s.setAttribute("fill-opacity","0"),t.lj===1&&s.setAttribute("stroke-miterlimit",t.ml)),t.r===2&&s.setAttribute("fill-rule","evenodd"),t.ln&&s.setAttribute("id",t.ln),t.cl&&s.setAttribute("class",t.cl),t.bm&&(s.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(i),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),i=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var i=4;t.ty==="rc"?i=5:t.ty==="el"?i=6:t.ty==="sr"&&(i=7);var s=ShapePropertyFactory.getShapeProp(this,t,i,this),n=new SVGShapeData(e,r,s);return this.shapes.push(n),this.addShapeToModifiers(n),this.addToAnimatedContents(t,n),n},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,i=this.animatedContents.length;r<i;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e=t.styles,r,i=this.stylesList.length;for(r=0;r<i;r+=1)this.stylesList[r].closed||e.push(this.stylesList[r])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,i,s,n,a){var l=[].concat(n),o,p=t.length-1,y,_,u=[],x=[],S,g,k;for(o=p;o>=0;o-=1){if(k=this.searchProcessedElement(t[o]),k?e[o]=r[k-1]:t[o]._render=a,t[o].ty==="fl"||t[o].ty==="st"||t[o].ty==="gf"||t[o].ty==="gs"||t[o].ty==="no")k?e[o].style.closed=!1:e[o]=this.createStyleElement(t[o],s),t[o]._render&&e[o].style.pElem.parentNode!==i&&i.appendChild(e[o].style.pElem),u.push(e[o].style);else if(t[o].ty==="gr"){if(!k)e[o]=this.createGroupElement(t[o]);else for(_=e[o].it.length,y=0;y<_;y+=1)e[o].prevViewData[y]=e[o].it[y];this.searchShapes(t[o].it,e[o].it,e[o].prevViewData,e[o].gr,s+1,l,a),t[o]._render&&e[o].gr.parentNode!==i&&i.appendChild(e[o].gr)}else t[o].ty==="tr"?(k||(e[o]=this.createTransformElement(t[o],i)),S=e[o].transform,l.push(S)):t[o].ty==="sh"||t[o].ty==="rc"||t[o].ty==="el"||t[o].ty==="sr"?(k||(e[o]=this.createShapeElement(t[o],l,s)),this.setElementStyles(e[o])):t[o].ty==="tm"||t[o].ty==="rd"||t[o].ty==="ms"||t[o].ty==="pb"||t[o].ty==="zz"||t[o].ty==="op"?(k?(g=e[o],g.closed=!1):(g=ShapeModifiers.getModifier(t[o].ty),g.init(this,t[o]),e[o]=g,this.shapeModifiers.push(g)),x.push(g)):t[o].ty==="rp"&&(k?(g=e[o],g.closed=!0):(g=ShapeModifiers.getModifier(t[o].ty),e[o]=g,g.init(this,t,o,e),this.shapeModifiers.push(g),a=!1),x.push(g));this.addProcessedElement(t[o],o+1)}for(p=u.length,o=0;o<p;o+=1)u[o].closed=!0;for(p=x.length,o=0;o<p;o+=1)x[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e=this.animatedContents.length,r;for(t=0;t<e;t+=1)r=this.animatedContents[t],(this._isFirstFrame||r.element._isAnimated)&&r.data!==!0&&r.fn(r.data,r.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null};function LetterProps(t,e,r,i,s,n){this.o=t,this.sw=e,this.sc=r,this.fc=i,this.m=s,this.p=n,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!i,m:!0,p:!0}}LetterProps.prototype.update=function(t,e,r,i,s,n){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var a=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,a=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,a=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,a=!0),this.fc!==i&&(this.fc=i,this._mdf.fc=!0,a=!0),this.m!==s&&(this.m=s,this._mdf.m=!0,a=!0),n.length&&(this.p[0]!==n[0]||this.p[1]!==n[1]||this.p[4]!==n[4]||this.p[5]!==n[5]||this.p[12]!==n[12]||this.p[13]!==n[13])&&(this.p=n,this._mdf.p=!0,a=!0),a};function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(!((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!t)){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return}this.lock=!0,this._mdf=!1;var i,s=this.effectsSequence.length,n=t||this.data.d.k[this.keysIndex].s;for(i=0;i<s;i+=1)r!==this.keysIndex?n=this.effectsSequence[i](n,n.t):n=this.effectsSequence[i](this.currentData,n.t);e!==n&&this.setCurrentData(n),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,i=t.length;r<=i-1&&!(r===i-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e=[],r=0,i=t.length,s,n,a=!1,l=!1,o="";r<i;)a=l,l=!1,s=t.charCodeAt(r),o=t.charAt(r),FontManager.isCombinedCharacter(s)?a=!0:s>=55296&&s<=56319?FontManager.isRegionalFlag(t,r)?o=t.substr(r,14):(n=t.charCodeAt(r+1),n>=56320&&n<=57343&&(FontManager.isModifier(s,n)?(o=t.substr(r,2),a=!0):FontManager.isFlagEmoji(t.substr(r,4))?o=t.substr(r,4):o=t.substr(r,2))):s>56319?(n=t.charCodeAt(r+1),FontManager.isVariationSelector(s)&&(a=!0)):FontManager.isZeroWidthJoiner(s)&&(a=!0,l=!0),a?(e[e.length-1]+=o,a=!1):e.push(o),r+=o.length;return e},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e=this.elem.globalData.fontManager,r=this.data,i=[],s,n,a,l=0,o,p=r.m.g,y=0,_=0,u=0,x=[],S=0,g=0,k,c,b=e.getFontByName(t.f),f,P=0,A=getFontProperties(b);t.fWeight=A.weight,t.fStyle=A.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),n=t.finalText.length,t.finalLineHeight=t.lh;var M=t.tr/1e3*t.finalSize,F;if(t.sz)for(var L=!0,O=t.sz[0],W=t.sz[1],H,z;L;){z=this.buildFinalText(t.t),H=0,S=0,n=z.length,M=t.tr/1e3*t.finalSize;var q=-1;for(s=0;s<n;s+=1)F=z[s].charCodeAt(0),a=!1,z[s]===" "?q=s:(F===13||F===3)&&(S=0,a=!0,H+=t.finalLineHeight||t.finalSize*1.2),e.chars?(f=e.getCharData(z[s],b.fStyle,b.fFamily),P=a?0:f.w*t.finalSize/100):P=e.measureText(z[s],t.f,t.finalSize),S+P>O&&z[s]!==" "?(q===-1?n+=1:s=q,H+=t.finalLineHeight||t.finalSize*1.2,z.splice(s,q===s?1:0,"\r"),q=-1,S=0):(S+=P,S+=M);H+=b.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&W<H?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=z,n=t.finalText.length,L=!1)}S=-M,P=0;var D=0,I;for(s=0;s<n;s+=1)if(a=!1,I=t.finalText[s],F=I.charCodeAt(0),F===13||F===3?(D=0,x.push(S),g=S>g?S:g,S=-2*M,o="",a=!0,u+=1):o=I,e.chars?(f=e.getCharData(I,b.fStyle,e.getFontByName(t.f).fFamily),P=a?0:f.w*t.finalSize/100):P=e.measureText(o,t.f,t.finalSize),I===" "?D+=P+M:(S+=P+M+D,D=0),i.push({l:P,an:P,add:y,n:a,anIndexes:[],val:o,line:u,animatorJustifyOffset:0}),p==2){if(y+=P,o===""||o===" "||s===n-1){for((o===""||o===" ")&&(y-=P);_<=s;)i[_].an=y,i[_].ind=l,i[_].extra=P,_+=1;l+=1,y=0}}else if(p==3){if(y+=P,o===""||s===n-1){for(o===""&&(y-=P);_<=s;)i[_].an=y,i[_].ind=l,i[_].extra=P,_+=1;y=0,l+=1}}else i[l].ind=l,i[l].extra=0,l+=1;if(t.l=i,g=S>g?S:g,x.push(S),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=g,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=x;var C=r.a,T,d;c=C.length;var E,V,R=[];for(k=0;k<c;k+=1){for(T=C[k],T.a.sc&&(t.strokeColorAnim=!0),T.a.sw&&(t.strokeWidthAnim=!0),(T.a.fc||T.a.fh||T.a.fs||T.a.fb)&&(t.fillColorAnim=!0),V=0,E=T.s.b,s=0;s<n;s+=1)d=i[s],d.anIndexes[k]=V,(E==1&&d.val!==""||E==2&&d.val!==""&&d.val!==" "||E==3&&(d.n||d.val==" "||s==n-1)||E==4&&(d.n||s==n-1))&&(T.s.rn===1&&R.push(V),V+=1);r.a[k].s.totalChars=V;var G=-1,j;if(T.s.rn===1)for(s=0;s<n;s+=1)d=i[s],G!=d.anIndexes[k]&&(G=d.anIndexes[k],j=R.splice(Math.floor(Math.random()*R.length),1)[0]),d.anIndexes[k]=j}t.yOffset=t.finalLineHeight||t.finalSize*1.2,t.ls=t.ls||0,t.ascent=b.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=e===void 0?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function i(n,a){this._currentTextLength=-1,this.k=!1,this.data=a,this.elem=n,this.comp=n.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(n),this.s=PropertyFactory.getProp(n,a.s||{k:0},0,0,this),"e"in a?this.e=PropertyFactory.getProp(n,a.e,0,0,this):this.e={v:100},this.o=PropertyFactory.getProp(n,a.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(n,a.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(n,a.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(n,a.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(n,a.a,0,.01,this),this.dynamicProperties.length||this.getValue()}i.prototype={getMult:function(a){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var l=0,o=0,p=1,y=1;this.ne.v>0?l=this.ne.v/100:o=-this.ne.v/100,this.xe.v>0?p=1-this.xe.v/100:y=1+this.xe.v/100;var _=BezierFactory.getBezierEasing(l,o,p,y).get,u=0,x=this.finalS,S=this.finalE,g=this.data.sh;if(g===2)S===x?u=a>=S?1:0:u=t(0,e(.5/(S-x)+(a-x)/(S-x),1)),u=_(u);else if(g===3)S===x?u=a>=S?0:1:u=1-t(0,e(.5/(S-x)+(a-x)/(S-x),1)),u=_(u);else if(g===4)S===x?u=0:(u=t(0,e(.5/(S-x)+(a-x)/(S-x),1)),u<.5?u*=2:u=1-2*(u-.5)),u=_(u);else if(g===5){if(S===x)u=0;else{var k=S-x;a=e(t(0,a+.5-x),S-x);var c=-k/2+a,b=k/2;u=Math.sqrt(1-c*c/(b*b))}u=_(u)}else g===6?(S===x?u=0:(a=e(t(0,a+.5-x),S-x),u=(1+Math.cos(Math.PI+Math.PI*2*a/(S-x)))/2),u=_(u)):(a>=r(x)&&(a-x<0?u=t(0,e(e(S,1)-(x-a),1)):u=t(0,e(S-a,1))),u=_(u));if(this.sm.v!==100){var f=this.sm.v*.01;f===0&&(f=1e-8);var P=.5-f*.5;u<P?u=0:(u=(u-P)/f,u>1&&(u=1))}return u*this.a.v},getValue:function(a){this.iterateDynamicProperties(),this._mdf=a||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,a&&this.data.r===2&&(this.e.v=this._currentTextLength);var l=this.data.r===2?1:100/this.data.totalChars,o=this.o.v/l,p=this.s.v/l+o,y=this.e.v/l+o;if(p>y){var _=p;p=y,y=_}this.finalS=p,this.finalE=y}},extendPrototype([DynamicPropertyContainer],i);function s(n,a,l){return new i(n,a)}return{getTextSelectorProp:s}}();function TextAnimatorDataProperty(t,e,r){var i={propType:!1},s=PropertyFactory.getProp,n=e.a;this.a={r:n.r?s(t,n.r,0,degToRads,r):i,rx:n.rx?s(t,n.rx,0,degToRads,r):i,ry:n.ry?s(t,n.ry,0,degToRads,r):i,sk:n.sk?s(t,n.sk,0,degToRads,r):i,sa:n.sa?s(t,n.sa,0,degToRads,r):i,s:n.s?s(t,n.s,1,.01,r):i,a:n.a?s(t,n.a,1,0,r):i,o:n.o?s(t,n.o,0,.01,r):i,p:n.p?s(t,n.p,1,0,r):i,sw:n.sw?s(t,n.sw,0,0,r):i,sc:n.sc?s(t,n.sc,1,0,r):i,fc:n.fc?s(t,n.fc,1,0,r):i,fh:n.fh?s(t,n.fh,0,0,r):i,fs:n.fs?s(t,n.fs,0,.01,r):i,fb:n.fb?s(t,n.fb,0,.01,r):i,t:n.t?s(t,n.t,0,0,r):i},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}TextAnimatorProperty.prototype.searchProperties=function(){var t,e=this._textData.a.length,r,i=PropertyFactory.getProp;for(t=0;t<e;t+=1)r=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,r,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:i(this._elem,this._textData.p.a,0,0,this),f:i(this._elem,this._textData.p.f,0,0,this),l:i(this._elem,this._textData.p.l,0,0,this),r:i(this._elem,this._textData.p.r,0,0,this),p:i(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=i(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,!(!this._mdf&&!this._isFirstFrame&&!e&&(!this._hasMaskedPath||!this._pathData.m._mdf))){this._isFirstFrame=!1;var r=this._moreOptions.alignment.v,i=this._animatorsData,s=this._textData,n=this.mHelper,a=this._renderType,l=this.renderedLetters.length,o,p,y,_,u=t.l,x,S,g,k,c,b,f,P,A,M,F,L,O,W,H;if(this._hasMaskedPath){if(H=this._pathData.m,!this._pathData.n||this._pathData._mdf){var z=H.v;this._pathData.r.v&&(z=z.reverse()),x={tLength:0,segments:[]},_=z._length-1;var q;for(L=0,y=0;y<_;y+=1)q=bez.buildBezierData(z.v[y],z.v[y+1],[z.o[y][0]-z.v[y][0],z.o[y][1]-z.v[y][1]],[z.i[y+1][0]-z.v[y+1][0],z.i[y+1][1]-z.v[y+1][1]]),x.tLength+=q.segmentLength,x.segments.push(q),L+=q.segmentLength;y=_,H.v.c&&(q=bez.buildBezierData(z.v[y],z.v[0],[z.o[y][0]-z.v[y][0],z.o[y][1]-z.v[y][1]],[z.i[0][0]-z.v[0][0],z.i[0][1]-z.v[0][1]]),x.tLength+=q.segmentLength,x.segments.push(q),L+=q.segmentLength),this._pathData.pi=x}if(x=this._pathData.pi,S=this._pathData.f.v,f=0,b=1,k=0,c=!0,M=x.segments,S<0&&H.v.c)for(x.tLength<Math.abs(S)&&(S=-Math.abs(S)%x.tLength),f=M.length-1,A=M[f].points,b=A.length-1;S<0;)S+=A[b].partialLength,b-=1,b<0&&(f-=1,A=M[f].points,b=A.length-1);A=M[f].points,P=A[b-1],g=A[b],F=g.partialLength}_=u.length,o=0,p=0;var D=t.finalSize*1.2*.714,I=!0,C,T,d,E,V;E=i.length;var R,G=-1,j,N,K,U=S,Z=f,rt=b,mt=-1,st,it,at,X,$,St,Tt,Pt,vt="",xt=this.defaultPropsArray,Et;if(t.j===2||t.j===1){var nt=0,Mt=0,kt=t.j===2?-.5:-1,ut=0,wt=!0;for(y=0;y<_;y+=1)if(u[y].n){for(nt&&(nt+=Mt);ut<y;)u[ut].animatorJustifyOffset=nt,ut+=1;nt=0,wt=!0}else{for(d=0;d<E;d+=1)C=i[d].a,C.t.propType&&(wt&&t.j===2&&(Mt+=C.t.v*kt),T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),R.length?nt+=C.t.v*R[0]*kt:nt+=C.t.v*R*kt);wt=!1}for(nt&&(nt+=Mt);ut<y;)u[ut].animatorJustifyOffset=nt,ut+=1}for(y=0;y<_;y+=1){if(n.reset(),st=1,u[y].n)o=0,p+=t.yOffset,p+=I?1:0,S=U,I=!1,this._hasMaskedPath&&(f=Z,b=rt,A=M[f].points,P=A[b-1],g=A[b],F=g.partialLength,k=0),vt="",Pt="",St="",Et="",xt=this.defaultPropsArray;else{if(this._hasMaskedPath){if(mt!==u[y].line){switch(t.j){case 1:S+=L-t.lineWidths[u[y].line];break;case 2:S+=(L-t.lineWidths[u[y].line])/2;break}mt=u[y].line}G!==u[y].ind&&(u[G]&&(S+=u[G].extra),S+=u[y].an/2,G=u[y].ind),S+=r[0]*u[y].an*.005;var ct=0;for(d=0;d<E;d+=1)C=i[d].a,C.p.propType&&(T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),R.length?ct+=C.p.v[0]*R[0]:ct+=C.p.v[0]*R),C.a.propType&&(T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),R.length?ct+=C.a.v[0]*R[0]:ct+=C.a.v[0]*R);for(c=!0,this._pathData.a.v&&(S=u[0].an*.5+(L-this._pathData.f.v-u[0].an*.5-u[u.length-1].an*.5)*G/(_-1),S+=this._pathData.f.v);c;)k+F>=S+ct||!A?(O=(S+ct-k)/g.partialLength,N=P.point[0]+(g.point[0]-P.point[0])*O,K=P.point[1]+(g.point[1]-P.point[1])*O,n.translate(-r[0]*u[y].an*.005,-(r[1]*D)*.01),c=!1):A&&(k+=g.partialLength,b+=1,b>=A.length&&(b=0,f+=1,M[f]?A=M[f].points:H.v.c?(b=0,f=0,A=M[f].points):(k-=g.partialLength,A=null)),A&&(P=g,g=A[b],F=g.partialLength));j=u[y].an/2-u[y].add,n.translate(-j,0,0)}else j=u[y].an/2-u[y].add,n.translate(-j,0,0),n.translate(-r[0]*u[y].an*.005,-r[1]*D*.01,0);for(d=0;d<E;d+=1)C=i[d].a,C.t.propType&&(T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),(o!==0||t.j!==0)&&(this._hasMaskedPath?R.length?S+=C.t.v*R[0]:S+=C.t.v*R:R.length?o+=C.t.v*R[0]:o+=C.t.v*R));for(t.strokeWidthAnim&&(at=t.sw||0),t.strokeColorAnim&&(t.sc?it=[t.sc[0],t.sc[1],t.sc[2]]:it=[0,0,0]),t.fillColorAnim&&t.fc&&(X=[t.fc[0],t.fc[1],t.fc[2]]),d=0;d<E;d+=1)C=i[d].a,C.a.propType&&(T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),R.length?n.translate(-C.a.v[0]*R[0],-C.a.v[1]*R[1],C.a.v[2]*R[2]):n.translate(-C.a.v[0]*R,-C.a.v[1]*R,C.a.v[2]*R));for(d=0;d<E;d+=1)C=i[d].a,C.s.propType&&(T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),R.length?n.scale(1+(C.s.v[0]-1)*R[0],1+(C.s.v[1]-1)*R[1],1):n.scale(1+(C.s.v[0]-1)*R,1+(C.s.v[1]-1)*R,1));for(d=0;d<E;d+=1){if(C=i[d].a,T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),C.sk.propType&&(R.length?n.skewFromAxis(-C.sk.v*R[0],C.sa.v*R[1]):n.skewFromAxis(-C.sk.v*R,C.sa.v*R)),C.r.propType&&(R.length?n.rotateZ(-C.r.v*R[2]):n.rotateZ(-C.r.v*R)),C.ry.propType&&(R.length?n.rotateY(C.ry.v*R[1]):n.rotateY(C.ry.v*R)),C.rx.propType&&(R.length?n.rotateX(C.rx.v*R[0]):n.rotateX(C.rx.v*R)),C.o.propType&&(R.length?st+=(C.o.v*R[0]-st)*R[0]:st+=(C.o.v*R-st)*R),t.strokeWidthAnim&&C.sw.propType&&(R.length?at+=C.sw.v*R[0]:at+=C.sw.v*R),t.strokeColorAnim&&C.sc.propType)for($=0;$<3;$+=1)R.length?it[$]+=(C.sc.v[$]-it[$])*R[0]:it[$]+=(C.sc.v[$]-it[$])*R;if(t.fillColorAnim&&t.fc){if(C.fc.propType)for($=0;$<3;$+=1)R.length?X[$]+=(C.fc.v[$]-X[$])*R[0]:X[$]+=(C.fc.v[$]-X[$])*R;C.fh.propType&&(R.length?X=addHueToRGB(X,C.fh.v*R[0]):X=addHueToRGB(X,C.fh.v*R)),C.fs.propType&&(R.length?X=addSaturationToRGB(X,C.fs.v*R[0]):X=addSaturationToRGB(X,C.fs.v*R)),C.fb.propType&&(R.length?X=addBrightnessToRGB(X,C.fb.v*R[0]):X=addBrightnessToRGB(X,C.fb.v*R))}}for(d=0;d<E;d+=1)C=i[d].a,C.p.propType&&(T=i[d].s,R=T.getMult(u[y].anIndexes[d],s.a[d].s.totalChars),this._hasMaskedPath?R.length?n.translate(0,C.p.v[1]*R[0],-C.p.v[2]*R[1]):n.translate(0,C.p.v[1]*R,-C.p.v[2]*R):R.length?n.translate(C.p.v[0]*R[0],C.p.v[1]*R[1],-C.p.v[2]*R[2]):n.translate(C.p.v[0]*R,C.p.v[1]*R,-C.p.v[2]*R));if(t.strokeWidthAnim&&(St=at<0?0:at),t.strokeColorAnim&&(Tt="rgb("+Math.round(it[0]*255)+","+Math.round(it[1]*255)+","+Math.round(it[2]*255)+")"),t.fillColorAnim&&t.fc&&(Pt="rgb("+Math.round(X[0]*255)+","+Math.round(X[1]*255)+","+Math.round(X[2]*255)+")"),this._hasMaskedPath){if(n.translate(0,-t.ls),n.translate(0,r[1]*D*.01+p,0),this._pathData.p.v){W=(g.point[1]-P.point[1])/(g.point[0]-P.point[0]);var Ot=Math.atan(W)*180/Math.PI;g.point[0]<P.point[0]&&(Ot+=180),n.rotate(-Ot*Math.PI/180)}n.translate(N,K,0),S-=r[0]*u[y].an*.005,u[y+1]&&G!==u[y+1].ind&&(S+=u[y].an/2,S+=t.tr*.001*t.finalSize)}else{switch(n.translate(o,p,0),t.ps&&n.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:n.translate(u[y].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[u[y].line]),0,0);break;case 2:n.translate(u[y].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[u[y].line])/2,0,0);break}n.translate(0,-t.ls),n.translate(j,0,0),n.translate(r[0]*u[y].an*.005,r[1]*D*.01,0),o+=u[y].l+t.tr*.001*t.finalSize}a==="html"?vt=n.toCSS():a==="svg"?vt=n.to2dCSS():xt=[n.props[0],n.props[1],n.props[2],n.props[3],n.props[4],n.props[5],n.props[6],n.props[7],n.props[8],n.props[9],n.props[10],n.props[11],n.props[12],n.props[13],n.props[14],n.props[15]],Et=st}l<=y?(V=new LetterProps(Et,St,Tt,Pt,vt,xt),this.renderedLetters.push(V),l+=1,this.lettersChangedFlag=!0):(V=this.renderedLetters[y],this.lettersChangedFlag=V.update(Et,St,Tt,Pt,vt,xt)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,i=e.length,s,n="";for(r=0;r<i;r+=1)e[r].ty==="sh"&&(s=e[r].ks.k,n+=buildShapeString(s,s.i.length,!0,t));return n},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,i,s){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0);break}e.translate(i,s,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(t[0]*255)+","+Math.round(t[1]*255)+","+Math.round(t[2]*255)+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,i=[],s="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(i.push(s),s=""):s+=t[e],e+=1;return i.push(s),i},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var i=r.it[r.it.length-1];i.s&&(i.s.k[0]=e,i.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var t,e,r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var i=this.globalData.fontManager.getFontByName(r.f);if(i.fClass)this.layerElement.setAttribute("class",i.fClass);else{this.layerElement.setAttribute("font-family",i.fFamily);var s=r.fWeight,n=r.fStyle;this.layerElement.setAttribute("font-style",n),this.layerElement.setAttribute("font-weight",s)}this.layerElement.setAttribute("aria-label",r.t);var a=r.l||[],l=!!this.globalData.fontManager.chars;e=a.length;var o,p=this.mHelper,y="",_=this.data.singleShape,u=0,x=0,S=!0,g=r.tr*.001*r.finalSize;if(_&&!l&&!r.sz){var k=this.textContainer,c="start";switch(r.j){case 1:c="end";break;case 2:c="middle";break;default:c="start";break}k.setAttribute("text-anchor",c),k.setAttribute("letter-spacing",g);var b=this.buildTextContents(r.finalText);for(e=b.length,x=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)o=this.textSpans[t].span||createNS("tspan"),o.textContent=b[t],o.setAttribute("x",0),o.setAttribute("y",x),o.style.display="inherit",k.appendChild(o),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=o,x+=r.finalLineHeight;this.layerElement.appendChild(k)}else{var f=this.textSpans.length,P;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!_||t===0){if(o=f>t?this.textSpans[t].span:createNS(l?"g":"text"),f<=t){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=o,l){var A=createNS("g");o.appendChild(A),this.textSpans[t].childSpan=A}this.textSpans[t].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(p.reset(),_&&(a[t].n&&(u=-g,x+=r.yOffset,x+=S?1:0,S=!1),this.applyTextPropertiesToMatrix(r,p,a[t].line,u,x),u+=a[t].l||0,u+=g),l){P=this.globalData.fontManager.getCharData(r.finalText[t],i.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily);var M;if(P.t===1)M=new SVGCompElement(P.data,this.globalData,this);else{var F=emptyShapeData;P.data&&P.data.shapes&&(F=this.buildShapeData(P.data,r.finalSize)),M=new SVGShapeElement(F,this.globalData,this)}if(this.textSpans[t].glyph){var L=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(L.layerElement),L.destroy()}this.textSpans[t].glyph=M,M._debug=!0,M.prepareFrame(0),M.renderFrame(),this.textSpans[t].childSpan.appendChild(M.layerElement),P.t===1&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else _&&o.setAttribute("transform","translate("+p.props[12]+","+p.props[13]+")"),o.textContent=a[t].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}_&&o&&o.setAttribute("d",y)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e=this.textSpans.length,r;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<e;t+=1)r=this.textSpans[t].glyph,r&&(r.prepareFrame(this.comp.renderedFrame-this.data.st),r._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var t,e,r=this.textAnimator.renderedLetters,i=this.textProperty.currentData.l;e=i.length;var s,n,a;for(t=0;t<e;t+=1)i[t].n||(s=r[t],n=this.textSpans[t].span,a=this.textSpans[t].glyph,a&&a.renderFrame(),s._mdf.m&&n.setAttribute("transform",s.m),s._mdf.o&&n.setAttribute("opacity",s.o),s._mdf.sw&&n.setAttribute("stroke-width",s.sw),s._mdf.sc&&n.setAttribute("stroke",s.sc),s._mdf.fc&&n.setAttribute("fill",s.fc))}};function ISolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)};function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),this.renderConfig.focusable!==void 0&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),i=createNS("rect");i.setAttribute("width",t.w),i.setAttribute("height",t.h),i.setAttribute("x",0),i.setAttribute("y",0);var s=createElementID();r.setAttribute("id",s),r.appendChild(i),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+s+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(this.layers[t].ty===0&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var i="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(i===-1)return;if(!this.elements[i]||this.elements[i]===!0)this.buildItem(i),this.addPendingElement(r);else{var s=e[i],n=s.getMatte(this.layers[t].tt);r.setMatte(n)}}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var i="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,s=this.elements[i],n=s.getMatte(this.layers[e].tt);t.setMatte(n);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(!(this.renderedFrame===t||this.destroyed)){t===null?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var e,r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var i=0,s;i<e;)this.elements[i]&&this.elements[i]!==!0&&this.elements[i].getBaseElement()&&(s=this.elements[i].getBaseElement()),i+=1;s?this.layerElement.insertBefore(r,s):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),(this.data.xt||!e.progressiveLoad)&&this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),!(!this.isInRange&&!this.data.xt)){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,i=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()};function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var i=createNS("title"),s=createElementID();i.setAttribute("id",s),i.textContent=e.title,this.svgElement.appendChild(i),r+=s}if(e&&e.description){var n=createNS("desc"),a=createElementID();n.setAttribute("id",a),n.textContent=e.description,this.svgElement.appendChild(n),r+=" "+a}r&&this.svgElement.setAttribute("aria-labelledby",r);var l=createNS("defs");this.svgElement.appendChild(l);var o=createNS("g");this.svgElement.appendChild(o),this.layerElement=o,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&e.hideOnTransparent===!1),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:l,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}ShapeTransformManager.prototype={addTransformSequence:function(e){var r,i=e.length,s="_";for(r=0;r<i;r+=1)s+=e[r].transform.key+"_";var n=this.sequences[s];return n||(n={transforms:[].concat(e),finalTransform:new Matrix,_mdf:!1},this.sequences[s]=n,this.sequenceList.push(n)),n},processSequence:function(e,r){for(var i=0,s=e.transforms.length,n=r;i<s&&!r;){if(e.transforms[i].transform.mProps._mdf){n=!0;break}i+=1}if(n)for(e.finalTransform.reset(),i=s-1;i>=0;i-=1)e.finalTransform.multiply(e.transforms[i].transform.mProps.v);e._mdf=n},processSequences:function(e){var r,i=this.sequenceList.length;for(r=0;r<i;r+=1)this.processSequence(this.sequenceList[r],e)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var e="__lottie_element_luma_buffer",r=null,i=null,s=null;function n(){var o=createNS("svg"),p=createNS("filter"),y=createNS("feColorMatrix");return p.setAttribute("id",e),y.setAttribute("type","matrix"),y.setAttribute("color-interpolation-filters","sRGB"),y.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),p.appendChild(y),o.appendChild(p),o.setAttribute("id",e+"_svg"),featureSupport.svgLumaHidden&&(o.style.display="none"),o}function a(){r||(s=n(),document.body.appendChild(s),r=createTag("canvas"),i=r.getContext("2d"),i.filter="url(#"+e+")",i.fillStyle="rgba(0,0,0,0)",i.fillRect(0,0,1,1))}function l(o){return r||a(),r.width=o.width,r.height=o.height,i.filter="url(#"+e+")",r}return{load:a,get:l}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader=function(){return{loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas}}(),registeredEffects={};function CVEffects(t){var e,r=t.data.ef?t.data.ef.length:0;this.filters=[];var i;for(e=0;e<r;e+=1){i=null;var s=t.data.ef[e].ty;if(registeredEffects[s]){var n=registeredEffects[s].effect;i=new n(t.effectsManager.effectElements[e],t)}i&&this.filters.push(i)}this.filters.length&&t.addRenderableComponent(this)}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var r,i=this.masksProperties.length,s=!1;for(r=0;r<i;r+=1)this.masksProperties[r].mode!=="n"&&(s=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=s,s&&this.element.addRenderableComponent(this)}CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t=this.element.finalTransform.mat,e=this.element.canvasContext,r,i=this.masksProperties.length,s,n,a;for(e.beginPath(),r=0;r<i;r+=1)if(this.masksProperties[r].mode!=="n"){this.masksProperties[r].inv&&(e.moveTo(0,0),e.lineTo(this.element.globalData.compSize.w,0),e.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),e.lineTo(0,this.element.globalData.compSize.h),e.lineTo(0,0)),a=this.viewData[r].v,s=t.applyToPointArray(a.v[0][0],a.v[0][1],0),e.moveTo(s[0],s[1]);var l,o=a._length;for(l=1;l<o;l+=1)n=t.applyToTriplePoints(a.o[l-1],a.i[l],a.v[l]),e.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);n=t.applyToTriplePoints(a.o[l-1],a.i[0],a.v[0]),e.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5])}this.element.globalData.renderer.save(!0),e.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};function CVBaseElement(){}var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var e=this.globalData.canvasContext,r=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(r);var i=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(i),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var e=this.globalData;if(e.blendMode!==this.data.bm){e.blendMode=this.data.bm;var r=getBlendMode(this.data.bm);e.canvasContext.globalCompositeOperation=r}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){!this.hidden&&(!this.isInRange||this.isTransparent)&&(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(e){e.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var e=this.buffers[0],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var e=this.buffers[1],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform);var i=this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1);if(i.renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var s=assetLoader.getLumaCanvas(this.canvasContext.canvas),n=s.getContext("2d");n.drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(s,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(e,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(e){if(!(this.hidden||this.data.hd)&&!(this.data.td===1&&!e)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var r=this.data.ty===0;this.prepareLayer(),this.globalData.renderer.save(r),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(r),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(t,e,r,i){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var s=4;e.ty==="rc"?s=5:e.ty==="el"?s=6:e.ty==="sr"&&(s=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,s,t);var n,a=r.length,l;for(n=0;n<a;n+=1)r[n].closed||(l={transforms:i.addTransformSequence(r[n].transforms),trNodes:[]},this.styledShapes.push(l),r[n].elements.push(l))}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:t.hd===!0},i={};if(t.ty==="fl"||t.ty==="st"?(i.c=PropertyFactory.getProp(this,t.c,1,255,this),i.c.k||(r.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")")):(t.ty==="gf"||t.ty==="gs")&&(i.s=PropertyFactory.getProp(this,t.s,1,null,this),i.e=PropertyFactory.getProp(this,t.e,1,null,this),i.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),i.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),i.g=new GradientProperty(this,t.g,this)),i.o=PropertyFactory.getProp(this,t.o,0,.01,this),t.ty==="st"||t.ty==="gs"){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],t.lj==1&&(r.ml=t.ml),i.w=PropertyFactory.getProp(this,t.w,0,null,this),i.w.k||(r.wi=i.w.v),t.d){var s=new DashProperty(this,t.d,"canvas",this);i.d=s,i.d.k||(r.da=i.d.dashArray,r.do=i.d.dashoffset[0])}}else r.r=t.r===2?"evenodd":"nonzero";return this.stylesList.push(r),i.style=r,i},CVShapeElement.prototype.createGroupElement=function(){var t={it:[],prevViewData:[]};return t},CVShapeElement.prototype.createTransformElement=function(t){var e={transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}};return e},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,i,s){var n,a=t.length-1,l,o,p=[],y=[],_,u,x,S=[].concat(s);for(n=a;n>=0;n-=1){if(_=this.searchProcessedElement(t[n]),_?e[n]=r[_-1]:t[n]._shouldRender=i,t[n].ty==="fl"||t[n].ty==="st"||t[n].ty==="gf"||t[n].ty==="gs")_?e[n].style.closed=!1:e[n]=this.createStyleElement(t[n],S),p.push(e[n].style);else if(t[n].ty==="gr"){if(!_)e[n]=this.createGroupElement(t[n]);else for(o=e[n].it.length,l=0;l<o;l+=1)e[n].prevViewData[l]=e[n].it[l];this.searchShapes(t[n].it,e[n].it,e[n].prevViewData,i,S)}else t[n].ty==="tr"?(_||(x=this.createTransformElement(t[n]),e[n]=x),S.push(e[n]),this.addTransformToStyleList(e[n])):t[n].ty==="sh"||t[n].ty==="rc"||t[n].ty==="el"||t[n].ty==="sr"?_||(e[n]=this.createShapeElement(t[n])):t[n].ty==="tm"||t[n].ty==="rd"||t[n].ty==="pb"||t[n].ty==="zz"||t[n].ty==="op"?(_?(u=e[n],u.closed=!1):(u=ShapeModifiers.getModifier(t[n].ty),u.init(this,t[n]),e[n]=u,this.shapeModifiers.push(u)),y.push(u)):t[n].ty==="rp"&&(_?(u=e[n],u.closed=!0):(u=ShapeModifiers.getModifier(t[n].ty),e[n]=u,u.init(this,t,n,e),this.shapeModifiers.push(u),i=!1),y.push(u));this.addProcessedElement(t[n],n+1)}for(this.removeTransformFromStyleList(),this.closeStyles(p),a=y.length,n=0;n<a;n+=1)y[n].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e=this.stylesList.length,r,i,s,n,a,l,o=this.globalData.renderer,p=this.globalData.canvasContext,y,_;for(t=0;t<e;t+=1)if(_=this.stylesList[t],y=_.type,!((y==="st"||y==="gs")&&_.wi===0||!_.data._shouldRender||_.coOp===0||this.globalData.currentGlobalAlpha===0)){for(o.save(),a=_.elements,y==="st"||y==="gs"?(o.ctxStrokeStyle(y==="st"?_.co:_.grd),o.ctxLineWidth(_.wi),o.ctxLineCap(_.lc),o.ctxLineJoin(_.lj),o.ctxMiterLimit(_.ml||0)):o.ctxFillStyle(y==="fl"?_.co:_.grd),o.ctxOpacity(_.coOp),y!=="st"&&y!=="gs"&&p.beginPath(),o.ctxTransform(_.preTransforms.finalTransform.props),i=a.length,r=0;r<i;r+=1){for((y==="st"||y==="gs")&&(p.beginPath(),_.da&&(p.setLineDash(_.da),p.lineDashOffset=_.do)),l=a[r].trNodes,n=l.length,s=0;s<n;s+=1)l[s].t==="m"?p.moveTo(l[s].p[0],l[s].p[1]):l[s].t==="c"?p.bezierCurveTo(l[s].pts[0],l[s].pts[1],l[s].pts[2],l[s].pts[3],l[s].pts[4],l[s].pts[5]):p.closePath();(y==="st"||y==="gs")&&(o.ctxStroke(),_.da&&p.setLineDash(this.dashResetter))}y!=="st"&&y!=="gs"&&this.globalData.renderer.ctxFill(_.r),o.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,i){var s,n=e.length-1,a;for(a=t,s=n;s>=0;s-=1)e[s].ty==="tr"?(a=r[s].transform,this.renderShapeTransform(t,a)):e[s].ty==="sh"||e[s].ty==="el"||e[s].ty==="rc"||e[s].ty==="sr"?this.renderPath(e[s],r[s]):e[s].ty==="fl"?this.renderFill(e[s],r[s],a):e[s].ty==="st"?this.renderStroke(e[s],r[s],a):e[s].ty==="gf"||e[s].ty==="gs"?this.renderGradientFill(e[s],r[s],a):e[s].ty==="gr"?this.renderShape(a,e[s].it,r[s].it):e[s].ty;i&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r=t.trNodes,i=e.paths,s,n,a,l=i._length;r.length=0;var o=t.transforms.finalTransform;for(a=0;a<l;a+=1){var p=i.shapes[a];if(p&&p.v){for(n=p._length,s=1;s<n;s+=1)s===1&&r.push({t:"m",p:o.applyToPointArray(p.v[0][0],p.v[0][1],0)}),r.push({t:"c",pts:o.applyToTriplePoints(p.o[s-1],p.i[s],p.v[s])});n===1&&r.push({t:"m",p:o.applyToPointArray(p.v[0][0],p.v[0][1],0)}),p.c&&n&&(r.push({t:"c",pts:o.applyToTriplePoints(p.o[s-1],p.i[0],p.v[0])}),r.push({t:"z"}))}}t.trNodes=r}},CVShapeElement.prototype.renderPath=function(t,e){if(t.hd!==!0&&t._shouldRender){var r,i=e.styledShapes.length;for(r=0;r<i;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var i=e.style;(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var i=e.style,s;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||t.t!==1&&(e.h._mdf||e.a._mdf)){var n=this.globalData.canvasContext,a=e.s.v,l=e.e.v;if(t.t===1)s=n.createLinearGradient(a[0],a[1],l[0],l[1]);else{var o=Math.sqrt(Math.pow(a[0]-l[0],2)+Math.pow(a[1]-l[1],2)),p=Math.atan2(l[1]-a[1],l[0]-a[0]),y=e.h.v;y>=1?y=.99:y<=-1&&(y=-.99);var _=o*y,u=Math.cos(p+e.a.v)*_+a[0],x=Math.sin(p+e.a.v)*_+a[1];s=n.createRadialGradient(u,x,0,a[0],a[1],o)}var S,g=t.g.p,k=e.g.c,c=1;for(S=0;S<g;S+=1)e.g._hasOpacity&&e.g._collapsable&&(c=e.g.o[S*2+1]),s.addColorStop(k[S*4]/100,"rgba("+k[S*4+1]+","+k[S*4+2]+","+k[S*4+3]+","+c+")");i.grd=s}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var i=e.style,s=e.d;s&&(s._mdf||this._isFirstFrame)&&(i.da=s.dashArray,i.do=s.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(i.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0};function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var i=this.globalData.fontManager.getFontByName(t.f),s,n,a=t.l,l=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,n=t.finalText.length;var o,p,y,_,u,x,S,g,k,c,b=this.data.singleShape,f=t.tr*.001*t.finalSize,P=0,A=0,M=!0,F=0;for(s=0;s<n;s+=1){o=this.globalData.fontManager.getCharData(t.finalText[s],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),p=o&&o.data||{},l.reset(),b&&a[s].n&&(P=-f,A+=t.yOffset,A+=M?1:0,M=!1),u=p.shapes?p.shapes[0].it:[],S=u.length,l.scale(t.finalSize/100,t.finalSize/100),b&&this.applyTextPropertiesToMatrix(t,l,a[s].line,P,A),k=createSizedArray(S-1);var L=0;for(x=0;x<S;x+=1)if(u[x].ty==="sh"){for(_=u[x].ks.k.i.length,g=u[x].ks.k,c=[],y=1;y<_;y+=1)y===1&&c.push(l.applyToX(g.v[0][0],g.v[0][1],0),l.applyToY(g.v[0][0],g.v[0][1],0)),c.push(l.applyToX(g.o[y-1][0],g.o[y-1][1],0),l.applyToY(g.o[y-1][0],g.o[y-1][1],0),l.applyToX(g.i[y][0],g.i[y][1],0),l.applyToY(g.i[y][0],g.i[y][1],0),l.applyToX(g.v[y][0],g.v[y][1],0),l.applyToY(g.v[y][0],g.v[y][1],0));c.push(l.applyToX(g.o[y-1][0],g.o[y-1][1],0),l.applyToY(g.o[y-1][0],g.o[y-1][1],0),l.applyToX(g.i[0][0],g.i[0][1],0),l.applyToY(g.i[0][0],g.i[0][1],0),l.applyToX(g.v[0][0],g.v[0][1],0),l.applyToY(g.v[0][0],g.v[0][1],0)),k[L]=c,L+=1}b&&(P+=a[s].l,P+=f),this.textSpans[F]?this.textSpans[F].elem=k:this.textSpans[F]={elem:k},F+=1}},CVTextElement.prototype.renderInnerContent=function(){this.validateText();var t=this.canvasContext;t.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var e,r,i,s,n,a,l=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;r=o.length;var p,y=null,_=null,u=null,x,S,g=this.globalData.renderer;for(e=0;e<r;e+=1)if(!o[e].n){if(p=l[e],p&&(g.save(),g.ctxTransform(p.p),g.ctxOpacity(p.o)),this.fill){for(p&&p.fc?y!==p.fc&&(g.ctxFillStyle(p.fc),y=p.fc):y!==this.values.fill&&(y=this.values.fill,g.ctxFillStyle(this.values.fill)),x=this.textSpans[e].elem,s=x.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(S=x[i],a=S.length,this.globalData.canvasContext.moveTo(S[0],S[1]),n=2;n<a;n+=6)this.globalData.canvasContext.bezierCurveTo(S[n],S[n+1],S[n+2],S[n+3],S[n+4],S[n+5]);this.globalData.canvasContext.closePath(),g.ctxFill()}if(this.stroke){for(p&&p.sw?u!==p.sw&&(u=p.sw,g.ctxLineWidth(p.sw)):u!==this.values.sWidth&&(u=this.values.sWidth,g.ctxLineWidth(this.values.sWidth)),p&&p.sc?_!==p.sc&&(_=p.sc,g.ctxStrokeStyle(p.sc)):_!==this.values.stroke&&(_=this.values.stroke,g.ctxStrokeStyle(this.values.stroke)),x=this.textSpans[e].elem,s=x.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(S=x[i],a=S.length,this.globalData.canvasContext.moveTo(S[0],S[1]),n=2;n<a;n+=6)this.globalData.canvasContext.bezierCurveTo(S[n],S[n+1],S[n+2],S[n+3],S[n+4],S[n+5]);this.globalData.canvasContext.closePath(),g.ctxStroke()}p&&this.globalData.renderer.restore()}};function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e=t.getContext("2d"),r=this.img.width,i=this.img.height,s=r/i,n=this.assetData.w/this.assetData.h,a,l,o=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>n&&o==="xMidYMid slice"||s<n&&o!=="xMidYMid slice"?(l=i,a=l*n):(a=r,l=a/n),e.drawImage(this.img,(r-a)/2,(i-l)/2,a,l,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null};function CVSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){t[0]===1&&t[1]===0&&t[4]===0&&t[5]===1&&t[12]===0&&t[13]===0||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,i){this.canvasContext.fillRect(t,e,r,i)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}this.contextData.reset()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){this.reset();var r,i;t?(r=t,i=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=i):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,i=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=i*this.renderConfig.dpr);var s,n;if(this.renderConfig.preserveAspectRatio.indexOf("meet")!==-1||this.renderConfig.preserveAspectRatio.indexOf("slice")!==-1){var a=this.renderConfig.preserveAspectRatio.split(" "),l=a[1]||"meet",o=a[0]||"xMidYMid",p=o.substr(0,4),y=o.substr(4);s=r/i,n=this.transformCanvas.w/this.transformCanvas.h,n>s&&l==="meet"||n<s&&l==="slice"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr)),p==="xMid"&&(n<s&&l==="meet"||n>s&&l==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))/2*this.renderConfig.dpr:p==="xMax"&&(n<s&&l==="meet"||n>s&&l==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))*this.renderConfig.dpr:this.transformCanvas.tx=0,y==="YMid"&&(n>s&&l==="meet"||n<s&&l==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:y==="YMax"&&(n>s&&l==="meet"||n<s&&l==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:this.transformCanvas.ty=0}else this.renderConfig.preserveAspectRatio==="none"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText="");var t,e=this.layers?this.layers.length:0;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if(!(this.renderedFrame===t&&this.renderConfig.clearCanvas===!0&&!e||this.destroyed||t===-1)){this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var r,i=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(this.renderConfig.clearCanvas===!0?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();this.renderConfig.clearCanvas!==!0&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"};function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){this.stack=[],this.cArrPos=0,this.cTr=new Matrix;var t,e=15;for(t=0;t<e;t+=1){var r=new CanvasContext;this.stack[t]=r}this._length=e,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}CVContextData.prototype.duplicate=function(){var t=this._length*2,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e=this.stack[this.cArrPos],r=e.transform,i,s=this.cTr.props;for(i=0;i<16;i+=1)s[i]=r[i];if(t){this.nativeContext.restore();var n=this.stack[this.cArrPos+1];this.appliedFillStyle=n.fillStyle,this.appliedStrokeStyle=n.strokeStyle,this.appliedLineWidth=n.lineWidth,this.appliedLineCap=n.lineCap,this.appliedLineJoin=n.lineJoin,this.appliedMiterLimit=n.miterLimit}this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),(t||e.opacity!==-1&&this.currentOpacity!==e.opacity)&&(this.nativeContext.globalAlpha=e.opacity,this.currentOpacity=e.opacity),this.currentFillStyle=e.fillStyle,this.currentStrokeStyle=e.strokeStyle,this.currentLineWidth=e.lineWidth,this.currentLineCap=e.lineCap,this.currentLineJoin=e.lineJoin,this.currentMiterLimit=e.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r=this.stack[this.cArrPos],i;for(i=0;i<16;i+=1)r.transform[i]=e[i];this.cArrPos+=1;var s=this.stack[this.cArrPos];s.opacity=r.opacity,s.fillStyle=r.fillStyle,s.strokeStyle=r.strokeStyle,s.lineWidth=r.lineWidth,s.lineCap=r.lineCap,s.lineJoin=r.lineJoin,s.miterLimit=r.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,i){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,i)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()};function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip();var e,r=this.layers.length;for(e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var t,e=this.layers.length;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:e&&e.clearCanvas!==void 0?e.clearCanvas:!0,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.bm!==0&&this.setBlendMode()},renderElement:function(){var e=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var r=this.finalTransform.mat.toCSS();e.transform=r,e.webkitTransform=r}this.finalTransform._opMdf&&(e.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?(t=createNS("rect"),t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(t=createTag("div"),t.style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)};function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r=t.sh.v,i=t.transformers,s,n=r._length,a,l,o,p;if(!(n<=1)){for(s=0;s<n-1;s+=1)a=this.getTransformedPoint(i,r.v[s]),l=this.getTransformedPoint(i,r.o[s]),o=this.getTransformedPoint(i,r.i[s+1]),p=this.getTransformedPoint(i,r.v[s+1]),this.checkBounds(a,l,o,p,e);r.c&&(a=this.getTransformedPoint(i,r.v[s]),l=this.getTransformedPoint(i,r.o[s]),o=this.getTransformedPoint(i,r.i[0]),p=this.getTransformedPoint(i,r.v[0]),this.checkBounds(a,l,o,p,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,i,s){this.getBoundsOfCurve(t,e,r,i);var n=this.shapeBoundingBox;s.x=bmMin(n.left,s.x),s.xMax=bmMax(n.right,s.xMax),s.y=bmMin(n.top,s.y),s.yMax=bmMax(n.bottom,s.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,i){for(var s=[[t[0],i[0]],[t[1],i[1]]],n,a,l,o,p,y,_,u=0;u<2;++u)a=6*t[u]-12*e[u]+6*r[u],n=-3*t[u]+9*e[u]-9*r[u]+3*i[u],l=3*e[u]-3*t[u],a|=0,n|=0,l|=0,n===0&&a===0||(n===0?(o=-l/a,o>0&&o<1&&s[u].push(this.calculateF(o,t,e,r,i,u))):(p=a*a-4*l*n,p>=0&&(y=(-a+bmSqrt(p))/(2*n),y>0&&y<1&&s[u].push(this.calculateF(y,t,e,r,i,u)),_=(-a-bmSqrt(p))/(2*n),_>0&&_<1&&s[u].push(this.calculateF(_,t,e,r,i,u)))));this.shapeBoundingBox.left=bmMin.apply(null,s[0]),this.shapeBoundingBox.top=bmMin.apply(null,s[1]),this.shapeBoundingBox.right=bmMax.apply(null,s[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,s[1])},HShapeElement.prototype.calculateF=function(t,e,r,i,s,n){return bmPow(1-t,3)*e[n]+3*bmPow(1-t,2)*t*r[n]+3*(1-t)*bmPow(t,2)*i[n]+bmPow(t,3)*s[n]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var i=0;i<t.keyframes.length;i+=1){var s=t.keyframes[i].s;s>r&&(r=s)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var i=this.shapeCont.style,s="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";i.transform=s,i.webkitTransform=s}}};function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var i=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{e.fontFamily=i.fFamily;var s=t.fWeight,n=t.fStyle;e.fontStyle=n,e.fontWeight=s}var a,l,o=t.l;l=o.length;var p,y,_,u=this.mHelper,x,S="",g=0;for(a=0;a<l;a+=1){if(this.globalData.fontManager.chars?(this.textPaths[g]?p=this.textPaths[g]:(p=createNS("path"),p.setAttribute("stroke-linecap",lineCapEnum[1]),p.setAttribute("stroke-linejoin",lineJoinEnum[2]),p.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[g]?(y=this.textSpans[g],_=y.children[0]):(y=createTag("div"),y.style.lineHeight=0,_=createNS("svg"),_.appendChild(p),styleDiv(y)))):this.isMasked?p=this.textPaths[g]?this.textPaths[g]:createNS("text"):this.textSpans[g]?(y=this.textSpans[g],p=this.textPaths[g]):(y=createTag("span"),styleDiv(y),p=createTag("span"),styleDiv(p),y.appendChild(p)),this.globalData.fontManager.chars){var k=this.globalData.fontManager.getCharData(t.finalText[a],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),c;if(k?c=k.data:c=null,u.reset(),c&&c.shapes&&c.shapes.length&&(x=c.shapes[0].it,u.scale(t.finalSize/100,t.finalSize/100),S=this.createPathShape(u,x),p.setAttribute("d",S)),this.isMasked)this.innerElem.appendChild(p);else{if(this.innerElem.appendChild(y),c&&c.shapes){document.body.appendChild(_);var b=_.getBBox();_.setAttribute("width",b.width+2),_.setAttribute("height",b.height+2),_.setAttribute("viewBox",b.x-1+" "+(b.y-1)+" "+(b.width+2)+" "+(b.height+2));var f=_.style,P="translate("+(b.x-1)+"px,"+(b.y-1)+"px)";f.transform=P,f.webkitTransform=P,o[a].yOffset=b.y-1}else _.setAttribute("width",1),_.setAttribute("height",1);y.appendChild(_)}}else if(p.textContent=o[a].val,p.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(p);else{this.innerElem.appendChild(y);var A=p.style,M="translate3d(0,"+-t.finalSize/1.2+"px,0)";A.transform=M,A.webkitTransform=M}this.isMasked?this.textSpans[g]=p:this.textSpans[g]=y,this.textSpans[g].style.display="block",this.textPaths[g]=p,g+=1}for(;g<this.textSpans.length;)this.textSpans[g].style.display="none",g+=1},HTextElement.prototype.renderInnerContent=function(){this.validateText();var t;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),!(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag)){var r,i,s=0,n=this.textAnimator.renderedLetters,a=this.textProperty.currentData.l;i=a.length;var l,o,p;for(r=0;r<i;r+=1)a[r].n?s+=1:(o=this.textSpans[r],p=this.textPaths[r],l=n[s],s+=1,l._mdf.m&&(this.isMasked?o.setAttribute("transform",l.m):(o.style.webkitTransform=l.m,o.style.transform=l.m)),o.style.opacity=l.o,l.sw&&l._mdf.sw&&p.setAttribute("stroke-width",l.sw),l.sc&&l._mdf.sc&&p.setAttribute("stroke",l.sc),l.fc&&l._mdf.fc&&(p.setAttribute("fill",l.fc),p.style.color=l.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var y=this.innerElem.getBBox();this.currentBBox.w!==y.width&&(this.currentBBox.w=y.width,this.svgElement.setAttribute("width",y.width)),this.currentBBox.h!==y.height&&(this.currentBBox.h=y.height,this.svgElement.setAttribute("height",y.height));var _=1;if(this.currentBBox.w!==y.width+_*2||this.currentBBox.h!==y.height+_*2||this.currentBBox.x!==y.x-_||this.currentBBox.y!==y.y-_){this.currentBBox.w=y.width+_*2,this.currentBBox.h=y.height+_*2,this.currentBBox.x=y.x-_,this.currentBBox.y=y.y-_,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var u="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=u,t.webkitTransform=u}}}};function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var i=PropertyFactory.getProp;if(this.pe=i(this,t.pe,0,0,this),t.ks.p.s?(this.px=i(this,t.ks.p.x,1,0,this),this.py=i(this,t.ks.p.y,1,0,this),this.pz=i(this,t.ks.p.z,1,0,this)):this.p=i(this,t.ks.p,1,0,this),t.ks.a&&(this.a=i(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var s,n=t.ks.or.k.length;for(s=0;s<n;s+=1)t.ks.or.k[s].to=null,t.ks.or.k[s].ti=null}this.or=i(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=i(this,t.ks.rx,0,degToRads,this),this.ry=i(this,t.ks.ry,0,degToRads,this),this.rz=i(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e=this.comp.threeDElements.length,r,i,s;for(t=0;t<e;t+=1)if(r=this.comp.threeDElements[t],r.type==="3d"){i=r.perspectiveElem.style,s=r.container.style;var n=this.pe.v+"px",a="0px 0px 0px",l="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";i.perspective=n,i.webkitPerspective=n,s.transformOrigin=a,s.mozTransformOrigin=a,s.webkitTransformOrigin=a,i.transform=l,i.webkitTransform=l}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t=this._isFirstFrame,e,r;if(this.hierarchy)for(r=this.hierarchy.length,e=0;e<r;e+=1)t=this.hierarchy[e].finalTransform.mProp._mdf||t;if(t||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(r=this.hierarchy.length-1,e=r;e>=0;e-=1){var i=this.hierarchy[e].finalTransform.mProp;this.mat.translate(-i.p.v[0],-i.p.v[1],i.p.v[2]),this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]),this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v),this.mat.scale(1/i.s.v[0],1/i.s.v[1],1/i.s.v[2]),this.mat.translate(i.a.v[0],i.a.v[1],i.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var s;this.p?s=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:s=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var n=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)+Math.pow(s[2],2)),a=[s[0]/n,s[1]/n,s[2]/n],l=Math.sqrt(a[2]*a[2]+a[0]*a[0]),o=Math.atan2(a[1],l),p=Math.atan2(a[0],-a[2]);this.mat.rotateY(p).rotateX(-o)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var y=!this._prevMat.equals(this.mat);if((y||this.pe._mdf)&&this.comp.threeDElements){r=this.comp.threeDElements.length;var _,u,x;for(e=0;e<r;e+=1)if(_=this.comp.threeDElements[e],_.type==="3d"){if(y){var S=this.mat.toCSS();x=_.container.style,x.transform=S,x.webkitTransform=S}this.pe._mdf&&(u=_.perspectiveElem.style,u.perspective=this.pe.v+"px",u.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null};function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)};function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var i=this.layers[e];if(!i.ddd||!this.supports3d)if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var s=0,n,a,l;s<e;)this.elements[s]&&this.elements[s]!==!0&&this.elements[s].getBaseElement&&(a=this.elements[s],l=this.layers[s].ddd?this.getThreeDContainerByPos(s):a.getBaseElement(),n=l||n),s+=1;n?(!i.ddd||!this.supports3d)&&this.layerElement.insertBefore(r,n):(!i.ddd||!this.supports3d)&&this.layerElement.appendChild(r)}else this.addTo3dContainer(r,e)}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r=createTag("div"),i,s;styleDiv(r);var n=createTag("div");if(styleDiv(n),e==="3d"){i=r.style,i.width=this.globalData.compSize.w+"px",i.height=this.globalData.compSize.h+"px";var a="50% 50%";i.webkitTransformOrigin=a,i.mozTransformOrigin=a,i.transformOrigin=a,s=n.style;var l="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";s.transform=l,s.webkitTransform=l}r.appendChild(n);var o={container:n,perspectiveElem:r,startPos:t,endPos:t,type:e};return this.threeDElements.push(o),o},HybridRendererBase.prototype.build3dContainers=function(){var t,e=this.layers.length,r,i="";for(t=0;t<e;t+=1)this.layers[t].ddd&&this.layers[t].ty!==3?(i!=="3d"&&(i="3d",r=this.createThreeDContainer(t,"3d")),r.endPos=Math.max(r.endPos,t)):(i!=="2d"&&(i="2d",r=this.createThreeDContainer(t,"2d")),r.endPos=Math.max(r.endPos,t));for(e=this.threeDElements.length,t=e-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,i=this.threeDElements.length;r<i;){if(e<=this.threeDElements[r].endPos){for(var s=this.threeDElements[r].startPos,n;s<e;)this.elements[s]&&this.elements[s].getBaseElement&&(n=this.elements[s].getBaseElement()),s+=1;n?this.threeDElements[r].container.insertBefore(t,n):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,i=e.style;i.width=t.w+"px",i.height=t.h+"px",this.resizerElem=e,styleDiv(e),i.transformStyle="flat",i.mozTransformStyle="flat",i.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),i.overflow="hidden";var s=createNS("svg");s.setAttribute("width","1"),s.setAttribute("height","1"),styleDiv(s),this.resizerElem.appendChild(s);var n=createNS("defs");s.appendChild(n),this.data=t,this.setupGlobalData(t,s),this.globalData.defs=n,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,r=t/e,i=this.globalData.compSize.w/this.globalData.compSize.h,s,n,a,l;i>r?(s=t/this.globalData.compSize.w,n=t/this.globalData.compSize.w,a=0,l=(e-this.globalData.compSize.h*(t/this.globalData.compSize.w))/2):(s=e/this.globalData.compSize.h,n=e/this.globalData.compSize.h,a=(t-this.globalData.compSize.w*(e/this.globalData.compSize.h))/2,l=0);var o=this.resizerElem.style;o.webkitTransform="matrix3d("+s+",0,0,0,0,"+n+",0,0,0,0,1,0,"+a+","+l+",0,1)",o.transform=o.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t=this.globalData.compSize.w,e=this.globalData.compSize.h,r,i=this.threeDElements.length;for(r=0;r<i;r+=1){var s=this.threeDElements[r].perspectiveElem.style;s.webkitPerspective=Math.sqrt(Math.pow(t,2)+Math.pow(e,2))+"px",s.perspective=s.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,i=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var s=this.createComp(t[e],i,this.globalData.comp,null);s.initExpressions(),this.globalData.projectInterface.registerComposition(s)}};function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r=0,i;r<e;)this.elements[r]&&this.elements[r].getBaseElement&&(i=this.elements[r].getBaseElement()),r+=1;i?this.layerElement.insertBefore(t,i):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(){return function(t){function e(r){for(var i=0,s=t.layers.length;i<s;){if(t.layers[i].nm===r||t.layers[i].ind===r)return t.elements[i].layerInterface;i+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e}}();function _typeof$2(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$2=function(r){return typeof r}:_typeof$2=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$2(t)}function seedRandom(t,e){var r=this,i=256,s=6,n=52,a="random",l=e.pow(i,s),o=e.pow(2,n),p=o*2,y=i-1,_;function u(f,P,A){var M=[];P=P===!0?{entropy:!0}:P||{};var F=k(g(P.entropy?[f,b(t)]:f===null?c():f,3),M),L=new x(M),O=function(){for(var H=L.g(s),z=l,q=0;H<o;)H=(H+q)*i,z*=i,q=L.g(1);for(;H>=p;)H/=2,z/=2,q>>>=1;return(H+q)/z};return O.int32=function(){return L.g(4)|0},O.quick=function(){return L.g(4)/4294967296},O.double=O,k(b(L.S),t),(P.pass||A||function(W,H,z,q){return q&&(q.S&&S(q,L),W.state=function(){return S(L,{})}),z?(e[a]=W,H):W})(O,F,"global"in P?P.global:this==e,P.state)}e["seed"+a]=u;function x(f){var P,A=f.length,M=this,F=0,L=M.i=M.j=0,O=M.S=[];for(A||(f=[A++]);F<i;)O[F]=F++;for(F=0;F<i;F++)O[F]=O[L=y&L+f[F%A]+(P=O[F])],O[L]=P;M.g=function(W){for(var H,z=0,q=M.i,D=M.j,I=M.S;W--;)H=I[q=y&q+1],z=z*i+I[y&(I[q]=I[D=y&D+H])+(I[D]=H)];return M.i=q,M.j=D,z}}function S(f,P){return P.i=f.i,P.j=f.j,P.S=f.S.slice(),P}function g(f,P){var A=[],M=_typeof$2(f),F;if(P&&M=="object")for(F in f)try{A.push(g(f[F],P-1))}catch{}return A.length?A:M=="string"?f:f+"\0"}function k(f,P){for(var A=f+"",M,F=0;F<A.length;)P[y&F]=y&(M^=P[y&F]*19)+A.charCodeAt(F++);return b(P)}function c(){try{var f=new Uint8Array(i);return(r.crypto||r.msCrypto).getRandomValues(f),b(f)}catch{var P=r.navigator,A=P&&P.plugins;return[+new Date,r,A,r.screen,b(t)]}}function b(f){return String.fromCharCode.apply(0,f)}k(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$1=function(r){return typeof r}:_typeof$1=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return t==="number"||e instanceof Number||t==="boolean"||t==="string"}function $bm_neg(t){var e=_typeof$1(t);if(e==="number"||t instanceof Number||e==="boolean")return-t;if($bm_isInstanceOfArray(t)){var r,i=t.length,s=[];for(r=0;r<i;r+=1)s[r]=-t[r];return s}return t.propType?t.v:-t}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e)||r==="string"||i==="string")return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,n=t.length,a=e.length,l=[];s<n||s<a;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?l[s]=t[s]+e[s]:l[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return l}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e))return r==="string"&&(t=parseInt(t,10)),i==="string"&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,n=t.length,a=e.length,l=[];s<n||s<a;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?l[s]=t[s]-e[s]:l[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return l}return 0}function mul(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t*e;var n,a;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(a=t.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t[n]*e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(a=e.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t*e[n];return s}return 0}function div(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t/e;var n,a;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(a=t.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t[n]/e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(a=e.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t/e[n];return s}return 0}function mod(t,e){return typeof t=="string"&&(t=parseInt(t,10)),typeof e=="string"&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var i=r;r=e,e=i}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if(typeof t=="number"||t instanceof Number)return e=e||0,Math.abs(t-e);e||(e=helperLengthArray);var r,i=Math.min(t.length,e.length),s=0;for(r=0;r<i;r+=1)s+=Math.pow(e[r]-t[r],2);return Math.sqrt(s)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e=t[0],r=t[1],i=t[2],s=Math.max(e,r,i),n=Math.min(e,r,i),a,l,o=(s+n)/2;if(s===n)a=0,l=0;else{var p=s-n;switch(l=o>.5?p/(2-s-n):p/(s+n),s){case e:a=(r-i)/p+(r<i?6:0);break;case r:a=(i-e)/p+2;break;case i:a=(e-r)/p+4;break}a/=6}return[a,l,o,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+(e-t)*6*r:r<1/2?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e=t[0],r=t[1],i=t[2],s,n,a;if(r===0)s=i,a=i,n=i;else{var l=i<.5?i*(1+r):i+r-i*r,o=2*i-l;s=hue2rgb(o,l,e+1/3),n=hue2rgb(o,l,e),a=hue2rgb(o,l,e-1/3)}return[s,n,a,t[3]]}function linear(t,e,r,i,s){if((i===void 0||s===void 0)&&(i=e,s=r,e=0,r=1),r<e){var n=r;r=e,e=n}if(t<=e)return i;if(t>=r)return s;var a=r===e?0:(t-e)/(r-e);if(!i.length)return i+(s-i)*a;var l,o=i.length,p=createTypedArray("float32",o);for(l=0;l<o;l+=1)p[l]=i[l]+(s[l]-i[l])*a;return p}function random(t,e){if(e===void 0&&(t===void 0?(t=0,e=1):(e=t,t=void 0)),e.length){var r,i=e.length;t||(t=createTypedArray("float32",i));var s=createTypedArray("float32",i),n=BMMath.random();for(r=0;r<i;r+=1)s[r]=t[r]+n*(e[r]-t[r]);return s}t===void 0&&(t=0);var a=BMMath.random();return t+a*(e-t)}function createPath(t,e,r,i){var s,n=t.length,a=shapePool.newElement();a.setPathData(!!i,n);var l=[0,0],o,p;for(s=0;s<n;s+=1)o=e&&e[s]?e[s]:l,p=r&&r[s]?r[s]:l,a.setTripleAt(t[s][0],t[s][1],p[0]+t[s][0],p[1]+t[s][1],o[0]+t[s][0],o[1]+t[s][1],s,!0);return a}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=val.indexOf("random")!==-1,elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||this.data.hd!==!0,wiggle=(function t(e,r){var i,s,n=this.pv.length?this.pv.length:1,a=createTypedArray("float32",n);e=5;var l=Math.floor(time*e);for(i=0,s=0;i<l;){for(s=0;s<n;s+=1)a[s]+=-r+r*2*BMMath.random();i+=1}var o=time*e,p=o-Math.floor(o),y=createTypedArray("float32",n);if(n>1){for(s=0;s<n;s+=1)y[s]=this.pv[s]+a[s]+(-r+r*2*BMMath.random())*p;return y}return this.pv+a[0]+(-r+r*2*BMMath.random())*p}).bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty));function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],i=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads,s=-Math.atan2(r[1],r[2])/degToRads;return[s,i,0]}function easeOut(t,e,r,i,s){return applyEase(easeOutBez,t,e,r,i,s)}function easeIn(t,e,r,i,s){return applyEase(easeInBez,t,e,r,i,s)}function ease(t,e,r,i,s){return applyEase(easeInOutBez,t,e,r,i,s)}function applyEase(t,e,r,i,s,n){s===void 0?(s=r,n=i):e=(e-r)/(i-r),e>1?e=1:e<0&&(e=0);var a=t(e);if($bm_isInstanceOfArray(s)){var l,o=s.length,p=createTypedArray("float32",o);for(l=0;l<o;l+=1)p[l]=(n[l]-s[l])*a+s[l];return p}return(n-s)*a+s}function nearestKey(t){var e,r=data.k.length,i,s;if(!data.k.length||typeof data.k[0]=="number")i=0,s=0;else if(i=-1,t*=elem.comp.globalData.frameRate,t<data.k[0].t)i=1,s=data.k[0].t;else{for(e=0;e<r-1;e+=1)if(t===data.k[e].t){i=e+1,s=data.k[e].t;break}else if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(i=e+2,s=data.k[e+1].t):(i=e+1,s=data.k[e].t);break}i===-1&&(i=e+1,s=data.k[e].t)}var n={};return n.index=i,n.time=s/elem.comp.globalData.frameRate,n}function key(t){var e,r,i;if(!data.k.length||typeof data.k[0]=="number")throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var s=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(i=s.length,r=0;r<i;r+=1)e[r]=s[r],e.value[r]=s[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return!t&&t!==0&&(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return typeof value=="string"?e===void 0?value.substring(t):value.substring(t,e):""}function substr(t,e){return typeof value=="string"?e===void 0?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=t===0?0:Math.floor(time*t)/t,value=valueAtTime(time)}var time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!!(elem.hierarchy&&elem.hierarchy.length),parent,randSeed=Math.floor(Math.random()*1e6),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&this.propType!=="textSelector"?value:(this.propType==="textSelector"&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),elemType===4&&!content&&(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!!(elem.hierarchy&&elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt,scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={};t.initExpressions=e,t.resetFrame=ExpressionManager.resetFrame;function e(r){var i=0,s=[];function n(){i+=1}function a(){i-=1,i===0&&o()}function l(p){s.indexOf(p)===-1&&s.push(p)}function o(){var p,y=s.length;for(p=0;p<y;p+=1)s[p].release();s.length=0}r.renderer.compInterface=CompExpressionInterface(r.renderer),r.renderer.globalData.projectInterface.registerComposition(r.renderer),r.renderer.globalData.pushExpression=n,r.renderer.globalData.popExpression=a,r.renderer.globalData.registerExpressionProperty=l}return t}(),MaskManagerInterface=function(){function t(r,i){this._mask=r,this._data=i}Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),this._mask.op.v*100}});var e=function(i){var s=createSizedArray(i.viewData.length),n,a=i.viewData.length;for(n=0;n<a;n+=1)s[n]=new t(i.viewData[n],i.masksProperties[n]);var l=function(p){for(n=0;n<a;){if(i.masksProperties[n].nm===p)return s[n];n+=1}return null};return l};return e}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(a,l,o){Object.defineProperty(a,"velocity",{get:function(){return l.getVelocityAtTime(l.comp.currentFrame)}}),a.numKeys=l.keyframes?l.keyframes.length:0,a.key=function(p){if(!a.numKeys)return 0;var y="";"s"in l.keyframes[p-1]?y=l.keyframes[p-1].s:"e"in l.keyframes[p-2]?y=l.keyframes[p-2].e:y=l.keyframes[p-2].s;var _=o==="unidimensional"?new Number(y):Object.assign({},y);return _.time=l.keyframes[p-1].t/l.elem.comp.globalData.frameRate,_.value=o==="unidimensional"?y[0]:y,_},a.valueAtTime=l.getValueAtTime,a.speedAtTime=l.getSpeedAtTime,a.velocityAtTime=l.getVelocityAtTime,a.propertyGroup=l.propertyGroup}function i(a){(!a||!("pv"in a))&&(a=t);var l=1/a.mult,o=a.pv*l,p=new Number(o);return p.value=o,r(p,a,"unidimensional"),function(){return a.k&&a.getValue(),o=a.v*l,p.value!==o&&(p=new Number(o),p.value=o,r(p,a,"unidimensional")),p}}function s(a){(!a||!("pv"in a))&&(a=e);var l=1/a.mult,o=a.data&&a.data.l||a.pv.length,p=createTypedArray("float32",o),y=createTypedArray("float32",o);return p.value=y,r(p,a,"multidimensional"),function(){a.k&&a.getValue();for(var _=0;_<o;_+=1)y[_]=a.v[_]*l,p[_]=y[_];return p}}function n(){return t}return function(a){return a?a.propType==="unidimensional"?i(a):s(a):n}}(),TransformExpressionInterface=function(){return function(t){function e(a){switch(a){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)});var r,i,s,n;return t.p?n=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),i=ExpressionPropertyInterface(t.py),t.pz&&(s=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?n():[r(),i(),s?s():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e}}(),LayerExpressionInterface=function(){function t(p){var y=new Matrix;if(p!==void 0){var _=this._elem.finalTransform.mProp.getValueAtTime(p);_.clone(y)}else{var u=this._elem.finalTransform.mProp;u.applyToMatrix(y)}return y}function e(p,y){var _=this.getMatrix(y);return _.props[12]=0,_.props[13]=0,_.props[14]=0,this.applyPoint(_,p)}function r(p,y){var _=this.getMatrix(y);return this.applyPoint(_,p)}function i(p,y){var _=this.getMatrix(y);return _.props[12]=0,_.props[13]=0,_.props[14]=0,this.invertPoint(_,p)}function s(p,y){var _=this.getMatrix(y);return this.invertPoint(_,p)}function n(p,y){if(this._elem.hierarchy&&this._elem.hierarchy.length){var _,u=this._elem.hierarchy.length;for(_=0;_<u;_+=1)this._elem.hierarchy[_].finalTransform.mProp.applyToMatrix(p)}return p.applyToPointArray(y[0],y[1],y[2]||0)}function a(p,y){if(this._elem.hierarchy&&this._elem.hierarchy.length){var _,u=this._elem.hierarchy.length;for(_=0;_<u;_+=1)this._elem.hierarchy[_].finalTransform.mProp.applyToMatrix(p)}return p.inversePoint(y)}function l(p){var y=new Matrix;if(y.reset(),this._elem.finalTransform.mProp.applyToMatrix(y),this._elem.hierarchy&&this._elem.hierarchy.length){var _,u=this._elem.hierarchy.length;for(_=0;_<u;_+=1)this._elem.hierarchy[_].finalTransform.mProp.applyToMatrix(y);return y.inversePoint(p)}return y.inversePoint(p)}function o(){return[1,1,1,1]}return function(p){var y;function _(g){x.mask=new MaskManagerInterface(g,p)}function u(g){x.effect=g}function x(g){switch(g){case"ADBE Root Vectors Group":case"Contents":case 2:return x.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return y;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return x.effect;case"ADBE Text Properties":return x.textInterface;default:return null}}x.getMatrix=t,x.invertPoint=a,x.applyPoint=n,x.toWorld=r,x.toWorldVec=e,x.fromWorld=s,x.fromWorldVec=i,x.toComp=r,x.fromComp=l,x.sampleImage=o,x.sourceRectAtTime=p.sourceRectAtTime.bind(p),x._elem=p,y=TransformExpressionInterface(p.finalTransform.mProp);var S=getDescriptor(y,"anchorPoint");return Object.defineProperties(x,{hasParent:{get:function(){return p.hierarchy.length}},parent:{get:function(){return p.hierarchy[0].layerInterface}},rotation:getDescriptor(y,"rotation"),scale:getDescriptor(y,"scale"),position:getDescriptor(y,"position"),opacity:getDescriptor(y,"opacity"),anchorPoint:S,anchor_point:S,transform:{get:function(){return y}},active:{get:function(){return p.isInRange}}}),x.startTime=p.data.st,x.index=p.data.ind,x.source=p.data.refId,x.height=p.data.ty===0?p.data.h:100,x.width=p.data.ty===0?p.data.w:100,x.inPoint=p.data.ip/p.comp.globalData.frameRate,x.outPoint=p.data.op/p.comp.globalData.frameRate,x._name=p.data.nm,x.registerMaskInterface=_,x.registerEffectsInterface=u,x}}(),propertyGroupFactory=function(){return function(t,e){return function(r){return r=r===void 0?1:r,r<=0?t:e(r-1)}}}(),PropertyInterface=function(){return function(t,e){var r={_name:t};function i(s){return s=s===void 0?1:s,s<=0?r:e(s-1)}return i}}(),EffectsExpressionInterface=function(){var t={createEffectsInterface:e};function e(s,n){if(s.effectsManager){var a=[],l=s.data.ef,o,p=s.effectsManager.effectElements.length;for(o=0;o<p;o+=1)a.push(r(l[o],s.effectsManager.effectElements[o],n,s));var y=s.data.ef||[],_=function(x){for(o=0,p=y.length;o<p;){if(x===y[o].nm||x===y[o].mn||x===y[o].ix)return a[o];o+=1}return null};return Object.defineProperty(_,"numProperties",{get:function(){return y.length}}),_}return null}function r(s,n,a,l){function o(x){for(var S=s.ef,g=0,k=S.length;g<k;){if(x===S[g].nm||x===S[g].mn||x===S[g].ix)return S[g].ty===5?y[g]:y[g]();g+=1}throw new Error}var p=propertyGroupFactory(o,a),y=[],_,u=s.ef.length;for(_=0;_<u;_+=1)s.ef[_].ty===5?y.push(r(s.ef[_],n.effectElements[_],n.effectElements[_].propertyGroup,l)):y.push(i(n.effectElements[_],s.ef[_].ty,l,p));return s.mn==="ADBE Color Control"&&Object.defineProperty(o,"color",{get:function(){return y[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return s.np}},_name:{value:s.nm},propertyGroup:{value:p}}),o.enabled=s.en!==0,o.active=o.enabled,o}function i(s,n,a,l){var o=ExpressionPropertyInterface(s.p);function p(){return n===10?a.comp.compInterface(s.p.v):o()}return s.p.setGroupProperty&&s.p.setGroupProperty(PropertyInterface("",l)),p}return t}(),ShapePathInterface=function(){return function(e,r,i){var s=r.sh;function n(l){return l==="Shape"||l==="shape"||l==="Path"||l==="path"||l==="ADBE Vector Shape"||l===2?n.path:null}var a=propertyGroupFactory(n,i);return s.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(n,{path:{get:function(){return s.k&&s.getValue(),s}},shape:{get:function(){return s.k&&s.getValue(),s}},_name:{value:e.nm},ix:{value:e.ix},propertyIndex:{value:e.ix},mn:{value:e.mn},propertyGroup:{value:i}}),n}}(),ShapeExpressionInterface=function(){function t(S,g,k){var c=[],b,f=S?S.length:0;for(b=0;b<f;b+=1)S[b].ty==="gr"?c.push(r(S[b],g[b],k)):S[b].ty==="fl"?c.push(i(S[b],g[b],k)):S[b].ty==="st"?c.push(a(S[b],g[b],k)):S[b].ty==="tm"?c.push(l(S[b],g[b],k)):S[b].ty==="tr"||(S[b].ty==="el"?c.push(p(S[b],g[b],k)):S[b].ty==="sr"?c.push(y(S[b],g[b],k)):S[b].ty==="sh"?c.push(ShapePathInterface(S[b],g[b],k)):S[b].ty==="rc"?c.push(_(S[b],g[b],k)):S[b].ty==="rd"?c.push(u(S[b],g[b],k)):S[b].ty==="rp"?c.push(x(S[b],g[b],k)):S[b].ty==="gf"?c.push(s(S[b],g[b],k)):c.push(n(S[b],g[b])));return c}function e(S,g,k){var c,b=function(A){for(var M=0,F=c.length;M<F;){if(c[M]._name===A||c[M].mn===A||c[M].propertyIndex===A||c[M].ix===A||c[M].ind===A)return c[M];M+=1}return typeof A=="number"?c[A-1]:null};b.propertyGroup=propertyGroupFactory(b,k),c=t(S.it,g.it,b.propertyGroup),b.numProperties=c.length;var f=o(S.it[S.it.length-1],g.it[g.it.length-1],b.propertyGroup);return b.transform=f,b.propertyIndex=S.cix,b._name=S.nm,b}function r(S,g,k){var c=function(A){switch(A){case"ADBE Vectors Group":case"Contents":case 2:return c.content;default:return c.transform}};c.propertyGroup=propertyGroupFactory(c,k);var b=e(S,g,c.propertyGroup),f=o(S.it[S.it.length-1],g.it[g.it.length-1],c.propertyGroup);return c.content=b,c.transform=f,Object.defineProperty(c,"_name",{get:function(){return S.nm}}),c.numProperties=S.np,c.propertyIndex=S.ix,c.nm=S.nm,c.mn=S.mn,c}function i(S,g,k){function c(b){return b==="Color"||b==="color"?c.color:b==="Opacity"||b==="opacity"?c.opacity:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(g.c)},opacity:{get:ExpressionPropertyInterface(g.o)},_name:{value:S.nm},mn:{value:S.mn}}),g.c.setGroupProperty(PropertyInterface("Color",k)),g.o.setGroupProperty(PropertyInterface("Opacity",k)),c}function s(S,g,k){function c(b){return b==="Start Point"||b==="start point"?c.startPoint:b==="End Point"||b==="end point"?c.endPoint:b==="Opacity"||b==="opacity"?c.opacity:null}return Object.defineProperties(c,{startPoint:{get:ExpressionPropertyInterface(g.s)},endPoint:{get:ExpressionPropertyInterface(g.e)},opacity:{get:ExpressionPropertyInterface(g.o)},type:{get:function(){return"a"}},_name:{value:S.nm},mn:{value:S.mn}}),g.s.setGroupProperty(PropertyInterface("Start Point",k)),g.e.setGroupProperty(PropertyInterface("End Point",k)),g.o.setGroupProperty(PropertyInterface("Opacity",k)),c}function n(){function S(){return null}return S}function a(S,g,k){var c=propertyGroupFactory(F,k),b=propertyGroupFactory(M,c);function f(L){Object.defineProperty(M,S.d[L].nm,{get:ExpressionPropertyInterface(g.d.dataProps[L].p)})}var P,A=S.d?S.d.length:0,M={};for(P=0;P<A;P+=1)f(P),g.d.dataProps[P].p.setGroupProperty(b);function F(L){return L==="Color"||L==="color"?F.color:L==="Opacity"||L==="opacity"?F.opacity:L==="Stroke Width"||L==="stroke width"?F.strokeWidth:null}return Object.defineProperties(F,{color:{get:ExpressionPropertyInterface(g.c)},opacity:{get:ExpressionPropertyInterface(g.o)},strokeWidth:{get:ExpressionPropertyInterface(g.w)},dash:{get:function(){return M}},_name:{value:S.nm},mn:{value:S.mn}}),g.c.setGroupProperty(PropertyInterface("Color",c)),g.o.setGroupProperty(PropertyInterface("Opacity",c)),g.w.setGroupProperty(PropertyInterface("Stroke Width",c)),F}function l(S,g,k){function c(f){return f===S.e.ix||f==="End"||f==="end"?c.end:f===S.s.ix?c.start:f===S.o.ix?c.offset:null}var b=propertyGroupFactory(c,k);return c.propertyIndex=S.ix,g.s.setGroupProperty(PropertyInterface("Start",b)),g.e.setGroupProperty(PropertyInterface("End",b)),g.o.setGroupProperty(PropertyInterface("Offset",b)),c.propertyIndex=S.ix,c.propertyGroup=k,Object.defineProperties(c,{start:{get:ExpressionPropertyInterface(g.s)},end:{get:ExpressionPropertyInterface(g.e)},offset:{get:ExpressionPropertyInterface(g.o)},_name:{value:S.nm}}),c.mn=S.mn,c}function o(S,g,k){function c(f){return S.a.ix===f||f==="Anchor Point"?c.anchorPoint:S.o.ix===f||f==="Opacity"?c.opacity:S.p.ix===f||f==="Position"?c.position:S.r.ix===f||f==="Rotation"||f==="ADBE Vector Rotation"?c.rotation:S.s.ix===f||f==="Scale"?c.scale:S.sk&&S.sk.ix===f||f==="Skew"?c.skew:S.sa&&S.sa.ix===f||f==="Skew Axis"?c.skewAxis:null}var b=propertyGroupFactory(c,k);return g.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",b)),g.transform.mProps.p.setGroupProperty(PropertyInterface("Position",b)),g.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",b)),g.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",b)),g.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",b)),g.transform.mProps.sk&&(g.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",b)),g.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",b))),g.transform.op.setGroupProperty(PropertyInterface("Opacity",b)),Object.defineProperties(c,{opacity:{get:ExpressionPropertyInterface(g.transform.mProps.o)},position:{get:ExpressionPropertyInterface(g.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(g.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(g.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(g.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(g.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(g.transform.mProps.sa)},_name:{value:S.nm}}),c.ty="tr",c.mn=S.mn,c.propertyGroup=k,c}function p(S,g,k){function c(P){return S.p.ix===P?c.position:S.s.ix===P?c.size:null}var b=propertyGroupFactory(c,k);c.propertyIndex=S.ix;var f=g.sh.ty==="tm"?g.sh.prop:g.sh;return f.s.setGroupProperty(PropertyInterface("Size",b)),f.p.setGroupProperty(PropertyInterface("Position",b)),Object.defineProperties(c,{size:{get:ExpressionPropertyInterface(f.s)},position:{get:ExpressionPropertyInterface(f.p)},_name:{value:S.nm}}),c.mn=S.mn,c}function y(S,g,k){function c(P){return S.p.ix===P?c.position:S.r.ix===P?c.rotation:S.pt.ix===P?c.points:S.or.ix===P||P==="ADBE Vector Star Outer Radius"?c.outerRadius:S.os.ix===P?c.outerRoundness:S.ir&&(S.ir.ix===P||P==="ADBE Vector Star Inner Radius")?c.innerRadius:S.is&&S.is.ix===P?c.innerRoundness:null}var b=propertyGroupFactory(c,k),f=g.sh.ty==="tm"?g.sh.prop:g.sh;return c.propertyIndex=S.ix,f.or.setGroupProperty(PropertyInterface("Outer Radius",b)),f.os.setGroupProperty(PropertyInterface("Outer Roundness",b)),f.pt.setGroupProperty(PropertyInterface("Points",b)),f.p.setGroupProperty(PropertyInterface("Position",b)),f.r.setGroupProperty(PropertyInterface("Rotation",b)),S.ir&&(f.ir.setGroupProperty(PropertyInterface("Inner Radius",b)),f.is.setGroupProperty(PropertyInterface("Inner Roundness",b))),Object.defineProperties(c,{position:{get:ExpressionPropertyInterface(f.p)},rotation:{get:ExpressionPropertyInterface(f.r)},points:{get:ExpressionPropertyInterface(f.pt)},outerRadius:{get:ExpressionPropertyInterface(f.or)},outerRoundness:{get:ExpressionPropertyInterface(f.os)},innerRadius:{get:ExpressionPropertyInterface(f.ir)},innerRoundness:{get:ExpressionPropertyInterface(f.is)},_name:{value:S.nm}}),c.mn=S.mn,c}function _(S,g,k){function c(P){return S.p.ix===P?c.position:S.r.ix===P?c.roundness:S.s.ix===P||P==="Size"||P==="ADBE Vector Rect Size"?c.size:null}var b=propertyGroupFactory(c,k),f=g.sh.ty==="tm"?g.sh.prop:g.sh;return c.propertyIndex=S.ix,f.p.setGroupProperty(PropertyInterface("Position",b)),f.s.setGroupProperty(PropertyInterface("Size",b)),f.r.setGroupProperty(PropertyInterface("Rotation",b)),Object.defineProperties(c,{position:{get:ExpressionPropertyInterface(f.p)},roundness:{get:ExpressionPropertyInterface(f.r)},size:{get:ExpressionPropertyInterface(f.s)},_name:{value:S.nm}}),c.mn=S.mn,c}function u(S,g,k){function c(P){return S.r.ix===P||P==="Round Corners 1"?c.radius:null}var b=propertyGroupFactory(c,k),f=g;return c.propertyIndex=S.ix,f.rd.setGroupProperty(PropertyInterface("Radius",b)),Object.defineProperties(c,{radius:{get:ExpressionPropertyInterface(f.rd)},_name:{value:S.nm}}),c.mn=S.mn,c}function x(S,g,k){function c(P){return S.c.ix===P||P==="Copies"?c.copies:S.o.ix===P||P==="Offset"?c.offset:null}var b=propertyGroupFactory(c,k),f=g;return c.propertyIndex=S.ix,f.c.setGroupProperty(PropertyInterface("Copies",b)),f.o.setGroupProperty(PropertyInterface("Offset",b)),Object.defineProperties(c,{copies:{get:ExpressionPropertyInterface(f.c)},offset:{get:ExpressionPropertyInterface(f.o)},_name:{value:S.nm}}),c.mn=S.mn,c}return function(S,g,k){var c;function b(P){if(typeof P=="number")return P=P===void 0?1:P,P===0?k:c[P-1];for(var A=0,M=c.length;A<M;){if(c[A]._name===P)return c[A];A+=1}return null}function f(){return k}return b.propertyGroup=propertyGroupFactory(b,f),c=t(S,g,b.propertyGroup),b.numProperties=c.length,b._name="Contents",b}}(),TextExpressionInterface=function(){return function(t){var e;function r(i){switch(i){case"ADBE Text Document":return r.sourceText;default:return null}}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var s=t.textProperty.currentData.t;return(!e||s!==e.value)&&(e=new String(s),e.value=s||new String(s),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r}}();function _typeof(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(r){return typeof r}:_typeof=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof(t)}var FootageInterface=function(){var t=function(i){var s="",n=i.getFootageData();function a(){return s="",n=i.getFootageData(),l}function l(o){if(n[o])return s=o,n=n[o],_typeof(n)==="object"?l:n;var p=o.indexOf(s);if(p!==-1){var y=parseInt(o.substr(p+s.length),10);return n=n[y],_typeof(n)==="object"?l:n}return""}return a},e=function(i){function s(n){return n==="Outline"?s.outlineInterface():null}return s._name="Outline",s.outlineInterface=t(i),s};return function(r){function i(s){return s==="Data"?i.dataInterface:null}return i._name="Data",i.dataInterface=e(r),i}}(),interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers=function(){function t(a,l,o){l.x&&(o.k=!0,o.x=!0,o.initiateExpression=ExpressionManager.initiateExpression,o.effectsSequence.push(o.initiateExpression(a,l,o).bind(o)))}function e(a){return a*=this.elem.globalData.frameRate,a-=this.offsetTime,a!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<a?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(a,this._cachingAtTime),this._cachingAtTime.lastFrame=a),this._cachingAtTime.value}function r(a){var l=-.01,o=this.getValueAtTime(a),p=this.getValueAtTime(a+l),y=0;if(o.length){var _;for(_=0;_<o.length;_+=1)y+=Math.pow(p[_]-o[_],2);y=Math.sqrt(y)*100}else y=0;return y}function i(a){if(this.vel!==void 0)return this.vel;var l=-.001,o=this.getValueAtTime(a),p=this.getValueAtTime(a+l),y;if(o.length){y=createTypedArray("float32",o.length);var _;for(_=0;_<o.length;_+=1)y[_]=(p[_]-o[_])/l}else y=(p-o)/l;return y}function s(){return this.pv}function n(a){this.propertyGroup=a}return{searchExpressions:t,getSpeedAtTime:r,getVelocityAtTime:i,getValueAtTime:e,getStaticValueAtTime:s,setGroupProperty:n}}();function addPropertyDecorator(){function t(u,x,S){if(!this.k||!this.keyframes)return this.pv;u=u?u.toLowerCase():"";var g=this.comp.renderedFrame,k=this.keyframes,c=k[k.length-1].t;if(g<=c)return this.pv;var b,f;S?(x?b=Math.abs(c-this.elem.comp.globalData.frameRate*x):b=Math.max(0,c-this.elem.data.ip),f=c-b):((!x||x>k.length-1)&&(x=k.length-1),f=k[k.length-1-x].t,b=c-f);var P,A,M;if(u==="pingpong"){var F=Math.floor((g-f)/b);if(F%2!==0)return this.getValueAtTime((b-(g-f)%b+f)/this.comp.globalData.frameRate,0)}else if(u==="offset"){var L=this.getValueAtTime(f/this.comp.globalData.frameRate,0),O=this.getValueAtTime(c/this.comp.globalData.frameRate,0),W=this.getValueAtTime(((g-f)%b+f)/this.comp.globalData.frameRate,0),H=Math.floor((g-f)/b);if(this.pv.length){for(M=new Array(L.length),A=M.length,P=0;P<A;P+=1)M[P]=(O[P]-L[P])*H+W[P];return M}return(O-L)*H+W}else if(u==="continue"){var z=this.getValueAtTime(c/this.comp.globalData.frameRate,0),q=this.getValueAtTime((c-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(M=new Array(z.length),A=M.length,P=0;P<A;P+=1)M[P]=z[P]+(z[P]-q[P])*((g-c)/this.comp.globalData.frameRate)/5e-4;return M}return z+(z-q)*((g-c)/.001)}return this.getValueAtTime(((g-f)%b+f)/this.comp.globalData.frameRate,0)}function e(u,x,S){if(!this.k)return this.pv;u=u?u.toLowerCase():"";var g=this.comp.renderedFrame,k=this.keyframes,c=k[0].t;if(g>=c)return this.pv;var b,f;S?(x?b=Math.abs(this.elem.comp.globalData.frameRate*x):b=Math.max(0,this.elem.data.op-c),f=c+b):((!x||x>k.length-1)&&(x=k.length-1),f=k[x].t,b=f-c);var P,A,M;if(u==="pingpong"){var F=Math.floor((c-g)/b);if(F%2===0)return this.getValueAtTime(((c-g)%b+c)/this.comp.globalData.frameRate,0)}else if(u==="offset"){var L=this.getValueAtTime(c/this.comp.globalData.frameRate,0),O=this.getValueAtTime(f/this.comp.globalData.frameRate,0),W=this.getValueAtTime((b-(c-g)%b+c)/this.comp.globalData.frameRate,0),H=Math.floor((c-g)/b)+1;if(this.pv.length){for(M=new Array(L.length),A=M.length,P=0;P<A;P+=1)M[P]=W[P]-(O[P]-L[P])*H;return M}return W-(O-L)*H}else if(u==="continue"){var z=this.getValueAtTime(c/this.comp.globalData.frameRate,0),q=this.getValueAtTime((c+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(M=new Array(z.length),A=M.length,P=0;P<A;P+=1)M[P]=z[P]+(z[P]-q[P])*(c-g)/.001;return M}return z+(z-q)*(c-g)/.001}return this.getValueAtTime((b-((c-g)%b+c))/this.comp.globalData.frameRate,0)}function r(u,x){if(!this.k)return this.pv;if(u=(u||.4)*.5,x=Math.floor(x||5),x<=1)return this.pv;var S=this.comp.renderedFrame/this.comp.globalData.frameRate,g=S-u,k=S+u,c=x>1?(k-g)/(x-1):1,b=0,f=0,P;this.pv.length?P=createTypedArray("float32",this.pv.length):P=0;for(var A;b<x;){if(A=this.getValueAtTime(g+b*c),this.pv.length)for(f=0;f<this.pv.length;f+=1)P[f]+=A[f];else P+=A;b+=1}if(this.pv.length)for(f=0;f<this.pv.length;f+=1)P[f]/=x;else P/=x;return P}function i(u){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var x=this._transformCachingAtTime.v;if(x.cloneFromProps(this.pre.props),this.appliedTransformations<1){var S=this.a.getValueAtTime(u);x.translate(-S[0]*this.a.mult,-S[1]*this.a.mult,S[2]*this.a.mult)}if(this.appliedTransformations<2){var g=this.s.getValueAtTime(u);x.scale(g[0]*this.s.mult,g[1]*this.s.mult,g[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var k=this.sk.getValueAtTime(u),c=this.sa.getValueAtTime(u);x.skewFromAxis(-k*this.sk.mult,c*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var b=this.r.getValueAtTime(u);x.rotate(-b*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var f=this.rz.getValueAtTime(u),P=this.ry.getValueAtTime(u),A=this.rx.getValueAtTime(u),M=this.or.getValueAtTime(u);x.rotateZ(-f*this.rz.mult).rotateY(P*this.ry.mult).rotateX(A*this.rx.mult).rotateZ(-M[2]*this.or.mult).rotateY(M[1]*this.or.mult).rotateX(M[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var F=this.px.getValueAtTime(u),L=this.py.getValueAtTime(u);if(this.data.p.z){var O=this.pz.getValueAtTime(u);x.translate(F*this.px.mult,L*this.py.mult,-O*this.pz.mult)}else x.translate(F*this.px.mult,L*this.py.mult,0)}else{var W=this.p.getValueAtTime(u);x.translate(W[0]*this.p.mult,W[1]*this.p.mult,-W[2]*this.p.mult)}return x}function s(){return this.v.clone(new Matrix)}var n=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(u,x,S){var g=n(u,x,S);return g.dynamicProperties.length?g.getValueAtTime=i.bind(g):g.getValueAtTime=s.bind(g),g.setGroupProperty=expressionHelpers.setGroupProperty,g};var a=PropertyFactory.getProp;PropertyFactory.getProp=function(u,x,S,g,k){var c=a(u,x,S,g,k);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=t,c.loopIn=e,c.smooth=r,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=x.a===1?x.k.length:0,c.propertyIndex=x.ix;var b=0;return S!==0&&(b=createTypedArray("float32",x.a===1?x.k[0].s.length:x.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:b},expressionHelpers.searchExpressions(u,x,c),c.k&&k.addDynamicProperty(c),c};function l(u){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),u*=this.elem.globalData.frameRate,u-=this.offsetTime,u!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<u?this._caching.lastIndex:0,this._cachingAtTime.lastTime=u,this.interpolateShape(u,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}var o=ShapePropertyFactory.getConstructorFunction(),p=ShapePropertyFactory.getKeyframedConstructorFunction();function y(){}y.prototype={vertices:function(x,S){this.k&&this.getValue();var g=this.v;S!==void 0&&(g=this.getValueAtTime(S,0));var k,c=g._length,b=g[x],f=g.v,P=createSizedArray(c);for(k=0;k<c;k+=1)x==="i"||x==="o"?P[k]=[b[k][0]-f[k][0],b[k][1]-f[k][1]]:P[k]=[b[k][0],b[k][1]];return P},points:function(x){return this.vertices("v",x)},inTangents:function(x){return this.vertices("i",x)},outTangents:function(x){return this.vertices("o",x)},isClosed:function(){return this.v.c},pointOnPath:function(x,S){var g=this.v;S!==void 0&&(g=this.getValueAtTime(S,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(g));for(var k=this._segmentsLength,c=k.lengths,b=k.totalLength*x,f=0,P=c.length,A=0,M;f<P;){if(A+c[f].addedLength>b){var F=f,L=g.c&&f===P-1?0:f+1,O=(b-A)/c[f].addedLength;M=bez.getPointInSegment(g.v[F],g.v[L],g.o[F],g.i[L],O,c[f]);break}else A+=c[f].addedLength;f+=1}return M||(M=g.c?[g.v[0][0],g.v[0][1]]:[g.v[g._length-1][0],g.v[g._length-1][1]]),M},vectorOnPath:function(x,S,g){x==1?x=this.v.c:x==0&&(x=.999);var k=this.pointOnPath(x,S),c=this.pointOnPath(x+.001,S),b=c[0]-k[0],f=c[1]-k[1],P=Math.sqrt(Math.pow(b,2)+Math.pow(f,2));if(P===0)return[0,0];var A=g==="tangent"?[b/P,f/P]:[-f/P,b/P];return A},tangentOnPath:function(x,S){return this.vectorOnPath(x,S,"tangent")},normalOnPath:function(x,S){return this.vectorOnPath(x,S,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([y],o),extendPrototype([y],p),p.prototype.getValueAtTime=l,p.prototype.initiateExpression=ExpressionManager.initiateExpression;var _=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(u,x,S,g,k){var c=_(u,x,S,g,k);return c.propertyIndex=x.ix,c.lock=!1,S===3?expressionHelpers.searchExpressions(u,x.pt,c):S===4&&expressionHelpers.searchExpressions(u,x.ks,c),c.k&&u.addDynamicProperty(c),c}}function initialize$1(){addPropertyDecorator()}function addDecorator(){function t(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}TextProperty.prototype.getExpressionValue=function(e,r){var i=this.calculateExpression(r);if(e.t!==i){var s={};return this.copyData(s,e),s.t=i.toString(),s.__complete=!1,s}return e},TextProperty.prototype.searchProperty=function(){var e=this.searchKeyframes(),r=this.searchExpressions();return this.kf=e||r,this.kf},TextProperty.prototype.searchExpressions=t}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function t(e,r){var i=createNS("feMerge");i.setAttribute("result",e);var s,n;for(n=0;n<r.length;n+=1)s=createNS("feMergeNode"),s.setAttribute("in",r[n]),i.appendChild(s),i.appendChild(s);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,i,s){this.filterManager=e;var n=createNS("feColorMatrix");n.setAttribute("type","matrix"),n.setAttribute("color-interpolation-filters","linearRGB"),n.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=n,n.setAttribute("result",i+"_tint_1"),t.appendChild(n),n=createNS("feColorMatrix"),n.setAttribute("type","matrix"),n.setAttribute("color-interpolation-filters","sRGB"),n.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),n.setAttribute("result",i+"_tint_2"),t.appendChild(n),this.matrixFilter=n;var a=this.createMergeNode(i,[s,i+"_tint_1",i+"_tint_2"]);t.appendChild(a)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+i+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}};function SVGFillFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","sRGB"),s.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),s.setAttribute("result",i),t.appendChild(s),this.matrixFilter=s}SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}};function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}SVGStrokeEffect.prototype.initialize=function(){var t=this.elem.layerElement.children||this.elem.layerElement.childNodes,e,r,i,s;for(this.filterManager.effectElements[1].p.v===1?(s=this.elem.maskManager.masksProperties.length,i=0):(i=this.filterManager.effectElements[0].p.v-1,s=i+1),r=createNS("g"),r.setAttribute("fill","none"),r.setAttribute("stroke-linecap","round"),r.setAttribute("stroke-dashoffset",1),i;i<s;i+=1)e=createNS("path"),r.appendChild(e),this.paths.push({p:e,m:i});if(this.filterManager.effectElements[10].p.v===3){var n=createNS("mask"),a=createElementID();n.setAttribute("id",a),n.setAttribute("mask-type","alpha"),n.appendChild(r),this.elem.globalData.defs.appendChild(n);var l=createNS("g");for(l.setAttribute("mask","url("+getLocationHref()+"#"+a+")");t[0];)l.appendChild(t[0]);this.elem.layerElement.appendChild(l),this.masker=n,r.setAttribute("stroke","#fff")}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2)for(t=this.elem.layerElement.children||this.elem.layerElement.childNodes;t.length;)this.elem.layerElement.removeChild(t[0]);this.elem.layerElement.appendChild(r),this.elem.layerElement.removeAttribute("mask"),r.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=r},SVGStrokeEffect.prototype.renderFrame=function(t){this.initialized||this.initialize();var e,r=this.paths.length,i,s;for(e=0;e<r;e+=1)if(this.paths[e].m!==-1&&(i=this.elem.maskManager.viewData[this.paths[e].m],s=this.paths[e].p,(t||this.filterManager._mdf||i.prop._mdf)&&s.setAttribute("d",i.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||i.prop._mdf)){var n;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var a=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,l=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,o=s.getTotalLength();n="0 0 0 "+o*a+" ";var p=o*(l-a),y=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01,_=Math.floor(p/y),u;for(u=0;u<_;u+=1)n+="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01+" ";n+="0 "+o*10+" 0 0"}else n="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01;s.setAttribute("stroke-dasharray",n)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",this.filterManager.effectElements[4].p.v*2),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2)&&(t||this.filterManager.effectElements[3].p._mdf)){var x=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(x[0]*255)+","+bmFloor(x[1]*255)+","+bmFloor(x[2]*255)+")")}};function SVGTritoneFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","linearRGB"),s.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(s);var n=createNS("feComponentTransfer");n.setAttribute("color-interpolation-filters","sRGB"),n.setAttribute("result",i),this.matrixFilter=n;var a=createNS("feFuncR");a.setAttribute("type","table"),n.appendChild(a),this.feFuncR=a;var l=createNS("feFuncG");l.setAttribute("type","table"),n.appendChild(l),this.feFuncG=l;var o=createNS("feFuncB");o.setAttribute("type","table"),n.appendChild(o),this.feFuncB=o,t.appendChild(n)}SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v,s=i[0]+" "+r[0]+" "+e[0],n=i[1]+" "+r[1]+" "+e[1],a=i[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",s),this.feFuncG.setAttribute("tableValues",n),this.feFuncB.setAttribute("tableValues",a)}};function SVGProLevelsFilter(t,e,r,i){this.filterManager=e;var s=this.filterManager.effectElements,n=createNS("feComponentTransfer");(s[10].p.k||s[10].p.v!==0||s[11].p.k||s[11].p.v!==1||s[12].p.k||s[12].p.v!==1||s[13].p.k||s[13].p.v!==0||s[14].p.k||s[14].p.v!==1)&&(this.feFuncR=this.createFeFunc("feFuncR",n)),(s[17].p.k||s[17].p.v!==0||s[18].p.k||s[18].p.v!==1||s[19].p.k||s[19].p.v!==1||s[20].p.k||s[20].p.v!==0||s[21].p.k||s[21].p.v!==1)&&(this.feFuncG=this.createFeFunc("feFuncG",n)),(s[24].p.k||s[24].p.v!==0||s[25].p.k||s[25].p.v!==1||s[26].p.k||s[26].p.v!==1||s[27].p.k||s[27].p.v!==0||s[28].p.k||s[28].p.v!==1)&&(this.feFuncB=this.createFeFunc("feFuncB",n)),(s[31].p.k||s[31].p.v!==0||s[32].p.k||s[32].p.v!==1||s[33].p.k||s[33].p.v!==1||s[34].p.k||s[34].p.v!==0||s[35].p.k||s[35].p.v!==1)&&(this.feFuncA=this.createFeFunc("feFuncA",n)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(n.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(n)),(s[3].p.k||s[3].p.v!==0||s[4].p.k||s[4].p.v!==1||s[5].p.k||s[5].p.v!==1||s[6].p.k||s[6].p.v!==0||s[7].p.k||s[7].p.v!==1)&&(n=createNS("feComponentTransfer"),n.setAttribute("color-interpolation-filters","sRGB"),n.setAttribute("result",i),t.appendChild(n),this.feFuncRComposed=this.createFeFunc("feFuncR",n),this.feFuncGComposed=this.createFeFunc("feFuncG",n),this.feFuncBComposed=this.createFeFunc("feFuncB",n))}SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,i,s){for(var n=0,a=256,l,o=Math.min(t,e),p=Math.max(t,e),y=Array.call(null,{length:a}),_,u=0,x=s-i,S=e-t;n<=256;)l=n/256,l<=o?_=S<0?s:i:l>=p?_=S<0?i:s:_=i+x*Math.pow((l-t)/S,1/r),y[u]=_,u+=1,n+=256/(a-1);return y.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}};function SVGDropShadowEffect(t,e,r,i,s){var n=e.container.globalData.renderConfig.filterSize,a=e.data.fs||n;t.setAttribute("x",a.x||n.x),t.setAttribute("y",a.y||n.y),t.setAttribute("width",a.width||n.width),t.setAttribute("height",a.height||n.height),this.filterManager=e;var l=createNS("feGaussianBlur");l.setAttribute("in","SourceAlpha"),l.setAttribute("result",i+"_drop_shadow_1"),l.setAttribute("stdDeviation","0"),this.feGaussianBlur=l,t.appendChild(l);var o=createNS("feOffset");o.setAttribute("dx","25"),o.setAttribute("dy","0"),o.setAttribute("in",i+"_drop_shadow_1"),o.setAttribute("result",i+"_drop_shadow_2"),this.feOffset=o,t.appendChild(o);var p=createNS("feFlood");p.setAttribute("flood-color","#00ff00"),p.setAttribute("flood-opacity","1"),p.setAttribute("result",i+"_drop_shadow_3"),this.feFlood=p,t.appendChild(p);var y=createNS("feComposite");y.setAttribute("in",i+"_drop_shadow_3"),y.setAttribute("in2",i+"_drop_shadow_2"),y.setAttribute("operator","in"),y.setAttribute("result",i+"_drop_shadow_4"),t.appendChild(y);var _=this.createMergeNode(i,[i+"_drop_shadow_4",s]);t.appendChild(_)}extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(e[0]*255),Math.round(e[1]*255),Math.round(e[2]*255)))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,i=(this.filterManager.effectElements[2].p.v-90)*degToRads,s=r*Math.cos(i),n=r*Math.sin(i);this.feOffset.setAttribute("dx",s),this.feOffset.setAttribute("dy",n)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var i=r.children,s=0,n=i.length;s<n&&i[s]!==t.layerElement;)s+=1;var a;s<=n-2&&(a=i[s+1]);var l=createNS("use");l.setAttribute("href","#"+e),a?r.insertBefore(l,a):r.appendChild(l)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),i=createNS("mask");i.setAttribute("id",e.layerId),i.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var s=t.globalData.defs;s.appendChild(i);var n=createNS("symbol");n.setAttribute("id",r),this.replaceInParent(e,r),n.appendChild(e.layerElement),s.appendChild(n);var a=createNS("use");a.setAttribute("href","#"+r),i.appendChild(a),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,i=e.length;r<i;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()};function SVGGaussianBlurEffect(t,e,r,i){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("result",i),t.appendChild(s),this.feGaussianBlur=s}SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3,r=this.filterManager.effectElements[0].p.v*e,i=this.filterManager.effectElements[1].p.v,s=i==3?0:r,n=i==2?0:r;this.feGaussianBlur.setAttribute("stdDeviation",s+" "+n);var a=this.filterManager.effectElements[2].p.v==1?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}};function TransformEffect(){}TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,i=e[1].p.v,s=e[2].p.v===1,n=e[3].p.v,a=s?n:e[4].p.v,l=e[5].p.v,o=e[6].p.v,p=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(a*.01,n*.01,1),this.matrix.rotate(-p*degToRads),this.matrix.skewFromAxis(-l*degToRads,(o+90)*degToRads),this.matrix.translate(i[0],i[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}};function SVGTransformEffect(t,e){this.init(e)}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(t){this.init(t)}return extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie})})(lottie$1,lottie$1.exports);var lottieExports=lottie$1.exports;const lottie=getDefaultExportFromCjs(lottieExports);function _iterableToArrayLimit(t,e){var r=t==null?null:typeof Symbol<"u"&&t[Symbol.iterator]||t["@@iterator"];if(r!=null){var i,s,n,a,l=[],o=!0,p=!1;try{if(n=(r=r.call(t)).next,e===0){if(Object(r)!==r)return;o=!1}else for(;!(o=(i=n.call(r)).done)&&(l.push(i.value),l.length!==e);o=!0);}catch(y){p=!0,s=y}finally{try{if(!o&&r.return!=null&&(a=r.return(),Object(a)!==a))return}finally{if(p)throw s}}return l}}function ownKeys(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(t,s).enumerable})),r.push.apply(r,i)}return r}function _objectSpread2(t){for(var e=1;e<arguments.length;e++){var r=arguments[e]!=null?arguments[e]:{};e%2?ownKeys(Object(r),!0).forEach(function(i){_defineProperty(t,i,r[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(i){Object.defineProperty(t,i,Object.getOwnPropertyDescriptor(r,i))})}return t}function _defineProperty(t,e,r){return e=_toPropertyKey(e),e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _objectWithoutPropertiesLoose(t,e){if(t==null)return{};var r={},i=Object.keys(t),s,n;for(n=0;n<i.length;n++)s=i[n],!(e.indexOf(s)>=0)&&(r[s]=t[s]);return r}function _objectWithoutProperties(t,e){if(t==null)return{};var r=_objectWithoutPropertiesLoose(t,e),i,s;if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(s=0;s<n.length;s++)i=n[s],!(e.indexOf(i)>=0)&&Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}function _slicedToArray(t,e){return _arrayWithHoles(t)||_iterableToArrayLimit(t,e)||_unsupportedIterableToArray(t,e)||_nonIterableRest()}function _arrayWithHoles(t){if(Array.isArray(t))return t}function _unsupportedIterableToArray(t,e){if(t){if(typeof t=="string")return _arrayLikeToArray(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);if(r==="Object"&&t.constructor&&(r=t.constructor.name),r==="Map"||r==="Set")return Array.from(t);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return _arrayLikeToArray(t,e)}}function _arrayLikeToArray(t,e){(e==null||e>t.length)&&(e=t.length);for(var r=0,i=new Array(e);r<e;r++)i[r]=t[r];return i}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _toPrimitive(t,e){if(typeof t!="object"||t===null)return t;var r=t[Symbol.toPrimitive];if(r!==void 0){var i=r.call(t,e||"default");if(typeof i!="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return typeof e=="symbol"?e:String(e)}var _excluded$1=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],useLottie=function t(e,r){var i=e.animationData,s=e.loop,n=e.autoplay,a=e.initialSegment,l=e.onComplete,o=e.onLoopComplete,p=e.onEnterFrame,y=e.onSegmentStart,_=e.onConfigReady,u=e.onDataReady,x=e.onDataFailed,S=e.onLoadedImages,g=e.onDOMLoaded,k=e.onDestroy;e.lottieRef,e.renderer,e.name,e.assetsPath,e.rendererSettings;var c=_objectWithoutProperties(e,_excluded$1),b=reactExports.useState(!1),f=_slicedToArray(b,2),P=f[0],A=f[1],M=reactExports.useRef(),F=reactExports.useRef(null),L=function(){var G;(G=M.current)===null||G===void 0||G.play()},O=function(){var G;(G=M.current)===null||G===void 0||G.stop()},W=function(){var G;(G=M.current)===null||G===void 0||G.pause()},H=function(G){var j;(j=M.current)===null||j===void 0||j.setSpeed(G)},z=function(G,j){var N;(N=M.current)===null||N===void 0||N.goToAndPlay(G,j)},q=function(G,j){var N;(N=M.current)===null||N===void 0||N.goToAndStop(G,j)},D=function(G){var j;(j=M.current)===null||j===void 0||j.setDirection(G)},I=function(G,j){var N;(N=M.current)===null||N===void 0||N.playSegments(G,j)},C=function(G){var j;(j=M.current)===null||j===void 0||j.setSubframe(G)},T=function(G){var j;return(j=M.current)===null||j===void 0?void 0:j.getDuration(G)},d=function(){var G;(G=M.current)===null||G===void 0||G.destroy(),M.current=void 0},E=function(){var G=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},j;if(F.current){(j=M.current)===null||j===void 0||j.destroy();var N=_objectSpread2(_objectSpread2(_objectSpread2({},e),G),{},{container:F.current});return M.current=lottie.loadAnimation(N),A(!!M.current),function(){var K;(K=M.current)===null||K===void 0||K.destroy(),M.current=void 0}}};reactExports.useEffect(function(){var R=E();return function(){return R==null?void 0:R()}},[i,s]),reactExports.useEffect(function(){M.current&&(M.current.autoplay=!!n)},[n]),reactExports.useEffect(function(){if(M.current){if(!a){M.current.resetSegments(!0);return}!Array.isArray(a)||!a.length||((M.current.currentRawFrame<a[0]||M.current.currentRawFrame>a[1])&&(M.current.currentRawFrame=a[0]),M.current.setSegment(a[0],a[1]))}},[a]),reactExports.useEffect(function(){var R=[{name:"complete",handler:l},{name:"loopComplete",handler:o},{name:"enterFrame",handler:p},{name:"segmentStart",handler:y},{name:"config_ready",handler:_},{name:"data_ready",handler:u},{name:"data_failed",handler:x},{name:"loaded_images",handler:S},{name:"DOMLoaded",handler:g},{name:"destroy",handler:k}],G=R.filter(function(N){return N.handler!=null});if(G.length){var j=G.map(function(N){var K;return(K=M.current)===null||K===void 0||K.addEventListener(N.name,N.handler),function(){var U;(U=M.current)===null||U===void 0||U.removeEventListener(N.name,N.handler)}});return function(){j.forEach(function(N){return N()})}}},[l,o,p,y,_,u,x,S,g,k]);var V=React.createElement("div",_objectSpread2({style:r,ref:F},c));return{View:V,play:L,stop:O,pause:W,setSpeed:H,goToAndStop:q,goToAndPlay:z,setDirection:D,playSegments:I,setSubframe:C,getDuration:T,destroy:d,animationContainerRef:F,animationLoaded:P,animationItem:M.current}};function getContainerVisibility(t){var e=t.getBoundingClientRect(),r=e.top,i=e.height,s=window.innerHeight-r,n=window.innerHeight+i;return s/n}function getContainerCursorPosition(t,e,r){var i=t.getBoundingClientRect(),s=i.top,n=i.left,a=i.width,l=i.height,o=(e-n)/a,p=(r-s)/l;return{x:o,y:p}}var useInitInteractivity=function t(e){var r=e.wrapperRef,i=e.animationItem,s=e.mode,n=e.actions;reactExports.useEffect(function(){var a=r.current;if(!(!a||!i||!n.length)){i.stop();var l=function(){var y=null,_=function(){var x=getContainerVisibility(a),S=n.find(function(k){var c=k.visibility;return c&&x>=c[0]&&x<=c[1]});if(S){if(S.type==="seek"&&S.visibility&&S.frames.length===2){var g=S.frames[0]+Math.ceil((x-S.visibility[0])/(S.visibility[1]-S.visibility[0])*S.frames[1]);//! goToAndStop must be relative to the start of the current segment
i.goToAndStop(g-i.firstFrame-1,!0)}S.type==="loop"&&(y===null||y!==S.frames||i.isPaused)&&(i.playSegments(S.frames,!0),y=S.frames),S.type==="play"&&i.isPaused&&(i.resetSegments(!0),i.play()),S.type==="stop"&&i.goToAndStop(S.frames[0]-i.firstFrame-1,!0)}};return document.addEventListener("scroll",_),function(){document.removeEventListener("scroll",_)}},o=function(){var y=function(S,g){var k=S,c=g;if(k!==-1&&c!==-1){var b=getContainerCursorPosition(a,k,c);k=b.x,c=b.y}var f=n.find(function(M){var F=M.position;return F&&Array.isArray(F.x)&&Array.isArray(F.y)?k>=F.x[0]&&k<=F.x[1]&&c>=F.y[0]&&c<=F.y[1]:F&&!Number.isNaN(F.x)&&!Number.isNaN(F.y)?k===F.x&&c===F.y:!1});if(f){if(f.type==="seek"&&f.position&&Array.isArray(f.position.x)&&Array.isArray(f.position.y)&&f.frames.length===2){var P=(k-f.position.x[0])/(f.position.x[1]-f.position.x[0]),A=(c-f.position.y[0])/(f.position.y[1]-f.position.y[0]);i.playSegments(f.frames,!0),i.goToAndStop(Math.ceil((P+A)/2*(f.frames[1]-f.frames[0])),!0)}f.type==="loop"&&i.playSegments(f.frames,!0),f.type==="play"&&(i.isPaused&&i.resetSegments(!1),i.playSegments(f.frames)),f.type==="stop"&&i.goToAndStop(f.frames[0],!0)}},_=function(S){y(S.clientX,S.clientY)},u=function(){y(-1,-1)};return a.addEventListener("mousemove",_),a.addEventListener("mouseout",u),function(){a.removeEventListener("mousemove",_),a.removeEventListener("mouseout",u)}};switch(s){case"scroll":return l();case"cursor":return o()}}},[s,i])},useLottieInteractivity=function t(e){var r=e.actions,i=e.mode,s=e.lottieObj,n=s.animationItem,a=s.View,l=s.animationContainerRef;return useInitInteractivity({actions:r,animationItem:n,mode:i,wrapperRef:l}),a},_excluded=["style","interactivity"],Lottie=function t(e){var r,i,s,n=e.style,a=e.interactivity,l=_objectWithoutProperties(e,_excluded),o=useLottie(l,n),p=o.View,y=o.play,_=o.stop,u=o.pause,x=o.setSpeed,S=o.goToAndStop,g=o.goToAndPlay,k=o.setDirection,c=o.playSegments,b=o.setSubframe,f=o.getDuration,P=o.destroy,A=o.animationContainerRef,M=o.animationLoaded,F=o.animationItem;return reactExports.useEffect(function(){e.lottieRef&&(e.lottieRef.current={play:y,stop:_,pause:u,setSpeed:x,goToAndPlay:g,goToAndStop:S,setDirection:k,playSegments:c,setSubframe:b,getDuration:f,destroy:P,animationContainerRef:A,animationLoaded:M,animationItem:F})},[(r=e.lottieRef)===null||r===void 0?void 0:r.current]),useLottieInteractivity({lottieObj:{View:p,play:y,stop:_,pause:u,setSpeed:x,goToAndStop:S,goToAndPlay:g,setDirection:k,playSegments:c,setSubframe:b,getDuration:f,destroy:P,animationContainerRef:A,animationLoaded:M,animationItem:F},actions:(i=a==null?void 0:a.actions)!==null&&i!==void 0?i:[],mode:(s=a==null?void 0:a.mode)!==null&&s!==void 0?s:"scroll"})};const nm="Comp 2",ddd=0,h=500,w=500,meta={g:"LottieFiles AE 3.5.3"},layers=[{ty:4,nm:"Shape Layer 7",sr:1,st:0,op:30,ip:0,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:1},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:4},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:14},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:17},{s:[100,100,100],t:27}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:0,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:3.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:14,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:17.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:28}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.0431,.2392,.5686],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:1},{ty:4,nm:"Shape Layer 6",sr:1,st:1,op:31,ip:1,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:2},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:5},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:15},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:18},{s:[100,100,100],t:28}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:1,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:4.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:15,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:18.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:29}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.9882,.2392,.1294],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:2},{ty:4,nm:"Shape Layer 5",sr:1,st:2,op:32,ip:2,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:3},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:6},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:16},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:19},{s:[100,100,100],t:29}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:2,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:5.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:16,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:19.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:30}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[1,1,1],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:3}],v="4.8.0",fr=20,op=30,ip=0,assets=[],animationData={nm,ddd,h,w,meta,layers,v,fr,op,ip,assets},styles={container:{animation:"fade-in 1s forwards",display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},lottie:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},Spinner=()=>(console.log("Spinner"),jsxRuntimeExports.jsx("div",{style:styles.container,children:jsxRuntimeExports.jsx(Lottie,{animationData,loop:!0,height:200,width:200})})),spinner=Object.freeze(Object.defineProperty({__proto__:null,default:Spinner},Symbol.toStringTag,{value:"Module"})),App=React.lazy(()=>__vitePreload(()=>import("./App-33319816.js"),["App-33319816.js","jsx-runtime-e1ec7694.js","pagesLayouts-d66d64b5.js","index-3886bb60.js","useLazyload-fb63921f.js","getInfoPage-5e211acc.js","useQuery-472057a8.js","utils-2d216c44.js","apiClient-4214bebe.js","ThemeProvider-c171fc39.js"])),LazyLogin=React.lazy(()=>__vitePreload(()=>import("./login-19c81a51.js"),["login-19c81a51.js","jsx-runtime-e1ec7694.js","navBar-64d176c2.js","logoOriginal-a69d94d1.js","ThemeProvider-c171fc39.js","index-aa9e9be7.js","index-3886bb60.js","navBar-6c8bf196.css","useLazyload-fb63921f.js","utils-2d216c44.js","apiClient-4214bebe.js","login-3d72531e.css"])),LazyCotizador=React.lazy(()=>__vitePreload(()=>import("./cotizador-c9a2e3a7.js"),["cotizador-c9a2e3a7.js","jsx-runtime-e1ec7694.js","pagesLayouts-d66d64b5.js","index-3886bb60.js","useLazyload-fb63921f.js","index-aa9e9be7.js","utils-2d216c44.js","apiClient-4214bebe.js"])),LazyAboutUs=React.lazy(()=>__vitePreload(()=>import("./aboutUs-0e7f7b6c.js"),["aboutUs-0e7f7b6c.js","jsx-runtime-e1ec7694.js","pagesLayouts-d66d64b5.js","index-3886bb60.js","banner-aecbb960.js","index.esm-e699ee04.js","iconBase-0ad0ba05.js","index.esm-d0cc5ff1.js","index-aa9e9be7.js","banner-0ebd13ec.css","index.esm-49568e1a.js","nosotros-bd4c0eb1.js","useLazyload-fb63921f.js","aboutUs-5367be92.css"])),LazyProjects=React.lazy(()=>__vitePreload(()=>import("./projects-afab0207.js"),["projects-afab0207.js","jsx-runtime-e1ec7694.js","projects-76c1e199.js","banner-aecbb960.js","index.esm-e699ee04.js","iconBase-0ad0ba05.js","index.esm-d0cc5ff1.js","index-aa9e9be7.js","index-3886bb60.js","pagesLayouts-d66d64b5.js","banner-0ebd13ec.css","cardsProjects-03b9557b.js","useLazyload-fb63921f.js","cardsProjects-577b53fd.css","getInfoPage-5e211acc.js","useQuery-472057a8.js","utils-2d216c44.js","apiClient-4214bebe.js"])),LazyServecesDetail=React.lazy(()=>__vitePreload(()=>import("./servecesDetail-351e1acd.js"),["servecesDetail-351e1acd.js","jsx-runtime-e1ec7694.js","index.esm-eb93bcd7.js","iconBase-0ad0ba05.js","converted_topo-b9bd597d.js","banner-aecbb960.js","index.esm-e699ee04.js","index.esm-d0cc5ff1.js","index-aa9e9be7.js","index-3886bb60.js","pagesLayouts-d66d64b5.js","banner-0ebd13ec.css","autoplay-065f832e.js","autoplay-7c8ef494.css","ScreenSize-a1bda728.js","useLazyload-fb63921f.js","getInfoPage-5e211acc.js","useQuery-472057a8.js","utils-2d216c44.js","apiClient-4214bebe.js","index-13df4ecd.js","servecesDetail-5b53c611.css","scrollbar-936b3cf4.css"])),LazyProjectDetail=React.lazy(()=>__vitePreload(()=>import("./projecsDetail-8967a3db.js"),["projecsDetail-8967a3db.js","jsx-runtime-e1ec7694.js","index-aa9e9be7.js","index-3886bb60.js","projects-76c1e199.js","banner-aecbb960.js","index.esm-e699ee04.js","iconBase-0ad0ba05.js","index.esm-d0cc5ff1.js","pagesLayouts-d66d64b5.js","banner-0ebd13ec.css","autoplay-065f832e.js","autoplay-7c8ef494.css","getInfoPage-5e211acc.js","useQuery-472057a8.js","utils-2d216c44.js","apiClient-4214bebe.js","useLazyload-fb63921f.js","projecsDetail-8b168550.css"])),LazyContactPage=React.lazy(()=>__vitePreload(()=>import("./contact-5b3451b6.js"),["contact-5b3451b6.js","jsx-runtime-e1ec7694.js","pagesLayouts-d66d64b5.js","index-3886bb60.js","banner-aecbb960.js","index.esm-e699ee04.js","iconBase-0ad0ba05.js","index.esm-d0cc5ff1.js","index-aa9e9be7.js","banner-0ebd13ec.css","index.esm-49568e1a.js","index.esm-eb62b989.js","projects-76c1e199.js","useLazyload-fb63921f.js"])),LazyBlogDetail=React.lazy(()=>__vitePreload(()=>import("./blogDetail-434ab3a5.js"),["blogDetail-434ab3a5.js","jsx-runtime-e1ec7694.js","useQuery-472057a8.js","utils-2d216c44.js","sidebarBolgs-a0b2edee.js","logoOriginal-a69d94d1.js","ThemeProvider-c171fc39.js","index-aa9e9be7.js","index-3886bb60.js","useLazyload-fb63921f.js","floawhatsapp-83dd7550.js","footer1-bba6a1c8.js","index.esm-e699ee04.js","iconBase-0ad0ba05.js","index.esm-49568e1a.js","footer1-f76701bf.css","index.esm-eb93bcd7.js","apiClient-4214bebe.js","sidebarBolgs-3d68cdd9.css"])),LazyBlog=React.lazy(()=>__vitePreload(()=>import("./blog-975b6524.js"),["blog-975b6524.js","jsx-runtime-e1ec7694.js","useQuery-472057a8.js","utils-2d216c44.js","sidebarBolgs-a0b2edee.js","logoOriginal-a69d94d1.js","ThemeProvider-c171fc39.js","index-aa9e9be7.js","index-3886bb60.js","useLazyload-fb63921f.js","floawhatsapp-83dd7550.js","footer1-bba6a1c8.js","index.esm-e699ee04.js","iconBase-0ad0ba05.js","index.esm-49568e1a.js","footer1-f76701bf.css","index.esm-eb93bcd7.js","apiClient-4214bebe.js","sidebarBolgs-3d68cdd9.css","index.esm-d0cc5ff1.js"])),queryClient=new QueryClient,router=createBrowserRouter([{path:"/",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(App,{})})},{path:"/sitemap.xml",element:jsxRuntimeExports.jsx(Sitemap,{})},{path:"/login",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyLogin,{})})},{path:"/aboutUs",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyAboutUs,{})})},{path:"/servicios",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyServecesDetail,{})})},{path:"/servicios/:id",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyServecesDetail,{})})},{path:"/projects",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyProjects,{})})},{path:"/projects/:projectArg",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyProjectDetail,{})})},{path:"/contact",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyContactPage,{})})},{path:"/blog",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyBlog,{})})},{path:"/blog/:id",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyBlogDetail,{})})},{path:"/",element:jsxRuntimeExports.jsx(ProtectedRoute,{}),children:[{path:"/cotizador",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyCotizador,{})})}]}]);ReactGA.initialize("G-8DBBBFYVF4");ReactGA.send("pageview");client.createRoot(document.getElementById("root")).render(jsxRuntimeExports.jsx(React.StrictMode,{children:jsxRuntimeExports.jsx(QueryClientProvider,{client:queryClient,children:jsxRuntimeExports.jsxs(AuthProvider,{children:[jsxRuntimeExports.jsx(RouterProvider,{router}),jsxRuntimeExports.jsx(ReactQueryDevtools2,{initialIsOpen:!1})]})})}));export{Spinner as S,useAuth as a,hasPreviousPage as b,useMutation as c,hasNextPage as h,infiniteQueryBehavior as i,spinner as s,useSigninMutation as u};


//# sourceMappingURL=data:application/json;base64,