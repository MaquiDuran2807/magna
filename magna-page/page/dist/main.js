var ne=(t,e,r)=>{if(!e.has(t))throw TypeError("Cannot "+r)};var D=(t,e,r)=>(ne(t,e,"read from private field"),r?r.call(t):e.get(t)),Y=(t,e,r)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,r)},K=(t,e,r,i)=>(ne(t,e,"write to private field"),i?i.call(t,r):e.set(t,r),r);var ie=(t,e,r,i)=>({set _(s){K(t,e,s,r)},get _(){return D(t,e,i)}}),Z=(t,e,r)=>(ne(t,e,"access private method"),r);import{r as reactExports,j as jsxRuntimeExports,c as commonjsGlobal,g as getDefaultExportFromCjs,R as React,_ as __vitePreload}from"./jsx-runtime-329ae681.js";import{r as reactDomExports,c as createBrowserRouter,R as RouterProvider}from"./index-47726f55.js";import{i as isValidTimeout,a as isServer,r as replaceData,n as noop$1,t as timeUntilStale,c as createRetryer,b as notifyManager,d as isCancelledError,e as canFetch,S as Subscribable,h as hashQueryKeyByOptions,m as matchQuery,f as matchMutation,g as addToStart,j as addToEnd,k as focusManager,o as onlineManager,l as functionalUpdate,p as hashKey,q as partialMatchKey,s as shallowEqualObjects,u as useQueryClient,v as shouldThrowError,Q as QueryClientProvider}from"./utils-4decd3ad.js";import{a as apiClient,A as APIURL}from"./apiClient-4214bebe.js";import{O as Outlet,N as Navigate}from"./index-fdfb6bde.js";(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))i(s);new MutationObserver(s=>{for(const a of s)if(a.type==="childList")for(const n of a.addedNodes)n.tagName==="LINK"&&n.rel==="modulepreload"&&i(n)}).observe(document,{childList:!0,subtree:!0});function r(s){const a={};return s.integrity&&(a.integrity=s.integrity),s.referrerPolicy&&(a.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?a.credentials="include":s.crossOrigin==="anonymous"?a.credentials="omit":a.credentials="same-origin",a}function i(s){if(s.ep)return;s.ep=!0;const a=r(s);fetch(s.href,a)}})();var client={},m=reactDomExports;client.createRoot=m.createRoot,client.hydrateRoot=m.hydrateRoot;var Ot,he,Removable=(he=class{constructor(){Y(this,Ot,void 0)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),isValidTimeout(this.gcTime)&&K(this,Ot,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(t){this.gcTime=Math.max(this.gcTime||0,t??(isServer?1/0:5*60*1e3))}clearGcTimeout(){D(this,Ot)&&(clearTimeout(D(this,Ot)),K(this,Ot,void 0))}},Ot=new WeakMap,he),jt,Nt,lt,It,ft,et,Yt,Gt,Ht,se,dt,Ct,le,Query=(le=class extends Removable{constructor(e){super();Y(this,Ht);Y(this,dt);Y(this,jt,void 0);Y(this,Nt,void 0);Y(this,lt,void 0);Y(this,It,void 0);Y(this,ft,void 0);Y(this,et,void 0);Y(this,Yt,void 0);Y(this,Gt,void 0);K(this,Gt,!1),K(this,Yt,e.defaultOptions),Z(this,Ht,se).call(this,e.options),K(this,et,[]),K(this,lt,e.cache),this.queryKey=e.queryKey,this.queryHash=e.queryHash,K(this,jt,e.state||getDefaultState$1(this.options)),this.state=D(this,jt),this.scheduleGc()}get meta(){return this.options.meta}optionalRemove(){!D(this,et).length&&this.state.fetchStatus==="idle"&&D(this,lt).remove(this)}setData(e,r){const i=replaceData(this.state.data,e,this.options);return Z(this,dt,Ct).call(this,{data:i,type:"success",dataUpdatedAt:r==null?void 0:r.updatedAt,manual:r==null?void 0:r.manual}),i}setState(e,r){Z(this,dt,Ct).call(this,{type:"setState",state:e,setStateOptions:r})}cancel(e){var i;const r=D(this,It);return(i=D(this,ft))==null||i.cancel(e),r?r.then(noop$1).catch(noop$1):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(D(this,jt))}isActive(){return D(this,et).some(e=>e.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||D(this,et).some(e=>e.getCurrentResult().isStale)}isStaleByTime(e=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!timeUntilStale(this.state.dataUpdatedAt,e)}onFocus(){var r;const e=D(this,et).find(i=>i.shouldFetchOnWindowFocus());e==null||e.refetch({cancelRefetch:!1}),(r=D(this,ft))==null||r.continue()}onOnline(){var r;const e=D(this,et).find(i=>i.shouldFetchOnReconnect());e==null||e.refetch({cancelRefetch:!1}),(r=D(this,ft))==null||r.continue()}addObserver(e){D(this,et).includes(e)||(D(this,et).push(e),this.clearGcTimeout(),D(this,lt).notify({type:"observerAdded",query:this,observer:e}))}removeObserver(e){D(this,et).includes(e)&&(K(this,et,D(this,et).filter(r=>r!==e)),D(this,et).length||(D(this,ft)&&(D(this,Gt)?D(this,ft).cancel({revert:!0}):D(this,ft).cancelRetry()),this.scheduleGc()),D(this,lt).notify({type:"observerRemoved",query:this,observer:e}))}getObserversCount(){return D(this,et).length}invalidate(){this.state.isInvalidated||Z(this,dt,Ct).call(this,{type:"invalidate"})}fetch(e,r){var p,b,C,c;if(this.state.fetchStatus!=="idle"){if(this.state.dataUpdatedAt&&(r!=null&&r.cancelRefetch))this.cancel({silent:!0});else if(D(this,It))return(p=D(this,ft))==null||p.continueRetry(),D(this,It)}if(e&&Z(this,Ht,se).call(this,e),!this.options.queryFn){const S=D(this,et).find(g=>g.options.queryFn);S&&Z(this,Ht,se).call(this,S.options)}const i=new AbortController,s={queryKey:this.queryKey,meta:this.meta},a=S=>{Object.defineProperty(S,"signal",{enumerable:!0,get:()=>(K(this,Gt,!0),i.signal)})};a(s);const n=()=>this.options.queryFn?(K(this,Gt,!1),this.options.persister?this.options.persister(this.options.queryFn,s,this):this.options.queryFn(s)):Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`)),l={fetchOptions:r,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:n};a(l),(b=this.options.behavior)==null||b.onFetch(l,this),K(this,Nt,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((C=l.fetchOptions)==null?void 0:C.meta))&&Z(this,dt,Ct).call(this,{type:"fetch",meta:(c=l.fetchOptions)==null?void 0:c.meta});const o=S=>{var g,y,T,u;isCancelledError(S)&&S.silent||Z(this,dt,Ct).call(this,{type:"error",error:S}),isCancelledError(S)||((y=(g=D(this,lt).config).onError)==null||y.call(g,S,this),(u=(T=D(this,lt).config).onSettled)==null||u.call(T,this.state.data,S,this)),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return K(this,ft,createRetryer({fn:l.fetchFn,abort:i.abort.bind(i),onSuccess:S=>{var g,y,T,u;if(typeof S>"u"){o(new Error(`${this.queryHash} data is undefined`));return}this.setData(S),(y=(g=D(this,lt).config).onSuccess)==null||y.call(g,S,this),(u=(T=D(this,lt).config).onSettled)==null||u.call(T,S,this.state.error,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:o,onFail:(S,g)=>{Z(this,dt,Ct).call(this,{type:"failed",failureCount:S,error:g})},onPause:()=>{Z(this,dt,Ct).call(this,{type:"pause"})},onContinue:()=>{Z(this,dt,Ct).call(this,{type:"continue"})},retry:l.options.retry,retryDelay:l.options.retryDelay,networkMode:l.options.networkMode})),K(this,It,D(this,ft).promise),D(this,It)}},jt=new WeakMap,Nt=new WeakMap,lt=new WeakMap,It=new WeakMap,ft=new WeakMap,et=new WeakMap,Yt=new WeakMap,Gt=new WeakMap,Ht=new WeakSet,se=function(e){this.options={...D(this,Yt),...e},this.updateGcTime(this.options.gcTime)},dt=new WeakSet,Ct=function(e){const r=i=>{switch(e.type){case"failed":return{...i,fetchFailureCount:e.failureCount,fetchFailureReason:e.error};case"pause":return{...i,fetchStatus:"paused"};case"continue":return{...i,fetchStatus:"fetching"};case"fetch":return{...i,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:e.meta??null,fetchStatus:canFetch(this.options.networkMode)?"fetching":"paused",...!i.dataUpdatedAt&&{error:null,status:"pending"}};case"success":return{...i,data:e.data,dataUpdateCount:i.dataUpdateCount+1,dataUpdatedAt:e.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!e.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const s=e.error;return isCancelledError(s)&&s.revert&&D(this,Nt)?{...D(this,Nt),fetchStatus:"idle"}:{...i,error:s,errorUpdateCount:i.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:i.fetchFailureCount+1,fetchFailureReason:s,fetchStatus:"idle",status:"error"};case"invalidate":return{...i,isInvalidated:!0};case"setState":return{...i,...e.state}}};this.state=r(this.state),notifyManager.batch(()=>{D(this,et).forEach(i=>{i.onQueryUpdate()}),D(this,lt).notify({query:this,type:"updated",action:e})})},le);function getDefaultState$1(t){const e=typeof t.initialData=="function"?t.initialData():t.initialData,r=typeof e<"u",i=r?typeof t.initialDataUpdatedAt=="function"?t.initialDataUpdatedAt():t.initialDataUpdatedAt:0;return{data:e,dataUpdateCount:0,dataUpdatedAt:r?i??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:r?"success":"pending",fetchStatus:"idle"}}var yt,fe,QueryCache=(fe=class extends Subscribable{constructor(e={}){super();Y(this,yt,void 0);this.config=e,K(this,yt,new Map)}build(e,r,i){const s=r.queryKey,a=r.queryHash??hashQueryKeyByOptions(s,r);let n=this.get(a);return n||(n=new Query({cache:this,queryKey:s,queryHash:a,options:e.defaultQueryOptions(r),state:i,defaultOptions:e.getQueryDefaults(s)}),this.add(n)),n}add(e){D(this,yt).has(e.queryHash)||(D(this,yt).set(e.queryHash,e),this.notify({type:"added",query:e}))}remove(e){const r=D(this,yt).get(e.queryHash);r&&(e.destroy(),r===e&&D(this,yt).delete(e.queryHash),this.notify({type:"removed",query:e}))}clear(){notifyManager.batch(()=>{this.getAll().forEach(e=>{this.remove(e)})})}get(e){return D(this,yt).get(e)}getAll(){return[...D(this,yt).values()]}find(e){const r={exact:!0,...e};return this.getAll().find(i=>matchQuery(r,i))}findAll(e={}){const r=this.getAll();return Object.keys(e).length>0?r.filter(i=>matchQuery(e,i)):r}notify(e){notifyManager.batch(()=>{this.listeners.forEach(r=>{r(e)})})}onFocus(){notifyManager.batch(()=>{this.getAll().forEach(e=>{e.onFocus()})})}onOnline(){notifyManager.batch(()=>{this.getAll().forEach(e=>{e.onOnline()})})}},yt=new WeakMap,fe),gt,Xt,ot,qt,bt,wt,pe,Mutation=(pe=class extends Removable{constructor(e){super();Y(this,bt);Y(this,gt,void 0);Y(this,Xt,void 0);Y(this,ot,void 0);Y(this,qt,void 0);this.mutationId=e.mutationId,K(this,Xt,e.defaultOptions),K(this,ot,e.mutationCache),K(this,gt,[]),this.state=e.state||getDefaultState(),this.setOptions(e.options),this.scheduleGc()}setOptions(e){this.options={...D(this,Xt),...e},this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(e){D(this,gt).includes(e)||(D(this,gt).push(e),this.clearGcTimeout(),D(this,ot).notify({type:"observerAdded",mutation:this,observer:e}))}removeObserver(e){K(this,gt,D(this,gt).filter(r=>r!==e)),this.scheduleGc(),D(this,ot).notify({type:"observerRemoved",mutation:this,observer:e})}optionalRemove(){D(this,gt).length||(this.state.status==="pending"?this.scheduleGc():D(this,ot).remove(this))}continue(){var e;return((e=D(this,qt))==null?void 0:e.continue())??this.execute(this.state.variables)}async execute(e){var s,a,n,l,o,p,b,C,c,S,g,y,T,u,d,f,x,_,A,k;const r=()=>(K(this,qt,createRetryer({fn:()=>this.options.mutationFn?this.options.mutationFn(e):Promise.reject(new Error("No mutationFn found")),onFail:(F,V)=>{Z(this,bt,wt).call(this,{type:"failed",failureCount:F,error:V})},onPause:()=>{Z(this,bt,wt).call(this,{type:"pause"})},onContinue:()=>{Z(this,bt,wt).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode})),D(this,qt).promise),i=this.state.status==="pending";try{if(!i){Z(this,bt,wt).call(this,{type:"pending",variables:e}),await((a=(s=D(this,ot).config).onMutate)==null?void 0:a.call(s,e,this));const V=await((l=(n=this.options).onMutate)==null?void 0:l.call(n,e));V!==this.state.context&&Z(this,bt,wt).call(this,{type:"pending",context:V,variables:e})}const F=await r();return await((p=(o=D(this,ot).config).onSuccess)==null?void 0:p.call(o,F,e,this.state.context,this)),await((C=(b=this.options).onSuccess)==null?void 0:C.call(b,F,e,this.state.context)),await((S=(c=D(this,ot).config).onSettled)==null?void 0:S.call(c,F,null,this.state.variables,this.state.context,this)),await((y=(g=this.options).onSettled)==null?void 0:y.call(g,F,null,e,this.state.context)),Z(this,bt,wt).call(this,{type:"success",data:F}),F}catch(F){try{throw await((u=(T=D(this,ot).config).onError)==null?void 0:u.call(T,F,e,this.state.context,this)),await((f=(d=this.options).onError)==null?void 0:f.call(d,F,e,this.state.context)),await((_=(x=D(this,ot).config).onSettled)==null?void 0:_.call(x,void 0,F,this.state.variables,this.state.context,this)),await((k=(A=this.options).onSettled)==null?void 0:k.call(A,void 0,F,e,this.state.context)),F}finally{Z(this,bt,wt).call(this,{type:"error",error:F})}}}},gt=new WeakMap,Xt=new WeakMap,ot=new WeakMap,qt=new WeakMap,bt=new WeakSet,wt=function(e){const r=i=>{switch(e.type){case"failed":return{...i,failureCount:e.failureCount,failureReason:e.error};case"pause":return{...i,isPaused:!0};case"continue":return{...i,isPaused:!1};case"pending":return{...i,context:e.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!canFetch(this.options.networkMode),status:"pending",variables:e.variables,submittedAt:Date.now()};case"success":return{...i,data:e.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...i,data:void 0,error:e.error,failureCount:i.failureCount+1,failureReason:e.error,isPaused:!1,status:"error"}}};this.state=r(this.state),notifyManager.batch(()=>{D(this,gt).forEach(i=>{i.onMutationUpdate(e)}),D(this,ot).notify({mutation:this,type:"updated",action:e})})},pe);function getDefaultState(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var pt,Zt,zt,ue,MutationCache=(ue=class extends Subscribable{constructor(e={}){super();Y(this,pt,void 0);Y(this,Zt,void 0);Y(this,zt,void 0);this.config=e,K(this,pt,[]),K(this,Zt,0)}build(e,r,i){const s=new Mutation({mutationCache:this,mutationId:++ie(this,Zt)._,options:e.defaultMutationOptions(r),state:i});return this.add(s),s}add(e){D(this,pt).push(e),this.notify({type:"added",mutation:e})}remove(e){K(this,pt,D(this,pt).filter(r=>r!==e)),this.notify({type:"removed",mutation:e})}clear(){notifyManager.batch(()=>{D(this,pt).forEach(e=>{this.remove(e)})})}getAll(){return D(this,pt)}find(e){const r={exact:!0,...e};return D(this,pt).find(i=>matchMutation(r,i))}findAll(e={}){return D(this,pt).filter(r=>matchMutation(e,r))}notify(e){notifyManager.batch(()=>{this.listeners.forEach(r=>{r(e)})})}resumePausedMutations(){return K(this,zt,(D(this,zt)??Promise.resolve()).then(()=>{const e=D(this,pt).filter(r=>r.state.isPaused);return notifyManager.batch(()=>e.reduce((r,i)=>r.then(()=>i.continue().catch(noop$1)),Promise.resolve()))}).then(()=>{K(this,zt,void 0)})),D(this,zt)}},pt=new WeakMap,Zt=new WeakMap,zt=new WeakMap,ue);function infiniteQueryBehavior(t){return{onFetch:(e,r)=>{const i=async()=>{var g,y,T,u,d;const s=e.options,a=(T=(y=(g=e.fetchOptions)==null?void 0:g.meta)==null?void 0:y.fetchMore)==null?void 0:T.direction,n=((u=e.state.data)==null?void 0:u.pages)||[],l=((d=e.state.data)==null?void 0:d.pageParams)||[],o={pages:[],pageParams:[]};let p=!1;const b=f=>{Object.defineProperty(f,"signal",{enumerable:!0,get:()=>(e.signal.aborted?p=!0:e.signal.addEventListener("abort",()=>{p=!0}),e.signal)})},C=e.options.queryFn||(()=>Promise.reject(new Error(`Missing queryFn: '${e.options.queryHash}'`))),c=async(f,x,_)=>{if(p)return Promise.reject();if(x==null&&f.pages.length)return Promise.resolve(f);const A={queryKey:e.queryKey,pageParam:x,direction:_?"backward":"forward",meta:e.options.meta};b(A);const k=await C(A),{maxPages:F}=e.options,V=_?addToStart:addToEnd;return{pages:V(f.pages,k,F),pageParams:V(f.pageParams,x,F)}};let S;if(a&&n.length){const f=a==="backward",x=f?getPreviousPageParam:getNextPageParam,_={pages:n,pageParams:l},A=x(s,_);S=await c(_,A,f)}else{S=await c(o,l[0]??s.initialPageParam);const f=t??n.length;for(let x=1;x<f;x++){const _=getNextPageParam(s,S);S=await c(S,_)}}return S};e.options.persister?e.fetchFn=()=>{var s,a;return(a=(s=e.options).persister)==null?void 0:a.call(s,i,{queryKey:e.queryKey,meta:e.options.meta,signal:e.signal},r)}:e.fetchFn=i}}}function getNextPageParam(t,{pages:e,pageParams:r}){const i=e.length-1;return t.getNextPageParam(e[i],e,r[i],r)}function getPreviousPageParam(t,{pages:e,pageParams:r}){var i;return(i=t.getPreviousPageParam)==null?void 0:i.call(t,e[0],e,r[0],r)}function hasNextPage(t,e){return e?getNextPageParam(t,e)!=null:!1}function hasPreviousPage(t,e){return!e||!t.getPreviousPageParam?!1:getPreviousPageParam(t,e)!=null}var tt,Rt,Lt,Wt,$t,Vt,Kt,Qt,ce,QueryClient=(ce=class{constructor(t={}){Y(this,tt,void 0);Y(this,Rt,void 0);Y(this,Lt,void 0);Y(this,Wt,void 0);Y(this,$t,void 0);Y(this,Vt,void 0);Y(this,Kt,void 0);Y(this,Qt,void 0);K(this,tt,t.queryCache||new QueryCache),K(this,Rt,t.mutationCache||new MutationCache),K(this,Lt,t.defaultOptions||{}),K(this,Wt,new Map),K(this,$t,new Map),K(this,Vt,0)}mount(){ie(this,Vt)._++,D(this,Vt)===1&&(K(this,Kt,focusManager.subscribe(()=>{focusManager.isFocused()&&(this.resumePausedMutations(),D(this,tt).onFocus())})),K(this,Qt,onlineManager.subscribe(()=>{onlineManager.isOnline()&&(this.resumePausedMutations(),D(this,tt).onOnline())})))}unmount(){var t,e;ie(this,Vt)._--,D(this,Vt)===0&&((t=D(this,Kt))==null||t.call(this),K(this,Kt,void 0),(e=D(this,Qt))==null||e.call(this),K(this,Qt,void 0))}isFetching(t){return D(this,tt).findAll({...t,fetchStatus:"fetching"}).length}isMutating(t){return D(this,Rt).findAll({...t,status:"pending"}).length}getQueryData(t){var e;return(e=D(this,tt).find({queryKey:t}))==null?void 0:e.state.data}ensureQueryData(t){const e=this.getQueryData(t.queryKey);return e!==void 0?Promise.resolve(e):this.fetchQuery(t)}getQueriesData(t){return this.getQueryCache().findAll(t).map(({queryKey:e,state:r})=>{const i=r.data;return[e,i]})}setQueryData(t,e,r){const i=D(this,tt).find({queryKey:t}),s=i==null?void 0:i.state.data,a=functionalUpdate(e,s);if(typeof a>"u")return;const n=this.defaultQueryOptions({queryKey:t});return D(this,tt).build(this,n).setData(a,{...r,manual:!0})}setQueriesData(t,e,r){return notifyManager.batch(()=>this.getQueryCache().findAll(t).map(({queryKey:i})=>[i,this.setQueryData(i,e,r)]))}getQueryState(t){var e;return(e=D(this,tt).find({queryKey:t}))==null?void 0:e.state}removeQueries(t){const e=D(this,tt);notifyManager.batch(()=>{e.findAll(t).forEach(r=>{e.remove(r)})})}resetQueries(t,e){const r=D(this,tt),i={type:"active",...t};return notifyManager.batch(()=>(r.findAll(t).forEach(s=>{s.reset()}),this.refetchQueries(i,e)))}cancelQueries(t={},e={}){const r={revert:!0,...e},i=notifyManager.batch(()=>D(this,tt).findAll(t).map(s=>s.cancel(r)));return Promise.all(i).then(noop$1).catch(noop$1)}invalidateQueries(t={},e={}){return notifyManager.batch(()=>{if(D(this,tt).findAll(t).forEach(i=>{i.invalidate()}),t.refetchType==="none")return Promise.resolve();const r={...t,type:t.refetchType??t.type??"active"};return this.refetchQueries(r,e)})}refetchQueries(t={},e){const r={...e,cancelRefetch:(e==null?void 0:e.cancelRefetch)??!0},i=notifyManager.batch(()=>D(this,tt).findAll(t).filter(s=>!s.isDisabled()).map(s=>{let a=s.fetch(void 0,r);return r.throwOnError||(a=a.catch(noop$1)),s.state.fetchStatus==="paused"?Promise.resolve():a}));return Promise.all(i).then(noop$1)}fetchQuery(t){const e=this.defaultQueryOptions(t);typeof e.retry>"u"&&(e.retry=!1);const r=D(this,tt).build(this,e);return r.isStaleByTime(e.staleTime)?r.fetch(e):Promise.resolve(r.state.data)}prefetchQuery(t){return this.fetchQuery(t).then(noop$1).catch(noop$1)}fetchInfiniteQuery(t){return t.behavior=infiniteQueryBehavior(t.pages),this.fetchQuery(t)}prefetchInfiniteQuery(t){return this.fetchInfiniteQuery(t).then(noop$1).catch(noop$1)}resumePausedMutations(){return D(this,Rt).resumePausedMutations()}getQueryCache(){return D(this,tt)}getMutationCache(){return D(this,Rt)}getDefaultOptions(){return D(this,Lt)}setDefaultOptions(t){K(this,Lt,t)}setQueryDefaults(t,e){D(this,Wt).set(hashKey(t),{queryKey:t,defaultOptions:e})}getQueryDefaults(t){const e=[...D(this,Wt).values()];let r={};return e.forEach(i=>{partialMatchKey(t,i.queryKey)&&(r={...r,...i.defaultOptions})}),r}setMutationDefaults(t,e){D(this,$t).set(hashKey(t),{mutationKey:t,defaultOptions:e})}getMutationDefaults(t){const e=[...D(this,$t).values()];let r={};return e.forEach(i=>{partialMatchKey(t,i.mutationKey)&&(r={...r,...i.defaultOptions})}),r}defaultQueryOptions(t){if(t!=null&&t._defaulted)return t;const e={...D(this,Lt).queries,...(t==null?void 0:t.queryKey)&&this.getQueryDefaults(t.queryKey),...t,_defaulted:!0};return e.queryHash||(e.queryHash=hashQueryKeyByOptions(e.queryKey,e)),typeof e.refetchOnReconnect>"u"&&(e.refetchOnReconnect=e.networkMode!=="always"),typeof e.throwOnError>"u"&&(e.throwOnError=!!e.suspense),typeof e.networkMode>"u"&&e.persister&&(e.networkMode="offlineFirst"),e}defaultMutationOptions(t){return t!=null&&t._defaulted?t:{...D(this,Lt).mutations,...(t==null?void 0:t.mutationKey)&&this.getMutationDefaults(t.mutationKey),...t,_defaulted:!0}}clear(){D(this,tt).clear(),D(this,Rt).clear()}},tt=new WeakMap,Rt=new WeakMap,Lt=new WeakMap,Wt=new WeakMap,$t=new WeakMap,Vt=new WeakMap,Kt=new WeakMap,Qt=new WeakMap,ce),Dt,_t,ht,At,Ut,ae,Jt,oe,de,MutationObserver$1=(de=class extends Subscribable{constructor(r,i){super();Y(this,Ut);Y(this,Jt);Y(this,Dt,void 0);Y(this,_t,void 0);Y(this,ht,void 0);Y(this,At,void 0);K(this,_t,void 0),K(this,Dt,r),this.setOptions(i),this.bindMethods(),Z(this,Ut,ae).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(r){var s;const i=this.options;this.options=D(this,Dt).defaultMutationOptions(r),shallowEqualObjects(i,this.options)||D(this,Dt).getMutationCache().notify({type:"observerOptionsUpdated",mutation:D(this,ht),observer:this}),(s=D(this,ht))==null||s.setOptions(this.options),i!=null&&i.mutationKey&&this.options.mutationKey&&hashKey(i.mutationKey)!==hashKey(this.options.mutationKey)&&this.reset()}onUnsubscribe(){var r;this.hasListeners()||(r=D(this,ht))==null||r.removeObserver(this)}onMutationUpdate(r){Z(this,Ut,ae).call(this),Z(this,Jt,oe).call(this,r)}getCurrentResult(){return D(this,_t)}reset(){var r;(r=D(this,ht))==null||r.removeObserver(this),K(this,ht,void 0),Z(this,Ut,ae).call(this),Z(this,Jt,oe).call(this)}mutate(r,i){var s;return K(this,At,i),(s=D(this,ht))==null||s.removeObserver(this),K(this,ht,D(this,Dt).getMutationCache().build(D(this,Dt),this.options)),D(this,ht).addObserver(this),D(this,ht).execute(r)}},Dt=new WeakMap,_t=new WeakMap,ht=new WeakMap,At=new WeakMap,Ut=new WeakSet,ae=function(){var i;const r=((i=D(this,ht))==null?void 0:i.state)??getDefaultState();K(this,_t,{...r,isPending:r.status==="pending",isSuccess:r.status==="success",isError:r.status==="error",isIdle:r.status==="idle",mutate:this.mutate,reset:this.reset})},Jt=new WeakSet,oe=function(r){notifyManager.batch(()=>{var i,s,a,n,l,o,p,b;if(D(this,At)&&this.hasListeners()){const C=D(this,_t).variables,c=D(this,_t).context;(r==null?void 0:r.type)==="success"?((s=(i=D(this,At)).onSuccess)==null||s.call(i,r.data,C,c),(n=(a=D(this,At)).onSettled)==null||n.call(a,r.data,null,C,c)):(r==null?void 0:r.type)==="error"&&((o=(l=D(this,At)).onError)==null||o.call(l,r.error,C,c),(b=(p=D(this,At)).onSettled)==null||b.call(p,void 0,r.error,C,c))}this.listeners.forEach(C=>{C(D(this,_t))})})},de);function useMutation(t,e){const r=useQueryClient(e),[i]=reactExports.useState(()=>new MutationObserver$1(r,t));reactExports.useEffect(()=>{i.setOptions(t)},[i,t]);const s=reactExports.useSyncExternalStore(reactExports.useCallback(n=>i.subscribe(notifyManager.batchCalls(n)),[i]),()=>i.getCurrentResult(),()=>i.getCurrentResult()),a=reactExports.useCallback((n,l)=>{i.mutate(n,l).catch(noop)},[i]);if(s.error&&shouldThrowError(i.options.throwOnError,[s.error]))throw s.error;return{...s,mutate:a,mutateAsync:s.mutate}}function noop(){}const useSigninMutation=()=>useMutation({mutationKey:["signin"],mutationFn:async({email:t,password:e})=>(await apiClient.post("auth/jwt/create/",{email:t,password:e})).data,onSuccess:async t=>{await localStorage.setItem("token",t.access),await localStorage.setItem("refreshToken",t.refresh)}}),useRefreshToken=async()=>{let t=!1;return await apiClient.post("auth/jwt/refresh/",{refresh:localStorage.getItem("refreshToken")}).then(async e=>{console.log("refresh token antes de guardar",localStorage.getItem("refreshToken")),await localStorage.setItem("token",e.data.access),await console.log("refresh token despues de guardar",localStorage.getItem("refreshToken")),t=!0}).catch(e=>{console.log(e,"error aqui estoy en useRefreshTokenMutation"),localStorage.removeItem("token"),localStorage.removeItem("refreshToken"),t=!1}),t},useVerfyToken=async()=>{let t=!1;return await apiClient.post("auth/jwt/verify/",{token:localStorage.getItem("token")}).then(()=>{t=!0}).catch(async e=>{console.log(e,"error aqui estoy en useVerfyTokenMutation");const r=await useRefreshToken();console.log(r,"successrefresh aqui estoy en useVerfyTokenMutation"),r&&(t=!0)}),t},AuthContext=reactExports.createContext({isTokenValid:!1,validateToken:async()=>{},logout:async()=>{}});function AuthProvider({children:t}){const[e,r]=reactExports.useState(!1),i=async()=>{console.log("logout"),await localStorage.removeItem("token"),await localStorage.removeItem("refreshToken"),r(!1)},s=async()=>{if(!await localStorage.getItem("token")){console.log("no hay token"),r(!1);return}if(await useVerfyToken()){console.log("token valido"),r(!0);return}};return jsxRuntimeExports.jsx(AuthContext.Provider,{value:{isTokenValid:e,validateToken:s,logout:i},children:t})}function useAuth(){const t=reactExports.useContext(AuthContext);if(!t)throw new Error("useAuth must be used within an AuthProvider");return t}function ProtectedRoute(){const t=useAuth();return reactExports.useEffect(()=>{t.validateToken()},[]),t.isTokenValid?jsxRuntimeExports.jsx(Outlet,{}):jsxRuntimeExports.jsx(Navigate,{to:"/login"})}const bootstrap_min="",index="";var ReactQueryDevtools2=function(){return null};const createSitemap=(t,e)=>`
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            ${t.map(s=>{const a=new URL(e+s.path);let n="monthly",l=.5,o=new Date().toISOString().split("T")[0];return s.path==="/"?l=1:s.path==="/servicios"?l=.9:s.path==="/aboutUs"&&(l=.8),`
            <url>
                <loc>${a.href}</loc>
                <lastmod>${o}</lastmod>
                <changefreq>${n}</changefreq>
                <priority>${l}</priority>
            </url>
        `}).join(`
`)}
        </urlset>
    `,Sitemap=()=>{const r=createSitemap([{path:"/"},{path:"/login"},{path:"/aboutUs"},{path:"/services_topografia"},{path:"/services_ingenieria"},{path:"/services_ambiental"},{path:"/servicios"},{path:"/servicios/:id"},{path:"/projects"},{path:"/projects/:id"},{path:"/contact"},{path:"/blog"},{path:"/blog/:id"},{path:"/",children:[{path:"/cotizador"}]}],APIURL);return jsxRuntimeExports.jsx("pre",{children:r})};var lottie$1={exports:{}};(function(module,exports){typeof navigator<"u"&&function(t,e){module.exports=e()}(commonjsGlobal,function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(e){_useWebWorker=!!e},getWebWorker=function(){return _useWebWorker},setLocationHref=function(e){locationHref=e},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,i=t.length,s;for(r=0;r<i;r+=1){s=t[r].prototype;for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e.prototype[a]=s[a])}}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(e){this.audios=[],this.audioFactory=e,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(r){this.audios.push(r)},pause:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].pause()},resume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].resume()},setRate:function(r){var i,s=this.audios.length;for(i=0;i<s;i+=1)this.audios[i].setRate(r)},createAudio:function(r){return this.audioFactory?this.audioFactory(r):window.Howl?new window.Howl({src:[r]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(r){this.audioFactory=r},setVolume:function(r){this._volume=r,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(r,i){var s=0,a=[],n;switch(r){case"int16":case"uint8c":n=1;break;default:n=1.1;break}for(s=0;s<i;s+=1)a.push(n);return a}function e(r,i){return r==="float32"?new Float32Array(i):r==="int16"?new Int16Array(i):r==="uint8c"?new Uint8ClampedArray(i):t(r,i)}return typeof Uint8ClampedArray=="function"&&typeof Float32Array=="function"?e:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$6=function(r){return typeof r}:_typeof$6=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};(function(){var t=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],e,r=t.length;for(e=0;e<r;e+=1)BMMath[t[e]]=Math[t[e]]})(),BMMath.random=Math.random,BMMath.abs=function(t){var e=_typeof$6(t);if(e==="object"&&t.length){var r=createSizedArray(t.length),i,s=t.length;for(i=0;i<s;i+=1)r[i]=Math.abs(t[i]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,i){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=i<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,i){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=i<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}var createElementID=function(){var t=0;return function(){return t+=1,idPrefix$1+"__lottie_element_"+t}}();function HSVtoRGB(t,e,r){var i,s,a,n,l,o,p,b;switch(n=Math.floor(t*6),l=t*6-n,o=r*(1-e),p=r*(1-l*e),b=r*(1-(1-l)*e),n%6){case 0:i=r,s=b,a=o;break;case 1:i=p,s=r,a=o;break;case 2:i=o,s=r,a=b;break;case 3:i=o,s=p,a=r;break;case 4:i=b,s=o,a=r;break;case 5:i=r,s=o,a=p;break}return[i,s,a]}function RGBtoHSV(t,e,r){var i=Math.max(t,e,r),s=Math.min(t,e,r),a=i-s,n,l=i===0?0:a/i,o=i/255;switch(i){case s:n=0;break;case t:n=e-r+a*(e<r?6:0),n/=6*a;break;case e:n=r-t+a*2,n/=6*a;break;case r:n=t-e+a*4,n/=6*a;break}return[n,l,o]}function addSaturationToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t=[],e,r;for(e=0;e<256;e+=1)r=e.toString(16),t[e]=r.length===1?"0"+r:r;return function(i,s,a){return i<0&&(i=0),s<0&&(s=0),a<0&&(a=0),"#"+t[i]+t[s]+t[a]}}(),setSubframeEnabled=function(e){subframeEnabled=!!e},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(e){expressionsPlugin=e},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(e){expressionsInterfaces=e},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(e){defaultCurveSegments=e},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(e){idPrefix$1=e};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$5=function(r){return typeof r}:_typeof$5=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$5(t)}var dataManager=function(){var t=1,e=[],r,i,s={onmessage:function(){},postMessage:function(S){r({data:S})}},a={postMessage:function(S){s.onmessage({data:S})}};function n(c){if(window.Worker&&window.Blob&&getWebWorker()){var S=new Blob(["var _workerSelf = self; self.onmessage = ",c.toString()],{type:"text/javascript"}),g=URL.createObjectURL(S);return new Worker(g)}return r=c,s}function l(){i||(i=n(function(S){function g(){function T(B,M){var I,P,E=B.length,L,R,G,j;for(P=0;P<E;P+=1)if(I=B[P],"ks"in I&&!I.completed){if(I.completed=!0,I.hasMask){var N=I.masksProperties;for(R=N.length,L=0;L<R;L+=1)if(N[L].pt.k.i)_(N[L].pt.k);else for(j=N[L].pt.k.length,G=0;G<j;G+=1)N[L].pt.k[G].s&&_(N[L].pt.k[G].s[0]),N[L].pt.k[G].e&&_(N[L].pt.k[G].e[0])}I.ty===0?(I.layers=f(I.refId,M),T(I.layers,M)):I.ty===4?x(I.shapes):I.ty===5&&H(I)}}function u(B,M){if(B){var I=0,P=B.length;for(I=0;I<P;I+=1)B[I].t===1&&(B[I].data.layers=f(B[I].data.refId,M),T(B[I].data.layers,M))}}function d(B,M){for(var I=0,P=M.length;I<P;){if(M[I].id===B)return M[I];I+=1}return null}function f(B,M){var I=d(B,M);return I?I.layers.__used?JSON.parse(JSON.stringify(I.layers)):(I.layers.__used=!0,I.layers):null}function x(B){var M,I=B.length,P,E;for(M=I-1;M>=0;M-=1)if(B[M].ty==="sh")if(B[M].ks.k.i)_(B[M].ks.k);else for(E=B[M].ks.k.length,P=0;P<E;P+=1)B[M].ks.k[P].s&&_(B[M].ks.k[P].s[0]),B[M].ks.k[P].e&&_(B[M].ks.k[P].e[0]);else B[M].ty==="gr"&&x(B[M].it)}function _(B){var M,I=B.i.length;for(M=0;M<I;M+=1)B.i[M][0]+=B.v[M][0],B.i[M][1]+=B.v[M][1],B.o[M][0]+=B.v[M][0],B.o[M][1]+=B.v[M][1]}function A(B,M){var I=M?M.split("."):[100,100,100];return B[0]>I[0]?!0:I[0]>B[0]?!1:B[1]>I[1]?!0:I[1]>B[1]?!1:B[2]>I[2]?!0:I[2]>B[2]?!1:null}var k=function(){var B=[4,4,14];function M(P){var E=P.t.d;P.t.d={k:[{s:E,t:0}]}}function I(P){var E,L=P.length;for(E=0;E<L;E+=1)P[E].ty===5&&M(P[E])}return function(P){if(A(B,P.v)&&(I(P.layers),P.assets)){var E,L=P.assets.length;for(E=0;E<L;E+=1)P.assets[E].layers&&I(P.assets[E].layers)}}}(),F=function(){var B=[4,7,99];return function(M){if(M.chars&&!A(B,M.v)){var I,P=M.chars.length;for(I=0;I<P;I+=1){var E=M.chars[I];E.data&&E.data.shapes&&(x(E.data.shapes),E.data.ip=0,E.data.op=99999,E.data.st=0,E.data.sr=1,E.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},M.chars[I].t||(E.data.shapes.push({ty:"no"}),E.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}}(),V=function(){var B=[5,7,15];function M(P){var E=P.t.p;typeof E.a=="number"&&(E.a={a:0,k:E.a}),typeof E.p=="number"&&(E.p={a:0,k:E.p}),typeof E.r=="number"&&(E.r={a:0,k:E.r})}function I(P){var E,L=P.length;for(E=0;E<L;E+=1)P[E].ty===5&&M(P[E])}return function(P){if(A(B,P.v)&&(I(P.layers),P.assets)){var E,L=P.assets.length;for(E=0;E<L;E+=1)P.assets[E].layers&&I(P.assets[E].layers)}}}(),W=function(){var B=[4,1,9];function M(P){var E,L=P.length,R,G;for(E=0;E<L;E+=1)if(P[E].ty==="gr")M(P[E].it);else if(P[E].ty==="fl"||P[E].ty==="st")if(P[E].c.k&&P[E].c.k[0].i)for(G=P[E].c.k.length,R=0;R<G;R+=1)P[E].c.k[R].s&&(P[E].c.k[R].s[0]/=255,P[E].c.k[R].s[1]/=255,P[E].c.k[R].s[2]/=255,P[E].c.k[R].s[3]/=255),P[E].c.k[R].e&&(P[E].c.k[R].e[0]/=255,P[E].c.k[R].e[1]/=255,P[E].c.k[R].e[2]/=255,P[E].c.k[R].e[3]/=255);else P[E].c.k[0]/=255,P[E].c.k[1]/=255,P[E].c.k[2]/=255,P[E].c.k[3]/=255}function I(P){var E,L=P.length;for(E=0;E<L;E+=1)P[E].ty===4&&M(P[E].shapes)}return function(P){if(A(B,P.v)&&(I(P.layers),P.assets)){var E,L=P.assets.length;for(E=0;E<L;E+=1)P.assets[E].layers&&I(P.assets[E].layers)}}}(),z=function(){var B=[4,4,18];function M(P){var E,L=P.length,R,G;for(E=L-1;E>=0;E-=1)if(P[E].ty==="sh")if(P[E].ks.k.i)P[E].ks.k.c=P[E].closed;else for(G=P[E].ks.k.length,R=0;R<G;R+=1)P[E].ks.k[R].s&&(P[E].ks.k[R].s[0].c=P[E].closed),P[E].ks.k[R].e&&(P[E].ks.k[R].e[0].c=P[E].closed);else P[E].ty==="gr"&&M(P[E].it)}function I(P){var E,L,R=P.length,G,j,N,Q;for(L=0;L<R;L+=1){if(E=P[L],E.hasMask){var U=E.masksProperties;for(j=U.length,G=0;G<j;G+=1)if(U[G].pt.k.i)U[G].pt.k.c=U[G].cl;else for(Q=U[G].pt.k.length,N=0;N<Q;N+=1)U[G].pt.k[N].s&&(U[G].pt.k[N].s[0].c=U[G].cl),U[G].pt.k[N].e&&(U[G].pt.k[N].e[0].c=U[G].cl)}E.ty===4&&M(E.shapes)}}return function(P){if(A(B,P.v)&&(I(P.layers),P.assets)){var E,L=P.assets.length;for(E=0;E<L;E+=1)P.assets[E].layers&&I(P.assets[E].layers)}}}();function O(B){B.__complete||(W(B),k(B),F(B),V(B),z(B),T(B.layers,B.assets),u(B.chars,B.assets),B.__complete=!0)}function H(B){B.t.a.length===0&&"m"in B.t.p}var q={};return q.completeData=O,q.checkColors=W,q.checkChars=F,q.checkPathProperties=V,q.checkShapes=z,q.completeLayers=T,q}if(a.dataManager||(a.dataManager=g()),a.assetLoader||(a.assetLoader=function(){function T(d){var f=d.getResponseHeader("content-type");return f&&d.responseType==="json"&&f.indexOf("json")!==-1||d.response&&_typeof$5(d.response)==="object"?d.response:d.response&&typeof d.response=="string"?JSON.parse(d.response):d.responseText?JSON.parse(d.responseText):null}function u(d,f,x,_){var A,k=new XMLHttpRequest;try{k.responseType="json"}catch{}k.onreadystatechange=function(){if(k.readyState===4)if(k.status===200)A=T(k),x(A);else try{A=T(k),x(A)}catch(F){_&&_(F)}};try{k.open(["G","E","T"].join(""),d,!0)}catch{k.open(["G","E","T"].join(""),f+"/"+d,!0)}k.send()}return{load:u}}()),S.data.type==="loadAnimation")a.assetLoader.load(S.data.path,S.data.fullPath,function(T){a.dataManager.completeData(T),a.postMessage({id:S.data.id,payload:T,status:"success"})},function(){a.postMessage({id:S.data.id,status:"error"})});else if(S.data.type==="complete"){var y=S.data.animation;a.dataManager.completeData(y),a.postMessage({id:S.data.id,payload:y,status:"success"})}else S.data.type==="loadData"&&a.assetLoader.load(S.data.path,S.data.fullPath,function(T){a.postMessage({id:S.data.id,payload:T,status:"success"})},function(){a.postMessage({id:S.data.id,status:"error"})})}),i.onmessage=function(c){var S=c.data,g=S.id,y=e[g];e[g]=null,S.status==="success"?y.onComplete(S.payload):y.onError&&y.onError()})}function o(c,S){t+=1;var g="processId_"+t;return e[g]={onComplete:c,onError:S},g}function p(c,S,g){l();var y=o(S,g);i.postMessage({type:"loadAnimation",path:c,fullPath:window.location.origin+window.location.pathname,id:y})}function b(c,S,g){l();var y=o(S,g);i.postMessage({type:"loadData",path:c,fullPath:window.location.origin+window.location.pathname,id:y})}function C(c,S,g){l();var y=o(S,g);i.postMessage({type:"complete",animation:c,id:y})}return{loadAnimation:p,loadData:b,completeAnimation:C}}(),ImagePreloader=function(){var t=function(){var u=createTag("canvas");u.width=1,u.height=1;var d=u.getContext("2d");return d.fillStyle="rgba(0,0,0,0)",d.fillRect(0,0,1,1),u}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function i(u,d,f){var x="";if(u.e)x=u.p;else if(d){var _=u.p;_.indexOf("images/")!==-1&&(_=_.split("/")[1]),x=d+_}else x=f,x+=u.u?u.u:"",x+=u.p;return x}function s(u){var d=0,f=setInterval((function(){var x=u.getBBox();(x.width||d>500)&&(this._imageLoaded(),clearInterval(f)),d+=1}).bind(this),50)}function a(u){var d=i(u,this.assetsPath,this.path),f=createNS("image");isSafari?this.testImageLoaded(f):f.addEventListener("load",this._imageLoaded,!1),f.addEventListener("error",(function(){x.img=t,this._imageLoaded()}).bind(this),!1),f.setAttributeNS("http://www.w3.org/1999/xlink","href",d),this._elementHelper.append?this._elementHelper.append(f):this._elementHelper.appendChild(f);var x={img:f,assetData:u};return x}function n(u){var d=i(u,this.assetsPath,this.path),f=createTag("img");f.crossOrigin="anonymous",f.addEventListener("load",this._imageLoaded,!1),f.addEventListener("error",(function(){x.img=t,this._imageLoaded()}).bind(this),!1),f.src=d;var x={img:f,assetData:u};return x}function l(u){var d={assetData:u},f=i(u,this.assetsPath,this.path);return dataManager.loadData(f,(function(x){d.img=x,this._footageLoaded()}).bind(this),(function(){d.img={},this._footageLoaded()}).bind(this)),d}function o(u,d){this.imagesLoadedCb=d;var f,x=u.length;for(f=0;f<x;f+=1)u[f].layers||(!u[f].t||u[f].t==="seq"?(this.totalImages+=1,this.images.push(this._createImageData(u[f]))):u[f].t===3&&(this.totalFootages+=1,this.images.push(this.createFootageData(u[f]))))}function p(u){this.path=u||""}function b(u){this.assetsPath=u||""}function C(u){for(var d=0,f=this.images.length;d<f;){if(this.images[d].assetData===u)return this.images[d].img;d+=1}return null}function c(){this.imagesLoadedCb=null,this.images.length=0}function S(){return this.totalImages===this.loadedAssets}function g(){return this.totalFootages===this.loadedFootagesCount}function y(u,d){u==="svg"?(this._elementHelper=d,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}function T(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=s.bind(this),this.createFootageData=l.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return T.prototype={loadAssets:o,setAssetsPath:b,setPath:p,loadedImages:S,loadedFootages:g,destroy:c,getAsset:C,createImgData:n,createImageData:a,imageLoaded:e,footageLoaded:r,setCacheType:y},T}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(e,r){if(this._cbs[e])for(var i=this._cbs[e],s=0;s<i.length;s+=1)i[s](r)},addEventListener:function(e,r){return this._cbs[e]||(this._cbs[e]=[]),this._cbs[e].push(r),(function(){this.removeEventListener(e,r)}).bind(this)},removeEventListener:function(e,r){if(!r)this._cbs[e]=null;else if(this._cbs[e]){for(var i=0,s=this._cbs[e].length;i<s;)this._cbs[e][i]===r&&(this._cbs[e].splice(i,1),i-=1,s-=1),i+=1;this._cbs[e].length||(this._cbs[e]=null)}}};var markerParser=function(){function t(e){for(var r=e.split(`\r
`),i={},s,a=0,n=0;n<r.length;n+=1)s=r[n].split(":"),s.length===2&&(i[s[0]]=s[1].trim(),a+=1);if(a===0)throw new Error;return i}return function(e){for(var r=[],i=0;i<e.length;i+=1){var s=e[i],a={time:s.tm,duration:s.dr};try{a.payload=JSON.parse(e[i].cm)}catch{try{a.payload=t(e[i].cm)}catch{a.payload={name:e[i].cm}}}r.push(a)}return r}}(),ProjectInterface=function(){function t(e){this.compositions.push(e)}return function(){function e(r){for(var i=0,s=this.compositions.length;i<s;){if(this.compositions[i].data&&this.compositions[i].data.nm===r)return this.compositions[i].prepareFrame&&this.compositions[i].data.xt&&this.compositions[i].prepareFrame(this.currentFrame),this.compositions[i].compInterface;i+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(e,r){renderers[e]=r};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$4=function(r){return typeof r}:_typeof$4=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,t.loop===""||t.loop===null||t.loop===void 0||t.loop===!0?this.loop=!0:t.loop===!1?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay="autoplay"in t?t.autoplay:!0,this.name=t.name?t.name:"",this.autoloadSegments=Object.prototype.hasOwnProperty.call(t,"autoloadSegments")?t.autoloadSegments:!0,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(t.path.lastIndexOf("\\")!==-1?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&_typeof$4(e)!=="object"&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},i=t.attributes;r.path=i.getNamedItem("data-animation-path")?i.getNamedItem("data-animation-path").value:i.getNamedItem("data-bm-path")?i.getNamedItem("data-bm-path").value:i.getNamedItem("bm-path")?i.getNamedItem("bm-path").value:"",r.animType=i.getNamedItem("data-anim-type")?i.getNamedItem("data-anim-type").value:i.getNamedItem("data-bm-type")?i.getNamedItem("data-bm-type").value:i.getNamedItem("bm-type")?i.getNamedItem("bm-type").value:i.getNamedItem("data-bm-renderer")?i.getNamedItem("data-bm-renderer").value:i.getNamedItem("bm-renderer")?i.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var s=i.getNamedItem("data-anim-loop")?i.getNamedItem("data-anim-loop").value:i.getNamedItem("data-bm-loop")?i.getNamedItem("data-bm-loop").value:i.getNamedItem("bm-loop")?i.getNamedItem("bm-loop").value:"";s==="false"?r.loop=!1:s==="true"?r.loop=!0:s!==""&&(r.loop=parseInt(s,10));var a=i.getNamedItem("data-anim-autoplay")?i.getNamedItem("data-anim-autoplay").value:i.getNamedItem("data-bm-autoplay")?i.getNamedItem("data-bm-autoplay").value:i.getNamedItem("bm-autoplay")?i.getNamedItem("bm-autoplay").value:!0;r.autoplay=a!=="false",r.name=i.getNamedItem("data-name")?i.getNamedItem("data-name").value:i.getNamedItem("data-bm-name")?i.getNamedItem("data-bm-name").value:i.getNamedItem("bm-name")?i.getNamedItem("bm-name").value:"";var n=i.getNamedItem("data-anim-prerender")?i.getNamedItem("data-anim-prerender").value:i.getNamedItem("data-bm-prerender")?i.getNamedItem("data-bm-prerender").value:i.getNamedItem("bm-prerender")?i.getNamedItem("bm-prerender").value:"";n==="false"&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e=this.animationData.layers,r,i=e.length,s=t.layers,a,n=s.length;for(a=0;a<n;a+=1)for(r=0;r<i;){if(e[r].id===s[a].id){e[r]=s[a];break}r+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,r=0;r<i;r+=1)this.animationData.assets.push(t.assets[r]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||t.length===0||!this.autoloadSegments){this.trigger("data_ready"),this.timeCompleted=this.totalFrames;return}var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),(function(){this.trigger("data_failed")}).bind(this))},AnimationItem.prototype.loadSegments=function(){var t=this.animationData.segments;t||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(e){this.triggerConfigError(e)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=="canvas")&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout((function(){this.trigger("DOMLoaded")}).bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r=typeof t=="number"?t:void 0,i=typeof e=="number"?e:void 0;this.renderer.updateContainerSize(r,i)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!(this.isLoaded===!1||!this.renderer))try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||this.isPaused===!0&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||this.isPaused===!1&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(this.isPaused===!0?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if(e=this.markers[r],e.payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&this.goToAndStop(s.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&(s.duration?this.playSegments([s.time,s.time+s.duration],!0):this.goToAndStop(s.time,!0))}else this.goToAndStop(i,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!(this.isPaused===!0||this.isLoaded===!1)){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?!this.loop||this.playCount===this.loop?this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):e<0?this.checkSegments(e%this.totalFrames)||(this.loop&&!(this.playCount--<=0&&this.loop!==!0)?(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0):(r=!0,e=0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,r!==-1&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),_typeof$4(t[0])==="object"){var r,i=t.length;for(r=0;r<i;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return this.segments.length?(this.adjustSegment(this.segments.shift(),t),!0):!1},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;r.indexOf("images/")!==-1&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{var i=this.renderer.getElementByPath(t);i.updateDocumentData(e,r)}catch{}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}t==="enterFrame"&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),t==="loopComplete"&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),t==="complete"&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),t==="segmentStart"&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),t==="destroy"&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,i=0,s=0,a=!0,n=!1;function l(M){for(var I=0,P=M.target;I<i;)e[I].animation===P&&(e.splice(I,1),I-=1,i-=1,P.isPaused||C()),I+=1}function o(M,I){if(!M)return null;for(var P=0;P<i;){if(e[P].elem===M&&e[P].elem!==null)return e[P].animation;P+=1}var E=new AnimationItem;return c(E,M),E.setData(M,I),E}function p(){var M,I=e.length,P=[];for(M=0;M<I;M+=1)P.push(e[M].animation);return P}function b(){s+=1,W()}function C(){s-=1}function c(M,I){M.addEventListener("destroy",l),M.addEventListener("_active",b),M.addEventListener("_idle",C),e.push({elem:I,animation:M}),i+=1}function S(M){var I=new AnimationItem;return c(I,null),I.setParams(M),I}function g(M,I){var P;for(P=0;P<i;P+=1)e[P].animation.setSpeed(M,I)}function y(M,I){var P;for(P=0;P<i;P+=1)e[P].animation.setDirection(M,I)}function T(M){var I;for(I=0;I<i;I+=1)e[I].animation.play(M)}function u(M){var I=M-r,P;for(P=0;P<i;P+=1)e[P].animation.advanceTime(I);r=M,s&&!n?window.requestAnimationFrame(u):a=!0}function d(M){r=M,window.requestAnimationFrame(u)}function f(M){var I;for(I=0;I<i;I+=1)e[I].animation.pause(M)}function x(M,I,P){var E;for(E=0;E<i;E+=1)e[E].animation.goToAndStop(M,I,P)}function _(M){var I;for(I=0;I<i;I+=1)e[I].animation.stop(M)}function A(M){var I;for(I=0;I<i;I+=1)e[I].animation.togglePause(M)}function k(M){var I;for(I=i-1;I>=0;I-=1)e[I].animation.destroy(M)}function F(M,I,P){var E=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),L,R=E.length;for(L=0;L<R;L+=1)P&&E[L].setAttribute("data-bm-type",P),o(E[L],M);if(I&&R===0){P||(P="svg");var G=document.getElementsByTagName("body")[0];G.innerText="";var j=createTag("div");j.style.width="100%",j.style.height="100%",j.setAttribute("data-bm-type",P),G.appendChild(j),o(j,M)}}function V(){var M;for(M=0;M<i;M+=1)e[M].animation.resize()}function W(){!n&&s&&a&&(window.requestAnimationFrame(d),a=!1)}function z(){n=!0}function O(){n=!1,W()}function H(M,I){var P;for(P=0;P<i;P+=1)e[P].animation.setVolume(M,I)}function q(M){var I;for(I=0;I<i;I+=1)e[I].animation.mute(M)}function B(M){var I;for(I=0;I<i;I+=1)e[I].animation.unmute(M)}return t.registerAnimation=o,t.loadAnimation=S,t.setSpeed=g,t.setDirection=y,t.play=T,t.pause=f,t.stop=_,t.togglePause=A,t.searchAnimations=F,t.resize=V,t.goToAndStop=x,t.destroy=k,t.freeze=z,t.unfreeze=O,t.setVolume=H,t.mute=q,t.unmute=B,t.getRegisteredAnimations=p,t}(),BezierFactory=function(){var t={};t.getBezierEasing=r;var e={};function r(d,f,x,_,A){var k=A||("bez_"+d+"_"+f+"_"+x+"_"+_).replace(/\./g,"p");if(e[k])return e[k];var F=new u([d,f,x,_]);return e[k]=F,F}var i=4,s=.001,a=1e-7,n=10,l=11,o=1/(l-1),p=typeof Float32Array=="function";function b(d,f){return 1-3*f+3*d}function C(d,f){return 3*f-6*d}function c(d){return 3*d}function S(d,f,x){return((b(f,x)*d+C(f,x))*d+c(f))*d}function g(d,f,x){return 3*b(f,x)*d*d+2*C(f,x)*d+c(f)}function y(d,f,x,_,A){var k,F,V=0;do F=f+(x-f)/2,k=S(F,_,A)-d,k>0?x=F:f=F;while(Math.abs(k)>a&&++V<n);return F}function T(d,f,x,_){for(var A=0;A<i;++A){var k=g(f,x,_);if(k===0)return f;var F=S(f,x,_)-d;f-=F/k}return f}function u(d){this._p=d,this._mSampleValues=p?new Float32Array(l):new Array(l),this._precomputed=!1,this.get=this.get.bind(this)}return u.prototype={get:function(f){var x=this._p[0],_=this._p[1],A=this._p[2],k=this._p[3];return this._precomputed||this._precompute(),x===_&&A===k?f:f===0?0:f===1?1:S(this._getTForX(f),_,k)},_precompute:function(){var f=this._p[0],x=this._p[1],_=this._p[2],A=this._p[3];this._precomputed=!0,(f!==x||_!==A)&&this._calcSampleValues()},_calcSampleValues:function(){for(var f=this._p[0],x=this._p[2],_=0;_<l;++_)this._mSampleValues[_]=S(_*o,f,x)},_getTForX:function(f){for(var x=this._p[0],_=this._p[2],A=this._mSampleValues,k=0,F=1,V=l-1;F!==V&&A[F]<=f;++F)k+=o;--F;var W=(f-A[F])/(A[F+1]-A[F]),z=k+W*o,O=g(z,x,_);return O>=s?T(f,z,x,_):O===0?z:y(f,k,k+o,x,_)}},t}(),pooling=function(){function t(e){return e.concat(createSizedArray(e.length))}return{double:t}}(),poolFactory=function(){return function(t,e,r){var i=0,s=t,a=createSizedArray(s),n={newElement:l,release:o};function l(){var p;return i?(i-=1,p=a[i]):p=e(),p}function o(p){i===s&&(a=pooling.double(a),s*=2),r&&r(p),a[i]=p,i+=1}return n}}(),bezierLengthPool=function(){function t(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}return poolFactory(8,t)}(),segmentsLengthPool=function(){function t(){return{lengths:[],totalLength:0}}function e(r){var i,s=r.lengths.length;for(i=0;i<s;i+=1)bezierLengthPool.release(r.lengths[i]);r.lengths.length=0}return poolFactory(8,t,e)}();function bezFunction(){var t=Math;function e(c,S,g,y,T,u){var d=c*y+S*T+g*u-T*y-u*c-g*S;return d>-.001&&d<.001}function r(c,S,g,y,T,u,d,f,x){if(g===0&&u===0&&x===0)return e(c,S,y,T,d,f);var _=t.sqrt(t.pow(y-c,2)+t.pow(T-S,2)+t.pow(u-g,2)),A=t.sqrt(t.pow(d-c,2)+t.pow(f-S,2)+t.pow(x-g,2)),k=t.sqrt(t.pow(d-y,2)+t.pow(f-T,2)+t.pow(x-u,2)),F;return _>A?_>k?F=_-A-k:F=k-A-_:k>A?F=k-A-_:F=A-_-k,F>-1e-4&&F<1e-4}var i=function(){return function(c,S,g,y){var T=getDefaultCurveSegments(),u,d,f,x,_,A=0,k,F=[],V=[],W=bezierLengthPool.newElement();for(f=g.length,u=0;u<T;u+=1){for(_=u/(T-1),k=0,d=0;d<f;d+=1)x=bmPow(1-_,3)*c[d]+3*bmPow(1-_,2)*_*g[d]+3*(1-_)*bmPow(_,2)*y[d]+bmPow(_,3)*S[d],F[d]=x,V[d]!==null&&(k+=bmPow(F[d]-V[d],2)),V[d]=F[d];k&&(k=bmSqrt(k),A+=k),W.percents[u]=_,W.lengths[u]=A}return W.addedLength=A,W}}();function s(c){var S=segmentsLengthPool.newElement(),g=c.c,y=c.v,T=c.o,u=c.i,d,f=c._length,x=S.lengths,_=0;for(d=0;d<f-1;d+=1)x[d]=i(y[d],y[d+1],T[d],u[d+1]),_+=x[d].addedLength;return g&&f&&(x[d]=i(y[d],y[0],T[d],u[0]),_+=x[d].addedLength),S.totalLength=_,S}function a(c){this.segmentLength=0,this.points=new Array(c)}function n(c,S){this.partialLength=c,this.point=S}var l=function(){var c={};return function(S,g,y,T){var u=(S[0]+"_"+S[1]+"_"+g[0]+"_"+g[1]+"_"+y[0]+"_"+y[1]+"_"+T[0]+"_"+T[1]).replace(/\./g,"p");if(!c[u]){var d=getDefaultCurveSegments(),f,x,_,A,k,F=0,V,W,z=null;S.length===2&&(S[0]!==g[0]||S[1]!==g[1])&&e(S[0],S[1],g[0],g[1],S[0]+y[0],S[1]+y[1])&&e(S[0],S[1],g[0],g[1],g[0]+T[0],g[1]+T[1])&&(d=2);var O=new a(d);for(_=y.length,f=0;f<d;f+=1){for(W=createSizedArray(_),k=f/(d-1),V=0,x=0;x<_;x+=1)A=bmPow(1-k,3)*S[x]+3*bmPow(1-k,2)*k*(S[x]+y[x])+3*(1-k)*bmPow(k,2)*(g[x]+T[x])+bmPow(k,3)*g[x],W[x]=A,z!==null&&(V+=bmPow(W[x]-z[x],2));V=bmSqrt(V),F+=V,O.points[f]=new n(V,W),z=W}O.segmentLength=F,c[u]=O}return c[u]}}();function o(c,S){var g=S.percents,y=S.lengths,T=g.length,u=bmFloor((T-1)*c),d=c*S.addedLength,f=0;if(u===T-1||u===0||d===y[u])return g[u];for(var x=y[u]>d?-1:1,_=!0;_;)if(y[u]<=d&&y[u+1]>d?(f=(d-y[u])/(y[u+1]-y[u]),_=!1):u+=x,u<0||u>=T-1){if(u===T-1)return g[u];_=!1}return g[u]+(g[u+1]-g[u])*f}function p(c,S,g,y,T,u){var d=o(T,u),f=1-d,x=t.round((f*f*f*c[0]+(d*f*f+f*d*f+f*f*d)*g[0]+(d*d*f+f*d*d+d*f*d)*y[0]+d*d*d*S[0])*1e3)/1e3,_=t.round((f*f*f*c[1]+(d*f*f+f*d*f+f*f*d)*g[1]+(d*d*f+f*d*d+d*f*d)*y[1]+d*d*d*S[1])*1e3)/1e3;return[x,_]}var b=createTypedArray("float32",8);function C(c,S,g,y,T,u,d){T<0?T=0:T>1&&(T=1);var f=o(T,d);u=u>1?1:u;var x=o(u,d),_,A=c.length,k=1-f,F=1-x,V=k*k*k,W=f*k*k*3,z=f*f*k*3,O=f*f*f,H=k*k*F,q=f*k*F+k*f*F+k*k*x,B=f*f*F+k*f*x+f*k*x,M=f*f*x,I=k*F*F,P=f*F*F+k*x*F+k*F*x,E=f*x*F+k*x*x+f*F*x,L=f*x*x,R=F*F*F,G=x*F*F+F*x*F+F*F*x,j=x*x*F+F*x*x+x*F*x,N=x*x*x;for(_=0;_<A;_+=1)b[_*4]=t.round((V*c[_]+W*g[_]+z*y[_]+O*S[_])*1e3)/1e3,b[_*4+1]=t.round((H*c[_]+q*g[_]+B*y[_]+M*S[_])*1e3)/1e3,b[_*4+2]=t.round((I*c[_]+P*g[_]+E*y[_]+L*S[_])*1e3)/1e3,b[_*4+3]=t.round((R*c[_]+G*g[_]+j*y[_]+N*S[_])*1e3)/1e3;return b}return{getSegmentsLength:s,getNewSegment:C,getPointInSegment:p,buildBezierData:l,pointOnLine2D:e,pointOnLine3D:r}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r=this.offsetTime,i;this.propType==="multidimensional"&&(i=createTypedArray("float32",this.pv.length));for(var s=e.lastIndex,a=s,n=this.keyframes.length-1,l=!0,o,p,b;l;){if(o=this.keyframes[a],p=this.keyframes[a+1],a===n-1&&t>=p.t-r){o.h&&(o=p),s=0;break}if(p.t-r>t){s=a;break}a<n-1?a+=1:(s=0,l=!1)}b=this.keyframesMetadata[a]||{};var C,c,S,g,y,T,u=p.t-r,d=o.t-r,f;if(o.to){b.bezierData||(b.bezierData=bez.buildBezierData(o.s,p.s||o.e,o.to,o.ti));var x=b.bezierData;if(t>=u||t<d){var _=t>=u?x.points.length-1:0;for(c=x.points[_].point.length,C=0;C<c;C+=1)i[C]=x.points[_].point[C]}else{b.__fnct?T=b.__fnct:(T=BezierFactory.getBezierEasing(o.o.x,o.o.y,o.i.x,o.i.y,o.n).get,b.__fnct=T),S=T((t-d)/(u-d));var A=x.segmentLength*S,k,F=e.lastFrame<t&&e._lastKeyframeIndex===a?e._lastAddedLength:0;for(y=e.lastFrame<t&&e._lastKeyframeIndex===a?e._lastPoint:0,l=!0,g=x.points.length;l;){if(F+=x.points[y].partialLength,A===0||S===0||y===x.points.length-1){for(c=x.points[y].point.length,C=0;C<c;C+=1)i[C]=x.points[y].point[C];break}else if(A>=F&&A<F+x.points[y+1].partialLength){for(k=(A-F)/x.points[y+1].partialLength,c=x.points[y].point.length,C=0;C<c;C+=1)i[C]=x.points[y].point[C]+(x.points[y+1].point[C]-x.points[y].point[C])*k;break}y<g-1?y+=1:l=!1}e._lastPoint=y,e._lastAddedLength=F-x.points[y].partialLength,e._lastKeyframeIndex=a}}else{var V,W,z,O,H;if(n=o.s.length,f=p.s||o.e,this.sh&&o.h!==1)if(t>=u)i[0]=f[0],i[1]=f[1],i[2]=f[2];else if(t<=d)i[0]=o.s[0],i[1]=o.s[1],i[2]=o.s[2];else{var q=createQuaternion(o.s),B=createQuaternion(f),M=(t-d)/(u-d);quaternionToEuler(i,slerp(q,B,M))}else for(a=0;a<n;a+=1)o.h!==1&&(t>=u?S=1:t<d?S=0:(o.o.x.constructor===Array?(b.__fnct||(b.__fnct=[]),b.__fnct[a]?T=b.__fnct[a]:(V=o.o.x[a]===void 0?o.o.x[0]:o.o.x[a],W=o.o.y[a]===void 0?o.o.y[0]:o.o.y[a],z=o.i.x[a]===void 0?o.i.x[0]:o.i.x[a],O=o.i.y[a]===void 0?o.i.y[0]:o.i.y[a],T=BezierFactory.getBezierEasing(V,W,z,O).get,b.__fnct[a]=T)):b.__fnct?T=b.__fnct:(V=o.o.x,W=o.o.y,z=o.i.x,O=o.i.y,T=BezierFactory.getBezierEasing(V,W,z,O).get,o.keyframeMetadata=T),S=T((t-d)/(u-d)))),f=p.s||o.e,H=o.h===1?o.s[a]:o.s[a]+(f[a]-o.s[a])*S,this.propType==="multidimensional"?i[a]=H:i=H}return e.lastIndex=s,i}function slerp(t,e,r){var i=[],s=t[0],a=t[1],n=t[2],l=t[3],o=e[0],p=e[1],b=e[2],C=e[3],c,S,g,y,T;return S=s*o+a*p+n*b+l*C,S<0&&(S=-S,o=-o,p=-p,b=-b,C=-C),1-S>1e-6?(c=Math.acos(S),g=Math.sin(c),y=Math.sin((1-r)*c)/g,T=Math.sin(r*c)/g):(y=1-r,T=r),i[0]=y*s+T*o,i[1]=y*a+T*p,i[2]=y*n+T*b,i[3]=y*l+T*C,i}function quaternionToEuler(t,e){var r=e[0],i=e[1],s=e[2],a=e[3],n=Math.atan2(2*i*a-2*r*s,1-2*i*i-2*s*s),l=Math.asin(2*r*i+2*s*a),o=Math.atan2(2*r*a-2*i*s,1-2*r*r-2*s*s);t[0]=n/degToRads,t[1]=l/degToRads,t[2]=o/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,i=t[2]*degToRads,s=Math.cos(e/2),a=Math.cos(r/2),n=Math.cos(i/2),l=Math.sin(e/2),o=Math.sin(r/2),p=Math.sin(i/2),b=s*a*n-l*o*p,C=l*o*n+s*a*p,c=l*a*n+s*o*p,S=s*o*n-l*a*p;return[C,c,S,b]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(t,this._caching);this.pv=i}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if(this.propType==="unidimensional")e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,i=this.v.length;r<i;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(!(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)){if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=this._isFirstFrame;var t,e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,i){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,i){this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var s,a=e.k.length;for(this.v=createTypedArray("float32",a),this.pv=createTypedArray("float32",a),this.vel=createTypedArray("float32",a),s=0;s<a;s+=1)this.v[s]=e.k[s]*this.mult,this.pv[s]=e.k[s];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,i){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,i){this.propType="multidimensional";var s,a=e.k.length,n,l,o,p;for(s=0;s<a-1;s+=1)e.k[s].to&&e.k[s].s&&e.k[s+1]&&e.k[s+1].s&&(n=e.k[s].s,l=e.k[s+1].s,o=e.k[s].to,p=e.k[s].ti,(n.length===2&&!(n[0]===l[0]&&n[1]===l[1])&&bez.pointOnLine2D(n[0],n[1],l[0],l[1],n[0]+o[0],n[1]+o[1])&&bez.pointOnLine2D(n[0],n[1],l[0],l[1],l[0]+p[0],l[1]+p[1])||n.length===3&&!(n[0]===l[0]&&n[1]===l[1]&&n[2]===l[2])&&bez.pointOnLine3D(n[0],n[1],n[2],l[0],l[1],l[2],n[0]+o[0],n[1]+o[1],n[2]+o[2])&&bez.pointOnLine3D(n[0],n[1],n[2],l[0],l[1],l[2],l[0]+p[0],l[1]+p[1],l[2]+p[2]))&&(e.k[s].to=null,e.k[s].ti=null),n[0]===l[0]&&n[1]===l[1]&&o[0]===0&&o[1]===0&&p[0]===0&&p[1]===0&&(n.length===2||n[2]===l[2]&&o[2]===0&&p[2]===0)&&(e.k[s].to=null,e.k[s].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var b=e.k[0].s.length;for(this.v=createTypedArray("float32",b),this.pv=createTypedArray("float32",b),s=0;s<b;s+=1)this.v[s]=initFrame,this.pv[s]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",b)},this.addEffect=addEffect}var PropertyFactory=function(){function t(r,i,s,a,n){i.sid&&(i=r.globalData.slotManager.getProp(i));var l;if(!i.k.length)l=new ValueProperty(r,i,a,n);else if(typeof i.k[0]=="number")l=new MultiDimensionalProperty(r,i,a,n);else switch(s){case 0:l=new KeyframedValueProperty(r,i,a,n);break;case 1:l=new KeyframedMultidimensionalProperty(r,i,a,n);break}return l.effectsSequence.length&&n.addDynamicProperty(l),l}var e={getProp:t};return e}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&(this.dynamicProperties.push(e),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var e,r=this.dynamicProperties.length;for(e=0;e<r;e+=1)this.dynamicProperties[e].getValue(),this.dynamicProperties[e]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(e){this.container=e,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=function(){function t(){return createTypedArray("float32",2)}return poolFactory(8,t)}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,i,s){var a;switch(this._length=Math.max(this._length,i+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":a=this.v;break;case"i":a=this.i;break;case"o":a=this.o;break;default:a=[];break}(!a[i]||a[i]&&!s)&&(a[i]=pointPool.newElement()),a[i][0]=t,a[i][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,i,s,a,n,l){this.setXYAt(t,e,"v",n,l),this.setXYAt(r,i,"o",n,l),this.setXYAt(s,a,"i",n,l)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,i=this.i,s=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],i[0][0],i[0][1],r[0][0],r[0][1],0,!1),s=1);var a=this._length-1,n=this._length,l;for(l=s;l<n;l+=1)t.setTripleAt(e[a][0],e[a][1],i[a][0],i[a][1],r[a][0],r[a][1],l,!1),a-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=function(){function t(){return new ShapePath}function e(s){var a=s._length,n;for(n=0;n<a;n+=1)pointPool.release(s.v[n]),pointPool.release(s.i[n]),pointPool.release(s.o[n]),s.v[n]=null,s.i[n]=null,s.o[n]=null;s._length=0,s.c=!1}function r(s){var a=i.newElement(),n,l=s._length===void 0?s.v.length:s._length;for(a.setLength(l),a.c=s.c,n=0;n<l;n+=1)a.setTripleAt(s.v[n][0],s.v[n][1],s.o[n][0],s.o[n][1],s.i[n][0],s.i[n][1],n);return a}var i=poolFactory(4,t,e);return i.clone=r,i}();function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=function(){var t={newShapeCollection:s,release:a},e=0,r=4,i=createSizedArray(r);function s(){var n;return e?(e-=1,n=i[e]):n=new ShapeCollection,n}function a(n){var l,o=n._length;for(l=0;l<o;l+=1)shapePool.release(n.shapes[l]);n._length=0,e===r&&(i=pooling.double(i),r*=2),i[e]=n,e+=1}return t}(),ShapePropertyFactory=function(){var t=-999999;function e(u,d,f){var x=f.lastIndex,_,A,k,F,V,W,z,O,H,q=this.keyframes;if(u<q[0].t-this.offsetTime)_=q[0].s[0],k=!0,x=0;else if(u>=q[q.length-1].t-this.offsetTime)_=q[q.length-1].s?q[q.length-1].s[0]:q[q.length-2].e[0],k=!0;else{for(var B=x,M=q.length-1,I=!0,P,E,L;I&&(P=q[B],E=q[B+1],!(E.t-this.offsetTime>u));)B<M-1?B+=1:I=!1;if(L=this.keyframesMetadata[B]||{},k=P.h===1,x=B,!k){if(u>=E.t-this.offsetTime)O=1;else if(u<P.t-this.offsetTime)O=0;else{var R;L.__fnct?R=L.__fnct:(R=BezierFactory.getBezierEasing(P.o.x,P.o.y,P.i.x,P.i.y).get,L.__fnct=R),O=R((u-(P.t-this.offsetTime))/(E.t-this.offsetTime-(P.t-this.offsetTime)))}A=E.s?E.s[0]:P.e[0]}_=P.s[0]}for(W=d._length,z=_.i[0].length,f.lastIndex=x,F=0;F<W;F+=1)for(V=0;V<z;V+=1)H=k?_.i[F][V]:_.i[F][V]+(A.i[F][V]-_.i[F][V])*O,d.i[F][V]=H,H=k?_.o[F][V]:_.o[F][V]+(A.o[F][V]-_.o[F][V])*O,d.o[F][V]=H,H=k?_.v[F][V]:_.v[F][V]+(A.v[F][V]-_.v[F][V])*O,d.v[F][V]=H}function r(){var u=this.comp.renderedFrame-this.offsetTime,d=this.keyframes[0].t-this.offsetTime,f=this.keyframes[this.keyframes.length-1].t-this.offsetTime,x=this._caching.lastFrame;return x!==t&&(x<d&&u<d||x>f&&u>f)||(this._caching.lastIndex=x<u?this._caching.lastIndex:0,this.interpolateShape(u,this.pv,this._caching)),this._caching.lastFrame=u,this.pv}function i(){this.paths=this.localShapeCollection}function s(u,d){if(u._length!==d._length||u.c!==d.c)return!1;var f,x=u._length;for(f=0;f<x;f+=1)if(u.v[f][0]!==d.v[f][0]||u.v[f][1]!==d.v[f][1]||u.o[f][0]!==d.o[f][0]||u.o[f][1]!==d.o[f][1]||u.i[f][0]!==d.i[f][0]||u.i[f][1]!==d.i[f][1])return!1;return!0}function a(u){s(this.v,u)||(this.v=shapePool.clone(u),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function n(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length){this._mdf=!1;return}if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=!1;var u;this.kf?u=this.pv:this.data.ks?u=this.data.ks.k:u=this.data.pt.k;var d,f=this.effectsSequence.length;for(d=0;d<f;d+=1)u=this.effectsSequence[d](u);this.setVValue(u),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function l(u,d,f){this.propType="shape",this.comp=u.comp,this.container=u,this.elem=u,this.data=d,this.k=!1,this.kf=!1,this._mdf=!1;var x=f===3?d.pt.k:d.ks.k;this.v=shapePool.clone(x),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function o(u){this.effectsSequence.push(u),this.container.addDynamicProperty(this)}l.prototype.interpolateShape=e,l.prototype.getValue=n,l.prototype.setVValue=a,l.prototype.addEffect=o;function p(u,d,f){this.propType="shape",this.comp=u.comp,this.elem=u,this.container=u,this.offsetTime=u.data.st,this.keyframes=f===3?d.pt.k:d.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var x=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,x),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=i,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}p.prototype.getValue=n,p.prototype.interpolateShape=e,p.prototype.setVValue=a,p.prototype.addEffect=o;var b=function(){var u=roundCorner;function d(f,x){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=x.d,this.elem=f,this.comp=f.comp,this.frameId=-1,this.initDynamicPropertyContainer(f),this.p=PropertyFactory.getProp(f,x.p,1,0,this),this.s=PropertyFactory.getProp(f,x.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return d.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var x=this.p.v[0],_=this.p.v[1],A=this.s.v[0]/2,k=this.s.v[1]/2,F=this.d!==3,V=this.v;V.v[0][0]=x,V.v[0][1]=_-k,V.v[1][0]=F?x+A:x-A,V.v[1][1]=_,V.v[2][0]=x,V.v[2][1]=_+k,V.v[3][0]=F?x-A:x+A,V.v[3][1]=_,V.i[0][0]=F?x-A*u:x+A*u,V.i[0][1]=_-k,V.i[1][0]=F?x+A:x-A,V.i[1][1]=_-k*u,V.i[2][0]=F?x+A*u:x-A*u,V.i[2][1]=_+k,V.i[3][0]=F?x-A:x+A,V.i[3][1]=_+k*u,V.o[0][0]=F?x+A*u:x-A*u,V.o[0][1]=_-k,V.o[1][0]=F?x+A:x-A,V.o[1][1]=_+k*u,V.o[2][0]=F?x-A*u:x+A*u,V.o[2][1]=_+k,V.o[3][0]=F?x-A:x+A,V.o[3][1]=_-k*u}},extendPrototype([DynamicPropertyContainer],d),d}(),C=function(){function u(d,f){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=d,this.comp=d.comp,this.data=f,this.frameId=-1,this.d=f.d,this.initDynamicPropertyContainer(d),f.sy===1?(this.ir=PropertyFactory.getProp(d,f.ir,0,0,this),this.is=PropertyFactory.getProp(d,f.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(d,f.pt,0,0,this),this.p=PropertyFactory.getProp(d,f.p,1,0,this),this.r=PropertyFactory.getProp(d,f.r,0,degToRads,this),this.or=PropertyFactory.getProp(d,f.or,0,0,this),this.os=PropertyFactory.getProp(d,f.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return u.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var f=Math.floor(this.pt.v)*2,x=Math.PI*2/f,_=!0,A=this.or.v,k=this.ir.v,F=this.os.v,V=this.is.v,W=2*Math.PI*A/(f*2),z=2*Math.PI*k/(f*2),O,H,q,B,M=-Math.PI/2;M+=this.r.v;var I=this.data.d===3?-1:1;for(this.v._length=0,O=0;O<f;O+=1){H=_?A:k,q=_?F:V,B=_?W:z;var P=H*Math.cos(M),E=H*Math.sin(M),L=P===0&&E===0?0:E/Math.sqrt(P*P+E*E),R=P===0&&E===0?0:-P/Math.sqrt(P*P+E*E);P+=+this.p.v[0],E+=+this.p.v[1],this.v.setTripleAt(P,E,P-L*B*q*I,E-R*B*q*I,P+L*B*q*I,E+R*B*q*I,O,!0),_=!_,M+=x*I}},convertPolygonToPath:function(){var f=Math.floor(this.pt.v),x=Math.PI*2/f,_=this.or.v,A=this.os.v,k=2*Math.PI*_/(f*4),F,V=-Math.PI*.5,W=this.data.d===3?-1:1;for(V+=this.r.v,this.v._length=0,F=0;F<f;F+=1){var z=_*Math.cos(V),O=_*Math.sin(V),H=z===0&&O===0?0:O/Math.sqrt(z*z+O*O),q=z===0&&O===0?0:-z/Math.sqrt(z*z+O*O);z+=+this.p.v[0],O+=+this.p.v[1],this.v.setTripleAt(z,O,z-H*k*A*W,O-q*k*A*W,z+H*k*A*W,O+q*k*A*W,F,!0),V+=x*W}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],u),u}(),c=function(){function u(d,f){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=d,this.comp=d.comp,this.frameId=-1,this.d=f.d,this.initDynamicPropertyContainer(d),this.p=PropertyFactory.getProp(d,f.p,1,0,this),this.s=PropertyFactory.getProp(d,f.s,1,0,this),this.r=PropertyFactory.getProp(d,f.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return u.prototype={convertRectToPath:function(){var f=this.p.v[0],x=this.p.v[1],_=this.s.v[0]/2,A=this.s.v[1]/2,k=bmMin(_,A,this.r.v),F=k*(1-roundCorner);this.v._length=0,this.d===2||this.d===1?(this.v.setTripleAt(f+_,x-A+k,f+_,x-A+k,f+_,x-A+F,0,!0),this.v.setTripleAt(f+_,x+A-k,f+_,x+A-F,f+_,x+A-k,1,!0),k!==0?(this.v.setTripleAt(f+_-k,x+A,f+_-k,x+A,f+_-F,x+A,2,!0),this.v.setTripleAt(f-_+k,x+A,f-_+F,x+A,f-_+k,x+A,3,!0),this.v.setTripleAt(f-_,x+A-k,f-_,x+A-k,f-_,x+A-F,4,!0),this.v.setTripleAt(f-_,x-A+k,f-_,x-A+F,f-_,x-A+k,5,!0),this.v.setTripleAt(f-_+k,x-A,f-_+k,x-A,f-_+F,x-A,6,!0),this.v.setTripleAt(f+_-k,x-A,f+_-F,x-A,f+_-k,x-A,7,!0)):(this.v.setTripleAt(f-_,x+A,f-_+F,x+A,f-_,x+A,2),this.v.setTripleAt(f-_,x-A,f-_,x-A+F,f-_,x-A,3))):(this.v.setTripleAt(f+_,x-A+k,f+_,x-A+F,f+_,x-A+k,0,!0),k!==0?(this.v.setTripleAt(f+_-k,x-A,f+_-k,x-A,f+_-F,x-A,1,!0),this.v.setTripleAt(f-_+k,x-A,f-_+F,x-A,f-_+k,x-A,2,!0),this.v.setTripleAt(f-_,x-A+k,f-_,x-A+k,f-_,x-A+F,3,!0),this.v.setTripleAt(f-_,x+A-k,f-_,x+A-F,f-_,x+A-k,4,!0),this.v.setTripleAt(f-_+k,x+A,f-_+k,x+A,f-_+F,x+A,5,!0),this.v.setTripleAt(f+_-k,x+A,f+_-F,x+A,f+_-k,x+A,6,!0),this.v.setTripleAt(f+_,x+A-k,f+_,x+A-k,f+_,x+A-F,7,!0)):(this.v.setTripleAt(f-_,x-A,f-_+F,x-A,f-_,x-A,1,!0),this.v.setTripleAt(f-_,x+A,f-_,x+A-F,f-_,x+A,2,!0),this.v.setTripleAt(f+_,x+A,f+_-F,x+A,f+_,x+A,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],u),u}();function S(u,d,f){var x;if(f===3||f===4){var _=f===3?d.pt:d.ks,A=_.k;A.length?x=new p(u,d,f):x=new l(u,d,f)}else f===5?x=new c(u,d):f===6?x=new b(u,d):f===7&&(x=new C(u,d));return x.k&&u.addDynamicProperty(x),x}function g(){return l}function y(){return p}var T={};return T.getShapeProp=S,T.getConstructorFunction=g,T.getKeyframedConstructorFunction=y,T}();/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */var Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,i=Math.round;function s(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function a(P){if(P===0)return this;var E=t(P),L=e(P);return this._t(E,-L,0,0,L,E,0,0,0,0,1,0,0,0,0,1)}function n(P){if(P===0)return this;var E=t(P),L=e(P);return this._t(1,0,0,0,0,E,-L,0,0,L,E,0,0,0,0,1)}function l(P){if(P===0)return this;var E=t(P),L=e(P);return this._t(E,0,L,0,0,1,0,0,-L,0,E,0,0,0,0,1)}function o(P){if(P===0)return this;var E=t(P),L=e(P);return this._t(E,-L,0,0,L,E,0,0,0,0,1,0,0,0,0,1)}function p(P,E){return this._t(1,E,P,1,0,0)}function b(P,E){return this.shear(r(P),r(E))}function C(P,E){var L=t(E),R=e(E);return this._t(L,R,0,0,-R,L,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(P),1,0,0,0,0,1,0,0,0,0,1)._t(L,-R,0,0,R,L,0,0,0,0,1,0,0,0,0,1)}function c(P,E,L){return!L&&L!==0&&(L=1),P===1&&E===1&&L===1?this:this._t(P,0,0,0,0,E,0,0,0,0,L,0,0,0,0,1)}function S(P,E,L,R,G,j,N,Q,U,J,it,mt,st,rt,nt,X){return this.props[0]=P,this.props[1]=E,this.props[2]=L,this.props[3]=R,this.props[4]=G,this.props[5]=j,this.props[6]=N,this.props[7]=Q,this.props[8]=U,this.props[9]=J,this.props[10]=it,this.props[11]=mt,this.props[12]=st,this.props[13]=rt,this.props[14]=nt,this.props[15]=X,this}function g(P,E,L){return L=L||0,P!==0||E!==0||L!==0?this._t(1,0,0,0,0,1,0,0,0,0,1,0,P,E,L,1):this}function y(P,E,L,R,G,j,N,Q,U,J,it,mt,st,rt,nt,X){var $=this.props;if(P===1&&E===0&&L===0&&R===0&&G===0&&j===1&&N===0&&Q===0&&U===0&&J===0&&it===1&&mt===0)return $[12]=$[12]*P+$[15]*st,$[13]=$[13]*j+$[15]*rt,$[14]=$[14]*it+$[15]*nt,$[15]*=X,this._identityCalculated=!1,this;var xt=$[0],Tt=$[1],Pt=$[2],vt=$[3],St=$[4],Et=$[5],at=$[6],Mt=$[7],kt=$[8],ut=$[9],Ft=$[10],ct=$[11],Bt=$[12],te=$[13],ee=$[14],re=$[15];return $[0]=xt*P+Tt*G+Pt*U+vt*st,$[1]=xt*E+Tt*j+Pt*J+vt*rt,$[2]=xt*L+Tt*N+Pt*it+vt*nt,$[3]=xt*R+Tt*Q+Pt*mt+vt*X,$[4]=St*P+Et*G+at*U+Mt*st,$[5]=St*E+Et*j+at*J+Mt*rt,$[6]=St*L+Et*N+at*it+Mt*nt,$[7]=St*R+Et*Q+at*mt+Mt*X,$[8]=kt*P+ut*G+Ft*U+ct*st,$[9]=kt*E+ut*j+Ft*J+ct*rt,$[10]=kt*L+ut*N+Ft*it+ct*nt,$[11]=kt*R+ut*Q+Ft*mt+ct*X,$[12]=Bt*P+te*G+ee*U+re*st,$[13]=Bt*E+te*j+ee*J+re*rt,$[14]=Bt*L+te*N+ee*it+re*nt,$[15]=Bt*R+te*Q+ee*mt+re*X,this._identityCalculated=!1,this}function T(P){var E=P.props;return this.transform(E[0],E[1],E[2],E[3],E[4],E[5],E[6],E[7],E[8],E[9],E[10],E[11],E[12],E[13],E[14],E[15])}function u(){return this._identityCalculated||(this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1),this._identityCalculated=!0),this._identity}function d(P){for(var E=0;E<16;){if(P.props[E]!==this.props[E])return!1;E+=1}return!0}function f(P){var E;for(E=0;E<16;E+=1)P.props[E]=this.props[E];return P}function x(P){var E;for(E=0;E<16;E+=1)this.props[E]=P[E]}function _(P,E,L){return{x:P*this.props[0]+E*this.props[4]+L*this.props[8]+this.props[12],y:P*this.props[1]+E*this.props[5]+L*this.props[9]+this.props[13],z:P*this.props[2]+E*this.props[6]+L*this.props[10]+this.props[14]}}function A(P,E,L){return P*this.props[0]+E*this.props[4]+L*this.props[8]+this.props[12]}function k(P,E,L){return P*this.props[1]+E*this.props[5]+L*this.props[9]+this.props[13]}function F(P,E,L){return P*this.props[2]+E*this.props[6]+L*this.props[10]+this.props[14]}function V(){var P=this.props[0]*this.props[5]-this.props[1]*this.props[4],E=this.props[5]/P,L=-this.props[1]/P,R=-this.props[4]/P,G=this.props[0]/P,j=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/P,N=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/P,Q=new Matrix;return Q.props[0]=E,Q.props[1]=L,Q.props[4]=R,Q.props[5]=G,Q.props[12]=j,Q.props[13]=N,Q}function W(P){var E=this.getInverseMatrix();return E.applyToPointArray(P[0],P[1],P[2]||0)}function z(P){var E,L=P.length,R=[];for(E=0;E<L;E+=1)R[E]=W(P[E]);return R}function O(P,E,L){var R=createTypedArray("float32",6);if(this.isIdentity())R[0]=P[0],R[1]=P[1],R[2]=E[0],R[3]=E[1],R[4]=L[0],R[5]=L[1];else{var G=this.props[0],j=this.props[1],N=this.props[4],Q=this.props[5],U=this.props[12],J=this.props[13];R[0]=P[0]*G+P[1]*N+U,R[1]=P[0]*j+P[1]*Q+J,R[2]=E[0]*G+E[1]*N+U,R[3]=E[0]*j+E[1]*Q+J,R[4]=L[0]*G+L[1]*N+U,R[5]=L[0]*j+L[1]*Q+J}return R}function H(P,E,L){var R;return this.isIdentity()?R=[P,E,L]:R=[P*this.props[0]+E*this.props[4]+L*this.props[8]+this.props[12],P*this.props[1]+E*this.props[5]+L*this.props[9]+this.props[13],P*this.props[2]+E*this.props[6]+L*this.props[10]+this.props[14]],R}function q(P,E){if(this.isIdentity())return P+","+E;var L=this.props;return Math.round((P*L[0]+E*L[4]+L[12])*100)/100+","+Math.round((P*L[1]+E*L[5]+L[13])*100)/100}function B(){for(var P=0,E=this.props,L="matrix3d(",R=1e4;P<16;)L+=i(E[P]*R)/R,L+=P===15?")":",",P+=1;return L}function M(P){var E=1e4;return P<1e-6&&P>0||P>-1e-6&&P<0?i(P*E)/E:P}function I(){var P=this.props,E=M(P[0]),L=M(P[1]),R=M(P[4]),G=M(P[5]),j=M(P[12]),N=M(P[13]);return"matrix("+E+","+L+","+R+","+G+","+j+","+N+")"}return function(){this.reset=s,this.rotate=a,this.rotateX=n,this.rotateY=l,this.rotateZ=o,this.skew=b,this.skewFromAxis=C,this.shear=p,this.scale=c,this.setTransform=S,this.translate=g,this.transform=y,this.multiply=T,this.applyToPoint=_,this.applyToX=A,this.applyToY=k,this.applyToZ=F,this.applyToPointArray=H,this.applyToTriplePoints=O,this.applyToPointStringified=q,this.toCSS=B,this.to2dCSS=I,this.clone=f,this.cloneFromProps=x,this.equals=d,this.inversePoints=z,this.inversePoint=W,this.getInverseMatrix=V,this._t=this.transform,this.isIdentity=u,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$3=function(r){return typeof r}:_typeof$3=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$3(t)}var lottie={};function setLocation(t){setLocationHref(t)}function searchAnimations(){animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return animationManager.loadAnimation(t)}function setQuality(t){if(typeof t=="string")switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10);break}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t)}function inBrowser(){return typeof navigator<"u"}function installPlugin(t,e){t==="expressions"&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";function checkReady(){document.readyState==="complete"&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var i=e[r].split("=");if(decodeURIComponent(i[0])==t)return decodeURIComponent(i[1])}return null}var queryString="";{var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{_typeof$3(exports)!=="object"&&(window.bodymovin=lottie)}catch(t){}var ShapeModifiers=function(){var t={},e={};t.registerModifier=r,t.getModifier=i;function r(s,a){e[s]||(e[s]=a)}function i(s,a,n){return new e[s](a,n)}return t}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,i,s){var a=[];e<=1?a.push({s:t,e}):t>=1?a.push({s:t-1,e:e-1}):(a.push({s:t,e:1}),a.push({s:0,e:e-1}));var n=[],l,o=a.length,p;for(l=0;l<o;l+=1)if(p=a[l],!(p.e*s<i||p.s*s>i+r)){var b,C;p.s*s<=i?b=0:b=(p.s*s-i)/r,p.e*s>=i+r?C=1:C=(p.e*s-i)/r,n.push([b,C])}return n.length||n.push([0,0]),n},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r;if(this._mdf||t){var i=this.o.v%360/360;if(i<0&&(i+=1),this.s.v>1?e=1+i:this.s.v<0?e=0+i:e=this.s.v+i,this.e.v>1?r=1+i:this.e.v<0?r=0+i:r=this.e.v+i,e>r){var s=e;e=r,r=s}e=Math.round(e*1e4)*1e-4,r=Math.round(r*1e4)*1e-4,this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var a,n,l=this.shapes.length,o,p,b,C,c,S=0;if(r===e)for(n=0;n<l;n+=1)this.shapes[n].localShapeCollection.releaseShapes(),this.shapes[n].shape._mdf=!0,this.shapes[n].shape.paths=this.shapes[n].localShapeCollection,this._mdf&&(this.shapes[n].pathsData.length=0);else if(r===1&&e===0||r===0&&e===1){if(this._mdf)for(n=0;n<l;n+=1)this.shapes[n].pathsData.length=0,this.shapes[n].shape._mdf=!0}else{var g=[],y,T;for(n=0;n<l;n+=1)if(y=this.shapes[n],!y.shape._mdf&&!this._mdf&&!t&&this.m!==2)y.shape.paths=y.localShapeCollection;else{if(a=y.shape.paths,p=a._length,c=0,!y.shape._mdf&&y.pathsData.length)c=y.totalShapeLength;else{for(b=this.releasePathsData(y.pathsData),o=0;o<p;o+=1)C=bez.getSegmentsLength(a.shapes[o]),b.push(C),c+=C.totalLength;y.totalShapeLength=c,y.pathsData=b}S+=c,y.shape._mdf=!0}var u=e,d=r,f=0,x;for(n=l-1;n>=0;n-=1)if(y=this.shapes[n],y.shape._mdf){for(T=y.localShapeCollection,T.releaseShapes(),this.m===2&&l>1?(x=this.calculateShapeEdges(e,r,y.totalShapeLength,f,S),f+=y.totalShapeLength):x=[[u,d]],p=x.length,o=0;o<p;o+=1){u=x[o][0],d=x[o][1],g.length=0,d<=1?g.push({s:y.totalShapeLength*u,e:y.totalShapeLength*d}):u>=1?g.push({s:y.totalShapeLength*(u-1),e:y.totalShapeLength*(d-1)}):(g.push({s:y.totalShapeLength*u,e:y.totalShapeLength}),g.push({s:0,e:y.totalShapeLength*(d-1)}));var _=this.addShapes(y,g[0]);if(g[0].s!==g[0].e){if(g.length>1){var A=y.shape.paths.shapes[y.shape.paths._length-1];if(A.c){var k=_.pop();this.addPaths(_,T),_=this.addShapes(y,g[1],k)}else this.addPaths(_,T),_=this.addShapes(y,g[1])}this.addPaths(_,T)}}y.shape.paths=T}}},TrimModifier.prototype.addPaths=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,i,s,a,n){s.setXYAt(e[0],e[1],"o",a),s.setXYAt(r[0],r[1],"i",a+1),n&&s.setXYAt(t[0],t[1],"v",a),s.setXYAt(i[0],i[1],"v",a+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,i){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),i&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var i=t.pathsData,s=t.shape.paths.shapes,a,n=t.shape.paths._length,l,o,p=0,b,C,c,S,g=[],y,T=!0;for(r?(C=r._length,y=r._length):(r=shapePool.newElement(),C=0,y=0),g.push(r),a=0;a<n;a+=1){for(c=i[a].lengths,r.c=s[a].c,o=s[a].c?c.length:c.length+1,l=1;l<o;l+=1)if(b=c[l-1],p+b.addedLength<e.s)p+=b.addedLength,r.c=!1;else if(p>e.e){r.c=!1;break}else e.s<=p&&e.e>=p+b.addedLength?(this.addSegment(s[a].v[l-1],s[a].o[l-1],s[a].i[l],s[a].v[l],r,C,T),T=!1):(S=bez.getNewSegment(s[a].v[l-1],s[a].v[l],s[a].o[l-1],s[a].i[l],(e.s-p)/b.addedLength,(e.e-p)/b.addedLength,c[l-1]),this.addSegmentFromArray(S,r,C,T),T=!1,r.c=!1),p+=b.addedLength,C+=1;if(s[a].c&&c.length){if(b=c[l-1],p<=e.e){var u=c[l-1].addedLength;e.s<=p&&e.e>=p+u?(this.addSegment(s[a].v[l-1],s[a].o[l-1],s[a].i[0],s[a].v[0],r,C,T),T=!1):(S=bez.getNewSegment(s[a].v[l-1],s[a].v[0],s[a].o[l-1],s[a].i[0],(e.s-p)/u,(e.e-p)/u,c[l-1]),this.addSegmentFromArray(S,r,C,T),T=!1,r.c=!1)}else r.c=!1;p+=b.addedLength,C+=1}if(r._length&&(r.setXYAt(r.v[y][0],r.v[y][1],"i",y),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),p>e.e)break;a<n-1&&(r=shapePool.newElement(),T=!0,g.push(r),C=0)}return g};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,i=[0,0],s=t._length,a=0;for(a=0;a<s;a+=1)i[0]+=t.v[a][0],i[1]+=t.v[a][1];i[0]/=s,i[1]/=s;var n=shapePool.newElement();n.c=t.c;var l,o,p,b,C,c;for(a=0;a<s;a+=1)l=t.v[a][0]+(i[0]-t.v[a][0])*r,o=t.v[a][1]+(i[1]-t.v[a][1])*r,p=t.o[a][0]+(i[0]-t.o[a][0])*-r,b=t.o[a][1]+(i[1]-t.o[a][1])*-r,C=t.i[a][0]+(i[0]-t.i[a][0])*-r,c=t.i[a][1]+(i[1]-t.i[a][1])*-r,n.setTripleAt(l,o,p,b,C,c,a);return n},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,n=this.amount.v;if(n!==0){var l,o;for(r=0;r<i;r+=1){if(l=this.shapes[r],o=l.localShapeCollection,!(!l.shape._mdf&&!this._mdf&&!t))for(o.releaseShapes(),l.shape._mdf=!0,e=l.shape.paths.shapes,a=l.shape.paths._length,s=0;s<a;s+=1)o.addShape(this.processPath(e[s],n));l.shape.paths=l.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(o){var p=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||p,this.a&&o.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&o.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&o.skewFromAxis(-this.sk.v,this.sa.v),this.r?o.rotate(-this.r.v):o.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?o.translate(this.px.v,this.py.v,-this.pz.v):o.translate(this.px.v,this.py.v,0):o.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function r(o){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||o){var p;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var b,C;if(p=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(b=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/p,0),C=this.p.getValueAtTime(this.p.keyframes[0].t/p,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(b=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/p,0),C=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/p,0)):(b=this.p.pv,C=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/p,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){b=[],C=[];var c=this.px,S=this.py;c._caching.lastFrame+c.offsetTime<=c.keyframes[0].t?(b[0]=c.getValueAtTime((c.keyframes[0].t+.01)/p,0),b[1]=S.getValueAtTime((S.keyframes[0].t+.01)/p,0),C[0]=c.getValueAtTime(c.keyframes[0].t/p,0),C[1]=S.getValueAtTime(S.keyframes[0].t/p,0)):c._caching.lastFrame+c.offsetTime>=c.keyframes[c.keyframes.length-1].t?(b[0]=c.getValueAtTime(c.keyframes[c.keyframes.length-1].t/p,0),b[1]=S.getValueAtTime(S.keyframes[S.keyframes.length-1].t/p,0),C[0]=c.getValueAtTime((c.keyframes[c.keyframes.length-1].t-.01)/p,0),C[1]=S.getValueAtTime((S.keyframes[S.keyframes.length-1].t-.01)/p,0)):(b=[c.pv,S.pv],C[0]=c.getValueAtTime((c._caching.lastFrame+c.offsetTime-.01)/p,c.offsetTime),C[1]=S.getValueAtTime((S._caching.lastFrame+S.offsetTime-.01)/p,S.offsetTime))}else C=t,b=C;this.v.rotate(-Math.atan2(b[1]-C[1],b[0]-C[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function i(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length)this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1;else return;if(!this.s.effectsSequence.length)this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2;else return;if(this.sk)if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length)this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3;else return;this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length&&(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}function s(){}function a(o){this._addDynamicProperty(o),this.elem.addDynamicProperty(o),this._isDirty=!0}function n(o,p,b){if(this.elem=o,this.frameId=-1,this.propType="transform",this.data=p,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(b||o),p.p&&p.p.s?(this.px=PropertyFactory.getProp(o,p.p.x,0,0,this),this.py=PropertyFactory.getProp(o,p.p.y,0,0,this),p.p.z&&(this.pz=PropertyFactory.getProp(o,p.p.z,0,0,this))):this.p=PropertyFactory.getProp(o,p.p||{k:[0,0,0]},1,0,this),p.rx){if(this.rx=PropertyFactory.getProp(o,p.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(o,p.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(o,p.rz,0,degToRads,this),p.or.k[0].ti){var C,c=p.or.k.length;for(C=0;C<c;C+=1)p.or.k[C].to=null,p.or.k[C].ti=null}this.or=PropertyFactory.getProp(o,p.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(o,p.r||{k:0},0,degToRads,this);p.sk&&(this.sk=PropertyFactory.getProp(o,p.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(o,p.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(o,p.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(o,p.s||{k:[100,100,100]},1,.01,this),p.o?this.o=PropertyFactory.getProp(o,p.o,0,.01,o):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}n.prototype={applyToMatrix:e,getValue:r,precalculateMatrix:i,autoOrient:s},extendPrototype([DynamicPropertyContainer],n),n.prototype.addDynamicProperty=a,n.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function l(o,p,b){return new n(o,p,b)}return{getTransformProperty:l}}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,i,s,a){var n=a?-1:1,l=i.s.v[0]+(1-i.s.v[0])*(1-s),o=i.s.v[1]+(1-i.s.v[1])*(1-s);t.translate(i.p.v[0]*n*s,i.p.v[1]*n*s,i.p.v[2]),e.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),e.rotate(-i.r.v*n*s),e.translate(i.a.v[0],i.a.v[1],i.a.v[2]),r.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),r.scale(a?1/l:l,a?1/o:o),r.translate(i.a.v[0],i.a.v[1],i.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,i){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=i,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,t[e].ty==="gr"&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]._render=e,t[r].ty==="gr"&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,i,s,a,n=!1;if(this._mdf||t){var l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var o={it:this.cloneElements(this._elements),ty:"gr"};o.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,o),this._groups.splice(0,0,o),this._currentCopies+=1}this.elem.reloadShapes(),n=!0}a=0;var p;for(i=0;i<=this._groups.length-1;i+=1){if(p=a<l,this._groups[i]._render=p,this.changeGroupRender(this._groups[i].it,p),!p){var b=this.elemsData[i].it,C=b[b.length-1];C.transform.op.v!==0?(C.transform.op._mdf=!0,C.transform.op.v=0):C.transform.op._mdf=!1}a+=1}this._currentCopies=l;var c=this.o.v,S=c%1,g=c>0?Math.floor(c):Math.ceil(c),y=this.pMatrix.props,T=this.rMatrix.props,u=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var d=0;if(c>0){for(;d<g;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),d+=1;S&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,S,!1),d+=S)}else if(c<0){for(;d>g;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),d-=1;S&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-S,!0),d-=S)}i=this.data.m===1?0:this._currentCopies-1,s=this.data.m===1?1:-1,a=this._currentCopies;for(var f,x;a;){if(e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,x=r.length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1)),d!==0){for((i!==0&&s===1||i!==this._currentCopies-1&&s===-1)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(T[0],T[1],T[2],T[3],T[4],T[5],T[6],T[7],T[8],T[9],T[10],T[11],T[12],T[13],T[14],T[15]),this.matrix.transform(u[0],u[1],u[2],u[3],u[4],u[5],u[6],u[7],u[8],u[9],u[10],u[11],u[12],u[13],u[14],u[15]),this.matrix.transform(y[0],y[1],y[2],y[3],y[4],y[5],y[6],y[7],y[8],y[9],y[10],y[11],y[12],y[13],y[14],y[15]),f=0;f<x;f+=1)r[f]=this.matrix.props[f];this.matrix.reset()}else for(this.matrix.reset(),f=0;f<x;f+=1)r[f]=this.matrix.props[f];d+=1,a-=1,i+=s}}else for(a=this._currentCopies,i=0,s=1;a;)e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,a-=1,i+=s;return n},RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r=shapePool.newElement();r.c=t.c;var i,s=t._length,a,n,l,o,p,b,C=0,c,S,g,y,T,u;for(i=0;i<s;i+=1)a=t.v[i],l=t.o[i],n=t.i[i],a[0]===l[0]&&a[1]===l[1]&&a[0]===n[0]&&a[1]===n[1]?(i===0||i===s-1)&&!t.c?(r.setTripleAt(a[0],a[1],l[0],l[1],n[0],n[1],C),C+=1):(i===0?o=t.v[s-1]:o=t.v[i-1],p=Math.sqrt(Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)),b=p?Math.min(p/2,e)/p:0,T=a[0]+(o[0]-a[0])*b,c=T,u=a[1]-(a[1]-o[1])*b,S=u,g=c-(c-a[0])*roundCorner,y=S-(S-a[1])*roundCorner,r.setTripleAt(c,S,g,y,T,u,C),C+=1,i===s-1?o=t.v[0]:o=t.v[i+1],p=Math.sqrt(Math.pow(a[0]-o[0],2)+Math.pow(a[1]-o[1],2)),b=p?Math.min(p/2,e)/p:0,g=a[0]+(o[0]-a[0])*b,c=g,y=a[1]+(o[1]-a[1])*b,S=y,T=c-(c-a[0])*roundCorner,u=S-(S-a[1])*roundCorner,r.setTripleAt(c,S,g,y,T,u,C),C+=1):(r.setTripleAt(t.v[i][0],t.v[i][1],t.o[i][0],t.o[i][1],t.i[i][0],t.i[i][1],C),C+=1);return r},RoundCornersModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,n=this.rd.v;if(n!==0){var l,o;for(r=0;r<i;r+=1){if(l=this.shapes[r],o=l.localShapeCollection,!(!l.shape._mdf&&!this._mdf&&!t))for(o.releaseShapes(),l.shape._mdf=!0,e=l.shape.paths.shapes,a=l.shape.paths._length,s=0;s<a;s+=1)o.addShape(this.processPath(e[s],n));l.shape.paths=l.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function floatEqual(t,e){return Math.abs(t-e)*1e5<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(t===0)return[];var i=e*e-4*t*r;if(i<0)return[];var s=-e/(2*t);if(i===0)return[s];var a=Math.sqrt(i)/(2*t);return[s-a,s+a]}function polynomialCoefficients(t,e,r,i){return[-t+3*e-3*r+i,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,i,s){s&&pointEqual(t,e)&&(e=lerpPoint(t,i,1/3)),s&&pointEqual(r,i)&&(r=lerpPoint(t,i,2/3));var a=polynomialCoefficients(t[0],e[0],r[0],i[0]),n=polynomialCoefficients(t[1],e[1],r[1],i[1]);this.a=[a[0],n[0]],this.b=[a[1],n[1]],this.c=[a[2],n[2]],this.d=[a[3],n[3]],this.points=[t,e,r,i]}PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var i=Math.sqrt(r);return floatZero(i)?i>0&&i<1?[e]:[]:[e-i,e+i].filter(function(s){return s>0&&s<1})},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),i=lerpPoint(this.points[2],this.points[3],t),s=lerpPoint(e,r,t),a=lerpPoint(r,i,t),n=lerpPoint(s,a,t);return[new PolynomialBezier(this.points[0],e,s,n,!0),new PolynomialBezier(n,a,i,this.points[3],!0)]};function extrema(t,e){var r=t.points[0][e],i=t.points[t.points.length-1][e];if(r>i){var s=i;i=r,r=s}for(var a=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),n=0;n<a.length;n+=1)if(a[n]>0&&a[n]<1){var l=t.point(a[n])[e];l<r?r=l:l>i&&(i=l)}return{min:r,max:i}}PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}};function intersectData(t,e,r){var i=t.boundingBox();return{cx:i.cx,cy:i.cy,width:i.width,height:i.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return Math.abs(t.cx-e.cx)*2<t.width+e.width&&Math.abs(t.cy-e.cy)*2<t.height+e.height}function intersectsImpl(t,e,r,i,s,a){if(boxIntersect(t,e)){if(r>=a||t.width<=i&&t.height<=i&&e.width<=i&&e.height<=i){s.push([t.t,e.t]);return}var n=splitData(t),l=splitData(e);intersectsImpl(n[0],l[0],r+1,i,s,a),intersectsImpl(n[0],l[1],r+1,i,s,a),intersectsImpl(n[1],l[0],r+1,i,s,a),intersectsImpl(n[1],l[1],r+1,i,s,a)}}PolynomialBezier.prototype.intersections=function(t,e,r){e===void 0&&(e=2),r===void 0&&(r=7);var i=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,i,r),i},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)};function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,i){var s=[t[0],t[1],1],a=[e[0],e[1],1],n=[r[0],r[1],1],l=[i[0],i[1],1],o=crossProduct(crossProduct(s,a),crossProduct(n,l));return floatZero(o[2])?null:[o[0]/o[2],o[1]/o[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0};function setPoint(t,e,r,i,s,a,n){var l=r-Math.PI/2,o=r+Math.PI/2,p=e[0]+Math.cos(r)*i*s,b=e[1]-Math.sin(r)*i*s;t.setTripleAt(p,b,p+Math.cos(l)*a,b-Math.sin(l)*a,p+Math.cos(o)*n,b-Math.sin(o)*n,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],i=-Math.PI*.5,s=[Math.cos(i)*r[0]-Math.sin(i)*r[1],Math.sin(i)*r[0]+Math.cos(i)*r[1]];return s}function getProjectingAngle(t,e){var r=e===0?t.length()-1:e-1,i=(e+1)%t.length(),s=t.v[r],a=t.v[i],n=getPerpendicularVector(s,a);return Math.atan2(0,1)-Math.atan2(n[1],n[0])}function zigZagCorner(t,e,r,i,s,a,n){var l=getProjectingAngle(e,r),o=e.v[r%e._length],p=e.v[r===0?e._length-1:r-1],b=e.v[(r+1)%e._length],C=a===2?Math.sqrt(Math.pow(o[0]-p[0],2)+Math.pow(o[1]-p[1],2)):0,c=a===2?Math.sqrt(Math.pow(o[0]-b[0],2)+Math.pow(o[1]-b[1],2)):0;setPoint(t,e.v[r%e._length],l,n,i,c/((s+1)*2),C/((s+1)*2))}function zigZagSegment(t,e,r,i,s,a){for(var n=0;n<i;n+=1){var l=(n+1)/(i+1),o=s===2?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,p=e.normalAngle(l),b=e.point(l);setPoint(t,b,p,a,r,o/((i+1)*2),o/((i+1)*2)),a=-a}return a}ZigZagModifier.prototype.processPath=function(t,e,r,i){var s=t._length,a=shapePool.newElement();if(a.c=t.c,t.c||(s-=1),s===0)return a;var n=-1,l=PolynomialBezier.shapeSegment(t,0);zigZagCorner(a,t,0,e,r,i,n);for(var o=0;o<s;o+=1)n=zigZagSegment(a,l,e,r,i,-n),o===s-1&&!t.c?l=null:l=PolynomialBezier.shapeSegment(t,(o+1)%s),zigZagCorner(a,t,o+1,e,r,i,n);return a},ZigZagModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,n=this.amplitude.v,l=Math.max(0,Math.round(this.frequency.v)),o=this.pointsType.v;if(n!==0){var p,b;for(r=0;r<i;r+=1){if(p=this.shapes[r],b=p.localShapeCollection,!(!p.shape._mdf&&!this._mdf&&!t))for(b.releaseShapes(),p.shape._mdf=!0,e=p.shape.paths.shapes,a=p.shape.paths._length,s=0;s<a;s+=1)b.addShape(this.processPath(e[s],n,l,o));p.shape.paths=p.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function linearOffset(t,e,r){var i=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,i,r),polarOffset(e,i,r)]}function offsetSegment(t,e){var r,i,s,a,n,l,o;o=linearOffset(t.points[0],t.points[1],e),r=o[0],i=o[1],o=linearOffset(t.points[1],t.points[2],e),s=o[0],a=o[1],o=linearOffset(t.points[2],t.points[3],e),n=o[0],l=o[1];var p=lineIntersection(r,i,s,a);p===null&&(p=i);var b=lineIntersection(n,l,s,a);return b===null&&(b=n),new PolynomialBezier(r,p,b,l)}function joinLines(t,e,r,i,s){var a=e.points[3],n=r.points[0];if(i===3||pointEqual(a,n))return a;if(i===2){var l=-e.tangentAngle(1),o=-r.tangentAngle(0)+Math.PI,p=lineIntersection(a,polarOffset(a,l+Math.PI/2,100),n,polarOffset(n,l+Math.PI/2,100)),b=p?pointDistance(p,a):pointDistance(a,n)/2,C=polarOffset(a,l,2*b*roundCorner);return t.setXYAt(C[0],C[1],"o",t.length()-1),C=polarOffset(n,o,2*b*roundCorner),t.setTripleAt(n[0],n[1],n[0],n[1],C[0],C[1],t.length()),n}var c=pointEqual(a,e.points[2])?e.points[0]:e.points[2],S=pointEqual(n,r.points[1])?r.points[3]:r.points[1],g=lineIntersection(c,a,n,S);return g&&pointDistance(g,a)<s?(t.setTripleAt(g[0],g[1],g[0],g[1],g[0],g[1],t.length()),g):a}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),i=e.slice(),s=getIntersection(t[t.length-1],e[0]);return s&&(r[t.length-1]=t[t.length-1].split(s[0])[0],i[0]=e[0].split(s[1])[1]),t.length>1&&e.length>1&&(s=getIntersection(t[0],e[e.length-1]),s)?[[t[0].split(s[0])[0]],[e[e.length-1].split(s[1])[1]]]:[r,i]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r=t.inflectionPoints(),i,s,a,n;if(r.length===0)return[offsetSegment(t,e)];if(r.length===1||floatEqual(r[1],1))return a=t.split(r[0]),i=a[0],s=a[1],[offsetSegment(i,e),offsetSegment(s,e)];a=t.split(r[0]),i=a[0];var l=(r[1]-r[0])/(1-r[0]);return a=a[1].split(l),n=a[0],s=a[1],[offsetSegment(i,e),offsetSegment(n,e),offsetSegment(s,e)]}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=this.amount.effectsSequence.length!==0},OffsetPathModifier.prototype.processPath=function(t,e,r,i){var s=shapePool.newElement();s.c=t.c;var a=t.length();t.c||(a-=1);var n,l,o,p=[];for(n=0;n<a;n+=1)o=PolynomialBezier.shapeSegment(t,n),p.push(offsetSegmentSplit(o,e));if(!t.c)for(n=a-1;n>=0;n-=1)o=PolynomialBezier.shapeSegmentInverted(t,n),p.push(offsetSegmentSplit(o,e));p=pruneIntersections(p);var b=null,C=null;for(n=0;n<p.length;n+=1){var c=p[n];for(C&&(b=joinLines(s,C,c[0],r,i)),C=c[c.length-1],l=0;l<c.length;l+=1)o=c[l],b&&pointEqual(o.points[0],b)?s.setXYAt(o.points[1][0],o.points[1][1],"o",s.length()-1):s.setTripleAt(o.points[0][0],o.points[0][1],o.points[1][0],o.points[1][1],o.points[0][0],o.points[0][1],s.length()),s.setTripleAt(o.points[3][0],o.points[3][1],o.points[3][0],o.points[3][1],o.points[2][0],o.points[2][1],s.length()),b=o.points[3]}return p.length&&joinLines(s,C,p[0][0],r,i),s},OffsetPathModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,a,n=this.amount.v,l=this.miterLimit.v,o=this.lineJoin;if(n!==0){var p,b;for(r=0;r<i;r+=1){if(p=this.shapes[r],b=p.localShapeCollection,!(!p.shape._mdf&&!this._mdf&&!t))for(b.releaseShapes(),p.shape._mdf=!0,e=p.shape.paths.shapes,a=p.shape.paths._length,s=0;s<a;s+=1)b.addShape(this.processPath(e[s],n,o,l));p.shape.paths=p.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",i="normal",s=e.length,a,n=0;n<s;n+=1)switch(a=e[n].toLowerCase(),a){case"italic":i="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200";break}return{style:i,weight:t.fWeight||r}}var FontManager=function(){var t=5e3,e={w:0,size:0,shapes:[],data:{shapes:[]}},r=[];r=r.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var i=127988,s=917631,a=917601,n=917626,l=65039,o=8205,p=127462,b=127487,C=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function c(M){var I=M.split(","),P,E=I.length,L=[];for(P=0;P<E;P+=1)I[P]!=="sans-serif"&&I[P]!=="monospace"&&L.push(I[P]);return L.join(",")}function S(M,I){var P=createTag("span");P.setAttribute("aria-hidden",!0),P.style.fontFamily=I;var E=createTag("span");E.innerText="giItT1WQy@!-/#",P.style.position="absolute",P.style.left="-10000px",P.style.top="-10000px",P.style.fontSize="300px",P.style.fontVariant="normal",P.style.fontStyle="normal",P.style.fontWeight="normal",P.style.letterSpacing="0",P.appendChild(E),document.body.appendChild(P);var L=E.offsetWidth;return E.style.fontFamily=c(M)+", "+I,{node:E,w:L,parent:P}}function g(){var M,I=this.fonts.length,P,E,L=I;for(M=0;M<I;M+=1)this.fonts[M].loaded?L-=1:this.fonts[M].fOrigin==="n"||this.fonts[M].origin===0?this.fonts[M].loaded=!0:(P=this.fonts[M].monoCase.node,E=this.fonts[M].monoCase.w,P.offsetWidth!==E?(L-=1,this.fonts[M].loaded=!0):(P=this.fonts[M].sansCase.node,E=this.fonts[M].sansCase.w,P.offsetWidth!==E&&(L-=1,this.fonts[M].loaded=!0)),this.fonts[M].loaded&&(this.fonts[M].sansCase.parent.parentNode.removeChild(this.fonts[M].sansCase.parent),this.fonts[M].monoCase.parent.parentNode.removeChild(this.fonts[M].monoCase.parent)));L!==0&&Date.now()-this.initTime<t?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)}function y(M,I){var P=document.body&&I?"svg":"canvas",E,L=getFontProperties(M);if(P==="svg"){var R=createNS("text");R.style.fontSize="100px",R.setAttribute("font-family",M.fFamily),R.setAttribute("font-style",L.style),R.setAttribute("font-weight",L.weight),R.textContent="1",M.fClass?(R.style.fontFamily="inherit",R.setAttribute("class",M.fClass)):R.style.fontFamily=M.fFamily,I.appendChild(R),E=R}else{var G=new OffscreenCanvas(500,500).getContext("2d");G.font=L.style+" "+L.weight+" 100px "+M.fFamily,E=G}function j(N){return P==="svg"?(E.textContent=N,E.getComputedTextLength()):E.measureText(N).width}return{measureText:j}}function T(M,I){if(!M){this.isLoaded=!0;return}if(this.chars){this.isLoaded=!0,this.fonts=M.list;return}if(!document.body){this.isLoaded=!0,M.list.forEach(function(it){it.helper=y(it),it.cache={}}),this.fonts=M.list;return}var P=M.list,E,L=P.length,R=L;for(E=0;E<L;E+=1){var G=!0,j,N;if(P[E].loaded=!1,P[E].monoCase=S(P[E].fFamily,"monospace"),P[E].sansCase=S(P[E].fFamily,"sans-serif"),!P[E].fPath)P[E].loaded=!0,R-=1;else if(P[E].fOrigin==="p"||P[E].origin===3){if(j=document.querySelectorAll('style[f-forigin="p"][f-family="'+P[E].fFamily+'"], style[f-origin="3"][f-family="'+P[E].fFamily+'"]'),j.length>0&&(G=!1),G){var Q=createTag("style");Q.setAttribute("f-forigin",P[E].fOrigin),Q.setAttribute("f-origin",P[E].origin),Q.setAttribute("f-family",P[E].fFamily),Q.type="text/css",Q.innerText="@font-face {font-family: "+P[E].fFamily+"; font-style: normal; src: url('"+P[E].fPath+"');}",I.appendChild(Q)}}else if(P[E].fOrigin==="g"||P[E].origin===1){for(j=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),N=0;N<j.length;N+=1)j[N].href.indexOf(P[E].fPath)!==-1&&(G=!1);if(G){var U=createTag("link");U.setAttribute("f-forigin",P[E].fOrigin),U.setAttribute("f-origin",P[E].origin),U.type="text/css",U.rel="stylesheet",U.href=P[E].fPath,document.body.appendChild(U)}}else if(P[E].fOrigin==="t"||P[E].origin===2){for(j=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),N=0;N<j.length;N+=1)P[E].fPath===j[N].src&&(G=!1);if(G){var J=createTag("link");J.setAttribute("f-forigin",P[E].fOrigin),J.setAttribute("f-origin",P[E].origin),J.setAttribute("rel","stylesheet"),J.setAttribute("href",P[E].fPath),I.appendChild(J)}}P[E].helper=y(P[E],I),P[E].cache={},this.fonts.push(P[E])}R===0?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function u(M){if(M){this.chars||(this.chars=[]);var I,P=M.length,E,L=this.chars.length,R;for(I=0;I<P;I+=1){for(E=0,R=!1;E<L;)this.chars[E].style===M[I].style&&this.chars[E].fFamily===M[I].fFamily&&this.chars[E].ch===M[I].ch&&(R=!0),E+=1;R||(this.chars.push(M[I]),L+=1)}}}function d(M,I,P){for(var E=0,L=this.chars.length;E<L;){if(this.chars[E].ch===M&&this.chars[E].style===I&&this.chars[E].fFamily===P)return this.chars[E];E+=1}return(typeof M=="string"&&M.charCodeAt(0)!==13||!M)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",M,I,P)),e}function f(M,I,P){var E=this.getFontByName(I),L=M;if(!E.cache[L]){var R=E.helper;if(M===" "){var G=R.measureText("|"+M+"|"),j=R.measureText("||");E.cache[L]=(G-j)/100}else E.cache[L]=R.measureText(M)/100}return E.cache[L]*P}function x(M){for(var I=0,P=this.fonts.length;I<P;){if(this.fonts[I].fName===M)return this.fonts[I];I+=1}return this.fonts[0]}function _(M){var I=0,P=M.charCodeAt(0);if(P>=55296&&P<=56319){var E=M.charCodeAt(1);E>=56320&&E<=57343&&(I=(P-55296)*1024+E-56320+65536)}return I}function A(M,I){var P=M.toString(16)+I.toString(16);return C.indexOf(P)!==-1}function k(M){return M===o}function F(M){return M===l}function V(M){var I=_(M);return I>=p&&I<=b}function W(M){return V(M.substr(0,2))&&V(M.substr(2,2))}function z(M){return r.indexOf(M)!==-1}function O(M,I){var P=_(M.substr(I,2));if(P!==i)return!1;var E=0;for(I+=2;E<5;){if(P=_(M.substr(I,2)),P<a||P>n)return!1;E+=1,I+=2}return _(M.substr(I,2))===s}function H(){this.isLoaded=!0}var q=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};q.isModifier=A,q.isZeroWidthJoiner=k,q.isFlagEmoji=W,q.isRegionalCode=V,q.isCombinedCharacter=z,q.isRegionalFlag=O,q.isVariationSelector=F,q.BLACK_FLAG_CODE_POINT=i;var B={addChars:u,addFonts:T,getCharData:d,getFontByName:x,measureText:f,checkLoadedFonts:g,setIsLoaded:H};return q.prototype=B,q}();function SlotManager(t){this.animationData=t}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t};function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(e){this.renderableComponents.indexOf(e)===-1&&this.renderableComponents.push(e)},removeRenderableComponent:function(e){this.renderableComponents.indexOf(e)!==-1&&this.renderableComponents.splice(this.renderableComponents.indexOf(e),1)},prepareRenderableFrame:function(e){this.checkLayerLimits(e)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(e){this.data.ip-this.data.st<=e&&this.data.op-this.data.st>e?this.isInRange!==!0&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):this.isInRange!==!1&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var e,r=this.renderableComponents.length;for(e=0;e<r;e+=1)this.renderableComponents[e].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return this.data.ty===5?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=function(){var t={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(e){return t[e]||""}}();function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r=t.ef||[];this.effectElements=[];var i,s=r.length,a;for(i=0;i<s;i+=1)a=new GroupEffect(r[i],e),this.effectElements.push(a)}function GroupEffect(t,e){this.init(t,e)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var r,i=this.data.ef.length,s,a=this.data.ef;for(r=0;r<i;r+=1){switch(s=null,a[r].ty){case 0:s=new SliderEffect(a[r],e,this);break;case 1:s=new AngleEffect(a[r],e,this);break;case 2:s=new ColorEffect(a[r],e,this);break;case 3:s=new PointEffect(a[r],e,this);break;case 4:case 7:s=new CheckboxEffect(a[r],e,this);break;case 10:s=new LayerIndexEffect(a[r],e,this);break;case 11:s=new MaskIndexEffect(a[r],e,this);break;case 5:s=new EffectsManager(a[r],e);break;default:s=new NoValueEffect(a[r]);break}s&&this.effectElements.push(s)}};function BaseElement(){}BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var e=0,r=this.data.masksProperties.length;e<r;){if(this.data.masksProperties[e].mode!=="n"&&this.data.masksProperties[e].cl!==!1)return!0;e+=1}return!1},initExpressions:function(){var e=getExpressionInterfaces();if(e){var r=e("layer"),i=e("effects"),s=e("shape"),a=e("text"),n=e("comp");this.layerInterface=r(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var l=i.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(l),this.data.ty===0||this.data.xt?this.compInterface=n(this):this.data.ty===4?(this.layerInterface.shapeInterface=s(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):this.data.ty===5&&(this.layerInterface.textInterface=a(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var e=getBlendMode(this.data.bm),r=this.baseElement||this.layerElement;r.style["mix-blend-mode"]=e},initBaseData:function(e,r,i){this.globalData=r,this.comp=i,this.data=e,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}};function FrameElement(){}FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(e,r){var i,s=this.dynamicProperties.length;for(i=0;i<s;i+=1)(r||this._isParent&&this.dynamicProperties[i].propType==="transform")&&(this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&this.dynamicProperties.push(e)}};function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData};function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var i=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(i),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(t){var e,r=this.layers.length,i;for(this.completeLayers=!0,e=r-1;e>=0;e-=1)this.elements[e]||(i=this.layers[e],i.ip-i.st<=t-this.layers[e].st&&i.op-i.st>t-this.layers[e].st&&this.buildItem(e)),this.completeLayers=this.elements[e]?this.completeLayers:!1;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t);default:return this.createNull(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){this.completeLayers=!1;var e,r=t.length,i,s=this.layers.length;for(e=0;e<r;e+=1)for(i=0;i<s;){if(this.layers[i].id===t[e].id){this.layers[i]=t[e];break}i+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var i=this.elements,s=this.layers,a=0,n=s.length;a<n;)s[a].ind==e&&(!i[a]||i[a]===!0?(this.buildItem(a),this.addPendingElement(t)):(r.push(i[a]),i[a].setAsParent(),s[a].parent!==void 0?this.buildElementParenting(t,s[a].parent,r):t.setHierarchy(r))),a+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e]);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e=t.shift(),r;if(typeof e=="number")r=this.elements[e];else{var i,s=this.elements.length;for(i=0;i<s;i+=1)if(this.elements[i].data.nm===e){r=this.elements[i];break}}return t.length===0?r:r.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}TransformElement.prototype={initTransform:function(){var e=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:e,localMat:e,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var e,r=this.finalTransform.mat,i=0,s=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;i<s;){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}i+=1}if(this.finalTransform._matMdf)for(e=this.finalTransform.mProp.v.props,r.cloneFromProps(e),i=0;i<s;i+=1)r.multiply(this.hierarchy[i].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var e=0,r=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;e<r;)this.localTransforms[e]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[e]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),e+=1;if(this.finalTransform._localMatMdf){var i=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(i),e=1;e<r;e+=1){var s=this.localTransforms[e].matrix;i.multiply(s)}i.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var a=this.finalTransform.localOpacity;for(e=0;e<r;e+=1)a*=this.localTransforms[e].opacity*.01;this.finalTransform.localOpacity=a}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var e=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(e.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var r=0,i=e.length;for(r=0;r<i;r+=1)this.localTransforms.push(e[r])}}},globalToLocal:function(e){var r=[];r.push(this.finalTransform);for(var i=!0,s=this.comp;i;)s.finalTransform?(s.data.hasMask&&r.splice(0,0,s.finalTransform),s=s.comp):i=!1;var a,n=r.length,l;for(a=0;a<n;a+=1)l=r[a].mat.applyToPointArray(0,0,0),e=[e[0]-l[0],e[1]-l[1],0];return e},mHelper:new Matrix};function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var i=this.globalData.defs,s,a=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(a),this.solidPath="";var n,l=this.masksProperties,o=0,p=[],b,C,c=createElementID(),S,g,y,T,u="clipPath",d="clip-path";for(s=0;s<a;s+=1)if((l[s].mode!=="a"&&l[s].mode!=="n"||l[s].inv||l[s].o.k!==100||l[s].o.x)&&(u="mask",d="mask"),(l[s].mode==="s"||l[s].mode==="i")&&o===0?(S=createNS("rect"),S.setAttribute("fill","#ffffff"),S.setAttribute("width",this.element.comp.data.w||0),S.setAttribute("height",this.element.comp.data.h||0),p.push(S)):S=null,n=createNS("path"),l[s].mode==="n")this.viewData[s]={op:PropertyFactory.getProp(this.element,l[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,l[s],3),elem:n,lastPath:""},i.appendChild(n);else{o+=1,n.setAttribute("fill",l[s].mode==="s"?"#000000":"#ffffff"),n.setAttribute("clip-rule","nonzero");var f;if(l[s].x.k!==0?(u="mask",d="mask",T=PropertyFactory.getProp(this.element,l[s].x,0,null,this.element),f=createElementID(),g=createNS("filter"),g.setAttribute("id",f),y=createNS("feMorphology"),y.setAttribute("operator","erode"),y.setAttribute("in","SourceGraphic"),y.setAttribute("radius","0"),g.appendChild(y),i.appendChild(g),n.setAttribute("stroke",l[s].mode==="s"?"#000000":"#ffffff")):(y=null,T=null),this.storedData[s]={elem:n,x:T,expan:y,lastPath:"",lastOperator:"",filterId:f,lastRadius:0},l[s].mode==="i"){C=p.length;var x=createNS("g");for(b=0;b<C;b+=1)x.appendChild(p[b]);var _=createNS("mask");_.setAttribute("mask-type","alpha"),_.setAttribute("id",c+"_"+o),_.appendChild(n),i.appendChild(_),x.setAttribute("mask","url("+getLocationHref()+"#"+c+"_"+o+")"),p.length=0,p.push(x)}else p.push(n);l[s].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[s]={elem:n,lastPath:"",op:PropertyFactory.getProp(this.element,l[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,l[s],3),invRect:S},this.viewData[s].prop.k||this.drawPath(l[s],this.viewData[s].prop.v,this.viewData[s])}for(this.maskElement=createNS(u),a=p.length,s=0;s<a;s+=1)this.maskElement.appendChild(p[s]);o>0&&(this.maskElement.setAttribute("id",c),this.element.maskedElement.setAttribute(d,"url("+getLocationHref()+"#"+c+")"),i.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e=this.element.finalTransform.mat,r,i=this.masksProperties.length;for(r=0;r<i;r+=1)if((this.viewData[r].prop._mdf||t)&&this.drawPath(this.masksProperties[r],this.viewData[r].prop.v,this.viewData[r]),(this.viewData[r].op._mdf||t)&&this.viewData[r].elem.setAttribute("fill-opacity",this.viewData[r].op.v),this.masksProperties[r].mode!=="n"&&(this.viewData[r].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[r].invRect.setAttribute("transform",e.getInverseMatrix().to2dCSS()),this.storedData[r].x&&(this.storedData[r].x._mdf||t))){var s=this.storedData[r].expan;this.storedData[r].x.v<0?(this.storedData[r].lastOperator!=="erode"&&(this.storedData[r].lastOperator="erode",this.storedData[r].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[r].filterId+")")),s.setAttribute("radius",-this.storedData[r].x.v)):(this.storedData[r].lastOperator!=="dilate"&&(this.storedData[r].lastOperator="dilate",this.storedData[r].elem.setAttribute("filter",null)),this.storedData[r].elem.setAttribute("stroke-width",this.storedData[r].x.v*2))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,t+=" h-"+this.globalData.compSize.w,t+=" v-"+this.globalData.compSize.h+" ",t},MaskElement.prototype.drawPath=function(t,e,r){var i=" M"+e.v[0][0]+","+e.v[0][1],s,a;for(a=e._length,s=1;s<a;s+=1)i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[s][0]+","+e.i[s][1]+" "+e.v[s][0]+","+e.v[s][1];if(e.c&&a>1&&(i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==i){var n="";r.elem&&(e.c&&(n=t.inv?this.solidPath+i:i),r.elem.setAttribute("d",n)),r.lastPath=i}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory=function(){var t={};t.createFilter=e,t.createAlphaToLuminanceFilter=r;function e(i,s){var a=createNS("filter");return a.setAttribute("id",i),s!==!0&&(a.setAttribute("filterUnits","objectBoundingBox"),a.setAttribute("x","0%"),a.setAttribute("y","0%"),a.setAttribute("width","100%"),a.setAttribute("height","100%")),a}function r(){var i=createNS("feColorMatrix");return i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),i}return t}(),featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:typeof OffscreenCanvas<"u"};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r="SourceGraphic",i=t.data.ef?t.data.ef.length:0,s=createElementID(),a=filtersFactory.createFilter(s,!0),n=0;this.filters=[];var l;for(e=0;e<i;e+=1){l=null;var o=t.data.ef[e].ty;if(registeredEffects$1[o]){var p=registeredEffects$1[o].effect;l=new p(a,t.effectsManager.effectElements[e],t,idPrefix+n,r),r=idPrefix+n,registeredEffects$1[o].countsAsEffect&&(n+=1)}l&&this.filters.push(l)}n&&(t.globalData.defs.appendChild(a),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+s+")")),this.filters.length&&t.addRenderableComponent(this)}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var e=null;if(this.data.td){this.matteMasks={};var r=createNS("g");r.setAttribute("id",this.layerId),r.appendChild(this.layerElement),e=r,this.globalData.defs.appendChild(r)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),e=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.ty===0&&!this.data.hd){var i=createNS("clipPath"),s=createNS("path");s.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var a=createElementID();if(i.setAttribute("id",a),i.appendChild(s),this.globalData.defs.appendChild(i),this.checkMasks()){var n=createNS("g");n.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")"),n.appendChild(this.layerElement),this.transformedElement=n,e?e.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+a+")")}this.data.bm!==0&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(e){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[e]){var r=this.layerId+"_"+e,i,s,a,n;if(e===1||e===3){var l=createNS("mask");l.setAttribute("id",r),l.setAttribute("mask-type",e===3?"luminance":"alpha"),a=createNS("use"),a.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(a),this.globalData.defs.appendChild(l),!featureSupport.maskType&&e===1&&(l.setAttribute("mask-type","luminance"),i=createElementID(),s=filtersFactory.createFilter(i),this.globalData.defs.appendChild(s),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),n=createNS("g"),n.appendChild(a),l.appendChild(n),n.setAttribute("filter","url("+getLocationHref()+"#"+i+")"))}else if(e===2){var o=createNS("mask");o.setAttribute("id",r),o.setAttribute("mask-type","alpha");var p=createNS("g");o.appendChild(p),i=createElementID(),s=filtersFactory.createFilter(i);var b=createNS("feComponentTransfer");b.setAttribute("in","SourceGraphic"),s.appendChild(b);var C=createNS("feFuncA");C.setAttribute("type","table"),C.setAttribute("tableValues","1.0 0.0"),b.appendChild(C),this.globalData.defs.appendChild(s);var c=createNS("rect");c.setAttribute("width",this.comp.data.w),c.setAttribute("height",this.comp.data.h),c.setAttribute("x","0"),c.setAttribute("y","0"),c.setAttribute("fill","#ffffff"),c.setAttribute("opacity","0"),p.setAttribute("filter","url("+getLocationHref()+"#"+i+")"),p.appendChild(c),a=createNS("use"),a.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),p.appendChild(a),featureSupport.maskType||(o.setAttribute("mask-type","luminance"),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),n=createNS("g"),p.appendChild(c),n.appendChild(this.layerElement),p.appendChild(n)),this.globalData.defs.appendChild(o)}this.matteMasks[e]=r}return this.matteMasks[e]},setMatte:function(e){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+e+")")}};function HierarchyElement(){}HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(e){this.hierarchy=e},setAsParent:function(){this._isParent=!0},checkParenting:function(){this.data.parent!==void 0&&this.comp.buildElementParenting(this,this.data.parent,[])}};function RenderableDOMElement(){}(function(){var t={initElement:function(r,i,s){this.initFrame(),this.initBaseData(r,i,s),this.initTransform(r,i,s),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var r=this.baseElement||this.layerElement;r.style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var r=this.baseElement||this.layerElement;r.style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(r){this._mdf=!1,this.prepareRenderableFrame(r),this.prepareProperties(r,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}};extendPrototype([RenderableElement,createProxyFunction(t)],RenderableDOMElement)})();function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect};function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function(e){var r,i=this.shapeModifiers.length;for(r=0;r<i;r+=1)this.shapeModifiers[r].addShape(e)},isShapeInAnimatedModifiers:function(e){for(var r=0,i=this.shapeModifiers.length;r<i;)if(this.shapeModifiers[r].isAnimatedWithShape(e))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var e,r=this.shapes.length;for(e=0;e<r;e+=1)this.shapes[e].sh.reset();r=this.shapeModifiers.length;var i;for(e=r-1;e>=0&&(i=this.shapeModifiers[e].processShapes(this._isFirstFrame),!i);e-=1);}},searchProcessedElement:function(e){for(var r=this.processedElements,i=0,s=r.length;i<s;){if(r[i].elem===e)return r[i].pos;i+=1}return 0},addProcessedElement:function(e,r){for(var i=this.processedElements,s=i.length;s;)if(s-=1,i[s].elem===e){i[s].pos=r;return}i.push(new ProcessedElement(e,r))},prepareFrame:function(e){this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var i=0,s=t.length;i<s;){if(t[i].mProps.dynamicProperties.length){this._isAnimated=!0;break}i+=1}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0};function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=t.hd===!0,this.pElem=createNS("path"),this.msElem=null}SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1};function DashProperty(t,e,r,i){this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(i);var s,a=e.length||0,n;for(s=0;s<a;s+=1)n=PropertyFactory.getProp(t,e[s].v,0,0,this),this.k=n.k||this.k,this.dataProps[s]={n:e[s].n,p:n};this.k||this.getValue(!0),this._isAnimated=this.k}DashProperty.prototype.getValue=function(t){if(!(this.elem.globalData.frameId===this.frameId&&!t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for(this.renderer==="svg"&&(this.dashStr=""),e=0;e<r;e+=1)this.dataProps[e].n!=="o"?this.renderer==="svg"?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",e.p*4);var i=e.k.k[0].s?e.k.k[0].s.length-e.p*4:e.k.k.length-e.p*4;this.o=createTypedArray("float32",i),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=i,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,i=this.o.length/2,s;r<i;){if(s=Math.abs(t[r*4]-t[e*4+r*2]),s>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r=this.data.p*4,i,s;for(e=0;e<r;e+=1)i=e%4===0?100:255,s=Math.round(this.prop.v[e]*i),this.c[e]!==s&&(this.c[e]=s,this._cmdf=!t);if(this.o.length)for(r=this.prop.v.length,e=this.data.p*4;e<r;e+=1)i=e%2===0?100:1,s=e%2===0?Math.round(this.prop.v[e]*100):this.prop.v[e],this.o[e-this.data.p*4]!==s&&(this.o[e-this.data.p*4]=s,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),i=createNS(e.t===1?"linearGradient":"radialGradient");i.setAttribute("id",r),i.setAttribute("spreadMethod","pad"),i.setAttribute("gradientUnits","userSpaceOnUse");var s=[],a,n,l;for(l=e.g.p*4,n=0;n<l;n+=4)a=createNS("stop"),i.appendChild(a),s.push(a);t.setAttribute(e.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=i,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,i,s,a=createNS("mask"),n=createNS("path");a.appendChild(n);var l=createElementID(),o=createElementID();a.setAttribute("id",o);var p=createNS(t.t===1?"linearGradient":"radialGradient");p.setAttribute("id",l),p.setAttribute("spreadMethod","pad"),p.setAttribute("gradientUnits","userSpaceOnUse"),s=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var b=this.stops;for(i=t.g.p*4;i<s;i+=2)r=createNS("stop"),r.setAttribute("stop-color","rgb(255,255,255)"),p.appendChild(r),b.push(r);n.setAttribute(t.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+l+")"),t.ty==="gs"&&(n.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),n.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),t.lj===1&&n.setAttribute("stroke-miterlimit",t.ml)),this.of=p,this.ms=a,this.ost=b,this.maskId=o,e.msElem=n}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}var buildShapeString=function(e,r,i,s){if(r===0)return"";var a=e.o,n=e.i,l=e.v,o,p=" M"+s.applyToPointStringified(l[0][0],l[0][1]);for(o=1;o<r;o+=1)p+=" C"+s.applyToPointStringified(a[o-1][0],a[o-1][1])+" "+s.applyToPointStringified(n[o][0],n[o][1])+" "+s.applyToPointStringified(l[o][0],l[o][1]);return i&&r&&(p+=" C"+s.applyToPointStringified(a[o-1][0],a[o-1][1])+" "+s.applyToPointStringified(n[0][0],n[0][1])+" "+s.applyToPointStringified(l[0][0],l[0][1]),p+="z"),p},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix,r={createRenderFunction:i};function i(C){switch(C.ty){case"fl":return l;case"gf":return p;case"gs":return o;case"st":return b;case"sh":case"el":case"rc":case"sr":return n;case"tr":return s;case"no":return a;default:return null}}function s(C,c,S){(S||c.transform.op._mdf)&&c.transform.container.setAttribute("opacity",c.transform.op.v),(S||c.transform.mProps._mdf)&&c.transform.container.setAttribute("transform",c.transform.mProps.v.to2dCSS())}function a(){}function n(C,c,S){var g,y,T,u,d,f,x=c.styles.length,_=c.lvl,A,k,F,V;for(f=0;f<x;f+=1){if(u=c.sh._mdf||S,c.styles[f].lvl<_){for(k=e.reset(),F=_-c.styles[f].lvl,V=c.transformers.length-1;!u&&F>0;)u=c.transformers[V].mProps._mdf||u,F-=1,V-=1;if(u)for(F=_-c.styles[f].lvl,V=c.transformers.length-1;F>0;)k.multiply(c.transformers[V].mProps.v),F-=1,V-=1}else k=t;if(A=c.sh.paths,y=A._length,u){for(T="",g=0;g<y;g+=1)d=A.shapes[g],d&&d._length&&(T+=buildShapeString(d,d._length,d.c,k));c.caches[f]=T}else T=c.caches[f];c.styles[f].d+=C.hd===!0?"":T,c.styles[f]._mdf=u||c.styles[f]._mdf}}function l(C,c,S){var g=c.style;(c.c._mdf||S)&&g.pElem.setAttribute("fill","rgb("+bmFloor(c.c.v[0])+","+bmFloor(c.c.v[1])+","+bmFloor(c.c.v[2])+")"),(c.o._mdf||S)&&g.pElem.setAttribute("fill-opacity",c.o.v)}function o(C,c,S){p(C,c,S),b(C,c,S)}function p(C,c,S){var g=c.gf,y=c.g._hasOpacity,T=c.s.v,u=c.e.v;if(c.o._mdf||S){var d=C.ty==="gf"?"fill-opacity":"stroke-opacity";c.style.pElem.setAttribute(d,c.o.v)}if(c.s._mdf||S){var f=C.t===1?"x1":"cx",x=f==="x1"?"y1":"cy";g.setAttribute(f,T[0]),g.setAttribute(x,T[1]),y&&!c.g._collapsable&&(c.of.setAttribute(f,T[0]),c.of.setAttribute(x,T[1]))}var _,A,k,F;if(c.g._cmdf||S){_=c.cst;var V=c.g.c;for(k=_.length,A=0;A<k;A+=1)F=_[A],F.setAttribute("offset",V[A*4]+"%"),F.setAttribute("stop-color","rgb("+V[A*4+1]+","+V[A*4+2]+","+V[A*4+3]+")")}if(y&&(c.g._omdf||S)){var W=c.g.o;for(c.g._collapsable?_=c.cst:_=c.ost,k=_.length,A=0;A<k;A+=1)F=_[A],c.g._collapsable||F.setAttribute("offset",W[A*2]+"%"),F.setAttribute("stop-opacity",W[A*2+1])}if(C.t===1)(c.e._mdf||S)&&(g.setAttribute("x2",u[0]),g.setAttribute("y2",u[1]),y&&!c.g._collapsable&&(c.of.setAttribute("x2",u[0]),c.of.setAttribute("y2",u[1])));else{var z;if((c.s._mdf||c.e._mdf||S)&&(z=Math.sqrt(Math.pow(T[0]-u[0],2)+Math.pow(T[1]-u[1],2)),g.setAttribute("r",z),y&&!c.g._collapsable&&c.of.setAttribute("r",z)),c.e._mdf||c.h._mdf||c.a._mdf||S){z||(z=Math.sqrt(Math.pow(T[0]-u[0],2)+Math.pow(T[1]-u[1],2)));var O=Math.atan2(u[1]-T[1],u[0]-T[0]),H=c.h.v;H>=1?H=.99:H<=-1&&(H=-.99);var q=z*H,B=Math.cos(O+c.a.v)*q+T[0],M=Math.sin(O+c.a.v)*q+T[1];g.setAttribute("fx",B),g.setAttribute("fy",M),y&&!c.g._collapsable&&(c.of.setAttribute("fx",B),c.of.setAttribute("fy",M))}}}function b(C,c,S){var g=c.style,y=c.d;y&&(y._mdf||S)&&y.dashStr&&(g.pElem.setAttribute("stroke-dasharray",y.dashStr),g.pElem.setAttribute("stroke-dashoffset",y.dashoffset[0])),c.c&&(c.c._mdf||S)&&g.pElem.setAttribute("stroke","rgb("+bmFloor(c.c.v[0])+","+bmFloor(c.c.v[1])+","+bmFloor(c.c.v[2])+")"),(c.o._mdf||S)&&g.pElem.setAttribute("stroke-opacity",c.o.v),(c.w._mdf||S)&&(g.pElem.setAttribute("stroke-width",c.w.v),g.msElem&&g.msElem.setAttribute("stroke-width",c.w.v))}return r}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e=this.shapes.length,r,i,s=this.stylesList.length,a,n=[],l=!1;for(i=0;i<s;i+=1){for(a=this.stylesList[i],l=!1,n.length=0,t=0;t<e;t+=1)r=this.shapes[t],r.styles.indexOf(a)!==-1&&(n.push(r),l=r._isAnimated||l);n.length>1&&l&&this.setShapesAsAnimated(n)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,i=new SVGStyleData(t,e),s=i.pElem;if(t.ty==="st")r=new SVGStrokeStyleData(this,t,i);else if(t.ty==="fl")r=new SVGFillStyleData(this,t,i);else if(t.ty==="gf"||t.ty==="gs"){var a=t.ty==="gf"?SVGGradientFillStyleData:SVGGradientStrokeStyleData;r=new a(this,t,i),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),s.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))}else t.ty==="no"&&(r=new SVGNoStyleData(this,t,i));return(t.ty==="st"||t.ty==="gs")&&(s.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),s.setAttribute("fill-opacity","0"),t.lj===1&&s.setAttribute("stroke-miterlimit",t.ml)),t.r===2&&s.setAttribute("fill-rule","evenodd"),t.ln&&s.setAttribute("id",t.ln),t.cl&&s.setAttribute("class",t.cl),t.bm&&(s.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(i),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),i=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var i=4;t.ty==="rc"?i=5:t.ty==="el"?i=6:t.ty==="sr"&&(i=7);var s=ShapePropertyFactory.getShapeProp(this,t,i,this),a=new SVGShapeData(e,r,s);return this.shapes.push(a),this.addShapeToModifiers(a),this.addToAnimatedContents(t,a),a},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,i=this.animatedContents.length;r<i;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e=t.styles,r,i=this.stylesList.length;for(r=0;r<i;r+=1)this.stylesList[r].closed||e.push(this.stylesList[r])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,i,s,a,n){var l=[].concat(a),o,p=t.length-1,b,C,c=[],S=[],g,y,T;for(o=p;o>=0;o-=1){if(T=this.searchProcessedElement(t[o]),T?e[o]=r[T-1]:t[o]._render=n,t[o].ty==="fl"||t[o].ty==="st"||t[o].ty==="gf"||t[o].ty==="gs"||t[o].ty==="no")T?e[o].style.closed=!1:e[o]=this.createStyleElement(t[o],s),t[o]._render&&e[o].style.pElem.parentNode!==i&&i.appendChild(e[o].style.pElem),c.push(e[o].style);else if(t[o].ty==="gr"){if(!T)e[o]=this.createGroupElement(t[o]);else for(C=e[o].it.length,b=0;b<C;b+=1)e[o].prevViewData[b]=e[o].it[b];this.searchShapes(t[o].it,e[o].it,e[o].prevViewData,e[o].gr,s+1,l,n),t[o]._render&&e[o].gr.parentNode!==i&&i.appendChild(e[o].gr)}else t[o].ty==="tr"?(T||(e[o]=this.createTransformElement(t[o],i)),g=e[o].transform,l.push(g)):t[o].ty==="sh"||t[o].ty==="rc"||t[o].ty==="el"||t[o].ty==="sr"?(T||(e[o]=this.createShapeElement(t[o],l,s)),this.setElementStyles(e[o])):t[o].ty==="tm"||t[o].ty==="rd"||t[o].ty==="ms"||t[o].ty==="pb"||t[o].ty==="zz"||t[o].ty==="op"?(T?(y=e[o],y.closed=!1):(y=ShapeModifiers.getModifier(t[o].ty),y.init(this,t[o]),e[o]=y,this.shapeModifiers.push(y)),S.push(y)):t[o].ty==="rp"&&(T?(y=e[o],y.closed=!0):(y=ShapeModifiers.getModifier(t[o].ty),e[o]=y,y.init(this,t,o,e),this.shapeModifiers.push(y),n=!1),S.push(y));this.addProcessedElement(t[o],o+1)}for(p=c.length,o=0;o<p;o+=1)c[o].closed=!0;for(p=S.length,o=0;o<p;o+=1)S[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e=this.animatedContents.length,r;for(t=0;t<e;t+=1)r=this.animatedContents[t],(this._isFirstFrame||r.element._isAnimated)&&r.data!==!0&&r.fn(r.data,r.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null};function LetterProps(t,e,r,i,s,a){this.o=t,this.sw=e,this.sc=r,this.fc=i,this.m=s,this.p=a,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!i,m:!0,p:!0}}LetterProps.prototype.update=function(t,e,r,i,s,a){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var n=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,n=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,n=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,n=!0),this.fc!==i&&(this.fc=i,this._mdf.fc=!0,n=!0),this.m!==s&&(this.m=s,this._mdf.m=!0,n=!0),a.length&&(this.p[0]!==a[0]||this.p[1]!==a[1]||this.p[4]!==a[4]||this.p[5]!==a[5]||this.p[12]!==a[12]||this.p[13]!==a[13])&&(this.p=a,this._mdf.p=!0,n=!0),n};function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(!((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!t)){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return}this.lock=!0,this._mdf=!1;var i,s=this.effectsSequence.length,a=t||this.data.d.k[this.keysIndex].s;for(i=0;i<s;i+=1)r!==this.keysIndex?a=this.effectsSequence[i](a,a.t):a=this.effectsSequence[i](this.currentData,a.t);e!==a&&this.setCurrentData(a),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,i=t.length;r<=i-1&&!(r===i-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e=[],r=0,i=t.length,s,a,n=!1,l=!1,o="";r<i;)n=l,l=!1,s=t.charCodeAt(r),o=t.charAt(r),FontManager.isCombinedCharacter(s)?n=!0:s>=55296&&s<=56319?FontManager.isRegionalFlag(t,r)?o=t.substr(r,14):(a=t.charCodeAt(r+1),a>=56320&&a<=57343&&(FontManager.isModifier(s,a)?(o=t.substr(r,2),n=!0):FontManager.isFlagEmoji(t.substr(r,4))?o=t.substr(r,4):o=t.substr(r,2))):s>56319?(a=t.charCodeAt(r+1),FontManager.isVariationSelector(s)&&(n=!0)):FontManager.isZeroWidthJoiner(s)&&(n=!0,l=!0),n?(e[e.length-1]+=o,n=!1):e.push(o),r+=o.length;return e},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e=this.elem.globalData.fontManager,r=this.data,i=[],s,a,n,l=0,o,p=r.m.g,b=0,C=0,c=0,S=[],g=0,y=0,T,u,d=e.getFontByName(t.f),f,x=0,_=getFontProperties(d);t.fWeight=_.weight,t.fStyle=_.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),a=t.finalText.length,t.finalLineHeight=t.lh;var A=t.tr/1e3*t.finalSize,k;if(t.sz)for(var F=!0,V=t.sz[0],W=t.sz[1],z,O;F;){O=this.buildFinalText(t.t),z=0,g=0,a=O.length,A=t.tr/1e3*t.finalSize;var H=-1;for(s=0;s<a;s+=1)k=O[s].charCodeAt(0),n=!1,O[s]===" "?H=s:(k===13||k===3)&&(g=0,n=!0,z+=t.finalLineHeight||t.finalSize*1.2),e.chars?(f=e.getCharData(O[s],d.fStyle,d.fFamily),x=n?0:f.w*t.finalSize/100):x=e.measureText(O[s],t.f,t.finalSize),g+x>V&&O[s]!==" "?(H===-1?a+=1:s=H,z+=t.finalLineHeight||t.finalSize*1.2,O.splice(s,H===s?1:0,"\r"),H=-1,g=0):(g+=x,g+=A);z+=d.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&W<z?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=O,a=t.finalText.length,F=!1)}g=-A,x=0;var q=0,B;for(s=0;s<a;s+=1)if(n=!1,B=t.finalText[s],k=B.charCodeAt(0),k===13||k===3?(q=0,S.push(g),y=g>y?g:y,g=-2*A,o="",n=!0,c+=1):o=B,e.chars?(f=e.getCharData(B,d.fStyle,e.getFontByName(t.f).fFamily),x=n?0:f.w*t.finalSize/100):x=e.measureText(o,t.f,t.finalSize),B===" "?q+=x+A:(g+=x+A+q,q=0),i.push({l:x,an:x,add:b,n,anIndexes:[],val:o,line:c,animatorJustifyOffset:0}),p==2){if(b+=x,o===""||o===" "||s===a-1){for((o===""||o===" ")&&(b-=x);C<=s;)i[C].an=b,i[C].ind=l,i[C].extra=x,C+=1;l+=1,b=0}}else if(p==3){if(b+=x,o===""||s===a-1){for(o===""&&(b-=x);C<=s;)i[C].an=b,i[C].ind=l,i[C].extra=x,C+=1;b=0,l+=1}}else i[l].ind=l,i[l].extra=0,l+=1;if(t.l=i,y=g>y?g:y,S.push(g),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=y,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=S;var M=r.a,I,P;u=M.length;var E,L,R=[];for(T=0;T<u;T+=1){for(I=M[T],I.a.sc&&(t.strokeColorAnim=!0),I.a.sw&&(t.strokeWidthAnim=!0),(I.a.fc||I.a.fh||I.a.fs||I.a.fb)&&(t.fillColorAnim=!0),L=0,E=I.s.b,s=0;s<a;s+=1)P=i[s],P.anIndexes[T]=L,(E==1&&P.val!==""||E==2&&P.val!==""&&P.val!==" "||E==3&&(P.n||P.val==" "||s==a-1)||E==4&&(P.n||s==a-1))&&(I.s.rn===1&&R.push(L),L+=1);r.a[T].s.totalChars=L;var G=-1,j;if(I.s.rn===1)for(s=0;s<a;s+=1)P=i[s],G!=P.anIndexes[T]&&(G=P.anIndexes[T],j=R.splice(Math.floor(Math.random()*R.length),1)[0]),P.anIndexes[T]=j}t.yOffset=t.finalLineHeight||t.finalSize*1.2,t.ls=t.ls||0,t.ascent=d.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=e===void 0?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function i(a,n){this._currentTextLength=-1,this.k=!1,this.data=n,this.elem=a,this.comp=a.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(a),this.s=PropertyFactory.getProp(a,n.s||{k:0},0,0,this),"e"in n?this.e=PropertyFactory.getProp(a,n.e,0,0,this):this.e={v:100},this.o=PropertyFactory.getProp(a,n.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(a,n.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(a,n.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(a,n.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(a,n.a,0,.01,this),this.dynamicProperties.length||this.getValue()}i.prototype={getMult:function(n){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var l=0,o=0,p=1,b=1;this.ne.v>0?l=this.ne.v/100:o=-this.ne.v/100,this.xe.v>0?p=1-this.xe.v/100:b=1+this.xe.v/100;var C=BezierFactory.getBezierEasing(l,o,p,b).get,c=0,S=this.finalS,g=this.finalE,y=this.data.sh;if(y===2)g===S?c=n>=g?1:0:c=t(0,e(.5/(g-S)+(n-S)/(g-S),1)),c=C(c);else if(y===3)g===S?c=n>=g?0:1:c=1-t(0,e(.5/(g-S)+(n-S)/(g-S),1)),c=C(c);else if(y===4)g===S?c=0:(c=t(0,e(.5/(g-S)+(n-S)/(g-S),1)),c<.5?c*=2:c=1-2*(c-.5)),c=C(c);else if(y===5){if(g===S)c=0;else{var T=g-S;n=e(t(0,n+.5-S),g-S);var u=-T/2+n,d=T/2;c=Math.sqrt(1-u*u/(d*d))}c=C(c)}else y===6?(g===S?c=0:(n=e(t(0,n+.5-S),g-S),c=(1+Math.cos(Math.PI+Math.PI*2*n/(g-S)))/2),c=C(c)):(n>=r(S)&&(n-S<0?c=t(0,e(e(g,1)-(S-n),1)):c=t(0,e(g-n,1))),c=C(c));if(this.sm.v!==100){var f=this.sm.v*.01;f===0&&(f=1e-8);var x=.5-f*.5;c<x?c=0:(c=(c-x)/f,c>1&&(c=1))}return c*this.a.v},getValue:function(n){this.iterateDynamicProperties(),this._mdf=n||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,n&&this.data.r===2&&(this.e.v=this._currentTextLength);var l=this.data.r===2?1:100/this.data.totalChars,o=this.o.v/l,p=this.s.v/l+o,b=this.e.v/l+o;if(p>b){var C=p;p=b,b=C}this.finalS=p,this.finalE=b}},extendPrototype([DynamicPropertyContainer],i);function s(a,n,l){return new i(a,n)}return{getTextSelectorProp:s}}();function TextAnimatorDataProperty(t,e,r){var i={propType:!1},s=PropertyFactory.getProp,a=e.a;this.a={r:a.r?s(t,a.r,0,degToRads,r):i,rx:a.rx?s(t,a.rx,0,degToRads,r):i,ry:a.ry?s(t,a.ry,0,degToRads,r):i,sk:a.sk?s(t,a.sk,0,degToRads,r):i,sa:a.sa?s(t,a.sa,0,degToRads,r):i,s:a.s?s(t,a.s,1,.01,r):i,a:a.a?s(t,a.a,1,0,r):i,o:a.o?s(t,a.o,0,.01,r):i,p:a.p?s(t,a.p,1,0,r):i,sw:a.sw?s(t,a.sw,0,0,r):i,sc:a.sc?s(t,a.sc,1,0,r):i,fc:a.fc?s(t,a.fc,1,0,r):i,fh:a.fh?s(t,a.fh,0,0,r):i,fs:a.fs?s(t,a.fs,0,.01,r):i,fb:a.fb?s(t,a.fb,0,.01,r):i,t:a.t?s(t,a.t,0,0,r):i},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}TextAnimatorProperty.prototype.searchProperties=function(){var t,e=this._textData.a.length,r,i=PropertyFactory.getProp;for(t=0;t<e;t+=1)r=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,r,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:i(this._elem,this._textData.p.a,0,0,this),f:i(this._elem,this._textData.p.f,0,0,this),l:i(this._elem,this._textData.p.l,0,0,this),r:i(this._elem,this._textData.p.r,0,0,this),p:i(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=i(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,!(!this._mdf&&!this._isFirstFrame&&!e&&(!this._hasMaskedPath||!this._pathData.m._mdf))){this._isFirstFrame=!1;var r=this._moreOptions.alignment.v,i=this._animatorsData,s=this._textData,a=this.mHelper,n=this._renderType,l=this.renderedLetters.length,o,p,b,C,c=t.l,S,g,y,T,u,d,f,x,_,A,k,F,V,W,z;if(this._hasMaskedPath){if(z=this._pathData.m,!this._pathData.n||this._pathData._mdf){var O=z.v;this._pathData.r.v&&(O=O.reverse()),S={tLength:0,segments:[]},C=O._length-1;var H;for(F=0,b=0;b<C;b+=1)H=bez.buildBezierData(O.v[b],O.v[b+1],[O.o[b][0]-O.v[b][0],O.o[b][1]-O.v[b][1]],[O.i[b+1][0]-O.v[b+1][0],O.i[b+1][1]-O.v[b+1][1]]),S.tLength+=H.segmentLength,S.segments.push(H),F+=H.segmentLength;b=C,z.v.c&&(H=bez.buildBezierData(O.v[b],O.v[0],[O.o[b][0]-O.v[b][0],O.o[b][1]-O.v[b][1]],[O.i[0][0]-O.v[0][0],O.i[0][1]-O.v[0][1]]),S.tLength+=H.segmentLength,S.segments.push(H),F+=H.segmentLength),this._pathData.pi=S}if(S=this._pathData.pi,g=this._pathData.f.v,f=0,d=1,T=0,u=!0,A=S.segments,g<0&&z.v.c)for(S.tLength<Math.abs(g)&&(g=-Math.abs(g)%S.tLength),f=A.length-1,_=A[f].points,d=_.length-1;g<0;)g+=_[d].partialLength,d-=1,d<0&&(f-=1,_=A[f].points,d=_.length-1);_=A[f].points,x=_[d-1],y=_[d],k=y.partialLength}C=c.length,o=0,p=0;var q=t.finalSize*1.2*.714,B=!0,M,I,P,E,L;E=i.length;var R,G=-1,j,N,Q,U=g,J=f,it=d,mt=-1,st,rt,nt,X,$,xt,Tt,Pt,vt="",St=this.defaultPropsArray,Et;if(t.j===2||t.j===1){var at=0,Mt=0,kt=t.j===2?-.5:-1,ut=0,Ft=!0;for(b=0;b<C;b+=1)if(c[b].n){for(at&&(at+=Mt);ut<b;)c[ut].animatorJustifyOffset=at,ut+=1;at=0,Ft=!0}else{for(P=0;P<E;P+=1)M=i[P].a,M.t.propType&&(Ft&&t.j===2&&(Mt+=M.t.v*kt),I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),R.length?at+=M.t.v*R[0]*kt:at+=M.t.v*R*kt);Ft=!1}for(at&&(at+=Mt);ut<b;)c[ut].animatorJustifyOffset=at,ut+=1}for(b=0;b<C;b+=1){if(a.reset(),st=1,c[b].n)o=0,p+=t.yOffset,p+=B?1:0,g=U,B=!1,this._hasMaskedPath&&(f=J,d=it,_=A[f].points,x=_[d-1],y=_[d],k=y.partialLength,T=0),vt="",Pt="",xt="",Et="",St=this.defaultPropsArray;else{if(this._hasMaskedPath){if(mt!==c[b].line){switch(t.j){case 1:g+=F-t.lineWidths[c[b].line];break;case 2:g+=(F-t.lineWidths[c[b].line])/2;break}mt=c[b].line}G!==c[b].ind&&(c[G]&&(g+=c[G].extra),g+=c[b].an/2,G=c[b].ind),g+=r[0]*c[b].an*.005;var ct=0;for(P=0;P<E;P+=1)M=i[P].a,M.p.propType&&(I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),R.length?ct+=M.p.v[0]*R[0]:ct+=M.p.v[0]*R),M.a.propType&&(I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),R.length?ct+=M.a.v[0]*R[0]:ct+=M.a.v[0]*R);for(u=!0,this._pathData.a.v&&(g=c[0].an*.5+(F-this._pathData.f.v-c[0].an*.5-c[c.length-1].an*.5)*G/(C-1),g+=this._pathData.f.v);u;)T+k>=g+ct||!_?(V=(g+ct-T)/y.partialLength,N=x.point[0]+(y.point[0]-x.point[0])*V,Q=x.point[1]+(y.point[1]-x.point[1])*V,a.translate(-r[0]*c[b].an*.005,-(r[1]*q)*.01),u=!1):_&&(T+=y.partialLength,d+=1,d>=_.length&&(d=0,f+=1,A[f]?_=A[f].points:z.v.c?(d=0,f=0,_=A[f].points):(T-=y.partialLength,_=null)),_&&(x=y,y=_[d],k=y.partialLength));j=c[b].an/2-c[b].add,a.translate(-j,0,0)}else j=c[b].an/2-c[b].add,a.translate(-j,0,0),a.translate(-r[0]*c[b].an*.005,-r[1]*q*.01,0);for(P=0;P<E;P+=1)M=i[P].a,M.t.propType&&(I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),(o!==0||t.j!==0)&&(this._hasMaskedPath?R.length?g+=M.t.v*R[0]:g+=M.t.v*R:R.length?o+=M.t.v*R[0]:o+=M.t.v*R));for(t.strokeWidthAnim&&(nt=t.sw||0),t.strokeColorAnim&&(t.sc?rt=[t.sc[0],t.sc[1],t.sc[2]]:rt=[0,0,0]),t.fillColorAnim&&t.fc&&(X=[t.fc[0],t.fc[1],t.fc[2]]),P=0;P<E;P+=1)M=i[P].a,M.a.propType&&(I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),R.length?a.translate(-M.a.v[0]*R[0],-M.a.v[1]*R[1],M.a.v[2]*R[2]):a.translate(-M.a.v[0]*R,-M.a.v[1]*R,M.a.v[2]*R));for(P=0;P<E;P+=1)M=i[P].a,M.s.propType&&(I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),R.length?a.scale(1+(M.s.v[0]-1)*R[0],1+(M.s.v[1]-1)*R[1],1):a.scale(1+(M.s.v[0]-1)*R,1+(M.s.v[1]-1)*R,1));for(P=0;P<E;P+=1){if(M=i[P].a,I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),M.sk.propType&&(R.length?a.skewFromAxis(-M.sk.v*R[0],M.sa.v*R[1]):a.skewFromAxis(-M.sk.v*R,M.sa.v*R)),M.r.propType&&(R.length?a.rotateZ(-M.r.v*R[2]):a.rotateZ(-M.r.v*R)),M.ry.propType&&(R.length?a.rotateY(M.ry.v*R[1]):a.rotateY(M.ry.v*R)),M.rx.propType&&(R.length?a.rotateX(M.rx.v*R[0]):a.rotateX(M.rx.v*R)),M.o.propType&&(R.length?st+=(M.o.v*R[0]-st)*R[0]:st+=(M.o.v*R-st)*R),t.strokeWidthAnim&&M.sw.propType&&(R.length?nt+=M.sw.v*R[0]:nt+=M.sw.v*R),t.strokeColorAnim&&M.sc.propType)for($=0;$<3;$+=1)R.length?rt[$]+=(M.sc.v[$]-rt[$])*R[0]:rt[$]+=(M.sc.v[$]-rt[$])*R;if(t.fillColorAnim&&t.fc){if(M.fc.propType)for($=0;$<3;$+=1)R.length?X[$]+=(M.fc.v[$]-X[$])*R[0]:X[$]+=(M.fc.v[$]-X[$])*R;M.fh.propType&&(R.length?X=addHueToRGB(X,M.fh.v*R[0]):X=addHueToRGB(X,M.fh.v*R)),M.fs.propType&&(R.length?X=addSaturationToRGB(X,M.fs.v*R[0]):X=addSaturationToRGB(X,M.fs.v*R)),M.fb.propType&&(R.length?X=addBrightnessToRGB(X,M.fb.v*R[0]):X=addBrightnessToRGB(X,M.fb.v*R))}}for(P=0;P<E;P+=1)M=i[P].a,M.p.propType&&(I=i[P].s,R=I.getMult(c[b].anIndexes[P],s.a[P].s.totalChars),this._hasMaskedPath?R.length?a.translate(0,M.p.v[1]*R[0],-M.p.v[2]*R[1]):a.translate(0,M.p.v[1]*R,-M.p.v[2]*R):R.length?a.translate(M.p.v[0]*R[0],M.p.v[1]*R[1],-M.p.v[2]*R[2]):a.translate(M.p.v[0]*R,M.p.v[1]*R,-M.p.v[2]*R));if(t.strokeWidthAnim&&(xt=nt<0?0:nt),t.strokeColorAnim&&(Tt="rgb("+Math.round(rt[0]*255)+","+Math.round(rt[1]*255)+","+Math.round(rt[2]*255)+")"),t.fillColorAnim&&t.fc&&(Pt="rgb("+Math.round(X[0]*255)+","+Math.round(X[1]*255)+","+Math.round(X[2]*255)+")"),this._hasMaskedPath){if(a.translate(0,-t.ls),a.translate(0,r[1]*q*.01+p,0),this._pathData.p.v){W=(y.point[1]-x.point[1])/(y.point[0]-x.point[0]);var Bt=Math.atan(W)*180/Math.PI;y.point[0]<x.point[0]&&(Bt+=180),a.rotate(-Bt*Math.PI/180)}a.translate(N,Q,0),g-=r[0]*c[b].an*.005,c[b+1]&&G!==c[b+1].ind&&(g+=c[b].an/2,g+=t.tr*.001*t.finalSize)}else{switch(a.translate(o,p,0),t.ps&&a.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:a.translate(c[b].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[c[b].line]),0,0);break;case 2:a.translate(c[b].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[c[b].line])/2,0,0);break}a.translate(0,-t.ls),a.translate(j,0,0),a.translate(r[0]*c[b].an*.005,r[1]*q*.01,0),o+=c[b].l+t.tr*.001*t.finalSize}n==="html"?vt=a.toCSS():n==="svg"?vt=a.to2dCSS():St=[a.props[0],a.props[1],a.props[2],a.props[3],a.props[4],a.props[5],a.props[6],a.props[7],a.props[8],a.props[9],a.props[10],a.props[11],a.props[12],a.props[13],a.props[14],a.props[15]],Et=st}l<=b?(L=new LetterProps(Et,xt,Tt,Pt,vt,St),this.renderedLetters.push(L),l+=1,this.lettersChangedFlag=!0):(L=this.renderedLetters[b],this.lettersChangedFlag=L.update(Et,xt,Tt,Pt,vt,St)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,i=e.length,s,a="";for(r=0;r<i;r+=1)e[r].ty==="sh"&&(s=e[r].ks.k,a+=buildShapeString(s,s.i.length,!0,t));return a},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,i,s){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0);break}e.translate(i,s,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(t[0]*255)+","+Math.round(t[1]*255)+","+Math.round(t[2]*255)+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,i=[],s="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(i.push(s),s=""):s+=t[e],e+=1;return i.push(s),i},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var i=r.it[r.it.length-1];i.s&&(i.s.k[0]=e,i.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var t,e,r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var i=this.globalData.fontManager.getFontByName(r.f);if(i.fClass)this.layerElement.setAttribute("class",i.fClass);else{this.layerElement.setAttribute("font-family",i.fFamily);var s=r.fWeight,a=r.fStyle;this.layerElement.setAttribute("font-style",a),this.layerElement.setAttribute("font-weight",s)}this.layerElement.setAttribute("aria-label",r.t);var n=r.l||[],l=!!this.globalData.fontManager.chars;e=n.length;var o,p=this.mHelper,b="",C=this.data.singleShape,c=0,S=0,g=!0,y=r.tr*.001*r.finalSize;if(C&&!l&&!r.sz){var T=this.textContainer,u="start";switch(r.j){case 1:u="end";break;case 2:u="middle";break;default:u="start";break}T.setAttribute("text-anchor",u),T.setAttribute("letter-spacing",y);var d=this.buildTextContents(r.finalText);for(e=d.length,S=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)o=this.textSpans[t].span||createNS("tspan"),o.textContent=d[t],o.setAttribute("x",0),o.setAttribute("y",S),o.style.display="inherit",T.appendChild(o),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=o,S+=r.finalLineHeight;this.layerElement.appendChild(T)}else{var f=this.textSpans.length,x;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!C||t===0){if(o=f>t?this.textSpans[t].span:createNS(l?"g":"text"),f<=t){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=o,l){var _=createNS("g");o.appendChild(_),this.textSpans[t].childSpan=_}this.textSpans[t].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(p.reset(),C&&(n[t].n&&(c=-y,S+=r.yOffset,S+=g?1:0,g=!1),this.applyTextPropertiesToMatrix(r,p,n[t].line,c,S),c+=n[t].l||0,c+=y),l){x=this.globalData.fontManager.getCharData(r.finalText[t],i.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily);var A;if(x.t===1)A=new SVGCompElement(x.data,this.globalData,this);else{var k=emptyShapeData;x.data&&x.data.shapes&&(k=this.buildShapeData(x.data,r.finalSize)),A=new SVGShapeElement(k,this.globalData,this)}if(this.textSpans[t].glyph){var F=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(F.layerElement),F.destroy()}this.textSpans[t].glyph=A,A._debug=!0,A.prepareFrame(0),A.renderFrame(),this.textSpans[t].childSpan.appendChild(A.layerElement),x.t===1&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else C&&o.setAttribute("transform","translate("+p.props[12]+","+p.props[13]+")"),o.textContent=n[t].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}C&&o&&o.setAttribute("d",b)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e=this.textSpans.length,r;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<e;t+=1)r=this.textSpans[t].glyph,r&&(r.prepareFrame(this.comp.renderedFrame-this.data.st),r._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var t,e,r=this.textAnimator.renderedLetters,i=this.textProperty.currentData.l;e=i.length;var s,a,n;for(t=0;t<e;t+=1)i[t].n||(s=r[t],a=this.textSpans[t].span,n=this.textSpans[t].glyph,n&&n.renderFrame(),s._mdf.m&&a.setAttribute("transform",s.m),s._mdf.o&&a.setAttribute("opacity",s.o),s._mdf.sw&&a.setAttribute("stroke-width",s.sw),s._mdf.sc&&a.setAttribute("stroke",s.sc),s._mdf.fc&&a.setAttribute("fill",s.fc))}};function ISolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)};function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),this.renderConfig.focusable!==void 0&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),i=createNS("rect");i.setAttribute("width",t.w),i.setAttribute("height",t.h),i.setAttribute("x",0),i.setAttribute("y",0);var s=createElementID();r.setAttribute("id",s),r.appendChild(i),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+s+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(this.layers[t].ty===0&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var i="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(i===-1)return;if(!this.elements[i]||this.elements[i]===!0)this.buildItem(i),this.addPendingElement(r);else{var s=e[i],a=s.getMatte(this.layers[t].tt);r.setMatte(a)}}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var i="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,s=this.elements[i],a=s.getMatte(this.layers[e].tt);t.setMatte(a);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(!(this.renderedFrame===t||this.destroyed)){t===null?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var e,r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var i=0,s;i<e;)this.elements[i]&&this.elements[i]!==!0&&this.elements[i].getBaseElement()&&(s=this.elements[i].getBaseElement()),i+=1;s?this.layerElement.insertBefore(r,s):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),(this.data.xt||!e.progressiveLoad)&&this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),!(!this.isInRange&&!this.data.xt)){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,i=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()};function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var i=createNS("title"),s=createElementID();i.setAttribute("id",s),i.textContent=e.title,this.svgElement.appendChild(i),r+=s}if(e&&e.description){var a=createNS("desc"),n=createElementID();a.setAttribute("id",n),a.textContent=e.description,this.svgElement.appendChild(a),r+=" "+n}r&&this.svgElement.setAttribute("aria-labelledby",r);var l=createNS("defs");this.svgElement.appendChild(l);var o=createNS("g");this.svgElement.appendChild(o),this.layerElement=o,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&e.hideOnTransparent===!1),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:l,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}ShapeTransformManager.prototype={addTransformSequence:function(e){var r,i=e.length,s="_";for(r=0;r<i;r+=1)s+=e[r].transform.key+"_";var a=this.sequences[s];return a||(a={transforms:[].concat(e),finalTransform:new Matrix,_mdf:!1},this.sequences[s]=a,this.sequenceList.push(a)),a},processSequence:function(e,r){for(var i=0,s=e.transforms.length,a=r;i<s&&!r;){if(e.transforms[i].transform.mProps._mdf){a=!0;break}i+=1}if(a)for(e.finalTransform.reset(),i=s-1;i>=0;i-=1)e.finalTransform.multiply(e.transforms[i].transform.mProps.v);e._mdf=a},processSequences:function(e){var r,i=this.sequenceList.length;for(r=0;r<i;r+=1)this.processSequence(this.sequenceList[r],e)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var e="__lottie_element_luma_buffer",r=null,i=null,s=null;function a(){var o=createNS("svg"),p=createNS("filter"),b=createNS("feColorMatrix");return p.setAttribute("id",e),b.setAttribute("type","matrix"),b.setAttribute("color-interpolation-filters","sRGB"),b.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),p.appendChild(b),o.appendChild(p),o.setAttribute("id",e+"_svg"),featureSupport.svgLumaHidden&&(o.style.display="none"),o}function n(){r||(s=a(),document.body.appendChild(s),r=createTag("canvas"),i=r.getContext("2d"),i.filter="url(#"+e+")",i.fillStyle="rgba(0,0,0,0)",i.fillRect(0,0,1,1))}function l(o){return r||n(),r.width=o.width,r.height=o.height,i.filter="url(#"+e+")",r}return{load:n,get:l}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader=function(){return{loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas}}(),registeredEffects={};function CVEffects(t){var e,r=t.data.ef?t.data.ef.length:0;this.filters=[];var i;for(e=0;e<r;e+=1){i=null;var s=t.data.ef[e].ty;if(registeredEffects[s]){var a=registeredEffects[s].effect;i=new a(t.effectsManager.effectElements[e],t)}i&&this.filters.push(i)}this.filters.length&&t.addRenderableComponent(this)}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var r,i=this.masksProperties.length,s=!1;for(r=0;r<i;r+=1)this.masksProperties[r].mode!=="n"&&(s=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=s,s&&this.element.addRenderableComponent(this)}CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t=this.element.finalTransform.mat,e=this.element.canvasContext,r,i=this.masksProperties.length,s,a,n;for(e.beginPath(),r=0;r<i;r+=1)if(this.masksProperties[r].mode!=="n"){this.masksProperties[r].inv&&(e.moveTo(0,0),e.lineTo(this.element.globalData.compSize.w,0),e.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),e.lineTo(0,this.element.globalData.compSize.h),e.lineTo(0,0)),n=this.viewData[r].v,s=t.applyToPointArray(n.v[0][0],n.v[0][1],0),e.moveTo(s[0],s[1]);var l,o=n._length;for(l=1;l<o;l+=1)a=t.applyToTriplePoints(n.o[l-1],n.i[l],n.v[l]),e.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5]);a=t.applyToTriplePoints(n.o[l-1],n.i[0],n.v[0]),e.bezierCurveTo(a[0],a[1],a[2],a[3],a[4],a[5])}this.element.globalData.renderer.save(!0),e.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};function CVBaseElement(){}var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var e=this.globalData.canvasContext,r=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(r);var i=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(i),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var e=this.globalData;if(e.blendMode!==this.data.bm){e.blendMode=this.data.bm;var r=getBlendMode(this.data.bm);e.canvasContext.globalCompositeOperation=r}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){!this.hidden&&(!this.isInRange||this.isTransparent)&&(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(e){e.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var e=this.buffers[0],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var e=this.buffers[1],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform);var i=this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1);if(i.renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var s=assetLoader.getLumaCanvas(this.canvasContext.canvas),a=s.getContext("2d");a.drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(s,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(e,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(e){if(!(this.hidden||this.data.hd)&&!(this.data.td===1&&!e)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var r=this.data.ty===0;this.prepareLayer(),this.globalData.renderer.save(r),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(r),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(t,e,r,i){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var s=4;e.ty==="rc"?s=5:e.ty==="el"?s=6:e.ty==="sr"&&(s=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,s,t);var a,n=r.length,l;for(a=0;a<n;a+=1)r[a].closed||(l={transforms:i.addTransformSequence(r[a].transforms),trNodes:[]},this.styledShapes.push(l),r[a].elements.push(l))}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:t.hd===!0},i={};if(t.ty==="fl"||t.ty==="st"?(i.c=PropertyFactory.getProp(this,t.c,1,255,this),i.c.k||(r.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")")):(t.ty==="gf"||t.ty==="gs")&&(i.s=PropertyFactory.getProp(this,t.s,1,null,this),i.e=PropertyFactory.getProp(this,t.e,1,null,this),i.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),i.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),i.g=new GradientProperty(this,t.g,this)),i.o=PropertyFactory.getProp(this,t.o,0,.01,this),t.ty==="st"||t.ty==="gs"){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],t.lj==1&&(r.ml=t.ml),i.w=PropertyFactory.getProp(this,t.w,0,null,this),i.w.k||(r.wi=i.w.v),t.d){var s=new DashProperty(this,t.d,"canvas",this);i.d=s,i.d.k||(r.da=i.d.dashArray,r.do=i.d.dashoffset[0])}}else r.r=t.r===2?"evenodd":"nonzero";return this.stylesList.push(r),i.style=r,i},CVShapeElement.prototype.createGroupElement=function(){var t={it:[],prevViewData:[]};return t},CVShapeElement.prototype.createTransformElement=function(t){var e={transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}};return e},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,i,s){var a,n=t.length-1,l,o,p=[],b=[],C,c,S,g=[].concat(s);for(a=n;a>=0;a-=1){if(C=this.searchProcessedElement(t[a]),C?e[a]=r[C-1]:t[a]._shouldRender=i,t[a].ty==="fl"||t[a].ty==="st"||t[a].ty==="gf"||t[a].ty==="gs")C?e[a].style.closed=!1:e[a]=this.createStyleElement(t[a],g),p.push(e[a].style);else if(t[a].ty==="gr"){if(!C)e[a]=this.createGroupElement(t[a]);else for(o=e[a].it.length,l=0;l<o;l+=1)e[a].prevViewData[l]=e[a].it[l];this.searchShapes(t[a].it,e[a].it,e[a].prevViewData,i,g)}else t[a].ty==="tr"?(C||(S=this.createTransformElement(t[a]),e[a]=S),g.push(e[a]),this.addTransformToStyleList(e[a])):t[a].ty==="sh"||t[a].ty==="rc"||t[a].ty==="el"||t[a].ty==="sr"?C||(e[a]=this.createShapeElement(t[a])):t[a].ty==="tm"||t[a].ty==="rd"||t[a].ty==="pb"||t[a].ty==="zz"||t[a].ty==="op"?(C?(c=e[a],c.closed=!1):(c=ShapeModifiers.getModifier(t[a].ty),c.init(this,t[a]),e[a]=c,this.shapeModifiers.push(c)),b.push(c)):t[a].ty==="rp"&&(C?(c=e[a],c.closed=!0):(c=ShapeModifiers.getModifier(t[a].ty),e[a]=c,c.init(this,t,a,e),this.shapeModifiers.push(c),i=!1),b.push(c));this.addProcessedElement(t[a],a+1)}for(this.removeTransformFromStyleList(),this.closeStyles(p),n=b.length,a=0;a<n;a+=1)b[a].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e=this.stylesList.length,r,i,s,a,n,l,o=this.globalData.renderer,p=this.globalData.canvasContext,b,C;for(t=0;t<e;t+=1)if(C=this.stylesList[t],b=C.type,!((b==="st"||b==="gs")&&C.wi===0||!C.data._shouldRender||C.coOp===0||this.globalData.currentGlobalAlpha===0)){for(o.save(),n=C.elements,b==="st"||b==="gs"?(o.ctxStrokeStyle(b==="st"?C.co:C.grd),o.ctxLineWidth(C.wi),o.ctxLineCap(C.lc),o.ctxLineJoin(C.lj),o.ctxMiterLimit(C.ml||0)):o.ctxFillStyle(b==="fl"?C.co:C.grd),o.ctxOpacity(C.coOp),b!=="st"&&b!=="gs"&&p.beginPath(),o.ctxTransform(C.preTransforms.finalTransform.props),i=n.length,r=0;r<i;r+=1){for((b==="st"||b==="gs")&&(p.beginPath(),C.da&&(p.setLineDash(C.da),p.lineDashOffset=C.do)),l=n[r].trNodes,a=l.length,s=0;s<a;s+=1)l[s].t==="m"?p.moveTo(l[s].p[0],l[s].p[1]):l[s].t==="c"?p.bezierCurveTo(l[s].pts[0],l[s].pts[1],l[s].pts[2],l[s].pts[3],l[s].pts[4],l[s].pts[5]):p.closePath();(b==="st"||b==="gs")&&(o.ctxStroke(),C.da&&p.setLineDash(this.dashResetter))}b!=="st"&&b!=="gs"&&this.globalData.renderer.ctxFill(C.r),o.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,i){var s,a=e.length-1,n;for(n=t,s=a;s>=0;s-=1)e[s].ty==="tr"?(n=r[s].transform,this.renderShapeTransform(t,n)):e[s].ty==="sh"||e[s].ty==="el"||e[s].ty==="rc"||e[s].ty==="sr"?this.renderPath(e[s],r[s]):e[s].ty==="fl"?this.renderFill(e[s],r[s],n):e[s].ty==="st"?this.renderStroke(e[s],r[s],n):e[s].ty==="gf"||e[s].ty==="gs"?this.renderGradientFill(e[s],r[s],n):e[s].ty==="gr"?this.renderShape(n,e[s].it,r[s].it):e[s].ty;i&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r=t.trNodes,i=e.paths,s,a,n,l=i._length;r.length=0;var o=t.transforms.finalTransform;for(n=0;n<l;n+=1){var p=i.shapes[n];if(p&&p.v){for(a=p._length,s=1;s<a;s+=1)s===1&&r.push({t:"m",p:o.applyToPointArray(p.v[0][0],p.v[0][1],0)}),r.push({t:"c",pts:o.applyToTriplePoints(p.o[s-1],p.i[s],p.v[s])});a===1&&r.push({t:"m",p:o.applyToPointArray(p.v[0][0],p.v[0][1],0)}),p.c&&a&&(r.push({t:"c",pts:o.applyToTriplePoints(p.o[s-1],p.i[0],p.v[0])}),r.push({t:"z"}))}}t.trNodes=r}},CVShapeElement.prototype.renderPath=function(t,e){if(t.hd!==!0&&t._shouldRender){var r,i=e.styledShapes.length;for(r=0;r<i;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var i=e.style;(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var i=e.style,s;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||t.t!==1&&(e.h._mdf||e.a._mdf)){var a=this.globalData.canvasContext,n=e.s.v,l=e.e.v;if(t.t===1)s=a.createLinearGradient(n[0],n[1],l[0],l[1]);else{var o=Math.sqrt(Math.pow(n[0]-l[0],2)+Math.pow(n[1]-l[1],2)),p=Math.atan2(l[1]-n[1],l[0]-n[0]),b=e.h.v;b>=1?b=.99:b<=-1&&(b=-.99);var C=o*b,c=Math.cos(p+e.a.v)*C+n[0],S=Math.sin(p+e.a.v)*C+n[1];s=a.createRadialGradient(c,S,0,n[0],n[1],o)}var g,y=t.g.p,T=e.g.c,u=1;for(g=0;g<y;g+=1)e.g._hasOpacity&&e.g._collapsable&&(u=e.g.o[g*2+1]),s.addColorStop(T[g*4]/100,"rgba("+T[g*4+1]+","+T[g*4+2]+","+T[g*4+3]+","+u+")");i.grd=s}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var i=e.style,s=e.d;s&&(s._mdf||this._isFirstFrame)&&(i.da=s.dashArray,i.do=s.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(i.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0};function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var i=this.globalData.fontManager.getFontByName(t.f),s,a,n=t.l,l=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,a=t.finalText.length;var o,p,b,C,c,S,g,y,T,u,d=this.data.singleShape,f=t.tr*.001*t.finalSize,x=0,_=0,A=!0,k=0;for(s=0;s<a;s+=1){o=this.globalData.fontManager.getCharData(t.finalText[s],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),p=o&&o.data||{},l.reset(),d&&n[s].n&&(x=-f,_+=t.yOffset,_+=A?1:0,A=!1),c=p.shapes?p.shapes[0].it:[],g=c.length,l.scale(t.finalSize/100,t.finalSize/100),d&&this.applyTextPropertiesToMatrix(t,l,n[s].line,x,_),T=createSizedArray(g-1);var F=0;for(S=0;S<g;S+=1)if(c[S].ty==="sh"){for(C=c[S].ks.k.i.length,y=c[S].ks.k,u=[],b=1;b<C;b+=1)b===1&&u.push(l.applyToX(y.v[0][0],y.v[0][1],0),l.applyToY(y.v[0][0],y.v[0][1],0)),u.push(l.applyToX(y.o[b-1][0],y.o[b-1][1],0),l.applyToY(y.o[b-1][0],y.o[b-1][1],0),l.applyToX(y.i[b][0],y.i[b][1],0),l.applyToY(y.i[b][0],y.i[b][1],0),l.applyToX(y.v[b][0],y.v[b][1],0),l.applyToY(y.v[b][0],y.v[b][1],0));u.push(l.applyToX(y.o[b-1][0],y.o[b-1][1],0),l.applyToY(y.o[b-1][0],y.o[b-1][1],0),l.applyToX(y.i[0][0],y.i[0][1],0),l.applyToY(y.i[0][0],y.i[0][1],0),l.applyToX(y.v[0][0],y.v[0][1],0),l.applyToY(y.v[0][0],y.v[0][1],0)),T[F]=u,F+=1}d&&(x+=n[s].l,x+=f),this.textSpans[k]?this.textSpans[k].elem=T:this.textSpans[k]={elem:T},k+=1}},CVTextElement.prototype.renderInnerContent=function(){this.validateText();var t=this.canvasContext;t.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var e,r,i,s,a,n,l=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;r=o.length;var p,b=null,C=null,c=null,S,g,y=this.globalData.renderer;for(e=0;e<r;e+=1)if(!o[e].n){if(p=l[e],p&&(y.save(),y.ctxTransform(p.p),y.ctxOpacity(p.o)),this.fill){for(p&&p.fc?b!==p.fc&&(y.ctxFillStyle(p.fc),b=p.fc):b!==this.values.fill&&(b=this.values.fill,y.ctxFillStyle(this.values.fill)),S=this.textSpans[e].elem,s=S.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(g=S[i],n=g.length,this.globalData.canvasContext.moveTo(g[0],g[1]),a=2;a<n;a+=6)this.globalData.canvasContext.bezierCurveTo(g[a],g[a+1],g[a+2],g[a+3],g[a+4],g[a+5]);this.globalData.canvasContext.closePath(),y.ctxFill()}if(this.stroke){for(p&&p.sw?c!==p.sw&&(c=p.sw,y.ctxLineWidth(p.sw)):c!==this.values.sWidth&&(c=this.values.sWidth,y.ctxLineWidth(this.values.sWidth)),p&&p.sc?C!==p.sc&&(C=p.sc,y.ctxStrokeStyle(p.sc)):C!==this.values.stroke&&(C=this.values.stroke,y.ctxStrokeStyle(this.values.stroke)),S=this.textSpans[e].elem,s=S.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(g=S[i],n=g.length,this.globalData.canvasContext.moveTo(g[0],g[1]),a=2;a<n;a+=6)this.globalData.canvasContext.bezierCurveTo(g[a],g[a+1],g[a+2],g[a+3],g[a+4],g[a+5]);this.globalData.canvasContext.closePath(),y.ctxStroke()}p&&this.globalData.renderer.restore()}};function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e=t.getContext("2d"),r=this.img.width,i=this.img.height,s=r/i,a=this.assetData.w/this.assetData.h,n,l,o=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>a&&o==="xMidYMid slice"||s<a&&o!=="xMidYMid slice"?(l=i,n=l*a):(n=r,l=n/a),e.drawImage(this.img,(r-n)/2,(i-l)/2,n,l,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null};function CVSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){t[0]===1&&t[1]===0&&t[4]===0&&t[5]===1&&t[12]===0&&t[13]===0||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,i){this.canvasContext.fillRect(t,e,r,i)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}this.contextData.reset()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){this.reset();var r,i;t?(r=t,i=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=i):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,i=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=i*this.renderConfig.dpr);var s,a;if(this.renderConfig.preserveAspectRatio.indexOf("meet")!==-1||this.renderConfig.preserveAspectRatio.indexOf("slice")!==-1){var n=this.renderConfig.preserveAspectRatio.split(" "),l=n[1]||"meet",o=n[0]||"xMidYMid",p=o.substr(0,4),b=o.substr(4);s=r/i,a=this.transformCanvas.w/this.transformCanvas.h,a>s&&l==="meet"||a<s&&l==="slice"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr)),p==="xMid"&&(a<s&&l==="meet"||a>s&&l==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))/2*this.renderConfig.dpr:p==="xMax"&&(a<s&&l==="meet"||a>s&&l==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))*this.renderConfig.dpr:this.transformCanvas.tx=0,b==="YMid"&&(a>s&&l==="meet"||a<s&&l==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:b==="YMax"&&(a>s&&l==="meet"||a<s&&l==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:this.transformCanvas.ty=0}else this.renderConfig.preserveAspectRatio==="none"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText="");var t,e=this.layers?this.layers.length:0;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if(!(this.renderedFrame===t&&this.renderConfig.clearCanvas===!0&&!e||this.destroyed||t===-1)){this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var r,i=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(this.renderConfig.clearCanvas===!0?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();this.renderConfig.clearCanvas!==!0&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"};function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){this.stack=[],this.cArrPos=0,this.cTr=new Matrix;var t,e=15;for(t=0;t<e;t+=1){var r=new CanvasContext;this.stack[t]=r}this._length=e,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}CVContextData.prototype.duplicate=function(){var t=this._length*2,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e=this.stack[this.cArrPos],r=e.transform,i,s=this.cTr.props;for(i=0;i<16;i+=1)s[i]=r[i];if(t){this.nativeContext.restore();var a=this.stack[this.cArrPos+1];this.appliedFillStyle=a.fillStyle,this.appliedStrokeStyle=a.strokeStyle,this.appliedLineWidth=a.lineWidth,this.appliedLineCap=a.lineCap,this.appliedLineJoin=a.lineJoin,this.appliedMiterLimit=a.miterLimit}this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),(t||e.opacity!==-1&&this.currentOpacity!==e.opacity)&&(this.nativeContext.globalAlpha=e.opacity,this.currentOpacity=e.opacity),this.currentFillStyle=e.fillStyle,this.currentStrokeStyle=e.strokeStyle,this.currentLineWidth=e.lineWidth,this.currentLineCap=e.lineCap,this.currentLineJoin=e.lineJoin,this.currentMiterLimit=e.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r=this.stack[this.cArrPos],i;for(i=0;i<16;i+=1)r.transform[i]=e[i];this.cArrPos+=1;var s=this.stack[this.cArrPos];s.opacity=r.opacity,s.fillStyle=r.fillStyle,s.strokeStyle=r.strokeStyle,s.lineWidth=r.lineWidth,s.lineCap=r.lineCap,s.lineJoin=r.lineJoin,s.miterLimit=r.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,i){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,i)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()};function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip();var e,r=this.layers.length;for(e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var t,e=this.layers.length;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:e&&e.clearCanvas!==void 0?e.clearCanvas:!0,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.bm!==0&&this.setBlendMode()},renderElement:function(){var e=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var r=this.finalTransform.mat.toCSS();e.transform=r,e.webkitTransform=r}this.finalTransform._opMdf&&(e.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?(t=createNS("rect"),t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(t=createTag("div"),t.style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)};function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r=t.sh.v,i=t.transformers,s,a=r._length,n,l,o,p;if(!(a<=1)){for(s=0;s<a-1;s+=1)n=this.getTransformedPoint(i,r.v[s]),l=this.getTransformedPoint(i,r.o[s]),o=this.getTransformedPoint(i,r.i[s+1]),p=this.getTransformedPoint(i,r.v[s+1]),this.checkBounds(n,l,o,p,e);r.c&&(n=this.getTransformedPoint(i,r.v[s]),l=this.getTransformedPoint(i,r.o[s]),o=this.getTransformedPoint(i,r.i[0]),p=this.getTransformedPoint(i,r.v[0]),this.checkBounds(n,l,o,p,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,i,s){this.getBoundsOfCurve(t,e,r,i);var a=this.shapeBoundingBox;s.x=bmMin(a.left,s.x),s.xMax=bmMax(a.right,s.xMax),s.y=bmMin(a.top,s.y),s.yMax=bmMax(a.bottom,s.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,i){for(var s=[[t[0],i[0]],[t[1],i[1]]],a,n,l,o,p,b,C,c=0;c<2;++c)n=6*t[c]-12*e[c]+6*r[c],a=-3*t[c]+9*e[c]-9*r[c]+3*i[c],l=3*e[c]-3*t[c],n|=0,a|=0,l|=0,a===0&&n===0||(a===0?(o=-l/n,o>0&&o<1&&s[c].push(this.calculateF(o,t,e,r,i,c))):(p=n*n-4*l*a,p>=0&&(b=(-n+bmSqrt(p))/(2*a),b>0&&b<1&&s[c].push(this.calculateF(b,t,e,r,i,c)),C=(-n-bmSqrt(p))/(2*a),C>0&&C<1&&s[c].push(this.calculateF(C,t,e,r,i,c)))));this.shapeBoundingBox.left=bmMin.apply(null,s[0]),this.shapeBoundingBox.top=bmMin.apply(null,s[1]),this.shapeBoundingBox.right=bmMax.apply(null,s[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,s[1])},HShapeElement.prototype.calculateF=function(t,e,r,i,s,a){return bmPow(1-t,3)*e[a]+3*bmPow(1-t,2)*t*r[a]+3*(1-t)*bmPow(t,2)*i[a]+bmPow(t,3)*s[a]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var i=0;i<t.keyframes.length;i+=1){var s=t.keyframes[i].s;s>r&&(r=s)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var i=this.shapeCont.style,s="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";i.transform=s,i.webkitTransform=s}}};function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var i=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{e.fontFamily=i.fFamily;var s=t.fWeight,a=t.fStyle;e.fontStyle=a,e.fontWeight=s}var n,l,o=t.l;l=o.length;var p,b,C,c=this.mHelper,S,g="",y=0;for(n=0;n<l;n+=1){if(this.globalData.fontManager.chars?(this.textPaths[y]?p=this.textPaths[y]:(p=createNS("path"),p.setAttribute("stroke-linecap",lineCapEnum[1]),p.setAttribute("stroke-linejoin",lineJoinEnum[2]),p.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[y]?(b=this.textSpans[y],C=b.children[0]):(b=createTag("div"),b.style.lineHeight=0,C=createNS("svg"),C.appendChild(p),styleDiv(b)))):this.isMasked?p=this.textPaths[y]?this.textPaths[y]:createNS("text"):this.textSpans[y]?(b=this.textSpans[y],p=this.textPaths[y]):(b=createTag("span"),styleDiv(b),p=createTag("span"),styleDiv(p),b.appendChild(p)),this.globalData.fontManager.chars){var T=this.globalData.fontManager.getCharData(t.finalText[n],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),u;if(T?u=T.data:u=null,c.reset(),u&&u.shapes&&u.shapes.length&&(S=u.shapes[0].it,c.scale(t.finalSize/100,t.finalSize/100),g=this.createPathShape(c,S),p.setAttribute("d",g)),this.isMasked)this.innerElem.appendChild(p);else{if(this.innerElem.appendChild(b),u&&u.shapes){document.body.appendChild(C);var d=C.getBBox();C.setAttribute("width",d.width+2),C.setAttribute("height",d.height+2),C.setAttribute("viewBox",d.x-1+" "+(d.y-1)+" "+(d.width+2)+" "+(d.height+2));var f=C.style,x="translate("+(d.x-1)+"px,"+(d.y-1)+"px)";f.transform=x,f.webkitTransform=x,o[n].yOffset=d.y-1}else C.setAttribute("width",1),C.setAttribute("height",1);b.appendChild(C)}}else if(p.textContent=o[n].val,p.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(p);else{this.innerElem.appendChild(b);var _=p.style,A="translate3d(0,"+-t.finalSize/1.2+"px,0)";_.transform=A,_.webkitTransform=A}this.isMasked?this.textSpans[y]=p:this.textSpans[y]=b,this.textSpans[y].style.display="block",this.textPaths[y]=p,y+=1}for(;y<this.textSpans.length;)this.textSpans[y].style.display="none",y+=1},HTextElement.prototype.renderInnerContent=function(){this.validateText();var t;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),!(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag)){var r,i,s=0,a=this.textAnimator.renderedLetters,n=this.textProperty.currentData.l;i=n.length;var l,o,p;for(r=0;r<i;r+=1)n[r].n?s+=1:(o=this.textSpans[r],p=this.textPaths[r],l=a[s],s+=1,l._mdf.m&&(this.isMasked?o.setAttribute("transform",l.m):(o.style.webkitTransform=l.m,o.style.transform=l.m)),o.style.opacity=l.o,l.sw&&l._mdf.sw&&p.setAttribute("stroke-width",l.sw),l.sc&&l._mdf.sc&&p.setAttribute("stroke",l.sc),l.fc&&l._mdf.fc&&(p.setAttribute("fill",l.fc),p.style.color=l.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var b=this.innerElem.getBBox();this.currentBBox.w!==b.width&&(this.currentBBox.w=b.width,this.svgElement.setAttribute("width",b.width)),this.currentBBox.h!==b.height&&(this.currentBBox.h=b.height,this.svgElement.setAttribute("height",b.height));var C=1;if(this.currentBBox.w!==b.width+C*2||this.currentBBox.h!==b.height+C*2||this.currentBBox.x!==b.x-C||this.currentBBox.y!==b.y-C){this.currentBBox.w=b.width+C*2,this.currentBBox.h=b.height+C*2,this.currentBBox.x=b.x-C,this.currentBBox.y=b.y-C,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var c="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=c,t.webkitTransform=c}}}};function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var i=PropertyFactory.getProp;if(this.pe=i(this,t.pe,0,0,this),t.ks.p.s?(this.px=i(this,t.ks.p.x,1,0,this),this.py=i(this,t.ks.p.y,1,0,this),this.pz=i(this,t.ks.p.z,1,0,this)):this.p=i(this,t.ks.p,1,0,this),t.ks.a&&(this.a=i(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var s,a=t.ks.or.k.length;for(s=0;s<a;s+=1)t.ks.or.k[s].to=null,t.ks.or.k[s].ti=null}this.or=i(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=i(this,t.ks.rx,0,degToRads,this),this.ry=i(this,t.ks.ry,0,degToRads,this),this.rz=i(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e=this.comp.threeDElements.length,r,i,s;for(t=0;t<e;t+=1)if(r=this.comp.threeDElements[t],r.type==="3d"){i=r.perspectiveElem.style,s=r.container.style;var a=this.pe.v+"px",n="0px 0px 0px",l="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";i.perspective=a,i.webkitPerspective=a,s.transformOrigin=n,s.mozTransformOrigin=n,s.webkitTransformOrigin=n,i.transform=l,i.webkitTransform=l}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t=this._isFirstFrame,e,r;if(this.hierarchy)for(r=this.hierarchy.length,e=0;e<r;e+=1)t=this.hierarchy[e].finalTransform.mProp._mdf||t;if(t||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(r=this.hierarchy.length-1,e=r;e>=0;e-=1){var i=this.hierarchy[e].finalTransform.mProp;this.mat.translate(-i.p.v[0],-i.p.v[1],i.p.v[2]),this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]),this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v),this.mat.scale(1/i.s.v[0],1/i.s.v[1],1/i.s.v[2]),this.mat.translate(i.a.v[0],i.a.v[1],i.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var s;this.p?s=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:s=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var a=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)+Math.pow(s[2],2)),n=[s[0]/a,s[1]/a,s[2]/a],l=Math.sqrt(n[2]*n[2]+n[0]*n[0]),o=Math.atan2(n[1],l),p=Math.atan2(n[0],-n[2]);this.mat.rotateY(p).rotateX(-o)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var b=!this._prevMat.equals(this.mat);if((b||this.pe._mdf)&&this.comp.threeDElements){r=this.comp.threeDElements.length;var C,c,S;for(e=0;e<r;e+=1)if(C=this.comp.threeDElements[e],C.type==="3d"){if(b){var g=this.mat.toCSS();S=C.container.style,S.transform=g,S.webkitTransform=g}this.pe._mdf&&(c=C.perspectiveElem.style,c.perspective=this.pe.v+"px",c.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null};function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)};function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var i=this.layers[e];if(!i.ddd||!this.supports3d)if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var s=0,a,n,l;s<e;)this.elements[s]&&this.elements[s]!==!0&&this.elements[s].getBaseElement&&(n=this.elements[s],l=this.layers[s].ddd?this.getThreeDContainerByPos(s):n.getBaseElement(),a=l||a),s+=1;a?(!i.ddd||!this.supports3d)&&this.layerElement.insertBefore(r,a):(!i.ddd||!this.supports3d)&&this.layerElement.appendChild(r)}else this.addTo3dContainer(r,e)}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r=createTag("div"),i,s;styleDiv(r);var a=createTag("div");if(styleDiv(a),e==="3d"){i=r.style,i.width=this.globalData.compSize.w+"px",i.height=this.globalData.compSize.h+"px";var n="50% 50%";i.webkitTransformOrigin=n,i.mozTransformOrigin=n,i.transformOrigin=n,s=a.style;var l="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";s.transform=l,s.webkitTransform=l}r.appendChild(a);var o={container:a,perspectiveElem:r,startPos:t,endPos:t,type:e};return this.threeDElements.push(o),o},HybridRendererBase.prototype.build3dContainers=function(){var t,e=this.layers.length,r,i="";for(t=0;t<e;t+=1)this.layers[t].ddd&&this.layers[t].ty!==3?(i!=="3d"&&(i="3d",r=this.createThreeDContainer(t,"3d")),r.endPos=Math.max(r.endPos,t)):(i!=="2d"&&(i="2d",r=this.createThreeDContainer(t,"2d")),r.endPos=Math.max(r.endPos,t));for(e=this.threeDElements.length,t=e-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,i=this.threeDElements.length;r<i;){if(e<=this.threeDElements[r].endPos){for(var s=this.threeDElements[r].startPos,a;s<e;)this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s].getBaseElement()),s+=1;a?this.threeDElements[r].container.insertBefore(t,a):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,i=e.style;i.width=t.w+"px",i.height=t.h+"px",this.resizerElem=e,styleDiv(e),i.transformStyle="flat",i.mozTransformStyle="flat",i.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),i.overflow="hidden";var s=createNS("svg");s.setAttribute("width","1"),s.setAttribute("height","1"),styleDiv(s),this.resizerElem.appendChild(s);var a=createNS("defs");s.appendChild(a),this.data=t,this.setupGlobalData(t,s),this.globalData.defs=a,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,r=t/e,i=this.globalData.compSize.w/this.globalData.compSize.h,s,a,n,l;i>r?(s=t/this.globalData.compSize.w,a=t/this.globalData.compSize.w,n=0,l=(e-this.globalData.compSize.h*(t/this.globalData.compSize.w))/2):(s=e/this.globalData.compSize.h,a=e/this.globalData.compSize.h,n=(t-this.globalData.compSize.w*(e/this.globalData.compSize.h))/2,l=0);var o=this.resizerElem.style;o.webkitTransform="matrix3d("+s+",0,0,0,0,"+a+",0,0,0,0,1,0,"+n+","+l+",0,1)",o.transform=o.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t=this.globalData.compSize.w,e=this.globalData.compSize.h,r,i=this.threeDElements.length;for(r=0;r<i;r+=1){var s=this.threeDElements[r].perspectiveElem.style;s.webkitPerspective=Math.sqrt(Math.pow(t,2)+Math.pow(e,2))+"px",s.perspective=s.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,i=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var s=this.createComp(t[e],i,this.globalData.comp,null);s.initExpressions(),this.globalData.projectInterface.registerComposition(s)}};function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r=0,i;r<e;)this.elements[r]&&this.elements[r].getBaseElement&&(i=this.elements[r].getBaseElement()),r+=1;i?this.layerElement.insertBefore(t,i):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(){return function(t){function e(r){for(var i=0,s=t.layers.length;i<s;){if(t.layers[i].nm===r||t.layers[i].ind===r)return t.elements[i].layerInterface;i+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e}}();function _typeof$2(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$2=function(r){return typeof r}:_typeof$2=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$2(t)}function seedRandom(t,e){var r=this,i=256,s=6,a=52,n="random",l=e.pow(i,s),o=e.pow(2,a),p=o*2,b=i-1,C;function c(f,x,_){var A=[];x=x===!0?{entropy:!0}:x||{};var k=T(y(x.entropy?[f,d(t)]:f===null?u():f,3),A),F=new S(A),V=function(){for(var z=F.g(s),O=l,H=0;z<o;)z=(z+H)*i,O*=i,H=F.g(1);for(;z>=p;)z/=2,O/=2,H>>>=1;return(z+H)/O};return V.int32=function(){return F.g(4)|0},V.quick=function(){return F.g(4)/4294967296},V.double=V,T(d(F.S),t),(x.pass||_||function(W,z,O,H){return H&&(H.S&&g(H,F),W.state=function(){return g(F,{})}),O?(e[n]=W,z):W})(V,k,"global"in x?x.global:this==e,x.state)}e["seed"+n]=c;function S(f){var x,_=f.length,A=this,k=0,F=A.i=A.j=0,V=A.S=[];for(_||(f=[_++]);k<i;)V[k]=k++;for(k=0;k<i;k++)V[k]=V[F=b&F+f[k%_]+(x=V[k])],V[F]=x;A.g=function(W){for(var z,O=0,H=A.i,q=A.j,B=A.S;W--;)z=B[H=b&H+1],O=O*i+B[b&(B[H]=B[q=b&q+z])+(B[q]=z)];return A.i=H,A.j=q,O}}function g(f,x){return x.i=f.i,x.j=f.j,x.S=f.S.slice(),x}function y(f,x){var _=[],A=_typeof$2(f),k;if(x&&A=="object")for(k in f)try{_.push(y(f[k],x-1))}catch{}return _.length?_:A=="string"?f:f+"\0"}function T(f,x){for(var _=f+"",A,k=0;k<_.length;)x[b&k]=b&(A^=x[b&k]*19)+_.charCodeAt(k++);return d(x)}function u(){try{var f=new Uint8Array(i);return(r.crypto||r.msCrypto).getRandomValues(f),d(f)}catch{var x=r.navigator,_=x&&x.plugins;return[+new Date,r,_,r.screen,d(t)]}}function d(f){return String.fromCharCode.apply(0,f)}T(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$1=function(r){return typeof r}:_typeof$1=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return t==="number"||e instanceof Number||t==="boolean"||t==="string"}function $bm_neg(t){var e=_typeof$1(t);if(e==="number"||t instanceof Number||e==="boolean")return-t;if($bm_isInstanceOfArray(t)){var r,i=t.length,s=[];for(r=0;r<i;r+=1)s[r]=-t[r];return s}return t.propType?t.v:-t}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e)||r==="string"||i==="string")return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,a=t.length,n=e.length,l=[];s<a||s<n;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?l[s]=t[s]+e[s]:l[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return l}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e))return r==="string"&&(t=parseInt(t,10)),i==="string"&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,a=t.length,n=e.length,l=[];s<a||s<n;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?l[s]=t[s]-e[s]:l[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return l}return 0}function mul(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t*e;var a,n;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(n=t.length,s=createTypedArray("float32",n),a=0;a<n;a+=1)s[a]=t[a]*e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(n=e.length,s=createTypedArray("float32",n),a=0;a<n;a+=1)s[a]=t*e[a];return s}return 0}function div(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t/e;var a,n;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(n=t.length,s=createTypedArray("float32",n),a=0;a<n;a+=1)s[a]=t[a]/e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(n=e.length,s=createTypedArray("float32",n),a=0;a<n;a+=1)s[a]=t/e[a];return s}return 0}function mod(t,e){return typeof t=="string"&&(t=parseInt(t,10)),typeof e=="string"&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var i=r;r=e,e=i}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if(typeof t=="number"||t instanceof Number)return e=e||0,Math.abs(t-e);e||(e=helperLengthArray);var r,i=Math.min(t.length,e.length),s=0;for(r=0;r<i;r+=1)s+=Math.pow(e[r]-t[r],2);return Math.sqrt(s)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e=t[0],r=t[1],i=t[2],s=Math.max(e,r,i),a=Math.min(e,r,i),n,l,o=(s+a)/2;if(s===a)n=0,l=0;else{var p=s-a;switch(l=o>.5?p/(2-s-a):p/(s+a),s){case e:n=(r-i)/p+(r<i?6:0);break;case r:n=(i-e)/p+2;break;case i:n=(e-r)/p+4;break}n/=6}return[n,l,o,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+(e-t)*6*r:r<1/2?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e=t[0],r=t[1],i=t[2],s,a,n;if(r===0)s=i,n=i,a=i;else{var l=i<.5?i*(1+r):i+r-i*r,o=2*i-l;s=hue2rgb(o,l,e+1/3),a=hue2rgb(o,l,e),n=hue2rgb(o,l,e-1/3)}return[s,a,n,t[3]]}function linear(t,e,r,i,s){if((i===void 0||s===void 0)&&(i=e,s=r,e=0,r=1),r<e){var a=r;r=e,e=a}if(t<=e)return i;if(t>=r)return s;var n=r===e?0:(t-e)/(r-e);if(!i.length)return i+(s-i)*n;var l,o=i.length,p=createTypedArray("float32",o);for(l=0;l<o;l+=1)p[l]=i[l]+(s[l]-i[l])*n;return p}function random(t,e){if(e===void 0&&(t===void 0?(t=0,e=1):(e=t,t=void 0)),e.length){var r,i=e.length;t||(t=createTypedArray("float32",i));var s=createTypedArray("float32",i),a=BMMath.random();for(r=0;r<i;r+=1)s[r]=t[r]+a*(e[r]-t[r]);return s}t===void 0&&(t=0);var n=BMMath.random();return t+n*(e-t)}function createPath(t,e,r,i){var s,a=t.length,n=shapePool.newElement();n.setPathData(!!i,a);var l=[0,0],o,p;for(s=0;s<a;s+=1)o=e&&e[s]?e[s]:l,p=r&&r[s]?r[s]:l,n.setTripleAt(t[s][0],t[s][1],p[0]+t[s][0],p[1]+t[s][1],o[0]+t[s][0],o[1]+t[s][1],s,!0);return n}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=val.indexOf("random")!==-1,elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||this.data.hd!==!0,wiggle=(function t(e,r){var i,s,a=this.pv.length?this.pv.length:1,n=createTypedArray("float32",a);e=5;var l=Math.floor(time*e);for(i=0,s=0;i<l;){for(s=0;s<a;s+=1)n[s]+=-r+r*2*BMMath.random();i+=1}var o=time*e,p=o-Math.floor(o),b=createTypedArray("float32",a);if(a>1){for(s=0;s<a;s+=1)b[s]=this.pv[s]+n[s]+(-r+r*2*BMMath.random())*p;return b}return this.pv+n[0]+(-r+r*2*BMMath.random())*p}).bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty));function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],i=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads,s=-Math.atan2(r[1],r[2])/degToRads;return[s,i,0]}function easeOut(t,e,r,i,s){return applyEase(easeOutBez,t,e,r,i,s)}function easeIn(t,e,r,i,s){return applyEase(easeInBez,t,e,r,i,s)}function ease(t,e,r,i,s){return applyEase(easeInOutBez,t,e,r,i,s)}function applyEase(t,e,r,i,s,a){s===void 0?(s=r,a=i):e=(e-r)/(i-r),e>1?e=1:e<0&&(e=0);var n=t(e);if($bm_isInstanceOfArray(s)){var l,o=s.length,p=createTypedArray("float32",o);for(l=0;l<o;l+=1)p[l]=(a[l]-s[l])*n+s[l];return p}return(a-s)*n+s}function nearestKey(t){var e,r=data.k.length,i,s;if(!data.k.length||typeof data.k[0]=="number")i=0,s=0;else if(i=-1,t*=elem.comp.globalData.frameRate,t<data.k[0].t)i=1,s=data.k[0].t;else{for(e=0;e<r-1;e+=1)if(t===data.k[e].t){i=e+1,s=data.k[e].t;break}else if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(i=e+2,s=data.k[e+1].t):(i=e+1,s=data.k[e].t);break}i===-1&&(i=e+1,s=data.k[e].t)}var a={};return a.index=i,a.time=s/elem.comp.globalData.frameRate,a}function key(t){var e,r,i;if(!data.k.length||typeof data.k[0]=="number")throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var s=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(i=s.length,r=0;r<i;r+=1)e[r]=s[r],e.value[r]=s[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return!t&&t!==0&&(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return typeof value=="string"?e===void 0?value.substring(t):value.substring(t,e):""}function substr(t,e){return typeof value=="string"?e===void 0?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=t===0?0:Math.floor(time*t)/t,value=valueAtTime(time)}var time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!!(elem.hierarchy&&elem.hierarchy.length),parent,randSeed=Math.floor(Math.random()*1e6),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&this.propType!=="textSelector"?value:(this.propType==="textSelector"&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),elemType===4&&!content&&(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!!(elem.hierarchy&&elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt,scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={};t.initExpressions=e,t.resetFrame=ExpressionManager.resetFrame;function e(r){var i=0,s=[];function a(){i+=1}function n(){i-=1,i===0&&o()}function l(p){s.indexOf(p)===-1&&s.push(p)}function o(){var p,b=s.length;for(p=0;p<b;p+=1)s[p].release();s.length=0}r.renderer.compInterface=CompExpressionInterface(r.renderer),r.renderer.globalData.projectInterface.registerComposition(r.renderer),r.renderer.globalData.pushExpression=a,r.renderer.globalData.popExpression=n,r.renderer.globalData.registerExpressionProperty=l}return t}(),MaskManagerInterface=function(){function t(r,i){this._mask=r,this._data=i}Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),this._mask.op.v*100}});var e=function(i){var s=createSizedArray(i.viewData.length),a,n=i.viewData.length;for(a=0;a<n;a+=1)s[a]=new t(i.viewData[a],i.masksProperties[a]);var l=function(p){for(a=0;a<n;){if(i.masksProperties[a].nm===p)return s[a];a+=1}return null};return l};return e}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(n,l,o){Object.defineProperty(n,"velocity",{get:function(){return l.getVelocityAtTime(l.comp.currentFrame)}}),n.numKeys=l.keyframes?l.keyframes.length:0,n.key=function(p){if(!n.numKeys)return 0;var b="";"s"in l.keyframes[p-1]?b=l.keyframes[p-1].s:"e"in l.keyframes[p-2]?b=l.keyframes[p-2].e:b=l.keyframes[p-2].s;var C=o==="unidimensional"?new Number(b):Object.assign({},b);return C.time=l.keyframes[p-1].t/l.elem.comp.globalData.frameRate,C.value=o==="unidimensional"?b[0]:b,C},n.valueAtTime=l.getValueAtTime,n.speedAtTime=l.getSpeedAtTime,n.velocityAtTime=l.getVelocityAtTime,n.propertyGroup=l.propertyGroup}function i(n){(!n||!("pv"in n))&&(n=t);var l=1/n.mult,o=n.pv*l,p=new Number(o);return p.value=o,r(p,n,"unidimensional"),function(){return n.k&&n.getValue(),o=n.v*l,p.value!==o&&(p=new Number(o),p.value=o,r(p,n,"unidimensional")),p}}function s(n){(!n||!("pv"in n))&&(n=e);var l=1/n.mult,o=n.data&&n.data.l||n.pv.length,p=createTypedArray("float32",o),b=createTypedArray("float32",o);return p.value=b,r(p,n,"multidimensional"),function(){n.k&&n.getValue();for(var C=0;C<o;C+=1)b[C]=n.v[C]*l,p[C]=b[C];return p}}function a(){return t}return function(n){return n?n.propType==="unidimensional"?i(n):s(n):a}}(),TransformExpressionInterface=function(){return function(t){function e(n){switch(n){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)});var r,i,s,a;return t.p?a=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),i=ExpressionPropertyInterface(t.py),t.pz&&(s=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?a():[r(),i(),s?s():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e}}(),LayerExpressionInterface=function(){function t(p){var b=new Matrix;if(p!==void 0){var C=this._elem.finalTransform.mProp.getValueAtTime(p);C.clone(b)}else{var c=this._elem.finalTransform.mProp;c.applyToMatrix(b)}return b}function e(p,b){var C=this.getMatrix(b);return C.props[12]=0,C.props[13]=0,C.props[14]=0,this.applyPoint(C,p)}function r(p,b){var C=this.getMatrix(b);return this.applyPoint(C,p)}function i(p,b){var C=this.getMatrix(b);return C.props[12]=0,C.props[13]=0,C.props[14]=0,this.invertPoint(C,p)}function s(p,b){var C=this.getMatrix(b);return this.invertPoint(C,p)}function a(p,b){if(this._elem.hierarchy&&this._elem.hierarchy.length){var C,c=this._elem.hierarchy.length;for(C=0;C<c;C+=1)this._elem.hierarchy[C].finalTransform.mProp.applyToMatrix(p)}return p.applyToPointArray(b[0],b[1],b[2]||0)}function n(p,b){if(this._elem.hierarchy&&this._elem.hierarchy.length){var C,c=this._elem.hierarchy.length;for(C=0;C<c;C+=1)this._elem.hierarchy[C].finalTransform.mProp.applyToMatrix(p)}return p.inversePoint(b)}function l(p){var b=new Matrix;if(b.reset(),this._elem.finalTransform.mProp.applyToMatrix(b),this._elem.hierarchy&&this._elem.hierarchy.length){var C,c=this._elem.hierarchy.length;for(C=0;C<c;C+=1)this._elem.hierarchy[C].finalTransform.mProp.applyToMatrix(b);return b.inversePoint(p)}return b.inversePoint(p)}function o(){return[1,1,1,1]}return function(p){var b;function C(y){S.mask=new MaskManagerInterface(y,p)}function c(y){S.effect=y}function S(y){switch(y){case"ADBE Root Vectors Group":case"Contents":case 2:return S.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return b;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return S.effect;case"ADBE Text Properties":return S.textInterface;default:return null}}S.getMatrix=t,S.invertPoint=n,S.applyPoint=a,S.toWorld=r,S.toWorldVec=e,S.fromWorld=s,S.fromWorldVec=i,S.toComp=r,S.fromComp=l,S.sampleImage=o,S.sourceRectAtTime=p.sourceRectAtTime.bind(p),S._elem=p,b=TransformExpressionInterface(p.finalTransform.mProp);var g=getDescriptor(b,"anchorPoint");return Object.defineProperties(S,{hasParent:{get:function(){return p.hierarchy.length}},parent:{get:function(){return p.hierarchy[0].layerInterface}},rotation:getDescriptor(b,"rotation"),scale:getDescriptor(b,"scale"),position:getDescriptor(b,"position"),opacity:getDescriptor(b,"opacity"),anchorPoint:g,anchor_point:g,transform:{get:function(){return b}},active:{get:function(){return p.isInRange}}}),S.startTime=p.data.st,S.index=p.data.ind,S.source=p.data.refId,S.height=p.data.ty===0?p.data.h:100,S.width=p.data.ty===0?p.data.w:100,S.inPoint=p.data.ip/p.comp.globalData.frameRate,S.outPoint=p.data.op/p.comp.globalData.frameRate,S._name=p.data.nm,S.registerMaskInterface=C,S.registerEffectsInterface=c,S}}(),propertyGroupFactory=function(){return function(t,e){return function(r){return r=r===void 0?1:r,r<=0?t:e(r-1)}}}(),PropertyInterface=function(){return function(t,e){var r={_name:t};function i(s){return s=s===void 0?1:s,s<=0?r:e(s-1)}return i}}(),EffectsExpressionInterface=function(){var t={createEffectsInterface:e};function e(s,a){if(s.effectsManager){var n=[],l=s.data.ef,o,p=s.effectsManager.effectElements.length;for(o=0;o<p;o+=1)n.push(r(l[o],s.effectsManager.effectElements[o],a,s));var b=s.data.ef||[],C=function(S){for(o=0,p=b.length;o<p;){if(S===b[o].nm||S===b[o].mn||S===b[o].ix)return n[o];o+=1}return null};return Object.defineProperty(C,"numProperties",{get:function(){return b.length}}),C}return null}function r(s,a,n,l){function o(S){for(var g=s.ef,y=0,T=g.length;y<T;){if(S===g[y].nm||S===g[y].mn||S===g[y].ix)return g[y].ty===5?b[y]:b[y]();y+=1}throw new Error}var p=propertyGroupFactory(o,n),b=[],C,c=s.ef.length;for(C=0;C<c;C+=1)s.ef[C].ty===5?b.push(r(s.ef[C],a.effectElements[C],a.effectElements[C].propertyGroup,l)):b.push(i(a.effectElements[C],s.ef[C].ty,l,p));return s.mn==="ADBE Color Control"&&Object.defineProperty(o,"color",{get:function(){return b[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return s.np}},_name:{value:s.nm},propertyGroup:{value:p}}),o.enabled=s.en!==0,o.active=o.enabled,o}function i(s,a,n,l){var o=ExpressionPropertyInterface(s.p);function p(){return a===10?n.comp.compInterface(s.p.v):o()}return s.p.setGroupProperty&&s.p.setGroupProperty(PropertyInterface("",l)),p}return t}(),ShapePathInterface=function(){return function(e,r,i){var s=r.sh;function a(l){return l==="Shape"||l==="shape"||l==="Path"||l==="path"||l==="ADBE Vector Shape"||l===2?a.path:null}var n=propertyGroupFactory(a,i);return s.setGroupProperty(PropertyInterface("Path",n)),Object.defineProperties(a,{path:{get:function(){return s.k&&s.getValue(),s}},shape:{get:function(){return s.k&&s.getValue(),s}},_name:{value:e.nm},ix:{value:e.ix},propertyIndex:{value:e.ix},mn:{value:e.mn},propertyGroup:{value:i}}),a}}(),ShapeExpressionInterface=function(){function t(g,y,T){var u=[],d,f=g?g.length:0;for(d=0;d<f;d+=1)g[d].ty==="gr"?u.push(r(g[d],y[d],T)):g[d].ty==="fl"?u.push(i(g[d],y[d],T)):g[d].ty==="st"?u.push(n(g[d],y[d],T)):g[d].ty==="tm"?u.push(l(g[d],y[d],T)):g[d].ty==="tr"||(g[d].ty==="el"?u.push(p(g[d],y[d],T)):g[d].ty==="sr"?u.push(b(g[d],y[d],T)):g[d].ty==="sh"?u.push(ShapePathInterface(g[d],y[d],T)):g[d].ty==="rc"?u.push(C(g[d],y[d],T)):g[d].ty==="rd"?u.push(c(g[d],y[d],T)):g[d].ty==="rp"?u.push(S(g[d],y[d],T)):g[d].ty==="gf"?u.push(s(g[d],y[d],T)):u.push(a(g[d],y[d])));return u}function e(g,y,T){var u,d=function(_){for(var A=0,k=u.length;A<k;){if(u[A]._name===_||u[A].mn===_||u[A].propertyIndex===_||u[A].ix===_||u[A].ind===_)return u[A];A+=1}return typeof _=="number"?u[_-1]:null};d.propertyGroup=propertyGroupFactory(d,T),u=t(g.it,y.it,d.propertyGroup),d.numProperties=u.length;var f=o(g.it[g.it.length-1],y.it[y.it.length-1],d.propertyGroup);return d.transform=f,d.propertyIndex=g.cix,d._name=g.nm,d}function r(g,y,T){var u=function(_){switch(_){case"ADBE Vectors Group":case"Contents":case 2:return u.content;default:return u.transform}};u.propertyGroup=propertyGroupFactory(u,T);var d=e(g,y,u.propertyGroup),f=o(g.it[g.it.length-1],y.it[y.it.length-1],u.propertyGroup);return u.content=d,u.transform=f,Object.defineProperty(u,"_name",{get:function(){return g.nm}}),u.numProperties=g.np,u.propertyIndex=g.ix,u.nm=g.nm,u.mn=g.mn,u}function i(g,y,T){function u(d){return d==="Color"||d==="color"?u.color:d==="Opacity"||d==="opacity"?u.opacity:null}return Object.defineProperties(u,{color:{get:ExpressionPropertyInterface(y.c)},opacity:{get:ExpressionPropertyInterface(y.o)},_name:{value:g.nm},mn:{value:g.mn}}),y.c.setGroupProperty(PropertyInterface("Color",T)),y.o.setGroupProperty(PropertyInterface("Opacity",T)),u}function s(g,y,T){function u(d){return d==="Start Point"||d==="start point"?u.startPoint:d==="End Point"||d==="end point"?u.endPoint:d==="Opacity"||d==="opacity"?u.opacity:null}return Object.defineProperties(u,{startPoint:{get:ExpressionPropertyInterface(y.s)},endPoint:{get:ExpressionPropertyInterface(y.e)},opacity:{get:ExpressionPropertyInterface(y.o)},type:{get:function(){return"a"}},_name:{value:g.nm},mn:{value:g.mn}}),y.s.setGroupProperty(PropertyInterface("Start Point",T)),y.e.setGroupProperty(PropertyInterface("End Point",T)),y.o.setGroupProperty(PropertyInterface("Opacity",T)),u}function a(){function g(){return null}return g}function n(g,y,T){var u=propertyGroupFactory(k,T),d=propertyGroupFactory(A,u);function f(F){Object.defineProperty(A,g.d[F].nm,{get:ExpressionPropertyInterface(y.d.dataProps[F].p)})}var x,_=g.d?g.d.length:0,A={};for(x=0;x<_;x+=1)f(x),y.d.dataProps[x].p.setGroupProperty(d);function k(F){return F==="Color"||F==="color"?k.color:F==="Opacity"||F==="opacity"?k.opacity:F==="Stroke Width"||F==="stroke width"?k.strokeWidth:null}return Object.defineProperties(k,{color:{get:ExpressionPropertyInterface(y.c)},opacity:{get:ExpressionPropertyInterface(y.o)},strokeWidth:{get:ExpressionPropertyInterface(y.w)},dash:{get:function(){return A}},_name:{value:g.nm},mn:{value:g.mn}}),y.c.setGroupProperty(PropertyInterface("Color",u)),y.o.setGroupProperty(PropertyInterface("Opacity",u)),y.w.setGroupProperty(PropertyInterface("Stroke Width",u)),k}function l(g,y,T){function u(f){return f===g.e.ix||f==="End"||f==="end"?u.end:f===g.s.ix?u.start:f===g.o.ix?u.offset:null}var d=propertyGroupFactory(u,T);return u.propertyIndex=g.ix,y.s.setGroupProperty(PropertyInterface("Start",d)),y.e.setGroupProperty(PropertyInterface("End",d)),y.o.setGroupProperty(PropertyInterface("Offset",d)),u.propertyIndex=g.ix,u.propertyGroup=T,Object.defineProperties(u,{start:{get:ExpressionPropertyInterface(y.s)},end:{get:ExpressionPropertyInterface(y.e)},offset:{get:ExpressionPropertyInterface(y.o)},_name:{value:g.nm}}),u.mn=g.mn,u}function o(g,y,T){function u(f){return g.a.ix===f||f==="Anchor Point"?u.anchorPoint:g.o.ix===f||f==="Opacity"?u.opacity:g.p.ix===f||f==="Position"?u.position:g.r.ix===f||f==="Rotation"||f==="ADBE Vector Rotation"?u.rotation:g.s.ix===f||f==="Scale"?u.scale:g.sk&&g.sk.ix===f||f==="Skew"?u.skew:g.sa&&g.sa.ix===f||f==="Skew Axis"?u.skewAxis:null}var d=propertyGroupFactory(u,T);return y.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",d)),y.transform.mProps.p.setGroupProperty(PropertyInterface("Position",d)),y.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",d)),y.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",d)),y.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",d)),y.transform.mProps.sk&&(y.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",d)),y.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",d))),y.transform.op.setGroupProperty(PropertyInterface("Opacity",d)),Object.defineProperties(u,{opacity:{get:ExpressionPropertyInterface(y.transform.mProps.o)},position:{get:ExpressionPropertyInterface(y.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(y.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(y.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(y.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(y.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(y.transform.mProps.sa)},_name:{value:g.nm}}),u.ty="tr",u.mn=g.mn,u.propertyGroup=T,u}function p(g,y,T){function u(x){return g.p.ix===x?u.position:g.s.ix===x?u.size:null}var d=propertyGroupFactory(u,T);u.propertyIndex=g.ix;var f=y.sh.ty==="tm"?y.sh.prop:y.sh;return f.s.setGroupProperty(PropertyInterface("Size",d)),f.p.setGroupProperty(PropertyInterface("Position",d)),Object.defineProperties(u,{size:{get:ExpressionPropertyInterface(f.s)},position:{get:ExpressionPropertyInterface(f.p)},_name:{value:g.nm}}),u.mn=g.mn,u}function b(g,y,T){function u(x){return g.p.ix===x?u.position:g.r.ix===x?u.rotation:g.pt.ix===x?u.points:g.or.ix===x||x==="ADBE Vector Star Outer Radius"?u.outerRadius:g.os.ix===x?u.outerRoundness:g.ir&&(g.ir.ix===x||x==="ADBE Vector Star Inner Radius")?u.innerRadius:g.is&&g.is.ix===x?u.innerRoundness:null}var d=propertyGroupFactory(u,T),f=y.sh.ty==="tm"?y.sh.prop:y.sh;return u.propertyIndex=g.ix,f.or.setGroupProperty(PropertyInterface("Outer Radius",d)),f.os.setGroupProperty(PropertyInterface("Outer Roundness",d)),f.pt.setGroupProperty(PropertyInterface("Points",d)),f.p.setGroupProperty(PropertyInterface("Position",d)),f.r.setGroupProperty(PropertyInterface("Rotation",d)),g.ir&&(f.ir.setGroupProperty(PropertyInterface("Inner Radius",d)),f.is.setGroupProperty(PropertyInterface("Inner Roundness",d))),Object.defineProperties(u,{position:{get:ExpressionPropertyInterface(f.p)},rotation:{get:ExpressionPropertyInterface(f.r)},points:{get:ExpressionPropertyInterface(f.pt)},outerRadius:{get:ExpressionPropertyInterface(f.or)},outerRoundness:{get:ExpressionPropertyInterface(f.os)},innerRadius:{get:ExpressionPropertyInterface(f.ir)},innerRoundness:{get:ExpressionPropertyInterface(f.is)},_name:{value:g.nm}}),u.mn=g.mn,u}function C(g,y,T){function u(x){return g.p.ix===x?u.position:g.r.ix===x?u.roundness:g.s.ix===x||x==="Size"||x==="ADBE Vector Rect Size"?u.size:null}var d=propertyGroupFactory(u,T),f=y.sh.ty==="tm"?y.sh.prop:y.sh;return u.propertyIndex=g.ix,f.p.setGroupProperty(PropertyInterface("Position",d)),f.s.setGroupProperty(PropertyInterface("Size",d)),f.r.setGroupProperty(PropertyInterface("Rotation",d)),Object.defineProperties(u,{position:{get:ExpressionPropertyInterface(f.p)},roundness:{get:ExpressionPropertyInterface(f.r)},size:{get:ExpressionPropertyInterface(f.s)},_name:{value:g.nm}}),u.mn=g.mn,u}function c(g,y,T){function u(x){return g.r.ix===x||x==="Round Corners 1"?u.radius:null}var d=propertyGroupFactory(u,T),f=y;return u.propertyIndex=g.ix,f.rd.setGroupProperty(PropertyInterface("Radius",d)),Object.defineProperties(u,{radius:{get:ExpressionPropertyInterface(f.rd)},_name:{value:g.nm}}),u.mn=g.mn,u}function S(g,y,T){function u(x){return g.c.ix===x||x==="Copies"?u.copies:g.o.ix===x||x==="Offset"?u.offset:null}var d=propertyGroupFactory(u,T),f=y;return u.propertyIndex=g.ix,f.c.setGroupProperty(PropertyInterface("Copies",d)),f.o.setGroupProperty(PropertyInterface("Offset",d)),Object.defineProperties(u,{copies:{get:ExpressionPropertyInterface(f.c)},offset:{get:ExpressionPropertyInterface(f.o)},_name:{value:g.nm}}),u.mn=g.mn,u}return function(g,y,T){var u;function d(x){if(typeof x=="number")return x=x===void 0?1:x,x===0?T:u[x-1];for(var _=0,A=u.length;_<A;){if(u[_]._name===x)return u[_];_+=1}return null}function f(){return T}return d.propertyGroup=propertyGroupFactory(d,f),u=t(g,y,d.propertyGroup),d.numProperties=u.length,d._name="Contents",d}}(),TextExpressionInterface=function(){return function(t){var e;function r(i){switch(i){case"ADBE Text Document":return r.sourceText;default:return null}}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var s=t.textProperty.currentData.t;return(!e||s!==e.value)&&(e=new String(s),e.value=s||new String(s),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r}}();function _typeof(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(r){return typeof r}:_typeof=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof(t)}var FootageInterface=function(){var t=function(i){var s="",a=i.getFootageData();function n(){return s="",a=i.getFootageData(),l}function l(o){if(a[o])return s=o,a=a[o],_typeof(a)==="object"?l:a;var p=o.indexOf(s);if(p!==-1){var b=parseInt(o.substr(p+s.length),10);return a=a[b],_typeof(a)==="object"?l:a}return""}return n},e=function(i){function s(a){return a==="Outline"?s.outlineInterface():null}return s._name="Outline",s.outlineInterface=t(i),s};return function(r){function i(s){return s==="Data"?i.dataInterface:null}return i._name="Data",i.dataInterface=e(r),i}}(),interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers=function(){function t(n,l,o){l.x&&(o.k=!0,o.x=!0,o.initiateExpression=ExpressionManager.initiateExpression,o.effectsSequence.push(o.initiateExpression(n,l,o).bind(o)))}function e(n){return n*=this.elem.globalData.frameRate,n-=this.offsetTime,n!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<n?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(n,this._cachingAtTime),this._cachingAtTime.lastFrame=n),this._cachingAtTime.value}function r(n){var l=-.01,o=this.getValueAtTime(n),p=this.getValueAtTime(n+l),b=0;if(o.length){var C;for(C=0;C<o.length;C+=1)b+=Math.pow(p[C]-o[C],2);b=Math.sqrt(b)*100}else b=0;return b}function i(n){if(this.vel!==void 0)return this.vel;var l=-.001,o=this.getValueAtTime(n),p=this.getValueAtTime(n+l),b;if(o.length){b=createTypedArray("float32",o.length);var C;for(C=0;C<o.length;C+=1)b[C]=(p[C]-o[C])/l}else b=(p-o)/l;return b}function s(){return this.pv}function a(n){this.propertyGroup=n}return{searchExpressions:t,getSpeedAtTime:r,getVelocityAtTime:i,getValueAtTime:e,getStaticValueAtTime:s,setGroupProperty:a}}();function addPropertyDecorator(){function t(c,S,g){if(!this.k||!this.keyframes)return this.pv;c=c?c.toLowerCase():"";var y=this.comp.renderedFrame,T=this.keyframes,u=T[T.length-1].t;if(y<=u)return this.pv;var d,f;g?(S?d=Math.abs(u-this.elem.comp.globalData.frameRate*S):d=Math.max(0,u-this.elem.data.ip),f=u-d):((!S||S>T.length-1)&&(S=T.length-1),f=T[T.length-1-S].t,d=u-f);var x,_,A;if(c==="pingpong"){var k=Math.floor((y-f)/d);if(k%2!==0)return this.getValueAtTime((d-(y-f)%d+f)/this.comp.globalData.frameRate,0)}else if(c==="offset"){var F=this.getValueAtTime(f/this.comp.globalData.frameRate,0),V=this.getValueAtTime(u/this.comp.globalData.frameRate,0),W=this.getValueAtTime(((y-f)%d+f)/this.comp.globalData.frameRate,0),z=Math.floor((y-f)/d);if(this.pv.length){for(A=new Array(F.length),_=A.length,x=0;x<_;x+=1)A[x]=(V[x]-F[x])*z+W[x];return A}return(V-F)*z+W}else if(c==="continue"){var O=this.getValueAtTime(u/this.comp.globalData.frameRate,0),H=this.getValueAtTime((u-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(A=new Array(O.length),_=A.length,x=0;x<_;x+=1)A[x]=O[x]+(O[x]-H[x])*((y-u)/this.comp.globalData.frameRate)/5e-4;return A}return O+(O-H)*((y-u)/.001)}return this.getValueAtTime(((y-f)%d+f)/this.comp.globalData.frameRate,0)}function e(c,S,g){if(!this.k)return this.pv;c=c?c.toLowerCase():"";var y=this.comp.renderedFrame,T=this.keyframes,u=T[0].t;if(y>=u)return this.pv;var d,f;g?(S?d=Math.abs(this.elem.comp.globalData.frameRate*S):d=Math.max(0,this.elem.data.op-u),f=u+d):((!S||S>T.length-1)&&(S=T.length-1),f=T[S].t,d=f-u);var x,_,A;if(c==="pingpong"){var k=Math.floor((u-y)/d);if(k%2===0)return this.getValueAtTime(((u-y)%d+u)/this.comp.globalData.frameRate,0)}else if(c==="offset"){var F=this.getValueAtTime(u/this.comp.globalData.frameRate,0),V=this.getValueAtTime(f/this.comp.globalData.frameRate,0),W=this.getValueAtTime((d-(u-y)%d+u)/this.comp.globalData.frameRate,0),z=Math.floor((u-y)/d)+1;if(this.pv.length){for(A=new Array(F.length),_=A.length,x=0;x<_;x+=1)A[x]=W[x]-(V[x]-F[x])*z;return A}return W-(V-F)*z}else if(c==="continue"){var O=this.getValueAtTime(u/this.comp.globalData.frameRate,0),H=this.getValueAtTime((u+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(A=new Array(O.length),_=A.length,x=0;x<_;x+=1)A[x]=O[x]+(O[x]-H[x])*(u-y)/.001;return A}return O+(O-H)*(u-y)/.001}return this.getValueAtTime((d-((u-y)%d+u))/this.comp.globalData.frameRate,0)}function r(c,S){if(!this.k)return this.pv;if(c=(c||.4)*.5,S=Math.floor(S||5),S<=1)return this.pv;var g=this.comp.renderedFrame/this.comp.globalData.frameRate,y=g-c,T=g+c,u=S>1?(T-y)/(S-1):1,d=0,f=0,x;this.pv.length?x=createTypedArray("float32",this.pv.length):x=0;for(var _;d<S;){if(_=this.getValueAtTime(y+d*u),this.pv.length)for(f=0;f<this.pv.length;f+=1)x[f]+=_[f];else x+=_;d+=1}if(this.pv.length)for(f=0;f<this.pv.length;f+=1)x[f]/=S;else x/=S;return x}function i(c){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var S=this._transformCachingAtTime.v;if(S.cloneFromProps(this.pre.props),this.appliedTransformations<1){var g=this.a.getValueAtTime(c);S.translate(-g[0]*this.a.mult,-g[1]*this.a.mult,g[2]*this.a.mult)}if(this.appliedTransformations<2){var y=this.s.getValueAtTime(c);S.scale(y[0]*this.s.mult,y[1]*this.s.mult,y[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var T=this.sk.getValueAtTime(c),u=this.sa.getValueAtTime(c);S.skewFromAxis(-T*this.sk.mult,u*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var d=this.r.getValueAtTime(c);S.rotate(-d*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var f=this.rz.getValueAtTime(c),x=this.ry.getValueAtTime(c),_=this.rx.getValueAtTime(c),A=this.or.getValueAtTime(c);S.rotateZ(-f*this.rz.mult).rotateY(x*this.ry.mult).rotateX(_*this.rx.mult).rotateZ(-A[2]*this.or.mult).rotateY(A[1]*this.or.mult).rotateX(A[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var k=this.px.getValueAtTime(c),F=this.py.getValueAtTime(c);if(this.data.p.z){var V=this.pz.getValueAtTime(c);S.translate(k*this.px.mult,F*this.py.mult,-V*this.pz.mult)}else S.translate(k*this.px.mult,F*this.py.mult,0)}else{var W=this.p.getValueAtTime(c);S.translate(W[0]*this.p.mult,W[1]*this.p.mult,-W[2]*this.p.mult)}return S}function s(){return this.v.clone(new Matrix)}var a=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(c,S,g){var y=a(c,S,g);return y.dynamicProperties.length?y.getValueAtTime=i.bind(y):y.getValueAtTime=s.bind(y),y.setGroupProperty=expressionHelpers.setGroupProperty,y};var n=PropertyFactory.getProp;PropertyFactory.getProp=function(c,S,g,y,T){var u=n(c,S,g,y,T);u.kf?u.getValueAtTime=expressionHelpers.getValueAtTime.bind(u):u.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(u),u.setGroupProperty=expressionHelpers.setGroupProperty,u.loopOut=t,u.loopIn=e,u.smooth=r,u.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(u),u.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(u),u.numKeys=S.a===1?S.k.length:0,u.propertyIndex=S.ix;var d=0;return g!==0&&(d=createTypedArray("float32",S.a===1?S.k[0].s.length:S.k.length)),u._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:d},expressionHelpers.searchExpressions(c,S,u),u.k&&T.addDynamicProperty(u),u};function l(c){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),c*=this.elem.globalData.frameRate,c-=this.offsetTime,c!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<c?this._caching.lastIndex:0,this._cachingAtTime.lastTime=c,this.interpolateShape(c,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}var o=ShapePropertyFactory.getConstructorFunction(),p=ShapePropertyFactory.getKeyframedConstructorFunction();function b(){}b.prototype={vertices:function(S,g){this.k&&this.getValue();var y=this.v;g!==void 0&&(y=this.getValueAtTime(g,0));var T,u=y._length,d=y[S],f=y.v,x=createSizedArray(u);for(T=0;T<u;T+=1)S==="i"||S==="o"?x[T]=[d[T][0]-f[T][0],d[T][1]-f[T][1]]:x[T]=[d[T][0],d[T][1]];return x},points:function(S){return this.vertices("v",S)},inTangents:function(S){return this.vertices("i",S)},outTangents:function(S){return this.vertices("o",S)},isClosed:function(){return this.v.c},pointOnPath:function(S,g){var y=this.v;g!==void 0&&(y=this.getValueAtTime(g,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(y));for(var T=this._segmentsLength,u=T.lengths,d=T.totalLength*S,f=0,x=u.length,_=0,A;f<x;){if(_+u[f].addedLength>d){var k=f,F=y.c&&f===x-1?0:f+1,V=(d-_)/u[f].addedLength;A=bez.getPointInSegment(y.v[k],y.v[F],y.o[k],y.i[F],V,u[f]);break}else _+=u[f].addedLength;f+=1}return A||(A=y.c?[y.v[0][0],y.v[0][1]]:[y.v[y._length-1][0],y.v[y._length-1][1]]),A},vectorOnPath:function(S,g,y){S==1?S=this.v.c:S==0&&(S=.999);var T=this.pointOnPath(S,g),u=this.pointOnPath(S+.001,g),d=u[0]-T[0],f=u[1]-T[1],x=Math.sqrt(Math.pow(d,2)+Math.pow(f,2));if(x===0)return[0,0];var _=y==="tangent"?[d/x,f/x]:[-f/x,d/x];return _},tangentOnPath:function(S,g){return this.vectorOnPath(S,g,"tangent")},normalOnPath:function(S,g){return this.vectorOnPath(S,g,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([b],o),extendPrototype([b],p),p.prototype.getValueAtTime=l,p.prototype.initiateExpression=ExpressionManager.initiateExpression;var C=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(c,S,g,y,T){var u=C(c,S,g,y,T);return u.propertyIndex=S.ix,u.lock=!1,g===3?expressionHelpers.searchExpressions(c,S.pt,u):g===4&&expressionHelpers.searchExpressions(c,S.ks,u),u.k&&c.addDynamicProperty(u),u}}function initialize$1(){addPropertyDecorator()}function addDecorator(){function t(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}TextProperty.prototype.getExpressionValue=function(e,r){var i=this.calculateExpression(r);if(e.t!==i){var s={};return this.copyData(s,e),s.t=i.toString(),s.__complete=!1,s}return e},TextProperty.prototype.searchProperty=function(){var e=this.searchKeyframes(),r=this.searchExpressions();return this.kf=e||r,this.kf},TextProperty.prototype.searchExpressions=t}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function t(e,r){var i=createNS("feMerge");i.setAttribute("result",e);var s,a;for(a=0;a<r.length;a+=1)s=createNS("feMergeNode"),s.setAttribute("in",r[a]),i.appendChild(s),i.appendChild(s);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,i,s){this.filterManager=e;var a=createNS("feColorMatrix");a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","linearRGB"),a.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=a,a.setAttribute("result",i+"_tint_1"),t.appendChild(a),a=createNS("feColorMatrix"),a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),a.setAttribute("result",i+"_tint_2"),t.appendChild(a),this.matrixFilter=a;var n=this.createMergeNode(i,[s,i+"_tint_1",i+"_tint_2"]);t.appendChild(n)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+i+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}};function SVGFillFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","sRGB"),s.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),s.setAttribute("result",i),t.appendChild(s),this.matrixFilter=s}SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}};function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}SVGStrokeEffect.prototype.initialize=function(){var t=this.elem.layerElement.children||this.elem.layerElement.childNodes,e,r,i,s;for(this.filterManager.effectElements[1].p.v===1?(s=this.elem.maskManager.masksProperties.length,i=0):(i=this.filterManager.effectElements[0].p.v-1,s=i+1),r=createNS("g"),r.setAttribute("fill","none"),r.setAttribute("stroke-linecap","round"),r.setAttribute("stroke-dashoffset",1),i;i<s;i+=1)e=createNS("path"),r.appendChild(e),this.paths.push({p:e,m:i});if(this.filterManager.effectElements[10].p.v===3){var a=createNS("mask"),n=createElementID();a.setAttribute("id",n),a.setAttribute("mask-type","alpha"),a.appendChild(r),this.elem.globalData.defs.appendChild(a);var l=createNS("g");for(l.setAttribute("mask","url("+getLocationHref()+"#"+n+")");t[0];)l.appendChild(t[0]);this.elem.layerElement.appendChild(l),this.masker=a,r.setAttribute("stroke","#fff")}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2)for(t=this.elem.layerElement.children||this.elem.layerElement.childNodes;t.length;)this.elem.layerElement.removeChild(t[0]);this.elem.layerElement.appendChild(r),this.elem.layerElement.removeAttribute("mask"),r.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=r},SVGStrokeEffect.prototype.renderFrame=function(t){this.initialized||this.initialize();var e,r=this.paths.length,i,s;for(e=0;e<r;e+=1)if(this.paths[e].m!==-1&&(i=this.elem.maskManager.viewData[this.paths[e].m],s=this.paths[e].p,(t||this.filterManager._mdf||i.prop._mdf)&&s.setAttribute("d",i.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||i.prop._mdf)){var a;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var n=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,l=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,o=s.getTotalLength();a="0 0 0 "+o*n+" ";var p=o*(l-n),b=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01,C=Math.floor(p/b),c;for(c=0;c<C;c+=1)a+="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01+" ";a+="0 "+o*10+" 0 0"}else a="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01;s.setAttribute("stroke-dasharray",a)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",this.filterManager.effectElements[4].p.v*2),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2)&&(t||this.filterManager.effectElements[3].p._mdf)){var S=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(S[0]*255)+","+bmFloor(S[1]*255)+","+bmFloor(S[2]*255)+")")}};function SVGTritoneFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","linearRGB"),s.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(s);var a=createNS("feComponentTransfer");a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",i),this.matrixFilter=a;var n=createNS("feFuncR");n.setAttribute("type","table"),a.appendChild(n),this.feFuncR=n;var l=createNS("feFuncG");l.setAttribute("type","table"),a.appendChild(l),this.feFuncG=l;var o=createNS("feFuncB");o.setAttribute("type","table"),a.appendChild(o),this.feFuncB=o,t.appendChild(a)}SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v,s=i[0]+" "+r[0]+" "+e[0],a=i[1]+" "+r[1]+" "+e[1],n=i[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",s),this.feFuncG.setAttribute("tableValues",a),this.feFuncB.setAttribute("tableValues",n)}};function SVGProLevelsFilter(t,e,r,i){this.filterManager=e;var s=this.filterManager.effectElements,a=createNS("feComponentTransfer");(s[10].p.k||s[10].p.v!==0||s[11].p.k||s[11].p.v!==1||s[12].p.k||s[12].p.v!==1||s[13].p.k||s[13].p.v!==0||s[14].p.k||s[14].p.v!==1)&&(this.feFuncR=this.createFeFunc("feFuncR",a)),(s[17].p.k||s[17].p.v!==0||s[18].p.k||s[18].p.v!==1||s[19].p.k||s[19].p.v!==1||s[20].p.k||s[20].p.v!==0||s[21].p.k||s[21].p.v!==1)&&(this.feFuncG=this.createFeFunc("feFuncG",a)),(s[24].p.k||s[24].p.v!==0||s[25].p.k||s[25].p.v!==1||s[26].p.k||s[26].p.v!==1||s[27].p.k||s[27].p.v!==0||s[28].p.k||s[28].p.v!==1)&&(this.feFuncB=this.createFeFunc("feFuncB",a)),(s[31].p.k||s[31].p.v!==0||s[32].p.k||s[32].p.v!==1||s[33].p.k||s[33].p.v!==1||s[34].p.k||s[34].p.v!==0||s[35].p.k||s[35].p.v!==1)&&(this.feFuncA=this.createFeFunc("feFuncA",a)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(a.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(a)),(s[3].p.k||s[3].p.v!==0||s[4].p.k||s[4].p.v!==1||s[5].p.k||s[5].p.v!==1||s[6].p.k||s[6].p.v!==0||s[7].p.k||s[7].p.v!==1)&&(a=createNS("feComponentTransfer"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("result",i),t.appendChild(a),this.feFuncRComposed=this.createFeFunc("feFuncR",a),this.feFuncGComposed=this.createFeFunc("feFuncG",a),this.feFuncBComposed=this.createFeFunc("feFuncB",a))}SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,i,s){for(var a=0,n=256,l,o=Math.min(t,e),p=Math.max(t,e),b=Array.call(null,{length:n}),C,c=0,S=s-i,g=e-t;a<=256;)l=a/256,l<=o?C=g<0?s:i:l>=p?C=g<0?i:s:C=i+S*Math.pow((l-t)/g,1/r),b[c]=C,c+=1,a+=256/(n-1);return b.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}};function SVGDropShadowEffect(t,e,r,i,s){var a=e.container.globalData.renderConfig.filterSize,n=e.data.fs||a;t.setAttribute("x",n.x||a.x),t.setAttribute("y",n.y||a.y),t.setAttribute("width",n.width||a.width),t.setAttribute("height",n.height||a.height),this.filterManager=e;var l=createNS("feGaussianBlur");l.setAttribute("in","SourceAlpha"),l.setAttribute("result",i+"_drop_shadow_1"),l.setAttribute("stdDeviation","0"),this.feGaussianBlur=l,t.appendChild(l);var o=createNS("feOffset");o.setAttribute("dx","25"),o.setAttribute("dy","0"),o.setAttribute("in",i+"_drop_shadow_1"),o.setAttribute("result",i+"_drop_shadow_2"),this.feOffset=o,t.appendChild(o);var p=createNS("feFlood");p.setAttribute("flood-color","#00ff00"),p.setAttribute("flood-opacity","1"),p.setAttribute("result",i+"_drop_shadow_3"),this.feFlood=p,t.appendChild(p);var b=createNS("feComposite");b.setAttribute("in",i+"_drop_shadow_3"),b.setAttribute("in2",i+"_drop_shadow_2"),b.setAttribute("operator","in"),b.setAttribute("result",i+"_drop_shadow_4"),t.appendChild(b);var C=this.createMergeNode(i,[i+"_drop_shadow_4",s]);t.appendChild(C)}extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(e[0]*255),Math.round(e[1]*255),Math.round(e[2]*255)))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,i=(this.filterManager.effectElements[2].p.v-90)*degToRads,s=r*Math.cos(i),a=r*Math.sin(i);this.feOffset.setAttribute("dx",s),this.feOffset.setAttribute("dy",a)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var i=r.children,s=0,a=i.length;s<a&&i[s]!==t.layerElement;)s+=1;var n;s<=a-2&&(n=i[s+1]);var l=createNS("use");l.setAttribute("href","#"+e),n?r.insertBefore(l,n):r.appendChild(l)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),i=createNS("mask");i.setAttribute("id",e.layerId),i.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var s=t.globalData.defs;s.appendChild(i);var a=createNS("symbol");a.setAttribute("id",r),this.replaceInParent(e,r),a.appendChild(e.layerElement),s.appendChild(a);var n=createNS("use");n.setAttribute("href","#"+r),i.appendChild(n),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,i=e.length;r<i;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()};function SVGGaussianBlurEffect(t,e,r,i){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("result",i),t.appendChild(s),this.feGaussianBlur=s}SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3,r=this.filterManager.effectElements[0].p.v*e,i=this.filterManager.effectElements[1].p.v,s=i==3?0:r,a=i==2?0:r;this.feGaussianBlur.setAttribute("stdDeviation",s+" "+a);var n=this.filterManager.effectElements[2].p.v==1?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",n)}};function TransformEffect(){}TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,i=e[1].p.v,s=e[2].p.v===1,a=e[3].p.v,n=s?a:e[4].p.v,l=e[5].p.v,o=e[6].p.v,p=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(n*.01,a*.01,1),this.matrix.rotate(-p*degToRads),this.matrix.skewFromAxis(-l*degToRads,(o+90)*degToRads),this.matrix.translate(i[0],i[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}};function SVGTransformEffect(t,e){this.init(e)}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(t){this.init(t)}return extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie})})(lottie$1,lottie$1.exports);var lottieExports=lottie$1.exports;const lottie=getDefaultExportFromCjs(lottieExports);function _iterableToArrayLimit(t,e){var r=t==null?null:typeof Symbol<"u"&&t[Symbol.iterator]||t["@@iterator"];if(r!=null){var i,s,a,n,l=[],o=!0,p=!1;try{if(a=(r=r.call(t)).next,e===0){if(Object(r)!==r)return;o=!1}else for(;!(o=(i=a.call(r)).done)&&(l.push(i.value),l.length!==e);o=!0);}catch(b){p=!0,s=b}finally{try{if(!o&&r.return!=null&&(n=r.return(),Object(n)!==n))return}finally{if(p)throw s}}return l}}function ownKeys(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter(function(s){return Object.getOwnPropertyDescriptor(t,s).enumerable})),r.push.apply(r,i)}return r}function _objectSpread2(t){for(var e=1;e<arguments.length;e++){var r=arguments[e]!=null?arguments[e]:{};e%2?ownKeys(Object(r),!0).forEach(function(i){_defineProperty(t,i,r[i])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):ownKeys(Object(r)).forEach(function(i){Object.defineProperty(t,i,Object.getOwnPropertyDescriptor(r,i))})}return t}function _defineProperty(t,e,r){return e=_toPropertyKey(e),e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _objectWithoutPropertiesLoose(t,e){if(t==null)return{};var r={},i=Object.keys(t),s,a;for(a=0;a<i.length;a++)s=i[a],!(e.indexOf(s)>=0)&&(r[s]=t[s]);return r}function _objectWithoutProperties(t,e){if(t==null)return{};var r=_objectWithoutPropertiesLoose(t,e),i,s;if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(s=0;s<a.length;s++)i=a[s],!(e.indexOf(i)>=0)&&Object.prototype.propertyIsEnumerable.call(t,i)&&(r[i]=t[i])}return r}function _slicedToArray(t,e){return _arrayWithHoles(t)||_iterableToArrayLimit(t,e)||_unsupportedIterableToArray(t,e)||_nonIterableRest()}function _arrayWithHoles(t){if(Array.isArray(t))return t}function _unsupportedIterableToArray(t,e){if(t){if(typeof t=="string")return _arrayLikeToArray(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);if(r==="Object"&&t.constructor&&(r=t.constructor.name),r==="Map"||r==="Set")return Array.from(t);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return _arrayLikeToArray(t,e)}}function _arrayLikeToArray(t,e){(e==null||e>t.length)&&(e=t.length);for(var r=0,i=new Array(e);r<e;r++)i[r]=t[r];return i}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _toPrimitive(t,e){if(typeof t!="object"||t===null)return t;var r=t[Symbol.toPrimitive];if(r!==void 0){var i=r.call(t,e||"default");if(typeof i!="object")return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function _toPropertyKey(t){var e=_toPrimitive(t,"string");return typeof e=="symbol"?e:String(e)}var _excluded$1=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],useLottie=function t(e,r){var i=e.animationData,s=e.loop,a=e.autoplay,n=e.initialSegment,l=e.onComplete,o=e.onLoopComplete,p=e.onEnterFrame,b=e.onSegmentStart,C=e.onConfigReady,c=e.onDataReady,S=e.onDataFailed,g=e.onLoadedImages,y=e.onDOMLoaded,T=e.onDestroy;e.lottieRef,e.renderer,e.name,e.assetsPath,e.rendererSettings;var u=_objectWithoutProperties(e,_excluded$1),d=reactExports.useState(!1),f=_slicedToArray(d,2),x=f[0],_=f[1],A=reactExports.useRef(),k=reactExports.useRef(null),F=function(){var G;(G=A.current)===null||G===void 0||G.play()},V=function(){var G;(G=A.current)===null||G===void 0||G.stop()},W=function(){var G;(G=A.current)===null||G===void 0||G.pause()},z=function(G){var j;(j=A.current)===null||j===void 0||j.setSpeed(G)},O=function(G,j){var N;(N=A.current)===null||N===void 0||N.goToAndPlay(G,j)},H=function(G,j){var N;(N=A.current)===null||N===void 0||N.goToAndStop(G,j)},q=function(G){var j;(j=A.current)===null||j===void 0||j.setDirection(G)},B=function(G,j){var N;(N=A.current)===null||N===void 0||N.playSegments(G,j)},M=function(G){var j;(j=A.current)===null||j===void 0||j.setSubframe(G)},I=function(G){var j;return(j=A.current)===null||j===void 0?void 0:j.getDuration(G)},P=function(){var G;(G=A.current)===null||G===void 0||G.destroy(),A.current=void 0},E=function(){var G=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},j;if(k.current){(j=A.current)===null||j===void 0||j.destroy();var N=_objectSpread2(_objectSpread2(_objectSpread2({},e),G),{},{container:k.current});return A.current=lottie.loadAnimation(N),_(!!A.current),function(){var Q;(Q=A.current)===null||Q===void 0||Q.destroy(),A.current=void 0}}};reactExports.useEffect(function(){var R=E();return function(){return R==null?void 0:R()}},[i,s]),reactExports.useEffect(function(){A.current&&(A.current.autoplay=!!a)},[a]),reactExports.useEffect(function(){if(A.current){if(!n){A.current.resetSegments(!0);return}!Array.isArray(n)||!n.length||((A.current.currentRawFrame<n[0]||A.current.currentRawFrame>n[1])&&(A.current.currentRawFrame=n[0]),A.current.setSegment(n[0],n[1]))}},[n]),reactExports.useEffect(function(){var R=[{name:"complete",handler:l},{name:"loopComplete",handler:o},{name:"enterFrame",handler:p},{name:"segmentStart",handler:b},{name:"config_ready",handler:C},{name:"data_ready",handler:c},{name:"data_failed",handler:S},{name:"loaded_images",handler:g},{name:"DOMLoaded",handler:y},{name:"destroy",handler:T}],G=R.filter(function(N){return N.handler!=null});if(G.length){var j=G.map(function(N){var Q;return(Q=A.current)===null||Q===void 0||Q.addEventListener(N.name,N.handler),function(){var U;(U=A.current)===null||U===void 0||U.removeEventListener(N.name,N.handler)}});return function(){j.forEach(function(N){return N()})}}},[l,o,p,b,C,c,S,g,y,T]);var L=React.createElement("div",_objectSpread2({style:r,ref:k},u));return{View:L,play:F,stop:V,pause:W,setSpeed:z,goToAndStop:H,goToAndPlay:O,setDirection:q,playSegments:B,setSubframe:M,getDuration:I,destroy:P,animationContainerRef:k,animationLoaded:x,animationItem:A.current}};function getContainerVisibility(t){var e=t.getBoundingClientRect(),r=e.top,i=e.height,s=window.innerHeight-r,a=window.innerHeight+i;return s/a}function getContainerCursorPosition(t,e,r){var i=t.getBoundingClientRect(),s=i.top,a=i.left,n=i.width,l=i.height,o=(e-a)/n,p=(r-s)/l;return{x:o,y:p}}var useInitInteractivity=function t(e){var r=e.wrapperRef,i=e.animationItem,s=e.mode,a=e.actions;reactExports.useEffect(function(){var n=r.current;if(!(!n||!i||!a.length)){i.stop();var l=function(){var b=null,C=function(){var S=getContainerVisibility(n),g=a.find(function(T){var u=T.visibility;return u&&S>=u[0]&&S<=u[1]});if(g){if(g.type==="seek"&&g.visibility&&g.frames.length===2){var y=g.frames[0]+Math.ceil((S-g.visibility[0])/(g.visibility[1]-g.visibility[0])*g.frames[1]);//! goToAndStop must be relative to the start of the current segment
i.goToAndStop(y-i.firstFrame-1,!0)}g.type==="loop"&&(b===null||b!==g.frames||i.isPaused)&&(i.playSegments(g.frames,!0),b=g.frames),g.type==="play"&&i.isPaused&&(i.resetSegments(!0),i.play()),g.type==="stop"&&i.goToAndStop(g.frames[0]-i.firstFrame-1,!0)}};return document.addEventListener("scroll",C),function(){document.removeEventListener("scroll",C)}},o=function(){var b=function(g,y){var T=g,u=y;if(T!==-1&&u!==-1){var d=getContainerCursorPosition(n,T,u);T=d.x,u=d.y}var f=a.find(function(A){var k=A.position;return k&&Array.isArray(k.x)&&Array.isArray(k.y)?T>=k.x[0]&&T<=k.x[1]&&u>=k.y[0]&&u<=k.y[1]:k&&!Number.isNaN(k.x)&&!Number.isNaN(k.y)?T===k.x&&u===k.y:!1});if(f){if(f.type==="seek"&&f.position&&Array.isArray(f.position.x)&&Array.isArray(f.position.y)&&f.frames.length===2){var x=(T-f.position.x[0])/(f.position.x[1]-f.position.x[0]),_=(u-f.position.y[0])/(f.position.y[1]-f.position.y[0]);i.playSegments(f.frames,!0),i.goToAndStop(Math.ceil((x+_)/2*(f.frames[1]-f.frames[0])),!0)}f.type==="loop"&&i.playSegments(f.frames,!0),f.type==="play"&&(i.isPaused&&i.resetSegments(!1),i.playSegments(f.frames)),f.type==="stop"&&i.goToAndStop(f.frames[0],!0)}},C=function(g){b(g.clientX,g.clientY)},c=function(){b(-1,-1)};return n.addEventListener("mousemove",C),n.addEventListener("mouseout",c),function(){n.removeEventListener("mousemove",C),n.removeEventListener("mouseout",c)}};switch(s){case"scroll":return l();case"cursor":return o()}}},[s,i])},useLottieInteractivity=function t(e){var r=e.actions,i=e.mode,s=e.lottieObj,a=s.animationItem,n=s.View,l=s.animationContainerRef;return useInitInteractivity({actions:r,animationItem:a,mode:i,wrapperRef:l}),n},_excluded=["style","interactivity"],Lottie=function t(e){var r,i,s,a=e.style,n=e.interactivity,l=_objectWithoutProperties(e,_excluded),o=useLottie(l,a),p=o.View,b=o.play,C=o.stop,c=o.pause,S=o.setSpeed,g=o.goToAndStop,y=o.goToAndPlay,T=o.setDirection,u=o.playSegments,d=o.setSubframe,f=o.getDuration,x=o.destroy,_=o.animationContainerRef,A=o.animationLoaded,k=o.animationItem;return reactExports.useEffect(function(){e.lottieRef&&(e.lottieRef.current={play:b,stop:C,pause:c,setSpeed:S,goToAndPlay:y,goToAndStop:g,setDirection:T,playSegments:u,setSubframe:d,getDuration:f,destroy:x,animationContainerRef:_,animationLoaded:A,animationItem:k})},[(r=e.lottieRef)===null||r===void 0?void 0:r.current]),useLottieInteractivity({lottieObj:{View:p,play:b,stop:C,pause:c,setSpeed:S,goToAndStop:g,goToAndPlay:y,setDirection:T,playSegments:u,setSubframe:d,getDuration:f,destroy:x,animationContainerRef:_,animationLoaded:A,animationItem:k},actions:(i=n==null?void 0:n.actions)!==null&&i!==void 0?i:[],mode:(s=n==null?void 0:n.mode)!==null&&s!==void 0?s:"scroll"})};const nm="Comp 2",ddd=0,h=500,w=500,meta={g:"LottieFiles AE 3.5.3"},layers=[{ty:4,nm:"Shape Layer 7",sr:1,st:0,op:30,ip:0,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:1},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:4},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:14},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:17},{s:[100,100,100],t:27}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:0,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:3.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:14,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:17.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:28}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.0431,.2392,.5686],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:1},{ty:4,nm:"Shape Layer 6",sr:1,st:1,op:31,ip:1,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:2},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:5},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:15},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:18},{s:[100,100,100],t:28}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:1,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:4.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:15,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:18.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:29}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.9882,.2392,.1294],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:2},{ty:4,nm:"Shape Layer 5",sr:1,st:2,op:32,ip:2,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:3},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:6},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:16},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:19},{s:[100,100,100],t:29}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:2,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:5.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:16,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:19.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:30}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[1,1,1],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:3}],v="4.8.0",fr=20,op=30,ip=0,assets=[],animationData={nm,ddd,h,w,meta,layers,v,fr,op,ip,assets},styles={container:{animation:"fade-in 1s forwards",display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},lottie:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},Spinner=()=>(console.log("Spinner"),jsxRuntimeExports.jsx("div",{style:styles.container,children:jsxRuntimeExports.jsx(Lottie,{animationData,loop:!0,height:200,width:200})})),spinner=Object.freeze(Object.defineProperty({__proto__:null,default:Spinner},Symbol.toStringTag,{value:"Module"})),App=React.lazy(()=>__vitePreload(()=>import("./App-07cbc4d7.js"),["App-07cbc4d7.js","jsx-runtime-329ae681.js","pagesLayouts-14a09f05.js","index-fdfb6bde.js","useLazyload-0697bf1e.js","getInfoPage-e1436904.js","useQuery-303ce1b9.js","utils-4decd3ad.js","apiClient-4214bebe.js","ThemeProvider-0f50096d.js","App-73c3bfd2.css"])),LazyLogin=React.lazy(()=>__vitePreload(()=>import("./login-0003bf51.js"),["login-0003bf51.js","jsx-runtime-329ae681.js","navBar-196dbaef.js","logoOriginal-c1187393.js","ThemeProvider-0f50096d.js","index-47726f55.js","index-fdfb6bde.js","navBar-f83afce5.css","useLazyload-0697bf1e.js","utils-4decd3ad.js","apiClient-4214bebe.js","login-3d72531e.css"])),LazyCotizador=React.lazy(()=>__vitePreload(()=>import("./cotizador-ea1d0c73.js"),["cotizador-ea1d0c73.js","jsx-runtime-329ae681.js","pagesLayouts-14a09f05.js","index-fdfb6bde.js","useLazyload-0697bf1e.js","index-47726f55.js","utils-4decd3ad.js","apiClient-4214bebe.js"])),LazyAboutUs=React.lazy(()=>__vitePreload(()=>import("./aboutUs-9a70a1dc.js"),["aboutUs-9a70a1dc.js","jsx-runtime-329ae681.js","pagesLayouts-14a09f05.js","index-fdfb6bde.js","banner-16b73c20.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-eafa3a99.js","index-47726f55.js","banner-0ebd13ec.css","index.esm-8ae24eaa.js","nosotros-bd4c0eb1.js","useLazyload-0697bf1e.js","aboutUs-5367be92.css"])),LazyProjects=React.lazy(()=>__vitePreload(()=>import("./projects-55ea2853.js"),["projects-55ea2853.js","jsx-runtime-329ae681.js","projects-76c1e199.js","banner-16b73c20.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-eafa3a99.js","index-47726f55.js","index-fdfb6bde.js","pagesLayouts-14a09f05.js","banner-0ebd13ec.css","cardsProjects-35c403f3.js","useLazyload-0697bf1e.js","cardsProjects-577b53fd.css","getInfoPage-e1436904.js","useQuery-303ce1b9.js","utils-4decd3ad.js","apiClient-4214bebe.js"])),LazyServecesDetail=React.lazy(()=>__vitePreload(()=>import("./servecesDetail-6a7efacc.js"),["servecesDetail-6a7efacc.js","jsx-runtime-329ae681.js","index.esm-b821d194.js","iconBase-362add62.js","converted_topo-b9bd597d.js","banner-16b73c20.js","index.esm-f65753b7.js","index.esm-eafa3a99.js","index-47726f55.js","index-fdfb6bde.js","pagesLayouts-14a09f05.js","banner-0ebd13ec.css","autoplay-f3916783.js","autoplay-7c8ef494.css","ScreenSize-f3007f0d.js","useLazyload-0697bf1e.js","getInfoPage-e1436904.js","useQuery-303ce1b9.js","utils-4decd3ad.js","apiClient-4214bebe.js","index-0f375017.js","servecesDetail-5b53c611.css","scrollbar-936b3cf4.css"])),LazyProjectDetail=React.lazy(()=>__vitePreload(()=>import("./projecsDetail-9bf532ee.js"),["projecsDetail-9bf532ee.js","jsx-runtime-329ae681.js","index-47726f55.js","index-fdfb6bde.js","projects-76c1e199.js","banner-16b73c20.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-eafa3a99.js","pagesLayouts-14a09f05.js","banner-0ebd13ec.css","autoplay-f3916783.js","autoplay-7c8ef494.css","getInfoPage-e1436904.js","useQuery-303ce1b9.js","utils-4decd3ad.js","apiClient-4214bebe.js","useLazyload-0697bf1e.js","projecsDetail-8b168550.css"])),LazyContactPage=React.lazy(()=>__vitePreload(()=>import("./contact-f6c0be3a.js"),["contact-f6c0be3a.js","jsx-runtime-329ae681.js","pagesLayouts-14a09f05.js","index-fdfb6bde.js","banner-16b73c20.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-eafa3a99.js","index-47726f55.js","banner-0ebd13ec.css","index.esm-8ae24eaa.js","index.esm-6915532d.js","projects-76c1e199.js","useLazyload-0697bf1e.js"])),LazyBlogDetail=React.lazy(()=>__vitePreload(()=>import("./blogDetail-b596f814.js"),["blogDetail-b596f814.js","jsx-runtime-329ae681.js","useQuery-303ce1b9.js","utils-4decd3ad.js","sidebarBolgs-8673b481.js","logoOriginal-c1187393.js","ThemeProvider-0f50096d.js","index-47726f55.js","index-fdfb6bde.js","useLazyload-0697bf1e.js","floawhatsapp-6f52b278.js","footer1-76311eb0.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-8ae24eaa.js","footer1-8a106b42.css","index.esm-b821d194.js","apiClient-4214bebe.js","sidebarBolgs-3d68cdd9.css"])),LazyBlog=React.lazy(()=>__vitePreload(()=>import("./blog-e0d687c1.js"),["blog-e0d687c1.js","jsx-runtime-329ae681.js","useQuery-303ce1b9.js","utils-4decd3ad.js","sidebarBolgs-8673b481.js","logoOriginal-c1187393.js","ThemeProvider-0f50096d.js","index-47726f55.js","index-fdfb6bde.js","useLazyload-0697bf1e.js","floawhatsapp-6f52b278.js","footer1-76311eb0.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-8ae24eaa.js","footer1-8a106b42.css","index.esm-b821d194.js","apiClient-4214bebe.js","sidebarBolgs-3d68cdd9.css","index.esm-eafa3a99.js"])),queryClient=new QueryClient,router=createBrowserRouter([{path:"/",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(App,{})})},{path:"/sitemap.xml",element:jsxRuntimeExports.jsx(Sitemap,{})},{path:"/login",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyLogin,{})})},{path:"/aboutUs",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyAboutUs,{})})},{path:"/servicios",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyServecesDetail,{})})},{path:"/servicios/:id",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyServecesDetail,{})})},{path:"/projects",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyProjects,{})})},{path:"/projects/:projectArg",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyProjectDetail,{})})},{path:"/contact",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyContactPage,{})})},{path:"/blog",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyBlog,{})})},{path:"/blog/:id",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyBlogDetail,{})})},{path:"/",element:jsxRuntimeExports.jsx(ProtectedRoute,{}),children:[{path:"/cotizador",element:jsxRuntimeExports.jsx(React.Suspense,{fallback:jsxRuntimeExports.jsx(Spinner,{}),children:jsxRuntimeExports.jsx(LazyCotizador,{})})}]}]);console.log("main.tsx");client.createRoot(document.getElementById("root")).render(jsxRuntimeExports.jsx(React.StrictMode,{children:jsxRuntimeExports.jsx(QueryClientProvider,{client:queryClient,children:jsxRuntimeExports.jsxs(AuthProvider,{children:[jsxRuntimeExports.jsx(RouterProvider,{router}),jsxRuntimeExports.jsx(ReactQueryDevtools2,{initialIsOpen:!1})]})})}));export{Spinner as S,useAuth as a,hasPreviousPage as b,useMutation as c,hasNextPage as h,infiniteQueryBehavior as i,spinner as s,useSigninMutation as u};


//# sourceMappingURL=data:application/json;base64,