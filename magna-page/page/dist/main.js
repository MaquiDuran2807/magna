var wt=(s,t,e)=>{if(!t.has(s))throw TypeError("Cannot "+e)};var i=(s,t,e)=>(wt(s,t,"read from private field"),e?e.call(s):t.get(s)),h=(s,t,e)=>{if(t.has(s))throw TypeError("Cannot add the same private member more than once");t instanceof WeakSet?t.add(s):t.set(s,e)},o=(s,t,e,r)=>(wt(s,t,"write to private field"),r?r.call(s,e):t.set(s,e),e);var bt=(s,t,e,r)=>({set _(a){o(s,t,a,e)},get _(){return i(s,t,r)}}),f=(s,t,e)=>(wt(s,t,"access private method"),e);import{_ as z}from"./preload-helper-4aa0ec7d.js";import{r as $,j as n,R as p}from"./jsx-runtime-c0a91cf1.js";import{r as Jt,O as Yt,N as Zt,c as te,R as ee}from"./index-cc74cdf4.js";import{i as se,a as ie,r as re,n as k,t as ae,c as Gt,b as v,d as xt,e as Ht,S as Et,h as $t,m as Mt,f as Rt,g as ne,j as oe,k as Tt,o as Dt,l as ue,p as St,q as Ft,s as he,u as ce,v as le,w as F,Q as de,x as fe}from"./GetsIdServices-dc6be9f6.js";import{a as _t,A as pe}from"./lottie-632db44f.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const a of document.querySelectorAll('link[rel="modulepreload"]'))r(a);new MutationObserver(a=>{for(const u of a)if(u.type==="childList")for(const c of u.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&r(c)}).observe(document,{childList:!0,subtree:!0});function e(a){const u={};return a.integrity&&(u.integrity=a.integrity),a.referrerPolicy&&(u.referrerPolicy=a.referrerPolicy),a.crossOrigin==="use-credentials"?u.credentials="include":a.crossOrigin==="anonymous"?u.credentials="omit":u.credentials="same-origin",u}function r(a){if(a.ep)return;a.ep=!0;const u=e(a);fetch(a.href,u)}})();var jt={},kt=Jt;jt.createRoot=kt.createRoot,jt.hydrateRoot=kt.hydrateRoot;var et,It,Nt=(It=class{constructor(){h(this,et,void 0)}destroy(){this.clearGcTimeout()}scheduleGc(){this.clearGcTimeout(),se(this.gcTime)&&o(this,et,setTimeout(()=>{this.optionalRemove()},this.gcTime))}updateGcTime(s){this.gcTime=Math.max(this.gcTime||0,s??(ie?1/0:5*60*1e3))}clearGcTimeout(){i(this,et)&&(clearTimeout(i(this,et)),o(this,et,void 0))}},et=new WeakMap,It),rt,at,A,B,E,g,pt,st,nt,Pt,q,V,Qt,ye=(Qt=class extends Nt{constructor(t){super();h(this,nt);h(this,q);h(this,rt,void 0);h(this,at,void 0);h(this,A,void 0);h(this,B,void 0);h(this,E,void 0);h(this,g,void 0);h(this,pt,void 0);h(this,st,void 0);o(this,st,!1),o(this,pt,t.defaultOptions),f(this,nt,Pt).call(this,t.options),o(this,g,[]),o(this,A,t.cache),this.queryKey=t.queryKey,this.queryHash=t.queryHash,o(this,rt,t.state||me(this.options)),this.state=i(this,rt),this.scheduleGc()}get meta(){return this.options.meta}optionalRemove(){!i(this,g).length&&this.state.fetchStatus==="idle"&&i(this,A).remove(this)}setData(t,e){const r=re(this.state.data,t,this.options);return f(this,q,V).call(this,{data:r,type:"success",dataUpdatedAt:e==null?void 0:e.updatedAt,manual:e==null?void 0:e.manual}),r}setState(t,e){f(this,q,V).call(this,{type:"setState",state:t,setStateOptions:e})}cancel(t){var r;const e=i(this,B);return(r=i(this,E))==null||r.cancel(t),e?e.then(k).catch(k):Promise.resolve()}destroy(){super.destroy(),this.cancel({silent:!0})}reset(){this.destroy(),this.setState(i(this,rt))}isActive(){return i(this,g).some(t=>t.options.enabled!==!1)}isDisabled(){return this.getObserversCount()>0&&!this.isActive()}isStale(){return this.state.isInvalidated||!this.state.dataUpdatedAt||i(this,g).some(t=>t.getCurrentResult().isStale)}isStaleByTime(t=0){return this.state.isInvalidated||!this.state.dataUpdatedAt||!ae(this.state.dataUpdatedAt,t)}onFocus(){var e;const t=i(this,g).find(r=>r.shouldFetchOnWindowFocus());t==null||t.refetch({cancelRefetch:!1}),(e=i(this,E))==null||e.continue()}onOnline(){var e;const t=i(this,g).find(r=>r.shouldFetchOnReconnect());t==null||t.refetch({cancelRefetch:!1}),(e=i(this,E))==null||e.continue()}addObserver(t){i(this,g).includes(t)||(i(this,g).push(t),this.clearGcTimeout(),i(this,A).notify({type:"observerAdded",query:this,observer:t}))}removeObserver(t){i(this,g).includes(t)&&(o(this,g,i(this,g).filter(e=>e!==t)),i(this,g).length||(i(this,E)&&(i(this,st)?i(this,E).cancel({revert:!0}):i(this,E).cancelRetry()),this.scheduleGc()),i(this,A).notify({type:"observerRemoved",query:this,observer:t}))}getObserversCount(){return i(this,g).length}invalidate(){this.state.isInvalidated||f(this,q,V).call(this,{type:"invalidate"})}fetch(t,e){var C,I,P,O;if(this.state.fetchStatus!=="idle"){if(this.state.dataUpdatedAt&&(e!=null&&e.cancelRefetch))this.cancel({silent:!0});else if(i(this,B))return(C=i(this,E))==null||C.continueRetry(),i(this,B)}if(t&&f(this,nt,Pt).call(this,t),!this.options.queryFn){const l=i(this,g).find(b=>b.options.queryFn);l&&f(this,nt,Pt).call(this,l.options)}const r=new AbortController,a={queryKey:this.queryKey,meta:this.meta},u=l=>{Object.defineProperty(l,"signal",{enumerable:!0,get:()=>(o(this,st,!0),r.signal)})};u(a);const c=()=>this.options.queryFn?(o(this,st,!1),this.options.persister?this.options.persister(this.options.queryFn,a,this):this.options.queryFn(a)):Promise.reject(new Error(`Missing queryFn: '${this.options.queryHash}'`)),d={fetchOptions:e,options:this.options,queryKey:this.queryKey,state:this.state,fetchFn:c};u(d),(I=this.options.behavior)==null||I.onFetch(d,this),o(this,at,this.state),(this.state.fetchStatus==="idle"||this.state.fetchMeta!==((P=d.fetchOptions)==null?void 0:P.meta))&&f(this,q,V).call(this,{type:"fetch",meta:(O=d.fetchOptions)==null?void 0:O.meta});const j=l=>{var b,M,R,T;xt(l)&&l.silent||f(this,q,V).call(this,{type:"error",error:l}),xt(l)||((M=(b=i(this,A).config).onError)==null||M.call(b,l,this),(T=(R=i(this,A).config).onSettled)==null||T.call(R,this.state.data,l,this)),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1};return o(this,E,Gt({fn:d.fetchFn,abort:r.abort.bind(r),onSuccess:l=>{var b,M,R,T;if(typeof l>"u"){j(new Error(`${this.queryHash} data is undefined`));return}this.setData(l),(M=(b=i(this,A).config).onSuccess)==null||M.call(b,l,this),(T=(R=i(this,A).config).onSettled)==null||T.call(R,l,this.state.error,this),this.isFetchingOptimistic||this.scheduleGc(),this.isFetchingOptimistic=!1},onError:j,onFail:(l,b)=>{f(this,q,V).call(this,{type:"failed",failureCount:l,error:b})},onPause:()=>{f(this,q,V).call(this,{type:"pause"})},onContinue:()=>{f(this,q,V).call(this,{type:"continue"})},retry:d.options.retry,retryDelay:d.options.retryDelay,networkMode:d.options.networkMode})),o(this,B,i(this,E).promise),i(this,B)}},rt=new WeakMap,at=new WeakMap,A=new WeakMap,B=new WeakMap,E=new WeakMap,g=new WeakMap,pt=new WeakMap,st=new WeakMap,nt=new WeakSet,Pt=function(t){this.options={...i(this,pt),...t},this.updateGcTime(this.options.gcTime)},q=new WeakSet,V=function(t){const e=r=>{switch(t.type){case"failed":return{...r,fetchFailureCount:t.failureCount,fetchFailureReason:t.error};case"pause":return{...r,fetchStatus:"paused"};case"continue":return{...r,fetchStatus:"fetching"};case"fetch":return{...r,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:t.meta??null,fetchStatus:Ht(this.options.networkMode)?"fetching":"paused",...!r.dataUpdatedAt&&{error:null,status:"pending"}};case"success":return{...r,data:t.data,dataUpdateCount:r.dataUpdateCount+1,dataUpdatedAt:t.dataUpdatedAt??Date.now(),error:null,isInvalidated:!1,status:"success",...!t.manual&&{fetchStatus:"idle",fetchFailureCount:0,fetchFailureReason:null}};case"error":const a=t.error;return xt(a)&&a.revert&&i(this,at)?{...i(this,at),fetchStatus:"idle"}:{...r,error:a,errorUpdateCount:r.errorUpdateCount+1,errorUpdatedAt:Date.now(),fetchFailureCount:r.fetchFailureCount+1,fetchFailureReason:a,fetchStatus:"idle",status:"error"};case"invalidate":return{...r,isInvalidated:!0};case"setState":return{...r,...t.state}}};this.state=e(this.state),v.batch(()=>{i(this,g).forEach(r=>{r.onQueryUpdate()}),i(this,A).notify({query:this,type:"updated",action:t})})},Qt);function me(s){const t=typeof s.initialData=="function"?s.initialData():s.initialData,e=typeof t<"u",r=e?typeof s.initialDataUpdatedAt=="function"?s.initialDataUpdatedAt():s.initialDataUpdatedAt:0;return{data:t,dataUpdateCount:0,dataUpdatedAt:e?r??Date.now():0,error:null,errorUpdateCount:0,errorUpdatedAt:0,fetchFailureCount:0,fetchFailureReason:null,fetchMeta:null,isInvalidated:!1,status:e?"success":"pending",fetchStatus:"idle"}}var U,Ut,ge=(Ut=class extends Et{constructor(t={}){super();h(this,U,void 0);this.config=t,o(this,U,new Map)}build(t,e,r){const a=e.queryKey,u=e.queryHash??$t(a,e);let c=this.get(u);return c||(c=new ye({cache:this,queryKey:a,queryHash:u,options:t.defaultQueryOptions(e),state:r,defaultOptions:t.getQueryDefaults(a)}),this.add(c)),c}add(t){i(this,U).has(t.queryHash)||(i(this,U).set(t.queryHash,t),this.notify({type:"added",query:t}))}remove(t){const e=i(this,U).get(t.queryHash);e&&(t.destroy(),e===t&&i(this,U).delete(t.queryHash),this.notify({type:"removed",query:t}))}clear(){v.batch(()=>{this.getAll().forEach(t=>{this.remove(t)})})}get(t){return i(this,U).get(t)}getAll(){return[...i(this,U).values()]}find(t){const e={exact:!0,...t};return this.getAll().find(r=>Mt(e,r))}findAll(t={}){const e=this.getAll();return Object.keys(t).length>0?e.filter(r=>Mt(t,r)):e}notify(t){v.batch(()=>{this.listeners.forEach(e=>{e(t)})})}onFocus(){v.batch(()=>{this.getAll().forEach(t=>{t.onFocus()})})}onOnline(){v.batch(()=>{this.getAll().forEach(t=>{t.onOnline()})})}},U=new WeakMap,Ut),L,yt,w,ot,K,N,Lt,ve=(Lt=class extends Nt{constructor(t){super();h(this,K);h(this,L,void 0);h(this,yt,void 0);h(this,w,void 0);h(this,ot,void 0);this.mutationId=t.mutationId,o(this,yt,t.defaultOptions),o(this,w,t.mutationCache),o(this,L,[]),this.state=t.state||Bt(),this.setOptions(t.options),this.scheduleGc()}setOptions(t){this.options={...i(this,yt),...t},this.updateGcTime(this.options.gcTime)}get meta(){return this.options.meta}addObserver(t){i(this,L).includes(t)||(i(this,L).push(t),this.clearGcTimeout(),i(this,w).notify({type:"observerAdded",mutation:this,observer:t}))}removeObserver(t){o(this,L,i(this,L).filter(e=>e!==t)),this.scheduleGc(),i(this,w).notify({type:"observerRemoved",mutation:this,observer:t})}optionalRemove(){i(this,L).length||(this.state.status==="pending"?this.scheduleGc():i(this,w).remove(this))}continue(){var t;return((t=i(this,ot))==null?void 0:t.continue())??this.execute(this.state.variables)}async execute(t){var a,u,c,d,j,C,I,P,O,l,b,M,R,T,ft,S,D,Q,Z,vt;const e=()=>(o(this,ot,Gt({fn:()=>this.options.mutationFn?this.options.mutationFn(t):Promise.reject(new Error("No mutationFn found")),onFail:(m,tt)=>{f(this,K,N).call(this,{type:"failed",failureCount:m,error:tt})},onPause:()=>{f(this,K,N).call(this,{type:"pause"})},onContinue:()=>{f(this,K,N).call(this,{type:"continue"})},retry:this.options.retry??0,retryDelay:this.options.retryDelay,networkMode:this.options.networkMode})),i(this,ot).promise),r=this.state.status==="pending";try{if(!r){f(this,K,N).call(this,{type:"pending",variables:t}),await((u=(a=i(this,w).config).onMutate)==null?void 0:u.call(a,t,this));const tt=await((d=(c=this.options).onMutate)==null?void 0:d.call(c,t));tt!==this.state.context&&f(this,K,N).call(this,{type:"pending",context:tt,variables:t})}const m=await e();return await((C=(j=i(this,w).config).onSuccess)==null?void 0:C.call(j,m,t,this.state.context,this)),await((P=(I=this.options).onSuccess)==null?void 0:P.call(I,m,t,this.state.context)),await((l=(O=i(this,w).config).onSettled)==null?void 0:l.call(O,m,null,this.state.variables,this.state.context,this)),await((M=(b=this.options).onSettled)==null?void 0:M.call(b,m,null,t,this.state.context)),f(this,K,N).call(this,{type:"success",data:m}),m}catch(m){try{throw await((T=(R=i(this,w).config).onError)==null?void 0:T.call(R,m,t,this.state.context,this)),await((S=(ft=this.options).onError)==null?void 0:S.call(ft,m,t,this.state.context)),await((Q=(D=i(this,w).config).onSettled)==null?void 0:Q.call(D,void 0,m,this.state.variables,this.state.context,this)),await((vt=(Z=this.options).onSettled)==null?void 0:vt.call(Z,void 0,m,t,this.state.context)),m}finally{f(this,K,N).call(this,{type:"error",error:m})}}}},L=new WeakMap,yt=new WeakMap,w=new WeakMap,ot=new WeakMap,K=new WeakSet,N=function(t){const e=r=>{switch(t.type){case"failed":return{...r,failureCount:t.failureCount,failureReason:t.error};case"pause":return{...r,isPaused:!0};case"continue":return{...r,isPaused:!1};case"pending":return{...r,context:t.context,data:void 0,failureCount:0,failureReason:null,error:null,isPaused:!Ht(this.options.networkMode),status:"pending",variables:t.variables,submittedAt:Date.now()};case"success":return{...r,data:t.data,failureCount:0,failureReason:null,error:null,status:"success",isPaused:!1};case"error":return{...r,data:void 0,error:t.error,failureCount:r.failureCount+1,failureReason:t.error,isPaused:!1,status:"error"}}};this.state=e(this.state),v.batch(()=>{i(this,L).forEach(r=>{r.onMutationUpdate(t)}),i(this,w).notify({mutation:this,type:"updated",action:t})})},Lt);function Bt(){return{context:void 0,data:void 0,error:null,failureCount:0,failureReason:null,isPaused:!1,status:"idle",variables:void 0,submittedAt:0}}var _,mt,it,Kt,be=(Kt=class extends Et{constructor(t={}){super();h(this,_,void 0);h(this,mt,void 0);h(this,it,void 0);this.config=t,o(this,_,[]),o(this,mt,0)}build(t,e,r){const a=new ve({mutationCache:this,mutationId:++bt(this,mt)._,options:t.defaultMutationOptions(e),state:r});return this.add(a),a}add(t){i(this,_).push(t),this.notify({type:"added",mutation:t})}remove(t){o(this,_,i(this,_).filter(e=>e!==t)),this.notify({type:"removed",mutation:t})}clear(){v.batch(()=>{i(this,_).forEach(t=>{this.remove(t)})})}getAll(){return i(this,_)}find(t){const e={exact:!0,...t};return i(this,_).find(r=>Rt(e,r))}findAll(t={}){return i(this,_).filter(e=>Rt(t,e))}notify(t){v.batch(()=>{this.listeners.forEach(e=>{e(t)})})}resumePausedMutations(){return o(this,it,(i(this,it)??Promise.resolve()).then(()=>{const t=i(this,_).filter(e=>e.state.isPaused);return v.batch(()=>t.reduce((e,r)=>e.then(()=>r.continue().catch(k)),Promise.resolve()))}).then(()=>{o(this,it,void 0)})),i(this,it)}},_=new WeakMap,mt=new WeakMap,it=new WeakMap,Kt);function Pe(s){return{onFetch:(t,e)=>{const r=async()=>{var b,M,R,T,ft;const a=t.options,u=(R=(M=(b=t.fetchOptions)==null?void 0:b.meta)==null?void 0:M.fetchMore)==null?void 0:R.direction,c=((T=t.state.data)==null?void 0:T.pages)||[],d=((ft=t.state.data)==null?void 0:ft.pageParams)||[],j={pages:[],pageParams:[]};let C=!1;const I=S=>{Object.defineProperty(S,"signal",{enumerable:!0,get:()=>(t.signal.aborted?C=!0:t.signal.addEventListener("abort",()=>{C=!0}),t.signal)})},P=t.options.queryFn||(()=>Promise.reject(new Error(`Missing queryFn: '${t.options.queryHash}'`))),O=async(S,D,Q)=>{if(C)return Promise.reject();if(D==null&&S.pages.length)return Promise.resolve(S);const Z={queryKey:t.queryKey,pageParam:D,direction:Q?"backward":"forward",meta:t.options.meta};I(Z);const vt=await P(Z),{maxPages:m}=t.options,tt=Q?ne:oe;return{pages:tt(S.pages,vt,m),pageParams:tt(S.pageParams,D,m)}};let l;if(u&&c.length){const S=u==="backward",D=S?Wt:Ct,Q={pages:c,pageParams:d},Z=D(a,Q);l=await O(Q,Z,S)}else{l=await O(j,d[0]??a.initialPageParam);const S=s??c.length;for(let D=1;D<S;D++){const Q=Ct(a,l);l=await O(l,Q)}}return l};t.options.persister?t.fetchFn=()=>{var a,u;return(u=(a=t.options).persister)==null?void 0:u.call(a,r,{queryKey:t.queryKey,meta:t.options.meta,signal:t.signal},e)}:t.fetchFn=r}}}function Ct(s,{pages:t,pageParams:e}){const r=t.length-1;return s.getNextPageParam(t[r],t,e[r],e)}function Wt(s,{pages:t,pageParams:e}){var r;return(r=s.getPreviousPageParam)==null?void 0:r.call(s,t[0],t,e[0],e)}function Xe(s,t){return t?Ct(s,t)!=null:!1}function Je(s,t){return!t||!s.getPreviousPageParam?!1:Wt(s,t)!=null}var y,W,X,ut,ht,J,ct,lt,zt,Oe=(zt=class{constructor(s={}){h(this,y,void 0);h(this,W,void 0);h(this,X,void 0);h(this,ut,void 0);h(this,ht,void 0);h(this,J,void 0);h(this,ct,void 0);h(this,lt,void 0);o(this,y,s.queryCache||new ge),o(this,W,s.mutationCache||new be),o(this,X,s.defaultOptions||{}),o(this,ut,new Map),o(this,ht,new Map),o(this,J,0)}mount(){bt(this,J)._++,i(this,J)===1&&(o(this,ct,Tt.subscribe(()=>{Tt.isFocused()&&(this.resumePausedMutations(),i(this,y).onFocus())})),o(this,lt,Dt.subscribe(()=>{Dt.isOnline()&&(this.resumePausedMutations(),i(this,y).onOnline())})))}unmount(){var s,t;bt(this,J)._--,i(this,J)===0&&((s=i(this,ct))==null||s.call(this),o(this,ct,void 0),(t=i(this,lt))==null||t.call(this),o(this,lt,void 0))}isFetching(s){return i(this,y).findAll({...s,fetchStatus:"fetching"}).length}isMutating(s){return i(this,W).findAll({...s,status:"pending"}).length}getQueryData(s){var t;return(t=i(this,y).find({queryKey:s}))==null?void 0:t.state.data}ensureQueryData(s){const t=this.getQueryData(s.queryKey);return t!==void 0?Promise.resolve(t):this.fetchQuery(s)}getQueriesData(s){return this.getQueryCache().findAll(s).map(({queryKey:t,state:e})=>{const r=e.data;return[t,r]})}setQueryData(s,t,e){const r=i(this,y).find({queryKey:s}),a=r==null?void 0:r.state.data,u=ue(t,a);if(typeof u>"u")return;const c=this.defaultQueryOptions({queryKey:s});return i(this,y).build(this,c).setData(u,{...e,manual:!0})}setQueriesData(s,t,e){return v.batch(()=>this.getQueryCache().findAll(s).map(({queryKey:r})=>[r,this.setQueryData(r,t,e)]))}getQueryState(s){var t;return(t=i(this,y).find({queryKey:s}))==null?void 0:t.state}removeQueries(s){const t=i(this,y);v.batch(()=>{t.findAll(s).forEach(e=>{t.remove(e)})})}resetQueries(s,t){const e=i(this,y),r={type:"active",...s};return v.batch(()=>(e.findAll(s).forEach(a=>{a.reset()}),this.refetchQueries(r,t)))}cancelQueries(s={},t={}){const e={revert:!0,...t},r=v.batch(()=>i(this,y).findAll(s).map(a=>a.cancel(e)));return Promise.all(r).then(k).catch(k)}invalidateQueries(s={},t={}){return v.batch(()=>{if(i(this,y).findAll(s).forEach(r=>{r.invalidate()}),s.refetchType==="none")return Promise.resolve();const e={...s,type:s.refetchType??s.type??"active"};return this.refetchQueries(e,t)})}refetchQueries(s={},t){const e={...t,cancelRefetch:(t==null?void 0:t.cancelRefetch)??!0},r=v.batch(()=>i(this,y).findAll(s).filter(a=>!a.isDisabled()).map(a=>{let u=a.fetch(void 0,e);return e.throwOnError||(u=u.catch(k)),a.state.fetchStatus==="paused"?Promise.resolve():u}));return Promise.all(r).then(k)}fetchQuery(s){const t=this.defaultQueryOptions(s);typeof t.retry>"u"&&(t.retry=!1);const e=i(this,y).build(this,t);return e.isStaleByTime(t.staleTime)?e.fetch(t):Promise.resolve(e.state.data)}prefetchQuery(s){return this.fetchQuery(s).then(k).catch(k)}fetchInfiniteQuery(s){return s.behavior=Pe(s.pages),this.fetchQuery(s)}prefetchInfiniteQuery(s){return this.fetchInfiniteQuery(s).then(k).catch(k)}resumePausedMutations(){return i(this,W).resumePausedMutations()}getQueryCache(){return i(this,y)}getMutationCache(){return i(this,W)}getDefaultOptions(){return i(this,X)}setDefaultOptions(s){o(this,X,s)}setQueryDefaults(s,t){i(this,ut).set(St(s),{queryKey:s,defaultOptions:t})}getQueryDefaults(s){const t=[...i(this,ut).values()];let e={};return t.forEach(r=>{Ft(s,r.queryKey)&&(e={...e,...r.defaultOptions})}),e}setMutationDefaults(s,t){i(this,ht).set(St(s),{mutationKey:s,defaultOptions:t})}getMutationDefaults(s){const t=[...i(this,ht).values()];let e={};return t.forEach(r=>{Ft(s,r.mutationKey)&&(e={...e,...r.defaultOptions})}),e}defaultQueryOptions(s){if(s!=null&&s._defaulted)return s;const t={...i(this,X).queries,...(s==null?void 0:s.queryKey)&&this.getQueryDefaults(s.queryKey),...s,_defaulted:!0};return t.queryHash||(t.queryHash=$t(t.queryKey,t)),typeof t.refetchOnReconnect>"u"&&(t.refetchOnReconnect=t.networkMode!=="always"),typeof t.throwOnError>"u"&&(t.throwOnError=!!t.suspense),typeof t.networkMode>"u"&&t.persister&&(t.networkMode="offlineFirst"),t}defaultMutationOptions(s){return s!=null&&s._defaulted?s:{...i(this,X).mutations,...(s==null?void 0:s.mutationKey)&&this.getMutationDefaults(s.mutationKey),...s,_defaulted:!0}}clear(){i(this,y).clear(),i(this,W).clear()}},y=new WeakMap,W=new WeakMap,X=new WeakMap,ut=new WeakMap,ht=new WeakMap,J=new WeakMap,ct=new WeakMap,lt=new WeakMap,zt),Y,G,x,H,dt,Ot,gt,At,Vt,Se=(Vt=class extends Et{constructor(e,r){super();h(this,dt);h(this,gt);h(this,Y,void 0);h(this,G,void 0);h(this,x,void 0);h(this,H,void 0);o(this,G,void 0),o(this,Y,e),this.setOptions(r),this.bindMethods(),f(this,dt,Ot).call(this)}bindMethods(){this.mutate=this.mutate.bind(this),this.reset=this.reset.bind(this)}setOptions(e){var a;const r=this.options;this.options=i(this,Y).defaultMutationOptions(e),he(r,this.options)||i(this,Y).getMutationCache().notify({type:"observerOptionsUpdated",mutation:i(this,x),observer:this}),(a=i(this,x))==null||a.setOptions(this.options),r!=null&&r.mutationKey&&this.options.mutationKey&&St(r.mutationKey)!==St(this.options.mutationKey)&&this.reset()}onUnsubscribe(){var e;this.hasListeners()||(e=i(this,x))==null||e.removeObserver(this)}onMutationUpdate(e){f(this,dt,Ot).call(this),f(this,gt,At).call(this,e)}getCurrentResult(){return i(this,G)}reset(){var e;(e=i(this,x))==null||e.removeObserver(this),o(this,x,void 0),f(this,dt,Ot).call(this),f(this,gt,At).call(this)}mutate(e,r){var a;return o(this,H,r),(a=i(this,x))==null||a.removeObserver(this),o(this,x,i(this,Y).getMutationCache().build(i(this,Y),this.options)),i(this,x).addObserver(this),i(this,x).execute(e)}},Y=new WeakMap,G=new WeakMap,x=new WeakMap,H=new WeakMap,dt=new WeakSet,Ot=function(){var r;const e=((r=i(this,x))==null?void 0:r.state)??Bt();o(this,G,{...e,isPending:e.status==="pending",isSuccess:e.status==="success",isError:e.status==="error",isIdle:e.status==="idle",mutate:this.mutate,reset:this.reset})},gt=new WeakSet,At=function(e){v.batch(()=>{var r,a,u,c,d,j,C,I;if(i(this,H)&&this.hasListeners()){const P=i(this,G).variables,O=i(this,G).context;(e==null?void 0:e.type)==="success"?((a=(r=i(this,H)).onSuccess)==null||a.call(r,e.data,P,O),(c=(u=i(this,H)).onSettled)==null||c.call(u,e.data,null,P,O)):(e==null?void 0:e.type)==="error"&&((j=(d=i(this,H)).onError)==null||j.call(d,e.error,P,O),(I=(C=i(this,H)).onSettled)==null||I.call(C,void 0,e.error,P,O))}this.listeners.forEach(P=>{P(i(this,G))})})},Vt);function we(s,t){const e=ce(t),[r]=$.useState(()=>new Se(e,s));$.useEffect(()=>{r.setOptions(s)},[r,s]);const a=$.useSyncExternalStore($.useCallback(c=>r.subscribe(v.batchCalls(c)),[r]),()=>r.getCurrentResult(),()=>r.getCurrentResult()),u=$.useCallback((c,d)=>{r.mutate(c,d).catch(xe)},[r]);if(a.error&&le(r.options.throwOnError,[a.error]))throw a.error;return{...a,mutate:u,mutateAsync:a.mutate}}function xe(){}const Ze=()=>we({mutationKey:["signin"],mutationFn:async({email:s,password:t})=>(await _t.post("auth/jwt/create/",{email:s,password:t})).data,onSuccess:async s=>{await localStorage.setItem("token",s.access),await localStorage.setItem("refreshToken",s.refresh)}}),je=async()=>{let s=!1;return await _t.post("auth/jwt/refresh/",{refresh:localStorage.getItem("refreshToken")}).then(async t=>{console.log("refresh token antes de guardar",localStorage.getItem("refreshToken")),await localStorage.setItem("token",t.data.access),await console.log("refresh token despues de guardar",localStorage.getItem("refreshToken")),s=!0}).catch(t=>{console.log(t,"error aqui estoy en useRefreshTokenMutation"),localStorage.removeItem("token"),localStorage.removeItem("refreshToken"),s=!1}),s},Ce=async()=>{let s=!1;return await _t.post("auth/jwt/verify/",{token:localStorage.getItem("token")}).then(()=>{s=!0}).catch(async t=>{console.log(t,"error aqui estoy en useVerfyTokenMutation");const e=await je();console.log(e,"successrefresh aqui estoy en useVerfyTokenMutation"),e&&(s=!0)}),s},Xt=$.createContext({isTokenValid:!1,validateToken:async()=>{},logout:async()=>{}});function Ae({children:s}){const[t,e]=$.useState(!1),r=async()=>{console.log("logout"),await localStorage.removeItem("token"),await localStorage.removeItem("refreshToken"),e(!1)},a=async()=>{if(!await localStorage.getItem("token")){console.log("no hay token"),e(!1);return}if(await Ce()){console.log("token valido"),e(!0);return}};return n.jsx(Xt.Provider,{value:{isTokenValid:t,validateToken:a,logout:r},children:s})}function Ee(){const s=$.useContext(Xt);if(!s)throw new Error("useAuth must be used within an AuthProvider");return s}function _e(){const s=Ee();return $.useEffect(()=>{s.validateToken()},[]),s.isTokenValid?n.jsx(Yt,{}):n.jsx(Zt,{to:"/login"})}var Me=function(){return null};const Re=(s,t)=>`
        <?xml version="1.0" encoding="UTF-8"?>
        <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
            ${s.map(a=>{const u=new URL(t+a.path);let c="monthly",d=.5,j=new Date().toISOString().split("T")[0];return a.path==="/"?d=1:a.path==="/servicios"?d=.9:a.path==="/aboutUs"&&(d=.8),`
            <url>
                <loc>${u.href}</loc>
                <lastmod>${j}</lastmod>
                <changefreq>${c}</changefreq>
                <priority>${d}</priority>
            </url>
        `}).join(`
`)}
        </urlset>
    `,Te=()=>{const e=Re([{path:"/"},{path:"/login"},{path:"/aboutUs"},{path:"/services_topografia"},{path:"/services_ingenieria"},{path:"/services_ambiental"},{path:"/servicios"},{path:"/servicios/:id"},{path:"/projects"},{path:"/projects/:id"},{path:"/contact"},{path:"/blog"},{path:"/blog/:id"},{path:"/",children:[{path:"/cotizador"}]}],pe);return n.jsx("pre",{children:e})},De=p.lazy(()=>z(()=>import("./App-97f4ec06.js"),["App-97f4ec06.js","preload-helper-4aa0ec7d.js","jsx-runtime-c0a91cf1.js","pagesLayouts-407d54f6.js","index-cc74cdf4.js","App-8141ff56.js","swiper-ff39d36a.js","swiper-7c8ef494.css","useLazyload-849daff9.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js","App-73c3bfd2.css","scrollbar-936b3cf4.css"])),Fe=p.lazy(()=>z(()=>import("./login-7ad5f4af.js"),["login-7ad5f4af.js","jsx-runtime-c0a91cf1.js","navBar-08692167.js","logoOriginal-f062669e.js","index-cc74cdf4.js","navBar-f83afce5.css","useLazyload-849daff9.js","preload-helper-4aa0ec7d.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js","login-3d72531e.css"])),ke=p.lazy(()=>z(()=>import("./cotizador-7aa25e0a.js"),["cotizador-7aa25e0a.js","jsx-runtime-c0a91cf1.js","pagesLayouts-407d54f6.js","preload-helper-4aa0ec7d.js","index-cc74cdf4.js","useLazyload-849daff9.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js"])),qe=p.lazy(()=>z(()=>import("./aboutUs-bc1065d9.js"),["aboutUs-bc1065d9.js","preload-helper-4aa0ec7d.js","jsx-runtime-c0a91cf1.js","pagesLayouts-407d54f6.js","index-cc74cdf4.js","banner-ac69955d.js","index.esm-6a20fd5f.js","iconBase-5e2dd25d.js","index.esm-d7d59c05.js","banner-0ebd13ec.css","index.esm-c2c2aed3.js","nosotros-bd4c0eb1.js","useLazyload-849daff9.js","aboutUs-5367be92.css"])),Ie=p.lazy(()=>z(()=>import("./projects-a88114c9.js"),["projects-a88114c9.js","jsx-runtime-c0a91cf1.js","banner-ac69955d.js","index.esm-6a20fd5f.js","iconBase-5e2dd25d.js","index.esm-d7d59c05.js","index-cc74cdf4.js","pagesLayouts-407d54f6.js","preload-helper-4aa0ec7d.js","banner-0ebd13ec.css","cardsProjects-070336dd.js","useLazyload-849daff9.js","cardsProjects-577b53fd.css","projects-76c1e199.js","getProjects-70925527.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js"])),qt=p.lazy(()=>z(()=>import("./servecesDetail-311ae18d.js"),["servecesDetail-311ae18d.js","preload-helper-4aa0ec7d.js","jsx-runtime-c0a91cf1.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js","index.esm-f255d7e4.js","iconBase-5e2dd25d.js","converted_topo-b9bd597d.js","banner-ac69955d.js","index.esm-6a20fd5f.js","index.esm-d7d59c05.js","index-cc74cdf4.js","pagesLayouts-407d54f6.js","banner-0ebd13ec.css","swiper-ff39d36a.js","swiper-7c8ef494.css","ScreenSize-cf31a297.js","useLazyload-849daff9.js","index-fca66f4e.js","servecesDetail-5b53c611.css","scrollbar-936b3cf4.css"])),Qe=p.lazy(()=>z(()=>import("./projecsDetail-f077e390.js"),["projecsDetail-f077e390.js","preload-helper-4aa0ec7d.js","jsx-runtime-c0a91cf1.js","index-cc74cdf4.js","banner-ac69955d.js","index.esm-6a20fd5f.js","iconBase-5e2dd25d.js","index.esm-d7d59c05.js","pagesLayouts-407d54f6.js","banner-0ebd13ec.css","projects-76c1e199.js","swiper-ff39d36a.js","swiper-7c8ef494.css","getProjects-70925527.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js","useLazyload-849daff9.js","projecsDetail-8b168550.css"])),Ue=p.lazy(()=>z(()=>import("./contact-6e982459.js"),["contact-6e982459.js","preload-helper-4aa0ec7d.js","jsx-runtime-c0a91cf1.js","pagesLayouts-407d54f6.js","index-cc74cdf4.js","banner-ac69955d.js","index.esm-6a20fd5f.js","iconBase-5e2dd25d.js","index.esm-d7d59c05.js","banner-0ebd13ec.css","index.esm-c2c2aed3.js","index.esm-b66b23d1.js","projects-76c1e199.js","useLazyload-849daff9.js"])),Le=p.lazy(()=>z(()=>import("./blogDetail-e0dad906.js"),["blogDetail-e0dad906.js","jsx-runtime-c0a91cf1.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js","sidebarBolgs-6dc62c3f.js","logoOriginal-f062669e.js","index-cc74cdf4.js","useLazyload-849daff9.js","floawhatsapp-c8ae6bce.js","footer1-9c6c1c35.js","index.esm-6a20fd5f.js","iconBase-5e2dd25d.js","index.esm-c2c2aed3.js","footer1-8a106b42.css","index.esm-f255d7e4.js","sidebarBolgs-3d68cdd9.css","preload-helper-4aa0ec7d.js"])),Ke=p.lazy(()=>z(()=>import("./blog-318904d5.js"),["blog-318904d5.js","preload-helper-4aa0ec7d.js","jsx-runtime-c0a91cf1.js","GetsIdServices-dc6be9f6.js","lottie-632db44f.js","sidebarBolgs-6dc62c3f.js","logoOriginal-f062669e.js","index-cc74cdf4.js","useLazyload-849daff9.js","floawhatsapp-c8ae6bce.js","footer1-9c6c1c35.js","index.esm-6a20fd5f.js","iconBase-5e2dd25d.js","index.esm-c2c2aed3.js","footer1-8a106b42.css","index.esm-f255d7e4.js","sidebarBolgs-3d68cdd9.css","index.esm-d7d59c05.js"])),ze=new Oe,Ve=te([{path:"/",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(De,{})})},{path:"/sitemap.xml",element:n.jsx(Te,{})},{path:"/login",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(Fe,{})})},{path:"/aboutUs",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(qe,{})})},{path:"/servicios",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(qt,{})})},{path:"/servicios/:id",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(qt,{})})},{path:"/projects",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(Ie,{})})},{path:"/projects/:projectArg",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(Qe,{})})},{path:"/contact",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(Ue,{})})},{path:"/blog",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(Ke,{})})},{path:"/blog/:id",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(Le,{})})},{path:"/",element:n.jsx(_e,{}),children:[{path:"/cotizador",element:n.jsx(p.Suspense,{fallback:n.jsx(F,{}),children:n.jsx(ke,{})})}]}]);console.log("main.tsx");jt.createRoot(document.getElementById("root")).render(n.jsx(p.StrictMode,{children:n.jsx(de,{client:ze,children:n.jsx(fe,{children:n.jsxs(Ae,{children:[n.jsx(ee,{router:Ve}),n.jsx(Me,{initialIsOpen:!1})]})})})}));export{Ee as a,Je as b,we as c,Xe as h,Pe as i,Ze as u};


//# sourceMappingURL=data:application/json;base64,