import{r as G,R as $}from"./jsx-runtime-c0a91cf1.js";function ve(t){return t!==null&&typeof t=="object"&&"constructor"in t&&t.constructor===Object}function he(t,e){t===void 0&&(t={}),e===void 0&&(e={}),Object.keys(e).forEach(i=>{typeof t[i]>"u"?t[i]=e[i]:ve(e[i])&&ve(t[i])&&Object.keys(e[i]).length>0&&he(t[i],e[i])})}const Te={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function k(){const t=typeof document<"u"?document:{};return he(t,Te),t}const $e={document:Te,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(t){return typeof setTimeout>"u"?(t(),null):setTimeout(t,0)},cancelAnimationFrame(t){typeof setTimeout>"u"||clearTimeout(t)}};function V(){const t=typeof window<"u"?window:{};return he(t,$e),t}function Ne(t){return t===void 0&&(t=""),t.trim().split(" ").filter(e=>!!e.trim())}function Ve(t){const e=t;Object.keys(e).forEach(i=>{try{e[i]=null}catch{}try{delete e[i]}catch{}})}function ue(t,e){return e===void 0&&(e=0),setTimeout(t,e)}function ee(){return Date.now()}function Fe(t){const e=V();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}function Re(t,e){e===void 0&&(e="x");const i=V();let s,n,r;const l=Fe(t);return i.WebKitCSSMatrix?(n=l.transform||l.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(o=>o.replace(",",".")).join(", ")),r=new i.WebKitCSSMatrix(n==="none"?"":n)):(r=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=r.toString().split(",")),e==="x"&&(i.WebKitCSSMatrix?n=r.m41:s.length===16?n=parseFloat(s[12]):n=parseFloat(s[4])),e==="y"&&(i.WebKitCSSMatrix?n=r.m42:s.length===16?n=parseFloat(s[13]):n=parseFloat(s[5])),n||0}function Z(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"}function ke(t){return typeof window<"u"&&typeof window.HTMLElement<"u"?t instanceof HTMLElement:t&&(t.nodeType===1||t.nodeType===11)}function N(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const s=i<0||arguments.length<=i?void 0:arguments[i];if(s!=null&&!ke(s)){const n=Object.keys(Object(s)).filter(r=>e.indexOf(r)<0);for(let r=0,l=n.length;r<l;r+=1){const o=n[r],a=Object.getOwnPropertyDescriptor(s,o);a!==void 0&&a.enumerable&&(Z(t[o])&&Z(s[o])?s[o].__swiper__?t[o]=s[o]:N(t[o],s[o]):!Z(t[o])&&Z(s[o])?(t[o]={},s[o].__swiper__?t[o]=s[o]:N(t[o],s[o])):t[o]=s[o])}}}return t}function J(t,e,i){t.style.setProperty(e,i)}function xe(t){let{swiper:e,targetPosition:i,side:s}=t;const n=V(),r=-e.translate;let l=null,o;const a=e.params.speed;e.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(e.cssModeFrameID);const f=i>r?"next":"prev",d=(h,g)=>f==="next"&&h>=g||f==="prev"&&h<=g,p=()=>{o=new Date().getTime(),l===null&&(l=o);const h=Math.max(Math.min((o-l)/a,1),0),g=.5-Math.cos(h*Math.PI)/2;let S=r+g*(i-r);if(d(S,i)&&(S=i),e.wrapperEl.scrollTo({[s]:S}),d(S,i)){e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout(()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[s]:S})}),n.cancelAnimationFrame(e.cssModeFrameID);return}e.cssModeFrameID=n.requestAnimationFrame(p)};p()}function pi(t){return t.querySelector(".swiper-slide-transform")||t.shadowRoot&&t.shadowRoot.querySelector(".swiper-slide-transform")||t}function F(t,e){return e===void 0&&(e=""),[...t.children].filter(i=>i.matches(e))}function te(t){try{console.warn(t);return}catch{}}function ie(t,e){e===void 0&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:Ne(e)),i}function He(t,e){const i=[];for(;t.previousElementSibling;){const s=t.previousElementSibling;e?s.matches(e)&&i.push(s):i.push(s),t=s}return i}function je(t,e){const i=[];for(;t.nextElementSibling;){const s=t.nextElementSibling;e?s.matches(e)&&i.push(s):i.push(s),t=s}return i}function H(t,e){return V().getComputedStyle(t,null).getPropertyValue(e)}function se(t){let e=t,i;if(e){for(i=0;(e=e.previousSibling)!==null;)e.nodeType===1&&(i+=1);return i}}function Ee(t,e){const i=[];let s=t.parentElement;for(;s;)e?s.matches(e)&&i.push(s):i.push(s),s=s.parentElement;return i}function mi(t,e){function i(s){s.target===t&&(e.call(t,s),t.removeEventListener("transitionend",i))}e&&t.addEventListener("transitionend",i)}function fe(t,e,i){const s=V();return i?t[e==="width"?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-left":"margin-bottom")):t.offsetWidth}let ne;function We(){const t=V(),e=k();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}function Ce(){return ne||(ne=We()),ne}let ae;function qe(t){let{userAgent:e}=t===void 0?{}:t;const i=Ce(),s=V(),n=s.navigator.platform,r=e||s.navigator.userAgent,l={ios:!1,android:!1},o=s.screen.width,a=s.screen.height,f=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const p=r.match(/(iPod)(.*OS\s([\d_]+))?/),h=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),g=n==="Win32";let S=n==="MacIntel";const v=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!d&&S&&i.touch&&v.indexOf(`${o}x${a}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),S=!1),f&&!g&&(l.os="android",l.android=!0),(d||h||p)&&(l.os="ios",l.ios=!0),l}function Ye(t){return t===void 0&&(t={}),ae||(ae=qe(t)),ae}let le;function Xe(){const t=V();let e=!1;function i(){const s=t.navigator.userAgent.toLowerCase();return s.indexOf("safari")>=0&&s.indexOf("chrome")<0&&s.indexOf("android")<0}if(i()){const s=String(t.navigator.userAgent);if(s.includes("Version/")){const[n,r]=s.split("Version/")[1].split(" ")[0].split(".").map(l=>Number(l));e=n<16||n===16&&r<2}}return{isSafari:e||i(),needPerspectiveFix:e,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}function Ue(){return le||(le=Xe()),le}function Ke(t){let{swiper:e,on:i,emit:s}=t;const n=V();let r=null,l=null;const o=()=>{!e||e.destroyed||!e.initialized||(s("beforeResize"),s("resize"))},a=()=>{!e||e.destroyed||!e.initialized||(r=new ResizeObserver(p=>{l=n.requestAnimationFrame(()=>{const{width:h,height:g}=e;let S=h,v=g;p.forEach(b=>{let{contentBoxSize:m,contentRect:c,target:u}=b;u&&u!==e.el||(S=c?c.width:(m[0]||m).inlineSize,v=c?c.height:(m[0]||m).blockSize)}),(S!==h||v!==g)&&o()})}),r.observe(e.el))},f=()=>{l&&n.cancelAnimationFrame(l),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null)},d=()=>{!e||e.destroyed||!e.initialized||s("orientationchange")};i("init",()=>{if(e.params.resizeObserver&&typeof n.ResizeObserver<"u"){a();return}n.addEventListener("resize",o),n.addEventListener("orientationchange",d)}),i("destroy",()=>{f(),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",d)})}function Ze(t){let{swiper:e,extendParams:i,on:s,emit:n}=t;const r=[],l=V(),o=function(d,p){p===void 0&&(p={});const h=l.MutationObserver||l.WebkitMutationObserver,g=new h(S=>{if(e.__preventObserver__)return;if(S.length===1){n("observerUpdate",S[0]);return}const v=function(){n("observerUpdate",S[0])};l.requestAnimationFrame?l.requestAnimationFrame(v):l.setTimeout(v,0)});g.observe(d,{attributes:typeof p.attributes>"u"?!0:p.attributes,childList:typeof p.childList>"u"?!0:p.childList,characterData:typeof p.characterData>"u"?!0:p.characterData}),r.push(g)},a=()=>{if(e.params.observer){if(e.params.observeParents){const d=Ee(e.hostEl);for(let p=0;p<d.length;p+=1)o(d[p])}o(e.hostEl,{childList:e.params.observeSlideChildren}),o(e.wrapperEl,{attributes:!1})}},f=()=>{r.forEach(d=>{d.disconnect()}),r.splice(0,r.length)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",a),s("destroy",f)}var Je={on(t,e,i){const s=this;if(!s.eventsListeners||s.destroyed||typeof e!="function")return s;const n=i?"unshift":"push";return t.split(" ").forEach(r=>{s.eventsListeners[r]||(s.eventsListeners[r]=[]),s.eventsListeners[r][n](e)}),s},once(t,e,i){const s=this;if(!s.eventsListeners||s.destroyed||typeof e!="function")return s;function n(){s.off(t,n),n.__emitterProxy&&delete n.__emitterProxy;for(var r=arguments.length,l=new Array(r),o=0;o<r;o++)l[o]=arguments[o];e.apply(s,l)}return n.__emitterProxy=e,s.on(t,n,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;const s=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[s](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed||!i.eventsListeners||t.split(" ").forEach(s=>{typeof e>"u"?i.eventsListeners[s]=[]:i.eventsListeners[s]&&i.eventsListeners[s].forEach((n,r)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[s].splice(r,1)})}),i},emit(){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsListeners)return t;let e,i,s;for(var n=arguments.length,r=new Array(n),l=0;l<n;l++)r[l]=arguments[l];return typeof r[0]=="string"||Array.isArray(r[0])?(e=r[0],i=r.slice(1,r.length),s=t):(e=r[0].events,i=r[0].data,s=r[0].context||t),i.unshift(s),(Array.isArray(e)?e:e.split(" ")).forEach(a=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach(f=>{f.apply(s,[a,...i])}),t.eventsListeners&&t.eventsListeners[a]&&t.eventsListeners[a].forEach(f=>{f.apply(s,i)})}),t}};function Qe(){const t=this;let e,i;const s=t.el;typeof t.params.width<"u"&&t.params.width!==null?e=t.params.width:e=s.clientWidth,typeof t.params.height<"u"&&t.params.height!==null?i=t.params.height:i=s.clientHeight,!(e===0&&t.isHorizontal()||i===0&&t.isVertical())&&(e=e-parseInt(H(s,"padding-left")||0,10)-parseInt(H(s,"padding-right")||0,10),i=i-parseInt(H(s,"padding-top")||0,10)-parseInt(H(s,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))}function et(){const t=this;function e(T,C){return parseFloat(T.getPropertyValue(t.getDirectionLabel(C))||0)}const i=t.params,{wrapperEl:s,slidesEl:n,size:r,rtlTranslate:l,wrongRTL:o}=t,a=t.virtual&&i.virtual.enabled,f=a?t.virtual.slides.length:t.slides.length,d=F(n,`.${t.params.slideClass}, swiper-slide`),p=a?t.virtual.slides.length:d.length;let h=[];const g=[],S=[];let v=i.slidesOffsetBefore;typeof v=="function"&&(v=i.slidesOffsetBefore.call(t));let b=i.slidesOffsetAfter;typeof b=="function"&&(b=i.slidesOffsetAfter.call(t));const m=t.snapGrid.length,c=t.slidesGrid.length;let u=i.spaceBetween,w=-v,y=0,P=0;if(typeof r>"u")return;typeof u=="string"&&u.indexOf("%")>=0?u=parseFloat(u.replace("%",""))/100*r:typeof u=="string"&&(u=parseFloat(u)),t.virtualSize=-u,d.forEach(T=>{l?T.style.marginLeft="":T.style.marginRight="",T.style.marginBottom="",T.style.marginTop=""}),i.centeredSlides&&i.cssMode&&(J(s,"--swiper-centered-offset-before",""),J(s,"--swiper-centered-offset-after",""));const z=i.grid&&i.grid.rows>1&&t.grid;z?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();let L;const x=i.slidesPerView==="auto"&&i.breakpoints&&Object.keys(i.breakpoints).filter(T=>typeof i.breakpoints[T].slidesPerView<"u").length>0;for(let T=0;T<p;T+=1){L=0;let C;if(d[T]&&(C=d[T]),z&&t.grid.updateSlide(T,C,d),!(d[T]&&H(C,"display")==="none")){if(i.slidesPerView==="auto"){x&&(d[T].style[t.getDirectionLabel("width")]="");const M=getComputedStyle(C),E=C.style.transform,I=C.style.webkitTransform;if(E&&(C.style.transform="none"),I&&(C.style.webkitTransform="none"),i.roundLengths)L=t.isHorizontal()?fe(C,"width",!0):fe(C,"height",!0);else{const O=e(M,"width"),B=e(M,"padding-left"),Y=e(M,"padding-right"),A=e(M,"margin-left"),D=e(M,"margin-right"),_=M.getPropertyValue("box-sizing");if(_&&_==="border-box")L=O+A+D;else{const{clientWidth:j,offsetWidth:K}=C;L=O+B+Y+A+D+(K-j)}}E&&(C.style.transform=E),I&&(C.style.webkitTransform=I),i.roundLengths&&(L=Math.floor(L))}else L=(r-(i.slidesPerView-1)*u)/i.slidesPerView,i.roundLengths&&(L=Math.floor(L)),d[T]&&(d[T].style[t.getDirectionLabel("width")]=`${L}px`);d[T]&&(d[T].swiperSlideSize=L),S.push(L),i.centeredSlides?(w=w+L/2+y/2+u,y===0&&T!==0&&(w=w-r/2-u),T===0&&(w=w-r/2-u),Math.abs(w)<1/1e3&&(w=0),i.roundLengths&&(w=Math.floor(w)),P%i.slidesPerGroup===0&&h.push(w),g.push(w)):(i.roundLengths&&(w=Math.floor(w)),(P-Math.min(t.params.slidesPerGroupSkip,P))%t.params.slidesPerGroup===0&&h.push(w),g.push(w),w=w+L+u),t.virtualSize+=L+u,y=L,P+=1}}if(t.virtualSize=Math.max(t.virtualSize,r)+b,l&&o&&(i.effect==="slide"||i.effect==="coverflow")&&(s.style.width=`${t.virtualSize+u}px`),i.setWrapperSize&&(s.style[t.getDirectionLabel("width")]=`${t.virtualSize+u}px`),z&&t.grid.updateWrapperSize(L,h),!i.centeredSlides){const T=[];for(let C=0;C<h.length;C+=1){let M=h[C];i.roundLengths&&(M=Math.floor(M)),h[C]<=t.virtualSize-r&&T.push(M)}h=T,Math.floor(t.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(t.virtualSize-r)}if(a&&i.loop){const T=S[0]+u;if(i.slidesPerGroup>1){const C=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),M=T*i.slidesPerGroup;for(let E=0;E<C;E+=1)h.push(h[h.length-1]+M)}for(let C=0;C<t.virtual.slidesBefore+t.virtual.slidesAfter;C+=1)i.slidesPerGroup===1&&h.push(h[h.length-1]+T),g.push(g[g.length-1]+T),t.virtualSize+=T}if(h.length===0&&(h=[0]),u!==0){const T=t.isHorizontal()&&l?"marginLeft":t.getDirectionLabel("marginRight");d.filter((C,M)=>!i.cssMode||i.loop?!0:M!==d.length-1).forEach(C=>{C.style[T]=`${u}px`})}if(i.centeredSlides&&i.centeredSlidesBounds){let T=0;S.forEach(M=>{T+=M+(u||0)}),T-=u;const C=T-r;h=h.map(M=>M<=0?-v:M>C?C+b:M)}if(i.centerInsufficientSlides){let T=0;if(S.forEach(C=>{T+=C+(u||0)}),T-=u,T<r){const C=(r-T)/2;h.forEach((M,E)=>{h[E]=M-C}),g.forEach((M,E)=>{g[E]=M+C})}}if(Object.assign(t,{slides:d,snapGrid:h,slidesGrid:g,slidesSizesGrid:S}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){J(s,"--swiper-centered-offset-before",`${-h[0]}px`),J(s,"--swiper-centered-offset-after",`${t.size/2-S[S.length-1]/2}px`);const T=-t.snapGrid[0],C=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map(M=>M+T),t.slidesGrid=t.slidesGrid.map(M=>M+C)}if(p!==f&&t.emit("slidesLengthChange"),h.length!==m&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),g.length!==c&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!a&&!i.cssMode&&(i.effect==="slide"||i.effect==="fade")){const T=`${i.containerModifierClass}backface-hidden`,C=t.el.classList.contains(T);p<=i.maxBackfaceHiddenSlides?C||t.el.classList.add(T):C&&t.el.classList.remove(T)}}function tt(t){const e=this,i=[],s=e.virtual&&e.params.virtual.enabled;let n=0,r;typeof t=="number"?e.setTransition(t):t===!0&&e.setTransition(e.params.speed);const l=o=>s?e.slides[e.getSlideIndexByData(o)]:e.slides[o];if(e.params.slidesPerView!=="auto"&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach(o=>{i.push(o)});else for(r=0;r<Math.ceil(e.params.slidesPerView);r+=1){const o=e.activeIndex+r;if(o>e.slides.length&&!s)break;i.push(l(o))}else i.push(l(e.activeIndex));for(r=0;r<i.length;r+=1)if(typeof i[r]<"u"){const o=i[r].offsetHeight;n=o>n?o:n}(n||n===0)&&(e.wrapperEl.style.height=`${n}px`)}function it(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let s=0;s<e.length;s+=1)e[s].swiperSlideOffset=(t.isHorizontal()?e[s].offsetLeft:e[s].offsetTop)-i-t.cssOverflowAdjustment()}function st(t){t===void 0&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:s,rtlTranslate:n,snapGrid:r}=e;if(s.length===0)return;typeof s[0].swiperSlideOffset>"u"&&e.updateSlidesOffset();let l=-t;n&&(l=t),s.forEach(a=>{a.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass)}),e.visibleSlidesIndexes=[],e.visibleSlides=[];let o=i.spaceBetween;typeof o=="string"&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*e.size:typeof o=="string"&&(o=parseFloat(o));for(let a=0;a<s.length;a+=1){const f=s[a];let d=f.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=s[0].swiperSlideOffset);const p=(l+(i.centeredSlides?e.minTranslate():0)-d)/(f.swiperSlideSize+o),h=(l-r[0]+(i.centeredSlides?e.minTranslate():0)-d)/(f.swiperSlideSize+o),g=-(l-d),S=g+e.slidesSizesGrid[a],v=g>=0&&g<=e.size-e.slidesSizesGrid[a];(g>=0&&g<e.size-1||S>1&&S<=e.size||g<=0&&S>=e.size)&&(e.visibleSlides.push(f),e.visibleSlidesIndexes.push(a),s[a].classList.add(i.slideVisibleClass)),v&&s[a].classList.add(i.slideFullyVisibleClass),f.progress=n?-p:p,f.originalProgress=n?-h:h}}function rt(t){const e=this;if(typeof t>"u"){const d=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*d||0}const i=e.params,s=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:r,isEnd:l,progressLoop:o}=e;const a=r,f=l;if(s===0)n=0,r=!0,l=!0;else{n=(t-e.minTranslate())/s;const d=Math.abs(t-e.minTranslate())<1,p=Math.abs(t-e.maxTranslate())<1;r=d||n<=0,l=p||n>=1,d&&(n=0),p&&(n=1)}if(i.loop){const d=e.getSlideIndexByData(0),p=e.getSlideIndexByData(e.slides.length-1),h=e.slidesGrid[d],g=e.slidesGrid[p],S=e.slidesGrid[e.slidesGrid.length-1],v=Math.abs(t);v>=h?o=(v-h)/S:o=(v+S-g)/S,o>1&&(o-=1)}Object.assign(e,{progress:n,progressLoop:o,isBeginning:r,isEnd:l}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),r&&!a&&e.emit("reachBeginning toEdge"),l&&!f&&e.emit("reachEnd toEdge"),(a&&!r||f&&!l)&&e.emit("fromEdge"),e.emit("progress",n)}function nt(){const t=this,{slides:e,params:i,slidesEl:s,activeIndex:n}=t,r=t.virtual&&i.virtual.enabled,l=t.grid&&i.grid&&i.grid.rows>1,o=p=>F(s,`.${i.slideClass}${p}, swiper-slide${p}`)[0];e.forEach(p=>{p.classList.remove(i.slideActiveClass,i.slideNextClass,i.slidePrevClass)});let a,f,d;if(r)if(i.loop){let p=n-t.virtual.slidesBefore;p<0&&(p=t.virtual.slides.length+p),p>=t.virtual.slides.length&&(p-=t.virtual.slides.length),a=o(`[data-swiper-slide-index="${p}"]`)}else a=o(`[data-swiper-slide-index="${n}"]`);else l?(a=e.filter(p=>p.column===n)[0],d=e.filter(p=>p.column===n+1)[0],f=e.filter(p=>p.column===n-1)[0]):a=e[n];a&&(a.classList.add(i.slideActiveClass),l?(d&&d.classList.add(i.slideNextClass),f&&f.classList.add(i.slidePrevClass)):(d=je(a,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),d&&d.classList.add(i.slideNextClass),f=He(a,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!f===0&&(f=e[e.length-1]),f&&f.classList.add(i.slidePrevClass))),t.emitSlidesClasses()}const Q=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=()=>t.isElement?"swiper-slide":`.${t.params.slideClass}`,s=e.closest(i());if(s){let n=s.querySelector(`.${t.params.lazyPreloaderClass}`);!n&&t.isElement&&(s.shadowRoot?n=s.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{s.shadowRoot&&(n=s.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),n&&n.remove())})),n&&n.remove()}},oe=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},pe=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const s=t.params.slidesPerView==="auto"?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),n=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const l=n,o=[l-e];o.push(...Array.from({length:e}).map((a,f)=>l+s+f)),t.slides.forEach((a,f)=>{o.includes(a.column)&&oe(t,f)});return}const r=n+s-1;if(t.params.rewind||t.params.loop)for(let l=n-e;l<=r+e;l+=1){const o=(l%i+i)%i;(o<n||o>r)&&oe(t,o)}else for(let l=Math.max(n-e,0);l<=Math.min(r+e,i-1);l+=1)l!==n&&(l>r||l<n)&&oe(t,l)};function at(t){const{slidesGrid:e,params:i}=t,s=t.rtlTranslate?t.translate:-t.translate;let n;for(let r=0;r<e.length;r+=1)typeof e[r+1]<"u"?s>=e[r]&&s<e[r+1]-(e[r+1]-e[r])/2?n=r:s>=e[r]&&s<e[r+1]&&(n=r+1):s>=e[r]&&(n=r);return i.normalizeSlideIndex&&(n<0||typeof n>"u")&&(n=0),n}function lt(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:s,params:n,activeIndex:r,realIndex:l,snapIndex:o}=e;let a=t,f;const d=g=>{let S=g-e.virtual.slidesBefore;return S<0&&(S=e.virtual.slides.length+S),S>=e.virtual.slides.length&&(S-=e.virtual.slides.length),S};if(typeof a>"u"&&(a=at(e)),s.indexOf(i)>=0)f=s.indexOf(i);else{const g=Math.min(n.slidesPerGroupSkip,a);f=g+Math.floor((a-g)/n.slidesPerGroup)}if(f>=s.length&&(f=s.length-1),a===r&&!e.params.loop){f!==o&&(e.snapIndex=f,e.emit("snapIndexChange"));return}if(a===r&&e.params.loop&&e.virtual&&e.params.virtual.enabled){e.realIndex=d(a);return}const p=e.grid&&n.grid&&n.grid.rows>1;let h;if(e.virtual&&n.virtual.enabled&&n.loop)h=d(a);else if(p){const g=e.slides.filter(v=>v.column===a)[0];let S=parseInt(g.getAttribute("data-swiper-slide-index"),10);Number.isNaN(S)&&(S=Math.max(e.slides.indexOf(g),0)),h=Math.floor(S/n.grid.rows)}else if(e.slides[a]){const g=e.slides[a].getAttribute("data-swiper-slide-index");g?h=parseInt(g,10):h=a}else h=a;Object.assign(e,{previousSnapIndex:o,snapIndex:f,previousRealIndex:l,realIndex:h,previousIndex:r,activeIndex:a}),e.initialized&&pe(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(l!==h&&e.emit("realIndexChange"),e.emit("slideChange"))}function ot(t,e){const i=this,s=i.params;let n=t.closest(`.${s.slideClass}, swiper-slide`);!n&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach(o=>{!n&&o.matches&&o.matches(`.${s.slideClass}, swiper-slide`)&&(n=o)});let r=!1,l;if(n){for(let o=0;o<i.slides.length;o+=1)if(i.slides[o]===n){r=!0,l=o;break}}if(n&&r)i.clickedSlide=n,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=l;else{i.clickedSlide=void 0,i.clickedIndex=void 0;return}s.slideToClickedSlide&&i.clickedIndex!==void 0&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}var dt={updateSize:Qe,updateSlides:et,updateAutoHeight:tt,updateSlidesOffset:it,updateSlidesProgress:st,updateProgress:rt,updateSlidesClasses:nt,updateActiveIndex:lt,updateClickedSlide:ot};function ct(t){t===void 0&&(t=this.isHorizontal()?"x":"y");const e=this,{params:i,rtlTranslate:s,translate:n,wrapperEl:r}=e;if(i.virtualTranslate)return s?-n:n;if(i.cssMode)return n;let l=Re(r,t);return l+=e.cssOverflowAdjustment(),s&&(l=-l),l||0}function ut(t,e){const i=this,{rtlTranslate:s,params:n,wrapperEl:r,progress:l}=i;let o=0,a=0;const f=0;i.isHorizontal()?o=s?-t:t:a=t,n.roundLengths&&(o=Math.floor(o),a=Math.floor(a)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:a,n.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-o:-a:n.virtualTranslate||(i.isHorizontal()?o-=i.cssOverflowAdjustment():a-=i.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${a}px, ${f}px)`);let d;const p=i.maxTranslate()-i.minTranslate();p===0?d=0:d=(t-i.minTranslate())/p,d!==l&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)}function ft(){return-this.snapGrid[0]}function pt(){return-this.snapGrid[this.snapGrid.length-1]}function mt(t,e,i,s,n){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),s===void 0&&(s=!0);const r=this,{params:l,wrapperEl:o}=r;if(r.animating&&l.preventInteractionOnTransition)return!1;const a=r.minTranslate(),f=r.maxTranslate();let d;if(s&&t>a?d=a:s&&t<f?d=f:d=t,r.updateProgress(d),l.cssMode){const p=r.isHorizontal();if(e===0)o[p?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return xe({swiper:r,targetPosition:-d,side:p?"left":"top"}),!0;o.scrollTo({[p?"left":"top"]:-d,behavior:"smooth"})}return!0}return e===0?(r.setTransition(0),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,n),r.emit("transitionEnd"))):(r.setTransition(e),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,n),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(h){!r||r.destroyed||h.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}var ht={getTranslate:ct,setTranslate:ut,minTranslate:ft,maxTranslate:pt,translateTo:mt};function gt(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=t===0?"0ms":""),i.emit("setTransition",t,e)}function Pe(t){let{swiper:e,runCallbacks:i,direction:s,step:n}=t;const{activeIndex:r,previousIndex:l}=e;let o=s;if(o||(r>l?o="next":r<l?o="prev":o="reset"),e.emit(`transition${n}`),i&&r!==l){if(o==="reset"){e.emit(`slideResetTransition${n}`);return}e.emit(`slideChangeTransition${n}`),o==="next"?e.emit(`slideNextTransition${n}`):e.emit(`slidePrevTransition${n}`)}}function vt(t,e){t===void 0&&(t=!0);const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),Pe({swiper:i,runCallbacks:t,direction:e,step:"Start"}))}function wt(t,e){t===void 0&&(t=!0);const i=this,{params:s}=i;i.animating=!1,!s.cssMode&&(i.setTransition(0),Pe({swiper:i,runCallbacks:t,direction:e,step:"End"}))}var St={setTransition:gt,transitionStart:vt,transitionEnd:wt};function bt(t,e,i,s,n){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const r=this;let l=t;l<0&&(l=0);const{params:o,snapGrid:a,slidesGrid:f,previousIndex:d,activeIndex:p,rtlTranslate:h,wrapperEl:g,enabled:S}=r;if(r.animating&&o.preventInteractionOnTransition||!S&&!s&&!n)return!1;const v=Math.min(r.params.slidesPerGroupSkip,l);let b=v+Math.floor((l-v)/r.params.slidesPerGroup);b>=a.length&&(b=a.length-1);const m=-a[b];if(o.normalizeSlideIndex)for(let u=0;u<f.length;u+=1){const w=-Math.floor(m*100),y=Math.floor(f[u]*100),P=Math.floor(f[u+1]*100);typeof f[u+1]<"u"?w>=y&&w<P-(P-y)/2?l=u:w>=y&&w<P&&(l=u+1):w>=y&&(l=u)}if(r.initialized&&l!==p&&(!r.allowSlideNext&&(h?m>r.translate&&m>r.minTranslate():m<r.translate&&m<r.minTranslate())||!r.allowSlidePrev&&m>r.translate&&m>r.maxTranslate()&&(p||0)!==l))return!1;l!==(d||0)&&i&&r.emit("beforeSlideChangeStart"),r.updateProgress(m);let c;if(l>p?c="next":l<p?c="prev":c="reset",h&&-m===r.translate||!h&&m===r.translate)return r.updateActiveIndex(l),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),o.effect!=="slide"&&r.setTranslate(m),c!=="reset"&&(r.transitionStart(i,c),r.transitionEnd(i,c)),!1;if(o.cssMode){const u=r.isHorizontal(),w=h?m:-m;if(e===0){const y=r.virtual&&r.params.virtual.enabled;y&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),y&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{g[u?"scrollLeft":"scrollTop"]=w})):g[u?"scrollLeft":"scrollTop"]=w,y&&requestAnimationFrame(()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1})}else{if(!r.support.smoothScroll)return xe({swiper:r,targetPosition:w,side:u?"left":"top"}),!0;g.scrollTo({[u?"left":"top"]:w,behavior:"smooth"})}return!0}return r.setTransition(e),r.setTranslate(m),r.updateActiveIndex(l),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,s),r.transitionStart(i,c),e===0?r.transitionEnd(i,c):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(w){!r||r.destroyed||w.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,c))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0}function yt(t,e,i,s){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const n=this,r=n.grid&&n.params.grid&&n.params.grid.rows>1;let l=t;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)l=l+n.virtual.slidesBefore;else{let o;if(r){const h=l*n.params.grid.rows;o=n.slides.filter(g=>g.getAttribute("data-swiper-slide-index")*1===h)[0].column}else o=n.getSlideIndexByData(l);const a=r?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:f}=n.params;let d=n.params.slidesPerView;d==="auto"?d=n.slidesPerViewDynamic():(d=Math.ceil(parseFloat(n.params.slidesPerView,10)),f&&d%2===0&&(d=d+1));let p=a-o<d;if(f&&(p=p||o<Math.ceil(d/2)),p){const h=f?o<n.activeIndex?"prev":"next":o-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:h,slideTo:!0,activeSlideIndex:h==="next"?o+1:o-a+1,slideRealIndex:h==="next"?n.realIndex:void 0})}if(r){const h=l*n.params.grid.rows;l=n.slides.filter(g=>g.getAttribute("data-swiper-slide-index")*1===h)[0].column}else l=n.getSlideIndexByData(l)}return requestAnimationFrame(()=>{n.slideTo(l,e,i,s)}),n}function Tt(t,e,i){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0);const s=this,{enabled:n,params:r,animating:l}=s;if(!n)return s;let o=r.slidesPerGroup;r.slidesPerView==="auto"&&r.slidesPerGroup===1&&r.slidesPerGroupAuto&&(o=Math.max(s.slidesPerViewDynamic("current",!0),1));const a=s.activeIndex<r.slidesPerGroupSkip?1:o,f=s.virtual&&r.virtual.enabled;if(r.loop){if(l&&!f&&r.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&r.cssMode)return requestAnimationFrame(()=>{s.slideTo(s.activeIndex+a,t,e,i)}),!0}return r.rewind&&s.isEnd?s.slideTo(0,t,e,i):s.slideTo(s.activeIndex+a,t,e,i)}function xt(t,e,i){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0);const s=this,{params:n,snapGrid:r,slidesGrid:l,rtlTranslate:o,enabled:a,animating:f}=s;if(!a)return s;const d=s.virtual&&n.virtual.enabled;if(n.loop){if(f&&!d&&n.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}const p=o?s.translate:-s.translate;function h(m){return m<0?-Math.floor(Math.abs(m)):Math.floor(m)}const g=h(p),S=r.map(m=>h(m));let v=r[S.indexOf(g)-1];if(typeof v>"u"&&n.cssMode){let m;r.forEach((c,u)=>{g>=c&&(m=u)}),typeof m<"u"&&(v=r[m>0?m-1:m])}let b=0;if(typeof v<"u"&&(b=l.indexOf(v),b<0&&(b=s.activeIndex-1),n.slidesPerView==="auto"&&n.slidesPerGroup===1&&n.slidesPerGroupAuto&&(b=b-s.slidesPerViewDynamic("previous",!0)+1,b=Math.max(b,0))),n.rewind&&s.isBeginning){const m=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(m,t,e,i)}else if(n.loop&&s.activeIndex===0&&n.cssMode)return requestAnimationFrame(()=>{s.slideTo(b,t,e,i)}),!0;return s.slideTo(b,t,e,i)}function Et(t,e,i){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0);const s=this;return s.slideTo(s.activeIndex,t,e,i)}function Ct(t,e,i,s){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0),s===void 0&&(s=.5);const n=this;let r=n.activeIndex;const l=Math.min(n.params.slidesPerGroupSkip,r),o=l+Math.floor((r-l)/n.params.slidesPerGroup),a=n.rtlTranslate?n.translate:-n.translate;if(a>=n.snapGrid[o]){const f=n.snapGrid[o],d=n.snapGrid[o+1];a-f>(d-f)*s&&(r+=n.params.slidesPerGroup)}else{const f=n.snapGrid[o-1],d=n.snapGrid[o];a-f<=(d-f)*s&&(r-=n.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,n.slidesGrid.length-1),n.slideTo(r,t,e,i)}function Pt(){const t=this,{params:e,slidesEl:i}=t,s=e.slidesPerView==="auto"?t.slidesPerViewDynamic():e.slidesPerView;let n=t.clickedIndex,r;const l=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;r=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=t.getSlideIndex(F(i,`${l}[data-swiper-slide-index="${r}"]`)[0]),ue(()=>{t.slideTo(n)})):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=t.getSlideIndex(F(i,`${l}[data-swiper-slide-index="${r}"]`)[0]),ue(()=>{t.slideTo(n)})):t.slideTo(n)}else t.slideTo(n)}var Mt={slideTo:bt,slideToLoop:yt,slideNext:Tt,slidePrev:xt,slideReset:Et,slideToClosest:Ct,slideToClickedSlide:Pt};function Lt(t){const e=this,{params:i,slidesEl:s}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const n=()=>{F(s,`.${i.slideClass}, swiper-slide`).forEach((p,h)=>{p.setAttribute("data-swiper-slide-index",h)})},r=e.grid&&i.grid&&i.grid.rows>1,l=i.slidesPerGroup*(r?i.grid.rows:1),o=e.slides.length%l!==0,a=r&&e.slides.length%i.grid.rows!==0,f=d=>{for(let p=0;p<d;p+=1){const h=e.isElement?ie("swiper-slide",[i.slideBlankClass]):ie("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(h)}};if(o){if(i.loopAddBlankSlides){const d=l-e.slides.length%l;f(d),e.recalcSlides(),e.updateSlides()}else te("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(a){if(i.loopAddBlankSlides){const d=i.grid.rows-e.slides.length%i.grid.rows;f(d),e.recalcSlides(),e.updateSlides()}else te("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})}function It(t){let{slideRealIndex:e,slideTo:i=!0,direction:s,setTranslate:n,activeSlideIndex:r,byController:l,byMousewheel:o}=t===void 0?{}:t;const a=this;if(!a.params.loop)return;a.emit("beforeLoopFix");const{slides:f,allowSlidePrev:d,allowSlideNext:p,slidesEl:h,params:g}=a,{centeredSlides:S}=g;if(a.allowSlidePrev=!0,a.allowSlideNext=!0,a.virtual&&g.virtual.enabled){i&&(!g.centeredSlides&&a.snapIndex===0?a.slideTo(a.virtual.slides.length,0,!1,!0):g.centeredSlides&&a.snapIndex<g.slidesPerView?a.slideTo(a.virtual.slides.length+a.snapIndex,0,!1,!0):a.snapIndex===a.snapGrid.length-1&&a.slideTo(a.virtual.slidesBefore,0,!1,!0)),a.allowSlidePrev=d,a.allowSlideNext=p,a.emit("loopFix");return}let v=g.slidesPerView;v==="auto"?v=a.slidesPerViewDynamic():(v=Math.ceil(parseFloat(g.slidesPerView,10)),S&&v%2===0&&(v=v+1));const b=g.slidesPerGroupAuto?v:g.slidesPerGroup;let m=b;m%b!==0&&(m+=b-m%b),m+=g.loopAdditionalSlides,a.loopedSlides=m;const c=a.grid&&g.grid&&g.grid.rows>1;f.length<v+m?te("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):c&&g.grid.fill==="row"&&te("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const u=[],w=[];let y=a.activeIndex;typeof r>"u"?r=a.getSlideIndex(f.filter(E=>E.classList.contains(g.slideActiveClass))[0]):y=r;const P=s==="next"||!s,z=s==="prev"||!s;let L=0,x=0;const T=c?Math.ceil(f.length/g.grid.rows):f.length,M=(c?f[r].column:r)+(S&&typeof n>"u"?-v/2+.5:0);if(M<m){L=Math.max(m-M,b);for(let E=0;E<m-M;E+=1){const I=E-Math.floor(E/T)*T;if(c){const O=T-I-1;for(let B=f.length-1;B>=0;B-=1)f[B].column===O&&u.push(B)}else u.push(T-I-1)}}else if(M+v>T-m){x=Math.max(M-(T-m*2),b);for(let E=0;E<x;E+=1){const I=E-Math.floor(E/T)*T;c?f.forEach((O,B)=>{O.column===I&&w.push(B)}):w.push(I)}}if(a.__preventObserver__=!0,requestAnimationFrame(()=>{a.__preventObserver__=!1}),z&&u.forEach(E=>{f[E].swiperLoopMoveDOM=!0,h.prepend(f[E]),f[E].swiperLoopMoveDOM=!1}),P&&w.forEach(E=>{f[E].swiperLoopMoveDOM=!0,h.append(f[E]),f[E].swiperLoopMoveDOM=!1}),a.recalcSlides(),g.slidesPerView==="auto"?a.updateSlides():c&&(u.length>0&&z||w.length>0&&P)&&a.slides.forEach((E,I)=>{a.grid.updateSlide(I,E,a.slides)}),g.watchSlidesProgress&&a.updateSlidesOffset(),i){if(u.length>0&&z){if(typeof e>"u"){const E=a.slidesGrid[y],O=a.slidesGrid[y+L]-E;o?a.setTranslate(a.translate-O):(a.slideTo(y+L,0,!1,!0),n&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-O,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-O))}else if(n){const E=c?u.length/g.grid.rows:u.length;a.slideTo(a.activeIndex+E,0,!1,!0),a.touchEventsData.currentTranslate=a.translate}}else if(w.length>0&&P)if(typeof e>"u"){const E=a.slidesGrid[y],O=a.slidesGrid[y-x]-E;o?a.setTranslate(a.translate-O):(a.slideTo(y-x,0,!1,!0),n&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-O,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-O))}else{const E=c?w.length/g.grid.rows:w.length;a.slideTo(a.activeIndex-E,0,!1,!0)}}if(a.allowSlidePrev=d,a.allowSlideNext=p,a.controller&&a.controller.control&&!l){const E={slideRealIndex:e,direction:s,setTranslate:n,activeSlideIndex:r,byController:!0};Array.isArray(a.controller.control)?a.controller.control.forEach(I=>{!I.destroyed&&I.params.loop&&I.loopFix({...E,slideTo:I.params.slidesPerView===g.slidesPerView?i:!1})}):a.controller.control instanceof a.constructor&&a.controller.control.params.loop&&a.controller.control.loopFix({...E,slideTo:a.controller.control.params.slidesPerView===g.slidesPerView?i:!1})}a.emit("loopFix")}function Ot(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const s=[];t.slides.forEach(n=>{const r=typeof n.swiperSlideIndex>"u"?n.getAttribute("data-swiper-slide-index")*1:n.swiperSlideIndex;s[r]=n}),t.slides.forEach(n=>{n.removeAttribute("data-swiper-slide-index")}),s.forEach(n=>{i.append(n)}),t.recalcSlides(),t.slideTo(t.realIndex,0)}var At={loopCreate:Lt,loopFix:It,loopDestroy:Ot};function zt(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i=e.params.touchEventsTarget==="container"?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1})}function Dt(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t[t.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1}))}var _t={setGrabCursor:zt,unsetGrabCursor:Dt};function Gt(t,e){e===void 0&&(e=this);function i(s){if(!s||s===k()||s===V())return null;s.assignedSlot&&(s=s.assignedSlot);const n=s.closest(t);return!n&&!s.getRootNode?null:n||i(s.getRootNode().host)}return i(e)}function we(t,e,i){const s=V(),{params:n}=t,r=n.edgeSwipeDetection,l=n.edgeSwipeThreshold;return r&&(i<=l||i>=s.innerWidth-l)?r==="prevent"?(e.preventDefault(),!0):!1:!0}function Bt(t){const e=this,i=k();let s=t;s.originalEvent&&(s=s.originalEvent);const n=e.touchEventsData;if(s.type==="pointerdown"){if(n.pointerId!==null&&n.pointerId!==s.pointerId)return;n.pointerId=s.pointerId}else s.type==="touchstart"&&s.targetTouches.length===1&&(n.touchId=s.targetTouches[0].identifier);if(s.type==="touchstart"){we(e,s,s.targetTouches[0].pageX);return}const{params:r,touches:l,enabled:o}=e;if(!o||!r.simulateTouch&&s.pointerType==="mouse"||e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let a=s.target;if(r.touchEventsTarget==="wrapper"&&!e.wrapperEl.contains(a)||"which"in s&&s.which===3||"button"in s&&s.button>0||n.isTouched&&n.isMoved)return;const f=!!r.noSwipingClass&&r.noSwipingClass!=="",d=s.composedPath?s.composedPath():s.path;f&&s.target&&s.target.shadowRoot&&d&&(a=d[0]);const p=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,h=!!(s.target&&s.target.shadowRoot);if(r.noSwiping&&(h?Gt(p,a):a.closest(p))){e.allowClick=!0;return}if(r.swipeHandler&&!a.closest(r.swipeHandler))return;l.currentX=s.pageX,l.currentY=s.pageY;const g=l.currentX,S=l.currentY;if(!we(e,s,g))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=g,l.startY=S,n.touchStartTime=ee(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1);let v=!0;a.matches(n.focusableElements)&&(v=!1,a.nodeName==="SELECT"&&(n.isTouched=!1)),i.activeElement&&i.activeElement.matches(n.focusableElements)&&i.activeElement!==a&&i.activeElement.blur();const b=v&&e.allowTouchMove&&r.touchStartPreventDefault;(r.touchStartForcePreventDefault||b)&&!a.isContentEditable&&s.preventDefault(),r.freeMode&&r.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",s)}function $t(t){const e=k(),i=this,s=i.touchEventsData,{params:n,touches:r,rtlTranslate:l,enabled:o}=i;if(!o||!n.simulateTouch&&t.pointerType==="mouse")return;let a=t;if(a.originalEvent&&(a=a.originalEvent),a.type==="pointermove"&&(s.touchId!==null||a.pointerId!==s.pointerId))return;let f;if(a.type==="touchmove"){if(f=[...a.changedTouches].filter(P=>P.identifier===s.touchId)[0],!f||f.identifier!==s.touchId)return}else f=a;if(!s.isTouched){s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",a);return}const d=f.pageX,p=f.pageY;if(a.preventedByNestedSwiper){r.startX=d,r.startY=p;return}if(!i.allowTouchMove){a.target.matches(s.focusableElements)||(i.allowClick=!1),s.isTouched&&(Object.assign(r,{startX:d,startY:p,currentX:d,currentY:p}),s.touchStartTime=ee());return}if(n.touchReleaseOnEdges&&!n.loop){if(i.isVertical()){if(p<r.startY&&i.translate<=i.maxTranslate()||p>r.startY&&i.translate>=i.minTranslate()){s.isTouched=!1,s.isMoved=!1;return}}else if(d<r.startX&&i.translate<=i.maxTranslate()||d>r.startX&&i.translate>=i.minTranslate())return}if(e.activeElement&&a.target===e.activeElement&&a.target.matches(s.focusableElements)){s.isMoved=!0,i.allowClick=!1;return}s.allowTouchCallbacks&&i.emit("touchMove",a),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=d,r.currentY=p;const h=r.currentX-r.startX,g=r.currentY-r.startY;if(i.params.threshold&&Math.sqrt(h**2+g**2)<i.params.threshold)return;if(typeof s.isScrolling>"u"){let P;i.isHorizontal()&&r.currentY===r.startY||i.isVertical()&&r.currentX===r.startX?s.isScrolling=!1:h*h+g*g>=25&&(P=Math.atan2(Math.abs(g),Math.abs(h))*180/Math.PI,s.isScrolling=i.isHorizontal()?P>n.touchAngle:90-P>n.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",a),typeof s.startMoving>"u"&&(r.currentX!==r.startX||r.currentY!==r.startY)&&(s.startMoving=!0),s.isScrolling){s.isTouched=!1;return}if(!s.startMoving)return;i.allowClick=!1,!n.cssMode&&a.cancelable&&a.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&a.stopPropagation();let S=i.isHorizontal()?h:g,v=i.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;n.oneWayMovement&&(S=Math.abs(S)*(l?1:-1),v=Math.abs(v)*(l?1:-1)),r.diff=S,S*=n.touchRatio,l&&(S=-S,v=-v);const b=i.touchesDirection;i.swipeDirection=S>0?"prev":"next",i.touchesDirection=v>0?"prev":"next";const m=i.params.loop&&!n.cssMode,c=i.touchesDirection==="next"&&i.allowSlideNext||i.touchesDirection==="prev"&&i.allowSlidePrev;if(!s.isMoved){if(m&&c&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const P=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});i.wrapperEl.dispatchEvent(P)}s.allowMomentumBounce=!1,n.grabCursor&&(i.allowSlideNext===!0||i.allowSlidePrev===!0)&&i.setGrabCursor(!0),i.emit("sliderFirstMove",a)}let u;if(new Date().getTime(),s.isMoved&&s.allowThresholdMove&&b!==i.touchesDirection&&m&&c&&Math.abs(S)>=1){Object.assign(r,{startX:d,startY:p,currentX:d,currentY:p,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,s.startTranslate=s.currentTranslate;return}i.emit("sliderMove",a),s.isMoved=!0,s.currentTranslate=S+s.startTranslate;let w=!0,y=n.resistanceRatio;if(n.touchReleaseOnEdges&&(y=0),S>0?(m&&c&&!u&&s.allowThresholdMove&&s.currentTranslate>(n.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(w=!1,n.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+S)**y))):S<0&&(m&&c&&!u&&s.allowThresholdMove&&s.currentTranslate<(n.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-(n.slidesPerView==="auto"?i.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(w=!1,n.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-S)**y))),w&&(a.preventedByNestedSwiper=!0),!i.allowSlideNext&&i.swipeDirection==="next"&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&i.swipeDirection==="prev"&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&!i.allowSlideNext&&(s.currentTranslate=s.startTranslate),n.threshold>0)if(Math.abs(S)>n.threshold||s.allowThresholdMove){if(!s.allowThresholdMove){s.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,s.currentTranslate=s.startTranslate,r.diff=i.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY;return}}else{s.currentTranslate=s.startTranslate;return}!n.followFinger||n.cssMode||((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function Nt(t){const e=this,i=e.touchEventsData;let s=t;s.originalEvent&&(s=s.originalEvent);let n;if(s.type==="touchend"||s.type==="touchcancel"){if(n=[...s.changedTouches].filter(y=>y.identifier===i.touchId)[0],!n||n.identifier!==i.touchId)return}else{if(i.touchId!==null||s.pointerId!==i.pointerId)return;n=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)&&!(["pointercancel","contextmenu"].includes(s.type)&&(e.browser.isSafari||e.browser.isWebView)))return;i.pointerId=null,i.touchId=null;const{params:l,touches:o,rtlTranslate:a,slidesGrid:f,enabled:d}=e;if(!d||!l.simulateTouch&&s.pointerType==="mouse")return;if(i.allowTouchCallbacks&&e.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched){i.isMoved&&l.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,i.startMoving=!1;return}l.grabCursor&&i.isMoved&&i.isTouched&&(e.allowSlideNext===!0||e.allowSlidePrev===!0)&&e.setGrabCursor(!1);const p=ee(),h=p-i.touchStartTime;if(e.allowClick){const y=s.path||s.composedPath&&s.composedPath();e.updateClickedSlide(y&&y[0]||s.target,y),e.emit("tap click",s),h<300&&p-i.lastClickTime<300&&e.emit("doubleTap doubleClick",s)}if(i.lastClickTime=ee(),ue(()=>{e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||o.diff===0&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset){i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;return}i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;let g;if(l.followFinger?g=a?e.translate:-e.translate:g=-i.currentTranslate,l.cssMode)return;if(l.freeMode&&l.freeMode.enabled){e.freeMode.onTouchEnd({currentPos:g});return}const S=g>=-e.maxTranslate()&&!e.params.loop;let v=0,b=e.slidesSizesGrid[0];for(let y=0;y<f.length;y+=y<l.slidesPerGroupSkip?1:l.slidesPerGroup){const P=y<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;typeof f[y+P]<"u"?(S||g>=f[y]&&g<f[y+P])&&(v=y,b=f[y+P]-f[y]):(S||g>=f[y])&&(v=y,b=f[f.length-1]-f[f.length-2])}let m=null,c=null;l.rewind&&(e.isBeginning?c=l.virtual&&l.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const u=(g-f[v])/b,w=v<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;if(h>l.longSwipesMs){if(!l.longSwipes){e.slideTo(e.activeIndex);return}e.swipeDirection==="next"&&(u>=l.longSwipesRatio?e.slideTo(l.rewind&&e.isEnd?m:v+w):e.slideTo(v)),e.swipeDirection==="prev"&&(u>1-l.longSwipesRatio?e.slideTo(v+w):c!==null&&u<0&&Math.abs(u)>l.longSwipesRatio?e.slideTo(c):e.slideTo(v))}else{if(!l.shortSwipes){e.slideTo(e.activeIndex);return}e.navigation&&(s.target===e.navigation.nextEl||s.target===e.navigation.prevEl)?s.target===e.navigation.nextEl?e.slideTo(v+w):e.slideTo(v):(e.swipeDirection==="next"&&e.slideTo(m!==null?m:v+w),e.swipeDirection==="prev"&&e.slideTo(c!==null?c:v))}}function Se(){const t=this,{params:e,el:i}=t;if(i&&i.offsetWidth===0)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:n,snapGrid:r}=t,l=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const o=l&&e.loop;(e.slidesPerView==="auto"||e.slidesPerView>1)&&t.isEnd&&!t.isBeginning&&!t.params.centeredSlides&&!o?t.slideTo(t.slides.length-1,0,!1,!0):t.params.loop&&!l?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout(()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()},500)),t.allowSlidePrev=n,t.allowSlideNext=s,t.params.watchOverflow&&r!==t.snapGrid&&t.checkOverflow()}function Vt(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Ft(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:s}=t;if(!s)return;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,t.translate===0&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();let n;const r=t.maxTranslate()-t.minTranslate();r===0?n=0:n=(t.translate-t.minTranslate())/r,n!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function Rt(t){const e=this;Q(e,t.target),!(e.params.cssMode||e.params.slidesPerView!=="auto"&&!e.params.autoHeight)&&e.update()}function kt(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const Me=(t,e)=>{const i=k(),{params:s,el:n,wrapperEl:r,device:l}=t,o=!!s.nested,a=e==="on"?"addEventListener":"removeEventListener",f=e;i[a]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:o}),n[a]("touchstart",t.onTouchStart,{passive:!1}),n[a]("pointerdown",t.onTouchStart,{passive:!1}),i[a]("touchmove",t.onTouchMove,{passive:!1,capture:o}),i[a]("pointermove",t.onTouchMove,{passive:!1,capture:o}),i[a]("touchend",t.onTouchEnd,{passive:!0}),i[a]("pointerup",t.onTouchEnd,{passive:!0}),i[a]("pointercancel",t.onTouchEnd,{passive:!0}),i[a]("touchcancel",t.onTouchEnd,{passive:!0}),i[a]("pointerout",t.onTouchEnd,{passive:!0}),i[a]("pointerleave",t.onTouchEnd,{passive:!0}),i[a]("contextmenu",t.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&n[a]("click",t.onClick,!0),s.cssMode&&r[a]("scroll",t.onScroll),s.updateOnWindowResize?t[f](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",Se,!0):t[f]("observerUpdate",Se,!0),n[a]("load",t.onLoad,{capture:!0})};function Ht(){const t=this,{params:e}=t;t.onTouchStart=Bt.bind(t),t.onTouchMove=$t.bind(t),t.onTouchEnd=Nt.bind(t),t.onDocumentTouchStart=kt.bind(t),e.cssMode&&(t.onScroll=Ft.bind(t)),t.onClick=Vt.bind(t),t.onLoad=Rt.bind(t),Me(t,"on")}function jt(){Me(this,"off")}var Wt={attachEvents:Ht,detachEvents:jt};const be=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;function qt(){const t=this,{realIndex:e,initialized:i,params:s,el:n}=t,r=s.breakpoints;if(!r||r&&Object.keys(r).length===0)return;const l=t.getBreakpoint(r,t.params.breakpointsBase,t.el);if(!l||t.currentBreakpoint===l)return;const a=(l in r?r[l]:void 0)||t.originalParams,f=be(t,s),d=be(t,a),p=s.enabled;f&&!d?(n.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),t.emitContainerClasses()):!f&&d&&(n.classList.add(`${s.containerModifierClass}grid`),(a.grid.fill&&a.grid.fill==="column"||!a.grid.fill&&s.grid.fill==="column")&&n.classList.add(`${s.containerModifierClass}grid-column`),t.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach(m=>{if(typeof a[m]>"u")return;const c=s[m]&&s[m].enabled,u=a[m]&&a[m].enabled;c&&!u&&t[m].disable(),!c&&u&&t[m].enable()});const h=a.direction&&a.direction!==s.direction,g=s.loop&&(a.slidesPerView!==s.slidesPerView||h),S=s.loop;h&&i&&t.changeDirection(),N(t.params,a);const v=t.params.enabled,b=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),p&&!v?t.disable():!p&&v&&t.enable(),t.currentBreakpoint=l,t.emit("_beforeBreakpoint",a),i&&(g?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!S&&b?(t.loopCreate(e),t.updateSlides()):S&&!b&&t.loopDestroy()),t.emit("breakpoint",a)}function Yt(t,e,i){if(e===void 0&&(e="window"),!t||e==="container"&&!i)return;let s=!1;const n=V(),r=e==="window"?n.innerHeight:i.clientHeight,l=Object.keys(t).map(o=>{if(typeof o=="string"&&o.indexOf("@")===0){const a=parseFloat(o.substr(1));return{value:r*a,point:o}}return{value:o,point:o}});l.sort((o,a)=>parseInt(o.value,10)-parseInt(a.value,10));for(let o=0;o<l.length;o+=1){const{point:a,value:f}=l[o];e==="window"?n.matchMedia(`(min-width: ${f}px)`).matches&&(s=a):f<=i.clientWidth&&(s=a)}return s||"max"}var Xt={setBreakpoint:qt,getBreakpoint:Yt};function Ut(t,e){const i=[];return t.forEach(s=>{typeof s=="object"?Object.keys(s).forEach(n=>{s[n]&&i.push(e+n)}):typeof s=="string"&&i.push(e+s)}),i}function Kt(){const t=this,{classNames:e,params:i,rtl:s,el:n,device:r}=t,l=Ut(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&i.grid.fill==="column"},{android:r.android},{ios:r.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...l),n.classList.add(...e),t.emitContainerClasses()}function Zt(){const t=this,{el:e,classNames:i}=t;e.classList.remove(...i),t.emitContainerClasses()}var Jt={addClasses:Kt,removeClasses:Zt};function Qt(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:s}=i;if(s){const n=t.slides.length-1,r=t.slidesGrid[n]+t.slidesSizesGrid[n]+s*2;t.isLocked=t.size>r}else t.isLocked=t.snapGrid.length===1;i.allowSlideNext===!0&&(t.allowSlideNext=!t.isLocked),i.allowSlidePrev===!0&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}var ei={checkOverflow:Qt},me={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function ti(t,e){return function(s){s===void 0&&(s={});const n=Object.keys(s)[0],r=s[n];if(typeof r!="object"||r===null){N(e,s);return}if(t[n]===!0&&(t[n]={enabled:!0}),n==="navigation"&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),!(n in t&&"enabled"in r)){N(e,s);return}typeof t[n]=="object"&&!("enabled"in t[n])&&(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),N(e,s)}}const de={eventsEmitter:Je,update:dt,translate:ht,transition:St,slide:Mt,loop:At,grabCursor:_t,events:Wt,breakpoints:Xt,checkOverflow:ei,classes:Jt},ce={};let ge=class R{constructor(){let e,i;for(var s=arguments.length,n=new Array(s),r=0;r<s;r++)n[r]=arguments[r];n.length===1&&n[0].constructor&&Object.prototype.toString.call(n[0]).slice(8,-1)==="Object"?i=n[0]:[e,i]=n,i||(i={}),i=N({},i),e&&!i.el&&(i.el=e);const l=k();if(i.el&&typeof i.el=="string"&&l.querySelectorAll(i.el).length>1){const d=[];return l.querySelectorAll(i.el).forEach(p=>{const h=N({},i,{el:p});d.push(new R(h))}),d}const o=this;o.__swiper__=!0,o.support=Ce(),o.device=Ye({userAgent:i.userAgent}),o.browser=Ue(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],i.modules&&Array.isArray(i.modules)&&o.modules.push(...i.modules);const a={};o.modules.forEach(d=>{d({params:i,swiper:o,extendParams:ti(i,a),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})});const f=N({},me,a);return o.params=N({},f,ce,i),o.originalParams=N({},o.params),o.passedParams=N({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach(d=>{o.on(d,o.params.on[d])}),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return o.params.direction==="horizontal"},isVertical(){return o.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:i,params:s}=this,n=F(i,`.${s.slideClass}, swiper-slide`),r=se(n[0]);return se(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter(i=>i.getAttribute("data-swiper-slide-index")*1===e)[0])}recalcSlides(){const e=this,{slidesEl:i,params:s}=e;e.slides=F(i,`.${s.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,i){const s=this;e=Math.min(Math.max(e,0),1);const n=s.minTranslate(),l=(s.maxTranslate()-n)*e+n;s.translateTo(l,typeof i>"u"?0:i),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=e.el.className.split(" ").filter(s=>s.indexOf("swiper")===0||s.indexOf(e.params.containerModifierClass)===0);e.emit("_containerClasses",i.join(" "))}getSlideClasses(e){const i=this;return i.destroyed?"":e.className.split(" ").filter(s=>s.indexOf("swiper-slide")===0||s.indexOf(i.params.slideClass)===0).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=[];e.slides.forEach(s=>{const n=e.getSlideClasses(s);i.push({slideEl:s,classNames:n}),e.emit("_slideClass",s,n)}),e.emit("_slideClasses",i)}slidesPerViewDynamic(e,i){e===void 0&&(e="current"),i===void 0&&(i=!1);const s=this,{params:n,slides:r,slidesGrid:l,slidesSizesGrid:o,size:a,activeIndex:f}=s;let d=1;if(typeof n.slidesPerView=="number")return n.slidesPerView;if(n.centeredSlides){let p=r[f]?r[f].swiperSlideSize:0,h;for(let g=f+1;g<r.length;g+=1)r[g]&&!h&&(p+=r[g].swiperSlideSize,d+=1,p>a&&(h=!0));for(let g=f-1;g>=0;g-=1)r[g]&&!h&&(p+=r[g].swiperSlideSize,d+=1,p>a&&(h=!0))}else if(e==="current")for(let p=f+1;p<r.length;p+=1)(i?l[p]+o[p]-l[f]<a:l[p]-l[f]<a)&&(d+=1);else for(let p=f-1;p>=0;p-=1)l[f]-l[p]<a&&(d+=1);return d}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:i,params:s}=e;s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(l=>{l.complete&&Q(e,l)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses();function n(){const l=e.rtlTranslate?e.translate*-1:e.translate,o=Math.min(Math.max(l,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.freeMode&&s.freeMode.enabled&&!s.cssMode)n(),s.autoHeight&&e.updateAutoHeight();else{if((s.slidesPerView==="auto"||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const l=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(l.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||n()}s.watchOverflow&&i!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,i){i===void 0&&(i=!0);const s=this,n=s.params.direction;return e||(e=n==="horizontal"?"vertical":"horizontal"),e===n||e!=="horizontal"&&e!=="vertical"||(s.el.classList.remove(`${s.params.containerModifierClass}${n}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach(r=>{e==="vertical"?r.style.width="":r.style.height=""}),s.emit("changeDirection"),i&&s.update()),s}changeLanguageDirection(e){const i=this;i.rtl&&e==="rtl"||!i.rtl&&e==="ltr"||(i.rtl=e==="rtl",i.rtlTranslate=i.params.direction==="horizontal"&&i.rtl,i.rtl?(i.el.classList.add(`${i.params.containerModifierClass}rtl`),i.el.dir="rtl"):(i.el.classList.remove(`${i.params.containerModifierClass}rtl`),i.el.dir="ltr"),i.update())}mount(e){const i=this;if(i.mounted)return!0;let s=e||i.params.el;if(typeof s=="string"&&(s=document.querySelector(s)),!s)return!1;s.swiper=i,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName==="SWIPER-CONTAINER"&&(i.isElement=!0);const n=()=>`.${(i.params.wrapperClass||"").trim().split(" ").join(".")}`;let l=(()=>s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(n()):F(s,n())[0])();return!l&&i.params.createElements&&(l=ie("div",i.params.wrapperClass),s.append(l),F(s,`.${i.params.slideClass}`).forEach(o=>{l.append(o)})),Object.assign(i,{el:s,wrapperEl:l,slidesEl:i.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:l,hostEl:i.isElement?s.parentNode.host:s,mounted:!0,rtl:s.dir.toLowerCase()==="rtl"||H(s,"direction")==="rtl",rtlTranslate:i.params.direction==="horizontal"&&(s.dir.toLowerCase()==="rtl"||H(s,"direction")==="rtl"),wrongRTL:H(l,"display")==="-webkit-box"}),!0}init(e){const i=this;if(i.initialized||i.mount(e)===!1)return i;i.emit("beforeInit"),i.params.breakpoints&&i.setBreakpoint(),i.addClasses(),i.updateSize(),i.updateSlides(),i.params.watchOverflow&&i.checkOverflow(),i.params.grabCursor&&i.enabled&&i.setGrabCursor(),i.params.loop&&i.virtual&&i.params.virtual.enabled?i.slideTo(i.params.initialSlide+i.virtual.slidesBefore,0,i.params.runCallbacksOnInit,!1,!0):i.slideTo(i.params.initialSlide,0,i.params.runCallbacksOnInit,!1,!0),i.params.loop&&i.loopCreate(),i.attachEvents();const n=[...i.el.querySelectorAll('[loading="lazy"]')];return i.isElement&&n.push(...i.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach(r=>{r.complete?Q(i,r):r.addEventListener("load",l=>{Q(i,l.target)})}),pe(i),i.initialized=!0,pe(i),i.emit("init"),i.emit("afterInit"),i}destroy(e,i){e===void 0&&(e=!0),i===void 0&&(i=!0);const s=this,{params:n,el:r,wrapperEl:l,slides:o}=s;return typeof s.params>"u"||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),n.loop&&s.loopDestroy(),i&&(s.removeClasses(),r.removeAttribute("style"),l.removeAttribute("style"),o&&o.length&&o.forEach(a=>{a.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),a.removeAttribute("style"),a.removeAttribute("data-swiper-slide-index")})),s.emit("destroy"),Object.keys(s.eventsListeners).forEach(a=>{s.off(a)}),e!==!1&&(s.el.swiper=null,Ve(s)),s.destroyed=!0),null}static extendDefaults(e){N(ce,e)}static get extendedDefaults(){return ce}static get defaults(){return me}static installModule(e){R.prototype.__modules__||(R.prototype.__modules__=[]);const i=R.prototype.__modules__;typeof e=="function"&&i.indexOf(e)<0&&i.push(e)}static use(e){return Array.isArray(e)?(e.forEach(i=>R.installModule(i)),R):(R.installModule(e),R)}};Object.keys(de).forEach(t=>{Object.keys(de[t]).forEach(e=>{ge.prototype[e]=de[t][e]})});ge.use([Ke,Ze]);const Le=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function W(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"&&!t.__swiper__}function q(t,e){const i=["__proto__","constructor","prototype"];Object.keys(e).filter(s=>i.indexOf(s)<0).forEach(s=>{typeof t[s]>"u"?t[s]=e[s]:W(e[s])&&W(t[s])&&Object.keys(e[s]).length>0?e[s].__swiper__?t[s]=e[s]:q(t[s],e[s]):t[s]=e[s]})}function Ie(t){return t===void 0&&(t={}),t.navigation&&typeof t.navigation.nextEl>"u"&&typeof t.navigation.prevEl>"u"}function Oe(t){return t===void 0&&(t={}),t.pagination&&typeof t.pagination.el>"u"}function Ae(t){return t===void 0&&(t={}),t.scrollbar&&typeof t.scrollbar.el>"u"}function ze(t){t===void 0&&(t="");const e=t.split(" ").map(s=>s.trim()).filter(s=>!!s),i=[];return e.forEach(s=>{i.indexOf(s)<0&&i.push(s)}),i.join(" ")}function ii(t){return t===void 0&&(t=""),t?t.includes("swiper-wrapper")?t:`swiper-wrapper ${t}`:"swiper-wrapper"}function si(t){let{swiper:e,slides:i,passedParams:s,changedParams:n,nextEl:r,prevEl:l,scrollbarEl:o,paginationEl:a}=t;const f=n.filter(x=>x!=="children"&&x!=="direction"&&x!=="wrapperClass"),{params:d,pagination:p,navigation:h,scrollbar:g,virtual:S,thumbs:v}=e;let b,m,c,u,w,y,P,z;n.includes("thumbs")&&s.thumbs&&s.thumbs.swiper&&d.thumbs&&!d.thumbs.swiper&&(b=!0),n.includes("controller")&&s.controller&&s.controller.control&&d.controller&&!d.controller.control&&(m=!0),n.includes("pagination")&&s.pagination&&(s.pagination.el||a)&&(d.pagination||d.pagination===!1)&&p&&!p.el&&(c=!0),n.includes("scrollbar")&&s.scrollbar&&(s.scrollbar.el||o)&&(d.scrollbar||d.scrollbar===!1)&&g&&!g.el&&(u=!0),n.includes("navigation")&&s.navigation&&(s.navigation.prevEl||l)&&(s.navigation.nextEl||r)&&(d.navigation||d.navigation===!1)&&h&&!h.prevEl&&!h.nextEl&&(w=!0);const L=x=>{e[x]&&(e[x].destroy(),x==="navigation"?(e.isElement&&(e[x].prevEl.remove(),e[x].nextEl.remove()),d[x].prevEl=void 0,d[x].nextEl=void 0,e[x].prevEl=void 0,e[x].nextEl=void 0):(e.isElement&&e[x].el.remove(),d[x].el=void 0,e[x].el=void 0))};n.includes("loop")&&e.isElement&&(d.loop&&!s.loop?y=!0:!d.loop&&s.loop?P=!0:z=!0),f.forEach(x=>{if(W(d[x])&&W(s[x]))Object.assign(d[x],s[x]),(x==="navigation"||x==="pagination"||x==="scrollbar")&&"enabled"in s[x]&&!s[x].enabled&&L(x);else{const T=s[x];(T===!0||T===!1)&&(x==="navigation"||x==="pagination"||x==="scrollbar")?T===!1&&L(x):d[x]=s[x]}}),f.includes("controller")&&!m&&e.controller&&e.controller.control&&d.controller&&d.controller.control&&(e.controller.control=d.controller.control),n.includes("children")&&i&&S&&d.virtual.enabled?(S.slides=i,S.update(!0)):n.includes("virtual")&&S&&d.virtual.enabled&&(i&&(S.slides=i),S.update(!0)),n.includes("children")&&i&&d.loop&&(z=!0),b&&v.init()&&v.update(!0),m&&(e.controller.control=d.controller.control),c&&(e.isElement&&(!a||typeof a=="string")&&(a=document.createElement("div"),a.classList.add("swiper-pagination"),a.part.add("pagination"),e.el.appendChild(a)),a&&(d.pagination.el=a),p.init(),p.render(),p.update()),u&&(e.isElement&&(!o||typeof o=="string")&&(o=document.createElement("div"),o.classList.add("swiper-scrollbar"),o.part.add("scrollbar"),e.el.appendChild(o)),o&&(d.scrollbar.el=o),g.init(),g.updateSize(),g.setTranslate()),w&&(e.isElement&&((!r||typeof r=="string")&&(r=document.createElement("div"),r.classList.add("swiper-button-next"),r.innerHTML=e.hostEl.constructor.nextButtonSvg,r.part.add("button-next"),e.el.appendChild(r)),(!l||typeof l=="string")&&(l=document.createElement("div"),l.classList.add("swiper-button-prev"),l.innerHTML=e.hostEl.constructor.prevButtonSvg,l.part.add("button-prev"),e.el.appendChild(l))),r&&(d.navigation.nextEl=r),l&&(d.navigation.prevEl=l),h.init(),h.update()),n.includes("allowSlideNext")&&(e.allowSlideNext=s.allowSlideNext),n.includes("allowSlidePrev")&&(e.allowSlidePrev=s.allowSlidePrev),n.includes("direction")&&e.changeDirection(s.direction,!1),(y||z)&&e.loopDestroy(),(P||z)&&e.loopCreate(),e.update()}function ri(t,e){t===void 0&&(t={}),e===void 0&&(e=!0);const i={on:{}},s={},n={};q(i,me),i._emitClasses=!0,i.init=!1;const r={},l=Le.map(a=>a.replace(/_/,"")),o=Object.assign({},t);return Object.keys(o).forEach(a=>{typeof t[a]>"u"||(l.indexOf(a)>=0?W(t[a])?(i[a]={},n[a]={},q(i[a],t[a]),q(n[a],t[a])):(i[a]=t[a],n[a]=t[a]):a.search(/on[A-Z]/)===0&&typeof t[a]=="function"?e?s[`${a[2].toLowerCase()}${a.substr(3)}`]=t[a]:i.on[`${a[2].toLowerCase()}${a.substr(3)}`]=t[a]:r[a]=t[a])}),["navigation","pagination","scrollbar"].forEach(a=>{i[a]===!0&&(i[a]={}),i[a]===!1&&delete i[a]}),{params:i,passedParams:n,rest:r,events:s}}function ni(t,e){let{el:i,nextEl:s,prevEl:n,paginationEl:r,scrollbarEl:l,swiper:o}=t;Ie(e)&&s&&n&&(o.params.navigation.nextEl=s,o.originalParams.navigation.nextEl=s,o.params.navigation.prevEl=n,o.originalParams.navigation.prevEl=n),Oe(e)&&r&&(o.params.pagination.el=r,o.originalParams.pagination.el=r),Ae(e)&&l&&(o.params.scrollbar.el=l,o.originalParams.scrollbar.el=l),o.init(i)}function ai(t,e,i,s,n){const r=[];if(!e)return r;const l=a=>{r.indexOf(a)<0&&r.push(a)};if(i&&s){const a=s.map(n),f=i.map(n);a.join("")!==f.join("")&&l("children"),s.length!==i.length&&l("children")}return Le.filter(a=>a[0]==="_").map(a=>a.replace(/_/,"")).forEach(a=>{if(a in t&&a in e)if(W(t[a])&&W(e[a])){const f=Object.keys(t[a]),d=Object.keys(e[a]);f.length!==d.length?l(a):(f.forEach(p=>{t[a][p]!==e[a][p]&&l(a)}),d.forEach(p=>{t[a][p]!==e[a][p]&&l(a)}))}else t[a]!==e[a]&&l(a)}),r}const li=t=>{!t||t.destroyed||!t.params.virtual||t.params.virtual&&!t.params.virtual.enabled||(t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.parallax&&t.params.parallax&&t.params.parallax.enabled&&t.parallax.setTranslate())};function re(){return re=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},re.apply(this,arguments)}function De(t){return t.type&&t.type.displayName&&t.type.displayName.includes("SwiperSlide")}function _e(t){const e=[];return $.Children.toArray(t).forEach(i=>{De(i)?e.push(i):i.props&&i.props.children&&_e(i.props.children).forEach(s=>e.push(s))}),e}function oi(t){const e=[],i={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return $.Children.toArray(t).forEach(s=>{if(De(s))e.push(s);else if(s.props&&s.props.slot&&i[s.props.slot])i[s.props.slot].push(s);else if(s.props&&s.props.children){const n=_e(s.props.children);n.length>0?n.forEach(r=>e.push(r)):i["container-end"].push(s)}else i["container-end"].push(s)}),{slides:e,slots:i}}function di(t,e,i){if(!i)return null;const s=d=>{let p=d;return d<0?p=e.length+d:p>=e.length&&(p=p-e.length),p},n=t.isHorizontal()?{[t.rtlTranslate?"right":"left"]:`${i.offset}px`}:{top:`${i.offset}px`},{from:r,to:l}=i,o=t.params.loop?-e.length:0,a=t.params.loop?e.length*2:e.length,f=[];for(let d=o;d<a;d+=1)d>=r&&d<=l&&f.push(e[s(d)]);return f.map((d,p)=>$.cloneElement(d,{swiper:t,style:n,key:`slide-${p}`}))}function U(t,e){return typeof window>"u"?G.useEffect(t,e):G.useLayoutEffect(t,e)}const ye=G.createContext(null),Ge=G.createContext(null),hi=()=>G.useContext(Ge),ci=G.forwardRef(function(t,e){let{className:i,tag:s="div",wrapperTag:n="div",children:r,onSwiper:l,...o}=t===void 0?{}:t,a=!1;const[f,d]=G.useState("swiper"),[p,h]=G.useState(null),[g,S]=G.useState(!1),v=G.useRef(!1),b=G.useRef(null),m=G.useRef(null),c=G.useRef(null),u=G.useRef(null),w=G.useRef(null),y=G.useRef(null),P=G.useRef(null),z=G.useRef(null),{params:L,passedParams:x,rest:T,events:C}=ri(o),{slides:M,slots:E}=oi(r),I=()=>{S(!g)};Object.assign(L.on,{_containerClasses(D,_){d(_)}});const O=()=>{Object.assign(L.on,C),a=!0;const D={...L};if(delete D.wrapperClass,m.current=new ge(D),m.current.virtual&&m.current.params.virtual.enabled){m.current.virtual.slides=M;const _={cache:!1,slides:M,renderExternal:h,renderExternalUpdate:!1};q(m.current.params.virtual,_),q(m.current.originalParams.virtual,_)}};b.current||O(),m.current&&m.current.on("_beforeBreakpoint",I);const B=()=>{a||!C||!m.current||Object.keys(C).forEach(D=>{m.current.on(D,C[D])})},Y=()=>{!C||!m.current||Object.keys(C).forEach(D=>{m.current.off(D,C[D])})};G.useEffect(()=>()=>{m.current&&m.current.off("_beforeBreakpoint",I)}),G.useEffect(()=>{!v.current&&m.current&&(m.current.emitSlidesClasses(),v.current=!0)}),U(()=>{if(e&&(e.current=b.current),!!b.current)return m.current.destroyed&&O(),ni({el:b.current,nextEl:w.current,prevEl:y.current,paginationEl:P.current,scrollbarEl:z.current,swiper:m.current},L),l&&l(m.current),()=>{m.current&&!m.current.destroyed&&m.current.destroy(!0,!1)}},[]),U(()=>{B();const D=ai(x,c.current,M,u.current,_=>_.key);return c.current=x,u.current=M,D.length&&m.current&&!m.current.destroyed&&si({swiper:m.current,slides:M,passedParams:x,changedParams:D,nextEl:w.current,prevEl:y.current,scrollbarEl:z.current,paginationEl:P.current}),()=>{Y()}}),U(()=>{li(m.current)},[p]);function A(){return L.virtual?di(m.current,M,p):M.map((D,_)=>$.cloneElement(D,{swiper:m.current,swiperSlideIndex:_}))}return $.createElement(s,re({ref:b,className:ze(`${f}${i?` ${i}`:""}`)},T),$.createElement(Ge.Provider,{value:m.current},E["container-start"],$.createElement(n,{className:ii(L.wrapperClass)},E["wrapper-start"],A(),E["wrapper-end"]),Ie(L)&&$.createElement($.Fragment,null,$.createElement("div",{ref:y,className:"swiper-button-prev"}),$.createElement("div",{ref:w,className:"swiper-button-next"})),Ae(L)&&$.createElement("div",{ref:z,className:"swiper-scrollbar"}),Oe(L)&&$.createElement("div",{ref:P,className:"swiper-pagination"}),E["container-end"]))});ci.displayName="Swiper";const ui=G.forwardRef(function(t,e){let{tag:i="div",children:s,className:n="",swiper:r,zoom:l,lazy:o,virtualIndex:a,swiperSlideIndex:f,...d}=t===void 0?{}:t;const p=G.useRef(null),[h,g]=G.useState("swiper-slide"),[S,v]=G.useState(!1);function b(w,y,P){y===p.current&&g(P)}U(()=>{if(typeof f<"u"&&(p.current.swiperSlideIndex=f),e&&(e.current=p.current),!(!p.current||!r)){if(r.destroyed){h!=="swiper-slide"&&g("swiper-slide");return}return r.on("_slideClass",b),()=>{r&&r.off("_slideClass",b)}}}),U(()=>{r&&p.current&&!r.destroyed&&g(r.getSlideClasses(p.current))},[r]);const m={isActive:h.indexOf("swiper-slide-active")>=0,isVisible:h.indexOf("swiper-slide-visible")>=0,isPrev:h.indexOf("swiper-slide-prev")>=0,isNext:h.indexOf("swiper-slide-next")>=0},c=()=>typeof s=="function"?s(m):s,u=()=>{v(!0)};return $.createElement(i,re({ref:p,className:ze(`${h}${n?` ${n}`:""}`),"data-swiper-slide-index":a,onLoad:u},d),l&&$.createElement(ye.Provider,{value:m},$.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":typeof l=="number"?l:void 0},c(),o&&!S&&$.createElement("div",{className:"swiper-lazy-preloader"}))),!l&&$.createElement(ye.Provider,{value:m},c(),o&&!S&&$.createElement("div",{className:"swiper-lazy-preloader"})))});ui.displayName="SwiperSlide";function Be(t,e,i,s){return t.params.createElements&&Object.keys(s).forEach(n=>{if(!i[n]&&i.auto===!0){let r=F(t.el,`.${s[n]}`)[0];r||(r=ie("div",s[n]),r.className=s[n],t.el.append(r)),i[n]=r,e[n]=r}}),i}function gi(t){let{swiper:e,extendParams:i,on:s,emit:n}=t;i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};const r=v=>(Array.isArray(v)?v:[v]).filter(b=>!!b);function l(v){let b;return v&&typeof v=="string"&&e.isElement&&(b=e.el.querySelector(v),b)?b:(v&&(typeof v=="string"&&(b=[...document.querySelectorAll(v)]),e.params.uniqueNavElements&&typeof v=="string"&&b.length>1&&e.el.querySelectorAll(v).length===1&&(b=e.el.querySelector(v))),v&&!b?v:b)}function o(v,b){const m=e.params.navigation;v=r(v),v.forEach(c=>{c&&(c.classList[b?"add":"remove"](...m.disabledClass.split(" ")),c.tagName==="BUTTON"&&(c.disabled=b),e.params.watchOverflow&&e.enabled&&c.classList[e.isLocked?"add":"remove"](m.lockClass))})}function a(){const{nextEl:v,prevEl:b}=e.navigation;if(e.params.loop){o(b,!1),o(v,!1);return}o(b,e.isBeginning&&!e.params.rewind),o(v,e.isEnd&&!e.params.rewind)}function f(v){v.preventDefault(),!(e.isBeginning&&!e.params.loop&&!e.params.rewind)&&(e.slidePrev(),n("navigationPrev"))}function d(v){v.preventDefault(),!(e.isEnd&&!e.params.loop&&!e.params.rewind)&&(e.slideNext(),n("navigationNext"))}function p(){const v=e.params.navigation;if(e.params.navigation=Be(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(v.nextEl||v.prevEl))return;let b=l(v.nextEl),m=l(v.prevEl);Object.assign(e.navigation,{nextEl:b,prevEl:m}),b=r(b),m=r(m);const c=(u,w)=>{u&&u.addEventListener("click",w==="next"?d:f),!e.enabled&&u&&u.classList.add(...v.lockClass.split(" "))};b.forEach(u=>c(u,"next")),m.forEach(u=>c(u,"prev"))}function h(){let{nextEl:v,prevEl:b}=e.navigation;v=r(v),b=r(b);const m=(c,u)=>{c.removeEventListener("click",u==="next"?d:f),c.classList.remove(...e.params.navigation.disabledClass.split(" "))};v.forEach(c=>m(c,"next")),b.forEach(c=>m(c,"prev"))}s("init",()=>{e.params.navigation.enabled===!1?S():(p(),a())}),s("toEdge fromEdge lock unlock",()=>{a()}),s("destroy",()=>{h()}),s("enable disable",()=>{let{nextEl:v,prevEl:b}=e.navigation;if(v=r(v),b=r(b),e.enabled){a();return}[...v,...b].filter(m=>!!m).forEach(m=>m.classList.add(e.params.navigation.lockClass))}),s("click",(v,b)=>{let{nextEl:m,prevEl:c}=e.navigation;m=r(m),c=r(c);const u=b.target;if(e.params.navigation.hideOnClick&&!c.includes(u)&&!m.includes(u)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===u||e.pagination.el.contains(u)))return;let w;m.length?w=m[0].classList.contains(e.params.navigation.hiddenClass):c.length&&(w=c[0].classList.contains(e.params.navigation.hiddenClass)),n(w===!0?"navigationShow":"navigationHide"),[...m,...c].filter(y=>!!y).forEach(y=>y.classList.toggle(e.params.navigation.hiddenClass))}});const g=()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),p(),a()},S=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),h()};Object.assign(e.navigation,{enable:g,disable:S,update:a,init:p,destroy:h})}function X(t){return t===void 0&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function vi(t){let{swiper:e,extendParams:i,on:s,emit:n}=t;const r="swiper-pagination";i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:c=>c,formatFractionTotal:c=>c,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let l,o=0;const a=c=>(Array.isArray(c)?c:[c]).filter(u=>!!u);function f(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&e.pagination.el.length===0}function d(c,u){const{bulletActiveClass:w}=e.params.pagination;c&&(c=c[`${u==="prev"?"previous":"next"}ElementSibling`],c&&(c.classList.add(`${w}-${u}`),c=c[`${u==="prev"?"previous":"next"}ElementSibling`],c&&c.classList.add(`${w}-${u}-${u}`)))}function p(c){const u=c.target.closest(X(e.params.pagination.bulletClass));if(!u)return;c.preventDefault();const w=se(u)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===w)return;e.slideToLoop(w)}else e.slideTo(w)}function h(){const c=e.rtl,u=e.params.pagination;if(f())return;let w=e.pagination.el;w=a(w);let y,P;const z=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,L=e.params.loop?Math.ceil(z/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(P=e.previousRealIndex||0,y=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):typeof e.snapIndex<"u"?(y=e.snapIndex,P=e.previousSnapIndex):(P=e.previousIndex||0,y=e.activeIndex||0),u.type==="bullets"&&e.pagination.bullets&&e.pagination.bullets.length>0){const x=e.pagination.bullets;let T,C,M;if(u.dynamicBullets&&(l=fe(x[0],e.isHorizontal()?"width":"height",!0),w.forEach(E=>{E.style[e.isHorizontal()?"width":"height"]=`${l*(u.dynamicMainBullets+4)}px`}),u.dynamicMainBullets>1&&P!==void 0&&(o+=y-(P||0),o>u.dynamicMainBullets-1?o=u.dynamicMainBullets-1:o<0&&(o=0)),T=Math.max(y-o,0),C=T+(Math.min(x.length,u.dynamicMainBullets)-1),M=(C+T)/2),x.forEach(E=>{const I=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(O=>`${u.bulletActiveClass}${O}`)].map(O=>typeof O=="string"&&O.includes(" ")?O.split(" "):O).flat();E.classList.remove(...I)}),w.length>1)x.forEach(E=>{const I=se(E);I===y?E.classList.add(...u.bulletActiveClass.split(" ")):e.isElement&&E.setAttribute("part","bullet"),u.dynamicBullets&&(I>=T&&I<=C&&E.classList.add(...`${u.bulletActiveClass}-main`.split(" ")),I===T&&d(E,"prev"),I===C&&d(E,"next"))});else{const E=x[y];if(E&&E.classList.add(...u.bulletActiveClass.split(" ")),e.isElement&&x.forEach((I,O)=>{I.setAttribute("part",O===y?"bullet-active":"bullet")}),u.dynamicBullets){const I=x[T],O=x[C];for(let B=T;B<=C;B+=1)x[B]&&x[B].classList.add(...`${u.bulletActiveClass}-main`.split(" "));d(I,"prev"),d(O,"next")}}if(u.dynamicBullets){const E=Math.min(x.length,u.dynamicMainBullets+4),I=(l*E-l)/2-M*l,O=c?"right":"left";x.forEach(B=>{B.style[e.isHorizontal()?O:"top"]=`${I}px`})}}w.forEach((x,T)=>{if(u.type==="fraction"&&(x.querySelectorAll(X(u.currentClass)).forEach(C=>{C.textContent=u.formatFractionCurrent(y+1)}),x.querySelectorAll(X(u.totalClass)).forEach(C=>{C.textContent=u.formatFractionTotal(L)})),u.type==="progressbar"){let C;u.progressbarOpposite?C=e.isHorizontal()?"vertical":"horizontal":C=e.isHorizontal()?"horizontal":"vertical";const M=(y+1)/L;let E=1,I=1;C==="horizontal"?E=M:I=M,x.querySelectorAll(X(u.progressbarFillClass)).forEach(O=>{O.style.transform=`translate3d(0,0,0) scaleX(${E}) scaleY(${I})`,O.style.transitionDuration=`${e.params.speed}ms`})}u.type==="custom"&&u.renderCustom?(x.innerHTML=u.renderCustom(e,y+1,L),T===0&&n("paginationRender",x)):(T===0&&n("paginationRender",x),n("paginationUpdate",x)),e.params.watchOverflow&&e.enabled&&x.classList[e.isLocked?"add":"remove"](u.lockClass)})}function g(){const c=e.params.pagination;if(f())return;const u=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let w=e.pagination.el;w=a(w);let y="";if(c.type==="bullets"){let P=e.params.loop?Math.ceil(u/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&P>u&&(P=u);for(let z=0;z<P;z+=1)c.renderBullet?y+=c.renderBullet.call(e,z,c.bulletClass):y+=`<${c.bulletElement} ${e.isElement?'part="bullet"':""} class="${c.bulletClass}"></${c.bulletElement}>`}c.type==="fraction"&&(c.renderFraction?y=c.renderFraction.call(e,c.currentClass,c.totalClass):y=`<span class="${c.currentClass}"></span> / <span class="${c.totalClass}"></span>`),c.type==="progressbar"&&(c.renderProgressbar?y=c.renderProgressbar.call(e,c.progressbarFillClass):y=`<span class="${c.progressbarFillClass}"></span>`),e.pagination.bullets=[],w.forEach(P=>{c.type!=="custom"&&(P.innerHTML=y||""),c.type==="bullets"&&e.pagination.bullets.push(...P.querySelectorAll(X(c.bulletClass)))}),c.type!=="custom"&&n("paginationRender",w[0])}function S(){e.params.pagination=Be(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const c=e.params.pagination;if(!c.el)return;let u;typeof c.el=="string"&&e.isElement&&(u=e.el.querySelector(c.el)),!u&&typeof c.el=="string"&&(u=[...document.querySelectorAll(c.el)]),u||(u=c.el),!(!u||u.length===0)&&(e.params.uniqueNavElements&&typeof c.el=="string"&&Array.isArray(u)&&u.length>1&&(u=[...e.el.querySelectorAll(c.el)],u.length>1&&(u=u.filter(w=>Ee(w,".swiper")[0]===e.el)[0])),Array.isArray(u)&&u.length===1&&(u=u[0]),Object.assign(e.pagination,{el:u}),u=a(u),u.forEach(w=>{c.type==="bullets"&&c.clickable&&w.classList.add(...(c.clickableClass||"").split(" ")),w.classList.add(c.modifierClass+c.type),w.classList.add(e.isHorizontal()?c.horizontalClass:c.verticalClass),c.type==="bullets"&&c.dynamicBullets&&(w.classList.add(`${c.modifierClass}${c.type}-dynamic`),o=0,c.dynamicMainBullets<1&&(c.dynamicMainBullets=1)),c.type==="progressbar"&&c.progressbarOpposite&&w.classList.add(c.progressbarOppositeClass),c.clickable&&w.addEventListener("click",p),e.enabled||w.classList.add(c.lockClass)}))}function v(){const c=e.params.pagination;if(f())return;let u=e.pagination.el;u&&(u=a(u),u.forEach(w=>{w.classList.remove(c.hiddenClass),w.classList.remove(c.modifierClass+c.type),w.classList.remove(e.isHorizontal()?c.horizontalClass:c.verticalClass),c.clickable&&(w.classList.remove(...(c.clickableClass||"").split(" ")),w.removeEventListener("click",p))})),e.pagination.bullets&&e.pagination.bullets.forEach(w=>w.classList.remove(...c.bulletActiveClass.split(" ")))}s("changeDirection",()=>{if(!e.pagination||!e.pagination.el)return;const c=e.params.pagination;let{el:u}=e.pagination;u=a(u),u.forEach(w=>{w.classList.remove(c.horizontalClass,c.verticalClass),w.classList.add(e.isHorizontal()?c.horizontalClass:c.verticalClass)})}),s("init",()=>{e.params.pagination.enabled===!1?m():(S(),g(),h())}),s("activeIndexChange",()=>{typeof e.snapIndex>"u"&&h()}),s("snapIndexChange",()=>{h()}),s("snapGridLengthChange",()=>{g(),h()}),s("destroy",()=>{v()}),s("enable disable",()=>{let{el:c}=e.pagination;c&&(c=a(c),c.forEach(u=>u.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass)))}),s("lock unlock",()=>{h()}),s("click",(c,u)=>{const w=u.target,y=a(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&y&&y.length>0&&!w.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&w===e.navigation.nextEl||e.navigation.prevEl&&w===e.navigation.prevEl))return;const P=y[0].classList.contains(e.params.pagination.hiddenClass);n(P===!0?"paginationShow":"paginationHide"),y.forEach(z=>z.classList.toggle(e.params.pagination.hiddenClass))}});const b=()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:c}=e.pagination;c&&(c=a(c),c.forEach(u=>u.classList.remove(e.params.pagination.paginationDisabledClass))),S(),g(),h()},m=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:c}=e.pagination;c&&(c=a(c),c.forEach(u=>u.classList.add(e.params.pagination.paginationDisabledClass))),v()};Object.assign(e.pagination,{enable:b,disable:m,render:g,update:h,init:S,destroy:v})}function wi(t){let{swiper:e,extendParams:i,on:s,emit:n,params:r}=t;e.autoplay={running:!1,paused:!1,timeLeft:0},i({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let l,o,a=r&&r.autoplay?r.autoplay.delay:3e3,f=r&&r.autoplay?r.autoplay.delay:3e3,d,p=new Date().getTime(),h,g,S,v,b,m,c;function u(A){!e||e.destroyed||!e.wrapperEl||A.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",u),!c&&T())}const w=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?h=!0:h&&(f=d,h=!1);const A=e.autoplay.paused?d:p+f-new Date().getTime();e.autoplay.timeLeft=A,n("autoplayTimeLeft",A,A/a),o=requestAnimationFrame(()=>{w()})},y=()=>{let A;return e.virtual&&e.params.virtual.enabled?A=e.slides.filter(_=>_.classList.contains("swiper-slide-active"))[0]:A=e.slides[e.activeIndex],A?parseInt(A.getAttribute("data-swiper-autoplay"),10):void 0},P=A=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(o),w();let D=typeof A>"u"?e.params.autoplay.delay:A;a=e.params.autoplay.delay,f=e.params.autoplay.delay;const _=y();!Number.isNaN(_)&&_>0&&typeof A>"u"&&(D=_,a=_,f=_),d=D;const j=e.params.speed,K=()=>{!e||e.destroyed||(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev(j,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,j,!0,!0),n("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext(j,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,j,!0,!0),n("autoplay")),e.params.cssMode&&(p=new Date().getTime(),requestAnimationFrame(()=>{P()})))};return D>0?(clearTimeout(l),l=setTimeout(()=>{K()},D)):requestAnimationFrame(()=>{K()}),D},z=()=>{p=new Date().getTime(),e.autoplay.running=!0,P(),n("autoplayStart")},L=()=>{e.autoplay.running=!1,clearTimeout(l),cancelAnimationFrame(o),n("autoplayStop")},x=(A,D)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(l),A||(m=!0);const _=()=>{n("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",u):T()};if(e.autoplay.paused=!0,D){b&&(d=e.params.autoplay.delay),b=!1,_();return}d=(d||e.params.autoplay.delay)-(new Date().getTime()-p),!(e.isEnd&&d<0&&!e.params.loop)&&(d<0&&(d=0),_())},T=()=>{e.isEnd&&d<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(p=new Date().getTime(),m?(m=!1,P(d)):P(),e.autoplay.paused=!1,n("autoplayResume"))},C=()=>{if(e.destroyed||!e.autoplay.running)return;const A=k();A.visibilityState==="hidden"&&(m=!0,x(!0)),A.visibilityState==="visible"&&T()},M=A=>{A.pointerType==="mouse"&&(m=!0,c=!0,!(e.animating||e.autoplay.paused)&&x(!0))},E=A=>{A.pointerType==="mouse"&&(c=!1,e.autoplay.paused&&T())},I=()=>{e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",M),e.el.addEventListener("pointerleave",E))},O=()=>{e.el.removeEventListener("pointerenter",M),e.el.removeEventListener("pointerleave",E)},B=()=>{k().addEventListener("visibilitychange",C)},Y=()=>{k().removeEventListener("visibilitychange",C)};s("init",()=>{e.params.autoplay.enabled&&(I(),B(),z())}),s("destroy",()=>{O(),Y(),e.autoplay.running&&L()}),s("_freeModeStaticRelease",()=>{(S||m)&&T()}),s("_freeModeNoMomentumRelease",()=>{e.params.autoplay.disableOnInteraction?L():x(!0,!0)}),s("beforeTransitionStart",(A,D,_)=>{e.destroyed||!e.autoplay.running||(_||!e.params.autoplay.disableOnInteraction?x(!0,!0):L())}),s("sliderFirstMove",()=>{if(!(e.destroyed||!e.autoplay.running)){if(e.params.autoplay.disableOnInteraction){L();return}g=!0,S=!1,m=!1,v=setTimeout(()=>{m=!0,S=!0,x(!0)},200)}}),s("touchEnd",()=>{if(!(e.destroyed||!e.autoplay.running||!g)){if(clearTimeout(v),clearTimeout(l),e.params.autoplay.disableOnInteraction){S=!1,g=!1;return}S&&e.params.cssMode&&T(),S=!1,g=!1}}),s("slideChange",()=>{e.destroyed||!e.autoplay.running||(b=!0)}),Object.assign(e.autoplay,{start:z,stop:L,pause:x,resume:T})}export{wi as A,gi as N,vi as P,ci as S,X as a,ui as b,ie as c,mi as d,se as e,pi as g,hi as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpcGVyLWZmMzlkMzZhLmpzIiwic291cmNlcyI6WyIuLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMiLCIuLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91dGlscy5tanMiLCIuLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC9zd2lwZXItY29yZS5tanMiLCIuLi9ub2RlX21vZHVsZXMvc3dpcGVyL3NoYXJlZC91cGRhdGUtc3dpcGVyLm1qcyIsIi4uL25vZGVfbW9kdWxlcy9zd2lwZXIvc2hhcmVkL3VwZGF0ZS1vbi12aXJ0dWFsLWRhdGEubWpzIiwiLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zd2lwZXItcmVhY3QubWpzIiwiLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzIiwiLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9tb2R1bGVzL25hdmlnYXRpb24ubWpzIiwiLi4vbm9kZV9tb2R1bGVzL3N3aXBlci9zaGFyZWQvY2xhc3Nlcy10by1zZWxlY3Rvci5tanMiLCIuLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvcGFnaW5hdGlvbi5tanMiLCIuLi9ub2RlX21vZHVsZXMvc3dpcGVyL21vZHVsZXMvYXV0b3BsYXkubWpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogU1NSIFdpbmRvdyA0LjAuMlxuICogQmV0dGVyIGhhbmRsaW5nIGZvciB3aW5kb3cgb2JqZWN0IGluIFNTUiBlbnZpcm9ubWVudFxuICogaHR0cHM6Ly9naXRodWIuY29tL25vbGltaXRzNHdlYi9zc3Itd2luZG93XG4gKlxuICogQ29weXJpZ2h0IDIwMjEsIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IERlY2VtYmVyIDEzLCAyMDIxXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5mdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAnY29uc3RydWN0b3InIGluIG9iaiAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbn1cbmZ1bmN0aW9uIGV4dGVuZCh0YXJnZXQsIHNyYykge1xuICBpZiAodGFyZ2V0ID09PSB2b2lkIDApIHtcbiAgICB0YXJnZXQgPSB7fTtcbiAgfVxuICBpZiAoc3JjID09PSB2b2lkIDApIHtcbiAgICBzcmMgPSB7fTtcbiAgfVxuICBPYmplY3Qua2V5cyhzcmMpLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiYgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICBleHRlbmQodGFyZ2V0W2tleV0sIHNyY1trZXldKTtcbiAgICB9XG4gIH0pO1xufVxuY29uc3Qgc3NyRG9jdW1lbnQgPSB7XG4gIGJvZHk6IHt9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgYWN0aXZlRWxlbWVudDoge1xuICAgIGJsdXIoKSB7fSxcbiAgICBub2RlTmFtZTogJydcbiAgfSxcbiAgcXVlcnlTZWxlY3RvcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSxcbiAgcXVlcnlTZWxlY3RvckFsbCgpIHtcbiAgICByZXR1cm4gW107XG4gIH0sXG4gIGdldEVsZW1lbnRCeUlkKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBjcmVhdGVFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdEV2ZW50KCkge31cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIHN0eWxlOiB7fSxcbiAgICAgIHNldEF0dHJpYnV0ZSgpIHt9LFxuICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50TlMoKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9LFxuICBpbXBvcnROb2RlKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9XG59O1xuZnVuY3Rpb24gZ2V0RG9jdW1lbnQoKSB7XG4gIGNvbnN0IGRvYyA9IHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHt9O1xuICBleHRlbmQoZG9jLCBzc3JEb2N1bWVudCk7XG4gIHJldHVybiBkb2M7XG59XG5jb25zdCBzc3JXaW5kb3cgPSB7XG4gIGRvY3VtZW50OiBzc3JEb2N1bWVudCxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiAnJ1xuICB9LFxuICBsb2NhdGlvbjoge1xuICAgIGhhc2g6ICcnLFxuICAgIGhvc3Q6ICcnLFxuICAgIGhvc3RuYW1lOiAnJyxcbiAgICBocmVmOiAnJyxcbiAgICBvcmlnaW46ICcnLFxuICAgIHBhdGhuYW1lOiAnJyxcbiAgICBwcm90b2NvbDogJycsXG4gICAgc2VhcmNoOiAnJ1xuICB9LFxuICBoaXN0b3J5OiB7XG4gICAgcmVwbGFjZVN0YXRlKCkge30sXG4gICAgcHVzaFN0YXRlKCkge30sXG4gICAgZ28oKSB7fSxcbiAgICBiYWNrKCkge31cbiAgfSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH07XG4gIH0sXG4gIEltYWdlKCkge30sXG4gIERhdGUoKSB7fSxcbiAgc2NyZWVuOiB7fSxcbiAgc2V0VGltZW91dCgpIHt9LFxuICBjbGVhclRpbWVvdXQoKSB7fSxcbiAgbWF0Y2hNZWRpYSgpIHtcbiAgICByZXR1cm4ge307XG4gIH0sXG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjaykge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICB9LFxuICBjYW5jZWxBbmltYXRpb25GcmFtZShpZCkge1xuICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY2xlYXJUaW1lb3V0KGlkKTtcbiAgfVxufTtcbmZ1bmN0aW9uIGdldFdpbmRvdygpIHtcbiAgY29uc3Qgd2luID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB7fTtcbiAgZXh0ZW5kKHdpbiwgc3NyV2luZG93KTtcbiAgcmV0dXJuIHdpbjtcbn1cblxuZXhwb3J0IHsgZ2V0V2luZG93IGFzIGEsIGdldERvY3VtZW50IGFzIGcgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuXG5mdW5jdGlvbiBjbGFzc2VzVG9Ub2tlbnMoY2xhc3Nlcykge1xuICBpZiAoY2xhc3NlcyA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NlcyA9ICcnO1xuICB9XG4gIHJldHVybiBjbGFzc2VzLnRyaW0oKS5zcGxpdCgnICcpLmZpbHRlcihjID0+ICEhYy50cmltKCkpO1xufVxuXG5mdW5jdGlvbiBkZWxldGVQcm9wcyhvYmopIHtcbiAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICBPYmplY3Qua2V5cyhvYmplY3QpLmZvckVhY2goa2V5ID0+IHtcbiAgICB0cnkge1xuICAgICAgb2JqZWN0W2tleV0gPSBudWxsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gc29tZXRoaW5nIGdvdCB3cm9uZ1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZXh0VGljayhjYWxsYmFjaywgZGVsYXkpIHtcbiAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHtcbiAgICBkZWxheSA9IDA7XG4gIH1cbiAgcmV0dXJuIHNldFRpbWVvdXQoY2FsbGJhY2ssIGRlbGF5KTtcbn1cbmZ1bmN0aW9uIG5vdygpIHtcbiAgcmV0dXJuIERhdGUubm93KCk7XG59XG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKGVsKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgc3R5bGU7XG4gIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSkge1xuICAgIHN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpO1xuICB9XG4gIGlmICghc3R5bGUgJiYgZWwuY3VycmVudFN0eWxlKSB7XG4gICAgc3R5bGUgPSBlbC5jdXJyZW50U3R5bGU7XG4gIH1cbiAgaWYgKCFzdHlsZSkge1xuICAgIHN0eWxlID0gZWwuc3R5bGU7XG4gIH1cbiAgcmV0dXJuIHN0eWxlO1xufVxuZnVuY3Rpb24gZ2V0VHJhbnNsYXRlKGVsLCBheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gJ3gnO1xuICB9XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBsZXQgbWF0cml4O1xuICBsZXQgY3VyVHJhbnNmb3JtO1xuICBsZXQgdHJhbnNmb3JtTWF0cml4O1xuICBjb25zdCBjdXJTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkge1xuICAgIGN1clRyYW5zZm9ybSA9IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS53ZWJraXRUcmFuc2Zvcm07XG4gICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgIGN1clRyYW5zZm9ybSA9IGN1clRyYW5zZm9ybS5zcGxpdCgnLCAnKS5tYXAoYSA9PiBhLnJlcGxhY2UoJywnLCAnLicpKS5qb2luKCcsICcpO1xuICAgIH1cbiAgICAvLyBTb21lIG9sZCB2ZXJzaW9ucyBvZiBXZWJraXQgY2hva2Ugd2hlbiAnbm9uZScgaXMgcGFzc2VkOyBwYXNzXG4gICAgLy8gZW1wdHkgc3RyaW5nIGluc3RlYWQgaW4gdGhpcyBjYXNlXG4gICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gIH0gZWxzZSB7XG4gICAgdHJhbnNmb3JtTWF0cml4ID0gY3VyU3R5bGUuTW96VHJhbnNmb3JtIHx8IGN1clN0eWxlLk9UcmFuc2Zvcm0gfHwgY3VyU3R5bGUuTXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUubXNUcmFuc2Zvcm0gfHwgY3VyU3R5bGUudHJhbnNmb3JtIHx8IGN1clN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ3RyYW5zZm9ybScpLnJlcGxhY2UoJ3RyYW5zbGF0ZSgnLCAnbWF0cml4KDEsIDAsIDAsIDEsJyk7XG4gICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgfVxuICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgLy8gTGF0ZXN0IENocm9tZSBhbmQgd2Via2l0cyBGaXhcbiAgICBpZiAod2luZG93LldlYktpdENTU01hdHJpeCkgY3VyVHJhbnNmb3JtID0gdHJhbnNmb3JtTWF0cml4Lm00MTtcbiAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgIGVsc2UgaWYgKG1hdHJpeC5sZW5ndGggPT09IDE2KSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFsxMl0pO1xuICAgIC8vIE5vcm1hbCBCcm93c2Vyc1xuICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICB9XG4gIGlmIChheGlzID09PSAneScpIHtcbiAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSBjdXJUcmFuc2Zvcm0gPSB0cmFuc2Zvcm1NYXRyaXgubTQyO1xuICAgIC8vIENyYXp5IElFMTAgTWF0cml4XG4gICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgLy8gTm9ybWFsIEJyb3dzZXJzXG4gICAgZWxzZSBjdXJUcmFuc2Zvcm0gPSBwYXJzZUZsb2F0KG1hdHJpeFs1XSk7XG4gIH1cbiAgcmV0dXJuIGN1clRyYW5zZm9ybSB8fCAwO1xufVxuZnVuY3Rpb24gaXNPYmplY3Qobykge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdvYmplY3QnICYmIG8gIT09IG51bGwgJiYgby5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jztcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5IVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xuICB9XG4gIHJldHVybiBub2RlICYmIChub2RlLm5vZGVUeXBlID09PSAxIHx8IG5vZGUubm9kZVR5cGUgPT09IDExKTtcbn1cbmZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgY29uc3QgdG8gPSBPYmplY3QoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKTtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBuZXh0U291cmNlID0gaSA8IDAgfHwgYXJndW1lbnRzLmxlbmd0aCA8PSBpID8gdW5kZWZpbmVkIDogYXJndW1lbnRzW2ldO1xuICAgIGlmIChuZXh0U291cmNlICE9PSB1bmRlZmluZWQgJiYgbmV4dFNvdXJjZSAhPT0gbnVsbCAmJiAhaXNOb2RlKG5leHRTb3VyY2UpKSB7XG4gICAgICBjb25zdCBrZXlzQXJyYXkgPSBPYmplY3Qua2V5cyhPYmplY3QobmV4dFNvdXJjZSkpLmZpbHRlcihrZXkgPT4gbm9FeHRlbmQuaW5kZXhPZihrZXkpIDwgMCk7XG4gICAgICBmb3IgKGxldCBuZXh0SW5kZXggPSAwLCBsZW4gPSBrZXlzQXJyYXkubGVuZ3RoOyBuZXh0SW5kZXggPCBsZW47IG5leHRJbmRleCArPSAxKSB7XG4gICAgICAgIGNvbnN0IG5leHRLZXkgPSBrZXlzQXJyYXlbbmV4dEluZGV4XTtcbiAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgIGlmIChkZXNjICE9PSB1bmRlZmluZWQgJiYgZGVzYy5lbnVtZXJhYmxlKSB7XG4gICAgICAgICAgaWYgKGlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgaWYgKG5leHRTb3VyY2VbbmV4dEtleV0uX19zd2lwZXJfXykge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBleHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBpc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSB7fTtcbiAgICAgICAgICAgIGlmIChuZXh0U291cmNlW25leHRLZXldLl9fc3dpcGVyX18pIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG87XG59XG5mdW5jdGlvbiBzZXRDU1NQcm9wZXJ0eShlbCwgdmFyTmFtZSwgdmFyVmFsdWUpIHtcbiAgZWwuc3R5bGUuc2V0UHJvcGVydHkodmFyTmFtZSwgdmFyVmFsdWUpO1xufVxuZnVuY3Rpb24gYW5pbWF0ZUNTU01vZGVTY3JvbGwoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICB0YXJnZXRQb3NpdGlvbixcbiAgICBzaWRlXG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3Qgc3RhcnRQb3NpdGlvbiA9IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgc3RhcnRUaW1lID0gbnVsbDtcbiAgbGV0IHRpbWU7XG4gIGNvbnN0IGR1cmF0aW9uID0gc3dpcGVyLnBhcmFtcy5zcGVlZDtcbiAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gIGNvbnN0IGRpciA9IHRhcmdldFBvc2l0aW9uID4gc3RhcnRQb3NpdGlvbiA/ICduZXh0JyA6ICdwcmV2JztcbiAgY29uc3QgaXNPdXRPZkJvdW5kID0gKGN1cnJlbnQsIHRhcmdldCkgPT4ge1xuICAgIHJldHVybiBkaXIgPT09ICduZXh0JyAmJiBjdXJyZW50ID49IHRhcmdldCB8fCBkaXIgPT09ICdwcmV2JyAmJiBjdXJyZW50IDw9IHRhcmdldDtcbiAgfTtcbiAgY29uc3QgYW5pbWF0ZSA9ICgpID0+IHtcbiAgICB0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgaWYgKHN0YXJ0VGltZSA9PT0gbnVsbCkge1xuICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICB9XG4gICAgY29uc3QgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBkdXJhdGlvbiwgMSksIDApO1xuICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IDAuNSAtIE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyO1xuICAgIGxldCBjdXJyZW50UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uICsgZWFzZVByb2dyZXNzICogKHRhcmdldFBvc2l0aW9uIC0gc3RhcnRQb3NpdGlvbik7XG4gICAgaWYgKGlzT3V0T2ZCb3VuZChjdXJyZW50UG9zaXRpb24sIHRhcmdldFBvc2l0aW9uKSkge1xuICAgICAgY3VycmVudFBvc2l0aW9uID0gdGFyZ2V0UG9zaXRpb247XG4gICAgfVxuICAgIHN3aXBlci53cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgW3NpZGVdOiBjdXJyZW50UG9zaXRpb25cbiAgICB9KTtcbiAgICBpZiAoaXNPdXRPZkJvdW5kKGN1cnJlbnRQb3NpdGlvbiwgdGFyZ2V0UG9zaXRpb24pKSB7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XG4gICAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnNjcm9sbFNuYXBUeXBlID0gJyc7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5vdmVyZmxvdyA9ICcnO1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLnNjcm9sbFRvKHtcbiAgICAgICAgICBbc2lkZV06IGN1cnJlbnRQb3NpdGlvblxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKHN3aXBlci5jc3NNb2RlRnJhbWVJRCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5jc3NNb2RlRnJhbWVJRCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG4gIH07XG4gIGFuaW1hdGUoKTtcbn1cbmZ1bmN0aW9uIGdldFNsaWRlVHJhbnNmb3JtRWwoc2xpZGVFbCkge1xuICByZXR1cm4gc2xpZGVFbC5xdWVyeVNlbGVjdG9yKCcuc3dpcGVyLXNsaWRlLXRyYW5zZm9ybScpIHx8IHNsaWRlRWwuc2hhZG93Um9vdCAmJiBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignLnN3aXBlci1zbGlkZS10cmFuc2Zvcm0nKSB8fCBzbGlkZUVsO1xufVxuZnVuY3Rpb24gZWxlbWVudENoaWxkcmVuKGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gIGlmIChzZWxlY3RvciA9PT0gdm9pZCAwKSB7XG4gICAgc2VsZWN0b3IgPSAnJztcbiAgfVxuICByZXR1cm4gWy4uLmVsZW1lbnQuY2hpbGRyZW5dLmZpbHRlcihlbCA9PiBlbC5tYXRjaGVzKHNlbGVjdG9yKSk7XG59XG5mdW5jdGlvbiBzaG93V2FybmluZyh0ZXh0KSB7XG4gIHRyeSB7XG4gICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIHJldHVybjtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gZXJyXG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQodGFnLCBjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gW107XG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uKEFycmF5LmlzQXJyYXkoY2xhc3NlcykgPyBjbGFzc2VzIDogY2xhc3Nlc1RvVG9rZW5zKGNsYXNzZXMpKSk7XG4gIHJldHVybiBlbDtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRPZmZzZXQoZWwpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgY29uc3QgYm94ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5ib2R5O1xuICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgY29uc3QgY2xpZW50TGVmdCA9IGVsLmNsaWVudExlZnQgfHwgYm9keS5jbGllbnRMZWZ0IHx8IDA7XG4gIGNvbnN0IHNjcm9sbFRvcCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWSA6IGVsLnNjcm9sbFRvcDtcbiAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gIHJldHVybiB7XG4gICAgdG9wOiBib3gudG9wICsgc2Nyb2xsVG9wIC0gY2xpZW50VG9wLFxuICAgIGxlZnQ6IGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCAtIGNsaWVudExlZnRcbiAgfTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRQcmV2QWxsKGVsLCBzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChwcmV2Lm1hdGNoZXMoc2VsZWN0b3IpKSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgfSBlbHNlIHByZXZFbHMucHVzaChwcmV2KTtcbiAgICBlbCA9IHByZXY7XG4gIH1cbiAgcmV0dXJuIHByZXZFbHM7XG59XG5mdW5jdGlvbiBlbGVtZW50TmV4dEFsbChlbCwgc2VsZWN0b3IpIHtcbiAgY29uc3QgbmV4dEVscyA9IFtdO1xuICB3aGlsZSAoZWwubmV4dEVsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgbmV4dCA9IGVsLm5leHRFbGVtZW50U2libGluZzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgaWYgKG5leHQubWF0Y2hlcyhzZWxlY3RvcikpIG5leHRFbHMucHVzaChuZXh0KTtcbiAgICB9IGVsc2UgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIGVsID0gbmV4dDtcbiAgfVxuICByZXR1cm4gbmV4dEVscztcbn1cbmZ1bmN0aW9uIGVsZW1lbnRTdHlsZShlbCwgcHJvcCkge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgcmV0dXJuIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKS5nZXRQcm9wZXJ0eVZhbHVlKHByb3ApO1xufVxuZnVuY3Rpb24gZWxlbWVudEluZGV4KGVsKSB7XG4gIGxldCBjaGlsZCA9IGVsO1xuICBsZXQgaTtcbiAgaWYgKGNoaWxkKSB7XG4gICAgaSA9IDA7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgd2hpbGUgKChjaGlsZCA9IGNoaWxkLnByZXZpb3VzU2libGluZykgIT09IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZC5ub2RlVHlwZSA9PT0gMSkgaSArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gZWxlbWVudFBhcmVudHMoZWwsIHNlbGVjdG9yKSB7XG4gIGNvbnN0IHBhcmVudHMgPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBsZXQgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICBpZiAocGFyZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgfVxuICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnRFbGVtZW50O1xuICB9XG4gIHJldHVybiBwYXJlbnRzO1xufVxuZnVuY3Rpb24gZWxlbWVudFRyYW5zaXRpb25FbmQoZWwsIGNhbGxiYWNrKSB7XG4gIGZ1bmN0aW9uIGZpcmVDYWxsQmFjayhlKSB7XG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlbCkgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwoZWwsIGUpO1xuICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBmaXJlQ2FsbEJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBlbGVtZW50T3V0ZXJTaXplKGVsLCBzaXplLCBpbmNsdWRlTWFyZ2lucykge1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgcmV0dXJuIGVsW3NpemUgPT09ICd3aWR0aCcgPyAnb2Zmc2V0V2lkdGgnIDogJ29mZnNldEhlaWdodCddICsgcGFyc2VGbG9hdCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShzaXplID09PSAnd2lkdGgnID8gJ21hcmdpbi1yaWdodCcgOiAnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQod2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoc2l6ZSA9PT0gJ3dpZHRoJyA/ICdtYXJnaW4tbGVmdCcgOiAnbWFyZ2luLWJvdHRvbScpKTtcbiAgfVxuICByZXR1cm4gZWwub2Zmc2V0V2lkdGg7XG59XG5cbmV4cG9ydCB7IGVsZW1lbnRQYXJlbnRzIGFzIGEsIGVsZW1lbnRPZmZzZXQgYXMgYiwgY3JlYXRlRWxlbWVudCBhcyBjLCBub3cgYXMgZCwgZWxlbWVudENoaWxkcmVuIGFzIGUsIGVsZW1lbnRPdXRlclNpemUgYXMgZiwgZWxlbWVudEluZGV4IGFzIGcsIGNsYXNzZXNUb1Rva2VucyBhcyBoLCBnZXRUcmFuc2xhdGUgYXMgaSwgZWxlbWVudFRyYW5zaXRpb25FbmQgYXMgaiwgaXNPYmplY3QgYXMgaywgZ2V0U2xpZGVUcmFuc2Zvcm1FbCBhcyBsLCBlbGVtZW50U3R5bGUgYXMgbSwgbmV4dFRpY2sgYXMgbiwgZWxlbWVudE5leHRBbGwgYXMgbywgZWxlbWVudFByZXZBbGwgYXMgcCwgYW5pbWF0ZUNTU01vZGVTY3JvbGwgYXMgcSwgc2hvd1dhcm5pbmcgYXMgciwgc2V0Q1NTUHJvcGVydHkgYXMgcywgZXh0ZW5kIGFzIHQsIGRlbGV0ZVByb3BzIGFzIHUgfTtcbiIsImltcG9ydCB7IGEgYXMgZ2V0V2luZG93LCBnIGFzIGdldERvY3VtZW50IH0gZnJvbSAnLi9zc3Itd2luZG93LmVzbS5tanMnO1xuaW1wb3J0IHsgYSBhcyBlbGVtZW50UGFyZW50cywgbSBhcyBlbGVtZW50U3R5bGUsIGUgYXMgZWxlbWVudENoaWxkcmVuLCBzIGFzIHNldENTU1Byb3BlcnR5LCBmIGFzIGVsZW1lbnRPdXRlclNpemUsIG8gYXMgZWxlbWVudE5leHRBbGwsIHAgYXMgZWxlbWVudFByZXZBbGwsIGkgYXMgZ2V0VHJhbnNsYXRlLCBxIGFzIGFuaW1hdGVDU1NNb2RlU2Nyb2xsLCBuIGFzIG5leHRUaWNrLCByIGFzIHNob3dXYXJuaW5nLCBjIGFzIGNyZWF0ZUVsZW1lbnQsIGQgYXMgbm93LCB0IGFzIGV4dGVuZCwgZyBhcyBlbGVtZW50SW5kZXgsIHUgYXMgZGVsZXRlUHJvcHMgfSBmcm9tICcuL3V0aWxzLm1qcyc7XG5cbmxldCBzdXBwb3J0O1xuZnVuY3Rpb24gY2FsY1N1cHBvcnQoKSB7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIHJldHVybiB7XG4gICAgc21vb3RoU2Nyb2xsOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlICYmICdzY3JvbGxCZWhhdmlvcicgaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnN0eWxlLFxuICAgIHRvdWNoOiAhISgnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgd2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldFN1cHBvcnQoKSB7XG4gIGlmICghc3VwcG9ydCkge1xuICAgIHN1cHBvcnQgPSBjYWxjU3VwcG9ydCgpO1xuICB9XG4gIHJldHVybiBzdXBwb3J0O1xufVxuXG5sZXQgZGV2aWNlQ2FjaGVkO1xuZnVuY3Rpb24gY2FsY0RldmljZShfdGVtcCkge1xuICBsZXQge1xuICAgIHVzZXJBZ2VudFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGNvbnN0IHN1cHBvcnQgPSBnZXRTdXBwb3J0KCk7XG4gIGNvbnN0IHdpbmRvdyA9IGdldFdpbmRvdygpO1xuICBjb25zdCBwbGF0Zm9ybSA9IHdpbmRvdy5uYXZpZ2F0b3IucGxhdGZvcm07XG4gIGNvbnN0IHVhID0gdXNlckFnZW50IHx8IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuICBjb25zdCBkZXZpY2UgPSB7XG4gICAgaW9zOiBmYWxzZSxcbiAgICBhbmRyb2lkOiBmYWxzZVxuICB9O1xuICBjb25zdCBzY3JlZW5XaWR0aCA9IHdpbmRvdy5zY3JlZW4ud2lkdGg7XG4gIGNvbnN0IHNjcmVlbkhlaWdodCA9IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGxldCBpcGFkID0gdWEubWF0Y2goLyhpUGFkKS4qT1NcXHMoW1xcZF9dKykvKTtcbiAgY29uc3QgaXBvZCA9IHVhLm1hdGNoKC8oaVBvZCkoLipPU1xccyhbXFxkX10rKSk/Lyk7XG4gIGNvbnN0IGlwaG9uZSA9ICFpcGFkICYmIHVhLm1hdGNoKC8oaVBob25lXFxzT1N8aU9TKVxccyhbXFxkX10rKS8pO1xuICBjb25zdCB3aW5kb3dzID0gcGxhdGZvcm0gPT09ICdXaW4zMic7XG4gIGxldCBtYWNvcyA9IHBsYXRmb3JtID09PSAnTWFjSW50ZWwnO1xuXG4gIC8vIGlQYWRPcyAxMyBmaXhcbiAgY29uc3QgaVBhZFNjcmVlbnMgPSBbJzEwMjR4MTM2NicsICcxMzY2eDEwMjQnLCAnODM0eDExOTQnLCAnMTE5NHg4MzQnLCAnODM0eDExMTInLCAnMTExMng4MzQnLCAnNzY4eDEwMjQnLCAnMTAyNHg3NjgnLCAnODIweDExODAnLCAnMTE4MHg4MjAnLCAnODEweDEwODAnLCAnMTA4MHg4MTAnXTtcbiAgaWYgKCFpcGFkICYmIG1hY29zICYmIHN1cHBvcnQudG91Y2ggJiYgaVBhZFNjcmVlbnMuaW5kZXhPZihgJHtzY3JlZW5XaWR0aH14JHtzY3JlZW5IZWlnaHR9YCkgPj0gMCkge1xuICAgIGlwYWQgPSB1YS5tYXRjaCgvKFZlcnNpb24pXFwvKFtcXGQuXSspLyk7XG4gICAgaWYgKCFpcGFkKSBpcGFkID0gWzAsIDEsICcxM18wXzAnXTtcbiAgICBtYWNvcyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQW5kcm9pZFxuICBpZiAoYW5kcm9pZCAmJiAhd2luZG93cykge1xuICAgIGRldmljZS5vcyA9ICdhbmRyb2lkJztcbiAgICBkZXZpY2UuYW5kcm9pZCA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQgfHwgaXBob25lIHx8IGlwb2QpIHtcbiAgICBkZXZpY2Uub3MgPSAnaW9zJztcbiAgICBkZXZpY2UuaW9zID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn1cbmZ1bmN0aW9uIGdldERldmljZShvdmVycmlkZXMpIHtcbiAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgb3ZlcnJpZGVzID0ge307XG4gIH1cbiAgaWYgKCFkZXZpY2VDYWNoZWQpIHtcbiAgICBkZXZpY2VDYWNoZWQgPSBjYWxjRGV2aWNlKG92ZXJyaWRlcyk7XG4gIH1cbiAgcmV0dXJuIGRldmljZUNhY2hlZDtcbn1cblxubGV0IGJyb3dzZXI7XG5mdW5jdGlvbiBjYWxjQnJvd3NlcigpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGxldCBuZWVkUGVyc3BlY3RpdmVGaXggPSBmYWxzZTtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiB1YS5pbmRleE9mKCdzYWZhcmknKSA+PSAwICYmIHVhLmluZGV4T2YoJ2Nocm9tZScpIDwgMCAmJiB1YS5pbmRleE9mKCdhbmRyb2lkJykgPCAwO1xuICB9XG4gIGlmIChpc1NhZmFyaSgpKSB7XG4gICAgY29uc3QgdWEgPSBTdHJpbmcod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGlmICh1YS5pbmNsdWRlcygnVmVyc2lvbi8nKSkge1xuICAgICAgY29uc3QgW21ham9yLCBtaW5vcl0gPSB1YS5zcGxpdCgnVmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdLnNwbGl0KCcuJykubWFwKG51bSA9PiBOdW1iZXIobnVtKSk7XG4gICAgICBuZWVkUGVyc3BlY3RpdmVGaXggPSBtYWpvciA8IDE2IHx8IG1ham9yID09PSAxNiAmJiBtaW5vciA8IDI7XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgaXNTYWZhcmk6IG5lZWRQZXJzcGVjdGl2ZUZpeCB8fCBpc1NhZmFyaSgpLFxuICAgIG5lZWRQZXJzcGVjdGl2ZUZpeCxcbiAgICBpc1dlYlZpZXc6IC8oaVBob25lfGlQb2R8aVBhZCkuKkFwcGxlV2ViS2l0KD8hLipTYWZhcmkpL2kudGVzdCh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudClcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEJyb3dzZXIoKSB7XG4gIGlmICghYnJvd3Nlcikge1xuICAgIGJyb3dzZXIgPSBjYWxjQnJvd3NlcigpO1xuICB9XG4gIHJldHVybiBicm93c2VyO1xufVxuXG5mdW5jdGlvbiBSZXNpemUoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgbGV0IG9ic2VydmVyID0gbnVsbDtcbiAgbGV0IGFuaW1hdGlvbkZyYW1lID0gbnVsbDtcbiAgY29uc3QgcmVzaXplSGFuZGxlciA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICBlbWl0KCdiZWZvcmVSZXNpemUnKTtcbiAgICBlbWl0KCdyZXNpemUnKTtcbiAgfTtcbiAgY29uc3QgY3JlYXRlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XG4gICAgICBhbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0XG4gICAgICAgIH0gPSBzd2lwZXI7XG4gICAgICAgIGxldCBuZXdXaWR0aCA9IHdpZHRoO1xuICAgICAgICBsZXQgbmV3SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBlbnRyaWVzLmZvckVhY2goX3JlZjIgPT4ge1xuICAgICAgICAgIGxldCB7XG4gICAgICAgICAgICBjb250ZW50Qm94U2l6ZSxcbiAgICAgICAgICAgIGNvbnRlbnRSZWN0LFxuICAgICAgICAgICAgdGFyZ2V0XG4gICAgICAgICAgfSA9IF9yZWYyO1xuICAgICAgICAgIGlmICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBzd2lwZXIuZWwpIHJldHVybjtcbiAgICAgICAgICBuZXdXaWR0aCA9IGNvbnRlbnRSZWN0ID8gY29udGVudFJlY3Qud2lkdGggOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmlubGluZVNpemU7XG4gICAgICAgICAgbmV3SGVpZ2h0ID0gY29udGVudFJlY3QgPyBjb250ZW50UmVjdC5oZWlnaHQgOiAoY29udGVudEJveFNpemVbMF0gfHwgY29udGVudEJveFNpemUpLmJsb2NrU2l6ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChuZXdXaWR0aCAhPT0gd2lkdGggfHwgbmV3SGVpZ2h0ICE9PSBoZWlnaHQpIHtcbiAgICAgICAgICByZXNpemVIYW5kbGVyKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIG9ic2VydmVyLm9ic2VydmUoc3dpcGVyLmVsKTtcbiAgfTtcbiAgY29uc3QgcmVtb3ZlT2JzZXJ2ZXIgPSAoKSA9PiB7XG4gICAgaWYgKGFuaW1hdGlvbkZyYW1lKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUoYW5pbWF0aW9uRnJhbWUpO1xuICAgIH1cbiAgICBpZiAob2JzZXJ2ZXIgJiYgb2JzZXJ2ZXIudW5vYnNlcnZlICYmIHN3aXBlci5lbCkge1xuICAgICAgb2JzZXJ2ZXIudW5vYnNlcnZlKHN3aXBlci5lbCk7XG4gICAgICBvYnNlcnZlciA9IG51bGw7XG4gICAgfVxuICB9O1xuICBjb25zdCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgZW1pdCgnb3JpZW50YXRpb25jaGFuZ2UnKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucmVzaXplT2JzZXJ2ZXIgJiYgdHlwZW9mIHdpbmRvdy5SZXNpemVPYnNlcnZlciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNyZWF0ZU9ic2VydmVyKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICB9KTtcbiAgb24oJ2Rlc3Ryb3knLCAoKSA9PiB7XG4gICAgcmVtb3ZlT2JzZXJ2ZXIoKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgcmVzaXplSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgb3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIE9ic2VydmVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBzd2lwZXIsXG4gICAgZXh0ZW5kUGFyYW1zLFxuICAgIG9uLFxuICAgIGVtaXRcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IG9ic2VydmVycyA9IFtdO1xuICBjb25zdCB3aW5kb3cgPSBnZXRXaW5kb3coKTtcbiAgY29uc3QgYXR0YWNoID0gZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgY29uc3QgT2JzZXJ2ZXJGdW5jID0gd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXI7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgT2JzZXJ2ZXJGdW5jKG11dGF0aW9ucyA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXykgcmV0dXJuO1xuICAgICAgaWYgKG11dGF0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZW1pdCgnb2JzZXJ2ZXJVcGRhdGUnLCBtdXRhdGlvbnNbMF0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBvYnNlcnZlclVwZGF0ZSA9IGZ1bmN0aW9uIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgICBlbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuICAgICAgaWYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShvYnNlcnZlclVwZGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChvYnNlcnZlclVwZGF0ZSwgMCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0YXJnZXQsIHtcbiAgICAgIGF0dHJpYnV0ZXM6IHR5cGVvZiBvcHRpb25zLmF0dHJpYnV0ZXMgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuYXR0cmlidXRlcyxcbiAgICAgIGNoaWxkTGlzdDogdHlwZW9mIG9wdGlvbnMuY2hpbGRMaXN0ID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoaWxkTGlzdCxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHR5cGVvZiBvcHRpb25zLmNoYXJhY3RlckRhdGEgPT09ICd1bmRlZmluZWQnID8gdHJ1ZSA6IG9wdGlvbnMuY2hhcmFjdGVyRGF0YVxuICAgIH0pO1xuICAgIG9ic2VydmVycy5wdXNoKG9ic2VydmVyKTtcbiAgfTtcbiAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMub2JzZXJ2ZXIpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5vYnNlcnZlUGFyZW50cykge1xuICAgICAgY29uc3QgY29udGFpbmVyUGFyZW50cyA9IGVsZW1lbnRQYXJlbnRzKHN3aXBlci5ob3N0RWwpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250YWluZXJQYXJlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGF0dGFjaChjb250YWluZXJQYXJlbnRzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gT2JzZXJ2ZSBjb250YWluZXJcbiAgICBhdHRhY2goc3dpcGVyLmhvc3RFbCwge1xuICAgICAgY2hpbGRMaXN0OiBzd2lwZXIucGFyYW1zLm9ic2VydmVTbGlkZUNoaWxkcmVuXG4gICAgfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBhdHRhY2goc3dpcGVyLndyYXBwZXJFbCwge1xuICAgICAgYXR0cmlidXRlczogZmFsc2VcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZGVzdHJveSA9ICgpID0+IHtcbiAgICBvYnNlcnZlcnMuZm9yRWFjaChvYnNlcnZlciA9PiB7XG4gICAgICBvYnNlcnZlci5kaXNjb25uZWN0KCk7XG4gICAgfSk7XG4gICAgb2JzZXJ2ZXJzLnNwbGljZSgwLCBvYnNlcnZlcnMubGVuZ3RoKTtcbiAgfTtcbiAgZXh0ZW5kUGFyYW1zKHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZVxuICB9KTtcbiAgb24oJ2luaXQnLCBpbml0KTtcbiAgb24oJ2Rlc3Ryb3knLCBkZXN0cm95KTtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cblxudmFyIGV2ZW50c0VtaXR0ZXIgPSB7XG4gIG9uKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IG1ldGhvZCA9IHByaW9yaXR5ID8gJ3Vuc2hpZnQnIDogJ3B1c2gnO1xuICAgIGV2ZW50cy5zcGxpdCgnICcpLmZvckVhY2goZXZlbnQgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9uY2UoZXZlbnRzLCBoYW5kbGVyLCBwcmlvcml0eSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciAhPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHNlbGY7XG4gICAgZnVuY3Rpb24gb25jZUhhbmRsZXIoKSB7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5fX2VtaXR0ZXJQcm94eSkge1xuICAgICAgICBkZWxldGUgb25jZUhhbmRsZXIuX19lbWl0dGVyUHJveHk7XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIG9uY2VIYW5kbGVyLl9fZW1pdHRlclByb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH0sXG4gIG9uQW55KGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycyB8fCBzZWxmLmRlc3Ryb3llZCkgcmV0dXJuIHNlbGY7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBpZiAoc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKSA8IDApIHtcbiAgICAgIHNlbGYuZXZlbnRzQW55TGlzdGVuZXJzW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfVxuICAgIHJldHVybiBzZWxmO1xuICB9LFxuICBvZmZBbnkoaGFuZGxlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGlmICghc2VsZi5ldmVudHNMaXN0ZW5lcnMgfHwgc2VsZi5kZXN0cm95ZWQpIHJldHVybiBzZWxmO1xuICAgIGlmICghc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMpIHJldHVybiBzZWxmO1xuICAgIGNvbnN0IGluZGV4ID0gc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuaW5kZXhPZihoYW5kbGVyKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gICAgcmV0dXJuIHNlbGY7XG4gIH0sXG4gIG9mZihldmVudHMsIGhhbmRsZXIpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSkge1xuICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uZm9yRWFjaCgoZXZlbnRIYW5kbGVyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChldmVudEhhbmRsZXIgPT09IGhhbmRsZXIgfHwgZXZlbnRIYW5kbGVyLl9fZW1pdHRlclByb3h5ICYmIGV2ZW50SGFuZGxlci5fX2VtaXR0ZXJQcm94eSA9PT0gaGFuZGxlcikge1xuICAgICAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSxcbiAgZW1pdCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzIHx8IHNlbGYuZGVzdHJveWVkKSByZXR1cm4gc2VsZjtcbiAgICBpZiAoIXNlbGYuZXZlbnRzTGlzdGVuZXJzKSByZXR1cm4gc2VsZjtcbiAgICBsZXQgZXZlbnRzO1xuICAgIGxldCBkYXRhO1xuICAgIGxldCBjb250ZXh0O1xuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgYXJnc1tfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBkYXRhLnVuc2hpZnQoY29udGV4dCk7XG4gICAgY29uc3QgZXZlbnRzQXJyYXkgPSBBcnJheS5pc0FycmF5KGV2ZW50cykgPyBldmVudHMgOiBldmVudHMuc3BsaXQoJyAnKTtcbiAgICBldmVudHNBcnJheS5mb3JFYWNoKGV2ZW50ID0+IHtcbiAgICAgIGlmIChzZWxmLmV2ZW50c0FueUxpc3RlbmVycyAmJiBzZWxmLmV2ZW50c0FueUxpc3RlbmVycy5sZW5ndGgpIHtcbiAgICAgICAgc2VsZi5ldmVudHNBbnlMaXN0ZW5lcnMuZm9yRWFjaChldmVudEhhbmRsZXIgPT4ge1xuICAgICAgICAgIGV2ZW50SGFuZGxlci5hcHBseShjb250ZXh0LCBbZXZlbnQsIC4uLmRhdGFdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKGV2ZW50SGFuZGxlciA9PiB7XG4gICAgICAgICAgZXZlbnRIYW5kbGVyLmFwcGx5KGNvbnRleHQsIGRhdGEpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2VsZjtcbiAgfVxufTtcblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgbGV0IHdpZHRoO1xuICBsZXQgaGVpZ2h0O1xuICBjb25zdCBlbCA9IHN3aXBlci5lbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJyAmJiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSBudWxsKSB7XG4gICAgd2lkdGggPSBzd2lwZXIucGFyYW1zLndpZHRoO1xuICB9IGVsc2Uge1xuICAgIHdpZHRoID0gZWwuY2xpZW50V2lkdGg7XG4gIH1cbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLmhlaWdodCAhPT0gJ3VuZGVmaW5lZCcgJiYgc3dpcGVyLnBhcmFtcy5oZWlnaHQgIT09IG51bGwpIHtcbiAgICBoZWlnaHQgPSBzd2lwZXIucGFyYW1zLmhlaWdodDtcbiAgfSBlbHNlIHtcbiAgICBoZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKHdpZHRoID09PSAwICYmIHN3aXBlci5pc0hvcml6b250YWwoKSB8fCBoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIFN1YnRyYWN0IHBhZGRpbmdzXG4gIHdpZHRoID0gd2lkdGggLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLWxlZnQnKSB8fCAwLCAxMCkgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXJpZ2h0JykgfHwgMCwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludChlbGVtZW50U3R5bGUoZWwsICdwYWRkaW5nLXRvcCcpIHx8IDAsIDEwKSAtIHBhcnNlSW50KGVsZW1lbnRTdHlsZShlbCwgJ3BhZGRpbmctYm90dG9tJykgfHwgMCwgMTApO1xuICBpZiAoTnVtYmVyLmlzTmFOKHdpZHRoKSkgd2lkdGggPSAwO1xuICBpZiAoTnVtYmVyLmlzTmFOKGhlaWdodCkpIGhlaWdodCA9IDA7XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHNpemU6IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHdpZHRoIDogaGVpZ2h0XG4gIH0pO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGZ1bmN0aW9uIGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUobm9kZSwgbGFiZWwpIHtcbiAgICByZXR1cm4gcGFyc2VGbG9hdChub2RlLmdldFByb3BlcnR5VmFsdWUoc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKGxhYmVsKSkgfHwgMCk7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBzbGlkZXNFbCxcbiAgICBzaXplOiBzd2lwZXJTaXplLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHdyb25nUlRMXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXMgPSBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuICBsZXQgb2Zmc2V0QmVmb3JlID0gcGFyYW1zLnNsaWRlc09mZnNldEJlZm9yZTtcbiAgaWYgKHR5cGVvZiBvZmZzZXRCZWZvcmUgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlLmNhbGwoc3dpcGVyKTtcbiAgfVxuICBsZXQgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXI7XG4gIGlmICh0eXBlb2Ygb2Zmc2V0QWZ0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvZmZzZXRBZnRlciA9IHBhcmFtcy5zbGlkZXNPZmZzZXRBZnRlci5jYWxsKHN3aXBlcik7XG4gIH1cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aDtcbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbi5yZXBsYWNlKCclJywgJycpKSAvIDEwMCAqIHN3aXBlclNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgc3dpcGVyLnZpcnR1YWxTaXplID0gLXNwYWNlQmV0d2VlbjtcblxuICAvLyByZXNldCBtYXJnaW5zXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIGlmIChydGwpIHtcbiAgICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luTGVmdCA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZUVsLnN0eWxlLm1hcmdpblJpZ2h0ID0gJyc7XG4gICAgfVxuICAgIHNsaWRlRWwuc3R5bGUubWFyZ2luQm90dG9tID0gJyc7XG4gICAgc2xpZGVFbC5zdHlsZS5tYXJnaW5Ub3AgPSAnJztcbiAgfSk7XG5cbiAgLy8gcmVzZXQgY3NzTW9kZSBvZmZzZXRzXG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzZXRDU1NQcm9wZXJ0eSh3cmFwcGVyRWwsICctLXN3aXBlci1jZW50ZXJlZC1vZmZzZXQtYmVmb3JlJywgJycpO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsICcnKTtcbiAgfVxuICBjb25zdCBncmlkRW5hYmxlZCA9IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxICYmIHN3aXBlci5ncmlkO1xuICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZ3JpZC5pbml0U2xpZGVzKHNsaWRlcyk7XG4gIH0gZWxzZSBpZiAoc3dpcGVyLmdyaWQpIHtcbiAgICBzd2lwZXIuZ3JpZC51bnNldFNsaWRlcygpO1xuICB9XG5cbiAgLy8gQ2FsYyBzbGlkZXNcbiAgbGV0IHNsaWRlU2l6ZTtcbiAgY29uc3Qgc2hvdWxkUmVzZXRTbGlkZVNpemUgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5icmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhwYXJhbXMuYnJlYWtwb2ludHMpLmZpbHRlcihrZXkgPT4ge1xuICAgIHJldHVybiB0eXBlb2YgcGFyYW1zLmJyZWFrcG9pbnRzW2tleV0uc2xpZGVzUGVyVmlldyAhPT0gJ3VuZGVmaW5lZCc7XG4gIH0pLmxlbmd0aCA+IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGxldCBzbGlkZTtcbiAgICBpZiAoc2xpZGVzW2ldKSBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5ncmlkLnVwZGF0ZVNsaWRlKGksIHNsaWRlLCBzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldICYmIGVsZW1lbnRTdHlsZShzbGlkZSwgJ2Rpc3BsYXknKSA9PT0gJ25vbmUnKSBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIGlmIChzaG91bGRSZXNldFNsaWRlU2l6ZSkge1xuICAgICAgICBzbGlkZXNbaV0uc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGBgO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHNsaWRlKTtcbiAgICAgIGNvbnN0IGN1cnJlbnRUcmFuc2Zvcm0gPSBzbGlkZS5zdHlsZS50cmFuc2Zvcm07XG4gICAgICBjb25zdCBjdXJyZW50V2ViS2l0VHJhbnNmb3JtID0gc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUud2Via2l0VHJhbnNmb3JtID0gJ25vbmUnO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICAgICAgc2xpZGVTaXplID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gZWxlbWVudE91dGVyU2l6ZShzbGlkZSwgJ3dpZHRoJywgdHJ1ZSkgOiBlbGVtZW50T3V0ZXJTaXplKHNsaWRlLCAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgY29uc3Qgd2lkdGggPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnd2lkdGgnKTtcbiAgICAgICAgY29uc3QgcGFkZGluZ0xlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAncGFkZGluZy1sZWZ0Jyk7XG4gICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IGdldERpcmVjdGlvblByb3BlcnR5VmFsdWUoc2xpZGVTdHlsZXMsICdwYWRkaW5nLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IG1hcmdpbkxlZnQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLWxlZnQnKTtcbiAgICAgICAgY29uc3QgbWFyZ2luUmlnaHQgPSBnZXREaXJlY3Rpb25Qcm9wZXJ0eVZhbHVlKHNsaWRlU3R5bGVzLCAnbWFyZ2luLXJpZ2h0Jyk7XG4gICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgaWYgKGJveFNpemluZyAmJiBib3hTaXppbmcgPT09ICdib3JkZXItYm94Jykge1xuICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGNsaWVudFdpZHRoLFxuICAgICAgICAgICAgb2Zmc2V0V2lkdGhcbiAgICAgICAgICB9ID0gc2xpZGU7XG4gICAgICAgICAgc2xpZGVTaXplID0gd2lkdGggKyBwYWRkaW5nTGVmdCArIHBhZGRpbmdSaWdodCArIG1hcmdpbkxlZnQgKyBtYXJnaW5SaWdodCArIChvZmZzZXRXaWR0aCAtIGNsaWVudFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGUuc3R5bGUudHJhbnNmb3JtID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm07XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVTaXplID0gTWF0aC5mbG9vcihzbGlkZVNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZVNpemUgPSAoc3dpcGVyU2l6ZSAtIChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSAvIHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlU2l6ZSA9IE1hdGguZmxvb3Ioc2xpZGVTaXplKTtcbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgc2xpZGVzW2ldLnN0eWxlW3N3aXBlci5nZXREaXJlY3Rpb25MYWJlbCgnd2lkdGgnKV0gPSBgJHtzbGlkZVNpemV9cHhgO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc2xpZGVzW2ldKSB7XG4gICAgICBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplID0gc2xpZGVTaXplO1xuICAgIH1cbiAgICBzbGlkZXNTaXplc0dyaWQucHVzaChzbGlkZVNpemUpO1xuICAgIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplIC8gMiArIHByZXZTbGlkZVNpemUgLyAyICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSBzd2lwZXJTaXplIC8gMiAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChpID09PSAwKSBzbGlkZVBvc2l0aW9uID0gc2xpZGVQb3NpdGlvbiAtIHN3aXBlclNpemUgLyAyIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKE1hdGguYWJzKHNsaWRlUG9zaXRpb24pIDwgMSAvIDEwMDApIHNsaWRlUG9zaXRpb24gPSAwO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlUG9zaXRpb24gPSBNYXRoLmZsb29yKHNsaWRlUG9zaXRpb24pO1xuICAgICAgaWYgKGluZGV4ICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4IC0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIGluZGV4KSkgJSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgfVxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG4gICAgcHJldlNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICBpbmRleCArPSAxO1xuICB9XG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGgubWF4KHN3aXBlci52aXJ0dWFsU2l6ZSwgc3dpcGVyU2l6ZSkgKyBvZmZzZXRBZnRlcjtcbiAgaWYgKHJ0bCAmJiB3cm9uZ1JUTCAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnY292ZXJmbG93JykpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGUud2lkdGggPSBgJHtzd2lwZXIudmlydHVhbFNpemUgKyBzcGFjZUJldHdlZW59cHhgO1xuICB9XG4gIGlmIChwYXJhbXMuc2V0V3JhcHBlclNpemUpIHtcbiAgICB3cmFwcGVyRWwuc3R5bGVbc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCd3aWR0aCcpXSA9IGAke3N3aXBlci52aXJ0dWFsU2l6ZSArIHNwYWNlQmV0d2Vlbn1weGA7XG4gIH1cbiAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgc3dpcGVyLmdyaWQudXBkYXRlV3JhcHBlclNpemUoc2xpZGVTaXplLCBzbmFwR3JpZCk7XG4gIH1cblxuICAvLyBSZW1vdmUgbGFzdCBncmlkIGVsZW1lbnRzIGRlcGVuZGluZyBvbiB3aWR0aFxuICBpZiAoIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgIGNvbnN0IG5ld1NsaWRlc0dyaWQgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNuYXBHcmlkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZXNHcmlkSXRlbSA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgaWYgKHNuYXBHcmlkW2ldIDw9IHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIHtcbiAgICAgICAgbmV3U2xpZGVzR3JpZC5wdXNoKHNsaWRlc0dyaWRJdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIGlmIChNYXRoLmZsb29yKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpIC0gTWF0aC5mbG9vcihzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSkgPiAxKSB7XG4gICAgICBzbmFwR3JpZC5wdXNoKHN3aXBlci52aXJ0dWFsU2l6ZSAtIHN3aXBlclNpemUpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wKSB7XG4gICAgY29uc3Qgc2l6ZSA9IHNsaWRlc1NpemVzR3JpZFswXSArIHNwYWNlQmV0d2VlbjtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSkge1xuICAgICAgY29uc3QgZ3JvdXBzID0gTWF0aC5jZWlsKChzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNBZnRlcikgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgY29uc3QgZ3JvdXBTaXplID0gc2l6ZSAqIHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBzOyBpICs9IDEpIHtcbiAgICAgICAgc25hcEdyaWQucHVzaChzbmFwR3JpZFtzbmFwR3JpZC5sZW5ndGggLSAxXSArIGdyb3VwU2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQmVmb3JlICsgc3dpcGVyLnZpcnR1YWwuc2xpZGVzQWZ0ZXI7IGkgKz0gMSkge1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSkge1xuICAgICAgICBzbmFwR3JpZC5wdXNoKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICB9XG4gICAgICBzbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZFtzbGlkZXNHcmlkLmxlbmd0aCAtIDFdICsgc2l6ZSk7XG4gICAgICBzd2lwZXIudmlydHVhbFNpemUgKz0gc2l6ZTtcbiAgICB9XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCA9PT0gMCkgc25hcEdyaWQgPSBbMF07XG4gIGlmIChzcGFjZUJldHdlZW4gIT09IDApIHtcbiAgICBjb25zdCBrZXkgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYgcnRsID8gJ21hcmdpbkxlZnQnIDogc3dpcGVyLmdldERpcmVjdGlvbkxhYmVsKCdtYXJnaW5SaWdodCcpO1xuICAgIHNsaWRlcy5maWx0ZXIoKF8sIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgIGlmICghcGFyYW1zLmNzc01vZGUgfHwgcGFyYW1zLmxvb3ApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNsaWRlSW5kZXggPT09IHNsaWRlcy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICBzbGlkZUVsLnN0eWxlW2tleV0gPSBgJHtzcGFjZUJldHdlZW59cHhgO1xuICAgIH0pO1xuICB9XG4gIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKHNsaWRlU2l6ZVZhbHVlID0+IHtcbiAgICAgIGFsbFNsaWRlc1NpemUgKz0gc2xpZGVTaXplVmFsdWUgKyAoc3BhY2VCZXR3ZWVuIHx8IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gc3BhY2VCZXR3ZWVuO1xuICAgIGNvbnN0IG1heFNuYXAgPSBhbGxTbGlkZXNTaXplIC0gc3dpcGVyU2l6ZTtcbiAgICBzbmFwR3JpZCA9IHNuYXBHcmlkLm1hcChzbmFwID0+IHtcbiAgICAgIGlmIChzbmFwIDw9IDApIHJldHVybiAtb2Zmc2V0QmVmb3JlO1xuICAgICAgaWYgKHNuYXAgPiBtYXhTbmFwKSByZXR1cm4gbWF4U25hcCArIG9mZnNldEFmdGVyO1xuICAgICAgcmV0dXJuIHNuYXA7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jZW50ZXJJbnN1ZmZpY2llbnRTbGlkZXMpIHtcbiAgICBsZXQgYWxsU2xpZGVzU2l6ZSA9IDA7XG4gICAgc2xpZGVzU2l6ZXNHcmlkLmZvckVhY2goc2xpZGVTaXplVmFsdWUgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChzcGFjZUJldHdlZW4gfHwgMCk7XG4gICAgfSk7XG4gICAgYWxsU2xpZGVzU2l6ZSAtPSBzcGFjZUJldHdlZW47XG4gICAgaWYgKGFsbFNsaWRlc1NpemUgPCBzd2lwZXJTaXplKSB7XG4gICAgICBjb25zdCBhbGxTbGlkZXNPZmZzZXQgPSAoc3dpcGVyU2l6ZSAtIGFsbFNsaWRlc1NpemUpIC8gMjtcbiAgICAgIHNuYXBHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbmFwR3JpZFtzbmFwSW5kZXhdID0gc25hcCAtIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgICAgc2xpZGVzR3JpZC5mb3JFYWNoKChzbmFwLCBzbmFwSW5kZXgpID0+IHtcbiAgICAgICAgc2xpZGVzR3JpZFtzbmFwSW5kZXhdID0gc25hcCArIGFsbFNsaWRlc09mZnNldDtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBPYmplY3QuYXNzaWduKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZFxuICB9KTtcbiAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyAmJiBwYXJhbXMuY3NzTW9kZSAmJiAhcGFyYW1zLmNlbnRlcmVkU2xpZGVzQm91bmRzKSB7XG4gICAgc2V0Q1NTUHJvcGVydHkod3JhcHBlckVsLCAnLS1zd2lwZXItY2VudGVyZWQtb2Zmc2V0LWJlZm9yZScsIGAkey1zbmFwR3JpZFswXX1weGApO1xuICAgIHNldENTU1Byb3BlcnR5KHdyYXBwZXJFbCwgJy0tc3dpcGVyLWNlbnRlcmVkLW9mZnNldC1hZnRlcicsIGAke3N3aXBlci5zaXplIC8gMiAtIHNsaWRlc1NpemVzR3JpZFtzbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gLyAyfXB4YCk7XG4gICAgY29uc3QgYWRkVG9TbmFwR3JpZCA9IC1zd2lwZXIuc25hcEdyaWRbMF07XG4gICAgY29uc3QgYWRkVG9TbGlkZXNHcmlkID0gLXN3aXBlci5zbGlkZXNHcmlkWzBdO1xuICAgIHN3aXBlci5zbmFwR3JpZCA9IHN3aXBlci5zbmFwR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbmFwR3JpZCk7XG4gICAgc3dpcGVyLnNsaWRlc0dyaWQgPSBzd2lwZXIuc2xpZGVzR3JpZC5tYXAodiA9PiB2ICsgYWRkVG9TbGlkZXNHcmlkKTtcbiAgfVxuICBpZiAoc2xpZGVzTGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0xlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc25hcEdyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NuYXBHcmlkTGVuZ3RoKSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdykgc3dpcGVyLmNoZWNrT3ZlcmZsb3coKTtcbiAgICBzd2lwZXIuZW1pdCgnc25hcEdyaWRMZW5ndGhDaGFuZ2UnKTtcbiAgfVxuICBpZiAoc2xpZGVzR3JpZC5sZW5ndGggIT09IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZXNHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXNVcGRhdGVkJyk7XG4gIGlmICghaXNWaXJ0dWFsICYmICFwYXJhbXMuY3NzTW9kZSAmJiAocGFyYW1zLmVmZmVjdCA9PT0gJ3NsaWRlJyB8fCBwYXJhbXMuZWZmZWN0ID09PSAnZmFkZScpKSB7XG4gICAgY29uc3QgYmFja0ZhY2VIaWRkZW5DbGFzcyA9IGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWJhY2tmYWNlLWhpZGRlbmA7XG4gICAgY29uc3QgaGFzQ2xhc3NCYWNrZmFjZUNsYXNzQWRkZWQgPSBzd2lwZXIuZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGJhY2tGYWNlSGlkZGVuQ2xhc3MpO1xuICAgIGlmIChzbGlkZXNMZW5ndGggPD0gcGFyYW1zLm1heEJhY2tmYWNlSGlkZGVuU2xpZGVzKSB7XG4gICAgICBpZiAoIWhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9IGVsc2UgaWYgKGhhc0NsYXNzQmFja2ZhY2VDbGFzc0FkZGVkKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShiYWNrRmFjZUhpZGRlbkNsYXNzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodChzcGVlZCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBhY3RpdmVTbGlkZXMgPSBbXTtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICBjb25zdCBnZXRTbGlkZUJ5SW5kZXggPSBpbmRleCA9PiB7XG4gICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbc3dpcGVyLmdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpXTtcbiAgICB9XG4gICAgcmV0dXJuIHN3aXBlci5zbGlkZXNbaW5kZXhdO1xuICB9O1xuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICAoc3dpcGVyLnZpc2libGVTbGlkZXMgfHwgW10pLmZvckVhY2goc2xpZGUgPT4ge1xuICAgICAgICBhY3RpdmVTbGlkZXMucHVzaChzbGlkZSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChpID0gMDsgaSA8IE1hdGguY2VpbChzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcpOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggKyBpO1xuICAgICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAmJiAhaXNWaXJ0dWFsKSBicmVhaztcbiAgICAgICAgYWN0aXZlU2xpZGVzLnB1c2goZ2V0U2xpZGVCeUluZGV4KGluZGV4KSk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKGdldFNsaWRlQnlJbmRleChzd2lwZXIuYWN0aXZlSW5kZXgpKTtcbiAgfVxuXG4gIC8vIEZpbmQgbmV3IGhlaWdodCBmcm9tIGhpZ2hlc3Qgc2xpZGUgaW4gdmlld1xuICBmb3IgKGkgPSAwOyBpIDwgYWN0aXZlU2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBhY3RpdmVTbGlkZXNbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCBoZWlnaHQgPSBhY3RpdmVTbGlkZXNbaV0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgbmV3SGVpZ2h0ID0gaGVpZ2h0ID4gbmV3SGVpZ2h0ID8gaGVpZ2h0IDogbmV3SGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gIC8vIFVwZGF0ZSBIZWlnaHRcbiAgaWYgKG5ld0hlaWdodCB8fCBuZXdIZWlnaHQgPT09IDApIHN3aXBlci53cmFwcGVyRWwuc3R5bGUuaGVpZ2h0ID0gYCR7bmV3SGVpZ2h0fXB4YDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzT2Zmc2V0KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBzbGlkZXMgPSBzd2lwZXIuc2xpZGVzO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgY29uc3QgbWludXNPZmZzZXQgPSBzd2lwZXIuaXNFbGVtZW50ID8gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRMZWZ0IDogc3dpcGVyLndyYXBwZXJFbC5vZmZzZXRUb3AgOiAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHNsaWRlc1tpXS5zd2lwZXJTbGlkZU9mZnNldCA9IChzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBzbGlkZXNbaV0ub2Zmc2V0TGVmdCA6IHNsaWRlc1tpXS5vZmZzZXRUb3ApIC0gbWludXNPZmZzZXQgLSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IHRoaXMgJiYgdGhpcy50cmFuc2xhdGUgfHwgMDtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHNuYXBHcmlkXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICBsZXQgb2Zmc2V0Q2VudGVyID0gLXRyYW5zbGF0ZTtcbiAgaWYgKHJ0bCkgb2Zmc2V0Q2VudGVyID0gdHJhbnNsYXRlO1xuXG4gIC8vIFZpc2libGUgU2xpZGVzXG4gIHNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuc2xpZGVWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUZ1bGx5VmlzaWJsZUNsYXNzKTtcbiAgfSk7XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcyA9IFtdO1xuICBzd2lwZXIudmlzaWJsZVNsaWRlcyA9IFtdO1xuICBsZXQgc3BhY2VCZXR3ZWVuID0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgaWYgKHR5cGVvZiBzcGFjZUJldHdlZW4gPT09ICdzdHJpbmcnICYmIHNwYWNlQmV0d2Vlbi5pbmRleE9mKCclJykgPj0gMCkge1xuICAgIHNwYWNlQmV0d2VlbiA9IHBhcnNlRmxvYXQoc3BhY2VCZXR3ZWVuLnJlcGxhY2UoJyUnLCAnJykpIC8gMTAwICogc3dpcGVyLnNpemU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNwYWNlQmV0d2VlbiA9PT0gJ3N0cmluZycpIHtcbiAgICBzcGFjZUJldHdlZW4gPSBwYXJzZUZsb2F0KHNwYWNlQmV0d2Vlbik7XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBsZXQgc2xpZGVPZmZzZXQgPSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldDtcbiAgICBpZiAocGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzbGlkZU9mZnNldCAtPSBzbGlkZXNbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgfVxuICAgIGNvbnN0IHNsaWRlUHJvZ3Jlc3MgPSAob2Zmc2V0Q2VudGVyICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgb3JpZ2luYWxTbGlkZVByb2dyZXNzID0gKG9mZnNldENlbnRlciAtIHNuYXBHcmlkWzBdICsgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSA6IDApIC0gc2xpZGVPZmZzZXQpIC8gKHNsaWRlLnN3aXBlclNsaWRlU2l6ZSArIHNwYWNlQmV0d2Vlbik7XG4gICAgY29uc3Qgc2xpZGVCZWZvcmUgPSAtKG9mZnNldENlbnRlciAtIHNsaWRlT2Zmc2V0KTtcbiAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgIGNvbnN0IGlzRnVsbHlWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8PSBzd2lwZXIuc2l6ZSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbaV07XG4gICAgY29uc3QgaXNWaXNpYmxlID0gc2xpZGVCZWZvcmUgPj0gMCAmJiBzbGlkZUJlZm9yZSA8IHN3aXBlci5zaXplIC0gMSB8fCBzbGlkZUFmdGVyID4gMSAmJiBzbGlkZUFmdGVyIDw9IHN3aXBlci5zaXplIHx8IHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZTtcbiAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICBzd2lwZXIudmlzaWJsZVNsaWRlcy5wdXNoKHNsaWRlKTtcbiAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgc2xpZGVzW2ldLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGlzRnVsbHlWaXNpYmxlKSB7XG4gICAgICBzbGlkZXNbaV0uY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVGdWxseVZpc2libGVDbGFzcyk7XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICAgIHNsaWRlLm9yaWdpbmFsUHJvZ3Jlc3MgPSBydGwgPyAtb3JpZ2luYWxTbGlkZVByb2dyZXNzIDogb3JpZ2luYWxTbGlkZVByb2dyZXNzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzKHRyYW5zbGF0ZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAodHlwZW9mIHRyYW5zbGF0ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBjb25zdCBtdWx0aXBsaWVyID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC0xIDogMTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB0cmFuc2xhdGUgPSBzd2lwZXIgJiYgc3dpcGVyLnRyYW5zbGF0ZSAmJiBzd2lwZXIudHJhbnNsYXRlICogbXVsdGlwbGllciB8fCAwO1xuICB9XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQge1xuICAgIHByb2dyZXNzLFxuICAgIGlzQmVnaW5uaW5nLFxuICAgIGlzRW5kLFxuICAgIHByb2dyZXNzTG9vcFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCB3YXNCZWdpbm5pbmcgPSBpc0JlZ2lubmluZztcbiAgY29uc3Qgd2FzRW5kID0gaXNFbmQ7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIHByb2dyZXNzID0gMDtcbiAgICBpc0JlZ2lubmluZyA9IHRydWU7XG4gICAgaXNFbmQgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHByb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgICBjb25zdCBpc0JlZ2lubmluZ1JvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIDwgMTtcbiAgICBjb25zdCBpc0VuZFJvdW5kZWQgPSBNYXRoLmFicyh0cmFuc2xhdGUgLSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIDwgMTtcbiAgICBpc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nUm91bmRlZCB8fCBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gaXNFbmRSb3VuZGVkIHx8IHByb2dyZXNzID49IDE7XG4gICAgaWYgKGlzQmVnaW5uaW5nUm91bmRlZCkgcHJvZ3Jlc3MgPSAwO1xuICAgIGlmIChpc0VuZFJvdW5kZWQpIHByb2dyZXNzID0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YSgwKTtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMSk7XG4gICAgY29uc3QgZmlyc3RTbGlkZVRyYW5zbGF0ZSA9IHN3aXBlci5zbGlkZXNHcmlkW2ZpcnN0U2xpZGVJbmRleF07XG4gICAgY29uc3QgbGFzdFNsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbbGFzdFNsaWRlSW5kZXhdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZU1heCA9IHN3aXBlci5zbGlkZXNHcmlkW3N3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHRyYW5zbGF0ZUFicyA9IE1hdGguYWJzKHRyYW5zbGF0ZSk7XG4gICAgaWYgKHRyYW5zbGF0ZUFicyA+PSBmaXJzdFNsaWRlVHJhbnNsYXRlKSB7XG4gICAgICBwcm9ncmVzc0xvb3AgPSAodHJhbnNsYXRlQWJzIC0gZmlyc3RTbGlkZVRyYW5zbGF0ZSkgLyB0cmFuc2xhdGVNYXg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb2dyZXNzTG9vcCA9ICh0cmFuc2xhdGVBYnMgKyB0cmFuc2xhdGVNYXggLSBsYXN0U2xpZGVUcmFuc2xhdGUpIC8gdHJhbnNsYXRlTWF4O1xuICAgIH1cbiAgICBpZiAocHJvZ3Jlc3NMb29wID4gMSkgcHJvZ3Jlc3NMb29wIC09IDE7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcm9ncmVzcyxcbiAgICBwcm9ncmVzc0xvb3AsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmRcbiAgfSk7XG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgcGFyYW1zLmF1dG9IZWlnaHQpIHN3aXBlci51cGRhdGVTbGlkZXNQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAod2FzQmVnaW5uaW5nICYmICFpc0JlZ2lubmluZyB8fCB3YXNFbmQgJiYgIWlzRW5kKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2Zyb21FZGdlJyk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgc2xpZGVzLFxuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbCxcbiAgICBhY3RpdmVJbmRleFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBjb25zdCBnZXRGaWx0ZXJlZFNsaWRlID0gc2VsZWN0b3IgPT4ge1xuICAgIHJldHVybiBlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAuJHtwYXJhbXMuc2xpZGVDbGFzc30ke3NlbGVjdG9yfSwgc3dpcGVyLXNsaWRlJHtzZWxlY3Rvcn1gKVswXTtcbiAgfTtcbiAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gIH0pO1xuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGxldCBwcmV2U2xpZGU7XG4gIGxldCBuZXh0U2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICAgIGxldCBzbGlkZUluZGV4ID0gYWN0aXZlSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoICsgc2xpZGVJbmRleDtcbiAgICAgIGlmIChzbGlkZUluZGV4ID49IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGgpIHNsaWRlSW5kZXggLT0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aDtcbiAgICAgIGFjdGl2ZVNsaWRlID0gZ2V0RmlsdGVyZWRTbGlkZShgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZUluZGV4fVwiXWApO1xuICAgIH0gZWxzZSB7XG4gICAgICBhY3RpdmVTbGlkZSA9IGdldEZpbHRlcmVkU2xpZGUoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jb2x1bW4gPT09IGFjdGl2ZUluZGV4KVswXTtcbiAgICAgIG5leHRTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggKyAxKVswXTtcbiAgICAgIHByZXZTbGlkZSA9IHNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXggLSAxKVswXTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlU2xpZGUgPSBzbGlkZXNbYWN0aXZlSW5kZXhdO1xuICAgIH1cbiAgfVxuICBpZiAoYWN0aXZlU2xpZGUpIHtcbiAgICAvLyBBY3RpdmUgY2xhc3Nlc1xuICAgIGFjdGl2ZVNsaWRlLmNsYXNzTGlzdC5hZGQocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgaWYgKG5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVOZXh0Q2xhc3MpO1xuICAgICAgfVxuICAgICAgaWYgKHByZXZTbGlkZSkge1xuICAgICAgICBwcmV2U2xpZGUuY2xhc3NMaXN0LmFkZChwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBOZXh0IFNsaWRlXG4gICAgICBuZXh0U2xpZGUgPSBlbGVtZW50TmV4dEFsbChhY3RpdmVTbGlkZSwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYClbMF07XG4gICAgICBpZiAocGFyYW1zLmxvb3AgJiYgIW5leHRTbGlkZSkge1xuICAgICAgICBuZXh0U2xpZGUgPSBzbGlkZXNbMF07XG4gICAgICB9XG4gICAgICBpZiAobmV4dFNsaWRlKSB7XG4gICAgICAgIG5leHRTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXYgU2xpZGVcbiAgICAgIHByZXZTbGlkZSA9IGVsZW1lbnRQcmV2QWxsKGFjdGl2ZVNsaWRlLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKVswXTtcbiAgICAgIGlmIChwYXJhbXMubG9vcCAmJiAhcHJldlNsaWRlID09PSAwKSB7XG4gICAgICAgIHByZXZTbGlkZSA9IHNsaWRlc1tzbGlkZXMubGVuZ3RoIC0gMV07XG4gICAgICB9XG4gICAgICBpZiAocHJldlNsaWRlKSB7XG4gICAgICAgIHByZXZTbGlkZS5jbGFzc0xpc3QuYWRkKHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0U2xpZGVzQ2xhc3NlcygpO1xufVxuXG5jb25zdCBwcm9jZXNzTGF6eVByZWxvYWRlciA9IChzd2lwZXIsIGltYWdlRWwpID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gKCkgPT4gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gO1xuICBjb25zdCBzbGlkZUVsID0gaW1hZ2VFbC5jbG9zZXN0KHNsaWRlU2VsZWN0b3IoKSk7XG4gIGlmIChzbGlkZUVsKSB7XG4gICAgbGV0IGxhenlFbCA9IHNsaWRlRWwucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgaWYgKCFsYXp5RWwgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICBsYXp5RWwgPSBzbGlkZUVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihgLiR7c3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZGVyQ2xhc3N9YCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpbml0IGxhdGVyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgaWYgKHNsaWRlRWwuc2hhZG93Um9vdCkge1xuICAgICAgICAgICAgbGF6eUVsID0gc2xpZGVFbC5zaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoYC4ke3N3aXBlci5wYXJhbXMubGF6eVByZWxvYWRlckNsYXNzfWApO1xuICAgICAgICAgICAgaWYgKGxhenlFbCkgbGF6eUVsLnJlbW92ZSgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChsYXp5RWwpIGxhenlFbC5yZW1vdmUoKTtcbiAgfVxufTtcbmNvbnN0IHVubGF6eSA9IChzd2lwZXIsIGluZGV4KSA9PiB7XG4gIGlmICghc3dpcGVyLnNsaWRlc1tpbmRleF0pIHJldHVybjtcbiAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5zbGlkZXNbaW5kZXhdLnF1ZXJ5U2VsZWN0b3IoJ1tsb2FkaW5nPVwibGF6eVwiXScpO1xuICBpZiAoaW1hZ2VFbCkgaW1hZ2VFbC5yZW1vdmVBdHRyaWJ1dGUoJ2xvYWRpbmcnKTtcbn07XG5jb25zdCBwcmVsb2FkID0gc3dpcGVyID0+IHtcbiAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLnBhcmFtcykgcmV0dXJuO1xuICBsZXQgYW1vdW50ID0gc3dpcGVyLnBhcmFtcy5sYXp5UHJlbG9hZFByZXZOZXh0O1xuICBjb25zdCBsZW4gPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgaWYgKCFsZW4gfHwgIWFtb3VudCB8fCBhbW91bnQgPCAwKSByZXR1cm47XG4gIGFtb3VudCA9IE1hdGgubWluKGFtb3VudCwgbGVuKTtcbiAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTtcbiAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3MgPiAxKSB7XG4gICAgY29uc3QgYWN0aXZlQ29sdW1uID0gYWN0aXZlSW5kZXg7XG4gICAgY29uc3QgcHJlbG9hZENvbHVtbnMgPSBbYWN0aXZlQ29sdW1uIC0gYW1vdW50XTtcbiAgICBwcmVsb2FkQ29sdW1ucy5wdXNoKC4uLkFycmF5LmZyb20oe1xuICAgICAgbGVuZ3RoOiBhbW91bnRcbiAgICB9KS5tYXAoKF8sIGkpID0+IHtcbiAgICAgIHJldHVybiBhY3RpdmVDb2x1bW4gKyBzbGlkZXNQZXJWaWV3ICsgaTtcbiAgICB9KSk7XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKChzbGlkZUVsLCBpKSA9PiB7XG4gICAgICBpZiAocHJlbG9hZENvbHVtbnMuaW5jbHVkZXMoc2xpZGVFbC5jb2x1bW4pKSB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3Qgc2xpZGVJbmRleExhc3RJblZpZXcgPSBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXcgLSAxO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5yZXdpbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gYW1vdW50OyBpIDw9IHNsaWRlSW5kZXhMYXN0SW5WaWV3ICsgYW1vdW50OyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHJlYWxJbmRleCA9IChpICUgbGVuICsgbGVuKSAlIGxlbjtcbiAgICAgIGlmIChyZWFsSW5kZXggPCBhY3RpdmVJbmRleCB8fCByZWFsSW5kZXggPiBzbGlkZUluZGV4TGFzdEluVmlldykgdW5sYXp5KHN3aXBlciwgcmVhbEluZGV4KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IE1hdGgubWF4KGFjdGl2ZUluZGV4IC0gYW1vdW50LCAwKTsgaSA8PSBNYXRoLm1pbihzbGlkZUluZGV4TGFzdEluVmlldyArIGFtb3VudCwgbGVuIC0gMSk7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgIT09IGFjdGl2ZUluZGV4ICYmIChpID4gc2xpZGVJbmRleExhc3RJblZpZXcgfHwgaSA8IGFjdGl2ZUluZGV4KSkge1xuICAgICAgICB1bmxhenkoc3dpcGVyLCBpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZUluZGV4QnlUcmFuc2xhdGUoc3dpcGVyKSB7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXNHcmlkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBsZXQgYWN0aXZlSW5kZXg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0gLSAoc2xpZGVzR3JpZFtpICsgMV0gLSBzbGlkZXNHcmlkW2ldKSAvIDIpIHtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBpO1xuICAgICAgfSBlbHNlIGlmICh0cmFuc2xhdGUgPj0gc2xpZGVzR3JpZFtpXSAmJiB0cmFuc2xhdGUgPCBzbGlkZXNHcmlkW2kgKyAxXSkge1xuICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICB9XG4gIH1cbiAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgaWYgKHBhcmFtcy5ub3JtYWxpemVTbGlkZUluZGV4KSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4IDwgMCB8fCB0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSBhY3RpdmVJbmRleCA9IDA7XG4gIH1cbiAgcmV0dXJuIGFjdGl2ZUluZGV4O1xufVxuZnVuY3Rpb24gdXBkYXRlQWN0aXZlSW5kZXgobmV3QWN0aXZlSW5kZXgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgY29uc3Qge1xuICAgIHNuYXBHcmlkLFxuICAgIHBhcmFtcyxcbiAgICBhY3RpdmVJbmRleDogcHJldmlvdXNJbmRleCxcbiAgICByZWFsSW5kZXg6IHByZXZpb3VzUmVhbEluZGV4LFxuICAgIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gbmV3QWN0aXZlSW5kZXg7XG4gIGxldCBzbmFwSW5kZXg7XG4gIGNvbnN0IGdldFZpcnR1YWxSZWFsSW5kZXggPSBhSW5kZXggPT4ge1xuICAgIGxldCByZWFsSW5kZXggPSBhSW5kZXggLSBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmU7XG4gICAgaWYgKHJlYWxJbmRleCA8IDApIHtcbiAgICAgIHJlYWxJbmRleCA9IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyByZWFsSW5kZXg7XG4gICAgfVxuICAgIGlmIChyZWFsSW5kZXggPj0gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCkge1xuICAgICAgcmVhbEluZGV4IC09IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiByZWFsSW5kZXg7XG4gIH07XG4gIGlmICh0eXBlb2YgYWN0aXZlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlSW5kZXggPSBnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlKHN3aXBlcik7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmluZGV4T2YodHJhbnNsYXRlKSA+PSAwKSB7XG4gICAgc25hcEluZGV4ID0gc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHNraXAgPSBNYXRoLm1pbihwYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBhY3RpdmVJbmRleCk7XG4gICAgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKGFjdGl2ZUluZGV4IC0gc2tpcCkgLyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICB9XG4gIGlmIChzbmFwSW5kZXggPj0gc25hcEdyaWQubGVuZ3RoKSBzbmFwSW5kZXggPSBzbmFwR3JpZC5sZW5ndGggLSAxO1xuICBpZiAoYWN0aXZlSW5kZXggPT09IHByZXZpb3VzSW5kZXggJiYgIXN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGFjdGl2ZUluZGV4ID09PSBwcmV2aW91c0luZGV4ICYmIHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgIHN3aXBlci5yZWFsSW5kZXggPSBnZXRWaXJ0dWFsUmVhbEluZGV4KGFjdGl2ZUluZGV4KTtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBsZXQgcmVhbEluZGV4O1xuICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBwYXJhbXMubG9vcCkge1xuICAgIHJlYWxJbmRleCA9IGdldFZpcnR1YWxSZWFsSW5kZXgoYWN0aXZlSW5kZXgpO1xuICB9IGVsc2UgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgY29uc3QgZmlyc3RTbGlkZUluQ29sdW1uID0gc3dpcGVyLnNsaWRlcy5maWx0ZXIoc2xpZGVFbCA9PiBzbGlkZUVsLmNvbHVtbiA9PT0gYWN0aXZlSW5kZXgpWzBdO1xuICAgIGxldCBhY3RpdmVTbGlkZUluZGV4ID0gcGFyc2VJbnQoZmlyc3RTbGlkZUluQ29sdW1uLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIGlmIChOdW1iZXIuaXNOYU4oYWN0aXZlU2xpZGVJbmRleCkpIHtcbiAgICAgIGFjdGl2ZVNsaWRlSW5kZXggPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzLmluZGV4T2YoZmlyc3RTbGlkZUluQ29sdW1uKSwgMCk7XG4gICAgfVxuICAgIHJlYWxJbmRleCA9IE1hdGguZmxvb3IoYWN0aXZlU2xpZGVJbmRleCAvIHBhcmFtcy5ncmlkLnJvd3MpO1xuICB9IGVsc2UgaWYgKHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdKSB7XG4gICAgY29uc3Qgc2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXNbYWN0aXZlSW5kZXhdLmdldEF0dHJpYnV0ZSgnZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKTtcbiAgICBpZiAoc2xpZGVJbmRleCkge1xuICAgICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc2xpZGVJbmRleCwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWFsSW5kZXggPSBhY3RpdmVJbmRleDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVhbEluZGV4ID0gYWN0aXZlSW5kZXg7XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBwcmV2aW91c1NuYXBJbmRleCxcbiAgICBzbmFwSW5kZXgsXG4gICAgcHJldmlvdXNSZWFsSW5kZXgsXG4gICAgcmVhbEluZGV4LFxuICAgIHByZXZpb3VzSW5kZXgsXG4gICAgYWN0aXZlSW5kZXhcbiAgfSk7XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQpIHtcbiAgICBwcmVsb2FkKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2FjdGl2ZUluZGV4Q2hhbmdlJyk7XG4gIHN3aXBlci5lbWl0KCdzbmFwSW5kZXhDaGFuZ2UnKTtcbiAgaWYgKHN3aXBlci5pbml0aWFsaXplZCB8fCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgICBzd2lwZXIuZW1pdCgncmVhbEluZGV4Q2hhbmdlJyk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZShlbCwgcGF0aCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBsZXQgc2xpZGUgPSBlbC5jbG9zZXN0KGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApO1xuICBpZiAoIXNsaWRlICYmIHN3aXBlci5pc0VsZW1lbnQgJiYgcGF0aCAmJiBwYXRoLmxlbmd0aCA+IDEgJiYgcGF0aC5pbmNsdWRlcyhlbCkpIHtcbiAgICBbLi4ucGF0aC5zbGljZShwYXRoLmluZGV4T2YoZWwpICsgMSwgcGF0aC5sZW5ndGgpXS5mb3JFYWNoKHBhdGhFbCA9PiB7XG4gICAgICBpZiAoIXNsaWRlICYmIHBhdGhFbC5tYXRjaGVzICYmIHBhdGhFbC5tYXRjaGVzKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30sIHN3aXBlci1zbGlkZWApKSB7XG4gICAgICAgIHNsaWRlID0gcGF0aEVsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGxldCBzbGlkZUZvdW5kID0gZmFsc2U7XG4gIGxldCBzbGlkZUluZGV4O1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkge1xuICAgICAgICBzbGlkZUZvdW5kID0gdHJ1ZTtcbiAgICAgICAgc2xpZGVJbmRleCA9IGk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGUgJiYgc2xpZGVGb3VuZCkge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSBzbGlkZTtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlci5jbGlja2VkSW5kZXggPSBwYXJzZUludChzbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHNsaWRlSW5kZXg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5jbGlja2VkU2xpZGUgPSB1bmRlZmluZWQ7XG4gICAgc3dpcGVyLmNsaWNrZWRJbmRleCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy5zbGlkZVRvQ2xpY2tlZFNsaWRlICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHVuZGVmaW5lZCAmJiBzd2lwZXIuY2xpY2tlZEluZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICBzd2lwZXIuc2xpZGVUb0NsaWNrZWRTbGlkZSgpO1xuICB9XG59XG5cbnZhciB1cGRhdGUgPSB7XG4gIHVwZGF0ZVNpemUsXG4gIHVwZGF0ZVNsaWRlcyxcbiAgdXBkYXRlQXV0b0hlaWdodCxcbiAgdXBkYXRlU2xpZGVzT2Zmc2V0LFxuICB1cGRhdGVTbGlkZXNQcm9ncmVzcyxcbiAgdXBkYXRlUHJvZ3Jlc3MsXG4gIHVwZGF0ZVNsaWRlc0NsYXNzZXMsXG4gIHVwZGF0ZUFjdGl2ZUluZGV4LFxuICB1cGRhdGVDbGlja2VkU2xpZGVcbn07XG5cbmZ1bmN0aW9uIGdldFN3aXBlclRyYW5zbGF0ZShheGlzKSB7XG4gIGlmIChheGlzID09PSB2b2lkIDApIHtcbiAgICBheGlzID0gdGhpcy5pc0hvcml6b250YWwoKSA/ICd4JyA6ICd5JztcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHRyYW5zbGF0ZSxcbiAgICB3cmFwcGVyRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgcmV0dXJuIHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuIHRyYW5zbGF0ZTtcbiAgfVxuICBsZXQgY3VycmVudFRyYW5zbGF0ZSA9IGdldFRyYW5zbGF0ZSh3cmFwcGVyRWwsIGF4aXMpO1xuICBjdXJyZW50VHJhbnNsYXRlICs9IHN3aXBlci5jc3NPdmVyZmxvd0FkanVzdG1lbnQoKTtcbiAgaWYgKHJ0bCkgY3VycmVudFRyYW5zbGF0ZSA9IC1jdXJyZW50VHJhbnNsYXRlO1xuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIHBhcmFtcyxcbiAgICB3cmFwcGVyRWwsXG4gICAgcHJvZ3Jlc3NcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgeCA9IHJ0bCA/IC10cmFuc2xhdGUgOiB0cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgeSA9IHRyYW5zbGF0ZTtcbiAgfVxuICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykge1xuICAgIHggPSBNYXRoLmZsb29yKHgpO1xuICAgIHkgPSBNYXRoLmZsb29yKHkpO1xuICB9XG4gIHN3aXBlci5wcmV2aW91c1RyYW5zbGF0ZSA9IHN3aXBlci50cmFuc2xhdGU7XG4gIHN3aXBlci50cmFuc2xhdGUgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB4IDogeTtcbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IC14IDogLXk7XG4gIH0gZWxzZSBpZiAoIXBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgeCAtPSBzd2lwZXIuY3NzT3ZlcmZsb3dBZGp1c3RtZW50KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgLT0gc3dpcGVyLmNzc092ZXJmbG93QWRqdXN0bWVudCgpO1xuICAgIH1cbiAgICB3cmFwcGVyRWwuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKCR7eH1weCwgJHt5fXB4LCAke3p9cHgpYDtcbiAgfVxuXG4gIC8vIENoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHByb2dyZXNzXG4gIGxldCBuZXdQcm9ncmVzcztcbiAgY29uc3QgdHJhbnNsYXRlc0RpZmYgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgLSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gIGlmICh0cmFuc2xhdGVzRGlmZiA9PT0gMCkge1xuICAgIG5ld1Byb2dyZXNzID0gMDtcbiAgfSBlbHNlIHtcbiAgICBuZXdQcm9ncmVzcyA9ICh0cmFuc2xhdGUgLSBzd2lwZXIubWluVHJhbnNsYXRlKCkpIC8gdHJhbnNsYXRlc0RpZmY7XG4gIH1cbiAgaWYgKG5ld1Byb2dyZXNzICE9PSBwcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUoKSB7XG4gIHJldHVybiAtdGhpcy5zbmFwR3JpZFswXTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlKCkge1xuICByZXR1cm4gLXRoaXMuc25hcEdyaWRbdGhpcy5zbmFwR3JpZC5sZW5ndGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdHJhbnNsYXRlVG8odHJhbnNsYXRlLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCB0cmFuc2xhdGVCb3VuZHMsIGludGVybmFsKSB7XG4gIGlmICh0cmFuc2xhdGUgPT09IHZvaWQgMCkge1xuICAgIHRyYW5zbGF0ZSA9IDA7XG4gIH1cbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRyYW5zbGF0ZUJvdW5kcyA9PT0gdm9pZCAwKSB7XG4gICAgdHJhbnNsYXRlQm91bmRzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHdyYXBwZXJFbFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IG1pblRyYW5zbGF0ZSA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgY29uc3QgbWF4VHJhbnNsYXRlID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICBsZXQgbmV3VHJhbnNsYXRlO1xuICBpZiAodHJhbnNsYXRlQm91bmRzICYmIHRyYW5zbGF0ZSA+IG1pblRyYW5zbGF0ZSkgbmV3VHJhbnNsYXRlID0gbWluVHJhbnNsYXRlO2Vsc2UgaWYgKHRyYW5zbGF0ZUJvdW5kcyAmJiB0cmFuc2xhdGUgPCBtYXhUcmFuc2xhdGUpIG5ld1RyYW5zbGF0ZSA9IG1heFRyYW5zbGF0ZTtlbHNlIG5ld1RyYW5zbGF0ZSA9IHRyYW5zbGF0ZTtcblxuICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1RyYW5zbGF0ZSk7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkge1xuICAgIGNvbnN0IGlzSCA9IHN3aXBlci5pc0hvcml6b250YWwoKTtcbiAgICBpZiAoc3BlZWQgPT09IDApIHtcbiAgICAgIHdyYXBwZXJFbFtpc0ggPyAnc2Nyb2xsTGVmdCcgOiAnc2Nyb2xsVG9wJ10gPSAtbmV3VHJhbnNsYXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXN3aXBlci5zdXBwb3J0LnNtb290aFNjcm9sbCkge1xuICAgICAgICBhbmltYXRlQ1NTTW9kZVNjcm9sbCh7XG4gICAgICAgICAgc3dpcGVyLFxuICAgICAgICAgIHRhcmdldFBvc2l0aW9uOiAtbmV3VHJhbnNsYXRlLFxuICAgICAgICAgIHNpZGU6IGlzSCA/ICdsZWZ0JyA6ICd0b3AnXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHdyYXBwZXJFbC5zY3JvbGxUbyh7XG4gICAgICAgIFtpc0ggPyAnbGVmdCcgOiAndG9wJ106IC1uZXdUcmFuc2xhdGUsXG4gICAgICAgIGJlaGF2aW9yOiAnc21vb3RoJ1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICAgIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKHNwZWVkKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgaWYgKHJ1bkNhbGxiYWNrcykge1xuICAgICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVRyYW5zaXRpb25TdGFydCcsIHNwZWVkLCBpbnRlcm5hbCk7XG4gICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvblN0YXJ0Jyk7XG4gICAgfVxuICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICBpZiAoIXN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25FbmQoZSkge1xuICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIud3JhcHBlckVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIub25UcmFuc2xhdGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLm9uVHJhbnNsYXRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBpZiAocnVuQ2FsbGJhY2tzKSB7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgndHJhbnNpdGlvbkVuZCcpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN3aXBlci53cmFwcGVyRWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHN3aXBlci5vblRyYW5zbGF0ZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlOiBnZXRTd2lwZXJUcmFuc2xhdGUsXG4gIHNldFRyYW5zbGF0ZSxcbiAgbWluVHJhbnNsYXRlLFxuICBtYXhUcmFuc2xhdGUsXG4gIHRyYW5zbGF0ZVRvXG59O1xuXG5mdW5jdGlvbiBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDtcbiAgICBzd2lwZXIud3JhcHBlckVsLnN0eWxlLnRyYW5zaXRpb25EZWxheSA9IGR1cmF0aW9uID09PSAwID8gYDBtc2AgOiAnJztcbiAgfVxuICBzd2lwZXIuZW1pdCgnc2V0VHJhbnNpdGlvbicsIGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW1pdChfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIHJ1bkNhbGxiYWNrcyxcbiAgICBkaXJlY3Rpb24sXG4gICAgc3RlcFxuICB9ID0gX3JlZjtcbiAgY29uc3Qge1xuICAgIGFjdGl2ZUluZGV4LFxuICAgIHByZXZpb3VzSW5kZXhcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7ZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7ZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG4gIHN3aXBlci5lbWl0KGB0cmFuc2l0aW9uJHtzdGVwfWApO1xuICBpZiAocnVuQ2FsbGJhY2tzICYmIGFjdGl2ZUluZGV4ICE9PSBwcmV2aW91c0luZGV4KSB7XG4gICAgaWYgKGRpciA9PT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlUmVzZXRUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdChgc2xpZGVDaGFuZ2VUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIGlmIChkaXIgPT09ICduZXh0Jykge1xuICAgICAgc3dpcGVyLmVtaXQoYHNsaWRlTmV4dFRyYW5zaXRpb24ke3N0ZXB9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbWl0KGBzbGlkZVByZXZUcmFuc2l0aW9uJHtzdGVwfWApO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pIHtcbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG4gIHRyYW5zaXRpb25FbWl0KHtcbiAgICBzd2lwZXIsXG4gICAgcnVuQ2FsbGJhY2tzLFxuICAgIGRpcmVjdGlvbixcbiAgICBzdGVwOiAnU3RhcnQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKSB7XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIGlmIChwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgdHJhbnNpdGlvbkVtaXQoe1xuICAgIHN3aXBlcixcbiAgICBydW5DYWxsYmFja3MsXG4gICAgZGlyZWN0aW9uLFxuICAgIHN0ZXA6ICdFbmQnXG4gIH0pO1xufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kXG59O1xuXG5mdW5jdGlvbiBzbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCwgaW5pdGlhbCkge1xuICBpZiAoaW5kZXggPT09IHZvaWQgMCkge1xuICAgIGluZGV4ID0gMDtcbiAgfVxuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBpZiAodHlwZW9mIGluZGV4ID09PSAnc3RyaW5nJykge1xuICAgIGluZGV4ID0gcGFyc2VJbnQoaW5kZXgsIDEwKTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICB3cmFwcGVyRWwsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoc3dpcGVyLmFuaW1hdGluZyAmJiBwYXJhbXMucHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uIHx8ICFlbmFibGVkICYmICFpbnRlcm5hbCAmJiAhaW5pdGlhbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBza2lwID0gTWF0aC5taW4oc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAsIHNsaWRlSW5kZXgpO1xuICBsZXQgc25hcEluZGV4ID0gc2tpcCArIE1hdGguZmxvb3IoKHNsaWRlSW5kZXggLSBza2lwKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICBpZiAoc25hcEluZGV4ID49IHNuYXBHcmlkLmxlbmd0aCkgc25hcEluZGV4ID0gc25hcEdyaWQubGVuZ3RoIC0gMTtcbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3Qgbm9ybWFsaXplZFRyYW5zbGF0ZSA9IC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZCA9IE1hdGguZmxvb3Ioc2xpZGVzR3JpZFtpXSAqIDEwMCk7XG4gICAgICBjb25zdCBub3JtYWxpemVkR3JpZE5leHQgPSBNYXRoLmZsb29yKHNsaWRlc0dyaWRbaSArIDFdICogMTAwKTtcbiAgICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkICYmIG5vcm1hbGl6ZWRUcmFuc2xhdGUgPCBub3JtYWxpemVkR3JpZE5leHQgLSAobm9ybWFsaXplZEdyaWROZXh0IC0gbm9ybWFsaXplZEdyaWQpIC8gMikge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vcm1hbGl6ZWRUcmFuc2xhdGUgPj0gbm9ybWFsaXplZEdyaWQgJiYgbm9ybWFsaXplZFRyYW5zbGF0ZSA8IG5vcm1hbGl6ZWRHcmlkTmV4dCkge1xuICAgICAgICAgIHNsaWRlSW5kZXggPSBpICsgMTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub3JtYWxpemVkVHJhbnNsYXRlID49IG5vcm1hbGl6ZWRHcmlkKSB7XG4gICAgICAgIHNsaWRlSW5kZXggPSBpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgJiYgc2xpZGVJbmRleCAhPT0gYWN0aXZlSW5kZXgpIHtcbiAgICBpZiAoIXN3aXBlci5hbGxvd1NsaWRlTmV4dCAmJiAocnRsID8gdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiB0cmFuc2xhdGUgPCBzd2lwZXIudHJhbnNsYXRlICYmIHRyYW5zbGF0ZSA8IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoc2xpZGVJbmRleCAhPT0gKHByZXZpb3VzSW5kZXggfHwgMCkgJiYgcnVuQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZVNsaWRlQ2hhbmdlU3RhcnQnKTtcbiAgfVxuXG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgbGV0IGRpcmVjdGlvbjtcbiAgaWYgKHNsaWRlSW5kZXggPiBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ25leHQnO2Vsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO2Vsc2UgZGlyZWN0aW9uID0gJ3Jlc2V0JztcblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKHJ0bCAmJiAtdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlIHx8ICFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICAgIC8vIFVwZGF0ZSBIZWlnaHRcbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKHBhcmFtcy5lZmZlY3QgIT09ICdzbGlkZScpIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICB9XG4gICAgaWYgKGRpcmVjdGlvbiAhPT0gJ3Jlc2V0Jykge1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBjb25zdCBpc0ggPSBzd2lwZXIuaXNIb3Jpem9udGFsKCk7XG4gICAgY29uc3QgdCA9IHJ0bCA/IHRyYW5zbGF0ZSA6IC10cmFuc2xhdGU7XG4gICAgaWYgKHNwZWVkID09PSAwKSB7XG4gICAgICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICdub25lJztcbiAgICAgICAgc3dpcGVyLl9pbW1lZGlhdGVWaXJ0dWFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1ZpcnR1YWwgJiYgIXN3aXBlci5fY3NzTW9kZVZpcnR1YWxJbml0aWFsU2V0ICYmIHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlID4gMCkge1xuICAgICAgICBzd2lwZXIuX2Nzc01vZGVWaXJ0dWFsSW5pdGlhbFNldCA9IHRydWU7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd3JhcHBlckVsW2lzSCA/ICdzY3JvbGxMZWZ0JyA6ICdzY3JvbGxUb3AnXSA9IHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNWaXJ0dWFsKSB7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5zdHlsZS5zY3JvbGxTbmFwVHlwZSA9ICcnO1xuICAgICAgICAgIHN3aXBlci5faW1tZWRpYXRlVmlydHVhbCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFzd2lwZXIuc3VwcG9ydC5zbW9vdGhTY3JvbGwpIHtcbiAgICAgICAgYW5pbWF0ZUNTU01vZGVTY3JvbGwoe1xuICAgICAgICAgIHN3aXBlcixcbiAgICAgICAgICB0YXJnZXRQb3NpdGlvbjogdCxcbiAgICAgICAgICBzaWRlOiBpc0ggPyAnbGVmdCcgOiAndG9wJ1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICB3cmFwcGVyRWwuc2Nyb2xsVG8oe1xuICAgICAgICBbaXNIID8gJ2xlZnQnIDogJ3RvcCddOiB0LFxuICAgICAgICBiZWhhdmlvcjogJ3Ntb290aCdcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KHNsaWRlSW5kZXgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgc3dpcGVyLnRyYW5zaXRpb25TdGFydChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIGlmIChzcGVlZCA9PT0gMCkge1xuICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgfSBlbHNlIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgIGlmICghc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKSB7XG4gICAgICBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLndyYXBwZXJFbC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gbnVsbDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgfTtcbiAgICB9XG4gICAgc3dpcGVyLndyYXBwZXJFbC5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0xvb3AoaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChpbmRleCA9PT0gdm9pZCAwKSB7XG4gICAgaW5kZXggPSAwO1xuICB9XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgaW5kZXhBc051bWJlciA9IHBhcnNlSW50KGluZGV4LCAxMCk7XG4gICAgaW5kZXggPSBpbmRleEFzTnVtYmVyO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IGdyaWRFbmFibGVkID0gc3dpcGVyLmdyaWQgJiYgc3dpcGVyLnBhcmFtcy5ncmlkICYmIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgbGV0IG5ld0luZGV4ID0gaW5kZXg7XG4gIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICBpZiAoc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgbmV3SW5kZXggPSBuZXdJbmRleCArIHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHRhcmdldFNsaWRlSW5kZXg7XG4gICAgICBpZiAoZ3JpZEVuYWJsZWQpIHtcbiAgICAgICAgY29uc3Qgc2xpZGVJbmRleCA9IG5ld0luZGV4ICogc3dpcGVyLnBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICAgIHRhcmdldFNsaWRlSW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0U2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4QnlEYXRhKG5ld0luZGV4KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHMgPSBncmlkRW5hYmxlZCA/IE1hdGguY2VpbChzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIHN3aXBlci5wYXJhbXMuZ3JpZC5yb3dzKSA6IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICAgICAgY29uc3Qge1xuICAgICAgICBjZW50ZXJlZFNsaWRlc1xuICAgICAgfSA9IHN3aXBlci5wYXJhbXM7XG4gICAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xpZGVzUGVyVmlldyA9IE1hdGguY2VpbChwYXJzZUZsb2F0KHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICAgICAgaWYgKGNlbnRlcmVkU2xpZGVzICYmIHNsaWRlc1BlclZpZXcgJSAyID09PSAwKSB7XG4gICAgICAgICAgc2xpZGVzUGVyVmlldyA9IHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsZXQgbmVlZExvb3BGaXggPSBjb2xzIC0gdGFyZ2V0U2xpZGVJbmRleCA8IHNsaWRlc1BlclZpZXc7XG4gICAgICBpZiAoY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgbmVlZExvb3BGaXggPSBuZWVkTG9vcEZpeCB8fCB0YXJnZXRTbGlkZUluZGV4IDwgTWF0aC5jZWlsKHNsaWRlc1BlclZpZXcgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkTG9vcEZpeCkge1xuICAgICAgICBjb25zdCBkaXJlY3Rpb24gPSBjZW50ZXJlZFNsaWRlcyA/IHRhcmdldFNsaWRlSW5kZXggPCBzd2lwZXIuYWN0aXZlSW5kZXggPyAncHJldicgOiAnbmV4dCcgOiB0YXJnZXRTbGlkZUluZGV4IC0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMSA8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA/ICduZXh0JyA6ICdwcmV2JztcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICBzbGlkZVRvOiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gdGFyZ2V0U2xpZGVJbmRleCArIDEgOiB0YXJnZXRTbGlkZUluZGV4IC0gY29scyArIDEsXG4gICAgICAgICAgc2xpZGVSZWFsSW5kZXg6IGRpcmVjdGlvbiA9PT0gJ25leHQnID8gc3dpcGVyLnJlYWxJbmRleCA6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBjb25zdCBzbGlkZUluZGV4ID0gbmV3SW5kZXggKiBzd2lwZXIucGFyYW1zLmdyaWQucm93cztcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gc2xpZGVJbmRleClbMF0uY29sdW1uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleEJ5RGF0YShuZXdJbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSk7XG4gIHJldHVybiBzd2lwZXI7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVOZXh0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKSB7XG4gIGlmIChzcGVlZCA9PT0gdm9pZCAwKSB7XG4gICAgc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZDtcbiAgfVxuICBpZiAocnVuQ2FsbGJhY2tzID09PSB2b2lkIDApIHtcbiAgICBydW5DYWxsYmFja3MgPSB0cnVlO1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBlbmFibGVkLFxuICAgIHBhcmFtcyxcbiAgICBhbmltYXRpbmdcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm4gc3dpcGVyO1xuICBsZXQgcGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gIGlmIChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMSAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvKSB7XG4gICAgcGVyR3JvdXAgPSBNYXRoLm1heChzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoJ2N1cnJlbnQnLCB0cnVlKSwgMSk7XG4gIH1cbiAgY29uc3QgaW5jcmVtZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwZXJHcm91cDtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAnbmV4dCdcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gICAgaWYgKHN3aXBlci5hY3RpdmVJbmRleCA9PT0gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggKyBpbmNyZW1lbnQsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0VuZCkge1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIGluY3JlbWVudCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldihzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCkge1xuICBpZiAoc3BlZWQgPT09IHZvaWQgMCkge1xuICAgIHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQ7XG4gIH1cbiAgaWYgKHJ1bkNhbGxiYWNrcyA9PT0gdm9pZCAwKSB7XG4gICAgcnVuQ2FsbGJhY2tzID0gdHJ1ZTtcbiAgfVxuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNuYXBHcmlkLFxuICAgIHNsaWRlc0dyaWQsXG4gICAgcnRsVHJhbnNsYXRlLFxuICAgIGVuYWJsZWQsXG4gICAgYW5pbWF0aW5nXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuIHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZyAmJiAhaXNWaXJ0dWFsICYmIHBhcmFtcy5sb29wUHJldmVudHNTbGlkaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgZGlyZWN0aW9uOiAncHJldidcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBzd2lwZXIuX2NsaWVudExlZnQgPSBzd2lwZXIud3JhcHBlckVsLmNsaWVudExlZnQ7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKHZhbCA9PiBub3JtYWxpemUodmFsKSk7XG4gIGxldCBwcmV2U25hcCA9IHNuYXBHcmlkW25vcm1hbGl6ZWRTbmFwR3JpZC5pbmRleE9mKG5vcm1hbGl6ZWRUcmFuc2xhdGUpIC0gMV07XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgPT09ICd1bmRlZmluZWQnICYmIHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgbGV0IHByZXZTbmFwSW5kZXg7XG4gICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICBpZiAobm9ybWFsaXplZFRyYW5zbGF0ZSA+PSBzbmFwKSB7XG4gICAgICAgIC8vIHByZXZTbmFwID0gc25hcDtcbiAgICAgICAgcHJldlNuYXBJbmRleCA9IHNuYXBJbmRleDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodHlwZW9mIHByZXZTbmFwSW5kZXggIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBwcmV2U25hcCA9IHNuYXBHcmlkW3ByZXZTbmFwSW5kZXggPiAwID8gcHJldlNuYXBJbmRleCAtIDEgOiBwcmV2U25hcEluZGV4XTtcbiAgICB9XG4gIH1cbiAgbGV0IHByZXZJbmRleCA9IDA7XG4gIGlmICh0eXBlb2YgcHJldlNuYXAgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcHJldkluZGV4ID0gc2xpZGVzR3JpZC5pbmRleE9mKHByZXZTbmFwKTtcbiAgICBpZiAocHJldkluZGV4IDwgMCkgcHJldkluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4IC0gMTtcbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyAmJiBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgPT09IDEgJiYgcGFyYW1zLnNsaWRlc1Blckdyb3VwQXV0bykge1xuICAgICAgcHJldkluZGV4ID0gcHJldkluZGV4IC0gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCdwcmV2aW91cycsIHRydWUpICsgMTtcbiAgICAgIHByZXZJbmRleCA9IE1hdGgubWF4KHByZXZJbmRleCwgMCk7XG4gICAgfVxuICB9XG4gIGlmIChwYXJhbXMucmV3aW5kICYmIHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgIGNvbnN0IGxhc3RJbmRleCA9IHN3aXBlci5wYXJhbXMudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIHJldHVybiBzd2lwZXIuc2xpZGVUbyhsYXN0SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbiAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCAmJiBzd2lwZXIuYWN0aXZlSW5kZXggPT09IDAgJiYgcGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLnNsaWRlVG8ocHJldkluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHByZXZJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUmVzZXQoc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlVG9DbG9zZXN0KHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsLCB0aHJlc2hvbGQpIHtcbiAgaWYgKHNwZWVkID09PSB2b2lkIDApIHtcbiAgICBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkO1xuICB9XG4gIGlmIChydW5DYWxsYmFja3MgPT09IHZvaWQgMCkge1xuICAgIHJ1bkNhbGxiYWNrcyA9IHRydWU7XG4gIH1cbiAgaWYgKHRocmVzaG9sZCA9PT0gdm9pZCAwKSB7XG4gICAgdGhyZXNob2xkID0gMC41O1xuICB9XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc2tpcCA9IE1hdGgubWluKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXBTa2lwLCBpbmRleCk7XG4gIGNvbnN0IHNuYXBJbmRleCA9IHNraXAgKyBNYXRoLmZsb29yKChpbmRleCAtIHNraXApIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIGlmICh0cmFuc2xhdGUgPj0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF0pIHtcbiAgICAvLyBUaGUgY3VycmVudCB0cmFuc2xhdGUgaXMgb24gb3IgYWZ0ZXIgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYWZ0ZXIgaXQuXG4gICAgY29uc3QgY3VycmVudFNuYXAgPSBzd2lwZXIuc25hcEdyaWRbc25hcEluZGV4XTtcbiAgICBjb25zdCBuZXh0U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXggKyAxXTtcbiAgICBpZiAodHJhbnNsYXRlIC0gY3VycmVudFNuYXAgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgKiB0aHJlc2hvbGQpIHtcbiAgICAgIGluZGV4ICs9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoZSBjdXJyZW50IHRyYW5zbGF0ZSBpcyBiZWZvcmUgdGhlIGN1cnJlbnQgc25hcCBpbmRleCwgc28gdGhlIGNob2ljZVxuICAgIC8vIGlzIGJldHdlZW4gdGhlIGN1cnJlbnQgaW5kZXggYW5kIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgIGNvbnN0IHByZXZTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCAtIDFdO1xuICAgIGNvbnN0IGN1cnJlbnRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleF07XG4gICAgaWYgKHRyYW5zbGF0ZSAtIHByZXZTbmFwIDw9IChjdXJyZW50U25hcCAtIHByZXZTbmFwKSAqIHRocmVzaG9sZCkge1xuICAgICAgaW5kZXggLT0gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICB9XG4gIH1cbiAgaW5kZXggPSBNYXRoLm1heChpbmRleCwgMCk7XG4gIGluZGV4ID0gTWF0aC5taW4oaW5kZXgsIHN3aXBlci5zbGlkZXNHcmlkLmxlbmd0aCAtIDEpO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuZnVuY3Rpb24gc2xpZGVUb0NsaWNrZWRTbGlkZSgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICBzbGlkZXNFbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBzbGlkZXNQZXJWaWV3ID0gcGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyA/IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpIDogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gIGxldCBzbGlkZVRvSW5kZXggPSBzd2lwZXIuY2xpY2tlZEluZGV4O1xuICBsZXQgcmVhbEluZGV4O1xuICBjb25zdCBzbGlkZVNlbGVjdG9yID0gc3dpcGVyLmlzRWxlbWVudCA/IGBzd2lwZXItc2xpZGVgIDogYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWA7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoc3dpcGVyLmNsaWNrZWRTbGlkZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JyksIDEwKTtcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBpZiAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIHNsaWRlc1BlclZpZXcgLyAyIHx8IHNsaWRlVG9JbmRleCA+IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gc3dpcGVyLmxvb3BlZFNsaWRlcyArIHNsaWRlc1BlclZpZXcgLyAyKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIHNsaWRlVG9JbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYCR7c2xpZGVTZWxlY3Rvcn1bZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVswXSk7XG4gICAgICAgIG5leHRUaWNrKCgpID0+IHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzbGlkZVRvSW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIHNsaWRlc1BlclZpZXcpIHtcbiAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICBzbGlkZVRvSW5kZXggPSBzd2lwZXIuZ2V0U2xpZGVJbmRleChlbGVtZW50Q2hpbGRyZW4oc2xpZGVzRWwsIGAke3NsaWRlU2VsZWN0b3J9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClbMF0pO1xuICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlXG59O1xuXG5mdW5jdGlvbiBsb29wQ3JlYXRlKHNsaWRlUmVhbEluZGV4KSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgc2xpZGVzRWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFwYXJhbXMubG9vcCB8fCBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkgcmV0dXJuO1xuICBjb25zdCBpbml0U2xpZGVzID0gKCkgPT4ge1xuICAgIGNvbnN0IHNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gICAgc2xpZGVzLmZvckVhY2goKGVsLCBpbmRleCkgPT4ge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcsIGluZGV4KTtcbiAgICB9KTtcbiAgfTtcbiAgY29uc3QgZ3JpZEVuYWJsZWQgPSBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgKiAoZ3JpZEVuYWJsZWQgPyBwYXJhbXMuZ3JpZC5yb3dzIDogMSk7XG4gIGNvbnN0IHNob3VsZEZpbGxHcm91cCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXAgIT09IDA7XG4gIGNvbnN0IHNob3VsZEZpbGxHcmlkID0gZ3JpZEVuYWJsZWQgJiYgc3dpcGVyLnNsaWRlcy5sZW5ndGggJSBwYXJhbXMuZ3JpZC5yb3dzICE9PSAwO1xuICBjb25zdCBhZGRCbGFua1NsaWRlcyA9IGFtb3VudE9mU2xpZGVzID0+IHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFtb3VudE9mU2xpZGVzOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IHNsaWRlRWwgPSBzd2lwZXIuaXNFbGVtZW50ID8gY3JlYXRlRWxlbWVudCgnc3dpcGVyLXNsaWRlJywgW3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3NdKSA6IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIFtwYXJhbXMuc2xpZGVDbGFzcywgcGFyYW1zLnNsaWRlQmxhbmtDbGFzc10pO1xuICAgICAgc3dpcGVyLnNsaWRlc0VsLmFwcGVuZChzbGlkZUVsKTtcbiAgICB9XG4gIH07XG4gIGlmIChzaG91bGRGaWxsR3JvdXApIHtcbiAgICBpZiAocGFyYW1zLmxvb3BBZGRCbGFua1NsaWRlcykge1xuICAgICAgY29uc3Qgc2xpZGVzVG9BZGQgPSBzbGlkZXNQZXJHcm91cCAtIHN3aXBlci5zbGlkZXMubGVuZ3RoICUgc2xpZGVzUGVyR3JvdXA7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBzbGlkZXNQZXJHcm91cCwgbG9vcCBtb2RlIG1heSBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzLCBvciBlbXB0eSBzbGlkZXMpJyk7XG4gICAgfVxuICAgIGluaXRTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChzaG91bGRGaWxsR3JpZCkge1xuICAgIGlmIChwYXJhbXMubG9vcEFkZEJsYW5rU2xpZGVzKSB7XG4gICAgICBjb25zdCBzbGlkZXNUb0FkZCA9IHBhcmFtcy5ncmlkLnJvd3MgLSBzd2lwZXIuc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5ncmlkLnJvd3M7XG4gICAgICBhZGRCbGFua1NsaWRlcyhzbGlkZXNUb0FkZCk7XG4gICAgICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBUaGUgbnVtYmVyIG9mIHNsaWRlcyBpcyBub3QgZXZlbiB0byBncmlkLnJvd3MsIGxvb3AgbW9kZSBtYXkgbm90IGZ1bmN0aW9uIHByb3Blcmx5LiBZb3UgbmVlZCB0byBhZGQgbW9yZSBzbGlkZXMgKG9yIG1ha2UgZHVwbGljYXRlcywgb3IgZW1wdHkgc2xpZGVzKScpO1xuICAgIH1cbiAgICBpbml0U2xpZGVzKCk7XG4gIH0gZWxzZSB7XG4gICAgaW5pdFNsaWRlcygpO1xuICB9XG4gIHN3aXBlci5sb29wRml4KHtcbiAgICBzbGlkZVJlYWxJbmRleCxcbiAgICBkaXJlY3Rpb246IHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHVuZGVmaW5lZCA6ICduZXh0J1xuICB9KTtcbn1cblxuZnVuY3Rpb24gbG9vcEZpeChfdGVtcCkge1xuICBsZXQge1xuICAgIHNsaWRlUmVhbEluZGV4LFxuICAgIHNsaWRlVG8gPSB0cnVlLFxuICAgIGRpcmVjdGlvbixcbiAgICBzZXRUcmFuc2xhdGUsXG4gICAgYWN0aXZlU2xpZGVJbmRleCxcbiAgICBieUNvbnRyb2xsZXIsXG4gICAgYnlNb3VzZXdoZWVsXG4gIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgc3dpcGVyLmVtaXQoJ2JlZm9yZUxvb3BGaXgnKTtcbiAgY29uc3Qge1xuICAgIHNsaWRlcyxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBzbGlkZXNFbCxcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3Qge1xuICAgIGNlbnRlcmVkU2xpZGVzXG4gIH0gPSBwYXJhbXM7XG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IHRydWU7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IHRydWU7XG4gIGlmIChzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgaWYgKHNsaWRlVG8pIHtcbiAgICAgIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmIHN3aXBlci5zbmFwSW5kZXggPT09IDApIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfSBlbHNlIGlmIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgJiYgc3dpcGVyLnNuYXBJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJWaWV3KSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggKyBzd2lwZXIuc25hcEluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5zbmFwSW5kZXggPT09IHN3aXBlci5zbmFwR3JpZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci52aXJ0dWFsLnNsaWRlc0JlZm9yZSwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcbiAgICBzd2lwZXIuZW1pdCgnbG9vcEZpeCcpO1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgc2xpZGVzUGVyVmlldyA9IHBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICBpZiAoc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nKSB7XG4gICAgc2xpZGVzUGVyVmlldyA9IHN3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpO1xuICB9IGVsc2Uge1xuICAgIHNsaWRlc1BlclZpZXcgPSBNYXRoLmNlaWwocGFyc2VGbG9hdChwYXJhbXMuc2xpZGVzUGVyVmlldywgMTApKTtcbiAgICBpZiAoY2VudGVyZWRTbGlkZXMgJiYgc2xpZGVzUGVyVmlldyAlIDIgPT09IDApIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSBzbGlkZXNQZXJWaWV3ICsgMTtcbiAgICB9XG4gIH1cbiAgY29uc3Qgc2xpZGVzUGVyR3JvdXAgPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXBBdXRvID8gc2xpZGVzUGVyVmlldyA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgbGV0IGxvb3BlZFNsaWRlcyA9IHNsaWRlc1Blckdyb3VwO1xuICBpZiAobG9vcGVkU2xpZGVzICUgc2xpZGVzUGVyR3JvdXAgIT09IDApIHtcbiAgICBsb29wZWRTbGlkZXMgKz0gc2xpZGVzUGVyR3JvdXAgLSBsb29wZWRTbGlkZXMgJSBzbGlkZXNQZXJHcm91cDtcbiAgfVxuICBsb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBzd2lwZXIubG9vcGVkU2xpZGVzID0gbG9vcGVkU2xpZGVzO1xuICBjb25zdCBncmlkRW5hYmxlZCA9IHN3aXBlci5ncmlkICYmIHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxO1xuICBpZiAoc2xpZGVzLmxlbmd0aCA8IHNsaWRlc1BlclZpZXcgKyBsb29wZWRTbGlkZXMpIHtcbiAgICBzaG93V2FybmluZygnU3dpcGVyIExvb3AgV2FybmluZzogVGhlIG51bWJlciBvZiBzbGlkZXMgaXMgbm90IGVub3VnaCBmb3IgbG9vcCBtb2RlLCBpdCB3aWxsIGJlIGRpc2FibGVkIGFuZCBub3QgZnVuY3Rpb24gcHJvcGVybHkuIFlvdSBuZWVkIHRvIGFkZCBtb3JlIHNsaWRlcyAob3IgbWFrZSBkdXBsaWNhdGVzKSBvciBsb3dlciB0aGUgdmFsdWVzIG9mIHNsaWRlc1BlclZpZXcgYW5kIHNsaWRlc1Blckdyb3VwIHBhcmFtZXRlcnMnKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAncm93Jykge1xuICAgIHNob3dXYXJuaW5nKCdTd2lwZXIgTG9vcCBXYXJuaW5nOiBMb29wIG1vZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBncmlkLmZpbGwgPSBgcm93YCcpO1xuICB9XG4gIGNvbnN0IHByZXBlbmRTbGlkZXNJbmRleGVzID0gW107XG4gIGNvbnN0IGFwcGVuZFNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgbGV0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZVNsaWRlSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYWN0aXZlU2xpZGVJbmRleCA9IHN3aXBlci5nZXRTbGlkZUluZGV4KHNsaWRlcy5maWx0ZXIoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSlbMF0pO1xuICB9IGVsc2Uge1xuICAgIGFjdGl2ZUluZGV4ID0gYWN0aXZlU2xpZGVJbmRleDtcbiAgfVxuICBjb25zdCBpc05leHQgPSBkaXJlY3Rpb24gPT09ICduZXh0JyB8fCAhZGlyZWN0aW9uO1xuICBjb25zdCBpc1ByZXYgPSBkaXJlY3Rpb24gPT09ICdwcmV2JyB8fCAhZGlyZWN0aW9uO1xuICBsZXQgc2xpZGVzUHJlcGVuZGVkID0gMDtcbiAgbGV0IHNsaWRlc0FwcGVuZGVkID0gMDtcbiAgY29uc3QgY29scyA9IGdyaWRFbmFibGVkID8gTWF0aC5jZWlsKHNsaWRlcy5sZW5ndGggLyBwYXJhbXMuZ3JpZC5yb3dzKSA6IHNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IGFjdGl2ZUNvbEluZGV4ID0gZ3JpZEVuYWJsZWQgPyBzbGlkZXNbYWN0aXZlU2xpZGVJbmRleF0uY29sdW1uIDogYWN0aXZlU2xpZGVJbmRleDtcbiAgY29uc3QgYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPSBhY3RpdmVDb2xJbmRleCArIChjZW50ZXJlZFNsaWRlcyAmJiB0eXBlb2Ygc2V0VHJhbnNsYXRlID09PSAndW5kZWZpbmVkJyA/IC1zbGlkZXNQZXJWaWV3IC8gMiArIDAuNSA6IDApO1xuICAvLyBwcmVwZW5kIGxhc3Qgc2xpZGVzIGJlZm9yZSBzdGFydFxuICBpZiAoYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQgPCBsb29wZWRTbGlkZXMpIHtcbiAgICBzbGlkZXNQcmVwZW5kZWQgPSBNYXRoLm1heChsb29wZWRTbGlkZXMgLSBhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCwgc2xpZGVzUGVyR3JvdXApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9vcGVkU2xpZGVzIC0gYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQ7IGkgKz0gMSkge1xuICAgICAgY29uc3QgaW5kZXggPSBpIC0gTWF0aC5mbG9vcihpIC8gY29scykgKiBjb2xzO1xuICAgICAgaWYgKGdyaWRFbmFibGVkKSB7XG4gICAgICAgIGNvbnN0IGNvbEluZGV4VG9QcmVwZW5kID0gY29scyAtIGluZGV4IC0gMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IHNsaWRlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZXNbaV0uY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgLy8gICBpZiAoc2xpZGUuY29sdW1uID09PSBjb2xJbmRleFRvUHJlcGVuZCkgcHJlcGVuZFNsaWRlc0luZGV4ZXMucHVzaChzbGlkZUluZGV4KTtcbiAgICAgICAgLy8gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcmVwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKGNvbHMgLSBpbmRleCAtIDEpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCArIHNsaWRlc1BlclZpZXcgPiBjb2xzIC0gbG9vcGVkU2xpZGVzKSB7XG4gICAgc2xpZGVzQXBwZW5kZWQgPSBNYXRoLm1heChhY3RpdmVDb2xJbmRleFdpdGhTaGlmdCAtIChjb2xzIC0gbG9vcGVkU2xpZGVzICogMiksIHNsaWRlc1Blckdyb3VwKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0FwcGVuZGVkOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gaSAtIE1hdGguZmxvb3IoaSAvIGNvbHMpICogY29scztcbiAgICAgIGlmIChncmlkRW5hYmxlZCkge1xuICAgICAgICBzbGlkZXMuZm9yRWFjaCgoc2xpZGUsIHNsaWRlSW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoc2xpZGUuY29sdW1uID09PSBpbmRleCkgYXBwZW5kU2xpZGVzSW5kZXhlcy5wdXNoKHNsaWRlSW5kZXgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFwcGVuZFNsaWRlc0luZGV4ZXMucHVzaChpbmRleCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IGZhbHNlO1xuICB9KTtcbiAgaWYgKGlzUHJldikge1xuICAgIHByZXBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5wcmVwZW5kKHNsaWRlc1tpbmRleF0pO1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IGZhbHNlO1xuICAgIH0pO1xuICB9XG4gIGlmIChpc05leHQpIHtcbiAgICBhcHBlbmRTbGlkZXNJbmRleGVzLmZvckVhY2goaW5kZXggPT4ge1xuICAgICAgc2xpZGVzW2luZGV4XS5zd2lwZXJMb29wTW92ZURPTSA9IHRydWU7XG4gICAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVzW2luZGV4XSk7XG4gICAgICBzbGlkZXNbaW5kZXhdLnN3aXBlckxvb3BNb3ZlRE9NID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgfSBlbHNlIGlmIChncmlkRW5hYmxlZCAmJiAocHJlcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoID4gMCAmJiBpc1ByZXYgfHwgYXBwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGggPiAwICYmIGlzTmV4dCkpIHtcbiAgICBzd2lwZXIuc2xpZGVzLmZvckVhY2goKHNsaWRlLCBzbGlkZUluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuZ3JpZC51cGRhdGVTbGlkZShzbGlkZUluZGV4LCBzbGlkZSwgc3dpcGVyLnNsaWRlcyk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuICB9XG4gIGlmIChzbGlkZVRvKSB7XG4gICAgaWYgKHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNQcmV2KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggKyBzbGlkZXNQcmVwZW5kZWRdO1xuICAgICAgICBjb25zdCBkaWZmID0gbmV3U2xpZGVUcmFuc2xhdGUgLSBjdXJyZW50U2xpZGVUcmFuc2xhdGU7XG4gICAgICAgIGlmIChieU1vdXNld2hlZWwpIHtcbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHN3aXBlci50cmFuc2xhdGUgLSBkaWZmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhhY3RpdmVJbmRleCArIHNsaWRlc1ByZXBlbmRlZCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgICAgIGlmIChzZXRUcmFuc2xhdGUpIHtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlIC0gZGlmZjtcbiAgICAgICAgICAgIHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGEuY3VycmVudFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IHByZXBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCAvIHBhcmFtcy5ncmlkLnJvd3MgOiBwcmVwZW5kU2xpZGVzSW5kZXhlcy5sZW5ndGg7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgc2hpZnQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcHBlbmRTbGlkZXNJbmRleGVzLmxlbmd0aCA+IDAgJiYgaXNOZXh0KSB7XG4gICAgICBpZiAodHlwZW9mIHNsaWRlUmVhbEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb25zdCBjdXJyZW50U2xpZGVUcmFuc2xhdGUgPSBzd2lwZXIuc2xpZGVzR3JpZFthY3RpdmVJbmRleF07XG4gICAgICAgIGNvbnN0IG5ld1NsaWRlVHJhbnNsYXRlID0gc3dpcGVyLnNsaWRlc0dyaWRbYWN0aXZlSW5kZXggLSBzbGlkZXNBcHBlbmRlZF07XG4gICAgICAgIGNvbnN0IGRpZmYgPSBuZXdTbGlkZVRyYW5zbGF0ZSAtIGN1cnJlbnRTbGlkZVRyYW5zbGF0ZTtcbiAgICAgICAgaWYgKGJ5TW91c2V3aGVlbCkge1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoc3dpcGVyLnRyYW5zbGF0ZSAtIGRpZmYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4IC0gc2xpZGVzQXBwZW5kZWQsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgICBpZiAoc2V0VHJhbnNsYXRlKSB7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YS5zdGFydFRyYW5zbGF0ZSAtIGRpZmY7XG4gICAgICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhLmN1cnJlbnRUcmFuc2xhdGUgLSBkaWZmO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hpZnQgPSBncmlkRW5hYmxlZCA/IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoIC8gcGFyYW1zLmdyaWQucm93cyA6IGFwcGVuZFNsaWRlc0luZGV4ZXMubGVuZ3RoO1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXggLSBzaGlmdCwgMCwgZmFsc2UsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBhbGxvd1NsaWRlUHJldjtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gYWxsb3dTbGlkZU5leHQ7XG4gIGlmIChzd2lwZXIuY29udHJvbGxlciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sICYmICFieUNvbnRyb2xsZXIpIHtcbiAgICBjb25zdCBsb29wUGFyYW1zID0ge1xuICAgICAgc2xpZGVSZWFsSW5kZXgsXG4gICAgICBkaXJlY3Rpb24sXG4gICAgICBzZXRUcmFuc2xhdGUsXG4gICAgICBhY3RpdmVTbGlkZUluZGV4LFxuICAgICAgYnlDb250cm9sbGVyOiB0cnVlXG4gICAgfTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSkge1xuICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbC5mb3JFYWNoKGMgPT4ge1xuICAgICAgICBpZiAoIWMuZGVzdHJveWVkICYmIGMucGFyYW1zLmxvb3ApIGMubG9vcEZpeCh7XG4gICAgICAgICAgLi4ubG9vcFBhcmFtcyxcbiAgICAgICAgICBzbGlkZVRvOiBjLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCBpbnN0YW5jZW9mIHN3aXBlci5jb25zdHJ1Y3RvciAmJiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLmxvb3BGaXgoe1xuICAgICAgICAuLi5sb29wUGFyYW1zLFxuICAgICAgICBzbGlkZVRvOiBzd2lwZXIuY29udHJvbGxlci5jb250cm9sLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSBwYXJhbXMuc2xpZGVzUGVyVmlldyA/IHNsaWRlVG8gOiBmYWxzZVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCdsb29wRml4Jyk7XG59XG5cbmZ1bmN0aW9uIGxvb3BEZXN0cm95KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcGFyYW1zLFxuICAgIHNsaWRlc0VsXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghcGFyYW1zLmxvb3AgfHwgc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnJlY2FsY1NsaWRlcygpO1xuICBjb25zdCBuZXdTbGlkZXNPcmRlciA9IFtdO1xuICBzd2lwZXIuc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgY29uc3QgaW5kZXggPSB0eXBlb2Ygc2xpZGVFbC5zd2lwZXJTbGlkZUluZGV4ID09PSAndW5kZWZpbmVkJyA/IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA6IHNsaWRlRWwuc3dpcGVyU2xpZGVJbmRleDtcbiAgICBuZXdTbGlkZXNPcmRlcltpbmRleF0gPSBzbGlkZUVsO1xuICB9KTtcbiAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgIHNsaWRlRWwucmVtb3ZlQXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICB9KTtcbiAgbmV3U2xpZGVzT3JkZXIuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICBzbGlkZXNFbC5hcHBlbmQoc2xpZGVFbCk7XG4gIH0pO1xuICBzd2lwZXIucmVjYWxjU2xpZGVzKCk7XG4gIHN3aXBlci5zbGlkZVRvKHN3aXBlci5yZWFsSW5kZXgsIDApO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3lcbn07XG5cbmZ1bmN0aW9uIHNldEdyYWJDdXJzb3IobW92aW5nKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmICghc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoIHx8IHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgfHwgc3dpcGVyLnBhcmFtcy5jc3NNb2RlKSByZXR1cm47XG4gIGNvbnN0IGVsID0gc3dpcGVyLnBhcmFtcy50b3VjaEV2ZW50c1RhcmdldCA9PT0gJ2NvbnRhaW5lcicgPyBzd2lwZXIuZWwgOiBzd2lwZXIud3JhcHBlckVsO1xuICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gdHJ1ZTtcbiAgfVxuICBlbC5zdHlsZS5jdXJzb3IgPSAnbW92ZSc7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG4gIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIHN3aXBlci5fX3ByZXZlbnRPYnNlcnZlcl9fID0gZmFsc2U7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5zZXRHcmFiQ3Vyc29yKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCB8fCBzd2lwZXIucGFyYW1zLmNzc01vZGUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICBzd2lwZXIuX19wcmV2ZW50T2JzZXJ2ZXJfXyA9IHRydWU7XG4gIH1cbiAgc3dpcGVyW3N3aXBlci5wYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gJ2VsJyA6ICd3cmFwcGVyRWwnXS5zdHlsZS5jdXJzb3IgPSAnJztcbiAgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgc3dpcGVyLl9fcHJldmVudE9ic2VydmVyX18gPSBmYWxzZTtcbiAgICB9KTtcbiAgfVxufVxuXG52YXIgZ3JhYkN1cnNvciA9IHtcbiAgc2V0R3JhYkN1cnNvcixcbiAgdW5zZXRHcmFiQ3Vyc29yXG59O1xuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzU0NTIwNTU0L2N1c3RvbS1lbGVtZW50LWdldHJvb3Rub2RlLWNsb3Nlc3QtZnVuY3Rpb24tY3Jvc3NpbmctbXVsdGlwbGUtcGFyZW50LXNoYWRvd2RcbmZ1bmN0aW9uIGNsb3Nlc3RFbGVtZW50KHNlbGVjdG9yLCBiYXNlKSB7XG4gIGlmIChiYXNlID09PSB2b2lkIDApIHtcbiAgICBiYXNlID0gdGhpcztcbiAgfVxuICBmdW5jdGlvbiBfX2Nsb3Nlc3RGcm9tKGVsKSB7XG4gICAgaWYgKCFlbCB8fCBlbCA9PT0gZ2V0RG9jdW1lbnQoKSB8fCBlbCA9PT0gZ2V0V2luZG93KCkpIHJldHVybiBudWxsO1xuICAgIGlmIChlbC5hc3NpZ25lZFNsb3QpIGVsID0gZWwuYXNzaWduZWRTbG90O1xuICAgIGNvbnN0IGZvdW5kID0gZWwuY2xvc2VzdChzZWxlY3Rvcik7XG4gICAgaWYgKCFmb3VuZCAmJiAhZWwuZ2V0Um9vdE5vZGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZm91bmQgfHwgX19jbG9zZXN0RnJvbShlbC5nZXRSb290Tm9kZSgpLmhvc3QpO1xuICB9XG4gIHJldHVybiBfX2Nsb3Nlc3RGcm9tKGJhc2UpO1xufVxuZnVuY3Rpb24gcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGV2ZW50LCBzdGFydFgpIHtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgZWRnZVN3aXBlRGV0ZWN0aW9uID0gcGFyYW1zLmVkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZDtcbiAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiAmJiAoc3RhcnRYIDw9IGVkZ2VTd2lwZVRocmVzaG9sZCB8fCBzdGFydFggPj0gd2luZG93LmlubmVyV2lkdGggLSBlZGdlU3dpcGVUaHJlc2hvbGQpKSB7XG4gICAgaWYgKGVkZ2VTd2lwZURldGVjdGlvbiA9PT0gJ3ByZXZlbnQnKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGNvbnN0IGRhdGEgPSBzd2lwZXIudG91Y2hFdmVudHNEYXRhO1xuICBpZiAoZS50eXBlID09PSAncG9pbnRlcmRvd24nKSB7XG4gICAgaWYgKGRhdGEucG9pbnRlcklkICE9PSBudWxsICYmIGRhdGEucG9pbnRlcklkICE9PSBlLnBvaW50ZXJJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkYXRhLnBvaW50ZXJJZCA9IGUucG9pbnRlcklkO1xuICB9IGVsc2UgaWYgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPT09IDEpIHtcbiAgICBkYXRhLnRvdWNoSWQgPSBlLnRhcmdldFRvdWNoZXNbMF0uaWRlbnRpZmllcjtcbiAgfVxuICBpZiAoZS50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAvLyBkb24ndCBwcm9jZWVkIHRvdWNoIGV2ZW50XG4gICAgcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBlbmFibGVkXG4gIH0gPSBzd2lwZXI7XG4gIGlmICghZW5hYmxlZCkgcmV0dXJuO1xuICBpZiAoIXBhcmFtcy5zaW11bGF0ZVRvdWNoICYmIGUucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgaWYgKHN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLnByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbmltYXRpbmcgJiYgcGFyYW1zLmNzc01vZGUgJiYgcGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICB9XG4gIGxldCB0YXJnZXRFbCA9IGUudGFyZ2V0O1xuICBpZiAocGFyYW1zLnRvdWNoRXZlbnRzVGFyZ2V0ID09PSAnd3JhcHBlcicpIHtcbiAgICBpZiAoIXN3aXBlci53cmFwcGVyRWwuY29udGFpbnModGFyZ2V0RWwpKSByZXR1cm47XG4gIH1cbiAgaWYgKCd3aGljaCcgaW4gZSAmJiBlLndoaWNoID09PSAzKSByZXR1cm47XG4gIGlmICgnYnV0dG9uJyBpbiBlICYmIGUuYnV0dG9uID4gMCkgcmV0dXJuO1xuICBpZiAoZGF0YS5pc1RvdWNoZWQgJiYgZGF0YS5pc01vdmVkKSByZXR1cm47XG5cbiAgLy8gY2hhbmdlIHRhcmdldCBlbCBmb3Igc2hhZG93IHJvb3QgY29tcG9uZW50XG4gIGNvbnN0IHN3aXBpbmdDbGFzc0hhc1ZhbHVlID0gISFwYXJhbXMubm9Td2lwaW5nQ2xhc3MgJiYgcGFyYW1zLm5vU3dpcGluZ0NsYXNzICE9PSAnJztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGNvbnN0IGV2ZW50UGF0aCA9IGUuY29tcG9zZWRQYXRoID8gZS5jb21wb3NlZFBhdGgoKSA6IGUucGF0aDtcbiAgaWYgKHN3aXBpbmdDbGFzc0hhc1ZhbHVlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LnNoYWRvd1Jvb3QgJiYgZXZlbnRQYXRoKSB7XG4gICAgdGFyZ2V0RWwgPSBldmVudFBhdGhbMF07XG4gIH1cbiAgY29uc3Qgbm9Td2lwaW5nU2VsZWN0b3IgPSBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWA7XG4gIGNvbnN0IGlzVGFyZ2V0U2hhZG93ID0gISEoZS50YXJnZXQgJiYgZS50YXJnZXQuc2hhZG93Um9vdCk7XG5cbiAgLy8gdXNlIGNsb3Nlc3RFbGVtZW50IGZvciBzaGFkb3cgcm9vdCBlbGVtZW50IHRvIGdldCB0aGUgYWN0dWFsIGNsb3Nlc3QgZm9yIG5lc3RlZCBzaGFkb3cgcm9vdCBlbGVtZW50XG4gIGlmIChwYXJhbXMubm9Td2lwaW5nICYmIChpc1RhcmdldFNoYWRvdyA/IGNsb3Nlc3RFbGVtZW50KG5vU3dpcGluZ1NlbGVjdG9yLCB0YXJnZXRFbCkgOiB0YXJnZXRFbC5jbG9zZXN0KG5vU3dpcGluZ1NlbGVjdG9yKSkpIHtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IHRydWU7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuc3dpcGVIYW5kbGVyKSB7XG4gICAgaWYgKCF0YXJnZXRFbC5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpKSByZXR1cm47XG4gIH1cbiAgdG91Y2hlcy5jdXJyZW50WCA9IGUucGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGlmICghcHJldmVudEVkZ2VTd2lwZShzd2lwZXIsIGUsIHN0YXJ0WCkpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgT2JqZWN0LmFzc2lnbihkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkXG4gIH0pO1xuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgaWYgKHRhcmdldEVsLm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmICh0YXJnZXRFbC5ub2RlTmFtZSA9PT0gJ1NFTEVDVCcpIHtcbiAgICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSB0YXJnZXRFbCkge1xuICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQuYmx1cigpO1xuICB9XG4gIGNvbnN0IHNob3VsZFByZXZlbnREZWZhdWx0ID0gcHJldmVudERlZmF1bHQgJiYgc3dpcGVyLmFsbG93VG91Y2hNb3ZlICYmIHBhcmFtcy50b3VjaFN0YXJ0UHJldmVudERlZmF1bHQ7XG4gIGlmICgocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSAmJiAhdGFyZ2V0RWwuaXNDb250ZW50RWRpdGFibGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSAmJiBwYXJhbXMuZnJlZU1vZGUuZW5hYmxlZCAmJiBzd2lwZXIuZnJlZU1vZGUgJiYgc3dpcGVyLmFuaW1hdGluZyAmJiAhcGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaFN0YXJ0KCk7XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ3RvdWNoU3RhcnQnLCBlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaE1vdmUoZXZlbnQpIHtcbiAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3Qge1xuICAgIHBhcmFtcyxcbiAgICB0b3VjaGVzLFxuICAgIHJ0bFRyYW5zbGF0ZTogcnRsLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZXZlbnQucG9pbnRlclR5cGUgPT09ICdtb3VzZScpIHJldHVybjtcbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgaWYgKGUudHlwZSA9PT0gJ3BvaW50ZXJtb3ZlJykge1xuICAgIGlmIChkYXRhLnRvdWNoSWQgIT09IG51bGwpIHJldHVybjsgLy8gcmV0dXJuIGZyb20gcG9pbnRlciBpZiB3ZSB1c2UgdG91Y2hcbiAgICBjb25zdCBpZCA9IGUucG9pbnRlcklkO1xuICAgIGlmIChpZCAhPT0gZGF0YS5wb2ludGVySWQpIHJldHVybjtcbiAgfVxuICBsZXQgdGFyZ2V0VG91Y2g7XG4gIGlmIChlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBbLi4uZS5jaGFuZ2VkVG91Y2hlc10uZmlsdGVyKHQgPT4gdC5pZGVudGlmaWVyID09PSBkYXRhLnRvdWNoSWQpWzBdO1xuICAgIGlmICghdGFyZ2V0VG91Y2ggfHwgdGFyZ2V0VG91Y2guaWRlbnRpZmllciAhPT0gZGF0YS50b3VjaElkKSByZXR1cm47XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0VG91Y2ggPSBlO1xuICB9XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHBhZ2VYID0gdGFyZ2V0VG91Y2gucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gdGFyZ2V0VG91Y2gucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIGlmICghZS50YXJnZXQubWF0Y2hlcyhkYXRhLmZvY3VzYWJsZUVsZW1lbnRzKSkge1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBPYmplY3QuYXNzaWduKHRvdWNoZXMsIHtcbiAgICAgICAgc3RhcnRYOiBwYWdlWCxcbiAgICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgICAgY3VycmVudFg6IHBhZ2VYLFxuICAgICAgICBjdXJyZW50WTogcGFnZVlcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IG5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKHBhZ2VZIDwgdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgfHwgcGFnZVkgPiB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSkge1xuICAgICAgICBkYXRhLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGFnZVggPCB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSB8fCBwYWdlWCA+IHRvdWNoZXMuc3RhcnRYICYmIHN3aXBlci50cmFuc2xhdGUgPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50KSB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmIGUudGFyZ2V0Lm1hdGNoZXMoZGF0YS5mb2N1c2FibGVFbGVtZW50cykpIHtcbiAgICAgIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gICAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoTW92ZScsIGUpO1xuICB9XG4gIHRvdWNoZXMucHJldmlvdXNYID0gdG91Y2hlcy5jdXJyZW50WDtcbiAgdG91Y2hlcy5wcmV2aW91c1kgPSB0b3VjaGVzLmN1cnJlbnRZO1xuICB0b3VjaGVzLmN1cnJlbnRYID0gcGFnZVg7XG4gIHRvdWNoZXMuY3VycmVudFkgPSBwYWdlWTtcbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KGRpZmZYICoqIDIgKyBkaWZmWSAqKiAyKSA8IHN3aXBlci5wYXJhbXMudGhyZXNob2xkKSByZXR1cm47XG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpICYmIHRvdWNoZXMuY3VycmVudFkgPT09IHRvdWNoZXMuc3RhcnRZIHx8IHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpIHtcbiAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBpZiAoZGlmZlggKiBkaWZmWCArIGRpZmZZICogZGlmZlkgPj0gMjUpIHtcbiAgICAgICAgdG91Y2hBbmdsZSA9IE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwIC8gTWF0aC5QSTtcbiAgICAgICAgZGF0YS5pc1Njcm9sbGluZyA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoQW5nbGUgPiBwYXJhbXMudG91Y2hBbmdsZSA6IDkwIC0gdG91Y2hBbmdsZSA+IHBhcmFtcy50b3VjaEFuZ2xlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBpZiAoIXBhcmFtcy5jc3NNb2RlICYmIGUuY2FuY2VsYWJsZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgfVxuICBpZiAocGFyYW1zLnRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbiAmJiAhcGFyYW1zLm5lc3RlZCkge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH1cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICBsZXQgdG91Y2hlc0RpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5wcmV2aW91c1ggOiB0b3VjaGVzLmN1cnJlbnRZIC0gdG91Y2hlcy5wcmV2aW91c1k7XG4gIGlmIChwYXJhbXMub25lV2F5TW92ZW1lbnQpIHtcbiAgICBkaWZmID0gTWF0aC5hYnMoZGlmZikgKiAocnRsID8gMSA6IC0xKTtcbiAgICB0b3VjaGVzRGlmZiA9IE1hdGguYWJzKHRvdWNoZXNEaWZmKSAqIChydGwgPyAxIDogLTEpO1xuICB9XG4gIHRvdWNoZXMuZGlmZiA9IGRpZmY7XG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIHtcbiAgICBkaWZmID0gLWRpZmY7XG4gICAgdG91Y2hlc0RpZmYgPSAtdG91Y2hlc0RpZmY7XG4gIH1cbiAgY29uc3QgcHJldlRvdWNoZXNEaXJlY3Rpb24gPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbjtcbiAgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID0gZGlmZiA+IDAgPyAncHJldicgOiAnbmV4dCc7XG4gIHN3aXBlci50b3VjaGVzRGlyZWN0aW9uID0gdG91Y2hlc0RpZmYgPiAwID8gJ3ByZXYnIDogJ25leHQnO1xuICBjb25zdCBpc0xvb3AgPSBzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXBhcmFtcy5jc3NNb2RlO1xuICBjb25zdCBhbGxvd0xvb3BGaXggPSBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ25leHQnICYmIHN3aXBlci5hbGxvd1NsaWRlTmV4dCB8fCBzd2lwZXIudG91Y2hlc0RpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIHN3aXBlci5hbGxvd1NsaWRlUHJldjtcbiAgaWYgKCFkYXRhLmlzTW92ZWQpIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCkge1xuICAgICAgc3dpcGVyLmxvb3BGaXgoe1xuICAgICAgICBkaXJlY3Rpb246IHN3aXBlci5zd2lwZURpcmVjdGlvblxuICAgICAgfSk7XG4gICAgfVxuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCk7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oMCk7XG4gICAgaWYgKHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGNvbnN0IGV2dCA9IG5ldyB3aW5kb3cuQ3VzdG9tRXZlbnQoJ3RyYW5zaXRpb25lbmQnLCB7XG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgICAgc3dpcGVyLndyYXBwZXJFbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgfVxuICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IGZhbHNlO1xuICAgIC8vIEdyYWIgQ3Vyc29yXG4gICAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIChzd2lwZXIuYWxsb3dTbGlkZU5leHQgPT09IHRydWUgfHwgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IodHJ1ZSk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdzbGlkZXJGaXJzdE1vdmUnLCBlKTtcbiAgfVxuICBsZXQgbG9vcEZpeGVkO1xuICBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgaWYgKGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmFsbG93VGhyZXNob2xkTW92ZSAmJiBwcmV2VG91Y2hlc0RpcmVjdGlvbiAhPT0gc3dpcGVyLnRvdWNoZXNEaXJlY3Rpb24gJiYgaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiBNYXRoLmFicyhkaWZmKSA+PSAxKSB7XG4gICAgT2JqZWN0LmFzc2lnbih0b3VjaGVzLCB7XG4gICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgc3RhcnRZOiBwYWdlWSxcbiAgICAgIGN1cnJlbnRYOiBwYWdlWCxcbiAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIHN0YXJ0VHJhbnNsYXRlOiBkYXRhLmN1cnJlbnRUcmFuc2xhdGVcbiAgICB9KTtcbiAgICBkYXRhLmxvb3BTd2FwUmVzZXQgPSB0cnVlO1xuICAgIGRhdGEuc3RhcnRUcmFuc2xhdGUgPSBkYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gICAgcmV0dXJuO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG4gIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRpZmYgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICBsZXQgZGlzYWJsZVBhcmVudFN3aXBlciA9IHRydWU7XG4gIGxldCByZXNpc3RhbmNlUmF0aW8gPSBwYXJhbXMucmVzaXN0YW5jZVJhdGlvO1xuICBpZiAocGFyYW1zLnRvdWNoUmVsZWFzZU9uRWRnZXMpIHtcbiAgICByZXNpc3RhbmNlUmF0aW8gPSAwO1xuICB9XG4gIGlmIChkaWZmID4gMCkge1xuICAgIGlmIChpc0xvb3AgJiYgYWxsb3dMb29wRml4ICYmICFsb29wRml4ZWQgJiYgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gKHBhcmFtcy5jZW50ZXJlZFNsaWRlcyA/IHN3aXBlci5taW5UcmFuc2xhdGUoKSAtIHN3aXBlci5zbGlkZXNTaXplc0dyaWRbc3dpcGVyLmFjdGl2ZUluZGV4ICsgMV0gOiBzd2lwZXIubWluVHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ3ByZXYnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IDBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgICBpZiAocGFyYW1zLnJlc2lzdGFuY2UpIHtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSArICgtc3dpcGVyLm1pblRyYW5zbGF0ZSgpICsgZGF0YS5zdGFydFRyYW5zbGF0ZSArIGRpZmYpICoqIHJlc2lzdGFuY2VSYXRpbztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoZGlmZiA8IDApIHtcbiAgICBpZiAoaXNMb29wICYmIGFsbG93TG9vcEZpeCAmJiAhbG9vcEZpeGVkICYmIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW3N3aXBlci5zbGlkZXNTaXplc0dyaWQubGVuZ3RoIC0gMV0gOiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCh7XG4gICAgICAgIGRpcmVjdGlvbjogJ25leHQnLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IHRydWUsXG4gICAgICAgIGFjdGl2ZVNsaWRlSW5kZXg6IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgPyBzd2lwZXIuc2xpZGVzUGVyVmlld0R5bmFtaWMoKSA6IE1hdGguY2VpbChwYXJzZUZsb2F0KHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCkpKVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGRpc2FibGVQYXJlbnRTd2lwZXIgPSBmYWxzZTtcbiAgICAgIGlmIChwYXJhbXMucmVzaXN0YW5jZSkge1xuICAgICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBzd2lwZXIubWF4VHJhbnNsYXRlKCkgKyAxIC0gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW87XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChkaXNhYmxlUGFyZW50U3dpcGVyKSB7XG4gICAgZS5wcmV2ZW50ZWRCeU5lc3RlZFN3aXBlciA9IHRydWU7XG4gIH1cblxuICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVOZXh0ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA8IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmIHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IGRhdGEuc3RhcnRUcmFuc2xhdGUpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG4gIGlmICghc3dpcGVyLmFsbG93U2xpZGVQcmV2ICYmICFzd2lwZXIuYWxsb3dTbGlkZU5leHQpIHtcbiAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICB9XG5cbiAgLy8gVGhyZXNob2xkXG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkge1xuICAgIGlmIChNYXRoLmFicyhkaWZmKSA+IHBhcmFtcy50aHJlc2hvbGQgfHwgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgIGlmICghZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUpIHtcbiAgICAgICAgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSB0cnVlO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WCA9IHRvdWNoZXMuY3VycmVudFg7XG4gICAgICAgIHRvdWNoZXMuc3RhcnRZID0gdG91Y2hlcy5jdXJyZW50WTtcbiAgICAgICAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGF0YS5zdGFydFRyYW5zbGF0ZTtcbiAgICAgICAgdG91Y2hlcy5kaWZmID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gdG91Y2hlcy5jdXJyZW50WCAtIHRvdWNoZXMuc3RhcnRYIDogdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlciB8fCBwYXJhbXMuY3NzTW9kZSkgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgc3dpcGVyLmZyZWVNb2RlIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzKSB7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgfVxuICBpZiAocGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkICYmIHN3aXBlci5mcmVlTW9kZSkge1xuICAgIHN3aXBlci5mcmVlTW9kZS5vblRvdWNoTW92ZSgpO1xuICB9XG4gIC8vIFVwZGF0ZSBwcm9ncmVzc1xuICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbiAgLy8gVXBkYXRlIHRyYW5zbGF0ZVxuICBzd2lwZXIuc2V0VHJhbnNsYXRlKGRhdGEuY3VycmVudFRyYW5zbGF0ZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hFbmQoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGxldCB0YXJnZXRUb3VjaDtcbiAgY29uc3QgaXNUb3VjaEV2ZW50ID0gZS50eXBlID09PSAndG91Y2hlbmQnIHx8IGUudHlwZSA9PT0gJ3RvdWNoY2FuY2VsJztcbiAgaWYgKCFpc1RvdWNoRXZlbnQpIHtcbiAgICBpZiAoZGF0YS50b3VjaElkICE9PSBudWxsKSByZXR1cm47IC8vIHJldHVybiBmcm9tIHBvaW50ZXIgaWYgd2UgdXNlIHRvdWNoXG4gICAgaWYgKGUucG9pbnRlcklkICE9PSBkYXRhLnBvaW50ZXJJZCkgcmV0dXJuO1xuICAgIHRhcmdldFRvdWNoID0gZTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXRUb3VjaCA9IFsuLi5lLmNoYW5nZWRUb3VjaGVzXS5maWx0ZXIodCA9PiB0LmlkZW50aWZpZXIgPT09IGRhdGEudG91Y2hJZClbMF07XG4gICAgaWYgKCF0YXJnZXRUb3VjaCB8fCB0YXJnZXRUb3VjaC5pZGVudGlmaWVyICE9PSBkYXRhLnRvdWNoSWQpIHJldHVybjtcbiAgfVxuICBpZiAoWydwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJvdXQnLCAncG9pbnRlcmxlYXZlJywgJ2NvbnRleHRtZW51J10uaW5jbHVkZXMoZS50eXBlKSkge1xuICAgIGNvbnN0IHByb2NlZWQgPSBbJ3BvaW50ZXJjYW5jZWwnLCAnY29udGV4dG1lbnUnXS5pbmNsdWRlcyhlLnR5cGUpICYmIChzd2lwZXIuYnJvd3Nlci5pc1NhZmFyaSB8fCBzd2lwZXIuYnJvd3Nlci5pc1dlYlZpZXcpO1xuICAgIGlmICghcHJvY2VlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuICBkYXRhLnBvaW50ZXJJZCA9IG51bGw7XG4gIGRhdGEudG91Y2hJZCA9IG51bGw7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgdG91Y2hlcyxcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIGVuYWJsZWRcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKCFlbmFibGVkKSByZXR1cm47XG4gIGlmICghcGFyYW1zLnNpbXVsYXRlVG91Y2ggJiYgZS5wb2ludGVyVHlwZSA9PT0gJ21vdXNlJykgcmV0dXJuO1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBSZXR1cm4gR3JhYiBDdXJzb3JcbiAgaWYgKHBhcmFtcy5ncmFiQ3Vyc29yICYmIGRhdGEuaXNNb3ZlZCAmJiBkYXRhLmlzVG91Y2hlZCAmJiAoc3dpcGVyLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlIHx8IHN3aXBlci5hbGxvd1NsaWRlUHJldiA9PT0gdHJ1ZSkpIHtcbiAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gIH1cblxuICAvLyBUaW1lIGRpZmZcbiAgY29uc3QgdG91Y2hFbmRUaW1lID0gbm93KCk7XG4gIGNvbnN0IHRpbWVEaWZmID0gdG91Y2hFbmRUaW1lIC0gZGF0YS50b3VjaFN0YXJ0VGltZTtcblxuICAvLyBUYXAsIGRvdWJsZVRhcCwgQ2xpY2tcbiAgaWYgKHN3aXBlci5hbGxvd0NsaWNrKSB7XG4gICAgY29uc3QgcGF0aFRyZWUgPSBlLnBhdGggfHwgZS5jb21wb3NlZFBhdGggJiYgZS5jb21wb3NlZFBhdGgoKTtcbiAgICBzd2lwZXIudXBkYXRlQ2xpY2tlZFNsaWRlKHBhdGhUcmVlICYmIHBhdGhUcmVlWzBdIHx8IGUudGFyZ2V0LCBwYXRoVHJlZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCBjbGljaycsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiB0b3VjaEVuZFRpbWUgLSBkYXRhLmxhc3RDbGlja1RpbWUgPCAzMDApIHtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAgZG91YmxlQ2xpY2snLCBlKTtcbiAgICB9XG4gIH1cbiAgZGF0YS5sYXN0Q2xpY2tUaW1lID0gbm93KCk7XG4gIG5leHRUaWNrKCgpID0+IHtcbiAgICBpZiAoIXN3aXBlci5kZXN0cm95ZWQpIHN3aXBlci5hbGxvd0NsaWNrID0gdHJ1ZTtcbiAgfSk7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQgfHwgIWRhdGEuaXNNb3ZlZCB8fCAhc3dpcGVyLnN3aXBlRGlyZWN0aW9uIHx8IHRvdWNoZXMuZGlmZiA9PT0gMCAmJiAhZGF0YS5sb29wU3dhcFJlc2V0IHx8IGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9PT0gZGF0YS5zdGFydFRyYW5zbGF0ZSAmJiAhZGF0YS5sb29wU3dhcFJlc2V0KSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gIGxldCBjdXJyZW50UG9zO1xuICBpZiAocGFyYW1zLmZvbGxvd0Zpbmdlcikge1xuICAgIGN1cnJlbnRQb3MgPSBydGwgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG4gIH0gZWxzZSB7XG4gICAgY3VycmVudFBvcyA9IC1kYXRhLmN1cnJlbnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQpIHtcbiAgICBzd2lwZXIuZnJlZU1vZGUub25Ub3VjaEVuZCh7XG4gICAgICBjdXJyZW50UG9zXG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlXG4gIGNvbnN0IHN3aXBlVG9MYXN0ID0gY3VycmVudFBvcyA+PSAtc3dpcGVyLm1heFRyYW5zbGF0ZSgpICYmICFzd2lwZXIucGFyYW1zLmxvb3A7XG4gIGxldCBzdG9wSW5kZXggPSAwO1xuICBsZXQgZ3JvdXBTaXplID0gc3dpcGVyLnNsaWRlc1NpemVzR3JpZFswXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNHcmlkLmxlbmd0aDsgaSArPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCA/IDEgOiBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICBjb25zdCBpbmNyZW1lbnQgPSBpIDwgcGFyYW1zLnNsaWRlc1Blckdyb3VwU2tpcCAtIDEgPyAxIDogcGFyYW1zLnNsaWRlc1Blckdyb3VwO1xuICAgIGlmICh0eXBlb2Ygc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChzd2lwZVRvTGFzdCB8fCBjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0gJiYgY3VycmVudFBvcyA8IHNsaWRlc0dyaWRbaSArIGluY3JlbWVudF0pIHtcbiAgICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgICAgZ3JvdXBTaXplID0gc2xpZGVzR3JpZFtpICsgaW5jcmVtZW50XSAtIHNsaWRlc0dyaWRbaV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzd2lwZVRvTGFzdCB8fCBjdXJyZW50UG9zID49IHNsaWRlc0dyaWRbaV0pIHtcbiAgICAgIHN0b3BJbmRleCA9IGk7XG4gICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMV0gLSBzbGlkZXNHcmlkW3NsaWRlc0dyaWQubGVuZ3RoIC0gMl07XG4gICAgfVxuICB9XG4gIGxldCByZXdpbmRGaXJzdEluZGV4ID0gbnVsbDtcbiAgbGV0IHJld2luZExhc3RJbmRleCA9IG51bGw7XG4gIGlmIChwYXJhbXMucmV3aW5kKSB7XG4gICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgcmV3aW5kTGFzdEluZGV4ID0gcGFyYW1zLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZCAmJiBzd2lwZXIudmlydHVhbCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggLSAxIDogc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzRW5kKSB7XG4gICAgICByZXdpbmRGaXJzdEluZGV4ID0gMDtcbiAgICB9XG4gIH1cbiAgLy8gRmluZCBjdXJyZW50IHNsaWRlIHNpemVcbiAgY29uc3QgcmF0aW8gPSAoY3VycmVudFBvcyAtIHNsaWRlc0dyaWRbc3RvcEluZGV4XSkgLyBncm91cFNpemU7XG4gIGNvbnN0IGluY3JlbWVudCA9IHN0b3BJbmRleCA8IHBhcmFtcy5zbGlkZXNQZXJHcm91cFNraXAgLSAxID8gMSA6IHBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgaWYgKHRpbWVEaWZmID4gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgIC8vIExvbmcgdG91Y2hlc1xuICAgIGlmICghcGFyYW1zLmxvbmdTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICduZXh0Jykge1xuICAgICAgaWYgKHJhdGlvID49IHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pIHN3aXBlci5zbGlkZVRvKHBhcmFtcy5yZXdpbmQgJiYgc3dpcGVyLmlzRW5kID8gcmV3aW5kRmlyc3RJbmRleCA6IHN0b3BJbmRleCArIGluY3JlbWVudCk7ZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIGlmIChyYXRpbyA+IDEgLSBwYXJhbXMubG9uZ1N3aXBlc1JhdGlvKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCArIGluY3JlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKHJld2luZExhc3RJbmRleCAhPT0gbnVsbCAmJiByYXRpbyA8IDAgJiYgTWF0aC5hYnMocmF0aW8pID4gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gU2hvcnQgc3dpcGVzXG4gICAgaWYgKCFwYXJhbXMuc2hvcnRTd2lwZXMpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzTmF2QnV0dG9uVGFyZ2V0ID0gc3dpcGVyLm5hdmlnYXRpb24gJiYgKGUudGFyZ2V0ID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLnByZXZFbCk7XG4gICAgaWYgKCFpc05hdkJ1dHRvblRhcmdldCkge1xuICAgICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHJld2luZEZpcnN0SW5kZXggIT09IG51bGwgPyByZXdpbmRGaXJzdEluZGV4IDogc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICAgIH1cbiAgICAgIGlmIChzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPT09ICdwcmV2Jykge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhyZXdpbmRMYXN0SW5kZXggIT09IG51bGwgPyByZXdpbmRMYXN0SW5kZXggOiBzdG9wSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS50YXJnZXQgPT09IHN3aXBlci5uYXZpZ2F0aW9uLm5leHRFbCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgaW5jcmVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb25SZXNpemUoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWxcbiAgfSA9IHN3aXBlcjtcbiAgaWYgKGVsICYmIGVsLm9mZnNldFdpZHRoID09PSAwKSByZXR1cm47XG5cbiAgLy8gQnJlYWtwb2ludHNcbiAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gIH1cblxuICAvLyBTYXZlIGxvY2tzXG4gIGNvbnN0IHtcbiAgICBhbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldixcbiAgICBzbmFwR3JpZFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBpc1ZpcnR1YWwgPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcblxuICAvLyBEaXNhYmxlIGxvY2tzIG9uIHJlc2l6ZVxuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGNvbnN0IGlzVmlydHVhbExvb3AgPSBpc1ZpcnR1YWwgJiYgcGFyYW1zLmxvb3A7XG4gIGlmICgocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJyB8fCBwYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzICYmICFpc1ZpcnR1YWxMb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiAhaXNWaXJ0dWFsKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUb0xvb3Aoc3dpcGVyLnJlYWxJbmRleCwgMCwgZmFsc2UsIHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuYWN0aXZlSW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9XG4gIH1cbiAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgY2xlYXJUaW1lb3V0KHN3aXBlci5hdXRvcGxheS5yZXNpemVUaW1lb3V0KTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheSAmJiBzd2lwZXIuYXV0b3BsYXkucnVubmluZyAmJiBzd2lwZXIuYXV0b3BsYXkucGF1c2VkKSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5yZXN1bWUoKTtcbiAgICAgIH1cbiAgICB9LCA1MDApO1xuICB9XG4gIC8vIFJldHVybiBsb2NrcyBhZnRlciByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBpZiAoIXN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gIGlmICghc3dpcGVyLmFsbG93Q2xpY2spIHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzKSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uICYmIHN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICBlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvblNjcm9sbCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHdyYXBwZXJFbCxcbiAgICBydGxUcmFuc2xhdGUsXG4gICAgZW5hYmxlZFxuICB9ID0gc3dpcGVyO1xuICBpZiAoIWVuYWJsZWQpIHJldHVybjtcbiAgc3dpcGVyLnByZXZpb3VzVHJhbnNsYXRlID0gc3dpcGVyLnRyYW5zbGF0ZTtcbiAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgIHN3aXBlci50cmFuc2xhdGUgPSAtd3JhcHBlckVsLnNjcm9sbExlZnQ7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnRyYW5zbGF0ZSA9IC13cmFwcGVyRWwuc2Nyb2xsVG9wO1xuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpZiAoc3dpcGVyLnRyYW5zbGF0ZSA9PT0gMCkgc3dpcGVyLnRyYW5zbGF0ZSA9IDA7XG4gIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICBsZXQgbmV3UHJvZ3Jlc3M7XG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBpZiAodHJhbnNsYXRlc0RpZmYgPT09IDApIHtcbiAgICBuZXdQcm9ncmVzcyA9IDA7XG4gIH0gZWxzZSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAoc3dpcGVyLnRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyB0cmFuc2xhdGVzRGlmZjtcbiAgfVxuICBpZiAobmV3UHJvZ3Jlc3MgIT09IHN3aXBlci5wcm9ncmVzcykge1xuICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcyhydGxUcmFuc2xhdGUgPyAtc3dpcGVyLnRyYW5zbGF0ZSA6IHN3aXBlci50cmFuc2xhdGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIG9uTG9hZChlKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgZS50YXJnZXQpO1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jc3NNb2RlIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyAhPT0gJ2F1dG8nICYmICFzd2lwZXIucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgc3dpcGVyLnVwZGF0ZSgpO1xufVxuXG5mdW5jdGlvbiBvbkRvY3VtZW50VG91Y2hTdGFydCgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKHN3aXBlci5kb2N1bWVudFRvdWNoSGFuZGxlclByb2NlZWRlZCkgcmV0dXJuO1xuICBzd2lwZXIuZG9jdW1lbnRUb3VjaEhhbmRsZXJQcm9jZWVkZWQgPSB0cnVlO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgc3dpcGVyLmVsLnN0eWxlLnRvdWNoQWN0aW9uID0gJ2F1dG8nO1xuICB9XG59XG5cbmNvbnN0IGV2ZW50cyA9IChzd2lwZXIsIG1ldGhvZCkgPT4ge1xuICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsXG4gICAgZWwsXG4gICAgd3JhcHBlckVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBjYXB0dXJlID0gISFwYXJhbXMubmVzdGVkO1xuICBjb25zdCBkb21NZXRob2QgPSBtZXRob2QgPT09ICdvbicgPyAnYWRkRXZlbnRMaXN0ZW5lcicgOiAncmVtb3ZlRXZlbnRMaXN0ZW5lcic7XG4gIGNvbnN0IHN3aXBlck1ldGhvZCA9IG1ldGhvZDtcblxuICAvLyBUb3VjaCBFdmVudHNcbiAgZG9jdW1lbnRbZG9tTWV0aG9kXSgndG91Y2hzdGFydCcsIHN3aXBlci5vbkRvY3VtZW50VG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3RvdWNoc3RhcnQnLCBzd2lwZXIub25Ub3VjaFN0YXJ0LCB7XG4gICAgcGFzc2l2ZTogZmFsc2VcbiAgfSk7XG4gIGVsW2RvbU1ldGhvZF0oJ3BvaW50ZXJkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwge1xuICAgIHBhc3NpdmU6IGZhbHNlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCd0b3VjaG1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIHtcbiAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICBjYXB0dXJlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybW92ZScsIHN3aXBlci5vblRvdWNoTW92ZSwge1xuICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgIGNhcHR1cmVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoZW5kJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVydXAnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3BvaW50ZXJjYW5jZWwnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ3RvdWNoY2FuY2VsJywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVyb3V0Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuICBkb2N1bWVudFtkb21NZXRob2RdKCdwb2ludGVybGVhdmUnLCBzd2lwZXIub25Ub3VjaEVuZCwge1xuICAgIHBhc3NpdmU6IHRydWVcbiAgfSk7XG4gIGRvY3VtZW50W2RvbU1ldGhvZF0oJ2NvbnRleHRtZW51Jywgc3dpcGVyLm9uVG91Y2hFbmQsIHtcbiAgICBwYXNzaXZlOiB0cnVlXG4gIH0pO1xuXG4gIC8vIFByZXZlbnQgTGlua3MgQ2xpY2tzXG4gIGlmIChwYXJhbXMucHJldmVudENsaWNrcyB8fCBwYXJhbXMucHJldmVudENsaWNrc1Byb3BhZ2F0aW9uKSB7XG4gICAgZWxbZG9tTWV0aG9kXSgnY2xpY2snLCBzd2lwZXIub25DbGljaywgdHJ1ZSk7XG4gIH1cbiAgaWYgKHBhcmFtcy5jc3NNb2RlKSB7XG4gICAgd3JhcHBlckVsW2RvbU1ldGhvZF0oJ3Njcm9sbCcsIHN3aXBlci5vblNjcm9sbCk7XG4gIH1cblxuICAvLyBSZXNpemUgaGFuZGxlclxuICBpZiAocGFyYW1zLnVwZGF0ZU9uV2luZG93UmVzaXplKSB7XG4gICAgc3dpcGVyW3N3aXBlck1ldGhvZF0oZGV2aWNlLmlvcyB8fCBkZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScsIG9uUmVzaXplLCB0cnVlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXJbc3dpcGVyTWV0aG9kXSgnb2JzZXJ2ZXJVcGRhdGUnLCBvblJlc2l6ZSwgdHJ1ZSk7XG4gIH1cblxuICAvLyBJbWFnZXMgbG9hZGVyXG4gIGVsW2RvbU1ldGhvZF0oJ2xvYWQnLCBzd2lwZXIub25Mb2FkLCB7XG4gICAgY2FwdHVyZTogdHJ1ZVxuICB9KTtcbn07XG5mdW5jdGlvbiBhdHRhY2hFdmVudHMoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBwYXJhbXNcbiAgfSA9IHN3aXBlcjtcbiAgc3dpcGVyLm9uVG91Y2hTdGFydCA9IG9uVG91Y2hTdGFydC5iaW5kKHN3aXBlcik7XG4gIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uVG91Y2hFbmQgPSBvblRvdWNoRW5kLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uRG9jdW1lbnRUb3VjaFN0YXJ0ID0gb25Eb2N1bWVudFRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICBpZiAocGFyYW1zLmNzc01vZGUpIHtcbiAgICBzd2lwZXIub25TY3JvbGwgPSBvblNjcm9sbC5iaW5kKHN3aXBlcik7XG4gIH1cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcbiAgc3dpcGVyLm9uTG9hZCA9IG9uTG9hZC5iaW5kKHN3aXBlcik7XG4gIGV2ZW50cyhzd2lwZXIsICdvbicpO1xufVxuZnVuY3Rpb24gZGV0YWNoRXZlbnRzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBldmVudHMoc3dpcGVyLCAnb2ZmJyk7XG59XG52YXIgZXZlbnRzJDEgPSB7XG4gIGF0dGFjaEV2ZW50cyxcbiAgZGV0YWNoRXZlbnRzXG59O1xuXG5jb25zdCBpc0dyaWRFbmFibGVkID0gKHN3aXBlciwgcGFyYW1zKSA9PiB7XG4gIHJldHVybiBzd2lwZXIuZ3JpZCAmJiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMTtcbn07XG5mdW5jdGlvbiBzZXRCcmVha3BvaW50KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgcmVhbEluZGV4LFxuICAgIGluaXRpYWxpemVkLFxuICAgIHBhcmFtcyxcbiAgICBlbFxuICB9ID0gc3dpcGVyO1xuICBjb25zdCBicmVha3BvaW50cyA9IHBhcmFtcy5icmVha3BvaW50cztcbiAgaWYgKCFicmVha3BvaW50cyB8fCBicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aCBhbmQgdXBkYXRlIHBhcmFtZXRlcnNcbiAgY29uc3QgYnJlYWtwb2ludCA9IHN3aXBlci5nZXRCcmVha3BvaW50KGJyZWFrcG9pbnRzLCBzd2lwZXIucGFyYW1zLmJyZWFrcG9pbnRzQmFzZSwgc3dpcGVyLmVsKTtcbiAgaWYgKCFicmVha3BvaW50IHx8IHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9PT0gYnJlYWtwb2ludCkgcmV0dXJuO1xuICBjb25zdCBicmVha3BvaW50T25seVBhcmFtcyA9IGJyZWFrcG9pbnQgaW4gYnJlYWtwb2ludHMgPyBicmVha3BvaW50c1ticmVha3BvaW50XSA6IHVuZGVmaW5lZDtcbiAgY29uc3QgYnJlYWtwb2ludFBhcmFtcyA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zIHx8IHN3aXBlci5vcmlnaW5hbFBhcmFtcztcbiAgY29uc3Qgd2FzTXVsdGlSb3cgPSBpc0dyaWRFbmFibGVkKHN3aXBlciwgcGFyYW1zKTtcbiAgY29uc3QgaXNNdWx0aVJvdyA9IGlzR3JpZEVuYWJsZWQoc3dpcGVyLCBicmVha3BvaW50UGFyYW1zKTtcbiAgY29uc3Qgd2FzRW5hYmxlZCA9IHBhcmFtcy5lbmFibGVkO1xuICBpZiAod2FzTXVsdGlSb3cgJiYgIWlzTXVsdGlSb3cpIHtcbiAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKGAke3BhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWdyaWRgLCBgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkLWNvbHVtbmApO1xuICAgIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xuICB9IGVsc2UgaWYgKCF3YXNNdWx0aVJvdyAmJiBpc011bHRpUm93KSB7XG4gICAgZWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ncmlkYCk7XG4gICAgaWYgKGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsICYmIGJyZWFrcG9pbnRQYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJyB8fCAhYnJlYWtwb2ludFBhcmFtcy5ncmlkLmZpbGwgJiYgcGFyYW1zLmdyaWQuZmlsbCA9PT0gJ2NvbHVtbicpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5hZGQoYCR7cGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9Z3JpZC1jb2x1bW5gKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gIH1cblxuICAvLyBUb2dnbGUgbmF2aWdhdGlvbiwgcGFnaW5hdGlvbiwgc2Nyb2xsYmFyXG4gIFsnbmF2aWdhdGlvbicsICdwYWdpbmF0aW9uJywgJ3Njcm9sbGJhciddLmZvckVhY2gocHJvcCA9PiB7XG4gICAgaWYgKHR5cGVvZiBicmVha3BvaW50UGFyYW1zW3Byb3BdID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGNvbnN0IHdhc01vZHVsZUVuYWJsZWQgPSBwYXJhbXNbcHJvcF0gJiYgcGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgY29uc3QgaXNNb2R1bGVFbmFibGVkID0gYnJlYWtwb2ludFBhcmFtc1twcm9wXSAmJiBicmVha3BvaW50UGFyYW1zW3Byb3BdLmVuYWJsZWQ7XG4gICAgaWYgKHdhc01vZHVsZUVuYWJsZWQgJiYgIWlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmRpc2FibGUoKTtcbiAgICB9XG4gICAgaWYgKCF3YXNNb2R1bGVFbmFibGVkICYmIGlzTW9kdWxlRW5hYmxlZCkge1xuICAgICAgc3dpcGVyW3Byb3BdLmVuYWJsZSgpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgY29uc3QgbmVlZHNSZUxvb3AgPSBwYXJhbXMubG9vcCAmJiAoYnJlYWtwb2ludFBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSBwYXJhbXMuc2xpZGVzUGVyVmlldyB8fCBkaXJlY3Rpb25DaGFuZ2VkKTtcbiAgY29uc3Qgd2FzTG9vcCA9IHBhcmFtcy5sb29wO1xuICBpZiAoZGlyZWN0aW9uQ2hhbmdlZCAmJiBpbml0aWFsaXplZCkge1xuICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgfVxuICBleHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIGNvbnN0IGlzRW5hYmxlZCA9IHN3aXBlci5wYXJhbXMuZW5hYmxlZDtcbiAgY29uc3QgaGFzTG9vcCA9IHN3aXBlci5wYXJhbXMubG9vcDtcbiAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICBhbGxvd1NsaWRlUHJldjogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlUHJldlxuICB9KTtcbiAgaWYgKHdhc0VuYWJsZWQgJiYgIWlzRW5hYmxlZCkge1xuICAgIHN3aXBlci5kaXNhYmxlKCk7XG4gIH0gZWxzZSBpZiAoIXdhc0VuYWJsZWQgJiYgaXNFbmFibGVkKSB7XG4gICAgc3dpcGVyLmVuYWJsZSgpO1xuICB9XG4gIHN3aXBlci5jdXJyZW50QnJlYWtwb2ludCA9IGJyZWFrcG9pbnQ7XG4gIHN3aXBlci5lbWl0KCdfYmVmb3JlQnJlYWtwb2ludCcsIGJyZWFrcG9pbnRQYXJhbXMpO1xuICBpZiAoaW5pdGlhbGl6ZWQpIHtcbiAgICBpZiAobmVlZHNSZUxvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUocmVhbEluZGV4KTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICB9IGVsc2UgaWYgKCF3YXNMb29wICYmIGhhc0xvb3ApIHtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKHJlYWxJbmRleCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgfSBlbHNlIGlmICh3YXNMb29wICYmICFoYXNMb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmVtaXQoJ2JyZWFrcG9pbnQnLCBicmVha3BvaW50UGFyYW1zKTtcbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludChicmVha3BvaW50cywgYmFzZSwgY29udGFpbmVyRWwpIHtcbiAgaWYgKGJhc2UgPT09IHZvaWQgMCkge1xuICAgIGJhc2UgPSAnd2luZG93JztcbiAgfVxuICBpZiAoIWJyZWFrcG9pbnRzIHx8IGJhc2UgPT09ICdjb250YWluZXInICYmICFjb250YWluZXJFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgbGV0IGJyZWFrcG9pbnQgPSBmYWxzZTtcbiAgY29uc3Qgd2luZG93ID0gZ2V0V2luZG93KCk7XG4gIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBiYXNlID09PSAnd2luZG93JyA/IHdpbmRvdy5pbm5lckhlaWdodCA6IGNvbnRhaW5lckVsLmNsaWVudEhlaWdodDtcbiAgY29uc3QgcG9pbnRzID0gT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLm1hcChwb2ludCA9PiB7XG4gICAgaWYgKHR5cGVvZiBwb2ludCA9PT0gJ3N0cmluZycgJiYgcG9pbnQuaW5kZXhPZignQCcpID09PSAwKSB7XG4gICAgICBjb25zdCBtaW5SYXRpbyA9IHBhcnNlRmxvYXQocG9pbnQuc3Vic3RyKDEpKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gY3VycmVudEhlaWdodCAqIG1pblJhdGlvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHBvaW50XG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHBvaW50LFxuICAgICAgcG9pbnRcbiAgICB9O1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEudmFsdWUsIDEwKSAtIHBhcnNlSW50KGIudmFsdWUsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3Qge1xuICAgICAgcG9pbnQsXG4gICAgICB2YWx1ZVxuICAgIH0gPSBwb2ludHNbaV07XG4gICAgaWYgKGJhc2UgPT09ICd3aW5kb3cnKSB7XG4gICAgICBpZiAod2luZG93Lm1hdGNoTWVkaWEoYChtaW4td2lkdGg6ICR7dmFsdWV9cHgpYCkubWF0Y2hlcykge1xuICAgICAgICBicmVha3BvaW50ID0gcG9pbnQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA8PSBjb250YWluZXJFbC5jbGllbnRXaWR0aCkge1xuICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgIH1cbiAgfVxuICByZXR1cm4gYnJlYWtwb2ludCB8fCAnbWF4Jztcbn1cblxudmFyIGJyZWFrcG9pbnRzID0ge1xuICBzZXRCcmVha3BvaW50LFxuICBnZXRCcmVha3BvaW50XG59O1xuXG5mdW5jdGlvbiBwcmVwYXJlQ2xhc3NlcyhlbnRyaWVzLCBwcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0Q2xhc3NlcyA9IFtdO1xuICBlbnRyaWVzLmZvckVhY2goaXRlbSA9PiB7XG4gICAgaWYgKHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgT2JqZWN0LmtleXMoaXRlbSkuZm9yRWFjaChjbGFzc05hbWVzID0+IHtcbiAgICAgICAgaWYgKGl0ZW1bY2xhc3NOYW1lc10pIHtcbiAgICAgICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgY2xhc3NOYW1lcyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXN1bHRDbGFzc2VzLnB1c2gocHJlZml4ICsgaXRlbSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdENsYXNzZXM7XG59XG5mdW5jdGlvbiBhZGRDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgY2xhc3NOYW1lcyxcbiAgICBwYXJhbXMsXG4gICAgcnRsLFxuICAgIGVsLFxuICAgIGRldmljZVxuICB9ID0gc3dpcGVyO1xuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgY29uc3Qgc3VmZml4ZXMgPSBwcmVwYXJlQ2xhc3NlcyhbJ2luaXRpYWxpemVkJywgcGFyYW1zLmRpcmVjdGlvbiwge1xuICAgICdmcmVlLW1vZGUnOiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlICYmIHBhcmFtcy5mcmVlTW9kZS5lbmFibGVkXG4gIH0sIHtcbiAgICAnYXV0b2hlaWdodCc6IHBhcmFtcy5hdXRvSGVpZ2h0XG4gIH0sIHtcbiAgICAncnRsJzogcnRsXG4gIH0sIHtcbiAgICAnZ3JpZCc6IHBhcmFtcy5ncmlkICYmIHBhcmFtcy5ncmlkLnJvd3MgPiAxXG4gIH0sIHtcbiAgICAnZ3JpZC1jb2x1bW4nOiBwYXJhbXMuZ3JpZCAmJiBwYXJhbXMuZ3JpZC5yb3dzID4gMSAmJiBwYXJhbXMuZ3JpZC5maWxsID09PSAnY29sdW1uJ1xuICB9LCB7XG4gICAgJ2FuZHJvaWQnOiBkZXZpY2UuYW5kcm9pZFxuICB9LCB7XG4gICAgJ2lvcyc6IGRldmljZS5pb3NcbiAgfSwge1xuICAgICdjc3MtbW9kZSc6IHBhcmFtcy5jc3NNb2RlXG4gIH0sIHtcbiAgICAnY2VudGVyZWQnOiBwYXJhbXMuY3NzTW9kZSAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXNcbiAgfSwge1xuICAgICd3YXRjaC1wcm9ncmVzcyc6IHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzXG4gIH1dLCBwYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcyk7XG4gIGNsYXNzTmFtZXMucHVzaCguLi5zdWZmaXhlcyk7XG4gIGVsLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lcyk7XG4gIHN3aXBlci5lbWl0Q29udGFpbmVyQ2xhc3NlcygpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgZWwsXG4gICAgY2xhc3NOYW1lc1xuICB9ID0gc3dpcGVyO1xuICBlbC5jbGFzc0xpc3QucmVtb3ZlKC4uLmNsYXNzTmFtZXMpO1xuICBzd2lwZXIuZW1pdENvbnRhaW5lckNsYXNzZXMoKTtcbn1cblxudmFyIGNsYXNzZXMgPSB7XG4gIGFkZENsYXNzZXMsXG4gIHJlbW92ZUNsYXNzZXNcbn07XG5cbmZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3coKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBpc0xvY2tlZDogd2FzTG9ja2VkLFxuICAgIHBhcmFtc1xuICB9ID0gc3dpcGVyO1xuICBjb25zdCB7XG4gICAgc2xpZGVzT2Zmc2V0QmVmb3JlXG4gIH0gPSBwYXJhbXM7XG4gIGlmIChzbGlkZXNPZmZzZXRCZWZvcmUpIHtcbiAgICBjb25zdCBsYXN0U2xpZGVJbmRleCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoIC0gMTtcbiAgICBjb25zdCBsYXN0U2xpZGVSaWdodEVkZ2UgPSBzd2lwZXIuc2xpZGVzR3JpZFtsYXN0U2xpZGVJbmRleF0gKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2xhc3RTbGlkZUluZGV4XSArIHNsaWRlc09mZnNldEJlZm9yZSAqIDI7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNpemUgPiBsYXN0U2xpZGVSaWdodEVkZ2U7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVOZXh0ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAocGFyYW1zLmFsbG93U2xpZGVQcmV2ID09PSB0cnVlKSB7XG4gICAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgfVxuICBpZiAod2FzTG9ja2VkICYmIHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmlzRW5kID0gZmFsc2U7XG4gIH1cbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSB7XG4gICAgc3dpcGVyLmVtaXQoc3dpcGVyLmlzTG9ja2VkID8gJ2xvY2snIDogJ3VubG9jaycpO1xuICB9XG59XG52YXIgY2hlY2tPdmVyZmxvdyQxID0ge1xuICBjaGVja092ZXJmbG93XG59O1xuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGluaXQ6IHRydWUsXG4gIGRpcmVjdGlvbjogJ2hvcml6b250YWwnLFxuICBvbmVXYXlNb3ZlbWVudDogZmFsc2UsXG4gIHRvdWNoRXZlbnRzVGFyZ2V0OiAnd3JhcHBlcicsXG4gIGluaXRpYWxTbGlkZTogMCxcbiAgc3BlZWQ6IDMwMCxcbiAgY3NzTW9kZTogZmFsc2UsXG4gIHVwZGF0ZU9uV2luZG93UmVzaXplOiB0cnVlLFxuICByZXNpemVPYnNlcnZlcjogdHJ1ZSxcbiAgbmVzdGVkOiBmYWxzZSxcbiAgY3JlYXRlRWxlbWVudHM6IGZhbHNlLFxuICBldmVudHNQcmVmaXg6ICdzd2lwZXInLFxuICBlbmFibGVkOiB0cnVlLFxuICBmb2N1c2FibGVFbGVtZW50czogJ2lucHV0LCBzZWxlY3QsIG9wdGlvbiwgdGV4dGFyZWEsIGJ1dHRvbiwgdmlkZW8sIGxhYmVsJyxcbiAgLy8gT3ZlcnJpZGVzXG4gIHdpZHRoOiBudWxsLFxuICBoZWlnaHQ6IG51bGwsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG4gIC8vIHNzclxuICB1c2VyQWdlbnQ6IG51bGwsXG4gIHVybDogbnVsbCxcbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHApLlxuICBlZGdlU3dpcGVEZXRlY3Rpb246IGZhbHNlLFxuICBlZGdlU3dpcGVUaHJlc2hvbGQ6IDIwLFxuICAvLyBBdXRvaGVpZ2h0XG4gIGF1dG9IZWlnaHQ6IGZhbHNlLFxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG4gIC8vIFZpcnR1YWwgVHJhbnNsYXRlXG4gIHZpcnR1YWxUcmFuc2xhdGU6IGZhbHNlLFxuICAvLyBFZmZlY3RzXG4gIGVmZmVjdDogJ3NsaWRlJyxcbiAgLy8gJ3NsaWRlJyBvciAnZmFkZScgb3IgJ2N1YmUnIG9yICdjb3ZlcmZsb3cnIG9yICdmbGlwJ1xuXG4gIC8vIEJyZWFrcG9pbnRzXG4gIGJyZWFrcG9pbnRzOiB1bmRlZmluZWQsXG4gIGJyZWFrcG9pbnRzQmFzZTogJ3dpbmRvdycsXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIHNsaWRlc1Blckdyb3VwU2tpcDogMCxcbiAgc2xpZGVzUGVyR3JvdXBBdXRvOiBmYWxzZSxcbiAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICBjZW50ZXJlZFNsaWRlc0JvdW5kczogZmFsc2UsXG4gIHNsaWRlc09mZnNldEJlZm9yZTogMCxcbiAgLy8gaW4gcHhcbiAgc2xpZGVzT2Zmc2V0QWZ0ZXI6IDAsXG4gIC8vIGluIHB4XG4gIG5vcm1hbGl6ZVNsaWRlSW5kZXg6IHRydWUsXG4gIGNlbnRlckluc3VmZmljaWVudFNsaWRlczogZmFsc2UsXG4gIC8vIERpc2FibGUgc3dpcGVyIGFuZCBoaWRlIG5hdmlnYXRpb24gd2hlbiBjb250YWluZXIgbm90IG92ZXJmbG93XG4gIHdhdGNoT3ZlcmZsb3c6IHRydWUsXG4gIC8vIFJvdW5kIGxlbmd0aFxuICByb3VuZExlbmd0aHM6IGZhbHNlLFxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDUsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogZmFsc2UsXG4gIHRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDogdHJ1ZSxcbiAgdG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQ6IGZhbHNlLFxuICB0b3VjaFJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgLy8gVW5pcXVlIE5hdmlnYXRpb24gRWxlbWVudHNcbiAgdW5pcXVlTmF2RWxlbWVudHM6IHRydWUsXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuICAvLyBQcm9ncmVzc1xuICB3YXRjaFNsaWRlc1Byb2dyZXNzOiBmYWxzZSxcbiAgLy8gQ3Vyc29yXG4gIGdyYWJDdXJzb3I6IGZhbHNlLFxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgLy8gbG9vcFxuICBsb29wOiBmYWxzZSxcbiAgbG9vcEFkZEJsYW5rU2xpZGVzOiB0cnVlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcFByZXZlbnRzU2xpZGluZzogdHJ1ZSxcbiAgLy8gcmV3aW5kXG4gIHJld2luZDogZmFsc2UsXG4gIC8vIFN3aXBpbmcvbm8gc3dpcGluZ1xuICBhbGxvd1NsaWRlUHJldjogdHJ1ZSxcbiAgYWxsb3dTbGlkZU5leHQ6IHRydWUsXG4gIHN3aXBlSGFuZGxlcjogbnVsbCxcbiAgLy8gJy5zd2lwZS1oYW5kbGVyJyxcbiAgbm9Td2lwaW5nOiB0cnVlLFxuICBub1N3aXBpbmdDbGFzczogJ3N3aXBlci1uby1zd2lwaW5nJyxcbiAgbm9Td2lwaW5nU2VsZWN0b3I6IG51bGwsXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG4gIG1heEJhY2tmYWNlSGlkZGVuU2xpZGVzOiAxMCxcbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci0nLFxuICAvLyBORVdcbiAgc2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZScsXG4gIHNsaWRlQmxhbmtDbGFzczogJ3N3aXBlci1zbGlkZS1ibGFuaycsXG4gIHNsaWRlQWN0aXZlQ2xhc3M6ICdzd2lwZXItc2xpZGUtYWN0aXZlJyxcbiAgc2xpZGVWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtdmlzaWJsZScsXG4gIHNsaWRlRnVsbHlWaXNpYmxlQ2xhc3M6ICdzd2lwZXItc2xpZGUtZnVsbHktdmlzaWJsZScsXG4gIHNsaWRlTmV4dENsYXNzOiAnc3dpcGVyLXNsaWRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgd3JhcHBlckNsYXNzOiAnc3dpcGVyLXdyYXBwZXInLFxuICBsYXp5UHJlbG9hZGVyQ2xhc3M6ICdzd2lwZXItbGF6eS1wcmVsb2FkZXInLFxuICBsYXp5UHJlbG9hZFByZXZOZXh0OiAwLFxuICAvLyBDYWxsYmFja3NcbiAgcnVuQ2FsbGJhY2tzT25Jbml0OiB0cnVlLFxuICAvLyBJbnRlcm5hbHNcbiAgX2VtaXRDbGFzc2VzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcykge1xuICByZXR1cm4gZnVuY3Rpb24gZXh0ZW5kUGFyYW1zKG9iaikge1xuICAgIGlmIChvYmogPT09IHZvaWQgMCkge1xuICAgICAgb2JqID0ge307XG4gICAgfVxuICAgIGNvbnN0IG1vZHVsZVBhcmFtTmFtZSA9IE9iamVjdC5rZXlzKG9iailbMF07XG4gICAgY29uc3QgbW9kdWxlUGFyYW1zID0gb2JqW21vZHVsZVBhcmFtTmFtZV07XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVQYXJhbXMgIT09ICdvYmplY3QnIHx8IG1vZHVsZVBhcmFtcyA9PT0gbnVsbCkge1xuICAgICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChtb2R1bGVQYXJhbU5hbWUgPT09ICduYXZpZ2F0aW9uJyAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSAmJiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkICYmICFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5wcmV2RWwgJiYgIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLm5leHRFbCkge1xuICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uYXV0byA9IHRydWU7XG4gICAgfVxuICAgIGlmIChbJ3BhZ2luYXRpb24nLCAnc2Nyb2xsYmFyJ10uaW5kZXhPZihtb2R1bGVQYXJhbU5hbWUpID49IDAgJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gJiYgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZW5hYmxlZCAmJiAhcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0uZWwpIHtcbiAgICAgIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdLmF1dG8gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoIShtb2R1bGVQYXJhbU5hbWUgaW4gcGFyYW1zICYmICdlbmFibGVkJyBpbiBtb2R1bGVQYXJhbXMpKSB7XG4gICAgICBleHRlbmQoYWxsTW9kdWxlc1BhcmFtcywgb2JqKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9PT0gJ29iamVjdCcgJiYgISgnZW5hYmxlZCcgaW4gcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0pKSB7XG4gICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSkgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZVxuICAgIH07XG4gICAgZXh0ZW5kKGFsbE1vZHVsZXNQYXJhbXMsIG9iaik7XG4gIH07XG59XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuY29uc3QgcHJvdG90eXBlcyA9IHtcbiAgZXZlbnRzRW1pdHRlcixcbiAgdXBkYXRlLFxuICB0cmFuc2xhdGUsXG4gIHRyYW5zaXRpb24sXG4gIHNsaWRlLFxuICBsb29wLFxuICBncmFiQ3Vyc29yLFxuICBldmVudHM6IGV2ZW50cyQxLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzXG59O1xuY29uc3QgZXh0ZW5kZWREZWZhdWx0cyA9IHt9O1xuY2xhc3MgU3dpcGVyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgbGV0IGVsO1xuICAgIGxldCBwYXJhbXM7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgYXJnc1swXS5jb25zdHJ1Y3RvciAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJnc1swXSkuc2xpY2UoOCwgLTEpID09PSAnT2JqZWN0Jykge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuICAgIHBhcmFtcyA9IGV4dGVuZCh7fSwgcGFyYW1zKTtcbiAgICBpZiAoZWwgJiYgIXBhcmFtcy5lbCkgcGFyYW1zLmVsID0gZWw7XG4gICAgY29uc3QgZG9jdW1lbnQgPSBnZXREb2N1bWVudCgpO1xuICAgIGlmIChwYXJhbXMuZWwgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IHN3aXBlcnMgPSBbXTtcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwocGFyYW1zLmVsKS5mb3JFYWNoKGNvbnRhaW5lckVsID0+IHtcbiAgICAgICAgY29uc3QgbmV3UGFyYW1zID0gZXh0ZW5kKHt9LCBwYXJhbXMsIHtcbiAgICAgICAgICBlbDogY29udGFpbmVyRWxcbiAgICAgICAgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5fX3N3aXBlcl9fID0gdHJ1ZTtcbiAgICBzd2lwZXIuc3VwcG9ydCA9IGdldFN1cHBvcnQoKTtcbiAgICBzd2lwZXIuZGV2aWNlID0gZ2V0RGV2aWNlKHtcbiAgICAgIHVzZXJBZ2VudDogcGFyYW1zLnVzZXJBZ2VudFxuICAgIH0pO1xuICAgIHN3aXBlci5icm93c2VyID0gZ2V0QnJvd3NlcigpO1xuICAgIHN3aXBlci5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcbiAgICBzd2lwZXIuZXZlbnRzQW55TGlzdGVuZXJzID0gW107XG4gICAgc3dpcGVyLm1vZHVsZXMgPSBbLi4uc3dpcGVyLl9fbW9kdWxlc19fXTtcbiAgICBpZiAocGFyYW1zLm1vZHVsZXMgJiYgQXJyYXkuaXNBcnJheShwYXJhbXMubW9kdWxlcykpIHtcbiAgICAgIHN3aXBlci5tb2R1bGVzLnB1c2goLi4ucGFyYW1zLm1vZHVsZXMpO1xuICAgIH1cbiAgICBjb25zdCBhbGxNb2R1bGVzUGFyYW1zID0ge307XG4gICAgc3dpcGVyLm1vZHVsZXMuZm9yRWFjaChtb2QgPT4ge1xuICAgICAgbW9kKHtcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICBzd2lwZXIsXG4gICAgICAgIGV4dGVuZFBhcmFtczogbW9kdWxlRXh0ZW5kUGFyYW1zKHBhcmFtcywgYWxsTW9kdWxlc1BhcmFtcyksXG4gICAgICAgIG9uOiBzd2lwZXIub24uYmluZChzd2lwZXIpLFxuICAgICAgICBvbmNlOiBzd2lwZXIub25jZS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9mZjogc3dpcGVyLm9mZi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVtaXQ6IHN3aXBlci5lbWl0LmJpbmQoc3dpcGVyKVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBFeHRlbmQgZGVmYXVsdHMgd2l0aCBtb2R1bGVzIHBhcmFtc1xuICAgIGNvbnN0IHN3aXBlclBhcmFtcyA9IGV4dGVuZCh7fSwgZGVmYXVsdHMsIGFsbE1vZHVsZXNQYXJhbXMpO1xuXG4gICAgLy8gRXh0ZW5kIGRlZmF1bHRzIHdpdGggcGFzc2VkIHBhcmFtc1xuICAgIHN3aXBlci5wYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlclBhcmFtcywgZXh0ZW5kZWREZWZhdWx0cywgcGFyYW1zKTtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMgPSBleHRlbmQoe30sIHN3aXBlci5wYXJhbXMpO1xuICAgIHN3aXBlci5wYXNzZWRQYXJhbXMgPSBleHRlbmQoe30sIHBhcmFtcyk7XG5cbiAgICAvLyBhZGQgZXZlbnQgbGlzdGVuZXJzXG4gICAgaWYgKHN3aXBlci5wYXJhbXMgJiYgc3dpcGVyLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc3dpcGVyLnBhcmFtcy5vbikuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgICBzd2lwZXIub24oZXZlbnROYW1lLCBzd2lwZXIucGFyYW1zLm9uW2V2ZW50TmFtZV0pO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zICYmIHN3aXBlci5wYXJhbXMub25BbnkpIHtcbiAgICAgIHN3aXBlci5vbkFueShzd2lwZXIucGFyYW1zLm9uQW55KTtcbiAgICB9XG5cbiAgICAvLyBFeHRlbmQgU3dpcGVyXG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVuYWJsZWQ6IHN3aXBlci5wYXJhbXMuZW5hYmxlZCxcbiAgICAgIGVsLFxuICAgICAgLy8gQ2xhc3Nlc1xuICAgICAgY2xhc3NOYW1lczogW10sXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogW10sXG4gICAgICBzbGlkZXNHcmlkOiBbXSxcbiAgICAgIHNuYXBHcmlkOiBbXSxcbiAgICAgIHNsaWRlc1NpemVzR3JpZDogW10sXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG4gICAgICAvL1xuICAgICAgaXNCZWdpbm5pbmc6IHRydWUsXG4gICAgICBpc0VuZDogZmFsc2UsXG4gICAgICAvLyBQcm9wc1xuICAgICAgdHJhbnNsYXRlOiAwLFxuICAgICAgcHJldmlvdXNUcmFuc2xhdGU6IDAsXG4gICAgICBwcm9ncmVzczogMCxcbiAgICAgIHZlbG9jaXR5OiAwLFxuICAgICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICAgIGNzc092ZXJmbG93QWRqdXN0bWVudCgpIHtcbiAgICAgICAgLy8gUmV0dXJucyAwIHVubGVzcyBgdHJhbnNsYXRlYCBpcyA+IDIqKjIzXG4gICAgICAgIC8vIFNob3VsZCBiZSBzdWJ0cmFjdGVkIGZyb20gY3NzIHZhbHVlcyB0byBwcmV2ZW50IG92ZXJmbG93XG4gICAgICAgIHJldHVybiBNYXRoLnRydW5jKHRoaXMudHJhbnNsYXRlIC8gMiAqKiAyMykgKiAyICoqIDIzO1xuICAgICAgfSxcbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuICAgICAgLy8gVG91Y2ggRXZlbnRzXG4gICAgICB0b3VjaEV2ZW50c0RhdGE6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUb3VjaENhbGxiYWNrczogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaFN0YXJ0VGltZTogdW5kZWZpbmVkLFxuICAgICAgICBpc1Njcm9sbGluZzogdW5kZWZpbmVkLFxuICAgICAgICBjdXJyZW50VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0VHJhbnNsYXRlOiB1bmRlZmluZWQsXG4gICAgICAgIGFsbG93VGhyZXNob2xkTW92ZTogdW5kZWZpbmVkLFxuICAgICAgICAvLyBGb3JtIGVsZW1lbnRzIHRvIG1hdGNoXG4gICAgICAgIGZvY3VzYWJsZUVsZW1lbnRzOiBzd2lwZXIucGFyYW1zLmZvY3VzYWJsZUVsZW1lbnRzLFxuICAgICAgICAvLyBMYXN0IGNsaWNrIHRpbWVcbiAgICAgICAgbGFzdENsaWNrVGltZTogMCxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRNb3Zpbmc6IHVuZGVmaW5lZCxcbiAgICAgICAgcG9pbnRlcklkOiBudWxsLFxuICAgICAgICB0b3VjaElkOiBudWxsXG4gICAgICB9LFxuICAgICAgLy8gQ2xpY2tzXG4gICAgICBhbGxvd0NsaWNrOiB0cnVlLFxuICAgICAgLy8gVG91Y2hlc1xuICAgICAgYWxsb3dUb3VjaE1vdmU6IHN3aXBlci5wYXJhbXMuYWxsb3dUb3VjaE1vdmUsXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDBcbiAgICAgIH0sXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDBcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3N3aXBlcicpO1xuXG4gICAgLy8gSW5pdFxuICAgIGlmIChzd2lwZXIucGFyYW1zLmluaXQpIHtcbiAgICAgIHN3aXBlci5pbml0KCk7XG4gICAgfVxuXG4gICAgLy8gUmV0dXJuIGFwcCBpbnN0YW5jZVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zdHJ1Y3Rvci1yZXR1cm5cbiAgICByZXR1cm4gc3dpcGVyO1xuICB9XG4gIGdldERpcmVjdGlvbkxhYmVsKHByb3BlcnR5KSB7XG4gICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0eTtcbiAgICB9XG4gICAgLy8gcHJldHRpZXItaWdub3JlXG4gICAgcmV0dXJuIHtcbiAgICAgICd3aWR0aCc6ICdoZWlnaHQnLFxuICAgICAgJ21hcmdpbi10b3AnOiAnbWFyZ2luLWxlZnQnLFxuICAgICAgJ21hcmdpbi1ib3R0b20gJzogJ21hcmdpbi1yaWdodCcsXG4gICAgICAnbWFyZ2luLWxlZnQnOiAnbWFyZ2luLXRvcCcsXG4gICAgICAnbWFyZ2luLXJpZ2h0JzogJ21hcmdpbi1ib3R0b20nLFxuICAgICAgJ3BhZGRpbmctbGVmdCc6ICdwYWRkaW5nLXRvcCcsXG4gICAgICAncGFkZGluZy1yaWdodCc6ICdwYWRkaW5nLWJvdHRvbScsXG4gICAgICAnbWFyZ2luUmlnaHQnOiAnbWFyZ2luQm90dG9tJ1xuICAgIH1bcHJvcGVydHldO1xuICB9XG4gIGdldFNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHNsaWRlc0VsLFxuICAgICAgcGFyYW1zXG4gICAgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2xpZGVzID0gZWxlbWVudENoaWxkcmVuKHNsaWRlc0VsLCBgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LCBzd2lwZXItc2xpZGVgKTtcbiAgICBjb25zdCBmaXJzdFNsaWRlSW5kZXggPSBlbGVtZW50SW5kZXgoc2xpZGVzWzBdKTtcbiAgICByZXR1cm4gZWxlbWVudEluZGV4KHNsaWRlRWwpIC0gZmlyc3RTbGlkZUluZGV4O1xuICB9XG4gIGdldFNsaWRlSW5kZXhCeURhdGEoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRTbGlkZUluZGV4KHRoaXMuc2xpZGVzLmZpbHRlcihzbGlkZUVsID0+IHNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpICogMSA9PT0gaW5kZXgpWzBdKTtcbiAgfVxuICByZWNhbGNTbGlkZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICBzbGlkZXNFbCxcbiAgICAgIHBhcmFtc1xuICAgIH0gPSBzd2lwZXI7XG4gICAgc3dpcGVyLnNsaWRlcyA9IGVsZW1lbnRDaGlsZHJlbihzbGlkZXNFbCwgYC4ke3BhcmFtcy5zbGlkZUNsYXNzfSwgc3dpcGVyLXNsaWRlYCk7XG4gIH1cbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5lbmFibGVkKSByZXR1cm47XG4gICAgc3dpcGVyLmVuYWJsZWQgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuICAgIHN3aXBlci5lbWl0KCdlbmFibGUnKTtcbiAgfVxuICBkaXNhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuZW5hYmxlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5lbmFibGVkID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvcikge1xuICAgICAgc3dpcGVyLnVuc2V0R3JhYkN1cnNvcigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGlzYWJsZScpO1xuICB9XG4gIHNldFByb2dyZXNzKHByb2dyZXNzLCBzcGVlZCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgcHJvZ3Jlc3MgPSBNYXRoLm1pbihNYXRoLm1heChwcm9ncmVzcywgMCksIDEpO1xuICAgIGNvbnN0IG1pbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICBjb25zdCBtYXggPSBzd2lwZXIubWF4VHJhbnNsYXRlKCk7XG4gICAgY29uc3QgY3VycmVudCA9IChtYXggLSBtaW4pICogcHJvZ3Jlc3MgKyBtaW47XG4gICAgc3dpcGVyLnRyYW5zbGF0ZVRvKGN1cnJlbnQsIHR5cGVvZiBzcGVlZCA9PT0gJ3VuZGVmaW5lZCcgPyAwIDogc3BlZWQpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgZW1pdENvbnRhaW5lckNsYXNzZXMoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuX2VtaXRDbGFzc2VzIHx8ICFzd2lwZXIuZWwpIHJldHVybjtcbiAgICBjb25zdCBjbHMgPSBzd2lwZXIuZWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlcicpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzcykgPT09IDA7XG4gICAgfSk7XG4gICAgc3dpcGVyLmVtaXQoJ19jb250YWluZXJDbGFzc2VzJywgY2xzLmpvaW4oJyAnKSk7XG4gIH1cbiAgZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkKSByZXR1cm4gJyc7XG4gICAgcmV0dXJuIHNsaWRlRWwuY2xhc3NOYW1lLnNwbGl0KCcgJykuZmlsdGVyKGNsYXNzTmFtZSA9PiB7XG4gICAgICByZXR1cm4gY2xhc3NOYW1lLmluZGV4T2YoJ3N3aXBlci1zbGlkZScpID09PSAwIHx8IGNsYXNzTmFtZS5pbmRleE9mKHN3aXBlci5wYXJhbXMuc2xpZGVDbGFzcykgPT09IDA7XG4gICAgfSkuam9pbignICcpO1xuICB9XG4gIGVtaXRTbGlkZXNDbGFzc2VzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLl9lbWl0Q2xhc3NlcyB8fCAhc3dpcGVyLmVsKSByZXR1cm47XG4gICAgY29uc3QgdXBkYXRlcyA9IFtdO1xuICAgIHN3aXBlci5zbGlkZXMuZm9yRWFjaChzbGlkZUVsID0+IHtcbiAgICAgIGNvbnN0IGNsYXNzTmFtZXMgPSBzd2lwZXIuZ2V0U2xpZGVDbGFzc2VzKHNsaWRlRWwpO1xuICAgICAgdXBkYXRlcy5wdXNoKHtcbiAgICAgICAgc2xpZGVFbCxcbiAgICAgICAgY2xhc3NOYW1lc1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3MnLCBzbGlkZUVsLCBjbGFzc05hbWVzKTtcbiAgICB9KTtcbiAgICBzd2lwZXIuZW1pdCgnX3NsaWRlQ2xhc3NlcycsIHVwZGF0ZXMpO1xuICB9XG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKHZpZXcsIGV4YWN0KSB7XG4gICAgaWYgKHZpZXcgPT09IHZvaWQgMCkge1xuICAgICAgdmlldyA9ICdjdXJyZW50JztcbiAgICB9XG4gICAgaWYgKGV4YWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGV4YWN0ID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLFxuICAgICAgc2xpZGVzLFxuICAgICAgc2xpZGVzR3JpZCxcbiAgICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgICAgIHNpemU6IHN3aXBlclNpemUsXG4gICAgICBhY3RpdmVJbmRleFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHR5cGVvZiBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ251bWJlcicpIHJldHVybiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICBpZiAocGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBsZXQgc2xpZGVTaXplID0gc2xpZGVzW2FjdGl2ZUluZGV4XSA/IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplIDogMDtcbiAgICAgIGxldCBicmVha0xvb3A7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyAxOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldICYmICFicmVha0xvb3ApIHtcbiAgICAgICAgICBzbGlkZVNpemUgKz0gc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZTtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICBpZiAoc2xpZGVTaXplID4gc3dpcGVyU2l6ZSkgYnJlYWtMb29wID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGlmICh2aWV3ID09PSAnY3VycmVudCcpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4ICsgMTsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNvbnN0IHNsaWRlSW5WaWV3ID0gZXhhY3QgPyBzbGlkZXNHcmlkW2ldICsgc2xpZGVzU2l6ZXNHcmlkW2ldIC0gc2xpZGVzR3JpZFthY3RpdmVJbmRleF0gPCBzd2lwZXJTaXplIDogc2xpZGVzR3JpZFtpXSAtIHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIDwgc3dpcGVyU2l6ZTtcbiAgICAgICAgICBpZiAoc2xpZGVJblZpZXcpIHtcbiAgICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gcHJldmlvdXNcbiAgICAgICAgZm9yIChsZXQgaSA9IGFjdGl2ZUluZGV4IC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZUluVmlldyA9IHNsaWRlc0dyaWRbYWN0aXZlSW5kZXhdIC0gc2xpZGVzR3JpZFtpXSA8IHN3aXBlclNpemU7XG4gICAgICAgICAgaWYgKHNsaWRlSW5WaWV3KSB7XG4gICAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNwdjtcbiAgfVxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc25hcEdyaWQsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgWy4uLnN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKCdbbG9hZGluZz1cImxhenlcIl0nKV0uZm9yRWFjaChpbWFnZUVsID0+IHtcbiAgICAgIGlmIChpbWFnZUVsLmNvbXBsZXRlKSB7XG4gICAgICAgIHByb2Nlc3NMYXp5UHJlbG9hZGVyKHN3aXBlciwgaW1hZ2VFbCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBmdW5jdGlvbiBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCB0cmFuc2xhdGVWYWx1ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlICogLTEgOiBzd2lwZXIudHJhbnNsYXRlO1xuICAgICAgY29uc3QgbmV3VHJhbnNsYXRlID0gTWF0aC5taW4oTWF0aC5tYXgodHJhbnNsYXRlVmFsdWUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKG5ld1RyYW5zbGF0ZSk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIGxldCB0cmFuc2xhdGVkO1xuICAgIGlmIChwYXJhbXMuZnJlZU1vZGUgJiYgcGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgIXBhcmFtcy5jc3NNb2RlKSB7XG4gICAgICBzZXRUcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgfHwgcGFyYW1zLnNsaWRlc1BlclZpZXcgPiAxKSAmJiBzd2lwZXIuaXNFbmQgJiYgIXBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICBjb25zdCBzbGlkZXMgPSBzd2lwZXIudmlydHVhbCAmJiBwYXJhbXMudmlydHVhbC5lbmFibGVkID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzIDogc3dpcGVyLnNsaWRlcztcbiAgICAgICAgdHJhbnNsYXRlZCA9IHN3aXBlci5zbGlkZVRvKHNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cbiAgY2hhbmdlRGlyZWN0aW9uKG5ld0RpcmVjdGlvbiwgbmVlZFVwZGF0ZSkge1xuICAgIGlmIChuZWVkVXBkYXRlID09PSB2b2lkIDApIHtcbiAgICAgIG5lZWRVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGN1cnJlbnREaXJlY3Rpb24gPSBzd2lwZXIucGFyYW1zLmRpcmVjdGlvbjtcbiAgICBpZiAoIW5ld0RpcmVjdGlvbikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBuZXdEaXJlY3Rpb24gPSBjdXJyZW50RGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgIH1cbiAgICBpZiAobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uIHx8IG5ld0RpcmVjdGlvbiAhPT0gJ2hvcml6b250YWwnICYmIG5ld0RpcmVjdGlvbiAhPT0gJ3ZlcnRpY2FsJykge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn1gKTtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9JHtuZXdEaXJlY3Rpb259YCk7XG4gICAgc3dpcGVyLmVtaXRDb250YWluZXJDbGFzc2VzKCk7XG4gICAgc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgc3dpcGVyLnNsaWRlcy5mb3JFYWNoKHNsaWRlRWwgPT4ge1xuICAgICAgaWYgKG5ld0RpcmVjdGlvbiA9PT0gJ3ZlcnRpY2FsJykge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLndpZHRoID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzbGlkZUVsLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHN3aXBlci5lbWl0KCdjaGFuZ2VEaXJlY3Rpb24nKTtcbiAgICBpZiAobmVlZFVwZGF0ZSkgc3dpcGVyLnVwZGF0ZSgpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgY2hhbmdlTGFuZ3VhZ2VEaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLnJ0bCAmJiBkaXJlY3Rpb24gPT09ICdydGwnIHx8ICFzd2lwZXIucnRsICYmIGRpcmVjdGlvbiA9PT0gJ2x0cicpIHJldHVybjtcbiAgICBzd2lwZXIucnRsID0gZGlyZWN0aW9uID09PSAncnRsJztcbiAgICBzd2lwZXIucnRsVHJhbnNsYXRlID0gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiBzd2lwZXIucnRsO1xuICAgIGlmIChzd2lwZXIucnRsKSB7XG4gICAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9cnRsYCk7XG4gICAgICBzd2lwZXIuZWwuZGlyID0gJ3J0bCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5lbC5jbGFzc0xpc3QucmVtb3ZlKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31ydGxgKTtcbiAgICAgIHN3aXBlci5lbC5kaXIgPSAnbHRyJztcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIG1vdW50KGVsZW1lbnQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIubW91bnRlZCkgcmV0dXJuIHRydWU7XG5cbiAgICAvLyBGaW5kIGVsXG4gICAgbGV0IGVsID0gZWxlbWVudCB8fCBzd2lwZXIucGFyYW1zLmVsO1xuICAgIGlmICh0eXBlb2YgZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGVsLnN3aXBlciA9IHN3aXBlcjtcbiAgICBpZiAoZWwucGFyZW50Tm9kZSAmJiBlbC5wYXJlbnROb2RlLmhvc3QgJiYgZWwucGFyZW50Tm9kZS5ob3N0Lm5vZGVOYW1lID09PSAnU1dJUEVSLUNPTlRBSU5FUicpIHtcbiAgICAgIHN3aXBlci5pc0VsZW1lbnQgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBnZXRXcmFwcGVyU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgICByZXR1cm4gYC4keyhzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzcyB8fCAnJykudHJpbSgpLnNwbGl0KCcgJykuam9pbignLicpfWA7XG4gICAgfTtcbiAgICBjb25zdCBnZXRXcmFwcGVyID0gKCkgPT4ge1xuICAgICAgaWYgKGVsICYmIGVsLnNoYWRvd1Jvb3QgJiYgZWwuc2hhZG93Um9vdC5xdWVyeVNlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcihnZXRXcmFwcGVyU2VsZWN0b3IoKSk7XG4gICAgICAgIC8vIENoaWxkcmVuIG5lZWRzIHRvIHJldHVybiBzbG90IGl0ZW1zXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gZWxlbWVudENoaWxkcmVuKGVsLCBnZXRXcmFwcGVyU2VsZWN0b3IoKSlbMF07XG4gICAgfTtcbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBsZXQgd3JhcHBlckVsID0gZ2V0V3JhcHBlcigpO1xuICAgIGlmICghd3JhcHBlckVsICYmIHN3aXBlci5wYXJhbXMuY3JlYXRlRWxlbWVudHMpIHtcbiAgICAgIHdyYXBwZXJFbCA9IGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHN3aXBlci5wYXJhbXMud3JhcHBlckNsYXNzKTtcbiAgICAgIGVsLmFwcGVuZCh3cmFwcGVyRWwpO1xuICAgICAgZWxlbWVudENoaWxkcmVuKGVsLCBgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgIHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIsIHtcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzRWw6IHN3aXBlci5pc0VsZW1lbnQgJiYgIWVsLnBhcmVudE5vZGUuaG9zdC5zbGlkZVNsb3RzID8gZWwucGFyZW50Tm9kZS5ob3N0IDogd3JhcHBlckVsLFxuICAgICAgaG9zdEVsOiBzd2lwZXIuaXNFbGVtZW50ID8gZWwucGFyZW50Tm9kZS5ob3N0IDogZWwsXG4gICAgICBtb3VudGVkOiB0cnVlLFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcsXG4gICAgICBydGxUcmFuc2xhdGU6IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID09PSAnaG9yaXpvbnRhbCcgJiYgKGVsLmRpci50b0xvd2VyQ2FzZSgpID09PSAncnRsJyB8fCBlbGVtZW50U3R5bGUoZWwsICdkaXJlY3Rpb24nKSA9PT0gJ3J0bCcpLFxuICAgICAgd3JvbmdSVEw6IGVsZW1lbnRTdHlsZSh3cmFwcGVyRWwsICdkaXNwbGF5JykgPT09ICctd2Via2l0LWJveCdcbiAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpbml0KGVsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm4gc3dpcGVyO1xuICAgIGNvbnN0IG1vdW50ZWQgPSBzd2lwZXIubW91bnQoZWwpO1xuICAgIGlmIChtb3VudGVkID09PSBmYWxzZSkgcmV0dXJuIHN3aXBlcjtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlSW5pdCcpO1xuXG4gICAgLy8gU2V0IGJyZWFrcG9pbnRcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG5cbiAgICAvLyBBZGQgQ2xhc3Nlc1xuICAgIHN3aXBlci5hZGRDbGFzc2VzKCk7XG5cbiAgICAvLyBVcGRhdGUgc2l6ZVxuICAgIHN3aXBlci51cGRhdGVTaXplKCk7XG5cbiAgICAvLyBVcGRhdGUgc2xpZGVzXG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlcygpO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHtcbiAgICAgIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgfVxuXG4gICAgLy8gU2V0IEdyYWIgQ3Vyc29yXG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZ3JhYkN1cnNvciAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIudmlydHVhbC5zbGlkZXNCZWZvcmUsIDAsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCBmYWxzZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCwgZmFsc2UsIHRydWUpO1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBsb29wXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BDcmVhdGUoKTtcbiAgICB9XG5cbiAgICAvLyBBdHRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmF0dGFjaEV2ZW50cygpO1xuICAgIGNvbnN0IGxhenlFbGVtZW50cyA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbCgnW2xvYWRpbmc9XCJsYXp5XCJdJyldO1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBsYXp5RWxlbWVudHMucHVzaCguLi5zd2lwZXIuaG9zdEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tsb2FkaW5nPVwibGF6eVwiXScpKTtcbiAgICB9XG4gICAgbGF6eUVsZW1lbnRzLmZvckVhY2goaW1hZ2VFbCA9PiB7XG4gICAgICBpZiAoaW1hZ2VFbC5jb21wbGV0ZSkge1xuICAgICAgICBwcm9jZXNzTGF6eVByZWxvYWRlcihzd2lwZXIsIGltYWdlRWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1hZ2VFbC5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZSA9PiB7XG4gICAgICAgICAgcHJvY2Vzc0xhenlQcmVsb2FkZXIoc3dpcGVyLCBlLnRhcmdldCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHByZWxvYWQoc3dpcGVyKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgcHJlbG9hZChzd2lwZXIpO1xuXG4gICAgLy8gRW1pdFxuICAgIHN3aXBlci5lbWl0KCdpbml0Jyk7XG4gICAgc3dpcGVyLmVtaXQoJ2FmdGVySW5pdCcpO1xuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cbiAgZGVzdHJveShkZWxldGVJbnN0YW5jZSwgY2xlYW5TdHlsZXMpIHtcbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgPT09IHZvaWQgMCkge1xuICAgICAgZGVsZXRlSW5zdGFuY2UgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoY2xlYW5TdHlsZXMgPT09IHZvaWQgMCkge1xuICAgICAgY2xlYW5TdHlsZXMgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcyxcbiAgICAgIGVsLFxuICAgICAgd3JhcHBlckVsLFxuICAgICAgc2xpZGVzXG4gICAgfSA9IHN3aXBlcjtcbiAgICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlRGVzdHJveScpO1xuXG4gICAgLy8gSW5pdCBGbGFnXG4gICAgc3dpcGVyLmluaXRpYWxpemVkID0gZmFsc2U7XG5cbiAgICAvLyBEZXRhY2ggZXZlbnRzXG4gICAgc3dpcGVyLmRldGFjaEV2ZW50cygpO1xuXG4gICAgLy8gRGVzdHJveSBsb29wXG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICB9XG5cbiAgICAvLyBDbGVhbnVwIHN0eWxlc1xuICAgIGlmIChjbGVhblN0eWxlcykge1xuICAgICAgc3dpcGVyLnJlbW92ZUNsYXNzZXMoKTtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnc3R5bGUnKTtcbiAgICAgIHdyYXBwZXJFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICBpZiAoc2xpZGVzICYmIHNsaWRlcy5sZW5ndGgpIHtcbiAgICAgICAgc2xpZGVzLmZvckVhY2goc2xpZGVFbCA9PiB7XG4gICAgICAgICAgc2xpZGVFbC5jbGFzc0xpc3QucmVtb3ZlKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcywgcGFyYW1zLnNsaWRlRnVsbHlWaXNpYmxlQ2xhc3MsIHBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzLCBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsIHBhcmFtcy5zbGlkZVByZXZDbGFzcyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ3N0eWxlJyk7XG4gICAgICAgICAgc2xpZGVFbC5yZW1vdmVBdHRyaWJ1dGUoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyLm9mZihldmVudE5hbWUpO1xuICAgIH0pO1xuICAgIGlmIChkZWxldGVJbnN0YW5jZSAhPT0gZmFsc2UpIHtcbiAgICAgIHN3aXBlci5lbC5zd2lwZXIgPSBudWxsO1xuICAgICAgZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgc3RhdGljIGV4dGVuZERlZmF1bHRzKG5ld0RlZmF1bHRzKSB7XG4gICAgZXh0ZW5kKGV4dGVuZGVkRGVmYXVsdHMsIG5ld0RlZmF1bHRzKTtcbiAgfVxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGdldCBkZWZhdWx0cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdHM7XG4gIH1cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kKSB7XG4gICAgaWYgKCFTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fKSBTd2lwZXIucHJvdG90eXBlLl9fbW9kdWxlc19fID0gW107XG4gICAgY29uc3QgbW9kdWxlcyA9IFN3aXBlci5wcm90b3R5cGUuX19tb2R1bGVzX187XG4gICAgaWYgKHR5cGVvZiBtb2QgPT09ICdmdW5jdGlvbicgJiYgbW9kdWxlcy5pbmRleE9mKG1vZCkgPCAwKSB7XG4gICAgICBtb2R1bGVzLnB1c2gobW9kKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIHVzZShtb2R1bGUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShtb2R1bGUpKSB7XG4gICAgICBtb2R1bGUuZm9yRWFjaChtID0+IFN3aXBlci5pbnN0YWxsTW9kdWxlKG0pKTtcbiAgICAgIHJldHVybiBTd2lwZXI7XG4gICAgfVxuICAgIFN3aXBlci5pbnN0YWxsTW9kdWxlKG1vZHVsZSk7XG4gICAgcmV0dXJuIFN3aXBlcjtcbiAgfVxufVxuT2JqZWN0LmtleXMocHJvdG90eXBlcykuZm9yRWFjaChwcm90b3R5cGVHcm91cCA9PiB7XG4gIE9iamVjdC5rZXlzKHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdKS5mb3JFYWNoKHByb3RvTWV0aG9kID0+IHtcbiAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgfSk7XG59KTtcblN3aXBlci51c2UoW1Jlc2l6ZSwgT2JzZXJ2ZXJdKTtcblxuZXhwb3J0IHsgU3dpcGVyIGFzIFMsIGRlZmF1bHRzIGFzIGQgfTtcbiIsIi8qIHVuZGVyc2NvcmUgaW4gbmFtZSAtPiB3YXRjaCBmb3IgY2hhbmdlcyAqL1xuY29uc3QgcGFyYW1zTGlzdCA9IFsnZXZlbnRzUHJlZml4JywgJ2luamVjdFN0eWxlcycsICdpbmplY3RTdHlsZXNVcmxzJywgJ21vZHVsZXMnLCAnaW5pdCcsICdfZGlyZWN0aW9uJywgJ29uZVdheU1vdmVtZW50JywgJ3RvdWNoRXZlbnRzVGFyZ2V0JywgJ2luaXRpYWxTbGlkZScsICdfc3BlZWQnLCAnY3NzTW9kZScsICd1cGRhdGVPbldpbmRvd1Jlc2l6ZScsICdyZXNpemVPYnNlcnZlcicsICduZXN0ZWQnLCAnZm9jdXNhYmxlRWxlbWVudHMnLCAnX2VuYWJsZWQnLCAnX3dpZHRoJywgJ19oZWlnaHQnLCAncHJldmVudEludGVyYWN0aW9uT25UcmFuc2l0aW9uJywgJ3VzZXJBZ2VudCcsICd1cmwnLCAnX2VkZ2VTd2lwZURldGVjdGlvbicsICdfZWRnZVN3aXBlVGhyZXNob2xkJywgJ19mcmVlTW9kZScsICdfYXV0b0hlaWdodCcsICdzZXRXcmFwcGVyU2l6ZScsICd2aXJ0dWFsVHJhbnNsYXRlJywgJ19lZmZlY3QnLCAnYnJlYWtwb2ludHMnLCAnYnJlYWtwb2ludHNCYXNlJywgJ19zcGFjZUJldHdlZW4nLCAnX3NsaWRlc1BlclZpZXcnLCAnbWF4QmFja2ZhY2VIaWRkZW5TbGlkZXMnLCAnX2dyaWQnLCAnX3NsaWRlc1Blckdyb3VwJywgJ19zbGlkZXNQZXJHcm91cFNraXAnLCAnX3NsaWRlc1Blckdyb3VwQXV0bycsICdfY2VudGVyZWRTbGlkZXMnLCAnX2NlbnRlcmVkU2xpZGVzQm91bmRzJywgJ19zbGlkZXNPZmZzZXRCZWZvcmUnLCAnX3NsaWRlc09mZnNldEFmdGVyJywgJ25vcm1hbGl6ZVNsaWRlSW5kZXgnLCAnX2NlbnRlckluc3VmZmljaWVudFNsaWRlcycsICdfd2F0Y2hPdmVyZmxvdycsICdyb3VuZExlbmd0aHMnLCAndG91Y2hSYXRpbycsICd0b3VjaEFuZ2xlJywgJ3NpbXVsYXRlVG91Y2gnLCAnX3Nob3J0U3dpcGVzJywgJ19sb25nU3dpcGVzJywgJ2xvbmdTd2lwZXNSYXRpbycsICdsb25nU3dpcGVzTXMnLCAnX2ZvbGxvd0ZpbmdlcicsICdhbGxvd1RvdWNoTW92ZScsICdfdGhyZXNob2xkJywgJ3RvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbicsICd0b3VjaFN0YXJ0UHJldmVudERlZmF1bHQnLCAndG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQnLCAndG91Y2hSZWxlYXNlT25FZGdlcycsICd1bmlxdWVOYXZFbGVtZW50cycsICdfcmVzaXN0YW5jZScsICdfcmVzaXN0YW5jZVJhdGlvJywgJ193YXRjaFNsaWRlc1Byb2dyZXNzJywgJ19ncmFiQ3Vyc29yJywgJ3ByZXZlbnRDbGlja3MnLCAncHJldmVudENsaWNrc1Byb3BhZ2F0aW9uJywgJ19zbGlkZVRvQ2xpY2tlZFNsaWRlJywgJ19sb29wJywgJ2xvb3BBZGRpdGlvbmFsU2xpZGVzJywgJ2xvb3BBZGRCbGFua1NsaWRlcycsICdsb29wUHJldmVudHNTbGlkaW5nJywgJ19yZXdpbmQnLCAnX2FsbG93U2xpZGVQcmV2JywgJ19hbGxvd1NsaWRlTmV4dCcsICdfc3dpcGVIYW5kbGVyJywgJ19ub1N3aXBpbmcnLCAnbm9Td2lwaW5nQ2xhc3MnLCAnbm9Td2lwaW5nU2VsZWN0b3InLCAncGFzc2l2ZUxpc3RlbmVycycsICdjb250YWluZXJNb2RpZmllckNsYXNzJywgJ3NsaWRlQ2xhc3MnLCAnc2xpZGVBY3RpdmVDbGFzcycsICdzbGlkZVZpc2libGVDbGFzcycsICdzbGlkZUZ1bGx5VmlzaWJsZUNsYXNzJywgJ3NsaWRlTmV4dENsYXNzJywgJ3NsaWRlUHJldkNsYXNzJywgJ3NsaWRlQmxhbmtDbGFzcycsICd3cmFwcGVyQ2xhc3MnLCAnbGF6eVByZWxvYWRlckNsYXNzJywgJ2xhenlQcmVsb2FkUHJldk5leHQnLCAncnVuQ2FsbGJhY2tzT25Jbml0JywgJ29ic2VydmVyJywgJ29ic2VydmVQYXJlbnRzJywgJ29ic2VydmVTbGlkZUNoaWxkcmVuJyxcbi8vIG1vZHVsZXNcbidhMTF5JywgJ19hdXRvcGxheScsICdfY29udHJvbGxlcicsICdjb3ZlcmZsb3dFZmZlY3QnLCAnY3ViZUVmZmVjdCcsICdmYWRlRWZmZWN0JywgJ2ZsaXBFZmZlY3QnLCAnY3JlYXRpdmVFZmZlY3QnLCAnY2FyZHNFZmZlY3QnLCAnaGFzaE5hdmlnYXRpb24nLCAnaGlzdG9yeScsICdrZXlib2FyZCcsICdtb3VzZXdoZWVsJywgJ19uYXZpZ2F0aW9uJywgJ19wYWdpbmF0aW9uJywgJ3BhcmFsbGF4JywgJ19zY3JvbGxiYXInLCAnX3RodW1icycsICd2aXJ0dWFsJywgJ3pvb20nLCAnY29udHJvbCddO1xuXG5mdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSkgPT09ICdPYmplY3QnICYmICFvLl9fc3dpcGVyX187XG59XG5mdW5jdGlvbiBleHRlbmQodGFyZ2V0LCBzcmMpIHtcbiAgY29uc3Qgbm9FeHRlbmQgPSBbJ19fcHJvdG9fXycsICdjb25zdHJ1Y3RvcicsICdwcm90b3R5cGUnXTtcbiAgT2JqZWN0LmtleXMoc3JjKS5maWx0ZXIoa2V5ID0+IG5vRXh0ZW5kLmluZGV4T2Yoa2V5KSA8IDApLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAndW5kZWZpbmVkJykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGlmIChpc09iamVjdChzcmNba2V5XSkgJiYgaXNPYmplY3QodGFyZ2V0W2tleV0pICYmIE9iamVjdC5rZXlzKHNyY1trZXldKS5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3JjW2tleV0uX19zd2lwZXJfXykgdGFyZ2V0W2tleV0gPSBzcmNba2V5XTtlbHNlIGV4dGVuZCh0YXJnZXRba2V5XSwgc3JjW2tleV0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHNyY1trZXldO1xuICAgIH1cbiAgfSk7XG59XG5mdW5jdGlvbiBuZWVkc05hdmlnYXRpb24ocGFyYW1zKSB7XG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG4gIHJldHVybiBwYXJhbXMubmF2aWdhdGlvbiAmJiB0eXBlb2YgcGFyYW1zLm5hdmlnYXRpb24ubmV4dEVsID09PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGFyYW1zLm5hdmlnYXRpb24ucHJldkVsID09PSAndW5kZWZpbmVkJztcbn1cbmZ1bmN0aW9uIG5lZWRzUGFnaW5hdGlvbihwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cbiAgcmV0dXJuIHBhcmFtcy5wYWdpbmF0aW9uICYmIHR5cGVvZiBwYXJhbXMucGFnaW5hdGlvbi5lbCA9PT0gJ3VuZGVmaW5lZCc7XG59XG5mdW5jdGlvbiBuZWVkc1Njcm9sbGJhcihwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cbiAgcmV0dXJuIHBhcmFtcy5zY3JvbGxiYXIgJiYgdHlwZW9mIHBhcmFtcy5zY3JvbGxiYXIuZWwgPT09ICd1bmRlZmluZWQnO1xufVxuZnVuY3Rpb24gdW5pcXVlQ2xhc3NlcyhjbGFzc05hbWVzKSB7XG4gIGlmIChjbGFzc05hbWVzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc05hbWVzID0gJyc7XG4gIH1cbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZXMuc3BsaXQoJyAnKS5tYXAoYyA9PiBjLnRyaW0oKSkuZmlsdGVyKGMgPT4gISFjKTtcbiAgY29uc3QgdW5pcXVlID0gW107XG4gIGNsYXNzZXMuZm9yRWFjaChjID0+IHtcbiAgICBpZiAodW5pcXVlLmluZGV4T2YoYykgPCAwKSB1bmlxdWUucHVzaChjKTtcbiAgfSk7XG4gIHJldHVybiB1bmlxdWUuam9pbignICcpO1xufVxuZnVuY3Rpb24gYXR0clRvUHJvcChhdHRyTmFtZSkge1xuICBpZiAoYXR0ck5hbWUgPT09IHZvaWQgMCkge1xuICAgIGF0dHJOYW1lID0gJyc7XG4gIH1cbiAgcmV0dXJuIGF0dHJOYW1lLnJlcGxhY2UoLy1bYS16XS9nLCBsID0+IGwudG9VcHBlckNhc2UoKS5yZXBsYWNlKCctJywgJycpKTtcbn1cbmZ1bmN0aW9uIHdyYXBwZXJDbGFzcyhjbGFzc05hbWUpIHtcbiAgaWYgKGNsYXNzTmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgY2xhc3NOYW1lID0gJyc7XG4gIH1cbiAgaWYgKCFjbGFzc05hbWUpIHJldHVybiAnc3dpcGVyLXdyYXBwZXInO1xuICBpZiAoIWNsYXNzTmFtZS5pbmNsdWRlcygnc3dpcGVyLXdyYXBwZXInKSkgcmV0dXJuIGBzd2lwZXItd3JhcHBlciAke2NsYXNzTmFtZX1gO1xuICByZXR1cm4gY2xhc3NOYW1lO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTd2lwZXIoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBzbGlkZXMsXG4gICAgcGFzc2VkUGFyYW1zLFxuICAgIGNoYW5nZWRQYXJhbXMsXG4gICAgbmV4dEVsLFxuICAgIHByZXZFbCxcbiAgICBzY3JvbGxiYXJFbCxcbiAgICBwYWdpbmF0aW9uRWxcbiAgfSA9IF9yZWY7XG4gIGNvbnN0IHVwZGF0ZVBhcmFtcyA9IGNoYW5nZWRQYXJhbXMuZmlsdGVyKGtleSA9PiBrZXkgIT09ICdjaGlsZHJlbicgJiYga2V5ICE9PSAnZGlyZWN0aW9uJyAmJiBrZXkgIT09ICd3cmFwcGVyQ2xhc3MnKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtczogY3VycmVudFBhcmFtcyxcbiAgICBwYWdpbmF0aW9uLFxuICAgIG5hdmlnYXRpb24sXG4gICAgc2Nyb2xsYmFyLFxuICAgIHZpcnR1YWwsXG4gICAgdGh1bWJzXG4gIH0gPSBzd2lwZXI7XG4gIGxldCBuZWVkVGh1bWJzSW5pdDtcbiAgbGV0IG5lZWRDb250cm9sbGVySW5pdDtcbiAgbGV0IG5lZWRQYWdpbmF0aW9uSW5pdDtcbiAgbGV0IG5lZWRTY3JvbGxiYXJJbml0O1xuICBsZXQgbmVlZE5hdmlnYXRpb25Jbml0O1xuICBsZXQgbG9vcE5lZWREZXN0cm95O1xuICBsZXQgbG9vcE5lZWRFbmFibGU7XG4gIGxldCBsb29wTmVlZFJlbG9vcDtcbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ3RodW1icycpICYmIHBhc3NlZFBhcmFtcy50aHVtYnMgJiYgcGFzc2VkUGFyYW1zLnRodW1icy5zd2lwZXIgJiYgY3VycmVudFBhcmFtcy50aHVtYnMgJiYgIWN1cnJlbnRQYXJhbXMudGh1bWJzLnN3aXBlcikge1xuICAgIG5lZWRUaHVtYnNJbml0ID0gdHJ1ZTtcbiAgfVxuICBpZiAoY2hhbmdlZFBhcmFtcy5pbmNsdWRlcygnY29udHJvbGxlcicpICYmIHBhc3NlZFBhcmFtcy5jb250cm9sbGVyICYmIHBhc3NlZFBhcmFtcy5jb250cm9sbGVyLmNvbnRyb2wgJiYgY3VycmVudFBhcmFtcy5jb250cm9sbGVyICYmICFjdXJyZW50UGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbCkge1xuICAgIG5lZWRDb250cm9sbGVySW5pdCA9IHRydWU7XG4gIH1cbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ3BhZ2luYXRpb24nKSAmJiBwYXNzZWRQYXJhbXMucGFnaW5hdGlvbiAmJiAocGFzc2VkUGFyYW1zLnBhZ2luYXRpb24uZWwgfHwgcGFnaW5hdGlvbkVsKSAmJiAoY3VycmVudFBhcmFtcy5wYWdpbmF0aW9uIHx8IGN1cnJlbnRQYXJhbXMucGFnaW5hdGlvbiA9PT0gZmFsc2UpICYmIHBhZ2luYXRpb24gJiYgIXBhZ2luYXRpb24uZWwpIHtcbiAgICBuZWVkUGFnaW5hdGlvbkluaXQgPSB0cnVlO1xuICB9XG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdzY3JvbGxiYXInKSAmJiBwYXNzZWRQYXJhbXMuc2Nyb2xsYmFyICYmIChwYXNzZWRQYXJhbXMuc2Nyb2xsYmFyLmVsIHx8IHNjcm9sbGJhckVsKSAmJiAoY3VycmVudFBhcmFtcy5zY3JvbGxiYXIgfHwgY3VycmVudFBhcmFtcy5zY3JvbGxiYXIgPT09IGZhbHNlKSAmJiBzY3JvbGxiYXIgJiYgIXNjcm9sbGJhci5lbCkge1xuICAgIG5lZWRTY3JvbGxiYXJJbml0ID0gdHJ1ZTtcbiAgfVxuICBpZiAoY2hhbmdlZFBhcmFtcy5pbmNsdWRlcygnbmF2aWdhdGlvbicpICYmIHBhc3NlZFBhcmFtcy5uYXZpZ2F0aW9uICYmIChwYXNzZWRQYXJhbXMubmF2aWdhdGlvbi5wcmV2RWwgfHwgcHJldkVsKSAmJiAocGFzc2VkUGFyYW1zLm5hdmlnYXRpb24ubmV4dEVsIHx8IG5leHRFbCkgJiYgKGN1cnJlbnRQYXJhbXMubmF2aWdhdGlvbiB8fCBjdXJyZW50UGFyYW1zLm5hdmlnYXRpb24gPT09IGZhbHNlKSAmJiBuYXZpZ2F0aW9uICYmICFuYXZpZ2F0aW9uLnByZXZFbCAmJiAhbmF2aWdhdGlvbi5uZXh0RWwpIHtcbiAgICBuZWVkTmF2aWdhdGlvbkluaXQgPSB0cnVlO1xuICB9XG4gIGNvbnN0IGRlc3Ryb3lNb2R1bGUgPSBtb2QgPT4ge1xuICAgIGlmICghc3dpcGVyW21vZF0pIHJldHVybjtcbiAgICBzd2lwZXJbbW9kXS5kZXN0cm95KCk7XG4gICAgaWYgKG1vZCA9PT0gJ25hdmlnYXRpb24nKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICBzd2lwZXJbbW9kXS5wcmV2RWwucmVtb3ZlKCk7XG4gICAgICAgIHN3aXBlclttb2RdLm5leHRFbC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRQYXJhbXNbbW9kXS5wcmV2RWwgPSB1bmRlZmluZWQ7XG4gICAgICBjdXJyZW50UGFyYW1zW21vZF0ubmV4dEVsID0gdW5kZWZpbmVkO1xuICAgICAgc3dpcGVyW21vZF0ucHJldkVsID0gdW5kZWZpbmVkO1xuICAgICAgc3dpcGVyW21vZF0ubmV4dEVsID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICBzd2lwZXJbbW9kXS5lbC5yZW1vdmUoKTtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRQYXJhbXNbbW9kXS5lbCA9IHVuZGVmaW5lZDtcbiAgICAgIHN3aXBlclttb2RdLmVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfTtcbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ2xvb3AnKSAmJiBzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgaWYgKGN1cnJlbnRQYXJhbXMubG9vcCAmJiAhcGFzc2VkUGFyYW1zLmxvb3ApIHtcbiAgICAgIGxvb3BOZWVkRGVzdHJveSA9IHRydWU7XG4gICAgfSBlbHNlIGlmICghY3VycmVudFBhcmFtcy5sb29wICYmIHBhc3NlZFBhcmFtcy5sb29wKSB7XG4gICAgICBsb29wTmVlZEVuYWJsZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvb3BOZWVkUmVsb29wID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgdXBkYXRlUGFyYW1zLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAoaXNPYmplY3QoY3VycmVudFBhcmFtc1trZXldKSAmJiBpc09iamVjdChwYXNzZWRQYXJhbXNba2V5XSkpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oY3VycmVudFBhcmFtc1trZXldLCBwYXNzZWRQYXJhbXNba2V5XSk7XG4gICAgICBpZiAoKGtleSA9PT0gJ25hdmlnYXRpb24nIHx8IGtleSA9PT0gJ3BhZ2luYXRpb24nIHx8IGtleSA9PT0gJ3Njcm9sbGJhcicpICYmICdlbmFibGVkJyBpbiBwYXNzZWRQYXJhbXNba2V5XSAmJiAhcGFzc2VkUGFyYW1zW2tleV0uZW5hYmxlZCkge1xuICAgICAgICBkZXN0cm95TW9kdWxlKGtleSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld1ZhbHVlID0gcGFzc2VkUGFyYW1zW2tleV07XG4gICAgICBpZiAoKG5ld1ZhbHVlID09PSB0cnVlIHx8IG5ld1ZhbHVlID09PSBmYWxzZSkgJiYgKGtleSA9PT0gJ25hdmlnYXRpb24nIHx8IGtleSA9PT0gJ3BhZ2luYXRpb24nIHx8IGtleSA9PT0gJ3Njcm9sbGJhcicpKSB7XG4gICAgICAgIGlmIChuZXdWYWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBkZXN0cm95TW9kdWxlKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGN1cnJlbnRQYXJhbXNba2V5XSA9IHBhc3NlZFBhcmFtc1trZXldO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIGlmICh1cGRhdGVQYXJhbXMuaW5jbHVkZXMoJ2NvbnRyb2xsZXInKSAmJiAhbmVlZENvbnRyb2xsZXJJbml0ICYmIHN3aXBlci5jb250cm9sbGVyICYmIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgJiYgY3VycmVudFBhcmFtcy5jb250cm9sbGVyICYmIGN1cnJlbnRQYXJhbXMuY29udHJvbGxlci5jb250cm9sKSB7XG4gICAgc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCA9IGN1cnJlbnRQYXJhbXMuY29udHJvbGxlci5jb250cm9sO1xuICB9XG4gIGlmIChjaGFuZ2VkUGFyYW1zLmluY2x1ZGVzKCdjaGlsZHJlbicpICYmIHNsaWRlcyAmJiB2aXJ0dWFsICYmIGN1cnJlbnRQYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgdmlydHVhbC5zbGlkZXMgPSBzbGlkZXM7XG4gICAgdmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gIH0gZWxzZSBpZiAoY2hhbmdlZFBhcmFtcy5pbmNsdWRlcygndmlydHVhbCcpICYmIHZpcnR1YWwgJiYgY3VycmVudFBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICBpZiAoc2xpZGVzKSB2aXJ0dWFsLnNsaWRlcyA9IHNsaWRlcztcbiAgICB2aXJ0dWFsLnVwZGF0ZSh0cnVlKTtcbiAgfVxuICBpZiAoY2hhbmdlZFBhcmFtcy5pbmNsdWRlcygnY2hpbGRyZW4nKSAmJiBzbGlkZXMgJiYgY3VycmVudFBhcmFtcy5sb29wKSB7XG4gICAgbG9vcE5lZWRSZWxvb3AgPSB0cnVlO1xuICB9XG4gIGlmIChuZWVkVGh1bWJzSW5pdCkge1xuICAgIGNvbnN0IGluaXRpYWxpemVkID0gdGh1bWJzLmluaXQoKTtcbiAgICBpZiAoaW5pdGlhbGl6ZWQpIHRodW1icy51cGRhdGUodHJ1ZSk7XG4gIH1cbiAgaWYgKG5lZWRDb250cm9sbGVySW5pdCkge1xuICAgIHN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wgPSBjdXJyZW50UGFyYW1zLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgfVxuICBpZiAobmVlZFBhZ2luYXRpb25Jbml0KSB7XG4gICAgaWYgKHN3aXBlci5pc0VsZW1lbnQgJiYgKCFwYWdpbmF0aW9uRWwgfHwgdHlwZW9mIHBhZ2luYXRpb25FbCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICBwYWdpbmF0aW9uRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHBhZ2luYXRpb25FbC5jbGFzc0xpc3QuYWRkKCdzd2lwZXItcGFnaW5hdGlvbicpO1xuICAgICAgcGFnaW5hdGlvbkVsLnBhcnQuYWRkKCdwYWdpbmF0aW9uJyk7XG4gICAgICBzd2lwZXIuZWwuYXBwZW5kQ2hpbGQocGFnaW5hdGlvbkVsKTtcbiAgICB9XG4gICAgaWYgKHBhZ2luYXRpb25FbCkgY3VycmVudFBhcmFtcy5wYWdpbmF0aW9uLmVsID0gcGFnaW5hdGlvbkVsO1xuICAgIHBhZ2luYXRpb24uaW5pdCgpO1xuICAgIHBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgcGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgfVxuICBpZiAobmVlZFNjcm9sbGJhckluaXQpIHtcbiAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCAmJiAoIXNjcm9sbGJhckVsIHx8IHR5cGVvZiBzY3JvbGxiYXJFbCA9PT0gJ3N0cmluZycpKSB7XG4gICAgICBzY3JvbGxiYXJFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc2Nyb2xsYmFyRWwuY2xhc3NMaXN0LmFkZCgnc3dpcGVyLXNjcm9sbGJhcicpO1xuICAgICAgc2Nyb2xsYmFyRWwucGFydC5hZGQoJ3Njcm9sbGJhcicpO1xuICAgICAgc3dpcGVyLmVsLmFwcGVuZENoaWxkKHNjcm9sbGJhckVsKTtcbiAgICB9XG4gICAgaWYgKHNjcm9sbGJhckVsKSBjdXJyZW50UGFyYW1zLnNjcm9sbGJhci5lbCA9IHNjcm9sbGJhckVsO1xuICAgIHNjcm9sbGJhci5pbml0KCk7XG4gICAgc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICBzY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gIH1cbiAgaWYgKG5lZWROYXZpZ2F0aW9uSW5pdCkge1xuICAgIGlmIChzd2lwZXIuaXNFbGVtZW50KSB7XG4gICAgICBpZiAoIW5leHRFbCB8fCB0eXBlb2YgbmV4dEVsID09PSAnc3RyaW5nJykge1xuICAgICAgICBuZXh0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgbmV4dEVsLmNsYXNzTGlzdC5hZGQoJ3N3aXBlci1idXR0b24tbmV4dCcpO1xuICAgICAgICBuZXh0RWwuaW5uZXJIVE1MID0gc3dpcGVyLmhvc3RFbC5jb25zdHJ1Y3Rvci5uZXh0QnV0dG9uU3ZnO1xuICAgICAgICBuZXh0RWwucGFydC5hZGQoJ2J1dHRvbi1uZXh0Jyk7XG4gICAgICAgIHN3aXBlci5lbC5hcHBlbmRDaGlsZChuZXh0RWwpO1xuICAgICAgfVxuICAgICAgaWYgKCFwcmV2RWwgfHwgdHlwZW9mIHByZXZFbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcHJldkVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHByZXZFbC5jbGFzc0xpc3QuYWRkKCdzd2lwZXItYnV0dG9uLXByZXYnKTtcbiAgICAgICAgcHJldkVsLmlubmVySFRNTCA9IHN3aXBlci5ob3N0RWwuY29uc3RydWN0b3IucHJldkJ1dHRvblN2ZztcbiAgICAgICAgcHJldkVsLnBhcnQuYWRkKCdidXR0b24tcHJldicpO1xuICAgICAgICBzd2lwZXIuZWwuYXBwZW5kQ2hpbGQocHJldkVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5leHRFbCkgY3VycmVudFBhcmFtcy5uYXZpZ2F0aW9uLm5leHRFbCA9IG5leHRFbDtcbiAgICBpZiAocHJldkVsKSBjdXJyZW50UGFyYW1zLm5hdmlnYXRpb24ucHJldkVsID0gcHJldkVsO1xuICAgIG5hdmlnYXRpb24uaW5pdCgpO1xuICAgIG5hdmlnYXRpb24udXBkYXRlKCk7XG4gIH1cbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ2FsbG93U2xpZGVOZXh0JykpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBwYXNzZWRQYXJhbXMuYWxsb3dTbGlkZU5leHQ7XG4gIH1cbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ2FsbG93U2xpZGVQcmV2JykpIHtcbiAgICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSBwYXNzZWRQYXJhbXMuYWxsb3dTbGlkZVByZXY7XG4gIH1cbiAgaWYgKGNoYW5nZWRQYXJhbXMuaW5jbHVkZXMoJ2RpcmVjdGlvbicpKSB7XG4gICAgc3dpcGVyLmNoYW5nZURpcmVjdGlvbihwYXNzZWRQYXJhbXMuZGlyZWN0aW9uLCBmYWxzZSk7XG4gIH1cbiAgaWYgKGxvb3BOZWVkRGVzdHJveSB8fCBsb29wTmVlZFJlbG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG4gIGlmIChsb29wTmVlZEVuYWJsZSB8fCBsb29wTmVlZFJlbG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgc3dpcGVyLnVwZGF0ZSgpO1xufVxuXG5leHBvcnQgeyBuZWVkc1BhZ2luYXRpb24gYXMgYSwgbmVlZHNTY3JvbGxiYXIgYXMgYiwgYXR0clRvUHJvcCBhcyBjLCB1bmlxdWVDbGFzc2VzIGFzIGQsIGV4dGVuZCBhcyBlLCBpc09iamVjdCBhcyBpLCBuZWVkc05hdmlnYXRpb24gYXMgbiwgcGFyYW1zTGlzdCBhcyBwLCB1cGRhdGVTd2lwZXIgYXMgdSwgd3JhcHBlckNsYXNzIGFzIHcgfTtcbiIsImltcG9ydCB7IGUgYXMgZXh0ZW5kLCBwIGFzIHBhcmFtc0xpc3QsIGkgYXMgaXNPYmplY3QsIG4gYXMgbmVlZHNOYXZpZ2F0aW9uLCBhIGFzIG5lZWRzUGFnaW5hdGlvbiwgYiBhcyBuZWVkc1Njcm9sbGJhciB9IGZyb20gJy4vdXBkYXRlLXN3aXBlci5tanMnO1xuaW1wb3J0IHsgZCBhcyBkZWZhdWx0cyB9IGZyb20gJy4vc3dpcGVyLWNvcmUubWpzJztcblxuZnVuY3Rpb24gZ2V0UGFyYW1zKG9iaiwgc3BsaXRFdmVudHMpIHtcbiAgaWYgKG9iaiA9PT0gdm9pZCAwKSB7XG4gICAgb2JqID0ge307XG4gIH1cbiAgaWYgKHNwbGl0RXZlbnRzID09PSB2b2lkIDApIHtcbiAgICBzcGxpdEV2ZW50cyA9IHRydWU7XG4gIH1cbiAgY29uc3QgcGFyYW1zID0ge1xuICAgIG9uOiB7fVxuICB9O1xuICBjb25zdCBldmVudHMgPSB7fTtcbiAgY29uc3QgcGFzc2VkUGFyYW1zID0ge307XG4gIGV4dGVuZChwYXJhbXMsIGRlZmF1bHRzKTtcbiAgcGFyYW1zLl9lbWl0Q2xhc3NlcyA9IHRydWU7XG4gIHBhcmFtcy5pbml0ID0gZmFsc2U7XG4gIGNvbnN0IHJlc3QgPSB7fTtcbiAgY29uc3QgYWxsb3dlZFBhcmFtcyA9IHBhcmFtc0xpc3QubWFwKGtleSA9PiBrZXkucmVwbGFjZSgvXy8sICcnKSk7XG4gIGNvbnN0IHBsYWluT2JqID0gT2JqZWN0LmFzc2lnbih7fSwgb2JqKTtcbiAgT2JqZWN0LmtleXMocGxhaW5PYmopLmZvckVhY2goa2V5ID0+IHtcbiAgICBpZiAodHlwZW9mIG9ialtrZXldID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgIGlmIChhbGxvd2VkUGFyYW1zLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICBpZiAoaXNPYmplY3Qob2JqW2tleV0pKSB7XG4gICAgICAgIHBhcmFtc1trZXldID0ge307XG4gICAgICAgIHBhc3NlZFBhcmFtc1trZXldID0ge307XG4gICAgICAgIGV4dGVuZChwYXJhbXNba2V5XSwgb2JqW2tleV0pO1xuICAgICAgICBleHRlbmQocGFzc2VkUGFyYW1zW2tleV0sIG9ialtrZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtc1trZXldID0gb2JqW2tleV07XG4gICAgICAgIHBhc3NlZFBhcmFtc1trZXldID0gb2JqW2tleV07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChrZXkuc2VhcmNoKC9vbltBLVpdLykgPT09IDAgJiYgdHlwZW9mIG9ialtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoc3BsaXRFdmVudHMpIHtcbiAgICAgICAgZXZlbnRzW2Ake2tleVsyXS50b0xvd2VyQ2FzZSgpfSR7a2V5LnN1YnN0cigzKX1gXSA9IG9ialtrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLm9uW2Ake2tleVsyXS50b0xvd2VyQ2FzZSgpfSR7a2V5LnN1YnN0cigzKX1gXSA9IG9ialtrZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXN0W2tleV0gPSBvYmpba2V5XTtcbiAgICB9XG4gIH0pO1xuICBbJ25hdmlnYXRpb24nLCAncGFnaW5hdGlvbicsICdzY3JvbGxiYXInXS5mb3JFYWNoKGtleSA9PiB7XG4gICAgaWYgKHBhcmFtc1trZXldID09PSB0cnVlKSBwYXJhbXNba2V5XSA9IHt9O1xuICAgIGlmIChwYXJhbXNba2V5XSA9PT0gZmFsc2UpIGRlbGV0ZSBwYXJhbXNba2V5XTtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgcGFyYW1zLFxuICAgIHBhc3NlZFBhcmFtcyxcbiAgICByZXN0LFxuICAgIGV2ZW50c1xuICB9O1xufVxuXG5mdW5jdGlvbiBtb3VudFN3aXBlcihfcmVmLCBzd2lwZXJQYXJhbXMpIHtcbiAgbGV0IHtcbiAgICBlbCxcbiAgICBuZXh0RWwsXG4gICAgcHJldkVsLFxuICAgIHBhZ2luYXRpb25FbCxcbiAgICBzY3JvbGxiYXJFbCxcbiAgICBzd2lwZXJcbiAgfSA9IF9yZWY7XG4gIGlmIChuZWVkc05hdmlnYXRpb24oc3dpcGVyUGFyYW1zKSAmJiBuZXh0RWwgJiYgcHJldkVsKSB7XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5leHRFbCA9IG5leHRFbDtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbi5uZXh0RWwgPSBuZXh0RWw7XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLnByZXZFbCA9IHByZXZFbDtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMubmF2aWdhdGlvbi5wcmV2RWwgPSBwcmV2RWw7XG4gIH1cbiAgaWYgKG5lZWRzUGFnaW5hdGlvbihzd2lwZXJQYXJhbXMpICYmIHBhZ2luYXRpb25FbCkge1xuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCA9IHBhZ2luYXRpb25FbDtcbiAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbi5lbCA9IHBhZ2luYXRpb25FbDtcbiAgfVxuICBpZiAobmVlZHNTY3JvbGxiYXIoc3dpcGVyUGFyYW1zKSAmJiBzY3JvbGxiYXJFbCkge1xuICAgIHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsID0gc2Nyb2xsYmFyRWw7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zLnNjcm9sbGJhci5lbCA9IHNjcm9sbGJhckVsO1xuICB9XG4gIHN3aXBlci5pbml0KGVsKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhbmdlZFBhcmFtcyhzd2lwZXJQYXJhbXMsIG9sZFBhcmFtcywgY2hpbGRyZW4sIG9sZENoaWxkcmVuLCBnZXRLZXkpIHtcbiAgY29uc3Qga2V5cyA9IFtdO1xuICBpZiAoIW9sZFBhcmFtcykgcmV0dXJuIGtleXM7XG4gIGNvbnN0IGFkZEtleSA9IGtleSA9PiB7XG4gICAgaWYgKGtleXMuaW5kZXhPZihrZXkpIDwgMCkga2V5cy5wdXNoKGtleSk7XG4gIH07XG4gIGlmIChjaGlsZHJlbiAmJiBvbGRDaGlsZHJlbikge1xuICAgIGNvbnN0IG9sZENoaWxkcmVuS2V5cyA9IG9sZENoaWxkcmVuLm1hcChnZXRLZXkpO1xuICAgIGNvbnN0IGNoaWxkcmVuS2V5cyA9IGNoaWxkcmVuLm1hcChnZXRLZXkpO1xuICAgIGlmIChvbGRDaGlsZHJlbktleXMuam9pbignJykgIT09IGNoaWxkcmVuS2V5cy5qb2luKCcnKSkgYWRkS2V5KCdjaGlsZHJlbicpO1xuICAgIGlmIChvbGRDaGlsZHJlbi5sZW5ndGggIT09IGNoaWxkcmVuLmxlbmd0aCkgYWRkS2V5KCdjaGlsZHJlbicpO1xuICB9XG4gIGNvbnN0IHdhdGNoUGFyYW1zID0gcGFyYW1zTGlzdC5maWx0ZXIoa2V5ID0+IGtleVswXSA9PT0gJ18nKS5tYXAoa2V5ID0+IGtleS5yZXBsYWNlKC9fLywgJycpKTtcbiAgd2F0Y2hQYXJhbXMuZm9yRWFjaChrZXkgPT4ge1xuICAgIGlmIChrZXkgaW4gc3dpcGVyUGFyYW1zICYmIGtleSBpbiBvbGRQYXJhbXMpIHtcbiAgICAgIGlmIChpc09iamVjdChzd2lwZXJQYXJhbXNba2V5XSkgJiYgaXNPYmplY3Qob2xkUGFyYW1zW2tleV0pKSB7XG4gICAgICAgIGNvbnN0IG5ld0tleXMgPSBPYmplY3Qua2V5cyhzd2lwZXJQYXJhbXNba2V5XSk7XG4gICAgICAgIGNvbnN0IG9sZEtleXMgPSBPYmplY3Qua2V5cyhvbGRQYXJhbXNba2V5XSk7XG4gICAgICAgIGlmIChuZXdLZXlzLmxlbmd0aCAhPT0gb2xkS2V5cy5sZW5ndGgpIHtcbiAgICAgICAgICBhZGRLZXkoa2V5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXdLZXlzLmZvckVhY2gobmV3S2V5ID0+IHtcbiAgICAgICAgICAgIGlmIChzd2lwZXJQYXJhbXNba2V5XVtuZXdLZXldICE9PSBvbGRQYXJhbXNba2V5XVtuZXdLZXldKSB7XG4gICAgICAgICAgICAgIGFkZEtleShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9sZEtleXMuZm9yRWFjaChvbGRLZXkgPT4ge1xuICAgICAgICAgICAgaWYgKHN3aXBlclBhcmFtc1trZXldW29sZEtleV0gIT09IG9sZFBhcmFtc1trZXldW29sZEtleV0pIGFkZEtleShrZXkpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlclBhcmFtc1trZXldICE9PSBvbGRQYXJhbXNba2V5XSkge1xuICAgICAgICBhZGRLZXkoa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuY29uc3QgdXBkYXRlT25WaXJ0dWFsRGF0YSA9IHN3aXBlciA9PiB7XG4gIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5wYXJhbXMudmlydHVhbCB8fCBzd2lwZXIucGFyYW1zLnZpcnR1YWwgJiYgIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIGlmIChzd2lwZXIucGFyYWxsYXggJiYgc3dpcGVyLnBhcmFtcy5wYXJhbGxheCAmJiBzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHtcbiAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNsYXRlKCk7XG4gIH1cbn07XG5cbmV4cG9ydCB7IGdldENoYW5nZWRQYXJhbXMgYXMgYSwgZ2V0UGFyYW1zIGFzIGcsIG1vdW50U3dpcGVyIGFzIG0sIHVwZGF0ZU9uVmlydHVhbERhdGEgYXMgdSB9O1xuIiwiLyoqXG4gKiBTd2lwZXIgUmVhY3QgMTEuMC41XG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cHM6Ly9zd2lwZXJqcy5jb21cbiAqXG4gKiBDb3B5cmlnaHQgMjAxNC0yMDIzIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKlxuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKlxuICogUmVsZWFzZWQgb246IE5vdmVtYmVyIDIyLCAyMDIzXG4gKi9cblxuaW1wb3J0IFJlYWN0LCB7IHVzZUVmZmVjdCwgdXNlTGF5b3V0RWZmZWN0LCB1c2VDb250ZXh0LCBjcmVhdGVDb250ZXh0LCBmb3J3YXJkUmVmLCB1c2VTdGF0ZSwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUyBhcyBTd2lwZXIkMSB9IGZyb20gJy4vc2hhcmVkL3N3aXBlci1jb3JlLm1qcyc7XG5pbXBvcnQgeyBnIGFzIGdldFBhcmFtcywgbSBhcyBtb3VudFN3aXBlciwgYSBhcyBnZXRDaGFuZ2VkUGFyYW1zLCB1IGFzIHVwZGF0ZU9uVmlydHVhbERhdGEgfSBmcm9tICcuL3NoYXJlZC91cGRhdGUtb24tdmlydHVhbC1kYXRhLm1qcyc7XG5pbXBvcnQgeyBkIGFzIHVuaXF1ZUNsYXNzZXMsIHcgYXMgd3JhcHBlckNsYXNzLCBuIGFzIG5lZWRzTmF2aWdhdGlvbiwgYiBhcyBuZWVkc1Njcm9sbGJhciwgYSBhcyBuZWVkc1BhZ2luYXRpb24sIGUgYXMgZXh0ZW5kLCB1IGFzIHVwZGF0ZVN3aXBlciB9IGZyb20gJy4vc2hhcmVkL3VwZGF0ZS1zd2lwZXIubWpzJztcblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmZ1bmN0aW9uIGlzQ2hpbGRTd2lwZXJTbGlkZShjaGlsZCkge1xuICByZXR1cm4gY2hpbGQudHlwZSAmJiBjaGlsZC50eXBlLmRpc3BsYXlOYW1lICYmIGNoaWxkLnR5cGUuZGlzcGxheU5hbWUuaW5jbHVkZXMoJ1N3aXBlclNsaWRlJyk7XG59XG5mdW5jdGlvbiBwcm9jZXNzQ2hpbGRyZW4oYykge1xuICBjb25zdCBzbGlkZXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4udG9BcnJheShjKS5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICBpZiAoaXNDaGlsZFN3aXBlclNsaWRlKGNoaWxkKSkge1xuICAgICAgc2xpZGVzLnB1c2goY2hpbGQpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHByb2Nlc3NDaGlsZHJlbihjaGlsZC5wcm9wcy5jaGlsZHJlbikuZm9yRWFjaChzbGlkZSA9PiBzbGlkZXMucHVzaChzbGlkZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzbGlkZXM7XG59XG5mdW5jdGlvbiBnZXRDaGlsZHJlbihjKSB7XG4gIGNvbnN0IHNsaWRlcyA9IFtdO1xuICBjb25zdCBzbG90cyA9IHtcbiAgICAnY29udGFpbmVyLXN0YXJ0JzogW10sXG4gICAgJ2NvbnRhaW5lci1lbmQnOiBbXSxcbiAgICAnd3JhcHBlci1zdGFydCc6IFtdLFxuICAgICd3cmFwcGVyLWVuZCc6IFtdXG4gIH07XG4gIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoYykuZm9yRWFjaChjaGlsZCA9PiB7XG4gICAgaWYgKGlzQ2hpbGRTd2lwZXJTbGlkZShjaGlsZCkpIHtcbiAgICAgIHNsaWRlcy5wdXNoKGNoaWxkKTtcbiAgICB9IGVsc2UgaWYgKGNoaWxkLnByb3BzICYmIGNoaWxkLnByb3BzLnNsb3QgJiYgc2xvdHNbY2hpbGQucHJvcHMuc2xvdF0pIHtcbiAgICAgIHNsb3RzW2NoaWxkLnByb3BzLnNsb3RdLnB1c2goY2hpbGQpO1xuICAgIH0gZWxzZSBpZiAoY2hpbGQucHJvcHMgJiYgY2hpbGQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIGNvbnN0IGZvdW5kU2xpZGVzID0gcHJvY2Vzc0NoaWxkcmVuKGNoaWxkLnByb3BzLmNoaWxkcmVuKTtcbiAgICAgIGlmIChmb3VuZFNsaWRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvdW5kU2xpZGVzLmZvckVhY2goc2xpZGUgPT4gc2xpZGVzLnB1c2goc2xpZGUpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsb3RzWydjb250YWluZXItZW5kJ10ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsb3RzWydjb250YWluZXItZW5kJ10ucHVzaChjaGlsZCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzbGlkZXMsXG4gICAgc2xvdHNcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyVmlydHVhbChzd2lwZXIsIHNsaWRlcywgdmlydHVhbERhdGEpIHtcbiAgaWYgKCF2aXJ0dWFsRGF0YSkgcmV0dXJuIG51bGw7XG4gIGNvbnN0IGdldFNsaWRlSW5kZXggPSBpbmRleCA9PiB7XG4gICAgbGV0IHNsaWRlSW5kZXggPSBpbmRleDtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBzbGlkZUluZGV4ID0gc2xpZGVzLmxlbmd0aCArIGluZGV4O1xuICAgIH0gZWxzZSBpZiAoc2xpZGVJbmRleCA+PSBzbGlkZXMubGVuZ3RoKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIHNsaWRlSW5kZXggPSBzbGlkZUluZGV4IC0gc2xpZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHNsaWRlSW5kZXg7XG4gIH07XG4gIGNvbnN0IHN0eWxlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8ge1xuICAgIFtzd2lwZXIucnRsVHJhbnNsYXRlID8gJ3JpZ2h0JyA6ICdsZWZ0J106IGAke3ZpcnR1YWxEYXRhLm9mZnNldH1weGBcbiAgfSA6IHtcbiAgICB0b3A6IGAke3ZpcnR1YWxEYXRhLm9mZnNldH1weGBcbiAgfTtcbiAgY29uc3Qge1xuICAgIGZyb20sXG4gICAgdG9cbiAgfSA9IHZpcnR1YWxEYXRhO1xuICBjb25zdCBsb29wRnJvbSA9IHN3aXBlci5wYXJhbXMubG9vcCA/IC1zbGlkZXMubGVuZ3RoIDogMDtcbiAgY29uc3QgbG9vcFRvID0gc3dpcGVyLnBhcmFtcy5sb29wID8gc2xpZGVzLmxlbmd0aCAqIDIgOiBzbGlkZXMubGVuZ3RoO1xuICBjb25zdCBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICBmb3IgKGxldCBpID0gbG9vcEZyb207IGkgPCBsb29wVG87IGkgKz0gMSkge1xuICAgIGlmIChpID49IGZyb20gJiYgaSA8PSB0bykge1xuICAgICAgc2xpZGVzVG9SZW5kZXIucHVzaChzbGlkZXNbZ2V0U2xpZGVJbmRleChpKV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2xpZGVzVG9SZW5kZXIubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNsb25lRWxlbWVudChjaGlsZCwge1xuICAgICAgc3dpcGVyLFxuICAgICAgc3R5bGUsXG4gICAgICBrZXk6IGBzbGlkZS0ke2luZGV4fWBcbiAgICB9KTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoY2FsbGJhY2ssIGRlcHMpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuIHVzZUVmZmVjdChjYWxsYmFjaywgZGVwcyk7XG4gIHJldHVybiB1c2VMYXlvdXRFZmZlY3QoY2FsbGJhY2ssIGRlcHMpO1xufVxuXG5jb25zdCBTd2lwZXJTbGlkZUNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IHVzZVN3aXBlclNsaWRlID0gKCkgPT4ge1xuICByZXR1cm4gdXNlQ29udGV4dChTd2lwZXJTbGlkZUNvbnRleHQpO1xufTtcbmNvbnN0IFN3aXBlckNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlQ29udGV4dChudWxsKTtcbmNvbnN0IHVzZVN3aXBlciA9ICgpID0+IHtcbiAgcmV0dXJuIHVzZUNvbnRleHQoU3dpcGVyQ29udGV4dCk7XG59O1xuXG5jb25zdCBTd2lwZXIgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAoX3RlbXAsIGV4dGVybmFsRWxSZWYpIHtcbiAgbGV0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgdGFnOiBUYWcgPSAnZGl2JyxcbiAgICB3cmFwcGVyVGFnOiBXcmFwcGVyVGFnID0gJ2RpdicsXG4gICAgY2hpbGRyZW4sXG4gICAgb25Td2lwZXIsXG4gICAgLi4ucmVzdFxuICB9ID0gX3RlbXAgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA7XG4gIGxldCBldmVudHNBc3NpZ25lZCA9IGZhbHNlO1xuICBjb25zdCBbY29udGFpbmVyQ2xhc3Nlcywgc2V0Q29udGFpbmVyQ2xhc3Nlc10gPSB1c2VTdGF0ZSgnc3dpcGVyJyk7XG4gIGNvbnN0IFt2aXJ0dWFsRGF0YSwgc2V0VmlydHVhbERhdGFdID0gdXNlU3RhdGUobnVsbCk7XG4gIGNvbnN0IFticmVha3BvaW50Q2hhbmdlZCwgc2V0QnJlYWtwb2ludENoYW5nZWRdID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBpbml0aWFsaXplZFJlZiA9IHVzZVJlZihmYWxzZSk7XG4gIGNvbnN0IHN3aXBlckVsUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBzd2lwZXJSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IG9sZFBhc3NlZFBhcmFtc1JlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3Qgb2xkU2xpZGVzID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBuZXh0RWxSZWYgPSB1c2VSZWYobnVsbCk7XG4gIGNvbnN0IHByZXZFbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3QgcGFnaW5hdGlvbkVsUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBzY3JvbGxiYXJFbFJlZiA9IHVzZVJlZihudWxsKTtcbiAgY29uc3Qge1xuICAgIHBhcmFtczogc3dpcGVyUGFyYW1zLFxuICAgIHBhc3NlZFBhcmFtcyxcbiAgICByZXN0OiByZXN0UHJvcHMsXG4gICAgZXZlbnRzXG4gIH0gPSBnZXRQYXJhbXMocmVzdCk7XG4gIGNvbnN0IHtcbiAgICBzbGlkZXMsXG4gICAgc2xvdHNcbiAgfSA9IGdldENoaWxkcmVuKGNoaWxkcmVuKTtcbiAgY29uc3Qgb25CZWZvcmVCcmVha3BvaW50ID0gKCkgPT4ge1xuICAgIHNldEJyZWFrcG9pbnRDaGFuZ2VkKCFicmVha3BvaW50Q2hhbmdlZCk7XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3dpcGVyUGFyYW1zLm9uLCB7XG4gICAgX2NvbnRhaW5lckNsYXNzZXMoc3dpcGVyLCBjbGFzc2VzKSB7XG4gICAgICBzZXRDb250YWluZXJDbGFzc2VzKGNsYXNzZXMpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGluaXRTd2lwZXIgPSAoKSA9PiB7XG4gICAgLy8gaW5pdCBzd2lwZXJcbiAgICBPYmplY3QuYXNzaWduKHN3aXBlclBhcmFtcy5vbiwgZXZlbnRzKTtcbiAgICBldmVudHNBc3NpZ25lZCA9IHRydWU7XG4gICAgY29uc3QgcGFzc1BhcmFtcyA9IHtcbiAgICAgIC4uLnN3aXBlclBhcmFtc1xuICAgIH07XG4gICAgZGVsZXRlIHBhc3NQYXJhbXMud3JhcHBlckNsYXNzO1xuICAgIHN3aXBlclJlZi5jdXJyZW50ID0gbmV3IFN3aXBlciQxKHBhc3NQYXJhbXMpO1xuICAgIGlmIChzd2lwZXJSZWYuY3VycmVudC52aXJ0dWFsICYmIHN3aXBlclJlZi5jdXJyZW50LnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHtcbiAgICAgIHN3aXBlclJlZi5jdXJyZW50LnZpcnR1YWwuc2xpZGVzID0gc2xpZGVzO1xuICAgICAgY29uc3QgZXh0ZW5kV2l0aCA9IHtcbiAgICAgICAgY2FjaGU6IGZhbHNlLFxuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHJlbmRlckV4dGVybmFsOiBzZXRWaXJ0dWFsRGF0YSxcbiAgICAgICAgcmVuZGVyRXh0ZXJuYWxVcGRhdGU6IGZhbHNlXG4gICAgICB9O1xuICAgICAgZXh0ZW5kKHN3aXBlclJlZi5jdXJyZW50LnBhcmFtcy52aXJ0dWFsLCBleHRlbmRXaXRoKTtcbiAgICAgIGV4dGVuZChzd2lwZXJSZWYuY3VycmVudC5vcmlnaW5hbFBhcmFtcy52aXJ0dWFsLCBleHRlbmRXaXRoKTtcbiAgICB9XG4gIH07XG4gIGlmICghc3dpcGVyRWxSZWYuY3VycmVudCkge1xuICAgIGluaXRTd2lwZXIoKTtcbiAgfVxuXG4gIC8vIExpc3RlbiBmb3IgYnJlYWtwb2ludHMgY2hhbmdlXG4gIGlmIChzd2lwZXJSZWYuY3VycmVudCkge1xuICAgIHN3aXBlclJlZi5jdXJyZW50Lm9uKCdfYmVmb3JlQnJlYWtwb2ludCcsIG9uQmVmb3JlQnJlYWtwb2ludCk7XG4gIH1cbiAgY29uc3QgYXR0YWNoRXZlbnRzID0gKCkgPT4ge1xuICAgIGlmIChldmVudHNBc3NpZ25lZCB8fCAhZXZlbnRzIHx8ICFzd2lwZXJSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGV2ZW50cykuZm9yRWFjaChldmVudE5hbWUgPT4ge1xuICAgICAgc3dpcGVyUmVmLmN1cnJlbnQub24oZXZlbnROYW1lLCBldmVudHNbZXZlbnROYW1lXSk7XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IGRldGFjaEV2ZW50cyA9ICgpID0+IHtcbiAgICBpZiAoIWV2ZW50cyB8fCAhc3dpcGVyUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhldmVudHMpLmZvckVhY2goZXZlbnROYW1lID0+IHtcbiAgICAgIHN3aXBlclJlZi5jdXJyZW50Lm9mZihldmVudE5hbWUsIGV2ZW50c1tldmVudE5hbWVdKTtcbiAgICB9KTtcbiAgfTtcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlclJlZi5jdXJyZW50KSBzd2lwZXJSZWYuY3VycmVudC5vZmYoJ19iZWZvcmVCcmVha3BvaW50Jywgb25CZWZvcmVCcmVha3BvaW50KTtcbiAgICB9O1xuICB9KTtcblxuICAvLyBzZXQgaW5pdGlhbGl6ZWQgZmxhZ1xuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghaW5pdGlhbGl6ZWRSZWYuY3VycmVudCAmJiBzd2lwZXJSZWYuY3VycmVudCkge1xuICAgICAgc3dpcGVyUmVmLmN1cnJlbnQuZW1pdFNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGluaXRpYWxpemVkUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgLy8gbW91bnQgc3dpcGVyXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChleHRlcm5hbEVsUmVmKSB7XG4gICAgICBleHRlcm5hbEVsUmVmLmN1cnJlbnQgPSBzd2lwZXJFbFJlZi5jdXJyZW50O1xuICAgIH1cbiAgICBpZiAoIXN3aXBlckVsUmVmLmN1cnJlbnQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyUmVmLmN1cnJlbnQuZGVzdHJveWVkKSB7XG4gICAgICBpbml0U3dpcGVyKCk7XG4gICAgfVxuICAgIG1vdW50U3dpcGVyKHtcbiAgICAgIGVsOiBzd2lwZXJFbFJlZi5jdXJyZW50LFxuICAgICAgbmV4dEVsOiBuZXh0RWxSZWYuY3VycmVudCxcbiAgICAgIHByZXZFbDogcHJldkVsUmVmLmN1cnJlbnQsXG4gICAgICBwYWdpbmF0aW9uRWw6IHBhZ2luYXRpb25FbFJlZi5jdXJyZW50LFxuICAgICAgc2Nyb2xsYmFyRWw6IHNjcm9sbGJhckVsUmVmLmN1cnJlbnQsXG4gICAgICBzd2lwZXI6IHN3aXBlclJlZi5jdXJyZW50XG4gICAgfSwgc3dpcGVyUGFyYW1zKTtcbiAgICBpZiAob25Td2lwZXIpIG9uU3dpcGVyKHN3aXBlclJlZi5jdXJyZW50KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKHN3aXBlclJlZi5jdXJyZW50ICYmICFzd2lwZXJSZWYuY3VycmVudC5kZXN0cm95ZWQpIHtcbiAgICAgICAgc3dpcGVyUmVmLmN1cnJlbnQuZGVzdHJveSh0cnVlLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIC8vIHdhdGNoIGZvciBwYXJhbXMgY2hhbmdlXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGF0dGFjaEV2ZW50cygpO1xuICAgIGNvbnN0IGNoYW5nZWRQYXJhbXMgPSBnZXRDaGFuZ2VkUGFyYW1zKHBhc3NlZFBhcmFtcywgb2xkUGFzc2VkUGFyYW1zUmVmLmN1cnJlbnQsIHNsaWRlcywgb2xkU2xpZGVzLmN1cnJlbnQsIGMgPT4gYy5rZXkpO1xuICAgIG9sZFBhc3NlZFBhcmFtc1JlZi5jdXJyZW50ID0gcGFzc2VkUGFyYW1zO1xuICAgIG9sZFNsaWRlcy5jdXJyZW50ID0gc2xpZGVzO1xuICAgIGlmIChjaGFuZ2VkUGFyYW1zLmxlbmd0aCAmJiBzd2lwZXJSZWYuY3VycmVudCAmJiAhc3dpcGVyUmVmLmN1cnJlbnQuZGVzdHJveWVkKSB7XG4gICAgICB1cGRhdGVTd2lwZXIoe1xuICAgICAgICBzd2lwZXI6IHN3aXBlclJlZi5jdXJyZW50LFxuICAgICAgICBzbGlkZXMsXG4gICAgICAgIHBhc3NlZFBhcmFtcyxcbiAgICAgICAgY2hhbmdlZFBhcmFtcyxcbiAgICAgICAgbmV4dEVsOiBuZXh0RWxSZWYuY3VycmVudCxcbiAgICAgICAgcHJldkVsOiBwcmV2RWxSZWYuY3VycmVudCxcbiAgICAgICAgc2Nyb2xsYmFyRWw6IHNjcm9sbGJhckVsUmVmLmN1cnJlbnQsXG4gICAgICAgIHBhZ2luYXRpb25FbDogcGFnaW5hdGlvbkVsUmVmLmN1cnJlbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgZGV0YWNoRXZlbnRzKCk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gdXBkYXRlIG9uIHZpcnR1YWwgdXBkYXRlXG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIHVwZGF0ZU9uVmlydHVhbERhdGEoc3dpcGVyUmVmLmN1cnJlbnQpO1xuICB9LCBbdmlydHVhbERhdGFdKTtcblxuICAvLyBieXBhc3Mgc3dpcGVyIGluc3RhbmNlIHRvIHNsaWRlc1xuICBmdW5jdGlvbiByZW5kZXJTbGlkZXMoKSB7XG4gICAgaWYgKHN3aXBlclBhcmFtcy52aXJ0dWFsKSB7XG4gICAgICByZXR1cm4gcmVuZGVyVmlydHVhbChzd2lwZXJSZWYuY3VycmVudCwgc2xpZGVzLCB2aXJ0dWFsRGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBzbGlkZXMubWFwKChjaGlsZCwgaW5kZXgpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7XG4gICAgICAgIHN3aXBlcjogc3dpcGVyUmVmLmN1cnJlbnQsXG4gICAgICAgIHN3aXBlclNsaWRlSW5kZXg6IGluZGV4XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBzd2lwZXJFbFJlZixcbiAgICBjbGFzc05hbWU6IHVuaXF1ZUNsYXNzZXMoYCR7Y29udGFpbmVyQ2xhc3Nlc30ke2NsYXNzTmFtZSA/IGAgJHtjbGFzc05hbWV9YCA6ICcnfWApXG4gIH0sIHJlc3RQcm9wcyksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN3aXBlckNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3dpcGVyUmVmLmN1cnJlbnRcbiAgfSwgc2xvdHNbJ2NvbnRhaW5lci1zdGFydCddLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChXcmFwcGVyVGFnLCB7XG4gICAgY2xhc3NOYW1lOiB3cmFwcGVyQ2xhc3Moc3dpcGVyUGFyYW1zLndyYXBwZXJDbGFzcylcbiAgfSwgc2xvdHNbJ3dyYXBwZXItc3RhcnQnXSwgcmVuZGVyU2xpZGVzKCksIHNsb3RzWyd3cmFwcGVyLWVuZCddKSwgbmVlZHNOYXZpZ2F0aW9uKHN3aXBlclBhcmFtcykgJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IHByZXZFbFJlZixcbiAgICBjbGFzc05hbWU6IFwic3dpcGVyLWJ1dHRvbi1wcmV2XCJcbiAgfSksIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IG5leHRFbFJlZixcbiAgICBjbGFzc05hbWU6IFwic3dpcGVyLWJ1dHRvbi1uZXh0XCJcbiAgfSkpLCBuZWVkc1Njcm9sbGJhcihzd2lwZXJQYXJhbXMpICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IHNjcm9sbGJhckVsUmVmLFxuICAgIGNsYXNzTmFtZTogXCJzd2lwZXItc2Nyb2xsYmFyXCJcbiAgfSksIG5lZWRzUGFnaW5hdGlvbihzd2lwZXJQYXJhbXMpICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICByZWY6IHBhZ2luYXRpb25FbFJlZixcbiAgICBjbGFzc05hbWU6IFwic3dpcGVyLXBhZ2luYXRpb25cIlxuICB9KSwgc2xvdHNbJ2NvbnRhaW5lci1lbmQnXSkpO1xufSk7XG5Td2lwZXIuZGlzcGxheU5hbWUgPSAnU3dpcGVyJztcblxuY29uc3QgU3dpcGVyU2xpZGUgPSAvKiNfX1BVUkVfXyovZm9yd2FyZFJlZihmdW5jdGlvbiAoX3RlbXAsIGV4dGVybmFsUmVmKSB7XG4gIGxldCB7XG4gICAgdGFnOiBUYWcgPSAnZGl2JyxcbiAgICBjaGlsZHJlbixcbiAgICBjbGFzc05hbWUgPSAnJyxcbiAgICBzd2lwZXIsXG4gICAgem9vbSxcbiAgICBsYXp5LFxuICAgIHZpcnR1YWxJbmRleCxcbiAgICBzd2lwZXJTbGlkZUluZGV4LFxuICAgIC4uLnJlc3RcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBjb25zdCBzbGlkZUVsUmVmID0gdXNlUmVmKG51bGwpO1xuICBjb25zdCBbc2xpZGVDbGFzc2VzLCBzZXRTbGlkZUNsYXNzZXNdID0gdXNlU3RhdGUoJ3N3aXBlci1zbGlkZScpO1xuICBjb25zdCBbbGF6eUxvYWRlZCwgc2V0TGF6eUxvYWRlZF0gPSB1c2VTdGF0ZShmYWxzZSk7XG4gIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzZXMoX3MsIGVsLCBjbGFzc05hbWVzKSB7XG4gICAgaWYgKGVsID09PSBzbGlkZUVsUmVmLmN1cnJlbnQpIHtcbiAgICAgIHNldFNsaWRlQ2xhc3NlcyhjbGFzc05hbWVzKTtcbiAgICB9XG4gIH1cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXJTbGlkZUluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgc2xpZGVFbFJlZi5jdXJyZW50LnN3aXBlclNsaWRlSW5kZXggPSBzd2lwZXJTbGlkZUluZGV4O1xuICAgIH1cbiAgICBpZiAoZXh0ZXJuYWxSZWYpIHtcbiAgICAgIGV4dGVybmFsUmVmLmN1cnJlbnQgPSBzbGlkZUVsUmVmLmN1cnJlbnQ7XG4gICAgfVxuICAgIGlmICghc2xpZGVFbFJlZi5jdXJyZW50IHx8ICFzd2lwZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQpIHtcbiAgICAgIGlmIChzbGlkZUNsYXNzZXMgIT09ICdzd2lwZXItc2xpZGUnKSB7XG4gICAgICAgIHNldFNsaWRlQ2xhc3Nlcygnc3dpcGVyLXNsaWRlJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHN3aXBlci5vbignX3NsaWRlQ2xhc3MnLCB1cGRhdGVDbGFzc2VzKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKCFzd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci5vZmYoJ19zbGlkZUNsYXNzJywgdXBkYXRlQ2xhc3Nlcyk7XG4gICAgfTtcbiAgfSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChzd2lwZXIgJiYgc2xpZGVFbFJlZi5jdXJyZW50ICYmICFzd2lwZXIuZGVzdHJveWVkKSB7XG4gICAgICBzZXRTbGlkZUNsYXNzZXMoc3dpcGVyLmdldFNsaWRlQ2xhc3NlcyhzbGlkZUVsUmVmLmN1cnJlbnQpKTtcbiAgICB9XG4gIH0sIFtzd2lwZXJdKTtcbiAgY29uc3Qgc2xpZGVEYXRhID0ge1xuICAgIGlzQWN0aXZlOiBzbGlkZUNsYXNzZXMuaW5kZXhPZignc3dpcGVyLXNsaWRlLWFjdGl2ZScpID49IDAsXG4gICAgaXNWaXNpYmxlOiBzbGlkZUNsYXNzZXMuaW5kZXhPZignc3dpcGVyLXNsaWRlLXZpc2libGUnKSA+PSAwLFxuICAgIGlzUHJldjogc2xpZGVDbGFzc2VzLmluZGV4T2YoJ3N3aXBlci1zbGlkZS1wcmV2JykgPj0gMCxcbiAgICBpc05leHQ6IHNsaWRlQ2xhc3Nlcy5pbmRleE9mKCdzd2lwZXItc2xpZGUtbmV4dCcpID49IDBcbiAgfTtcbiAgY29uc3QgcmVuZGVyQ2hpbGRyZW4gPSAoKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkcmVuKHNsaWRlRGF0YSkgOiBjaGlsZHJlbjtcbiAgfTtcbiAgY29uc3Qgb25Mb2FkID0gKCkgPT4ge1xuICAgIHNldExhenlMb2FkZWQodHJ1ZSk7XG4gIH07XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHtcbiAgICByZWY6IHNsaWRlRWxSZWYsXG4gICAgY2xhc3NOYW1lOiB1bmlxdWVDbGFzc2VzKGAke3NsaWRlQ2xhc3Nlc30ke2NsYXNzTmFtZSA/IGAgJHtjbGFzc05hbWV9YCA6ICcnfWApLFxuICAgIFwiZGF0YS1zd2lwZXItc2xpZGUtaW5kZXhcIjogdmlydHVhbEluZGV4LFxuICAgIG9uTG9hZDogb25Mb2FkXG4gIH0sIHJlc3QpLCB6b29tICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFN3aXBlclNsaWRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzbGlkZURhdGFcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xuICAgIGNsYXNzTmFtZTogXCJzd2lwZXItem9vbS1jb250YWluZXJcIixcbiAgICBcImRhdGEtc3dpcGVyLXpvb21cIjogdHlwZW9mIHpvb20gPT09ICdudW1iZXInID8gem9vbSA6IHVuZGVmaW5lZFxuICB9LCByZW5kZXJDaGlsZHJlbigpLCBsYXp5ICYmICFsYXp5TG9hZGVkICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3dpcGVyLWxhenktcHJlbG9hZGVyXCJcbiAgfSkpKSwgIXpvb20gJiYgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoU3dpcGVyU2xpZGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IHNsaWRlRGF0YVxuICB9LCByZW5kZXJDaGlsZHJlbigpLCBsYXp5ICYmICFsYXp5TG9hZGVkICYmIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIHtcbiAgICBjbGFzc05hbWU6IFwic3dpcGVyLWxhenktcHJlbG9hZGVyXCJcbiAgfSkpKTtcbn0pO1xuU3dpcGVyU2xpZGUuZGlzcGxheU5hbWUgPSAnU3dpcGVyU2xpZGUnO1xuXG5leHBvcnQgeyBTd2lwZXIsIFN3aXBlclNsaWRlLCB1c2VTd2lwZXIsIHVzZVN3aXBlclNsaWRlIH07XG4iLCJpbXBvcnQgeyBlIGFzIGVsZW1lbnRDaGlsZHJlbiwgYyBhcyBjcmVhdGVFbGVtZW50IH0gZnJvbSAnLi91dGlscy5tanMnO1xuXG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50SWZOb3REZWZpbmVkKHN3aXBlciwgb3JpZ2luYWxQYXJhbXMsIHBhcmFtcywgY2hlY2tQcm9wcykge1xuICBpZiAoc3dpcGVyLnBhcmFtcy5jcmVhdGVFbGVtZW50cykge1xuICAgIE9iamVjdC5rZXlzKGNoZWNrUHJvcHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgIGlmICghcGFyYW1zW2tleV0gJiYgcGFyYW1zLmF1dG8gPT09IHRydWUpIHtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBlbGVtZW50Q2hpbGRyZW4oc3dpcGVyLmVsLCBgLiR7Y2hlY2tQcm9wc1trZXldfWApWzBdO1xuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY3JlYXRlRWxlbWVudCgnZGl2JywgY2hlY2tQcm9wc1trZXldKTtcbiAgICAgICAgICBlbGVtZW50LmNsYXNzTmFtZSA9IGNoZWNrUHJvcHNba2V5XTtcbiAgICAgICAgICBzd2lwZXIuZWwuYXBwZW5kKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmFtc1trZXldID0gZWxlbWVudDtcbiAgICAgICAgb3JpZ2luYWxQYXJhbXNba2V5XSA9IGVsZW1lbnQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn1cblxuZXhwb3J0IHsgY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCBhcyBjIH07XG4iLCJpbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcblxuZnVuY3Rpb24gTmF2aWdhdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIG5hdmlnYXRpb246IHtcbiAgICAgIG5leHRFbDogbnVsbCxcbiAgICAgIHByZXZFbDogbnVsbCxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIGRpc2FibGVkQ2xhc3M6ICdzd2lwZXItYnV0dG9uLWRpc2FibGVkJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLWJ1dHRvbi1oaWRkZW4nLFxuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLWJ1dHRvbi1sb2NrJyxcbiAgICAgIG5hdmlnYXRpb25EaXNhYmxlZENsYXNzOiAnc3dpcGVyLW5hdmlnYXRpb24tZGlzYWJsZWQnXG4gICAgfVxuICB9KTtcbiAgc3dpcGVyLm5hdmlnYXRpb24gPSB7XG4gICAgbmV4dEVsOiBudWxsLFxuICAgIHByZXZFbDogbnVsbFxuICB9O1xuICBjb25zdCBtYWtlRWxlbWVudHNBcnJheSA9IGVsID0+IChBcnJheS5pc0FycmF5KGVsKSA/IGVsIDogW2VsXSkuZmlsdGVyKGUgPT4gISFlKTtcbiAgZnVuY3Rpb24gZ2V0RWwoZWwpIHtcbiAgICBsZXQgcmVzO1xuICAgIGlmIChlbCAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgIHJlcyA9IHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yKGVsKTtcbiAgICAgIGlmIChyZXMpIHJldHVybiByZXM7XG4gICAgfVxuICAgIGlmIChlbCkge1xuICAgICAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGVsKV07XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgZWwgPT09ICdzdHJpbmcnICYmIHJlcy5sZW5ndGggPiAxICYmIHN3aXBlci5lbC5xdWVyeVNlbGVjdG9yQWxsKGVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmVzID0gc3dpcGVyLmVsLnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZWwgJiYgIXJlcykgcmV0dXJuIGVsO1xuICAgIC8vIGlmIChBcnJheS5pc0FycmF5KHJlcykgJiYgcmVzLmxlbmd0aCA9PT0gMSkgcmVzID0gcmVzWzBdO1xuICAgIHJldHVybiByZXM7XG4gIH1cbiAgZnVuY3Rpb24gdG9nZ2xlRWwoZWwsIGRpc2FibGVkKSB7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHN1YkVsKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdFtkaXNhYmxlZCA/ICdhZGQnIDogJ3JlbW92ZSddKC4uLnBhcmFtcy5kaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgICBpZiAoc3ViRWwudGFnTmFtZSA9PT0gJ0JVVFRPTicpIHN1YkVsLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGUoKSB7XG4gICAgLy8gVXBkYXRlIE5hdmlnYXRpb24gQnV0dG9uc1xuICAgIGNvbnN0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICB0b2dnbGVFbChwcmV2RWwsIGZhbHNlKTtcbiAgICAgIHRvZ2dsZUVsKG5leHRFbCwgZmFsc2UpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0b2dnbGVFbChwcmV2RWwsIHN3aXBlci5pc0JlZ2lubmluZyAmJiAhc3dpcGVyLnBhcmFtcy5yZXdpbmQpO1xuICAgIHRvZ2dsZUVsKG5leHRFbCwgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLnJld2luZCk7XG4gIH1cbiAgZnVuY3Rpb24gb25QcmV2Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25QcmV2Jyk7XG4gIH1cbiAgZnVuY3Rpb24gb25OZXh0Q2xpY2soZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmxvb3AgJiYgIXN3aXBlci5wYXJhbXMucmV3aW5kKSByZXR1cm47XG4gICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgIGVtaXQoJ25hdmlnYXRpb25OZXh0Jyk7XG4gIH1cbiAgZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb247XG4gICAgc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uID0gY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZChzd2lwZXIsIHN3aXBlci5vcmlnaW5hbFBhcmFtcy5uYXZpZ2F0aW9uLCBzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24sIHtcbiAgICAgIG5leHRFbDogJ3N3aXBlci1idXR0b24tbmV4dCcsXG4gICAgICBwcmV2RWw6ICdzd2lwZXItYnV0dG9uLXByZXYnXG4gICAgfSk7XG4gICAgaWYgKCEocGFyYW1zLm5leHRFbCB8fCBwYXJhbXMucHJldkVsKSkgcmV0dXJuO1xuICAgIGxldCBuZXh0RWwgPSBnZXRFbChwYXJhbXMubmV4dEVsKTtcbiAgICBsZXQgcHJldkVsID0gZ2V0RWwocGFyYW1zLnByZXZFbCk7XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIubmF2aWdhdGlvbiwge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSk7XG4gICAgbmV4dEVsID0gbWFrZUVsZW1lbnRzQXJyYXkobmV4dEVsKTtcbiAgICBwcmV2RWwgPSBtYWtlRWxlbWVudHNBcnJheShwcmV2RWwpO1xuICAgIGNvbnN0IGluaXRCdXR0b24gPSAoZWwsIGRpcikgPT4ge1xuICAgICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3dpcGVyLmVuYWJsZWQgJiYgZWwpIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LmFkZCguLi5wYXJhbXMubG9ja0NsYXNzLnNwbGl0KCcgJykpO1xuICAgICAgfVxuICAgIH07XG4gICAgbmV4dEVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ25leHQnKSk7XG4gICAgcHJldkVsLmZvckVhY2goZWwgPT4gaW5pdEJ1dHRvbihlbCwgJ3ByZXYnKSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBjb25zdCBkZXN0cm95QnV0dG9uID0gKGVsLCBkaXIpID0+IHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZGlyID09PSAnbmV4dCcgPyBvbk5leHRDbGljayA6IG9uUHJldkNsaWNrKTtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgfTtcbiAgICBuZXh0RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAnbmV4dCcpKTtcbiAgICBwcmV2RWwuZm9yRWFjaChlbCA9PiBkZXN0cm95QnV0dG9uKGVsLCAncHJldicpKTtcbiAgfVxuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3RvRWRnZSBmcm9tRWRnZSBsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgbmV4dEVsLFxuICAgICAgcHJldkVsXG4gICAgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuICAgIG5leHRFbCA9IG1ha2VFbGVtZW50c0FycmF5KG5leHRFbCk7XG4gICAgcHJldkVsID0gbWFrZUVsZW1lbnRzQXJyYXkocHJldkVsKTtcbiAgICBpZiAoc3dpcGVyLmVuYWJsZWQpIHtcbiAgICAgIHVwZGF0ZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBbLi4ubmV4dEVsLCAuLi5wcmV2RWxdLmZpbHRlcihlbCA9PiAhIWVsKS5mb3JFYWNoKGVsID0+IGVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmxvY2tDbGFzcykpO1xuICB9KTtcbiAgb24oJ2NsaWNrJywgKF9zLCBlKSA9PiB7XG4gICAgbGV0IHtcbiAgICAgIG5leHRFbCxcbiAgICAgIHByZXZFbFxuICAgIH0gPSBzd2lwZXIubmF2aWdhdGlvbjtcbiAgICBuZXh0RWwgPSBtYWtlRWxlbWVudHNBcnJheShuZXh0RWwpO1xuICAgIHByZXZFbCA9IG1ha2VFbGVtZW50c0FycmF5KHByZXZFbCk7XG4gICAgY29uc3QgdGFyZ2V0RWwgPSBlLnRhcmdldDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGVPbkNsaWNrICYmICFwcmV2RWwuaW5jbHVkZXModGFyZ2V0RWwpICYmICFuZXh0RWwuaW5jbHVkZXModGFyZ2V0RWwpKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgKHN3aXBlci5wYWdpbmF0aW9uLmVsID09PSB0YXJnZXRFbCB8fCBzd2lwZXIucGFnaW5hdGlvbi5lbC5jb250YWlucyh0YXJnZXRFbCkpKSByZXR1cm47XG4gICAgICBsZXQgaXNIaWRkZW47XG4gICAgICBpZiAobmV4dEVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IG5leHRFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldkVsLmxlbmd0aCkge1xuICAgICAgICBpc0hpZGRlbiA9IHByZXZFbFswXS5jbGFzc0xpc3QuY29udGFpbnMoc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0hpZGRlbiA9PT0gdHJ1ZSkge1xuICAgICAgICBlbWl0KCduYXZpZ2F0aW9uU2hvdycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW1pdCgnbmF2aWdhdGlvbkhpZGUnKTtcbiAgICAgIH1cbiAgICAgIFsuLi5uZXh0RWwsIC4uLnByZXZFbF0uZmlsdGVyKGVsID0+ICEhZWwpLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnRvZ2dsZShzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpKTtcbiAgICB9XG4gIH0pO1xuICBjb25zdCBlbmFibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLm5hdmlnYXRpb25EaXNhYmxlZENsYXNzLnNwbGl0KCcgJykpO1xuICAgIGluaXQoKTtcbiAgICB1cGRhdGUoKTtcbiAgfTtcbiAgY29uc3QgZGlzYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LmFkZCguLi5zd2lwZXIucGFyYW1zLm5hdmlnYXRpb24ubmF2aWdhdGlvbkRpc2FibGVkQ2xhc3Muc3BsaXQoJyAnKSk7XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5uYXZpZ2F0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgdXBkYXRlLFxuICAgIGluaXQsXG4gICAgZGVzdHJveVxuICB9KTtcbn1cblxuZXhwb3J0IHsgTmF2aWdhdGlvbiBhcyBkZWZhdWx0IH07XG4iLCJmdW5jdGlvbiBjbGFzc2VzVG9TZWxlY3RvcihjbGFzc2VzKSB7XG4gIGlmIChjbGFzc2VzID09PSB2b2lkIDApIHtcbiAgICBjbGFzc2VzID0gJyc7XG4gIH1cbiAgcmV0dXJuIGAuJHtjbGFzc2VzLnRyaW0oKS5yZXBsYWNlKC8oW1xcLjohK1xcL10pL2csICdcXFxcJDEnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIC5yZXBsYWNlKC8gL2csICcuJyl9YDtcbn1cblxuZXhwb3J0IHsgY2xhc3Nlc1RvU2VsZWN0b3IgYXMgYyB9O1xuIiwiaW1wb3J0IHsgYyBhcyBjbGFzc2VzVG9TZWxlY3RvciB9IGZyb20gJy4uL3NoYXJlZC9jbGFzc2VzLXRvLXNlbGVjdG9yLm1qcyc7XG5pbXBvcnQgeyBjIGFzIGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQgfSBmcm9tICcuLi9zaGFyZWQvY3JlYXRlLWVsZW1lbnQtaWYtbm90LWRlZmluZWQubWpzJztcbmltcG9ydCB7IGYgYXMgZWxlbWVudE91dGVyU2l6ZSwgZyBhcyBlbGVtZW50SW5kZXgsIGEgYXMgZWxlbWVudFBhcmVudHMgfSBmcm9tICcuLi9zaGFyZWQvdXRpbHMubWpzJztcblxuZnVuY3Rpb24gUGFnaW5hdGlvbihfcmVmKSB7XG4gIGxldCB7XG4gICAgc3dpcGVyLFxuICAgIGV4dGVuZFBhcmFtcyxcbiAgICBvbixcbiAgICBlbWl0XG4gIH0gPSBfcmVmO1xuICBjb25zdCBwZnggPSAnc3dpcGVyLXBhZ2luYXRpb24nO1xuICBleHRlbmRQYXJhbXMoe1xuICAgIHBhZ2luYXRpb246IHtcbiAgICAgIGVsOiBudWxsLFxuICAgICAgYnVsbGV0RWxlbWVudDogJ3NwYW4nLFxuICAgICAgY2xpY2thYmxlOiBmYWxzZSxcbiAgICAgIGhpZGVPbkNsaWNrOiBmYWxzZSxcbiAgICAgIHJlbmRlckJ1bGxldDogbnVsbCxcbiAgICAgIHJlbmRlclByb2dyZXNzYmFyOiBudWxsLFxuICAgICAgcmVuZGVyRnJhY3Rpb246IG51bGwsXG4gICAgICByZW5kZXJDdXN0b206IG51bGwsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlOiBmYWxzZSxcbiAgICAgIHR5cGU6ICdidWxsZXRzJyxcbiAgICAgIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogbnVtYmVyID0+IG51bWJlcixcbiAgICAgIGZvcm1hdEZyYWN0aW9uVG90YWw6IG51bWJlciA9PiBudW1iZXIsXG4gICAgICBidWxsZXRDbGFzczogYCR7cGZ4fS1idWxsZXRgLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6IGAke3BmeH0tYnVsbGV0LWFjdGl2ZWAsXG4gICAgICBtb2RpZmllckNsYXNzOiBgJHtwZnh9LWAsXG4gICAgICBjdXJyZW50Q2xhc3M6IGAke3BmeH0tY3VycmVudGAsXG4gICAgICB0b3RhbENsYXNzOiBgJHtwZnh9LXRvdGFsYCxcbiAgICAgIGhpZGRlbkNsYXNzOiBgJHtwZnh9LWhpZGRlbmAsXG4gICAgICBwcm9ncmVzc2JhckZpbGxDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1maWxsYCxcbiAgICAgIHByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzczogYCR7cGZ4fS1wcm9ncmVzc2Jhci1vcHBvc2l0ZWAsXG4gICAgICBjbGlja2FibGVDbGFzczogYCR7cGZ4fS1jbGlja2FibGVgLFxuICAgICAgbG9ja0NsYXNzOiBgJHtwZnh9LWxvY2tgLFxuICAgICAgaG9yaXpvbnRhbENsYXNzOiBgJHtwZnh9LWhvcml6b250YWxgLFxuICAgICAgdmVydGljYWxDbGFzczogYCR7cGZ4fS12ZXJ0aWNhbGAsXG4gICAgICBwYWdpbmF0aW9uRGlzYWJsZWRDbGFzczogYCR7cGZ4fS1kaXNhYmxlZGBcbiAgICB9XG4gIH0pO1xuICBzd2lwZXIucGFnaW5hdGlvbiA9IHtcbiAgICBlbDogbnVsbCxcbiAgICBidWxsZXRzOiBbXVxuICB9O1xuICBsZXQgYnVsbGV0U2l6ZTtcbiAgbGV0IGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gIGNvbnN0IG1ha2VFbGVtZW50c0FycmF5ID0gZWwgPT4gKEFycmF5LmlzQXJyYXkoZWwpID8gZWwgOiBbZWxdKS5maWx0ZXIoZSA9PiAhIWUpO1xuICBmdW5jdGlvbiBpc1BhZ2luYXRpb25EaXNhYmxlZCgpIHtcbiAgICByZXR1cm4gIXN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgQXJyYXkuaXNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCkgJiYgc3dpcGVyLnBhZ2luYXRpb24uZWwubGVuZ3RoID09PSAwO1xuICB9XG4gIGZ1bmN0aW9uIHNldFNpZGVCdWxsZXRzKGJ1bGxldEVsLCBwb3NpdGlvbikge1xuICAgIGNvbnN0IHtcbiAgICAgIGJ1bGxldEFjdGl2ZUNsYXNzXG4gICAgfSA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIWJ1bGxldEVsKSByZXR1cm47XG4gICAgYnVsbGV0RWwgPSBidWxsZXRFbFtgJHtwb3NpdGlvbiA9PT0gJ3ByZXYnID8gJ3ByZXZpb3VzJyA6ICduZXh0J31FbGVtZW50U2libGluZ2BdO1xuICAgIGlmIChidWxsZXRFbCkge1xuICAgICAgYnVsbGV0RWwuY2xhc3NMaXN0LmFkZChgJHtidWxsZXRBY3RpdmVDbGFzc30tJHtwb3NpdGlvbn1gKTtcbiAgICAgIGJ1bGxldEVsID0gYnVsbGV0RWxbYCR7cG9zaXRpb24gPT09ICdwcmV2JyA/ICdwcmV2aW91cycgOiAnbmV4dCd9RWxlbWVudFNpYmxpbmdgXTtcbiAgICAgIGlmIChidWxsZXRFbCkge1xuICAgICAgICBidWxsZXRFbC5jbGFzc0xpc3QuYWRkKGAke2J1bGxldEFjdGl2ZUNsYXNzfS0ke3Bvc2l0aW9ufS0ke3Bvc2l0aW9ufWApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBvbkJ1bGxldENsaWNrKGUpIHtcbiAgICBjb25zdCBidWxsZXRFbCA9IGUudGFyZ2V0LmNsb3Nlc3QoY2xhc3Nlc1RvU2VsZWN0b3Ioc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmJ1bGxldENsYXNzKSk7XG4gICAgaWYgKCFidWxsZXRFbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgaW5kZXggPSBlbGVtZW50SW5kZXgoYnVsbGV0RWwpICogc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBpZiAoc3dpcGVyLnJlYWxJbmRleCA9PT0gaW5kZXgpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvTG9vcChpbmRleCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgY29uc3QgcnRsID0gc3dpcGVyLnJ0bDtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAvLyBDdXJyZW50L1RvdGFsXG4gICAgbGV0IGN1cnJlbnQ7XG4gICAgbGV0IHByZXZpb3VzSW5kZXg7XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3QgdG90YWwgPSBzd2lwZXIucGFyYW1zLmxvb3AgPyBNYXRoLmNlaWwoc2xpZGVzTGVuZ3RoIC8gc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJHcm91cCkgOiBzd2lwZXIuc25hcEdyaWQubGVuZ3RoO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgIHByZXZpb3VzSW5kZXggPSBzd2lwZXIucHJldmlvdXNSZWFsSW5kZXggfHwgMDtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSA/IE1hdGguZmxvb3Ioc3dpcGVyLnJlYWxJbmRleCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnJlYWxJbmRleDtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY3VycmVudCA9IHN3aXBlci5zbmFwSW5kZXg7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzU25hcEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBwcmV2aW91c0luZGV4ID0gc3dpcGVyLnByZXZpb3VzSW5kZXggfHwgMDtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcbiAgICB9XG4gICAgLy8gVHlwZXNcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgYnVsbGV0cyA9IHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHM7XG4gICAgICBsZXQgZmlyc3RJbmRleDtcbiAgICAgIGxldCBsYXN0SW5kZXg7XG4gICAgICBsZXQgbWlkSW5kZXg7XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGJ1bGxldFNpemUgPSBlbGVtZW50T3V0ZXJTaXplKGJ1bGxldHNbMF0sIHN3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0JywgdHJ1ZSk7XG4gICAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgICAgIHN1YkVsLnN0eWxlW3N3aXBlci5pc0hvcml6b250YWwoKSA/ICd3aWR0aCcgOiAnaGVpZ2h0J10gPSBgJHtidWxsZXRTaXplICogKHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KX1weGA7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyA+IDEgJiYgcHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ICs9IGN1cnJlbnQgLSAocHJldmlvdXNJbmRleCB8fCAwKTtcbiAgICAgICAgICBpZiAoZHluYW1pY0J1bGxldEluZGV4ID4gcGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpIHtcbiAgICAgICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgLSAxO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZHluYW1pY0J1bGxldEluZGV4IDwgMCkge1xuICAgICAgICAgICAgZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZmlyc3RJbmRleCA9IE1hdGgubWF4KGN1cnJlbnQgLSBkeW5hbWljQnVsbGV0SW5kZXgsIDApO1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG4gICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0RWwgPT4ge1xuICAgICAgICBjb25zdCBjbGFzc2VzVG9SZW1vdmUgPSBbLi4uWycnLCAnLW5leHQnLCAnLW5leHQtbmV4dCcsICctcHJldicsICctcHJldi1wcmV2JywgJy1tYWluJ10ubWFwKHN1ZmZpeCA9PiBgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9JHtzdWZmaXh9YCldLm1hcChzID0+IHR5cGVvZiBzID09PSAnc3RyaW5nJyAmJiBzLmluY2x1ZGVzKCcgJykgPyBzLnNwbGl0KCcgJykgOiBzKS5mbGF0KCk7XG4gICAgICAgIGJ1bGxldEVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3Nlc1RvUmVtb3ZlKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5mb3JFYWNoKGJ1bGxldCA9PiB7XG4gICAgICAgICAgY29uc3QgYnVsbGV0SW5kZXggPSBlbGVtZW50SW5kZXgoYnVsbGV0KTtcbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5pc0VsZW1lbnQpIHtcbiAgICAgICAgICAgIGJ1bGxldC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCAnYnVsbGV0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA+PSBmaXJzdEluZGV4ICYmIGJ1bGxldEluZGV4IDw9IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICBidWxsZXQuY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID09PSBmaXJzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChidWxsZXRJbmRleCA9PT0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgIHNldFNpZGVCdWxsZXRzKGJ1bGxldCwgJ25leHQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgYnVsbGV0ID0gYnVsbGV0c1tjdXJyZW50XTtcbiAgICAgICAgaWYgKGJ1bGxldCkge1xuICAgICAgICAgIGJ1bGxldC5jbGFzc0xpc3QuYWRkKC4uLnBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcy5zcGxpdCgnICcpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgICAgIGJ1bGxldHMuZm9yRWFjaCgoYnVsbGV0RWwsIGJ1bGxldEluZGV4KSA9PiB7XG4gICAgICAgICAgICBidWxsZXRFbC5zZXRBdHRyaWJ1dGUoJ3BhcnQnLCBidWxsZXRJbmRleCA9PT0gY3VycmVudCA/ICdidWxsZXQtYWN0aXZlJyA6ICdidWxsZXQnKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2ZpcnN0SW5kZXhdO1xuICAgICAgICAgIGNvbnN0IGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzW2xhc3RJbmRleF07XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChidWxsZXRzW2ldKSB7XG4gICAgICAgICAgICAgIGJ1bGxldHNbaV0uY2xhc3NMaXN0LmFkZCguLi5gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW1haW5gLnNwbGl0KCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhmaXJzdERpc3BsYXllZEJ1bGxldCwgJ3ByZXYnKTtcbiAgICAgICAgICBzZXRTaWRlQnVsbGV0cyhsYXN0RGlzcGxheWVkQnVsbGV0LCAnbmV4dCcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAgIGNvbnN0IGR5bmFtaWNCdWxsZXRzTGVuZ3RoID0gTWF0aC5taW4oYnVsbGV0cy5sZW5ndGgsIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgKyA0KTtcbiAgICAgICAgY29uc3QgYnVsbGV0c09mZnNldCA9IChidWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGggLSBidWxsZXRTaXplKSAvIDIgLSBtaWRJbmRleCAqIGJ1bGxldFNpemU7XG4gICAgICAgIGNvbnN0IG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBidWxsZXRzLmZvckVhY2goYnVsbGV0ID0+IHtcbiAgICAgICAgICBidWxsZXQuc3R5bGVbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gb2Zmc2V0UHJvcCA6ICd0b3AnXSA9IGAke2J1bGxldHNPZmZzZXR9cHhgO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWwuZm9yRWFjaCgoc3ViRWwsIHN1YkVsSW5kZXgpID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2ZyYWN0aW9uJykge1xuICAgICAgICBzdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5jdXJyZW50Q2xhc3MpKS5mb3JFYWNoKGZyYWN0aW9uRWwgPT4ge1xuICAgICAgICAgIGZyYWN0aW9uRWwudGV4dENvbnRlbnQgPSBwYXJhbXMuZm9ybWF0RnJhY3Rpb25DdXJyZW50KGN1cnJlbnQgKyAxKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnRvdGFsQ2xhc3MpKS5mb3JFYWNoKHRvdGFsRWwgPT4ge1xuICAgICAgICAgIHRvdGFsRWwudGV4dENvbnRlbnQgPSBwYXJhbXMuZm9ybWF0RnJhY3Rpb25Ub3RhbCh0b3RhbCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICAgIGxldCBwcm9ncmVzc2JhckRpcmVjdGlvbjtcbiAgICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgICAgcHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAndmVydGljYWwnIDogJ2hvcml6b250YWwnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzY2FsZSA9IChjdXJyZW50ICsgMSkgLyB0b3RhbDtcbiAgICAgICAgbGV0IHNjYWxlWCA9IDE7XG4gICAgICAgIGxldCBzY2FsZVkgPSAxO1xuICAgICAgICBpZiAocHJvZ3Jlc3NiYXJEaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJykge1xuICAgICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNjYWxlWSA9IHNjYWxlO1xuICAgICAgICB9XG4gICAgICAgIHN1YkVsLnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nlc1RvU2VsZWN0b3IocGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzKSkuZm9yRWFjaChwcm9ncmVzc0VsID0+IHtcbiAgICAgICAgICBwcm9ncmVzc0VsLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGVYKCR7c2NhbGVYfSkgc2NhbGVZKCR7c2NhbGVZfSlgO1xuICAgICAgICAgIHByb2dyZXNzRWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gYCR7c3dpcGVyLnBhcmFtcy5zcGVlZH1tc2A7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAgIHN1YkVsLmlubmVySFRNTCA9IHBhcmFtcy5yZW5kZXJDdXN0b20oc3dpcGVyLCBjdXJyZW50ICsgMSwgdG90YWwpO1xuICAgICAgICBpZiAoc3ViRWxJbmRleCA9PT0gMCkgZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN1YkVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChzdWJFbEluZGV4ID09PSAwKSBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgc3ViRWwpO1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uVXBkYXRlJywgc3ViRWwpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuZW5hYmxlZCkge1xuICAgICAgICBzdWJFbC5jbGFzc0xpc3Rbc3dpcGVyLmlzTG9ja2VkID8gJ2FkZCcgOiAncmVtb3ZlJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIC8vIFJlbmRlciBDb250YWluZXJcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuZ3JpZCAmJiBzd2lwZXIucGFyYW1zLmdyaWQucm93cyA+IDEgPyBzd2lwZXIuc2xpZGVzLmxlbmd0aCAvIE1hdGguY2VpbChzd2lwZXIucGFyYW1zLmdyaWQucm93cykgOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBsZXQgcGFnaW5hdGlvbkhUTUwgPSAnJztcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgbGV0IG51bWJlck9mQnVsbGV0cyA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbChzbGlkZXNMZW5ndGggLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5mcmVlTW9kZSAmJiBzd2lwZXIucGFyYW1zLmZyZWVNb2RlLmVuYWJsZWQgJiYgbnVtYmVyT2ZCdWxsZXRzID4gc2xpZGVzTGVuZ3RoKSB7XG4gICAgICAgIG51bWJlck9mQnVsbGV0cyA9IHNsaWRlc0xlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IGA8JHtwYXJhbXMuYnVsbGV0RWxlbWVudH0gJHtzd2lwZXIuaXNFbGVtZW50ID8gJ3BhcnQ9XCJidWxsZXRcIicgOiAnJ30gY2xhc3M9XCIke3BhcmFtcy5idWxsZXRDbGFzc31cIj48LyR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9PmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlckZyYWN0aW9uKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlckZyYWN0aW9uLmNhbGwoc3dpcGVyLCBwYXJhbXMuY3VycmVudENsYXNzLCBwYXJhbXMudG90YWxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLmN1cnJlbnRDbGFzc31cIj48L3NwYW4+YCArICcgLyAnICsgYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMudG90YWxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInKSB7XG4gICAgICBpZiAocGFyYW1zLnJlbmRlclByb2dyZXNzYmFyKSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gcGFyYW1zLnJlbmRlclByb2dyZXNzYmFyLmNhbGwoc3dpcGVyLCBwYXJhbXMucHJvZ3Jlc3NiYXJGaWxsQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzc31cIj48L3NwYW4+YDtcbiAgICAgIH1cbiAgICB9XG4gICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyA9IFtdO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgaWYgKHBhcmFtcy50eXBlICE9PSAnY3VzdG9tJykge1xuICAgICAgICBzdWJFbC5pbm5lckhUTUwgPSBwYWdpbmF0aW9uSFRNTCB8fCAnJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMucHVzaCguLi5zdWJFbC5xdWVyeVNlbGVjdG9yQWxsKGNsYXNzZXNUb1NlbGVjdG9yKHBhcmFtcy5idWxsZXRDbGFzcykpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICBlbWl0KCdwYWdpbmF0aW9uUmVuZGVyJywgZWxbMF0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbml0KCkge1xuICAgIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbiA9IGNyZWF0ZUVsZW1lbnRJZk5vdERlZmluZWQoc3dpcGVyLCBzd2lwZXIub3JpZ2luYWxQYXJhbXMucGFnaW5hdGlvbiwgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLCB7XG4gICAgICBlbDogJ3N3aXBlci1wYWdpbmF0aW9uJ1xuICAgIH0pO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCkgcmV0dXJuO1xuICAgIGxldCBlbDtcbiAgICBpZiAodHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgc3dpcGVyLmlzRWxlbWVudCkge1xuICAgICAgZWwgPSBzd2lwZXIuZWwucXVlcnlTZWxlY3RvcihwYXJhbXMuZWwpO1xuICAgIH1cbiAgICBpZiAoIWVsICYmIHR5cGVvZiBwYXJhbXMuZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbCA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHBhcmFtcy5lbCldO1xuICAgIH1cbiAgICBpZiAoIWVsKSB7XG4gICAgICBlbCA9IHBhcmFtcy5lbDtcbiAgICB9XG4gICAgaWYgKCFlbCB8fCBlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy51bmlxdWVOYXZFbGVtZW50cyAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJyAmJiBBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPiAxKSB7XG4gICAgICBlbCA9IFsuLi5zd2lwZXIuZWwucXVlcnlTZWxlY3RvckFsbChwYXJhbXMuZWwpXTtcbiAgICAgIC8vIGNoZWNrIGlmIGl0IGJlbG9uZ3MgdG8gYW5vdGhlciBuZXN0ZWQgU3dpcGVyXG4gICAgICBpZiAoZWwubGVuZ3RoID4gMSkge1xuICAgICAgICBlbCA9IGVsLmZpbHRlcihzdWJFbCA9PiB7XG4gICAgICAgICAgaWYgKGVsZW1lbnRQYXJlbnRzKHN1YkVsLCAnLnN3aXBlcicpWzBdICE9PSBzd2lwZXIuZWwpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSlbMF07XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGVsKSAmJiBlbC5sZW5ndGggPT09IDEpIGVsID0gZWxbMF07XG4gICAgT2JqZWN0LmFzc2lnbihzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgZWxcbiAgICB9KTtcbiAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICBlbC5mb3JFYWNoKHN1YkVsID0+IHtcbiAgICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ2J1bGxldHMnICYmIHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZCguLi4ocGFyYW1zLmNsaWNrYWJsZUNsYXNzIHx8ICcnKS5zcGxpdCgnICcpKTtcbiAgICAgIH1cbiAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLm1vZGlmaWVyQ2xhc3MgKyBwYXJhbXMudHlwZSk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJyAmJiBwYXJhbXMuZHluYW1pY0J1bGxldHMpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChgJHtwYXJhbXMubW9kaWZpZXJDbGFzc30ke3BhcmFtcy50eXBlfS1keW5hbWljYCk7XG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICAgIHBhcmFtcy5keW5hbWljTWFpbkJ1bGxldHMgPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicgJiYgcGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGUpIHtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LmFkZChwYXJhbXMucHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMuY2xpY2thYmxlKSB7XG4gICAgICAgIHN1YkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdWxsZXRDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoIXN3aXBlci5lbmFibGVkKSB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5hZGQocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgaWYgKGlzUGFnaW5hdGlvbkRpc2FibGVkKCkpIHJldHVybjtcbiAgICBsZXQgZWwgPSBzd2lwZXIucGFnaW5hdGlvbi5lbDtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiB7XG4gICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUocGFyYW1zLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMubW9kaWZpZXJDbGFzcyArIHBhcmFtcy50eXBlKTtcbiAgICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBwYXJhbXMuaG9yaXpvbnRhbENsYXNzIDogcGFyYW1zLnZlcnRpY2FsQ2xhc3MpO1xuICAgICAgICBpZiAocGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgICAgIHN1YkVsLmNsYXNzTGlzdC5yZW1vdmUoLi4uKHBhcmFtcy5jbGlja2FibGVDbGFzcyB8fCAnJykuc3BsaXQoJyAnKSk7XG4gICAgICAgICAgc3ViRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBvbkJ1bGxldENsaWNrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LnJlbW92ZSguLi5wYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3Muc3BsaXQoJyAnKSkpO1xuICB9XG4gIG9uKCdjaGFuZ2VEaXJlY3Rpb24nLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFnaW5hdGlvbiB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwpIHJldHVybjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb247XG4gICAgbGV0IHtcbiAgICAgIGVsXG4gICAgfSA9IHN3aXBlci5wYWdpbmF0aW9uO1xuICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgIGVsLmZvckVhY2goc3ViRWwgPT4ge1xuICAgICAgc3ViRWwuY2xhc3NMaXN0LnJlbW92ZShwYXJhbXMuaG9yaXpvbnRhbENsYXNzLCBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgICBzdWJFbC5jbGFzc0xpc3QuYWRkKHN3aXBlci5pc0hvcml6b250YWwoKSA/IHBhcmFtcy5ob3Jpem9udGFsQ2xhc3MgOiBwYXJhbXMudmVydGljYWxDbGFzcyk7XG4gICAgfSk7XG4gIH0pO1xuICBvbignaW5pdCcsICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmVuYWJsZWQgPT09IGZhbHNlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGRpc2FibGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5pdCgpO1xuICAgICAgcmVuZGVyKCk7XG4gICAgICB1cGRhdGUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignYWN0aXZlSW5kZXhDaGFuZ2UnLCAoKSA9PiB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIuc25hcEluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdXBkYXRlKCk7XG4gICAgfVxuICB9KTtcbiAgb24oJ3NuYXBJbmRleENoYW5nZScsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdzbmFwR3JpZExlbmd0aENoYW5nZScsICgpID0+IHtcbiAgICByZW5kZXIoKTtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRlc3Ryb3koKTtcbiAgfSk7XG4gIG9uKCdlbmFibGUgZGlzYWJsZScsICgpID0+IHtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0W3N3aXBlci5lbmFibGVkID8gJ3JlbW92ZScgOiAnYWRkJ10oc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmxvY2tDbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdsb2NrIHVubG9jaycsICgpID0+IHtcbiAgICB1cGRhdGUoKTtcbiAgfSk7XG4gIG9uKCdjbGljaycsIChfcywgZSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEVsID0gZS50YXJnZXQ7XG4gICAgY29uc3QgZWwgPSBtYWtlRWxlbWVudHNBcnJheShzd2lwZXIucGFnaW5hdGlvbi5lbCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5lbCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZU9uQ2xpY2sgJiYgZWwgJiYgZWwubGVuZ3RoID4gMCAmJiAhdGFyZ2V0RWwuY2xhc3NMaXN0LmNvbnRhaW5zKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzcykpIHtcbiAgICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiAoc3dpcGVyLm5hdmlnYXRpb24ubmV4dEVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5uZXh0RWwgfHwgc3dpcGVyLm5hdmlnYXRpb24ucHJldkVsICYmIHRhcmdldEVsID09PSBzd2lwZXIubmF2aWdhdGlvbi5wcmV2RWwpKSByZXR1cm47XG4gICAgICBjb25zdCBpc0hpZGRlbiA9IGVsWzBdLmNsYXNzTGlzdC5jb250YWlucyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgIGVtaXQoJ3BhZ2luYXRpb25TaG93Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbWl0KCdwYWdpbmF0aW9uSGlkZScpO1xuICAgICAgfVxuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QudG9nZ2xlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5oaWRkZW5DbGFzcykpO1xuICAgIH1cbiAgfSk7XG4gIGNvbnN0IGVuYWJsZSA9ICgpID0+IHtcbiAgICBzd2lwZXIuZWwuY2xhc3NMaXN0LnJlbW92ZShzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpO1xuICAgIGxldCB7XG4gICAgICBlbFxuICAgIH0gPSBzd2lwZXIucGFnaW5hdGlvbjtcbiAgICBpZiAoZWwpIHtcbiAgICAgIGVsID0gbWFrZUVsZW1lbnRzQXJyYXkoZWwpO1xuICAgICAgZWwuZm9yRWFjaChzdWJFbCA9PiBzdWJFbC5jbGFzc0xpc3QucmVtb3ZlKHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5wYWdpbmF0aW9uRGlzYWJsZWRDbGFzcykpO1xuICAgIH1cbiAgICBpbml0KCk7XG4gICAgcmVuZGVyKCk7XG4gICAgdXBkYXRlKCk7XG4gIH07XG4gIGNvbnN0IGRpc2FibGUgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLmNsYXNzTGlzdC5hZGQoc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLnBhZ2luYXRpb25EaXNhYmxlZENsYXNzKTtcbiAgICBsZXQge1xuICAgICAgZWxcbiAgICB9ID0gc3dpcGVyLnBhZ2luYXRpb247XG4gICAgaWYgKGVsKSB7XG4gICAgICBlbCA9IG1ha2VFbGVtZW50c0FycmF5KGVsKTtcbiAgICAgIGVsLmZvckVhY2goc3ViRWwgPT4gc3ViRWwuY2xhc3NMaXN0LmFkZChzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24ucGFnaW5hdGlvbkRpc2FibGVkQ2xhc3MpKTtcbiAgICB9XG4gICAgZGVzdHJveSgpO1xuICB9O1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5wYWdpbmF0aW9uLCB7XG4gICAgZW5hYmxlLFxuICAgIGRpc2FibGUsXG4gICAgcmVuZGVyLFxuICAgIHVwZGF0ZSxcbiAgICBpbml0LFxuICAgIGRlc3Ryb3lcbiAgfSk7XG59XG5cbmV4cG9ydCB7IFBhZ2luYXRpb24gYXMgZGVmYXVsdCB9O1xuIiwiaW1wb3J0IHsgZyBhcyBnZXREb2N1bWVudCB9IGZyb20gJy4uL3NoYXJlZC9zc3Itd2luZG93LmVzbS5tanMnO1xuXG4vKiBlc2xpbnQgbm8tdW5kZXJzY29yZS1kYW5nbGU6IFwib2ZmXCIgKi9cbi8qIGVzbGludCBuby11c2UtYmVmb3JlLWRlZmluZTogXCJvZmZcIiAqL1xuZnVuY3Rpb24gQXV0b3BsYXkoX3JlZikge1xuICBsZXQge1xuICAgIHN3aXBlcixcbiAgICBleHRlbmRQYXJhbXMsXG4gICAgb24sXG4gICAgZW1pdCxcbiAgICBwYXJhbXNcbiAgfSA9IF9yZWY7XG4gIHN3aXBlci5hdXRvcGxheSA9IHtcbiAgICBydW5uaW5nOiBmYWxzZSxcbiAgICBwYXVzZWQ6IGZhbHNlLFxuICAgIHRpbWVMZWZ0OiAwXG4gIH07XG4gIGV4dGVuZFBhcmFtcyh7XG4gICAgYXV0b3BsYXk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgZGVsYXk6IDMwMDAsXG4gICAgICB3YWl0Rm9yVHJhbnNpdGlvbjogdHJ1ZSxcbiAgICAgIGRpc2FibGVPbkludGVyYWN0aW9uOiBmYWxzZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICAgIHBhdXNlT25Nb3VzZUVudGVyOiBmYWxzZVxuICAgIH1cbiAgfSk7XG4gIGxldCB0aW1lb3V0O1xuICBsZXQgcmFmO1xuICBsZXQgYXV0b3BsYXlEZWxheVRvdGFsID0gcGFyYW1zICYmIHBhcmFtcy5hdXRvcGxheSA/IHBhcmFtcy5hdXRvcGxheS5kZWxheSA6IDMwMDA7XG4gIGxldCBhdXRvcGxheURlbGF5Q3VycmVudCA9IHBhcmFtcyAmJiBwYXJhbXMuYXV0b3BsYXkgPyBwYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiAzMDAwO1xuICBsZXQgYXV0b3BsYXlUaW1lTGVmdDtcbiAgbGV0IGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGxldCB3YXNQYXVzZWQ7XG4gIGxldCBpc1RvdWNoZWQ7XG4gIGxldCBwYXVzZWRCeVRvdWNoO1xuICBsZXQgdG91Y2hTdGFydFRpbWVvdXQ7XG4gIGxldCBzbGlkZUNoYW5nZWQ7XG4gIGxldCBwYXVzZWRCeUludGVyYWN0aW9uO1xuICBsZXQgcGF1c2VkQnlQb2ludGVyRW50ZXI7XG4gIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZChlKSB7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLndyYXBwZXJFbCkgcmV0dXJuO1xuICAgIGlmIChlLnRhcmdldCAhPT0gc3dpcGVyLndyYXBwZXJFbCkgcmV0dXJuO1xuICAgIHN3aXBlci53cmFwcGVyRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIG9uVHJhbnNpdGlvbkVuZCk7XG4gICAgaWYgKHBhdXNlZEJ5UG9pbnRlckVudGVyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlc3VtZSgpO1xuICB9XG4gIGNvbnN0IGNhbGNUaW1lTGVmdCA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgICAgd2FzUGF1c2VkID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHdhc1BhdXNlZCkge1xuICAgICAgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBhdXRvcGxheVRpbWVMZWZ0O1xuICAgICAgd2FzUGF1c2VkID0gZmFsc2U7XG4gICAgfVxuICAgIGNvbnN0IHRpbWVMZWZ0ID0gc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA/IGF1dG9wbGF5VGltZUxlZnQgOiBhdXRvcGxheVN0YXJ0VGltZSArIGF1dG9wbGF5RGVsYXlDdXJyZW50IC0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVMZWZ0ID0gdGltZUxlZnQ7XG4gICAgZW1pdCgnYXV0b3BsYXlUaW1lTGVmdCcsIHRpbWVMZWZ0LCB0aW1lTGVmdCAvIGF1dG9wbGF5RGVsYXlUb3RhbCk7XG4gICAgcmFmID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgIGNhbGNUaW1lTGVmdCgpO1xuICAgIH0pO1xuICB9O1xuICBjb25zdCBnZXRTbGlkZURlbGF5ID0gKCkgPT4ge1xuICAgIGxldCBhY3RpdmVTbGlkZUVsO1xuICAgIGlmIChzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCkge1xuICAgICAgYWN0aXZlU2xpZGVFbCA9IHN3aXBlci5zbGlkZXMuZmlsdGVyKHNsaWRlRWwgPT4gc2xpZGVFbC5jbGFzc0xpc3QuY29udGFpbnMoJ3N3aXBlci1zbGlkZS1hY3RpdmUnKSlbMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzW3N3aXBlci5hY3RpdmVJbmRleF07XG4gICAgfVxuICAgIGlmICghYWN0aXZlU2xpZGVFbCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBjb25zdCBjdXJyZW50U2xpZGVEZWxheSA9IHBhcnNlSW50KGFjdGl2ZVNsaWRlRWwuZ2V0QXR0cmlidXRlKCdkYXRhLXN3aXBlci1hdXRvcGxheScpLCAxMCk7XG4gICAgcmV0dXJuIGN1cnJlbnRTbGlkZURlbGF5O1xuICB9O1xuICBjb25zdCBydW4gPSBkZWxheUZvcmNlID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIGNhbGNUaW1lTGVmdCgpO1xuICAgIGxldCBkZWxheSA9IHR5cGVvZiBkZWxheUZvcmNlID09PSAndW5kZWZpbmVkJyA/IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXkgOiBkZWxheUZvcmNlO1xuICAgIGF1dG9wbGF5RGVsYXlUb3RhbCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgYXV0b3BsYXlEZWxheUN1cnJlbnQgPSBzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRlbGF5O1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZURlbGF5ID0gZ2V0U2xpZGVEZWxheSgpO1xuICAgIGlmICghTnVtYmVyLmlzTmFOKGN1cnJlbnRTbGlkZURlbGF5KSAmJiBjdXJyZW50U2xpZGVEZWxheSA+IDAgJiYgdHlwZW9mIGRlbGF5Rm9yY2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBkZWxheSA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgICAgYXV0b3BsYXlEZWxheVRvdGFsID0gY3VycmVudFNsaWRlRGVsYXk7XG4gICAgICBhdXRvcGxheURlbGF5Q3VycmVudCA9IGN1cnJlbnRTbGlkZURlbGF5O1xuICAgIH1cbiAgICBhdXRvcGxheVRpbWVMZWZ0ID0gZGVsYXk7XG4gICAgY29uc3Qgc3BlZWQgPSBzd2lwZXIucGFyYW1zLnNwZWVkO1xuICAgIGNvbnN0IHByb2NlZWQgPSAoKSA9PiB7XG4gICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgIGlmICghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCB8fCBzd2lwZXIucGFyYW1zLnJld2luZCkge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICAgIGVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzd2lwZXIuaXNFbmQgfHwgc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5wYXJhbXMucmV3aW5kKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlTmV4dChzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIGlmICghc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5zdG9wT25MYXN0U2xpZGUpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbygwLCBzcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuY3NzTW9kZSkge1xuICAgICAgICBhdXRvcGxheVN0YXJ0VGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICAgIHJ1bigpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChkZWxheSA+IDApIHtcbiAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgcHJvY2VlZCgpO1xuICAgICAgfSwgZGVsYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICBwcm9jZWVkKCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICByZXR1cm4gZGVsYXk7XG4gIH07XG4gIGNvbnN0IHN0YXJ0ID0gKCkgPT4ge1xuICAgIGF1dG9wbGF5U3RhcnRUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIHJ1bigpO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RhcnQnKTtcbiAgfTtcbiAgY29uc3Qgc3RvcCA9ICgpID0+IHtcbiAgICBzd2lwZXIuYXV0b3BsYXkucnVubmluZyA9IGZhbHNlO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWYpO1xuICAgIGVtaXQoJ2F1dG9wbGF5U3RvcCcpO1xuICB9O1xuICBjb25zdCBwYXVzZSA9IChpbnRlcm5hbCwgcmVzZXQpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgaWYgKCFpbnRlcm5hbCkge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHByb2NlZWQgPSAoKSA9PiB7XG4gICAgICBlbWl0KCdhdXRvcGxheVBhdXNlJyk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS53YWl0Rm9yVHJhbnNpdGlvbikge1xuICAgICAgICBzd2lwZXIud3JhcHBlckVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBvblRyYW5zaXRpb25FbmQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdW1lKCk7XG4gICAgICB9XG4gICAgfTtcbiAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gdHJ1ZTtcbiAgICBpZiAocmVzZXQpIHtcbiAgICAgIGlmIChzbGlkZUNoYW5nZWQpIHtcbiAgICAgICAgYXV0b3BsYXlUaW1lTGVmdCA9IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgICB9XG4gICAgICBzbGlkZUNoYW5nZWQgPSBmYWxzZTtcbiAgICAgIHByb2NlZWQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgZGVsYXkgPSBhdXRvcGxheVRpbWVMZWZ0IHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgYXV0b3BsYXlUaW1lTGVmdCA9IGRlbGF5IC0gKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gYXV0b3BsYXlTdGFydFRpbWUpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgYXV0b3BsYXlUaW1lTGVmdCA8IDAgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGlmIChhdXRvcGxheVRpbWVMZWZ0IDwgMCkgYXV0b3BsYXlUaW1lTGVmdCA9IDA7XG4gICAgcHJvY2VlZCgpO1xuICB9O1xuICBjb25zdCByZXN1bWUgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5pc0VuZCAmJiBhdXRvcGxheVRpbWVMZWZ0IDwgMCAmJiAhc3dpcGVyLnBhcmFtcy5sb29wIHx8IHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgYXV0b3BsYXlTdGFydFRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICBpZiAocGF1c2VkQnlJbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IGZhbHNlO1xuICAgICAgcnVuKGF1dG9wbGF5VGltZUxlZnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBydW4oKTtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgIGVtaXQoJ2F1dG9wbGF5UmVzdW1lJyk7XG4gIH07XG4gIGNvbnN0IG9uVmlzaWJpbGl0eUNoYW5nZSA9ICgpID0+IHtcbiAgICBpZiAoc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHJldHVybjtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgaWYgKGRvY3VtZW50LnZpc2liaWxpdHlTdGF0ZSA9PT0gJ2hpZGRlbicpIHtcbiAgICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSB0cnVlO1xuICAgICAgcGF1c2UodHJ1ZSk7XG4gICAgfVxuICAgIGlmIChkb2N1bWVudC52aXNpYmlsaXR5U3RhdGUgPT09ICd2aXNpYmxlJykge1xuICAgICAgcmVzdW1lKCk7XG4gICAgfVxuICB9O1xuICBjb25zdCBvblBvaW50ZXJFbnRlciA9IGUgPT4ge1xuICAgIGlmIChlLnBvaW50ZXJUeXBlICE9PSAnbW91c2UnKSByZXR1cm47XG4gICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgcGF1c2VkQnlQb2ludGVyRW50ZXIgPSB0cnVlO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nIHx8IHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICBwYXVzZSh0cnVlKTtcbiAgfTtcbiAgY29uc3Qgb25Qb2ludGVyTGVhdmUgPSBlID0+IHtcbiAgICBpZiAoZS5wb2ludGVyVHlwZSAhPT0gJ21vdXNlJykgcmV0dXJuO1xuICAgIHBhdXNlZEJ5UG9pbnRlckVudGVyID0gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHtcbiAgICAgIHJlc3VtZSgpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgYXR0YWNoTW91c2VFdmVudHMgPSAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkucGF1c2VPbk1vdXNlRW50ZXIpIHtcbiAgICAgIHN3aXBlci5lbC5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyZW50ZXInLCBvblBvaW50ZXJFbnRlcik7XG4gICAgICBzd2lwZXIuZWwuYWRkRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxlYXZlJywgb25Qb2ludGVyTGVhdmUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgZGV0YWNoTW91c2VFdmVudHMgPSAoKSA9PiB7XG4gICAgc3dpcGVyLmVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicsIG9uUG9pbnRlckVudGVyKTtcbiAgICBzd2lwZXIuZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcmxlYXZlJywgb25Qb2ludGVyTGVhdmUpO1xuICB9O1xuICBjb25zdCBhdHRhY2hEb2N1bWVudEV2ZW50cyA9ICgpID0+IHtcbiAgICBjb25zdCBkb2N1bWVudCA9IGdldERvY3VtZW50KCk7XG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndmlzaWJpbGl0eWNoYW5nZScsIG9uVmlzaWJpbGl0eUNoYW5nZSk7XG4gIH07XG4gIGNvbnN0IGRldGFjaERvY3VtZW50RXZlbnRzID0gKCkgPT4ge1xuICAgIGNvbnN0IGRvY3VtZW50ID0gZ2V0RG9jdW1lbnQoKTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCd2aXNpYmlsaXR5Y2hhbmdlJywgb25WaXNpYmlsaXR5Q2hhbmdlKTtcbiAgfTtcbiAgb24oJ2luaXQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgYXR0YWNoTW91c2VFdmVudHMoKTtcbiAgICAgIGF0dGFjaERvY3VtZW50RXZlbnRzKCk7XG4gICAgICBzdGFydCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdkZXN0cm95JywgKCkgPT4ge1xuICAgIGRldGFjaE1vdXNlRXZlbnRzKCk7XG4gICAgZGV0YWNoRG9jdW1lbnRFdmVudHMoKTtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignX2ZyZWVNb2RlU3RhdGljUmVsZWFzZScsICgpID0+IHtcbiAgICBpZiAocGF1c2VkQnlUb3VjaCB8fCBwYXVzZWRCeUludGVyYWN0aW9uKSB7XG4gICAgICByZXN1bWUoKTtcbiAgICB9XG4gIH0pO1xuICBvbignX2ZyZWVNb2RlTm9Nb21lbnR1bVJlbGVhc2UnLCAoKSA9PiB7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICBwYXVzZSh0cnVlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcCgpO1xuICAgIH1cbiAgfSk7XG4gIG9uKCdiZWZvcmVUcmFuc2l0aW9uU3RhcnQnLCAoX3MsIHNwZWVkLCBpbnRlcm5hbCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChpbnRlcm5hbCB8fCAhc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2UodHJ1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0b3AoKTtcbiAgICB9XG4gIH0pO1xuICBvbignc2xpZGVyRmlyc3RNb3ZlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICBzdG9wKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlzVG91Y2hlZCA9IHRydWU7XG4gICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgIHBhdXNlZEJ5SW50ZXJhY3Rpb24gPSBmYWxzZTtcbiAgICB0b3VjaFN0YXJ0VGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgcGF1c2VkQnlJbnRlcmFjdGlvbiA9IHRydWU7XG4gICAgICBwYXVzZWRCeVRvdWNoID0gdHJ1ZTtcbiAgICAgIHBhdXNlKHRydWUpO1xuICAgIH0sIDIwMCk7XG4gIH0pO1xuICBvbigndG91Y2hFbmQnLCAoKSA9PiB7XG4gICAgaWYgKHN3aXBlci5kZXN0cm95ZWQgfHwgIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nIHx8ICFpc1RvdWNoZWQpIHJldHVybjtcbiAgICBjbGVhclRpbWVvdXQodG91Y2hTdGFydFRpbWVvdXQpO1xuICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kaXNhYmxlT25JbnRlcmFjdGlvbikge1xuICAgICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgICAgaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChwYXVzZWRCeVRvdWNoICYmIHN3aXBlci5wYXJhbXMuY3NzTW9kZSkgcmVzdW1lKCk7XG4gICAgcGF1c2VkQnlUb3VjaCA9IGZhbHNlO1xuICAgIGlzVG91Y2hlZCA9IGZhbHNlO1xuICB9KTtcbiAgb24oJ3NsaWRlQ2hhbmdlJywgKCkgPT4ge1xuICAgIGlmIChzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuO1xuICAgIHNsaWRlQ2hhbmdlZCA9IHRydWU7XG4gIH0pO1xuICBPYmplY3QuYXNzaWduKHN3aXBlci5hdXRvcGxheSwge1xuICAgIHN0YXJ0LFxuICAgIHN0b3AsXG4gICAgcGF1c2UsXG4gICAgcmVzdW1lXG4gIH0pO1xufVxuXG5leHBvcnQgeyBBdXRvcGxheSBhcyBkZWZhdWx0IH07XG4iXSwibmFtZXMiOlsiaXNPYmplY3QiLCJvYmoiLCJleHRlbmQiLCJ0YXJnZXQiLCJzcmMiLCJrZXkiLCJzc3JEb2N1bWVudCIsImdldERvY3VtZW50IiwiZG9jIiwic3NyV2luZG93IiwiY2FsbGJhY2siLCJpZCIsImdldFdpbmRvdyIsIndpbiIsImNsYXNzZXNUb1Rva2VucyIsImNsYXNzZXMiLCJjIiwiZGVsZXRlUHJvcHMiLCJvYmplY3QiLCJuZXh0VGljayIsImRlbGF5Iiwibm93IiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImVsIiwid2luZG93Iiwic3R5bGUiLCJnZXRUcmFuc2xhdGUiLCJheGlzIiwibWF0cml4IiwiY3VyVHJhbnNmb3JtIiwidHJhbnNmb3JtTWF0cml4IiwiY3VyU3R5bGUiLCJhIiwibyIsImlzTm9kZSIsIm5vZGUiLCJ0byIsIm5vRXh0ZW5kIiwibmV4dFNvdXJjZSIsImtleXNBcnJheSIsIm5leHRJbmRleCIsImxlbiIsIm5leHRLZXkiLCJkZXNjIiwic2V0Q1NTUHJvcGVydHkiLCJ2YXJOYW1lIiwidmFyVmFsdWUiLCJhbmltYXRlQ1NTTW9kZVNjcm9sbCIsIl9yZWYiLCJzd2lwZXIiLCJ0YXJnZXRQb3NpdGlvbiIsInNpZGUiLCJzdGFydFBvc2l0aW9uIiwic3RhcnRUaW1lIiwidGltZSIsImR1cmF0aW9uIiwiZGlyIiwiaXNPdXRPZkJvdW5kIiwiY3VycmVudCIsImFuaW1hdGUiLCJwcm9ncmVzcyIsImVhc2VQcm9ncmVzcyIsImN1cnJlbnRQb3NpdGlvbiIsImdldFNsaWRlVHJhbnNmb3JtRWwiLCJzbGlkZUVsIiwiZWxlbWVudENoaWxkcmVuIiwiZWxlbWVudCIsInNlbGVjdG9yIiwic2hvd1dhcm5pbmciLCJ0ZXh0IiwiY3JlYXRlRWxlbWVudCIsInRhZyIsImVsZW1lbnRQcmV2QWxsIiwicHJldkVscyIsInByZXYiLCJlbGVtZW50TmV4dEFsbCIsIm5leHRFbHMiLCJuZXh0IiwiZWxlbWVudFN0eWxlIiwicHJvcCIsImVsZW1lbnRJbmRleCIsImNoaWxkIiwiZWxlbWVudFBhcmVudHMiLCJwYXJlbnRzIiwicGFyZW50IiwiZWxlbWVudFRyYW5zaXRpb25FbmQiLCJmaXJlQ2FsbEJhY2siLCJlIiwiZWxlbWVudE91dGVyU2l6ZSIsInNpemUiLCJpbmNsdWRlTWFyZ2lucyIsInN1cHBvcnQiLCJjYWxjU3VwcG9ydCIsImRvY3VtZW50IiwiZ2V0U3VwcG9ydCIsImRldmljZUNhY2hlZCIsImNhbGNEZXZpY2UiLCJfdGVtcCIsInVzZXJBZ2VudCIsInBsYXRmb3JtIiwidWEiLCJkZXZpY2UiLCJzY3JlZW5XaWR0aCIsInNjcmVlbkhlaWdodCIsImFuZHJvaWQiLCJpcGFkIiwiaXBvZCIsImlwaG9uZSIsIndpbmRvd3MiLCJtYWNvcyIsImlQYWRTY3JlZW5zIiwiZ2V0RGV2aWNlIiwib3ZlcnJpZGVzIiwiYnJvd3NlciIsImNhbGNCcm93c2VyIiwibmVlZFBlcnNwZWN0aXZlRml4IiwiaXNTYWZhcmkiLCJtYWpvciIsIm1pbm9yIiwibnVtIiwiZ2V0QnJvd3NlciIsIlJlc2l6ZSIsIm9uIiwiZW1pdCIsIm9ic2VydmVyIiwiYW5pbWF0aW9uRnJhbWUiLCJyZXNpemVIYW5kbGVyIiwiY3JlYXRlT2JzZXJ2ZXIiLCJlbnRyaWVzIiwid2lkdGgiLCJoZWlnaHQiLCJuZXdXaWR0aCIsIm5ld0hlaWdodCIsIl9yZWYyIiwiY29udGVudEJveFNpemUiLCJjb250ZW50UmVjdCIsInJlbW92ZU9ic2VydmVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiT2JzZXJ2ZXIiLCJleHRlbmRQYXJhbXMiLCJvYnNlcnZlcnMiLCJhdHRhY2giLCJvcHRpb25zIiwiT2JzZXJ2ZXJGdW5jIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJpbml0IiwiY29udGFpbmVyUGFyZW50cyIsImkiLCJkZXN0cm95IiwiZXZlbnRzRW1pdHRlciIsImV2ZW50cyIsImhhbmRsZXIiLCJwcmlvcml0eSIsInNlbGYiLCJtZXRob2QiLCJldmVudCIsIm9uY2VIYW5kbGVyIiwiX2xlbiIsImFyZ3MiLCJfa2V5IiwiaW5kZXgiLCJldmVudEhhbmRsZXIiLCJkYXRhIiwiY29udGV4dCIsIl9sZW4yIiwiX2tleTIiLCJ1cGRhdGVTaXplIiwidXBkYXRlU2xpZGVzIiwiZ2V0RGlyZWN0aW9uUHJvcGVydHlWYWx1ZSIsImxhYmVsIiwicGFyYW1zIiwid3JhcHBlckVsIiwic2xpZGVzRWwiLCJzd2lwZXJTaXplIiwicnRsIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJwcmV2aW91c1NsaWRlc0xlbmd0aCIsInNsaWRlcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwicHJldmlvdXNTbmFwR3JpZExlbmd0aCIsInByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwiZ3JpZEVuYWJsZWQiLCJzbGlkZVNpemUiLCJzaG91bGRSZXNldFNsaWRlU2l6ZSIsInNsaWRlIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiYm94U2l6aW5nIiwiY2xpZW50V2lkdGgiLCJvZmZzZXRXaWR0aCIsIm5ld1NsaWRlc0dyaWQiLCJzbGlkZXNHcmlkSXRlbSIsImdyb3VwcyIsImdyb3VwU2l6ZSIsIl8iLCJzbGlkZUluZGV4IiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwibWF4U25hcCIsInNuYXAiLCJhbGxTbGlkZXNPZmZzZXQiLCJzbmFwSW5kZXgiLCJhZGRUb1NuYXBHcmlkIiwiYWRkVG9TbGlkZXNHcmlkIiwidiIsImJhY2tGYWNlSGlkZGVuQ2xhc3MiLCJoYXNDbGFzc0JhY2tmYWNlQ2xhc3NBZGRlZCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJzcGVlZCIsImFjdGl2ZVNsaWRlcyIsImdldFNsaWRlQnlJbmRleCIsInVwZGF0ZVNsaWRlc09mZnNldCIsIm1pbnVzT2Zmc2V0IiwidXBkYXRlU2xpZGVzUHJvZ3Jlc3MiLCJ0cmFuc2xhdGUiLCJvZmZzZXRDZW50ZXIiLCJzbGlkZU9mZnNldCIsInNsaWRlUHJvZ3Jlc3MiLCJvcmlnaW5hbFNsaWRlUHJvZ3Jlc3MiLCJzbGlkZUJlZm9yZSIsInNsaWRlQWZ0ZXIiLCJpc0Z1bGx5VmlzaWJsZSIsInVwZGF0ZVByb2dyZXNzIiwibXVsdGlwbGllciIsInRyYW5zbGF0ZXNEaWZmIiwiaXNCZWdpbm5pbmciLCJpc0VuZCIsInByb2dyZXNzTG9vcCIsIndhc0JlZ2lubmluZyIsIndhc0VuZCIsImlzQmVnaW5uaW5nUm91bmRlZCIsImlzRW5kUm91bmRlZCIsImZpcnN0U2xpZGVJbmRleCIsImxhc3RTbGlkZUluZGV4IiwiZmlyc3RTbGlkZVRyYW5zbGF0ZSIsImxhc3RTbGlkZVRyYW5zbGF0ZSIsInRyYW5zbGF0ZU1heCIsInRyYW5zbGF0ZUFicyIsInVwZGF0ZVNsaWRlc0NsYXNzZXMiLCJhY3RpdmVJbmRleCIsImdldEZpbHRlcmVkU2xpZGUiLCJhY3RpdmVTbGlkZSIsInByZXZTbGlkZSIsIm5leHRTbGlkZSIsInByb2Nlc3NMYXp5UHJlbG9hZGVyIiwiaW1hZ2VFbCIsInNsaWRlU2VsZWN0b3IiLCJsYXp5RWwiLCJ1bmxhenkiLCJwcmVsb2FkIiwiYW1vdW50Iiwic2xpZGVzUGVyVmlldyIsImFjdGl2ZUNvbHVtbiIsInByZWxvYWRDb2x1bW5zIiwic2xpZGVJbmRleExhc3RJblZpZXciLCJyZWFsSW5kZXgiLCJnZXRBY3RpdmVJbmRleEJ5VHJhbnNsYXRlIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4IiwiZ2V0VmlydHVhbFJlYWxJbmRleCIsImFJbmRleCIsInNraXAiLCJmaXJzdFNsaWRlSW5Db2x1bW4iLCJhY3RpdmVTbGlkZUluZGV4IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwicGF0aCIsInBhdGhFbCIsInNsaWRlRm91bmQiLCJ1cGRhdGUiLCJnZXRTd2lwZXJUcmFuc2xhdGUiLCJjdXJyZW50VHJhbnNsYXRlIiwic2V0VHJhbnNsYXRlIiwiYnlDb250cm9sbGVyIiwieCIsInkiLCJ6IiwibmV3UHJvZ3Jlc3MiLCJtaW5UcmFuc2xhdGUiLCJtYXhUcmFuc2xhdGUiLCJ0cmFuc2xhdGVUbyIsInJ1bkNhbGxiYWNrcyIsInRyYW5zbGF0ZUJvdW5kcyIsImludGVybmFsIiwibmV3VHJhbnNsYXRlIiwiaXNIIiwic2V0VHJhbnNpdGlvbiIsInRyYW5zaXRpb25FbWl0IiwiZGlyZWN0aW9uIiwic3RlcCIsInRyYW5zaXRpb25TdGFydCIsInRyYW5zaXRpb25FbmQiLCJ0cmFuc2l0aW9uIiwic2xpZGVUbyIsImluaXRpYWwiLCJlbmFibGVkIiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRHcmlkIiwibm9ybWFsaXplZEdyaWROZXh0IiwidCIsInNsaWRlVG9Mb29wIiwibmV3SW5kZXgiLCJ0YXJnZXRTbGlkZUluZGV4IiwiY29scyIsImNlbnRlcmVkU2xpZGVzIiwibmVlZExvb3BGaXgiLCJzbGlkZU5leHQiLCJhbmltYXRpbmciLCJwZXJHcm91cCIsImluY3JlbWVudCIsInNsaWRlUHJldiIsInJ0bFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZSIsInZhbCIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwicHJldlNuYXBJbmRleCIsInByZXZJbmRleCIsImxhc3RJbmRleCIsInNsaWRlUmVzZXQiLCJzbGlkZVRvQ2xvc2VzdCIsInRocmVzaG9sZCIsImN1cnJlbnRTbmFwIiwibmV4dFNuYXAiLCJzbGlkZVRvQ2xpY2tlZFNsaWRlIiwic2xpZGVUb0luZGV4IiwibG9vcENyZWF0ZSIsInNsaWRlUmVhbEluZGV4IiwiaW5pdFNsaWRlcyIsInNsaWRlc1Blckdyb3VwIiwic2hvdWxkRmlsbEdyb3VwIiwic2hvdWxkRmlsbEdyaWQiLCJhZGRCbGFua1NsaWRlcyIsImFtb3VudE9mU2xpZGVzIiwic2xpZGVzVG9BZGQiLCJsb29wRml4IiwiYnlNb3VzZXdoZWVsIiwiYWxsb3dTbGlkZVByZXYiLCJhbGxvd1NsaWRlTmV4dCIsImxvb3BlZFNsaWRlcyIsInByZXBlbmRTbGlkZXNJbmRleGVzIiwiYXBwZW5kU2xpZGVzSW5kZXhlcyIsImlzTmV4dCIsImlzUHJldiIsInNsaWRlc1ByZXBlbmRlZCIsInNsaWRlc0FwcGVuZGVkIiwiYWN0aXZlQ29sSW5kZXhXaXRoU2hpZnQiLCJjb2xJbmRleFRvUHJlcGVuZCIsImN1cnJlbnRTbGlkZVRyYW5zbGF0ZSIsImRpZmYiLCJzaGlmdCIsImxvb3BQYXJhbXMiLCJsb29wRGVzdHJveSIsIm5ld1NsaWRlc09yZGVyIiwibG9vcCIsInNldEdyYWJDdXJzb3IiLCJtb3ZpbmciLCJ1bnNldEdyYWJDdXJzb3IiLCJncmFiQ3Vyc29yIiwiY2xvc2VzdEVsZW1lbnQiLCJiYXNlIiwiX19jbG9zZXN0RnJvbSIsImZvdW5kIiwicHJldmVudEVkZ2VTd2lwZSIsInN0YXJ0WCIsImVkZ2VTd2lwZURldGVjdGlvbiIsImVkZ2VTd2lwZVRocmVzaG9sZCIsIm9uVG91Y2hTdGFydCIsInRvdWNoZXMiLCJ0YXJnZXRFbCIsInN3aXBpbmdDbGFzc0hhc1ZhbHVlIiwiZXZlbnRQYXRoIiwibm9Td2lwaW5nU2VsZWN0b3IiLCJpc1RhcmdldFNoYWRvdyIsInN0YXJ0WSIsInByZXZlbnREZWZhdWx0Iiwic2hvdWxkUHJldmVudERlZmF1bHQiLCJvblRvdWNoTW92ZSIsInRhcmdldFRvdWNoIiwicGFnZVgiLCJwYWdlWSIsImRpZmZYIiwiZGlmZlkiLCJ0b3VjaEFuZ2xlIiwidG91Y2hlc0RpZmYiLCJwcmV2VG91Y2hlc0RpcmVjdGlvbiIsImlzTG9vcCIsImFsbG93TG9vcEZpeCIsImV2dCIsImxvb3BGaXhlZCIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJvblRvdWNoRW5kIiwidG91Y2hFbmRUaW1lIiwidGltZURpZmYiLCJwYXRoVHJlZSIsImN1cnJlbnRQb3MiLCJzd2lwZVRvTGFzdCIsInN0b3BJbmRleCIsInJld2luZEZpcnN0SW5kZXgiLCJyZXdpbmRMYXN0SW5kZXgiLCJyYXRpbyIsIm9uUmVzaXplIiwiaXNWaXJ0dWFsTG9vcCIsIm9uQ2xpY2siLCJvblNjcm9sbCIsIm9uTG9hZCIsIm9uRG9jdW1lbnRUb3VjaFN0YXJ0IiwiY2FwdHVyZSIsImRvbU1ldGhvZCIsInN3aXBlck1ldGhvZCIsImF0dGFjaEV2ZW50cyIsImRldGFjaEV2ZW50cyIsImV2ZW50cyQxIiwiaXNHcmlkRW5hYmxlZCIsInNldEJyZWFrcG9pbnQiLCJpbml0aWFsaXplZCIsImJyZWFrcG9pbnRzIiwiYnJlYWtwb2ludCIsImJyZWFrcG9pbnRQYXJhbXMiLCJ3YXNNdWx0aVJvdyIsImlzTXVsdGlSb3ciLCJ3YXNFbmFibGVkIiwid2FzTW9kdWxlRW5hYmxlZCIsImlzTW9kdWxlRW5hYmxlZCIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsIndhc0xvb3AiLCJpc0VuYWJsZWQiLCJoYXNMb29wIiwiZ2V0QnJlYWtwb2ludCIsImNvbnRhaW5lckVsIiwiY3VycmVudEhlaWdodCIsInBvaW50cyIsInBvaW50IiwibWluUmF0aW8iLCJiIiwidmFsdWUiLCJwcmVwYXJlQ2xhc3NlcyIsInByZWZpeCIsInJlc3VsdENsYXNzZXMiLCJpdGVtIiwiY2xhc3NOYW1lcyIsImFkZENsYXNzZXMiLCJzdWZmaXhlcyIsInJlbW92ZUNsYXNzZXMiLCJjaGVja092ZXJmbG93Iiwid2FzTG9ja2VkIiwic2xpZGVzT2Zmc2V0QmVmb3JlIiwibGFzdFNsaWRlUmlnaHRFZGdlIiwiY2hlY2tPdmVyZmxvdyQxIiwiZGVmYXVsdHMiLCJtb2R1bGVFeHRlbmRQYXJhbXMiLCJhbGxNb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1OYW1lIiwibW9kdWxlUGFyYW1zIiwicHJvdG90eXBlcyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIkMSIsIlN3aXBlciIsInN3aXBlcnMiLCJuZXdQYXJhbXMiLCJtb2QiLCJzd2lwZXJQYXJhbXMiLCJldmVudE5hbWUiLCJwcm9wZXJ0eSIsIm1pbiIsImNscyIsImNsYXNzTmFtZSIsInVwZGF0ZXMiLCJ2aWV3IiwiZXhhY3QiLCJzcHYiLCJicmVha0xvb3AiLCJ0cmFuc2xhdGVWYWx1ZSIsInRyYW5zbGF0ZWQiLCJuZXdEaXJlY3Rpb24iLCJuZWVkVXBkYXRlIiwiY3VycmVudERpcmVjdGlvbiIsImdldFdyYXBwZXJTZWxlY3RvciIsImxhenlFbGVtZW50cyIsImRlbGV0ZUluc3RhbmNlIiwiY2xlYW5TdHlsZXMiLCJuZXdEZWZhdWx0cyIsIm1vZHVsZXMiLCJtb2R1bGUiLCJtIiwicHJvdG90eXBlR3JvdXAiLCJwcm90b01ldGhvZCIsInBhcmFtc0xpc3QiLCJuZWVkc05hdmlnYXRpb24iLCJuZWVkc1BhZ2luYXRpb24iLCJuZWVkc1Njcm9sbGJhciIsInVuaXF1ZUNsYXNzZXMiLCJ1bmlxdWUiLCJ3cmFwcGVyQ2xhc3MiLCJ1cGRhdGVTd2lwZXIiLCJwYXNzZWRQYXJhbXMiLCJjaGFuZ2VkUGFyYW1zIiwibmV4dEVsIiwicHJldkVsIiwic2Nyb2xsYmFyRWwiLCJwYWdpbmF0aW9uRWwiLCJ1cGRhdGVQYXJhbXMiLCJjdXJyZW50UGFyYW1zIiwicGFnaW5hdGlvbiIsIm5hdmlnYXRpb24iLCJzY3JvbGxiYXIiLCJ2aXJ0dWFsIiwidGh1bWJzIiwibmVlZFRodW1ic0luaXQiLCJuZWVkQ29udHJvbGxlckluaXQiLCJuZWVkUGFnaW5hdGlvbkluaXQiLCJuZWVkU2Nyb2xsYmFySW5pdCIsIm5lZWROYXZpZ2F0aW9uSW5pdCIsImxvb3BOZWVkRGVzdHJveSIsImxvb3BOZWVkRW5hYmxlIiwibG9vcE5lZWRSZWxvb3AiLCJkZXN0cm95TW9kdWxlIiwibmV3VmFsdWUiLCJnZXRQYXJhbXMiLCJzcGxpdEV2ZW50cyIsInJlc3QiLCJhbGxvd2VkUGFyYW1zIiwicGxhaW5PYmoiLCJtb3VudFN3aXBlciIsImdldENoYW5nZWRQYXJhbXMiLCJvbGRQYXJhbXMiLCJjaGlsZHJlbiIsIm9sZENoaWxkcmVuIiwiZ2V0S2V5Iiwia2V5cyIsImFkZEtleSIsIm9sZENoaWxkcmVuS2V5cyIsImNoaWxkcmVuS2V5cyIsIm5ld0tleXMiLCJvbGRLZXlzIiwibmV3S2V5Iiwib2xkS2V5IiwidXBkYXRlT25WaXJ0dWFsRGF0YSIsIl9leHRlbmRzIiwic291cmNlIiwiaXNDaGlsZFN3aXBlclNsaWRlIiwicHJvY2Vzc0NoaWxkcmVuIiwiUmVhY3QiLCJnZXRDaGlsZHJlbiIsInNsb3RzIiwiZm91bmRTbGlkZXMiLCJyZW5kZXJWaXJ0dWFsIiwidmlydHVhbERhdGEiLCJnZXRTbGlkZUluZGV4IiwiZnJvbSIsImxvb3BGcm9tIiwibG9vcFRvIiwic2xpZGVzVG9SZW5kZXIiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiZGVwcyIsInVzZUVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsIlN3aXBlclNsaWRlQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJTd2lwZXJDb250ZXh0IiwidXNlU3dpcGVyIiwidXNlQ29udGV4dCIsImZvcndhcmRSZWYiLCJleHRlcm5hbEVsUmVmIiwiVGFnIiwiV3JhcHBlclRhZyIsIm9uU3dpcGVyIiwiZXZlbnRzQXNzaWduZWQiLCJjb250YWluZXJDbGFzc2VzIiwic2V0Q29udGFpbmVyQ2xhc3NlcyIsInVzZVN0YXRlIiwic2V0VmlydHVhbERhdGEiLCJicmVha3BvaW50Q2hhbmdlZCIsInNldEJyZWFrcG9pbnRDaGFuZ2VkIiwiaW5pdGlhbGl6ZWRSZWYiLCJ1c2VSZWYiLCJzd2lwZXJFbFJlZiIsInN3aXBlclJlZiIsIm9sZFBhc3NlZFBhcmFtc1JlZiIsIm9sZFNsaWRlcyIsIm5leHRFbFJlZiIsInByZXZFbFJlZiIsInBhZ2luYXRpb25FbFJlZiIsInNjcm9sbGJhckVsUmVmIiwicmVzdFByb3BzIiwib25CZWZvcmVCcmVha3BvaW50IiwiaW5pdFN3aXBlciIsInBhc3NQYXJhbXMiLCJleHRlbmRXaXRoIiwicmVuZGVyU2xpZGVzIiwiU3dpcGVyU2xpZGUiLCJleHRlcm5hbFJlZiIsInpvb20iLCJsYXp5IiwidmlydHVhbEluZGV4Iiwic3dpcGVyU2xpZGVJbmRleCIsInNsaWRlRWxSZWYiLCJzbGlkZUNsYXNzZXMiLCJzZXRTbGlkZUNsYXNzZXMiLCJsYXp5TG9hZGVkIiwic2V0TGF6eUxvYWRlZCIsInVwZGF0ZUNsYXNzZXMiLCJfcyIsInNsaWRlRGF0YSIsInJlbmRlckNoaWxkcmVuIiwiY3JlYXRlRWxlbWVudElmTm90RGVmaW5lZCIsIm9yaWdpbmFsUGFyYW1zIiwiY2hlY2tQcm9wcyIsIk5hdmlnYXRpb24iLCJtYWtlRWxlbWVudHNBcnJheSIsImdldEVsIiwicmVzIiwidG9nZ2xlRWwiLCJkaXNhYmxlZCIsInN1YkVsIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsImluaXRCdXR0b24iLCJkZXN0cm95QnV0dG9uIiwiZGlzYWJsZSIsImlzSGlkZGVuIiwiZW5hYmxlIiwiY2xhc3Nlc1RvU2VsZWN0b3IiLCJQYWdpbmF0aW9uIiwicGZ4IiwibnVtYmVyIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNCdWxsZXRJbmRleCIsImlzUGFnaW5hdGlvbkRpc2FibGVkIiwic2V0U2lkZUJ1bGxldHMiLCJidWxsZXRFbCIsInBvc2l0aW9uIiwiYnVsbGV0QWN0aXZlQ2xhc3MiLCJvbkJ1bGxldENsaWNrIiwidG90YWwiLCJidWxsZXRzIiwiZmlyc3RJbmRleCIsIm1pZEluZGV4IiwiY2xhc3Nlc1RvUmVtb3ZlIiwic3VmZml4IiwicyIsImJ1bGxldCIsImJ1bGxldEluZGV4IiwiZmlyc3REaXNwbGF5ZWRCdWxsZXQiLCJsYXN0RGlzcGxheWVkQnVsbGV0IiwiZHluYW1pY0J1bGxldHNMZW5ndGgiLCJidWxsZXRzT2Zmc2V0Iiwib2Zmc2V0UHJvcCIsInN1YkVsSW5kZXgiLCJmcmFjdGlvbkVsIiwidG90YWxFbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJwcm9ncmVzc0VsIiwicmVuZGVyIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJBdXRvcGxheSIsInRpbWVvdXQiLCJyYWYiLCJhdXRvcGxheURlbGF5VG90YWwiLCJhdXRvcGxheURlbGF5Q3VycmVudCIsImF1dG9wbGF5VGltZUxlZnQiLCJhdXRvcGxheVN0YXJ0VGltZSIsIndhc1BhdXNlZCIsImlzVG91Y2hlZCIsInBhdXNlZEJ5VG91Y2giLCJ0b3VjaFN0YXJ0VGltZW91dCIsInNsaWRlQ2hhbmdlZCIsInBhdXNlZEJ5SW50ZXJhY3Rpb24iLCJwYXVzZWRCeVBvaW50ZXJFbnRlciIsIm9uVHJhbnNpdGlvbkVuZCIsInJlc3VtZSIsImNhbGNUaW1lTGVmdCIsInRpbWVMZWZ0IiwiZ2V0U2xpZGVEZWxheSIsImFjdGl2ZVNsaWRlRWwiLCJydW4iLCJkZWxheUZvcmNlIiwiY3VycmVudFNsaWRlRGVsYXkiLCJwcm9jZWVkIiwic3RhcnQiLCJzdG9wIiwicGF1c2UiLCJyZXNldCIsIm9uVmlzaWJpbGl0eUNoYW5nZSIsIm9uUG9pbnRlckVudGVyIiwib25Qb2ludGVyTGVhdmUiLCJhdHRhY2hNb3VzZUV2ZW50cyIsImRldGFjaE1vdXNlRXZlbnRzIiwiYXR0YWNoRG9jdW1lbnRFdmVudHMiLCJkZXRhY2hEb2N1bWVudEV2ZW50cyJdLCJtYXBwaW5ncyI6InFEQVlBLFNBQVNBLEdBQVNDLEVBQUssQ0FDckIsT0FBT0EsSUFBUSxNQUFRLE9BQU9BLEdBQVEsVUFBWSxnQkFBaUJBLEdBQU9BLEVBQUksY0FBZ0IsTUFDaEcsQ0FDQSxTQUFTQyxHQUFPQyxFQUFRQyxFQUFLLENBQ3ZCRCxJQUFXLFNBQ2JBLEVBQVMsQ0FBQSxHQUVQQyxJQUFRLFNBQ1ZBLEVBQU0sQ0FBQSxHQUVSLE9BQU8sS0FBS0EsQ0FBRyxFQUFFLFFBQVFDLEdBQU8sQ0FDMUIsT0FBT0YsRUFBT0UsQ0FBRyxFQUFNLElBQWFGLEVBQU9FLENBQUcsRUFBSUQsRUFBSUMsQ0FBRyxFQUFXTCxHQUFTSSxFQUFJQyxDQUFHLENBQUMsR0FBS0wsR0FBU0csRUFBT0UsQ0FBRyxDQUFDLEdBQUssT0FBTyxLQUFLRCxFQUFJQyxDQUFHLENB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Q3ZFLEVBQ0V4a0IsRUFBRyxPQUFRLElBQU0sQ0FDWHpFLEVBQU8sT0FBTyxTQUFTLFVBQ3pCb3BCLElBQ0FFLElBQ0FULElBRU4sQ0FBRyxFQUNEcGtCLEVBQUcsVUFBVyxJQUFNLENBQ2xCNGtCLElBQ0FFLElBQ0l2cEIsRUFBTyxTQUFTLFNBQ2xCOG9CLEdBRU4sQ0FBRyxFQUNEcmtCLEVBQUcseUJBQTBCLElBQU0sRUFDN0JxakIsR0FBaUJHLElBQ25CRyxHQUVOLENBQUcsRUFDRDNqQixFQUFHLDZCQUE4QixJQUFNLENBQ2hDekUsRUFBTyxPQUFPLFNBQVMscUJBRzFCOG9CLElBRkFDLEVBQU0sR0FBTSxFQUFJLENBSXRCLENBQUcsRUFDRHRrQixFQUFHLHdCQUF5QixDQUFDbWYsRUFBSTlZLEVBQU82RSxJQUFhLENBQy9DM1AsRUFBTyxXQUFhLENBQUNBLEVBQU8sU0FBUyxVQUNyQzJQLEdBQVksQ0FBQzNQLEVBQU8sT0FBTyxTQUFTLHFCQUN0QytvQixFQUFNLEdBQU0sRUFBSSxFQUVoQkQsSUFFTixDQUFHLEVBQ0Rya0IsRUFBRyxrQkFBbUIsSUFBTSxDQUMxQixHQUFJLEVBQUF6RSxFQUFPLFdBQWEsQ0FBQ0EsRUFBTyxTQUFTLFNBQ3pDLElBQUlBLEVBQU8sT0FBTyxTQUFTLHFCQUFzQixDQUMvQzhvQixJQUNBLE1BQ0QsQ0FDRGpCLEVBQVksR0FDWkMsRUFBZ0IsR0FDaEJHLEVBQXNCLEdBQ3RCRixFQUFvQixXQUFXLElBQU0sQ0FDbkNFLEVBQXNCLEdBQ3RCSCxFQUFnQixHQUNoQmlCLEVBQU0sRUFBSSxDQUNYLEVBQUUsR0FBRyxFQUNWLENBQUcsRUFDRHRrQixFQUFHLFdBQVksSUFBTSxDQUNuQixHQUFJLEVBQUF6RSxFQUFPLFdBQWEsQ0FBQ0EsRUFBTyxTQUFTLFNBQVcsQ0FBQzZuQixHQUdyRCxJQUZBLGFBQWFFLENBQWlCLEVBQzlCLGFBQWFULENBQU8sRUFDaEJ0bkIsRUFBTyxPQUFPLFNBQVMscUJBQXNCLENBQy9DOG5CLEVBQWdCLEdBQ2hCRCxFQUFZLEdBQ1osTUFDRCxDQUNHQyxHQUFpQjluQixFQUFPLE9BQU8sU0FBU29vQixFQUFNLEVBQ2xETixFQUFnQixHQUNoQkQsRUFBWSxHQUNoQixDQUFHLEVBQ0RwakIsRUFBRyxjQUFlLElBQU0sQ0FDbEJ6RSxFQUFPLFdBQWEsQ0FBQ0EsRUFBTyxTQUFTLFVBQ3pDZ29CLEVBQWUsR0FDbkIsQ0FBRyxFQUNELE9BQU8sT0FBT2hvQixFQUFPLFNBQVUsQ0FDN0IsTUFBQTZvQixFQUNBLEtBQUFDLEVBQ0EsTUFBQUMsRUFDQSxPQUFBWCxDQUNKLENBQUcsQ0FDSCIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDcsOCw5LDEwXX0=
