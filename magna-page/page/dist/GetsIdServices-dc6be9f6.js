var ve=(t,e,r)=>{if(!e.has(t))throw TypeError("Cannot "+r)};var i=(t,e,r)=>(ve(t,e,"read from private field"),r?r.call(t):e.get(t)),x=(t,e,r)=>{if(e.has(t))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(t):e.set(t,r)},b=(t,e,r,n)=>(ve(t,e,"write to private field"),n?n.call(t,r):e.set(t,r),r);var k=(t,e,r)=>(ve(t,e,"access private method"),r);import{r as E,R as ft,j as W}from"./jsx-runtime-c0a91cf1.js";import{a as fe,l as ht}from"./lottie-632db44f.js";var Ae=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(t){return this.listeners.add(t),this.onSubscribe(),()=>{this.listeners.delete(t),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},re=typeof window>"u"||"Deno"in window;function yt(){}function br(t,e){return typeof t=="function"?t(e):t}function Ie(t){return typeof t=="number"&&t>=0&&t!==1/0}function mt(t,e){return Math.max(t+(e||0)-Date.now(),0)}function xr(t,e){const{type:r="all",exact:n,fetchStatus:s,predicate:o,queryKey:a,stale:l}=t;if(a){if(n){if(e.queryHash!==pt(a,e.options))return!1}else if(!Le(e.queryKey,a))return!1}if(r!=="all"){const u=e.isActive();if(r==="active"&&!u||r==="inactive"&&u)return!1}return!(typeof l=="boolean"&&e.isStale()!==l||typeof s<"u"&&s!==e.state.fetchStatus||o&&!o(e))}function Sr(t,e){const{exact:r,status:n,predicate:s,mutationKey:o}=t;if(o){if(!e.options.mutationKey)return!1;if(r){if(ge(e.options.mutationKey)!==ge(o))return!1}else if(!Le(e.options.mutationKey,o))return!1}return!(n&&e.state.status!==n||s&&!s(e))}function pt(t,e){return((e==null?void 0:e.queryKeyHashFn)||ge)(t)}function ge(t){return JSON.stringify(t,(e,r)=>xe(r)?Object.keys(r).sort().reduce((n,s)=>(n[s]=r[s],n),{}):r)}function Le(t,e){return t===e?!0:typeof t!=typeof e?!1:t&&e&&typeof t=="object"&&typeof e=="object"?!Object.keys(e).some(r=>!Le(t[r],e[r])):!1}function Ke(t,e){if(t===e)return t;const r=je(t)&&je(e);if(r||xe(t)&&xe(e)){const n=r?t:Object.keys(t),s=n.length,o=r?e:Object.keys(e),a=o.length,l=r?[]:{};let u=0;for(let w=0;w<a;w++){const c=r?w:o[w];!r&&t[c]===void 0&&e[c]===void 0&&n.includes(c)?(l[c]=void 0,u++):(l[c]=Ke(t[c],e[c]),l[c]===t[c]&&t[c]!==void 0&&u++)}return s===a&&u===s?t:l}return e}function be(t,e){if(t&&!e||e&&!t)return!1;for(const r in t)if(t[r]!==e[r])return!1;return!0}function je(t){return Array.isArray(t)&&t.length===Object.keys(t).length}function xe(t){if(!Fe(t))return!1;const e=t.constructor;if(typeof e>"u")return!0;const r=e.prototype;return!(!Fe(r)||!r.hasOwnProperty("isPrototypeOf"))}function Fe(t){return Object.prototype.toString.call(t)==="[object Object]"}function vt(t){return new Promise(e=>{setTimeout(e,t)})}function Te(t,e,r){return typeof r.structuralSharing=="function"?r.structuralSharing(t,e):r.structuralSharing!==!1?Ke(t,e):e}function wr(t,e,r=0){const n=[...t,e];return r&&n.length>r?n.slice(1):n}function Rr(t,e,r=0){const n=[e,...t];return r&&n.length>r?n.slice(0,-1):n}var V,_,q,Be,gt=(Be=class extends Ae{constructor(){super();x(this,V,void 0);x(this,_,void 0);x(this,q,void 0);b(this,q,e=>{if(!re&&window.addEventListener){const r=()=>e();return window.addEventListener("visibilitychange",r,!1),()=>{window.removeEventListener("visibilitychange",r)}}})}onSubscribe(){i(this,_)||this.setEventListener(i(this,q))}onUnsubscribe(){var e;this.hasListeners()||((e=i(this,_))==null||e.call(this),b(this,_,void 0))}setEventListener(e){var r;b(this,q,e),(r=i(this,_))==null||r.call(this),b(this,_,e(n=>{typeof n=="boolean"?this.setFocused(n):this.onFocus()}))}setFocused(e){i(this,V)!==e&&(b(this,V,e),this.onFocus())}onFocus(){this.listeners.forEach(e=>{e()})}isFocused(){var e;return typeof i(this,V)=="boolean"?i(this,V):((e=globalThis.document)==null?void 0:e.visibilityState)!=="hidden"}},V=new WeakMap,_=new WeakMap,q=new WeakMap,Be),Ne=new gt,z,Q,$,Ve,bt=(Ve=class extends Ae{constructor(){super();x(this,z,!0);x(this,Q,void 0);x(this,$,void 0);b(this,$,e=>{if(!re&&window.addEventListener){const r=()=>e(!0),n=()=>e(!1);return window.addEventListener("online",r,!1),window.addEventListener("offline",n,!1),()=>{window.removeEventListener("online",r),window.removeEventListener("offline",n)}}})}onSubscribe(){i(this,Q)||this.setEventListener(i(this,$))}onUnsubscribe(){var e;this.hasListeners()||((e=i(this,Q))==null||e.call(this),b(this,Q,void 0))}setEventListener(e){var r;b(this,$,e),(r=i(this,Q))==null||r.call(this),b(this,Q,e(this.setOnline.bind(this)))}setOnline(e){i(this,z)!==e&&(b(this,z,e),this.listeners.forEach(n=>{n(e)}))}isOnline(){return i(this,z)}},z=new WeakMap,Q=new WeakMap,$=new WeakMap,Ve),Ge=new bt;function xt(t){return Math.min(1e3*2**t,3e4)}function We(t){return(t??"online")==="online"?Ge.isOnline():!0}var qe=class{constructor(t){this.revert=t==null?void 0:t.revert,this.silent=t==null?void 0:t.silent}};function Or(t){return t instanceof qe}function Er(t){let e=!1,r=0,n=!1,s,o,a;const l=new Promise((d,h)=>{o=d,a=h}),u=d=>{var h;n||(S(new qe(d)),(h=t.abort)==null||h.call(t))},w=()=>{e=!0},c=()=>{e=!1},P=()=>!Ne.isFocused()||t.networkMode!=="always"&&!Ge.isOnline(),p=d=>{var h;n||(n=!0,(h=t.onSuccess)==null||h.call(t,d),s==null||s(),o(d))},S=d=>{var h;n||(n=!0,(h=t.onError)==null||h.call(t,d),s==null||s(),a(d))},f=()=>new Promise(d=>{var h;s=A=>{const m=n||!P();return m&&d(A),m},(h=t.onPause)==null||h.call(t)}).then(()=>{var d;s=void 0,n||(d=t.onContinue)==null||d.call(t)}),D=()=>{if(n)return;let d;try{d=t.fn()}catch(h){d=Promise.reject(h)}Promise.resolve(d).then(p).catch(h=>{var y;if(n)return;const A=t.retry??(re?0:3),m=t.retryDelay??xt,F=typeof m=="function"?m(r,h):m,M=A===!0||typeof A=="number"&&r<A||typeof A=="function"&&A(r,h);if(e||!M){S(h);return}r++,(y=t.onFail)==null||y.call(t,r,h),vt(F).then(()=>{if(P())return f()}).then(()=>{e?S(h):D()})})};return We(t.networkMode)?D():f().then(D),{promise:l,cancel:u,continue:()=>(s==null?void 0:s())?l:Promise.resolve(),cancelRetry:w,continueRetry:c}}function St(){let t=[],e=0,r=p=>{p()},n=p=>{p()},s=p=>setTimeout(p,0);const o=p=>{s=p},a=p=>{let S;e++;try{S=p()}finally{e--,e||w()}return S},l=p=>{e?t.push(p):s(()=>{r(p)})},u=p=>(...S)=>{l(()=>{p(...S)})},w=()=>{const p=t;t=[],p.length&&s(()=>{n(()=>{p.forEach(S=>{r(S)})})})};return{batch:a,batchCalls:u,schedule:l,setNotifyFunction:p=>{r=p},setBatchNotifyFunction:p=>{n=p},setScheduler:o}}var ze=St(),j,O,ne,I,H,J,T,ie,X,Y,K,N,U,Z,G,te,se,Se,ae,we,oe,Re,ue,Oe,ce,Ee,le,Ce,de,ke,ye,$e,He,wt=(He=class extends Ae{constructor(e,r){super();x(this,G);x(this,se);x(this,ae);x(this,oe);x(this,ue);x(this,ce);x(this,le);x(this,de);x(this,ye);x(this,j,void 0);x(this,O,void 0);x(this,ne,void 0);x(this,I,void 0);x(this,H,void 0);x(this,J,void 0);x(this,T,void 0);x(this,ie,void 0);x(this,X,void 0);x(this,Y,void 0);x(this,K,void 0);x(this,N,void 0);x(this,U,void 0);x(this,Z,new Set);this.options=r,b(this,j,e),b(this,T,null),this.bindMethods(),this.setOptions(r)}bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.size===1&&(i(this,O).addObserver(this),Me(i(this,O),this.options)?k(this,G,te).call(this):this.updateResult(),k(this,ue,Oe).call(this))}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return Pe(i(this,O),this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return Pe(i(this,O),this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,k(this,ce,Ee).call(this),k(this,le,Ce).call(this),i(this,O).removeObserver(this)}setOptions(e,r){const n=this.options,s=i(this,O);if(this.options=i(this,j).defaultQueryOptions(e),be(n,this.options)||i(this,j).getQueryCache().notify({type:"observerOptionsUpdated",query:i(this,O),observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=n.queryKey),k(this,de,ke).call(this);const o=this.hasListeners();o&&_e(i(this,O),s,this.options,n)&&k(this,G,te).call(this),this.updateResult(r),o&&(i(this,O)!==s||this.options.enabled!==n.enabled||this.options.staleTime!==n.staleTime)&&k(this,se,Se).call(this);const a=k(this,ae,we).call(this);o&&(i(this,O)!==s||this.options.enabled!==n.enabled||a!==i(this,U))&&k(this,oe,Re).call(this,a)}getOptimisticResult(e){const r=i(this,j).getQueryCache().build(i(this,j),e),n=this.createResult(r,e);return Ot(this,n)&&(b(this,I,n),b(this,J,this.options),b(this,H,i(this,O).state)),n}getCurrentResult(){return i(this,I)}trackResult(e){const r={};return Object.keys(e).forEach(n=>{Object.defineProperty(r,n,{configurable:!1,enumerable:!0,get:()=>(i(this,Z).add(n),e[n])})}),r}getCurrentQuery(){return i(this,O)}refetch({...e}={}){return this.fetch({...e})}fetchOptimistic(e){const r=i(this,j).defaultQueryOptions(e),n=i(this,j).getQueryCache().build(i(this,j),r);return n.isFetchingOptimistic=!0,n.fetch().then(()=>this.createResult(n,r))}fetch(e){return k(this,G,te).call(this,{...e,cancelRefetch:e.cancelRefetch??!0}).then(()=>(this.updateResult(),i(this,I)))}createResult(e,r){var y;const n=i(this,O),s=this.options,o=i(this,I),a=i(this,H),l=i(this,J),w=e!==n?e.state:i(this,ne),{state:c}=e;let{error:P,errorUpdatedAt:p,fetchStatus:S,status:f}=c,D=!1,d;if(r._optimisticResults){const g=this.hasListeners(),ee=!g&&Me(e,r),me=g&&_e(e,n,r,s);(ee||me)&&(S=We(e.options.networkMode)?"fetching":"paused",c.dataUpdatedAt||(f="pending")),r._optimisticResults==="isRestoring"&&(S="idle")}if(r.select&&typeof c.data<"u")if(o&&c.data===(a==null?void 0:a.data)&&r.select===i(this,ie))d=i(this,X);else try{b(this,ie,r.select),d=r.select(c.data),d=Te(o==null?void 0:o.data,d,r),b(this,X,d),b(this,T,null)}catch(g){b(this,T,g)}else d=c.data;if(typeof r.placeholderData<"u"&&typeof d>"u"&&f==="pending"){let g;if(o!=null&&o.isPlaceholderData&&r.placeholderData===(l==null?void 0:l.placeholderData))g=o.data;else if(g=typeof r.placeholderData=="function"?r.placeholderData((y=i(this,Y))==null?void 0:y.state.data,i(this,Y)):r.placeholderData,r.select&&typeof g<"u")try{g=r.select(g),b(this,T,null)}catch(ee){b(this,T,ee)}typeof g<"u"&&(f="success",d=Te(o==null?void 0:o.data,g,r),D=!0)}i(this,T)&&(P=i(this,T),d=i(this,X),p=Date.now(),f="error");const h=S==="fetching",A=f==="pending",m=f==="error",F=A&&h;return{status:f,fetchStatus:S,isPending:A,isSuccess:f==="success",isError:m,isInitialLoading:F,isLoading:F,data:d,dataUpdatedAt:c.dataUpdatedAt,error:P,errorUpdatedAt:p,failureCount:c.fetchFailureCount,failureReason:c.fetchFailureReason,errorUpdateCount:c.errorUpdateCount,isFetched:c.dataUpdateCount>0||c.errorUpdateCount>0,isFetchedAfterMount:c.dataUpdateCount>w.dataUpdateCount||c.errorUpdateCount>w.errorUpdateCount,isFetching:h,isRefetching:h&&!A,isLoadingError:m&&c.dataUpdatedAt===0,isPaused:S==="paused",isPlaceholderData:D,isRefetchError:m&&c.dataUpdatedAt!==0,isStale:De(e,r),refetch:this.refetch}}updateResult(e){const r=i(this,I),n=this.createResult(i(this,O),this.options);if(b(this,H,i(this,O).state),b(this,J,this.options),i(this,H).data!==void 0&&b(this,Y,i(this,O)),be(n,r))return;b(this,I,n);const s={},o=()=>{if(!r)return!0;const{notifyOnChangeProps:a}=this.options,l=typeof a=="function"?a():a;if(l==="all"||!l&&!i(this,Z).size)return!0;const u=new Set(l??i(this,Z));return this.options.throwOnError&&u.add("error"),Object.keys(i(this,I)).some(w=>{const c=w;return i(this,I)[c]!==r[c]&&u.has(c)})};(e==null?void 0:e.listeners)!==!1&&o()&&(s.listeners=!0),k(this,ye,$e).call(this,{...s,...e})}onQueryUpdate(){this.updateResult(),this.hasListeners()&&k(this,ue,Oe).call(this)}},j=new WeakMap,O=new WeakMap,ne=new WeakMap,I=new WeakMap,H=new WeakMap,J=new WeakMap,T=new WeakMap,ie=new WeakMap,X=new WeakMap,Y=new WeakMap,K=new WeakMap,N=new WeakMap,U=new WeakMap,Z=new WeakMap,G=new WeakSet,te=function(e){k(this,de,ke).call(this);let r=i(this,O).fetch(this.options,e);return e!=null&&e.throwOnError||(r=r.catch(yt)),r},se=new WeakSet,Se=function(){if(k(this,ce,Ee).call(this),re||i(this,I).isStale||!Ie(this.options.staleTime))return;const r=mt(i(this,I).dataUpdatedAt,this.options.staleTime)+1;b(this,K,setTimeout(()=>{i(this,I).isStale||this.updateResult()},r))},ae=new WeakSet,we=function(){return(typeof this.options.refetchInterval=="function"?this.options.refetchInterval(i(this,O)):this.options.refetchInterval)??!1},oe=new WeakSet,Re=function(e){k(this,le,Ce).call(this),b(this,U,e),!(re||this.options.enabled===!1||!Ie(i(this,U))||i(this,U)===0)&&b(this,N,setInterval(()=>{(this.options.refetchIntervalInBackground||Ne.isFocused())&&k(this,G,te).call(this)},i(this,U)))},ue=new WeakSet,Oe=function(){k(this,se,Se).call(this),k(this,oe,Re).call(this,k(this,ae,we).call(this))},ce=new WeakSet,Ee=function(){i(this,K)&&(clearTimeout(i(this,K)),b(this,K,void 0))},le=new WeakSet,Ce=function(){i(this,N)&&(clearInterval(i(this,N)),b(this,N,void 0))},de=new WeakSet,ke=function(){const e=i(this,j).getQueryCache().build(i(this,j),this.options);if(e===i(this,O))return;const r=i(this,O);b(this,O,e),b(this,ne,e.state),this.hasListeners()&&(r==null||r.removeObserver(this),e.addObserver(this))},ye=new WeakSet,$e=function(e){ze.batch(()=>{e.listeners&&this.listeners.forEach(r=>{r(i(this,I))}),i(this,j).getQueryCache().notify({query:i(this,O),type:"observerResultsUpdated"})})},He);function Rt(t,e){return e.enabled!==!1&&!t.state.dataUpdatedAt&&!(t.state.status==="error"&&e.retryOnMount===!1)}function Me(t,e){return Rt(t,e)||t.state.dataUpdatedAt>0&&Pe(t,e,e.refetchOnMount)}function Pe(t,e,r){if(e.enabled!==!1){const n=typeof r=="function"?r(t):r;return n==="always"||n!==!1&&De(t,e)}return!1}function _e(t,e,r,n){return r.enabled!==!1&&(t!==e||n.enabled===!1)&&(!r.suspense||t.state.status!=="error")&&De(t,r)}function De(t,e){return t.isStaleByTime(e.staleTime)}function Ot(t,e){return!be(t.getCurrentResult(),e)}var Je=E.createContext(void 0),Et=t=>{const e=E.useContext(Je);if(t)return t;if(!e)throw new Error("No QueryClient set, use QueryClientProvider to set one");return e},Cr=({client:t,children:e})=>(E.useEffect(()=>(t.mount(),()=>{t.unmount()}),[t]),E.createElement(Je.Provider,{value:t},e)),Xe=E.createContext(!1),Ct=()=>E.useContext(Xe);Xe.Provider;function kt(){let t=!1;return{clearReset:()=>{t=!1},reset:()=>{t=!0},isReset:()=>t}}var Pt=E.createContext(kt()),At=()=>E.useContext(Pt);function Lt(t,e){return typeof t=="function"?t(...e):!!t}var Dt=(t,e)=>{(t.suspense||t.throwOnError)&&(e.isReset()||(t.retryOnMount=!1))},It=t=>{E.useEffect(()=>{t.clearReset()},[t])},jt=({result:t,errorResetBoundary:e,throwOnError:r,query:n})=>t.isError&&!e.isReset()&&!t.isFetching&&n&&Lt(r,[t.error,n]),Ft=t=>{t.suspense&&typeof t.staleTime!="number"&&(t.staleTime=1e3)},Tt=(t,e)=>(t==null?void 0:t.suspense)&&e.isPending,Mt=(t,e,r)=>e.fetchOptimistic(t).catch(()=>{r.clearReset()});function _t(t,e,r){const n=Et(r),s=Ct(),o=At(),a=n.defaultQueryOptions(t);a._optimisticResults=s?"isRestoring":"optimistic",Ft(a),Dt(a,o),It(o);const[l]=E.useState(()=>new e(n,a)),u=l.getOptimisticResult(a);if(E.useSyncExternalStore(E.useCallback(w=>{const c=s?()=>{}:l.subscribe(ze.batchCalls(w));return l.updateResult(),c},[l,s]),()=>l.getCurrentResult(),()=>l.getCurrentResult()),E.useEffect(()=>{l.setOptions(a,{listeners:!1})},[a,l]),Tt(a,u))throw Mt(a,l,o);if(jt({result:u,errorResetBoundary:o,throwOnError:a.throwOnError,query:n.getQueryCache().get(a.queryHash)}))throw u.error;return a.notifyOnChangeProps?u:l.trackResult(u)}function Qt(t,e){return _t(t,wt,e)}const kr=async()=>{try{return(await fe.get("equipos/")).data}catch(t){console.log(t);return}},Ut=async()=>{try{const t=await fe.get("servicios/servicios-and-subservicios/");return console.log(t.data,"aqui estoy en fetchServices"),console.log(t.data,"aqui estoy en fetchServices"),t.data}catch(t){console.log(t);return}},Pr=async()=>{try{return(await fe.get("proyectos/")).data}catch(t){console.log(t);return}},Ar=async()=>{try{return(await fe.get("proyectos/images/")).data}catch(t){console.log(t);return}},Lr=async()=>{try{return(await fe.get("servicios/brochure/")).data}catch(t){console.log(t);return}};function Bt(t,e){var r=t==null?null:typeof Symbol<"u"&&t[Symbol.iterator]||t["@@iterator"];if(r!=null){var n,s,o,a,l=[],u=!0,w=!1;try{if(o=(r=r.call(t)).next,e===0){if(Object(r)!==r)return;u=!1}else for(;!(u=(n=o.call(r)).done)&&(l.push(n.value),l.length!==e);u=!0);}catch(c){w=!0,s=c}finally{try{if(!u&&r.return!=null&&(a=r.return(),Object(a)!==a))return}finally{if(w)throw s}}return l}}function Qe(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter(function(s){return Object.getOwnPropertyDescriptor(t,s).enumerable})),r.push.apply(r,n)}return r}function he(t){for(var e=1;e<arguments.length;e++){var r=arguments[e]!=null?arguments[e]:{};e%2?Qe(Object(r),!0).forEach(function(n){Vt(t,n,r[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):Qe(Object(r)).forEach(function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))})}return t}function Vt(t,e,r){return e=zt(e),e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function Ht(t,e){if(t==null)return{};var r={},n=Object.keys(t),s,o;for(o=0;o<n.length;o++)s=n[o],!(e.indexOf(s)>=0)&&(r[s]=t[s]);return r}function Ye(t,e){if(t==null)return{};var r=Ht(t,e),n,s;if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(s=0;s<o.length;s++)n=o[s],!(e.indexOf(n)>=0)&&Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function Kt(t,e){return Nt(t)||Bt(t,e)||Gt(t,e)||Wt()}function Nt(t){if(Array.isArray(t))return t}function Gt(t,e){if(t){if(typeof t=="string")return Ue(t,e);var r=Object.prototype.toString.call(t).slice(8,-1);if(r==="Object"&&t.constructor&&(r=t.constructor.name),r==="Map"||r==="Set")return Array.from(t);if(r==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r))return Ue(t,e)}}function Ue(t,e){(e==null||e>t.length)&&(e=t.length);for(var r=0,n=new Array(e);r<e;r++)n[r]=t[r];return n}function Wt(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function qt(t,e){if(typeof t!="object"||t===null)return t;var r=t[Symbol.toPrimitive];if(r!==void 0){var n=r.call(t,e||"default");if(typeof n!="object")return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return(e==="string"?String:Number)(t)}function zt(t){var e=qt(t,"string");return typeof e=="symbol"?e:String(e)}var $t=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],Jt=function(e,r){var n=e.animationData,s=e.loop,o=e.autoplay,a=e.initialSegment,l=e.onComplete,u=e.onLoopComplete,w=e.onEnterFrame,c=e.onSegmentStart,P=e.onConfigReady,p=e.onDataReady,S=e.onDataFailed,f=e.onLoadedImages,D=e.onDOMLoaded,d=e.onDestroy;e.lottieRef,e.renderer,e.name,e.assetsPath,e.rendererSettings;var h=Ye(e,$t),A=E.useState(!1),m=Kt(A,2),F=m[0],M=m[1],y=E.useRef(),g=E.useRef(null),ee=function(){var v;(v=y.current)===null||v===void 0||v.play()},me=function(){var v;(v=y.current)===null||v===void 0||v.stop()},tt=function(){var v;(v=y.current)===null||v===void 0||v.pause()},rt=function(v){var R;(R=y.current)===null||R===void 0||R.setSpeed(v)},nt=function(v,R){var C;(C=y.current)===null||C===void 0||C.goToAndPlay(v,R)},it=function(v,R){var C;(C=y.current)===null||C===void 0||C.goToAndStop(v,R)},st=function(v){var R;(R=y.current)===null||R===void 0||R.setDirection(v)},at=function(v,R){var C;(C=y.current)===null||C===void 0||C.playSegments(v,R)},ot=function(v){var R;(R=y.current)===null||R===void 0||R.setSubframe(v)},ut=function(v){var R;return(R=y.current)===null||R===void 0?void 0:R.getDuration(v)},ct=function(){var v;(v=y.current)===null||v===void 0||v.destroy(),y.current=void 0},lt=function(){var v=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},R;if(g.current){(R=y.current)===null||R===void 0||R.destroy();var C=he(he(he({},e),v),{},{container:g.current});return y.current=ht.loadAnimation(C),M(!!y.current),function(){var B;(B=y.current)===null||B===void 0||B.destroy(),y.current=void 0}}};E.useEffect(function(){var L=lt();return function(){return L==null?void 0:L()}},[n,s]),E.useEffect(function(){y.current&&(y.current.autoplay=!!o)},[o]),E.useEffect(function(){if(y.current){if(!a){y.current.resetSegments(!0);return}!Array.isArray(a)||!a.length||((y.current.currentRawFrame<a[0]||y.current.currentRawFrame>a[1])&&(y.current.currentRawFrame=a[0]),y.current.setSegment(a[0],a[1]))}},[a]),E.useEffect(function(){var L=[{name:"complete",handler:l},{name:"loopComplete",handler:u},{name:"enterFrame",handler:w},{name:"segmentStart",handler:c},{name:"config_ready",handler:P},{name:"data_ready",handler:p},{name:"data_failed",handler:S},{name:"loaded_images",handler:f},{name:"DOMLoaded",handler:D},{name:"destroy",handler:d}],v=L.filter(function(C){return C.handler!=null});if(v.length){var R=v.map(function(C){var B;return(B=y.current)===null||B===void 0||B.addEventListener(C.name,C.handler),function(){var pe;(pe=y.current)===null||pe===void 0||pe.removeEventListener(C.name,C.handler)}});return function(){R.forEach(function(C){return C()})}}},[l,u,w,c,P,p,S,f,D,d]);var dt=ft.createElement("div",he({style:r,ref:g},h));return{View:dt,play:ee,stop:me,pause:tt,setSpeed:rt,goToAndStop:it,goToAndPlay:nt,setDirection:st,playSegments:at,setSubframe:ot,getDuration:ut,destroy:ct,animationContainerRef:g,animationLoaded:F,animationItem:y.current}};function Xt(t){var e=t.getBoundingClientRect(),r=e.top,n=e.height,s=window.innerHeight-r,o=window.innerHeight+n;return s/o}function Yt(t,e,r){var n=t.getBoundingClientRect(),s=n.top,o=n.left,a=n.width,l=n.height,u=(e-o)/a,w=(r-s)/l;return{x:u,y:w}}var Zt=function(e){var r=e.wrapperRef,n=e.animationItem,s=e.mode,o=e.actions;E.useEffect(function(){var a=r.current;if(!(!a||!n||!o.length)){n.stop();var l=function(){var c=null,P=function(){var S=Xt(a),f=o.find(function(d){var h=d.visibility;return h&&S>=h[0]&&S<=h[1]});if(f){if(f.type==="seek"&&f.visibility&&f.frames.length===2){var D=f.frames[0]+Math.ceil((S-f.visibility[0])/(f.visibility[1]-f.visibility[0])*f.frames[1]);//! goToAndStop must be relative to the start of the current segment
n.goToAndStop(D-n.firstFrame-1,!0)}f.type==="loop"&&(c===null||c!==f.frames||n.isPaused)&&(n.playSegments(f.frames,!0),c=f.frames),f.type==="play"&&n.isPaused&&(n.resetSegments(!0),n.play()),f.type==="stop"&&n.goToAndStop(f.frames[0]-n.firstFrame-1,!0)}};return document.addEventListener("scroll",P),function(){document.removeEventListener("scroll",P)}},u=function(){var c=function(f,D){var d=f,h=D;if(d!==-1&&h!==-1){var A=Yt(a,d,h);d=A.x,h=A.y}var m=o.find(function(y){var g=y.position;return g&&Array.isArray(g.x)&&Array.isArray(g.y)?d>=g.x[0]&&d<=g.x[1]&&h>=g.y[0]&&h<=g.y[1]:g&&!Number.isNaN(g.x)&&!Number.isNaN(g.y)?d===g.x&&h===g.y:!1});if(m){if(m.type==="seek"&&m.position&&Array.isArray(m.position.x)&&Array.isArray(m.position.y)&&m.frames.length===2){var F=(d-m.position.x[0])/(m.position.x[1]-m.position.x[0]),M=(h-m.position.y[0])/(m.position.y[1]-m.position.y[0]);n.playSegments(m.frames,!0),n.goToAndStop(Math.ceil((F+M)/2*(m.frames[1]-m.frames[0])),!0)}m.type==="loop"&&n.playSegments(m.frames,!0),m.type==="play"&&(n.isPaused&&n.resetSegments(!1),n.playSegments(m.frames)),m.type==="stop"&&n.goToAndStop(m.frames[0],!0)}},P=function(f){c(f.clientX,f.clientY)},p=function(){c(-1,-1)};return a.addEventListener("mousemove",P),a.addEventListener("mouseout",p),function(){a.removeEventListener("mousemove",P),a.removeEventListener("mouseout",p)}};switch(s){case"scroll":return l();case"cursor":return u()}}},[s,n])},er=function(e){var r=e.actions,n=e.mode,s=e.lottieObj,o=s.animationItem,a=s.View,l=s.animationContainerRef;return Zt({actions:r,animationItem:o,mode:n,wrapperRef:l}),a},tr=["style","interactivity"],rr=function(e){var r,n,s,o=e.style,a=e.interactivity,l=Ye(e,tr),u=Jt(l,o),w=u.View,c=u.play,P=u.stop,p=u.pause,S=u.setSpeed,f=u.goToAndStop,D=u.goToAndPlay,d=u.setDirection,h=u.playSegments,A=u.setSubframe,m=u.getDuration,F=u.destroy,M=u.animationContainerRef,y=u.animationLoaded,g=u.animationItem;return E.useEffect(function(){e.lottieRef&&(e.lottieRef.current={play:c,stop:P,pause:p,setSpeed:S,goToAndPlay:D,goToAndStop:f,setDirection:d,playSegments:h,setSubframe:A,getDuration:m,destroy:F,animationContainerRef:M,animationLoaded:y,animationItem:g})},[(r=e.lottieRef)===null||r===void 0?void 0:r.current]),er({lottieObj:{View:w,play:c,stop:P,pause:p,setSpeed:S,goToAndStop:f,goToAndPlay:D,setDirection:d,playSegments:h,setSubframe:A,getDuration:m,destroy:F,animationContainerRef:M,animationLoaded:y,animationItem:g},actions:(n=a==null?void 0:a.actions)!==null&&n!==void 0?n:[],mode:(s=a==null?void 0:a.mode)!==null&&s!==void 0?s:"scroll"})};const nr="Comp 2",ir=0,sr=500,ar=500,or={g:"LottieFiles AE 3.5.3"},ur=[{ty:4,nm:"Shape Layer 7",sr:1,st:0,op:30,ip:0,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:1},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:4},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:14},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:17},{s:[100,100,100],t:27}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:0,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:3.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:14,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:17.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:28}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.0431,.2392,.5686],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:1},{ty:4,nm:"Shape Layer 6",sr:1,st:1,op:31,ip:1,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:2},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:5},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:15},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:18},{s:[100,100,100],t:28}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:1,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:4.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:15,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:18.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:29}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.9882,.2392,.1294],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:2},{ty:4,nm:"Shape Layer 5",sr:1,st:2,op:32,ip:2,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:3},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:6},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:16},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:19},{s:[100,100,100],t:29}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:2,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:5.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:16,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:19.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:30}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[1,1,1],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:3}],cr="4.8.0",lr=20,dr=30,fr=0,hr=[],yr={nm:nr,ddd:ir,h:sr,w:ar,meta:or,layers:ur,v:cr,fr:lr,op:dr,ip:fr,assets:hr},mr={container:{animation:"fade-in 1s forwards",display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},lottie:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},Ze=()=>(console.log("Spinner"),W.jsx("div",{style:mr.container,children:W.jsx(rr,{animationData:yr,loop:!0,height:200,width:200})})),Dr=Object.freeze(Object.defineProperty({__proto__:null,default:Ze},Symbol.toStringTag,{value:"Module"})),et=E.createContext({services:null,loading:!0}),Ir=({children:t})=>{const{data:e,error:r,isLoading:n}=Qt({queryKey:["services"],queryFn:Ut,staleTime:18e5,refetchOnWindowFocus:!1,refetchInterval:18e5});return E.useEffect(()=>{(async()=>{if(e){const o=e.map(a=>new Promise(l=>{const u=new Image;u.src=a.imagen,u.onload=()=>{document.body.appendChild(u),u.style.display="none",l(u)},u.onerror=()=>{l(u)}}));await Promise.all(o)}})()},[e]),n?W.jsx(Ze,{}):r?W.jsx(W.Fragment,{children:"Error al cargar"}):W.jsx(et.Provider,{value:{services:e,loading:n},children:t})},jr=()=>E.useContext(et);export{wt as A,_t as B,kr as C,Pr as D,Ar as E,Lr as F,Dr as G,Cr as Q,Ae as S,re as a,ze as b,Er as c,Or as d,We as e,Sr as f,Rr as g,pt as h,Ie as i,wr as j,Ne as k,br as l,xr as m,yt as n,Ge as o,ge as p,Le as q,Te as r,be as s,mt as t,Et as u,Lt as v,Ze as w,Ir as x,jr as y,Qt as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
