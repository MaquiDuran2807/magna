import{r as R,g as vd,a as gd}from"./jsx-runtime-c0a91cf1.js";function yd(e,t){for(var n=0;n<t.length;n++){const r=t[n];if(typeof r!="string"&&!Array.isArray(r)){for(const l in r)if(l!=="default"&&!(l in e)){const i=Object.getOwnPropertyDescriptor(r,l);i&&Object.defineProperty(e,l,i.get?i:{enumerable:!0,get:()=>r[l]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}var Ms={exports:{}},$e={},Fs={exports:{}},Os={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function t(D,j){var B=D.length;D.push(j);e:for(;0<B;){var Y=B-1>>>1,q=D[Y];if(0<l(q,j))D[Y]=j,D[B]=q,B=Y;else break e}}function n(D){return D.length===0?null:D[0]}function r(D){if(D.length===0)return null;var j=D[0],B=D.pop();if(B!==j){D[0]=B;e:for(var Y=0,q=D.length,ct=q>>>1;Y<ct;){var Ee=2*(Y+1)-1,tt=D[Ee],Ne=Ee+1,Mt=D[Ne];if(0>l(tt,B))Ne<q&&0>l(Mt,tt)?(D[Y]=Mt,D[Ne]=B,Y=Ne):(D[Y]=tt,D[Ee]=B,Y=Ee);else if(Ne<q&&0>l(Mt,B))D[Y]=Mt,D[Ne]=B,Y=Ne;else break e}}return j}function l(D,j){var B=D.sortIndex-j.sortIndex;return B!==0?B:D.id-j.id}if(typeof performance=="object"&&typeof performance.now=="function"){var i=performance;e.unstable_now=function(){return i.now()}}else{var o=Date,a=o.now();e.unstable_now=function(){return o.now()-a}}var u=[],s=[],f=1,p=null,m=3,k=!1,S=!1,w=!1,C=typeof setTimeout=="function"?setTimeout:null,d=typeof clearTimeout=="function"?clearTimeout:null,c=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function h(D){for(var j=n(s);j!==null;){if(j.callback===null)r(s);else if(j.startTime<=D)r(s),j.sortIndex=j.expirationTime,t(u,j);else break;j=n(s)}}function E(D){if(w=!1,h(D),!S)if(n(u)!==null)S=!0,zt(_);else{var j=n(s);j!==null&&te(E,j.startTime-D)}}function _(D,j){S=!1,w&&(w=!1,d(T),T=-1),k=!0;var B=m;try{for(h(j),p=n(u);p!==null&&(!(p.expirationTime>j)||D&&!Q());){var Y=p.callback;if(typeof Y=="function"){p.callback=null,m=p.priorityLevel;var q=Y(p.expirationTime<=j);j=e.unstable_now(),typeof q=="function"?p.callback=q:p===n(u)&&r(u),h(j)}else r(u);p=n(u)}if(p!==null)var ct=!0;else{var Ee=n(s);Ee!==null&&te(E,Ee.startTime-j),ct=!1}return ct}finally{p=null,m=B,k=!1}}var v=!1,P=null,T=-1,M=5,O=-1;function Q(){return!(e.unstable_now()-O<M)}function he(){if(P!==null){var D=e.unstable_now();O=D;var j=!0;try{j=P(!0,D)}finally{j?de():(v=!1,P=null)}}else v=!1}var de;if(typeof c=="function")de=function(){c(he)};else if(typeof MessageChannel<"u"){var Ke=new MessageChannel,Pn=Ke.port2;Ke.port1.onmessage=he,de=function(){Pn.postMessage(null)}}else de=function(){C(he,0)};function zt(D){P=D,v||(v=!0,de())}function te(D,j){T=C(function(){D(e.unstable_now())},j)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(D){D.callback=null},e.unstable_continueExecution=function(){S||k||(S=!0,zt(_))},e.unstable_forceFrameRate=function(D){0>D||125<D?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):M=0<D?Math.floor(1e3/D):5},e.unstable_getCurrentPriorityLevel=function(){return m},e.unstable_getFirstCallbackNode=function(){return n(u)},e.unstable_next=function(D){switch(m){case 1:case 2:case 3:var j=3;break;default:j=m}var B=m;m=j;try{return D()}finally{m=B}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(D,j){switch(D){case 1:case 2:case 3:case 4:case 5:break;default:D=3}var B=m;m=D;try{return j()}finally{m=B}},e.unstable_scheduleCallback=function(D,j,B){var Y=e.unstable_now();switch(typeof B=="object"&&B!==null?(B=B.delay,B=typeof B=="number"&&0<B?Y+B:Y):B=Y,D){case 1:var q=-1;break;case 2:q=250;break;case 5:q=1073741823;break;case 4:q=1e4;break;default:q=5e3}return q=B+q,D={id:f++,callback:j,priorityLevel:D,startTime:B,expirationTime:q,sortIndex:-1},B>Y?(D.sortIndex=B,t(s,D),n(u)===null&&D===n(s)&&(w?(d(T),T=-1):w=!0,te(E,B-Y))):(D.sortIndex=q,t(u,D),S||k||(S=!0,zt(_))),D},e.unstable_shouldYield=Q,e.unstable_wrapCallback=function(D){var j=m;return function(){var B=m;m=j;try{return D.apply(this,arguments)}finally{m=B}}}})(Os);Fs.exports=Os;var wd=Fs.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var Us=R,We=wd;function L(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Is=new Set,jr={};function xn(e,t){Jn(e,t),Jn(e+"Capture",t)}function Jn(e,t){for(jr[e]=t,e=0;e<t.length;e++)Is.add(t[e])}var Ct=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),uo=Object.prototype.hasOwnProperty,Sd=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,cu={},fu={};function Ed(e){return uo.call(fu,e)?!0:uo.call(cu,e)?!1:Sd.test(e)?fu[e]=!0:(cu[e]=!0,!1)}function kd(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function xd(e,t,n,r){if(t===null||typeof t>"u"||kd(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function Me(e,t,n,r,l,i,o){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=l,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=o}var Pe={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){Pe[e]=new Me(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];Pe[t]=new Me(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){Pe[e]=new Me(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){Pe[e]=new Me(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){Pe[e]=new Me(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){Pe[e]=new Me(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){Pe[e]=new Me(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){Pe[e]=new Me(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){Pe[e]=new Me(e,5,!1,e.toLowerCase(),null,!1,!1)});var aa=/[\-:]([a-z])/g;function ua(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(aa,ua);Pe[t]=new Me(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(aa,ua);Pe[t]=new Me(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(aa,ua);Pe[t]=new Me(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){Pe[e]=new Me(e,1,!1,e.toLowerCase(),null,!1,!1)});Pe.xlinkHref=new Me("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){Pe[e]=new Me(e,1,!1,e.toLowerCase(),null,!0,!0)});function sa(e,t,n,r){var l=Pe.hasOwnProperty(t)?Pe[t]:null;(l!==null?l.type!==0:r||!(2<t.length)||t[0]!=="o"&&t[0]!=="O"||t[1]!=="n"&&t[1]!=="N")&&(xd(t,n,l,r)&&(n=null),r||l===null?Ed(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,""+n)):l.mustUseProperty?e[l.propertyName]=n===null?l.type===3?!1:"":n:(t=l.attributeName,r=l.attributeNamespace,n===null?e.removeAttribute(t):(l=l.type,n=l===3||l===4&&n===!0?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Tt=Us.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,dl=Symbol.for("react.element"),Nn=Symbol.for("react.portal"),Dn=Symbol.for("react.fragment"),ca=Symbol.for("react.strict_mode"),so=Symbol.for("react.profiler"),js=Symbol.for("react.provider"),As=Symbol.for("react.context"),fa=Symbol.for("react.forward_ref"),co=Symbol.for("react.suspense"),fo=Symbol.for("react.suspense_list"),da=Symbol.for("react.memo"),At=Symbol.for("react.lazy"),Bs=Symbol.for("react.offscreen"),du=Symbol.iterator;function fr(e){return e===null||typeof e!="object"?null:(e=du&&e[du]||e["@@iterator"],typeof e=="function"?e:null)}var oe=Object.assign,Fi;function Cr(e){if(Fi===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\n( *(at )?)/);Fi=t&&t[1]||""}return`
`+Fi+e}var Oi=!1;function Ui(e,t){if(!e||Oi)return"";Oi=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(t,[])}catch(s){var r=s}Reflect.construct(e,[],t)}else{try{t.call()}catch(s){r=s}e.call(t.prototype)}else{try{throw Error()}catch(s){r=s}e()}}catch(s){if(s&&r&&typeof s.stack=="string"){for(var l=s.stack.split(`
`),i=r.stack.split(`
`),o=l.length-1,a=i.length-1;1<=o&&0<=a&&l[o]!==i[a];)a--;for(;1<=o&&0<=a;o--,a--)if(l[o]!==i[a]){if(o!==1||a!==1)do if(o--,a--,0>a||l[o]!==i[a]){var u=`
`+l[o].replace(" at new "," at ");return e.displayName&&u.includes("<anonymous>")&&(u=u.replace("<anonymous>",e.displayName)),u}while(1<=o&&0<=a);break}}}finally{Oi=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?Cr(e):""}function Cd(e){switch(e.tag){case 5:return Cr(e.type);case 16:return Cr("Lazy");case 13:return Cr("Suspense");case 19:return Cr("SuspenseList");case 0:case 2:case 15:return e=Ui(e.type,!1),e;case 11:return e=Ui(e.type.render,!1),e;case 1:return e=Ui(e.type,!0),e;default:return""}}function po(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case Dn:return"Fragment";case Nn:return"Portal";case so:return"Profiler";case ca:return"StrictMode";case co:return"Suspense";case fo:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case As:return(e.displayName||"Context")+".Consumer";case js:return(e._context.displayName||"Context")+".Provider";case fa:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case da:return t=e.displayName||null,t!==null?t:po(e.type)||"Memo";case At:t=e._payload,e=e._init;try{return po(e(t))}catch{}}return null}function Pd(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=t.render,e=e.displayName||e.name||"",t.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return po(t);case 8:return t===ca?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t}return null}function bt(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function Vs(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(t==="checkbox"||t==="radio")}function Rd(e){var t=Vs(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&typeof n<"u"&&typeof n.get=="function"&&typeof n.set=="function"){var l=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return l.call(this)},set:function(o){r=""+o,i.call(this,o)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(o){r=""+o},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function pl(e){e._valueTracker||(e._valueTracker=Rd(e))}function Hs(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Vs(e)?e.checked?"true":"false":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function jl(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function ho(e,t){var n=t.checked;return oe({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function pu(e,t){var n=t.defaultValue==null?"":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=bt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type==="checkbox"||t.type==="radio"?t.checked!=null:t.value!=null}}function Ws(e,t){t=t.checked,t!=null&&sa(e,"checked",t,!1)}function mo(e,t){Ws(e,t);var n=bt(t.value),r=t.type;if(n!=null)r==="number"?(n===0&&e.value===""||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if(r==="submit"||r==="reset"){e.removeAttribute("value");return}t.hasOwnProperty("value")?vo(e,t.type,n):t.hasOwnProperty("defaultValue")&&vo(e,t.type,bt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function hu(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!(r!=="submit"&&r!=="reset"||t.value!==void 0&&t.value!==null))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,n!==""&&(e.name=n)}function vo(e,t,n){(t!=="number"||jl(e.ownerDocument)!==e)&&(n==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var Pr=Array.isArray;function $n(e,t,n,r){if(e=e.options,t){t={};for(var l=0;l<n.length;l++)t["$"+n[l]]=!0;for(n=0;n<e.length;n++)l=t.hasOwnProperty("$"+e[n].value),e[n].selected!==l&&(e[n].selected=l),l&&r&&(e[n].defaultSelected=!0)}else{for(n=""+bt(n),t=null,l=0;l<e.length;l++){if(e[l].value===n){e[l].selected=!0,r&&(e[l].defaultSelected=!0);return}t!==null||e[l].disabled||(t=e[l])}t!==null&&(t.selected=!0)}}function go(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(L(91));return oe({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function mu(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(L(92));if(Pr(n)){if(1<n.length)throw Error(L(93));n=n[0]}t=n}t==null&&(t=""),n=t}e._wrapperState={initialValue:bt(n)}}function $s(e,t){var n=bt(t.value),r=bt(t.defaultValue);n!=null&&(n=""+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=""+r)}function vu(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==""&&t!==null&&(e.value=t)}function Qs(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function yo(e,t){return e==null||e==="http://www.w3.org/1999/xhtml"?Qs(t):e==="http://www.w3.org/2000/svg"&&t==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var hl,Ks=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(t,n,r,l){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,l)})}:e}(function(e,t){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=t;else{for(hl=hl||document.createElement("div"),hl.innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=hl.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function Ar(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var _r={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Ld=["Webkit","ms","Moz","O"];Object.keys(_r).forEach(function(e){Ld.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),_r[t]=_r[e]})});function Ys(e,t,n){return t==null||typeof t=="boolean"||t===""?"":n||typeof t!="number"||t===0||_r.hasOwnProperty(e)&&_r[e]?(""+t).trim():t+"px"}function Xs(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf("--")===0,l=Ys(n,t[n],r);n==="float"&&(n="cssFloat"),r?e.setProperty(n,l):e[n]=l}}var _d=oe({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function wo(e,t){if(t){if(_d[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(L(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(L(60));if(typeof t.dangerouslySetInnerHTML!="object"||!("__html"in t.dangerouslySetInnerHTML))throw Error(L(61))}if(t.style!=null&&typeof t.style!="object")throw Error(L(62))}}function So(e,t){if(e.indexOf("-")===-1)return typeof t.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var Eo=null;function pa(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var ko=null,Qn=null,Kn=null;function gu(e){if(e=il(e)){if(typeof ko!="function")throw Error(L(280));var t=e.stateNode;t&&(t=pi(t),ko(e.stateNode,e.type,t))}}function Gs(e){Qn?Kn?Kn.push(e):Kn=[e]:Qn=e}function Js(){if(Qn){var e=Qn,t=Kn;if(Kn=Qn=null,gu(e),t)for(e=0;e<t.length;e++)gu(t[e])}}function Zs(e,t){return e(t)}function qs(){}var Ii=!1;function bs(e,t,n){if(Ii)return e(t,n);Ii=!0;try{return Zs(e,t,n)}finally{Ii=!1,(Qn!==null||Kn!==null)&&(qs(),Js())}}function Br(e,t){var n=e.stateNode;if(n===null)return null;var r=pi(n);if(r===null)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(e=e.type,r=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!="function")throw Error(L(231,t,typeof n));return n}var xo=!1;if(Ct)try{var dr={};Object.defineProperty(dr,"passive",{get:function(){xo=!0}}),window.addEventListener("test",dr,dr),window.removeEventListener("test",dr,dr)}catch{xo=!1}function Td(e,t,n,r,l,i,o,a,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(f){this.onError(f)}}var Tr=!1,Al=null,Bl=!1,Co=null,Nd={onError:function(e){Tr=!0,Al=e}};function Dd(e,t,n,r,l,i,o,a,u){Tr=!1,Al=null,Td.apply(Nd,arguments)}function zd(e,t,n,r,l,i,o,a,u){if(Dd.apply(this,arguments),Tr){if(Tr){var s=Al;Tr=!1,Al=null}else throw Error(L(198));Bl||(Bl=!0,Co=s)}}function Cn(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function ec(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function yu(e){if(Cn(e)!==e)throw Error(L(188))}function Md(e){var t=e.alternate;if(!t){if(t=Cn(e),t===null)throw Error(L(188));return t!==e?null:e}for(var n=e,r=t;;){var l=n.return;if(l===null)break;var i=l.alternate;if(i===null){if(r=l.return,r!==null){n=r;continue}break}if(l.child===i.child){for(i=l.child;i;){if(i===n)return yu(l),e;if(i===r)return yu(l),t;i=i.sibling}throw Error(L(188))}if(n.return!==r.return)n=l,r=i;else{for(var o=!1,a=l.child;a;){if(a===n){o=!0,n=l,r=i;break}if(a===r){o=!0,r=l,n=i;break}a=a.sibling}if(!o){for(a=i.child;a;){if(a===n){o=!0,n=i,r=l;break}if(a===r){o=!0,r=i,n=l;break}a=a.sibling}if(!o)throw Error(L(189))}}if(n.alternate!==r)throw Error(L(190))}if(n.tag!==3)throw Error(L(188));return n.stateNode.current===n?e:t}function tc(e){return e=Md(e),e!==null?nc(e):null}function nc(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=nc(e);if(t!==null)return t;e=e.sibling}return null}var rc=We.unstable_scheduleCallback,wu=We.unstable_cancelCallback,Fd=We.unstable_shouldYield,Od=We.unstable_requestPaint,fe=We.unstable_now,Ud=We.unstable_getCurrentPriorityLevel,ha=We.unstable_ImmediatePriority,lc=We.unstable_UserBlockingPriority,Vl=We.unstable_NormalPriority,Id=We.unstable_LowPriority,ic=We.unstable_IdlePriority,si=null,mt=null;function jd(e){if(mt&&typeof mt.onCommitFiberRoot=="function")try{mt.onCommitFiberRoot(si,e,void 0,(e.current.flags&128)===128)}catch{}}var at=Math.clz32?Math.clz32:Vd,Ad=Math.log,Bd=Math.LN2;function Vd(e){return e>>>=0,e===0?32:31-(Ad(e)/Bd|0)|0}var ml=64,vl=4194304;function Rr(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Hl(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,l=e.suspendedLanes,i=e.pingedLanes,o=n&268435455;if(o!==0){var a=o&~l;a!==0?r=Rr(a):(i&=o,i!==0&&(r=Rr(i)))}else o=n&~l,o!==0?r=Rr(o):i!==0&&(r=Rr(i));if(r===0)return 0;if(t!==0&&t!==r&&!(t&l)&&(l=r&-r,i=t&-t,l>=i||l===16&&(i&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-at(t),l=1<<n,r|=e[n],t&=~l;return r}function Hd(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Wd(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,l=e.expirationTimes,i=e.pendingLanes;0<i;){var o=31-at(i),a=1<<o,u=l[o];u===-1?(!(a&n)||a&r)&&(l[o]=Hd(a,t)):u<=t&&(e.expiredLanes|=a),i&=~a}}function Po(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function oc(){var e=ml;return ml<<=1,!(ml&4194240)&&(ml=64),e}function ji(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function rl(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-at(t),e[t]=n}function $d(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var l=31-at(n),i=1<<l;t[l]=0,r[l]=-1,e[l]=-1,n&=~i}}function ma(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-at(n),l=1<<r;l&t|e[r]&t&&(e[r]|=t),n&=~l}}var X=0;function ac(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var uc,va,sc,cc,fc,Ro=!1,gl=[],Qt=null,Kt=null,Yt=null,Vr=new Map,Hr=new Map,Vt=[],Qd="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Su(e,t){switch(e){case"focusin":case"focusout":Qt=null;break;case"dragenter":case"dragleave":Kt=null;break;case"mouseover":case"mouseout":Yt=null;break;case"pointerover":case"pointerout":Vr.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Hr.delete(t.pointerId)}}function pr(e,t,n,r,l,i){return e===null||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[l]},t!==null&&(t=il(t),t!==null&&va(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,l!==null&&t.indexOf(l)===-1&&t.push(l),e)}function Kd(e,t,n,r,l){switch(t){case"focusin":return Qt=pr(Qt,e,t,n,r,l),!0;case"dragenter":return Kt=pr(Kt,e,t,n,r,l),!0;case"mouseover":return Yt=pr(Yt,e,t,n,r,l),!0;case"pointerover":var i=l.pointerId;return Vr.set(i,pr(Vr.get(i)||null,e,t,n,r,l)),!0;case"gotpointercapture":return i=l.pointerId,Hr.set(i,pr(Hr.get(i)||null,e,t,n,r,l)),!0}return!1}function dc(e){var t=sn(e.target);if(t!==null){var n=Cn(t);if(n!==null){if(t=n.tag,t===13){if(t=ec(n),t!==null){e.blockedOn=t,fc(e.priority,function(){sc(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function _l(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=Lo(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);Eo=r,n.target.dispatchEvent(r),Eo=null}else return t=il(n),t!==null&&va(t),e.blockedOn=n,!1;t.shift()}return!0}function Eu(e,t,n){_l(e)&&n.delete(t)}function Yd(){Ro=!1,Qt!==null&&_l(Qt)&&(Qt=null),Kt!==null&&_l(Kt)&&(Kt=null),Yt!==null&&_l(Yt)&&(Yt=null),Vr.forEach(Eu),Hr.forEach(Eu)}function hr(e,t){e.blockedOn===t&&(e.blockedOn=null,Ro||(Ro=!0,We.unstable_scheduleCallback(We.unstable_NormalPriority,Yd)))}function Wr(e){function t(l){return hr(l,e)}if(0<gl.length){hr(gl[0],e);for(var n=1;n<gl.length;n++){var r=gl[n];r.blockedOn===e&&(r.blockedOn=null)}}for(Qt!==null&&hr(Qt,e),Kt!==null&&hr(Kt,e),Yt!==null&&hr(Yt,e),Vr.forEach(t),Hr.forEach(t),n=0;n<Vt.length;n++)r=Vt[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<Vt.length&&(n=Vt[0],n.blockedOn===null);)dc(n),n.blockedOn===null&&Vt.shift()}var Yn=Tt.ReactCurrentBatchConfig,Wl=!0;function Xd(e,t,n,r){var l=X,i=Yn.transition;Yn.transition=null;try{X=1,ga(e,t,n,r)}finally{X=l,Yn.transition=i}}function Gd(e,t,n,r){var l=X,i=Yn.transition;Yn.transition=null;try{X=4,ga(e,t,n,r)}finally{X=l,Yn.transition=i}}function ga(e,t,n,r){if(Wl){var l=Lo(e,t,n,r);if(l===null)Xi(e,t,r,$l,n),Su(e,r);else if(Kd(l,e,t,n,r))r.stopPropagation();else if(Su(e,r),t&4&&-1<Qd.indexOf(e)){for(;l!==null;){var i=il(l);if(i!==null&&uc(i),i=Lo(e,t,n,r),i===null&&Xi(e,t,r,$l,n),i===l)break;l=i}l!==null&&r.stopPropagation()}else Xi(e,t,r,null,n)}}var $l=null;function Lo(e,t,n,r){if($l=null,e=pa(r),e=sn(e),e!==null)if(t=Cn(e),t===null)e=null;else if(n=t.tag,n===13){if(e=ec(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return $l=e,null}function pc(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ud()){case ha:return 1;case lc:return 4;case Vl:case Id:return 16;case ic:return 536870912;default:return 16}default:return 16}}var Wt=null,ya=null,Tl=null;function hc(){if(Tl)return Tl;var e,t=ya,n=t.length,r,l="value"in Wt?Wt.value:Wt.textContent,i=l.length;for(e=0;e<n&&t[e]===l[e];e++);var o=n-e;for(r=1;r<=o&&t[n-r]===l[i-r];r++);return Tl=l.slice(e,1<r?1-r:void 0)}function Nl(e){var t=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function yl(){return!0}function ku(){return!1}function Qe(e){function t(n,r,l,i,o){this._reactName=n,this._targetInst=l,this.type=r,this.nativeEvent=i,this.target=o,this.currentTarget=null;for(var a in e)e.hasOwnProperty(a)&&(n=e[a],this[a]=n?n(i):i[a]);return this.isDefaultPrevented=(i.defaultPrevented!=null?i.defaultPrevented:i.returnValue===!1)?yl:ku,this.isPropagationStopped=ku,this}return oe(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!="unknown"&&(n.returnValue=!1),this.isDefaultPrevented=yl)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!="unknown"&&(n.cancelBubble=!0),this.isPropagationStopped=yl)},persist:function(){},isPersistent:yl}),t}var lr={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},wa=Qe(lr),ll=oe({},lr,{view:0,detail:0}),Jd=Qe(ll),Ai,Bi,mr,ci=oe({},ll,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Sa,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==mr&&(mr&&e.type==="mousemove"?(Ai=e.screenX-mr.screenX,Bi=e.screenY-mr.screenY):Bi=Ai=0,mr=e),Ai)},movementY:function(e){return"movementY"in e?e.movementY:Bi}}),xu=Qe(ci),Zd=oe({},ci,{dataTransfer:0}),qd=Qe(Zd),bd=oe({},ll,{relatedTarget:0}),Vi=Qe(bd),ep=oe({},lr,{animationName:0,elapsedTime:0,pseudoElement:0}),tp=Qe(ep),np=oe({},lr,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),rp=Qe(np),lp=oe({},lr,{data:0}),Cu=Qe(lp),ip={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},op={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ap={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function up(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=ap[e])?!!t[e]:!1}function Sa(){return up}var sp=oe({},ll,{key:function(e){if(e.key){var t=ip[e.key]||e.key;if(t!=="Unidentified")return t}return e.type==="keypress"?(e=Nl(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?op[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Sa,charCode:function(e){return e.type==="keypress"?Nl(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?Nl(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),cp=Qe(sp),fp=oe({},ci,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Pu=Qe(fp),dp=oe({},ll,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Sa}),pp=Qe(dp),hp=oe({},lr,{propertyName:0,elapsedTime:0,pseudoElement:0}),mp=Qe(hp),vp=oe({},ci,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),gp=Qe(vp),yp=[9,13,27,32],Ea=Ct&&"CompositionEvent"in window,Nr=null;Ct&&"documentMode"in document&&(Nr=document.documentMode);var wp=Ct&&"TextEvent"in window&&!Nr,mc=Ct&&(!Ea||Nr&&8<Nr&&11>=Nr),Ru=String.fromCharCode(32),Lu=!1;function vc(e,t){switch(e){case"keyup":return yp.indexOf(t.keyCode)!==-1;case"keydown":return t.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function gc(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var zn=!1;function Sp(e,t){switch(e){case"compositionend":return gc(t);case"keypress":return t.which!==32?null:(Lu=!0,Ru);case"textInput":return e=t.data,e===Ru&&Lu?null:e;default:return null}}function Ep(e,t){if(zn)return e==="compositionend"||!Ea&&vc(e,t)?(e=hc(),Tl=ya=Wt=null,zn=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return mc&&t.locale!=="ko"?null:t.data;default:return null}}var kp={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function _u(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t==="input"?!!kp[e.type]:t==="textarea"}function yc(e,t,n,r){Gs(r),t=Ql(t,"onChange"),0<t.length&&(n=new wa("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Dr=null,$r=null;function xp(e){Tc(e,0)}function fi(e){var t=On(e);if(Hs(t))return e}function Cp(e,t){if(e==="change")return t}var wc=!1;if(Ct){var Hi;if(Ct){var Wi="oninput"in document;if(!Wi){var Tu=document.createElement("div");Tu.setAttribute("oninput","return;"),Wi=typeof Tu.oninput=="function"}Hi=Wi}else Hi=!1;wc=Hi&&(!document.documentMode||9<document.documentMode)}function Nu(){Dr&&(Dr.detachEvent("onpropertychange",Sc),$r=Dr=null)}function Sc(e){if(e.propertyName==="value"&&fi($r)){var t=[];yc(t,$r,e,pa(e)),bs(xp,t)}}function Pp(e,t,n){e==="focusin"?(Nu(),Dr=t,$r=n,Dr.attachEvent("onpropertychange",Sc)):e==="focusout"&&Nu()}function Rp(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return fi($r)}function Lp(e,t){if(e==="click")return fi(t)}function _p(e,t){if(e==="input"||e==="change")return fi(t)}function Tp(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var st=typeof Object.is=="function"?Object.is:Tp;function Qr(e,t){if(st(e,t))return!0;if(typeof e!="object"||e===null||typeof t!="object"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var l=n[r];if(!uo.call(t,l)||!st(e[l],t[l]))return!1}return!0}function Du(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function zu(e,t){var n=Du(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=Du(n)}}function Ec(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Ec(e,t.parentNode):"contains"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function kc(){for(var e=window,t=jl();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href=="string"}catch{n=!1}if(n)e=t.contentWindow;else break;t=jl(e.document)}return t}function ka(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||t==="textarea"||e.contentEditable==="true")}function Np(e){var t=kc(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Ec(n.ownerDocument.documentElement,n)){if(r!==null&&ka(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var l=n.textContent.length,i=Math.min(r.start,l);r=r.end===void 0?i:Math.min(r.end,l),!e.extend&&i>r&&(l=r,r=i,i=l),l=zu(n,i);var o=zu(n,r);l&&o&&(e.rangeCount!==1||e.anchorNode!==l.node||e.anchorOffset!==l.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&(t=t.createRange(),t.setStart(l.node,l.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus=="function"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Dp=Ct&&"documentMode"in document&&11>=document.documentMode,Mn=null,_o=null,zr=null,To=!1;function Mu(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;To||Mn==null||Mn!==jl(r)||(r=Mn,"selectionStart"in r&&ka(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),zr&&Qr(zr,r)||(zr=r,r=Ql(_o,"onSelect"),0<r.length&&(t=new wa("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=Mn)))}function wl(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Fn={animationend:wl("Animation","AnimationEnd"),animationiteration:wl("Animation","AnimationIteration"),animationstart:wl("Animation","AnimationStart"),transitionend:wl("Transition","TransitionEnd")},$i={},xc={};Ct&&(xc=document.createElement("div").style,"AnimationEvent"in window||(delete Fn.animationend.animation,delete Fn.animationiteration.animation,delete Fn.animationstart.animation),"TransitionEvent"in window||delete Fn.transitionend.transition);function di(e){if($i[e])return $i[e];if(!Fn[e])return e;var t=Fn[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in xc)return $i[e]=t[n];return e}var Cc=di("animationend"),Pc=di("animationiteration"),Rc=di("animationstart"),Lc=di("transitionend"),_c=new Map,Fu="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function tn(e,t){_c.set(e,t),xn(t,[e])}for(var Qi=0;Qi<Fu.length;Qi++){var Ki=Fu[Qi],zp=Ki.toLowerCase(),Mp=Ki[0].toUpperCase()+Ki.slice(1);tn(zp,"on"+Mp)}tn(Cc,"onAnimationEnd");tn(Pc,"onAnimationIteration");tn(Rc,"onAnimationStart");tn("dblclick","onDoubleClick");tn("focusin","onFocus");tn("focusout","onBlur");tn(Lc,"onTransitionEnd");Jn("onMouseEnter",["mouseout","mouseover"]);Jn("onMouseLeave",["mouseout","mouseover"]);Jn("onPointerEnter",["pointerout","pointerover"]);Jn("onPointerLeave",["pointerout","pointerover"]);xn("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));xn("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));xn("onBeforeInput",["compositionend","keypress","textInput","paste"]);xn("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));xn("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));xn("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Lr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fp=new Set("cancel close invalid load scroll toggle".split(" ").concat(Lr));function Ou(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,zd(r,t,void 0,e),e.currentTarget=null}function Tc(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],l=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var o=r.length-1;0<=o;o--){var a=r[o],u=a.instance,s=a.currentTarget;if(a=a.listener,u!==i&&l.isPropagationStopped())break e;Ou(l,a,s),i=u}else for(o=0;o<r.length;o++){if(a=r[o],u=a.instance,s=a.currentTarget,a=a.listener,u!==i&&l.isPropagationStopped())break e;Ou(l,a,s),i=u}}}if(Bl)throw e=Co,Bl=!1,Co=null,e}function b(e,t){var n=t[Fo];n===void 0&&(n=t[Fo]=new Set);var r=e+"__bubble";n.has(r)||(Nc(t,e,2,!1),n.add(r))}function Yi(e,t,n){var r=0;t&&(r|=4),Nc(n,e,r,t)}var Sl="_reactListening"+Math.random().toString(36).slice(2);function Kr(e){if(!e[Sl]){e[Sl]=!0,Is.forEach(function(n){n!=="selectionchange"&&(Fp.has(n)||Yi(n,!1,e),Yi(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[Sl]||(t[Sl]=!0,Yi("selectionchange",!1,t))}}function Nc(e,t,n,r){switch(pc(t)){case 1:var l=Xd;break;case 4:l=Gd;break;default:l=ga}n=l.bind(null,t,n,e),l=void 0,!xo||t!=="touchstart"&&t!=="touchmove"&&t!=="wheel"||(l=!0),r?l!==void 0?e.addEventListener(t,n,{capture:!0,passive:l}):e.addEventListener(t,n,!0):l!==void 0?e.addEventListener(t,n,{passive:l}):e.addEventListener(t,n,!1)}function Xi(e,t,n,r,l){var i=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var o=r.tag;if(o===3||o===4){var a=r.stateNode.containerInfo;if(a===l||a.nodeType===8&&a.parentNode===l)break;if(o===4)for(o=r.return;o!==null;){var u=o.tag;if((u===3||u===4)&&(u=o.stateNode.containerInfo,u===l||u.nodeType===8&&u.parentNode===l))return;o=o.return}for(;a!==null;){if(o=sn(a),o===null)return;if(u=o.tag,u===5||u===6){r=i=o;continue e}a=a.parentNode}}r=r.return}bs(function(){var s=i,f=pa(n),p=[];e:{var m=_c.get(e);if(m!==void 0){var k=wa,S=e;switch(e){case"keypress":if(Nl(n)===0)break e;case"keydown":case"keyup":k=cp;break;case"focusin":S="focus",k=Vi;break;case"focusout":S="blur",k=Vi;break;case"beforeblur":case"afterblur":k=Vi;break;case"click":if(n.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":k=xu;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":k=qd;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":k=pp;break;case Cc:case Pc:case Rc:k=tp;break;case Lc:k=mp;break;case"scroll":k=Jd;break;case"wheel":k=gp;break;case"copy":case"cut":case"paste":k=rp;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":k=Pu}var w=(t&4)!==0,C=!w&&e==="scroll",d=w?m!==null?m+"Capture":null:m;w=[];for(var c=s,h;c!==null;){h=c;var E=h.stateNode;if(h.tag===5&&E!==null&&(h=E,d!==null&&(E=Br(c,d),E!=null&&w.push(Yr(c,E,h)))),C)break;c=c.return}0<w.length&&(m=new k(m,S,null,n,f),p.push({event:m,listeners:w}))}}if(!(t&7)){e:{if(m=e==="mouseover"||e==="pointerover",k=e==="mouseout"||e==="pointerout",m&&n!==Eo&&(S=n.relatedTarget||n.fromElement)&&(sn(S)||S[Pt]))break e;if((k||m)&&(m=f.window===f?f:(m=f.ownerDocument)?m.defaultView||m.parentWindow:window,k?(S=n.relatedTarget||n.toElement,k=s,S=S?sn(S):null,S!==null&&(C=Cn(S),S!==C||S.tag!==5&&S.tag!==6)&&(S=null)):(k=null,S=s),k!==S)){if(w=xu,E="onMouseLeave",d="onMouseEnter",c="mouse",(e==="pointerout"||e==="pointerover")&&(w=Pu,E="onPointerLeave",d="onPointerEnter",c="pointer"),C=k==null?m:On(k),h=S==null?m:On(S),m=new w(E,c+"leave",k,n,f),m.target=C,m.relatedTarget=h,E=null,sn(f)===s&&(w=new w(d,c+"enter",S,n,f),w.target=h,w.relatedTarget=C,E=w),C=E,k&&S)t:{for(w=k,d=S,c=0,h=w;h;h=Tn(h))c++;for(h=0,E=d;E;E=Tn(E))h++;for(;0<c-h;)w=Tn(w),c--;for(;0<h-c;)d=Tn(d),h--;for(;c--;){if(w===d||d!==null&&w===d.alternate)break t;w=Tn(w),d=Tn(d)}w=null}else w=null;k!==null&&Uu(p,m,k,w,!1),S!==null&&C!==null&&Uu(p,C,S,w,!0)}}e:{if(m=s?On(s):window,k=m.nodeName&&m.nodeName.toLowerCase(),k==="select"||k==="input"&&m.type==="file")var _=Cp;else if(_u(m))if(wc)_=_p;else{_=Rp;var v=Pp}else(k=m.nodeName)&&k.toLowerCase()==="input"&&(m.type==="checkbox"||m.type==="radio")&&(_=Lp);if(_&&(_=_(e,s))){yc(p,_,n,f);break e}v&&v(e,m,s),e==="focusout"&&(v=m._wrapperState)&&v.controlled&&m.type==="number"&&vo(m,"number",m.value)}switch(v=s?On(s):window,e){case"focusin":(_u(v)||v.contentEditable==="true")&&(Mn=v,_o=s,zr=null);break;case"focusout":zr=_o=Mn=null;break;case"mousedown":To=!0;break;case"contextmenu":case"mouseup":case"dragend":To=!1,Mu(p,n,f);break;case"selectionchange":if(Dp)break;case"keydown":case"keyup":Mu(p,n,f)}var P;if(Ea)e:{switch(e){case"compositionstart":var T="onCompositionStart";break e;case"compositionend":T="onCompositionEnd";break e;case"compositionupdate":T="onCompositionUpdate";break e}T=void 0}else zn?vc(e,n)&&(T="onCompositionEnd"):e==="keydown"&&n.keyCode===229&&(T="onCompositionStart");T&&(mc&&n.locale!=="ko"&&(zn||T!=="onCompositionStart"?T==="onCompositionEnd"&&zn&&(P=hc()):(Wt=f,ya="value"in Wt?Wt.value:Wt.textContent,zn=!0)),v=Ql(s,T),0<v.length&&(T=new Cu(T,e,null,n,f),p.push({event:T,listeners:v}),P?T.data=P:(P=gc(n),P!==null&&(T.data=P)))),(P=wp?Sp(e,n):Ep(e,n))&&(s=Ql(s,"onBeforeInput"),0<s.length&&(f=new Cu("onBeforeInput","beforeinput",null,n,f),p.push({event:f,listeners:s}),f.data=P))}Tc(p,t)})}function Yr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ql(e,t){for(var n=t+"Capture",r=[];e!==null;){var l=e,i=l.stateNode;l.tag===5&&i!==null&&(l=i,i=Br(e,n),i!=null&&r.unshift(Yr(e,i,l)),i=Br(e,t),i!=null&&r.push(Yr(e,i,l))),e=e.return}return r}function Tn(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function Uu(e,t,n,r,l){for(var i=t._reactName,o=[];n!==null&&n!==r;){var a=n,u=a.alternate,s=a.stateNode;if(u!==null&&u===r)break;a.tag===5&&s!==null&&(a=s,l?(u=Br(n,i),u!=null&&o.unshift(Yr(n,u,a))):l||(u=Br(n,i),u!=null&&o.push(Yr(n,u,a)))),n=n.return}o.length!==0&&e.push({event:t,listeners:o})}var Op=/\r\n?/g,Up=/\u0000|\uFFFD/g;function Iu(e){return(typeof e=="string"?e:""+e).replace(Op,`
`).replace(Up,"")}function El(e,t,n){if(t=Iu(t),Iu(e)!==t&&n)throw Error(L(425))}function Kl(){}var No=null,Do=null;function zo(e,t){return e==="textarea"||e==="noscript"||typeof t.children=="string"||typeof t.children=="number"||typeof t.dangerouslySetInnerHTML=="object"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Mo=typeof setTimeout=="function"?setTimeout:void 0,Ip=typeof clearTimeout=="function"?clearTimeout:void 0,ju=typeof Promise=="function"?Promise:void 0,jp=typeof queueMicrotask=="function"?queueMicrotask:typeof ju<"u"?function(e){return ju.resolve(null).then(e).catch(Ap)}:Mo;function Ap(e){setTimeout(function(){throw e})}function Gi(e,t){var n=t,r=0;do{var l=n.nextSibling;if(e.removeChild(n),l&&l.nodeType===8)if(n=l.data,n==="/$"){if(r===0){e.removeChild(l),Wr(t);return}r--}else n!=="$"&&n!=="$?"&&n!=="$!"||r++;n=l}while(n);Wr(t)}function Xt(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t==="$"||t==="$!"||t==="$?")break;if(t==="/$")return null}}return e}function Au(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="$"||n==="$!"||n==="$?"){if(t===0)return e;t--}else n==="/$"&&t++}e=e.previousSibling}return null}var ir=Math.random().toString(36).slice(2),ht="__reactFiber$"+ir,Xr="__reactProps$"+ir,Pt="__reactContainer$"+ir,Fo="__reactEvents$"+ir,Bp="__reactListeners$"+ir,Vp="__reactHandles$"+ir;function sn(e){var t=e[ht];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Pt]||n[ht]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=Au(e);e!==null;){if(n=e[ht])return n;e=Au(e)}return t}e=n,n=e.parentNode}return null}function il(e){return e=e[ht]||e[Pt],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function On(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(L(33))}function pi(e){return e[Xr]||null}var Oo=[],Un=-1;function nn(e){return{current:e}}function ee(e){0>Un||(e.current=Oo[Un],Oo[Un]=null,Un--)}function Z(e,t){Un++,Oo[Un]=e.current,e.current=t}var en={},Te=nn(en),Ue=nn(!1),vn=en;function Zn(e,t){var n=e.type.contextTypes;if(!n)return en;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var l={},i;for(i in n)l[i]=t[i];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=l),l}function Ie(e){return e=e.childContextTypes,e!=null}function Yl(){ee(Ue),ee(Te)}function Bu(e,t,n){if(Te.current!==en)throw Error(L(168));Z(Te,t),Z(Ue,n)}function Dc(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!="function")return n;r=r.getChildContext();for(var l in r)if(!(l in t))throw Error(L(108,Pd(e)||"Unknown",l));return oe({},n,r)}function Xl(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||en,vn=Te.current,Z(Te,e),Z(Ue,Ue.current),!0}function Vu(e,t,n){var r=e.stateNode;if(!r)throw Error(L(169));n?(e=Dc(e,t,vn),r.__reactInternalMemoizedMergedChildContext=e,ee(Ue),ee(Te),Z(Te,e)):ee(Ue),Z(Ue,n)}var wt=null,hi=!1,Ji=!1;function zc(e){wt===null?wt=[e]:wt.push(e)}function Hp(e){hi=!0,zc(e)}function rn(){if(!Ji&&wt!==null){Ji=!0;var e=0,t=X;try{var n=wt;for(X=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}wt=null,hi=!1}catch(l){throw wt!==null&&(wt=wt.slice(e+1)),rc(ha,rn),l}finally{X=t,Ji=!1}}return null}var In=[],jn=0,Gl=null,Jl=0,Ge=[],Je=0,gn=null,St=1,Et="";function an(e,t){In[jn++]=Jl,In[jn++]=Gl,Gl=e,Jl=t}function Mc(e,t,n){Ge[Je++]=St,Ge[Je++]=Et,Ge[Je++]=gn,gn=e;var r=St;e=Et;var l=32-at(r)-1;r&=~(1<<l),n+=1;var i=32-at(t)+l;if(30<i){var o=l-l%5;i=(r&(1<<o)-1).toString(32),r>>=o,l-=o,St=1<<32-at(t)+l|n<<l|r,Et=i+e}else St=1<<i|n<<l|r,Et=e}function xa(e){e.return!==null&&(an(e,1),Mc(e,1,0))}function Ca(e){for(;e===Gl;)Gl=In[--jn],In[jn]=null,Jl=In[--jn],In[jn]=null;for(;e===gn;)gn=Ge[--Je],Ge[Je]=null,Et=Ge[--Je],Ge[Je]=null,St=Ge[--Je],Ge[Je]=null}var He=null,Ve=null,re=!1,ot=null;function Fc(e,t){var n=Ze(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function Hu(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,He=e,Ve=Xt(t.firstChild),!0):!1;case 6:return t=e.pendingProps===""||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,He=e,Ve=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=gn!==null?{id:St,overflow:Et}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=Ze(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,He=e,Ve=null,!0):!1;default:return!1}}function Uo(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Io(e){if(re){var t=Ve;if(t){var n=t;if(!Hu(e,t)){if(Uo(e))throw Error(L(418));t=Xt(n.nextSibling);var r=He;t&&Hu(e,t)?Fc(r,n):(e.flags=e.flags&-4097|2,re=!1,He=e)}}else{if(Uo(e))throw Error(L(418));e.flags=e.flags&-4097|2,re=!1,He=e}}}function Wu(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;He=e}function kl(e){if(e!==He)return!1;if(!re)return Wu(e),re=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!=="head"&&t!=="body"&&!zo(e.type,e.memoizedProps)),t&&(t=Ve)){if(Uo(e))throw Oc(),Error(L(418));for(;t;)Fc(e,t),t=Xt(t.nextSibling)}if(Wu(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(L(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n==="/$"){if(t===0){Ve=Xt(e.nextSibling);break e}t--}else n!=="$"&&n!=="$!"&&n!=="$?"||t++}e=e.nextSibling}Ve=null}}else Ve=He?Xt(e.stateNode.nextSibling):null;return!0}function Oc(){for(var e=Ve;e;)e=Xt(e.nextSibling)}function qn(){Ve=He=null,re=!1}function Pa(e){ot===null?ot=[e]:ot.push(e)}var Wp=Tt.ReactCurrentBatchConfig;function rt(e,t){if(e&&e.defaultProps){t=oe({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var Zl=nn(null),ql=null,An=null,Ra=null;function La(){Ra=An=ql=null}function _a(e){var t=Zl.current;ee(Zl),e._currentValue=t}function jo(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Xn(e,t){ql=e,Ra=An=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(Oe=!0),e.firstContext=null)}function be(e){var t=e._currentValue;if(Ra!==e)if(e={context:e,memoizedValue:t,next:null},An===null){if(ql===null)throw Error(L(308));An=e,ql.dependencies={lanes:0,firstContext:e}}else An=An.next=e;return t}var cn=null;function Ta(e){cn===null?cn=[e]:cn.push(e)}function Uc(e,t,n,r){var l=t.interleaved;return l===null?(n.next=n,Ta(t)):(n.next=l.next,l.next=n),t.interleaved=n,Rt(e,r)}function Rt(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var Bt=!1;function Na(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ic(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function kt(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Gt(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,K&2){var l=r.pending;return l===null?t.next=t:(t.next=l.next,l.next=t),r.pending=t,Rt(e,n)}return l=r.interleaved,l===null?(t.next=t,Ta(r)):(t.next=l.next,l.next=t),r.interleaved=t,Rt(e,n)}function Dl(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,ma(e,n)}}function $u(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var l=null,i=null;if(n=n.firstBaseUpdate,n!==null){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};i===null?l=i=o:i=i.next=o,n=n.next}while(n!==null);i===null?l=i=t:i=i.next=t}else l=i=t;n={baseState:r.baseState,firstBaseUpdate:l,lastBaseUpdate:i,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function bl(e,t,n,r){var l=e.updateQueue;Bt=!1;var i=l.firstBaseUpdate,o=l.lastBaseUpdate,a=l.shared.pending;if(a!==null){l.shared.pending=null;var u=a,s=u.next;u.next=null,o===null?i=s:o.next=s,o=u;var f=e.alternate;f!==null&&(f=f.updateQueue,a=f.lastBaseUpdate,a!==o&&(a===null?f.firstBaseUpdate=s:a.next=s,f.lastBaseUpdate=u))}if(i!==null){var p=l.baseState;o=0,f=s=u=null,a=i;do{var m=a.lane,k=a.eventTime;if((r&m)===m){f!==null&&(f=f.next={eventTime:k,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var S=e,w=a;switch(m=t,k=n,w.tag){case 1:if(S=w.payload,typeof S=="function"){p=S.call(k,p,m);break e}p=S;break e;case 3:S.flags=S.flags&-65537|128;case 0:if(S=w.payload,m=typeof S=="function"?S.call(k,p,m):S,m==null)break e;p=oe({},p,m);break e;case 2:Bt=!0}}a.callback!==null&&a.lane!==0&&(e.flags|=64,m=l.effects,m===null?l.effects=[a]:m.push(a))}else k={eventTime:k,lane:m,tag:a.tag,payload:a.payload,callback:a.callback,next:null},f===null?(s=f=k,u=p):f=f.next=k,o|=m;if(a=a.next,a===null){if(a=l.shared.pending,a===null)break;m=a,a=m.next,m.next=null,l.lastBaseUpdate=m,l.shared.pending=null}}while(1);if(f===null&&(u=p),l.baseState=u,l.firstBaseUpdate=s,l.lastBaseUpdate=f,t=l.shared.interleaved,t!==null){l=t;do o|=l.lane,l=l.next;while(l!==t)}else i===null&&(l.shared.lanes=0);wn|=o,e.lanes=o,e.memoizedState=p}}function Qu(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],l=r.callback;if(l!==null){if(r.callback=null,r=n,typeof l!="function")throw Error(L(191,l));l.call(r)}}}var jc=new Us.Component().refs;function Ao(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:oe({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var mi={isMounted:function(e){return(e=e._reactInternals)?Cn(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ze(),l=Zt(e),i=kt(r,l);i.payload=t,n!=null&&(i.callback=n),t=Gt(e,i,l),t!==null&&(ut(t,e,l,r),Dl(t,e,l))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ze(),l=Zt(e),i=kt(r,l);i.tag=1,i.payload=t,n!=null&&(i.callback=n),t=Gt(e,i,l),t!==null&&(ut(t,e,l,r),Dl(t,e,l))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ze(),r=Zt(e),l=kt(n,r);l.tag=2,t!=null&&(l.callback=t),t=Gt(e,l,r),t!==null&&(ut(t,e,r,n),Dl(t,e,r))}};function Ku(e,t,n,r,l,i,o){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(r,i,o):t.prototype&&t.prototype.isPureReactComponent?!Qr(n,r)||!Qr(l,i):!0}function Ac(e,t,n){var r=!1,l=en,i=t.contextType;return typeof i=="object"&&i!==null?i=be(i):(l=Ie(t)?vn:Te.current,r=t.contextTypes,i=(r=r!=null)?Zn(e,l):en),t=new t(n,i),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=mi,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=l,e.__reactInternalMemoizedMaskedChildContext=i),t}function Yu(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps=="function"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps=="function"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mi.enqueueReplaceState(t,t.state,null)}function Bo(e,t,n,r){var l=e.stateNode;l.props=n,l.state=e.memoizedState,l.refs=jc,Na(e);var i=t.contextType;typeof i=="object"&&i!==null?l.context=be(i):(i=Ie(t)?vn:Te.current,l.context=Zn(e,i)),l.state=e.memoizedState,i=t.getDerivedStateFromProps,typeof i=="function"&&(Ao(e,t,i,n),l.state=e.memoizedState),typeof t.getDerivedStateFromProps=="function"||typeof l.getSnapshotBeforeUpdate=="function"||typeof l.UNSAFE_componentWillMount!="function"&&typeof l.componentWillMount!="function"||(t=l.state,typeof l.componentWillMount=="function"&&l.componentWillMount(),typeof l.UNSAFE_componentWillMount=="function"&&l.UNSAFE_componentWillMount(),t!==l.state&&mi.enqueueReplaceState(l,l.state,null),bl(e,n,l,r),l.state=e.memoizedState),typeof l.componentDidMount=="function"&&(e.flags|=4194308)}function vr(e,t,n){if(e=n.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(L(309));var r=n.stateNode}if(!r)throw Error(L(147,e));var l=r,i=""+e;return t!==null&&t.ref!==null&&typeof t.ref=="function"&&t.ref._stringRef===i?t.ref:(t=function(o){var a=l.refs;a===jc&&(a=l.refs={}),o===null?delete a[i]:a[i]=o},t._stringRef=i,t)}if(typeof e!="string")throw Error(L(284));if(!n._owner)throw Error(L(290,e))}return e}function xl(e,t){throw e=Object.prototype.toString.call(t),Error(L(31,e==="[object Object]"?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Xu(e){var t=e._init;return t(e._payload)}function Bc(e){function t(d,c){if(e){var h=d.deletions;h===null?(d.deletions=[c],d.flags|=16):h.push(c)}}function n(d,c){if(!e)return null;for(;c!==null;)t(d,c),c=c.sibling;return null}function r(d,c){for(d=new Map;c!==null;)c.key!==null?d.set(c.key,c):d.set(c.index,c),c=c.sibling;return d}function l(d,c){return d=qt(d,c),d.index=0,d.sibling=null,d}function i(d,c,h){return d.index=h,e?(h=d.alternate,h!==null?(h=h.index,h<c?(d.flags|=2,c):h):(d.flags|=2,c)):(d.flags|=1048576,c)}function o(d){return e&&d.alternate===null&&(d.flags|=2),d}function a(d,c,h,E){return c===null||c.tag!==6?(c=ro(h,d.mode,E),c.return=d,c):(c=l(c,h),c.return=d,c)}function u(d,c,h,E){var _=h.type;return _===Dn?f(d,c,h.props.children,E,h.key):c!==null&&(c.elementType===_||typeof _=="object"&&_!==null&&_.$$typeof===At&&Xu(_)===c.type)?(E=l(c,h.props),E.ref=vr(d,c,h),E.return=d,E):(E=Il(h.type,h.key,h.props,null,d.mode,E),E.ref=vr(d,c,h),E.return=d,E)}function s(d,c,h,E){return c===null||c.tag!==4||c.stateNode.containerInfo!==h.containerInfo||c.stateNode.implementation!==h.implementation?(c=lo(h,d.mode,E),c.return=d,c):(c=l(c,h.children||[]),c.return=d,c)}function f(d,c,h,E,_){return c===null||c.tag!==7?(c=mn(h,d.mode,E,_),c.return=d,c):(c=l(c,h),c.return=d,c)}function p(d,c,h){if(typeof c=="string"&&c!==""||typeof c=="number")return c=ro(""+c,d.mode,h),c.return=d,c;if(typeof c=="object"&&c!==null){switch(c.$$typeof){case dl:return h=Il(c.type,c.key,c.props,null,d.mode,h),h.ref=vr(d,null,c),h.return=d,h;case Nn:return c=lo(c,d.mode,h),c.return=d,c;case At:var E=c._init;return p(d,E(c._payload),h)}if(Pr(c)||fr(c))return c=mn(c,d.mode,h,null),c.return=d,c;xl(d,c)}return null}function m(d,c,h,E){var _=c!==null?c.key:null;if(typeof h=="string"&&h!==""||typeof h=="number")return _!==null?null:a(d,c,""+h,E);if(typeof h=="object"&&h!==null){switch(h.$$typeof){case dl:return h.key===_?u(d,c,h,E):null;case Nn:return h.key===_?s(d,c,h,E):null;case At:return _=h._init,m(d,c,_(h._payload),E)}if(Pr(h)||fr(h))return _!==null?null:f(d,c,h,E,null);xl(d,h)}return null}function k(d,c,h,E,_){if(typeof E=="string"&&E!==""||typeof E=="number")return d=d.get(h)||null,a(c,d,""+E,_);if(typeof E=="object"&&E!==null){switch(E.$$typeof){case dl:return d=d.get(E.key===null?h:E.key)||null,u(c,d,E,_);case Nn:return d=d.get(E.key===null?h:E.key)||null,s(c,d,E,_);case At:var v=E._init;return k(d,c,h,v(E._payload),_)}if(Pr(E)||fr(E))return d=d.get(h)||null,f(c,d,E,_,null);xl(c,E)}return null}function S(d,c,h,E){for(var _=null,v=null,P=c,T=c=0,M=null;P!==null&&T<h.length;T++){P.index>T?(M=P,P=null):M=P.sibling;var O=m(d,P,h[T],E);if(O===null){P===null&&(P=M);break}e&&P&&O.alternate===null&&t(d,P),c=i(O,c,T),v===null?_=O:v.sibling=O,v=O,P=M}if(T===h.length)return n(d,P),re&&an(d,T),_;if(P===null){for(;T<h.length;T++)P=p(d,h[T],E),P!==null&&(c=i(P,c,T),v===null?_=P:v.sibling=P,v=P);return re&&an(d,T),_}for(P=r(d,P);T<h.length;T++)M=k(P,d,T,h[T],E),M!==null&&(e&&M.alternate!==null&&P.delete(M.key===null?T:M.key),c=i(M,c,T),v===null?_=M:v.sibling=M,v=M);return e&&P.forEach(function(Q){return t(d,Q)}),re&&an(d,T),_}function w(d,c,h,E){var _=fr(h);if(typeof _!="function")throw Error(L(150));if(h=_.call(h),h==null)throw Error(L(151));for(var v=_=null,P=c,T=c=0,M=null,O=h.next();P!==null&&!O.done;T++,O=h.next()){P.index>T?(M=P,P=null):M=P.sibling;var Q=m(d,P,O.value,E);if(Q===null){P===null&&(P=M);break}e&&P&&Q.alternate===null&&t(d,P),c=i(Q,c,T),v===null?_=Q:v.sibling=Q,v=Q,P=M}if(O.done)return n(d,P),re&&an(d,T),_;if(P===null){for(;!O.done;T++,O=h.next())O=p(d,O.value,E),O!==null&&(c=i(O,c,T),v===null?_=O:v.sibling=O,v=O);return re&&an(d,T),_}for(P=r(d,P);!O.done;T++,O=h.next())O=k(P,d,T,O.value,E),O!==null&&(e&&O.alternate!==null&&P.delete(O.key===null?T:O.key),c=i(O,c,T),v===null?_=O:v.sibling=O,v=O);return e&&P.forEach(function(he){return t(d,he)}),re&&an(d,T),_}function C(d,c,h,E){if(typeof h=="object"&&h!==null&&h.type===Dn&&h.key===null&&(h=h.props.children),typeof h=="object"&&h!==null){switch(h.$$typeof){case dl:e:{for(var _=h.key,v=c;v!==null;){if(v.key===_){if(_=h.type,_===Dn){if(v.tag===7){n(d,v.sibling),c=l(v,h.props.children),c.return=d,d=c;break e}}else if(v.elementType===_||typeof _=="object"&&_!==null&&_.$$typeof===At&&Xu(_)===v.type){n(d,v.sibling),c=l(v,h.props),c.ref=vr(d,v,h),c.return=d,d=c;break e}n(d,v);break}else t(d,v);v=v.sibling}h.type===Dn?(c=mn(h.props.children,d.mode,E,h.key),c.return=d,d=c):(E=Il(h.type,h.key,h.props,null,d.mode,E),E.ref=vr(d,c,h),E.return=d,d=E)}return o(d);case Nn:e:{for(v=h.key;c!==null;){if(c.key===v)if(c.tag===4&&c.stateNode.containerInfo===h.containerInfo&&c.stateNode.implementation===h.implementation){n(d,c.sibling),c=l(c,h.children||[]),c.return=d,d=c;break e}else{n(d,c);break}else t(d,c);c=c.sibling}c=lo(h,d.mode,E),c.return=d,d=c}return o(d);case At:return v=h._init,C(d,c,v(h._payload),E)}if(Pr(h))return S(d,c,h,E);if(fr(h))return w(d,c,h,E);xl(d,h)}return typeof h=="string"&&h!==""||typeof h=="number"?(h=""+h,c!==null&&c.tag===6?(n(d,c.sibling),c=l(c,h),c.return=d,d=c):(n(d,c),c=ro(h,d.mode,E),c.return=d,d=c),o(d)):n(d,c)}return C}var bn=Bc(!0),Vc=Bc(!1),ol={},vt=nn(ol),Gr=nn(ol),Jr=nn(ol);function fn(e){if(e===ol)throw Error(L(174));return e}function Da(e,t){switch(Z(Jr,t),Z(Gr,e),Z(vt,ol),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:yo(null,"");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=yo(t,e)}ee(vt),Z(vt,t)}function er(){ee(vt),ee(Gr),ee(Jr)}function Hc(e){fn(Jr.current);var t=fn(vt.current),n=yo(t,e.type);t!==n&&(Z(Gr,e),Z(vt,n))}function za(e){Gr.current===e&&(ee(vt),ee(Gr))}var le=nn(0);function ei(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data==="$?"||n.data==="$!"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Zi=[];function Ma(){for(var e=0;e<Zi.length;e++)Zi[e]._workInProgressVersionPrimary=null;Zi.length=0}var zl=Tt.ReactCurrentDispatcher,qi=Tt.ReactCurrentBatchConfig,yn=0,ie=null,me=null,we=null,ti=!1,Mr=!1,Zr=0,$p=0;function Re(){throw Error(L(321))}function Fa(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!st(e[n],t[n]))return!1;return!0}function Oa(e,t,n,r,l,i){if(yn=i,ie=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,zl.current=e===null||e.memoizedState===null?Xp:Gp,e=n(r,l),Mr){i=0;do{if(Mr=!1,Zr=0,25<=i)throw Error(L(301));i+=1,we=me=null,t.updateQueue=null,zl.current=Jp,e=n(r,l)}while(Mr)}if(zl.current=ni,t=me!==null&&me.next!==null,yn=0,we=me=ie=null,ti=!1,t)throw Error(L(300));return e}function Ua(){var e=Zr!==0;return Zr=0,e}function pt(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return we===null?ie.memoizedState=we=e:we=we.next=e,we}function et(){if(me===null){var e=ie.alternate;e=e!==null?e.memoizedState:null}else e=me.next;var t=we===null?ie.memoizedState:we.next;if(t!==null)we=t,me=e;else{if(e===null)throw Error(L(310));me=e,e={memoizedState:me.memoizedState,baseState:me.baseState,baseQueue:me.baseQueue,queue:me.queue,next:null},we===null?ie.memoizedState=we=e:we=we.next=e}return we}function qr(e,t){return typeof t=="function"?t(e):t}function bi(e){var t=et(),n=t.queue;if(n===null)throw Error(L(311));n.lastRenderedReducer=e;var r=me,l=r.baseQueue,i=n.pending;if(i!==null){if(l!==null){var o=l.next;l.next=i.next,i.next=o}r.baseQueue=l=i,n.pending=null}if(l!==null){i=l.next,r=r.baseState;var a=o=null,u=null,s=i;do{var f=s.lane;if((yn&f)===f)u!==null&&(u=u.next={lane:0,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null}),r=s.hasEagerState?s.eagerState:e(r,s.action);else{var p={lane:f,action:s.action,hasEagerState:s.hasEagerState,eagerState:s.eagerState,next:null};u===null?(a=u=p,o=r):u=u.next=p,ie.lanes|=f,wn|=f}s=s.next}while(s!==null&&s!==i);u===null?o=r:u.next=a,st(r,t.memoizedState)||(Oe=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}if(e=n.interleaved,e!==null){l=e;do i=l.lane,ie.lanes|=i,wn|=i,l=l.next;while(l!==e)}else l===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function eo(e){var t=et(),n=t.queue;if(n===null)throw Error(L(311));n.lastRenderedReducer=e;var r=n.dispatch,l=n.pending,i=t.memoizedState;if(l!==null){n.pending=null;var o=l=l.next;do i=e(i,o.action),o=o.next;while(o!==l);st(i,t.memoizedState)||(Oe=!0),t.memoizedState=i,t.baseQueue===null&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Wc(){}function $c(e,t){var n=ie,r=et(),l=t(),i=!st(r.memoizedState,l);if(i&&(r.memoizedState=l,Oe=!0),r=r.queue,Ia(Yc.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||we!==null&&we.memoizedState.tag&1){if(n.flags|=2048,br(9,Kc.bind(null,n,r,l,t),void 0,null),Se===null)throw Error(L(349));yn&30||Qc(n,t,l)}return l}function Qc(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=ie.updateQueue,t===null?(t={lastEffect:null,stores:null},ie.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Kc(e,t,n,r){t.value=n,t.getSnapshot=r,Xc(t)&&Gc(e)}function Yc(e,t,n){return n(function(){Xc(t)&&Gc(e)})}function Xc(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!st(e,n)}catch{return!0}}function Gc(e){var t=Rt(e,1);t!==null&&ut(t,e,1,-1)}function Gu(e){var t=pt();return typeof e=="function"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:qr,lastRenderedState:e},t.queue=e,e=e.dispatch=Yp.bind(null,ie,e),[t.memoizedState,e]}function br(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=ie.updateQueue,t===null?(t={lastEffect:null,stores:null},ie.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function Jc(){return et().memoizedState}function Ml(e,t,n,r){var l=pt();ie.flags|=e,l.memoizedState=br(1|t,n,void 0,r===void 0?null:r)}function vi(e,t,n,r){var l=et();r=r===void 0?null:r;var i=void 0;if(me!==null){var o=me.memoizedState;if(i=o.destroy,r!==null&&Fa(r,o.deps)){l.memoizedState=br(t,n,i,r);return}}ie.flags|=e,l.memoizedState=br(1|t,n,i,r)}function Ju(e,t){return Ml(8390656,8,e,t)}function Ia(e,t){return vi(2048,8,e,t)}function Zc(e,t){return vi(4,2,e,t)}function qc(e,t){return vi(4,4,e,t)}function bc(e,t){if(typeof t=="function")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function ef(e,t,n){return n=n!=null?n.concat([e]):null,vi(4,4,bc.bind(null,t,e),n)}function ja(){}function tf(e,t){var n=et();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Fa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function nf(e,t){var n=et();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&Fa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function rf(e,t,n){return yn&21?(st(n,t)||(n=oc(),ie.lanes|=n,wn|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,Oe=!0),e.memoizedState=n)}function Qp(e,t){var n=X;X=n!==0&&4>n?n:4,e(!0);var r=qi.transition;qi.transition={};try{e(!1),t()}finally{X=n,qi.transition=r}}function lf(){return et().memoizedState}function Kp(e,t,n){var r=Zt(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},of(e))af(t,n);else if(n=Uc(e,t,n,r),n!==null){var l=ze();ut(n,e,r,l),uf(n,t,r)}}function Yp(e,t,n){var r=Zt(e),l={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(of(e))af(t,l);else{var i=e.alternate;if(e.lanes===0&&(i===null||i.lanes===0)&&(i=t.lastRenderedReducer,i!==null))try{var o=t.lastRenderedState,a=i(o,n);if(l.hasEagerState=!0,l.eagerState=a,st(a,o)){var u=t.interleaved;u===null?(l.next=l,Ta(t)):(l.next=u.next,u.next=l),t.interleaved=l;return}}catch{}finally{}n=Uc(e,t,l,r),n!==null&&(l=ze(),ut(n,e,r,l),uf(n,t,r))}}function of(e){var t=e.alternate;return e===ie||t!==null&&t===ie}function af(e,t){Mr=ti=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function uf(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,ma(e,n)}}var ni={readContext:be,useCallback:Re,useContext:Re,useEffect:Re,useImperativeHandle:Re,useInsertionEffect:Re,useLayoutEffect:Re,useMemo:Re,useReducer:Re,useRef:Re,useState:Re,useDebugValue:Re,useDeferredValue:Re,useTransition:Re,useMutableSource:Re,useSyncExternalStore:Re,useId:Re,unstable_isNewReconciler:!1},Xp={readContext:be,useCallback:function(e,t){return pt().memoizedState=[e,t===void 0?null:t],e},useContext:be,useEffect:Ju,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,Ml(4194308,4,bc.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Ml(4194308,4,e,t)},useInsertionEffect:function(e,t){return Ml(4,2,e,t)},useMemo:function(e,t){var n=pt();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=pt();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=Kp.bind(null,ie,e),[r.memoizedState,e]},useRef:function(e){var t=pt();return e={current:e},t.memoizedState=e},useState:Gu,useDebugValue:ja,useDeferredValue:function(e){return pt().memoizedState=e},useTransition:function(){var e=Gu(!1),t=e[0];return e=Qp.bind(null,e[1]),pt().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=ie,l=pt();if(re){if(n===void 0)throw Error(L(407));n=n()}else{if(n=t(),Se===null)throw Error(L(349));yn&30||Qc(r,t,n)}l.memoizedState=n;var i={value:n,getSnapshot:t};return l.queue=i,Ju(Yc.bind(null,r,i,e),[e]),r.flags|=2048,br(9,Kc.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=pt(),t=Se.identifierPrefix;if(re){var n=Et,r=St;n=(r&~(1<<32-at(r)-1)).toString(32)+n,t=":"+t+"R"+n,n=Zr++,0<n&&(t+="H"+n.toString(32)),t+=":"}else n=$p++,t=":"+t+"r"+n.toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},Gp={readContext:be,useCallback:tf,useContext:be,useEffect:Ia,useImperativeHandle:ef,useInsertionEffect:Zc,useLayoutEffect:qc,useMemo:nf,useReducer:bi,useRef:Jc,useState:function(){return bi(qr)},useDebugValue:ja,useDeferredValue:function(e){var t=et();return rf(t,me.memoizedState,e)},useTransition:function(){var e=bi(qr)[0],t=et().memoizedState;return[e,t]},useMutableSource:Wc,useSyncExternalStore:$c,useId:lf,unstable_isNewReconciler:!1},Jp={readContext:be,useCallback:tf,useContext:be,useEffect:Ia,useImperativeHandle:ef,useInsertionEffect:Zc,useLayoutEffect:qc,useMemo:nf,useReducer:eo,useRef:Jc,useState:function(){return eo(qr)},useDebugValue:ja,useDeferredValue:function(e){var t=et();return me===null?t.memoizedState=e:rf(t,me.memoizedState,e)},useTransition:function(){var e=eo(qr)[0],t=et().memoizedState;return[e,t]},useMutableSource:Wc,useSyncExternalStore:$c,useId:lf,unstable_isNewReconciler:!1};function tr(e,t){try{var n="",r=t;do n+=Cd(r),r=r.return;while(r);var l=n}catch(i){l=`
Error generating stack: `+i.message+`
`+i.stack}return{value:e,source:t,stack:l,digest:null}}function to(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Vo(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var Zp=typeof WeakMap=="function"?WeakMap:Map;function sf(e,t,n){n=kt(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){li||(li=!0,Zo=r),Vo(e,t)},n}function cf(e,t,n){n=kt(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r=="function"){var l=t.value;n.payload=function(){return r(l)},n.callback=function(){Vo(e,t)}}var i=e.stateNode;return i!==null&&typeof i.componentDidCatch=="function"&&(n.callback=function(){Vo(e,t),typeof r!="function"&&(Jt===null?Jt=new Set([this]):Jt.add(this));var o=t.stack;this.componentDidCatch(t.value,{componentStack:o!==null?o:""})}),n}function Zu(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new Zp;var l=new Set;r.set(t,l)}else l=r.get(t),l===void 0&&(l=new Set,r.set(t,l));l.has(n)||(l.add(n),e=fh.bind(null,e,t,n),t.then(e,e))}function qu(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function bu(e,t,n,r,l){return e.mode&1?(e.flags|=65536,e.lanes=l,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=kt(-1,1),t.tag=2,Gt(n,t,1))),n.lanes|=1),e)}var qp=Tt.ReactCurrentOwner,Oe=!1;function De(e,t,n,r){t.child=e===null?Vc(t,null,n,r):bn(t,e.child,n,r)}function es(e,t,n,r,l){n=n.render;var i=t.ref;return Xn(t,l),r=Oa(e,t,n,r,i,l),n=Ua(),e!==null&&!Oe?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,Lt(e,t,l)):(re&&n&&xa(t),t.flags|=1,De(e,t,r,l),t.child)}function ts(e,t,n,r,l){if(e===null){var i=n.type;return typeof i=="function"&&!Ka(i)&&i.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=i,ff(e,t,i,r,l)):(e=Il(n.type,null,r,t,t.mode,l),e.ref=t.ref,e.return=t,t.child=e)}if(i=e.child,!(e.lanes&l)){var o=i.memoizedProps;if(n=n.compare,n=n!==null?n:Qr,n(o,r)&&e.ref===t.ref)return Lt(e,t,l)}return t.flags|=1,e=qt(i,r),e.ref=t.ref,e.return=t,t.child=e}function ff(e,t,n,r,l){if(e!==null){var i=e.memoizedProps;if(Qr(i,r)&&e.ref===t.ref)if(Oe=!1,t.pendingProps=r=i,(e.lanes&l)!==0)e.flags&131072&&(Oe=!0);else return t.lanes=e.lanes,Lt(e,t,l)}return Ho(e,t,n,r,l)}function df(e,t,n){var r=t.pendingProps,l=r.children,i=e!==null?e.memoizedState:null;if(r.mode==="hidden")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Z(Vn,Be),Be|=n;else{if(!(n&1073741824))return e=i!==null?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Z(Vn,Be),Be|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=i!==null?i.baseLanes:n,Z(Vn,Be),Be|=r}else i!==null?(r=i.baseLanes|n,t.memoizedState=null):r=n,Z(Vn,Be),Be|=r;return De(e,t,l,n),t.child}function pf(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ho(e,t,n,r,l){var i=Ie(n)?vn:Te.current;return i=Zn(t,i),Xn(t,l),n=Oa(e,t,n,r,i,l),r=Ua(),e!==null&&!Oe?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~l,Lt(e,t,l)):(re&&r&&xa(t),t.flags|=1,De(e,t,n,l),t.child)}function ns(e,t,n,r,l){if(Ie(n)){var i=!0;Xl(t)}else i=!1;if(Xn(t,l),t.stateNode===null)Fl(e,t),Ac(t,n,r),Bo(t,n,r,l),r=!0;else if(e===null){var o=t.stateNode,a=t.memoizedProps;o.props=a;var u=o.context,s=n.contextType;typeof s=="object"&&s!==null?s=be(s):(s=Ie(n)?vn:Te.current,s=Zn(t,s));var f=n.getDerivedStateFromProps,p=typeof f=="function"||typeof o.getSnapshotBeforeUpdate=="function";p||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(a!==r||u!==s)&&Yu(t,o,r,s),Bt=!1;var m=t.memoizedState;o.state=m,bl(t,r,o,l),u=t.memoizedState,a!==r||m!==u||Ue.current||Bt?(typeof f=="function"&&(Ao(t,n,f,r),u=t.memoizedState),(a=Bt||Ku(t,n,a,r,m,u,s))?(p||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount()),typeof o.componentDidMount=="function"&&(t.flags|=4194308)):(typeof o.componentDidMount=="function"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),o.props=r,o.state=u,o.context=s,r=a):(typeof o.componentDidMount=="function"&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,Ic(e,t),a=t.memoizedProps,s=t.type===t.elementType?a:rt(t.type,a),o.props=s,p=t.pendingProps,m=o.context,u=n.contextType,typeof u=="object"&&u!==null?u=be(u):(u=Ie(n)?vn:Te.current,u=Zn(t,u));var k=n.getDerivedStateFromProps;(f=typeof k=="function"||typeof o.getSnapshotBeforeUpdate=="function")||typeof o.UNSAFE_componentWillReceiveProps!="function"&&typeof o.componentWillReceiveProps!="function"||(a!==p||m!==u)&&Yu(t,o,r,u),Bt=!1,m=t.memoizedState,o.state=m,bl(t,r,o,l);var S=t.memoizedState;a!==p||m!==S||Ue.current||Bt?(typeof k=="function"&&(Ao(t,n,k,r),S=t.memoizedState),(s=Bt||Ku(t,n,s,r,m,S,u)||!1)?(f||typeof o.UNSAFE_componentWillUpdate!="function"&&typeof o.componentWillUpdate!="function"||(typeof o.componentWillUpdate=="function"&&o.componentWillUpdate(r,S,u),typeof o.UNSAFE_componentWillUpdate=="function"&&o.UNSAFE_componentWillUpdate(r,S,u)),typeof o.componentDidUpdate=="function"&&(t.flags|=4),typeof o.getSnapshotBeforeUpdate=="function"&&(t.flags|=1024)):(typeof o.componentDidUpdate!="function"||a===e.memoizedProps&&m===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||a===e.memoizedProps&&m===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=S),o.props=r,o.state=S,o.context=u,r=s):(typeof o.componentDidUpdate!="function"||a===e.memoizedProps&&m===e.memoizedState||(t.flags|=4),typeof o.getSnapshotBeforeUpdate!="function"||a===e.memoizedProps&&m===e.memoizedState||(t.flags|=1024),r=!1)}return Wo(e,t,n,r,i,l)}function Wo(e,t,n,r,l,i){pf(e,t);var o=(t.flags&128)!==0;if(!r&&!o)return l&&Vu(t,n,!1),Lt(e,t,i);r=t.stateNode,qp.current=t;var a=o&&typeof n.getDerivedStateFromError!="function"?null:r.render();return t.flags|=1,e!==null&&o?(t.child=bn(t,e.child,null,i),t.child=bn(t,null,a,i)):De(e,t,a,i),t.memoizedState=r.state,l&&Vu(t,n,!0),t.child}function hf(e){var t=e.stateNode;t.pendingContext?Bu(e,t.pendingContext,t.pendingContext!==t.context):t.context&&Bu(e,t.context,!1),Da(e,t.containerInfo)}function rs(e,t,n,r,l){return qn(),Pa(l),t.flags|=256,De(e,t,n,r),t.child}var $o={dehydrated:null,treeContext:null,retryLane:0};function Qo(e){return{baseLanes:e,cachePool:null,transitions:null}}function mf(e,t,n){var r=t.pendingProps,l=le.current,i=!1,o=(t.flags&128)!==0,a;if((a=o)||(a=e!==null&&e.memoizedState===null?!1:(l&2)!==0),a?(i=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(l|=1),Z(le,l&1),e===null)return Io(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data==="$!"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(o=r.children,e=r.fallback,i?(r=t.mode,i=t.child,o={mode:"hidden",children:o},!(r&1)&&i!==null?(i.childLanes=0,i.pendingProps=o):i=wi(o,r,0,null),e=mn(e,r,n,null),i.return=t,e.return=t,i.sibling=e,t.child=i,t.child.memoizedState=Qo(n),t.memoizedState=$o,e):Aa(t,o));if(l=e.memoizedState,l!==null&&(a=l.dehydrated,a!==null))return bp(e,t,o,r,a,l,n);if(i){i=r.fallback,o=t.mode,l=e.child,a=l.sibling;var u={mode:"hidden",children:r.children};return!(o&1)&&t.child!==l?(r=t.child,r.childLanes=0,r.pendingProps=u,t.deletions=null):(r=qt(l,u),r.subtreeFlags=l.subtreeFlags&14680064),a!==null?i=qt(a,i):(i=mn(i,o,n,null),i.flags|=2),i.return=t,r.return=t,r.sibling=i,t.child=r,r=i,i=t.child,o=e.child.memoizedState,o=o===null?Qo(n):{baseLanes:o.baseLanes|n,cachePool:null,transitions:o.transitions},i.memoizedState=o,i.childLanes=e.childLanes&~n,t.memoizedState=$o,r}return i=e.child,e=i.sibling,r=qt(i,{mode:"visible",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Aa(e,t){return t=wi({mode:"visible",children:t},e.mode,0,null),t.return=e,e.child=t}function Cl(e,t,n,r){return r!==null&&Pa(r),bn(t,e.child,null,n),e=Aa(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function bp(e,t,n,r,l,i,o){if(n)return t.flags&256?(t.flags&=-257,r=to(Error(L(422))),Cl(e,t,o,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(i=r.fallback,l=t.mode,r=wi({mode:"visible",children:r.children},l,0,null),i=mn(i,l,o,null),i.flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,t.mode&1&&bn(t,e.child,null,o),t.child.memoizedState=Qo(o),t.memoizedState=$o,i);if(!(t.mode&1))return Cl(e,t,o,null);if(l.data==="$!"){if(r=l.nextSibling&&l.nextSibling.dataset,r)var a=r.dgst;return r=a,i=Error(L(419)),r=to(i,r,void 0),Cl(e,t,o,r)}if(a=(o&e.childLanes)!==0,Oe||a){if(r=Se,r!==null){switch(o&-o){case 4:l=2;break;case 16:l=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:l=32;break;case 536870912:l=268435456;break;default:l=0}l=l&(r.suspendedLanes|o)?0:l,l!==0&&l!==i.retryLane&&(i.retryLane=l,Rt(e,l),ut(r,e,l,-1))}return Qa(),r=to(Error(L(421))),Cl(e,t,o,r)}return l.data==="$?"?(t.flags|=128,t.child=e.child,t=dh.bind(null,e),l._reactRetry=t,null):(e=i.treeContext,Ve=Xt(l.nextSibling),He=t,re=!0,ot=null,e!==null&&(Ge[Je++]=St,Ge[Je++]=Et,Ge[Je++]=gn,St=e.id,Et=e.overflow,gn=t),t=Aa(t,r.children),t.flags|=4096,t)}function ls(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),jo(e.return,t,n)}function no(e,t,n,r,l){var i=e.memoizedState;i===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:l}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=l)}function vf(e,t,n){var r=t.pendingProps,l=r.revealOrder,i=r.tail;if(De(e,t,r.children,n),r=le.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&ls(e,n,t);else if(e.tag===19)ls(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Z(le,r),!(t.mode&1))t.memoizedState=null;else switch(l){case"forwards":for(n=t.child,l=null;n!==null;)e=n.alternate,e!==null&&ei(e)===null&&(l=n),n=n.sibling;n=l,n===null?(l=t.child,t.child=null):(l=n.sibling,n.sibling=null),no(t,!1,l,n,i);break;case"backwards":for(n=null,l=t.child,t.child=null;l!==null;){if(e=l.alternate,e!==null&&ei(e)===null){t.child=l;break}e=l.sibling,l.sibling=n,n=l,l=e}no(t,!0,n,null,i);break;case"together":no(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Fl(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Lt(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),wn|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(L(153));if(t.child!==null){for(e=t.child,n=qt(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=qt(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function eh(e,t,n){switch(t.tag){case 3:hf(t),qn();break;case 5:Hc(t);break;case 1:Ie(t.type)&&Xl(t);break;case 4:Da(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,l=t.memoizedProps.value;Z(Zl,r._currentValue),r._currentValue=l;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(Z(le,le.current&1),t.flags|=128,null):n&t.child.childLanes?mf(e,t,n):(Z(le,le.current&1),e=Lt(e,t,n),e!==null?e.sibling:null);Z(le,le.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return vf(e,t,n);t.flags|=128}if(l=t.memoizedState,l!==null&&(l.rendering=null,l.tail=null,l.lastEffect=null),Z(le,le.current),r)break;return null;case 22:case 23:return t.lanes=0,df(e,t,n)}return Lt(e,t,n)}var gf,Ko,yf,wf;gf=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Ko=function(){};yf=function(e,t,n,r){var l=e.memoizedProps;if(l!==r){e=t.stateNode,fn(vt.current);var i=null;switch(n){case"input":l=ho(e,l),r=ho(e,r),i=[];break;case"select":l=oe({},l,{value:void 0}),r=oe({},r,{value:void 0}),i=[];break;case"textarea":l=go(e,l),r=go(e,r),i=[];break;default:typeof l.onClick!="function"&&typeof r.onClick=="function"&&(e.onclick=Kl)}wo(n,r);var o;n=null;for(s in l)if(!r.hasOwnProperty(s)&&l.hasOwnProperty(s)&&l[s]!=null)if(s==="style"){var a=l[s];for(o in a)a.hasOwnProperty(o)&&(n||(n={}),n[o]="")}else s!=="dangerouslySetInnerHTML"&&s!=="children"&&s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&s!=="autoFocus"&&(jr.hasOwnProperty(s)?i||(i=[]):(i=i||[]).push(s,null));for(s in r){var u=r[s];if(a=l!=null?l[s]:void 0,r.hasOwnProperty(s)&&u!==a&&(u!=null||a!=null))if(s==="style")if(a){for(o in a)!a.hasOwnProperty(o)||u&&u.hasOwnProperty(o)||(n||(n={}),n[o]="");for(o in u)u.hasOwnProperty(o)&&a[o]!==u[o]&&(n||(n={}),n[o]=u[o])}else n||(i||(i=[]),i.push(s,n)),n=u;else s==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,a=a?a.__html:void 0,u!=null&&a!==u&&(i=i||[]).push(s,u)):s==="children"?typeof u!="string"&&typeof u!="number"||(i=i||[]).push(s,""+u):s!=="suppressContentEditableWarning"&&s!=="suppressHydrationWarning"&&(jr.hasOwnProperty(s)?(u!=null&&s==="onScroll"&&b("scroll",e),i||a===u||(i=[])):(i=i||[]).push(s,u))}n&&(i=i||[]).push("style",n);var s=i;(t.updateQueue=s)&&(t.flags|=4)}};wf=function(e,t,n,r){n!==r&&(t.flags|=4)};function gr(e,t){if(!re)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Le(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var l=e.child;l!==null;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags&14680064,r|=l.flags&14680064,l.return=e,l=l.sibling;else for(l=e.child;l!==null;)n|=l.lanes|l.childLanes,r|=l.subtreeFlags,r|=l.flags,l.return=e,l=l.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function th(e,t,n){var r=t.pendingProps;switch(Ca(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Le(t),null;case 1:return Ie(t.type)&&Yl(),Le(t),null;case 3:return r=t.stateNode,er(),ee(Ue),ee(Te),Ma(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(kl(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,ot!==null&&(ea(ot),ot=null))),Ko(e,t),Le(t),null;case 5:za(t);var l=fn(Jr.current);if(n=t.type,e!==null&&t.stateNode!=null)yf(e,t,n,r,l),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(L(166));return Le(t),null}if(e=fn(vt.current),kl(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ht]=t,r[Xr]=i,e=(t.mode&1)!==0,n){case"dialog":b("cancel",r),b("close",r);break;case"iframe":case"object":case"embed":b("load",r);break;case"video":case"audio":for(l=0;l<Lr.length;l++)b(Lr[l],r);break;case"source":b("error",r);break;case"img":case"image":case"link":b("error",r),b("load",r);break;case"details":b("toggle",r);break;case"input":pu(r,i),b("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},b("invalid",r);break;case"textarea":mu(r,i),b("invalid",r)}wo(n,i),l=null;for(var o in i)if(i.hasOwnProperty(o)){var a=i[o];o==="children"?typeof a=="string"?r.textContent!==a&&(i.suppressHydrationWarning!==!0&&El(r.textContent,a,e),l=["children",a]):typeof a=="number"&&r.textContent!==""+a&&(i.suppressHydrationWarning!==!0&&El(r.textContent,a,e),l=["children",""+a]):jr.hasOwnProperty(o)&&a!=null&&o==="onScroll"&&b("scroll",r)}switch(n){case"input":pl(r),hu(r,i,!0);break;case"textarea":pl(r),vu(r);break;case"select":case"option":break;default:typeof i.onClick=="function"&&(r.onclick=Kl)}r=l,t.updateQueue=r,r!==null&&(t.flags|=4)}else{o=l.nodeType===9?l:l.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=Qs(n)),e==="http://www.w3.org/1999/xhtml"?n==="script"?(e=o.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof r.is=="string"?e=o.createElement(n,{is:r.is}):(e=o.createElement(n),n==="select"&&(o=e,r.multiple?o.multiple=!0:r.size&&(o.size=r.size))):e=o.createElementNS(e,n),e[ht]=t,e[Xr]=r,gf(e,t,!1,!1),t.stateNode=e;e:{switch(o=So(n,r),n){case"dialog":b("cancel",e),b("close",e),l=r;break;case"iframe":case"object":case"embed":b("load",e),l=r;break;case"video":case"audio":for(l=0;l<Lr.length;l++)b(Lr[l],e);l=r;break;case"source":b("error",e),l=r;break;case"img":case"image":case"link":b("error",e),b("load",e),l=r;break;case"details":b("toggle",e),l=r;break;case"input":pu(e,r),l=ho(e,r),b("invalid",e);break;case"option":l=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},l=oe({},r,{value:void 0}),b("invalid",e);break;case"textarea":mu(e,r),l=go(e,r),b("invalid",e);break;default:l=r}wo(n,l),a=l;for(i in a)if(a.hasOwnProperty(i)){var u=a[i];i==="style"?Xs(e,u):i==="dangerouslySetInnerHTML"?(u=u?u.__html:void 0,u!=null&&Ks(e,u)):i==="children"?typeof u=="string"?(n!=="textarea"||u!=="")&&Ar(e,u):typeof u=="number"&&Ar(e,""+u):i!=="suppressContentEditableWarning"&&i!=="suppressHydrationWarning"&&i!=="autoFocus"&&(jr.hasOwnProperty(i)?u!=null&&i==="onScroll"&&b("scroll",e):u!=null&&sa(e,i,u,o))}switch(n){case"input":pl(e),hu(e,r,!1);break;case"textarea":pl(e),vu(e);break;case"option":r.value!=null&&e.setAttribute("value",""+bt(r.value));break;case"select":e.multiple=!!r.multiple,i=r.value,i!=null?$n(e,!!r.multiple,i,!1):r.defaultValue!=null&&$n(e,!!r.multiple,r.defaultValue,!0);break;default:typeof l.onClick=="function"&&(e.onclick=Kl)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return Le(t),null;case 6:if(e&&t.stateNode!=null)wf(e,t,e.memoizedProps,r);else{if(typeof r!="string"&&t.stateNode===null)throw Error(L(166));if(n=fn(Jr.current),fn(vt.current),kl(t)){if(r=t.stateNode,n=t.memoizedProps,r[ht]=t,(i=r.nodeValue!==n)&&(e=He,e!==null))switch(e.tag){case 3:El(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&El(r.nodeValue,n,(e.mode&1)!==0)}i&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[ht]=t,t.stateNode=r}return Le(t),null;case 13:if(ee(le),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(re&&Ve!==null&&t.mode&1&&!(t.flags&128))Oc(),qn(),t.flags|=98560,i=!1;else if(i=kl(t),r!==null&&r.dehydrated!==null){if(e===null){if(!i)throw Error(L(318));if(i=t.memoizedState,i=i!==null?i.dehydrated:null,!i)throw Error(L(317));i[ht]=t}else qn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;Le(t),i=!1}else ot!==null&&(ea(ot),ot=null),i=!0;if(!i)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||le.current&1?ve===0&&(ve=3):Qa())),t.updateQueue!==null&&(t.flags|=4),Le(t),null);case 4:return er(),Ko(e,t),e===null&&Kr(t.stateNode.containerInfo),Le(t),null;case 10:return _a(t.type._context),Le(t),null;case 17:return Ie(t.type)&&Yl(),Le(t),null;case 19:if(ee(le),i=t.memoizedState,i===null)return Le(t),null;if(r=(t.flags&128)!==0,o=i.rendering,o===null)if(r)gr(i,!1);else{if(ve!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(o=ei(e),o!==null){for(t.flags|=128,gr(i,!1),r=o.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)i=n,e=r,i.flags&=14680066,o=i.alternate,o===null?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=o.childLanes,i.lanes=o.lanes,i.child=o.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=o.memoizedProps,i.memoizedState=o.memoizedState,i.updateQueue=o.updateQueue,i.type=o.type,e=o.dependencies,i.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Z(le,le.current&1|2),t.child}e=e.sibling}i.tail!==null&&fe()>nr&&(t.flags|=128,r=!0,gr(i,!1),t.lanes=4194304)}else{if(!r)if(e=ei(o),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),gr(i,!0),i.tail===null&&i.tailMode==="hidden"&&!o.alternate&&!re)return Le(t),null}else 2*fe()-i.renderingStartTime>nr&&n!==1073741824&&(t.flags|=128,r=!0,gr(i,!1),t.lanes=4194304);i.isBackwards?(o.sibling=t.child,t.child=o):(n=i.last,n!==null?n.sibling=o:t.child=o,i.last=o)}return i.tail!==null?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=fe(),t.sibling=null,n=le.current,Z(le,r?n&1|2:n&1),t):(Le(t),null);case 22:case 23:return $a(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?Be&1073741824&&(Le(t),t.subtreeFlags&6&&(t.flags|=8192)):Le(t),null;case 24:return null;case 25:return null}throw Error(L(156,t.tag))}function nh(e,t){switch(Ca(t),t.tag){case 1:return Ie(t.type)&&Yl(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return er(),ee(Ue),ee(Te),Ma(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return za(t),null;case 13:if(ee(le),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(L(340));qn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return ee(le),null;case 4:return er(),null;case 10:return _a(t.type._context),null;case 22:case 23:return $a(),null;case 24:return null;default:return null}}var Pl=!1,_e=!1,rh=typeof WeakSet=="function"?WeakSet:Set,z=null;function Bn(e,t){var n=e.ref;if(n!==null)if(typeof n=="function")try{n(null)}catch(r){ue(e,t,r)}else n.current=null}function Yo(e,t,n){try{n()}catch(r){ue(e,t,r)}}var is=!1;function lh(e,t){if(No=Wl,e=kc(),ka(e)){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var l=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch{n=null;break e}var o=0,a=-1,u=-1,s=0,f=0,p=e,m=null;t:for(;;){for(var k;p!==n||l!==0&&p.nodeType!==3||(a=o+l),p!==i||r!==0&&p.nodeType!==3||(u=o+r),p.nodeType===3&&(o+=p.nodeValue.length),(k=p.firstChild)!==null;)m=p,p=k;for(;;){if(p===e)break t;if(m===n&&++s===l&&(a=o),m===i&&++f===r&&(u=o),(k=p.nextSibling)!==null)break;p=m,m=p.parentNode}p=k}n=a===-1||u===-1?null:{start:a,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(Do={focusedElem:e,selectionRange:n},Wl=!1,z=t;z!==null;)if(t=z,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,z=e;else for(;z!==null;){t=z;try{var S=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(S!==null){var w=S.memoizedProps,C=S.memoizedState,d=t.stateNode,c=d.getSnapshotBeforeUpdate(t.elementType===t.type?w:rt(t.type,w),C);d.__reactInternalSnapshotBeforeUpdate=c}break;case 3:var h=t.stateNode.containerInfo;h.nodeType===1?h.textContent="":h.nodeType===9&&h.documentElement&&h.removeChild(h.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(L(163))}}catch(E){ue(t,t.return,E)}if(e=t.sibling,e!==null){e.return=t.return,z=e;break}z=t.return}return S=is,is=!1,S}function Fr(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var l=r=r.next;do{if((l.tag&e)===e){var i=l.destroy;l.destroy=void 0,i!==void 0&&Yo(t,n,i)}l=l.next}while(l!==r)}}function gi(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Xo(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t=="function"?t(e):t.current=e}}function Sf(e){var t=e.alternate;t!==null&&(e.alternate=null,Sf(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[ht],delete t[Xr],delete t[Fo],delete t[Bp],delete t[Vp])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Ef(e){return e.tag===5||e.tag===3||e.tag===4}function os(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Ef(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Go(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=Kl));else if(r!==4&&(e=e.child,e!==null))for(Go(e,t,n),e=e.sibling;e!==null;)Go(e,t,n),e=e.sibling}function Jo(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Jo(e,t,n),e=e.sibling;e!==null;)Jo(e,t,n),e=e.sibling}var xe=null,lt=!1;function It(e,t,n){for(n=n.child;n!==null;)kf(e,t,n),n=n.sibling}function kf(e,t,n){if(mt&&typeof mt.onCommitFiberUnmount=="function")try{mt.onCommitFiberUnmount(si,n)}catch{}switch(n.tag){case 5:_e||Bn(n,t);case 6:var r=xe,l=lt;xe=null,It(e,t,n),xe=r,lt=l,xe!==null&&(lt?(e=xe,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):xe.removeChild(n.stateNode));break;case 18:xe!==null&&(lt?(e=xe,n=n.stateNode,e.nodeType===8?Gi(e.parentNode,n):e.nodeType===1&&Gi(e,n),Wr(e)):Gi(xe,n.stateNode));break;case 4:r=xe,l=lt,xe=n.stateNode.containerInfo,lt=!0,It(e,t,n),xe=r,lt=l;break;case 0:case 11:case 14:case 15:if(!_e&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){l=r=r.next;do{var i=l,o=i.destroy;i=i.tag,o!==void 0&&(i&2||i&4)&&Yo(n,t,o),l=l.next}while(l!==r)}It(e,t,n);break;case 1:if(!_e&&(Bn(n,t),r=n.stateNode,typeof r.componentWillUnmount=="function"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(a){ue(n,t,a)}It(e,t,n);break;case 21:It(e,t,n);break;case 22:n.mode&1?(_e=(r=_e)||n.memoizedState!==null,It(e,t,n),_e=r):It(e,t,n);break;default:It(e,t,n)}}function as(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new rh),t.forEach(function(r){var l=ph.bind(null,e,r);n.has(r)||(n.add(r),r.then(l,l))})}}function nt(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var l=n[r];try{var i=e,o=t,a=o;e:for(;a!==null;){switch(a.tag){case 5:xe=a.stateNode,lt=!1;break e;case 3:xe=a.stateNode.containerInfo,lt=!0;break e;case 4:xe=a.stateNode.containerInfo,lt=!0;break e}a=a.return}if(xe===null)throw Error(L(160));kf(i,o,l),xe=null,lt=!1;var u=l.alternate;u!==null&&(u.return=null),l.return=null}catch(s){ue(l,t,s)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)xf(t,e),t=t.sibling}function xf(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(nt(t,e),dt(e),r&4){try{Fr(3,e,e.return),gi(3,e)}catch(w){ue(e,e.return,w)}try{Fr(5,e,e.return)}catch(w){ue(e,e.return,w)}}break;case 1:nt(t,e),dt(e),r&512&&n!==null&&Bn(n,n.return);break;case 5:if(nt(t,e),dt(e),r&512&&n!==null&&Bn(n,n.return),e.flags&32){var l=e.stateNode;try{Ar(l,"")}catch(w){ue(e,e.return,w)}}if(r&4&&(l=e.stateNode,l!=null)){var i=e.memoizedProps,o=n!==null?n.memoizedProps:i,a=e.type,u=e.updateQueue;if(e.updateQueue=null,u!==null)try{a==="input"&&i.type==="radio"&&i.name!=null&&Ws(l,i),So(a,o);var s=So(a,i);for(o=0;o<u.length;o+=2){var f=u[o],p=u[o+1];f==="style"?Xs(l,p):f==="dangerouslySetInnerHTML"?Ks(l,p):f==="children"?Ar(l,p):sa(l,f,p,s)}switch(a){case"input":mo(l,i);break;case"textarea":$s(l,i);break;case"select":var m=l._wrapperState.wasMultiple;l._wrapperState.wasMultiple=!!i.multiple;var k=i.value;k!=null?$n(l,!!i.multiple,k,!1):m!==!!i.multiple&&(i.defaultValue!=null?$n(l,!!i.multiple,i.defaultValue,!0):$n(l,!!i.multiple,i.multiple?[]:"",!1))}l[Xr]=i}catch(w){ue(e,e.return,w)}}break;case 6:if(nt(t,e),dt(e),r&4){if(e.stateNode===null)throw Error(L(162));l=e.stateNode,i=e.memoizedProps;try{l.nodeValue=i}catch(w){ue(e,e.return,w)}}break;case 3:if(nt(t,e),dt(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{Wr(t.containerInfo)}catch(w){ue(e,e.return,w)}break;case 4:nt(t,e),dt(e);break;case 13:nt(t,e),dt(e),l=e.child,l.flags&8192&&(i=l.memoizedState!==null,l.stateNode.isHidden=i,!i||l.alternate!==null&&l.alternate.memoizedState!==null||(Ha=fe())),r&4&&as(e);break;case 22:if(f=n!==null&&n.memoizedState!==null,e.mode&1?(_e=(s=_e)||f,nt(t,e),_e=s):nt(t,e),dt(e),r&8192){if(s=e.memoizedState!==null,(e.stateNode.isHidden=s)&&!f&&e.mode&1)for(z=e,f=e.child;f!==null;){for(p=z=f;z!==null;){switch(m=z,k=m.child,m.tag){case 0:case 11:case 14:case 15:Fr(4,m,m.return);break;case 1:Bn(m,m.return);var S=m.stateNode;if(typeof S.componentWillUnmount=="function"){r=m,n=m.return;try{t=r,S.props=t.memoizedProps,S.state=t.memoizedState,S.componentWillUnmount()}catch(w){ue(r,n,w)}}break;case 5:Bn(m,m.return);break;case 22:if(m.memoizedState!==null){ss(p);continue}}k!==null?(k.return=m,z=k):ss(p)}f=f.sibling}e:for(f=null,p=e;;){if(p.tag===5){if(f===null){f=p;try{l=p.stateNode,s?(i=l.style,typeof i.setProperty=="function"?i.setProperty("display","none","important"):i.display="none"):(a=p.stateNode,u=p.memoizedProps.style,o=u!=null&&u.hasOwnProperty("display")?u.display:null,a.style.display=Ys("display",o))}catch(w){ue(e,e.return,w)}}}else if(p.tag===6){if(f===null)try{p.stateNode.nodeValue=s?"":p.memoizedProps}catch(w){ue(e,e.return,w)}}else if((p.tag!==22&&p.tag!==23||p.memoizedState===null||p===e)&&p.child!==null){p.child.return=p,p=p.child;continue}if(p===e)break e;for(;p.sibling===null;){if(p.return===null||p.return===e)break e;f===p&&(f=null),p=p.return}f===p&&(f=null),p.sibling.return=p.return,p=p.sibling}}break;case 19:nt(t,e),dt(e),r&4&&as(e);break;case 21:break;default:nt(t,e),dt(e)}}function dt(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Ef(n)){var r=n;break e}n=n.return}throw Error(L(160))}switch(r.tag){case 5:var l=r.stateNode;r.flags&32&&(Ar(l,""),r.flags&=-33);var i=os(e);Jo(e,i,l);break;case 3:case 4:var o=r.stateNode.containerInfo,a=os(e);Go(e,a,o);break;default:throw Error(L(161))}}catch(u){ue(e,e.return,u)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function ih(e,t,n){z=e,Cf(e)}function Cf(e,t,n){for(var r=(e.mode&1)!==0;z!==null;){var l=z,i=l.child;if(l.tag===22&&r){var o=l.memoizedState!==null||Pl;if(!o){var a=l.alternate,u=a!==null&&a.memoizedState!==null||_e;a=Pl;var s=_e;if(Pl=o,(_e=u)&&!s)for(z=l;z!==null;)o=z,u=o.child,o.tag===22&&o.memoizedState!==null?cs(l):u!==null?(u.return=o,z=u):cs(l);for(;i!==null;)z=i,Cf(i),i=i.sibling;z=l,Pl=a,_e=s}us(e)}else l.subtreeFlags&8772&&i!==null?(i.return=l,z=i):us(e)}}function us(e){for(;z!==null;){var t=z;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:_e||gi(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!_e)if(n===null)r.componentDidMount();else{var l=t.elementType===t.type?n.memoizedProps:rt(t.type,n.memoizedProps);r.componentDidUpdate(l,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;i!==null&&Qu(t,i,r);break;case 3:var o=t.updateQueue;if(o!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}Qu(t,o,n)}break;case 5:var a=t.stateNode;if(n===null&&t.flags&4){n=a;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var s=t.alternate;if(s!==null){var f=s.memoizedState;if(f!==null){var p=f.dehydrated;p!==null&&Wr(p)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(L(163))}_e||t.flags&512&&Xo(t)}catch(m){ue(t,t.return,m)}}if(t===e){z=null;break}if(n=t.sibling,n!==null){n.return=t.return,z=n;break}z=t.return}}function ss(e){for(;z!==null;){var t=z;if(t===e){z=null;break}var n=t.sibling;if(n!==null){n.return=t.return,z=n;break}z=t.return}}function cs(e){for(;z!==null;){var t=z;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{gi(4,t)}catch(u){ue(t,n,u)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount=="function"){var l=t.return;try{r.componentDidMount()}catch(u){ue(t,l,u)}}var i=t.return;try{Xo(t)}catch(u){ue(t,i,u)}break;case 5:var o=t.return;try{Xo(t)}catch(u){ue(t,o,u)}}}catch(u){ue(t,t.return,u)}if(t===e){z=null;break}var a=t.sibling;if(a!==null){a.return=t.return,z=a;break}z=t.return}}var oh=Math.ceil,ri=Tt.ReactCurrentDispatcher,Ba=Tt.ReactCurrentOwner,qe=Tt.ReactCurrentBatchConfig,K=0,Se=null,pe=null,Ce=0,Be=0,Vn=nn(0),ve=0,el=null,wn=0,yi=0,Va=0,Or=null,Fe=null,Ha=0,nr=1/0,yt=null,li=!1,Zo=null,Jt=null,Rl=!1,$t=null,ii=0,Ur=0,qo=null,Ol=-1,Ul=0;function ze(){return K&6?fe():Ol!==-1?Ol:Ol=fe()}function Zt(e){return e.mode&1?K&2&&Ce!==0?Ce&-Ce:Wp.transition!==null?(Ul===0&&(Ul=oc()),Ul):(e=X,e!==0||(e=window.event,e=e===void 0?16:pc(e.type)),e):1}function ut(e,t,n,r){if(50<Ur)throw Ur=0,qo=null,Error(L(185));rl(e,n,r),(!(K&2)||e!==Se)&&(e===Se&&(!(K&2)&&(yi|=n),ve===4&&Ht(e,Ce)),je(e,r),n===1&&K===0&&!(t.mode&1)&&(nr=fe()+500,hi&&rn()))}function je(e,t){var n=e.callbackNode;Wd(e,t);var r=Hl(e,e===Se?Ce:0);if(r===0)n!==null&&wu(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&wu(n),t===1)e.tag===0?Hp(fs.bind(null,e)):zc(fs.bind(null,e)),jp(function(){!(K&6)&&rn()}),n=null;else{switch(ac(r)){case 1:n=ha;break;case 4:n=lc;break;case 16:n=Vl;break;case 536870912:n=ic;break;default:n=Vl}n=zf(n,Pf.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Pf(e,t){if(Ol=-1,Ul=0,K&6)throw Error(L(327));var n=e.callbackNode;if(Gn()&&e.callbackNode!==n)return null;var r=Hl(e,e===Se?Ce:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=oi(e,r);else{t=r;var l=K;K|=2;var i=Lf();(Se!==e||Ce!==t)&&(yt=null,nr=fe()+500,hn(e,t));do try{sh();break}catch(a){Rf(e,a)}while(1);La(),ri.current=i,K=l,pe!==null?t=0:(Se=null,Ce=0,t=ve)}if(t!==0){if(t===2&&(l=Po(e),l!==0&&(r=l,t=bo(e,l))),t===1)throw n=el,hn(e,0),Ht(e,r),je(e,fe()),n;if(t===6)Ht(e,r);else{if(l=e.current.alternate,!(r&30)&&!ah(l)&&(t=oi(e,r),t===2&&(i=Po(e),i!==0&&(r=i,t=bo(e,i))),t===1))throw n=el,hn(e,0),Ht(e,r),je(e,fe()),n;switch(e.finishedWork=l,e.finishedLanes=r,t){case 0:case 1:throw Error(L(345));case 2:un(e,Fe,yt);break;case 3:if(Ht(e,r),(r&130023424)===r&&(t=Ha+500-fe(),10<t)){if(Hl(e,0)!==0)break;if(l=e.suspendedLanes,(l&r)!==r){ze(),e.pingedLanes|=e.suspendedLanes&l;break}e.timeoutHandle=Mo(un.bind(null,e,Fe,yt),t);break}un(e,Fe,yt);break;case 4:if(Ht(e,r),(r&4194240)===r)break;for(t=e.eventTimes,l=-1;0<r;){var o=31-at(r);i=1<<o,o=t[o],o>l&&(l=o),r&=~i}if(r=l,r=fe()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*oh(r/1960))-r,10<r){e.timeoutHandle=Mo(un.bind(null,e,Fe,yt),r);break}un(e,Fe,yt);break;case 5:un(e,Fe,yt);break;default:throw Error(L(329))}}}return je(e,fe()),e.callbackNode===n?Pf.bind(null,e):null}function bo(e,t){var n=Or;return e.current.memoizedState.isDehydrated&&(hn(e,t).flags|=256),e=oi(e,t),e!==2&&(t=Fe,Fe=n,t!==null&&ea(t)),e}function ea(e){Fe===null?Fe=e:Fe.push.apply(Fe,e)}function ah(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var l=n[r],i=l.getSnapshot;l=l.value;try{if(!st(i(),l))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function Ht(e,t){for(t&=~Va,t&=~yi,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-at(t),r=1<<n;e[n]=-1,t&=~r}}function fs(e){if(K&6)throw Error(L(327));Gn();var t=Hl(e,0);if(!(t&1))return je(e,fe()),null;var n=oi(e,t);if(e.tag!==0&&n===2){var r=Po(e);r!==0&&(t=r,n=bo(e,r))}if(n===1)throw n=el,hn(e,0),Ht(e,t),je(e,fe()),n;if(n===6)throw Error(L(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,un(e,Fe,yt),je(e,fe()),null}function Wa(e,t){var n=K;K|=1;try{return e(t)}finally{K=n,K===0&&(nr=fe()+500,hi&&rn())}}function Sn(e){$t!==null&&$t.tag===0&&!(K&6)&&Gn();var t=K;K|=1;var n=qe.transition,r=X;try{if(qe.transition=null,X=1,e)return e()}finally{X=r,qe.transition=n,K=t,!(K&6)&&rn()}}function $a(){Be=Vn.current,ee(Vn)}function hn(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,Ip(n)),pe!==null)for(n=pe.return;n!==null;){var r=n;switch(Ca(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Yl();break;case 3:er(),ee(Ue),ee(Te),Ma();break;case 5:za(r);break;case 4:er();break;case 13:ee(le);break;case 19:ee(le);break;case 10:_a(r.type._context);break;case 22:case 23:$a()}n=n.return}if(Se=e,pe=e=qt(e.current,null),Ce=Be=t,ve=0,el=null,Va=yi=wn=0,Fe=Or=null,cn!==null){for(t=0;t<cn.length;t++)if(n=cn[t],r=n.interleaved,r!==null){n.interleaved=null;var l=r.next,i=n.pending;if(i!==null){var o=i.next;i.next=l,r.next=o}n.pending=r}cn=null}return e}function Rf(e,t){do{var n=pe;try{if(La(),zl.current=ni,ti){for(var r=ie.memoizedState;r!==null;){var l=r.queue;l!==null&&(l.pending=null),r=r.next}ti=!1}if(yn=0,we=me=ie=null,Mr=!1,Zr=0,Ba.current=null,n===null||n.return===null){ve=1,el=t,pe=null;break}e:{var i=e,o=n.return,a=n,u=t;if(t=Ce,a.flags|=32768,u!==null&&typeof u=="object"&&typeof u.then=="function"){var s=u,f=a,p=f.tag;if(!(f.mode&1)&&(p===0||p===11||p===15)){var m=f.alternate;m?(f.updateQueue=m.updateQueue,f.memoizedState=m.memoizedState,f.lanes=m.lanes):(f.updateQueue=null,f.memoizedState=null)}var k=qu(o);if(k!==null){k.flags&=-257,bu(k,o,a,i,t),k.mode&1&&Zu(i,s,t),t=k,u=s;var S=t.updateQueue;if(S===null){var w=new Set;w.add(u),t.updateQueue=w}else S.add(u);break e}else{if(!(t&1)){Zu(i,s,t),Qa();break e}u=Error(L(426))}}else if(re&&a.mode&1){var C=qu(o);if(C!==null){!(C.flags&65536)&&(C.flags|=256),bu(C,o,a,i,t),Pa(tr(u,a));break e}}i=u=tr(u,a),ve!==4&&(ve=2),Or===null?Or=[i]:Or.push(i),i=o;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t;var d=sf(i,u,t);$u(i,d);break e;case 1:a=u;var c=i.type,h=i.stateNode;if(!(i.flags&128)&&(typeof c.getDerivedStateFromError=="function"||h!==null&&typeof h.componentDidCatch=="function"&&(Jt===null||!Jt.has(h)))){i.flags|=65536,t&=-t,i.lanes|=t;var E=cf(i,a,t);$u(i,E);break e}}i=i.return}while(i!==null)}Tf(n)}catch(_){t=_,pe===n&&n!==null&&(pe=n=n.return);continue}break}while(1)}function Lf(){var e=ri.current;return ri.current=ni,e===null?ni:e}function Qa(){(ve===0||ve===3||ve===2)&&(ve=4),Se===null||!(wn&268435455)&&!(yi&268435455)||Ht(Se,Ce)}function oi(e,t){var n=K;K|=2;var r=Lf();(Se!==e||Ce!==t)&&(yt=null,hn(e,t));do try{uh();break}catch(l){Rf(e,l)}while(1);if(La(),K=n,ri.current=r,pe!==null)throw Error(L(261));return Se=null,Ce=0,ve}function uh(){for(;pe!==null;)_f(pe)}function sh(){for(;pe!==null&&!Fd();)_f(pe)}function _f(e){var t=Df(e.alternate,e,Be);e.memoizedProps=e.pendingProps,t===null?Tf(e):pe=t,Ba.current=null}function Tf(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=nh(n,t),n!==null){n.flags&=32767,pe=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{ve=6,pe=null;return}}else if(n=th(n,t,Be),n!==null){pe=n;return}if(t=t.sibling,t!==null){pe=t;return}pe=t=e}while(t!==null);ve===0&&(ve=5)}function un(e,t,n){var r=X,l=qe.transition;try{qe.transition=null,X=1,ch(e,t,n,r)}finally{qe.transition=l,X=r}return null}function ch(e,t,n,r){do Gn();while($t!==null);if(K&6)throw Error(L(327));n=e.finishedWork;var l=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(L(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if($d(e,i),e===Se&&(pe=Se=null,Ce=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||Rl||(Rl=!0,zf(Vl,function(){return Gn(),null})),i=(n.flags&15990)!==0,n.subtreeFlags&15990||i){i=qe.transition,qe.transition=null;var o=X;X=1;var a=K;K|=4,Ba.current=null,lh(e,n),xf(n,e),Np(Do),Wl=!!No,Do=No=null,e.current=n,ih(n),Od(),K=a,X=o,qe.transition=i}else e.current=n;if(Rl&&(Rl=!1,$t=e,ii=l),i=e.pendingLanes,i===0&&(Jt=null),jd(n.stateNode),je(e,fe()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)l=t[n],r(l.value,{componentStack:l.stack,digest:l.digest});if(li)throw li=!1,e=Zo,Zo=null,e;return ii&1&&e.tag!==0&&Gn(),i=e.pendingLanes,i&1?e===qo?Ur++:(Ur=0,qo=e):Ur=0,rn(),null}function Gn(){if($t!==null){var e=ac(ii),t=qe.transition,n=X;try{if(qe.transition=null,X=16>e?16:e,$t===null)var r=!1;else{if(e=$t,$t=null,ii=0,K&6)throw Error(L(331));var l=K;for(K|=4,z=e.current;z!==null;){var i=z,o=i.child;if(z.flags&16){var a=i.deletions;if(a!==null){for(var u=0;u<a.length;u++){var s=a[u];for(z=s;z!==null;){var f=z;switch(f.tag){case 0:case 11:case 15:Fr(8,f,i)}var p=f.child;if(p!==null)p.return=f,z=p;else for(;z!==null;){f=z;var m=f.sibling,k=f.return;if(Sf(f),f===s){z=null;break}if(m!==null){m.return=k,z=m;break}z=k}}}var S=i.alternate;if(S!==null){var w=S.child;if(w!==null){S.child=null;do{var C=w.sibling;w.sibling=null,w=C}while(w!==null)}}z=i}}if(i.subtreeFlags&2064&&o!==null)o.return=i,z=o;else e:for(;z!==null;){if(i=z,i.flags&2048)switch(i.tag){case 0:case 11:case 15:Fr(9,i,i.return)}var d=i.sibling;if(d!==null){d.return=i.return,z=d;break e}z=i.return}}var c=e.current;for(z=c;z!==null;){o=z;var h=o.child;if(o.subtreeFlags&2064&&h!==null)h.return=o,z=h;else e:for(o=c;z!==null;){if(a=z,a.flags&2048)try{switch(a.tag){case 0:case 11:case 15:gi(9,a)}}catch(_){ue(a,a.return,_)}if(a===o){z=null;break e}var E=a.sibling;if(E!==null){E.return=a.return,z=E;break e}z=a.return}}if(K=l,rn(),mt&&typeof mt.onPostCommitFiberRoot=="function")try{mt.onPostCommitFiberRoot(si,e)}catch{}r=!0}return r}finally{X=n,qe.transition=t}}return!1}function ds(e,t,n){t=tr(n,t),t=sf(e,t,1),e=Gt(e,t,1),t=ze(),e!==null&&(rl(e,1,t),je(e,t))}function ue(e,t,n){if(e.tag===3)ds(e,e,n);else for(;t!==null;){if(t.tag===3){ds(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError=="function"||typeof r.componentDidCatch=="function"&&(Jt===null||!Jt.has(r))){e=tr(n,e),e=cf(t,e,1),t=Gt(t,e,1),e=ze(),t!==null&&(rl(t,1,e),je(t,e));break}}t=t.return}}function fh(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ze(),e.pingedLanes|=e.suspendedLanes&n,Se===e&&(Ce&n)===n&&(ve===4||ve===3&&(Ce&130023424)===Ce&&500>fe()-Ha?hn(e,0):Va|=n),je(e,t)}function Nf(e,t){t===0&&(e.mode&1?(t=vl,vl<<=1,!(vl&130023424)&&(vl=4194304)):t=1);var n=ze();e=Rt(e,t),e!==null&&(rl(e,t,n),je(e,n))}function dh(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Nf(e,n)}function ph(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,l=e.memoizedState;l!==null&&(n=l.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(L(314))}r!==null&&r.delete(t),Nf(e,n)}var Df;Df=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||Ue.current)Oe=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return Oe=!1,eh(e,t,n);Oe=!!(e.flags&131072)}else Oe=!1,re&&t.flags&1048576&&Mc(t,Jl,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Fl(e,t),e=t.pendingProps;var l=Zn(t,Te.current);Xn(t,n),l=Oa(null,t,r,e,l,n);var i=Ua();return t.flags|=1,typeof l=="object"&&l!==null&&typeof l.render=="function"&&l.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ie(r)?(i=!0,Xl(t)):i=!1,t.memoizedState=l.state!==null&&l.state!==void 0?l.state:null,Na(t),l.updater=mi,t.stateNode=l,l._reactInternals=t,Bo(t,r,e,n),t=Wo(null,t,r,!0,i,n)):(t.tag=0,re&&i&&xa(t),De(null,t,l,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Fl(e,t),e=t.pendingProps,l=r._init,r=l(r._payload),t.type=r,l=t.tag=mh(r),e=rt(r,e),l){case 0:t=Ho(null,t,r,e,n);break e;case 1:t=ns(null,t,r,e,n);break e;case 11:t=es(null,t,r,e,n);break e;case 14:t=ts(null,t,r,rt(r.type,e),n);break e}throw Error(L(306,r,""))}return t;case 0:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:rt(r,l),Ho(e,t,r,l,n);case 1:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:rt(r,l),ns(e,t,r,l,n);case 3:e:{if(hf(t),e===null)throw Error(L(387));r=t.pendingProps,i=t.memoizedState,l=i.element,Ic(e,t),bl(t,r,null,n);var o=t.memoizedState;if(r=o.element,i.isDehydrated)if(i={element:r,isDehydrated:!1,cache:o.cache,pendingSuspenseBoundaries:o.pendingSuspenseBoundaries,transitions:o.transitions},t.updateQueue.baseState=i,t.memoizedState=i,t.flags&256){l=tr(Error(L(423)),t),t=rs(e,t,r,n,l);break e}else if(r!==l){l=tr(Error(L(424)),t),t=rs(e,t,r,n,l);break e}else for(Ve=Xt(t.stateNode.containerInfo.firstChild),He=t,re=!0,ot=null,n=Vc(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(qn(),r===l){t=Lt(e,t,n);break e}De(e,t,r,n)}t=t.child}return t;case 5:return Hc(t),e===null&&Io(t),r=t.type,l=t.pendingProps,i=e!==null?e.memoizedProps:null,o=l.children,zo(r,l)?o=null:i!==null&&zo(r,i)&&(t.flags|=32),pf(e,t),De(e,t,o,n),t.child;case 6:return e===null&&Io(t),null;case 13:return mf(e,t,n);case 4:return Da(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=bn(t,null,r,n):De(e,t,r,n),t.child;case 11:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:rt(r,l),es(e,t,r,l,n);case 7:return De(e,t,t.pendingProps,n),t.child;case 8:return De(e,t,t.pendingProps.children,n),t.child;case 12:return De(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,l=t.pendingProps,i=t.memoizedProps,o=l.value,Z(Zl,r._currentValue),r._currentValue=o,i!==null)if(st(i.value,o)){if(i.children===l.children&&!Ue.current){t=Lt(e,t,n);break e}}else for(i=t.child,i!==null&&(i.return=t);i!==null;){var a=i.dependencies;if(a!==null){o=i.child;for(var u=a.firstContext;u!==null;){if(u.context===r){if(i.tag===1){u=kt(-1,n&-n),u.tag=2;var s=i.updateQueue;if(s!==null){s=s.shared;var f=s.pending;f===null?u.next=u:(u.next=f.next,f.next=u),s.pending=u}}i.lanes|=n,u=i.alternate,u!==null&&(u.lanes|=n),jo(i.return,n,t),a.lanes|=n;break}u=u.next}}else if(i.tag===10)o=i.type===t.type?null:i.child;else if(i.tag===18){if(o=i.return,o===null)throw Error(L(341));o.lanes|=n,a=o.alternate,a!==null&&(a.lanes|=n),jo(o,n,t),o=i.sibling}else o=i.child;if(o!==null)o.return=i;else for(o=i;o!==null;){if(o===t){o=null;break}if(i=o.sibling,i!==null){i.return=o.return,o=i;break}o=o.return}i=o}De(e,t,l.children,n),t=t.child}return t;case 9:return l=t.type,r=t.pendingProps.children,Xn(t,n),l=be(l),r=r(l),t.flags|=1,De(e,t,r,n),t.child;case 14:return r=t.type,l=rt(r,t.pendingProps),l=rt(r.type,l),ts(e,t,r,l,n);case 15:return ff(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,l=t.pendingProps,l=t.elementType===r?l:rt(r,l),Fl(e,t),t.tag=1,Ie(r)?(e=!0,Xl(t)):e=!1,Xn(t,n),Ac(t,r,l),Bo(t,r,l,n),Wo(null,t,r,!0,e,n);case 19:return vf(e,t,n);case 22:return df(e,t,n)}throw Error(L(156,t.tag))};function zf(e,t){return rc(e,t)}function hh(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ze(e,t,n,r){return new hh(e,t,n,r)}function Ka(e){return e=e.prototype,!(!e||!e.isReactComponent)}function mh(e){if(typeof e=="function")return Ka(e)?1:0;if(e!=null){if(e=e.$$typeof,e===fa)return 11;if(e===da)return 14}return 2}function qt(e,t){var n=e.alternate;return n===null?(n=Ze(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Il(e,t,n,r,l,i){var o=2;if(r=e,typeof e=="function")Ka(e)&&(o=1);else if(typeof e=="string")o=5;else e:switch(e){case Dn:return mn(n.children,l,i,t);case ca:o=8,l|=8;break;case so:return e=Ze(12,n,t,l|2),e.elementType=so,e.lanes=i,e;case co:return e=Ze(13,n,t,l),e.elementType=co,e.lanes=i,e;case fo:return e=Ze(19,n,t,l),e.elementType=fo,e.lanes=i,e;case Bs:return wi(n,l,i,t);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case js:o=10;break e;case As:o=9;break e;case fa:o=11;break e;case da:o=14;break e;case At:o=16,r=null;break e}throw Error(L(130,e==null?e:typeof e,""))}return t=Ze(o,n,t,l),t.elementType=e,t.type=r,t.lanes=i,t}function mn(e,t,n,r){return e=Ze(7,e,r,t),e.lanes=n,e}function wi(e,t,n,r){return e=Ze(22,e,r,t),e.elementType=Bs,e.lanes=n,e.stateNode={isHidden:!1},e}function ro(e,t,n){return e=Ze(6,e,null,t),e.lanes=n,e}function lo(e,t,n){return t=Ze(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function vh(e,t,n,r,l){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=ji(0),this.expirationTimes=ji(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=ji(0),this.identifierPrefix=r,this.onRecoverableError=l,this.mutableSourceEagerHydrationData=null}function Ya(e,t,n,r,l,i,o,a,u){return e=new vh(e,t,n,a,u),t===1?(t=1,i===!0&&(t|=8)):t=0,i=Ze(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Na(i),e}function gh(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Nn,key:r==null?null:""+r,children:e,containerInfo:t,implementation:n}}function Mf(e){if(!e)return en;e=e._reactInternals;e:{if(Cn(e)!==e||e.tag!==1)throw Error(L(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ie(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(L(171))}if(e.tag===1){var n=e.type;if(Ie(n))return Dc(e,n,t)}return t}function Ff(e,t,n,r,l,i,o,a,u){return e=Ya(n,r,!0,e,l,i,o,a,u),e.context=Mf(null),n=e.current,r=ze(),l=Zt(n),i=kt(r,l),i.callback=t??null,Gt(n,i,l),e.current.lanes=l,rl(e,l,r),je(e,r),e}function Si(e,t,n,r){var l=t.current,i=ze(),o=Zt(l);return n=Mf(n),t.context===null?t.context=n:t.pendingContext=n,t=kt(i,o),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=Gt(l,t,o),e!==null&&(ut(e,l,o,i),Dl(e,l,o)),o}function ai(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function ps(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function Xa(e,t){ps(e,t),(e=e.alternate)&&ps(e,t)}function yh(){return null}var Of=typeof reportError=="function"?reportError:function(e){console.error(e)};function Ga(e){this._internalRoot=e}Ei.prototype.render=Ga.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(L(409));Si(e,t,null,null)};Ei.prototype.unmount=Ga.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;Sn(function(){Si(null,e,null,null)}),t[Pt]=null}};function Ei(e){this._internalRoot=e}Ei.prototype.unstable_scheduleHydration=function(e){if(e){var t=cc();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Vt.length&&t!==0&&t<Vt[n].priority;n++);Vt.splice(n,0,e),n===0&&dc(e)}};function Ja(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function ki(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function hs(){}function wh(e,t,n,r,l){if(l){if(typeof r=="function"){var i=r;r=function(){var s=ai(o);i.call(s)}}var o=Ff(t,r,e,0,null,!1,!1,"",hs);return e._reactRootContainer=o,e[Pt]=o.current,Kr(e.nodeType===8?e.parentNode:e),Sn(),o}for(;l=e.lastChild;)e.removeChild(l);if(typeof r=="function"){var a=r;r=function(){var s=ai(u);a.call(s)}}var u=Ya(e,0,!1,null,null,!1,!1,"",hs);return e._reactRootContainer=u,e[Pt]=u.current,Kr(e.nodeType===8?e.parentNode:e),Sn(function(){Si(t,u,n,r)}),u}function xi(e,t,n,r,l){var i=n._reactRootContainer;if(i){var o=i;if(typeof l=="function"){var a=l;l=function(){var u=ai(o);a.call(u)}}Si(t,o,e,l)}else o=wh(n,t,e,l,r);return ai(o)}uc=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Rr(t.pendingLanes);n!==0&&(ma(t,n|1),je(t,fe()),!(K&6)&&(nr=fe()+500,rn()))}break;case 13:Sn(function(){var r=Rt(e,1);if(r!==null){var l=ze();ut(r,e,1,l)}}),Xa(e,1)}};va=function(e){if(e.tag===13){var t=Rt(e,134217728);if(t!==null){var n=ze();ut(t,e,134217728,n)}Xa(e,134217728)}};sc=function(e){if(e.tag===13){var t=Zt(e),n=Rt(e,t);if(n!==null){var r=ze();ut(n,e,t,r)}Xa(e,t)}};cc=function(){return X};fc=function(e,t){var n=X;try{return X=e,t()}finally{X=n}};ko=function(e,t,n){switch(t){case"input":if(mo(e,n),t=n.name,n.type==="radio"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var l=pi(r);if(!l)throw Error(L(90));Hs(r),mo(r,l)}}}break;case"textarea":$s(e,n);break;case"select":t=n.value,t!=null&&$n(e,!!n.multiple,t,!1)}};Zs=Wa;qs=Sn;var Sh={usingClientEntryPoint:!1,Events:[il,On,pi,Gs,Js,Wa]},yr={findFiberByHostInstance:sn,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},Eh={bundleType:yr.bundleType,version:yr.version,rendererPackageName:yr.rendererPackageName,rendererConfig:yr.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Tt.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=tc(e),e===null?null:e.stateNode},findFiberByHostInstance:yr.findFiberByHostInstance||yh,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var Ll=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!Ll.isDisabled&&Ll.supportsFiber)try{si=Ll.inject(Eh),mt=Ll}catch{}}$e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Sh;$e.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Ja(t))throw Error(L(200));return gh(e,t,null,n)};$e.createRoot=function(e,t){if(!Ja(e))throw Error(L(299));var n=!1,r="",l=Of;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(l=t.onRecoverableError)),t=Ya(e,1,!1,null,null,n,!1,r,l),e[Pt]=t.current,Kr(e.nodeType===8?e.parentNode:e),new Ga(t)};$e.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render=="function"?Error(L(188)):(e=Object.keys(e).join(","),Error(L(268,e)));return e=tc(t),e=e===null?null:e.stateNode,e};$e.flushSync=function(e){return Sn(e)};$e.hydrate=function(e,t,n){if(!ki(t))throw Error(L(200));return xi(null,e,t,!0,n)};$e.hydrateRoot=function(e,t,n){if(!Ja(e))throw Error(L(405));var r=n!=null&&n.hydratedSources||null,l=!1,i="",o=Of;if(n!=null&&(n.unstable_strictMode===!0&&(l=!0),n.identifierPrefix!==void 0&&(i=n.identifierPrefix),n.onRecoverableError!==void 0&&(o=n.onRecoverableError)),t=Ff(t,null,e,1,n??null,l,!1,i,o),e[Pt]=t.current,Kr(e),r)for(e=0;e<r.length;e++)n=r[e],l=n._getVersion,l=l(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,l]:t.mutableSourceEagerHydrationData.push(n,l);return new Ei(t)};$e.render=function(e,t,n){if(!ki(t))throw Error(L(200));return xi(null,e,t,!1,n)};$e.unmountComponentAtNode=function(e){if(!ki(e))throw Error(L(40));return e._reactRootContainer?(Sn(function(){xi(null,null,e,!1,function(){e._reactRootContainer=null,e[Pt]=null})}),!0):!1};$e.unstable_batchedUpdates=Wa;$e.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ki(n))throw Error(L(200));if(e==null||e._reactInternals===void 0)throw Error(L(38));return xi(e,t,n,!1,r)};$e.version="18.2.0-next-9e3b772b8-20220608";function Uf(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Uf)}catch(e){console.error(e)}}Uf(),Ms.exports=$e;var If=Ms.exports;const kh=vd(If),xh=yd({__proto__:null,default:kh},[If]);/**
 * @remix-run/router v1.14.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function se(){return se=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},se.apply(this,arguments)}var ce;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(ce||(ce={}));const ms="popstate";function Ch(e){e===void 0&&(e={});function t(r,l){let{pathname:i,search:o,hash:a}=r.location;return tl("",{pathname:i,search:o,hash:a},l.state&&l.state.usr||null,l.state&&l.state.key||"default")}function n(r,l){return typeof l=="string"?l:kn(l)}return Rh(t,n,null,e)}function H(e,t){if(e===!1||e===null||typeof e>"u")throw new Error(t)}function En(e,t){if(!e){typeof console<"u"&&console.warn(t);try{throw new Error(t)}catch{}}}function Ph(){return Math.random().toString(36).substr(2,8)}function vs(e,t){return{usr:e.state,key:e.key,idx:t}}function tl(e,t,n,r){return n===void 0&&(n=null),se({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof t=="string"?Nt(t):t,{state:n,key:t&&t.key||r||Ph()})}function kn(e){let{pathname:t="/",search:n="",hash:r=""}=e;return n&&n!=="?"&&(t+=n.charAt(0)==="?"?n:"?"+n),r&&r!=="#"&&(t+=r.charAt(0)==="#"?r:"#"+r),t}function Nt(e){let t={};if(e){let n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));let r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function Rh(e,t,n,r){r===void 0&&(r={});let{window:l=document.defaultView,v5Compat:i=!1}=r,o=l.history,a=ce.Pop,u=null,s=f();s==null&&(s=0,o.replaceState(se({},o.state,{idx:s}),""));function f(){return(o.state||{idx:null}).idx}function p(){a=ce.Pop;let C=f(),d=C==null?null:C-s;s=C,u&&u({action:a,location:w.location,delta:d})}function m(C,d){a=ce.Push;let c=tl(w.location,C,d);n&&n(c,C),s=f()+1;let h=vs(c,s),E=w.createHref(c);try{o.pushState(h,"",E)}catch(_){if(_ instanceof DOMException&&_.name==="DataCloneError")throw _;l.location.assign(E)}i&&u&&u({action:a,location:w.location,delta:1})}function k(C,d){a=ce.Replace;let c=tl(w.location,C,d);n&&n(c,C),s=f();let h=vs(c,s),E=w.createHref(c);o.replaceState(h,"",E),i&&u&&u({action:a,location:w.location,delta:0})}function S(C){let d=l.location.origin!=="null"?l.location.origin:l.location.href,c=typeof C=="string"?C:kn(C);return H(d,"No window.location.(origin|href) available to create URL for href: "+c),new URL(c,d)}let w={get action(){return a},get location(){return e(l,o)},listen(C){if(u)throw new Error("A history only accepts one active listener");return l.addEventListener(ms,p),u=C,()=>{l.removeEventListener(ms,p),u=null}},createHref(C){return t(l,C)},createURL:S,encodeLocation(C){let d=S(C);return{pathname:d.pathname,search:d.search,hash:d.hash}},push:m,replace:k,go(C){return o.go(C)}};return w}var ae;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(ae||(ae={}));const Lh=new Set(["lazy","caseSensitive","path","id","index","children"]);function _h(e){return e.index===!0}function ta(e,t,n,r){return n===void 0&&(n=[]),r===void 0&&(r={}),e.map((l,i)=>{let o=[...n,i],a=typeof l.id=="string"?l.id:o.join("-");if(H(l.index!==!0||!l.children,"Cannot specify children on an index route"),H(!r[a],'Found a route id collision on id "'+a+`".  Route id's must be globally unique within Data Router usages`),_h(l)){let u=se({},l,t(l),{id:a});return r[a]=u,u}else{let u=se({},l,t(l),{id:a,children:void 0});return r[a]=u,l.children&&(u.children=ta(l.children,t,o,r)),u}})}function Hn(e,t,n){n===void 0&&(n="/");let r=typeof t=="string"?Nt(t):t,l=_t(r.pathname||"/",n);if(l==null)return null;let i=jf(e);Nh(i);let o=null;for(let a=0;o==null&&a<i.length;++a)o=Ah(i[a],Vh(l));return o}function Th(e,t){let{route:n,pathname:r,params:l}=e;return{id:n.id,pathname:r,params:l,data:t[n.id],handle:n.handle}}function jf(e,t,n,r){t===void 0&&(t=[]),n===void 0&&(n=[]),r===void 0&&(r="");let l=(i,o,a)=>{let u={relativePath:a===void 0?i.path||"":a,caseSensitive:i.caseSensitive===!0,childrenIndex:o,route:i};u.relativePath.startsWith("/")&&(H(u.relativePath.startsWith(r),'Absolute route path "'+u.relativePath+'" nested under path '+('"'+r+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),u.relativePath=u.relativePath.slice(r.length));let s=xt([r,u.relativePath]),f=n.concat(u);i.children&&i.children.length>0&&(H(i.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+s+'".')),jf(i.children,t,f,s)),!(i.path==null&&!i.index)&&t.push({path:s,score:Ih(s,i.index),routesMeta:f})};return e.forEach((i,o)=>{var a;if(i.path===""||!((a=i.path)!=null&&a.includes("?")))l(i,o);else for(let u of Af(i.path))l(i,o,u)}),t}function Af(e){let t=e.split("/");if(t.length===0)return[];let[n,...r]=t,l=n.endsWith("?"),i=n.replace(/\?$/,"");if(r.length===0)return l?[i,""]:[i];let o=Af(r.join("/")),a=[];return a.push(...o.map(u=>u===""?i:[i,u].join("/"))),l&&a.push(...o),a.map(u=>e.startsWith("/")&&u===""?"/":u)}function Nh(e){e.sort((t,n)=>t.score!==n.score?n.score-t.score:jh(t.routesMeta.map(r=>r.childrenIndex),n.routesMeta.map(r=>r.childrenIndex)))}const Dh=/^:[\w-]+$/,zh=3,Mh=2,Fh=1,Oh=10,Uh=-2,gs=e=>e==="*";function Ih(e,t){let n=e.split("/"),r=n.length;return n.some(gs)&&(r+=Uh),t&&(r+=Mh),n.filter(l=>!gs(l)).reduce((l,i)=>l+(Dh.test(i)?zh:i===""?Fh:Oh),r)}function jh(e,t){return e.length===t.length&&e.slice(0,-1).every((r,l)=>r===t[l])?e[e.length-1]-t[t.length-1]:0}function Ah(e,t){let{routesMeta:n}=e,r={},l="/",i=[];for(let o=0;o<n.length;++o){let a=n[o],u=o===n.length-1,s=l==="/"?t:t.slice(l.length)||"/",f=na({path:a.relativePath,caseSensitive:a.caseSensitive,end:u},s);if(!f)return null;Object.assign(r,f.params);let p=a.route;i.push({params:r,pathname:xt([l,f.pathname]),pathnameBase:Qh(xt([l,f.pathnameBase])),route:p}),f.pathnameBase!=="/"&&(l=xt([l,f.pathnameBase]))}return i}function na(e,t){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[n,r]=Bh(e.path,e.caseSensitive,e.end),l=t.match(n);if(!l)return null;let i=l[0],o=i.replace(/(.)\/+$/,"$1"),a=l.slice(1);return{params:r.reduce((s,f,p)=>{let{paramName:m,isOptional:k}=f;if(m==="*"){let w=a[p]||"";o=i.slice(0,i.length-w.length).replace(/(.)\/+$/,"$1")}const S=a[p];return k&&!S?s[m]=void 0:s[m]=Hh(S||"",m),s},{}),pathname:i,pathnameBase:o,pattern:e}}function Bh(e,t,n){t===void 0&&(t=!1),n===void 0&&(n=!0),En(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let r=[],l="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(o,a,u)=>(r.push({paramName:a,isOptional:u!=null}),u?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(r.push({paramName:"*"}),l+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?l+="\\/*$":e!==""&&e!=="/"&&(l+="(?:(?=\\/|$))"),[new RegExp(l,t?void 0:"i"),r]}function Vh(e){try{return decodeURI(e)}catch(t){return En(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+t+").")),e}}function Hh(e,t){try{return decodeURIComponent(e)}catch(n){return En(!1,'The value for the URL param "'+t+'" will not be decoded because'+(' the string "'+e+'" is a malformed URL segment. This is probably')+(" due to a bad percent encoding ("+n+").")),e}}function _t(e,t){if(t==="/")return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;let n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&r!=="/"?null:e.slice(n)||"/"}function Wh(e,t){t===void 0&&(t="/");let{pathname:n,search:r="",hash:l=""}=typeof e=="string"?Nt(e):e;return{pathname:n?n.startsWith("/")?n:$h(n,t):t,search:Kh(r),hash:Yh(l)}}function $h(e,t){let n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach(l=>{l===".."?n.length>1&&n.pop():l!=="."&&n.push(l)}),n.length>1?n.join("/"):"/"}function io(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the ")+("`to."+n+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function Bf(e){return e.filter((t,n)=>n===0||t.route.path&&t.route.path.length>0)}function Ci(e,t){let n=Bf(e);return t?n.map((r,l)=>l===e.length-1?r.pathname:r.pathnameBase):n.map(r=>r.pathnameBase)}function Pi(e,t,n,r){r===void 0&&(r=!1);let l;typeof e=="string"?l=Nt(e):(l=se({},e),H(!l.pathname||!l.pathname.includes("?"),io("?","pathname","search",l)),H(!l.pathname||!l.pathname.includes("#"),io("#","pathname","hash",l)),H(!l.search||!l.search.includes("#"),io("#","search","hash",l)));let i=e===""||l.pathname==="",o=i?"/":l.pathname,a;if(o==null)a=n;else{let p=t.length-1;if(!r&&o.startsWith("..")){let m=o.split("/");for(;m[0]==="..";)m.shift(),p-=1;l.pathname=m.join("/")}a=p>=0?t[p]:"/"}let u=Wh(l,a),s=o&&o!=="/"&&o.endsWith("/"),f=(i||o===".")&&n.endsWith("/");return!u.pathname.endsWith("/")&&(s||f)&&(u.pathname+="/"),u}const xt=e=>e.join("/").replace(/\/\/+/g,"/"),Qh=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),Kh=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,Yh=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;class Za{constructor(t,n,r,l){l===void 0&&(l=!1),this.status=t,this.statusText=n||"",this.internal=l,r instanceof Error?(this.data=r.toString(),this.error=r):this.data=r}}function Vf(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const Hf=["post","put","patch","delete"],Xh=new Set(Hf),Gh=["get",...Hf],Jh=new Set(Gh),Zh=new Set([301,302,303,307,308]),qh=new Set([307,308]),oo={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},bh={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},wr={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},Wf=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,em=e=>({hasErrorBoundary:!!e.hasErrorBoundary}),$f="remix-router-transitions";function tm(e){const t=e.window?e.window:typeof window<"u"?window:void 0,n=typeof t<"u"&&typeof t.document<"u"&&typeof t.document.createElement<"u",r=!n;H(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let l;if(e.mapRouteProperties)l=e.mapRouteProperties;else if(e.detectErrorBoundary){let g=e.detectErrorBoundary;l=y=>({hasErrorBoundary:g(y)})}else l=em;let i={},o=ta(e.routes,l,void 0,i),a,u=e.basename||"/",s=se({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1},e.future),f=null,p=new Set,m=null,k=null,S=null,w=e.hydrationData!=null,C=Hn(o,e.history.location,u),d=null;if(C==null){let g=Xe(404,{pathname:e.history.location.pathname}),{matches:y,route:x}=Ps(o);C=y,d={[x.id]:g}}let c,h=C.some(g=>g.route.lazy),E=C.some(g=>g.route.loader);if(h)c=!1;else if(!E)c=!0;else if(s.v7_partialHydration){let g=e.hydrationData?e.hydrationData.loaderData:null,y=e.hydrationData?e.hydrationData.errors:null;c=C.every(x=>x.route.loader&&x.route.loader.hydrate!==!0&&(g&&g[x.route.id]!==void 0||y&&y[x.route.id]!==void 0))}else c=e.hydrationData!=null;let _,v={historyAction:e.history.action,location:e.history.location,matches:C,initialized:c,navigation:oo,restoreScrollPosition:e.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||d,fetchers:new Map,blockers:new Map},P=ce.Pop,T=!1,M,O=!1,Q=new Map,he=null,de=!1,Ke=!1,Pn=[],zt=[],te=new Map,D=0,j=-1,B=new Map,Y=new Set,q=new Map,ct=new Map,Ee=new Set,tt=new Map,Ne=new Map,Mt=!1;function td(){if(f=e.history.listen(g=>{let{action:y,location:x,delta:N}=g;if(Mt){Mt=!1;return}En(Ne.size===0||N!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let F=au({currentLocation:v.location,nextLocation:x,historyAction:y});if(F&&N!=null){Mt=!0,e.history.go(N*-1),sl(F,{state:"blocked",location:x,proceed(){sl(F,{state:"proceeding",proceed:void 0,reset:void 0,location:x}),e.history.go(N)},reset(){let W=new Map(v.blockers);W.set(F,wr),Ae({blockers:W})}});return}return ln(y,x)}),n){dm(t,Q);let g=()=>pm(t,Q);t.addEventListener("pagehide",g),he=()=>t.removeEventListener("pagehide",g)}return v.initialized||ln(ce.Pop,v.location,{initialHydration:!0}),_}function nd(){f&&f(),he&&he(),p.clear(),M&&M.abort(),v.fetchers.forEach((g,y)=>ul(y)),v.blockers.forEach((g,y)=>ou(y))}function rd(g){return p.add(g),()=>p.delete(g)}function Ae(g,y){y===void 0&&(y={}),v=se({},v,g);let x=[],N=[];s.v7_fetcherPersist&&v.fetchers.forEach((F,W)=>{F.state==="idle"&&(Ee.has(W)?N.push(W):x.push(W))}),[...p].forEach(F=>F(v,{deletedFetchers:N,unstable_viewTransitionOpts:y.viewTransitionOpts,unstable_flushSync:y.flushSync===!0})),s.v7_fetcherPersist&&(x.forEach(F=>v.fetchers.delete(F)),N.forEach(F=>ul(F)))}function ur(g,y,x){var N,F;let{flushSync:W}=x===void 0?{}:x,A=v.actionData!=null&&v.navigation.formMethod!=null&&it(v.navigation.formMethod)&&v.navigation.state==="loading"&&((N=g.state)==null?void 0:N._isRedirect)!==!0,I;y.actionData?Object.keys(y.actionData).length>0?I=y.actionData:I=null:A?I=v.actionData:I=null;let U=y.loaderData?Cs(v.loaderData,y.loaderData,y.matches||[],y.errors):v.loaderData,$=v.blockers;$.size>0&&($=new Map($),$.forEach((J,ke)=>$.set(ke,wr)));let ge=T===!0||v.navigation.formMethod!=null&&it(v.navigation.formMethod)&&((F=g.state)==null?void 0:F._isRedirect)!==!0;a&&(o=a,a=void 0),de||P===ce.Pop||(P===ce.Push?e.history.push(g,g.state):P===ce.Replace&&e.history.replace(g,g.state));let V;if(P===ce.Pop){let J=Q.get(v.location.pathname);J&&J.has(g.pathname)?V={currentLocation:v.location,nextLocation:g}:Q.has(g.pathname)&&(V={currentLocation:g,nextLocation:v.location})}else if(O){let J=Q.get(v.location.pathname);J?J.add(g.pathname):(J=new Set([g.pathname]),Q.set(v.location.pathname,J)),V={currentLocation:v.location,nextLocation:g}}Ae(se({},y,{actionData:I,loaderData:U,historyAction:P,location:g,initialized:!0,navigation:oo,revalidation:"idle",restoreScrollPosition:su(g,y.matches||v.matches),preventScrollReset:ge,blockers:$}),{viewTransitionOpts:V,flushSync:W===!0}),P=ce.Pop,T=!1,O=!1,de=!1,Ke=!1,Pn=[],zt=[]}async function eu(g,y){if(typeof g=="number"){e.history.go(g);return}let x=ra(v.location,v.matches,u,s.v7_prependBasename,g,s.v7_relativeSplatPath,y==null?void 0:y.fromRouteId,y==null?void 0:y.relative),{path:N,submission:F,error:W}=ys(s.v7_normalizeFormMethod,!1,x,y),A=v.location,I=tl(v.location,N,y&&y.state);I=se({},I,e.history.encodeLocation(I));let U=y&&y.replace!=null?y.replace:void 0,$=ce.Push;U===!0?$=ce.Replace:U===!1||F!=null&&it(F.formMethod)&&F.formAction===v.location.pathname+v.location.search&&($=ce.Replace);let ge=y&&"preventScrollReset"in y?y.preventScrollReset===!0:void 0,V=(y&&y.unstable_flushSync)===!0,J=au({currentLocation:A,nextLocation:I,historyAction:$});if(J){sl(J,{state:"blocked",location:I,proceed(){sl(J,{state:"proceeding",proceed:void 0,reset:void 0,location:I}),eu(g,y)},reset(){let ke=new Map(v.blockers);ke.set(J,wr),Ae({blockers:ke})}});return}return await ln($,I,{submission:F,pendingError:W,preventScrollReset:ge,replace:y&&y.replace,enableViewTransition:y&&y.unstable_viewTransition,flushSync:V})}function ld(){if(_i(),Ae({revalidation:"loading"}),v.navigation.state!=="submitting"){if(v.navigation.state==="idle"){ln(v.historyAction,v.location,{startUninterruptedRevalidation:!0});return}ln(P||v.historyAction,v.navigation.location,{overrideNavigation:v.navigation})}}async function ln(g,y,x){M&&M.abort(),M=null,P=g,de=(x&&x.startUninterruptedRevalidation)===!0,pd(v.location,v.matches),T=(x&&x.preventScrollReset)===!0,O=(x&&x.enableViewTransition)===!0;let N=a||o,F=x&&x.overrideNavigation,W=Hn(N,y,u),A=(x&&x.flushSync)===!0;if(!W){let ke=Xe(404,{pathname:y.pathname}),{matches:Ye,route:ye}=Ps(N);Ti(),ur(y,{matches:Ye,loaderData:{},errors:{[ye.id]:ke}},{flushSync:A});return}if(v.initialized&&!Ke&&om(v.location,y)&&!(x&&x.submission&&it(x.submission.formMethod))){ur(y,{matches:W},{flushSync:A});return}M=new AbortController;let I=Er(e.history,y,M.signal,x&&x.submission),U,$;if(x&&x.pendingError)$={[Ir(W).route.id]:x.pendingError};else if(x&&x.submission&&it(x.submission.formMethod)){let ke=await id(I,y,x.submission,W,{replace:x.replace,flushSync:A});if(ke.shortCircuited)return;U=ke.pendingActionData,$=ke.pendingActionError,F=ao(y,x.submission),A=!1,I=new Request(I.url,{signal:I.signal})}let{shortCircuited:ge,loaderData:V,errors:J}=await od(I,y,W,F,x&&x.submission,x&&x.fetcherSubmission,x&&x.replace,x&&x.initialHydration===!0,A,U,$);ge||(M=null,ur(y,se({matches:W},U?{actionData:U}:{},{loaderData:V,errors:J})))}async function id(g,y,x,N,F){F===void 0&&(F={}),_i();let W=cm(y,x);Ae({navigation:W},{flushSync:F.flushSync===!0});let A,I=ia(N,y);if(!I.route.action&&!I.route.lazy)A={type:ae.error,error:Xe(405,{method:g.method,pathname:y.pathname,routeId:I.route.id})};else if(A=await Sr("action",g,I,N,i,l,u,s.v7_relativeSplatPath),g.signal.aborted)return{shortCircuited:!0};if(pn(A)){let U;return F&&F.replace!=null?U=F.replace:U=A.location===v.location.pathname+v.location.search,await sr(v,A,{submission:x,replace:U}),{shortCircuited:!0}}if(Wn(A)){let U=Ir(N,I.route.id);return(F&&F.replace)!==!0&&(P=ce.Push),{pendingActionData:{},pendingActionError:{[U.route.id]:A.error}}}if(dn(A))throw Xe(400,{type:"defer-action"});return{pendingActionData:{[I.route.id]:A.data}}}async function od(g,y,x,N,F,W,A,I,U,$,ge){let V=N||ao(y,F),J=F||W||_s(V),ke=a||o,[Ye,ye]=ws(e.history,v,x,J,y,s.v7_partialHydration&&I===!0,Ke,Pn,zt,Ee,q,Y,ke,u,$,ge);if(Ti(G=>!(x&&x.some(ne=>ne.route.id===G))||Ye&&Ye.some(ne=>ne.route.id===G)),j=++D,Ye.length===0&&ye.length===0){let G=lu();return ur(y,se({matches:x,loaderData:{},errors:ge||null},$?{actionData:$}:{},G?{fetchers:new Map(v.fetchers)}:{}),{flushSync:U}),{shortCircuited:!0}}if(!de&&(!s.v7_partialHydration||!I)){ye.forEach(ne=>{let ft=v.fetchers.get(ne.key),fl=kr(void 0,ft?ft.data:void 0);v.fetchers.set(ne.key,fl)});let G=$||v.actionData;Ae(se({navigation:V},G?Object.keys(G).length===0?{actionData:null}:{actionData:G}:{},ye.length>0?{fetchers:new Map(v.fetchers)}:{}),{flushSync:U})}ye.forEach(G=>{te.has(G.key)&&Ot(G.key),G.controller&&te.set(G.key,G.controller)});let Rn=()=>ye.forEach(G=>Ot(G.key));M&&M.signal.addEventListener("abort",Rn);let{results:Ni,loaderResults:Ln,fetcherResults:Ut}=await tu(v.matches,x,Ye,ye,g);if(g.signal.aborted)return{shortCircuited:!0};M&&M.signal.removeEventListener("abort",Rn),ye.forEach(G=>te.delete(G.key));let on=Rs(Ni);if(on){if(on.idx>=Ye.length){let G=ye[on.idx-Ye.length].key;Y.add(G)}return await sr(v,on.result,{replace:A}),{shortCircuited:!0}}let{loaderData:Di,errors:zi}=xs(v,x,Ye,Ln,ge,ye,Ut,tt);tt.forEach((G,ne)=>{G.subscribe(ft=>{(ft||G.done)&&tt.delete(ne)})});let Mi=lu(),_n=iu(j),cl=Mi||_n||ye.length>0;return se({loaderData:Di,errors:zi},cl?{fetchers:new Map(v.fetchers)}:{})}function ad(g,y,x,N){if(r)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");te.has(g)&&Ot(g);let F=(N&&N.unstable_flushSync)===!0,W=a||o,A=ra(v.location,v.matches,u,s.v7_prependBasename,x,s.v7_relativeSplatPath,y,N==null?void 0:N.relative),I=Hn(W,A,u);if(!I){cr(g,y,Xe(404,{pathname:A}),{flushSync:F});return}let{path:U,submission:$,error:ge}=ys(s.v7_normalizeFormMethod,!0,A,N);if(ge){cr(g,y,ge,{flushSync:F});return}let V=ia(I,U);if(T=(N&&N.preventScrollReset)===!0,$&&it($.formMethod)){ud(g,y,U,V,I,F,$);return}q.set(g,{routeId:y,path:U}),sd(g,y,U,V,I,F,$)}async function ud(g,y,x,N,F,W,A){if(_i(),q.delete(g),!N.route.action&&!N.route.lazy){let ne=Xe(405,{method:A.formMethod,pathname:x,routeId:y});cr(g,y,ne,{flushSync:W});return}let I=v.fetchers.get(g);Ft(g,fm(A,I),{flushSync:W});let U=new AbortController,$=Er(e.history,x,U.signal,A);te.set(g,U);let ge=D,V=await Sr("action",$,N,F,i,l,u,s.v7_relativeSplatPath);if($.signal.aborted){te.get(g)===U&&te.delete(g);return}if(s.v7_fetcherPersist&&Ee.has(g)){if(pn(V)||Wn(V)){Ft(g,jt(void 0));return}}else{if(pn(V))if(te.delete(g),j>ge){Ft(g,jt(void 0));return}else return Y.add(g),Ft(g,kr(A)),sr(v,V,{fetcherSubmission:A});if(Wn(V)){cr(g,y,V.error);return}}if(dn(V))throw Xe(400,{type:"defer-action"});let J=v.navigation.location||v.location,ke=Er(e.history,J,U.signal),Ye=a||o,ye=v.navigation.state!=="idle"?Hn(Ye,v.navigation.location,u):v.matches;H(ye,"Didn't find any matches after fetcher action");let Rn=++D;B.set(g,Rn);let Ni=kr(A,V.data);v.fetchers.set(g,Ni);let[Ln,Ut]=ws(e.history,v,ye,A,J,!1,Ke,Pn,zt,Ee,q,Y,Ye,u,{[N.route.id]:V.data},void 0);Ut.filter(ne=>ne.key!==g).forEach(ne=>{let ft=ne.key,fl=v.fetchers.get(ft),md=kr(void 0,fl?fl.data:void 0);v.fetchers.set(ft,md),te.has(ft)&&Ot(ft),ne.controller&&te.set(ft,ne.controller)}),Ae({fetchers:new Map(v.fetchers)});let on=()=>Ut.forEach(ne=>Ot(ne.key));U.signal.addEventListener("abort",on);let{results:Di,loaderResults:zi,fetcherResults:Mi}=await tu(v.matches,ye,Ln,Ut,ke);if(U.signal.aborted)return;U.signal.removeEventListener("abort",on),B.delete(g),te.delete(g),Ut.forEach(ne=>te.delete(ne.key));let _n=Rs(Di);if(_n){if(_n.idx>=Ln.length){let ne=Ut[_n.idx-Ln.length].key;Y.add(ne)}return sr(v,_n.result)}let{loaderData:cl,errors:G}=xs(v,v.matches,Ln,zi,void 0,Ut,Mi,tt);if(v.fetchers.has(g)){let ne=jt(V.data);v.fetchers.set(g,ne)}iu(Rn),v.navigation.state==="loading"&&Rn>j?(H(P,"Expected pending action"),M&&M.abort(),ur(v.navigation.location,{matches:ye,loaderData:cl,errors:G,fetchers:new Map(v.fetchers)})):(Ae({errors:G,loaderData:Cs(v.loaderData,cl,ye,G),fetchers:new Map(v.fetchers)}),Ke=!1)}async function sd(g,y,x,N,F,W,A){let I=v.fetchers.get(g);Ft(g,kr(A,I?I.data:void 0),{flushSync:W});let U=new AbortController,$=Er(e.history,x,U.signal);te.set(g,U);let ge=D,V=await Sr("loader",$,N,F,i,l,u,s.v7_relativeSplatPath);if(dn(V)&&(V=await Yf(V,$.signal,!0)||V),te.get(g)===U&&te.delete(g),!$.signal.aborted){if(Ee.has(g)){Ft(g,jt(void 0));return}if(pn(V))if(j>ge){Ft(g,jt(void 0));return}else{Y.add(g),await sr(v,V);return}if(Wn(V)){cr(g,y,V.error);return}H(!dn(V),"Unhandled fetcher deferred data"),Ft(g,jt(V.data))}}async function sr(g,y,x){let{submission:N,fetcherSubmission:F,replace:W}=x===void 0?{}:x;y.revalidate&&(Ke=!0);let A=tl(g.location,y.location,{_isRedirect:!0});if(H(A,"Expected a location on the redirect navigation"),n){let J=!1;if(y.reloadDocument)J=!0;else if(Wf.test(y.location)){const ke=e.history.createURL(y.location);J=ke.origin!==t.location.origin||_t(ke.pathname,u)==null}if(J){W?t.location.replace(y.location):t.location.assign(y.location);return}}M=null;let I=W===!0?ce.Replace:ce.Push,{formMethod:U,formAction:$,formEncType:ge}=g.navigation;!N&&!F&&U&&$&&ge&&(N=_s(g.navigation));let V=N||F;if(qh.has(y.status)&&V&&it(V.formMethod))await ln(I,A,{submission:se({},V,{formAction:y.location}),preventScrollReset:T});else{let J=ao(A,N);await ln(I,A,{overrideNavigation:J,fetcherSubmission:F,preventScrollReset:T})}}async function tu(g,y,x,N,F){let W=await Promise.all([...x.map(U=>Sr("loader",F,U,y,i,l,u,s.v7_relativeSplatPath)),...N.map(U=>U.matches&&U.match&&U.controller?Sr("loader",Er(e.history,U.path,U.controller.signal),U.match,U.matches,i,l,u,s.v7_relativeSplatPath):{type:ae.error,error:Xe(404,{pathname:U.path})})]),A=W.slice(0,x.length),I=W.slice(x.length);return await Promise.all([Ls(g,x,A,A.map(()=>F.signal),!1,v.loaderData),Ls(g,N.map(U=>U.match),I,N.map(U=>U.controller?U.controller.signal:null),!0)]),{results:W,loaderResults:A,fetcherResults:I}}function _i(){Ke=!0,Pn.push(...Ti()),q.forEach((g,y)=>{te.has(y)&&(zt.push(y),Ot(y))})}function Ft(g,y,x){x===void 0&&(x={}),v.fetchers.set(g,y),Ae({fetchers:new Map(v.fetchers)},{flushSync:(x&&x.flushSync)===!0})}function cr(g,y,x,N){N===void 0&&(N={});let F=Ir(v.matches,y);ul(g),Ae({errors:{[F.route.id]:x},fetchers:new Map(v.fetchers)},{flushSync:(N&&N.flushSync)===!0})}function nu(g){return s.v7_fetcherPersist&&(ct.set(g,(ct.get(g)||0)+1),Ee.has(g)&&Ee.delete(g)),v.fetchers.get(g)||bh}function ul(g){let y=v.fetchers.get(g);te.has(g)&&!(y&&y.state==="loading"&&B.has(g))&&Ot(g),q.delete(g),B.delete(g),Y.delete(g),Ee.delete(g),v.fetchers.delete(g)}function cd(g){if(s.v7_fetcherPersist){let y=(ct.get(g)||0)-1;y<=0?(ct.delete(g),Ee.add(g)):ct.set(g,y)}else ul(g);Ae({fetchers:new Map(v.fetchers)})}function Ot(g){let y=te.get(g);H(y,"Expected fetch controller: "+g),y.abort(),te.delete(g)}function ru(g){for(let y of g){let x=nu(y),N=jt(x.data);v.fetchers.set(y,N)}}function lu(){let g=[],y=!1;for(let x of Y){let N=v.fetchers.get(x);H(N,"Expected fetcher: "+x),N.state==="loading"&&(Y.delete(x),g.push(x),y=!0)}return ru(g),y}function iu(g){let y=[];for(let[x,N]of B)if(N<g){let F=v.fetchers.get(x);H(F,"Expected fetcher: "+x),F.state==="loading"&&(Ot(x),B.delete(x),y.push(x))}return ru(y),y.length>0}function fd(g,y){let x=v.blockers.get(g)||wr;return Ne.get(g)!==y&&Ne.set(g,y),x}function ou(g){v.blockers.delete(g),Ne.delete(g)}function sl(g,y){let x=v.blockers.get(g)||wr;H(x.state==="unblocked"&&y.state==="blocked"||x.state==="blocked"&&y.state==="blocked"||x.state==="blocked"&&y.state==="proceeding"||x.state==="blocked"&&y.state==="unblocked"||x.state==="proceeding"&&y.state==="unblocked","Invalid blocker state transition: "+x.state+" -> "+y.state);let N=new Map(v.blockers);N.set(g,y),Ae({blockers:N})}function au(g){let{currentLocation:y,nextLocation:x,historyAction:N}=g;if(Ne.size===0)return;Ne.size>1&&En(!1,"A router only supports one blocker at a time");let F=Array.from(Ne.entries()),[W,A]=F[F.length-1],I=v.blockers.get(W);if(!(I&&I.state==="proceeding")&&A({currentLocation:y,nextLocation:x,historyAction:N}))return W}function Ti(g){let y=[];return tt.forEach((x,N)=>{(!g||g(N))&&(x.cancel(),y.push(N),tt.delete(N))}),y}function dd(g,y,x){if(m=g,S=y,k=x||null,!w&&v.navigation===oo){w=!0;let N=su(v.location,v.matches);N!=null&&Ae({restoreScrollPosition:N})}return()=>{m=null,S=null,k=null}}function uu(g,y){return k&&k(g,y.map(N=>Th(N,v.loaderData)))||g.key}function pd(g,y){if(m&&S){let x=uu(g,y);m[x]=S()}}function su(g,y){if(m){let x=uu(g,y),N=m[x];if(typeof N=="number")return N}return null}function hd(g){i={},a=ta(g,l,void 0,i)}return _={get basename(){return u},get future(){return s},get state(){return v},get routes(){return o},get window(){return t},initialize:td,subscribe:rd,enableScrollRestoration:dd,navigate:eu,fetch:ad,revalidate:ld,createHref:g=>e.history.createHref(g),encodeLocation:g=>e.history.encodeLocation(g),getFetcher:nu,deleteFetcher:cd,dispose:nd,getBlocker:fd,deleteBlocker:ou,_internalFetchControllers:te,_internalActiveDeferreds:tt,_internalSetRoutes:hd},_}function nm(e){return e!=null&&("formData"in e&&e.formData!=null||"body"in e&&e.body!==void 0)}function ra(e,t,n,r,l,i,o,a){let u,s;if(o){u=[];for(let p of t)if(u.push(p),p.route.id===o){s=p;break}}else u=t,s=t[t.length-1];let f=Pi(l||".",Ci(u,i),_t(e.pathname,n)||e.pathname,a==="path");return l==null&&(f.search=e.search,f.hash=e.hash),(l==null||l===""||l===".")&&s&&s.route.index&&!qa(f.search)&&(f.search=f.search?f.search.replace(/^\?/,"?index&"):"?index"),r&&n!=="/"&&(f.pathname=f.pathname==="/"?n:xt([n,f.pathname])),kn(f)}function ys(e,t,n,r){if(!r||!nm(r))return{path:n};if(r.formMethod&&!sm(r.formMethod))return{path:n,error:Xe(405,{method:r.formMethod})};let l=()=>({path:n,error:Xe(400,{type:"invalid-body"})}),i=r.formMethod||"get",o=e?i.toUpperCase():i.toLowerCase(),a=Kf(n);if(r.body!==void 0){if(r.formEncType==="text/plain"){if(!it(o))return l();let m=typeof r.body=="string"?r.body:r.body instanceof FormData||r.body instanceof URLSearchParams?Array.from(r.body.entries()).reduce((k,S)=>{let[w,C]=S;return""+k+w+"="+C+`
`},""):String(r.body);return{path:n,submission:{formMethod:o,formAction:a,formEncType:r.formEncType,formData:void 0,json:void 0,text:m}}}else if(r.formEncType==="application/json"){if(!it(o))return l();try{let m=typeof r.body=="string"?JSON.parse(r.body):r.body;return{path:n,submission:{formMethod:o,formAction:a,formEncType:r.formEncType,formData:void 0,json:m,text:void 0}}}catch{return l()}}}H(typeof FormData=="function","FormData is not available in this environment");let u,s;if(r.formData)u=la(r.formData),s=r.formData;else if(r.body instanceof FormData)u=la(r.body),s=r.body;else if(r.body instanceof URLSearchParams)u=r.body,s=ks(u);else if(r.body==null)u=new URLSearchParams,s=new FormData;else try{u=new URLSearchParams(r.body),s=ks(u)}catch{return l()}let f={formMethod:o,formAction:a,formEncType:r&&r.formEncType||"application/x-www-form-urlencoded",formData:s,json:void 0,text:void 0};if(it(f.formMethod))return{path:n,submission:f};let p=Nt(n);return t&&p.search&&qa(p.search)&&u.append("index",""),p.search="?"+u,{path:kn(p),submission:f}}function rm(e,t){let n=e;if(t){let r=e.findIndex(l=>l.route.id===t);r>=0&&(n=e.slice(0,r))}return n}function ws(e,t,n,r,l,i,o,a,u,s,f,p,m,k,S,w){let C=w?Object.values(w)[0]:S?Object.values(S)[0]:void 0,d=e.createURL(t.location),c=e.createURL(l),h=w?Object.keys(w)[0]:void 0,_=rm(n,h).filter((P,T)=>{let{route:M}=P;if(M.lazy)return!0;if(M.loader==null)return!1;if(i)return M.loader.hydrate?!0:t.loaderData[M.id]===void 0&&(!t.errors||t.errors[M.id]===void 0);if(lm(t.loaderData,t.matches[T],P)||a.some(he=>he===P.route.id))return!0;let O=t.matches[T],Q=P;return Ss(P,se({currentUrl:d,currentParams:O.params,nextUrl:c,nextParams:Q.params},r,{actionResult:C,defaultShouldRevalidate:o||d.pathname+d.search===c.pathname+c.search||d.search!==c.search||Qf(O,Q)}))}),v=[];return f.forEach((P,T)=>{if(i||!n.some(de=>de.route.id===P.routeId)||s.has(T))return;let M=Hn(m,P.path,k);if(!M){v.push({key:T,routeId:P.routeId,path:P.path,matches:null,match:null,controller:null});return}let O=t.fetchers.get(T),Q=ia(M,P.path),he=!1;p.has(T)?he=!1:u.includes(T)?he=!0:O&&O.state!=="idle"&&O.data===void 0?he=o:he=Ss(Q,se({currentUrl:d,currentParams:t.matches[t.matches.length-1].params,nextUrl:c,nextParams:n[n.length-1].params},r,{actionResult:C,defaultShouldRevalidate:o})),he&&v.push({key:T,routeId:P.routeId,path:P.path,matches:M,match:Q,controller:new AbortController})}),[_,v]}function lm(e,t,n){let r=!t||n.route.id!==t.route.id,l=e[n.route.id]===void 0;return r||l}function Qf(e,t){let n=e.route.path;return e.pathname!==t.pathname||n!=null&&n.endsWith("*")&&e.params["*"]!==t.params["*"]}function Ss(e,t){if(e.route.shouldRevalidate){let n=e.route.shouldRevalidate(t);if(typeof n=="boolean")return n}return t.defaultShouldRevalidate}async function Es(e,t,n){if(!e.lazy)return;let r=await e.lazy();if(!e.lazy)return;let l=n[e.id];H(l,"No route found in manifest");let i={};for(let o in r){let u=l[o]!==void 0&&o!=="hasErrorBoundary";En(!u,'Route "'+l.id+'" has a static property "'+o+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+o+'" will be ignored.')),!u&&!Lh.has(o)&&(i[o]=r[o])}Object.assign(l,i),Object.assign(l,se({},t(l),{lazy:void 0}))}async function Sr(e,t,n,r,l,i,o,a,u){u===void 0&&(u={});let s,f,p,m=w=>{let C,d=new Promise((c,h)=>C=h);return p=()=>C(),t.signal.addEventListener("abort",p),Promise.race([w({request:t,params:n.params,context:u.requestContext}),d])};try{let w=n.route[e];if(n.route.lazy)if(w){let C,d=await Promise.all([m(w).catch(c=>{C=c}),Es(n.route,i,l)]);if(C)throw C;f=d[0]}else if(await Es(n.route,i,l),w=n.route[e],w)f=await m(w);else if(e==="action"){let C=new URL(t.url),d=C.pathname+C.search;throw Xe(405,{method:t.method,pathname:d,routeId:n.route.id})}else return{type:ae.data,data:void 0};else if(w)f=await m(w);else{let C=new URL(t.url),d=C.pathname+C.search;throw Xe(404,{pathname:d})}H(f!==void 0,"You defined "+(e==="action"?"an action":"a loader")+" for route "+('"'+n.route.id+"\" but didn't return anything from your `"+e+"` ")+"function. Please return a value or `null`.")}catch(w){s=ae.error,f=w}finally{p&&t.signal.removeEventListener("abort",p)}if(um(f)){let w=f.status;if(Zh.has(w)){let d=f.headers.get("Location");if(H(d,"Redirects returned/thrown from loaders/actions must have a Location header"),!Wf.test(d))d=ra(new URL(t.url),r.slice(0,r.indexOf(n)+1),o,!0,d,a);else if(!u.isStaticRequest){let c=new URL(t.url),h=d.startsWith("//")?new URL(c.protocol+d):new URL(d),E=_t(h.pathname,o)!=null;h.origin===c.origin&&E&&(d=h.pathname+h.search+h.hash)}if(u.isStaticRequest)throw f.headers.set("Location",d),f;return{type:ae.redirect,status:w,location:d,revalidate:f.headers.get("X-Remix-Revalidate")!==null,reloadDocument:f.headers.get("X-Remix-Reload-Document")!==null}}if(u.isRouteRequest)throw{type:s===ae.error?ae.error:ae.data,response:f};let C;try{let d=f.headers.get("Content-Type");d&&/\bapplication\/json\b/.test(d)?f.body==null?C=null:C=await f.json():C=await f.text()}catch(d){return{type:ae.error,error:d}}return s===ae.error?{type:s,error:new Za(w,f.statusText,C),headers:f.headers}:{type:ae.data,data:C,statusCode:f.status,headers:f.headers}}if(s===ae.error)return{type:s,error:f};if(am(f)){var k,S;return{type:ae.deferred,deferredData:f,statusCode:(k=f.init)==null?void 0:k.status,headers:((S=f.init)==null?void 0:S.headers)&&new Headers(f.init.headers)}}return{type:ae.data,data:f}}function Er(e,t,n,r){let l=e.createURL(Kf(t)).toString(),i={signal:n};if(r&&it(r.formMethod)){let{formMethod:o,formEncType:a}=r;i.method=o.toUpperCase(),a==="application/json"?(i.headers=new Headers({"Content-Type":a}),i.body=JSON.stringify(r.json)):a==="text/plain"?i.body=r.text:a==="application/x-www-form-urlencoded"&&r.formData?i.body=la(r.formData):i.body=r.formData}return new Request(l,i)}function la(e){let t=new URLSearchParams;for(let[n,r]of e.entries())t.append(n,typeof r=="string"?r:r.name);return t}function ks(e){let t=new FormData;for(let[n,r]of e.entries())t.append(n,r);return t}function im(e,t,n,r,l){let i={},o=null,a,u=!1,s={};return n.forEach((f,p)=>{let m=t[p].route.id;if(H(!pn(f),"Cannot handle redirect results in processLoaderData"),Wn(f)){let k=Ir(e,m),S=f.error;r&&(S=Object.values(r)[0],r=void 0),o=o||{},o[k.route.id]==null&&(o[k.route.id]=S),i[m]=void 0,u||(u=!0,a=Vf(f.error)?f.error.status:500),f.headers&&(s[m]=f.headers)}else dn(f)?(l.set(m,f.deferredData),i[m]=f.deferredData.data):i[m]=f.data,f.statusCode!=null&&f.statusCode!==200&&!u&&(a=f.statusCode),f.headers&&(s[m]=f.headers)}),r&&(o=r,i[Object.keys(r)[0]]=void 0),{loaderData:i,errors:o,statusCode:a||200,loaderHeaders:s}}function xs(e,t,n,r,l,i,o,a){let{loaderData:u,errors:s}=im(t,n,r,l,a);for(let f=0;f<i.length;f++){let{key:p,match:m,controller:k}=i[f];H(o!==void 0&&o[f]!==void 0,"Did not find corresponding fetcher result");let S=o[f];if(!(k&&k.signal.aborted))if(Wn(S)){let w=Ir(e.matches,m==null?void 0:m.route.id);s&&s[w.route.id]||(s=se({},s,{[w.route.id]:S.error})),e.fetchers.delete(p)}else if(pn(S))H(!1,"Unhandled fetcher revalidation redirect");else if(dn(S))H(!1,"Unhandled fetcher deferred data");else{let w=jt(S.data);e.fetchers.set(p,w)}}return{loaderData:u,errors:s}}function Cs(e,t,n,r){let l=se({},t);for(let i of n){let o=i.route.id;if(t.hasOwnProperty(o)?t[o]!==void 0&&(l[o]=t[o]):e[o]!==void 0&&i.route.loader&&(l[o]=e[o]),r&&r.hasOwnProperty(o))break}return l}function Ir(e,t){return(t?e.slice(0,e.findIndex(r=>r.route.id===t)+1):[...e]).reverse().find(r=>r.route.hasErrorBoundary===!0)||e[0]}function Ps(e){let t=e.length===1?e[0]:e.find(n=>n.index||!n.path||n.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:t}],route:t}}function Xe(e,t){let{pathname:n,routeId:r,method:l,type:i}=t===void 0?{}:t,o="Unknown Server Error",a="Unknown @remix-run/router error";return e===400?(o="Bad Request",l&&n&&r?a="You made a "+l+' request to "'+n+'" but '+('did not provide a `loader` for route "'+r+'", ')+"so there is no way to handle the request.":i==="defer-action"?a="defer() is not supported in actions":i==="invalid-body"&&(a="Unable to encode submission body")):e===403?(o="Forbidden",a='Route "'+r+'" does not match URL "'+n+'"'):e===404?(o="Not Found",a='No route matches URL "'+n+'"'):e===405&&(o="Method Not Allowed",l&&n&&r?a="You made a "+l.toUpperCase()+' request to "'+n+'" but '+('did not provide an `action` for route "'+r+'", ')+"so there is no way to handle the request.":l&&(a='Invalid request method "'+l.toUpperCase()+'"')),new Za(e||500,o,new Error(a),!0)}function Rs(e){for(let t=e.length-1;t>=0;t--){let n=e[t];if(pn(n))return{result:n,idx:t}}}function Kf(e){let t=typeof e=="string"?Nt(e):e;return kn(se({},t,{hash:""}))}function om(e,t){return e.pathname!==t.pathname||e.search!==t.search?!1:e.hash===""?t.hash!=="":e.hash===t.hash?!0:t.hash!==""}function dn(e){return e.type===ae.deferred}function Wn(e){return e.type===ae.error}function pn(e){return(e&&e.type)===ae.redirect}function am(e){let t=e;return t&&typeof t=="object"&&typeof t.data=="object"&&typeof t.subscribe=="function"&&typeof t.cancel=="function"&&typeof t.resolveData=="function"}function um(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.headers=="object"&&typeof e.body<"u"}function sm(e){return Jh.has(e.toLowerCase())}function it(e){return Xh.has(e.toLowerCase())}async function Ls(e,t,n,r,l,i){for(let o=0;o<n.length;o++){let a=n[o],u=t[o];if(!u)continue;let s=e.find(p=>p.route.id===u.route.id),f=s!=null&&!Qf(s,u)&&(i&&i[u.route.id])!==void 0;if(dn(a)&&(l||f)){let p=r[o];H(p,"Expected an AbortSignal for revalidating fetcher deferred result"),await Yf(a,p,l).then(m=>{m&&(n[o]=m||n[o])})}}}async function Yf(e,t,n){if(n===void 0&&(n=!1),!await e.deferredData.resolveData(t)){if(n)try{return{type:ae.data,data:e.deferredData.unwrappedData}}catch(l){return{type:ae.error,error:l}}return{type:ae.data,data:e.deferredData.data}}}function qa(e){return new URLSearchParams(e).getAll("index").some(t=>t==="")}function ia(e,t){let n=typeof t=="string"?Nt(t).search:t.search;if(e[e.length-1].route.index&&qa(n||""))return e[e.length-1];let r=Bf(e);return r[r.length-1]}function _s(e){let{formMethod:t,formAction:n,formEncType:r,text:l,formData:i,json:o}=e;if(!(!t||!n||!r)){if(l!=null)return{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:void 0,text:l};if(i!=null)return{formMethod:t,formAction:n,formEncType:r,formData:i,json:void 0,text:void 0};if(o!==void 0)return{formMethod:t,formAction:n,formEncType:r,formData:void 0,json:o,text:void 0}}}function ao(e,t){return t?{state:"loading",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function cm(e,t){return{state:"submitting",location:e,formMethod:t.formMethod,formAction:t.formAction,formEncType:t.formEncType,formData:t.formData,json:t.json,text:t.text}}function kr(e,t){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:t}}function fm(e,t){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:t?t.data:void 0}}function jt(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function dm(e,t){try{let n=e.sessionStorage.getItem($f);if(n){let r=JSON.parse(n);for(let[l,i]of Object.entries(r||{}))i&&Array.isArray(i)&&t.set(l,new Set(i||[]))}}catch{}}function pm(e,t){if(t.size>0){let n={};for(let[r,l]of t)n[r]=[...l];try{e.sessionStorage.setItem($f,JSON.stringify(n))}catch(r){En(!1,"Failed to save applied view transitions in sessionStorage ("+r+").")}}}/**
 * React Router v6.21.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function nl(){return nl=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},nl.apply(this,arguments)}const al=R.createContext(null),ba=R.createContext(null),Dt=R.createContext(null),Ri=R.createContext(null),gt=R.createContext({outlet:null,matches:[],isDataRoute:!1}),Xf=R.createContext(null);function hm(e,t){let{relative:n}=t===void 0?{}:t;or()||H(!1);let{basename:r,navigator:l}=R.useContext(Dt),{hash:i,pathname:o,search:a}=Li(e,{relative:n}),u=o;return r!=="/"&&(u=o==="/"?r:xt([r,o])),l.createHref({pathname:u,search:a,hash:i})}function or(){return R.useContext(Ri)!=null}function ar(){return or()||H(!1),R.useContext(Ri).location}function Gf(e){R.useContext(Dt).static||R.useLayoutEffect(e)}function Jf(){let{isDataRoute:e}=R.useContext(gt);return e?_m():mm()}function mm(){or()||H(!1);let e=R.useContext(al),{basename:t,future:n,navigator:r}=R.useContext(Dt),{matches:l}=R.useContext(gt),{pathname:i}=ar(),o=JSON.stringify(Ci(l,n.v7_relativeSplatPath)),a=R.useRef(!1);return Gf(()=>{a.current=!0}),R.useCallback(function(s,f){if(f===void 0&&(f={}),!a.current)return;if(typeof s=="number"){r.go(s);return}let p=Pi(s,JSON.parse(o),i,f.relative==="path");e==null&&t!=="/"&&(p.pathname=p.pathname==="/"?t:xt([t,p.pathname])),(f.replace?r.replace:r.push)(p,f.state,f)},[t,r,o,i,e])}const vm=R.createContext(null);function gm(e){let t=R.useContext(gt).outlet;return t&&R.createElement(vm.Provider,{value:e},t)}function Zm(){let{matches:e}=R.useContext(gt),t=e[e.length-1];return t?t.params:{}}function Li(e,t){let{relative:n}=t===void 0?{}:t,{future:r}=R.useContext(Dt),{matches:l}=R.useContext(gt),{pathname:i}=ar(),o=JSON.stringify(Ci(l,r.v7_relativeSplatPath));return R.useMemo(()=>Pi(e,JSON.parse(o),i,n==="path"),[e,o,i,n])}function ym(e,t,n,r){or()||H(!1);let{navigator:l}=R.useContext(Dt),{matches:i}=R.useContext(gt),o=i[i.length-1],a=o?o.params:{};o&&o.pathname;let u=o?o.pathnameBase:"/";o&&o.route;let s=ar(),f;if(t){var p;let C=typeof t=="string"?Nt(t):t;u==="/"||(p=C.pathname)!=null&&p.startsWith(u)||H(!1),f=C}else f=s;let m=f.pathname||"/",k=u==="/"?m:m.slice(u.length)||"/",S=Hn(e,{pathname:k}),w=xm(S&&S.map(C=>Object.assign({},C,{params:Object.assign({},a,C.params),pathname:xt([u,l.encodeLocation?l.encodeLocation(C.pathname).pathname:C.pathname]),pathnameBase:C.pathnameBase==="/"?u:xt([u,l.encodeLocation?l.encodeLocation(C.pathnameBase).pathname:C.pathnameBase])})),i,n,r);return t&&w?R.createElement(Ri.Provider,{value:{location:nl({pathname:"/",search:"",hash:"",state:null,key:"default"},f),navigationType:ce.Pop}},w):w}function wm(){let e=Lm(),t=Vf(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),n=e instanceof Error?e.stack:null,l={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},i=null;return R.createElement(R.Fragment,null,R.createElement("h2",null,"Unexpected Application Error!"),R.createElement("h3",{style:{fontStyle:"italic"}},t),n?R.createElement("pre",{style:l},n):null,i)}const Sm=R.createElement(wm,null);class Em extends R.Component{constructor(t){super(t),this.state={location:t.location,revalidation:t.revalidation,error:t.error}}static getDerivedStateFromError(t){return{error:t}}static getDerivedStateFromProps(t,n){return n.location!==t.location||n.revalidation!=="idle"&&t.revalidation==="idle"?{error:t.error,location:t.location,revalidation:t.revalidation}:{error:t.error!==void 0?t.error:n.error,location:n.location,revalidation:t.revalidation||n.revalidation}}componentDidCatch(t,n){console.error("React Router caught the following error during render",t,n)}render(){return this.state.error!==void 0?R.createElement(gt.Provider,{value:this.props.routeContext},R.createElement(Xf.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function km(e){let{routeContext:t,match:n,children:r}=e,l=R.useContext(al);return l&&l.static&&l.staticContext&&(n.route.errorElement||n.route.ErrorBoundary)&&(l.staticContext._deepestRenderedBoundaryId=n.route.id),R.createElement(gt.Provider,{value:t},r)}function xm(e,t,n,r){var l;if(t===void 0&&(t=[]),n===void 0&&(n=null),r===void 0&&(r=null),e==null){var i;if((i=n)!=null&&i.errors)e=n.matches;else return null}let o=e,a=(l=n)==null?void 0:l.errors;if(a!=null){let f=o.findIndex(p=>p.route.id&&(a==null?void 0:a[p.route.id]));f>=0||H(!1),o=o.slice(0,Math.min(o.length,f+1))}let u=!1,s=-1;if(n&&r&&r.v7_partialHydration)for(let f=0;f<o.length;f++){let p=o[f];if((p.route.HydrateFallback||p.route.hydrateFallbackElement)&&(s=f),p.route.id){let{loaderData:m,errors:k}=n,S=p.route.loader&&m[p.route.id]===void 0&&(!k||k[p.route.id]===void 0);if(p.route.lazy||S){u=!0,s>=0?o=o.slice(0,s+1):o=[o[0]];break}}}return o.reduceRight((f,p,m)=>{let k,S=!1,w=null,C=null;n&&(k=a&&p.route.id?a[p.route.id]:void 0,w=p.route.errorElement||Sm,u&&(s<0&&m===0?(Tm("route-fallback",!1),S=!0,C=null):s===m&&(S=!0,C=p.route.hydrateFallbackElement||null)));let d=t.concat(o.slice(0,m+1)),c=()=>{let h;return k?h=w:S?h=C:p.route.Component?h=R.createElement(p.route.Component,null):p.route.element?h=p.route.element:h=f,R.createElement(km,{match:p,routeContext:{outlet:f,matches:d,isDataRoute:n!=null},children:h})};return n&&(p.route.ErrorBoundary||p.route.errorElement||m===0)?R.createElement(Em,{location:n.location,revalidation:n.revalidation,component:w,error:k,children:c(),routeContext:{outlet:null,matches:d,isDataRoute:!0}}):c()},null)}var Zf=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(Zf||{}),ui=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(ui||{});function Cm(e){let t=R.useContext(al);return t||H(!1),t}function Pm(e){let t=R.useContext(ba);return t||H(!1),t}function Rm(e){let t=R.useContext(gt);return t||H(!1),t}function qf(e){let t=Rm(),n=t.matches[t.matches.length-1];return n.route.id||H(!1),n.route.id}function Lm(){var e;let t=R.useContext(Xf),n=Pm(ui.UseRouteError),r=qf(ui.UseRouteError);return t!==void 0?t:(e=n.errors)==null?void 0:e[r]}function _m(){let{router:e}=Cm(Zf.UseNavigateStable),t=qf(ui.UseNavigateStable),n=R.useRef(!1);return Gf(()=>{n.current=!0}),R.useCallback(function(l,i){i===void 0&&(i={}),n.current&&(typeof l=="number"?e.navigate(l):e.navigate(l,nl({fromRouteId:t},i)))},[e,t])}const Ts={};function Tm(e,t,n){!t&&!Ts[e]&&(Ts[e]=!0)}function qm(e){let{to:t,replace:n,state:r,relative:l}=e;or()||H(!1);let{future:i,static:o}=R.useContext(Dt),{matches:a}=R.useContext(gt),{pathname:u}=ar(),s=Jf(),f=Pi(t,Ci(a,i.v7_relativeSplatPath),u,l==="path"),p=JSON.stringify(f);return R.useEffect(()=>s(JSON.parse(p),{replace:n,state:r,relative:l}),[s,p,l,n,r]),null}function bm(e){return gm(e.context)}function Nm(e){let{basename:t="/",children:n=null,location:r,navigationType:l=ce.Pop,navigator:i,static:o=!1,future:a}=e;or()&&H(!1);let u=t.replace(/^\/*/,"/"),s=R.useMemo(()=>({basename:u,navigator:i,static:o,future:nl({v7_relativeSplatPath:!1},a)}),[u,a,i,o]);typeof r=="string"&&(r=Nt(r));let{pathname:f="/",search:p="",hash:m="",state:k=null,key:S="default"}=r,w=R.useMemo(()=>{let C=_t(f,u);return C==null?null:{location:{pathname:C,search:p,hash:m,state:k,key:S},navigationType:l}},[u,f,p,m,k,S,l]);return w==null?null:R.createElement(Dt.Provider,{value:s},R.createElement(Ri.Provider,{children:n,value:w}))}new Promise(()=>{});function Dm(e){let t={hasErrorBoundary:e.ErrorBoundary!=null||e.errorElement!=null};return e.Component&&Object.assign(t,{element:R.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(t,{hydrateFallbackElement:R.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(t,{errorElement:R.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),t}/**
 * React Router DOM v6.21.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function rr(){return rr=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},rr.apply(this,arguments)}function bf(e,t){if(e==null)return{};var n={},r=Object.keys(e),l,i;for(i=0;i<r.length;i++)l=r[i],!(t.indexOf(l)>=0)&&(n[l]=e[l]);return n}function zm(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function Mm(e,t){return e.button===0&&(!t||t==="_self")&&!zm(e)}const Fm=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],Om=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];function ev(e,t){return tm({basename:t==null?void 0:t.basename,future:rr({},t==null?void 0:t.future,{v7_prependBasename:!0}),history:Ch({window:t==null?void 0:t.window}),hydrationData:(t==null?void 0:t.hydrationData)||Um(),routes:e,mapRouteProperties:Dm,window:t==null?void 0:t.window}).initialize()}function Um(){var e;let t=(e=window)==null?void 0:e.__staticRouterHydrationData;return t&&t.errors&&(t=rr({},t,{errors:Im(t.errors)})),t}function Im(e){if(!e)return null;let t=Object.entries(e),n={};for(let[r,l]of t)if(l&&l.__type==="RouteErrorResponse")n[r]=new Za(l.status,l.statusText,l.data,l.internal===!0);else if(l&&l.__type==="Error"){if(l.__subType){let i=window[l.__subType];if(typeof i=="function")try{let o=new i(l.message);o.stack="",n[r]=o}catch{}}if(n[r]==null){let i=new Error(l.message);i.stack="",n[r]=i}}else n[r]=l;return n}const ed=R.createContext({isTransitioning:!1}),jm=R.createContext(new Map),Am="startTransition",Ns=gd[Am],Bm="flushSync",Ds=xh[Bm];function Vm(e){Ns?Ns(e):e()}function xr(e){Ds?Ds(e):e()}class Hm{constructor(){this.status="pending",this.promise=new Promise((t,n)=>{this.resolve=r=>{this.status==="pending"&&(this.status="resolved",t(r))},this.reject=r=>{this.status==="pending"&&(this.status="rejected",n(r))}})}}function tv(e){let{fallbackElement:t,router:n,future:r}=e,[l,i]=R.useState(n.state),[o,a]=R.useState(),[u,s]=R.useState({isTransitioning:!1}),[f,p]=R.useState(),[m,k]=R.useState(),[S,w]=R.useState(),C=R.useRef(new Map),{v7_startTransition:d}=r||{},c=R.useCallback(P=>{d?Vm(P):P()},[d]),h=R.useCallback((P,T)=>{let{deletedFetchers:M,unstable_flushSync:O,unstable_viewTransitionOpts:Q}=T;M.forEach(de=>C.current.delete(de)),P.fetchers.forEach((de,Ke)=>{de.data!==void 0&&C.current.set(Ke,de.data)});let he=n.window==null||typeof n.window.document.startViewTransition!="function";if(!Q||he){O?xr(()=>i(P)):c(()=>i(P));return}if(O){xr(()=>{m&&(f&&f.resolve(),m.skipTransition()),s({isTransitioning:!0,flushSync:!0,currentLocation:Q.currentLocation,nextLocation:Q.nextLocation})});let de=n.window.document.startViewTransition(()=>{xr(()=>i(P))});de.finished.finally(()=>{xr(()=>{p(void 0),k(void 0),a(void 0),s({isTransitioning:!1})})}),xr(()=>k(de));return}m?(f&&f.resolve(),m.skipTransition(),w({state:P,currentLocation:Q.currentLocation,nextLocation:Q.nextLocation})):(a(P),s({isTransitioning:!0,flushSync:!1,currentLocation:Q.currentLocation,nextLocation:Q.nextLocation}))},[n.window,m,f,C,c]);R.useLayoutEffect(()=>n.subscribe(h),[n,h]),R.useEffect(()=>{u.isTransitioning&&!u.flushSync&&p(new Hm)},[u]),R.useEffect(()=>{if(f&&o&&n.window){let P=o,T=f.promise,M=n.window.document.startViewTransition(async()=>{c(()=>i(P)),await T});M.finished.finally(()=>{p(void 0),k(void 0),a(void 0),s({isTransitioning:!1})}),k(M)}},[c,o,f,n.window]),R.useEffect(()=>{f&&o&&l.location.key===o.location.key&&f.resolve()},[f,m,l.location,o]),R.useEffect(()=>{!u.isTransitioning&&S&&(a(S.state),s({isTransitioning:!0,flushSync:!1,currentLocation:S.currentLocation,nextLocation:S.nextLocation}),w(void 0))},[u.isTransitioning,S]),R.useEffect(()=>{},[]);let E=R.useMemo(()=>({createHref:n.createHref,encodeLocation:n.encodeLocation,go:P=>n.navigate(P),push:(P,T,M)=>n.navigate(P,{state:T,preventScrollReset:M==null?void 0:M.preventScrollReset}),replace:(P,T,M)=>n.navigate(P,{replace:!0,state:T,preventScrollReset:M==null?void 0:M.preventScrollReset})}),[n]),_=n.basename||"/",v=R.useMemo(()=>({router:n,navigator:E,static:!1,basename:_}),[n,E,_]);return R.createElement(R.Fragment,null,R.createElement(al.Provider,{value:v},R.createElement(ba.Provider,{value:l},R.createElement(jm.Provider,{value:C.current},R.createElement(ed.Provider,{value:u},R.createElement(Nm,{basename:_,location:l.location,navigationType:l.historyAction,navigator:E,future:{v7_relativeSplatPath:n.future.v7_relativeSplatPath}},l.initialized||n.future.v7_partialHydration?R.createElement(Wm,{routes:n.routes,future:n.future,state:l}):t))))),null)}function Wm(e){let{routes:t,future:n,state:r}=e;return ym(t,void 0,r,n)}const $m=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",Qm=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Km=R.forwardRef(function(t,n){let{onClick:r,relative:l,reloadDocument:i,replace:o,state:a,target:u,to:s,preventScrollReset:f,unstable_viewTransition:p}=t,m=bf(t,Fm),{basename:k}=R.useContext(Dt),S,w=!1;if(typeof s=="string"&&Qm.test(s)&&(S=s,$m))try{let h=new URL(window.location.href),E=s.startsWith("//")?new URL(h.protocol+s):new URL(s),_=_t(E.pathname,k);E.origin===h.origin&&_!=null?s=_+E.search+E.hash:w=!0}catch{}let C=hm(s,{relative:l}),d=Xm(s,{replace:o,state:a,target:u,preventScrollReset:f,relative:l,unstable_viewTransition:p});function c(h){r&&r(h),h.defaultPrevented||d(h)}return R.createElement("a",rr({},m,{href:S||C,onClick:w||i?r:c,ref:n,target:u}))}),nv=R.forwardRef(function(t,n){let{"aria-current":r="page",caseSensitive:l=!1,className:i="",end:o=!1,style:a,to:u,unstable_viewTransition:s,children:f}=t,p=bf(t,Om),m=Li(u,{relative:p.relative}),k=ar(),S=R.useContext(ba),{navigator:w,basename:C}=R.useContext(Dt),d=S!=null&&Gm(m)&&s===!0,c=w.encodeLocation?w.encodeLocation(m).pathname:m.pathname,h=k.pathname,E=S&&S.navigation&&S.navigation.location?S.navigation.location.pathname:null;l||(h=h.toLowerCase(),E=E?E.toLowerCase():null,c=c.toLowerCase()),E&&C&&(E=_t(E,C)||E);const _=c!=="/"&&c.endsWith("/")?c.length-1:c.length;let v=h===c||!o&&h.startsWith(c)&&h.charAt(_)==="/",P=E!=null&&(E===c||!o&&E.startsWith(c)&&E.charAt(c.length)==="/"),T={isActive:v,isPending:P,isTransitioning:d},M=v?r:void 0,O;typeof i=="function"?O=i(T):O=[i,v?"active":null,P?"pending":null,d?"transitioning":null].filter(Boolean).join(" ");let Q=typeof a=="function"?a(T):a;return R.createElement(Km,rr({},p,{"aria-current":M,className:O,ref:n,style:Q,to:u,unstable_viewTransition:s}),typeof f=="function"?f(T):f)});var oa;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(oa||(oa={}));var zs;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(zs||(zs={}));function Ym(e){let t=R.useContext(al);return t||H(!1),t}function Xm(e,t){let{target:n,replace:r,state:l,preventScrollReset:i,relative:o,unstable_viewTransition:a}=t===void 0?{}:t,u=Jf(),s=ar(),f=Li(e,{relative:o});return R.useCallback(p=>{if(Mm(p,n)){p.preventDefault();let m=r!==void 0?r:kn(s)===kn(f);u(e,{replace:m,state:l,preventScrollReset:i,relative:o,unstable_viewTransition:a})}},[s,u,f,r,l,n,e,i,o,a])}function Gm(e,t){t===void 0&&(t={});let n=R.useContext(ed);n==null&&H(!1);let{basename:r}=Ym(oa.useViewTransitionState),l=Li(e,{relative:t.relative});if(!n.isTransitioning)return!1;let i=_t(n.currentLocation.pathname,r)||n.currentLocation.pathname,o=_t(n.nextLocation.pathname,r)||n.nextLocation.pathname;return na(l.pathname,o)!=null||na(l.pathname,i)!=null}export{Km as L,qm as N,bm as O,tv as R,ar as a,nv as b,ev as c,kh as d,If as r,Zm as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
