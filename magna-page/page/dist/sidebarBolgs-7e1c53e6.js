import{r as i,j as s}from"./jsx-runtime-6ef19e59.js";import{N as o,S as j,a as p}from"./logoOriginal-d8f6792d.js";import{L as t,N as d}from"./index-ab0b2909.js";import{u as v}from"./useLazyload-689b34b0.js";import{u as f,c as b}from"./ThemeProvider-ea0cd3b6.js";import{FloatWhatsapp as N}from"./floawhatsapp-7dbed07b.js";import y from"./footer1-be59e4d9.js";import{a as $}from"./index-f8d2074a.js";import{A as k}from"./index.esm-4586649c.js";import{u as w}from"./useQuery-5396bbc9.js";import{a as n}from"./apiClient-4214bebe.js";import{c as B}from"./main.js";const h=i.forwardRef(({bsPrefix:e,fluid:a=!1,as:r="div",className:c,...x},u)=>{const l=f(e,"container"),g=typeof a=="string"?`-${a}`:"-fluid";return s.jsx(r,{ref:u,...x,className:b(c,a?`${l}${g}`:l)})});h.displayName="Container";const m=h,Q=()=>B({mutationKey:["blog"],mutationFn:async({id:e})=>{const a=await n.get(`/blog/${e}/`);return console.log("useFetchBlog",a.data,"response.data",e),a.data}}),T=async e=>{try{const a=await n.get(`/blog/?page=${e}`);console.log(a.data);const r=a.data.next,c=a.data.results;return{nextPage:r,blogs:c}}catch(a){console.log(a);return}},L=async()=>{try{const e=await n.get("/blog/recent/");return console.log(e.data),e.data}catch(e){console.log(e);return}},V=async e=>{try{const a=await n.get(`/blog/search/${e}/`);return console.log(a.data),a.data}catch(a){console.log(a);return}};const F=()=>{const e="text-black";return s.jsx(s.Fragment,{children:s.jsx(m,{children:s.jsx(o,{className:"navbar",expand:"lg",children:s.jsxs(m,{children:[s.jsx(o.Brand,{as:t,to:"/",children:s.jsx(j,{width:"150",height:"30"})}),s.jsx(o.Toggle,{"aria-controls":"basic-navbar-nav"}),s.jsx(o.Collapse,{id:"basic-navbar-nav",children:s.jsxs(p,{className:"ms-auto",children:[s.jsx(t,{className:`links nav navbar  ${e} `,to:"/AboutUS",children:"Quiénes somos"}),s.jsx(d,{className:`links nav navbar  ${e} `,to:"/servicios#header",children:"Servicios"}),s.jsx(t,{className:`links nav navbar  ${e} `,to:"/contact",children:"Contacto"}),s.jsx(d,{className:`links nav navbar  ${e} `,to:"/projects",children:"Proyectos"}),s.jsx(t,{className:`links nav navbar  ${e} `,to:"/cotizador",children:"Login"}),s.jsx(t,{to:"/blog",className:"links nav navbar text-black",children:"blog "}),s.jsx("a",{className:`links nav navbar  ${e} `,href:"/store/",children:s.jsx("div",{className:"store",children:s.jsx("span",{children:"Magnatienda"})})})]})})]})})})})};function C(){const{isVisible:e,ref:a}=v("100px");return s.jsx("div",{id:"LazyNavbar2",ref:a,children:e?s.jsx(F,{}):null})}const W=({children:e})=>{const a=i.useRef(null),r=$();return i.useEffect(()=>{a.current&&a.current.scrollIntoView({behavior:"smooth"})},[r]),s.jsxs(s.Fragment,{children:[s.jsxs("header",{ref:a,children:[s.jsx(C,{}),s.jsx("div",{className:"spand",id:"header"})]}),e,s.jsx(y,{}),s.jsx(N,{})]})},U=()=>{const{data:e}=w({queryKey:["importantBlogs"],queryFn:L,staleTime:18e5,refetchOnWindowFocus:!1,refetchInterval:18e5});return e?s.jsxs("div",{className:"blog-sidebar ",children:[s.jsx("h3",{className:"ml-5",children:"Artículos más importantes "}),s.jsx("ul",{children:e.map(a=>s.jsx("li",{children:s.jsx("div",{className:"row",children:s.jsxs(t,{to:`/blog/${a.id}`,children:[s.jsx("div",{className:"col-3",children:s.jsx("img",{src:a.image,alt:a.title,style:{width:"120px",borderRadius:"10px"}})}),s.jsxs("div",{className:"col-8 fs-4",children:[a.title," ",s.jsx(k,{}),s.jsxs("p",{className:"text-white ",children:[" Autor :  ",a.author.last_name]})]}),s.jsx("hr",{})]})})},a.id))})]}):s.jsx("p",{children:"Cargando..."})};export{W as B,U as S,T as a,V as f,Q as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
