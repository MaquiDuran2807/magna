var dn=(e,i,s)=>{if(!i.has(e))throw TypeError("Cannot "+s)};var Rt=(e,i,s)=>(dn(e,i,"read from private field"),s?s.call(e):i.get(e)),Wt=(e,i,s)=>{if(i.has(e))throw TypeError("Cannot add the same private member more than once");i instanceof WeakSet?i.add(e):i.set(e,s)},Ht=(e,i,s,a)=>(dn(e,i,"write to private field"),a?a.call(e,s):i.set(e,s),s);var er=(e,i,s)=>(dn(e,i,"access private method"),s);function _mergeNamespaces(e,i){for(var s=0;s<i.length;s++){const a=i[s];if(typeof a!="string"&&!Array.isArray(a)){for(const o in a)if(o!=="default"&&!(o in e)){const c=Object.getOwnPropertyDescriptor(a,o);c&&Object.defineProperty(e,o,c.get?c:{enumerable:!0,get:()=>a[o]})}}}return Object.freeze(Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}))}const scriptRel="modulepreload",assetsURL=function(e){return"/static/"+e},seen={},__vitePreload=function(i,s,a){if(!s||s.length===0)return i();const o=document.getElementsByTagName("link");return Promise.all(s.map(c=>{if(c=assetsURL(c),c in seen)return;seen[c]=!0;const d=c.endsWith(".css"),g=d?'[rel="stylesheet"]':"";if(!!a)for(let j=o.length-1;j>=0;j--){const nt=o[j];if(nt.href===c&&(!d||nt.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${c}"]${g}`))return;const b=document.createElement("link");if(b.rel=d?"stylesheet":scriptRel,d||(b.as="script",b.crossOrigin=""),b.href=c,document.head.appendChild(b),d)return new Promise((j,nt)=>{b.addEventListener("load",j),b.addEventListener("error",()=>nt(new Error(`Unable to preload CSS for ${c}`)))})})).then(()=>i()).catch(c=>{const d=new Event("vite:preloadError",{cancelable:!0});if(d.payload=c,window.dispatchEvent(d),!d.defaultPrevented)throw c})};var commonjsGlobal=typeof globalThis<"u"?globalThis:typeof window<"u"?window:typeof global<"u"?global:typeof self<"u"?self:{};function getDefaultExportFromCjs(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function getAugmentedNamespace(e){if(e.__esModule)return e;var i=e.default;if(typeof i=="function"){var s=function a(){return this instanceof a?Reflect.construct(i,arguments,this.constructor):i.apply(this,arguments)};s.prototype=i.prototype}else s={};return Object.defineProperty(s,"__esModule",{value:!0}),Object.keys(e).forEach(function(a){var o=Object.getOwnPropertyDescriptor(e,a);Object.defineProperty(s,a,o.get?o:{enumerable:!0,get:function(){return e[a]}})}),s}var jsxRuntime={exports:{}},reactJsxRuntime_production_min={},react={exports:{}},react_production_min={};/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var l$1=Symbol.for("react.element"),n$1=Symbol.for("react.portal"),p$2=Symbol.for("react.fragment"),q$1=Symbol.for("react.strict_mode"),r=Symbol.for("react.profiler"),t=Symbol.for("react.provider"),u=Symbol.for("react.context"),v$2=Symbol.for("react.forward_ref"),w$1=Symbol.for("react.suspense"),x=Symbol.for("react.memo"),y=Symbol.for("react.lazy"),z$1=Symbol.iterator;function A$1(e){return e===null||typeof e!="object"?null:(e=z$1&&e[z$1]||e["@@iterator"],typeof e=="function"?e:null)}var B$1={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C$1=Object.assign,D$1={};function E$1(e,i,s){this.props=e,this.context=i,this.refs=D$1,this.updater=s||B$1}E$1.prototype.isReactComponent={};E$1.prototype.setState=function(e,i){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,i,"setState")};E$1.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function F(){}F.prototype=E$1.prototype;function G$1(e,i,s){this.props=e,this.context=i,this.refs=D$1,this.updater=s||B$1}var H$1=G$1.prototype=new F;H$1.constructor=G$1;C$1(H$1,E$1.prototype);H$1.isPureReactComponent=!0;var I$1=Array.isArray,J=Object.prototype.hasOwnProperty,K$1={current:null},L$1={key:!0,ref:!0,__self:!0,__source:!0};function M$1(e,i,s){var a,o={},c=null,d=null;if(i!=null)for(a in i.ref!==void 0&&(d=i.ref),i.key!==void 0&&(c=""+i.key),i)J.call(i,a)&&!L$1.hasOwnProperty(a)&&(o[a]=i[a]);var g=arguments.length-2;if(g===1)o.children=s;else if(1<g){for(var _=Array(g),b=0;b<g;b++)_[b]=arguments[b+2];o.children=_}if(e&&e.defaultProps)for(a in g=e.defaultProps,g)o[a]===void 0&&(o[a]=g[a]);return{$$typeof:l$1,type:e,key:c,ref:d,props:o,_owner:K$1.current}}function N$1(e,i){return{$$typeof:l$1,type:e.type,key:i,ref:e.ref,props:e.props,_owner:e._owner}}function O$1(e){return typeof e=="object"&&e!==null&&e.$$typeof===l$1}function escape(e){var i={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(s){return i[s]})}var P$1=/\/+/g;function Q$1(e,i){return typeof e=="object"&&e!==null&&e.key!=null?escape(""+e.key):i.toString(36)}function R$1(e,i,s,a,o){var c=typeof e;(c==="undefined"||c==="boolean")&&(e=null);var d=!1;if(e===null)d=!0;else switch(c){case"string":case"number":d=!0;break;case"object":switch(e.$$typeof){case l$1:case n$1:d=!0}}if(d)return d=e,o=o(d),e=a===""?"."+Q$1(d,0):a,I$1(o)?(s="",e!=null&&(s=e.replace(P$1,"$&/")+"/"),R$1(o,i,s,"",function(b){return b})):o!=null&&(O$1(o)&&(o=N$1(o,s+(!o.key||d&&d.key===o.key?"":(""+o.key).replace(P$1,"$&/")+"/")+e)),i.push(o)),1;if(d=0,a=a===""?".":a+":",I$1(e))for(var g=0;g<e.length;g++){c=e[g];var _=a+Q$1(c,g);d+=R$1(c,i,s,_,o)}else if(_=A$1(e),typeof _=="function")for(e=_.call(e),g=0;!(c=e.next()).done;)c=c.value,_=a+Q$1(c,g++),d+=R$1(c,i,s,_,o);else if(c==="object")throw i=String(e),Error("Objects are not valid as a React child (found: "+(i==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":i)+"). If you meant to render a collection of children, use an array instead.");return d}function S$1(e,i,s){if(e==null)return e;var a=[],o=0;return R$1(e,a,"","",function(c){return i.call(s,c,o++)}),a}function T$1(e){if(e._status===-1){var i=e._result;i=i(),i.then(function(s){(e._status===0||e._status===-1)&&(e._status=1,e._result=s)},function(s){(e._status===0||e._status===-1)&&(e._status=2,e._result=s)}),e._status===-1&&(e._status=0,e._result=i)}if(e._status===1)return e._result.default;throw e._result}var U$1={current:null},V$1={transition:null},W$1={ReactCurrentDispatcher:U$1,ReactCurrentBatchConfig:V$1,ReactCurrentOwner:K$1};react_production_min.Children={map:S$1,forEach:function(e,i,s){S$1(e,function(){i.apply(this,arguments)},s)},count:function(e){var i=0;return S$1(e,function(){i++}),i},toArray:function(e){return S$1(e,function(i){return i})||[]},only:function(e){if(!O$1(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};react_production_min.Component=E$1;react_production_min.Fragment=p$2;react_production_min.Profiler=r;react_production_min.PureComponent=G$1;react_production_min.StrictMode=q$1;react_production_min.Suspense=w$1;react_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W$1;react_production_min.cloneElement=function(e,i,s){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a=C$1({},e.props),o=e.key,c=e.ref,d=e._owner;if(i!=null){if(i.ref!==void 0&&(c=i.ref,d=K$1.current),i.key!==void 0&&(o=""+i.key),e.type&&e.type.defaultProps)var g=e.type.defaultProps;for(_ in i)J.call(i,_)&&!L$1.hasOwnProperty(_)&&(a[_]=i[_]===void 0&&g!==void 0?g[_]:i[_])}var _=arguments.length-2;if(_===1)a.children=s;else if(1<_){g=Array(_);for(var b=0;b<_;b++)g[b]=arguments[b+2];a.children=g}return{$$typeof:l$1,type:e.type,key:o,ref:c,props:a,_owner:d}};react_production_min.createContext=function(e){return e={$$typeof:u,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:t,_context:e},e.Consumer=e};react_production_min.createElement=M$1;react_production_min.createFactory=function(e){var i=M$1.bind(null,e);return i.type=e,i};react_production_min.createRef=function(){return{current:null}};react_production_min.forwardRef=function(e){return{$$typeof:v$2,render:e}};react_production_min.isValidElement=O$1;react_production_min.lazy=function(e){return{$$typeof:y,_payload:{_status:-1,_result:e},_init:T$1}};react_production_min.memo=function(e,i){return{$$typeof:x,type:e,compare:i===void 0?null:i}};react_production_min.startTransition=function(e){var i=V$1.transition;V$1.transition={};try{e()}finally{V$1.transition=i}};react_production_min.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")};react_production_min.useCallback=function(e,i){return U$1.current.useCallback(e,i)};react_production_min.useContext=function(e){return U$1.current.useContext(e)};react_production_min.useDebugValue=function(){};react_production_min.useDeferredValue=function(e){return U$1.current.useDeferredValue(e)};react_production_min.useEffect=function(e,i){return U$1.current.useEffect(e,i)};react_production_min.useId=function(){return U$1.current.useId()};react_production_min.useImperativeHandle=function(e,i,s){return U$1.current.useImperativeHandle(e,i,s)};react_production_min.useInsertionEffect=function(e,i){return U$1.current.useInsertionEffect(e,i)};react_production_min.useLayoutEffect=function(e,i){return U$1.current.useLayoutEffect(e,i)};react_production_min.useMemo=function(e,i){return U$1.current.useMemo(e,i)};react_production_min.useReducer=function(e,i,s){return U$1.current.useReducer(e,i,s)};react_production_min.useRef=function(e){return U$1.current.useRef(e)};react_production_min.useState=function(e){return U$1.current.useState(e)};react_production_min.useSyncExternalStore=function(e,i,s){return U$1.current.useSyncExternalStore(e,i,s)};react_production_min.useTransition=function(){return U$1.current.useTransition()};react_production_min.version="18.2.0";react.exports=react_production_min;var reactExports=react.exports;const React=getDefaultExportFromCjs(reactExports),React$1=_mergeNamespaces({__proto__:null,default:React},[reactExports]);/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var f=reactExports,k=Symbol.for("react.element"),l=Symbol.for("react.fragment"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p$1={key:!0,ref:!0,__self:!0,__source:!0};function q(e,i,s){var a,o={},c=null,d=null;s!==void 0&&(c=""+s),i.key!==void 0&&(c=""+i.key),i.ref!==void 0&&(d=i.ref);for(a in i)m.call(i,a)&&!p$1.hasOwnProperty(a)&&(o[a]=i[a]);if(e&&e.defaultProps)for(a in i=e.defaultProps,i)o[a]===void 0&&(o[a]=i[a]);return{$$typeof:k,type:e,key:c,ref:d,props:o,_owner:n.current}}reactJsxRuntime_production_min.Fragment=l;reactJsxRuntime_production_min.jsx=q;reactJsxRuntime_production_min.jsxs=q;jsxRuntime.exports=reactJsxRuntime_production_min;var jsxRuntimeExports=jsxRuntime.exports,reactDom={exports:{}},reactDom_production_min={},scheduler={exports:{}},scheduler_production_min={};/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(e){function i(ot,ht){var yt=ot.length;ot.push(ht);e:for(;0<yt;){var vt=yt-1>>>1,xt=ot[vt];if(0<o(xt,ht))ot[vt]=ht,ot[yt]=xt,yt=vt;else break e}}function s(ot){return ot.length===0?null:ot[0]}function a(ot){if(ot.length===0)return null;var ht=ot[0],yt=ot.pop();if(yt!==ht){ot[0]=yt;e:for(var vt=0,xt=ot.length,Tt=xt>>>1;vt<Tt;){var At=2*(vt+1)-1,Ot=ot[At],Vt=At+1,Kt=ot[Vt];if(0>o(Ot,yt))Vt<xt&&0>o(Kt,Ot)?(ot[vt]=Kt,ot[Vt]=yt,vt=Vt):(ot[vt]=Ot,ot[At]=yt,vt=At);else if(Vt<xt&&0>o(Kt,yt))ot[vt]=Kt,ot[Vt]=yt,vt=Vt;else break e}}return ht}function o(ot,ht){var yt=ot.sortIndex-ht.sortIndex;return yt!==0?yt:ot.id-ht.id}if(typeof performance=="object"&&typeof performance.now=="function"){var c=performance;e.unstable_now=function(){return c.now()}}else{var d=Date,g=d.now();e.unstable_now=function(){return d.now()-g}}var _=[],b=[],j=1,nt=null,tt=3,at=!1,it=!1,rt=!1,ut=typeof setTimeout=="function"?setTimeout:null,$=typeof clearTimeout=="function"?clearTimeout:null,et=typeof setImmediate<"u"?setImmediate:null;typeof navigator<"u"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function _e(ot){for(var ht=s(b);ht!==null;){if(ht.callback===null)a(b);else if(ht.startTime<=ot)a(b),ht.sortIndex=ht.expirationTime,i(_,ht);else break;ht=s(b)}}function st(ot){if(rt=!1,_e(ot),!it)if(s(_)!==null)it=!0,pt(ft);else{var ht=s(b);ht!==null&&mt(st,ht.startTime-ot)}}function ft(ot,ht){it=!1,rt&&(rt=!1,$(dt),dt=-1),at=!0;var yt=tt;try{for(_e(ht),nt=s(_);nt!==null&&(!(nt.expirationTime>ht)||ot&&!_t());){var vt=nt.callback;if(typeof vt=="function"){nt.callback=null,tt=nt.priorityLevel;var xt=vt(nt.expirationTime<=ht);ht=e.unstable_now(),typeof xt=="function"?nt.callback=xt:nt===s(_)&&a(_),_e(ht)}else a(_);nt=s(_)}if(nt!==null)var Tt=!0;else{var At=s(b);At!==null&&mt(st,At.startTime-ht),Tt=!1}return Tt}finally{nt=null,tt=yt,at=!1}}var lt=!1,ct=null,dt=-1,gt=5,Ct=-1;function _t(){return!(e.unstable_now()-Ct<gt)}function Pt(){if(ct!==null){var ot=e.unstable_now();Ct=ot;var ht=!0;try{ht=ct(!0,ot)}finally{ht?bt():(lt=!1,ct=null)}}else lt=!1}var bt;if(typeof et=="function")bt=function(){et(Pt)};else if(typeof MessageChannel<"u"){var Mt=new MessageChannel,wt=Mt.port2;Mt.port1.onmessage=Pt,bt=function(){wt.postMessage(null)}}else bt=function(){ut(Pt,0)};function pt(ot){ct=ot,lt||(lt=!0,bt())}function mt(ot,ht){dt=ut(function(){ot(e.unstable_now())},ht)}e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(ot){ot.callback=null},e.unstable_continueExecution=function(){it||at||(it=!0,pt(ft))},e.unstable_forceFrameRate=function(ot){0>ot||125<ot?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):gt=0<ot?Math.floor(1e3/ot):5},e.unstable_getCurrentPriorityLevel=function(){return tt},e.unstable_getFirstCallbackNode=function(){return s(_)},e.unstable_next=function(ot){switch(tt){case 1:case 2:case 3:var ht=3;break;default:ht=tt}var yt=tt;tt=ht;try{return ot()}finally{tt=yt}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=function(){},e.unstable_runWithPriority=function(ot,ht){switch(ot){case 1:case 2:case 3:case 4:case 5:break;default:ot=3}var yt=tt;tt=ot;try{return ht()}finally{tt=yt}},e.unstable_scheduleCallback=function(ot,ht,yt){var vt=e.unstable_now();switch(typeof yt=="object"&&yt!==null?(yt=yt.delay,yt=typeof yt=="number"&&0<yt?vt+yt:vt):yt=vt,ot){case 1:var xt=-1;break;case 2:xt=250;break;case 5:xt=1073741823;break;case 4:xt=1e4;break;default:xt=5e3}return xt=yt+xt,ot={id:j++,callback:ht,priorityLevel:ot,startTime:yt,expirationTime:xt,sortIndex:-1},yt>vt?(ot.sortIndex=yt,i(b,ot),s(_)===null&&ot===s(b)&&(rt?($(dt),dt=-1):rt=!0,mt(st,yt-vt))):(ot.sortIndex=xt,i(_,ot),it||at||(it=!0,pt(ft))),ot},e.unstable_shouldYield=_t,e.unstable_wrapCallback=function(ot){var ht=tt;return function(){var yt=tt;tt=ht;try{return ot.apply(this,arguments)}finally{tt=yt}}}})(scheduler_production_min);scheduler.exports=scheduler_production_min;var schedulerExports=scheduler.exports;/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var aa=reactExports,ca=schedulerExports;function p(e){for(var i="https://reactjs.org/docs/error-decoder.html?invariant="+e,s=1;s<arguments.length;s++)i+="&args[]="+encodeURIComponent(arguments[s]);return"Minified React error #"+e+"; visit "+i+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var da=new Set,ea={};function fa(e,i){ha(e,i),ha(e+"Capture",i)}function ha(e,i){for(ea[e]=i,e=0;e<i.length;e++)da.add(i[e])}var ia=!(typeof window>"u"||typeof window.document>"u"||typeof window.document.createElement>"u"),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,la={},ma={};function oa(e){return ja.call(ma,e)?!0:ja.call(la,e)?!1:ka.test(e)?ma[e]=!0:(la[e]=!0,!1)}function pa(e,i,s,a){if(s!==null&&s.type===0)return!1;switch(typeof i){case"function":case"symbol":return!0;case"boolean":return a?!1:s!==null?!s.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!=="data-"&&e!=="aria-");default:return!1}}function qa(e,i,s,a){if(i===null||typeof i>"u"||pa(e,i,s,a))return!0;if(a)return!1;if(s!==null)switch(s.type){case 3:return!i;case 4:return i===!1;case 5:return isNaN(i);case 6:return isNaN(i)||1>i}return!1}function v$1(e,i,s,a,o,c,d){this.acceptsBooleans=i===2||i===3||i===4,this.attributeName=a,this.attributeNamespace=o,this.mustUseProperty=s,this.propertyName=e,this.type=i,this.sanitizeURL=c,this.removeEmptyString=d}var z={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){z[e]=new v$1(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var i=e[0];z[i]=new v$1(i,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){z[e]=new v$1(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){z[e]=new v$1(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){z[e]=new v$1(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){z[e]=new v$1(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){z[e]=new v$1(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){z[e]=new v$1(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){z[e]=new v$1(e,5,!1,e.toLowerCase(),null,!1,!1)});var ra=/[\-:]([a-z])/g;function sa(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var i=e.replace(ra,sa);z[i]=new v$1(i,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var i=e.replace(ra,sa);z[i]=new v$1(i,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var i=e.replace(ra,sa);z[i]=new v$1(i,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){z[e]=new v$1(e,1,!1,e.toLowerCase(),null,!1,!1)});z.xlinkHref=new v$1("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){z[e]=new v$1(e,1,!1,e.toLowerCase(),null,!0,!0)});function ta(e,i,s,a){var o=z.hasOwnProperty(i)?z[i]:null;(o!==null?o.type!==0:a||!(2<i.length)||i[0]!=="o"&&i[0]!=="O"||i[1]!=="n"&&i[1]!=="N")&&(qa(i,s,o,a)&&(s=null),a||o===null?oa(i)&&(s===null?e.removeAttribute(i):e.setAttribute(i,""+s)):o.mustUseProperty?e[o.propertyName]=s===null?o.type===3?!1:"":s:(i=o.attributeName,a=o.attributeNamespace,s===null?e.removeAttribute(i):(o=o.type,s=o===3||o===4&&s===!0?"":""+s,a?e.setAttributeNS(a,i,s):e.setAttribute(i,s))))}var ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for("react.element"),wa=Symbol.for("react.portal"),ya=Symbol.for("react.fragment"),za=Symbol.for("react.strict_mode"),Aa=Symbol.for("react.profiler"),Ba=Symbol.for("react.provider"),Ca=Symbol.for("react.context"),Da=Symbol.for("react.forward_ref"),Ea=Symbol.for("react.suspense"),Fa=Symbol.for("react.suspense_list"),Ga=Symbol.for("react.memo"),Ha=Symbol.for("react.lazy"),Ia=Symbol.for("react.offscreen"),Ja=Symbol.iterator;function Ka(e){return e===null||typeof e!="object"?null:(e=Ja&&e[Ja]||e["@@iterator"],typeof e=="function"?e:null)}var A=Object.assign,La;function Ma(e){if(La===void 0)try{throw Error()}catch(s){var i=s.stack.trim().match(/\n( *(at )?)/);La=i&&i[1]||""}return`
`+La+e}var Na=!1;function Oa(e,i){if(!e||Na)return"";Na=!0;var s=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(i)if(i=function(){throw Error()},Object.defineProperty(i.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(i,[])}catch(b){var a=b}Reflect.construct(e,[],i)}else{try{i.call()}catch(b){a=b}e.call(i.prototype)}else{try{throw Error()}catch(b){a=b}e()}}catch(b){if(b&&a&&typeof b.stack=="string"){for(var o=b.stack.split(`
`),c=a.stack.split(`
`),d=o.length-1,g=c.length-1;1<=d&&0<=g&&o[d]!==c[g];)g--;for(;1<=d&&0<=g;d--,g--)if(o[d]!==c[g]){if(d!==1||g!==1)do if(d--,g--,0>g||o[d]!==c[g]){var _=`
`+o[d].replace(" at new "," at ");return e.displayName&&_.includes("<anonymous>")&&(_=_.replace("<anonymous>",e.displayName)),_}while(1<=d&&0<=g);break}}}finally{Na=!1,Error.prepareStackTrace=s}return(e=e?e.displayName||e.name:"")?Ma(e):""}function Pa(e){switch(e.tag){case 5:return Ma(e.type);case 16:return Ma("Lazy");case 13:return Ma("Suspense");case 19:return Ma("SuspenseList");case 0:case 2:case 15:return e=Oa(e.type,!1),e;case 11:return e=Oa(e.type.render,!1),e;case 1:return e=Oa(e.type,!0),e;default:return""}}function Qa(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case ya:return"Fragment";case wa:return"Portal";case Aa:return"Profiler";case za:return"StrictMode";case Ea:return"Suspense";case Fa:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Ca:return(e.displayName||"Context")+".Consumer";case Ba:return(e._context.displayName||"Context")+".Provider";case Da:var i=e.render;return e=e.displayName,e||(e=i.displayName||i.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case Ga:return i=e.displayName||null,i!==null?i:Qa(e.type)||"Memo";case Ha:i=e._payload,e=e._init;try{return Qa(e(i))}catch{}}return null}function Ra(e){var i=e.type;switch(e.tag){case 24:return"Cache";case 9:return(i.displayName||"Context")+".Consumer";case 10:return(i._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=i.render,e=e.displayName||e.name||"",i.displayName||(e!==""?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return i;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return Qa(i);case 8:return i===za?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof i=="function")return i.displayName||i.name||null;if(typeof i=="string")return i}return null}function Sa(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":return e;case"object":return e;default:return""}}function Ta(e){var i=e.type;return(e=e.nodeName)&&e.toLowerCase()==="input"&&(i==="checkbox"||i==="radio")}function Ua(e){var i=Ta(e)?"checked":"value",s=Object.getOwnPropertyDescriptor(e.constructor.prototype,i),a=""+e[i];if(!e.hasOwnProperty(i)&&typeof s<"u"&&typeof s.get=="function"&&typeof s.set=="function"){var o=s.get,c=s.set;return Object.defineProperty(e,i,{configurable:!0,get:function(){return o.call(this)},set:function(d){a=""+d,c.call(this,d)}}),Object.defineProperty(e,i,{enumerable:s.enumerable}),{getValue:function(){return a},setValue:function(d){a=""+d},stopTracking:function(){e._valueTracker=null,delete e[i]}}}}function Va(e){e._valueTracker||(e._valueTracker=Ua(e))}function Wa(e){if(!e)return!1;var i=e._valueTracker;if(!i)return!0;var s=i.getValue(),a="";return e&&(a=Ta(e)?e.checked?"true":"false":e.value),e=a,e!==s?(i.setValue(e),!0):!1}function Xa(e){if(e=e||(typeof document<"u"?document:void 0),typeof e>"u")return null;try{return e.activeElement||e.body}catch{return e.body}}function Ya(e,i){var s=i.checked;return A({},i,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:s??e._wrapperState.initialChecked})}function Za(e,i){var s=i.defaultValue==null?"":i.defaultValue,a=i.checked!=null?i.checked:i.defaultChecked;s=Sa(i.value!=null?i.value:s),e._wrapperState={initialChecked:a,initialValue:s,controlled:i.type==="checkbox"||i.type==="radio"?i.checked!=null:i.value!=null}}function ab(e,i){i=i.checked,i!=null&&ta(e,"checked",i,!1)}function bb(e,i){ab(e,i);var s=Sa(i.value),a=i.type;if(s!=null)a==="number"?(s===0&&e.value===""||e.value!=s)&&(e.value=""+s):e.value!==""+s&&(e.value=""+s);else if(a==="submit"||a==="reset"){e.removeAttribute("value");return}i.hasOwnProperty("value")?cb(e,i.type,s):i.hasOwnProperty("defaultValue")&&cb(e,i.type,Sa(i.defaultValue)),i.checked==null&&i.defaultChecked!=null&&(e.defaultChecked=!!i.defaultChecked)}function db(e,i,s){if(i.hasOwnProperty("value")||i.hasOwnProperty("defaultValue")){var a=i.type;if(!(a!=="submit"&&a!=="reset"||i.value!==void 0&&i.value!==null))return;i=""+e._wrapperState.initialValue,s||i===e.value||(e.value=i),e.defaultValue=i}s=e.name,s!==""&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,s!==""&&(e.name=s)}function cb(e,i,s){(i!=="number"||Xa(e.ownerDocument)!==e)&&(s==null?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+s&&(e.defaultValue=""+s))}var eb=Array.isArray;function fb(e,i,s,a){if(e=e.options,i){i={};for(var o=0;o<s.length;o++)i["$"+s[o]]=!0;for(s=0;s<e.length;s++)o=i.hasOwnProperty("$"+e[s].value),e[s].selected!==o&&(e[s].selected=o),o&&a&&(e[s].defaultSelected=!0)}else{for(s=""+Sa(s),i=null,o=0;o<e.length;o++){if(e[o].value===s){e[o].selected=!0,a&&(e[o].defaultSelected=!0);return}i!==null||e[o].disabled||(i=e[o])}i!==null&&(i.selected=!0)}}function gb(e,i){if(i.dangerouslySetInnerHTML!=null)throw Error(p(91));return A({},i,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function hb(e,i){var s=i.value;if(s==null){if(s=i.children,i=i.defaultValue,s!=null){if(i!=null)throw Error(p(92));if(eb(s)){if(1<s.length)throw Error(p(93));s=s[0]}i=s}i==null&&(i=""),s=i}e._wrapperState={initialValue:Sa(s)}}function ib(e,i){var s=Sa(i.value),a=Sa(i.defaultValue);s!=null&&(s=""+s,s!==e.value&&(e.value=s),i.defaultValue==null&&e.defaultValue!==s&&(e.defaultValue=s)),a!=null&&(e.defaultValue=""+a)}function jb(e){var i=e.textContent;i===e._wrapperState.initialValue&&i!==""&&i!==null&&(e.value=i)}function kb(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function lb(e,i){return e==null||e==="http://www.w3.org/1999/xhtml"?kb(i):e==="http://www.w3.org/2000/svg"&&i==="foreignObject"?"http://www.w3.org/1999/xhtml":e}var mb,nb=function(e){return typeof MSApp<"u"&&MSApp.execUnsafeLocalFunction?function(i,s,a,o){MSApp.execUnsafeLocalFunction(function(){return e(i,s,a,o)})}:e}(function(e,i){if(e.namespaceURI!=="http://www.w3.org/2000/svg"||"innerHTML"in e)e.innerHTML=i;else{for(mb=mb||document.createElement("div"),mb.innerHTML="<svg>"+i.valueOf().toString()+"</svg>",i=mb.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;i.firstChild;)e.appendChild(i.firstChild)}});function ob(e,i){if(i){var s=e.firstChild;if(s&&s===e.lastChild&&s.nodeType===3){s.nodeValue=i;return}}e.textContent=i}var pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=["Webkit","ms","Moz","O"];Object.keys(pb).forEach(function(e){qb.forEach(function(i){i=i+e.charAt(0).toUpperCase()+e.substring(1),pb[i]=pb[e]})});function rb(e,i,s){return i==null||typeof i=="boolean"||i===""?"":s||typeof i!="number"||i===0||pb.hasOwnProperty(e)&&pb[e]?(""+i).trim():i+"px"}function sb(e,i){e=e.style;for(var s in i)if(i.hasOwnProperty(s)){var a=s.indexOf("--")===0,o=rb(s,i[s],a);s==="float"&&(s="cssFloat"),a?e.setProperty(s,o):e[s]=o}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ub(e,i){if(i){if(tb[e]&&(i.children!=null||i.dangerouslySetInnerHTML!=null))throw Error(p(137,e));if(i.dangerouslySetInnerHTML!=null){if(i.children!=null)throw Error(p(60));if(typeof i.dangerouslySetInnerHTML!="object"||!("__html"in i.dangerouslySetInnerHTML))throw Error(p(61))}if(i.style!=null&&typeof i.style!="object")throw Error(p(62))}}function vb(e,i){if(e.indexOf("-")===-1)return typeof i.is=="string";switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var wb=null;function xb(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var yb=null,zb=null,Ab=null;function Bb(e){if(e=Cb(e)){if(typeof yb!="function")throw Error(p(280));var i=e.stateNode;i&&(i=Db(i),yb(e.stateNode,e.type,i))}}function Eb(e){zb?Ab?Ab.push(e):Ab=[e]:zb=e}function Fb(){if(zb){var e=zb,i=Ab;if(Ab=zb=null,Bb(e),i)for(e=0;e<i.length;e++)Bb(i[e])}}function Gb(e,i){return e(i)}function Hb(){}var Ib=!1;function Jb(e,i,s){if(Ib)return e(i,s);Ib=!0;try{return Gb(e,i,s)}finally{Ib=!1,(zb!==null||Ab!==null)&&(Hb(),Fb())}}function Kb(e,i){var s=e.stateNode;if(s===null)return null;var a=Db(s);if(a===null)return null;s=a[i];e:switch(i){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(a=!a.disabled)||(e=e.type,a=!(e==="button"||e==="input"||e==="select"||e==="textarea")),e=!a;break e;default:e=!1}if(e)return null;if(s&&typeof s!="function")throw Error(p(231,i,typeof s));return s}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,"passive",{get:function(){Lb=!0}}),window.addEventListener("test",Mb,Mb),window.removeEventListener("test",Mb,Mb)}catch{Lb=!1}function Nb(e,i,s,a,o,c,d,g,_){var b=Array.prototype.slice.call(arguments,3);try{i.apply(s,b)}catch(j){this.onError(j)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(e){Ob=!0,Pb=e}};function Tb(e,i,s,a,o,c,d,g,_){Ob=!1,Pb=null,Nb.apply(Sb,arguments)}function Ub(e,i,s,a,o,c,d,g,_){if(Tb.apply(this,arguments),Ob){if(Ob){var b=Pb;Ob=!1,Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=b)}}function Vb(e){var i=e,s=e;if(e.alternate)for(;i.return;)i=i.return;else{e=i;do i=e,i.flags&4098&&(s=i.return),e=i.return;while(e)}return i.tag===3?s:null}function Wb(e){if(e.tag===13){var i=e.memoizedState;if(i===null&&(e=e.alternate,e!==null&&(i=e.memoizedState)),i!==null)return i.dehydrated}return null}function Xb(e){if(Vb(e)!==e)throw Error(p(188))}function Yb(e){var i=e.alternate;if(!i){if(i=Vb(e),i===null)throw Error(p(188));return i!==e?null:e}for(var s=e,a=i;;){var o=s.return;if(o===null)break;var c=o.alternate;if(c===null){if(a=o.return,a!==null){s=a;continue}break}if(o.child===c.child){for(c=o.child;c;){if(c===s)return Xb(o),e;if(c===a)return Xb(o),i;c=c.sibling}throw Error(p(188))}if(s.return!==a.return)s=o,a=c;else{for(var d=!1,g=o.child;g;){if(g===s){d=!0,s=o,a=c;break}if(g===a){d=!0,a=o,s=c;break}g=g.sibling}if(!d){for(g=c.child;g;){if(g===s){d=!0,s=c,a=o;break}if(g===a){d=!0,a=c,s=o;break}g=g.sibling}if(!d)throw Error(p(189))}}if(s.alternate!==a)throw Error(p(190))}if(s.tag!==3)throw Error(p(188));return s.stateNode.current===s?e:i}function Zb(e){return e=Yb(e),e!==null?$b(e):null}function $b(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var i=$b(e);if(i!==null)return i;e=e.sibling}return null}var ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(e){if(lc&&typeof lc.onCommitFiberRoot=="function")try{lc.onCommitFiberRoot(kc,e,void 0,(e.current.flags&128)===128)}catch{}}var oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(e){return e>>>=0,e===0?32:31-(pc(e)/qc|0)|0}var rc=64,sc=4194304;function tc(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function uc(e,i){var s=e.pendingLanes;if(s===0)return 0;var a=0,o=e.suspendedLanes,c=e.pingedLanes,d=s&268435455;if(d!==0){var g=d&~o;g!==0?a=tc(g):(c&=d,c!==0&&(a=tc(c)))}else d=s&~o,d!==0?a=tc(d):c!==0&&(a=tc(c));if(a===0)return 0;if(i!==0&&i!==a&&!(i&o)&&(o=a&-a,c=i&-i,o>=c||o===16&&(c&4194240)!==0))return i;if(a&4&&(a|=s&16),i=e.entangledLanes,i!==0)for(e=e.entanglements,i&=a;0<i;)s=31-oc(i),o=1<<s,a|=e[s],i&=~o;return a}function vc(e,i){switch(e){case 1:case 2:case 4:return i+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return i+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function wc(e,i){for(var s=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,c=e.pendingLanes;0<c;){var d=31-oc(c),g=1<<d,_=o[d];_===-1?(!(g&s)||g&a)&&(o[d]=vc(g,i)):_<=i&&(e.expiredLanes|=g),c&=~g}}function xc(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function yc(){var e=rc;return rc<<=1,!(rc&4194240)&&(rc=64),e}function zc(e){for(var i=[],s=0;31>s;s++)i.push(e);return i}function Ac(e,i,s){e.pendingLanes|=i,i!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,i=31-oc(i),e[i]=s}function Bc(e,i){var s=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;var a=e.eventTimes;for(e=e.expirationTimes;0<s;){var o=31-oc(s),c=1<<o;i[o]=0,a[o]=-1,e[o]=-1,s&=~c}}function Cc(e,i){var s=e.entangledLanes|=i;for(e=e.entanglements;s;){var a=31-oc(s),o=1<<a;o&i|e[a]&i&&(e[a]|=i),s&=~o}}var C=0;function Dc(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Sc(e,i){switch(e){case"focusin":case"focusout":Lc=null;break;case"dragenter":case"dragleave":Mc=null;break;case"mouseover":case"mouseout":Nc=null;break;case"pointerover":case"pointerout":Oc.delete(i.pointerId);break;case"gotpointercapture":case"lostpointercapture":Pc.delete(i.pointerId)}}function Tc(e,i,s,a,o,c){return e===null||e.nativeEvent!==c?(e={blockedOn:i,domEventName:s,eventSystemFlags:a,nativeEvent:c,targetContainers:[o]},i!==null&&(i=Cb(i),i!==null&&Fc(i)),e):(e.eventSystemFlags|=a,i=e.targetContainers,o!==null&&i.indexOf(o)===-1&&i.push(o),e)}function Uc(e,i,s,a,o){switch(i){case"focusin":return Lc=Tc(Lc,e,i,s,a,o),!0;case"dragenter":return Mc=Tc(Mc,e,i,s,a,o),!0;case"mouseover":return Nc=Tc(Nc,e,i,s,a,o),!0;case"pointerover":var c=o.pointerId;return Oc.set(c,Tc(Oc.get(c)||null,e,i,s,a,o)),!0;case"gotpointercapture":return c=o.pointerId,Pc.set(c,Tc(Pc.get(c)||null,e,i,s,a,o)),!0}return!1}function Vc(e){var i=Wc(e.target);if(i!==null){var s=Vb(i);if(s!==null){if(i=s.tag,i===13){if(i=Wb(s),i!==null){e.blockedOn=i,Ic(e.priority,function(){Gc(s)});return}}else if(i===3&&s.stateNode.current.memoizedState.isDehydrated){e.blockedOn=s.tag===3?s.stateNode.containerInfo:null;return}}}e.blockedOn=null}function Xc(e){if(e.blockedOn!==null)return!1;for(var i=e.targetContainers;0<i.length;){var s=Yc(e.domEventName,e.eventSystemFlags,i[0],e.nativeEvent);if(s===null){s=e.nativeEvent;var a=new s.constructor(s.type,s);wb=a,s.target.dispatchEvent(a),wb=null}else return i=Cb(s),i!==null&&Fc(i),e.blockedOn=s,!1;i.shift()}return!0}function Zc(e,i,s){Xc(e)&&s.delete(i)}function $c(){Jc=!1,Lc!==null&&Xc(Lc)&&(Lc=null),Mc!==null&&Xc(Mc)&&(Mc=null),Nc!==null&&Xc(Nc)&&(Nc=null),Oc.forEach(Zc),Pc.forEach(Zc)}function ad(e,i){e.blockedOn===i&&(e.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}function bd(e){function i(o){return ad(o,e)}if(0<Kc.length){ad(Kc[0],e);for(var s=1;s<Kc.length;s++){var a=Kc[s];a.blockedOn===e&&(a.blockedOn=null)}}for(Lc!==null&&ad(Lc,e),Mc!==null&&ad(Mc,e),Nc!==null&&ad(Nc,e),Oc.forEach(i),Pc.forEach(i),s=0;s<Qc.length;s++)a=Qc[s],a.blockedOn===e&&(a.blockedOn=null);for(;0<Qc.length&&(s=Qc[0],s.blockedOn===null);)Vc(s),s.blockedOn===null&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;function ed(e,i,s,a){var o=C,c=cd.transition;cd.transition=null;try{C=1,fd(e,i,s,a)}finally{C=o,cd.transition=c}}function gd(e,i,s,a){var o=C,c=cd.transition;cd.transition=null;try{C=4,fd(e,i,s,a)}finally{C=o,cd.transition=c}}function fd(e,i,s,a){if(dd){var o=Yc(e,i,s,a);if(o===null)hd(e,i,a,id,s),Sc(e,a);else if(Uc(o,e,i,s,a))a.stopPropagation();else if(Sc(e,a),i&4&&-1<Rc.indexOf(e)){for(;o!==null;){var c=Cb(o);if(c!==null&&Ec(c),c=Yc(e,i,s,a),c===null&&hd(e,i,a,id,s),c===o)break;o=c}o!==null&&a.stopPropagation()}else hd(e,i,a,null,s)}}var id=null;function Yc(e,i,s,a){if(id=null,e=xb(a),e=Wc(e),e!==null)if(i=Vb(e),i===null)e=null;else if(s=i.tag,s===13){if(e=Wb(i),e!==null)return e;e=null}else if(s===3){if(i.stateNode.current.memoizedState.isDehydrated)return i.tag===3?i.stateNode.containerInfo:null;e=null}else i!==e&&(e=null);return id=e,null}function jd(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var e,i=ld,s=i.length,a,o="value"in kd?kd.value:kd.textContent,c=o.length;for(e=0;e<s&&i[e]===o[e];e++);var d=s-e;for(a=1;a<=d&&i[s-a]===o[c-a];a++);return md=o.slice(e,1<a?1-a:void 0)}function od(e){var i=e.keyCode;return"charCode"in e?(e=e.charCode,e===0&&i===13&&(e=13)):e=i,e===10&&(e=13),32<=e||e===13?e:0}function pd(){return!0}function qd(){return!1}function rd(e){function i(s,a,o,c,d){this._reactName=s,this._targetInst=o,this.type=a,this.nativeEvent=c,this.target=d,this.currentTarget=null;for(var g in e)e.hasOwnProperty(g)&&(s=e[g],this[g]=s?s(c):c[g]);return this.isDefaultPrevented=(c.defaultPrevented!=null?c.defaultPrevented:c.returnValue===!1)?pd:qd,this.isPropagationStopped=qd,this}return A(i.prototype,{preventDefault:function(){this.defaultPrevented=!0;var s=this.nativeEvent;s&&(s.preventDefault?s.preventDefault():typeof s.returnValue!="unknown"&&(s.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var s=this.nativeEvent;s&&(s.stopPropagation?s.stopPropagation():typeof s.cancelBubble!="unknown"&&(s.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd}),i}var sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==yd&&(yd&&e.type==="mousemove"?(wd=e.screenX-yd.screenX,xd=e.screenY-yd.screenY):xd=wd=0,yd=e),wd)},movementY:function(e){return"movementY"in e?e.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Nd={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Od={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pd(e){var i=this.nativeEvent;return i.getModifierState?i.getModifierState(e):(e=Od[e])?!!i[e]:!1}function zd(){return Pd}var Qd=A({},ud,{key:function(e){if(e.key){var i=Md[e.key]||e.key;if(i!=="Unidentified")return i}return e.type==="keypress"?(e=od(e),e===13?"Enter":String.fromCharCode(e)):e.type==="keydown"||e.type==="keyup"?Nd[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(e){return e.type==="keypress"?od(e):0},keyCode:function(e){return e.type==="keydown"||e.type==="keyup"?e.keyCode:0},which:function(e){return e.type==="keypress"?od(e):e.type==="keydown"||e.type==="keyup"?e.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&"CompositionEvent"in window,be=null;ia&&"documentMode"in document&&(be=document.documentMode);var ce=ia&&"TextEvent"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;function ge(e,i){switch(e){case"keyup":return $d.indexOf(i.keyCode)!==-1;case"keydown":return i.keyCode!==229;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function he(e){return e=e.detail,typeof e=="object"&&"data"in e?e.data:null}var ie=!1;function je(e,i){switch(e){case"compositionend":return he(i);case"keypress":return i.which!==32?null:(fe=!0,ee);case"textInput":return e=i.data,e===ee&&fe?null:e;default:return null}}function ke(e,i){if(ie)return e==="compositionend"||!ae&&ge(e,i)?(e=nd(),md=ld=kd=null,ie=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(i.ctrlKey||i.altKey||i.metaKey)||i.ctrlKey&&i.altKey){if(i.char&&1<i.char.length)return i.char;if(i.which)return String.fromCharCode(i.which)}return null;case"compositionend":return de&&i.locale!=="ko"?null:i.data;default:return null}}var le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(e){var i=e&&e.nodeName&&e.nodeName.toLowerCase();return i==="input"?!!le[e.type]:i==="textarea"}function ne(e,i,s,a){Eb(a),i=oe(i,"onChange"),0<i.length&&(s=new td("onChange","change",null,s,a),e.push({event:s,listeners:i}))}var pe=null,qe=null;function re(e){se(e,0)}function te(e){var i=ue(e);if(Wa(i))return e}function ve(e,i){if(e==="change")return i}var we=!1;if(ia){var xe;if(ia){var ye="oninput"in document;if(!ye){var ze=document.createElement("div");ze.setAttribute("oninput","return;"),ye=typeof ze.oninput=="function"}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent("onpropertychange",Be),qe=pe=null)}function Be(e){if(e.propertyName==="value"&&te(qe)){var i=[];ne(i,qe,e,xb(e)),Jb(re,i)}}function Ce(e,i,s){e==="focusin"?(Ae(),pe=i,qe=s,pe.attachEvent("onpropertychange",Be)):e==="focusout"&&Ae()}function De(e){if(e==="selectionchange"||e==="keyup"||e==="keydown")return te(qe)}function Ee(e,i){if(e==="click")return te(i)}function Fe(e,i){if(e==="input"||e==="change")return te(i)}function Ge(e,i){return e===i&&(e!==0||1/e===1/i)||e!==e&&i!==i}var He=typeof Object.is=="function"?Object.is:Ge;function Ie(e,i){if(He(e,i))return!0;if(typeof e!="object"||e===null||typeof i!="object"||i===null)return!1;var s=Object.keys(e),a=Object.keys(i);if(s.length!==a.length)return!1;for(a=0;a<s.length;a++){var o=s[a];if(!ja.call(i,o)||!He(e[o],i[o]))return!1}return!0}function Je(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Ke(e,i){var s=Je(e);e=0;for(var a;s;){if(s.nodeType===3){if(a=e+s.textContent.length,e<=i&&a>=i)return{node:s,offset:i-e};e=a}e:{for(;s;){if(s.nextSibling){s=s.nextSibling;break e}s=s.parentNode}s=void 0}s=Je(s)}}function Le(e,i){return e&&i?e===i?!0:e&&e.nodeType===3?!1:i&&i.nodeType===3?Le(e,i.parentNode):"contains"in e?e.contains(i):e.compareDocumentPosition?!!(e.compareDocumentPosition(i)&16):!1:!1}function Me(){for(var e=window,i=Xa();i instanceof e.HTMLIFrameElement;){try{var s=typeof i.contentWindow.location.href=="string"}catch{s=!1}if(s)e=i.contentWindow;else break;i=Xa(e.document)}return i}function Ne(e){var i=e&&e.nodeName&&e.nodeName.toLowerCase();return i&&(i==="input"&&(e.type==="text"||e.type==="search"||e.type==="tel"||e.type==="url"||e.type==="password")||i==="textarea"||e.contentEditable==="true")}function Oe(e){var i=Me(),s=e.focusedElem,a=e.selectionRange;if(i!==s&&s&&s.ownerDocument&&Le(s.ownerDocument.documentElement,s)){if(a!==null&&Ne(s)){if(i=a.start,e=a.end,e===void 0&&(e=i),"selectionStart"in s)s.selectionStart=i,s.selectionEnd=Math.min(e,s.value.length);else if(e=(i=s.ownerDocument||document)&&i.defaultView||window,e.getSelection){e=e.getSelection();var o=s.textContent.length,c=Math.min(a.start,o);a=a.end===void 0?c:Math.min(a.end,o),!e.extend&&c>a&&(o=a,a=c,c=o),o=Ke(s,c);var d=Ke(s,a);o&&d&&(e.rangeCount!==1||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==d.node||e.focusOffset!==d.offset)&&(i=i.createRange(),i.setStart(o.node,o.offset),e.removeAllRanges(),c>a?(e.addRange(i),e.extend(d.node,d.offset)):(i.setEnd(d.node,d.offset),e.addRange(i)))}}for(i=[],e=s;e=e.parentNode;)e.nodeType===1&&i.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof s.focus=="function"&&s.focus(),s=0;s<i.length;s++)e=i[s],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Pe=ia&&"documentMode"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;function Ue(e,i,s){var a=s.window===s?s.document:s.nodeType===9?s:s.ownerDocument;Te||Qe==null||Qe!==Xa(a)||(a=Qe,"selectionStart"in a&&Ne(a)?a={start:a.selectionStart,end:a.selectionEnd}:(a=(a.ownerDocument&&a.ownerDocument.defaultView||window).getSelection(),a={anchorNode:a.anchorNode,anchorOffset:a.anchorOffset,focusNode:a.focusNode,focusOffset:a.focusOffset}),Se&&Ie(Se,a)||(Se=a,a=oe(Re,"onSelect"),0<a.length&&(i=new td("onSelect","select",null,i,s),e.push({event:i,listeners:a}),i.target=Qe)))}function Ve(e,i){var s={};return s[e.toLowerCase()]=i.toLowerCase(),s["Webkit"+e]="webkit"+i,s["Moz"+e]="moz"+i,s}var We={animationend:Ve("Animation","AnimationEnd"),animationiteration:Ve("Animation","AnimationIteration"),animationstart:Ve("Animation","AnimationStart"),transitionend:Ve("Transition","TransitionEnd")},Xe={},Ye={};ia&&(Ye=document.createElement("div").style,"AnimationEvent"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),"TransitionEvent"in window||delete We.transitionend.transition);function Ze(e){if(Xe[e])return Xe[e];if(!We[e])return e;var i=We[e],s;for(s in i)if(i.hasOwnProperty(s)&&s in Ye)return Xe[e]=i[s];return e}var $e=Ze("animationend"),af=Ze("animationiteration"),bf=Ze("animationstart"),cf=Ze("transitionend"),df=new Map,ef="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function ff(e,i){df.set(e,i),fa(i,[e])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,"on"+kf)}ff($e,"onAnimationEnd");ff(af,"onAnimationIteration");ff(bf,"onAnimationStart");ff("dblclick","onDoubleClick");ff("focusin","onFocus");ff("focusout","onBlur");ff(cf,"onTransitionEnd");ha("onMouseEnter",["mouseout","mouseover"]);ha("onMouseLeave",["mouseout","mouseover"]);ha("onPointerEnter",["pointerout","pointerover"]);ha("onPointerLeave",["pointerout","pointerover"]);fa("onChange","change click focusin focusout input keydown keyup selectionchange".split(" "));fa("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));fa("onBeforeInput",["compositionend","keypress","textInput","paste"]);fa("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" "));fa("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var lf="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),mf=new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));function nf(e,i,s){var a=e.type||"unknown-event";e.currentTarget=s,Ub(a,i,void 0,e),e.currentTarget=null}function se(e,i){i=(i&4)!==0;for(var s=0;s<e.length;s++){var a=e[s],o=a.event;a=a.listeners;e:{var c=void 0;if(i)for(var d=a.length-1;0<=d;d--){var g=a[d],_=g.instance,b=g.currentTarget;if(g=g.listener,_!==c&&o.isPropagationStopped())break e;nf(o,g,b),c=_}else for(d=0;d<a.length;d++){if(g=a[d],_=g.instance,b=g.currentTarget,g=g.listener,_!==c&&o.isPropagationStopped())break e;nf(o,g,b),c=_}}}if(Qb)throw e=Rb,Qb=!1,Rb=null,e}function D(e,i){var s=i[of];s===void 0&&(s=i[of]=new Set);var a=e+"__bubble";s.has(a)||(pf(i,e,2,!1),s.add(a))}function qf(e,i,s){var a=0;i&&(a|=4),pf(s,e,a,i)}var rf="_reactListening"+Math.random().toString(36).slice(2);function sf(e){if(!e[rf]){e[rf]=!0,da.forEach(function(s){s!=="selectionchange"&&(mf.has(s)||qf(s,!1,e),qf(s,!0,e))});var i=e.nodeType===9?e:e.ownerDocument;i===null||i[rf]||(i[rf]=!0,qf("selectionchange",!1,i))}}function pf(e,i,s,a){switch(jd(i)){case 1:var o=ed;break;case 4:o=gd;break;default:o=fd}s=o.bind(null,i,s,e),o=void 0,!Lb||i!=="touchstart"&&i!=="touchmove"&&i!=="wheel"||(o=!0),a?o!==void 0?e.addEventListener(i,s,{capture:!0,passive:o}):e.addEventListener(i,s,!0):o!==void 0?e.addEventListener(i,s,{passive:o}):e.addEventListener(i,s,!1)}function hd(e,i,s,a,o){var c=a;if(!(i&1)&&!(i&2)&&a!==null)e:for(;;){if(a===null)return;var d=a.tag;if(d===3||d===4){var g=a.stateNode.containerInfo;if(g===o||g.nodeType===8&&g.parentNode===o)break;if(d===4)for(d=a.return;d!==null;){var _=d.tag;if((_===3||_===4)&&(_=d.stateNode.containerInfo,_===o||_.nodeType===8&&_.parentNode===o))return;d=d.return}for(;g!==null;){if(d=Wc(g),d===null)return;if(_=d.tag,_===5||_===6){a=c=d;continue e}g=g.parentNode}}a=a.return}Jb(function(){var b=c,j=xb(s),nt=[];e:{var tt=df.get(e);if(tt!==void 0){var at=td,it=e;switch(e){case"keypress":if(od(s)===0)break e;case"keydown":case"keyup":at=Rd;break;case"focusin":it="focus",at=Fd;break;case"focusout":it="blur",at=Fd;break;case"beforeblur":case"afterblur":at=Fd;break;case"click":if(s.button===2)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":at=Bd;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":at=Dd;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":at=Vd;break;case $e:case af:case bf:at=Hd;break;case cf:at=Xd;break;case"scroll":at=vd;break;case"wheel":at=Zd;break;case"copy":case"cut":case"paste":at=Jd;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":at=Td}var rt=(i&4)!==0,ut=!rt&&e==="scroll",$=rt?tt!==null?tt+"Capture":null:tt;rt=[];for(var et=b,_e;et!==null;){_e=et;var st=_e.stateNode;if(_e.tag===5&&st!==null&&(_e=st,$!==null&&(st=Kb(et,$),st!=null&&rt.push(tf(et,st,_e)))),ut)break;et=et.return}0<rt.length&&(tt=new at(tt,it,null,s,j),nt.push({event:tt,listeners:rt}))}}if(!(i&7)){e:{if(tt=e==="mouseover"||e==="pointerover",at=e==="mouseout"||e==="pointerout",tt&&s!==wb&&(it=s.relatedTarget||s.fromElement)&&(Wc(it)||it[uf]))break e;if((at||tt)&&(tt=j.window===j?j:(tt=j.ownerDocument)?tt.defaultView||tt.parentWindow:window,at?(it=s.relatedTarget||s.toElement,at=b,it=it?Wc(it):null,it!==null&&(ut=Vb(it),it!==ut||it.tag!==5&&it.tag!==6)&&(it=null)):(at=null,it=b),at!==it)){if(rt=Bd,st="onMouseLeave",$="onMouseEnter",et="mouse",(e==="pointerout"||e==="pointerover")&&(rt=Td,st="onPointerLeave",$="onPointerEnter",et="pointer"),ut=at==null?tt:ue(at),_e=it==null?tt:ue(it),tt=new rt(st,et+"leave",at,s,j),tt.target=ut,tt.relatedTarget=_e,st=null,Wc(j)===b&&(rt=new rt($,et+"enter",it,s,j),rt.target=_e,rt.relatedTarget=ut,st=rt),ut=st,at&&it)t:{for(rt=at,$=it,et=0,_e=rt;_e;_e=vf(_e))et++;for(_e=0,st=$;st;st=vf(st))_e++;for(;0<et-_e;)rt=vf(rt),et--;for(;0<_e-et;)$=vf($),_e--;for(;et--;){if(rt===$||$!==null&&rt===$.alternate)break t;rt=vf(rt),$=vf($)}rt=null}else rt=null;at!==null&&wf(nt,tt,at,rt,!1),it!==null&&ut!==null&&wf(nt,ut,it,rt,!0)}}e:{if(tt=b?ue(b):window,at=tt.nodeName&&tt.nodeName.toLowerCase(),at==="select"||at==="input"&&tt.type==="file")var ft=ve;else if(me(tt))if(we)ft=Fe;else{ft=De;var lt=Ce}else(at=tt.nodeName)&&at.toLowerCase()==="input"&&(tt.type==="checkbox"||tt.type==="radio")&&(ft=Ee);if(ft&&(ft=ft(e,b))){ne(nt,ft,s,j);break e}lt&&lt(e,tt,b),e==="focusout"&&(lt=tt._wrapperState)&&lt.controlled&&tt.type==="number"&&cb(tt,"number",tt.value)}switch(lt=b?ue(b):window,e){case"focusin":(me(lt)||lt.contentEditable==="true")&&(Qe=lt,Re=b,Se=null);break;case"focusout":Se=Re=Qe=null;break;case"mousedown":Te=!0;break;case"contextmenu":case"mouseup":case"dragend":Te=!1,Ue(nt,s,j);break;case"selectionchange":if(Pe)break;case"keydown":case"keyup":Ue(nt,s,j)}var ct;if(ae)e:{switch(e){case"compositionstart":var dt="onCompositionStart";break e;case"compositionend":dt="onCompositionEnd";break e;case"compositionupdate":dt="onCompositionUpdate";break e}dt=void 0}else ie?ge(e,s)&&(dt="onCompositionEnd"):e==="keydown"&&s.keyCode===229&&(dt="onCompositionStart");dt&&(de&&s.locale!=="ko"&&(ie||dt!=="onCompositionStart"?dt==="onCompositionEnd"&&ie&&(ct=nd()):(kd=j,ld="value"in kd?kd.value:kd.textContent,ie=!0)),lt=oe(b,dt),0<lt.length&&(dt=new Ld(dt,e,null,s,j),nt.push({event:dt,listeners:lt}),ct?dt.data=ct:(ct=he(s),ct!==null&&(dt.data=ct)))),(ct=ce?je(e,s):ke(e,s))&&(b=oe(b,"onBeforeInput"),0<b.length&&(j=new Ld("onBeforeInput","beforeinput",null,s,j),nt.push({event:j,listeners:b}),j.data=ct))}se(nt,i)})}function tf(e,i,s){return{instance:e,listener:i,currentTarget:s}}function oe(e,i){for(var s=i+"Capture",a=[];e!==null;){var o=e,c=o.stateNode;o.tag===5&&c!==null&&(o=c,c=Kb(e,s),c!=null&&a.unshift(tf(e,c,o)),c=Kb(e,i),c!=null&&a.push(tf(e,c,o))),e=e.return}return a}function vf(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function wf(e,i,s,a,o){for(var c=i._reactName,d=[];s!==null&&s!==a;){var g=s,_=g.alternate,b=g.stateNode;if(_!==null&&_===a)break;g.tag===5&&b!==null&&(g=b,o?(_=Kb(s,c),_!=null&&d.unshift(tf(s,_,g))):o||(_=Kb(s,c),_!=null&&d.push(tf(s,_,g)))),s=s.return}d.length!==0&&e.push({event:i,listeners:d})}var xf=/\r\n?/g,yf=/\u0000|\uFFFD/g;function zf(e){return(typeof e=="string"?e:""+e).replace(xf,`
`).replace(yf,"")}function Af(e,i,s){if(i=zf(i),zf(e)!==i&&s)throw Error(p(425))}function Bf(){}var Cf=null,Df=null;function Ef(e,i){return e==="textarea"||e==="noscript"||typeof i.children=="string"||typeof i.children=="number"||typeof i.dangerouslySetInnerHTML=="object"&&i.dangerouslySetInnerHTML!==null&&i.dangerouslySetInnerHTML.__html!=null}var Ff=typeof setTimeout=="function"?setTimeout:void 0,Gf=typeof clearTimeout=="function"?clearTimeout:void 0,Hf=typeof Promise=="function"?Promise:void 0,Jf=typeof queueMicrotask=="function"?queueMicrotask:typeof Hf<"u"?function(e){return Hf.resolve(null).then(e).catch(If)}:Ff;function If(e){setTimeout(function(){throw e})}function Kf(e,i){var s=i,a=0;do{var o=s.nextSibling;if(e.removeChild(s),o&&o.nodeType===8)if(s=o.data,s==="/$"){if(a===0){e.removeChild(o),bd(i);return}a--}else s!=="$"&&s!=="$?"&&s!=="$!"||a++;s=o}while(s);bd(i)}function Lf(e){for(;e!=null;e=e.nextSibling){var i=e.nodeType;if(i===1||i===3)break;if(i===8){if(i=e.data,i==="$"||i==="$!"||i==="$?")break;if(i==="/$")return null}}return e}function Mf(e){e=e.previousSibling;for(var i=0;e;){if(e.nodeType===8){var s=e.data;if(s==="$"||s==="$!"||s==="$?"){if(i===0)return e;i--}else s==="/$"&&i++}e=e.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of="__reactFiber$"+Nf,Pf="__reactProps$"+Nf,uf="__reactContainer$"+Nf,of="__reactEvents$"+Nf,Qf="__reactListeners$"+Nf,Rf="__reactHandles$"+Nf;function Wc(e){var i=e[Of];if(i)return i;for(var s=e.parentNode;s;){if(i=s[uf]||s[Of]){if(s=i.alternate,i.child!==null||s!==null&&s.child!==null)for(e=Mf(e);e!==null;){if(s=e[Of])return s;e=Mf(e)}return i}e=s,s=e.parentNode}return null}function Cb(e){return e=e[Of]||e[uf],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function ue(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(p(33))}function Db(e){return e[Pf]||null}var Sf=[],Tf=-1;function Uf(e){return{current:e}}function E(e){0>Tf||(e.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(e,i){Tf++,Sf[Tf]=e.current,e.current=i}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(e,i){var s=e.type.contextTypes;if(!s)return Vf;var a=e.stateNode;if(a&&a.__reactInternalMemoizedUnmaskedChildContext===i)return a.__reactInternalMemoizedMaskedChildContext;var o={},c;for(c in s)o[c]=i[c];return a&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),o}function Zf(e){return e=e.childContextTypes,e!=null}function $f(){E(Wf),E(H)}function ag(e,i,s){if(H.current!==Vf)throw Error(p(168));G(H,i),G(Wf,s)}function bg(e,i,s){var a=e.stateNode;if(i=i.childContextTypes,typeof a.getChildContext!="function")return s;a=a.getChildContext();for(var o in a)if(!(o in i))throw Error(p(108,Ra(e)||"Unknown",o));return A({},s,a)}function cg(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Vf,Xf=H.current,G(H,e),G(Wf,Wf.current),!0}function dg(e,i,s){var a=e.stateNode;if(!a)throw Error(p(169));s?(e=bg(e,i,Xf),a.__reactInternalMemoizedMergedChildContext=e,E(Wf),E(H),G(H,e)):E(Wf),G(Wf,s)}var eg=null,fg=!1,gg=!1;function hg(e){eg===null?eg=[e]:eg.push(e)}function ig(e){fg=!0,hg(e)}function jg(){if(!gg&&eg!==null){gg=!0;var e=0,i=C;try{var s=eg;for(C=1;e<s.length;e++){var a=s[e];do a=a(!0);while(a!==null)}eg=null,fg=!1}catch(o){throw eg!==null&&(eg=eg.slice(e+1)),ac(fc,jg),o}finally{C=i,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg="";function tg(e,i){kg[lg++]=ng,kg[lg++]=mg,mg=e,ng=i}function ug(e,i,s){og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,qg=e;var a=rg;e=sg;var o=32-oc(a)-1;a&=~(1<<o),s+=1;var c=32-oc(i)+o;if(30<c){var d=o-o%5;c=(a&(1<<d)-1).toString(32),a>>=d,o-=d,rg=1<<32-oc(i)+o|s<<o|a,sg=c+e}else rg=1<<c|s<<o|a,sg=e}function vg(e){e.return!==null&&(tg(e,1),ug(e,1,0))}function wg(e){for(;e===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;e===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;function Ag(e,i){var s=Bg(5,null,null,0);s.elementType="DELETED",s.stateNode=i,s.return=e,i=e.deletions,i===null?(e.deletions=[s],e.flags|=16):i.push(s)}function Cg(e,i){switch(e.tag){case 5:var s=e.type;return i=i.nodeType!==1||s.toLowerCase()!==i.nodeName.toLowerCase()?null:i,i!==null?(e.stateNode=i,xg=e,yg=Lf(i.firstChild),!0):!1;case 6:return i=e.pendingProps===""||i.nodeType!==3?null:i,i!==null?(e.stateNode=i,xg=e,yg=null,!0):!1;case 13:return i=i.nodeType!==8?null:i,i!==null?(s=qg!==null?{id:rg,overflow:sg}:null,e.memoizedState={dehydrated:i,treeContext:s,retryLane:1073741824},s=Bg(18,null,null,0),s.stateNode=i,s.return=e,e.child=s,xg=e,yg=null,!0):!1;default:return!1}}function Dg(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Eg(e){if(I){var i=yg;if(i){var s=i;if(!Cg(e,i)){if(Dg(e))throw Error(p(418));i=Lf(s.nextSibling);var a=xg;i&&Cg(e,i)?Ag(a,s):(e.flags=e.flags&-4097|2,I=!1,xg=e)}}else{if(Dg(e))throw Error(p(418));e.flags=e.flags&-4097|2,I=!1,xg=e}}}function Fg(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;xg=e}function Gg(e){if(e!==xg)return!1;if(!I)return Fg(e),I=!0,!1;var i;if((i=e.tag!==3)&&!(i=e.tag!==5)&&(i=e.type,i=i!=="head"&&i!=="body"&&!Ef(e.type,e.memoizedProps)),i&&(i=yg)){if(Dg(e))throw Hg(),Error(p(418));for(;i;)Ag(e,i),i=Lf(i.nextSibling)}if(Fg(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(p(317));e:{for(e=e.nextSibling,i=0;e;){if(e.nodeType===8){var s=e.data;if(s==="/$"){if(i===0){yg=Lf(e.nextSibling);break e}i--}else s!=="$"&&s!=="$!"&&s!=="$?"||i++}e=e.nextSibling}yg=null}}else yg=xg?Lf(e.stateNode.nextSibling):null;return!0}function Hg(){for(var e=yg;e;)e=Lf(e.nextSibling)}function Ig(){yg=xg=null,I=!1}function Jg(e){zg===null?zg=[e]:zg.push(e)}var Kg=ua.ReactCurrentBatchConfig;function Lg(e,i){if(e&&e.defaultProps){i=A({},i),e=e.defaultProps;for(var s in e)i[s]===void 0&&(i[s]=e[s]);return i}return i}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(e){var i=Mg.current;E(Mg),e._currentValue=i}function Sg(e,i,s){for(;e!==null;){var a=e.alternate;if((e.childLanes&i)!==i?(e.childLanes|=i,a!==null&&(a.childLanes|=i)):a!==null&&(a.childLanes&i)!==i&&(a.childLanes|=i),e===s)break;e=e.return}}function Tg(e,i){Ng=e,Pg=Og=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&i&&(Ug=!0),e.firstContext=null)}function Vg(e){var i=e._currentValue;if(Pg!==e)if(e={context:e,memoizedValue:i,next:null},Og===null){if(Ng===null)throw Error(p(308));Og=e,Ng.dependencies={lanes:0,firstContext:e}}else Og=Og.next=e;return i}var Wg=null;function Xg(e){Wg===null?Wg=[e]:Wg.push(e)}function Yg(e,i,s,a){var o=i.interleaved;return o===null?(s.next=s,Xg(i)):(s.next=o.next,o.next=s),i.interleaved=s,Zg(e,a)}function Zg(e,i){e.lanes|=i;var s=e.alternate;for(s!==null&&(s.lanes|=i),s=e,e=e.return;e!==null;)e.childLanes|=i,s=e.alternate,s!==null&&(s.childLanes|=i),s=e,e=e.return;return s.tag===3?s.stateNode:null}var $g=!1;function ah(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function bh(e,i){e=e.updateQueue,i.updateQueue===e&&(i.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ch(e,i){return{eventTime:e,lane:i,tag:0,payload:null,callback:null,next:null}}function dh(e,i,s){var a=e.updateQueue;if(a===null)return null;if(a=a.shared,K&2){var o=a.pending;return o===null?i.next=i:(i.next=o.next,o.next=i),a.pending=i,Zg(e,s)}return o=a.interleaved,o===null?(i.next=i,Xg(a)):(i.next=o.next,o.next=i),a.interleaved=i,Zg(e,s)}function eh(e,i,s){if(i=i.updateQueue,i!==null&&(i=i.shared,(s&4194240)!==0)){var a=i.lanes;a&=e.pendingLanes,s|=a,i.lanes=s,Cc(e,s)}}function fh(e,i){var s=e.updateQueue,a=e.alternate;if(a!==null&&(a=a.updateQueue,s===a)){var o=null,c=null;if(s=s.firstBaseUpdate,s!==null){do{var d={eventTime:s.eventTime,lane:s.lane,tag:s.tag,payload:s.payload,callback:s.callback,next:null};c===null?o=c=d:c=c.next=d,s=s.next}while(s!==null);c===null?o=c=i:c=c.next=i}else o=c=i;s={baseState:a.baseState,firstBaseUpdate:o,lastBaseUpdate:c,shared:a.shared,effects:a.effects},e.updateQueue=s;return}e=s.lastBaseUpdate,e===null?s.firstBaseUpdate=i:e.next=i,s.lastBaseUpdate=i}function gh(e,i,s,a){var o=e.updateQueue;$g=!1;var c=o.firstBaseUpdate,d=o.lastBaseUpdate,g=o.shared.pending;if(g!==null){o.shared.pending=null;var _=g,b=_.next;_.next=null,d===null?c=b:d.next=b,d=_;var j=e.alternate;j!==null&&(j=j.updateQueue,g=j.lastBaseUpdate,g!==d&&(g===null?j.firstBaseUpdate=b:g.next=b,j.lastBaseUpdate=_))}if(c!==null){var nt=o.baseState;d=0,j=b=_=null,g=c;do{var tt=g.lane,at=g.eventTime;if((a&tt)===tt){j!==null&&(j=j.next={eventTime:at,lane:0,tag:g.tag,payload:g.payload,callback:g.callback,next:null});e:{var it=e,rt=g;switch(tt=i,at=s,rt.tag){case 1:if(it=rt.payload,typeof it=="function"){nt=it.call(at,nt,tt);break e}nt=it;break e;case 3:it.flags=it.flags&-65537|128;case 0:if(it=rt.payload,tt=typeof it=="function"?it.call(at,nt,tt):it,tt==null)break e;nt=A({},nt,tt);break e;case 2:$g=!0}}g.callback!==null&&g.lane!==0&&(e.flags|=64,tt=o.effects,tt===null?o.effects=[g]:tt.push(g))}else at={eventTime:at,lane:tt,tag:g.tag,payload:g.payload,callback:g.callback,next:null},j===null?(b=j=at,_=nt):j=j.next=at,d|=tt;if(g=g.next,g===null){if(g=o.shared.pending,g===null)break;tt=g,g=tt.next,tt.next=null,o.lastBaseUpdate=tt,o.shared.pending=null}}while(1);if(j===null&&(_=nt),o.baseState=_,o.firstBaseUpdate=b,o.lastBaseUpdate=j,i=o.shared.interleaved,i!==null){o=i;do d|=o.lane,o=o.next;while(o!==i)}else c===null&&(o.shared.lanes=0);hh|=d,e.lanes=d,e.memoizedState=nt}}function ih(e,i,s){if(e=i.effects,i.effects=null,e!==null)for(i=0;i<e.length;i++){var a=e[i],o=a.callback;if(o!==null){if(a.callback=null,a=s,typeof o!="function")throw Error(p(191,o));o.call(a)}}}var jh=new aa.Component().refs;function kh(e,i,s,a){i=e.memoizedState,s=s(a,i),s=s==null?i:A({},i,s),e.memoizedState=s,e.lanes===0&&(e.updateQueue.baseState=s)}var nh={isMounted:function(e){return(e=e._reactInternals)?Vb(e)===e:!1},enqueueSetState:function(e,i,s){e=e._reactInternals;var a=L(),o=lh(e),c=ch(a,o);c.payload=i,s!=null&&(c.callback=s),i=dh(e,c,o),i!==null&&(mh(i,e,o,a),eh(i,e,o))},enqueueReplaceState:function(e,i,s){e=e._reactInternals;var a=L(),o=lh(e),c=ch(a,o);c.tag=1,c.payload=i,s!=null&&(c.callback=s),i=dh(e,c,o),i!==null&&(mh(i,e,o,a),eh(i,e,o))},enqueueForceUpdate:function(e,i){e=e._reactInternals;var s=L(),a=lh(e),o=ch(s,a);o.tag=2,i!=null&&(o.callback=i),i=dh(e,o,a),i!==null&&(mh(i,e,a,s),eh(i,e,a))}};function oh(e,i,s,a,o,c,d){return e=e.stateNode,typeof e.shouldComponentUpdate=="function"?e.shouldComponentUpdate(a,c,d):i.prototype&&i.prototype.isPureReactComponent?!Ie(s,a)||!Ie(o,c):!0}function ph(e,i,s){var a=!1,o=Vf,c=i.contextType;return typeof c=="object"&&c!==null?c=Vg(c):(o=Zf(i)?Xf:H.current,a=i.contextTypes,c=(a=a!=null)?Yf(e,o):Vf),i=new i(s,c),e.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,i.updater=nh,e.stateNode=i,i._reactInternals=e,a&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=c),i}function qh(e,i,s,a){e=i.state,typeof i.componentWillReceiveProps=="function"&&i.componentWillReceiveProps(s,a),typeof i.UNSAFE_componentWillReceiveProps=="function"&&i.UNSAFE_componentWillReceiveProps(s,a),i.state!==e&&nh.enqueueReplaceState(i,i.state,null)}function rh(e,i,s,a){var o=e.stateNode;o.props=s,o.state=e.memoizedState,o.refs=jh,ah(e);var c=i.contextType;typeof c=="object"&&c!==null?o.context=Vg(c):(c=Zf(i)?Xf:H.current,o.context=Yf(e,c)),o.state=e.memoizedState,c=i.getDerivedStateFromProps,typeof c=="function"&&(kh(e,i,c,s),o.state=e.memoizedState),typeof i.getDerivedStateFromProps=="function"||typeof o.getSnapshotBeforeUpdate=="function"||typeof o.UNSAFE_componentWillMount!="function"&&typeof o.componentWillMount!="function"||(i=o.state,typeof o.componentWillMount=="function"&&o.componentWillMount(),typeof o.UNSAFE_componentWillMount=="function"&&o.UNSAFE_componentWillMount(),i!==o.state&&nh.enqueueReplaceState(o,o.state,null),gh(e,s,o,a),o.state=e.memoizedState),typeof o.componentDidMount=="function"&&(e.flags|=4194308)}function sh(e,i,s){if(e=s.ref,e!==null&&typeof e!="function"&&typeof e!="object"){if(s._owner){if(s=s._owner,s){if(s.tag!==1)throw Error(p(309));var a=s.stateNode}if(!a)throw Error(p(147,e));var o=a,c=""+e;return i!==null&&i.ref!==null&&typeof i.ref=="function"&&i.ref._stringRef===c?i.ref:(i=function(d){var g=o.refs;g===jh&&(g=o.refs={}),d===null?delete g[c]:g[c]=d},i._stringRef=c,i)}if(typeof e!="string")throw Error(p(284));if(!s._owner)throw Error(p(290,e))}return e}function th(e,i){throw e=Object.prototype.toString.call(i),Error(p(31,e==="[object Object]"?"object with keys {"+Object.keys(i).join(", ")+"}":e))}function uh(e){var i=e._init;return i(e._payload)}function vh(e){function i($,et){if(e){var _e=$.deletions;_e===null?($.deletions=[et],$.flags|=16):_e.push(et)}}function s($,et){if(!e)return null;for(;et!==null;)i($,et),et=et.sibling;return null}function a($,et){for($=new Map;et!==null;)et.key!==null?$.set(et.key,et):$.set(et.index,et),et=et.sibling;return $}function o($,et){return $=wh($,et),$.index=0,$.sibling=null,$}function c($,et,_e){return $.index=_e,e?(_e=$.alternate,_e!==null?(_e=_e.index,_e<et?($.flags|=2,et):_e):($.flags|=2,et)):($.flags|=1048576,et)}function d($){return e&&$.alternate===null&&($.flags|=2),$}function g($,et,_e,st){return et===null||et.tag!==6?(et=xh(_e,$.mode,st),et.return=$,et):(et=o(et,_e),et.return=$,et)}function _($,et,_e,st){var ft=_e.type;return ft===ya?j($,et,_e.props.children,st,_e.key):et!==null&&(et.elementType===ft||typeof ft=="object"&&ft!==null&&ft.$$typeof===Ha&&uh(ft)===et.type)?(st=o(et,_e.props),st.ref=sh($,et,_e),st.return=$,st):(st=yh(_e.type,_e.key,_e.props,null,$.mode,st),st.ref=sh($,et,_e),st.return=$,st)}function b($,et,_e,st){return et===null||et.tag!==4||et.stateNode.containerInfo!==_e.containerInfo||et.stateNode.implementation!==_e.implementation?(et=zh(_e,$.mode,st),et.return=$,et):(et=o(et,_e.children||[]),et.return=$,et)}function j($,et,_e,st,ft){return et===null||et.tag!==7?(et=Ah(_e,$.mode,st,ft),et.return=$,et):(et=o(et,_e),et.return=$,et)}function nt($,et,_e){if(typeof et=="string"&&et!==""||typeof et=="number")return et=xh(""+et,$.mode,_e),et.return=$,et;if(typeof et=="object"&&et!==null){switch(et.$$typeof){case va:return _e=yh(et.type,et.key,et.props,null,$.mode,_e),_e.ref=sh($,null,et),_e.return=$,_e;case wa:return et=zh(et,$.mode,_e),et.return=$,et;case Ha:var st=et._init;return nt($,st(et._payload),_e)}if(eb(et)||Ka(et))return et=Ah(et,$.mode,_e,null),et.return=$,et;th($,et)}return null}function tt($,et,_e,st){var ft=et!==null?et.key:null;if(typeof _e=="string"&&_e!==""||typeof _e=="number")return ft!==null?null:g($,et,""+_e,st);if(typeof _e=="object"&&_e!==null){switch(_e.$$typeof){case va:return _e.key===ft?_($,et,_e,st):null;case wa:return _e.key===ft?b($,et,_e,st):null;case Ha:return ft=_e._init,tt($,et,ft(_e._payload),st)}if(eb(_e)||Ka(_e))return ft!==null?null:j($,et,_e,st,null);th($,_e)}return null}function at($,et,_e,st,ft){if(typeof st=="string"&&st!==""||typeof st=="number")return $=$.get(_e)||null,g(et,$,""+st,ft);if(typeof st=="object"&&st!==null){switch(st.$$typeof){case va:return $=$.get(st.key===null?_e:st.key)||null,_(et,$,st,ft);case wa:return $=$.get(st.key===null?_e:st.key)||null,b(et,$,st,ft);case Ha:var lt=st._init;return at($,et,_e,lt(st._payload),ft)}if(eb(st)||Ka(st))return $=$.get(_e)||null,j(et,$,st,ft,null);th(et,st)}return null}function it($,et,_e,st){for(var ft=null,lt=null,ct=et,dt=et=0,gt=null;ct!==null&&dt<_e.length;dt++){ct.index>dt?(gt=ct,ct=null):gt=ct.sibling;var Ct=tt($,ct,_e[dt],st);if(Ct===null){ct===null&&(ct=gt);break}e&&ct&&Ct.alternate===null&&i($,ct),et=c(Ct,et,dt),lt===null?ft=Ct:lt.sibling=Ct,lt=Ct,ct=gt}if(dt===_e.length)return s($,ct),I&&tg($,dt),ft;if(ct===null){for(;dt<_e.length;dt++)ct=nt($,_e[dt],st),ct!==null&&(et=c(ct,et,dt),lt===null?ft=ct:lt.sibling=ct,lt=ct);return I&&tg($,dt),ft}for(ct=a($,ct);dt<_e.length;dt++)gt=at(ct,$,dt,_e[dt],st),gt!==null&&(e&&gt.alternate!==null&&ct.delete(gt.key===null?dt:gt.key),et=c(gt,et,dt),lt===null?ft=gt:lt.sibling=gt,lt=gt);return e&&ct.forEach(function(_t){return i($,_t)}),I&&tg($,dt),ft}function rt($,et,_e,st){var ft=Ka(_e);if(typeof ft!="function")throw Error(p(150));if(_e=ft.call(_e),_e==null)throw Error(p(151));for(var lt=ft=null,ct=et,dt=et=0,gt=null,Ct=_e.next();ct!==null&&!Ct.done;dt++,Ct=_e.next()){ct.index>dt?(gt=ct,ct=null):gt=ct.sibling;var _t=tt($,ct,Ct.value,st);if(_t===null){ct===null&&(ct=gt);break}e&&ct&&_t.alternate===null&&i($,ct),et=c(_t,et,dt),lt===null?ft=_t:lt.sibling=_t,lt=_t,ct=gt}if(Ct.done)return s($,ct),I&&tg($,dt),ft;if(ct===null){for(;!Ct.done;dt++,Ct=_e.next())Ct=nt($,Ct.value,st),Ct!==null&&(et=c(Ct,et,dt),lt===null?ft=Ct:lt.sibling=Ct,lt=Ct);return I&&tg($,dt),ft}for(ct=a($,ct);!Ct.done;dt++,Ct=_e.next())Ct=at(ct,$,dt,Ct.value,st),Ct!==null&&(e&&Ct.alternate!==null&&ct.delete(Ct.key===null?dt:Ct.key),et=c(Ct,et,dt),lt===null?ft=Ct:lt.sibling=Ct,lt=Ct);return e&&ct.forEach(function(Pt){return i($,Pt)}),I&&tg($,dt),ft}function ut($,et,_e,st){if(typeof _e=="object"&&_e!==null&&_e.type===ya&&_e.key===null&&(_e=_e.props.children),typeof _e=="object"&&_e!==null){switch(_e.$$typeof){case va:e:{for(var ft=_e.key,lt=et;lt!==null;){if(lt.key===ft){if(ft=_e.type,ft===ya){if(lt.tag===7){s($,lt.sibling),et=o(lt,_e.props.children),et.return=$,$=et;break e}}else if(lt.elementType===ft||typeof ft=="object"&&ft!==null&&ft.$$typeof===Ha&&uh(ft)===lt.type){s($,lt.sibling),et=o(lt,_e.props),et.ref=sh($,lt,_e),et.return=$,$=et;break e}s($,lt);break}else i($,lt);lt=lt.sibling}_e.type===ya?(et=Ah(_e.props.children,$.mode,st,_e.key),et.return=$,$=et):(st=yh(_e.type,_e.key,_e.props,null,$.mode,st),st.ref=sh($,et,_e),st.return=$,$=st)}return d($);case wa:e:{for(lt=_e.key;et!==null;){if(et.key===lt)if(et.tag===4&&et.stateNode.containerInfo===_e.containerInfo&&et.stateNode.implementation===_e.implementation){s($,et.sibling),et=o(et,_e.children||[]),et.return=$,$=et;break e}else{s($,et);break}else i($,et);et=et.sibling}et=zh(_e,$.mode,st),et.return=$,$=et}return d($);case Ha:return lt=_e._init,ut($,et,lt(_e._payload),st)}if(eb(_e))return it($,et,_e,st);if(Ka(_e))return rt($,et,_e,st);th($,_e)}return typeof _e=="string"&&_e!==""||typeof _e=="number"?(_e=""+_e,et!==null&&et.tag===6?(s($,et.sibling),et=o(et,_e),et.return=$,$=et):(s($,et),et=xh(_e,$.mode,st),et.return=$,$=et),d($)):s($,et)}return ut}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(e){if(e===Dh)throw Error(p(174));return e}function Ih(e,i){switch(G(Gh,i),G(Fh,e),G(Eh,Dh),e=i.nodeType,e){case 9:case 11:i=(i=i.documentElement)?i.namespaceURI:lb(null,"");break;default:e=e===8?i.parentNode:i,i=e.namespaceURI||null,e=e.tagName,i=lb(i,e)}E(Eh),G(Eh,i)}function Jh(){E(Eh),E(Fh),E(Gh)}function Kh(e){Hh(Gh.current);var i=Hh(Eh.current),s=lb(i,e.type);i!==s&&(G(Fh,e),G(Eh,s))}function Lh(e){Fh.current===e&&(E(Eh),E(Fh))}var M=Uf(0);function Mh(e){for(var i=e;i!==null;){if(i.tag===13){var s=i.memoizedState;if(s!==null&&(s=s.dehydrated,s===null||s.data==="$?"||s.data==="$!"))return i}else if(i.tag===19&&i.memoizedProps.revealOrder!==void 0){if(i.flags&128)return i}else if(i.child!==null){i.child.return=i,i=i.child;continue}if(i===e)break;for(;i.sibling===null;){if(i.return===null||i.return===e)return null;i=i.return}i.sibling.return=i.return,i=i.sibling}return null}var Nh=[];function Oh(){for(var e=0;e<Nh.length;e++)Nh[e]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321))}function Wh(e,i){if(i===null)return!1;for(var s=0;s<i.length&&s<e.length;s++)if(!He(e[s],i[s]))return!1;return!0}function Xh(e,i,s,a,o,c){if(Rh=c,N=i,i.memoizedState=null,i.updateQueue=null,i.lanes=0,Ph.current=e===null||e.memoizedState===null?Yh:Zh,e=s(a,o),Th){c=0;do{if(Th=!1,Uh=0,25<=c)throw Error(p(301));c+=1,P=O=null,i.updateQueue=null,Ph.current=$h,e=s(a,o)}while(Th)}if(Ph.current=ai,i=O!==null&&O.next!==null,Rh=0,P=O=N=null,Sh=!1,i)throw Error(p(300));return e}function bi(){var e=Uh!==0;return Uh=0,e}function ci(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return P===null?N.memoizedState=P=e:P=P.next=e,P}function di(){if(O===null){var e=N.alternate;e=e!==null?e.memoizedState:null}else e=O.next;var i=P===null?N.memoizedState:P.next;if(i!==null)P=i,O=e;else{if(e===null)throw Error(p(310));O=e,e={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null},P===null?N.memoizedState=P=e:P=P.next=e}return P}function ei(e,i){return typeof i=="function"?i(e):i}function fi(e){var i=di(),s=i.queue;if(s===null)throw Error(p(311));s.lastRenderedReducer=e;var a=O,o=a.baseQueue,c=s.pending;if(c!==null){if(o!==null){var d=o.next;o.next=c.next,c.next=d}a.baseQueue=o=c,s.pending=null}if(o!==null){c=o.next,a=a.baseState;var g=d=null,_=null,b=c;do{var j=b.lane;if((Rh&j)===j)_!==null&&(_=_.next={lane:0,action:b.action,hasEagerState:b.hasEagerState,eagerState:b.eagerState,next:null}),a=b.hasEagerState?b.eagerState:e(a,b.action);else{var nt={lane:j,action:b.action,hasEagerState:b.hasEagerState,eagerState:b.eagerState,next:null};_===null?(g=_=nt,d=a):_=_.next=nt,N.lanes|=j,hh|=j}b=b.next}while(b!==null&&b!==c);_===null?d=a:_.next=g,He(a,i.memoizedState)||(Ug=!0),i.memoizedState=a,i.baseState=d,i.baseQueue=_,s.lastRenderedState=a}if(e=s.interleaved,e!==null){o=e;do c=o.lane,N.lanes|=c,hh|=c,o=o.next;while(o!==e)}else o===null&&(s.lanes=0);return[i.memoizedState,s.dispatch]}function gi(e){var i=di(),s=i.queue;if(s===null)throw Error(p(311));s.lastRenderedReducer=e;var a=s.dispatch,o=s.pending,c=i.memoizedState;if(o!==null){s.pending=null;var d=o=o.next;do c=e(c,d.action),d=d.next;while(d!==o);He(c,i.memoizedState)||(Ug=!0),i.memoizedState=c,i.baseQueue===null&&(i.baseState=c),s.lastRenderedState=c}return[c,a]}function hi(){}function ii(e,i){var s=N,a=di(),o=i(),c=!He(a.memoizedState,o);if(c&&(a.memoizedState=o,Ug=!0),a=a.queue,ji(ki.bind(null,s,a,e),[e]),a.getSnapshot!==i||c||P!==null&&P.memoizedState.tag&1){if(s.flags|=2048,li(9,mi.bind(null,s,a,o,i),void 0,null),R===null)throw Error(p(349));Rh&30||ni(s,i,o)}return o}function ni(e,i,s){e.flags|=16384,e={getSnapshot:i,value:s},i=N.updateQueue,i===null?(i={lastEffect:null,stores:null},N.updateQueue=i,i.stores=[e]):(s=i.stores,s===null?i.stores=[e]:s.push(e))}function mi(e,i,s,a){i.value=s,i.getSnapshot=a,oi(i)&&pi(e)}function ki(e,i,s){return s(function(){oi(i)&&pi(e)})}function oi(e){var i=e.getSnapshot;e=e.value;try{var s=i();return!He(e,s)}catch{return!0}}function pi(e){var i=Zg(e,1);i!==null&&mh(i,e,1,-1)}function qi(e){var i=ci();return typeof e=="function"&&(e=e()),i.memoizedState=i.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:e},i.queue=e,e=e.dispatch=ri.bind(null,N,e),[i.memoizedState,e]}function li(e,i,s,a){return e={tag:e,create:i,destroy:s,deps:a,next:null},i=N.updateQueue,i===null?(i={lastEffect:null,stores:null},N.updateQueue=i,i.lastEffect=e.next=e):(s=i.lastEffect,s===null?i.lastEffect=e.next=e:(a=s.next,s.next=e,e.next=a,i.lastEffect=e)),e}function si(){return di().memoizedState}function ti(e,i,s,a){var o=ci();N.flags|=e,o.memoizedState=li(1|i,s,void 0,a===void 0?null:a)}function ui(e,i,s,a){var o=di();a=a===void 0?null:a;var c=void 0;if(O!==null){var d=O.memoizedState;if(c=d.destroy,a!==null&&Wh(a,d.deps)){o.memoizedState=li(i,s,c,a);return}}N.flags|=e,o.memoizedState=li(1|i,s,c,a)}function vi(e,i){return ti(8390656,8,e,i)}function ji(e,i){return ui(2048,8,e,i)}function wi(e,i){return ui(4,2,e,i)}function xi(e,i){return ui(4,4,e,i)}function yi(e,i){if(typeof i=="function")return e=e(),i(e),function(){i(null)};if(i!=null)return e=e(),i.current=e,function(){i.current=null}}function zi(e,i,s){return s=s!=null?s.concat([e]):null,ui(4,4,yi.bind(null,i,e),s)}function Ai(){}function Bi(e,i){var s=di();i=i===void 0?null:i;var a=s.memoizedState;return a!==null&&i!==null&&Wh(i,a[1])?a[0]:(s.memoizedState=[e,i],e)}function Ci(e,i){var s=di();i=i===void 0?null:i;var a=s.memoizedState;return a!==null&&i!==null&&Wh(i,a[1])?a[0]:(e=e(),s.memoizedState=[e,i],e)}function Di(e,i,s){return Rh&21?(He(s,i)||(s=yc(),N.lanes|=s,hh|=s,e.baseState=!0),i):(e.baseState&&(e.baseState=!1,Ug=!0),e.memoizedState=s)}function Ei(e,i){var s=C;C=s!==0&&4>s?s:4,e(!0);var a=Qh.transition;Qh.transition={};try{e(!1),i()}finally{C=s,Qh.transition=a}}function Fi(){return di().memoizedState}function Gi(e,i,s){var a=lh(e);if(s={lane:a,action:s,hasEagerState:!1,eagerState:null,next:null},Hi(e))Ii(i,s);else if(s=Yg(e,i,s,a),s!==null){var o=L();mh(s,e,a,o),Ji(s,i,a)}}function ri(e,i,s){var a=lh(e),o={lane:a,action:s,hasEagerState:!1,eagerState:null,next:null};if(Hi(e))Ii(i,o);else{var c=e.alternate;if(e.lanes===0&&(c===null||c.lanes===0)&&(c=i.lastRenderedReducer,c!==null))try{var d=i.lastRenderedState,g=c(d,s);if(o.hasEagerState=!0,o.eagerState=g,He(g,d)){var _=i.interleaved;_===null?(o.next=o,Xg(i)):(o.next=_.next,_.next=o),i.interleaved=o;return}}catch{}finally{}s=Yg(e,i,o,a),s!==null&&(o=L(),mh(s,e,a,o),Ji(s,i,a))}}function Hi(e){var i=e.alternate;return e===N||i!==null&&i===N}function Ii(e,i){Th=Sh=!0;var s=e.pending;s===null?i.next=i:(i.next=s.next,s.next=i),e.pending=i}function Ji(e,i,s){if(s&4194240){var a=i.lanes;a&=e.pendingLanes,s|=a,i.lanes=s,Cc(e,s)}}var ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(e,i){return ci().memoizedState=[e,i===void 0?null:i],e},useContext:Vg,useEffect:vi,useImperativeHandle:function(e,i,s){return s=s!=null?s.concat([e]):null,ti(4194308,4,yi.bind(null,i,e),s)},useLayoutEffect:function(e,i){return ti(4194308,4,e,i)},useInsertionEffect:function(e,i){return ti(4,2,e,i)},useMemo:function(e,i){var s=ci();return i=i===void 0?null:i,e=e(),s.memoizedState=[e,i],e},useReducer:function(e,i,s){var a=ci();return i=s!==void 0?s(i):i,a.memoizedState=a.baseState=i,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:i},a.queue=e,e=e.dispatch=Gi.bind(null,N,e),[a.memoizedState,e]},useRef:function(e){var i=ci();return e={current:e},i.memoizedState=e},useState:qi,useDebugValue:Ai,useDeferredValue:function(e){return ci().memoizedState=e},useTransition:function(){var e=qi(!1),i=e[0];return e=Ei.bind(null,e[1]),ci().memoizedState=e,[i,e]},useMutableSource:function(){},useSyncExternalStore:function(e,i,s){var a=N,o=ci();if(I){if(s===void 0)throw Error(p(407));s=s()}else{if(s=i(),R===null)throw Error(p(349));Rh&30||ni(a,i,s)}o.memoizedState=s;var c={value:s,getSnapshot:i};return o.queue=c,vi(ki.bind(null,a,c,e),[e]),a.flags|=2048,li(9,mi.bind(null,a,c,s,i),void 0,null),s},useId:function(){var e=ci(),i=R.identifierPrefix;if(I){var s=sg,a=rg;s=(a&~(1<<32-oc(a)-1)).toString(32)+s,i=":"+i+"R"+s,s=Uh++,0<s&&(i+="H"+s.toString(32)),i+=":"}else s=Vh++,i=":"+i+"r"+s.toString(32)+":";return e.memoizedState=i},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},useDebugValue:Ai,useDeferredValue:function(e){var i=di();return Di(i,O.memoizedState,e)},useTransition:function(){var e=fi(ei)[0],i=di().memoizedState;return[e,i]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(e){var i=di();return O===null?i.memoizedState=e:Di(i,O.memoizedState,e)},useTransition:function(){var e=gi(ei)[0],i=di().memoizedState;return[e,i]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(e,i){try{var s="",a=i;do s+=Pa(a),a=a.return;while(a);var o=s}catch(c){o=`
Error generating stack: `+c.message+`
`+c.stack}return{value:e,source:i,stack:o,digest:null}}function Li(e,i,s){return{value:e,source:null,stack:s??null,digest:i??null}}function Mi(e,i){try{console.error(i.value)}catch(s){setTimeout(function(){throw s})}}var Ni=typeof WeakMap=="function"?WeakMap:Map;function Oi(e,i,s){s=ch(-1,s),s.tag=3,s.payload={element:null};var a=i.value;return s.callback=function(){Pi||(Pi=!0,Qi=a),Mi(e,i)},s}function Ri(e,i,s){s=ch(-1,s),s.tag=3;var a=e.type.getDerivedStateFromError;if(typeof a=="function"){var o=i.value;s.payload=function(){return a(o)},s.callback=function(){Mi(e,i)}}var c=e.stateNode;return c!==null&&typeof c.componentDidCatch=="function"&&(s.callback=function(){Mi(e,i),typeof a!="function"&&(Si===null?Si=new Set([this]):Si.add(this));var d=i.stack;this.componentDidCatch(i.value,{componentStack:d!==null?d:""})}),s}function Ti(e,i,s){var a=e.pingCache;if(a===null){a=e.pingCache=new Ni;var o=new Set;a.set(i,o)}else o=a.get(i),o===void 0&&(o=new Set,a.set(i,o));o.has(s)||(o.add(s),e=Ui.bind(null,e,i,s),i.then(e,e))}function Vi(e){do{var i;if((i=e.tag===13)&&(i=e.memoizedState,i=i!==null?i.dehydrated!==null:!0),i)return e;e=e.return}while(e!==null);return null}function Wi(e,i,s,a,o){return e.mode&1?(e.flags|=65536,e.lanes=o,e):(e===i?e.flags|=65536:(e.flags|=128,s.flags|=131072,s.flags&=-52805,s.tag===1&&(s.alternate===null?s.tag=17:(i=ch(-1,1),i.tag=2,dh(s,i,1))),s.lanes|=1),e)}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(e,i,s,a){i.child=e===null?Ch(i,null,s,a):Bh(i,e.child,s,a)}function Zi(e,i,s,a,o){s=s.render;var c=i.ref;return Tg(i,o),a=Xh(e,i,s,a,c,o),s=bi(),e!==null&&!Ug?(i.updateQueue=e.updateQueue,i.flags&=-2053,e.lanes&=~o,$i(e,i,o)):(I&&s&&vg(i),i.flags|=1,Yi(e,i,a,o),i.child)}function aj(e,i,s,a,o){if(e===null){var c=s.type;return typeof c=="function"&&!bj(c)&&c.defaultProps===void 0&&s.compare===null&&s.defaultProps===void 0?(i.tag=15,i.type=c,cj(e,i,c,a,o)):(e=yh(s.type,null,a,i,i.mode,o),e.ref=i.ref,e.return=i,i.child=e)}if(c=e.child,!(e.lanes&o)){var d=c.memoizedProps;if(s=s.compare,s=s!==null?s:Ie,s(d,a)&&e.ref===i.ref)return $i(e,i,o)}return i.flags|=1,e=wh(c,a),e.ref=i.ref,e.return=i,i.child=e}function cj(e,i,s,a,o){if(e!==null){var c=e.memoizedProps;if(Ie(c,a)&&e.ref===i.ref)if(Ug=!1,i.pendingProps=a=c,(e.lanes&o)!==0)e.flags&131072&&(Ug=!0);else return i.lanes=e.lanes,$i(e,i,o)}return dj(e,i,s,a,o)}function ej(e,i,s){var a=i.pendingProps,o=a.children,c=e!==null?e.memoizedState:null;if(a.mode==="hidden")if(!(i.mode&1))i.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=s;else{if(!(s&1073741824))return e=c!==null?c.baseLanes|s:s,i.lanes=i.childLanes=1073741824,i.memoizedState={baseLanes:e,cachePool:null,transitions:null},i.updateQueue=null,G(fj,gj),gj|=e,null;i.memoizedState={baseLanes:0,cachePool:null,transitions:null},a=c!==null?c.baseLanes:s,G(fj,gj),gj|=a}else c!==null?(a=c.baseLanes|s,i.memoizedState=null):a=s,G(fj,gj),gj|=a;return Yi(e,i,o,s),i.child}function hj(e,i){var s=i.ref;(e===null&&s!==null||e!==null&&e.ref!==s)&&(i.flags|=512,i.flags|=2097152)}function dj(e,i,s,a,o){var c=Zf(s)?Xf:H.current;return c=Yf(i,c),Tg(i,o),s=Xh(e,i,s,a,c,o),a=bi(),e!==null&&!Ug?(i.updateQueue=e.updateQueue,i.flags&=-2053,e.lanes&=~o,$i(e,i,o)):(I&&a&&vg(i),i.flags|=1,Yi(e,i,s,o),i.child)}function ij(e,i,s,a,o){if(Zf(s)){var c=!0;cg(i)}else c=!1;if(Tg(i,o),i.stateNode===null)jj(e,i),ph(i,s,a),rh(i,s,a,o),a=!0;else if(e===null){var d=i.stateNode,g=i.memoizedProps;d.props=g;var _=d.context,b=s.contextType;typeof b=="object"&&b!==null?b=Vg(b):(b=Zf(s)?Xf:H.current,b=Yf(i,b));var j=s.getDerivedStateFromProps,nt=typeof j=="function"||typeof d.getSnapshotBeforeUpdate=="function";nt||typeof d.UNSAFE_componentWillReceiveProps!="function"&&typeof d.componentWillReceiveProps!="function"||(g!==a||_!==b)&&qh(i,d,a,b),$g=!1;var tt=i.memoizedState;d.state=tt,gh(i,a,d,o),_=i.memoizedState,g!==a||tt!==_||Wf.current||$g?(typeof j=="function"&&(kh(i,s,j,a),_=i.memoizedState),(g=$g||oh(i,s,g,a,tt,_,b))?(nt||typeof d.UNSAFE_componentWillMount!="function"&&typeof d.componentWillMount!="function"||(typeof d.componentWillMount=="function"&&d.componentWillMount(),typeof d.UNSAFE_componentWillMount=="function"&&d.UNSAFE_componentWillMount()),typeof d.componentDidMount=="function"&&(i.flags|=4194308)):(typeof d.componentDidMount=="function"&&(i.flags|=4194308),i.memoizedProps=a,i.memoizedState=_),d.props=a,d.state=_,d.context=b,a=g):(typeof d.componentDidMount=="function"&&(i.flags|=4194308),a=!1)}else{d=i.stateNode,bh(e,i),g=i.memoizedProps,b=i.type===i.elementType?g:Lg(i.type,g),d.props=b,nt=i.pendingProps,tt=d.context,_=s.contextType,typeof _=="object"&&_!==null?_=Vg(_):(_=Zf(s)?Xf:H.current,_=Yf(i,_));var at=s.getDerivedStateFromProps;(j=typeof at=="function"||typeof d.getSnapshotBeforeUpdate=="function")||typeof d.UNSAFE_componentWillReceiveProps!="function"&&typeof d.componentWillReceiveProps!="function"||(g!==nt||tt!==_)&&qh(i,d,a,_),$g=!1,tt=i.memoizedState,d.state=tt,gh(i,a,d,o);var it=i.memoizedState;g!==nt||tt!==it||Wf.current||$g?(typeof at=="function"&&(kh(i,s,at,a),it=i.memoizedState),(b=$g||oh(i,s,b,a,tt,it,_)||!1)?(j||typeof d.UNSAFE_componentWillUpdate!="function"&&typeof d.componentWillUpdate!="function"||(typeof d.componentWillUpdate=="function"&&d.componentWillUpdate(a,it,_),typeof d.UNSAFE_componentWillUpdate=="function"&&d.UNSAFE_componentWillUpdate(a,it,_)),typeof d.componentDidUpdate=="function"&&(i.flags|=4),typeof d.getSnapshotBeforeUpdate=="function"&&(i.flags|=1024)):(typeof d.componentDidUpdate!="function"||g===e.memoizedProps&&tt===e.memoizedState||(i.flags|=4),typeof d.getSnapshotBeforeUpdate!="function"||g===e.memoizedProps&&tt===e.memoizedState||(i.flags|=1024),i.memoizedProps=a,i.memoizedState=it),d.props=a,d.state=it,d.context=_,a=b):(typeof d.componentDidUpdate!="function"||g===e.memoizedProps&&tt===e.memoizedState||(i.flags|=4),typeof d.getSnapshotBeforeUpdate!="function"||g===e.memoizedProps&&tt===e.memoizedState||(i.flags|=1024),a=!1)}return kj(e,i,s,a,c,o)}function kj(e,i,s,a,o,c){hj(e,i);var d=(i.flags&128)!==0;if(!a&&!d)return o&&dg(i,s,!1),$i(e,i,c);a=i.stateNode,Xi.current=i;var g=d&&typeof s.getDerivedStateFromError!="function"?null:a.render();return i.flags|=1,e!==null&&d?(i.child=Bh(i,e.child,null,c),i.child=Bh(i,null,g,c)):Yi(e,i,g,c),i.memoizedState=a.state,o&&dg(i,s,!0),i.child}function lj(e){var i=e.stateNode;i.pendingContext?ag(e,i.pendingContext,i.pendingContext!==i.context):i.context&&ag(e,i.context,!1),Ih(e,i.containerInfo)}function mj(e,i,s,a,o){return Ig(),Jg(o),i.flags|=256,Yi(e,i,s,a),i.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(e){return{baseLanes:e,cachePool:null,transitions:null}}function pj(e,i,s){var a=i.pendingProps,o=M.current,c=!1,d=(i.flags&128)!==0,g;if((g=d)||(g=e!==null&&e.memoizedState===null?!1:(o&2)!==0),g?(c=!0,i.flags&=-129):(e===null||e.memoizedState!==null)&&(o|=1),G(M,o&1),e===null)return Eg(i),e=i.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(i.mode&1?e.data==="$!"?i.lanes=8:i.lanes=1073741824:i.lanes=1,null):(d=a.children,e=a.fallback,c?(a=i.mode,c=i.child,d={mode:"hidden",children:d},!(a&1)&&c!==null?(c.childLanes=0,c.pendingProps=d):c=qj(d,a,0,null),e=Ah(e,a,s,null),c.return=i,e.return=i,c.sibling=e,i.child=c,i.child.memoizedState=oj(s),i.memoizedState=nj,e):rj(i,d));if(o=e.memoizedState,o!==null&&(g=o.dehydrated,g!==null))return sj(e,i,d,a,g,o,s);if(c){c=a.fallback,d=i.mode,o=e.child,g=o.sibling;var _={mode:"hidden",children:a.children};return!(d&1)&&i.child!==o?(a=i.child,a.childLanes=0,a.pendingProps=_,i.deletions=null):(a=wh(o,_),a.subtreeFlags=o.subtreeFlags&14680064),g!==null?c=wh(g,c):(c=Ah(c,d,s,null),c.flags|=2),c.return=i,a.return=i,a.sibling=c,i.child=a,a=c,c=i.child,d=e.child.memoizedState,d=d===null?oj(s):{baseLanes:d.baseLanes|s,cachePool:null,transitions:d.transitions},c.memoizedState=d,c.childLanes=e.childLanes&~s,i.memoizedState=nj,a}return c=e.child,e=c.sibling,a=wh(c,{mode:"visible",children:a.children}),!(i.mode&1)&&(a.lanes=s),a.return=i,a.sibling=null,e!==null&&(s=i.deletions,s===null?(i.deletions=[e],i.flags|=16):s.push(e)),i.child=a,i.memoizedState=null,a}function rj(e,i){return i=qj({mode:"visible",children:i},e.mode,0,null),i.return=e,e.child=i}function tj(e,i,s,a){return a!==null&&Jg(a),Bh(i,e.child,null,s),e=rj(i,i.pendingProps.children),e.flags|=2,i.memoizedState=null,e}function sj(e,i,s,a,o,c,d){if(s)return i.flags&256?(i.flags&=-257,a=Li(Error(p(422))),tj(e,i,d,a)):i.memoizedState!==null?(i.child=e.child,i.flags|=128,null):(c=a.fallback,o=i.mode,a=qj({mode:"visible",children:a.children},o,0,null),c=Ah(c,o,d,null),c.flags|=2,a.return=i,c.return=i,a.sibling=c,i.child=a,i.mode&1&&Bh(i,e.child,null,d),i.child.memoizedState=oj(d),i.memoizedState=nj,c);if(!(i.mode&1))return tj(e,i,d,null);if(o.data==="$!"){if(a=o.nextSibling&&o.nextSibling.dataset,a)var g=a.dgst;return a=g,c=Error(p(419)),a=Li(c,a,void 0),tj(e,i,d,a)}if(g=(d&e.childLanes)!==0,Ug||g){if(a=R,a!==null){switch(d&-d){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}o=o&(a.suspendedLanes|d)?0:o,o!==0&&o!==c.retryLane&&(c.retryLane=o,Zg(e,o),mh(a,e,o,-1))}return uj(),a=Li(Error(p(421))),tj(e,i,d,a)}return o.data==="$?"?(i.flags|=128,i.child=e.child,i=vj.bind(null,e),o._reactRetry=i,null):(e=c.treeContext,yg=Lf(o.nextSibling),xg=i,I=!0,zg=null,e!==null&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=e.id,sg=e.overflow,qg=i),i=rj(i,a.children),i.flags|=4096,i)}function wj(e,i,s){e.lanes|=i;var a=e.alternate;a!==null&&(a.lanes|=i),Sg(e.return,i,s)}function xj(e,i,s,a,o){var c=e.memoizedState;c===null?e.memoizedState={isBackwards:i,rendering:null,renderingStartTime:0,last:a,tail:s,tailMode:o}:(c.isBackwards=i,c.rendering=null,c.renderingStartTime=0,c.last=a,c.tail=s,c.tailMode=o)}function yj(e,i,s){var a=i.pendingProps,o=a.revealOrder,c=a.tail;if(Yi(e,i,a.children,s),a=M.current,a&2)a=a&1|2,i.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=i.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&wj(e,s,i);else if(e.tag===19)wj(e,s,i);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===i)break e;for(;e.sibling===null;){if(e.return===null||e.return===i)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}a&=1}if(G(M,a),!(i.mode&1))i.memoizedState=null;else switch(o){case"forwards":for(s=i.child,o=null;s!==null;)e=s.alternate,e!==null&&Mh(e)===null&&(o=s),s=s.sibling;s=o,s===null?(o=i.child,i.child=null):(o=s.sibling,s.sibling=null),xj(i,!1,o,s,c);break;case"backwards":for(s=null,o=i.child,i.child=null;o!==null;){if(e=o.alternate,e!==null&&Mh(e)===null){i.child=o;break}e=o.sibling,o.sibling=s,s=o,o=e}xj(i,!0,s,null,c);break;case"together":xj(i,!1,null,null,void 0);break;default:i.memoizedState=null}return i.child}function jj(e,i){!(i.mode&1)&&e!==null&&(e.alternate=null,i.alternate=null,i.flags|=2)}function $i(e,i,s){if(e!==null&&(i.dependencies=e.dependencies),hh|=i.lanes,!(s&i.childLanes))return null;if(e!==null&&i.child!==e.child)throw Error(p(153));if(i.child!==null){for(e=i.child,s=wh(e,e.pendingProps),i.child=s,s.return=i;e.sibling!==null;)e=e.sibling,s=s.sibling=wh(e,e.pendingProps),s.return=i;s.sibling=null}return i.child}function zj(e,i,s){switch(i.tag){case 3:lj(i),Ig();break;case 5:Kh(i);break;case 1:Zf(i.type)&&cg(i);break;case 4:Ih(i,i.stateNode.containerInfo);break;case 10:var a=i.type._context,o=i.memoizedProps.value;G(Mg,a._currentValue),a._currentValue=o;break;case 13:if(a=i.memoizedState,a!==null)return a.dehydrated!==null?(G(M,M.current&1),i.flags|=128,null):s&i.child.childLanes?pj(e,i,s):(G(M,M.current&1),e=$i(e,i,s),e!==null?e.sibling:null);G(M,M.current&1);break;case 19:if(a=(s&i.childLanes)!==0,e.flags&128){if(a)return yj(e,i,s);i.flags|=128}if(o=i.memoizedState,o!==null&&(o.rendering=null,o.tail=null,o.lastEffect=null),G(M,M.current),a)break;return null;case 22:case 23:return i.lanes=0,ej(e,i,s)}return $i(e,i,s)}var Aj,Bj,Cj,Dj;Aj=function(e,i){for(var s=i.child;s!==null;){if(s.tag===5||s.tag===6)e.appendChild(s.stateNode);else if(s.tag!==4&&s.child!==null){s.child.return=s,s=s.child;continue}if(s===i)break;for(;s.sibling===null;){if(s.return===null||s.return===i)return;s=s.return}s.sibling.return=s.return,s=s.sibling}};Bj=function(){};Cj=function(e,i,s,a){var o=e.memoizedProps;if(o!==a){e=i.stateNode,Hh(Eh.current);var c=null;switch(s){case"input":o=Ya(e,o),a=Ya(e,a),c=[];break;case"select":o=A({},o,{value:void 0}),a=A({},a,{value:void 0}),c=[];break;case"textarea":o=gb(e,o),a=gb(e,a),c=[];break;default:typeof o.onClick!="function"&&typeof a.onClick=="function"&&(e.onclick=Bf)}ub(s,a);var d;s=null;for(b in o)if(!a.hasOwnProperty(b)&&o.hasOwnProperty(b)&&o[b]!=null)if(b==="style"){var g=o[b];for(d in g)g.hasOwnProperty(d)&&(s||(s={}),s[d]="")}else b!=="dangerouslySetInnerHTML"&&b!=="children"&&b!=="suppressContentEditableWarning"&&b!=="suppressHydrationWarning"&&b!=="autoFocus"&&(ea.hasOwnProperty(b)?c||(c=[]):(c=c||[]).push(b,null));for(b in a){var _=a[b];if(g=o!=null?o[b]:void 0,a.hasOwnProperty(b)&&_!==g&&(_!=null||g!=null))if(b==="style")if(g){for(d in g)!g.hasOwnProperty(d)||_&&_.hasOwnProperty(d)||(s||(s={}),s[d]="");for(d in _)_.hasOwnProperty(d)&&g[d]!==_[d]&&(s||(s={}),s[d]=_[d])}else s||(c||(c=[]),c.push(b,s)),s=_;else b==="dangerouslySetInnerHTML"?(_=_?_.__html:void 0,g=g?g.__html:void 0,_!=null&&g!==_&&(c=c||[]).push(b,_)):b==="children"?typeof _!="string"&&typeof _!="number"||(c=c||[]).push(b,""+_):b!=="suppressContentEditableWarning"&&b!=="suppressHydrationWarning"&&(ea.hasOwnProperty(b)?(_!=null&&b==="onScroll"&&D("scroll",e),c||g===_||(c=[])):(c=c||[]).push(b,_))}s&&(c=c||[]).push("style",s);var b=c;(i.updateQueue=b)&&(i.flags|=4)}};Dj=function(e,i,s,a){s!==a&&(i.flags|=4)};function Ej(e,i){if(!I)switch(e.tailMode){case"hidden":i=e.tail;for(var s=null;i!==null;)i.alternate!==null&&(s=i),i=i.sibling;s===null?e.tail=null:s.sibling=null;break;case"collapsed":s=e.tail;for(var a=null;s!==null;)s.alternate!==null&&(a=s),s=s.sibling;a===null?i||e.tail===null?e.tail=null:e.tail.sibling=null:a.sibling=null}}function S(e){var i=e.alternate!==null&&e.alternate.child===e.child,s=0,a=0;if(i)for(var o=e.child;o!==null;)s|=o.lanes|o.childLanes,a|=o.subtreeFlags&14680064,a|=o.flags&14680064,o.return=e,o=o.sibling;else for(o=e.child;o!==null;)s|=o.lanes|o.childLanes,a|=o.subtreeFlags,a|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=a,e.childLanes=s,i}function Fj(e,i,s){var a=i.pendingProps;switch(wg(i),i.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(i),null;case 1:return Zf(i.type)&&$f(),S(i),null;case 3:return a=i.stateNode,Jh(),E(Wf),E(H),Oh(),a.pendingContext&&(a.context=a.pendingContext,a.pendingContext=null),(e===null||e.child===null)&&(Gg(i)?i.flags|=4:e===null||e.memoizedState.isDehydrated&&!(i.flags&256)||(i.flags|=1024,zg!==null&&(Gj(zg),zg=null))),Bj(e,i),S(i),null;case 5:Lh(i);var o=Hh(Gh.current);if(s=i.type,e!==null&&i.stateNode!=null)Cj(e,i,s,a,o),e.ref!==i.ref&&(i.flags|=512,i.flags|=2097152);else{if(!a){if(i.stateNode===null)throw Error(p(166));return S(i),null}if(e=Hh(Eh.current),Gg(i)){a=i.stateNode,s=i.type;var c=i.memoizedProps;switch(a[Of]=i,a[Pf]=c,e=(i.mode&1)!==0,s){case"dialog":D("cancel",a),D("close",a);break;case"iframe":case"object":case"embed":D("load",a);break;case"video":case"audio":for(o=0;o<lf.length;o++)D(lf[o],a);break;case"source":D("error",a);break;case"img":case"image":case"link":D("error",a),D("load",a);break;case"details":D("toggle",a);break;case"input":Za(a,c),D("invalid",a);break;case"select":a._wrapperState={wasMultiple:!!c.multiple},D("invalid",a);break;case"textarea":hb(a,c),D("invalid",a)}ub(s,c),o=null;for(var d in c)if(c.hasOwnProperty(d)){var g=c[d];d==="children"?typeof g=="string"?a.textContent!==g&&(c.suppressHydrationWarning!==!0&&Af(a.textContent,g,e),o=["children",g]):typeof g=="number"&&a.textContent!==""+g&&(c.suppressHydrationWarning!==!0&&Af(a.textContent,g,e),o=["children",""+g]):ea.hasOwnProperty(d)&&g!=null&&d==="onScroll"&&D("scroll",a)}switch(s){case"input":Va(a),db(a,c,!0);break;case"textarea":Va(a),jb(a);break;case"select":case"option":break;default:typeof c.onClick=="function"&&(a.onclick=Bf)}a=o,i.updateQueue=a,a!==null&&(i.flags|=4)}else{d=o.nodeType===9?o:o.ownerDocument,e==="http://www.w3.org/1999/xhtml"&&(e=kb(s)),e==="http://www.w3.org/1999/xhtml"?s==="script"?(e=d.createElement("div"),e.innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):typeof a.is=="string"?e=d.createElement(s,{is:a.is}):(e=d.createElement(s),s==="select"&&(d=e,a.multiple?d.multiple=!0:a.size&&(d.size=a.size))):e=d.createElementNS(e,s),e[Of]=i,e[Pf]=a,Aj(e,i,!1,!1),i.stateNode=e;e:{switch(d=vb(s,a),s){case"dialog":D("cancel",e),D("close",e),o=a;break;case"iframe":case"object":case"embed":D("load",e),o=a;break;case"video":case"audio":for(o=0;o<lf.length;o++)D(lf[o],e);o=a;break;case"source":D("error",e),o=a;break;case"img":case"image":case"link":D("error",e),D("load",e),o=a;break;case"details":D("toggle",e),o=a;break;case"input":Za(e,a),o=Ya(e,a),D("invalid",e);break;case"option":o=a;break;case"select":e._wrapperState={wasMultiple:!!a.multiple},o=A({},a,{value:void 0}),D("invalid",e);break;case"textarea":hb(e,a),o=gb(e,a),D("invalid",e);break;default:o=a}ub(s,o),g=o;for(c in g)if(g.hasOwnProperty(c)){var _=g[c];c==="style"?sb(e,_):c==="dangerouslySetInnerHTML"?(_=_?_.__html:void 0,_!=null&&nb(e,_)):c==="children"?typeof _=="string"?(s!=="textarea"||_!=="")&&ob(e,_):typeof _=="number"&&ob(e,""+_):c!=="suppressContentEditableWarning"&&c!=="suppressHydrationWarning"&&c!=="autoFocus"&&(ea.hasOwnProperty(c)?_!=null&&c==="onScroll"&&D("scroll",e):_!=null&&ta(e,c,_,d))}switch(s){case"input":Va(e),db(e,a,!1);break;case"textarea":Va(e),jb(e);break;case"option":a.value!=null&&e.setAttribute("value",""+Sa(a.value));break;case"select":e.multiple=!!a.multiple,c=a.value,c!=null?fb(e,!!a.multiple,c,!1):a.defaultValue!=null&&fb(e,!!a.multiple,a.defaultValue,!0);break;default:typeof o.onClick=="function"&&(e.onclick=Bf)}switch(s){case"button":case"input":case"select":case"textarea":a=!!a.autoFocus;break e;case"img":a=!0;break e;default:a=!1}}a&&(i.flags|=4)}i.ref!==null&&(i.flags|=512,i.flags|=2097152)}return S(i),null;case 6:if(e&&i.stateNode!=null)Dj(e,i,e.memoizedProps,a);else{if(typeof a!="string"&&i.stateNode===null)throw Error(p(166));if(s=Hh(Gh.current),Hh(Eh.current),Gg(i)){if(a=i.stateNode,s=i.memoizedProps,a[Of]=i,(c=a.nodeValue!==s)&&(e=xg,e!==null))switch(e.tag){case 3:Af(a.nodeValue,s,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&Af(a.nodeValue,s,(e.mode&1)!==0)}c&&(i.flags|=4)}else a=(s.nodeType===9?s:s.ownerDocument).createTextNode(a),a[Of]=i,i.stateNode=a}return S(i),null;case 13:if(E(M),a=i.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(I&&yg!==null&&i.mode&1&&!(i.flags&128))Hg(),Ig(),i.flags|=98560,c=!1;else if(c=Gg(i),a!==null&&a.dehydrated!==null){if(e===null){if(!c)throw Error(p(318));if(c=i.memoizedState,c=c!==null?c.dehydrated:null,!c)throw Error(p(317));c[Of]=i}else Ig(),!(i.flags&128)&&(i.memoizedState=null),i.flags|=4;S(i),c=!1}else zg!==null&&(Gj(zg),zg=null),c=!0;if(!c)return i.flags&65536?i:null}return i.flags&128?(i.lanes=s,i):(a=a!==null,a!==(e!==null&&e.memoizedState!==null)&&a&&(i.child.flags|=8192,i.mode&1&&(e===null||M.current&1?T===0&&(T=3):uj())),i.updateQueue!==null&&(i.flags|=4),S(i),null);case 4:return Jh(),Bj(e,i),e===null&&sf(i.stateNode.containerInfo),S(i),null;case 10:return Rg(i.type._context),S(i),null;case 17:return Zf(i.type)&&$f(),S(i),null;case 19:if(E(M),c=i.memoizedState,c===null)return S(i),null;if(a=(i.flags&128)!==0,d=c.rendering,d===null)if(a)Ej(c,!1);else{if(T!==0||e!==null&&e.flags&128)for(e=i.child;e!==null;){if(d=Mh(e),d!==null){for(i.flags|=128,Ej(c,!1),a=d.updateQueue,a!==null&&(i.updateQueue=a,i.flags|=4),i.subtreeFlags=0,a=s,s=i.child;s!==null;)c=s,e=a,c.flags&=14680066,d=c.alternate,d===null?(c.childLanes=0,c.lanes=e,c.child=null,c.subtreeFlags=0,c.memoizedProps=null,c.memoizedState=null,c.updateQueue=null,c.dependencies=null,c.stateNode=null):(c.childLanes=d.childLanes,c.lanes=d.lanes,c.child=d.child,c.subtreeFlags=0,c.deletions=null,c.memoizedProps=d.memoizedProps,c.memoizedState=d.memoizedState,c.updateQueue=d.updateQueue,c.type=d.type,e=d.dependencies,c.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),s=s.sibling;return G(M,M.current&1|2),i.child}e=e.sibling}c.tail!==null&&B()>Hj&&(i.flags|=128,a=!0,Ej(c,!1),i.lanes=4194304)}else{if(!a)if(e=Mh(d),e!==null){if(i.flags|=128,a=!0,s=e.updateQueue,s!==null&&(i.updateQueue=s,i.flags|=4),Ej(c,!0),c.tail===null&&c.tailMode==="hidden"&&!d.alternate&&!I)return S(i),null}else 2*B()-c.renderingStartTime>Hj&&s!==1073741824&&(i.flags|=128,a=!0,Ej(c,!1),i.lanes=4194304);c.isBackwards?(d.sibling=i.child,i.child=d):(s=c.last,s!==null?s.sibling=d:i.child=d,c.last=d)}return c.tail!==null?(i=c.tail,c.rendering=i,c.tail=i.sibling,c.renderingStartTime=B(),i.sibling=null,s=M.current,G(M,a?s&1|2:s&1),i):(S(i),null);case 22:case 23:return Ij(),a=i.memoizedState!==null,e!==null&&e.memoizedState!==null!==a&&(i.flags|=8192),a&&i.mode&1?gj&1073741824&&(S(i),i.subtreeFlags&6&&(i.flags|=8192)):S(i),null;case 24:return null;case 25:return null}throw Error(p(156,i.tag))}function Jj(e,i){switch(wg(i),i.tag){case 1:return Zf(i.type)&&$f(),e=i.flags,e&65536?(i.flags=e&-65537|128,i):null;case 3:return Jh(),E(Wf),E(H),Oh(),e=i.flags,e&65536&&!(e&128)?(i.flags=e&-65537|128,i):null;case 5:return Lh(i),null;case 13:if(E(M),e=i.memoizedState,e!==null&&e.dehydrated!==null){if(i.alternate===null)throw Error(p(340));Ig()}return e=i.flags,e&65536?(i.flags=e&-65537|128,i):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(i.type._context),null;case 22:case 23:return Ij(),null;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=typeof WeakSet=="function"?WeakSet:Set,V=null;function Mj(e,i){var s=e.ref;if(s!==null)if(typeof s=="function")try{s(null)}catch(a){W(e,i,a)}else s.current=null}function Nj(e,i,s){try{s()}catch(a){W(e,i,a)}}var Oj=!1;function Pj(e,i){if(Cf=dd,e=Me(),Ne(e)){if("selectionStart"in e)var s={start:e.selectionStart,end:e.selectionEnd};else e:{s=(s=e.ownerDocument)&&s.defaultView||window;var a=s.getSelection&&s.getSelection();if(a&&a.rangeCount!==0){s=a.anchorNode;var o=a.anchorOffset,c=a.focusNode;a=a.focusOffset;try{s.nodeType,c.nodeType}catch{s=null;break e}var d=0,g=-1,_=-1,b=0,j=0,nt=e,tt=null;t:for(;;){for(var at;nt!==s||o!==0&&nt.nodeType!==3||(g=d+o),nt!==c||a!==0&&nt.nodeType!==3||(_=d+a),nt.nodeType===3&&(d+=nt.nodeValue.length),(at=nt.firstChild)!==null;)tt=nt,nt=at;for(;;){if(nt===e)break t;if(tt===s&&++b===o&&(g=d),tt===c&&++j===a&&(_=d),(at=nt.nextSibling)!==null)break;nt=tt,tt=nt.parentNode}nt=at}s=g===-1||_===-1?null:{start:g,end:_}}else s=null}s=s||{start:0,end:0}}else s=null;for(Df={focusedElem:e,selectionRange:s},dd=!1,V=i;V!==null;)if(i=V,e=i.child,(i.subtreeFlags&1028)!==0&&e!==null)e.return=i,V=e;else for(;V!==null;){i=V;try{var it=i.alternate;if(i.flags&1024)switch(i.tag){case 0:case 11:case 15:break;case 1:if(it!==null){var rt=it.memoizedProps,ut=it.memoizedState,$=i.stateNode,et=$.getSnapshotBeforeUpdate(i.elementType===i.type?rt:Lg(i.type,rt),ut);$.__reactInternalSnapshotBeforeUpdate=et}break;case 3:var _e=i.stateNode.containerInfo;_e.nodeType===1?_e.textContent="":_e.nodeType===9&&_e.documentElement&&_e.removeChild(_e.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163))}}catch(st){W(i,i.return,st)}if(e=i.sibling,e!==null){e.return=i.return,V=e;break}V=i.return}return it=Oj,Oj=!1,it}function Qj(e,i,s){var a=i.updateQueue;if(a=a!==null?a.lastEffect:null,a!==null){var o=a=a.next;do{if((o.tag&e)===e){var c=o.destroy;o.destroy=void 0,c!==void 0&&Nj(i,s,c)}o=o.next}while(o!==a)}}function Rj(e,i){if(i=i.updateQueue,i=i!==null?i.lastEffect:null,i!==null){var s=i=i.next;do{if((s.tag&e)===e){var a=s.create;s.destroy=a()}s=s.next}while(s!==i)}}function Sj(e){var i=e.ref;if(i!==null){var s=e.stateNode;switch(e.tag){case 5:e=s;break;default:e=s}typeof i=="function"?i(e):i.current=e}}function Tj(e){var i=e.alternate;i!==null&&(e.alternate=null,Tj(i)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(i=e.stateNode,i!==null&&(delete i[Of],delete i[Pf],delete i[of],delete i[Qf],delete i[Rf])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Uj(e){return e.tag===5||e.tag===3||e.tag===4}function Vj(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Uj(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Wj(e,i,s){var a=e.tag;if(a===5||a===6)e=e.stateNode,i?s.nodeType===8?s.parentNode.insertBefore(e,i):s.insertBefore(e,i):(s.nodeType===8?(i=s.parentNode,i.insertBefore(e,s)):(i=s,i.appendChild(e)),s=s._reactRootContainer,s!=null||i.onclick!==null||(i.onclick=Bf));else if(a!==4&&(e=e.child,e!==null))for(Wj(e,i,s),e=e.sibling;e!==null;)Wj(e,i,s),e=e.sibling}function Xj(e,i,s){var a=e.tag;if(a===5||a===6)e=e.stateNode,i?s.insertBefore(e,i):s.appendChild(e);else if(a!==4&&(e=e.child,e!==null))for(Xj(e,i,s),e=e.sibling;e!==null;)Xj(e,i,s),e=e.sibling}var X=null,Yj=!1;function Zj(e,i,s){for(s=s.child;s!==null;)ak(e,i,s),s=s.sibling}function ak(e,i,s){if(lc&&typeof lc.onCommitFiberUnmount=="function")try{lc.onCommitFiberUnmount(kc,s)}catch{}switch(s.tag){case 5:U||Mj(s,i);case 6:var a=X,o=Yj;X=null,Zj(e,i,s),X=a,Yj=o,X!==null&&(Yj?(e=X,s=s.stateNode,e.nodeType===8?e.parentNode.removeChild(s):e.removeChild(s)):X.removeChild(s.stateNode));break;case 18:X!==null&&(Yj?(e=X,s=s.stateNode,e.nodeType===8?Kf(e.parentNode,s):e.nodeType===1&&Kf(e,s),bd(e)):Kf(X,s.stateNode));break;case 4:a=X,o=Yj,X=s.stateNode.containerInfo,Yj=!0,Zj(e,i,s),X=a,Yj=o;break;case 0:case 11:case 14:case 15:if(!U&&(a=s.updateQueue,a!==null&&(a=a.lastEffect,a!==null))){o=a=a.next;do{var c=o,d=c.destroy;c=c.tag,d!==void 0&&(c&2||c&4)&&Nj(s,i,d),o=o.next}while(o!==a)}Zj(e,i,s);break;case 1:if(!U&&(Mj(s,i),a=s.stateNode,typeof a.componentWillUnmount=="function"))try{a.props=s.memoizedProps,a.state=s.memoizedState,a.componentWillUnmount()}catch(g){W(s,i,g)}Zj(e,i,s);break;case 21:Zj(e,i,s);break;case 22:s.mode&1?(U=(a=U)||s.memoizedState!==null,Zj(e,i,s),U=a):Zj(e,i,s);break;default:Zj(e,i,s)}}function bk(e){var i=e.updateQueue;if(i!==null){e.updateQueue=null;var s=e.stateNode;s===null&&(s=e.stateNode=new Lj),i.forEach(function(a){var o=ck.bind(null,e,a);s.has(a)||(s.add(a),a.then(o,o))})}}function dk(e,i){var s=i.deletions;if(s!==null)for(var a=0;a<s.length;a++){var o=s[a];try{var c=e,d=i,g=d;e:for(;g!==null;){switch(g.tag){case 5:X=g.stateNode,Yj=!1;break e;case 3:X=g.stateNode.containerInfo,Yj=!0;break e;case 4:X=g.stateNode.containerInfo,Yj=!0;break e}g=g.return}if(X===null)throw Error(p(160));ak(c,d,o),X=null,Yj=!1;var _=o.alternate;_!==null&&(_.return=null),o.return=null}catch(b){W(o,i,b)}}if(i.subtreeFlags&12854)for(i=i.child;i!==null;)ek(i,e),i=i.sibling}function ek(e,i){var s=e.alternate,a=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(dk(i,e),fk(e),a&4){try{Qj(3,e,e.return),Rj(3,e)}catch(rt){W(e,e.return,rt)}try{Qj(5,e,e.return)}catch(rt){W(e,e.return,rt)}}break;case 1:dk(i,e),fk(e),a&512&&s!==null&&Mj(s,s.return);break;case 5:if(dk(i,e),fk(e),a&512&&s!==null&&Mj(s,s.return),e.flags&32){var o=e.stateNode;try{ob(o,"")}catch(rt){W(e,e.return,rt)}}if(a&4&&(o=e.stateNode,o!=null)){var c=e.memoizedProps,d=s!==null?s.memoizedProps:c,g=e.type,_=e.updateQueue;if(e.updateQueue=null,_!==null)try{g==="input"&&c.type==="radio"&&c.name!=null&&ab(o,c),vb(g,d);var b=vb(g,c);for(d=0;d<_.length;d+=2){var j=_[d],nt=_[d+1];j==="style"?sb(o,nt):j==="dangerouslySetInnerHTML"?nb(o,nt):j==="children"?ob(o,nt):ta(o,j,nt,b)}switch(g){case"input":bb(o,c);break;case"textarea":ib(o,c);break;case"select":var tt=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!c.multiple;var at=c.value;at!=null?fb(o,!!c.multiple,at,!1):tt!==!!c.multiple&&(c.defaultValue!=null?fb(o,!!c.multiple,c.defaultValue,!0):fb(o,!!c.multiple,c.multiple?[]:"",!1))}o[Pf]=c}catch(rt){W(e,e.return,rt)}}break;case 6:if(dk(i,e),fk(e),a&4){if(e.stateNode===null)throw Error(p(162));o=e.stateNode,c=e.memoizedProps;try{o.nodeValue=c}catch(rt){W(e,e.return,rt)}}break;case 3:if(dk(i,e),fk(e),a&4&&s!==null&&s.memoizedState.isDehydrated)try{bd(i.containerInfo)}catch(rt){W(e,e.return,rt)}break;case 4:dk(i,e),fk(e);break;case 13:dk(i,e),fk(e),o=e.child,o.flags&8192&&(c=o.memoizedState!==null,o.stateNode.isHidden=c,!c||o.alternate!==null&&o.alternate.memoizedState!==null||(gk=B())),a&4&&bk(e);break;case 22:if(j=s!==null&&s.memoizedState!==null,e.mode&1?(U=(b=U)||j,dk(i,e),U=b):dk(i,e),fk(e),a&8192){if(b=e.memoizedState!==null,(e.stateNode.isHidden=b)&&!j&&e.mode&1)for(V=e,j=e.child;j!==null;){for(nt=V=j;V!==null;){switch(tt=V,at=tt.child,tt.tag){case 0:case 11:case 14:case 15:Qj(4,tt,tt.return);break;case 1:Mj(tt,tt.return);var it=tt.stateNode;if(typeof it.componentWillUnmount=="function"){a=tt,s=tt.return;try{i=a,it.props=i.memoizedProps,it.state=i.memoizedState,it.componentWillUnmount()}catch(rt){W(a,s,rt)}}break;case 5:Mj(tt,tt.return);break;case 22:if(tt.memoizedState!==null){hk(nt);continue}}at!==null?(at.return=tt,V=at):hk(nt)}j=j.sibling}e:for(j=null,nt=e;;){if(nt.tag===5){if(j===null){j=nt;try{o=nt.stateNode,b?(c=o.style,typeof c.setProperty=="function"?c.setProperty("display","none","important"):c.display="none"):(g=nt.stateNode,_=nt.memoizedProps.style,d=_!=null&&_.hasOwnProperty("display")?_.display:null,g.style.display=rb("display",d))}catch(rt){W(e,e.return,rt)}}}else if(nt.tag===6){if(j===null)try{nt.stateNode.nodeValue=b?"":nt.memoizedProps}catch(rt){W(e,e.return,rt)}}else if((nt.tag!==22&&nt.tag!==23||nt.memoizedState===null||nt===e)&&nt.child!==null){nt.child.return=nt,nt=nt.child;continue}if(nt===e)break e;for(;nt.sibling===null;){if(nt.return===null||nt.return===e)break e;j===nt&&(j=null),nt=nt.return}j===nt&&(j=null),nt.sibling.return=nt.return,nt=nt.sibling}}break;case 19:dk(i,e),fk(e),a&4&&bk(e);break;case 21:break;default:dk(i,e),fk(e)}}function fk(e){var i=e.flags;if(i&2){try{e:{for(var s=e.return;s!==null;){if(Uj(s)){var a=s;break e}s=s.return}throw Error(p(160))}switch(a.tag){case 5:var o=a.stateNode;a.flags&32&&(ob(o,""),a.flags&=-33);var c=Vj(e);Xj(e,c,o);break;case 3:case 4:var d=a.stateNode.containerInfo,g=Vj(e);Wj(e,g,d);break;default:throw Error(p(161))}}catch(_){W(e,e.return,_)}e.flags&=-3}i&4096&&(e.flags&=-4097)}function ik(e,i,s){V=e,jk(e)}function jk(e,i,s){for(var a=(e.mode&1)!==0;V!==null;){var o=V,c=o.child;if(o.tag===22&&a){var d=o.memoizedState!==null||Kj;if(!d){var g=o.alternate,_=g!==null&&g.memoizedState!==null||U;g=Kj;var b=U;if(Kj=d,(U=_)&&!b)for(V=o;V!==null;)d=V,_=d.child,d.tag===22&&d.memoizedState!==null?kk(o):_!==null?(_.return=d,V=_):kk(o);for(;c!==null;)V=c,jk(c),c=c.sibling;V=o,Kj=g,U=b}lk(e)}else o.subtreeFlags&8772&&c!==null?(c.return=o,V=c):lk(e)}}function lk(e){for(;V!==null;){var i=V;if(i.flags&8772){var s=i.alternate;try{if(i.flags&8772)switch(i.tag){case 0:case 11:case 15:U||Rj(5,i);break;case 1:var a=i.stateNode;if(i.flags&4&&!U)if(s===null)a.componentDidMount();else{var o=i.elementType===i.type?s.memoizedProps:Lg(i.type,s.memoizedProps);a.componentDidUpdate(o,s.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}var c=i.updateQueue;c!==null&&ih(i,c,a);break;case 3:var d=i.updateQueue;if(d!==null){if(s=null,i.child!==null)switch(i.child.tag){case 5:s=i.child.stateNode;break;case 1:s=i.child.stateNode}ih(i,d,s)}break;case 5:var g=i.stateNode;if(s===null&&i.flags&4){s=g;var _=i.memoizedProps;switch(i.type){case"button":case"input":case"select":case"textarea":_.autoFocus&&s.focus();break;case"img":_.src&&(s.src=_.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(i.memoizedState===null){var b=i.alternate;if(b!==null){var j=b.memoizedState;if(j!==null){var nt=j.dehydrated;nt!==null&&bd(nt)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(p(163))}U||i.flags&512&&Sj(i)}catch(tt){W(i,i.return,tt)}}if(i===e){V=null;break}if(s=i.sibling,s!==null){s.return=i.return,V=s;break}V=i.return}}function hk(e){for(;V!==null;){var i=V;if(i===e){V=null;break}var s=i.sibling;if(s!==null){s.return=i.return,V=s;break}V=i.return}}function kk(e){for(;V!==null;){var i=V;try{switch(i.tag){case 0:case 11:case 15:var s=i.return;try{Rj(4,i)}catch(_){W(i,s,_)}break;case 1:var a=i.stateNode;if(typeof a.componentDidMount=="function"){var o=i.return;try{a.componentDidMount()}catch(_){W(i,o,_)}}var c=i.return;try{Sj(i)}catch(_){W(i,c,_)}break;case 5:var d=i.return;try{Sj(i)}catch(_){W(i,d,_)}}}catch(_){W(i,i.return,_)}if(i===e){V=null;break}var g=i.sibling;if(g!==null){g.return=i.return,V=g;break}V=i.return}}var mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=1/0,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return K&6?B():Bk!==-1?Bk:Bk=B()}function lh(e){return e.mode&1?K&2&&Z!==0?Z&-Z:Kg.transition!==null?(Ck===0&&(Ck=yc()),Ck):(e=C,e!==0||(e=window.event,e=e===void 0?16:jd(e.type)),e):1}function mh(e,i,s,a){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(e,s,a),(!(K&2)||e!==R)&&(e===R&&(!(K&2)&&(rk|=s),T===4&&Dk(e,Z)),Ek(e,a),s===1&&K===0&&!(i.mode&1)&&(Hj=B()+500,fg&&jg()))}function Ek(e,i){var s=e.callbackNode;wc(e,i);var a=uc(e,e===R?Z:0);if(a===0)s!==null&&bc(s),e.callbackNode=null,e.callbackPriority=0;else if(i=a&-a,e.callbackPriority!==i){if(s!=null&&bc(s),i===1)e.tag===0?ig(Fk.bind(null,e)):hg(Fk.bind(null,e)),Jf(function(){!(K&6)&&jg()}),s=null;else{switch(Dc(a)){case 1:s=fc;break;case 4:s=gc;break;case 16:s=hc;break;case 536870912:s=jc;break;default:s=hc}s=Gk(s,Hk.bind(null,e))}e.callbackPriority=i,e.callbackNode=s}}function Hk(e,i){if(Bk=-1,Ck=0,K&6)throw Error(p(327));var s=e.callbackNode;if(Ik()&&e.callbackNode!==s)return null;var a=uc(e,e===R?Z:0);if(a===0)return null;if(a&30||a&e.expiredLanes||i)i=Jk(e,a);else{i=a;var o=K;K|=2;var c=Kk();(R!==e||Z!==i)&&(vk=null,Hj=B()+500,Lk(e,i));do try{Mk();break}catch(g){Nk(e,g)}while(1);Qg(),nk.current=c,K=o,Y!==null?i=0:(R=null,Z=0,i=T)}if(i!==0){if(i===2&&(o=xc(e),o!==0&&(a=o,i=Ok(e,o))),i===1)throw s=qk,Lk(e,0),Dk(e,a),Ek(e,B()),s;if(i===6)Dk(e,a);else{if(o=e.current.alternate,!(a&30)&&!Pk(o)&&(i=Jk(e,a),i===2&&(c=xc(e),c!==0&&(a=c,i=Ok(e,c))),i===1))throw s=qk,Lk(e,0),Dk(e,a),Ek(e,B()),s;switch(e.finishedWork=o,e.finishedLanes=a,i){case 0:case 1:throw Error(p(345));case 2:Qk(e,uk,vk);break;case 3:if(Dk(e,a),(a&130023424)===a&&(i=gk+500-B(),10<i)){if(uc(e,0)!==0)break;if(o=e.suspendedLanes,(o&a)!==a){L(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Ff(Qk.bind(null,e,uk,vk),i);break}Qk(e,uk,vk);break;case 4:if(Dk(e,a),(a&4194240)===a)break;for(i=e.eventTimes,o=-1;0<a;){var d=31-oc(a);c=1<<d,d=i[d],d>o&&(o=d),a&=~c}if(a=o,a=B()-a,a=(120>a?120:480>a?480:1080>a?1080:1920>a?1920:3e3>a?3e3:4320>a?4320:1960*mk(a/1960))-a,10<a){e.timeoutHandle=Ff(Qk.bind(null,e,uk,vk),a);break}Qk(e,uk,vk);break;case 5:Qk(e,uk,vk);break;default:throw Error(p(329))}}}return Ek(e,B()),e.callbackNode===s?Hk.bind(null,e):null}function Ok(e,i){var s=tk;return e.current.memoizedState.isDehydrated&&(Lk(e,i).flags|=256),e=Jk(e,i),e!==2&&(i=uk,uk=s,i!==null&&Gj(i)),e}function Gj(e){uk===null?uk=e:uk.push.apply(uk,e)}function Pk(e){for(var i=e;;){if(i.flags&16384){var s=i.updateQueue;if(s!==null&&(s=s.stores,s!==null))for(var a=0;a<s.length;a++){var o=s[a],c=o.getSnapshot;o=o.value;try{if(!He(c(),o))return!1}catch{return!1}}}if(s=i.child,i.subtreeFlags&16384&&s!==null)s.return=i,i=s;else{if(i===e)break;for(;i.sibling===null;){if(i.return===null||i.return===e)return!0;i=i.return}i.sibling.return=i.return,i=i.sibling}}return!0}function Dk(e,i){for(i&=~sk,i&=~rk,e.suspendedLanes|=i,e.pingedLanes&=~i,e=e.expirationTimes;0<i;){var s=31-oc(i),a=1<<s;e[s]=-1,i&=~a}}function Fk(e){if(K&6)throw Error(p(327));Ik();var i=uc(e,0);if(!(i&1))return Ek(e,B()),null;var s=Jk(e,i);if(e.tag!==0&&s===2){var a=xc(e);a!==0&&(i=a,s=Ok(e,a))}if(s===1)throw s=qk,Lk(e,0),Dk(e,i),Ek(e,B()),s;if(s===6)throw Error(p(345));return e.finishedWork=e.current.alternate,e.finishedLanes=i,Qk(e,uk,vk),Ek(e,B()),null}function Rk(e,i){var s=K;K|=1;try{return e(i)}finally{K=s,K===0&&(Hj=B()+500,fg&&jg())}}function Sk(e){xk!==null&&xk.tag===0&&!(K&6)&&Ik();var i=K;K|=1;var s=pk.transition,a=C;try{if(pk.transition=null,C=1,e)return e()}finally{C=a,pk.transition=s,K=i,!(K&6)&&jg()}}function Ij(){gj=fj.current,E(fj)}function Lk(e,i){e.finishedWork=null,e.finishedLanes=0;var s=e.timeoutHandle;if(s!==-1&&(e.timeoutHandle=-1,Gf(s)),Y!==null)for(s=Y.return;s!==null;){var a=s;switch(wg(a),a.tag){case 1:a=a.type.childContextTypes,a!=null&&$f();break;case 3:Jh(),E(Wf),E(H),Oh();break;case 5:Lh(a);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(a.type._context);break;case 22:case 23:Ij()}s=s.return}if(R=e,Y=e=wh(e.current,null),Z=gj=i,T=0,qk=null,sk=rk=hh=0,uk=tk=null,Wg!==null){for(i=0;i<Wg.length;i++)if(s=Wg[i],a=s.interleaved,a!==null){s.interleaved=null;var o=a.next,c=s.pending;if(c!==null){var d=c.next;c.next=o,a.next=d}s.pending=a}Wg=null}return e}function Nk(e,i){do{var s=Y;try{if(Qg(),Ph.current=ai,Sh){for(var a=N.memoizedState;a!==null;){var o=a.queue;o!==null&&(o.pending=null),a=a.next}Sh=!1}if(Rh=0,P=O=N=null,Th=!1,Uh=0,ok.current=null,s===null||s.return===null){T=1,qk=i,Y=null;break}e:{var c=e,d=s.return,g=s,_=i;if(i=Z,g.flags|=32768,_!==null&&typeof _=="object"&&typeof _.then=="function"){var b=_,j=g,nt=j.tag;if(!(j.mode&1)&&(nt===0||nt===11||nt===15)){var tt=j.alternate;tt?(j.updateQueue=tt.updateQueue,j.memoizedState=tt.memoizedState,j.lanes=tt.lanes):(j.updateQueue=null,j.memoizedState=null)}var at=Vi(d);if(at!==null){at.flags&=-257,Wi(at,d,g,c,i),at.mode&1&&Ti(c,b,i),i=at,_=b;var it=i.updateQueue;if(it===null){var rt=new Set;rt.add(_),i.updateQueue=rt}else it.add(_);break e}else{if(!(i&1)){Ti(c,b,i),uj();break e}_=Error(p(426))}}else if(I&&g.mode&1){var ut=Vi(d);if(ut!==null){!(ut.flags&65536)&&(ut.flags|=256),Wi(ut,d,g,c,i),Jg(Ki(_,g));break e}}c=_=Ki(_,g),T!==4&&(T=2),tk===null?tk=[c]:tk.push(c),c=d;do{switch(c.tag){case 3:c.flags|=65536,i&=-i,c.lanes|=i;var $=Oi(c,_,i);fh(c,$);break e;case 1:g=_;var et=c.type,_e=c.stateNode;if(!(c.flags&128)&&(typeof et.getDerivedStateFromError=="function"||_e!==null&&typeof _e.componentDidCatch=="function"&&(Si===null||!Si.has(_e)))){c.flags|=65536,i&=-i,c.lanes|=i;var st=Ri(c,g,i);fh(c,st);break e}}c=c.return}while(c!==null)}Tk(s)}catch(ft){i=ft,Y===s&&s!==null&&(Y=s=s.return);continue}break}while(1)}function Kk(){var e=nk.current;return nk.current=ai,e===null?ai:e}function uj(){(T===0||T===3||T===2)&&(T=4),R===null||!(hh&268435455)&&!(rk&268435455)||Dk(R,Z)}function Jk(e,i){var s=K;K|=2;var a=Kk();(R!==e||Z!==i)&&(vk=null,Lk(e,i));do try{Uk();break}catch(o){Nk(e,o)}while(1);if(Qg(),K=s,nk.current=a,Y!==null)throw Error(p(261));return R=null,Z=0,T}function Uk(){for(;Y!==null;)Vk(Y)}function Mk(){for(;Y!==null&&!cc();)Vk(Y)}function Vk(e){var i=Wk(e.alternate,e,gj);e.memoizedProps=e.pendingProps,i===null?Tk(e):Y=i,ok.current=null}function Tk(e){var i=e;do{var s=i.alternate;if(e=i.return,i.flags&32768){if(s=Jj(s,i),s!==null){s.flags&=32767,Y=s;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{T=6,Y=null;return}}else if(s=Fj(s,i,gj),s!==null){Y=s;return}if(i=i.sibling,i!==null){Y=i;return}Y=i=e}while(i!==null);T===0&&(T=5)}function Qk(e,i,s){var a=C,o=pk.transition;try{pk.transition=null,C=1,Xk(e,i,s,a)}finally{pk.transition=o,C=a}return null}function Xk(e,i,s,a){do Ik();while(xk!==null);if(K&6)throw Error(p(327));s=e.finishedWork;var o=e.finishedLanes;if(s===null)return null;if(e.finishedWork=null,e.finishedLanes=0,s===e.current)throw Error(p(177));e.callbackNode=null,e.callbackPriority=0;var c=s.lanes|s.childLanes;if(Bc(e,c),e===R&&(Y=R=null,Z=0),!(s.subtreeFlags&2064)&&!(s.flags&2064)||wk||(wk=!0,Gk(hc,function(){return Ik(),null})),c=(s.flags&15990)!==0,s.subtreeFlags&15990||c){c=pk.transition,pk.transition=null;var d=C;C=1;var g=K;K|=4,ok.current=null,Pj(e,s),ek(s,e),Oe(Df),dd=!!Cf,Df=Cf=null,e.current=s,ik(s),dc(),K=g,C=d,pk.transition=c}else e.current=s;if(wk&&(wk=!1,xk=e,yk=o),c=e.pendingLanes,c===0&&(Si=null),mc(s.stateNode),Ek(e,B()),i!==null)for(a=e.onRecoverableError,s=0;s<i.length;s++)o=i[s],a(o.value,{componentStack:o.stack,digest:o.digest});if(Pi)throw Pi=!1,e=Qi,Qi=null,e;return yk&1&&e.tag!==0&&Ik(),c=e.pendingLanes,c&1?e===Ak?zk++:(zk=0,Ak=e):zk=0,jg(),null}function Ik(){if(xk!==null){var e=Dc(yk),i=pk.transition,s=C;try{if(pk.transition=null,C=16>e?16:e,xk===null)var a=!1;else{if(e=xk,xk=null,yk=0,K&6)throw Error(p(331));var o=K;for(K|=4,V=e.current;V!==null;){var c=V,d=c.child;if(V.flags&16){var g=c.deletions;if(g!==null){for(var _=0;_<g.length;_++){var b=g[_];for(V=b;V!==null;){var j=V;switch(j.tag){case 0:case 11:case 15:Qj(8,j,c)}var nt=j.child;if(nt!==null)nt.return=j,V=nt;else for(;V!==null;){j=V;var tt=j.sibling,at=j.return;if(Tj(j),j===b){V=null;break}if(tt!==null){tt.return=at,V=tt;break}V=at}}}var it=c.alternate;if(it!==null){var rt=it.child;if(rt!==null){it.child=null;do{var ut=rt.sibling;rt.sibling=null,rt=ut}while(rt!==null)}}V=c}}if(c.subtreeFlags&2064&&d!==null)d.return=c,V=d;else e:for(;V!==null;){if(c=V,c.flags&2048)switch(c.tag){case 0:case 11:case 15:Qj(9,c,c.return)}var $=c.sibling;if($!==null){$.return=c.return,V=$;break e}V=c.return}}var et=e.current;for(V=et;V!==null;){d=V;var _e=d.child;if(d.subtreeFlags&2064&&_e!==null)_e.return=d,V=_e;else e:for(d=et;V!==null;){if(g=V,g.flags&2048)try{switch(g.tag){case 0:case 11:case 15:Rj(9,g)}}catch(ft){W(g,g.return,ft)}if(g===d){V=null;break e}var st=g.sibling;if(st!==null){st.return=g.return,V=st;break e}V=g.return}}if(K=o,jg(),lc&&typeof lc.onPostCommitFiberRoot=="function")try{lc.onPostCommitFiberRoot(kc,e)}catch{}a=!0}return a}finally{C=s,pk.transition=i}}return!1}function Yk(e,i,s){i=Ki(s,i),i=Oi(e,i,1),e=dh(e,i,1),i=L(),e!==null&&(Ac(e,1,i),Ek(e,i))}function W(e,i,s){if(e.tag===3)Yk(e,e,s);else for(;i!==null;){if(i.tag===3){Yk(i,e,s);break}else if(i.tag===1){var a=i.stateNode;if(typeof i.type.getDerivedStateFromError=="function"||typeof a.componentDidCatch=="function"&&(Si===null||!Si.has(a))){e=Ki(s,e),e=Ri(i,e,1),i=dh(i,e,1),e=L(),i!==null&&(Ac(i,1,e),Ek(i,e));break}}i=i.return}}function Ui(e,i,s){var a=e.pingCache;a!==null&&a.delete(i),i=L(),e.pingedLanes|=e.suspendedLanes&s,R===e&&(Z&s)===s&&(T===4||T===3&&(Z&130023424)===Z&&500>B()-gk?Lk(e,0):sk|=s),Ek(e,i)}function Zk(e,i){i===0&&(e.mode&1?(i=sc,sc<<=1,!(sc&130023424)&&(sc=4194304)):i=1);var s=L();e=Zg(e,i),e!==null&&(Ac(e,i,s),Ek(e,s))}function vj(e){var i=e.memoizedState,s=0;i!==null&&(s=i.retryLane),Zk(e,s)}function ck(e,i){var s=0;switch(e.tag){case 13:var a=e.stateNode,o=e.memoizedState;o!==null&&(s=o.retryLane);break;case 19:a=e.stateNode;break;default:throw Error(p(314))}a!==null&&a.delete(i),Zk(e,s)}var Wk;Wk=function(e,i,s){if(e!==null)if(e.memoizedProps!==i.pendingProps||Wf.current)Ug=!0;else{if(!(e.lanes&s)&&!(i.flags&128))return Ug=!1,zj(e,i,s);Ug=!!(e.flags&131072)}else Ug=!1,I&&i.flags&1048576&&ug(i,ng,i.index);switch(i.lanes=0,i.tag){case 2:var a=i.type;jj(e,i),e=i.pendingProps;var o=Yf(i,H.current);Tg(i,s),o=Xh(null,i,a,e,o,s);var c=bi();return i.flags|=1,typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0?(i.tag=1,i.memoizedState=null,i.updateQueue=null,Zf(a)?(c=!0,cg(i)):c=!1,i.memoizedState=o.state!==null&&o.state!==void 0?o.state:null,ah(i),o.updater=nh,i.stateNode=o,o._reactInternals=i,rh(i,a,e,s),i=kj(null,i,a,!0,c,s)):(i.tag=0,I&&c&&vg(i),Yi(null,i,o,s),i=i.child),i;case 16:a=i.elementType;e:{switch(jj(e,i),e=i.pendingProps,o=a._init,a=o(a._payload),i.type=a,o=i.tag=$k(a),e=Lg(a,e),o){case 0:i=dj(null,i,a,e,s);break e;case 1:i=ij(null,i,a,e,s);break e;case 11:i=Zi(null,i,a,e,s);break e;case 14:i=aj(null,i,a,Lg(a.type,e),s);break e}throw Error(p(306,a,""))}return i;case 0:return a=i.type,o=i.pendingProps,o=i.elementType===a?o:Lg(a,o),dj(e,i,a,o,s);case 1:return a=i.type,o=i.pendingProps,o=i.elementType===a?o:Lg(a,o),ij(e,i,a,o,s);case 3:e:{if(lj(i),e===null)throw Error(p(387));a=i.pendingProps,c=i.memoizedState,o=c.element,bh(e,i),gh(i,a,null,s);var d=i.memoizedState;if(a=d.element,c.isDehydrated)if(c={element:a,isDehydrated:!1,cache:d.cache,pendingSuspenseBoundaries:d.pendingSuspenseBoundaries,transitions:d.transitions},i.updateQueue.baseState=c,i.memoizedState=c,i.flags&256){o=Ki(Error(p(423)),i),i=mj(e,i,a,s,o);break e}else if(a!==o){o=Ki(Error(p(424)),i),i=mj(e,i,a,s,o);break e}else for(yg=Lf(i.stateNode.containerInfo.firstChild),xg=i,I=!0,zg=null,s=Ch(i,null,a,s),i.child=s;s;)s.flags=s.flags&-3|4096,s=s.sibling;else{if(Ig(),a===o){i=$i(e,i,s);break e}Yi(e,i,a,s)}i=i.child}return i;case 5:return Kh(i),e===null&&Eg(i),a=i.type,o=i.pendingProps,c=e!==null?e.memoizedProps:null,d=o.children,Ef(a,o)?d=null:c!==null&&Ef(a,c)&&(i.flags|=32),hj(e,i),Yi(e,i,d,s),i.child;case 6:return e===null&&Eg(i),null;case 13:return pj(e,i,s);case 4:return Ih(i,i.stateNode.containerInfo),a=i.pendingProps,e===null?i.child=Bh(i,null,a,s):Yi(e,i,a,s),i.child;case 11:return a=i.type,o=i.pendingProps,o=i.elementType===a?o:Lg(a,o),Zi(e,i,a,o,s);case 7:return Yi(e,i,i.pendingProps,s),i.child;case 8:return Yi(e,i,i.pendingProps.children,s),i.child;case 12:return Yi(e,i,i.pendingProps.children,s),i.child;case 10:e:{if(a=i.type._context,o=i.pendingProps,c=i.memoizedProps,d=o.value,G(Mg,a._currentValue),a._currentValue=d,c!==null)if(He(c.value,d)){if(c.children===o.children&&!Wf.current){i=$i(e,i,s);break e}}else for(c=i.child,c!==null&&(c.return=i);c!==null;){var g=c.dependencies;if(g!==null){d=c.child;for(var _=g.firstContext;_!==null;){if(_.context===a){if(c.tag===1){_=ch(-1,s&-s),_.tag=2;var b=c.updateQueue;if(b!==null){b=b.shared;var j=b.pending;j===null?_.next=_:(_.next=j.next,j.next=_),b.pending=_}}c.lanes|=s,_=c.alternate,_!==null&&(_.lanes|=s),Sg(c.return,s,i),g.lanes|=s;break}_=_.next}}else if(c.tag===10)d=c.type===i.type?null:c.child;else if(c.tag===18){if(d=c.return,d===null)throw Error(p(341));d.lanes|=s,g=d.alternate,g!==null&&(g.lanes|=s),Sg(d,s,i),d=c.sibling}else d=c.child;if(d!==null)d.return=c;else for(d=c;d!==null;){if(d===i){d=null;break}if(c=d.sibling,c!==null){c.return=d.return,d=c;break}d=d.return}c=d}Yi(e,i,o.children,s),i=i.child}return i;case 9:return o=i.type,a=i.pendingProps.children,Tg(i,s),o=Vg(o),a=a(o),i.flags|=1,Yi(e,i,a,s),i.child;case 14:return a=i.type,o=Lg(a,i.pendingProps),o=Lg(a.type,o),aj(e,i,a,o,s);case 15:return cj(e,i,i.type,i.pendingProps,s);case 17:return a=i.type,o=i.pendingProps,o=i.elementType===a?o:Lg(a,o),jj(e,i),i.tag=1,Zf(a)?(e=!0,cg(i)):e=!1,Tg(i,s),ph(i,a,o),rh(i,a,o,s),kj(null,i,a,!0,e,s);case 19:return yj(e,i,s);case 22:return ej(e,i,s)}throw Error(p(156,i.tag))};function Gk(e,i){return ac(e,i)}function al(e,i,s,a){this.tag=e,this.key=s,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=i,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=a,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Bg(e,i,s,a){return new al(e,i,s,a)}function bj(e){return e=e.prototype,!(!e||!e.isReactComponent)}function $k(e){if(typeof e=="function")return bj(e)?1:0;if(e!=null){if(e=e.$$typeof,e===Da)return 11;if(e===Ga)return 14}return 2}function wh(e,i){var s=e.alternate;return s===null?(s=Bg(e.tag,i,e.key,e.mode),s.elementType=e.elementType,s.type=e.type,s.stateNode=e.stateNode,s.alternate=e,e.alternate=s):(s.pendingProps=i,s.type=e.type,s.flags=0,s.subtreeFlags=0,s.deletions=null),s.flags=e.flags&14680064,s.childLanes=e.childLanes,s.lanes=e.lanes,s.child=e.child,s.memoizedProps=e.memoizedProps,s.memoizedState=e.memoizedState,s.updateQueue=e.updateQueue,i=e.dependencies,s.dependencies=i===null?null:{lanes:i.lanes,firstContext:i.firstContext},s.sibling=e.sibling,s.index=e.index,s.ref=e.ref,s}function yh(e,i,s,a,o,c){var d=2;if(a=e,typeof e=="function")bj(e)&&(d=1);else if(typeof e=="string")d=5;else e:switch(e){case ya:return Ah(s.children,o,c,i);case za:d=8,o|=8;break;case Aa:return e=Bg(12,s,i,o|2),e.elementType=Aa,e.lanes=c,e;case Ea:return e=Bg(13,s,i,o),e.elementType=Ea,e.lanes=c,e;case Fa:return e=Bg(19,s,i,o),e.elementType=Fa,e.lanes=c,e;case Ia:return qj(s,o,c,i);default:if(typeof e=="object"&&e!==null)switch(e.$$typeof){case Ba:d=10;break e;case Ca:d=9;break e;case Da:d=11;break e;case Ga:d=14;break e;case Ha:d=16,a=null;break e}throw Error(p(130,e==null?e:typeof e,""))}return i=Bg(d,s,i,o),i.elementType=e,i.type=a,i.lanes=c,i}function Ah(e,i,s,a){return e=Bg(7,e,a,i),e.lanes=s,e}function qj(e,i,s,a){return e=Bg(22,e,a,i),e.elementType=Ia,e.lanes=s,e.stateNode={isHidden:!1},e}function xh(e,i,s){return e=Bg(6,e,null,i),e.lanes=s,e}function zh(e,i,s){return i=Bg(4,e.children!==null?e.children:[],e.key,i),i.lanes=s,i.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},i}function bl(e,i,s,a,o){this.tag=i,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=zc(0),this.expirationTimes=zc(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zc(0),this.identifierPrefix=a,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function cl(e,i,s,a,o,c,d,g,_){return e=new bl(e,i,s,g,_),i===1?(i=1,c===!0&&(i|=8)):i=0,c=Bg(3,null,null,i),e.current=c,c.stateNode=e,c.memoizedState={element:a,isDehydrated:s,cache:null,transitions:null,pendingSuspenseBoundaries:null},ah(c),e}function dl(e,i,s){var a=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:wa,key:a==null?null:""+a,children:e,containerInfo:i,implementation:s}}function el(e){if(!e)return Vf;e=e._reactInternals;e:{if(Vb(e)!==e||e.tag!==1)throw Error(p(170));var i=e;do{switch(i.tag){case 3:i=i.stateNode.context;break e;case 1:if(Zf(i.type)){i=i.stateNode.__reactInternalMemoizedMergedChildContext;break e}}i=i.return}while(i!==null);throw Error(p(171))}if(e.tag===1){var s=e.type;if(Zf(s))return bg(e,s,i)}return i}function fl(e,i,s,a,o,c,d,g,_){return e=cl(s,a,!0,e,o,c,d,g,_),e.context=el(null),s=e.current,a=L(),o=lh(s),c=ch(a,o),c.callback=i??null,dh(s,c,o),e.current.lanes=o,Ac(e,o,a),Ek(e,a),e}function gl(e,i,s,a){var o=i.current,c=L(),d=lh(o);return s=el(s),i.context===null?i.context=s:i.pendingContext=s,i=ch(c,d),i.payload={element:e},a=a===void 0?null:a,a!==null&&(i.callback=a),e=dh(o,i,d),e!==null&&(mh(e,o,d,c),eh(e,o,d)),d}function hl(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function il(e,i){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var s=e.retryLane;e.retryLane=s!==0&&s<i?s:i}}function jl(e,i){il(e,i),(e=e.alternate)&&il(e,i)}function kl(){return null}var ll=typeof reportError=="function"?reportError:function(e){console.error(e)};function ml(e){this._internalRoot=e}nl.prototype.render=ml.prototype.render=function(e){var i=this._internalRoot;if(i===null)throw Error(p(409));gl(e,i,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var i=e.containerInfo;Sk(function(){gl(null,e,null,null)}),i[uf]=null}};function nl(e){this._internalRoot=e}nl.prototype.unstable_scheduleHydration=function(e){if(e){var i=Hc();e={blockedOn:null,target:e,priority:i};for(var s=0;s<Qc.length&&i!==0&&i<Qc[s].priority;s++);Qc.splice(s,0,e),s===0&&Vc(e)}};function ol(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function pl(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==" react-mount-point-unstable "))}function ql(){}function rl(e,i,s,a,o){if(o){if(typeof a=="function"){var c=a;a=function(){var b=hl(d);c.call(b)}}var d=fl(i,a,e,0,null,!1,!1,"",ql);return e._reactRootContainer=d,e[uf]=d.current,sf(e.nodeType===8?e.parentNode:e),Sk(),d}for(;o=e.lastChild;)e.removeChild(o);if(typeof a=="function"){var g=a;a=function(){var b=hl(_);g.call(b)}}var _=cl(e,0,!1,null,null,!1,!1,"",ql);return e._reactRootContainer=_,e[uf]=_.current,sf(e.nodeType===8?e.parentNode:e),Sk(function(){gl(i,_,s,a)}),_}function sl(e,i,s,a,o){var c=s._reactRootContainer;if(c){var d=c;if(typeof o=="function"){var g=o;o=function(){var _=hl(d);g.call(_)}}gl(i,d,e,o)}else d=rl(s,i,e,o,a);return hl(d)}Ec=function(e){switch(e.tag){case 3:var i=e.stateNode;if(i.current.memoizedState.isDehydrated){var s=tc(i.pendingLanes);s!==0&&(Cc(i,s|1),Ek(i,B()),!(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var a=Zg(e,1);if(a!==null){var o=L();mh(a,e,1,o)}}),jl(e,1)}};Fc=function(e){if(e.tag===13){var i=Zg(e,134217728);if(i!==null){var s=L();mh(i,e,134217728,s)}jl(e,134217728)}};Gc=function(e){if(e.tag===13){var i=lh(e),s=Zg(e,i);if(s!==null){var a=L();mh(s,e,i,a)}jl(e,i)}};Hc=function(){return C};Ic=function(e,i){var s=C;try{return C=e,i()}finally{C=s}};yb=function(e,i,s){switch(i){case"input":if(bb(e,s),i=s.name,s.type==="radio"&&i!=null){for(s=e;s.parentNode;)s=s.parentNode;for(s=s.querySelectorAll("input[name="+JSON.stringify(""+i)+'][type="radio"]'),i=0;i<s.length;i++){var a=s[i];if(a!==e&&a.form===e.form){var o=Db(a);if(!o)throw Error(p(90));Wa(a),bb(a,o)}}}break;case"textarea":ib(e,s);break;case"select":i=s.value,i!=null&&fb(e,!!s.multiple,i,!1)}};Gb=Rk;Hb=Sk;var tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=Zb(e),e===null?null:e.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||kl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch{}}reactDom_production_min.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;reactDom_production_min.createPortal=function(e,i){var s=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!ol(i))throw Error(p(200));return dl(e,i,null,s)};reactDom_production_min.createRoot=function(e,i){if(!ol(e))throw Error(p(299));var s=!1,a="",o=ll;return i!=null&&(i.unstable_strictMode===!0&&(s=!0),i.identifierPrefix!==void 0&&(a=i.identifierPrefix),i.onRecoverableError!==void 0&&(o=i.onRecoverableError)),i=cl(e,1,!1,null,null,s,!1,a,o),e[uf]=i.current,sf(e.nodeType===8?e.parentNode:e),new ml(i)};reactDom_production_min.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var i=e._reactInternals;if(i===void 0)throw typeof e.render=="function"?Error(p(188)):(e=Object.keys(e).join(","),Error(p(268,e)));return e=Zb(i),e=e===null?null:e.stateNode,e};reactDom_production_min.flushSync=function(e){return Sk(e)};reactDom_production_min.hydrate=function(e,i,s){if(!pl(i))throw Error(p(200));return sl(null,e,i,!0,s)};reactDom_production_min.hydrateRoot=function(e,i,s){if(!ol(e))throw Error(p(405));var a=s!=null&&s.hydratedSources||null,o=!1,c="",d=ll;if(s!=null&&(s.unstable_strictMode===!0&&(o=!0),s.identifierPrefix!==void 0&&(c=s.identifierPrefix),s.onRecoverableError!==void 0&&(d=s.onRecoverableError)),i=fl(i,null,e,1,s??null,o,!1,c,d),e[uf]=i.current,sf(e),a)for(e=0;e<a.length;e++)s=a[e],o=s._getVersion,o=o(s._source),i.mutableSourceEagerHydrationData==null?i.mutableSourceEagerHydrationData=[s,o]:i.mutableSourceEagerHydrationData.push(s,o);return new nl(i)};reactDom_production_min.render=function(e,i,s){if(!pl(i))throw Error(p(200));return sl(null,e,i,!1,s)};reactDom_production_min.unmountComponentAtNode=function(e){if(!pl(e))throw Error(p(40));return e._reactRootContainer?(Sk(function(){sl(null,null,e,!1,function(){e._reactRootContainer=null,e[uf]=null})}),!0):!1};reactDom_production_min.unstable_batchedUpdates=Rk;reactDom_production_min.unstable_renderSubtreeIntoContainer=function(e,i,s,a){if(!pl(s))throw Error(p(200));if(e==null||e._reactInternals===void 0)throw Error(p(38));return sl(e,i,s,!1,a)};reactDom_production_min.version="18.2.0-next-9e3b772b8-20220608";function checkDCE(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>"u"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!="function"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE)}catch(e){console.error(e)}}checkDCE(),reactDom.exports=reactDom_production_min;var reactDomExports=reactDom.exports;const ReactDOM=getDefaultExportFromCjs(reactDomExports),ReactDOM$1=_mergeNamespaces({__proto__:null,default:ReactDOM},[reactDomExports]);/**
 * @remix-run/router v1.14.2
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function _extends$2(){return _extends$2=Object.assign?Object.assign.bind():function(e){for(var i=1;i<arguments.length;i++){var s=arguments[i];for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a])}return e},_extends$2.apply(this,arguments)}var Action;(function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"})(Action||(Action={}));const PopStateEventType="popstate";function createBrowserHistory(e){e===void 0&&(e={});function i(a,o){let{pathname:c,search:d,hash:g}=a.location;return createLocation("",{pathname:c,search:d,hash:g},o.state&&o.state.usr||null,o.state&&o.state.key||"default")}function s(a,o){return typeof o=="string"?o:createPath(o)}return getUrlBasedHistory(i,s,null,e)}function invariant(e,i){if(e===!1||e===null||typeof e>"u")throw new Error(i)}function warning(e,i){if(!e){typeof console<"u"&&console.warn(i);try{throw new Error(i)}catch{}}}function createKey(){return Math.random().toString(36).substr(2,8)}function getHistoryState(e,i){return{usr:e.state,key:e.key,idx:i}}function createLocation(e,i,s,a){return s===void 0&&(s=null),_extends$2({pathname:typeof e=="string"?e:e.pathname,search:"",hash:""},typeof i=="string"?parsePath(i):i,{state:s,key:i&&i.key||a||createKey()})}function createPath(e){let{pathname:i="/",search:s="",hash:a=""}=e;return s&&s!=="?"&&(i+=s.charAt(0)==="?"?s:"?"+s),a&&a!=="#"&&(i+=a.charAt(0)==="#"?a:"#"+a),i}function parsePath(e){let i={};if(e){let s=e.indexOf("#");s>=0&&(i.hash=e.substr(s),e=e.substr(0,s));let a=e.indexOf("?");a>=0&&(i.search=e.substr(a),e=e.substr(0,a)),e&&(i.pathname=e)}return i}function getUrlBasedHistory(e,i,s,a){a===void 0&&(a={});let{window:o=document.defaultView,v5Compat:c=!1}=a,d=o.history,g=Action.Pop,_=null,b=j();b==null&&(b=0,d.replaceState(_extends$2({},d.state,{idx:b}),""));function j(){return(d.state||{idx:null}).idx}function nt(){g=Action.Pop;let ut=j(),$=ut==null?null:ut-b;b=ut,_&&_({action:g,location:rt.location,delta:$})}function tt(ut,$){g=Action.Push;let et=createLocation(rt.location,ut,$);s&&s(et,ut),b=j()+1;let _e=getHistoryState(et,b),st=rt.createHref(et);try{d.pushState(_e,"",st)}catch(ft){if(ft instanceof DOMException&&ft.name==="DataCloneError")throw ft;o.location.assign(st)}c&&_&&_({action:g,location:rt.location,delta:1})}function at(ut,$){g=Action.Replace;let et=createLocation(rt.location,ut,$);s&&s(et,ut),b=j();let _e=getHistoryState(et,b),st=rt.createHref(et);d.replaceState(_e,"",st),c&&_&&_({action:g,location:rt.location,delta:0})}function it(ut){let $=o.location.origin!=="null"?o.location.origin:o.location.href,et=typeof ut=="string"?ut:createPath(ut);return invariant($,"No window.location.(origin|href) available to create URL for href: "+et),new URL(et,$)}let rt={get action(){return g},get location(){return e(o,d)},listen(ut){if(_)throw new Error("A history only accepts one active listener");return o.addEventListener(PopStateEventType,nt),_=ut,()=>{o.removeEventListener(PopStateEventType,nt),_=null}},createHref(ut){return i(o,ut)},createURL:it,encodeLocation(ut){let $=it(ut);return{pathname:$.pathname,search:$.search,hash:$.hash}},push:tt,replace:at,go(ut){return d.go(ut)}};return rt}var ResultType;(function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"})(ResultType||(ResultType={}));const immutableRouteKeys=new Set(["lazy","caseSensitive","path","id","index","children"]);function isIndexRoute(e){return e.index===!0}function convertRoutesToDataRoutes(e,i,s,a){return s===void 0&&(s=[]),a===void 0&&(a={}),e.map((o,c)=>{let d=[...s,c],g=typeof o.id=="string"?o.id:d.join("-");if(invariant(o.index!==!0||!o.children,"Cannot specify children on an index route"),invariant(!a[g],'Found a route id collision on id "'+g+`".  Route id's must be globally unique within Data Router usages`),isIndexRoute(o)){let _=_extends$2({},o,i(o),{id:g});return a[g]=_,_}else{let _=_extends$2({},o,i(o),{id:g,children:void 0});return a[g]=_,o.children&&(_.children=convertRoutesToDataRoutes(o.children,i,d,a)),_}})}function matchRoutes(e,i,s){s===void 0&&(s="/");let a=typeof i=="string"?parsePath(i):i,o=stripBasename(a.pathname||"/",s);if(o==null)return null;let c=flattenRoutes(e);rankRouteBranches(c);let d=null;for(let g=0;d==null&&g<c.length;++g)d=matchRouteBranch(c[g],safelyDecodeURI(o));return d}function convertRouteMatchToUiMatch(e,i){let{route:s,pathname:a,params:o}=e;return{id:s.id,pathname:a,params:o,data:i[s.id],handle:s.handle}}function flattenRoutes(e,i,s,a){i===void 0&&(i=[]),s===void 0&&(s=[]),a===void 0&&(a="");let o=(c,d,g)=>{let _={relativePath:g===void 0?c.path||"":g,caseSensitive:c.caseSensitive===!0,childrenIndex:d,route:c};_.relativePath.startsWith("/")&&(invariant(_.relativePath.startsWith(a),'Absolute route path "'+_.relativePath+'" nested under path '+('"'+a+'" is not valid. An absolute child route path ')+"must start with the combined path of all its parent routes."),_.relativePath=_.relativePath.slice(a.length));let b=joinPaths([a,_.relativePath]),j=s.concat(_);c.children&&c.children.length>0&&(invariant(c.index!==!0,"Index routes must not have child routes. Please remove "+('all child routes from route path "'+b+'".')),flattenRoutes(c.children,i,j,b)),!(c.path==null&&!c.index)&&i.push({path:b,score:computeScore(b,c.index),routesMeta:j})};return e.forEach((c,d)=>{var g;if(c.path===""||!((g=c.path)!=null&&g.includes("?")))o(c,d);else for(let _ of explodeOptionalSegments(c.path))o(c,d,_)}),i}function explodeOptionalSegments(e){let i=e.split("/");if(i.length===0)return[];let[s,...a]=i,o=s.endsWith("?"),c=s.replace(/\?$/,"");if(a.length===0)return o?[c,""]:[c];let d=explodeOptionalSegments(a.join("/")),g=[];return g.push(...d.map(_=>_===""?c:[c,_].join("/"))),o&&g.push(...d),g.map(_=>e.startsWith("/")&&_===""?"/":_)}function rankRouteBranches(e){e.sort((i,s)=>i.score!==s.score?s.score-i.score:compareIndexes(i.routesMeta.map(a=>a.childrenIndex),s.routesMeta.map(a=>a.childrenIndex)))}const paramRe=/^:[\w-]+$/,dynamicSegmentValue=3,indexRouteValue=2,emptySegmentValue=1,staticSegmentValue=10,splatPenalty=-2,isSplat=e=>e==="*";function computeScore(e,i){let s=e.split("/"),a=s.length;return s.some(isSplat)&&(a+=splatPenalty),i&&(a+=indexRouteValue),s.filter(o=>!isSplat(o)).reduce((o,c)=>o+(paramRe.test(c)?dynamicSegmentValue:c===""?emptySegmentValue:staticSegmentValue),a)}function compareIndexes(e,i){return e.length===i.length&&e.slice(0,-1).every((a,o)=>a===i[o])?e[e.length-1]-i[i.length-1]:0}function matchRouteBranch(e,i){let{routesMeta:s}=e,a={},o="/",c=[];for(let d=0;d<s.length;++d){let g=s[d],_=d===s.length-1,b=o==="/"?i:i.slice(o.length)||"/",j=matchPath({path:g.relativePath,caseSensitive:g.caseSensitive,end:_},b);if(!j)return null;Object.assign(a,j.params);let nt=g.route;c.push({params:a,pathname:joinPaths([o,j.pathname]),pathnameBase:normalizePathname(joinPaths([o,j.pathnameBase])),route:nt}),j.pathnameBase!=="/"&&(o=joinPaths([o,j.pathnameBase]))}return c}function matchPath(e,i){typeof e=="string"&&(e={path:e,caseSensitive:!1,end:!0});let[s,a]=compilePath(e.path,e.caseSensitive,e.end),o=i.match(s);if(!o)return null;let c=o[0],d=c.replace(/(.)\/+$/,"$1"),g=o.slice(1);return{params:a.reduce((b,j,nt)=>{let{paramName:tt,isOptional:at}=j;if(tt==="*"){let rt=g[nt]||"";d=c.slice(0,c.length-rt.length).replace(/(.)\/+$/,"$1")}const it=g[nt];return at&&!it?b[tt]=void 0:b[tt]=safelyDecodeURIComponent(it||"",tt),b},{}),pathname:c,pathnameBase:d,pattern:e}}function compilePath(e,i,s){i===void 0&&(i=!1),s===void 0&&(s=!0),warning(e==="*"||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were '+('"'+e.replace(/\*$/,"/*")+'" because the `*` character must ')+"always follow a `/` in the pattern. To get rid of this warning, "+('please change the route path to "'+e.replace(/\*$/,"/*")+'".'));let a=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^${}|()[\]]/g,"\\$&").replace(/\/:([\w-]+)(\?)?/g,(d,g,_)=>(a.push({paramName:g,isOptional:_!=null}),_?"/?([^\\/]+)?":"/([^\\/]+)"));return e.endsWith("*")?(a.push({paramName:"*"}),o+=e==="*"||e==="/*"?"(.*)$":"(?:\\/(.+)|\\/*)$"):s?o+="\\/*$":e!==""&&e!=="/"&&(o+="(?:(?=\\/|$))"),[new RegExp(o,i?void 0:"i"),a]}function safelyDecodeURI(e){try{return decodeURI(e)}catch(i){return warning(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent '+("encoding ("+i+").")),e}}function safelyDecodeURIComponent(e,i){try{return decodeURIComponent(e)}catch(s){return warning(!1,'The value for the URL param "'+i+'" will not be decoded because'+(' the string "'+e+'" is a malformed URL segment. This is probably')+(" due to a bad percent encoding ("+s+").")),e}}function stripBasename(e,i){if(i==="/")return e;if(!e.toLowerCase().startsWith(i.toLowerCase()))return null;let s=i.endsWith("/")?i.length-1:i.length,a=e.charAt(s);return a&&a!=="/"?null:e.slice(s)||"/"}function resolvePath(e,i){i===void 0&&(i="/");let{pathname:s,search:a="",hash:o=""}=typeof e=="string"?parsePath(e):e;return{pathname:s?s.startsWith("/")?s:resolvePathname(s,i):i,search:normalizeSearch(a),hash:normalizeHash(o)}}function resolvePathname(e,i){let s=i.replace(/\/+$/,"").split("/");return e.split("/").forEach(o=>{o===".."?s.length>1&&s.pop():o!=="."&&s.push(o)}),s.length>1?s.join("/"):"/"}function getInvalidPathError(e,i,s,a){return"Cannot include a '"+e+"' character in a manually specified "+("`to."+i+"` field ["+JSON.stringify(a)+"].  Please separate it out to the ")+("`to."+s+"` field. Alternatively you may provide the full path as ")+'a string in <Link to="..."> and the router will parse it for you.'}function getPathContributingMatches(e){return e.filter((i,s)=>s===0||i.route.path&&i.route.path.length>0)}function getResolveToMatches(e,i){let s=getPathContributingMatches(e);return i?s.map((a,o)=>o===e.length-1?a.pathname:a.pathnameBase):s.map(a=>a.pathnameBase)}function resolveTo(e,i,s,a){a===void 0&&(a=!1);let o;typeof e=="string"?o=parsePath(e):(o=_extends$2({},e),invariant(!o.pathname||!o.pathname.includes("?"),getInvalidPathError("?","pathname","search",o)),invariant(!o.pathname||!o.pathname.includes("#"),getInvalidPathError("#","pathname","hash",o)),invariant(!o.search||!o.search.includes("#"),getInvalidPathError("#","search","hash",o)));let c=e===""||o.pathname==="",d=c?"/":o.pathname,g;if(d==null)g=s;else{let nt=i.length-1;if(!a&&d.startsWith("..")){let tt=d.split("/");for(;tt[0]==="..";)tt.shift(),nt-=1;o.pathname=tt.join("/")}g=nt>=0?i[nt]:"/"}let _=resolvePath(o,g),b=d&&d!=="/"&&d.endsWith("/"),j=(c||d===".")&&s.endsWith("/");return!_.pathname.endsWith("/")&&(b||j)&&(_.pathname+="/"),_}const joinPaths=e=>e.join("/").replace(/\/\/+/g,"/"),normalizePathname=e=>e.replace(/\/+$/,"").replace(/^\/*/,"/"),normalizeSearch=e=>!e||e==="?"?"":e.startsWith("?")?e:"?"+e,normalizeHash=e=>!e||e==="#"?"":e.startsWith("#")?e:"#"+e;class ErrorResponseImpl{constructor(i,s,a,o){o===void 0&&(o=!1),this.status=i,this.statusText=s||"",this.internal=o,a instanceof Error?(this.data=a.toString(),this.error=a):this.data=a}}function isRouteErrorResponse(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.internal=="boolean"&&"data"in e}const validMutationMethodsArr=["post","put","patch","delete"],validMutationMethods=new Set(validMutationMethodsArr),validRequestMethodsArr=["get",...validMutationMethodsArr],validRequestMethods=new Set(validRequestMethodsArr),redirectStatusCodes=new Set([301,302,303,307,308]),redirectPreserveMethodStatusCodes=new Set([307,308]),IDLE_NAVIGATION={state:"idle",location:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},IDLE_FETCHER={state:"idle",data:void 0,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0},IDLE_BLOCKER={state:"unblocked",proceed:void 0,reset:void 0,location:void 0},ABSOLUTE_URL_REGEX$1=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,defaultMapRouteProperties=e=>({hasErrorBoundary:!!e.hasErrorBoundary}),TRANSITIONS_STORAGE_KEY="remix-router-transitions";function createRouter(e){const i=e.window?e.window:typeof window<"u"?window:void 0,s=typeof i<"u"&&typeof i.document<"u"&&typeof i.document.createElement<"u",a=!s;invariant(e.routes.length>0,"You must provide a non-empty routes array to createRouter");let o;if(e.mapRouteProperties)o=e.mapRouteProperties;else if(e.detectErrorBoundary){let St=e.detectErrorBoundary;o=Et=>({hasErrorBoundary:St(Et)})}else o=defaultMapRouteProperties;let c={},d=convertRoutesToDataRoutes(e.routes,o,void 0,c),g,_=e.basename||"/",b=_extends$2({v7_fetcherPersist:!1,v7_normalizeFormMethod:!1,v7_partialHydration:!1,v7_prependBasename:!1,v7_relativeSplatPath:!1},e.future),j=null,nt=new Set,tt=null,at=null,it=null,rt=e.hydrationData!=null,ut=matchRoutes(d,e.history.location,_),$=null;if(ut==null){let St=getInternalRouterError(404,{pathname:e.history.location.pathname}),{matches:Et,route:kt}=getShortCircuitMatches(d);ut=Et,$={[kt.id]:St}}let et,_e=ut.some(St=>St.route.lazy),st=ut.some(St=>St.route.loader);if(_e)et=!1;else if(!st)et=!0;else if(b.v7_partialHydration){let St=e.hydrationData?e.hydrationData.loaderData:null,Et=e.hydrationData?e.hydrationData.errors:null;et=ut.every(kt=>kt.route.loader&&kt.route.loader.hydrate!==!0&&(St&&St[kt.route.id]!==void 0||Et&&Et[kt.route.id]!==void 0))}else et=e.hydrationData!=null;let ft,lt={historyAction:e.history.action,location:e.history.location,matches:ut,initialized:et,navigation:IDLE_NAVIGATION,restoreScrollPosition:e.hydrationData!=null?!1:null,preventScrollReset:!1,revalidation:"idle",loaderData:e.hydrationData&&e.hydrationData.loaderData||{},actionData:e.hydrationData&&e.hydrationData.actionData||null,errors:e.hydrationData&&e.hydrationData.errors||$,fetchers:new Map,blockers:new Map},ct=Action.Pop,dt=!1,gt,Ct=!1,_t=new Map,Pt=null,bt=!1,Mt=!1,wt=[],pt=[],mt=new Map,ot=0,ht=-1,yt=new Map,vt=new Set,xt=new Map,Tt=new Map,At=new Set,Ot=new Map,Vt=new Map,Kt=!1;function ar(){if(j=e.history.listen(St=>{let{action:Et,location:kt,delta:Ft}=St;if(Kt){Kt=!1;return}warning(Vt.size===0||Ft!=null,"You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");let Lt=kn({currentLocation:lt.location,nextLocation:kt,historyAction:Et});if(Lt&&Ft!=null){Kt=!0,e.history.go(Ft*-1),sn(Lt,{state:"blocked",location:kt,proceed(){sn(Lt,{state:"proceeding",proceed:void 0,reset:void 0,location:kt}),e.history.go(Ft)},reset(){let zt=new Map(lt.blockers);zt.set(Lt,IDLE_BLOCKER),Gt({blockers:zt})}});return}return ir(Et,kt)}),s){restoreAppliedTransitions(i,_t);let St=()=>persistAppliedTransitions(i,_t);i.addEventListener("pagehide",St),Pt=()=>i.removeEventListener("pagehide",St)}return lt.initialized||ir(Action.Pop,lt.location,{initialHydration:!0}),ft}function dr(){j&&j(),Pt&&Pt(),nt.clear(),gt&&gt.abort(),lt.fetchers.forEach((St,Et)=>yr(Et)),lt.blockers.forEach((St,Et)=>wn(Et))}function or(St){return nt.add(St),()=>nt.delete(St)}function Gt(St,Et){Et===void 0&&(Et={}),lt=_extends$2({},lt,St);let kt=[],Ft=[];b.v7_fetcherPersist&&lt.fetchers.forEach((Lt,zt)=>{Lt.state==="idle"&&(At.has(zt)?Ft.push(zt):kt.push(zt))}),[...nt].forEach(Lt=>Lt(lt,{deletedFetchers:Ft,unstable_viewTransitionOpts:Et.viewTransitionOpts,unstable_flushSync:Et.flushSync===!0})),b.v7_fetcherPersist&&(kt.forEach(Lt=>lt.fetchers.delete(Lt)),Ft.forEach(Lt=>yr(Lt)))}function tr(St,Et,kt){var Ft,Lt;let{flushSync:zt}=kt===void 0?{}:kt,Nt=lt.actionData!=null&&lt.navigation.formMethod!=null&&isMutationMethod(lt.navigation.formMethod)&&lt.navigation.state==="loading"&&((Ft=St.state)==null?void 0:Ft._isRedirect)!==!0,Bt;Et.actionData?Object.keys(Et.actionData).length>0?Bt=Et.actionData:Bt=null:Nt?Bt=lt.actionData:Bt=null;let Dt=Et.loaderData?mergeLoaderData(lt.loaderData,Et.loaderData,Et.matches||[],Et.errors):lt.loaderData,$t=lt.blockers;$t.size>0&&($t=new Map($t),$t.forEach((Qt,sr)=>$t.set(sr,IDLE_BLOCKER)));let rr=dt===!0||lt.navigation.formMethod!=null&&isMutationMethod(lt.navigation.formMethod)&&((Lt=St.state)==null?void 0:Lt._isRedirect)!==!0;g&&(d=g,g=void 0),bt||ct===Action.Pop||(ct===Action.Push?e.history.push(St,St.state):ct===Action.Replace&&e.history.replace(St,St.state));let jt;if(ct===Action.Pop){let Qt=_t.get(lt.location.pathname);Qt&&Qt.has(St.pathname)?jt={currentLocation:lt.location,nextLocation:St}:_t.has(St.pathname)&&(jt={currentLocation:St,nextLocation:lt.location})}else if(Ct){let Qt=_t.get(lt.location.pathname);Qt?Qt.add(St.pathname):(Qt=new Set([St.pathname]),_t.set(lt.location.pathname,Qt)),jt={currentLocation:lt.location,nextLocation:St}}Gt(_extends$2({},Et,{actionData:Bt,loaderData:Dt,historyAction:ct,location:St,initialized:!0,navigation:IDLE_NAVIGATION,revalidation:"idle",restoreScrollPosition:bn(St,Et.matches||lt.matches),preventScrollReset:rr,blockers:$t}),{viewTransitionOpts:jt,flushSync:zt===!0}),ct=Action.Pop,dt=!1,Ct=!1,bt=!1,Mt=!1,wt=[],pt=[]}async function Ut(St,Et){if(typeof St=="number"){e.history.go(St);return}let kt=normalizeTo(lt.location,lt.matches,_,b.v7_prependBasename,St,b.v7_relativeSplatPath,Et==null?void 0:Et.fromRouteId,Et==null?void 0:Et.relative),{path:Ft,submission:Lt,error:zt}=normalizeNavigateOptions(b.v7_normalizeFormMethod,!1,kt,Et),Nt=lt.location,Bt=createLocation(lt.location,Ft,Et&&Et.state);Bt=_extends$2({},Bt,e.history.encodeLocation(Bt));let Dt=Et&&Et.replace!=null?Et.replace:void 0,$t=Action.Push;Dt===!0?$t=Action.Replace:Dt===!1||Lt!=null&&isMutationMethod(Lt.formMethod)&&Lt.formAction===lt.location.pathname+lt.location.search&&($t=Action.Replace);let rr=Et&&"preventScrollReset"in Et?Et.preventScrollReset===!0:void 0,jt=(Et&&Et.unstable_flushSync)===!0,Qt=kn({currentLocation:Nt,nextLocation:Bt,historyAction:$t});if(Qt){sn(Qt,{state:"blocked",location:Bt,proceed(){sn(Qt,{state:"proceeding",proceed:void 0,reset:void 0,location:Bt}),Ut(St,Et)},reset(){let sr=new Map(lt.blockers);sr.set(Qt,IDLE_BLOCKER),Gt({blockers:sr})}});return}return await ir($t,Bt,{submission:Lt,pendingError:zt,preventScrollReset:rr,replace:Et&&Et.replace,enableViewTransition:Et&&Et.unstable_viewTransition,flushSync:jt})}function It(){if(vr(),Gt({revalidation:"loading"}),lt.navigation.state!=="submitting"){if(lt.navigation.state==="idle"){ir(lt.historyAction,lt.location,{startUninterruptedRevalidation:!0});return}ir(ct||lt.historyAction,lt.navigation.location,{overrideNavigation:lt.navigation})}}async function ir(St,Et,kt){gt&&gt.abort(),gt=null,ct=St,bt=(kt&&kt.startUninterruptedRevalidation)===!0,Ln(lt.location,lt.matches),dt=(kt&&kt.preventScrollReset)===!0,Ct=(kt&&kt.enableViewTransition)===!0;let Ft=g||d,Lt=kt&&kt.overrideNavigation,zt=matchRoutes(Ft,Et,_),Nt=(kt&&kt.flushSync)===!0;if(!zt){let sr=getInternalRouterError(404,{pathname:Et.pathname}),{matches:gr,route:nr}=getShortCircuitMatches(Ft);un(),tr(Et,{matches:gr,loaderData:{},errors:{[nr.id]:sr}},{flushSync:Nt});return}if(lt.initialized&&!Mt&&isHashChangeOnly(lt.location,Et)&&!(kt&&kt.submission&&isMutationMethod(kt.submission.formMethod))){tr(Et,{matches:zt},{flushSync:Nt});return}gt=new AbortController;let Bt=createClientSideRequest(e.history,Et,gt.signal,kt&&kt.submission),Dt,$t;if(kt&&kt.pendingError)$t={[findNearestBoundary(zt).route.id]:kt.pendingError};else if(kt&&kt.submission&&isMutationMethod(kt.submission.formMethod)){let sr=await Cr(Bt,Et,kt.submission,zt,{replace:kt.replace,flushSync:Nt});if(sr.shortCircuited)return;Dt=sr.pendingActionData,$t=sr.pendingActionError,Lt=getLoadingNavigation(Et,kt.submission),Nt=!1,Bt=new Request(Bt.url,{signal:Bt.signal})}let{shortCircuited:rr,loaderData:jt,errors:Qt}=await Sr(Bt,Et,zt,Lt,kt&&kt.submission,kt&&kt.fetcherSubmission,kt&&kt.replace,kt&&kt.initialHydration===!0,Nt,Dt,$t);rr||(gt=null,tr(Et,_extends$2({matches:zt},Dt?{actionData:Dt}:{},{loaderData:jt,errors:Qt})))}async function Cr(St,Et,kt,Ft,Lt){Lt===void 0&&(Lt={}),vr();let zt=getSubmittingNavigation(Et,kt);Gt({navigation:zt},{flushSync:Lt.flushSync===!0});let Nt,Bt=getTargetMatch(Ft,Et);if(!Bt.route.action&&!Bt.route.lazy)Nt={type:ResultType.error,error:getInternalRouterError(405,{method:St.method,pathname:Et.pathname,routeId:Bt.route.id})};else if(Nt=await callLoaderOrAction("action",St,Bt,Ft,c,o,_,b.v7_relativeSplatPath),St.signal.aborted)return{shortCircuited:!0};if(isRedirectResult(Nt)){let Dt;return Lt&&Lt.replace!=null?Dt=Lt.replace:Dt=Nt.location===lt.location.pathname+lt.location.search,await Zt(lt,Nt,{submission:kt,replace:Dt}),{shortCircuited:!0}}if(isErrorResult(Nt)){let Dt=findNearestBoundary(Ft,Bt.route.id);return(Lt&&Lt.replace)!==!0&&(ct=Action.Push),{pendingActionData:{},pendingActionError:{[Dt.route.id]:Nt.error}}}if(isDeferredResult(Nt))throw getInternalRouterError(400,{type:"defer-action"});return{pendingActionData:{[Bt.route.id]:Nt.data}}}async function Sr(St,Et,kt,Ft,Lt,zt,Nt,Bt,Dt,$t,rr){let jt=Ft||getLoadingNavigation(Et,Lt),Qt=Lt||zt||getSubmissionFromNavigation(jt),sr=g||d,[gr,nr]=getMatchesToLoad(e.history,lt,kt,Qt,Et,b.v7_partialHydration&&Bt===!0,Mt,wt,pt,At,xt,vt,sr,_,$t,rr);if(un(qt=>!(kt&&kt.some(Xt=>Xt.route.id===qt))||gr&&gr.some(Xt=>Xt.route.id===qt)),ht=++ot,gr.length===0&&nr.length===0){let qt=Pn();return tr(Et,_extends$2({matches:kt,loaderData:{},errors:rr||null},$t?{actionData:$t}:{},qt?{fetchers:new Map(lt.fetchers)}:{}),{flushSync:Dt}),{shortCircuited:!0}}if(!bt&&(!b.v7_partialHydration||!Bt)){nr.forEach(Xt=>{let wr=lt.fetchers.get(Xt.key),on=getLoadingFetcher(void 0,wr?wr.data:void 0);lt.fetchers.set(Xt.key,on)});let qt=$t||lt.actionData;Gt(_extends$2({navigation:jt},qt?Object.keys(qt).length===0?{actionData:null}:{actionData:qt}:{},nr.length>0?{fetchers:new Map(lt.fetchers)}:{}),{flushSync:Dt})}nr.forEach(qt=>{mt.has(qt.key)&&pr(qt.key),qt.controller&&mt.set(qt.key,qt.controller)});let Br=()=>nr.forEach(qt=>pr(qt.key));gt&&gt.signal.addEventListener("abort",Br);let{results:fn,loaderResults:Nr,fetcherResults:_r}=await Pr(lt.matches,kt,gr,nr,St);if(St.signal.aborted)return{shortCircuited:!0};gt&&gt.signal.removeEventListener("abort",Br),nr.forEach(qt=>mt.delete(qt.key));let Rr=findRedirect(fn);if(Rr){if(Rr.idx>=gr.length){let qt=nr[Rr.idx-gr.length].key;vt.add(qt)}return await Zt(lt,Rr.result,{replace:Nt}),{shortCircuited:!0}}let{loaderData:hn,errors:cn}=processLoaderData(lt,kt,gr,Nr,rr,nr,_r,Ot);Ot.forEach((qt,Xt)=>{qt.subscribe(wr=>{(wr||qt.done)&&Ot.delete(Xt)})});let pn=Pn(),jr=Cn(ht),an=pn||jr||nr.length>0;return _extends$2({loaderData:hn,errors:cn},an?{fetchers:new Map(lt.fetchers)}:{})}function mr(St,Et,kt,Ft){if(a)throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");mt.has(St)&&pr(St);let Lt=(Ft&&Ft.unstable_flushSync)===!0,zt=g||d,Nt=normalizeTo(lt.location,lt.matches,_,b.v7_prependBasename,kt,b.v7_relativeSplatPath,Et,Ft==null?void 0:Ft.relative),Bt=matchRoutes(zt,Nt,_);if(!Bt){ur(St,Et,getInternalRouterError(404,{pathname:Nt}),{flushSync:Lt});return}let{path:Dt,submission:$t,error:rr}=normalizeNavigateOptions(b.v7_normalizeFormMethod,!0,Nt,Ft);if(rr){ur(St,Et,rr,{flushSync:Lt});return}let jt=getTargetMatch(Bt,Dt);if(dt=(Ft&&Ft.preventScrollReset)===!0,$t&&isMutationMethod($t.formMethod)){Er(St,Et,Dt,jt,Bt,Lt,$t);return}xt.set(St,{routeId:Et,path:Dt}),xr(St,Et,Dt,jt,Bt,Lt,$t)}async function Er(St,Et,kt,Ft,Lt,zt,Nt){if(vr(),xt.delete(St),!Ft.route.action&&!Ft.route.lazy){let Xt=getInternalRouterError(405,{method:Nt.formMethod,pathname:kt,routeId:Et});ur(St,Et,Xt,{flushSync:zt});return}let Bt=lt.fetchers.get(St);Jt(St,getSubmittingFetcher(Nt,Bt),{flushSync:zt});let Dt=new AbortController,$t=createClientSideRequest(e.history,kt,Dt.signal,Nt);mt.set(St,Dt);let rr=ot,jt=await callLoaderOrAction("action",$t,Ft,Lt,c,o,_,b.v7_relativeSplatPath);if($t.signal.aborted){mt.get(St)===Dt&&mt.delete(St);return}if(b.v7_fetcherPersist&&At.has(St)){if(isRedirectResult(jt)||isErrorResult(jt)){Jt(St,getDoneFetcher(void 0));return}}else{if(isRedirectResult(jt))if(mt.delete(St),ht>rr){Jt(St,getDoneFetcher(void 0));return}else return vt.add(St),Jt(St,getLoadingFetcher(Nt)),Zt(lt,jt,{fetcherSubmission:Nt});if(isErrorResult(jt)){ur(St,Et,jt.error);return}}if(isDeferredResult(jt))throw getInternalRouterError(400,{type:"defer-action"});let Qt=lt.navigation.location||lt.location,sr=createClientSideRequest(e.history,Qt,Dt.signal),gr=g||d,nr=lt.navigation.state!=="idle"?matchRoutes(gr,lt.navigation.location,_):lt.matches;invariant(nr,"Didn't find any matches after fetcher action");let Br=++ot;yt.set(St,Br);let fn=getLoadingFetcher(Nt,jt.data);lt.fetchers.set(St,fn);let[Nr,_r]=getMatchesToLoad(e.history,lt,nr,Nt,Qt,!1,Mt,wt,pt,At,xt,vt,gr,_,{[Ft.route.id]:jt.data},void 0);_r.filter(Xt=>Xt.key!==St).forEach(Xt=>{let wr=Xt.key,on=lt.fetchers.get(wr),On=getLoadingFetcher(void 0,on?on.data:void 0);lt.fetchers.set(wr,On),mt.has(wr)&&pr(wr),Xt.controller&&mt.set(wr,Xt.controller)}),Gt({fetchers:new Map(lt.fetchers)});let Rr=()=>_r.forEach(Xt=>pr(Xt.key));Dt.signal.addEventListener("abort",Rr);let{results:hn,loaderResults:cn,fetcherResults:pn}=await Pr(lt.matches,nr,Nr,_r,sr);if(Dt.signal.aborted)return;Dt.signal.removeEventListener("abort",Rr),yt.delete(St),mt.delete(St),_r.forEach(Xt=>mt.delete(Xt.key));let jr=findRedirect(hn);if(jr){if(jr.idx>=Nr.length){let Xt=_r[jr.idx-Nr.length].key;vt.add(Xt)}return Zt(lt,jr.result)}let{loaderData:an,errors:qt}=processLoaderData(lt,lt.matches,Nr,cn,void 0,_r,pn,Ot);if(lt.fetchers.has(St)){let Xt=getDoneFetcher(jt.data);lt.fetchers.set(St,Xt)}Cn(Br),lt.navigation.state==="loading"&&Br>ht?(invariant(ct,"Expected pending action"),gt&&gt.abort(),tr(lt.navigation.location,{matches:nr,loaderData:an,errors:qt,fetchers:new Map(lt.fetchers)})):(Gt({errors:qt,loaderData:mergeLoaderData(lt.loaderData,an,nr,qt),fetchers:new Map(lt.fetchers)}),Mt=!1)}async function xr(St,Et,kt,Ft,Lt,zt,Nt){let Bt=lt.fetchers.get(St);Jt(St,getLoadingFetcher(Nt,Bt?Bt.data:void 0),{flushSync:zt});let Dt=new AbortController,$t=createClientSideRequest(e.history,kt,Dt.signal);mt.set(St,Dt);let rr=ot,jt=await callLoaderOrAction("loader",$t,Ft,Lt,c,o,_,b.v7_relativeSplatPath);if(isDeferredResult(jt)&&(jt=await resolveDeferredData(jt,$t.signal,!0)||jt),mt.get(St)===Dt&&mt.delete(St),!$t.signal.aborted){if(At.has(St)){Jt(St,getDoneFetcher(void 0));return}if(isRedirectResult(jt))if(ht>rr){Jt(St,getDoneFetcher(void 0));return}else{vt.add(St),await Zt(lt,jt);return}if(isErrorResult(jt)){ur(St,Et,jt.error);return}invariant(!isDeferredResult(jt),"Unhandled fetcher deferred data"),Jt(St,getDoneFetcher(jt.data))}}async function Zt(St,Et,kt){let{submission:Ft,fetcherSubmission:Lt,replace:zt}=kt===void 0?{}:kt;Et.revalidate&&(Mt=!0);let Nt=createLocation(St.location,Et.location,{_isRedirect:!0});if(invariant(Nt,"Expected a location on the redirect navigation"),s){let Qt=!1;if(Et.reloadDocument)Qt=!0;else if(ABSOLUTE_URL_REGEX$1.test(Et.location)){const sr=e.history.createURL(Et.location);Qt=sr.origin!==i.location.origin||stripBasename(sr.pathname,_)==null}if(Qt){zt?i.location.replace(Et.location):i.location.assign(Et.location);return}}gt=null;let Bt=zt===!0?Action.Replace:Action.Push,{formMethod:Dt,formAction:$t,formEncType:rr}=St.navigation;!Ft&&!Lt&&Dt&&$t&&rr&&(Ft=getSubmissionFromNavigation(St.navigation));let jt=Ft||Lt;if(redirectPreserveMethodStatusCodes.has(Et.status)&&jt&&isMutationMethod(jt.formMethod))await ir(Bt,Nt,{submission:_extends$2({},jt,{formAction:Et.location}),preventScrollReset:dt});else{let Qt=getLoadingNavigation(Nt,Ft);await ir(Bt,Nt,{overrideNavigation:Qt,fetcherSubmission:Lt,preventScrollReset:dt})}}async function Pr(St,Et,kt,Ft,Lt){let zt=await Promise.all([...kt.map(Dt=>callLoaderOrAction("loader",Lt,Dt,Et,c,o,_,b.v7_relativeSplatPath)),...Ft.map(Dt=>Dt.matches&&Dt.match&&Dt.controller?callLoaderOrAction("loader",createClientSideRequest(e.history,Dt.path,Dt.controller.signal),Dt.match,Dt.matches,c,o,_,b.v7_relativeSplatPath):{type:ResultType.error,error:getInternalRouterError(404,{pathname:Dt.path})})]),Nt=zt.slice(0,kt.length),Bt=zt.slice(kt.length);return await Promise.all([resolveDeferredResults(St,kt,Nt,Nt.map(()=>Lt.signal),!1,lt.loaderData),resolveDeferredResults(St,Ft.map(Dt=>Dt.match),Bt,Ft.map(Dt=>Dt.controller?Dt.controller.signal:null),!0)]),{results:zt,loaderResults:Nt,fetcherResults:Bt}}function vr(){Mt=!0,wt.push(...un()),xt.forEach((St,Et)=>{mt.has(Et)&&(pt.push(Et),pr(Et))})}function Jt(St,Et,kt){kt===void 0&&(kt={}),lt.fetchers.set(St,Et),Gt({fetchers:new Map(lt.fetchers)},{flushSync:(kt&&kt.flushSync)===!0})}function ur(St,Et,kt,Ft){Ft===void 0&&(Ft={});let Lt=findNearestBoundary(lt.matches,Et);yr(St),Gt({errors:{[Lt.route.id]:kt},fetchers:new Map(lt.fetchers)},{flushSync:(Ft&&Ft.flushSync)===!0})}function hr(St){return b.v7_fetcherPersist&&(Tt.set(St,(Tt.get(St)||0)+1),At.has(St)&&At.delete(St)),lt.fetchers.get(St)||IDLE_FETCHER}function yr(St){let Et=lt.fetchers.get(St);mt.has(St)&&!(Et&&Et.state==="loading"&&yt.has(St))&&pr(St),xt.delete(St),yt.delete(St),vt.delete(St),At.delete(St),lt.fetchers.delete(St)}function Vr(St){if(b.v7_fetcherPersist){let Et=(Tt.get(St)||0)-1;Et<=0?(Tt.delete(St),At.add(St)):Tt.set(St,Et)}else yr(St);Gt({fetchers:new Map(lt.fetchers)})}function pr(St){let Et=mt.get(St);invariant(Et,"Expected fetch controller: "+St),Et.abort(),mt.delete(St)}function Mr(St){for(let Et of St){let kt=hr(Et),Ft=getDoneFetcher(kt.data);lt.fetchers.set(Et,Ft)}}function Pn(){let St=[],Et=!1;for(let kt of vt){let Ft=lt.fetchers.get(kt);invariant(Ft,"Expected fetcher: "+kt),Ft.state==="loading"&&(vt.delete(kt),St.push(kt),Et=!0)}return Mr(St),Et}function Cn(St){let Et=[];for(let[kt,Ft]of yt)if(Ft<St){let Lt=lt.fetchers.get(kt);invariant(Lt,"Expected fetcher: "+kt),Lt.state==="loading"&&(pr(kt),yt.delete(kt),Et.push(kt))}return Mr(Et),Et.length>0}function Fn(St,Et){let kt=lt.blockers.get(St)||IDLE_BLOCKER;return Vt.get(St)!==Et&&Vt.set(St,Et),kt}function wn(St){lt.blockers.delete(St),Vt.delete(St)}function sn(St,Et){let kt=lt.blockers.get(St)||IDLE_BLOCKER;invariant(kt.state==="unblocked"&&Et.state==="blocked"||kt.state==="blocked"&&Et.state==="blocked"||kt.state==="blocked"&&Et.state==="proceeding"||kt.state==="blocked"&&Et.state==="unblocked"||kt.state==="proceeding"&&Et.state==="unblocked","Invalid blocker state transition: "+kt.state+" -> "+Et.state);let Ft=new Map(lt.blockers);Ft.set(St,Et),Gt({blockers:Ft})}function kn(St){let{currentLocation:Et,nextLocation:kt,historyAction:Ft}=St;if(Vt.size===0)return;Vt.size>1&&warning(!1,"A router only supports one blocker at a time");let Lt=Array.from(Vt.entries()),[zt,Nt]=Lt[Lt.length-1],Bt=lt.blockers.get(zt);if(!(Bt&&Bt.state==="proceeding")&&Nt({currentLocation:Et,nextLocation:kt,historyAction:Ft}))return zt}function un(St){let Et=[];return Ot.forEach((kt,Ft)=>{(!St||St(Ft))&&(kt.cancel(),Et.push(Ft),Ot.delete(Ft))}),Et}function In(St,Et,kt){if(tt=St,it=Et,at=kt||null,!rt&&lt.navigation===IDLE_NAVIGATION){rt=!0;let Ft=bn(lt.location,lt.matches);Ft!=null&&Gt({restoreScrollPosition:Ft})}return()=>{tt=null,it=null,at=null}}function _n(St,Et){return at&&at(St,Et.map(Ft=>convertRouteMatchToUiMatch(Ft,lt.loaderData)))||St.key}function Ln(St,Et){if(tt&&it){let kt=_n(St,Et);tt[kt]=it()}}function bn(St,Et){if(tt){let kt=_n(St,Et),Ft=tt[kt];if(typeof Ft=="number")return Ft}return null}function Dn(St){c={},g=convertRoutesToDataRoutes(St,o,void 0,c)}return ft={get basename(){return _},get future(){return b},get state(){return lt},get routes(){return d},get window(){return i},initialize:ar,subscribe:or,enableScrollRestoration:In,navigate:Ut,fetch:mr,revalidate:It,createHref:St=>e.history.createHref(St),encodeLocation:St=>e.history.encodeLocation(St),getFetcher:hr,deleteFetcher:Vr,dispose:dr,getBlocker:Fn,deleteBlocker:wn,_internalFetchControllers:mt,_internalActiveDeferreds:Ot,_internalSetRoutes:Dn},ft}function isSubmissionNavigation(e){return e!=null&&("formData"in e&&e.formData!=null||"body"in e&&e.body!==void 0)}function normalizeTo(e,i,s,a,o,c,d,g){let _,b;if(d){_=[];for(let nt of i)if(_.push(nt),nt.route.id===d){b=nt;break}}else _=i,b=i[i.length-1];let j=resolveTo(o||".",getResolveToMatches(_,c),stripBasename(e.pathname,s)||e.pathname,g==="path");return o==null&&(j.search=e.search,j.hash=e.hash),(o==null||o===""||o===".")&&b&&b.route.index&&!hasNakedIndexQuery(j.search)&&(j.search=j.search?j.search.replace(/^\?/,"?index&"):"?index"),a&&s!=="/"&&(j.pathname=j.pathname==="/"?s:joinPaths([s,j.pathname])),createPath(j)}function normalizeNavigateOptions(e,i,s,a){if(!a||!isSubmissionNavigation(a))return{path:s};if(a.formMethod&&!isValidMethod(a.formMethod))return{path:s,error:getInternalRouterError(405,{method:a.formMethod})};let o=()=>({path:s,error:getInternalRouterError(400,{type:"invalid-body"})}),c=a.formMethod||"get",d=e?c.toUpperCase():c.toLowerCase(),g=stripHashFromPath(s);if(a.body!==void 0){if(a.formEncType==="text/plain"){if(!isMutationMethod(d))return o();let tt=typeof a.body=="string"?a.body:a.body instanceof FormData||a.body instanceof URLSearchParams?Array.from(a.body.entries()).reduce((at,it)=>{let[rt,ut]=it;return""+at+rt+"="+ut+`
`},""):String(a.body);return{path:s,submission:{formMethod:d,formAction:g,formEncType:a.formEncType,formData:void 0,json:void 0,text:tt}}}else if(a.formEncType==="application/json"){if(!isMutationMethod(d))return o();try{let tt=typeof a.body=="string"?JSON.parse(a.body):a.body;return{path:s,submission:{formMethod:d,formAction:g,formEncType:a.formEncType,formData:void 0,json:tt,text:void 0}}}catch{return o()}}}invariant(typeof FormData=="function","FormData is not available in this environment");let _,b;if(a.formData)_=convertFormDataToSearchParams(a.formData),b=a.formData;else if(a.body instanceof FormData)_=convertFormDataToSearchParams(a.body),b=a.body;else if(a.body instanceof URLSearchParams)_=a.body,b=convertSearchParamsToFormData(_);else if(a.body==null)_=new URLSearchParams,b=new FormData;else try{_=new URLSearchParams(a.body),b=convertSearchParamsToFormData(_)}catch{return o()}let j={formMethod:d,formAction:g,formEncType:a&&a.formEncType||"application/x-www-form-urlencoded",formData:b,json:void 0,text:void 0};if(isMutationMethod(j.formMethod))return{path:s,submission:j};let nt=parsePath(s);return i&&nt.search&&hasNakedIndexQuery(nt.search)&&_.append("index",""),nt.search="?"+_,{path:createPath(nt),submission:j}}function getLoaderMatchesUntilBoundary(e,i){let s=e;if(i){let a=e.findIndex(o=>o.route.id===i);a>=0&&(s=e.slice(0,a))}return s}function getMatchesToLoad(e,i,s,a,o,c,d,g,_,b,j,nt,tt,at,it,rt){let ut=rt?Object.values(rt)[0]:it?Object.values(it)[0]:void 0,$=e.createURL(i.location),et=e.createURL(o),_e=rt?Object.keys(rt)[0]:void 0,ft=getLoaderMatchesUntilBoundary(s,_e).filter((ct,dt)=>{let{route:gt}=ct;if(gt.lazy)return!0;if(gt.loader==null)return!1;if(c)return gt.loader.hydrate?!0:i.loaderData[gt.id]===void 0&&(!i.errors||i.errors[gt.id]===void 0);if(isNewLoader(i.loaderData,i.matches[dt],ct)||g.some(Pt=>Pt===ct.route.id))return!0;let Ct=i.matches[dt],_t=ct;return shouldRevalidateLoader(ct,_extends$2({currentUrl:$,currentParams:Ct.params,nextUrl:et,nextParams:_t.params},a,{actionResult:ut,defaultShouldRevalidate:d||$.pathname+$.search===et.pathname+et.search||$.search!==et.search||isNewRouteInstance(Ct,_t)}))}),lt=[];return j.forEach((ct,dt)=>{if(c||!s.some(bt=>bt.route.id===ct.routeId)||b.has(dt))return;let gt=matchRoutes(tt,ct.path,at);if(!gt){lt.push({key:dt,routeId:ct.routeId,path:ct.path,matches:null,match:null,controller:null});return}let Ct=i.fetchers.get(dt),_t=getTargetMatch(gt,ct.path),Pt=!1;nt.has(dt)?Pt=!1:_.includes(dt)?Pt=!0:Ct&&Ct.state!=="idle"&&Ct.data===void 0?Pt=d:Pt=shouldRevalidateLoader(_t,_extends$2({currentUrl:$,currentParams:i.matches[i.matches.length-1].params,nextUrl:et,nextParams:s[s.length-1].params},a,{actionResult:ut,defaultShouldRevalidate:d})),Pt&&lt.push({key:dt,routeId:ct.routeId,path:ct.path,matches:gt,match:_t,controller:new AbortController})}),[ft,lt]}function isNewLoader(e,i,s){let a=!i||s.route.id!==i.route.id,o=e[s.route.id]===void 0;return a||o}function isNewRouteInstance(e,i){let s=e.route.path;return e.pathname!==i.pathname||s!=null&&s.endsWith("*")&&e.params["*"]!==i.params["*"]}function shouldRevalidateLoader(e,i){if(e.route.shouldRevalidate){let s=e.route.shouldRevalidate(i);if(typeof s=="boolean")return s}return i.defaultShouldRevalidate}async function loadLazyRouteModule(e,i,s){if(!e.lazy)return;let a=await e.lazy();if(!e.lazy)return;let o=s[e.id];invariant(o,"No route found in manifest");let c={};for(let d in a){let _=o[d]!==void 0&&d!=="hasErrorBoundary";warning(!_,'Route "'+o.id+'" has a static property "'+d+'" defined but its lazy function is also returning a value for this property. '+('The lazy route property "'+d+'" will be ignored.')),!_&&!immutableRouteKeys.has(d)&&(c[d]=a[d])}Object.assign(o,c),Object.assign(o,_extends$2({},i(o),{lazy:void 0}))}async function callLoaderOrAction(e,i,s,a,o,c,d,g,_){_===void 0&&(_={});let b,j,nt,tt=rt=>{let ut,$=new Promise((et,_e)=>ut=_e);return nt=()=>ut(),i.signal.addEventListener("abort",nt),Promise.race([rt({request:i,params:s.params,context:_.requestContext}),$])};try{let rt=s.route[e];if(s.route.lazy)if(rt){let ut,$=await Promise.all([tt(rt).catch(et=>{ut=et}),loadLazyRouteModule(s.route,c,o)]);if(ut)throw ut;j=$[0]}else if(await loadLazyRouteModule(s.route,c,o),rt=s.route[e],rt)j=await tt(rt);else if(e==="action"){let ut=new URL(i.url),$=ut.pathname+ut.search;throw getInternalRouterError(405,{method:i.method,pathname:$,routeId:s.route.id})}else return{type:ResultType.data,data:void 0};else if(rt)j=await tt(rt);else{let ut=new URL(i.url),$=ut.pathname+ut.search;throw getInternalRouterError(404,{pathname:$})}invariant(j!==void 0,"You defined "+(e==="action"?"an action":"a loader")+" for route "+('"'+s.route.id+"\" but didn't return anything from your `"+e+"` ")+"function. Please return a value or `null`.")}catch(rt){b=ResultType.error,j=rt}finally{nt&&i.signal.removeEventListener("abort",nt)}if(isResponse(j)){let rt=j.status;if(redirectStatusCodes.has(rt)){let $=j.headers.get("Location");if(invariant($,"Redirects returned/thrown from loaders/actions must have a Location header"),!ABSOLUTE_URL_REGEX$1.test($))$=normalizeTo(new URL(i.url),a.slice(0,a.indexOf(s)+1),d,!0,$,g);else if(!_.isStaticRequest){let et=new URL(i.url),_e=$.startsWith("//")?new URL(et.protocol+$):new URL($),st=stripBasename(_e.pathname,d)!=null;_e.origin===et.origin&&st&&($=_e.pathname+_e.search+_e.hash)}if(_.isStaticRequest)throw j.headers.set("Location",$),j;return{type:ResultType.redirect,status:rt,location:$,revalidate:j.headers.get("X-Remix-Revalidate")!==null,reloadDocument:j.headers.get("X-Remix-Reload-Document")!==null}}if(_.isRouteRequest)throw{type:b===ResultType.error?ResultType.error:ResultType.data,response:j};let ut;try{let $=j.headers.get("Content-Type");$&&/\bapplication\/json\b/.test($)?j.body==null?ut=null:ut=await j.json():ut=await j.text()}catch($){return{type:ResultType.error,error:$}}return b===ResultType.error?{type:b,error:new ErrorResponseImpl(rt,j.statusText,ut),headers:j.headers}:{type:ResultType.data,data:ut,statusCode:j.status,headers:j.headers}}if(b===ResultType.error)return{type:b,error:j};if(isDeferredData(j)){var at,it;return{type:ResultType.deferred,deferredData:j,statusCode:(at=j.init)==null?void 0:at.status,headers:((it=j.init)==null?void 0:it.headers)&&new Headers(j.init.headers)}}return{type:ResultType.data,data:j}}function createClientSideRequest(e,i,s,a){let o=e.createURL(stripHashFromPath(i)).toString(),c={signal:s};if(a&&isMutationMethod(a.formMethod)){let{formMethod:d,formEncType:g}=a;c.method=d.toUpperCase(),g==="application/json"?(c.headers=new Headers({"Content-Type":g}),c.body=JSON.stringify(a.json)):g==="text/plain"?c.body=a.text:g==="application/x-www-form-urlencoded"&&a.formData?c.body=convertFormDataToSearchParams(a.formData):c.body=a.formData}return new Request(o,c)}function convertFormDataToSearchParams(e){let i=new URLSearchParams;for(let[s,a]of e.entries())i.append(s,typeof a=="string"?a:a.name);return i}function convertSearchParamsToFormData(e){let i=new FormData;for(let[s,a]of e.entries())i.append(s,a);return i}function processRouteLoaderData(e,i,s,a,o){let c={},d=null,g,_=!1,b={};return s.forEach((j,nt)=>{let tt=i[nt].route.id;if(invariant(!isRedirectResult(j),"Cannot handle redirect results in processLoaderData"),isErrorResult(j)){let at=findNearestBoundary(e,tt),it=j.error;a&&(it=Object.values(a)[0],a=void 0),d=d||{},d[at.route.id]==null&&(d[at.route.id]=it),c[tt]=void 0,_||(_=!0,g=isRouteErrorResponse(j.error)?j.error.status:500),j.headers&&(b[tt]=j.headers)}else isDeferredResult(j)?(o.set(tt,j.deferredData),c[tt]=j.deferredData.data):c[tt]=j.data,j.statusCode!=null&&j.statusCode!==200&&!_&&(g=j.statusCode),j.headers&&(b[tt]=j.headers)}),a&&(d=a,c[Object.keys(a)[0]]=void 0),{loaderData:c,errors:d,statusCode:g||200,loaderHeaders:b}}function processLoaderData(e,i,s,a,o,c,d,g){let{loaderData:_,errors:b}=processRouteLoaderData(i,s,a,o,g);for(let j=0;j<c.length;j++){let{key:nt,match:tt,controller:at}=c[j];invariant(d!==void 0&&d[j]!==void 0,"Did not find corresponding fetcher result");let it=d[j];if(!(at&&at.signal.aborted))if(isErrorResult(it)){let rt=findNearestBoundary(e.matches,tt==null?void 0:tt.route.id);b&&b[rt.route.id]||(b=_extends$2({},b,{[rt.route.id]:it.error})),e.fetchers.delete(nt)}else if(isRedirectResult(it))invariant(!1,"Unhandled fetcher revalidation redirect");else if(isDeferredResult(it))invariant(!1,"Unhandled fetcher deferred data");else{let rt=getDoneFetcher(it.data);e.fetchers.set(nt,rt)}}return{loaderData:_,errors:b}}function mergeLoaderData(e,i,s,a){let o=_extends$2({},i);for(let c of s){let d=c.route.id;if(i.hasOwnProperty(d)?i[d]!==void 0&&(o[d]=i[d]):e[d]!==void 0&&c.route.loader&&(o[d]=e[d]),a&&a.hasOwnProperty(d))break}return o}function findNearestBoundary(e,i){return(i?e.slice(0,e.findIndex(a=>a.route.id===i)+1):[...e]).reverse().find(a=>a.route.hasErrorBoundary===!0)||e[0]}function getShortCircuitMatches(e){let i=e.length===1?e[0]:e.find(s=>s.index||!s.path||s.path==="/")||{id:"__shim-error-route__"};return{matches:[{params:{},pathname:"",pathnameBase:"",route:i}],route:i}}function getInternalRouterError(e,i){let{pathname:s,routeId:a,method:o,type:c}=i===void 0?{}:i,d="Unknown Server Error",g="Unknown @remix-run/router error";return e===400?(d="Bad Request",o&&s&&a?g="You made a "+o+' request to "'+s+'" but '+('did not provide a `loader` for route "'+a+'", ')+"so there is no way to handle the request.":c==="defer-action"?g="defer() is not supported in actions":c==="invalid-body"&&(g="Unable to encode submission body")):e===403?(d="Forbidden",g='Route "'+a+'" does not match URL "'+s+'"'):e===404?(d="Not Found",g='No route matches URL "'+s+'"'):e===405&&(d="Method Not Allowed",o&&s&&a?g="You made a "+o.toUpperCase()+' request to "'+s+'" but '+('did not provide an `action` for route "'+a+'", ')+"so there is no way to handle the request.":o&&(g='Invalid request method "'+o.toUpperCase()+'"')),new ErrorResponseImpl(e||500,d,new Error(g),!0)}function findRedirect(e){for(let i=e.length-1;i>=0;i--){let s=e[i];if(isRedirectResult(s))return{result:s,idx:i}}}function stripHashFromPath(e){let i=typeof e=="string"?parsePath(e):e;return createPath(_extends$2({},i,{hash:""}))}function isHashChangeOnly(e,i){return e.pathname!==i.pathname||e.search!==i.search?!1:e.hash===""?i.hash!=="":e.hash===i.hash?!0:i.hash!==""}function isDeferredResult(e){return e.type===ResultType.deferred}function isErrorResult(e){return e.type===ResultType.error}function isRedirectResult(e){return(e&&e.type)===ResultType.redirect}function isDeferredData(e){let i=e;return i&&typeof i=="object"&&typeof i.data=="object"&&typeof i.subscribe=="function"&&typeof i.cancel=="function"&&typeof i.resolveData=="function"}function isResponse(e){return e!=null&&typeof e.status=="number"&&typeof e.statusText=="string"&&typeof e.headers=="object"&&typeof e.body<"u"}function isValidMethod(e){return validRequestMethods.has(e.toLowerCase())}function isMutationMethod(e){return validMutationMethods.has(e.toLowerCase())}async function resolveDeferredResults(e,i,s,a,o,c){for(let d=0;d<s.length;d++){let g=s[d],_=i[d];if(!_)continue;let b=e.find(nt=>nt.route.id===_.route.id),j=b!=null&&!isNewRouteInstance(b,_)&&(c&&c[_.route.id])!==void 0;if(isDeferredResult(g)&&(o||j)){let nt=a[d];invariant(nt,"Expected an AbortSignal for revalidating fetcher deferred result"),await resolveDeferredData(g,nt,o).then(tt=>{tt&&(s[d]=tt||s[d])})}}}async function resolveDeferredData(e,i,s){if(s===void 0&&(s=!1),!await e.deferredData.resolveData(i)){if(s)try{return{type:ResultType.data,data:e.deferredData.unwrappedData}}catch(o){return{type:ResultType.error,error:o}}return{type:ResultType.data,data:e.deferredData.data}}}function hasNakedIndexQuery(e){return new URLSearchParams(e).getAll("index").some(i=>i==="")}function getTargetMatch(e,i){let s=typeof i=="string"?parsePath(i).search:i.search;if(e[e.length-1].route.index&&hasNakedIndexQuery(s||""))return e[e.length-1];let a=getPathContributingMatches(e);return a[a.length-1]}function getSubmissionFromNavigation(e){let{formMethod:i,formAction:s,formEncType:a,text:o,formData:c,json:d}=e;if(!(!i||!s||!a)){if(o!=null)return{formMethod:i,formAction:s,formEncType:a,formData:void 0,json:void 0,text:o};if(c!=null)return{formMethod:i,formAction:s,formEncType:a,formData:c,json:void 0,text:void 0};if(d!==void 0)return{formMethod:i,formAction:s,formEncType:a,formData:void 0,json:d,text:void 0}}}function getLoadingNavigation(e,i){return i?{state:"loading",location:e,formMethod:i.formMethod,formAction:i.formAction,formEncType:i.formEncType,formData:i.formData,json:i.json,text:i.text}:{state:"loading",location:e,formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0}}function getSubmittingNavigation(e,i){return{state:"submitting",location:e,formMethod:i.formMethod,formAction:i.formAction,formEncType:i.formEncType,formData:i.formData,json:i.json,text:i.text}}function getLoadingFetcher(e,i){return e?{state:"loading",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:i}:{state:"loading",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:i}}function getSubmittingFetcher(e,i){return{state:"submitting",formMethod:e.formMethod,formAction:e.formAction,formEncType:e.formEncType,formData:e.formData,json:e.json,text:e.text,data:i?i.data:void 0}}function getDoneFetcher(e){return{state:"idle",formMethod:void 0,formAction:void 0,formEncType:void 0,formData:void 0,json:void 0,text:void 0,data:e}}function restoreAppliedTransitions(e,i){try{let s=e.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);if(s){let a=JSON.parse(s);for(let[o,c]of Object.entries(a||{}))c&&Array.isArray(c)&&i.set(o,new Set(c||[]))}}catch{}}function persistAppliedTransitions(e,i){if(i.size>0){let s={};for(let[a,o]of i)s[a]=[...o];try{e.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY,JSON.stringify(s))}catch(a){warning(!1,"Failed to save applied view transitions in sessionStorage ("+a+").")}}}/**
 * React Router v6.21.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function _extends$1(){return _extends$1=Object.assign?Object.assign.bind():function(e){for(var i=1;i<arguments.length;i++){var s=arguments[i];for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a])}return e},_extends$1.apply(this,arguments)}const DataRouterContext=reactExports.createContext(null),DataRouterStateContext=reactExports.createContext(null),NavigationContext=reactExports.createContext(null),LocationContext=reactExports.createContext(null),RouteContext=reactExports.createContext({outlet:null,matches:[],isDataRoute:!1}),RouteErrorContext=reactExports.createContext(null);function useHref(e,i){let{relative:s}=i===void 0?{}:i;useInRouterContext()||invariant(!1);let{basename:a,navigator:o}=reactExports.useContext(NavigationContext),{hash:c,pathname:d,search:g}=useResolvedPath(e,{relative:s}),_=d;return a!=="/"&&(_=d==="/"?a:joinPaths([a,d])),o.createHref({pathname:_,search:g,hash:c})}function useInRouterContext(){return reactExports.useContext(LocationContext)!=null}function useLocation(){return useInRouterContext()||invariant(!1),reactExports.useContext(LocationContext).location}function useIsomorphicLayoutEffect(e){reactExports.useContext(NavigationContext).static||reactExports.useLayoutEffect(e)}function useNavigate(){let{isDataRoute:e}=reactExports.useContext(RouteContext);return e?useNavigateStable():useNavigateUnstable()}function useNavigateUnstable(){useInRouterContext()||invariant(!1);let e=reactExports.useContext(DataRouterContext),{basename:i,future:s,navigator:a}=reactExports.useContext(NavigationContext),{matches:o}=reactExports.useContext(RouteContext),{pathname:c}=useLocation(),d=JSON.stringify(getResolveToMatches(o,s.v7_relativeSplatPath)),g=reactExports.useRef(!1);return useIsomorphicLayoutEffect(()=>{g.current=!0}),reactExports.useCallback(function(b,j){if(j===void 0&&(j={}),!g.current)return;if(typeof b=="number"){a.go(b);return}let nt=resolveTo(b,JSON.parse(d),c,j.relative==="path");e==null&&i!=="/"&&(nt.pathname=nt.pathname==="/"?i:joinPaths([i,nt.pathname])),(j.replace?a.replace:a.push)(nt,j.state,j)},[i,a,d,c,e])}const OutletContext=reactExports.createContext(null);function useOutlet(e){let i=reactExports.useContext(RouteContext).outlet;return i&&reactExports.createElement(OutletContext.Provider,{value:e},i)}function useParams(){let{matches:e}=reactExports.useContext(RouteContext),i=e[e.length-1];return i?i.params:{}}function useResolvedPath(e,i){let{relative:s}=i===void 0?{}:i,{future:a}=reactExports.useContext(NavigationContext),{matches:o}=reactExports.useContext(RouteContext),{pathname:c}=useLocation(),d=JSON.stringify(getResolveToMatches(o,a.v7_relativeSplatPath));return reactExports.useMemo(()=>resolveTo(e,JSON.parse(d),c,s==="path"),[e,d,c,s])}function useRoutesImpl(e,i,s,a){useInRouterContext()||invariant(!1);let{navigator:o}=reactExports.useContext(NavigationContext),{matches:c}=reactExports.useContext(RouteContext),d=c[c.length-1],g=d?d.params:{};d&&d.pathname;let _=d?d.pathnameBase:"/";d&&d.route;let b=useLocation(),j;if(i){var nt;let ut=typeof i=="string"?parsePath(i):i;_==="/"||(nt=ut.pathname)!=null&&nt.startsWith(_)||invariant(!1),j=ut}else j=b;let tt=j.pathname||"/",at=_==="/"?tt:tt.slice(_.length)||"/",it=matchRoutes(e,{pathname:at}),rt=_renderMatches(it&&it.map(ut=>Object.assign({},ut,{params:Object.assign({},g,ut.params),pathname:joinPaths([_,o.encodeLocation?o.encodeLocation(ut.pathname).pathname:ut.pathname]),pathnameBase:ut.pathnameBase==="/"?_:joinPaths([_,o.encodeLocation?o.encodeLocation(ut.pathnameBase).pathname:ut.pathnameBase])})),c,s,a);return i&&rt?reactExports.createElement(LocationContext.Provider,{value:{location:_extends$1({pathname:"/",search:"",hash:"",state:null,key:"default"},j),navigationType:Action.Pop}},rt):rt}function DefaultErrorComponent(){let e=useRouteError(),i=isRouteErrorResponse(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),s=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"},c=null;return reactExports.createElement(reactExports.Fragment,null,reactExports.createElement("h2",null,"Unexpected Application Error!"),reactExports.createElement("h3",{style:{fontStyle:"italic"}},i),s?reactExports.createElement("pre",{style:o},s):null,c)}const defaultErrorElement=reactExports.createElement(DefaultErrorComponent,null);class RenderErrorBoundary extends reactExports.Component{constructor(i){super(i),this.state={location:i.location,revalidation:i.revalidation,error:i.error}}static getDerivedStateFromError(i){return{error:i}}static getDerivedStateFromProps(i,s){return s.location!==i.location||s.revalidation!=="idle"&&i.revalidation==="idle"?{error:i.error,location:i.location,revalidation:i.revalidation}:{error:i.error!==void 0?i.error:s.error,location:s.location,revalidation:i.revalidation||s.revalidation}}componentDidCatch(i,s){console.error("React Router caught the following error during render",i,s)}render(){return this.state.error!==void 0?reactExports.createElement(RouteContext.Provider,{value:this.props.routeContext},reactExports.createElement(RouteErrorContext.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}function RenderedRoute(e){let{routeContext:i,match:s,children:a}=e,o=reactExports.useContext(DataRouterContext);return o&&o.static&&o.staticContext&&(s.route.errorElement||s.route.ErrorBoundary)&&(o.staticContext._deepestRenderedBoundaryId=s.route.id),reactExports.createElement(RouteContext.Provider,{value:i},a)}function _renderMatches(e,i,s,a){var o;if(i===void 0&&(i=[]),s===void 0&&(s=null),a===void 0&&(a=null),e==null){var c;if((c=s)!=null&&c.errors)e=s.matches;else return null}let d=e,g=(o=s)==null?void 0:o.errors;if(g!=null){let j=d.findIndex(nt=>nt.route.id&&(g==null?void 0:g[nt.route.id]));j>=0||invariant(!1),d=d.slice(0,Math.min(d.length,j+1))}let _=!1,b=-1;if(s&&a&&a.v7_partialHydration)for(let j=0;j<d.length;j++){let nt=d[j];if((nt.route.HydrateFallback||nt.route.hydrateFallbackElement)&&(b=j),nt.route.id){let{loaderData:tt,errors:at}=s,it=nt.route.loader&&tt[nt.route.id]===void 0&&(!at||at[nt.route.id]===void 0);if(nt.route.lazy||it){_=!0,b>=0?d=d.slice(0,b+1):d=[d[0]];break}}}return d.reduceRight((j,nt,tt)=>{let at,it=!1,rt=null,ut=null;s&&(at=g&&nt.route.id?g[nt.route.id]:void 0,rt=nt.route.errorElement||defaultErrorElement,_&&(b<0&&tt===0?(warningOnce("route-fallback",!1),it=!0,ut=null):b===tt&&(it=!0,ut=nt.route.hydrateFallbackElement||null)));let $=i.concat(d.slice(0,tt+1)),et=()=>{let _e;return at?_e=rt:it?_e=ut:nt.route.Component?_e=reactExports.createElement(nt.route.Component,null):nt.route.element?_e=nt.route.element:_e=j,reactExports.createElement(RenderedRoute,{match:nt,routeContext:{outlet:j,matches:$,isDataRoute:s!=null},children:_e})};return s&&(nt.route.ErrorBoundary||nt.route.errorElement||tt===0)?reactExports.createElement(RenderErrorBoundary,{location:s.location,revalidation:s.revalidation,component:rt,error:at,children:et(),routeContext:{outlet:null,matches:$,isDataRoute:!0}}):et()},null)}var DataRouterHook$1=function(e){return e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e}(DataRouterHook$1||{}),DataRouterStateHook$1=function(e){return e.UseBlocker="useBlocker",e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator",e.UseNavigateStable="useNavigate",e.UseRouteId="useRouteId",e}(DataRouterStateHook$1||{});function useDataRouterContext$1(e){let i=reactExports.useContext(DataRouterContext);return i||invariant(!1),i}function useDataRouterState(e){let i=reactExports.useContext(DataRouterStateContext);return i||invariant(!1),i}function useRouteContext(e){let i=reactExports.useContext(RouteContext);return i||invariant(!1),i}function useCurrentRouteId(e){let i=useRouteContext(),s=i.matches[i.matches.length-1];return s.route.id||invariant(!1),s.route.id}function useRouteError(){var e;let i=reactExports.useContext(RouteErrorContext),s=useDataRouterState(DataRouterStateHook$1.UseRouteError),a=useCurrentRouteId(DataRouterStateHook$1.UseRouteError);return i!==void 0?i:(e=s.errors)==null?void 0:e[a]}function useNavigateStable(){let{router:e}=useDataRouterContext$1(DataRouterHook$1.UseNavigateStable),i=useCurrentRouteId(DataRouterStateHook$1.UseNavigateStable),s=reactExports.useRef(!1);return useIsomorphicLayoutEffect(()=>{s.current=!0}),reactExports.useCallback(function(o,c){c===void 0&&(c={}),s.current&&(typeof o=="number"?e.navigate(o):e.navigate(o,_extends$1({fromRouteId:i},c)))},[e,i])}const alreadyWarned={};function warningOnce(e,i,s){!i&&!alreadyWarned[e]&&(alreadyWarned[e]=!0)}function Navigate(e){let{to:i,replace:s,state:a,relative:o}=e;useInRouterContext()||invariant(!1);let{future:c,static:d}=reactExports.useContext(NavigationContext),{matches:g}=reactExports.useContext(RouteContext),{pathname:_}=useLocation(),b=useNavigate(),j=resolveTo(i,getResolveToMatches(g,c.v7_relativeSplatPath),_,o==="path"),nt=JSON.stringify(j);return reactExports.useEffect(()=>b(JSON.parse(nt),{replace:s,state:a,relative:o}),[b,nt,o,s,a]),null}function Outlet(e){return useOutlet(e.context)}function Router(e){let{basename:i="/",children:s=null,location:a,navigationType:o=Action.Pop,navigator:c,static:d=!1,future:g}=e;useInRouterContext()&&invariant(!1);let _=i.replace(/^\/*/,"/"),b=reactExports.useMemo(()=>({basename:_,navigator:c,static:d,future:_extends$1({v7_relativeSplatPath:!1},g)}),[_,g,c,d]);typeof a=="string"&&(a=parsePath(a));let{pathname:j="/",search:nt="",hash:tt="",state:at=null,key:it="default"}=a,rt=reactExports.useMemo(()=>{let ut=stripBasename(j,_);return ut==null?null:{location:{pathname:ut,search:nt,hash:tt,state:at,key:it},navigationType:o}},[_,j,nt,tt,at,it,o]);return rt==null?null:reactExports.createElement(NavigationContext.Provider,{value:b},reactExports.createElement(LocationContext.Provider,{children:s,value:rt}))}new Promise(()=>{});function mapRouteProperties(e){let i={hasErrorBoundary:e.ErrorBoundary!=null||e.errorElement!=null};return e.Component&&Object.assign(i,{element:reactExports.createElement(e.Component),Component:void 0}),e.HydrateFallback&&Object.assign(i,{hydrateFallbackElement:reactExports.createElement(e.HydrateFallback),HydrateFallback:void 0}),e.ErrorBoundary&&Object.assign(i,{errorElement:reactExports.createElement(e.ErrorBoundary),ErrorBoundary:void 0}),i}/**
 * React Router DOM v6.21.3
 *
 * Copyright (c) Remix Software Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.md file in the root directory of this source tree.
 *
 * @license MIT
 */function _extends(){return _extends=Object.assign?Object.assign.bind():function(e){for(var i=1;i<arguments.length;i++){var s=arguments[i];for(var a in s)Object.prototype.hasOwnProperty.call(s,a)&&(e[a]=s[a])}return e},_extends.apply(this,arguments)}function _objectWithoutPropertiesLoose$1(e,i){if(e==null)return{};var s={},a=Object.keys(e),o,c;for(c=0;c<a.length;c++)o=a[c],!(i.indexOf(o)>=0)&&(s[o]=e[o]);return s}function isModifiedEvent(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}function shouldProcessLinkClick(e,i){return e.button===0&&(!i||i==="_self")&&!isModifiedEvent(e)}const _excluded$2=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset","unstable_viewTransition"],_excluded2=["aria-current","caseSensitive","className","end","style","to","unstable_viewTransition","children"];function createBrowserRouter(e,i){return createRouter({basename:i==null?void 0:i.basename,future:_extends({},i==null?void 0:i.future,{v7_prependBasename:!0}),history:createBrowserHistory({window:i==null?void 0:i.window}),hydrationData:(i==null?void 0:i.hydrationData)||parseHydrationData(),routes:e,mapRouteProperties,window:i==null?void 0:i.window}).initialize()}function parseHydrationData(){var e;let i=(e=window)==null?void 0:e.__staticRouterHydrationData;return i&&i.errors&&(i=_extends({},i,{errors:deserializeErrors(i.errors)})),i}function deserializeErrors(e){if(!e)return null;let i=Object.entries(e),s={};for(let[a,o]of i)if(o&&o.__type==="RouteErrorResponse")s[a]=new ErrorResponseImpl(o.status,o.statusText,o.data,o.internal===!0);else if(o&&o.__type==="Error"){if(o.__subType){let c=window[o.__subType];if(typeof c=="function")try{let d=new c(o.message);d.stack="",s[a]=d}catch{}}if(s[a]==null){let c=new Error(o.message);c.stack="",s[a]=c}}else s[a]=o;return s}const ViewTransitionContext=reactExports.createContext({isTransitioning:!1}),FetchersContext=reactExports.createContext(new Map),START_TRANSITION="startTransition",startTransitionImpl=React$1[START_TRANSITION],FLUSH_SYNC="flushSync",flushSyncImpl=ReactDOM$1[FLUSH_SYNC];function startTransitionSafe(e){startTransitionImpl?startTransitionImpl(e):e()}function flushSyncSafe(e){flushSyncImpl?flushSyncImpl(e):e()}class Deferred{constructor(){this.status="pending",this.promise=new Promise((i,s)=>{this.resolve=a=>{this.status==="pending"&&(this.status="resolved",i(a))},this.reject=a=>{this.status==="pending"&&(this.status="rejected",s(a))}})}}function RouterProvider(e){let{fallbackElement:i,router:s,future:a}=e,[o,c]=reactExports.useState(s.state),[d,g]=reactExports.useState(),[_,b]=reactExports.useState({isTransitioning:!1}),[j,nt]=reactExports.useState(),[tt,at]=reactExports.useState(),[it,rt]=reactExports.useState(),ut=reactExports.useRef(new Map),{v7_startTransition:$}=a||{},et=reactExports.useCallback(ct=>{$?startTransitionSafe(ct):ct()},[$]),_e=reactExports.useCallback((ct,dt)=>{let{deletedFetchers:gt,unstable_flushSync:Ct,unstable_viewTransitionOpts:_t}=dt;gt.forEach(bt=>ut.current.delete(bt)),ct.fetchers.forEach((bt,Mt)=>{bt.data!==void 0&&ut.current.set(Mt,bt.data)});let Pt=s.window==null||typeof s.window.document.startViewTransition!="function";if(!_t||Pt){Ct?flushSyncSafe(()=>c(ct)):et(()=>c(ct));return}if(Ct){flushSyncSafe(()=>{tt&&(j&&j.resolve(),tt.skipTransition()),b({isTransitioning:!0,flushSync:!0,currentLocation:_t.currentLocation,nextLocation:_t.nextLocation})});let bt=s.window.document.startViewTransition(()=>{flushSyncSafe(()=>c(ct))});bt.finished.finally(()=>{flushSyncSafe(()=>{nt(void 0),at(void 0),g(void 0),b({isTransitioning:!1})})}),flushSyncSafe(()=>at(bt));return}tt?(j&&j.resolve(),tt.skipTransition(),rt({state:ct,currentLocation:_t.currentLocation,nextLocation:_t.nextLocation})):(g(ct),b({isTransitioning:!0,flushSync:!1,currentLocation:_t.currentLocation,nextLocation:_t.nextLocation}))},[s.window,tt,j,ut,et]);reactExports.useLayoutEffect(()=>s.subscribe(_e),[s,_e]),reactExports.useEffect(()=>{_.isTransitioning&&!_.flushSync&&nt(new Deferred)},[_]),reactExports.useEffect(()=>{if(j&&d&&s.window){let ct=d,dt=j.promise,gt=s.window.document.startViewTransition(async()=>{et(()=>c(ct)),await dt});gt.finished.finally(()=>{nt(void 0),at(void 0),g(void 0),b({isTransitioning:!1})}),at(gt)}},[et,d,j,s.window]),reactExports.useEffect(()=>{j&&d&&o.location.key===d.location.key&&j.resolve()},[j,tt,o.location,d]),reactExports.useEffect(()=>{!_.isTransitioning&&it&&(g(it.state),b({isTransitioning:!0,flushSync:!1,currentLocation:it.currentLocation,nextLocation:it.nextLocation}),rt(void 0))},[_.isTransitioning,it]),reactExports.useEffect(()=>{},[]);let st=reactExports.useMemo(()=>({createHref:s.createHref,encodeLocation:s.encodeLocation,go:ct=>s.navigate(ct),push:(ct,dt,gt)=>s.navigate(ct,{state:dt,preventScrollReset:gt==null?void 0:gt.preventScrollReset}),replace:(ct,dt,gt)=>s.navigate(ct,{replace:!0,state:dt,preventScrollReset:gt==null?void 0:gt.preventScrollReset})}),[s]),ft=s.basename||"/",lt=reactExports.useMemo(()=>({router:s,navigator:st,static:!1,basename:ft}),[s,st,ft]);return reactExports.createElement(reactExports.Fragment,null,reactExports.createElement(DataRouterContext.Provider,{value:lt},reactExports.createElement(DataRouterStateContext.Provider,{value:o},reactExports.createElement(FetchersContext.Provider,{value:ut.current},reactExports.createElement(ViewTransitionContext.Provider,{value:_},reactExports.createElement(Router,{basename:ft,location:o.location,navigationType:o.historyAction,navigator:st,future:{v7_relativeSplatPath:s.future.v7_relativeSplatPath}},o.initialized||s.future.v7_partialHydration?reactExports.createElement(DataRoutes,{routes:s.routes,future:s.future,state:o}):i))))),null)}function DataRoutes(e){let{routes:i,future:s,state:a}=e;return useRoutesImpl(i,void 0,a,s)}const isBrowser=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u",ABSOLUTE_URL_REGEX=/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i,Link=reactExports.forwardRef(function(i,s){let{onClick:a,relative:o,reloadDocument:c,replace:d,state:g,target:_,to:b,preventScrollReset:j,unstable_viewTransition:nt}=i,tt=_objectWithoutPropertiesLoose$1(i,_excluded$2),{basename:at}=reactExports.useContext(NavigationContext),it,rt=!1;if(typeof b=="string"&&ABSOLUTE_URL_REGEX.test(b)&&(it=b,isBrowser))try{let _e=new URL(window.location.href),st=b.startsWith("//")?new URL(_e.protocol+b):new URL(b),ft=stripBasename(st.pathname,at);st.origin===_e.origin&&ft!=null?b=ft+st.search+st.hash:rt=!0}catch{}let ut=useHref(b,{relative:o}),$=useLinkClickHandler(b,{replace:d,state:g,target:_,preventScrollReset:j,relative:o,unstable_viewTransition:nt});function et(_e){a&&a(_e),_e.defaultPrevented||$(_e)}return reactExports.createElement("a",_extends({},tt,{href:it||ut,onClick:rt||c?a:et,ref:s,target:_}))}),NavLink=reactExports.forwardRef(function(i,s){let{"aria-current":a="page",caseSensitive:o=!1,className:c="",end:d=!1,style:g,to:_,unstable_viewTransition:b,children:j}=i,nt=_objectWithoutPropertiesLoose$1(i,_excluded2),tt=useResolvedPath(_,{relative:nt.relative}),at=useLocation(),it=reactExports.useContext(DataRouterStateContext),{navigator:rt,basename:ut}=reactExports.useContext(NavigationContext),$=it!=null&&useViewTransitionState(tt)&&b===!0,et=rt.encodeLocation?rt.encodeLocation(tt).pathname:tt.pathname,_e=at.pathname,st=it&&it.navigation&&it.navigation.location?it.navigation.location.pathname:null;o||(_e=_e.toLowerCase(),st=st?st.toLowerCase():null,et=et.toLowerCase()),st&&ut&&(st=stripBasename(st,ut)||st);const ft=et!=="/"&&et.endsWith("/")?et.length-1:et.length;let lt=_e===et||!d&&_e.startsWith(et)&&_e.charAt(ft)==="/",ct=st!=null&&(st===et||!d&&st.startsWith(et)&&st.charAt(et.length)==="/"),dt={isActive:lt,isPending:ct,isTransitioning:$},gt=lt?a:void 0,Ct;typeof c=="function"?Ct=c(dt):Ct=[c,lt?"active":null,ct?"pending":null,$?"transitioning":null].filter(Boolean).join(" ");let _t=typeof g=="function"?g(dt):g;return reactExports.createElement(Link,_extends({},nt,{"aria-current":gt,className:Ct,ref:s,style:_t,to:_,unstable_viewTransition:b}),typeof j=="function"?j(dt):j)});var DataRouterHook;(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmit="useSubmit",e.UseSubmitFetcher="useSubmitFetcher",e.UseFetcher="useFetcher",e.useViewTransitionState="useViewTransitionState"})(DataRouterHook||(DataRouterHook={}));var DataRouterStateHook;(function(e){e.UseFetcher="useFetcher",e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"})(DataRouterStateHook||(DataRouterStateHook={}));function useDataRouterContext(e){let i=reactExports.useContext(DataRouterContext);return i||invariant(!1),i}function useLinkClickHandler(e,i){let{target:s,replace:a,state:o,preventScrollReset:c,relative:d,unstable_viewTransition:g}=i===void 0?{}:i,_=useNavigate(),b=useLocation(),j=useResolvedPath(e,{relative:d});return reactExports.useCallback(nt=>{if(shouldProcessLinkClick(nt,s)){nt.preventDefault();let tt=a!==void 0?a:createPath(b)===createPath(j);_(e,{replace:tt,state:o,preventScrollReset:c,relative:d,unstable_viewTransition:g})}},[b,_,j,a,o,s,e,c,d,g])}function useViewTransitionState(e,i){i===void 0&&(i={});let s=reactExports.useContext(ViewTransitionContext);s==null&&invariant(!1);let{basename:a}=useDataRouterContext(DataRouterHook.useViewTransitionState),o=useResolvedPath(e,{relative:i.relative});if(!s.isTransitioning)return!1;let c=stripBasename(s.currentLocation.pathname,a)||s.currentLocation.pathname,d=stripBasename(s.nextLocation.pathname,a)||s.nextLocation.pathname;return matchPath(o.pathname,d)!=null||matchPath(o.pathname,c)!=null}var Subscribable=class{constructor(){this.listeners=new Set,this.subscribe=this.subscribe.bind(this)}subscribe(e){return this.listeners.add(e),this.onSubscribe(),()=>{this.listeners.delete(e),this.onUnsubscribe()}}hasListeners(){return this.listeners.size>0}onSubscribe(){}onUnsubscribe(){}},isServer=typeof window>"u"||"Deno"in window;function noop$1(){}function functionalUpdate(e,i){return typeof e=="function"?e(i):e}function isValidTimeout(e){return typeof e=="number"&&e>=0&&e!==1/0}function timeUntilStale(e,i){return Math.max(e+(i||0)-Date.now(),0)}function matchQuery(e,i){const{type:s="all",exact:a,fetchStatus:o,predicate:c,queryKey:d,stale:g}=e;if(d){if(a){if(i.queryHash!==hashQueryKeyByOptions(d,i.options))return!1}else if(!partialMatchKey(i.queryKey,d))return!1}if(s!=="all"){const _=i.isActive();if(s==="active"&&!_||s==="inactive"&&_)return!1}return!(typeof g=="boolean"&&i.isStale()!==g||typeof o<"u"&&o!==i.state.fetchStatus||c&&!c(i))}function matchMutation(e,i){const{exact:s,status:a,predicate:o,mutationKey:c}=e;if(c){if(!i.options.mutationKey)return!1;if(s){if(hashKey(i.options.mutationKey)!==hashKey(c))return!1}else if(!partialMatchKey(i.options.mutationKey,c))return!1}return!(a&&i.state.status!==a||o&&!o(i))}function hashQueryKeyByOptions(e,i){return((i==null?void 0:i.queryKeyHashFn)||hashKey)(e)}function hashKey(e){return JSON.stringify(e,(i,s)=>isPlainObject$1(s)?Object.keys(s).sort().reduce((a,o)=>(a[o]=s[o],a),{}):s)}function partialMatchKey(e,i){return e===i?!0:typeof e!=typeof i?!1:e&&i&&typeof e=="object"&&typeof i=="object"?!Object.keys(i).some(s=>!partialMatchKey(e[s],i[s])):!1}function replaceEqualDeep(e,i){if(e===i)return e;const s=isPlainArray(e)&&isPlainArray(i);if(s||isPlainObject$1(e)&&isPlainObject$1(i)){const a=s?e:Object.keys(e),o=a.length,c=s?i:Object.keys(i),d=c.length,g=s?[]:{};let _=0;for(let b=0;b<d;b++){const j=s?b:c[b];!s&&e[j]===void 0&&i[j]===void 0&&a.includes(j)?(g[j]=void 0,_++):(g[j]=replaceEqualDeep(e[j],i[j]),g[j]===e[j]&&e[j]!==void 0&&_++)}return o===d&&_===o?e:g}return i}function shallowEqualObjects(e,i){if(e&&!i||i&&!e)return!1;for(const s in e)if(e[s]!==i[s])return!1;return!0}function isPlainArray(e){return Array.isArray(e)&&e.length===Object.keys(e).length}function isPlainObject$1(e){if(!hasObjectPrototype(e))return!1;const i=e.constructor;if(typeof i>"u")return!0;const s=i.prototype;return!(!hasObjectPrototype(s)||!s.hasOwnProperty("isPrototypeOf"))}function hasObjectPrototype(e){return Object.prototype.toString.call(e)==="[object Object]"}function sleep(e){return new Promise(i=>{setTimeout(i,e)})}function replaceData(e,i,s){return typeof s.structuralSharing=="function"?s.structuralSharing(e,i):s.structuralSharing!==!1?replaceEqualDeep(e,i):i}function addToEnd(e,i,s=0){const a=[...e,i];return s&&a.length>s?a.slice(1):a}function addToStart(e,i,s=0){const a=[i,...e];return s&&a.length>s?a.slice(0,-1):a}var Fr,br,zr,Tn,FocusManager=(Tn=class extends Subscribable{constructor(){super();Wt(this,Fr,void 0);Wt(this,br,void 0);Wt(this,zr,void 0);Ht(this,zr,i=>{if(!isServer&&window.addEventListener){const s=()=>i();return window.addEventListener("visibilitychange",s,!1),()=>{window.removeEventListener("visibilitychange",s)}}})}onSubscribe(){Rt(this,br)||this.setEventListener(Rt(this,zr))}onUnsubscribe(){var i;this.hasListeners()||((i=Rt(this,br))==null||i.call(this),Ht(this,br,void 0))}setEventListener(i){var s;Ht(this,zr,i),(s=Rt(this,br))==null||s.call(this),Ht(this,br,i(a=>{typeof a=="boolean"?this.setFocused(a):this.onFocus()}))}setFocused(i){Rt(this,Fr)!==i&&(Ht(this,Fr,i),this.onFocus())}onFocus(){this.listeners.forEach(i=>{i()})}isFocused(){var i;return typeof Rt(this,Fr)=="boolean"?Rt(this,Fr):((i=globalThis.document)==null?void 0:i.visibilityState)!=="hidden"}},Fr=new WeakMap,br=new WeakMap,zr=new WeakMap,Tn),focusManager=new FocusManager,$r,Tr,Hr,An,OnlineManager=(An=class extends Subscribable{constructor(){super();Wt(this,$r,!0);Wt(this,Tr,void 0);Wt(this,Hr,void 0);Ht(this,Hr,i=>{if(!isServer&&window.addEventListener){const s=()=>i(!0),a=()=>i(!1);return window.addEventListener("online",s,!1),window.addEventListener("offline",a,!1),()=>{window.removeEventListener("online",s),window.removeEventListener("offline",a)}}})}onSubscribe(){Rt(this,Tr)||this.setEventListener(Rt(this,Hr))}onUnsubscribe(){var i;this.hasListeners()||((i=Rt(this,Tr))==null||i.call(this),Ht(this,Tr,void 0))}setEventListener(i){var s;Ht(this,Hr,i),(s=Rt(this,Tr))==null||s.call(this),Ht(this,Tr,i(this.setOnline.bind(this)))}setOnline(i){Rt(this,$r)!==i&&(Ht(this,$r,i),this.listeners.forEach(a=>{a(i)}))}isOnline(){return Rt(this,$r)}},$r=new WeakMap,Tr=new WeakMap,Hr=new WeakMap,An),onlineManager=new OnlineManager;function defaultRetryDelay(e){return Math.min(1e3*2**e,3e4)}function canFetch(e){return(e??"online")==="online"?onlineManager.isOnline():!0}var CancelledError=class{constructor(e){this.revert=e==null?void 0:e.revert,this.silent=e==null?void 0:e.silent}};function isCancelledError(e){return e instanceof CancelledError}function createRetryer(e){let i=!1,s=0,a=!1,o,c,d;const g=new Promise((ut,$)=>{c=ut,d=$}),_=ut=>{var $;a||(at(new CancelledError(ut)),($=e.abort)==null||$.call(e))},b=()=>{i=!0},j=()=>{i=!1},nt=()=>!focusManager.isFocused()||e.networkMode!=="always"&&!onlineManager.isOnline(),tt=ut=>{var $;a||(a=!0,($=e.onSuccess)==null||$.call(e,ut),o==null||o(),c(ut))},at=ut=>{var $;a||(a=!0,($=e.onError)==null||$.call(e,ut),o==null||o(),d(ut))},it=()=>new Promise(ut=>{var $;o=et=>{const _e=a||!nt();return _e&&ut(et),_e},($=e.onPause)==null||$.call(e)}).then(()=>{var ut;o=void 0,a||(ut=e.onContinue)==null||ut.call(e)}),rt=()=>{if(a)return;let ut;try{ut=e.fn()}catch($){ut=Promise.reject($)}Promise.resolve(ut).then(tt).catch($=>{var lt;if(a)return;const et=e.retry??(isServer?0:3),_e=e.retryDelay??defaultRetryDelay,st=typeof _e=="function"?_e(s,$):_e,ft=et===!0||typeof et=="number"&&s<et||typeof et=="function"&&et(s,$);if(i||!ft){at($);return}s++,(lt=e.onFail)==null||lt.call(e,s,$),sleep(st).then(()=>{if(nt())return it()}).then(()=>{i?at($):rt()})})};return canFetch(e.networkMode)?rt():it().then(rt),{promise:g,cancel:_,continue:()=>(o==null?void 0:o())?g:Promise.resolve(),cancelRetry:b,continueRetry:j}}function createNotifyManager(){let e=[],i=0,s=tt=>{tt()},a=tt=>{tt()},o=tt=>setTimeout(tt,0);const c=tt=>{o=tt},d=tt=>{let at;i++;try{at=tt()}finally{i--,i||b()}return at},g=tt=>{i?e.push(tt):o(()=>{s(tt)})},_=tt=>(...at)=>{g(()=>{tt(...at)})},b=()=>{const tt=e;e=[],tt.length&&o(()=>{a(()=>{tt.forEach(at=>{s(at)})})})};return{batch:d,batchCalls:_,schedule:g,setNotifyFunction:tt=>{s=tt},setBatchNotifyFunction:tt=>{a=tt},setScheduler:c}}var notifyManager=createNotifyManager(),cr,Yt,Qr,lr,Ir,Gr,kr,Yr,Ur,Wr,Lr,Dr,Ar,Kr,Or,qr,Xr,mn,Zr,vn,Jr,yn,en,gn,tn,Sn,rn,En,nn,xn,ln,Rn,Mn,QueryObserver=(Mn=class extends Subscribable{constructor(i,s){super();Wt(this,Or);Wt(this,Xr);Wt(this,Zr);Wt(this,Jr);Wt(this,en);Wt(this,tn);Wt(this,rn);Wt(this,nn);Wt(this,ln);Wt(this,cr,void 0);Wt(this,Yt,void 0);Wt(this,Qr,void 0);Wt(this,lr,void 0);Wt(this,Ir,void 0);Wt(this,Gr,void 0);Wt(this,kr,void 0);Wt(this,Yr,void 0);Wt(this,Ur,void 0);Wt(this,Wr,void 0);Wt(this,Lr,void 0);Wt(this,Dr,void 0);Wt(this,Ar,void 0);Wt(this,Kr,new Set);this.options=s,Ht(this,cr,i),Ht(this,kr,null),this.bindMethods(),this.setOptions(s)}bindMethods(){this.refetch=this.refetch.bind(this)}onSubscribe(){this.listeners.size===1&&(Rt(this,Yt).addObserver(this),shouldFetchOnMount(Rt(this,Yt),this.options)?er(this,Or,qr).call(this):this.updateResult(),er(this,en,gn).call(this))}onUnsubscribe(){this.hasListeners()||this.destroy()}shouldFetchOnReconnect(){return shouldFetchOn(Rt(this,Yt),this.options,this.options.refetchOnReconnect)}shouldFetchOnWindowFocus(){return shouldFetchOn(Rt(this,Yt),this.options,this.options.refetchOnWindowFocus)}destroy(){this.listeners=new Set,er(this,tn,Sn).call(this),er(this,rn,En).call(this),Rt(this,Yt).removeObserver(this)}setOptions(i,s){const a=this.options,o=Rt(this,Yt);if(this.options=Rt(this,cr).defaultQueryOptions(i),shallowEqualObjects(a,this.options)||Rt(this,cr).getQueryCache().notify({type:"observerOptionsUpdated",query:Rt(this,Yt),observer:this}),typeof this.options.enabled<"u"&&typeof this.options.enabled!="boolean")throw new Error("Expected enabled to be a boolean");this.options.queryKey||(this.options.queryKey=a.queryKey),er(this,nn,xn).call(this);const c=this.hasListeners();c&&shouldFetchOptionally(Rt(this,Yt),o,this.options,a)&&er(this,Or,qr).call(this),this.updateResult(s),c&&(Rt(this,Yt)!==o||this.options.enabled!==a.enabled||this.options.staleTime!==a.staleTime)&&er(this,Xr,mn).call(this);const d=er(this,Zr,vn).call(this);c&&(Rt(this,Yt)!==o||this.options.enabled!==a.enabled||d!==Rt(this,Ar))&&er(this,Jr,yn).call(this,d)}getOptimisticResult(i){const s=Rt(this,cr).getQueryCache().build(Rt(this,cr),i),a=this.createResult(s,i);return shouldAssignObserverCurrentProperties(this,a)&&(Ht(this,lr,a),Ht(this,Gr,this.options),Ht(this,Ir,Rt(this,Yt).state)),a}getCurrentResult(){return Rt(this,lr)}trackResult(i){const s={};return Object.keys(i).forEach(a=>{Object.defineProperty(s,a,{configurable:!1,enumerable:!0,get:()=>(Rt(this,Kr).add(a),i[a])})}),s}getCurrentQuery(){return Rt(this,Yt)}refetch({...i}={}){return this.fetch({...i})}fetchOptimistic(i){const s=Rt(this,cr).defaultQueryOptions(i),a=Rt(this,cr).getQueryCache().build(Rt(this,cr),s);return a.isFetchingOptimistic=!0,a.fetch().then(()=>this.createResult(a,s))}fetch(i){return er(this,Or,qr).call(this,{...i,cancelRefetch:i.cancelRefetch??!0}).then(()=>(this.updateResult(),Rt(this,lr)))}createResult(i,s){var lt;const a=Rt(this,Yt),o=this.options,c=Rt(this,lr),d=Rt(this,Ir),g=Rt(this,Gr),b=i!==a?i.state:Rt(this,Qr),{state:j}=i;let{error:nt,errorUpdatedAt:tt,fetchStatus:at,status:it}=j,rt=!1,ut;if(s._optimisticResults){const ct=this.hasListeners(),dt=!ct&&shouldFetchOnMount(i,s),gt=ct&&shouldFetchOptionally(i,a,s,o);(dt||gt)&&(at=canFetch(i.options.networkMode)?"fetching":"paused",j.dataUpdatedAt||(it="pending")),s._optimisticResults==="isRestoring"&&(at="idle")}if(s.select&&typeof j.data<"u")if(c&&j.data===(d==null?void 0:d.data)&&s.select===Rt(this,Yr))ut=Rt(this,Ur);else try{Ht(this,Yr,s.select),ut=s.select(j.data),ut=replaceData(c==null?void 0:c.data,ut,s),Ht(this,Ur,ut),Ht(this,kr,null)}catch(ct){Ht(this,kr,ct)}else ut=j.data;if(typeof s.placeholderData<"u"&&typeof ut>"u"&&it==="pending"){let ct;if(c!=null&&c.isPlaceholderData&&s.placeholderData===(g==null?void 0:g.placeholderData))ct=c.data;else if(ct=typeof s.placeholderData=="function"?s.placeholderData((lt=Rt(this,Wr))==null?void 0:lt.state.data,Rt(this,Wr)):s.placeholderData,s.select&&typeof ct<"u")try{ct=s.select(ct),Ht(this,kr,null)}catch(dt){Ht(this,kr,dt)}typeof ct<"u"&&(it="success",ut=replaceData(c==null?void 0:c.data,ct,s),rt=!0)}Rt(this,kr)&&(nt=Rt(this,kr),ut=Rt(this,Ur),tt=Date.now(),it="error");const $=at==="fetching",et=it==="pending",_e=it==="error",st=et&&$;return{status:it,fetchStatus:at,isPending:et,isSuccess:it==="success",isError:_e,isInitialLoading:st,isLoading:st,data:ut,dataUpdatedAt:j.dataUpdatedAt,error:nt,errorUpdatedAt:tt,failureCount:j.fetchFailureCount,failureReason:j.fetchFailureReason,errorUpdateCount:j.errorUpdateCount,isFetched:j.dataUpdateCount>0||j.errorUpdateCount>0,isFetchedAfterMount:j.dataUpdateCount>b.dataUpdateCount||j.errorUpdateCount>b.errorUpdateCount,isFetching:$,isRefetching:$&&!et,isLoadingError:_e&&j.dataUpdatedAt===0,isPaused:at==="paused",isPlaceholderData:rt,isRefetchError:_e&&j.dataUpdatedAt!==0,isStale:isStale(i,s),refetch:this.refetch}}updateResult(i){const s=Rt(this,lr),a=this.createResult(Rt(this,Yt),this.options);if(Ht(this,Ir,Rt(this,Yt).state),Ht(this,Gr,this.options),Rt(this,Ir).data!==void 0&&Ht(this,Wr,Rt(this,Yt)),shallowEqualObjects(a,s))return;Ht(this,lr,a);const o={},c=()=>{if(!s)return!0;const{notifyOnChangeProps:d}=this.options,g=typeof d=="function"?d():d;if(g==="all"||!g&&!Rt(this,Kr).size)return!0;const _=new Set(g??Rt(this,Kr));return this.options.throwOnError&&_.add("error"),Object.keys(Rt(this,lr)).some(b=>{const j=b;return Rt(this,lr)[j]!==s[j]&&_.has(j)})};(i==null?void 0:i.listeners)!==!1&&c()&&(o.listeners=!0),er(this,ln,Rn).call(this,{...o,...i})}onQueryUpdate(){this.updateResult(),this.hasListeners()&&er(this,en,gn).call(this)}},cr=new WeakMap,Yt=new WeakMap,Qr=new WeakMap,lr=new WeakMap,Ir=new WeakMap,Gr=new WeakMap,kr=new WeakMap,Yr=new WeakMap,Ur=new WeakMap,Wr=new WeakMap,Lr=new WeakMap,Dr=new WeakMap,Ar=new WeakMap,Kr=new WeakMap,Or=new WeakSet,qr=function(i){er(this,nn,xn).call(this);let s=Rt(this,Yt).fetch(this.options,i);return i!=null&&i.throwOnError||(s=s.catch(noop$1)),s},Xr=new WeakSet,mn=function(){if(er(this,tn,Sn).call(this),isServer||Rt(this,lr).isStale||!isValidTimeout(this.options.staleTime))return;const s=timeUntilStale(Rt(this,lr).dataUpdatedAt,this.options.staleTime)+1;Ht(this,Lr,setTimeout(()=>{Rt(this,lr).isStale||this.updateResult()},s))},Zr=new WeakSet,vn=function(){return(typeof this.options.refetchInterval=="function"?this.options.refetchInterval(Rt(this,Yt)):this.options.refetchInterval)??!1},Jr=new WeakSet,yn=function(i){er(this,rn,En).call(this),Ht(this,Ar,i),!(isServer||this.options.enabled===!1||!isValidTimeout(Rt(this,Ar))||Rt(this,Ar)===0)&&Ht(this,Dr,setInterval(()=>{(this.options.refetchIntervalInBackground||focusManager.isFocused())&&er(this,Or,qr).call(this)},Rt(this,Ar)))},en=new WeakSet,gn=function(){er(this,Xr,mn).call(this),er(this,Jr,yn).call(this,er(this,Zr,vn).call(this))},tn=new WeakSet,Sn=function(){Rt(this,Lr)&&(clearTimeout(Rt(this,Lr)),Ht(this,Lr,void 0))},rn=new WeakSet,En=function(){Rt(this,Dr)&&(clearInterval(Rt(this,Dr)),Ht(this,Dr,void 0))},nn=new WeakSet,xn=function(){const i=Rt(this,cr).getQueryCache().build(Rt(this,cr),this.options);if(i===Rt(this,Yt))return;const s=Rt(this,Yt);Ht(this,Yt,i),Ht(this,Qr,i.state),this.hasListeners()&&(s==null||s.removeObserver(this),i.addObserver(this))},ln=new WeakSet,Rn=function(i){notifyManager.batch(()=>{i.listeners&&this.listeners.forEach(s=>{s(Rt(this,lr))}),Rt(this,cr).getQueryCache().notify({query:Rt(this,Yt),type:"observerResultsUpdated"})})},Mn);function shouldLoadOnMount(e,i){return i.enabled!==!1&&!e.state.dataUpdatedAt&&!(e.state.status==="error"&&i.retryOnMount===!1)}function shouldFetchOnMount(e,i){return shouldLoadOnMount(e,i)||e.state.dataUpdatedAt>0&&shouldFetchOn(e,i,i.refetchOnMount)}function shouldFetchOn(e,i,s){if(i.enabled!==!1){const a=typeof s=="function"?s(e):s;return a==="always"||a!==!1&&isStale(e,i)}return!1}function shouldFetchOptionally(e,i,s,a){return s.enabled!==!1&&(e!==i||a.enabled===!1)&&(!s.suspense||e.state.status!=="error")&&isStale(e,s)}function isStale(e,i){return e.isStaleByTime(i.staleTime)}function shouldAssignObserverCurrentProperties(e,i){return!shallowEqualObjects(e.getCurrentResult(),i)}var QueryClientContext=reactExports.createContext(void 0),useQueryClient=e=>{const i=reactExports.useContext(QueryClientContext);if(e)return e;if(!i)throw new Error("No QueryClient set, use QueryClientProvider to set one");return i},QueryClientProvider=({client:e,children:i})=>(reactExports.useEffect(()=>(e.mount(),()=>{e.unmount()}),[e]),reactExports.createElement(QueryClientContext.Provider,{value:e},i)),IsRestoringContext=reactExports.createContext(!1),useIsRestoring=()=>reactExports.useContext(IsRestoringContext);IsRestoringContext.Provider;function createValue(){let e=!1;return{clearReset:()=>{e=!1},reset:()=>{e=!0},isReset:()=>e}}var QueryErrorResetBoundaryContext=reactExports.createContext(createValue()),useQueryErrorResetBoundary=()=>reactExports.useContext(QueryErrorResetBoundaryContext);function shouldThrowError(e,i){return typeof e=="function"?e(...i):!!e}var ensurePreventErrorBoundaryRetry=(e,i)=>{(e.suspense||e.throwOnError)&&(i.isReset()||(e.retryOnMount=!1))},useClearResetErrorBoundary=e=>{reactExports.useEffect(()=>{e.clearReset()},[e])},getHasError=({result:e,errorResetBoundary:i,throwOnError:s,query:a})=>e.isError&&!i.isReset()&&!e.isFetching&&a&&shouldThrowError(s,[e.error,a]),ensureStaleTime=e=>{e.suspense&&typeof e.staleTime!="number"&&(e.staleTime=1e3)},shouldSuspend=(e,i)=>(e==null?void 0:e.suspense)&&i.isPending,fetchOptimistic=(e,i,s)=>i.fetchOptimistic(e).catch(()=>{s.clearReset()});function useBaseQuery(e,i,s){const a=useQueryClient(s),o=useIsRestoring(),c=useQueryErrorResetBoundary(),d=a.defaultQueryOptions(e);d._optimisticResults=o?"isRestoring":"optimistic",ensureStaleTime(d),ensurePreventErrorBoundaryRetry(d,c),useClearResetErrorBoundary(c);const[g]=reactExports.useState(()=>new i(a,d)),_=g.getOptimisticResult(d);if(reactExports.useSyncExternalStore(reactExports.useCallback(b=>{const j=o?()=>{}:g.subscribe(notifyManager.batchCalls(b));return g.updateResult(),j},[g,o]),()=>g.getCurrentResult(),()=>g.getCurrentResult()),reactExports.useEffect(()=>{g.setOptions(d,{listeners:!1})},[d,g]),shouldSuspend(d,_))throw fetchOptimistic(d,g,c);if(getHasError({result:_,errorResetBoundary:c,throwOnError:d.throwOnError,query:a.getQueryCache().get(d.queryHash)}))throw _.error;return d.notifyOnChangeProps?_:g.trackResult(_)}function useQuery(e,i){return useBaseQuery(e,QueryObserver,i)}function bind(e,i){return function(){return e.apply(i,arguments)}}const{toString}=Object.prototype,{getPrototypeOf}=Object,kindOf=(e=>i=>{const s=toString.call(i);return e[s]||(e[s]=s.slice(8,-1).toLowerCase())})(Object.create(null)),kindOfTest=e=>(e=e.toLowerCase(),i=>kindOf(i)===e),typeOfTest=e=>i=>typeof i===e,{isArray}=Array,isUndefined=typeOfTest("undefined");function isBuffer(e){return e!==null&&!isUndefined(e)&&e.constructor!==null&&!isUndefined(e.constructor)&&isFunction(e.constructor.isBuffer)&&e.constructor.isBuffer(e)}const isArrayBuffer=kindOfTest("ArrayBuffer");function isArrayBufferView(e){let i;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?i=ArrayBuffer.isView(e):i=e&&e.buffer&&isArrayBuffer(e.buffer),i}const isString=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject=e=>e!==null&&typeof e=="object",isBoolean=e=>e===!0||e===!1,isPlainObject=e=>{if(kindOf(e)!=="object")return!1;const i=getPrototypeOf(e);return(i===null||i===Object.prototype||Object.getPrototypeOf(i)===null)&&!(Symbol.toStringTag in e)&&!(Symbol.iterator in e)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isStream=e=>isObject(e)&&isFunction(e.pipe),isFormData=e=>{let i;return e&&(typeof FormData=="function"&&e instanceof FormData||isFunction(e.append)&&((i=kindOf(e))==="formdata"||i==="object"&&isFunction(e.toString)&&e.toString()==="[object FormData]"))},isURLSearchParams=kindOfTest("URLSearchParams"),trim=e=>e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function forEach(e,i,{allOwnKeys:s=!1}={}){if(e===null||typeof e>"u")return;let a,o;if(typeof e!="object"&&(e=[e]),isArray(e))for(a=0,o=e.length;a<o;a++)i.call(null,e[a],a,e);else{const c=s?Object.getOwnPropertyNames(e):Object.keys(e),d=c.length;let g;for(a=0;a<d;a++)g=c[a],i.call(null,e[g],g,e)}}function findKey(e,i){i=i.toLowerCase();const s=Object.keys(e);let a=s.length,o;for(;a-- >0;)if(o=s[a],i===o.toLowerCase())return o;return null}const _global=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),isContextDefined=e=>!isUndefined(e)&&e!==_global;function merge(){const{caseless:e}=isContextDefined(this)&&this||{},i={},s=(a,o)=>{const c=e&&findKey(i,o)||o;isPlainObject(i[c])&&isPlainObject(a)?i[c]=merge(i[c],a):isPlainObject(a)?i[c]=merge({},a):isArray(a)?i[c]=a.slice():i[c]=a};for(let a=0,o=arguments.length;a<o;a++)arguments[a]&&forEach(arguments[a],s);return i}const extend=(e,i,s,{allOwnKeys:a}={})=>(forEach(i,(o,c)=>{s&&isFunction(o)?e[c]=bind(o,s):e[c]=o},{allOwnKeys:a}),e),stripBOM=e=>(e.charCodeAt(0)===65279&&(e=e.slice(1)),e),inherits=(e,i,s,a)=>{e.prototype=Object.create(i.prototype,a),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:i.prototype}),s&&Object.assign(e.prototype,s)},toFlatObject=(e,i,s,a)=>{let o,c,d;const g={};if(i=i||{},e==null)return i;do{for(o=Object.getOwnPropertyNames(e),c=o.length;c-- >0;)d=o[c],(!a||a(d,e,i))&&!g[d]&&(i[d]=e[d],g[d]=!0);e=s!==!1&&getPrototypeOf(e)}while(e&&(!s||s(e,i))&&e!==Object.prototype);return i},endsWith=(e,i,s)=>{e=String(e),(s===void 0||s>e.length)&&(s=e.length),s-=i.length;const a=e.indexOf(i,s);return a!==-1&&a===s},toArray=e=>{if(!e)return null;if(isArray(e))return e;let i=e.length;if(!isNumber(i))return null;const s=new Array(i);for(;i-- >0;)s[i]=e[i];return s},isTypedArray=(e=>i=>e&&i instanceof e)(typeof Uint8Array<"u"&&getPrototypeOf(Uint8Array)),forEachEntry=(e,i)=>{const a=(e&&e[Symbol.iterator]).call(e);let o;for(;(o=a.next())&&!o.done;){const c=o.value;i.call(e,c[0],c[1])}},matchAll=(e,i)=>{let s;const a=[];for(;(s=e.exec(i))!==null;)a.push(s);return a},isHTMLForm=kindOfTest("HTMLFormElement"),toCamelCase=e=>e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(s,a,o){return a.toUpperCase()+o}),hasOwnProperty=(({hasOwnProperty:e})=>(i,s)=>e.call(i,s))(Object.prototype),isRegExp=kindOfTest("RegExp"),reduceDescriptors=(e,i)=>{const s=Object.getOwnPropertyDescriptors(e),a={};forEach(s,(o,c)=>{let d;(d=i(o,c,e))!==!1&&(a[c]=d||o)}),Object.defineProperties(e,a)},freezeMethods=e=>{reduceDescriptors(e,(i,s)=>{if(isFunction(e)&&["arguments","caller","callee"].indexOf(s)!==-1)return!1;const a=e[s];if(isFunction(a)){if(i.enumerable=!1,"writable"in i){i.writable=!1;return}i.set||(i.set=()=>{throw Error("Can not rewrite read-only method '"+s+"'")})}})},toObjectSet=(e,i)=>{const s={},a=o=>{o.forEach(c=>{s[c]=!0})};return isArray(e)?a(e):a(String(e).split(i)),s},noop=()=>{},toFiniteNumber=(e,i)=>(e=+e,Number.isFinite(e)?e:i),ALPHA="abcdefghijklmnopqrstuvwxyz",DIGIT="0123456789",ALPHABET={DIGIT,ALPHA,ALPHA_DIGIT:ALPHA+ALPHA.toUpperCase()+DIGIT},generateString=(e=16,i=ALPHABET.ALPHA_DIGIT)=>{let s="";const{length:a}=i;for(;e--;)s+=i[Math.random()*a|0];return s};function isSpecCompliantForm(e){return!!(e&&isFunction(e.append)&&e[Symbol.toStringTag]==="FormData"&&e[Symbol.iterator])}const toJSONObject=e=>{const i=new Array(10),s=(a,o)=>{if(isObject(a)){if(i.indexOf(a)>=0)return;if(!("toJSON"in a)){i[o]=a;const c=isArray(a)?[]:{};return forEach(a,(d,g)=>{const _=s(d,o+1);!isUndefined(_)&&(c[g]=_)}),i[o]=void 0,c}}return a};return s(e,0)},isAsyncFn=kindOfTest("AsyncFunction"),isThenable=e=>e&&(isObject(e)||isFunction(e))&&isFunction(e.then)&&isFunction(e.catch),utils$1={isArray,isArrayBuffer,isBuffer,isFormData,isArrayBufferView,isString,isNumber,isBoolean,isObject,isPlainObject,isUndefined,isDate,isFile,isBlob,isRegExp,isFunction,isStream,isURLSearchParams,isTypedArray,isFileList,forEach,merge,extend,trim,stripBOM,inherits,toFlatObject,kindOf,kindOfTest,endsWith,toArray,forEachEntry,matchAll,isHTMLForm,hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors,freezeMethods,toObjectSet,toCamelCase,noop,toFiniteNumber,findKey,global:_global,isContextDefined,ALPHABET,generateString,isSpecCompliantForm,toJSONObject,isAsyncFn,isThenable};function AxiosError(e,i,s,a,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=e,this.name="AxiosError",i&&(this.code=i),s&&(this.config=s),a&&(this.request=a),o&&(this.response=o)}utils$1.inherits(AxiosError,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils$1.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(e=>{descriptors[e]={value:e}});Object.defineProperties(AxiosError,descriptors);Object.defineProperty(prototype$1,"isAxiosError",{value:!0});AxiosError.from=(e,i,s,a,o,c)=>{const d=Object.create(prototype$1);return utils$1.toFlatObject(e,d,function(_){return _!==Error.prototype},g=>g!=="isAxiosError"),AxiosError.call(d,e.message,i,s,a,o),d.cause=e,d.name=e.name,c&&Object.assign(d,c),d};const httpAdapter=null;function isVisitable(e){return utils$1.isPlainObject(e)||utils$1.isArray(e)}function removeBrackets(e){return utils$1.endsWith(e,"[]")?e.slice(0,-2):e}function renderKey(e,i,s){return e?e.concat(i).map(function(o,c){return o=removeBrackets(o),!s&&c?"["+o+"]":o}).join(s?".":""):i}function isFlatArray(e){return utils$1.isArray(e)&&!e.some(isVisitable)}const predicates=utils$1.toFlatObject(utils$1,{},null,function(i){return/^is[A-Z]/.test(i)});function toFormData(e,i,s){if(!utils$1.isObject(e))throw new TypeError("target must be an object");i=i||new FormData,s=utils$1.toFlatObject(s,{metaTokens:!0,dots:!1,indexes:!1},!1,function(rt,ut){return!utils$1.isUndefined(ut[rt])});const a=s.metaTokens,o=s.visitor||j,c=s.dots,d=s.indexes,_=(s.Blob||typeof Blob<"u"&&Blob)&&utils$1.isSpecCompliantForm(i);if(!utils$1.isFunction(o))throw new TypeError("visitor must be a function");function b(it){if(it===null)return"";if(utils$1.isDate(it))return it.toISOString();if(!_&&utils$1.isBlob(it))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils$1.isArrayBuffer(it)||utils$1.isTypedArray(it)?_&&typeof Blob=="function"?new Blob([it]):Buffer.from(it):it}function j(it,rt,ut){let $=it;if(it&&!ut&&typeof it=="object"){if(utils$1.endsWith(rt,"{}"))rt=a?rt:rt.slice(0,-2),it=JSON.stringify(it);else if(utils$1.isArray(it)&&isFlatArray(it)||(utils$1.isFileList(it)||utils$1.endsWith(rt,"[]"))&&($=utils$1.toArray(it)))return rt=removeBrackets(rt),$.forEach(function(_e,st){!(utils$1.isUndefined(_e)||_e===null)&&i.append(d===!0?renderKey([rt],st,c):d===null?rt:rt+"[]",b(_e))}),!1}return isVisitable(it)?!0:(i.append(renderKey(ut,rt,c),b(it)),!1)}const nt=[],tt=Object.assign(predicates,{defaultVisitor:j,convertValue:b,isVisitable});function at(it,rt){if(!utils$1.isUndefined(it)){if(nt.indexOf(it)!==-1)throw Error("Circular reference detected in "+rt.join("."));nt.push(it),utils$1.forEach(it,function($,et){(!(utils$1.isUndefined($)||$===null)&&o.call(i,$,utils$1.isString(et)?et.trim():et,rt,tt))===!0&&at($,rt?rt.concat(et):[et])}),nt.pop()}}if(!utils$1.isObject(e))throw new TypeError("data must be an object");return at(e),i}function encode$1(e){const i={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,function(a){return i[a]})}function AxiosURLSearchParams(e,i){this._pairs=[],e&&toFormData(e,this,i)}const prototype=AxiosURLSearchParams.prototype;prototype.append=function(i,s){this._pairs.push([i,s])};prototype.toString=function(i){const s=i?function(a){return i.call(this,a,encode$1)}:encode$1;return this._pairs.map(function(o){return s(o[0])+"="+s(o[1])},"").join("&")};function encode(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(e,i,s){if(!i)return e;const a=s&&s.encode||encode,o=s&&s.serialize;let c;if(o?c=o(i,s):c=utils$1.isURLSearchParams(i)?i.toString():new AxiosURLSearchParams(i,s).toString(a),c){const d=e.indexOf("#");d!==-1&&(e=e.slice(0,d)),e+=(e.indexOf("?")===-1?"?":"&")+c}return e}class InterceptorManager{constructor(){this.handlers=[]}use(i,s,a){return this.handlers.push({fulfilled:i,rejected:s,synchronous:a?a.synchronous:!1,runWhen:a?a.runWhen:null}),this.handlers.length-1}eject(i){this.handlers[i]&&(this.handlers[i]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(i){utils$1.forEach(this.handlers,function(a){a!==null&&i(a)})}}const InterceptorManager$1=InterceptorManager,transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1=typeof URLSearchParams<"u"?URLSearchParams:AxiosURLSearchParams,FormData$1=typeof FormData<"u"?FormData:null,Blob$1=typeof Blob<"u"?Blob:null,platform$1={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob$1},protocols:["http","https","file","blob","url","data"]},hasBrowserEnv=typeof window<"u"&&typeof document<"u",hasStandardBrowserEnv=(e=>hasBrowserEnv&&["ReactNative","NativeScript","NS"].indexOf(e)<0)(typeof navigator<"u"&&navigator.product),hasStandardBrowserWebWorkerEnv=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),utils=Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv,hasStandardBrowserEnv,hasStandardBrowserWebWorkerEnv},Symbol.toStringTag,{value:"Module"})),platform={...utils,...platform$1};function toURLEncodedForm(e,i){return toFormData(e,new platform.classes.URLSearchParams,Object.assign({visitor:function(s,a,o,c){return platform.isNode&&utils$1.isBuffer(s)?(this.append(a,s.toString("base64")),!1):c.defaultVisitor.apply(this,arguments)}},i))}function parsePropPath(e){return utils$1.matchAll(/\w+|\[(\w*)]/g,e).map(i=>i[0]==="[]"?"":i[1]||i[0])}function arrayToObject(e){const i={},s=Object.keys(e);let a;const o=s.length;let c;for(a=0;a<o;a++)c=s[a],i[c]=e[c];return i}function formDataToJSON(e){function i(s,a,o,c){let d=s[c++];const g=Number.isFinite(+d),_=c>=s.length;return d=!d&&utils$1.isArray(o)?o.length:d,_?(utils$1.hasOwnProp(o,d)?o[d]=[o[d],a]:o[d]=a,!g):((!o[d]||!utils$1.isObject(o[d]))&&(o[d]=[]),i(s,a,o[d],c)&&utils$1.isArray(o[d])&&(o[d]=arrayToObject(o[d])),!g)}if(utils$1.isFormData(e)&&utils$1.isFunction(e.entries)){const s={};return utils$1.forEachEntry(e,(a,o)=>{i(parsePropPath(a),o,s,0)}),s}return null}function stringifySafely(e,i,s){if(utils$1.isString(e))try{return(i||JSON.parse)(e),utils$1.trim(e)}catch(a){if(a.name!=="SyntaxError")throw a}return(s||JSON.stringify)(e)}const defaults={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function(i,s){const a=s.getContentType()||"",o=a.indexOf("application/json")>-1,c=utils$1.isObject(i);if(c&&utils$1.isHTMLForm(i)&&(i=new FormData(i)),utils$1.isFormData(i))return o&&o?JSON.stringify(formDataToJSON(i)):i;if(utils$1.isArrayBuffer(i)||utils$1.isBuffer(i)||utils$1.isStream(i)||utils$1.isFile(i)||utils$1.isBlob(i))return i;if(utils$1.isArrayBufferView(i))return i.buffer;if(utils$1.isURLSearchParams(i))return s.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),i.toString();let g;if(c){if(a.indexOf("application/x-www-form-urlencoded")>-1)return toURLEncodedForm(i,this.formSerializer).toString();if((g=utils$1.isFileList(i))||a.indexOf("multipart/form-data")>-1){const _=this.env&&this.env.FormData;return toFormData(g?{"files[]":i}:i,_&&new _,this.formSerializer)}}return c||o?(s.setContentType("application/json",!1),stringifySafely(i)):i}],transformResponse:[function(i){const s=this.transitional||defaults.transitional,a=s&&s.forcedJSONParsing,o=this.responseType==="json";if(i&&utils$1.isString(i)&&(a&&!this.responseType||o)){const d=!(s&&s.silentJSONParsing)&&o;try{return JSON.parse(i)}catch(g){if(d)throw g.name==="SyntaxError"?AxiosError.from(g,AxiosError.ERR_BAD_RESPONSE,this,null,this.response):g}}return i}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function(i){return i>=200&&i<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};utils$1.forEach(["delete","get","head","post","put","patch"],e=>{defaults.headers[e]={}});const defaults$1=defaults,ignoreDuplicateOf=utils$1.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),parseHeaders=e=>{const i={};let s,a,o;return e&&e.split(`
`).forEach(function(d){o=d.indexOf(":"),s=d.substring(0,o).trim().toLowerCase(),a=d.substring(o+1).trim(),!(!s||i[s]&&ignoreDuplicateOf[s])&&(s==="set-cookie"?i[s]?i[s].push(a):i[s]=[a]:i[s]=i[s]?i[s]+", "+a:a)}),i},$internals=Symbol("internals");function normalizeHeader(e){return e&&String(e).trim().toLowerCase()}function normalizeValue(e){return e===!1||e==null?e:utils$1.isArray(e)?e.map(normalizeValue):String(e)}function parseTokens(e){const i=Object.create(null),s=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let a;for(;a=s.exec(e);)i[a[1]]=a[2];return i}const isValidHeaderName=e=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(e.trim());function matchHeaderValue(e,i,s,a,o){if(utils$1.isFunction(a))return a.call(this,i,s);if(o&&(i=s),!!utils$1.isString(i)){if(utils$1.isString(a))return i.indexOf(a)!==-1;if(utils$1.isRegExp(a))return a.test(i)}}function formatHeader(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(i,s,a)=>s.toUpperCase()+a)}function buildAccessors(e,i){const s=utils$1.toCamelCase(" "+i);["get","set","has"].forEach(a=>{Object.defineProperty(e,a+s,{value:function(o,c,d){return this[a].call(this,i,o,c,d)},configurable:!0})})}class AxiosHeaders{constructor(i){i&&this.set(i)}set(i,s,a){const o=this;function c(g,_,b){const j=normalizeHeader(_);if(!j)throw new Error("header name must be a non-empty string");const nt=utils$1.findKey(o,j);(!nt||o[nt]===void 0||b===!0||b===void 0&&o[nt]!==!1)&&(o[nt||_]=normalizeValue(g))}const d=(g,_)=>utils$1.forEach(g,(b,j)=>c(b,j,_));return utils$1.isPlainObject(i)||i instanceof this.constructor?d(i,s):utils$1.isString(i)&&(i=i.trim())&&!isValidHeaderName(i)?d(parseHeaders(i),s):i!=null&&c(s,i,a),this}get(i,s){if(i=normalizeHeader(i),i){const a=utils$1.findKey(this,i);if(a){const o=this[a];if(!s)return o;if(s===!0)return parseTokens(o);if(utils$1.isFunction(s))return s.call(this,o,a);if(utils$1.isRegExp(s))return s.exec(o);throw new TypeError("parser must be boolean|regexp|function")}}}has(i,s){if(i=normalizeHeader(i),i){const a=utils$1.findKey(this,i);return!!(a&&this[a]!==void 0&&(!s||matchHeaderValue(this,this[a],a,s)))}return!1}delete(i,s){const a=this;let o=!1;function c(d){if(d=normalizeHeader(d),d){const g=utils$1.findKey(a,d);g&&(!s||matchHeaderValue(a,a[g],g,s))&&(delete a[g],o=!0)}}return utils$1.isArray(i)?i.forEach(c):c(i),o}clear(i){const s=Object.keys(this);let a=s.length,o=!1;for(;a--;){const c=s[a];(!i||matchHeaderValue(this,this[c],c,i,!0))&&(delete this[c],o=!0)}return o}normalize(i){const s=this,a={};return utils$1.forEach(this,(o,c)=>{const d=utils$1.findKey(a,c);if(d){s[d]=normalizeValue(o),delete s[c];return}const g=i?formatHeader(c):String(c).trim();g!==c&&delete s[c],s[g]=normalizeValue(o),a[g]=!0}),this}concat(...i){return this.constructor.concat(this,...i)}toJSON(i){const s=Object.create(null);return utils$1.forEach(this,(a,o)=>{a!=null&&a!==!1&&(s[o]=i&&utils$1.isArray(a)?a.join(", "):a)}),s}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([i,s])=>i+": "+s).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(i){return i instanceof this?i:new this(i)}static concat(i,...s){const a=new this(i);return s.forEach(o=>a.set(o)),a}static accessor(i){const a=(this[$internals]=this[$internals]={accessors:{}}).accessors,o=this.prototype;function c(d){const g=normalizeHeader(d);a[g]||(buildAccessors(o,d),a[g]=!0)}return utils$1.isArray(i)?i.forEach(c):c(i),this}}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);utils$1.reduceDescriptors(AxiosHeaders.prototype,({value:e},i)=>{let s=i[0].toUpperCase()+i.slice(1);return{get:()=>e,set(a){this[s]=a}}});utils$1.freezeMethods(AxiosHeaders);const AxiosHeaders$1=AxiosHeaders;function transformData(e,i){const s=this||defaults$1,a=i||s,o=AxiosHeaders$1.from(a.headers);let c=a.data;return utils$1.forEach(e,function(g){c=g.call(s,c,o.normalize(),i?i.status:void 0)}),o.normalize(),c}function isCancel(e){return!!(e&&e.__CANCEL__)}function CanceledError(e,i,s){AxiosError.call(this,e??"canceled",AxiosError.ERR_CANCELED,i,s),this.name="CanceledError"}utils$1.inherits(CanceledError,AxiosError,{__CANCEL__:!0});function settle(e,i,s){const a=s.config.validateStatus;!s.status||!a||a(s.status)?e(s):i(new AxiosError("Request failed with status code "+s.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(s.status/100)-4],s.config,s.request,s))}const cookies=platform.hasStandardBrowserEnv?{write(e,i,s,a,o,c){const d=[e+"="+encodeURIComponent(i)];utils$1.isNumber(s)&&d.push("expires="+new Date(s).toGMTString()),utils$1.isString(a)&&d.push("path="+a),utils$1.isString(o)&&d.push("domain="+o),c===!0&&d.push("secure"),document.cookie=d.join("; ")},read(e){const i=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return i?decodeURIComponent(i[3]):null},remove(e){this.write(e,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function isAbsoluteURL(e){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(e)}function combineURLs(e,i){return i?e.replace(/\/+$/,"")+"/"+i.replace(/^\/+/,""):e}function buildFullPath(e,i){return e&&!isAbsoluteURL(i)?combineURLs(e,i):i}const isURLSameOrigin=platform.hasStandardBrowserEnv?function(){const i=/(msie|trident)/i.test(navigator.userAgent),s=document.createElement("a");let a;function o(c){let d=c;return i&&(s.setAttribute("href",d),d=s.href),s.setAttribute("href",d),{href:s.href,protocol:s.protocol?s.protocol.replace(/:$/,""):"",host:s.host,search:s.search?s.search.replace(/^\?/,""):"",hash:s.hash?s.hash.replace(/^#/,""):"",hostname:s.hostname,port:s.port,pathname:s.pathname.charAt(0)==="/"?s.pathname:"/"+s.pathname}}return a=o(window.location.href),function(d){const g=utils$1.isString(d)?o(d):d;return g.protocol===a.protocol&&g.host===a.host}}():function(){return function(){return!0}}();function parseProtocol(e){const i=/^([-+\w]{1,25})(:?\/\/|:)/.exec(e);return i&&i[1]||""}function speedometer(e,i){e=e||10;const s=new Array(e),a=new Array(e);let o=0,c=0,d;return i=i!==void 0?i:1e3,function(_){const b=Date.now(),j=a[c];d||(d=b),s[o]=_,a[o]=b;let nt=c,tt=0;for(;nt!==o;)tt+=s[nt++],nt=nt%e;if(o=(o+1)%e,o===c&&(c=(c+1)%e),b-d<i)return;const at=j&&b-j;return at?Math.round(tt*1e3/at):void 0}}function progressEventReducer(e,i){let s=0;const a=speedometer(50,250);return o=>{const c=o.loaded,d=o.lengthComputable?o.total:void 0,g=c-s,_=a(g),b=c<=d;s=c;const j={loaded:c,total:d,progress:d?c/d:void 0,bytes:g,rate:_||void 0,estimated:_&&d&&b?(d-c)/_:void 0,event:o};j[i?"download":"upload"]=!0,e(j)}}const isXHRAdapterSupported=typeof XMLHttpRequest<"u",xhrAdapter=isXHRAdapterSupported&&function(e){return new Promise(function(s,a){let o=e.data;const c=AxiosHeaders$1.from(e.headers).normalize();let{responseType:d,withXSRFToken:g}=e,_;function b(){e.cancelToken&&e.cancelToken.unsubscribe(_),e.signal&&e.signal.removeEventListener("abort",_)}let j;if(utils$1.isFormData(o)){if(platform.hasStandardBrowserEnv||platform.hasStandardBrowserWebWorkerEnv)c.setContentType(!1);else if((j=c.getContentType())!==!1){const[rt,...ut]=j?j.split(";").map($=>$.trim()).filter(Boolean):[];c.setContentType([rt||"multipart/form-data",...ut].join("; "))}}let nt=new XMLHttpRequest;if(e.auth){const rt=e.auth.username||"",ut=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";c.set("Authorization","Basic "+btoa(rt+":"+ut))}const tt=buildFullPath(e.baseURL,e.url);nt.open(e.method.toUpperCase(),buildURL(tt,e.params,e.paramsSerializer),!0),nt.timeout=e.timeout;function at(){if(!nt)return;const rt=AxiosHeaders$1.from("getAllResponseHeaders"in nt&&nt.getAllResponseHeaders()),$={data:!d||d==="text"||d==="json"?nt.responseText:nt.response,status:nt.status,statusText:nt.statusText,headers:rt,config:e,request:nt};settle(function(_e){s(_e),b()},function(_e){a(_e),b()},$),nt=null}if("onloadend"in nt?nt.onloadend=at:nt.onreadystatechange=function(){!nt||nt.readyState!==4||nt.status===0&&!(nt.responseURL&&nt.responseURL.indexOf("file:")===0)||setTimeout(at)},nt.onabort=function(){nt&&(a(new AxiosError("Request aborted",AxiosError.ECONNABORTED,e,nt)),nt=null)},nt.onerror=function(){a(new AxiosError("Network Error",AxiosError.ERR_NETWORK,e,nt)),nt=null},nt.ontimeout=function(){let ut=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded";const $=e.transitional||transitionalDefaults;e.timeoutErrorMessage&&(ut=e.timeoutErrorMessage),a(new AxiosError(ut,$.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,e,nt)),nt=null},platform.hasStandardBrowserEnv&&(g&&utils$1.isFunction(g)&&(g=g(e)),g||g!==!1&&isURLSameOrigin(tt))){const rt=e.xsrfHeaderName&&e.xsrfCookieName&&cookies.read(e.xsrfCookieName);rt&&c.set(e.xsrfHeaderName,rt)}o===void 0&&c.setContentType(null),"setRequestHeader"in nt&&utils$1.forEach(c.toJSON(),function(ut,$){nt.setRequestHeader($,ut)}),utils$1.isUndefined(e.withCredentials)||(nt.withCredentials=!!e.withCredentials),d&&d!=="json"&&(nt.responseType=e.responseType),typeof e.onDownloadProgress=="function"&&nt.addEventListener("progress",progressEventReducer(e.onDownloadProgress,!0)),typeof e.onUploadProgress=="function"&&nt.upload&&nt.upload.addEventListener("progress",progressEventReducer(e.onUploadProgress)),(e.cancelToken||e.signal)&&(_=rt=>{nt&&(a(!rt||rt.type?new CanceledError(null,e,nt):rt),nt.abort(),nt=null)},e.cancelToken&&e.cancelToken.subscribe(_),e.signal&&(e.signal.aborted?_():e.signal.addEventListener("abort",_)));const it=parseProtocol(tt);if(it&&platform.protocols.indexOf(it)===-1){a(new AxiosError("Unsupported protocol "+it+":",AxiosError.ERR_BAD_REQUEST,e));return}nt.send(o||null)})},knownAdapters={http:httpAdapter,xhr:xhrAdapter};utils$1.forEach(knownAdapters,(e,i)=>{if(e){try{Object.defineProperty(e,"name",{value:i})}catch{}Object.defineProperty(e,"adapterName",{value:i})}});const renderReason=e=>`- ${e}`,isResolvedHandle=e=>utils$1.isFunction(e)||e===null||e===!1,adapters={getAdapter:e=>{e=utils$1.isArray(e)?e:[e];const{length:i}=e;let s,a;const o={};for(let c=0;c<i;c++){s=e[c];let d;if(a=s,!isResolvedHandle(s)&&(a=knownAdapters[(d=String(s)).toLowerCase()],a===void 0))throw new AxiosError(`Unknown adapter '${d}'`);if(a)break;o[d||"#"+c]=a}if(!a){const c=Object.entries(o).map(([g,_])=>`adapter ${g} `+(_===!1?"is not supported by the environment":"is not available in the build"));let d=i?c.length>1?`since :
`+c.map(renderReason).join(`
`):" "+renderReason(c[0]):"as no adapter specified";throw new AxiosError("There is no suitable adapter to dispatch the request "+d,"ERR_NOT_SUPPORT")}return a},adapters:knownAdapters};function throwIfCancellationRequested(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new CanceledError(null,e)}function dispatchRequest(e){return throwIfCancellationRequested(e),e.headers=AxiosHeaders$1.from(e.headers),e.data=transformData.call(e,e.transformRequest),["post","put","patch"].indexOf(e.method)!==-1&&e.headers.setContentType("application/x-www-form-urlencoded",!1),adapters.getAdapter(e.adapter||defaults$1.adapter)(e).then(function(a){return throwIfCancellationRequested(e),a.data=transformData.call(e,e.transformResponse,a),a.headers=AxiosHeaders$1.from(a.headers),a},function(a){return isCancel(a)||(throwIfCancellationRequested(e),a&&a.response&&(a.response.data=transformData.call(e,e.transformResponse,a.response),a.response.headers=AxiosHeaders$1.from(a.response.headers))),Promise.reject(a)})}const headersToObject=e=>e instanceof AxiosHeaders$1?e.toJSON():e;function mergeConfig(e,i){i=i||{};const s={};function a(b,j,nt){return utils$1.isPlainObject(b)&&utils$1.isPlainObject(j)?utils$1.merge.call({caseless:nt},b,j):utils$1.isPlainObject(j)?utils$1.merge({},j):utils$1.isArray(j)?j.slice():j}function o(b,j,nt){if(utils$1.isUndefined(j)){if(!utils$1.isUndefined(b))return a(void 0,b,nt)}else return a(b,j,nt)}function c(b,j){if(!utils$1.isUndefined(j))return a(void 0,j)}function d(b,j){if(utils$1.isUndefined(j)){if(!utils$1.isUndefined(b))return a(void 0,b)}else return a(void 0,j)}function g(b,j,nt){if(nt in i)return a(b,j);if(nt in e)return a(void 0,b)}const _={url:c,method:c,data:c,baseURL:d,transformRequest:d,transformResponse:d,paramsSerializer:d,timeout:d,timeoutMessage:d,withCredentials:d,withXSRFToken:d,adapter:d,responseType:d,xsrfCookieName:d,xsrfHeaderName:d,onUploadProgress:d,onDownloadProgress:d,decompress:d,maxContentLength:d,maxBodyLength:d,beforeRedirect:d,transport:d,httpAgent:d,httpsAgent:d,cancelToken:d,socketPath:d,responseEncoding:d,validateStatus:g,headers:(b,j)=>o(headersToObject(b),headersToObject(j),!0)};return utils$1.forEach(Object.keys(Object.assign({},e,i)),function(j){const nt=_[j]||o,tt=nt(e[j],i[j],j);utils$1.isUndefined(tt)&&nt!==g||(s[j]=tt)}),s}const VERSION="1.6.2",validators$1={};["object","boolean","number","function","string","symbol"].forEach((e,i)=>{validators$1[e]=function(a){return typeof a===e||"a"+(i<1?"n ":" ")+e}});const deprecatedWarnings={};validators$1.transitional=function(i,s,a){function o(c,d){return"[Axios v"+VERSION+"] Transitional option '"+c+"'"+d+(a?". "+a:"")}return(c,d,g)=>{if(i===!1)throw new AxiosError(o(d," has been removed"+(s?" in "+s:"")),AxiosError.ERR_DEPRECATED);return s&&!deprecatedWarnings[d]&&(deprecatedWarnings[d]=!0,console.warn(o(d," has been deprecated since v"+s+" and will be removed in the near future"))),i?i(c,d,g):!0}};function assertOptions(e,i,s){if(typeof e!="object")throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);const a=Object.keys(e);let o=a.length;for(;o-- >0;){const c=a[o],d=i[c];if(d){const g=e[c],_=g===void 0||d(g,c,e);if(_!==!0)throw new AxiosError("option "+c+" must be "+_,AxiosError.ERR_BAD_OPTION_VALUE);continue}if(s!==!0)throw new AxiosError("Unknown option "+c,AxiosError.ERR_BAD_OPTION)}}const validator={assertOptions,validators:validators$1},validators=validator.validators;class Axios{constructor(i){this.defaults=i,this.interceptors={request:new InterceptorManager$1,response:new InterceptorManager$1}}request(i,s){typeof i=="string"?(s=s||{},s.url=i):s=i||{},s=mergeConfig(this.defaults,s);const{transitional:a,paramsSerializer:o,headers:c}=s;a!==void 0&&validator.assertOptions(a,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),o!=null&&(utils$1.isFunction(o)?s.paramsSerializer={serialize:o}:validator.assertOptions(o,{encode:validators.function,serialize:validators.function},!0)),s.method=(s.method||this.defaults.method||"get").toLowerCase();let d=c&&utils$1.merge(c.common,c[s.method]);c&&utils$1.forEach(["delete","get","head","post","put","patch","common"],it=>{delete c[it]}),s.headers=AxiosHeaders$1.concat(d,c);const g=[];let _=!0;this.interceptors.request.forEach(function(rt){typeof rt.runWhen=="function"&&rt.runWhen(s)===!1||(_=_&&rt.synchronous,g.unshift(rt.fulfilled,rt.rejected))});const b=[];this.interceptors.response.forEach(function(rt){b.push(rt.fulfilled,rt.rejected)});let j,nt=0,tt;if(!_){const it=[dispatchRequest.bind(this),void 0];for(it.unshift.apply(it,g),it.push.apply(it,b),tt=it.length,j=Promise.resolve(s);nt<tt;)j=j.then(it[nt++],it[nt++]);return j}tt=g.length;let at=s;for(nt=0;nt<tt;){const it=g[nt++],rt=g[nt++];try{at=it(at)}catch(ut){rt.call(this,ut);break}}try{j=dispatchRequest.call(this,at)}catch(it){return Promise.reject(it)}for(nt=0,tt=b.length;nt<tt;)j=j.then(b[nt++],b[nt++]);return j}getUri(i){i=mergeConfig(this.defaults,i);const s=buildFullPath(i.baseURL,i.url);return buildURL(s,i.params,i.paramsSerializer)}}utils$1.forEach(["delete","get","head","options"],function(i){Axios.prototype[i]=function(s,a){return this.request(mergeConfig(a||{},{method:i,url:s,data:(a||{}).data}))}});utils$1.forEach(["post","put","patch"],function(i){function s(a){return function(c,d,g){return this.request(mergeConfig(g||{},{method:i,headers:a?{"Content-Type":"multipart/form-data"}:{},url:c,data:d}))}}Axios.prototype[i]=s(),Axios.prototype[i+"Form"]=s(!0)});const Axios$1=Axios;class CancelToken{constructor(i){if(typeof i!="function")throw new TypeError("executor must be a function.");let s;this.promise=new Promise(function(c){s=c});const a=this;this.promise.then(o=>{if(!a._listeners)return;let c=a._listeners.length;for(;c-- >0;)a._listeners[c](o);a._listeners=null}),this.promise.then=o=>{let c;const d=new Promise(g=>{a.subscribe(g),c=g}).then(o);return d.cancel=function(){a.unsubscribe(c)},d},i(function(c,d,g){a.reason||(a.reason=new CanceledError(c,d,g),s(a.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(i){if(this.reason){i(this.reason);return}this._listeners?this._listeners.push(i):this._listeners=[i]}unsubscribe(i){if(!this._listeners)return;const s=this._listeners.indexOf(i);s!==-1&&this._listeners.splice(s,1)}static source(){let i;return{token:new CancelToken(function(o){i=o}),cancel:i}}}const CancelToken$1=CancelToken;function spread(e){return function(s){return e.apply(null,s)}}function isAxiosError(e){return utils$1.isObject(e)&&e.isAxiosError===!0}const HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach(([e,i])=>{HttpStatusCode[i]=e});const HttpStatusCode$1=HttpStatusCode;function createInstance(e){const i=new Axios$1(e),s=bind(Axios$1.prototype.request,i);return utils$1.extend(s,Axios$1.prototype,i,{allOwnKeys:!0}),utils$1.extend(s,i,null,{allOwnKeys:!0}),s.create=function(o){return createInstance(mergeConfig(e,o))},s}const axios=createInstance(defaults$1);axios.Axios=Axios$1;axios.CanceledError=CanceledError;axios.CancelToken=CancelToken$1;axios.isCancel=isCancel;axios.VERSION=VERSION;axios.toFormData=toFormData;axios.AxiosError=AxiosError;axios.Cancel=axios.CanceledError;axios.all=function(i){return Promise.all(i)};axios.spread=spread;axios.isAxiosError=isAxiosError;axios.mergeConfig=mergeConfig;axios.AxiosHeaders=AxiosHeaders$1;axios.formToJSON=e=>formDataToJSON(utils$1.isHTMLForm(e)?new FormData(e):e);axios.getAdapter=adapters.getAdapter;axios.HttpStatusCode=HttpStatusCode$1;axios.default=axios;const axios$1=axios,APIURL="https://magnaingenieriaytopografia.com",apiClient=axios$1.create({baseURL:APIURL,headers:{"Content-type":"application/json"}});apiClient.interceptors.request.use(async e=>{const i=localStorage.getItem("token");return i&&(e.headers.Authorization=`JWT ${i}`),e});const fetchWorkers=async()=>{try{return(await apiClient.get("equipos/")).data}catch(e){console.log(e);return}},fetchServices1=async()=>{try{const e=await apiClient.get("servicios/servicios-and-subservicios/");return console.log(e.data,"aqui estoy en fetchServices"),console.log(e.data,"aqui estoy en fetchServices"),e.data}catch(e){console.log(e);return}},fetchProjects=async()=>{try{return(await apiClient.get("proyectos/")).data}catch(e){console.log(e);return}},fetchProjectsImages=async()=>{try{return(await apiClient.get("proyectos/images/")).data}catch(e){console.log(e);return}},fetchBrochure=async()=>{try{return(await apiClient.get("servicios/brochure/")).data}catch(e){console.log(e);return}};var lottie$1={exports:{}};(function(module,exports){typeof navigator<"u"&&function(e,i){module.exports=i()}(commonjsGlobal,function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(i){_useWebWorker=!!i},getWebWorker=function(){return _useWebWorker},setLocationHref=function(i){locationHref=i},getLocationHref=function(){return locationHref};function createTag(e){return document.createElement(e)}function extendPrototype(e,i){var s,a=e.length,o;for(s=0;s<a;s+=1){o=e[s].prototype;for(var c in o)Object.prototype.hasOwnProperty.call(o,c)&&(i.prototype[c]=o[c])}}function getDescriptor(e,i){return Object.getOwnPropertyDescriptor(e,i)}function createProxyFunction(e){function i(){}return i.prototype=e,i}var audioControllerFactory=function(){function e(i){this.audios=[],this.audioFactory=i,this._volume=1,this._isMuted=!1}return e.prototype={addAudio:function(s){this.audios.push(s)},pause:function(){var s,a=this.audios.length;for(s=0;s<a;s+=1)this.audios[s].pause()},resume:function(){var s,a=this.audios.length;for(s=0;s<a;s+=1)this.audios[s].resume()},setRate:function(s){var a,o=this.audios.length;for(a=0;a<o;a+=1)this.audios[a].setRate(s)},createAudio:function(s){return this.audioFactory?this.audioFactory(s):window.Howl?new window.Howl({src:[s]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(s){this.audioFactory=s},setVolume:function(s){this._volume=s,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var s,a=this.audios.length;for(s=0;s<a;s+=1)this.audios[s].volume(this._volume*(this._isMuted?0:1))}},function(){return new e}}(),createTypedArray=function(){function e(s,a){var o=0,c=[],d;switch(s){case"int16":case"uint8c":d=1;break;default:d=1.1;break}for(o=0;o<a;o+=1)c.push(d);return c}function i(s,a){return s==="float32"?new Float32Array(a):s==="int16"?new Int16Array(a):s==="uint8c"?new Uint8ClampedArray(a):e(s,a)}return typeof Uint8ClampedArray=="function"&&typeof Float32Array=="function"?i:e}();function createSizedArray(e){return Array.apply(null,{length:e})}function _typeof$6(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$6=function(s){return typeof s}:_typeof$6=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof$6(e)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};(function(){var e=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],i,s=e.length;for(i=0;i<s;i+=1)BMMath[e[i]]=Math[e[i]]})(),BMMath.random=Math.random,BMMath.abs=function(e){var i=_typeof$6(e);if(i==="object"&&e.length){var s=createSizedArray(e.length),a,o=e.length;for(a=0;a<o;a+=1)s[a]=Math.abs(e[a]);return s}return Math.abs(e)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function styleDiv(e){e.style.position="absolute",e.style.top=0,e.style.left=0,e.style.display="block",e.style.transformOrigin="0 0",e.style.webkitTransformOrigin="0 0",e.style.backfaceVisibility="visible",e.style.webkitBackfaceVisibility="visible",e.style.transformStyle="preserve-3d",e.style.webkitTransformStyle="preserve-3d",e.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(e,i,s,a){this.type=e,this.currentTime=i,this.totalTime=s,this.direction=a<0?-1:1}function BMCompleteEvent(e,i){this.type=e,this.direction=i<0?-1:1}function BMCompleteLoopEvent(e,i,s,a){this.type=e,this.currentLoop=s,this.totalLoops=i,this.direction=a<0?-1:1}function BMSegmentStartEvent(e,i,s){this.type=e,this.firstFrame=i,this.totalFrames=s}function BMDestroyEvent(e,i){this.type=e,this.target=i}function BMRenderFrameErrorEvent(e,i){this.type="renderFrameError",this.nativeError=e,this.currentTime=i}function BMConfigErrorEvent(e){this.type="configError",this.nativeError=e}var createElementID=function(){var e=0;return function(){return e+=1,idPrefix$1+"__lottie_element_"+e}}();function HSVtoRGB(e,i,s){var a,o,c,d,g,_,b,j;switch(d=Math.floor(e*6),g=e*6-d,_=s*(1-i),b=s*(1-g*i),j=s*(1-(1-g)*i),d%6){case 0:a=s,o=j,c=_;break;case 1:a=b,o=s,c=_;break;case 2:a=_,o=s,c=j;break;case 3:a=_,o=b,c=s;break;case 4:a=j,o=_,c=s;break;case 5:a=s,o=_,c=b;break}return[a,o,c]}function RGBtoHSV(e,i,s){var a=Math.max(e,i,s),o=Math.min(e,i,s),c=a-o,d,g=a===0?0:c/a,_=a/255;switch(a){case o:d=0;break;case e:d=i-s+c*(i<s?6:0),d/=6*c;break;case i:d=s-e+c*2,d/=6*c;break;case s:d=e-i+c*4,d/=6*c;break}return[d,g,_]}function addSaturationToRGB(e,i){var s=RGBtoHSV(e[0]*255,e[1]*255,e[2]*255);return s[1]+=i,s[1]>1?s[1]=1:s[1]<=0&&(s[1]=0),HSVtoRGB(s[0],s[1],s[2])}function addBrightnessToRGB(e,i){var s=RGBtoHSV(e[0]*255,e[1]*255,e[2]*255);return s[2]+=i,s[2]>1?s[2]=1:s[2]<0&&(s[2]=0),HSVtoRGB(s[0],s[1],s[2])}function addHueToRGB(e,i){var s=RGBtoHSV(e[0]*255,e[1]*255,e[2]*255);return s[0]+=i/360,s[0]>1?s[0]-=1:s[0]<0&&(s[0]+=1),HSVtoRGB(s[0],s[1],s[2])}var rgbToHex=function(){var e=[],i,s;for(i=0;i<256;i+=1)s=i.toString(16),e[i]=s.length===1?"0"+s:s;return function(a,o,c){return a<0&&(a=0),o<0&&(o=0),c<0&&(c=0),"#"+e[a]+e[o]+e[c]}}(),setSubframeEnabled=function(i){subframeEnabled=!!i},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(i){expressionsPlugin=i},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(i){expressionsInterfaces=i},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(i){defaultCurveSegments=i},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(i){idPrefix$1=i};function createNS(e){return document.createElementNS(svgNS,e)}function _typeof$5(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$5=function(s){return typeof s}:_typeof$5=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof$5(e)}var dataManager=function(){var e=1,i=[],s,a,o={onmessage:function(){},postMessage:function(at){s({data:at})}},c={postMessage:function(at){o.onmessage({data:at})}};function d(tt){if(window.Worker&&window.Blob&&getWebWorker()){var at=new Blob(["var _workerSelf = self; self.onmessage = ",tt.toString()],{type:"text/javascript"}),it=URL.createObjectURL(at);return new Worker(it)}return s=tt,o}function g(){a||(a=d(function(at){function it(){function ut(wt,pt){var mt,ot,ht=wt.length,yt,vt,xt,Tt;for(ot=0;ot<ht;ot+=1)if(mt=wt[ot],"ks"in mt&&!mt.completed){if(mt.completed=!0,mt.hasMask){var At=mt.masksProperties;for(vt=At.length,yt=0;yt<vt;yt+=1)if(At[yt].pt.k.i)ft(At[yt].pt.k);else for(Tt=At[yt].pt.k.length,xt=0;xt<Tt;xt+=1)At[yt].pt.k[xt].s&&ft(At[yt].pt.k[xt].s[0]),At[yt].pt.k[xt].e&&ft(At[yt].pt.k[xt].e[0])}mt.ty===0?(mt.layers=_e(mt.refId,pt),ut(mt.layers,pt)):mt.ty===4?st(mt.shapes):mt.ty===5&&bt(mt)}}function $(wt,pt){if(wt){var mt=0,ot=wt.length;for(mt=0;mt<ot;mt+=1)wt[mt].t===1&&(wt[mt].data.layers=_e(wt[mt].data.refId,pt),ut(wt[mt].data.layers,pt))}}function et(wt,pt){for(var mt=0,ot=pt.length;mt<ot;){if(pt[mt].id===wt)return pt[mt];mt+=1}return null}function _e(wt,pt){var mt=et(wt,pt);return mt?mt.layers.__used?JSON.parse(JSON.stringify(mt.layers)):(mt.layers.__used=!0,mt.layers):null}function st(wt){var pt,mt=wt.length,ot,ht;for(pt=mt-1;pt>=0;pt-=1)if(wt[pt].ty==="sh")if(wt[pt].ks.k.i)ft(wt[pt].ks.k);else for(ht=wt[pt].ks.k.length,ot=0;ot<ht;ot+=1)wt[pt].ks.k[ot].s&&ft(wt[pt].ks.k[ot].s[0]),wt[pt].ks.k[ot].e&&ft(wt[pt].ks.k[ot].e[0]);else wt[pt].ty==="gr"&&st(wt[pt].it)}function ft(wt){var pt,mt=wt.i.length;for(pt=0;pt<mt;pt+=1)wt.i[pt][0]+=wt.v[pt][0],wt.i[pt][1]+=wt.v[pt][1],wt.o[pt][0]+=wt.v[pt][0],wt.o[pt][1]+=wt.v[pt][1]}function lt(wt,pt){var mt=pt?pt.split("."):[100,100,100];return wt[0]>mt[0]?!0:mt[0]>wt[0]?!1:wt[1]>mt[1]?!0:mt[1]>wt[1]?!1:wt[2]>mt[2]?!0:mt[2]>wt[2]?!1:null}var ct=function(){var wt=[4,4,14];function pt(ot){var ht=ot.t.d;ot.t.d={k:[{s:ht,t:0}]}}function mt(ot){var ht,yt=ot.length;for(ht=0;ht<yt;ht+=1)ot[ht].ty===5&&pt(ot[ht])}return function(ot){if(lt(wt,ot.v)&&(mt(ot.layers),ot.assets)){var ht,yt=ot.assets.length;for(ht=0;ht<yt;ht+=1)ot.assets[ht].layers&&mt(ot.assets[ht].layers)}}}(),dt=function(){var wt=[4,7,99];return function(pt){if(pt.chars&&!lt(wt,pt.v)){var mt,ot=pt.chars.length;for(mt=0;mt<ot;mt+=1){var ht=pt.chars[mt];ht.data&&ht.data.shapes&&(st(ht.data.shapes),ht.data.ip=0,ht.data.op=99999,ht.data.st=0,ht.data.sr=1,ht.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},pt.chars[mt].t||(ht.data.shapes.push({ty:"no"}),ht.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}}(),gt=function(){var wt=[5,7,15];function pt(ot){var ht=ot.t.p;typeof ht.a=="number"&&(ht.a={a:0,k:ht.a}),typeof ht.p=="number"&&(ht.p={a:0,k:ht.p}),typeof ht.r=="number"&&(ht.r={a:0,k:ht.r})}function mt(ot){var ht,yt=ot.length;for(ht=0;ht<yt;ht+=1)ot[ht].ty===5&&pt(ot[ht])}return function(ot){if(lt(wt,ot.v)&&(mt(ot.layers),ot.assets)){var ht,yt=ot.assets.length;for(ht=0;ht<yt;ht+=1)ot.assets[ht].layers&&mt(ot.assets[ht].layers)}}}(),Ct=function(){var wt=[4,1,9];function pt(ot){var ht,yt=ot.length,vt,xt;for(ht=0;ht<yt;ht+=1)if(ot[ht].ty==="gr")pt(ot[ht].it);else if(ot[ht].ty==="fl"||ot[ht].ty==="st")if(ot[ht].c.k&&ot[ht].c.k[0].i)for(xt=ot[ht].c.k.length,vt=0;vt<xt;vt+=1)ot[ht].c.k[vt].s&&(ot[ht].c.k[vt].s[0]/=255,ot[ht].c.k[vt].s[1]/=255,ot[ht].c.k[vt].s[2]/=255,ot[ht].c.k[vt].s[3]/=255),ot[ht].c.k[vt].e&&(ot[ht].c.k[vt].e[0]/=255,ot[ht].c.k[vt].e[1]/=255,ot[ht].c.k[vt].e[2]/=255,ot[ht].c.k[vt].e[3]/=255);else ot[ht].c.k[0]/=255,ot[ht].c.k[1]/=255,ot[ht].c.k[2]/=255,ot[ht].c.k[3]/=255}function mt(ot){var ht,yt=ot.length;for(ht=0;ht<yt;ht+=1)ot[ht].ty===4&&pt(ot[ht].shapes)}return function(ot){if(lt(wt,ot.v)&&(mt(ot.layers),ot.assets)){var ht,yt=ot.assets.length;for(ht=0;ht<yt;ht+=1)ot.assets[ht].layers&&mt(ot.assets[ht].layers)}}}(),_t=function(){var wt=[4,4,18];function pt(ot){var ht,yt=ot.length,vt,xt;for(ht=yt-1;ht>=0;ht-=1)if(ot[ht].ty==="sh")if(ot[ht].ks.k.i)ot[ht].ks.k.c=ot[ht].closed;else for(xt=ot[ht].ks.k.length,vt=0;vt<xt;vt+=1)ot[ht].ks.k[vt].s&&(ot[ht].ks.k[vt].s[0].c=ot[ht].closed),ot[ht].ks.k[vt].e&&(ot[ht].ks.k[vt].e[0].c=ot[ht].closed);else ot[ht].ty==="gr"&&pt(ot[ht].it)}function mt(ot){var ht,yt,vt=ot.length,xt,Tt,At,Ot;for(yt=0;yt<vt;yt+=1){if(ht=ot[yt],ht.hasMask){var Vt=ht.masksProperties;for(Tt=Vt.length,xt=0;xt<Tt;xt+=1)if(Vt[xt].pt.k.i)Vt[xt].pt.k.c=Vt[xt].cl;else for(Ot=Vt[xt].pt.k.length,At=0;At<Ot;At+=1)Vt[xt].pt.k[At].s&&(Vt[xt].pt.k[At].s[0].c=Vt[xt].cl),Vt[xt].pt.k[At].e&&(Vt[xt].pt.k[At].e[0].c=Vt[xt].cl)}ht.ty===4&&pt(ht.shapes)}}return function(ot){if(lt(wt,ot.v)&&(mt(ot.layers),ot.assets)){var ht,yt=ot.assets.length;for(ht=0;ht<yt;ht+=1)ot.assets[ht].layers&&mt(ot.assets[ht].layers)}}}();function Pt(wt){wt.__complete||(Ct(wt),ct(wt),dt(wt),gt(wt),_t(wt),ut(wt.layers,wt.assets),$(wt.chars,wt.assets),wt.__complete=!0)}function bt(wt){wt.t.a.length===0&&"m"in wt.t.p}var Mt={};return Mt.completeData=Pt,Mt.checkColors=Ct,Mt.checkChars=dt,Mt.checkPathProperties=gt,Mt.checkShapes=_t,Mt.completeLayers=ut,Mt}if(c.dataManager||(c.dataManager=it()),c.assetLoader||(c.assetLoader=function(){function ut(et){var _e=et.getResponseHeader("content-type");return _e&&et.responseType==="json"&&_e.indexOf("json")!==-1||et.response&&_typeof$5(et.response)==="object"?et.response:et.response&&typeof et.response=="string"?JSON.parse(et.response):et.responseText?JSON.parse(et.responseText):null}function $(et,_e,st,ft){var lt,ct=new XMLHttpRequest;try{ct.responseType="json"}catch{}ct.onreadystatechange=function(){if(ct.readyState===4)if(ct.status===200)lt=ut(ct),st(lt);else try{lt=ut(ct),st(lt)}catch(dt){ft&&ft(dt)}};try{ct.open(["G","E","T"].join(""),et,!0)}catch{ct.open(["G","E","T"].join(""),_e+"/"+et,!0)}ct.send()}return{load:$}}()),at.data.type==="loadAnimation")c.assetLoader.load(at.data.path,at.data.fullPath,function(ut){c.dataManager.completeData(ut),c.postMessage({id:at.data.id,payload:ut,status:"success"})},function(){c.postMessage({id:at.data.id,status:"error"})});else if(at.data.type==="complete"){var rt=at.data.animation;c.dataManager.completeData(rt),c.postMessage({id:at.data.id,payload:rt,status:"success"})}else at.data.type==="loadData"&&c.assetLoader.load(at.data.path,at.data.fullPath,function(ut){c.postMessage({id:at.data.id,payload:ut,status:"success"})},function(){c.postMessage({id:at.data.id,status:"error"})})}),a.onmessage=function(tt){var at=tt.data,it=at.id,rt=i[it];i[it]=null,at.status==="success"?rt.onComplete(at.payload):rt.onError&&rt.onError()})}function _(tt,at){e+=1;var it="processId_"+e;return i[it]={onComplete:tt,onError:at},it}function b(tt,at,it){g();var rt=_(at,it);a.postMessage({type:"loadAnimation",path:tt,fullPath:window.location.origin+window.location.pathname,id:rt})}function j(tt,at,it){g();var rt=_(at,it);a.postMessage({type:"loadData",path:tt,fullPath:window.location.origin+window.location.pathname,id:rt})}function nt(tt,at,it){g();var rt=_(at,it);a.postMessage({type:"complete",animation:tt,id:rt})}return{loadAnimation:b,loadData:j,completeAnimation:nt}}(),ImagePreloader=function(){var e=function(){var $=createTag("canvas");$.width=1,$.height=1;var et=$.getContext("2d");return et.fillStyle="rgba(0,0,0,0)",et.fillRect(0,0,1,1),$}();function i(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function s(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function a($,et,_e){var st="";if($.e)st=$.p;else if(et){var ft=$.p;ft.indexOf("images/")!==-1&&(ft=ft.split("/")[1]),st=et+ft}else st=_e,st+=$.u?$.u:"",st+=$.p;return st}function o($){var et=0,_e=setInterval((function(){var st=$.getBBox();(st.width||et>500)&&(this._imageLoaded(),clearInterval(_e)),et+=1}).bind(this),50)}function c($){var et=a($,this.assetsPath,this.path),_e=createNS("image");isSafari?this.testImageLoaded(_e):_e.addEventListener("load",this._imageLoaded,!1),_e.addEventListener("error",(function(){st.img=e,this._imageLoaded()}).bind(this),!1),_e.setAttributeNS("http://www.w3.org/1999/xlink","href",et),this._elementHelper.append?this._elementHelper.append(_e):this._elementHelper.appendChild(_e);var st={img:_e,assetData:$};return st}function d($){var et=a($,this.assetsPath,this.path),_e=createTag("img");_e.crossOrigin="anonymous",_e.addEventListener("load",this._imageLoaded,!1),_e.addEventListener("error",(function(){st.img=e,this._imageLoaded()}).bind(this),!1),_e.src=et;var st={img:_e,assetData:$};return st}function g($){var et={assetData:$},_e=a($,this.assetsPath,this.path);return dataManager.loadData(_e,(function(st){et.img=st,this._footageLoaded()}).bind(this),(function(){et.img={},this._footageLoaded()}).bind(this)),et}function _($,et){this.imagesLoadedCb=et;var _e,st=$.length;for(_e=0;_e<st;_e+=1)$[_e].layers||(!$[_e].t||$[_e].t==="seq"?(this.totalImages+=1,this.images.push(this._createImageData($[_e]))):$[_e].t===3&&(this.totalFootages+=1,this.images.push(this.createFootageData($[_e]))))}function b($){this.path=$||""}function j($){this.assetsPath=$||""}function nt($){for(var et=0,_e=this.images.length;et<_e;){if(this.images[et].assetData===$)return this.images[et].img;et+=1}return null}function tt(){this.imagesLoadedCb=null,this.images.length=0}function at(){return this.totalImages===this.loadedAssets}function it(){return this.totalFootages===this.loadedFootagesCount}function rt($,et){$==="svg"?(this._elementHelper=et,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}function ut(){this._imageLoaded=i.bind(this),this._footageLoaded=s.bind(this),this.testImageLoaded=o.bind(this),this.createFootageData=g.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return ut.prototype={loadAssets:_,setAssetsPath:j,setPath:b,loadedImages:at,loadedFootages:it,destroy:tt,getAsset:nt,createImgData:d,createImageData:c,imageLoaded:i,footageLoaded:s,setCacheType:rt},ut}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(i,s){if(this._cbs[i])for(var a=this._cbs[i],o=0;o<a.length;o+=1)a[o](s)},addEventListener:function(i,s){return this._cbs[i]||(this._cbs[i]=[]),this._cbs[i].push(s),(function(){this.removeEventListener(i,s)}).bind(this)},removeEventListener:function(i,s){if(!s)this._cbs[i]=null;else if(this._cbs[i]){for(var a=0,o=this._cbs[i].length;a<o;)this._cbs[i][a]===s&&(this._cbs[i].splice(a,1),a-=1,o-=1),a+=1;this._cbs[i].length||(this._cbs[i]=null)}}};var markerParser=function(){function e(i){for(var s=i.split(`\r
`),a={},o,c=0,d=0;d<s.length;d+=1)o=s[d].split(":"),o.length===2&&(a[o[0]]=o[1].trim(),c+=1);if(c===0)throw new Error;return a}return function(i){for(var s=[],a=0;a<i.length;a+=1){var o=i[a],c={time:o.tm,duration:o.dr};try{c.payload=JSON.parse(i[a].cm)}catch{try{c.payload=e(i[a].cm)}catch{c.payload={name:i[a].cm}}}s.push(c)}return s}}(),ProjectInterface=function(){function e(i){this.compositions.push(i)}return function(){function i(s){for(var a=0,o=this.compositions.length;a<o;){if(this.compositions[a].data&&this.compositions[a].data.nm===s)return this.compositions[a].prepareFrame&&this.compositions[a].data.xt&&this.compositions[a].prepareFrame(this.currentFrame),this.compositions[a].compInterface;a+=1}return null}return i.compositions=[],i.currentFrame=0,i.registerComposition=e,i}}(),renderers={},registerRenderer=function(i,s){renderers[i]=s};function getRenderer(e){return renderers[e]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var e in renderers)if(renderers[e])return e;return""}function _typeof$4(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$4=function(s){return typeof s}:_typeof$4=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof$4(e)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(e){(e.wrapper||e.container)&&(this.wrapper=e.wrapper||e.container);var i="svg";e.animType?i=e.animType:e.renderer&&(i=e.renderer);var s=getRenderer(i);this.renderer=new s(this,e.rendererSettings),this.imagePreloader.setCacheType(i,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=i,e.loop===""||e.loop===null||e.loop===void 0||e.loop===!0?this.loop=!0:e.loop===!1?this.loop=!1:this.loop=parseInt(e.loop,10),this.autoplay="autoplay"in e?e.autoplay:!0,this.name=e.name?e.name:"",this.autoloadSegments=Object.prototype.hasOwnProperty.call(e,"autoloadSegments")?e.autoloadSegments:!0,this.assetsPath=e.assetsPath,this.initialSegment=e.initialSegment,e.audioFactory&&this.audioController.setAudioFactory(e.audioFactory),e.animationData?this.setupAnimation(e.animationData):e.path&&(e.path.lastIndexOf("\\")!==-1?this.path=e.path.substr(0,e.path.lastIndexOf("\\")+1):this.path=e.path.substr(0,e.path.lastIndexOf("/")+1),this.fileName=e.path.substr(e.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(e.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(e){dataManager.completeAnimation(e,this.configAnimation)},AnimationItem.prototype.setData=function(e,i){i&&_typeof$4(i)!=="object"&&(i=JSON.parse(i));var s={wrapper:e,animationData:i},a=e.attributes;s.path=a.getNamedItem("data-animation-path")?a.getNamedItem("data-animation-path").value:a.getNamedItem("data-bm-path")?a.getNamedItem("data-bm-path").value:a.getNamedItem("bm-path")?a.getNamedItem("bm-path").value:"",s.animType=a.getNamedItem("data-anim-type")?a.getNamedItem("data-anim-type").value:a.getNamedItem("data-bm-type")?a.getNamedItem("data-bm-type").value:a.getNamedItem("bm-type")?a.getNamedItem("bm-type").value:a.getNamedItem("data-bm-renderer")?a.getNamedItem("data-bm-renderer").value:a.getNamedItem("bm-renderer")?a.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var o=a.getNamedItem("data-anim-loop")?a.getNamedItem("data-anim-loop").value:a.getNamedItem("data-bm-loop")?a.getNamedItem("data-bm-loop").value:a.getNamedItem("bm-loop")?a.getNamedItem("bm-loop").value:"";o==="false"?s.loop=!1:o==="true"?s.loop=!0:o!==""&&(s.loop=parseInt(o,10));var c=a.getNamedItem("data-anim-autoplay")?a.getNamedItem("data-anim-autoplay").value:a.getNamedItem("data-bm-autoplay")?a.getNamedItem("data-bm-autoplay").value:a.getNamedItem("bm-autoplay")?a.getNamedItem("bm-autoplay").value:!0;s.autoplay=c!=="false",s.name=a.getNamedItem("data-name")?a.getNamedItem("data-name").value:a.getNamedItem("data-bm-name")?a.getNamedItem("data-bm-name").value:a.getNamedItem("bm-name")?a.getNamedItem("bm-name").value:"";var d=a.getNamedItem("data-anim-prerender")?a.getNamedItem("data-anim-prerender").value:a.getNamedItem("data-bm-prerender")?a.getNamedItem("data-bm-prerender").value:a.getNamedItem("bm-prerender")?a.getNamedItem("bm-prerender").value:"";d==="false"&&(s.prerender=!1),s.path?this.setParams(s):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(e){e.op>this.animationData.op&&(this.animationData.op=e.op,this.totalFrames=Math.floor(e.op-this.animationData.ip));var i=this.animationData.layers,s,a=i.length,o=e.layers,c,d=o.length;for(c=0;c<d;c+=1)for(s=0;s<a;){if(i[s].id===o[c].id){i[s]=o[c];break}s+=1}if((e.chars||e.fonts)&&(this.renderer.globalData.fontManager.addChars(e.chars),this.renderer.globalData.fontManager.addFonts(e.fonts,this.renderer.globalData.defs)),e.assets)for(a=e.assets.length,s=0;s<a;s+=1)this.animationData.assets.push(e.assets[s]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(e){this.animationData=e;var i=getExpressionsPlugin();i&&i.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var e=this.animationData.segments;if(!e||e.length===0||!this.autoloadSegments){this.trigger("data_ready"),this.timeCompleted=this.totalFrames;return}var i=e.shift();this.timeCompleted=i.time*this.frameRate;var s=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(s,this.includeLayers.bind(this),(function(){this.trigger("data_failed")}).bind(this))},AnimationItem.prototype.loadSegments=function(){var e=this.animationData.segments;e||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(e){if(this.renderer)try{this.animationData=e,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(e),e.assets||(e.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(e.assets),this.markers=markerParser(e.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(i){this.triggerConfigError(i)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=="canvas")&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.renderer.initItems(),setTimeout((function(){this.trigger("DOMLoaded")}).bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(e,i){var s=typeof e=="number"?e:void 0,a=typeof i=="number"?i:void 0;this.renderer.updateContainerSize(s,a)},AnimationItem.prototype.setSubframe=function(e){this.isSubframeEnabled=!!e},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!(this.isLoaded===!1||!this.renderer))try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(e){this.triggerRenderFrameError(e)}},AnimationItem.prototype.play=function(e){e&&this.name!==e||this.isPaused===!0&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(e){e&&this.name!==e||this.isPaused===!1&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(e){e&&this.name!==e||(this.isPaused===!0?this.play():this.pause())},AnimationItem.prototype.stop=function(e){e&&this.name!==e||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(e){for(var i,s=0;s<this.markers.length;s+=1)if(i=this.markers[s],i.payload&&i.payload.name===e)return i;return null},AnimationItem.prototype.goToAndStop=function(e,i,s){if(!(s&&this.name!==s)){var a=Number(e);if(isNaN(a)){var o=this.getMarkerData(e);o&&this.goToAndStop(o.time,!0)}else i?this.setCurrentRawFrameValue(e):this.setCurrentRawFrameValue(e*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(e,i,s){if(!(s&&this.name!==s)){var a=Number(e);if(isNaN(a)){var o=this.getMarkerData(e);o&&(o.duration?this.playSegments([o.time,o.time+o.duration],!0):this.goToAndStop(o.time,!0))}else this.goToAndStop(a,i,s);this.play()}},AnimationItem.prototype.advanceTime=function(e){if(!(this.isPaused===!0||this.isLoaded===!1)){var i=this.currentRawFrame+e*this.frameModifier,s=!1;i>=this.totalFrames-1&&this.frameModifier>0?!this.loop||this.playCount===this.loop?this.checkSegments(i>this.totalFrames?i%this.totalFrames:0)||(s=!0,i=this.totalFrames-1):i>=this.totalFrames?(this.playCount+=1,this.checkSegments(i%this.totalFrames)||(this.setCurrentRawFrameValue(i%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(i):i<0?this.checkSegments(i%this.totalFrames)||(this.loop&&!(this.playCount--<=0&&this.loop!==!0)?(this.setCurrentRawFrameValue(this.totalFrames+i%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0):(s=!0,i=0)):this.setCurrentRawFrameValue(i),s&&(this.setCurrentRawFrameValue(i),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(e,i){this.playCount=0,e[1]<e[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=e[0]-e[1],this.timeCompleted=this.totalFrames,this.firstFrame=e[1],this.setCurrentRawFrameValue(this.totalFrames-.001-i)):e[1]>e[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=e[1]-e[0],this.timeCompleted=this.totalFrames,this.firstFrame=e[0],this.setCurrentRawFrameValue(.001+i)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(e,i){var s=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<e?s=e:this.currentRawFrame+this.firstFrame>i&&(s=i-e)),this.firstFrame=e,this.totalFrames=i-e,this.timeCompleted=this.totalFrames,s!==-1&&this.goToAndStop(s,!0)},AnimationItem.prototype.playSegments=function(e,i){if(i&&(this.segments.length=0),_typeof$4(e[0])==="object"){var s,a=e.length;for(s=0;s<a;s+=1)this.segments.push(e[s])}else this.segments.push(e);this.segments.length&&i&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(e){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),e&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(e){return this.segments.length?(this.adjustSegment(this.segments.shift(),e),!0):!1},AnimationItem.prototype.destroy=function(e){e&&this.name!==e||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(e){this.currentRawFrame=e,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(e){this.playSpeed=e,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(e){this.playDirection=e<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(e){this.loop=e},AnimationItem.prototype.setVolume=function(e,i){i&&this.name!==i||this.audioController.setVolume(e)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(e){e&&this.name!==e||this.audioController.mute()},AnimationItem.prototype.unmute=function(e){e&&this.name!==e||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(e){var i="";if(e.e)i=e.p;else if(this.assetsPath){var s=e.p;s.indexOf("images/")!==-1&&(s=s.split("/")[1]),i=this.assetsPath+s}else i=this.path,i+=e.u?e.u:"",i+=e.p;return i},AnimationItem.prototype.getAssetData=function(e){for(var i=0,s=this.assets.length;i<s;){if(e===this.assets[i].id)return this.assets[i];i+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(e){return e?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(e,i,s){try{var a=this.renderer.getElementByPath(e);a.updateDocumentData(i,s)}catch{}},AnimationItem.prototype.trigger=function(e){if(this._cbs&&this._cbs[e])switch(e){case"enterFrame":this.triggerEvent(e,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(e,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(e,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(e,new BMCompleteEvent(e,this.frameMult));break;case"segmentStart":this.triggerEvent(e,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(e,new BMDestroyEvent(e,this));break;default:this.triggerEvent(e)}e==="enterFrame"&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(e,this.currentFrame,this.totalFrames,this.frameMult)),e==="loopComplete"&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(e,this.loop,this.playCount,this.frameMult)),e==="complete"&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(e,this.frameMult)),e==="segmentStart"&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(e,this.firstFrame,this.totalFrames)),e==="destroy"&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(e,this))},AnimationItem.prototype.triggerRenderFrameError=function(e){var i=new BMRenderFrameErrorEvent(e,this.currentFrame);this.triggerEvent("error",i),this.onError&&this.onError.call(this,i)},AnimationItem.prototype.triggerConfigError=function(e){var i=new BMConfigErrorEvent(e,this.currentFrame);this.triggerEvent("error",i),this.onError&&this.onError.call(this,i)};var animationManager=function(){var e={},i=[],s=0,a=0,o=0,c=!0,d=!1;function g(pt){for(var mt=0,ot=pt.target;mt<a;)i[mt].animation===ot&&(i.splice(mt,1),mt-=1,a-=1,ot.isPaused||nt()),mt+=1}function _(pt,mt){if(!pt)return null;for(var ot=0;ot<a;){if(i[ot].elem===pt&&i[ot].elem!==null)return i[ot].animation;ot+=1}var ht=new AnimationItem;return tt(ht,pt),ht.setData(pt,mt),ht}function b(){var pt,mt=i.length,ot=[];for(pt=0;pt<mt;pt+=1)ot.push(i[pt].animation);return ot}function j(){o+=1,Ct()}function nt(){o-=1}function tt(pt,mt){pt.addEventListener("destroy",g),pt.addEventListener("_active",j),pt.addEventListener("_idle",nt),i.push({elem:mt,animation:pt}),a+=1}function at(pt){var mt=new AnimationItem;return tt(mt,null),mt.setParams(pt),mt}function it(pt,mt){var ot;for(ot=0;ot<a;ot+=1)i[ot].animation.setSpeed(pt,mt)}function rt(pt,mt){var ot;for(ot=0;ot<a;ot+=1)i[ot].animation.setDirection(pt,mt)}function ut(pt){var mt;for(mt=0;mt<a;mt+=1)i[mt].animation.play(pt)}function $(pt){var mt=pt-s,ot;for(ot=0;ot<a;ot+=1)i[ot].animation.advanceTime(mt);s=pt,o&&!d?window.requestAnimationFrame($):c=!0}function et(pt){s=pt,window.requestAnimationFrame($)}function _e(pt){var mt;for(mt=0;mt<a;mt+=1)i[mt].animation.pause(pt)}function st(pt,mt,ot){var ht;for(ht=0;ht<a;ht+=1)i[ht].animation.goToAndStop(pt,mt,ot)}function ft(pt){var mt;for(mt=0;mt<a;mt+=1)i[mt].animation.stop(pt)}function lt(pt){var mt;for(mt=0;mt<a;mt+=1)i[mt].animation.togglePause(pt)}function ct(pt){var mt;for(mt=a-1;mt>=0;mt-=1)i[mt].animation.destroy(pt)}function dt(pt,mt,ot){var ht=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),yt,vt=ht.length;for(yt=0;yt<vt;yt+=1)ot&&ht[yt].setAttribute("data-bm-type",ot),_(ht[yt],pt);if(mt&&vt===0){ot||(ot="svg");var xt=document.getElementsByTagName("body")[0];xt.innerText="";var Tt=createTag("div");Tt.style.width="100%",Tt.style.height="100%",Tt.setAttribute("data-bm-type",ot),xt.appendChild(Tt),_(Tt,pt)}}function gt(){var pt;for(pt=0;pt<a;pt+=1)i[pt].animation.resize()}function Ct(){!d&&o&&c&&(window.requestAnimationFrame(et),c=!1)}function _t(){d=!0}function Pt(){d=!1,Ct()}function bt(pt,mt){var ot;for(ot=0;ot<a;ot+=1)i[ot].animation.setVolume(pt,mt)}function Mt(pt){var mt;for(mt=0;mt<a;mt+=1)i[mt].animation.mute(pt)}function wt(pt){var mt;for(mt=0;mt<a;mt+=1)i[mt].animation.unmute(pt)}return e.registerAnimation=_,e.loadAnimation=at,e.setSpeed=it,e.setDirection=rt,e.play=ut,e.pause=_e,e.stop=ft,e.togglePause=lt,e.searchAnimations=dt,e.resize=gt,e.goToAndStop=st,e.destroy=ct,e.freeze=_t,e.unfreeze=Pt,e.setVolume=bt,e.mute=Mt,e.unmute=wt,e.getRegisteredAnimations=b,e}(),BezierFactory=function(){var e={};e.getBezierEasing=s;var i={};function s(et,_e,st,ft,lt){var ct=lt||("bez_"+et+"_"+_e+"_"+st+"_"+ft).replace(/\./g,"p");if(i[ct])return i[ct];var dt=new $([et,_e,st,ft]);return i[ct]=dt,dt}var a=4,o=.001,c=1e-7,d=10,g=11,_=1/(g-1),b=typeof Float32Array=="function";function j(et,_e){return 1-3*_e+3*et}function nt(et,_e){return 3*_e-6*et}function tt(et){return 3*et}function at(et,_e,st){return((j(_e,st)*et+nt(_e,st))*et+tt(_e))*et}function it(et,_e,st){return 3*j(_e,st)*et*et+2*nt(_e,st)*et+tt(_e)}function rt(et,_e,st,ft,lt){var ct,dt,gt=0;do dt=_e+(st-_e)/2,ct=at(dt,ft,lt)-et,ct>0?st=dt:_e=dt;while(Math.abs(ct)>c&&++gt<d);return dt}function ut(et,_e,st,ft){for(var lt=0;lt<a;++lt){var ct=it(_e,st,ft);if(ct===0)return _e;var dt=at(_e,st,ft)-et;_e-=dt/ct}return _e}function $(et){this._p=et,this._mSampleValues=b?new Float32Array(g):new Array(g),this._precomputed=!1,this.get=this.get.bind(this)}return $.prototype={get:function(_e){var st=this._p[0],ft=this._p[1],lt=this._p[2],ct=this._p[3];return this._precomputed||this._precompute(),st===ft&&lt===ct?_e:_e===0?0:_e===1?1:at(this._getTForX(_e),ft,ct)},_precompute:function(){var _e=this._p[0],st=this._p[1],ft=this._p[2],lt=this._p[3];this._precomputed=!0,(_e!==st||ft!==lt)&&this._calcSampleValues()},_calcSampleValues:function(){for(var _e=this._p[0],st=this._p[2],ft=0;ft<g;++ft)this._mSampleValues[ft]=at(ft*_,_e,st)},_getTForX:function(_e){for(var st=this._p[0],ft=this._p[2],lt=this._mSampleValues,ct=0,dt=1,gt=g-1;dt!==gt&&lt[dt]<=_e;++dt)ct+=_;--dt;var Ct=(_e-lt[dt])/(lt[dt+1]-lt[dt]),_t=ct+Ct*_,Pt=it(_t,st,ft);return Pt>=o?ut(_e,_t,st,ft):Pt===0?_t:rt(_e,ct,ct+_,st,ft)}},e}(),pooling=function(){function e(i){return i.concat(createSizedArray(i.length))}return{double:e}}(),poolFactory=function(){return function(e,i,s){var a=0,o=e,c=createSizedArray(o),d={newElement:g,release:_};function g(){var b;return a?(a-=1,b=c[a]):b=i(),b}function _(b){a===o&&(c=pooling.double(c),o*=2),s&&s(b),c[a]=b,a+=1}return d}}(),bezierLengthPool=function(){function e(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}return poolFactory(8,e)}(),segmentsLengthPool=function(){function e(){return{lengths:[],totalLength:0}}function i(s){var a,o=s.lengths.length;for(a=0;a<o;a+=1)bezierLengthPool.release(s.lengths[a]);s.lengths.length=0}return poolFactory(8,e,i)}();function bezFunction(){var e=Math;function i(tt,at,it,rt,ut,$){var et=tt*rt+at*ut+it*$-ut*rt-$*tt-it*at;return et>-.001&&et<.001}function s(tt,at,it,rt,ut,$,et,_e,st){if(it===0&&$===0&&st===0)return i(tt,at,rt,ut,et,_e);var ft=e.sqrt(e.pow(rt-tt,2)+e.pow(ut-at,2)+e.pow($-it,2)),lt=e.sqrt(e.pow(et-tt,2)+e.pow(_e-at,2)+e.pow(st-it,2)),ct=e.sqrt(e.pow(et-rt,2)+e.pow(_e-ut,2)+e.pow(st-$,2)),dt;return ft>lt?ft>ct?dt=ft-lt-ct:dt=ct-lt-ft:ct>lt?dt=ct-lt-ft:dt=lt-ft-ct,dt>-1e-4&&dt<1e-4}var a=function(){return function(tt,at,it,rt){var ut=getDefaultCurveSegments(),$,et,_e,st,ft,lt=0,ct,dt=[],gt=[],Ct=bezierLengthPool.newElement();for(_e=it.length,$=0;$<ut;$+=1){for(ft=$/(ut-1),ct=0,et=0;et<_e;et+=1)st=bmPow(1-ft,3)*tt[et]+3*bmPow(1-ft,2)*ft*it[et]+3*(1-ft)*bmPow(ft,2)*rt[et]+bmPow(ft,3)*at[et],dt[et]=st,gt[et]!==null&&(ct+=bmPow(dt[et]-gt[et],2)),gt[et]=dt[et];ct&&(ct=bmSqrt(ct),lt+=ct),Ct.percents[$]=ft,Ct.lengths[$]=lt}return Ct.addedLength=lt,Ct}}();function o(tt){var at=segmentsLengthPool.newElement(),it=tt.c,rt=tt.v,ut=tt.o,$=tt.i,et,_e=tt._length,st=at.lengths,ft=0;for(et=0;et<_e-1;et+=1)st[et]=a(rt[et],rt[et+1],ut[et],$[et+1]),ft+=st[et].addedLength;return it&&_e&&(st[et]=a(rt[et],rt[0],ut[et],$[0]),ft+=st[et].addedLength),at.totalLength=ft,at}function c(tt){this.segmentLength=0,this.points=new Array(tt)}function d(tt,at){this.partialLength=tt,this.point=at}var g=function(){var tt={};return function(at,it,rt,ut){var $=(at[0]+"_"+at[1]+"_"+it[0]+"_"+it[1]+"_"+rt[0]+"_"+rt[1]+"_"+ut[0]+"_"+ut[1]).replace(/\./g,"p");if(!tt[$]){var et=getDefaultCurveSegments(),_e,st,ft,lt,ct,dt=0,gt,Ct,_t=null;at.length===2&&(at[0]!==it[0]||at[1]!==it[1])&&i(at[0],at[1],it[0],it[1],at[0]+rt[0],at[1]+rt[1])&&i(at[0],at[1],it[0],it[1],it[0]+ut[0],it[1]+ut[1])&&(et=2);var Pt=new c(et);for(ft=rt.length,_e=0;_e<et;_e+=1){for(Ct=createSizedArray(ft),ct=_e/(et-1),gt=0,st=0;st<ft;st+=1)lt=bmPow(1-ct,3)*at[st]+3*bmPow(1-ct,2)*ct*(at[st]+rt[st])+3*(1-ct)*bmPow(ct,2)*(it[st]+ut[st])+bmPow(ct,3)*it[st],Ct[st]=lt,_t!==null&&(gt+=bmPow(Ct[st]-_t[st],2));gt=bmSqrt(gt),dt+=gt,Pt.points[_e]=new d(gt,Ct),_t=Ct}Pt.segmentLength=dt,tt[$]=Pt}return tt[$]}}();function _(tt,at){var it=at.percents,rt=at.lengths,ut=it.length,$=bmFloor((ut-1)*tt),et=tt*at.addedLength,_e=0;if($===ut-1||$===0||et===rt[$])return it[$];for(var st=rt[$]>et?-1:1,ft=!0;ft;)if(rt[$]<=et&&rt[$+1]>et?(_e=(et-rt[$])/(rt[$+1]-rt[$]),ft=!1):$+=st,$<0||$>=ut-1){if($===ut-1)return it[$];ft=!1}return it[$]+(it[$+1]-it[$])*_e}function b(tt,at,it,rt,ut,$){var et=_(ut,$),_e=1-et,st=e.round((_e*_e*_e*tt[0]+(et*_e*_e+_e*et*_e+_e*_e*et)*it[0]+(et*et*_e+_e*et*et+et*_e*et)*rt[0]+et*et*et*at[0])*1e3)/1e3,ft=e.round((_e*_e*_e*tt[1]+(et*_e*_e+_e*et*_e+_e*_e*et)*it[1]+(et*et*_e+_e*et*et+et*_e*et)*rt[1]+et*et*et*at[1])*1e3)/1e3;return[st,ft]}var j=createTypedArray("float32",8);function nt(tt,at,it,rt,ut,$,et){ut<0?ut=0:ut>1&&(ut=1);var _e=_(ut,et);$=$>1?1:$;var st=_($,et),ft,lt=tt.length,ct=1-_e,dt=1-st,gt=ct*ct*ct,Ct=_e*ct*ct*3,_t=_e*_e*ct*3,Pt=_e*_e*_e,bt=ct*ct*dt,Mt=_e*ct*dt+ct*_e*dt+ct*ct*st,wt=_e*_e*dt+ct*_e*st+_e*ct*st,pt=_e*_e*st,mt=ct*dt*dt,ot=_e*dt*dt+ct*st*dt+ct*dt*st,ht=_e*st*dt+ct*st*st+_e*dt*st,yt=_e*st*st,vt=dt*dt*dt,xt=st*dt*dt+dt*st*dt+dt*dt*st,Tt=st*st*dt+dt*st*st+st*dt*st,At=st*st*st;for(ft=0;ft<lt;ft+=1)j[ft*4]=e.round((gt*tt[ft]+Ct*it[ft]+_t*rt[ft]+Pt*at[ft])*1e3)/1e3,j[ft*4+1]=e.round((bt*tt[ft]+Mt*it[ft]+wt*rt[ft]+pt*at[ft])*1e3)/1e3,j[ft*4+2]=e.round((mt*tt[ft]+ot*it[ft]+ht*rt[ft]+yt*at[ft])*1e3)/1e3,j[ft*4+3]=e.round((vt*tt[ft]+xt*it[ft]+Tt*rt[ft]+At*at[ft])*1e3)/1e3;return j}return{getSegmentsLength:o,getNewSegment:nt,getPointInSegment:b,buildBezierData:g,pointOnLine2D:i,pointOnLine3D:s}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(e,i){var s=this.offsetTime,a;this.propType==="multidimensional"&&(a=createTypedArray("float32",this.pv.length));for(var o=i.lastIndex,c=o,d=this.keyframes.length-1,g=!0,_,b,j;g;){if(_=this.keyframes[c],b=this.keyframes[c+1],c===d-1&&e>=b.t-s){_.h&&(_=b),o=0;break}if(b.t-s>e){o=c;break}c<d-1?c+=1:(o=0,g=!1)}j=this.keyframesMetadata[c]||{};var nt,tt,at,it,rt,ut,$=b.t-s,et=_.t-s,_e;if(_.to){j.bezierData||(j.bezierData=bez.buildBezierData(_.s,b.s||_.e,_.to,_.ti));var st=j.bezierData;if(e>=$||e<et){var ft=e>=$?st.points.length-1:0;for(tt=st.points[ft].point.length,nt=0;nt<tt;nt+=1)a[nt]=st.points[ft].point[nt]}else{j.__fnct?ut=j.__fnct:(ut=BezierFactory.getBezierEasing(_.o.x,_.o.y,_.i.x,_.i.y,_.n).get,j.__fnct=ut),at=ut((e-et)/($-et));var lt=st.segmentLength*at,ct,dt=i.lastFrame<e&&i._lastKeyframeIndex===c?i._lastAddedLength:0;for(rt=i.lastFrame<e&&i._lastKeyframeIndex===c?i._lastPoint:0,g=!0,it=st.points.length;g;){if(dt+=st.points[rt].partialLength,lt===0||at===0||rt===st.points.length-1){for(tt=st.points[rt].point.length,nt=0;nt<tt;nt+=1)a[nt]=st.points[rt].point[nt];break}else if(lt>=dt&&lt<dt+st.points[rt+1].partialLength){for(ct=(lt-dt)/st.points[rt+1].partialLength,tt=st.points[rt].point.length,nt=0;nt<tt;nt+=1)a[nt]=st.points[rt].point[nt]+(st.points[rt+1].point[nt]-st.points[rt].point[nt])*ct;break}rt<it-1?rt+=1:g=!1}i._lastPoint=rt,i._lastAddedLength=dt-st.points[rt].partialLength,i._lastKeyframeIndex=c}}else{var gt,Ct,_t,Pt,bt;if(d=_.s.length,_e=b.s||_.e,this.sh&&_.h!==1)if(e>=$)a[0]=_e[0],a[1]=_e[1],a[2]=_e[2];else if(e<=et)a[0]=_.s[0],a[1]=_.s[1],a[2]=_.s[2];else{var Mt=createQuaternion(_.s),wt=createQuaternion(_e),pt=(e-et)/($-et);quaternionToEuler(a,slerp(Mt,wt,pt))}else for(c=0;c<d;c+=1)_.h!==1&&(e>=$?at=1:e<et?at=0:(_.o.x.constructor===Array?(j.__fnct||(j.__fnct=[]),j.__fnct[c]?ut=j.__fnct[c]:(gt=_.o.x[c]===void 0?_.o.x[0]:_.o.x[c],Ct=_.o.y[c]===void 0?_.o.y[0]:_.o.y[c],_t=_.i.x[c]===void 0?_.i.x[0]:_.i.x[c],Pt=_.i.y[c]===void 0?_.i.y[0]:_.i.y[c],ut=BezierFactory.getBezierEasing(gt,Ct,_t,Pt).get,j.__fnct[c]=ut)):j.__fnct?ut=j.__fnct:(gt=_.o.x,Ct=_.o.y,_t=_.i.x,Pt=_.i.y,ut=BezierFactory.getBezierEasing(gt,Ct,_t,Pt).get,_.keyframeMetadata=ut),at=ut((e-et)/($-et)))),_e=b.s||_.e,bt=_.h===1?_.s[c]:_.s[c]+(_e[c]-_.s[c])*at,this.propType==="multidimensional"?a[c]=bt:a=bt}return i.lastIndex=o,a}function slerp(e,i,s){var a=[],o=e[0],c=e[1],d=e[2],g=e[3],_=i[0],b=i[1],j=i[2],nt=i[3],tt,at,it,rt,ut;return at=o*_+c*b+d*j+g*nt,at<0&&(at=-at,_=-_,b=-b,j=-j,nt=-nt),1-at>1e-6?(tt=Math.acos(at),it=Math.sin(tt),rt=Math.sin((1-s)*tt)/it,ut=Math.sin(s*tt)/it):(rt=1-s,ut=s),a[0]=rt*o+ut*_,a[1]=rt*c+ut*b,a[2]=rt*d+ut*j,a[3]=rt*g+ut*nt,a}function quaternionToEuler(e,i){var s=i[0],a=i[1],o=i[2],c=i[3],d=Math.atan2(2*a*c-2*s*o,1-2*a*a-2*o*o),g=Math.asin(2*s*a+2*o*c),_=Math.atan2(2*s*c-2*a*o,1-2*s*s-2*o*o);e[0]=d/degToRads,e[1]=g/degToRads,e[2]=_/degToRads}function createQuaternion(e){var i=e[0]*degToRads,s=e[1]*degToRads,a=e[2]*degToRads,o=Math.cos(i/2),c=Math.cos(s/2),d=Math.cos(a/2),g=Math.sin(i/2),_=Math.sin(s/2),b=Math.sin(a/2),j=o*c*d-g*_*b,nt=g*_*d+o*c*b,tt=g*c*d+o*_*b,at=o*_*d-g*c*b;return[nt,tt,at,j]}function getValueAtCurrentTime(){var e=this.comp.renderedFrame-this.offsetTime,i=this.keyframes[0].t-this.offsetTime,s=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(e===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=s&&e>=s||this._caching.lastFrame<i&&e<i))){this._caching.lastFrame>=e&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var a=this.interpolateValue(e,this._caching);this.pv=a}return this._caching.lastFrame=e,this.pv}function setVValue(e){var i;if(this.propType==="unidimensional")i=e*this.mult,mathAbs(this.v-i)>1e-5&&(this.v=i,this._mdf=!0);else for(var s=0,a=this.v.length;s<a;)i=e[s]*this.mult,mathAbs(this.v[s]-i)>1e-5&&(this.v[s]=i,this._mdf=!0),s+=1}function processEffectsSequence(){if(!(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)){if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=this._isFirstFrame;var e,i=this.effectsSequence.length,s=this.kf?this.pv:this.data.k;for(e=0;e<i;e+=1)s=this.effectsSequence[e](s);this.setVValue(s),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(e){this.effectsSequence.push(e),this.container.addDynamicProperty(this)}function ValueProperty(e,i,s,a){this.propType="unidimensional",this.mult=s||1,this.data=i,this.v=s?i.k*s:i.k,this.pv=i.k,this._mdf=!1,this.elem=e,this.container=a,this.comp=e.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(e,i,s,a){this.propType="multidimensional",this.mult=s||1,this.data=i,this._mdf=!1,this.elem=e,this.container=a,this.comp=e.comp,this.k=!1,this.kf=!1,this.frameId=-1;var o,c=i.k.length;for(this.v=createTypedArray("float32",c),this.pv=createTypedArray("float32",c),this.vel=createTypedArray("float32",c),o=0;o<c;o+=1)this.v[o]=i.k[o]*this.mult,this.pv[o]=i.k[o];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(e,i,s,a){this.propType="unidimensional",this.keyframes=i.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=i,this.mult=s||1,this.elem=e,this.container=a,this.comp=e.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(e,i,s,a){this.propType="multidimensional";var o,c=i.k.length,d,g,_,b;for(o=0;o<c-1;o+=1)i.k[o].to&&i.k[o].s&&i.k[o+1]&&i.k[o+1].s&&(d=i.k[o].s,g=i.k[o+1].s,_=i.k[o].to,b=i.k[o].ti,(d.length===2&&!(d[0]===g[0]&&d[1]===g[1])&&bez.pointOnLine2D(d[0],d[1],g[0],g[1],d[0]+_[0],d[1]+_[1])&&bez.pointOnLine2D(d[0],d[1],g[0],g[1],g[0]+b[0],g[1]+b[1])||d.length===3&&!(d[0]===g[0]&&d[1]===g[1]&&d[2]===g[2])&&bez.pointOnLine3D(d[0],d[1],d[2],g[0],g[1],g[2],d[0]+_[0],d[1]+_[1],d[2]+_[2])&&bez.pointOnLine3D(d[0],d[1],d[2],g[0],g[1],g[2],g[0]+b[0],g[1]+b[1],g[2]+b[2]))&&(i.k[o].to=null,i.k[o].ti=null),d[0]===g[0]&&d[1]===g[1]&&_[0]===0&&_[1]===0&&b[0]===0&&b[1]===0&&(d.length===2||d[2]===g[2]&&_[2]===0&&b[2]===0)&&(i.k[o].to=null,i.k[o].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=i,this.keyframes=i.k,this.keyframesMetadata=[],this.offsetTime=e.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=s||1,this.elem=e,this.container=a,this.comp=e.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var j=i.k[0].s.length;for(this.v=createTypedArray("float32",j),this.pv=createTypedArray("float32",j),o=0;o<j;o+=1)this.v[o]=initFrame,this.pv[o]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",j)},this.addEffect=addEffect}var PropertyFactory=function(){function e(s,a,o,c,d){a.sid&&(a=s.globalData.slotManager.getProp(a));var g;if(!a.k.length)g=new ValueProperty(s,a,c,d);else if(typeof a.k[0]=="number")g=new MultiDimensionalProperty(s,a,c,d);else switch(o){case 0:g=new KeyframedValueProperty(s,a,c,d);break;case 1:g=new KeyframedMultidimensionalProperty(s,a,c,d);break}return g.effectsSequence.length&&d.addDynamicProperty(g),g}var i={getProp:e};return i}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(i){this.dynamicProperties.indexOf(i)===-1&&(this.dynamicProperties.push(i),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var i,s=this.dynamicProperties.length;for(i=0;i<s;i+=1)this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(i){this.container=i,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=function(){function e(){return createTypedArray("float32",2)}return poolFactory(8,e)}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(e,i){this.c=e,this.setLength(i);for(var s=0;s<i;)this.v[s]=pointPool.newElement(),this.o[s]=pointPool.newElement(),this.i[s]=pointPool.newElement(),s+=1},ShapePath.prototype.setLength=function(e){for(;this._maxLength<e;)this.doubleArrayLength();this._length=e},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(e,i,s,a,o){var c;switch(this._length=Math.max(this._length,a+1),this._length>=this._maxLength&&this.doubleArrayLength(),s){case"v":c=this.v;break;case"i":c=this.i;break;case"o":c=this.o;break;default:c=[];break}(!c[a]||c[a]&&!o)&&(c[a]=pointPool.newElement()),c[a][0]=e,c[a][1]=i},ShapePath.prototype.setTripleAt=function(e,i,s,a,o,c,d,g){this.setXYAt(e,i,"v",d,g),this.setXYAt(s,a,"o",d,g),this.setXYAt(o,c,"i",d,g)},ShapePath.prototype.reverse=function(){var e=new ShapePath;e.setPathData(this.c,this._length);var i=this.v,s=this.o,a=this.i,o=0;this.c&&(e.setTripleAt(i[0][0],i[0][1],a[0][0],a[0][1],s[0][0],s[0][1],0,!1),o=1);var c=this._length-1,d=this._length,g;for(g=o;g<d;g+=1)e.setTripleAt(i[c][0],i[c][1],a[c][0],a[c][1],s[c][0],s[c][1],g,!1),c-=1;return e},ShapePath.prototype.length=function(){return this._length};var shapePool=function(){function e(){return new ShapePath}function i(o){var c=o._length,d;for(d=0;d<c;d+=1)pointPool.release(o.v[d]),pointPool.release(o.i[d]),pointPool.release(o.o[d]),o.v[d]=null,o.i[d]=null,o.o[d]=null;o._length=0,o.c=!1}function s(o){var c=a.newElement(),d,g=o._length===void 0?o.v.length:o._length;for(c.setLength(g),c.c=o.c,d=0;d<g;d+=1)c.setTripleAt(o.v[d][0],o.v[d][1],o.o[d][0],o.o[d][1],o.i[d][0],o.i[d][1],d);return c}var a=poolFactory(4,e,i);return a.clone=s,a}();function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(e){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=e,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var e;for(e=0;e<this._length;e+=1)shapePool.release(this.shapes[e]);this._length=0};var shapeCollectionPool=function(){var e={newShapeCollection:o,release:c},i=0,s=4,a=createSizedArray(s);function o(){var d;return i?(i-=1,d=a[i]):d=new ShapeCollection,d}function c(d){var g,_=d._length;for(g=0;g<_;g+=1)shapePool.release(d.shapes[g]);d._length=0,i===s&&(a=pooling.double(a),s*=2),a[i]=d,i+=1}return e}(),ShapePropertyFactory=function(){var e=-999999;function i($,et,_e){var st=_e.lastIndex,ft,lt,ct,dt,gt,Ct,_t,Pt,bt,Mt=this.keyframes;if($<Mt[0].t-this.offsetTime)ft=Mt[0].s[0],ct=!0,st=0;else if($>=Mt[Mt.length-1].t-this.offsetTime)ft=Mt[Mt.length-1].s?Mt[Mt.length-1].s[0]:Mt[Mt.length-2].e[0],ct=!0;else{for(var wt=st,pt=Mt.length-1,mt=!0,ot,ht,yt;mt&&(ot=Mt[wt],ht=Mt[wt+1],!(ht.t-this.offsetTime>$));)wt<pt-1?wt+=1:mt=!1;if(yt=this.keyframesMetadata[wt]||{},ct=ot.h===1,st=wt,!ct){if($>=ht.t-this.offsetTime)Pt=1;else if($<ot.t-this.offsetTime)Pt=0;else{var vt;yt.__fnct?vt=yt.__fnct:(vt=BezierFactory.getBezierEasing(ot.o.x,ot.o.y,ot.i.x,ot.i.y).get,yt.__fnct=vt),Pt=vt(($-(ot.t-this.offsetTime))/(ht.t-this.offsetTime-(ot.t-this.offsetTime)))}lt=ht.s?ht.s[0]:ot.e[0]}ft=ot.s[0]}for(Ct=et._length,_t=ft.i[0].length,_e.lastIndex=st,dt=0;dt<Ct;dt+=1)for(gt=0;gt<_t;gt+=1)bt=ct?ft.i[dt][gt]:ft.i[dt][gt]+(lt.i[dt][gt]-ft.i[dt][gt])*Pt,et.i[dt][gt]=bt,bt=ct?ft.o[dt][gt]:ft.o[dt][gt]+(lt.o[dt][gt]-ft.o[dt][gt])*Pt,et.o[dt][gt]=bt,bt=ct?ft.v[dt][gt]:ft.v[dt][gt]+(lt.v[dt][gt]-ft.v[dt][gt])*Pt,et.v[dt][gt]=bt}function s(){var $=this.comp.renderedFrame-this.offsetTime,et=this.keyframes[0].t-this.offsetTime,_e=this.keyframes[this.keyframes.length-1].t-this.offsetTime,st=this._caching.lastFrame;return st!==e&&(st<et&&$<et||st>_e&&$>_e)||(this._caching.lastIndex=st<$?this._caching.lastIndex:0,this.interpolateShape($,this.pv,this._caching)),this._caching.lastFrame=$,this.pv}function a(){this.paths=this.localShapeCollection}function o($,et){if($._length!==et._length||$.c!==et.c)return!1;var _e,st=$._length;for(_e=0;_e<st;_e+=1)if($.v[_e][0]!==et.v[_e][0]||$.v[_e][1]!==et.v[_e][1]||$.o[_e][0]!==et.o[_e][0]||$.o[_e][1]!==et.o[_e][1]||$.i[_e][0]!==et.i[_e][0]||$.i[_e][1]!==et.i[_e][1])return!1;return!0}function c($){o(this.v,$)||(this.v=shapePool.clone($),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function d(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length){this._mdf=!1;return}if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=!1;var $;this.kf?$=this.pv:this.data.ks?$=this.data.ks.k:$=this.data.pt.k;var et,_e=this.effectsSequence.length;for(et=0;et<_e;et+=1)$=this.effectsSequence[et]($);this.setVValue($),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function g($,et,_e){this.propType="shape",this.comp=$.comp,this.container=$,this.elem=$,this.data=et,this.k=!1,this.kf=!1,this._mdf=!1;var st=_e===3?et.pt.k:et.ks.k;this.v=shapePool.clone(st),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=a,this.effectsSequence=[]}function _($){this.effectsSequence.push($),this.container.addDynamicProperty(this)}g.prototype.interpolateShape=i,g.prototype.getValue=d,g.prototype.setVValue=c,g.prototype.addEffect=_;function b($,et,_e){this.propType="shape",this.comp=$.comp,this.elem=$,this.container=$,this.offsetTime=$.data.st,this.keyframes=_e===3?et.pt.k:et.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var st=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,st),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=e,this.reset=a,this._caching={lastFrame:e,lastIndex:0},this.effectsSequence=[s.bind(this)]}b.prototype.getValue=d,b.prototype.interpolateShape=i,b.prototype.setVValue=c,b.prototype.addEffect=_;var j=function(){var $=roundCorner;function et(_e,st){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=st.d,this.elem=_e,this.comp=_e.comp,this.frameId=-1,this.initDynamicPropertyContainer(_e),this.p=PropertyFactory.getProp(_e,st.p,1,0,this),this.s=PropertyFactory.getProp(_e,st.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return et.prototype={reset:a,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var st=this.p.v[0],ft=this.p.v[1],lt=this.s.v[0]/2,ct=this.s.v[1]/2,dt=this.d!==3,gt=this.v;gt.v[0][0]=st,gt.v[0][1]=ft-ct,gt.v[1][0]=dt?st+lt:st-lt,gt.v[1][1]=ft,gt.v[2][0]=st,gt.v[2][1]=ft+ct,gt.v[3][0]=dt?st-lt:st+lt,gt.v[3][1]=ft,gt.i[0][0]=dt?st-lt*$:st+lt*$,gt.i[0][1]=ft-ct,gt.i[1][0]=dt?st+lt:st-lt,gt.i[1][1]=ft-ct*$,gt.i[2][0]=dt?st+lt*$:st-lt*$,gt.i[2][1]=ft+ct,gt.i[3][0]=dt?st-lt:st+lt,gt.i[3][1]=ft+ct*$,gt.o[0][0]=dt?st+lt*$:st-lt*$,gt.o[0][1]=ft-ct,gt.o[1][0]=dt?st+lt:st-lt,gt.o[1][1]=ft+ct*$,gt.o[2][0]=dt?st-lt*$:st+lt*$,gt.o[2][1]=ft+ct,gt.o[3][0]=dt?st-lt:st+lt,gt.o[3][1]=ft-ct*$}},extendPrototype([DynamicPropertyContainer],et),et}(),nt=function(){function $(et,_e){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=et,this.comp=et.comp,this.data=_e,this.frameId=-1,this.d=_e.d,this.initDynamicPropertyContainer(et),_e.sy===1?(this.ir=PropertyFactory.getProp(et,_e.ir,0,0,this),this.is=PropertyFactory.getProp(et,_e.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(et,_e.pt,0,0,this),this.p=PropertyFactory.getProp(et,_e.p,1,0,this),this.r=PropertyFactory.getProp(et,_e.r,0,degToRads,this),this.or=PropertyFactory.getProp(et,_e.or,0,0,this),this.os=PropertyFactory.getProp(et,_e.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return $.prototype={reset:a,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var _e=Math.floor(this.pt.v)*2,st=Math.PI*2/_e,ft=!0,lt=this.or.v,ct=this.ir.v,dt=this.os.v,gt=this.is.v,Ct=2*Math.PI*lt/(_e*2),_t=2*Math.PI*ct/(_e*2),Pt,bt,Mt,wt,pt=-Math.PI/2;pt+=this.r.v;var mt=this.data.d===3?-1:1;for(this.v._length=0,Pt=0;Pt<_e;Pt+=1){bt=ft?lt:ct,Mt=ft?dt:gt,wt=ft?Ct:_t;var ot=bt*Math.cos(pt),ht=bt*Math.sin(pt),yt=ot===0&&ht===0?0:ht/Math.sqrt(ot*ot+ht*ht),vt=ot===0&&ht===0?0:-ot/Math.sqrt(ot*ot+ht*ht);ot+=+this.p.v[0],ht+=+this.p.v[1],this.v.setTripleAt(ot,ht,ot-yt*wt*Mt*mt,ht-vt*wt*Mt*mt,ot+yt*wt*Mt*mt,ht+vt*wt*Mt*mt,Pt,!0),ft=!ft,pt+=st*mt}},convertPolygonToPath:function(){var _e=Math.floor(this.pt.v),st=Math.PI*2/_e,ft=this.or.v,lt=this.os.v,ct=2*Math.PI*ft/(_e*4),dt,gt=-Math.PI*.5,Ct=this.data.d===3?-1:1;for(gt+=this.r.v,this.v._length=0,dt=0;dt<_e;dt+=1){var _t=ft*Math.cos(gt),Pt=ft*Math.sin(gt),bt=_t===0&&Pt===0?0:Pt/Math.sqrt(_t*_t+Pt*Pt),Mt=_t===0&&Pt===0?0:-_t/Math.sqrt(_t*_t+Pt*Pt);_t+=+this.p.v[0],Pt+=+this.p.v[1],this.v.setTripleAt(_t,Pt,_t-bt*ct*lt*Ct,Pt-Mt*ct*lt*Ct,_t+bt*ct*lt*Ct,Pt+Mt*ct*lt*Ct,dt,!0),gt+=st*Ct}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],$),$}(),tt=function(){function $(et,_e){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=et,this.comp=et.comp,this.frameId=-1,this.d=_e.d,this.initDynamicPropertyContainer(et),this.p=PropertyFactory.getProp(et,_e.p,1,0,this),this.s=PropertyFactory.getProp(et,_e.s,1,0,this),this.r=PropertyFactory.getProp(et,_e.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return $.prototype={convertRectToPath:function(){var _e=this.p.v[0],st=this.p.v[1],ft=this.s.v[0]/2,lt=this.s.v[1]/2,ct=bmMin(ft,lt,this.r.v),dt=ct*(1-roundCorner);this.v._length=0,this.d===2||this.d===1?(this.v.setTripleAt(_e+ft,st-lt+ct,_e+ft,st-lt+ct,_e+ft,st-lt+dt,0,!0),this.v.setTripleAt(_e+ft,st+lt-ct,_e+ft,st+lt-dt,_e+ft,st+lt-ct,1,!0),ct!==0?(this.v.setTripleAt(_e+ft-ct,st+lt,_e+ft-ct,st+lt,_e+ft-dt,st+lt,2,!0),this.v.setTripleAt(_e-ft+ct,st+lt,_e-ft+dt,st+lt,_e-ft+ct,st+lt,3,!0),this.v.setTripleAt(_e-ft,st+lt-ct,_e-ft,st+lt-ct,_e-ft,st+lt-dt,4,!0),this.v.setTripleAt(_e-ft,st-lt+ct,_e-ft,st-lt+dt,_e-ft,st-lt+ct,5,!0),this.v.setTripleAt(_e-ft+ct,st-lt,_e-ft+ct,st-lt,_e-ft+dt,st-lt,6,!0),this.v.setTripleAt(_e+ft-ct,st-lt,_e+ft-dt,st-lt,_e+ft-ct,st-lt,7,!0)):(this.v.setTripleAt(_e-ft,st+lt,_e-ft+dt,st+lt,_e-ft,st+lt,2),this.v.setTripleAt(_e-ft,st-lt,_e-ft,st-lt+dt,_e-ft,st-lt,3))):(this.v.setTripleAt(_e+ft,st-lt+ct,_e+ft,st-lt+dt,_e+ft,st-lt+ct,0,!0),ct!==0?(this.v.setTripleAt(_e+ft-ct,st-lt,_e+ft-ct,st-lt,_e+ft-dt,st-lt,1,!0),this.v.setTripleAt(_e-ft+ct,st-lt,_e-ft+dt,st-lt,_e-ft+ct,st-lt,2,!0),this.v.setTripleAt(_e-ft,st-lt+ct,_e-ft,st-lt+ct,_e-ft,st-lt+dt,3,!0),this.v.setTripleAt(_e-ft,st+lt-ct,_e-ft,st+lt-dt,_e-ft,st+lt-ct,4,!0),this.v.setTripleAt(_e-ft+ct,st+lt,_e-ft+ct,st+lt,_e-ft+dt,st+lt,5,!0),this.v.setTripleAt(_e+ft-ct,st+lt,_e+ft-dt,st+lt,_e+ft-ct,st+lt,6,!0),this.v.setTripleAt(_e+ft,st+lt-ct,_e+ft,st+lt-ct,_e+ft,st+lt-dt,7,!0)):(this.v.setTripleAt(_e-ft,st-lt,_e-ft+dt,st-lt,_e-ft,st-lt,1,!0),this.v.setTripleAt(_e-ft,st+lt,_e-ft,st+lt-dt,_e-ft,st+lt,2,!0),this.v.setTripleAt(_e+ft,st+lt,_e+ft-dt,st+lt,_e+ft,st+lt,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:a},extendPrototype([DynamicPropertyContainer],$),$}();function at($,et,_e){var st;if(_e===3||_e===4){var ft=_e===3?et.pt:et.ks,lt=ft.k;lt.length?st=new b($,et,_e):st=new g($,et,_e)}else _e===5?st=new tt($,et):_e===6?st=new j($,et):_e===7&&(st=new nt($,et));return st.k&&$.addDynamicProperty(st),st}function it(){return g}function rt(){return b}var ut={};return ut.getShapeProp=at,ut.getConstructorFunction=it,ut.getKeyframedConstructorFunction=rt,ut}();/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */var Matrix=function(){var e=Math.cos,i=Math.sin,s=Math.tan,a=Math.round;function o(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function c(ot){if(ot===0)return this;var ht=e(ot),yt=i(ot);return this._t(ht,-yt,0,0,yt,ht,0,0,0,0,1,0,0,0,0,1)}function d(ot){if(ot===0)return this;var ht=e(ot),yt=i(ot);return this._t(1,0,0,0,0,ht,-yt,0,0,yt,ht,0,0,0,0,1)}function g(ot){if(ot===0)return this;var ht=e(ot),yt=i(ot);return this._t(ht,0,yt,0,0,1,0,0,-yt,0,ht,0,0,0,0,1)}function _(ot){if(ot===0)return this;var ht=e(ot),yt=i(ot);return this._t(ht,-yt,0,0,yt,ht,0,0,0,0,1,0,0,0,0,1)}function b(ot,ht){return this._t(1,ht,ot,1,0,0)}function j(ot,ht){return this.shear(s(ot),s(ht))}function nt(ot,ht){var yt=e(ht),vt=i(ht);return this._t(yt,vt,0,0,-vt,yt,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,s(ot),1,0,0,0,0,1,0,0,0,0,1)._t(yt,-vt,0,0,vt,yt,0,0,0,0,1,0,0,0,0,1)}function tt(ot,ht,yt){return!yt&&yt!==0&&(yt=1),ot===1&&ht===1&&yt===1?this:this._t(ot,0,0,0,0,ht,0,0,0,0,yt,0,0,0,0,1)}function at(ot,ht,yt,vt,xt,Tt,At,Ot,Vt,Kt,ar,dr,or,Gt,tr,Ut){return this.props[0]=ot,this.props[1]=ht,this.props[2]=yt,this.props[3]=vt,this.props[4]=xt,this.props[5]=Tt,this.props[6]=At,this.props[7]=Ot,this.props[8]=Vt,this.props[9]=Kt,this.props[10]=ar,this.props[11]=dr,this.props[12]=or,this.props[13]=Gt,this.props[14]=tr,this.props[15]=Ut,this}function it(ot,ht,yt){return yt=yt||0,ot!==0||ht!==0||yt!==0?this._t(1,0,0,0,0,1,0,0,0,0,1,0,ot,ht,yt,1):this}function rt(ot,ht,yt,vt,xt,Tt,At,Ot,Vt,Kt,ar,dr,or,Gt,tr,Ut){var It=this.props;if(ot===1&&ht===0&&yt===0&&vt===0&&xt===0&&Tt===1&&At===0&&Ot===0&&Vt===0&&Kt===0&&ar===1&&dr===0)return It[12]=It[12]*ot+It[15]*or,It[13]=It[13]*Tt+It[15]*Gt,It[14]=It[14]*ar+It[15]*tr,It[15]*=Ut,this._identityCalculated=!1,this;var ir=It[0],Cr=It[1],Sr=It[2],mr=It[3],Er=It[4],xr=It[5],Zt=It[6],Pr=It[7],vr=It[8],Jt=It[9],ur=It[10],hr=It[11],yr=It[12],Vr=It[13],pr=It[14],Mr=It[15];return It[0]=ir*ot+Cr*xt+Sr*Vt+mr*or,It[1]=ir*ht+Cr*Tt+Sr*Kt+mr*Gt,It[2]=ir*yt+Cr*At+Sr*ar+mr*tr,It[3]=ir*vt+Cr*Ot+Sr*dr+mr*Ut,It[4]=Er*ot+xr*xt+Zt*Vt+Pr*or,It[5]=Er*ht+xr*Tt+Zt*Kt+Pr*Gt,It[6]=Er*yt+xr*At+Zt*ar+Pr*tr,It[7]=Er*vt+xr*Ot+Zt*dr+Pr*Ut,It[8]=vr*ot+Jt*xt+ur*Vt+hr*or,It[9]=vr*ht+Jt*Tt+ur*Kt+hr*Gt,It[10]=vr*yt+Jt*At+ur*ar+hr*tr,It[11]=vr*vt+Jt*Ot+ur*dr+hr*Ut,It[12]=yr*ot+Vr*xt+pr*Vt+Mr*or,It[13]=yr*ht+Vr*Tt+pr*Kt+Mr*Gt,It[14]=yr*yt+Vr*At+pr*ar+Mr*tr,It[15]=yr*vt+Vr*Ot+pr*dr+Mr*Ut,this._identityCalculated=!1,this}function ut(ot){var ht=ot.props;return this.transform(ht[0],ht[1],ht[2],ht[3],ht[4],ht[5],ht[6],ht[7],ht[8],ht[9],ht[10],ht[11],ht[12],ht[13],ht[14],ht[15])}function $(){return this._identityCalculated||(this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1),this._identityCalculated=!0),this._identity}function et(ot){for(var ht=0;ht<16;){if(ot.props[ht]!==this.props[ht])return!1;ht+=1}return!0}function _e(ot){var ht;for(ht=0;ht<16;ht+=1)ot.props[ht]=this.props[ht];return ot}function st(ot){var ht;for(ht=0;ht<16;ht+=1)this.props[ht]=ot[ht]}function ft(ot,ht,yt){return{x:ot*this.props[0]+ht*this.props[4]+yt*this.props[8]+this.props[12],y:ot*this.props[1]+ht*this.props[5]+yt*this.props[9]+this.props[13],z:ot*this.props[2]+ht*this.props[6]+yt*this.props[10]+this.props[14]}}function lt(ot,ht,yt){return ot*this.props[0]+ht*this.props[4]+yt*this.props[8]+this.props[12]}function ct(ot,ht,yt){return ot*this.props[1]+ht*this.props[5]+yt*this.props[9]+this.props[13]}function dt(ot,ht,yt){return ot*this.props[2]+ht*this.props[6]+yt*this.props[10]+this.props[14]}function gt(){var ot=this.props[0]*this.props[5]-this.props[1]*this.props[4],ht=this.props[5]/ot,yt=-this.props[1]/ot,vt=-this.props[4]/ot,xt=this.props[0]/ot,Tt=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/ot,At=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/ot,Ot=new Matrix;return Ot.props[0]=ht,Ot.props[1]=yt,Ot.props[4]=vt,Ot.props[5]=xt,Ot.props[12]=Tt,Ot.props[13]=At,Ot}function Ct(ot){var ht=this.getInverseMatrix();return ht.applyToPointArray(ot[0],ot[1],ot[2]||0)}function _t(ot){var ht,yt=ot.length,vt=[];for(ht=0;ht<yt;ht+=1)vt[ht]=Ct(ot[ht]);return vt}function Pt(ot,ht,yt){var vt=createTypedArray("float32",6);if(this.isIdentity())vt[0]=ot[0],vt[1]=ot[1],vt[2]=ht[0],vt[3]=ht[1],vt[4]=yt[0],vt[5]=yt[1];else{var xt=this.props[0],Tt=this.props[1],At=this.props[4],Ot=this.props[5],Vt=this.props[12],Kt=this.props[13];vt[0]=ot[0]*xt+ot[1]*At+Vt,vt[1]=ot[0]*Tt+ot[1]*Ot+Kt,vt[2]=ht[0]*xt+ht[1]*At+Vt,vt[3]=ht[0]*Tt+ht[1]*Ot+Kt,vt[4]=yt[0]*xt+yt[1]*At+Vt,vt[5]=yt[0]*Tt+yt[1]*Ot+Kt}return vt}function bt(ot,ht,yt){var vt;return this.isIdentity()?vt=[ot,ht,yt]:vt=[ot*this.props[0]+ht*this.props[4]+yt*this.props[8]+this.props[12],ot*this.props[1]+ht*this.props[5]+yt*this.props[9]+this.props[13],ot*this.props[2]+ht*this.props[6]+yt*this.props[10]+this.props[14]],vt}function Mt(ot,ht){if(this.isIdentity())return ot+","+ht;var yt=this.props;return Math.round((ot*yt[0]+ht*yt[4]+yt[12])*100)/100+","+Math.round((ot*yt[1]+ht*yt[5]+yt[13])*100)/100}function wt(){for(var ot=0,ht=this.props,yt="matrix3d(",vt=1e4;ot<16;)yt+=a(ht[ot]*vt)/vt,yt+=ot===15?")":",",ot+=1;return yt}function pt(ot){var ht=1e4;return ot<1e-6&&ot>0||ot>-1e-6&&ot<0?a(ot*ht)/ht:ot}function mt(){var ot=this.props,ht=pt(ot[0]),yt=pt(ot[1]),vt=pt(ot[4]),xt=pt(ot[5]),Tt=pt(ot[12]),At=pt(ot[13]);return"matrix("+ht+","+yt+","+vt+","+xt+","+Tt+","+At+")"}return function(){this.reset=o,this.rotate=c,this.rotateX=d,this.rotateY=g,this.rotateZ=_,this.skew=j,this.skewFromAxis=nt,this.shear=b,this.scale=tt,this.setTransform=at,this.translate=it,this.transform=rt,this.multiply=ut,this.applyToPoint=ft,this.applyToX=lt,this.applyToY=ct,this.applyToZ=dt,this.applyToPointArray=bt,this.applyToTriplePoints=Pt,this.applyToPointStringified=Mt,this.toCSS=wt,this.to2dCSS=mt,this.clone=_e,this.cloneFromProps=st,this.equals=et,this.inversePoints=_t,this.inversePoint=Ct,this.getInverseMatrix=gt,this._t=this.transform,this.isIdentity=$,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$3=function(s){return typeof s}:_typeof$3=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof$3(e)}var lottie={};function setLocation(e){setLocationHref(e)}function searchAnimations(){animationManager.searchAnimations()}function setSubframeRendering(e){setSubframeEnabled(e)}function setPrefix(e){setIdPrefix(e)}function loadAnimation(e){return animationManager.loadAnimation(e)}function setQuality(e){if(typeof e=="string")switch(e){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10);break}else!isNaN(e)&&e>1&&setDefaultCurveSegments(e)}function inBrowser(){return typeof navigator<"u"}function installPlugin(e,i){e==="expressions"&&setExpressionsPlugin(i)}function getFactory(e){switch(e){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";function checkReady(){document.readyState==="complete"&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(e){for(var i=queryString.split("&"),s=0;s<i.length;s+=1){var a=i[s].split("=");if(decodeURIComponent(a[0])==e)return decodeURIComponent(a[1])}return null}var queryString="";{var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{_typeof$3(exports)!=="object"&&(window.bodymovin=lottie)}catch(e){}var ShapeModifiers=function(){var e={},i={};e.registerModifier=s,e.getModifier=a;function s(o,c){i[o]||(i[o]=c)}function a(o,c,d){return new i[o](c,d)}return e}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(e){if(!this.closed){e.sh.container.addDynamicProperty(e.sh);var i={shape:e.sh,data:e,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(i),this.addShapeToModifier(i),this._isAnimated&&e.setAsAnimated()}},ShapeModifier.prototype.init=function(e,i){this.shapes=[],this.elem=e,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,i),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(e,i){this.s=PropertyFactory.getProp(e,i.s,0,.01,this),this.e=PropertyFactory.getProp(e,i.e,0,.01,this),this.o=PropertyFactory.getProp(e,i.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=i.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(e){e.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(e,i,s,a,o){var c=[];i<=1?c.push({s:e,e:i}):e>=1?c.push({s:e-1,e:i-1}):(c.push({s:e,e:1}),c.push({s:0,e:i-1}));var d=[],g,_=c.length,b;for(g=0;g<_;g+=1)if(b=c[g],!(b.e*o<a||b.s*o>a+s)){var j,nt;b.s*o<=a?j=0:j=(b.s*o-a)/s,b.e*o>=a+s?nt=1:nt=(b.e*o-a)/s,d.push([j,nt])}return d.length||d.push([0,0]),d},TrimModifier.prototype.releasePathsData=function(e){var i,s=e.length;for(i=0;i<s;i+=1)segmentsLengthPool.release(e[i]);return e.length=0,e},TrimModifier.prototype.processShapes=function(e){var i,s;if(this._mdf||e){var a=this.o.v%360/360;if(a<0&&(a+=1),this.s.v>1?i=1+a:this.s.v<0?i=0+a:i=this.s.v+a,this.e.v>1?s=1+a:this.e.v<0?s=0+a:s=this.e.v+a,i>s){var o=i;i=s,s=o}i=Math.round(i*1e4)*1e-4,s=Math.round(s*1e4)*1e-4,this.sValue=i,this.eValue=s}else i=this.sValue,s=this.eValue;var c,d,g=this.shapes.length,_,b,j,nt,tt,at=0;if(s===i)for(d=0;d<g;d+=1)this.shapes[d].localShapeCollection.releaseShapes(),this.shapes[d].shape._mdf=!0,this.shapes[d].shape.paths=this.shapes[d].localShapeCollection,this._mdf&&(this.shapes[d].pathsData.length=0);else if(s===1&&i===0||s===0&&i===1){if(this._mdf)for(d=0;d<g;d+=1)this.shapes[d].pathsData.length=0,this.shapes[d].shape._mdf=!0}else{var it=[],rt,ut;for(d=0;d<g;d+=1)if(rt=this.shapes[d],!rt.shape._mdf&&!this._mdf&&!e&&this.m!==2)rt.shape.paths=rt.localShapeCollection;else{if(c=rt.shape.paths,b=c._length,tt=0,!rt.shape._mdf&&rt.pathsData.length)tt=rt.totalShapeLength;else{for(j=this.releasePathsData(rt.pathsData),_=0;_<b;_+=1)nt=bez.getSegmentsLength(c.shapes[_]),j.push(nt),tt+=nt.totalLength;rt.totalShapeLength=tt,rt.pathsData=j}at+=tt,rt.shape._mdf=!0}var $=i,et=s,_e=0,st;for(d=g-1;d>=0;d-=1)if(rt=this.shapes[d],rt.shape._mdf){for(ut=rt.localShapeCollection,ut.releaseShapes(),this.m===2&&g>1?(st=this.calculateShapeEdges(i,s,rt.totalShapeLength,_e,at),_e+=rt.totalShapeLength):st=[[$,et]],b=st.length,_=0;_<b;_+=1){$=st[_][0],et=st[_][1],it.length=0,et<=1?it.push({s:rt.totalShapeLength*$,e:rt.totalShapeLength*et}):$>=1?it.push({s:rt.totalShapeLength*($-1),e:rt.totalShapeLength*(et-1)}):(it.push({s:rt.totalShapeLength*$,e:rt.totalShapeLength}),it.push({s:0,e:rt.totalShapeLength*(et-1)}));var ft=this.addShapes(rt,it[0]);if(it[0].s!==it[0].e){if(it.length>1){var lt=rt.shape.paths.shapes[rt.shape.paths._length-1];if(lt.c){var ct=ft.pop();this.addPaths(ft,ut),ft=this.addShapes(rt,it[1],ct)}else this.addPaths(ft,ut),ft=this.addShapes(rt,it[1])}this.addPaths(ft,ut)}}rt.shape.paths=ut}}},TrimModifier.prototype.addPaths=function(e,i){var s,a=e.length;for(s=0;s<a;s+=1)i.addShape(e[s])},TrimModifier.prototype.addSegment=function(e,i,s,a,o,c,d){o.setXYAt(i[0],i[1],"o",c),o.setXYAt(s[0],s[1],"i",c+1),d&&o.setXYAt(e[0],e[1],"v",c),o.setXYAt(a[0],a[1],"v",c+1)},TrimModifier.prototype.addSegmentFromArray=function(e,i,s,a){i.setXYAt(e[1],e[5],"o",s),i.setXYAt(e[2],e[6],"i",s+1),a&&i.setXYAt(e[0],e[4],"v",s),i.setXYAt(e[3],e[7],"v",s+1)},TrimModifier.prototype.addShapes=function(e,i,s){var a=e.pathsData,o=e.shape.paths.shapes,c,d=e.shape.paths._length,g,_,b=0,j,nt,tt,at,it=[],rt,ut=!0;for(s?(nt=s._length,rt=s._length):(s=shapePool.newElement(),nt=0,rt=0),it.push(s),c=0;c<d;c+=1){for(tt=a[c].lengths,s.c=o[c].c,_=o[c].c?tt.length:tt.length+1,g=1;g<_;g+=1)if(j=tt[g-1],b+j.addedLength<i.s)b+=j.addedLength,s.c=!1;else if(b>i.e){s.c=!1;break}else i.s<=b&&i.e>=b+j.addedLength?(this.addSegment(o[c].v[g-1],o[c].o[g-1],o[c].i[g],o[c].v[g],s,nt,ut),ut=!1):(at=bez.getNewSegment(o[c].v[g-1],o[c].v[g],o[c].o[g-1],o[c].i[g],(i.s-b)/j.addedLength,(i.e-b)/j.addedLength,tt[g-1]),this.addSegmentFromArray(at,s,nt,ut),ut=!1,s.c=!1),b+=j.addedLength,nt+=1;if(o[c].c&&tt.length){if(j=tt[g-1],b<=i.e){var $=tt[g-1].addedLength;i.s<=b&&i.e>=b+$?(this.addSegment(o[c].v[g-1],o[c].o[g-1],o[c].i[0],o[c].v[0],s,nt,ut),ut=!1):(at=bez.getNewSegment(o[c].v[g-1],o[c].v[0],o[c].o[g-1],o[c].i[0],(i.s-b)/$,(i.e-b)/$,tt[g-1]),this.addSegmentFromArray(at,s,nt,ut),ut=!1,s.c=!1)}else s.c=!1;b+=j.addedLength,nt+=1}if(s._length&&(s.setXYAt(s.v[rt][0],s.v[rt][1],"i",rt),s.setXYAt(s.v[s._length-1][0],s.v[s._length-1][1],"o",s._length-1)),b>i.e)break;c<d-1&&(s=shapePool.newElement(),ut=!0,it.push(s),nt=0)}return it};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(e,i){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,i.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(e,i){var s=i/100,a=[0,0],o=e._length,c=0;for(c=0;c<o;c+=1)a[0]+=e.v[c][0],a[1]+=e.v[c][1];a[0]/=o,a[1]/=o;var d=shapePool.newElement();d.c=e.c;var g,_,b,j,nt,tt;for(c=0;c<o;c+=1)g=e.v[c][0]+(a[0]-e.v[c][0])*s,_=e.v[c][1]+(a[1]-e.v[c][1])*s,b=e.o[c][0]+(a[0]-e.o[c][0])*-s,j=e.o[c][1]+(a[1]-e.o[c][1])*-s,nt=e.i[c][0]+(a[0]-e.i[c][0])*-s,tt=e.i[c][1]+(a[1]-e.i[c][1])*-s,d.setTripleAt(g,_,b,j,nt,tt,c);return d},PuckerAndBloatModifier.prototype.processShapes=function(e){var i,s,a=this.shapes.length,o,c,d=this.amount.v;if(d!==0){var g,_;for(s=0;s<a;s+=1){if(g=this.shapes[s],_=g.localShapeCollection,!(!g.shape._mdf&&!this._mdf&&!e))for(_.releaseShapes(),g.shape._mdf=!0,i=g.shape.paths.shapes,c=g.shape.paths._length,o=0;o<c;o+=1)_.addShape(this.processPath(i[o],d));g.shape.paths=g.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var e=[0,0];function i(_){var b=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||b,this.a&&_.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&_.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&_.skewFromAxis(-this.sk.v,this.sa.v),this.r?_.rotate(-this.r.v):_.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?_.translate(this.px.v,this.py.v,-this.pz.v):_.translate(this.px.v,this.py.v,0):_.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function s(_){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||_){var b;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var j,nt;if(b=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(j=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/b,0),nt=this.p.getValueAtTime(this.p.keyframes[0].t/b,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(j=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/b,0),nt=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/b,0)):(j=this.p.pv,nt=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/b,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){j=[],nt=[];var tt=this.px,at=this.py;tt._caching.lastFrame+tt.offsetTime<=tt.keyframes[0].t?(j[0]=tt.getValueAtTime((tt.keyframes[0].t+.01)/b,0),j[1]=at.getValueAtTime((at.keyframes[0].t+.01)/b,0),nt[0]=tt.getValueAtTime(tt.keyframes[0].t/b,0),nt[1]=at.getValueAtTime(at.keyframes[0].t/b,0)):tt._caching.lastFrame+tt.offsetTime>=tt.keyframes[tt.keyframes.length-1].t?(j[0]=tt.getValueAtTime(tt.keyframes[tt.keyframes.length-1].t/b,0),j[1]=at.getValueAtTime(at.keyframes[at.keyframes.length-1].t/b,0),nt[0]=tt.getValueAtTime((tt.keyframes[tt.keyframes.length-1].t-.01)/b,0),nt[1]=at.getValueAtTime((at.keyframes[at.keyframes.length-1].t-.01)/b,0)):(j=[tt.pv,at.pv],nt[0]=tt.getValueAtTime((tt._caching.lastFrame+tt.offsetTime-.01)/b,tt.offsetTime),nt[1]=at.getValueAtTime((at._caching.lastFrame+at.offsetTime-.01)/b,at.offsetTime))}else nt=e,j=nt;this.v.rotate(-Math.atan2(j[1]-nt[1],j[0]-nt[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function a(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length)this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1;else return;if(!this.s.effectsSequence.length)this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2;else return;if(this.sk)if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length)this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3;else return;this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length&&(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}function o(){}function c(_){this._addDynamicProperty(_),this.elem.addDynamicProperty(_),this._isDirty=!0}function d(_,b,j){if(this.elem=_,this.frameId=-1,this.propType="transform",this.data=b,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(j||_),b.p&&b.p.s?(this.px=PropertyFactory.getProp(_,b.p.x,0,0,this),this.py=PropertyFactory.getProp(_,b.p.y,0,0,this),b.p.z&&(this.pz=PropertyFactory.getProp(_,b.p.z,0,0,this))):this.p=PropertyFactory.getProp(_,b.p||{k:[0,0,0]},1,0,this),b.rx){if(this.rx=PropertyFactory.getProp(_,b.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(_,b.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(_,b.rz,0,degToRads,this),b.or.k[0].ti){var nt,tt=b.or.k.length;for(nt=0;nt<tt;nt+=1)b.or.k[nt].to=null,b.or.k[nt].ti=null}this.or=PropertyFactory.getProp(_,b.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(_,b.r||{k:0},0,degToRads,this);b.sk&&(this.sk=PropertyFactory.getProp(_,b.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(_,b.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(_,b.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(_,b.s||{k:[100,100,100]},1,.01,this),b.o?this.o=PropertyFactory.getProp(_,b.o,0,.01,_):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}d.prototype={applyToMatrix:i,getValue:s,precalculateMatrix:a,autoOrient:o},extendPrototype([DynamicPropertyContainer],d),d.prototype.addDynamicProperty=c,d.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function g(_,b,j){return new d(_,b,j)}return{getTransformProperty:g}}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(e,i){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(e,i.c,0,null,this),this.o=PropertyFactory.getProp(e,i.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(e,i.tr,this),this.so=PropertyFactory.getProp(e,i.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(e,i.tr.eo,0,.01,this),this.data=i,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(e,i,s,a,o,c){var d=c?-1:1,g=a.s.v[0]+(1-a.s.v[0])*(1-o),_=a.s.v[1]+(1-a.s.v[1])*(1-o);e.translate(a.p.v[0]*d*o,a.p.v[1]*d*o,a.p.v[2]),i.translate(-a.a.v[0],-a.a.v[1],a.a.v[2]),i.rotate(-a.r.v*d*o),i.translate(a.a.v[0],a.a.v[1],a.a.v[2]),s.translate(-a.a.v[0],-a.a.v[1],a.a.v[2]),s.scale(c?1/g:g,c?1/_:_),s.translate(a.a.v[0],a.a.v[1],a.a.v[2])},RepeaterModifier.prototype.init=function(e,i,s,a){for(this.elem=e,this.arr=i,this.pos=s,this.elemsData=a,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(e),this.initModifierProperties(e,i[s]);s>0;)s-=1,this._elements.unshift(i[s]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(e){var i,s=e.length;for(i=0;i<s;i+=1)e[i]._processed=!1,e[i].ty==="gr"&&this.resetElements(e[i].it)},RepeaterModifier.prototype.cloneElements=function(e){var i=JSON.parse(JSON.stringify(e));return this.resetElements(i),i},RepeaterModifier.prototype.changeGroupRender=function(e,i){var s,a=e.length;for(s=0;s<a;s+=1)e[s]._render=i,e[s].ty==="gr"&&this.changeGroupRender(e[s].it,i)},RepeaterModifier.prototype.processShapes=function(e){var i,s,a,o,c,d=!1;if(this._mdf||e){var g=Math.ceil(this.c.v);if(this._groups.length<g){for(;this._groups.length<g;){var _={it:this.cloneElements(this._elements),ty:"gr"};_.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,_),this._groups.splice(0,0,_),this._currentCopies+=1}this.elem.reloadShapes(),d=!0}c=0;var b;for(a=0;a<=this._groups.length-1;a+=1){if(b=c<g,this._groups[a]._render=b,this.changeGroupRender(this._groups[a].it,b),!b){var j=this.elemsData[a].it,nt=j[j.length-1];nt.transform.op.v!==0?(nt.transform.op._mdf=!0,nt.transform.op.v=0):nt.transform.op._mdf=!1}c+=1}this._currentCopies=g;var tt=this.o.v,at=tt%1,it=tt>0?Math.floor(tt):Math.ceil(tt),rt=this.pMatrix.props,ut=this.rMatrix.props,$=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var et=0;if(tt>0){for(;et<it;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),et+=1;at&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,at,!1),et+=at)}else if(tt<0){for(;et>it;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),et-=1;at&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-at,!0),et-=at)}a=this.data.m===1?0:this._currentCopies-1,o=this.data.m===1?1:-1,c=this._currentCopies;for(var _e,st;c;){if(i=this.elemsData[a].it,s=i[i.length-1].transform.mProps.v.props,st=s.length,i[i.length-1].transform.mProps._mdf=!0,i[i.length-1].transform.op._mdf=!0,i[i.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(a/(this._currentCopies-1)),et!==0){for((a!==0&&o===1||a!==this._currentCopies-1&&o===-1)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(ut[0],ut[1],ut[2],ut[3],ut[4],ut[5],ut[6],ut[7],ut[8],ut[9],ut[10],ut[11],ut[12],ut[13],ut[14],ut[15]),this.matrix.transform($[0],$[1],$[2],$[3],$[4],$[5],$[6],$[7],$[8],$[9],$[10],$[11],$[12],$[13],$[14],$[15]),this.matrix.transform(rt[0],rt[1],rt[2],rt[3],rt[4],rt[5],rt[6],rt[7],rt[8],rt[9],rt[10],rt[11],rt[12],rt[13],rt[14],rt[15]),_e=0;_e<st;_e+=1)s[_e]=this.matrix.props[_e];this.matrix.reset()}else for(this.matrix.reset(),_e=0;_e<st;_e+=1)s[_e]=this.matrix.props[_e];et+=1,c-=1,a+=o}}else for(c=this._currentCopies,a=0,o=1;c;)i=this.elemsData[a].it,s=i[i.length-1].transform.mProps.v.props,i[i.length-1].transform.mProps._mdf=!1,i[i.length-1].transform.op._mdf=!1,c-=1,a+=o;return d},RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(e,i){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(e,i.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(e,i){var s=shapePool.newElement();s.c=e.c;var a,o=e._length,c,d,g,_,b,j,nt=0,tt,at,it,rt,ut,$;for(a=0;a<o;a+=1)c=e.v[a],g=e.o[a],d=e.i[a],c[0]===g[0]&&c[1]===g[1]&&c[0]===d[0]&&c[1]===d[1]?(a===0||a===o-1)&&!e.c?(s.setTripleAt(c[0],c[1],g[0],g[1],d[0],d[1],nt),nt+=1):(a===0?_=e.v[o-1]:_=e.v[a-1],b=Math.sqrt(Math.pow(c[0]-_[0],2)+Math.pow(c[1]-_[1],2)),j=b?Math.min(b/2,i)/b:0,ut=c[0]+(_[0]-c[0])*j,tt=ut,$=c[1]-(c[1]-_[1])*j,at=$,it=tt-(tt-c[0])*roundCorner,rt=at-(at-c[1])*roundCorner,s.setTripleAt(tt,at,it,rt,ut,$,nt),nt+=1,a===o-1?_=e.v[0]:_=e.v[a+1],b=Math.sqrt(Math.pow(c[0]-_[0],2)+Math.pow(c[1]-_[1],2)),j=b?Math.min(b/2,i)/b:0,it=c[0]+(_[0]-c[0])*j,tt=it,rt=c[1]+(_[1]-c[1])*j,at=rt,ut=tt-(tt-c[0])*roundCorner,$=at-(at-c[1])*roundCorner,s.setTripleAt(tt,at,it,rt,ut,$,nt),nt+=1):(s.setTripleAt(e.v[a][0],e.v[a][1],e.o[a][0],e.o[a][1],e.i[a][0],e.i[a][1],nt),nt+=1);return s},RoundCornersModifier.prototype.processShapes=function(e){var i,s,a=this.shapes.length,o,c,d=this.rd.v;if(d!==0){var g,_;for(s=0;s<a;s+=1){if(g=this.shapes[s],_=g.localShapeCollection,!(!g.shape._mdf&&!this._mdf&&!e))for(_.releaseShapes(),g.shape._mdf=!0,i=g.shape.paths.shapes,c=g.shape.paths._length,o=0;o<c;o+=1)_.addShape(this.processPath(i[o],d));g.shape.paths=g.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function floatEqual(e,i){return Math.abs(e-i)*1e5<=Math.min(Math.abs(e),Math.abs(i))}function floatZero(e){return Math.abs(e)<=1e-5}function lerp(e,i,s){return e*(1-s)+i*s}function lerpPoint(e,i,s){return[lerp(e[0],i[0],s),lerp(e[1],i[1],s)]}function quadRoots(e,i,s){if(e===0)return[];var a=i*i-4*e*s;if(a<0)return[];var o=-i/(2*e);if(a===0)return[o];var c=Math.sqrt(a)/(2*e);return[o-c,o+c]}function polynomialCoefficients(e,i,s,a){return[-e+3*i-3*s+a,3*e-6*i+3*s,-3*e+3*i,e]}function singlePoint(e){return new PolynomialBezier(e,e,e,e,!1)}function PolynomialBezier(e,i,s,a,o){o&&pointEqual(e,i)&&(i=lerpPoint(e,a,1/3)),o&&pointEqual(s,a)&&(s=lerpPoint(e,a,2/3));var c=polynomialCoefficients(e[0],i[0],s[0],a[0]),d=polynomialCoefficients(e[1],i[1],s[1],a[1]);this.a=[c[0],d[0]],this.b=[c[1],d[1]],this.c=[c[2],d[2]],this.d=[c[3],d[3]],this.points=[e,i,s,a]}PolynomialBezier.prototype.point=function(e){return[((this.a[0]*e+this.b[0])*e+this.c[0])*e+this.d[0],((this.a[1]*e+this.b[1])*e+this.c[1])*e+this.d[1]]},PolynomialBezier.prototype.derivative=function(e){return[(3*e*this.a[0]+2*this.b[0])*e+this.c[0],(3*e*this.a[1]+2*this.b[1])*e+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(e){var i=this.derivative(e);return Math.atan2(i[1],i[0])},PolynomialBezier.prototype.normalAngle=function(e){var i=this.derivative(e);return Math.atan2(i[0],i[1])},PolynomialBezier.prototype.inflectionPoints=function(){var e=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(e))return[];var i=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/e,s=i*i-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/e;if(s<0)return[];var a=Math.sqrt(s);return floatZero(a)?a>0&&a<1?[i]:[]:[i-a,i+a].filter(function(o){return o>0&&o<1})},PolynomialBezier.prototype.split=function(e){if(e<=0)return[singlePoint(this.points[0]),this];if(e>=1)return[this,singlePoint(this.points[this.points.length-1])];var i=lerpPoint(this.points[0],this.points[1],e),s=lerpPoint(this.points[1],this.points[2],e),a=lerpPoint(this.points[2],this.points[3],e),o=lerpPoint(i,s,e),c=lerpPoint(s,a,e),d=lerpPoint(o,c,e);return[new PolynomialBezier(this.points[0],i,o,d,!0),new PolynomialBezier(d,c,a,this.points[3],!0)]};function extrema(e,i){var s=e.points[0][i],a=e.points[e.points.length-1][i];if(s>a){var o=a;a=s,s=o}for(var c=quadRoots(3*e.a[i],2*e.b[i],e.c[i]),d=0;d<c.length;d+=1)if(c[d]>0&&c[d]<1){var g=e.point(c[d])[i];g<s?s=g:g>a&&(a=g)}return{min:s,max:a}}PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var e=this.bounds();return{left:e.x.min,right:e.x.max,top:e.y.min,bottom:e.y.max,width:e.x.max-e.x.min,height:e.y.max-e.y.min,cx:(e.x.max+e.x.min)/2,cy:(e.y.max+e.y.min)/2}};function intersectData(e,i,s){var a=e.boundingBox();return{cx:a.cx,cy:a.cy,width:a.width,height:a.height,bez:e,t:(i+s)/2,t1:i,t2:s}}function splitData(e){var i=e.bez.split(.5);return[intersectData(i[0],e.t1,e.t),intersectData(i[1],e.t,e.t2)]}function boxIntersect(e,i){return Math.abs(e.cx-i.cx)*2<e.width+i.width&&Math.abs(e.cy-i.cy)*2<e.height+i.height}function intersectsImpl(e,i,s,a,o,c){if(boxIntersect(e,i)){if(s>=c||e.width<=a&&e.height<=a&&i.width<=a&&i.height<=a){o.push([e.t,i.t]);return}var d=splitData(e),g=splitData(i);intersectsImpl(d[0],g[0],s+1,a,o,c),intersectsImpl(d[0],g[1],s+1,a,o,c),intersectsImpl(d[1],g[0],s+1,a,o,c),intersectsImpl(d[1],g[1],s+1,a,o,c)}}PolynomialBezier.prototype.intersections=function(e,i,s){i===void 0&&(i=2),s===void 0&&(s=7);var a=[];return intersectsImpl(intersectData(this,0,1),intersectData(e,0,1),0,i,a,s),a},PolynomialBezier.shapeSegment=function(e,i){var s=(i+1)%e.length();return new PolynomialBezier(e.v[i],e.o[i],e.i[s],e.v[s],!0)},PolynomialBezier.shapeSegmentInverted=function(e,i){var s=(i+1)%e.length();return new PolynomialBezier(e.v[s],e.i[s],e.o[i],e.v[i],!0)};function crossProduct(e,i){return[e[1]*i[2]-e[2]*i[1],e[2]*i[0]-e[0]*i[2],e[0]*i[1]-e[1]*i[0]]}function lineIntersection(e,i,s,a){var o=[e[0],e[1],1],c=[i[0],i[1],1],d=[s[0],s[1],1],g=[a[0],a[1],1],_=crossProduct(crossProduct(o,c),crossProduct(d,g));return floatZero(_[2])?null:[_[0]/_[2],_[1]/_[2]]}function polarOffset(e,i,s){return[e[0]+Math.cos(i)*s,e[1]-Math.sin(i)*s]}function pointDistance(e,i){return Math.hypot(e[0]-i[0],e[1]-i[1])}function pointEqual(e,i){return floatEqual(e[0],i[0])&&floatEqual(e[1],i[1])}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(e,i){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(e,i.s,0,null,this),this.frequency=PropertyFactory.getProp(e,i.r,0,null,this),this.pointsType=PropertyFactory.getProp(e,i.pt,0,null,this),this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0};function setPoint(e,i,s,a,o,c,d){var g=s-Math.PI/2,_=s+Math.PI/2,b=i[0]+Math.cos(s)*a*o,j=i[1]-Math.sin(s)*a*o;e.setTripleAt(b,j,b+Math.cos(g)*c,j-Math.sin(g)*c,b+Math.cos(_)*d,j-Math.sin(_)*d,e.length())}function getPerpendicularVector(e,i){var s=[i[0]-e[0],i[1]-e[1]],a=-Math.PI*.5,o=[Math.cos(a)*s[0]-Math.sin(a)*s[1],Math.sin(a)*s[0]+Math.cos(a)*s[1]];return o}function getProjectingAngle(e,i){var s=i===0?e.length()-1:i-1,a=(i+1)%e.length(),o=e.v[s],c=e.v[a],d=getPerpendicularVector(o,c);return Math.atan2(0,1)-Math.atan2(d[1],d[0])}function zigZagCorner(e,i,s,a,o,c,d){var g=getProjectingAngle(i,s),_=i.v[s%i._length],b=i.v[s===0?i._length-1:s-1],j=i.v[(s+1)%i._length],nt=c===2?Math.sqrt(Math.pow(_[0]-b[0],2)+Math.pow(_[1]-b[1],2)):0,tt=c===2?Math.sqrt(Math.pow(_[0]-j[0],2)+Math.pow(_[1]-j[1],2)):0;setPoint(e,i.v[s%i._length],g,d,a,tt/((o+1)*2),nt/((o+1)*2))}function zigZagSegment(e,i,s,a,o,c){for(var d=0;d<a;d+=1){var g=(d+1)/(a+1),_=o===2?Math.sqrt(Math.pow(i.points[3][0]-i.points[0][0],2)+Math.pow(i.points[3][1]-i.points[0][1],2)):0,b=i.normalAngle(g),j=i.point(g);setPoint(e,j,b,c,s,_/((a+1)*2),_/((a+1)*2)),c=-c}return c}ZigZagModifier.prototype.processPath=function(e,i,s,a){var o=e._length,c=shapePool.newElement();if(c.c=e.c,e.c||(o-=1),o===0)return c;var d=-1,g=PolynomialBezier.shapeSegment(e,0);zigZagCorner(c,e,0,i,s,a,d);for(var _=0;_<o;_+=1)d=zigZagSegment(c,g,i,s,a,-d),_===o-1&&!e.c?g=null:g=PolynomialBezier.shapeSegment(e,(_+1)%o),zigZagCorner(c,e,_+1,i,s,a,d);return c},ZigZagModifier.prototype.processShapes=function(e){var i,s,a=this.shapes.length,o,c,d=this.amplitude.v,g=Math.max(0,Math.round(this.frequency.v)),_=this.pointsType.v;if(d!==0){var b,j;for(s=0;s<a;s+=1){if(b=this.shapes[s],j=b.localShapeCollection,!(!b.shape._mdf&&!this._mdf&&!e))for(j.releaseShapes(),b.shape._mdf=!0,i=b.shape.paths.shapes,c=b.shape.paths._length,o=0;o<c;o+=1)j.addShape(this.processPath(i[o],d,g,_));b.shape.paths=b.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function linearOffset(e,i,s){var a=Math.atan2(i[0]-e[0],i[1]-e[1]);return[polarOffset(e,a,s),polarOffset(i,a,s)]}function offsetSegment(e,i){var s,a,o,c,d,g,_;_=linearOffset(e.points[0],e.points[1],i),s=_[0],a=_[1],_=linearOffset(e.points[1],e.points[2],i),o=_[0],c=_[1],_=linearOffset(e.points[2],e.points[3],i),d=_[0],g=_[1];var b=lineIntersection(s,a,o,c);b===null&&(b=a);var j=lineIntersection(d,g,o,c);return j===null&&(j=d),new PolynomialBezier(s,b,j,g)}function joinLines(e,i,s,a,o){var c=i.points[3],d=s.points[0];if(a===3||pointEqual(c,d))return c;if(a===2){var g=-i.tangentAngle(1),_=-s.tangentAngle(0)+Math.PI,b=lineIntersection(c,polarOffset(c,g+Math.PI/2,100),d,polarOffset(d,g+Math.PI/2,100)),j=b?pointDistance(b,c):pointDistance(c,d)/2,nt=polarOffset(c,g,2*j*roundCorner);return e.setXYAt(nt[0],nt[1],"o",e.length()-1),nt=polarOffset(d,_,2*j*roundCorner),e.setTripleAt(d[0],d[1],d[0],d[1],nt[0],nt[1],e.length()),d}var tt=pointEqual(c,i.points[2])?i.points[0]:i.points[2],at=pointEqual(d,s.points[1])?s.points[3]:s.points[1],it=lineIntersection(tt,c,d,at);return it&&pointDistance(it,c)<o?(e.setTripleAt(it[0],it[1],it[0],it[1],it[0],it[1],e.length()),it):c}function getIntersection(e,i){var s=e.intersections(i);return s.length&&floatEqual(s[0][0],1)&&s.shift(),s.length?s[0]:null}function pruneSegmentIntersection(e,i){var s=e.slice(),a=i.slice(),o=getIntersection(e[e.length-1],i[0]);return o&&(s[e.length-1]=e[e.length-1].split(o[0])[0],a[0]=i[0].split(o[1])[1]),e.length>1&&i.length>1&&(o=getIntersection(e[0],i[i.length-1]),o)?[[e[0].split(o[0])[0]],[i[i.length-1].split(o[1])[1]]]:[s,a]}function pruneIntersections(e){for(var i,s=1;s<e.length;s+=1)i=pruneSegmentIntersection(e[s-1],e[s]),e[s-1]=i[0],e[s]=i[1];return e.length>1&&(i=pruneSegmentIntersection(e[e.length-1],e[0]),e[e.length-1]=i[0],e[0]=i[1]),e}function offsetSegmentSplit(e,i){var s=e.inflectionPoints(),a,o,c,d;if(s.length===0)return[offsetSegment(e,i)];if(s.length===1||floatEqual(s[1],1))return c=e.split(s[0]),a=c[0],o=c[1],[offsetSegment(a,i),offsetSegment(o,i)];c=e.split(s[0]),a=c[0];var g=(s[1]-s[0])/(1-s[0]);return c=c[1].split(g),d=c[0],o=c[1],[offsetSegment(a,i),offsetSegment(d,i),offsetSegment(o,i)]}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(e,i){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(e,i.a,0,null,this),this.miterLimit=PropertyFactory.getProp(e,i.ml,0,null,this),this.lineJoin=i.lj,this._isAnimated=this.amount.effectsSequence.length!==0},OffsetPathModifier.prototype.processPath=function(e,i,s,a){var o=shapePool.newElement();o.c=e.c;var c=e.length();e.c||(c-=1);var d,g,_,b=[];for(d=0;d<c;d+=1)_=PolynomialBezier.shapeSegment(e,d),b.push(offsetSegmentSplit(_,i));if(!e.c)for(d=c-1;d>=0;d-=1)_=PolynomialBezier.shapeSegmentInverted(e,d),b.push(offsetSegmentSplit(_,i));b=pruneIntersections(b);var j=null,nt=null;for(d=0;d<b.length;d+=1){var tt=b[d];for(nt&&(j=joinLines(o,nt,tt[0],s,a)),nt=tt[tt.length-1],g=0;g<tt.length;g+=1)_=tt[g],j&&pointEqual(_.points[0],j)?o.setXYAt(_.points[1][0],_.points[1][1],"o",o.length()-1):o.setTripleAt(_.points[0][0],_.points[0][1],_.points[1][0],_.points[1][1],_.points[0][0],_.points[0][1],o.length()),o.setTripleAt(_.points[3][0],_.points[3][1],_.points[3][0],_.points[3][1],_.points[2][0],_.points[2][1],o.length()),j=_.points[3]}return b.length&&joinLines(o,nt,b[0][0],s,a),o},OffsetPathModifier.prototype.processShapes=function(e){var i,s,a=this.shapes.length,o,c,d=this.amount.v,g=this.miterLimit.v,_=this.lineJoin;if(d!==0){var b,j;for(s=0;s<a;s+=1){if(b=this.shapes[s],j=b.localShapeCollection,!(!b.shape._mdf&&!this._mdf&&!e))for(j.releaseShapes(),b.shape._mdf=!0,i=b.shape.paths.shapes,c=b.shape.paths._length,o=0;o<c;o+=1)j.addShape(this.processPath(i[o],d,_,g));b.shape.paths=b.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function getFontProperties(e){for(var i=e.fStyle?e.fStyle.split(" "):[],s="normal",a="normal",o=i.length,c,d=0;d<o;d+=1)switch(c=i[d].toLowerCase(),c){case"italic":a="italic";break;case"bold":s="700";break;case"black":s="900";break;case"medium":s="500";break;case"regular":case"normal":s="400";break;case"light":case"thin":s="200";break}return{style:a,weight:e.fWeight||s}}var FontManager=function(){var e=5e3,i={w:0,size:0,shapes:[],data:{shapes:[]}},s=[];s=s.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var a=127988,o=917631,c=917601,d=917626,g=65039,_=8205,b=127462,j=127487,nt=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function tt(pt){var mt=pt.split(","),ot,ht=mt.length,yt=[];for(ot=0;ot<ht;ot+=1)mt[ot]!=="sans-serif"&&mt[ot]!=="monospace"&&yt.push(mt[ot]);return yt.join(",")}function at(pt,mt){var ot=createTag("span");ot.setAttribute("aria-hidden",!0),ot.style.fontFamily=mt;var ht=createTag("span");ht.innerText="giItT1WQy@!-/#",ot.style.position="absolute",ot.style.left="-10000px",ot.style.top="-10000px",ot.style.fontSize="300px",ot.style.fontVariant="normal",ot.style.fontStyle="normal",ot.style.fontWeight="normal",ot.style.letterSpacing="0",ot.appendChild(ht),document.body.appendChild(ot);var yt=ht.offsetWidth;return ht.style.fontFamily=tt(pt)+", "+mt,{node:ht,w:yt,parent:ot}}function it(){var pt,mt=this.fonts.length,ot,ht,yt=mt;for(pt=0;pt<mt;pt+=1)this.fonts[pt].loaded?yt-=1:this.fonts[pt].fOrigin==="n"||this.fonts[pt].origin===0?this.fonts[pt].loaded=!0:(ot=this.fonts[pt].monoCase.node,ht=this.fonts[pt].monoCase.w,ot.offsetWidth!==ht?(yt-=1,this.fonts[pt].loaded=!0):(ot=this.fonts[pt].sansCase.node,ht=this.fonts[pt].sansCase.w,ot.offsetWidth!==ht&&(yt-=1,this.fonts[pt].loaded=!0)),this.fonts[pt].loaded&&(this.fonts[pt].sansCase.parent.parentNode.removeChild(this.fonts[pt].sansCase.parent),this.fonts[pt].monoCase.parent.parentNode.removeChild(this.fonts[pt].monoCase.parent)));yt!==0&&Date.now()-this.initTime<e?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)}function rt(pt,mt){var ot=document.body&&mt?"svg":"canvas",ht,yt=getFontProperties(pt);if(ot==="svg"){var vt=createNS("text");vt.style.fontSize="100px",vt.setAttribute("font-family",pt.fFamily),vt.setAttribute("font-style",yt.style),vt.setAttribute("font-weight",yt.weight),vt.textContent="1",pt.fClass?(vt.style.fontFamily="inherit",vt.setAttribute("class",pt.fClass)):vt.style.fontFamily=pt.fFamily,mt.appendChild(vt),ht=vt}else{var xt=new OffscreenCanvas(500,500).getContext("2d");xt.font=yt.style+" "+yt.weight+" 100px "+pt.fFamily,ht=xt}function Tt(At){return ot==="svg"?(ht.textContent=At,ht.getComputedTextLength()):ht.measureText(At).width}return{measureText:Tt}}function ut(pt,mt){if(!pt){this.isLoaded=!0;return}if(this.chars){this.isLoaded=!0,this.fonts=pt.list;return}if(!document.body){this.isLoaded=!0,pt.list.forEach(function(ar){ar.helper=rt(ar),ar.cache={}}),this.fonts=pt.list;return}var ot=pt.list,ht,yt=ot.length,vt=yt;for(ht=0;ht<yt;ht+=1){var xt=!0,Tt,At;if(ot[ht].loaded=!1,ot[ht].monoCase=at(ot[ht].fFamily,"monospace"),ot[ht].sansCase=at(ot[ht].fFamily,"sans-serif"),!ot[ht].fPath)ot[ht].loaded=!0,vt-=1;else if(ot[ht].fOrigin==="p"||ot[ht].origin===3){if(Tt=document.querySelectorAll('style[f-forigin="p"][f-family="'+ot[ht].fFamily+'"], style[f-origin="3"][f-family="'+ot[ht].fFamily+'"]'),Tt.length>0&&(xt=!1),xt){var Ot=createTag("style");Ot.setAttribute("f-forigin",ot[ht].fOrigin),Ot.setAttribute("f-origin",ot[ht].origin),Ot.setAttribute("f-family",ot[ht].fFamily),Ot.type="text/css",Ot.innerText="@font-face {font-family: "+ot[ht].fFamily+"; font-style: normal; src: url('"+ot[ht].fPath+"');}",mt.appendChild(Ot)}}else if(ot[ht].fOrigin==="g"||ot[ht].origin===1){for(Tt=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),At=0;At<Tt.length;At+=1)Tt[At].href.indexOf(ot[ht].fPath)!==-1&&(xt=!1);if(xt){var Vt=createTag("link");Vt.setAttribute("f-forigin",ot[ht].fOrigin),Vt.setAttribute("f-origin",ot[ht].origin),Vt.type="text/css",Vt.rel="stylesheet",Vt.href=ot[ht].fPath,document.body.appendChild(Vt)}}else if(ot[ht].fOrigin==="t"||ot[ht].origin===2){for(Tt=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),At=0;At<Tt.length;At+=1)ot[ht].fPath===Tt[At].src&&(xt=!1);if(xt){var Kt=createTag("link");Kt.setAttribute("f-forigin",ot[ht].fOrigin),Kt.setAttribute("f-origin",ot[ht].origin),Kt.setAttribute("rel","stylesheet"),Kt.setAttribute("href",ot[ht].fPath),mt.appendChild(Kt)}}ot[ht].helper=rt(ot[ht],mt),ot[ht].cache={},this.fonts.push(ot[ht])}vt===0?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function $(pt){if(pt){this.chars||(this.chars=[]);var mt,ot=pt.length,ht,yt=this.chars.length,vt;for(mt=0;mt<ot;mt+=1){for(ht=0,vt=!1;ht<yt;)this.chars[ht].style===pt[mt].style&&this.chars[ht].fFamily===pt[mt].fFamily&&this.chars[ht].ch===pt[mt].ch&&(vt=!0),ht+=1;vt||(this.chars.push(pt[mt]),yt+=1)}}}function et(pt,mt,ot){for(var ht=0,yt=this.chars.length;ht<yt;){if(this.chars[ht].ch===pt&&this.chars[ht].style===mt&&this.chars[ht].fFamily===ot)return this.chars[ht];ht+=1}return(typeof pt=="string"&&pt.charCodeAt(0)!==13||!pt)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",pt,mt,ot)),i}function _e(pt,mt,ot){var ht=this.getFontByName(mt),yt=pt;if(!ht.cache[yt]){var vt=ht.helper;if(pt===" "){var xt=vt.measureText("|"+pt+"|"),Tt=vt.measureText("||");ht.cache[yt]=(xt-Tt)/100}else ht.cache[yt]=vt.measureText(pt)/100}return ht.cache[yt]*ot}function st(pt){for(var mt=0,ot=this.fonts.length;mt<ot;){if(this.fonts[mt].fName===pt)return this.fonts[mt];mt+=1}return this.fonts[0]}function ft(pt){var mt=0,ot=pt.charCodeAt(0);if(ot>=55296&&ot<=56319){var ht=pt.charCodeAt(1);ht>=56320&&ht<=57343&&(mt=(ot-55296)*1024+ht-56320+65536)}return mt}function lt(pt,mt){var ot=pt.toString(16)+mt.toString(16);return nt.indexOf(ot)!==-1}function ct(pt){return pt===_}function dt(pt){return pt===g}function gt(pt){var mt=ft(pt);return mt>=b&&mt<=j}function Ct(pt){return gt(pt.substr(0,2))&&gt(pt.substr(2,2))}function _t(pt){return s.indexOf(pt)!==-1}function Pt(pt,mt){var ot=ft(pt.substr(mt,2));if(ot!==a)return!1;var ht=0;for(mt+=2;ht<5;){if(ot=ft(pt.substr(mt,2)),ot<c||ot>d)return!1;ht+=1,mt+=2}return ft(pt.substr(mt,2))===o}function bt(){this.isLoaded=!0}var Mt=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};Mt.isModifier=lt,Mt.isZeroWidthJoiner=ct,Mt.isFlagEmoji=Ct,Mt.isRegionalCode=gt,Mt.isCombinedCharacter=_t,Mt.isRegionalFlag=Pt,Mt.isVariationSelector=dt,Mt.BLACK_FLAG_CODE_POINT=a;var wt={addChars:$,addFonts:ut,getCharData:et,getFontByName:st,measureText:_e,checkLoadedFonts:it,setIsLoaded:bt};return Mt.prototype=wt,Mt}();function SlotManager(e){this.animationData=e}SlotManager.prototype.getProp=function(e){return this.animationData.slots&&this.animationData.slots[e.sid]?Object.assign(e,this.animationData.slots[e.sid].p):e};function slotFactory(e){return new SlotManager(e)}function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(i){this.renderableComponents.indexOf(i)===-1&&this.renderableComponents.push(i)},removeRenderableComponent:function(i){this.renderableComponents.indexOf(i)!==-1&&this.renderableComponents.splice(this.renderableComponents.indexOf(i),1)},prepareRenderableFrame:function(i){this.checkLayerLimits(i)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(i){this.data.ip-this.data.st<=i&&this.data.op-this.data.st>i?this.isInRange!==!0&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):this.isInRange!==!1&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var i,s=this.renderableComponents.length;for(i=0;i<s;i+=1)this.renderableComponents[i].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return this.data.ty===5?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=function(){var e={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(i){return e[i]||""}}();function SliderEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,0,0,s)}function AngleEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,0,0,s)}function ColorEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,1,0,s)}function PointEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,1,0,s)}function LayerIndexEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,0,0,s)}function MaskIndexEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,0,0,s)}function CheckboxEffect(e,i,s){this.p=PropertyFactory.getProp(i,e.v,0,0,s)}function NoValueEffect(){this.p={}}function EffectsManager(e,i){var s=e.ef||[];this.effectElements=[];var a,o=s.length,c;for(a=0;a<o;a+=1)c=new GroupEffect(s[a],i),this.effectElements.push(c)}function GroupEffect(e,i){this.init(e,i)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(e,i){this.data=e,this.effectElements=[],this.initDynamicPropertyContainer(i);var s,a=this.data.ef.length,o,c=this.data.ef;for(s=0;s<a;s+=1){switch(o=null,c[s].ty){case 0:o=new SliderEffect(c[s],i,this);break;case 1:o=new AngleEffect(c[s],i,this);break;case 2:o=new ColorEffect(c[s],i,this);break;case 3:o=new PointEffect(c[s],i,this);break;case 4:case 7:o=new CheckboxEffect(c[s],i,this);break;case 10:o=new LayerIndexEffect(c[s],i,this);break;case 11:o=new MaskIndexEffect(c[s],i,this);break;case 5:o=new EffectsManager(c[s],i);break;default:o=new NoValueEffect(c[s]);break}o&&this.effectElements.push(o)}};function BaseElement(){}BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var i=0,s=this.data.masksProperties.length;i<s;){if(this.data.masksProperties[i].mode!=="n"&&this.data.masksProperties[i].cl!==!1)return!0;i+=1}return!1},initExpressions:function(){var i=getExpressionInterfaces();if(i){var s=i("layer"),a=i("effects"),o=i("shape"),c=i("text"),d=i("comp");this.layerInterface=s(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var g=a.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(g),this.data.ty===0||this.data.xt?this.compInterface=d(this):this.data.ty===4?(this.layerInterface.shapeInterface=o(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):this.data.ty===5&&(this.layerInterface.textInterface=c(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var i=getBlendMode(this.data.bm),s=this.baseElement||this.layerElement;s.style["mix-blend-mode"]=i},initBaseData:function(i,s,a){this.globalData=s,this.comp=a,this.data=i,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}};function FrameElement(){}FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(i,s){var a,o=this.dynamicProperties.length;for(a=0;a<o;a+=1)(s||this._isParent&&this.dynamicProperties[a].propType==="transform")&&(this.dynamicProperties[a].getValue(),this.dynamicProperties[a]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(i){this.dynamicProperties.indexOf(i)===-1&&this.dynamicProperties.push(i)}};function FootageElement(e,i,s){this.initFrame(),this.initRenderable(),this.assetData=i.getAssetData(e.refId),this.footageData=i.imageLoader.getAsset(this.assetData),this.initBaseData(e,i,s)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var e=getExpressionInterfaces();if(e){var i=e("footage");this.layerInterface=i(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData};function AudioElement(e,i,s){this.initFrame(),this.initRenderable(),this.assetData=i.getAssetData(e.refId),this.initBaseData(e,i,s),this._isPlaying=!1,this._canPlay=!1;var a=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(a),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,i.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,e.au&&e.au.lv?e.au.lv:{k:[100]},1,.01,this)}AudioElement.prototype.prepareFrame=function(e){if(this.prepareRenderableFrame(e,!0),this.prepareProperties(e,!0),this.tm._placeholder)this._currentTime=e/this.data.sr;else{var i=this.tm.v;this._currentTime=i}this._volume=this.lv.v[0];var s=this._volume*this._volumeMultiplier;this._previousVolume!==s&&(this._previousVolume=s,this.audio.volume(s))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(e){this.audio.rate(e)},AudioElement.prototype.volume=function(e){this._volumeMultiplier=e,this._previousVolume=e*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(e){var i,s=this.layers.length,a;for(this.completeLayers=!0,i=s-1;i>=0;i-=1)this.elements[i]||(a=this.layers[i],a.ip-a.st<=e-this.layers[i].st&&a.op-a.st>e-this.layers[i].st&&this.buildItem(i)),this.completeLayers=this.elements[i]?this.completeLayers:!1;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(e){switch(e.ty){case 2:return this.createImage(e);case 0:return this.createComp(e);case 1:return this.createSolid(e);case 3:return this.createNull(e);case 4:return this.createShape(e);case 5:return this.createText(e);case 6:return this.createAudio(e);case 13:return this.createCamera(e);case 15:return this.createFootage(e);default:return this.createNull(e)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(e){return new AudioElement(e,this.globalData,this)},BaseRenderer.prototype.createFootage=function(e){return new FootageElement(e,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var e,i=this.layers.length;for(e=0;e<i;e+=1)this.buildItem(e);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(e){this.completeLayers=!1;var i,s=e.length,a,o=this.layers.length;for(i=0;i<s;i+=1)for(a=0;a<o;){if(this.layers[a].id===e[i].id){this.layers[a]=e[i];break}a+=1}},BaseRenderer.prototype.setProjectInterface=function(e){this.globalData.projectInterface=e},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(e,i,s){for(var a=this.elements,o=this.layers,c=0,d=o.length;c<d;)o[c].ind==i&&(!a[c]||a[c]===!0?(this.buildItem(c),this.addPendingElement(e)):(s.push(a[c]),a[c].setAsParent(),o[c].parent!==void 0?this.buildElementParenting(e,o[c].parent,s):e.setHierarchy(s))),c+=1},BaseRenderer.prototype.addPendingElement=function(e){this.pendingElements.push(e)},BaseRenderer.prototype.searchExtraCompositions=function(e){var i,s=e.length;for(i=0;i<s;i+=1)if(e[i].xt){var a=this.createComp(e[i]);a.initExpressions(),this.globalData.projectInterface.registerComposition(a)}},BaseRenderer.prototype.getElementById=function(e){var i,s=this.elements.length;for(i=0;i<s;i+=1)if(this.elements[i].data.ind===e)return this.elements[i];return null},BaseRenderer.prototype.getElementByPath=function(e){var i=e.shift(),s;if(typeof i=="number")s=this.elements[i];else{var a,o=this.elements.length;for(a=0;a<o;a+=1)if(this.elements[a].data.nm===i){s=this.elements[a];break}}return e.length===0?s:s.getElementByPath(e)},BaseRenderer.prototype.setupGlobalData=function(e,i){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(e),this.globalData.fontManager.addChars(e.chars),this.globalData.fontManager.addFonts(e.fonts,i),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=e.fr,this.globalData.nm=e.nm,this.globalData.compSize={w:e.w,h:e.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}TransformElement.prototype={initTransform:function(){var i=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:i,localMat:i,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var i,s=this.finalTransform.mat,a=0,o=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;a<o;){if(this.hierarchy[a].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}a+=1}if(this.finalTransform._matMdf)for(i=this.finalTransform.mProp.v.props,s.cloneFromProps(i),a=0;a<o;a+=1)s.multiply(this.hierarchy[a].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var i=0,s=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;i<s;)this.localTransforms[i]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[i]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),i+=1;if(this.finalTransform._localMatMdf){var a=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(a),i=1;i<s;i+=1){var o=this.localTransforms[i].matrix;a.multiply(o)}a.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var c=this.finalTransform.localOpacity;for(i=0;i<s;i+=1)c*=this.localTransforms[i].opacity*.01;this.finalTransform.localOpacity=c}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var i=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(i.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var s=0,a=i.length;for(s=0;s<a;s+=1)this.localTransforms.push(i[s])}}},globalToLocal:function(i){var s=[];s.push(this.finalTransform);for(var a=!0,o=this.comp;a;)o.finalTransform?(o.data.hasMask&&s.splice(0,0,o.finalTransform),o=o.comp):a=!1;var c,d=s.length,g;for(c=0;c<d;c+=1)g=s[c].mat.applyToPointArray(0,0,0),i=[i[0]-g[0],i[1]-g[1],0];return i},mHelper:new Matrix};function MaskElement(e,i,s){this.data=e,this.element=i,this.globalData=s,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var a=this.globalData.defs,o,c=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(c),this.solidPath="";var d,g=this.masksProperties,_=0,b=[],j,nt,tt=createElementID(),at,it,rt,ut,$="clipPath",et="clip-path";for(o=0;o<c;o+=1)if((g[o].mode!=="a"&&g[o].mode!=="n"||g[o].inv||g[o].o.k!==100||g[o].o.x)&&($="mask",et="mask"),(g[o].mode==="s"||g[o].mode==="i")&&_===0?(at=createNS("rect"),at.setAttribute("fill","#ffffff"),at.setAttribute("width",this.element.comp.data.w||0),at.setAttribute("height",this.element.comp.data.h||0),b.push(at)):at=null,d=createNS("path"),g[o].mode==="n")this.viewData[o]={op:PropertyFactory.getProp(this.element,g[o].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,g[o],3),elem:d,lastPath:""},a.appendChild(d);else{_+=1,d.setAttribute("fill",g[o].mode==="s"?"#000000":"#ffffff"),d.setAttribute("clip-rule","nonzero");var _e;if(g[o].x.k!==0?($="mask",et="mask",ut=PropertyFactory.getProp(this.element,g[o].x,0,null,this.element),_e=createElementID(),it=createNS("filter"),it.setAttribute("id",_e),rt=createNS("feMorphology"),rt.setAttribute("operator","erode"),rt.setAttribute("in","SourceGraphic"),rt.setAttribute("radius","0"),it.appendChild(rt),a.appendChild(it),d.setAttribute("stroke",g[o].mode==="s"?"#000000":"#ffffff")):(rt=null,ut=null),this.storedData[o]={elem:d,x:ut,expan:rt,lastPath:"",lastOperator:"",filterId:_e,lastRadius:0},g[o].mode==="i"){nt=b.length;var st=createNS("g");for(j=0;j<nt;j+=1)st.appendChild(b[j]);var ft=createNS("mask");ft.setAttribute("mask-type","alpha"),ft.setAttribute("id",tt+"_"+_),ft.appendChild(d),a.appendChild(ft),st.setAttribute("mask","url("+getLocationHref()+"#"+tt+"_"+_+")"),b.length=0,b.push(st)}else b.push(d);g[o].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[o]={elem:d,lastPath:"",op:PropertyFactory.getProp(this.element,g[o].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,g[o],3),invRect:at},this.viewData[o].prop.k||this.drawPath(g[o],this.viewData[o].prop.v,this.viewData[o])}for(this.maskElement=createNS($),c=b.length,o=0;o<c;o+=1)this.maskElement.appendChild(b[o]);_>0&&(this.maskElement.setAttribute("id",tt),this.element.maskedElement.setAttribute(et,"url("+getLocationHref()+"#"+tt+")"),a.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}MaskElement.prototype.getMaskProperty=function(e){return this.viewData[e].prop},MaskElement.prototype.renderFrame=function(e){var i=this.element.finalTransform.mat,s,a=this.masksProperties.length;for(s=0;s<a;s+=1)if((this.viewData[s].prop._mdf||e)&&this.drawPath(this.masksProperties[s],this.viewData[s].prop.v,this.viewData[s]),(this.viewData[s].op._mdf||e)&&this.viewData[s].elem.setAttribute("fill-opacity",this.viewData[s].op.v),this.masksProperties[s].mode!=="n"&&(this.viewData[s].invRect&&(this.element.finalTransform.mProp._mdf||e)&&this.viewData[s].invRect.setAttribute("transform",i.getInverseMatrix().to2dCSS()),this.storedData[s].x&&(this.storedData[s].x._mdf||e))){var o=this.storedData[s].expan;this.storedData[s].x.v<0?(this.storedData[s].lastOperator!=="erode"&&(this.storedData[s].lastOperator="erode",this.storedData[s].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[s].filterId+")")),o.setAttribute("radius",-this.storedData[s].x.v)):(this.storedData[s].lastOperator!=="dilate"&&(this.storedData[s].lastOperator="dilate",this.storedData[s].elem.setAttribute("filter",null)),this.storedData[s].elem.setAttribute("stroke-width",this.storedData[s].x.v*2))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var e="M0,0 ";return e+=" h"+this.globalData.compSize.w,e+=" v"+this.globalData.compSize.h,e+=" h-"+this.globalData.compSize.w,e+=" v-"+this.globalData.compSize.h+" ",e},MaskElement.prototype.drawPath=function(e,i,s){var a=" M"+i.v[0][0]+","+i.v[0][1],o,c;for(c=i._length,o=1;o<c;o+=1)a+=" C"+i.o[o-1][0]+","+i.o[o-1][1]+" "+i.i[o][0]+","+i.i[o][1]+" "+i.v[o][0]+","+i.v[o][1];if(i.c&&c>1&&(a+=" C"+i.o[o-1][0]+","+i.o[o-1][1]+" "+i.i[0][0]+","+i.i[0][1]+" "+i.v[0][0]+","+i.v[0][1]),s.lastPath!==a){var d="";s.elem&&(i.c&&(d=e.inv?this.solidPath+a:a),s.elem.setAttribute("d",d)),s.lastPath=a}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory=function(){var e={};e.createFilter=i,e.createAlphaToLuminanceFilter=s;function i(a,o){var c=createNS("filter");return c.setAttribute("id",a),o!==!0&&(c.setAttribute("filterUnits","objectBoundingBox"),c.setAttribute("x","0%"),c.setAttribute("y","0%"),c.setAttribute("width","100%"),c.setAttribute("height","100%")),c}function s(){var a=createNS("feColorMatrix");return a.setAttribute("type","matrix"),a.setAttribute("color-interpolation-filters","sRGB"),a.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),a}return e}(),featureSupport=function(){var e={maskType:!0,svgLumaHidden:!0,offscreenCanvas:typeof OffscreenCanvas<"u"};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(e.maskType=!1),/firefox/i.test(navigator.userAgent)&&(e.svgLumaHidden=!1),e}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(e){var i,s="SourceGraphic",a=e.data.ef?e.data.ef.length:0,o=createElementID(),c=filtersFactory.createFilter(o,!0),d=0;this.filters=[];var g;for(i=0;i<a;i+=1){g=null;var _=e.data.ef[i].ty;if(registeredEffects$1[_]){var b=registeredEffects$1[_].effect;g=new b(c,e.effectsManager.effectElements[i],e,idPrefix+d,s),s=idPrefix+d,registeredEffects$1[_].countsAsEffect&&(d+=1)}g&&this.filters.push(g)}d&&(e.globalData.defs.appendChild(c),e.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+o+")")),this.filters.length&&e.addRenderableComponent(this)}SVGEffects.prototype.renderFrame=function(e){var i,s=this.filters.length;for(i=0;i<s;i+=1)this.filters[i].renderFrame(e)},SVGEffects.prototype.getEffects=function(e){var i,s=this.filters.length,a=[];for(i=0;i<s;i+=1)this.filters[i].type===e&&a.push(this.filters[i]);return a};function registerEffect$1(e,i,s){registeredEffects$1[e]={effect:i,countsAsEffect:s}}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var i=null;if(this.data.td){this.matteMasks={};var s=createNS("g");s.setAttribute("id",this.layerId),s.appendChild(this.layerElement),i=s,this.globalData.defs.appendChild(s)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),i=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.ty===0&&!this.data.hd){var a=createNS("clipPath"),o=createNS("path");o.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var c=createElementID();if(a.setAttribute("id",c),a.appendChild(o),this.globalData.defs.appendChild(a),this.checkMasks()){var d=createNS("g");d.setAttribute("clip-path","url("+getLocationHref()+"#"+c+")"),d.appendChild(this.layerElement),this.transformedElement=d,i?i.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+c+")")}this.data.bm!==0&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(i){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[i]){var s=this.layerId+"_"+i,a,o,c,d;if(i===1||i===3){var g=createNS("mask");g.setAttribute("id",s),g.setAttribute("mask-type",i===3?"luminance":"alpha"),c=createNS("use"),c.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),g.appendChild(c),this.globalData.defs.appendChild(g),!featureSupport.maskType&&i===1&&(g.setAttribute("mask-type","luminance"),a=createElementID(),o=filtersFactory.createFilter(a),this.globalData.defs.appendChild(o),o.appendChild(filtersFactory.createAlphaToLuminanceFilter()),d=createNS("g"),d.appendChild(c),g.appendChild(d),d.setAttribute("filter","url("+getLocationHref()+"#"+a+")"))}else if(i===2){var _=createNS("mask");_.setAttribute("id",s),_.setAttribute("mask-type","alpha");var b=createNS("g");_.appendChild(b),a=createElementID(),o=filtersFactory.createFilter(a);var j=createNS("feComponentTransfer");j.setAttribute("in","SourceGraphic"),o.appendChild(j);var nt=createNS("feFuncA");nt.setAttribute("type","table"),nt.setAttribute("tableValues","1.0 0.0"),j.appendChild(nt),this.globalData.defs.appendChild(o);var tt=createNS("rect");tt.setAttribute("width",this.comp.data.w),tt.setAttribute("height",this.comp.data.h),tt.setAttribute("x","0"),tt.setAttribute("y","0"),tt.setAttribute("fill","#ffffff"),tt.setAttribute("opacity","0"),b.setAttribute("filter","url("+getLocationHref()+"#"+a+")"),b.appendChild(tt),c=createNS("use"),c.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),b.appendChild(c),featureSupport.maskType||(_.setAttribute("mask-type","luminance"),o.appendChild(filtersFactory.createAlphaToLuminanceFilter()),d=createNS("g"),b.appendChild(tt),d.appendChild(this.layerElement),b.appendChild(d)),this.globalData.defs.appendChild(_)}this.matteMasks[i]=s}return this.matteMasks[i]},setMatte:function(i){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+i+")")}};function HierarchyElement(){}HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(i){this.hierarchy=i},setAsParent:function(){this._isParent=!0},checkParenting:function(){this.data.parent!==void 0&&this.comp.buildElementParenting(this,this.data.parent,[])}};function RenderableDOMElement(){}(function(){var e={initElement:function(s,a,o){this.initFrame(),this.initBaseData(s,a,o),this.initTransform(s,a,o),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var s=this.baseElement||this.layerElement;s.style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var s=this.baseElement||this.layerElement;s.style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(s){this._mdf=!1,this.prepareRenderableFrame(s),this.prepareProperties(s,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}};extendPrototype([RenderableElement,createProxyFunction(e)],RenderableDOMElement)})();function IImageElement(e,i,s){this.assetData=i.getAssetData(e.refId),this.assetData&&this.assetData.sid&&(this.assetData=i.slotManager.getProp(this.assetData)),this.initElement(e,i,s),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect};function ProcessedElement(e,i){this.elem=e,this.pos=i}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function(i){var s,a=this.shapeModifiers.length;for(s=0;s<a;s+=1)this.shapeModifiers[s].addShape(i)},isShapeInAnimatedModifiers:function(i){for(var s=0,a=this.shapeModifiers.length;s<a;)if(this.shapeModifiers[s].isAnimatedWithShape(i))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var i,s=this.shapes.length;for(i=0;i<s;i+=1)this.shapes[i].sh.reset();s=this.shapeModifiers.length;var a;for(i=s-1;i>=0&&(a=this.shapeModifiers[i].processShapes(this._isFirstFrame),!a);i-=1);}},searchProcessedElement:function(i){for(var s=this.processedElements,a=0,o=s.length;a<o;){if(s[a].elem===i)return s[a].pos;a+=1}return 0},addProcessedElement:function(i,s){for(var a=this.processedElements,o=a.length;o;)if(o-=1,a[o].elem===i){a[o].pos=s;return}a.push(new ProcessedElement(i,s))},prepareFrame:function(i){this.prepareRenderableFrame(i),this.prepareProperties(i,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(e,i,s){this.caches=[],this.styles=[],this.transformers=e,this.lStr="",this.sh=s,this.lvl=i,this._isAnimated=!!s.k;for(var a=0,o=e.length;a<o;){if(e[a].mProps.dynamicProperties.length){this._isAnimated=!0;break}a+=1}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0};function SVGStyleData(e,i){this.data=e,this.type=e.ty,this.d="",this.lvl=i,this._mdf=!1,this.closed=e.hd===!0,this.pElem=createNS("path"),this.msElem=null}SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1};function DashProperty(e,i,s,a){this.elem=e,this.frameId=-1,this.dataProps=createSizedArray(i.length),this.renderer=s,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",i.length?i.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(a);var o,c=i.length||0,d;for(o=0;o<c;o+=1)d=PropertyFactory.getProp(e,i[o].v,0,0,this),this.k=d.k||this.k,this.dataProps[o]={n:i[o].n,p:d};this.k||this.getValue(!0),this._isAnimated=this.k}DashProperty.prototype.getValue=function(e){if(!(this.elem.globalData.frameId===this.frameId&&!e)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||e,this._mdf)){var i=0,s=this.dataProps.length;for(this.renderer==="svg"&&(this.dashStr=""),i=0;i<s;i+=1)this.dataProps[i].n!=="o"?this.renderer==="svg"?this.dashStr+=" "+this.dataProps[i].p.v:this.dashArray[i]=this.dataProps[i].p.v:this.dashoffset[0]=this.dataProps[i].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(e,i,s){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,i.o,0,.01,this),this.w=PropertyFactory.getProp(e,i.w,0,null,this),this.d=new DashProperty(e,i.d||{},"svg",this),this.c=PropertyFactory.getProp(e,i.c,1,255,this),this.style=s,this._isAnimated=!!this._isAnimated}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(e,i,s){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(e,i.o,0,.01,this),this.c=PropertyFactory.getProp(e,i.c,1,255,this),this.style=s}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(e,i,s){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.style=s}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(e,i,s){this.data=i,this.c=createTypedArray("uint8c",i.p*4);var a=i.k.k[0].s?i.k.k[0].s.length-i.p*4:i.k.k.length-i.p*4;this.o=createTypedArray("float32",a),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=a,this.initDynamicPropertyContainer(s),this.prop=PropertyFactory.getProp(e,i.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}GradientProperty.prototype.comparePoints=function(e,i){for(var s=0,a=this.o.length/2,o;s<a;){if(o=Math.abs(e[s*4]-e[i*4+s*2]),o>.01)return!1;s+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4)return!1;if(this.data.k.k[0].s)for(var e=0,i=this.data.k.k.length;e<i;){if(!this.comparePoints(this.data.k.k[e].s,this.data.p))return!1;e+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(e){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||e){var i,s=this.data.p*4,a,o;for(i=0;i<s;i+=1)a=i%4===0?100:255,o=Math.round(this.prop.v[i]*a),this.c[i]!==o&&(this.c[i]=o,this._cmdf=!e);if(this.o.length)for(s=this.prop.v.length,i=this.data.p*4;i<s;i+=1)a=i%2===0?100:1,o=i%2===0?Math.round(this.prop.v[i]*100):this.prop.v[i],this.o[i-this.data.p*4]!==o&&(this.o[i-this.data.p*4]=o,this._omdf=!e);this._mdf=!e}},extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(e,i,s){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.initGradientData(e,i,s)}SVGGradientFillStyleData.prototype.initGradientData=function(e,i,s){this.o=PropertyFactory.getProp(e,i.o,0,.01,this),this.s=PropertyFactory.getProp(e,i.s,1,null,this),this.e=PropertyFactory.getProp(e,i.e,1,null,this),this.h=PropertyFactory.getProp(e,i.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(e,i.a||{k:0},0,degToRads,this),this.g=new GradientProperty(e,i.g,this),this.style=s,this.stops=[],this.setGradientData(s.pElem,i),this.setGradientOpacity(i,s),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(e,i){var s=createElementID(),a=createNS(i.t===1?"linearGradient":"radialGradient");a.setAttribute("id",s),a.setAttribute("spreadMethod","pad"),a.setAttribute("gradientUnits","userSpaceOnUse");var o=[],c,d,g;for(g=i.g.p*4,d=0;d<g;d+=4)c=createNS("stop"),a.appendChild(c),o.push(c);e.setAttribute(i.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+s+")"),this.gf=a,this.cst=o},SVGGradientFillStyleData.prototype.setGradientOpacity=function(e,i){if(this.g._hasOpacity&&!this.g._collapsable){var s,a,o,c=createNS("mask"),d=createNS("path");c.appendChild(d);var g=createElementID(),_=createElementID();c.setAttribute("id",_);var b=createNS(e.t===1?"linearGradient":"radialGradient");b.setAttribute("id",g),b.setAttribute("spreadMethod","pad"),b.setAttribute("gradientUnits","userSpaceOnUse"),o=e.g.k.k[0].s?e.g.k.k[0].s.length:e.g.k.k.length;var j=this.stops;for(a=e.g.p*4;a<o;a+=2)s=createNS("stop"),s.setAttribute("stop-color","rgb(255,255,255)"),b.appendChild(s),j.push(s);d.setAttribute(e.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+g+")"),e.ty==="gs"&&(d.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),d.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),e.lj===1&&d.setAttribute("stroke-miterlimit",e.ml)),this.of=b,this.ms=c,this.ost=j,this.maskId=_,i.msElem=d}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(e,i,s){this.initDynamicPropertyContainer(e),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(e,i.w,0,null,this),this.d=new DashProperty(e,i.d||{},"svg",this),this.initGradientData(e,i,s),this._isAnimated=!!this._isAnimated}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(e,i,s){this.transform={mProps:e,op:i,container:s},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}var buildShapeString=function(i,s,a,o){if(s===0)return"";var c=i.o,d=i.i,g=i.v,_,b=" M"+o.applyToPointStringified(g[0][0],g[0][1]);for(_=1;_<s;_+=1)b+=" C"+o.applyToPointStringified(c[_-1][0],c[_-1][1])+" "+o.applyToPointStringified(d[_][0],d[_][1])+" "+o.applyToPointStringified(g[_][0],g[_][1]);return a&&s&&(b+=" C"+o.applyToPointStringified(c[_-1][0],c[_-1][1])+" "+o.applyToPointStringified(d[0][0],d[0][1])+" "+o.applyToPointStringified(g[0][0],g[0][1]),b+="z"),b},SVGElementsRenderer=function(){var e=new Matrix,i=new Matrix,s={createRenderFunction:a};function a(nt){switch(nt.ty){case"fl":return g;case"gf":return b;case"gs":return _;case"st":return j;case"sh":case"el":case"rc":case"sr":return d;case"tr":return o;case"no":return c;default:return null}}function o(nt,tt,at){(at||tt.transform.op._mdf)&&tt.transform.container.setAttribute("opacity",tt.transform.op.v),(at||tt.transform.mProps._mdf)&&tt.transform.container.setAttribute("transform",tt.transform.mProps.v.to2dCSS())}function c(){}function d(nt,tt,at){var it,rt,ut,$,et,_e,st=tt.styles.length,ft=tt.lvl,lt,ct,dt,gt;for(_e=0;_e<st;_e+=1){if($=tt.sh._mdf||at,tt.styles[_e].lvl<ft){for(ct=i.reset(),dt=ft-tt.styles[_e].lvl,gt=tt.transformers.length-1;!$&&dt>0;)$=tt.transformers[gt].mProps._mdf||$,dt-=1,gt-=1;if($)for(dt=ft-tt.styles[_e].lvl,gt=tt.transformers.length-1;dt>0;)ct.multiply(tt.transformers[gt].mProps.v),dt-=1,gt-=1}else ct=e;if(lt=tt.sh.paths,rt=lt._length,$){for(ut="",it=0;it<rt;it+=1)et=lt.shapes[it],et&&et._length&&(ut+=buildShapeString(et,et._length,et.c,ct));tt.caches[_e]=ut}else ut=tt.caches[_e];tt.styles[_e].d+=nt.hd===!0?"":ut,tt.styles[_e]._mdf=$||tt.styles[_e]._mdf}}function g(nt,tt,at){var it=tt.style;(tt.c._mdf||at)&&it.pElem.setAttribute("fill","rgb("+bmFloor(tt.c.v[0])+","+bmFloor(tt.c.v[1])+","+bmFloor(tt.c.v[2])+")"),(tt.o._mdf||at)&&it.pElem.setAttribute("fill-opacity",tt.o.v)}function _(nt,tt,at){b(nt,tt,at),j(nt,tt,at)}function b(nt,tt,at){var it=tt.gf,rt=tt.g._hasOpacity,ut=tt.s.v,$=tt.e.v;if(tt.o._mdf||at){var et=nt.ty==="gf"?"fill-opacity":"stroke-opacity";tt.style.pElem.setAttribute(et,tt.o.v)}if(tt.s._mdf||at){var _e=nt.t===1?"x1":"cx",st=_e==="x1"?"y1":"cy";it.setAttribute(_e,ut[0]),it.setAttribute(st,ut[1]),rt&&!tt.g._collapsable&&(tt.of.setAttribute(_e,ut[0]),tt.of.setAttribute(st,ut[1]))}var ft,lt,ct,dt;if(tt.g._cmdf||at){ft=tt.cst;var gt=tt.g.c;for(ct=ft.length,lt=0;lt<ct;lt+=1)dt=ft[lt],dt.setAttribute("offset",gt[lt*4]+"%"),dt.setAttribute("stop-color","rgb("+gt[lt*4+1]+","+gt[lt*4+2]+","+gt[lt*4+3]+")")}if(rt&&(tt.g._omdf||at)){var Ct=tt.g.o;for(tt.g._collapsable?ft=tt.cst:ft=tt.ost,ct=ft.length,lt=0;lt<ct;lt+=1)dt=ft[lt],tt.g._collapsable||dt.setAttribute("offset",Ct[lt*2]+"%"),dt.setAttribute("stop-opacity",Ct[lt*2+1])}if(nt.t===1)(tt.e._mdf||at)&&(it.setAttribute("x2",$[0]),it.setAttribute("y2",$[1]),rt&&!tt.g._collapsable&&(tt.of.setAttribute("x2",$[0]),tt.of.setAttribute("y2",$[1])));else{var _t;if((tt.s._mdf||tt.e._mdf||at)&&(_t=Math.sqrt(Math.pow(ut[0]-$[0],2)+Math.pow(ut[1]-$[1],2)),it.setAttribute("r",_t),rt&&!tt.g._collapsable&&tt.of.setAttribute("r",_t)),tt.e._mdf||tt.h._mdf||tt.a._mdf||at){_t||(_t=Math.sqrt(Math.pow(ut[0]-$[0],2)+Math.pow(ut[1]-$[1],2)));var Pt=Math.atan2($[1]-ut[1],$[0]-ut[0]),bt=tt.h.v;bt>=1?bt=.99:bt<=-1&&(bt=-.99);var Mt=_t*bt,wt=Math.cos(Pt+tt.a.v)*Mt+ut[0],pt=Math.sin(Pt+tt.a.v)*Mt+ut[1];it.setAttribute("fx",wt),it.setAttribute("fy",pt),rt&&!tt.g._collapsable&&(tt.of.setAttribute("fx",wt),tt.of.setAttribute("fy",pt))}}}function j(nt,tt,at){var it=tt.style,rt=tt.d;rt&&(rt._mdf||at)&&rt.dashStr&&(it.pElem.setAttribute("stroke-dasharray",rt.dashStr),it.pElem.setAttribute("stroke-dashoffset",rt.dashoffset[0])),tt.c&&(tt.c._mdf||at)&&it.pElem.setAttribute("stroke","rgb("+bmFloor(tt.c.v[0])+","+bmFloor(tt.c.v[1])+","+bmFloor(tt.c.v[2])+")"),(tt.o._mdf||at)&&it.pElem.setAttribute("stroke-opacity",tt.o.v),(tt.w._mdf||at)&&(it.pElem.setAttribute("stroke-width",tt.w.v),it.msElem&&it.msElem.setAttribute("stroke-width",tt.w.v))}return s}();function SVGShapeElement(e,i,s){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(e,i,s),this.prevViewData=[]}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var e,i=this.shapes.length,s,a,o=this.stylesList.length,c,d=[],g=!1;for(a=0;a<o;a+=1){for(c=this.stylesList[a],g=!1,d.length=0,e=0;e<i;e+=1)s=this.shapes[e],s.styles.indexOf(c)!==-1&&(d.push(s),g=s._isAnimated||g);d.length>1&&g&&this.setShapesAsAnimated(d)}},SVGShapeElement.prototype.setShapesAsAnimated=function(e){var i,s=e.length;for(i=0;i<s;i+=1)e[i].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(e,i){var s,a=new SVGStyleData(e,i),o=a.pElem;if(e.ty==="st")s=new SVGStrokeStyleData(this,e,a);else if(e.ty==="fl")s=new SVGFillStyleData(this,e,a);else if(e.ty==="gf"||e.ty==="gs"){var c=e.ty==="gf"?SVGGradientFillStyleData:SVGGradientStrokeStyleData;s=new c(this,e,a),this.globalData.defs.appendChild(s.gf),s.maskId&&(this.globalData.defs.appendChild(s.ms),this.globalData.defs.appendChild(s.of),o.setAttribute("mask","url("+getLocationHref()+"#"+s.maskId+")"))}else e.ty==="no"&&(s=new SVGNoStyleData(this,e,a));return(e.ty==="st"||e.ty==="gs")&&(o.setAttribute("stroke-linecap",lineCapEnum[e.lc||2]),o.setAttribute("stroke-linejoin",lineJoinEnum[e.lj||2]),o.setAttribute("fill-opacity","0"),e.lj===1&&o.setAttribute("stroke-miterlimit",e.ml)),e.r===2&&o.setAttribute("fill-rule","evenodd"),e.ln&&o.setAttribute("id",e.ln),e.cl&&o.setAttribute("class",e.cl),e.bm&&(o.style["mix-blend-mode"]=getBlendMode(e.bm)),this.stylesList.push(a),this.addToAnimatedContents(e,s),s},SVGShapeElement.prototype.createGroupElement=function(e){var i=new ShapeGroupData;return e.ln&&i.gr.setAttribute("id",e.ln),e.cl&&i.gr.setAttribute("class",e.cl),e.bm&&(i.gr.style["mix-blend-mode"]=getBlendMode(e.bm)),i},SVGShapeElement.prototype.createTransformElement=function(e,i){var s=TransformPropertyFactory.getTransformProperty(this,e,this),a=new SVGTransformData(s,s.o,i);return this.addToAnimatedContents(e,a),a},SVGShapeElement.prototype.createShapeElement=function(e,i,s){var a=4;e.ty==="rc"?a=5:e.ty==="el"?a=6:e.ty==="sr"&&(a=7);var o=ShapePropertyFactory.getShapeProp(this,e,a,this),c=new SVGShapeData(i,s,o);return this.shapes.push(c),this.addShapeToModifiers(c),this.addToAnimatedContents(e,c),c},SVGShapeElement.prototype.addToAnimatedContents=function(e,i){for(var s=0,a=this.animatedContents.length;s<a;){if(this.animatedContents[s].element===i)return;s+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(e),element:i,data:e})},SVGShapeElement.prototype.setElementStyles=function(e){var i=e.styles,s,a=this.stylesList.length;for(s=0;s<a;s+=1)this.stylesList[s].closed||i.push(this.stylesList[s])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var e,i=this.itemsData.length;for(e=0;e<i;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),i=this.dynamicProperties.length,e=0;e<i;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(e,i,s,a,o,c,d){var g=[].concat(c),_,b=e.length-1,j,nt,tt=[],at=[],it,rt,ut;for(_=b;_>=0;_-=1){if(ut=this.searchProcessedElement(e[_]),ut?i[_]=s[ut-1]:e[_]._render=d,e[_].ty==="fl"||e[_].ty==="st"||e[_].ty==="gf"||e[_].ty==="gs"||e[_].ty==="no")ut?i[_].style.closed=!1:i[_]=this.createStyleElement(e[_],o),e[_]._render&&i[_].style.pElem.parentNode!==a&&a.appendChild(i[_].style.pElem),tt.push(i[_].style);else if(e[_].ty==="gr"){if(!ut)i[_]=this.createGroupElement(e[_]);else for(nt=i[_].it.length,j=0;j<nt;j+=1)i[_].prevViewData[j]=i[_].it[j];this.searchShapes(e[_].it,i[_].it,i[_].prevViewData,i[_].gr,o+1,g,d),e[_]._render&&i[_].gr.parentNode!==a&&a.appendChild(i[_].gr)}else e[_].ty==="tr"?(ut||(i[_]=this.createTransformElement(e[_],a)),it=i[_].transform,g.push(it)):e[_].ty==="sh"||e[_].ty==="rc"||e[_].ty==="el"||e[_].ty==="sr"?(ut||(i[_]=this.createShapeElement(e[_],g,o)),this.setElementStyles(i[_])):e[_].ty==="tm"||e[_].ty==="rd"||e[_].ty==="ms"||e[_].ty==="pb"||e[_].ty==="zz"||e[_].ty==="op"?(ut?(rt=i[_],rt.closed=!1):(rt=ShapeModifiers.getModifier(e[_].ty),rt.init(this,e[_]),i[_]=rt,this.shapeModifiers.push(rt)),at.push(rt)):e[_].ty==="rp"&&(ut?(rt=i[_],rt.closed=!0):(rt=ShapeModifiers.getModifier(e[_].ty),i[_]=rt,rt.init(this,e,_,i),this.shapeModifiers.push(rt),d=!1),at.push(rt));this.addProcessedElement(e[_],_+1)}for(b=tt.length,_=0;_<b;_+=1)tt[_].closed=!0;for(b=at.length,_=0;_<b;_+=1)at[_].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var e,i=this.stylesList.length;for(e=0;e<i;e+=1)this.stylesList[e].reset();for(this.renderShape(),e=0;e<i;e+=1)(this.stylesList[e]._mdf||this._isFirstFrame)&&(this.stylesList[e].msElem&&(this.stylesList[e].msElem.setAttribute("d",this.stylesList[e].d),this.stylesList[e].d="M0 0"+this.stylesList[e].d),this.stylesList[e].pElem.setAttribute("d",this.stylesList[e].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var e,i=this.animatedContents.length,s;for(e=0;e<i;e+=1)s=this.animatedContents[e],(this._isFirstFrame||s.element._isAnimated)&&s.data!==!0&&s.fn(s.data,s.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null};function LetterProps(e,i,s,a,o,c){this.o=e,this.sw=i,this.sc=s,this.fc=a,this.m=o,this.p=c,this._mdf={o:!0,sw:!!i,sc:!!s,fc:!!a,m:!0,p:!0}}LetterProps.prototype.update=function(e,i,s,a,o,c){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var d=!1;return this.o!==e&&(this.o=e,this._mdf.o=!0,d=!0),this.sw!==i&&(this.sw=i,this._mdf.sw=!0,d=!0),this.sc!==s&&(this.sc=s,this._mdf.sc=!0,d=!0),this.fc!==a&&(this.fc=a,this._mdf.fc=!0,d=!0),this.m!==o&&(this.m=o,this._mdf.m=!0,d=!0),c.length&&(this.p[0]!==c[0]||this.p[1]!==c[1]||this.p[4]!==c[4]||this.p[5]!==c[5]||this.p[12]!==c[12]||this.p[13]!==c[13])&&(this.p=c,this._mdf.p=!0,d=!0),d};function TextProperty(e,i){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,i.d&&i.d.sid&&(i.d=e.globalData.slotManager.getProp(i.d)),this.data=i,this.elem=e,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(e,i){for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(e[s]=i[s]);return e},TextProperty.prototype.setCurrentData=function(e){e.__complete||this.completeTextData(e),this.currentData=e,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(e){this.effectsSequence.push(e),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(e){if(!((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!e)){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var i=this.currentData,s=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return}this.lock=!0,this._mdf=!1;var a,o=this.effectsSequence.length,c=e||this.data.d.k[this.keysIndex].s;for(a=0;a<o;a+=1)s!==this.keysIndex?c=this.effectsSequence[a](c,c.t):c=this.effectsSequence[a](this.currentData,c.t);i!==c&&this.setCurrentData(c),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var e=this.data.d.k,i=this.elem.comp.renderedFrame,s=0,a=e.length;s<=a-1&&!(s===a-1||e[s+1].t>i);)s+=1;return this.keysIndex!==s&&(this.keysIndex=s),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(e){for(var i=[],s=0,a=e.length,o,c,d=!1,g=!1,_="";s<a;)d=g,g=!1,o=e.charCodeAt(s),_=e.charAt(s),FontManager.isCombinedCharacter(o)?d=!0:o>=55296&&o<=56319?FontManager.isRegionalFlag(e,s)?_=e.substr(s,14):(c=e.charCodeAt(s+1),c>=56320&&c<=57343&&(FontManager.isModifier(o,c)?(_=e.substr(s,2),d=!0):FontManager.isFlagEmoji(e.substr(s,4))?_=e.substr(s,4):_=e.substr(s,2))):o>56319?(c=e.charCodeAt(s+1),FontManager.isVariationSelector(o)&&(d=!0)):FontManager.isZeroWidthJoiner(o)&&(d=!0,g=!0),d?(i[i.length-1]+=_,d=!1):i.push(_),s+=_.length;return i},TextProperty.prototype.completeTextData=function(e){e.__complete=!0;var i=this.elem.globalData.fontManager,s=this.data,a=[],o,c,d,g=0,_,b=s.m.g,j=0,nt=0,tt=0,at=[],it=0,rt=0,ut,$,et=i.getFontByName(e.f),_e,st=0,ft=getFontProperties(et);e.fWeight=ft.weight,e.fStyle=ft.style,e.finalSize=e.s,e.finalText=this.buildFinalText(e.t),c=e.finalText.length,e.finalLineHeight=e.lh;var lt=e.tr/1e3*e.finalSize,ct;if(e.sz)for(var dt=!0,gt=e.sz[0],Ct=e.sz[1],_t,Pt;dt;){Pt=this.buildFinalText(e.t),_t=0,it=0,c=Pt.length,lt=e.tr/1e3*e.finalSize;var bt=-1;for(o=0;o<c;o+=1)ct=Pt[o].charCodeAt(0),d=!1,Pt[o]===" "?bt=o:(ct===13||ct===3)&&(it=0,d=!0,_t+=e.finalLineHeight||e.finalSize*1.2),i.chars?(_e=i.getCharData(Pt[o],et.fStyle,et.fFamily),st=d?0:_e.w*e.finalSize/100):st=i.measureText(Pt[o],e.f,e.finalSize),it+st>gt&&Pt[o]!==" "?(bt===-1?c+=1:o=bt,_t+=e.finalLineHeight||e.finalSize*1.2,Pt.splice(o,bt===o?1:0,"\r"),bt=-1,it=0):(it+=st,it+=lt);_t+=et.ascent*e.finalSize/100,this.canResize&&e.finalSize>this.minimumFontSize&&Ct<_t?(e.finalSize-=1,e.finalLineHeight=e.finalSize*e.lh/e.s):(e.finalText=Pt,c=e.finalText.length,dt=!1)}it=-lt,st=0;var Mt=0,wt;for(o=0;o<c;o+=1)if(d=!1,wt=e.finalText[o],ct=wt.charCodeAt(0),ct===13||ct===3?(Mt=0,at.push(it),rt=it>rt?it:rt,it=-2*lt,_="",d=!0,tt+=1):_=wt,i.chars?(_e=i.getCharData(wt,et.fStyle,i.getFontByName(e.f).fFamily),st=d?0:_e.w*e.finalSize/100):st=i.measureText(_,e.f,e.finalSize),wt===" "?Mt+=st+lt:(it+=st+lt+Mt,Mt=0),a.push({l:st,an:st,add:j,n:d,anIndexes:[],val:_,line:tt,animatorJustifyOffset:0}),b==2){if(j+=st,_===""||_===" "||o===c-1){for((_===""||_===" ")&&(j-=st);nt<=o;)a[nt].an=j,a[nt].ind=g,a[nt].extra=st,nt+=1;g+=1,j=0}}else if(b==3){if(j+=st,_===""||o===c-1){for(_===""&&(j-=st);nt<=o;)a[nt].an=j,a[nt].ind=g,a[nt].extra=st,nt+=1;j=0,g+=1}}else a[g].ind=g,a[g].extra=0,g+=1;if(e.l=a,rt=it>rt?it:rt,at.push(it),e.sz)e.boxWidth=e.sz[0],e.justifyOffset=0;else switch(e.boxWidth=rt,e.j){case 1:e.justifyOffset=-e.boxWidth;break;case 2:e.justifyOffset=-e.boxWidth/2;break;default:e.justifyOffset=0}e.lineWidths=at;var pt=s.a,mt,ot;$=pt.length;var ht,yt,vt=[];for(ut=0;ut<$;ut+=1){for(mt=pt[ut],mt.a.sc&&(e.strokeColorAnim=!0),mt.a.sw&&(e.strokeWidthAnim=!0),(mt.a.fc||mt.a.fh||mt.a.fs||mt.a.fb)&&(e.fillColorAnim=!0),yt=0,ht=mt.s.b,o=0;o<c;o+=1)ot=a[o],ot.anIndexes[ut]=yt,(ht==1&&ot.val!==""||ht==2&&ot.val!==""&&ot.val!==" "||ht==3&&(ot.n||ot.val==" "||o==c-1)||ht==4&&(ot.n||o==c-1))&&(mt.s.rn===1&&vt.push(yt),yt+=1);s.a[ut].s.totalChars=yt;var xt=-1,Tt;if(mt.s.rn===1)for(o=0;o<c;o+=1)ot=a[o],xt!=ot.anIndexes[ut]&&(xt=ot.anIndexes[ut],Tt=vt.splice(Math.floor(Math.random()*vt.length),1)[0]),ot.anIndexes[ut]=Tt}e.yOffset=e.finalLineHeight||e.finalSize*1.2,e.ls=e.ls||0,e.ascent=et.ascent*e.finalSize/100},TextProperty.prototype.updateDocumentData=function(e,i){i=i===void 0?this.keysIndex:i;var s=this.copyData({},this.data.d.k[i].s);s=this.copyData(s,e),this.data.d.k[i].s=s,this.recalculate(i),this.setCurrentData(s),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(e){var i=this.data.d.k[e].s;i.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(i)},TextProperty.prototype.canResizeFont=function(e){this.canResize=e,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(e){this.minimumFontSize=Math.floor(e)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var e=Math.max,i=Math.min,s=Math.floor;function a(c,d){this._currentTextLength=-1,this.k=!1,this.data=d,this.elem=c,this.comp=c.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(c),this.s=PropertyFactory.getProp(c,d.s||{k:0},0,0,this),"e"in d?this.e=PropertyFactory.getProp(c,d.e,0,0,this):this.e={v:100},this.o=PropertyFactory.getProp(c,d.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(c,d.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(c,d.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(c,d.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(c,d.a,0,.01,this),this.dynamicProperties.length||this.getValue()}a.prototype={getMult:function(d){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var g=0,_=0,b=1,j=1;this.ne.v>0?g=this.ne.v/100:_=-this.ne.v/100,this.xe.v>0?b=1-this.xe.v/100:j=1+this.xe.v/100;var nt=BezierFactory.getBezierEasing(g,_,b,j).get,tt=0,at=this.finalS,it=this.finalE,rt=this.data.sh;if(rt===2)it===at?tt=d>=it?1:0:tt=e(0,i(.5/(it-at)+(d-at)/(it-at),1)),tt=nt(tt);else if(rt===3)it===at?tt=d>=it?0:1:tt=1-e(0,i(.5/(it-at)+(d-at)/(it-at),1)),tt=nt(tt);else if(rt===4)it===at?tt=0:(tt=e(0,i(.5/(it-at)+(d-at)/(it-at),1)),tt<.5?tt*=2:tt=1-2*(tt-.5)),tt=nt(tt);else if(rt===5){if(it===at)tt=0;else{var ut=it-at;d=i(e(0,d+.5-at),it-at);var $=-ut/2+d,et=ut/2;tt=Math.sqrt(1-$*$/(et*et))}tt=nt(tt)}else rt===6?(it===at?tt=0:(d=i(e(0,d+.5-at),it-at),tt=(1+Math.cos(Math.PI+Math.PI*2*d/(it-at)))/2),tt=nt(tt)):(d>=s(at)&&(d-at<0?tt=e(0,i(i(it,1)-(at-d),1)):tt=e(0,i(it-d,1))),tt=nt(tt));if(this.sm.v!==100){var _e=this.sm.v*.01;_e===0&&(_e=1e-8);var st=.5-_e*.5;tt<st?tt=0:(tt=(tt-st)/_e,tt>1&&(tt=1))}return tt*this.a.v},getValue:function(d){this.iterateDynamicProperties(),this._mdf=d||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,d&&this.data.r===2&&(this.e.v=this._currentTextLength);var g=this.data.r===2?1:100/this.data.totalChars,_=this.o.v/g,b=this.s.v/g+_,j=this.e.v/g+_;if(b>j){var nt=b;b=j,j=nt}this.finalS=b,this.finalE=j}},extendPrototype([DynamicPropertyContainer],a);function o(c,d,g){return new a(c,d)}return{getTextSelectorProp:o}}();function TextAnimatorDataProperty(e,i,s){var a={propType:!1},o=PropertyFactory.getProp,c=i.a;this.a={r:c.r?o(e,c.r,0,degToRads,s):a,rx:c.rx?o(e,c.rx,0,degToRads,s):a,ry:c.ry?o(e,c.ry,0,degToRads,s):a,sk:c.sk?o(e,c.sk,0,degToRads,s):a,sa:c.sa?o(e,c.sa,0,degToRads,s):a,s:c.s?o(e,c.s,1,.01,s):a,a:c.a?o(e,c.a,1,0,s):a,o:c.o?o(e,c.o,0,.01,s):a,p:c.p?o(e,c.p,1,0,s):a,sw:c.sw?o(e,c.sw,0,0,s):a,sc:c.sc?o(e,c.sc,1,0,s):a,fc:c.fc?o(e,c.fc,1,0,s):a,fh:c.fh?o(e,c.fh,0,0,s):a,fs:c.fs?o(e,c.fs,0,.01,s):a,fb:c.fb?o(e,c.fb,0,.01,s):a,t:c.t?o(e,c.t,0,0,s):a},this.s=TextSelectorProp.getTextSelectorProp(e,i.s,s),this.s.t=i.s.t}function TextAnimatorProperty(e,i,s){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=e,this._renderType=i,this._elem=s,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(s)}TextAnimatorProperty.prototype.searchProperties=function(){var e,i=this._textData.a.length,s,a=PropertyFactory.getProp;for(e=0;e<i;e+=1)s=this._textData.a[e],this._animatorsData[e]=new TextAnimatorDataProperty(this._elem,s,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:a(this._elem,this._textData.p.a,0,0,this),f:a(this._elem,this._textData.p.f,0,0,this),l:a(this._elem,this._textData.p.l,0,0,this),r:a(this._elem,this._textData.p.r,0,0,this),p:a(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=a(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(e,i){if(this.lettersChangedFlag=i,!(!this._mdf&&!this._isFirstFrame&&!i&&(!this._hasMaskedPath||!this._pathData.m._mdf))){this._isFirstFrame=!1;var s=this._moreOptions.alignment.v,a=this._animatorsData,o=this._textData,c=this.mHelper,d=this._renderType,g=this.renderedLetters.length,_,b,j,nt,tt=e.l,at,it,rt,ut,$,et,_e,st,ft,lt,ct,dt,gt,Ct,_t;if(this._hasMaskedPath){if(_t=this._pathData.m,!this._pathData.n||this._pathData._mdf){var Pt=_t.v;this._pathData.r.v&&(Pt=Pt.reverse()),at={tLength:0,segments:[]},nt=Pt._length-1;var bt;for(dt=0,j=0;j<nt;j+=1)bt=bez.buildBezierData(Pt.v[j],Pt.v[j+1],[Pt.o[j][0]-Pt.v[j][0],Pt.o[j][1]-Pt.v[j][1]],[Pt.i[j+1][0]-Pt.v[j+1][0],Pt.i[j+1][1]-Pt.v[j+1][1]]),at.tLength+=bt.segmentLength,at.segments.push(bt),dt+=bt.segmentLength;j=nt,_t.v.c&&(bt=bez.buildBezierData(Pt.v[j],Pt.v[0],[Pt.o[j][0]-Pt.v[j][0],Pt.o[j][1]-Pt.v[j][1]],[Pt.i[0][0]-Pt.v[0][0],Pt.i[0][1]-Pt.v[0][1]]),at.tLength+=bt.segmentLength,at.segments.push(bt),dt+=bt.segmentLength),this._pathData.pi=at}if(at=this._pathData.pi,it=this._pathData.f.v,_e=0,et=1,ut=0,$=!0,lt=at.segments,it<0&&_t.v.c)for(at.tLength<Math.abs(it)&&(it=-Math.abs(it)%at.tLength),_e=lt.length-1,ft=lt[_e].points,et=ft.length-1;it<0;)it+=ft[et].partialLength,et-=1,et<0&&(_e-=1,ft=lt[_e].points,et=ft.length-1);ft=lt[_e].points,st=ft[et-1],rt=ft[et],ct=rt.partialLength}nt=tt.length,_=0,b=0;var Mt=e.finalSize*1.2*.714,wt=!0,pt,mt,ot,ht,yt;ht=a.length;var vt,xt=-1,Tt,At,Ot,Vt=it,Kt=_e,ar=et,dr=-1,or,Gt,tr,Ut,It,ir,Cr,Sr,mr="",Er=this.defaultPropsArray,xr;if(e.j===2||e.j===1){var Zt=0,Pr=0,vr=e.j===2?-.5:-1,Jt=0,ur=!0;for(j=0;j<nt;j+=1)if(tt[j].n){for(Zt&&(Zt+=Pr);Jt<j;)tt[Jt].animatorJustifyOffset=Zt,Jt+=1;Zt=0,ur=!0}else{for(ot=0;ot<ht;ot+=1)pt=a[ot].a,pt.t.propType&&(ur&&e.j===2&&(Pr+=pt.t.v*vr),mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),vt.length?Zt+=pt.t.v*vt[0]*vr:Zt+=pt.t.v*vt*vr);ur=!1}for(Zt&&(Zt+=Pr);Jt<j;)tt[Jt].animatorJustifyOffset=Zt,Jt+=1}for(j=0;j<nt;j+=1){if(c.reset(),or=1,tt[j].n)_=0,b+=e.yOffset,b+=wt?1:0,it=Vt,wt=!1,this._hasMaskedPath&&(_e=Kt,et=ar,ft=lt[_e].points,st=ft[et-1],rt=ft[et],ct=rt.partialLength,ut=0),mr="",Sr="",ir="",xr="",Er=this.defaultPropsArray;else{if(this._hasMaskedPath){if(dr!==tt[j].line){switch(e.j){case 1:it+=dt-e.lineWidths[tt[j].line];break;case 2:it+=(dt-e.lineWidths[tt[j].line])/2;break}dr=tt[j].line}xt!==tt[j].ind&&(tt[xt]&&(it+=tt[xt].extra),it+=tt[j].an/2,xt=tt[j].ind),it+=s[0]*tt[j].an*.005;var hr=0;for(ot=0;ot<ht;ot+=1)pt=a[ot].a,pt.p.propType&&(mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),vt.length?hr+=pt.p.v[0]*vt[0]:hr+=pt.p.v[0]*vt),pt.a.propType&&(mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),vt.length?hr+=pt.a.v[0]*vt[0]:hr+=pt.a.v[0]*vt);for($=!0,this._pathData.a.v&&(it=tt[0].an*.5+(dt-this._pathData.f.v-tt[0].an*.5-tt[tt.length-1].an*.5)*xt/(nt-1),it+=this._pathData.f.v);$;)ut+ct>=it+hr||!ft?(gt=(it+hr-ut)/rt.partialLength,At=st.point[0]+(rt.point[0]-st.point[0])*gt,Ot=st.point[1]+(rt.point[1]-st.point[1])*gt,c.translate(-s[0]*tt[j].an*.005,-(s[1]*Mt)*.01),$=!1):ft&&(ut+=rt.partialLength,et+=1,et>=ft.length&&(et=0,_e+=1,lt[_e]?ft=lt[_e].points:_t.v.c?(et=0,_e=0,ft=lt[_e].points):(ut-=rt.partialLength,ft=null)),ft&&(st=rt,rt=ft[et],ct=rt.partialLength));Tt=tt[j].an/2-tt[j].add,c.translate(-Tt,0,0)}else Tt=tt[j].an/2-tt[j].add,c.translate(-Tt,0,0),c.translate(-s[0]*tt[j].an*.005,-s[1]*Mt*.01,0);for(ot=0;ot<ht;ot+=1)pt=a[ot].a,pt.t.propType&&(mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),(_!==0||e.j!==0)&&(this._hasMaskedPath?vt.length?it+=pt.t.v*vt[0]:it+=pt.t.v*vt:vt.length?_+=pt.t.v*vt[0]:_+=pt.t.v*vt));for(e.strokeWidthAnim&&(tr=e.sw||0),e.strokeColorAnim&&(e.sc?Gt=[e.sc[0],e.sc[1],e.sc[2]]:Gt=[0,0,0]),e.fillColorAnim&&e.fc&&(Ut=[e.fc[0],e.fc[1],e.fc[2]]),ot=0;ot<ht;ot+=1)pt=a[ot].a,pt.a.propType&&(mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),vt.length?c.translate(-pt.a.v[0]*vt[0],-pt.a.v[1]*vt[1],pt.a.v[2]*vt[2]):c.translate(-pt.a.v[0]*vt,-pt.a.v[1]*vt,pt.a.v[2]*vt));for(ot=0;ot<ht;ot+=1)pt=a[ot].a,pt.s.propType&&(mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),vt.length?c.scale(1+(pt.s.v[0]-1)*vt[0],1+(pt.s.v[1]-1)*vt[1],1):c.scale(1+(pt.s.v[0]-1)*vt,1+(pt.s.v[1]-1)*vt,1));for(ot=0;ot<ht;ot+=1){if(pt=a[ot].a,mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),pt.sk.propType&&(vt.length?c.skewFromAxis(-pt.sk.v*vt[0],pt.sa.v*vt[1]):c.skewFromAxis(-pt.sk.v*vt,pt.sa.v*vt)),pt.r.propType&&(vt.length?c.rotateZ(-pt.r.v*vt[2]):c.rotateZ(-pt.r.v*vt)),pt.ry.propType&&(vt.length?c.rotateY(pt.ry.v*vt[1]):c.rotateY(pt.ry.v*vt)),pt.rx.propType&&(vt.length?c.rotateX(pt.rx.v*vt[0]):c.rotateX(pt.rx.v*vt)),pt.o.propType&&(vt.length?or+=(pt.o.v*vt[0]-or)*vt[0]:or+=(pt.o.v*vt-or)*vt),e.strokeWidthAnim&&pt.sw.propType&&(vt.length?tr+=pt.sw.v*vt[0]:tr+=pt.sw.v*vt),e.strokeColorAnim&&pt.sc.propType)for(It=0;It<3;It+=1)vt.length?Gt[It]+=(pt.sc.v[It]-Gt[It])*vt[0]:Gt[It]+=(pt.sc.v[It]-Gt[It])*vt;if(e.fillColorAnim&&e.fc){if(pt.fc.propType)for(It=0;It<3;It+=1)vt.length?Ut[It]+=(pt.fc.v[It]-Ut[It])*vt[0]:Ut[It]+=(pt.fc.v[It]-Ut[It])*vt;pt.fh.propType&&(vt.length?Ut=addHueToRGB(Ut,pt.fh.v*vt[0]):Ut=addHueToRGB(Ut,pt.fh.v*vt)),pt.fs.propType&&(vt.length?Ut=addSaturationToRGB(Ut,pt.fs.v*vt[0]):Ut=addSaturationToRGB(Ut,pt.fs.v*vt)),pt.fb.propType&&(vt.length?Ut=addBrightnessToRGB(Ut,pt.fb.v*vt[0]):Ut=addBrightnessToRGB(Ut,pt.fb.v*vt))}}for(ot=0;ot<ht;ot+=1)pt=a[ot].a,pt.p.propType&&(mt=a[ot].s,vt=mt.getMult(tt[j].anIndexes[ot],o.a[ot].s.totalChars),this._hasMaskedPath?vt.length?c.translate(0,pt.p.v[1]*vt[0],-pt.p.v[2]*vt[1]):c.translate(0,pt.p.v[1]*vt,-pt.p.v[2]*vt):vt.length?c.translate(pt.p.v[0]*vt[0],pt.p.v[1]*vt[1],-pt.p.v[2]*vt[2]):c.translate(pt.p.v[0]*vt,pt.p.v[1]*vt,-pt.p.v[2]*vt));if(e.strokeWidthAnim&&(ir=tr<0?0:tr),e.strokeColorAnim&&(Cr="rgb("+Math.round(Gt[0]*255)+","+Math.round(Gt[1]*255)+","+Math.round(Gt[2]*255)+")"),e.fillColorAnim&&e.fc&&(Sr="rgb("+Math.round(Ut[0]*255)+","+Math.round(Ut[1]*255)+","+Math.round(Ut[2]*255)+")"),this._hasMaskedPath){if(c.translate(0,-e.ls),c.translate(0,s[1]*Mt*.01+b,0),this._pathData.p.v){Ct=(rt.point[1]-st.point[1])/(rt.point[0]-st.point[0]);var yr=Math.atan(Ct)*180/Math.PI;rt.point[0]<st.point[0]&&(yr+=180),c.rotate(-yr*Math.PI/180)}c.translate(At,Ot,0),it-=s[0]*tt[j].an*.005,tt[j+1]&&xt!==tt[j+1].ind&&(it+=tt[j].an/2,it+=e.tr*.001*e.finalSize)}else{switch(c.translate(_,b,0),e.ps&&c.translate(e.ps[0],e.ps[1]+e.ascent,0),e.j){case 1:c.translate(tt[j].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[tt[j].line]),0,0);break;case 2:c.translate(tt[j].animatorJustifyOffset+e.justifyOffset+(e.boxWidth-e.lineWidths[tt[j].line])/2,0,0);break}c.translate(0,-e.ls),c.translate(Tt,0,0),c.translate(s[0]*tt[j].an*.005,s[1]*Mt*.01,0),_+=tt[j].l+e.tr*.001*e.finalSize}d==="html"?mr=c.toCSS():d==="svg"?mr=c.to2dCSS():Er=[c.props[0],c.props[1],c.props[2],c.props[3],c.props[4],c.props[5],c.props[6],c.props[7],c.props[8],c.props[9],c.props[10],c.props[11],c.props[12],c.props[13],c.props[14],c.props[15]],xr=or}g<=j?(yt=new LetterProps(xr,ir,Cr,Sr,mr,Er),this.renderedLetters.push(yt),g+=1,this.lettersChangedFlag=!0):(yt=this.renderedLetters[j],this.lettersChangedFlag=yt.update(xr,ir,Cr,Sr,mr,Er)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(e,i,s){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(e,i,s),this.textProperty=new TextProperty(this,e.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(e.t,this.renderType,this),this.initTransform(e,i,s),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(e){this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)},ITextElement.prototype.createPathShape=function(e,i){var s,a=i.length,o,c="";for(s=0;s<a;s+=1)i[s].ty==="sh"&&(o=i[s].ks.k,c+=buildShapeString(o,o.i.length,!0,e));return c},ITextElement.prototype.updateDocumentData=function(e,i){this.textProperty.updateDocumentData(e,i)},ITextElement.prototype.canResizeFont=function(e){this.textProperty.canResizeFont(e)},ITextElement.prototype.setMinimumFontSize=function(e){this.textProperty.setMinimumFontSize(e)},ITextElement.prototype.applyTextPropertiesToMatrix=function(e,i,s,a,o){switch(e.ps&&i.translate(e.ps[0],e.ps[1]+e.ascent,0),i.translate(0,-e.ls,0),e.j){case 1:i.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[s]),0,0);break;case 2:i.translate(e.justifyOffset+(e.boxWidth-e.lineWidths[s])/2,0,0);break}i.translate(a,o,0)},ITextElement.prototype.buildColor=function(e){return"rgb("+Math.round(e[0]*255)+","+Math.round(e[1]*255)+","+Math.round(e[2]*255)+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(e,i,s){this.textSpans=[],this.renderType="svg",this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(e){for(var i=0,s=e.length,a=[],o="";i<s;)e[i]===String.fromCharCode(13)||e[i]===String.fromCharCode(3)?(a.push(o),o=""):o+=e[i],i+=1;return a.push(o),a},SVGTextLottieElement.prototype.buildShapeData=function(e,i){if(e.shapes&&e.shapes.length){var s=e.shapes[0];if(s.it){var a=s.it[s.it.length-1];a.s&&(a.s.k[0]=i,a.s.k[1]=i)}}return e},SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var e,i,s=this.textProperty.currentData;this.renderedLetters=createSizedArray(s?s.l.length:0),s.fc?this.layerElement.setAttribute("fill",this.buildColor(s.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),s.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(s.sc)),this.layerElement.setAttribute("stroke-width",s.sw)),this.layerElement.setAttribute("font-size",s.finalSize);var a=this.globalData.fontManager.getFontByName(s.f);if(a.fClass)this.layerElement.setAttribute("class",a.fClass);else{this.layerElement.setAttribute("font-family",a.fFamily);var o=s.fWeight,c=s.fStyle;this.layerElement.setAttribute("font-style",c),this.layerElement.setAttribute("font-weight",o)}this.layerElement.setAttribute("aria-label",s.t);var d=s.l||[],g=!!this.globalData.fontManager.chars;i=d.length;var _,b=this.mHelper,j="",nt=this.data.singleShape,tt=0,at=0,it=!0,rt=s.tr*.001*s.finalSize;if(nt&&!g&&!s.sz){var ut=this.textContainer,$="start";switch(s.j){case 1:$="end";break;case 2:$="middle";break;default:$="start";break}ut.setAttribute("text-anchor",$),ut.setAttribute("letter-spacing",rt);var et=this.buildTextContents(s.finalText);for(i=et.length,at=s.ps?s.ps[1]+s.ascent:0,e=0;e<i;e+=1)_=this.textSpans[e].span||createNS("tspan"),_.textContent=et[e],_.setAttribute("x",0),_.setAttribute("y",at),_.style.display="inherit",ut.appendChild(_),this.textSpans[e]||(this.textSpans[e]={span:null,glyph:null}),this.textSpans[e].span=_,at+=s.finalLineHeight;this.layerElement.appendChild(ut)}else{var _e=this.textSpans.length,st;for(e=0;e<i;e+=1){if(this.textSpans[e]||(this.textSpans[e]={span:null,childSpan:null,glyph:null}),!g||!nt||e===0){if(_=_e>e?this.textSpans[e].span:createNS(g?"g":"text"),_e<=e){if(_.setAttribute("stroke-linecap","butt"),_.setAttribute("stroke-linejoin","round"),_.setAttribute("stroke-miterlimit","4"),this.textSpans[e].span=_,g){var ft=createNS("g");_.appendChild(ft),this.textSpans[e].childSpan=ft}this.textSpans[e].span=_,this.layerElement.appendChild(_)}_.style.display="inherit"}if(b.reset(),nt&&(d[e].n&&(tt=-rt,at+=s.yOffset,at+=it?1:0,it=!1),this.applyTextPropertiesToMatrix(s,b,d[e].line,tt,at),tt+=d[e].l||0,tt+=rt),g){st=this.globalData.fontManager.getCharData(s.finalText[e],a.fStyle,this.globalData.fontManager.getFontByName(s.f).fFamily);var lt;if(st.t===1)lt=new SVGCompElement(st.data,this.globalData,this);else{var ct=emptyShapeData;st.data&&st.data.shapes&&(ct=this.buildShapeData(st.data,s.finalSize)),lt=new SVGShapeElement(ct,this.globalData,this)}if(this.textSpans[e].glyph){var dt=this.textSpans[e].glyph;this.textSpans[e].childSpan.removeChild(dt.layerElement),dt.destroy()}this.textSpans[e].glyph=lt,lt._debug=!0,lt.prepareFrame(0),lt.renderFrame(),this.textSpans[e].childSpan.appendChild(lt.layerElement),st.t===1&&this.textSpans[e].childSpan.setAttribute("transform","scale("+s.finalSize/100+","+s.finalSize/100+")")}else nt&&_.setAttribute("transform","translate("+b.props[12]+","+b.props[13]+")"),_.textContent=d[e].val,_.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}nt&&_&&_.setAttribute("d",j)}for(;e<this.textSpans.length;)this.textSpans[e].span.style.display="none",e+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var e=this.layerElement.getBBox();this.bbox={top:e.y,left:e.x,width:e.width,height:e.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var e,i=this.textSpans.length,s;for(this.renderedFrame=this.comp.renderedFrame,e=0;e<i;e+=1)s=this.textSpans[e].glyph,s&&(s.prepareFrame(this.comp.renderedFrame-this.data.st),s._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var e,i,s=this.textAnimator.renderedLetters,a=this.textProperty.currentData.l;i=a.length;var o,c,d;for(e=0;e<i;e+=1)a[e].n||(o=s[e],c=this.textSpans[e].span,d=this.textSpans[e].glyph,d&&d.renderFrame(),o._mdf.m&&c.setAttribute("transform",o.m),o._mdf.o&&c.setAttribute("opacity",o.o),o._mdf.sw&&c.setAttribute("stroke-width",o.sw),o._mdf.sc&&c.setAttribute("stroke",o.sc),o._mdf.fc&&c.setAttribute("fill",o.fc))}};function ISolidElement(e,i,s){this.initElement(e,i,s)}extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var e=createNS("rect");e.setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.layerElement.appendChild(e)};function NullElement(e,i,s){this.initFrame(),this.initBaseData(e,i,s),this.initFrame(),this.initTransform(e,i,s),this.initHierarchy()}NullElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(e){return new NullElement(e,this.globalData,this)},SVGRendererBase.prototype.createShape=function(e){return new SVGShapeElement(e,this.globalData,this)},SVGRendererBase.prototype.createText=function(e){return new SVGTextLottieElement(e,this.globalData,this)},SVGRendererBase.prototype.createImage=function(e){return new IImageElement(e,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(e){return new ISolidElement(e,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(e){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+e.w+" "+e.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",e.w),this.svgElement.setAttribute("height",e.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),this.renderConfig.focusable!==void 0&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var i=this.globalData.defs;this.setupGlobalData(e,i),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=e;var s=createNS("clipPath"),a=createNS("rect");a.setAttribute("width",e.w),a.setAttribute("height",e.h),a.setAttribute("x",0),a.setAttribute("y",0);var o=createElementID();s.setAttribute("id",o),s.appendChild(a),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+o+")"),i.appendChild(s),this.layers=e.layers,this.elements=createSizedArray(e.layers.length)},SVGRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var e,i=this.layers?this.layers.length:0;for(e=0;e<i;e+=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(e){var i=0,s=this.layers.length;for(i=0;i<s;i+=1)if(this.layers[i].ind===e)return i;return-1},SVGRendererBase.prototype.buildItem=function(e){var i=this.elements;if(!(i[e]||this.layers[e].ty===99)){i[e]=!0;var s=this.createItem(this.layers[e]);if(i[e]=s,getExpressionsPlugin()&&(this.layers[e].ty===0&&this.globalData.projectInterface.registerComposition(s),s.initExpressions()),this.appendElementInPos(s,e),this.layers[e].tt){var a="tp"in this.layers[e]?this.findIndexByInd(this.layers[e].tp):e-1;if(a===-1)return;if(!this.elements[a]||this.elements[a]===!0)this.buildItem(a),this.addPendingElement(s);else{var o=i[a],c=o.getMatte(this.layers[e].tt);s.setMatte(c)}}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();if(e.checkParenting(),e.data.tt)for(var i=0,s=this.elements.length;i<s;){if(this.elements[i]===e){var a="tp"in e.data?this.findIndexByInd(e.data.tp):i-1,o=this.elements[a],c=o.getMatte(this.layers[i].tt);e.setMatte(c);break}i+=1}}},SVGRendererBase.prototype.renderFrame=function(e){if(!(this.renderedFrame===e||this.destroyed)){e===null?e=this.renderedFrame:this.renderedFrame=e,this.globalData.frameNum=e,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=e,this.globalData._mdf=!1;var i,s=this.layers.length;for(this.completeLayers||this.checkLayers(e),i=s-1;i>=0;i-=1)(this.completeLayers||this.elements[i])&&this.elements[i].prepareFrame(e-this.layers[i].st);if(this.globalData._mdf)for(i=0;i<s;i+=1)(this.completeLayers||this.elements[i])&&this.elements[i].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(e,i){var s=e.getBaseElement();if(s){for(var a=0,o;a<i;)this.elements[a]&&this.elements[a]!==!0&&this.elements[a].getBaseElement()&&(o=this.elements[a].getBaseElement()),a+=1;o?this.layerElement.insertBefore(s,o):this.layerElement.appendChild(s)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(e,i,s){this.initFrame(),this.initBaseData(e,i,s),this.initTransform(e,i,s),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),(this.data.xt||!i.progressiveLoad)&&this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(e){if(this._mdf=!1,this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange),!(!this.isInRange&&!this.data.xt)){if(this.tm._placeholder)this.renderedFrame=e/this.data.sr;else{var i=this.tm.v;i===this.data.op&&(i=this.data.op-1),this.renderedFrame=i}var s,a=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),s=a-1;s>=0;s-=1)(this.completeLayers||this.elements[s])&&(this.elements[s].prepareFrame(this.renderedFrame-this.layers[s].st),this.elements[s]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var e,i=this.layers.length;for(e=0;e<i;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},ICompElement.prototype.setElements=function(e){this.elements=e},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var e,i=this.layers.length;for(e=0;e<i;e+=1)this.elements[e]&&this.elements[e].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()};function SVGCompElement(e,i,s){this.layers=e.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,i,s),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,i.frameRate,this):{_placeholder:!0}}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)};function SVGRenderer(e,i){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var s="";if(i&&i.title){var a=createNS("title"),o=createElementID();a.setAttribute("id",o),a.textContent=i.title,this.svgElement.appendChild(a),s+=o}if(i&&i.description){var c=createNS("desc"),d=createElementID();c.setAttribute("id",d),c.textContent=i.description,this.svgElement.appendChild(c),s+=" "+d}s&&this.svgElement.setAttribute("aria-labelledby",s);var g=createNS("defs");this.svgElement.appendChild(g);var _=createNS("g");this.svgElement.appendChild(_),this.layerElement=_,this.renderConfig={preserveAspectRatio:i&&i.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:i&&i.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:i&&i.contentVisibility||"visible",progressiveLoad:i&&i.progressiveLoad||!1,hideOnTransparent:!(i&&i.hideOnTransparent===!1),viewBoxOnly:i&&i.viewBoxOnly||!1,viewBoxSize:i&&i.viewBoxSize||!1,className:i&&i.className||"",id:i&&i.id||"",focusable:i&&i.focusable,filterSize:{width:i&&i.filterSize&&i.filterSize.width||"100%",height:i&&i.filterSize&&i.filterSize.height||"100%",x:i&&i.filterSize&&i.filterSize.x||"0%",y:i&&i.filterSize&&i.filterSize.y||"0%"},width:i&&i.width,height:i&&i.height,runExpressions:!i||i.runExpressions===void 0||i.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:g,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(e){return new SVGCompElement(e,this.globalData,this)};function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}ShapeTransformManager.prototype={addTransformSequence:function(i){var s,a=i.length,o="_";for(s=0;s<a;s+=1)o+=i[s].transform.key+"_";var c=this.sequences[o];return c||(c={transforms:[].concat(i),finalTransform:new Matrix,_mdf:!1},this.sequences[o]=c,this.sequenceList.push(c)),c},processSequence:function(i,s){for(var a=0,o=i.transforms.length,c=s;a<o&&!s;){if(i.transforms[a].transform.mProps._mdf){c=!0;break}a+=1}if(c)for(i.finalTransform.reset(),a=o-1;a>=0;a-=1)i.finalTransform.multiply(i.transforms[a].transform.mProps.v);i._mdf=c},processSequences:function(i){var s,a=this.sequenceList.length;for(s=0;s<a;s+=1)this.processSequence(this.sequenceList[s],i)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var i="__lottie_element_luma_buffer",s=null,a=null,o=null;function c(){var _=createNS("svg"),b=createNS("filter"),j=createNS("feColorMatrix");return b.setAttribute("id",i),j.setAttribute("type","matrix"),j.setAttribute("color-interpolation-filters","sRGB"),j.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),b.appendChild(j),_.appendChild(b),_.setAttribute("id",i+"_svg"),featureSupport.svgLumaHidden&&(_.style.display="none"),_}function d(){s||(o=c(),document.body.appendChild(o),s=createTag("canvas"),a=s.getContext("2d"),a.filter="url(#"+i+")",a.fillStyle="rgba(0,0,0,0)",a.fillRect(0,0,1,1))}function g(_){return s||d(),s.width=_.width,s.height=_.height,a.filter="url(#"+i+")",s}return{load:d,get:g}};function createCanvas(e,i){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(e,i);var s=createTag("canvas");return s.width=e,s.height=i,s}var assetLoader=function(){return{loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas}}(),registeredEffects={};function CVEffects(e){var i,s=e.data.ef?e.data.ef.length:0;this.filters=[];var a;for(i=0;i<s;i+=1){a=null;var o=e.data.ef[i].ty;if(registeredEffects[o]){var c=registeredEffects[o].effect;a=new c(e.effectsManager.effectElements[i],e)}a&&this.filters.push(a)}this.filters.length&&e.addRenderableComponent(this)}CVEffects.prototype.renderFrame=function(e){var i,s=this.filters.length;for(i=0;i<s;i+=1)this.filters[i].renderFrame(e)},CVEffects.prototype.getEffects=function(e){var i,s=this.filters.length,a=[];for(i=0;i<s;i+=1)this.filters[i].type===e&&a.push(this.filters[i]);return a};function registerEffect(e,i){registeredEffects[e]={effect:i}}function CVMaskElement(e,i){this.data=e,this.element=i,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var s,a=this.masksProperties.length,o=!1;for(s=0;s<a;s+=1)this.masksProperties[s].mode!=="n"&&(o=!0),this.viewData[s]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[s],3);this.hasMasks=o,o&&this.element.addRenderableComponent(this)}CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var e=this.element.finalTransform.mat,i=this.element.canvasContext,s,a=this.masksProperties.length,o,c,d;for(i.beginPath(),s=0;s<a;s+=1)if(this.masksProperties[s].mode!=="n"){this.masksProperties[s].inv&&(i.moveTo(0,0),i.lineTo(this.element.globalData.compSize.w,0),i.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),i.lineTo(0,this.element.globalData.compSize.h),i.lineTo(0,0)),d=this.viewData[s].v,o=e.applyToPointArray(d.v[0][0],d.v[0][1],0),i.moveTo(o[0],o[1]);var g,_=d._length;for(g=1;g<_;g+=1)c=e.applyToTriplePoints(d.o[g-1],d.i[g],d.v[g]),i.bezierCurveTo(c[0],c[1],c[2],c[3],c[4],c[5]);c=e.applyToTriplePoints(d.o[g-1],d.i[0],d.v[0]),i.bezierCurveTo(c[0],c[1],c[2],c[3],c[4],c[5])}this.element.globalData.renderer.save(!0),i.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};function CVBaseElement(){}var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var i=this.globalData.canvasContext,s=assetLoader.createCanvas(i.canvas.width,i.canvas.height);this.buffers.push(s);var a=assetLoader.createCanvas(i.canvas.width,i.canvas.height);this.buffers.push(a),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var i=this.globalData;if(i.blendMode!==this.data.bm){i.blendMode=this.data.bm;var s=getBlendMode(this.data.bm);i.canvasContext.globalCompositeOperation=s}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){!this.hidden&&(!this.isInRange||this.isTransparent)&&(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(i){i.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var i=this.buffers[0],s=i.getContext("2d");this.clearCanvas(s),s.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var i=this.buffers[1],s=i.getContext("2d");this.clearCanvas(s),s.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform);var a=this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1);if(a.renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var o=assetLoader.getLumaCanvas(this.canvasContext.canvas),c=o.getContext("2d");c.drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(o,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(i,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(i){if(!(this.hidden||this.data.hd)&&!(this.data.td===1&&!i)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var s=this.data.ty===0;this.prepareLayer(),this.globalData.renderer.save(s),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(s),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(e,i,s,a){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var o=4;i.ty==="rc"?o=5:i.ty==="el"?o=6:i.ty==="sr"&&(o=7),this.sh=ShapePropertyFactory.getShapeProp(e,i,o,e);var c,d=s.length,g;for(c=0;c<d;c+=1)s[c].closed||(g={transforms:a.addTransformSequence(s[c].transforms),trNodes:[]},this.styledShapes.push(g),s[c].elements.push(g))}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(e,i,s){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(e,i){var s={data:e,type:e.ty,preTransforms:this.transformsManager.addTransformSequence(i),transforms:[],elements:[],closed:e.hd===!0},a={};if(e.ty==="fl"||e.ty==="st"?(a.c=PropertyFactory.getProp(this,e.c,1,255,this),a.c.k||(s.co="rgb("+bmFloor(a.c.v[0])+","+bmFloor(a.c.v[1])+","+bmFloor(a.c.v[2])+")")):(e.ty==="gf"||e.ty==="gs")&&(a.s=PropertyFactory.getProp(this,e.s,1,null,this),a.e=PropertyFactory.getProp(this,e.e,1,null,this),a.h=PropertyFactory.getProp(this,e.h||{k:0},0,.01,this),a.a=PropertyFactory.getProp(this,e.a||{k:0},0,degToRads,this),a.g=new GradientProperty(this,e.g,this)),a.o=PropertyFactory.getProp(this,e.o,0,.01,this),e.ty==="st"||e.ty==="gs"){if(s.lc=lineCapEnum[e.lc||2],s.lj=lineJoinEnum[e.lj||2],e.lj==1&&(s.ml=e.ml),a.w=PropertyFactory.getProp(this,e.w,0,null,this),a.w.k||(s.wi=a.w.v),e.d){var o=new DashProperty(this,e.d,"canvas",this);a.d=o,a.d.k||(s.da=a.d.dashArray,s.do=a.d.dashoffset[0])}}else s.r=e.r===2?"evenodd":"nonzero";return this.stylesList.push(s),a.style=s,a},CVShapeElement.prototype.createGroupElement=function(){var e={it:[],prevViewData:[]};return e},CVShapeElement.prototype.createTransformElement=function(e){var i={transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,e.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,e,this)}};return i},CVShapeElement.prototype.createShapeElement=function(e){var i=new CVShapeData(this,e,this.stylesList,this.transformsManager);return this.shapes.push(i),this.addShapeToModifiers(i),i},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var e,i=this.itemsData.length;for(e=0;e<i;e+=1)this.prevViewData[e]=this.itemsData[e];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),i=this.dynamicProperties.length,e=0;e<i;e+=1)this.dynamicProperties[e].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(e){var i,s=this.stylesList.length;for(i=0;i<s;i+=1)this.stylesList[i].closed||this.stylesList[i].transforms.push(e)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var e,i=this.stylesList.length;for(e=0;e<i;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.pop()},CVShapeElement.prototype.closeStyles=function(e){var i,s=e.length;for(i=0;i<s;i+=1)e[i].closed=!0},CVShapeElement.prototype.searchShapes=function(e,i,s,a,o){var c,d=e.length-1,g,_,b=[],j=[],nt,tt,at,it=[].concat(o);for(c=d;c>=0;c-=1){if(nt=this.searchProcessedElement(e[c]),nt?i[c]=s[nt-1]:e[c]._shouldRender=a,e[c].ty==="fl"||e[c].ty==="st"||e[c].ty==="gf"||e[c].ty==="gs")nt?i[c].style.closed=!1:i[c]=this.createStyleElement(e[c],it),b.push(i[c].style);else if(e[c].ty==="gr"){if(!nt)i[c]=this.createGroupElement(e[c]);else for(_=i[c].it.length,g=0;g<_;g+=1)i[c].prevViewData[g]=i[c].it[g];this.searchShapes(e[c].it,i[c].it,i[c].prevViewData,a,it)}else e[c].ty==="tr"?(nt||(at=this.createTransformElement(e[c]),i[c]=at),it.push(i[c]),this.addTransformToStyleList(i[c])):e[c].ty==="sh"||e[c].ty==="rc"||e[c].ty==="el"||e[c].ty==="sr"?nt||(i[c]=this.createShapeElement(e[c])):e[c].ty==="tm"||e[c].ty==="rd"||e[c].ty==="pb"||e[c].ty==="zz"||e[c].ty==="op"?(nt?(tt=i[c],tt.closed=!1):(tt=ShapeModifiers.getModifier(e[c].ty),tt.init(this,e[c]),i[c]=tt,this.shapeModifiers.push(tt)),j.push(tt)):e[c].ty==="rp"&&(nt?(tt=i[c],tt.closed=!0):(tt=ShapeModifiers.getModifier(e[c].ty),i[c]=tt,tt.init(this,e,c,i),this.shapeModifiers.push(tt),a=!1),j.push(tt));this.addProcessedElement(e[c],c+1)}for(this.removeTransformFromStyleList(),this.closeStyles(b),d=j.length,c=0;c<d;c+=1)j[c].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(e,i){(e._opMdf||i.op._mdf||this._isFirstFrame)&&(i.opacity=e.opacity,i.opacity*=i.op.v,i._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var e,i=this.stylesList.length,s,a,o,c,d,g,_=this.globalData.renderer,b=this.globalData.canvasContext,j,nt;for(e=0;e<i;e+=1)if(nt=this.stylesList[e],j=nt.type,!((j==="st"||j==="gs")&&nt.wi===0||!nt.data._shouldRender||nt.coOp===0||this.globalData.currentGlobalAlpha===0)){for(_.save(),d=nt.elements,j==="st"||j==="gs"?(_.ctxStrokeStyle(j==="st"?nt.co:nt.grd),_.ctxLineWidth(nt.wi),_.ctxLineCap(nt.lc),_.ctxLineJoin(nt.lj),_.ctxMiterLimit(nt.ml||0)):_.ctxFillStyle(j==="fl"?nt.co:nt.grd),_.ctxOpacity(nt.coOp),j!=="st"&&j!=="gs"&&b.beginPath(),_.ctxTransform(nt.preTransforms.finalTransform.props),a=d.length,s=0;s<a;s+=1){for((j==="st"||j==="gs")&&(b.beginPath(),nt.da&&(b.setLineDash(nt.da),b.lineDashOffset=nt.do)),g=d[s].trNodes,c=g.length,o=0;o<c;o+=1)g[o].t==="m"?b.moveTo(g[o].p[0],g[o].p[1]):g[o].t==="c"?b.bezierCurveTo(g[o].pts[0],g[o].pts[1],g[o].pts[2],g[o].pts[3],g[o].pts[4],g[o].pts[5]):b.closePath();(j==="st"||j==="gs")&&(_.ctxStroke(),nt.da&&b.setLineDash(this.dashResetter))}j!=="st"&&j!=="gs"&&this.globalData.renderer.ctxFill(nt.r),_.restore()}},CVShapeElement.prototype.renderShape=function(e,i,s,a){var o,c=i.length-1,d;for(d=e,o=c;o>=0;o-=1)i[o].ty==="tr"?(d=s[o].transform,this.renderShapeTransform(e,d)):i[o].ty==="sh"||i[o].ty==="el"||i[o].ty==="rc"||i[o].ty==="sr"?this.renderPath(i[o],s[o]):i[o].ty==="fl"?this.renderFill(i[o],s[o],d):i[o].ty==="st"?this.renderStroke(i[o],s[o],d):i[o].ty==="gf"||i[o].ty==="gs"?this.renderGradientFill(i[o],s[o],d):i[o].ty==="gr"?this.renderShape(d,i[o].it,s[o].it):i[o].ty;a&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(e,i){if(this._isFirstFrame||i._mdf||e.transforms._mdf){var s=e.trNodes,a=i.paths,o,c,d,g=a._length;s.length=0;var _=e.transforms.finalTransform;for(d=0;d<g;d+=1){var b=a.shapes[d];if(b&&b.v){for(c=b._length,o=1;o<c;o+=1)o===1&&s.push({t:"m",p:_.applyToPointArray(b.v[0][0],b.v[0][1],0)}),s.push({t:"c",pts:_.applyToTriplePoints(b.o[o-1],b.i[o],b.v[o])});c===1&&s.push({t:"m",p:_.applyToPointArray(b.v[0][0],b.v[0][1],0)}),b.c&&c&&(s.push({t:"c",pts:_.applyToTriplePoints(b.o[o-1],b.i[0],b.v[0])}),s.push({t:"z"}))}}e.trNodes=s}},CVShapeElement.prototype.renderPath=function(e,i){if(e.hd!==!0&&e._shouldRender){var s,a=i.styledShapes.length;for(s=0;s<a;s+=1)this.renderStyledShape(i.styledShapes[s],i.sh)}},CVShapeElement.prototype.renderFill=function(e,i,s){var a=i.style;(i.c._mdf||this._isFirstFrame)&&(a.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")"),(i.o._mdf||s._opMdf||this._isFirstFrame)&&(a.coOp=i.o.v*s.opacity)},CVShapeElement.prototype.renderGradientFill=function(e,i,s){var a=i.style,o;if(!a.grd||i.g._mdf||i.s._mdf||i.e._mdf||e.t!==1&&(i.h._mdf||i.a._mdf)){var c=this.globalData.canvasContext,d=i.s.v,g=i.e.v;if(e.t===1)o=c.createLinearGradient(d[0],d[1],g[0],g[1]);else{var _=Math.sqrt(Math.pow(d[0]-g[0],2)+Math.pow(d[1]-g[1],2)),b=Math.atan2(g[1]-d[1],g[0]-d[0]),j=i.h.v;j>=1?j=.99:j<=-1&&(j=-.99);var nt=_*j,tt=Math.cos(b+i.a.v)*nt+d[0],at=Math.sin(b+i.a.v)*nt+d[1];o=c.createRadialGradient(tt,at,0,d[0],d[1],_)}var it,rt=e.g.p,ut=i.g.c,$=1;for(it=0;it<rt;it+=1)i.g._hasOpacity&&i.g._collapsable&&($=i.g.o[it*2+1]),o.addColorStop(ut[it*4]/100,"rgba("+ut[it*4+1]+","+ut[it*4+2]+","+ut[it*4+3]+","+$+")");a.grd=o}a.coOp=i.o.v*s.opacity},CVShapeElement.prototype.renderStroke=function(e,i,s){var a=i.style,o=i.d;o&&(o._mdf||this._isFirstFrame)&&(a.da=o.dashArray,a.do=o.dashoffset[0]),(i.c._mdf||this._isFirstFrame)&&(a.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")"),(i.o._mdf||s._opMdf||this._isFirstFrame)&&(a.coOp=i.o.v*s.opacity),(i.w._mdf||this._isFirstFrame)&&(a.wi=i.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0};function CVTextElement(e,i,s){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var i=!1;e.fc?(i=!0,this.values.fill=this.buildColor(e.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=i;var s=!1;e.sc&&(s=!0,this.values.stroke=this.buildColor(e.sc),this.values.sWidth=e.sw);var a=this.globalData.fontManager.getFontByName(e.f),o,c,d=e.l,g=this.mHelper;this.stroke=s,this.values.fValue=e.finalSize+"px "+this.globalData.fontManager.getFontByName(e.f).fFamily,c=e.finalText.length;var _,b,j,nt,tt,at,it,rt,ut,$,et=this.data.singleShape,_e=e.tr*.001*e.finalSize,st=0,ft=0,lt=!0,ct=0;for(o=0;o<c;o+=1){_=this.globalData.fontManager.getCharData(e.finalText[o],a.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily),b=_&&_.data||{},g.reset(),et&&d[o].n&&(st=-_e,ft+=e.yOffset,ft+=lt?1:0,lt=!1),tt=b.shapes?b.shapes[0].it:[],it=tt.length,g.scale(e.finalSize/100,e.finalSize/100),et&&this.applyTextPropertiesToMatrix(e,g,d[o].line,st,ft),ut=createSizedArray(it-1);var dt=0;for(at=0;at<it;at+=1)if(tt[at].ty==="sh"){for(nt=tt[at].ks.k.i.length,rt=tt[at].ks.k,$=[],j=1;j<nt;j+=1)j===1&&$.push(g.applyToX(rt.v[0][0],rt.v[0][1],0),g.applyToY(rt.v[0][0],rt.v[0][1],0)),$.push(g.applyToX(rt.o[j-1][0],rt.o[j-1][1],0),g.applyToY(rt.o[j-1][0],rt.o[j-1][1],0),g.applyToX(rt.i[j][0],rt.i[j][1],0),g.applyToY(rt.i[j][0],rt.i[j][1],0),g.applyToX(rt.v[j][0],rt.v[j][1],0),g.applyToY(rt.v[j][0],rt.v[j][1],0));$.push(g.applyToX(rt.o[j-1][0],rt.o[j-1][1],0),g.applyToY(rt.o[j-1][0],rt.o[j-1][1],0),g.applyToX(rt.i[0][0],rt.i[0][1],0),g.applyToY(rt.i[0][0],rt.i[0][1],0),g.applyToX(rt.v[0][0],rt.v[0][1],0),g.applyToY(rt.v[0][0],rt.v[0][1],0)),ut[dt]=$,dt+=1}et&&(st+=d[o].l,st+=_e),this.textSpans[ct]?this.textSpans[ct].elem=ut:this.textSpans[ct]={elem:ut},ct+=1}},CVTextElement.prototype.renderInnerContent=function(){this.validateText();var e=this.canvasContext;e.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var i,s,a,o,c,d,g=this.textAnimator.renderedLetters,_=this.textProperty.currentData.l;s=_.length;var b,j=null,nt=null,tt=null,at,it,rt=this.globalData.renderer;for(i=0;i<s;i+=1)if(!_[i].n){if(b=g[i],b&&(rt.save(),rt.ctxTransform(b.p),rt.ctxOpacity(b.o)),this.fill){for(b&&b.fc?j!==b.fc&&(rt.ctxFillStyle(b.fc),j=b.fc):j!==this.values.fill&&(j=this.values.fill,rt.ctxFillStyle(this.values.fill)),at=this.textSpans[i].elem,o=at.length,this.globalData.canvasContext.beginPath(),a=0;a<o;a+=1)for(it=at[a],d=it.length,this.globalData.canvasContext.moveTo(it[0],it[1]),c=2;c<d;c+=6)this.globalData.canvasContext.bezierCurveTo(it[c],it[c+1],it[c+2],it[c+3],it[c+4],it[c+5]);this.globalData.canvasContext.closePath(),rt.ctxFill()}if(this.stroke){for(b&&b.sw?tt!==b.sw&&(tt=b.sw,rt.ctxLineWidth(b.sw)):tt!==this.values.sWidth&&(tt=this.values.sWidth,rt.ctxLineWidth(this.values.sWidth)),b&&b.sc?nt!==b.sc&&(nt=b.sc,rt.ctxStrokeStyle(b.sc)):nt!==this.values.stroke&&(nt=this.values.stroke,rt.ctxStrokeStyle(this.values.stroke)),at=this.textSpans[i].elem,o=at.length,this.globalData.canvasContext.beginPath(),a=0;a<o;a+=1)for(it=at[a],d=it.length,this.globalData.canvasContext.moveTo(it[0],it[1]),c=2;c<d;c+=6)this.globalData.canvasContext.bezierCurveTo(it[c],it[c+1],it[c+2],it[c+3],it[c+4],it[c+5]);this.globalData.canvasContext.closePath(),rt.ctxStroke()}b&&this.globalData.renderer.restore()}};function CVImageElement(e,i,s){this.assetData=i.getAssetData(e.refId),this.img=i.imageLoader.getAsset(this.assetData),this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var e=createTag("canvas");e.width=this.assetData.w,e.height=this.assetData.h;var i=e.getContext("2d"),s=this.img.width,a=this.img.height,o=s/a,c=this.assetData.w/this.assetData.h,d,g,_=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;o>c&&_==="xMidYMid slice"||o<c&&_!=="xMidYMid slice"?(g=a,d=g*c):(d=s,g=d/c),i.drawImage(this.img,(s-d)/2,(a-g)/2,d,g,0,0,this.assetData.w,this.assetData.h),this.img=e}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null};function CVSolidElement(e,i,s){this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(e){return new CVShapeElement(e,this.globalData,this)},CanvasRendererBase.prototype.createText=function(e){return new CVTextElement(e,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(e){return new CVImageElement(e,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(e){return new CVSolidElement(e,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(e){e[0]===1&&e[1]===0&&e[4]===0&&e[5]===1&&e[12]===0&&e[13]===0||this.canvasContext.transform(e[0],e[1],e[4],e[5],e[12],e[13])},CanvasRendererBase.prototype.ctxOpacity=function(e){this.canvasContext.globalAlpha*=e<0?0:e},CanvasRendererBase.prototype.ctxFillStyle=function(e){this.canvasContext.fillStyle=e},CanvasRendererBase.prototype.ctxStrokeStyle=function(e){this.canvasContext.strokeStyle=e},CanvasRendererBase.prototype.ctxLineWidth=function(e){this.canvasContext.lineWidth=e},CanvasRendererBase.prototype.ctxLineCap=function(e){this.canvasContext.lineCap=e},CanvasRendererBase.prototype.ctxLineJoin=function(e){this.canvasContext.lineJoin=e},CanvasRendererBase.prototype.ctxMiterLimit=function(e){this.canvasContext.miterLimit=e},CanvasRendererBase.prototype.ctxFill=function(e){this.canvasContext.fill(e)},CanvasRendererBase.prototype.ctxFillRect=function(e,i,s,a){this.canvasContext.fillRect(e,i,s,a)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}this.contextData.reset()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(e){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}e&&(this.globalData.blendMode="source-over"),this.contextData.restore(e)},CanvasRendererBase.prototype.configAnimation=function(e){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var i=this.animationItem.container.style;i.width="100%",i.height="100%";var s="0px 0px 0px";i.transformOrigin=s,i.mozTransformOrigin=s,i.webkitTransformOrigin=s,i["-webkit-transform"]=s,i.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=e,this.layers=e.layers,this.transformCanvas={w:e.w,h:e.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(e,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(e.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(e,i){this.reset();var s,a;e?(s=e,a=i,this.canvasContext.canvas.width=s,this.canvasContext.canvas.height=a):(this.animationItem.wrapper&&this.animationItem.container?(s=this.animationItem.wrapper.offsetWidth,a=this.animationItem.wrapper.offsetHeight):(s=this.canvasContext.canvas.width,a=this.canvasContext.canvas.height),this.canvasContext.canvas.width=s*this.renderConfig.dpr,this.canvasContext.canvas.height=a*this.renderConfig.dpr);var o,c;if(this.renderConfig.preserveAspectRatio.indexOf("meet")!==-1||this.renderConfig.preserveAspectRatio.indexOf("slice")!==-1){var d=this.renderConfig.preserveAspectRatio.split(" "),g=d[1]||"meet",_=d[0]||"xMidYMid",b=_.substr(0,4),j=_.substr(4);o=s/a,c=this.transformCanvas.w/this.transformCanvas.h,c>o&&g==="meet"||c<o&&g==="slice"?(this.transformCanvas.sx=s/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=s/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=a/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=a/(this.transformCanvas.h/this.renderConfig.dpr)),b==="xMid"&&(c<o&&g==="meet"||c>o&&g==="slice")?this.transformCanvas.tx=(s-this.transformCanvas.w*(a/this.transformCanvas.h))/2*this.renderConfig.dpr:b==="xMax"&&(c<o&&g==="meet"||c>o&&g==="slice")?this.transformCanvas.tx=(s-this.transformCanvas.w*(a/this.transformCanvas.h))*this.renderConfig.dpr:this.transformCanvas.tx=0,j==="YMid"&&(c>o&&g==="meet"||c<o&&g==="slice")?this.transformCanvas.ty=(a-this.transformCanvas.h*(s/this.transformCanvas.w))/2*this.renderConfig.dpr:j==="YMax"&&(c>o&&g==="meet"||c<o&&g==="slice")?this.transformCanvas.ty=(a-this.transformCanvas.h*(s/this.transformCanvas.w))*this.renderConfig.dpr:this.transformCanvas.ty=0}else this.renderConfig.preserveAspectRatio==="none"?(this.transformCanvas.sx=s/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=a/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText="");var e,i=this.layers?this.layers.length:0;for(e=i-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(e,i){if(!(this.renderedFrame===e&&this.renderConfig.clearCanvas===!0&&!i||this.destroyed||e===-1)){this.renderedFrame=e,this.globalData.frameNum=e-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||i,this.globalData.projectInterface.currentFrame=e;var s,a=this.layers.length;for(this.completeLayers||this.checkLayers(e),s=a-1;s>=0;s-=1)(this.completeLayers||this.elements[s])&&this.elements[s].prepareFrame(e-this.layers[s].st);if(this.globalData._mdf){for(this.renderConfig.clearCanvas===!0?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),s=a-1;s>=0;s-=1)(this.completeLayers||this.elements[s])&&this.elements[s].renderFrame();this.renderConfig.clearCanvas!==!0&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(e){var i=this.elements;if(!(i[e]||this.layers[e].ty===99)){var s=this.createItem(this.layers[e],this,this.globalData);i[e]=s,s.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();e.checkParenting()}},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"};function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){this.stack=[],this.cArrPos=0,this.cTr=new Matrix;var e,i=15;for(e=0;e<i;e+=1){var s=new CanvasContext;this.stack[e]=s}this._length=i,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}CVContextData.prototype.duplicate=function(){var e=this._length*2,i=0;for(i=this._length;i<e;i+=1)this.stack[i]=new CanvasContext;this._length=e},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(e){this.cArrPos-=1;var i=this.stack[this.cArrPos],s=i.transform,a,o=this.cTr.props;for(a=0;a<16;a+=1)o[a]=s[a];if(e){this.nativeContext.restore();var c=this.stack[this.cArrPos+1];this.appliedFillStyle=c.fillStyle,this.appliedStrokeStyle=c.strokeStyle,this.appliedLineWidth=c.lineWidth,this.appliedLineCap=c.lineCap,this.appliedLineJoin=c.lineJoin,this.appliedMiterLimit=c.miterLimit}this.nativeContext.setTransform(s[0],s[1],s[4],s[5],s[12],s[13]),(e||i.opacity!==-1&&this.currentOpacity!==i.opacity)&&(this.nativeContext.globalAlpha=i.opacity,this.currentOpacity=i.opacity),this.currentFillStyle=i.fillStyle,this.currentStrokeStyle=i.strokeStyle,this.currentLineWidth=i.lineWidth,this.currentLineCap=i.lineCap,this.currentLineJoin=i.lineJoin,this.currentMiterLimit=i.miterLimit},CVContextData.prototype.save=function(e){e&&this.nativeContext.save();var i=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var s=this.stack[this.cArrPos],a;for(a=0;a<16;a+=1)s.transform[a]=i[a];this.cArrPos+=1;var o=this.stack[this.cArrPos];o.opacity=s.opacity,o.fillStyle=s.fillStyle,o.strokeStyle=s.strokeStyle,o.lineWidth=s.lineWidth,o.lineCap=s.lineCap,o.lineJoin=s.lineJoin,o.miterLimit=s.miterLimit},CVContextData.prototype.setOpacity=function(e){this.stack[this.cArrPos].opacity=e},CVContextData.prototype.setContext=function(e){this.nativeContext=e},CVContextData.prototype.fillStyle=function(e){this.stack[this.cArrPos].fillStyle!==e&&(this.currentFillStyle=e,this.stack[this.cArrPos].fillStyle=e)},CVContextData.prototype.strokeStyle=function(e){this.stack[this.cArrPos].strokeStyle!==e&&(this.currentStrokeStyle=e,this.stack[this.cArrPos].strokeStyle=e)},CVContextData.prototype.lineWidth=function(e){this.stack[this.cArrPos].lineWidth!==e&&(this.currentLineWidth=e,this.stack[this.cArrPos].lineWidth=e)},CVContextData.prototype.lineCap=function(e){this.stack[this.cArrPos].lineCap!==e&&(this.currentLineCap=e,this.stack[this.cArrPos].lineCap=e)},CVContextData.prototype.lineJoin=function(e){this.stack[this.cArrPos].lineJoin!==e&&(this.currentLineJoin=e,this.stack[this.cArrPos].lineJoin=e)},CVContextData.prototype.miterLimit=function(e){this.stack[this.cArrPos].miterLimit!==e&&(this.currentMiterLimit=e,this.stack[this.cArrPos].miterLimit=e)},CVContextData.prototype.transform=function(e){this.transformMat.cloneFromProps(e);var i=this.cTr;this.transformMat.multiply(i),i.cloneFromProps(this.transformMat.props);var s=i.props;this.nativeContext.setTransform(s[0],s[1],s[4],s[5],s[12],s[13])},CVContextData.prototype.opacity=function(e){var i=this.stack[this.cArrPos].opacity;i*=e<0?0:e,this.stack[this.cArrPos].opacity!==i&&(this.currentOpacity!==e&&(this.nativeContext.globalAlpha=e,this.currentOpacity=e),this.stack[this.cArrPos].opacity=i)},CVContextData.prototype.fill=function(e){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(e)},CVContextData.prototype.fillRect=function(e,i,s,a){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(e,i,s,a)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()};function CVCompElement(e,i,s){this.completeLayers=!1,this.layers=e.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(e,i,s),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,i.frameRate,this):{_placeholder:!0}}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var e=this.canvasContext;e.beginPath(),e.moveTo(0,0),e.lineTo(this.data.w,0),e.lineTo(this.data.w,this.data.h),e.lineTo(0,this.data.h),e.lineTo(0,0),e.clip();var i,s=this.layers.length;for(i=s-1;i>=0;i-=1)(this.completeLayers||this.elements[i])&&this.elements[i].renderFrame()},CVCompElement.prototype.destroy=function(){var e,i=this.layers.length;for(e=i-1;e>=0;e-=1)this.elements[e]&&this.elements[e].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)};function CanvasRenderer(e,i){this.animationItem=e,this.renderConfig={clearCanvas:i&&i.clearCanvas!==void 0?i.clearCanvas:!0,context:i&&i.context||null,progressiveLoad:i&&i.progressiveLoad||!1,preserveAspectRatio:i&&i.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:i&&i.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:i&&i.contentVisibility||"visible",className:i&&i.className||"",id:i&&i.id||"",runExpressions:!i||i.runExpressions===void 0||i.runExpressions},this.renderConfig.dpr=i&&i.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=i&&i.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(e){return new CVCompElement(e,this.globalData,this)};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.bm!==0&&this.setBlendMode()},renderElement:function(){var i=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var s=this.finalTransform.mat.toCSS();i.transform=s,i.webkitTransform=s}this.finalTransform._opMdf&&(i.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(e,i,s){this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var e;this.data.hasMask?(e=createNS("rect"),e.setAttribute("width",this.data.sw),e.setAttribute("height",this.data.sh),e.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(e=createTag("div"),e.style.width=this.data.sw+"px",e.style.height=this.data.sh+"px",e.style.backgroundColor=this.data.sc),this.layerElement.appendChild(e)};function HShapeElement(e,i,s){this.shapes=[],this.shapesData=e.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(e,i,s),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var e;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),e=this.svgElement;else{e=createNS("svg");var i=this.comp.data?this.comp.data:this.globalData.compSize;e.setAttribute("width",i.w),e.setAttribute("height",i.h),e.appendChild(this.shapesContainer),this.layerElement.appendChild(e)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=e},HShapeElement.prototype.getTransformedPoint=function(e,i){var s,a=e.length;for(s=0;s<a;s+=1)i=e[s].mProps.v.applyToPointArray(i[0],i[1],0);return i},HShapeElement.prototype.calculateShapeBoundingBox=function(e,i){var s=e.sh.v,a=e.transformers,o,c=s._length,d,g,_,b;if(!(c<=1)){for(o=0;o<c-1;o+=1)d=this.getTransformedPoint(a,s.v[o]),g=this.getTransformedPoint(a,s.o[o]),_=this.getTransformedPoint(a,s.i[o+1]),b=this.getTransformedPoint(a,s.v[o+1]),this.checkBounds(d,g,_,b,i);s.c&&(d=this.getTransformedPoint(a,s.v[o]),g=this.getTransformedPoint(a,s.o[o]),_=this.getTransformedPoint(a,s.i[0]),b=this.getTransformedPoint(a,s.v[0]),this.checkBounds(d,g,_,b,i))}},HShapeElement.prototype.checkBounds=function(e,i,s,a,o){this.getBoundsOfCurve(e,i,s,a);var c=this.shapeBoundingBox;o.x=bmMin(c.left,o.x),o.xMax=bmMax(c.right,o.xMax),o.y=bmMin(c.top,o.y),o.yMax=bmMax(c.bottom,o.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(e,i,s,a){for(var o=[[e[0],a[0]],[e[1],a[1]]],c,d,g,_,b,j,nt,tt=0;tt<2;++tt)d=6*e[tt]-12*i[tt]+6*s[tt],c=-3*e[tt]+9*i[tt]-9*s[tt]+3*a[tt],g=3*i[tt]-3*e[tt],d|=0,c|=0,g|=0,c===0&&d===0||(c===0?(_=-g/d,_>0&&_<1&&o[tt].push(this.calculateF(_,e,i,s,a,tt))):(b=d*d-4*g*c,b>=0&&(j=(-d+bmSqrt(b))/(2*c),j>0&&j<1&&o[tt].push(this.calculateF(j,e,i,s,a,tt)),nt=(-d-bmSqrt(b))/(2*c),nt>0&&nt<1&&o[tt].push(this.calculateF(nt,e,i,s,a,tt)))));this.shapeBoundingBox.left=bmMin.apply(null,o[0]),this.shapeBoundingBox.top=bmMin.apply(null,o[1]),this.shapeBoundingBox.right=bmMax.apply(null,o[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,o[1])},HShapeElement.prototype.calculateF=function(e,i,s,a,o,c){return bmPow(1-e,3)*i[c]+3*bmPow(1-e,2)*e*s[c]+3*(1-e)*bmPow(e,2)*a[c]+bmPow(e,3)*o[c]},HShapeElement.prototype.calculateBoundingBox=function(e,i){var s,a=e.length;for(s=0;s<a;s+=1)e[s]&&e[s].sh?this.calculateShapeBoundingBox(e[s],i):e[s]&&e[s].it?this.calculateBoundingBox(e[s].it,i):e[s]&&e[s].style&&e[s].w&&this.expandStrokeBoundingBox(e[s].w,i)},HShapeElement.prototype.expandStrokeBoundingBox=function(e,i){var s=0;if(e.keyframes){for(var a=0;a<e.keyframes.length;a+=1){var o=e.keyframes[a].s;o>s&&(s=o)}s*=e.mult}else s=e.v*e.mult;i.x-=s,i.xMax+=s,i.y-=s,i.yMax+=s},HShapeElement.prototype.currentBoxContains=function(e){return this.currentBBox.x<=e.x&&this.currentBBox.y<=e.y&&this.currentBBox.width+this.currentBBox.x>=e.x+e.width&&this.currentBBox.height+this.currentBBox.y>=e.y+e.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var e=this.tempBoundingBox,i=999999;if(e.x=i,e.xMax=-i,e.y=i,e.yMax=-i,this.calculateBoundingBox(this.itemsData,e),e.width=e.xMax<e.x?0:e.xMax-e.x,e.height=e.yMax<e.y?0:e.yMax-e.y,this.currentBoxContains(e))return;var s=!1;if(this.currentBBox.w!==e.width&&(this.currentBBox.w=e.width,this.shapeCont.setAttribute("width",e.width),s=!0),this.currentBBox.h!==e.height&&(this.currentBBox.h=e.height,this.shapeCont.setAttribute("height",e.height),s=!0),s||this.currentBBox.x!==e.x||this.currentBBox.y!==e.y){this.currentBBox.w=e.width,this.currentBBox.h=e.height,this.currentBBox.x=e.x,this.currentBBox.y=e.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var a=this.shapeCont.style,o="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";a.transform=o,a.webkitTransform=o}}};function HTextElement(e,i,s){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var e=createNS("g");this.maskedElement.appendChild(e),this.innerElem=e}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var e=this.textProperty.currentData;this.renderedLetters=createSizedArray(e.l?e.l.length:0);var i=this.innerElem.style,s=e.fc?this.buildColor(e.fc):"rgba(0,0,0,0)";i.fill=s,i.color=s,e.sc&&(i.stroke=this.buildColor(e.sc),i.strokeWidth=e.sw+"px");var a=this.globalData.fontManager.getFontByName(e.f);if(!this.globalData.fontManager.chars)if(i.fontSize=e.finalSize+"px",i.lineHeight=e.finalSize+"px",a.fClass)this.innerElem.className=a.fClass;else{i.fontFamily=a.fFamily;var o=e.fWeight,c=e.fStyle;i.fontStyle=c,i.fontWeight=o}var d,g,_=e.l;g=_.length;var b,j,nt,tt=this.mHelper,at,it="",rt=0;for(d=0;d<g;d+=1){if(this.globalData.fontManager.chars?(this.textPaths[rt]?b=this.textPaths[rt]:(b=createNS("path"),b.setAttribute("stroke-linecap",lineCapEnum[1]),b.setAttribute("stroke-linejoin",lineJoinEnum[2]),b.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[rt]?(j=this.textSpans[rt],nt=j.children[0]):(j=createTag("div"),j.style.lineHeight=0,nt=createNS("svg"),nt.appendChild(b),styleDiv(j)))):this.isMasked?b=this.textPaths[rt]?this.textPaths[rt]:createNS("text"):this.textSpans[rt]?(j=this.textSpans[rt],b=this.textPaths[rt]):(j=createTag("span"),styleDiv(j),b=createTag("span"),styleDiv(b),j.appendChild(b)),this.globalData.fontManager.chars){var ut=this.globalData.fontManager.getCharData(e.finalText[d],a.fStyle,this.globalData.fontManager.getFontByName(e.f).fFamily),$;if(ut?$=ut.data:$=null,tt.reset(),$&&$.shapes&&$.shapes.length&&(at=$.shapes[0].it,tt.scale(e.finalSize/100,e.finalSize/100),it=this.createPathShape(tt,at),b.setAttribute("d",it)),this.isMasked)this.innerElem.appendChild(b);else{if(this.innerElem.appendChild(j),$&&$.shapes){document.body.appendChild(nt);var et=nt.getBBox();nt.setAttribute("width",et.width+2),nt.setAttribute("height",et.height+2),nt.setAttribute("viewBox",et.x-1+" "+(et.y-1)+" "+(et.width+2)+" "+(et.height+2));var _e=nt.style,st="translate("+(et.x-1)+"px,"+(et.y-1)+"px)";_e.transform=st,_e.webkitTransform=st,_[d].yOffset=et.y-1}else nt.setAttribute("width",1),nt.setAttribute("height",1);j.appendChild(nt)}}else if(b.textContent=_[d].val,b.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(b);else{this.innerElem.appendChild(j);var ft=b.style,lt="translate3d(0,"+-e.finalSize/1.2+"px,0)";ft.transform=lt,ft.webkitTransform=lt}this.isMasked?this.textSpans[rt]=b:this.textSpans[rt]=j,this.textSpans[rt].style.display="block",this.textPaths[rt]=b,rt+=1}for(;rt<this.textSpans.length;)this.textSpans[rt].style.display="none",rt+=1},HTextElement.prototype.renderInnerContent=function(){this.validateText();var e;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),e=this.svgElement.style;var i="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";e.transform=i,e.webkitTransform=i}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),!(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag)){var s,a,o=0,c=this.textAnimator.renderedLetters,d=this.textProperty.currentData.l;a=d.length;var g,_,b;for(s=0;s<a;s+=1)d[s].n?o+=1:(_=this.textSpans[s],b=this.textPaths[s],g=c[o],o+=1,g._mdf.m&&(this.isMasked?_.setAttribute("transform",g.m):(_.style.webkitTransform=g.m,_.style.transform=g.m)),_.style.opacity=g.o,g.sw&&g._mdf.sw&&b.setAttribute("stroke-width",g.sw),g.sc&&g._mdf.sc&&b.setAttribute("stroke",g.sc),g.fc&&g._mdf.fc&&(b.setAttribute("fill",g.fc),b.style.color=g.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var j=this.innerElem.getBBox();this.currentBBox.w!==j.width&&(this.currentBBox.w=j.width,this.svgElement.setAttribute("width",j.width)),this.currentBBox.h!==j.height&&(this.currentBBox.h=j.height,this.svgElement.setAttribute("height",j.height));var nt=1;if(this.currentBBox.w!==j.width+nt*2||this.currentBBox.h!==j.height+nt*2||this.currentBBox.x!==j.x-nt||this.currentBBox.y!==j.y-nt){this.currentBBox.w=j.width+nt*2,this.currentBBox.h=j.height+nt*2,this.currentBBox.x=j.x-nt,this.currentBBox.y=j.y-nt,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),e=this.svgElement.style;var tt="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";e.transform=tt,e.webkitTransform=tt}}}};function HCameraElement(e,i,s){this.initFrame(),this.initBaseData(e,i,s),this.initHierarchy();var a=PropertyFactory.getProp;if(this.pe=a(this,e.pe,0,0,this),e.ks.p.s?(this.px=a(this,e.ks.p.x,1,0,this),this.py=a(this,e.ks.p.y,1,0,this),this.pz=a(this,e.ks.p.z,1,0,this)):this.p=a(this,e.ks.p,1,0,this),e.ks.a&&(this.a=a(this,e.ks.a,1,0,this)),e.ks.or.k.length&&e.ks.or.k[0].to){var o,c=e.ks.or.k.length;for(o=0;o<c;o+=1)e.ks.or.k[o].to=null,e.ks.or.k[o].ti=null}this.or=a(this,e.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=a(this,e.ks.rx,0,degToRads,this),this.ry=a(this,e.ks.ry,0,degToRads,this),this.rz=a(this,e.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var e,i=this.comp.threeDElements.length,s,a,o;for(e=0;e<i;e+=1)if(s=this.comp.threeDElements[e],s.type==="3d"){a=s.perspectiveElem.style,o=s.container.style;var c=this.pe.v+"px",d="0px 0px 0px",g="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";a.perspective=c,a.webkitPerspective=c,o.transformOrigin=d,o.mozTransformOrigin=d,o.webkitTransformOrigin=d,a.transform=g,a.webkitTransform=g}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var e=this._isFirstFrame,i,s;if(this.hierarchy)for(s=this.hierarchy.length,i=0;i<s;i+=1)e=this.hierarchy[i].finalTransform.mProp._mdf||e;if(e||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(s=this.hierarchy.length-1,i=s;i>=0;i-=1){var a=this.hierarchy[i].finalTransform.mProp;this.mat.translate(-a.p.v[0],-a.p.v[1],a.p.v[2]),this.mat.rotateX(-a.or.v[0]).rotateY(-a.or.v[1]).rotateZ(a.or.v[2]),this.mat.rotateX(-a.rx.v).rotateY(-a.ry.v).rotateZ(a.rz.v),this.mat.scale(1/a.s.v[0],1/a.s.v[1],1/a.s.v[2]),this.mat.translate(a.a.v[0],a.a.v[1],a.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var o;this.p?o=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:o=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var c=Math.sqrt(Math.pow(o[0],2)+Math.pow(o[1],2)+Math.pow(o[2],2)),d=[o[0]/c,o[1]/c,o[2]/c],g=Math.sqrt(d[2]*d[2]+d[0]*d[0]),_=Math.atan2(d[1],g),b=Math.atan2(d[0],-d[2]);this.mat.rotateY(b).rotateX(-_)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var j=!this._prevMat.equals(this.mat);if((j||this.pe._mdf)&&this.comp.threeDElements){s=this.comp.threeDElements.length;var nt,tt,at;for(i=0;i<s;i+=1)if(nt=this.comp.threeDElements[i],nt.type==="3d"){if(j){var it=this.mat.toCSS();at=nt.container.style,at.transform=it,at.webkitTransform=it}this.pe._mdf&&(tt=nt.perspectiveElem.style,tt.perspective=this.pe.v+"px",tt.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(e){this.prepareProperties(e,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null};function HImageElement(e,i,s){this.assetData=i.getAssetData(e.refId),this.initElement(e,i,s)}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var e=this.globalData.getAssetsPath(this.assetData),i=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",e),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(i),i.crossOrigin="anonymous",i.src=e,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)};function HybridRendererBase(e,i){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:i&&i.className||"",imagePreserveAspectRatio:i&&i.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(i&&i.hideOnTransparent===!1),filterSize:{width:i&&i.filterSize&&i.filterSize.width||"400%",height:i&&i.filterSize&&i.filterSize.height||"400%",x:i&&i.filterSize&&i.filterSize.x||"-100%",y:i&&i.filterSize&&i.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var e=this.pendingElements.pop();e.checkParenting()}},HybridRendererBase.prototype.appendElementInPos=function(e,i){var s=e.getBaseElement();if(s){var a=this.layers[i];if(!a.ddd||!this.supports3d)if(this.threeDElements)this.addTo3dContainer(s,i);else{for(var o=0,c,d,g;o<i;)this.elements[o]&&this.elements[o]!==!0&&this.elements[o].getBaseElement&&(d=this.elements[o],g=this.layers[o].ddd?this.getThreeDContainerByPos(o):d.getBaseElement(),c=g||c),o+=1;c?(!a.ddd||!this.supports3d)&&this.layerElement.insertBefore(s,c):(!a.ddd||!this.supports3d)&&this.layerElement.appendChild(s)}else this.addTo3dContainer(s,i)}},HybridRendererBase.prototype.createShape=function(e){return this.supports3d?new HShapeElement(e,this.globalData,this):new SVGShapeElement(e,this.globalData,this)},HybridRendererBase.prototype.createText=function(e){return this.supports3d?new HTextElement(e,this.globalData,this):new SVGTextLottieElement(e,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(e){return this.camera=new HCameraElement(e,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(e){return this.supports3d?new HImageElement(e,this.globalData,this):new IImageElement(e,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(e){return this.supports3d?new HSolidElement(e,this.globalData,this):new ISolidElement(e,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(e){for(var i=0,s=this.threeDElements.length;i<s;){if(this.threeDElements[i].startPos<=e&&this.threeDElements[i].endPos>=e)return this.threeDElements[i].perspectiveElem;i+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(e,i){var s=createTag("div"),a,o;styleDiv(s);var c=createTag("div");if(styleDiv(c),i==="3d"){a=s.style,a.width=this.globalData.compSize.w+"px",a.height=this.globalData.compSize.h+"px";var d="50% 50%";a.webkitTransformOrigin=d,a.mozTransformOrigin=d,a.transformOrigin=d,o=c.style;var g="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";o.transform=g,o.webkitTransform=g}s.appendChild(c);var _={container:c,perspectiveElem:s,startPos:e,endPos:e,type:i};return this.threeDElements.push(_),_},HybridRendererBase.prototype.build3dContainers=function(){var e,i=this.layers.length,s,a="";for(e=0;e<i;e+=1)this.layers[e].ddd&&this.layers[e].ty!==3?(a!=="3d"&&(a="3d",s=this.createThreeDContainer(e,"3d")),s.endPos=Math.max(s.endPos,e)):(a!=="2d"&&(a="2d",s=this.createThreeDContainer(e,"2d")),s.endPos=Math.max(s.endPos,e));for(i=this.threeDElements.length,e=i-1;e>=0;e-=1)this.resizerElem.appendChild(this.threeDElements[e].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(e,i){for(var s=0,a=this.threeDElements.length;s<a;){if(i<=this.threeDElements[s].endPos){for(var o=this.threeDElements[s].startPos,c;o<i;)this.elements[o]&&this.elements[o].getBaseElement&&(c=this.elements[o].getBaseElement()),o+=1;c?this.threeDElements[s].container.insertBefore(e,c):this.threeDElements[s].container.appendChild(e);break}s+=1}},HybridRendererBase.prototype.configAnimation=function(e){var i=createTag("div"),s=this.animationItem.wrapper,a=i.style;a.width=e.w+"px",a.height=e.h+"px",this.resizerElem=i,styleDiv(i),a.transformStyle="flat",a.mozTransformStyle="flat",a.webkitTransformStyle="flat",this.renderConfig.className&&i.setAttribute("class",this.renderConfig.className),s.appendChild(i),a.overflow="hidden";var o=createNS("svg");o.setAttribute("width","1"),o.setAttribute("height","1"),styleDiv(o),this.resizerElem.appendChild(o);var c=createNS("defs");o.appendChild(c),this.data=e,this.setupGlobalData(e,o),this.globalData.defs=c,this.layers=e.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var e,i=this.layers?this.layers.length:0;for(e=0;e<i;e+=1)this.elements[e]&&this.elements[e].destroy&&this.elements[e].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var e=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight,s=e/i,a=this.globalData.compSize.w/this.globalData.compSize.h,o,c,d,g;a>s?(o=e/this.globalData.compSize.w,c=e/this.globalData.compSize.w,d=0,g=(i-this.globalData.compSize.h*(e/this.globalData.compSize.w))/2):(o=i/this.globalData.compSize.h,c=i/this.globalData.compSize.h,d=(e-this.globalData.compSize.w*(i/this.globalData.compSize.h))/2,g=0);var _=this.resizerElem.style;_.webkitTransform="matrix3d("+o+",0,0,0,0,"+c+",0,0,0,0,1,0,"+d+","+g+",0,1)",_.transform=_.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var e=this.globalData.compSize.w,i=this.globalData.compSize.h,s,a=this.threeDElements.length;for(s=0;s<a;s+=1){var o=this.threeDElements[s].perspectiveElem.style;o.webkitPerspective=Math.sqrt(Math.pow(e,2)+Math.pow(i,2))+"px",o.perspective=o.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(e){var i,s=e.length,a=createTag("div");for(i=0;i<s;i+=1)if(e[i].xt){var o=this.createComp(e[i],a,this.globalData.comp,null);o.initExpressions(),this.globalData.projectInterface.registerComposition(o)}};function HCompElement(e,i,s){this.layers=e.layers,this.supports3d=!e.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(e,i,s),this.tm=e.tm?PropertyFactory.getProp(this,e.tm,0,i.frameRate,this):{_placeholder:!0}}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(e,i){for(var s=0,a;s<i;)this.elements[s]&&this.elements[s].getBaseElement&&(a=this.elements[s].getBaseElement()),s+=1;a?this.layerElement.insertBefore(e,a):this.layerElement.appendChild(e)},HCompElement.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)};function HybridRenderer(e,i){this.animationItem=e,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:i&&i.className||"",imagePreserveAspectRatio:i&&i.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(i&&i.hideOnTransparent===!1),filterSize:{width:i&&i.filterSize&&i.filterSize.width||"400%",height:i&&i.filterSize&&i.filterSize.height||"400%",x:i&&i.filterSize&&i.filterSize.x||"-100%",y:i&&i.filterSize&&i.filterSize.y||"-100%"},runExpressions:!i||i.runExpressions===void 0||i.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(e){return this.supports3d?new HCompElement(e,this.globalData,this):new SVGCompElement(e,this.globalData,this)};var CompExpressionInterface=function(){return function(e){function i(s){for(var a=0,o=e.layers.length;a<o;){if(e.layers[a].nm===s||e.layers[a].ind===s)return e.elements[a].layerInterface;a+=1}return null}return Object.defineProperty(i,"_name",{value:e.data.nm}),i.layer=i,i.pixelAspect=1,i.height=e.data.h||e.globalData.compSize.h,i.width=e.data.w||e.globalData.compSize.w,i.pixelAspect=1,i.frameDuration=1/e.globalData.frameRate,i.displayStartTime=0,i.numLayers=e.layers.length,i}}();function _typeof$2(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$2=function(s){return typeof s}:_typeof$2=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof$2(e)}function seedRandom(e,i){var s=this,a=256,o=6,c=52,d="random",g=i.pow(a,o),_=i.pow(2,c),b=_*2,j=a-1,nt;function tt(_e,st,ft){var lt=[];st=st===!0?{entropy:!0}:st||{};var ct=ut(rt(st.entropy?[_e,et(e)]:_e===null?$():_e,3),lt),dt=new at(lt),gt=function(){for(var _t=dt.g(o),Pt=g,bt=0;_t<_;)_t=(_t+bt)*a,Pt*=a,bt=dt.g(1);for(;_t>=b;)_t/=2,Pt/=2,bt>>>=1;return(_t+bt)/Pt};return gt.int32=function(){return dt.g(4)|0},gt.quick=function(){return dt.g(4)/4294967296},gt.double=gt,ut(et(dt.S),e),(st.pass||ft||function(Ct,_t,Pt,bt){return bt&&(bt.S&&it(bt,dt),Ct.state=function(){return it(dt,{})}),Pt?(i[d]=Ct,_t):Ct})(gt,ct,"global"in st?st.global:this==i,st.state)}i["seed"+d]=tt;function at(_e){var st,ft=_e.length,lt=this,ct=0,dt=lt.i=lt.j=0,gt=lt.S=[];for(ft||(_e=[ft++]);ct<a;)gt[ct]=ct++;for(ct=0;ct<a;ct++)gt[ct]=gt[dt=j&dt+_e[ct%ft]+(st=gt[ct])],gt[dt]=st;lt.g=function(Ct){for(var _t,Pt=0,bt=lt.i,Mt=lt.j,wt=lt.S;Ct--;)_t=wt[bt=j&bt+1],Pt=Pt*a+wt[j&(wt[bt]=wt[Mt=j&Mt+_t])+(wt[Mt]=_t)];return lt.i=bt,lt.j=Mt,Pt}}function it(_e,st){return st.i=_e.i,st.j=_e.j,st.S=_e.S.slice(),st}function rt(_e,st){var ft=[],lt=_typeof$2(_e),ct;if(st&&lt=="object")for(ct in _e)try{ft.push(rt(_e[ct],st-1))}catch{}return ft.length?ft:lt=="string"?_e:_e+"\0"}function ut(_e,st){for(var ft=_e+"",lt,ct=0;ct<ft.length;)st[j&ct]=j&(lt^=st[j&ct]*19)+ft.charCodeAt(ct++);return et(st)}function $(){try{var _e=new Uint8Array(a);return(s.crypto||s.msCrypto).getRandomValues(_e),et(_e)}catch{var st=s.navigator,ft=st&&st.plugins;return[+new Date,s,ft,s.screen,et(e)]}}function et(_e){return String.fromCharCode.apply(0,_e)}ut(i.random(),e)}function initialize$2(e){seedRandom([],e)}var propTypes={SHAPE:"shape"};function _typeof$1(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$1=function(s){return typeof s}:_typeof$1=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof$1(e)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(e){return e.constructor===Array||e.constructor===Float32Array}function isNumerable(e,i){return e==="number"||i instanceof Number||e==="boolean"||e==="string"}function $bm_neg(e){var i=_typeof$1(e);if(i==="number"||e instanceof Number||i==="boolean")return-e;if($bm_isInstanceOfArray(e)){var s,a=e.length,o=[];for(s=0;s<a;s+=1)o[s]=-e[s];return o}return e.propType?e.v:-e}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(e,i){var s=_typeof$1(e),a=_typeof$1(i);if(isNumerable(s,e)&&isNumerable(a,i)||s==="string"||a==="string")return e+i;if($bm_isInstanceOfArray(e)&&isNumerable(a,i))return e=e.slice(0),e[0]+=i,e;if(isNumerable(s,e)&&$bm_isInstanceOfArray(i))return i=i.slice(0),i[0]=e+i[0],i;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(i)){for(var o=0,c=e.length,d=i.length,g=[];o<c||o<d;)(typeof e[o]=="number"||e[o]instanceof Number)&&(typeof i[o]=="number"||i[o]instanceof Number)?g[o]=e[o]+i[o]:g[o]=i[o]===void 0?e[o]:e[o]||i[o],o+=1;return g}return 0}var add=sum;function sub(e,i){var s=_typeof$1(e),a=_typeof$1(i);if(isNumerable(s,e)&&isNumerable(a,i))return s==="string"&&(e=parseInt(e,10)),a==="string"&&(i=parseInt(i,10)),e-i;if($bm_isInstanceOfArray(e)&&isNumerable(a,i))return e=e.slice(0),e[0]-=i,e;if(isNumerable(s,e)&&$bm_isInstanceOfArray(i))return i=i.slice(0),i[0]=e-i[0],i;if($bm_isInstanceOfArray(e)&&$bm_isInstanceOfArray(i)){for(var o=0,c=e.length,d=i.length,g=[];o<c||o<d;)(typeof e[o]=="number"||e[o]instanceof Number)&&(typeof i[o]=="number"||i[o]instanceof Number)?g[o]=e[o]-i[o]:g[o]=i[o]===void 0?e[o]:e[o]||i[o],o+=1;return g}return 0}function mul(e,i){var s=_typeof$1(e),a=_typeof$1(i),o;if(isNumerable(s,e)&&isNumerable(a,i))return e*i;var c,d;if($bm_isInstanceOfArray(e)&&isNumerable(a,i)){for(d=e.length,o=createTypedArray("float32",d),c=0;c<d;c+=1)o[c]=e[c]*i;return o}if(isNumerable(s,e)&&$bm_isInstanceOfArray(i)){for(d=i.length,o=createTypedArray("float32",d),c=0;c<d;c+=1)o[c]=e*i[c];return o}return 0}function div(e,i){var s=_typeof$1(e),a=_typeof$1(i),o;if(isNumerable(s,e)&&isNumerable(a,i))return e/i;var c,d;if($bm_isInstanceOfArray(e)&&isNumerable(a,i)){for(d=e.length,o=createTypedArray("float32",d),c=0;c<d;c+=1)o[c]=e[c]/i;return o}if(isNumerable(s,e)&&$bm_isInstanceOfArray(i)){for(d=i.length,o=createTypedArray("float32",d),c=0;c<d;c+=1)o[c]=e/i[c];return o}return 0}function mod(e,i){return typeof e=="string"&&(e=parseInt(e,10)),typeof i=="string"&&(i=parseInt(i,10)),e%i}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(e,i,s){if(i>s){var a=s;s=i,i=a}return Math.min(Math.max(e,i),s)}function radiansToDegrees(e){return e/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(e){return e*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(e,i){if(typeof e=="number"||e instanceof Number)return i=i||0,Math.abs(e-i);i||(i=helperLengthArray);var s,a=Math.min(e.length,i.length),o=0;for(s=0;s<a;s+=1)o+=Math.pow(i[s]-e[s],2);return Math.sqrt(o)}function normalize(e){return div(e,length(e))}function rgbToHsl(e){var i=e[0],s=e[1],a=e[2],o=Math.max(i,s,a),c=Math.min(i,s,a),d,g,_=(o+c)/2;if(o===c)d=0,g=0;else{var b=o-c;switch(g=_>.5?b/(2-o-c):b/(o+c),o){case i:d=(s-a)/b+(s<a?6:0);break;case s:d=(a-i)/b+2;break;case a:d=(i-s)/b+4;break}d/=6}return[d,g,_,e[3]]}function hue2rgb(e,i,s){return s<0&&(s+=1),s>1&&(s-=1),s<1/6?e+(i-e)*6*s:s<1/2?i:s<2/3?e+(i-e)*(2/3-s)*6:e}function hslToRgb(e){var i=e[0],s=e[1],a=e[2],o,c,d;if(s===0)o=a,d=a,c=a;else{var g=a<.5?a*(1+s):a+s-a*s,_=2*a-g;o=hue2rgb(_,g,i+1/3),c=hue2rgb(_,g,i),d=hue2rgb(_,g,i-1/3)}return[o,c,d,e[3]]}function linear(e,i,s,a,o){if((a===void 0||o===void 0)&&(a=i,o=s,i=0,s=1),s<i){var c=s;s=i,i=c}if(e<=i)return a;if(e>=s)return o;var d=s===i?0:(e-i)/(s-i);if(!a.length)return a+(o-a)*d;var g,_=a.length,b=createTypedArray("float32",_);for(g=0;g<_;g+=1)b[g]=a[g]+(o[g]-a[g])*d;return b}function random(e,i){if(i===void 0&&(e===void 0?(e=0,i=1):(i=e,e=void 0)),i.length){var s,a=i.length;e||(e=createTypedArray("float32",a));var o=createTypedArray("float32",a),c=BMMath.random();for(s=0;s<a;s+=1)o[s]=e[s]+c*(i[s]-e[s]);return o}e===void 0&&(e=0);var d=BMMath.random();return e+d*(i-e)}function createPath(e,i,s,a){var o,c=e.length,d=shapePool.newElement();d.setPathData(!!a,c);var g=[0,0],_,b;for(o=0;o<c;o+=1)_=i&&i[o]?i[o]:g,b=s&&s[o]?s[o]:g,d.setTripleAt(e[o][0],e[o][1],b[0]+e[o][0],b[1]+e[o][1],_[0]+e[o][0],_[1]+e[o][1],o,!0);return d}function initiateExpression(elem,data,property){function noOp(e){return e}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=val.indexOf("random")!==-1,elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||this.data.hd!==!0,wiggle=(function e(i,s){var a,o,c=this.pv.length?this.pv.length:1,d=createTypedArray("float32",c);i=5;var g=Math.floor(time*i);for(a=0,o=0;a<g;){for(o=0;o<c;o+=1)d[o]+=-s+s*2*BMMath.random();a+=1}var _=time*i,b=_-Math.floor(_),j=createTypedArray("float32",c);if(c>1){for(o=0;o<c;o+=1)j[o]=this.pv[o]+d[o]+(-s+s*2*BMMath.random())*b;return j}return this.pv+d[0]+(-s+s*2*BMMath.random())*b}).bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty));function loopInDuration(e,i){return loopIn(e,i,!0)}function loopOutDuration(e,i){return loopOut(e,i,!0)}this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(e,i){var s=[i[0]-e[0],i[1]-e[1],i[2]-e[2]],a=Math.atan2(s[0],Math.sqrt(s[1]*s[1]+s[2]*s[2]))/degToRads,o=-Math.atan2(s[1],s[2])/degToRads;return[o,a,0]}function easeOut(e,i,s,a,o){return applyEase(easeOutBez,e,i,s,a,o)}function easeIn(e,i,s,a,o){return applyEase(easeInBez,e,i,s,a,o)}function ease(e,i,s,a,o){return applyEase(easeInOutBez,e,i,s,a,o)}function applyEase(e,i,s,a,o,c){o===void 0?(o=s,c=a):i=(i-s)/(a-s),i>1?i=1:i<0&&(i=0);var d=e(i);if($bm_isInstanceOfArray(o)){var g,_=o.length,b=createTypedArray("float32",_);for(g=0;g<_;g+=1)b[g]=(c[g]-o[g])*d+o[g];return b}return(c-o)*d+o}function nearestKey(e){var i,s=data.k.length,a,o;if(!data.k.length||typeof data.k[0]=="number")a=0,o=0;else if(a=-1,e*=elem.comp.globalData.frameRate,e<data.k[0].t)a=1,o=data.k[0].t;else{for(i=0;i<s-1;i+=1)if(e===data.k[i].t){a=i+1,o=data.k[i].t;break}else if(e>data.k[i].t&&e<data.k[i+1].t){e-data.k[i].t>data.k[i+1].t-e?(a=i+2,o=data.k[i+1].t):(a=i+1,o=data.k[i].t);break}a===-1&&(a=i+1,o=data.k[i].t)}var c={};return c.index=a,c.time=o/elem.comp.globalData.frameRate,c}function key(e){var i,s,a;if(!data.k.length||typeof data.k[0]=="number")throw new Error("The property has no keyframe at index "+e);e-=1,i={time:data.k[e].t/elem.comp.globalData.frameRate,value:[]};var o=Object.prototype.hasOwnProperty.call(data.k[e],"s")?data.k[e].s:data.k[e-1].e;for(a=o.length,s=0;s<a;s+=1)i[s]=o[s],i.value[s]=o[s];return i}function framesToTime(e,i){return i||(i=elem.comp.globalData.frameRate),e/i}function timeToFrames(e,i){return!e&&e!==0&&(e=time),i||(i=elem.comp.globalData.frameRate),e*i}function seedRandom(e){BMMath.seedrandom(randSeed+e)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(e,i){return typeof value=="string"?i===void 0?value.substring(e):value.substring(e,i):""}function substr(e,i){return typeof value=="string"?i===void 0?value.substr(e):value.substr(e,i):""}function posterizeTime(e){time=e===0?0:Math.floor(time*e)/e,value=valueAtTime(time)}var time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!!(elem.hierarchy&&elem.hierarchy.length),parent,randSeed=Math.floor(Math.random()*1e6),globalData=elem.globalData;function executeExpression(e){return value=e,this.frameExpressionId===elem.globalData.frameId&&this.propType!=="textSelector"?value:(this.propType==="textSelector"&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),elemType===4&&!content&&(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!!(elem.hierarchy&&elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt,scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var e={};e.initExpressions=i,e.resetFrame=ExpressionManager.resetFrame;function i(s){var a=0,o=[];function c(){a+=1}function d(){a-=1,a===0&&_()}function g(b){o.indexOf(b)===-1&&o.push(b)}function _(){var b,j=o.length;for(b=0;b<j;b+=1)o[b].release();o.length=0}s.renderer.compInterface=CompExpressionInterface(s.renderer),s.renderer.globalData.projectInterface.registerComposition(s.renderer),s.renderer.globalData.pushExpression=c,s.renderer.globalData.popExpression=d,s.renderer.globalData.registerExpressionProperty=g}return e}(),MaskManagerInterface=function(){function e(s,a){this._mask=s,this._data=a}Object.defineProperty(e.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(e.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),this._mask.op.v*100}});var i=function(a){var o=createSizedArray(a.viewData.length),c,d=a.viewData.length;for(c=0;c<d;c+=1)o[c]=new e(a.viewData[c],a.masksProperties[c]);var g=function(b){for(c=0;c<d;){if(a.masksProperties[c].nm===b)return o[c];c+=1}return null};return g};return i}(),ExpressionPropertyInterface=function(){var e={pv:0,v:0,mult:1},i={pv:[0,0,0],v:[0,0,0],mult:1};function s(d,g,_){Object.defineProperty(d,"velocity",{get:function(){return g.getVelocityAtTime(g.comp.currentFrame)}}),d.numKeys=g.keyframes?g.keyframes.length:0,d.key=function(b){if(!d.numKeys)return 0;var j="";"s"in g.keyframes[b-1]?j=g.keyframes[b-1].s:"e"in g.keyframes[b-2]?j=g.keyframes[b-2].e:j=g.keyframes[b-2].s;var nt=_==="unidimensional"?new Number(j):Object.assign({},j);return nt.time=g.keyframes[b-1].t/g.elem.comp.globalData.frameRate,nt.value=_==="unidimensional"?j[0]:j,nt},d.valueAtTime=g.getValueAtTime,d.speedAtTime=g.getSpeedAtTime,d.velocityAtTime=g.getVelocityAtTime,d.propertyGroup=g.propertyGroup}function a(d){(!d||!("pv"in d))&&(d=e);var g=1/d.mult,_=d.pv*g,b=new Number(_);return b.value=_,s(b,d,"unidimensional"),function(){return d.k&&d.getValue(),_=d.v*g,b.value!==_&&(b=new Number(_),b.value=_,s(b,d,"unidimensional")),b}}function o(d){(!d||!("pv"in d))&&(d=i);var g=1/d.mult,_=d.data&&d.data.l||d.pv.length,b=createTypedArray("float32",_),j=createTypedArray("float32",_);return b.value=j,s(b,d,"multidimensional"),function(){d.k&&d.getValue();for(var nt=0;nt<_;nt+=1)j[nt]=d.v[nt]*g,b[nt]=j[nt];return b}}function c(){return e}return function(d){return d?d.propType==="unidimensional"?a(d):o(d):c}}(),TransformExpressionInterface=function(){return function(e){function i(d){switch(d){case"scale":case"Scale":case"ADBE Scale":case 6:return i.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return i.rotation;case"ADBE Rotate X":return i.xRotation;case"ADBE Rotate Y":return i.yRotation;case"position":case"Position":case"ADBE Position":case 2:return i.position;case"ADBE Position_0":return i.xPosition;case"ADBE Position_1":return i.yPosition;case"ADBE Position_2":return i.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return i.anchorPoint;case"opacity":case"Opacity":case 11:return i.opacity;default:return null}}Object.defineProperty(i,"rotation",{get:ExpressionPropertyInterface(e.r||e.rz)}),Object.defineProperty(i,"zRotation",{get:ExpressionPropertyInterface(e.rz||e.r)}),Object.defineProperty(i,"xRotation",{get:ExpressionPropertyInterface(e.rx)}),Object.defineProperty(i,"yRotation",{get:ExpressionPropertyInterface(e.ry)}),Object.defineProperty(i,"scale",{get:ExpressionPropertyInterface(e.s)});var s,a,o,c;return e.p?c=ExpressionPropertyInterface(e.p):(s=ExpressionPropertyInterface(e.px),a=ExpressionPropertyInterface(e.py),e.pz&&(o=ExpressionPropertyInterface(e.pz))),Object.defineProperty(i,"position",{get:function(){return e.p?c():[s(),a(),o?o():0]}}),Object.defineProperty(i,"xPosition",{get:ExpressionPropertyInterface(e.px)}),Object.defineProperty(i,"yPosition",{get:ExpressionPropertyInterface(e.py)}),Object.defineProperty(i,"zPosition",{get:ExpressionPropertyInterface(e.pz)}),Object.defineProperty(i,"anchorPoint",{get:ExpressionPropertyInterface(e.a)}),Object.defineProperty(i,"opacity",{get:ExpressionPropertyInterface(e.o)}),Object.defineProperty(i,"skew",{get:ExpressionPropertyInterface(e.sk)}),Object.defineProperty(i,"skewAxis",{get:ExpressionPropertyInterface(e.sa)}),Object.defineProperty(i,"orientation",{get:ExpressionPropertyInterface(e.or)}),i}}(),LayerExpressionInterface=function(){function e(b){var j=new Matrix;if(b!==void 0){var nt=this._elem.finalTransform.mProp.getValueAtTime(b);nt.clone(j)}else{var tt=this._elem.finalTransform.mProp;tt.applyToMatrix(j)}return j}function i(b,j){var nt=this.getMatrix(j);return nt.props[12]=0,nt.props[13]=0,nt.props[14]=0,this.applyPoint(nt,b)}function s(b,j){var nt=this.getMatrix(j);return this.applyPoint(nt,b)}function a(b,j){var nt=this.getMatrix(j);return nt.props[12]=0,nt.props[13]=0,nt.props[14]=0,this.invertPoint(nt,b)}function o(b,j){var nt=this.getMatrix(j);return this.invertPoint(nt,b)}function c(b,j){if(this._elem.hierarchy&&this._elem.hierarchy.length){var nt,tt=this._elem.hierarchy.length;for(nt=0;nt<tt;nt+=1)this._elem.hierarchy[nt].finalTransform.mProp.applyToMatrix(b)}return b.applyToPointArray(j[0],j[1],j[2]||0)}function d(b,j){if(this._elem.hierarchy&&this._elem.hierarchy.length){var nt,tt=this._elem.hierarchy.length;for(nt=0;nt<tt;nt+=1)this._elem.hierarchy[nt].finalTransform.mProp.applyToMatrix(b)}return b.inversePoint(j)}function g(b){var j=new Matrix;if(j.reset(),this._elem.finalTransform.mProp.applyToMatrix(j),this._elem.hierarchy&&this._elem.hierarchy.length){var nt,tt=this._elem.hierarchy.length;for(nt=0;nt<tt;nt+=1)this._elem.hierarchy[nt].finalTransform.mProp.applyToMatrix(j);return j.inversePoint(b)}return j.inversePoint(b)}function _(){return[1,1,1,1]}return function(b){var j;function nt(rt){at.mask=new MaskManagerInterface(rt,b)}function tt(rt){at.effect=rt}function at(rt){switch(rt){case"ADBE Root Vectors Group":case"Contents":case 2:return at.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return j;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return at.effect;case"ADBE Text Properties":return at.textInterface;default:return null}}at.getMatrix=e,at.invertPoint=d,at.applyPoint=c,at.toWorld=s,at.toWorldVec=i,at.fromWorld=o,at.fromWorldVec=a,at.toComp=s,at.fromComp=g,at.sampleImage=_,at.sourceRectAtTime=b.sourceRectAtTime.bind(b),at._elem=b,j=TransformExpressionInterface(b.finalTransform.mProp);var it=getDescriptor(j,"anchorPoint");return Object.defineProperties(at,{hasParent:{get:function(){return b.hierarchy.length}},parent:{get:function(){return b.hierarchy[0].layerInterface}},rotation:getDescriptor(j,"rotation"),scale:getDescriptor(j,"scale"),position:getDescriptor(j,"position"),opacity:getDescriptor(j,"opacity"),anchorPoint:it,anchor_point:it,transform:{get:function(){return j}},active:{get:function(){return b.isInRange}}}),at.startTime=b.data.st,at.index=b.data.ind,at.source=b.data.refId,at.height=b.data.ty===0?b.data.h:100,at.width=b.data.ty===0?b.data.w:100,at.inPoint=b.data.ip/b.comp.globalData.frameRate,at.outPoint=b.data.op/b.comp.globalData.frameRate,at._name=b.data.nm,at.registerMaskInterface=nt,at.registerEffectsInterface=tt,at}}(),propertyGroupFactory=function(){return function(e,i){return function(s){return s=s===void 0?1:s,s<=0?e:i(s-1)}}}(),PropertyInterface=function(){return function(e,i){var s={_name:e};function a(o){return o=o===void 0?1:o,o<=0?s:i(o-1)}return a}}(),EffectsExpressionInterface=function(){var e={createEffectsInterface:i};function i(o,c){if(o.effectsManager){var d=[],g=o.data.ef,_,b=o.effectsManager.effectElements.length;for(_=0;_<b;_+=1)d.push(s(g[_],o.effectsManager.effectElements[_],c,o));var j=o.data.ef||[],nt=function(at){for(_=0,b=j.length;_<b;){if(at===j[_].nm||at===j[_].mn||at===j[_].ix)return d[_];_+=1}return null};return Object.defineProperty(nt,"numProperties",{get:function(){return j.length}}),nt}return null}function s(o,c,d,g){function _(at){for(var it=o.ef,rt=0,ut=it.length;rt<ut;){if(at===it[rt].nm||at===it[rt].mn||at===it[rt].ix)return it[rt].ty===5?j[rt]:j[rt]();rt+=1}throw new Error}var b=propertyGroupFactory(_,d),j=[],nt,tt=o.ef.length;for(nt=0;nt<tt;nt+=1)o.ef[nt].ty===5?j.push(s(o.ef[nt],c.effectElements[nt],c.effectElements[nt].propertyGroup,g)):j.push(a(c.effectElements[nt],o.ef[nt].ty,g,b));return o.mn==="ADBE Color Control"&&Object.defineProperty(_,"color",{get:function(){return j[0]()}}),Object.defineProperties(_,{numProperties:{get:function(){return o.np}},_name:{value:o.nm},propertyGroup:{value:b}}),_.enabled=o.en!==0,_.active=_.enabled,_}function a(o,c,d,g){var _=ExpressionPropertyInterface(o.p);function b(){return c===10?d.comp.compInterface(o.p.v):_()}return o.p.setGroupProperty&&o.p.setGroupProperty(PropertyInterface("",g)),b}return e}(),ShapePathInterface=function(){return function(i,s,a){var o=s.sh;function c(g){return g==="Shape"||g==="shape"||g==="Path"||g==="path"||g==="ADBE Vector Shape"||g===2?c.path:null}var d=propertyGroupFactory(c,a);return o.setGroupProperty(PropertyInterface("Path",d)),Object.defineProperties(c,{path:{get:function(){return o.k&&o.getValue(),o}},shape:{get:function(){return o.k&&o.getValue(),o}},_name:{value:i.nm},ix:{value:i.ix},propertyIndex:{value:i.ix},mn:{value:i.mn},propertyGroup:{value:a}}),c}}(),ShapeExpressionInterface=function(){function e(it,rt,ut){var $=[],et,_e=it?it.length:0;for(et=0;et<_e;et+=1)it[et].ty==="gr"?$.push(s(it[et],rt[et],ut)):it[et].ty==="fl"?$.push(a(it[et],rt[et],ut)):it[et].ty==="st"?$.push(d(it[et],rt[et],ut)):it[et].ty==="tm"?$.push(g(it[et],rt[et],ut)):it[et].ty==="tr"||(it[et].ty==="el"?$.push(b(it[et],rt[et],ut)):it[et].ty==="sr"?$.push(j(it[et],rt[et],ut)):it[et].ty==="sh"?$.push(ShapePathInterface(it[et],rt[et],ut)):it[et].ty==="rc"?$.push(nt(it[et],rt[et],ut)):it[et].ty==="rd"?$.push(tt(it[et],rt[et],ut)):it[et].ty==="rp"?$.push(at(it[et],rt[et],ut)):it[et].ty==="gf"?$.push(o(it[et],rt[et],ut)):$.push(c(it[et],rt[et])));return $}function i(it,rt,ut){var $,et=function(ft){for(var lt=0,ct=$.length;lt<ct;){if($[lt]._name===ft||$[lt].mn===ft||$[lt].propertyIndex===ft||$[lt].ix===ft||$[lt].ind===ft)return $[lt];lt+=1}return typeof ft=="number"?$[ft-1]:null};et.propertyGroup=propertyGroupFactory(et,ut),$=e(it.it,rt.it,et.propertyGroup),et.numProperties=$.length;var _e=_(it.it[it.it.length-1],rt.it[rt.it.length-1],et.propertyGroup);return et.transform=_e,et.propertyIndex=it.cix,et._name=it.nm,et}function s(it,rt,ut){var $=function(ft){switch(ft){case"ADBE Vectors Group":case"Contents":case 2:return $.content;default:return $.transform}};$.propertyGroup=propertyGroupFactory($,ut);var et=i(it,rt,$.propertyGroup),_e=_(it.it[it.it.length-1],rt.it[rt.it.length-1],$.propertyGroup);return $.content=et,$.transform=_e,Object.defineProperty($,"_name",{get:function(){return it.nm}}),$.numProperties=it.np,$.propertyIndex=it.ix,$.nm=it.nm,$.mn=it.mn,$}function a(it,rt,ut){function $(et){return et==="Color"||et==="color"?$.color:et==="Opacity"||et==="opacity"?$.opacity:null}return Object.defineProperties($,{color:{get:ExpressionPropertyInterface(rt.c)},opacity:{get:ExpressionPropertyInterface(rt.o)},_name:{value:it.nm},mn:{value:it.mn}}),rt.c.setGroupProperty(PropertyInterface("Color",ut)),rt.o.setGroupProperty(PropertyInterface("Opacity",ut)),$}function o(it,rt,ut){function $(et){return et==="Start Point"||et==="start point"?$.startPoint:et==="End Point"||et==="end point"?$.endPoint:et==="Opacity"||et==="opacity"?$.opacity:null}return Object.defineProperties($,{startPoint:{get:ExpressionPropertyInterface(rt.s)},endPoint:{get:ExpressionPropertyInterface(rt.e)},opacity:{get:ExpressionPropertyInterface(rt.o)},type:{get:function(){return"a"}},_name:{value:it.nm},mn:{value:it.mn}}),rt.s.setGroupProperty(PropertyInterface("Start Point",ut)),rt.e.setGroupProperty(PropertyInterface("End Point",ut)),rt.o.setGroupProperty(PropertyInterface("Opacity",ut)),$}function c(){function it(){return null}return it}function d(it,rt,ut){var $=propertyGroupFactory(ct,ut),et=propertyGroupFactory(lt,$);function _e(dt){Object.defineProperty(lt,it.d[dt].nm,{get:ExpressionPropertyInterface(rt.d.dataProps[dt].p)})}var st,ft=it.d?it.d.length:0,lt={};for(st=0;st<ft;st+=1)_e(st),rt.d.dataProps[st].p.setGroupProperty(et);function ct(dt){return dt==="Color"||dt==="color"?ct.color:dt==="Opacity"||dt==="opacity"?ct.opacity:dt==="Stroke Width"||dt==="stroke width"?ct.strokeWidth:null}return Object.defineProperties(ct,{color:{get:ExpressionPropertyInterface(rt.c)},opacity:{get:ExpressionPropertyInterface(rt.o)},strokeWidth:{get:ExpressionPropertyInterface(rt.w)},dash:{get:function(){return lt}},_name:{value:it.nm},mn:{value:it.mn}}),rt.c.setGroupProperty(PropertyInterface("Color",$)),rt.o.setGroupProperty(PropertyInterface("Opacity",$)),rt.w.setGroupProperty(PropertyInterface("Stroke Width",$)),ct}function g(it,rt,ut){function $(_e){return _e===it.e.ix||_e==="End"||_e==="end"?$.end:_e===it.s.ix?$.start:_e===it.o.ix?$.offset:null}var et=propertyGroupFactory($,ut);return $.propertyIndex=it.ix,rt.s.setGroupProperty(PropertyInterface("Start",et)),rt.e.setGroupProperty(PropertyInterface("End",et)),rt.o.setGroupProperty(PropertyInterface("Offset",et)),$.propertyIndex=it.ix,$.propertyGroup=ut,Object.defineProperties($,{start:{get:ExpressionPropertyInterface(rt.s)},end:{get:ExpressionPropertyInterface(rt.e)},offset:{get:ExpressionPropertyInterface(rt.o)},_name:{value:it.nm}}),$.mn=it.mn,$}function _(it,rt,ut){function $(_e){return it.a.ix===_e||_e==="Anchor Point"?$.anchorPoint:it.o.ix===_e||_e==="Opacity"?$.opacity:it.p.ix===_e||_e==="Position"?$.position:it.r.ix===_e||_e==="Rotation"||_e==="ADBE Vector Rotation"?$.rotation:it.s.ix===_e||_e==="Scale"?$.scale:it.sk&&it.sk.ix===_e||_e==="Skew"?$.skew:it.sa&&it.sa.ix===_e||_e==="Skew Axis"?$.skewAxis:null}var et=propertyGroupFactory($,ut);return rt.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",et)),rt.transform.mProps.p.setGroupProperty(PropertyInterface("Position",et)),rt.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",et)),rt.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",et)),rt.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",et)),rt.transform.mProps.sk&&(rt.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",et)),rt.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",et))),rt.transform.op.setGroupProperty(PropertyInterface("Opacity",et)),Object.defineProperties($,{opacity:{get:ExpressionPropertyInterface(rt.transform.mProps.o)},position:{get:ExpressionPropertyInterface(rt.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(rt.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(rt.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(rt.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(rt.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(rt.transform.mProps.sa)},_name:{value:it.nm}}),$.ty="tr",$.mn=it.mn,$.propertyGroup=ut,$}function b(it,rt,ut){function $(st){return it.p.ix===st?$.position:it.s.ix===st?$.size:null}var et=propertyGroupFactory($,ut);$.propertyIndex=it.ix;var _e=rt.sh.ty==="tm"?rt.sh.prop:rt.sh;return _e.s.setGroupProperty(PropertyInterface("Size",et)),_e.p.setGroupProperty(PropertyInterface("Position",et)),Object.defineProperties($,{size:{get:ExpressionPropertyInterface(_e.s)},position:{get:ExpressionPropertyInterface(_e.p)},_name:{value:it.nm}}),$.mn=it.mn,$}function j(it,rt,ut){function $(st){return it.p.ix===st?$.position:it.r.ix===st?$.rotation:it.pt.ix===st?$.points:it.or.ix===st||st==="ADBE Vector Star Outer Radius"?$.outerRadius:it.os.ix===st?$.outerRoundness:it.ir&&(it.ir.ix===st||st==="ADBE Vector Star Inner Radius")?$.innerRadius:it.is&&it.is.ix===st?$.innerRoundness:null}var et=propertyGroupFactory($,ut),_e=rt.sh.ty==="tm"?rt.sh.prop:rt.sh;return $.propertyIndex=it.ix,_e.or.setGroupProperty(PropertyInterface("Outer Radius",et)),_e.os.setGroupProperty(PropertyInterface("Outer Roundness",et)),_e.pt.setGroupProperty(PropertyInterface("Points",et)),_e.p.setGroupProperty(PropertyInterface("Position",et)),_e.r.setGroupProperty(PropertyInterface("Rotation",et)),it.ir&&(_e.ir.setGroupProperty(PropertyInterface("Inner Radius",et)),_e.is.setGroupProperty(PropertyInterface("Inner Roundness",et))),Object.defineProperties($,{position:{get:ExpressionPropertyInterface(_e.p)},rotation:{get:ExpressionPropertyInterface(_e.r)},points:{get:ExpressionPropertyInterface(_e.pt)},outerRadius:{get:ExpressionPropertyInterface(_e.or)},outerRoundness:{get:ExpressionPropertyInterface(_e.os)},innerRadius:{get:ExpressionPropertyInterface(_e.ir)},innerRoundness:{get:ExpressionPropertyInterface(_e.is)},_name:{value:it.nm}}),$.mn=it.mn,$}function nt(it,rt,ut){function $(st){return it.p.ix===st?$.position:it.r.ix===st?$.roundness:it.s.ix===st||st==="Size"||st==="ADBE Vector Rect Size"?$.size:null}var et=propertyGroupFactory($,ut),_e=rt.sh.ty==="tm"?rt.sh.prop:rt.sh;return $.propertyIndex=it.ix,_e.p.setGroupProperty(PropertyInterface("Position",et)),_e.s.setGroupProperty(PropertyInterface("Size",et)),_e.r.setGroupProperty(PropertyInterface("Rotation",et)),Object.defineProperties($,{position:{get:ExpressionPropertyInterface(_e.p)},roundness:{get:ExpressionPropertyInterface(_e.r)},size:{get:ExpressionPropertyInterface(_e.s)},_name:{value:it.nm}}),$.mn=it.mn,$}function tt(it,rt,ut){function $(st){return it.r.ix===st||st==="Round Corners 1"?$.radius:null}var et=propertyGroupFactory($,ut),_e=rt;return $.propertyIndex=it.ix,_e.rd.setGroupProperty(PropertyInterface("Radius",et)),Object.defineProperties($,{radius:{get:ExpressionPropertyInterface(_e.rd)},_name:{value:it.nm}}),$.mn=it.mn,$}function at(it,rt,ut){function $(st){return it.c.ix===st||st==="Copies"?$.copies:it.o.ix===st||st==="Offset"?$.offset:null}var et=propertyGroupFactory($,ut),_e=rt;return $.propertyIndex=it.ix,_e.c.setGroupProperty(PropertyInterface("Copies",et)),_e.o.setGroupProperty(PropertyInterface("Offset",et)),Object.defineProperties($,{copies:{get:ExpressionPropertyInterface(_e.c)},offset:{get:ExpressionPropertyInterface(_e.o)},_name:{value:it.nm}}),$.mn=it.mn,$}return function(it,rt,ut){var $;function et(st){if(typeof st=="number")return st=st===void 0?1:st,st===0?ut:$[st-1];for(var ft=0,lt=$.length;ft<lt;){if($[ft]._name===st)return $[ft];ft+=1}return null}function _e(){return ut}return et.propertyGroup=propertyGroupFactory(et,_e),$=e(it,rt,et.propertyGroup),et.numProperties=$.length,et._name="Contents",et}}(),TextExpressionInterface=function(){return function(e){var i;function s(a){switch(a){case"ADBE Text Document":return s.sourceText;default:return null}}return Object.defineProperty(s,"sourceText",{get:function(){e.textProperty.getValue();var o=e.textProperty.currentData.t;return(!i||o!==i.value)&&(i=new String(o),i.value=o||new String(o),Object.defineProperty(i,"style",{get:function(){return{fillColor:e.textProperty.currentData.fc}}})),i}}),s}}();function _typeof(e){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(s){return typeof s}:_typeof=function(s){return s&&typeof Symbol=="function"&&s.constructor===Symbol&&s!==Symbol.prototype?"symbol":typeof s},_typeof(e)}var FootageInterface=function(){var e=function(a){var o="",c=a.getFootageData();function d(){return o="",c=a.getFootageData(),g}function g(_){if(c[_])return o=_,c=c[_],_typeof(c)==="object"?g:c;var b=_.indexOf(o);if(b!==-1){var j=parseInt(_.substr(b+o.length),10);return c=c[j],_typeof(c)==="object"?g:c}return""}return d},i=function(a){function o(c){return c==="Outline"?o.outlineInterface():null}return o._name="Outline",o.outlineInterface=e(a),o};return function(s){function a(o){return o==="Data"?a.dataInterface:null}return a._name="Data",a.dataInterface=i(s),a}}(),interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(e){return interfaces[e]||null}var expressionHelpers=function(){function e(d,g,_){g.x&&(_.k=!0,_.x=!0,_.initiateExpression=ExpressionManager.initiateExpression,_.effectsSequence.push(_.initiateExpression(d,g,_).bind(_)))}function i(d){return d*=this.elem.globalData.frameRate,d-=this.offsetTime,d!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<d?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(d,this._cachingAtTime),this._cachingAtTime.lastFrame=d),this._cachingAtTime.value}function s(d){var g=-.01,_=this.getValueAtTime(d),b=this.getValueAtTime(d+g),j=0;if(_.length){var nt;for(nt=0;nt<_.length;nt+=1)j+=Math.pow(b[nt]-_[nt],2);j=Math.sqrt(j)*100}else j=0;return j}function a(d){if(this.vel!==void 0)return this.vel;var g=-.001,_=this.getValueAtTime(d),b=this.getValueAtTime(d+g),j;if(_.length){j=createTypedArray("float32",_.length);var nt;for(nt=0;nt<_.length;nt+=1)j[nt]=(b[nt]-_[nt])/g}else j=(b-_)/g;return j}function o(){return this.pv}function c(d){this.propertyGroup=d}return{searchExpressions:e,getSpeedAtTime:s,getVelocityAtTime:a,getValueAtTime:i,getStaticValueAtTime:o,setGroupProperty:c}}();function addPropertyDecorator(){function e(tt,at,it){if(!this.k||!this.keyframes)return this.pv;tt=tt?tt.toLowerCase():"";var rt=this.comp.renderedFrame,ut=this.keyframes,$=ut[ut.length-1].t;if(rt<=$)return this.pv;var et,_e;it?(at?et=Math.abs($-this.elem.comp.globalData.frameRate*at):et=Math.max(0,$-this.elem.data.ip),_e=$-et):((!at||at>ut.length-1)&&(at=ut.length-1),_e=ut[ut.length-1-at].t,et=$-_e);var st,ft,lt;if(tt==="pingpong"){var ct=Math.floor((rt-_e)/et);if(ct%2!==0)return this.getValueAtTime((et-(rt-_e)%et+_e)/this.comp.globalData.frameRate,0)}else if(tt==="offset"){var dt=this.getValueAtTime(_e/this.comp.globalData.frameRate,0),gt=this.getValueAtTime($/this.comp.globalData.frameRate,0),Ct=this.getValueAtTime(((rt-_e)%et+_e)/this.comp.globalData.frameRate,0),_t=Math.floor((rt-_e)/et);if(this.pv.length){for(lt=new Array(dt.length),ft=lt.length,st=0;st<ft;st+=1)lt[st]=(gt[st]-dt[st])*_t+Ct[st];return lt}return(gt-dt)*_t+Ct}else if(tt==="continue"){var Pt=this.getValueAtTime($/this.comp.globalData.frameRate,0),bt=this.getValueAtTime(($-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(lt=new Array(Pt.length),ft=lt.length,st=0;st<ft;st+=1)lt[st]=Pt[st]+(Pt[st]-bt[st])*((rt-$)/this.comp.globalData.frameRate)/5e-4;return lt}return Pt+(Pt-bt)*((rt-$)/.001)}return this.getValueAtTime(((rt-_e)%et+_e)/this.comp.globalData.frameRate,0)}function i(tt,at,it){if(!this.k)return this.pv;tt=tt?tt.toLowerCase():"";var rt=this.comp.renderedFrame,ut=this.keyframes,$=ut[0].t;if(rt>=$)return this.pv;var et,_e;it?(at?et=Math.abs(this.elem.comp.globalData.frameRate*at):et=Math.max(0,this.elem.data.op-$),_e=$+et):((!at||at>ut.length-1)&&(at=ut.length-1),_e=ut[at].t,et=_e-$);var st,ft,lt;if(tt==="pingpong"){var ct=Math.floor(($-rt)/et);if(ct%2===0)return this.getValueAtTime((($-rt)%et+$)/this.comp.globalData.frameRate,0)}else if(tt==="offset"){var dt=this.getValueAtTime($/this.comp.globalData.frameRate,0),gt=this.getValueAtTime(_e/this.comp.globalData.frameRate,0),Ct=this.getValueAtTime((et-($-rt)%et+$)/this.comp.globalData.frameRate,0),_t=Math.floor(($-rt)/et)+1;if(this.pv.length){for(lt=new Array(dt.length),ft=lt.length,st=0;st<ft;st+=1)lt[st]=Ct[st]-(gt[st]-dt[st])*_t;return lt}return Ct-(gt-dt)*_t}else if(tt==="continue"){var Pt=this.getValueAtTime($/this.comp.globalData.frameRate,0),bt=this.getValueAtTime(($+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(lt=new Array(Pt.length),ft=lt.length,st=0;st<ft;st+=1)lt[st]=Pt[st]+(Pt[st]-bt[st])*($-rt)/.001;return lt}return Pt+(Pt-bt)*($-rt)/.001}return this.getValueAtTime((et-(($-rt)%et+$))/this.comp.globalData.frameRate,0)}function s(tt,at){if(!this.k)return this.pv;if(tt=(tt||.4)*.5,at=Math.floor(at||5),at<=1)return this.pv;var it=this.comp.renderedFrame/this.comp.globalData.frameRate,rt=it-tt,ut=it+tt,$=at>1?(ut-rt)/(at-1):1,et=0,_e=0,st;this.pv.length?st=createTypedArray("float32",this.pv.length):st=0;for(var ft;et<at;){if(ft=this.getValueAtTime(rt+et*$),this.pv.length)for(_e=0;_e<this.pv.length;_e+=1)st[_e]+=ft[_e];else st+=ft;et+=1}if(this.pv.length)for(_e=0;_e<this.pv.length;_e+=1)st[_e]/=at;else st/=at;return st}function a(tt){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var at=this._transformCachingAtTime.v;if(at.cloneFromProps(this.pre.props),this.appliedTransformations<1){var it=this.a.getValueAtTime(tt);at.translate(-it[0]*this.a.mult,-it[1]*this.a.mult,it[2]*this.a.mult)}if(this.appliedTransformations<2){var rt=this.s.getValueAtTime(tt);at.scale(rt[0]*this.s.mult,rt[1]*this.s.mult,rt[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var ut=this.sk.getValueAtTime(tt),$=this.sa.getValueAtTime(tt);at.skewFromAxis(-ut*this.sk.mult,$*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var et=this.r.getValueAtTime(tt);at.rotate(-et*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var _e=this.rz.getValueAtTime(tt),st=this.ry.getValueAtTime(tt),ft=this.rx.getValueAtTime(tt),lt=this.or.getValueAtTime(tt);at.rotateZ(-_e*this.rz.mult).rotateY(st*this.ry.mult).rotateX(ft*this.rx.mult).rotateZ(-lt[2]*this.or.mult).rotateY(lt[1]*this.or.mult).rotateX(lt[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var ct=this.px.getValueAtTime(tt),dt=this.py.getValueAtTime(tt);if(this.data.p.z){var gt=this.pz.getValueAtTime(tt);at.translate(ct*this.px.mult,dt*this.py.mult,-gt*this.pz.mult)}else at.translate(ct*this.px.mult,dt*this.py.mult,0)}else{var Ct=this.p.getValueAtTime(tt);at.translate(Ct[0]*this.p.mult,Ct[1]*this.p.mult,-Ct[2]*this.p.mult)}return at}function o(){return this.v.clone(new Matrix)}var c=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(tt,at,it){var rt=c(tt,at,it);return rt.dynamicProperties.length?rt.getValueAtTime=a.bind(rt):rt.getValueAtTime=o.bind(rt),rt.setGroupProperty=expressionHelpers.setGroupProperty,rt};var d=PropertyFactory.getProp;PropertyFactory.getProp=function(tt,at,it,rt,ut){var $=d(tt,at,it,rt,ut);$.kf?$.getValueAtTime=expressionHelpers.getValueAtTime.bind($):$.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind($),$.setGroupProperty=expressionHelpers.setGroupProperty,$.loopOut=e,$.loopIn=i,$.smooth=s,$.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind($),$.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind($),$.numKeys=at.a===1?at.k.length:0,$.propertyIndex=at.ix;var et=0;return it!==0&&(et=createTypedArray("float32",at.a===1?at.k[0].s.length:at.k.length)),$._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:et},expressionHelpers.searchExpressions(tt,at,$),$.k&&ut.addDynamicProperty($),$};function g(tt){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),tt*=this.elem.globalData.frameRate,tt-=this.offsetTime,tt!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<tt?this._caching.lastIndex:0,this._cachingAtTime.lastTime=tt,this.interpolateShape(tt,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}var _=ShapePropertyFactory.getConstructorFunction(),b=ShapePropertyFactory.getKeyframedConstructorFunction();function j(){}j.prototype={vertices:function(at,it){this.k&&this.getValue();var rt=this.v;it!==void 0&&(rt=this.getValueAtTime(it,0));var ut,$=rt._length,et=rt[at],_e=rt.v,st=createSizedArray($);for(ut=0;ut<$;ut+=1)at==="i"||at==="o"?st[ut]=[et[ut][0]-_e[ut][0],et[ut][1]-_e[ut][1]]:st[ut]=[et[ut][0],et[ut][1]];return st},points:function(at){return this.vertices("v",at)},inTangents:function(at){return this.vertices("i",at)},outTangents:function(at){return this.vertices("o",at)},isClosed:function(){return this.v.c},pointOnPath:function(at,it){var rt=this.v;it!==void 0&&(rt=this.getValueAtTime(it,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(rt));for(var ut=this._segmentsLength,$=ut.lengths,et=ut.totalLength*at,_e=0,st=$.length,ft=0,lt;_e<st;){if(ft+$[_e].addedLength>et){var ct=_e,dt=rt.c&&_e===st-1?0:_e+1,gt=(et-ft)/$[_e].addedLength;lt=bez.getPointInSegment(rt.v[ct],rt.v[dt],rt.o[ct],rt.i[dt],gt,$[_e]);break}else ft+=$[_e].addedLength;_e+=1}return lt||(lt=rt.c?[rt.v[0][0],rt.v[0][1]]:[rt.v[rt._length-1][0],rt.v[rt._length-1][1]]),lt},vectorOnPath:function(at,it,rt){at==1?at=this.v.c:at==0&&(at=.999);var ut=this.pointOnPath(at,it),$=this.pointOnPath(at+.001,it),et=$[0]-ut[0],_e=$[1]-ut[1],st=Math.sqrt(Math.pow(et,2)+Math.pow(_e,2));if(st===0)return[0,0];var ft=rt==="tangent"?[et/st,_e/st]:[-_e/st,et/st];return ft},tangentOnPath:function(at,it){return this.vectorOnPath(at,it,"tangent")},normalOnPath:function(at,it){return this.vectorOnPath(at,it,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([j],_),extendPrototype([j],b),b.prototype.getValueAtTime=g,b.prototype.initiateExpression=ExpressionManager.initiateExpression;var nt=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(tt,at,it,rt,ut){var $=nt(tt,at,it,rt,ut);return $.propertyIndex=at.ix,$.lock=!1,it===3?expressionHelpers.searchExpressions(tt,at.pt,$):it===4&&expressionHelpers.searchExpressions(tt,at.ks,$),$.k&&tt.addDynamicProperty($),$}}function initialize$1(){addPropertyDecorator()}function addDecorator(){function e(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}TextProperty.prototype.getExpressionValue=function(i,s){var a=this.calculateExpression(s);if(i.t!==a){var o={};return this.copyData(o,i),o.t=a.toString(),o.__complete=!1,o}return i},TextProperty.prototype.searchProperty=function(){var i=this.searchKeyframes(),s=this.searchExpressions();return this.kf=i||s,this.kf},TextProperty.prototype.searchExpressions=e}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function e(i,s){var a=createNS("feMerge");a.setAttribute("result",i);var o,c;for(c=0;c<s.length;c+=1)o=createNS("feMergeNode"),o.setAttribute("in",s[c]),a.appendChild(o),a.appendChild(o);return a}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(e,i,s,a,o){this.filterManager=i;var c=createNS("feColorMatrix");c.setAttribute("type","matrix"),c.setAttribute("color-interpolation-filters","linearRGB"),c.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=c,c.setAttribute("result",a+"_tint_1"),e.appendChild(c),c=createNS("feColorMatrix"),c.setAttribute("type","matrix"),c.setAttribute("color-interpolation-filters","sRGB"),c.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),c.setAttribute("result",a+"_tint_2"),e.appendChild(c),this.matrixFilter=c;var d=this.createMergeNode(a,[o,a+"_tint_1",a+"_tint_2"]);e.appendChild(d)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var i=this.filterManager.effectElements[0].p.v,s=this.filterManager.effectElements[1].p.v,a=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+a+" 0"),this.matrixFilter.setAttribute("values",s[0]-i[0]+" 0 0 0 "+i[0]+" "+(s[1]-i[1])+" 0 0 0 "+i[1]+" "+(s[2]-i[2])+" 0 0 0 "+i[2]+" 0 0 0 1 0")}};function SVGFillFilter(e,i,s,a){this.filterManager=i;var o=createNS("feColorMatrix");o.setAttribute("type","matrix"),o.setAttribute("color-interpolation-filters","sRGB"),o.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),o.setAttribute("result",a),e.appendChild(o),this.matrixFilter=o}SVGFillFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var i=this.filterManager.effectElements[2].p.v,s=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+i[0]+" 0 0 0 0 "+i[1]+" 0 0 0 0 "+i[2]+" 0 0 0 "+s+" 0")}};function SVGStrokeEffect(e,i,s){this.initialized=!1,this.filterManager=i,this.elem=s,this.paths=[]}SVGStrokeEffect.prototype.initialize=function(){var e=this.elem.layerElement.children||this.elem.layerElement.childNodes,i,s,a,o;for(this.filterManager.effectElements[1].p.v===1?(o=this.elem.maskManager.masksProperties.length,a=0):(a=this.filterManager.effectElements[0].p.v-1,o=a+1),s=createNS("g"),s.setAttribute("fill","none"),s.setAttribute("stroke-linecap","round"),s.setAttribute("stroke-dashoffset",1),a;a<o;a+=1)i=createNS("path"),s.appendChild(i),this.paths.push({p:i,m:a});if(this.filterManager.effectElements[10].p.v===3){var c=createNS("mask"),d=createElementID();c.setAttribute("id",d),c.setAttribute("mask-type","alpha"),c.appendChild(s),this.elem.globalData.defs.appendChild(c);var g=createNS("g");for(g.setAttribute("mask","url("+getLocationHref()+"#"+d+")");e[0];)g.appendChild(e[0]);this.elem.layerElement.appendChild(g),this.masker=c,s.setAttribute("stroke","#fff")}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2)for(e=this.elem.layerElement.children||this.elem.layerElement.childNodes;e.length;)this.elem.layerElement.removeChild(e[0]);this.elem.layerElement.appendChild(s),this.elem.layerElement.removeAttribute("mask"),s.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=s},SVGStrokeEffect.prototype.renderFrame=function(e){this.initialized||this.initialize();var i,s=this.paths.length,a,o;for(i=0;i<s;i+=1)if(this.paths[i].m!==-1&&(a=this.elem.maskManager.viewData[this.paths[i].m],o=this.paths[i].p,(e||this.filterManager._mdf||a.prop._mdf)&&o.setAttribute("d",a.lastPath),e||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||a.prop._mdf)){var c;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var d=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,g=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,_=o.getTotalLength();c="0 0 0 "+_*d+" ";var b=_*(g-d),j=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01,nt=Math.floor(b/j),tt;for(tt=0;tt<nt;tt+=1)c+="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01+" ";c+="0 "+_*10+" 0 0"}else c="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01;o.setAttribute("stroke-dasharray",c)}if((e||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",this.filterManager.effectElements[4].p.v*2),(e||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2)&&(e||this.filterManager.effectElements[3].p._mdf)){var at=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(at[0]*255)+","+bmFloor(at[1]*255)+","+bmFloor(at[2]*255)+")")}};function SVGTritoneFilter(e,i,s,a){this.filterManager=i;var o=createNS("feColorMatrix");o.setAttribute("type","matrix"),o.setAttribute("color-interpolation-filters","linearRGB"),o.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),e.appendChild(o);var c=createNS("feComponentTransfer");c.setAttribute("color-interpolation-filters","sRGB"),c.setAttribute("result",a),this.matrixFilter=c;var d=createNS("feFuncR");d.setAttribute("type","table"),c.appendChild(d),this.feFuncR=d;var g=createNS("feFuncG");g.setAttribute("type","table"),c.appendChild(g),this.feFuncG=g;var _=createNS("feFuncB");_.setAttribute("type","table"),c.appendChild(_),this.feFuncB=_,e.appendChild(c)}SVGTritoneFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var i=this.filterManager.effectElements[0].p.v,s=this.filterManager.effectElements[1].p.v,a=this.filterManager.effectElements[2].p.v,o=a[0]+" "+s[0]+" "+i[0],c=a[1]+" "+s[1]+" "+i[1],d=a[2]+" "+s[2]+" "+i[2];this.feFuncR.setAttribute("tableValues",o),this.feFuncG.setAttribute("tableValues",c),this.feFuncB.setAttribute("tableValues",d)}};function SVGProLevelsFilter(e,i,s,a){this.filterManager=i;var o=this.filterManager.effectElements,c=createNS("feComponentTransfer");(o[10].p.k||o[10].p.v!==0||o[11].p.k||o[11].p.v!==1||o[12].p.k||o[12].p.v!==1||o[13].p.k||o[13].p.v!==0||o[14].p.k||o[14].p.v!==1)&&(this.feFuncR=this.createFeFunc("feFuncR",c)),(o[17].p.k||o[17].p.v!==0||o[18].p.k||o[18].p.v!==1||o[19].p.k||o[19].p.v!==1||o[20].p.k||o[20].p.v!==0||o[21].p.k||o[21].p.v!==1)&&(this.feFuncG=this.createFeFunc("feFuncG",c)),(o[24].p.k||o[24].p.v!==0||o[25].p.k||o[25].p.v!==1||o[26].p.k||o[26].p.v!==1||o[27].p.k||o[27].p.v!==0||o[28].p.k||o[28].p.v!==1)&&(this.feFuncB=this.createFeFunc("feFuncB",c)),(o[31].p.k||o[31].p.v!==0||o[32].p.k||o[32].p.v!==1||o[33].p.k||o[33].p.v!==1||o[34].p.k||o[34].p.v!==0||o[35].p.k||o[35].p.v!==1)&&(this.feFuncA=this.createFeFunc("feFuncA",c)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(c.setAttribute("color-interpolation-filters","sRGB"),e.appendChild(c)),(o[3].p.k||o[3].p.v!==0||o[4].p.k||o[4].p.v!==1||o[5].p.k||o[5].p.v!==1||o[6].p.k||o[6].p.v!==0||o[7].p.k||o[7].p.v!==1)&&(c=createNS("feComponentTransfer"),c.setAttribute("color-interpolation-filters","sRGB"),c.setAttribute("result",a),e.appendChild(c),this.feFuncRComposed=this.createFeFunc("feFuncR",c),this.feFuncGComposed=this.createFeFunc("feFuncG",c),this.feFuncBComposed=this.createFeFunc("feFuncB",c))}SVGProLevelsFilter.prototype.createFeFunc=function(e,i){var s=createNS(e);return s.setAttribute("type","table"),i.appendChild(s),s},SVGProLevelsFilter.prototype.getTableValue=function(e,i,s,a,o){for(var c=0,d=256,g,_=Math.min(e,i),b=Math.max(e,i),j=Array.call(null,{length:d}),nt,tt=0,at=o-a,it=i-e;c<=256;)g=c/256,g<=_?nt=it<0?o:a:g>=b?nt=it<0?a:o:nt=a+at*Math.pow((g-e)/it,1/s),j[tt]=nt,tt+=1,c+=256/(d-1);return j.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var i,s=this.filterManager.effectElements;this.feFuncRComposed&&(e||s[3].p._mdf||s[4].p._mdf||s[5].p._mdf||s[6].p._mdf||s[7].p._mdf)&&(i=this.getTableValue(s[3].p.v,s[4].p.v,s[5].p.v,s[6].p.v,s[7].p.v),this.feFuncRComposed.setAttribute("tableValues",i),this.feFuncGComposed.setAttribute("tableValues",i),this.feFuncBComposed.setAttribute("tableValues",i)),this.feFuncR&&(e||s[10].p._mdf||s[11].p._mdf||s[12].p._mdf||s[13].p._mdf||s[14].p._mdf)&&(i=this.getTableValue(s[10].p.v,s[11].p.v,s[12].p.v,s[13].p.v,s[14].p.v),this.feFuncR.setAttribute("tableValues",i)),this.feFuncG&&(e||s[17].p._mdf||s[18].p._mdf||s[19].p._mdf||s[20].p._mdf||s[21].p._mdf)&&(i=this.getTableValue(s[17].p.v,s[18].p.v,s[19].p.v,s[20].p.v,s[21].p.v),this.feFuncG.setAttribute("tableValues",i)),this.feFuncB&&(e||s[24].p._mdf||s[25].p._mdf||s[26].p._mdf||s[27].p._mdf||s[28].p._mdf)&&(i=this.getTableValue(s[24].p.v,s[25].p.v,s[26].p.v,s[27].p.v,s[28].p.v),this.feFuncB.setAttribute("tableValues",i)),this.feFuncA&&(e||s[31].p._mdf||s[32].p._mdf||s[33].p._mdf||s[34].p._mdf||s[35].p._mdf)&&(i=this.getTableValue(s[31].p.v,s[32].p.v,s[33].p.v,s[34].p.v,s[35].p.v),this.feFuncA.setAttribute("tableValues",i))}};function SVGDropShadowEffect(e,i,s,a,o){var c=i.container.globalData.renderConfig.filterSize,d=i.data.fs||c;e.setAttribute("x",d.x||c.x),e.setAttribute("y",d.y||c.y),e.setAttribute("width",d.width||c.width),e.setAttribute("height",d.height||c.height),this.filterManager=i;var g=createNS("feGaussianBlur");g.setAttribute("in","SourceAlpha"),g.setAttribute("result",a+"_drop_shadow_1"),g.setAttribute("stdDeviation","0"),this.feGaussianBlur=g,e.appendChild(g);var _=createNS("feOffset");_.setAttribute("dx","25"),_.setAttribute("dy","0"),_.setAttribute("in",a+"_drop_shadow_1"),_.setAttribute("result",a+"_drop_shadow_2"),this.feOffset=_,e.appendChild(_);var b=createNS("feFlood");b.setAttribute("flood-color","#00ff00"),b.setAttribute("flood-opacity","1"),b.setAttribute("result",a+"_drop_shadow_3"),this.feFlood=b,e.appendChild(b);var j=createNS("feComposite");j.setAttribute("in",a+"_drop_shadow_3"),j.setAttribute("in2",a+"_drop_shadow_2"),j.setAttribute("operator","in"),j.setAttribute("result",a+"_drop_shadow_4"),e.appendChild(j);var nt=this.createMergeNode(a,[a+"_drop_shadow_4",o]);e.appendChild(nt)}extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){if((e||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),e||this.filterManager.effectElements[0].p._mdf){var i=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(i[0]*255),Math.round(i[1]*255),Math.round(i[2]*255)))}if((e||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),e||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var s=this.filterManager.effectElements[3].p.v,a=(this.filterManager.effectElements[2].p.v-90)*degToRads,o=s*Math.cos(a),c=s*Math.sin(a);this.feOffset.setAttribute("dx",o),this.feOffset.setAttribute("dy",c)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(e,i,s){this.initialized=!1,this.filterManager=i,this.filterElem=e,this.elem=s,s.matteElement=createNS("g"),s.matteElement.appendChild(s.layerElement),s.matteElement.appendChild(s.transformedElement),s.baseElement=s.matteElement}SVGMatte3Effect.prototype.findSymbol=function(e){for(var i=0,s=_svgMatteSymbols.length;i<s;){if(_svgMatteSymbols[i]===e)return _svgMatteSymbols[i];i+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(e,i){var s=e.layerElement.parentNode;if(s){for(var a=s.children,o=0,c=a.length;o<c&&a[o]!==e.layerElement;)o+=1;var d;o<=c-2&&(d=a[o+1]);var g=createNS("use");g.setAttribute("href","#"+i),d?s.insertBefore(g,d):s.appendChild(g)}},SVGMatte3Effect.prototype.setElementAsMask=function(e,i){if(!this.findSymbol(i)){var s=createElementID(),a=createNS("mask");a.setAttribute("id",i.layerId),a.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(i);var o=e.globalData.defs;o.appendChild(a);var c=createNS("symbol");c.setAttribute("id",s),this.replaceInParent(i,s),c.appendChild(i.layerElement),o.appendChild(c);var d=createNS("use");d.setAttribute("href","#"+s),a.appendChild(d),i.data.hd=!1,i.show()}e.setMatte(i.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var e=this.filterManager.effectElements[0].p.v,i=this.elem.comp.elements,s=0,a=i.length;s<a;)i[s]&&i[s].data.ind===e&&this.setElementAsMask(this.elem,i[s]),s+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()};function SVGGaussianBlurEffect(e,i,s,a){e.setAttribute("x","-100%"),e.setAttribute("y","-100%"),e.setAttribute("width","300%"),e.setAttribute("height","300%"),this.filterManager=i;var o=createNS("feGaussianBlur");o.setAttribute("result",a),e.appendChild(o),this.feGaussianBlur=o}SVGGaussianBlurEffect.prototype.renderFrame=function(e){if(e||this.filterManager._mdf){var i=.3,s=this.filterManager.effectElements[0].p.v*i,a=this.filterManager.effectElements[1].p.v,o=a==3?0:s,c=a==2?0:s;this.feGaussianBlur.setAttribute("stdDeviation",o+" "+c);var d=this.filterManager.effectElements[2].p.v==1?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",d)}};function TransformEffect(){}TransformEffect.prototype.init=function(e){this.effectsManager=e,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(e){if(this._opMdf=!1,this._mdf=!1,e||this.effectsManager._mdf){var i=this.effectsManager.effectElements,s=i[0].p.v,a=i[1].p.v,o=i[2].p.v===1,c=i[3].p.v,d=o?c:i[4].p.v,g=i[5].p.v,_=i[6].p.v,b=i[7].p.v;this.matrix.reset(),this.matrix.translate(-s[0],-s[1],s[2]),this.matrix.scale(d*.01,c*.01,1),this.matrix.rotate(-b*degToRads),this.matrix.skewFromAxis(-g*degToRads,(_+90)*degToRads),this.matrix.translate(a[0],a[1],0),this._mdf=!0,this.opacity!==i[8].p.v&&(this.opacity=i[8].p.v,this._opMdf=!0)}};function SVGTransformEffect(e,i){this.init(i)}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(e){this.init(e)}return extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie})})(lottie$1,lottie$1.exports);var lottieExports=lottie$1.exports;const lottie=getDefaultExportFromCjs(lottieExports);function _iterableToArrayLimit(e,i){var s=e==null?null:typeof Symbol<"u"&&e[Symbol.iterator]||e["@@iterator"];if(s!=null){var a,o,c,d,g=[],_=!0,b=!1;try{if(c=(s=s.call(e)).next,i===0){if(Object(s)!==s)return;_=!1}else for(;!(_=(a=c.call(s)).done)&&(g.push(a.value),g.length!==i);_=!0);}catch(j){b=!0,o=j}finally{try{if(!_&&s.return!=null&&(d=s.return(),Object(d)!==d))return}finally{if(b)throw o}}return g}}function ownKeys(e,i){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);i&&(a=a.filter(function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable})),s.push.apply(s,a)}return s}function _objectSpread2(e){for(var i=1;i<arguments.length;i++){var s=arguments[i]!=null?arguments[i]:{};i%2?ownKeys(Object(s),!0).forEach(function(a){_defineProperty(e,a,s[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):ownKeys(Object(s)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(s,a))})}return e}function _defineProperty(e,i,s){return i=_toPropertyKey(i),i in e?Object.defineProperty(e,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[i]=s,e}function _objectWithoutPropertiesLoose(e,i){if(e==null)return{};var s={},a=Object.keys(e),o,c;for(c=0;c<a.length;c++)o=a[c],!(i.indexOf(o)>=0)&&(s[o]=e[o]);return s}function _objectWithoutProperties(e,i){if(e==null)return{};var s=_objectWithoutPropertiesLoose(e,i),a,o;if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)a=c[o],!(i.indexOf(a)>=0)&&Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}function _slicedToArray(e,i){return _arrayWithHoles(e)||_iterableToArrayLimit(e,i)||_unsupportedIterableToArray(e,i)||_nonIterableRest()}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _unsupportedIterableToArray(e,i){if(e){if(typeof e=="string")return _arrayLikeToArray(e,i);var s=Object.prototype.toString.call(e).slice(8,-1);if(s==="Object"&&e.constructor&&(s=e.constructor.name),s==="Map"||s==="Set")return Array.from(e);if(s==="Arguments"||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(s))return _arrayLikeToArray(e,i)}}function _arrayLikeToArray(e,i){(i==null||i>e.length)&&(i=e.length);for(var s=0,a=new Array(i);s<i;s++)a[s]=e[s];return a}function _nonIterableRest(){throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`)}function _toPrimitive(e,i){if(typeof e!="object"||e===null)return e;var s=e[Symbol.toPrimitive];if(s!==void 0){var a=s.call(e,i||"default");if(typeof a!="object")return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return(i==="string"?String:Number)(e)}function _toPropertyKey(e){var i=_toPrimitive(e,"string");return typeof i=="symbol"?i:String(i)}var _excluded$1=["animationData","loop","autoplay","initialSegment","onComplete","onLoopComplete","onEnterFrame","onSegmentStart","onConfigReady","onDataReady","onDataFailed","onLoadedImages","onDOMLoaded","onDestroy","lottieRef","renderer","name","assetsPath","rendererSettings"],useLottie=function e(i,s){var a=i.animationData,o=i.loop,c=i.autoplay,d=i.initialSegment,g=i.onComplete,_=i.onLoopComplete,b=i.onEnterFrame,j=i.onSegmentStart,nt=i.onConfigReady,tt=i.onDataReady,at=i.onDataFailed,it=i.onLoadedImages,rt=i.onDOMLoaded,ut=i.onDestroy;i.lottieRef,i.renderer,i.name,i.assetsPath,i.rendererSettings;var $=_objectWithoutProperties(i,_excluded$1),et=reactExports.useState(!1),_e=_slicedToArray(et,2),st=_e[0],ft=_e[1],lt=reactExports.useRef(),ct=reactExports.useRef(null),dt=function(){var xt;(xt=lt.current)===null||xt===void 0||xt.play()},gt=function(){var xt;(xt=lt.current)===null||xt===void 0||xt.stop()},Ct=function(){var xt;(xt=lt.current)===null||xt===void 0||xt.pause()},_t=function(xt){var Tt;(Tt=lt.current)===null||Tt===void 0||Tt.setSpeed(xt)},Pt=function(xt,Tt){var At;(At=lt.current)===null||At===void 0||At.goToAndPlay(xt,Tt)},bt=function(xt,Tt){var At;(At=lt.current)===null||At===void 0||At.goToAndStop(xt,Tt)},Mt=function(xt){var Tt;(Tt=lt.current)===null||Tt===void 0||Tt.setDirection(xt)},wt=function(xt,Tt){var At;(At=lt.current)===null||At===void 0||At.playSegments(xt,Tt)},pt=function(xt){var Tt;(Tt=lt.current)===null||Tt===void 0||Tt.setSubframe(xt)},mt=function(xt){var Tt;return(Tt=lt.current)===null||Tt===void 0?void 0:Tt.getDuration(xt)},ot=function(){var xt;(xt=lt.current)===null||xt===void 0||xt.destroy(),lt.current=void 0},ht=function(){var xt=arguments.length>0&&arguments[0]!==void 0?arguments[0]:{},Tt;if(ct.current){(Tt=lt.current)===null||Tt===void 0||Tt.destroy();var At=_objectSpread2(_objectSpread2(_objectSpread2({},i),xt),{},{container:ct.current});return lt.current=lottie.loadAnimation(At),ft(!!lt.current),function(){var Ot;(Ot=lt.current)===null||Ot===void 0||Ot.destroy(),lt.current=void 0}}};reactExports.useEffect(function(){var vt=ht();return function(){return vt==null?void 0:vt()}},[a,o]),reactExports.useEffect(function(){lt.current&&(lt.current.autoplay=!!c)},[c]),reactExports.useEffect(function(){if(lt.current){if(!d){lt.current.resetSegments(!0);return}!Array.isArray(d)||!d.length||((lt.current.currentRawFrame<d[0]||lt.current.currentRawFrame>d[1])&&(lt.current.currentRawFrame=d[0]),lt.current.setSegment(d[0],d[1]))}},[d]),reactExports.useEffect(function(){var vt=[{name:"complete",handler:g},{name:"loopComplete",handler:_},{name:"enterFrame",handler:b},{name:"segmentStart",handler:j},{name:"config_ready",handler:nt},{name:"data_ready",handler:tt},{name:"data_failed",handler:at},{name:"loaded_images",handler:it},{name:"DOMLoaded",handler:rt},{name:"destroy",handler:ut}],xt=vt.filter(function(At){return At.handler!=null});if(xt.length){var Tt=xt.map(function(At){var Ot;return(Ot=lt.current)===null||Ot===void 0||Ot.addEventListener(At.name,At.handler),function(){var Vt;(Vt=lt.current)===null||Vt===void 0||Vt.removeEventListener(At.name,At.handler)}});return function(){Tt.forEach(function(At){return At()})}}},[g,_,b,j,nt,tt,at,it,rt,ut]);var yt=React.createElement("div",_objectSpread2({style:s,ref:ct},$));return{View:yt,play:dt,stop:gt,pause:Ct,setSpeed:_t,goToAndStop:bt,goToAndPlay:Pt,setDirection:Mt,playSegments:wt,setSubframe:pt,getDuration:mt,destroy:ot,animationContainerRef:ct,animationLoaded:st,animationItem:lt.current}};function getContainerVisibility(e){var i=e.getBoundingClientRect(),s=i.top,a=i.height,o=window.innerHeight-s,c=window.innerHeight+a;return o/c}function getContainerCursorPosition(e,i,s){var a=e.getBoundingClientRect(),o=a.top,c=a.left,d=a.width,g=a.height,_=(i-c)/d,b=(s-o)/g;return{x:_,y:b}}var useInitInteractivity=function e(i){var s=i.wrapperRef,a=i.animationItem,o=i.mode,c=i.actions;reactExports.useEffect(function(){var d=s.current;if(!(!d||!a||!c.length)){a.stop();var g=function(){var j=null,nt=function(){var at=getContainerVisibility(d),it=c.find(function(ut){var $=ut.visibility;return $&&at>=$[0]&&at<=$[1]});if(it){if(it.type==="seek"&&it.visibility&&it.frames.length===2){var rt=it.frames[0]+Math.ceil((at-it.visibility[0])/(it.visibility[1]-it.visibility[0])*it.frames[1]);//! goToAndStop must be relative to the start of the current segment
a.goToAndStop(rt-a.firstFrame-1,!0)}it.type==="loop"&&(j===null||j!==it.frames||a.isPaused)&&(a.playSegments(it.frames,!0),j=it.frames),it.type==="play"&&a.isPaused&&(a.resetSegments(!0),a.play()),it.type==="stop"&&a.goToAndStop(it.frames[0]-a.firstFrame-1,!0)}};return document.addEventListener("scroll",nt),function(){document.removeEventListener("scroll",nt)}},_=function(){var j=function(it,rt){var ut=it,$=rt;if(ut!==-1&&$!==-1){var et=getContainerCursorPosition(d,ut,$);ut=et.x,$=et.y}var _e=c.find(function(lt){var ct=lt.position;return ct&&Array.isArray(ct.x)&&Array.isArray(ct.y)?ut>=ct.x[0]&&ut<=ct.x[1]&&$>=ct.y[0]&&$<=ct.y[1]:ct&&!Number.isNaN(ct.x)&&!Number.isNaN(ct.y)?ut===ct.x&&$===ct.y:!1});if(_e){if(_e.type==="seek"&&_e.position&&Array.isArray(_e.position.x)&&Array.isArray(_e.position.y)&&_e.frames.length===2){var st=(ut-_e.position.x[0])/(_e.position.x[1]-_e.position.x[0]),ft=($-_e.position.y[0])/(_e.position.y[1]-_e.position.y[0]);a.playSegments(_e.frames,!0),a.goToAndStop(Math.ceil((st+ft)/2*(_e.frames[1]-_e.frames[0])),!0)}_e.type==="loop"&&a.playSegments(_e.frames,!0),_e.type==="play"&&(a.isPaused&&a.resetSegments(!1),a.playSegments(_e.frames)),_e.type==="stop"&&a.goToAndStop(_e.frames[0],!0)}},nt=function(it){j(it.clientX,it.clientY)},tt=function(){j(-1,-1)};return d.addEventListener("mousemove",nt),d.addEventListener("mouseout",tt),function(){d.removeEventListener("mousemove",nt),d.removeEventListener("mouseout",tt)}};switch(o){case"scroll":return g();case"cursor":return _()}}},[o,a])},useLottieInteractivity=function e(i){var s=i.actions,a=i.mode,o=i.lottieObj,c=o.animationItem,d=o.View,g=o.animationContainerRef;return useInitInteractivity({actions:s,animationItem:c,mode:a,wrapperRef:g}),d},_excluded=["style","interactivity"],Lottie=function e(i){var s,a,o,c=i.style,d=i.interactivity,g=_objectWithoutProperties(i,_excluded),_=useLottie(g,c),b=_.View,j=_.play,nt=_.stop,tt=_.pause,at=_.setSpeed,it=_.goToAndStop,rt=_.goToAndPlay,ut=_.setDirection,$=_.playSegments,et=_.setSubframe,_e=_.getDuration,st=_.destroy,ft=_.animationContainerRef,lt=_.animationLoaded,ct=_.animationItem;return reactExports.useEffect(function(){i.lottieRef&&(i.lottieRef.current={play:j,stop:nt,pause:tt,setSpeed:at,goToAndPlay:rt,goToAndStop:it,setDirection:ut,playSegments:$,setSubframe:et,getDuration:_e,destroy:st,animationContainerRef:ft,animationLoaded:lt,animationItem:ct})},[(s=i.lottieRef)===null||s===void 0?void 0:s.current]),useLottieInteractivity({lottieObj:{View:b,play:j,stop:nt,pause:tt,setSpeed:at,goToAndStop:it,goToAndPlay:rt,setDirection:ut,playSegments:$,setSubframe:et,getDuration:_e,destroy:st,animationContainerRef:ft,animationLoaded:lt,animationItem:ct},actions:(a=d==null?void 0:d.actions)!==null&&a!==void 0?a:[],mode:(o=d==null?void 0:d.mode)!==null&&o!==void 0?o:"scroll"})};const nm="Comp 2",ddd=0,h=500,w=500,meta={g:"LottieFiles AE 3.5.3"},layers=[{ty:4,nm:"Shape Layer 7",sr:1,st:0,op:30,ip:0,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:1},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:4},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:14},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:17},{s:[100,100,100],t:27}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:0,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:3.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:14,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:17.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:28}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.0431,.2392,.5686],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:1},{ty:4,nm:"Shape Layer 6",sr:1,st:1,op:31,ip:1,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:2},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:5},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:15},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:18},{s:[100,100,100],t:28}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:1,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:4.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:15,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:18.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:29}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[.9882,.2392,.1294],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:2},{ty:4,nm:"Shape Layer 5",sr:1,st:2,op:32,ip:2,hd:!1,ddd:0,bm:0,hasMask:!1,ao:0,ks:{a:{a:0,k:[37,36,0],ix:1},s:{a:1,k:[{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:3},{o:{x:.3330000000000001,y:0},i:{x:0,y:1},s:[117.544,54.386,100],t:6},{o:{x:.3330000000000001,y:0},i:{x:.6670000000000001,y:1},s:[100,100,100],t:16},{o:{x:.3330000000000001,y:0},i:{x:0,y:1.432379266120413},s:[117.544,54.386,100],t:19},{s:[100,100,100],t:29}],ix:6},sk:{a:0,k:0},p:{a:1,k:[{o:{x:.667,y:0},i:{x:.667,y:.5},s:[375,250,0],t:2,ti:[41.667,0,0],to:[-20.833,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:5.5,ti:[0,0,0],to:[-41.667,0,0]},{o:{x:.667,y:0},i:{x:.667,y:.5},s:[125,250,0],t:16,ti:[-41.667,0,0],to:[0,0,0]},{o:{x:.111,y:.5},i:{x:.333,y:1},s:[250,250,0],t:19.5,ti:[-20.833,0,0],to:[41.667,0,0]},{s:[375,250,0],t:30}],ix:2},r:{a:0,k:0,ix:10},sa:{a:0,k:0},o:{a:0,k:100,ix:11}},ef:[],shapes:[{ty:"gr",bm:0,hd:!1,mn:"ADBE Vector Group",nm:"Ellipse 1",ix:1,cix:2,np:3,it:[{ty:"sh",bm:0,hd:!1,mn:"ADBE Vector Shape - Group",nm:"Path 1",ix:1,d:1,ks:{a:0,k:{c:!0,i:[[-31.48,0],[0,-31.48],[31.48,0],[0,31.48]],o:[[31.48,0],[0,31.48],[-31.48,0],[0,-31.48]],v:[[26,-31],[83,26],[26,83],[-31,26]]},ix:2}},{ty:"fl",bm:0,hd:!1,mn:"ADBE Vector Graphic - Fill",nm:"Fill 1",c:{a:0,k:[1,1,1],ix:4},r:1,o:{a:0,k:100,ix:5}},{ty:"tr",a:{a:0,k:[0,0],ix:1},s:{a:0,k:[100,100],ix:3},sk:{a:0,k:0,ix:4},p:{a:0,k:[11,10],ix:2},r:{a:0,k:0,ix:6},sa:{a:0,k:0,ix:5},o:{a:0,k:100,ix:7}}]}],ind:3}],v="4.8.0",fr=20,op=30,ip=0,assets=[],animationData={nm,ddd,h,w,meta,layers,v,fr,op,ip,assets},styles={container:{animation:"fade-in 1s forwards",display:"flex",justifyContent:"center",alignItems:"center",height:"100vh"},lottie:{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"}},Spinner=()=>(console.log("Spinner"),jsxRuntimeExports.jsx("div",{style:styles.container,children:jsxRuntimeExports.jsx(Lottie,{animationData,loop:!0,height:200,width:200})})),spinner=Object.freeze(Object.defineProperty({__proto__:null,default:Spinner},Symbol.toStringTag,{value:"Module"})),ServiciosContext=reactExports.createContext({services:null,loading:!0}),ServiciosIdProvider=({children:e})=>{const[i,s]=reactExports.useState(!0),{data:a,error:o,isLoading:c,isError:d}=useQuery({queryKey:["services"],queryFn:fetchServices1,staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30});if(reactExports.useEffect(()=>{if(a){const g=a.map(_=>new Promise(b=>{const j=new Image;j.src=_.imagen,j.onload=b}));Promise.all(g).then(()=>s(!1))}},[a]),c)return jsxRuntimeExports.jsx("div",{children:"cargando..."});if(d&&console.error(o,"aqui estoy en error"),a){const g=[];console.log("aqui estoy en services getser",a),a.forEach(_=>{g.push(new Image),g[g.length-1].src=_.imagen}),g[g.length-1].onload=()=>{s(!1)}}return i?jsxRuntimeExports.jsx("div",{children:jsxRuntimeExports.jsx(Spinner,{})}):jsxRuntimeExports.jsx(ServiciosContext.Provider,{value:{services:a,loading:c||i},children:e})},useServicios=()=>reactExports.useContext(ServiciosContext);export{spinner as $,APIURL as A,createBrowserRouter as B,Spinner as C,ServiciosIdProvider as D,RouterProvider as E,useServicios as F,useParams as G,useQuery as H,useLocation as I,NavLink as J,QueryObserver as K,Link as L,useBaseQuery as M,Navigate as N,Outlet as O,getDefaultExportFromCjs as P,QueryClientProvider as Q,React as R,Subscribable as S,ReactDOM as T,fetchWorkers as U,fetchProjects as V,fetchProjectsImages as W,getAugmentedNamespace as X,fetchBrochure as Y,commonjsGlobal as Z,__vitePreload as _,isServer as a,replaceData as b,createRetryer as c,notifyManager as d,isCancelledError as e,canFetch as f,matchMutation as g,hashQueryKeyByOptions as h,isValidTimeout as i,addToStart as j,addToEnd as k,focusManager as l,matchQuery as m,noop$1 as n,onlineManager as o,functionalUpdate as p,hashKey as q,reactDomExports as r,partialMatchKey as s,timeUntilStale as t,shallowEqualObjects as u,useQueryClient as v,reactExports as w,shouldThrowError as x,apiClient as y,jsxRuntimeExports as z};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2V0c0lkU2VydmljZXMtYTJlYWRkNjEuanMiLCJzb3VyY2VzIjpbIi4uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3QvY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwiLi4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvQHJlbWl4LXJ1bi9yb3V0ZXIvZGlzdC9yb3V0ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2Rpc3QvaW5kZXguanMiLCIuLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9kaXN0L2luZGV4LmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9zdWJzY3JpYmFibGUuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9xdWVyeS1jb3JlL2J1aWxkL21vZGVybi9mb2N1c01hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL29ubGluZU1hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3JldHJ5ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL25vdGlmeU1hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3F1ZXJ5LWNvcmUvYnVpbGQvbW9kZXJuL3F1ZXJ5T2JzZXJ2ZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9RdWVyeUNsaWVudFByb3ZpZGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vaXNSZXN0b3JpbmcuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi9RdWVyeUVycm9yUmVzZXRCb3VuZGFyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9AdGFuc3RhY2svcmVhY3QtcXVlcnkvYnVpbGQvbW9kZXJuL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vZXJyb3JCb3VuZGFyeVV0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC1xdWVyeS9idWlsZC9tb2Rlcm4vc3VzcGVuc2UuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VCYXNlUXVlcnkuanMiLCIuLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5L2J1aWxkL21vZGVybi91c2VRdWVyeS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL251bGwuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9icm93c2VyL2NsYXNzZXMvQmxvYi5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vY29tbW9uL3V0aWxzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9wbGF0Zm9ybS9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy90b1VSTEVuY29kZWRGb3JtLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvQXhpb3NIZWFkZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb21iaW5lVVJMcy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZVByb3RvY29sLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZW52L2RhdGEuanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdmFsaWRhdG9yLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMiLCIuLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwiLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9IdHRwU3RhdHVzQ29kZS5qcyIsIi4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCIuLi9zcmMvYXBpQ2xpZW50LnRzeCIsIi4uL3NyYy9hcGkvcGFnZXNJbmZvLnRzeCIsIi4uL25vZGVfbW9kdWxlcy9sb3R0aWUtd2ViL2J1aWxkL3BsYXllci9sb3R0aWUuanMiLCIuLi9ub2RlX21vZHVsZXMvbG90dGllLXJlYWN0L2J1aWxkL2luZGV4LmVzLmpzIiwiLi4vc3JjL2NvbXBvbmVudHMvc3Bpbm5lci50c3giLCIuLi9zcmMvaG9va3MvR2V0c0lkU2VydmljZXMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxuPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikscD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIikscT1TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIikscj1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksdD1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksdT1TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKSx2PVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSx3PVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSx4PVN5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpLHk9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIiksej1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQShhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eiYmYVt6XXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfVxudmFyIEI9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEM9T2JqZWN0LmFzc2lnbixEPXt9O2Z1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RDt0aGlzLnVwZGF0ZXI9ZXx8Qn1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O1xuRS5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKFwic2V0U3RhdGUoLi4uKTogdGFrZXMgYW4gb2JqZWN0IG9mIHN0YXRlIHZhcmlhYmxlcyB0byB1cGRhdGUgb3IgYSBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMuXCIpO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7QyhILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPUFycmF5LmlzQXJyYXksSj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEs9e2N1cnJlbnQ6bnVsbH0sTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsZSl7dmFyIGQsYz17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGQgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilKLmNhbGwoYixkKSYmIUwuaGFzT3duUHJvcGVydHkoZCkmJihjW2RdPWJbZF0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZyljLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2MuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZCBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09Y1tkXSYmKGNbZF09Z1tkXSk7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmMsX293bmVyOksuY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOmwsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1sfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgUD0vXFwvKy9nO2Z1bmN0aW9uIFEoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBSKGEsYixlLGQsYyl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGw6Y2FzZSBuOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxjPWMoaCksYT1cIlwiPT09ZD9cIi5cIitRKGgsMCk6ZCxJKGMpPyhlPVwiXCIsbnVsbCE9YSYmKGU9YS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpLFIoYyxiLGUsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1jJiYoTyhjKSYmKGM9TihjLGUrKCFjLmtleXx8aCYmaC5rZXk9PT1jLmtleT9cIlwiOihcIlwiK2Mua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goYykpLDE7aD0wO2Q9XCJcIj09PWQ/XCIuXCI6ZCtcIjpcIjtpZihJKGEpKWZvcih2YXIgZz0wO2c8YS5sZW5ndGg7ZysrKXtrPVxuYVtnXTt2YXIgZj1kK1EoayxnKTtoKz1SKGssYixlLGYsYyl9ZWxzZSBpZihmPUEoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWQrUShrLGcrKyksaCs9UihrLGIsZSxmLGMpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1TdHJpbmcoYSksRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiKyhcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKStcIikuIElmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgaW5zdGVhZC5cIik7cmV0dXJuIGh9XG5mdW5jdGlvbiBTKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBkPVtdLGM9MDtSKGEsZCxcIlwiLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGIuY2FsbChlLGEsYysrKX0pO3JldHVybiBkfWZ1bmN0aW9uIFQoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTtiLnRoZW4oZnVuY3Rpb24oYil7aWYoMD09PWEuX3N0YXR1c3x8LTE9PT1hLl9zdGF0dXMpYS5fc3RhdHVzPTEsYS5fcmVzdWx0PWJ9LGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1ifSk7LTE9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MCxhLl9yZXN1bHQ9Yil9aWYoMT09PWEuX3N0YXR1cylyZXR1cm4gYS5fcmVzdWx0LmRlZmF1bHQ7dGhyb3cgYS5fcmVzdWx0O31cbnZhciBVPXtjdXJyZW50Om51bGx9LFY9e3RyYW5zaXRpb246bnVsbH0sVz17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpVLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOlYsUmVhY3RDdXJyZW50T3duZXI6S307ZXhwb3J0cy5DaGlsZHJlbj17bWFwOlMsZm9yRWFjaDpmdW5jdGlvbihhLGIsZSl7UyhhLGZ1bmN0aW9uKCl7Yi5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGUpfSxjb3VudDpmdW5jdGlvbihhKXt2YXIgYj0wO1MoYSxmdW5jdGlvbigpe2IrK30pO3JldHVybiBifSx0b0FycmF5OmZ1bmN0aW9uKGEpe3JldHVybiBTKGEsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KXx8W119LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoXCJSZWFjdC5DaGlsZHJlbi5vbmx5IGV4cGVjdGVkIHRvIHJlY2VpdmUgYSBzaW5nbGUgUmVhY3QgZWxlbWVudCBjaGlsZC5cIik7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1FO2V4cG9ydHMuRnJhZ21lbnQ9cDtcbmV4cG9ydHMuUHJvZmlsZXI9cjtleHBvcnRzLlB1cmVDb21wb25lbnQ9RztleHBvcnRzLlN0cmljdE1vZGU9cTtleHBvcnRzLlN1c3BlbnNlPXc7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1XO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKFwiUmVhY3QuY2xvbmVFbGVtZW50KC4uLik6IFRoZSBhcmd1bWVudCBtdXN0IGJlIGEgUmVhY3QgZWxlbWVudCwgYnV0IHlvdSBwYXNzZWQgXCIrYStcIi5cIik7dmFyIGQ9Qyh7fSxhLnByb3BzKSxjPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1LLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoYz1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUouY2FsbChiLGYpJiYhTC5oYXNPd25Qcm9wZXJ0eShmKSYmKGRbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7XG5mb3IodmFyIG09MDttPGY7bSsrKWdbbV09YXJndW1lbnRzW20rMl07ZC5jaGlsZHJlbj1nfXJldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpjLHJlZjprLHByb3BzOmQsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSl7YT17JCR0eXBlb2Y6dSxfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGwsX2RlZmF1bHRWYWx1ZTpudWxsLF9nbG9iYWxOYW1lOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnQsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PU07ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPU0uYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtcbmV4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztleHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnksX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpUfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOngsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnN0YXJ0VHJhbnNpdGlvbj1mdW5jdGlvbihhKXt2YXIgYj1WLnRyYW5zaXRpb247Vi50cmFuc2l0aW9uPXt9O3RyeXthKCl9ZmluYWxseXtWLnRyYW5zaXRpb249Yn19O2V4cG9ydHMudW5zdGFibGVfYWN0PWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoXCJhY3QoLi4uKSBpcyBub3Qgc3VwcG9ydGVkIGluIHByb2R1Y3Rpb24gYnVpbGRzIG9mIFJlYWN0LlwiKTt9O1xuZXhwb3J0cy51c2VDYWxsYmFjaz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlQ2FsbGJhY2soYSxiKX07ZXhwb3J0cy51c2VDb250ZXh0PWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlQ29udGV4dChhKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZURlZmVycmVkVmFsdWU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VEZWZlcnJlZFZhbHVlKGEpfTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gVS5jdXJyZW50LnVzZUlkKCl9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixlKX07XG5leHBvcnRzLnVzZUluc2VydGlvbkVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlSW5zZXJ0aW9uRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFUuY3VycmVudC51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWR1Y2VyKGEsYixlKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFUuY3VycmVudC51c2VTdGF0ZShhKX07ZXhwb3J0cy51c2VTeW5jRXh0ZXJuYWxTdG9yZT1mdW5jdGlvbihhLGIsZSl7cmV0dXJuIFUuY3VycmVudC51c2VTeW5jRXh0ZXJuYWxTdG9yZShhLGIsZSl9O1xuZXhwb3J0cy51c2VUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VUcmFuc2l0aW9uKCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGY9cmVxdWlyZShcInJlYWN0XCIpLGs9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbD1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksbT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LG49Zi5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixwPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBxKGMsYSxnKXt2YXIgYixkPXt9LGU9bnVsbCxoPW51bGw7dm9pZCAwIT09ZyYmKGU9XCJcIitnKTt2b2lkIDAhPT1hLmtleSYmKGU9XCJcIithLmtleSk7dm9pZCAwIT09YS5yZWYmJihoPWEucmVmKTtmb3IoYiBpbiBhKW0uY2FsbChhLGIpJiYhcC5oYXNPd25Qcm9wZXJ0eShiKSYmKGRbYl09YVtiXSk7aWYoYyYmYy5kZWZhdWx0UHJvcHMpZm9yKGIgaW4gYT1jLmRlZmF1bHRQcm9wcyxhKXZvaWQgMD09PWRbYl0mJihkW2JdPWFbYl0pO3JldHVybnskJHR5cGVvZjprLHR5cGU6YyxrZXk6ZSxyZWY6aCxwcm9wczpkLF9vd25lcjpuLmN1cnJlbnR9fWV4cG9ydHMuRnJhZ21lbnQ9bDtleHBvcnRzLmpzeD1xO2V4cG9ydHMuanN4cz1xO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiBzY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuJ3VzZSBzdHJpY3QnO2Z1bmN0aW9uIGYoYSxiKXt2YXIgYz1hLmxlbmd0aDthLnB1c2goYik7YTpmb3IoOzA8Yzspe3ZhciBkPWMtMT4+PjEsZT1hW2RdO2lmKDA8ZyhlLGIpKWFbZF09YixhW2NdPWUsYz1kO2Vsc2UgYnJlYWsgYX19ZnVuY3Rpb24gaChhKXtyZXR1cm4gMD09PWEubGVuZ3RoP251bGw6YVswXX1mdW5jdGlvbiBrKGEpe2lmKDA9PT1hLmxlbmd0aClyZXR1cm4gbnVsbDt2YXIgYj1hWzBdLGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aCx3PWU+Pj4xO2Q8dzspe3ZhciBtPTIqKGQrMSktMSxDPWFbbV0sbj1tKzEseD1hW25dO2lmKDA+ZyhDLGMpKW48ZSYmMD5nKHgsQyk/KGFbZF09eCxhW25dPWMsZD1uKTooYVtkXT1DLGFbbV09YyxkPW0pO2Vsc2UgaWYobjxlJiYwPmcoeCxjKSlhW2RdPXgsYVtuXT1jLGQ9bjtlbHNlIGJyZWFrIGF9fXJldHVybiBifVxuZnVuY3Rpb24gZyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH1pZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19dmFyIHI9W10sdD1bXSx1PTEsdj1udWxsLHk9Myx6PSExLEE9ITEsQj0hMSxEPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6bnVsbCxFPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0Om51bGwsRj1cInVuZGVmaW5lZFwiIT09dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6bnVsbDtcblwidW5kZWZpbmVkXCIhPT10eXBlb2YgbmF2aWdhdG9yJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZyYmdm9pZCAwIT09bmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcmJm5hdmlnYXRvci5zY2hlZHVsaW5nLmlzSW5wdXRQZW5kaW5nLmJpbmQobmF2aWdhdG9yLnNjaGVkdWxpbmcpO2Z1bmN0aW9uIEcoYSl7Zm9yKHZhciBiPWgodCk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylrKHQpO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpayh0KSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLGYocixiKTtlbHNlIGJyZWFrO2I9aCh0KX19ZnVuY3Rpb24gSChhKXtCPSExO0coYSk7aWYoIUEpaWYobnVsbCE9PWgocikpQT0hMCxJKEopO2Vsc2V7dmFyIGI9aCh0KTtudWxsIT09YiYmSyhILGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIEooYSxiKXtBPSExO0ImJihCPSExLEUoTCksTD0tMSk7ej0hMDt2YXIgYz15O3RyeXtHKGIpO2Zvcih2PWgocik7bnVsbCE9PXYmJighKHYuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFNKCkpOyl7dmFyIGQ9di5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7di5jYWxsYmFjaz1udWxsO3k9di5wcmlvcml0eUxldmVsO3ZhciBlPWQodi5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP3YuY2FsbGJhY2s9ZTp2PT09aChyKSYmayhyKTtHKGIpfWVsc2UgayhyKTt2PWgocil9aWYobnVsbCE9PXYpdmFyIHc9ITA7ZWxzZXt2YXIgbT1oKHQpO251bGwhPT1tJiZLKEgsbS5zdGFydFRpbWUtYik7dz0hMX1yZXR1cm4gd31maW5hbGx5e3Y9bnVsbCx5PWMsej0hMX19dmFyIE49ITEsTz1udWxsLEw9LTEsUD01LFE9LTE7XG5mdW5jdGlvbiBNKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCktUTxQPyExOiEwfWZ1bmN0aW9uIFIoKXtpZihudWxsIT09Tyl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtRPWE7dmFyIGI9ITA7dHJ5e2I9TyghMCxhKX1maW5hbGx5e2I/UygpOihOPSExLE89bnVsbCl9fWVsc2UgTj0hMX12YXIgUztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRilTPWZ1bmN0aW9uKCl7RihSKX07ZWxzZSBpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgVD1uZXcgTWVzc2FnZUNoYW5uZWwsVT1ULnBvcnQyO1QucG9ydDEub25tZXNzYWdlPVI7Uz1mdW5jdGlvbigpe1UucG9zdE1lc3NhZ2UobnVsbCl9fWVsc2UgUz1mdW5jdGlvbigpe0QoUiwwKX07ZnVuY3Rpb24gSShhKXtPPWE7Tnx8KE49ITAsUygpKX1mdW5jdGlvbiBLKGEsYil7TD1EKGZ1bmN0aW9uKCl7YShleHBvcnRzLnVuc3RhYmxlX25vdygpKX0sYil9XG5leHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7QXx8enx8KEE9ITAsSShKKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6UD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiB5fTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIGgocil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goeSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9eX12YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e3k9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O1xuZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9eTt5PWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXt5PWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jPyhjPWMuZGVsYXksYz1cIm51bWJlclwiPT09dHlwZW9mIGMmJjA8Yz9kK2M6ZCk6Yz1kO3N3aXRjaChhKXtjYXNlIDE6dmFyIGU9LTE7YnJlYWs7Y2FzZSAyOmU9MjUwO2JyZWFrO2Nhc2UgNTplPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA0OmU9MUU0O2JyZWFrO2RlZmF1bHQ6ZT01RTN9ZT1jK2U7YT17aWQ6dSsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTpjLGV4cGlyYXRpb25UaW1lOmUsc29ydEluZGV4Oi0xfTtjPmQ/KGEuc29ydEluZGV4PWMsZih0LGEpLG51bGw9PT1oKHIpJiZhPT09aCh0KSYmKEI/KEUoTCksTD0tMSk6Qj0hMCxLKEgsYy1kKSkpOihhLnNvcnRJbmRleD1lLGYocixhKSxBfHx6fHwoQT0hMCxJKEopKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1NO2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPXk7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9eTt5PWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e3k9Y319fTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxjYT1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHAoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9dmFyIGRhPW5ldyBTZXQsZWE9e307ZnVuY3Rpb24gZmEoYSxiKXtoYShhLGIpO2hhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBoYShhLGIpe2VhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylkYS5hZGQoYlthXSl9XG52YXIgaWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGphPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksa2E9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLGxhPVxue30sbWE9e307ZnVuY3Rpb24gb2EoYSl7aWYoamEuY2FsbChtYSxhKSlyZXR1cm4hMDtpZihqYS5jYWxsKGxhLGEpKXJldHVybiExO2lmKGthLnRlc3QoYSkpcmV0dXJuIG1hW2FdPSEwO2xhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIHBhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcWEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8cGEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgej17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTt6W2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3pbYV09bmV3IHYoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIHJhPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gc2EoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsXG5zYSk7eltiXT1uZXcgdihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKHJhLHNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG56LnhsaW5rSHJlZj1uZXcgdihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiB0YShhLGIsYyxkKXt2YXIgZT16Lmhhc093blByb3BlcnR5KGIpP3pbYl06bnVsbDtpZihudWxsIT09ZT8wIT09ZS50eXBlOmR8fCEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXSlxYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/b2EoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpfVxudmFyIHVhPWFhLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELHZhPVN5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpLHdhPVN5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIikseWE9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHphPVN5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKSxBYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIiksQmE9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLENhPVN5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpLERhPVN5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKSxFYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIiksRmE9U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIiksR2E9U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIiksSGE9U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik7U3ltYm9sLmZvcihcInJlYWN0LnNjb3BlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC5kZWJ1Z190cmFjZV9tb2RlXCIpO1xudmFyIElhPVN5bWJvbC5mb3IoXCJyZWFjdC5vZmZzY3JlZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmxlZ2FjeV9oaWRkZW5cIik7U3ltYm9sLmZvcihcInJlYWN0LmNhY2hlXCIpO1N5bWJvbC5mb3IoXCJyZWFjdC50cmFjaW5nX21hcmtlclwiKTt2YXIgSmE9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEthKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1KYSYmYVtKYV18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH12YXIgQT1PYmplY3QuYXNzaWduLExhO2Z1bmN0aW9uIE1hKGEpe2lmKHZvaWQgMD09PUxhKXRyeXt0aHJvdyBFcnJvcigpO31jYXRjaChjKXt2YXIgYj1jLnN0YWNrLnRyaW0oKS5tYXRjaCgvXFxuKCAqKGF0ICk/KS8pO0xhPWImJmJbMV18fFwiXCJ9cmV0dXJuXCJcXG5cIitMYSthfXZhciBOYT0hMTtcbmZ1bmN0aW9uIE9hKGEsYil7aWYoIWF8fE5hKXJldHVyblwiXCI7TmE9ITA7dmFyIGM9RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U7RXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9dm9pZCAwO3RyeXtpZihiKWlmKGI9ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO30sT2JqZWN0LmRlZmluZVByb3BlcnR5KGIucHJvdG90eXBlLFwicHJvcHNcIix7c2V0OmZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9fSksXCJvYmplY3RcIj09PXR5cGVvZiBSZWZsZWN0JiZSZWZsZWN0LmNvbnN0cnVjdCl7dHJ5e1JlZmxlY3QuY29uc3RydWN0KGIsW10pfWNhdGNoKGwpe3ZhciBkPWx9UmVmbGVjdC5jb25zdHJ1Y3QoYSxbXSxiKX1lbHNle3RyeXtiLmNhbGwoKX1jYXRjaChsKXtkPWx9YS5jYWxsKGIucHJvdG90eXBlKX1lbHNle3RyeXt0aHJvdyBFcnJvcigpO31jYXRjaChsKXtkPWx9YSgpfX1jYXRjaChsKXtpZihsJiZkJiZcInN0cmluZ1wiPT09dHlwZW9mIGwuc3RhY2spe2Zvcih2YXIgZT1sLnN0YWNrLnNwbGl0KFwiXFxuXCIpLFxuZj1kLnN0YWNrLnNwbGl0KFwiXFxuXCIpLGc9ZS5sZW5ndGgtMSxoPWYubGVuZ3RoLTE7MTw9ZyYmMDw9aCYmZVtnXSE9PWZbaF07KWgtLTtmb3IoOzE8PWcmJjA8PWg7Zy0tLGgtLSlpZihlW2ddIT09ZltoXSl7aWYoMSE9PWd8fDEhPT1oKXtkbyBpZihnLS0saC0tLDA+aHx8ZVtnXSE9PWZbaF0pe3ZhciBrPVwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7YS5kaXNwbGF5TmFtZSYmay5pbmNsdWRlcyhcIjxhbm9ueW1vdXM+XCIpJiYoaz1rLnJlcGxhY2UoXCI8YW5vbnltb3VzPlwiLGEuZGlzcGxheU5hbWUpKTtyZXR1cm4ga313aGlsZSgxPD1nJiYwPD1oKX1icmVha319fWZpbmFsbHl7TmE9ITEsRXJyb3IucHJlcGFyZVN0YWNrVHJhY2U9Y31yZXR1cm4oYT1hP2EuZGlzcGxheU5hbWV8fGEubmFtZTpcIlwiKT9NYShhKTpcIlwifVxuZnVuY3Rpb24gUGEoYSl7c3dpdGNoKGEudGFnKXtjYXNlIDU6cmV0dXJuIE1hKGEudHlwZSk7Y2FzZSAxNjpyZXR1cm4gTWEoXCJMYXp5XCIpO2Nhc2UgMTM6cmV0dXJuIE1hKFwiU3VzcGVuc2VcIik7Y2FzZSAxOTpyZXR1cm4gTWEoXCJTdXNwZW5zZUxpc3RcIik7Y2FzZSAwOmNhc2UgMjpjYXNlIDE1OnJldHVybiBhPU9hKGEudHlwZSwhMSksYTtjYXNlIDExOnJldHVybiBhPU9hKGEudHlwZS5yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPU9hKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUWEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB3YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgQWE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgemE6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBFYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBGYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBDYTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSBCYTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBEYTp2YXIgYj1hLnJlbmRlcjthPWEuZGlzcGxheU5hbWU7YXx8KGE9Yi5kaXNwbGF5TmFtZXx8XG5iLm5hbWV8fFwiXCIsYT1cIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIik7cmV0dXJuIGE7Y2FzZSBHYTpyZXR1cm4gYj1hLmRpc3BsYXlOYW1lfHxudWxsLG51bGwhPT1iP2I6UWEoYS50eXBlKXx8XCJNZW1vXCI7Y2FzZSBIYTpiPWEuX3BheWxvYWQ7YT1hLl9pbml0O3RyeXtyZXR1cm4gUWEoYShiKSl9Y2F0Y2goYyl7fX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJhKGEpe3ZhciBiPWEudHlwZTtzd2l0Y2goYS50YWcpe2Nhc2UgMjQ6cmV0dXJuXCJDYWNoZVwiO2Nhc2UgOTpyZXR1cm4oYi5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSAxMDpyZXR1cm4oYi5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSAxODpyZXR1cm5cIkRlaHlkcmF0ZWRGcmFnbWVudFwiO2Nhc2UgMTE6cmV0dXJuIGE9Yi5yZW5kZXIsYT1hLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiXCIsYi5kaXNwbGF5TmFtZXx8KFwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtjYXNlIDc6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgNTpyZXR1cm4gYjtjYXNlIDQ6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIDM6cmV0dXJuXCJSb290XCI7Y2FzZSA2OnJldHVyblwiVGV4dFwiO2Nhc2UgMTY6cmV0dXJuIFFhKGIpO2Nhc2UgODpyZXR1cm4gYj09PXphP1wiU3RyaWN0TW9kZVwiOlwiTW9kZVwiO2Nhc2UgMjI6cmV0dXJuXCJPZmZzY3JlZW5cIjtcbmNhc2UgMTI6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2UgMjE6cmV0dXJuXCJTY29wZVwiO2Nhc2UgMTM6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgMTk6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIjtjYXNlIDI1OnJldHVyblwiVHJhY2luZ01hcmtlclwiO2Nhc2UgMTpjYXNlIDA6Y2FzZSAxNzpjYXNlIDI6Y2FzZSAxNDpjYXNlIDE1OmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBiLmRpc3BsYXlOYW1lfHxiLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiKXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtjYXNlIFwib2JqZWN0XCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1cbmZ1bmN0aW9uIFRhKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBVYShhKXt2YXIgYj1UYShhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24gVmEoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPVVhKGEpKX1mdW5jdGlvbiBXYShhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9VGEoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiBYYShhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19XG5mdW5jdGlvbiBZYShhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gWmEoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9U2EobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBhYihhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJnRhKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBiYihhLGIpe2FiKGEsYik7dmFyIGM9U2EoYi52YWx1ZSksZD1iLnR5cGU7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09ZCl7aWYoMD09PWMmJlwiXCI9PT1hLnZhbHVlfHxhLnZhbHVlIT1jKWEudmFsdWU9XCJcIitjfWVsc2UgYS52YWx1ZSE9PVwiXCIrYyYmKGEudmFsdWU9XCJcIitjKTtlbHNlIGlmKFwic3VibWl0XCI9PT1kfHxcInJlc2V0XCI9PT1kKXthLnJlbW92ZUF0dHJpYnV0ZShcInZhbHVlXCIpO3JldHVybn1iLmhhc093blByb3BlcnR5KFwidmFsdWVcIik/Y2IoYSxiLnR5cGUsYyk6Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSYmY2IoYSxiLnR5cGUsU2EoYi5kZWZhdWx0VmFsdWUpKTtudWxsPT1iLmNoZWNrZWQmJm51bGwhPWIuZGVmYXVsdENoZWNrZWQmJihhLmRlZmF1bHRDaGVja2VkPSEhYi5kZWZhdWx0Q2hlY2tlZCl9XG5mdW5jdGlvbiBkYihhLGIsYyl7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKXt2YXIgZD1iLnR5cGU7aWYoIShcInN1Ym1pdFwiIT09ZCYmXCJyZXNldFwiIT09ZHx8dm9pZCAwIT09Yi52YWx1ZSYmbnVsbCE9PWIudmFsdWUpKXJldHVybjtiPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtjfHxiPT09YS52YWx1ZXx8KGEudmFsdWU9Yik7YS5kZWZhdWx0VmFsdWU9Yn1jPWEubmFtZTtcIlwiIT09YyYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSEhYS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1wiXCIhPT1jJiYoYS5uYW1lPWMpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxYYShhLm93bmVyRG9jdW1lbnQpIT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9dmFyIGViPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBmYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrU2EoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIGdiKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcihwKDkxKSk7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gaGIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IocCg5MikpO2lmKGViKGMpKXtpZigxPGMubGVuZ3RoKXRocm93IEVycm9yKHAoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpTYShjKX19XG5mdW5jdGlvbiBpYihhLGIpe3ZhciBjPVNhKGIudmFsdWUpLGQ9U2EoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBqYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfWZ1bmN0aW9uIGtiKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19XG5mdW5jdGlvbiBsYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/a2IoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbWIsbmI9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiE9PWEubmFtZXNwYWNlVVJJfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bWI9bWJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bWIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bWIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gb2IoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBwYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYXNwZWN0UmF0aW86ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLFxuem9vbTohMCxmaWxsT3BhY2l0eTohMCxmbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxxYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocGIpLmZvckVhY2goZnVuY3Rpb24oYSl7cWIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtwYltiXT1wYlthXX0pfSk7ZnVuY3Rpb24gcmIoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHBiLmhhc093blByb3BlcnR5KGEpJiZwYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiBzYihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1yYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB0Yj1BKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdWIoYSxiKXtpZihiKXtpZih0YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHAoNjApKTtpZihcIm9iamVjdFwiIT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUx8fCEoXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHAoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHAoNjIpKTt9fVxuZnVuY3Rpb24gdmIoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciB3Yj1udWxsO2Z1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IocCgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoKXt9dmFyIEliPSExO2Z1bmN0aW9uIEpiKGEsYixjKXtpZihJYilyZXR1cm4gYShiLGMpO0liPSEwO3RyeXtyZXR1cm4gR2IoYSxiLGMpfWZpbmFsbHl7aWYoSWI9ITEsbnVsbCE9PXpifHxudWxsIT09QWIpSGIoKSxGYigpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYobnVsbD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9RGIoYyk7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PVxudHlwZW9mIGMpdGhyb3cgRXJyb3IocCgyMzEsYix0eXBlb2YgYykpO3JldHVybiBjfXZhciBMYj0hMTtpZihpYSl0cnl7dmFyIE1iPXt9O09iamVjdC5kZWZpbmVQcm9wZXJ0eShNYixcInBhc3NpdmVcIix7Z2V0OmZ1bmN0aW9uKCl7TGI9ITB9fSk7d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpO3dpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidGVzdFwiLE1iLE1iKX1jYXRjaChhKXtMYj0hMX1mdW5jdGlvbiBOYihhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgT2I9ITEsUGI9bnVsbCxRYj0hMSxSYj1udWxsLFNiPXtvbkVycm9yOmZ1bmN0aW9uKGEpe09iPSEwO1BiPWF9fTtmdW5jdGlvbiBUYihhLGIsYyxkLGUsZixnLGgsayl7T2I9ITE7UGI9bnVsbDtOYi5hcHBseShTYixhcmd1bWVudHMpfVxuZnVuY3Rpb24gVWIoYSxiLGMsZCxlLGYsZyxoLGspe1RiLmFwcGx5KHRoaXMsYXJndW1lbnRzKTtpZihPYil7aWYoT2Ipe3ZhciBsPVBiO09iPSExO1BiPW51bGx9ZWxzZSB0aHJvdyBFcnJvcihwKDE5OCkpO1FifHwoUWI9ITAsUmI9bCl9fWZ1bmN0aW9uIFZiKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5mbGFncyY0MDk4KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gV2IoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBYYihhKXtpZihWYihhKSE9PWEpdGhyb3cgRXJyb3IocCgxODgpKTt9XG5mdW5jdGlvbiBZYihhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1WYihhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBYYihlKSxhO2lmKGY9PT1kKXJldHVybiBYYihlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHAoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IocCgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcihwKDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IocCgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIFpiKGEpe2E9WWIoYSk7cmV0dXJuIG51bGwhPT1hPyRiKGEpOm51bGx9ZnVuY3Rpb24gJGIoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGE7Zm9yKGE9YS5jaGlsZDtudWxsIT09YTspe3ZhciBiPSRiKGEpO2lmKG51bGwhPT1iKXJldHVybiBiO2E9YS5zaWJsaW5nfXJldHVybiBudWxsfVxudmFyIGFjPWNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssYmM9Y2EudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2ssY2M9Y2EudW5zdGFibGVfc2hvdWxkWWllbGQsZGM9Y2EudW5zdGFibGVfcmVxdWVzdFBhaW50LEI9Y2EudW5zdGFibGVfbm93LGVjPWNhLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLGZjPWNhLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LGdjPWNhLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGhjPWNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LGljPWNhLnVuc3RhYmxlX0xvd1ByaW9yaXR5LGpjPWNhLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxrYz1udWxsLGxjPW51bGw7ZnVuY3Rpb24gbWMoYSl7aWYobGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBsYy5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Db21taXRGaWJlclJvb3Qoa2MsYSx2b2lkIDAsMTI4PT09KGEuY3VycmVudC5mbGFncyYxMjgpKX1jYXRjaChiKXt9fVxudmFyIG9jPU1hdGguY2x6MzI/TWF0aC5jbHozMjpuYyxwYz1NYXRoLmxvZyxxYz1NYXRoLkxOMjtmdW5jdGlvbiBuYyhhKXthPj4+PTA7cmV0dXJuIDA9PT1hPzMyOjMxLShwYyhhKS9xY3wwKXwwfXZhciByYz02NCxzYz00MTk0MzA0O1xuZnVuY3Rpb24gdGMoYSl7c3dpdGNoKGEmLWEpe2Nhc2UgMTpyZXR1cm4gMTtjYXNlIDI6cmV0dXJuIDI7Y2FzZSA0OnJldHVybiA0O2Nhc2UgODpyZXR1cm4gODtjYXNlIDE2OnJldHVybiAxNjtjYXNlIDMyOnJldHVybiAzMjtjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBhJjQxOTQyNDA7Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDpyZXR1cm4gYSYxMzAwMjM0MjQ7Y2FzZSAxMzQyMTc3Mjg6cmV0dXJuIDEzNDIxNzcyODtjYXNlIDI2ODQzNTQ1NjpyZXR1cm4gMjY4NDM1NDU2O2Nhc2UgNTM2ODcwOTEyOnJldHVybiA1MzY4NzA5MTI7Y2FzZSAxMDczNzQxODI0OnJldHVybiAxMDczNzQxODI0O1xuZGVmYXVsdDpyZXR1cm4gYX19ZnVuY3Rpb24gdWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gMDt2YXIgZD0wLGU9YS5zdXNwZW5kZWRMYW5lcyxmPWEucGluZ2VkTGFuZXMsZz1jJjI2ODQzNTQ1NTtpZigwIT09Zyl7dmFyIGg9ZyZ+ZTswIT09aD9kPXRjKGgpOihmJj1nLDAhPT1mJiYoZD10YyhmKSkpfWVsc2UgZz1jJn5lLDAhPT1nP2Q9dGMoZyk6MCE9PWYmJihkPXRjKGYpKTtpZigwPT09ZClyZXR1cm4gMDtpZigwIT09YiYmYiE9PWQmJjA9PT0oYiZlKSYmKGU9ZCYtZCxmPWImLWIsZT49Znx8MTY9PT1lJiYwIT09KGYmNDE5NDI0MCkpKXJldHVybiBiOzAhPT0oZCY0KSYmKGR8PWMmMTYpO2I9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtb2MoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiB2YyhhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgNDpyZXR1cm4gYisyNTA7Y2FzZSA4OmNhc2UgMTY6Y2FzZSAzMjpjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOnJldHVybiBiKzVFMztjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybi0xO2Nhc2UgMTM0MjE3NzI4OmNhc2UgMjY4NDM1NDU2OmNhc2UgNTM2ODcwOTEyOmNhc2UgMTA3Mzc0MTgyNDpyZXR1cm4tMTtkZWZhdWx0OnJldHVybi0xfX1cbmZ1bmN0aW9uIHdjKGEsYil7Zm9yKHZhciBjPWEuc3VzcGVuZGVkTGFuZXMsZD1hLnBpbmdlZExhbmVzLGU9YS5leHBpcmF0aW9uVGltZXMsZj1hLnBlbmRpbmdMYW5lczswPGY7KXt2YXIgZz0zMS1vYyhmKSxoPTE8PGcsaz1lW2ddO2lmKC0xPT09ayl7aWYoMD09PShoJmMpfHwwIT09KGgmZCkpZVtnXT12YyhoLGIpfWVsc2Ugazw9YiYmKGEuZXhwaXJlZExhbmVzfD1oKTtmJj1+aH19ZnVuY3Rpb24geGMoYSl7YT1hLnBlbmRpbmdMYW5lcyYtMTA3Mzc0MTgyNTtyZXR1cm4gMCE9PWE/YTphJjEwNzM3NDE4MjQ/MTA3Mzc0MTgyNDowfWZ1bmN0aW9uIHljKCl7dmFyIGE9cmM7cmM8PD0xOzA9PT0ocmMmNDE5NDI0MCkmJihyYz02NCk7cmV0dXJuIGF9ZnVuY3Rpb24gemMoYSl7Zm9yKHZhciBiPVtdLGM9MDszMT5jO2MrKyliLnB1c2goYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiBBYyhhLGIsYyl7YS5wZW5kaW5nTGFuZXN8PWI7NTM2ODcwOTEyIT09YiYmKGEuc3VzcGVuZGVkTGFuZXM9MCxhLnBpbmdlZExhbmVzPTApO2E9YS5ldmVudFRpbWVzO2I9MzEtb2MoYik7YVtiXT1jfWZ1bmN0aW9uIEJjKGEsYil7dmFyIGM9YS5wZW5kaW5nTGFuZXMmfmI7YS5wZW5kaW5nTGFuZXM9YjthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1iO2EubXV0YWJsZVJlYWRMYW5lcyY9YjthLmVudGFuZ2xlZExhbmVzJj1iO2I9YS5lbnRhbmdsZW1lbnRzO3ZhciBkPWEuZXZlbnRUaW1lcztmb3IoYT1hLmV4cGlyYXRpb25UaW1lczswPGM7KXt2YXIgZT0zMS1vYyhjKSxmPTE8PGU7YltlXT0wO2RbZV09LTE7YVtlXT0tMTtjJj1+Zn19XG5mdW5jdGlvbiBDYyhhLGIpe3ZhciBjPWEuZW50YW5nbGVkTGFuZXN8PWI7Zm9yKGE9YS5lbnRhbmdsZW1lbnRzO2M7KXt2YXIgZD0zMS1vYyhjKSxlPTE8PGQ7ZSZifGFbZF0mYiYmKGFbZF18PWIpO2MmPX5lfX12YXIgQz0wO2Z1bmN0aW9uIERjKGEpe2EmPS1hO3JldHVybiAxPGE/NDxhPzAhPT0oYSYyNjg0MzU0NTUpPzE2OjUzNjg3MDkxMjo0OjF9dmFyIEVjLEZjLEdjLEhjLEljLEpjPSExLEtjPVtdLExjPW51bGwsTWM9bnVsbCxOYz1udWxsLE9jPW5ldyBNYXAsUGM9bmV3IE1hcCxRYz1bXSxSYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBTYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNpblwiOmNhc2UgXCJmb2N1c291dFwiOkxjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpNYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpOYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6T2MuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6UGMuZGVsZXRlKGIucG9pbnRlcklkKX19XG5mdW5jdGlvbiBUYyhhLGIsYyxkLGUsZil7aWYobnVsbD09PWF8fGEubmF0aXZlRXZlbnQhPT1mKXJldHVybiBhPXtibG9ja2VkT246Yixkb21FdmVudE5hbWU6YyxldmVudFN5c3RlbUZsYWdzOmQsbmF0aXZlRXZlbnQ6Zix0YXJnZXRDb250YWluZXJzOltlXX0sbnVsbCE9PWImJihiPUNiKGIpLG51bGwhPT1iJiZGYyhiKSksYTthLmV2ZW50U3lzdGVtRmxhZ3N8PWQ7Yj1hLnRhcmdldENvbnRhaW5lcnM7bnVsbCE9PWUmJi0xPT09Yi5pbmRleE9mKGUpJiZiLnB1c2goZSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBVYyhhLGIsYyxkLGUpe3N3aXRjaChiKXtjYXNlIFwiZm9jdXNpblwiOnJldHVybiBMYz1UYyhMYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gTWM9VGMoTWMsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIE5jPVRjKE5jLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7T2Muc2V0KGYsVGMoT2MuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLFBjLnNldChmLFRjKFBjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFZjKGEpe3ZhciBiPVdjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9VmIoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9V2IoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7SWMoYS5wcmlvcml0eSxmdW5jdGlvbigpe0djKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1cbmZ1bmN0aW9uIFhjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTtmb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz1ZYyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsPT09Yyl7Yz1hLm5hdGl2ZUV2ZW50O3ZhciBkPW5ldyBjLmNvbnN0cnVjdG9yKGMudHlwZSxjKTt3Yj1kO2MudGFyZ2V0LmRpc3BhdGNoRXZlbnQoZCk7d2I9bnVsbH1lbHNlIHJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZGYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiBaYyhhLGIsYyl7WGMoYSkmJmMuZGVsZXRlKGIpfWZ1bmN0aW9uICRjKCl7SmM9ITE7bnVsbCE9PUxjJiZYYyhMYykmJihMYz1udWxsKTtudWxsIT09TWMmJlhjKE1jKSYmKE1jPW51bGwpO251bGwhPT1OYyYmWGMoTmMpJiYoTmM9bnVsbCk7T2MuZm9yRWFjaChaYyk7UGMuZm9yRWFjaChaYyl9XG5mdW5jdGlvbiBhZChhLGIpe2EuYmxvY2tlZE9uPT09YiYmKGEuYmxvY2tlZE9uPW51bGwsSmN8fChKYz0hMCxjYS51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKGNhLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LCRjKSkpfVxuZnVuY3Rpb24gYmQoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gYWQoYixhKX1pZigwPEtjLmxlbmd0aCl7YWQoS2NbMF0sYSk7Zm9yKHZhciBjPTE7YzxLYy5sZW5ndGg7YysrKXt2YXIgZD1LY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUxjJiZhZChMYyxhKTtudWxsIT09TWMmJmFkKE1jLGEpO251bGwhPT1OYyYmYWQoTmMsYSk7T2MuZm9yRWFjaChiKTtQYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxRYy5sZW5ndGg7YysrKWQ9UWNbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPFFjLmxlbmd0aCYmKGM9UWNbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspVmMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZRYy5zaGlmdCgpfXZhciBjZD11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxkZD0hMDtcbmZ1bmN0aW9uIGVkKGEsYixjLGQpe3ZhciBlPUMsZj1jZC50cmFuc2l0aW9uO2NkLnRyYW5zaXRpb249bnVsbDt0cnl7Qz0xLGZkKGEsYixjLGQpfWZpbmFsbHl7Qz1lLGNkLnRyYW5zaXRpb249Zn19ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTQsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1cbmZ1bmN0aW9uIGZkKGEsYixjLGQpe2lmKGRkKXt2YXIgZT1ZYyhhLGIsYyxkKTtpZihudWxsPT09ZSloZChhLGIsZCxpZCxjKSxTYyhhLGQpO2Vsc2UgaWYoVWMoZSxhLGIsYyxkKSlkLnN0b3BQcm9wYWdhdGlvbigpO2Vsc2UgaWYoU2MoYSxkKSxiJjQmJi0xPFJjLmluZGV4T2YoYSkpe2Zvcig7bnVsbCE9PWU7KXt2YXIgZj1DYihlKTtudWxsIT09ZiYmRWMoZik7Zj1ZYyhhLGIsYyxkKTtudWxsPT09ZiYmaGQoYSxiLGQsaWQsYyk7aWYoZj09PWUpYnJlYWs7ZT1mfW51bGwhPT1lJiZkLnN0b3BQcm9wYWdhdGlvbigpfWVsc2UgaGQoYSxiLGQsbnVsbCxjKX19dmFyIGlkPW51bGw7XG5mdW5jdGlvbiBZYyhhLGIsYyxkKXtpZD1udWxsO2E9eGIoZCk7YT1XYyhhKTtpZihudWxsIT09YSlpZihiPVZiKGEpLG51bGw9PT1iKWE9bnVsbDtlbHNlIGlmKGM9Yi50YWcsMTM9PT1jKXthPVdiKGIpO2lmKG51bGwhPT1hKXJldHVybiBhO2E9bnVsbH1lbHNlIGlmKDM9PT1jKXtpZihiLnN0YXRlTm9kZS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXJldHVybiAzPT09Yi50YWc/Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO2E9bnVsbH1lbHNlIGIhPT1hJiYoYT1udWxsKTtpZD1hO3JldHVybiBudWxsfVxuZnVuY3Rpb24gamQoYSl7c3dpdGNoKGEpe2Nhc2UgXCJjYW5jZWxcIjpjYXNlIFwiY2xpY2tcIjpjYXNlIFwiY2xvc2VcIjpjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwiY29weVwiOmNhc2UgXCJjdXRcIjpjYXNlIFwiYXV4Y2xpY2tcIjpjYXNlIFwiZGJsY2xpY2tcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmNhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcImludmFsaWRcIjpjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJrZXl1cFwiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJwYXN0ZVwiOmNhc2UgXCJwYXVzZVwiOmNhc2UgXCJwbGF5XCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcnVwXCI6Y2FzZSBcInJhdGVjaGFuZ2VcIjpjYXNlIFwicmVzZXRcIjpjYXNlIFwicmVzaXplXCI6Y2FzZSBcInNlZWtlZFwiOmNhc2UgXCJzdWJtaXRcIjpjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2hzdGFydFwiOmNhc2UgXCJ2b2x1bWVjaGFuZ2VcIjpjYXNlIFwiY2hhbmdlXCI6Y2FzZSBcInNlbGVjdGlvbmNoYW5nZVwiOmNhc2UgXCJ0ZXh0SW5wdXRcIjpjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOmNhc2UgXCJjb21wb3NpdGlvbmVuZFwiOmNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmNhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOmNhc2UgXCJiZWZvcmVpbnB1dFwiOmNhc2UgXCJibHVyXCI6Y2FzZSBcImZ1bGxzY3JlZW5jaGFuZ2VcIjpjYXNlIFwiZm9jdXNcIjpjYXNlIFwiaGFzaGNoYW5nZVwiOmNhc2UgXCJwb3BzdGF0ZVwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwic2VsZWN0c3RhcnRcIjpyZXR1cm4gMTtjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcIm1vdXNlbW92ZVwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJzY3JvbGxcIjpjYXNlIFwidG9nZ2xlXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ3aGVlbFwiOmNhc2UgXCJtb3VzZWVudGVyXCI6Y2FzZSBcIm1vdXNlbGVhdmVcIjpjYXNlIFwicG9pbnRlcmVudGVyXCI6Y2FzZSBcInBvaW50ZXJsZWF2ZVwiOnJldHVybiA0O1xuY2FzZSBcIm1lc3NhZ2VcIjpzd2l0Y2goZWMoKSl7Y2FzZSBmYzpyZXR1cm4gMTtjYXNlIGdjOnJldHVybiA0O2Nhc2UgaGM6Y2FzZSBpYzpyZXR1cm4gMTY7Y2FzZSBqYzpyZXR1cm4gNTM2ODcwOTEyO2RlZmF1bHQ6cmV0dXJuIDE2fWRlZmF1bHQ6cmV0dXJuIDE2fX12YXIga2Q9bnVsbCxsZD1udWxsLG1kPW51bGw7ZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfVxuZnVuY3Rpb24gb2QoYSl7dmFyIGI9YS5rZXlDb2RlO1wiY2hhckNvZGVcImluIGE/KGE9YS5jaGFyQ29kZSwwPT09YSYmMTM9PT1iJiYoYT0xMykpOmE9YjsxMD09PWEmJihhPTEzKTtyZXR1cm4gMzI8PWF8fDEzPT09YT9hOjB9ZnVuY3Rpb24gcGQoKXtyZXR1cm4hMH1mdW5jdGlvbiBxZCgpe3JldHVybiExfVxuZnVuY3Rpb24gcmQoYSl7ZnVuY3Rpb24gYihiLGQsZSxmLGcpe3RoaXMuX3JlYWN0TmFtZT1iO3RoaXMuX3RhcmdldEluc3Q9ZTt0aGlzLnR5cGU9ZDt0aGlzLm5hdGl2ZUV2ZW50PWY7dGhpcy50YXJnZXQ9Zzt0aGlzLmN1cnJlbnRUYXJnZXQ9bnVsbDtmb3IodmFyIGMgaW4gYSlhLmhhc093blByb3BlcnR5KGMpJiYoYj1hW2NdLHRoaXNbY109Yj9iKGYpOmZbY10pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1mLmRlZmF1bHRQcmV2ZW50ZWQ/Zi5kZWZhdWx0UHJldmVudGVkOiExPT09Zi5yZXR1cm5WYWx1ZSk/cGQ6cWQ7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1xZDtyZXR1cm4gdGhpc31BKGIucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiZcbihhLnJldHVyblZhbHVlPSExKSx0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1wZCl9LHN0b3BQcm9wYWdhdGlvbjpmdW5jdGlvbigpe3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEuc3RvcFByb3BhZ2F0aW9uP2Euc3RvcFByb3BhZ2F0aW9uKCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5jYW5jZWxCdWJibGUmJihhLmNhbmNlbEJ1YmJsZT0hMCksdGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD1wZCl9LHBlcnNpc3Q6ZnVuY3Rpb24oKXt9LGlzUGVyc2lzdGVudDpwZH0pO3JldHVybiBifVxudmFyIHNkPXtldmVudFBoYXNlOjAsYnViYmxlczowLGNhbmNlbGFibGU6MCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOjAsaXNUcnVzdGVkOjB9LHRkPXJkKHNkKSx1ZD1BKHt9LHNkLHt2aWV3OjAsZGV0YWlsOjB9KSx2ZD1yZCh1ZCksd2QseGQseWQsQWQ9QSh7fSx1ZCx7c2NyZWVuWDowLHNjcmVlblk6MCxjbGllbnRYOjAsY2xpZW50WTowLHBhZ2VYOjAscGFnZVk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxidXR0b246MCxidXR0b25zOjAscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gdm9pZCAwPT09YS5yZWxhdGVkVGFyZ2V0P2EuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudDphLnJlbGF0ZWRUYXJnZXR9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW5cbmEpcmV0dXJuIGEubW92ZW1lbnRYO2EhPT15ZCYmKHlkJiZcIm1vdXNlbW92ZVwiPT09YS50eXBlPyh3ZD1hLnNjcmVlblgteWQuc2NyZWVuWCx4ZD1hLnNjcmVlblkteWQuc2NyZWVuWSk6eGQ9d2Q9MCx5ZD1hKTtyZXR1cm4gd2R9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtyZXR1cm5cIm1vdmVtZW50WVwiaW4gYT9hLm1vdmVtZW50WTp4ZH19KSxCZD1yZChBZCksQ2Q9QSh7fSxBZCx7ZGF0YVRyYW5zZmVyOjB9KSxEZD1yZChDZCksRWQ9QSh7fSx1ZCx7cmVsYXRlZFRhcmdldDowfSksRmQ9cmQoRWQpLEdkPUEoe30sc2Qse2FuaW1hdGlvbk5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLEhkPXJkKEdkKSxJZD1BKHt9LHNkLHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksSmQ9cmQoSWQpLEtkPUEoe30sc2Qse2RhdGE6MH0pLExkPXJkKEtkKSxNZD17RXNjOlwiRXNjYXBlXCIsXG5TcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxOZD17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIiwxMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIixcbjExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0sT2Q9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIFBkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9T2RbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB6ZCgpe3JldHVybiBQZH1cbnZhciBRZD1BKHt9LHVkLHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPU1kW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9kKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9OZFthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGNvZGU6MCxsb2NhdGlvbjowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxyZXBlYXQ6MCxsb2NhbGU6MCxnZXRNb2RpZmllclN0YXRlOnpkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT9vZChhKTowfSxrZXlDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9LHdoaWNoOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29kKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksUmQ9cmQoUWQpLFNkPUEoe30sQWQse3BvaW50ZXJJZDowLHdpZHRoOjAsaGVpZ2h0OjAscHJlc3N1cmU6MCx0YW5nZW50aWFsUHJlc3N1cmU6MCx0aWx0WDowLHRpbHRZOjAsdHdpc3Q6MCxwb2ludGVyVHlwZTowLGlzUHJpbWFyeTowfSksVGQ9cmQoU2QpLFVkPUEoe30sdWQse3RvdWNoZXM6MCx0YXJnZXRUb3VjaGVzOjAsY2hhbmdlZFRvdWNoZXM6MCxhbHRLZXk6MCxtZXRhS2V5OjAsY3RybEtleTowLHNoaWZ0S2V5OjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZH0pLFZkPXJkKFVkKSxXZD1BKHt9LHNkLHtwcm9wZXJ0eU5hbWU6MCxlbGFwc2VkVGltZTowLHBzZXVkb0VsZW1lbnQ6MH0pLFhkPXJkKFdkKSxZZD1BKHt9LEFkLHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW4gYT8tYS53aGVlbERlbHRhWDowfSxcbmRlbHRhWTpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWVwiaW4gYT9hLmRlbHRhWTpcIndoZWVsRGVsdGFZXCJpbiBhPy1hLndoZWVsRGVsdGFZOlwid2hlZWxEZWx0YVwiaW4gYT8tYS53aGVlbERlbHRhOjB9LGRlbHRhWjowLGRlbHRhTW9kZTowfSksWmQ9cmQoWWQpLCRkPVs5LDEzLDI3LDMyXSxhZT1pYSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csYmU9bnVsbDtpYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoYmU9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTt2YXIgY2U9aWEmJlwiVGV4dEV2ZW50XCJpbiB3aW5kb3cmJiFiZSxkZT1pYSYmKCFhZXx8YmUmJjg8YmUmJjExPj1iZSksZWU9U3RyaW5nLmZyb21DaGFyQ29kZSgzMiksZmU9ITE7XG5mdW5jdGlvbiBnZShhLGIpe3N3aXRjaChhKXtjYXNlIFwia2V5dXBcIjpyZXR1cm4tMSE9PSRkLmluZGV4T2YoYi5rZXlDb2RlKTtjYXNlIFwia2V5ZG93blwiOnJldHVybiAyMjkhPT1iLmtleUNvZGU7Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJmb2N1c291dFwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIGhlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIGllPSExO2Z1bmN0aW9uIGplKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBoZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7ZmU9ITA7cmV0dXJuIGVlO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PWVlJiZmZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBrZShhLGIpe2lmKGllKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFhZSYmZ2UoYSxiKT8oYT1uZCgpLG1kPWxkPWtkPW51bGwsaWU9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGRlJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciBsZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiBtZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIWxlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1mdW5jdGlvbiBuZShhLGIsYyxkKXtFYihkKTtiPW9lKGIsXCJvbkNoYW5nZVwiKTswPGIubGVuZ3RoJiYoYz1uZXcgdGQoXCJvbkNoYW5nZVwiLFwiY2hhbmdlXCIsbnVsbCxjLGQpLGEucHVzaCh7ZXZlbnQ6YyxsaXN0ZW5lcnM6Yn0pKX12YXIgcGU9bnVsbCxxZT1udWxsO2Z1bmN0aW9uIHJlKGEpe3NlKGEsMCl9ZnVuY3Rpb24gdGUoYSl7dmFyIGI9dWUoYSk7aWYoV2EoYikpcmV0dXJuIGF9XG5mdW5jdGlvbiB2ZShhLGIpe2lmKFwiY2hhbmdlXCI9PT1hKXJldHVybiBifXZhciB3ZT0hMTtpZihpYSl7dmFyIHhlO2lmKGlhKXt2YXIgeWU9XCJvbmlucHV0XCJpbiBkb2N1bWVudDtpZigheWUpe3ZhciB6ZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3plLnNldEF0dHJpYnV0ZShcIm9uaW5wdXRcIixcInJldHVybjtcIik7eWU9XCJmdW5jdGlvblwiPT09dHlwZW9mIHplLm9uaW5wdXR9eGU9eWV9ZWxzZSB4ZT0hMTt3ZT14ZSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKX1mdW5jdGlvbiBBZSgpe3BlJiYocGUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpLHFlPXBlPW51bGwpfWZ1bmN0aW9uIEJlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZ0ZShxZSkpe3ZhciBiPVtdO25lKGIscWUsYSx4YihhKSk7SmIocmUsYil9fVxuZnVuY3Rpb24gQ2UoYSxiLGMpe1wiZm9jdXNpblwiPT09YT8oQWUoKSxwZT1iLHFlPWMscGUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsQmUpKTpcImZvY3Vzb3V0XCI9PT1hJiZBZSgpfWZ1bmN0aW9uIERlKGEpe2lmKFwic2VsZWN0aW9uY2hhbmdlXCI9PT1hfHxcImtleXVwXCI9PT1hfHxcImtleWRvd25cIj09PWEpcmV0dXJuIHRlKHFlKX1mdW5jdGlvbiBFZShhLGIpe2lmKFwiY2xpY2tcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEZlKGEsYil7aWYoXCJpbnB1dFwiPT09YXx8XCJjaGFuZ2VcIj09PWEpcmV0dXJuIHRlKGIpfWZ1bmN0aW9uIEdlKGEsYil7cmV0dXJuIGE9PT1iJiYoMCE9PWF8fDEvYT09PTEvYil8fGEhPT1hJiZiIT09Yn12YXIgSGU9XCJmdW5jdGlvblwiPT09dHlwZW9mIE9iamVjdC5pcz9PYmplY3QuaXM6R2U7XG5mdW5jdGlvbiBJZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTtpZighamEuY2FsbChiLGUpfHwhSGUoYVtlXSxiW2VdKSlyZXR1cm4hMX1yZXR1cm4hMH1mdW5jdGlvbiBKZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBLZShhLGIpe3ZhciBjPUplKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUplKGMpfX1mdW5jdGlvbiBMZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP0xlKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE1lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG5mdW5jdGlvbiBPZShhKXt2YXIgYj1NZSgpLGM9YS5mb2N1c2VkRWxlbSxkPWEuc2VsZWN0aW9uUmFuZ2U7aWYoYiE9PWMmJmMmJmMub3duZXJEb2N1bWVudCYmTGUoYy5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxjKSl7aWYobnVsbCE9PWQmJk5lKGMpKWlmKGI9ZC5zdGFydCxhPWQuZW5kLHZvaWQgMD09PWEmJihhPWIpLFwic2VsZWN0aW9uU3RhcnRcImluIGMpYy5zZWxlY3Rpb25TdGFydD1iLGMuc2VsZWN0aW9uRW5kPU1hdGgubWluKGEsYy52YWx1ZS5sZW5ndGgpO2Vsc2UgaWYoYT0oYj1jLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmYi5kZWZhdWx0Vmlld3x8d2luZG93LGEuZ2V0U2VsZWN0aW9uKXthPWEuZ2V0U2VsZWN0aW9uKCk7dmFyIGU9Yy50ZXh0Q29udGVudC5sZW5ndGgsZj1NYXRoLm1pbihkLnN0YXJ0LGUpO2Q9dm9pZCAwPT09ZC5lbmQ/ZjpNYXRoLm1pbihkLmVuZCxlKTshYS5leHRlbmQmJmY+ZCYmKGU9ZCxkPWYsZj1lKTtlPUtlKGMsZik7dmFyIGc9S2UoYyxcbmQpO2UmJmcmJigxIT09YS5yYW5nZUNvdW50fHxhLmFuY2hvck5vZGUhPT1lLm5vZGV8fGEuYW5jaG9yT2Zmc2V0IT09ZS5vZmZzZXR8fGEuZm9jdXNOb2RlIT09Zy5ub2RlfHxhLmZvY3VzT2Zmc2V0IT09Zy5vZmZzZXQpJiYoYj1iLmNyZWF0ZVJhbmdlKCksYi5zZXRTdGFydChlLm5vZGUsZS5vZmZzZXQpLGEucmVtb3ZlQWxsUmFuZ2VzKCksZj5kPyhhLmFkZFJhbmdlKGIpLGEuZXh0ZW5kKGcubm9kZSxnLm9mZnNldCkpOihiLnNldEVuZChnLm5vZGUsZy5vZmZzZXQpLGEuYWRkUmFuZ2UoYikpKX1iPVtdO2ZvcihhPWM7YT1hLnBhcmVudE5vZGU7KTE9PT1hLm5vZGVUeXBlJiZiLnB1c2goe2VsZW1lbnQ6YSxsZWZ0OmEuc2Nyb2xsTGVmdCx0b3A6YS5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5mb2N1cyYmYy5mb2N1cygpO2ZvcihjPTA7YzxiLmxlbmd0aDtjKyspYT1iW2NdLGEuZWxlbWVudC5zY3JvbGxMZWZ0PWEubGVmdCxhLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfX1cbnZhciBQZT1pYSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLFFlPW51bGwsUmU9bnVsbCxTZT1udWxsLFRlPSExO1xuZnVuY3Rpb24gVWUoYSxiLGMpe3ZhciBkPWMud2luZG93PT09Yz9jLmRvY3VtZW50Ojk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50O1RlfHxudWxsPT1RZXx8UWUhPT1YYShkKXx8KGQ9UWUsXCJzZWxlY3Rpb25TdGFydFwiaW4gZCYmTmUoZCk/ZD17c3RhcnQ6ZC5zZWxlY3Rpb25TdGFydCxlbmQ6ZC5zZWxlY3Rpb25FbmR9OihkPShkLm93bmVyRG9jdW1lbnQmJmQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxkPXthbmNob3JOb2RlOmQuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6ZC5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmQuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmQuZm9jdXNPZmZzZXR9KSxTZSYmSWUoU2UsZCl8fChTZT1kLGQ9b2UoUmUsXCJvblNlbGVjdFwiKSwwPGQubGVuZ3RoJiYoYj1uZXcgdGQoXCJvblNlbGVjdFwiLFwic2VsZWN0XCIsbnVsbCxiLGMpLGEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6ZH0pLGIudGFyZ2V0PVFlKSkpfVxuZnVuY3Rpb24gVmUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgV2U9e2FuaW1hdGlvbmVuZDpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpWZShcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlZlKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sWGU9e30sWWU9e307XG5pYSYmKFllPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFdlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFdlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFdlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gWmUoYSl7aWYoWGVbYV0pcmV0dXJuIFhlW2FdO2lmKCFXZVthXSlyZXR1cm4gYTt2YXIgYj1XZVthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBZZSlyZXR1cm4gWGVbYV09YltjXTtyZXR1cm4gYX12YXIgJGU9WmUoXCJhbmltYXRpb25lbmRcIiksYWY9WmUoXCJhbmltYXRpb25pdGVyYXRpb25cIiksYmY9WmUoXCJhbmltYXRpb25zdGFydFwiKSxjZj1aZShcInRyYW5zaXRpb25lbmRcIiksZGY9bmV3IE1hcCxlZj1cImFib3J0IGF1eENsaWNrIGNhbmNlbCBjYW5QbGF5IGNhblBsYXlUaHJvdWdoIGNsaWNrIGNsb3NlIGNvbnRleHRNZW51IGNvcHkgY3V0IGRyYWcgZHJhZ0VuZCBkcmFnRW50ZXIgZHJhZ0V4aXQgZHJhZ0xlYXZlIGRyYWdPdmVyIGRyYWdTdGFydCBkcm9wIGR1cmF0aW9uQ2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGdvdFBvaW50ZXJDYXB0dXJlIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBsb2FkIGxvYWRlZERhdGEgbG9hZGVkTWV0YWRhdGEgbG9hZFN0YXJ0IGxvc3RQb2ludGVyQ2FwdHVyZSBtb3VzZURvd24gbW91c2VNb3ZlIG1vdXNlT3V0IG1vdXNlT3ZlciBtb3VzZVVwIHBhc3RlIHBhdXNlIHBsYXkgcGxheWluZyBwb2ludGVyQ2FuY2VsIHBvaW50ZXJEb3duIHBvaW50ZXJNb3ZlIHBvaW50ZXJPdXQgcG9pbnRlck92ZXIgcG9pbnRlclVwIHByb2dyZXNzIHJhdGVDaGFuZ2UgcmVzZXQgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VibWl0IHN1c3BlbmQgdGltZVVwZGF0ZSB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZSBzY3JvbGwgdG9nZ2xlIHRvdWNoTW92ZSB3YWl0aW5nIHdoZWVsXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gZmYoYSxiKXtkZi5zZXQoYSxiKTtmYShiLFthXSl9Zm9yKHZhciBnZj0wO2dmPGVmLmxlbmd0aDtnZisrKXt2YXIgaGY9ZWZbZ2ZdLGpmPWhmLnRvTG93ZXJDYXNlKCksa2Y9aGZbMF0udG9VcHBlckNhc2UoKStoZi5zbGljZSgxKTtmZihqZixcIm9uXCIra2YpfWZmKCRlLFwib25BbmltYXRpb25FbmRcIik7ZmYoYWYsXCJvbkFuaW1hdGlvbkl0ZXJhdGlvblwiKTtmZihiZixcIm9uQW5pbWF0aW9uU3RhcnRcIik7ZmYoXCJkYmxjbGlja1wiLFwib25Eb3VibGVDbGlja1wiKTtmZihcImZvY3VzaW5cIixcIm9uRm9jdXNcIik7ZmYoXCJmb2N1c291dFwiLFwib25CbHVyXCIpO2ZmKGNmLFwib25UcmFuc2l0aW9uRW5kXCIpO2hhKFwib25Nb3VzZUVudGVyXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7aGEoXCJvbk1vdXNlTGVhdmVcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uUG9pbnRlckVudGVyXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO1xuaGEoXCJvblBvaW50ZXJMZWF2ZVwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtmYShcIm9uQ2hhbmdlXCIsXCJjaGFuZ2UgY2xpY2sgZm9jdXNpbiBmb2N1c291dCBpbnB1dCBrZXlkb3duIGtleXVwIHNlbGVjdGlvbmNoYW5nZVwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvblNlbGVjdFwiLFwiZm9jdXNvdXQgY29udGV4dG1lbnUgZHJhZ2VuZCBmb2N1c2luIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uQmVmb3JlSW5wdXRcIixbXCJjb21wb3NpdGlvbmVuZFwiLFwia2V5cHJlc3NcIixcInRleHRJbnB1dFwiLFwicGFzdGVcIl0pO2ZhKFwib25Db21wb3NpdGlvbkVuZFwiLFwiY29tcG9zaXRpb25lbmQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO2ZhKFwib25Db21wb3NpdGlvblN0YXJ0XCIsXCJjb21wb3NpdGlvbnN0YXJ0IGZvY3Vzb3V0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpKTtcbmZhKFwib25Db21wb3NpdGlvblVwZGF0ZVwiLFwiY29tcG9zaXRpb251cGRhdGUgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO3ZhciBsZj1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2UgcmVzaXplIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLG1mPW5ldyBTZXQoXCJjYW5jZWwgY2xvc2UgaW52YWxpZCBsb2FkIHNjcm9sbCB0b2dnbGVcIi5zcGxpdChcIiBcIikuY29uY2F0KGxmKSk7XG5mdW5jdGlvbiBuZihhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9YztVYihkLGIsdm9pZCAwLGEpO2EuY3VycmVudFRhcmdldD1udWxsfVxuZnVuY3Rpb24gc2UoYSxiKXtiPTAhPT0oYiY0KTtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrKyl7dmFyIGQ9YVtjXSxlPWQuZXZlbnQ7ZD1kLmxpc3RlbmVyczthOnt2YXIgZj12b2lkIDA7aWYoYilmb3IodmFyIGc9ZC5sZW5ndGgtMTswPD1nO2ctLSl7dmFyIGg9ZFtnXSxrPWguaW5zdGFuY2UsbD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtuZihlLGgsbCk7Zj1rfWVsc2UgZm9yKGc9MDtnPGQubGVuZ3RoO2crKyl7aD1kW2ddO2s9aC5pbnN0YW5jZTtsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9fX1pZihRYil0aHJvdyBhPVJiLFFiPSExLFJiPW51bGwsYTt9XG5mdW5jdGlvbiBEKGEsYil7dmFyIGM9YltvZl07dm9pZCAwPT09YyYmKGM9YltvZl09bmV3IFNldCk7dmFyIGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChwZihiLGEsMiwhMSksYy5hZGQoZCkpfWZ1bmN0aW9uIHFmKGEsYixjKXt2YXIgZD0wO2ImJihkfD00KTtwZihjLGEsZCxiKX12YXIgcmY9XCJfcmVhY3RMaXN0ZW5pbmdcIitNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKTtmdW5jdGlvbiBzZihhKXtpZighYVtyZl0pe2FbcmZdPSEwO2RhLmZvckVhY2goZnVuY3Rpb24oYil7XCJzZWxlY3Rpb25jaGFuZ2VcIiE9PWImJihtZi5oYXMoYil8fHFmKGIsITEsYSkscWYoYiwhMCxhKSl9KTt2YXIgYj05PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudDtudWxsPT09Ynx8YltyZl18fChiW3JmXT0hMCxxZihcInNlbGVjdGlvbmNoYW5nZVwiLCExLGIpKX19XG5mdW5jdGlvbiBwZihhLGIsYyxkKXtzd2l0Y2goamQoYikpe2Nhc2UgMTp2YXIgZT1lZDticmVhaztjYXNlIDQ6ZT1nZDticmVhaztkZWZhdWx0OmU9ZmR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IUxifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGhkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9V2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufUpiKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1kZi5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQsbj1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjpuPVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOm49XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlICRlOmNhc2UgYWY6Y2FzZSBiZjprPUhkO2JyZWFrO2Nhc2UgY2Y6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdD0wIT09KGImNCksSj0hdCYmXCJzY3JvbGxcIj09PWEseD10P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3Q9W107Zm9yKHZhciB3PWQsdTtudWxsIT09XG53Oyl7dT13O3ZhciBGPXUuc3RhdGVOb2RlOzU9PT11LnRhZyYmbnVsbCE9PUYmJih1PUYsbnVsbCE9PXgmJihGPUtiKHcseCksbnVsbCE9RiYmdC5wdXNoKHRmKHcsRix1KSkpKTtpZihKKWJyZWFrO3c9dy5yZXR1cm59MDx0Lmxlbmd0aCYmKGg9bmV3IGsoaCxuLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnR9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiZjIT09d2ImJihuPWMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCkmJihXYyhuKXx8blt1Zl0pKWJyZWFrIGE7aWYoa3x8aCl7aD1lLndpbmRvdz09PWU/ZTooaD1lLm93bmVyRG9jdW1lbnQpP2guZGVmYXVsdFZpZXd8fGgucGFyZW50V2luZG93OndpbmRvdztpZihrKXtpZihuPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQsaz1kLG49bj9XYyhuKTpudWxsLG51bGwhPT1cbm4mJihKPVZiKG4pLG4hPT1KfHw1IT09bi50YWcmJjYhPT1uLnRhZykpbj1udWxsfWVsc2Ugaz1udWxsLG49ZDtpZihrIT09bil7dD1CZDtGPVwib25Nb3VzZUxlYXZlXCI7eD1cIm9uTW91c2VFbnRlclwiO3c9XCJtb3VzZVwiO2lmKFwicG9pbnRlcm91dFwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YSl0PVRkLEY9XCJvblBvaW50ZXJMZWF2ZVwiLHg9XCJvblBvaW50ZXJFbnRlclwiLHc9XCJwb2ludGVyXCI7Sj1udWxsPT1rP2g6dWUoayk7dT1udWxsPT1uP2g6dWUobik7aD1uZXcgdChGLHcrXCJsZWF2ZVwiLGssYyxlKTtoLnRhcmdldD1KO2gucmVsYXRlZFRhcmdldD11O0Y9bnVsbDtXYyhlKT09PWQmJih0PW5ldyB0KHgsdytcImVudGVyXCIsbixjLGUpLHQudGFyZ2V0PXUsdC5yZWxhdGVkVGFyZ2V0PUosRj10KTtKPUY7aWYoayYmbiliOnt0PWs7eD1uO3c9MDtmb3IodT10O3U7dT12Zih1KSl3Kys7dT0wO2ZvcihGPXg7RjtGPXZmKEYpKXUrKztmb3IoOzA8dy11Oyl0PXZmKHQpLHctLTtmb3IoOzA8dS13Oyl4PVxudmYoeCksdS0tO2Zvcig7dy0tOyl7aWYodD09PXh8fG51bGwhPT14JiZ0PT09eC5hbHRlcm5hdGUpYnJlYWsgYjt0PXZmKHQpO3g9dmYoeCl9dD1udWxsfWVsc2UgdD1udWxsO251bGwhPT1rJiZ3ZihnLGgsayx0LCExKTtudWxsIT09biYmbnVsbCE9PUomJndmKGcsSixuLHQsITApfX19YTp7aD1kP3VlKGQpOndpbmRvdztrPWgubm9kZU5hbWUmJmgubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtpZihcInNlbGVjdFwiPT09a3x8XCJpbnB1dFwiPT09ayYmXCJmaWxlXCI9PT1oLnR5cGUpdmFyIG5hPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpbmE9RmU7ZWxzZXtuYT1EZTt2YXIgeGE9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihuYT1FZSk7aWYobmEmJihuYT1uYShhLGQpKSl7bmUoZyxuYSxjLGUpO2JyZWFrIGF9eGEmJnhhKGEsaCxkKTtcImZvY3Vzb3V0XCI9PT1hJiYoeGE9aC5fd3JhcHBlclN0YXRlKSYmXG54YS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZjYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9eGE9ZD91ZShkKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6aWYobWUoeGEpfHxcInRydWVcIj09PXhhLmNvbnRlbnRFZGl0YWJsZSlRZT14YSxSZT1kLFNlPW51bGw7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6U2U9UmU9UWU9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6VGU9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOlRlPSExO1VlKGcsYyxlKTticmVhaztjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoUGUpYnJlYWs7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjpVZShnLGMsZSl9dmFyICRhO2lmKGFlKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBiYT1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6YmE9XCJvbkNvbXBvc2l0aW9uRW5kXCI7XG5icmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmJhPVwib25Db21wb3NpdGlvblVwZGF0ZVwiO2JyZWFrIGJ9YmE9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKGJhPVwib25Db21wb3NpdGlvbkVuZFwiKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCIpO2JhJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1iYT9cIm9uQ29tcG9zaXRpb25FbmRcIj09PWJhJiZpZSYmKCRhPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSkseGE9b2UoZCxiYSksMDx4YS5sZW5ndGgmJihiYT1uZXcgTGQoYmEsYSxudWxsLGMsZSksZy5wdXNoKHtldmVudDpiYSxsaXN0ZW5lcnM6eGF9KSwkYT9iYS5kYXRhPSRhOigkYT1oZShjKSxudWxsIT09JGEmJihiYS5kYXRhPSRhKSkpKTtpZigkYT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSxcbjA8ZC5sZW5ndGgmJihlPW5ldyBMZChcIm9uQmVmb3JlSW5wdXRcIixcImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT0kYSl9c2UoZyxiKX0pfWZ1bmN0aW9uIHRmKGEsYixjKXtyZXR1cm57aW5zdGFuY2U6YSxsaXN0ZW5lcjpiLGN1cnJlbnRUYXJnZXQ6Y319ZnVuY3Rpb24gb2UoYSxiKXtmb3IodmFyIGM9YitcIkNhcHR1cmVcIixkPVtdO251bGwhPT1hOyl7dmFyIGU9YSxmPWUuc3RhdGVOb2RlOzU9PT1lLnRhZyYmbnVsbCE9PWYmJihlPWYsZj1LYihhLGMpLG51bGwhPWYmJmQudW5zaGlmdCh0ZihhLGYsZSkpLGY9S2IoYSxiKSxudWxsIT1mJiZkLnB1c2godGYoYSxmLGUpKSk7YT1hLnJldHVybn1yZXR1cm4gZH1mdW5jdGlvbiB2ZihhKXtpZihudWxsPT09YSlyZXR1cm4gbnVsbDtkbyBhPWEucmV0dXJuO3doaWxlKGEmJjUhPT1hLnRhZyk7cmV0dXJuIGE/YTpudWxsfVxuZnVuY3Rpb24gd2YoYSxiLGMsZCxlKXtmb3IodmFyIGY9Yi5fcmVhY3ROYW1lLGc9W107bnVsbCE9PWMmJmMhPT1kOyl7dmFyIGg9YyxrPWguYWx0ZXJuYXRlLGw9aC5zdGF0ZU5vZGU7aWYobnVsbCE9PWsmJms9PT1kKWJyZWFrOzU9PT1oLnRhZyYmbnVsbCE9PWwmJihoPWwsZT8oaz1LYihjLGYpLG51bGwhPWsmJmcudW5zaGlmdCh0ZihjLGssaCkpKTplfHwoaz1LYihjLGYpLG51bGwhPWsmJmcucHVzaCh0ZihjLGssaCkpKSk7Yz1jLnJldHVybn0wIT09Zy5sZW5ndGgmJmEucHVzaCh7ZXZlbnQ6YixsaXN0ZW5lcnM6Z30pfXZhciB4Zj0vXFxyXFxuPy9nLHlmPS9cXHUwMDAwfFxcdUZGRkQvZztmdW5jdGlvbiB6ZihhKXtyZXR1cm4oXCJzdHJpbmdcIj09PXR5cGVvZiBhP2E6XCJcIithKS5yZXBsYWNlKHhmLFwiXFxuXCIpLnJlcGxhY2UoeWYsXCJcIil9ZnVuY3Rpb24gQWYoYSxiLGMpe2I9emYoYik7aWYoemYoYSkhPT1iJiZjKXRocm93IEVycm9yKHAoNDI1KSk7fWZ1bmN0aW9uIEJmKCl7fVxudmFyIENmPW51bGwsRGY9bnVsbDtmdW5jdGlvbiBFZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH1cbnZhciBGZj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxHZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDAsSGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIFByb21pc2U/UHJvbWlzZTp2b2lkIDAsSmY9XCJmdW5jdGlvblwiPT09dHlwZW9mIHF1ZXVlTWljcm90YXNrP3F1ZXVlTWljcm90YXNrOlwidW5kZWZpbmVkXCIhPT10eXBlb2YgSGY/ZnVuY3Rpb24oYSl7cmV0dXJuIEhmLnJlc29sdmUobnVsbCkudGhlbihhKS5jYXRjaChJZil9OkZmO2Z1bmN0aW9uIElmKGEpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBhO30pfVxuZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLGQ9MDtkb3t2YXIgZT1jLm5leHRTaWJsaW5nO2EucmVtb3ZlQ2hpbGQoYyk7aWYoZSYmOD09PWUubm9kZVR5cGUpaWYoYz1lLmRhdGEsXCIvJFwiPT09Yyl7aWYoMD09PWQpe2EucmVtb3ZlQ2hpbGQoZSk7YmQoYik7cmV0dXJufWQtLX1lbHNlXCIkXCIhPT1jJiZcIiQ/XCIhPT1jJiZcIiQhXCIhPT1jfHxkKys7Yz1lfXdoaWxlKGMpO2JkKGIpfWZ1bmN0aW9uIExmKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrO2lmKDg9PT1iKXtiPWEuZGF0YTtpZihcIiRcIj09PWJ8fFwiJCFcIj09PWJ8fFwiJD9cIj09PWIpYnJlYWs7aWYoXCIvJFwiPT09YilyZXR1cm4gbnVsbH19cmV0dXJuIGF9XG5mdW5jdGlvbiBNZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgTmY9TWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMiksT2Y9XCJfX3JlYWN0RmliZXIkXCIrTmYsUGY9XCJfX3JlYWN0UHJvcHMkXCIrTmYsdWY9XCJfX3JlYWN0Q29udGFpbmVyJFwiK05mLG9mPVwiX19yZWFjdEV2ZW50cyRcIitOZixRZj1cIl9fcmVhY3RMaXN0ZW5lcnMkXCIrTmYsUmY9XCJfX3JlYWN0SGFuZGxlcyRcIitOZjtcbmZ1bmN0aW9uIFdjKGEpe3ZhciBiPWFbT2ZdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW3VmXXx8Y1tPZl0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1NZihhKTtudWxsIT09YTspe2lmKGM9YVtPZl0pcmV0dXJuIGM7YT1NZihhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQ2IoYSl7YT1hW09mXXx8YVt1Zl07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIHVlKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcihwKDMzKSk7fWZ1bmN0aW9uIERiKGEpe3JldHVybiBhW1BmXXx8bnVsbH12YXIgU2Y9W10sVGY9LTE7ZnVuY3Rpb24gVWYoYSl7cmV0dXJue2N1cnJlbnQ6YX19XG5mdW5jdGlvbiBFKGEpezA+VGZ8fChhLmN1cnJlbnQ9U2ZbVGZdLFNmW1RmXT1udWxsLFRmLS0pfWZ1bmN0aW9uIEcoYSxiKXtUZisrO1NmW1RmXT1hLmN1cnJlbnQ7YS5jdXJyZW50PWJ9dmFyIFZmPXt9LEg9VWYoVmYpLFdmPVVmKCExKSxYZj1WZjtmdW5jdGlvbiBZZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIFZmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfVxuZnVuY3Rpb24gWmYoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1mdW5jdGlvbiAkZigpe0UoV2YpO0UoSCl9ZnVuY3Rpb24gYWcoYSxiLGMpe2lmKEguY3VycmVudCE9PVZmKXRocm93IEVycm9yKHAoMTY4KSk7RyhILGIpO0coV2YsYyl9ZnVuY3Rpb24gYmcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2I9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBiKSl0aHJvdyBFcnJvcihwKDEwOCxSYShhKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBBKHt9LGMsZCl9XG5mdW5jdGlvbiBjZyhhKXthPShhPWEuc3RhdGVOb2RlKSYmYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dHx8VmY7WGY9SC5jdXJyZW50O0coSCxhKTtHKFdmLFdmLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIGRnKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcihwKDE2OSkpO2M/KGE9YmcoYSxiLFhmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsRShXZiksRShIKSxHKEgsYSkpOkUoV2YpO0coV2YsYyl9dmFyIGVnPW51bGwsZmc9ITEsZ2c9ITE7ZnVuY3Rpb24gaGcoYSl7bnVsbD09PWVnP2VnPVthXTplZy5wdXNoKGEpfWZ1bmN0aW9uIGlnKGEpe2ZnPSEwO2hnKGEpfVxuZnVuY3Rpb24gamcoKXtpZighZ2cmJm51bGwhPT1lZyl7Z2c9ITA7dmFyIGE9MCxiPUM7dHJ5e3ZhciBjPWVnO2ZvcihDPTE7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07ZG8gZD1kKCEwKTt3aGlsZShudWxsIT09ZCl9ZWc9bnVsbDtmZz0hMX1jYXRjaChlKXt0aHJvdyBudWxsIT09ZWcmJihlZz1lZy5zbGljZShhKzEpKSxhYyhmYyxqZyksZTt9ZmluYWxseXtDPWIsZ2c9ITF9fXJldHVybiBudWxsfXZhciBrZz1bXSxsZz0wLG1nPW51bGwsbmc9MCxvZz1bXSxwZz0wLHFnPW51bGwscmc9MSxzZz1cIlwiO2Z1bmN0aW9uIHRnKGEsYil7a2dbbGcrK109bmc7a2dbbGcrK109bWc7bWc9YTtuZz1ifVxuZnVuY3Rpb24gdWcoYSxiLGMpe29nW3BnKytdPXJnO29nW3BnKytdPXNnO29nW3BnKytdPXFnO3FnPWE7dmFyIGQ9cmc7YT1zZzt2YXIgZT0zMi1vYyhkKS0xO2QmPX4oMTw8ZSk7Yys9MTt2YXIgZj0zMi1vYyhiKStlO2lmKDMwPGYpe3ZhciBnPWUtZSU1O2Y9KGQmKDE8PGcpLTEpLnRvU3RyaW5nKDMyKTtkPj49ZztlLT1nO3JnPTE8PDMyLW9jKGIpK2V8Yzw8ZXxkO3NnPWYrYX1lbHNlIHJnPTE8PGZ8Yzw8ZXxkLHNnPWF9ZnVuY3Rpb24gdmcoYSl7bnVsbCE9PWEucmV0dXJuJiYodGcoYSwxKSx1ZyhhLDEsMCkpfWZ1bmN0aW9uIHdnKGEpe2Zvcig7YT09PW1nOyltZz1rZ1stLWxnXSxrZ1tsZ109bnVsbCxuZz1rZ1stLWxnXSxrZ1tsZ109bnVsbDtmb3IoO2E9PT1xZzspcWc9b2dbLS1wZ10sb2dbcGddPW51bGwsc2c9b2dbLS1wZ10sb2dbcGddPW51bGwscmc9b2dbLS1wZ10sb2dbcGddPW51bGx9dmFyIHhnPW51bGwseWc9bnVsbCxJPSExLHpnPW51bGw7XG5mdW5jdGlvbiBBZyhhLGIpe3ZhciBjPUJnKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy5zdGF0ZU5vZGU9YjtjLnJldHVybj1hO2I9YS5kZWxldGlvbnM7bnVsbD09PWI/KGEuZGVsZXRpb25zPVtjXSxhLmZsYWdzfD0xNik6Yi5wdXNoKGMpfVxuZnVuY3Rpb24gQ2coYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1MZihiLmZpcnN0Q2hpbGQpLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9XCJcIj09PWEucGVuZGluZ1Byb3BzfHwzIT09Yi5ub2RlVHlwZT9udWxsOmIsbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIseGc9YSx5Zz1udWxsLCEwKTohMTtjYXNlIDEzOnJldHVybiBiPTghPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYz1udWxsIT09cWc/e2lkOnJnLG92ZXJmbG93OnNnfTpudWxsLGEubWVtb2l6ZWRTdGF0ZT17ZGVoeWRyYXRlZDpiLHRyZWVDb250ZXh0OmMscmV0cnlMYW5lOjEwNzM3NDE4MjR9LGM9QmcoMTgsbnVsbCxudWxsLDApLGMuc3RhdGVOb2RlPWIsYy5yZXR1cm49YSxhLmNoaWxkPWMseGc9YSx5Zz1cbm51bGwsITApOiExO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIERnKGEpe3JldHVybiAwIT09KGEubW9kZSYxKSYmMD09PShhLmZsYWdzJjEyOCl9ZnVuY3Rpb24gRWcoYSl7aWYoSSl7dmFyIGI9eWc7aWYoYil7dmFyIGM9YjtpZighQ2coYSxiKSl7aWYoRGcoYSkpdGhyb3cgRXJyb3IocCg0MTgpKTtiPUxmKGMubmV4dFNpYmxpbmcpO3ZhciBkPXhnO2ImJkNnKGEsYik/QWcoZCxjKTooYS5mbGFncz1hLmZsYWdzJi00MDk3fDIsST0hMSx4Zz1hKX19ZWxzZXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2EuZmxhZ3M9YS5mbGFncyYtNDA5N3wyO0k9ITE7eGc9YX19fWZ1bmN0aW9uIEZnKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjt4Zz1hfVxuZnVuY3Rpb24gR2coYSl7aWYoYSE9PXhnKXJldHVybiExO2lmKCFJKXJldHVybiBGZyhhKSxJPSEwLCExO3ZhciBiOyhiPTMhPT1hLnRhZykmJiEoYj01IT09YS50YWcpJiYoYj1hLnR5cGUsYj1cImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUVmKGEudHlwZSxhLm1lbW9pemVkUHJvcHMpKTtpZihiJiYoYj15Zykpe2lmKERnKGEpKXRocm93IEhnKCksRXJyb3IocCg0MTgpKTtmb3IoO2I7KUFnKGEsYiksYj1MZihiLm5leHRTaWJsaW5nKX1GZyhhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHAoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe3lnPUxmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9eWc9XG5udWxsfX1lbHNlIHlnPXhnP0xmKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfWZ1bmN0aW9uIEhnKCl7Zm9yKHZhciBhPXlnO2E7KWE9TGYoYS5uZXh0U2libGluZyl9ZnVuY3Rpb24gSWcoKXt5Zz14Zz1udWxsO0k9ITF9ZnVuY3Rpb24gSmcoYSl7bnVsbD09PXpnP3pnPVthXTp6Zy5wdXNoKGEpfXZhciBLZz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztmdW5jdGlvbiBMZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPUEoe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKTtyZXR1cm4gYn1yZXR1cm4gYn12YXIgTWc9VWYobnVsbCksTmc9bnVsbCxPZz1udWxsLFBnPW51bGw7ZnVuY3Rpb24gUWcoKXtQZz1PZz1OZz1udWxsfWZ1bmN0aW9uIFJnKGEpe3ZhciBiPU1nLmN1cnJlbnQ7RShNZyk7YS5fY3VycmVudFZhbHVlPWJ9XG5mdW5jdGlvbiBTZyhhLGIsYyl7Zm9yKDtudWxsIT09YTspe3ZhciBkPWEuYWx0ZXJuYXRlOyhhLmNoaWxkTGFuZXMmYikhPT1iPyhhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWQmJihkLmNoaWxkTGFuZXN8PWIpKTpudWxsIT09ZCYmKGQuY2hpbGRMYW5lcyZiKSE9PWImJihkLmNoaWxkTGFuZXN8PWIpO2lmKGE9PT1jKWJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIFRnKGEsYil7Tmc9YTtQZz1PZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKFVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIFZnKGEpe3ZhciBiPWEuX2N1cnJlbnRWYWx1ZTtpZihQZyE9PWEpaWYoYT17Y29udGV4dDphLG1lbW9pemVkVmFsdWU6YixuZXh0Om51bGx9LG51bGw9PT1PZyl7aWYobnVsbD09PU5nKXRocm93IEVycm9yKHAoMzA4KSk7T2c9YTtOZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmF9fWVsc2UgT2c9T2cubmV4dD1hO3JldHVybiBifXZhciBXZz1udWxsO2Z1bmN0aW9uIFhnKGEpe251bGw9PT1XZz9XZz1bYV06V2cucHVzaChhKX1mdW5jdGlvbiBZZyhhLGIsYyxkKXt2YXIgZT1iLmludGVybGVhdmVkO251bGw9PT1lPyhjLm5leHQ9YyxYZyhiKSk6KGMubmV4dD1lLm5leHQsZS5uZXh0PWMpO2IuaW50ZXJsZWF2ZWQ9YztyZXR1cm4gWmcoYSxkKX1cbmZ1bmN0aW9uIFpnKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO2M9YTtmb3IoYT1hLnJldHVybjtudWxsIT09YTspYS5jaGlsZExhbmVzfD1iLGM9YS5hbHRlcm5hdGUsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpLGM9YSxhPWEucmV0dXJuO3JldHVybiAzPT09Yy50YWc/Yy5zdGF0ZU5vZGU6bnVsbH12YXIgJGc9ITE7ZnVuY3Rpb24gYWgoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6bnVsbCxsYXN0QmFzZVVwZGF0ZTpudWxsLHNoYXJlZDp7cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIGJoKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTphLmZpcnN0QmFzZVVwZGF0ZSxsYXN0QmFzZVVwZGF0ZTphLmxhc3RCYXNlVXBkYXRlLHNoYXJlZDphLnNoYXJlZCxlZmZlY3RzOmEuZWZmZWN0c30pfWZ1bmN0aW9uIGNoKGEsYil7cmV0dXJue2V2ZW50VGltZTphLGxhbmU6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9fVxuZnVuY3Rpb24gZGgoYSxiLGMpe3ZhciBkPWEudXBkYXRlUXVldWU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZD1kLnNoYXJlZDtpZigwIT09KEsmMikpe3ZhciBlPWQucGVuZGluZztudWxsPT09ZT9iLm5leHQ9YjooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5wZW5kaW5nPWI7cmV0dXJuIFpnKGEsYyl9ZT1kLmludGVybGVhdmVkO251bGw9PT1lPyhiLm5leHQ9YixYZyhkKSk6KGIubmV4dD1lLm5leHQsZS5uZXh0PWIpO2QuaW50ZXJsZWF2ZWQ9YjtyZXR1cm4gWmcoYSxjKX1mdW5jdGlvbiBlaChhLGIsYyl7Yj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iJiYoYj1iLnNoYXJlZCwwIT09KGMmNDE5NDI0MCkpKXt2YXIgZD1iLmxhbmVzO2QmPWEucGVuZGluZ0xhbmVzO2N8PWQ7Yi5sYW5lcz1jO0NjKGEsYyl9fVxuZnVuY3Rpb24gZmgoYSxiKXt2YXIgYz1hLnVwZGF0ZVF1ZXVlLGQ9YS5hbHRlcm5hdGU7aWYobnVsbCE9PWQmJihkPWQudXBkYXRlUXVldWUsYz09PWQpKXt2YXIgZT1udWxsLGY9bnVsbDtjPWMuZmlyc3RCYXNlVXBkYXRlO2lmKG51bGwhPT1jKXtkb3t2YXIgZz17ZXZlbnRUaW1lOmMuZXZlbnRUaW1lLGxhbmU6Yy5sYW5lLHRhZzpjLnRhZyxwYXlsb2FkOmMucGF5bG9hZCxjYWxsYmFjazpjLmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PWY/ZT1mPWc6Zj1mLm5leHQ9ZztjPWMubmV4dH13aGlsZShudWxsIT09Yyk7bnVsbD09PWY/ZT1mPWI6Zj1mLm5leHQ9Yn1lbHNlIGU9Zj1iO2M9e2Jhc2VTdGF0ZTpkLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6ZSxsYXN0QmFzZVVwZGF0ZTpmLHNoYXJlZDpkLnNoYXJlZCxlZmZlY3RzOmQuZWZmZWN0c307YS51cGRhdGVRdWV1ZT1jO3JldHVybn1hPWMubGFzdEJhc2VVcGRhdGU7bnVsbD09PWE/Yy5maXJzdEJhc2VVcGRhdGU9YjphLm5leHQ9XG5iO2MubGFzdEJhc2VVcGRhdGU9Yn1cbmZ1bmN0aW9uIGdoKGEsYixjLGQpe3ZhciBlPWEudXBkYXRlUXVldWU7JGc9ITE7dmFyIGY9ZS5maXJzdEJhc2VVcGRhdGUsZz1lLmxhc3RCYXNlVXBkYXRlLGg9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09aCl7ZS5zaGFyZWQucGVuZGluZz1udWxsO3ZhciBrPWgsbD1rLm5leHQ7ay5uZXh0PW51bGw7bnVsbD09PWc/Zj1sOmcubmV4dD1sO2c9azt2YXIgbT1hLmFsdGVybmF0ZTtudWxsIT09bSYmKG09bS51cGRhdGVRdWV1ZSxoPW0ubGFzdEJhc2VVcGRhdGUsaCE9PWcmJihudWxsPT09aD9tLmZpcnN0QmFzZVVwZGF0ZT1sOmgubmV4dD1sLG0ubGFzdEJhc2VVcGRhdGU9aykpfWlmKG51bGwhPT1mKXt2YXIgcT1lLmJhc2VTdGF0ZTtnPTA7bT1sPWs9bnVsbDtoPWY7ZG97dmFyIHI9aC5sYW5lLHk9aC5ldmVudFRpbWU7aWYoKGQmcik9PT1yKXtudWxsIT09bSYmKG09bS5uZXh0PXtldmVudFRpbWU6eSxsYW5lOjAsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssXG5uZXh0Om51bGx9KTthOnt2YXIgbj1hLHQ9aDtyPWI7eT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOm49dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuKXtxPW4uY2FsbCh5LHEscik7YnJlYWsgYX1xPW47YnJlYWsgYTtjYXNlIDM6bi5mbGFncz1uLmZsYWdzJi02NTUzN3wxMjg7Y2FzZSAwOm49dC5wYXlsb2FkO3I9XCJmdW5jdGlvblwiPT09dHlwZW9mIG4/bi5jYWxsKHkscSxyKTpuO2lmKG51bGw9PT1yfHx2b2lkIDA9PT1yKWJyZWFrIGE7cT1BKHt9LHEscik7YnJlYWsgYTtjYXNlIDI6JGc9ITB9fW51bGwhPT1oLmNhbGxiYWNrJiYwIT09aC5sYW5lJiYoYS5mbGFnc3w9NjQscj1lLmVmZmVjdHMsbnVsbD09PXI/ZS5lZmZlY3RzPVtoXTpyLnB1c2goaCkpfWVsc2UgeT17ZXZlbnRUaW1lOnksbGFuZTpyLHRhZzpoLnRhZyxwYXlsb2FkOmgucGF5bG9hZCxjYWxsYmFjazpoLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW0/KGw9bT15LGs9cSk6bT1tLm5leHQ9eSxnfD1yO1xuaD1oLm5leHQ7aWYobnVsbD09PWgpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2Ugcj1oLGg9ci5uZXh0LHIubmV4dD1udWxsLGUubGFzdEJhc2VVcGRhdGU9cixlLnNoYXJlZC5wZW5kaW5nPW51bGx9d2hpbGUoMSk7bnVsbD09PW0mJihrPXEpO2UuYmFzZVN0YXRlPWs7ZS5maXJzdEJhc2VVcGRhdGU9bDtlLmxhc3RCYXNlVXBkYXRlPW07Yj1lLnNoYXJlZC5pbnRlcmxlYXZlZDtpZihudWxsIT09Yil7ZT1iO2RvIGd8PWUubGFuZSxlPWUubmV4dDt3aGlsZShlIT09Yil9ZWxzZSBudWxsPT09ZiYmKGUuc2hhcmVkLmxhbmVzPTApO2hofD1nO2EubGFuZXM9ZzthLm1lbW9pemVkU3RhdGU9cX19XG5mdW5jdGlvbiBpaChhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGUpdGhyb3cgRXJyb3IocCgxOTEsZSkpO2UuY2FsbChkKX19fXZhciBqaD0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBraChhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6QSh7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmxhbmVzJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgbmg9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFscyk/VmIoYSk9PT1hOiExfSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZi5jYWxsYmFjaz1jKTtiPWRoKGEsZixlKTtudWxsIT09YiYmKG1oKGIsYSxlLGQpLGVoKGIsYSxlKSl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGQ9TCgpLGU9bGgoYSksZj1jaChkLGUpO2YudGFnPTE7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsczt2YXIgYz1MKCksZD1cbmxoKGEpLGU9Y2goYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1iKTtiPWRoKGEsZSxkKTtudWxsIT09YiYmKG1oKGIsYSxkLGMpLGVoKGIsYSxkKSl9fTtmdW5jdGlvbiBvaChhLGIsYyxkLGUsZixnKXthPWEuc3RhdGVOb2RlO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnNob3VsZENvbXBvbmVudFVwZGF0ZT9hLnNob3VsZENvbXBvbmVudFVwZGF0ZShkLGYsZyk6Yi5wcm90b3R5cGUmJmIucHJvdG90eXBlLmlzUHVyZVJlYWN0Q29tcG9uZW50PyFJZShjLGQpfHwhSWUoZSxmKTohMH1cbmZ1bmN0aW9uIHBoKGEsYixjKXt2YXIgZD0hMSxlPVZmO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9mPVZnKGYpOihlPVpmKGIpP1hmOkguY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP1lmKGEsZSk6VmYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1uaDthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxzPWE7ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1mKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIHFoKGEsYixjLGQpe2E9Yi5zdGF0ZTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO2Iuc3RhdGUhPT1hJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1cbmZ1bmN0aW9uIHJoKGEsYixjLGQpe3ZhciBlPWEuc3RhdGVOb2RlO2UucHJvcHM9YztlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9amg7YWgoYSk7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2UuY29udGV4dD1WZyhmKTooZj1aZihiKT9YZjpILmN1cnJlbnQsZS5jb250ZXh0PVlmKGEsZikpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihraChhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHwoYj1lLnN0YXRlLFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZuaC5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSxnaChhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmZsYWdzfD00MTk0MzA4KX1cbmZ1bmN0aW9uIHNoKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjtpZihjKXtpZigxIT09Yy50YWcpdGhyb3cgRXJyb3IocCgzMDkpKTt2YXIgZD1jLnN0YXRlTm9kZX1pZighZCl0aHJvdyBFcnJvcihwKDE0NyxhKSk7dmFyIGU9ZCxmPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1mKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWUucmVmcztiPT09amgmJihiPWUucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZl06YltmXT1hfTtiLl9zdHJpbmdSZWY9ZjtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IocCgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IocCgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIHRoKGEsYil7YT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik7dGhyb3cgRXJyb3IocCgzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09YT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjphKSk7fWZ1bmN0aW9uIHVoKGEpe3ZhciBiPWEuX2luaXQ7cmV0dXJuIGIoYS5fcGF5bG9hZCl9XG5mdW5jdGlvbiB2aChhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5kZWxldGlvbnM7bnVsbD09PWQ/KGIuZGVsZXRpb25zPVtjXSxiLmZsYWdzfD0xNik6ZC5wdXNoKGMpfX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT13aChhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGIuZmxhZ3N8PTEwNDg1NzYsYztkPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1kKXJldHVybiBkPWQuaW5kZXgsZDxjPyhiLmZsYWdzfD0yLGMpOmQ7Yi5mbGFnc3w9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJlxubnVsbD09PWIuYWx0ZXJuYXRlJiYoYi5mbGFnc3w9Mik7cmV0dXJuIGJ9ZnVuY3Rpb24gaChhLGIsYyxkKXtpZihudWxsPT09Ynx8NiE9PWIudGFnKXJldHVybiBiPXhoKGMsYS5tb2RlLGQpLGIucmV0dXJuPWEsYjtiPWUoYixjKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIGsoYSxiLGMsZCl7dmFyIGY9Yy50eXBlO2lmKGY9PT15YSlyZXR1cm4gbShhLGIsYy5wcm9wcy5jaGlsZHJlbixkLGMua2V5KTtpZihudWxsIT09YiYmKGIuZWxlbWVudFR5cGU9PT1mfHxcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLiQkdHlwZW9mPT09SGEmJnVoKGYpPT09Yi50eXBlKSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9c2goYSxiLGMpLGQucmV0dXJuPWEsZDtkPXloKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPXNoKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8XG5iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9emgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPUFoKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcShhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBiJiZcIlwiIT09Ynx8XCJudW1iZXJcIj09PXR5cGVvZiBiKXJldHVybiBiPXhoKFwiXCIrYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYiYmbnVsbCE9PWIpe3N3aXRjaChiLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjPXloKGIudHlwZSxiLmtleSxiLnByb3BzLG51bGwsYS5tb2RlLGMpLFxuYy5yZWY9c2goYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlIHdhOnJldHVybiBiPXpoKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtjYXNlIEhhOnZhciBkPWIuX2luaXQ7cmV0dXJuIHEoYSxkKGIuX3BheWxvYWQpLGMpfWlmKGViKGIpfHxLYShiKSlyZXR1cm4gYj1BaChiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjt0aChhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHIoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGMmJlwiXCIhPT1jfHxcIm51bWJlclwiPT09dHlwZW9mIGMpcmV0dXJuIG51bGwhPT1lP251bGw6aChhLGIsXCJcIitjLGQpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3N3aXRjaChjLiQkdHlwZW9mKXtjYXNlIHZhOnJldHVybiBjLmtleT09PWU/ayhhLGIsYyxkKTpudWxsO2Nhc2Ugd2E6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGw7Y2FzZSBIYTpyZXR1cm4gZT1jLl9pbml0LHIoYSxcbmIsZShjLl9wYXlsb2FkKSxkKX1pZihlYihjKXx8S2EoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO3RoKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geShhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZCYmXCJcIiE9PWR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxoKGIsYSxcIlwiK2QsZSk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBkJiZudWxsIT09ZCl7c3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGsoYixhLGQsZSk7Y2FzZSB3YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKTtjYXNlIEhhOnZhciBmPWQuX2luaXQ7cmV0dXJuIHkoYSxiLGMsZihkLl9wYXlsb2FkKSxlKX1pZihlYihkKXx8S2EoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO3RoKGIsZCl9cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBuKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLG09bnVsbCx1PWcsdz1nPTAseD1udWxsO251bGwhPT11JiZ3PGgubGVuZ3RoO3crKyl7dS5pbmRleD53Pyh4PXUsdT1udWxsKTp4PXUuc2libGluZzt2YXIgbj1yKGUsdSxoW3ddLGspO2lmKG51bGw9PT1uKXtudWxsPT09dSYmKHU9eCk7YnJlYWt9YSYmdSYmbnVsbD09PW4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx3KTtudWxsPT09bT9sPW46bS5zaWJsaW5nPW47bT1uO3U9eH1pZih3PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PXUpe2Zvcig7dzxoLmxlbmd0aDt3KyspdT1xKGUsaFt3XSxrKSxudWxsIT09dSYmKGc9Zih1LGcsdyksbnVsbD09PW0/bD11Om0uc2libGluZz11LG09dSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mb3IodT1kKGUsdSk7dzxoLmxlbmd0aDt3KyspeD15KHUsZSx3LGhbd10sayksbnVsbCE9PXgmJihhJiZudWxsIT09eC5hbHRlcm5hdGUmJnUuZGVsZXRlKG51bGw9PT1cbngua2V5P3c6eC5rZXkpLGc9Zih4LGcsdyksbnVsbD09PW0/bD14Om0uc2libGluZz14LG09eCk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZ1bmN0aW9uIHQoZSxnLGgsayl7dmFyIGw9S2EoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGwpdGhyb3cgRXJyb3IocCgxNTApKTtoPWwuY2FsbChoKTtpZihudWxsPT1oKXRocm93IEVycm9yKHAoMTUxKSk7Zm9yKHZhciB1PWw9bnVsbCxtPWcsdz1nPTAseD1udWxsLG49aC5uZXh0KCk7bnVsbCE9PW0mJiFuLmRvbmU7dysrLG49aC5uZXh0KCkpe20uaW5kZXg+dz8oeD1tLG09bnVsbCk6eD1tLnNpYmxpbmc7dmFyIHQ9cihlLG0sbi52YWx1ZSxrKTtpZihudWxsPT09dCl7bnVsbD09PW0mJihtPXgpO2JyZWFrfWEmJm0mJm51bGw9PT10LmFsdGVybmF0ZSYmYihlLG0pO2c9Zih0LGcsdyk7bnVsbD09PXU/bD10OnUuc2libGluZz10O3U9dDttPXh9aWYobi5kb25lKXJldHVybiBjKGUsXG5tKSxJJiZ0ZyhlLHcpLGw7aWYobnVsbD09PW0pe2Zvcig7IW4uZG9uZTt3Kyssbj1oLm5leHQoKSluPXEoZSxuLnZhbHVlLGspLG51bGwhPT1uJiYoZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcihtPWQoZSxtKTshbi5kb25lO3crKyxuPWgubmV4dCgpKW49eShtLGUsdyxuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09bi5rZXk/dzpuLmtleSksZz1mKG4sZyx3KSxudWxsPT09dT9sPW46dS5zaWJsaW5nPW4sdT1uKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gSihhLGQsZixoKXtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT15YSYmbnVsbD09PWYua2V5JiYoZj1mLnByb3BzLmNoaWxkcmVuKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mKXtzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSB2YTphOntmb3IodmFyIGs9XG5mLmtleSxsPWQ7bnVsbCE9PWw7KXtpZihsLmtleT09PWspe2s9Zi50eXBlO2lmKGs9PT15YSl7aWYoNz09PWwudGFnKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1lbHNlIGlmKGwuZWxlbWVudFR5cGU9PT1rfHxcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09SGEmJnVoKGspPT09bC50eXBlKXtjKGEsbC5zaWJsaW5nKTtkPWUobCxmLnByb3BzKTtkLnJlZj1zaChhLGwsZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1jKGEsbCk7YnJlYWt9ZWxzZSBiKGEsbCk7bD1sLnNpYmxpbmd9Zi50eXBlPT09eWE/KGQ9QWgoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPXloKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPXNoKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB3YTphOntmb3IobD1mLmtleTtudWxsIT09XG5kOyl7aWYoZC5rZXk9PT1sKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPXpoKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpO2Nhc2UgSGE6cmV0dXJuIGw9Zi5faW5pdCxKKGEsZCxsKGYuX3BheWxvYWQpLGgpfWlmKGViKGYpKXJldHVybiBuKGEsZCxmLGgpO2lmKEthKGYpKXJldHVybiB0KGEsZCxmLGgpO3RoKGEsZil9cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBmJiZcIlwiIT09Znx8XCJudW1iZXJcIj09PXR5cGVvZiBmPyhmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6XG4oYyhhLGQpLGQ9eGgoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSkpOmMoYSxkKX1yZXR1cm4gSn12YXIgQmg9dmgoITApLENoPXZoKCExKSxEaD17fSxFaD1VZihEaCksRmg9VWYoRGgpLEdoPVVmKERoKTtmdW5jdGlvbiBIaChhKXtpZihhPT09RGgpdGhyb3cgRXJyb3IocCgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBJaChhLGIpe0coR2gsYik7RyhGaCxhKTtHKEVoLERoKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOmxiKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1sYihiLGEpfUUoRWgpO0coRWgsYil9ZnVuY3Rpb24gSmgoKXtFKEVoKTtFKEZoKTtFKEdoKX1cbmZ1bmN0aW9uIEtoKGEpe0hoKEdoLmN1cnJlbnQpO3ZhciBiPUhoKEVoLmN1cnJlbnQpO3ZhciBjPWxiKGIsYS50eXBlKTtiIT09YyYmKEcoRmgsYSksRyhFaCxjKSl9ZnVuY3Rpb24gTGgoYSl7RmguY3VycmVudD09PWEmJihFKEVoKSxFKEZoKSl9dmFyIE09VWYoMCk7XG5mdW5jdGlvbiBNaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH12YXIgTmg9W107XG5mdW5jdGlvbiBPaCgpe2Zvcih2YXIgYT0wO2E8TmgubGVuZ3RoO2ErKylOaFthXS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeT1udWxsO05oLmxlbmd0aD0wfXZhciBQaD11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFFoPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLFJoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsU2g9ITEsVGg9ITEsVWg9MCxWaD0wO2Z1bmN0aW9uIFEoKXt0aHJvdyBFcnJvcihwKDMyMSkpO31mdW5jdGlvbiBXaChhLGIpe2lmKG51bGw9PT1iKXJldHVybiExO2Zvcih2YXIgYz0wO2M8Yi5sZW5ndGgmJmM8YS5sZW5ndGg7YysrKWlmKCFIZShhW2NdLGJbY10pKXJldHVybiExO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoYSxiLGMsZCxlLGYpe1JoPWY7Tj1iO2IubWVtb2l6ZWRTdGF0ZT1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtiLmxhbmVzPTA7UGguY3VycmVudD1udWxsPT09YXx8bnVsbD09PWEubWVtb2l6ZWRTdGF0ZT9ZaDpaaDthPWMoZCxlKTtpZihUaCl7Zj0wO2Rve1RoPSExO1VoPTA7aWYoMjU8PWYpdGhyb3cgRXJyb3IocCgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtQaC5jdXJyZW50PSRoO2E9YyhkLGUpfXdoaWxlKFRoKX1QaC5jdXJyZW50PWFpO2I9bnVsbCE9PU8mJm51bGwhPT1PLm5leHQ7Umg9MDtQPU89Tj1udWxsO1NoPSExO2lmKGIpdGhyb3cgRXJyb3IocCgzMDApKTtyZXR1cm4gYX1mdW5jdGlvbiBiaSgpe3ZhciBhPTAhPT1VaDtVaD0wO3JldHVybiBhfVxuZnVuY3Rpb24gY2koKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gZGkoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIGVpKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gZmkoYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2Y9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1udWxsLGs9bnVsbCxsPWY7ZG97dmFyIG09bC5sYW5lO2lmKChSaCZtKT09PW0pbnVsbCE9PWsmJihrPWsubmV4dD17bGFuZTowLGFjdGlvbjpsLmFjdGlvbixoYXNFYWdlclN0YXRlOmwuaGFzRWFnZXJTdGF0ZSxlYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxkPWwuaGFzRWFnZXJTdGF0ZT9sLmVhZ2VyU3RhdGU6YShkLGwuYWN0aW9uKTtlbHNle3ZhciBxPXtsYW5lOm0sYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLFxuZWFnZXJTdGF0ZTpsLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09az8oaD1rPXEsZz1kKTprPWsubmV4dD1xO04ubGFuZXN8PW07aGh8PW19bD1sLm5leHR9d2hpbGUobnVsbCE9PWwmJmwhPT1mKTtudWxsPT09az9nPWQ6ay5uZXh0PWg7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwoVWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWc7Yi5iYXNlUXVldWU9aztjLmxhc3RSZW5kZXJlZFN0YXRlPWR9YT1jLmludGVybGVhdmVkO2lmKG51bGwhPT1hKXtlPWE7ZG8gZj1lLmxhbmUsTi5sYW5lc3w9ZixoaHw9ZixlPWUubmV4dDt3aGlsZShlIT09YSl9ZWxzZSBudWxsPT09ZSYmKGMubGFuZXM9MCk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIGdpKGEpe3ZhciBiPWRpKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHAoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfWZ1bmN0aW9uIGhpKCl7fVxuZnVuY3Rpb24gaWkoYSxiKXt2YXIgYz1OLGQ9ZGkoKSxlPWIoKSxmPSFIZShkLm1lbW9pemVkU3RhdGUsZSk7ZiYmKGQubWVtb2l6ZWRTdGF0ZT1lLFVnPSEwKTtkPWQucXVldWU7amkoa2kuYmluZChudWxsLGMsZCxhKSxbYV0pO2lmKGQuZ2V0U25hcHNob3QhPT1ifHxmfHxudWxsIT09UCYmUC5tZW1vaXplZFN0YXRlLnRhZyYxKXtjLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGMsZCxlLGIpLHZvaWQgMCxudWxsKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShjLGIsZSl9cmV0dXJuIGV9ZnVuY3Rpb24gbmkoYSxiLGMpe2EuZmxhZ3N8PTE2Mzg0O2E9e2dldFNuYXBzaG90OmIsdmFsdWU6Y307Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLnN0b3Jlcz1bYV0pOihjPWIuc3RvcmVzLG51bGw9PT1jP2Iuc3RvcmVzPVthXTpjLnB1c2goYSkpfVxuZnVuY3Rpb24gbWkoYSxiLGMsZCl7Yi52YWx1ZT1jO2IuZ2V0U25hcHNob3Q9ZDtvaShiKSYmcGkoYSl9ZnVuY3Rpb24ga2koYSxiLGMpe3JldHVybiBjKGZ1bmN0aW9uKCl7b2koYikmJnBpKGEpfSl9ZnVuY3Rpb24gb2koYSl7dmFyIGI9YS5nZXRTbmFwc2hvdDthPWEudmFsdWU7dHJ5e3ZhciBjPWIoKTtyZXR1cm4hSGUoYSxjKX1jYXRjaChkKXtyZXR1cm4hMH19ZnVuY3Rpb24gcGkoYSl7dmFyIGI9WmcoYSwxKTtudWxsIT09YiYmbWgoYixhLDEsLTEpfVxuZnVuY3Rpb24gcWkoYSl7dmFyIGI9Y2koKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjplaSxsYXN0UmVuZGVyZWRTdGF0ZTphfTtiLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPXJpLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19XG5mdW5jdGlvbiBsaShhLGIsYyxkKXthPXt0YWc6YSxjcmVhdGU6YixkZXN0cm95OmMsZGVwczpkLG5leHQ6bnVsbH07Yj1OLnVwZGF0ZVF1ZXVlO251bGw9PT1iPyhiPXtsYXN0RWZmZWN0Om51bGwsc3RvcmVzOm51bGx9LE4udXBkYXRlUXVldWU9YixiLmxhc3RFZmZlY3Q9YS5uZXh0PWEpOihjPWIubGFzdEVmZmVjdCxudWxsPT09Yz9iLmxhc3RFZmZlY3Q9YS5uZXh0PWE6KGQ9Yy5uZXh0LGMubmV4dD1hLGEubmV4dD1kLGIubGFzdEVmZmVjdD1hKSk7cmV0dXJuIGF9ZnVuY3Rpb24gc2koKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIHRpKGEsYixjLGQpe3ZhciBlPWNpKCk7Ti5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9bGkoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIHVpKGEsYixjLGQpe3ZhciBlPWRpKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmV2goZCxnLmRlcHMpKXtlLm1lbW9pemVkU3RhdGU9bGkoYixjLGYsZCk7cmV0dXJufX1OLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyxmLGQpfWZ1bmN0aW9uIHZpKGEsYil7cmV0dXJuIHRpKDgzOTA2NTYsOCxhLGIpfWZ1bmN0aW9uIGppKGEsYil7cmV0dXJuIHVpKDIwNDgsOCxhLGIpfWZ1bmN0aW9uIHdpKGEsYil7cmV0dXJuIHVpKDQsMixhLGIpfWZ1bmN0aW9uIHhpKGEsYil7cmV0dXJuIHVpKDQsNCxhLGIpfVxuZnVuY3Rpb24geWkoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiB6aShhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHVpKDQsNCx5aS5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBBaSgpe31mdW5jdGlvbiBCaShhLGIpe3ZhciBjPWRpKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZXaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIENpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfWZ1bmN0aW9uIERpKGEsYixjKXtpZigwPT09KFJoJjIxKSlyZXR1cm4gYS5iYXNlU3RhdGUmJihhLmJhc2VTdGF0ZT0hMSxVZz0hMCksYS5tZW1vaXplZFN0YXRlPWM7SGUoYyxiKXx8KGM9eWMoKSxOLmxhbmVzfD1jLGhofD1jLGEuYmFzZVN0YXRlPSEwKTtyZXR1cm4gYn1mdW5jdGlvbiBFaShhLGIpe3ZhciBjPUM7Qz0wIT09YyYmND5jP2M6NDthKCEwKTt2YXIgZD1RaC50cmFuc2l0aW9uO1FoLnRyYW5zaXRpb249e307dHJ5e2EoITEpLGIoKX1maW5hbGx5e0M9YyxRaC50cmFuc2l0aW9uPWR9fWZ1bmN0aW9uIEZpKCl7cmV0dXJuIGRpKCkubWVtb2l6ZWRTdGF0ZX1cbmZ1bmN0aW9uIEdpKGEsYixjKXt2YXIgZD1saChhKTtjPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGMpO2Vsc2UgaWYoYz1ZZyhhLGIsYyxkKSxudWxsIT09Yyl7dmFyIGU9TCgpO21oKGMsYSxkLGUpO0ppKGMsYixkKX19XG5mdW5jdGlvbiByaShhLGIsYyl7dmFyIGQ9bGgoYSksZT17bGFuZTpkLGFjdGlvbjpjLGhhc0VhZ2VyU3RhdGU6ITEsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07aWYoSGkoYSkpSWkoYixlKTtlbHNle3ZhciBmPWEuYWx0ZXJuYXRlO2lmKDA9PT1hLmxhbmVzJiYobnVsbD09PWZ8fDA9PT1mLmxhbmVzKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmhhc0VhZ2VyU3RhdGU9ITA7ZS5lYWdlclN0YXRlPWg7aWYoSGUoaCxnKSl7dmFyIGs9Yi5pbnRlcmxlYXZlZDtudWxsPT09az8oZS5uZXh0PWUsWGcoYikpOihlLm5leHQ9ay5uZXh0LGsubmV4dD1lKTtiLmludGVybGVhdmVkPWU7cmV0dXJufX1jYXRjaChsKXt9ZmluYWxseXt9Yz1ZZyhhLGIsZSxkKTtudWxsIT09YyYmKGU9TCgpLG1oKGMsYSxkLGUpLEppKGMsYixkKSl9fVxuZnVuY3Rpb24gSGkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7cmV0dXJuIGE9PT1OfHxudWxsIT09YiYmYj09PU59ZnVuY3Rpb24gSWkoYSxiKXtUaD1TaD0hMDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifWZ1bmN0aW9uIEppKGEsYixjKXtpZigwIT09KGMmNDE5NDI0MCkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG52YXIgYWk9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VJbnNlcnRpb25FZmZlY3Q6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlEsdXNlTXV0YWJsZVNvdXJjZTpRLHVzZVN5bmNFeHRlcm5hbFN0b3JlOlEsdXNlSWQ6USx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFloPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpmdW5jdGlvbihhLGIpe2NpKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9LHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OnZpLHVzZUltcGVyYXRpdmVIYW5kbGU6ZnVuY3Rpb24oYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiB0aSg0MTk0MzA4LFxuNCx5aS5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIHRpKDQxOTQzMDgsNCxhLGIpfSx1c2VJbnNlcnRpb25FZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1jaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1jaSgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT17cGVuZGluZzpudWxsLGludGVybGVhdmVkOm51bGwsbGFuZXM6MCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTtkLnF1ZXVlPWE7YT1hLmRpc3BhdGNoPUdpLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj1cbmNpKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnFpLHVzZURlYnVnVmFsdWU6QWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXtyZXR1cm4gY2koKS5tZW1vaXplZFN0YXRlPWF9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1xaSghMSksYj1hWzBdO2E9RWkuYmluZChudWxsLGFbMV0pO2NpKCkubWVtb2l6ZWRTdGF0ZT1hO3JldHVybltiLGFdfSx1c2VNdXRhYmxlU291cmNlOmZ1bmN0aW9uKCl7fSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9TixlPWNpKCk7aWYoSSl7aWYodm9pZCAwPT09Yyl0aHJvdyBFcnJvcihwKDQwNykpO2M9YygpfWVsc2V7Yz1iKCk7aWYobnVsbD09PVIpdGhyb3cgRXJyb3IocCgzNDkpKTswIT09KFJoJjMwKXx8bmkoZCxiLGMpfWUubWVtb2l6ZWRTdGF0ZT1jO3ZhciBmPXt2YWx1ZTpjLGdldFNuYXBzaG90OmJ9O2UucXVldWU9Zjt2aShraS5iaW5kKG51bGwsZCxcbmYsYSksW2FdKTtkLmZsYWdzfD0yMDQ4O2xpKDksbWkuYmluZChudWxsLGQsZixjLGIpLHZvaWQgMCxudWxsKTtyZXR1cm4gY30sdXNlSWQ6ZnVuY3Rpb24oKXt2YXIgYT1jaSgpLGI9Ui5pZGVudGlmaWVyUHJlZml4O2lmKEkpe3ZhciBjPXNnO3ZhciBkPXJnO2M9KGQmfigxPDwzMi1vYyhkKS0xKSkudG9TdHJpbmcoMzIpK2M7Yj1cIjpcIitiK1wiUlwiK2M7Yz1VaCsrOzA8YyYmKGIrPVwiSFwiK2MudG9TdHJpbmcoMzIpKTtiKz1cIjpcIn1lbHNlIGM9VmgrKyxiPVwiOlwiK2IrXCJyXCIrYy50b1N0cmluZygzMikrXCI6XCI7cmV0dXJuIGEubWVtb2l6ZWRTdGF0ZT1ifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LFpoPXtyZWFkQ29udGV4dDpWZyx1c2VDYWxsYmFjazpCaSx1c2VDb250ZXh0OlZnLHVzZUVmZmVjdDpqaSx1c2VJbXBlcmF0aXZlSGFuZGxlOnppLHVzZUluc2VydGlvbkVmZmVjdDp3aSx1c2VMYXlvdXRFZmZlY3Q6eGksdXNlTWVtbzpDaSx1c2VSZWR1Y2VyOmZpLHVzZVJlZjpzaSx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBmaShlaSl9LFxudXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIERpKGIsTy5tZW1vaXplZFN0YXRlLGEpfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9ZmkoZWkpWzBdLGI9ZGkoKS5tZW1vaXplZFN0YXRlO3JldHVyblthLGJdfSx1c2VNdXRhYmxlU291cmNlOmhpLHVzZVN5bmNFeHRlcm5hbFN0b3JlOmlpLHVzZUlkOkZpLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sJGg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6Z2ksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGdpKGVpKX0sdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPWRpKCk7cmV0dXJuIG51bGw9PT1cbk8/Yi5tZW1vaXplZFN0YXRlPWE6RGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1naShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfTtmdW5jdGlvbiBLaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1QYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZSxkaWdlc3Q6bnVsbH19ZnVuY3Rpb24gTGkoYSxiLGMpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpudWxsLHN0YWNrOm51bGwhPWM/YzpudWxsLGRpZ2VzdDpudWxsIT1iP2I6bnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXtjb25zb2xlLmVycm9yKGIudmFsdWUpfWNhdGNoKGMpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBjO30pfX12YXIgTmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXA7ZnVuY3Rpb24gT2koYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7UGl8fChQaT0hMCxRaT1kKTtNaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uIFJpKGEsYixjKXtjPWNoKC0xLGMpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gZChlKX07Yy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYil9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtNaShhLGIpO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVNpP1NpPW5ldyBTZXQoW3RoaXNdKTpTaS5hZGQodGhpcykpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxuZnVuY3Rpb24gVGkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO2lmKG51bGw9PT1kKXtkPWEucGluZ0NhY2hlPW5ldyBOaTt2YXIgZT1uZXcgU2V0O2Quc2V0KGIsZSl9ZWxzZSBlPWQuZ2V0KGIpLHZvaWQgMD09PWUmJihlPW5ldyBTZXQsZC5zZXQoYixlKSk7ZS5oYXMoYyl8fChlLmFkZChjKSxhPVVpLmJpbmQobnVsbCxhLGIsYyksYi50aGVuKGEsYSkpfWZ1bmN0aW9uIFZpKGEpe2Rve3ZhciBiO2lmKGI9MTM9PT1hLnRhZyliPWEubWVtb2l6ZWRTdGF0ZSxiPW51bGwhPT1iP251bGwhPT1iLmRlaHlkcmF0ZWQ/ITA6ITE6ITA7aWYoYilyZXR1cm4gYTthPWEucmV0dXJufXdoaWxlKG51bGwhPT1hKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFdpKGEsYixjLGQsZSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIGE9PT1iP2EuZmxhZ3N8PTY1NTM2OihhLmZsYWdzfD0xMjgsYy5mbGFnc3w9MTMxMDcyLGMuZmxhZ3MmPS01MjgwNSwxPT09Yy50YWcmJihudWxsPT09Yy5hbHRlcm5hdGU/Yy50YWc9MTc6KGI9Y2goLTEsMSksYi50YWc9MixkaChjLGIsMSkpKSxjLmxhbmVzfD0xKSxhO2EuZmxhZ3N8PTY1NTM2O2EubGFuZXM9ZTtyZXR1cm4gYX12YXIgWGk9dWEuUmVhY3RDdXJyZW50T3duZXIsVWc9ITE7ZnVuY3Rpb24gWWkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9DaChiLG51bGwsYyxkKTpCaChiLGEuY2hpbGQsYyxkKX1cbmZ1bmN0aW9uIFppKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtUZyhiLGUpO2Q9WGgoYSxiLGMsZCxmLGUpO2M9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmMmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGQsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBhaihhLGIsYyxkLGUpe2lmKG51bGw9PT1hKXt2YXIgZj1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJiFiaihmKSYmdm9pZCAwPT09Zi5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZixjaihhLGIsZixkLGUpO2E9eWgoYy50eXBlLG51bGwsZCxiLGIubW9kZSxlKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zj1hLmNoaWxkO2lmKDA9PT0oYS5sYW5lcyZlKSl7dmFyIGc9Zi5tZW1vaXplZFByb3BzO2M9Yy5jb21wYXJlO2M9bnVsbCE9PWM/YzpJZTtpZihjKGcsZCkmJmEucmVmPT09Yi5yZWYpcmV0dXJuICRpKGEsYixlKX1iLmZsYWdzfD0xO2E9d2goZixkKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9XG5mdW5jdGlvbiBjaihhLGIsYyxkLGUpe2lmKG51bGwhPT1hKXt2YXIgZj1hLm1lbW9pemVkUHJvcHM7aWYoSWUoZixkKSYmYS5yZWY9PT1iLnJlZilpZihVZz0hMSxiLnBlbmRpbmdQcm9wcz1kPWYsMCE9PShhLmxhbmVzJmUpKTAhPT0oYS5mbGFncyYxMzEwNzIpJiYoVWc9ITApO2Vsc2UgcmV0dXJuIGIubGFuZXM9YS5sYW5lcywkaShhLGIsZSl9cmV0dXJuIGRqKGEsYixjLGQsZSl9XG5mdW5jdGlvbiBlaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLmNoaWxkcmVuLGY9bnVsbCE9PWE/YS5tZW1vaXplZFN0YXRlOm51bGw7aWYoXCJoaWRkZW5cIj09PWQubW9kZSlpZigwPT09KGIubW9kZSYxKSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9LEcoZmosZ2opLGdqfD1jO2Vsc2V7aWYoMD09PShjJjEwNzM3NDE4MjQpKXJldHVybiBhPW51bGwhPT1mP2YuYmFzZUxhbmVzfGM6YyxiLmxhbmVzPWIuY2hpbGRMYW5lcz0xMDczNzQxODI0LGIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmEsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sYi51cGRhdGVRdWV1ZT1udWxsLEcoZmosZ2opLGdqfD1hLG51bGw7Yi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MCxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfTtkPW51bGwhPT1mP2YuYmFzZUxhbmVzOmM7Ryhmaixnaik7Z2p8PWR9ZWxzZSBudWxsIT09XG5mPyhkPWYuYmFzZUxhbmVzfGMsYi5tZW1vaXplZFN0YXRlPW51bGwpOmQ9YyxHKGZqLGdqKSxnanw9ZDtZaShhLGIsZSxjKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaihhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mn1mdW5jdGlvbiBkaihhLGIsYyxkLGUpe3ZhciBmPVpmKGMpP1hmOkguY3VycmVudDtmPVlmKGIsZik7VGcoYixlKTtjPVhoKGEsYixjLGQsZixlKTtkPWJpKCk7aWYobnVsbCE9PWEmJiFVZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS0yMDUzLGEubGFuZXMmPX5lLCRpKGEsYixlKTtJJiZkJiZ2ZyhiKTtiLmZsYWdzfD0xO1lpKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gaWooYSxiLGMsZCxlKXtpZihaZihjKSl7dmFyIGY9ITA7Y2coYil9ZWxzZSBmPSExO1RnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKWpqKGEsYikscGgoYixjLGQpLHJoKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPVZnKGwpOihsPVpmKGMpP1hmOkguY3VycmVudCxsPVlmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHxcbihoIT09ZHx8ayE9PWwpJiZxaChiLGcsZCxsKTskZz0hMTt2YXIgcj1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1yO2doKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxyIT09a3x8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoa2goYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPSRnfHxvaChiLGMsaCxkLHIsayxsKSk/KHF8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSk6XG4oXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmZsYWdzfD00MTk0MzA4KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9ayksZy5wcm9wcz1kLGcuc3RhdGU9ayxnLmNvbnRleHQ9bCxkPWgpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGQ9ITEpfWVsc2V7Zz1iLnN0YXRlTm9kZTtiaChhLGIpO2g9Yi5tZW1vaXplZFByb3BzO2w9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOkxnKGIudHlwZSxoKTtnLnByb3BzPWw7cT1iLnBlbmRpbmdQcm9wcztyPWcuY29udGV4dDtrPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBrJiZudWxsIT09az9rPVZnKGspOihrPVpmKGMpP1hmOkguY3VycmVudCxrPVlmKGIsaykpO3ZhciB5PWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOyhtPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB5fHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFxuXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09cXx8ciE9PWspJiZxaChiLGcsZCxrKTskZz0hMTtyPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7dmFyIG49Yi5tZW1vaXplZFN0YXRlO2ghPT1xfHxyIT09bnx8V2YuY3VycmVudHx8JGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiB5JiYoa2goYixjLHksZCksbj1iLm1lbW9pemVkU3RhdGUpLChsPSRnfHxvaChiLGMsbCxkLHIsbixrKXx8ITEpPyhtfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLG4sayksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlxuZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLG4saykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MTAyNCkpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1uKSxnLnByb3BzPWQsZy5zdGF0ZT1uLGcuY29udGV4dD1rLGQ9bCk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PVxuYS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnI9PT1hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD0xMDI0KSxkPSExKX1yZXR1cm4ga2ooYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24ga2ooYSxiLGMsZCxlLGYpe2hqKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjEyOCk7aWYoIWQmJiFnKXJldHVybiBlJiZkZyhiLGMsITEpLCRpKGEsYixmKTtkPWIuc3RhdGVOb2RlO1hpLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZmxhZ3N8PTE7bnVsbCE9PWEmJmc/KGIuY2hpbGQ9QmgoYixhLmNoaWxkLG51bGwsZiksYi5jaGlsZD1CaChiLG51bGwsaCxmKSk6WWkoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmZGcoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBsaihhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P2FnKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJmFnKGEsYi5jb250ZXh0LCExKTtJaChhLGIuY29udGFpbmVySW5mbyl9XG5mdW5jdGlvbiBtaihhLGIsYyxkLGUpe0lnKCk7SmcoZSk7Yi5mbGFnc3w9MjU2O1lpKGEsYixjLGQpO3JldHVybiBiLmNoaWxkfXZhciBuaj17ZGVoeWRyYXRlZDpudWxsLHRyZWVDb250ZXh0Om51bGwscmV0cnlMYW5lOjB9O2Z1bmN0aW9uIG9qKGEpe3JldHVybntiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfX1cbmZ1bmN0aW9uIHBqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPU0uY3VycmVudCxmPSExLGc9MCE9PShiLmZsYWdzJjEyOCksaDsoaD1nKXx8KGg9bnVsbCE9PWEmJm51bGw9PT1hLm1lbW9pemVkU3RhdGU/ITE6MCE9PShlJjIpKTtpZihoKWY9ITAsYi5mbGFncyY9LTEyOTtlbHNlIGlmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKWV8PTE7RyhNLGUmMSk7aWYobnVsbD09PWEpe0VnKGIpO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiYoYT1hLmRlaHlkcmF0ZWQsbnVsbCE9PWEpKXJldHVybiAwPT09KGIubW9kZSYxKT9iLmxhbmVzPTE6XCIkIVwiPT09YS5kYXRhP2IubGFuZXM9ODpiLmxhbmVzPTEwNzM3NDE4MjQsbnVsbDtnPWQuY2hpbGRyZW47YT1kLmZhbGxiYWNrO3JldHVybiBmPyhkPWIubW9kZSxmPWIuY2hpbGQsZz17bW9kZTpcImhpZGRlblwiLGNoaWxkcmVuOmd9LDA9PT0oZCYxKSYmbnVsbCE9PWY/KGYuY2hpbGRMYW5lcz0wLGYucGVuZGluZ1Byb3BzPVxuZyk6Zj1xaihnLGQsMCxudWxsKSxhPUFoKGEsZCxjLG51bGwpLGYucmV0dXJuPWIsYS5yZXR1cm49YixmLnNpYmxpbmc9YSxiLmNoaWxkPWYsYi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGMpLGIubWVtb2l6ZWRTdGF0ZT1uaixhKTpyaihiLGcpfWU9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lJiYoaD1lLmRlaHlkcmF0ZWQsbnVsbCE9PWgpKXJldHVybiBzaihhLGIsZyxkLGgsZSxjKTtpZihmKXtmPWQuZmFsbGJhY2s7Zz1iLm1vZGU7ZT1hLmNoaWxkO2g9ZS5zaWJsaW5nO3ZhciBrPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn07MD09PShnJjEpJiZiLmNoaWxkIT09ZT8oZD1iLmNoaWxkLGQuY2hpbGRMYW5lcz0wLGQucGVuZGluZ1Byb3BzPWssYi5kZWxldGlvbnM9bnVsbCk6KGQ9d2goZSxrKSxkLnN1YnRyZWVGbGFncz1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCk7bnVsbCE9PWg/Zj13aChoLGYpOihmPUFoKGYsZyxjLG51bGwpLGYuZmxhZ3N8PTIpO2YucmV0dXJuPVxuYjtkLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDtkPWY7Zj1iLmNoaWxkO2c9YS5jaGlsZC5tZW1vaXplZFN0YXRlO2c9bnVsbD09PWc/b2ooYyk6e2Jhc2VMYW5lczpnLmJhc2VMYW5lc3xjLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOmcudHJhbnNpdGlvbnN9O2YubWVtb2l6ZWRTdGF0ZT1nO2YuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmM7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBkfWY9YS5jaGlsZDthPWYuc2libGluZztkPXdoKGYse21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0pOzA9PT0oYi5tb2RlJjEpJiYoZC5sYW5lcz1jKTtkLnJldHVybj1iO2Quc2libGluZz1udWxsO251bGwhPT1hJiYoYz1iLmRlbGV0aW9ucyxudWxsPT09Yz8oYi5kZWxldGlvbnM9W2FdLGIuZmxhZ3N8PTE2KTpjLnB1c2goYSkpO2IuY2hpbGQ9ZDtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gZH1cbmZ1bmN0aW9uIHJqKGEsYil7Yj1xaih7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpifSxhLm1vZGUsMCxudWxsKTtiLnJldHVybj1hO3JldHVybiBhLmNoaWxkPWJ9ZnVuY3Rpb24gdGooYSxiLGMsZCl7bnVsbCE9PWQmJkpnKGQpO0JoKGIsYS5jaGlsZCxudWxsLGMpO2E9cmooYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbik7YS5mbGFnc3w9MjtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYX1cbmZ1bmN0aW9uIHNqKGEsYixjLGQsZSxmLGcpe2lmKGMpe2lmKGIuZmxhZ3MmMjU2KXJldHVybiBiLmZsYWdzJj0tMjU3LGQ9TGkoRXJyb3IocCg0MjIpKSksdGooYSxiLGcsZCk7aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSlyZXR1cm4gYi5jaGlsZD1hLmNoaWxkLGIuZmxhZ3N8PTEyOCxudWxsO2Y9ZC5mYWxsYmFjaztlPWIubW9kZTtkPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmQuY2hpbGRyZW59LGUsMCxudWxsKTtmPUFoKGYsZSxnLG51bGwpO2YuZmxhZ3N8PTI7ZC5yZXR1cm49YjtmLnJldHVybj1iO2Quc2libGluZz1mO2IuY2hpbGQ9ZDswIT09KGIubW9kZSYxKSYmQmgoYixhLmNoaWxkLG51bGwsZyk7Yi5jaGlsZC5tZW1vaXplZFN0YXRlPW9qKGcpO2IubWVtb2l6ZWRTdGF0ZT1uajtyZXR1cm4gZn1pZigwPT09KGIubW9kZSYxKSlyZXR1cm4gdGooYSxiLGcsbnVsbCk7aWYoXCIkIVwiPT09ZS5kYXRhKXtkPWUubmV4dFNpYmxpbmcmJmUubmV4dFNpYmxpbmcuZGF0YXNldDtcbmlmKGQpdmFyIGg9ZC5kZ3N0O2Q9aDtmPUVycm9yKHAoNDE5KSk7ZD1MaShmLGQsdm9pZCAwKTtyZXR1cm4gdGooYSxiLGcsZCl9aD0wIT09KGcmYS5jaGlsZExhbmVzKTtpZihVZ3x8aCl7ZD1SO2lmKG51bGwhPT1kKXtzd2l0Y2goZyYtZyl7Y2FzZSA0OmU9MjticmVhaztjYXNlIDE2OmU9ODticmVhaztjYXNlIDY0OmNhc2UgMTI4OmNhc2UgMjU2OmNhc2UgNTEyOmNhc2UgMTAyNDpjYXNlIDIwNDg6Y2FzZSA0MDk2OmNhc2UgODE5MjpjYXNlIDE2Mzg0OmNhc2UgMzI3Njg6Y2FzZSA2NTUzNjpjYXNlIDEzMTA3MjpjYXNlIDI2MjE0NDpjYXNlIDUyNDI4ODpjYXNlIDEwNDg1NzY6Y2FzZSAyMDk3MTUyOmNhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6ZT0zMjticmVhaztjYXNlIDUzNjg3MDkxMjplPTI2ODQzNTQ1NjticmVhaztkZWZhdWx0OmU9MH1lPTAhPT0oZSYoZC5zdXNwZW5kZWRMYW5lc3xnKSk/MDplO1xuMCE9PWUmJmUhPT1mLnJldHJ5TGFuZSYmKGYucmV0cnlMYW5lPWUsWmcoYSxlKSxtaChkLGEsZSwtMSkpfXVqKCk7ZD1MaShFcnJvcihwKDQyMSkpKTtyZXR1cm4gdGooYSxiLGcsZCl9aWYoXCIkP1wiPT09ZS5kYXRhKXJldHVybiBiLmZsYWdzfD0xMjgsYi5jaGlsZD1hLmNoaWxkLGI9dmouYmluZChudWxsLGEpLGUuX3JlYWN0UmV0cnk9YixudWxsO2E9Zi50cmVlQ29udGV4dDt5Zz1MZihlLm5leHRTaWJsaW5nKTt4Zz1iO0k9ITA7emc9bnVsbDtudWxsIT09YSYmKG9nW3BnKytdPXJnLG9nW3BnKytdPXNnLG9nW3BnKytdPXFnLHJnPWEuaWQsc2c9YS5vdmVyZmxvdyxxZz1iKTtiPXJqKGIsZC5jaGlsZHJlbik7Yi5mbGFnc3w9NDA5NjtyZXR1cm4gYn1mdW5jdGlvbiB3aihhLGIsYyl7YS5sYW5lc3w9Yjt2YXIgZD1hLmFsdGVybmF0ZTtudWxsIT09ZCYmKGQubGFuZXN8PWIpO1NnKGEucmV0dXJuLGIsYyl9XG5mdW5jdGlvbiB4aihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zj9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplfTooZi5pc0JhY2t3YXJkcz1iLGYucmVuZGVyaW5nPW51bGwsZi5yZW5kZXJpbmdTdGFydFRpbWU9MCxmLmxhc3Q9ZCxmLnRhaWw9YyxmLnRhaWxNb2RlPWUpfVxuZnVuY3Rpb24geWooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtZaShhLGIsZC5jaGlsZHJlbixjKTtkPU0uY3VycmVudDtpZigwIT09KGQmMikpZD1kJjF8MixiLmZsYWdzfD0xMjg7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjEyOCkpYTpmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7aWYoMTM9PT1hLnRhZyludWxsIT09YS5tZW1vaXplZFN0YXRlJiZ3aihhLGMsYik7ZWxzZSBpZigxOT09PWEudGFnKXdqKGEsYyxiKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9RyhNLGQpO2lmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1NaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO3hqKGIsITEsZSxjLGYpO2JyZWFrO2Nhc2UgXCJiYWNrd2FyZHNcIjpjPW51bGw7ZT1iLmNoaWxkO2ZvcihiLmNoaWxkPW51bGw7bnVsbCE9PWU7KXthPWUuYWx0ZXJuYXRlO2lmKG51bGwhPT1hJiZudWxsPT09TWgoYSkpe2IuY2hpbGQ9ZTticmVha31hPWUuc2libGluZztlLnNpYmxpbmc9YztjPWU7ZT1hfXhqKGIsITAsYyxudWxsLGYpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnhqKGIsITEsbnVsbCxudWxsLHZvaWQgMCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGpqKGEsYil7MD09PShiLm1vZGUmMSkmJm51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpfWZ1bmN0aW9uICRpKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTtoaHw9Yi5sYW5lcztpZigwPT09KGMmYi5jaGlsZExhbmVzKSlyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IocCgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9d2goYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXdoKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiB6aihhLGIsYyl7c3dpdGNoKGIudGFnKXtjYXNlIDM6bGooYik7SWcoKTticmVhaztjYXNlIDU6S2goYik7YnJlYWs7Y2FzZSAxOlpmKGIudHlwZSkmJmNnKGIpO2JyZWFrO2Nhc2UgNDpJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6dmFyIGQ9Yi50eXBlLl9jb250ZXh0LGU9Yi5tZW1vaXplZFByb3BzLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZTticmVhaztjYXNlIDEzOmQ9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kKXtpZihudWxsIT09ZC5kZWh5ZHJhdGVkKXJldHVybiBHKE0sTS5jdXJyZW50JjEpLGIuZmxhZ3N8PTEyOCxudWxsO2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiBwaihhLGIsYyk7RyhNLE0uY3VycmVudCYxKTthPSRpKGEsYixjKTtyZXR1cm4gbnVsbCE9PWE/YS5zaWJsaW5nOm51bGx9RyhNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9MCE9PShjJlxuYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmMTI4KSl7aWYoZClyZXR1cm4geWooYSxiLGMpO2IuZmxhZ3N8PTEyOH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwsZS5sYXN0RWZmZWN0PW51bGwpO0coTSxNLmN1cnJlbnQpO2lmKGQpYnJlYWs7ZWxzZSByZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIGIubGFuZXM9MCxlaihhLGIsYyl9cmV0dXJuICRpKGEsYixjKX12YXIgQWosQmosQ2osRGo7XG5Baj1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Qmo9ZnVuY3Rpb24oKXt9O1xuQ2o9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO0hoKEVoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6ZT1BKHt9LGUse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmU9Z2IoYSxlKTtkPWdiKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXViKGMsZCk7dmFyIGc7Yz1udWxsO2ZvcihsIGluIGUpaWYoIWQuaGFzT3duUHJvcGVydHkobCkmJmUuaGFzT3duUHJvcGVydHkobCkmJm51bGwhPWVbbF0paWYoXCJzdHlsZVwiPT09bCl7dmFyIGg9ZVtsXTtmb3IoZyBpbiBoKWguaGFzT3duUHJvcGVydHkoZykmJlxuKGN8fChjPXt9KSxjW2ddPVwiXCIpfWVsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1sJiZcImNoaWxkcmVuXCIhPT1sJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09bCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWwmJlwiYXV0b0ZvY3VzXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/Znx8KGY9W10pOihmPWZ8fFtdKS5wdXNoKGwsbnVsbCkpO2ZvcihsIGluIGQpe3ZhciBrPWRbbF07aD1udWxsIT1lP2VbbF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkobCkmJmshPT1oJiYobnVsbCE9a3x8bnVsbCE9aCkpaWYoXCJzdHlsZVwiPT09bClpZihoKXtmb3IoZyBpbiBoKSFoLmhhc093blByb3BlcnR5KGcpfHxrJiZrLmhhc093blByb3BlcnR5KGcpfHwoY3x8KGM9e30pLGNbZ109XCJcIik7Zm9yKGcgaW4gaylrLmhhc093blByb3BlcnR5KGcpJiZoW2ddIT09a1tnXSYmKGN8fChjPXt9KSxjW2ddPWtbZ10pfWVsc2UgY3x8KGZ8fChmPVtdKSxmLnB1c2gobCxcbmMpKSxjPWs7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWw/KGs9az9rLl9faHRtbDp2b2lkIDAsaD1oP2guX19odG1sOnZvaWQgMCxudWxsIT1rJiZoIT09ayYmKGY9Znx8W10pLnB1c2gobCxrKSk6XCJjaGlsZHJlblwiPT09bD9cInN0cmluZ1wiIT09dHlwZW9mIGsmJlwibnVtYmVyXCIhPT10eXBlb2Yga3x8KGY9Znx8W10pLnB1c2gobCxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmKGVhLmhhc093blByb3BlcnR5KGwpPyhudWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1sJiZEKFwic2Nyb2xsXCIsYSksZnx8aD09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2gobCxrKSl9YyYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtEaj1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtcbmZ1bmN0aW9uIEVqKGEsYil7aWYoIUkpc3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIFMoYSl7dmFyIGI9bnVsbCE9PWEuYWx0ZXJuYXRlJiZhLmFsdGVybmF0ZS5jaGlsZD09PWEuY2hpbGQsYz0wLGQ9MDtpZihiKWZvcih2YXIgZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyYxNDY4MDA2NCxkfD1lLmZsYWdzJjE0NjgwMDY0LGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7ZWxzZSBmb3IoZT1hLmNoaWxkO251bGwhPT1lOyljfD1lLmxhbmVzfGUuY2hpbGRMYW5lcyxkfD1lLnN1YnRyZWVGbGFncyxkfD1lLmZsYWdzLGUucmV0dXJuPWEsZT1lLnNpYmxpbmc7YS5zdWJ0cmVlRmxhZ3N8PWQ7YS5jaGlsZExhbmVzPWM7cmV0dXJuIGJ9XG5mdW5jdGlvbiBGaihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDI6Y2FzZSAxNjpjYXNlIDE1OmNhc2UgMDpjYXNlIDExOmNhc2UgNzpjYXNlIDg6Y2FzZSAxMjpjYXNlIDk6Y2FzZSAxNDpyZXR1cm4gUyhiKSxudWxsO2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAzOmQ9Yi5zdGF0ZU5vZGU7SmgoKTtFKFdmKTtFKEgpO09oKCk7ZC5wZW5kaW5nQ29udGV4dCYmKGQuY29udGV4dD1kLnBlbmRpbmdDb250ZXh0LGQucGVuZGluZ0NvbnRleHQ9bnVsbCk7aWYobnVsbD09PWF8fG51bGw9PT1hLmNoaWxkKUdnKGIpP2IuZmxhZ3N8PTQ6bnVsbD09PWF8fGEubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJjA9PT0oYi5mbGFncyYyNTYpfHwoYi5mbGFnc3w9MTAyNCxudWxsIT09emcmJihHaih6Zyksemc9bnVsbCkpO0JqKGEsYik7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDU6TGgoYik7dmFyIGU9SGgoR2guY3VycmVudCk7XG5jPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpQ2ooYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO1MoYik7cmV0dXJuIG51bGx9YT1IaChFaC5jdXJyZW50KTtpZihHZyhiKSl7ZD1iLnN0YXRlTm9kZTtjPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtkW1BmXT1mO2E9MCE9PShiLm1vZGUmMSk7c3dpdGNoKGMpe2Nhc2UgXCJkaWFsb2dcIjpEKFwiY2FuY2VsXCIsZCk7RChcImNsb3NlXCIsZCk7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkQoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuZCk7RChcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT17d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtEKFwiaW52YWxpZFwiLGQpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGQsZiksRChcImludmFsaWRcIixkKX11YihjLGYpO2U9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxoLGEpLGU9W1wiY2hpbGRyZW5cIixoXSk6XCJudW1iZXJcIj09PXR5cGVvZiBoJiZkLnRleHRDb250ZW50IT09XCJcIitoJiYoITAhPT1mLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC50ZXh0Q29udGVudCxcbmgsYSksZT1bXCJjaGlsZHJlblwiLFwiXCIraF0pOmVhLmhhc093blByb3BlcnR5KGcpJiZudWxsIT1oJiZcIm9uU2Nyb2xsXCI9PT1nJiZEKFwic2Nyb2xsXCIsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGQpO2RiKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6VmEoZCk7amIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihkLm9uY2xpY2s9QmYpfWQ9ZTtiLnVwZGF0ZVF1ZXVlPWQ7bnVsbCE9PWQmJihiLmZsYWdzfD00KX1lbHNle2c9OT09PWUubm9kZVR5cGU/ZTplLm93bmVyRG9jdW1lbnQ7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hJiYoYT1rYihjKSk7XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP1wic2NyaXB0XCI9PT1jPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcblwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW09mXT1iO2FbUGZdPWQ7QWooYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2E6e2c9dmIoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixhKTtEKFwiY2xvc2VcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoZT0wO2U8bGYubGVuZ3RoO2UrKylEKGxmW2VdLGEpO2U9ZDticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkQoXCJlcnJvclwiLFxuYSk7RChcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpEKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZDticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtEKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1nYihhLGQpO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7ZGVmYXVsdDplPWR9dWIoYyxlKTtoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/c2IoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm5iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1cbmN8fFwiXCIhPT1rKSYmb2IoYSxrKTpcIm51bWJlclwiPT09dHlwZW9mIGsmJm9iKGEsXCJcIitrKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYoZWEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9ayYmXCJvblNjcm9sbFwiPT09ZiYmRChcInNjcm9sbFwiLGEpOm51bGwhPWsmJnRhKGEsZixrLGcpKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoYSk7ZGIoYSxkLCExKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsXG4hMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5vbkNsaWNrJiYoYS5vbmNsaWNrPUJmKX1zd2l0Y2goYyl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpkPSEhZC5hdXRvRm9jdXM7YnJlYWsgYTtjYXNlIFwiaW1nXCI6ZD0hMDticmVhayBhO2RlZmF1bHQ6ZD0hMX19ZCYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyKX1TKGIpO3JldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlEaihhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjYpKTtjPUhoKEdoLmN1cnJlbnQpO0hoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi5tZW1vaXplZFByb3BzO2RbT2ZdPWI7aWYoZj1kLm5vZGVWYWx1ZSE9PWMpaWYoYT1cbnhnLG51bGwhPT1hKXN3aXRjaChhLnRhZyl7Y2FzZSAzOkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpO2JyZWFrO2Nhc2UgNTohMCE9PWEubWVtb2l6ZWRQcm9wcy5zdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcmJkFmKGQubm9kZVZhbHVlLGMsMCE9PShhLm1vZGUmMSkpfWYmJihiLmZsYWdzfD00KX1lbHNlIGQ9KDk9PT1jLm5vZGVUeXBlP2M6Yy5vd25lckRvY3VtZW50KS5jcmVhdGVUZXh0Tm9kZShkKSxkW09mXT1iLGIuc3RhdGVOb2RlPWR9UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDEzOkUoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7aWYoSSYmbnVsbCE9PXlnJiYwIT09KGIubW9kZSYxKSYmMD09PShiLmZsYWdzJjEyOCkpSGcoKSxJZygpLGIuZmxhZ3N8PTk4NTYwLGY9ITE7ZWxzZSBpZihmPUdnKGIpLG51bGwhPT1kJiZudWxsIT09ZC5kZWh5ZHJhdGVkKXtpZihudWxsPT09XG5hKXtpZighZil0aHJvdyBFcnJvcihwKDMxOCkpO2Y9Yi5tZW1vaXplZFN0YXRlO2Y9bnVsbCE9PWY/Zi5kZWh5ZHJhdGVkOm51bGw7aWYoIWYpdGhyb3cgRXJyb3IocCgzMTcpKTtmW09mXT1ifWVsc2UgSWcoKSwwPT09KGIuZmxhZ3MmMTI4KSYmKGIubWVtb2l6ZWRTdGF0ZT1udWxsKSxiLmZsYWdzfD00O1MoYik7Zj0hMX1lbHNlIG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSxmPSEwO2lmKCFmKXJldHVybiBiLmZsYWdzJjY1NTM2P2I6bnVsbH1pZigwIT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gYi5sYW5lcz1jLGI7ZD1udWxsIT09ZDtkIT09KG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlKSYmZCYmKGIuY2hpbGQuZmxhZ3N8PTgxOTIsMCE9PShiLm1vZGUmMSkmJihudWxsPT09YXx8MCE9PShNLmN1cnJlbnQmMSk/MD09PVQmJihUPTMpOnVqKCkpKTtudWxsIT09Yi51cGRhdGVRdWV1ZSYmKGIuZmxhZ3N8PTQpO1MoYik7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLFxuQmooYSxiKSxudWxsPT09YSYmc2YoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksUyhiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksUyhiKSxudWxsO2Nhc2UgMTc6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksUyhiKSxudWxsO2Nhc2UgMTk6RShNKTtmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09ZilyZXR1cm4gUyhiKSxudWxsO2Q9MCE9PShiLmZsYWdzJjEyOCk7Zz1mLnJlbmRlcmluZztpZihudWxsPT09ZylpZihkKUVqKGYsITEpO2Vsc2V7aWYoMCE9PVR8fG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlmb3IoYT1iLmNoaWxkO251bGwhPT1hOyl7Zz1NaChhKTtpZihudWxsIT09Zyl7Yi5mbGFnc3w9MTI4O0VqKGYsITEpO2Q9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZCYmKGIudXBkYXRlUXVldWU9ZCxiLmZsYWdzfD00KTtiLnN1YnRyZWVGbGFncz0wO2Q9Yztmb3IoYz1iLmNoaWxkO251bGwhPT1jOylmPWMsYT1kLGYuZmxhZ3MmPTE0NjgwMDY2LFxuZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLnN1YnRyZWVGbGFncz0wLGYubWVtb2l6ZWRQcm9wcz1udWxsLGYubWVtb2l6ZWRTdGF0ZT1udWxsLGYudXBkYXRlUXVldWU9bnVsbCxmLmRlcGVuZGVuY2llcz1udWxsLGYuc3RhdGVOb2RlPW51bGwpOihmLmNoaWxkTGFuZXM9Zy5jaGlsZExhbmVzLGYubGFuZXM9Zy5sYW5lcyxmLmNoaWxkPWcuY2hpbGQsZi5zdWJ0cmVlRmxhZ3M9MCxmLmRlbGV0aW9ucz1udWxsLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLGYuZGVwZW5kZW5jaWVzPW51bGw9PT1hP251bGw6e2xhbmVzOmEubGFuZXMsZmlyc3RDb250ZXh0OmEuZmlyc3RDb250ZXh0fSksYz1jLnNpYmxpbmc7RyhNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWE9XG5hLnNpYmxpbmd9bnVsbCE9PWYudGFpbCYmQigpPkhqJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KX1lbHNle2lmKCFkKWlmKGE9TWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTEyOCxkPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmZsYWdzfD00KSxFaihmLCEwKSxudWxsPT09Zi50YWlsJiZcImhpZGRlblwiPT09Zi50YWlsTW9kZSYmIWcuYWx0ZXJuYXRlJiYhSSlyZXR1cm4gUyhiKSxudWxsfWVsc2UgMipCKCktZi5yZW5kZXJpbmdTdGFydFRpbWU+SGomJjEwNzM3NDE4MjQhPT1jJiYoYi5mbGFnc3w9MTI4LGQ9ITAsRWooZiwhMSksYi5sYW5lcz00MTk0MzA0KTtmLmlzQmFja3dhcmRzPyhnLnNpYmxpbmc9Yi5jaGlsZCxiLmNoaWxkPWcpOihjPWYubGFzdCxudWxsIT09Yz9jLnNpYmxpbmc9ZzpiLmNoaWxkPWcsZi5sYXN0PWcpfWlmKG51bGwhPT1mLnRhaWwpcmV0dXJuIGI9Zi50YWlsLGYucmVuZGVyaW5nPVxuYixmLnRhaWw9Yi5zaWJsaW5nLGYucmVuZGVyaW5nU3RhcnRUaW1lPUIoKSxiLnNpYmxpbmc9bnVsbCxjPU0uY3VycmVudCxHKE0sZD9jJjF8MjpjJjEpLGI7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksZD1udWxsIT09Yi5tZW1vaXplZFN0YXRlLG51bGwhPT1hJiZudWxsIT09YS5tZW1vaXplZFN0YXRlIT09ZCYmKGIuZmxhZ3N8PTgxOTIpLGQmJjAhPT0oYi5tb2RlJjEpPzAhPT0oZ2omMTA3Mzc0MTgyNCkmJihTKGIpLGIuc3VidHJlZUZsYWdzJjYmJihiLmZsYWdzfD04MTkyKSk6UyhiKSxudWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7Y2FzZSAyNTpyZXR1cm4gbnVsbH10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO31cbmZ1bmN0aW9uIEpqKGEsYil7d2coYik7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIFpmKGIudHlwZSkmJiRmKCksYT1iLmZsYWdzLGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAzOnJldHVybiBKaCgpLEUoV2YpLEUoSCksT2goKSxhPWIuZmxhZ3MsMCE9PShhJjY1NTM2KSYmMD09PShhJjEyOCk/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSA1OnJldHVybiBMaChiKSxudWxsO2Nhc2UgMTM6RShNKTthPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YSYmbnVsbCE9PWEuZGVoeWRyYXRlZCl7aWYobnVsbD09PWIuYWx0ZXJuYXRlKXRocm93IEVycm9yKHAoMzQwKSk7SWcoKX1hPWIuZmxhZ3M7cmV0dXJuIGEmNjU1MzY/KGIuZmxhZ3M9YSYtNjU1Mzd8MTI4LGIpOm51bGw7Y2FzZSAxOTpyZXR1cm4gRShNKSxudWxsO2Nhc2UgNDpyZXR1cm4gSmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIFJnKGIudHlwZS5fY29udGV4dCksbnVsbDtjYXNlIDIyOmNhc2UgMjM6cmV0dXJuIElqKCksXG5udWxsO2Nhc2UgMjQ6cmV0dXJuIG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19dmFyIEtqPSExLFU9ITEsTGo9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQsVj1udWxsO2Z1bmN0aW9uIE1qKGEsYil7dmFyIGM9YS5yZWY7aWYobnVsbCE9PWMpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGMpdHJ5e2MobnVsbCl9Y2F0Y2goZCl7VyhhLGIsZCl9ZWxzZSBjLmN1cnJlbnQ9bnVsbH1mdW5jdGlvbiBOaihhLGIsYyl7dHJ5e2MoKX1jYXRjaChkKXtXKGEsYixkKX19dmFyIE9qPSExO1xuZnVuY3Rpb24gUGooYSxiKXtDZj1kZDthPU1lKCk7aWYoTmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGM9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2M9KGM9YS5vd25lckRvY3VtZW50KSYmYy5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBkPWMuZ2V0U2VsZWN0aW9uJiZjLmdldFNlbGVjdGlvbigpO2lmKGQmJjAhPT1kLnJhbmdlQ291bnQpe2M9ZC5hbmNob3JOb2RlO3ZhciBlPWQuYW5jaG9yT2Zmc2V0LGY9ZC5mb2N1c05vZGU7ZD1kLmZvY3VzT2Zmc2V0O3RyeXtjLm5vZGVUeXBlLGYubm9kZVR5cGV9Y2F0Y2goRil7Yz1udWxsO2JyZWFrIGF9dmFyIGc9MCxoPS0xLGs9LTEsbD0wLG09MCxxPWEscj1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHk7Oyl7cSE9PWN8fDAhPT1lJiYzIT09cS5ub2RlVHlwZXx8KGg9ZytlKTtxIT09Znx8MCE9PWQmJjMhPT1xLm5vZGVUeXBlfHwoaz1nK2QpOzM9PT1xLm5vZGVUeXBlJiYoZys9XG5xLm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0oeT1xLmZpcnN0Q2hpbGQpKWJyZWFrO3I9cTtxPXl9Zm9yKDs7KXtpZihxPT09YSlicmVhayBiO3I9PT1jJiYrK2w9PT1lJiYoaD1nKTtyPT09ZiYmKyttPT09ZCYmKGs9Zyk7aWYobnVsbCE9PSh5PXEubmV4dFNpYmxpbmcpKWJyZWFrO3E9cjtyPXEucGFyZW50Tm9kZX1xPXl9Yz0tMT09PWh8fC0xPT09az9udWxsOntzdGFydDpoLGVuZDprfX1lbHNlIGM9bnVsbH1jPWN8fHtzdGFydDowLGVuZDowfX1lbHNlIGM9bnVsbDtEZj17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpjfTtkZD0hMTtmb3IoVj1iO251bGwhPT1WOylpZihiPVYsYT1iLmNoaWxkLDAhPT0oYi5zdWJ0cmVlRmxhZ3MmMTAyOCkmJm51bGwhPT1hKWEucmV0dXJuPWIsVj1hO2Vsc2UgZm9yKDtudWxsIT09Vjspe2I9Vjt0cnl7dmFyIG49Yi5hbHRlcm5hdGU7aWYoMCE9PShiLmZsYWdzJjEwMjQpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpicmVhaztcbmNhc2UgMTppZihudWxsIT09bil7dmFyIHQ9bi5tZW1vaXplZFByb3BzLEo9bi5tZW1vaXplZFN0YXRlLHg9Yi5zdGF0ZU5vZGUsdz14LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/dDpMZyhiLnR5cGUsdCksSik7eC5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT13fWJyZWFrO2Nhc2UgMzp2YXIgdT1iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOzE9PT11Lm5vZGVUeXBlP3UudGV4dENvbnRlbnQ9XCJcIjo5PT09dS5ub2RlVHlwZSYmdS5kb2N1bWVudEVsZW1lbnQmJnUucmVtb3ZlQ2hpbGQodS5kb2N1bWVudEVsZW1lbnQpO2JyZWFrO2Nhc2UgNTpjYXNlIDY6Y2FzZSA0OmNhc2UgMTc6YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO319Y2F0Y2goRil7VyhiLGIucmV0dXJuLEYpfWE9Yi5zaWJsaW5nO2lmKG51bGwhPT1hKXthLnJldHVybj1iLnJldHVybjtWPWE7YnJlYWt9Vj1iLnJldHVybn1uPU9qO09qPSExO3JldHVybiBufVxuZnVuY3Rpb24gUWooYSxiLGMpe3ZhciBkPWIudXBkYXRlUXVldWU7ZD1udWxsIT09ZD9kLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09ZCl7dmFyIGU9ZD1kLm5leHQ7ZG97aWYoKGUudGFnJmEpPT09YSl7dmFyIGY9ZS5kZXN0cm95O2UuZGVzdHJveT12b2lkIDA7dm9pZCAwIT09ZiYmTmooYixjLGYpfWU9ZS5uZXh0fXdoaWxlKGUhPT1kKX19ZnVuY3Rpb24gUmooYSxiKXtiPWIudXBkYXRlUXVldWU7Yj1udWxsIT09Yj9iLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yil7dmFyIGM9Yj1iLm5leHQ7ZG97aWYoKGMudGFnJmEpPT09YSl7dmFyIGQ9Yy5jcmVhdGU7Yy5kZXN0cm95PWQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIFNqKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKXt2YXIgYz1hLnN0YXRlTm9kZTtzd2l0Y2goYS50YWcpe2Nhc2UgNTphPWM7YnJlYWs7ZGVmYXVsdDphPWN9XCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpiLmN1cnJlbnQ9YX19XG5mdW5jdGlvbiBUaihhKXt2YXIgYj1hLmFsdGVybmF0ZTtudWxsIT09YiYmKGEuYWx0ZXJuYXRlPW51bGwsVGooYikpO2EuY2hpbGQ9bnVsbDthLmRlbGV0aW9ucz1udWxsO2Euc2libGluZz1udWxsOzU9PT1hLnRhZyYmKGI9YS5zdGF0ZU5vZGUsbnVsbCE9PWImJihkZWxldGUgYltPZl0sZGVsZXRlIGJbUGZdLGRlbGV0ZSBiW29mXSxkZWxldGUgYltRZl0sZGVsZXRlIGJbUmZdKSk7YS5zdGF0ZU5vZGU9bnVsbDthLnJldHVybj1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBVaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFZqKGEpe2E6Zm9yKDs7KXtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fFVqKGEucmV0dXJuKSlyZXR1cm4gbnVsbDthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47Zm9yKGE9YS5zaWJsaW5nOzUhPT1hLnRhZyYmNiE9PWEudGFnJiYxOCE9PWEudGFnOyl7aWYoYS5mbGFncyYyKWNvbnRpbnVlIGE7aWYobnVsbD09PWEuY2hpbGR8fDQ9PT1hLnRhZyljb250aW51ZSBhO2Vsc2UgYS5jaGlsZC5yZXR1cm49YSxhPWEuY2hpbGR9aWYoIShhLmZsYWdzJjIpKXJldHVybiBhLnN0YXRlTm9kZX19XG5mdW5jdGlvbiBXaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9QmYpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoV2ooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylXaihhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBYaihhLGIsYyl7dmFyIGQ9YS50YWc7aWYoNT09PWR8fDY9PT1kKWE9YS5zdGF0ZU5vZGUsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFhqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspWGooYSxiLGMpLGE9YS5zaWJsaW5nfXZhciBYPW51bGwsWWo9ITE7ZnVuY3Rpb24gWmooYSxiLGMpe2ZvcihjPWMuY2hpbGQ7bnVsbCE9PWM7KWFrKGEsYixjKSxjPWMuc2libGluZ31cbmZ1bmN0aW9uIGFrKGEsYixjKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtsYy5vbkNvbW1pdEZpYmVyVW5tb3VudChrYyxjKX1jYXRjaChoKXt9c3dpdGNoKGMudGFnKXtjYXNlIDU6VXx8TWooYyxiKTtjYXNlIDY6dmFyIGQ9WCxlPVlqO1g9bnVsbDtaaihhLGIsYyk7WD1kO1lqPWU7bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGMpOmEucmVtb3ZlQ2hpbGQoYykpOlgucmVtb3ZlQ2hpbGQoYy5zdGF0ZU5vZGUpKTticmVhaztjYXNlIDE4Om51bGwhPT1YJiYoWWo/KGE9WCxjPWMuc3RhdGVOb2RlLDg9PT1hLm5vZGVUeXBlP0tmKGEucGFyZW50Tm9kZSxjKToxPT09YS5ub2RlVHlwZSYmS2YoYSxjKSxiZChhKSk6S2YoWCxjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgNDpkPVg7ZT1ZajtYPWMuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7XG5aaihhLGIsYyk7WD1kO1lqPWU7YnJlYWs7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmlmKCFVJiYoZD1jLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiYoZD1kLmxhc3RFZmZlY3QsbnVsbCE9PWQpKSl7ZT1kPWQubmV4dDtkb3t2YXIgZj1lLGc9Zi5kZXN0cm95O2Y9Zi50YWc7dm9pZCAwIT09ZyYmKDAhPT0oZiYyKT9OaihjLGIsZyk6MCE9PShmJjQpJiZOaihjLGIsZykpO2U9ZS5uZXh0fXdoaWxlKGUhPT1kKX1aaihhLGIsYyk7YnJlYWs7Y2FzZSAxOmlmKCFVJiYoTWooYyxiKSxkPWMuc3RhdGVOb2RlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudFdpbGxVbm1vdW50KSl0cnl7ZC5wcm9wcz1jLm1lbW9pemVkUHJvcHMsZC5zdGF0ZT1jLm1lbW9pemVkU3RhdGUsZC5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGgpe1coYyxiLGgpfVpqKGEsYixjKTticmVhaztjYXNlIDIxOlpqKGEsYixjKTticmVhaztjYXNlIDIyOmMubW9kZSYxPyhVPShkPVUpfHxudWxsIT09XG5jLm1lbW9pemVkU3RhdGUsWmooYSxiLGMpLFU9ZCk6WmooYSxiLGMpO2JyZWFrO2RlZmF1bHQ6WmooYSxiLGMpfX1mdW5jdGlvbiBiayhhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBMaik7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPWNrLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxuZnVuY3Rpb24gZGsoYSxiKXt2YXIgYz1iLmRlbGV0aW9ucztpZihudWxsIT09Yylmb3IodmFyIGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXTt0cnl7dmFyIGY9YSxnPWIsaD1nO2E6Zm9yKDtudWxsIT09aDspe3N3aXRjaChoLnRhZyl7Y2FzZSA1Olg9aC5zdGF0ZU5vZGU7WWo9ITE7YnJlYWsgYTtjYXNlIDM6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGE7Y2FzZSA0Olg9aC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDticmVhayBhfWg9aC5yZXR1cm59aWYobnVsbD09PVgpdGhyb3cgRXJyb3IocCgxNjApKTthayhmLGcsZSk7WD1udWxsO1lqPSExO3ZhciBrPWUuYWx0ZXJuYXRlO251bGwhPT1rJiYoay5yZXR1cm49bnVsbCk7ZS5yZXR1cm49bnVsbH1jYXRjaChsKXtXKGUsYixsKX19aWYoYi5zdWJ0cmVlRmxhZ3MmMTI4NTQpZm9yKGI9Yi5jaGlsZDtudWxsIT09YjspZWsoYixhKSxiPWIuc2libGluZ31cbmZ1bmN0aW9uIGVrKGEsYil7dmFyIGM9YS5hbHRlcm5hdGUsZD1hLmZsYWdzO3N3aXRjaChhLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXt0cnl7UWooMyxhLGEucmV0dXJuKSxSaigzLGEpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX10cnl7UWooNSxhLGEucmV0dXJuKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMTpkayhiLGEpO2ZrKGEpO2QmNTEyJiZudWxsIT09YyYmTWooYyxjLnJldHVybik7YnJlYWs7Y2FzZSA1OmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTtpZihhLmZsYWdzJjMyKXt2YXIgZT1hLnN0YXRlTm9kZTt0cnl7b2IoZSxcIlwiKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWlmKGQmNCYmKGU9YS5zdGF0ZU5vZGUsbnVsbCE9ZSkpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcyxnPW51bGwhPT1jP2MubWVtb2l6ZWRQcm9wczpmLGg9YS50eXBlLGs9YS51cGRhdGVRdWV1ZTtcbmEudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09ayl0cnl7XCJpbnB1dFwiPT09aCYmXCJyYWRpb1wiPT09Zi50eXBlJiZudWxsIT1mLm5hbWUmJmFiKGUsZik7dmIoaCxnKTt2YXIgbD12YihoLGYpO2ZvcihnPTA7ZzxrLmxlbmd0aDtnKz0yKXt2YXIgbT1rW2ddLHE9a1tnKzFdO1wic3R5bGVcIj09PW0/c2IoZSxxKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1tP25iKGUscSk6XCJjaGlsZHJlblwiPT09bT9vYihlLHEpOnRhKGUsbSxxLGwpfXN3aXRjaChoKXtjYXNlIFwiaW5wdXRcIjpiYihlLGYpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmliKGUsZik7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOnZhciByPWUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtlLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFmLm11bHRpcGxlO3ZhciB5PWYudmFsdWU7bnVsbCE9eT9mYihlLCEhZi5tdWx0aXBsZSx5LCExKTpyIT09ISFmLm11bHRpcGxlJiYobnVsbCE9Zi5kZWZhdWx0VmFsdWU/ZmIoZSwhIWYubXVsdGlwbGUsXG5mLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoZSwhIWYubXVsdGlwbGUsZi5tdWx0aXBsZT9bXTpcIlwiLCExKSl9ZVtQZl09Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgNjpkayhiLGEpO2ZrKGEpO2lmKGQmNCl7aWYobnVsbD09PWEuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTYyKSk7ZT1hLnN0YXRlTm9kZTtmPWEubWVtb2l6ZWRQcm9wczt0cnl7ZS5ub2RlVmFsdWU9Zn1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWJyZWFrO2Nhc2UgMzpkayhiLGEpO2ZrKGEpO2lmKGQmNCYmbnVsbCE9PWMmJmMubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpdHJ5e2JkKGIuY29udGFpbmVySW5mbyl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfWJyZWFrO2Nhc2UgNDpkayhiLGEpO2ZrKGEpO2JyZWFrO2Nhc2UgMTM6ZGsoYixhKTtmayhhKTtlPWEuY2hpbGQ7ZS5mbGFncyY4MTkyJiYoZj1udWxsIT09ZS5tZW1vaXplZFN0YXRlLGUuc3RhdGVOb2RlLmlzSGlkZGVuPWYsIWZ8fFxubnVsbCE9PWUuYWx0ZXJuYXRlJiZudWxsIT09ZS5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZXx8KGdrPUIoKSkpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMjptPW51bGwhPT1jJiZudWxsIT09Yy5tZW1vaXplZFN0YXRlO2EubW9kZSYxPyhVPShsPVUpfHxtLGRrKGIsYSksVT1sKTpkayhiLGEpO2ZrKGEpO2lmKGQmODE5Mil7bD1udWxsIT09YS5tZW1vaXplZFN0YXRlO2lmKChhLnN0YXRlTm9kZS5pc0hpZGRlbj1sKSYmIW0mJjAhPT0oYS5tb2RlJjEpKWZvcihWPWEsbT1hLmNoaWxkO251bGwhPT1tOyl7Zm9yKHE9Vj1tO251bGwhPT1WOyl7cj1WO3k9ci5jaGlsZDtzd2l0Y2goci50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpRaig0LHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMTpNaihyLHIucmV0dXJuKTt2YXIgbj1yLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnRXaWxsVW5tb3VudCl7ZD1yO2M9ci5yZXR1cm47dHJ5e2I9ZCxuLnByb3BzPVxuYi5tZW1vaXplZFByb3BzLG4uc3RhdGU9Yi5tZW1vaXplZFN0YXRlLG4uY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaCh0KXtXKGQsYyx0KX19YnJlYWs7Y2FzZSA1Ok1qKHIsci5yZXR1cm4pO2JyZWFrO2Nhc2UgMjI6aWYobnVsbCE9PXIubWVtb2l6ZWRTdGF0ZSl7aGsocSk7Y29udGludWV9fW51bGwhPT15Pyh5LnJldHVybj1yLFY9eSk6aGsocSl9bT1tLnNpYmxpbmd9YTpmb3IobT1udWxsLHE9YTs7KXtpZig1PT09cS50YWcpe2lmKG51bGw9PT1tKXttPXE7dHJ5e2U9cS5zdGF0ZU5vZGUsbD8oZj1lLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooaD1xLnN0YXRlTm9kZSxrPXEubWVtb2l6ZWRQcm9wcy5zdHlsZSxnPXZvaWQgMCE9PWsmJm51bGwhPT1rJiZrLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9rLmRpc3BsYXk6bnVsbCxoLnN0eWxlLmRpc3BsYXk9XG5yYihcImRpc3BsYXlcIixnKSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfX19ZWxzZSBpZig2PT09cS50YWcpe2lmKG51bGw9PT1tKXRyeXtxLnN0YXRlTm9kZS5ub2RlVmFsdWU9bD9cIlwiOnEubWVtb2l6ZWRQcm9wc31jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fWVsc2UgaWYoKDIyIT09cS50YWcmJjIzIT09cS50YWd8fG51bGw9PT1xLm1lbW9pemVkU3RhdGV8fHE9PT1hKSYmbnVsbCE9PXEuY2hpbGQpe3EuY2hpbGQucmV0dXJuPXE7cT1xLmNoaWxkO2NvbnRpbnVlfWlmKHE9PT1hKWJyZWFrIGE7Zm9yKDtudWxsPT09cS5zaWJsaW5nOyl7aWYobnVsbD09PXEucmV0dXJufHxxLnJldHVybj09PWEpYnJlYWsgYTttPT09cSYmKG09bnVsbCk7cT1xLnJldHVybn1tPT09cSYmKG09bnVsbCk7cS5zaWJsaW5nLnJldHVybj1xLnJldHVybjtxPXEuc2libGluZ319YnJlYWs7Y2FzZSAxOTpkayhiLGEpO2ZrKGEpO2QmNCYmYmsoYSk7YnJlYWs7Y2FzZSAyMTpicmVhaztkZWZhdWx0OmRrKGIsXG5hKSxmayhhKX19ZnVuY3Rpb24gZmsoYSl7dmFyIGI9YS5mbGFncztpZihiJjIpe3RyeXthOntmb3IodmFyIGM9YS5yZXR1cm47bnVsbCE9PWM7KXtpZihVaihjKSl7dmFyIGQ9YzticmVhayBhfWM9Yy5yZXR1cm59dGhyb3cgRXJyb3IocCgxNjApKTt9c3dpdGNoKGQudGFnKXtjYXNlIDU6dmFyIGU9ZC5zdGF0ZU5vZGU7ZC5mbGFncyYzMiYmKG9iKGUsXCJcIiksZC5mbGFncyY9LTMzKTt2YXIgZj1WaihhKTtYaihhLGYsZSk7YnJlYWs7Y2FzZSAzOmNhc2UgNDp2YXIgZz1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGg9VmooYSk7V2ooYSxoLGcpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjEpKTt9fWNhdGNoKGspe1coYSxhLnJldHVybixrKX1hLmZsYWdzJj0tM31iJjQwOTYmJihhLmZsYWdzJj0tNDA5Nyl9ZnVuY3Rpb24gaWsoYSxiLGMpe1Y9YTtqayhhLGIsYyl9XG5mdW5jdGlvbiBqayhhLGIsYyl7Zm9yKHZhciBkPTAhPT0oYS5tb2RlJjEpO251bGwhPT1WOyl7dmFyIGU9VixmPWUuY2hpbGQ7aWYoMjI9PT1lLnRhZyYmZCl7dmFyIGc9bnVsbCE9PWUubWVtb2l6ZWRTdGF0ZXx8S2o7aWYoIWcpe3ZhciBoPWUuYWx0ZXJuYXRlLGs9bnVsbCE9PWgmJm51bGwhPT1oLm1lbW9pemVkU3RhdGV8fFU7aD1Lajt2YXIgbD1VO0tqPWc7aWYoKFU9aykmJiFsKWZvcihWPWU7bnVsbCE9PVY7KWc9VixrPWcuY2hpbGQsMjI9PT1nLnRhZyYmbnVsbCE9PWcubWVtb2l6ZWRTdGF0ZT9rayhlKTpudWxsIT09az8oay5yZXR1cm49ZyxWPWspOmtrKGUpO2Zvcig7bnVsbCE9PWY7KVY9ZixqayhmLGIsYyksZj1mLnNpYmxpbmc7Vj1lO0tqPWg7VT1sfWxrKGEsYixjKX1lbHNlIDAhPT0oZS5zdWJ0cmVlRmxhZ3MmODc3MikmJm51bGwhPT1mPyhmLnJldHVybj1lLFY9Zik6bGsoYSxiLGMpfX1cbmZ1bmN0aW9uIGxrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKDAhPT0oYi5mbGFncyY4NzcyKSl7dmFyIGM9Yi5hbHRlcm5hdGU7dHJ5e2lmKDAhPT0oYi5mbGFncyY4NzcyKSlzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6VXx8UmooNSxiKTticmVhaztjYXNlIDE6dmFyIGQ9Yi5zdGF0ZU5vZGU7aWYoYi5mbGFncyY0JiYhVSlpZihudWxsPT09YylkLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZT1iLmVsZW1lbnRUeXBlPT09Yi50eXBlP2MubWVtb2l6ZWRQcm9wczpMZyhiLnR5cGUsYy5tZW1vaXplZFByb3BzKTtkLmNvbXBvbmVudERpZFVwZGF0ZShlLGMubWVtb2l6ZWRTdGF0ZSxkLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX12YXIgZj1iLnVwZGF0ZVF1ZXVlO251bGwhPT1mJiZpaChiLGYsZCk7YnJlYWs7Y2FzZSAzOnZhciBnPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWcpe2M9bnVsbDtpZihudWxsIT09Yi5jaGlsZClzd2l0Y2goYi5jaGlsZC50YWcpe2Nhc2UgNTpjPVxuYi5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmM9Yi5jaGlsZC5zdGF0ZU5vZGV9aWgoYixnLGMpfWJyZWFrO2Nhc2UgNTp2YXIgaD1iLnN0YXRlTm9kZTtpZihudWxsPT09YyYmYi5mbGFncyY0KXtjPWg7dmFyIGs9Yi5tZW1vaXplZFByb3BzO3N3aXRjaChiLnR5cGUpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6ay5hdXRvRm9jdXMmJmMuZm9jdXMoKTticmVhaztjYXNlIFwiaW1nXCI6ay5zcmMmJihjLnNyYz1rLnNyYyl9fWJyZWFrO2Nhc2UgNjpicmVhaztjYXNlIDQ6YnJlYWs7Y2FzZSAxMjpicmVhaztjYXNlIDEzOmlmKG51bGw9PT1iLm1lbW9pemVkU3RhdGUpe3ZhciBsPWIuYWx0ZXJuYXRlO2lmKG51bGwhPT1sKXt2YXIgbT1sLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PW0pe3ZhciBxPW0uZGVoeWRyYXRlZDtudWxsIT09cSYmYmQocSl9fX1icmVhaztjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMTpjYXNlIDIyOmNhc2UgMjM6Y2FzZSAyNTpicmVhaztcbmRlZmF1bHQ6dGhyb3cgRXJyb3IocCgxNjMpKTt9VXx8Yi5mbGFncyY1MTImJlNqKGIpfWNhdGNoKHIpe1coYixiLnJldHVybixyKX19aWYoYj09PWEpe1Y9bnVsbDticmVha31jPWIuc2libGluZztpZihudWxsIT09Yyl7Yy5yZXR1cm49Yi5yZXR1cm47Vj1jO2JyZWFrfVY9Yi5yZXR1cm59fWZ1bmN0aW9uIGhrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO2lmKGI9PT1hKXtWPW51bGw7YnJlYWt9dmFyIGM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19XG5mdW5jdGlvbiBrayhhKXtmb3IoO251bGwhPT1WOyl7dmFyIGI9Vjt0cnl7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OnZhciBjPWIucmV0dXJuO3RyeXtSaig0LGIpfWNhdGNoKGspe1coYixjLGspfWJyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRNb3VudCl7dmFyIGU9Yi5yZXR1cm47dHJ5e2QuY29tcG9uZW50RGlkTW91bnQoKX1jYXRjaChrKXtXKGIsZSxrKX19dmFyIGY9Yi5yZXR1cm47dHJ5e1NqKGIpfWNhdGNoKGspe1coYixmLGspfWJyZWFrO2Nhc2UgNTp2YXIgZz1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGcsayl9fX1jYXRjaChrKXtXKGIsYi5yZXR1cm4sayl9aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgaD1iLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWIucmV0dXJuO1Y9aDticmVha31WPWIucmV0dXJufX1cbnZhciBtaz1NYXRoLmNlaWwsbms9dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixvaz11YS5SZWFjdEN1cnJlbnRPd25lcixwaz11YS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxLPTAsUj1udWxsLFk9bnVsbCxaPTAsZ2o9MCxmaj1VZigwKSxUPTAscWs9bnVsbCxoaD0wLHJrPTAsc2s9MCx0az1udWxsLHVrPW51bGwsZ2s9MCxIaj1JbmZpbml0eSx2az1udWxsLFBpPSExLFFpPW51bGwsU2k9bnVsbCx3az0hMSx4az1udWxsLHlrPTAsems9MCxBaz1udWxsLEJrPS0xLENrPTA7ZnVuY3Rpb24gTCgpe3JldHVybiAwIT09KEsmNik/QigpOi0xIT09Qms/Qms6Qms9QigpfVxuZnVuY3Rpb24gbGgoYSl7aWYoMD09PShhLm1vZGUmMSkpcmV0dXJuIDE7aWYoMCE9PShLJjIpJiYwIT09WilyZXR1cm4gWiYtWjtpZihudWxsIT09S2cudHJhbnNpdGlvbilyZXR1cm4gMD09PUNrJiYoQ2s9eWMoKSksQ2s7YT1DO2lmKDAhPT1hKXJldHVybiBhO2E9d2luZG93LmV2ZW50O2E9dm9pZCAwPT09YT8xNjpqZChhLnR5cGUpO3JldHVybiBhfWZ1bmN0aW9uIG1oKGEsYixjLGQpe2lmKDUwPHprKXRocm93IHprPTAsQWs9bnVsbCxFcnJvcihwKDE4NSkpO0FjKGEsYyxkKTtpZigwPT09KEsmMil8fGEhPT1SKWE9PT1SJiYoMD09PShLJjIpJiYocmt8PWMpLDQ9PT1UJiZEayhhLFopKSxFayhhLGQpLDE9PT1jJiYwPT09SyYmMD09PShiLm1vZGUmMSkmJihIaj1CKCkrNTAwLGZnJiZqZygpKX1cbmZ1bmN0aW9uIEVrKGEsYil7dmFyIGM9YS5jYWxsYmFja05vZGU7d2MoYSxiKTt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpbnVsbCE9PWMmJmJjKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTA7ZWxzZSBpZihiPWQmLWQsYS5jYWxsYmFja1ByaW9yaXR5IT09Yil7bnVsbCE9YyYmYmMoYyk7aWYoMT09PWIpMD09PWEudGFnP2lnKEZrLmJpbmQobnVsbCxhKSk6aGcoRmsuYmluZChudWxsLGEpKSxKZihmdW5jdGlvbigpezA9PT0oSyY2KSYmamcoKX0pLGM9bnVsbDtlbHNle3N3aXRjaChEYyhkKSl7Y2FzZSAxOmM9ZmM7YnJlYWs7Y2FzZSA0OmM9Z2M7YnJlYWs7Y2FzZSAxNjpjPWhjO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmM9amM7YnJlYWs7ZGVmYXVsdDpjPWhjfWM9R2soYyxIay5iaW5kKG51bGwsYSkpfWEuY2FsbGJhY2tQcmlvcml0eT1iO2EuY2FsbGJhY2tOb2RlPWN9fVxuZnVuY3Rpb24gSGsoYSxiKXtCaz0tMTtDaz0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO3ZhciBjPWEuY2FsbGJhY2tOb2RlO2lmKElrKCkmJmEuY2FsbGJhY2tOb2RlIT09YylyZXR1cm4gbnVsbDt2YXIgZD11YyhhLGE9PT1SP1o6MCk7aWYoMD09PWQpcmV0dXJuIG51bGw7aWYoMCE9PShkJjMwKXx8MCE9PShkJmEuZXhwaXJlZExhbmVzKXx8YiliPUprKGEsZCk7ZWxzZXtiPWQ7dmFyIGU9SztLfD0yO3ZhciBmPUtrKCk7aWYoUiE9PWF8fFohPT1iKXZrPW51bGwsSGo9QigpKzUwMCxMayhhLGIpO2RvIHRyeXtNaygpO2JyZWFrfWNhdGNoKGgpe05rKGEsaCl9d2hpbGUoMSk7UWcoKTtuay5jdXJyZW50PWY7Sz1lO251bGwhPT1ZP2I9MDooUj1udWxsLFo9MCxiPVQpfWlmKDAhPT1iKXsyPT09YiYmKGU9eGMoYSksMCE9PWUmJihkPWUsYj1PayhhLGUpKSk7aWYoMT09PWIpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7aWYoNj09PWIpRGsoYSxkKTtcbmVsc2V7ZT1hLmN1cnJlbnQuYWx0ZXJuYXRlO2lmKDA9PT0oZCYzMCkmJiFQayhlKSYmKGI9SmsoYSxkKSwyPT09YiYmKGY9eGMoYSksMCE9PWYmJihkPWYsYj1PayhhLGYpKSksMT09PWIpKXRocm93IGM9cWssTGsoYSwwKSxEayhhLGQpLEVrKGEsQigpKSxjO2EuZmluaXNoZWRXb3JrPWU7YS5maW5pc2hlZExhbmVzPWQ7c3dpdGNoKGIpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IocCgzNDUpKTtjYXNlIDI6UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSAzOkRrKGEsZCk7aWYoKGQmMTMwMDIzNDI0KT09PWQmJihiPWdrKzUwMC1CKCksMTA8Yikpe2lmKDAhPT11YyhhLDApKWJyZWFrO2U9YS5zdXNwZW5kZWRMYW5lcztpZigoZSZkKSE9PWQpe0woKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxiKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDQ6RGsoYSxkKTtpZigoZCY0MTk0MjQwKT09PVxuZClicmVhaztiPWEuZXZlbnRUaW1lcztmb3IoZT0tMTswPGQ7KXt2YXIgZz0zMS1vYyhkKTtmPTE8PGc7Zz1iW2ddO2c+ZSYmKGU9Zyk7ZCY9fmZ9ZD1lO2Q9QigpLWQ7ZD0oMTIwPmQ/MTIwOjQ4MD5kPzQ4MDoxMDgwPmQ/MTA4MDoxOTIwPmQ/MTkyMDozRTM+ZD8zRTM6NDMyMD5kPzQzMjA6MTk2MCptayhkLzE5NjApKS1kO2lmKDEwPGQpe2EudGltZW91dEhhbmRsZT1GZihRay5iaW5kKG51bGwsYSx1ayx2ayksZCk7YnJlYWt9UWsoYSx1ayx2ayk7YnJlYWs7Y2FzZSA1OlFrKGEsdWssdmspO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMjkpKTt9fX1FayhhLEIoKSk7cmV0dXJuIGEuY2FsbGJhY2tOb2RlPT09Yz9Iay5iaW5kKG51bGwsYSk6bnVsbH1cbmZ1bmN0aW9uIE9rKGEsYil7dmFyIGM9dGs7YS5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkJiYoTGsoYSxiKS5mbGFnc3w9MjU2KTthPUprKGEsYik7MiE9PWEmJihiPXVrLHVrPWMsbnVsbCE9PWImJkdqKGIpKTtyZXR1cm4gYX1mdW5jdGlvbiBHaihhKXtudWxsPT09dWs/dWs9YTp1ay5wdXNoLmFwcGx5KHVrLGEpfVxuZnVuY3Rpb24gUGsoYSl7Zm9yKHZhciBiPWE7Oyl7aWYoYi5mbGFncyYxNjM4NCl7dmFyIGM9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09YyYmKGM9Yy5zdG9yZXMsbnVsbCE9PWMpKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLGY9ZS5nZXRTbmFwc2hvdDtlPWUudmFsdWU7dHJ5e2lmKCFIZShmKCksZSkpcmV0dXJuITF9Y2F0Y2goZyl7cmV0dXJuITF9fX1jPWIuY2hpbGQ7aWYoYi5zdWJ0cmVlRmxhZ3MmMTYzODQmJm51bGwhPT1jKWMucmV0dXJuPWIsYj1jO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuITA7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4hMH1cbmZ1bmN0aW9uIERrKGEsYil7YiY9fnNrO2ImPX5yazthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLW9jKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1mdW5jdGlvbiBGayhhKXtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtJaygpO3ZhciBiPXVjKGEsMCk7aWYoMD09PShiJjEpKXJldHVybiBFayhhLEIoKSksbnVsbDt2YXIgYz1KayhhLGIpO2lmKDAhPT1hLnRhZyYmMj09PWMpe3ZhciBkPXhjKGEpOzAhPT1kJiYoYj1kLGM9T2soYSxkKSl9aWYoMT09PWMpdGhyb3cgYz1xayxMayhhLDApLERrKGEsYiksRWsoYSxCKCkpLGM7aWYoNj09PWMpdGhyb3cgRXJyb3IocCgzNDUpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRMYW5lcz1iO1FrKGEsdWssdmspO0VrKGEsQigpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFJrKGEsYil7dmFyIGM9SztLfD0xO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e0s9YywwPT09SyYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfX1mdW5jdGlvbiBTayhhKXtudWxsIT09eGsmJjA9PT14ay50YWcmJjA9PT0oSyY2KSYmSWsoKTt2YXIgYj1LO0t8PTE7dmFyIGM9cGsudHJhbnNpdGlvbixkPUM7dHJ5e2lmKHBrLnRyYW5zaXRpb249bnVsbCxDPTEsYSlyZXR1cm4gYSgpfWZpbmFsbHl7Qz1kLHBrLnRyYW5zaXRpb249YyxLPWIsMD09PShLJjYpJiZqZygpfX1mdW5jdGlvbiBJaigpe2dqPWZqLmN1cnJlbnQ7RShmail9XG5mdW5jdGlvbiBMayhhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxHZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3dnKGQpO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiYkZigpO2JyZWFrO2Nhc2UgMzpKaCgpO0UoV2YpO0UoSCk7T2goKTticmVhaztjYXNlIDU6TGgoZCk7YnJlYWs7Y2FzZSA0OkpoKCk7YnJlYWs7Y2FzZSAxMzpFKE0pO2JyZWFrO2Nhc2UgMTk6RShNKTticmVhaztjYXNlIDEwOlJnKGQudHlwZS5fY29udGV4dCk7YnJlYWs7Y2FzZSAyMjpjYXNlIDIzOklqKCl9Yz1jLnJldHVybn1SPWE7WT1hPXdoKGEuY3VycmVudCxudWxsKTtaPWdqPWI7VD0wO3FrPW51bGw7c2s9cms9aGg9MDt1az10az1udWxsO2lmKG51bGwhPT1XZyl7Zm9yKGI9XG4wO2I8V2cubGVuZ3RoO2IrKylpZihjPVdnW2JdLGQ9Yy5pbnRlcmxlYXZlZCxudWxsIT09ZCl7Yy5pbnRlcmxlYXZlZD1udWxsO3ZhciBlPWQubmV4dCxmPWMucGVuZGluZztpZihudWxsIT09Zil7dmFyIGc9Zi5uZXh0O2YubmV4dD1lO2QubmV4dD1nfWMucGVuZGluZz1kfVdnPW51bGx9cmV0dXJuIGF9XG5mdW5jdGlvbiBOayhhLGIpe2Rve3ZhciBjPVk7dHJ5e1FnKCk7UGguY3VycmVudD1haTtpZihTaCl7Zm9yKHZhciBkPU4ubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9U2g9ITF9Umg9MDtQPU89Tj1udWxsO1RoPSExO1VoPTA7b2suY3VycmVudD1udWxsO2lmKG51bGw9PT1jfHxudWxsPT09Yy5yZXR1cm4pe1Q9MTtxaz1iO1k9bnVsbDticmVha31hOnt2YXIgZj1hLGc9Yy5yZXR1cm4saD1jLGs9YjtiPVo7aC5mbGFnc3w9MzI3Njg7aWYobnVsbCE9PWsmJlwib2JqZWN0XCI9PT10eXBlb2YgayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGsudGhlbil7dmFyIGw9ayxtPWgscT1tLnRhZztpZigwPT09KG0ubW9kZSYxKSYmKDA9PT1xfHwxMT09PXF8fDE1PT09cSkpe3ZhciByPW0uYWx0ZXJuYXRlO3I/KG0udXBkYXRlUXVldWU9ci51cGRhdGVRdWV1ZSxtLm1lbW9pemVkU3RhdGU9ci5tZW1vaXplZFN0YXRlLFxubS5sYW5lcz1yLmxhbmVzKToobS51cGRhdGVRdWV1ZT1udWxsLG0ubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgeT1WaShnKTtpZihudWxsIT09eSl7eS5mbGFncyY9LTI1NztXaSh5LGcsaCxmLGIpO3kubW9kZSYxJiZUaShmLGwsYik7Yj15O2s9bDt2YXIgbj1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1uKXt2YXIgdD1uZXcgU2V0O3QuYWRkKGspO2IudXBkYXRlUXVldWU9dH1lbHNlIG4uYWRkKGspO2JyZWFrIGF9ZWxzZXtpZigwPT09KGImMSkpe1RpKGYsbCxiKTt1aigpO2JyZWFrIGF9az1FcnJvcihwKDQyNikpfX1lbHNlIGlmKEkmJmgubW9kZSYxKXt2YXIgSj1WaShnKTtpZihudWxsIT09Sil7MD09PShKLmZsYWdzJjY1NTM2KSYmKEouZmxhZ3N8PTI1Nik7V2koSixnLGgsZixiKTtKZyhLaShrLGgpKTticmVhayBhfX1mPWs9S2koayxoKTs0IT09VCYmKFQ9Mik7bnVsbD09PXRrP3RrPVtmXTp0ay5wdXNoKGYpO2Y9Zztkb3tzd2l0Y2goZi50YWcpe2Nhc2UgMzpmLmZsYWdzfD02NTUzNjtcbmImPS1iO2YubGFuZXN8PWI7dmFyIHg9T2koZixrLGIpO2ZoKGYseCk7YnJlYWsgYTtjYXNlIDE6aD1rO3ZhciB3PWYudHlwZSx1PWYuc3RhdGVOb2RlO2lmKDA9PT0oZi5mbGFncyYxMjgpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHUuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXModSkpKSl7Zi5mbGFnc3w9NjU1MzY7YiY9LWI7Zi5sYW5lc3w9Yjt2YXIgRj1SaShmLGgsYik7ZmgoZixGKTticmVhayBhfX1mPWYucmV0dXJufXdoaWxlKG51bGwhPT1mKX1UayhjKX1jYXRjaChuYSl7Yj1uYTtZPT09YyYmbnVsbCE9PWMmJihZPWM9Yy5yZXR1cm4pO2NvbnRpbnVlfWJyZWFrfXdoaWxlKDEpfWZ1bmN0aW9uIEtrKCl7dmFyIGE9bmsuY3VycmVudDtuay5jdXJyZW50PWFpO3JldHVybiBudWxsPT09YT9haTphfVxuZnVuY3Rpb24gdWooKXtpZigwPT09VHx8Mz09PVR8fDI9PT1UKVQ9NDtudWxsPT09Unx8MD09PShoaCYyNjg0MzU0NTUpJiYwPT09KHJrJjI2ODQzNTQ1NSl8fERrKFIsWil9ZnVuY3Rpb24gSmsoYSxiKXt2YXIgYz1LO0t8PTI7dmFyIGQ9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxMayhhLGIpO2RvIHRyeXtVaygpO2JyZWFrfWNhdGNoKGUpe05rKGEsZSl9d2hpbGUoMSk7UWcoKTtLPWM7bmsuY3VycmVudD1kO2lmKG51bGwhPT1ZKXRocm93IEVycm9yKHAoMjYxKSk7Uj1udWxsO1o9MDtyZXR1cm4gVH1mdW5jdGlvbiBVaygpe2Zvcig7bnVsbCE9PVk7KVZrKFkpfWZ1bmN0aW9uIE1rKCl7Zm9yKDtudWxsIT09WSYmIWNjKCk7KVZrKFkpfWZ1bmN0aW9uIFZrKGEpe3ZhciBiPVdrKGEuYWx0ZXJuYXRlLGEsZ2opO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09Yj9UayhhKTpZPWI7b2suY3VycmVudD1udWxsfVxuZnVuY3Rpb24gVGsoYSl7dmFyIGI9YTtkb3t2YXIgYz1iLmFsdGVybmF0ZTthPWIucmV0dXJuO2lmKDA9PT0oYi5mbGFncyYzMjc2OCkpe2lmKGM9RmooYyxiLGdqKSxudWxsIT09Yyl7WT1jO3JldHVybn19ZWxzZXtjPUpqKGMsYik7aWYobnVsbCE9PWMpe2MuZmxhZ3MmPTMyNzY3O1k9YztyZXR1cm59aWYobnVsbCE9PWEpYS5mbGFnc3w9MzI3NjgsYS5zdWJ0cmVlRmxhZ3M9MCxhLmRlbGV0aW9ucz1udWxsO2Vsc2V7VD02O1k9bnVsbDtyZXR1cm59fWI9Yi5zaWJsaW5nO2lmKG51bGwhPT1iKXtZPWI7cmV0dXJufVk9Yj1hfXdoaWxlKG51bGwhPT1iKTswPT09VCYmKFQ9NSl9ZnVuY3Rpb24gUWsoYSxiLGMpe3ZhciBkPUMsZT1way50cmFuc2l0aW9uO3RyeXtway50cmFuc2l0aW9uPW51bGwsQz0xLFhrKGEsYixjLGQpfWZpbmFsbHl7cGsudHJhbnNpdGlvbj1lLEM9ZH1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFhrKGEsYixjLGQpe2RvIElrKCk7d2hpbGUobnVsbCE9PXhrKTtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMjcpKTtjPWEuZmluaXNoZWRXb3JrO3ZhciBlPWEuZmluaXNoZWRMYW5lcztpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRMYW5lcz0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IocCgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tQcmlvcml0eT0wO3ZhciBmPWMubGFuZXN8Yy5jaGlsZExhbmVzO0JjKGEsZik7YT09PVImJihZPVI9bnVsbCxaPTApOzA9PT0oYy5zdWJ0cmVlRmxhZ3MmMjA2NCkmJjA9PT0oYy5mbGFncyYyMDY0KXx8d2t8fCh3az0hMCxHayhoYyxmdW5jdGlvbigpe0lrKCk7cmV0dXJuIG51bGx9KSk7Zj0wIT09KGMuZmxhZ3MmMTU5OTApO2lmKDAhPT0oYy5zdWJ0cmVlRmxhZ3MmMTU5OTApfHxmKXtmPXBrLnRyYW5zaXRpb247cGsudHJhbnNpdGlvbj1udWxsO1xudmFyIGc9QztDPTE7dmFyIGg9SztLfD00O29rLmN1cnJlbnQ9bnVsbDtQaihhLGMpO2VrKGMsYSk7T2UoRGYpO2RkPSEhQ2Y7RGY9Q2Y9bnVsbDthLmN1cnJlbnQ9YztpayhjLGEsZSk7ZGMoKTtLPWg7Qz1nO3BrLnRyYW5zaXRpb249Zn1lbHNlIGEuY3VycmVudD1jO3drJiYod2s9ITEseGs9YSx5az1lKTtmPWEucGVuZGluZ0xhbmVzOzA9PT1mJiYoU2k9bnVsbCk7bWMoYy5zdGF0ZU5vZGUsZCk7RWsoYSxCKCkpO2lmKG51bGwhPT1iKWZvcihkPWEub25SZWNvdmVyYWJsZUVycm9yLGM9MDtjPGIubGVuZ3RoO2MrKyllPWJbY10sZChlLnZhbHVlLHtjb21wb25lbnRTdGFjazplLnN0YWNrLGRpZ2VzdDplLmRpZ2VzdH0pO2lmKFBpKXRocm93IFBpPSExLGE9UWksUWk9bnVsbCxhOzAhPT0oeWsmMSkmJjAhPT1hLnRhZyYmSWsoKTtmPWEucGVuZGluZ0xhbmVzOzAhPT0oZiYxKT9hPT09QWs/emsrKzooems9MCxBaz1hKTp6az0wO2pnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBJaygpe2lmKG51bGwhPT14ayl7dmFyIGE9RGMoeWspLGI9cGsudHJhbnNpdGlvbixjPUM7dHJ5e3BrLnRyYW5zaXRpb249bnVsbDtDPTE2PmE/MTY6YTtpZihudWxsPT09eGspdmFyIGQ9ITE7ZWxzZXthPXhrO3hrPW51bGw7eWs9MDtpZigwIT09KEsmNikpdGhyb3cgRXJyb3IocCgzMzEpKTt2YXIgZT1LO0t8PTQ7Zm9yKFY9YS5jdXJyZW50O251bGwhPT1WOyl7dmFyIGY9VixnPWYuY2hpbGQ7aWYoMCE9PShWLmZsYWdzJjE2KSl7dmFyIGg9Zi5kZWxldGlvbnM7aWYobnVsbCE9PWgpe2Zvcih2YXIgaz0wO2s8aC5sZW5ndGg7aysrKXt2YXIgbD1oW2tdO2ZvcihWPWw7bnVsbCE9PVY7KXt2YXIgbT1WO3N3aXRjaChtLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig4LG0sZil9dmFyIHE9bS5jaGlsZDtpZihudWxsIT09cSlxLnJldHVybj1tLFY9cTtlbHNlIGZvcig7bnVsbCE9PVY7KXttPVY7dmFyIHI9bS5zaWJsaW5nLHk9bS5yZXR1cm47VGoobSk7aWYobT09PVxubCl7Vj1udWxsO2JyZWFrfWlmKG51bGwhPT1yKXtyLnJldHVybj15O1Y9cjticmVha31WPXl9fX12YXIgbj1mLmFsdGVybmF0ZTtpZihudWxsIT09bil7dmFyIHQ9bi5jaGlsZDtpZihudWxsIT09dCl7bi5jaGlsZD1udWxsO2Rve3ZhciBKPXQuc2libGluZzt0LnNpYmxpbmc9bnVsbDt0PUp9d2hpbGUobnVsbCE9PXQpfX1WPWZ9fWlmKDAhPT0oZi5zdWJ0cmVlRmxhZ3MmMjA2NCkmJm51bGwhPT1nKWcucmV0dXJuPWYsVj1nO2Vsc2UgYjpmb3IoO251bGwhPT1WOyl7Zj1WO2lmKDAhPT0oZi5mbGFncyYyMDQ4KSlzd2l0Y2goZi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6UWooOSxmLGYucmV0dXJuKX12YXIgeD1mLnNpYmxpbmc7aWYobnVsbCE9PXgpe3gucmV0dXJuPWYucmV0dXJuO1Y9eDticmVhayBifVY9Zi5yZXR1cm59fXZhciB3PWEuY3VycmVudDtmb3IoVj13O251bGwhPT1WOyl7Zz1WO3ZhciB1PWcuY2hpbGQ7aWYoMCE9PShnLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PVxudSl1LnJldHVybj1nLFY9dTtlbHNlIGI6Zm9yKGc9dztudWxsIT09Vjspe2g9VjtpZigwIT09KGguZmxhZ3MmMjA0OCkpdHJ5e3N3aXRjaChoLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpSaig5LGgpfX1jYXRjaChuYSl7VyhoLGgucmV0dXJuLG5hKX1pZihoPT09Zyl7Vj1udWxsO2JyZWFrIGJ9dmFyIEY9aC5zaWJsaW5nO2lmKG51bGwhPT1GKXtGLnJldHVybj1oLnJldHVybjtWPUY7YnJlYWsgYn1WPWgucmV0dXJufX1LPWU7amcoKTtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uUG9zdENvbW1pdEZpYmVyUm9vdCl0cnl7bGMub25Qb3N0Q29tbWl0RmliZXJSb290KGtjLGEpfWNhdGNoKG5hKXt9ZD0hMH1yZXR1cm4gZH1maW5hbGx5e0M9Yyxway50cmFuc2l0aW9uPWJ9fXJldHVybiExfWZ1bmN0aW9uIFlrKGEsYixjKXtiPUtpKGMsYik7Yj1PaShhLGIsMSk7YT1kaChhLGIsMSk7Yj1MKCk7bnVsbCE9PWEmJihBYyhhLDEsYiksRWsoYSxiKSl9XG5mdW5jdGlvbiBXKGEsYixjKXtpZigzPT09YS50YWcpWWsoYSxhLGMpO2Vsc2UgZm9yKDtudWxsIT09Yjspe2lmKDM9PT1iLnRhZyl7WWsoYixhLGMpO2JyZWFrfWVsc2UgaWYoMT09PWIudGFnKXt2YXIgZD1iLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09U2l8fCFTaS5oYXMoZCkpKXthPUtpKGMsYSk7YT1SaShiLGEsMSk7Yj1kaChiLGEsMSk7YT1MKCk7bnVsbCE9PWImJihBYyhiLDEsYSksRWsoYixhKSk7YnJlYWt9fWI9Yi5yZXR1cm59fVxuZnVuY3Rpb24gVWkoYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtiPUwoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmM7Uj09PWEmJihaJmMpPT09YyYmKDQ9PT1UfHwzPT09VCYmKFomMTMwMDIzNDI0KT09PVomJjUwMD5CKCktZ2s/TGsoYSwwKTpza3w9Yyk7RWsoYSxiKX1mdW5jdGlvbiBaayhhLGIpezA9PT1iJiYoMD09PShhLm1vZGUmMSk/Yj0xOihiPXNjLHNjPDw9MSwwPT09KHNjJjEzMDAyMzQyNCkmJihzYz00MTk0MzA0KSkpO3ZhciBjPUwoKTthPVpnKGEsYik7bnVsbCE9PWEmJihBYyhhLGIsYyksRWsoYSxjKSl9ZnVuY3Rpb24gdmooYSl7dmFyIGI9YS5tZW1vaXplZFN0YXRlLGM9MDtudWxsIT09YiYmKGM9Yi5yZXRyeUxhbmUpO1prKGEsYyl9XG5mdW5jdGlvbiBjayhhLGIpe3ZhciBjPTA7c3dpdGNoKGEudGFnKXtjYXNlIDEzOnZhciBkPWEuc3RhdGVOb2RlO3ZhciBlPWEubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGM9ZS5yZXRyeUxhbmUpO2JyZWFrO2Nhc2UgMTk6ZD1hLnN0YXRlTm9kZTticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMzE0KSk7fW51bGwhPT1kJiZkLmRlbGV0ZShiKTtaayhhLGMpfXZhciBXaztcbldrPWZ1bmN0aW9uKGEsYixjKXtpZihudWxsIT09YSlpZihhLm1lbW9pemVkUHJvcHMhPT1iLnBlbmRpbmdQcm9wc3x8V2YuY3VycmVudClVZz0hMDtlbHNle2lmKDA9PT0oYS5sYW5lcyZjKSYmMD09PShiLmZsYWdzJjEyOCkpcmV0dXJuIFVnPSExLHpqKGEsYixjKTtVZz0wIT09KGEuZmxhZ3MmMTMxMDcyKT8hMDohMX1lbHNlIFVnPSExLEkmJjAhPT0oYi5mbGFncyYxMDQ4NTc2KSYmdWcoYixuZyxiLmluZGV4KTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6dmFyIGQ9Yi50eXBlO2pqKGEsYik7YT1iLnBlbmRpbmdQcm9wczt2YXIgZT1ZZihiLEguY3VycmVudCk7VGcoYixjKTtlPVhoKG51bGwsYixkLGEsZSxjKTt2YXIgZj1iaSgpO2IuZmxhZ3N8PTE7XCJvYmplY3RcIj09PXR5cGVvZiBlJiZudWxsIT09ZSYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGUucmVuZGVyJiZ2b2lkIDA9PT1lLiQkdHlwZW9mPyhiLnRhZz0xLGIubWVtb2l6ZWRTdGF0ZT1udWxsLGIudXBkYXRlUXVldWU9XG5udWxsLFpmKGQpPyhmPSEwLGNnKGIpKTpmPSExLGIubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGwsYWgoYiksZS51cGRhdGVyPW5oLGIuc3RhdGVOb2RlPWUsZS5fcmVhY3RJbnRlcm5hbHM9YixyaChiLGQsYSxjKSxiPWtqKG51bGwsYixkLCEwLGYsYykpOihiLnRhZz0wLEkmJmYmJnZnKGIpLFlpKG51bGwsYixlLGMpLGI9Yi5jaGlsZCk7cmV0dXJuIGI7Y2FzZSAxNjpkPWIuZWxlbWVudFR5cGU7YTp7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO2U9ZC5faW5pdDtkPWUoZC5fcGF5bG9hZCk7Yi50eXBlPWQ7ZT1iLnRhZz0kayhkKTthPUxnKGQsYSk7c3dpdGNoKGUpe2Nhc2UgMDpiPWRqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1paihudWxsLGIsZCxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVppKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWoobnVsbCxiLGQsTGcoZC50eXBlLGEpLGMpO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgzMDYsXG5kLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGRqKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLGlqKGEsYixkLGUsYyk7Y2FzZSAzOmE6e2xqKGIpO2lmKG51bGw9PT1hKXRocm93IEVycm9yKHAoMzg3KSk7ZD1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRTdGF0ZTtlPWYuZWxlbWVudDtiaChhLGIpO2doKGIsZCxudWxsLGMpO3ZhciBnPWIubWVtb2l6ZWRTdGF0ZTtkPWcuZWxlbWVudDtpZihmLmlzRGVoeWRyYXRlZClpZihmPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOiExLGNhY2hlOmcuY2FjaGUscGVuZGluZ1N1c3BlbnNlQm91bmRhcmllczpnLnBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXMsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc30sYi51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9XG5mLGIubWVtb2l6ZWRTdGF0ZT1mLGIuZmxhZ3MmMjU2KXtlPUtpKEVycm9yKHAoNDIzKSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBpZihkIT09ZSl7ZT1LaShFcnJvcihwKDQyNCkpLGIpO2I9bWooYSxiLGQsYyxlKTticmVhayBhfWVsc2UgZm9yKHlnPUxmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCkseGc9YixJPSEwLHpnPW51bGwsYz1DaChiLG51bGwsZCxjKSxiLmNoaWxkPWM7YzspYy5mbGFncz1jLmZsYWdzJi0zfDQwOTYsYz1jLnNpYmxpbmc7ZWxzZXtJZygpO2lmKGQ9PT1lKXtiPSRpKGEsYixjKTticmVhayBhfVlpKGEsYixkLGMpfWI9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIEtoKGIpLG51bGw9PT1hJiZFZyhiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOm51bGwsZz1lLmNoaWxkcmVuLEVmKGQsZSk/Zz1udWxsOm51bGwhPT1mJiZFZihkLGYpJiYoYi5mbGFnc3w9MzIpLFxuaGooYSxiKSxZaShhLGIsZyxjKSxiLmNoaWxkO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkVnKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gcGooYSxiLGMpO2Nhc2UgNDpyZXR1cm4gSWgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9QmgoYixudWxsLGQsYyk6WWkoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpMZyhkLGUpLFppKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBZaShhLGIsYi5wZW5kaW5nUHJvcHMsYyksYi5jaGlsZDtjYXNlIDg6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTA6YTp7ZD1iLnR5cGUuX2NvbnRleHQ7ZT1iLnBlbmRpbmdQcm9wcztmPWIubWVtb2l6ZWRQcm9wcztcbmc9ZS52YWx1ZTtHKE1nLGQuX2N1cnJlbnRWYWx1ZSk7ZC5fY3VycmVudFZhbHVlPWc7aWYobnVsbCE9PWYpaWYoSGUoZi52YWx1ZSxnKSl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFXZi5jdXJyZW50KXtiPSRpKGEsYixjKTticmVhayBhfX1lbHNlIGZvcihmPWIuY2hpbGQsbnVsbCE9PWYmJihmLnJldHVybj1iKTtudWxsIT09Zjspe3ZhciBoPWYuZGVwZW5kZW5jaWVzO2lmKG51bGwhPT1oKXtnPWYuY2hpbGQ7Zm9yKHZhciBrPWguZmlyc3RDb250ZXh0O251bGwhPT1rOyl7aWYoay5jb250ZXh0PT09ZCl7aWYoMT09PWYudGFnKXtrPWNoKC0xLGMmLWMpO2sudGFnPTI7dmFyIGw9Zi51cGRhdGVRdWV1ZTtpZihudWxsIT09bCl7bD1sLnNoYXJlZDt2YXIgbT1sLnBlbmRpbmc7bnVsbD09PW0/ay5uZXh0PWs6KGsubmV4dD1tLm5leHQsbS5uZXh0PWspO2wucGVuZGluZz1rfX1mLmxhbmVzfD1jO2s9Zi5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLmxhbmVzfD1jKTtTZyhmLnJldHVybixcbmMsYik7aC5sYW5lc3w9YzticmVha31rPWsubmV4dH19ZWxzZSBpZigxMD09PWYudGFnKWc9Zi50eXBlPT09Yi50eXBlP251bGw6Zi5jaGlsZDtlbHNlIGlmKDE4PT09Zi50YWcpe2c9Zi5yZXR1cm47aWYobnVsbD09PWcpdGhyb3cgRXJyb3IocCgzNDEpKTtnLmxhbmVzfD1jO2g9Zy5hbHRlcm5hdGU7bnVsbCE9PWgmJihoLmxhbmVzfD1jKTtTZyhnLGMsYik7Zz1mLnNpYmxpbmd9ZWxzZSBnPWYuY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49ZjtlbHNlIGZvcihnPWY7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWY9Zy5zaWJsaW5nO2lmKG51bGwhPT1mKXtmLnJldHVybj1nLnJldHVybjtnPWY7YnJlYWt9Zz1nLnJldHVybn1mPWd9WWkoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZD1iLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixUZyhiLGMpLGU9VmcoZSksZD1kKGUpLGIuZmxhZ3N8PTEsWWkoYSxiLGQsYyksXG5iLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGQ9Yi50eXBlLGU9TGcoZCxiLnBlbmRpbmdQcm9wcyksZT1MZyhkLnR5cGUsZSksYWooYSxiLGQsZSxjKTtjYXNlIDE1OnJldHVybiBjaihhLGIsYi50eXBlLGIucGVuZGluZ1Byb3BzLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksamooYSxiKSxiLnRhZz0xLFpmKGQpPyhhPSEwLGNnKGIpKTphPSExLFRnKGIsYykscGgoYixkLGUpLHJoKGIsZCxlLGMpLGtqKG51bGwsYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4geWooYSxiLGMpO2Nhc2UgMjI6cmV0dXJuIGVqKGEsYixjKX10aHJvdyBFcnJvcihwKDE1NixiLnRhZykpO307ZnVuY3Rpb24gR2soYSxiKXtyZXR1cm4gYWMoYSxiKX1cbmZ1bmN0aW9uIGFsKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5zdWJ0cmVlRmxhZ3M9dGhpcy5mbGFncz0wO3RoaXMuZGVsZXRpb25zPW51bGw7dGhpcy5jaGlsZExhbmVzPXRoaXMubGFuZXM9MDt0aGlzLmFsdGVybmF0ZT1udWxsfWZ1bmN0aW9uIEJnKGEsYixjLGQpe3JldHVybiBuZXcgYWwoYSxiLGMsZCl9ZnVuY3Rpb24gYmooYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1cbmZ1bmN0aW9uICRrKGEpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBiaihhKT8xOjA7aWYodm9pZCAwIT09YSYmbnVsbCE9PWEpe2E9YS4kJHR5cGVvZjtpZihhPT09RGEpcmV0dXJuIDExO2lmKGE9PT1HYSlyZXR1cm4gMTR9cmV0dXJuIDJ9XG5mdW5jdGlvbiB3aChhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGw9PT1jPyhjPUJnKGEudGFnLGIsYS5rZXksYS5tb2RlKSxjLmVsZW1lbnRUeXBlPWEuZWxlbWVudFR5cGUsYy50eXBlPWEudHlwZSxjLnN0YXRlTm9kZT1hLnN0YXRlTm9kZSxjLmFsdGVybmF0ZT1hLGEuYWx0ZXJuYXRlPWMpOihjLnBlbmRpbmdQcm9wcz1iLGMudHlwZT1hLnR5cGUsYy5mbGFncz0wLGMuc3VidHJlZUZsYWdzPTAsYy5kZWxldGlvbnM9bnVsbCk7Yy5mbGFncz1hLmZsYWdzJjE0NjgwMDY0O2MuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXM7Yy5sYW5lcz1hLmxhbmVzO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7bGFuZXM6Yi5sYW5lcyxmaXJzdENvbnRleHQ6Yi5maXJzdENvbnRleHR9O1xuYy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiB5aChhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmooYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgeWE6cmV0dXJuIEFoKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgemE6Zz04O2V8PTg7YnJlYWs7Y2FzZSBBYTpyZXR1cm4gYT1CZygxMixjLGIsZXwyKSxhLmVsZW1lbnRUeXBlPUFhLGEubGFuZXM9ZixhO2Nhc2UgRWE6cmV0dXJuIGE9QmcoMTMsYyxiLGUpLGEuZWxlbWVudFR5cGU9RWEsYS5sYW5lcz1mLGE7Y2FzZSBGYTpyZXR1cm4gYT1CZygxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1GYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiBxaihjLGUsZixiKTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgQmE6Zz0xMDticmVhayBhO2Nhc2UgQ2E6Zz05O2JyZWFrIGE7Y2FzZSBEYTpnPTExO1xuYnJlYWsgYTtjYXNlIEdhOmc9MTQ7YnJlYWsgYTtjYXNlIEhhOmc9MTY7ZD1udWxsO2JyZWFrIGF9dGhyb3cgRXJyb3IocCgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1CZyhnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5sYW5lcz1mO3JldHVybiBifWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9QmcoNyxhLGQsYik7YS5sYW5lcz1jO3JldHVybiBhfWZ1bmN0aW9uIHFqKGEsYixjLGQpe2E9QmcoMjIsYSxkLGIpO2EuZWxlbWVudFR5cGU9SWE7YS5sYW5lcz1jO2Euc3RhdGVOb2RlPXtpc0hpZGRlbjohMX07cmV0dXJuIGF9ZnVuY3Rpb24geGgoYSxiLGMpe2E9QmcoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gemgoYSxiLGMpe2I9QmcoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBibChhLGIsYyxkLGUpe3RoaXMudGFnPWI7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5maW5pc2hlZFdvcms9dGhpcy5waW5nQ2FjaGU9dGhpcy5jdXJyZW50PXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy50aW1lb3V0SGFuZGxlPS0xO3RoaXMuY2FsbGJhY2tOb2RlPXRoaXMucGVuZGluZ0NvbnRleHQ9dGhpcy5jb250ZXh0PW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTA7dGhpcy5ldmVudFRpbWVzPXpjKDApO3RoaXMuZXhwaXJhdGlvblRpbWVzPXpjKC0xKTt0aGlzLmVudGFuZ2xlZExhbmVzPXRoaXMuZmluaXNoZWRMYW5lcz10aGlzLm11dGFibGVSZWFkTGFuZXM9dGhpcy5leHBpcmVkTGFuZXM9dGhpcy5waW5nZWRMYW5lcz10aGlzLnN1c3BlbmRlZExhbmVzPXRoaXMucGVuZGluZ0xhbmVzPTA7dGhpcy5lbnRhbmdsZW1lbnRzPXpjKDApO3RoaXMuaWRlbnRpZmllclByZWZpeD1kO3RoaXMub25SZWNvdmVyYWJsZUVycm9yPWU7dGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhPVxubnVsbH1mdW5jdGlvbiBjbChhLGIsYyxkLGUsZixnLGgsayl7YT1uZXcgYmwoYSxiLGMsaCxrKTsxPT09Yj8oYj0xLCEwPT09ZiYmKGJ8PTgpKTpiPTA7Zj1CZygzLG51bGwsbnVsbCxiKTthLmN1cnJlbnQ9ZjtmLnN0YXRlTm9kZT1hO2YubWVtb2l6ZWRTdGF0ZT17ZWxlbWVudDpkLGlzRGVoeWRyYXRlZDpjLGNhY2hlOm51bGwsdHJhbnNpdGlvbnM6bnVsbCxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOm51bGx9O2FoKGYpO3JldHVybiBhfWZ1bmN0aW9uIGRsKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6d2Esa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBlbChhKXtpZighYSlyZXR1cm4gVmY7YT1hLl9yZWFjdEludGVybmFsczthOntpZihWYihhKSE9PWF8fDEhPT1hLnRhZyl0aHJvdyBFcnJvcihwKDE3MCkpO3ZhciBiPWE7ZG97c3dpdGNoKGIudGFnKXtjYXNlIDM6Yj1iLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGE7Y2FzZSAxOmlmKFpmKGIudHlwZSkpe2I9Yi5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7YnJlYWsgYX19Yj1iLnJldHVybn13aGlsZShudWxsIT09Yik7dGhyb3cgRXJyb3IocCgxNzEpKTt9aWYoMT09PWEudGFnKXt2YXIgYz1hLnR5cGU7aWYoWmYoYykpcmV0dXJuIGJnKGEsYyxiKX1yZXR1cm4gYn1cbmZ1bmN0aW9uIGZsKGEsYixjLGQsZSxmLGcsaCxrKXthPWNsKGMsZCwhMCxhLGUsZixnLGgsayk7YS5jb250ZXh0PWVsKG51bGwpO2M9YS5jdXJyZW50O2Q9TCgpO2U9bGgoYyk7Zj1jaChkLGUpO2YuY2FsbGJhY2s9dm9pZCAwIT09YiYmbnVsbCE9PWI/YjpudWxsO2RoKGMsZixlKTthLmN1cnJlbnQubGFuZXM9ZTtBYyhhLGUsZCk7RWsoYSxkKTtyZXR1cm4gYX1mdW5jdGlvbiBnbChhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1MKCksZz1saChlKTtjPWVsKGMpO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9Y2goZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1kP251bGw6ZDtudWxsIT09ZCYmKGIuY2FsbGJhY2s9ZCk7YT1kaChlLGIsZyk7bnVsbCE9PWEmJihtaChhLGUsZyxmKSxlaChhLGUsZykpO3JldHVybiBnfVxuZnVuY3Rpb24gaGwoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBpbChhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gamwoYSxiKXtpbChhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmaWwoYSxiKX1mdW5jdGlvbiBrbCgpe3JldHVybiBudWxsfXZhciBsbD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcmVwb3J0RXJyb3I/cmVwb3J0RXJyb3I6ZnVuY3Rpb24oYSl7Y29uc29sZS5lcnJvcihhKX07ZnVuY3Rpb24gbWwoYSl7dGhpcy5faW50ZXJuYWxSb290PWF9XG5ubC5wcm90b3R5cGUucmVuZGVyPW1sLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoNDA5KSk7Z2woYSxiLG51bGwsbnVsbCl9O25sLnByb3RvdHlwZS51bm1vdW50PW1sLnByb3RvdHlwZS51bm1vdW50PWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5faW50ZXJuYWxSb290O2lmKG51bGwhPT1hKXt0aGlzLl9pbnRlcm5hbFJvb3Q9bnVsbDt2YXIgYj1hLmNvbnRhaW5lckluZm87U2soZnVuY3Rpb24oKXtnbChudWxsLGEsbnVsbCxudWxsKX0pO2JbdWZdPW51bGx9fTtmdW5jdGlvbiBubChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbj1mdW5jdGlvbihhKXtpZihhKXt2YXIgYj1IYygpO2E9e2Jsb2NrZWRPbjpudWxsLHRhcmdldDphLHByaW9yaXR5OmJ9O2Zvcih2YXIgYz0wO2M8UWMubGVuZ3RoJiYwIT09YiYmYjxRY1tjXS5wcmlvcml0eTtjKyspO1FjLnNwbGljZShjLDAsYSk7MD09PWMmJlZjKGEpfX07ZnVuY3Rpb24gb2woYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUpfWZ1bmN0aW9uIHBsKGEpe3JldHVybiEoIWF8fDEhPT1hLm5vZGVUeXBlJiY5IT09YS5ub2RlVHlwZSYmMTEhPT1hLm5vZGVUeXBlJiYoOCE9PWEubm9kZVR5cGV8fFwiIHJlYWN0LW1vdW50LXBvaW50LXVuc3RhYmxlIFwiIT09YS5ub2RlVmFsdWUpKX1mdW5jdGlvbiBxbCgpe31cbmZ1bmN0aW9uIHJsKGEsYixjLGQsZSl7aWYoZSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBmPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2YuY2FsbChhKX19dmFyIGc9ZmwoYixkLGEsMCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1nO2FbdWZdPWcuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soKTtyZXR1cm4gZ31mb3IoO2U9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoZSk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBoPWQ7ZD1mdW5jdGlvbigpe3ZhciBhPWhsKGspO2guY2FsbChhKX19dmFyIGs9Y2woYSwwLCExLG51bGwsbnVsbCwhMSwhMSxcIlwiLHFsKTthLl9yZWFjdFJvb3RDb250YWluZXI9azthW3VmXT1rLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO1NrKGZ1bmN0aW9uKCl7Z2woYixrLGMsZCl9KTtyZXR1cm4ga31cbmZ1bmN0aW9uIHNsKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWY7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWhsKGcpO2guY2FsbChhKX19Z2woYixnLGEsZSl9ZWxzZSBnPXJsKGMsYixhLGUsZCk7cmV0dXJuIGhsKGcpfUVjPWZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAzOnZhciBiPWEuc3RhdGVOb2RlO2lmKGIuY3VycmVudC5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl7dmFyIGM9dGMoYi5wZW5kaW5nTGFuZXMpOzAhPT1jJiYoQ2MoYixjfDEpLEVrKGIsQigpKSwwPT09KEsmNikmJihIaj1CKCkrNTAwLGpnKCkpKX1icmVhaztjYXNlIDEzOlNrKGZ1bmN0aW9uKCl7dmFyIGI9WmcoYSwxKTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxLGMpfX0pLGpsKGEsMSl9fTtcbkZjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPVpnKGEsMTM0MjE3NzI4KTtpZihudWxsIT09Yil7dmFyIGM9TCgpO21oKGIsYSwxMzQyMTc3MjgsYyl9amwoYSwxMzQyMTc3MjgpfX07R2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9bGgoYSksYz1aZyhhLGIpO2lmKG51bGwhPT1jKXt2YXIgZD1MKCk7bWgoYyxhLGIsZCl9amwoYSxiKX19O0hjPWZ1bmN0aW9uKCl7cmV0dXJuIEN9O0ljPWZ1bmN0aW9uKGEsYil7dmFyIGM9Qzt0cnl7cmV0dXJuIEM9YSxiKCl9ZmluYWxseXtDPWN9fTtcbnliPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6YmIoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPURiKGQpO2lmKCFlKXRocm93IEVycm9yKHAoOTApKTtXYShkKTtiYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJmZiKGEsISFjLm11bHRpcGxlLGIsITEpfX07R2I9Ums7SGI9U2s7XG52YXIgdGw9e3VzaW5nQ2xpZW50RW50cnlQb2ludDohMSxFdmVudHM6W0NiLHVlLERiLEViLEZiLFJrXX0sdWw9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOldjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTguMi4wXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB2bD17YnVuZGxlVHlwZTp1bC5idW5kbGVUeXBlLHZlcnNpb246dWwudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOnVsLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6dWwucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldEVycm9ySGFuZGxlcjpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6dWEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPVpiKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp1bC5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5rbCxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsLHJlY29uY2lsZXJWZXJzaW9uOlwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCJ9O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXt2YXIgd2w9X19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO2lmKCF3bC5pc0Rpc2FibGVkJiZ3bC5zdXBwb3J0c0ZpYmVyKXRyeXtrYz13bC5pbmplY3QodmwpLGxjPXdsfWNhdGNoKGEpe319ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD10bDtcbmV4cG9ydHMuY3JlYXRlUG9ydGFsPWZ1bmN0aW9uKGEsYil7dmFyIGM9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGw7aWYoIW9sKGIpKXRocm93IEVycm9yKHAoMjAwKSk7cmV0dXJuIGRsKGEsYixudWxsLGMpfTtleHBvcnRzLmNyZWF0ZVJvb3Q9ZnVuY3Rpb24oYSxiKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCgyOTkpKTt2YXIgYz0hMSxkPVwiXCIsZT1sbDtudWxsIT09YiYmdm9pZCAwIT09YiYmKCEwPT09Yi51bnN0YWJsZV9zdHJpY3RNb2RlJiYoYz0hMCksdm9pZCAwIT09Yi5pZGVudGlmaWVyUHJlZml4JiYoZD1iLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWIub25SZWNvdmVyYWJsZUVycm9yJiYoZT1iLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9Y2woYSwxLCExLG51bGwsbnVsbCxjLCExLGQsZSk7YVt1Zl09Yi5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtyZXR1cm4gbmV3IG1sKGIpfTtcbmV4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFscztpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IocCgxODgpKTthPU9iamVjdC5rZXlzKGEpLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKHAoMjY4LGEpKTt9YT1aYihiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEpe3JldHVybiBTayhhKX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5oeWRyYXRlUm9vdD1mdW5jdGlvbihhLGIsYyl7aWYoIW9sKGEpKXRocm93IEVycm9yKHAoNDA1KSk7dmFyIGQ9bnVsbCE9YyYmYy5oeWRyYXRlZFNvdXJjZXN8fG51bGwsZT0hMSxmPVwiXCIsZz1sbDtudWxsIT09YyYmdm9pZCAwIT09YyYmKCEwPT09Yy51bnN0YWJsZV9zdHJpY3RNb2RlJiYoZT0hMCksdm9pZCAwIT09Yy5pZGVudGlmaWVyUHJlZml4JiYoZj1jLmlkZW50aWZpZXJQcmVmaXgpLHZvaWQgMCE9PWMub25SZWNvdmVyYWJsZUVycm9yJiYoZz1jLm9uUmVjb3ZlcmFibGVFcnJvcikpO2I9ZmwoYixudWxsLGEsMSxudWxsIT1jP2M6bnVsbCxlLCExLGYsZyk7YVt1Zl09Yi5jdXJyZW50O3NmKGEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyljPWRbYV0sZT1jLl9nZXRWZXJzaW9uLGU9ZShjLl9zb3VyY2UpLG51bGw9PWIubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT9iLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9W2MsZV06Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhLnB1c2goYyxcbmUpO3JldHVybiBuZXcgbmwoYil9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighcGwoYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gc2wobnVsbCxhLGIsITEsYyl9O2V4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighcGwoYSkpdGhyb3cgRXJyb3IocCg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFNrKGZ1bmN0aW9uKCl7c2wobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW3VmXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9Ums7XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFwbChjKSl0aHJvdyBFcnJvcihwKDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxzKXRocm93IEVycm9yKHAoMzgpKTtyZXR1cm4gc2woYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE4LjIuMC1uZXh0LTllM2I3NzJiOC0yMDIyMDYwOFwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqXG4gKiBAcmVtaXgtcnVuL3JvdXRlciB2MS4xNC4yXG4gKlxuICogQ29weXJpZ2h0IChjKSBSZW1peCBTb2Z0d2FyZSBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLm1kIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGxpY2Vuc2UgTUlUXG4gKi9cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEFjdGlvbnMgcmVwcmVzZW50IHRoZSB0eXBlIG9mIGNoYW5nZSB0byBhIGxvY2F0aW9uIHZhbHVlLlxuICovXG52YXIgQWN0aW9uO1xuKGZ1bmN0aW9uIChBY3Rpb24pIHtcbiAgLyoqXG4gICAqIEEgUE9QIGluZGljYXRlcyBhIGNoYW5nZSB0byBhbiBhcmJpdHJhcnkgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2ssIHN1Y2hcbiAgICogYXMgYSBiYWNrIG9yIGZvcndhcmQgbmF2aWdhdGlvbi4gSXQgZG9lcyBub3QgZGVzY3JpYmUgdGhlIGRpcmVjdGlvbiBvZiB0aGVcbiAgICogbmF2aWdhdGlvbiwgb25seSB0aGF0IHRoZSBjdXJyZW50IGluZGV4IGNoYW5nZWQuXG4gICAqXG4gICAqIE5vdGU6IFRoaXMgaXMgdGhlIGRlZmF1bHQgYWN0aW9uIGZvciBuZXdseSBjcmVhdGVkIGhpc3Rvcnkgb2JqZWN0cy5cbiAgICovXG4gIEFjdGlvbltcIlBvcFwiXSA9IFwiUE9QXCI7XG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIEFjdGlvbltcIlB1c2hcIl0gPSBcIlBVU0hcIjtcbiAgLyoqXG4gICAqIEEgUkVQTEFDRSBpbmRpY2F0ZXMgdGhlIGVudHJ5IGF0IHRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrXG4gICAqIGJlaW5nIHJlcGxhY2VkIGJ5IGEgbmV3IG9uZS5cbiAgICovXG4gIEFjdGlvbltcIlJlcGxhY2VcIl0gPSBcIlJFUExBQ0VcIjtcbn0pKEFjdGlvbiB8fCAoQWN0aW9uID0ge30pKTtcbmNvbnN0IFBvcFN0YXRlRXZlbnRUeXBlID0gXCJwb3BzdGF0ZVwiO1xuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuICBsZXQge1xuICAgIGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSxcbiAgICBpbml0aWFsSW5kZXgsXG4gICAgdjVDb21wYXQgPSBmYWxzZVxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGVudHJpZXM7IC8vIERlY2xhcmUgc28gd2UgY2FuIGFjY2VzcyBmcm9tIGNyZWF0ZU1lbW9yeUxvY2F0aW9uXG4gIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoKGVudHJ5LCBpbmRleCkgPT4gY3JlYXRlTWVtb3J5TG9jYXRpb24oZW50cnksIHR5cGVvZiBlbnRyeSA9PT0gXCJzdHJpbmdcIiA/IG51bGwgOiBlbnRyeS5zdGF0ZSwgaW5kZXggPT09IDAgPyBcImRlZmF1bHRcIiA6IHVuZGVmaW5lZCkpO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4KTtcbiAgbGV0IGFjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIGxldCBsaXN0ZW5lciA9IG51bGw7XG4gIGZ1bmN0aW9uIGNsYW1wSW5kZXgobikge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKSB7XG4gICAgcmV0dXJuIGVudHJpZXNbaW5kZXhdO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKHRvLCBzdGF0ZSwga2V5KSB7XG4gICAgaWYgKHN0YXRlID09PSB2b2lkIDApIHtcbiAgICAgIHN0YXRlID0gbnVsbDtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oZW50cmllcyA/IGdldEN1cnJlbnRMb2NhdGlvbigpLnBhdGhuYW1lIDogXCIvXCIsIHRvLCBzdGF0ZSwga2V5KTtcbiAgICB3YXJuaW5nKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsIFwicmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiBcIiArIEpTT04uc3RyaW5naWZ5KHRvKSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYodG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgaW5kZXgoKSB7XG4gICAgICByZXR1cm4gaW5kZXg7XG4gICAgfSxcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRDdXJyZW50TG9jYXRpb24oKTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYsXG4gICAgY3JlYXRlVVJMKHRvKSB7XG4gICAgICByZXR1cm4gbmV3IFVSTChjcmVhdGVIcmVmKHRvKSwgXCJodHRwOi8vbG9jYWxob3N0XCIpO1xuICAgIH0sXG4gICAgZW5jb2RlTG9jYXRpb24odG8pIHtcbiAgICAgIGxldCBwYXRoID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgucGF0aG5hbWUgfHwgXCJcIixcbiAgICAgICAgc2VhcmNoOiBwYXRoLnNlYXJjaCB8fCBcIlwiLFxuICAgICAgICBoYXNoOiBwYXRoLmhhc2ggfHwgXCJcIlxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7XG4gICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgZGVsdGE6IDFcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvbixcbiAgICAgICAgICBkZWx0YTogMFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbmV4dExvY2F0aW9uLFxuICAgICAgICAgIGRlbHRhXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3Rvcnkob3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpIHtcbiAgICBsZXQge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSA9IHdpbmRvdy5sb2NhdGlvbjtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXCJcIiwge1xuICAgICAgcGF0aG5hbWUsXG4gICAgICBzZWFyY2gsXG4gICAgICBoYXNoXG4gICAgfSxcbiAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyIHx8IG51bGwsIGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkgfHwgXCJkZWZhdWx0XCIpO1xuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIcmVmKHdpbmRvdywgdG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUJyb3dzZXJMb2NhdGlvbiwgY3JlYXRlQnJvd3NlckhyZWYsIG51bGwsIG9wdGlvbnMpO1xufVxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5mdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeShvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgZnVuY3Rpb24gY3JlYXRlSGFzaExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiXG4gICAgfSA9IHBhcnNlUGF0aCh3aW5kb3cubG9jYXRpb24uaGFzaC5zdWJzdHIoMSkpO1xuICAgIC8vIEhhc2ggVVJMIHNob3VsZCBhbHdheXMgaGF2ZSBhIGxlYWRpbmcgLyBqdXN0IGxpa2Ugd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lXG4gICAgLy8gZG9lcywgc28gaWYgYW4gYXBwIGVuZHMgdXAgYXQgYSByb3V0ZSBsaWtlIC8jc29tZXRoaW5nIHRoZW4gd2UgYWRkIGFcbiAgICAvLyBsZWFkaW5nIHNsYXNoIHNvIGFsbCBvZiBvdXIgcGF0aC1tYXRjaGluZyBiZWhhdmVzIHRoZSBzYW1lIGFzIGlmIGl0IHdvdWxkXG4gICAgLy8gaW4gYSBicm93c2VyIHJvdXRlci4gIFRoaXMgaXMgcGFydGljdWxhcmx5IGltcG9ydGFudCB3aGVuIHRoZXJlIGV4aXN0cyBhXG4gICAgLy8gcm9vdCBzcGxhdCByb3V0ZSAoPFJvdXRlIHBhdGg9XCIqXCI+KSBzaW5jZSB0aGF0IG1hdGNoZXMgaW50ZXJuYWxseSBhZ2FpbnN0XG4gICAgLy8gXCIvKlwiIGFuZCB3ZSdkIGV4cGVjdCAvI3NvbWV0aGluZyB0byA0MDQgaW4gYSBoYXNoIHJvdXRlciBhcHAuXG4gICAgaWYgKCFwYXRobmFtZS5zdGFydHNXaXRoKFwiL1wiKSAmJiAhcGF0aG5hbWUuc3RhcnRzV2l0aChcIi5cIikpIHtcbiAgICAgIHBhdGhuYW1lID0gXCIvXCIgKyBwYXRobmFtZTtcbiAgICB9XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFwiXCIsIHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgc2VhcmNoLFxuICAgICAgaGFzaFxuICAgIH0sXG4gICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzciB8fCBudWxsLCBnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5IHx8IFwiZGVmYXVsdFwiKTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVIYXNoSHJlZih3aW5kb3csIHRvKSB7XG4gICAgbGV0IGJhc2UgPSB3aW5kb3cuZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImJhc2VcIik7XG4gICAgbGV0IGhyZWYgPSBcIlwiO1xuICAgIGlmIChiYXNlICYmIGJhc2UuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSkge1xuICAgICAgbGV0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgICAgbGV0IGhhc2hJbmRleCA9IHVybC5pbmRleE9mKFwiI1wiKTtcbiAgICAgIGhyZWYgPSBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cbiAgZnVuY3Rpb24gdmFsaWRhdGVIYXNoTG9jYXRpb24obG9jYXRpb24sIHRvKSB7XG4gICAgd2FybmluZyhsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLCBcInJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaChcIiArIEpTT04uc3RyaW5naWZ5KHRvKSArIFwiKVwiKTtcbiAgfVxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KGNyZWF0ZUhhc2hMb2NhdGlvbiwgY3JlYXRlSGFzaEhyZWYsIHZhbGlkYXRlSGFzaExvY2F0aW9uLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZSwgbWVzc2FnZSkge1xuICBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSBudWxsIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgfVxufVxuZnVuY3Rpb24gd2FybmluZyhjb25kLCBtZXNzYWdlKSB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIFdlbGNvbWUgdG8gZGVidWdnaW5nIGhpc3RvcnkhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSwgc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOCk7XG59XG4vKipcbiAqIEZvciBicm93c2VyLWJhc2VkIGhpc3Rvcmllcywgd2UgY29tYmluZSB0aGUgc3RhdGUgYW5kIGtleSBpbnRvIGFuIG9iamVjdFxuICovXG5mdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4XG4gIH07XG59XG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihjdXJyZW50LCB0bywgc3RhdGUsIGtleSkge1xuICBpZiAoc3RhdGUgPT09IHZvaWQgMCkge1xuICAgIHN0YXRlID0gbnVsbDtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSBfZXh0ZW5kcyh7XG4gICAgcGF0aG5hbWU6IHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiID8gY3VycmVudCA6IGN1cnJlbnQucGF0aG5hbWUsXG4gICAgc2VhcmNoOiBcIlwiLFxuICAgIGhhc2g6IFwiXCJcbiAgfSwgdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKHRvKSA6IHRvLCB7XG4gICAgc3RhdGUsXG4gICAgLy8gVE9ETzogVGhpcyBjb3VsZCBiZSBjbGVhbmVkIHVwLiAgcHVzaC9yZXBsYWNlIHNob3VsZCBwcm9iYWJseSBqdXN0IHRha2VcbiAgICAvLyBmdWxsIExvY2F0aW9ucyBub3cgYW5kIGF2b2lkIHRoZSBuZWVkIHRvIHJ1biB0aHJvdWdoIHRoaXMgZmxvdyBhdCBhbGxcbiAgICAvLyBCdXQgdGhhdCdzIGEgcHJldHR5IGJpZyByZWZhY3RvciB0byB0aGUgY3VycmVudCB0ZXN0IHN1aXRlIHNvIGdvaW5nIHRvXG4gICAgLy8ga2VlcCBhcyBpcyBmb3IgdGhlIHRpbWUgYmVpbmcgYW5kIGp1c3QgbGV0IGFueSBpbmNvbWluZyBrZXlzIHRha2UgcHJlY2VkZW5jZVxuICAgIGtleTogdG8gJiYgdG8ua2V5IHx8IGtleSB8fCBjcmVhdGVLZXkoKVxuICB9KTtcbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIFVSTCBwYXRoIGZyb20gdGhlIGdpdmVuIHBhdGhuYW1lLCBzZWFyY2gsIGFuZCBoYXNoIGNvbXBvbmVudHMuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBhdGgoX3JlZikge1xuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIlxuICB9ID0gX3JlZjtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09IFwiP1wiKSBwYXRobmFtZSArPSBzZWFyY2guY2hhckF0KDApID09PSBcIj9cIiA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSBcIiNcIikgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09IFwiI1wiID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuLyoqXG4gKiBQYXJzZXMgYSBzdHJpbmcgVVJMIHBhdGggaW50byBpdHMgc2VwYXJhdGUgcGF0aG5hbWUsIHNlYXJjaCwgYW5kIGhhc2ggY29tcG9uZW50cy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB7fTtcbiAgaWYgKHBhdGgpIHtcbiAgICBsZXQgaGFzaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiI1wiKTtcbiAgICBpZiAoaGFzaEluZGV4ID49IDApIHtcbiAgICAgIHBhcnNlZFBhdGguaGFzaCA9IHBhdGguc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgICB9XG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cbiAgICBpZiAocGF0aCkge1xuICAgICAgcGFyc2VkUGF0aC5wYXRobmFtZSA9IHBhdGg7XG4gICAgfVxuICB9XG4gIHJldHVybiBwYXJzZWRQYXRoO1xufVxuZnVuY3Rpb24gZ2V0VXJsQmFzZWRIaXN0b3J5KGdldExvY2F0aW9uLCBjcmVhdGVIcmVmLCB2YWxpZGF0ZUxvY2F0aW9uLCBvcHRpb25zKSB7XG4gIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cbiAgbGV0IHtcbiAgICB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyxcbiAgICB2NUNvbXBhdCA9IGZhbHNlXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICBsZXQgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgbGV0IGxpc3RlbmVyID0gbnVsbDtcbiAgbGV0IGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgLy8gSW5kZXggc2hvdWxkIG9ubHkgYmUgbnVsbCB3aGVuIHdlIGluaXRpYWxpemUuIElmIG5vdCwgaXQncyBiZWNhdXNlIHRoZVxuICAvLyB1c2VyIGNhbGxlZCBoaXN0b3J5LnB1c2hTdGF0ZSBvciBoaXN0b3J5LnJlcGxhY2VTdGF0ZSBkaXJlY3RseSwgaW4gd2hpY2hcbiAgLy8gY2FzZSB3ZSBzaG91bGQgbG9nIGEgd2FybmluZyBhcyBpdCB3aWxsIHJlc3VsdCBpbiBidWdzLlxuICBpZiAoaW5kZXggPT0gbnVsbCkge1xuICAgIGluZGV4ID0gMDtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShfZXh0ZW5kcyh7fSwgZ2xvYmFsSGlzdG9yeS5zdGF0ZSwge1xuICAgICAgaWR4OiBpbmRleFxuICAgIH0pLCBcIlwiKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRJbmRleCgpIHtcbiAgICBsZXQgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHtcbiAgICAgIGlkeDogbnVsbFxuICAgIH07XG4gICAgcmV0dXJuIHN0YXRlLmlkeDtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVQb3AoKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlBvcDtcbiAgICBsZXQgbmV4dEluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgZGVsdGEgPSBuZXh0SW5kZXggPT0gbnVsbCA/IG51bGwgOiBuZXh0SW5kZXggLSBpbmRleDtcbiAgICBpbmRleCA9IG5leHRJbmRleDtcbiAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgICAgICAgZGVsdGFcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwdXNoKHRvLCBzdGF0ZSkge1xuICAgIGFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGhpc3RvcnkubG9jYXRpb24sIHRvLCBzdGF0ZSk7XG4gICAgaWYgKHZhbGlkYXRlTG9jYXRpb24pIHZhbGlkYXRlTG9jYXRpb24obG9jYXRpb24sIHRvKTtcbiAgICBpbmRleCA9IGdldEluZGV4KCkgKyAxO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAvLyB0cnkuLi5jYXRjaCBiZWNhdXNlIGlPUyBsaW1pdHMgdXMgdG8gMTAwIHB1c2hTdGF0ZSBjYWxscyA6L1xuICAgIHRyeSB7XG4gICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIC8vIElmIHRoZSBleGNlcHRpb24gaXMgYmVjYXVzZSBgc3RhdGVgIGNhbid0IGJlIHNlcmlhbGl6ZWQsIGxldCB0aGF0IHRocm93XG4gICAgICAvLyBvdXR3YXJkcyBqdXN0IGxpa2UgYSByZXBsYWNlIGNhbGwgd291bGQgc28gdGhlIGRldiBrbm93cyB0aGUgY2F1c2VcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL25hdi1oaXN0b3J5LWFwaXMuaHRtbCNzaGFyZWQtaGlzdG9yeS1wdXNoL3JlcGxhY2Utc3RhdGUtc3RlcHNcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N0cnVjdHVyZWQtZGF0YS5odG1sI3N0cnVjdHVyZWRzZXJpYWxpemVpbnRlcm5hbFxuICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRE9NRXhjZXB0aW9uICYmIGVycm9yLm5hbWUgPT09IFwiRGF0YUNsb25lRXJyb3JcIikge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIC8vIFRoZXkgYXJlIGdvaW5nIHRvIGxvc2Ugc3RhdGUgaGVyZSwgYnV0IHRoZXJlIGlzIG5vIHJlYWxcbiAgICAgIC8vIHdheSB0byB3YXJuIHRoZW0gYWJvdXQgaXQgc2luY2UgdGhlIHBhZ2Ugd2lsbCByZWZyZXNoLi4uXG4gICAgICB3aW5kb3cubG9jYXRpb24uYXNzaWduKHVybCk7XG4gICAgfVxuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHJlcGxhY2UodG8sIHN0YXRlKSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuICAgIGluZGV4ID0gZ2V0SW5kZXgoKTtcbiAgICBsZXQgaGlzdG9yeVN0YXRlID0gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uLCBpbmRleCk7XG4gICAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoaGlzdG9yeVN0YXRlLCBcIlwiLCB1cmwpO1xuICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoe1xuICAgICAgICBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICBkZWx0YTogMFxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGNyZWF0ZVVSTCh0bykge1xuICAgIC8vIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gaXMgXCJudWxsXCIgKHRoZSBsaXRlcmFsIHN0cmluZyB2YWx1ZSkgaW4gRmlyZWZveFxuICAgIC8vIHVuZGVyIGNlcnRhaW4gY29uZGl0aW9ucywgbm90YWJseSB3aGVuIHNlcnZpbmcgZnJvbSBhIGxvY2FsIEhUTUwgZmlsZVxuICAgIC8vIFNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD04NzgyOTdcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IFwibnVsbFwiID8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIGxldCBocmVmID0gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKTtcbiAgICBpbnZhcmlhbnQoYmFzZSwgXCJObyB3aW5kb3cubG9jYXRpb24uKG9yaWdpbnxocmVmKSBhdmFpbGFibGUgdG8gY3JlYXRlIFVSTCBmb3IgaHJlZjogXCIgKyBocmVmKTtcbiAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IHtcbiAgICBnZXQgYWN0aW9uKCkge1xuICAgICAgcmV0dXJuIGFjdGlvbjtcbiAgICB9LFxuICAgIGdldCBsb2NhdGlvbigpIHtcbiAgICAgIHJldHVybiBnZXRMb2NhdGlvbih3aW5kb3csIGdsb2JhbEhpc3RvcnkpO1xuICAgIH0sXG4gICAgbGlzdGVuKGZuKSB7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBoaXN0b3J5IG9ubHkgYWNjZXB0cyBvbmUgYWN0aXZlIGxpc3RlbmVyXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmKHRvKSB7XG4gICAgICByZXR1cm4gY3JlYXRlSHJlZih3aW5kb3csIHRvKTtcbiAgICB9LFxuICAgIGNyZWF0ZVVSTCxcbiAgICBlbmNvZGVMb2NhdGlvbih0bykge1xuICAgICAgLy8gRW5jb2RlIGEgTG9jYXRpb24gdGhlIHNhbWUgd2F5IHdpbmRvdy5sb2NhdGlvbiB3b3VsZFxuICAgICAgbGV0IHVybCA9IGNyZWF0ZVVSTCh0byk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogdXJsLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2g6IHVybC5zZWFyY2gsXG4gICAgICAgIGhhc2g6IHVybC5oYXNoXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuICAgIGdvKG4pIHtcbiAgICAgIHJldHVybiBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG4vLyNlbmRyZWdpb25cblxudmFyIFJlc3VsdFR5cGU7XG4oZnVuY3Rpb24gKFJlc3VsdFR5cGUpIHtcbiAgUmVzdWx0VHlwZVtcImRhdGFcIl0gPSBcImRhdGFcIjtcbiAgUmVzdWx0VHlwZVtcImRlZmVycmVkXCJdID0gXCJkZWZlcnJlZFwiO1xuICBSZXN1bHRUeXBlW1wicmVkaXJlY3RcIl0gPSBcInJlZGlyZWN0XCI7XG4gIFJlc3VsdFR5cGVbXCJlcnJvclwiXSA9IFwiZXJyb3JcIjtcbn0pKFJlc3VsdFR5cGUgfHwgKFJlc3VsdFR5cGUgPSB7fSkpO1xuY29uc3QgaW1tdXRhYmxlUm91dGVLZXlzID0gbmV3IFNldChbXCJsYXp5XCIsIFwiY2FzZVNlbnNpdGl2ZVwiLCBcInBhdGhcIiwgXCJpZFwiLCBcImluZGV4XCIsIFwiY2hpbGRyZW5cIl0pO1xuZnVuY3Rpb24gaXNJbmRleFJvdXRlKHJvdXRlKSB7XG4gIHJldHVybiByb3V0ZS5pbmRleCA9PT0gdHJ1ZTtcbn1cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSwgc28gd2UgYXJlIHdvcmtpbmdcbi8vIHNvbGVseSB3aXRoIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0J3Mgd2l0aGluIHRoZSBSb3V0ZXJcbmZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHBhcmVudFBhdGgsIG1hbmlmZXN0KSB7XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gW107XG4gIH1cbiAgaWYgKG1hbmlmZXN0ID09PSB2b2lkIDApIHtcbiAgICBtYW5pZmVzdCA9IHt9O1xuICB9XG4gIHJldHVybiByb3V0ZXMubWFwKChyb3V0ZSwgaW5kZXgpID0+IHtcbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGxldCBpZCA9IHR5cGVvZiByb3V0ZS5pZCA9PT0gXCJzdHJpbmdcIiA/IHJvdXRlLmlkIDogdHJlZVBhdGguam9pbihcIi1cIik7XG4gICAgaW52YXJpYW50KHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbiwgXCJDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZVwiKTtcbiAgICBpbnZhcmlhbnQoIW1hbmlmZXN0W2lkXSwgXCJGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcXFwiXCIgKyBpZCArIFwiXFxcIi4gIFJvdXRlIFwiICsgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIik7XG4gICAgaWYgKGlzSW5kZXhSb3V0ZShyb3V0ZSkpIHtcbiAgICAgIGxldCBpbmRleFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IGluZGV4Um91dGU7XG4gICAgICByZXR1cm4gaW5kZXhSb3V0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBhdGhPckxheW91dFJvdXRlID0gX2V4dGVuZHMoe30sIHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGUpLCB7XG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogdW5kZWZpbmVkXG4gICAgICB9KTtcbiAgICAgIG1hbmlmZXN0W2lkXSA9IHBhdGhPckxheW91dFJvdXRlO1xuICAgICAgaWYgKHJvdXRlLmNoaWxkcmVuKSB7XG4gICAgICAgIHBhdGhPckxheW91dFJvdXRlLmNoaWxkcmVuID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgbWFwUm91dGVQcm9wZXJ0aWVzLCB0cmVlUGF0aCwgbWFuaWZlc3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG4vKipcbiAqIE1hdGNoZXMgdGhlIGdpdmVuIHJvdXRlcyB0byBhIGxvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBtYXRjaCBkYXRhLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcm91dGVzXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUm91dGVzKHJvdXRlcywgbG9jYXRpb25BcmcsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgYmFzZW5hbWUgPSBcIi9cIjtcbiAgfVxuICBsZXQgbG9jYXRpb24gPSB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG4gIGxldCBwYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCIsIGJhc2VuYW1lKTtcbiAgaWYgKHBhdGhuYW1lID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcbiAgbGV0IG1hdGNoZXMgPSBudWxsO1xuICBmb3IgKGxldCBpID0gMDsgbWF0Y2hlcyA9PSBudWxsICYmIGkgPCBicmFuY2hlcy5sZW5ndGg7ICsraSkge1xuICAgIG1hdGNoZXMgPSBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaGVzW2ldLFxuICAgIC8vIEluY29taW5nIHBhdGhuYW1lcyBhcmUgZ2VuZXJhbGx5IGVuY29kZWQgZnJvbSBlaXRoZXIgd2luZG93LmxvY2F0aW9uXG4gICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgIC8vIHBhdGhzIGluIHRoZSByb3V0ZSBkZWZpbml0aW9ucy4gIE1lbW9yeSByb3V0ZXIgbG9jYXRpb25zIHdvbid0IGJlXG4gICAgLy8gZW5jb2RlZCBoZXJlIGJ1dCB0aGVyZSBhbHNvIHNob3VsZG4ndCBiZSBhbnl0aGluZyB0byBkZWNvZGUgc28gdGhpc1xuICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgIC8vIGhpc3RvcnktYXdhcmUuXG4gICAgc2FmZWx5RGVjb2RlVVJJKHBhdGhuYW1lKSk7XG4gIH1cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0Um91dGVNYXRjaFRvVWlNYXRjaChtYXRjaCwgbG9hZGVyRGF0YSkge1xuICBsZXQge1xuICAgIHJvdXRlLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtc1xuICB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSxcbiAgICBoYW5kbGU6IHJvdXRlLmhhbmRsZVxuICB9O1xufVxuZnVuY3Rpb24gZmxhdHRlblJvdXRlcyhyb3V0ZXMsIGJyYW5jaGVzLCBwYXJlbnRzTWV0YSwgcGFyZW50UGF0aCkge1xuICBpZiAoYnJhbmNoZXMgPT09IHZvaWQgMCkge1xuICAgIGJyYW5jaGVzID0gW107XG4gIH1cbiAgaWYgKHBhcmVudHNNZXRhID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRzTWV0YSA9IFtdO1xuICB9XG4gIGlmIChwYXJlbnRQYXRoID09PSB2b2lkIDApIHtcbiAgICBwYXJlbnRQYXRoID0gXCJcIjtcbiAgfVxuICBsZXQgZmxhdHRlblJvdXRlID0gKHJvdXRlLCBpbmRleCwgcmVsYXRpdmVQYXRoKSA9PiB7XG4gICAgbGV0IG1ldGEgPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6IHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGVcbiAgICB9O1xuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KG1ldGEucmVsYXRpdmVQYXRoLnN0YXJ0c1dpdGgocGFyZW50UGF0aCksIFwiQWJzb2x1dGUgcm91dGUgcGF0aCBcXFwiXCIgKyBtZXRhLnJlbGF0aXZlUGF0aCArIFwiXFxcIiBuZXN0ZWQgdW5kZXIgcGF0aCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCIgaXMgbm90IHZhbGlkLiBBbiBhYnNvbHV0ZSBjaGlsZCByb3V0ZSBwYXRoIFwiKSArIFwibXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5cIik7XG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG4gICAgbGV0IHBhdGggPSBqb2luUGF0aHMoW3BhcmVudFBhdGgsIG1ldGEucmVsYXRpdmVQYXRoXSk7XG4gICAgbGV0IHJvdXRlc01ldGEgPSBwYXJlbnRzTWV0YS5jb25jYXQobWV0YSk7XG4gICAgLy8gQWRkIHRoZSBjaGlsZHJlbiBiZWZvcmUgYWRkaW5nIHRoaXMgcm91dGUgdG8gdGhlIGFycmF5LCBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgLy8gT3VyIHR5cGVzIGtub3cgYmV0dGVyLCBidXQgcnVudGltZSBKUyBtYXkgbm90IVxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxuICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsIFwiSW5kZXggcm91dGVzIG11c3Qgbm90IGhhdmUgY2hpbGQgcm91dGVzLiBQbGVhc2UgcmVtb3ZlIFwiICsgKFwiYWxsIGNoaWxkIHJvdXRlcyBmcm9tIHJvdXRlIHBhdGggXFxcIlwiICsgcGF0aCArIFwiXFxcIi5cIikpO1xuICAgICAgZmxhdHRlblJvdXRlcyhyb3V0ZS5jaGlsZHJlbiwgYnJhbmNoZXMsIHJvdXRlc01ldGEsIHBhdGgpO1xuICAgIH1cbiAgICAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGJyYW5jaGVzLnB1c2goe1xuICAgICAgcGF0aCxcbiAgICAgIHNjb3JlOiBjb21wdXRlU2NvcmUocGF0aCwgcm91dGUuaW5kZXgpLFxuICAgICAgcm91dGVzTWV0YVxuICAgIH0pO1xuICB9O1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgdmFyIF9yb3V0ZSRwYXRoO1xuICAgIC8vIGNvYXJzZS1ncmFpbiBjaGVjayBmb3Igb3B0aW9uYWwgcGFyYW1zXG4gICAgaWYgKHJvdXRlLnBhdGggPT09IFwiXCIgfHwgISgoX3JvdXRlJHBhdGggPSByb3V0ZS5wYXRoKSAhPSBudWxsICYmIF9yb3V0ZSRwYXRoLmluY2x1ZGVzKFwiP1wiKSkpIHtcbiAgICAgIGZsYXR0ZW5Sb3V0ZShyb3V0ZSwgaW5kZXgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBleHBsb2RlZCBvZiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyb3V0ZS5wYXRoKSkge1xuICAgICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4LCBleHBsb2RlZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuLyoqXG4gKiBDb21wdXRlcyBhbGwgY29tYmluYXRpb25zIG9mIG9wdGlvbmFsIHBhdGggc2VnbWVudHMgZm9yIGEgZ2l2ZW4gcGF0aCxcbiAqIGV4Y2x1ZGluZyBjb21iaW5hdGlvbnMgdGhhdCBhcmUgYW1iaWd1b3VzIGFuZCBvZiBsb3dlciBwcmlvcml0eS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgYC9vbmUvOnR3bz8vdGhyZWUvOmZvdXI/LzpmaXZlP2AgZXhwbG9kZXMgdG86XG4gKiAtIGAvb25lL3RocmVlYFxuICogLSBgL29uZS86dHdvL3RocmVlYFxuICogLSBgL29uZS90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXJgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZpdmVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyLzpmaXZlYFxuICogLSBgL29uZS86dHdvL3RocmVlLzpmb3VyLzpmaXZlYFxuICovXG5mdW5jdGlvbiBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhwYXRoKSB7XG4gIGxldCBzZWdtZW50cyA9IHBhdGguc3BsaXQoXCIvXCIpO1xuICBpZiAoc2VnbWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gW107XG4gIGxldCBbZmlyc3QsIC4uLnJlc3RdID0gc2VnbWVudHM7XG4gIC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7XG4gIC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG4gIGxldCByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1xcPyQvLCBcIlwiKTtcbiAgaWYgKHJlc3QubGVuZ3RoID09PSAwKSB7XG4gICAgLy8gSW50ZXByZXQgZW1wdHkgc3RyaW5nIGFzIG9taXR0aW5nIGFuIG9wdGlvbmFsIHNlZ21lbnRcbiAgICAvLyBgW1wib25lXCIsIFwiXCIsIFwidGhyZWVcIl1gIGNvcnJlc3BvbmRzIHRvIG9taXR0aW5nIGA6dHdvYCBmcm9tIGAvb25lLzp0d28/L3RocmVlYCAtPiBgL29uZS90aHJlZWBcbiAgICByZXR1cm4gaXNPcHRpb25hbCA/IFtyZXF1aXJlZCwgXCJcIl0gOiBbcmVxdWlyZWRdO1xuICB9XG4gIGxldCByZXN0RXhwbG9kZWQgPSBleHBsb2RlT3B0aW9uYWxTZWdtZW50cyhyZXN0LmpvaW4oXCIvXCIpKTtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuLCBzbyB3ZSBnZXQgY29uc2lzdGVudCBvcmRlcmluZyB3aGVyZSB0aGVcbiAgLy8gcGFyZW50IG9wdGlvbmFsIGFzcGVjdCBpcyBwcmVmZXJyZWQgYXMgcmVxdWlyZWQuICBPdGhlcndpc2UsIHdlIGNhbiBnZXRcbiAgLy8gY2hpbGQgc2VjdGlvbnMgaW50ZXJzcGVyc2VkIHdoZXJlIGRlZXBlciBvcHRpb25hbCBzZWdtZW50cyBhcmUgaGlnaGVyIHRoYW5cbiAgLy8gcGFyZW50IG9wdGlvbmFsIHNlZ21lbnRzLCB3aGVyZSBmb3IgZXhhbXBsZSwgLzp0d28gd291bGQgZXhwbG9kZSBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcbiAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkLm1hcChzdWJwYXRoID0+IHN1YnBhdGggPT09IFwiXCIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbihcIi9cIikpKTtcbiAgLy8gVGhlbiwgaWYgdGhpcyBpcyBhbiBvcHRpb25hbCB2YWx1ZSwgYWRkIGFsbCBjaGlsZCB2ZXJzaW9ucyB3aXRob3V0XG4gIGlmIChpc09wdGlvbmFsKSB7XG4gICAgcmVzdWx0LnB1c2goLi4ucmVzdEV4cGxvZGVkKTtcbiAgfVxuICAvLyBmb3IgYWJzb2x1dGUgcGF0aHMsIGVuc3VyZSBgL2AgaW5zdGVhZCBvZiBlbXB0eSBzZWdtZW50XG4gIHJldHVybiByZXN1bHQubWFwKGV4cGxvZGVkID0+IHBhdGguc3RhcnRzV2l0aChcIi9cIikgJiYgZXhwbG9kZWQgPT09IFwiXCIgPyBcIi9cIiA6IGV4cGxvZGVkKTtcbn1cbmZ1bmN0aW9uIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKSB7XG4gIGJyYW5jaGVzLnNvcnQoKGEsIGIpID0+IGEuc2NvcmUgIT09IGIuc2NvcmUgPyBiLnNjb3JlIC0gYS5zY29yZSAvLyBIaWdoZXIgc2NvcmUgZmlyc3RcbiAgOiBjb21wYXJlSW5kZXhlcyhhLnJvdXRlc01ldGEubWFwKG1ldGEgPT4gbWV0YS5jaGlsZHJlbkluZGV4KSwgYi5yb3V0ZXNNZXRhLm1hcChtZXRhID0+IG1ldGEuY2hpbGRyZW5JbmRleCkpKTtcbn1cbmNvbnN0IHBhcmFtUmUgPSAvXjpbXFx3LV0rJC87XG5jb25zdCBkeW5hbWljU2VnbWVudFZhbHVlID0gMztcbmNvbnN0IGluZGV4Um91dGVWYWx1ZSA9IDI7XG5jb25zdCBlbXB0eVNlZ21lbnRWYWx1ZSA9IDE7XG5jb25zdCBzdGF0aWNTZWdtZW50VmFsdWUgPSAxMDtcbmNvbnN0IHNwbGF0UGVuYWx0eSA9IC0yO1xuY29uc3QgaXNTcGxhdCA9IHMgPT4gcyA9PT0gXCIqXCI7XG5mdW5jdGlvbiBjb21wdXRlU2NvcmUocGF0aCwgaW5kZXgpIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGxldCBpbml0aWFsU2NvcmUgPSBzZWdtZW50cy5sZW5ndGg7XG4gIGlmIChzZWdtZW50cy5zb21lKGlzU3BsYXQpKSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IHNwbGF0UGVuYWx0eTtcbiAgfVxuICBpZiAoaW5kZXgpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gaW5kZXhSb3V0ZVZhbHVlO1xuICB9XG4gIHJldHVybiBzZWdtZW50cy5maWx0ZXIocyA9PiAhaXNTcGxhdChzKSkucmVkdWNlKChzY29yZSwgc2VnbWVudCkgPT4gc2NvcmUgKyAocGFyYW1SZS50ZXN0KHNlZ21lbnQpID8gZHluYW1pY1NlZ21lbnRWYWx1ZSA6IHNlZ21lbnQgPT09IFwiXCIgPyBlbXB0eVNlZ21lbnRWYWx1ZSA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksIGluaXRpYWxTY29yZSk7XG59XG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhLCBiKSB7XG4gIGxldCBzaWJsaW5ncyA9IGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG4gIHJldHVybiBzaWJsaW5ncyA/XG4gIC8vIElmIHR3byByb3V0ZXMgYXJlIHNpYmxpbmdzLCB3ZSBzaG91bGQgdHJ5IHRvIG1hdGNoIHRoZSBlYXJsaWVyIHNpYmxpbmdcbiAgLy8gZmlyc3QuIFRoaXMgYWxsb3dzIHBlb3BsZSB0byBoYXZlIGZpbmUtZ3JhaW5lZCBjb250cm9sIG92ZXIgdGhlIG1hdGNoaW5nXG4gIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAvLyB3YW50IHRoZW0gdHJpZWQuXG4gIGFbYS5sZW5ndGggLSAxXSAtIGJbYi5sZW5ndGggLSAxXSA6XG4gIC8vIE90aGVyd2lzZSwgaXQgZG9lc24ndCByZWFsbHkgbWFrZSBzZW5zZSB0byByYW5rIG5vbi1zaWJsaW5ncyBieSBpbmRleCxcbiAgLy8gc28gdGhleSBzb3J0IGVxdWFsbHkuXG4gIDA7XG59XG5mdW5jdGlvbiBtYXRjaFJvdXRlQnJhbmNoKGJyYW5jaCwgcGF0aG5hbWUpIHtcbiAgbGV0IHtcbiAgICByb3V0ZXNNZXRhXG4gIH0gPSBicmFuY2g7XG4gIGxldCBtYXRjaGVkUGFyYW1zID0ge307XG4gIGxldCBtYXRjaGVkUGF0aG5hbWUgPSBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID0gbWF0Y2hlZFBhdGhuYW1lID09PSBcIi9cIiA/IHBhdGhuYW1lIDogcGF0aG5hbWUuc2xpY2UobWF0Y2hlZFBhdGhuYW1lLmxlbmd0aCkgfHwgXCIvXCI7XG4gICAgbGV0IG1hdGNoID0gbWF0Y2hQYXRoKHtcbiAgICAgIHBhdGg6IG1ldGEucmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogbWV0YS5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZW5kXG4gICAgfSwgcmVtYWluaW5nUGF0aG5hbWUpO1xuICAgIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcbiAgICBsZXQgcm91dGUgPSBtZXRhLnJvdXRlO1xuICAgIG1hdGNoZXMucHVzaCh7XG4gICAgICAvLyBUT0RPOiBDYW4gdGhpcyBhcyBiZSBhdm9pZGVkP1xuICAgICAgcGFyYW1zOiBtYXRjaGVkUGFyYW1zLFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShqb2luUGF0aHMoW21hdGNoZWRQYXRobmFtZSwgbWF0Y2gucGF0aG5hbWVCYXNlXSkpLFxuICAgICAgcm91dGVcbiAgICB9KTtcbiAgICBpZiAobWF0Y2gucGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgICAgbWF0Y2hlZFBhdGhuYW1lID0gam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWF0Y2hlcztcbn1cbi8qKlxuICogUmV0dXJucyBhIHBhdGggd2l0aCBwYXJhbXMgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvZ2VuZXJhdGUtcGF0aFxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgob3JpZ2luYWxQYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhcmFtcyA9PT0gdm9pZCAwKSB7XG4gICAgcGFyYW1zID0ge307XG4gIH1cbiAgbGV0IHBhdGggPSBvcmlnaW5hbFBhdGg7XG4gIGlmIChwYXRoLmVuZHNXaXRoKFwiKlwiKSAmJiBwYXRoICE9PSBcIipcIiAmJiAhcGF0aC5lbmRzV2l0aChcIi8qXCIpKSB7XG4gICAgd2FybmluZyhmYWxzZSwgXCJSb3V0ZSBwYXRoIFxcXCJcIiArIHBhdGggKyBcIlxcXCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgXCIgKyAoXCJcXFwiXCIgKyBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpICsgXCJcXFwiIGJlY2F1c2UgdGhlIGAqYCBjaGFyYWN0ZXIgbXVzdCBcIikgKyBcImFsd2F5cyBmb2xsb3cgYSBgL2AgaW4gdGhlIHBhdHRlcm4uIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCBcIiArIChcInBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIi5cIikpO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpO1xuICB9XG4gIC8vIGVuc3VyZSBgL2AgaXMgYWRkZWQgYXQgdGhlIGJlZ2lubmluZyBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZVxuICBjb25zdCBwcmVmaXggPSBwYXRoLnN0YXJ0c1dpdGgoXCIvXCIpID8gXCIvXCIgOiBcIlwiO1xuICBjb25zdCBzdHJpbmdpZnkgPSBwID0+IHAgPT0gbnVsbCA/IFwiXCIgOiB0eXBlb2YgcCA9PT0gXCJzdHJpbmdcIiA/IHAgOiBTdHJpbmcocCk7XG4gIGNvbnN0IHNlZ21lbnRzID0gcGF0aC5zcGxpdCgvXFwvKy8pLm1hcCgoc2VnbWVudCwgaW5kZXgsIGFycmF5KSA9PiB7XG4gICAgY29uc3QgaXNMYXN0U2VnbWVudCA9IGluZGV4ID09PSBhcnJheS5sZW5ndGggLSAxO1xuICAgIC8vIG9ubHkgYXBwbHkgdGhlIHNwbGF0IGlmIGl0J3MgdGhlIGxhc3Qgc2VnbWVudFxuICAgIGlmIChpc0xhc3RTZWdtZW50ICYmIHNlZ21lbnQgPT09IFwiKlwiKSB7XG4gICAgICBjb25zdCBzdGFyID0gXCIqXCI7XG4gICAgICAvLyBBcHBseSB0aGUgc3BsYXRcbiAgICAgIHJldHVybiBzdHJpbmdpZnkocGFyYW1zW3N0YXJdKTtcbiAgICB9XG4gICAgY29uc3Qga2V5TWF0Y2ggPSBzZWdtZW50Lm1hdGNoKC9eOihbXFx3LV0rKShcXD8/KSQvKTtcbiAgICBpZiAoa2V5TWF0Y2gpIHtcbiAgICAgIGNvbnN0IFssIGtleSwgb3B0aW9uYWxdID0ga2V5TWF0Y2g7XG4gICAgICBsZXQgcGFyYW0gPSBwYXJhbXNba2V5XTtcbiAgICAgIGludmFyaWFudChvcHRpb25hbCA9PT0gXCI/XCIgfHwgcGFyYW0gIT0gbnVsbCwgXCJNaXNzaW5nIFxcXCI6XCIgKyBrZXkgKyBcIlxcXCIgcGFyYW1cIik7XG4gICAgICByZXR1cm4gc3RyaW5naWZ5KHBhcmFtKTtcbiAgICB9XG4gICAgLy8gUmVtb3ZlIGFueSBvcHRpb25hbCBtYXJrZXJzIGZyb20gb3B0aW9uYWwgc3RhdGljIHNlZ21lbnRzXG4gICAgcmV0dXJuIHNlZ21lbnQucmVwbGFjZSgvXFw/JC9nLCBcIlwiKTtcbiAgfSlcbiAgLy8gUmVtb3ZlIGVtcHR5IHNlZ21lbnRzXG4gIC5maWx0ZXIoc2VnbWVudCA9PiAhIXNlZ21lbnQpO1xuICByZXR1cm4gcHJlZml4ICsgc2VnbWVudHMuam9pbihcIi9cIik7XG59XG4vKipcbiAqIFBlcmZvcm1zIHBhdHRlcm4gbWF0Y2hpbmcgb24gYSBVUkwgcGF0aG5hbWUgYW5kIHJldHVybnMgaW5mb3JtYXRpb24gYWJvdXRcbiAqIHRoZSBtYXRjaC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL21hdGNoLXBhdGhcbiAqL1xuZnVuY3Rpb24gbWF0Y2hQYXRoKHBhdHRlcm4sIHBhdGhuYW1lKSB7XG4gIGlmICh0eXBlb2YgcGF0dGVybiA9PT0gXCJzdHJpbmdcIikge1xuICAgIHBhdHRlcm4gPSB7XG4gICAgICBwYXRoOiBwYXR0ZXJuLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZmFsc2UsXG4gICAgICBlbmQ6IHRydWVcbiAgICB9O1xuICB9XG4gIGxldCBbbWF0Y2hlciwgY29tcGlsZWRQYXJhbXNdID0gY29tcGlsZVBhdGgocGF0dGVybi5wYXRoLCBwYXR0ZXJuLmNhc2VTZW5zaXRpdmUsIHBhdHRlcm4uZW5kKTtcbiAgbGV0IG1hdGNoID0gcGF0aG5hbWUubWF0Y2gobWF0Y2hlcik7XG4gIGlmICghbWF0Y2gpIHJldHVybiBudWxsO1xuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zID0gY29tcGlsZWRQYXJhbXMucmVkdWNlKChtZW1vLCBfcmVmLCBpbmRleCkgPT4ge1xuICAgIGxldCB7XG4gICAgICBwYXJhbU5hbWUsXG4gICAgICBpc09wdGlvbmFsXG4gICAgfSA9IF9yZWY7XG4gICAgLy8gV2UgbmVlZCB0byBjb21wdXRlIHRoZSBwYXRobmFtZUJhc2UgaGVyZSB1c2luZyB0aGUgcmF3IHNwbGF0IHZhbHVlXG4gICAgLy8gaW5zdGVhZCBvZiB1c2luZyBwYXJhbXNbXCIqXCJdIGxhdGVyIGJlY2F1c2UgaXQgd2lsbCBiZSBkZWNvZGVkIHRoZW5cbiAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgbGV0IHNwbGF0VmFsdWUgPSBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiO1xuICAgICAgcGF0aG5hbWVCYXNlID0gbWF0Y2hlZFBhdGhuYW1lLnNsaWNlKDAsIG1hdGNoZWRQYXRobmFtZS5sZW5ndGggLSBzcGxhdFZhbHVlLmxlbmd0aCkucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICAgIH1cbiAgICBjb25zdCB2YWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdO1xuICAgIGlmIChpc09wdGlvbmFsICYmICF2YWx1ZSkge1xuICAgICAgbWVtb1twYXJhbU5hbWVdID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBtZW1vW3BhcmFtTmFtZV0gPSBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUgfHwgXCJcIiwgcGFyYW1OYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lbW87XG4gIH0sIHt9KTtcbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVyblxuICB9O1xufVxuZnVuY3Rpb24gY29tcGlsZVBhdGgocGF0aCwgY2FzZVNlbnNpdGl2ZSwgZW5kKSB7XG4gIGlmIChjYXNlU2Vuc2l0aXZlID09PSB2b2lkIDApIHtcbiAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2U7XG4gIH1cbiAgaWYgKGVuZCA9PT0gdm9pZCAwKSB7XG4gICAgZW5kID0gdHJ1ZTtcbiAgfVxuICB3YXJuaW5nKHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksIFwiUm91dGUgcGF0aCBcXFwiXCIgKyBwYXRoICsgXCJcXFwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIFwiICsgKFwiXFxcIlwiICsgcGF0aC5yZXBsYWNlKC9cXCokLywgXCIvKlwiKSArIFwiXFxcIiBiZWNhdXNlIHRoZSBgKmAgY2hhcmFjdGVyIG11c3QgXCIpICsgXCJhbHdheXMgZm9sbG93IGEgYC9gIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgXCIgKyAoXCJwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFxcXCJcIiArIHBhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIikgKyBcIlxcXCIuXCIpKTtcbiAgbGV0IHBhcmFtcyA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID0gXCJeXCIgKyBwYXRoLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gIC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKSAvLyBNYWtlIHN1cmUgaXQgaGFzIGEgbGVhZGluZyAvXG4gIC5yZXBsYWNlKC9bXFxcXC4qK14ke318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAucmVwbGFjZSgvXFwvOihbXFx3LV0rKShcXD8pPy9nLCAoXywgcGFyYW1OYW1lLCBpc09wdGlvbmFsKSA9PiB7XG4gICAgcGFyYW1zLnB1c2goe1xuICAgICAgcGFyYW1OYW1lLFxuICAgICAgaXNPcHRpb25hbDogaXNPcHRpb25hbCAhPSBudWxsXG4gICAgfSk7XG4gICAgcmV0dXJuIGlzT3B0aW9uYWwgPyBcIi8/KFteXFxcXC9dKyk/XCIgOiBcIi8oW15cXFxcL10rKVwiO1xuICB9KTtcbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1zLnB1c2goe1xuICAgICAgcGFyYW1OYW1lOiBcIipcIlxuICAgIH0pO1xuICAgIHJlZ2V4cFNvdXJjZSArPSBwYXRoID09PSBcIipcIiB8fCBwYXRoID09PSBcIi8qXCIgPyBcIiguKikkXCIgLy8gQWxyZWFkeSBtYXRjaGVkIHRoZSBpbml0aWFsIC8sIGp1c3QgbWF0Y2ggdGhlIHJlc3RcbiAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4LCBzbyB3ZSBzaG91bGQgZXhwZWN0IHRvXG4gICAgLy8gbWF0Y2ggb25seSBpZiB3ZSBmaW5kIHRoZSBlbmQgb2YgdGhpcyBwYXRoIHNlZ21lbnQuICBMb29rIGZvciBhbiBvcHRpb25hbFxuICAgIC8vIG5vbi1jYXB0dXJlZCB0cmFpbGluZyBzbGFzaCAodG8gbWF0Y2ggYSBwb3J0aW9uIG9mIHRoZSBVUkwpIG9yIHRoZSBlbmRcbiAgICAvLyBvZiB0aGUgcGF0aCAoaWYgd2UndmUgbWF0Y2hlZCB0byB0aGUgZW5kKS4gIFdlIHVzZWQgdG8gZG8gdGhpcyB3aXRoIGFcbiAgICAvLyB3b3JkIGJvdW5kYXJ5IGJ1dCB0aGF0IGdpdmVzIGZhbHNlIHBvc2l0aXZlcyBvbiByb3V0ZXMgbGlrZVxuICAgIC8vIC91c2VyLXByZWZlcmVuY2VzIHNpbmNlIGAtYCBjb3VudHMgYXMgYSB3b3JkIGJvdW5kYXJ5LlxuICAgIHJlZ2V4cFNvdXJjZSArPSBcIig/Oig/PVxcXFwvfCQpKVwiO1xuICB9IGVsc2UgO1xuICBsZXQgbWF0Y2hlciA9IG5ldyBSZWdFeHAocmVnZXhwU291cmNlLCBjYXNlU2Vuc2l0aXZlID8gdW5kZWZpbmVkIDogXCJpXCIpO1xuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtc107XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUkkodmFsdWUpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGVjb2RlVVJJKHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB3YXJuaW5nKGZhbHNlLCBcIlRoZSBVUkwgcGF0aCBcXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiBjb3VsZCBub3QgYmUgZGVjb2RlZCBiZWNhdXNlIGl0IGlzIGlzIGEgXCIgKyBcIm1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBcIiArIChcImVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUklDb21wb25lbnQodmFsdWUsIHBhcmFtTmFtZSkge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoZmFsc2UsIFwiVGhlIHZhbHVlIGZvciB0aGUgVVJMIHBhcmFtIFxcXCJcIiArIHBhcmFtTmFtZSArIFwiXFxcIiB3aWxsIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2VcIiArIChcIiB0aGUgc3RyaW5nIFxcXCJcIiArIHZhbHVlICsgXCJcXFwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5XCIpICsgKFwiIGR1ZSB0byBhIGJhZCBwZXJjZW50IGVuY29kaW5nIChcIiArIGVycm9yICsgXCIpLlwiKSk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKSB7XG4gIGlmIChiYXNlbmFtZSA9PT0gXCIvXCIpIHJldHVybiBwYXRobmFtZTtcbiAgaWYgKCFwYXRobmFtZS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoYmFzZW5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKSA/IGJhc2VuYW1lLmxlbmd0aCAtIDEgOiBiYXNlbmFtZS5sZW5ndGg7XG4gIGxldCBuZXh0Q2hhciA9IHBhdGhuYW1lLmNoYXJBdChzdGFydEluZGV4KTtcbiAgaWYgKG5leHRDaGFyICYmIG5leHRDaGFyICE9PSBcIi9cIikge1xuICAgIC8vIHBhdGhuYW1lIGRvZXMgbm90IHN0YXJ0IHdpdGggYmFzZW5hbWUvXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVQYXRoKHRvLCBmcm9tUGF0aG5hbWUpIHtcbiAgaWYgKGZyb21QYXRobmFtZSA9PT0gdm9pZCAwKSB7XG4gICAgZnJvbVBhdGhuYW1lID0gXCIvXCI7XG4gIH1cbiAgbGV0IHtcbiAgICBwYXRobmFtZTogdG9QYXRobmFtZSxcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiXG4gIH0gPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gIGxldCBwYXRobmFtZSA9IHRvUGF0aG5hbWUgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpID8gdG9QYXRobmFtZSA6IHJlc29sdmVQYXRobmFtZSh0b1BhdGhuYW1lLCBmcm9tUGF0aG5hbWUpIDogZnJvbVBhdGhuYW1lO1xuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKVxuICB9O1xufVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aCwgZnJvbVBhdGhuYW1lKSB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuICByZWxhdGl2ZVNlZ21lbnRzLmZvckVhY2goc2VnbWVudCA9PiB7XG4gICAgaWYgKHNlZ21lbnQgPT09IFwiLi5cIikge1xuICAgICAgLy8gS2VlcCB0aGUgcm9vdCBcIlwiIHNlZ21lbnQgc28gdGhlIHBhdGhuYW1lIHN0YXJ0cyBhdCAvXG4gICAgICBpZiAoc2VnbWVudHMubGVuZ3RoID4gMSkgc2VnbWVudHMucG9wKCk7XG4gICAgfSBlbHNlIGlmIChzZWdtZW50ICE9PSBcIi5cIikge1xuICAgICAgc2VnbWVudHMucHVzaChzZWdtZW50KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5mdW5jdGlvbiBnZXRJbnZhbGlkUGF0aEVycm9yKGNoYXIsIGZpZWxkLCBkZXN0LCBwYXRoKSB7XG4gIHJldHVybiBcIkNhbm5vdCBpbmNsdWRlIGEgJ1wiICsgY2hhciArIFwiJyBjaGFyYWN0ZXIgaW4gYSBtYW51YWxseSBzcGVjaWZpZWQgXCIgKyAoXCJgdG8uXCIgKyBmaWVsZCArIFwiYCBmaWVsZCBbXCIgKyBKU09OLnN0cmluZ2lmeShwYXRoKSArIFwiXS4gIFBsZWFzZSBzZXBhcmF0ZSBpdCBvdXQgdG8gdGhlIFwiKSArIChcImB0by5cIiArIGRlc3QgKyBcImAgZmllbGQuIEFsdGVybmF0aXZlbHkgeW91IG1heSBwcm92aWRlIHRoZSBmdWxsIHBhdGggYXMgXCIpICsgXCJhIHN0cmluZyBpbiA8TGluayB0bz1cXFwiLi4uXFxcIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LlwiO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuZnVuY3Rpb24gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoKG1hdGNoLCBpbmRleCkgPT4gaW5kZXggPT09IDAgfHwgbWF0Y2gucm91dGUucGF0aCAmJiBtYXRjaC5yb3V0ZS5wYXRoLmxlbmd0aCA+IDApO1xufVxuLy8gUmV0dXJuIHRoZSBhcnJheSBvZiBwYXRobmFtZXMgZm9yIHRoZSBjdXJyZW50IHJvdXRlIG1hdGNoZXMgLSB1c2VkIHRvXG4vLyBnZW5lcmF0ZSB0aGUgcm91dGVQYXRobmFtZXMgaW5wdXQgZm9yIHJlc29sdmVUbygpXG5mdW5jdGlvbiBnZXRSZXNvbHZlVG9NYXRjaGVzKG1hdGNoZXMsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gIGxldCBwYXRoTWF0Y2hlcyA9IGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzKG1hdGNoZXMpO1xuICAvLyBXaGVuIHY3X3JlbGF0aXZlU3BsYXRQYXRoIGlzIGVuYWJsZWQsIHVzZSB0aGUgZnVsbCBwYXRobmFtZSBmb3IgdGhlIGxlYWZcbiAgLy8gbWF0Y2ggc28gd2UgaW5jbHVkZSBzcGxhdCB2YWx1ZXMgZm9yIFwiLlwiIGxpbmtzLiAgU2VlOlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTEwNTIjaXNzdWVjb21tZW50LTE4MzY1ODkzMjlcbiAgaWYgKHY3X3JlbGF0aXZlU3BsYXRQYXRoKSB7XG4gICAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcCgobWF0Y2gsIGlkeCkgPT4gaWR4ID09PSBtYXRjaGVzLmxlbmd0aCAtIDEgPyBtYXRjaC5wYXRobmFtZSA6IG1hdGNoLnBhdGhuYW1lQmFzZSk7XG4gIH1cbiAgcmV0dXJuIHBhdGhNYXRjaGVzLm1hcChtYXRjaCA9PiBtYXRjaC5wYXRobmFtZUJhc2UpO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZXNvbHZlVG8odG9BcmcsIHJvdXRlUGF0aG5hbWVzLCBsb2NhdGlvblBhdGhuYW1lLCBpc1BhdGhSZWxhdGl2ZSkge1xuICBpZiAoaXNQYXRoUmVsYXRpdmUgPT09IHZvaWQgMCkge1xuICAgIGlzUGF0aFJlbGF0aXZlID0gZmFsc2U7XG4gIH1cbiAgbGV0IHRvO1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0gX2V4dGVuZHMoe30sIHRvQXJnKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCI/XCIsIFwicGF0aG5hbWVcIiwgXCJzZWFyY2hcIiwgdG8pKTtcbiAgICBpbnZhcmlhbnQoIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwicGF0aG5hbWVcIiwgXCJoYXNoXCIsIHRvKSk7XG4gICAgaW52YXJpYW50KCF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksIGdldEludmFsaWRQYXRoRXJyb3IoXCIjXCIsIFwic2VhcmNoXCIsIFwiaGFzaFwiLCB0bykpO1xuICB9XG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcbiAgbGV0IGZyb207XG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuICAgIC8vIFdpdGggcmVsYXRpdmU9XCJyb3V0ZVwiICh0aGUgZGVmYXVsdCksIGVhY2ggbGVhZGluZyAuLiBzZWdtZW50IG1lYW5zXG4gICAgLy8gXCJnbyB1cCBvbmUgcm91dGVcIiBpbnN0ZWFkIG9mIFwiZ28gdXAgb25lIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5XG4gICAgLy8gZGlmZmVyZW5jZSBmcm9tIGhvdyA8YSBocmVmPiB3b3JrcyBhbmQgYSBtYWpvciByZWFzb24gd2UgY2FsbCB0aGlzIGFcbiAgICAvLyBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgIGlmICghaXNQYXRoUmVsYXRpdmUgJiYgdG9QYXRobmFtZS5zdGFydHNXaXRoKFwiLi5cIikpIHtcbiAgICAgIGxldCB0b1NlZ21lbnRzID0gdG9QYXRobmFtZS5zcGxpdChcIi9cIik7XG4gICAgICB3aGlsZSAodG9TZWdtZW50c1swXSA9PT0gXCIuLlwiKSB7XG4gICAgICAgIHRvU2VnbWVudHMuc2hpZnQoKTtcbiAgICAgICAgcm91dGVQYXRobmFtZUluZGV4IC09IDE7XG4gICAgICB9XG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuICBsZXQgcGF0aCA9IHJlc29sdmVQYXRoKHRvLCBmcm9tKTtcbiAgLy8gRW5zdXJlIHRoZSBwYXRobmFtZSBoYXMgYSB0cmFpbGluZyBzbGFzaCBpZiB0aGUgb3JpZ2luYWwgXCJ0b1wiIGhhZCBvbmVcbiAgbGV0IGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCA9IHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9IChpc0VtcHR5UGF0aCB8fCB0b1BhdGhuYW1lID09PSBcIi5cIikgJiYgbG9jYXRpb25QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIGlmICghcGF0aC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikgJiYgKGhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCB8fCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCkpIHtcbiAgICBwYXRoLnBhdGhuYW1lICs9IFwiL1wiO1xuICB9XG4gIHJldHVybiBwYXRoO1xufVxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXRUb1BhdGhuYW1lKHRvKSB7XG4gIC8vIEVtcHR5IHN0cmluZ3Mgc2hvdWxkIGJlIHRyZWF0ZWQgdGhlIHNhbWUgYXMgLyBwYXRoc1xuICByZXR1cm4gdG8gPT09IFwiXCIgfHwgdG8ucGF0aG5hbWUgPT09IFwiXCIgPyBcIi9cIiA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykucGF0aG5hbWUgOiB0by5wYXRobmFtZTtcbn1cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgam9pblBhdGhzID0gcGF0aHMgPT4gcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gcGF0aG5hbWUgPT4gcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gc2VhcmNoID0+ICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIiA/IFwiXCIgOiBzZWFyY2guc3RhcnRzV2l0aChcIj9cIikgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY29uc3Qgbm9ybWFsaXplSGFzaCA9IGhhc2ggPT4gIWhhc2ggfHwgaGFzaCA9PT0gXCIjXCIgPyBcIlwiIDogaGFzaC5zdGFydHNXaXRoKFwiI1wiKSA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4vKipcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgXG4gKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuXG4gKi9cbmNvbnN0IGpzb24gPSBmdW5jdGlvbiBqc29uKGRhdGEsIGluaXQpIHtcbiAgaWYgKGluaXQgPT09IHZvaWQgMCkge1xuICAgIGluaXQgPSB7fTtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gdHlwZW9mIGluaXQgPT09IFwibnVtYmVyXCIgPyB7XG4gICAgc3RhdHVzOiBpbml0XG4gIH0gOiBpbml0O1xuICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzKHJlc3BvbnNlSW5pdC5oZWFkZXJzKTtcbiAgaWYgKCFoZWFkZXJzLmhhcyhcIkNvbnRlbnQtVHlwZVwiKSkge1xuICAgIGhlYWRlcnMuc2V0KFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvbjsgY2hhcnNldD11dGYtOFwiKTtcbiAgfVxuICByZXR1cm4gbmV3IFJlc3BvbnNlKEpTT04uc3RyaW5naWZ5KGRhdGEpLCBfZXh0ZW5kcyh7fSwgcmVzcG9uc2VJbml0LCB7XG4gICAgaGVhZGVyc1xuICB9KSk7XG59O1xuY2xhc3MgQWJvcnRlZERlZmVycmVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuY2xhc3MgRGVmZXJyZWREYXRhIHtcbiAgY29uc3RydWN0b3IoZGF0YSwgcmVzcG9uc2VJbml0KSB7XG4gICAgdGhpcy5wZW5kaW5nS2V5c1NldCA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnN1YnNjcmliZXJzID0gbmV3IFNldCgpO1xuICAgIHRoaXMuZGVmZXJyZWRLZXlzID0gW107XG4gICAgaW52YXJpYW50KGRhdGEgJiYgdHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIUFycmF5LmlzQXJyYXkoZGF0YSksIFwiZGVmZXIoKSBvbmx5IGFjY2VwdHMgcGxhaW4gb2JqZWN0c1wiKTtcbiAgICAvLyBTZXQgdXAgYW4gQWJvcnRDb250cm9sbGVyICsgUHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHRvIGV4aXQgZWFybHlcbiAgICAvLyBjYW5jZWxsYXRpb25cbiAgICBsZXQgcmVqZWN0O1xuICAgIHRoaXMuYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIHRoaXMuY29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgb25BYm9ydCA9ICgpID0+IHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCA9ICgpID0+IHRoaXMuY29udHJvbGxlci5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuY29udHJvbGxlci5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uQWJvcnQpO1xuICAgIHRoaXMuZGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZSgoYWNjLCBfcmVmMikgPT4ge1xuICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IF9yZWYyO1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oYWNjLCB7XG4gICAgICAgIFtrZXldOiB0aGlzLnRyYWNrUHJvbWlzZShrZXksIHZhbHVlKVxuICAgICAgfSk7XG4gICAgfSwge30pO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIEFsbCBpbmNvbWluZyB2YWx1ZXMgd2VyZSByZXNvbHZlZFxuICAgICAgdGhpcy51bmxpc3RlbkFib3J0U2lnbmFsKCk7XG4gICAgfVxuICAgIHRoaXMuaW5pdCA9IHJlc3BvbnNlSW5pdDtcbiAgfVxuICB0cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSkge1xuICAgIGlmICghKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuYWRkKGtleSk7XG4gICAgLy8gV2Ugc3RvcmUgYSBsaXR0bGUgd3JhcHBlciBwcm9taXNlIHRoYXQgd2lsbCBiZSBleHRlbmRlZCB3aXRoXG4gICAgLy8gX2RhdGEvX2Vycm9yIHByb3BzIHVwb24gcmVzb2x2ZS9yZWplY3RcbiAgICBsZXQgcHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihkYXRhID0+IHRoaXMub25TZXR0bGUocHJvbWlzZSwga2V5LCB1bmRlZmluZWQsIGRhdGEpLCBlcnJvciA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IpKTtcbiAgICAvLyBSZWdpc3RlciByZWplY3Rpb24gbGlzdGVuZXJzIHRvIGF2b2lkIHVuY2F1Z2h0IHByb21pc2UgcmVqZWN0aW9ucyBvblxuICAgIC8vIGVycm9ycyBvciBhYm9ydGVkIGRlZmVycmVkIHZhbHVlc1xuICAgIHByb21pc2UuY2F0Y2goKCkgPT4ge30pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG4gIG9uU2V0dGxlKHByb21pc2UsIGtleSwgZXJyb3IsIGRhdGEpIHtcbiAgICBpZiAodGhpcy5jb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkICYmIGVycm9yIGluc3RhbmNlb2YgQWJvcnRlZERlZmVycmVkRXJyb3IpIHtcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2Vycm9yXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiBlcnJvclxuICAgICAgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmRlbGV0ZShrZXkpO1xuICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgIC8vIE5vdGhpbmcgbGVmdCB0byBhYm9ydCFcbiAgICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCgpO1xuICAgIH1cbiAgICAvLyBJZiB0aGUgcHJvbWlzZSB3YXMgcmVzb2x2ZWQvcmVqZWN0ZWQgd2l0aCB1bmRlZmluZWQsIHdlJ2xsIHRocm93IGFuIGVycm9yIGFzIHlvdVxuICAgIC8vIHNob3VsZCBhbHdheXMgcmVzb2x2ZSB3aXRoIGEgdmFsdWUgb3IgbnVsbFxuICAgIGlmIChlcnJvciA9PT0gdW5kZWZpbmVkICYmIGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVuZGVmaW5lZEVycm9yID0gbmV3IEVycm9yKFwiRGVmZXJyZWQgZGF0YSBmb3Iga2V5IFxcXCJcIiArIGtleSArIFwiXFxcIiByZXNvbHZlZC9yZWplY3RlZCB3aXRoIGB1bmRlZmluZWRgLCBcIiArIFwieW91IG11c3QgcmVzb2x2ZS9yZWplY3Qgd2l0aCBhIHZhbHVlIG9yIGBudWxsYC5cIik7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwge1xuICAgICAgICBnZXQ6ICgpID0+IHVuZGVmaW5lZEVycm9yXG4gICAgICB9KTtcbiAgICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh1bmRlZmluZWRFcnJvcik7XG4gICAgfVxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pO1xuICAgICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX2RhdGFcIiwge1xuICAgICAgZ2V0OiAoKSA9PiBkYXRhXG4gICAgfSk7XG4gICAgdGhpcy5lbWl0KGZhbHNlLCBrZXkpO1xuICAgIHJldHVybiBkYXRhO1xuICB9XG4gIGVtaXQoYWJvcnRlZCwgc2V0dGxlZEtleSkge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoYWJvcnRlZCwgc2V0dGxlZEtleSkpO1xuICB9XG4gIHN1YnNjcmliZShmbikge1xuICAgIHRoaXMuc3Vic2NyaWJlcnMuYWRkKGZuKTtcbiAgICByZXR1cm4gKCkgPT4gdGhpcy5zdWJzY3JpYmVycy5kZWxldGUoZm4pO1xuICB9XG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cbiAgYXN5bmMgcmVzb2x2ZURhdGEoc2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgbGV0IG9uQWJvcnQgPSAoKSA9PiB0aGlzLmNhbmNlbCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdGhpcy5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgICAgc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgICAgICBpZiAoYWJvcnRlZCB8fCB0aGlzLmRvbmUpIHtcbiAgICAgICAgICAgIHJlc29sdmUoYWJvcnRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYWJvcnRlZDtcbiAgfVxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG4gIGdldCB1bndyYXBwZWREYXRhKCkge1xuICAgIGludmFyaWFudCh0aGlzLmRhdGEgIT09IG51bGwgJiYgdGhpcy5kb25lLCBcIkNhbiBvbmx5IHVud3JhcCBkYXRhIG9uIGluaXRpYWxpemVkIGFuZCBzZXR0bGVkIGRlZmVycmVkc1wiKTtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy5kYXRhKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICBba2V5XTogdW53cmFwVHJhY2tlZFByb21pc2UodmFsdWUpXG4gICAgICB9KTtcbiAgICB9LCB7fSk7XG4gIH1cbiAgZ2V0IHBlbmRpbmdLZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVuZGluZ0tleXNTZXQpO1xuICB9XG59XG5mdW5jdGlvbiBpc1RyYWNrZWRQcm9taXNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgdmFsdWUuX3RyYWNrZWQgPT09IHRydWU7XG59XG5mdW5jdGlvbiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSkge1xuICBpZiAoIWlzVHJhY2tlZFByb21pc2UodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZS5fZXJyb3IpIHtcbiAgICB0aHJvdyB2YWx1ZS5fZXJyb3I7XG4gIH1cbiAgcmV0dXJuIHZhbHVlLl9kYXRhO1xufVxuY29uc3QgZGVmZXIgPSBmdW5jdGlvbiBkZWZlcihkYXRhLCBpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0ge307XG4gIH1cbiAgbGV0IHJlc3BvbnNlSW5pdCA9IHR5cGVvZiBpbml0ID09PSBcIm51bWJlclwiID8ge1xuICAgIHN0YXR1czogaW5pdFxuICB9IDogaW5pdDtcbiAgcmV0dXJuIG5ldyBEZWZlcnJlZERhdGEoZGF0YSwgcmVzcG9uc2VJbml0KTtcbn07XG4vKipcbiAqIEEgcmVkaXJlY3QgcmVzcG9uc2UuIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdCA9IGZ1bmN0aW9uIHJlZGlyZWN0KHVybCwgaW5pdCkge1xuICBpZiAoaW5pdCA9PT0gdm9pZCAwKSB7XG4gICAgaW5pdCA9IDMwMjtcbiAgfVxuICBsZXQgcmVzcG9uc2VJbml0ID0gaW5pdDtcbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7XG4gICAgICBzdGF0dXM6IHJlc3BvbnNlSW5pdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBoZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIHVybCk7XG4gIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgX2V4dGVuZHMoe30sIHJlc3BvbnNlSW5pdCwge1xuICAgIGhlYWRlcnNcbiAgfSkpO1xufTtcbi8qKlxuICogQSByZWRpcmVjdCByZXNwb25zZSB0aGF0IHdpbGwgZm9yY2UgYSBkb2N1bWVudCByZWxvYWQgdG8gdGhlIG5ldyBsb2NhdGlvbi5cbiAqIFNldHMgdGhlIHN0YXR1cyBjb2RlIGFuZCB0aGUgYExvY2F0aW9uYCBoZWFkZXIuXG4gKiBEZWZhdWx0cyB0byBcIjMwMiBGb3VuZFwiLlxuICovXG5jb25zdCByZWRpcmVjdERvY3VtZW50ID0gKHVybCwgaW5pdCkgPT4ge1xuICBsZXQgcmVzcG9uc2UgPSByZWRpcmVjdCh1cmwsIGluaXQpO1xuICByZXNwb25zZS5oZWFkZXJzLnNldChcIlgtUmVtaXgtUmVsb2FkLURvY3VtZW50XCIsIFwidHJ1ZVwiKTtcbiAgcmV0dXJuIHJlc3BvbnNlO1xufTtcbi8qKlxuICogQHByaXZhdGVcbiAqIFV0aWxpdHkgY2xhc3Mgd2UgdXNlIHRvIGhvbGQgYXV0by11bndyYXBwZWQgNHh4LzV4eCBSZXNwb25zZSBib2RpZXNcbiAqXG4gKiBXZSBkb24ndCBleHBvcnQgdGhlIGNsYXNzIGZvciBwdWJsaWMgdXNlIHNpbmNlIGl0J3MgYW4gaW1wbGVtZW50YXRpb25cbiAqIGRldGFpbCwgYnV0IHdlIGV4cG9ydCB0aGUgaW50ZXJmYWNlIGFib3ZlIHNvIGZvbGtzIGNhbiBidWlsZCB0aGVpciBvd25cbiAqIGFic3RyYWN0aW9ucyBhcm91bmQgaW5zdGFuY2VzIHZpYSBpc1JvdXRlRXJyb3JSZXNwb25zZSgpXG4gKi9cbmNsYXNzIEVycm9yUmVzcG9uc2VJbXBsIHtcbiAgY29uc3RydWN0b3Ioc3RhdHVzLCBzdGF0dXNUZXh0LCBkYXRhLCBpbnRlcm5hbCkge1xuICAgIGlmIChpbnRlcm5hbCA9PT0gdm9pZCAwKSB7XG4gICAgICBpbnRlcm5hbCA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcbiAgICB0aGlzLnN0YXR1c1RleHQgPSBzdGF0dXNUZXh0IHx8IFwiXCI7XG4gICAgdGhpcy5pbnRlcm5hbCA9IGludGVybmFsO1xuICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRoaXMuZGF0YSA9IGRhdGEudG9TdHJpbmcoKTtcbiAgICAgIHRoaXMuZXJyb3IgPSBkYXRhO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZnVuY3Rpb24gaXNSb3V0ZUVycm9yUmVzcG9uc2UoZXJyb3IpIHtcbiAgcmV0dXJuIGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJiB0eXBlb2YgZXJyb3Iuc3RhdHVzVGV4dCA9PT0gXCJzdHJpbmdcIiAmJiB0eXBlb2YgZXJyb3IuaW50ZXJuYWwgPT09IFwiYm9vbGVhblwiICYmIFwiZGF0YVwiIGluIGVycm9yO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FyciA9IFtcInBvc3RcIiwgXCJwdXRcIiwgXCJwYXRjaFwiLCBcImRlbGV0ZVwiXTtcbmNvbnN0IHZhbGlkTXV0YXRpb25NZXRob2RzID0gbmV3IFNldCh2YWxpZE11dGF0aW9uTWV0aG9kc0Fycik7XG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyID0gW1wiZ2V0XCIsIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuY29uc3QgcmVkaXJlY3RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwMSwgMzAyLCAzMDMsIDMwNywgMzA4XSk7XG5jb25zdCByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMgPSBuZXcgU2V0KFszMDcsIDMwOF0pO1xuY29uc3QgSURMRV9OQVZJR0FUSU9OID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfRkVUQ0hFUiA9IHtcbiAgc3RhdGU6IFwiaWRsZVwiLFxuICBkYXRhOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICBqc29uOiB1bmRlZmluZWQsXG4gIHRleHQ6IHVuZGVmaW5lZFxufTtcbmNvbnN0IElETEVfQkxPQ0tFUiA9IHtcbiAgc3RhdGU6IFwidW5ibG9ja2VkXCIsXG4gIHByb2NlZWQ6IHVuZGVmaW5lZCxcbiAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgbG9jYXRpb246IHVuZGVmaW5lZFxufTtcbmNvbnN0IEFCU09MVVRFX1VSTF9SRUdFWCA9IC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaTtcbmNvbnN0IGRlZmF1bHRNYXBSb3V0ZVByb3BlcnRpZXMgPSByb3V0ZSA9PiAoe1xuICBoYXNFcnJvckJvdW5kYXJ5OiBCb29sZWFuKHJvdXRlLmhhc0Vycm9yQm91bmRhcnkpXG59KTtcbmNvbnN0IFRSQU5TSVRJT05TX1NUT1JBR0VfS0VZID0gXCJyZW1peC1yb3V0ZXItdHJhbnNpdGlvbnNcIjtcbi8vI2VuZHJlZ2lvblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIENyZWF0ZSBhIHJvdXRlciBhbmQgbGlzdGVuIHRvIGhpc3RvcnkgUE9QIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0KSB7XG4gIGNvbnN0IHJvdXRlcldpbmRvdyA9IGluaXQud2luZG93ID8gaW5pdC53aW5kb3cgOiB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdW5kZWZpbmVkO1xuICBjb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygcm91dGVyV2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiByb3V0ZXJXaW5kb3cuZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHJvdXRlcldpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcInVuZGVmaW5lZFwiO1xuICBjb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4gIGludmFyaWFudChpbml0LnJvdXRlcy5sZW5ndGggPiAwLCBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVJvdXRlclwiKTtcbiAgbGV0IG1hcFJvdXRlUHJvcGVydGllcztcbiAgaWYgKGluaXQubWFwUm91dGVQcm9wZXJ0aWVzKSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gaW5pdC5tYXBSb3V0ZVByb3BlcnRpZXM7XG4gIH0gZWxzZSBpZiAoaW5pdC5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBpbml0LmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBSb3V0ZXMga2V5ZWQgYnkgSURcbiAgbGV0IG1hbmlmZXN0ID0ge307XG4gIC8vIFJvdXRlcyBpbiB0cmVlIGZvcm1hdCBmb3IgbWF0Y2hpbmdcbiAgbGV0IGRhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKGluaXQucm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICBsZXQgaW5GbGlnaHREYXRhUm91dGVzO1xuICBsZXQgYmFzZW5hbWUgPSBpbml0LmJhc2VuYW1lIHx8IFwiL1wiO1xuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfZmV0Y2hlclBlcnNpc3Q6IGZhbHNlLFxuICAgIHY3X25vcm1hbGl6ZUZvcm1NZXRob2Q6IGZhbHNlLFxuICAgIHY3X3BhcnRpYWxIeWRyYXRpb246IGZhbHNlLFxuICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogZmFsc2UsXG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gIH0sIGluaXQuZnV0dXJlKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgaGlzdG9yeVxuICBsZXQgdW5saXN0ZW5IaXN0b3J5ID0gbnVsbDtcbiAgLy8gRXh0ZXJuYWxseS1wcm92aWRlZCBmdW5jdGlvbnMgdG8gY2FsbCBvbiBhbGwgc3RhdGUgY2hhbmdlc1xuICBsZXQgc3Vic2NyaWJlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgb2JqZWN0IHRvIGhvbGQgc2Nyb2xsIHJlc3RvcmF0aW9uIGxvY2F0aW9ucyBkdXJpbmcgcm91dGluZ1xuICBsZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBzY3JvbGwgcmVzdG9yYXRpb24ga2V5c1xuICBsZXQgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb24gPSBudWxsO1xuICAvLyBPbmUtdGltZSBmbGFnIHRvIGNvbnRyb2wgdGhlIGluaXRpYWwgaHlkcmF0aW9uIHNjcm9sbCByZXN0b3JhdGlvbi4gIEJlY2F1c2VcbiAgLy8gd2UgZG9uJ3QgZ2V0IHRoZSBzYXZlZCBwb3NpdGlvbnMgZnJvbSA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gdW50aWwgX2FmdGVyX1xuICAvLyB0aGUgaW5pdGlhbCByZW5kZXIsIHdlIG5lZWQgdG8gbWFudWFsbHkgdHJpZ2dlciBhIHNlcGFyYXRlIHVwZGF0ZVN0YXRlIHRvXG4gIC8vIHNlbmQgYWxvbmcgdGhlIHJlc3RvcmVTY3JvbGxQb3NpdGlvblxuICAvLyBTZXQgdG8gdHJ1ZSBpZiB3ZSBoYXZlIGBoeWRyYXRpb25EYXRhYCBzaW5jZSB3ZSBhc3N1bWUgd2Ugd2VyZSBTU1InZCBhbmQgdGhhdFxuICAvLyBTU1IgZGlkIHRoZSBpbml0aWFsIHNjcm9sbCByZXN0b3JhdGlvbi5cbiAgbGV0IGluaXRpYWxTY3JvbGxSZXN0b3JlZCA9IGluaXQuaHlkcmF0aW9uRGF0YSAhPSBudWxsO1xuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBpbml0Lmhpc3RvcnkubG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgbGV0IGluaXRpYWxFcnJvcnMgPSBudWxsO1xuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZVxuICAgIH0pO1xuICAgIGxldCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgcm91dGVcbiAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHtcbiAgICAgIFtyb3V0ZS5pZF06IGVycm9yXG4gICAgfTtcbiAgfVxuICBsZXQgaW5pdGlhbGl6ZWQ7XG4gIGxldCBoYXNMYXp5Um91dGVzID0gaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubGF6eSk7XG4gIGxldCBoYXNMb2FkZXJzID0gaW5pdGlhbE1hdGNoZXMuc29tZShtID0+IG0ucm91dGUubG9hZGVyKTtcbiAgaWYgKGhhc0xhenlSb3V0ZXMpIHtcbiAgICAvLyBBbGwgaW5pdGlhbE1hdGNoZXMgbmVlZCB0byBiZSBsb2FkZWQgYmVmb3JlIHdlJ3JlIHJlYWR5LiAgSWYgd2UgaGF2ZSBsYXp5XG4gICAgLy8gZnVuY3Rpb25zIGFyb3VuZCBzdGlsbCB0aGVuIHdlJ2xsIG5lZWQgdG8gcnVuIHRoZW0gaW4gaW5pdGlhbGl6ZSgpXG4gICAgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmICghaGFzTG9hZGVycykge1xuICAgIC8vIElmIHdlJ3ZlIGdvdCBubyBsb2FkZXJzIHRvIHJ1biwgdGhlbiB3ZSdyZSBnb29kIHRvIGdvXG4gICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9IGVsc2UgaWYgKGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uKSB7XG4gICAgLy8gSWYgcGFydGlhbCBoeWRyYXRpb24gaXMgZW5hYmxlZCwgd2UncmUgaW5pdGlhbGl6ZWQgc28gbG9uZyBhcyB3ZSB3ZXJlXG4gICAgLy8gcHJvdmlkZWQgd2l0aCBoeWRyYXRpb25EYXRhIGZvciBldmVyeSByb3V0ZSB3aXRoIGEgbG9hZGVyLCBhbmQgbm8gbG9hZGVyc1xuICAgIC8vIHdlcmUgbWFya2VkIGZvciBleHBsaWNpdCBoeWRyYXRpb25cbiAgICBsZXQgbG9hZGVyRGF0YSA9IGluaXQuaHlkcmF0aW9uRGF0YSA/IGluaXQuaHlkcmF0aW9uRGF0YS5sb2FkZXJEYXRhIDogbnVsbDtcbiAgICBsZXQgZXJyb3JzID0gaW5pdC5oeWRyYXRpb25EYXRhID8gaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycyA6IG51bGw7XG4gICAgaW5pdGlhbGl6ZWQgPSBpbml0aWFsTWF0Y2hlcy5ldmVyeShtID0+IG0ucm91dGUubG9hZGVyICYmIG0ucm91dGUubG9hZGVyLmh5ZHJhdGUgIT09IHRydWUgJiYgKGxvYWRlckRhdGEgJiYgbG9hZGVyRGF0YVttLnJvdXRlLmlkXSAhPT0gdW5kZWZpbmVkIHx8IGVycm9ycyAmJiBlcnJvcnNbbS5yb3V0ZS5pZF0gIT09IHVuZGVmaW5lZCkpO1xuICB9IGVsc2Uge1xuICAgIC8vIFdpdGhvdXQgcGFydGlhbCBoeWRyYXRpb24gLSB3ZSdyZSBpbml0aWFsaXplZCBpZiB3ZSB3ZXJlIHByb3ZpZGVkIGFueVxuICAgIC8vIGh5ZHJhdGlvbkRhdGEgLSB3aGljaCBpcyBleHBlY3RlZCB0byBiZSBjb21wbGV0ZVxuICAgIGluaXRpYWxpemVkID0gaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGw7XG4gIH1cbiAgbGV0IHJvdXRlcjtcbiAgbGV0IHN0YXRlID0ge1xuICAgIGhpc3RvcnlBY3Rpb246IGluaXQuaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBtYXRjaGVzOiBpbml0aWFsTWF0Y2hlcyxcbiAgICBpbml0aWFsaXplZCxcbiAgICBuYXZpZ2F0aW9uOiBJRExFX05BVklHQVRJT04sXG4gICAgLy8gRG9uJ3QgcmVzdG9yZSBvbiBpbml0aWFsIHVwZGF0ZVN0YXRlKCkgaWYgd2Ugd2VyZSBTU1InZFxuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogaW5pdC5oeWRyYXRpb25EYXRhICE9IG51bGwgPyBmYWxzZSA6IG51bGwsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0OiBmYWxzZSxcbiAgICByZXZhbGlkYXRpb246IFwiaWRsZVwiLFxuICAgIGxvYWRlckRhdGE6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSB8fCB7fSxcbiAgICBhY3Rpb25EYXRhOiBpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmFjdGlvbkRhdGEgfHwgbnVsbCxcbiAgICBlcnJvcnM6IGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuZXJyb3JzIHx8IGluaXRpYWxFcnJvcnMsXG4gICAgZmV0Y2hlcnM6IG5ldyBNYXAoKSxcbiAgICBibG9ja2VyczogbmV3IE1hcCgpXG4gIH07XG4gIC8vIC0tIFN0YXRlZnVsIGludGVybmFsIHZhcmlhYmxlcyB0byBtYW5hZ2UgbmF2aWdhdGlvbnMgLS1cbiAgLy8gQ3VycmVudCBuYXZpZ2F0aW9uIGluIHByb2dyZXNzICh0byBiZSBjb21taXR0ZWQgaW4gY29tcGxldGVOYXZpZ2F0aW9uKVxuICBsZXQgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gIC8vIFNob3VsZCB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIHByZXZlbnQgdGhlIHNjcm9sbCByZXNldCBpZiBzY3JvbGwgY2Fubm90XG4gIC8vIGJlIHJlc3RvcmVkP1xuICBsZXQgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAvLyBBYm9ydENvbnRyb2xsZXIgZm9yIHRoZSBhY3RpdmUgbmF2aWdhdGlvblxuICBsZXQgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyO1xuICAvLyBTaG91bGQgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiBlbmFibGUgZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbj9cbiAgbGV0IHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgLy8gU3RvcmUgYXBwbGllZCB2aWV3IHRyYW5zaXRpb25zIHNvIHdlIGNhbiBhcHBseSB0aGVtIG9uIFBPUFxuICBsZXQgYXBwbGllZFZpZXdUcmFuc2l0aW9ucyA9IG5ldyBNYXAoKTtcbiAgLy8gQ2xlYW51cCBmdW5jdGlvbiBmb3IgcGVyc2lzdGluZyBhcHBsaWVkIHRyYW5zaXRpb25zIHRvIHNlc3Npb25TdG9yYWdlXG4gIGxldCByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSBudWxsO1xuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgZmxhZyB0byBmb3JjZSByZXZhbGlkYXRpb24gb2YgYWxsIGxvYWRlcnM6XG4gIC8vICAtIHN1Ym1pc3Npb25zIChjb21wbGV0ZWQgb3IgaW50ZXJydXB0ZWQpXG4gIC8vICAtIHVzZVJldmFsaWRhdG9yKClcbiAgLy8gIC0gWC1SZW1peC1SZXZhbGlkYXRlIChmcm9tIHJlZGlyZWN0KVxuICBsZXQgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcbiAgLy8gVHJhY2sgdGhlIG91dHN0YW5kaW5nIHBlbmRpbmcgbmF2aWdhdGlvbiBkYXRhIGxvYWQgdG8gYmUgY29tcGFyZWQgYWdhaW5zdFxuICAvLyB0aGUgZ2xvYmFsbHkgaW5jcmVtZW50aW5nIGxvYWQgd2hlbiBhIGZldGNoZXIgbG9hZCBsYW5kcyBhZnRlciBhIGNvbXBsZXRlZFxuICAvLyBuYXZpZ2F0aW9uXG4gIGxldCBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9IC0xO1xuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCBkYXRhIHJlbG9hZHMgYXMgYSByZXN1bHQgb2YgdGhlaXIgYWN0aW9uc1xuICBsZXQgZmV0Y2hSZWxvYWRJZHMgPSBuZXcgTWFwKCk7XG4gIC8vIEZldGNoZXJzIHRoYXQgdHJpZ2dlcmVkIHJlZGlyZWN0IG5hdmlnYXRpb25zXG4gIGxldCBmZXRjaFJlZGlyZWN0SWRzID0gbmV3IFNldCgpO1xuICAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcCgpO1xuICAvLyBSZWYtY291bnQgbW91bnRlZCBmZXRjaGVycyBzbyB3ZSBrbm93IHdoZW4gaXQncyBvayB0byBjbGVhbiB0aGVtIHVwXG4gIGxldCBhY3RpdmVGZXRjaGVycyA9IG5ldyBNYXAoKTtcbiAgLy8gRmV0Y2hlcnMgdGhhdCBoYXZlIHJlcXVlc3RlZCBhIGRlbGV0ZSB3aGVuIHVzaW5nIHY3X2ZldGNoZXJQZXJzaXN0LFxuICAvLyB0aGV5J2xsIGJlIG9mZmljaWFsbHkgcmVtb3ZlZCBhZnRlciB0aGV5IHJldHVybiB0byBpZGxlXG4gIGxldCBkZWxldGVkRmV0Y2hlcnMgPSBuZXcgU2V0KCk7XG4gIC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwKCk7XG4gIC8vIFN0b3JlIGJsb2NrZXIgZnVuY3Rpb25zIGluIGEgc2VwYXJhdGUgTWFwIG91dHNpZGUgb2Ygcm91dGVyIHN0YXRlIHNpbmNlXG4gIC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIFVJIHN0YXRlIGlmIHRoZXkgY2hhbmdlXG4gIGxldCBibG9ja2VyRnVuY3Rpb25zID0gbmV3IE1hcCgpO1xuICAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gIC8vIEluaXRpYWxpemUgdGhlIHJvdXRlciwgYWxsIHNpZGUgZWZmZWN0cyBzaG91bGQgYmUga2lja2VkIG9mZiBmcm9tIGhlcmUuXG4gIC8vIEltcGxlbWVudGVkIGFzIGEgRmx1ZW50IEFQSSBmb3IgZWFzZSBvZjpcbiAgLy8gICBsZXQgcm91dGVyID0gY3JlYXRlUm91dGVyKGluaXQpLmluaXRpYWxpemUoKTtcbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSgpIHtcbiAgICAvLyBJZiBoaXN0b3J5IGluZm9ybXMgdXMgb2YgYSBQT1AgbmF2aWdhdGlvbiwgc3RhcnQgdGhlIG5hdmlnYXRpb24gYnV0IGRvIG5vdCB1cGRhdGVcbiAgICAvLyBzdGF0ZS4gIFdlJ2xsIHVwZGF0ZSBvdXIgb3duIHN0YXRlIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgdW5saXN0ZW5IaXN0b3J5ID0gaW5pdC5oaXN0b3J5Lmxpc3RlbihfcmVmID0+IHtcbiAgICAgIGxldCB7XG4gICAgICAgIGFjdGlvbjogaGlzdG9yeUFjdGlvbixcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIGRlbHRhXG4gICAgICB9ID0gX3JlZjtcbiAgICAgIC8vIElnbm9yZSB0aGlzIGV2ZW50IGlmIGl0IHdhcyBqdXN0IHVzIHJlc2V0dGluZyB0aGUgVVJMIGZyb20gYVxuICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgaWYgKGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlKSB7XG4gICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHdhcm5pbmcoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsIFwiWW91IGFyZSB0cnlpbmcgdG8gdXNlIGEgYmxvY2tlciBvbiBhIFBPUCBuYXZpZ2F0aW9uIHRvIGEgbG9jYXRpb24gXCIgKyBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArIFwicHJvZHVjdGlvbi4gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBhcmUgbmF2aWdhdGluZyBvdXRzaWRlIHRoZSByb3V0ZXIgXCIgKyBcInZpYSBgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlYC9gd2luZG93LmxvY2F0aW9uLmhhc2hgIGluc3RlYWQgb2YgdXNpbmcgXCIgKyBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICsgXCJjcmVhdGVIYXNoUm91dGVyIGFuZCB0aGUgdXNlciBtYW51YWxseSBjaGFuZ2VzIHRoZSBVUkwuXCIpO1xuICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICBuZXh0TG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBoaXN0b3J5QWN0aW9uXG4gICAgICB9KTtcbiAgICAgIGlmIChibG9ja2VyS2V5ICYmIGRlbHRhICE9IG51bGwpIHtcbiAgICAgICAgLy8gUmVzdG9yZSB0aGUgVVJMIHRvIG1hdGNoIHRoZSBjdXJyZW50IFVJLCBidXQgZG9uJ3QgdXBkYXRlIHJvdXRlciBzdGF0ZVxuICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSAqIC0xKTtcbiAgICAgICAgLy8gUHV0IHRoZSBibG9ja2VyIGludG8gYSBibG9ja2VkIHN0YXRlXG4gICAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICBwcm9jZWVkKCkge1xuICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICBsb2NhdGlvblxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyBSZS1kbyB0aGUgc2FtZSBQT1AgbmF2aWdhdGlvbiB3ZSBqdXN0IGJsb2NrZWRcbiAgICAgICAgICAgIGluaXQuaGlzdG9yeS5nbyhkZWx0YSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICAgIGxldCBibG9ja2VycyA9IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpO1xuICAgICAgICAgICAgYmxvY2tlcnMuc2V0KGJsb2NrZXJLZXksIElETEVfQkxPQ0tFUik7XG4gICAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICAgIGJsb2NrZXJzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICB9KTtcbiAgICBpZiAoaXNCcm93c2VyKSB7XG4gICAgICAvLyBGSVhNRTogVGhpcyBmZWVscyBncm9zcy4gIEhvdyBjYW4gd2UgY2xlYW51cCB0aGUgbGluZXMgYmV0d2VlblxuICAgICAgLy8gc2Nyb2xsUmVzdG9yYXRpb24vYXBwbGllZFRyYW5zaXRpb25zIHBlcnNpc3RhbmNlP1xuICAgICAgcmVzdG9yZUFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgbGV0IF9zYXZlQXBwbGllZFRyYW5zaXRpb25zID0gKCkgPT4gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhyb3V0ZXJXaW5kb3csIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMpO1xuICAgICAgcm91dGVyV2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJwYWdlaGlkZVwiLCBfc2F2ZUFwcGxpZWRUcmFuc2l0aW9ucyk7XG4gICAgICByZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiByb3V0ZXJXaW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIF9zYXZlQXBwbGllZFRyYW5zaXRpb25zKTtcbiAgICB9XG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIC8vIE5vdGUgd2UgZG9uJ3QgZG8gYW55IGhhbmRsaW5nIG9mIGxhenkgaGVyZS4gIEZvciBTUEEncyBpdCdsbCBnZXQgaGFuZGxlZFxuICAgIC8vIGluIHRoZSBub3JtYWwgbmF2aWdhdGlvbiBmbG93LiAgRm9yIFNTUiBpdCdzIGV4cGVjdGVkIHRoYXQgbGF6eSBtb2R1bGVzIGFyZVxuICAgIC8vIHJlc29sdmVkIHByaW9yIHRvIHJvdXRlciBjcmVhdGlvbiBzaW5jZSB3ZSBjYW4ndCBnbyBpbnRvIGEgZmFsbGJhY2tFbGVtZW50XG4gICAgLy8gVUkgZm9yIFNTUidkIGFwcHNcbiAgICBpZiAoIXN0YXRlLmluaXRpYWxpemVkKSB7XG4gICAgICBzdGFydE5hdmlnYXRpb24oQWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24sIHtcbiAgICAgICAgaW5pdGlhbEh5ZHJhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cbiAgLy8gQ2xlYW4gdXAgYSByb3V0ZXIgYW5kIGl0J3Mgc2lkZSBlZmZlY3RzXG4gIGZ1bmN0aW9uIGRpc3Bvc2UoKSB7XG4gICAgaWYgKHVubGlzdGVuSGlzdG9yeSkge1xuICAgICAgdW5saXN0ZW5IaXN0b3J5KCk7XG4gICAgfVxuICAgIGlmIChyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIpIHtcbiAgICAgIHJlbW92ZVBhZ2VIaWRlRXZlbnRMaXN0ZW5lcigpO1xuICAgIH1cbiAgICBzdWJzY3JpYmVycy5jbGVhcigpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5mb3JFYWNoKChfLCBrZXkpID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgc3RhdGUuYmxvY2tlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVCbG9ja2VyKGtleSkpO1xuICB9XG4gIC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cbiAgLy8gVXBkYXRlIG91ciBzdGF0ZSBhbmQgbm90aWZ5IHRoZSBjYWxsaW5nIGNvbnRleHQgb2YgdGhlIGNoYW5nZVxuICBmdW5jdGlvbiB1cGRhdGVTdGF0ZShuZXdTdGF0ZSwgb3B0cykge1xuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG4gICAgc3RhdGUgPSBfZXh0ZW5kcyh7fSwgc3RhdGUsIG5ld1N0YXRlKTtcbiAgICAvLyBQcmVwIGZldGNoZXIgY2xlYW51cCBzbyB3ZSBjYW4gdGVsbCB0aGUgVUkgd2hpY2ggZmV0Y2hlciBkYXRhIGVudHJpZXNcbiAgICAvLyBjYW4gYmUgcmVtb3ZlZFxuICAgIGxldCBjb21wbGV0ZWRGZXRjaGVycyA9IFtdO1xuICAgIGxldCBkZWxldGVkRmV0Y2hlcnNLZXlzID0gW107XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICAgIGlmIChmZXRjaGVyLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgICAgIGlmIChkZWxldGVkRmV0Y2hlcnMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIC8vIFVubW91bnRlZCBmcm9tIHRoZSBVSSBhbmQgY2FuIGJlIHRvdGFsbHkgcmVtb3ZlZFxuICAgICAgICAgICAgZGVsZXRlZEZldGNoZXJzS2V5cy5wdXNoKGtleSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIFJldHVybmVkIHRvIGlkbGUgYnV0IHN0aWxsIG1vdW50ZWQgaW4gdGhlIFVJLCBzbyBzZW1pLXJlbWFpbnMgZm9yXG4gICAgICAgICAgICAvLyByZXZhbGlkYXRpb25zIGFuZCBzdWNoXG4gICAgICAgICAgICBjb21wbGV0ZWRGZXRjaGVycy5wdXNoKGtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGEgbG9jYWwgY29weSBzbyB0aGF0IGlmIGZsdXNoU3luYyBpcyB1c2VkIGFuZCB3ZSBlbmQgdXBcbiAgICAvLyByZW1vdmluZyBhbmQgYWRkaW5nIGEgbmV3IHN1YnNjcmliZXIgZHVlIHRvIHRoZSB1c2VDYWxsYmFjayBkZXBlbmRlbmNpZXMsXG4gICAgLy8gd2UgZG9uJ3QgZ2V0IG91cnNlbHZlcyBpbnRvIGEgbG9vcCBjYWxsaW5nIHRoZSBuZXcgc3Vic2NyaWJlciBpbW1lZGlhdGVseVxuICAgIFsuLi5zdWJzY3JpYmVyc10uZm9yRWFjaChzdWJzY3JpYmVyID0+IHN1YnNjcmliZXIoc3RhdGUsIHtcbiAgICAgIGRlbGV0ZWRGZXRjaGVyczogZGVsZXRlZEZldGNoZXJzS2V5cyxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uT3B0czogb3B0cy52aWV3VHJhbnNpdGlvbk9wdHMsXG4gICAgICB1bnN0YWJsZV9mbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSkpO1xuICAgIC8vIFJlbW92ZSBpZGxlIGZldGNoZXJzIGZyb20gc3RhdGUgc2luY2Ugd2Ugb25seSBjYXJlIGFib3V0IGluLWZsaWdodCBmZXRjaGVycy5cbiAgICBpZiAoZnV0dXJlLnY3X2ZldGNoZXJQZXJzaXN0KSB7XG4gICAgICBjb21wbGV0ZWRGZXRjaGVycy5mb3JFYWNoKGtleSA9PiBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KSk7XG4gICAgICBkZWxldGVkRmV0Y2hlcnNLZXlzLmZvckVhY2goa2V5ID0+IGRlbGV0ZUZldGNoZXIoa2V5KSk7XG4gICAgfVxuICB9XG4gIC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIG5ld1N0YXRlLCBfdGVtcCkge1xuICAgIHZhciBfbG9jYXRpb24kc3RhdGUsIF9sb2NhdGlvbiRzdGF0ZTI7XG4gICAgbGV0IHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0gPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDtcbiAgICAvLyBEZWR1Y2UgaWYgd2UncmUgaW4gYSBsb2FkaW5nL2FjdGlvblJlbG9hZCBzdGF0ZTpcbiAgICAvLyAtIFdlIGhhdmUgY29tbWl0dGVkIGFjdGlvbkRhdGEgaW4gdGhlIHN0b3JlXG4gICAgLy8gLSBUaGUgY3VycmVudCBuYXZpZ2F0aW9uIHdhcyBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyAtIFdlJ3JlIHBhc3QgdGhlIHN1Ym1pdHRpbmcgc3RhdGUgYW5kIGludG8gdGhlIGxvYWRpbmcgc3RhdGVcbiAgICAvLyAtIFRoZSBsb2NhdGlvbiBiZWluZyBsb2FkZWQgaXMgbm90IHRoZSByZXN1bHQgb2YgYSByZWRpcmVjdFxuICAgIGxldCBpc0FjdGlvblJlbG9hZCA9IHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJiBzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QgIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCkgJiYgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgKChfbG9jYXRpb24kc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9sb2NhdGlvbiRzdGF0ZS5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgbGV0IGFjdGlvbkRhdGE7XG4gICAgaWYgKG5ld1N0YXRlLmFjdGlvbkRhdGEpIHtcbiAgICAgIGlmIChPYmplY3Qua2V5cyhuZXdTdGF0ZS5hY3Rpb25EYXRhKS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGFjdGlvbkRhdGEgPSBuZXdTdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gRW1wdHkgYWN0aW9uRGF0YSAtPiBjbGVhciBwcmlvciBhY3Rpb25EYXRhIGR1ZSB0byBhbiBhY3Rpb24gZXJyb3JcbiAgICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0FjdGlvblJlbG9hZCkge1xuICAgICAgLy8gS2VlcCB0aGUgY3VycmVudCBkYXRhIGlmIHdlJ3JlIHdyYXBwaW5nIHVwIHRoZSBhY3Rpb24gcmVsb2FkXG4gICAgICBhY3Rpb25EYXRhID0gc3RhdGUuYWN0aW9uRGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ2xlYXIgYWN0aW9uRGF0YSBvbiBhbnkgb3RoZXIgY29tcGxldGVkIG5hdmlnYXRpb25zXG4gICAgICBhY3Rpb25EYXRhID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcbiAgICBsZXQgbG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGEgPyBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubG9hZGVyRGF0YSwgbmV3U3RhdGUubWF0Y2hlcyB8fCBbXSwgbmV3U3RhdGUuZXJyb3JzKSA6IHN0YXRlLmxvYWRlckRhdGE7XG4gICAgLy8gT24gYSBzdWNjZXNzZnVsIG5hdmlnYXRpb24gd2UgY2FuIGFzc3VtZSB3ZSBnb3QgdGhyb3VnaCBhbGwgYmxvY2tlcnNcbiAgICAvLyBzbyB3ZSBjYW4gc3RhcnQgZnJlc2hcbiAgICBsZXQgYmxvY2tlcnMgPSBzdGF0ZS5ibG9ja2VycztcbiAgICBpZiAoYmxvY2tlcnMuc2l6ZSA+IDApIHtcbiAgICAgIGJsb2NrZXJzID0gbmV3IE1hcChibG9ja2Vycyk7XG4gICAgICBibG9ja2Vycy5mb3JFYWNoKChfLCBrKSA9PiBibG9ja2Vycy5zZXQoaywgSURMRV9CTE9DS0VSKSk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyByZXNwZWN0IHRoZSB1c2VyIGZsYWcuICBPdGhlcndpc2UgZG9uJ3QgcmVzZXQgb24gbXV0YXRpb25cbiAgICAvLyBzdWJtaXNzaW9uIG5hdmlnYXRpb25zIHVubGVzcyB0aGV5IHJlZGlyZWN0XG4gICAgbGV0IHByZXZlbnRTY3JvbGxSZXNldCA9IHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUgfHwgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiYgaXNNdXRhdGlvbk1ldGhvZChzdGF0ZS5uYXZpZ2F0aW9uLmZvcm1NZXRob2QpICYmICgoX2xvY2F0aW9uJHN0YXRlMiA9IGxvY2F0aW9uLnN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2xvY2F0aW9uJHN0YXRlMi5faXNSZWRpcmVjdCkgIT09IHRydWU7XG4gICAgaWYgKGluRmxpZ2h0RGF0YVJvdXRlcykge1xuICAgICAgZGF0YVJvdXRlcyA9IGluRmxpZ2h0RGF0YVJvdXRlcztcbiAgICAgIGluRmxpZ2h0RGF0YVJvdXRlcyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgOyBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBBY3Rpb24uUG9wKSA7IGVsc2UgaWYgKHBlbmRpbmdBY3Rpb24gPT09IEFjdGlvbi5QdXNoKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlJlcGxhY2UpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5yZXBsYWNlKGxvY2F0aW9uLCBsb2NhdGlvbi5zdGF0ZSk7XG4gICAgfVxuICAgIGxldCB2aWV3VHJhbnNpdGlvbk9wdHM7XG4gICAgLy8gT24gUE9QLCBlbmFibGUgdHJhbnNpdGlvbnMgaWYgdGhleSB3ZXJlIGVuYWJsZWQgb24gdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICBpZiAocGVuZGluZ0FjdGlvbiA9PT0gQWN0aW9uLlBvcCkge1xuICAgICAgLy8gRm9yd2FyZCB0YWtlcyBwcmVjZWRlbmNlIHNvIHRoZXkgYmVoYXZlIGxpa2UgdGhlIG9yaWdpbmFsIG5hdmlnYXRpb25cbiAgICAgIGxldCBwcmlvclBhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHByaW9yUGF0aHMgJiYgcHJpb3JQYXRocy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgICBjdXJyZW50TG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG5leHRMb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSBpZiAoYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5oYXMobG9jYXRpb24ucGF0aG5hbWUpKSB7XG4gICAgICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBwcmV2aW91cyBmb3J3YXJkIG5hdiwgYXNzdW1lIHdlJ3JlIHBvcHBpbmcgYmFjayB0b1xuICAgICAgICAvLyB0aGUgbmV3IGxvY2F0aW9uIGFuZCBlbmFibGUgaWYgdGhhdCBsb2NhdGlvbiBwcmV2aW91c2x5IGVuYWJsZWRcbiAgICAgICAgdmlld1RyYW5zaXRpb25PcHRzID0ge1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvblxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCkge1xuICAgICAgLy8gU3RvcmUgdGhlIGFwcGxpZWQgdHJhbnNpdGlvbiBvbiBQVVNIL1JFUExBQ0VcbiAgICAgIGxldCB0b1BhdGhzID0gYXBwbGllZFZpZXdUcmFuc2l0aW9ucy5nZXQoc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgaWYgKHRvUGF0aHMpIHtcbiAgICAgICAgdG9QYXRocy5hZGQobG9jYXRpb24ucGF0aG5hbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdG9QYXRocyA9IG5ldyBTZXQoW2xvY2F0aW9uLnBhdGhuYW1lXSk7XG4gICAgICAgIGFwcGxpZWRWaWV3VHJhbnNpdGlvbnMuc2V0KHN0YXRlLmxvY2F0aW9uLnBhdGhuYW1lLCB0b1BhdGhzKTtcbiAgICAgIH1cbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyA9IHtcbiAgICAgICAgY3VycmVudExvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe30sIG5ld1N0YXRlLCB7XG4gICAgICBhY3Rpb25EYXRhLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGhpc3RvcnlBY3Rpb246IHBlbmRpbmdBY3Rpb24sXG4gICAgICBsb2NhdGlvbixcbiAgICAgIGluaXRpYWxpemVkOiB0cnVlLFxuICAgICAgbmF2aWdhdGlvbjogSURMRV9OQVZJR0FUSU9OLFxuICAgICAgcmV2YWxpZGF0aW9uOiBcImlkbGVcIixcbiAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihsb2NhdGlvbiwgbmV3U3RhdGUubWF0Y2hlcyB8fCBzdGF0ZS5tYXRjaGVzKSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIGJsb2NrZXJzXG4gICAgfSksIHtcbiAgICAgIHZpZXdUcmFuc2l0aW9uT3B0cyxcbiAgICAgIGZsdXNoU3luYzogZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgLy8gUmVzZXQgc3RhdGVmdWwgbmF2aWdhdGlvbiB2YXJzXG4gICAgcGVuZGluZ0FjdGlvbiA9IEFjdGlvbi5Qb3A7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IGZhbHNlO1xuICAgIHBlbmRpbmdWaWV3VHJhbnNpdGlvbkVuYWJsZWQgPSBmYWxzZTtcbiAgICBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gZmFsc2U7XG4gICAgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMgPSBbXTtcbiAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMgPSBbXTtcbiAgfVxuICAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKHRvLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgaW5pdC5oaXN0b3J5LmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCB0bywgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmZyb21Sb3V0ZUlkLCBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnJlbGF0aXZlKTtcbiAgICBsZXQge1xuICAgICAgcGF0aCxcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBlcnJvclxuICAgIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoZnV0dXJlLnY3X25vcm1hbGl6ZUZvcm1NZXRob2QsIGZhbHNlLCBub3JtYWxpemVkUGF0aCwgb3B0cyk7XG4gICAgbGV0IGN1cnJlbnRMb2NhdGlvbiA9IHN0YXRlLmxvY2F0aW9uO1xuICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihzdGF0ZS5sb2NhdGlvbiwgcGF0aCwgb3B0cyAmJiBvcHRzLnN0YXRlKTtcbiAgICAvLyBXaGVuIHVzaW5nIG5hdmlnYXRlIGFzIGEgUFVTSC9SRVBMQUNFIHdlIGFyZW4ndCByZWFkaW5nIGFuIGFscmVhZHktZW5jb2RlZFxuICAgIC8vIFVSTCBmcm9tIHdpbmRvdy5sb2NhdGlvbiwgc28gd2UgbmVlZCB0byBlbmNvZGUgaXQgaGVyZSBzbyB0aGUgYmVoYXZpb3JcbiAgICAvLyByZW1haW5zIHRoZSBzYW1lIGFzIFBPUCBhbmQgbm9uLWRhdGEtcm91dGVyIHVzYWdlcy4gIG5ldyBVUkwoKSBkb2VzIGFsbFxuICAgIC8vIHRoZSBzYW1lIGVuY29kaW5nIHdlJ2QgZ2V0IGZyb20gYSBoaXN0b3J5LnB1c2hTdGF0ZS93aW5kb3cubG9jYXRpb24gcmVhZFxuICAgIC8vIHdpdGhvdXQgaGF2aW5nIHRvIHRvdWNoIGhpc3RvcnlcbiAgICBuZXh0TG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCBpbml0Lmhpc3RvcnkuZW5jb2RlTG9jYXRpb24obmV4dExvY2F0aW9uKSk7XG4gICAgbGV0IHVzZXJSZXBsYWNlID0gb3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCA/IG9wdHMucmVwbGFjZSA6IHVuZGVmaW5lZDtcbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5QdXNoO1xuICAgIGlmICh1c2VyUmVwbGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgaGlzdG9yeUFjdGlvbiA9IEFjdGlvbi5SZXBsYWNlO1xuICAgIH0gZWxzZSBpZiAodXNlclJlcGxhY2UgPT09IGZhbHNlKSA7IGVsc2UgaWYgKHN1Ym1pc3Npb24gIT0gbnVsbCAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkgJiYgc3VibWlzc2lvbi5mb3JtQWN0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgLy8gQnkgZGVmYXVsdCBvbiBzdWJtaXNzaW9ucyB0byB0aGUgY3VycmVudCBsb2NhdGlvbiB3ZSBSRVBMQUNFIHNvIHRoYXRcbiAgICAgIC8vIHVzZXJzIGRvbid0IGhhdmUgdG8gZG91YmxlLWNsaWNrIHRoZSBiYWNrIGJ1dHRvbiB0byBnZXQgdG8gdGhlIHByaW9yXG4gICAgICAvLyBsb2NhdGlvbi4gIElmIHRoZSB1c2VyIHJlZGlyZWN0cyB0byBhIGRpZmZlcmVudCBsb2NhdGlvbiBmcm9tIHRoZVxuICAgICAgLy8gYWN0aW9uL2xvYWRlciB0aGlzIHdpbGwgYmUgaWdub3JlZCBhbmQgdGhlIHJlZGlyZWN0IHdpbGwgYmUgYSBQVVNIXG4gICAgICBoaXN0b3J5QWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgfVxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPSBvcHRzICYmIFwicHJldmVudFNjcm9sbFJlc2V0XCIgaW4gb3B0cyA/IG9wdHMucHJldmVudFNjcm9sbFJlc2V0ID09PSB0cnVlIDogdW5kZWZpbmVkO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pO1xuICAgIGlmIChibG9ja2VyS2V5KSB7XG4gICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5LCB7XG4gICAgICAgICAgICBzdGF0ZTogXCJwcm9jZWVkaW5nXCIsXG4gICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICByZXNldDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgbG9jYXRpb246IG5leHRMb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICAgIC8vIFNlbmQgdGhlIHNhbWUgbmF2aWdhdGlvbiB0aHJvdWdoXG4gICAgICAgICAgbmF2aWdhdGUodG8sIG9wdHMpO1xuICAgICAgICB9LFxuICAgICAgICByZXNldCgpIHtcbiAgICAgICAgICBsZXQgYmxvY2tlcnMgPSBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKTtcbiAgICAgICAgICBibG9ja2Vycy5zZXQoYmxvY2tlcktleSwgSURMRV9CTE9DS0VSKTtcbiAgICAgICAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICAgICAgICBibG9ja2Vyc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBuZXh0TG9jYXRpb24sIHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIHJpZ2h0IGVycm9yIGJvdW5kYXJ5IGFmdGVyIHdlIG1hdGNoIHJvdXRlc1xuICAgICAgcGVuZGluZ0Vycm9yOiBlcnJvcixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2U6IG9wdHMgJiYgb3B0cy5yZXBsYWNlLFxuICAgICAgZW5hYmxlVmlld1RyYW5zaXRpb246IG9wdHMgJiYgb3B0cy51bnN0YWJsZV92aWV3VHJhbnNpdGlvbixcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICB9XG4gIC8vIFJldmFsaWRhdGUgYWxsIGN1cnJlbnQgbG9hZGVycy4gIElmIGEgbmF2aWdhdGlvbiBpcyBpbiBwcm9ncmVzcyBvciBpZiB0aGlzXG4gIC8vIGlzIGludGVycnVwdGVkIGJ5IGEgbmF2aWdhdGlvbiwgYWxsb3cgdGhpcyB0byBcInN1Y2NlZWRcIiBieSBjYWxsaW5nIGFsbFxuICAvLyBsb2FkZXJzIGR1cmluZyB0aGUgbmV4dCBsb2FkZXIgcm91bmRcbiAgZnVuY3Rpb24gcmV2YWxpZGF0ZSgpIHtcbiAgICBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIHJldmFsaWRhdGlvbjogXCJsb2FkaW5nXCJcbiAgICB9KTtcbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgc3VibWl0dGluZyBhbiBhY3Rpb24sIHdlIGRvbid0IG5lZWQgdG8gc3RhcnQgYSBuZXdcbiAgICAvLyBuYXZpZ2F0aW9uLCB3ZSdsbCBqdXN0IGxldCB0aGUgZm9sbG93IHVwIGxvYWRlciBleGVjdXRpb24gY2FsbCBhbGwgbG9hZGVyc1xuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcInN1Ym1pdHRpbmdcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZVxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKHBlbmRpbmdBY3Rpb24gfHwgc3RhdGUuaGlzdG9yeUFjdGlvbiwgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgfSk7XG4gIH1cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgb3B0cykge1xuICAgIC8vIEFib3J0IGFueSBpbi1wcm9ncmVzcyBuYXZpZ2F0aW9ucyBhbmQgc3RhcnQgYSBuZXcgb25lLiBVbnNldCBhbnkgb25nb2luZ1xuICAgIC8vIHVuaW50ZXJydXB0ZWQgcmV2YWxpZGF0aW9ucyB1bmxlc3MgdG9sZCBvdGhlcndpc2UsIHNpbmNlIHdlIHdhbnQgdGhpc1xuICAgIC8vIG5ldyBuYXZpZ2F0aW9uIHRvIHVwZGF0ZSBoaXN0b3J5IG5vcm1hbGx5XG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgcGVuZGluZ0FjdGlvbiA9IGhpc3RvcnlBY3Rpb247XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gKG9wdHMgJiYgb3B0cy5zdGFydFVuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24pID09PSB0cnVlO1xuICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIGV2ZXJ5IHRpbWUgd2Ugc3RhcnQgYSBuZXcgbmF2aWdhdGlvbixcbiAgICAvLyBhbmQgdHJhY2sgd2hldGhlciB3ZSBzaG91bGQgcmVzZXQgc2Nyb2xsIG9uIGNvbXBsZXRpb25cbiAgICBzYXZlU2Nyb2xsUG9zaXRpb24oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMpO1xuICAgIHBlbmRpbmdQcmV2ZW50U2Nyb2xsUmVzZXQgPSAob3B0cyAmJiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldCkgPT09IHRydWU7XG4gICAgcGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCA9IChvcHRzICYmIG9wdHMuZW5hYmxlVmlld1RyYW5zaXRpb24pID09PSB0cnVlO1xuICAgIGxldCByb3V0ZXNUb1VzZSA9IGluRmxpZ2h0RGF0YVJvdXRlcyB8fCBkYXRhUm91dGVzO1xuICAgIGxldCBsb2FkaW5nTmF2aWdhdGlvbiA9IG9wdHMgJiYgb3B0cy5vdmVycmlkZU5hdmlnYXRpb247XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICBsZXQgZmx1c2hTeW5jID0gKG9wdHMgJiYgb3B0cy5mbHVzaFN5bmMpID09PSB0cnVlO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICByb3V0ZVxuICAgICAgfSA9IGdldFNob3J0Q2lyY3VpdE1hdGNoZXMocm91dGVzVG9Vc2UpO1xuICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9XG4gICAgICB9LCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIHJldmFsaWRhdGlvbiBvclxuICAgIC8vIG11dGF0aW9uIHN1Ym1pc3Npb24uXG4gICAgLy9cbiAgICAvLyBJZ25vcmUgb24gaW5pdGlhbCBwYWdlIGxvYWRzIGJlY2F1c2Ugc2luY2UgdGhlIGluaXRpYWwgbG9hZCB3aWxsIGFsd2F5c1xuICAgIC8vIGJlIFwic2FtZSBoYXNoXCIuICBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPlxuICAgIC8vIHdoaWNoIHdpbGwgZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoc3RhdGUuaW5pdGlhbGl6ZWQgJiYgIWlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgJiYgaXNIYXNoQ2hhbmdlT25seShzdGF0ZS5sb2NhdGlvbiwgbG9jYXRpb24pICYmICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHtcbiAgICAgICAgbWF0Y2hlc1xuICAgICAgfSwge1xuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgbG9jYXRpb24sIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5zaWduYWwsIG9wdHMgJiYgb3B0cy5zdWJtaXNzaW9uKTtcbiAgICBsZXQgcGVuZGluZ0FjdGlvbkRhdGE7XG4gICAgbGV0IHBlbmRpbmdFcnJvcjtcbiAgICBpZiAob3B0cyAmJiBvcHRzLnBlbmRpbmdFcnJvcikge1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmdFcnJvciwgaXQgbWVhbnMgdGhlIHVzZXIgYXR0ZW1wdGVkIGEgR0VUIHN1Ym1pc3Npb25cbiAgICAgIC8vIHdpdGggYmluYXJ5IEZvcm1EYXRhIHNvIGFzc2lnbiBoZXJlIGFuZCBza2lwIHRvIGhhbmRsZUxvYWRlcnMuICBUaGF0XG4gICAgICAvLyB3YXkgd2UgaGFuZGxlIGNhbGxpbmcgbG9hZGVycyBhYm92ZSB0aGUgYm91bmRhcnkgZXRjLiAgSXQncyBub3QgcmVhbGx5XG4gICAgICAvLyBkaWZmZXJlbnQgZnJvbSBhbiBhY3Rpb25FcnJvciBpbiB0aGF0IHNlbnNlLlxuICAgICAgcGVuZGluZ0Vycm9yID0ge1xuICAgICAgICBbZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzKS5yb3V0ZS5pZF06IG9wdHMucGVuZGluZ0Vycm9yXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIC8vIENhbGwgYWN0aW9uIGlmIHdlIHJlY2VpdmVkIGFuIGFjdGlvbiBzdWJtaXNzaW9uXG4gICAgICBsZXQgYWN0aW9uT3V0cHV0ID0gYXdhaXQgaGFuZGxlQWN0aW9uKHJlcXVlc3QsIGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24sIG1hdGNoZXMsIHtcbiAgICAgICAgcmVwbGFjZTogb3B0cy5yZXBsYWNlLFxuICAgICAgICBmbHVzaFN5bmNcbiAgICAgIH0pO1xuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YSA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRGF0YTtcbiAgICAgIHBlbmRpbmdFcnJvciA9IGFjdGlvbk91dHB1dC5wZW5kaW5nQWN0aW9uRXJyb3I7XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IGdldExvYWRpbmdOYXZpZ2F0aW9uKGxvY2F0aW9uLCBvcHRzLnN1Ym1pc3Npb24pO1xuICAgICAgZmx1c2hTeW5jID0gZmFsc2U7XG4gICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwge1xuICAgICAgICBzaWduYWw6IHJlcXVlc3Quc2lnbmFsXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ2FsbCBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIHNob3J0Q2lyY3VpdGVkLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0gPSBhd2FpdCBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBsb2FkaW5nTmF2aWdhdGlvbiwgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24sIG9wdHMgJiYgb3B0cy5mZXRjaGVyU3VibWlzc2lvbiwgb3B0cyAmJiBvcHRzLnJlcGxhY2UsIG9wdHMgJiYgb3B0cy5pbml0aWFsSHlkcmF0aW9uID09PSB0cnVlLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpO1xuICAgIGlmIChzaG9ydENpcmN1aXRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBDbGVhbiB1cCBub3cgdGhhdCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBjb21wbGV0ZWQuICBEb24ndCBjbGVhbiB1cCBpZlxuICAgIC8vIHdlIHNob3J0IGNpcmN1aXRlZCBiZWNhdXNlIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciB3aWxsIGhhdmUgYWxyZWFkeVxuICAgIC8vIGJlZW4gYXNzaWduZWQgdG8gYSBuZXcgY29udHJvbGxlciBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG51bGw7XG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCBfZXh0ZW5kcyh7XG4gICAgICBtYXRjaGVzXG4gICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YVxuICAgIH0gOiB7fSwge1xuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9yc1xuICAgIH0pKTtcbiAgfVxuICAvLyBDYWxsIHRoZSBhY3Rpb24gbWF0Y2hlZCBieSB0aGUgbGVhZiByb3V0ZSBmb3IgdGhpcyBuYXZpZ2F0aW9uIGFuZCBoYW5kbGVcbiAgLy8gcmVkaXJlY3RzL2Vycm9yc1xuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVBY3Rpb24ocmVxdWVzdCwgbG9jYXRpb24sIHN1Ym1pc3Npb24sIG1hdGNoZXMsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgLy8gUHV0IHVzIGluIGEgc3VibWl0dGluZyBzdGF0ZVxuICAgIGxldCBuYXZpZ2F0aW9uID0gZ2V0U3VibWl0dGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIG5hdmlnYXRpb25cbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IG9wdHMuZmx1c2hTeW5jID09PSB0cnVlXG4gICAgfSk7XG4gICAgLy8gQ2FsbCBvdXIgYWN0aW9uIGFuZCBnZXQgdGhlIHJlc3VsdFxuICAgIGxldCByZXN1bHQ7XG4gICAgbGV0IGFjdGlvbk1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgbG9jYXRpb24pO1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yOiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICAgIH0pXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJhY3Rpb25cIiwgcmVxdWVzdCwgYWN0aW9uTWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgcmVwbGFjZTtcbiAgICAgIGlmIChvcHRzICYmIG9wdHMucmVwbGFjZSAhPSBudWxsKSB7XG4gICAgICAgIHJlcGxhY2UgPSBvcHRzLnJlcGxhY2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJZiB0aGUgdXNlciBkaWRuJ3QgZXhwbGljaXR5IGluZGljYXRlIHJlcGxhY2UgYmVoYXZpb3IsIHJlcGxhY2UgaWZcbiAgICAgICAgLy8gd2UgcmVkaXJlY3RlZCB0byB0aGUgZXhhY3Qgc2FtZSBsb2NhdGlvbiB3ZSdyZSBjdXJyZW50bHkgYXQgdG8gYXZvaWRcbiAgICAgICAgLy8gZG91YmxlIGJhY2stYnV0dG9uc1xuICAgICAgICByZXBsYWNlID0gcmVzdWx0LmxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQsIHtcbiAgICAgICAgc3VibWlzc2lvbixcbiAgICAgICAgcmVwbGFjZVxuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYWxsIHN1Ym1pc3Npb25zIGFyZSBSRVBMQUNFIG5hdmlnYXRpb25zLCBidXQgaWYgdGhlXG4gICAgICAvLyBhY3Rpb24gdGhyZXcgYW4gZXJyb3IgdGhhdCdsbCBiZSByZW5kZXJlZCBpbiBhbiBlcnJvckVsZW1lbnQsIHdlIGZhbGxcbiAgICAgIC8vIGJhY2sgdG8gUFVTSCBzbyB0aGF0IHRoZSB1c2VyIGNhbiB1c2UgdGhlIGJhY2sgYnV0dG9uIHRvIGdldCBiYWNrIHRvXG4gICAgICAvLyB0aGUgcHJlLXN1Ym1pc3Npb24gZm9ybSBsb2NhdGlvbiB0byB0cnkgYWdhaW5cbiAgICAgIGlmICgob3B0cyAmJiBvcHRzLnJlcGxhY2UpICE9PSB0cnVlKSB7XG4gICAgICAgIHBlbmRpbmdBY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIC8vIFNlbmQgYmFjayBhbiBlbXB0eSBvYmplY3Qgd2UgY2FuIHVzZSB0byBjbGVhciBvdXQgYW55IHByaW9yIGFjdGlvbkRhdGFcbiAgICAgICAgcGVuZGluZ0FjdGlvbkRhdGE6IHt9LFxuICAgICAgICBwZW5kaW5nQWN0aW9uRXJyb3I6IHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9XG4gICAgfTtcbiAgfVxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCBvdmVycmlkZU5hdmlnYXRpb24sIHN1Ym1pc3Npb24sIGZldGNoZXJTdWJtaXNzaW9uLCByZXBsYWNlLCBpbml0aWFsSHlkcmF0aW9uLCBmbHVzaFN5bmMsIHBlbmRpbmdBY3Rpb25EYXRhLCBwZW5kaW5nRXJyb3IpIHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb24gfHwgZ2V0TG9hZGluZ05hdmlnYXRpb24obG9jYXRpb24sIHN1Ym1pc3Npb24pO1xuICAgIC8vIElmIHRoaXMgd2FzIGEgcmVkaXJlY3QgZnJvbSBhbiBhY3Rpb24gd2UgZG9uJ3QgaGF2ZSBhIFwic3VibWlzc2lvblwiIGJ1dFxuICAgIC8vIHdlIGhhdmUgaXQgb24gdGhlIGxvYWRpbmcgbmF2aWdhdGlvbiBzbyB1c2UgdGhhdCBpZiBhdmFpbGFibGVcbiAgICBsZXQgYWN0aXZlU3VibWlzc2lvbiA9IHN1Ym1pc3Npb24gfHwgZmV0Y2hlclN1Ym1pc3Npb24gfHwgZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKGxvYWRpbmdOYXZpZ2F0aW9uKTtcbiAgICBsZXQgcm91dGVzVG9Vc2UgPSBpbkZsaWdodERhdGFSb3V0ZXMgfHwgZGF0YVJvdXRlcztcbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoaW5pdC5oaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgYWN0aXZlU3VibWlzc2lvbiwgbG9jYXRpb24sIGZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uICYmIGluaXRpYWxIeWRyYXRpb24gPT09IHRydWUsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyBkZWZlcnJlZHMgZm9yIG5vLWxvbmdlci1tYXRjaGVkIHJvdXRlcyBvciByb3V0ZXMgd2UncmVcbiAgICAvLyBhYm91dCB0byByZWxvYWQuICBOb3RlIHRoYXQgaWYgdGhpcyBpcyBhbiBhY3Rpb24gcmVsb2FkIHdlIHdvdWxkIGhhdmVcbiAgICAvLyBhbHJlYWR5IGNhbmNlbGxlZCBhbGwgcGVuZGluZyBkZWZlcnJlZHMgc28gdGhpcyB3b3VsZCBiZSBhIG5vLW9wXG4gICAgY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHJvdXRlSWQgPT4gIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKSB8fCBtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZShtID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGxldCB1cGRhdGVkRmV0Y2hlcnMgPSBtYXJrRmV0Y2hSZWRpcmVjdHNEb25lKCk7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIF9leHRlbmRzKHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIC8vIENvbW1pdCBwZW5kaW5nIGVycm9yIGlmIHdlJ3JlIHNob3J0IGNpcmN1aXRpbmdcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nRXJyb3IgfHwgbnVsbFxuICAgICAgfSwgcGVuZGluZ0FjdGlvbkRhdGEgPyB7XG4gICAgICAgIGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhXG4gICAgICB9IDoge30sIHVwZGF0ZWRGZXRjaGVycyA/IHtcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9IDoge30pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gSWYgdGhpcyBpcyBhbiB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbiwgd2UgcmVtYWluIGluIG91ciBjdXJyZW50IGlkbGVcbiAgICAvLyBzdGF0ZS4gIElmIG5vdCwgd2UgbmVlZCB0byBzd2l0Y2ggdG8gb3VyIGxvYWRpbmcgc3RhdGUgYW5kIGxvYWQgZGF0YSxcbiAgICAvLyBwcmVzZXJ2aW5nIGFueSBuZXcgYWN0aW9uIGRhdGEgb3IgZXhpc3RpbmcgYWN0aW9uIGRhdGEgKGluIHRoZSBjYXNlIG9mXG4gICAgLy8gYSByZXZhbGlkYXRpb24gaW50ZXJydXB0aW5nIGFuIGFjdGlvblJlbG9hZClcbiAgICAvLyBJZiB3ZSBoYXZlIHBhcnRpYWxIeWRyYXRpb24gZW5hYmxlZCwgdGhlbiBkb24ndCB1cGRhdGUgdGhlIHN0YXRlIGZvciB0aGVcbiAgICAvLyBpbml0aWFsIGRhdGEgbG9hZCBzaW5jZSBpb3QncyBub3QgYSBcIm5hdmlnYXRpb25cIlxuICAgIGlmICghaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uICYmICghZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gfHwgIWluaXRpYWxIeWRyYXRpb24pKSB7XG4gICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5mb3JFYWNoKHJmID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXIgPSBnZXRMb2FkaW5nRmV0Y2hlcih1bmRlZmluZWQsIGZldGNoZXIgPyBmZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgICBzdGF0ZS5mZXRjaGVycy5zZXQocmYua2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIH0pO1xuICAgICAgbGV0IGFjdGlvbkRhdGEgPSBwZW5kaW5nQWN0aW9uRGF0YSB8fCBzdGF0ZS5hY3Rpb25EYXRhO1xuICAgICAgdXBkYXRlU3RhdGUoX2V4dGVuZHMoe1xuICAgICAgICBuYXZpZ2F0aW9uOiBsb2FkaW5nTmF2aWdhdGlvblxuICAgICAgfSwgYWN0aW9uRGF0YSA/IE9iamVjdC5rZXlzKGFjdGlvbkRhdGEpLmxlbmd0aCA9PT0gMCA/IHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbFxuICAgICAgfSA6IHtcbiAgICAgICAgYWN0aW9uRGF0YVxuICAgICAgfSA6IHt9LCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwID8ge1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICAgIH0gOiB7fSksIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMocmYua2V5KSkge1xuICAgICAgICBhYm9ydEZldGNoZXIocmYua2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIC8vIEZldGNoZXJzIHVzZSBhbiBpbmRlcGVuZGVudCBBYm9ydENvbnRyb2xsZXIgc28gdGhhdCBhYm9ydGluZyBhIGZldGNoZXJcbiAgICAgICAgLy8gKHZpYSBkZWxldGVGZXRjaGVyKSBkb2VzIG5vdCBhYm9ydCB0aGUgdHJpZ2dlcmluZyBuYXZpZ2F0aW9uIHRoYXRcbiAgICAgICAgLy8gdHJpZ2dlcmVkIHRoZSByZXZhbGlkYXRpb25cbiAgICAgICAgZmV0Y2hDb250cm9sbGVycy5zZXQocmYua2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICAvLyBQcm94eSBuYXZpZ2F0aW9uIGFib3J0IHRocm91Z2ggdG8gcmV2YWxpZGF0aW9uIGZldGNoZXJzXG4gICAgbGV0IGFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyA9ICgpID0+IHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goZiA9PiBhYm9ydEZldGNoZXIoZi5rZXkpKTtcbiAgICBpZiAocGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyKSB7XG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBhYm9ydFBlbmRpbmdGZXRjaFJldmFsaWRhdGlvbnMpO1xuICAgIH1cbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJlcXVlc3QpO1xuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzaG9ydENpcmN1aXRlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG4gICAgLy8gQ2xlYW4gdXAgX2FmdGVyXyBsb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWYgd2Ugc2hvcnRcbiAgICAvLyBjaXJjdWl0ZWQgYmVjYXVzZSBmZXRjaENvbnRyb2xsZXJzIHdvdWxkIGhhdmUgYmVlbiBhYm9ydGVkIGFuZFxuICAgIC8vIHJlYXNzaWduZWQgdG8gbmV3IGNvbnRyb2xsZXJzIGZvciB0aGUgbmV4dCBuYXZpZ2F0aW9uXG4gICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcikge1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICB9XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcbiAgICAvLyBJZiBhbnkgbG9hZGVycyByZXR1cm5lZCBhIHJlZGlyZWN0IFJlc3BvbnNlLCBzdGFydCBhIG5ldyBSRVBMQUNFIG5hdmlnYXRpb25cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICBpZiAocmVkaXJlY3QuaWR4ID49IG1hdGNoZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICAgIC8vIElmIHRoaXMgcmVkaXJlY3QgY2FtZSBmcm9tIGEgZmV0Y2hlciBtYWtlIHN1cmUgd2UgbWFyayBpdCBpblxuICAgICAgICAvLyBmZXRjaFJlZGlyZWN0SWRzIHNvIGl0IGRvZXNuJ3QgZ2V0IHJldmFsaWRhdGVkIG9uIHRoZSBuZXh0IHNldCBvZlxuICAgICAgICAvLyBsb2FkZXIgZXhlY3V0aW9uc1xuICAgICAgICBsZXQgZmV0Y2hlcktleSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW3JlZGlyZWN0LmlkeCAtIG1hdGNoZXNUb0xvYWQubGVuZ3RoXS5rZXk7XG4gICAgICAgIGZldGNoUmVkaXJlY3RJZHMuYWRkKGZldGNoZXJLZXkpO1xuICAgICAgfVxuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCwge1xuICAgICAgICByZXBsYWNlXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNob3J0Q2lyY3VpdGVkOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSA9IHByb2Nlc3NMb2FkZXJEYXRhKHN0YXRlLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBsb2FkZXJSZXN1bHRzLCBwZW5kaW5nRXJyb3IsIHJldmFsaWRhdGluZ0ZldGNoZXJzLCBmZXRjaGVyUmVzdWx0cywgYWN0aXZlRGVmZXJyZWRzKTtcbiAgICAvLyBXaXJlIHVwIHN1YnNjcmliZXJzIHRvIHVwZGF0ZSBsb2FkZXJEYXRhIGFzIHByb21pc2VzIHNldHRsZVxuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZWZlcnJlZERhdGEsIHJvdXRlSWQpID0+IHtcbiAgICAgIGRlZmVycmVkRGF0YS5zdWJzY3JpYmUoYWJvcnRlZCA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpO1xuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2FkcyhwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCk7XG4gICAgbGV0IHNob3VsZFVwZGF0ZUZldGNoZXJzID0gdXBkYXRlZEZldGNoZXJzIHx8IGRpZEFib3J0RmV0Y2hMb2FkcyB8fCByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPiAwO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7XG4gICAgICBsb2FkZXJEYXRhLFxuICAgICAgZXJyb3JzXG4gICAgfSwgc2hvdWxkVXBkYXRlRmV0Y2hlcnMgPyB7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9IDoge30pO1xuICB9XG4gIC8vIFRyaWdnZXIgYSBmZXRjaGVyIGxvYWQvc3VibWl0IGZvciB0aGUgZ2l2ZW4gZmV0Y2hlciBrZXlcbiAgZnVuY3Rpb24gZmV0Y2goa2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJyb3V0ZXIuZmV0Y2goKSB3YXMgY2FsbGVkIGR1cmluZyB0aGUgc2VydmVyIHJlbmRlciwgYnV0IGl0IHNob3VsZG4ndCBiZS4gXCIgKyBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArIFwiVHJ5IG1vdmluZyBpdCB0byBhIHVzZUVmZmVjdCBvciBhIGNhbGxiYWNrLlwiKTtcbiAgICB9XG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgIGxldCBmbHVzaFN5bmMgPSAob3B0cyAmJiBvcHRzLnVuc3RhYmxlX2ZsdXNoU3luYykgPT09IHRydWU7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG5vcm1hbGl6ZWRQYXRoID0gbm9ybWFsaXplVG8oc3RhdGUubG9jYXRpb24sIHN0YXRlLm1hdGNoZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcHJlcGVuZEJhc2VuYW1lLCBocmVmLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHJvdXRlSWQsIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucmVsYXRpdmUpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzVG9Vc2UsIG5vcm1hbGl6ZWRQYXRoLCBiYXNlbmFtZSk7XG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbm9ybWFsaXplZFBhdGhcbiAgICAgIH0pLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCB7XG4gICAgICBwYXRoLFxuICAgICAgc3VibWlzc2lvbixcbiAgICAgIGVycm9yXG4gICAgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyhmdXR1cmUudjdfbm9ybWFsaXplRm9ybU1ldGhvZCwgdHJ1ZSwgbm9ybWFsaXplZFBhdGgsIG9wdHMpO1xuICAgIGlmIChlcnJvcikge1xuICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgZXJyb3IsIHtcbiAgICAgICAgZmx1c2hTeW5jXG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG4gICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9IChvcHRzICYmIG9wdHMucHJldmVudFNjcm9sbFJlc2V0KSA9PT0gdHJ1ZTtcbiAgICBpZiAoc3VibWlzc2lvbiAmJiBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpIHtcbiAgICAgIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgZmx1c2hTeW5jLCBzdWJtaXNzaW9uKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gU3RvcmUgb2ZmIHRoZSBtYXRjaCBzbyB3ZSBjYW4gY2FsbCBpdCdzIHNob3VsZFJldmFsaWRhdGUgb24gc3Vic2VxdWVudFxuICAgIC8vIHJldmFsaWRhdGlvbnNcbiAgICBmZXRjaExvYWRNYXRjaGVzLnNldChrZXksIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICBwYXRoXG4gICAgfSk7XG4gICAgaGFuZGxlRmV0Y2hlckxvYWRlcihrZXksIHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzLCBmbHVzaFN5bmMsIHN1Ym1pc3Npb24pO1xuICB9XG4gIC8vIENhbGwgdGhlIGFjdGlvbiBmb3IgdGhlIG1hdGNoZWQgZmV0Y2hlci5zdWJtaXQoKSwgYW5kIHRoZW4gaGFuZGxlIHJlZGlyZWN0cyxcbiAgLy8gZXJyb3JzLCBhbmQgcmV2YWxpZGF0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJBY3Rpb24oa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgcmVxdWVzdE1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBpZiAoIW1hdGNoLnJvdXRlLmFjdGlvbiAmJiAhbWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBwYXRoLFxuICAgICAgICByb3V0ZUlkOiByb3V0ZUlkXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCB7XG4gICAgICAgIGZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSwge1xuICAgICAgZmx1c2hTeW5jXG4gICAgfSk7XG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGluaXQuaGlzdG9yeSwgcGF0aCwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCwgc3VibWlzc2lvbik7XG4gICAgZmV0Y2hDb250cm9sbGVycy5zZXQoa2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgIGxldCBvcmlnaW5hdGluZ0xvYWRJZCA9IGluY3JlbWVudGluZ0xvYWRJZDtcbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFwiYWN0aW9uXCIsIGZldGNoUmVxdWVzdCwgbWF0Y2gsIHJlcXVlc3RNYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoKTtcbiAgICBpZiAoZmV0Y2hSZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAvLyBXZSBjYW4gZGVsZXRlIHRoaXMgc28gbG9uZyBhcyB3ZSB3ZXJlbid0IGFib3J0ZWQgYnkgb3VyIG93biBmZXRjaGVyXG4gICAgICAvLyByZS1zdWJtaXQgd2hpY2ggd291bGQgaGF2ZSBwdXQgX25ld18gY29udHJvbGxlciBpcyBpbiBmZXRjaENvbnRyb2xsZXJzXG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KSA9PT0gYWJvcnRDb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdoZW4gdXNpbmcgdjdfZmV0Y2hlclBlcnNpc3QsIHdlIGRvbid0IHdhbnQgZXJyb3JzIGJ1YmJsaW5nIHVwIHRvIHRoZSBVSVxuICAgIC8vIG9yIHJlZGlyZWN0cyBwcm9jZXNzZWQgZm9yIHVubW91bnRlZCBmZXRjaGVycyBzbyB3ZSBqdXN0IHJldmVydCB0aGVtIHRvXG4gICAgLy8gaWRsZVxuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QgJiYgZGVsZXRlZEZldGNoZXJzLmhhcyhrZXkpKSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpIHx8IGlzRXJyb3JSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gTGV0IFN1Y2Nlc3NSZXN1bHQncyBmYWxsIHRocm91Z2ggZm9yIHJldmFsaWRhdGlvblxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICAgIGlmIChwZW5kaW5nTmF2aWdhdGlvbkxvYWRJZCA+IG9yaWdpbmF0aW5nTG9hZElkKSB7XG4gICAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgYWN0aW9uIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgICAvLyBzaG91bGQgdGFrZSBwcmVjZWRlbmNlIG92ZXIgdGhpcyByZWRpcmVjdCBuYXZpZ2F0aW9uLiAgV2UgYWxyZWFkeVxuICAgICAgICAgIC8vIHNldCBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHNvIGFsbCBsb2FkZXJzIGZvciB0aGUgbmV3IHJvdXRlIHNob3VsZFxuICAgICAgICAgIC8vIGZpcmUgdW5sZXNzIG9wdGVkIG91dCB2aWEgc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHVuZGVmaW5lZCkpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24pKTtcbiAgICAgICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICAgICAgZmV0Y2hlclN1Ym1pc3Npb246IHN1Ym1pc3Npb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgICAgc2V0RmV0Y2hlckVycm9yKGtleSwgcm91dGVJZCwgYWN0aW9uUmVzdWx0LmVycm9yKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChhY3Rpb25SZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICB0eXBlOiBcImRlZmVyLWFjdGlvblwiXG4gICAgICB9KTtcbiAgICB9XG4gICAgLy8gU3RhcnQgdGhlIGRhdGEgbG9hZCBmb3IgY3VycmVudCBtYXRjaGVzLCBvciB0aGUgbmV4dCBsb2NhdGlvbiBpZiB3ZSdyZVxuICAgIC8vIGluIHRoZSBtaWRkbGUgb2YgYSBuYXZpZ2F0aW9uXG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gfHwgc3RhdGUubG9jYXRpb247XG4gICAgbGV0IHJldmFsaWRhdGlvblJlcXVlc3QgPSBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChpbml0Lmhpc3RvcnksIG5leHRMb2NhdGlvbiwgYWJvcnRDb250cm9sbGVyLnNpZ25hbCk7XG4gICAgbGV0IHJvdXRlc1RvVXNlID0gaW5GbGlnaHREYXRhUm91dGVzIHx8IGRhdGFSb3V0ZXM7XG4gICAgbGV0IG1hdGNoZXMgPSBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIiA/IG1hdGNoUm91dGVzKHJvdXRlc1RvVXNlLCBzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCBiYXNlbmFtZSkgOiBzdGF0ZS5tYXRjaGVzO1xuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuICAgIGxldCBsb2FkSWQgPSArK2luY3JlbWVudGluZ0xvYWRJZDtcbiAgICBmZXRjaFJlbG9hZElkcy5zZXQoa2V5LCBsb2FkSWQpO1xuICAgIGxldCBsb2FkRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHN1Ym1pc3Npb24sIGFjdGlvblJlc3VsdC5kYXRhKTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKGluaXQuaGlzdG9yeSwgc3RhdGUsIG1hdGNoZXMsIHN1Ym1pc3Npb24sIG5leHRMb2NhdGlvbiwgZmFsc2UsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCB7XG4gICAgICBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YVxuICAgIH0sIHVuZGVmaW5lZCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICk7XG4gICAgLy8gUHV0IGFsbCByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgaW50byB0aGUgbG9hZGluZyBzdGF0ZSwgZXhjZXB0IGZvciB0aGVcbiAgICAvLyBjdXJyZW50IGZldGNoZXIgd2hpY2ggd2Ugd2FudCB0byBrZWVwIGluIGl0J3MgY3VycmVudCBsb2FkaW5nIHN0YXRlIHdoaWNoXG4gICAgLy8gY29udGFpbnMgaXQncyBhY3Rpb24gc3VibWlzc2lvbiBpbmZvICsgYWN0aW9uIGRhdGFcbiAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5maWx0ZXIocmYgPT4gcmYua2V5ICE9PSBrZXkpLmZvckVhY2gocmYgPT4ge1xuICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChzdGFsZUtleSk7XG4gICAgICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlciA9IGdldExvYWRpbmdGZXRjaGVyKHVuZGVmaW5lZCwgZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWQpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHN0YWxlS2V5LCByZXZhbGlkYXRpbmdGZXRjaGVyKTtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhzdGFsZUtleSkpIHtcbiAgICAgICAgYWJvcnRGZXRjaGVyKHN0YWxlS2V5KTtcbiAgICAgIH1cbiAgICAgIGlmIChyZi5jb250cm9sbGVyKSB7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHN0YWxlS2V5LCByZi5jb250cm9sbGVyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9KTtcbiAgICBsZXQgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zID0gKCkgPT4gcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaChyZiA9PiBhYm9ydEZldGNoZXIocmYua2V5KSk7XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBsZXQge1xuICAgICAgcmVzdWx0cyxcbiAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICBmZXRjaGVyUmVzdWx0c1xuICAgIH0gPSBhd2FpdCBjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEoc3RhdGUubWF0Y2hlcywgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIHJldmFsaWRhdGlvblJlcXVlc3QpO1xuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgYWJvcnRDb250cm9sbGVyLnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgYWJvcnRQZW5kaW5nRmV0Y2hSZXZhbGlkYXRpb25zKTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2gociA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyLmtleSkpO1xuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGlmIChyZWRpcmVjdC5pZHggPj0gbWF0Y2hlc1RvTG9hZC5sZW5ndGgpIHtcbiAgICAgICAgLy8gSWYgdGhpcyByZWRpcmVjdCBjYW1lIGZyb20gYSBmZXRjaGVyIG1ha2Ugc3VyZSB3ZSBtYXJrIGl0IGluXG4gICAgICAgIC8vIGZldGNoUmVkaXJlY3RJZHMgc28gaXQgZG9lc24ndCBnZXQgcmV2YWxpZGF0ZWQgb24gdGhlIG5leHQgc2V0IG9mXG4gICAgICAgIC8vIGxvYWRlciBleGVjdXRpb25zXG4gICAgICAgIGxldCBmZXRjaGVyS2V5ID0gcmV2YWxpZGF0aW5nRmV0Y2hlcnNbcmVkaXJlY3QuaWR4IC0gbWF0Y2hlc1RvTG9hZC5sZW5ndGhdLmtleTtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoZmV0Y2hlcktleSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0LnJlc3VsdCk7XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgYW5kIGNvbW1pdCBvdXRwdXQgZnJvbSBsb2FkZXJzXG4gICAgbGV0IHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnNcbiAgICB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoc3RhdGUsIHN0YXRlLm1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIGxvYWRlclJlc3VsdHMsIHVuZGVmaW5lZCwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMsIGZldGNoZXJSZXN1bHRzLCBhY3RpdmVEZWZlcnJlZHMpO1xuICAgIC8vIFNpbmNlIHdlIGxldCByZXZhbGlkYXRpb25zIGNvbXBsZXRlIGV2ZW4gaWYgdGhlIHN1Ym1pdHRpbmcgZmV0Y2hlciB3YXNcbiAgICAvLyBkZWxldGVkLCBvbmx5IHB1dCBpdCBiYWNrIHRvIGlkbGUgaWYgaXQgaGFzbid0IGJlZW4gZGVsZXRlZFxuICAgIGlmIChzdGF0ZS5mZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoYWN0aW9uUmVzdWx0LmRhdGEpO1xuICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KGtleSwgZG9uZUZldGNoZXIpO1xuICAgIH1cbiAgICBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpO1xuICAgIC8vIElmIHdlIGFyZSBjdXJyZW50bHkgaW4gYSBuYXZpZ2F0aW9uIGxvYWRpbmcgc3RhdGUgYW5kIHRoaXMgZmV0Y2hlciBpc1xuICAgIC8vIG1vcmUgcmVjZW50IHRoYW4gdGhlIG5hdmlnYXRpb24sIHdlIHdhbnQgdGhlIG5ld2VyIGRhdGEgc28gYWJvcnQgdGhlXG4gICAgLy8gbmF2aWdhdGlvbiBhbmQgY29tcGxldGUgaXQgd2l0aCB0aGUgZmV0Y2hlciBkYXRhXG4gICAgaWYgKHN0YXRlLm5hdmlnYXRpb24uc3RhdGUgPT09IFwibG9hZGluZ1wiICYmIGxvYWRJZCA+IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkKSB7XG4gICAgICBpbnZhcmlhbnQocGVuZGluZ0FjdGlvbiwgXCJFeHBlY3RlZCBwZW5kaW5nIGFjdGlvblwiKTtcbiAgICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihzdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLCB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgIGVycm9ycyxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXBkYXRlIHdpdGggdGhlIGZldGNoZXIgZGF0YSwgcHJlc2VydmluZyBhbnkgZXhpc3RpbmdcbiAgICAgIC8vIGxvYWRlckRhdGEgZm9yIGxvYWRlcnMgdGhhdCBkaWQgbm90IG5lZWQgdG8gcmVsb2FkLiAgV2UgaGF2ZSB0b1xuICAgICAgLy8gbWFudWFsbHkgbWVyZ2UgaGVyZSBzaW5jZSB3ZSBhcmVuJ3QgZ29pbmcgdGhyb3VnaCBjb21wbGV0ZU5hdmlnYXRpb25cbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgZXJyb3JzLFxuICAgICAgICBsb2FkZXJEYXRhOiBtZXJnZUxvYWRlckRhdGEoc3RhdGUubG9hZGVyRGF0YSwgbG9hZGVyRGF0YSwgbWF0Y2hlcywgZXJyb3JzKSxcbiAgICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQ2FsbCB0aGUgbWF0Y2hlZCBsb2FkZXIgZm9yIGZldGNoZXIubG9hZCgpLCBoYW5kbGluZyByZWRpcmVjdHMsIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyTG9hZGVyKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIGZsdXNoU3luYywgc3VibWlzc2lvbikge1xuICAgIGxldCBleGlzdGluZ0ZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXRMb2FkaW5nRmV0Y2hlcihzdWJtaXNzaW9uLCBleGlzdGluZ0ZldGNoZXIgPyBleGlzdGluZ0ZldGNoZXIuZGF0YSA6IHVuZGVmaW5lZCksIHtcbiAgICAgIGZsdXNoU3luY1xuICAgIH0pO1xuICAgIC8vIENhbGwgdGhlIGxvYWRlciBmb3IgdGhpcyBmZXRjaGVyIHJvdXRlIG1hdGNoXG4gICAgbGV0IGFib3J0Q29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgZmV0Y2hSZXF1ZXN0ID0gY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBwYXRoLCBhYm9ydENvbnRyb2xsZXIuc2lnbmFsKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG4gICAgbGV0IG9yaWdpbmF0aW5nTG9hZElkID0gaW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGxldCByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgZmV0Y2hSZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgLy8gRGVmZXJyZWQgaXNuJ3Qgc3VwcG9ydGVkIGZvciBmZXRjaGVyIGxvYWRzLCBhd2FpdCBldmVyeXRoaW5nIGFuZCB0cmVhdCBpdFxuICAgIC8vIGFzIGEgbm9ybWFsIGxvYWQuICByZXNvbHZlRGVmZXJyZWREYXRhIHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBpZiB0aGlzXG4gICAgLy8gZmV0Y2hlciBnZXRzIGFib3J0ZWQsIHNvIHdlIGp1c3QgbGVhdmUgcmVzdWx0IHVudG91Y2hlZCBhbmQgc2hvcnQgY2lyY3VpdFxuICAgIC8vIGJlbG93IGlmIHRoYXQgaGFwcGVuc1xuICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJlc3VsdCA9IChhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgZmV0Y2hSZXF1ZXN0LnNpZ25hbCwgdHJ1ZSkpIHx8IHJlc3VsdDtcbiAgICB9XG4gICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91ciBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuICAgIGlmIChmZXRjaFJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBlcnJvcnMgYnViYmxpbmcgdXAgb3IgcmVkaXJlY3RzIGZvbGxvd2VkIGZvciB1bm1vdW50ZWRcbiAgICAvLyBmZXRjaGVycywgc28gc2hvcnQgY2lyY3VpdCBoZXJlIGlmIGl0IHdhcyByZW1vdmVkIGZyb20gdGhlIFVJXG4gICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgdXBkYXRlRmV0Y2hlclN0YXRlKGtleSwgZ2V0RG9uZUZldGNoZXIodW5kZWZpbmVkKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgaWYgKHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID4gb3JpZ2luYXRpbmdMb2FkSWQpIHtcbiAgICAgICAgLy8gQSBuZXcgbmF2aWdhdGlvbiB3YXMga2lja2VkIG9mZiBhZnRlciBvdXIgbG9hZGVyIHN0YXJ0ZWQsIHNvIHRoYXRcbiAgICAgICAgLy8gc2hvdWxkIHRha2UgcHJlY2VkZW5jZSBvdmVyIHRoaXMgcmVkaXJlY3QgbmF2aWdhdGlvblxuICAgICAgICB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBnZXREb25lRmV0Y2hlcih1bmRlZmluZWQpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5hZGQoa2V5KTtcbiAgICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBzZXRGZXRjaGVyRXJyb3Ioa2V5LCByb3V0ZUlkLCByZXN1bHQuZXJyb3IpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoIWlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSwgXCJVbmhhbmRsZWQgZmV0Y2hlciBkZWZlcnJlZCBkYXRhXCIpO1xuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIHVwZGF0ZUZldGNoZXJTdGF0ZShrZXksIGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKSk7XG4gIH1cbiAgLyoqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gaGFuZGxlIHJlZGlyZWN0cyByZXR1cm5lZCBmcm9tIGFuIGFjdGlvbiBvciBsb2FkZXIuXG4gICAqIE5vcm1hbGx5LCBhIHJlZGlyZWN0IFwicmVwbGFjZXNcIiB0aGUgbmF2aWdhdGlvbiB0aGF0IHRyaWdnZXJlZCBpdC4gIFNvLCBmb3JcbiAgICogZXhhbXBsZTpcbiAgICpcbiAgICogIC0gdXNlciBpcyBvbiAvYVxuICAgKiAgLSB1c2VyIGNsaWNrcyBhIGxpbmsgdG8gL2JcbiAgICogIC0gbG9hZGVyIGZvciAvYiByZWRpcmVjdHMgdG8gL2NcbiAgICpcbiAgICogSW4gYSBub24tSlMgYXBwIHRoZSBicm93c2VyIHdvdWxkIHRyYWNrIHRoZSBpbi1mbGlnaHQgbmF2aWdhdGlvbiB0byAvYiBhbmRcbiAgICogdGhlbiByZXBsYWNlIGl0IHdpdGggL2Mgd2hlbiBpdCBlbmNvdW50ZXJlZCB0aGUgcmVkaXJlY3QgcmVzcG9uc2UuICBJblxuICAgKiB0aGUgZW5kIGl0IHdvdWxkIG9ubHkgZXZlciB1cGRhdGUgdGhlIFVSTCBiYXIgd2l0aCAvYy5cbiAgICpcbiAgICogSW4gY2xpZW50LXNpZGUgcm91dGluZyB1c2luZyBwdXNoU3RhdGUvcmVwbGFjZVN0YXRlLCB3ZSBhaW0gdG8gZW11bGF0ZVxuICAgKiB0aGlzIGJlaGF2aW9yIGFuZCB3ZSBhbHNvIGRvIG5vdCB1cGRhdGUgaGlzdG9yeSB1bnRpbCB0aGUgZW5kIG9mIHRoZVxuICAgKiBuYXZpZ2F0aW9uIChpbmNsdWRpbmcgcHJvY2Vzc2VkIHJlZGlyZWN0cykuICBUaGlzIG1lYW5zIHRoYXQgd2UgbmV2ZXJcbiAgICogYWN0dWFsbHkgdG91Y2ggaGlzdG9yeSB1bnRpbCB3ZSd2ZSBwcm9jZXNzZWQgcmVkaXJlY3RzLCBzbyB3ZSBqdXN0IHVzZVxuICAgKiB0aGUgaGlzdG9yeSBhY3Rpb24gZnJvbSB0aGUgb3JpZ2luYWwgbmF2aWdhdGlvbiAoUFVTSCBvciBSRVBMQUNFKS5cbiAgICovXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgX3RlbXAyKSB7XG4gICAgbGV0IHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgIHJlcGxhY2VcbiAgICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgICBpZiAocmVkaXJlY3QucmV2YWxpZGF0ZSkge1xuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICAgIGxldCByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oc3RhdGUubG9jYXRpb24sIHJlZGlyZWN0LmxvY2F0aW9uLCB7XG4gICAgICBfaXNSZWRpcmVjdDogdHJ1ZVxuICAgIH0pO1xuICAgIGludmFyaWFudChyZWRpcmVjdExvY2F0aW9uLCBcIkV4cGVjdGVkIGEgbG9jYXRpb24gb24gdGhlIHJlZGlyZWN0IG5hdmlnYXRpb25cIik7XG4gICAgaWYgKGlzQnJvd3Nlcikge1xuICAgICAgbGV0IGlzRG9jdW1lbnRSZWxvYWQgPSBmYWxzZTtcbiAgICAgIGlmIChyZWRpcmVjdC5yZWxvYWREb2N1bWVudCkge1xuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiB0aGUgcmVzcG9uc2UgY29udGFpbmVkIFgtUmVtaXgtUmVsb2FkLURvY3VtZW50XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChBQlNPTFVURV9VUkxfUkVHRVgudGVzdChyZWRpcmVjdC5sb2NhdGlvbikpIHtcbiAgICAgICAgY29uc3QgdXJsID0gaW5pdC5oaXN0b3J5LmNyZWF0ZVVSTChyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIGlzRG9jdW1lbnRSZWxvYWQgPVxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0byBhIG5ldyBvcmlnaW5cbiAgICAgICAgdXJsLm9yaWdpbiAhPT0gcm91dGVyV2luZG93LmxvY2F0aW9uLm9yaWdpbiB8fFxuICAgICAgICAvLyBIYXJkIHJlbG9hZCBpZiBpdCdzIGFuIGFic29sdXRlIFVSTCB0aGF0IGRvZXMgbm90IG1hdGNoIG91ciBiYXNlbmFtZVxuICAgICAgICBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpID09IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoaXNEb2N1bWVudFJlbG9hZCkge1xuICAgICAgICBpZiAocmVwbGFjZSkge1xuICAgICAgICAgIHJvdXRlcldpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByb3V0ZXJXaW5kb3cubG9jYXRpb24uYXNzaWduKHJlZGlyZWN0LmxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcbiAgICBsZXQgcmVkaXJlY3RIaXN0b3J5QWN0aW9uID0gcmVwbGFjZSA9PT0gdHJ1ZSA/IEFjdGlvbi5SZXBsYWNlIDogQWN0aW9uLlB1c2g7XG4gICAgLy8gVXNlIHRoZSBpbmNvbWluZyBzdWJtaXNzaW9uIGlmIHByb3ZpZGVkLCBmYWxsYmFjayBvbiB0aGUgYWN0aXZlIG9uZSBpblxuICAgIC8vIHN0YXRlLm5hdmlnYXRpb25cbiAgICBsZXQge1xuICAgICAgZm9ybU1ldGhvZCxcbiAgICAgIGZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZVxuICAgIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmICghc3VibWlzc2lvbiAmJiAhZmV0Y2hlclN1Ym1pc3Npb24gJiYgZm9ybU1ldGhvZCAmJiBmb3JtQWN0aW9uICYmIGZvcm1FbmNUeXBlKSB7XG4gICAgICBzdWJtaXNzaW9uID0gZ2V0U3VibWlzc2lvbkZyb21OYXZpZ2F0aW9uKHN0YXRlLm5hdmlnYXRpb24pO1xuICAgIH1cbiAgICAvLyBJZiB0aGlzIHdhcyBhIDMwNy8zMDggc3VibWlzc2lvbiB3ZSB3YW50IHRvIHByZXNlcnZlIHRoZSBIVFRQIG1ldGhvZCBhbmRcbiAgICAvLyByZS1zdWJtaXQgdGhlIEdFVC9QT1NUL1BVVC9QQVRDSC9ERUxFVEUgYXMgYSBzdWJtaXNzaW9uIG5hdmlnYXRpb24gdG8gdGhlXG4gICAgLy8gcmVkaXJlY3RlZCBsb2NhdGlvblxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvbiB8fCBmZXRjaGVyU3VibWlzc2lvbjtcbiAgICBpZiAocmVkaXJlY3RQcmVzZXJ2ZU1ldGhvZFN0YXR1c0NvZGVzLmhhcyhyZWRpcmVjdC5zdGF0dXMpICYmIGFjdGl2ZVN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChhY3RpdmVTdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIHN1Ym1pc3Npb246IF9leHRlbmRzKHt9LCBhY3RpdmVTdWJtaXNzaW9uLCB7XG4gICAgICAgICAgZm9ybUFjdGlvbjogcmVkaXJlY3QubG9jYXRpb25cbiAgICAgICAgfSksXG4gICAgICAgIC8vIFByZXNlcnZlIHRoaXMgZmxhZyBhY3Jvc3MgcmVkaXJlY3RzXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIHdlIGhhdmUgYSBuYXZpZ2F0aW9uIHN1Ym1pc3Npb24sIHdlIHdpbGwgcHJlc2VydmUgaXQgdGhyb3VnaCB0aGVcbiAgICAgIC8vIHJlZGlyZWN0IG5hdmlnYXRpb25cbiAgICAgIGxldCBvdmVycmlkZU5hdmlnYXRpb24gPSBnZXRMb2FkaW5nTmF2aWdhdGlvbihyZWRpcmVjdExvY2F0aW9uLCBzdWJtaXNzaW9uKTtcbiAgICAgIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihyZWRpcmVjdEhpc3RvcnlBY3Rpb24sIHJlZGlyZWN0TG9jYXRpb24sIHtcbiAgICAgICAgb3ZlcnJpZGVOYXZpZ2F0aW9uLFxuICAgICAgICAvLyBTZW5kIGZldGNoZXIgc3VibWlzc2lvbnMgdGhyb3VnaCBmb3Igc2hvdWxkUmV2YWxpZGF0ZVxuICAgICAgICBmZXRjaGVyU3VibWlzc2lvbixcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKGN1cnJlbnRNYXRjaGVzLCBtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCBmZXRjaGVyc1RvTG9hZCwgcmVxdWVzdCkge1xuICAgIC8vIENhbGwgYWxsIG5hdmlnYXRpb24gbG9hZGVycyBhbmQgcmV2YWxpZGF0aW5nIGZldGNoZXIgbG9hZGVycyBpbiBwYXJhbGxlbCxcbiAgICAvLyB0aGVuIHNsaWNlIG9mZiB0aGUgcmVzdWx0cyBpbnRvIHNlcGFyYXRlIGFycmF5cyBzbyB3ZSBjYW4gaGFuZGxlIHRoZW1cbiAgICAvLyBhY2NvcmRpbmdseVxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoWy4uLm1hdGNoZXNUb0xvYWQubWFwKG1hdGNoID0+IGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCkpLCAuLi5mZXRjaGVyc1RvTG9hZC5tYXAoZiA9PiB7XG4gICAgICBpZiAoZi5tYXRjaGVzICYmIGYubWF0Y2ggJiYgZi5jb250cm9sbGVyKSB7XG4gICAgICAgIHJldHVybiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBmLnBhdGgsIGYuY29udHJvbGxlci5zaWduYWwpLCBmLm1hdGNoLCBmLm1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGVycm9yID0ge1xuICAgICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgICAgICBwYXRobmFtZTogZi5wYXRoXG4gICAgICAgICAgfSlcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgfVxuICAgIH0pXSk7XG4gICAgbGV0IGxvYWRlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKDAsIG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBsZXQgZmV0Y2hlclJlc3VsdHMgPSByZXN1bHRzLnNsaWNlKG1hdGNoZXNUb0xvYWQubGVuZ3RoKTtcbiAgICBhd2FpdCBQcm9taXNlLmFsbChbcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhjdXJyZW50TWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgbG9hZGVyUmVzdWx0cywgbG9hZGVyUmVzdWx0cy5tYXAoKCkgPT4gcmVxdWVzdC5zaWduYWwpLCBmYWxzZSwgc3RhdGUubG9hZGVyRGF0YSksIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIGZldGNoZXJzVG9Mb2FkLm1hcChmID0+IGYubWF0Y2gpLCBmZXRjaGVyUmVzdWx0cywgZmV0Y2hlcnNUb0xvYWQubWFwKGYgPT4gZi5jb250cm9sbGVyID8gZi5jb250cm9sbGVyLnNpZ25hbCA6IG51bGwpLCB0cnVlKV0pO1xuICAgIHJldHVybiB7XG4gICAgICByZXN1bHRzLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIGZldGNoZXJSZXN1bHRzXG4gICAgfTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnJ1cHRBY3RpdmVMb2FkcygpIHtcbiAgICAvLyBFdmVyeSBpbnRlcnJ1cHRpb24gdHJpZ2dlcnMgYSByZXZhbGlkYXRpb25cbiAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkID0gdHJ1ZTtcbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcbiAgICAvLyBBYm9ydCBpbi1mbGlnaHQgZmV0Y2hlciBsb2Fkc1xuICAgIGZldGNoTG9hZE1hdGNoZXMuZm9yRWFjaCgoXywga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkge1xuICAgICAgICBjYW5jZWxsZWRGZXRjaGVyTG9hZHMucHVzaChrZXkpO1xuICAgICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiB1cGRhdGVGZXRjaGVyU3RhdGUoa2V5LCBmZXRjaGVyLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBmZXRjaGVyKTtcbiAgICB1cGRhdGVTdGF0ZSh7XG4gICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycylcbiAgICB9LCB7XG4gICAgICBmbHVzaFN5bmM6IChvcHRzICYmIG9wdHMuZmx1c2hTeW5jKSA9PT0gdHJ1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yXG4gICAgICB9LFxuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSwge1xuICAgICAgZmx1c2hTeW5jOiAob3B0cyAmJiBvcHRzLmZsdXNoU3luYykgPT09IHRydWVcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZXRGZXRjaGVyKGtleSkge1xuICAgIGlmIChmdXR1cmUudjdfZmV0Y2hlclBlcnNpc3QpIHtcbiAgICAgIGFjdGl2ZUZldGNoZXJzLnNldChrZXksIChhY3RpdmVGZXRjaGVycy5nZXQoa2V5KSB8fCAwKSArIDEpO1xuICAgICAgLy8gSWYgdGhpcyBmZXRjaGVyIHdhcyBwcmV2aW91c2x5IG1hcmtlZCBmb3IgZGVsZXRpb24sIHVubWFyayBpdCBzaW5jZSB3ZVxuICAgICAgLy8gaGF2ZSBhIG5ldyBpbnN0YW5jZVxuICAgICAgaWYgKGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuZGVsZXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIH1cbiAgZnVuY3Rpb24gZGVsZXRlRmV0Y2hlcihrZXkpIHtcbiAgICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIERvbid0IGFib3J0IHRoZSBjb250cm9sbGVyIGlmIHRoaXMgaXMgYSBkZWxldGlvbiBvZiBhIGZldGNoZXIuc3VibWl0KClcbiAgICAvLyBpbiBpdCdzIGxvYWRpbmcgcGhhc2Ugc2luY2UgLSB3ZSBkb24ndCB3YW50IHRvIGFib3J0IHRoZSBjb3JyZXNwb25kaW5nXG4gICAgLy8gcmV2YWxpZGF0aW9uIGFuZCB3YW50IHRoZW0gdG8gY29tcGxldGUgYW5kIGxhbmRcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSAmJiAhKGZldGNoZXIgJiYgZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiYgZmV0Y2hSZWxvYWRJZHMuaGFzKGtleSkpKSB7XG4gICAgICBhYm9ydEZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIGRlbGV0ZWRGZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgfVxuICBmdW5jdGlvbiBkZWxldGVGZXRjaGVyQW5kVXBkYXRlU3RhdGUoa2V5KSB7XG4gICAgaWYgKGZ1dHVyZS52N19mZXRjaGVyUGVyc2lzdCkge1xuICAgICAgbGV0IGNvdW50ID0gKGFjdGl2ZUZldGNoZXJzLmdldChrZXkpIHx8IDApIC0gMTtcbiAgICAgIGlmIChjb3VudCA8PSAwKSB7XG4gICAgICAgIGFjdGl2ZUZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgICBkZWxldGVkRmV0Y2hlcnMuYWRkKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmVGZXRjaGVycy5zZXQoa2V5LCBjb3VudCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZUZldGNoZXIoa2V5KTtcbiAgICB9XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleSkge1xuICAgIGxldCBjb250cm9sbGVyID0gZmV0Y2hDb250cm9sbGVycy5nZXQoa2V5KTtcbiAgICBpbnZhcmlhbnQoY29udHJvbGxlciwgXCJFeHBlY3RlZCBmZXRjaCBjb250cm9sbGVyOiBcIiArIGtleSk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoZXJzRG9uZShrZXlzKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyID0gZ2V0RG9uZUZldGNoZXIoZmV0Y2hlci5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBsZXQgdXBkYXRlZEZldGNoZXJzID0gZmFsc2U7XG4gICAgZm9yIChsZXQga2V5IG9mIGZldGNoUmVkaXJlY3RJZHMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICBpbnZhcmlhbnQoZmV0Y2hlciwgXCJFeHBlY3RlZCBmZXRjaGVyOiBcIiArIGtleSk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgICB1cGRhdGVkRmV0Y2hlcnMgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgICByZXR1cm4gdXBkYXRlZEZldGNoZXJzO1xuICB9XG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkKSB7XG4gICAgbGV0IHllZXRlZEtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBba2V5LCBpZF0gb2YgZmV0Y2hSZWxvYWRJZHMpIHtcbiAgICAgIGlmIChpZCA8IGxhbmRlZElkKSB7XG4gICAgICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgICAgIGludmFyaWFudChmZXRjaGVyLCBcIkV4cGVjdGVkIGZldGNoZXI6IFwiICsga2V5KTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG4gIGZ1bmN0aW9uIGdldEJsb2NrZXIoa2V5LCBmbikge1xuICAgIGxldCBibG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLmdldChrZXkpICE9PSBmbikge1xuICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zZXQoa2V5LCBmbik7XG4gICAgfVxuICAgIHJldHVybiBibG9ja2VyO1xuICB9XG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5KSB7XG4gICAgc3RhdGUuYmxvY2tlcnMuZGVsZXRlKGtleSk7XG4gICAgYmxvY2tlckZ1bmN0aW9ucy5kZWxldGUoa2V5KTtcbiAgfVxuICAvLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIHVwZGF0ZSBibG9ja2VycywgZW5zdXJpbmcgdmFsaWQgc3RhdGUgdHJhbnNpdGlvbnNcbiAgZnVuY3Rpb24gdXBkYXRlQmxvY2tlcihrZXksIG5ld0Jsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcbiAgICAvLyBQb29yIG1hbnMgc3RhdGUgbWFjaGluZSA6KVxuICAgIC8vIGh0dHBzOi8vbWVybWFpZC5saXZlL2VkaXQjcGFrbzplTnFWa2M5T3d6QU14bDhsOG5uakFZckV0RElPSEVCSWd3dktKVFJlR3kzX2xEcElxTzI3azZhd01HMFhjckxsbno4N253ZG9uRVNvZ0tYWEJ1RTc5cnE3NVhaTzMteUhkczBSSlZ1djcwWXJQbFVyQ0VlMkhmck9SUzNydWJxWmZ1aHRwZzVDOXdrNXRaNFZLY1JVcTg4cTlaOFJTMC00OGNFMWlISmtMMHVnYkh1Rkx1czlMNnNwWnk4blg5TVAyQ05kb21WYXBvc3F1M2ZHYXlUOFQ4LWpKUXdoZXBvX1V0cGdCUWFERVVvbTA0ZFpoQU4xYUpCRGxVS0pCeEUxY2VCMlNtajBNbG4tSUJXNUFGVTJkd1Vpa3R0XzJRYXEyZEJmYUtkRXVwODVVVjdZZC1kS2psbmthYmwyUHZyMERUa1RyZU1cbiAgICBpbnZhcmlhbnQoYmxvY2tlci5zdGF0ZSA9PT0gXCJ1bmJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiB8fCBibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiIHx8IGJsb2NrZXIuc3RhdGUgPT09IFwicHJvY2VlZGluZ1wiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIsIFwiSW52YWxpZCBibG9ja2VyIHN0YXRlIHRyYW5zaXRpb246IFwiICsgYmxvY2tlci5zdGF0ZSArIFwiIC0+IFwiICsgbmV3QmxvY2tlci5zdGF0ZSk7XG4gICAgbGV0IGJsb2NrZXJzID0gbmV3IE1hcChzdGF0ZS5ibG9ja2Vycyk7XG4gICAgYmxvY2tlcnMuc2V0KGtleSwgbmV3QmxvY2tlcik7XG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgYmxvY2tlcnNcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBzaG91bGRCbG9ja05hdmlnYXRpb24oX3JlZjIpIHtcbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBfcmVmMjtcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdlIG9ueSBzdXBwb3J0IGEgc2luZ2xlIGFjdGl2ZSBibG9ja2VyIGF0IHRoZSBtb21lbnQgc2luY2Ugd2UgZG9uJ3QgaGF2ZVxuICAgIC8vIGFueSBjb21wZWxsaW5nIHVzZSBjYXNlcyBmb3IgbXVsdGktYmxvY2tlciB5ZXRcbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9ucy5zaXplID4gMSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgXCJBIHJvdXRlciBvbmx5IHN1cHBvcnRzIG9uZSBibG9ja2VyIGF0IGEgdGltZVwiKTtcbiAgICB9XG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG4gICAgaWYgKGJsb2NrZXIgJiYgYmxvY2tlci5zdGF0ZSA9PT0gXCJwcm9jZWVkaW5nXCIpIHtcbiAgICAgIC8vIElmIHRoZSBibG9ja2VyIGlzIGN1cnJlbnRseSBwcm9jZWVkaW5nLCB3ZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrXG4gICAgICAvLyBpdCBhbmQgY2FuIGxldCB0aGlzIG5hdmlnYXRpb24gY29udGludWVcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQXQgdGhpcyBwb2ludCwgd2Uga25vdyB3ZSdyZSB1bmJsb2NrZWQvYmxvY2tlZCBzbyB3ZSBuZWVkIHRvIGNoZWNrIHRoZVxuICAgIC8vIHVzZXItcHJvdmlkZWQgYmxvY2tlciBmdW5jdGlvblxuICAgIGlmIChibG9ja2VyRnVuY3Rpb24oe1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0pKSB7XG4gICAgICByZXR1cm4gYmxvY2tlcktleTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FuY2VsQWN0aXZlRGVmZXJyZWRzKHByZWRpY2F0ZSkge1xuICAgIGxldCBjYW5jZWxsZWRSb3V0ZUlkcyA9IFtdO1xuICAgIGFjdGl2ZURlZmVycmVkcy5mb3JFYWNoKChkZmQsIHJvdXRlSWQpID0+IHtcbiAgICAgIGlmICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZShyb3V0ZUlkKSkge1xuICAgICAgICAvLyBDYW5jZWwgdGhlIGRlZmVycmVkIC0gYnV0IGRvIG5vdCByZW1vdmUgZnJvbSBhY3RpdmVEZWZlcnJlZHMgaGVyZSAtXG4gICAgICAgIC8vIHdlIHJlbHkgb24gdGhlIHN1YnNjcmliZXJzIHRvIGRvIHRoYXQgc28gb3VyIHRlc3RzIGNhbiBhc3NlcnQgcHJvcGVyXG4gICAgICAgIC8vIGNsZWFudXAgdmlhIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkc1xuICAgICAgICBkZmQuY2FuY2VsKCk7XG4gICAgICAgIGNhbmNlbGxlZFJvdXRlSWRzLnB1c2gocm91dGVJZCk7XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5kZWxldGUocm91dGVJZCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNhbmNlbGxlZFJvdXRlSWRzO1xuICB9XG4gIC8vIE9wdCBpbiB0byBjYXB0dXJpbmcgYW5kIHJlcG9ydGluZyBzY3JvbGwgcG9zaXRpb25zIGR1cmluZyBuYXZpZ2F0aW9ucyxcbiAgLy8gdXNlZCBieSB0aGUgPFNjcm9sbFJlc3RvcmF0aW9uPiBjb21wb25lbnRcbiAgZnVuY3Rpb24gZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24ocG9zaXRpb25zLCBnZXRQb3NpdGlvbiwgZ2V0S2V5KSB7XG4gICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgZ2V0U2Nyb2xsUG9zaXRpb24gPSBnZXRQb3NpdGlvbjtcbiAgICBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSA9IGdldEtleSB8fCBudWxsO1xuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogeVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIGZ1bmN0aW9uIGdldFNjcm9sbEtleShsb2NhdGlvbiwgbWF0Y2hlcykge1xuICAgIGlmIChnZXRTY3JvbGxSZXN0b3JhdGlvbktleSkge1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCBtYXRjaGVzLm1hcChtID0+IGNvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpKSk7XG4gICAgICByZXR1cm4ga2V5IHx8IGxvY2F0aW9uLmtleTtcbiAgICB9XG4gICAgcmV0dXJuIGxvY2F0aW9uLmtleTtcbiAgfVxuICBmdW5jdGlvbiBzYXZlU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMgJiYgZ2V0U2Nyb2xsUG9zaXRpb24pIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdldFNhdmVkU2Nyb2xsUG9zaXRpb24obG9jYXRpb24sIG1hdGNoZXMpIHtcbiAgICBpZiAoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpIHtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxLZXkobG9jYXRpb24sIG1hdGNoZXMpO1xuICAgICAgbGV0IHkgPSBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiB5ID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBmdW5jdGlvbiBfaW50ZXJuYWxTZXRSb3V0ZXMobmV3Um91dGVzKSB7XG4gICAgbWFuaWZlc3QgPSB7fTtcbiAgICBpbkZsaWdodERhdGFSb3V0ZXMgPSBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzKG5ld1JvdXRlcywgbWFwUm91dGVQcm9wZXJ0aWVzLCB1bmRlZmluZWQsIG1hbmlmZXN0KTtcbiAgfVxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGJhc2VuYW1lO1xuICAgIH0sXG4gICAgZ2V0IGZ1dHVyZSgpIHtcbiAgICAgIHJldHVybiBmdXR1cmU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBnZXQgd2luZG93KCkge1xuICAgICAgcmV0dXJuIHJvdXRlcldpbmRvdztcbiAgICB9LFxuICAgIGluaXRpYWxpemUsXG4gICAgc3Vic2NyaWJlLFxuICAgIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uLFxuICAgIG5hdmlnYXRlLFxuICAgIGZldGNoLFxuICAgIHJldmFsaWRhdGUsXG4gICAgLy8gUGFzc3Rocm91Z2ggdG8gaGlzdG9yeS1hd2FyZSBjcmVhdGVIcmVmIHVzZWQgYnkgdXNlSHJlZiBzbyB3ZSBnZXQgcHJvcGVyXG4gICAgLy8gaGFzaC1hd2FyZSBVUkxzIGluIERPTSBwYXRoc1xuICAgIGNyZWF0ZUhyZWY6IHRvID0+IGluaXQuaGlzdG9yeS5jcmVhdGVIcmVmKHRvKSxcbiAgICBlbmNvZGVMb2NhdGlvbjogdG8gPT4gaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKHRvKSxcbiAgICBnZXRGZXRjaGVyLFxuICAgIGRlbGV0ZUZldGNoZXI6IGRlbGV0ZUZldGNoZXJBbmRVcGRhdGVTdGF0ZSxcbiAgICBkaXNwb3NlLFxuICAgIGdldEJsb2NrZXIsXG4gICAgZGVsZXRlQmxvY2tlcixcbiAgICBfaW50ZXJuYWxGZXRjaENvbnRyb2xsZXJzOiBmZXRjaENvbnRyb2xsZXJzLFxuICAgIF9pbnRlcm5hbEFjdGl2ZURlZmVycmVkczogYWN0aXZlRGVmZXJyZWRzLFxuICAgIC8vIFRPRE86IFJlbW92ZSBzZXRSb3V0ZXMsIGl0J3MgdGVtcG9yYXJ5IHRvIGF2b2lkIGRlYWxpbmcgd2l0aFxuICAgIC8vIHVwZGF0aW5nIHRoZSB0cmVlIHdoaWxlIHZhbGlkYXRpbmcgdGhlIHVwZGF0ZSBhbGdvcml0aG0uXG4gICAgX2ludGVybmFsU2V0Um91dGVzXG4gIH07XG4gIHJldHVybiByb3V0ZXI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gY3JlYXRlU3RhdGljSGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbmNvbnN0IFVOU0FGRV9ERUZFUlJFRF9TWU1CT0wgPSBTeW1ib2woXCJkZWZlcnJlZFwiKTtcbmZ1bmN0aW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXIocm91dGVzLCBvcHRzKSB7XG4gIGludmFyaWFudChyb3V0ZXMubGVuZ3RoID4gMCwgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVTdGF0aWNIYW5kbGVyXCIpO1xuICBsZXQgbWFuaWZlc3QgPSB7fTtcbiAgbGV0IGJhc2VuYW1lID0gKG9wdHMgPyBvcHRzLmJhc2VuYW1lIDogbnVsbCkgfHwgXCIvXCI7XG4gIGxldCBtYXBSb3V0ZVByb3BlcnRpZXM7XG4gIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5tYXBSb3V0ZVByb3BlcnRpZXMpIHtcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXMgPSBvcHRzLm1hcFJvdXRlUHJvcGVydGllcztcbiAgfSBlbHNlIGlmIChvcHRzICE9IG51bGwgJiYgb3B0cy5kZXRlY3RFcnJvckJvdW5kYXJ5KSB7XG4gICAgLy8gSWYgdGhleSBhcmUgc3RpbGwgdXNpbmcgdGhlIGRlcHJlY2F0ZWQgdmVyc2lvbiwgd3JhcCBpdCB3aXRoIHRoZSBuZXcgQVBJXG4gICAgbGV0IGRldGVjdEVycm9yQm91bmRhcnkgPSBvcHRzLmRldGVjdEVycm9yQm91bmRhcnk7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gcm91dGUgPT4gKHtcbiAgICAgIGhhc0Vycm9yQm91bmRhcnk6IGRldGVjdEVycm9yQm91bmRhcnkocm91dGUpXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgbWFwUm91dGVQcm9wZXJ0aWVzID0gZGVmYXVsdE1hcFJvdXRlUHJvcGVydGllcztcbiAgfVxuICAvLyBDb25maWcgZHJpdmVuIGJlaGF2aW9yIGZsYWdzXG4gIGxldCBmdXR1cmUgPSBfZXh0ZW5kcyh7XG4gICAgdjdfcmVsYXRpdmVTcGxhdFBhdGg6IGZhbHNlXG4gIH0sIG9wdHMgPyBvcHRzLmZ1dHVyZSA6IG51bGwpO1xuICBsZXQgZGF0YVJvdXRlcyA9IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGVzLCBtYXBSb3V0ZVByb3BlcnRpZXMsIHVuZGVmaW5lZCwgbWFuaWZlc3QpO1xuICAvKipcbiAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0b1xuICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZFxuICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXJcbiAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kXG4gICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVyc1xuICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy5cbiAgICpcbiAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZVxuICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvclxuICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZVxuICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmRcbiAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuXG4gICAqXG4gICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGFcbiAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZVxuICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW5cbiAgICogcmV0dXJuIGl0IGRpcmVjdGx5LlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkocmVxdWVzdCwgX3RlbXAzKSB7XG4gICAgbGV0IHtcbiAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgfSA9IF90ZW1wMyA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDM7XG4gICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgIGxldCBtZXRob2QgPSByZXF1ZXN0Lm1ldGhvZDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcIlwiLCBjcmVhdGVQYXRoKHVybCksIG51bGwsIFwiZGVmYXVsdFwiKTtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBiYXNlbmFtZSk7XG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiSEVBRFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2RcbiAgICAgIH0pO1xuICAgICAgbGV0IHtcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbWV0aG9kTm90QWxsb3dlZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvclxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgICBsZXQge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIHJvdXRlXG4gICAgICB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VuYW1lLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgbWF0Y2hlczogbm90Rm91bmRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3JcbiAgICAgICAgfSxcbiAgICAgICAgc3RhdHVzQ29kZTogZXJyb3Iuc3RhdHVzLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgIGFjdGl2ZURlZmVycmVkczogbnVsbFxuICAgICAgfTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IGF3YWl0IHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpO1xuICAgIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIC8vIFdoZW4gcmV0dXJuaW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0LCB3ZSBwYXRjaCBiYWNrIGluIHRoZSBsb2NhdGlvbiBoZXJlXG4gICAgLy8gc2luY2Ugd2UgbmVlZCBpdCBmb3IgUmVhY3QgQ29udGV4dC4gIEJ1dCB0aGlzIGhlbHBzIGtlZXAgb3VyIHN1Ym1pdCBhbmRcbiAgICAvLyBsb2FkUm91dGVEYXRhIG9wZXJhdGluZyBvbiBhIFJlcXVlc3QgaW5zdGVhZCBvZiBhIExvY2F0aW9uXG4gICAgcmV0dXJuIF9leHRlbmRzKHtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgYmFzZW5hbWVcbiAgICB9LCByZXN1bHQpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgcXVlcnlSb3V0ZSgpIG1ldGhvZCBpcyBpbnRlbmRlZCBmb3IgdGFyZ2V0ZWQgcm91dGUgcmVxdWVzdHMsIGVpdGhlclxuICAgKiBmb3IgZmV0Y2ggP19kYXRhIHJlcXVlc3RzIG9yIHJlc291cmNlIHJvdXRlIHJlcXVlc3RzLiAgSW4gdGhpcyBjYXNlLCB3ZVxuICAgKiBhcmUgb25seSBldmVyIGNhbGxpbmcgYSBzaW5nbGUgYWN0aW9uIG9yIGxvYWRlciwgYW5kIHdlIGFyZSByZXR1cm5pbmcgdGhlXG4gICAqIHJldHVybmVkIHZhbHVlIGRpcmVjdGx5LiAgSW4gbW9zdCBjYXNlcywgdGhpcyB3aWxsIGJlIGEgUmVzcG9uc2UgcmV0dXJuZWRcbiAgICogZnJvbSB0aGUgYWN0aW9uL2xvYWRlciwgYnV0IGl0IG1heSBiZSBhIHByaW1pdGl2ZSBvciBvdGhlciB2YWx1ZSBhcyB3ZWxsIC1cbiAgICogYW5kIGluIHN1Y2ggY2FzZXMgdGhlIGNhbGxpbmcgY29udGV4dCBzaG91bGQgaGFuZGxlIHRoYXQgYWNjb3JkaW5nbHkuXG4gICAqXG4gICAqIFdlIGRvIHJlc3BlY3QgdGhlIHRocm93L3JldHVybiBkaWZmZXJlbnRpYXRpb24sIHNvIGlmIGFuIGFjdGlvbi9sb2FkZXJcbiAgICogdGhyb3dzLCB0aGVuIHRoaXMgbWV0aG9kIHdpbGwgdGhyb3cgdGhlIHZhbHVlLiAgVGhpcyBpcyBpbXBvcnRhbnQgc28gd2VcbiAgICogY2FuIGRvIHByb3BlciBib3VuZGFyeSBpZGVudGlmaWNhdGlvbiBpbiBSZW1peCB3aGVyZSBhIHRocm93biBSZXNwb25zZVxuICAgKiBtdXN0IGdvIHRvIHRoZSBDYXRjaCBCb3VuZGFyeSBidXQgYSByZXR1cm5lZCBSZXNwb25zZSBpcyBoYXBweS1wYXRoLlxuICAgKlxuICAgKiBPbmUgdGhpbmcgdG8gbm90ZSBpcyB0aGF0IGFueSBSb3V0ZXItaW5pdGlhdGVkIEVycm9ycyB0aGF0IG1ha2Ugc2Vuc2VcbiAgICogdG8gYXNzb2NpYXRlIHdpdGggYSBzdGF0dXMgY29kZSB3aWxsIGJlIHRocm93biBhcyBhbiBFcnJvclJlc3BvbnNlXG4gICAqIGluc3RhbmNlIHdoaWNoIGluY2x1ZGUgdGhlIHJhdyBFcnJvciwgc3VjaCB0aGF0IHRoZSBjYWxsaW5nIGNvbnRleHQgY2FuXG4gICAqIHNlcmlhbGl6ZSB0aGUgZXJyb3IgYXMgdGhleSBzZWUgZml0IHdoaWxlIGluY2x1ZGluZyB0aGUgcHJvcGVyIHJlc3BvbnNlXG4gICAqIGNvZGUuICBFeGFtcGxlcyBoZXJlIGFyZSA0MDQgYW5kIDQwNSBlcnJvcnMgdGhhdCBvY2N1ciBwcmlvciB0byByZWFjaGluZ1xuICAgKiBhbnkgdXNlci1kZWZpbmVkIGxvYWRlcnMuXG4gICAqL1xuICBhc3luYyBmdW5jdGlvbiBxdWVyeVJvdXRlKHJlcXVlc3QsIF90ZW1wNCkge1xuICAgIGxldCB7XG4gICAgICByb3V0ZUlkLFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9ID0gX3RlbXA0ID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wNDtcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kO1xuICAgIGxldCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFwiXCIsIGNyZWF0ZVBhdGgodXJsKSwgbnVsbCwgXCJkZWZhdWx0XCIpO1xuICAgIGxldCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMoZGF0YVJvdXRlcywgbG9jYXRpb24sIGJhc2VuYW1lKTtcbiAgICAvLyBTU1Igc3VwcG9ydHMgSEVBRCByZXF1ZXN0cyB3aGlsZSBTUEEgZG9lc24ndFxuICAgIGlmICghaXNWYWxpZE1ldGhvZChtZXRob2QpICYmIG1ldGhvZCAhPT0gXCJIRUFEXCIgJiYgbWV0aG9kICE9PSBcIk9QVElPTlNcIikge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgbWV0aG9kXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgbWF0Y2ggPSByb3V0ZUlkID8gbWF0Y2hlcy5maW5kKG0gPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkgOiBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG4gICAgaWYgKHJvdXRlSWQgJiYgIW1hdGNoKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMywge1xuICAgICAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoKSB7XG4gICAgICAvLyBUaGlzIHNob3VsZCBuZXZlciBoaXQgSSBkb24ndCB0aGluaz9cbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7XG4gICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwocmVxdWVzdCwgbG9jYXRpb24sIG1hdGNoZXMsIHJlcXVlc3RDb250ZXh0LCBtYXRjaCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9ycyA/IE9iamVjdC52YWx1ZXMocmVzdWx0LmVycm9ycylbMF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIElmIHdlIGdvdCBiYWNrIHJlc3VsdC5lcnJvcnMsIHRoYXQgbWVhbnMgdGhlIGxvYWRlci9hY3Rpb24gdGhyZXdcbiAgICAgIC8vIF9zb21ldGhpbmdfIHRoYXQgd2Fzbid0IGEgUmVzcG9uc2UsIGJ1dCBpdCdzIG5vdCBndWFyYW50ZWVkL3JlcXVpcmVkXG4gICAgICAvLyB0byBiZSBhbiBgaW5zdGFuY2VvZiBFcnJvcmAgZWl0aGVyLCBzbyB3ZSBoYXZlIHRvIHVzZSB0aHJvdyBoZXJlIHRvXG4gICAgICAvLyBwcmVzZXJ2ZSB0aGUgXCJlcnJvclwiIHN0YXRlIG91dHNpZGUgb2YgcXVlcnlJbXBsLlxuICAgICAgdGhyb3cgZXJyb3I7XG4gICAgfVxuICAgIC8vIFBpY2sgb2ZmIHRoZSByaWdodCBzdGF0ZSB2YWx1ZSB0byByZXR1cm5cbiAgICBpZiAocmVzdWx0LmFjdGlvbkRhdGEpIHtcbiAgICAgIHJldHVybiBPYmplY3QudmFsdWVzKHJlc3VsdC5hY3Rpb25EYXRhKVswXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICB2YXIgX3Jlc3VsdCRhY3RpdmVEZWZlcnJlO1xuICAgICAgbGV0IGRhdGEgPSBPYmplY3QudmFsdWVzKHJlc3VsdC5sb2FkZXJEYXRhKVswXTtcbiAgICAgIGlmICgoX3Jlc3VsdCRhY3RpdmVEZWZlcnJlID0gcmVzdWx0LmFjdGl2ZURlZmVycmVkcykgIT0gbnVsbCAmJiBfcmVzdWx0JGFjdGl2ZURlZmVycmVbbWF0Y2gucm91dGUuaWRdKSB7XG4gICAgICAgIGRhdGFbVU5TQUZFX0RFRkVSUkVEX1NZTUJPTF0gPSByZXN1bHQuYWN0aXZlRGVmZXJyZWRzW21hdGNoLnJvdXRlLmlkXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChyZXF1ZXN0LCBsb2NhdGlvbiwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpIHtcbiAgICBpbnZhcmlhbnQocmVxdWVzdC5zaWduYWwsIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIik7XG4gICAgdHJ5IHtcbiAgICAgIGlmIChpc011dGF0aW9uTWV0aG9kKHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBzdWJtaXQocmVxdWVzdCwgbWF0Y2hlcywgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksIHJlcXVlc3RDb250ZXh0LCByb3V0ZU1hdGNoICE9IG51bGwpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gpO1xuICAgICAgcmV0dXJuIGlzUmVzcG9uc2UocmVzdWx0KSA/IHJlc3VsdCA6IF9leHRlbmRzKHt9LCByZXN1bHQsIHtcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgYWN0aW9uSGVhZGVyczoge31cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHRocmV3L3JldHVybmVkIGEgUmVzcG9uc2UgaW4gY2FsbExvYWRlck9yQWN0aW9uLCB3ZSB0aHJvd1xuICAgICAgLy8gaXQgdG8gYmFpbCBvdXQgYW5kIHRoZW4gcmV0dXJuIG9yIHRocm93IGhlcmUgYmFzZWQgb24gd2hldGhlciB0aGUgdXNlclxuICAgICAgLy8gcmV0dXJuZWQgb3IgdGhyZXdcbiAgICAgIGlmIChpc1F1ZXJ5Um91dGVSZXNwb25zZShlKSkge1xuICAgICAgICBpZiAoZS50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgZS5yZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZS5yZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZnVuY3Rpb24gc3VibWl0KHJlcXVlc3QsIG1hdGNoZXMsIGFjdGlvbk1hdGNoLCByZXF1ZXN0Q29udGV4dCwgaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICBsZXQgcmVzdWx0O1xuICAgIGlmICghYWN0aW9uTWF0Y2gucm91dGUuYWN0aW9uICYmICFhY3Rpb25NYXRjaC5yb3V0ZS5sYXp5KSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IGFjdGlvbk1hdGNoLnJvdXRlLmlkXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3JcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGNhbGxMb2FkZXJPckFjdGlvbihcImFjdGlvblwiLCByZXF1ZXN0LCBhY3Rpb25NYXRjaCwgbWF0Y2hlcywgbWFuaWZlc3QsIG1hcFJvdXRlUHJvcGVydGllcywgYmFzZW5hbWUsIGZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aCwge1xuICAgICAgICBpc1N0YXRpY1JlcXVlc3Q6IHRydWUsXG4gICAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgICByZXF1ZXN0Q29udGV4dFxuICAgICAgfSk7XG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1ldGhvZCArIFwiKCkgY2FsbCBhYm9ydGVkOiBcIiArIHJlcXVlc3QubWV0aG9kICsgXCIgXCIgKyByZXF1ZXN0LnVybCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFVoaGhoIC0gdGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLCB3ZSBzaG91bGQgYWx3YXlzIHRocm93IHRoZXNlIGZyb21cbiAgICAgIC8vIGNhbGxMb2FkZXJPckFjdGlvbiwgYnV0IHRoZSB0eXBlIG5hcnJvd2luZyBoZXJlIGtlZXBzIFRTIGhhcHB5IGFuZCB3ZVxuICAgICAgLy8gY2FuIGdldCBiYWNrIG9uIHRoZSBcInRocm93IGFsbCByZWRpcmVjdCByZXNwb25zZXNcIiB0cmFpbiBoZXJlIHNob3VsZFxuICAgICAgLy8gdGhpcyBldmVyIGhhcHBlbiA6L1xuICAgICAgdGhyb3cgbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAgICAgc3RhdHVzOiByZXN1bHQuc3RhdHVzLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgTG9jYXRpb246IHJlc3VsdC5sb2NhdGlvblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IGVycm9yID0gZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHtcbiAgICAgICAgdHlwZTogXCJkZWZlci1hY3Rpb25cIlxuICAgICAgfSk7XG4gICAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG4gICAgICByZXN1bHQgPSB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZXJyb3IsXG4gICAgICAgIGVycm9yXG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QpIHtcbiAgICAgIC8vIE5vdGU6IFRoaXMgc2hvdWxkIG9ubHkgYmUgbm9uLVJlc3BvbnNlIHZhbHVlcyBpZiB3ZSBnZXQgaGVyZSwgc2luY2VcbiAgICAgIC8vIGlzUm91dGVSZXF1ZXN0IHNob3VsZCB0aHJvdyBhbnkgUmVzcG9uc2UgcmVjZWl2ZWQgaW4gY2FsbExvYWRlck9yQWN0aW9uXG4gICAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGFcbiAgICAgICAgfSxcbiAgICAgICAgZXJyb3JzOiBudWxsLFxuICAgICAgICAvLyBOb3RlOiBzdGF0dXNDb2RlICsgaGVhZGVycyBhcmUgdW51c2VkIGhlcmUgc2luY2UgcXVlcnlSb3V0ZSB3aWxsXG4gICAgICAgIC8vIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIG9yIHZhbHVlXG4gICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIFN0b3JlIG9mZiB0aGUgcGVuZGluZyBlcnJvciAtIHdlIHVzZSBpdCB0byBkZXRlcm1pbmUgd2hpY2ggbG9hZGVyc1xuICAgICAgLy8gdG8gY2FsbCBhbmQgd2lsbCBjb21taXQgaXQgd2hlbiB3ZSBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvblxuICAgICAgbGV0IGJvdW5kYXJ5TWF0Y2ggPSBmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMsIGFjdGlvbk1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShyZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCwgdW5kZWZpbmVkLCB7XG4gICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yXG4gICAgICB9KTtcbiAgICAgIC8vIGFjdGlvbiBzdGF0dXMgY29kZXMgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbG9hZGVyIHN0YXR1cyBjb2Rlc1xuICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCB7XG4gICAgICAgIHN0YXR1c0NvZGU6IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwLFxuICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiBfZXh0ZW5kcyh7fSwgcmVzdWx0LmhlYWRlcnMgPyB7XG4gICAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmhlYWRlcnNcbiAgICAgICAgfSA6IHt9KVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbFxuICAgIH0pO1xuICAgIGxldCBjb250ZXh0ID0gYXdhaXQgbG9hZFJvdXRlRGF0YShsb2FkZXJSZXF1ZXN0LCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBjb250ZXh0LCByZXN1bHQuc3RhdHVzQ29kZSA/IHtcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXNDb2RlXG4gICAgfSA6IHt9LCB7XG4gICAgICBhY3Rpb25EYXRhOiB7XG4gICAgICAgIFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczogX2V4dGVuZHMoe30sIHJlc3VsdC5oZWFkZXJzID8ge1xuICAgICAgICBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfSA6IHt9KVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGxvYWRSb3V0ZURhdGEocmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQsIHJvdXRlTWF0Y2gsIHBlbmRpbmdBY3Rpb25FcnJvcikge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcbiAgICAvLyBTaG9ydCBjaXJjdWl0IGlmIHdlIGhhdmUgbm8gbG9hZGVycyB0byBydW4gKHF1ZXJ5Um91dGUoKSlcbiAgICBpZiAoaXNSb3V0ZVJlcXVlc3QgJiYgIShyb3V0ZU1hdGNoICE9IG51bGwgJiYgcm91dGVNYXRjaC5yb3V0ZS5sb2FkZXIpICYmICEocm91dGVNYXRjaCAhPSBudWxsICYmIHJvdXRlTWF0Y2gucm91dGUubGF6eSkpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogcm91dGVNYXRjaCA9PSBudWxsID8gdm9pZCAwIDogcm91dGVNYXRjaC5yb3V0ZS5pZFxuICAgICAgfSk7XG4gICAgfVxuICAgIGxldCByZXF1ZXN0TWF0Y2hlcyA9IHJvdXRlTWF0Y2ggPyBbcm91dGVNYXRjaF0gOiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBPYmplY3Qua2V5cyhwZW5kaW5nQWN0aW9uRXJyb3IgfHwge30pWzBdKTtcbiAgICBsZXQgbWF0Y2hlc1RvTG9hZCA9IHJlcXVlc3RNYXRjaGVzLmZpbHRlcihtID0+IG0ucm91dGUubG9hZGVyIHx8IG0ucm91dGUubGF6eSk7XG4gICAgLy8gU2hvcnQgY2lyY3VpdCBpZiB3ZSBoYXZlIG5vIGxvYWRlcnMgdG8gcnVuIChxdWVyeSgpKVxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgLy8gQWRkIGEgbnVsbCBmb3IgYWxsIG1hdGNoZWQgcm91dGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICAgICAgbG9hZGVyRGF0YTogbWF0Y2hlcy5yZWR1Y2UoKGFjYywgbSkgPT4gT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBbbS5yb3V0ZS5pZF06IG51bGxcbiAgICAgICAgfSksIHt9KSxcbiAgICAgICAgZXJyb3JzOiBwZW5kaW5nQWN0aW9uRXJyb3IgfHwgbnVsbCxcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBsb2FkZXJIZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsXG4gICAgICB9O1xuICAgIH1cbiAgICBsZXQgcmVzdWx0cyA9IGF3YWl0IFByb21pc2UuYWxsKFsuLi5tYXRjaGVzVG9Mb2FkLm1hcChtYXRjaCA9PiBjYWxsTG9hZGVyT3JBY3Rpb24oXCJsb2FkZXJcIiwgcmVxdWVzdCwgbWF0Y2gsIG1hdGNoZXMsIG1hbmlmZXN0LCBtYXBSb3V0ZVByb3BlcnRpZXMsIGJhc2VuYW1lLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgsIHtcbiAgICAgIGlzU3RhdGljUmVxdWVzdDogdHJ1ZSxcbiAgICAgIGlzUm91dGVSZXF1ZXN0LFxuICAgICAgcmVxdWVzdENvbnRleHRcbiAgICB9KSldKTtcbiAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgbGV0IG1ldGhvZCA9IGlzUm91dGVSZXF1ZXN0ID8gXCJxdWVyeVJvdXRlXCIgOiBcInF1ZXJ5XCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWV0aG9kICsgXCIoKSBjYWxsIGFib3J0ZWQ6IFwiICsgcmVxdWVzdC5tZXRob2QgKyBcIiBcIiArIHJlcXVlc3QudXJsKTtcbiAgICB9XG4gICAgLy8gUHJvY2VzcyBhbmQgY29tbWl0IG91dHB1dCBmcm9tIGxvYWRlcnNcbiAgICBsZXQgYWN0aXZlRGVmZXJyZWRzID0gbmV3IE1hcCgpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShtYXRjaGVzLCBtYXRjaGVzVG9Mb2FkLCByZXN1bHRzLCBwZW5kaW5nQWN0aW9uRXJyb3IsIGFjdGl2ZURlZmVycmVkcyk7XG4gICAgLy8gQWRkIGEgbnVsbCBmb3IgYW55IG5vbi1sb2FkZXIgbWF0Y2hlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgbGV0IGV4ZWN1dGVkTG9hZGVycyA9IG5ldyBTZXQobWF0Y2hlc1RvTG9hZC5tYXAobWF0Y2ggPT4gbWF0Y2gucm91dGUuaWQpKTtcbiAgICBtYXRjaGVzLmZvckVhY2gobWF0Y2ggPT4ge1xuICAgICAgaWYgKCFleGVjdXRlZExvYWRlcnMuaGFzKG1hdGNoLnJvdXRlLmlkKSkge1xuICAgICAgICBjb250ZXh0LmxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6IGFjdGl2ZURlZmVycmVkcy5zaXplID4gMCA/IE9iamVjdC5mcm9tRW50cmllcyhhY3RpdmVEZWZlcnJlZHMuZW50cmllcygpKSA6IG51bGxcbiAgICB9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZVxuICB9O1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhlbHBlcnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAqIEdpdmVuIGFuIGV4aXN0aW5nIFN0YXRpY0hhbmRsZXJDb250ZXh0IGFuZCBhbiBlcnJvciB0aHJvd24gYXQgcmVuZGVyIHRpbWUsXG4gKiBwcm92aWRlIGFuIHVwZGF0ZWQgU3RhdGljSGFuZGxlckNvbnRleHQgc3VpdGFibGUgZm9yIGEgc2Vjb25kIFNTUiByZW5kZXJcbiAqL1xuZnVuY3Rpb24gZ2V0U3RhdGljQ29udGV4dEZyb21FcnJvcihyb3V0ZXMsIGNvbnRleHQsIGVycm9yKSB7XG4gIGxldCBuZXdDb250ZXh0ID0gX2V4dGVuZHMoe30sIGNvbnRleHQsIHtcbiAgICBzdGF0dXNDb2RlOiA1MDAsXG4gICAgZXJyb3JzOiB7XG4gICAgICBbY29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCB8fCByb3V0ZXNbMF0uaWRdOiBlcnJvclxuICAgIH1cbiAgfSk7XG4gIHJldHVybiBuZXdDb250ZXh0O1xufVxuZnVuY3Rpb24gaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSB7XG4gIHJldHVybiBvcHRzICE9IG51bGwgJiYgKFwiZm9ybURhdGFcIiBpbiBvcHRzICYmIG9wdHMuZm9ybURhdGEgIT0gbnVsbCB8fCBcImJvZHlcIiBpbiBvcHRzICYmIG9wdHMuYm9keSAhPT0gdW5kZWZpbmVkKTtcbn1cbmZ1bmN0aW9uIG5vcm1hbGl6ZVRvKGxvY2F0aW9uLCBtYXRjaGVzLCBiYXNlbmFtZSwgcHJlcGVuZEJhc2VuYW1lLCB0bywgdjdfcmVsYXRpdmVTcGxhdFBhdGgsIGZyb21Sb3V0ZUlkLCByZWxhdGl2ZSkge1xuICBsZXQgY29udGV4dHVhbE1hdGNoZXM7XG4gIGxldCBhY3RpdmVSb3V0ZU1hdGNoO1xuICBpZiAoZnJvbVJvdXRlSWQpIHtcbiAgICAvLyBHcmFiIG1hdGNoZXMgdXAgdG8gdGhlIGNhbGxpbmcgcm91dGUgc28gb3VyIHJvdXRlLXJlbGF0aXZlIGxvZ2ljIGlzXG4gICAgLy8gcmVsYXRpdmUgdG8gdGhlIGNvcnJlY3Qgc291cmNlIHJvdXRlXG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBbXTtcbiAgICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgICBjb250ZXh0dWFsTWF0Y2hlcy5wdXNoKG1hdGNoKTtcbiAgICAgIGlmIChtYXRjaC5yb3V0ZS5pZCA9PT0gZnJvbVJvdXRlSWQpIHtcbiAgICAgICAgYWN0aXZlUm91dGVNYXRjaCA9IG1hdGNoO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29udGV4dHVhbE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgIGFjdGl2ZVJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gUmVzb2x2ZSB0aGUgcmVsYXRpdmUgcGF0aFxuICBsZXQgcGF0aCA9IHJlc29sdmVUbyh0byA/IHRvIDogXCIuXCIsIGdldFJlc29sdmVUb01hdGNoZXMoY29udGV4dHVhbE1hdGNoZXMsIHY3X3JlbGF0aXZlU3BsYXRQYXRoKSwgc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IGxvY2F0aW9uLnBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuICAvLyBXaGVuIGB0b2AgaXMgbm90IHNwZWNpZmllZCB3ZSBpbmhlcml0IHNlYXJjaC9oYXNoIGZyb20gdGhlIGN1cnJlbnRcbiAgLy8gbG9jYXRpb24sIHVubGlrZSB3aGVuIHRvPVwiLlwiIGFuZCB3ZSBqdXN0IGluaGVyaXQgdGhlIHBhdGguXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgaWYgKHRvID09IG51bGwpIHtcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICBwYXRoLmhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuICB9XG4gIC8vIEFkZCBhbiA/aW5kZXggcGFyYW0gZm9yIG1hdGNoZWQgaW5kZXggcm91dGVzIGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBvbmVcbiAgaWYgKCh0byA9PSBudWxsIHx8IHRvID09PSBcIlwiIHx8IHRvID09PSBcIi5cIikgJiYgYWN0aXZlUm91dGVNYXRjaCAmJiBhY3RpdmVSb3V0ZU1hdGNoLnJvdXRlLmluZGV4ICYmICFoYXNOYWtlZEluZGV4UXVlcnkocGF0aC5zZWFyY2gpKSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUuICBJZlxuICAvLyB0aGlzIGlzIGEgcm9vdCBuYXZpZ2F0aW9uLCB0aGVuIGp1c3QgdXNlIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzXG4gIC8vIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhIHRyYWlsaW5nIHNsYXNoXG4gIC8vIG9uIHJvb3QgYWN0aW9uc1xuICBpZiAocHJlcGVuZEJhc2VuYW1lICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKG5vcm1hbGl6ZUZvcm1NZXRob2QsIGlzRmV0Y2hlciwgcGF0aCwgb3B0cykge1xuICAvLyBSZXR1cm4gbG9jYXRpb24gdmVyYmF0aW0gb24gbm9uLXN1Ym1pc3Npb24gbmF2aWdhdGlvbnNcbiAgaWYgKCFvcHRzIHx8ICFpc1N1Ym1pc3Npb25OYXZpZ2F0aW9uKG9wdHMpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGhcbiAgICB9O1xuICB9XG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kXG4gICAgICB9KVxuICAgIH07XG4gIH1cbiAgbGV0IGdldEludmFsaWRCb2R5RXJyb3IgPSAoKSA9PiAoe1xuICAgIHBhdGgsXG4gICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDAwLCB7XG4gICAgICB0eXBlOiBcImludmFsaWQtYm9keVwiXG4gICAgfSlcbiAgfSk7XG4gIC8vIENyZWF0ZSBhIFN1Ym1pc3Npb24gb24gbm9uLUdFVCBuYXZpZ2F0aW9uc1xuICBsZXQgcmF3Rm9ybU1ldGhvZCA9IG9wdHMuZm9ybU1ldGhvZCB8fCBcImdldFwiO1xuICBsZXQgZm9ybU1ldGhvZCA9IG5vcm1hbGl6ZUZvcm1NZXRob2QgPyByYXdGb3JtTWV0aG9kLnRvVXBwZXJDYXNlKCkgOiByYXdGb3JtTWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIGxldCBmb3JtQWN0aW9uID0gc3RyaXBIYXNoRnJvbVBhdGgocGF0aCk7XG4gIGlmIChvcHRzLmJvZHkgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gdGV4dCBvbmx5IHN1cHBvcnQgUE9TVC9QVVQvUEFUQ0gvREVMRVRFIHN1Ym1pc3Npb25zXG4gICAgICBpZiAoIWlzTXV0YXRpb25NZXRob2QoZm9ybU1ldGhvZCkpIHtcbiAgICAgICAgcmV0dXJuIGdldEludmFsaWRCb2R5RXJyb3IoKTtcbiAgICAgIH1cbiAgICAgIGxldCB0ZXh0ID0gdHlwZW9mIG9wdHMuYm9keSA9PT0gXCJzdHJpbmdcIiA/IG9wdHMuYm9keSA6IG9wdHMuYm9keSBpbnN0YW5jZW9mIEZvcm1EYXRhIHx8IG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcyA/XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNwbGFpbi10ZXh0LWZvcm0tZGF0YVxuICAgICAgQXJyYXkuZnJvbShvcHRzLmJvZHkuZW50cmllcygpKS5yZWR1Y2UoKGFjYywgX3JlZjMpID0+IHtcbiAgICAgICAgbGV0IFtuYW1lLCB2YWx1ZV0gPSBfcmVmMztcbiAgICAgICAgcmV0dXJuIFwiXCIgKyBhY2MgKyBuYW1lICsgXCI9XCIgKyB2YWx1ZSArIFwiXFxuXCI7XG4gICAgICB9LCBcIlwiKSA6IFN0cmluZyhvcHRzLmJvZHkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgcGF0aCxcbiAgICAgICAgc3VibWlzc2lvbjoge1xuICAgICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICBmb3JtRW5jVHlwZTogb3B0cy5mb3JtRW5jVHlwZSxcbiAgICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICAgIGpzb246IHVuZGVmaW5lZCxcbiAgICAgICAgICB0ZXh0XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSBlbHNlIGlmIChvcHRzLmZvcm1FbmNUeXBlID09PSBcImFwcGxpY2F0aW9uL2pzb25cIikge1xuICAgICAgLy8ganNvbiBvbmx5IHN1cHBvcnRzIFBPU1QvUFVUL1BBVENIL0RFTEVURSBzdWJtaXNzaW9uc1xuICAgICAgaWYgKCFpc011dGF0aW9uTWV0aG9kKGZvcm1NZXRob2QpKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBsZXQganNvbiA9IHR5cGVvZiBvcHRzLmJvZHkgPT09IFwic3RyaW5nXCIgPyBKU09OLnBhcnNlKG9wdHMuYm9keSkgOiBvcHRzLmJvZHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgICBmb3JtTWV0aG9kLFxuICAgICAgICAgICAgZm9ybUFjdGlvbixcbiAgICAgICAgICAgIGZvcm1FbmNUeXBlOiBvcHRzLmZvcm1FbmNUeXBlLFxuICAgICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGpzb24sXG4gICAgICAgICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGludmFyaWFudCh0eXBlb2YgRm9ybURhdGEgPT09IFwiZnVuY3Rpb25cIiwgXCJGb3JtRGF0YSBpcyBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnRcIik7XG4gIGxldCBzZWFyY2hQYXJhbXM7XG4gIGxldCBmb3JtRGF0YTtcbiAgaWYgKG9wdHMuZm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTtcbiAgICBmb3JtRGF0YSA9IG9wdHMuZm9ybURhdGE7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5IGluc3RhbmNlb2YgRm9ybURhdGEpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgIGZvcm1EYXRhID0gb3B0cy5ib2R5O1xuICB9IGVsc2UgaWYgKG9wdHMuYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgIHNlYXJjaFBhcmFtcyA9IG9wdHMuYm9keTtcbiAgICBmb3JtRGF0YSA9IGNvbnZlcnRTZWFyY2hQYXJhbXNUb0Zvcm1EYXRhKHNlYXJjaFBhcmFtcyk7XG4gIH0gZWxzZSBpZiAob3B0cy5ib2R5ID09IG51bGwpIHtcbiAgICBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKCk7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgfSBlbHNlIHtcbiAgICB0cnkge1xuICAgICAgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhvcHRzLmJvZHkpO1xuICAgICAgZm9ybURhdGEgPSBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBnZXRJbnZhbGlkQm9keUVycm9yKCk7XG4gICAgfVxuICB9XG4gIGxldCBzdWJtaXNzaW9uID0ge1xuICAgIGZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogb3B0cyAmJiBvcHRzLmZvcm1FbmNUeXBlIHx8IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgZm9ybURhdGEsXG4gICAganNvbjogdW5kZWZpbmVkLFxuICAgIHRleHQ6IHVuZGVmaW5lZFxuICB9O1xuICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgfTtcbiAgfVxuICAvLyBGbGF0dGVuIHN1Ym1pc3Npb24gb250byBVUkxTZWFyY2hQYXJhbXMgZm9yIEdFVCBzdWJtaXNzaW9uc1xuICBsZXQgcGFyc2VkUGF0aCA9IHBhcnNlUGF0aChwYXRoKTtcbiAgLy8gT24gR0VUIG5hdmlnYXRpb24gc3VibWlzc2lvbnMgd2UgY2FuIGRyb3AgdGhlID9pbmRleCBwYXJhbSBmcm9tIHRoZVxuICAvLyByZXN1bHRpbmcgbG9jYXRpb24gc2luY2UgYWxsIGxvYWRlcnMgd2lsbCBydW4uICBCdXQgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnNcbiAgLy8gb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIHNvIHdlIG5lZWQgdG8gcHJlc2VydmUgYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG4gIHBhcnNlZFBhdGguc2VhcmNoID0gXCI/XCIgKyBzZWFyY2hQYXJhbXM7XG4gIHJldHVybiB7XG4gICAgcGF0aDogY3JlYXRlUGF0aChwYXJzZWRQYXRoKSxcbiAgICBzdWJtaXNzaW9uXG4gIH07XG59XG4vLyBGaWx0ZXIgb3V0IGFsbCByb3V0ZXMgYmVsb3cgYW55IGNhdWdodCBlcnJvciBhcyB0aGV5IGFyZW4ndCBnb2luZyB0b1xuLy8gcmVuZGVyIHNvIHdlIGRvbid0IG5lZWQgdG8gbG9hZCB0aGVtXG5mdW5jdGlvbiBnZXRMb2FkZXJNYXRjaGVzVW50aWxCb3VuZGFyeShtYXRjaGVzLCBib3VuZGFyeUlkKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KG0gPT4gbS5yb3V0ZS5pZCA9PT0gYm91bmRhcnlJZCk7XG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIGJvdW5kYXJ5TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgaW5kZXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYm91bmRhcnlNYXRjaGVzO1xufVxuZnVuY3Rpb24gZ2V0TWF0Y2hlc1RvTG9hZChoaXN0b3J5LCBzdGF0ZSwgbWF0Y2hlcywgc3VibWlzc2lvbiwgbG9jYXRpb24sIGlzSW5pdGlhbExvYWQsIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQsIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLCBjYW5jZWxsZWRGZXRjaGVyTG9hZHMsIGRlbGV0ZWRGZXRjaGVycywgZmV0Y2hMb2FkTWF0Y2hlcywgZmV0Y2hSZWRpcmVjdElkcywgcm91dGVzVG9Vc2UsIGJhc2VuYW1lLCBwZW5kaW5nQWN0aW9uRGF0YSwgcGVuZGluZ0Vycm9yKSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF0gOiBwZW5kaW5nQWN0aW9uRGF0YSA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgY3VycmVudFVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0YXRlLmxvY2F0aW9uKTtcbiAgbGV0IG5leHRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChsb2NhdGlvbik7XG4gIC8vIFBpY2sgbmF2aWdhdGlvbiBtYXRjaGVzIHRoYXQgYXJlIG5ldC1uZXcgb3IgcXVhbGlmeSBmb3IgcmV2YWxpZGF0aW9uXG4gIGxldCBib3VuZGFyeUlkID0gcGVuZGluZ0Vycm9yID8gT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXSA6IHVuZGVmaW5lZDtcbiAgbGV0IGJvdW5kYXJ5TWF0Y2hlcyA9IGdldExvYWRlck1hdGNoZXNVbnRpbEJvdW5kYXJ5KG1hdGNoZXMsIGJvdW5kYXJ5SWQpO1xuICBsZXQgbmF2aWdhdGlvbk1hdGNoZXMgPSBib3VuZGFyeU1hdGNoZXMuZmlsdGVyKChtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBsZXQge1xuICAgICAgcm91dGVcbiAgICB9ID0gbWF0Y2g7XG4gICAgaWYgKHJvdXRlLmxhenkpIHtcbiAgICAgIC8vIFdlIGhhdmVuJ3QgbG9hZGVkIHRoaXMgcm91dGUgeWV0IHNvIHdlIGRvbid0IGtub3cgaWYgaXQncyBnb3QgYSBsb2FkZXIhXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKHJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0luaXRpYWxMb2FkKSB7XG4gICAgICBpZiAocm91dGUubG9hZGVyLmh5ZHJhdGUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJiAoXG4gICAgICAvLyBEb24ndCByZS1ydW4gaWYgdGhlIGxvYWRlciByYW4gYW5kIHRocmV3IGFuIGVycm9yXG4gICAgICAhc3RhdGUuZXJyb3JzIHx8IHN0YXRlLmVycm9yc1tyb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIC8vIEFsd2F5cyBjYWxsIHRoZSBsb2FkZXIgb24gbmV3IHJvdXRlIGluc3RhbmNlcyBhbmQgcGVuZGluZyBkZWZlciBjYW5jZWxsYXRpb25zXG4gICAgaWYgKGlzTmV3TG9hZGVyKHN0YXRlLmxvYWRlckRhdGEsIHN0YXRlLm1hdGNoZXNbaW5kZXhdLCBtYXRjaCkgfHwgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMuc29tZShpZCA9PiBpZCA9PT0gbWF0Y2gucm91dGUuaWQpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG4gICAgcmV0dXJuIHNob3VsZFJldmFsaWRhdGVMb2FkZXIobWF0Y2gsIF9leHRlbmRzKHtcbiAgICAgIGN1cnJlbnRVcmwsXG4gICAgICBjdXJyZW50UGFyYW1zOiBjdXJyZW50Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICBuZXh0VXJsLFxuICAgICAgbmV4dFBhcmFtczogbmV4dFJvdXRlTWF0Y2gucGFyYW1zXG4gICAgfSwgc3VibWlzc2lvbiwge1xuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6XG4gICAgICAvLyBGb3JjZWQgcmV2YWxpZGF0aW9uIGR1ZSB0byBzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgICBpc1JldmFsaWRhdGlvblJlcXVpcmVkIHx8XG4gICAgICAvLyBDbGlja2VkIHRoZSBzYW1lIGxpbmssIHJlc3VibWl0dGVkIGEgR0VUIGZvcm1cbiAgICAgIGN1cnJlbnRVcmwucGF0aG5hbWUgKyBjdXJyZW50VXJsLnNlYXJjaCA9PT0gbmV4dFVybC5wYXRobmFtZSArIG5leHRVcmwuc2VhcmNoIHx8XG4gICAgICAvLyBTZWFyY2ggcGFyYW1zIGFmZmVjdCBhbGwgbG9hZGVyc1xuICAgICAgY3VycmVudFVybC5zZWFyY2ggIT09IG5leHRVcmwuc2VhcmNoIHx8IGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpXG4gICAgfSkpO1xuICB9KTtcbiAgLy8gUGljayBmZXRjaGVyLmxvYWRzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZFxuICBsZXQgcmV2YWxpZGF0aW5nRmV0Y2hlcnMgPSBbXTtcbiAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChmLCBrZXkpID0+IHtcbiAgICAvLyBEb24ndCByZXZhbGlkYXRlOlxuICAgIC8vICAtIG9uIGluaXRpYWwgbG9hZCAoc2hvdWxkbid0IGJlIGFueSBmZXRjaGVycyB0aGVuIGFueXdheSlcbiAgICAvLyAgLSBpZiBmZXRjaGVyIHdvbid0IGJlIHByZXNlbnQgaW4gdGhlIHN1YnNlcXVlbnQgcmVuZGVyXG4gICAgLy8gICAgLSBubyBsb25nZXIgbWF0Y2hlcyB0aGUgVVJMICh2N19mZXRjaGVyUGVyc2lzdD1mYWxzZSlcbiAgICAvLyAgICAtIHdhcyB1bm1vdW50ZWQgYnV0IHBlcnNpc3RlZCBkdWUgdG8gdjdfZmV0Y2hlclBlcnNpc3Q9dHJ1ZVxuICAgIGlmIChpc0luaXRpYWxMb2FkIHx8ICFtYXRjaGVzLnNvbWUobSA9PiBtLnJvdXRlLmlkID09PSBmLnJvdXRlSWQpIHx8IGRlbGV0ZWRGZXRjaGVycy5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgZmV0Y2hlck1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXNUb1VzZSwgZi5wYXRoLCBiYXNlbmFtZSk7XG4gICAgLy8gSWYgdGhlIGZldGNoZXIgcGF0aCBubyBsb25nZXIgbWF0Y2hlcywgcHVzaCBpdCBpbiB3aXRoIG51bGwgbWF0Y2hlcyBzb1xuICAgIC8vIHdlIGNhbiB0cmlnZ2VyIGEgNDA0IGluIGNhbGxMb2FkZXJzQW5kTWF5YmVSZXNvbHZlRGF0YS4gIE5vdGUgdGhpcyBpc1xuICAgIC8vIGN1cnJlbnRseSBvbmx5IGEgdXNlLWNhc2UgZm9yIFJlbWl4IEhNUiB3aGVyZSB0aGUgcm91dGUgdHJlZSBjYW4gY2hhbmdlXG4gICAgLy8gYXQgcnVudGltZSBhbmQgcmVtb3ZlIGEgcm91dGUgcHJldmlvdXNseSBsb2FkZWQgdmlhIGEgZmV0Y2hlclxuICAgIGlmICghZmV0Y2hlck1hdGNoZXMpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBudWxsLFxuICAgICAgICBtYXRjaDogbnVsbCxcbiAgICAgICAgY29udHJvbGxlcjogbnVsbFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFJldmFsaWRhdGluZyBmZXRjaGVycyBhcmUgZGVjb3VwbGVkIGZyb20gdGhlIHJvdXRlIG1hdGNoZXMgc2luY2UgdGhleVxuICAgIC8vIGxvYWQgZnJvbSBhIHN0YXRpYyBocmVmLiAgVGhleSByZXZhbGlkYXRlIGJhc2VkIG9uIGV4cGxpY2l0IHJldmFsaWRhdGlvblxuICAgIC8vIChzdWJtaXNzaW9uLCB1c2VSZXZhbGlkYXRvciwgb3IgWC1SZW1peC1SZXZhbGlkYXRlKVxuICAgIGxldCBmZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSk7XG4gICAgbGV0IGZldGNoZXJNYXRjaCA9IGdldFRhcmdldE1hdGNoKGZldGNoZXJNYXRjaGVzLCBmLnBhdGgpO1xuICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gZmFsc2U7XG4gICAgaWYgKGZldGNoUmVkaXJlY3RJZHMuaGFzKGtleSkpIHtcbiAgICAgIC8vIE5ldmVyIHRyaWdnZXIgYSByZXZhbGlkYXRpb24gb2YgYW4gYWN0aXZlbHkgcmVkaXJlY3RpbmcgZmV0Y2hlclxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoY2FuY2VsbGVkRmV0Y2hlckxvYWRzLmluY2x1ZGVzKGtleSkpIHtcbiAgICAgIC8vIEFsd2F5cyByZXZhbGlkYXRlIGlmIHRoZSBmZXRjaGVyIHdhcyBjYW5jZWxsZWRcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAoZmV0Y2hlciAmJiBmZXRjaGVyLnN0YXRlICE9PSBcImlkbGVcIiAmJiBmZXRjaGVyLmRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgdGhlIGZldGNoZXIgaGFzbid0IGV2ZXIgY29tcGxldGVkIGxvYWRpbmcgeWV0LCB0aGVuIHRoaXMgaXNuJ3QgYVxuICAgICAgLy8gcmV2YWxpZGF0aW9uLCBpdCB3b3VsZCBqdXN0IGJlIGEgYnJhbmQgbmV3IGxvYWQgaWYgYW4gZXhwbGljaXRcbiAgICAgIC8vIHJldmFsaWRhdGlvbiBpcyByZXF1aXJlZFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZSA9IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSBmYWxsIGJhY2sgb24gYW55IHVzZXItZGVmaW5lZCBzaG91bGRSZXZhbGlkYXRlLCBkZWZhdWx0aW5nXG4gICAgICAvLyB0byBleHBsaWNpdCByZXZhbGlkYXRpb25zIG9ubHlcbiAgICAgIHNob3VsZFJldmFsaWRhdGUgPSBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGZldGNoZXJNYXRjaCwgX2V4dGVuZHMoe1xuICAgICAgICBjdXJyZW50VXJsLFxuICAgICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgICBuZXh0VXJsLFxuICAgICAgICBuZXh0UGFyYW1zOiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zXG4gICAgICB9LCBzdWJtaXNzaW9uLCB7XG4gICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWRcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFJldmFsaWRhdGUpIHtcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLnB1c2goe1xuICAgICAgICBrZXksXG4gICAgICAgIHJvdXRlSWQ6IGYucm91dGVJZCxcbiAgICAgICAgcGF0aDogZi5wYXRoLFxuICAgICAgICBtYXRjaGVzOiBmZXRjaGVyTWF0Y2hlcyxcbiAgICAgICAgbWF0Y2g6IGZldGNoZXJNYXRjaCxcbiAgICAgICAgY29udHJvbGxlcjogbmV3IEFib3J0Q29udHJvbGxlcigpXG4gICAgICB9KTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gW25hdmlnYXRpb25NYXRjaGVzLCByZXZhbGlkYXRpbmdGZXRjaGVyc107XG59XG5mdW5jdGlvbiBpc05ld0xvYWRlcihjdXJyZW50TG9hZGVyRGF0YSwgY3VycmVudE1hdGNoLCBtYXRjaCkge1xuICBsZXQgaXNOZXcgPVxuICAvLyBbYV0gLT4gW2EsIGJdXG4gICFjdXJyZW50TWF0Y2ggfHxcbiAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICBtYXRjaC5yb3V0ZS5pZCAhPT0gY3VycmVudE1hdGNoLnJvdXRlLmlkO1xuICAvLyBIYW5kbGUgdGhlIGNhc2UgdGhhdCB3ZSBkb24ndCBoYXZlIGRhdGEgZm9yIGEgcmUtdXNlZCByb3V0ZSwgcG90ZW50aWFsbHlcbiAgLy8gZnJvbSBhIHByaW9yIGVycm9yIG9yIGZyb20gYSBjYW5jZWxsZWQgcGVuZGluZyBkZWZlcnJlZFxuICBsZXQgaXNNaXNzaW5nRGF0YSA9IGN1cnJlbnRMb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9PT0gdW5kZWZpbmVkO1xuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuZnVuY3Rpb24gaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpIHtcbiAgbGV0IGN1cnJlbnRQYXRoID0gY3VycmVudE1hdGNoLnJvdXRlLnBhdGg7XG4gIHJldHVybiAoXG4gICAgLy8gcGFyYW0gY2hhbmdlIGZvciB0aGlzIG1hdGNoLCAvdXNlcnMvMTIzIC0+IC91c2Vycy80NTZcbiAgICBjdXJyZW50TWF0Y2gucGF0aG5hbWUgIT09IG1hdGNoLnBhdGhuYW1lIHx8XG4gICAgLy8gc3BsYXQgcGFyYW0gY2hhbmdlZCwgd2hpY2ggaXMgbm90IHByZXNlbnQgaW4gbWF0Y2gucGF0aFxuICAgIC8vIGUuZy4gL2ZpbGVzL2ltYWdlcy9hdmF0YXIuanBnIC0+IGZpbGVzL2ZpbmFuY2VzLnhsc1xuICAgIGN1cnJlbnRQYXRoICE9IG51bGwgJiYgY3VycmVudFBhdGguZW5kc1dpdGgoXCIqXCIpICYmIGN1cnJlbnRNYXRjaC5wYXJhbXNbXCIqXCJdICE9PSBtYXRjaC5wYXJhbXNbXCIqXCJdXG4gICk7XG59XG5mdW5jdGlvbiBzaG91bGRSZXZhbGlkYXRlTG9hZGVyKGxvYWRlck1hdGNoLCBhcmcpIHtcbiAgaWYgKGxvYWRlck1hdGNoLnJvdXRlLnNob3VsZFJldmFsaWRhdGUpIHtcbiAgICBsZXQgcm91dGVDaG9pY2UgPSBsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKGFyZyk7XG4gICAgaWYgKHR5cGVvZiByb3V0ZUNob2ljZSA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgIHJldHVybiByb3V0ZUNob2ljZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cbi8qKlxuICogRXhlY3V0ZSByb3V0ZS5sYXp5KCkgbWV0aG9kcyB0byBsYXppbHkgbG9hZCByb3V0ZSBtb2R1bGVzIChsb2FkZXIsIGFjdGlvbixcbiAqIHNob3VsZFJldmFsaWRhdGUpIGFuZCB1cGRhdGUgdGhlIHJvdXRlTWFuaWZlc3QgaW4gcGxhY2Ugd2hpY2ggc2hhcmVzIG9iamVjdHNcbiAqIHdpdGggZGF0YVJvdXRlcyBzbyB0aG9zZSBnZXQgdXBkYXRlZCBhcyB3ZWxsLlxuICovXG5hc3luYyBmdW5jdGlvbiBsb2FkTGF6eVJvdXRlTW9kdWxlKHJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KSB7XG4gIGlmICghcm91dGUubGF6eSkge1xuICAgIHJldHVybjtcbiAgfVxuICBsZXQgbGF6eVJvdXRlID0gYXdhaXQgcm91dGUubGF6eSgpO1xuICAvLyBJZiB0aGUgbGF6eSByb3V0ZSBmdW5jdGlvbiB3YXMgZXhlY3V0ZWQgYW5kIHJlbW92ZWQgYnkgYW5vdGhlciBwYXJhbGxlbFxuICAvLyBjYWxsIHRoZW4gd2UgY2FuIHJldHVybiAtIGZpcnN0IGxhenkoKSB0byBmaW5pc2ggd2lucyBiZWNhdXNlIHRoZSByZXR1cm5cbiAgLy8gdmFsdWUgb2YgbGF6eSBpcyBleHBlY3RlZCB0byBiZSBzdGF0aWNcbiAgaWYgKCFyb3V0ZS5sYXp5KSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGxldCByb3V0ZVRvVXBkYXRlID0gbWFuaWZlc3Rbcm91dGUuaWRdO1xuICBpbnZhcmlhbnQocm91dGVUb1VwZGF0ZSwgXCJObyByb3V0ZSBmb3VuZCBpbiBtYW5pZmVzdFwiKTtcbiAgLy8gVXBkYXRlIHRoZSByb3V0ZSBpbiBwbGFjZS4gIFRoaXMgc2hvdWxkIGJlIHNhZmUgYmVjYXVzZSB0aGVyZSdzIG5vIHdheVxuICAvLyB3ZSBjb3VsZCB5ZXQgYmUgc2l0dGluZyBvbiB0aGlzIHJvdXRlIGFzIHdlIGNhbid0IGdldCB0aGVyZSB3aXRob3V0XG4gIC8vIHJlc29sdmluZyBsYXp5KCkgZmlyc3QuXG4gIC8vXG4gIC8vIFRoaXMgaXMgZGlmZmVyZW50IHRoYW4gdGhlIEhNUiBcInVwZGF0ZVwiIHVzZS1jYXNlIHdoZXJlIHdlIG1heSBhY3RpdmVseSBiZVxuICAvLyBvbiB0aGUgcm91dGUgYmVpbmcgdXBkYXRlZC4gIFRoZSBtYWluIGNvbmNlcm4gYm9pbHMgZG93biB0byBcImRvZXMgdGhpc1xuICAvLyBtdXRhdGlvbiBhZmZlY3QgYW55IG9uZ29pbmcgbmF2aWdhdGlvbnMgb3IgYW55IGN1cnJlbnQgc3RhdGUubWF0Y2hlc1xuICAvLyB2YWx1ZXM/XCIuICBJZiBub3QsIGl0IHNob3VsZCBiZSBzYWZlIHRvIHVwZGF0ZSBpbiBwbGFjZS5cbiAgbGV0IHJvdXRlVXBkYXRlcyA9IHt9O1xuICBmb3IgKGxldCBsYXp5Um91dGVQcm9wZXJ0eSBpbiBsYXp5Um91dGUpIHtcbiAgICBsZXQgc3RhdGljUm91dGVWYWx1ZSA9IHJvdXRlVG9VcGRhdGVbbGF6eVJvdXRlUHJvcGVydHldO1xuICAgIGxldCBpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgPSBzdGF0aWNSb3V0ZVZhbHVlICE9PSB1bmRlZmluZWQgJiZcbiAgICAvLyBUaGlzIHByb3BlcnR5IGlzbid0IHN0YXRpYyBzaW5jZSBpdCBzaG91bGQgYWx3YXlzIGJlIHVwZGF0ZWQgYmFzZWRcbiAgICAvLyBvbiB0aGUgcm91dGUgdXBkYXRlc1xuICAgIGxhenlSb3V0ZVByb3BlcnR5ICE9PSBcImhhc0Vycm9yQm91bmRhcnlcIjtcbiAgICB3YXJuaW5nKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQsIFwiUm91dGUgXFxcIlwiICsgcm91dGVUb1VwZGF0ZS5pZCArIFwiXFxcIiBoYXMgYSBzdGF0aWMgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgXCIgKyBcImRlZmluZWQgYnV0IGl0cyBsYXp5IGZ1bmN0aW9uIGlzIGFsc28gcmV0dXJuaW5nIGEgdmFsdWUgZm9yIHRoaXMgcHJvcGVydHkuIFwiICsgKFwiVGhlIGxhenkgcm91dGUgcHJvcGVydHkgXFxcIlwiICsgbGF6eVJvdXRlUHJvcGVydHkgKyBcIlxcXCIgd2lsbCBiZSBpZ25vcmVkLlwiKSk7XG4gICAgaWYgKCFpc1Byb3BlcnR5U3RhdGljYWxseURlZmluZWQgJiYgIWltbXV0YWJsZVJvdXRlS2V5cy5oYXMobGF6eVJvdXRlUHJvcGVydHkpKSB7XG4gICAgICByb3V0ZVVwZGF0ZXNbbGF6eVJvdXRlUHJvcGVydHldID0gbGF6eVJvdXRlW2xhenlSb3V0ZVByb3BlcnR5XTtcbiAgICB9XG4gIH1cbiAgLy8gTXV0YXRlIHRoZSByb3V0ZSB3aXRoIHRoZSBwcm92aWRlZCB1cGRhdGVzLiAgRG8gdGhpcyBmaXJzdCBzbyB3ZSBwYXNzXG4gIC8vIHRoZSB1cGRhdGVkIHZlcnNpb24gdG8gbWFwUm91dGVQcm9wZXJ0aWVzXG4gIE9iamVjdC5hc3NpZ24ocm91dGVUb1VwZGF0ZSwgcm91dGVVcGRhdGVzKTtcbiAgLy8gTXV0YXRlIHRoZSBgaGFzRXJyb3JCb3VuZGFyeWAgcHJvcGVydHkgb24gdGhlIHJvdXRlIGJhc2VkIG9uIHRoZSByb3V0ZVxuICAvLyB1cGRhdGVzIGFuZCByZW1vdmUgdGhlIGBsYXp5YCBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNvbHZlIHRoZSBsYXp5XG4gIC8vIHJvdXRlIGFnYWluLlxuICBPYmplY3QuYXNzaWduKHJvdXRlVG9VcGRhdGUsIF9leHRlbmRzKHt9LCBtYXBSb3V0ZVByb3BlcnRpZXMocm91dGVUb1VwZGF0ZSksIHtcbiAgICBsYXp5OiB1bmRlZmluZWRcbiAgfSkpO1xufVxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKHR5cGUsIHJlcXVlc3QsIG1hdGNoLCBtYXRjaGVzLCBtYW5pZmVzdCwgbWFwUm91dGVQcm9wZXJ0aWVzLCBiYXNlbmFtZSwgdjdfcmVsYXRpdmVTcGxhdFBhdGgsIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgcmVzdWx0VHlwZTtcbiAgbGV0IHJlc3VsdDtcbiAgbGV0IG9uUmVqZWN0O1xuICBsZXQgcnVuSGFuZGxlciA9IGhhbmRsZXIgPT4ge1xuICAgIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gICAgbGV0IHJlamVjdDtcbiAgICBsZXQgYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IHJlamVjdCA9IHIpO1xuICAgIG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFtoYW5kbGVyKHtcbiAgICAgIHJlcXVlc3QsXG4gICAgICBwYXJhbXM6IG1hdGNoLnBhcmFtcyxcbiAgICAgIGNvbnRleHQ6IG9wdHMucmVxdWVzdENvbnRleHRcbiAgICB9KSwgYWJvcnRQcm9taXNlXSk7XG4gIH07XG4gIHRyeSB7XG4gICAgbGV0IGhhbmRsZXIgPSBtYXRjaC5yb3V0ZVt0eXBlXTtcbiAgICBpZiAobWF0Y2gucm91dGUubGF6eSkge1xuICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgLy8gUnVuIHN0YXRpY2FsbHkgZGVmaW5lZCBoYW5kbGVyIGluIHBhcmFsbGVsIHdpdGggbGF6eSgpXG4gICAgICAgIGxldCBoYW5kbGVyRXJyb3I7XG4gICAgICAgIGxldCB2YWx1ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAgIC8vIElmIHRoZSBoYW5kbGVyIHRocm93cywgZG9uJ3QgbGV0IGl0IGltbWVkaWF0ZWx5IGJ1YmJsZSBvdXQsXG4gICAgICAgIC8vIHNpbmNlIHdlIG5lZWQgdG8gbGV0IHRoZSBsYXp5KCkgZXhlY3V0aW9uIGZpbmlzaCBzbyB3ZSBrbm93IGlmIHRoaXNcbiAgICAgICAgLy8gcm91dGUgaGFzIGEgYm91bmRhcnkgdGhhdCBjYW4gaGFuZGxlIHRoZSBlcnJvclxuICAgICAgICBydW5IYW5kbGVyKGhhbmRsZXIpLmNhdGNoKGUgPT4ge1xuICAgICAgICAgIGhhbmRsZXJFcnJvciA9IGU7XG4gICAgICAgIH0pLCBsb2FkTGF6eVJvdXRlTW9kdWxlKG1hdGNoLnJvdXRlLCBtYXBSb3V0ZVByb3BlcnRpZXMsIG1hbmlmZXN0KV0pO1xuICAgICAgICBpZiAoaGFuZGxlckVycm9yKSB7XG4gICAgICAgICAgdGhyb3cgaGFuZGxlckVycm9yO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlc1swXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIExvYWQgbGF6eSByb3V0ZSBtb2R1bGUsIHRoZW4gcnVuIGFueSByZXR1cm5lZCBoYW5kbGVyXG4gICAgICAgIGF3YWl0IGxvYWRMYXp5Um91dGVNb2R1bGUobWF0Y2gucm91dGUsIG1hcFJvdXRlUHJvcGVydGllcywgbWFuaWZlc3QpO1xuICAgICAgICBoYW5kbGVyID0gbWF0Y2gucm91dGVbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgLy8gSGFuZGxlciBzdGlsbCBydW4gZXZlbiBpZiB3ZSBnb3QgaW50ZXJydXB0ZWQgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcbiAgICAgICAgICAvLyB3aXRoIHVuLWFib3J0YWJsZSBiZWhhdmlvciBvZiBoYW5kbGVyIGV4ZWN1dGlvbiBvbiBub24tbGF6eSBvclxuICAgICAgICAgIC8vIHByZXZpb3VzbHktbGF6eS1sb2FkZWQgcm91dGVzXG4gICAgICAgICAgcmVzdWx0ID0gYXdhaXQgcnVuSGFuZGxlcihoYW5kbGVyKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBcImFjdGlvblwiKSB7XG4gICAgICAgICAgbGV0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpO1xuICAgICAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgICAgICBwYXRobmFtZSxcbiAgICAgICAgICAgIHJvdXRlSWQ6IG1hdGNoLnJvdXRlLmlkXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gbGF6eSgpIHJvdXRlIGhhcyBubyBsb2FkZXIgdG8gcnVuLiAgU2hvcnQgY2lyY3VpdCBoZXJlIHNvIHdlIGRvbid0XG4gICAgICAgICAgLy8gaGl0IHRoZSBpbnZhcmlhbnQgYmVsb3cgdGhhdCBlcnJvcnMgb24gcmV0dXJuaW5nIHVuZGVmaW5lZC5cbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgICAgICAgZGF0YTogdW5kZWZpbmVkXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWhhbmRsZXIpIHtcbiAgICAgIGxldCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgIGxldCBwYXRobmFtZSA9IHVybC5wYXRobmFtZSArIHVybC5zZWFyY2g7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgICBwYXRobmFtZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdCA9IGF3YWl0IHJ1bkhhbmRsZXIoaGFuZGxlcik7XG4gICAgfVxuICAgIGludmFyaWFudChyZXN1bHQgIT09IHVuZGVmaW5lZCwgXCJZb3UgZGVmaW5lZCBcIiArICh0eXBlID09PSBcImFjdGlvblwiID8gXCJhbiBhY3Rpb25cIiA6IFwiYSBsb2FkZXJcIikgKyBcIiBmb3Igcm91dGUgXCIgKyAoXCJcXFwiXCIgKyBtYXRjaC5yb3V0ZS5pZCArIFwiXFxcIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgYFwiICsgdHlwZSArIFwiYCBcIikgKyBcImZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgYG51bGxgLlwiKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKG9uUmVqZWN0KSB7XG4gICAgICByZXF1ZXN0LnNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25SZWplY3QpO1xuICAgIH1cbiAgfVxuICBpZiAoaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgbGV0IHN0YXR1cyA9IHJlc3VsdC5zdGF0dXM7XG4gICAgLy8gUHJvY2VzcyByZWRpcmVjdHNcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNDb2Rlcy5oYXMoc3RhdHVzKSkge1xuICAgICAgbGV0IGxvY2F0aW9uID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiTG9jYXRpb25cIik7XG4gICAgICBpbnZhcmlhbnQobG9jYXRpb24sIFwiUmVkaXJlY3RzIHJldHVybmVkL3Rocm93biBmcm9tIGxvYWRlcnMvYWN0aW9ucyBtdXN0IGhhdmUgYSBMb2NhdGlvbiBoZWFkZXJcIik7XG4gICAgICAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG4gICAgICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvKG5ldyBVUkwocmVxdWVzdC51cmwpLCBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxKSwgYmFzZW5hbWUsIHRydWUsIGxvY2F0aW9uLCB2N19yZWxhdGl2ZVNwbGF0UGF0aCk7XG4gICAgICB9IGVsc2UgaWYgKCFvcHRzLmlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gKyBzYW1lLWJhc2VuYW1lIGFic29sdXRlXG4gICAgICAgIC8vIHJlZGlyZWN0cy4gSWYgdGhpcyBpcyBhIHN0YXRpYyByZXF1ZXN0LCB3ZSBjYW4gbGV0IGl0IGdvIGJhY2sgdG8gdGhlXG4gICAgICAgIC8vIGJyb3dzZXIgYXMtaXNcbiAgICAgICAgbGV0IGN1cnJlbnRVcmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKTtcbiAgICAgICAgbGV0IHVybCA9IGxvY2F0aW9uLnN0YXJ0c1dpdGgoXCIvL1wiKSA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIGxvY2F0aW9uKSA6IG5ldyBVUkwobG9jYXRpb24pO1xuICAgICAgICBsZXQgaXNTYW1lQmFzZW5hbWUgPSBzdHJpcEJhc2VuYW1lKHVybC5wYXRobmFtZSwgYmFzZW5hbWUpICE9IG51bGw7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbiAmJiBpc1NhbWVCYXNlbmFtZSkge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyBEb24ndCBwcm9jZXNzIHJlZGlyZWN0cyBpbiB0aGUgcm91dGVyIGR1cmluZyBzdGF0aWMgcmVxdWVzdHMgcmVxdWVzdHMuXG4gICAgICAvLyBJbnN0ZWFkLCB0aHJvdyB0aGUgUmVzcG9uc2UgYW5kIGxldCB0aGUgc2VydmVyIGhhbmRsZSBpdCB3aXRoIGFuIEhUVFBcbiAgICAgIC8vIHJlZGlyZWN0LiAgV2UgYWxzbyB1cGRhdGUgdGhlIExvY2F0aW9uIGhlYWRlciBpbiBwbGFjZSBpbiB0aGlzIGZsb3cgc29cbiAgICAgIC8vIGJhc2VuYW1lIGFuZCByZWxhdGl2ZSByb3V0aW5nIGlzIHRha2VuIGludG8gYWNjb3VudFxuICAgICAgaWYgKG9wdHMuaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdCxcbiAgICAgICAgc3RhdHVzLFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgcmV2YWxpZGF0ZTogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZXZhbGlkYXRlXCIpICE9PSBudWxsLFxuICAgICAgICByZWxvYWREb2N1bWVudDogcmVzdWx0LmhlYWRlcnMuZ2V0KFwiWC1SZW1peC1SZWxvYWQtRG9jdW1lbnRcIikgIT09IG51bGxcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2sgZGlyZWN0bHlcbiAgICAvLyB3aXRob3V0IHVud3JhcHBpbmcuICBXZSBkbyB0aGlzIHdpdGggdGhlIFF1ZXJ5Um91dGVSZXNwb25zZSB3cmFwcGVyXG4gICAgLy8gaW50ZXJmYWNlIHNvIHdlIGNhbiBrbm93IHdoZXRoZXIgaXQgd2FzIHJldHVybmVkIG9yIHRocm93blxuICAgIGlmIChvcHRzLmlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICBsZXQgcXVlcnlSb3V0ZVJlc3BvbnNlID0ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yID8gUmVzdWx0VHlwZS5lcnJvciA6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgcmVzcG9uc2U6IHJlc3VsdFxuICAgICAgfTtcbiAgICAgIHRocm93IHF1ZXJ5Um91dGVSZXNwb25zZTtcbiAgICB9XG4gICAgbGV0IGRhdGE7XG4gICAgdHJ5IHtcbiAgICAgIGxldCBjb250ZW50VHlwZSA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkNvbnRlbnQtVHlwZVwiKTtcbiAgICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgICAgLy8gcGFyYWdyYXBoIG9mIGh0dHBzOi8vaHR0cHdnLm9yZy9zcGVjcy9yZmM5MTEwLmh0bWwjZmllbGQuY29udGVudC10eXBlXG4gICAgICBpZiAoY29udGVudFR5cGUgJiYgL1xcYmFwcGxpY2F0aW9uXFwvanNvblxcYi8udGVzdChjb250ZW50VHlwZSkpIHtcbiAgICAgICAgaWYgKHJlc3VsdC5ib2R5ID09IG51bGwpIHtcbiAgICAgICAgICBkYXRhID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkYXRhID0gYXdhaXQgcmVzdWx0Lmpzb24oKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC50ZXh0KCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2VJbXBsKHN0YXR1cywgcmVzdWx0LnN0YXR1c1RleHQsIGRhdGEpLFxuICAgICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVyc1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgIGRhdGEsXG4gICAgICBzdGF0dXNDb2RlOiByZXN1bHQuc3RhdHVzLFxuICAgICAgaGVhZGVyczogcmVzdWx0LmhlYWRlcnNcbiAgICB9O1xuICB9XG4gIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IHJlc3VsdFR5cGUsXG4gICAgICBlcnJvcjogcmVzdWx0XG4gICAgfTtcbiAgfVxuICBpZiAoaXNEZWZlcnJlZERhdGEocmVzdWx0KSkge1xuICAgIHZhciBfcmVzdWx0JGluaXQsIF9yZXN1bHQkaW5pdDI7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGVmZXJyZWQsXG4gICAgICBkZWZlcnJlZERhdGE6IHJlc3VsdCxcbiAgICAgIHN0YXR1c0NvZGU6IChfcmVzdWx0JGluaXQgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiAoKF9yZXN1bHQkaW5pdDIgPSByZXN1bHQuaW5pdCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9yZXN1bHQkaW5pdDIuaGVhZGVycykgJiYgbmV3IEhlYWRlcnMocmVzdWx0LmluaXQuaGVhZGVycylcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdFxuICB9O1xufVxuLy8gVXRpbGl0eSBtZXRob2QgZm9yIGNyZWF0aW5nIHRoZSBSZXF1ZXN0IGluc3RhbmNlcyBmb3IgbG9hZGVycy9hY3Rpb25zIGR1cmluZ1xuLy8gY2xpZW50LXNpZGUgbmF2aWdhdGlvbnMgYW5kIGZldGNoZXMuICBEdXJpbmcgU1NSIHdlIHdpbGwgYWx3YXlzIGhhdmUgYVxuLy8gUmVxdWVzdCBpbnN0YW5jZSBmcm9tIHRoZSBzdGF0aWMgaGFuZGxlciAocXVlcnkvcXVlcnlSb3V0ZSlcbmZ1bmN0aW9uIGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KGhpc3RvcnksIGxvY2F0aW9uLCBzaWduYWwsIHN1Ym1pc3Npb24pIHtcbiAgbGV0IHVybCA9IGhpc3RvcnkuY3JlYXRlVVJMKHN0cmlwSGFzaEZyb21QYXRoKGxvY2F0aW9uKSkudG9TdHJpbmcoKTtcbiAgbGV0IGluaXQgPSB7XG4gICAgc2lnbmFsXG4gIH07XG4gIGlmIChzdWJtaXNzaW9uICYmIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKSkge1xuICAgIGxldCB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUVuY1R5cGVcbiAgICB9ID0gc3VibWlzc2lvbjtcbiAgICAvLyBEaWRuJ3QgdGhpbmsgd2UgbmVlZGVkIHRoaXMgYnV0IGl0IHR1cm5zIG91dCB1bmxpa2Ugb3RoZXIgbWV0aG9kcywgcGF0Y2hcbiAgICAvLyB3b24ndCBiZSBwcm9wZXJseSBub3JtYWxpemVkIHRvIHVwcGVyY2FzZSBhbmQgcmVzdWx0cyBpbiBhIDQwNSBlcnJvci5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNjb25jZXB0LW1ldGhvZFxuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi9qc29uXCIpIHtcbiAgICAgIGluaXQuaGVhZGVycyA9IG5ldyBIZWFkZXJzKHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogZm9ybUVuY1R5cGVcbiAgICAgIH0pO1xuICAgICAgaW5pdC5ib2R5ID0gSlNPTi5zdHJpbmdpZnkoc3VibWlzc2lvbi5qc29uKTtcbiAgICB9IGVsc2UgaWYgKGZvcm1FbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgICAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gICAgICBpbml0LmJvZHkgPSBzdWJtaXNzaW9uLnRleHQ7XG4gICAgfSBlbHNlIGlmIChmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiAmJiBzdWJtaXNzaW9uLmZvcm1EYXRhKSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKHN1Ym1pc3Npb24uZm9ybURhdGEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb250ZW50LVR5cGUgaXMgaW5mZXJyZWQgKGh0dHBzOi8vZmV0Y2guc3BlYy53aGF0d2cub3JnLyNkb20tcmVxdWVzdClcbiAgICAgIGluaXQuYm9keSA9IHN1Ym1pc3Npb24uZm9ybURhdGE7XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuZnVuY3Rpb24gY29udmVydEZvcm1EYXRhVG9TZWFyY2hQYXJhbXMoZm9ybURhdGEpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIGZvcm1EYXRhLmVudHJpZXMoKSkge1xuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm0tY29udHJvbC1pbmZyYXN0cnVjdHVyZS5odG1sI2NvbnZlcnRpbmctYW4tZW50cnktbGlzdC10by1hLWxpc3Qtb2YtbmFtZS12YWx1ZS1wYWlyc1xuICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgPyB2YWx1ZSA6IHZhbHVlLm5hbWUpO1xuICB9XG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5mdW5jdGlvbiBjb252ZXJ0U2VhcmNoUGFyYW1zVG9Gb3JtRGF0YShzZWFyY2hQYXJhbXMpIHtcbiAgbGV0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBzZWFyY2hQYXJhbXMuZW50cmllcygpKSB7XG4gICAgZm9ybURhdGEuYXBwZW5kKGtleSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmb3JtRGF0YTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEobWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCBhY3RpdmVEZWZlcnJlZHMpIHtcbiAgLy8gRmlsbCBpbiBsb2FkZXJEYXRhL2Vycm9ycyBmcm9tIG91ciBsb2FkZXJzXG4gIGxldCBsb2FkZXJEYXRhID0ge307XG4gIGxldCBlcnJvcnMgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTtcbiAgbGV0IGZvdW5kRXJyb3IgPSBmYWxzZTtcbiAgbGV0IGxvYWRlckhlYWRlcnMgPSB7fTtcbiAgLy8gUHJvY2VzcyBsb2FkZXIgcmVzdWx0cyBpbnRvIHN0YXRlLmxvYWRlckRhdGEvc3RhdGUuZXJyb3JzXG4gIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0LCBpbmRleCkgPT4ge1xuICAgIGxldCBpZCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdLnJvdXRlLmlkO1xuICAgIGludmFyaWFudCghaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpLCBcIkNhbm5vdCBoYW5kbGUgcmVkaXJlY3QgcmVzdWx0cyBpbiBwcm9jZXNzTG9hZGVyRGF0YVwiKTtcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBMb29rIHVwd2FyZHMgZnJvbSB0aGUgbWF0Y2hlZCByb3V0ZSBmb3IgdGhlIGNsb3Nlc3QgYW5jZXN0b3JcbiAgICAgIC8vIGVycm9yIGJvdW5kYXJ5LCBkZWZhdWx0aW5nIHRvIHRoZSByb290IG1hdGNoXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgaWQpO1xuICAgICAgbGV0IGVycm9yID0gcmVzdWx0LmVycm9yO1xuICAgICAgLy8gSWYgd2UgaGF2ZSBhIHBlbmRpbmcgYWN0aW9uIGVycm9yLCB3ZSByZXBvcnQgaXQgYXQgdGhlIGhpZ2hlc3Qtcm91dGVcbiAgICAgIC8vIHRoYXQgdGhyb3dzIGEgbG9hZGVyIGVycm9yLCBhbmQgdGhlbiBjbGVhciBpdCBvdXQgdG8gaW5kaWNhdGUgdGhhdFxuICAgICAgLy8gaXQgd2FzIGNvbnN1bWVkXG4gICAgICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgICAgIGVycm9yID0gT2JqZWN0LnZhbHVlcyhwZW5kaW5nRXJyb3IpWzBdO1xuICAgICAgICBwZW5kaW5nRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBlcnJvcnMgPSBlcnJvcnMgfHwge307XG4gICAgICAvLyBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlcyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICB9XG4gICAgICAvLyBDbGVhciBvdXIgYW55IHByaW9yIGxvYWRlckRhdGEgZm9yIHRoZSB0aHJvd2luZyByb3V0ZVxuICAgICAgbG9hZGVyRGF0YVtpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBPbmNlIHdlIGZpbmQgb3VyIGZpcnN0IChoaWdoZXN0KSBlcnJvciwgd2Ugc2V0IHRoZSBzdGF0dXMgY29kZSBhbmRcbiAgICAgIC8vIHByZXZlbnQgZGVlcGVyIHN0YXR1cyBjb2RlcyBmcm9tIG92ZXJyaWRpbmdcbiAgICAgIGlmICghZm91bmRFcnJvcikge1xuICAgICAgICBmb3VuZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgc3RhdHVzQ29kZSA9IGlzUm91dGVFcnJvclJlc3BvbnNlKHJlc3VsdC5lcnJvcikgPyByZXN1bHQuZXJyb3Iuc3RhdHVzIDogNTAwO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLnNldChpZCwgcmVzdWx0LmRlZmVycmVkRGF0YSk7XG4gICAgICAgIGxvYWRlckRhdGFbaWRdID0gcmVzdWx0LmRlZmVycmVkRGF0YS5kYXRhO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGF0YTtcbiAgICAgIH1cbiAgICAgIC8vIEVycm9yIHN0YXR1cyBjb2RlcyBhbHdheXMgb3ZlcnJpZGUgc3VjY2VzcyBzdGF0dXMgY29kZXMsIGJ1dCBpZiBhbGxcbiAgICAgIC8vIGxvYWRlcnMgYXJlIHN1Y2Nlc3NmdWwgd2UgdGFrZSB0aGUgZGVlcGVzdCBzdGF0dXMgY29kZS5cbiAgICAgIGlmIChyZXN1bHQuc3RhdHVzQ29kZSAhPSBudWxsICYmIHJlc3VsdC5zdGF0dXNDb2RlICE9PSAyMDAgJiYgIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgc3RhdHVzQ29kZSA9IHJlc3VsdC5zdGF0dXNDb2RlO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdC5oZWFkZXJzKSB7XG4gICAgICAgIGxvYWRlckhlYWRlcnNbaWRdID0gcmVzdWx0LmhlYWRlcnM7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgZXJyb3JzID0gcGVuZGluZ0Vycm9yO1xuICAgIGxvYWRlckRhdGFbT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXV0gPSB1bmRlZmluZWQ7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9ycyxcbiAgICBzdGF0dXNDb2RlOiBzdGF0dXNDb2RlIHx8IDIwMCxcbiAgICBsb2FkZXJIZWFkZXJzXG4gIH07XG59XG5mdW5jdGlvbiBwcm9jZXNzTG9hZGVyRGF0YShzdGF0ZSwgbWF0Y2hlcywgbWF0Y2hlc1RvTG9hZCwgcmVzdWx0cywgcGVuZGluZ0Vycm9yLCByZXZhbGlkYXRpbmdGZXRjaGVycywgZmV0Y2hlclJlc3VsdHMsIGFjdGl2ZURlZmVycmVkcykge1xuICBsZXQge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzXG4gIH0gPSBwcm9jZXNzUm91dGVMb2FkZXJEYXRhKG1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHBlbmRpbmdFcnJvciwgYWN0aXZlRGVmZXJyZWRzKTtcbiAgLy8gUHJvY2VzcyByZXN1bHRzIGZyb20gb3VyIHJldmFsaWRhdGluZyBmZXRjaGVyc1xuICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgcmV2YWxpZGF0aW5nRmV0Y2hlcnMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHtcbiAgICAgIGtleSxcbiAgICAgIG1hdGNoLFxuICAgICAgY29udHJvbGxlclxuICAgIH0gPSByZXZhbGlkYXRpbmdGZXRjaGVyc1tpbmRleF07XG4gICAgaW52YXJpYW50KGZldGNoZXJSZXN1bHRzICE9PSB1bmRlZmluZWQgJiYgZmV0Y2hlclJlc3VsdHNbaW5kZXhdICE9PSB1bmRlZmluZWQsIFwiRGlkIG5vdCBmaW5kIGNvcnJlc3BvbmRpbmcgZmV0Y2hlciByZXN1bHRcIik7XG4gICAgbGV0IHJlc3VsdCA9IGZldGNoZXJSZXN1bHRzW2luZGV4XTtcbiAgICAvLyBQcm9jZXNzIGZldGNoZXIgbm9uLXJlZGlyZWN0IGVycm9yc1xuICAgIGlmIChjb250cm9sbGVyICYmIGNvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIC8vIE5vdGhpbmcgdG8gZG8gZm9yIGFib3J0ZWQgZmV0Y2hlcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gZWxzZSBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2ggPT0gbnVsbCA/IHZvaWQgMCA6IG1hdGNoLnJvdXRlLmlkKTtcbiAgICAgIGlmICghKGVycm9ycyAmJiBlcnJvcnNbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF0pKSB7XG4gICAgICAgIGVycm9ycyA9IF9leHRlbmRzKHt9LCBlcnJvcnMsIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvclxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlciA9IGdldERvbmVGZXRjaGVyKHJlc3VsdC5kYXRhKTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBsb2FkZXJEYXRhLFxuICAgIGVycm9yc1xuICB9O1xufVxuZnVuY3Rpb24gbWVyZ2VMb2FkZXJEYXRhKGxvYWRlckRhdGEsIG5ld0xvYWRlckRhdGEsIG1hdGNoZXMsIGVycm9ycykge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IF9leHRlbmRzKHt9LCBuZXdMb2FkZXJEYXRhKTtcbiAgZm9yIChsZXQgbWF0Y2ggb2YgbWF0Y2hlcykge1xuICAgIGxldCBpZCA9IG1hdGNoLnJvdXRlLmlkO1xuICAgIGlmIChuZXdMb2FkZXJEYXRhLmhhc093blByb3BlcnR5KGlkKSkge1xuICAgICAgaWYgKG5ld0xvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbWVyZ2VkTG9hZGVyRGF0YVtpZF0gPSBuZXdMb2FkZXJEYXRhW2lkXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQgJiYgbWF0Y2gucm91dGUubG9hZGVyKSB7XG4gICAgICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBrZXlzIG5vdCBpbmNsdWRlZCBpbiBuZXdMb2FkZXJEYXRhIGFuZCB3aGVyZSBhIGxvYWRlclxuICAgICAgLy8gd2Fzbid0IHJlbW92ZWQgYnkgSE1SXG4gICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IGxvYWRlckRhdGFbaWRdO1xuICAgIH1cbiAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgIC8vIERvbid0IGtlZXAgYW55IGxvYWRlciBkYXRhIGJlbG93IHRoZSBib3VuZGFyeVxuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBtZXJnZWRMb2FkZXJEYXRhO1xufVxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgcm91dGVJZCkge1xuICBsZXQgZWxpZ2libGVNYXRjaGVzID0gcm91dGVJZCA/IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpIDogWy4uLm1hdGNoZXNdO1xuICByZXR1cm4gZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKG0gPT4gbS5yb3V0ZS5oYXNFcnJvckJvdW5kYXJ5ID09PSB0cnVlKSB8fCBtYXRjaGVzWzBdO1xufVxuZnVuY3Rpb24gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhyb3V0ZXMpIHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmxlbmd0aCA9PT0gMSA/IHJvdXRlc1swXSA6IHJvdXRlcy5maW5kKHIgPT4gci5pbmRleCB8fCAhci5wYXRoIHx8IHIucGF0aCA9PT0gXCIvXCIpIHx8IHtcbiAgICBpZDogXCJfX3NoaW0tZXJyb3Itcm91dGVfX1wiXG4gIH07XG4gIHJldHVybiB7XG4gICAgbWF0Y2hlczogW3tcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBwYXRobmFtZTogXCJcIixcbiAgICAgIHBhdGhuYW1lQmFzZTogXCJcIixcbiAgICAgIHJvdXRlXG4gICAgfV0sXG4gICAgcm91dGVcbiAgfTtcbn1cbmZ1bmN0aW9uIGdldEludGVybmFsUm91dGVyRXJyb3Ioc3RhdHVzLCBfdGVtcDUpIHtcbiAgbGV0IHtcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZUlkLFxuICAgIG1ldGhvZCxcbiAgICB0eXBlXG4gIH0gPSBfdGVtcDUgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA1O1xuICBsZXQgc3RhdHVzVGV4dCA9IFwiVW5rbm93biBTZXJ2ZXIgRXJyb3JcIjtcbiAgbGV0IGVycm9yTWVzc2FnZSA9IFwiVW5rbm93biBAcmVtaXgtcnVuL3JvdXRlciBlcnJvclwiO1xuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kICsgXCIgcmVxdWVzdCB0byBcXFwiXCIgKyBwYXRobmFtZSArIFwiXFxcIiBidXQgXCIgKyAoXCJkaWQgbm90IHByb3ZpZGUgYSBgbG9hZGVyYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJpbnZhbGlkLWJvZHlcIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJVbmFibGUgdG8gZW5jb2RlIHN1Ym1pc3Npb24gYm9keVwiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiUm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiBkb2VzIG5vdCBtYXRjaCBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IFwiTm8gcm91dGUgbWF0Y2hlcyBVUkwgXFxcIlwiICsgcGF0aG5hbWUgKyBcIlxcXCJcIjtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNSkge1xuICAgIHN0YXR1c1RleHQgPSBcIk1ldGhvZCBOb3QgQWxsb3dlZFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJZb3UgbWFkZSBhIFwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIiByZXF1ZXN0IHRvIFxcXCJcIiArIHBhdGhuYW1lICsgXCJcXFwiIGJ1dCBcIiArIChcImRpZCBub3QgcHJvdmlkZSBhbiBgYWN0aW9uYCBmb3Igcm91dGUgXFxcIlwiICsgcm91dGVJZCArIFwiXFxcIiwgXCIpICsgXCJzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LlwiO1xuICAgIH0gZWxzZSBpZiAobWV0aG9kKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPSBcIkludmFsaWQgcmVxdWVzdCBtZXRob2QgXFxcIlwiICsgbWV0aG9kLnRvVXBwZXJDYXNlKCkgKyBcIlxcXCJcIjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlSW1wbChzdGF0dXMgfHwgNTAwLCBzdGF0dXNUZXh0LCBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSwgdHJ1ZSk7XG59XG4vLyBGaW5kIGFueSByZXR1cm5lZCByZWRpcmVjdCBlcnJvcnMsIHN0YXJ0aW5nIGZyb20gdGhlIGxvd2VzdCBtYXRjaFxuZnVuY3Rpb24gZmluZFJlZGlyZWN0KHJlc3VsdHMpIHtcbiAgZm9yIChsZXQgaSA9IHJlc3VsdHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICByZXN1bHQsXG4gICAgICAgIGlkeDogaVxuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGgpIHtcbiAgbGV0IHBhcnNlZFBhdGggPSB0eXBlb2YgcGF0aCA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChwYXRoKSA6IHBhdGg7XG4gIHJldHVybiBjcmVhdGVQYXRoKF9leHRlbmRzKHt9LCBwYXJzZWRQYXRoLCB7XG4gICAgaGFzaDogXCJcIlxuICB9KSk7XG59XG5mdW5jdGlvbiBpc0hhc2hDaGFuZ2VPbmx5KGEsIGIpIHtcbiAgaWYgKGEucGF0aG5hbWUgIT09IGIucGF0aG5hbWUgfHwgYS5zZWFyY2ggIT09IGIuc2VhcmNoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChhLmhhc2ggPT09IFwiXCIpIHtcbiAgICAvLyAvcGFnZSAtPiAvcGFnZSNoYXNoXG4gICAgcmV0dXJuIGIuaGFzaCAhPT0gXCJcIjtcbiAgfSBlbHNlIGlmIChhLmhhc2ggPT09IGIuaGFzaCkge1xuICAgIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2UjaGFzaFxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGIuaGFzaCAhPT0gXCJcIikge1xuICAgIC8vIC9wYWdlI2hhc2ggLT4gL3BhZ2Ujb3RoZXJcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBJZiB0aGUgaGFzaCBpcyByZW1vdmVkIHRoZSBicm93c2VyIHdpbGwgcmUtcGVyZm9ybSBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlclxuICAvLyAvcGFnZSNoYXNoIC0+IC9wYWdlXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5kZWZlcnJlZDtcbn1cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiByZXN1bHQudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvcjtcbn1cbmZ1bmN0aW9uIGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSB7XG4gIHJldHVybiAocmVzdWx0ICYmIHJlc3VsdC50eXBlKSA9PT0gUmVzdWx0VHlwZS5yZWRpcmVjdDtcbn1cbmZ1bmN0aW9uIGlzRGVmZXJyZWREYXRhKHZhbHVlKSB7XG4gIGxldCBkZWZlcnJlZCA9IHZhbHVlO1xuICByZXR1cm4gZGVmZXJyZWQgJiYgdHlwZW9mIGRlZmVycmVkID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5kYXRhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBkZWZlcnJlZC5zdWJzY3JpYmUgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgZGVmZXJyZWQuY2FuY2VsID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIGRlZmVycmVkLnJlc29sdmVEYXRhID09PSBcImZ1bmN0aW9uXCI7XG59XG5mdW5jdGlvbiBpc1Jlc3BvbnNlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZS5zdGF0dXMgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHZhbHVlLnN0YXR1c1RleHQgPT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlLmJvZHkgIT09IFwidW5kZWZpbmVkXCI7XG59XG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0KSB7XG4gIGlmICghaXNSZXNwb25zZShyZXN1bHQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuZnVuY3Rpb24gaXNRdWVyeVJvdXRlUmVzcG9uc2Uob2JqKSB7XG4gIHJldHVybiBvYmogJiYgaXNSZXNwb25zZShvYmoucmVzcG9uc2UpICYmIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IG9iai50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yKTtcbn1cbmZ1bmN0aW9uIGlzVmFsaWRNZXRob2QobWV0aG9kKSB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QudG9Mb3dlckNhc2UoKSk7XG59XG5mdW5jdGlvbiBpc011dGF0aW9uTWV0aG9kKG1ldGhvZCkge1xuICByZXR1cm4gdmFsaWRNdXRhdGlvbk1ldGhvZHMuaGFzKG1ldGhvZC50b0xvd2VyQ2FzZSgpKTtcbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoY3VycmVudE1hdGNoZXMsIG1hdGNoZXNUb0xvYWQsIHJlc3VsdHMsIHNpZ25hbHMsIGlzRmV0Y2hlciwgY3VycmVudExvYWRlckRhdGEpIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIC8vIElmIHdlIGRvbid0IGhhdmUgYSBtYXRjaCwgdGhlbiB3ZSBjYW4gaGF2ZSBhIGRlZmVycmVkIHJlc3VsdCB0byBkb1xuICAgIC8vIGFueXRoaW5nIHdpdGguICBUaGlzIGlzIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlcnMgd2hlcmUgdGhlIHJvdXRlIHdhc1xuICAgIC8vIHJlbW92ZWQgZHVyaW5nIEhNUlxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBsZXQgY3VycmVudE1hdGNoID0gY3VycmVudE1hdGNoZXMuZmluZChtID0+IG0ucm91dGUuaWQgPT09IG1hdGNoLnJvdXRlLmlkKTtcbiAgICBsZXQgaXNSZXZhbGlkYXRpbmdMb2FkZXIgPSBjdXJyZW50TWF0Y2ggIT0gbnVsbCAmJiAhaXNOZXdSb3V0ZUluc3RhbmNlKGN1cnJlbnRNYXRjaCwgbWF0Y2gpICYmIChjdXJyZW50TG9hZGVyRGF0YSAmJiBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQ7XG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSAmJiAoaXNGZXRjaGVyIHx8IGlzUmV2YWxpZGF0aW5nTG9hZGVyKSkge1xuICAgICAgLy8gTm90ZTogd2UgZG8gbm90IGhhdmUgdG8gdG91Y2ggYWN0aXZlRGVmZXJyZWRzIGhlcmUgc2luY2Ugd2UgcmFjZSB0aGVtXG4gICAgICAvLyBhZ2FpbnN0IHRoZSBzaWduYWwgaW4gcmVzb2x2ZURlZmVycmVkRGF0YSBhbmQgdGhleSdsbCBnZXQgYWJvcnRlZFxuICAgICAgLy8gdGhlcmUgaWYgbmVlZGVkXG4gICAgICBsZXQgc2lnbmFsID0gc2lnbmFsc1tpbmRleF07XG4gICAgICBpbnZhcmlhbnQoc2lnbmFsLCBcIkV4cGVjdGVkIGFuIEFib3J0U2lnbmFsIGZvciByZXZhbGlkYXRpbmcgZmV0Y2hlciBkZWZlcnJlZCByZXN1bHRcIik7XG4gICAgICBhd2FpdCByZXNvbHZlRGVmZXJyZWREYXRhKHJlc3VsdCwgc2lnbmFsLCBpc0ZldGNoZXIpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdHNbaW5kZXhdID0gcmVzdWx0IHx8IHJlc3VsdHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIHVud3JhcCkge1xuICBpZiAodW53cmFwID09PSB2b2lkIDApIHtcbiAgICB1bndyYXAgPSBmYWxzZTtcbiAgfVxuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcbiAgaWYgKGFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHVud3JhcCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEudW53cmFwcGVkRGF0YVxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGVcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YVxuICB9O1xufVxuZnVuY3Rpb24gaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCkge1xuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyhzZWFyY2gpLmdldEFsbChcImluZGV4XCIpLnNvbWUodiA9PiB2ID09PSBcIlwiKTtcbn1cbmZ1bmN0aW9uIGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKSB7XG4gIGxldCBzZWFyY2ggPSB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb24pLnNlYXJjaCA6IGxvY2F0aW9uLnNlYXJjaDtcbiAgaWYgKG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5pbmRleCAmJiBoYXNOYWtlZEluZGV4UXVlcnkoc2VhcmNoIHx8IFwiXCIpKSB7XG4gICAgLy8gUmV0dXJuIHRoZSBsZWFmIGluZGV4IHJvdXRlIHdoZW4gaW5kZXggaXMgcHJlc2VudFxuICAgIHJldHVybiBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIH1cbiAgLy8gT3RoZXJ3aXNlIGdyYWIgdGhlIGRlZXBlc3QgXCJwYXRoIGNvbnRyaWJ1dGluZ1wiIG1hdGNoIChpZ25vcmluZyBpbmRleCBhbmRcbiAgLy8gcGF0aGxlc3MgbGF5b3V0IHJvdXRlcylcbiAgbGV0IHBhdGhNYXRjaGVzID0gZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcyk7XG4gIHJldHVybiBwYXRoTWF0Y2hlc1twYXRoTWF0Y2hlcy5sZW5ndGggLSAxXTtcbn1cbmZ1bmN0aW9uIGdldFN1Ym1pc3Npb25Gcm9tTmF2aWdhdGlvbihuYXZpZ2F0aW9uKSB7XG4gIGxldCB7XG4gICAgZm9ybU1ldGhvZCxcbiAgICBmb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlLFxuICAgIHRleHQsXG4gICAgZm9ybURhdGEsXG4gICAganNvblxuICB9ID0gbmF2aWdhdGlvbjtcbiAgaWYgKCFmb3JtTWV0aG9kIHx8ICFmb3JtQWN0aW9uIHx8ICFmb3JtRW5jVHlwZSkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAodGV4dCAhPSBudWxsKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAganNvbjogdW5kZWZpbmVkLFxuICAgICAgdGV4dFxuICAgIH07XG4gIH0gZWxzZSBpZiAoZm9ybURhdGEgIT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9IGVsc2UgaWYgKGpzb24gIT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbixcbiAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgIGpzb24sXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRMb2FkaW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBuYXZpZ2F0aW9uID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgICBmb3JtQWN0aW9uOiBzdWJtaXNzaW9uLmZvcm1BY3Rpb24sXG4gICAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgICAganNvbjogc3VibWlzc2lvbi5qc29uLFxuICAgICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gICAgfTtcbiAgICByZXR1cm4gbmF2aWdhdGlvbjtcbiAgfSBlbHNlIHtcbiAgICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWRcbiAgICB9O1xuICAgIHJldHVybiBuYXZpZ2F0aW9uO1xuICB9XG59XG5mdW5jdGlvbiBnZXRTdWJtaXR0aW5nTmF2aWdhdGlvbihsb2NhdGlvbiwgc3VibWlzc2lvbikge1xuICBsZXQgbmF2aWdhdGlvbiA9IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgbG9jYXRpb24sXG4gICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24uZm9ybUFjdGlvbixcbiAgICBmb3JtRW5jVHlwZTogc3VibWlzc2lvbi5mb3JtRW5jVHlwZSxcbiAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICBqc29uOiBzdWJtaXNzaW9uLmpzb24sXG4gICAgdGV4dDogc3VibWlzc2lvbi50ZXh0XG4gIH07XG4gIHJldHVybiBuYXZpZ2F0aW9uO1xufVxuZnVuY3Rpb24gZ2V0TG9hZGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZGF0YSkge1xuICBpZiAoc3VibWlzc2lvbikge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogc3VibWlzc2lvbi5mb3JtTWV0aG9kLFxuICAgICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24uZm9ybUVuY1R5cGUsXG4gICAgICBmb3JtRGF0YTogc3VibWlzc2lvbi5mb3JtRGF0YSxcbiAgICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICAgIHRleHQ6IHN1Ym1pc3Npb24udGV4dCxcbiAgICAgIGRhdGFcbiAgICB9O1xuICAgIHJldHVybiBmZXRjaGVyO1xuICB9IGVsc2Uge1xuICAgIGxldCBmZXRjaGVyID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgICB0ZXh0OiB1bmRlZmluZWQsXG4gICAgICBkYXRhXG4gICAgfTtcbiAgICByZXR1cm4gZmV0Y2hlcjtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0U3VibWl0dGluZ0ZldGNoZXIoc3VibWlzc2lvbiwgZXhpc3RpbmdGZXRjaGVyKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uLmZvcm1NZXRob2QsXG4gICAgZm9ybUFjdGlvbjogc3VibWlzc2lvbi5mb3JtQWN0aW9uLFxuICAgIGZvcm1FbmNUeXBlOiBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlLFxuICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uLmZvcm1EYXRhLFxuICAgIGpzb246IHN1Ym1pc3Npb24uanNvbixcbiAgICB0ZXh0OiBzdWJtaXNzaW9uLnRleHQsXG4gICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyID8gZXhpc3RpbmdGZXRjaGVyLmRhdGEgOiB1bmRlZmluZWRcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiBnZXREb25lRmV0Y2hlcihkYXRhKSB7XG4gIGxldCBmZXRjaGVyID0ge1xuICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICBqc29uOiB1bmRlZmluZWQsXG4gICAgdGV4dDogdW5kZWZpbmVkLFxuICAgIGRhdGFcbiAgfTtcbiAgcmV0dXJuIGZldGNoZXI7XG59XG5mdW5jdGlvbiByZXN0b3JlQXBwbGllZFRyYW5zaXRpb25zKF93aW5kb3csIHRyYW5zaXRpb25zKSB7XG4gIHRyeSB7XG4gICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBfd2luZG93LnNlc3Npb25TdG9yYWdlLmdldEl0ZW0oVFJBTlNJVElPTlNfU1RPUkFHRV9LRVkpO1xuICAgIGlmIChzZXNzaW9uUG9zaXRpb25zKSB7XG4gICAgICBsZXQganNvbiA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICBmb3IgKGxldCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMoanNvbiB8fCB7fSkpIHtcbiAgICAgICAgaWYgKHYgJiYgQXJyYXkuaXNBcnJheSh2KSkge1xuICAgICAgICAgIHRyYW5zaXRpb25zLnNldChrLCBuZXcgU2V0KHYgfHwgW10pKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIG5vLW9wLCB1c2UgZGVmYXVsdCBlbXB0eSBvYmplY3RcbiAgfVxufVxuZnVuY3Rpb24gcGVyc2lzdEFwcGxpZWRUcmFuc2l0aW9ucyhfd2luZG93LCB0cmFuc2l0aW9ucykge1xuICBpZiAodHJhbnNpdGlvbnMuc2l6ZSA+IDApIHtcbiAgICBsZXQganNvbiA9IHt9O1xuICAgIGZvciAobGV0IFtrLCB2XSBvZiB0cmFuc2l0aW9ucykge1xuICAgICAganNvbltrXSA9IFsuLi52XTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIF93aW5kb3cuc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbShUUkFOU0lUSU9OU19TVE9SQUdFX0tFWSwgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB3YXJuaW5nKGZhbHNlLCBcIkZhaWxlZCB0byBzYXZlIGFwcGxpZWQgdmlldyB0cmFuc2l0aW9ucyBpbiBzZXNzaW9uU3RvcmFnZSAoXCIgKyBlcnJvciArIFwiKS5cIik7XG4gICAgfVxuICB9XG59XG4vLyNlbmRyZWdpb25cblxuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiwgSURMRV9CTE9DS0VSLCBJRExFX0ZFVENIRVIsIElETEVfTkFWSUdBVElPTiwgVU5TQUZFX0RFRkVSUkVEX1NZTUJPTCwgRGVmZXJyZWREYXRhIGFzIFVOU0FGRV9EZWZlcnJlZERhdGEsIEVycm9yUmVzcG9uc2VJbXBsIGFzIFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCwgY29udmVydFJvdXRlTWF0Y2hUb1VpTWF0Y2ggYXMgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBjb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzIGFzIFVOU0FGRV9jb252ZXJ0Um91dGVzVG9EYXRhUm91dGVzLCBnZXRSZXNvbHZlVG9NYXRjaGVzIGFzIFVOU0FGRV9nZXRSZXNvbHZlVG9NYXRjaGVzLCBpbnZhcmlhbnQgYXMgVU5TQUZFX2ludmFyaWFudCwgd2FybmluZyBhcyBVTlNBRkVfd2FybmluZywgY3JlYXRlQnJvd3Nlckhpc3RvcnksIGNyZWF0ZUhhc2hIaXN0b3J5LCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVQYXRoLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZVN0YXRpY0hhbmRsZXIsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGdldFN0YXRpY0NvbnRleHRGcm9tRXJyb3IsIGdldFRvUGF0aG5hbWUsIGlzRGVmZXJyZWREYXRhLCBpc1JvdXRlRXJyb3JSZXNwb25zZSwgam9pblBhdGhzLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBub3JtYWxpemVQYXRobmFtZSwgcGFyc2VQYXRoLCByZWRpcmVjdCwgcmVkaXJlY3REb2N1bWVudCwgcmVzb2x2ZVBhdGgsIHJlc29sdmVUbywgc3RyaXBCYXNlbmFtZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cm91dGVyLmpzLm1hcFxuIiwiLyoqXG4gKiBSZWFjdCBSb3V0ZXIgdjYuMjEuM1xuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIG1hdGNoUGF0aCwgVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMsIFVOU0FGRV93YXJuaW5nLCByZXNvbHZlVG8sIHBhcnNlUGF0aCwgbWF0Y2hSb3V0ZXMsIEFjdGlvbiwgVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoLCBzdHJpcEJhc2VuYW1lLCBJRExFX0JMT0NLRVIsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBjcmVhdGVNZW1vcnlIaXN0b3J5LCBBYm9ydGVkRGVmZXJyZWRFcnJvciwgY3JlYXRlUm91dGVyIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSwgY3JlYXRlUGF0aCwgZGVmZXIsIGdlbmVyYXRlUGF0aCwgaXNSb3V0ZUVycm9yUmVzcG9uc2UsIGpzb24sIG1hdGNoUGF0aCwgbWF0Y2hSb3V0ZXMsIHBhcnNlUGF0aCwgcmVkaXJlY3QsIHJlZGlyZWN0RG9jdW1lbnQsIHJlc29sdmVQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmNvbnN0IERhdGFSb3V0ZXJDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJEYXRhUm91dGVyXCI7XG59XG5jb25zdCBEYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuY29uc3QgQXdhaXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEF3YWl0Q29udGV4dC5kaXNwbGF5TmFtZSA9IFwiQXdhaXRcIjtcbn1cblxuLyoqXG4gKiBBIE5hdmlnYXRvciBpcyBhIFwibG9jYXRpb24gY2hhbmdlclwiOyBpdCdzIGhvdyB5b3UgZ2V0IHRvIGRpZmZlcmVudCBsb2NhdGlvbnMuXG4gKlxuICogRXZlcnkgaGlzdG9yeSBpbnN0YW5jZSBjb25mb3JtcyB0byB0aGUgTmF2aWdhdG9yIGludGVyZmFjZSwgYnV0IHRoZVxuICogZGlzdGluY3Rpb24gaXMgdXNlZnVsIHByaW1hcmlseSB3aGVuIGl0IGNvbWVzIHRvIHRoZSBsb3ctbGV2ZWwgYDxSb3V0ZXI+YCBBUElcbiAqIHdoZXJlIGJvdGggdGhlIGxvY2F0aW9uIGFuZCBhIG5hdmlnYXRvciBtdXN0IGJlIHByb3ZpZGVkIHNlcGFyYXRlbHkgaW4gb3JkZXJcbiAqIHRvIGF2b2lkIFwidGVhcmluZ1wiIHRoYXQgbWF5IG9jY3VyIGluIGEgc3VzcGVuc2UtZW5hYmxlZCBhcHAgaWYgdGhlIGFjdGlvblxuICogYW5kL29yIGxvY2F0aW9uIHdlcmUgdG8gYmUgcmVhZCBkaXJlY3RseSBmcm9tIHRoZSBoaXN0b3J5IGluc3RhbmNlLlxuICovXG5cbmNvbnN0IE5hdmlnYXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdmlnYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJOYXZpZ2F0aW9uXCI7XG59XG5jb25zdCBMb2NhdGlvbkNvbnRleHQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlQ29udGV4dChudWxsKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuY29uc3QgUm91dGVDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBvdXRsZXQ6IG51bGwsXG4gIG1hdGNoZXM6IFtdLFxuICBpc0RhdGFSb3V0ZTogZmFsc2Vcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5jb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVDb250ZXh0KG51bGwpO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZUVycm9yQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiUm91dGVFcnJvclwiO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGZ1bGwgaHJlZiBmb3IgdGhlIGdpdmVuIFwidG9cIiB2YWx1ZS4gVGhpcyBpcyB1c2VmdWwgZm9yIGJ1aWxkaW5nXG4gKiBjdXN0b20gbGlua3MgdGhhdCBhcmUgYWxzbyBhY2Nlc3NpYmxlIGFuZCBwcmVzZXJ2ZSByaWdodC1jbGljayBiZWhhdmlvci5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1ocmVmXG4gKi9cbmZ1bmN0aW9uIHVzZUhyZWYodG8sIF90ZW1wKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICBcInVzZUhyZWYoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgaGFzaCxcbiAgICBwYXRobmFtZSxcbiAgICBzZWFyY2hcbiAgfSA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgam9pbmVkUGF0aG5hbWUgPSBwYXRobmFtZTtcblxuICAvLyBJZiB3ZSdyZSBvcGVyYXRpbmcgd2l0aGluIGEgYmFzZW5hbWUsIHByZXBlbmQgaXQgdG8gdGhlIHBhdGhuYW1lIHByaW9yXG4gIC8vIHRvIGNyZWF0aW5nIHRoZSBocmVmLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZSB0aGUgcmF3XG4gIC8vIGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2VcbiAgLy8gb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gIGlmIChiYXNlbmFtZSAhPT0gXCIvXCIpIHtcbiAgICBqb2luZWRQYXRobmFtZSA9IHBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aG5hbWVdKTtcbiAgfVxuICByZXR1cm4gbmF2aWdhdG9yLmNyZWF0ZUhyZWYoe1xuICAgIHBhdGhuYW1lOiBqb2luZWRQYXRobmFtZSxcbiAgICBzZWFyY2gsXG4gICAgaGFzaFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhpcyBjb21wb25lbnQgaXMgYSBkZXNjZW5kYW50IG9mIGEgYDxSb3V0ZXI+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1pbi1yb3V0ZXItY29udGV4dFxuICovXG5mdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5mdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuXCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0aW9uLXR5cGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvblR5cGUoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubmF2aWdhdGlvblR5cGU7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIFBhdGhNYXRjaCBvYmplY3QgaWYgdGhlIGdpdmVuIHBhdHRlcm4gbWF0Y2hlcyB0aGUgY3VycmVudCBVUkwuXG4gKiBUaGlzIGlzIHVzZWZ1bCBmb3IgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8ga25vdyBcImFjdGl2ZVwiIHN0YXRlLCBlLmcuXG4gKiBgPE5hdkxpbms+YC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5mdW5jdGlvbiB1c2VNYXRjaChwYXR0ZXJuKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTWF0Y2goKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIHBhdGhuYW1lXG4gIH0gPSB1c2VMb2NhdGlvbigpO1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBtYXRjaFBhdGgocGF0dGVybiwgcGF0aG5hbWUpLCBbcGF0aG5hbWUsIHBhdHRlcm5dKTtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cblxuY29uc3QgbmF2aWdhdGVFZmZlY3RXYXJuaW5nID0gXCJZb3Ugc2hvdWxkIGNhbGwgbmF2aWdhdGUoKSBpbiBhIFJlYWN0LnVzZUVmZmVjdCgpLCBub3Qgd2hlbiBcIiArIFwieW91ciBjb21wb25lbnQgaXMgZmlyc3QgcmVuZGVyZWQuXCI7XG5cbi8vIE11dGUgd2FybmluZ3MgZm9yIGNhbGxzIHRvIHVzZU5hdmlnYXRlIGluIFNTUiBlbnZpcm9ubWVudHNcbmZ1bmN0aW9uIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoY2IpIHtcbiAgbGV0IGlzU3RhdGljID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljO1xuICBpZiAoIWlzU3RhdGljKSB7XG4gICAgLy8gV2Ugc2hvdWxkIGJlIGFibGUgdG8gZ2V0IHJpZCBvZiB0aGlzIG9uY2UgcmVhY3QgMTguMyBpcyByZWxlYXNlZFxuICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjYzOTVcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoY2IpO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IGA8TGluaz5gcywgYnV0XG4gKiBtYXkgYWxzbyBiZSB1c2VkIGJ5IG90aGVyIGVsZW1lbnRzIHRvIGNoYW5nZSB0aGUgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtbmF2aWdhdGVcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGUoKSB7XG4gIGxldCB7XG4gICAgaXNEYXRhUm91dGVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgcmV0dXJuIGlzRGF0YVJvdXRlID8gdXNlTmF2aWdhdGVTdGFibGUoKSA6IHVzZU5hdmlnYXRlVW5zdGFibGUoKTtcbn1cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlVW5zdGFibGUoKSB7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwidXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZSxcbiAgICBmdXR1cmUsXG4gICAgbmF2aWdhdG9yXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgaGlzdG9yeSBsaXN0ZW5lciB5ZXRcbiAgICBpZiAoIWFjdGl2ZVJlZi5jdXJyZW50KSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgbmF2aWdhdG9yLmdvKHRvKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IHBhdGggPSByZXNvbHZlVG8odG8sIEpTT04ucGFyc2Uocm91dGVQYXRobmFtZXNKc29uKSwgbG9jYXRpb25QYXRobmFtZSwgb3B0aW9ucy5yZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuXG4gICAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgIC8vIHRvIGhhbmRpbmcgb2ZmIHRvIGhpc3RvcnkgKGJ1dCBvbmx5IGlmIHdlJ3JlIG5vdCBpbiBhIGRhdGEgcm91dGVyLFxuICAgIC8vIG90aGVyd2lzZSBpdCdsbCBwcmVwZW5kIHRoZSBiYXNlbmFtZSBpbnNpZGUgb2YgdGhlIHJvdXRlcikuXG4gICAgLy8gSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiB3ZSBuYXZpZ2F0ZSB0byB0aGUgcmF3IGJhc2VuYW1lXG4gICAgLy8gd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGwgY29udHJvbCBvdmVyIHRoZSBwcmVzZW5jZSBvZiBhXG4gICAgLy8gdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICAgIGlmIChkYXRhUm91dGVyQ29udGV4dCA9PSBudWxsICYmIGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgICAgcGF0aC5wYXRobmFtZSA9IHBhdGgucGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRoLnBhdGhuYW1lXSk7XG4gICAgfVxuICAgICghIW9wdGlvbnMucmVwbGFjZSA/IG5hdmlnYXRvci5yZXBsYWNlIDogbmF2aWdhdG9yLnB1c2gpKHBhdGgsIG9wdGlvbnMuc3RhdGUsIG9wdGlvbnMpO1xuICB9LCBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCBkYXRhUm91dGVyQ29udGV4dF0pO1xuICByZXR1cm4gbmF2aWdhdGU7XG59XG5jb25zdCBPdXRsZXRDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cbmZ1bmN0aW9uIHVzZU91dGxldENvbnRleHQoKSB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KE91dGxldENvbnRleHQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgZm9yIHRoZSBjaGlsZCByb3V0ZSBhdCB0aGlzIGxldmVsIG9mIHRoZSByb3V0ZVxuICogaGllcmFyY2h5LiBVc2VkIGludGVybmFsbHkgYnkgYDxPdXRsZXQ+YCB0byByZW5kZXIgY2hpbGQgcm91dGVzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldFxuICovXG5mdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dCkge1xuICBsZXQgb3V0bGV0ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpLm91dGxldDtcbiAgaWYgKG91dGxldCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChPdXRsZXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogY29udGV4dFxuICAgIH0sIG91dGxldCk7XG4gIH1cbiAgcmV0dXJuIG91dGxldDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnRcbiAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHJvdXRlTWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV07XG4gIHJldHVybiByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXJhbXMgOiB7fTtcbn1cblxuLyoqXG4gKiBSZXNvbHZlcyB0aGUgcGF0aG5hbWUgb2YgdGhlIGdpdmVuIGB0b2AgdmFsdWUgYWdhaW5zdCB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1yZXNvbHZlZC1wYXRoXG4gKi9cbmZ1bmN0aW9uIHVzZVJlc29sdmVkUGF0aCh0bywgX3RlbXAyKSB7XG4gIGxldCB7XG4gICAgcmVsYXRpdmVcbiAgfSA9IF90ZW1wMiA9PT0gdm9pZCAwID8ge30gOiBfdGVtcDI7XG4gIGxldCB7XG4gICAgZnV0dXJlXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHtcbiAgICBtYXRjaGVzXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IGxvY2F0aW9uUGF0aG5hbWVcbiAgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCByb3V0ZVBhdGhuYW1lc0pzb24gPSBKU09OLnN0cmluZ2lmeShVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gcmVzb2x2ZVRvKHRvLCBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksIGxvY2F0aW9uUGF0aG5hbWUsIHJlbGF0aXZlID09PSBcInBhdGhcIiksIFt0bywgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZV0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVsZW1lbnQgb2YgdGhlIHJvdXRlIHRoYXQgbWF0Y2hlZCB0aGUgY3VycmVudCBsb2NhdGlvbiwgcHJlcGFyZWRcbiAqIHdpdGggdGhlIGNvcnJlY3QgY29udGV4dCB0byByZW5kZXIgdGhlIHJlbWFpbmRlciBvZiB0aGUgcm91dGUgdHJlZS4gUm91dGVcbiAqIGVsZW1lbnRzIGluIHRoZSB0cmVlIG11c3QgcmVuZGVyIGFuIGA8T3V0bGV0PmAgdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uQXJnKSB7XG4gIHJldHVybiB1c2VSb3V0ZXNJbXBsKHJvdXRlcywgbG9jYXRpb25BcmcpO1xufVxuXG4vLyBJbnRlcm5hbCBpbXBsZW1lbnRhdGlvbiB3aXRoIGFjY2VwdCBvcHRpb25hbCBwYXJhbSBmb3IgUm91dGVyUHJvdmlkZXIgdXNhZ2VcbmZ1bmN0aW9uIHVzZVJvdXRlc0ltcGwocm91dGVzLCBsb2NhdGlvbkFyZywgZGF0YVJvdXRlclN0YXRlLCBmdXR1cmUpIHtcbiAgIXVzZUluUm91dGVyQ29udGV4dCgpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgXCJ1c2VSb3V0ZXMoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG5hdmlnYXRvclxuICB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCB7XG4gICAgbWF0Y2hlczogcGFyZW50TWF0Y2hlc1xuICB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIC8vIFlvdSB3b24ndCBnZXQgYSB3YXJuaW5nIGFib3V0IDIgZGlmZmVyZW50IDxSb3V0ZXM+IHVuZGVyIGEgPFJvdXRlPlxuICAgIC8vIHdpdGhvdXQgYSB0cmFpbGluZyAqLCBidXQgdGhpcyBpcyBhIGJlc3QtZWZmb3J0IHdhcm5pbmcgYW55d2F5IHNpbmNlIHdlXG4gICAgLy8gY2Fubm90IGV2ZW4gZ2l2ZSB0aGUgd2FybmluZyB1bmxlc3MgdGhleSBsYW5kIGF0IHRoZSBwYXJlbnQgcm91dGUuXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vXG4gICAgLy8gPFJvdXRlcz5cbiAgICAvLyAgIHsvKiBUaGlzIHJvdXRlIHBhdGggTVVTVCBlbmQgd2l0aCAvKiBiZWNhdXNlIG90aGVyd2lzZVxuICAgIC8vICAgICAgIGl0IHdpbGwgbmV2ZXIgbWF0Y2ggL2Jsb2cvcG9zdC8xMjMgKi99XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2dcIiBlbGVtZW50PXs8QmxvZyAvPn0gLz5cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZy9mZWVkXCIgZWxlbWVudD17PEJsb2dGZWVkIC8+fSAvPlxuICAgIC8vIDwvUm91dGVzPlxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gQmxvZygpIHtcbiAgICAvLyAgIHJldHVybiAoXG4gICAgLy8gICAgIDxSb3V0ZXM+XG4gICAgLy8gICAgICAgPFJvdXRlIHBhdGg9XCJwb3N0LzppZFwiIGVsZW1lbnQ9ezxQb3N0IC8+fSAvPlxuICAgIC8vICAgICA8L1JvdXRlcz5cbiAgICAvLyAgICk7XG4gICAgLy8gfVxuICAgIGxldCBwYXJlbnRQYXRoID0gcGFyZW50Um91dGUgJiYgcGFyZW50Um91dGUucGF0aCB8fCBcIlwiO1xuICAgIHdhcm5pbmdPbmNlKHBhcmVudFBhdGhuYW1lLCAhcGFyZW50Um91dGUgfHwgcGFyZW50UGF0aC5lbmRzV2l0aChcIipcIiksIFwiWW91IHJlbmRlcmVkIGRlc2NlbmRhbnQgPFJvdXRlcz4gKG9yIGNhbGxlZCBgdXNlUm91dGVzKClgKSBhdCBcIiArIChcIlxcXCJcIiArIHBhcmVudFBhdGhuYW1lICsgXCJcXFwiICh1bmRlciA8Um91dGUgcGF0aD1cXFwiXCIgKyBwYXJlbnRQYXRoICsgXCJcXFwiPikgYnV0IHRoZSBcIikgKyBcInBhcmVudCByb3V0ZSBwYXRoIGhhcyBubyB0cmFpbGluZyBcXFwiKlxcXCIuIFRoaXMgbWVhbnMgaWYgeW91IG5hdmlnYXRlIFwiICsgXCJkZWVwZXIsIHRoZSBwYXJlbnQgd29uJ3QgbWF0Y2ggYW55bW9yZSBhbmQgdGhlcmVmb3JlIHRoZSBjaGlsZCBcIiArIFwicm91dGVzIHdpbGwgbmV2ZXIgcmVuZGVyLlxcblxcblwiICsgKFwiUGxlYXNlIGNoYW5nZSB0aGUgcGFyZW50IDxSb3V0ZSBwYXRoPVxcXCJcIiArIHBhcmVudFBhdGggKyBcIlxcXCI+IHRvIDxSb3V0ZSBcIikgKyAoXCJwYXRoPVxcXCJcIiArIChwYXJlbnRQYXRoID09PSBcIi9cIiA/IFwiKlwiIDogcGFyZW50UGF0aCArIFwiLypcIikgKyBcIlxcXCI+LlwiKSk7XG4gIH1cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbG9jYXRpb247XG4gIGlmIChsb2NhdGlvbkFyZykge1xuICAgIHZhciBfcGFyc2VkTG9jYXRpb25BcmckcGE7XG4gICAgbGV0IHBhcnNlZExvY2F0aW9uQXJnID0gdHlwZW9mIGxvY2F0aW9uQXJnID09PSBcInN0cmluZ1wiID8gcGFyc2VQYXRoKGxvY2F0aW9uQXJnKSA6IGxvY2F0aW9uQXJnO1xuICAgICEocGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIiB8fCAoKF9wYXJzZWRMb2NhdGlvbkFyZyRwYSA9IHBhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcnNlZExvY2F0aW9uQXJnJHBhLnN0YXJ0c1dpdGgocGFyZW50UGF0aG5hbWVCYXNlKSkpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgXCJXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIGA8Um91dGVzIGxvY2F0aW9uPmAgb3IgYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKWAsIFwiICsgXCJ0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgXCIgKyAoXCJtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFxcXCJcIiArIHBhcmVudFBhdGhuYW1lQmFzZSArIFwiXFxcIiBcIikgKyAoXCJidXQgcGF0aG5hbWUgXFxcIlwiICsgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWUgKyBcIlxcXCIgd2FzIGdpdmVuIGluIHRoZSBgbG9jYXRpb25gIHByb3AuXCIpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG4gIGxldCBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lIHx8IFwiL1wiO1xuICBsZXQgcmVtYWluaW5nUGF0aG5hbWUgPSBwYXJlbnRQYXRobmFtZUJhc2UgPT09IFwiL1wiID8gcGF0aG5hbWUgOiBwYXRobmFtZS5zbGljZShwYXJlbnRQYXRobmFtZUJhc2UubGVuZ3RoKSB8fCBcIi9cIjtcbiAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhyb3V0ZXMsIHtcbiAgICBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWVcbiAgfSk7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhwYXJlbnRSb3V0ZSB8fCBtYXRjaGVzICE9IG51bGwsIFwiTm8gcm91dGVzIG1hdGNoZWQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhtYXRjaGVzID09IG51bGwgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmVsZW1lbnQgIT09IHVuZGVmaW5lZCB8fCBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ucm91dGUuQ29tcG9uZW50ICE9PSB1bmRlZmluZWQgfHwgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmxhenkgIT09IHVuZGVmaW5lZCwgXCJNYXRjaGVkIGxlYWYgcm91dGUgYXQgbG9jYXRpb24gXFxcIlwiICsgbG9jYXRpb24ucGF0aG5hbWUgKyBsb2NhdGlvbi5zZWFyY2ggKyBsb2NhdGlvbi5oYXNoICsgXCJcXFwiIFwiICsgXCJkb2VzIG5vdCBoYXZlIGFuIGVsZW1lbnQgb3IgQ29tcG9uZW50LiBUaGlzIG1lYW5zIGl0IHdpbGwgcmVuZGVyIGFuIDxPdXRsZXQgLz4gd2l0aCBhIFwiICsgXCJudWxsIHZhbHVlIGJ5IGRlZmF1bHQgcmVzdWx0aW5nIGluIGFuIFxcXCJlbXB0eVxcXCIgcGFnZS5cIikgOiB2b2lkIDA7XG4gIH1cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMgJiYgbWF0Y2hlcy5tYXAobWF0Y2ggPT4gT2JqZWN0LmFzc2lnbih7fSwgbWF0Y2gsIHtcbiAgICBwYXJhbXM6IE9iamVjdC5hc3NpZ24oe30sIHBhcmVudFBhcmFtcywgbWF0Y2gucGFyYW1zKSxcbiAgICBwYXRobmFtZTogam9pblBhdGhzKFtwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24obWF0Y2gucGF0aG5hbWUpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVdKSxcbiAgICBwYXRobmFtZUJhc2U6IG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgPyBwYXJlbnRQYXRobmFtZUJhc2UgOiBqb2luUGF0aHMoW3BhcmVudFBhdGhuYW1lQmFzZSxcbiAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbiA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lIDogbWF0Y2gucGF0aG5hbWVCYXNlXSlcbiAgfSkpLCBwYXJlbnRNYXRjaGVzLCBkYXRhUm91dGVyU3RhdGUsIGZ1dHVyZSk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZToge1xuICAgICAgICBsb2NhdGlvbjogX2V4dGVuZHMoe1xuICAgICAgICAgIHBhdGhuYW1lOiBcIi9cIixcbiAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgaGFzaDogXCJcIixcbiAgICAgICAgICBzdGF0ZTogbnVsbCxcbiAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiXG4gICAgICAgIH0sIGxvY2F0aW9uKSxcbiAgICAgICAgbmF2aWdhdGlvblR5cGU6IEFjdGlvbi5Qb3BcbiAgICAgIH1cbiAgICB9LCByZW5kZXJlZE1hdGNoZXMpO1xuICB9XG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5mdW5jdGlvbiBEZWZhdWx0RXJyb3JDb21wb25lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcikgPyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQgOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0ge1xuICAgIHBhZGRpbmc6IFwiMC41cmVtXCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGNvZGVTdHlsZXMgPSB7XG4gICAgcGFkZGluZzogXCIycHggNHB4XCIsXG4gICAgYmFja2dyb3VuZENvbG9yOiBsaWdodGdyZXlcbiAgfTtcbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIGhhbmRsZWQgYnkgUmVhY3QgUm91dGVyIGRlZmF1bHQgRXJyb3JCb3VuZGFyeTpcIiwgZXJyb3IpO1xuICAgIGRldkluZm8gPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiXFx1RDgzRFxcdURDQkYgSGV5IGRldmVsb3BlciBcXHVEODNEXFx1REM0QlwiKSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJwXCIsIG51bGwsIFwiWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzIGJ5IHByb3ZpZGluZyB5b3VyIG93biBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJFcnJvckJvdW5kYXJ5XCIpLCBcIiBvclwiLCBcIiBcIiwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJjb2RlXCIsIHtcbiAgICAgIHN0eWxlOiBjb2RlU3R5bGVzXG4gICAgfSwgXCJlcnJvckVsZW1lbnRcIiksIFwiIHByb3Agb24geW91ciByb3V0ZS5cIikpO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZWFjdC5GcmFnbWVudCwgbnVsbCwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJoMlwiLCBudWxsLCBcIlVuZXhwZWN0ZWQgQXBwbGljYXRpb24gRXJyb3IhXCIpLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImgzXCIsIHtcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCBtZXNzYWdlKSwgc3RhY2sgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcInByZVwiLCB7XG4gICAgc3R5bGU6IHByZVN0eWxlc1xuICB9LCBzdGFjaykgOiBudWxsLCBkZXZJbmZvKTtcbn1cbmNvbnN0IGRlZmF1bHRFcnJvckVsZW1lbnQgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEZWZhdWx0RXJyb3JDb21wb25lbnQsIG51bGwpO1xuY2xhc3MgUmVuZGVyRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBsb2NhdGlvbjogcHJvcHMubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvbixcbiAgICAgIGVycm9yOiBwcm9wcy5lcnJvclxuICAgIH07XG4gIH1cbiAgc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvcikge1xuICAgIHJldHVybiB7XG4gICAgICBlcnJvcjogZXJyb3JcbiAgICB9O1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgLy8gV2hlbiB3ZSBnZXQgaW50byBhbiBlcnJvciBzdGF0ZSwgdGhlIHVzZXIgd2lsbCBsaWtlbHkgY2xpY2sgXCJiYWNrXCIgdG8gdGhlXG4gICAgLy8gcHJldmlvdXMgcGFnZSB0aGF0IGRpZG4ndCBoYXZlIGFuIGVycm9yLiBCZWNhdXNlIHRoaXMgd3JhcHMgdGhlIGVudGlyZVxuICAgIC8vIGFwcGxpY2F0aW9uLCB0aGF0IHdpbGwgaGF2ZSBubyBlZmZlY3QtLXRoZSBlcnJvciBwYWdlIGNvbnRpbnVlcyB0byBkaXNwbGF5LlxuICAgIC8vIFRoaXMgZ2l2ZXMgdXMgYSBtZWNoYW5pc20gdG8gcmVjb3ZlciBmcm9tIHRoZSBlcnJvciB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzLlxuICAgIC8vXG4gICAgLy8gV2hldGhlciB3ZSdyZSBpbiBhbiBlcnJvciBzdGF0ZSBvciBub3QsIHdlIHVwZGF0ZSB0aGUgbG9jYXRpb24gaW4gc3RhdGVcbiAgICAvLyBzbyB0aGF0IHdoZW4gd2UgYXJlIGluIGFuIGVycm9yIHN0YXRlLCBpdCBnZXRzIHJlc2V0IHdoZW4gYSBuZXcgbG9jYXRpb25cbiAgICAvLyBjb21lcyBpbiBhbmQgdGhlIHVzZXIgcmVjb3ZlcnMgZnJvbSB0aGUgZXJyb3IuXG4gICAgaWYgKHN0YXRlLmxvY2F0aW9uICE9PSBwcm9wcy5sb2NhdGlvbiB8fCBzdGF0ZS5yZXZhbGlkYXRpb24gIT09IFwiaWRsZVwiICYmIHByb3BzLnJldmFsaWRhdGlvbiA9PT0gXCJpZGxlXCIpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRpb246IHByb3BzLnJldmFsaWRhdGlvblxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yICE9PSB1bmRlZmluZWQgPyBwcm9wcy5lcnJvciA6IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgICAgcmV2YWxpZGF0aW9uOiBwcm9wcy5yZXZhbGlkYXRpb24gfHwgc3RhdGUucmV2YWxpZGF0aW9uXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsIGVycm9yLCBlcnJvckluZm8pO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5zdGF0ZS5lcnJvciAhPT0gdW5kZWZpbmVkID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICB2YWx1ZTogdGhpcy5wcm9wcy5yb3V0ZUNvbnRleHRcbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHRoaXMuc3RhdGUuZXJyb3IsXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jb21wb25lbnRcbiAgICB9KSkgOiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG59XG5mdW5jdGlvbiBSZW5kZXJlZFJvdXRlKF9yZWYpIHtcbiAgbGV0IHtcbiAgICByb3V0ZUNvbnRleHQsXG4gICAgbWF0Y2gsXG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuXG4gIC8vIFRyYWNrIGhvdyBkZWVwIHdlIGdvdCBpbiBvdXIgcmVuZGVyIHBhc3MgdG8gZW11bGF0ZSBTU1IgY29tcG9uZW50RGlkQ2F0Y2hcbiAgLy8gaW4gYSBEYXRhU3RhdGljUm91dGVyXG4gIGlmIChkYXRhUm91dGVyQ29udGV4dCAmJiBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiYgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dCAmJiAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkpKSB7XG4gICAgZGF0YVJvdXRlckNvbnRleHQuc3RhdGljQ29udGV4dC5fZGVlcGVzdFJlbmRlcmVkQm91bmRhcnlJZCA9IG1hdGNoLnJvdXRlLmlkO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogcm91dGVDb250ZXh0XG4gIH0sIGNoaWxkcmVuKTtcbn1cbmZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKG1hdGNoZXMsIHBhcmVudE1hdGNoZXMsIGRhdGFSb3V0ZXJTdGF0ZSwgZnV0dXJlKSB7XG4gIHZhciBfZGF0YVJvdXRlclN0YXRlMjtcbiAgaWYgKHBhcmVudE1hdGNoZXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmVudE1hdGNoZXMgPSBbXTtcbiAgfVxuICBpZiAoZGF0YVJvdXRlclN0YXRlID09PSB2b2lkIDApIHtcbiAgICBkYXRhUm91dGVyU3RhdGUgPSBudWxsO1xuICB9XG4gIGlmIChmdXR1cmUgPT09IHZvaWQgMCkge1xuICAgIGZ1dHVyZSA9IG51bGw7XG4gIH1cbiAgaWYgKG1hdGNoZXMgPT0gbnVsbCkge1xuICAgIHZhciBfZGF0YVJvdXRlclN0YXRlO1xuICAgIGlmICgoX2RhdGFSb3V0ZXJTdGF0ZSA9IGRhdGFSb3V0ZXJTdGF0ZSkgIT0gbnVsbCAmJiBfZGF0YVJvdXRlclN0YXRlLmVycm9ycykge1xuICAgICAgLy8gRG9uJ3QgYmFpbCBpZiB3ZSBoYXZlIGRhdGEgcm91dGVyIGVycm9ycyBzbyB3ZSBjYW4gcmVuZGVyIHRoZW0gaW4gdGhlXG4gICAgICAvLyBib3VuZGFyeS4gIFVzZSB0aGUgcHJlLW1hdGNoZWQgKG9yIHNoaW1tZWQpIG1hdGNoZXNcbiAgICAgIG1hdGNoZXMgPSBkYXRhUm91dGVyU3RhdGUubWF0Y2hlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBtYXRjaGVzO1xuXG4gIC8vIElmIHdlIGhhdmUgZGF0YSBlcnJvcnMsIHRyaW0gbWF0Y2hlcyB0byB0aGUgaGlnaGVzdCBlcnJvciBib3VuZGFyeVxuICBsZXQgZXJyb3JzID0gKF9kYXRhUm91dGVyU3RhdGUyID0gZGF0YVJvdXRlclN0YXRlKSA9PSBudWxsID8gdm9pZCAwIDogX2RhdGFSb3V0ZXJTdGF0ZTIuZXJyb3JzO1xuICBpZiAoZXJyb3JzICE9IG51bGwpIHtcbiAgICBsZXQgZXJyb3JJbmRleCA9IHJlbmRlcmVkTWF0Y2hlcy5maW5kSW5kZXgobSA9PiBtLnJvdXRlLmlkICYmIChlcnJvcnMgPT0gbnVsbCA/IHZvaWQgMCA6IGVycm9yc1ttLnJvdXRlLmlkXSkpO1xuICAgICEoZXJyb3JJbmRleCA+PSAwKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQ291bGQgbm90IGZpbmQgYSBtYXRjaGluZyByb3V0ZSBmb3IgZXJyb3JzIG9uIHJvdXRlIElEczogXCIgKyBPYmplY3Qua2V5cyhlcnJvcnMpLmpvaW4oXCIsXCIpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZSgwLCBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSkpO1xuICB9XG5cbiAgLy8gSWYgd2UncmUgaW4gYSBwYXJ0aWFsIGh5ZHJhdGlvbiBtb2RlLCBkZXRlY3QgaWYgd2UgbmVlZCB0byByZW5kZXIgZG93biB0b1xuICAvLyBhIGdpdmVuIEh5ZHJhdGVGYWxsYmFjayB3aGlsZSB3ZSBsb2FkIHRoZSByZXN0IG9mIHRoZSBoeWRyYXRpb24gZGF0YVxuICBsZXQgcmVuZGVyRmFsbGJhY2sgPSBmYWxzZTtcbiAgbGV0IGZhbGxiYWNrSW5kZXggPSAtMTtcbiAgaWYgKGRhdGFSb3V0ZXJTdGF0ZSAmJiBmdXR1cmUgJiYgZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmVkTWF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG1hdGNoID0gcmVuZGVyZWRNYXRjaGVzW2ldO1xuICAgICAgLy8gVHJhY2sgdGhlIGRlZXBlc3QgZmFsbGJhY2sgdXAgdW50aWwgdGhlIGZpcnN0IHJvdXRlIHdpdGhvdXQgZGF0YVxuICAgICAgaWYgKG1hdGNoLnJvdXRlLkh5ZHJhdGVGYWxsYmFjayB8fCBtYXRjaC5yb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50KSB7XG4gICAgICAgIGZhbGxiYWNrSW5kZXggPSBpO1xuICAgICAgfVxuICAgICAgaWYgKG1hdGNoLnJvdXRlLmlkKSB7XG4gICAgICAgIGxldCB7XG4gICAgICAgICAgbG9hZGVyRGF0YSxcbiAgICAgICAgICBlcnJvcnNcbiAgICAgICAgfSA9IGRhdGFSb3V0ZXJTdGF0ZTtcbiAgICAgICAgbGV0IG5lZWRzVG9SdW5Mb2FkZXIgPSBtYXRjaC5yb3V0ZS5sb2FkZXIgJiYgbG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZCAmJiAoIWVycm9ycyB8fCBlcnJvcnNbbWF0Y2gucm91dGUuaWRdID09PSB1bmRlZmluZWQpO1xuICAgICAgICBpZiAobWF0Y2gucm91dGUubGF6eSB8fCBuZWVkc1RvUnVuTG9hZGVyKSB7XG4gICAgICAgICAgLy8gV2UgZm91bmQgdGhlIGZpcnN0IHJvdXRlIHRoYXQncyBub3QgcmVhZHkgdG8gcmVuZGVyICh3YWl0aW5nIG9uXG4gICAgICAgICAgLy8gbGF6eSwgb3IgaGFzIGEgbG9hZGVyIHRoYXQgaGFzbid0IHJ1biB5ZXQpLiAgRmxhZyB0aGF0IHdlIG5lZWQgdG9cbiAgICAgICAgICAvLyByZW5kZXIgYSBmYWxsYmFjayBhbmQgcmVuZGVyIHVwIHVudGlsIHRoZSBhcHByb3ByaWF0ZSBmYWxsYmFja1xuICAgICAgICAgIHJlbmRlckZhbGxiYWNrID0gdHJ1ZTtcbiAgICAgICAgICBpZiAoZmFsbGJhY2tJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICByZW5kZXJlZE1hdGNoZXMgPSByZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgZmFsbGJhY2tJbmRleCArIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXJlZE1hdGNoZXMgPSBbcmVuZGVyZWRNYXRjaGVzWzBdXTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICAvLyBPbmx5IGRhdGEgcm91dGVycyBoYW5kbGUgZXJyb3JzL2ZhbGxiYWNrc1xuICAgIGxldCBlcnJvcjtcbiAgICBsZXQgc2hvdWxkUmVuZGVySHlkcmF0ZUZhbGxiYWNrID0gZmFsc2U7XG4gICAgbGV0IGVycm9yRWxlbWVudCA9IG51bGw7XG4gICAgbGV0IGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBudWxsO1xuICAgIGlmIChkYXRhUm91dGVyU3RhdGUpIHtcbiAgICAgIGVycm9yID0gZXJyb3JzICYmIG1hdGNoLnJvdXRlLmlkID8gZXJyb3JzW21hdGNoLnJvdXRlLmlkXSA6IHVuZGVmaW5lZDtcbiAgICAgIGVycm9yRWxlbWVudCA9IG1hdGNoLnJvdXRlLmVycm9yRWxlbWVudCB8fCBkZWZhdWx0RXJyb3JFbGVtZW50O1xuICAgICAgaWYgKHJlbmRlckZhbGxiYWNrKSB7XG4gICAgICAgIGlmIChmYWxsYmFja0luZGV4IDwgMCAmJiBpbmRleCA9PT0gMCkge1xuICAgICAgICAgIHdhcm5pbmdPbmNlKFwicm91dGUtZmFsbGJhY2tcIiwgZmFsc2UsIFwiTm8gYEh5ZHJhdGVGYWxsYmFja2AgZWxlbWVudCBwcm92aWRlZCB0byByZW5kZXIgZHVyaW5nIGluaXRpYWwgaHlkcmF0aW9uXCIpO1xuICAgICAgICAgIHNob3VsZFJlbmRlckh5ZHJhdGVGYWxsYmFjayA9IHRydWU7XG4gICAgICAgICAgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudCA9IG51bGw7XG4gICAgICAgIH0gZWxzZSBpZiAoZmFsbGJhY2tJbmRleCA9PT0gaW5kZXgpIHtcbiAgICAgICAgICBzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQgPSBtYXRjaC5yb3V0ZS5oeWRyYXRlRmFsbGJhY2tFbGVtZW50IHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbGV0IG1hdGNoZXMgPSBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSk7XG4gICAgbGV0IGdldENoaWxkcmVuID0gKCkgPT4ge1xuICAgICAgbGV0IGNoaWxkcmVuO1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNoaWxkcmVuID0gZXJyb3JFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2spIHtcbiAgICAgICAgY2hpbGRyZW4gPSBoeWRyYXRlRmFsbGJhY2tFbGVtZW50O1xuICAgICAgfSBlbHNlIGlmIChtYXRjaC5yb3V0ZS5Db21wb25lbnQpIHtcbiAgICAgICAgLy8gTm90ZTogVGhpcyBpcyBhIGRlLW9wdGltaXplZCBwYXRoIHNpbmNlIFJlYWN0IHdvbid0IHJlLXVzZSB0aGVcbiAgICAgICAgLy8gUmVhY3RFbGVtZW50IHNpbmNlIGl0J3MgaWRlbnRpdHkgY2hhbmdlcyB3aXRoIGVhY2ggbmV3XG4gICAgICAgIC8vIFJlYWN0LmNyZWF0ZUVsZW1lbnQgY2FsbC4gIFdlIGtlZXAgdGhpcyBzbyBmb2xrcyBjYW4gdXNlXG4gICAgICAgIC8vIGA8Um91dGUgQ29tcG9uZW50PXsuLi59PmAgaW4gYDxSb3V0ZXM+YCBidXQgZ2VuZXJhbGx5IGBDb21wb25lbnRgXG4gICAgICAgIC8vIHVzYWdlIGlzIG9ubHkgYWR2aXNlZCBpbiBgUm91dGVyUHJvdmlkZXJgIHdoZW4gd2UgY2FuIGNvbnZlcnQgaXQgdG9cbiAgICAgICAgLy8gYGVsZW1lbnRgIGFoZWFkIG9mIHRpbWUuXG4gICAgICAgIGNoaWxkcmVuID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQobWF0Y2gucm91dGUuQ29tcG9uZW50LCBudWxsKTtcbiAgICAgIH0gZWxzZSBpZiAobWF0Y2gucm91dGUuZWxlbWVudCkge1xuICAgICAgICBjaGlsZHJlbiA9IG1hdGNoLnJvdXRlLmVsZW1lbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjaGlsZHJlbiA9IG91dGxldDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZW5kZXJlZFJvdXRlLCB7XG4gICAgICAgIG1hdGNoOiBtYXRjaCxcbiAgICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgICAgb3V0bGV0LFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgaXNEYXRhUm91dGU6IGRhdGFSb3V0ZXJTdGF0ZSAhPSBudWxsXG4gICAgICAgIH0sXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfTtcbiAgICAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCBvbiB0aGlzIHJvdXRlLiAgT3RoZXJ3aXNlIGxldCBpdCBidWJibGUgdXAgdG9cbiAgICAvLyBhbiBhbmNlc3RvciBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudFxuICAgIHJldHVybiBkYXRhUm91dGVyU3RhdGUgJiYgKG1hdGNoLnJvdXRlLkVycm9yQm91bmRhcnkgfHwgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlbmRlckVycm9yQm91bmRhcnksIHtcbiAgICAgIGxvY2F0aW9uOiBkYXRhUm91dGVyU3RhdGUubG9jYXRpb24sXG4gICAgICByZXZhbGlkYXRpb246IGRhdGFSb3V0ZXJTdGF0ZS5yZXZhbGlkYXRpb24sXG4gICAgICBjb21wb25lbnQ6IGVycm9yRWxlbWVudCxcbiAgICAgIGVycm9yOiBlcnJvcixcbiAgICAgIGNoaWxkcmVuOiBnZXRDaGlsZHJlbigpLFxuICAgICAgcm91dGVDb250ZXh0OiB7XG4gICAgICAgIG91dGxldDogbnVsbCxcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgaXNEYXRhUm91dGU6IHRydWVcbiAgICAgIH1cbiAgICB9KSA6IGdldENoaWxkcmVuKCk7XG4gIH0sIG51bGwpO1xufVxudmFyIERhdGFSb3V0ZXJIb29rID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChEYXRhUm91dGVySG9vaykge1xuICBEYXRhUm91dGVySG9va1tcIlVzZUJsb2NrZXJcIl0gPSBcInVzZUJsb2NrZXJcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VSZXZhbGlkYXRvclwiXSA9IFwidXNlUmV2YWxpZGF0b3JcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VOYXZpZ2F0ZVN0YWJsZVwiXSA9IFwidXNlTmF2aWdhdGVcIjtcbiAgcmV0dXJuIERhdGFSb3V0ZXJIb29rO1xufShEYXRhUm91dGVySG9vayB8fCB7fSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vayA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQmxvY2tlclwiXSA9IFwidXNlQmxvY2tlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTG9hZGVyRGF0YVwiXSA9IFwidXNlTG9hZGVyRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlQWN0aW9uRGF0YVwiXSA9IFwidXNlQWN0aW9uRGF0YVwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVFcnJvclwiXSA9IFwidXNlUm91dGVFcnJvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGlvblwiXSA9IFwidXNlTmF2aWdhdGlvblwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlUm91dGVMb2FkZXJEYXRhXCJdID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZU1hdGNoZXNcIl0gPSBcInVzZU1hdGNoZXNcIjtcbiAgRGF0YVJvdXRlclN0YXRlSG9va1tcIlVzZVJldmFsaWRhdG9yXCJdID0gXCJ1c2VSZXZhbGlkYXRvclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlTmF2aWdhdGVTdGFibGVcIl0gPSBcInVzZU5hdmlnYXRlXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VSb3V0ZUlkXCJdID0gXCJ1c2VSb3V0ZUlkXCI7XG4gIHJldHVybiBEYXRhUm91dGVyU3RhdGVIb29rO1xufShEYXRhUm91dGVyU3RhdGVIb29rIHx8IHt9KTtcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgIWN0eCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gY3R4O1xufVxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlclN0YXRlKGhvb2tOYW1lKSB7XG4gIGxldCBzdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICFzdGF0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gc3RhdGU7XG59XG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICAhcm91dGUgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG4vLyBJbnRlcm5hbCB2ZXJzaW9uIHdpdGggaG9va05hbWUtYXdhcmUgZGVidWdnaW5nXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZSkge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICAhdGhpc1JvdXRlLnJvdXRlLmlkID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgaG9va05hbWUgKyBcIiBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIElEIGZvciB0aGUgbmVhcmVzdCBjb250ZXh0dWFsIHJvdXRlXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlSWQoKSB7XG4gIHJldHVybiB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlSWQpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuZnVuY3Rpb24gdXNlTmF2aWdhdGlvbigpIHtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTmF2aWdhdGlvbik7XG4gIHJldHVybiBzdGF0ZS5uYXZpZ2F0aW9uO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSByZXZhbGlkYXRlIGZ1bmN0aW9uIGZvciBtYW51YWxseSB0cmlnZ2VyaW5nIHJldmFsaWRhdGlvbiwgYXMgd2VsbFxuICogYXMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgYW55IG1hbnVhbCByZXZhbGlkYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVJldmFsaWRhdG9yKCkge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VSZXZhbGlkYXRvcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgcmV0dXJuIFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByZXZhbGlkYXRlOiBkYXRhUm91dGVyQ29udGV4dC5yb3V0ZXIucmV2YWxpZGF0ZSxcbiAgICBzdGF0ZTogc3RhdGUucmV2YWxpZGF0aW9uXG4gIH0pLCBbZGF0YVJvdXRlckNvbnRleHQucm91dGVyLnJldmFsaWRhdGUsIHN0YXRlLnJldmFsaWRhdGlvbl0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLCB1c2VmdWwgZm9yIGFjY2Vzc2luZyBsb2FkZXJEYXRhIGZvclxuICogcGFyZW50L2NoaWxkIHJvdXRlcyBvciB0aGUgcm91dGUgXCJoYW5kbGVcIiBwcm9wZXJ0eVxuICovXG5mdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQge1xuICAgIG1hdGNoZXMsXG4gICAgbG9hZGVyRGF0YVxuICB9ID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTWF0Y2hlcyk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKCgpID0+IG1hdGNoZXMubWFwKG0gPT4gVU5TQUZFX2NvbnZlcnRSb3V0ZU1hdGNoVG9VaU1hdGNoKG0sIGxvYWRlckRhdGEpKSwgW21hdGNoZXMsIGxvYWRlckRhdGFdKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXIgZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIHVzZUxvYWRlckRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIGlmIChzdGF0ZS5lcnJvcnMgJiYgc3RhdGUuZXJyb3JzW3JvdXRlSWRdICE9IG51bGwpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiWW91IGNhbm5vdCBgdXNlTG9hZGVyRGF0YWAgaW4gYW4gZXJyb3JFbGVtZW50IChyb3V0ZUlkOiBcIiArIHJvdXRlSWQgKyBcIilcIik7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBsb2FkZXJEYXRhIGZvciB0aGUgZ2l2ZW4gcm91dGVJZFxuICovXG5mdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUxvYWRlckRhdGEpO1xuICByZXR1cm4gc3RhdGUubG9hZGVyRGF0YVtyb3V0ZUlkXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhY3Rpb24gZGF0YSBmb3IgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgYWN0aW9uXG4gKi9cbmZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5hY3Rpb25EYXRhID8gc3RhdGUuYWN0aW9uRGF0YVtyb3V0ZUlkXSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBuZWFyZXN0IGFuY2VzdG9yIFJvdXRlIGVycm9yLCB3aGljaCBjb3VsZCBiZSBhIGxvYWRlci9hY3Rpb25cbiAqIGVycm9yIG9yIGEgcmVuZGVyIGVycm9yLiAgVGhpcyBpcyBpbnRlbmRlZCB0byBiZSBjYWxsZWQgZnJvbSB5b3VyXG4gKiBFcnJvckJvdW5kYXJ5L2Vycm9yRWxlbWVudCB0byBkaXNwbGF5IGEgcHJvcGVyIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmZ1bmN0aW9uIHVzZVJvdXRlRXJyb3IoKSB7XG4gIHZhciBfc3RhdGUkZXJyb3JzO1xuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcblxuICAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG4gIGlmIChlcnJvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9XG5cbiAgLy8gT3RoZXJ3aXNlIGxvb2sgZm9yIGVycm9ycyBmcm9tIG91ciBkYXRhIHJvdXRlciBzdGF0ZVxuICByZXR1cm4gKF9zdGF0ZSRlcnJvcnMgPSBzdGF0ZS5lcnJvcnMpID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZXJyb3JzW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhhcHB5LXBhdGggZGF0YSBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGA8QXdhaXQgLz5gIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jVmFsdWUoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZGF0YTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlcnJvciBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIGA8QXdhaXQgLz5gIHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHVzZUFzeW5jRXJyb3IoKSB7XG4gIGxldCB2YWx1ZSA9IFJlYWN0LnVzZUNvbnRleHQoQXdhaXRDb250ZXh0KTtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyB2b2lkIDAgOiB2YWx1ZS5fZXJyb3I7XG59XG5sZXQgYmxvY2tlcklkID0gMDtcblxuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5mdW5jdGlvbiB1c2VCbG9ja2VyKHNob3VsZEJsb2NrKSB7XG4gIGxldCB7XG4gICAgcm91dGVyLFxuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VCbG9ja2VyKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlQmxvY2tlcik7XG4gIGxldCBbYmxvY2tlcktleSwgc2V0QmxvY2tlcktleV0gPSBSZWFjdC51c2VTdGF0ZShcIlwiKTtcbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKGFyZyA9PiB7XG4gICAgaWYgKHR5cGVvZiBzaG91bGRCbG9jayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICByZXR1cm4gISFzaG91bGRCbG9jaztcbiAgICB9XG4gICAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikge1xuICAgICAgcmV0dXJuIHNob3VsZEJsb2NrKGFyZyk7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhleSBwcm92aWRlZCB1cyBhIGZ1bmN0aW9uIGFuZCB3ZSd2ZSBnb3QgYW4gYWN0aXZlIGJhc2VuYW1lLCBzdHJpcFxuICAgIC8vIGl0IGZyb20gdGhlIGxvY2F0aW9ucyB3ZSBleHBvc2UgdG8gdGhlIHVzZXIgdG8gbWF0Y2ggdGhlIGJlaGF2aW9yIG9mXG4gICAgLy8gdXNlTG9jYXRpb25cbiAgICBsZXQge1xuICAgICAgY3VycmVudExvY2F0aW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaGlzdG9yeUFjdGlvblxuICAgIH0gPSBhcmc7XG4gICAgcmV0dXJuIHNob3VsZEJsb2NrKHtcbiAgICAgIGN1cnJlbnRMb2NhdGlvbjogX2V4dGVuZHMoe30sIGN1cnJlbnRMb2NhdGlvbiwge1xuICAgICAgICBwYXRobmFtZTogc3RyaXBCYXNlbmFtZShjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWVcbiAgICAgIH0pLFxuICAgICAgbmV4dExvY2F0aW9uOiBfZXh0ZW5kcyh7fSwgbmV4dExvY2F0aW9uLCB7XG4gICAgICAgIHBhdGhuYW1lOiBzdHJpcEJhc2VuYW1lKG5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IG5leHRMb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksXG4gICAgICBoaXN0b3J5QWN0aW9uXG4gICAgfSk7XG4gIH0sIFtiYXNlbmFtZSwgc2hvdWxkQmxvY2tdKTtcblxuICAvLyBUaGlzIGVmZmVjdCBpcyBpbiBjaGFyZ2Ugb2YgYmxvY2tlciBrZXkgYXNzaWdubWVudCBhbmQgZGVsZXRpb24gKHdoaWNoIGlzXG4gIC8vIHRpZ2h0bHkgY291cGxlZCB0byB0aGUga2V5KVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBrZXkgPSBTdHJpbmcoKytibG9ja2VySWQpO1xuICAgIHNldEJsb2NrZXJLZXkoa2V5KTtcbiAgICByZXR1cm4gKCkgPT4gcm91dGVyLmRlbGV0ZUJsb2NrZXIoa2V5KTtcbiAgfSwgW3JvdXRlcl0pO1xuXG4gIC8vIFRoaXMgZWZmZWN0IGhhbmRsZXMgYXNzaWduaW5nIHRoZSBibG9ja2VyRnVuY3Rpb24uICBUaGlzIGlzIHRvIGhhbmRsZVxuICAvLyB1bnN0YWJsZSBibG9ja2VyIGZ1bmN0aW9uIGlkZW50aXRpZXMsIGFuZCBoYXBwZW5zIG9ubHkgYWZ0ZXIgdGhlIHByaW9yXG4gIC8vIGVmZmVjdCBzbyB3ZSBkb24ndCBnZXQgYW4gb3JwaGFuZWQgYmxvY2tlckZ1bmN0aW9uIGluIHRoZSByb3V0ZXIgd2l0aCBhXG4gIC8vIGtleSBvZiBcIlwiLiAgVW50aWwgdGhlbiB3ZSBqdXN0IGhhdmUgdGhlIElETEVfQkxPQ0tFUi5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlcktleSAhPT0gXCJcIikge1xuICAgICAgcm91dGVyLmdldEJsb2NrZXIoYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0pO1xuXG4gIC8vIFByZWZlciB0aGUgYmxvY2tlciBmcm9tIGBzdGF0ZWAgbm90IGByb3V0ZXIuc3RhdGVgIHNpbmNlIERhdGFSb3V0ZXJDb250ZXh0XG4gIC8vIGlzIG1lbW9pemVkIHNvIHRoaXMgZW5zdXJlcyB3ZSB1cGRhdGUgb24gYmxvY2tlciBzdGF0ZSB1cGRhdGVzXG4gIHJldHVybiBibG9ja2VyS2V5ICYmIHN0YXRlLmJsb2NrZXJzLmhhcyhibG9ja2VyS2V5KSA/IHN0YXRlLmJsb2NrZXJzLmdldChibG9ja2VyS2V5KSA6IElETEVfQkxPQ0tFUjtcbn1cblxuLyoqXG4gKiBTdGFibGUgdmVyc2lvbiBvZiB1c2VOYXZpZ2F0ZSB0aGF0IGlzIHVzZWQgd2hlbiB3ZSBhcmUgaW4gdGhlIGNvbnRleHQgb2ZcbiAqIGEgUm91dGVyUHJvdmlkZXIuXG4gKi9cbmZ1bmN0aW9uIHVzZU5hdmlnYXRlU3RhYmxlKCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlTmF2aWdhdGVTdGFibGUpO1xuICBsZXQgaWQgPSB1c2VDdXJyZW50Um91dGVJZChEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRlU3RhYmxlKTtcbiAgbGV0IGFjdGl2ZVJlZiA9IFJlYWN0LnVzZVJlZihmYWxzZSk7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG4gIGxldCBuYXZpZ2F0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKGZ1bmN0aW9uICh0bywgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoYWN0aXZlUmVmLmN1cnJlbnQsIG5hdmlnYXRlRWZmZWN0V2FybmluZykgOiB2b2lkIDA7XG5cbiAgICAvLyBTaG9ydCBjaXJjdWl0IGhlcmUgc2luY2UgaWYgdGhpcyBoYXBwZW5zIG9uIGZpcnN0IHJlbmRlciB0aGUgbmF2aWdhdGVcbiAgICAvLyBpcyB1c2VsZXNzIGJlY2F1c2Ugd2UgaGF2ZW4ndCB3aXJlZCB1cCBvdXIgcm91dGVyIHN1YnNjcmliZXIgeWV0XG4gICAgaWYgKCFhY3RpdmVSZWYuY3VycmVudCkgcmV0dXJuO1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0byk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywgX2V4dGVuZHMoe1xuICAgICAgICBmcm9tUm91dGVJZDogaWRcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGlkXSk7XG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cbmNvbnN0IGFscmVhZHlXYXJuZWQgPSB7fTtcbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleSwgY29uZCwgbWVzc2FnZSkge1xuICBpZiAoIWNvbmQgJiYgIWFscmVhZHlXYXJuZWRba2V5XSkge1xuICAgIGFscmVhZHlXYXJuZWRba2V5XSA9IHRydWU7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpIDogdm9pZCAwO1xuICB9XG59XG5cbi8qKlxuICBXZWJwYWNrICsgUmVhY3QgMTcgZmFpbHMgdG8gY29tcGlsZSBvbiBhbnkgb2YgdGhlIGZvbGxvd2luZyBiZWNhdXNlIHdlYnBhY2tcbiAgY29tcGxhaW5zIHRoYXQgYHN0YXJ0VHJhbnNpdGlvbmAgZG9lc24ndCBleGlzdCBpbiBgUmVhY3RgOlxuICAqIGltcG9ydCB7IHN0YXJ0VHJhbnNpdGlvbiB9IGZyb20gXCJyZWFjdFwiXG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0ID8gUmVhY3Quc3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0W1wic3RhcnRUcmFuc2l0aW9uXCJdKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIE1vdmluZyBpdCB0byBhIGNvbnN0YW50IHN1Y2ggYXMgdGhlIGZvbGxvd2luZyBzb2x2ZXMgdGhlIFdlYnBhY2svUmVhY3QgMTcgaXNzdWU6XG4gICogaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBmcm9tIFwicmVhY3RcIjtcbiAgICBjb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbiAgICBTVEFSVF9UUkFOU0lUSU9OIGluIFJlYWN0ID8gUmVhY3RbU1RBUlRfVFJBTlNJVElPTl0oKCkgPT4gc2V0U3RhdGUoKSkgOiBzZXRTdGF0ZSgpXG5cbiAgSG93ZXZlciwgdGhhdCBpbnRyb2R1Y2VzIHdlYnBhY2svdGVyc2VyIG1pbmlmaWNhdGlvbiBpc3N1ZXMgaW4gcHJvZHVjdGlvbiBidWlsZHNcbiAgaW4gUmVhY3QgMTggd2hlcmUgbWluaWZpY2F0aW9uL29iZnVzY2F0aW9uIGVuZHMgdXAgcmVtb3ZpbmcgdGhlIGNhbGwgb2ZcbiAgUmVhY3Quc3RhcnRUcmFuc2l0aW9uIGVudGlyZWx5IGZyb20gdGhlIGZpcnN0IGhhbGYgb2YgdGhlIHRlcm5hcnkuICBHcmFiYmluZ1xuICB0aGlzIGV4cG9ydGVkIHJlZmVyZW5jZSBvbmNlIHVwIGZyb250IHJlc29sdmVzIHRoYXQgaXNzdWUuXG5cbiAgU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVhY3Qtcm91dGVyL2lzc3Vlcy8xMDU3OVxuKi9cbmNvbnN0IFNUQVJUX1RSQU5TSVRJT04gPSBcInN0YXJ0VHJhbnNpdGlvblwiO1xuY29uc3Qgc3RhcnRUcmFuc2l0aW9uSW1wbCA9IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dO1xuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmZ1bmN0aW9uIFJvdXRlclByb3ZpZGVyKF9yZWYpIHtcbiAgbGV0IHtcbiAgICBmYWxsYmFja0VsZW1lbnQsXG4gICAgcm91dGVyLFxuICAgIGZ1dHVyZVxuICB9ID0gX3JlZjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHJvdXRlci5zdGF0ZSk7XG4gIGxldCB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uXG4gIH0gPSBmdXR1cmUgfHwge307XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKG5ld1N0YXRlID0+IHtcbiAgICBpZiAodjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICAgIHN0YXJ0VHJhbnNpdGlvbkltcGwoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gICAgfVxuICB9LCBbc2V0U3RhdGVJbXBsLCB2N19zdGFydFRyYW5zaXRpb25dKTtcblxuICAvLyBOZWVkIHRvIHVzZSBhIGxheW91dCBlZmZlY3QgaGVyZSBzbyB3ZSBhcmUgc3Vic2NyaWJlZCBlYXJseSBlbm91Z2ggdG9cbiAgLy8gcGljayB1cCBvbiBhbnkgcmVuZGVyLWRyaXZlbiByZWRpcmVjdHMvbmF2aWdhdGlvbnMgKHVzZUVmZmVjdC88TmF2aWdhdGU+KVxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gcm91dGVyLnN1YnNjcmliZShzZXRTdGF0ZSksIFtyb3V0ZXIsIHNldFN0YXRlXSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsbGJhY2tFbGVtZW50ID09IG51bGwgfHwgIXJvdXRlci5mdXR1cmUudjdfcGFydGlhbEh5ZHJhdGlvbiwgXCJgPFJvdXRlclByb3ZpZGVyIGZhbGxiYWNrRWxlbWVudD5gIGlzIGRlcHJlY2F0ZWQgd2hlbiB1c2luZyBcIiArIFwiYHY3X3BhcnRpYWxIeWRyYXRpb25gLCB1c2UgYSBgSHlkcmF0ZUZhbGxiYWNrYCBjb21wb25lbnQgaW5zdGVhZFwiKSA6IHZvaWQgMDtcbiAgICAvLyBPbmx5IGxvZyB0aGlzIG9uY2Ugb24gaW5pdGlhbCBtb3VudFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICBsZXQgbmF2aWdhdG9yID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNyZWF0ZUhyZWY6IHJvdXRlci5jcmVhdGVIcmVmLFxuICAgICAgZW5jb2RlTG9jYXRpb246IHJvdXRlci5lbmNvZGVMb2NhdGlvbixcbiAgICAgIGdvOiBuID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSksXG4gICAgICByZXBsYWNlOiAodG8sIHN0YXRlLCBvcHRzKSA9PiByb3V0ZXIubmF2aWdhdGUodG8sIHtcbiAgICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXRcbiAgICAgIH0pXG4gICAgfTtcbiAgfSwgW3JvdXRlcl0pO1xuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4gKHtcbiAgICByb3V0ZXIsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogZmFsc2UsXG4gICAgYmFzZW5hbWVcbiAgfSksIFtyb3V0ZXIsIG5hdmlnYXRvciwgYmFzZW5hbWVdKTtcblxuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGRhdGFSb3V0ZXJDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogc3RhdGVcbiAgfSwgLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGxvY2F0aW9uOiBzdGF0ZS5sb2NhdGlvbixcbiAgICBuYXZpZ2F0aW9uVHlwZTogc3RhdGUuaGlzdG9yeUFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IG5hdmlnYXRvcixcbiAgICBmdXR1cmU6IHtcbiAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiByb3V0ZXIuZnV0dXJlLnY3X3JlbGF0aXZlU3BsYXRQYXRoXG4gICAgfVxuICB9LCBzdGF0ZS5pbml0aWFsaXplZCB8fCByb3V0ZXIuZnV0dXJlLnY3X3BhcnRpYWxIeWRyYXRpb24gPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChEYXRhUm91dGVzLCB7XG4gICAgcm91dGVzOiByb3V0ZXIucm91dGVzLFxuICAgIGZ1dHVyZTogcm91dGVyLmZ1dHVyZSxcbiAgICBzdGF0ZTogc3RhdGVcbiAgfSkgOiBmYWxsYmFja0VsZW1lbnQpKSksIG51bGwpO1xufVxuZnVuY3Rpb24gRGF0YVJvdXRlcyhfcmVmMikge1xuICBsZXQge1xuICAgIHJvdXRlcyxcbiAgICBmdXR1cmUsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYyO1xuICByZXR1cm4gdXNlUm91dGVzSW1wbChyb3V0ZXMsIHVuZGVmaW5lZCwgc3RhdGUsIGZ1dHVyZSk7XG59XG4vKipcbiAqIEEgYDxSb3V0ZXI+YCB0aGF0IHN0b3JlcyBhbGwgZW50cmllcyBpbiBtZW1vcnkuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXItY29tcG9uZW50cy9tZW1vcnktcm91dGVyXG4gKi9cbmZ1bmN0aW9uIE1lbW9yeVJvdXRlcihfcmVmMykge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGluaXRpYWxFbnRyaWVzLFxuICAgIGluaXRpYWxJbmRleCxcbiAgICBmdXR1cmVcbiAgfSA9IF9yZWYzO1xuICBsZXQgaGlzdG9yeVJlZiA9IFJlYWN0LnVzZVJlZigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KHtcbiAgICAgIGluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEluZGV4LFxuICAgICAgdjVDb21wYXQ6IHRydWVcbiAgICB9KTtcbiAgfVxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL25hdmlnYXRlXG4gKi9cbmZ1bmN0aW9uIE5hdmlnYXRlKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgdG8sXG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICByZWxhdGl2ZVxuICB9ID0gX3JlZjQ7XG4gICF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mXG4gIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gIFwiPE5hdmlnYXRlPiBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGZ1dHVyZSxcbiAgICBzdGF0aWM6IGlzU3RhdGljXG4gIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoIWlzU3RhdGljLCBcIjxOYXZpZ2F0ZT4gbXVzdCBub3QgYmUgdXNlZCBvbiB0aGUgaW5pdGlhbCByZW5kZXIgaW4gYSA8U3RhdGljUm91dGVyPi4gXCIgKyBcIlRoaXMgaXMgYSBuby1vcCwgYnV0IHlvdSBzaG91bGQgbW9kaWZ5IHlvdXIgY29kZSBzbyB0aGUgPE5hdmlnYXRlPiBpcyBcIiArIFwib25seSBldmVyIHJlbmRlcmVkIGluIHJlc3BvbnNlIHRvIHNvbWUgdXNlciBpbnRlcmFjdGlvbiBvciBzdGF0ZSBjaGFuZ2UuXCIpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIG1hdGNoZXNcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZVxuICB9ID0gdXNlTG9jYXRpb24oKTtcbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcblxuICAvLyBSZXNvbHZlIHRoZSBwYXRoIG91dHNpZGUgb2YgdGhlIGVmZmVjdCBzbyB0aGF0IHdoZW4gZWZmZWN0cyBydW4gdHdpY2UgaW5cbiAgLy8gU3RyaWN0TW9kZSB0aGV5IG5hdmlnYXRlIHRvIHRoZSBzYW1lIHBsYWNlXG4gIGxldCBwYXRoID0gcmVzb2x2ZVRvKHRvLCBVTlNBRkVfZ2V0UmVzb2x2ZVRvTWF0Y2hlcyhtYXRjaGVzLCBmdXR1cmUudjdfcmVsYXRpdmVTcGxhdFBhdGgpLCBsb2NhdGlvblBhdGhuYW1lLCByZWxhdGl2ZSA9PT0gXCJwYXRoXCIpO1xuICBsZXQganNvblBhdGggPSBKU09OLnN0cmluZ2lmeShwYXRoKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IG5hdmlnYXRlKEpTT04ucGFyc2UoanNvblBhdGgpLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICByZWxhdGl2ZVxuICB9KSwgW25hdmlnYXRlLCBqc29uUGF0aCwgcmVsYXRpdmUsIHJlcGxhY2UsIHN0YXRlXSk7XG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBSZW5kZXJzIHRoZSBjaGlsZCByb3V0ZSdzIGVsZW1lbnQsIGlmIHRoZXJlIGlzIG9uZS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvb3V0bGV0XG4gKi9cbmZ1bmN0aW9uIE91dGxldChwcm9wcykge1xuICByZXR1cm4gdXNlT3V0bGV0KHByb3BzLmNvbnRleHQpO1xufVxuLyoqXG4gKiBEZWNsYXJlcyBhbiBlbGVtZW50IHRoYXQgc2hvdWxkIGJlIHJlbmRlcmVkIGF0IGEgY2VydGFpbiBVUkwgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVcbiAqL1xuZnVuY3Rpb24gUm91dGUoX3Byb3BzKSB7XG4gIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQSA8Um91dGU+IGlzIG9ubHkgZXZlciB0byBiZSB1c2VkIGFzIHRoZSBjaGlsZCBvZiA8Um91dGVzPiBlbGVtZW50LCBcIiArIFwibmV2ZXIgcmVuZGVyZWQgZGlyZWN0bHkuIFBsZWFzZSB3cmFwIHlvdXIgPFJvdXRlPiBpbiBhIDxSb3V0ZXM+LlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDtcbn1cbi8qKlxuICogUHJvdmlkZXMgbG9jYXRpb24gY29udGV4dCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqXG4gKiBOb3RlOiBZb3UgdXN1YWxseSB3b24ndCByZW5kZXIgYSBgPFJvdXRlcj5gIGRpcmVjdGx5LiBJbnN0ZWFkLCB5b3UnbGwgcmVuZGVyIGFcbiAqIHJvdXRlciB0aGF0IGlzIG1vcmUgc3BlY2lmaWMgdG8geW91ciBlbnZpcm9ubWVudCBzdWNoIGFzIGEgYDxCcm93c2VyUm91dGVyPmBcbiAqIGluIHdlYiBicm93c2VycyBvciBhIGA8U3RhdGljUm91dGVyPmAgZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXItY29tcG9uZW50cy9yb3V0ZXJcbiAqL1xuZnVuY3Rpb24gUm91dGVyKF9yZWY1KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lUHJvcCA9IFwiL1wiLFxuICAgIGNoaWxkcmVuID0gbnVsbCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICAgIG5hdmlnYXRpb25UeXBlID0gQWN0aW9uLlBvcCxcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBzdGF0aWNQcm9wID0gZmFsc2UsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmNTtcbiAgISF1c2VJblJvdXRlckNvbnRleHQoKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiWW91IGNhbm5vdCByZW5kZXIgYSA8Um91dGVyPiBpbnNpZGUgYW5vdGhlciA8Um91dGVyPi5cIiArIFwiIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuXG4gIC8vIFByZXNlcnZlIHRyYWlsaW5nIHNsYXNoZXMgb24gYmFzZW5hbWUsIHNvIHdlIGNhbiBsZXQgdGhlIHVzZXIgY29udHJvbFxuICAvLyB0aGUgZW5mb3JjZW1lbnQgb2YgdHJhaWxpbmcgc2xhc2hlcyB0aHJvdWdob3V0IHRoZSBhcHBcbiAgbGV0IGJhc2VuYW1lID0gYmFzZW5hbWVQcm9wLnJlcGxhY2UoL15cXC8qLywgXCIvXCIpO1xuICBsZXQgbmF2aWdhdGlvbkNvbnRleHQgPSBSZWFjdC51c2VNZW1vKCgpID0+ICh7XG4gICAgYmFzZW5hbWUsXG4gICAgbmF2aWdhdG9yLFxuICAgIHN0YXRpYzogc3RhdGljUHJvcCxcbiAgICBmdXR1cmU6IF9leHRlbmRzKHtcbiAgICAgIHY3X3JlbGF0aXZlU3BsYXRQYXRoOiBmYWxzZVxuICAgIH0sIGZ1dHVyZSlcbiAgfSksIFtiYXNlbmFtZSwgZnV0dXJlLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdKTtcbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuICBsZXQge1xuICAgIHBhdGhuYW1lID0gXCIvXCIsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgICBzdGF0ZSA9IG51bGwsXG4gICAga2V5ID0gXCJkZWZhdWx0XCJcbiAgfSA9IGxvY2F0aW9uUHJvcDtcbiAgbGV0IGxvY2F0aW9uQ29udGV4dCA9IFJlYWN0LnVzZU1lbW8oKCkgPT4ge1xuICAgIGxldCB0cmFpbGluZ1BhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShwYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgbG9jYXRpb246IHtcbiAgICAgICAgcGF0aG5hbWU6IHRyYWlsaW5nUGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgaGFzaCxcbiAgICAgICAgc3RhdGUsXG4gICAgICAgIGtleVxuICAgICAgfSxcbiAgICAgIG5hdmlnYXRpb25UeXBlXG4gICAgfTtcbiAgfSwgW2Jhc2VuYW1lLCBwYXRobmFtZSwgc2VhcmNoLCBoYXNoLCBzdGF0ZSwga2V5LCBuYXZpZ2F0aW9uVHlwZV0pO1xuICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhsb2NhdGlvbkNvbnRleHQgIT0gbnVsbCwgXCI8Um91dGVyIGJhc2VuYW1lPVxcXCJcIiArIGJhc2VuYW1lICsgXCJcXFwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIFwiICsgKFwiXFxcIlwiICsgcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoICsgXCJcXFwiIGJlY2F1c2UgaXQgZG9lcyBub3Qgc3RhcnQgd2l0aCB0aGUgXCIpICsgXCJiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5cIikgOiB2b2lkIDA7XG4gIGlmIChsb2NhdGlvbkNvbnRleHQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChOYXZpZ2F0aW9uQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBuYXZpZ2F0aW9uQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMb2NhdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgdmFsdWU6IGxvY2F0aW9uQ29udGV4dFxuICB9KSk7XG59XG4vKipcbiAqIEEgY29udGFpbmVyIGZvciBhIG5lc3RlZCB0cmVlIG9mIGA8Um91dGU+YCBlbGVtZW50cyB0aGF0IHJlbmRlcnMgdGhlIGJyYW5jaFxuICogdGhhdCBiZXN0IG1hdGNoZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlc1xuICovXG5mdW5jdGlvbiBSb3V0ZXMoX3JlZjYpIHtcbiAgbGV0IHtcbiAgICBjaGlsZHJlbixcbiAgICBsb2NhdGlvblxuICB9ID0gX3JlZjY7XG4gIHJldHVybiB1c2VSb3V0ZXMoY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGNoaWxkcmVuKSwgbG9jYXRpb24pO1xufVxuLyoqXG4gKiBDb21wb25lbnQgdG8gdXNlIGZvciByZW5kZXJpbmcgbGF6aWx5IGxvYWRlZCBkYXRhIGZyb20gcmV0dXJuaW5nIGRlZmVyKClcbiAqIGluIGEgbG9hZGVyIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIEF3YWl0KF9yZWY3KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW4sXG4gICAgZXJyb3JFbGVtZW50LFxuICAgIHJlc29sdmVcbiAgfSA9IF9yZWY3O1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRFcnJvckJvdW5kYXJ5LCB7XG4gICAgcmVzb2x2ZTogcmVzb2x2ZSxcbiAgICBlcnJvckVsZW1lbnQ6IGVycm9yRWxlbWVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSZXNvbHZlQXdhaXQsIG51bGwsIGNoaWxkcmVuKSk7XG59XG52YXIgQXdhaXRSZW5kZXJTdGF0dXMgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKEF3YWl0UmVuZGVyU3RhdHVzKSB7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wicGVuZGluZ1wiXSA9IDBdID0gXCJwZW5kaW5nXCI7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wic3VjY2Vzc1wiXSA9IDFdID0gXCJzdWNjZXNzXCI7XG4gIEF3YWl0UmVuZGVyU3RhdHVzW0F3YWl0UmVuZGVyU3RhdHVzW1wiZXJyb3JcIl0gPSAyXSA9IFwiZXJyb3JcIjtcbiAgcmV0dXJuIEF3YWl0UmVuZGVyU3RhdHVzO1xufShBd2FpdFJlbmRlclN0YXR1cyB8fCB7fSk7XG5jb25zdCBuZXZlclNldHRsZWRQcm9taXNlID0gbmV3IFByb21pc2UoKCkgPT4ge30pO1xuY2xhc3MgQXdhaXRFcnJvckJvdW5kYXJ5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBudWxsXG4gICAgfTtcbiAgfVxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yXG4gICAgfTtcbiAgfVxuICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgY29uc29sZS5lcnJvcihcIjxBd2FpdD4gY2F1Z2h0IHRoZSBmb2xsb3dpbmcgZXJyb3IgZHVyaW5nIHJlbmRlclwiLCBlcnJvciwgZXJyb3JJbmZvKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgbGV0IHtcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgZXJyb3JFbGVtZW50LFxuICAgICAgcmVzb2x2ZVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGxldCBwcm9taXNlID0gbnVsbDtcbiAgICBsZXQgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICBpZiAoIShyZXNvbHZlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgIC8vIERpZG4ndCBnZXQgYSBwcm9taXNlIC0gcHJvdmlkZSBhcyBhIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3M7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gdHJ1ZVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVzb2x2ZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlLmVycm9yKSB7XG4gICAgICAvLyBDYXVnaHQgYSByZW5kZXIgZXJyb3IsIHByb3ZpZGUgaXQgYXMgYSByZWplY3RlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcjtcbiAgICAgIGxldCByZW5kZXJFcnJvciA9IHRoaXMuc3RhdGUuZXJyb3I7XG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZWplY3QoKS5jYXRjaCgoKSA9PiB7fSk7IC8vIEF2b2lkIHVuaGFuZGxlZCByZWplY3Rpb24gd2FybmluZ3NcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gcmVuZGVyRXJyb3JcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocmVzb2x2ZS5fdHJhY2tlZCkge1xuICAgICAgLy8gQWxyZWFkeSB0cmFja2VkIHByb21pc2UgLSBjaGVjayBjb250ZW50c1xuICAgICAgcHJvbWlzZSA9IHJlc29sdmU7XG4gICAgICBzdGF0dXMgPSBwcm9taXNlLl9lcnJvciAhPT0gdW5kZWZpbmVkID8gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWQgPyBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzIDogQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmF3ICh1bnRyYWNrZWQpIHByb21pc2UgLSB0cmFjayBpdFxuICAgICAgc3RhdHVzID0gQXdhaXRSZW5kZXJTdGF0dXMucGVuZGluZztcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl90cmFja2VkXCIsIHtcbiAgICAgICAgZ2V0OiAoKSA9PiB0cnVlXG4gICAgICB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oZGF0YSA9PiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfZGF0YVwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZGF0YVxuICAgICAgfSksIGVycm9yID0+IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7XG4gICAgICAgIGdldDogKCkgPT4gZXJyb3JcbiAgICAgIH0pKTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvcikge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yICYmICFlcnJvckVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIGVycm9yRWxlbWVudCwgdGhyb3cgdG8gdGhlIG5lYXJlc3Qgcm91dGUtbGV2ZWwgZXJyb3IgYm91bmRhcnlcbiAgICAgIHRocm93IHByb21pc2UuX2Vycm9yO1xuICAgIH1cbiAgICBpZiAoc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvcikge1xuICAgICAgLy8gUmVuZGVyIHZpYSBvdXIgZXJyb3JFbGVtZW50XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQXdhaXRDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgICAgIHZhbHVlOiBwcm9taXNlLFxuICAgICAgICBjaGlsZHJlbjogZXJyb3JFbGVtZW50XG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuc3VjY2Vzcykge1xuICAgICAgLy8gUmVuZGVyIGNoaWxkcmVuIHdpdGggcmVzb2x2ZWQgdmFsdWVcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChBd2FpdENvbnRleHQuUHJvdmlkZXIsIHtcbiAgICAgICAgdmFsdWU6IHByb21pc2UsXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gVGhyb3cgdG8gdGhlIHN1c3BlbnNlIGJvdW5kYXJ5XG4gICAgdGhyb3cgcHJvbWlzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbmRpcmVjdGlvbiB0byBsZXZlcmFnZSB1c2VBc3luY1ZhbHVlIGZvciBhIHJlbmRlci1wcm9wIEFQSSBvbiBgPEF3YWl0PmBcbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KF9yZWY4KSB7XG4gIGxldCB7XG4gICAgY2hpbGRyZW5cbiAgfSA9IF9yZWY4O1xuICBsZXQgZGF0YSA9IHVzZUFzeW5jVmFsdWUoKTtcbiAgbGV0IHRvUmVuZGVyID0gdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBjaGlsZHJlbihkYXRhKSA6IGNoaWxkcmVuO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIHRvUmVuZGVyKTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbiwgcGFyZW50UGF0aCkge1xuICBpZiAocGFyZW50UGF0aCA9PT0gdm9pZCAwKSB7XG4gICAgcGFyZW50UGF0aCA9IFtdO1xuICB9XG4gIGxldCByb3V0ZXMgPSBbXTtcbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCEgLyojX19QVVJFX18qL1JlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgICAvLyBJZ25vcmUgbm9uLWVsZW1lbnRzLiBUaGlzIGFsbG93cyBwZW9wbGUgdG8gbW9yZSBlYXNpbHkgaW5saW5lXG4gICAgICAvLyBjb25kaXRpb25hbHMgaW4gdGhlaXIgcm91dGUgY29uZmlnLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgdHJlZVBhdGggPSBbLi4ucGFyZW50UGF0aCwgaW5kZXhdO1xuICAgIGlmIChlbGVtZW50LnR5cGUgPT09IFJlYWN0LkZyYWdtZW50KSB7XG4gICAgICAvLyBUcmFuc3BhcmVudGx5IHN1cHBvcnQgUmVhY3QuRnJhZ21lbnQgYW5kIGl0cyBjaGlsZHJlbi5cbiAgICAgIHJvdXRlcy5wdXNoLmFwcGx5KHJvdXRlcywgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4sIHRyZWVQYXRoKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgICEoZWxlbWVudC50eXBlID09PSBSb3V0ZSkgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIltcIiArICh0eXBlb2YgZWxlbWVudC50eXBlID09PSBcInN0cmluZ1wiID8gZWxlbWVudC50eXBlIDogZWxlbWVudC50eXBlLm5hbWUpICsgXCJdIGlzIG5vdCBhIDxSb3V0ZT4gY29tcG9uZW50LiBBbGwgY29tcG9uZW50IGNoaWxkcmVuIG9mIDxSb3V0ZXM+IG11c3QgYmUgYSA8Um91dGU+IG9yIDxSZWFjdC5GcmFnbWVudD5cIikgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAhKCFlbGVtZW50LnByb3BzLmluZGV4IHx8ICFlbGVtZW50LnByb3BzLmNoaWxkcmVuKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGxldCByb3V0ZSA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgQ29tcG9uZW50OiBlbGVtZW50LnByb3BzLkNvbXBvbmVudCxcbiAgICAgIGluZGV4OiBlbGVtZW50LnByb3BzLmluZGV4LFxuICAgICAgcGF0aDogZWxlbWVudC5wcm9wcy5wYXRoLFxuICAgICAgbG9hZGVyOiBlbGVtZW50LnByb3BzLmxvYWRlcixcbiAgICAgIGFjdGlvbjogZWxlbWVudC5wcm9wcy5hY3Rpb24sXG4gICAgICBlcnJvckVsZW1lbnQ6IGVsZW1lbnQucHJvcHMuZXJyb3JFbGVtZW50LFxuICAgICAgRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5LFxuICAgICAgaGFzRXJyb3JCb3VuZGFyeTogZWxlbWVudC5wcm9wcy5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQgIT0gbnVsbCxcbiAgICAgIHNob3VsZFJldmFsaWRhdGU6IGVsZW1lbnQucHJvcHMuc2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgIGhhbmRsZTogZWxlbWVudC5wcm9wcy5oYW5kbGUsXG4gICAgICBsYXp5OiBlbGVtZW50LnByb3BzLmxhenlcbiAgICB9O1xuICAgIGlmIChlbGVtZW50LnByb3BzLmNoaWxkcmVuKSB7XG4gICAgICByb3V0ZS5jaGlsZHJlbiA9IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihlbGVtZW50LnByb3BzLmNoaWxkcmVuLCB0cmVlUGF0aCk7XG4gICAgfVxuICAgIHJvdXRlcy5wdXNoKHJvdXRlKTtcbiAgfSk7XG4gIHJldHVybiByb3V0ZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIHJldHVybiBfcmVuZGVyTWF0Y2hlcyhtYXRjaGVzKTtcbn1cblxuZnVuY3Rpb24gbWFwUm91dGVQcm9wZXJ0aWVzKHJvdXRlKSB7XG4gIGxldCB1cGRhdGVzID0ge1xuICAgIC8vIE5vdGU6IHRoaXMgY2hlY2sgYWxzbyBvY2N1cnMgaW4gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuIHNvIHVwZGF0ZVxuICAgIC8vIHRoZXJlIGlmIHlvdSBjaGFuZ2UgdGhpcyAtLSBwbGVhc2UgYW5kIHRoYW5rIHlvdSFcbiAgICBoYXNFcnJvckJvdW5kYXJ5OiByb3V0ZS5FcnJvckJvdW5kYXJ5ICE9IG51bGwgfHwgcm91dGUuZXJyb3JFbGVtZW50ICE9IG51bGxcbiAgfTtcbiAgaWYgKHJvdXRlLkNvbXBvbmVudCkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGlmIChyb3V0ZS5lbGVtZW50KSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV93YXJuaW5nKGZhbHNlLCBcIllvdSBzaG91bGQgbm90IGluY2x1ZGUgYm90aCBgQ29tcG9uZW50YCBhbmQgYGVsZW1lbnRgIG9uIHlvdXIgcm91dGUgLSBcIiArIFwiYENvbXBvbmVudGAgd2lsbCBiZSB1c2VkLlwiKSA6IHZvaWQgMDtcbiAgICAgIH1cbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbih1cGRhdGVzLCB7XG4gICAgICBlbGVtZW50OiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChyb3V0ZS5Db21wb25lbnQpLFxuICAgICAgQ29tcG9uZW50OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICBpZiAocm91dGUuSHlkcmF0ZUZhbGxiYWNrKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmh5ZHJhdGVGYWxsYmFja0VsZW1lbnQpIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiWW91IHNob3VsZCBub3QgaW5jbHVkZSBib3RoIGBIeWRyYXRlRmFsbGJhY2tgIGFuZCBgaHlkcmF0ZUZhbGxiYWNrRWxlbWVudGAgb24geW91ciByb3V0ZSAtIFwiICsgXCJgSHlkcmF0ZUZhbGxiYWNrYCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGh5ZHJhdGVGYWxsYmFja0VsZW1lbnQ6IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KHJvdXRlLkh5ZHJhdGVGYWxsYmFjayksXG4gICAgICBIeWRyYXRlRmFsbGJhY2s6IHVuZGVmaW5lZFxuICAgIH0pO1xuICB9XG4gIGlmIChyb3V0ZS5FcnJvckJvdW5kYXJ5KSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgaWYgKHJvdXRlLmVycm9yRWxlbWVudCkge1xuICAgICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCBpbmNsdWRlIGJvdGggYEVycm9yQm91bmRhcnlgIGFuZCBgZXJyb3JFbGVtZW50YCBvbiB5b3VyIHJvdXRlIC0gXCIgKyBcImBFcnJvckJvdW5kYXJ5YCB3aWxsIGJlIHVzZWQuXCIpIDogdm9pZCAwO1xuICAgICAgfVxuICAgIH1cbiAgICBPYmplY3QuYXNzaWduKHVwZGF0ZXMsIHtcbiAgICAgIGVycm9yRWxlbWVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQocm91dGUuRXJyb3JCb3VuZGFyeSksXG4gICAgICBFcnJvckJvdW5kYXJ5OiB1bmRlZmluZWRcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gdXBkYXRlcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZU1lbW9yeVJvdXRlcihyb3V0ZXMsIG9wdHMpIHtcbiAgcmV0dXJuIGNyZWF0ZVJvdXRlcih7XG4gICAgYmFzZW5hbWU6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuYmFzZW5hbWUsXG4gICAgZnV0dXJlOiBfZXh0ZW5kcyh7fSwgb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5mdXR1cmUsIHtcbiAgICAgIHY3X3ByZXBlbmRCYXNlbmFtZTogdHJ1ZVxuICAgIH0pLFxuICAgIGhpc3Rvcnk6IGNyZWF0ZU1lbW9yeUhpc3Rvcnkoe1xuICAgICAgaW5pdGlhbEVudHJpZXM6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsSW5kZXg6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaW5pdGlhbEluZGV4XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogb3B0cyA9PSBudWxsID8gdm9pZCAwIDogb3B0cy5oeWRyYXRpb25EYXRhLFxuICAgIHJvdXRlcyxcbiAgICBtYXBSb3V0ZVByb3BlcnRpZXNcbiAgfSkuaW5pdGlhbGl6ZSgpO1xufVxuXG5leHBvcnQgeyBBd2FpdCwgTWVtb3J5Um91dGVyLCBOYXZpZ2F0ZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXJQcm92aWRlciwgUm91dGVzLCBEYXRhUm91dGVyQ29udGV4dCBhcyBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQsIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgYXMgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIExvY2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTG9jYXRpb25Db250ZXh0LCBOYXZpZ2F0aW9uQ29udGV4dCBhcyBVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQsIFJvdXRlQ29udGV4dCBhcyBVTlNBRkVfUm91dGVDb250ZXh0LCBtYXBSb3V0ZVByb3BlcnRpZXMgYXMgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcywgdXNlUm91dGVJZCBhcyBVTlNBRkVfdXNlUm91dGVJZCwgdXNlUm91dGVzSW1wbCBhcyBVTlNBRkVfdXNlUm91dGVzSW1wbCwgY3JlYXRlTWVtb3J5Um91dGVyLCBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4sIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbiBhcyBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIHJlbmRlck1hdGNoZXMsIHVzZUFjdGlvbkRhdGEsIHVzZUFzeW5jRXJyb3IsIHVzZUFzeW5jVmFsdWUsIHVzZUJsb2NrZXIsIHVzZUhyZWYsIHVzZUluUm91dGVyQ29udGV4dCwgdXNlTG9hZGVyRGF0YSwgdXNlTG9jYXRpb24sIHVzZU1hdGNoLCB1c2VNYXRjaGVzLCB1c2VOYXZpZ2F0ZSwgdXNlTmF2aWdhdGlvbiwgdXNlTmF2aWdhdGlvblR5cGUsIHVzZU91dGxldCwgdXNlT3V0bGV0Q29udGV4dCwgdXNlUGFyYW1zLCB1c2VSZXNvbHZlZFBhdGgsIHVzZVJldmFsaWRhdG9yLCB1c2VSb3V0ZUVycm9yLCB1c2VSb3V0ZUxvYWRlckRhdGEsIHVzZVJvdXRlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvKipcbiAqIFJlYWN0IFJvdXRlciBET00gdjYuMjEuM1xuICpcbiAqIENvcHlyaWdodCAoYykgUmVtaXggU29mdHdhcmUgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRS5tZCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBsaWNlbnNlIE1JVFxuICovXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgKiBhcyBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHsgVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcywgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LCBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCwgUm91dGVyLCBVTlNBRkVfdXNlUm91dGVzSW1wbCwgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LCB1c2VIcmVmLCB1c2VSZXNvbHZlZFBhdGgsIHVzZUxvY2F0aW9uLCB1c2VOYXZpZ2F0ZSwgY3JlYXRlUGF0aCwgVU5TQUZFX3VzZVJvdXRlSWQsIFVOU0FGRV9Sb3V0ZUNvbnRleHQsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRpb24sIHVzZUJsb2NrZXIgfSBmcm9tICdyZWFjdC1yb3V0ZXInO1xuZXhwb3J0IHsgQWJvcnRlZERlZmVycmVkRXJyb3IsIEF3YWl0LCBNZW1vcnlSb3V0ZXIsIE5hdmlnYXRlLCBOYXZpZ2F0aW9uVHlwZSwgT3V0bGV0LCBSb3V0ZSwgUm91dGVyLCBSb3V0ZXMsIFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCwgVU5TQUZFX0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsIFVOU0FGRV9Mb2NhdGlvbkNvbnRleHQsIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCwgVU5TQUZFX1JvdXRlQ29udGV4dCwgVU5TQUZFX3VzZVJvdXRlSWQsIGNyZWF0ZU1lbW9yeVJvdXRlciwgY3JlYXRlUGF0aCwgY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuLCBjcmVhdGVSb3V0ZXNGcm9tRWxlbWVudHMsIGRlZmVyLCBnZW5lcmF0ZVBhdGgsIGlzUm91dGVFcnJvclJlc3BvbnNlLCBqc29uLCBtYXRjaFBhdGgsIG1hdGNoUm91dGVzLCBwYXJzZVBhdGgsIHJlZGlyZWN0LCByZWRpcmVjdERvY3VtZW50LCByZW5kZXJNYXRjaGVzLCByZXNvbHZlUGF0aCwgdXNlQWN0aW9uRGF0YSwgdXNlQXN5bmNFcnJvciwgdXNlQXN5bmNWYWx1ZSwgdXNlQmxvY2tlciwgdXNlSHJlZiwgdXNlSW5Sb3V0ZXJDb250ZXh0LCB1c2VMb2FkZXJEYXRhLCB1c2VMb2NhdGlvbiwgdXNlTWF0Y2gsIHVzZU1hdGNoZXMsIHVzZU5hdmlnYXRlLCB1c2VOYXZpZ2F0aW9uLCB1c2VOYXZpZ2F0aW9uVHlwZSwgdXNlT3V0bGV0LCB1c2VPdXRsZXRDb250ZXh0LCB1c2VQYXJhbXMsIHVzZVJlc29sdmVkUGF0aCwgdXNlUmV2YWxpZGF0b3IsIHVzZVJvdXRlRXJyb3IsIHVzZVJvdXRlTG9hZGVyRGF0YSwgdXNlUm91dGVzIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCB7IHN0cmlwQmFzZW5hbWUsIFVOU0FGRV93YXJuaW5nLCBjcmVhdGVSb3V0ZXIsIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsLCBVTlNBRkVfaW52YXJpYW50LCBqb2luUGF0aHMsIElETEVfRkVUQ0hFUiwgbWF0Y2hQYXRoIH0gZnJvbSAnQHJlbWl4LXJ1bi9yb3V0ZXInO1xuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5cbmNvbnN0IGRlZmF1bHRNZXRob2QgPSBcImdldFwiO1xuY29uc3QgZGVmYXVsdEVuY1R5cGUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuZnVuY3Rpb24gaXNIdG1sRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIHR5cGVvZiBvYmplY3QudGFnTmFtZSA9PT0gXCJzdHJpbmdcIjtcbn1cbmZ1bmN0aW9uIGlzQnV0dG9uRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImJ1dHRvblwiO1xufVxuZnVuY3Rpb24gaXNGb3JtRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImZvcm1cIjtcbn1cbmZ1bmN0aW9uIGlzSW5wdXRFbGVtZW50KG9iamVjdCkge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIjtcbn1cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5mdW5jdGlvbiBzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpIHtcbiAgcmV0dXJuIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoXG4gIC8vIElnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAhdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJlxuICAvLyBMZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICA7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiBpbml0aWFsaXplci5cbiAqXG4gKiBUaGlzIGlzIGlkZW50aWNhbCB0byBgbmV3IFVSTFNlYXJjaFBhcmFtcyhpbml0KWAgZXhjZXB0IGl0IGFsc29cbiAqIHN1cHBvcnRzIGFycmF5cyBhcyB2YWx1ZXMgaW4gdGhlIG9iamVjdCBmb3JtIG9mIHRoZSBpbml0aWFsaXplclxuICogaW5zdGVhZCBvZiBqdXN0IHN0cmluZ3MuIFRoaXMgaXMgY29udmVuaWVudCB3aGVuIHlvdSBuZWVkIG11bHRpcGxlXG4gKiB2YWx1ZXMgZm9yIGEgZ2l2ZW4ga2V5LCBidXQgZG9uJ3Qgd2FudCB0byB1c2UgYW4gYXJyYXkgaW5pdGlhbGl6ZXIuXG4gKlxuICogRm9yIGV4YW1wbGUsIGluc3RlYWQgb2Y6XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhbXG4gKiAgICAgWydzb3J0JywgJ25hbWUnXSxcbiAqICAgICBbJ3NvcnQnLCAncHJpY2UnXVxuICogICBdKTtcbiAqXG4gKiB5b3UgY2FuIGRvOlxuICpcbiAqICAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh7XG4gKiAgICAgc29ydDogWyduYW1lJywgJ3ByaWNlJ11cbiAqICAgfSk7XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhpbml0KSB7XG4gIGlmIChpbml0ID09PSB2b2lkIDApIHtcbiAgICBpbml0ID0gXCJcIjtcbiAgfVxuICByZXR1cm4gbmV3IFVSTFNlYXJjaFBhcmFtcyh0eXBlb2YgaW5pdCA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGluaXQpIHx8IGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXMgPyBpbml0IDogT2JqZWN0LmtleXMoaW5pdCkucmVkdWNlKChtZW1vLCBrZXkpID0+IHtcbiAgICBsZXQgdmFsdWUgPSBpbml0W2tleV07XG4gICAgcmV0dXJuIG1lbW8uY29uY2F0KEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKHYgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV0pO1xuICB9LCBbXSkpO1xufVxuZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb25TZWFyY2gsIGRlZmF1bHRTZWFyY2hQYXJhbXMpIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhsb2NhdGlvblNlYXJjaCk7XG4gIGlmIChkZWZhdWx0U2VhcmNoUGFyYW1zKSB7XG4gICAgLy8gVXNlIGBkZWZhdWx0U2VhcmNoUGFyYW1zLmZvckVhY2goLi4uKWAgaGVyZSBpbnN0ZWFkIG9mIGl0ZXJhdGluZyBvZlxuICAgIC8vIGBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKWAgdG8gd29yay1hcm91bmQgYSBidWcgaW4gRmlyZWZveCByZWxhdGVkIHRvXG4gICAgLy8gd2ViIGV4dGVuc2lvbnMuIFJlbGV2YW50IEJ1Z3ppbGxhIHRpY2tldHM6XG4gICAgLy8gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTQxNDYwMlxuICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEwMjM5ODRcbiAgICBkZWZhdWx0U2VhcmNoUGFyYW1zLmZvckVhY2goKF8sIGtleSkgPT4ge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5nZXRBbGwoa2V5KS5mb3JFYWNoKHZhbHVlID0+IHtcbiAgICAgICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICByZXR1cm4gc2VhcmNoUGFyYW1zO1xufVxuLy8gT25lLXRpbWUgY2hlY2sgZm9yIHN1Ym1pdHRlciBzdXBwb3J0XG5sZXQgX2Zvcm1EYXRhU3VwcG9ydHNTdWJtaXR0ZXIgPSBudWxsO1xuZnVuY3Rpb24gaXNGb3JtRGF0YVN1Ym1pdHRlclN1cHBvcnRlZCgpIHtcbiAgaWYgKF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID09PSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGb3JtRGF0YShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKSxcbiAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgaWYgRm9ybURhdGEgc3VwcG9ydHMgdGhlIHN1Ym1pdHRlciBwYXJhbWV0ZXIsIHRoaXMgd2lsbCB0aHJvd1xuICAgICAgMCk7XG4gICAgICBfZm9ybURhdGFTdXBwb3J0c1N1Ym1pdHRlciA9IGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIF9mb3JtRGF0YVN1cHBvcnRzU3VibWl0dGVyO1xufVxuY29uc3Qgc3VwcG9ydGVkRm9ybUVuY1R5cGVzID0gbmV3IFNldChbXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiwgXCJtdWx0aXBhcnQvZm9ybS1kYXRhXCIsIFwidGV4dC9wbGFpblwiXSk7XG5mdW5jdGlvbiBnZXRGb3JtRW5jVHlwZShlbmNUeXBlKSB7XG4gIGlmIChlbmNUeXBlICE9IG51bGwgJiYgIXN1cHBvcnRlZEZvcm1FbmNUeXBlcy5oYXMoZW5jVHlwZSkpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJcXFwiXCIgKyBlbmNUeXBlICsgXCJcXFwiIGlzIG5vdCBhIHZhbGlkIGBlbmNUeXBlYCBmb3IgYDxGb3JtPmAvYDxmZXRjaGVyLkZvcm0+YCBcIiArIChcImFuZCB3aWxsIGRlZmF1bHQgdG8gXFxcIlwiICsgZGVmYXVsdEVuY1R5cGUgKyBcIlxcXCJcIikpIDogdm9pZCAwO1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBlbmNUeXBlO1xufVxuZnVuY3Rpb24gZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvKHRhcmdldCwgYmFzZW5hbWUpIHtcbiAgbGV0IG1ldGhvZDtcbiAgbGV0IGFjdGlvbjtcbiAgbGV0IGVuY1R5cGU7XG4gIGxldCBmb3JtRGF0YTtcbiAgbGV0IGJvZHk7XG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHRoZSBhY3Rpb24gZnJvbSB0aGUgZWxlbWVudCwgaXQgd2lsbCBoYXZlIGhhZCB0aGUgYmFzZW5hbWVcbiAgICAvLyBwcmVmaXhlZCB0byBlbnN1cmUgbm9uLUpTIHNjZW5hcmlvcyB3b3JrLCBzbyBzdHJpcCBpdCBzaW5jZSB3ZSdsbFxuICAgIC8vIHJlLXByZWZpeCBpbiB0aGUgcm91dGVyXG4gICAgbGV0IGF0dHIgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpO1xuICAgIGFjdGlvbiA9IGF0dHIgPyBzdHJpcEJhc2VuYW1lKGF0dHIsIGJhc2VuYW1lKSA6IG51bGw7XG4gICAgbWV0aG9kID0gdGFyZ2V0LmdldEF0dHJpYnV0ZShcIm1ldGhvZFwiKSB8fCBkZWZhdWx0TWV0aG9kO1xuICAgIGVuY1R5cGUgPSBnZXRGb3JtRW5jVHlwZSh0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSkgfHwgZGVmYXVsdEVuY1R5cGU7XG4gICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEodGFyZ2V0KTtcbiAgfSBlbHNlIGlmIChpc0J1dHRvbkVsZW1lbnQodGFyZ2V0KSB8fCBpc0lucHV0RWxlbWVudCh0YXJnZXQpICYmICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSkge1xuICAgIGxldCBmb3JtID0gdGFyZ2V0LmZvcm07XG4gICAgaWYgKGZvcm0gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN1Ym1pdCBhIDxidXR0b24+IG9yIDxpbnB1dCB0eXBlPVxcXCJzdWJtaXRcXFwiPiB3aXRob3V0IGEgPGZvcm0+XCIpO1xuICAgIH1cbiAgICAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cbiAgICAvLyBXaGVuIGdyYWJiaW5nIHRoZSBhY3Rpb24gZnJvbSB0aGUgZWxlbWVudCwgaXQgd2lsbCBoYXZlIGhhZCB0aGUgYmFzZW5hbWVcbiAgICAvLyBwcmVmaXhlZCB0byBlbnN1cmUgbm9uLUpTIHNjZW5hcmlvcyB3b3JrLCBzbyBzdHJpcCBpdCBzaW5jZSB3ZSdsbFxuICAgIC8vIHJlLXByZWZpeCBpbiB0aGUgcm91dGVyXG4gICAgbGV0IGF0dHIgPSB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWFjdGlvblwiKSB8fCBmb3JtLmdldEF0dHJpYnV0ZShcImFjdGlvblwiKTtcbiAgICBhY3Rpb24gPSBhdHRyID8gc3RyaXBCYXNlbmFtZShhdHRyLCBiYXNlbmFtZSkgOiBudWxsO1xuICAgIG1ldGhvZCA9IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpIHx8IGZvcm0uZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgZW5jVHlwZSA9IGdldEZvcm1FbmNUeXBlKHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJmb3JtZW5jdHlwZVwiKSkgfHwgZ2V0Rm9ybUVuY1R5cGUoZm9ybS5nZXRBdHRyaWJ1dGUoXCJlbmN0eXBlXCIpKSB8fCBkZWZhdWx0RW5jVHlwZTtcbiAgICAvLyBCdWlsZCBhIEZvcm1EYXRhIG9iamVjdCBwb3B1bGF0ZWQgZnJvbSBhIGZvcm0gYW5kIHN1Ym1pdHRlclxuICAgIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKGZvcm0sIHRhcmdldCk7XG4gICAgLy8gSWYgdGhpcyBicm93c2VyIGRvZXNuJ3Qgc3VwcG9ydCB0aGUgYEZvcm1EYXRhKGVsLCBzdWJtaXR0ZXIpYCBmb3JtYXQsXG4gICAgLy8gdGhlbiB0YWNrIG9uIHRoZSBzdWJtaXR0ZXIgdmFsdWUgYXQgdGhlIGVuZC4gIFRoaXMgaXMgYSBsaWdodHdlaWdodFxuICAgIC8vIHNvbHV0aW9uIHRoYXQgaXMgbm90IDEwMCUgc3BlYyBjb21wbGlhbnQuICBGb3IgY29tcGxldGUgc3VwcG9ydCBpbiBvbGRlclxuICAgIC8vIGJyb3dzZXJzLCBjb25zaWRlciB1c2luZyB0aGUgYGZvcm1kYXRhLXN1Ym1pdHRlci1wb2x5ZmlsbGAgcGFja2FnZVxuICAgIGlmICghaXNGb3JtRGF0YVN1Ym1pdHRlclN1cHBvcnRlZCgpKSB7XG4gICAgICBsZXQge1xuICAgICAgICBuYW1lLFxuICAgICAgICB0eXBlLFxuICAgICAgICB2YWx1ZVxuICAgICAgfSA9IHRhcmdldDtcbiAgICAgIGlmICh0eXBlID09PSBcImltYWdlXCIpIHtcbiAgICAgICAgbGV0IHByZWZpeCA9IG5hbWUgPyBuYW1lICsgXCIuXCIgOiBcIlwiO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQocHJlZml4ICsgXCJ4XCIsIFwiMFwiKTtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKHByZWZpeCArIFwieVwiLCBcIjBcIik7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUpIHtcbiAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNIdG1sRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHN1Ym1pdCBlbGVtZW50IHRoYXQgaXMgbm90IDxmb3JtPiwgPGJ1dHRvbj4sIG9yIFwiICsgXCI8aW5wdXQgdHlwZT1cXFwic3VibWl0fGltYWdlXFxcIj5cIik7XG4gIH0gZWxzZSB7XG4gICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBudWxsO1xuICAgIGVuY1R5cGUgPSBkZWZhdWx0RW5jVHlwZTtcbiAgICBib2R5ID0gdGFyZ2V0O1xuICB9XG4gIC8vIFNlbmQgYm9keSBmb3IgPEZvcm0gZW5jVHlwZT1cInRleHQvcGxhaW5cIiBzbyB3ZSBlbmNvZGUgaXQgaW50byB0ZXh0XG4gIGlmIChmb3JtRGF0YSAmJiBlbmNUeXBlID09PSBcInRleHQvcGxhaW5cIikge1xuICAgIGJvZHkgPSBmb3JtRGF0YTtcbiAgICBmb3JtRGF0YSA9IHVuZGVmaW5lZDtcbiAgfVxuICByZXR1cm4ge1xuICAgIGFjdGlvbixcbiAgICBtZXRob2Q6IG1ldGhvZC50b0xvd2VyQ2FzZSgpLFxuICAgIGVuY1R5cGUsXG4gICAgZm9ybURhdGEsXG4gICAgYm9keVxuICB9O1xufVxuXG5jb25zdCBfZXhjbHVkZWQgPSBbXCJvbkNsaWNrXCIsIFwicmVsYXRpdmVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcInRhcmdldFwiLCBcInRvXCIsIFwicHJldmVudFNjcm9sbFJlc2V0XCIsIFwidW5zdGFibGVfdmlld1RyYW5zaXRpb25cIl0sXG4gIF9leGNsdWRlZDIgPSBbXCJhcmlhLWN1cnJlbnRcIiwgXCJjYXNlU2Vuc2l0aXZlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZW5kXCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcInVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXCIsIFwiY2hpbGRyZW5cIl0sXG4gIF9leGNsdWRlZDMgPSBbXCJmZXRjaGVyS2V5XCIsIFwibmF2aWdhdGVcIiwgXCJyZWxvYWREb2N1bWVudFwiLCBcInJlcGxhY2VcIiwgXCJzdGF0ZVwiLCBcIm1ldGhvZFwiLCBcImFjdGlvblwiLCBcIm9uU3VibWl0XCIsIFwicmVsYXRpdmVcIiwgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiwgXCJ1bnN0YWJsZV92aWV3VHJhbnNpdGlvblwiXTtcbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIocm91dGVzLCBvcHRzKSB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLmJhc2VuYW1lLFxuICAgIGZ1dHVyZTogX2V4dGVuZHMoe30sIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuZnV0dXJlLCB7XG4gICAgICB2N19wcmVwZW5kQmFzZW5hbWU6IHRydWVcbiAgICB9KSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7XG4gICAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gICAgfSksXG4gICAgaHlkcmF0aW9uRGF0YTogKG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMuaHlkcmF0aW9uRGF0YSkgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzLFxuICAgIG1hcFJvdXRlUHJvcGVydGllczogVU5TQUZFX21hcFJvdXRlUHJvcGVydGllcyxcbiAgICB3aW5kb3c6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMud2luZG93XG4gIH0pLmluaXRpYWxpemUoKTtcbn1cbmZ1bmN0aW9uIHBhcnNlSHlkcmF0aW9uRGF0YSgpIHtcbiAgdmFyIF93aW5kb3c7XG4gIGxldCBzdGF0ZSA9IChfd2luZG93ID0gd2luZG93KSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdy5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IF9leHRlbmRzKHt9LCBzdGF0ZSwge1xuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuZnVuY3Rpb24gZGVzZXJpYWxpemVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICghZXJyb3JzKSByZXR1cm4gbnVsbDtcbiAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhlcnJvcnMpO1xuICBsZXQgc2VyaWFsaXplZCA9IHt9O1xuICBmb3IgKGxldCBba2V5LCB2YWxdIG9mIGVudHJpZXMpIHtcbiAgICAvLyBIZXkgeW91ISAgSWYgeW91IGNoYW5nZSB0aGlzLCBwbGVhc2UgY2hhbmdlIHRoZSBjb3JyZXNwb25kaW5nIGxvZ2ljIGluXG4gICAgLy8gc2VyaWFsaXplRXJyb3JzIGluIHJlYWN0LXJvdXRlci1kb20vc2VydmVyLnRzeCA6KVxuICAgIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJSb3V0ZUVycm9yUmVzcG9uc2VcIikge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gbmV3IFVOU0FGRV9FcnJvclJlc3BvbnNlSW1wbCh2YWwuc3RhdHVzLCB2YWwuc3RhdHVzVGV4dCwgdmFsLmRhdGEsIHZhbC5pbnRlcm5hbCA9PT0gdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJFcnJvclwiKSB7XG4gICAgICAvLyBBdHRlbXB0IHRvIHJlY29uc3RydWN0IHRoZSByaWdodCB0eXBlIG9mIEVycm9yIChpLmUuLCBSZWZlcmVuY2VFcnJvcilcbiAgICAgIGlmICh2YWwuX19zdWJUeXBlKSB7XG4gICAgICAgIGxldCBFcnJvckNvbnN0cnVjdG9yID0gd2luZG93W3ZhbC5fX3N1YlR5cGVdO1xuICAgICAgICBpZiAodHlwZW9mIEVycm9yQ29uc3RydWN0b3IgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXG4gICAgICAgICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3JDb25zdHJ1Y3Rvcih2YWwubWVzc2FnZSk7XG4gICAgICAgICAgICAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3Qgc2VyaWFsaXplIFNTUiBzdGFjayB0cmFjZXMgZm9yIHNlY3VyaXR5IHJlYXNvbnNcbiAgICAgICAgICAgIGVycm9yLnN0YWNrID0gXCJcIjtcbiAgICAgICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIC8vIG5vLW9wIC0gZmFsbCB0aHJvdWdoIGFuZCBjcmVhdGUgYSBub3JtYWwgRXJyb3JcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChzZXJpYWxpemVkW2tleV0gPT0gbnVsbCkge1xuICAgICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IodmFsLm1lc3NhZ2UpO1xuICAgICAgICAvLyBXaXBlIGF3YXkgdGhlIGNsaWVudC1zaWRlIHN0YWNrIHRyYWNlLiAgTm90aGluZyB0byBmaWxsIGl0IGluIHdpdGhcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBkb24ndCBzZXJpYWxpemUgU1NSIHN0YWNrIHRyYWNlcyBmb3Igc2VjdXJpdHkgcmVhc29uc1xuICAgICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICAgIHNlcmlhbGl6ZWRba2V5XSA9IGVycm9yO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG4gIHJldHVybiBzZXJpYWxpemVkO1xufVxuY29uc3QgVmlld1RyYW5zaXRpb25Db250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQoe1xuICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG59KTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgVmlld1RyYW5zaXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJWaWV3VHJhbnNpdGlvblwiO1xufVxuY29uc3QgRmV0Y2hlcnNDb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobmV3IE1hcCgpKTtcbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgRmV0Y2hlcnNDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJGZXRjaGVyc1wiO1xufVxuLy8jZW5kcmVnaW9uXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIENvbXBvbmVudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vKipcbiAgV2VicGFjayArIFJlYWN0IDE3IGZhaWxzIHRvIGNvbXBpbGUgb24gYW55IG9mIHRoZSBmb2xsb3dpbmcgYmVjYXVzZSB3ZWJwYWNrXG4gIGNvbXBsYWlucyB0aGF0IGBzdGFydFRyYW5zaXRpb25gIGRvZXNuJ3QgZXhpc3QgaW4gYFJlYWN0YDpcbiAgKiBpbXBvcnQgeyBzdGFydFRyYW5zaXRpb24gfSBmcm9tIFwicmVhY3RcIlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgXCJzdGFydFRyYW5zaXRpb25cIiBpbiBSZWFjdCA/IFJlYWN0LnN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcbiAgKiBpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIGZyb20gXCJyZWFjdFwiO1xuICAgIFwic3RhcnRUcmFuc2l0aW9uXCIgaW4gUmVhY3QgPyBSZWFjdFtcInN0YXJ0VHJhbnNpdGlvblwiXSgoKSA9PiBzZXRTdGF0ZSgpKSA6IHNldFN0YXRlKClcblxuICBNb3ZpbmcgaXQgdG8gYSBjb25zdGFudCBzdWNoIGFzIHRoZSBmb2xsb3dpbmcgc29sdmVzIHRoZSBXZWJwYWNrL1JlYWN0IDE3IGlzc3VlOlxuICAqIGltcG9ydCAqIGFzIFJlYWN0IGZyb20gZnJvbSBcInJlYWN0XCI7XG4gICAgY29uc3QgU1RBUlRfVFJBTlNJVElPTiA9IFwic3RhcnRUcmFuc2l0aW9uXCI7XG4gICAgU1RBUlRfVFJBTlNJVElPTiBpbiBSZWFjdCA/IFJlYWN0W1NUQVJUX1RSQU5TSVRJT05dKCgpID0+IHNldFN0YXRlKCkpIDogc2V0U3RhdGUoKVxuXG4gIEhvd2V2ZXIsIHRoYXQgaW50cm9kdWNlcyB3ZWJwYWNrL3RlcnNlciBtaW5pZmljYXRpb24gaXNzdWVzIGluIHByb2R1Y3Rpb24gYnVpbGRzXG4gIGluIFJlYWN0IDE4IHdoZXJlIG1pbmlmaWNhdGlvbi9vYmZ1c2NhdGlvbiBlbmRzIHVwIHJlbW92aW5nIHRoZSBjYWxsIG9mXG4gIFJlYWN0LnN0YXJ0VHJhbnNpdGlvbiBlbnRpcmVseSBmcm9tIHRoZSBmaXJzdCBoYWxmIG9mIHRoZSB0ZXJuYXJ5LiAgR3JhYmJpbmdcbiAgdGhpcyBleHBvcnRlZCByZWZlcmVuY2Ugb25jZSB1cCBmcm9udCByZXNvbHZlcyB0aGF0IGlzc3VlLlxuXG4gIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlYWN0LXJvdXRlci9pc3N1ZXMvMTA1NzlcbiovXG5jb25zdCBTVEFSVF9UUkFOU0lUSU9OID0gXCJzdGFydFRyYW5zaXRpb25cIjtcbmNvbnN0IHN0YXJ0VHJhbnNpdGlvbkltcGwgPSBSZWFjdFtTVEFSVF9UUkFOU0lUSU9OXTtcbmNvbnN0IEZMVVNIX1NZTkMgPSBcImZsdXNoU3luY1wiO1xuY29uc3QgZmx1c2hTeW5jSW1wbCA9IFJlYWN0RE9NW0ZMVVNIX1NZTkNdO1xuY29uc3QgVVNFX0lEID0gXCJ1c2VJZFwiO1xuY29uc3QgdXNlSWRJbXBsID0gUmVhY3RbVVNFX0lEXTtcbmZ1bmN0aW9uIHN0YXJ0VHJhbnNpdGlvblNhZmUoY2IpIHtcbiAgaWYgKHN0YXJ0VHJhbnNpdGlvbkltcGwpIHtcbiAgICBzdGFydFRyYW5zaXRpb25JbXBsKGNiKTtcbiAgfSBlbHNlIHtcbiAgICBjYigpO1xuICB9XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNTYWZlKGNiKSB7XG4gIGlmIChmbHVzaFN5bmNJbXBsKSB7XG4gICAgZmx1c2hTeW5jSW1wbChjYik7XG4gIH0gZWxzZSB7XG4gICAgY2IoKTtcbiAgfVxufVxuY2xhc3MgRGVmZXJyZWQge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIHRoaXMucmVzb2x2ZSA9IHZhbHVlID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJyZXNvbHZlZFwiO1xuICAgICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy5yZWplY3QgPSByZWFzb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5zdGF0dXMgPT09IFwicGVuZGluZ1wiKSB7XG4gICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInJlamVjdGVkXCI7XG4gICAgICAgICAgcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBSZW1peCBSb3V0ZXIgaW5zdGFuY2UsIHJlbmRlciB0aGUgYXBwcm9wcmlhdGUgVUlcbiAqL1xuZnVuY3Rpb24gUm91dGVyUHJvdmlkZXIoX3JlZikge1xuICBsZXQge1xuICAgIGZhbGxiYWNrRWxlbWVudCxcbiAgICByb3V0ZXIsXG4gICAgZnV0dXJlXG4gIH0gPSBfcmVmO1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZUltcGxdID0gUmVhY3QudXNlU3RhdGUocm91dGVyLnN0YXRlKTtcbiAgbGV0IFtwZW5kaW5nU3RhdGUsIHNldFBlbmRpbmdTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW3Z0Q29udGV4dCwgc2V0VnRDb250ZXh0XSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gIH0pO1xuICBsZXQgW3JlbmRlckRmZCwgc2V0UmVuZGVyRGZkXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBbdHJhbnNpdGlvbiwgc2V0VHJhbnNpdGlvbl0gPSBSZWFjdC51c2VTdGF0ZSgpO1xuICBsZXQgW2ludGVycnVwdGlvbiwgc2V0SW50ZXJydXB0aW9uXSA9IFJlYWN0LnVzZVN0YXRlKCk7XG4gIGxldCBmZXRjaGVyRGF0YSA9IFJlYWN0LnVzZVJlZihuZXcgTWFwKCkpO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgb3B0SW5TdGFydFRyYW5zaXRpb24gPSBSZWFjdC51c2VDYWxsYmFjayhjYiA9PiB7XG4gICAgaWYgKHY3X3N0YXJ0VHJhbnNpdGlvbikge1xuICAgICAgc3RhcnRUcmFuc2l0aW9uU2FmZShjYik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9LCBbdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIGxldCBzZXRTdGF0ZSA9IFJlYWN0LnVzZUNhbGxiYWNrKChuZXdTdGF0ZSwgX3JlZjIpID0+IHtcbiAgICBsZXQge1xuICAgICAgZGVsZXRlZEZldGNoZXJzLFxuICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBmbHVzaFN5bmMsXG4gICAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbk9wdHM6IHZpZXdUcmFuc2l0aW9uT3B0c1xuICAgIH0gPSBfcmVmMjtcbiAgICBkZWxldGVkRmV0Y2hlcnMuZm9yRWFjaChrZXkgPT4gZmV0Y2hlckRhdGEuY3VycmVudC5kZWxldGUoa2V5KSk7XG4gICAgbmV3U3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoZmV0Y2hlciwga2V5KSA9PiB7XG4gICAgICBpZiAoZmV0Y2hlci5kYXRhICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZmV0Y2hlckRhdGEuY3VycmVudC5zZXQoa2V5LCBmZXRjaGVyLmRhdGEpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBpc1ZpZXdUcmFuc2l0aW9uVW5hdmFpbGFibGUgPSByb3V0ZXIud2luZG93ID09IG51bGwgfHwgdHlwZW9mIHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbiAhPT0gXCJmdW5jdGlvblwiO1xuICAgIC8vIElmIHRoaXMgaXNuJ3QgYSB2aWV3IHRyYW5zaXRpb24gb3IgaXQncyBub3QgYXZhaWxhYmxlIGluIHRoaXMgYnJvd3NlcixcbiAgICAvLyBqdXN0IHVwZGF0ZSBhbmQgYmUgZG9uZSB3aXRoIGl0XG4gICAgaWYgKCF2aWV3VHJhbnNpdGlvbk9wdHMgfHwgaXNWaWV3VHJhbnNpdGlvblVuYXZhaWxhYmxlKSB7XG4gICAgICBpZiAoZmx1c2hTeW5jKSB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRJblN0YXJ0VHJhbnNpdGlvbigoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gZmx1c2hTeW5jICsgc3RhcnRWaWV3VHJhbnNpdGlvblxuICAgIGlmIChmbHVzaFN5bmMpIHtcbiAgICAgIC8vIEZsdXNoIHRocm91Z2ggdGhlIGNvbnRleHQgdG8gbWFyayBET00gZWxlbWVudHMgYXMgdHJhbnNpdGlvbj1pbmdcbiAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4ge1xuICAgICAgICAvLyBDYW5jZWwgYW55IHBlbmRpbmcgdHJhbnNpdGlvbnNcbiAgICAgICAgaWYgKHRyYW5zaXRpb24pIHtcbiAgICAgICAgICByZW5kZXJEZmQgJiYgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICAgICAgICB0cmFuc2l0aW9uLnNraXBUcmFuc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IHRydWUsXG4gICAgICAgICAgZmx1c2hTeW5jOiB0cnVlLFxuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLmN1cnJlbnRMb2NhdGlvbixcbiAgICAgICAgICBuZXh0TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5uZXh0TG9jYXRpb25cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC8vIFVwZGF0ZSB0aGUgRE9NXG4gICAgICBsZXQgdCA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbigoKSA9PiB7XG4gICAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0U3RhdGVJbXBsKG5ld1N0YXRlKSk7XG4gICAgICB9KTtcbiAgICAgIC8vIENsZWFuIHVwIGFmdGVyIHRoZSBhbmltYXRpb24gY29tcGxldGVzXG4gICAgICB0LmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBmbHVzaFN5bmNTYWZlKCgpID0+IHtcbiAgICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgICBzZXRUcmFuc2l0aW9uKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0UGVuZGluZ1N0YXRlKHVuZGVmaW5lZCk7XG4gICAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICAgIGlzVHJhbnNpdGlvbmluZzogZmFsc2VcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIGZsdXNoU3luY1NhZmUoKCkgPT4gc2V0VHJhbnNpdGlvbih0KSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHN0YXJ0VHJhbnNpdGlvbiArIHN0YXJ0Vmlld1RyYW5zaXRpb25cbiAgICBpZiAodHJhbnNpdGlvbikge1xuICAgICAgLy8gSW50ZXJydXB0aW5nIGFuIGluLXByb2dyZXNzIHRyYW5zaXRpb24sIGNhbmNlbCBhbmQgbGV0IGV2ZXJ5dGhpbmcgZmx1c2hcbiAgICAgIC8vIG91dCwgYW5kIHRoZW4ga2ljayBvZmYgYSBuZXcgdHJhbnNpdGlvbiBmcm9tIHRoZSBpbnRlcnJ1cHRpb24gc3RhdGVcbiAgICAgIHJlbmRlckRmZCAmJiByZW5kZXJEZmQucmVzb2x2ZSgpO1xuICAgICAgdHJhbnNpdGlvbi5za2lwVHJhbnNpdGlvbigpO1xuICAgICAgc2V0SW50ZXJydXB0aW9uKHtcbiAgICAgICAgc3RhdGU6IG5ld1N0YXRlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbXBsZXRlZCBuYXZpZ2F0aW9uIHVwZGF0ZSB3aXRoIG9wdGVkLWluIHZpZXcgdHJhbnNpdGlvbnMsIGxldCAnZXIgcmlwXG4gICAgICBzZXRQZW5kaW5nU3RhdGUobmV3U3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IHZpZXdUcmFuc2l0aW9uT3B0cy5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogdmlld1RyYW5zaXRpb25PcHRzLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbcm91dGVyLndpbmRvdywgdHJhbnNpdGlvbiwgcmVuZGVyRGZkLCBmZXRjaGVyRGF0YSwgb3B0SW5TdGFydFRyYW5zaXRpb25dKTtcbiAgLy8gTmVlZCB0byB1c2UgYSBsYXlvdXQgZWZmZWN0IGhlcmUgc28gd2UgYXJlIHN1YnNjcmliZWQgZWFybHkgZW5vdWdoIHRvXG4gIC8vIHBpY2sgdXAgb24gYW55IHJlbmRlci1kcml2ZW4gcmVkaXJlY3RzL25hdmlnYXRpb25zICh1c2VFZmZlY3QvPE5hdmlnYXRlPilcbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHJvdXRlci5zdWJzY3JpYmUoc2V0U3RhdGUpLCBbcm91dGVyLCBzZXRTdGF0ZV0pO1xuICAvLyBXaGVuIHdlIHN0YXJ0IGEgdmlldyB0cmFuc2l0aW9uLCBjcmVhdGUgYSBEZWZlcnJlZCB3ZSBjYW4gdXNlIGZvciB0aGVcbiAgLy8gZXZlbnR1YWwgXCJjb21wbGV0ZWRcIiByZW5kZXJcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiAhdnRDb250ZXh0LmZsdXNoU3luYykge1xuICAgICAgc2V0UmVuZGVyRGZkKG5ldyBEZWZlcnJlZCgpKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHRdKTtcbiAgLy8gT25jZSB0aGUgZGVmZXJyZWQgaXMgY3JlYXRlZCwga2ljayBvZmYgc3RhcnRWaWV3VHJhbnNpdGlvbigpIHRvIHVwZGF0ZSB0aGVcbiAgLy8gRE9NIGFuZCB0aGVuIHdhaXQgb24gdGhlIERlZmVycmVkIHRvIHJlc29sdmUgKGluZGljYXRpbmcgdGhlIERPTSB1cGRhdGUgaGFzXG4gIC8vIGhhcHBlbmVkKVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHJvdXRlci53aW5kb3cpIHtcbiAgICAgIGxldCBuZXdTdGF0ZSA9IHBlbmRpbmdTdGF0ZTtcbiAgICAgIGxldCByZW5kZXJQcm9taXNlID0gcmVuZGVyRGZkLnByb21pc2U7XG4gICAgICBsZXQgdHJhbnNpdGlvbiA9IHJvdXRlci53aW5kb3cuZG9jdW1lbnQuc3RhcnRWaWV3VHJhbnNpdGlvbihhc3luYyAoKSA9PiB7XG4gICAgICAgIG9wdEluU3RhcnRUcmFuc2l0aW9uKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpO1xuICAgICAgICBhd2FpdCByZW5kZXJQcm9taXNlO1xuICAgICAgfSk7XG4gICAgICB0cmFuc2l0aW9uLmZpbmlzaGVkLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICBzZXRSZW5kZXJEZmQodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VHJhbnNpdGlvbih1bmRlZmluZWQpO1xuICAgICAgICBzZXRQZW5kaW5nU3RhdGUodW5kZWZpbmVkKTtcbiAgICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgICBpc1RyYW5zaXRpb25pbmc6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgICBzZXRUcmFuc2l0aW9uKHRyYW5zaXRpb24pO1xuICAgIH1cbiAgfSwgW29wdEluU3RhcnRUcmFuc2l0aW9uLCBwZW5kaW5nU3RhdGUsIHJlbmRlckRmZCwgcm91dGVyLndpbmRvd10pO1xuICAvLyBXaGVuIHRoZSBuZXcgbG9jYXRpb24gZmluYWxseSByZW5kZXJzIGFuZCBpcyBjb21taXR0ZWQgdG8gdGhlIERPTSwgdGhpc1xuICAvLyBlZmZlY3Qgd2lsbCBydW4gdG8gcmVzb2x2ZSB0aGUgdHJhbnNpdGlvblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChyZW5kZXJEZmQgJiYgcGVuZGluZ1N0YXRlICYmIHN0YXRlLmxvY2F0aW9uLmtleSA9PT0gcGVuZGluZ1N0YXRlLmxvY2F0aW9uLmtleSkge1xuICAgICAgcmVuZGVyRGZkLnJlc29sdmUoKTtcbiAgICB9XG4gIH0sIFtyZW5kZXJEZmQsIHRyYW5zaXRpb24sIHN0YXRlLmxvY2F0aW9uLCBwZW5kaW5nU3RhdGVdKTtcbiAgLy8gSWYgd2UgZ2V0IGludGVycnVwdGVkIHdpdGggYSBuZXcgbmF2aWdhdGlvbiBkdXJpbmcgYSB0cmFuc2l0aW9uLCB3ZSBza2lwXG4gIC8vIHRoZSBhY3RpdmUgdHJhbnNpdGlvbiwgbGV0IGl0IGNsZWFudXAsIHRoZW4ga2ljayBpdCBvZmYgYWdhaW4gaGVyZVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghdnRDb250ZXh0LmlzVHJhbnNpdGlvbmluZyAmJiBpbnRlcnJ1cHRpb24pIHtcbiAgICAgIHNldFBlbmRpbmdTdGF0ZShpbnRlcnJ1cHRpb24uc3RhdGUpO1xuICAgICAgc2V0VnRDb250ZXh0KHtcbiAgICAgICAgaXNUcmFuc2l0aW9uaW5nOiB0cnVlLFxuICAgICAgICBmbHVzaFN5bmM6IGZhbHNlLFxuICAgICAgICBjdXJyZW50TG9jYXRpb246IGludGVycnVwdGlvbi5jdXJyZW50TG9jYXRpb24sXG4gICAgICAgIG5leHRMb2NhdGlvbjogaW50ZXJydXB0aW9uLm5leHRMb2NhdGlvblxuICAgICAgfSk7XG4gICAgICBzZXRJbnRlcnJ1cHRpb24odW5kZWZpbmVkKTtcbiAgICB9XG4gIH0sIFt2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nLCBpbnRlcnJ1cHRpb25dKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxsYmFja0VsZW1lbnQgPT0gbnVsbCB8fCAhcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uLCBcImA8Um91dGVyUHJvdmlkZXIgZmFsbGJhY2tFbGVtZW50PmAgaXMgZGVwcmVjYXRlZCB3aGVuIHVzaW5nIFwiICsgXCJgdjdfcGFydGlhbEh5ZHJhdGlvbmAsIHVzZSBhIGBIeWRyYXRlRmFsbGJhY2tgIGNvbXBvbmVudCBpbnN0ZWFkXCIpIDogdm9pZCAwO1xuICAgIC8vIE9ubHkgbG9nIHRoaXMgb25jZSBvbiBpbml0aWFsIG1vdW50XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbXSk7XG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAgY3JlYXRlSHJlZjogcm91dGVyLmNyZWF0ZUhyZWYsXG4gICAgICBlbmNvZGVMb2NhdGlvbjogcm91dGVyLmVuY29kZUxvY2F0aW9uLFxuICAgICAgZ286IG4gPT4gcm91dGVyLm5hdmlnYXRlKG4pLFxuICAgICAgcHVzaDogKHRvLCBzdGF0ZSwgb3B0cykgPT4gcm91dGVyLm5hdmlnYXRlKHRvLCB7XG4gICAgICAgIHN0YXRlLFxuICAgICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMucHJldmVudFNjcm9sbFJlc2V0XG4gICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+IHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlOiB0cnVlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLnByZXZlbnRTY3JvbGxSZXNldFxuICAgICAgfSlcbiAgICB9O1xuICB9LCBbcm91dGVyXSk7XG4gIGxldCBiYXNlbmFtZSA9IHJvdXRlci5iYXNlbmFtZSB8fCBcIi9cIjtcbiAgbGV0IGRhdGFSb3V0ZXJDb250ZXh0ID0gUmVhY3QudXNlTWVtbygoKSA9PiAoe1xuICAgIHJvdXRlcixcbiAgICBuYXZpZ2F0b3IsXG4gICAgc3RhdGljOiBmYWxzZSxcbiAgICBiYXNlbmFtZVxuICB9KSwgW3JvdXRlciwgbmF2aWdhdG9yLCBiYXNlbmFtZV0pO1xuICAvLyBUaGUgZnJhZ21lbnQgYW5kIHtudWxsfSBoZXJlIGFyZSBpbXBvcnRhbnQhICBXZSBuZWVkIHRoZW0gdG8ga2VlcCBSZWFjdCAxOCdzXG4gIC8vIHVzZUlkIGhhcHB5IHdoZW4gd2UgYXJlIHNlcnZlci1yZW5kZXJpbmcgc2luY2Ugd2UgbWF5IGhhdmUgYSA8c2NyaXB0PiBoZXJlXG4gIC8vIGNvbnRhaW5pbmcgdGhlIGh5ZHJhdGVkIHNlcnZlci1zaWRlIHN0YXRpY0NvbnRleHQgKGZyb20gU3RhdGljUm91dGVyUHJvdmlkZXIpLlxuICAvLyB1c2VJZCByZWxpZXMgb24gdGhlIGNvbXBvbmVudCB0cmVlIHN0cnVjdHVyZSB0byBnZW5lcmF0ZSBkZXRlcm1pbmlzdGljIGlkJ3NcbiAgLy8gc28gd2UgbmVlZCB0byBlbnN1cmUgaXQgcmVtYWlucyB0aGUgc2FtZSBvbiB0aGUgY2xpZW50IGV2ZW4gdGhvdWdoXG4gIC8vIHdlIGRvbid0IG5lZWQgdGhlIDxzY3JpcHQ+IHRhZ1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUmVhY3QuRnJhZ21lbnQsIG51bGwsIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBkYXRhUm91dGVyQ29udGV4dFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdGF0ZVxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGZXRjaGVyc0NvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogZmV0Y2hlckRhdGEuY3VycmVudFxuICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChWaWV3VHJhbnNpdGlvbkNvbnRleHQuUHJvdmlkZXIsIHtcbiAgICB2YWx1ZTogdnRDb250ZXh0XG4gIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmhpc3RvcnlBY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBuYXZpZ2F0b3IsXG4gICAgZnV0dXJlOiB7XG4gICAgICB2N19yZWxhdGl2ZVNwbGF0UGF0aDogcm91dGVyLmZ1dHVyZS52N19yZWxhdGl2ZVNwbGF0UGF0aFxuICAgIH1cbiAgfSwgc3RhdGUuaW5pdGlhbGl6ZWQgfHwgcm91dGVyLmZ1dHVyZS52N19wYXJ0aWFsSHlkcmF0aW9uID8gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoRGF0YVJvdXRlcywge1xuICAgIHJvdXRlczogcm91dGVyLnJvdXRlcyxcbiAgICBmdXR1cmU6IHJvdXRlci5mdXR1cmUsXG4gICAgc3RhdGU6IHN0YXRlXG4gIH0pIDogZmFsbGJhY2tFbGVtZW50KSkpKSksIG51bGwpO1xufVxuZnVuY3Rpb24gRGF0YVJvdXRlcyhfcmVmMykge1xuICBsZXQge1xuICAgIHJvdXRlcyxcbiAgICBmdXR1cmUsXG4gICAgc3RhdGVcbiAgfSA9IF9yZWYzO1xuICByZXR1cm4gVU5TQUZFX3VzZVJvdXRlc0ltcGwocm91dGVzLCB1bmRlZmluZWQsIHN0YXRlLCBmdXR1cmUpO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5mdW5jdGlvbiBCcm93c2VyUm91dGVyKF9yZWY0KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjQ7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFN0b3JlcyB0aGUgbG9jYXRpb24gaW4gdGhlIGhhc2hcbiAqIHBvcnRpb24gb2YgdGhlIFVSTCBzbyBpdCBpcyBub3Qgc2VudCB0byB0aGUgc2VydmVyLlxuICovXG5mdW5jdGlvbiBIYXNoUm91dGVyKF9yZWY1KSB7XG4gIGxldCB7XG4gICAgYmFzZW5hbWUsXG4gICAgY2hpbGRyZW4sXG4gICAgZnV0dXJlLFxuICAgIHdpbmRvd1xuICB9ID0gX3JlZjU7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmKCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHtcbiAgICAgIHdpbmRvdyxcbiAgICAgIHY1Q29tcGF0OiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlSW1wbF0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvblxuICB9KTtcbiAgbGV0IHtcbiAgICB2N19zdGFydFRyYW5zaXRpb25cbiAgfSA9IGZ1dHVyZSB8fCB7fTtcbiAgbGV0IHNldFN0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2sobmV3U3RhdGUgPT4ge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvbiAmJiBzdGFydFRyYW5zaXRpb25JbXBsID8gc3RhcnRUcmFuc2l0aW9uSW1wbCgoKSA9PiBzZXRTdGF0ZUltcGwobmV3U3RhdGUpKSA6IHNldFN0YXRlSW1wbChuZXdTdGF0ZSk7XG4gIH0sIFtzZXRTdGF0ZUltcGwsIHY3X3N0YXJ0VHJhbnNpdGlvbl0pO1xuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeSwgc2V0U3RhdGVdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwge1xuICAgIGJhc2VuYW1lOiBiYXNlbmFtZSxcbiAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIG5hdmlnYXRpb25UeXBlOiBzdGF0ZS5hY3Rpb24sXG4gICAgbmF2aWdhdG9yOiBoaXN0b3J5LFxuICAgIGZ1dHVyZTogZnV0dXJlXG4gIH0pO1xufVxuLyoqXG4gKiBBIGA8Um91dGVyPmAgdGhhdCBhY2NlcHRzIGEgcHJlLWluc3RhbnRpYXRlZCBoaXN0b3J5IG9iamVjdC4gSXQncyBpbXBvcnRhbnRcbiAqIHRvIG5vdGUgdGhhdCB1c2luZyB5b3VyIG93biBoaXN0b3J5IG9iamVjdCBpcyBoaWdobHkgZGlzY291cmFnZWQgYW5kIG1heSBhZGRcbiAqIHR3byB2ZXJzaW9ucyBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRvIHlvdXIgYnVuZGxlcyB1bmxlc3MgeW91IHVzZSB0aGUgc2FtZVxuICogdmVyc2lvbiBvZiB0aGUgaGlzdG9yeSBsaWJyYXJ5IHRoYXQgUmVhY3QgUm91dGVyIHVzZXMgaW50ZXJuYWxseS5cbiAqL1xuZnVuY3Rpb24gSGlzdG9yeVJvdXRlcihfcmVmNikge1xuICBsZXQge1xuICAgIGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuLFxuICAgIGZ1dHVyZSxcbiAgICBoaXN0b3J5XG4gIH0gPSBfcmVmNjtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVJbXBsXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uXG4gIH0pO1xuICBsZXQge1xuICAgIHY3X3N0YXJ0VHJhbnNpdGlvblxuICB9ID0gZnV0dXJlIHx8IHt9O1xuICBsZXQgc2V0U3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhuZXdTdGF0ZSA9PiB7XG4gICAgdjdfc3RhcnRUcmFuc2l0aW9uICYmIHN0YXJ0VHJhbnNpdGlvbkltcGwgPyBzdGFydFRyYW5zaXRpb25JbXBsKCgpID0+IHNldFN0YXRlSW1wbChuZXdTdGF0ZSkpIDogc2V0U3RhdGVJbXBsKG5ld1N0YXRlKTtcbiAgfSwgW3NldFN0YXRlSW1wbCwgdjdfc3RhcnRUcmFuc2l0aW9uXSk7XG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5LCBzZXRTdGF0ZV0pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgYmFzZW5hbWU6IGJhc2VuYW1lLFxuICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcbiAgICBsb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgbmF2aWdhdGlvblR5cGU6IHN0YXRlLmFjdGlvbixcbiAgICBuYXZpZ2F0b3I6IGhpc3RvcnksXG4gICAgZnV0dXJlOiBmdXR1cmVcbiAgfSk7XG59XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cbmNvbnN0IGlzQnJvd3NlciA9IHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIGA8YT5gLlxuICovXG5jb25zdCBMaW5rID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoZnVuY3Rpb24gTGlua1dpdGhSZWYoX3JlZjcsIHJlZikge1xuICBsZXQge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgfSA9IF9yZWY3LFxuICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmNywgX2V4Y2x1ZGVkKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG4gIGxldCBhYnNvbHV0ZUhyZWY7XG4gIGxldCBpc0V4dGVybmFsID0gZmFsc2U7XG4gIGlmICh0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgJiYgQUJTT0xVVEVfVVJMX1JFR0VYLnRlc3QodG8pKSB7XG4gICAgLy8gUmVuZGVyIHRoZSBhYnNvbHV0ZSBocmVmIHNlcnZlci0gYW5kIGNsaWVudC1zaWRlXG4gICAgYWJzb2x1dGVIcmVmID0gdG87XG4gICAgLy8gT25seSBjaGVjayBmb3IgZXh0ZXJuYWwgb3JpZ2lucyBjbGllbnQtc2lkZVxuICAgIGlmIChpc0Jyb3dzZXIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG4gICAgICAgIGxldCB0YXJnZXRVcmwgPSB0by5zdGFydHNXaXRoKFwiLy9cIikgPyBuZXcgVVJMKGN1cnJlbnRVcmwucHJvdG9jb2wgKyB0bykgOiBuZXcgVVJMKHRvKTtcbiAgICAgICAgbGV0IHBhdGggPSBzdHJpcEJhc2VuYW1lKHRhcmdldFVybC5wYXRobmFtZSwgYmFzZW5hbWUpO1xuICAgICAgICBpZiAodGFyZ2V0VXJsLm9yaWdpbiA9PT0gY3VycmVudFVybC5vcmlnaW4gJiYgcGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gU3RyaXAgdGhlIHByb3RvY29sL29yaWdpbi9iYXNlbmFtZSBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgVVJMc1xuICAgICAgICAgIHRvID0gcGF0aCArIHRhcmdldFVybC5zZWFyY2ggKyB0YXJnZXRVcmwuaGFzaDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBXZSBjYW4ndCBkbyBleHRlcm5hbCBVUkwgZGV0ZWN0aW9uIHdpdGhvdXQgYSB2YWxpZCBVUkxcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcoZmFsc2UsIFwiPExpbmsgdG89XFxcIlwiICsgdG8gKyBcIlxcXCI+IGNvbnRhaW5zIGFuIGludmFsaWQgVVJMIHdoaWNoIHdpbGwgcHJvYmFibHkgYnJlYWsgXCIgKyBcIndoZW4gY2xpY2tlZCAtIHBsZWFzZSB1cGRhdGUgdG8gYSB2YWxpZCBVUkwgcGF0aC5cIikgOiB2b2lkIDA7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFJlbmRlcmVkIGludG8gPGEgaHJlZj4gZm9yIHJlbGF0aXZlIFVSTHNcbiAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7XG4gICAgcmVsYXRpdmVcbiAgfSk7XG4gIGxldCBpbnRlcm5hbE9uQ2xpY2sgPSB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCB7XG4gICAgcmVwbGFjZSxcbiAgICBzdGF0ZSxcbiAgICB0YXJnZXQsXG4gICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgIHJlbGF0aXZlLFxuICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gIH0pO1xuICBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xuICAgIGlmIChvbkNsaWNrKSBvbkNsaWNrKGV2ZW50KTtcbiAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIGludGVybmFsT25DbGljayhldmVudCk7XG4gICAgfVxuICB9XG4gIHJldHVybiAoXG4gICAgLyojX19QVVJFX18qL1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBqc3gtYTExeS9hbmNob3ItaGFzLWNvbnRlbnRcbiAgICBSZWFjdC5jcmVhdGVFbGVtZW50KFwiYVwiLCBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgaHJlZjogYWJzb2x1dGVIcmVmIHx8IGhyZWYsXG4gICAgICBvbkNsaWNrOiBpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrLFxuICAgICAgcmVmOiByZWYsXG4gICAgICB0YXJnZXQ6IHRhcmdldFxuICAgIH0pKVxuICApO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cbi8qKlxuICogQSBgPExpbms+YCB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKGZ1bmN0aW9uIE5hdkxpbmtXaXRoUmVmKF9yZWY4LCByZWYpIHtcbiAgbGV0IHtcbiAgICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50UHJvcCA9IFwicGFnZVwiLFxuICAgICAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wID0gXCJcIixcbiAgICAgIGVuZCA9IGZhbHNlLFxuICAgICAgc3R5bGU6IHN0eWxlUHJvcCxcbiAgICAgIHRvLFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb24sXG4gICAgICBjaGlsZHJlblxuICAgIH0gPSBfcmVmOCxcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjgsIF9leGNsdWRlZDIpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlOiByZXN0LnJlbGF0aXZlXG4gIH0pO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcm91dGVyU3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHtcbiAgICBuYXZpZ2F0b3IsXG4gICAgYmFzZW5hbWVcbiAgfSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX05hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IGlzVHJhbnNpdGlvbmluZyA9IHJvdXRlclN0YXRlICE9IG51bGwgJiZcbiAgLy8gQ29uZGl0aW9uYWwgdXNhZ2UgaXMgT0sgaGVyZSBiZWNhdXNlIHRoZSB1c2FnZSBvZiBhIGRhdGEgcm91dGVyIGlzIHN0YXRpY1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgdXNlVmlld1RyYW5zaXRpb25TdGF0ZShwYXRoKSAmJiB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbiA9PT0gdHJ1ZTtcbiAgbGV0IHRvUGF0aG5hbWUgPSBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24gPyBuYXZpZ2F0b3IuZW5jb2RlTG9jYXRpb24ocGF0aCkucGF0aG5hbWUgOiBwYXRoLnBhdGhuYW1lO1xuICBsZXQgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lO1xuICBsZXQgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSByb3V0ZXJTdGF0ZSAmJiByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24gPyByb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLmxvY2F0aW9uLnBhdGhuYW1lIDogbnVsbDtcbiAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgbG9jYXRpb25QYXRobmFtZSA9IGxvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IG5leHRMb2NhdGlvblBhdGhuYW1lID8gbmV4dExvY2F0aW9uUGF0aG5hbWUudG9Mb3dlckNhc2UoKSA6IG51bGw7XG4gICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgfVxuICBpZiAobmV4dExvY2F0aW9uUGF0aG5hbWUgJiYgYmFzZW5hbWUpIHtcbiAgICBuZXh0TG9jYXRpb25QYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUobmV4dExvY2F0aW9uUGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBuZXh0TG9jYXRpb25QYXRobmFtZTtcbiAgfVxuICAvLyBJZiB0aGUgYHRvYCBoYXMgYSB0cmFpbGluZyBzbGFzaCwgbG9vayBhdCB0aGF0IGV4YWN0IHNwb3QuICBPdGhlcndpc2UsXG4gIC8vIHdlJ3JlIGxvb2tpbmcgZm9yIGEgc2xhc2ggX2FmdGVyXyB3aGF0J3MgaW4gYHRvYC4gIEZvciBleGFtcGxlOlxuICAvL1xuICAvLyA8TmF2TGluayB0bz1cIi91c2Vyc1wiPiBhbmQgPE5hdkxpbmsgdG89XCIvdXNlcnMvXCI+XG4gIC8vIGJvdGggd2FudCB0byBsb29rIGZvciBhIC8gYXQgaW5kZXggNiB0byBtYXRjaCBVUkwgYC91c2Vycy9tYXR0YFxuICBjb25zdCBlbmRTbGFzaFBvc2l0aW9uID0gdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIikgPyB0b1BhdGhuYW1lLmxlbmd0aCAtIDEgOiB0b1BhdGhuYW1lLmxlbmd0aDtcbiAgbGV0IGlzQWN0aXZlID0gbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIGxvY2F0aW9uUGF0aG5hbWUuc3RhcnRzV2l0aCh0b1BhdGhuYW1lKSAmJiBsb2NhdGlvblBhdGhuYW1lLmNoYXJBdChlbmRTbGFzaFBvc2l0aW9uKSA9PT0gXCIvXCI7XG4gIGxldCBpc1BlbmRpbmcgPSBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmIChuZXh0TG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fCAhZW5kICYmIG5leHRMb2NhdGlvblBhdGhuYW1lLnN0YXJ0c1dpdGgodG9QYXRobmFtZSkgJiYgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuICBsZXQgcmVuZGVyUHJvcHMgPSB7XG4gICAgaXNBY3RpdmUsXG4gICAgaXNQZW5kaW5nLFxuICAgIGlzVHJhbnNpdGlvbmluZ1xuICB9O1xuICBsZXQgYXJpYUN1cnJlbnQgPSBpc0FjdGl2ZSA/IGFyaWFDdXJyZW50UHJvcCA6IHVuZGVmaW5lZDtcbiAgbGV0IGNsYXNzTmFtZTtcbiAgaWYgKHR5cGVvZiBjbGFzc05hbWVQcm9wID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHJlbmRlclByb3BzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY2xhc3NOYW1lIHByb3AgaXMgbm90IGEgZnVuY3Rpb24sIHdlIHVzZSBhIGRlZmF1bHQgYGFjdGl2ZWBcbiAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgLy8gdmFsdWUgZm9yIGBhY3RpdmVDbGFzc05hbWVgLCBidXQgd2UgYXJlIHJlbW92aW5nIHRoYXQgQVBJIGFuZCBjYW4gc3RpbGxcbiAgICAvLyB1c2UgdGhlIG9sZCBkZWZhdWx0IGJlaGF2aW9yIGZvciBhIGNsZWFuZXIgdXBncmFkZSBwYXRoIGFuZCBrZWVwIHRoZVxuICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgY2xhc3NOYW1lID0gW2NsYXNzTmFtZVByb3AsIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbCwgaXNUcmFuc2l0aW9uaW5nID8gXCJ0cmFuc2l0aW9uaW5nXCIgOiBudWxsXS5maWx0ZXIoQm9vbGVhbikuam9pbihcIiBcIik7XG4gIH1cbiAgbGV0IHN0eWxlID0gdHlwZW9mIHN0eWxlUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gc3R5bGVQcm9wKHJlbmRlclByb3BzKSA6IHN0eWxlUHJvcDtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnQsXG4gICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgcmVmOiByZWYsXG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHRvOiB0byxcbiAgICB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbjogdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSksIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4ocmVuZGVyUHJvcHMpIDogY2hpbGRyZW4pO1xufSk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbn1cbi8qKlxuICogQSBgQHJlbWl4LXJ1bi9yb3V0ZXJgLWF3YXJlIGA8Zm9ybT5gLiBJdCBiZWhhdmVzIGxpa2UgYSBub3JtYWwgZm9ybSBleGNlcHRcbiAqIHRoYXQgdGhlIGludGVyYWN0aW9uIHdpdGggdGhlIHNlcnZlciBpcyB3aXRoIGBmZXRjaGAgaW5zdGVhZCBvZiBuZXcgZG9jdW1lbnRcbiAqIHJlcXVlc3RzLCBhbGxvd2luZyBjb21wb25lbnRzIHRvIGFkZCBuaWNlciBVWCB0byB0aGUgcGFnZSBhcyB0aGUgZm9ybSBpc1xuICogc3VibWl0dGVkIGFuZCByZXR1cm5zIHdpdGggZGF0YS5cbiAqL1xuY29uc3QgRm9ybSA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChfcmVmOSwgZm9yd2FyZGVkUmVmKSA9PiB7XG4gIGxldCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbmF2aWdhdGUsXG4gICAgICByZWxvYWREb2N1bWVudCxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIG1ldGhvZCA9IGRlZmF1bHRNZXRob2QsXG4gICAgICBhY3Rpb24sXG4gICAgICBvblN1Ym1pdCxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9ID0gX3JlZjksXG4gICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmOSwgX2V4Y2x1ZGVkMyk7XG4gIGxldCBzdWJtaXQgPSB1c2VTdWJtaXQoKTtcbiAgbGV0IGZvcm1BY3Rpb24gPSB1c2VGb3JtQWN0aW9uKGFjdGlvbiwge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICBsZXQgZm9ybU1ldGhvZCA9IG1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBcImdldFwiID8gXCJnZXRcIiA6IFwicG9zdFwiO1xuICBsZXQgc3VibWl0SGFuZGxlciA9IGV2ZW50ID0+IHtcbiAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgaWYgKGV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHJldHVybjtcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGxldCBzdWJtaXR0ZXIgPSBldmVudC5uYXRpdmVFdmVudC5zdWJtaXR0ZXI7XG4gICAgbGV0IHN1Ym1pdE1ldGhvZCA9IChzdWJtaXR0ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IHN1Ym1pdHRlci5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpKSB8fCBtZXRob2Q7XG4gICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICBmZXRjaGVyS2V5LFxuICAgICAgbWV0aG9kOiBzdWJtaXRNZXRob2QsXG4gICAgICBuYXZpZ2F0ZSxcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICB9KTtcbiAgfTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiLCBfZXh0ZW5kcyh7XG4gICAgcmVmOiBmb3J3YXJkZWRSZWYsXG4gICAgbWV0aG9kOiBmb3JtTWV0aG9kLFxuICAgIGFjdGlvbjogZm9ybUFjdGlvbixcbiAgICBvblN1Ym1pdDogcmVsb2FkRG9jdW1lbnQgPyBvblN1Ym1pdCA6IHN1Ym1pdEhhbmRsZXJcbiAgfSwgcHJvcHMpKTtcbn0pO1xuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBGb3JtLmRpc3BsYXlOYW1lID0gXCJGb3JtXCI7XG59XG4vKipcbiAqIFRoaXMgY29tcG9uZW50IHdpbGwgZW11bGF0ZSB0aGUgYnJvd3NlcidzIHNjcm9sbCByZXN0b3JhdGlvbiBvbiBsb2NhdGlvblxuICogY2hhbmdlcy5cbiAqL1xuZnVuY3Rpb24gU2Nyb2xsUmVzdG9yYXRpb24oX3JlZjEwKSB7XG4gIGxldCB7XG4gICAgZ2V0S2V5LFxuICAgIHN0b3JhZ2VLZXlcbiAgfSA9IF9yZWYxMDtcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oe1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgU2Nyb2xsUmVzdG9yYXRpb24uZGlzcGxheU5hbWUgPSBcIlNjcm9sbFJlc3RvcmF0aW9uXCI7XG59XG4vLyNlbmRyZWdpb25cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSG9va3Ncbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG52YXIgRGF0YVJvdXRlckhvb2s7XG4oZnVuY3Rpb24gKERhdGFSb3V0ZXJIb29rKSB7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU2Nyb2xsUmVzdG9yYXRpb25cIl0gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlU3VibWl0XCJdID0gXCJ1c2VTdWJtaXRcIjtcbiAgRGF0YVJvdXRlckhvb2tbXCJVc2VTdWJtaXRGZXRjaGVyXCJdID0gXCJ1c2VTdWJtaXRGZXRjaGVyXCI7XG4gIERhdGFSb3V0ZXJIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVySG9va1tcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIl0gPSBcInVzZVZpZXdUcmFuc2l0aW9uU3RhdGVcIjtcbn0pKERhdGFSb3V0ZXJIb29rIHx8IChEYXRhUm91dGVySG9vayA9IHt9KSk7XG52YXIgRGF0YVJvdXRlclN0YXRlSG9vaztcbihmdW5jdGlvbiAoRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlclwiXSA9IFwidXNlRmV0Y2hlclwiO1xuICBEYXRhUm91dGVyU3RhdGVIb29rW1wiVXNlRmV0Y2hlcnNcIl0gPSBcInVzZUZldGNoZXJzXCI7XG4gIERhdGFSb3V0ZXJTdGF0ZUhvb2tbXCJVc2VTY3JvbGxSZXN0b3JhdGlvblwiXSA9IFwidXNlU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn0pKERhdGFSb3V0ZXJTdGF0ZUhvb2sgfHwgKERhdGFSb3V0ZXJTdGF0ZUhvb2sgPSB7fSkpO1xuLy8gSW50ZXJuYWwgaG9va3NcbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpIHtcbiAgcmV0dXJuIGhvb2tOYW1lICsgXCIgbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5cIjtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJDb250ZXh0KGhvb2tOYW1lKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyQ29udGV4dCk7XG4gICFjdHggPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSkgOiBVTlNBRkVfaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgcmV0dXJuIGN0eDtcbn1cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZSkge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgIXN0YXRlID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX2ludmFyaWFudChmYWxzZSwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHJldHVybiBzdGF0ZTtcbn1cbi8vIEV4dGVybmFsIGhvb2tzXG4vKipcbiAqIEhhbmRsZXMgdGhlIGNsaWNrIGJlaGF2aW9yIGZvciByb3V0ZXIgYDxMaW5rPmAgY29tcG9uZW50cy4gVGhpcyBpcyB1c2VmdWwgaWZcbiAqIHlvdSBuZWVkIHRvIGNyZWF0ZSBjdXN0b20gYDxMaW5rPmAgY29tcG9uZW50cyB3aXRoIHRoZSBzYW1lIGNsaWNrIGJlaGF2aW9yIHdlXG4gKiB1c2UgaW4gb3VyIGV4cG9ydGVkIGA8TGluaz5gLlxuICovXG5mdW5jdGlvbiB1c2VMaW5rQ2xpY2tIYW5kbGVyKHRvLCBfdGVtcCkge1xuICBsZXQge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgfSA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wO1xuICBsZXQgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywge1xuICAgIHJlbGF0aXZlXG4gIH0pO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZXZlbnQgPT4ge1xuICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAvLyBhIHB1c2gsIHNvIGRvIHRoZSBzYW1lIGhlcmUgdW5sZXNzIHRoZSByZXBsYWNlIHByb3AgaXMgZXhwbGljaXRseSBzZXRcbiAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZCA/IHJlcGxhY2VQcm9wIDogY3JlYXRlUGF0aChsb2NhdGlvbikgPT09IGNyZWF0ZVBhdGgocGF0aCk7XG4gICAgICBuYXZpZ2F0ZSh0bywge1xuICAgICAgICByZXBsYWNlLFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgdW5zdGFibGVfdmlld1RyYW5zaXRpb25cbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2xvY2F0aW9uLCBuYXZpZ2F0ZSwgcGF0aCwgcmVwbGFjZVByb3AsIHN0YXRlLCB0YXJnZXQsIHRvLCBwcmV2ZW50U2Nyb2xsUmVzZXQsIHJlbGF0aXZlLCB1bnN0YWJsZV92aWV3VHJhbnNpdGlvbl0pO1xufVxuLyoqXG4gKiBBIGNvbnZlbmllbnQgd3JhcHBlciBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBzZWFyY2ggcGFyYW1ldGVycyB2aWEgdGhlXG4gKiBVUkxTZWFyY2hQYXJhbXMgaW50ZXJmYWNlLlxuICovXG5mdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoZGVmYXVsdEluaXQpIHtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gVU5TQUZFX3dhcm5pbmcodHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIiwgXCJZb3UgY2Fubm90IHVzZSB0aGUgYHVzZVNlYXJjaFBhcmFtc2AgaG9vayBpbiBhIGJyb3dzZXIgdGhhdCBkb2VzIG5vdCBcIiArIFwic3VwcG9ydCB0aGUgVVJMU2VhcmNoUGFyYW1zIEFQSS4gSWYgeW91IG5lZWQgdG8gc3VwcG9ydCBJbnRlcm5ldCBcIiArIFwiRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgXCIgKyBcImh0dHBzOi8vZ2l0aHViLmNvbS91bmdhcC91cmwtc2VhcmNoLXBhcmFtc1xcblxcblwiICsgXCJJZiB5b3UncmUgdW5zdXJlIGhvdyB0byBsb2FkIHBvbHlmaWxscywgd2UgcmVjb21tZW5kIHlvdSBjaGVjayBvdXQgXCIgKyBcImh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBcIiArIFwidG8gbG9hZCBwb2x5ZmlsbHMgb25seSBmb3IgdXNlcnMgdGhhdCBuZWVkIHRoZW0sIGluc3RlYWQgb2YgZm9yIGV2ZXJ5IFwiICsgXCJ1c2VyLlwiKSA6IHZvaWQgMDtcbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgc2VhcmNoUGFyYW1zID0gUmVhY3QudXNlTWVtbygoKSA9PlxuICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAvLyBPbmNlIHdlIGNhbGwgdGhhdCB3ZSB3YW50IHRob3NlIHRvIHRha2UgcHJlY2VkZW5jZSwgb3RoZXJ3aXNlIHlvdSBjYW4ndFxuICAvLyByZW1vdmUgYSBwYXJhbSB3aXRoIHNldFNlYXJjaFBhcmFtcyh7fSkgaWYgaXQgaGFzIGFuIGluaXRpYWwgdmFsdWVcbiAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24obG9jYXRpb24uc2VhcmNoLCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA/IG51bGwgOiBkZWZhdWx0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQpLCBbbG9jYXRpb24uc2VhcmNoXSk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBzZXRTZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VDYWxsYmFjaygobmV4dEluaXQsIG5hdmlnYXRlT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyh0eXBlb2YgbmV4dEluaXQgPT09IFwiZnVuY3Rpb25cIiA/IG5leHRJbml0KHNlYXJjaFBhcmFtcykgOiBuZXh0SW5pdCk7XG4gICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPSB0cnVlO1xuICAgIG5hdmlnYXRlKFwiP1wiICsgbmV3U2VhcmNoUGFyYW1zLCBuYXZpZ2F0ZU9wdGlvbnMpO1xuICB9LCBbbmF2aWdhdGUsIHNlYXJjaFBhcmFtc10pO1xuICByZXR1cm4gW3NlYXJjaFBhcmFtcywgc2V0U2VhcmNoUGFyYW1zXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlQ2xpZW50U2lkZVN1Ym1pc3Npb24oKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJZb3UgYXJlIGNhbGxpbmcgc3VibWl0IGR1cmluZyB0aGUgc2VydmVyIHJlbmRlci4gXCIgKyBcIlRyeSBjYWxsaW5nIHN1Ym1pdCB3aXRoaW4gYSBgdXNlRWZmZWN0YCBvciBjYWxsYmFjayBpbnN0ZWFkLlwiKTtcbiAgfVxufVxubGV0IGZldGNoZXJJZCA9IDA7XG5sZXQgZ2V0VW5pcXVlRmV0Y2hlcklkID0gKCkgPT4gXCJfX1wiICsgU3RyaW5nKCsrZmV0Y2hlcklkKSArIFwiX19cIjtcbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgbWF5IGJlIHVzZWQgdG8gcHJvZ3JhbW1hdGljYWxseSBzdWJtaXQgYSBmb3JtIChvclxuICogc29tZSBhcmJpdHJhcnkgZGF0YSkgdG8gdGhlIHNlcnZlci5cbiAqL1xuZnVuY3Rpb24gdXNlU3VibWl0KCkge1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0KTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgY3VycmVudFJvdXRlSWQgPSBVTlNBRkVfdXNlUm91dGVJZCgpO1xuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soZnVuY3Rpb24gKHRhcmdldCwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG4gICAgdmFsaWRhdGVDbGllbnRTaWRlU3VibWlzc2lvbigpO1xuICAgIGxldCB7XG4gICAgICBhY3Rpb24sXG4gICAgICBtZXRob2QsXG4gICAgICBlbmNUeXBlLFxuICAgICAgZm9ybURhdGEsXG4gICAgICBib2R5XG4gICAgfSA9IGdldEZvcm1TdWJtaXNzaW9uSW5mbyh0YXJnZXQsIGJhc2VuYW1lKTtcbiAgICBpZiAob3B0aW9ucy5uYXZpZ2F0ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGxldCBrZXkgPSBvcHRpb25zLmZldGNoZXJLZXkgfHwgZ2V0VW5pcXVlRmV0Y2hlcklkKCk7XG4gICAgICByb3V0ZXIuZmV0Y2goa2V5LCBjdXJyZW50Um91dGVJZCwgb3B0aW9ucy5hY3Rpb24gfHwgYWN0aW9uLCB7XG4gICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0aW9ucy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIGZvcm1EYXRhLFxuICAgICAgICBib2R5LFxuICAgICAgICBmb3JtTWV0aG9kOiBvcHRpb25zLm1ldGhvZCB8fCBtZXRob2QsXG4gICAgICAgIGZvcm1FbmNUeXBlOiBvcHRpb25zLmVuY1R5cGUgfHwgZW5jVHlwZSxcbiAgICAgICAgdW5zdGFibGVfZmx1c2hTeW5jOiBvcHRpb25zLnVuc3RhYmxlX2ZsdXNoU3luY1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlci5uYXZpZ2F0ZShvcHRpb25zLmFjdGlvbiB8fCBhY3Rpb24sIHtcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGJvZHksXG4gICAgICAgIGZvcm1NZXRob2Q6IG9wdGlvbnMubWV0aG9kIHx8IG1ldGhvZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IG9wdGlvbnMuZW5jVHlwZSB8fCBlbmNUeXBlLFxuICAgICAgICByZXBsYWNlOiBvcHRpb25zLnJlcGxhY2UsXG4gICAgICAgIHN0YXRlOiBvcHRpb25zLnN0YXRlLFxuICAgICAgICBmcm9tUm91dGVJZDogY3VycmVudFJvdXRlSWQsXG4gICAgICAgIHVuc3RhYmxlX2ZsdXNoU3luYzogb3B0aW9ucy51bnN0YWJsZV9mbHVzaFN5bmMsXG4gICAgICAgIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uOiBvcHRpb25zLnVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtyb3V0ZXIsIGJhc2VuYW1lLCBjdXJyZW50Um91dGVJZF0pO1xufVxuLy8gdjc6IEV2ZW50dWFsbHkgd2Ugc2hvdWxkIGRlcHJlY2F0ZSB0aGlzIGVudGlyZWx5IGluIGZhdm9yIG9mIHVzaW5nIHRoZVxuLy8gcm91dGVyIG1ldGhvZCBkaXJlY3RseT9cbmZ1bmN0aW9uIHVzZUZvcm1BY3Rpb24oYWN0aW9uLCBfdGVtcDIpIHtcbiAgbGV0IHtcbiAgICByZWxhdGl2ZVxuICB9ID0gX3RlbXAyID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wMjtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgcm91dGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfUm91dGVDb250ZXh0KTtcbiAgIXJvdXRlQ29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG4gIGxldCBwYXRoID0gX2V4dGVuZHMoe30sIHVzZVJlc29sdmVkUGF0aChhY3Rpb24gPyBhY3Rpb24gOiBcIi5cIiwge1xuICAgIHJlbGF0aXZlXG4gIH0pKTtcbiAgLy8gSWYgbm8gYWN0aW9uIHdhcyBzcGVjaWZpZWQsIGJyb3dzZXJzIHdpbGwgcGVyc2lzdCBjdXJyZW50IHNlYXJjaCBwYXJhbXNcbiAgLy8gd2hlbiBkZXRlcm1pbmluZyB0aGUgcGF0aCwgc28gbWF0Y2ggdGhhdCBiZWhhdmlvclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL3JlbWl4L2lzc3Vlcy85MjdcbiAgbGV0IGxvY2F0aW9uID0gdXNlTG9jYXRpb24oKTtcbiAgaWYgKGFjdGlvbiA9PSBudWxsKSB7XG4gICAgLy8gU2FmZSB0byB3cml0ZSB0byB0aGlzIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICBwYXRoLnNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaDtcbiAgICAvLyBXaGVuIGdyYWJiaW5nIHNlYXJjaCBwYXJhbXMgZnJvbSB0aGUgVVJMLCByZW1vdmUgYW55IGluY2x1ZGVkID9pbmRleCBwYXJhbVxuICAgIC8vIHNpbmNlIGl0IG1pZ2h0IG5vdCBhcHBseSB0byBvdXIgY29udGV4dHVhbCByb3V0ZS4gIFdlIGFkZCBpdCBiYWNrIGJhc2VkXG4gICAgLy8gb24gbWF0Y2gucm91dGUuaW5kZXggYmVsb3dcbiAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhwYXRoLnNlYXJjaCk7XG4gICAgaWYgKHBhcmFtcy5oYXMoXCJpbmRleFwiKSAmJiBwYXJhbXMuZ2V0KFwiaW5kZXhcIikgPT09IFwiXCIpIHtcbiAgICAgIHBhcmFtcy5kZWxldGUoXCJpbmRleFwiKTtcbiAgICAgIHBhdGguc2VhcmNoID0gcGFyYW1zLnRvU3RyaW5nKCkgPyBcIj9cIiArIHBhcmFtcy50b1N0cmluZygpIDogXCJcIjtcbiAgICB9XG4gIH1cbiAgaWYgKCghYWN0aW9uIHx8IGFjdGlvbiA9PT0gXCIuXCIpICYmIG1hdGNoLnJvdXRlLmluZGV4KSB7XG4gICAgcGF0aC5zZWFyY2ggPSBwYXRoLnNlYXJjaCA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIikgOiBcIj9pbmRleFwiO1xuICB9XG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPSBwYXRoLnBhdGhuYW1lID09PSBcIi9cIiA/IGJhc2VuYW1lIDogam9pblBhdGhzKFtiYXNlbmFtZSwgcGF0aC5wYXRobmFtZV0pO1xuICB9XG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuLy8gVE9ETzogKHY3KSBDaGFuZ2UgdGhlIHVzZUZldGNoZXIgZ2VuZXJpYyBkZWZhdWx0IGZyb20gYGFueWAgdG8gYHVua25vd25gXG4vKipcbiAqIEludGVyYWN0cyB3aXRoIHJvdXRlIGxvYWRlcnMgYW5kIGFjdGlvbnMgd2l0aG91dCBjYXVzaW5nIGEgbmF2aWdhdGlvbi4gR3JlYXRcbiAqIGZvciBhbnkgaW50ZXJhY3Rpb24gdGhhdCBzdGF5cyBvbiB0aGUgc2FtZSBwYWdlLlxuICovXG5mdW5jdGlvbiB1c2VGZXRjaGVyKF90ZW1wMykge1xuICB2YXIgX3JvdXRlJG1hdGNoZXM7XG4gIGxldCB7XG4gICAga2V5XG4gIH0gPSBfdGVtcDMgPT09IHZvaWQgMCA/IHt9IDogX3RlbXAzO1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlRmV0Y2hlcik7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUZldGNoZXIpO1xuICBsZXQgZmV0Y2hlckRhdGEgPSBSZWFjdC51c2VDb250ZXh0KEZldGNoZXJzQ29udGV4dCk7XG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoVU5TQUZFX1JvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZUlkID0gKF9yb3V0ZSRtYXRjaGVzID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdKSA9PSBudWxsID8gdm9pZCAwIDogX3JvdXRlJG1hdGNoZXMucm91dGUuaWQ7XG4gICFmZXRjaGVyRGF0YSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgRmV0Y2hlcnNDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICFyb3V0ZSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpIDogVU5TQUZFX2ludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICEocm91dGVJZCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwidXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXFxcImlkXFxcIlwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAvLyBGZXRjaGVyIGtleSBoYW5kbGluZ1xuICAvLyBPSyB0byBjYWxsIGNvbmRpdGlvbmFsbHkgdG8gZmVhdHVyZSBkZXRlY3QgYHVzZUlkYFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgbGV0IGRlZmF1bHRLZXkgPSB1c2VJZEltcGwgPyB1c2VJZEltcGwoKSA6IFwiXCI7XG4gIGxldCBbZmV0Y2hlcktleSwgc2V0RmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZShrZXkgfHwgZGVmYXVsdEtleSk7XG4gIGlmIChrZXkgJiYga2V5ICE9PSBmZXRjaGVyS2V5KSB7XG4gICAgc2V0RmV0Y2hlcktleShrZXkpO1xuICB9IGVsc2UgaWYgKCFmZXRjaGVyS2V5KSB7XG4gICAgLy8gV2Ugd2lsbCBvbmx5IGZhbGwgdGhyb3VnaCBoZXJlIHdoZW4gYHVzZUlkYCBpcyBub3QgYXZhaWxhYmxlXG4gICAgc2V0RmV0Y2hlcktleShnZXRVbmlxdWVGZXRjaGVySWQoKSk7XG4gIH1cbiAgLy8gUmVnaXN0cmF0aW9uL2NsZWFudXBcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByb3V0ZXIuZ2V0RmV0Y2hlcihmZXRjaGVyS2V5KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgLy8gVGVsbCB0aGUgcm91dGVyIHdlJ3ZlIHVubW91bnRlZCAtIGlmIHY3X2ZldGNoZXJQZXJzaXN0IGlzIGVuYWJsZWQgdGhpc1xuICAgICAgLy8gd2lsbCBub3QgZGVsZXRlIGltbWVkaWF0ZWx5IGJ1dCBpbnN0ZWFkIHF1ZXVlIHVwIGEgZGVsZXRlIGFmdGVyIHRoZVxuICAgICAgLy8gZmV0Y2hlciByZXR1cm5zIHRvIGFuIGBpZGxlYCBzdGF0ZVxuICAgICAgcm91dGVyLmRlbGV0ZUZldGNoZXIoZmV0Y2hlcktleSk7XG4gICAgfTtcbiAgfSwgW3JvdXRlciwgZmV0Y2hlcktleV0pO1xuICAvLyBGZXRjaGVyIGFkZGl0aW9uc1xuICBsZXQgbG9hZCA9IFJlYWN0LnVzZUNhbGxiYWNrKChocmVmLCBvcHRzKSA9PiB7XG4gICAgIXJvdXRlSWQgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfaW52YXJpYW50KGZhbHNlLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgfSwgW2ZldGNoZXJLZXksIHJvdXRlSWQsIHJvdXRlcl0pO1xuICBsZXQgc3VibWl0SW1wbCA9IHVzZVN1Ym1pdCgpO1xuICBsZXQgc3VibWl0ID0gUmVhY3QudXNlQ2FsbGJhY2soKHRhcmdldCwgb3B0cykgPT4ge1xuICAgIHN1Ym1pdEltcGwodGFyZ2V0LCBfZXh0ZW5kcyh7fSwgb3B0cywge1xuICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgZmV0Y2hlcktleVxuICAgIH0pKTtcbiAgfSwgW2ZldGNoZXJLZXksIHN1Ym1pdEltcGxdKTtcbiAgbGV0IEZldGNoZXJGb3JtID0gUmVhY3QudXNlTWVtbygoKSA9PiB7XG4gICAgbGV0IEZldGNoZXJGb3JtID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChGb3JtLCBfZXh0ZW5kcyh7fSwgcHJvcHMsIHtcbiAgICAgICAgbmF2aWdhdGU6IGZhbHNlLFxuICAgICAgICBmZXRjaGVyS2V5OiBmZXRjaGVyS2V5LFxuICAgICAgICByZWY6IHJlZlxuICAgICAgfSkpO1xuICAgIH0pO1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgICB9XG4gICAgcmV0dXJuIEZldGNoZXJGb3JtO1xuICB9LCBbZmV0Y2hlcktleV0pO1xuICAvLyBFeHBvc2VkIEZldGNoZXJXaXRoQ29tcG9uZW50c1xuICBsZXQgZmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChmZXRjaGVyS2V5KSB8fCBJRExFX0ZFVENIRVI7XG4gIGxldCBkYXRhID0gZmV0Y2hlckRhdGEuZ2V0KGZldGNoZXJLZXkpO1xuICBsZXQgZmV0Y2hlcldpdGhDb21wb25lbnRzID0gUmVhY3QudXNlTWVtbygoKSA9PiBfZXh0ZW5kcyh7XG4gICAgRm9ybTogRmV0Y2hlckZvcm0sXG4gICAgc3VibWl0LFxuICAgIGxvYWRcbiAgfSwgZmV0Y2hlciwge1xuICAgIGRhdGFcbiAgfSksIFtGZXRjaGVyRm9ybSwgc3VibWl0LCBsb2FkLCBmZXRjaGVyLCBkYXRhXSk7XG4gIHJldHVybiBmZXRjaGVyV2l0aENvbXBvbmVudHM7XG59XG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmZ1bmN0aW9uIHVzZUZldGNoZXJzKCkge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBBcnJheS5mcm9tKHN0YXRlLmZldGNoZXJzLmVudHJpZXMoKSkubWFwKF9yZWYxMSA9PiB7XG4gICAgbGV0IFtrZXksIGZldGNoZXJdID0gX3JlZjExO1xuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgZmV0Y2hlciwge1xuICAgICAga2V5XG4gICAgfSk7XG4gIH0pO1xufVxuY29uc3QgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZID0gXCJyZWFjdC1yb3V0ZXItc2Nyb2xsLXBvc2l0aW9uc1wiO1xubGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zID0ge307XG4vKipcbiAqIFdoZW4gcmVuZGVyZWQgaW5zaWRlIGEgUm91dGVyUHJvdmlkZXIsIHdpbGwgcmVzdG9yZSBzY3JvbGwgcG9zaXRpb25zIG9uIG5hdmlnYXRpb25zXG4gKi9cbmZ1bmN0aW9uIHVzZVNjcm9sbFJlc3RvcmF0aW9uKF90ZW1wNCkge1xuICBsZXQge1xuICAgIGdldEtleSxcbiAgICBzdG9yYWdlS2V5XG4gIH0gPSBfdGVtcDQgPT09IHZvaWQgMCA/IHt9IDogX3RlbXA0O1xuICBsZXQge1xuICAgIHJvdXRlclxuICB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU2Nyb2xsUmVzdG9yYXRpb24pO1xuICBsZXQge1xuICAgIHJlc3RvcmVTY3JvbGxQb3NpdGlvbixcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXRcbiAgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHtcbiAgICBiYXNlbmFtZVxuICB9ID0gUmVhY3QudXNlQ29udGV4dChVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBsZXQgbWF0Y2hlcyA9IHVzZU1hdGNoZXMoKTtcbiAgbGV0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uKCk7XG4gIC8vIFRyaWdnZXIgbWFudWFsIHNjcm9sbCByZXN0b3JhdGlvbiB3aGlsZSB3ZSdyZSBhY3RpdmVcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwibWFudWFsXCI7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gICAgfTtcbiAgfSwgW10pO1xuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKG5hdmlnYXRpb24uc3RhdGUgPT09IFwiaWRsZVwiKSB7XG4gICAgICBsZXQga2V5ID0gKGdldEtleSA/IGdldEtleShsb2NhdGlvbiwgbWF0Y2hlcykgOiBudWxsKSB8fCBsb2NhdGlvbi5rZXk7XG4gICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZLCBKU09OLnN0cmluZ2lmeShzYXZlZFNjcm9sbFBvc2l0aW9ucykpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBVTlNBRkVfd2FybmluZyhmYWxzZSwgXCJGYWlsZWQgdG8gc2F2ZSBzY3JvbGwgcG9zaXRpb25zIGluIHNlc3Npb25TdG9yYWdlLCA8U2Nyb2xsUmVzdG9yYXRpb24gLz4gd2lsbCBub3Qgd29yayBwcm9wZXJseSAoXCIgKyBlcnJvciArIFwiKS5cIikgOiB2b2lkIDA7XG4gICAgfVxuICAgIHdpbmRvdy5oaXN0b3J5LnNjcm9sbFJlc3RvcmF0aW9uID0gXCJhdXRvXCI7XG4gIH0sIFtzdG9yYWdlS2V5LCBnZXRLZXksIG5hdmlnYXRpb24uc3RhdGUsIGxvY2F0aW9uLCBtYXRjaGVzXSkpO1xuICAvLyBSZWFkIGluIGFueSBzYXZlZCBzY3JvbGwgbG9jYXRpb25zXG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgdHJ5IHtcbiAgICAgICAgbGV0IHNlc3Npb25Qb3NpdGlvbnMgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKHN0b3JhZ2VLZXkgfHwgU0NST0xMX1JFU1RPUkFUSU9OX1NUT1JBR0VfS0VZKTtcbiAgICAgICAgaWYgKHNlc3Npb25Qb3NpdGlvbnMpIHtcbiAgICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9ucyA9IEpTT04ucGFyc2Uoc2Vzc2lvblBvc2l0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gbm8tb3AsIHVzZSBkZWZhdWx0IGVtcHR5IG9iamVjdFxuICAgICAgfVxuICAgIH0sIFtzdG9yYWdlS2V5XSk7XG4gICAgLy8gRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBpbiB0aGUgcm91dGVyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIGxldCBnZXRLZXlXaXRob3V0QmFzZW5hbWUgPSBnZXRLZXkgJiYgYmFzZW5hbWUgIT09IFwiL1wiID8gKGxvY2F0aW9uLCBtYXRjaGVzKSA9PiBnZXRLZXkoIC8vIFN0cmlwIHRoZSBiYXNlbmFtZSB0byBtYXRjaCB1c2VMb2NhdGlvbigpXG4gICAgICBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICAgICAgcGF0aG5hbWU6IHN0cmlwQmFzZW5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGJhc2VuYW1lKSB8fCBsb2NhdGlvbi5wYXRobmFtZVxuICAgICAgfSksIG1hdGNoZXMpIDogZ2V0S2V5O1xuICAgICAgbGV0IGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbiA9IHJvdXRlciA9PSBudWxsID8gdm9pZCAwIDogcm91dGVyLmVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKHNhdmVkU2Nyb2xsUG9zaXRpb25zLCAoKSA9PiB3aW5kb3cuc2Nyb2xsWSwgZ2V0S2V5V2l0aG91dEJhc2VuYW1lKTtcbiAgICAgIHJldHVybiAoKSA9PiBkaXNhYmxlU2Nyb2xsUmVzdG9yYXRpb24gJiYgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uKCk7XG4gICAgfSwgW3JvdXRlciwgYmFzZW5hbWUsIGdldEtleV0pO1xuICAgIC8vIFJlc3RvcmUgc2Nyb2xsaW5nIHdoZW4gc3RhdGUucmVzdG9yZVNjcm9sbFBvc2l0aW9uIGNoYW5nZXNcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvcnVsZXMtb2YtaG9va3NcbiAgICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4ge1xuICAgICAgLy8gRXhwbGljaXQgZmFsc2UgbWVhbnMgZG9uJ3QgZG8gYW55dGhpbmcgKHVzZWQgZm9yIHN1Ym1pc3Npb25zKVxuICAgICAgaWYgKHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gYmVlbiBoZXJlIGJlZm9yZSwgc2Nyb2xsIHRvIGl0XG4gICAgICBpZiAodHlwZW9mIHJlc3RvcmVTY3JvbGxQb3NpdGlvbiA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoZGVjb2RlVVJJQ29tcG9uZW50KGxvY2F0aW9uLmhhc2guc2xpY2UoMSkpKTtcbiAgICAgICAgaWYgKGVsKSB7XG4gICAgICAgICAgZWwuc2Nyb2xsSW50b1ZpZXcoKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gb3RoZXJ3aXNlIGdvIHRvIHRoZSB0b3Agb24gbmV3IGxvY2F0aW9uc1xuICAgICAgd2luZG93LnNjcm9sbFRvKDAsIDApO1xuICAgIH0sIFtsb2NhdGlvbiwgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXRdKTtcbiAgfVxufVxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgYmVmb3JldW5sb2FkYCBldmVudC4gVGhpcyBpc1xuICogdXNlZnVsIGZvciBzYXZpbmcgc29tZSBkYXRhIHRvIGB3aW5kb3cubG9jYWxTdG9yYWdlYCBqdXN0IGJlZm9yZSB0aGUgcGFnZVxuICogcmVmcmVzaGVzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VCZWZvcmVVbmxvYWQoY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgbGV0IHtcbiAgICBjYXB0dXJlXG4gIH0gPSBvcHRpb25zIHx8IHt9O1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGxldCBvcHRzID0gY2FwdHVyZSAhPSBudWxsID8ge1xuICAgICAgY2FwdHVyZVxuICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJiZWZvcmV1bmxvYWRcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgfTtcbiAgfSwgW2NhbGxiYWNrLCBjYXB0dXJlXSk7XG59XG4vKipcbiAqIFNldHVwIGEgY2FsbGJhY2sgdG8gYmUgZmlyZWQgb24gdGhlIHdpbmRvdydzIGBwYWdlaGlkZWAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy4gIFRoaXMgZXZlbnQgaXMgYmV0dGVyIHN1cHBvcnRlZCB0aGFuIGJlZm9yZXVubG9hZCBhY3Jvc3MgYnJvd3NlcnMuXG4gKlxuICogTm90ZTogVGhlIGBjYWxsYmFja2AgYXJndW1lbnQgc2hvdWxkIGJlIGEgZnVuY3Rpb24gY3JlYXRlZCB3aXRoXG4gKiBgUmVhY3QudXNlQ2FsbGJhY2soKWAuXG4gKi9cbmZ1bmN0aW9uIHVzZVBhZ2VIaWRlKGNhbGxiYWNrLCBvcHRpb25zKSB7XG4gIGxldCB7XG4gICAgY2FwdHVyZVxuICB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHtcbiAgICAgIGNhcHR1cmVcbiAgICB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cbi8qKlxuICogV3JhcHBlciBhcm91bmQgdXNlQmxvY2tlciB0byBzaG93IGEgd2luZG93LmNvbmZpcm0gcHJvbXB0IHRvIHVzZXJzIGluc3RlYWRcbiAqIG9mIGJ1aWxkaW5nIGEgY3VzdG9tIFVJIHdpdGggdXNlQmxvY2tlci5cbiAqXG4gKiBXYXJuaW5nOiBUaGlzIGhhcyAqYSBsb3Qgb2Ygcm91Z2ggZWRnZXMqIGFuZCBiZWhhdmVzIHZlcnkgZGlmZmVyZW50bHkgKGFuZFxuICogdmVyeSBpbmNvcnJlY3RseSBpbiBzb21lIGNhc2VzKSBhY3Jvc3MgYnJvd3NlcnMgaWYgdXNlciBjbGljayBhZGRpdGlvblxuICogYmFjay9mb3J3YXJkIG5hdmlnYXRpb25zIHdoaWxlIHRoZSBjb25maXJtIGlzIG9wZW4uICBVc2UgYXQgeW91ciBvd24gcmlzay5cbiAqL1xuZnVuY3Rpb24gdXNlUHJvbXB0KF9yZWYxMikge1xuICBsZXQge1xuICAgIHdoZW4sXG4gICAgbWVzc2FnZVxuICB9ID0gX3JlZjEyO1xuICBsZXQgYmxvY2tlciA9IHVzZUJsb2NrZXIod2hlbik7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgLy8gVGhpcyB0aW1lb3V0IGlzIG5lZWRlZCB0byBhdm9pZCBhIHdlaXJkIFwicmFjZVwiIG9uIFBPUCBuYXZpZ2F0aW9uc1xuICAgICAgICAvLyBiZXR3ZWVuIHRoZSBgd2luZG93Lmhpc3RvcnlgIHJldmVydCBuYXZpZ2F0aW9uIGFuZCB0aGUgcmVzdWx0IG9mXG4gICAgICAgIC8vIGB3aW5kb3cuY29uZmlybWBcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgIXdoZW4pIHtcbiAgICAgIGJsb2NrZXIucmVzZXQoKTtcbiAgICB9XG4gIH0sIFtibG9ja2VyLCB3aGVuXSk7XG59XG4vKipcbiAqIFJldHVybiBhIGJvb2xlYW4gaW5kaWNhdGluZyBpZiB0aGVyZSBpcyBhbiBhY3RpdmUgdmlldyB0cmFuc2l0aW9uIHRvIHRoZVxuICogZ2l2ZW4gaHJlZi4gIFlvdSBjYW4gdXNlIHRoaXMgdmFsdWUgdG8gcmVuZGVyIENTUyBjbGFzc2VzIG9yIHZpZXdUcmFuc2l0aW9uTmFtZVxuICogc3R5bGVzIG9udG8geW91ciBlbGVtZW50c1xuICpcbiAqIEBwYXJhbSBocmVmIFRoZSBkZXN0aW5hdGlvbiBocmVmXG4gKiBAcGFyYW0gW29wdHMucmVsYXRpdmVdIFJlbGF0aXZlIHJvdXRpbmcgdHlwZSAoXCJyb3V0ZVwiIHwgXCJwYXRoXCIpXG4gKi9cbmZ1bmN0aW9uIHVzZVZpZXdUcmFuc2l0aW9uU3RhdGUodG8sIG9wdHMpIHtcbiAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgIG9wdHMgPSB7fTtcbiAgfVxuICBsZXQgdnRDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChWaWV3VHJhbnNpdGlvbkNvbnRleHQpO1xuICAhKHZ0Q29udGV4dCAhPSBudWxsKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UsIFwiYHVuc3RhYmxlX3VzZVZpZXdUcmFuc2l0aW9uU3RhdGVgIG11c3QgYmUgdXNlZCB3aXRoaW4gYHJlYWN0LXJvdXRlci1kb21gJ3MgYFJvdXRlclByb3ZpZGVyYC4gIFwiICsgXCJEaWQgeW91IGFjY2lkZW50YWxseSBpbXBvcnQgYFJvdXRlclByb3ZpZGVyYCBmcm9tIGByZWFjdC1yb3V0ZXJgP1wiKSA6IFVOU0FGRV9pbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICBsZXQge1xuICAgIGJhc2VuYW1lXG4gIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay51c2VWaWV3VHJhbnNpdGlvblN0YXRlKTtcbiAgbGV0IHBhdGggPSB1c2VSZXNvbHZlZFBhdGgodG8sIHtcbiAgICByZWxhdGl2ZTogb3B0cy5yZWxhdGl2ZVxuICB9KTtcbiAgaWYgKCF2dENvbnRleHQuaXNUcmFuc2l0aW9uaW5nKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxldCBjdXJyZW50UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0LmN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5jdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gIGxldCBuZXh0UGF0aCA9IHN0cmlwQmFzZW5hbWUodnRDb250ZXh0Lm5leHRMb2NhdGlvbi5wYXRobmFtZSwgYmFzZW5hbWUpIHx8IHZ0Q29udGV4dC5uZXh0TG9jYXRpb24ucGF0aG5hbWU7XG4gIC8vIFRyYW5zaXRpb24gaXMgYWN0aXZlIGlmIHdlJ3JlIGdvaW5nIHRvIG9yIGNvbWluZyBmcm9tIHRoZSBpbmRpY2F0ZWRcbiAgLy8gZGVzdGluYXRpb24uICBUaGlzIGVuc3VyZXMgdGhhdCBvdGhlciBQVVNIIG5hdmlnYXRpb25zIHRoYXQgcmV2ZXJzZVxuICAvLyBhbiBpbmRpY2F0ZWQgdHJhbnNpdGlvbiBhcHBseS4gIEkuZS4sIG9uIHRoZSBsaXN0IHZpZXcgeW91IGhhdmU6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvZGV0YWlscy8xXCIgdW5zdGFibGVfdmlld1RyYW5zaXRpb24+XG4gIC8vXG4gIC8vIElmIHlvdSBjbGljayB0aGUgYnJlYWRjcnVtYiBiYWNrIHRvIHRoZSBsaXN0IHZpZXc6XG4gIC8vXG4gIC8vICAgPE5hdkxpbmsgdG89XCIvbGlzdFwiIHVuc3RhYmxlX3ZpZXdUcmFuc2l0aW9uPlxuICAvL1xuICAvLyBXZSBzaG91bGQgYXBwbHkgdGhlIHRyYW5zaXRpb24gYmVjYXVzZSBpdCdzIGluZGljYXRlZCBhcyBhY3RpdmUgZ29pbmdcbiAgLy8gZnJvbSAvbGlzdCAtPiAvZGV0YWlscy8xIGFuZCB0aGVyZWZvcmUgc2hvdWxkIGJlIGFjdGl2ZSBvbiB0aGUgcmV2ZXJzZVxuICAvLyAoZXZlbiB0aG91Z2ggdGhpcyBpc24ndCBzdHJpY3RseSBhIFBPUCByZXZlcnNlKVxuICByZXR1cm4gbWF0Y2hQYXRoKHBhdGgucGF0aG5hbWUsIG5leHRQYXRoKSAhPSBudWxsIHx8IG1hdGNoUGF0aChwYXRoLnBhdGhuYW1lLCBjdXJyZW50UGF0aCkgIT0gbnVsbDtcbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBGb3JtLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rLCBSb3V0ZXJQcm92aWRlciwgU2Nyb2xsUmVzdG9yYXRpb24sIEZldGNoZXJzQ29udGV4dCBhcyBVTlNBRkVfRmV0Y2hlcnNDb250ZXh0LCBWaWV3VHJhbnNpdGlvbkNvbnRleHQgYXMgVU5TQUZFX1ZpZXdUcmFuc2l0aW9uQ29udGV4dCwgdXNlU2Nyb2xsUmVzdG9yYXRpb24gYXMgVU5TQUZFX3VzZVNjcm9sbFJlc3RvcmF0aW9uLCBjcmVhdGVCcm93c2VyUm91dGVyLCBjcmVhdGVIYXNoUm91dGVyLCBjcmVhdGVTZWFyY2hQYXJhbXMsIEhpc3RvcnlSb3V0ZXIgYXMgdW5zdGFibGVfSGlzdG9yeVJvdXRlciwgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCwgdXNlVmlld1RyYW5zaXRpb25TdGF0ZSBhcyB1bnN0YWJsZV91c2VWaWV3VHJhbnNpdGlvblN0YXRlLCB1c2VCZWZvcmVVbmxvYWQsIHVzZUZldGNoZXIsIHVzZUZldGNoZXJzLCB1c2VGb3JtQWN0aW9uLCB1c2VMaW5rQ2xpY2tIYW5kbGVyLCB1c2VTZWFyY2hQYXJhbXMsIHVzZVN1Ym1pdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXG4iLCIvLyBzcmMvc3Vic2NyaWJhYmxlLnRzXG52YXIgU3Vic2NyaWJhYmxlID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy5zdWJzY3JpYmUgPSB0aGlzLnN1YnNjcmliZS5iaW5kKHRoaXMpO1xuICB9XG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIHRoaXMubGlzdGVuZXJzLmFkZChsaXN0ZW5lcik7XG4gICAgdGhpcy5vblN1YnNjcmliZSgpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB0aGlzLmxpc3RlbmVycy5kZWxldGUobGlzdGVuZXIpO1xuICAgICAgdGhpcy5vblVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfVxuICBoYXNMaXN0ZW5lcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMubGlzdGVuZXJzLnNpemUgPiAwO1xuICB9XG4gIG9uU3Vic2NyaWJlKCkge1xuICB9XG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gIH1cbn07XG5leHBvcnQge1xuICBTdWJzY3JpYmFibGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY3JpYmFibGUuanMubWFwIiwiLy8gc3JjL3V0aWxzLnRzXG52YXIgaXNTZXJ2ZXIgPSB0eXBlb2Ygd2luZG93ID09PSBcInVuZGVmaW5lZFwiIHx8IFwiRGVub1wiIGluIHdpbmRvdztcbmZ1bmN0aW9uIG5vb3AoKSB7XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBmdW5jdGlvbmFsVXBkYXRlKHVwZGF0ZXIsIGlucHV0KSB7XG4gIHJldHVybiB0eXBlb2YgdXBkYXRlciA9PT0gXCJmdW5jdGlvblwiID8gdXBkYXRlcihpbnB1dCkgOiB1cGRhdGVyO1xufVxuZnVuY3Rpb24gaXNWYWxpZFRpbWVvdXQodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+PSAwICYmIHZhbHVlICE9PSBJbmZpbml0eTtcbn1cbmZ1bmN0aW9uIHRpbWVVbnRpbFN0YWxlKHVwZGF0ZWRBdCwgc3RhbGVUaW1lKSB7XG4gIHJldHVybiBNYXRoLm1heCh1cGRhdGVkQXQgKyAoc3RhbGVUaW1lIHx8IDApIC0gRGF0ZS5ub3coKSwgMCk7XG59XG5mdW5jdGlvbiBtYXRjaFF1ZXJ5KGZpbHRlcnMsIHF1ZXJ5KSB7XG4gIGNvbnN0IHtcbiAgICB0eXBlID0gXCJhbGxcIixcbiAgICBleGFjdCxcbiAgICBmZXRjaFN0YXR1cyxcbiAgICBwcmVkaWNhdGUsXG4gICAgcXVlcnlLZXksXG4gICAgc3RhbGVcbiAgfSA9IGZpbHRlcnM7XG4gIGlmIChxdWVyeUtleSkge1xuICAgIGlmIChleGFjdCkge1xuICAgICAgaWYgKHF1ZXJ5LnF1ZXJ5SGFzaCAhPT0gaGFzaFF1ZXJ5S2V5QnlPcHRpb25zKHF1ZXJ5S2V5LCBxdWVyeS5vcHRpb25zKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcGFydGlhbE1hdGNoS2V5KHF1ZXJ5LnF1ZXJ5S2V5LCBxdWVyeUtleSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGUgIT09IFwiYWxsXCIpIHtcbiAgICBjb25zdCBpc0FjdGl2ZSA9IHF1ZXJ5LmlzQWN0aXZlKCk7XG4gICAgaWYgKHR5cGUgPT09IFwiYWN0aXZlXCIgJiYgIWlzQWN0aXZlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmICh0eXBlID09PSBcImluYWN0aXZlXCIgJiYgaXNBY3RpdmUpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgaWYgKHR5cGVvZiBzdGFsZSA9PT0gXCJib29sZWFuXCIgJiYgcXVlcnkuaXNTdGFsZSgpICE9PSBzdGFsZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAodHlwZW9mIGZldGNoU3RhdHVzICE9PSBcInVuZGVmaW5lZFwiICYmIGZldGNoU3RhdHVzICE9PSBxdWVyeS5zdGF0ZS5mZXRjaFN0YXR1cykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAocHJlZGljYXRlICYmICFwcmVkaWNhdGUocXVlcnkpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gbWF0Y2hNdXRhdGlvbihmaWx0ZXJzLCBtdXRhdGlvbikge1xuICBjb25zdCB7IGV4YWN0LCBzdGF0dXMsIHByZWRpY2F0ZSwgbXV0YXRpb25LZXkgfSA9IGZpbHRlcnM7XG4gIGlmIChtdXRhdGlvbktleSkge1xuICAgIGlmICghbXV0YXRpb24ub3B0aW9ucy5tdXRhdGlvbktleSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoZXhhY3QpIHtcbiAgICAgIGlmIChoYXNoS2V5KG11dGF0aW9uLm9wdGlvbnMubXV0YXRpb25LZXkpICE9PSBoYXNoS2V5KG11dGF0aW9uS2V5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghcGFydGlhbE1hdGNoS2V5KG11dGF0aW9uLm9wdGlvbnMubXV0YXRpb25LZXksIG11dGF0aW9uS2V5KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBpZiAoc3RhdHVzICYmIG11dGF0aW9uLnN0YXRlLnN0YXR1cyAhPT0gc3RhdHVzKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmIChwcmVkaWNhdGUgJiYgIXByZWRpY2F0ZShtdXRhdGlvbikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBoYXNoUXVlcnlLZXlCeU9wdGlvbnMocXVlcnlLZXksIG9wdGlvbnMpIHtcbiAgY29uc3QgaGFzaEZuID0gb3B0aW9ucz8ucXVlcnlLZXlIYXNoRm4gfHwgaGFzaEtleTtcbiAgcmV0dXJuIGhhc2hGbihxdWVyeUtleSk7XG59XG5mdW5jdGlvbiBoYXNoS2V5KHF1ZXJ5S2V5KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShcbiAgICBxdWVyeUtleSxcbiAgICAoXywgdmFsKSA9PiBpc1BsYWluT2JqZWN0KHZhbCkgPyBPYmplY3Qua2V5cyh2YWwpLnNvcnQoKS5yZWR1Y2UoKHJlc3VsdCwga2V5KSA9PiB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbFtrZXldO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCB7fSkgOiB2YWxcbiAgKTtcbn1cbmZ1bmN0aW9uIHBhcnRpYWxNYXRjaEtleShhLCBiKSB7XG4gIGlmIChhID09PSBiKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHR5cGVvZiBhICE9PSB0eXBlb2YgYikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpZiAoYSAmJiBiICYmIHR5cGVvZiBhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiID09PSBcIm9iamVjdFwiKSB7XG4gICAgcmV0dXJuICFPYmplY3Qua2V5cyhiKS5zb21lKChrZXkpID0+ICFwYXJ0aWFsTWF0Y2hLZXkoYVtrZXldLCBiW2tleV0pKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiByZXBsYWNlRXF1YWxEZWVwKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHtcbiAgICByZXR1cm4gYTtcbiAgfVxuICBjb25zdCBhcnJheSA9IGlzUGxhaW5BcnJheShhKSAmJiBpc1BsYWluQXJyYXkoYik7XG4gIGlmIChhcnJheSB8fCBpc1BsYWluT2JqZWN0KGEpICYmIGlzUGxhaW5PYmplY3QoYikpIHtcbiAgICBjb25zdCBhSXRlbXMgPSBhcnJheSA/IGEgOiBPYmplY3Qua2V5cyhhKTtcbiAgICBjb25zdCBhU2l6ZSA9IGFJdGVtcy5sZW5ndGg7XG4gICAgY29uc3QgYkl0ZW1zID0gYXJyYXkgPyBiIDogT2JqZWN0LmtleXMoYik7XG4gICAgY29uc3QgYlNpemUgPSBiSXRlbXMubGVuZ3RoO1xuICAgIGNvbnN0IGNvcHkgPSBhcnJheSA/IFtdIDoge307XG4gICAgbGV0IGVxdWFsSXRlbXMgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYlNpemU7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gYXJyYXkgPyBpIDogYkl0ZW1zW2ldO1xuICAgICAgaWYgKCFhcnJheSAmJiBhW2tleV0gPT09IHZvaWQgMCAmJiBiW2tleV0gPT09IHZvaWQgMCAmJiBhSXRlbXMuaW5jbHVkZXMoa2V5KSkge1xuICAgICAgICBjb3B5W2tleV0gPSB2b2lkIDA7XG4gICAgICAgIGVxdWFsSXRlbXMrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcHlba2V5XSA9IHJlcGxhY2VFcXVhbERlZXAoYVtrZXldLCBiW2tleV0pO1xuICAgICAgICBpZiAoY29weVtrZXldID09PSBhW2tleV0gJiYgYVtrZXldICE9PSB2b2lkIDApIHtcbiAgICAgICAgICBlcXVhbEl0ZW1zKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFTaXplID09PSBiU2l6ZSAmJiBlcXVhbEl0ZW1zID09PSBhU2l6ZSA/IGEgOiBjb3B5O1xuICB9XG4gIHJldHVybiBiO1xufVxuZnVuY3Rpb24gc2hhbGxvd0VxdWFsT2JqZWN0cyhhLCBiKSB7XG4gIGlmIChhICYmICFiIHx8IGIgJiYgIWEpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yIChjb25zdCBrZXkgaW4gYSkge1xuICAgIGlmIChhW2tleV0gIT09IGJba2V5XSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGlzUGxhaW5BcnJheSh2YWx1ZSkge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID09PSBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoO1xufVxuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvKSB7XG4gIGlmICghaGFzT2JqZWN0UHJvdG90eXBlKG8pKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGN0b3IgPSBvLmNvbnN0cnVjdG9yO1xuICBpZiAodHlwZW9mIGN0b3IgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBjb25zdCBwcm90ID0gY3Rvci5wcm90b3R5cGU7XG4gIGlmICghaGFzT2JqZWN0UHJvdG90eXBlKHByb3QpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGlmICghcHJvdC5oYXNPd25Qcm9wZXJ0eShcImlzUHJvdG90eXBlT2ZcIikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiBoYXNPYmplY3RQcm90b3R5cGUobykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pID09PSBcIltvYmplY3QgT2JqZWN0XVwiO1xufVxuZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgc2V0VGltZW91dChyZXNvbHZlLCBtcyk7XG4gIH0pO1xufVxuZnVuY3Rpb24gcmVwbGFjZURhdGEocHJldkRhdGEsIGRhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnN0cnVjdHVyYWxTaGFyaW5nID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gb3B0aW9ucy5zdHJ1Y3R1cmFsU2hhcmluZyhwcmV2RGF0YSwgZGF0YSk7XG4gIH0gZWxzZSBpZiAob3B0aW9ucy5zdHJ1Y3R1cmFsU2hhcmluZyAhPT0gZmFsc2UpIHtcbiAgICByZXR1cm4gcmVwbGFjZUVxdWFsRGVlcChwcmV2RGF0YSwgZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5mdW5jdGlvbiBrZWVwUHJldmlvdXNEYXRhKHByZXZpb3VzRGF0YSkge1xuICByZXR1cm4gcHJldmlvdXNEYXRhO1xufVxuZnVuY3Rpb24gYWRkVG9FbmQoaXRlbXMsIGl0ZW0sIG1heCA9IDApIHtcbiAgY29uc3QgbmV3SXRlbXMgPSBbLi4uaXRlbXMsIGl0ZW1dO1xuICByZXR1cm4gbWF4ICYmIG5ld0l0ZW1zLmxlbmd0aCA+IG1heCA/IG5ld0l0ZW1zLnNsaWNlKDEpIDogbmV3SXRlbXM7XG59XG5mdW5jdGlvbiBhZGRUb1N0YXJ0KGl0ZW1zLCBpdGVtLCBtYXggPSAwKSB7XG4gIGNvbnN0IG5ld0l0ZW1zID0gW2l0ZW0sIC4uLml0ZW1zXTtcbiAgcmV0dXJuIG1heCAmJiBuZXdJdGVtcy5sZW5ndGggPiBtYXggPyBuZXdJdGVtcy5zbGljZSgwLCAtMSkgOiBuZXdJdGVtcztcbn1cbmV4cG9ydCB7XG4gIGFkZFRvRW5kLFxuICBhZGRUb1N0YXJ0LFxuICBmdW5jdGlvbmFsVXBkYXRlLFxuICBoYXNoS2V5LFxuICBoYXNoUXVlcnlLZXlCeU9wdGlvbnMsXG4gIGlzUGxhaW5BcnJheSxcbiAgaXNQbGFpbk9iamVjdCxcbiAgaXNTZXJ2ZXIsXG4gIGlzVmFsaWRUaW1lb3V0LFxuICBrZWVwUHJldmlvdXNEYXRhLFxuICBtYXRjaE11dGF0aW9uLFxuICBtYXRjaFF1ZXJ5LFxuICBub29wLFxuICBwYXJ0aWFsTWF0Y2hLZXksXG4gIHJlcGxhY2VEYXRhLFxuICByZXBsYWNlRXF1YWxEZWVwLFxuICBzaGFsbG93RXF1YWxPYmplY3RzLFxuICBzbGVlcCxcbiAgdGltZVVudGlsU3RhbGVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiLCIvLyBzcmMvZm9jdXNNYW5hZ2VyLnRzXG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi9zdWJzY3JpYmFibGUuanNcIjtcbmltcG9ydCB7IGlzU2VydmVyIH0gZnJvbSBcIi4vdXRpbHMuanNcIjtcbnZhciBGb2N1c01hbmFnZXIgPSBjbGFzcyBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gICNmb2N1c2VkO1xuICAjY2xlYW51cDtcbiAgI3NldHVwO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI3NldHVwID0gKG9uRm9jdXMpID0+IHtcbiAgICAgIGlmICghaXNTZXJ2ZXIgJiYgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgY29uc3QgbGlzdGVuZXIgPSAoKSA9PiBvbkZvY3VzKCk7XG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidmlzaWJpbGl0eWNoYW5nZVwiLCBsaXN0ZW5lcik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfTtcbiAgfVxuICBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuI2NsZWFudXApIHtcbiAgICAgIHRoaXMuc2V0RXZlbnRMaXN0ZW5lcih0aGlzLiNzZXR1cCk7XG4gICAgfVxuICB9XG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLiNjbGVhbnVwPy4oKTtcbiAgICAgIHRoaXMuI2NsZWFudXAgPSB2b2lkIDA7XG4gICAgfVxuICB9XG4gIHNldEV2ZW50TGlzdGVuZXIoc2V0dXApIHtcbiAgICB0aGlzLiNzZXR1cCA9IHNldHVwO1xuICAgIHRoaXMuI2NsZWFudXA/LigpO1xuICAgIHRoaXMuI2NsZWFudXAgPSBzZXR1cCgoZm9jdXNlZCkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBmb2N1c2VkID09PSBcImJvb2xlYW5cIikge1xuICAgICAgICB0aGlzLnNldEZvY3VzZWQoZm9jdXNlZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBzZXRGb2N1c2VkKGZvY3VzZWQpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy4jZm9jdXNlZCAhPT0gZm9jdXNlZDtcbiAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgdGhpcy4jZm9jdXNlZCA9IGZvY3VzZWQ7XG4gICAgICB0aGlzLm9uRm9jdXMoKTtcbiAgICB9XG4gIH1cbiAgb25Gb2N1cygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgbGlzdGVuZXIoKTtcbiAgICB9KTtcbiAgfVxuICBpc0ZvY3VzZWQoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLiNmb2N1c2VkID09PSBcImJvb2xlYW5cIikge1xuICAgICAgcmV0dXJuIHRoaXMuI2ZvY3VzZWQ7XG4gICAgfVxuICAgIHJldHVybiBnbG9iYWxUaGlzLmRvY3VtZW50Py52aXNpYmlsaXR5U3RhdGUgIT09IFwiaGlkZGVuXCI7XG4gIH1cbn07XG52YXIgZm9jdXNNYW5hZ2VyID0gbmV3IEZvY3VzTWFuYWdlcigpO1xuZXhwb3J0IHtcbiAgRm9jdXNNYW5hZ2VyLFxuICBmb2N1c01hbmFnZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb2N1c01hbmFnZXIuanMubWFwIiwiLy8gc3JjL29ubGluZU1hbmFnZXIudHNcbmltcG9ydCB7IFN1YnNjcmliYWJsZSB9IGZyb20gXCIuL3N1YnNjcmliYWJsZS5qc1wiO1xuaW1wb3J0IHsgaXNTZXJ2ZXIgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xudmFyIE9ubGluZU1hbmFnZXIgPSBjbGFzcyBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gICNvbmxpbmUgPSB0cnVlO1xuICAjY2xlYW51cDtcbiAgI3NldHVwO1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuI3NldHVwID0gKG9uT25saW5lKSA9PiB7XG4gICAgICBpZiAoIWlzU2VydmVyICYmIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKSB7XG4gICAgICAgIGNvbnN0IG9ubGluZUxpc3RlbmVyID0gKCkgPT4gb25PbmxpbmUodHJ1ZSk7XG4gICAgICAgIGNvbnN0IG9mZmxpbmVMaXN0ZW5lciA9ICgpID0+IG9uT25saW5lKGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvbmxpbmVcIiwgb25saW5lTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJvZmZsaW5lXCIsIG9mZmxpbmVMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwib25saW5lXCIsIG9ubGluZUxpc3RlbmVyKTtcbiAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgb2ZmbGluZUxpc3RlbmVyKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9O1xuICB9XG4gIG9uU3Vic2NyaWJlKCkge1xuICAgIGlmICghdGhpcy4jY2xlYW51cCkge1xuICAgICAgdGhpcy5zZXRFdmVudExpc3RlbmVyKHRoaXMuI3NldHVwKTtcbiAgICB9XG4gIH1cbiAgb25VbnN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMuaGFzTGlzdGVuZXJzKCkpIHtcbiAgICAgIHRoaXMuI2NsZWFudXA/LigpO1xuICAgICAgdGhpcy4jY2xlYW51cCA9IHZvaWQgMDtcbiAgICB9XG4gIH1cbiAgc2V0RXZlbnRMaXN0ZW5lcihzZXR1cCkge1xuICAgIHRoaXMuI3NldHVwID0gc2V0dXA7XG4gICAgdGhpcy4jY2xlYW51cD8uKCk7XG4gICAgdGhpcy4jY2xlYW51cCA9IHNldHVwKHRoaXMuc2V0T25saW5lLmJpbmQodGhpcykpO1xuICB9XG4gIHNldE9ubGluZShvbmxpbmUpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdGhpcy4jb25saW5lICE9PSBvbmxpbmU7XG4gICAgaWYgKGNoYW5nZWQpIHtcbiAgICAgIHRoaXMuI29ubGluZSA9IG9ubGluZTtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyKG9ubGluZSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgaXNPbmxpbmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuI29ubGluZTtcbiAgfVxufTtcbnZhciBvbmxpbmVNYW5hZ2VyID0gbmV3IE9ubGluZU1hbmFnZXIoKTtcbmV4cG9ydCB7XG4gIE9ubGluZU1hbmFnZXIsXG4gIG9ubGluZU1hbmFnZXJcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbmxpbmVNYW5hZ2VyLmpzLm1hcCIsIi8vIHNyYy9yZXRyeWVyLnRzXG5pbXBvcnQgeyBmb2N1c01hbmFnZXIgfSBmcm9tIFwiLi9mb2N1c01hbmFnZXIuanNcIjtcbmltcG9ydCB7IG9ubGluZU1hbmFnZXIgfSBmcm9tIFwiLi9vbmxpbmVNYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBpc1NlcnZlciwgc2xlZXAgfSBmcm9tIFwiLi91dGlscy5qc1wiO1xuZnVuY3Rpb24gZGVmYXVsdFJldHJ5RGVsYXkoZmFpbHVyZUNvdW50KSB7XG4gIHJldHVybiBNYXRoLm1pbigxZTMgKiAyICoqIGZhaWx1cmVDb3VudCwgM2U0KTtcbn1cbmZ1bmN0aW9uIGNhbkZldGNoKG5ldHdvcmtNb2RlKSB7XG4gIHJldHVybiAobmV0d29ya01vZGUgPz8gXCJvbmxpbmVcIikgPT09IFwib25saW5lXCIgPyBvbmxpbmVNYW5hZ2VyLmlzT25saW5lKCkgOiB0cnVlO1xufVxudmFyIENhbmNlbGxlZEVycm9yID0gY2xhc3Mge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgdGhpcy5yZXZlcnQgPSBvcHRpb25zPy5yZXZlcnQ7XG4gICAgdGhpcy5zaWxlbnQgPSBvcHRpb25zPy5zaWxlbnQ7XG4gIH1cbn07XG5mdW5jdGlvbiBpc0NhbmNlbGxlZEVycm9yKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIENhbmNlbGxlZEVycm9yO1xufVxuZnVuY3Rpb24gY3JlYXRlUmV0cnllcihjb25maWcpIHtcbiAgbGV0IGlzUmV0cnlDYW5jZWxsZWQgPSBmYWxzZTtcbiAgbGV0IGZhaWx1cmVDb3VudCA9IDA7XG4gIGxldCBpc1Jlc29sdmVkID0gZmFsc2U7XG4gIGxldCBjb250aW51ZUZuO1xuICBsZXQgcHJvbWlzZVJlc29sdmU7XG4gIGxldCBwcm9taXNlUmVqZWN0O1xuICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKG91dGVyUmVzb2x2ZSwgb3V0ZXJSZWplY3QpID0+IHtcbiAgICBwcm9taXNlUmVzb2x2ZSA9IG91dGVyUmVzb2x2ZTtcbiAgICBwcm9taXNlUmVqZWN0ID0gb3V0ZXJSZWplY3Q7XG4gIH0pO1xuICBjb25zdCBjYW5jZWwgPSAoY2FuY2VsT3B0aW9ucykgPT4ge1xuICAgIGlmICghaXNSZXNvbHZlZCkge1xuICAgICAgcmVqZWN0KG5ldyBDYW5jZWxsZWRFcnJvcihjYW5jZWxPcHRpb25zKSk7XG4gICAgICBjb25maWcuYWJvcnQ/LigpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgY2FuY2VsUmV0cnkgPSAoKSA9PiB7XG4gICAgaXNSZXRyeUNhbmNlbGxlZCA9IHRydWU7XG4gIH07XG4gIGNvbnN0IGNvbnRpbnVlUmV0cnkgPSAoKSA9PiB7XG4gICAgaXNSZXRyeUNhbmNlbGxlZCA9IGZhbHNlO1xuICB9O1xuICBjb25zdCBzaG91bGRQYXVzZSA9ICgpID0+ICFmb2N1c01hbmFnZXIuaXNGb2N1c2VkKCkgfHwgY29uZmlnLm5ldHdvcmtNb2RlICE9PSBcImFsd2F5c1wiICYmICFvbmxpbmVNYW5hZ2VyLmlzT25saW5lKCk7XG4gIGNvbnN0IHJlc29sdmUgPSAodmFsdWUpID0+IHtcbiAgICBpZiAoIWlzUmVzb2x2ZWQpIHtcbiAgICAgIGlzUmVzb2x2ZWQgPSB0cnVlO1xuICAgICAgY29uZmlnLm9uU3VjY2Vzcz8uKHZhbHVlKTtcbiAgICAgIGNvbnRpbnVlRm4/LigpO1xuICAgICAgcHJvbWlzZVJlc29sdmUodmFsdWUpO1xuICAgIH1cbiAgfTtcbiAgY29uc3QgcmVqZWN0ID0gKHZhbHVlKSA9PiB7XG4gICAgaWYgKCFpc1Jlc29sdmVkKSB7XG4gICAgICBpc1Jlc29sdmVkID0gdHJ1ZTtcbiAgICAgIGNvbmZpZy5vbkVycm9yPy4odmFsdWUpO1xuICAgICAgY29udGludWVGbj8uKCk7XG4gICAgICBwcm9taXNlUmVqZWN0KHZhbHVlKTtcbiAgICB9XG4gIH07XG4gIGNvbnN0IHBhdXNlID0gKCkgPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgoY29udGludWVSZXNvbHZlKSA9PiB7XG4gICAgICBjb250aW51ZUZuID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbkNvbnRpbnVlID0gaXNSZXNvbHZlZCB8fCAhc2hvdWxkUGF1c2UoKTtcbiAgICAgICAgaWYgKGNhbkNvbnRpbnVlKSB7XG4gICAgICAgICAgY29udGludWVSZXNvbHZlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2FuQ29udGludWU7XG4gICAgICB9O1xuICAgICAgY29uZmlnLm9uUGF1c2U/LigpO1xuICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgY29udGludWVGbiA9IHZvaWQgMDtcbiAgICAgIGlmICghaXNSZXNvbHZlZCkge1xuICAgICAgICBjb25maWcub25Db250aW51ZT8uKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG4gIGNvbnN0IHJ1biA9ICgpID0+IHtcbiAgICBpZiAoaXNSZXNvbHZlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsZXQgcHJvbWlzZU9yVmFsdWU7XG4gICAgdHJ5IHtcbiAgICAgIHByb21pc2VPclZhbHVlID0gY29uZmlnLmZuKCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHByb21pc2VPclZhbHVlID0gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cbiAgICBQcm9taXNlLnJlc29sdmUocHJvbWlzZU9yVmFsdWUpLnRoZW4ocmVzb2x2ZSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICBpZiAoaXNSZXNvbHZlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCByZXRyeSA9IGNvbmZpZy5yZXRyeSA/PyAoaXNTZXJ2ZXIgPyAwIDogMyk7XG4gICAgICBjb25zdCByZXRyeURlbGF5ID0gY29uZmlnLnJldHJ5RGVsYXkgPz8gZGVmYXVsdFJldHJ5RGVsYXk7XG4gICAgICBjb25zdCBkZWxheSA9IHR5cGVvZiByZXRyeURlbGF5ID09PSBcImZ1bmN0aW9uXCIgPyByZXRyeURlbGF5KGZhaWx1cmVDb3VudCwgZXJyb3IpIDogcmV0cnlEZWxheTtcbiAgICAgIGNvbnN0IHNob3VsZFJldHJ5ID0gcmV0cnkgPT09IHRydWUgfHwgdHlwZW9mIHJldHJ5ID09PSBcIm51bWJlclwiICYmIGZhaWx1cmVDb3VudCA8IHJldHJ5IHx8IHR5cGVvZiByZXRyeSA9PT0gXCJmdW5jdGlvblwiICYmIHJldHJ5KGZhaWx1cmVDb3VudCwgZXJyb3IpO1xuICAgICAgaWYgKGlzUmV0cnlDYW5jZWxsZWQgfHwgIXNob3VsZFJldHJ5KSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGZhaWx1cmVDb3VudCsrO1xuICAgICAgY29uZmlnLm9uRmFpbD8uKGZhaWx1cmVDb3VudCwgZXJyb3IpO1xuICAgICAgc2xlZXAoZGVsYXkpLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoc2hvdWxkUGF1c2UoKSkge1xuICAgICAgICAgIHJldHVybiBwYXVzZSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0pLnRoZW4oKCkgPT4ge1xuICAgICAgICBpZiAoaXNSZXRyeUNhbmNlbGxlZCkge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcnVuKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuICBpZiAoY2FuRmV0Y2goY29uZmlnLm5ldHdvcmtNb2RlKSkge1xuICAgIHJ1bigpO1xuICB9IGVsc2Uge1xuICAgIHBhdXNlKCkudGhlbihydW4pO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHJvbWlzZSxcbiAgICBjYW5jZWwsXG4gICAgY29udGludWU6ICgpID0+IHtcbiAgICAgIGNvbnN0IGRpZENvbnRpbnVlID0gY29udGludWVGbj8uKCk7XG4gICAgICByZXR1cm4gZGlkQ29udGludWUgPyBwcm9taXNlIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfSxcbiAgICBjYW5jZWxSZXRyeSxcbiAgICBjb250aW51ZVJldHJ5XG4gIH07XG59XG5leHBvcnQge1xuICBDYW5jZWxsZWRFcnJvcixcbiAgY2FuRmV0Y2gsXG4gIGNyZWF0ZVJldHJ5ZXIsXG4gIGlzQ2FuY2VsbGVkRXJyb3Jcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXRyeWVyLmpzLm1hcCIsIi8vIHNyYy9ub3RpZnlNYW5hZ2VyLnRzXG5mdW5jdGlvbiBjcmVhdGVOb3RpZnlNYW5hZ2VyKCkge1xuICBsZXQgcXVldWUgPSBbXTtcbiAgbGV0IHRyYW5zYWN0aW9ucyA9IDA7XG4gIGxldCBub3RpZnlGbiA9IChjYWxsYmFjaykgPT4ge1xuICAgIGNhbGxiYWNrKCk7XG4gIH07XG4gIGxldCBiYXRjaE5vdGlmeUZuID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgY2FsbGJhY2soKTtcbiAgfTtcbiAgbGV0IHNjaGVkdWxlRm4gPSAoY2IpID0+IHNldFRpbWVvdXQoY2IsIDApO1xuICBjb25zdCBzZXRTY2hlZHVsZXIgPSAoZm4pID0+IHtcbiAgICBzY2hlZHVsZUZuID0gZm47XG4gIH07XG4gIGNvbnN0IGJhdGNoID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgbGV0IHJlc3VsdDtcbiAgICB0cmFuc2FjdGlvbnMrKztcbiAgICB0cnkge1xuICAgICAgcmVzdWx0ID0gY2FsbGJhY2soKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJhbnNhY3Rpb25zLS07XG4gICAgICBpZiAoIXRyYW5zYWN0aW9ucykge1xuICAgICAgICBmbHVzaCgpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBjb25zdCBzY2hlZHVsZSA9IChjYWxsYmFjaykgPT4ge1xuICAgIGlmICh0cmFuc2FjdGlvbnMpIHtcbiAgICAgIHF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZUZuKCgpID0+IHtcbiAgICAgICAgbm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuICBjb25zdCBiYXRjaENhbGxzID0gKGNhbGxiYWNrKSA9PiB7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICBzY2hlZHVsZSgoKSA9PiB7XG4gICAgICAgIGNhbGxiYWNrKC4uLmFyZ3MpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbiAgY29uc3QgZmx1c2ggPSAoKSA9PiB7XG4gICAgY29uc3Qgb3JpZ2luYWxRdWV1ZSA9IHF1ZXVlO1xuICAgIHF1ZXVlID0gW107XG4gICAgaWYgKG9yaWdpbmFsUXVldWUubGVuZ3RoKSB7XG4gICAgICBzY2hlZHVsZUZuKCgpID0+IHtcbiAgICAgICAgYmF0Y2hOb3RpZnlGbigoKSA9PiB7XG4gICAgICAgICAgb3JpZ2luYWxRdWV1ZS5mb3JFYWNoKChjYWxsYmFjaykgPT4ge1xuICAgICAgICAgICAgbm90aWZ5Rm4oY2FsbGJhY2spO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcbiAgY29uc3Qgc2V0Tm90aWZ5RnVuY3Rpb24gPSAoZm4pID0+IHtcbiAgICBub3RpZnlGbiA9IGZuO1xuICB9O1xuICBjb25zdCBzZXRCYXRjaE5vdGlmeUZ1bmN0aW9uID0gKGZuKSA9PiB7XG4gICAgYmF0Y2hOb3RpZnlGbiA9IGZuO1xuICB9O1xuICByZXR1cm4ge1xuICAgIGJhdGNoLFxuICAgIGJhdGNoQ2FsbHMsXG4gICAgc2NoZWR1bGUsXG4gICAgc2V0Tm90aWZ5RnVuY3Rpb24sXG4gICAgc2V0QmF0Y2hOb3RpZnlGdW5jdGlvbixcbiAgICBzZXRTY2hlZHVsZXJcbiAgfTtcbn1cbnZhciBub3RpZnlNYW5hZ2VyID0gY3JlYXRlTm90aWZ5TWFuYWdlcigpO1xuZXhwb3J0IHtcbiAgY3JlYXRlTm90aWZ5TWFuYWdlcixcbiAgbm90aWZ5TWFuYWdlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5vdGlmeU1hbmFnZXIuanMubWFwIiwiLy8gc3JjL3F1ZXJ5T2JzZXJ2ZXIudHNcbmltcG9ydCB7XG4gIGlzU2VydmVyLFxuICBpc1ZhbGlkVGltZW91dCxcbiAgbm9vcCxcbiAgcmVwbGFjZURhdGEsXG4gIHNoYWxsb3dFcXVhbE9iamVjdHMsXG4gIHRpbWVVbnRpbFN0YWxlXG59IGZyb20gXCIuL3V0aWxzLmpzXCI7XG5pbXBvcnQgeyBub3RpZnlNYW5hZ2VyIH0gZnJvbSBcIi4vbm90aWZ5TWFuYWdlci5qc1wiO1xuaW1wb3J0IHsgZm9jdXNNYW5hZ2VyIH0gZnJvbSBcIi4vZm9jdXNNYW5hZ2VyLmpzXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmFibGUgfSBmcm9tIFwiLi9zdWJzY3JpYmFibGUuanNcIjtcbmltcG9ydCB7IGNhbkZldGNoIH0gZnJvbSBcIi4vcmV0cnllci5qc1wiO1xudmFyIFF1ZXJ5T2JzZXJ2ZXIgPSBjbGFzcyBleHRlbmRzIFN1YnNjcmliYWJsZSB7XG4gIGNvbnN0cnVjdG9yKGNsaWVudCwgb3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLiNjbGllbnQgPSBjbGllbnQ7XG4gICAgdGhpcy4jc2VsZWN0RXJyb3IgPSBudWxsO1xuICAgIHRoaXMuYmluZE1ldGhvZHMoKTtcbiAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucyk7XG4gIH1cbiAgI2NsaWVudDtcbiAgI2N1cnJlbnRRdWVyeSA9IHZvaWQgMDtcbiAgI2N1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZSA9IHZvaWQgMDtcbiAgI2N1cnJlbnRSZXN1bHQgPSB2b2lkIDA7XG4gICNjdXJyZW50UmVzdWx0U3RhdGU7XG4gICNjdXJyZW50UmVzdWx0T3B0aW9ucztcbiAgI3NlbGVjdEVycm9yO1xuICAjc2VsZWN0Rm47XG4gICNzZWxlY3RSZXN1bHQ7XG4gIC8vIFRoaXMgcHJvcGVydHkga2VlcHMgdHJhY2sgb2YgdGhlIGxhc3QgcXVlcnkgd2l0aCBkZWZpbmVkIGRhdGEuXG4gIC8vIEl0IHdpbGwgYmUgdXNlZCB0byBwYXNzIHRoZSBwcmV2aW91cyBkYXRhIGFuZCBxdWVyeSB0byB0aGUgcGxhY2Vob2xkZXIgZnVuY3Rpb24gYmV0d2VlbiByZW5kZXJzLlxuICAjbGFzdFF1ZXJ5V2l0aERlZmluZWREYXRhO1xuICAjc3RhbGVUaW1lb3V0SWQ7XG4gICNyZWZldGNoSW50ZXJ2YWxJZDtcbiAgI2N1cnJlbnRSZWZldGNoSW50ZXJ2YWw7XG4gICN0cmFja2VkUHJvcHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICBiaW5kTWV0aG9kcygpIHtcbiAgICB0aGlzLnJlZmV0Y2ggPSB0aGlzLnJlZmV0Y2guYmluZCh0aGlzKTtcbiAgfVxuICBvblN1YnNjcmliZSgpIHtcbiAgICBpZiAodGhpcy5saXN0ZW5lcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgdGhpcy4jY3VycmVudFF1ZXJ5LmFkZE9ic2VydmVyKHRoaXMpO1xuICAgICAgaWYgKHNob3VsZEZldGNoT25Nb3VudCh0aGlzLiNjdXJyZW50UXVlcnksIHRoaXMub3B0aW9ucykpIHtcbiAgICAgICAgdGhpcy4jZXhlY3V0ZUZldGNoKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgfVxuICAgICAgdGhpcy4jdXBkYXRlVGltZXJzKCk7XG4gICAgfVxuICB9XG4gIG9uVW5zdWJzY3JpYmUoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICB0aGlzLmRlc3Ryb3koKTtcbiAgICB9XG4gIH1cbiAgc2hvdWxkRmV0Y2hPblJlY29ubmVjdCgpIHtcbiAgICByZXR1cm4gc2hvdWxkRmV0Y2hPbihcbiAgICAgIHRoaXMuI2N1cnJlbnRRdWVyeSxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHRoaXMub3B0aW9ucy5yZWZldGNoT25SZWNvbm5lY3RcbiAgICApO1xuICB9XG4gIHNob3VsZEZldGNoT25XaW5kb3dGb2N1cygpIHtcbiAgICByZXR1cm4gc2hvdWxkRmV0Y2hPbihcbiAgICAgIHRoaXMuI2N1cnJlbnRRdWVyeSxcbiAgICAgIHRoaXMub3B0aW9ucyxcbiAgICAgIHRoaXMub3B0aW9ucy5yZWZldGNoT25XaW5kb3dGb2N1c1xuICAgICk7XG4gIH1cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmxpc3RlbmVycyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgU2V0KCk7XG4gICAgdGhpcy4jY2xlYXJTdGFsZVRpbWVvdXQoKTtcbiAgICB0aGlzLiNjbGVhclJlZmV0Y2hJbnRlcnZhbCgpO1xuICAgIHRoaXMuI2N1cnJlbnRRdWVyeS5yZW1vdmVPYnNlcnZlcih0aGlzKTtcbiAgfVxuICBzZXRPcHRpb25zKG9wdGlvbnMsIG5vdGlmeU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV2T3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBjb25zdCBwcmV2UXVlcnkgPSB0aGlzLiNjdXJyZW50UXVlcnk7XG4gICAgdGhpcy5vcHRpb25zID0gdGhpcy4jY2xpZW50LmRlZmF1bHRRdWVyeU9wdGlvbnMob3B0aW9ucyk7XG4gICAgaWYgKCFzaGFsbG93RXF1YWxPYmplY3RzKHByZXZPcHRpb25zLCB0aGlzLm9wdGlvbnMpKSB7XG4gICAgICB0aGlzLiNjbGllbnQuZ2V0UXVlcnlDYWNoZSgpLm5vdGlmeSh7XG4gICAgICAgIHR5cGU6IFwib2JzZXJ2ZXJPcHRpb25zVXBkYXRlZFwiLFxuICAgICAgICBxdWVyeTogdGhpcy4jY3VycmVudFF1ZXJ5LFxuICAgICAgICBvYnNlcnZlcjogdGhpc1xuICAgICAgfSk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBcImJvb2xlYW5cIikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgZW5hYmxlZCB0byBiZSBhIGJvb2xlYW5cIik7XG4gICAgfVxuICAgIGlmICghdGhpcy5vcHRpb25zLnF1ZXJ5S2V5KSB7XG4gICAgICB0aGlzLm9wdGlvbnMucXVlcnlLZXkgPSBwcmV2T3B0aW9ucy5xdWVyeUtleTtcbiAgICB9XG4gICAgdGhpcy4jdXBkYXRlUXVlcnkoKTtcbiAgICBjb25zdCBtb3VudGVkID0gdGhpcy5oYXNMaXN0ZW5lcnMoKTtcbiAgICBpZiAobW91bnRlZCAmJiBzaG91bGRGZXRjaE9wdGlvbmFsbHkoXG4gICAgICB0aGlzLiNjdXJyZW50UXVlcnksXG4gICAgICBwcmV2UXVlcnksXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICBwcmV2T3B0aW9uc1xuICAgICkpIHtcbiAgICAgIHRoaXMuI2V4ZWN1dGVGZXRjaCgpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZVJlc3VsdChub3RpZnlPcHRpb25zKTtcbiAgICBpZiAobW91bnRlZCAmJiAodGhpcy4jY3VycmVudFF1ZXJ5ICE9PSBwcmV2UXVlcnkgfHwgdGhpcy5vcHRpb25zLmVuYWJsZWQgIT09IHByZXZPcHRpb25zLmVuYWJsZWQgfHwgdGhpcy5vcHRpb25zLnN0YWxlVGltZSAhPT0gcHJldk9wdGlvbnMuc3RhbGVUaW1lKSkge1xuICAgICAgdGhpcy4jdXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgfVxuICAgIGNvbnN0IG5leHRSZWZldGNoSW50ZXJ2YWwgPSB0aGlzLiNjb21wdXRlUmVmZXRjaEludGVydmFsKCk7XG4gICAgaWYgKG1vdW50ZWQgJiYgKHRoaXMuI2N1cnJlbnRRdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHRoaXMub3B0aW9ucy5lbmFibGVkICE9PSBwcmV2T3B0aW9ucy5lbmFibGVkIHx8IG5leHRSZWZldGNoSW50ZXJ2YWwgIT09IHRoaXMuI2N1cnJlbnRSZWZldGNoSW50ZXJ2YWwpKSB7XG4gICAgICB0aGlzLiN1cGRhdGVSZWZldGNoSW50ZXJ2YWwobmV4dFJlZmV0Y2hJbnRlcnZhbCk7XG4gICAgfVxuICB9XG4gIGdldE9wdGltaXN0aWNSZXN1bHQob3B0aW9ucykge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy4jY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5idWlsZCh0aGlzLiNjbGllbnQsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuY3JlYXRlUmVzdWx0KHF1ZXJ5LCBvcHRpb25zKTtcbiAgICBpZiAoc2hvdWxkQXNzaWduT2JzZXJ2ZXJDdXJyZW50UHJvcGVydGllcyh0aGlzLCByZXN1bHQpKSB7XG4gICAgICB0aGlzLiNjdXJyZW50UmVzdWx0ID0gcmVzdWx0O1xuICAgICAgdGhpcy4jY3VycmVudFJlc3VsdE9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICB0aGlzLiNjdXJyZW50UmVzdWx0U3RhdGUgPSB0aGlzLiNjdXJyZW50UXVlcnkuc3RhdGU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgZ2V0Q3VycmVudFJlc3VsdCgpIHtcbiAgICByZXR1cm4gdGhpcy4jY3VycmVudFJlc3VsdDtcbiAgfVxuICB0cmFja1Jlc3VsdChyZXN1bHQpIHtcbiAgICBjb25zdCB0cmFja2VkUmVzdWx0ID0ge307XG4gICAgT2JqZWN0LmtleXMocmVzdWx0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0cmFja2VkUmVzdWx0LCBrZXksIHtcbiAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy4jdHJhY2tlZFByb3BzLmFkZChrZXkpO1xuICAgICAgICAgIHJldHVybiByZXN1bHRba2V5XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRyYWNrZWRSZXN1bHQ7XG4gIH1cbiAgZ2V0Q3VycmVudFF1ZXJ5KCkge1xuICAgIHJldHVybiB0aGlzLiNjdXJyZW50UXVlcnk7XG4gIH1cbiAgcmVmZXRjaCh7IC4uLm9wdGlvbnMgfSA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZmV0Y2goe1xuICAgICAgLi4ub3B0aW9uc1xuICAgIH0pO1xuICB9XG4gIGZldGNoT3B0aW1pc3RpYyhvcHRpb25zKSB7XG4gICAgY29uc3QgZGVmYXVsdGVkT3B0aW9ucyA9IHRoaXMuI2NsaWVudC5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy4jY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5idWlsZCh0aGlzLiNjbGllbnQsIGRlZmF1bHRlZE9wdGlvbnMpO1xuICAgIHF1ZXJ5LmlzRmV0Y2hpbmdPcHRpbWlzdGljID0gdHJ1ZTtcbiAgICByZXR1cm4gcXVlcnkuZmV0Y2goKS50aGVuKCgpID0+IHRoaXMuY3JlYXRlUmVzdWx0KHF1ZXJ5LCBkZWZhdWx0ZWRPcHRpb25zKSk7XG4gIH1cbiAgZmV0Y2goZmV0Y2hPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuI2V4ZWN1dGVGZXRjaCh7XG4gICAgICAuLi5mZXRjaE9wdGlvbnMsXG4gICAgICBjYW5jZWxSZWZldGNoOiBmZXRjaE9wdGlvbnMuY2FuY2VsUmVmZXRjaCA/PyB0cnVlXG4gICAgfSkudGhlbigoKSA9PiB7XG4gICAgICB0aGlzLnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgcmV0dXJuIHRoaXMuI2N1cnJlbnRSZXN1bHQ7XG4gICAgfSk7XG4gIH1cbiAgI2V4ZWN1dGVGZXRjaChmZXRjaE9wdGlvbnMpIHtcbiAgICB0aGlzLiN1cGRhdGVRdWVyeSgpO1xuICAgIGxldCBwcm9taXNlID0gdGhpcy4jY3VycmVudFF1ZXJ5LmZldGNoKFxuICAgICAgdGhpcy5vcHRpb25zLFxuICAgICAgZmV0Y2hPcHRpb25zXG4gICAgKTtcbiAgICBpZiAoIWZldGNoT3B0aW9ucz8udGhyb3dPbkVycm9yKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS5jYXRjaChub29wKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbiAgI3VwZGF0ZVN0YWxlVGltZW91dCgpIHtcbiAgICB0aGlzLiNjbGVhclN0YWxlVGltZW91dCgpO1xuICAgIGlmIChpc1NlcnZlciB8fCB0aGlzLiNjdXJyZW50UmVzdWx0LmlzU3RhbGUgfHwgIWlzVmFsaWRUaW1lb3V0KHRoaXMub3B0aW9ucy5zdGFsZVRpbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHRpbWUgPSB0aW1lVW50aWxTdGFsZShcbiAgICAgIHRoaXMuI2N1cnJlbnRSZXN1bHQuZGF0YVVwZGF0ZWRBdCxcbiAgICAgIHRoaXMub3B0aW9ucy5zdGFsZVRpbWVcbiAgICApO1xuICAgIGNvbnN0IHRpbWVvdXQgPSB0aW1lICsgMTtcbiAgICB0aGlzLiNzdGFsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCF0aGlzLiNjdXJyZW50UmVzdWx0LmlzU3RhbGUpIHtcbiAgICAgICAgdGhpcy51cGRhdGVSZXN1bHQoKTtcbiAgICAgIH1cbiAgICB9LCB0aW1lb3V0KTtcbiAgfVxuICAjY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbCgpIHtcbiAgICByZXR1cm4gKHR5cGVvZiB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsID09PSBcImZ1bmN0aW9uXCIgPyB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsKHRoaXMuI2N1cnJlbnRRdWVyeSkgOiB0aGlzLm9wdGlvbnMucmVmZXRjaEludGVydmFsKSA/PyBmYWxzZTtcbiAgfVxuICAjdXBkYXRlUmVmZXRjaEludGVydmFsKG5leHRJbnRlcnZhbCkge1xuICAgIHRoaXMuI2NsZWFyUmVmZXRjaEludGVydmFsKCk7XG4gICAgdGhpcy4jY3VycmVudFJlZmV0Y2hJbnRlcnZhbCA9IG5leHRJbnRlcnZhbDtcbiAgICBpZiAoaXNTZXJ2ZXIgfHwgdGhpcy5vcHRpb25zLmVuYWJsZWQgPT09IGZhbHNlIHx8ICFpc1ZhbGlkVGltZW91dCh0aGlzLiNjdXJyZW50UmVmZXRjaEludGVydmFsKSB8fCB0aGlzLiNjdXJyZW50UmVmZXRjaEludGVydmFsID09PSAwKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuI3JlZmV0Y2hJbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWZldGNoSW50ZXJ2YWxJbkJhY2tncm91bmQgfHwgZm9jdXNNYW5hZ2VyLmlzRm9jdXNlZCgpKSB7XG4gICAgICAgIHRoaXMuI2V4ZWN1dGVGZXRjaCgpO1xuICAgICAgfVxuICAgIH0sIHRoaXMuI2N1cnJlbnRSZWZldGNoSW50ZXJ2YWwpO1xuICB9XG4gICN1cGRhdGVUaW1lcnMoKSB7XG4gICAgdGhpcy4jdXBkYXRlU3RhbGVUaW1lb3V0KCk7XG4gICAgdGhpcy4jdXBkYXRlUmVmZXRjaEludGVydmFsKHRoaXMuI2NvbXB1dGVSZWZldGNoSW50ZXJ2YWwoKSk7XG4gIH1cbiAgI2NsZWFyU3RhbGVUaW1lb3V0KCkge1xuICAgIGlmICh0aGlzLiNzdGFsZVRpbWVvdXRJZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuI3N0YWxlVGltZW91dElkKTtcbiAgICAgIHRoaXMuI3N0YWxlVGltZW91dElkID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICAjY2xlYXJSZWZldGNoSW50ZXJ2YWwoKSB7XG4gICAgaWYgKHRoaXMuI3JlZmV0Y2hJbnRlcnZhbElkKSB7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuI3JlZmV0Y2hJbnRlcnZhbElkKTtcbiAgICAgIHRoaXMuI3JlZmV0Y2hJbnRlcnZhbElkID0gdm9pZCAwO1xuICAgIH1cbiAgfVxuICBjcmVhdGVSZXN1bHQocXVlcnksIG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV2UXVlcnkgPSB0aGlzLiNjdXJyZW50UXVlcnk7XG4gICAgY29uc3QgcHJldk9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgY29uc3QgcHJldlJlc3VsdCA9IHRoaXMuI2N1cnJlbnRSZXN1bHQ7XG4gICAgY29uc3QgcHJldlJlc3VsdFN0YXRlID0gdGhpcy4jY3VycmVudFJlc3VsdFN0YXRlO1xuICAgIGNvbnN0IHByZXZSZXN1bHRPcHRpb25zID0gdGhpcy4jY3VycmVudFJlc3VsdE9wdGlvbnM7XG4gICAgY29uc3QgcXVlcnlDaGFuZ2UgPSBxdWVyeSAhPT0gcHJldlF1ZXJ5O1xuICAgIGNvbnN0IHF1ZXJ5SW5pdGlhbFN0YXRlID0gcXVlcnlDaGFuZ2UgPyBxdWVyeS5zdGF0ZSA6IHRoaXMuI2N1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZTtcbiAgICBjb25zdCB7IHN0YXRlIH0gPSBxdWVyeTtcbiAgICBsZXQgeyBlcnJvciwgZXJyb3JVcGRhdGVkQXQsIGZldGNoU3RhdHVzLCBzdGF0dXMgfSA9IHN0YXRlO1xuICAgIGxldCBpc1BsYWNlaG9sZGVyRGF0YSA9IGZhbHNlO1xuICAgIGxldCBkYXRhO1xuICAgIGlmIChvcHRpb25zLl9vcHRpbWlzdGljUmVzdWx0cykge1xuICAgICAgY29uc3QgbW91bnRlZCA9IHRoaXMuaGFzTGlzdGVuZXJzKCk7XG4gICAgICBjb25zdCBmZXRjaE9uTW91bnQgPSAhbW91bnRlZCAmJiBzaG91bGRGZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpO1xuICAgICAgY29uc3QgZmV0Y2hPcHRpb25hbGx5ID0gbW91bnRlZCAmJiBzaG91bGRGZXRjaE9wdGlvbmFsbHkocXVlcnksIHByZXZRdWVyeSwgb3B0aW9ucywgcHJldk9wdGlvbnMpO1xuICAgICAgaWYgKGZldGNoT25Nb3VudCB8fCBmZXRjaE9wdGlvbmFsbHkpIHtcbiAgICAgICAgZmV0Y2hTdGF0dXMgPSBjYW5GZXRjaChxdWVyeS5vcHRpb25zLm5ldHdvcmtNb2RlKSA/IFwiZmV0Y2hpbmdcIiA6IFwicGF1c2VkXCI7XG4gICAgICAgIGlmICghc3RhdGUuZGF0YVVwZGF0ZWRBdCkge1xuICAgICAgICAgIHN0YXR1cyA9IFwicGVuZGluZ1wiO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5fb3B0aW1pc3RpY1Jlc3VsdHMgPT09IFwiaXNSZXN0b3JpbmdcIikge1xuICAgICAgICBmZXRjaFN0YXR1cyA9IFwiaWRsZVwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5zZWxlY3QgJiYgdHlwZW9mIHN0YXRlLmRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGlmIChwcmV2UmVzdWx0ICYmIHN0YXRlLmRhdGEgPT09IHByZXZSZXN1bHRTdGF0ZT8uZGF0YSAmJiBvcHRpb25zLnNlbGVjdCA9PT0gdGhpcy4jc2VsZWN0Rm4pIHtcbiAgICAgICAgZGF0YSA9IHRoaXMuI3NlbGVjdFJlc3VsdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy4jc2VsZWN0Rm4gPSBvcHRpb25zLnNlbGVjdDtcbiAgICAgICAgICBkYXRhID0gb3B0aW9ucy5zZWxlY3Qoc3RhdGUuZGF0YSk7XG4gICAgICAgICAgZGF0YSA9IHJlcGxhY2VEYXRhKHByZXZSZXN1bHQ/LmRhdGEsIGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgIHRoaXMuI3NlbGVjdFJlc3VsdCA9IGRhdGE7XG4gICAgICAgICAgdGhpcy4jc2VsZWN0RXJyb3IgPSBudWxsO1xuICAgICAgICB9IGNhdGNoIChzZWxlY3RFcnJvcikge1xuICAgICAgICAgIHRoaXMuI3NlbGVjdEVycm9yID0gc2VsZWN0RXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGF0YSA9IHN0YXRlLmRhdGE7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgIT09IFwidW5kZWZpbmVkXCIgJiYgdHlwZW9mIGRhdGEgPT09IFwidW5kZWZpbmVkXCIgJiYgc3RhdHVzID09PSBcInBlbmRpbmdcIikge1xuICAgICAgbGV0IHBsYWNlaG9sZGVyRGF0YTtcbiAgICAgIGlmIChwcmV2UmVzdWx0Py5pc1BsYWNlaG9sZGVyRGF0YSAmJiBvcHRpb25zLnBsYWNlaG9sZGVyRGF0YSA9PT0gcHJldlJlc3VsdE9wdGlvbnM/LnBsYWNlaG9sZGVyRGF0YSkge1xuICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSBwcmV2UmVzdWx0LmRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSB0eXBlb2Ygb3B0aW9ucy5wbGFjZWhvbGRlckRhdGEgPT09IFwiZnVuY3Rpb25cIiA/IG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhKFxuICAgICAgICAgIHRoaXMuI2xhc3RRdWVyeVdpdGhEZWZpbmVkRGF0YT8uc3RhdGUuZGF0YSxcbiAgICAgICAgICB0aGlzLiNsYXN0UXVlcnlXaXRoRGVmaW5lZERhdGFcbiAgICAgICAgKSA6IG9wdGlvbnMucGxhY2Vob2xkZXJEYXRhO1xuICAgICAgICBpZiAob3B0aW9ucy5zZWxlY3QgJiYgdHlwZW9mIHBsYWNlaG9sZGVyRGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBwbGFjZWhvbGRlckRhdGEgPSBvcHRpb25zLnNlbGVjdChwbGFjZWhvbGRlckRhdGEpO1xuICAgICAgICAgICAgdGhpcy4jc2VsZWN0RXJyb3IgPSBudWxsO1xuICAgICAgICAgIH0gY2F0Y2ggKHNlbGVjdEVycm9yKSB7XG4gICAgICAgICAgICB0aGlzLiNzZWxlY3RFcnJvciA9IHNlbGVjdEVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBwbGFjZWhvbGRlckRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgc3RhdHVzID0gXCJzdWNjZXNzXCI7XG4gICAgICAgIGRhdGEgPSByZXBsYWNlRGF0YShcbiAgICAgICAgICBwcmV2UmVzdWx0Py5kYXRhLFxuICAgICAgICAgIHBsYWNlaG9sZGVyRGF0YSxcbiAgICAgICAgICBvcHRpb25zXG4gICAgICAgICk7XG4gICAgICAgIGlzUGxhY2Vob2xkZXJEYXRhID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuI3NlbGVjdEVycm9yKSB7XG4gICAgICBlcnJvciA9IHRoaXMuI3NlbGVjdEVycm9yO1xuICAgICAgZGF0YSA9IHRoaXMuI3NlbGVjdFJlc3VsdDtcbiAgICAgIGVycm9yVXBkYXRlZEF0ID0gRGF0ZS5ub3coKTtcbiAgICAgIHN0YXR1cyA9IFwiZXJyb3JcIjtcbiAgICB9XG4gICAgY29uc3QgaXNGZXRjaGluZyA9IGZldGNoU3RhdHVzID09PSBcImZldGNoaW5nXCI7XG4gICAgY29uc3QgaXNQZW5kaW5nID0gc3RhdHVzID09PSBcInBlbmRpbmdcIjtcbiAgICBjb25zdCBpc0Vycm9yID0gc3RhdHVzID09PSBcImVycm9yXCI7XG4gICAgY29uc3QgaXNMb2FkaW5nID0gaXNQZW5kaW5nICYmIGlzRmV0Y2hpbmc7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgc3RhdHVzLFxuICAgICAgZmV0Y2hTdGF0dXMsXG4gICAgICBpc1BlbmRpbmcsXG4gICAgICBpc1N1Y2Nlc3M6IHN0YXR1cyA9PT0gXCJzdWNjZXNzXCIsXG4gICAgICBpc0Vycm9yLFxuICAgICAgaXNJbml0aWFsTG9hZGluZzogaXNMb2FkaW5nLFxuICAgICAgaXNMb2FkaW5nLFxuICAgICAgZGF0YSxcbiAgICAgIGRhdGFVcGRhdGVkQXQ6IHN0YXRlLmRhdGFVcGRhdGVkQXQsXG4gICAgICBlcnJvcixcbiAgICAgIGVycm9yVXBkYXRlZEF0LFxuICAgICAgZmFpbHVyZUNvdW50OiBzdGF0ZS5mZXRjaEZhaWx1cmVDb3VudCxcbiAgICAgIGZhaWx1cmVSZWFzb246IHN0YXRlLmZldGNoRmFpbHVyZVJlYXNvbixcbiAgICAgIGVycm9yVXBkYXRlQ291bnQ6IHN0YXRlLmVycm9yVXBkYXRlQ291bnQsXG4gICAgICBpc0ZldGNoZWQ6IHN0YXRlLmRhdGFVcGRhdGVDb3VudCA+IDAgfHwgc3RhdGUuZXJyb3JVcGRhdGVDb3VudCA+IDAsXG4gICAgICBpc0ZldGNoZWRBZnRlck1vdW50OiBzdGF0ZS5kYXRhVXBkYXRlQ291bnQgPiBxdWVyeUluaXRpYWxTdGF0ZS5kYXRhVXBkYXRlQ291bnQgfHwgc3RhdGUuZXJyb3JVcGRhdGVDb3VudCA+IHF1ZXJ5SW5pdGlhbFN0YXRlLmVycm9yVXBkYXRlQ291bnQsXG4gICAgICBpc0ZldGNoaW5nLFxuICAgICAgaXNSZWZldGNoaW5nOiBpc0ZldGNoaW5nICYmICFpc1BlbmRpbmcsXG4gICAgICBpc0xvYWRpbmdFcnJvcjogaXNFcnJvciAmJiBzdGF0ZS5kYXRhVXBkYXRlZEF0ID09PSAwLFxuICAgICAgaXNQYXVzZWQ6IGZldGNoU3RhdHVzID09PSBcInBhdXNlZFwiLFxuICAgICAgaXNQbGFjZWhvbGRlckRhdGEsXG4gICAgICBpc1JlZmV0Y2hFcnJvcjogaXNFcnJvciAmJiBzdGF0ZS5kYXRhVXBkYXRlZEF0ICE9PSAwLFxuICAgICAgaXNTdGFsZTogaXNTdGFsZShxdWVyeSwgb3B0aW9ucyksXG4gICAgICByZWZldGNoOiB0aGlzLnJlZmV0Y2hcbiAgICB9O1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgdXBkYXRlUmVzdWx0KG5vdGlmeU9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV2UmVzdWx0ID0gdGhpcy4jY3VycmVudFJlc3VsdDtcbiAgICBjb25zdCBuZXh0UmVzdWx0ID0gdGhpcy5jcmVhdGVSZXN1bHQodGhpcy4jY3VycmVudFF1ZXJ5LCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuI2N1cnJlbnRSZXN1bHRTdGF0ZSA9IHRoaXMuI2N1cnJlbnRRdWVyeS5zdGF0ZTtcbiAgICB0aGlzLiNjdXJyZW50UmVzdWx0T3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICBpZiAodGhpcy4jY3VycmVudFJlc3VsdFN0YXRlLmRhdGEgIT09IHZvaWQgMCkge1xuICAgICAgdGhpcy4jbGFzdFF1ZXJ5V2l0aERlZmluZWREYXRhID0gdGhpcy4jY3VycmVudFF1ZXJ5O1xuICAgIH1cbiAgICBpZiAoc2hhbGxvd0VxdWFsT2JqZWN0cyhuZXh0UmVzdWx0LCBwcmV2UmVzdWx0KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLiNjdXJyZW50UmVzdWx0ID0gbmV4dFJlc3VsdDtcbiAgICBjb25zdCBkZWZhdWx0Tm90aWZ5T3B0aW9ucyA9IHt9O1xuICAgIGNvbnN0IHNob3VsZE5vdGlmeUxpc3RlbmVycyA9ICgpID0+IHtcbiAgICAgIGlmICghcHJldlJlc3VsdCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgbm90aWZ5T25DaGFuZ2VQcm9wcyB9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgY29uc3Qgbm90aWZ5T25DaGFuZ2VQcm9wc1ZhbHVlID0gdHlwZW9mIG5vdGlmeU9uQ2hhbmdlUHJvcHMgPT09IFwiZnVuY3Rpb25cIiA/IG5vdGlmeU9uQ2hhbmdlUHJvcHMoKSA6IG5vdGlmeU9uQ2hhbmdlUHJvcHM7XG4gICAgICBpZiAobm90aWZ5T25DaGFuZ2VQcm9wc1ZhbHVlID09PSBcImFsbFwiIHx8ICFub3RpZnlPbkNoYW5nZVByb3BzVmFsdWUgJiYgIXRoaXMuI3RyYWNrZWRQcm9wcy5zaXplKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5jbHVkZWRQcm9wcyA9IG5ldyBTZXQoXG4gICAgICAgIG5vdGlmeU9uQ2hhbmdlUHJvcHNWYWx1ZSA/PyB0aGlzLiN0cmFja2VkUHJvcHNcbiAgICAgICk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLnRocm93T25FcnJvcikge1xuICAgICAgICBpbmNsdWRlZFByb3BzLmFkZChcImVycm9yXCIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuI2N1cnJlbnRSZXN1bHQpLnNvbWUoKGtleSkgPT4ge1xuICAgICAgICBjb25zdCB0eXBlZEtleSA9IGtleTtcbiAgICAgICAgY29uc3QgY2hhbmdlZCA9IHRoaXMuI2N1cnJlbnRSZXN1bHRbdHlwZWRLZXldICE9PSBwcmV2UmVzdWx0W3R5cGVkS2V5XTtcbiAgICAgICAgcmV0dXJuIGNoYW5nZWQgJiYgaW5jbHVkZWRQcm9wcy5oYXModHlwZWRLZXkpO1xuICAgICAgfSk7XG4gICAgfTtcbiAgICBpZiAobm90aWZ5T3B0aW9ucz8ubGlzdGVuZXJzICE9PSBmYWxzZSAmJiBzaG91bGROb3RpZnlMaXN0ZW5lcnMoKSkge1xuICAgICAgZGVmYXVsdE5vdGlmeU9wdGlvbnMubGlzdGVuZXJzID0gdHJ1ZTtcbiAgICB9XG4gICAgdGhpcy4jbm90aWZ5KHsgLi4uZGVmYXVsdE5vdGlmeU9wdGlvbnMsIC4uLm5vdGlmeU9wdGlvbnMgfSk7XG4gIH1cbiAgI3VwZGF0ZVF1ZXJ5KCkge1xuICAgIGNvbnN0IHF1ZXJ5ID0gdGhpcy4jY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5idWlsZCh0aGlzLiNjbGllbnQsIHRoaXMub3B0aW9ucyk7XG4gICAgaWYgKHF1ZXJ5ID09PSB0aGlzLiNjdXJyZW50UXVlcnkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcHJldlF1ZXJ5ID0gdGhpcy4jY3VycmVudFF1ZXJ5O1xuICAgIHRoaXMuI2N1cnJlbnRRdWVyeSA9IHF1ZXJ5O1xuICAgIHRoaXMuI2N1cnJlbnRRdWVyeUluaXRpYWxTdGF0ZSA9IHF1ZXJ5LnN0YXRlO1xuICAgIGlmICh0aGlzLmhhc0xpc3RlbmVycygpKSB7XG4gICAgICBwcmV2UXVlcnk/LnJlbW92ZU9ic2VydmVyKHRoaXMpO1xuICAgICAgcXVlcnkuYWRkT2JzZXJ2ZXIodGhpcyk7XG4gICAgfVxuICB9XG4gIG9uUXVlcnlVcGRhdGUoKSB7XG4gICAgdGhpcy51cGRhdGVSZXN1bHQoKTtcbiAgICBpZiAodGhpcy5oYXNMaXN0ZW5lcnMoKSkge1xuICAgICAgdGhpcy4jdXBkYXRlVGltZXJzKCk7XG4gICAgfVxuICB9XG4gICNub3RpZnkobm90aWZ5T3B0aW9ucykge1xuICAgIG5vdGlmeU1hbmFnZXIuYmF0Y2goKCkgPT4ge1xuICAgICAgaWYgKG5vdGlmeU9wdGlvbnMubGlzdGVuZXJzKSB7XG4gICAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgbGlzdGVuZXIodGhpcy4jY3VycmVudFJlc3VsdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgdGhpcy4jY2xpZW50LmdldFF1ZXJ5Q2FjaGUoKS5ub3RpZnkoe1xuICAgICAgICBxdWVyeTogdGhpcy4jY3VycmVudFF1ZXJ5LFxuICAgICAgICB0eXBlOiBcIm9ic2VydmVyUmVzdWx0c1VwZGF0ZWRcIlxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cbn07XG5mdW5jdGlvbiBzaG91bGRMb2FkT25Nb3VudChxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5lbmFibGVkICE9PSBmYWxzZSAmJiAhcXVlcnkuc3RhdGUuZGF0YVVwZGF0ZWRBdCAmJiAhKHF1ZXJ5LnN0YXRlLnN0YXR1cyA9PT0gXCJlcnJvclwiICYmIG9wdGlvbnMucmV0cnlPbk1vdW50ID09PSBmYWxzZSk7XG59XG5mdW5jdGlvbiBzaG91bGRGZXRjaE9uTW91bnQocXVlcnksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHNob3VsZExvYWRPbk1vdW50KHF1ZXJ5LCBvcHRpb25zKSB8fCBxdWVyeS5zdGF0ZS5kYXRhVXBkYXRlZEF0ID4gMCAmJiBzaG91bGRGZXRjaE9uKHF1ZXJ5LCBvcHRpb25zLCBvcHRpb25zLnJlZmV0Y2hPbk1vdW50KTtcbn1cbmZ1bmN0aW9uIHNob3VsZEZldGNoT24ocXVlcnksIG9wdGlvbnMsIGZpZWxkKSB7XG4gIGlmIChvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlKSB7XG4gICAgY29uc3QgdmFsdWUgPSB0eXBlb2YgZmllbGQgPT09IFwiZnVuY3Rpb25cIiA/IGZpZWxkKHF1ZXJ5KSA6IGZpZWxkO1xuICAgIHJldHVybiB2YWx1ZSA9PT0gXCJhbHdheXNcIiB8fCB2YWx1ZSAhPT0gZmFsc2UgJiYgaXNTdGFsZShxdWVyeSwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gc2hvdWxkRmV0Y2hPcHRpb25hbGx5KHF1ZXJ5LCBwcmV2UXVlcnksIG9wdGlvbnMsIHByZXZPcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLmVuYWJsZWQgIT09IGZhbHNlICYmIChxdWVyeSAhPT0gcHJldlF1ZXJ5IHx8IHByZXZPcHRpb25zLmVuYWJsZWQgPT09IGZhbHNlKSAmJiAoIW9wdGlvbnMuc3VzcGVuc2UgfHwgcXVlcnkuc3RhdGUuc3RhdHVzICE9PSBcImVycm9yXCIpICYmIGlzU3RhbGUocXVlcnksIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gaXNTdGFsZShxdWVyeSwgb3B0aW9ucykge1xuICByZXR1cm4gcXVlcnkuaXNTdGFsZUJ5VGltZShvcHRpb25zLnN0YWxlVGltZSk7XG59XG5mdW5jdGlvbiBzaG91bGRBc3NpZ25PYnNlcnZlckN1cnJlbnRQcm9wZXJ0aWVzKG9ic2VydmVyLCBvcHRpbWlzdGljUmVzdWx0KSB7XG4gIGlmICghc2hhbGxvd0VxdWFsT2JqZWN0cyhvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KCksIG9wdGltaXN0aWNSZXN1bHQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0IHtcbiAgUXVlcnlPYnNlcnZlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXJ5T2JzZXJ2ZXIuanMubWFwIiwiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9RdWVyeUNsaWVudFByb3ZpZGVyLnRzeFxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG52YXIgUXVlcnlDbGllbnRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dChcbiAgdm9pZCAwXG4pO1xudmFyIHVzZVF1ZXJ5Q2xpZW50ID0gKHF1ZXJ5Q2xpZW50KSA9PiB7XG4gIGNvbnN0IGNsaWVudCA9IFJlYWN0LnVzZUNvbnRleHQoUXVlcnlDbGllbnRDb250ZXh0KTtcbiAgaWYgKHF1ZXJ5Q2xpZW50KSB7XG4gICAgcmV0dXJuIHF1ZXJ5Q2xpZW50O1xuICB9XG4gIGlmICghY2xpZW50KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gUXVlcnlDbGllbnQgc2V0LCB1c2UgUXVlcnlDbGllbnRQcm92aWRlciB0byBzZXQgb25lXCIpO1xuICB9XG4gIHJldHVybiBjbGllbnQ7XG59O1xudmFyIFF1ZXJ5Q2xpZW50UHJvdmlkZXIgPSAoe1xuICBjbGllbnQsXG4gIGNoaWxkcmVuXG59KSA9PiB7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgY2xpZW50Lm1vdW50KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGNsaWVudC51bm1vdW50KCk7XG4gICAgfTtcbiAgfSwgW2NsaWVudF0pO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlDbGllbnRDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlOiBjbGllbnQgfSwgY2hpbGRyZW4pO1xufTtcbmV4cG9ydCB7XG4gIFF1ZXJ5Q2xpZW50Q29udGV4dCxcbiAgUXVlcnlDbGllbnRQcm92aWRlcixcbiAgdXNlUXVlcnlDbGllbnRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1RdWVyeUNsaWVudFByb3ZpZGVyLmpzLm1hcCIsIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvaXNSZXN0b3JpbmcudHNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xudmFyIElzUmVzdG9yaW5nQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQoZmFsc2UpO1xudmFyIHVzZUlzUmVzdG9yaW5nID0gKCkgPT4gUmVhY3QudXNlQ29udGV4dChJc1Jlc3RvcmluZ0NvbnRleHQpO1xudmFyIElzUmVzdG9yaW5nUHJvdmlkZXIgPSBJc1Jlc3RvcmluZ0NvbnRleHQuUHJvdmlkZXI7XG5leHBvcnQge1xuICBJc1Jlc3RvcmluZ1Byb3ZpZGVyLFxuICB1c2VJc1Jlc3RvcmluZ1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUmVzdG9yaW5nLmpzLm1hcCIsIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkudHN4XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmZ1bmN0aW9uIGNyZWF0ZVZhbHVlKCkge1xuICBsZXQgaXNSZXNldCA9IGZhbHNlO1xuICByZXR1cm4ge1xuICAgIGNsZWFyUmVzZXQ6ICgpID0+IHtcbiAgICAgIGlzUmVzZXQgPSBmYWxzZTtcbiAgICB9LFxuICAgIHJlc2V0OiAoKSA9PiB7XG4gICAgICBpc1Jlc2V0ID0gdHJ1ZTtcbiAgICB9LFxuICAgIGlzUmVzZXQ6ICgpID0+IHtcbiAgICAgIHJldHVybiBpc1Jlc2V0O1xuICAgIH1cbiAgfTtcbn1cbnZhciBRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQgPSBSZWFjdC5jcmVhdGVDb250ZXh0KGNyZWF0ZVZhbHVlKCkpO1xudmFyIHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gKCkgPT4gUmVhY3QudXNlQ29udGV4dChRdWVyeUVycm9yUmVzZXRCb3VuZGFyeUNvbnRleHQpO1xudmFyIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5ID0gKHtcbiAgY2hpbGRyZW5cbn0pID0+IHtcbiAgY29uc3QgW3ZhbHVlXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IGNyZWF0ZVZhbHVlKCkpO1xuICByZXR1cm4gLyogQF9fUFVSRV9fICovIFJlYWN0LmNyZWF0ZUVsZW1lbnQoUXVlcnlFcnJvclJlc2V0Qm91bmRhcnlDb250ZXh0LlByb3ZpZGVyLCB7IHZhbHVlIH0sIHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4odmFsdWUpIDogY2hpbGRyZW4pO1xufTtcbmV4cG9ydCB7XG4gIFF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5LFxuICB1c2VRdWVyeUVycm9yUmVzZXRCb3VuZGFyeVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5LmpzLm1hcCIsIi8vIHNyYy91dGlscy50c1xuZnVuY3Rpb24gc2hvdWxkVGhyb3dFcnJvcih0aHJvd0Vycm9yLCBwYXJhbXMpIHtcbiAgaWYgKHR5cGVvZiB0aHJvd0Vycm9yID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gdGhyb3dFcnJvciguLi5wYXJhbXMpO1xuICB9XG4gIHJldHVybiAhIXRocm93RXJyb3I7XG59XG5leHBvcnQge1xuICBzaG91bGRUaHJvd0Vycm9yXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIiwiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy9lcnJvckJvdW5kYXJ5VXRpbHMudHNcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgc2hvdWxkVGhyb3dFcnJvciB9IGZyb20gXCIuL3V0aWxzLmpzXCI7XG52YXIgZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeSA9IChvcHRpb25zLCBlcnJvclJlc2V0Qm91bmRhcnkpID0+IHtcbiAgaWYgKG9wdGlvbnMuc3VzcGVuc2UgfHwgb3B0aW9ucy50aHJvd09uRXJyb3IpIHtcbiAgICBpZiAoIWVycm9yUmVzZXRCb3VuZGFyeS5pc1Jlc2V0KCkpIHtcbiAgICAgIG9wdGlvbnMucmV0cnlPbk1vdW50ID0gZmFsc2U7XG4gICAgfVxuICB9XG59O1xudmFyIHVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5ID0gKGVycm9yUmVzZXRCb3VuZGFyeSkgPT4ge1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGVycm9yUmVzZXRCb3VuZGFyeS5jbGVhclJlc2V0KCk7XG4gIH0sIFtlcnJvclJlc2V0Qm91bmRhcnldKTtcbn07XG52YXIgZ2V0SGFzRXJyb3IgPSAoe1xuICByZXN1bHQsXG4gIGVycm9yUmVzZXRCb3VuZGFyeSxcbiAgdGhyb3dPbkVycm9yLFxuICBxdWVyeVxufSkgPT4ge1xuICByZXR1cm4gcmVzdWx0LmlzRXJyb3IgJiYgIWVycm9yUmVzZXRCb3VuZGFyeS5pc1Jlc2V0KCkgJiYgIXJlc3VsdC5pc0ZldGNoaW5nICYmIHF1ZXJ5ICYmIHNob3VsZFRocm93RXJyb3IodGhyb3dPbkVycm9yLCBbcmVzdWx0LmVycm9yLCBxdWVyeV0pO1xufTtcbmV4cG9ydCB7XG4gIGVuc3VyZVByZXZlbnRFcnJvckJvdW5kYXJ5UmV0cnksXG4gIGdldEhhc0Vycm9yLFxuICB1c2VDbGVhclJlc2V0RXJyb3JCb3VuZGFyeVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQm91bmRhcnlVdGlscy5qcy5tYXAiLCIvLyBzcmMvc3VzcGVuc2UudHNcbnZhciBkZWZhdWx0VGhyb3dPbkVycm9yID0gKF9lcnJvciwgcXVlcnkpID0+IHR5cGVvZiBxdWVyeS5zdGF0ZS5kYXRhID09PSBcInVuZGVmaW5lZFwiO1xudmFyIGVuc3VyZVN0YWxlVGltZSA9IChkZWZhdWx0ZWRPcHRpb25zKSA9PiB7XG4gIGlmIChkZWZhdWx0ZWRPcHRpb25zLnN1c3BlbnNlKSB7XG4gICAgaWYgKHR5cGVvZiBkZWZhdWx0ZWRPcHRpb25zLnN0YWxlVGltZSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgZGVmYXVsdGVkT3B0aW9ucy5zdGFsZVRpbWUgPSAxZTM7XG4gICAgfVxuICB9XG59O1xudmFyIHdpbGxGZXRjaCA9IChyZXN1bHQsIGlzUmVzdG9yaW5nKSA9PiByZXN1bHQuaXNMb2FkaW5nICYmIHJlc3VsdC5pc0ZldGNoaW5nICYmICFpc1Jlc3RvcmluZztcbnZhciBzaG91bGRTdXNwZW5kID0gKGRlZmF1bHRlZE9wdGlvbnMsIHJlc3VsdCkgPT4gZGVmYXVsdGVkT3B0aW9ucz8uc3VzcGVuc2UgJiYgcmVzdWx0LmlzUGVuZGluZztcbnZhciBmZXRjaE9wdGltaXN0aWMgPSAoZGVmYXVsdGVkT3B0aW9ucywgb2JzZXJ2ZXIsIGVycm9yUmVzZXRCb3VuZGFyeSkgPT4gb2JzZXJ2ZXIuZmV0Y2hPcHRpbWlzdGljKGRlZmF1bHRlZE9wdGlvbnMpLmNhdGNoKCgpID0+IHtcbiAgZXJyb3JSZXNldEJvdW5kYXJ5LmNsZWFyUmVzZXQoKTtcbn0pO1xuZXhwb3J0IHtcbiAgZGVmYXVsdFRocm93T25FcnJvcixcbiAgZW5zdXJlU3RhbGVUaW1lLFxuICBmZXRjaE9wdGltaXN0aWMsXG4gIHNob3VsZFN1c3BlbmQsXG4gIHdpbGxGZXRjaFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1c3BlbnNlLmpzLm1hcCIsIlwidXNlIGNsaWVudFwiO1xuXG4vLyBzcmMvdXNlQmFzZVF1ZXJ5LnRzXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IG5vdGlmeU1hbmFnZXIgfSBmcm9tIFwiQHRhbnN0YWNrL3F1ZXJ5LWNvcmVcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5RXJyb3JSZXNldEJvdW5kYXJ5IH0gZnJvbSBcIi4vUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkuanNcIjtcbmltcG9ydCB7IHVzZVF1ZXJ5Q2xpZW50IH0gZnJvbSBcIi4vUXVlcnlDbGllbnRQcm92aWRlci5qc1wiO1xuaW1wb3J0IHsgdXNlSXNSZXN0b3JpbmcgfSBmcm9tIFwiLi9pc1Jlc3RvcmluZy5qc1wiO1xuaW1wb3J0IHtcbiAgZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeSxcbiAgZ2V0SGFzRXJyb3IsXG4gIHVzZUNsZWFyUmVzZXRFcnJvckJvdW5kYXJ5XG59IGZyb20gXCIuL2Vycm9yQm91bmRhcnlVdGlscy5qc1wiO1xuaW1wb3J0IHsgZW5zdXJlU3RhbGVUaW1lLCBmZXRjaE9wdGltaXN0aWMsIHNob3VsZFN1c3BlbmQgfSBmcm9tIFwiLi9zdXNwZW5zZS5qc1wiO1xuZnVuY3Rpb24gdXNlQmFzZVF1ZXJ5KG9wdGlvbnMsIE9ic2VydmVyLCBxdWVyeUNsaWVudCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkob3B0aW9ucykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0JhZCBhcmd1bWVudCB0eXBlLiBTdGFydGluZyB3aXRoIHY1LCBvbmx5IHRoZSBcIk9iamVjdFwiIGZvcm0gaXMgYWxsb3dlZCB3aGVuIGNhbGxpbmcgcXVlcnkgcmVsYXRlZCBmdW5jdGlvbnMuIFBsZWFzZSB1c2UgdGhlIGVycm9yIHN0YWNrIHRvIGZpbmQgdGhlIGN1bHByaXQgY2FsbC4gTW9yZSBpbmZvIGhlcmU6IGh0dHBzOi8vdGFuc3RhY2suY29tL3F1ZXJ5L2xhdGVzdC9kb2NzL3JlYWN0L2d1aWRlcy9taWdyYXRpbmctdG8tdjUjc3VwcG9ydHMtYS1zaW5nbGUtc2lnbmF0dXJlLW9uZS1vYmplY3QnXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBjb25zdCBjbGllbnQgPSB1c2VRdWVyeUNsaWVudChxdWVyeUNsaWVudCk7XG4gIGNvbnN0IGlzUmVzdG9yaW5nID0gdXNlSXNSZXN0b3JpbmcoKTtcbiAgY29uc3QgZXJyb3JSZXNldEJvdW5kYXJ5ID0gdXNlUXVlcnlFcnJvclJlc2V0Qm91bmRhcnkoKTtcbiAgY29uc3QgZGVmYXVsdGVkT3B0aW9ucyA9IGNsaWVudC5kZWZhdWx0UXVlcnlPcHRpb25zKG9wdGlvbnMpO1xuICBkZWZhdWx0ZWRPcHRpb25zLl9vcHRpbWlzdGljUmVzdWx0cyA9IGlzUmVzdG9yaW5nID8gXCJpc1Jlc3RvcmluZ1wiIDogXCJvcHRpbWlzdGljXCI7XG4gIGVuc3VyZVN0YWxlVGltZShkZWZhdWx0ZWRPcHRpb25zKTtcbiAgZW5zdXJlUHJldmVudEVycm9yQm91bmRhcnlSZXRyeShkZWZhdWx0ZWRPcHRpb25zLCBlcnJvclJlc2V0Qm91bmRhcnkpO1xuICB1c2VDbGVhclJlc2V0RXJyb3JCb3VuZGFyeShlcnJvclJlc2V0Qm91bmRhcnkpO1xuICBjb25zdCBbb2JzZXJ2ZXJdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgKCkgPT4gbmV3IE9ic2VydmVyKFxuICAgICAgY2xpZW50LFxuICAgICAgZGVmYXVsdGVkT3B0aW9uc1xuICAgIClcbiAgKTtcbiAgY29uc3QgcmVzdWx0ID0gb2JzZXJ2ZXIuZ2V0T3B0aW1pc3RpY1Jlc3VsdChkZWZhdWx0ZWRPcHRpb25zKTtcbiAgUmVhY3QudXNlU3luY0V4dGVybmFsU3RvcmUoXG4gICAgUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgICAob25TdG9yZUNoYW5nZSkgPT4ge1xuICAgICAgICBjb25zdCB1bnN1YnNjcmliZSA9IGlzUmVzdG9yaW5nID8gKCkgPT4gdm9pZCAwIDogb2JzZXJ2ZXIuc3Vic2NyaWJlKG5vdGlmeU1hbmFnZXIuYmF0Y2hDYWxscyhvblN0b3JlQ2hhbmdlKSk7XG4gICAgICAgIG9ic2VydmVyLnVwZGF0ZVJlc3VsdCgpO1xuICAgICAgICByZXR1cm4gdW5zdWJzY3JpYmU7XG4gICAgICB9LFxuICAgICAgW29ic2VydmVyLCBpc1Jlc3RvcmluZ11cbiAgICApLFxuICAgICgpID0+IG9ic2VydmVyLmdldEN1cnJlbnRSZXN1bHQoKSxcbiAgICAoKSA9PiBvYnNlcnZlci5nZXRDdXJyZW50UmVzdWx0KClcbiAgKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBvYnNlcnZlci5zZXRPcHRpb25zKGRlZmF1bHRlZE9wdGlvbnMsIHsgbGlzdGVuZXJzOiBmYWxzZSB9KTtcbiAgfSwgW2RlZmF1bHRlZE9wdGlvbnMsIG9ic2VydmVyXSk7XG4gIGlmIChzaG91bGRTdXNwZW5kKGRlZmF1bHRlZE9wdGlvbnMsIHJlc3VsdCkpIHtcbiAgICB0aHJvdyBmZXRjaE9wdGltaXN0aWMoZGVmYXVsdGVkT3B0aW9ucywgb2JzZXJ2ZXIsIGVycm9yUmVzZXRCb3VuZGFyeSk7XG4gIH1cbiAgaWYgKGdldEhhc0Vycm9yKHtcbiAgICByZXN1bHQsXG4gICAgZXJyb3JSZXNldEJvdW5kYXJ5LFxuICAgIHRocm93T25FcnJvcjogZGVmYXVsdGVkT3B0aW9ucy50aHJvd09uRXJyb3IsXG4gICAgcXVlcnk6IGNsaWVudC5nZXRRdWVyeUNhY2hlKCkuZ2V0KGRlZmF1bHRlZE9wdGlvbnMucXVlcnlIYXNoKVxuICB9KSkge1xuICAgIHRocm93IHJlc3VsdC5lcnJvcjtcbiAgfVxuICByZXR1cm4gIWRlZmF1bHRlZE9wdGlvbnMubm90aWZ5T25DaGFuZ2VQcm9wcyA/IG9ic2VydmVyLnRyYWNrUmVzdWx0KHJlc3VsdCkgOiByZXN1bHQ7XG59XG5leHBvcnQge1xuICB1c2VCYXNlUXVlcnlcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11c2VCYXNlUXVlcnkuanMubWFwIiwiXCJ1c2UgY2xpZW50XCI7XG5cbi8vIHNyYy91c2VRdWVyeS50c1xuaW1wb3J0IHsgUXVlcnlPYnNlcnZlciB9IGZyb20gXCJAdGFuc3RhY2svcXVlcnktY29yZVwiO1xuaW1wb3J0IHsgdXNlQmFzZVF1ZXJ5IH0gZnJvbSBcIi4vdXNlQmFzZVF1ZXJ5LmpzXCI7XG5mdW5jdGlvbiB1c2VRdWVyeShvcHRpb25zLCBxdWVyeUNsaWVudCkge1xuICByZXR1cm4gdXNlQmFzZVF1ZXJ5KG9wdGlvbnMsIFF1ZXJ5T2JzZXJ2ZXIsIHF1ZXJ5Q2xpZW50KTtcbn1cbmV4cG9ydCB7XG4gIHVzZVF1ZXJ5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXNlUXVlcnkuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gIHJldHVybiBmdW5jdGlvbiB3cmFwKCkge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmd1bWVudHMpO1xuICB9O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgYmluZCBmcm9tICcuL2hlbHBlcnMvYmluZC5qcyc7XG5cbi8vIHV0aWxzIGlzIGEgbGlicmFyeSBvZiBnZW5lcmljIGhlbHBlciBmdW5jdGlvbnMgbm9uLXNwZWNpZmljIHRvIGF4aW9zXG5cbmNvbnN0IHt0b1N0cmluZ30gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3Qge2dldFByb3RvdHlwZU9mfSA9IE9iamVjdDtcblxuY29uc3Qga2luZE9mID0gKGNhY2hlID0+IHRoaW5nID0+IHtcbiAgICBjb25zdCBzdHIgPSB0b1N0cmluZy5jYWxsKHRoaW5nKTtcbiAgICByZXR1cm4gY2FjaGVbc3RyXSB8fCAoY2FjaGVbc3RyXSA9IHN0ci5zbGljZSg4LCAtMSkudG9Mb3dlckNhc2UoKSk7XG59KShPYmplY3QuY3JlYXRlKG51bGwpKTtcblxuY29uc3Qga2luZE9mVGVzdCA9ICh0eXBlKSA9PiB7XG4gIHR5cGUgPSB0eXBlLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiAodGhpbmcpID0+IGtpbmRPZih0aGluZykgPT09IHR5cGVcbn1cblxuY29uc3QgdHlwZU9mVGVzdCA9IHR5cGUgPT4gdGhpbmcgPT4gdHlwZW9mIHRoaW5nID09PSB0eXBlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3Qge2lzQXJyYXl9ID0gQXJyYXk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgdW5kZWZpbmVkXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgdW5kZWZpbmVkLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNVbmRlZmluZWQgPSB0eXBlT2ZUZXN0KCd1bmRlZmluZWQnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiBpc0Z1bmN0aW9uKHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcikgJiYgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKHZhbCk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNBcnJheUJ1ZmZlciA9IGtpbmRPZlRlc3QoJ0FycmF5QnVmZmVyJyk7XG5cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlCdWZmZXJWaWV3KHZhbCkge1xuICBsZXQgcmVzdWx0O1xuICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcpICYmIChBcnJheUJ1ZmZlci5pc1ZpZXcpKSB7XG4gICAgcmVzdWx0ID0gQXJyYXlCdWZmZXIuaXNWaWV3KHZhbCk7XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gKHZhbCkgJiYgKHZhbC5idWZmZXIpICYmIChpc0FycmF5QnVmZmVyKHZhbC5idWZmZXIpKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmluZywgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyaW5nID0gdHlwZU9mVGVzdCgnc3RyaW5nJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGdW5jdGlvbiA9IHR5cGVPZlRlc3QoJ2Z1bmN0aW9uJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBOdW1iZXJcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgTnVtYmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNOdW1iZXIgPSB0eXBlT2ZUZXN0KCdudW1iZXInKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNPYmplY3QgPSAodGhpbmcpID0+IHRoaW5nICE9PSBudWxsICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBCb29sZWFuXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCb29sZWFuLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCb29sZWFuID0gdGhpbmcgPT4gdGhpbmcgPT09IHRydWUgfHwgdGhpbmcgPT09IGZhbHNlO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHBsYWluIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAodmFsKSA9PiB7XG4gIGlmIChraW5kT2YodmFsKSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBwcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZih2YWwpO1xuICByZXR1cm4gKHByb3RvdHlwZSA9PT0gbnVsbCB8fCBwcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmICEoU3ltYm9sLnRvU3RyaW5nVGFnIGluIHZhbCkgJiYgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIERhdGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRGF0ZSA9IGtpbmRPZlRlc3QoJ0RhdGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZSA9IGtpbmRPZlRlc3QoJ0ZpbGUnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJsb2JcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzQmxvYiA9IGtpbmRPZlRlc3QoJ0Jsb2InKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZpbGVMaXN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZpbGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0ZpbGVMaXN0ID0ga2luZE9mVGVzdCgnRmlsZUxpc3QnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJlYW0sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1N0cmVhbSA9ICh2YWwpID0+IGlzT2JqZWN0KHZhbCkgJiYgaXNGdW5jdGlvbih2YWwucGlwZSk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBGb3JtRGF0YVxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRm9ybURhdGEgPSAodGhpbmcpID0+IHtcbiAgbGV0IGtpbmQ7XG4gIHJldHVybiB0aGluZyAmJiAoXG4gICAgKHR5cGVvZiBGb3JtRGF0YSA9PT0gJ2Z1bmN0aW9uJyAmJiB0aGluZyBpbnN0YW5jZW9mIEZvcm1EYXRhKSB8fCAoXG4gICAgICBpc0Z1bmN0aW9uKHRoaW5nLmFwcGVuZCkgJiYgKFxuICAgICAgICAoa2luZCA9IGtpbmRPZih0aGluZykpID09PSAnZm9ybWRhdGEnIHx8XG4gICAgICAgIC8vIGRldGVjdCBmb3JtLWRhdGEgaW5zdGFuY2VcbiAgICAgICAgKGtpbmQgPT09ICdvYmplY3QnICYmIGlzRnVuY3Rpb24odGhpbmcudG9TdHJpbmcpICYmIHRoaW5nLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IEZvcm1EYXRhXScpXG4gICAgICApXG4gICAgKVxuICApXG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBVUkxTZWFyY2hQYXJhbXMgb2JqZWN0XG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VSTFNlYXJjaFBhcmFtcyA9IGtpbmRPZlRlc3QoJ1VSTFNlYXJjaFBhcmFtcycpO1xuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFN0cmluZyBmcmVlZCBvZiBleGNlc3Mgd2hpdGVzcGFjZVxuICovXG5jb25zdCB0cmltID0gKHN0cikgPT4gc3RyLnRyaW0gP1xuICBzdHIudHJpbSgpIDogc3RyLnJlcGxhY2UoL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLCAnJyk7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzID0gZmFsc2VdXG4gKiBAcmV0dXJucyB7YW55fVxuICovXG5mdW5jdGlvbiBmb3JFYWNoKG9iaiwgZm4sIHthbGxPd25LZXlzID0gZmFsc2V9ID0ge30pIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGlmIG5vIHZhbHVlIHByb3ZpZGVkXG4gIGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBsZXQgaTtcbiAgbGV0IGw7XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKGkgPSAwLCBsID0gb2JqLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpbaV0sIGksIG9iaik7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBvYmplY3Qga2V5c1xuICAgIGNvbnN0IGtleXMgPSBhbGxPd25LZXlzID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKSA6IE9iamVjdC5rZXlzKG9iaik7XG4gICAgY29uc3QgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgbGV0IGtleTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2tleV0sIGtleSwgb2JqKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEtleShvYmosIGtleSkge1xuICBrZXkgPSBrZXkudG9Mb3dlckNhc2UoKTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gIGxldCBpID0ga2V5cy5sZW5ndGg7XG4gIGxldCBfa2V5O1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIF9rZXkgPSBrZXlzW2ldO1xuICAgIGlmIChrZXkgPT09IF9rZXkudG9Mb3dlckNhc2UoKSkge1xuICAgICAgcmV0dXJuIF9rZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5jb25zdCBfZ2xvYmFsID0gKCgpID0+IHtcbiAgLyplc2xpbnQgbm8tdW5kZWY6MCovXG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikgcmV0dXJuIGdsb2JhbFRoaXM7XG4gIHJldHVybiB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpXG59KSgpO1xuXG5jb25zdCBpc0NvbnRleHREZWZpbmVkID0gKGNvbnRleHQpID0+ICFpc1VuZGVmaW5lZChjb250ZXh0KSAmJiBjb250ZXh0ICE9PSBfZ2xvYmFsO1xuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXN1bHQgb2YgYWxsIG1lcmdlIHByb3BlcnRpZXNcbiAqL1xuZnVuY3Rpb24gbWVyZ2UoLyogb2JqMSwgb2JqMiwgb2JqMywgLi4uICovKSB7XG4gIGNvbnN0IHtjYXNlbGVzc30gPSBpc0NvbnRleHREZWZpbmVkKHRoaXMpICYmIHRoaXMgfHwge307XG4gIGNvbnN0IHJlc3VsdCA9IHt9O1xuICBjb25zdCBhc3NpZ25WYWx1ZSA9ICh2YWwsIGtleSkgPT4ge1xuICAgIGNvbnN0IHRhcmdldEtleSA9IGNhc2VsZXNzICYmIGZpbmRLZXkocmVzdWx0LCBrZXkpIHx8IGtleTtcbiAgICBpZiAoaXNQbGFpbk9iamVjdChyZXN1bHRbdGFyZ2V0S2V5XSkgJiYgaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHJlc3VsdFt0YXJnZXRLZXldLCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IG1lcmdlKHt9LCB2YWwpO1xuICAgIH0gZWxzZSBpZiAoaXNBcnJheSh2YWwpKSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbC5zbGljZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRbdGFyZ2V0S2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBhcmd1bWVudHNbaV0gJiYgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKlxuICogQHBhcmFtIHtCb29sZWFufSBbYWxsT3duS2V5c11cbiAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuY29uc3QgZXh0ZW5kID0gKGEsIGIsIHRoaXNBcmcsIHthbGxPd25LZXlzfT0ge30pID0+IHtcbiAgZm9yRWFjaChiLCAodmFsLCBrZXkpID0+IHtcbiAgICBpZiAodGhpc0FyZyAmJiBpc0Z1bmN0aW9uKHZhbCkpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSwge2FsbE93bktleXN9KTtcbiAgcmV0dXJuIGE7XG59XG5cbi8qKlxuICogUmVtb3ZlIGJ5dGUgb3JkZXIgbWFya2VyLiBUaGlzIGNhdGNoZXMgRUYgQkIgQkYgKHRoZSBVVEYtOCBCT00pXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnQgd2l0aCBCT01cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBjb250ZW50IHZhbHVlIHdpdGhvdXQgQk9NXG4gKi9cbmNvbnN0IHN0cmlwQk9NID0gKGNvbnRlbnQpID0+IHtcbiAgaWYgKGNvbnRlbnQuY2hhckNvZGVBdCgwKSA9PT0gMHhGRUZGKSB7XG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW5oZXJpdCB0aGUgcHJvdG90eXBlIG1ldGhvZHMgZnJvbSBvbmUgY29uc3RydWN0b3IgaW50byBhbm90aGVyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtmdW5jdGlvbn0gc3VwZXJDb25zdHJ1Y3RvclxuICogQHBhcmFtIHtvYmplY3R9IFtwcm9wc11cbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVzY3JpcHRvcnNdXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGluaGVyaXRzID0gKGNvbnN0cnVjdG9yLCBzdXBlckNvbnN0cnVjdG9yLCBwcm9wcywgZGVzY3JpcHRvcnMpID0+IHtcbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNvbnN0cnVjdG9yLnByb3RvdHlwZSwgZGVzY3JpcHRvcnMpO1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbnN0cnVjdG9yLCAnc3VwZXInLCB7XG4gICAgdmFsdWU6IHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlXG4gIH0pO1xuICBwcm9wcyAmJiBPYmplY3QuYXNzaWduKGNvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvcHMpO1xufVxuXG4vKipcbiAqIFJlc29sdmUgb2JqZWN0IHdpdGggZGVlcCBwcm90b3R5cGUgY2hhaW4gdG8gYSBmbGF0IG9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZU9iaiBzb3VyY2Ugb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gW2Rlc3RPYmpdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufEJvb2xlYW59IFtmaWx0ZXJdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJvcEZpbHRlcl1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICovXG5jb25zdCB0b0ZsYXRPYmplY3QgPSAoc291cmNlT2JqLCBkZXN0T2JqLCBmaWx0ZXIsIHByb3BGaWx0ZXIpID0+IHtcbiAgbGV0IHByb3BzO1xuICBsZXQgaTtcbiAgbGV0IHByb3A7XG4gIGNvbnN0IG1lcmdlZCA9IHt9O1xuXG4gIGRlc3RPYmogPSBkZXN0T2JqIHx8IHt9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgaWYgKHNvdXJjZU9iaiA9PSBudWxsKSByZXR1cm4gZGVzdE9iajtcblxuICBkbyB7XG4gICAgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VPYmopO1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgIHByb3AgPSBwcm9wc1tpXTtcbiAgICAgIGlmICgoIXByb3BGaWx0ZXIgfHwgcHJvcEZpbHRlcihwcm9wLCBzb3VyY2VPYmosIGRlc3RPYmopKSAmJiAhbWVyZ2VkW3Byb3BdKSB7XG4gICAgICAgIGRlc3RPYmpbcHJvcF0gPSBzb3VyY2VPYmpbcHJvcF07XG4gICAgICAgIG1lcmdlZFtwcm9wXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZU9iaiA9IGZpbHRlciAhPT0gZmFsc2UgJiYgZ2V0UHJvdG90eXBlT2Yoc291cmNlT2JqKTtcbiAgfSB3aGlsZSAoc291cmNlT2JqICYmICghZmlsdGVyIHx8IGZpbHRlcihzb3VyY2VPYmosIGRlc3RPYmopKSAmJiBzb3VyY2VPYmogIT09IE9iamVjdC5wcm90b3R5cGUpO1xuXG4gIHJldHVybiBkZXN0T2JqO1xufVxuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciBhIHN0cmluZyBlbmRzIHdpdGggdGhlIGNoYXJhY3RlcnMgb2YgYSBzcGVjaWZpZWQgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IHNlYXJjaFN0cmluZ1xuICogQHBhcmFtIHtOdW1iZXJ9IFtwb3NpdGlvbj0gMF1cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgZW5kc1dpdGggPSAoc3RyLCBzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKSA9PiB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAocG9zaXRpb24gPT09IHVuZGVmaW5lZCB8fCBwb3NpdGlvbiA+IHN0ci5sZW5ndGgpIHtcbiAgICBwb3NpdGlvbiA9IHN0ci5sZW5ndGg7XG4gIH1cbiAgcG9zaXRpb24gLT0gc2VhcmNoU3RyaW5nLmxlbmd0aDtcbiAgY29uc3QgbGFzdEluZGV4ID0gc3RyLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbik7XG4gIHJldHVybiBsYXN0SW5kZXggIT09IC0xICYmIGxhc3RJbmRleCA9PT0gcG9zaXRpb247XG59XG5cblxuLyoqXG4gKiBSZXR1cm5zIG5ldyBhcnJheSBmcm9tIGFycmF5IGxpa2Ugb2JqZWN0IG9yIG51bGwgaWYgZmFpbGVkXG4gKlxuICogQHBhcmFtIHsqfSBbdGhpbmddXG4gKlxuICogQHJldHVybnMgez9BcnJheX1cbiAqL1xuY29uc3QgdG9BcnJheSA9ICh0aGluZykgPT4ge1xuICBpZiAoIXRoaW5nKSByZXR1cm4gbnVsbDtcbiAgaWYgKGlzQXJyYXkodGhpbmcpKSByZXR1cm4gdGhpbmc7XG4gIGxldCBpID0gdGhpbmcubGVuZ3RoO1xuICBpZiAoIWlzTnVtYmVyKGkpKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgYXJyID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGFycltpXSA9IHRoaW5nW2ldO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogQ2hlY2tpbmcgaWYgdGhlIFVpbnQ4QXJyYXkgZXhpc3RzIGFuZCBpZiBpdCBkb2VzLCBpdCByZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgdGhlXG4gKiB0aGluZyBwYXNzZWQgaW4gaXMgYW4gaW5zdGFuY2Ugb2YgVWludDhBcnJheVxuICpcbiAqIEBwYXJhbSB7VHlwZWRBcnJheX1cbiAqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5jb25zdCBpc1R5cGVkQXJyYXkgPSAoVHlwZWRBcnJheSA9PiB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gIHJldHVybiB0aGluZyA9PiB7XG4gICAgcmV0dXJuIFR5cGVkQXJyYXkgJiYgdGhpbmcgaW5zdGFuY2VvZiBUeXBlZEFycmF5O1xuICB9O1xufSkodHlwZW9mIFVpbnQ4QXJyYXkgIT09ICd1bmRlZmluZWQnICYmIGdldFByb3RvdHlwZU9mKFVpbnQ4QXJyYXkpKTtcblxuLyoqXG4gKiBGb3IgZWFjaCBlbnRyeSBpbiB0aGUgb2JqZWN0LCBjYWxsIHRoZSBmdW5jdGlvbiB3aXRoIHRoZSBrZXkgYW5kIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PGFueSwgYW55Pn0gb2JqIC0gVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGVudHJ5LlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5jb25zdCBmb3JFYWNoRW50cnkgPSAob2JqLCBmbikgPT4ge1xuICBjb25zdCBnZW5lcmF0b3IgPSBvYmogJiYgb2JqW1N5bWJvbC5pdGVyYXRvcl07XG5cbiAgY29uc3QgaXRlcmF0b3IgPSBnZW5lcmF0b3IuY2FsbChvYmopO1xuXG4gIGxldCByZXN1bHQ7XG5cbiAgd2hpbGUgKChyZXN1bHQgPSBpdGVyYXRvci5uZXh0KCkpICYmICFyZXN1bHQuZG9uZSkge1xuICAgIGNvbnN0IHBhaXIgPSByZXN1bHQudmFsdWU7XG4gICAgZm4uY2FsbChvYmosIHBhaXJbMF0sIHBhaXJbMV0pO1xuICB9XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSByZWd1bGFyIGV4cHJlc3Npb24gYW5kIGEgc3RyaW5nLCBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiBhbGwgdGhlIG1hdGNoZXNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnRXhwIC0gVGhlIHJlZ3VsYXIgZXhwcmVzc2lvbiB0byBtYXRjaCBhZ2FpbnN0LlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gc2VhcmNoLlxuICpcbiAqIEByZXR1cm5zIHtBcnJheTxib29sZWFuPn1cbiAqL1xuY29uc3QgbWF0Y2hBbGwgPSAocmVnRXhwLCBzdHIpID0+IHtcbiAgbGV0IG1hdGNoZXM7XG4gIGNvbnN0IGFyciA9IFtdO1xuXG4gIHdoaWxlICgobWF0Y2hlcyA9IHJlZ0V4cC5leGVjKHN0cikpICE9PSBudWxsKSB7XG4gICAgYXJyLnB1c2gobWF0Y2hlcyk7XG4gIH1cblxuICByZXR1cm4gYXJyO1xufVxuXG4vKiBDaGVja2luZyBpZiB0aGUga2luZE9mVGVzdCBmdW5jdGlvbiByZXR1cm5zIHRydWUgd2hlbiBwYXNzZWQgYW4gSFRNTEZvcm1FbGVtZW50LiAqL1xuY29uc3QgaXNIVE1MRm9ybSA9IGtpbmRPZlRlc3QoJ0hUTUxGb3JtRWxlbWVudCcpO1xuXG5jb25zdCB0b0NhbWVsQ2FzZSA9IHN0ciA9PiB7XG4gIHJldHVybiBzdHIudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9cXHNdKFthLXpcXGRdKShcXHcqKS9nLFxuICAgIGZ1bmN0aW9uIHJlcGxhY2VyKG0sIHAxLCBwMikge1xuICAgICAgcmV0dXJuIHAxLnRvVXBwZXJDYXNlKCkgKyBwMjtcbiAgICB9XG4gICk7XG59O1xuXG4vKiBDcmVhdGluZyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBjaGVjayBpZiBhbiBvYmplY3QgaGFzIGEgcHJvcGVydHkuICovXG5jb25zdCBoYXNPd25Qcm9wZXJ0eSA9ICgoe2hhc093blByb3BlcnR5fSkgPT4gKG9iaiwgcHJvcCkgPT4gaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKShPYmplY3QucHJvdG90eXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFJlZ0V4cCBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzUmVnRXhwID0ga2luZE9mVGVzdCgnUmVnRXhwJyk7XG5cbmNvbnN0IHJlZHVjZURlc2NyaXB0b3JzID0gKG9iaiwgcmVkdWNlcikgPT4ge1xuICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iaik7XG4gIGNvbnN0IHJlZHVjZWREZXNjcmlwdG9ycyA9IHt9O1xuXG4gIGZvckVhY2goZGVzY3JpcHRvcnMsIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgbGV0IHJldDtcbiAgICBpZiAoKHJldCA9IHJlZHVjZXIoZGVzY3JpcHRvciwgbmFtZSwgb2JqKSkgIT09IGZhbHNlKSB7XG4gICAgICByZWR1Y2VkRGVzY3JpcHRvcnNbbmFtZV0gPSByZXQgfHwgZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5jb25zdCBpc0FzeW5jRm4gPSBraW5kT2ZUZXN0KCdBc3luY0Z1bmN0aW9uJyk7XG5cbmNvbnN0IGlzVGhlbmFibGUgPSAodGhpbmcpID0+XG4gIHRoaW5nICYmIChpc09iamVjdCh0aGluZykgfHwgaXNGdW5jdGlvbih0aGluZykpICYmIGlzRnVuY3Rpb24odGhpbmcudGhlbikgJiYgaXNGdW5jdGlvbih0aGluZy5jYXRjaCk7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXIsXG4gIGlzRm9ybURhdGEsXG4gIGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZyxcbiAgaXNOdW1iZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzUGxhaW5PYmplY3QsXG4gIGlzVW5kZWZpbmVkLFxuICBpc0RhdGUsXG4gIGlzRmlsZSxcbiAgaXNCbG9iLFxuICBpc1JlZ0V4cCxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJlYW0sXG4gIGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1R5cGVkQXJyYXksXG4gIGlzRmlsZUxpc3QsXG4gIGZvckVhY2gsXG4gIG1lcmdlLFxuICBleHRlbmQsXG4gIHRyaW0sXG4gIHN0cmlwQk9NLFxuICBpbmhlcml0cyxcbiAgdG9GbGF0T2JqZWN0LFxuICBraW5kT2YsXG4gIGtpbmRPZlRlc3QsXG4gIGVuZHNXaXRoLFxuICB0b0FycmF5LFxuICBmb3JFYWNoRW50cnksXG4gIG1hdGNoQWxsLFxuICBpc0hUTUxGb3JtLFxuICBoYXNPd25Qcm9wZXJ0eSxcbiAgaGFzT3duUHJvcDogaGFzT3duUHJvcGVydHksIC8vIGFuIGFsaWFzIHRvIGF2b2lkIEVTTGludCBuby1wcm90b3R5cGUtYnVpbHRpbnMgZGV0ZWN0aW9uXG4gIHJlZHVjZURlc2NyaXB0b3JzLFxuICBmcmVlemVNZXRob2RzLFxuICB0b09iamVjdFNldCxcbiAgdG9DYW1lbENhc2UsXG4gIG5vb3AsXG4gIHRvRmluaXRlTnVtYmVyLFxuICBmaW5kS2V5LFxuICBnbG9iYWw6IF9nbG9iYWwsXG4gIGlzQ29udGV4dERlZmluZWQsXG4gIEFMUEhBQkVULFxuICBnZW5lcmF0ZVN0cmluZyxcbiAgaXNTcGVjQ29tcGxpYW50Rm9ybSxcbiAgdG9KU09OT2JqZWN0LFxuICBpc0FzeW5jRm4sXG4gIGlzVGhlbmFibGVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbY29uZmlnXSBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXF1ZXN0XSBUaGUgcmVxdWVzdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVzcG9uc2VdIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5mdW5jdGlvbiBBeGlvc0Vycm9yKG1lc3NhZ2UsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgRXJyb3IuY2FsbCh0aGlzKTtcblxuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLnN0YWNrID0gKG5ldyBFcnJvcigpKS5zdGFjaztcbiAgfVxuXG4gIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gIHRoaXMubmFtZSA9ICdBeGlvc0Vycm9yJztcbiAgY29kZSAmJiAodGhpcy5jb2RlID0gY29kZSk7XG4gIGNvbmZpZyAmJiAodGhpcy5jb25maWcgPSBjb25maWcpO1xuICByZXF1ZXN0ICYmICh0aGlzLnJlcXVlc3QgPSByZXF1ZXN0KTtcbiAgcmVzcG9uc2UgJiYgKHRoaXMucmVzcG9uc2UgPSByZXNwb25zZSk7XG59XG5cbnV0aWxzLmluaGVyaXRzKEF4aW9zRXJyb3IsIEVycm9yLCB7XG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHV0aWxzLnRvSlNPTk9iamVjdCh0aGlzLmNvbmZpZyksXG4gICAgICBjb2RlOiB0aGlzLmNvZGUsXG4gICAgICBzdGF0dXM6IHRoaXMucmVzcG9uc2UgJiYgdGhpcy5yZXNwb25zZS5zdGF0dXMgPyB0aGlzLnJlc3BvbnNlLnN0YXR1cyA6IG51bGxcbiAgICB9O1xuICB9XG59KTtcblxuY29uc3QgcHJvdG90eXBlID0gQXhpb3NFcnJvci5wcm90b3R5cGU7XG5jb25zdCBkZXNjcmlwdG9ycyA9IHt9O1xuXG5bXG4gICdFUlJfQkFEX09QVElPTl9WQUxVRScsXG4gICdFUlJfQkFEX09QVElPTicsXG4gICdFQ09OTkFCT1JURUQnLFxuICAnRVRJTUVET1VUJyxcbiAgJ0VSUl9ORVRXT1JLJyxcbiAgJ0VSUl9GUl9UT09fTUFOWV9SRURJUkVDVFMnLFxuICAnRVJSX0RFUFJFQ0FURUQnLFxuICAnRVJSX0JBRF9SRVNQT05TRScsXG4gICdFUlJfQkFEX1JFUVVFU1QnLFxuICAnRVJSX0NBTkNFTEVEJyxcbiAgJ0VSUl9OT1RfU1VQUE9SVCcsXG4gICdFUlJfSU5WQUxJRF9VUkwnXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXS5mb3JFYWNoKGNvZGUgPT4ge1xuICBkZXNjcmlwdG9yc1tjb2RlXSA9IHt2YWx1ZTogY29kZX07XG59KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQXhpb3NFcnJvciwgZGVzY3JpcHRvcnMpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgJ2lzQXhpb3NFcnJvcicsIHt2YWx1ZTogdHJ1ZX0pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuQXhpb3NFcnJvci5mcm9tID0gKGVycm9yLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlLCBjdXN0b21Qcm9wcykgPT4ge1xuICBjb25zdCBheGlvc0Vycm9yID0gT2JqZWN0LmNyZWF0ZShwcm90b3R5cGUpO1xuXG4gIHV0aWxzLnRvRmxhdE9iamVjdChlcnJvciwgYXhpb3NFcnJvciwgZnVuY3Rpb24gZmlsdGVyKG9iaikge1xuICAgIHJldHVybiBvYmogIT09IEVycm9yLnByb3RvdHlwZTtcbiAgfSwgcHJvcCA9PiB7XG4gICAgcmV0dXJuIHByb3AgIT09ICdpc0F4aW9zRXJyb3InO1xuICB9KTtcblxuICBBeGlvc0Vycm9yLmNhbGwoYXhpb3NFcnJvciwgZXJyb3IubWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSk7XG5cbiAgYXhpb3NFcnJvci5jYXVzZSA9IGVycm9yO1xuXG4gIGF4aW9zRXJyb3IubmFtZSA9IGVycm9yLm5hbWU7XG5cbiAgY3VzdG9tUHJvcHMgJiYgT2JqZWN0LmFzc2lnbihheGlvc0Vycm9yLCBjdXN0b21Qcm9wcyk7XG5cbiAgcmV0dXJuIGF4aW9zRXJyb3I7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0Vycm9yO1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG4vLyB0ZW1wb3JhcnkgaG90Zml4IHRvIGF2b2lkIGNpcmN1bGFyIHJlZmVyZW5jZXMgdW50aWwgQXhpb3NVUkxTZWFyY2hQYXJhbXMgaXMgcmVmYWN0b3JlZFxuaW1wb3J0IFBsYXRmb3JtRm9ybURhdGEgZnJvbSAnLi4vcGxhdGZvcm0vbm9kZS9jbGFzc2VzL0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiB0aGluZyBpcyBhIGFycmF5IG9yIGpzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGhpbmcgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIHZpc2l0ZWQuXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzVmlzaXRhYmxlKHRoaW5nKSB7XG4gIHJldHVybiB1dGlscy5pc1BsYWluT2JqZWN0KHRoaW5nKSB8fCB1dGlscy5pc0FycmF5KHRoaW5nKTtcbn1cblxuLyoqXG4gKiBJdCByZW1vdmVzIHRoZSBicmFja2V0cyBmcm9tIHRoZSBlbmQgb2YgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgcGFyYW1ldGVyLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IHRoZSBrZXkgd2l0aG91dCB0aGUgYnJhY2tldHMuXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUJyYWNrZXRzKGtleSkge1xuICByZXR1cm4gdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSA/IGtleS5zbGljZSgwLCAtMikgOiBrZXk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXRoLCBhIGtleSwgYW5kIGEgYm9vbGVhbiwgYW5kIHJldHVybnMgYSBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUga2V5IG9mIHRoZSBjdXJyZW50IG9iamVjdCBiZWluZyBpdGVyYXRlZCBvdmVyLlxuICogQHBhcmFtIHtzdHJpbmd9IGRvdHMgLSBJZiB0cnVlLCB0aGUga2V5IHdpbGwgYmUgcmVuZGVyZWQgd2l0aCBkb3RzIGluc3RlYWQgb2YgYnJhY2tldHMuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIHBhdGggdG8gdGhlIGN1cnJlbnQga2V5LlxuICovXG5mdW5jdGlvbiByZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSB7XG4gIGlmICghcGF0aCkgcmV0dXJuIGtleTtcbiAgcmV0dXJuIHBhdGguY29uY2F0KGtleSkubWFwKGZ1bmN0aW9uIGVhY2godG9rZW4sIGkpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB0b2tlbiA9IHJlbW92ZUJyYWNrZXRzKHRva2VuKTtcbiAgICByZXR1cm4gIWRvdHMgJiYgaSA/ICdbJyArIHRva2VuICsgJ10nIDogdG9rZW47XG4gIH0pLmpvaW4oZG90cyA/ICcuJyA6ICcnKTtcbn1cblxuLyoqXG4gKiBJZiB0aGUgYXJyYXkgaXMgYW4gYXJyYXkgYW5kIG5vbmUgb2YgaXRzIGVsZW1lbnRzIGFyZSB2aXNpdGFibGUsIHRoZW4gaXQncyBhIGZsYXQgYXJyYXkuXG4gKlxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnIgLSBUaGUgYXJyYXkgdG8gY2hlY2tcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNGbGF0QXJyYXkoYXJyKSB7XG4gIHJldHVybiB1dGlscy5pc0FycmF5KGFycikgJiYgIWFyci5zb21lKGlzVmlzaXRhYmxlKTtcbn1cblxuY29uc3QgcHJlZGljYXRlcyA9IHV0aWxzLnRvRmxhdE9iamVjdCh1dGlscywge30sIG51bGwsIGZ1bmN0aW9uIGZpbHRlcihwcm9wKSB7XG4gIHJldHVybiAvXmlzW0EtWl0vLnRlc3QocHJvcCk7XG59KTtcblxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBvYmplY3QgdG8gRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcGFyYW0gez9PYmplY3R9IFtmb3JtRGF0YV1cbiAqIEBwYXJhbSB7P09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy52aXNpdG9yXVxuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy5tZXRhVG9rZW5zID0gdHJ1ZV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuZG90cyA9IGZhbHNlXVxuICogQHBhcmFtIHs/Qm9vbGVhbn0gW29wdGlvbnMuaW5kZXhlcyA9IGZhbHNlXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKiovXG5cbi8qKlxuICogSXQgY29udmVydHMgYW4gb2JqZWN0IGludG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxhbnksIGFueT59IG9iaiAtIFRoZSBvYmplY3QgdG8gY29udmVydCB0byBmb3JtIGRhdGEuXG4gKiBAcGFyYW0ge3N0cmluZ30gZm9ybURhdGEgLSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGFwcGVuZCB0by5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybURhdGEob2JqLCBmb3JtRGF0YSwgb3B0aW9ucykge1xuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd0YXJnZXQgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBmb3JtRGF0YSA9IGZvcm1EYXRhIHx8IG5ldyAoUGxhdGZvcm1Gb3JtRGF0YSB8fCBGb3JtRGF0YSkoKTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgb3B0aW9ucyA9IHV0aWxzLnRvRmxhdE9iamVjdChvcHRpb25zLCB7XG4gICAgbWV0YVRva2VuczogdHJ1ZSxcbiAgICBkb3RzOiBmYWxzZSxcbiAgICBpbmRleGVzOiBmYWxzZVxuICB9LCBmYWxzZSwgZnVuY3Rpb24gZGVmaW5lZChvcHRpb24sIHNvdXJjZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICAgIHJldHVybiAhdXRpbHMuaXNVbmRlZmluZWQoc291cmNlW29wdGlvbl0pO1xuICB9KTtcblxuICBjb25zdCBtZXRhVG9rZW5zID0gb3B0aW9ucy5tZXRhVG9rZW5zO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlLWJlZm9yZS1kZWZpbmVcbiAgY29uc3QgdmlzaXRvciA9IG9wdGlvbnMudmlzaXRvciB8fCBkZWZhdWx0VmlzaXRvcjtcbiAgY29uc3QgZG90cyA9IG9wdGlvbnMuZG90cztcbiAgY29uc3QgaW5kZXhlcyA9IG9wdGlvbnMuaW5kZXhlcztcbiAgY29uc3QgX0Jsb2IgPSBvcHRpb25zLkJsb2IgfHwgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnICYmIEJsb2I7XG4gIGNvbnN0IHVzZUJsb2IgPSBfQmxvYiAmJiB1dGlscy5pc1NwZWNDb21wbGlhbnRGb3JtKGZvcm1EYXRhKTtcblxuICBpZiAoIXV0aWxzLmlzRnVuY3Rpb24odmlzaXRvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2aXNpdG9yIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgZnVuY3Rpb24gY29udmVydFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSByZXR1cm4gJyc7XG5cbiAgICBpZiAodXRpbHMuaXNEYXRlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvSVNPU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgaWYgKCF1c2VCbG9iICYmIHV0aWxzLmlzQmxvYih2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdCbG9iIGlzIG5vdCBzdXBwb3J0ZWQuIFVzZSBhIEJ1ZmZlciBpbnN0ZWFkLicpO1xuICAgIH1cblxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyKHZhbHVlKSB8fCB1dGlscy5pc1R5cGVkQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdXNlQmxvYiAmJiB0eXBlb2YgQmxvYiA9PT0gJ2Z1bmN0aW9uJyA/IG5ldyBCbG9iKFt2YWx1ZV0pIDogQnVmZmVyLmZyb20odmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IHZpc2l0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICogQHBhcmFtIHtTdHJpbmd8TnVtYmVyfSBrZXlcbiAgICogQHBhcmFtIHtBcnJheTxTdHJpbmd8TnVtYmVyPn0gcGF0aFxuICAgKiBAdGhpcyB7Rm9ybURhdGF9XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSByZXR1cm4gdHJ1ZSB0byB2aXNpdCB0aGUgZWFjaCBwcm9wIG9mIHRoZSB2YWx1ZSByZWN1cnNpdmVseVxuICAgKi9cbiAgZnVuY3Rpb24gZGVmYXVsdFZpc2l0b3IodmFsdWUsIGtleSwgcGF0aCkge1xuICAgIGxldCBhcnIgPSB2YWx1ZTtcblxuICAgIGlmICh2YWx1ZSAmJiAhcGF0aCAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBpZiAodXRpbHMuZW5kc1dpdGgoa2V5LCAne30nKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gbWV0YVRva2VucyA/IGtleSA6IGtleS5zbGljZSgwLCAtMik7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICB2YWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICh1dGlscy5pc0FycmF5KHZhbHVlKSAmJiBpc0ZsYXRBcnJheSh2YWx1ZSkpIHx8XG4gICAgICAgICgodXRpbHMuaXNGaWxlTGlzdCh2YWx1ZSkgfHwgdXRpbHMuZW5kc1dpdGgoa2V5LCAnW10nKSkgJiYgKGFyciA9IHV0aWxzLnRvQXJyYXkodmFsdWUpKVxuICAgICAgICApKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBrZXkgPSByZW1vdmVCcmFja2V0cyhrZXkpO1xuXG4gICAgICAgIGFyci5mb3JFYWNoKGZ1bmN0aW9uIGVhY2goZWwsIGluZGV4KSB7XG4gICAgICAgICAgISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIGZvcm1EYXRhLmFwcGVuZChcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgICAgICAgICAgaW5kZXhlcyA9PT0gdHJ1ZSA/IHJlbmRlcktleShba2V5XSwgaW5kZXgsIGRvdHMpIDogKGluZGV4ZXMgPT09IG51bGwgPyBrZXkgOiBrZXkgKyAnW10nKSxcbiAgICAgICAgICAgIGNvbnZlcnRWYWx1ZShlbClcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc1Zpc2l0YWJsZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZvcm1EYXRhLmFwcGVuZChyZW5kZXJLZXkocGF0aCwga2V5LCBkb3RzKSwgY29udmVydFZhbHVlKHZhbHVlKSk7XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBjb25zdCBzdGFjayA9IFtdO1xuXG4gIGNvbnN0IGV4cG9zZWRIZWxwZXJzID0gT2JqZWN0LmFzc2lnbihwcmVkaWNhdGVzLCB7XG4gICAgZGVmYXVsdFZpc2l0b3IsXG4gICAgY29udmVydFZhbHVlLFxuICAgIGlzVmlzaXRhYmxlXG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGJ1aWxkKHZhbHVlLCBwYXRoKSB7XG4gICAgaWYgKHV0aWxzLmlzVW5kZWZpbmVkKHZhbHVlKSkgcmV0dXJuO1xuXG4gICAgaWYgKHN0YWNrLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xuICAgICAgdGhyb3cgRXJyb3IoJ0NpcmN1bGFyIHJlZmVyZW5jZSBkZXRlY3RlZCBpbiAnICsgcGF0aC5qb2luKCcuJykpO1xuICAgIH1cblxuICAgIHN0YWNrLnB1c2godmFsdWUpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gZWFjaChlbCwga2V5KSB7XG4gICAgICBjb25zdCByZXN1bHQgPSAhKHV0aWxzLmlzVW5kZWZpbmVkKGVsKSB8fCBlbCA9PT0gbnVsbCkgJiYgdmlzaXRvci5jYWxsKFxuICAgICAgICBmb3JtRGF0YSwgZWwsIHV0aWxzLmlzU3RyaW5nKGtleSkgPyBrZXkudHJpbSgpIDoga2V5LCBwYXRoLCBleHBvc2VkSGVscGVyc1xuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdCA9PT0gdHJ1ZSkge1xuICAgICAgICBidWlsZChlbCwgcGF0aCA/IHBhdGguY29uY2F0KGtleSkgOiBba2V5XSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzdGFjay5wb3AoKTtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNPYmplY3Qob2JqKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2RhdGEgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgfVxuXG4gIGJ1aWxkKG9iaik7XG5cbiAgcmV0dXJuIGZvcm1EYXRhO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0Zvcm1EYXRhO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuXG4vKipcbiAqIEl0IGVuY29kZXMgYSBzdHJpbmcgYnkgcmVwbGFjaW5nIGFsbCBjaGFyYWN0ZXJzIHRoYXQgYXJlIG5vdCBpbiB0aGUgdW5yZXNlcnZlZCBzZXQgd2l0aFxuICogdGhlaXIgcGVyY2VudC1lbmNvZGVkIGVxdWl2YWxlbnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0ciAtIFRoZSBzdHJpbmcgdG8gZW5jb2RlLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBlbmNvZGVkIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHN0cikge1xuICBjb25zdCBjaGFyTWFwID0ge1xuICAgICchJzogJyUyMScsXG4gICAgXCInXCI6ICclMjcnLFxuICAgICcoJzogJyUyOCcsXG4gICAgJyknOiAnJTI5JyxcbiAgICAnfic6ICclN0UnLFxuICAgICclMjAnOiAnKycsXG4gICAgJyUwMCc6ICdcXHgwMCdcbiAgfTtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHIpLnJlcGxhY2UoL1shJygpfl18JTIwfCUwMC9nLCBmdW5jdGlvbiByZXBsYWNlcihtYXRjaCkge1xuICAgIHJldHVybiBjaGFyTWFwW21hdGNoXTtcbiAgfSk7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBwYXJhbXMgb2JqZWN0IGFuZCBjb252ZXJ0cyBpdCB0byBhIEZvcm1EYXRhIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gcGFyYW1zIC0gVGhlIHBhcmFtZXRlcnMgdG8gYmUgY29udmVydGVkIHRvIGEgRm9ybURhdGEgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3Q8c3RyaW5nLCBhbnk+fSBvcHRpb25zIC0gVGhlIG9wdGlvbnMgb2JqZWN0IHBhc3NlZCB0byB0aGUgQXhpb3MgY29uc3RydWN0b3IuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykge1xuICB0aGlzLl9wYWlycyA9IFtdO1xuXG4gIHBhcmFtcyAmJiB0b0Zvcm1EYXRhKHBhcmFtcywgdGhpcywgb3B0aW9ucyk7XG59XG5cbmNvbnN0IHByb3RvdHlwZSA9IEF4aW9zVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZTtcblxucHJvdG90eXBlLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICB0aGlzLl9wYWlycy5wdXNoKFtuYW1lLCB2YWx1ZV0pO1xufTtcblxucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoZW5jb2Rlcikge1xuICBjb25zdCBfZW5jb2RlID0gZW5jb2RlciA/IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGVuY29kZXIuY2FsbCh0aGlzLCB2YWx1ZSwgZW5jb2RlKTtcbiAgfSA6IGVuY29kZTtcblxuICByZXR1cm4gdGhpcy5fcGFpcnMubWFwKGZ1bmN0aW9uIGVhY2gocGFpcikge1xuICAgIHJldHVybiBfZW5jb2RlKHBhaXJbMF0pICsgJz0nICsgX2VuY29kZShwYWlyWzFdKTtcbiAgfSwgJycpLmpvaW4oJyYnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zVVJMU2VhcmNoUGFyYW1zIGZyb20gJy4uL2hlbHBlcnMvQXhpb3NVUkxTZWFyY2hQYXJhbXMuanMnO1xuXG4vKipcbiAqIEl0IHJlcGxhY2VzIGFsbCBpbnN0YW5jZXMgb2YgdGhlIGNoYXJhY3RlcnMgYDpgLCBgJGAsIGAsYCwgYCtgLCBgW2AsIGFuZCBgXWAgd2l0aCB0aGVpclxuICogVVJJIGVuY29kZWQgY291bnRlcnBhcnRzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gYmUgZW5jb2RlZC5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTNBL2dpLCAnOicpLlxuICAgIHJlcGxhY2UoLyUyNC9nLCAnJCcpLlxuICAgIHJlcGxhY2UoLyUyQy9naSwgJywnKS5cbiAgICByZXBsYWNlKC8lMjAvZywgJysnKS5cbiAgICByZXBsYWNlKC8lNUIvZ2ksICdbJykuXG4gICAgcmVwbGFjZSgvJTVEL2dpLCAnXScpO1xufVxuXG4vKipcbiAqIEJ1aWxkIGEgVVJMIGJ5IGFwcGVuZGluZyBwYXJhbXMgdG8gdGhlIGVuZFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIGJhc2Ugb2YgdGhlIHVybCAoZS5nLiwgaHR0cDovL3d3dy5nb29nbGUuY29tKVxuICogQHBhcmFtIHtvYmplY3R9IFtwYXJhbXNdIFRoZSBwYXJhbXMgdG8gYmUgYXBwZW5kZWRcbiAqIEBwYXJhbSB7P29iamVjdH0gb3B0aW9uc1xuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBmb3JtYXR0ZWQgdXJsXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBvcHRpb25zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cbiAgXG4gIGNvbnN0IF9lbmNvZGUgPSBvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlIHx8IGVuY29kZTtcblxuICBjb25zdCBzZXJpYWxpemVGbiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5zZXJpYWxpemU7XG5cbiAgbGV0IHNlcmlhbGl6ZWRQYXJhbXM7XG5cbiAgaWYgKHNlcmlhbGl6ZUZuKSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHNlcmlhbGl6ZUZuKHBhcmFtcywgb3B0aW9ucyk7XG4gIH0gZWxzZSB7XG4gICAgc2VyaWFsaXplZFBhcmFtcyA9IHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykgP1xuICAgICAgcGFyYW1zLnRvU3RyaW5nKCkgOlxuICAgICAgbmV3IEF4aW9zVVJMU2VhcmNoUGFyYW1zKHBhcmFtcywgb3B0aW9ucykudG9TdHJpbmcoX2VuY29kZSk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIGNvbnN0IGhhc2htYXJrSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG5cbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG4gICAgdXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuICB9XG5cbiAgcmV0dXJuIHVybDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG5jbGFzcyBJbnRlcmNlcHRvck1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgbmV3IGludGVyY2VwdG9yIHRvIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdWxmaWxsZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgdGhlbmAgZm9yIGEgYFByb21pc2VgXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHJlamVjdGAgZm9yIGEgYFByb21pc2VgXG4gICAqXG4gICAqIEByZXR1cm4ge051bWJlcn0gQW4gSUQgdXNlZCB0byByZW1vdmUgaW50ZXJjZXB0b3IgbGF0ZXJcbiAgICovXG4gIHVzZShmdWxmaWxsZWQsIHJlamVjdGVkLCBvcHRpb25zKSB7XG4gICAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICAgIGZ1bGZpbGxlZCxcbiAgICAgIHJlamVjdGVkLFxuICAgICAgc3luY2hyb25vdXM6IG9wdGlvbnMgPyBvcHRpb25zLnN5bmNocm9ub3VzIDogZmFsc2UsXG4gICAgICBydW5XaGVuOiBvcHRpb25zID8gb3B0aW9ucy5ydW5XaGVuIDogbnVsbFxuICAgIH0pO1xuICAgIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGFuIGludGVyY2VwdG9yIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAgICpcbiAgICogQHJldHVybnMge0Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgaW50ZXJjZXB0b3Igd2FzIHJlbW92ZWQsIGBmYWxzZWAgb3RoZXJ3aXNlXG4gICAqL1xuICBlamVjdChpZCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgICAgdGhpcy5oYW5kbGVyc1tpZF0gPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBhbGwgaW50ZXJjZXB0b3JzIGZyb20gdGhlIHN0YWNrXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgY2xlYXIoKSB7XG4gICAgaWYgKHRoaXMuaGFuZGxlcnMpIHtcbiAgICAgIHRoaXMuaGFuZGxlcnMgPSBbXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSXRlcmF0ZSBvdmVyIGFsbCB0aGUgcmVnaXN0ZXJlZCBpbnRlcmNlcHRvcnNcbiAgICpcbiAgICogVGhpcyBtZXRob2QgaXMgcGFydGljdWxhcmx5IHVzZWZ1bCBmb3Igc2tpcHBpbmcgb3ZlciBhbnlcbiAgICogaW50ZXJjZXB0b3JzIHRoYXQgbWF5IGhhdmUgYmVjb21lIGBudWxsYCBjYWxsaW5nIGBlamVjdGAuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGludGVyY2VwdG9yXG4gICAqXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgZm9yRWFjaChmbikge1xuICAgIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgICAgaWYgKGggIT09IG51bGwpIHtcbiAgICAgICAgZm4oaCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJjZXB0b3JNYW5hZ2VyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHNpbGVudEpTT05QYXJzaW5nOiB0cnVlLFxuICBmb3JjZWRKU09OUGFyc2luZzogdHJ1ZSxcbiAgY2xhcmlmeVRpbWVvdXRFcnJvcjogZmFsc2Vcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi8uLi8uLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBVUkxTZWFyY2hQYXJhbXMgIT09ICd1bmRlZmluZWQnID8gVVJMU2VhcmNoUGFyYW1zIDogQXhpb3NVUkxTZWFyY2hQYXJhbXM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IHR5cGVvZiBGb3JtRGF0YSAhPT0gJ3VuZGVmaW5lZCcgPyBGb3JtRGF0YSA6IG51bGw7XG4iLCIndXNlIHN0cmljdCdcblxuZXhwb3J0IGRlZmF1bHQgdHlwZW9mIEJsb2IgIT09ICd1bmRlZmluZWQnID8gQmxvYiA6IG51bGxcbiIsImltcG9ydCBVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi9jbGFzc2VzL1VSTFNlYXJjaFBhcmFtcy5qcydcbmltcG9ydCBGb3JtRGF0YSBmcm9tICcuL2NsYXNzZXMvRm9ybURhdGEuanMnXG5pbXBvcnQgQmxvYiBmcm9tICcuL2NsYXNzZXMvQmxvYi5qcydcblxuZXhwb3J0IGRlZmF1bHQge1xuICBpc0Jyb3dzZXI6IHRydWUsXG4gIGNsYXNzZXM6IHtcbiAgICBVUkxTZWFyY2hQYXJhbXMsXG4gICAgRm9ybURhdGEsXG4gICAgQmxvYlxuICB9LFxuICBwcm90b2NvbHM6IFsnaHR0cCcsICdodHRwcycsICdmaWxlJywgJ2Jsb2InLCAndXJsJywgJ2RhdGEnXVxufTtcbiIsImNvbnN0IGhhc0Jyb3dzZXJFbnYgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudFxuICpcbiAqIFRoaXMgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXIsIGFuZCByZWFjdC1uYXRpdmUuXG4gKiBCb3RoIGVudmlyb25tZW50cyBzdXBwb3J0IFhNTEh0dHBSZXF1ZXN0LCBidXQgbm90IGZ1bGx5IHN0YW5kYXJkIGdsb2JhbHMuXG4gKlxuICogd2ViIHdvcmtlcnM6XG4gKiAgdHlwZW9mIHdpbmRvdyAtPiB1bmRlZmluZWRcbiAqICB0eXBlb2YgZG9jdW1lbnQgLT4gdW5kZWZpbmVkXG4gKlxuICogcmVhY3QtbmF0aXZlOlxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdSZWFjdE5hdGl2ZSdcbiAqIG5hdGl2ZXNjcmlwdFxuICogIG5hdmlnYXRvci5wcm9kdWN0IC0+ICdOYXRpdmVTY3JpcHQnIG9yICdOUydcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaGFzU3RhbmRhcmRCcm93c2VyRW52ID0gKFxuICAocHJvZHVjdCkgPT4ge1xuICAgIHJldHVybiBoYXNCcm93c2VyRW52ICYmIFsnUmVhY3ROYXRpdmUnLCAnTmF0aXZlU2NyaXB0JywgJ05TJ10uaW5kZXhPZihwcm9kdWN0KSA8IDBcbiAgfSkodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnByb2R1Y3QpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiB3ZSdyZSBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciB3ZWJXb3JrZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBBbHRob3VnaCB0aGUgYGlzU3RhbmRhcmRCcm93c2VyRW52YCBtZXRob2QgaW5kaWNhdGVzIHRoYXRcbiAqIGBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlcmAsIHRoZSBXZWJXb3JrZXIgd2lsbCBzdGlsbCBiZVxuICogZmlsdGVyZWQgb3V0IGR1ZSB0byBpdHMganVkZ21lbnQgc3RhbmRhcmRcbiAqIGB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnYC5cbiAqIFRoaXMgbGVhZHMgdG8gYSBwcm9ibGVtIHdoZW4gYXhpb3MgcG9zdCBgRm9ybURhdGFgIGluIHdlYldvcmtlclxuICovXG5jb25zdCBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYgPSAoKCkgPT4ge1xuICByZXR1cm4gKFxuICAgIHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUgJiZcbiAgICB0eXBlb2Ygc2VsZi5pbXBvcnRTY3JpcHRzID09PSAnZnVuY3Rpb24nXG4gICk7XG59KSgpO1xuXG5leHBvcnQge1xuICBoYXNCcm93c2VyRW52LFxuICBoYXNTdGFuZGFyZEJyb3dzZXJXZWJXb3JrZXJFbnYsXG4gIGhhc1N0YW5kYXJkQnJvd3NlckVudlxufVxuIiwiaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4vbm9kZS9pbmRleC5qcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tICcuL2NvbW1vbi91dGlscy5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgLi4udXRpbHMsXG4gIC4uLnBsYXRmb3JtXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBJdCB0YWtlcyBhIHN0cmluZyBsaWtlIGBmb29beF1beV1bel1gIGFuZCByZXR1cm5zIGFuIGFycmF5IGxpa2UgYFsnZm9vJywgJ3gnLCAneScsICd6J11cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKlxuICogQHJldHVybnMgQW4gYXJyYXkgb2Ygc3RyaW5ncy5cbiAqL1xuZnVuY3Rpb24gcGFyc2VQcm9wUGF0aChuYW1lKSB7XG4gIC8vIGZvb1t4XVt5XVt6XVxuICAvLyBmb28ueC55LnpcbiAgLy8gZm9vLXgteS16XG4gIC8vIGZvbyB4IHkgelxuICByZXR1cm4gdXRpbHMubWF0Y2hBbGwoL1xcdyt8XFxbKFxcdyopXS9nLCBuYW1lKS5tYXAobWF0Y2ggPT4ge1xuICAgIHJldHVybiBtYXRjaFswXSA9PT0gJ1tdJyA/ICcnIDogbWF0Y2hbMV0gfHwgbWF0Y2hbMF07XG4gIH0pO1xufVxuXG4vKipcbiAqIENvbnZlcnQgYW4gYXJyYXkgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNvbnZlcnQgdG8gYW4gb2JqZWN0LlxuICpcbiAqIEByZXR1cm5zIEFuIG9iamVjdCB3aXRoIHRoZSBzYW1lIGtleXMgYW5kIHZhbHVlcyBhcyB0aGUgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9PYmplY3QoYXJyKSB7XG4gIGNvbnN0IG9iaiA9IHt9O1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMoYXJyKTtcbiAgbGV0IGk7XG4gIGNvbnN0IGxlbiA9IGtleXMubGVuZ3RoO1xuICBsZXQga2V5O1xuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICBrZXkgPSBrZXlzW2ldO1xuICAgIG9ialtrZXldID0gYXJyW2tleV07XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIEZvcm1EYXRhIG9iamVjdCBhbmQgcmV0dXJucyBhIEphdmFTY3JpcHQgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIFRoZSBGb3JtRGF0YSBvYmplY3QgdG8gY29udmVydCB0byBKU09OLlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3Q8c3RyaW5nLCBhbnk+IHwgbnVsbH0gVGhlIGNvbnZlcnRlZCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGZvcm1EYXRhVG9KU09OKGZvcm1EYXRhKSB7XG4gIGZ1bmN0aW9uIGJ1aWxkUGF0aChwYXRoLCB2YWx1ZSwgdGFyZ2V0LCBpbmRleCkge1xuICAgIGxldCBuYW1lID0gcGF0aFtpbmRleCsrXTtcbiAgICBjb25zdCBpc051bWVyaWNLZXkgPSBOdW1iZXIuaXNGaW5pdGUoK25hbWUpO1xuICAgIGNvbnN0IGlzTGFzdCA9IGluZGV4ID49IHBhdGgubGVuZ3RoO1xuICAgIG5hbWUgPSAhbmFtZSAmJiB1dGlscy5pc0FycmF5KHRhcmdldCkgPyB0YXJnZXQubGVuZ3RoIDogbmFtZTtcblxuICAgIGlmIChpc0xhc3QpIHtcbiAgICAgIGlmICh1dGlscy5oYXNPd25Qcm9wKHRhcmdldCwgbmFtZSkpIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gW3RhcmdldFtuYW1lXSwgdmFsdWVdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0W25hbWVdID0gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAhaXNOdW1lcmljS2V5O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0W25hbWVdIHx8ICF1dGlscy5pc09iamVjdCh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCByZXN1bHQgPSBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldFtuYW1lXSwgaW5kZXgpO1xuXG4gICAgaWYgKHJlc3VsdCAmJiB1dGlscy5pc0FycmF5KHRhcmdldFtuYW1lXSkpIHtcbiAgICAgIHRhcmdldFtuYW1lXSA9IGFycmF5VG9PYmplY3QodGFyZ2V0W25hbWVdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc0Zvcm1EYXRhKGZvcm1EYXRhKSAmJiB1dGlscy5pc0Z1bmN0aW9uKGZvcm1EYXRhLmVudHJpZXMpKSB7XG4gICAgY29uc3Qgb2JqID0ge307XG5cbiAgICB1dGlscy5mb3JFYWNoRW50cnkoZm9ybURhdGEsIChuYW1lLCB2YWx1ZSkgPT4ge1xuICAgICAgYnVpbGRQYXRoKHBhcnNlUHJvcFBhdGgobmFtZSksIHZhbHVlLCBvYmosIDApO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtRGF0YVRvSlNPTjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4uL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgdHJhbnNpdGlvbmFsRGVmYXVsdHMgZnJvbSAnLi90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi4vaGVscGVycy90b0Zvcm1EYXRhLmpzJztcbmltcG9ydCB0b1VSTEVuY29kZWRGb3JtIGZyb20gJy4uL2hlbHBlcnMvdG9VUkxFbmNvZGVkRm9ybS5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IGZvcm1EYXRhVG9KU09OIGZyb20gJy4uL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuXG4vKipcbiAqIEl0IHRha2VzIGEgc3RyaW5nLCB0cmllcyB0byBwYXJzZSBpdCwgYW5kIGlmIGl0IGZhaWxzLCBpdCByZXR1cm5zIHRoZSBzdHJpbmdpZmllZCB2ZXJzaW9uXG4gKiBvZiB0aGUgaW5wdXRcbiAqXG4gKiBAcGFyYW0ge2FueX0gcmF3VmFsdWUgLSBUaGUgdmFsdWUgdG8gYmUgc3RyaW5naWZpZWQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwYXJzZXIgLSBBIGZ1bmN0aW9uIHRoYXQgcGFyc2VzIGEgc3RyaW5nIGludG8gYSBKYXZhU2NyaXB0IG9iamVjdC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVuY29kZXIgLSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSB2YWx1ZSBhbmQgcmV0dXJucyBhIHN0cmluZy5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBBIHN0cmluZ2lmaWVkIHZlcnNpb24gb2YgdGhlIHJhd1ZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnlTYWZlbHkocmF3VmFsdWUsIHBhcnNlciwgZW5jb2Rlcikge1xuICBpZiAodXRpbHMuaXNTdHJpbmcocmF3VmFsdWUpKSB7XG4gICAgdHJ5IHtcbiAgICAgIChwYXJzZXIgfHwgSlNPTi5wYXJzZSkocmF3VmFsdWUpO1xuICAgICAgcmV0dXJuIHV0aWxzLnRyaW0ocmF3VmFsdWUpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGlmIChlLm5hbWUgIT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgdGhyb3cgZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gKGVuY29kZXIgfHwgSlNPTi5zdHJpbmdpZnkpKHJhd1ZhbHVlKTtcbn1cblxuY29uc3QgZGVmYXVsdHMgPSB7XG5cbiAgdHJhbnNpdGlvbmFsOiB0cmFuc2l0aW9uYWxEZWZhdWx0cyxcblxuICBhZGFwdGVyOiBbJ3hocicsICdodHRwJ10sXG5cbiAgdHJhbnNmb3JtUmVxdWVzdDogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlcXVlc3QoZGF0YSwgaGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXRDb250ZW50VHlwZSgpIHx8ICcnO1xuICAgIGNvbnN0IGhhc0pTT05Db250ZW50VHlwZSA9IGNvbnRlbnRUeXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSA+IC0xO1xuICAgIGNvbnN0IGlzT2JqZWN0UGF5bG9hZCA9IHV0aWxzLmlzT2JqZWN0KGRhdGEpO1xuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCAmJiB1dGlscy5pc0hUTUxGb3JtKGRhdGEpKSB7XG4gICAgICBkYXRhID0gbmV3IEZvcm1EYXRhKGRhdGEpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzRm9ybURhdGEgPSB1dGlscy5pc0Zvcm1EYXRhKGRhdGEpO1xuXG4gICAgaWYgKGlzRm9ybURhdGEpIHtcbiAgICAgIGlmICghaGFzSlNPTkNvbnRlbnRUeXBlKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc0pTT05Db250ZW50VHlwZSA/IEpTT04uc3RyaW5naWZ5KGZvcm1EYXRhVG9KU09OKGRhdGEpKSA6IGRhdGE7XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCcsIGZhbHNlKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgbGV0IGlzRmlsZUxpc3Q7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkKSB7XG4gICAgICBpZiAoY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCB0aGlzLmZvcm1TZXJpYWxpemVyKS50b1N0cmluZygpO1xuICAgICAgfVxuXG4gICAgICBpZiAoKGlzRmlsZUxpc3QgPSB1dGlscy5pc0ZpbGVMaXN0KGRhdGEpKSB8fCBjb250ZW50VHlwZS5pbmRleE9mKCdtdWx0aXBhcnQvZm9ybS1kYXRhJykgPiAtMSkge1xuICAgICAgICBjb25zdCBfRm9ybURhdGEgPSB0aGlzLmVudiAmJiB0aGlzLmVudi5Gb3JtRGF0YTtcblxuICAgICAgICByZXR1cm4gdG9Gb3JtRGF0YShcbiAgICAgICAgICBpc0ZpbGVMaXN0ID8geydmaWxlc1tdJzogZGF0YX0gOiBkYXRhLFxuICAgICAgICAgIF9Gb3JtRGF0YSAmJiBuZXcgX0Zvcm1EYXRhKCksXG4gICAgICAgICAgdGhpcy5mb3JtU2VyaWFsaXplclxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc09iamVjdFBheWxvYWQgfHwgaGFzSlNPTkNvbnRlbnRUeXBlICkge1xuICAgICAgaGVhZGVycy5zZXRDb250ZW50VHlwZSgnYXBwbGljYXRpb24vanNvbicsIGZhbHNlKTtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlTYWZlbHkoZGF0YSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIGNvbnN0IHRyYW5zaXRpb25hbCA9IHRoaXMudHJhbnNpdGlvbmFsIHx8IGRlZmF1bHRzLnRyYW5zaXRpb25hbDtcbiAgICBjb25zdCBmb3JjZWRKU09OUGFyc2luZyA9IHRyYW5zaXRpb25hbCAmJiB0cmFuc2l0aW9uYWwuZm9yY2VkSlNPTlBhcnNpbmc7XG4gICAgY29uc3QgSlNPTlJlcXVlc3RlZCA9IHRoaXMucmVzcG9uc2VUeXBlID09PSAnanNvbic7XG5cbiAgICBpZiAoZGF0YSAmJiB1dGlscy5pc1N0cmluZyhkYXRhKSAmJiAoKGZvcmNlZEpTT05QYXJzaW5nICYmICF0aGlzLnJlc3BvbnNlVHlwZSkgfHwgSlNPTlJlcXVlc3RlZCkpIHtcbiAgICAgIGNvbnN0IHNpbGVudEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5zaWxlbnRKU09OUGFyc2luZztcbiAgICAgIGNvbnN0IHN0cmljdEpTT05QYXJzaW5nID0gIXNpbGVudEpTT05QYXJzaW5nICYmIEpTT05SZXF1ZXN0ZWQ7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoc3RyaWN0SlNPTlBhcnNpbmcpIHtcbiAgICAgICAgICBpZiAoZS5uYW1lID09PSAnU3ludGF4RXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBBeGlvc0Vycm9yLmZyb20oZSwgQXhpb3NFcnJvci5FUlJfQkFEX1JFU1BPTlNFLCB0aGlzLCBudWxsLCB0aGlzLnJlc3BvbnNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICAvKipcbiAgICogQSB0aW1lb3V0IGluIG1pbGxpc2Vjb25kcyB0byBhYm9ydCBhIHJlcXVlc3QuIElmIHNldCB0byAwIChkZWZhdWx0KSBhXG4gICAqIHRpbWVvdXQgaXMgbm90IGNyZWF0ZWQuXG4gICAqL1xuICB0aW1lb3V0OiAwLFxuXG4gIHhzcmZDb29raWVOYW1lOiAnWFNSRi1UT0tFTicsXG4gIHhzcmZIZWFkZXJOYW1lOiAnWC1YU1JGLVRPS0VOJyxcblxuICBtYXhDb250ZW50TGVuZ3RoOiAtMSxcbiAgbWF4Qm9keUxlbmd0aDogLTEsXG5cbiAgZW52OiB7XG4gICAgRm9ybURhdGE6IHBsYXRmb3JtLmNsYXNzZXMuRm9ybURhdGEsXG4gICAgQmxvYjogcGxhdGZvcm0uY2xhc3Nlcy5CbG9iXG4gIH0sXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfSxcblxuICBoZWFkZXJzOiB7XG4gICAgY29tbW9uOiB7XG4gICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKicsXG4gICAgICAnQ29udGVudC1UeXBlJzogdW5kZWZpbmVkXG4gICAgfVxuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIChtZXRob2QpID0+IHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLy8gUmF3QXhpb3NIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xuY29uc3QgaWdub3JlRHVwbGljYXRlT2YgPSB1dGlscy50b09iamVjdFNldChbXG4gICdhZ2UnLCAnYXV0aG9yaXphdGlvbicsICdjb250ZW50LWxlbmd0aCcsICdjb250ZW50LXR5cGUnLCAnZXRhZycsXG4gICdleHBpcmVzJywgJ2Zyb20nLCAnaG9zdCcsICdpZi1tb2RpZmllZC1zaW5jZScsICdpZi11bm1vZGlmaWVkLXNpbmNlJyxcbiAgJ2xhc3QtbW9kaWZpZWQnLCAnbG9jYXRpb24nLCAnbWF4LWZvcndhcmRzJywgJ3Byb3h5LWF1dGhvcml6YXRpb24nLFxuICAncmVmZXJlcicsICdyZXRyeS1hZnRlcicsICd1c2VyLWFnZW50J1xuXSk7XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSByYXdIZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBIZWFkZXJzIHBhcnNlZCBpbnRvIGFuIG9iamVjdFxuICovXG5leHBvcnQgZGVmYXVsdCByYXdIZWFkZXJzID0+IHtcbiAgY29uc3QgcGFyc2VkID0ge307XG4gIGxldCBrZXk7XG4gIGxldCB2YWw7XG4gIGxldCBpO1xuXG4gIHJhd0hlYWRlcnMgJiYgcmF3SGVhZGVycy5zcGxpdCgnXFxuJykuZm9yRWFjaChmdW5jdGlvbiBwYXJzZXIobGluZSkge1xuICAgIGkgPSBsaW5lLmluZGV4T2YoJzonKTtcbiAgICBrZXkgPSBsaW5lLnN1YnN0cmluZygwLCBpKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbiAgICB2YWwgPSBsaW5lLnN1YnN0cmluZyhpICsgMSkudHJpbSgpO1xuXG4gICAgaWYgKCFrZXkgfHwgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mW2tleV0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICBpZiAocGFyc2VkW2tleV0pIHtcbiAgICAgICAgcGFyc2VkW2tleV0ucHVzaCh2YWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyc2VkW2tleV0gPSBbdmFsXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGFyc2VkW2tleV0gPSBwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldICsgJywgJyArIHZhbCA6IHZhbDtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBwYXJzZWQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IHBhcnNlSGVhZGVycyBmcm9tICcuLi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyc7XG5cbmNvbnN0ICRpbnRlcm5hbHMgPSBTeW1ib2woJ2ludGVybmFscycpO1xuXG5mdW5jdGlvbiBub3JtYWxpemVIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIgJiYgU3RyaW5nKGhlYWRlcikudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVZhbHVlKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiB1dGlscy5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcChub3JtYWxpemVWYWx1ZSkgOiBTdHJpbmcodmFsdWUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZVRva2VucyhzdHIpIHtcbiAgY29uc3QgdG9rZW5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgdG9rZW5zUkUgPSAvKFteXFxzLDs9XSspXFxzKig/Oj1cXHMqKFteLDtdKykpPy9nO1xuICBsZXQgbWF0Y2g7XG5cbiAgd2hpbGUgKChtYXRjaCA9IHRva2Vuc1JFLmV4ZWMoc3RyKSkpIHtcbiAgICB0b2tlbnNbbWF0Y2hbMV1dID0gbWF0Y2hbMl07XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5jb25zdCBpc1ZhbGlkSGVhZGVyTmFtZSA9IChzdHIpID0+IC9eWy1fYS16QS1aMC05XmB8fiwhIyQlJicqKy5dKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG4vLyByZXNlcnZlZCBuYW1lcyBob3RmaXhcbnV0aWxzLnJlZHVjZURlc2NyaXB0b3JzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUsICh7dmFsdWV9LCBrZXkpID0+IHtcbiAgbGV0IG1hcHBlZCA9IGtleVswXS50b1VwcGVyQ2FzZSgpICsga2V5LnNsaWNlKDEpOyAvLyBtYXAgYHNldGAgPT4gYFNldGBcbiAgcmV0dXJuIHtcbiAgICBnZXQ6ICgpID0+IHZhbHVlLFxuICAgIHNldChoZWFkZXJWYWx1ZSkge1xuICAgICAgdGhpc1ttYXBwZWRdID0gaGVhZGVyVmFsdWU7XG4gICAgfVxuICB9XG59KTtcblxudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBBeGlvc0Vycm9yIGZyb20gJy4vQXhpb3NFcnJvci5qcyc7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKlxuICogQHJldHVybnMge29iamVjdH0gVGhlIHJlc3BvbnNlLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSkge1xuICBjb25zdCB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgaWYgKCFyZXNwb25zZS5zdGF0dXMgfHwgIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgW0F4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0VdW01hdGguZmxvb3IocmVzcG9uc2Uuc3RhdHVzIC8gMTAwKSAtIDRdLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgcmVzcG9uc2UucmVxdWVzdCxcbiAgICAgIHJlc3BvbnNlXG4gICAgKSk7XG4gIH1cbn1cbiIsImltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbiAgLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIHtcbiAgICB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgIGNvbnN0IGNvb2tpZSA9IFtuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKV07XG5cbiAgICAgIHV0aWxzLmlzTnVtYmVyKGV4cGlyZXMpICYmIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcblxuICAgICAgdXRpbHMuaXNTdHJpbmcocGF0aCkgJiYgY29va2llLnB1c2goJ3BhdGg9JyArIHBhdGgpO1xuXG4gICAgICB1dGlscy5pc1N0cmluZyhkb21haW4pICYmIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG5cbiAgICAgIHNlY3VyZSA9PT0gdHJ1ZSAmJiBjb29raWUucHVzaCgnc2VjdXJlJyk7XG5cbiAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNvb2tpZS5qb2luKCc7ICcpO1xuICAgIH0sXG5cbiAgICByZWFkKG5hbWUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgIHJldHVybiAobWF0Y2ggPyBkZWNvZGVVUklDb21wb25lbnQobWF0Y2hbM10pIDogbnVsbCk7XG4gICAgfSxcblxuICAgIHJlbW92ZShuYW1lKSB7XG4gICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgIH1cbiAgfVxuXG4gIDpcblxuICAvLyBOb24tc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIHtcbiAgICB3cml0ZSgpIHt9LFxuICAgIHJlYWQoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZSgpIHt9XG4gIH07XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGVcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBVUkwgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGQrXFwtLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21iaW5lVVJMcyhiYXNlVVJMLCByZWxhdGl2ZVVSTCkge1xuICByZXR1cm4gcmVsYXRpdmVVUkxcbiAgICA/IGJhc2VVUkwucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyByZWxhdGl2ZVVSTC5yZXBsYWNlKC9eXFwvKy8sICcnKVxuICAgIDogYmFzZVVSTDtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5oYXNTdGFuZGFyZEJyb3dzZXJFbnYgP1xuXG4vLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3Rcbi8vIHdoZXRoZXIgdGhlIHJlcXVlc3QgVVJMIGlzIG9mIHRoZSBzYW1lIG9yaWdpbiBhcyBjdXJyZW50IGxvY2F0aW9uLlxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIGNvbnN0IG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIGNvbnN0IHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIGxldCBvcmlnaW5VUkw7XG5cbiAgICAvKipcbiAgICAqIFBhcnNlIGEgVVJMIHRvIGRpc2NvdmVyIGl0cyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFyc2VQcm90b2NvbCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSAvXihbLStcXHddezEsMjV9KSg6P1xcL1xcL3w6KS8uZXhlYyh1cmwpO1xuICByZXR1cm4gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2FsY3VsYXRlIGRhdGEgbWF4UmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IFtzYW1wbGVzQ291bnQ9IDEwXVxuICogQHBhcmFtIHtOdW1iZXJ9IFttaW49IDEwMDBdXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIHNwZWVkb21ldGVyKHNhbXBsZXNDb3VudCwgbWluKSB7XG4gIHNhbXBsZXNDb3VudCA9IHNhbXBsZXNDb3VudCB8fCAxMDtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgQXJyYXkoc2FtcGxlc0NvdW50KTtcbiAgY29uc3QgdGltZXN0YW1wcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBsZXQgaGVhZCA9IDA7XG4gIGxldCB0YWlsID0gMDtcbiAgbGV0IGZpcnN0U2FtcGxlVFM7XG5cbiAgbWluID0gbWluICE9PSB1bmRlZmluZWQgPyBtaW4gOiAxMDAwO1xuXG4gIHJldHVybiBmdW5jdGlvbiBwdXNoKGNodW5rTGVuZ3RoKSB7XG4gICAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKTtcblxuICAgIGNvbnN0IHN0YXJ0ZWRBdCA9IHRpbWVzdGFtcHNbdGFpbF07XG5cbiAgICBpZiAoIWZpcnN0U2FtcGxlVFMpIHtcbiAgICAgIGZpcnN0U2FtcGxlVFMgPSBub3c7XG4gICAgfVxuXG4gICAgYnl0ZXNbaGVhZF0gPSBjaHVua0xlbmd0aDtcbiAgICB0aW1lc3RhbXBzW2hlYWRdID0gbm93O1xuXG4gICAgbGV0IGkgPSB0YWlsO1xuICAgIGxldCBieXRlc0NvdW50ID0gMDtcblxuICAgIHdoaWxlIChpICE9PSBoZWFkKSB7XG4gICAgICBieXRlc0NvdW50ICs9IGJ5dGVzW2krK107XG4gICAgICBpID0gaSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBoZWFkID0gKGhlYWQgKyAxKSAlIHNhbXBsZXNDb3VudDtcblxuICAgIGlmIChoZWFkID09PSB0YWlsKSB7XG4gICAgICB0YWlsID0gKHRhaWwgKyAxKSAlIHNhbXBsZXNDb3VudDtcbiAgICB9XG5cbiAgICBpZiAobm93IC0gZmlyc3RTYW1wbGVUUyA8IG1pbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBhc3NlZCA9IHN0YXJ0ZWRBdCAmJiBub3cgLSBzdGFydGVkQXQ7XG5cbiAgICByZXR1cm4gcGFzc2VkID8gTWF0aC5yb3VuZChieXRlc0NvdW50ICogMTAwMCAvIHBhc3NlZCkgOiB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNwZWVkb21ldGVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgc2V0dGxlIGZyb20gJy4vLi4vY29yZS9zZXR0bGUuanMnO1xuaW1wb3J0IGNvb2tpZXMgZnJvbSAnLi8uLi9oZWxwZXJzL2Nvb2tpZXMuanMnO1xuaW1wb3J0IGJ1aWxkVVJMIGZyb20gJy4vLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgYnVpbGRGdWxsUGF0aCBmcm9tICcuLi9jb3JlL2J1aWxkRnVsbFBhdGguanMnO1xuaW1wb3J0IGlzVVJMU2FtZU9yaWdpbiBmcm9tICcuLy4uL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzJztcbmltcG9ydCB0cmFuc2l0aW9uYWxEZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy90cmFuc2l0aW9uYWwuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBwYXJzZVByb3RvY29sIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VQcm90b2NvbC5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgc3BlZWRvbWV0ZXIgZnJvbSAnLi4vaGVscGVycy9zcGVlZG9tZXRlci5qcyc7XG5cbmZ1bmN0aW9uIHByb2dyZXNzRXZlbnRSZWR1Y2VyKGxpc3RlbmVyLCBpc0Rvd25sb2FkU3RyZWFtKSB7XG4gIGxldCBieXRlc05vdGlmaWVkID0gMDtcbiAgY29uc3QgX3NwZWVkb21ldGVyID0gc3BlZWRvbWV0ZXIoNTAsIDI1MCk7XG5cbiAgcmV0dXJuIGUgPT4ge1xuICAgIGNvbnN0IGxvYWRlZCA9IGUubG9hZGVkO1xuICAgIGNvbnN0IHRvdGFsID0gZS5sZW5ndGhDb21wdXRhYmxlID8gZS50b3RhbCA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBwcm9ncmVzc0J5dGVzID0gbG9hZGVkIC0gYnl0ZXNOb3RpZmllZDtcbiAgICBjb25zdCByYXRlID0gX3NwZWVkb21ldGVyKHByb2dyZXNzQnl0ZXMpO1xuICAgIGNvbnN0IGluUmFuZ2UgPSBsb2FkZWQgPD0gdG90YWw7XG5cbiAgICBieXRlc05vdGlmaWVkID0gbG9hZGVkO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIGxvYWRlZCxcbiAgICAgIHRvdGFsLFxuICAgICAgcHJvZ3Jlc3M6IHRvdGFsID8gKGxvYWRlZCAvIHRvdGFsKSA6IHVuZGVmaW5lZCxcbiAgICAgIGJ5dGVzOiBwcm9ncmVzc0J5dGVzLFxuICAgICAgcmF0ZTogcmF0ZSA/IHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBlc3RpbWF0ZWQ6IHJhdGUgJiYgdG90YWwgJiYgaW5SYW5nZSA/ICh0b3RhbCAtIGxvYWRlZCkgLyByYXRlIDogdW5kZWZpbmVkLFxuICAgICAgZXZlbnQ6IGVcbiAgICB9O1xuXG4gICAgZGF0YVtpc0Rvd25sb2FkU3RyZWFtID8gJ2Rvd25sb2FkJyA6ICd1cGxvYWQnXSA9IHRydWU7XG5cbiAgICBsaXN0ZW5lcihkYXRhKTtcbiAgfTtcbn1cblxuY29uc3QgaXNYSFJBZGFwdGVyU3VwcG9ydGVkID0gdHlwZW9mIFhNTEh0dHBSZXF1ZXN0ICE9PSAndW5kZWZpbmVkJztcblxuZXhwb3J0IGRlZmF1bHQgaXNYSFJBZGFwdGVyU3VwcG9ydGVkICYmIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIGRpc3BhdGNoWGhyUmVxdWVzdChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgcmVxdWVzdERhdGEgPSBjb25maWcuZGF0YTtcbiAgICBjb25zdCByZXF1ZXN0SGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbmZpZy5oZWFkZXJzKS5ub3JtYWxpemUoKTtcbiAgICBsZXQge3Jlc3BvbnNlVHlwZSwgd2l0aFhTUkZUb2tlbn0gPSBjb25maWc7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGNvbnRlbnRUeXBlO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52IHx8IHBsYXRmb3JtLmhhc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikge1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShmYWxzZSk7IC8vIExldCB0aGUgYnJvd3NlciBzZXQgaXRcbiAgICAgIH0gZWxzZSBpZiAoKGNvbnRlbnRUeXBlID0gcmVxdWVzdEhlYWRlcnMuZ2V0Q29udGVudFR5cGUoKSkgIT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGZpeCBzZW1pY29sb24gZHVwbGljYXRpb24gaXNzdWUgZm9yIFJlYWN0TmF0aXZlIEZvcm1EYXRhIGltcGxlbWVudGF0aW9uXG4gICAgICAgIGNvbnN0IFt0eXBlLCAuLi50b2tlbnNdID0gY29udGVudFR5cGUgPyBjb250ZW50VHlwZS5zcGxpdCgnOycpLm1hcCh0b2tlbiA9PiB0b2tlbi50cmltKCkpLmZpbHRlcihCb29sZWFuKSA6IFtdO1xuICAgICAgICByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShbdHlwZSB8fCAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsIC4uLnRva2Vuc10uam9pbignOyAnKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIGNvbnN0IHVzZXJuYW1lID0gY29uZmlnLmF1dGgudXNlcm5hbWUgfHwgJyc7XG4gICAgICBjb25zdCBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkID8gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGNvbmZpZy5hdXRoLnBhc3N3b3JkKSkgOiAnJztcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKSk7XG4gICAgfVxuXG4gICAgY29uc3QgZnVsbFBhdGggPSBidWlsZEZ1bGxQYXRoKGNvbmZpZy5iYXNlVVJMLCBjb25maWcudXJsKTtcblxuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIGZ1bmN0aW9uIG9ubG9hZGVuZCgpIHtcbiAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAvLyBQcmVwYXJlIHRoZSByZXNwb25zZVxuICAgICAgY29uc3QgcmVzcG9uc2VIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oXG4gICAgICAgICdnZXRBbGxSZXNwb25zZUhlYWRlcnMnIGluIHJlcXVlc3QgJiYgcmVxdWVzdC5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuICAgICAgKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlRGF0YSA9ICFyZXNwb25zZVR5cGUgfHwgcmVzcG9uc2VUeXBlID09PSAndGV4dCcgfHwgcmVzcG9uc2VUeXBlID09PSAnanNvbicgP1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVGV4dCA6IHJlcXVlc3QucmVzcG9uc2U7XG4gICAgICBjb25zdCByZXNwb25zZSA9IHtcbiAgICAgICAgZGF0YTogcmVzcG9uc2VEYXRhLFxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzLFxuICAgICAgICBzdGF0dXNUZXh0OiByZXF1ZXN0LnN0YXR1c1RleHQsXG4gICAgICAgIGhlYWRlcnM6IHJlc3BvbnNlSGVhZGVycyxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUoZnVuY3Rpb24gX3Jlc29sdmUodmFsdWUpIHtcbiAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIGRvbmUoKTtcbiAgICAgIH0sIGZ1bmN0aW9uIF9yZWplY3QoZXJyKSB7XG4gICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIGlmICgnb25sb2FkZW5kJyBpbiByZXF1ZXN0KSB7XG4gICAgICAvLyBVc2Ugb25sb2FkZW5kIGlmIGF2YWlsYWJsZVxuICAgICAgcmVxdWVzdC5vbmxvYWRlbmQgPSBvbmxvYWRlbmQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGUgdG8gZW11bGF0ZSBvbmxvYWRlbmRcbiAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlTG9hZCgpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0IHx8IHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuICAgICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgICAvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuICAgICAgICAvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG4gICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWFkeXN0YXRlIGhhbmRsZXIgaXMgY2FsbGluZyBiZWZvcmUgb25lcnJvciBvciBvbnRpbWVvdXQgaGFuZGxlcnMsXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBjYWxsIG9ubG9hZGVuZCBvbiB0aGUgbmV4dCAndGljaydcbiAgICAgICAgc2V0VGltZW91dChvbmxvYWRlbmQpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgYnJvd3NlciByZXF1ZXN0IGNhbmNlbGxhdGlvbiAoYXMgb3Bwb3NlZCB0byBhIG1hbnVhbCBjYW5jZWxsYXRpb24pXG4gICAgcmVxdWVzdC5vbmFib3J0ID0gZnVuY3Rpb24gaGFuZGxlQWJvcnQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ1JlcXVlc3QgYWJvcnRlZCcsIEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSBsb3cgbGV2ZWwgbmV0d29yayBlcnJvcnNcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcigpIHtcbiAgICAgIC8vIFJlYWwgZXJyb3JzIGFyZSBoaWRkZW4gZnJvbSB1cyBieSB0aGUgYnJvd3NlclxuICAgICAgLy8gb25lcnJvciBzaG91bGQgb25seSBmaXJlIGlmIGl0J3MgYSBuZXR3b3JrIGVycm9yXG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoJ05ldHdvcmsgRXJyb3InLCBBeGlvc0Vycm9yLkVSUl9ORVRXT1JLLCBjb25maWcsIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEhhbmRsZSB0aW1lb3V0XG4gICAgcmVxdWVzdC5vbnRpbWVvdXQgPSBmdW5jdGlvbiBoYW5kbGVUaW1lb3V0KCkge1xuICAgICAgbGV0IHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dCA/ICd0aW1lb3V0IG9mICcgKyBjb25maWcudGltZW91dCArICdtcyBleGNlZWRlZCcgOiAndGltZW91dCBleGNlZWRlZCc7XG4gICAgICBjb25zdCB0cmFuc2l0aW9uYWwgPSBjb25maWcudHJhbnNpdGlvbmFsIHx8IHRyYW5zaXRpb25hbERlZmF1bHRzO1xuICAgICAgaWYgKGNvbmZpZy50aW1lb3V0RXJyb3JNZXNzYWdlKSB7XG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UgPSBjb25maWcudGltZW91dEVycm9yTWVzc2FnZTtcbiAgICAgIH1cbiAgICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgdGltZW91dEVycm9yTWVzc2FnZSxcbiAgICAgICAgdHJhbnNpdGlvbmFsLmNsYXJpZnlUaW1lb3V0RXJyb3IgPyBBeGlvc0Vycm9yLkVUSU1FRE9VVCA6IEF4aW9zRXJyb3IuRUNPTk5BQk9SVEVELFxuICAgICAgICBjb25maWcsXG4gICAgICAgIHJlcXVlc3QpKTtcblxuICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgfTtcblxuICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgIC8vIFRoaXMgaXMgb25seSBkb25lIGlmIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50LlxuICAgIC8vIFNwZWNpZmljYWxseSBub3QgaWYgd2UncmUgaW4gYSB3ZWIgd29ya2VyLCBvciByZWFjdC1uYXRpdmUuXG4gICAgaWYocGxhdGZvcm0uaGFzU3RhbmRhcmRCcm93c2VyRW52KSB7XG4gICAgICB3aXRoWFNSRlRva2VuICYmIHV0aWxzLmlzRnVuY3Rpb24od2l0aFhTUkZUb2tlbikgJiYgKHdpdGhYU1JGVG9rZW4gPSB3aXRoWFNSRlRva2VuKGNvbmZpZykpO1xuXG4gICAgICBpZiAod2l0aFhTUkZUb2tlbiB8fCAod2l0aFhTUkZUb2tlbiAhPT0gZmFsc2UgJiYgaXNVUkxTYW1lT3JpZ2luKGZ1bGxQYXRoKSkpIHtcbiAgICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICAgIGNvbnN0IHhzcmZWYWx1ZSA9IGNvbmZpZy54c3JmSGVhZGVyTmFtZSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSk7XG5cbiAgICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICAgIHJlcXVlc3RIZWFkZXJzLnNldChjb25maWcueHNyZkhlYWRlck5hbWUsIHhzcmZWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZiAoZm4pIHtcbiAgICB0cnkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZuLCAnbmFtZScsIHt2YWx1ZX0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICdhZGFwdGVyTmFtZScsIHt2YWx1ZX0pO1xuICB9XG59KTtcblxuY29uc3QgcmVuZGVyUmVhc29uID0gKHJlYXNvbikgPT4gYC0gJHtyZWFzb259YDtcblxuY29uc3QgaXNSZXNvbHZlZEhhbmRsZSA9IChhZGFwdGVyKSA9PiB1dGlscy5pc0Z1bmN0aW9uKGFkYXB0ZXIpIHx8IGFkYXB0ZXIgPT09IG51bGwgfHwgYWRhcHRlciA9PT0gZmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZ2V0QWRhcHRlcjogKGFkYXB0ZXJzKSA9PiB7XG4gICAgYWRhcHRlcnMgPSB1dGlscy5pc0FycmF5KGFkYXB0ZXJzKSA/IGFkYXB0ZXJzIDogW2FkYXB0ZXJzXTtcblxuICAgIGNvbnN0IHtsZW5ndGh9ID0gYWRhcHRlcnM7XG4gICAgbGV0IG5hbWVPckFkYXB0ZXI7XG4gICAgbGV0IGFkYXB0ZXI7XG5cbiAgICBjb25zdCByZWplY3RlZFJlYXNvbnMgPSB7fTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIG5hbWVPckFkYXB0ZXIgPSBhZGFwdGVyc1tpXTtcbiAgICAgIGxldCBpZDtcblxuICAgICAgYWRhcHRlciA9IG5hbWVPckFkYXB0ZXI7XG5cbiAgICAgIGlmICghaXNSZXNvbHZlZEhhbmRsZShuYW1lT3JBZGFwdGVyKSkge1xuICAgICAgICBhZGFwdGVyID0ga25vd25BZGFwdGVyc1soaWQgPSBTdHJpbmcobmFtZU9yQWRhcHRlcikpLnRvTG93ZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChhZGFwdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihgVW5rbm93biBhZGFwdGVyICcke2lkfSdgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoYWRhcHRlcikge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgcmVqZWN0ZWRSZWFzb25zW2lkIHx8ICcjJyArIGldID0gYWRhcHRlcjtcbiAgICB9XG5cbiAgICBpZiAoIWFkYXB0ZXIpIHtcblxuICAgICAgY29uc3QgcmVhc29ucyA9IE9iamVjdC5lbnRyaWVzKHJlamVjdGVkUmVhc29ucylcbiAgICAgICAgLm1hcCgoW2lkLCBzdGF0ZV0pID0+IGBhZGFwdGVyICR7aWR9IGAgK1xuICAgICAgICAgIChzdGF0ZSA9PT0gZmFsc2UgPyAnaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnQnIDogJ2lzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkJylcbiAgICAgICAgKTtcblxuICAgICAgbGV0IHMgPSBsZW5ndGggP1xuICAgICAgICAocmVhc29ucy5sZW5ndGggPiAxID8gJ3NpbmNlIDpcXG4nICsgcmVhc29ucy5tYXAocmVuZGVyUmVhc29uKS5qb2luKCdcXG4nKSA6ICcgJyArIHJlbmRlclJlYXNvbihyZWFzb25zWzBdKSkgOlxuICAgICAgICAnYXMgbm8gYWRhcHRlciBzcGVjaWZpZWQnO1xuXG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIG5vIHN1aXRhYmxlIGFkYXB0ZXIgdG8gZGlzcGF0Y2ggdGhlIHJlcXVlc3QgYCArIHMsXG4gICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdHJhbnNmb3JtRGF0YSBmcm9tICcuL3RyYW5zZm9ybURhdGEuanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4uL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi4vZGVmYXVsdHMvaW5kZXguanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuLi9jb3JlL0F4aW9zSGVhZGVycy5qcyc7XG5pbXBvcnQgYWRhcHRlcnMgZnJvbSBcIi4uL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzXCI7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGVkRXJyb3JgIGlmIGNhbmNlbGxhdGlvbiBoYXMgYmVlbiByZXF1ZXN0ZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cblxuICBpZiAoY29uZmlnLnNpZ25hbCAmJiBjb25maWcuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICB0aHJvdyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcpO1xuICB9XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0IHRvIHRoZSBzZXJ2ZXIgdXNpbmcgdGhlIGNvbmZpZ3VyZWQgYWRhcHRlci5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gY29uZmlnIFRoZSBjb25maWcgdGhhdCBpcyB0byBiZSB1c2VkIGZvciB0aGUgcmVxdWVzdFxuICpcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShjb25maWcuaGVhZGVycyk7XG5cbiAgLy8gVHJhbnNmb3JtIHJlcXVlc3QgZGF0YVxuICBjb25maWcuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICBjb25maWcsXG4gICAgY29uZmlnLnRyYW5zZm9ybVJlcXVlc3RcbiAgKTtcblxuICBpZiAoWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLmluZGV4T2YoY29uZmlnLm1ldGhvZCkgIT09IC0xKSB7XG4gICAgY29uZmlnLmhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsIGZhbHNlKTtcbiAgfVxuXG4gIGNvbnN0IGFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyKGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXIpO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YS5jYWxsKFxuICAgICAgY29uZmlnLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgcmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlc3BvbnNlLmhlYWRlcnMpO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgICAgICBjb25maWcsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZVxuICAgICAgICApO1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QocmVhc29uKTtcbiAgfSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL0F4aW9zSGVhZGVycy5qc1wiO1xuXG5jb25zdCBoZWFkZXJzVG9PYmplY3QgPSAodGhpbmcpID0+IHRoaW5nIGluc3RhbmNlb2YgQXhpb3NIZWFkZXJzID8gdGhpbmcudG9KU09OKCkgOiB0aGluZztcblxuLyoqXG4gKiBDb25maWctc3BlY2lmaWMgbWVyZ2UtZnVuY3Rpb24gd2hpY2ggY3JlYXRlcyBhIG5ldyBjb25maWctb2JqZWN0XG4gKiBieSBtZXJnaW5nIHR3byBjb25maWd1cmF0aW9uIG9iamVjdHMgdG9nZXRoZXIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZzFcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcyXG4gKlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUNvbmZpZyhjb25maWcxLCBjb25maWcyKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICBjb25maWcyID0gY29uZmlnMiB8fCB7fTtcbiAgY29uc3QgY29uZmlnID0ge307XG5cbiAgZnVuY3Rpb24gZ2V0TWVyZ2VkVmFsdWUodGFyZ2V0LCBzb3VyY2UsIGNhc2VsZXNzKSB7XG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QodGFyZ2V0KSAmJiB1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZS5jYWxsKHtjYXNlbGVzc30sIHRhcmdldCwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3Qoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHV0aWxzLm1lcmdlKHt9LCBzb3VyY2UpO1xuICAgIH0gZWxzZSBpZiAodXRpbHMuaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gc291cmNlLnNsaWNlKCk7XG4gICAgfVxuICAgIHJldHVybiBzb3VyY2U7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhhLCBiLCBjYXNlbGVzcykge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZShhLCBiLCBjYXNlbGVzcyk7XG4gICAgfSBlbHNlIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYSkpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEsIGNhc2VsZXNzKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gdmFsdWVGcm9tQ29uZmlnMihhLCBiKSB7XG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChiKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYik7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIGRlZmF1bHRUb0NvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgZnVuY3Rpb24gbWVyZ2VEaXJlY3RLZXlzKGEsIGIsIHByb3ApIHtcbiAgICBpZiAocHJvcCBpbiBjb25maWcyKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYik7XG4gICAgfSBlbHNlIGlmIChwcm9wIGluIGNvbmZpZzEpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGEpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG1lcmdlTWFwID0ge1xuICAgIHVybDogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBtZXRob2Q6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgZGF0YTogdmFsdWVGcm9tQ29uZmlnMixcbiAgICBiYXNlVVJMOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlcXVlc3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNmb3JtUmVzcG9uc2U6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcGFyYW1zU2VyaWFsaXplcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRpbWVvdXRNZXNzYWdlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHdpdGhDcmVkZW50aWFsczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoWFNSRlRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGFkYXB0ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VUeXBlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZDb29raWVOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHhzcmZIZWFkZXJOYW1lOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG9uVXBsb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25Eb3dubG9hZFByb2dyZXNzOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGRlY29tcHJlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgbWF4Q29udGVudExlbmd0aDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhCb2R5TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGJlZm9yZVJlZGlyZWN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zcG9ydDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwQWdlbnQ6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgaHR0cHNBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBjYW5jZWxUb2tlbjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBzb2NrZXRQYXRoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHJlc3BvbnNlRW5jb2Rpbmc6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdmFsaWRhdGVTdGF0dXM6IG1lcmdlRGlyZWN0S2V5cyxcbiAgICBoZWFkZXJzOiAoYSwgYikgPT4gbWVyZ2VEZWVwUHJvcGVydGllcyhoZWFkZXJzVG9PYmplY3QoYSksIGhlYWRlcnNUb09iamVjdChiKSwgdHJ1ZSlcbiAgfTtcblxuICB1dGlscy5mb3JFYWNoKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIGNvbmZpZzEsIGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS42LjJcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9IG51bGwpIHtcbiAgICAgIGlmICh1dGlscy5pc0Z1bmN0aW9uKHBhcmFtc1NlcmlhbGl6ZXIpKSB7XG4gICAgICAgIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyID0ge1xuICAgICAgICAgIHNlcmlhbGl6ZTogcGFyYW1zU2VyaWFsaXplclxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWxpZGF0b3IuYXNzZXJ0T3B0aW9ucyhwYXJhbXNTZXJpYWxpemVyLCB7XG4gICAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICAgIHNlcmlhbGl6ZTogdmFsaWRhdG9ycy5mdW5jdGlvblxuICAgICAgICB9LCB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICAgIGNvbmZpZy5tZXRob2QgPSAoY29uZmlnLm1ldGhvZCB8fCB0aGlzLmRlZmF1bHRzLm1ldGhvZCB8fCAnZ2V0JykudG9Mb3dlckNhc2UoKTtcblxuICAgIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICAgIGxldCBjb250ZXh0SGVhZGVycyA9IGhlYWRlcnMgJiYgdXRpbHMubWVyZ2UoXG4gICAgICBoZWFkZXJzLmNvbW1vbixcbiAgICAgIGhlYWRlcnNbY29uZmlnLm1ldGhvZF1cbiAgICApO1xuXG4gICAgaGVhZGVycyAmJiB1dGlscy5mb3JFYWNoKFxuICAgICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgICAobWV0aG9kKSA9PiB7XG4gICAgICAgIGRlbGV0ZSBoZWFkZXJzW21ldGhvZF07XG4gICAgICB9XG4gICAgKTtcblxuICAgIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmNvbmNhdChjb250ZXh0SGVhZGVycywgaGVhZGVycyk7XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHNraXBwZWQgaW50ZXJjZXB0b3JzXG4gICAgY29uc3QgcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICBsZXQgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gdHJ1ZTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0b3IucnVuV2hlbiA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnRlcmNlcHRvci5ydW5XaGVuKGNvbmZpZykgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzID0gc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzICYmIGludGVyY2VwdG9yLnN5bmNocm9ub3VzO1xuXG4gICAgICByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluID0gW107XG4gICAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICAgIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICAgIH0pO1xuXG4gICAgbGV0IHByb21pc2U7XG4gICAgbGV0IGkgPSAwO1xuICAgIGxldCBsZW47XG5cbiAgICBpZiAoIXN5bmNocm9ub3VzUmVxdWVzdEludGVyY2VwdG9ycykge1xuICAgICAgY29uc3QgY2hhaW4gPSBbZGlzcGF0Y2hSZXF1ZXN0LmJpbmQodGhpcyksIHVuZGVmaW5lZF07XG4gICAgICBjaGFpbi51bnNoaWZ0LmFwcGx5KGNoYWluLCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBjaGFpbi5wdXNoLmFwcGx5KGNoYWluLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4pO1xuICAgICAgbGVuID0gY2hhaW4ubGVuZ3RoO1xuXG4gICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4oY2hhaW5baSsrXSwgY2hhaW5baSsrXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cblxuICAgIGxlbiA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIGxldCBuZXdDb25maWcgPSBjb25maWc7XG5cbiAgICBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBjb25zdCBvbkZ1bGZpbGxlZCA9IHJlcXVlc3RJbnRlcmNlcHRvckNoYWluW2krK107XG4gICAgICBjb25zdCBvblJlamVjdGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIHRyeSB7XG4gICAgICAgIG5ld0NvbmZpZyA9IG9uRnVsZmlsbGVkKG5ld0NvbmZpZyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBvblJlamVjdGVkLmNhbGwodGhpcywgZXJyb3IpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcHJvbWlzZSA9IGRpc3BhdGNoUmVxdWVzdC5jYWxsKHRoaXMsIG5ld0NvbmZpZyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgfVxuXG4gICAgaSA9IDA7XG4gICAgbGVuID0gcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLmxlbmd0aDtcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdLCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW5baSsrXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRVcmkoY29uZmlnKSB7XG4gICAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgICBjb25zdCBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJldHVybiBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpO1xuICB9XG59XG5cbi8vIFByb3ZpZGUgYWxpYXNlcyBmb3Igc3VwcG9ydGVkIHJlcXVlc3QgbWV0aG9kc1xudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdvcHRpb25zJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kLFxuICAgICAgdXJsLFxuICAgICAgZGF0YTogKGNvbmZpZyB8fCB7fSkuZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlSFRUUE1ldGhvZChpc0Zvcm0pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaHR0cE1ldGhvZCh1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdChtZXJnZUNvbmZpZyhjb25maWcgfHwge30sIHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBoZWFkZXJzOiBpc0Zvcm0gPyB7XG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdtdWx0aXBhcnQvZm9ybS1kYXRhJ1xuICAgICAgICB9IDoge30sXG4gICAgICAgIHVybCxcbiAgICAgICAgZGF0YVxuICAgICAgfSkpO1xuICAgIH07XG4gIH1cblxuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGdlbmVyYXRlSFRUUE1ldGhvZCgpO1xuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2QgKyAnRm9ybSddID0gZ2VuZXJhdGVIVFRQTWV0aG9kKHRydWUpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQ2FuY2VsZWRFcnJvciBmcm9tICcuL0NhbmNlbGVkRXJyb3IuanMnO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXhlY3V0b3IgVGhlIGV4ZWN1dG9yIGZ1bmN0aW9uLlxuICpcbiAqIEByZXR1cm5zIHtDYW5jZWxUb2tlbn1cbiAqL1xuY2xhc3MgQ2FuY2VsVG9rZW4ge1xuICBjb25zdHJ1Y3RvcihleGVjdXRvcikge1xuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2V4ZWN1dG9yIG11c3QgYmUgYSBmdW5jdGlvbi4nKTtcbiAgICB9XG5cbiAgICBsZXQgcmVzb2x2ZVByb21pc2U7XG5cbiAgICB0aGlzLnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiBwcm9taXNlRXhlY3V0b3IocmVzb2x2ZSkge1xuICAgICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICAgIH0pO1xuXG4gICAgY29uc3QgdG9rZW4gPSB0aGlzO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbihjYW5jZWwgPT4ge1xuICAgICAgaWYgKCF0b2tlbi5fbGlzdGVuZXJzKSByZXR1cm47XG5cbiAgICAgIGxldCBpID0gdG9rZW4uX2xpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgICAgIHRva2VuLl9saXN0ZW5lcnNbaV0oY2FuY2VsKTtcbiAgICAgIH1cbiAgICAgIHRva2VuLl9saXN0ZW5lcnMgPSBudWxsO1xuICAgIH0pO1xuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICB0aGlzLnByb21pc2UudGhlbiA9IG9uZnVsZmlsbGVkID0+IHtcbiAgICAgIGxldCBfcmVzb2x2ZTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG4gICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgIHRva2VuLnN1YnNjcmliZShyZXNvbHZlKTtcbiAgICAgICAgX3Jlc29sdmUgPSByZXNvbHZlO1xuICAgICAgfSkudGhlbihvbmZ1bGZpbGxlZCk7XG5cbiAgICAgIHByb21pc2UuY2FuY2VsID0gZnVuY3Rpb24gcmVqZWN0KCkge1xuICAgICAgICB0b2tlbi51bnN1YnNjcmliZShfcmVzb2x2ZSk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgZXhlY3V0b3IoZnVuY3Rpb24gY2FuY2VsKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCkge1xuICAgICAgaWYgKHRva2VuLnJlYXNvbikge1xuICAgICAgICAvLyBDYW5jZWxsYXRpb24gaGFzIGFscmVhZHkgYmVlbiByZXF1ZXN0ZWRcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0b2tlbi5yZWFzb24gPSBuZXcgQ2FuY2VsZWRFcnJvcihtZXNzYWdlLCBjb25maWcsIHJlcXVlc3QpO1xuICAgICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaHJvd3MgYSBgQ2FuY2VsZWRFcnJvcmAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAgICovXG4gIHRocm93SWZSZXF1ZXN0ZWQoKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlIHRvIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICh0aGlzLnJlYXNvbikge1xuICAgICAgbGlzdGVuZXIodGhpcy5yZWFzb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW2xpc3RlbmVyXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVW5zdWJzY3JpYmUgZnJvbSB0aGUgY2FuY2VsIHNpZ25hbFxuICAgKi9cblxuICB1bnN1YnNjcmliZShsaXN0ZW5lcikge1xuICAgIGlmICghdGhpcy5fbGlzdGVuZXJzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fbGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpO1xuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgIHRoaXMuX2xpc3RlbmVycy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gICAqIGNhbmNlbHMgdGhlIGBDYW5jZWxUb2tlbmAuXG4gICAqL1xuICBzdGF0aWMgc291cmNlKCkge1xuICAgIGxldCBjYW5jZWw7XG4gICAgY29uc3QgdG9rZW4gPSBuZXcgQ2FuY2VsVG9rZW4oZnVuY3Rpb24gZXhlY3V0b3IoYykge1xuICAgICAgY2FuY2VsID0gYztcbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgdG9rZW4sXG4gICAgICBjYW5jZWxcbiAgICB9O1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3NcbiAqXG4gKiBAcGFyYW0geyp9IHBheWxvYWQgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgcGF5bG9hZCBpcyBhbiBlcnJvciB0aHJvd24gYnkgQXhpb3MsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0F4aW9zRXJyb3IocGF5bG9hZCkge1xuICByZXR1cm4gdXRpbHMuaXNPYmplY3QocGF5bG9hZCkgJiYgKHBheWxvYWQuaXNBeGlvc0Vycm9yID09PSB0cnVlKTtcbn1cbiIsImNvbnN0IEh0dHBTdGF0dXNDb2RlID0ge1xuICBDb250aW51ZTogMTAwLFxuICBTd2l0Y2hpbmdQcm90b2NvbHM6IDEwMSxcbiAgUHJvY2Vzc2luZzogMTAyLFxuICBFYXJseUhpbnRzOiAxMDMsXG4gIE9rOiAyMDAsXG4gIENyZWF0ZWQ6IDIwMSxcbiAgQWNjZXB0ZWQ6IDIwMixcbiAgTm9uQXV0aG9yaXRhdGl2ZUluZm9ybWF0aW9uOiAyMDMsXG4gIE5vQ29udGVudDogMjA0LFxuICBSZXNldENvbnRlbnQ6IDIwNSxcbiAgUGFydGlhbENvbnRlbnQ6IDIwNixcbiAgTXVsdGlTdGF0dXM6IDIwNyxcbiAgQWxyZWFkeVJlcG9ydGVkOiAyMDgsXG4gIEltVXNlZDogMjI2LFxuICBNdWx0aXBsZUNob2ljZXM6IDMwMCxcbiAgTW92ZWRQZXJtYW5lbnRseTogMzAxLFxuICBGb3VuZDogMzAyLFxuICBTZWVPdGhlcjogMzAzLFxuICBOb3RNb2RpZmllZDogMzA0LFxuICBVc2VQcm94eTogMzA1LFxuICBVbnVzZWQ6IDMwNixcbiAgVGVtcG9yYXJ5UmVkaXJlY3Q6IDMwNyxcbiAgUGVybWFuZW50UmVkaXJlY3Q6IDMwOCxcbiAgQmFkUmVxdWVzdDogNDAwLFxuICBVbmF1dGhvcml6ZWQ6IDQwMSxcbiAgUGF5bWVudFJlcXVpcmVkOiA0MDIsXG4gIEZvcmJpZGRlbjogNDAzLFxuICBOb3RGb3VuZDogNDA0LFxuICBNZXRob2ROb3RBbGxvd2VkOiA0MDUsXG4gIE5vdEFjY2VwdGFibGU6IDQwNixcbiAgUHJveHlBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA0MDcsXG4gIFJlcXVlc3RUaW1lb3V0OiA0MDgsXG4gIENvbmZsaWN0OiA0MDksXG4gIEdvbmU6IDQxMCxcbiAgTGVuZ3RoUmVxdWlyZWQ6IDQxMSxcbiAgUHJlY29uZGl0aW9uRmFpbGVkOiA0MTIsXG4gIFBheWxvYWRUb29MYXJnZTogNDEzLFxuICBVcmlUb29Mb25nOiA0MTQsXG4gIFVuc3VwcG9ydGVkTWVkaWFUeXBlOiA0MTUsXG4gIFJhbmdlTm90U2F0aXNmaWFibGU6IDQxNixcbiAgRXhwZWN0YXRpb25GYWlsZWQ6IDQxNyxcbiAgSW1BVGVhcG90OiA0MTgsXG4gIE1pc2RpcmVjdGVkUmVxdWVzdDogNDIxLFxuICBVbnByb2Nlc3NhYmxlRW50aXR5OiA0MjIsXG4gIExvY2tlZDogNDIzLFxuICBGYWlsZWREZXBlbmRlbmN5OiA0MjQsXG4gIFRvb0Vhcmx5OiA0MjUsXG4gIFVwZ3JhZGVSZXF1aXJlZDogNDI2LFxuICBQcmVjb25kaXRpb25SZXF1aXJlZDogNDI4LFxuICBUb29NYW55UmVxdWVzdHM6IDQyOSxcbiAgUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlOiA0MzEsXG4gIFVuYXZhaWxhYmxlRm9yTGVnYWxSZWFzb25zOiA0NTEsXG4gIEludGVybmFsU2VydmVyRXJyb3I6IDUwMCxcbiAgTm90SW1wbGVtZW50ZWQ6IDUwMSxcbiAgQmFkR2F0ZXdheTogNTAyLFxuICBTZXJ2aWNlVW5hdmFpbGFibGU6IDUwMyxcbiAgR2F0ZXdheVRpbWVvdXQ6IDUwNCxcbiAgSHR0cFZlcnNpb25Ob3RTdXBwb3J0ZWQ6IDUwNSxcbiAgVmFyaWFudEFsc29OZWdvdGlhdGVzOiA1MDYsXG4gIEluc3VmZmljaWVudFN0b3JhZ2U6IDUwNyxcbiAgTG9vcERldGVjdGVkOiA1MDgsXG4gIE5vdEV4dGVuZGVkOiA1MTAsXG4gIE5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkOiA1MTEsXG59O1xuXG5PYmplY3QuZW50cmllcyhIdHRwU3RhdHVzQ29kZSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gIEh0dHBTdGF0dXNDb2RlW3ZhbHVlXSA9IGtleTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBIdHRwU3RhdHVzQ29kZTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJpbmQgZnJvbSAnLi9oZWxwZXJzL2JpbmQuanMnO1xuaW1wb3J0IEF4aW9zIGZyb20gJy4vY29yZS9BeGlvcy5qcyc7XG5pbXBvcnQgbWVyZ2VDb25maWcgZnJvbSAnLi9jb3JlL21lcmdlQ29uZmlnLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuL2hlbHBlcnMvZm9ybURhdGFUb0pTT04uanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyc7XG5pbXBvcnQgQ2FuY2VsVG9rZW4gZnJvbSAnLi9jYW5jZWwvQ2FuY2VsVG9rZW4uanMnO1xuaW1wb3J0IGlzQ2FuY2VsIGZyb20gJy4vY2FuY2VsL2lzQ2FuY2VsLmpzJztcbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi9lbnYvZGF0YS5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuL2NvcmUvQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgc3ByZWFkIGZyb20gJy4vaGVscGVycy9zcHJlYWQuanMnO1xuaW1wb3J0IGlzQXhpb3NFcnJvciBmcm9tICcuL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSBcIi4vY29yZS9BeGlvc0hlYWRlcnMuanNcIjtcbmltcG9ydCBhZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzJztcbmltcG9ydCBIdHRwU3RhdHVzQ29kZSBmcm9tICcuL2hlbHBlcnMvSHR0cFN0YXR1c0NvZGUuanMnO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKlxuICogQHJldHVybnMge0F4aW9zfSBBIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICovXG5mdW5jdGlvbiBjcmVhdGVJbnN0YW5jZShkZWZhdWx0Q29uZmlnKSB7XG4gIGNvbnN0IGNvbnRleHQgPSBuZXcgQXhpb3MoZGVmYXVsdENvbmZpZyk7XG4gIGNvbnN0IGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gQ29weSBjb250ZXh0IHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgY29udGV4dCwgbnVsbCwge2FsbE93bktleXM6IHRydWV9KTtcblxuICAvLyBGYWN0b3J5IGZvciBjcmVhdGluZyBuZXcgaW5zdGFuY2VzXG4gIGluc3RhbmNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpbnN0YW5jZUNvbmZpZykge1xuICAgIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhkZWZhdWx0Q29uZmlnLCBpbnN0YW5jZUNvbmZpZykpO1xuICB9O1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG5jb25zdCBheGlvcyA9IGNyZWF0ZUluc3RhbmNlKGRlZmF1bHRzKTtcblxuLy8gRXhwb3NlIEF4aW9zIGNsYXNzIHRvIGFsbG93IGNsYXNzIGluaGVyaXRhbmNlXG5heGlvcy5BeGlvcyA9IEF4aW9zO1xuXG4vLyBFeHBvc2UgQ2FuY2VsICYgQ2FuY2VsVG9rZW5cbmF4aW9zLkNhbmNlbGVkRXJyb3IgPSBDYW5jZWxlZEVycm9yO1xuYXhpb3MuQ2FuY2VsVG9rZW4gPSBDYW5jZWxUb2tlbjtcbmF4aW9zLmlzQ2FuY2VsID0gaXNDYW5jZWw7XG5heGlvcy5WRVJTSU9OID0gVkVSU0lPTjtcbmF4aW9zLnRvRm9ybURhdGEgPSB0b0Zvcm1EYXRhO1xuXG4vLyBFeHBvc2UgQXhpb3NFcnJvciBjbGFzc1xuYXhpb3MuQXhpb3NFcnJvciA9IEF4aW9zRXJyb3I7XG5cbi8vIGFsaWFzIGZvciBDYW5jZWxlZEVycm9yIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5XG5heGlvcy5DYW5jZWwgPSBheGlvcy5DYW5jZWxlZEVycm9yO1xuXG4vLyBFeHBvc2UgYWxsL3NwcmVhZFxuYXhpb3MuYWxsID0gZnVuY3Rpb24gYWxsKHByb21pc2VzKSB7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG59O1xuXG5heGlvcy5zcHJlYWQgPSBzcHJlYWQ7XG5cbi8vIEV4cG9zZSBpc0F4aW9zRXJyb3JcbmF4aW9zLmlzQXhpb3NFcnJvciA9IGlzQXhpb3NFcnJvcjtcblxuLy8gRXhwb3NlIG1lcmdlQ29uZmlnXG5heGlvcy5tZXJnZUNvbmZpZyA9IG1lcmdlQ29uZmlnO1xuXG5heGlvcy5BeGlvc0hlYWRlcnMgPSBBeGlvc0hlYWRlcnM7XG5cbmF4aW9zLmZvcm1Ub0pTT04gPSB0aGluZyA9PiBmb3JtRGF0YVRvSlNPTih1dGlscy5pc0hUTUxGb3JtKHRoaW5nKSA/IG5ldyBGb3JtRGF0YSh0aGluZykgOiB0aGluZyk7XG5cbmF4aW9zLmdldEFkYXB0ZXIgPSBhZGFwdGVycy5nZXRBZGFwdGVyO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsImltcG9ydCBheGlvcyBmcm9tICdheGlvcydcbi8vIGV4cG9ydCBjb25zdCBBUElVUkwgPSAnaHR0cDovLzEyNy4wLjAuMTo4MDAwLydcbmV4cG9ydCBjb25zdCBBUElVUkwgPVwiaHR0cHM6Ly9tYWduYWluZ2VuaWVyaWF5dG9wb2dyYWZpYS5jb21cIlxuXG5cbmNvbnN0IGFwaUNsaWVudCA9IGF4aW9zLmNyZWF0ZSh7XG4gIGJhc2VVUkw6QVBJVVJMICxcbiAgaGVhZGVyczoge1xuICAgICdDb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gIH0sXG59KVxuXG5cbmFwaUNsaWVudC5pbnRlcmNlcHRvcnMucmVxdWVzdC51c2UoXG4gIGFzeW5jIChjb25maWcpID0+IHtcbiAgICBjb25zdCB0b2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0b2tlbicpXG4gICAgaWYgKHRva2VuKSB7XG5cbiAgICAgIGNvbmZpZy5oZWFkZXJzWydBdXRob3JpemF0aW9uJ10gPSBgSldUICR7dG9rZW59YFxuICAgIH1cbiAgICByZXR1cm4gY29uZmlnXG4gIH1cbilcbmV4cG9ydCBkZWZhdWx0IGFwaUNsaWVudCIsImltcG9ydCBhcGlDbGllbnQgZnJvbSBcIi4uL2FwaUNsaWVudFwiO1xuaW1wb3J0IHsgQnJvY2h1cmUsIEVxdWlwb3NBbmRUZWNoLCAgU2VydmljaW8yIH0gZnJvbSBcIi4uL3R5cGVzL3R5cGVzXCI7XG5pbXBvcnQgeyBQcm95ZWN0b3NNYWduYSxQcm95ZWN0SW1hZ2VzTWFnbmEgIH0gZnJvbSBcIi4uL3R5cGVzL3Byb2plY3RzXCI7XG5cblxuZXhwb3J0IGNvbnN0IGZldGNoV29ya2VycyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQ8RXF1aXBvc0FuZFRlY2g+KCdlcXVpcG9zLycpXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZXR1cm5cbiAgICB9XG59XG5cblxuZXhwb3J0IGNvbnN0IGZldGNoU2VydmljZXMxID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmdldDxTZXJ2aWNpbzJbXT4oJ3NlcnZpY2lvcy9zZXJ2aWNpb3MtYW5kLXN1YnNlcnZpY2lvcy8nKVxuICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZS5kYXRhLCAnYXF1aSBlc3RveSBlbiBmZXRjaFNlcnZpY2VzJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlLmRhdGEsICdhcXVpIGVzdG95IGVuIGZldGNoU2VydmljZXMnKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZXR1cm5cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaFByb2plY3RzID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmdldDxQcm95ZWN0b3NNYWduYT4oJ3Byb3llY3Rvcy8nKVxuICAgICAgICByZXR1cm4gcmVzcG9uc2UuZGF0YVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZmV0Y2hQcm9qZWN0c0ltYWdlcyA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGFwaUNsaWVudC5nZXQ8UHJveWVjdEltYWdlc01hZ25hW10+KCdwcm95ZWN0b3MvaW1hZ2VzLycpXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZXR1cm5cbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBmZXRjaEJyb2NodXJlID0gYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpQ2xpZW50LmdldDxCcm9jaHVyZVtdPignc2VydmljaW9zL2Jyb2NodXJlLycpXG4gICAgICAgIHJldHVybiByZXNwb25zZS5kYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyb3IpO1xuICAgICAgICByZXR1cm5cbiAgICB9XG59XG5cblxuXG4iLCIodHlwZW9mIG5hdmlnYXRvciAhPT0gXCJ1bmRlZmluZWRcIikgJiYgKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwubG90dGllID0gZmFjdG9yeSgpKTtcbn0pKHRoaXMsIChmdW5jdGlvbiAoKSB7ICd1c2Ugc3RyaWN0JztcblxuICB2YXIgc3ZnTlMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICB2YXIgbG9jYXRpb25IcmVmID0gJyc7XG4gIHZhciBfdXNlV2ViV29ya2VyID0gZmFsc2U7XG4gIHZhciBpbml0aWFsRGVmYXVsdEZyYW1lID0gLTk5OTk5OTtcblxuICB2YXIgc2V0V2ViV29ya2VyID0gZnVuY3Rpb24gc2V0V2ViV29ya2VyKGZsYWcpIHtcbiAgICBfdXNlV2ViV29ya2VyID0gISFmbGFnO1xuICB9O1xuXG4gIHZhciBnZXRXZWJXb3JrZXIgPSBmdW5jdGlvbiBnZXRXZWJXb3JrZXIoKSB7XG4gICAgcmV0dXJuIF91c2VXZWJXb3JrZXI7XG4gIH07XG5cbiAgdmFyIHNldExvY2F0aW9uSHJlZiA9IGZ1bmN0aW9uIHNldExvY2F0aW9uSHJlZih2YWx1ZSkge1xuICAgIGxvY2F0aW9uSHJlZiA9IHZhbHVlO1xuICB9O1xuXG4gIHZhciBnZXRMb2NhdGlvbkhyZWYgPSBmdW5jdGlvbiBnZXRMb2NhdGlvbkhyZWYoKSB7XG4gICAgcmV0dXJuIGxvY2F0aW9uSHJlZjtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVUYWcodHlwZSkge1xuICAgIC8vIHJldHVybiB7YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oKXt9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbigpe30sc3R5bGU6e319XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBleHRlbmRQcm90b3R5cGUoc291cmNlcywgZGVzdGluYXRpb24pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc291cmNlcy5sZW5ndGg7XG4gICAgdmFyIHNvdXJjZVByb3RvdHlwZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc291cmNlUHJvdG90eXBlID0gc291cmNlc1tpXS5wcm90b3R5cGU7XG5cbiAgICAgIGZvciAodmFyIGF0dHIgaW4gc291cmNlUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlUHJvdG90eXBlLCBhdHRyKSkgZGVzdGluYXRpb24ucHJvdG90eXBlW2F0dHJdID0gc291cmNlUHJvdG90eXBlW2F0dHJdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERlc2NyaXB0b3Iob2JqZWN0LCBwcm9wKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVByb3h5RnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgZnVuY3Rpb24gUHJveHlGdW5jdGlvbigpIHt9XG5cbiAgICBQcm94eUZ1bmN0aW9uLnByb3RvdHlwZSA9IHByb3RvdHlwZTtcbiAgICByZXR1cm4gUHJveHlGdW5jdGlvbjtcbiAgfVxuXG4gIC8vIGltcG9ydCBIb3dsIGZyb20gJy4uLy4uLzNyZF9wYXJ0eS9ob3dsZXInO1xuICB2YXIgYXVkaW9Db250cm9sbGVyRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBdWRpb0NvbnRyb2xsZXIoYXVkaW9GYWN0b3J5KSB7XG4gICAgICB0aGlzLmF1ZGlvcyA9IFtdO1xuICAgICAgdGhpcy5hdWRpb0ZhY3RvcnkgPSBhdWRpb0ZhY3Rvcnk7XG4gICAgICB0aGlzLl92b2x1bWUgPSAxO1xuICAgICAgdGhpcy5faXNNdXRlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIEF1ZGlvQ29udHJvbGxlci5wcm90b3R5cGUgPSB7XG4gICAgICBhZGRBdWRpbzogZnVuY3Rpb24gYWRkQXVkaW8oYXVkaW8pIHtcbiAgICAgICAgdGhpcy5hdWRpb3MucHVzaChhdWRpbyk7XG4gICAgICB9LFxuICAgICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuYXVkaW9zLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLmF1ZGlvc1tpXS5wYXVzZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVzdW1lOiBmdW5jdGlvbiByZXN1bWUoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5hdWRpb3MubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuYXVkaW9zW2ldLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2V0UmF0ZTogZnVuY3Rpb24gc2V0UmF0ZShyYXRlVmFsdWUpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmF1ZGlvcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5hdWRpb3NbaV0uc2V0UmF0ZShyYXRlVmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlQXVkaW86IGZ1bmN0aW9uIGNyZWF0ZUF1ZGlvKGFzc2V0UGF0aCkge1xuICAgICAgICBpZiAodGhpcy5hdWRpb0ZhY3RvcnkpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5hdWRpb0ZhY3RvcnkoYXNzZXRQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh3aW5kb3cuSG93bCkge1xuICAgICAgICAgIHJldHVybiBuZXcgd2luZG93Lkhvd2woe1xuICAgICAgICAgICAgc3JjOiBbYXNzZXRQYXRoXVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpc1BsYXlpbmc6IGZhbHNlLFxuICAgICAgICAgIHBsYXk6IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgICAgICAgICB0aGlzLmlzUGxheWluZyA9IHRydWU7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZWVrOiBmdW5jdGlvbiBzZWVrKCkge1xuICAgICAgICAgICAgdGhpcy5pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIHBsYXlpbmc6IGZ1bmN0aW9uIHBsYXlpbmcoKSB7fSxcbiAgICAgICAgICByYXRlOiBmdW5jdGlvbiByYXRlKCkge30sXG4gICAgICAgICAgc2V0Vm9sdW1lOiBmdW5jdGlvbiBzZXRWb2x1bWUoKSB7fVxuICAgICAgICB9O1xuICAgICAgfSxcbiAgICAgIHNldEF1ZGlvRmFjdG9yeTogZnVuY3Rpb24gc2V0QXVkaW9GYWN0b3J5KGF1ZGlvRmFjdG9yeSkge1xuICAgICAgICB0aGlzLmF1ZGlvRmFjdG9yeSA9IGF1ZGlvRmFjdG9yeTtcbiAgICAgIH0sXG4gICAgICBzZXRWb2x1bWU6IGZ1bmN0aW9uIHNldFZvbHVtZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLl92b2x1bWUgPSB2YWx1ZTtcblxuICAgICAgICB0aGlzLl91cGRhdGVWb2x1bWUoKTtcbiAgICAgIH0sXG4gICAgICBtdXRlOiBmdW5jdGlvbiBtdXRlKCkge1xuICAgICAgICB0aGlzLl9pc011dGVkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl91cGRhdGVWb2x1bWUoKTtcbiAgICAgIH0sXG4gICAgICB1bm11dGU6IGZ1bmN0aW9uIHVubXV0ZSgpIHtcbiAgICAgICAgdGhpcy5faXNNdXRlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZVZvbHVtZSgpO1xuICAgICAgfSxcbiAgICAgIGdldFZvbHVtZTogZnVuY3Rpb24gZ2V0Vm9sdW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdm9sdW1lO1xuICAgICAgfSxcbiAgICAgIF91cGRhdGVWb2x1bWU6IGZ1bmN0aW9uIF91cGRhdGVWb2x1bWUoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5hdWRpb3MubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIHRoaXMuYXVkaW9zW2ldLnZvbHVtZSh0aGlzLl92b2x1bWUgKiAodGhpcy5faXNNdXRlZCA/IDAgOiAxKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbmV3IEF1ZGlvQ29udHJvbGxlcigpO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgY3JlYXRlVHlwZWRBcnJheSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGVSZWd1bGFyQXJyYXkodHlwZSwgbGVuKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgYXJyID0gW107XG4gICAgICB2YXIgdmFsdWU7XG5cbiAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdpbnQxNic6XG4gICAgICAgIGNhc2UgJ3VpbnQ4Yyc6XG4gICAgICAgICAgdmFsdWUgPSAxO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdmFsdWUgPSAxLjE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhcnIucHVzaCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlVHlwZWRBcnJheUZhY3RvcnkodHlwZSwgbGVuKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ2Zsb2F0MzInKSB7XG4gICAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KGxlbik7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAnaW50MTYnKSB7XG4gICAgICAgIHJldHVybiBuZXcgSW50MTZBcnJheShsZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ3VpbnQ4YycpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OENsYW1wZWRBcnJheShsZW4pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3JlYXRlUmVndWxhckFycmF5KHR5cGUsIGxlbik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgRmxvYXQzMkFycmF5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm4gY3JlYXRlVHlwZWRBcnJheUZhY3Rvcnk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZVJlZ3VsYXJBcnJheTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVNpemVkQXJyYXkobGVuKSB7XG4gICAgcmV0dXJuIEFycmF5LmFwcGx5KG51bGwsIHtcbiAgICAgIGxlbmd0aDogbGVuXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mJDYob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkNiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDYgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQ2KG9iaik7IH1cbiAgdmFyIHN1YmZyYW1lRW5hYmxlZCA9IHRydWU7XG4gIHZhciBleHByZXNzaW9uc1BsdWdpbiA9IG51bGw7XG4gIHZhciBleHByZXNzaW9uc0ludGVyZmFjZXMgPSBudWxsO1xuICB2YXIgaWRQcmVmaXgkMSA9ICcnO1xuICB2YXIgaXNTYWZhcmkgPSAvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICB2YXIgX3Nob3VsZFJvdW5kVmFsdWVzID0gZmFsc2U7XG4gIHZhciBibVBvdyA9IE1hdGgucG93O1xuICB2YXIgYm1TcXJ0ID0gTWF0aC5zcXJ0O1xuICB2YXIgYm1GbG9vciA9IE1hdGguZmxvb3I7XG4gIHZhciBibU1heCA9IE1hdGgubWF4O1xuICB2YXIgYm1NaW4gPSBNYXRoLm1pbjtcbiAgdmFyIEJNTWF0aCA9IHt9O1xuXG4gIChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHByb3BlcnR5TmFtZXMgPSBbJ2FicycsICdhY29zJywgJ2Fjb3NoJywgJ2FzaW4nLCAnYXNpbmgnLCAnYXRhbicsICdhdGFuaCcsICdhdGFuMicsICdjZWlsJywgJ2NicnQnLCAnZXhwbTEnLCAnY2x6MzInLCAnY29zJywgJ2Nvc2gnLCAnZXhwJywgJ2Zsb29yJywgJ2Zyb3VuZCcsICdoeXBvdCcsICdpbXVsJywgJ2xvZycsICdsb2cxcCcsICdsb2cyJywgJ2xvZzEwJywgJ21heCcsICdtaW4nLCAncG93JywgJ3JhbmRvbScsICdyb3VuZCcsICdzaWduJywgJ3NpbicsICdzaW5oJywgJ3NxcnQnLCAndGFuJywgJ3RhbmgnLCAndHJ1bmMnLCAnRScsICdMTjEwJywgJ0xOMicsICdMT0cxMEUnLCAnTE9HMkUnLCAnUEknLCAnU1FSVDFfMicsICdTUVJUMiddO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBwcm9wZXJ0eU5hbWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgQk1NYXRoW3Byb3BlcnR5TmFtZXNbaV1dID0gTWF0aFtwcm9wZXJ0eU5hbWVzW2ldXTtcbiAgICB9XG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gUHJvamVjdEludGVyZmFjZSQxKCkge1xuICAgIHJldHVybiB7fTtcbiAgfVxuXG4gIEJNTWF0aC5yYW5kb20gPSBNYXRoLnJhbmRvbTtcblxuICBCTU1hdGguYWJzID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHZhciB0T2ZWYWwgPSBfdHlwZW9mJDYodmFsKTtcblxuICAgIGlmICh0T2ZWYWwgPT09ICdvYmplY3QnICYmIHZhbC5sZW5ndGgpIHtcbiAgICAgIHZhciBhYnNBcnIgPSBjcmVhdGVTaXplZEFycmF5KHZhbC5sZW5ndGgpO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdmFsLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGFic0FycltpXSA9IE1hdGguYWJzKHZhbFtpXSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhYnNBcnI7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGguYWJzKHZhbCk7XG4gIH07XG5cbiAgdmFyIGRlZmF1bHRDdXJ2ZVNlZ21lbnRzID0gMTUwO1xuICB2YXIgZGVnVG9SYWRzID0gTWF0aC5QSSAvIDE4MDtcbiAgdmFyIHJvdW5kQ29ybmVyID0gMC41NTE5O1xuXG4gIGZ1bmN0aW9uIHJvdW5kVmFsdWVzKGZsYWcpIHtcbiAgICBfc2hvdWxkUm91bmRWYWx1ZXMgPSAhIWZsYWc7XG4gIH1cblxuICBmdW5jdGlvbiBibVJuZCh2YWx1ZSkge1xuICAgIGlmIChfc2hvdWxkUm91bmRWYWx1ZXMpIHtcbiAgICAgIHJldHVybiBNYXRoLnJvdW5kKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBzdHlsZURpdihlbGVtZW50KSB7XG4gICAgZWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgZWxlbWVudC5zdHlsZS50b3AgPSAwO1xuICAgIGVsZW1lbnQuc3R5bGUubGVmdCA9IDA7XG4gICAgZWxlbWVudC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9ICcwIDAnO1xuICAgIGVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gJzAgMCc7XG4gICAgZWxlbWVudC5zdHlsZS5iYWNrZmFjZVZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgZWxlbWVudC5zdHlsZS53ZWJraXRCYWNrZmFjZVZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgZWxlbWVudC5zdHlsZS50cmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XG4gICAgZWxlbWVudC5zdHlsZS53ZWJraXRUcmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XG4gICAgZWxlbWVudC5zdHlsZS5tb3pUcmFuc2Zvcm1TdHlsZSA9ICdwcmVzZXJ2ZS0zZCc7XG4gIH1cblxuICBmdW5jdGlvbiBCTUVudGVyRnJhbWVFdmVudCh0eXBlLCBjdXJyZW50VGltZSwgdG90YWxUaW1lLCBmcmFtZU11bHRpcGxpZXIpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuY3VycmVudFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICB0aGlzLnRvdGFsVGltZSA9IHRvdGFsVGltZTtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGZyYW1lTXVsdGlwbGllciA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICBmdW5jdGlvbiBCTUNvbXBsZXRlRXZlbnQodHlwZSwgZnJhbWVNdWx0aXBsaWVyKSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmRpcmVjdGlvbiA9IGZyYW1lTXVsdGlwbGllciA8IDAgPyAtMSA6IDE7XG4gIH1cblxuICBmdW5jdGlvbiBCTUNvbXBsZXRlTG9vcEV2ZW50KHR5cGUsIHRvdGFsTG9vcHMsIGN1cnJlbnRMb29wLCBmcmFtZU11bHRpcGxpZXIpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuY3VycmVudExvb3AgPSBjdXJyZW50TG9vcDtcbiAgICB0aGlzLnRvdGFsTG9vcHMgPSB0b3RhbExvb3BzO1xuICAgIHRoaXMuZGlyZWN0aW9uID0gZnJhbWVNdWx0aXBsaWVyIDwgMCA/IC0xIDogMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNU2VnbWVudFN0YXJ0RXZlbnQodHlwZSwgZmlyc3RGcmFtZSwgdG90YWxGcmFtZXMpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuZmlyc3RGcmFtZSA9IGZpcnN0RnJhbWU7XG4gICAgdGhpcy50b3RhbEZyYW1lcyA9IHRvdGFsRnJhbWVzO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1EZXN0cm95RXZlbnQodHlwZSwgdGFyZ2V0KSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEJNUmVuZGVyRnJhbWVFcnJvckV2ZW50KG5hdGl2ZUVycm9yLCBjdXJyZW50VGltZSkge1xuICAgIHRoaXMudHlwZSA9ICdyZW5kZXJGcmFtZUVycm9yJztcbiAgICB0aGlzLm5hdGl2ZUVycm9yID0gbmF0aXZlRXJyb3I7XG4gICAgdGhpcy5jdXJyZW50VGltZSA9IGN1cnJlbnRUaW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gQk1Db25maWdFcnJvckV2ZW50KG5hdGl2ZUVycm9yKSB7XG4gICAgdGhpcy50eXBlID0gJ2NvbmZpZ0Vycm9yJztcbiAgICB0aGlzLm5hdGl2ZUVycm9yID0gbmF0aXZlRXJyb3I7XG4gIH1cblxuICBmdW5jdGlvbiBCTUFuaW1hdGlvbkNvbmZpZ0Vycm9yRXZlbnQodHlwZSwgbmF0aXZlRXJyb3IpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMubmF0aXZlRXJyb3IgPSBuYXRpdmVFcnJvcjtcbiAgfVxuXG4gIHZhciBjcmVhdGVFbGVtZW50SUQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jb3VudCA9IDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUlEKCkge1xuICAgICAgX2NvdW50ICs9IDE7XG4gICAgICByZXR1cm4gaWRQcmVmaXgkMSArICdfX2xvdHRpZV9lbGVtZW50XycgKyBfY291bnQ7XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIEhTVnRvUkdCKGgsIHMsIHYpIHtcbiAgICB2YXIgcjtcbiAgICB2YXIgZztcbiAgICB2YXIgYjtcbiAgICB2YXIgaTtcbiAgICB2YXIgZjtcbiAgICB2YXIgcDtcbiAgICB2YXIgcTtcbiAgICB2YXIgdDtcbiAgICBpID0gTWF0aC5mbG9vcihoICogNik7XG4gICAgZiA9IGggKiA2IC0gaTtcbiAgICBwID0gdiAqICgxIC0gcyk7XG4gICAgcSA9IHYgKiAoMSAtIGYgKiBzKTtcbiAgICB0ID0gdiAqICgxIC0gKDEgLSBmKSAqIHMpO1xuXG4gICAgc3dpdGNoIChpICUgNikge1xuICAgICAgY2FzZSAwOlxuICAgICAgICByID0gdjtcbiAgICAgICAgZyA9IHQ7XG4gICAgICAgIGIgPSBwO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAxOlxuICAgICAgICByID0gcTtcbiAgICAgICAgZyA9IHY7XG4gICAgICAgIGIgPSBwO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAyOlxuICAgICAgICByID0gcDtcbiAgICAgICAgZyA9IHY7XG4gICAgICAgIGIgPSB0O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByID0gcDtcbiAgICAgICAgZyA9IHE7XG4gICAgICAgIGIgPSB2O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA0OlxuICAgICAgICByID0gdDtcbiAgICAgICAgZyA9IHA7XG4gICAgICAgIGIgPSB2O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSA1OlxuICAgICAgICByID0gdjtcbiAgICAgICAgZyA9IHA7XG4gICAgICAgIGIgPSBxO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgcmV0dXJuIFtyLCBnLCBiXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJHQnRvSFNWKHIsIGcsIGIpIHtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgIHZhciBoO1xuICAgIHZhciBzID0gbWF4ID09PSAwID8gMCA6IGQgLyBtYXg7XG4gICAgdmFyIHYgPSBtYXggLyAyNTU7XG5cbiAgICBzd2l0Y2ggKG1heCkge1xuICAgICAgY2FzZSBtaW46XG4gICAgICAgIGggPSAwO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSByOlxuICAgICAgICBoID0gZyAtIGIgKyBkICogKGcgPCBiID8gNiA6IDApO1xuICAgICAgICBoIC89IDYgKiBkO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBnOlxuICAgICAgICBoID0gYiAtIHIgKyBkICogMjtcbiAgICAgICAgaCAvPSA2ICogZDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgYjpcbiAgICAgICAgaCA9IHIgLSBnICsgZCAqIDQ7XG4gICAgICAgIGggLz0gNiAqIGQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gW2gsIHMsIHZdO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkU2F0dXJhdGlvblRvUkdCKGNvbG9yLCBvZmZzZXQpIHtcbiAgICB2YXIgaHN2ID0gUkdCdG9IU1YoY29sb3JbMF0gKiAyNTUsIGNvbG9yWzFdICogMjU1LCBjb2xvclsyXSAqIDI1NSk7XG4gICAgaHN2WzFdICs9IG9mZnNldDtcblxuICAgIGlmIChoc3ZbMV0gPiAxKSB7XG4gICAgICBoc3ZbMV0gPSAxO1xuICAgIH0gZWxzZSBpZiAoaHN2WzFdIDw9IDApIHtcbiAgICAgIGhzdlsxXSA9IDA7XG4gICAgfVxuXG4gICAgcmV0dXJuIEhTVnRvUkdCKGhzdlswXSwgaHN2WzFdLCBoc3ZbMl0pO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkQnJpZ2h0bmVzc1RvUkdCKGNvbG9yLCBvZmZzZXQpIHtcbiAgICB2YXIgaHN2ID0gUkdCdG9IU1YoY29sb3JbMF0gKiAyNTUsIGNvbG9yWzFdICogMjU1LCBjb2xvclsyXSAqIDI1NSk7XG4gICAgaHN2WzJdICs9IG9mZnNldDtcblxuICAgIGlmIChoc3ZbMl0gPiAxKSB7XG4gICAgICBoc3ZbMl0gPSAxO1xuICAgIH0gZWxzZSBpZiAoaHN2WzJdIDwgMCkge1xuICAgICAgaHN2WzJdID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gSFNWdG9SR0IoaHN2WzBdLCBoc3ZbMV0sIGhzdlsyXSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRIdWVUb1JHQihjb2xvciwgb2Zmc2V0KSB7XG4gICAgdmFyIGhzdiA9IFJHQnRvSFNWKGNvbG9yWzBdICogMjU1LCBjb2xvclsxXSAqIDI1NSwgY29sb3JbMl0gKiAyNTUpO1xuICAgIGhzdlswXSArPSBvZmZzZXQgLyAzNjA7XG5cbiAgICBpZiAoaHN2WzBdID4gMSkge1xuICAgICAgaHN2WzBdIC09IDE7XG4gICAgfSBlbHNlIGlmIChoc3ZbMF0gPCAwKSB7XG4gICAgICBoc3ZbMF0gKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gSFNWdG9SR0IoaHN2WzBdLCBoc3ZbMV0sIGhzdlsyXSk7XG4gIH1cblxuICB2YXIgcmdiVG9IZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGNvbG9yTWFwID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIGhleDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCAyNTY7IGkgKz0gMSkge1xuICAgICAgaGV4ID0gaS50b1N0cmluZygxNik7XG4gICAgICBjb2xvck1hcFtpXSA9IGhleC5sZW5ndGggPT09IDEgPyAnMCcgKyBoZXggOiBoZXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChyLCBnLCBiKSB7XG4gICAgICBpZiAociA8IDApIHtcbiAgICAgICAgciA9IDA7XG4gICAgICB9XG5cbiAgICAgIGlmIChnIDwgMCkge1xuICAgICAgICBnID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKGIgPCAwKSB7XG4gICAgICAgIGIgPSAwO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gJyMnICsgY29sb3JNYXBbcl0gKyBjb2xvck1hcFtnXSArIGNvbG9yTWFwW2JdO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgc2V0U3ViZnJhbWVFbmFibGVkID0gZnVuY3Rpb24gc2V0U3ViZnJhbWVFbmFibGVkKGZsYWcpIHtcbiAgICBzdWJmcmFtZUVuYWJsZWQgPSAhIWZsYWc7XG4gIH07XG5cbiAgdmFyIGdldFN1YmZyYW1lRW5hYmxlZCA9IGZ1bmN0aW9uIGdldFN1YmZyYW1lRW5hYmxlZCgpIHtcbiAgICByZXR1cm4gc3ViZnJhbWVFbmFibGVkO1xuICB9O1xuXG4gIHZhciBzZXRFeHByZXNzaW9uc1BsdWdpbiA9IGZ1bmN0aW9uIHNldEV4cHJlc3Npb25zUGx1Z2luKHZhbHVlKSB7XG4gICAgZXhwcmVzc2lvbnNQbHVnaW4gPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2V0RXhwcmVzc2lvbnNQbHVnaW4gPSBmdW5jdGlvbiBnZXRFeHByZXNzaW9uc1BsdWdpbigpIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbnNQbHVnaW47XG4gIH07XG5cbiAgdmFyIHNldEV4cHJlc3Npb25JbnRlcmZhY2VzID0gZnVuY3Rpb24gc2V0RXhwcmVzc2lvbkludGVyZmFjZXModmFsdWUpIHtcbiAgICBleHByZXNzaW9uc0ludGVyZmFjZXMgPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2V0RXhwcmVzc2lvbkludGVyZmFjZXMgPSBmdW5jdGlvbiBnZXRFeHByZXNzaW9uSW50ZXJmYWNlcygpIHtcbiAgICByZXR1cm4gZXhwcmVzc2lvbnNJbnRlcmZhY2VzO1xuICB9O1xuXG4gIHZhciBzZXREZWZhdWx0Q3VydmVTZWdtZW50cyA9IGZ1bmN0aW9uIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKHZhbHVlKSB7XG4gICAgZGVmYXVsdEN1cnZlU2VnbWVudHMgPSB2YWx1ZTtcbiAgfTtcblxuICB2YXIgZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMgPSBmdW5jdGlvbiBnZXREZWZhdWx0Q3VydmVTZWdtZW50cygpIHtcbiAgICByZXR1cm4gZGVmYXVsdEN1cnZlU2VnbWVudHM7XG4gIH07XG5cbiAgdmFyIHNldElkUHJlZml4ID0gZnVuY3Rpb24gc2V0SWRQcmVmaXgodmFsdWUpIHtcbiAgICBpZFByZWZpeCQxID0gdmFsdWU7XG4gIH07XG5cbiAgdmFyIGdldElkUHJlZml4ID0gZnVuY3Rpb24gZ2V0SWRQcmVmaXgoKSB7XG4gICAgcmV0dXJuIGlkUHJlZml4JDE7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlTlModHlwZSkge1xuICAgIC8vIHJldHVybiB7YXBwZW5kQ2hpbGQ6ZnVuY3Rpb24oKXt9LHNldEF0dHJpYnV0ZTpmdW5jdGlvbigpe30sc3R5bGU6e319XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOUywgdHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiBfdHlwZW9mJDUob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkNSA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDUgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQ1KG9iaik7IH1cblxuICB2YXIgZGF0YU1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9jb3VudGVySWQgPSAxO1xuICAgIHZhciBwcm9jZXNzZXMgPSBbXTtcbiAgICB2YXIgd29ya2VyRm47XG4gICAgdmFyIHdvcmtlckluc3RhbmNlO1xuICAgIHZhciB3b3JrZXJQcm94eSA9IHtcbiAgICAgIG9ubWVzc2FnZTogZnVuY3Rpb24gb25tZXNzYWdlKCkge30sXG4gICAgICBwb3N0TWVzc2FnZTogZnVuY3Rpb24gcG9zdE1lc3NhZ2UocGF0aCkge1xuICAgICAgICB3b3JrZXJGbih7XG4gICAgICAgICAgZGF0YTogcGF0aFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICAgIHZhciBfd29ya2VyU2VsZiA9IHtcbiAgICAgIHBvc3RNZXNzYWdlOiBmdW5jdGlvbiBwb3N0TWVzc2FnZShkYXRhKSB7XG4gICAgICAgIHdvcmtlclByb3h5Lm9ubWVzc2FnZSh7XG4gICAgICAgICAgZGF0YTogZGF0YVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlV29ya2VyKGZuKSB7XG4gICAgICBpZiAod2luZG93LldvcmtlciAmJiB3aW5kb3cuQmxvYiAmJiBnZXRXZWJXb3JrZXIoKSkge1xuICAgICAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFsndmFyIF93b3JrZXJTZWxmID0gc2VsZjsgc2VsZi5vbm1lc3NhZ2UgPSAnLCBmbi50b1N0cmluZygpXSwge1xuICAgICAgICAgIHR5cGU6ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgICAgIH0pOyAvLyB2YXIgYmxvYiA9IG5ldyBCbG9iKFsnc2VsZi5vbm1lc3NhZ2UgPSAnLCBmbi50b1N0cmluZygpXSwgeyB0eXBlOiAndGV4dC9qYXZhc2NyaXB0JyB9KTtcblxuICAgICAgICB2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbiAgICAgICAgcmV0dXJuIG5ldyBXb3JrZXIodXJsKTtcbiAgICAgIH1cblxuICAgICAgd29ya2VyRm4gPSBmbjtcbiAgICAgIHJldHVybiB3b3JrZXJQcm94eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXR1cFdvcmtlcigpIHtcbiAgICAgIGlmICghd29ya2VySW5zdGFuY2UpIHtcbiAgICAgICAgd29ya2VySW5zdGFuY2UgPSBjcmVhdGVXb3JrZXIoZnVuY3Rpb24gd29ya2VyU3RhcnQoZSkge1xuICAgICAgICAgIGZ1bmN0aW9uIGRhdGFGdW5jdGlvbk1hbmFnZXIoKSB7XG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZUxheWVycyhsYXllcnMsIGNvbXBzKSB7XG4gICAgICAgICAgICAgIHZhciBsYXllckRhdGE7XG4gICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcbiAgICAgICAgICAgICAgdmFyIGo7XG4gICAgICAgICAgICAgIHZhciBqTGVuO1xuICAgICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgICAgdmFyIGtMZW47XG5cbiAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbGF5ZXJEYXRhID0gbGF5ZXJzW2ldO1xuXG4gICAgICAgICAgICAgICAgaWYgKCdrcycgaW4gbGF5ZXJEYXRhICYmICFsYXllckRhdGEuY29tcGxldGVkKSB7XG4gICAgICAgICAgICAgICAgICBsYXllckRhdGEuY29tcGxldGVkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRGF0YS5oYXNNYXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrUHJvcHMgPSBsYXllckRhdGEubWFza3NQcm9wZXJ0aWVzO1xuICAgICAgICAgICAgICAgICAgICBqTGVuID0gbWFza1Byb3BzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tQcm9wc1tqXS5wdC5rLmkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnZlcnRQYXRoc1RvQWJzb2x1dGVWYWx1ZXMobWFza1Byb3BzW2pdLnB0LmspO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrTGVuID0gbWFza1Byb3BzW2pdLnB0LmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQua1trXS5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhtYXNrUHJvcHNbal0ucHQua1trXS5zWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQua1trXS5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydFBhdGhzVG9BYnNvbHV0ZVZhbHVlcyhtYXNrUHJvcHNbal0ucHQua1trXS5lWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAobGF5ZXJEYXRhLnR5ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGxheWVyRGF0YS5sYXllcnMgPSBmaW5kQ29tcExheWVycyhsYXllckRhdGEucmVmSWQsIGNvbXBzKTtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVMYXllcnMobGF5ZXJEYXRhLmxheWVycywgY29tcHMpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChsYXllckRhdGEudHkgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVTaGFwZXMobGF5ZXJEYXRhLnNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxheWVyRGF0YS50eSA9PT0gNSkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVRleHQobGF5ZXJEYXRhKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY29tcGxldGVDaGFycyhjaGFycywgYXNzZXRzKSB7XG4gICAgICAgICAgICAgIGlmIChjaGFycykge1xuICAgICAgICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gY2hhcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoY2hhcnNbaV0udCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICAvLyB2YXIgY29tcERhdGEgPSBmaW5kQ29tcChjaGFyc1tpXS5kYXRhLnJlZklkLCBhc3NldHMpO1xuICAgICAgICAgICAgICAgICAgICBjaGFyc1tpXS5kYXRhLmxheWVycyA9IGZpbmRDb21wTGF5ZXJzKGNoYXJzW2ldLmRhdGEucmVmSWQsIGFzc2V0cyk7IC8vIGNoYXJzW2ldLmRhdGEuaXAgPSAwO1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLm9wID0gOTk5OTk7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJzW2ldLmRhdGEuc3QgPSAwO1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFyc1tpXS5kYXRhLnNyID0gMTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnNbaV0udyA9IGNvbXBEYXRhLnc7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJzW2ldLmRhdGEua3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgYTogeyBrOiBbMCwgMCwgMF0sIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBwOiB7IGs6IFswLCAtY29tcERhdGEuaCwgMF0sIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICByOiB7IGs6IDAsIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBzOiB7IGs6IFsxMDAsIDEwMF0sIGE6IDAgfSxcbiAgICAgICAgICAgICAgICAgICAgLy8gICBvOiB7IGs6IDEwMCwgYTogMCB9LFxuICAgICAgICAgICAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlTGF5ZXJzKGNoYXJzW2ldLmRhdGEubGF5ZXJzLCBhc3NldHMpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBmaW5kQ29tcChpZCwgY29tcHMpIHtcbiAgICAgICAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICAgICAgICB2YXIgbGVuID0gY29tcHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBzW2ldLmlkID09PSBpZCkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbXBzW2ldO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBmaW5kQ29tcExheWVycyhpZCwgY29tcHMpIHtcbiAgICAgICAgICAgICAgdmFyIGNvbXAgPSBmaW5kQ29tcChpZCwgY29tcHMpO1xuXG4gICAgICAgICAgICAgIGlmIChjb21wKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21wLmxheWVycy5fX3VzZWQpIHtcbiAgICAgICAgICAgICAgICAgIGNvbXAubGF5ZXJzLl9fdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICByZXR1cm4gY29tcC5sYXllcnM7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoY29tcC5sYXllcnMpKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZVNoYXBlcyhhcnIpIHtcbiAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgIHZhciBsZW4gPSBhcnIubGVuZ3RoO1xuICAgICAgICAgICAgICB2YXIgajtcbiAgICAgICAgICAgICAgdmFyIGpMZW47XG5cbiAgICAgICAgICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLnR5ID09PSAnc2gnKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmsuaSkge1xuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKGFycltpXS5rcy5rKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGpMZW4gPSBhcnJbaV0ua3Muay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnJbaV0ua3Mua1tqXS5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKGFycltpXS5rcy5rW2pdLnNbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgIGlmIChhcnJbaV0ua3Mua1tqXS5lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKGFycltpXS5rcy5rW2pdLmVbMF0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAnZ3InKSB7XG4gICAgICAgICAgICAgICAgICBjb21wbGV0ZVNoYXBlcyhhcnJbaV0uaXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzKHBhdGgpIHtcbiAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgIHZhciBsZW4gPSBwYXRoLmkubGVuZ3RoO1xuXG4gICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgIHBhdGguaVtpXVswXSArPSBwYXRoLnZbaV1bMF07XG4gICAgICAgICAgICAgICAgcGF0aC5pW2ldWzFdICs9IHBhdGgudltpXVsxXTtcbiAgICAgICAgICAgICAgICBwYXRoLm9baV1bMF0gKz0gcGF0aC52W2ldWzBdO1xuICAgICAgICAgICAgICAgIHBhdGgub1tpXVsxXSArPSBwYXRoLnZbaV1bMV07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gY2hlY2tWZXJzaW9uKG1pbmltdW0sIGFuaW1WZXJzaW9uU3RyaW5nKSB7XG4gICAgICAgICAgICAgIHZhciBhbmltVmVyc2lvbiA9IGFuaW1WZXJzaW9uU3RyaW5nID8gYW5pbVZlcnNpb25TdHJpbmcuc3BsaXQoJy4nKSA6IFsxMDAsIDEwMCwgMTAwXTtcblxuICAgICAgICAgICAgICBpZiAobWluaW11bVswXSA+IGFuaW1WZXJzaW9uWzBdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoYW5pbVZlcnNpb25bMF0gPiBtaW5pbXVtWzBdKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKG1pbmltdW1bMV0gPiBhbmltVmVyc2lvblsxXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKGFuaW1WZXJzaW9uWzFdID4gbWluaW11bVsxXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChtaW5pbXVtWzJdID4gYW5pbVZlcnNpb25bMl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGlmIChhbmltVmVyc2lvblsyXSA+IG1pbmltdW1bMl0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGNoZWNrVGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzQsIDQsIDE0XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiB1cGRhdGVUZXh0TGF5ZXIodGV4dExheWVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvY3VtZW50RGF0YSA9IHRleHRMYXllci50LmQ7XG4gICAgICAgICAgICAgICAgdGV4dExheWVyLnQuZCA9IHtcbiAgICAgICAgICAgICAgICAgIGs6IFt7XG4gICAgICAgICAgICAgICAgICAgIHM6IGRvY3VtZW50RGF0YSxcbiAgICAgICAgICAgICAgICAgICAgdDogMFxuICAgICAgICAgICAgICAgICAgfV1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gaXRlcmF0ZUxheWVycyhsYXllcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyc1tpXS50eSA9PT0gNSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVUZXh0TGF5ZXIobGF5ZXJzW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tWZXJzaW9uKG1pbmltdW1WZXJzaW9uLCBhbmltYXRpb25EYXRhLnYpKSB7XG4gICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gYW5pbWF0aW9uRGF0YS5hc3NldHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KCk7XG5cbiAgICAgICAgICAgIHZhciBjaGVja0NoYXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgbWluaW11bVZlcnNpb24gPSBbNCwgNywgOTldO1xuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5jaGFycyAmJiAhY2hlY2tWZXJzaW9uKG1pbmltdW1WZXJzaW9uLCBhbmltYXRpb25EYXRhLnYpKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSBhbmltYXRpb25EYXRhLmNoYXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaGFyRGF0YSA9IGFuaW1hdGlvbkRhdGEuY2hhcnNbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYXJEYXRhLmRhdGEgJiYgY2hhckRhdGEuZGF0YS5zaGFwZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZVNoYXBlcyhjaGFyRGF0YS5kYXRhLnNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckRhdGEuZGF0YS5pcCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgY2hhckRhdGEuZGF0YS5vcCA9IDk5OTk5O1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEuc3QgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEuc3IgPSAxO1xuICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEua3MgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogWzEwMCwgMTAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYTogMFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgazogWzAsIDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBrOiAxMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgICAgICAgaWYgKCFhbmltYXRpb25EYXRhLmNoYXJzW2ldLnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJEYXRhLmRhdGEuc2hhcGVzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0eTogJ25vJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFyRGF0YS5kYXRhLnNoYXBlc1swXS5pdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiBbMTAwLCAxMDBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGE6IDBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGs6IDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNrOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgazogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhOiAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHR5OiAndHInXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KCk7XG5cbiAgICAgICAgICAgIHZhciBjaGVja1BhdGhQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgbWluaW11bVZlcnNpb24gPSBbNSwgNywgMTVdO1xuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIHVwZGF0ZVRleHRMYXllcih0ZXh0TGF5ZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGF0aERhdGEgPSB0ZXh0TGF5ZXIudC5wO1xuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXRoRGF0YS5hID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgICAgICAgcGF0aERhdGEuYSA9IHtcbiAgICAgICAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgICAgICAgazogcGF0aERhdGEuYVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBhdGhEYXRhLnAgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICBwYXRoRGF0YS5wID0ge1xuICAgICAgICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICAgICAgICBrOiBwYXRoRGF0YS5wXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcGF0aERhdGEuciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgIHBhdGhEYXRhLnIgPSB7XG4gICAgICAgICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgICAgICAgIGs6IHBhdGhEYXRhLnJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gaXRlcmF0ZUxheWVycyhsYXllcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgbGVuID0gbGF5ZXJzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyc1tpXS50eSA9PT0gNSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVUZXh0TGF5ZXIobGF5ZXJzW2ldKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tWZXJzaW9uKG1pbmltdW1WZXJzaW9uLCBhbmltYXRpb25EYXRhLnYpKSB7XG4gICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gYW5pbWF0aW9uRGF0YS5hc3NldHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KCk7XG5cbiAgICAgICAgICAgIHZhciBjaGVja0NvbG9ycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzQsIDEsIDldO1xuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVTaGFwZXMoc2hhcGVzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IHNoYXBlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGo7XG4gICAgICAgICAgICAgICAgdmFyIGpMZW47XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChzaGFwZXNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZVNoYXBlcyhzaGFwZXNbaV0uaXQpO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdmbCcgfHwgc2hhcGVzW2ldLnR5ID09PSAnc3QnKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZXNbaV0uYy5rICYmIHNoYXBlc1tpXS5jLmtbMF0uaSkge1xuICAgICAgICAgICAgICAgICAgICAgIGpMZW4gPSBzaGFwZXNbaV0uYy5rLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFwZXNbaV0uYy5rW2pdLnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5zWzBdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5zWzFdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5zWzJdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzW2ldLmMua1tqXS5zWzNdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXBlc1tpXS5jLmtbal0uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rW2pdLmVbMF0gLz0gMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rW2pdLmVbMV0gLz0gMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rW2pdLmVbMl0gLz0gMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rW2pdLmVbM10gLz0gMjU1O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rWzBdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rWzFdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rWzJdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgICBzaGFwZXNbaV0uYy5rWzNdIC89IDI1NTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGZ1bmN0aW9uIGl0ZXJhdGVMYXllcnMobGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgIGlmIChsYXllcnNbaV0udHkgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlcmF0ZVNoYXBlcyhsYXllcnNbaV0uc2hhcGVzKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFuaW1hdGlvbkRhdGEpIHtcbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tWZXJzaW9uKG1pbmltdW1WZXJzaW9uLCBhbmltYXRpb25EYXRhLnYpKSB7XG4gICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzKTtcblxuICAgICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbkRhdGEuYXNzZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGVuID0gYW5pbWF0aW9uRGF0YS5hc3NldHMubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0c1tpXS5sYXllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZXJhdGVMYXllcnMoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKTtcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KCk7XG5cbiAgICAgICAgICAgIHZhciBjaGVja1NoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIG1pbmltdW1WZXJzaW9uID0gWzQsIDQsIDE4XTtcblxuICAgICAgICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZUNsb3NpbmdTaGFwZXMoYXJyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGo7XG4gICAgICAgICAgICAgICAgdmFyIGpMZW47XG5cbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGFycltpXS50eSA9PT0gJ3NoJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmsuaSkge1xuICAgICAgICAgICAgICAgICAgICAgIGFycltpXS5rcy5rLmMgPSBhcnJbaV0uY2xvc2VkO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgIGpMZW4gPSBhcnJbaV0ua3Muay5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0ua3Mua1tqXS5zWzBdLmMgPSBhcnJbaV0uY2xvc2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXJyW2ldLmtzLmtbal0uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBhcnJbaV0ua3Mua1tqXS5lWzBdLmMgPSBhcnJbaV0uY2xvc2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVDbG9zaW5nU2hhcGVzKGFycltpXS5pdCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gaXRlcmF0ZUxheWVycyhsYXllcnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXJEYXRhO1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBsZW4gPSBsYXllcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHZhciBqO1xuICAgICAgICAgICAgICAgIHZhciBqTGVuO1xuICAgICAgICAgICAgICAgIHZhciBrO1xuICAgICAgICAgICAgICAgIHZhciBrTGVuO1xuXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgICBsYXllckRhdGEgPSBsYXllcnNbaV07XG5cbiAgICAgICAgICAgICAgICAgIGlmIChsYXllckRhdGEuaGFzTWFzaykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza1Byb3BzID0gbGF5ZXJEYXRhLm1hc2tzUHJvcGVydGllcztcbiAgICAgICAgICAgICAgICAgICAgakxlbiA9IG1hc2tQcm9wcy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQuay5pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrUHJvcHNbal0ucHQuay5jID0gbWFza1Byb3BzW2pdLmNsO1xuICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBrTGVuID0gbWFza1Byb3BzW2pdLnB0LmsubGVuZ3RoO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXNrUHJvcHNbal0ucHQua1trXS5zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Byb3BzW2pdLnB0Lmtba10uc1swXS5jID0gbWFza1Byb3BzW2pdLmNsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tQcm9wc1tqXS5wdC5rW2tdLmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrUHJvcHNbal0ucHQua1trXS5lWzBdLmMgPSBtYXNrUHJvcHNbal0uY2w7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgaWYgKGxheWVyRGF0YS50eSA9PT0gNCkge1xuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZUNsb3NpbmdTaGFwZXMobGF5ZXJEYXRhLnNoYXBlcyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhbmltYXRpb25EYXRhKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNoZWNrVmVyc2lvbihtaW5pbXVtVmVyc2lvbiwgYW5pbWF0aW9uRGF0YS52KSkge1xuICAgICAgICAgICAgICAgICAgaXRlcmF0ZUxheWVycyhhbmltYXRpb25EYXRhLmxheWVycyk7XG5cbiAgICAgICAgICAgICAgICAgIGlmIChhbmltYXRpb25EYXRhLmFzc2V0cykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxlbiA9IGFuaW1hdGlvbkRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5hc3NldHNbaV0ubGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVyYXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEuYXNzZXRzW2ldLmxheWVycyk7XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSgpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZURhdGEoYW5pbWF0aW9uRGF0YSkge1xuICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uRGF0YS5fX2NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY2hlY2tDb2xvcnMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNoZWNrVGV4dChhbmltYXRpb25EYXRhKTtcbiAgICAgICAgICAgICAgY2hlY2tDaGFycyhhbmltYXRpb25EYXRhKTtcbiAgICAgICAgICAgICAgY2hlY2tQYXRoUHJvcGVydGllcyhhbmltYXRpb25EYXRhKTtcbiAgICAgICAgICAgICAgY2hlY2tTaGFwZXMoYW5pbWF0aW9uRGF0YSk7XG4gICAgICAgICAgICAgIGNvbXBsZXRlTGF5ZXJzKGFuaW1hdGlvbkRhdGEubGF5ZXJzLCBhbmltYXRpb25EYXRhLmFzc2V0cyk7XG4gICAgICAgICAgICAgIGNvbXBsZXRlQ2hhcnMoYW5pbWF0aW9uRGF0YS5jaGFycywgYW5pbWF0aW9uRGF0YS5hc3NldHMpO1xuICAgICAgICAgICAgICBhbmltYXRpb25EYXRhLl9fY29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjb21wbGV0ZVRleHQoZGF0YSkge1xuICAgICAgICAgICAgICBpZiAoZGF0YS50LmEubGVuZ3RoID09PSAwICYmICEoJ20nIGluIGRhdGEudC5wKSkgey8vIGRhdGEuc2luZ2xlU2hhcGUgPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBtb2R1bGVPYiA9IHt9O1xuICAgICAgICAgICAgbW9kdWxlT2IuY29tcGxldGVEYXRhID0gY29tcGxldGVEYXRhO1xuICAgICAgICAgICAgbW9kdWxlT2IuY2hlY2tDb2xvcnMgPSBjaGVja0NvbG9ycztcbiAgICAgICAgICAgIG1vZHVsZU9iLmNoZWNrQ2hhcnMgPSBjaGVja0NoYXJzO1xuICAgICAgICAgICAgbW9kdWxlT2IuY2hlY2tQYXRoUHJvcGVydGllcyA9IGNoZWNrUGF0aFByb3BlcnRpZXM7XG4gICAgICAgICAgICBtb2R1bGVPYi5jaGVja1NoYXBlcyA9IGNoZWNrU2hhcGVzO1xuICAgICAgICAgICAgbW9kdWxlT2IuY29tcGxldGVMYXllcnMgPSBjb21wbGV0ZUxheWVycztcbiAgICAgICAgICAgIHJldHVybiBtb2R1bGVPYjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV93b3JrZXJTZWxmLmRhdGFNYW5hZ2VyKSB7XG4gICAgICAgICAgICBfd29ya2VyU2VsZi5kYXRhTWFuYWdlciA9IGRhdGFGdW5jdGlvbk1hbmFnZXIoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIV93b3JrZXJTZWxmLmFzc2V0TG9hZGVyKSB7XG4gICAgICAgICAgICBfd29ya2VyU2VsZi5hc3NldExvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0UmVzcG9uc2UoeGhyKSB7XG4gICAgICAgICAgICAgICAgLy8gdXNpbmcgdHlwZW9mIGRvdWJsZXMgdGhlIHRpbWUgb2YgZXhlY3V0aW9uIG9mIHRoaXMgbWV0aG9kLFxuICAgICAgICAgICAgICAgIC8vIHNvIGlmIGF2YWlsYWJsZSwgaXQncyBiZXR0ZXIgdG8gdXNlIHRoZSBoZWFkZXIgdG8gdmFsaWRhdGUgdGhlIHR5cGVcbiAgICAgICAgICAgICAgICB2YXIgY29udGVudFR5cGVIZWFkZXIgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoJ2NvbnRlbnQtdHlwZScpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnRlbnRUeXBlSGVhZGVyICYmIHhoci5yZXNwb25zZVR5cGUgPT09ICdqc29uJyAmJiBjb250ZW50VHlwZUhlYWRlci5pbmRleE9mKCdqc29uJykgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2UgJiYgX3R5cGVvZiQ1KHhoci5yZXNwb25zZSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4geGhyLnJlc3BvbnNlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICh4aHIucmVzcG9uc2UgJiYgdHlwZW9mIHhoci5yZXNwb25zZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHhoci5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgZnVuY3Rpb24gbG9hZEFzc2V0KHBhdGgsIGZ1bGxQYXRoLCBjYWxsYmFjaywgZXJyb3JDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHZhciByZXNwb25zZTtcbiAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7IC8vIHNldCByZXNwb25zZVR5cGUgYWZ0ZXIgY2FsbGluZyBvcGVuIG9yIElFIHdpbGwgYnJlYWsuXG5cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgLy8gVGhpcyBjcmFzaGVzIG9uIEFuZHJvaWQgV2ViVmlldyBwcmlvciB0byBLaXRLYXRcbiAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnanNvbic7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cblxuICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xuICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gZm9ybWF0UmVzcG9uc2UoeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gZm9ybWF0UmVzcG9uc2UoeGhyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgIC8vIEhhY2sgdG8gd29ya2Fyb3VuZCBiYW5uZXIgdmFsaWRhdGlvblxuICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oWydHJywgJ0UnLCAnVCddLmpvaW4oJycpLCBwYXRoLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgLy8gSGFjayB0byB3b3JrYXJvdW5kIGJhbm5lciB2YWxpZGF0aW9uXG4gICAgICAgICAgICAgICAgICB4aHIub3BlbihbJ0cnLCAnRScsICdUJ10uam9pbignJyksIGZ1bGxQYXRoICsgJy8nICsgcGF0aCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgeGhyLnNlbmQoKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbG9hZDogbG9hZEFzc2V0XG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGUuZGF0YS50eXBlID09PSAnbG9hZEFuaW1hdGlvbicpIHtcbiAgICAgICAgICAgIF93b3JrZXJTZWxmLmFzc2V0TG9hZGVyLmxvYWQoZS5kYXRhLnBhdGgsIGUuZGF0YS5mdWxsUGF0aCwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgX3dvcmtlclNlbGYuZGF0YU1hbmFnZXIuY29tcGxldGVEYXRhKGRhdGEpO1xuXG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogZS5kYXRhLmlkLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGRhdGEsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogZS5kYXRhLmlkLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZS5kYXRhLnR5cGUgPT09ICdjb21wbGV0ZScpIHtcbiAgICAgICAgICAgIHZhciBhbmltYXRpb24gPSBlLmRhdGEuYW5pbWF0aW9uO1xuXG4gICAgICAgICAgICBfd29ya2VyU2VsZi5kYXRhTWFuYWdlci5jb21wbGV0ZURhdGEoYW5pbWF0aW9uKTtcblxuICAgICAgICAgICAgX3dvcmtlclNlbGYucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICBpZDogZS5kYXRhLmlkLFxuICAgICAgICAgICAgICBwYXlsb2FkOiBhbmltYXRpb24sXG4gICAgICAgICAgICAgIHN0YXR1czogJ3N1Y2Nlc3MnXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGUuZGF0YS50eXBlID09PSAnbG9hZERhdGEnKSB7XG4gICAgICAgICAgICBfd29ya2VyU2VsZi5hc3NldExvYWRlci5sb2FkKGUuZGF0YS5wYXRoLCBlLmRhdGEuZnVsbFBhdGgsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogZS5kYXRhLmlkLFxuICAgICAgICAgICAgICAgIHBheWxvYWQ6IGRhdGEsXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcydcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIF93b3JrZXJTZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBpZDogZS5kYXRhLmlkLFxuICAgICAgICAgICAgICAgIHN0YXR1czogJ2Vycm9yJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgd29ya2VySW5zdGFuY2Uub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgdmFyIGRhdGEgPSBldmVudC5kYXRhO1xuICAgICAgICAgIHZhciBpZCA9IGRhdGEuaWQ7XG4gICAgICAgICAgdmFyIHByb2Nlc3MgPSBwcm9jZXNzZXNbaWRdO1xuICAgICAgICAgIHByb2Nlc3Nlc1tpZF0gPSBudWxsO1xuXG4gICAgICAgICAgaWYgKGRhdGEuc3RhdHVzID09PSAnc3VjY2VzcycpIHtcbiAgICAgICAgICAgIHByb2Nlc3Mub25Db21wbGV0ZShkYXRhLnBheWxvYWQpO1xuICAgICAgICAgIH0gZWxzZSBpZiAocHJvY2Vzcy5vbkVycm9yKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm9uRXJyb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKSB7XG4gICAgICBfY291bnRlcklkICs9IDE7XG4gICAgICB2YXIgaWQgPSAncHJvY2Vzc0lkXycgKyBfY291bnRlcklkO1xuICAgICAgcHJvY2Vzc2VzW2lkXSA9IHtcbiAgICAgICAgb25Db21wbGV0ZTogb25Db21wbGV0ZSxcbiAgICAgICAgb25FcnJvcjogb25FcnJvclxuICAgICAgfTtcbiAgICAgIHJldHVybiBpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkQW5pbWF0aW9uKHBhdGgsIG9uQ29tcGxldGUsIG9uRXJyb3IpIHtcbiAgICAgIHNldHVwV29ya2VyKCk7XG4gICAgICB2YXIgcHJvY2Vzc0lkID0gY3JlYXRlUHJvY2VzcyhvbkNvbXBsZXRlLCBvbkVycm9yKTtcbiAgICAgIHdvcmtlckluc3RhbmNlLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgdHlwZTogJ2xvYWRBbmltYXRpb24nLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBmdWxsUGF0aDogd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgaWQ6IHByb2Nlc3NJZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZERhdGEocGF0aCwgb25Db21wbGV0ZSwgb25FcnJvcikge1xuICAgICAgc2V0dXBXb3JrZXIoKTtcbiAgICAgIHZhciBwcm9jZXNzSWQgPSBjcmVhdGVQcm9jZXNzKG9uQ29tcGxldGUsIG9uRXJyb3IpO1xuICAgICAgd29ya2VySW5zdGFuY2UucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnbG9hZERhdGEnLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBmdWxsUGF0aDogd2luZG93LmxvY2F0aW9uLm9yaWdpbiArIHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgaWQ6IHByb2Nlc3NJZFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29tcGxldGVBbmltYXRpb24oYW5pbSwgb25Db21wbGV0ZSwgb25FcnJvcikge1xuICAgICAgc2V0dXBXb3JrZXIoKTtcbiAgICAgIHZhciBwcm9jZXNzSWQgPSBjcmVhdGVQcm9jZXNzKG9uQ29tcGxldGUsIG9uRXJyb3IpO1xuICAgICAgd29ya2VySW5zdGFuY2UucG9zdE1lc3NhZ2Uoe1xuICAgICAgICB0eXBlOiAnY29tcGxldGUnLFxuICAgICAgICBhbmltYXRpb246IGFuaW0sXG4gICAgICAgIGlkOiBwcm9jZXNzSWRcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBsb2FkQW5pbWF0aW9uOiBsb2FkQW5pbWF0aW9uLFxuICAgICAgbG9hZERhdGE6IGxvYWREYXRhLFxuICAgICAgY29tcGxldGVBbmltYXRpb246IGNvbXBsZXRlQW5pbWF0aW9uXG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBJbWFnZVByZWxvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJveHlJbWFnZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjYW52YXMgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgICAgY2FudmFzLndpZHRoID0gMTtcbiAgICAgIGNhbnZhcy5oZWlnaHQgPSAxO1xuICAgICAgdmFyIGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDApJztcbiAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCAxLCAxKTtcbiAgICAgIHJldHVybiBjYW52YXM7XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gaW1hZ2VMb2FkZWQoKSB7XG4gICAgICB0aGlzLmxvYWRlZEFzc2V0cyArPSAxO1xuXG4gICAgICBpZiAodGhpcy5sb2FkZWRBc3NldHMgPT09IHRoaXMudG90YWxJbWFnZXMgJiYgdGhpcy5sb2FkZWRGb290YWdlc0NvdW50ID09PSB0aGlzLnRvdGFsRm9vdGFnZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkQ2IpIHtcbiAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZENiKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZm9vdGFnZUxvYWRlZCgpIHtcbiAgICAgIHRoaXMubG9hZGVkRm9vdGFnZXNDb3VudCArPSAxO1xuXG4gICAgICBpZiAodGhpcy5sb2FkZWRBc3NldHMgPT09IHRoaXMudG90YWxJbWFnZXMgJiYgdGhpcy5sb2FkZWRGb290YWdlc0NvdW50ID09PSB0aGlzLnRvdGFsRm9vdGFnZXMpIHtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzTG9hZGVkQ2IpIHtcbiAgICAgICAgICB0aGlzLmltYWdlc0xvYWRlZENiKG51bGwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0QXNzZXRzUGF0aChhc3NldERhdGEsIGFzc2V0c1BhdGgsIG9yaWdpbmFsUGF0aCkge1xuICAgICAgdmFyIHBhdGggPSAnJztcblxuICAgICAgaWYgKGFzc2V0RGF0YS5lKSB7XG4gICAgICAgIHBhdGggPSBhc3NldERhdGEucDtcbiAgICAgIH0gZWxzZSBpZiAoYXNzZXRzUGF0aCkge1xuICAgICAgICB2YXIgaW1hZ2VQYXRoID0gYXNzZXREYXRhLnA7XG5cbiAgICAgICAgaWYgKGltYWdlUGF0aC5pbmRleE9mKCdpbWFnZXMvJykgIT09IC0xKSB7XG4gICAgICAgICAgaW1hZ2VQYXRoID0gaW1hZ2VQYXRoLnNwbGl0KCcvJylbMV07XG4gICAgICAgIH1cblxuICAgICAgICBwYXRoID0gYXNzZXRzUGF0aCArIGltYWdlUGF0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhdGggPSBvcmlnaW5hbFBhdGg7XG4gICAgICAgIHBhdGggKz0gYXNzZXREYXRhLnUgPyBhc3NldERhdGEudSA6ICcnO1xuICAgICAgICBwYXRoICs9IGFzc2V0RGF0YS5wO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcGF0aDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXN0SW1hZ2VMb2FkZWQoaW1nKSB7XG4gICAgICB2YXIgX2NvdW50ID0gMDtcbiAgICAgIHZhciBpbnRlcnZhbElkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYm94ID0gaW1nLmdldEJCb3goKTtcblxuICAgICAgICBpZiAoYm94LndpZHRoIHx8IF9jb3VudCA+IDUwMCkge1xuICAgICAgICAgIHRoaXMuX2ltYWdlTG9hZGVkKCk7XG5cbiAgICAgICAgICBjbGVhckludGVydmFsKGludGVydmFsSWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgX2NvdW50ICs9IDE7XG4gICAgICB9LmJpbmQodGhpcyksIDUwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbWFnZURhdGEoYXNzZXREYXRhKSB7XG4gICAgICB2YXIgcGF0aCA9IGdldEFzc2V0c1BhdGgoYXNzZXREYXRhLCB0aGlzLmFzc2V0c1BhdGgsIHRoaXMucGF0aCk7XG4gICAgICB2YXIgaW1nID0gY3JlYXRlTlMoJ2ltYWdlJyk7XG5cbiAgICAgIGlmIChpc1NhZmFyaSkge1xuICAgICAgICB0aGlzLnRlc3RJbWFnZUxvYWRlZChpbWcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLl9pbWFnZUxvYWRlZCwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9iLmltZyA9IHByb3h5SW1hZ2U7XG5cbiAgICAgICAgdGhpcy5faW1hZ2VMb2FkZWQoKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgZmFsc2UpO1xuICAgICAgaW1nLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ2hyZWYnLCBwYXRoKTtcblxuICAgICAgaWYgKHRoaXMuX2VsZW1lbnRIZWxwZXIuYXBwZW5kKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRIZWxwZXIuYXBwZW5kKGltZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9lbGVtZW50SGVscGVyLmFwcGVuZENoaWxkKGltZyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgaW1nOiBpbWcsXG4gICAgICAgIGFzc2V0RGF0YTogYXNzZXREYXRhXG4gICAgICB9O1xuICAgICAgcmV0dXJuIG9iO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUltZ0RhdGEoYXNzZXREYXRhKSB7XG4gICAgICB2YXIgcGF0aCA9IGdldEFzc2V0c1BhdGgoYXNzZXREYXRhLCB0aGlzLmFzc2V0c1BhdGgsIHRoaXMucGF0aCk7XG4gICAgICB2YXIgaW1nID0gY3JlYXRlVGFnKCdpbWcnKTtcbiAgICAgIGltZy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCB0aGlzLl9pbWFnZUxvYWRlZCwgZmFsc2UpO1xuICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBvYi5pbWcgPSBwcm94eUltYWdlO1xuXG4gICAgICAgIHRoaXMuX2ltYWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcyksIGZhbHNlKTtcbiAgICAgIGltZy5zcmMgPSBwYXRoO1xuICAgICAgdmFyIG9iID0ge1xuICAgICAgICBpbWc6IGltZyxcbiAgICAgICAgYXNzZXREYXRhOiBhc3NldERhdGFcbiAgICAgIH07XG4gICAgICByZXR1cm4gb2I7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRm9vdGFnZURhdGEoZGF0YSkge1xuICAgICAgdmFyIG9iID0ge1xuICAgICAgICBhc3NldERhdGE6IGRhdGFcbiAgICAgIH07XG4gICAgICB2YXIgcGF0aCA9IGdldEFzc2V0c1BhdGgoZGF0YSwgdGhpcy5hc3NldHNQYXRoLCB0aGlzLnBhdGgpO1xuICAgICAgZGF0YU1hbmFnZXIubG9hZERhdGEocGF0aCwgZnVuY3Rpb24gKGZvb3RhZ2VEYXRhKSB7XG4gICAgICAgIG9iLmltZyA9IGZvb3RhZ2VEYXRhO1xuXG4gICAgICAgIHRoaXMuX2Zvb3RhZ2VMb2FkZWQoKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBvYi5pbWcgPSB7fTtcblxuICAgICAgICB0aGlzLl9mb290YWdlTG9hZGVkKCk7XG4gICAgICB9LmJpbmQodGhpcykpO1xuICAgICAgcmV0dXJuIG9iO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRBc3NldHMoYXNzZXRzLCBjYikge1xuICAgICAgdGhpcy5pbWFnZXNMb2FkZWRDYiA9IGNiO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gYXNzZXRzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICghYXNzZXRzW2ldLmxheWVycykge1xuICAgICAgICAgIGlmICghYXNzZXRzW2ldLnQgfHwgYXNzZXRzW2ldLnQgPT09ICdzZXEnKSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsSW1hZ2VzICs9IDE7XG4gICAgICAgICAgICB0aGlzLmltYWdlcy5wdXNoKHRoaXMuX2NyZWF0ZUltYWdlRGF0YShhc3NldHNbaV0pKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKGFzc2V0c1tpXS50ID09PSAzKSB7XG4gICAgICAgICAgICB0aGlzLnRvdGFsRm9vdGFnZXMgKz0gMTtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VzLnB1c2godGhpcy5jcmVhdGVGb290YWdlRGF0YShhc3NldHNbaV0pKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRQYXRoKHBhdGgpIHtcbiAgICAgIHRoaXMucGF0aCA9IHBhdGggfHwgJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0QXNzZXRzUGF0aChwYXRoKSB7XG4gICAgICB0aGlzLmFzc2V0c1BhdGggPSBwYXRoIHx8ICcnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEFzc2V0KGFzc2V0RGF0YSkge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuaW1hZ2VzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuaW1hZ2VzW2ldLmFzc2V0RGF0YSA9PT0gYXNzZXREYXRhKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VzW2ldLmltZztcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkQ2IgPSBudWxsO1xuICAgICAgdGhpcy5pbWFnZXMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2FkZWRJbWFnZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b3RhbEltYWdlcyA9PT0gdGhpcy5sb2FkZWRBc3NldHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZGVkRm9vdGFnZXMoKSB7XG4gICAgICByZXR1cm4gdGhpcy50b3RhbEZvb3RhZ2VzID09PSB0aGlzLmxvYWRlZEZvb3RhZ2VzQ291bnQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVUeXBlKHR5cGUsIGVsZW1lbnRIZWxwZXIpIHtcbiAgICAgIGlmICh0eXBlID09PSAnc3ZnJykge1xuICAgICAgICB0aGlzLl9lbGVtZW50SGVscGVyID0gZWxlbWVudEhlbHBlcjtcbiAgICAgICAgdGhpcy5fY3JlYXRlSW1hZ2VEYXRhID0gdGhpcy5jcmVhdGVJbWFnZURhdGEuYmluZCh0aGlzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUltYWdlRGF0YSA9IHRoaXMuY3JlYXRlSW1nRGF0YS5iaW5kKHRoaXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIEltYWdlUHJlbG9hZGVyRmFjdG9yeSgpIHtcbiAgICAgIHRoaXMuX2ltYWdlTG9hZGVkID0gaW1hZ2VMb2FkZWQuYmluZCh0aGlzKTtcbiAgICAgIHRoaXMuX2Zvb3RhZ2VMb2FkZWQgPSBmb290YWdlTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLnRlc3RJbWFnZUxvYWRlZCA9IHRlc3RJbWFnZUxvYWRlZC5iaW5kKHRoaXMpO1xuICAgICAgdGhpcy5jcmVhdGVGb290YWdlRGF0YSA9IGNyZWF0ZUZvb3RhZ2VEYXRhLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmFzc2V0c1BhdGggPSAnJztcbiAgICAgIHRoaXMucGF0aCA9ICcnO1xuICAgICAgdGhpcy50b3RhbEltYWdlcyA9IDA7XG4gICAgICB0aGlzLnRvdGFsRm9vdGFnZXMgPSAwO1xuICAgICAgdGhpcy5sb2FkZWRBc3NldHMgPSAwO1xuICAgICAgdGhpcy5sb2FkZWRGb290YWdlc0NvdW50ID0gMDtcbiAgICAgIHRoaXMuaW1hZ2VzTG9hZGVkQ2IgPSBudWxsO1xuICAgICAgdGhpcy5pbWFnZXMgPSBbXTtcbiAgICB9XG5cbiAgICBJbWFnZVByZWxvYWRlckZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgbG9hZEFzc2V0czogbG9hZEFzc2V0cyxcbiAgICAgIHNldEFzc2V0c1BhdGg6IHNldEFzc2V0c1BhdGgsXG4gICAgICBzZXRQYXRoOiBzZXRQYXRoLFxuICAgICAgbG9hZGVkSW1hZ2VzOiBsb2FkZWRJbWFnZXMsXG4gICAgICBsb2FkZWRGb290YWdlczogbG9hZGVkRm9vdGFnZXMsXG4gICAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgICAgZ2V0QXNzZXQ6IGdldEFzc2V0LFxuICAgICAgY3JlYXRlSW1nRGF0YTogY3JlYXRlSW1nRGF0YSxcbiAgICAgIGNyZWF0ZUltYWdlRGF0YTogY3JlYXRlSW1hZ2VEYXRhLFxuICAgICAgaW1hZ2VMb2FkZWQ6IGltYWdlTG9hZGVkLFxuICAgICAgZm9vdGFnZUxvYWRlZDogZm9vdGFnZUxvYWRlZCxcbiAgICAgIHNldENhY2hlVHlwZTogc2V0Q2FjaGVUeXBlXG4gICAgfTtcbiAgICByZXR1cm4gSW1hZ2VQcmVsb2FkZXJGYWN0b3J5O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gQmFzZUV2ZW50KCkge31cblxuICBCYXNlRXZlbnQucHJvdG90eXBlID0ge1xuICAgIHRyaWdnZXJFdmVudDogZnVuY3Rpb24gdHJpZ2dlckV2ZW50KGV2ZW50TmFtZSwgYXJncykge1xuICAgICAgaWYgKHRoaXMuX2Nic1tldmVudE5hbWVdKSB7XG4gICAgICAgIHZhciBjYWxsYmFja3MgPSB0aGlzLl9jYnNbZXZlbnROYW1lXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNhbGxiYWNrcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgIGNhbGxiYWNrc1tpXShhcmdzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrKSB7XG4gICAgICBpZiAoIXRoaXMuX2Nic1tldmVudE5hbWVdKSB7XG4gICAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdID0gW107XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2Nic1tldmVudE5hbWVdLnB1c2goY2FsbGJhY2spO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBjYWxsYmFjayk7XG4gICAgICB9LmJpbmQodGhpcyk7XG4gICAgfSxcbiAgICByZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2spIHtcbiAgICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fY2JzW2V2ZW50TmFtZV0gPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLl9jYnNbZXZlbnROYW1lXSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLl9jYnNbZXZlbnROYW1lXS5sZW5ndGg7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5fY2JzW2V2ZW50TmFtZV1baV0gPT09IGNhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9jYnNbZXZlbnROYW1lXS5zcGxpY2UoaSwgMSk7XG5cbiAgICAgICAgICAgIGkgLT0gMTtcbiAgICAgICAgICAgIGxlbiAtPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fY2JzW2V2ZW50TmFtZV0ubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5fY2JzW2V2ZW50TmFtZV0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciBtYXJrZXJQYXJzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gcGFyc2VQYXlsb2FkTGluZXMocGF5bG9hZCkge1xuICAgICAgdmFyIGxpbmVzID0gcGF5bG9hZC5zcGxpdCgnXFxyXFxuJyk7XG4gICAgICB2YXIga2V5cyA9IHt9O1xuICAgICAgdmFyIGxpbmU7XG4gICAgICB2YXIga2V5c0NvdW50ID0gMDtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsaW5lID0gbGluZXNbaV0uc3BsaXQoJzonKTtcblxuICAgICAgICBpZiAobGluZS5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICBrZXlzW2xpbmVbMF1dID0gbGluZVsxXS50cmltKCk7XG4gICAgICAgICAga2V5c0NvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGtleXNDb3VudCA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGtleXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChfbWFya2Vycykge1xuICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBfbWFya2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB2YXIgX21hcmtlciA9IF9tYXJrZXJzW2ldO1xuICAgICAgICB2YXIgbWFya2VyRGF0YSA9IHtcbiAgICAgICAgICB0aW1lOiBfbWFya2VyLnRtLFxuICAgICAgICAgIGR1cmF0aW9uOiBfbWFya2VyLmRyXG4gICAgICAgIH07XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBtYXJrZXJEYXRhLnBheWxvYWQgPSBKU09OLnBhcnNlKF9tYXJrZXJzW2ldLmNtKTtcbiAgICAgICAgfSBjYXRjaCAoXykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBtYXJrZXJEYXRhLnBheWxvYWQgPSBwYXJzZVBheWxvYWRMaW5lcyhfbWFya2Vyc1tpXS5jbSk7XG4gICAgICAgICAgfSBjYXRjaCAoX18pIHtcbiAgICAgICAgICAgIG1hcmtlckRhdGEucGF5bG9hZCA9IHtcbiAgICAgICAgICAgICAgbmFtZTogX21hcmtlcnNbaV0uY21cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbWFya2Vycy5wdXNoKG1hcmtlckRhdGEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbWFya2VycztcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIFByb2plY3RJbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gcmVnaXN0ZXJDb21wb3NpdGlvbihjb21wKSB7XG4gICAgICB0aGlzLmNvbXBvc2l0aW9ucy5wdXNoKGNvbXApO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBfdGhpc1Byb2plY3RGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuY29tcG9zaXRpb25zLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmICh0aGlzLmNvbXBvc2l0aW9uc1tpXS5kYXRhICYmIHRoaXMuY29tcG9zaXRpb25zW2ldLmRhdGEubm0gPT09IG5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbXBvc2l0aW9uc1tpXS5wcmVwYXJlRnJhbWUgJiYgdGhpcy5jb21wb3NpdGlvbnNbaV0uZGF0YS54dCkge1xuICAgICAgICAgICAgICB0aGlzLmNvbXBvc2l0aW9uc1tpXS5wcmVwYXJlRnJhbWUodGhpcy5jdXJyZW50RnJhbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wb3NpdGlvbnNbaV0uY29tcEludGVyZmFjZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgX3RoaXNQcm9qZWN0RnVuY3Rpb24uY29tcG9zaXRpb25zID0gW107XG4gICAgICBfdGhpc1Byb2plY3RGdW5jdGlvbi5jdXJyZW50RnJhbWUgPSAwO1xuICAgICAgX3RoaXNQcm9qZWN0RnVuY3Rpb24ucmVnaXN0ZXJDb21wb3NpdGlvbiA9IHJlZ2lzdGVyQ29tcG9zaXRpb247XG4gICAgICByZXR1cm4gX3RoaXNQcm9qZWN0RnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciByZW5kZXJlcnMgPSB7fTtcblxuICB2YXIgcmVnaXN0ZXJSZW5kZXJlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyUmVuZGVyZXIoa2V5LCB2YWx1ZSkge1xuICAgIHJlbmRlcmVyc1trZXldID0gdmFsdWU7XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0UmVuZGVyZXIoa2V5KSB7XG4gICAgcmV0dXJuIHJlbmRlcmVyc1trZXldO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UmVnaXN0ZXJlZFJlbmRlcmVyKCkge1xuICAgIC8vIFJldHVybnMgY2FudmFzIGJ5IGRlZmF1bHQgZm9yIGNvbXBhdGliaWxpdHlcbiAgICBpZiAocmVuZGVyZXJzLmNhbnZhcykge1xuICAgICAgcmV0dXJuICdjYW52YXMnO1xuICAgIH0gLy8gUmV0dXJucyBhbnkgcmVuZGVyZXIgdGhhdCBpcyByZWdpc3RlcmVkXG5cblxuICAgIGZvciAodmFyIGtleSBpbiByZW5kZXJlcnMpIHtcbiAgICAgIGlmIChyZW5kZXJlcnNba2V5XSkge1xuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGZ1bmN0aW9uIF90eXBlb2YkNChvYmopIHsgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiOyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZiQ0ID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YkNCA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mJDQob2JqKTsgfVxuXG4gIHZhciBBbmltYXRpb25JdGVtID0gZnVuY3Rpb24gQW5pbWF0aW9uSXRlbSgpIHtcbiAgICB0aGlzLl9jYnMgPSBbXTtcbiAgICB0aGlzLm5hbWUgPSAnJztcbiAgICB0aGlzLnBhdGggPSAnJztcbiAgICB0aGlzLmlzTG9hZGVkID0gZmFsc2U7XG4gICAgdGhpcy5jdXJyZW50RnJhbWUgPSAwO1xuICAgIHRoaXMuY3VycmVudFJhd0ZyYW1lID0gMDtcbiAgICB0aGlzLmZpcnN0RnJhbWUgPSAwO1xuICAgIHRoaXMudG90YWxGcmFtZXMgPSAwO1xuICAgIHRoaXMuZnJhbWVSYXRlID0gMDtcbiAgICB0aGlzLmZyYW1lTXVsdCA9IDA7XG4gICAgdGhpcy5wbGF5U3BlZWQgPSAxO1xuICAgIHRoaXMucGxheURpcmVjdGlvbiA9IDE7XG4gICAgdGhpcy5wbGF5Q291bnQgPSAwO1xuICAgIHRoaXMuYW5pbWF0aW9uRGF0YSA9IHt9O1xuICAgIHRoaXMuYXNzZXRzID0gW107XG4gICAgdGhpcy5pc1BhdXNlZCA9IHRydWU7XG4gICAgdGhpcy5hdXRvcGxheSA9IGZhbHNlO1xuICAgIHRoaXMubG9vcCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXJlciA9IG51bGw7XG4gICAgdGhpcy5hbmltYXRpb25JRCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIHRoaXMuYXNzZXRzUGF0aCA9ICcnO1xuICAgIHRoaXMudGltZUNvbXBsZXRlZCA9IDA7XG4gICAgdGhpcy5zZWdtZW50UG9zID0gMDtcbiAgICB0aGlzLmlzU3ViZnJhbWVFbmFibGVkID0gZ2V0U3ViZnJhbWVFbmFibGVkKCk7XG4gICAgdGhpcy5zZWdtZW50cyA9IFtdO1xuICAgIHRoaXMuX2lkbGUgPSB0cnVlO1xuICAgIHRoaXMuX2NvbXBsZXRlZExvb3AgPSBmYWxzZTtcbiAgICB0aGlzLnByb2plY3RJbnRlcmZhY2UgPSBQcm9qZWN0SW50ZXJmYWNlKCk7XG4gICAgdGhpcy5pbWFnZVByZWxvYWRlciA9IG5ldyBJbWFnZVByZWxvYWRlcigpO1xuICAgIHRoaXMuYXVkaW9Db250cm9sbGVyID0gYXVkaW9Db250cm9sbGVyRmFjdG9yeSgpO1xuICAgIHRoaXMubWFya2VycyA9IFtdO1xuICAgIHRoaXMuY29uZmlnQW5pbWF0aW9uID0gdGhpcy5jb25maWdBbmltYXRpb24uYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uU2V0dXBFcnJvciA9IHRoaXMub25TZXR1cEVycm9yLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNlZ21lbnRDb21wbGV0ZSA9IHRoaXMub25TZWdtZW50Q29tcGxldGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLmRyYXduRnJhbWVFdmVudCA9IG5ldyBCTUVudGVyRnJhbWVFdmVudCgnZHJhd25GcmFtZScsIDAsIDAsIDApO1xuICAgIHRoaXMuZXhwcmVzc2lvbnNQbHVnaW4gPSBnZXRFeHByZXNzaW9uc1BsdWdpbigpO1xuICB9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUV2ZW50XSwgQW5pbWF0aW9uSXRlbSk7XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0UGFyYW1zID0gZnVuY3Rpb24gKHBhcmFtcykge1xuICAgIGlmIChwYXJhbXMud3JhcHBlciB8fCBwYXJhbXMuY29udGFpbmVyKSB7XG4gICAgICB0aGlzLndyYXBwZXIgPSBwYXJhbXMud3JhcHBlciB8fCBwYXJhbXMuY29udGFpbmVyO1xuICAgIH1cblxuICAgIHZhciBhbmltVHlwZSA9ICdzdmcnO1xuXG4gICAgaWYgKHBhcmFtcy5hbmltVHlwZSkge1xuICAgICAgYW5pbVR5cGUgPSBwYXJhbXMuYW5pbVR5cGU7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMucmVuZGVyZXIpIHtcbiAgICAgIGFuaW1UeXBlID0gcGFyYW1zLnJlbmRlcmVyO1xuICAgIH1cblxuICAgIHZhciBSZW5kZXJlckNsYXNzID0gZ2V0UmVuZGVyZXIoYW5pbVR5cGUpO1xuICAgIHRoaXMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXJDbGFzcyh0aGlzLCBwYXJhbXMucmVuZGVyZXJTZXR0aW5ncyk7XG4gICAgdGhpcy5pbWFnZVByZWxvYWRlci5zZXRDYWNoZVR5cGUoYW5pbVR5cGUsIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5kZWZzKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFByb2plY3RJbnRlcmZhY2UodGhpcy5wcm9qZWN0SW50ZXJmYWNlKTtcbiAgICB0aGlzLmFuaW1UeXBlID0gYW5pbVR5cGU7XG5cbiAgICBpZiAocGFyYW1zLmxvb3AgPT09ICcnIHx8IHBhcmFtcy5sb29wID09PSBudWxsIHx8IHBhcmFtcy5sb29wID09PSB1bmRlZmluZWQgfHwgcGFyYW1zLmxvb3AgPT09IHRydWUpIHtcbiAgICAgIHRoaXMubG9vcCA9IHRydWU7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMubG9vcCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMubG9vcCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxvb3AgPSBwYXJzZUludChwYXJhbXMubG9vcCwgMTApO1xuICAgIH1cblxuICAgIHRoaXMuYXV0b3BsYXkgPSAnYXV0b3BsYXknIGluIHBhcmFtcyA/IHBhcmFtcy5hdXRvcGxheSA6IHRydWU7XG4gICAgdGhpcy5uYW1lID0gcGFyYW1zLm5hbWUgPyBwYXJhbXMubmFtZSA6ICcnO1xuICAgIHRoaXMuYXV0b2xvYWRTZWdtZW50cyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsICdhdXRvbG9hZFNlZ21lbnRzJykgPyBwYXJhbXMuYXV0b2xvYWRTZWdtZW50cyA6IHRydWU7XG4gICAgdGhpcy5hc3NldHNQYXRoID0gcGFyYW1zLmFzc2V0c1BhdGg7XG4gICAgdGhpcy5pbml0aWFsU2VnbWVudCA9IHBhcmFtcy5pbml0aWFsU2VnbWVudDtcblxuICAgIGlmIChwYXJhbXMuYXVkaW9GYWN0b3J5KSB7XG4gICAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci5zZXRBdWRpb0ZhY3RvcnkocGFyYW1zLmF1ZGlvRmFjdG9yeSk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5hbmltYXRpb25EYXRhKSB7XG4gICAgICB0aGlzLnNldHVwQW5pbWF0aW9uKHBhcmFtcy5hbmltYXRpb25EYXRhKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5wYXRoKSB7XG4gICAgICBpZiAocGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJ1xcXFwnKSAhPT0gLTEpIHtcbiAgICAgICAgdGhpcy5wYXRoID0gcGFyYW1zLnBhdGguc3Vic3RyKDAsIHBhcmFtcy5wYXRoLmxhc3RJbmRleE9mKCdcXFxcJykgKyAxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucGF0aCA9IHBhcmFtcy5wYXRoLnN1YnN0cigwLCBwYXJhbXMucGF0aC5sYXN0SW5kZXhPZignLycpICsgMSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZmlsZU5hbWUgPSBwYXJhbXMucGF0aC5zdWJzdHIocGFyYW1zLnBhdGgubGFzdEluZGV4T2YoJy8nKSArIDEpO1xuICAgICAgdGhpcy5maWxlTmFtZSA9IHRoaXMuZmlsZU5hbWUuc3Vic3RyKDAsIHRoaXMuZmlsZU5hbWUubGFzdEluZGV4T2YoJy5qc29uJykpO1xuICAgICAgZGF0YU1hbmFnZXIubG9hZEFuaW1hdGlvbihwYXJhbXMucGF0aCwgdGhpcy5jb25maWdBbmltYXRpb24sIHRoaXMub25TZXR1cEVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUub25TZXR1cEVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudHJpZ2dlcignZGF0YV9mYWlsZWQnKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXR1cEFuaW1hdGlvbiA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgZGF0YU1hbmFnZXIuY29tcGxldGVBbmltYXRpb24oZGF0YSwgdGhpcy5jb25maWdBbmltYXRpb24pO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbiAod3JhcHBlciwgYW5pbWF0aW9uRGF0YSkge1xuICAgIGlmIChhbmltYXRpb25EYXRhKSB7XG4gICAgICBpZiAoX3R5cGVvZiQ0KGFuaW1hdGlvbkRhdGEpICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBhbmltYXRpb25EYXRhID0gSlNPTi5wYXJzZShhbmltYXRpb25EYXRhKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcGFyYW1zID0ge1xuICAgICAgd3JhcHBlcjogd3JhcHBlcixcbiAgICAgIGFuaW1hdGlvbkRhdGE6IGFuaW1hdGlvbkRhdGFcbiAgICB9O1xuICAgIHZhciB3cmFwcGVyQXR0cmlidXRlcyA9IHdyYXBwZXIuYXR0cmlidXRlcztcbiAgICBwYXJhbXMucGF0aCA9IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltYXRpb24tcGF0aCcpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltYXRpb24tcGF0aCcpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXBhdGgnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tcGF0aCcpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1wYXRoJykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXBhdGgnKS52YWx1ZSA6ICcnO1xuICAgIHBhcmFtcy5hbmltVHlwZSA9IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLXR5cGUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS10eXBlJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tdHlwZScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS10eXBlJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXR5cGUnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXR5cGUnKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1yZW5kZXJlcicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1yZW5kZXJlcicpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1yZW5kZXJlcicpID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1yZW5kZXJlcicpLnZhbHVlIDogZ2V0UmVnaXN0ZXJlZFJlbmRlcmVyKCkgfHwgJ2NhbnZhcyc7XG4gICAgdmFyIGxvb3AgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1sb29wJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXN0ZWQtdGVybmFyeVxuICAgID8gd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWFuaW0tbG9vcCcpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLWxvb3AnKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tbG9vcCcpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdibS1sb29wJykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLWxvb3AnKS52YWx1ZSA6ICcnO1xuXG4gICAgaWYgKGxvb3AgPT09ICdmYWxzZScpIHtcbiAgICAgIHBhcmFtcy5sb29wID0gZmFsc2U7XG4gICAgfSBlbHNlIGlmIChsb29wID09PSAndHJ1ZScpIHtcbiAgICAgIHBhcmFtcy5sb29wID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKGxvb3AgIT09ICcnKSB7XG4gICAgICBwYXJhbXMubG9vcCA9IHBhcnNlSW50KGxvb3AsIDEwKTtcbiAgICB9XG5cbiAgICB2YXIgYXV0b3BsYXkgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYW5pbS1hdXRvcGxheScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLWF1dG9wbGF5JykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tYXV0b3BsYXknKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5lc3RlZC10ZXJuYXJ5XG4gICAgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tYXV0b3BsYXknKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tYXV0b3BsYXknKSA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tYXV0b3BsYXknKS52YWx1ZSA6IHRydWU7XG4gICAgcGFyYW1zLmF1dG9wbGF5ID0gYXV0b3BsYXkgIT09ICdmYWxzZSc7XG4gICAgcGFyYW1zLm5hbWUgPSB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtbmFtZScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1uYW1lJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2RhdGEtYm0tbmFtZScpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1uYW1lJykudmFsdWUgOiB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLW5hbWUnKSA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tbmFtZScpLnZhbHVlIDogJyc7XG4gICAgdmFyIHByZXJlbmRlciA9IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLXByZXJlbmRlcicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1hbmltLXByZXJlbmRlcicpLnZhbHVlIDogd3JhcHBlckF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCdkYXRhLWJtLXByZXJlbmRlcicpIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICA/IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnZGF0YS1ibS1wcmVyZW5kZXInKS52YWx1ZSA6IHdyYXBwZXJBdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSgnYm0tcHJlcmVuZGVyJykgPyB3cmFwcGVyQXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ2JtLXByZXJlbmRlcicpLnZhbHVlIDogJyc7XG5cbiAgICBpZiAocHJlcmVuZGVyID09PSAnZmFsc2UnKSB7XG4gICAgICBwYXJhbXMucHJlcmVuZGVyID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCFwYXJhbXMucGF0aCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkZXN0cm95Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0UGFyYW1zKHBhcmFtcyk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmluY2x1ZGVMYXllcnMgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmIChkYXRhLm9wID4gdGhpcy5hbmltYXRpb25EYXRhLm9wKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkRhdGEub3AgPSBkYXRhLm9wO1xuICAgICAgdGhpcy50b3RhbEZyYW1lcyA9IE1hdGguZmxvb3IoZGF0YS5vcCAtIHRoaXMuYW5pbWF0aW9uRGF0YS5pcCk7XG4gICAgfVxuXG4gICAgdmFyIGxheWVycyA9IHRoaXMuYW5pbWF0aW9uRGF0YS5sYXllcnM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG4gICAgdmFyIG5ld0xheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuID0gbmV3TGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgIGkgPSAwO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAobGF5ZXJzW2ldLmlkID09PSBuZXdMYXllcnNbal0uaWQpIHtcbiAgICAgICAgICBsYXllcnNbaV0gPSBuZXdMYXllcnNbal07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2hhcnMgfHwgZGF0YS5mb250cykge1xuICAgICAgdGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZENoYXJzKGRhdGEuY2hhcnMpO1xuICAgICAgdGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZEZvbnRzKGRhdGEuZm9udHMsIHRoaXMucmVuZGVyZXIuZ2xvYmFsRGF0YS5kZWZzKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5hc3NldHMpIHtcbiAgICAgIGxlbiA9IGRhdGEuYXNzZXRzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uRGF0YS5hc3NldHMucHVzaChkYXRhLmFzc2V0c1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5hbmltYXRpb25EYXRhLl9fY29tcGxldGUgPSBmYWxzZTtcbiAgICBkYXRhTWFuYWdlci5jb21wbGV0ZUFuaW1hdGlvbih0aGlzLmFuaW1hdGlvbkRhdGEsIHRoaXMub25TZWdtZW50Q29tcGxldGUpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLm9uU2VnbWVudENvbXBsZXRlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSBkYXRhO1xuICAgIHZhciBleHByZXNzaW9uc1BsdWdpbiA9IGdldEV4cHJlc3Npb25zUGx1Z2luKCk7XG5cbiAgICBpZiAoZXhwcmVzc2lvbnNQbHVnaW4pIHtcbiAgICAgIGV4cHJlc3Npb25zUGx1Z2luLmluaXRFeHByZXNzaW9ucyh0aGlzKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvYWROZXh0U2VnbWVudCgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmxvYWROZXh0U2VnbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VnbWVudHMgPSB0aGlzLmFuaW1hdGlvbkRhdGEuc2VnbWVudHM7XG5cbiAgICBpZiAoIXNlZ21lbnRzIHx8IHNlZ21lbnRzLmxlbmd0aCA9PT0gMCB8fCAhdGhpcy5hdXRvbG9hZFNlZ21lbnRzKSB7XG4gICAgICB0aGlzLnRyaWdnZXIoJ2RhdGFfcmVhZHknKTtcbiAgICAgIHRoaXMudGltZUNvbXBsZXRlZCA9IHRoaXMudG90YWxGcmFtZXM7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50cy5zaGlmdCgpO1xuICAgIHRoaXMudGltZUNvbXBsZXRlZCA9IHNlZ21lbnQudGltZSAqIHRoaXMuZnJhbWVSYXRlO1xuICAgIHZhciBzZWdtZW50UGF0aCA9IHRoaXMucGF0aCArIHRoaXMuZmlsZU5hbWUgKyAnXycgKyB0aGlzLnNlZ21lbnRQb3MgKyAnLmpzb24nO1xuICAgIHRoaXMuc2VnbWVudFBvcyArPSAxO1xuICAgIGRhdGFNYW5hZ2VyLmxvYWREYXRhKHNlZ21lbnRQYXRoLCB0aGlzLmluY2x1ZGVMYXllcnMuYmluZCh0aGlzKSwgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy50cmlnZ2VyKCdkYXRhX2ZhaWxlZCcpO1xuICAgIH0uYmluZCh0aGlzKSk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUubG9hZFNlZ21lbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzZWdtZW50cyA9IHRoaXMuYW5pbWF0aW9uRGF0YS5zZWdtZW50cztcblxuICAgIGlmICghc2VnbWVudHMpIHtcbiAgICAgIHRoaXMudGltZUNvbXBsZXRlZCA9IHRoaXMudG90YWxGcmFtZXM7XG4gICAgfVxuXG4gICAgdGhpcy5sb2FkTmV4dFNlZ21lbnQoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5pbWFnZXNMb2FkZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy50cmlnZ2VyKCdsb2FkZWRfaW1hZ2VzJyk7XG4gICAgdGhpcy5jaGVja0xvYWRlZCgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnByZWxvYWRJbWFnZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pbWFnZVByZWxvYWRlci5zZXRBc3NldHNQYXRoKHRoaXMuYXNzZXRzUGF0aCk7XG4gICAgdGhpcy5pbWFnZVByZWxvYWRlci5zZXRQYXRoKHRoaXMucGF0aCk7XG4gICAgdGhpcy5pbWFnZVByZWxvYWRlci5sb2FkQXNzZXRzKHRoaXMuYW5pbWF0aW9uRGF0YS5hc3NldHMsIHRoaXMuaW1hZ2VzTG9hZGVkLmJpbmQodGhpcykpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmNvbmZpZ0FuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltRGF0YSkge1xuICAgIGlmICghdGhpcy5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSBhbmltRGF0YTtcblxuICAgICAgaWYgKHRoaXMuaW5pdGlhbFNlZ21lbnQpIHtcbiAgICAgICAgdGhpcy50b3RhbEZyYW1lcyA9IE1hdGguZmxvb3IodGhpcy5pbml0aWFsU2VnbWVudFsxXSAtIHRoaXMuaW5pdGlhbFNlZ21lbnRbMF0pO1xuICAgICAgICB0aGlzLmZpcnN0RnJhbWUgPSBNYXRoLnJvdW5kKHRoaXMuaW5pdGlhbFNlZ21lbnRbMF0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50b3RhbEZyYW1lcyA9IE1hdGguZmxvb3IodGhpcy5hbmltYXRpb25EYXRhLm9wIC0gdGhpcy5hbmltYXRpb25EYXRhLmlwKTtcbiAgICAgICAgdGhpcy5maXJzdEZyYW1lID0gTWF0aC5yb3VuZCh0aGlzLmFuaW1hdGlvbkRhdGEuaXApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLmNvbmZpZ0FuaW1hdGlvbihhbmltRGF0YSk7XG5cbiAgICAgIGlmICghYW5pbURhdGEuYXNzZXRzKSB7XG4gICAgICAgIGFuaW1EYXRhLmFzc2V0cyA9IFtdO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmFzc2V0cyA9IHRoaXMuYW5pbWF0aW9uRGF0YS5hc3NldHM7XG4gICAgICB0aGlzLmZyYW1lUmF0ZSA9IHRoaXMuYW5pbWF0aW9uRGF0YS5mcjtcbiAgICAgIHRoaXMuZnJhbWVNdWx0ID0gdGhpcy5hbmltYXRpb25EYXRhLmZyIC8gMTAwMDtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2VhcmNoRXh0cmFDb21wb3NpdGlvbnMoYW5pbURhdGEuYXNzZXRzKTtcbiAgICAgIHRoaXMubWFya2VycyA9IG1hcmtlclBhcnNlcihhbmltRGF0YS5tYXJrZXJzIHx8IFtdKTtcbiAgICAgIHRoaXMudHJpZ2dlcignY29uZmlnX3JlYWR5Jyk7XG4gICAgICB0aGlzLnByZWxvYWRJbWFnZXMoKTtcbiAgICAgIHRoaXMubG9hZFNlZ21lbnRzKCk7XG4gICAgICB0aGlzLnVwZGFGcmFtZU1vZGlmaWVyKCk7XG4gICAgICB0aGlzLndhaXRGb3JGb250c0xvYWRlZCgpO1xuXG4gICAgICBpZiAodGhpcy5pc1BhdXNlZCkge1xuICAgICAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci5wYXVzZSgpO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnRyaWdnZXJDb25maWdFcnJvcihlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLndhaXRGb3JGb250c0xvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmlzTG9hZGVkKSB7XG4gICAgICB0aGlzLmNoZWNrTG9hZGVkKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNldFRpbWVvdXQodGhpcy53YWl0Rm9yRm9udHNMb2FkZWQuYmluZCh0aGlzKSwgMjApO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5jaGVja0xvYWRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuaXNMb2FkZWQgJiYgdGhpcy5yZW5kZXJlci5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmlzTG9hZGVkICYmICh0aGlzLmltYWdlUHJlbG9hZGVyLmxvYWRlZEltYWdlcygpIHx8IHRoaXMucmVuZGVyZXIucmVuZGVyZXJUeXBlICE9PSAnY2FudmFzJykgJiYgdGhpcy5pbWFnZVByZWxvYWRlci5sb2FkZWRGb290YWdlcygpKSB7XG4gICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgIHZhciBleHByZXNzaW9uc1BsdWdpbiA9IGdldEV4cHJlc3Npb25zUGx1Z2luKCk7XG5cbiAgICAgIGlmIChleHByZXNzaW9uc1BsdWdpbikge1xuICAgICAgICBleHByZXNzaW9uc1BsdWdpbi5pbml0RXhwcmVzc2lvbnModGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMucmVuZGVyZXIuaW5pdEl0ZW1zKCk7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdET01Mb2FkZWQnKTtcbiAgICAgIH0uYmluZCh0aGlzKSwgMCk7XG4gICAgICB0aGlzLmdvdG9GcmFtZSgpO1xuXG4gICAgICBpZiAodGhpcy5hdXRvcGxheSkge1xuICAgICAgICB0aGlzLnBsYXkoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucmVzaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHtcbiAgICAvLyBBZGRpbmcgdGhpcyB2YWxpZGF0aW9uIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSBpbiBjYXNlIGFuIGV2ZW50IG9iamVjdCB3YXMgYmVpbmcgcGFzc2VkIGRvd25cbiAgICB2YXIgX3dpZHRoID0gdHlwZW9mIHdpZHRoID09PSAnbnVtYmVyJyA/IHdpZHRoIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIF9oZWlnaHQgPSB0eXBlb2YgaGVpZ2h0ID09PSAnbnVtYmVyJyA/IGhlaWdodCA6IHVuZGVmaW5lZDtcblxuICAgIHRoaXMucmVuZGVyZXIudXBkYXRlQ29udGFpbmVyU2l6ZShfd2lkdGgsIF9oZWlnaHQpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldFN1YmZyYW1lID0gZnVuY3Rpb24gKGZsYWcpIHtcbiAgICB0aGlzLmlzU3ViZnJhbWVFbmFibGVkID0gISFmbGFnO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdvdG9GcmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmN1cnJlbnRGcmFtZSA9IHRoaXMuaXNTdWJmcmFtZUVuYWJsZWQgPyB0aGlzLmN1cnJlbnRSYXdGcmFtZSA6IH5+dGhpcy5jdXJyZW50UmF3RnJhbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYml0d2lzZVxuXG4gICAgaWYgKHRoaXMudGltZUNvbXBsZXRlZCAhPT0gdGhpcy50b3RhbEZyYW1lcyAmJiB0aGlzLmN1cnJlbnRGcmFtZSA+IHRoaXMudGltZUNvbXBsZXRlZCkge1xuICAgICAgdGhpcy5jdXJyZW50RnJhbWUgPSB0aGlzLnRpbWVDb21wbGV0ZWQ7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdlbnRlckZyYW1lJyk7XG4gICAgdGhpcy5yZW5kZXJGcmFtZSgpO1xuICAgIHRoaXMudHJpZ2dlcignZHJhd25GcmFtZScpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmlzTG9hZGVkID09PSBmYWxzZSB8fCAhdGhpcy5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpZiAodGhpcy5leHByZXNzaW9uc1BsdWdpbikge1xuICAgICAgICB0aGlzLmV4cHJlc3Npb25zUGx1Z2luLnJlc2V0RnJhbWUoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJlci5yZW5kZXJGcmFtZSh0aGlzLmN1cnJlbnRGcmFtZSArIHRoaXMuZmlyc3RGcmFtZSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMudHJpZ2dlclJlbmRlckZyYW1lRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5wbGF5ID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gdHJ1ZSkge1xuICAgICAgdGhpcy5pc1BhdXNlZCA9IGZhbHNlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdfcGxheScpO1xuICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIucmVzdW1lKCk7XG5cbiAgICAgIGlmICh0aGlzLl9pZGxlKSB7XG4gICAgICAgIHRoaXMuX2lkbGUgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50cmlnZ2VyKCdfYWN0aXZlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5pc1BhdXNlZCA9PT0gZmFsc2UpIHtcbiAgICAgIHRoaXMuaXNQYXVzZWQgPSB0cnVlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdfcGF1c2UnKTtcbiAgICAgIHRoaXMuX2lkbGUgPSB0cnVlO1xuICAgICAgdGhpcy50cmlnZ2VyKCdfaWRsZScpO1xuICAgICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIucGF1c2UoKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudG9nZ2xlUGF1c2UgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmlzUGF1c2VkID09PSB0cnVlKSB7XG4gICAgICB0aGlzLnBsYXkoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnBhdXNlKCk7XG4gICAgdGhpcy5wbGF5Q291bnQgPSAwO1xuICAgIHRoaXMuX2NvbXBsZXRlZExvb3AgPSBmYWxzZTtcbiAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKDApO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldE1hcmtlckRhdGEgPSBmdW5jdGlvbiAobWFya2VyTmFtZSkge1xuICAgIHZhciBtYXJrZXI7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubWFya2Vycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbWFya2VyID0gdGhpcy5tYXJrZXJzW2ldO1xuXG4gICAgICBpZiAobWFya2VyLnBheWxvYWQgJiYgbWFya2VyLnBheWxvYWQubmFtZSA9PT0gbWFya2VyTmFtZSkge1xuICAgICAgICByZXR1cm4gbWFya2VyO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdvVG9BbmRTdG9wID0gZnVuY3Rpb24gKHZhbHVlLCBpc0ZyYW1lLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG51bVZhbHVlID0gTnVtYmVyKHZhbHVlKTtcblxuICAgIGlmIChpc05hTihudW1WYWx1ZSkpIHtcbiAgICAgIHZhciBtYXJrZXIgPSB0aGlzLmdldE1hcmtlckRhdGEodmFsdWUpO1xuXG4gICAgICBpZiAobWFya2VyKSB7XG4gICAgICAgIHRoaXMuZ29Ub0FuZFN0b3AobWFya2VyLnRpbWUsIHRydWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNGcmFtZSkge1xuICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUodmFsdWUgKiB0aGlzLmZyYW1lTW9kaWZpZXIpO1xuICAgIH1cblxuICAgIHRoaXMucGF1c2UoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nb1RvQW5kUGxheSA9IGZ1bmN0aW9uICh2YWx1ZSwgaXNGcmFtZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBudW1WYWx1ZSA9IE51bWJlcih2YWx1ZSk7XG5cbiAgICBpZiAoaXNOYU4obnVtVmFsdWUpKSB7XG4gICAgICB2YXIgbWFya2VyID0gdGhpcy5nZXRNYXJrZXJEYXRhKHZhbHVlKTtcblxuICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICBpZiAoIW1hcmtlci5kdXJhdGlvbikge1xuICAgICAgICAgIHRoaXMuZ29Ub0FuZFN0b3AobWFya2VyLnRpbWUsIHRydWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucGxheVNlZ21lbnRzKFttYXJrZXIudGltZSwgbWFya2VyLnRpbWUgKyBtYXJrZXIuZHVyYXRpb25dLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdvVG9BbmRTdG9wKG51bVZhbHVlLCBpc0ZyYW1lLCBuYW1lKTtcbiAgICB9XG5cbiAgICB0aGlzLnBsYXkoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5hZHZhbmNlVGltZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGlmICh0aGlzLmlzUGF1c2VkID09PSB0cnVlIHx8IHRoaXMuaXNMb2FkZWQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRWYWx1ZSA9IHRoaXMuY3VycmVudFJhd0ZyYW1lICsgdmFsdWUgKiB0aGlzLmZyYW1lTW9kaWZpZXI7XG4gICAgdmFyIF9pc0NvbXBsZXRlID0gZmFsc2U7IC8vIENoZWNraW5nIGlmIG5leHRWYWx1ZSA+IHRvdGFsRnJhbWVzIC0gMSBmb3IgYWRkcmVzc2luZyBub24gbG9vcGluZyBhbmQgbG9vcGluZyBhbmltYXRpb25zLlxuICAgIC8vIElmIGFuaW1hdGlvbiB3b24ndCBsb29wLCBpdCBzaG91bGQgc3RvcCBhdCB0b3RhbEZyYW1lcyAtIDEuIElmIGl0IHdpbGwgbG9vcCBpdCBzaG91bGQgY29tcGxldGUgdGhlIGxhc3QgZnJhbWUgYW5kIHRoZW4gbG9vcC5cblxuICAgIGlmIChuZXh0VmFsdWUgPj0gdGhpcy50b3RhbEZyYW1lcyAtIDEgJiYgdGhpcy5mcmFtZU1vZGlmaWVyID4gMCkge1xuICAgICAgaWYgKCF0aGlzLmxvb3AgfHwgdGhpcy5wbGF5Q291bnQgPT09IHRoaXMubG9vcCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hlY2tTZWdtZW50cyhuZXh0VmFsdWUgPiB0aGlzLnRvdGFsRnJhbWVzID8gbmV4dFZhbHVlICUgdGhpcy50b3RhbEZyYW1lcyA6IDApKSB7XG4gICAgICAgICAgX2lzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICAgIG5leHRWYWx1ZSA9IHRoaXMudG90YWxGcmFtZXMgLSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5leHRWYWx1ZSA+PSB0aGlzLnRvdGFsRnJhbWVzKSB7XG4gICAgICAgIHRoaXMucGxheUNvdW50ICs9IDE7XG5cbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrU2VnbWVudHMobmV4dFZhbHVlICUgdGhpcy50b3RhbEZyYW1lcykpIHtcbiAgICAgICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMpO1xuICAgICAgICAgIHRoaXMuX2NvbXBsZXRlZExvb3AgPSB0cnVlO1xuICAgICAgICAgIHRoaXMudHJpZ2dlcignbG9vcENvbXBsZXRlJyk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUobmV4dFZhbHVlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5leHRWYWx1ZSA8IDApIHtcbiAgICAgIGlmICghdGhpcy5jaGVja1NlZ21lbnRzKG5leHRWYWx1ZSAlIHRoaXMudG90YWxGcmFtZXMpKSB7XG4gICAgICAgIGlmICh0aGlzLmxvb3AgJiYgISh0aGlzLnBsYXlDb3VudC0tIDw9IDAgJiYgdGhpcy5sb29wICE9PSB0cnVlKSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGx1c3BsdXNcbiAgICAgICAgICB0aGlzLnNldEN1cnJlbnRSYXdGcmFtZVZhbHVlKHRoaXMudG90YWxGcmFtZXMgKyBuZXh0VmFsdWUgJSB0aGlzLnRvdGFsRnJhbWVzKTtcblxuICAgICAgICAgIGlmICghdGhpcy5fY29tcGxldGVkTG9vcCkge1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGVkTG9vcCA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcignbG9vcENvbXBsZXRlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pc0NvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgICBuZXh0VmFsdWUgPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUobmV4dFZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoX2lzQ29tcGxldGUpIHtcbiAgICAgIHRoaXMuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUobmV4dFZhbHVlKTtcbiAgICAgIHRoaXMucGF1c2UoKTtcbiAgICAgIHRoaXMudHJpZ2dlcignY29tcGxldGUnKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuYWRqdXN0U2VnbWVudCA9IGZ1bmN0aW9uIChhcnIsIG9mZnNldCkge1xuICAgIHRoaXMucGxheUNvdW50ID0gMDtcblxuICAgIGlmIChhcnJbMV0gPCBhcnJbMF0pIHtcbiAgICAgIGlmICh0aGlzLmZyYW1lTW9kaWZpZXIgPiAwKSB7XG4gICAgICAgIGlmICh0aGlzLnBsYXlTcGVlZCA8IDApIHtcbiAgICAgICAgICB0aGlzLnNldFNwZWVkKC10aGlzLnBsYXlTcGVlZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5zZXREaXJlY3Rpb24oLTEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBhcnJbMF0gLSBhcnJbMV07XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgICAgdGhpcy5maXJzdEZyYW1lID0gYXJyWzFdO1xuICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSh0aGlzLnRvdGFsRnJhbWVzIC0gMC4wMDEgLSBvZmZzZXQpO1xuICAgIH0gZWxzZSBpZiAoYXJyWzFdID4gYXJyWzBdKSB7XG4gICAgICBpZiAodGhpcy5mcmFtZU1vZGlmaWVyIDwgMCkge1xuICAgICAgICBpZiAodGhpcy5wbGF5U3BlZWQgPCAwKSB7XG4gICAgICAgICAgdGhpcy5zZXRTcGVlZCgtdGhpcy5wbGF5U3BlZWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuc2V0RGlyZWN0aW9uKDEpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMudG90YWxGcmFtZXMgPSBhcnJbMV0gLSBhcnJbMF07XG4gICAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgICAgdGhpcy5maXJzdEZyYW1lID0gYXJyWzBdO1xuICAgICAgdGhpcy5zZXRDdXJyZW50UmF3RnJhbWVWYWx1ZSgwLjAwMSArIG9mZnNldCk7XG4gICAgfVxuXG4gICAgdGhpcy50cmlnZ2VyKCdzZWdtZW50U3RhcnQnKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRTZWdtZW50ID0gZnVuY3Rpb24gKGluaXQsIGVuZCkge1xuICAgIHZhciBwZW5kaW5nRnJhbWUgPSAtMTtcblxuICAgIGlmICh0aGlzLmlzUGF1c2VkKSB7XG4gICAgICBpZiAodGhpcy5jdXJyZW50UmF3RnJhbWUgKyB0aGlzLmZpcnN0RnJhbWUgPCBpbml0KSB7XG4gICAgICAgIHBlbmRpbmdGcmFtZSA9IGluaXQ7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuY3VycmVudFJhd0ZyYW1lICsgdGhpcy5maXJzdEZyYW1lID4gZW5kKSB7XG4gICAgICAgIHBlbmRpbmdGcmFtZSA9IGVuZCAtIGluaXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5maXJzdEZyYW1lID0gaW5pdDtcbiAgICB0aGlzLnRvdGFsRnJhbWVzID0gZW5kIC0gaW5pdDtcbiAgICB0aGlzLnRpbWVDb21wbGV0ZWQgPSB0aGlzLnRvdGFsRnJhbWVzO1xuXG4gICAgaWYgKHBlbmRpbmdGcmFtZSAhPT0gLTEpIHtcbiAgICAgIHRoaXMuZ29Ub0FuZFN0b3AocGVuZGluZ0ZyYW1lLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUucGxheVNlZ21lbnRzID0gZnVuY3Rpb24gKGFyciwgZm9yY2VGbGFnKSB7XG4gICAgaWYgKGZvcmNlRmxhZykge1xuICAgICAgdGhpcy5zZWdtZW50cy5sZW5ndGggPSAwO1xuICAgIH1cblxuICAgIGlmIChfdHlwZW9mJDQoYXJyWzBdKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGFyci5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNlZ21lbnRzLnB1c2goYXJyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWdtZW50cy5wdXNoKGFycik7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2VnbWVudHMubGVuZ3RoICYmIGZvcmNlRmxhZykge1xuICAgICAgdGhpcy5hZGp1c3RTZWdtZW50KHRoaXMuc2VnbWVudHMuc2hpZnQoKSwgMCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaXNQYXVzZWQpIHtcbiAgICAgIHRoaXMucGxheSgpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5yZXNldFNlZ21lbnRzID0gZnVuY3Rpb24gKGZvcmNlRmxhZykge1xuICAgIHRoaXMuc2VnbWVudHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLnNlZ21lbnRzLnB1c2goW3RoaXMuYW5pbWF0aW9uRGF0YS5pcCwgdGhpcy5hbmltYXRpb25EYXRhLm9wXSk7XG5cbiAgICBpZiAoZm9yY2VGbGFnKSB7XG4gICAgICB0aGlzLmNoZWNrU2VnbWVudHMoMCk7XG4gICAgfVxuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmNoZWNrU2VnbWVudHMgPSBmdW5jdGlvbiAob2Zmc2V0KSB7XG4gICAgaWYgKHRoaXMuc2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmFkanVzdFNlZ21lbnQodGhpcy5zZWdtZW50cy5zaGlmdCgpLCBvZmZzZXQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmIChuYW1lICYmIHRoaXMubmFtZSAhPT0gbmFtZSB8fCAhdGhpcy5yZW5kZXJlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZXIuZGVzdHJveSgpO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIuZGVzdHJveSgpO1xuICAgIHRoaXMudHJpZ2dlcignZGVzdHJveScpO1xuICAgIHRoaXMuX2NicyA9IG51bGw7XG4gICAgdGhpcy5vbkVudGVyRnJhbWUgPSBudWxsO1xuICAgIHRoaXMub25Mb29wQ29tcGxldGUgPSBudWxsO1xuICAgIHRoaXMub25Db21wbGV0ZSA9IG51bGw7XG4gICAgdGhpcy5vblNlZ21lbnRTdGFydCA9IG51bGw7XG4gICAgdGhpcy5vbkRlc3Ryb3kgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZXIgPSBudWxsO1xuICAgIHRoaXMuZXhwcmVzc2lvbnNQbHVnaW4gPSBudWxsO1xuICAgIHRoaXMuaW1hZ2VQcmVsb2FkZXIgPSBudWxsO1xuICAgIHRoaXMucHJvamVjdEludGVyZmFjZSA9IG51bGw7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0Q3VycmVudFJhd0ZyYW1lVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmN1cnJlbnRSYXdGcmFtZSA9IHZhbHVlO1xuICAgIHRoaXMuZ290b0ZyYW1lKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuc2V0U3BlZWQgPSBmdW5jdGlvbiAodmFsKSB7XG4gICAgdGhpcy5wbGF5U3BlZWQgPSB2YWw7XG4gICAgdGhpcy51cGRhRnJhbWVNb2RpZmllcigpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNldERpcmVjdGlvbiA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICB0aGlzLnBsYXlEaXJlY3Rpb24gPSB2YWwgPCAwID8gLTEgOiAxO1xuICAgIHRoaXMudXBkYUZyYW1lTW9kaWZpZXIoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRMb29wID0gZnVuY3Rpb24gKGlzTG9vcGluZykge1xuICAgIHRoaXMubG9vcCA9IGlzTG9vcGluZztcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5zZXRWb2x1bWUgPSBmdW5jdGlvbiAodmFsLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgJiYgdGhpcy5uYW1lICE9PSBuYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5hdWRpb0NvbnRyb2xsZXIuc2V0Vm9sdW1lKHZhbCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0Vm9sdW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmF1ZGlvQ29udHJvbGxlci5nZXRWb2x1bWUoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5tdXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci5tdXRlKCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudW5tdXRlID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAobmFtZSAmJiB0aGlzLm5hbWUgIT09IG5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmF1ZGlvQ29udHJvbGxlci51bm11dGUoKTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS51cGRhRnJhbWVNb2RpZmllciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZyYW1lTW9kaWZpZXIgPSB0aGlzLmZyYW1lTXVsdCAqIHRoaXMucGxheVNwZWVkICogdGhpcy5wbGF5RGlyZWN0aW9uO1xuICAgIHRoaXMuYXVkaW9Db250cm9sbGVyLnNldFJhdGUodGhpcy5wbGF5U3BlZWQgKiB0aGlzLnBsYXlEaXJlY3Rpb24pO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLmdldFBhdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMucGF0aDtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5nZXRBc3NldHNQYXRoID0gZnVuY3Rpb24gKGFzc2V0RGF0YSkge1xuICAgIHZhciBwYXRoID0gJyc7XG5cbiAgICBpZiAoYXNzZXREYXRhLmUpIHtcbiAgICAgIHBhdGggPSBhc3NldERhdGEucDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXNzZXRzUGF0aCkge1xuICAgICAgdmFyIGltYWdlUGF0aCA9IGFzc2V0RGF0YS5wO1xuXG4gICAgICBpZiAoaW1hZ2VQYXRoLmluZGV4T2YoJ2ltYWdlcy8nKSAhPT0gLTEpIHtcbiAgICAgICAgaW1hZ2VQYXRoID0gaW1hZ2VQYXRoLnNwbGl0KCcvJylbMV07XG4gICAgICB9XG5cbiAgICAgIHBhdGggPSB0aGlzLmFzc2V0c1BhdGggKyBpbWFnZVBhdGg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhdGggPSB0aGlzLnBhdGg7XG4gICAgICBwYXRoICs9IGFzc2V0RGF0YS51ID8gYXNzZXREYXRhLnUgOiAnJztcbiAgICAgIHBhdGggKz0gYXNzZXREYXRhLnA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGg7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0QXNzZXREYXRhID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmFzc2V0cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKGlkID09PSB0aGlzLmFzc2V0c1tpXS5pZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hc3NldHNbaV07XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVuZGVyZXIuaGlkZSgpO1xuICB9O1xuXG4gIEFuaW1hdGlvbkl0ZW0ucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5zaG93KCk7XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUuZ2V0RHVyYXRpb24gPSBmdW5jdGlvbiAoaXNGcmFtZSkge1xuICAgIHJldHVybiBpc0ZyYW1lID8gdGhpcy50b3RhbEZyYW1lcyA6IHRoaXMudG90YWxGcmFtZXMgLyB0aGlzLmZyYW1lUmF0ZTtcbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS51cGRhdGVEb2N1bWVudERhdGEgPSBmdW5jdGlvbiAocGF0aCwgZG9jdW1lbnREYXRhLCBpbmRleCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMucmVuZGVyZXIuZ2V0RWxlbWVudEJ5UGF0aChwYXRoKTtcbiAgICAgIGVsZW1lbnQudXBkYXRlRG9jdW1lbnREYXRhKGRvY3VtZW50RGF0YSwgaW5kZXgpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7Ly8gVE9ETzogZGVjaWRlIGhvdyB0byBoYW5kbGUgY2F0Y2ggY2FzZVxuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS50cmlnZ2VyID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAodGhpcy5fY2JzICYmIHRoaXMuX2Nic1tuYW1lXSkge1xuICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgIGNhc2UgJ2VudGVyRnJhbWUnOlxuICAgICAgICAgIHRoaXMudHJpZ2dlckV2ZW50KG5hbWUsIG5ldyBCTUVudGVyRnJhbWVFdmVudChuYW1lLCB0aGlzLmN1cnJlbnRGcmFtZSwgdGhpcy50b3RhbEZyYW1lcywgdGhpcy5mcmFtZU1vZGlmaWVyKSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZHJhd25GcmFtZSc6XG4gICAgICAgICAgdGhpcy5kcmF3bkZyYW1lRXZlbnQuY3VycmVudFRpbWUgPSB0aGlzLmN1cnJlbnRGcmFtZTtcbiAgICAgICAgICB0aGlzLmRyYXduRnJhbWVFdmVudC50b3RhbFRpbWUgPSB0aGlzLnRvdGFsRnJhbWVzO1xuICAgICAgICAgIHRoaXMuZHJhd25GcmFtZUV2ZW50LmRpcmVjdGlvbiA9IHRoaXMuZnJhbWVNb2RpZmllcjtcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCB0aGlzLmRyYXduRnJhbWVFdmVudCk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbG9vcENvbXBsZXRlJzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1Db21wbGV0ZUxvb3BFdmVudChuYW1lLCB0aGlzLmxvb3AsIHRoaXMucGxheUNvdW50LCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2NvbXBsZXRlJzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1Db21wbGV0ZUV2ZW50KG5hbWUsIHRoaXMuZnJhbWVNdWx0KSk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnc2VnbWVudFN0YXJ0JzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1TZWdtZW50U3RhcnRFdmVudChuYW1lLCB0aGlzLmZpcnN0RnJhbWUsIHRoaXMudG90YWxGcmFtZXMpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdkZXN0cm95JzpcbiAgICAgICAgICB0aGlzLnRyaWdnZXJFdmVudChuYW1lLCBuZXcgQk1EZXN0cm95RXZlbnQobmFtZSwgdGhpcykpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy50cmlnZ2VyRXZlbnQobmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdlbnRlckZyYW1lJyAmJiB0aGlzLm9uRW50ZXJGcmFtZSkge1xuICAgICAgdGhpcy5vbkVudGVyRnJhbWUuY2FsbCh0aGlzLCBuZXcgQk1FbnRlckZyYW1lRXZlbnQobmFtZSwgdGhpcy5jdXJyZW50RnJhbWUsIHRoaXMudG90YWxGcmFtZXMsIHRoaXMuZnJhbWVNdWx0KSk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdsb29wQ29tcGxldGUnICYmIHRoaXMub25Mb29wQ29tcGxldGUpIHtcbiAgICAgIHRoaXMub25Mb29wQ29tcGxldGUuY2FsbCh0aGlzLCBuZXcgQk1Db21wbGV0ZUxvb3BFdmVudChuYW1lLCB0aGlzLmxvb3AsIHRoaXMucGxheUNvdW50LCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnY29tcGxldGUnICYmIHRoaXMub25Db21wbGV0ZSkge1xuICAgICAgdGhpcy5vbkNvbXBsZXRlLmNhbGwodGhpcywgbmV3IEJNQ29tcGxldGVFdmVudChuYW1lLCB0aGlzLmZyYW1lTXVsdCkpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSAnc2VnbWVudFN0YXJ0JyAmJiB0aGlzLm9uU2VnbWVudFN0YXJ0KSB7XG4gICAgICB0aGlzLm9uU2VnbWVudFN0YXJ0LmNhbGwodGhpcywgbmV3IEJNU2VnbWVudFN0YXJ0RXZlbnQobmFtZSwgdGhpcy5maXJzdEZyYW1lLCB0aGlzLnRvdGFsRnJhbWVzKSk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdkZXN0cm95JyAmJiB0aGlzLm9uRGVzdHJveSkge1xuICAgICAgdGhpcy5vbkRlc3Ryb3kuY2FsbCh0aGlzLCBuZXcgQk1EZXN0cm95RXZlbnQobmFtZSwgdGhpcykpO1xuICAgIH1cbiAgfTtcblxuICBBbmltYXRpb25JdGVtLnByb3RvdHlwZS50cmlnZ2VyUmVuZGVyRnJhbWVFcnJvciA9IGZ1bmN0aW9uIChuYXRpdmVFcnJvcikge1xuICAgIHZhciBlcnJvciA9IG5ldyBCTVJlbmRlckZyYW1lRXJyb3JFdmVudChuYXRpdmVFcnJvciwgdGhpcy5jdXJyZW50RnJhbWUpO1xuICAgIHRoaXMudHJpZ2dlckV2ZW50KCdlcnJvcicsIGVycm9yKTtcblxuICAgIGlmICh0aGlzLm9uRXJyb3IpIHtcbiAgICAgIHRoaXMub25FcnJvci5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgQW5pbWF0aW9uSXRlbS5wcm90b3R5cGUudHJpZ2dlckNvbmZpZ0Vycm9yID0gZnVuY3Rpb24gKG5hdGl2ZUVycm9yKSB7XG4gICAgdmFyIGVycm9yID0gbmV3IEJNQ29uZmlnRXJyb3JFdmVudChuYXRpdmVFcnJvciwgdGhpcy5jdXJyZW50RnJhbWUpO1xuICAgIHRoaXMudHJpZ2dlckV2ZW50KCdlcnJvcicsIGVycm9yKTtcblxuICAgIGlmICh0aGlzLm9uRXJyb3IpIHtcbiAgICAgIHRoaXMub25FcnJvci5jYWxsKHRoaXMsIGVycm9yKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGFuaW1hdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1vZHVsZU9iID0ge307XG4gICAgdmFyIHJlZ2lzdGVyZWRBbmltYXRpb25zID0gW107XG4gICAgdmFyIGluaXRUaW1lID0gMDtcbiAgICB2YXIgbGVuID0gMDtcbiAgICB2YXIgcGxheWluZ0FuaW1hdGlvbnNOdW0gPSAwO1xuICAgIHZhciBfc3RvcHBlZCA9IHRydWU7XG4gICAgdmFyIF9pc0Zyb3plbiA9IGZhbHNlO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChldikge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGFuaW1JdGVtID0gZXYudGFyZ2V0O1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAocmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uID09PSBhbmltSXRlbSkge1xuICAgICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgbGVuIC09IDE7XG5cbiAgICAgICAgICBpZiAoIWFuaW1JdGVtLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICBzdWJ0cmFjdFBsYXlpbmdDb3VudCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWdpc3RlckFuaW1hdGlvbihlbGVtZW50LCBhbmltYXRpb25EYXRhKSB7XG4gICAgICBpZiAoIWVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmVsZW0gPT09IGVsZW1lbnQgJiYgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uZWxlbSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHZhciBhbmltSXRlbSA9IG5ldyBBbmltYXRpb25JdGVtKCk7XG4gICAgICBzZXR1cEFuaW1hdGlvbihhbmltSXRlbSwgZWxlbWVudCk7XG4gICAgICBhbmltSXRlbS5zZXREYXRhKGVsZW1lbnQsIGFuaW1hdGlvbkRhdGEpO1xuICAgICAgcmV0dXJuIGFuaW1JdGVtO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFJlZ2lzdGVyZWRBbmltYXRpb25zKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuQW5pbXMgPSByZWdpc3RlcmVkQW5pbWF0aW9ucy5sZW5ndGg7XG4gICAgICB2YXIgYW5pbWF0aW9ucyA9IFtdO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuQW5pbXM7IGkgKz0gMSkge1xuICAgICAgICBhbmltYXRpb25zLnB1c2gocmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFuaW1hdGlvbnM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkUGxheWluZ0NvdW50KCkge1xuICAgICAgcGxheWluZ0FuaW1hdGlvbnNOdW0gKz0gMTtcbiAgICAgIGFjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3VidHJhY3RQbGF5aW5nQ291bnQoKSB7XG4gICAgICBwbGF5aW5nQW5pbWF0aW9uc051bSAtPSAxO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldHVwQW5pbWF0aW9uKGFuaW1JdGVtLCBlbGVtZW50KSB7XG4gICAgICBhbmltSXRlbS5hZGRFdmVudExpc3RlbmVyKCdkZXN0cm95JywgcmVtb3ZlRWxlbWVudCk7XG4gICAgICBhbmltSXRlbS5hZGRFdmVudExpc3RlbmVyKCdfYWN0aXZlJywgYWRkUGxheWluZ0NvdW50KTtcbiAgICAgIGFuaW1JdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ19pZGxlJywgc3VidHJhY3RQbGF5aW5nQ291bnQpO1xuICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnMucHVzaCh7XG4gICAgICAgIGVsZW06IGVsZW1lbnQsXG4gICAgICAgIGFuaW1hdGlvbjogYW5pbUl0ZW1cbiAgICAgIH0pO1xuICAgICAgbGVuICs9IDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9hZEFuaW1hdGlvbihwYXJhbXMpIHtcbiAgICAgIHZhciBhbmltSXRlbSA9IG5ldyBBbmltYXRpb25JdGVtKCk7XG4gICAgICBzZXR1cEFuaW1hdGlvbihhbmltSXRlbSwgbnVsbCk7XG4gICAgICBhbmltSXRlbS5zZXRQYXJhbXMocGFyYW1zKTtcbiAgICAgIHJldHVybiBhbmltSXRlbTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRTcGVlZCh2YWwsIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uc2V0U3BlZWQodmFsLCBhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldERpcmVjdGlvbih2YWwsIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uc2V0RGlyZWN0aW9uKHZhbCwgYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwbGF5KGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24ucGxheShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc3VtZShub3dUaW1lKSB7XG4gICAgICB2YXIgZWxhcHNlZFRpbWUgPSBub3dUaW1lIC0gaW5pdFRpbWU7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5hZHZhbmNlVGltZShlbGFwc2VkVGltZSk7XG4gICAgICB9XG5cbiAgICAgIGluaXRUaW1lID0gbm93VGltZTtcblxuICAgICAgaWYgKHBsYXlpbmdBbmltYXRpb25zTnVtICYmICFfaXNGcm96ZW4pIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZXN1bWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3N0b3BwZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZpcnN0KG5vd1RpbWUpIHtcbiAgICAgIGluaXRUaW1lID0gbm93VGltZTtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVzdW1lKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXVzZShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnBhdXNlKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ29Ub0FuZFN0b3AodmFsdWUsIGlzRnJhbWUsIGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uZ29Ub0FuZFN0b3AodmFsdWUsIGlzRnJhbWUsIGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RvcChhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnN0b3AoYW5pbWF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b2dnbGVQYXVzZShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnRvZ2dsZVBhdXNlKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVzdHJveShhbmltYXRpb24pIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24uZGVzdHJveShhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlYXJjaEFuaW1hdGlvbnMoYW5pbWF0aW9uRGF0YSwgc3RhbmRhbG9uZSwgcmVuZGVyZXIpIHtcbiAgICAgIHZhciBhbmltRWxlbWVudHMgPSBbXS5jb25jYXQoW10uc2xpY2UuY2FsbChkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsb3R0aWUnKSksIFtdLnNsaWNlLmNhbGwoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYm9keW1vdmluJykpKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbkFuaW1zID0gYW5pbUVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbkFuaW1zOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHJlbmRlcmVyKSB7XG4gICAgICAgICAgYW5pbUVsZW1lbnRzW2ldLnNldEF0dHJpYnV0ZSgnZGF0YS1ibS10eXBlJywgcmVuZGVyZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJBbmltYXRpb24oYW5pbUVsZW1lbnRzW2ldLCBhbmltYXRpb25EYXRhKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YW5kYWxvbmUgJiYgbGVuQW5pbXMgPT09IDApIHtcbiAgICAgICAgaWYgKCFyZW5kZXJlcikge1xuICAgICAgICAgIHJlbmRlcmVyID0gJ3N2Zyc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYm9keSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5JylbMF07XG4gICAgICAgIGJvZHkuaW5uZXJUZXh0ID0gJyc7XG4gICAgICAgIHZhciBkaXYgPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgICAgICBkaXYuc3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICAgIGRpdi5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtYm0tdHlwZScsIHJlbmRlcmVyKTtcbiAgICAgICAgYm9keS5hcHBlbmRDaGlsZChkaXYpO1xuICAgICAgICByZWdpc3RlckFuaW1hdGlvbihkaXYsIGFuaW1hdGlvbkRhdGEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgcmVnaXN0ZXJlZEFuaW1hdGlvbnNbaV0uYW5pbWF0aW9uLnJlc2l6ZSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFjdGl2YXRlKCkge1xuICAgICAgaWYgKCFfaXNGcm96ZW4gJiYgcGxheWluZ0FuaW1hdGlvbnNOdW0pIHtcbiAgICAgICAgaWYgKF9zdG9wcGVkKSB7XG4gICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmaXJzdCk7XG4gICAgICAgICAgX3N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyZWV6ZSgpIHtcbiAgICAgIF9pc0Zyb3plbiA9IHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5mcmVlemUoKSB7XG4gICAgICBfaXNGcm96ZW4gPSBmYWxzZTtcbiAgICAgIGFjdGl2YXRlKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0Vm9sdW1lKHZhbCwgYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5zZXRWb2x1bWUodmFsLCBhbmltYXRpb24pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG11dGUoYW5pbWF0aW9uKSB7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJlZ2lzdGVyZWRBbmltYXRpb25zW2ldLmFuaW1hdGlvbi5tdXRlKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5tdXRlKGFuaW1hdGlvbikge1xuICAgICAgdmFyIGk7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICByZWdpc3RlcmVkQW5pbWF0aW9uc1tpXS5hbmltYXRpb24udW5tdXRlKGFuaW1hdGlvbik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbW9kdWxlT2IucmVnaXN0ZXJBbmltYXRpb24gPSByZWdpc3RlckFuaW1hdGlvbjtcbiAgICBtb2R1bGVPYi5sb2FkQW5pbWF0aW9uID0gbG9hZEFuaW1hdGlvbjtcbiAgICBtb2R1bGVPYi5zZXRTcGVlZCA9IHNldFNwZWVkO1xuICAgIG1vZHVsZU9iLnNldERpcmVjdGlvbiA9IHNldERpcmVjdGlvbjtcbiAgICBtb2R1bGVPYi5wbGF5ID0gcGxheTtcbiAgICBtb2R1bGVPYi5wYXVzZSA9IHBhdXNlO1xuICAgIG1vZHVsZU9iLnN0b3AgPSBzdG9wO1xuICAgIG1vZHVsZU9iLnRvZ2dsZVBhdXNlID0gdG9nZ2xlUGF1c2U7XG4gICAgbW9kdWxlT2Iuc2VhcmNoQW5pbWF0aW9ucyA9IHNlYXJjaEFuaW1hdGlvbnM7XG4gICAgbW9kdWxlT2IucmVzaXplID0gcmVzaXplOyAvLyBtb2R1bGVPYi5zdGFydCA9IHN0YXJ0O1xuXG4gICAgbW9kdWxlT2IuZ29Ub0FuZFN0b3AgPSBnb1RvQW5kU3RvcDtcbiAgICBtb2R1bGVPYi5kZXN0cm95ID0gZGVzdHJveTtcbiAgICBtb2R1bGVPYi5mcmVlemUgPSBmcmVlemU7XG4gICAgbW9kdWxlT2IudW5mcmVlemUgPSB1bmZyZWV6ZTtcbiAgICBtb2R1bGVPYi5zZXRWb2x1bWUgPSBzZXRWb2x1bWU7XG4gICAgbW9kdWxlT2IubXV0ZSA9IG11dGU7XG4gICAgbW9kdWxlT2IudW5tdXRlID0gdW5tdXRlO1xuICAgIG1vZHVsZU9iLmdldFJlZ2lzdGVyZWRBbmltYXRpb25zID0gZ2V0UmVnaXN0ZXJlZEFuaW1hdGlvbnM7XG4gICAgcmV0dXJuIG1vZHVsZU9iO1xuICB9KCk7XG5cbiAgLyogZXNsaW50LWRpc2FibGUgKi9cbiAgdmFyIEJlemllckZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgLyoqXHJcbiAgICAgICAqIEJlemllckVhc2luZyAtIHVzZSBiZXppZXIgY3VydmUgZm9yIHRyYW5zaXRpb24gZWFzaW5nIGZ1bmN0aW9uXHJcbiAgICAgICAqIGJ5IEdhw6t0YW4gUmVuYXVkZWF1IDIwMTQgLSAyMDE1IOKAkyBNSVQgTGljZW5zZVxyXG4gICAgICAgKlxyXG4gICAgICAgKiBDcmVkaXRzOiBpcyBiYXNlZCBvbiBGaXJlZm94J3MgbnNTTUlMS2V5U3BsaW5lLmNwcFxyXG4gICAgICAgKiBVc2FnZTpcclxuICAgICAgICogdmFyIHNwbGluZSA9IEJlemllckVhc2luZyhbIDAuMjUsIDAuMSwgMC4yNSwgMS4wIF0pXHJcbiAgICAgICAqIHNwbGluZS5nZXQoeCkgPT4gcmV0dXJucyB0aGUgZWFzaW5nIHZhbHVlIHwgeCBtdXN0IGJlIGluIFswLCAxXSByYW5nZVxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICB2YXIgb2IgPSB7fTtcbiAgICBvYi5nZXRCZXppZXJFYXNpbmcgPSBnZXRCZXppZXJFYXNpbmc7XG4gICAgdmFyIGJlemllcnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGdldEJlemllckVhc2luZyhhLCBiLCBjLCBkLCBubSkge1xuICAgICAgdmFyIHN0ciA9IG5tIHx8ICgnYmV6XycgKyBhICsgJ18nICsgYiArICdfJyArIGMgKyAnXycgKyBkKS5yZXBsYWNlKC9cXC4vZywgJ3AnKTtcblxuICAgICAgaWYgKGJlemllcnNbc3RyXSkge1xuICAgICAgICByZXR1cm4gYmV6aWVyc1tzdHJdO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmV6RWFzaW5nID0gbmV3IEJlemllckVhc2luZyhbYSwgYiwgYywgZF0pO1xuICAgICAgYmV6aWVyc1tzdHJdID0gYmV6RWFzaW5nO1xuICAgICAgcmV0dXJuIGJlekVhc2luZztcbiAgICB9IC8vIFRoZXNlIHZhbHVlcyBhcmUgZXN0YWJsaXNoZWQgYnkgZW1waXJpY2lzbSB3aXRoIHRlc3RzICh0cmFkZW9mZjogcGVyZm9ybWFuY2UgVlMgcHJlY2lzaW9uKVxuXG5cbiAgICB2YXIgTkVXVE9OX0lURVJBVElPTlMgPSA0O1xuICAgIHZhciBORVdUT05fTUlOX1NMT1BFID0gMC4wMDE7XG4gICAgdmFyIFNVQkRJVklTSU9OX1BSRUNJU0lPTiA9IDAuMDAwMDAwMTtcbiAgICB2YXIgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMgPSAxMDtcbiAgICB2YXIga1NwbGluZVRhYmxlU2l6ZSA9IDExO1xuICAgIHZhciBrU2FtcGxlU3RlcFNpemUgPSAxLjAgLyAoa1NwbGluZVRhYmxlU2l6ZSAtIDEuMCk7XG4gICAgdmFyIGZsb2F0MzJBcnJheVN1cHBvcnRlZCA9IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICdmdW5jdGlvbic7XG5cbiAgICBmdW5jdGlvbiBBKGFBMSwgYUEyKSB7XG4gICAgICByZXR1cm4gMS4wIC0gMy4wICogYUEyICsgMy4wICogYUExO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEIoYUExLCBhQTIpIHtcbiAgICAgIHJldHVybiAzLjAgKiBhQTIgLSA2LjAgKiBhQTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gQyhhQTEpIHtcbiAgICAgIHJldHVybiAzLjAgKiBhQTE7XG4gICAgfSAvLyBSZXR1cm5zIHgodCkgZ2l2ZW4gdCwgeDEsIGFuZCB4Miwgb3IgeSh0KSBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuXG5cbiAgICBmdW5jdGlvbiBjYWxjQmV6aWVyKGFULCBhQTEsIGFBMikge1xuICAgICAgcmV0dXJuICgoQShhQTEsIGFBMikgKiBhVCArIEIoYUExLCBhQTIpKSAqIGFUICsgQyhhQTEpKSAqIGFUO1xuICAgIH0gLy8gUmV0dXJucyBkeC9kdCBnaXZlbiB0LCB4MSwgYW5kIHgyLCBvciBkeS9kdCBnaXZlbiB0LCB5MSwgYW5kIHkyLlxuXG5cbiAgICBmdW5jdGlvbiBnZXRTbG9wZShhVCwgYUExLCBhQTIpIHtcbiAgICAgIHJldHVybiAzLjAgKiBBKGFBMSwgYUEyKSAqIGFUICogYVQgKyAyLjAgKiBCKGFBMSwgYUEyKSAqIGFUICsgQyhhQTEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGJpbmFyeVN1YmRpdmlkZShhWCwgYUEsIGFCLCBtWDEsIG1YMikge1xuICAgICAgdmFyIGN1cnJlbnRYLFxuICAgICAgICAgIGN1cnJlbnRULFxuICAgICAgICAgIGkgPSAwO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGN1cnJlbnRUID0gYUEgKyAoYUIgLSBhQSkgLyAyLjA7XG4gICAgICAgIGN1cnJlbnRYID0gY2FsY0JlemllcihjdXJyZW50VCwgbVgxLCBtWDIpIC0gYVg7XG5cbiAgICAgICAgaWYgKGN1cnJlbnRYID4gMC4wKSB7XG4gICAgICAgICAgYUIgPSBjdXJyZW50VDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhQSA9IGN1cnJlbnRUO1xuICAgICAgICB9XG4gICAgICB9IHdoaWxlIChNYXRoLmFicyhjdXJyZW50WCkgPiBTVUJESVZJU0lPTl9QUkVDSVNJT04gJiYgKytpIDwgU1VCRElWSVNJT05fTUFYX0lURVJBVElPTlMpO1xuXG4gICAgICByZXR1cm4gY3VycmVudFQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3dG9uUmFwaHNvbkl0ZXJhdGUoYVgsIGFHdWVzc1QsIG1YMSwgbVgyKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE5FV1RPTl9JVEVSQVRJT05TOyArK2kpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTbG9wZSA9IGdldFNsb3BlKGFHdWVzc1QsIG1YMSwgbVgyKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTbG9wZSA9PT0gMC4wKSByZXR1cm4gYUd1ZXNzVDtcbiAgICAgICAgdmFyIGN1cnJlbnRYID0gY2FsY0JlemllcihhR3Vlc3NULCBtWDEsIG1YMikgLSBhWDtcbiAgICAgICAgYUd1ZXNzVCAtPSBjdXJyZW50WCAvIGN1cnJlbnRTbG9wZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFHdWVzc1Q7XG4gICAgfVxuICAgIC8qKlxyXG4gICAgICAgKiBwb2ludHMgaXMgYW4gYXJyYXkgb2YgWyBtWDEsIG1ZMSwgbVgyLCBtWTIgXVxyXG4gICAgICAgKi9cblxuXG4gICAgZnVuY3Rpb24gQmV6aWVyRWFzaW5nKHBvaW50cykge1xuICAgICAgdGhpcy5fcCA9IHBvaW50cztcbiAgICAgIHRoaXMuX21TYW1wbGVWYWx1ZXMgPSBmbG9hdDMyQXJyYXlTdXBwb3J0ZWQgPyBuZXcgRmxvYXQzMkFycmF5KGtTcGxpbmVUYWJsZVNpemUpIDogbmV3IEFycmF5KGtTcGxpbmVUYWJsZVNpemUpO1xuICAgICAgdGhpcy5fcHJlY29tcHV0ZWQgPSBmYWxzZTtcbiAgICAgIHRoaXMuZ2V0ID0gdGhpcy5nZXQuYmluZCh0aGlzKTtcbiAgICB9XG5cbiAgICBCZXppZXJFYXNpbmcucHJvdG90eXBlID0ge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoeCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1ZMSA9IHRoaXMuX3BbMV0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdLFxuICAgICAgICAgICAgbVkyID0gdGhpcy5fcFszXTtcbiAgICAgICAgaWYgKCF0aGlzLl9wcmVjb21wdXRlZCkgdGhpcy5fcHJlY29tcHV0ZSgpO1xuICAgICAgICBpZiAobVgxID09PSBtWTEgJiYgbVgyID09PSBtWTIpIHJldHVybiB4OyAvLyBsaW5lYXJcbiAgICAgICAgLy8gQmVjYXVzZSBKYXZhU2NyaXB0IG51bWJlciBhcmUgaW1wcmVjaXNlLCB3ZSBzaG91bGQgZ3VhcmFudGVlIHRoZSBleHRyZW1lcyBhcmUgcmlnaHQuXG5cbiAgICAgICAgaWYgKHggPT09IDApIHJldHVybiAwO1xuICAgICAgICBpZiAoeCA9PT0gMSkgcmV0dXJuIDE7XG4gICAgICAgIHJldHVybiBjYWxjQmV6aWVyKHRoaXMuX2dldFRGb3JYKHgpLCBtWTEsIG1ZMik7XG4gICAgICB9LFxuICAgICAgLy8gUHJpdmF0ZSBwYXJ0XG4gICAgICBfcHJlY29tcHV0ZTogZnVuY3Rpb24gX3ByZWNvbXB1dGUoKSB7XG4gICAgICAgIHZhciBtWDEgPSB0aGlzLl9wWzBdLFxuICAgICAgICAgICAgbVkxID0gdGhpcy5fcFsxXSxcbiAgICAgICAgICAgIG1YMiA9IHRoaXMuX3BbMl0sXG4gICAgICAgICAgICBtWTIgPSB0aGlzLl9wWzNdO1xuICAgICAgICB0aGlzLl9wcmVjb21wdXRlZCA9IHRydWU7XG5cbiAgICAgICAgaWYgKG1YMSAhPT0gbVkxIHx8IG1YMiAhPT0gbVkyKSB7XG4gICAgICAgICAgdGhpcy5fY2FsY1NhbXBsZVZhbHVlcygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgX2NhbGNTYW1wbGVWYWx1ZXM6IGZ1bmN0aW9uIF9jYWxjU2FtcGxlVmFsdWVzKCkge1xuICAgICAgICB2YXIgbVgxID0gdGhpcy5fcFswXSxcbiAgICAgICAgICAgIG1YMiA9IHRoaXMuX3BbMl07XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrU3BsaW5lVGFibGVTaXplOyArK2kpIHtcbiAgICAgICAgICB0aGlzLl9tU2FtcGxlVmFsdWVzW2ldID0gY2FsY0JlemllcihpICoga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIC8qKlxyXG4gICAgICAgICAgICogZ2V0VEZvclggY2hvc2UgdGhlIGZhc3Rlc3QgaGV1cmlzdGljIHRvIGRldGVybWluZSB0aGUgcGVyY2VudGFnZSB2YWx1ZSBwcmVjaXNlbHkgZnJvbSBhIGdpdmVuIFggcHJvamVjdGlvbi5cclxuICAgICAgICAgICAqL1xuICAgICAgX2dldFRGb3JYOiBmdW5jdGlvbiBfZ2V0VEZvclgoYVgpIHtcbiAgICAgICAgdmFyIG1YMSA9IHRoaXMuX3BbMF0sXG4gICAgICAgICAgICBtWDIgPSB0aGlzLl9wWzJdLFxuICAgICAgICAgICAgbVNhbXBsZVZhbHVlcyA9IHRoaXMuX21TYW1wbGVWYWx1ZXM7XG4gICAgICAgIHZhciBpbnRlcnZhbFN0YXJ0ID0gMC4wO1xuICAgICAgICB2YXIgY3VycmVudFNhbXBsZSA9IDE7XG4gICAgICAgIHZhciBsYXN0U2FtcGxlID0ga1NwbGluZVRhYmxlU2l6ZSAtIDE7XG5cbiAgICAgICAgZm9yICg7IGN1cnJlbnRTYW1wbGUgIT09IGxhc3RTYW1wbGUgJiYgbVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSA8PSBhWDsgKytjdXJyZW50U2FtcGxlKSB7XG4gICAgICAgICAgaW50ZXJ2YWxTdGFydCArPSBrU2FtcGxlU3RlcFNpemU7XG4gICAgICAgIH1cblxuICAgICAgICAtLWN1cnJlbnRTYW1wbGU7IC8vIEludGVycG9sYXRlIHRvIHByb3ZpZGUgYW4gaW5pdGlhbCBndWVzcyBmb3IgdFxuXG4gICAgICAgIHZhciBkaXN0ID0gKGFYIC0gbVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlXSkgLyAobVNhbXBsZVZhbHVlc1tjdXJyZW50U2FtcGxlICsgMV0gLSBtU2FtcGxlVmFsdWVzW2N1cnJlbnRTYW1wbGVdKTtcbiAgICAgICAgdmFyIGd1ZXNzRm9yVCA9IGludGVydmFsU3RhcnQgKyBkaXN0ICoga1NhbXBsZVN0ZXBTaXplO1xuICAgICAgICB2YXIgaW5pdGlhbFNsb3BlID0gZ2V0U2xvcGUoZ3Vlc3NGb3JULCBtWDEsIG1YMik7XG5cbiAgICAgICAgaWYgKGluaXRpYWxTbG9wZSA+PSBORVdUT05fTUlOX1NMT1BFKSB7XG4gICAgICAgICAgcmV0dXJuIG5ld3RvblJhcGhzb25JdGVyYXRlKGFYLCBndWVzc0ZvclQsIG1YMSwgbVgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpbml0aWFsU2xvcGUgPT09IDAuMCkge1xuICAgICAgICAgIHJldHVybiBndWVzc0ZvclQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYmluYXJ5U3ViZGl2aWRlKGFYLCBpbnRlcnZhbFN0YXJ0LCBpbnRlcnZhbFN0YXJ0ICsga1NhbXBsZVN0ZXBTaXplLCBtWDEsIG1YMik7XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgcG9vbGluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBfZG91YmxlKGFycikge1xuICAgICAgcmV0dXJuIGFyci5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheShhcnIubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIFwiZG91YmxlXCI6IF9kb3VibGVcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHBvb2xGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoaW5pdGlhbExlbmd0aCwgX2NyZWF0ZSwgX3JlbGVhc2UpIHtcbiAgICAgIHZhciBfbGVuZ3RoID0gMDtcbiAgICAgIHZhciBfbWF4TGVuZ3RoID0gaW5pdGlhbExlbmd0aDtcbiAgICAgIHZhciBwb29sID0gY3JlYXRlU2l6ZWRBcnJheShfbWF4TGVuZ3RoKTtcbiAgICAgIHZhciBvYiA9IHtcbiAgICAgICAgbmV3RWxlbWVudDogbmV3RWxlbWVudCxcbiAgICAgICAgcmVsZWFzZTogcmVsZWFzZVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gbmV3RWxlbWVudCgpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQ7XG5cbiAgICAgICAgaWYgKF9sZW5ndGgpIHtcbiAgICAgICAgICBfbGVuZ3RoIC09IDE7XG4gICAgICAgICAgZWxlbWVudCA9IHBvb2xbX2xlbmd0aF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWxlbWVudCA9IF9jcmVhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZWxlYXNlKGVsZW1lbnQpIHtcbiAgICAgICAgaWYgKF9sZW5ndGggPT09IF9tYXhMZW5ndGgpIHtcbiAgICAgICAgICBwb29sID0gcG9vbGluZ1tcImRvdWJsZVwiXShwb29sKTtcbiAgICAgICAgICBfbWF4TGVuZ3RoICo9IDI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX3JlbGVhc2UpIHtcbiAgICAgICAgICBfcmVsZWFzZShlbGVtZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvb2xbX2xlbmd0aF0gPSBlbGVtZW50O1xuICAgICAgICBfbGVuZ3RoICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGJlemllckxlbmd0aFBvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgYWRkZWRMZW5ndGg6IDAsXG4gICAgICAgIHBlcmNlbnRzOiBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSksXG4gICAgICAgIGxlbmd0aHM6IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBnZXREZWZhdWx0Q3VydmVTZWdtZW50cygpKVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9vbEZhY3RvcnkoOCwgY3JlYXRlKTtcbiAgfSgpO1xuXG4gIHZhciBzZWdtZW50c0xlbmd0aFBvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGVuZ3RoczogW10sXG4gICAgICAgIHRvdGFsTGVuZ3RoOiAwXG4gICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGVhc2UoZWxlbWVudCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZWxlbWVudC5sZW5ndGhzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGJlemllckxlbmd0aFBvb2wucmVsZWFzZShlbGVtZW50Lmxlbmd0aHNbaV0pO1xuICAgICAgfVxuXG4gICAgICBlbGVtZW50Lmxlbmd0aHMubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9vbEZhY3RvcnkoOCwgY3JlYXRlLCByZWxlYXNlKTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIGJlekZ1bmN0aW9uKCkge1xuICAgIHZhciBtYXRoID0gTWF0aDtcblxuICAgIGZ1bmN0aW9uIHBvaW50T25MaW5lMkQoeDEsIHkxLCB4MiwgeTIsIHgzLCB5Mykge1xuICAgICAgdmFyIGRldDEgPSB4MSAqIHkyICsgeTEgKiB4MyArIHgyICogeTMgLSB4MyAqIHkyIC0geTMgKiB4MSAtIHgyICogeTE7XG4gICAgICByZXR1cm4gZGV0MSA+IC0wLjAwMSAmJiBkZXQxIDwgMC4wMDE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9pbnRPbkxpbmUzRCh4MSwgeTEsIHoxLCB4MiwgeTIsIHoyLCB4MywgeTMsIHozKSB7XG4gICAgICBpZiAoejEgPT09IDAgJiYgejIgPT09IDAgJiYgejMgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHBvaW50T25MaW5lMkQoeDEsIHkxLCB4MiwgeTIsIHgzLCB5Myk7XG4gICAgICB9XG5cbiAgICAgIHZhciBkaXN0MSA9IG1hdGguc3FydChtYXRoLnBvdyh4MiAtIHgxLCAyKSArIG1hdGgucG93KHkyIC0geTEsIDIpICsgbWF0aC5wb3coejIgLSB6MSwgMikpO1xuICAgICAgdmFyIGRpc3QyID0gbWF0aC5zcXJ0KG1hdGgucG93KHgzIC0geDEsIDIpICsgbWF0aC5wb3coeTMgLSB5MSwgMikgKyBtYXRoLnBvdyh6MyAtIHoxLCAyKSk7XG4gICAgICB2YXIgZGlzdDMgPSBtYXRoLnNxcnQobWF0aC5wb3coeDMgLSB4MiwgMikgKyBtYXRoLnBvdyh5MyAtIHkyLCAyKSArIG1hdGgucG93KHozIC0gejIsIDIpKTtcbiAgICAgIHZhciBkaWZmRGlzdDtcblxuICAgICAgaWYgKGRpc3QxID4gZGlzdDIpIHtcbiAgICAgICAgaWYgKGRpc3QxID4gZGlzdDMpIHtcbiAgICAgICAgICBkaWZmRGlzdCA9IGRpc3QxIC0gZGlzdDIgLSBkaXN0MztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWZmRGlzdCA9IGRpc3QzIC0gZGlzdDIgLSBkaXN0MTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkaXN0MyA+IGRpc3QyKSB7XG4gICAgICAgIGRpZmZEaXN0ID0gZGlzdDMgLSBkaXN0MiAtIGRpc3QxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlmZkRpc3QgPSBkaXN0MiAtIGRpc3QxIC0gZGlzdDM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkaWZmRGlzdCA+IC0wLjAwMDEgJiYgZGlmZkRpc3QgPCAwLjAwMDE7XG4gICAgfVxuXG4gICAgdmFyIGdldEJlemllckxlbmd0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgcHQ0KSB7XG4gICAgICAgIHZhciBjdXJ2ZVNlZ21lbnRzID0gZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKTtcbiAgICAgICAgdmFyIGs7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuO1xuICAgICAgICB2YXIgcHRDb29yZDtcbiAgICAgICAgdmFyIHBlcmM7XG4gICAgICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG4gICAgICAgIHZhciBwdERpc3RhbmNlO1xuICAgICAgICB2YXIgcG9pbnQgPSBbXTtcbiAgICAgICAgdmFyIGxhc3RQb2ludCA9IFtdO1xuICAgICAgICB2YXIgbGVuZ3RoRGF0YSA9IGJlemllckxlbmd0aFBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgICBsZW4gPSBwdDMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBjdXJ2ZVNlZ21lbnRzOyBrICs9IDEpIHtcbiAgICAgICAgICBwZXJjID0gayAvIChjdXJ2ZVNlZ21lbnRzIC0gMSk7XG4gICAgICAgICAgcHREaXN0YW5jZSA9IDA7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHB0Q29vcmQgPSBibVBvdygxIC0gcGVyYywgMykgKiBwdDFbaV0gKyAzICogYm1Qb3coMSAtIHBlcmMsIDIpICogcGVyYyAqIHB0M1tpXSArIDMgKiAoMSAtIHBlcmMpICogYm1Qb3cocGVyYywgMikgKiBwdDRbaV0gKyBibVBvdyhwZXJjLCAzKSAqIHB0MltpXTtcbiAgICAgICAgICAgIHBvaW50W2ldID0gcHRDb29yZDtcblxuICAgICAgICAgICAgaWYgKGxhc3RQb2ludFtpXSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBwdERpc3RhbmNlICs9IGJtUG93KHBvaW50W2ldIC0gbGFzdFBvaW50W2ldLCAyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGFzdFBvaW50W2ldID0gcG9pbnRbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHB0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgIHB0RGlzdGFuY2UgPSBibVNxcnQocHREaXN0YW5jZSk7XG4gICAgICAgICAgICBhZGRlZExlbmd0aCArPSBwdERpc3RhbmNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxlbmd0aERhdGEucGVyY2VudHNba10gPSBwZXJjO1xuICAgICAgICAgIGxlbmd0aERhdGEubGVuZ3Roc1trXSA9IGFkZGVkTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgbGVuZ3RoRGF0YS5hZGRlZExlbmd0aCA9IGFkZGVkTGVuZ3RoO1xuICAgICAgICByZXR1cm4gbGVuZ3RoRGF0YTtcbiAgICAgIH07XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2VnbWVudHNMZW5ndGgoc2hhcGVEYXRhKSB7XG4gICAgICB2YXIgc2VnbWVudHNMZW5ndGggPSBzZWdtZW50c0xlbmd0aFBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgdmFyIGNsb3NlZCA9IHNoYXBlRGF0YS5jO1xuICAgICAgdmFyIHBhdGhWID0gc2hhcGVEYXRhLnY7XG4gICAgICB2YXIgcGF0aE8gPSBzaGFwZURhdGEubztcbiAgICAgIHZhciBwYXRoSSA9IHNoYXBlRGF0YS5pO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gc2hhcGVEYXRhLl9sZW5ndGg7XG4gICAgICB2YXIgbGVuZ3RocyA9IHNlZ21lbnRzTGVuZ3RoLmxlbmd0aHM7XG4gICAgICB2YXIgdG90YWxMZW5ndGggPSAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuIC0gMTsgaSArPSAxKSB7XG4gICAgICAgIGxlbmd0aHNbaV0gPSBnZXRCZXppZXJMZW5ndGgocGF0aFZbaV0sIHBhdGhWW2kgKyAxXSwgcGF0aE9baV0sIHBhdGhJW2kgKyAxXSk7XG4gICAgICAgIHRvdGFsTGVuZ3RoICs9IGxlbmd0aHNbaV0uYWRkZWRMZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbG9zZWQgJiYgbGVuKSB7XG4gICAgICAgIGxlbmd0aHNbaV0gPSBnZXRCZXppZXJMZW5ndGgocGF0aFZbaV0sIHBhdGhWWzBdLCBwYXRoT1tpXSwgcGF0aElbMF0pO1xuICAgICAgICB0b3RhbExlbmd0aCArPSBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoO1xuICAgICAgfVxuXG4gICAgICBzZWdtZW50c0xlbmd0aC50b3RhbExlbmd0aCA9IHRvdGFsTGVuZ3RoO1xuICAgICAgcmV0dXJuIHNlZ21lbnRzTGVuZ3RoO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEJlemllckRhdGEobGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgdGhpcy5wb2ludHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBQb2ludERhdGEocGFydGlhbCwgcG9pbnQpIHtcbiAgICAgIHRoaXMucGFydGlhbExlbmd0aCA9IHBhcnRpYWw7XG4gICAgICB0aGlzLnBvaW50ID0gcG9pbnQ7XG4gICAgfVxuXG4gICAgdmFyIGJ1aWxkQmV6aWVyRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdG9yZWREYXRhID0ge307XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHB0MSwgcHQyLCBwdDMsIHB0NCkge1xuICAgICAgICB2YXIgYmV6aWVyTmFtZSA9IChwdDFbMF0gKyAnXycgKyBwdDFbMV0gKyAnXycgKyBwdDJbMF0gKyAnXycgKyBwdDJbMV0gKyAnXycgKyBwdDNbMF0gKyAnXycgKyBwdDNbMV0gKyAnXycgKyBwdDRbMF0gKyAnXycgKyBwdDRbMV0pLnJlcGxhY2UoL1xcLi9nLCAncCcpO1xuXG4gICAgICAgIGlmICghc3RvcmVkRGF0YVtiZXppZXJOYW1lXSkge1xuICAgICAgICAgIHZhciBjdXJ2ZVNlZ21lbnRzID0gZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKTtcbiAgICAgICAgICB2YXIgaztcbiAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICB2YXIgbGVuO1xuICAgICAgICAgIHZhciBwdENvb3JkO1xuICAgICAgICAgIHZhciBwZXJjO1xuICAgICAgICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG4gICAgICAgICAgdmFyIHB0RGlzdGFuY2U7XG4gICAgICAgICAgdmFyIHBvaW50O1xuICAgICAgICAgIHZhciBsYXN0UG9pbnQgPSBudWxsO1xuXG4gICAgICAgICAgaWYgKHB0MS5sZW5ndGggPT09IDIgJiYgKHB0MVswXSAhPT0gcHQyWzBdIHx8IHB0MVsxXSAhPT0gcHQyWzFdKSAmJiBwb2ludE9uTGluZTJEKHB0MVswXSwgcHQxWzFdLCBwdDJbMF0sIHB0MlsxXSwgcHQxWzBdICsgcHQzWzBdLCBwdDFbMV0gKyBwdDNbMV0pICYmIHBvaW50T25MaW5lMkQocHQxWzBdLCBwdDFbMV0sIHB0MlswXSwgcHQyWzFdLCBwdDJbMF0gKyBwdDRbMF0sIHB0MlsxXSArIHB0NFsxXSkpIHtcbiAgICAgICAgICAgIGN1cnZlU2VnbWVudHMgPSAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBiZXppZXJEYXRhID0gbmV3IEJlemllckRhdGEoY3VydmVTZWdtZW50cyk7XG4gICAgICAgICAgbGVuID0gcHQzLmxlbmd0aDtcblxuICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBjdXJ2ZVNlZ21lbnRzOyBrICs9IDEpIHtcbiAgICAgICAgICAgIHBvaW50ID0gY3JlYXRlU2l6ZWRBcnJheShsZW4pO1xuICAgICAgICAgICAgcGVyYyA9IGsgLyAoY3VydmVTZWdtZW50cyAtIDEpO1xuICAgICAgICAgICAgcHREaXN0YW5jZSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgICBwdENvb3JkID0gYm1Qb3coMSAtIHBlcmMsIDMpICogcHQxW2ldICsgMyAqIGJtUG93KDEgLSBwZXJjLCAyKSAqIHBlcmMgKiAocHQxW2ldICsgcHQzW2ldKSArIDMgKiAoMSAtIHBlcmMpICogYm1Qb3cocGVyYywgMikgKiAocHQyW2ldICsgcHQ0W2ldKSArIGJtUG93KHBlcmMsIDMpICogcHQyW2ldO1xuICAgICAgICAgICAgICBwb2ludFtpXSA9IHB0Q29vcmQ7XG5cbiAgICAgICAgICAgICAgaWYgKGxhc3RQb2ludCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHB0RGlzdGFuY2UgKz0gYm1Qb3cocG9pbnRbaV0gLSBsYXN0UG9pbnRbaV0sIDIpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHB0RGlzdGFuY2UgPSBibVNxcnQocHREaXN0YW5jZSk7XG4gICAgICAgICAgICBhZGRlZExlbmd0aCArPSBwdERpc3RhbmNlO1xuICAgICAgICAgICAgYmV6aWVyRGF0YS5wb2ludHNba10gPSBuZXcgUG9pbnREYXRhKHB0RGlzdGFuY2UsIHBvaW50KTtcbiAgICAgICAgICAgIGxhc3RQb2ludCA9IHBvaW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJlemllckRhdGEuc2VnbWVudExlbmd0aCA9IGFkZGVkTGVuZ3RoO1xuICAgICAgICAgIHN0b3JlZERhdGFbYmV6aWVyTmFtZV0gPSBiZXppZXJEYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0b3JlZERhdGFbYmV6aWVyTmFtZV07XG4gICAgICB9O1xuICAgIH0oKTtcblxuICAgIGZ1bmN0aW9uIGdldERpc3RhbmNlUGVyYyhwZXJjLCBiZXppZXJEYXRhKSB7XG4gICAgICB2YXIgcGVyY2VudHMgPSBiZXppZXJEYXRhLnBlcmNlbnRzO1xuICAgICAgdmFyIGxlbmd0aHMgPSBiZXppZXJEYXRhLmxlbmd0aHM7XG4gICAgICB2YXIgbGVuID0gcGVyY2VudHMubGVuZ3RoO1xuICAgICAgdmFyIGluaXRQb3MgPSBibUZsb29yKChsZW4gLSAxKSAqIHBlcmMpO1xuICAgICAgdmFyIGxlbmd0aFBvcyA9IHBlcmMgKiBiZXppZXJEYXRhLmFkZGVkTGVuZ3RoO1xuICAgICAgdmFyIGxQZXJjID0gMDtcblxuICAgICAgaWYgKGluaXRQb3MgPT09IGxlbiAtIDEgfHwgaW5pdFBvcyA9PT0gMCB8fCBsZW5ndGhQb3MgPT09IGxlbmd0aHNbaW5pdFBvc10pIHtcbiAgICAgICAgcmV0dXJuIHBlcmNlbnRzW2luaXRQb3NdO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGlyID0gbGVuZ3Roc1tpbml0UG9zXSA+IGxlbmd0aFBvcyA/IC0xIDogMTtcbiAgICAgIHZhciBmbGFnID0gdHJ1ZTtcblxuICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgaWYgKGxlbmd0aHNbaW5pdFBvc10gPD0gbGVuZ3RoUG9zICYmIGxlbmd0aHNbaW5pdFBvcyArIDFdID4gbGVuZ3RoUG9zKSB7XG4gICAgICAgICAgbFBlcmMgPSAobGVuZ3RoUG9zIC0gbGVuZ3Roc1tpbml0UG9zXSkgLyAobGVuZ3Roc1tpbml0UG9zICsgMV0gLSBsZW5ndGhzW2luaXRQb3NdKTtcbiAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5pdFBvcyArPSBkaXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5pdFBvcyA8IDAgfHwgaW5pdFBvcyA+PSBsZW4gLSAxKSB7XG4gICAgICAgICAgLy8gRklYIGZvciBUeXBlZEFycmF5cyB0aGF0IGRvbid0IHN0b3JlIGZsb2F0aW5nIHBvaW50IHZhbHVlcyB3aXRoIGVub3VnaCBhY2N1cmFjeVxuICAgICAgICAgIGlmIChpbml0UG9zID09PSBsZW4gLSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcGVyY2VudHNbaW5pdFBvc107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwZXJjZW50c1tpbml0UG9zXSArIChwZXJjZW50c1tpbml0UG9zICsgMV0gLSBwZXJjZW50c1tpbml0UG9zXSkgKiBsUGVyYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQb2ludEluU2VnbWVudChwdDEsIHB0MiwgcHQzLCBwdDQsIHBlcmNlbnQsIGJlemllckRhdGEpIHtcbiAgICAgIHZhciB0MSA9IGdldERpc3RhbmNlUGVyYyhwZXJjZW50LCBiZXppZXJEYXRhKTtcbiAgICAgIHZhciB1MSA9IDEgLSB0MTtcbiAgICAgIHZhciBwdFggPSBtYXRoLnJvdW5kKCh1MSAqIHUxICogdTEgKiBwdDFbMF0gKyAodDEgKiB1MSAqIHUxICsgdTEgKiB0MSAqIHUxICsgdTEgKiB1MSAqIHQxKSAqIHB0M1swXSArICh0MSAqIHQxICogdTEgKyB1MSAqIHQxICogdDEgKyB0MSAqIHUxICogdDEpICogcHQ0WzBdICsgdDEgKiB0MSAqIHQxICogcHQyWzBdKSAqIDEwMDApIC8gMTAwMDtcbiAgICAgIHZhciBwdFkgPSBtYXRoLnJvdW5kKCh1MSAqIHUxICogdTEgKiBwdDFbMV0gKyAodDEgKiB1MSAqIHUxICsgdTEgKiB0MSAqIHUxICsgdTEgKiB1MSAqIHQxKSAqIHB0M1sxXSArICh0MSAqIHQxICogdTEgKyB1MSAqIHQxICogdDEgKyB0MSAqIHUxICogdDEpICogcHQ0WzFdICsgdDEgKiB0MSAqIHQxICogcHQyWzFdKSAqIDEwMDApIC8gMTAwMDtcbiAgICAgIHJldHVybiBbcHRYLCBwdFldO1xuICAgIH1cblxuICAgIHZhciBiZXppZXJTZWdtZW50UG9pbnRzID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDgpO1xuXG4gICAgZnVuY3Rpb24gZ2V0TmV3U2VnbWVudChwdDEsIHB0MiwgcHQzLCBwdDQsIHN0YXJ0UGVyYywgZW5kUGVyYywgYmV6aWVyRGF0YSkge1xuICAgICAgaWYgKHN0YXJ0UGVyYyA8IDApIHtcbiAgICAgICAgc3RhcnRQZXJjID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnRQZXJjID4gMSkge1xuICAgICAgICBzdGFydFBlcmMgPSAxO1xuICAgICAgfVxuXG4gICAgICB2YXIgdDAgPSBnZXREaXN0YW5jZVBlcmMoc3RhcnRQZXJjLCBiZXppZXJEYXRhKTtcbiAgICAgIGVuZFBlcmMgPSBlbmRQZXJjID4gMSA/IDEgOiBlbmRQZXJjO1xuICAgICAgdmFyIHQxID0gZ2V0RGlzdGFuY2VQZXJjKGVuZFBlcmMsIGJlemllckRhdGEpO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gcHQxLmxlbmd0aDtcbiAgICAgIHZhciB1MCA9IDEgLSB0MDtcbiAgICAgIHZhciB1MSA9IDEgLSB0MTtcbiAgICAgIHZhciB1MHUwdTAgPSB1MCAqIHUwICogdTA7XG4gICAgICB2YXIgdDB1MHUwXzMgPSB0MCAqIHUwICogdTAgKiAzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MHUwXzMgPSB0MCAqIHQwICogdTAgKiAzOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MHQwID0gdDAgKiB0MCAqIHQwOyAvL1xuXG4gICAgICB2YXIgdTB1MHUxID0gdTAgKiB1MCAqIHUxO1xuICAgICAgdmFyIHQwdTB1MV8zID0gdDAgKiB1MCAqIHUxICsgdTAgKiB0MCAqIHUxICsgdTAgKiB1MCAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDB0MHUxXzMgPSB0MCAqIHQwICogdTEgKyB1MCAqIHQwICogdDEgKyB0MCAqIHUwICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQwdDEgPSB0MCAqIHQwICogdDE7IC8vXG5cbiAgICAgIHZhciB1MHUxdTEgPSB1MCAqIHUxICogdTE7XG4gICAgICB2YXIgdDB1MXUxXzMgPSB0MCAqIHUxICogdTEgKyB1MCAqIHQxICogdTEgKyB1MCAqIHUxICogdDE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY2FtZWxjYXNlXG5cbiAgICAgIHZhciB0MHQxdTFfMyA9IHQwICogdDEgKiB1MSArIHUwICogdDEgKiB0MSArIHQwICogdTEgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQwdDF0MSA9IHQwICogdDEgKiB0MTsgLy9cblxuICAgICAgdmFyIHUxdTF1MSA9IHUxICogdTEgKiB1MTtcbiAgICAgIHZhciB0MXUxdTFfMyA9IHQxICogdTEgKiB1MSArIHUxICogdDEgKiB1MSArIHUxICogdTEgKiB0MTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgdmFyIHQxdDF1MV8zID0gdDEgKiB0MSAqIHUxICsgdTEgKiB0MSAqIHQxICsgdDEgKiB1MSAqIHQxOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGNhbWVsY2FzZVxuXG4gICAgICB2YXIgdDF0MXQxID0gdDEgKiB0MSAqIHQxO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgYmV6aWVyU2VnbWVudFBvaW50c1tpICogNF0gPSBtYXRoLnJvdW5kKCh1MHUwdTAgKiBwdDFbaV0gKyB0MHUwdTBfMyAqIHB0M1tpXSArIHQwdDB1MF8zICogcHQ0W2ldICsgdDB0MHQwICogcHQyW2ldKSAqIDEwMDApIC8gMTAwMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgICBiZXppZXJTZWdtZW50UG9pbnRzW2kgKiA0ICsgMV0gPSBtYXRoLnJvdW5kKCh1MHUwdTEgKiBwdDFbaV0gKyB0MHUwdTFfMyAqIHB0M1tpXSArIHQwdDB1MV8zICogcHQ0W2ldICsgdDB0MHQxICogcHQyW2ldKSAqIDEwMDApIC8gMTAwMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgICBiZXppZXJTZWdtZW50UG9pbnRzW2kgKiA0ICsgMl0gPSBtYXRoLnJvdW5kKCh1MHUxdTEgKiBwdDFbaV0gKyB0MHUxdTFfMyAqIHB0M1tpXSArIHQwdDF1MV8zICogcHQ0W2ldICsgdDB0MXQxICogcHQyW2ldKSAqIDEwMDApIC8gMTAwMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcblxuICAgICAgICBiZXppZXJTZWdtZW50UG9pbnRzW2kgKiA0ICsgM10gPSBtYXRoLnJvdW5kKCh1MXUxdTEgKiBwdDFbaV0gKyB0MXUxdTFfMyAqIHB0M1tpXSArIHQxdDF1MV8zICogcHQ0W2ldICsgdDF0MXQxICogcHQyW2ldKSAqIDEwMDApIC8gMTAwMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJlemllclNlZ21lbnRQb2ludHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFNlZ21lbnRzTGVuZ3RoOiBnZXRTZWdtZW50c0xlbmd0aCxcbiAgICAgIGdldE5ld1NlZ21lbnQ6IGdldE5ld1NlZ21lbnQsXG4gICAgICBnZXRQb2ludEluU2VnbWVudDogZ2V0UG9pbnRJblNlZ21lbnQsXG4gICAgICBidWlsZEJlemllckRhdGE6IGJ1aWxkQmV6aWVyRGF0YSxcbiAgICAgIHBvaW50T25MaW5lMkQ6IHBvaW50T25MaW5lMkQsXG4gICAgICBwb2ludE9uTGluZTNEOiBwb2ludE9uTGluZTNEXG4gICAgfTtcbiAgfVxuXG4gIHZhciBiZXogPSBiZXpGdW5jdGlvbigpO1xuXG4gIHZhciBpbml0RnJhbWUgPSBpbml0aWFsRGVmYXVsdEZyYW1lO1xuICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gIGZ1bmN0aW9uIGludGVycG9sYXRlVmFsdWUoZnJhbWVOdW0sIGNhY2hpbmcpIHtcbiAgICB2YXIgb2Zmc2V0VGltZSA9IHRoaXMub2Zmc2V0VGltZTtcbiAgICB2YXIgbmV3VmFsdWU7XG5cbiAgICBpZiAodGhpcy5wcm9wVHlwZSA9PT0gJ211bHRpZGltZW5zaW9uYWwnKSB7XG4gICAgICBuZXdWYWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCB0aGlzLnB2Lmxlbmd0aCk7XG4gICAgfVxuXG4gICAgdmFyIGl0ZXJhdGlvbkluZGV4ID0gY2FjaGluZy5sYXN0SW5kZXg7XG4gICAgdmFyIGkgPSBpdGVyYXRpb25JbmRleDtcbiAgICB2YXIgbGVuID0gdGhpcy5rZXlmcmFtZXMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZmxhZyA9IHRydWU7XG4gICAgdmFyIGtleURhdGE7XG4gICAgdmFyIG5leHRLZXlEYXRhO1xuICAgIHZhciBrZXlmcmFtZU1ldGFkYXRhO1xuXG4gICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgIGtleURhdGEgPSB0aGlzLmtleWZyYW1lc1tpXTtcbiAgICAgIG5leHRLZXlEYXRhID0gdGhpcy5rZXlmcmFtZXNbaSArIDFdO1xuXG4gICAgICBpZiAoaSA9PT0gbGVuIC0gMSAmJiBmcmFtZU51bSA+PSBuZXh0S2V5RGF0YS50IC0gb2Zmc2V0VGltZSkge1xuICAgICAgICBpZiAoa2V5RGF0YS5oKSB7XG4gICAgICAgICAga2V5RGF0YSA9IG5leHRLZXlEYXRhO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKG5leHRLZXlEYXRhLnQgLSBvZmZzZXRUaW1lID4gZnJhbWVOdW0pIHtcbiAgICAgICAgaXRlcmF0aW9uSW5kZXggPSBpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGkgPCBsZW4gLSAxKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGl0ZXJhdGlvbkluZGV4ID0gMDtcbiAgICAgICAgZmxhZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGtleWZyYW1lTWV0YWRhdGEgPSB0aGlzLmtleWZyYW1lc01ldGFkYXRhW2ldIHx8IHt9O1xuICAgIHZhciBrO1xuICAgIHZhciBrTGVuO1xuICAgIHZhciBwZXJjO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBqO1xuICAgIHZhciBmbmM7XG4gICAgdmFyIG5leHRLZXlUaW1lID0gbmV4dEtleURhdGEudCAtIG9mZnNldFRpbWU7XG4gICAgdmFyIGtleVRpbWUgPSBrZXlEYXRhLnQgLSBvZmZzZXRUaW1lO1xuICAgIHZhciBlbmRWYWx1ZTtcblxuICAgIGlmIChrZXlEYXRhLnRvKSB7XG4gICAgICBpZiAoIWtleWZyYW1lTWV0YWRhdGEuYmV6aWVyRGF0YSkge1xuICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLmJlemllckRhdGEgPSBiZXouYnVpbGRCZXppZXJEYXRhKGtleURhdGEucywgbmV4dEtleURhdGEucyB8fCBrZXlEYXRhLmUsIGtleURhdGEudG8sIGtleURhdGEudGkpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYmV6aWVyRGF0YSA9IGtleWZyYW1lTWV0YWRhdGEuYmV6aWVyRGF0YTtcblxuICAgICAgaWYgKGZyYW1lTnVtID49IG5leHRLZXlUaW1lIHx8IGZyYW1lTnVtIDwga2V5VGltZSkge1xuICAgICAgICB2YXIgaW5kID0gZnJhbWVOdW0gPj0gbmV4dEtleVRpbWUgPyBiZXppZXJEYXRhLnBvaW50cy5sZW5ndGggLSAxIDogMDtcbiAgICAgICAga0xlbiA9IGJlemllckRhdGEucG9pbnRzW2luZF0ucG9pbnQubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICBuZXdWYWx1ZVtrXSA9IGJlemllckRhdGEucG9pbnRzW2luZF0ucG9pbnRba107XG4gICAgICAgIH0gLy8gY2FjaGluZy5fbGFzdEtleWZyYW1lSW5kZXggPSAtMTtcblxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGtleWZyYW1lTWV0YWRhdGEuX19mbmN0KSB7XG4gICAgICAgICAgZm5jID0ga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm5jID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoa2V5RGF0YS5vLngsIGtleURhdGEuby55LCBrZXlEYXRhLmkueCwga2V5RGF0YS5pLnksIGtleURhdGEubikuZ2V0O1xuICAgICAgICAgIGtleWZyYW1lTWV0YWRhdGEuX19mbmN0ID0gZm5jO1xuICAgICAgICB9XG5cbiAgICAgICAgcGVyYyA9IGZuYygoZnJhbWVOdW0gLSBrZXlUaW1lKSAvIChuZXh0S2V5VGltZSAtIGtleVRpbWUpKTtcbiAgICAgICAgdmFyIGRpc3RhbmNlSW5MaW5lID0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoICogcGVyYztcbiAgICAgICAgdmFyIHNlZ21lbnRQZXJjO1xuICAgICAgICB2YXIgYWRkZWRMZW5ndGggPSBjYWNoaW5nLmxhc3RGcmFtZSA8IGZyYW1lTnVtICYmIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID09PSBpID8gY2FjaGluZy5fbGFzdEFkZGVkTGVuZ3RoIDogMDtcbiAgICAgICAgaiA9IGNhY2hpbmcubGFzdEZyYW1lIDwgZnJhbWVOdW0gJiYgY2FjaGluZy5fbGFzdEtleWZyYW1lSW5kZXggPT09IGkgPyBjYWNoaW5nLl9sYXN0UG9pbnQgOiAwO1xuICAgICAgICBmbGFnID0gdHJ1ZTtcbiAgICAgICAgakxlbiA9IGJlemllckRhdGEucG9pbnRzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IGJlemllckRhdGEucG9pbnRzW2pdLnBhcnRpYWxMZW5ndGg7XG5cbiAgICAgICAgICBpZiAoZGlzdGFuY2VJbkxpbmUgPT09IDAgfHwgcGVyYyA9PT0gMCB8fCBqID09PSBiZXppZXJEYXRhLnBvaW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBrTGVuID0gYmV6aWVyRGF0YS5wb2ludHNbal0ucG9pbnQubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgICAgIG5ld1ZhbHVlW2tdID0gYmV6aWVyRGF0YS5wb2ludHNbal0ucG9pbnRba107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2VJbkxpbmUgPj0gYWRkZWRMZW5ndGggJiYgZGlzdGFuY2VJbkxpbmUgPCBhZGRlZExlbmd0aCArIGJlemllckRhdGEucG9pbnRzW2ogKyAxXS5wYXJ0aWFsTGVuZ3RoKSB7XG4gICAgICAgICAgICBzZWdtZW50UGVyYyA9IChkaXN0YW5jZUluTGluZSAtIGFkZGVkTGVuZ3RoKSAvIGJlemllckRhdGEucG9pbnRzW2ogKyAxXS5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAga0xlbiA9IGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50Lmxlbmd0aDtcblxuICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgICBuZXdWYWx1ZVtrXSA9IGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50W2tdICsgKGJlemllckRhdGEucG9pbnRzW2ogKyAxXS5wb2ludFtrXSAtIGJlemllckRhdGEucG9pbnRzW2pdLnBvaW50W2tdKSAqIHNlZ21lbnRQZXJjO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaiA8IGpMZW4gLSAxKSB7XG4gICAgICAgICAgICBqICs9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjYWNoaW5nLl9sYXN0UG9pbnQgPSBqO1xuICAgICAgICBjYWNoaW5nLl9sYXN0QWRkZWRMZW5ndGggPSBhZGRlZExlbmd0aCAtIGJlemllckRhdGEucG9pbnRzW2pdLnBhcnRpYWxMZW5ndGg7XG4gICAgICAgIGNhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG91dFg7XG4gICAgICB2YXIgb3V0WTtcbiAgICAgIHZhciBpblg7XG4gICAgICB2YXIgaW5ZO1xuICAgICAgdmFyIGtleVZhbHVlO1xuICAgICAgbGVuID0ga2V5RGF0YS5zLmxlbmd0aDtcbiAgICAgIGVuZFZhbHVlID0gbmV4dEtleURhdGEucyB8fCBrZXlEYXRhLmU7XG5cbiAgICAgIGlmICh0aGlzLnNoICYmIGtleURhdGEuaCAhPT0gMSkge1xuICAgICAgICBpZiAoZnJhbWVOdW0gPj0gbmV4dEtleVRpbWUpIHtcbiAgICAgICAgICBuZXdWYWx1ZVswXSA9IGVuZFZhbHVlWzBdO1xuICAgICAgICAgIG5ld1ZhbHVlWzFdID0gZW5kVmFsdWVbMV07XG4gICAgICAgICAgbmV3VmFsdWVbMl0gPSBlbmRWYWx1ZVsyXTtcbiAgICAgICAgfSBlbHNlIGlmIChmcmFtZU51bSA8PSBrZXlUaW1lKSB7XG4gICAgICAgICAgbmV3VmFsdWVbMF0gPSBrZXlEYXRhLnNbMF07XG4gICAgICAgICAgbmV3VmFsdWVbMV0gPSBrZXlEYXRhLnNbMV07XG4gICAgICAgICAgbmV3VmFsdWVbMl0gPSBrZXlEYXRhLnNbMl07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHF1YXRTdGFydCA9IGNyZWF0ZVF1YXRlcm5pb24oa2V5RGF0YS5zKTtcbiAgICAgICAgICB2YXIgcXVhdEVuZCA9IGNyZWF0ZVF1YXRlcm5pb24oZW5kVmFsdWUpO1xuICAgICAgICAgIHZhciB0aW1lID0gKGZyYW1lTnVtIC0ga2V5VGltZSkgLyAobmV4dEtleVRpbWUgLSBrZXlUaW1lKTtcbiAgICAgICAgICBxdWF0ZXJuaW9uVG9FdWxlcihuZXdWYWx1ZSwgc2xlcnAocXVhdFN0YXJ0LCBxdWF0RW5kLCB0aW1lKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChrZXlEYXRhLmggIT09IDEpIHtcbiAgICAgICAgICAgIGlmIChmcmFtZU51bSA+PSBuZXh0S2V5VGltZSkge1xuICAgICAgICAgICAgICBwZXJjID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZnJhbWVOdW0gPCBrZXlUaW1lKSB7XG4gICAgICAgICAgICAgIHBlcmMgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaWYgKGtleURhdGEuby54LmNvbnN0cnVjdG9yID09PSBBcnJheSkge1xuICAgICAgICAgICAgICAgIGlmICgha2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3QpIHtcbiAgICAgICAgICAgICAgICAgIGtleWZyYW1lTWV0YWRhdGEuX19mbmN0ID0gW107XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdFtpXSkge1xuICAgICAgICAgICAgICAgICAgb3V0WCA9IGtleURhdGEuby54W2ldID09PSB1bmRlZmluZWQgPyBrZXlEYXRhLm8ueFswXSA6IGtleURhdGEuby54W2ldO1xuICAgICAgICAgICAgICAgICAgb3V0WSA9IGtleURhdGEuby55W2ldID09PSB1bmRlZmluZWQgPyBrZXlEYXRhLm8ueVswXSA6IGtleURhdGEuby55W2ldO1xuICAgICAgICAgICAgICAgICAgaW5YID0ga2V5RGF0YS5pLnhbaV0gPT09IHVuZGVmaW5lZCA/IGtleURhdGEuaS54WzBdIDoga2V5RGF0YS5pLnhbaV07XG4gICAgICAgICAgICAgICAgICBpblkgPSBrZXlEYXRhLmkueVtpXSA9PT0gdW5kZWZpbmVkID8ga2V5RGF0YS5pLnlbMF0gOiBrZXlEYXRhLmkueVtpXTtcbiAgICAgICAgICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKG91dFgsIG91dFksIGluWCwgaW5ZKS5nZXQ7XG4gICAgICAgICAgICAgICAgICBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdFtpXSA9IGZuYztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZm5jID0ga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3RbaV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCkge1xuICAgICAgICAgICAgICAgIG91dFggPSBrZXlEYXRhLm8ueDtcbiAgICAgICAgICAgICAgICBvdXRZID0ga2V5RGF0YS5vLnk7XG4gICAgICAgICAgICAgICAgaW5YID0ga2V5RGF0YS5pLng7XG4gICAgICAgICAgICAgICAgaW5ZID0ga2V5RGF0YS5pLnk7XG4gICAgICAgICAgICAgICAgZm5jID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcob3V0WCwgb3V0WSwgaW5YLCBpblkpLmdldDtcbiAgICAgICAgICAgICAgICBrZXlEYXRhLmtleWZyYW1lTWV0YWRhdGEgPSBmbmM7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZm5jID0ga2V5ZnJhbWVNZXRhZGF0YS5fX2ZuY3Q7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBwZXJjID0gZm5jKChmcmFtZU51bSAtIGtleVRpbWUpIC8gKG5leHRLZXlUaW1lIC0ga2V5VGltZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGVuZFZhbHVlID0gbmV4dEtleURhdGEucyB8fCBrZXlEYXRhLmU7XG4gICAgICAgICAga2V5VmFsdWUgPSBrZXlEYXRhLmggPT09IDEgPyBrZXlEYXRhLnNbaV0gOiBrZXlEYXRhLnNbaV0gKyAoZW5kVmFsdWVbaV0gLSBrZXlEYXRhLnNbaV0pICogcGVyYztcblxuICAgICAgICAgIGlmICh0aGlzLnByb3BUeXBlID09PSAnbXVsdGlkaW1lbnNpb25hbCcpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlW2ldID0ga2V5VmFsdWU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0ga2V5VmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2FjaGluZy5sYXN0SW5kZXggPSBpdGVyYXRpb25JbmRleDtcbiAgICByZXR1cm4gbmV3VmFsdWU7XG4gIH0gLy8gYmFzZWQgb24gQFRvamkncyBodHRwczovL2dpdGh1Yi5jb20vdG9qaS9nbC1tYXRyaXgvXG5cblxuICBmdW5jdGlvbiBzbGVycChhLCBiLCB0KSB7XG4gICAgdmFyIG91dCA9IFtdO1xuICAgIHZhciBheCA9IGFbMF07XG4gICAgdmFyIGF5ID0gYVsxXTtcbiAgICB2YXIgYXogPSBhWzJdO1xuICAgIHZhciBhdyA9IGFbM107XG4gICAgdmFyIGJ4ID0gYlswXTtcbiAgICB2YXIgYnkgPSBiWzFdO1xuICAgIHZhciBieiA9IGJbMl07XG4gICAgdmFyIGJ3ID0gYlszXTtcbiAgICB2YXIgb21lZ2E7XG4gICAgdmFyIGNvc29tO1xuICAgIHZhciBzaW5vbTtcbiAgICB2YXIgc2NhbGUwO1xuICAgIHZhciBzY2FsZTE7XG4gICAgY29zb20gPSBheCAqIGJ4ICsgYXkgKiBieSArIGF6ICogYnogKyBhdyAqIGJ3O1xuXG4gICAgaWYgKGNvc29tIDwgMC4wKSB7XG4gICAgICBjb3NvbSA9IC1jb3NvbTtcbiAgICAgIGJ4ID0gLWJ4O1xuICAgICAgYnkgPSAtYnk7XG4gICAgICBieiA9IC1iejtcbiAgICAgIGJ3ID0gLWJ3O1xuICAgIH1cblxuICAgIGlmICgxLjAgLSBjb3NvbSA+IDAuMDAwMDAxKSB7XG4gICAgICBvbWVnYSA9IE1hdGguYWNvcyhjb3NvbSk7XG4gICAgICBzaW5vbSA9IE1hdGguc2luKG9tZWdhKTtcbiAgICAgIHNjYWxlMCA9IE1hdGguc2luKCgxLjAgLSB0KSAqIG9tZWdhKSAvIHNpbm9tO1xuICAgICAgc2NhbGUxID0gTWF0aC5zaW4odCAqIG9tZWdhKSAvIHNpbm9tO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2FsZTAgPSAxLjAgLSB0O1xuICAgICAgc2NhbGUxID0gdDtcbiAgICB9XG5cbiAgICBvdXRbMF0gPSBzY2FsZTAgKiBheCArIHNjYWxlMSAqIGJ4O1xuICAgIG91dFsxXSA9IHNjYWxlMCAqIGF5ICsgc2NhbGUxICogYnk7XG4gICAgb3V0WzJdID0gc2NhbGUwICogYXogKyBzY2FsZTEgKiBiejtcbiAgICBvdXRbM10gPSBzY2FsZTAgKiBhdyArIHNjYWxlMSAqIGJ3O1xuICAgIHJldHVybiBvdXQ7XG4gIH1cblxuICBmdW5jdGlvbiBxdWF0ZXJuaW9uVG9FdWxlcihvdXQsIHF1YXQpIHtcbiAgICB2YXIgcXggPSBxdWF0WzBdO1xuICAgIHZhciBxeSA9IHF1YXRbMV07XG4gICAgdmFyIHF6ID0gcXVhdFsyXTtcbiAgICB2YXIgcXcgPSBxdWF0WzNdO1xuICAgIHZhciBoZWFkaW5nID0gTWF0aC5hdGFuMigyICogcXkgKiBxdyAtIDIgKiBxeCAqIHF6LCAxIC0gMiAqIHF5ICogcXkgLSAyICogcXogKiBxeik7XG4gICAgdmFyIGF0dGl0dWRlID0gTWF0aC5hc2luKDIgKiBxeCAqIHF5ICsgMiAqIHF6ICogcXcpO1xuICAgIHZhciBiYW5rID0gTWF0aC5hdGFuMigyICogcXggKiBxdyAtIDIgKiBxeSAqIHF6LCAxIC0gMiAqIHF4ICogcXggLSAyICogcXogKiBxeik7XG4gICAgb3V0WzBdID0gaGVhZGluZyAvIGRlZ1RvUmFkcztcbiAgICBvdXRbMV0gPSBhdHRpdHVkZSAvIGRlZ1RvUmFkcztcbiAgICBvdXRbMl0gPSBiYW5rIC8gZGVnVG9SYWRzO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUXVhdGVybmlvbih2YWx1ZXMpIHtcbiAgICB2YXIgaGVhZGluZyA9IHZhbHVlc1swXSAqIGRlZ1RvUmFkcztcbiAgICB2YXIgYXR0aXR1ZGUgPSB2YWx1ZXNbMV0gKiBkZWdUb1JhZHM7XG4gICAgdmFyIGJhbmsgPSB2YWx1ZXNbMl0gKiBkZWdUb1JhZHM7XG4gICAgdmFyIGMxID0gTWF0aC5jb3MoaGVhZGluZyAvIDIpO1xuICAgIHZhciBjMiA9IE1hdGguY29zKGF0dGl0dWRlIC8gMik7XG4gICAgdmFyIGMzID0gTWF0aC5jb3MoYmFuayAvIDIpO1xuICAgIHZhciBzMSA9IE1hdGguc2luKGhlYWRpbmcgLyAyKTtcbiAgICB2YXIgczIgPSBNYXRoLnNpbihhdHRpdHVkZSAvIDIpO1xuICAgIHZhciBzMyA9IE1hdGguc2luKGJhbmsgLyAyKTtcbiAgICB2YXIgdyA9IGMxICogYzIgKiBjMyAtIHMxICogczIgKiBzMztcbiAgICB2YXIgeCA9IHMxICogczIgKiBjMyArIGMxICogYzIgKiBzMztcbiAgICB2YXIgeSA9IHMxICogYzIgKiBjMyArIGMxICogczIgKiBzMztcbiAgICB2YXIgeiA9IGMxICogczIgKiBjMyAtIHMxICogYzIgKiBzMztcbiAgICByZXR1cm4gW3gsIHksIHosIHddO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VmFsdWVBdEN1cnJlbnRUaW1lKCkge1xuICAgIHZhciBmcmFtZU51bSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC0gdGhpcy5vZmZzZXRUaW1lO1xuICAgIHZhciBpbml0VGltZSA9IHRoaXMua2V5ZnJhbWVzWzBdLnQgLSB0aGlzLm9mZnNldFRpbWU7XG4gICAgdmFyIGVuZFRpbWUgPSB0aGlzLmtleWZyYW1lc1t0aGlzLmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC0gdGhpcy5vZmZzZXRUaW1lO1xuXG4gICAgaWYgKCEoZnJhbWVOdW0gPT09IHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lIHx8IHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lICE9PSBpbml0RnJhbWUgJiYgKHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lID49IGVuZFRpbWUgJiYgZnJhbWVOdW0gPj0gZW5kVGltZSB8fCB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA8IGluaXRUaW1lICYmIGZyYW1lTnVtIDwgaW5pdFRpbWUpKSkge1xuICAgICAgaWYgKHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lID49IGZyYW1lTnVtKSB7XG4gICAgICAgIHRoaXMuX2NhY2hpbmcuX2xhc3RLZXlmcmFtZUluZGV4ID0gLTE7XG4gICAgICAgIHRoaXMuX2NhY2hpbmcubGFzdEluZGV4ID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlbmRlclJlc3VsdCA9IHRoaXMuaW50ZXJwb2xhdGVWYWx1ZShmcmFtZU51bSwgdGhpcy5fY2FjaGluZyk7XG4gICAgICB0aGlzLnB2ID0gcmVuZGVyUmVzdWx0O1xuICAgIH1cblxuICAgIHRoaXMuX2NhY2hpbmcubGFzdEZyYW1lID0gZnJhbWVOdW07XG4gICAgcmV0dXJuIHRoaXMucHY7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRWVmFsdWUodmFsKSB7XG4gICAgdmFyIG11bHRpcGxpZWRWYWx1ZTtcblxuICAgIGlmICh0aGlzLnByb3BUeXBlID09PSAndW5pZGltZW5zaW9uYWwnKSB7XG4gICAgICBtdWx0aXBsaWVkVmFsdWUgPSB2YWwgKiB0aGlzLm11bHQ7XG5cbiAgICAgIGlmIChtYXRoQWJzKHRoaXMudiAtIG11bHRpcGxpZWRWYWx1ZSkgPiAwLjAwMDAxKSB7XG4gICAgICAgIHRoaXMudiA9IG11bHRpcGxpZWRWYWx1ZTtcbiAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMudi5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIG11bHRpcGxpZWRWYWx1ZSA9IHZhbFtpXSAqIHRoaXMubXVsdDtcblxuICAgICAgICBpZiAobWF0aEFicyh0aGlzLnZbaV0gLSBtdWx0aXBsaWVkVmFsdWUpID4gMC4wMDAwMSkge1xuICAgICAgICAgIHRoaXMudltpXSA9IG11bHRpcGxpZWRWYWx1ZTtcbiAgICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaSArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NFZmZlY3RzU2VxdWVuY2UoKSB7XG4gICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCB8fCAhdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubG9jaykge1xuICAgICAgdGhpcy5zZXRWVmFsdWUodGhpcy5wdik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5sb2NrID0gdHJ1ZTtcbiAgICB0aGlzLl9tZGYgPSB0aGlzLl9pc0ZpcnN0RnJhbWU7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgICB2YXIgZmluYWxWYWx1ZSA9IHRoaXMua2YgPyB0aGlzLnB2IDogdGhpcy5kYXRhLms7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZVtpXShmaW5hbFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldFZWYWx1ZShmaW5hbFZhbHVlKTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgICB0aGlzLmxvY2sgPSBmYWxzZTtcbiAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRWZmZWN0KGVmZmVjdEZ1bmN0aW9uKSB7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UucHVzaChlZmZlY3RGdW5jdGlvbik7XG4gICAgdGhpcy5jb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9XG5cbiAgZnVuY3Rpb24gVmFsdWVQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICB0aGlzLnByb3BUeXBlID0gJ3VuaWRpbWVuc2lvbmFsJztcbiAgICB0aGlzLm11bHQgPSBtdWx0IHx8IDE7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnYgPSBtdWx0ID8gZGF0YS5rICogbXVsdCA6IGRhdGEuaztcbiAgICB0aGlzLnB2ID0gZGF0YS5rO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgIHRoaXMuayA9IGZhbHNlO1xuICAgIHRoaXMua2YgPSBmYWxzZTtcbiAgICB0aGlzLnZlbCA9IDA7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UgPSBbXTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIHRoaXMuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIHRoaXMuYWRkRWZmZWN0ID0gYWRkRWZmZWN0O1xuICB9XG5cbiAgZnVuY3Rpb24gTXVsdGlEaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcikge1xuICAgIHRoaXMucHJvcFR5cGUgPSAnbXVsdGlkaW1lbnNpb25hbCc7XG4gICAgdGhpcy5tdWx0ID0gbXVsdCB8fCAxO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgdGhpcy5rID0gZmFsc2U7XG4gICAgdGhpcy5rZiA9IGZhbHNlO1xuICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBkYXRhLmsubGVuZ3RoO1xuICAgIHRoaXMudiA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuICAgIHRoaXMucHYgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICB0aGlzLnZlbCA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnZbaV0gPSBkYXRhLmtbaV0gKiB0aGlzLm11bHQ7XG4gICAgICB0aGlzLnB2W2ldID0gZGF0YS5rW2ldO1xuICAgIH1cblxuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UgPSBbXTtcbiAgICB0aGlzLmdldFZhbHVlID0gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtcbiAgICB0aGlzLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICB0aGlzLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEtleWZyYW1lZFZhbHVlUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wcm9wVHlwZSA9ICd1bmlkaW1lbnNpb25hbCc7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBkYXRhLms7XG4gICAgdGhpcy5rZXlmcmFtZXNNZXRhZGF0YSA9IFtdO1xuICAgIHRoaXMub2Zmc2V0VGltZSA9IGVsZW0uZGF0YS5zdDtcbiAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICB0aGlzLl9jYWNoaW5nID0ge1xuICAgICAgbGFzdEZyYW1lOiBpbml0RnJhbWUsXG4gICAgICBsYXN0SW5kZXg6IDAsXG4gICAgICB2YWx1ZTogMCxcbiAgICAgIF9sYXN0S2V5ZnJhbWVJbmRleDogLTFcbiAgICB9O1xuICAgIHRoaXMuayA9IHRydWU7XG4gICAgdGhpcy5rZiA9IHRydWU7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLm11bHQgPSBtdWx0IHx8IDE7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcbiAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgdGhpcy52ID0gaW5pdEZyYW1lO1xuICAgIHRoaXMucHYgPSBpbml0RnJhbWU7XG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gdHJ1ZTtcbiAgICB0aGlzLmdldFZhbHVlID0gcHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZTtcbiAgICB0aGlzLnNldFZWYWx1ZSA9IHNldFZWYWx1ZTtcbiAgICB0aGlzLmludGVycG9sYXRlVmFsdWUgPSBpbnRlcnBvbGF0ZVZhbHVlO1xuICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW2dldFZhbHVlQXRDdXJyZW50VGltZS5iaW5kKHRoaXMpXTtcbiAgICB0aGlzLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEtleWZyYW1lZE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eShlbGVtLCBkYXRhLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICB0aGlzLnByb3BUeXBlID0gJ211bHRpZGltZW5zaW9uYWwnO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBkYXRhLmsubGVuZ3RoO1xuICAgIHZhciBzO1xuICAgIHZhciBlO1xuICAgIHZhciB0bztcbiAgICB2YXIgdGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuIC0gMTsgaSArPSAxKSB7XG4gICAgICBpZiAoZGF0YS5rW2ldLnRvICYmIGRhdGEua1tpXS5zICYmIGRhdGEua1tpICsgMV0gJiYgZGF0YS5rW2kgKyAxXS5zKSB7XG4gICAgICAgIHMgPSBkYXRhLmtbaV0ucztcbiAgICAgICAgZSA9IGRhdGEua1tpICsgMV0ucztcbiAgICAgICAgdG8gPSBkYXRhLmtbaV0udG87XG4gICAgICAgIHRpID0gZGF0YS5rW2ldLnRpO1xuXG4gICAgICAgIGlmIChzLmxlbmd0aCA9PT0gMiAmJiAhKHNbMF0gPT09IGVbMF0gJiYgc1sxXSA9PT0gZVsxXSkgJiYgYmV6LnBvaW50T25MaW5lMkQoc1swXSwgc1sxXSwgZVswXSwgZVsxXSwgc1swXSArIHRvWzBdLCBzWzFdICsgdG9bMV0pICYmIGJlei5wb2ludE9uTGluZTJEKHNbMF0sIHNbMV0sIGVbMF0sIGVbMV0sIGVbMF0gKyB0aVswXSwgZVsxXSArIHRpWzFdKSB8fCBzLmxlbmd0aCA9PT0gMyAmJiAhKHNbMF0gPT09IGVbMF0gJiYgc1sxXSA9PT0gZVsxXSAmJiBzWzJdID09PSBlWzJdKSAmJiBiZXoucG9pbnRPbkxpbmUzRChzWzBdLCBzWzFdLCBzWzJdLCBlWzBdLCBlWzFdLCBlWzJdLCBzWzBdICsgdG9bMF0sIHNbMV0gKyB0b1sxXSwgc1syXSArIHRvWzJdKSAmJiBiZXoucG9pbnRPbkxpbmUzRChzWzBdLCBzWzFdLCBzWzJdLCBlWzBdLCBlWzFdLCBlWzJdLCBlWzBdICsgdGlbMF0sIGVbMV0gKyB0aVsxXSwgZVsyXSArIHRpWzJdKSkge1xuICAgICAgICAgIGRhdGEua1tpXS50byA9IG51bGw7XG4gICAgICAgICAgZGF0YS5rW2ldLnRpID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzWzBdID09PSBlWzBdICYmIHNbMV0gPT09IGVbMV0gJiYgdG9bMF0gPT09IDAgJiYgdG9bMV0gPT09IDAgJiYgdGlbMF0gPT09IDAgJiYgdGlbMV0gPT09IDApIHtcbiAgICAgICAgICBpZiAocy5sZW5ndGggPT09IDIgfHwgc1syXSA9PT0gZVsyXSAmJiB0b1syXSA9PT0gMCAmJiB0aVsyXSA9PT0gMCkge1xuICAgICAgICAgICAgZGF0YS5rW2ldLnRvID0gbnVsbDtcbiAgICAgICAgICAgIGRhdGEua1tpXS50aSA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UgPSBbZ2V0VmFsdWVBdEN1cnJlbnRUaW1lLmJpbmQodGhpcyldO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5rZXlmcmFtZXMgPSBkYXRhLms7XG4gICAgdGhpcy5rZXlmcmFtZXNNZXRhZGF0YSA9IFtdO1xuICAgIHRoaXMub2Zmc2V0VGltZSA9IGVsZW0uZGF0YS5zdDtcbiAgICB0aGlzLmsgPSB0cnVlO1xuICAgIHRoaXMua2YgPSB0cnVlO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdGhpcy5tdWx0ID0gbXVsdCB8fCAxO1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlO1xuICAgIHRoaXMuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIHRoaXMuaW50ZXJwb2xhdGVWYWx1ZSA9IGludGVycG9sYXRlVmFsdWU7XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdmFyIGFyckxlbiA9IGRhdGEua1swXS5zLmxlbmd0aDtcbiAgICB0aGlzLnYgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgYXJyTGVuKTtcbiAgICB0aGlzLnB2ID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGFyckxlbik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgYXJyTGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMudltpXSA9IGluaXRGcmFtZTtcbiAgICAgIHRoaXMucHZbaV0gPSBpbml0RnJhbWU7XG4gICAgfVxuXG4gICAgdGhpcy5fY2FjaGluZyA9IHtcbiAgICAgIGxhc3RGcmFtZTogaW5pdEZyYW1lLFxuICAgICAgbGFzdEluZGV4OiAwLFxuICAgICAgdmFsdWU6IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBhcnJMZW4pXG4gICAgfTtcbiAgICB0aGlzLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcbiAgfVxuXG4gIHZhciBQcm9wZXJ0eUZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gZ2V0UHJvcChlbGVtLCBkYXRhLCB0eXBlLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICAgIGlmIChkYXRhLnNpZCkge1xuICAgICAgICBkYXRhID0gZWxlbS5nbG9iYWxEYXRhLnNsb3RNYW5hZ2VyLmdldFByb3AoZGF0YSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwO1xuXG4gICAgICBpZiAoIWRhdGEuay5sZW5ndGgpIHtcbiAgICAgICAgcCA9IG5ldyBWYWx1ZVByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBkYXRhLmtbMF0gPT09ICdudW1iZXInKSB7XG4gICAgICAgIHAgPSBuZXcgTXVsdGlEaW1lbnNpb25hbFByb3BlcnR5KGVsZW0sIGRhdGEsIG11bHQsIGNvbnRhaW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICBwID0gbmV3IEtleWZyYW1lZFZhbHVlUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcCA9IG5ldyBLZXlmcmFtZWRNdWx0aWRpbWVuc2lvbmFsUHJvcGVydHkoZWxlbSwgZGF0YSwgbXVsdCwgY29udGFpbmVyKTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChwLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eShwKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgdmFyIG9iID0ge1xuICAgICAgZ2V0UHJvcDogZ2V0UHJvcFxuICAgIH07XG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKCkge31cblxuICBEeW5hbWljUHJvcGVydHlDb250YWluZXIucHJvdG90eXBlID0ge1xuICAgIGFkZER5bmFtaWNQcm9wZXJ0eTogZnVuY3Rpb24gYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApIHtcbiAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmluZGV4T2YocHJvcCkgPT09IC0xKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMucHVzaChwcm9wKTtcbiAgICAgICAgdGhpcy5jb250YWluZXIuYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICAgICAgICB0aGlzLl9pc0FuaW1hdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGl0ZXJhdGVEeW5hbWljUHJvcGVydGllczogZnVuY3Rpb24gaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXNbaV0uZ2V0VmFsdWUoKTtcblxuICAgICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcjogZnVuY3Rpb24gaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgICAgIHRoaXMuY29udGFpbmVyID0gY29udGFpbmVyO1xuICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllcyA9IFtdO1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgICB0aGlzLl9pc0FuaW1hdGVkID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwb2ludFBvb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY3JlYXRlKCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCAyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9vbEZhY3RvcnkoOCwgY3JlYXRlKTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNoYXBlUGF0aCgpIHtcbiAgICB0aGlzLmMgPSBmYWxzZTtcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX21heExlbmd0aCA9IDg7XG4gICAgdGhpcy52ID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpO1xuICAgIHRoaXMubyA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKTtcbiAgICB0aGlzLmkgPSBjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCk7XG4gIH1cblxuICBTaGFwZVBhdGgucHJvdG90eXBlLnNldFBhdGhEYXRhID0gZnVuY3Rpb24gKGNsb3NlZCwgbGVuKSB7XG4gICAgdGhpcy5jID0gY2xvc2VkO1xuICAgIHRoaXMuc2V0TGVuZ3RoKGxlbik7XG4gICAgdmFyIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHRoaXMudltpXSA9IHBvaW50UG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICB0aGlzLm9baV0gPSBwb2ludFBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgdGhpcy5pW2ldID0gcG9pbnRQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgIGkgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5zZXRMZW5ndGggPSBmdW5jdGlvbiAobGVuKSB7XG4gICAgd2hpbGUgKHRoaXMuX21heExlbmd0aCA8IGxlbikge1xuICAgICAgdGhpcy5kb3VibGVBcnJheUxlbmd0aCgpO1xuICAgIH1cblxuICAgIHRoaXMuX2xlbmd0aCA9IGxlbjtcbiAgfTtcblxuICBTaGFwZVBhdGgucHJvdG90eXBlLmRvdWJsZUFycmF5TGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudiA9IHRoaXMudi5jb25jYXQoY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl9tYXhMZW5ndGgpKTtcbiAgICB0aGlzLmkgPSB0aGlzLmkuY29uY2F0KGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKSk7XG4gICAgdGhpcy5vID0gdGhpcy5vLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO1xuICAgIHRoaXMuX21heExlbmd0aCAqPSAyO1xuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUuc2V0WFlBdCA9IGZ1bmN0aW9uICh4LCB5LCB0eXBlLCBwb3MsIHJlcGxhY2UpIHtcbiAgICB2YXIgYXJyO1xuICAgIHRoaXMuX2xlbmd0aCA9IE1hdGgubWF4KHRoaXMuX2xlbmd0aCwgcG9zICsgMSk7XG5cbiAgICBpZiAodGhpcy5fbGVuZ3RoID49IHRoaXMuX21heExlbmd0aCkge1xuICAgICAgdGhpcy5kb3VibGVBcnJheUxlbmd0aCgpO1xuICAgIH1cblxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSAndic6XG4gICAgICAgIGFyciA9IHRoaXMudjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICBhcnIgPSB0aGlzLmk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdvJzpcbiAgICAgICAgYXJyID0gdGhpcy5vO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgYXJyID0gW107XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmICghYXJyW3Bvc10gfHwgYXJyW3Bvc10gJiYgIXJlcGxhY2UpIHtcbiAgICAgIGFycltwb3NdID0gcG9pbnRQb29sLm5ld0VsZW1lbnQoKTtcbiAgICB9XG5cbiAgICBhcnJbcG9zXVswXSA9IHg7XG4gICAgYXJyW3Bvc11bMV0gPSB5O1xuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUuc2V0VHJpcGxlQXQgPSBmdW5jdGlvbiAodlgsIHZZLCBvWCwgb1ksIGlYLCBpWSwgcG9zLCByZXBsYWNlKSB7XG4gICAgdGhpcy5zZXRYWUF0KHZYLCB2WSwgJ3YnLCBwb3MsIHJlcGxhY2UpO1xuICAgIHRoaXMuc2V0WFlBdChvWCwgb1ksICdvJywgcG9zLCByZXBsYWNlKTtcbiAgICB0aGlzLnNldFhZQXQoaVgsIGlZLCAnaScsIHBvcywgcmVwbGFjZSk7XG4gIH07XG5cbiAgU2hhcGVQYXRoLnByb3RvdHlwZS5yZXZlcnNlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXdQYXRoID0gbmV3IFNoYXBlUGF0aCgpO1xuICAgIG5ld1BhdGguc2V0UGF0aERhdGEodGhpcy5jLCB0aGlzLl9sZW5ndGgpO1xuICAgIHZhciB2ZXJ0aWNlcyA9IHRoaXMudjtcbiAgICB2YXIgb3V0UG9pbnRzID0gdGhpcy5vO1xuICAgIHZhciBpblBvaW50cyA9IHRoaXMuaTtcbiAgICB2YXIgaW5pdCA9IDA7XG5cbiAgICBpZiAodGhpcy5jKSB7XG4gICAgICBuZXdQYXRoLnNldFRyaXBsZUF0KHZlcnRpY2VzWzBdWzBdLCB2ZXJ0aWNlc1swXVsxXSwgaW5Qb2ludHNbMF1bMF0sIGluUG9pbnRzWzBdWzFdLCBvdXRQb2ludHNbMF1bMF0sIG91dFBvaW50c1swXVsxXSwgMCwgZmFsc2UpO1xuICAgICAgaW5pdCA9IDE7XG4gICAgfVxuXG4gICAgdmFyIGNudCA9IHRoaXMuX2xlbmd0aCAtIDE7XG4gICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aDtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IGluaXQ7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbmV3UGF0aC5zZXRUcmlwbGVBdCh2ZXJ0aWNlc1tjbnRdWzBdLCB2ZXJ0aWNlc1tjbnRdWzFdLCBpblBvaW50c1tjbnRdWzBdLCBpblBvaW50c1tjbnRdWzFdLCBvdXRQb2ludHNbY250XVswXSwgb3V0UG9pbnRzW2NudF1bMV0sIGksIGZhbHNlKTtcbiAgICAgIGNudCAtPSAxO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdQYXRoO1xuICB9O1xuXG4gIFNoYXBlUGF0aC5wcm90b3R5cGUubGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9sZW5ndGg7XG4gIH07XG5cbiAgdmFyIHNoYXBlUG9vbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBjcmVhdGUoKSB7XG4gICAgICByZXR1cm4gbmV3IFNoYXBlUGF0aCgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbGVhc2Uoc2hhcGVQYXRoKSB7XG4gICAgICB2YXIgbGVuID0gc2hhcGVQYXRoLl9sZW5ndGg7XG4gICAgICB2YXIgaTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHBvaW50UG9vbC5yZWxlYXNlKHNoYXBlUGF0aC52W2ldKTtcbiAgICAgICAgcG9pbnRQb29sLnJlbGVhc2Uoc2hhcGVQYXRoLmlbaV0pO1xuICAgICAgICBwb2ludFBvb2wucmVsZWFzZShzaGFwZVBhdGgub1tpXSk7XG4gICAgICAgIHNoYXBlUGF0aC52W2ldID0gbnVsbDtcbiAgICAgICAgc2hhcGVQYXRoLmlbaV0gPSBudWxsO1xuICAgICAgICBzaGFwZVBhdGgub1tpXSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHNoYXBlUGF0aC5fbGVuZ3RoID0gMDtcbiAgICAgIHNoYXBlUGF0aC5jID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmUoc2hhcGUpIHtcbiAgICAgIHZhciBjbG9uZWQgPSBmYWN0b3J5Lm5ld0VsZW1lbnQoKTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlLl9sZW5ndGggPT09IHVuZGVmaW5lZCA/IHNoYXBlLnYubGVuZ3RoIDogc2hhcGUuX2xlbmd0aDtcbiAgICAgIGNsb25lZC5zZXRMZW5ndGgobGVuKTtcbiAgICAgIGNsb25lZC5jID0gc2hhcGUuYztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGNsb25lZC5zZXRUcmlwbGVBdChzaGFwZS52W2ldWzBdLCBzaGFwZS52W2ldWzFdLCBzaGFwZS5vW2ldWzBdLCBzaGFwZS5vW2ldWzFdLCBzaGFwZS5pW2ldWzBdLCBzaGFwZS5pW2ldWzFdLCBpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNsb25lZDtcbiAgICB9XG5cbiAgICB2YXIgZmFjdG9yeSA9IHBvb2xGYWN0b3J5KDQsIGNyZWF0ZSwgcmVsZWFzZSk7XG4gICAgZmFjdG9yeS5jbG9uZSA9IGNsb25lO1xuICAgIHJldHVybiBmYWN0b3J5O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gU2hhcGVDb2xsZWN0aW9uKCkge1xuICAgIHRoaXMuX2xlbmd0aCA9IDA7XG4gICAgdGhpcy5fbWF4TGVuZ3RoID0gNDtcbiAgICB0aGlzLnNoYXBlcyA9IGNyZWF0ZVNpemVkQXJyYXkodGhpcy5fbWF4TGVuZ3RoKTtcbiAgfVxuXG4gIFNoYXBlQ29sbGVjdGlvbi5wcm90b3R5cGUuYWRkU2hhcGUgPSBmdW5jdGlvbiAoc2hhcGVEYXRhKSB7XG4gICAgaWYgKHRoaXMuX2xlbmd0aCA9PT0gdGhpcy5fbWF4TGVuZ3RoKSB7XG4gICAgICB0aGlzLnNoYXBlcyA9IHRoaXMuc2hhcGVzLmNvbmNhdChjcmVhdGVTaXplZEFycmF5KHRoaXMuX21heExlbmd0aCkpO1xuICAgICAgdGhpcy5fbWF4TGVuZ3RoICo9IDI7XG4gICAgfVxuXG4gICAgdGhpcy5zaGFwZXNbdGhpcy5fbGVuZ3RoXSA9IHNoYXBlRGF0YTtcbiAgICB0aGlzLl9sZW5ndGggKz0gMTtcbiAgfTtcblxuICBTaGFwZUNvbGxlY3Rpb24ucHJvdG90eXBlLnJlbGVhc2VTaGFwZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5fbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHNoYXBlUG9vbC5yZWxlYXNlKHRoaXMuc2hhcGVzW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICB9O1xuXG4gIHZhciBzaGFwZUNvbGxlY3Rpb25Qb29sID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHtcbiAgICAgIG5ld1NoYXBlQ29sbGVjdGlvbjogbmV3U2hhcGVDb2xsZWN0aW9uLFxuICAgICAgcmVsZWFzZTogcmVsZWFzZVxuICAgIH07XG4gICAgdmFyIF9sZW5ndGggPSAwO1xuICAgIHZhciBfbWF4TGVuZ3RoID0gNDtcbiAgICB2YXIgcG9vbCA9IGNyZWF0ZVNpemVkQXJyYXkoX21heExlbmd0aCk7XG5cbiAgICBmdW5jdGlvbiBuZXdTaGFwZUNvbGxlY3Rpb24oKSB7XG4gICAgICB2YXIgc2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICBpZiAoX2xlbmd0aCkge1xuICAgICAgICBfbGVuZ3RoIC09IDE7XG4gICAgICAgIHNoYXBlQ29sbGVjdGlvbiA9IHBvb2xbX2xlbmd0aF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzaGFwZUNvbGxlY3Rpb24gPSBuZXcgU2hhcGVDb2xsZWN0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzaGFwZUNvbGxlY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVsZWFzZShzaGFwZUNvbGxlY3Rpb24pIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlQ29sbGVjdGlvbi5fbGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgc2hhcGVQb29sLnJlbGVhc2Uoc2hhcGVDb2xsZWN0aW9uLnNoYXBlc1tpXSk7XG4gICAgICB9XG5cbiAgICAgIHNoYXBlQ29sbGVjdGlvbi5fbGVuZ3RoID0gMDtcblxuICAgICAgaWYgKF9sZW5ndGggPT09IF9tYXhMZW5ndGgpIHtcbiAgICAgICAgcG9vbCA9IHBvb2xpbmdbXCJkb3VibGVcIl0ocG9vbCk7XG4gICAgICAgIF9tYXhMZW5ndGggKj0gMjtcbiAgICAgIH1cblxuICAgICAgcG9vbFtfbGVuZ3RoXSA9IHNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIF9sZW5ndGggKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgU2hhcGVQcm9wZXJ0eUZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluaXRGcmFtZSA9IC05OTk5OTk7XG5cbiAgICBmdW5jdGlvbiBpbnRlcnBvbGF0ZVNoYXBlKGZyYW1lTnVtLCBwcmV2aW91c1ZhbHVlLCBjYWNoaW5nKSB7XG4gICAgICB2YXIgaXRlcmF0aW9uSW5kZXggPSBjYWNoaW5nLmxhc3RJbmRleDtcbiAgICAgIHZhciBrZXlQcm9wUztcbiAgICAgIHZhciBrZXlQcm9wRTtcbiAgICAgIHZhciBpc0hvbGQ7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBrO1xuICAgICAgdmFyIGpMZW47XG4gICAgICB2YXIga0xlbjtcbiAgICAgIHZhciBwZXJjO1xuICAgICAgdmFyIHZlcnRleFZhbHVlO1xuICAgICAgdmFyIGtmID0gdGhpcy5rZXlmcmFtZXM7XG5cbiAgICAgIGlmIChmcmFtZU51bSA8IGtmWzBdLnQgLSB0aGlzLm9mZnNldFRpbWUpIHtcbiAgICAgICAga2V5UHJvcFMgPSBrZlswXS5zWzBdO1xuICAgICAgICBpc0hvbGQgPSB0cnVlO1xuICAgICAgICBpdGVyYXRpb25JbmRleCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKGZyYW1lTnVtID49IGtmW2tmLmxlbmd0aCAtIDFdLnQgLSB0aGlzLm9mZnNldFRpbWUpIHtcbiAgICAgICAga2V5UHJvcFMgPSBrZltrZi5sZW5ndGggLSAxXS5zID8ga2Zba2YubGVuZ3RoIC0gMV0uc1swXSA6IGtmW2tmLmxlbmd0aCAtIDJdLmVbMF07XG4gICAgICAgIC8qIGlmKGtmW2tmLmxlbmd0aCAtIDFdLnMpe1xyXG4gICAgICAgICAgICAgICAgICBrZXlQcm9wUyA9IGtmW2tmLmxlbmd0aCAtIDFdLnNbMF07XHJcbiAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgIGtleVByb3BTID0ga2Zba2YubGVuZ3RoIC0gMl0uZVswXTtcclxuICAgICAgICAgICAgICB9ICovXG5cbiAgICAgICAgaXNIb2xkID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpID0gaXRlcmF0aW9uSW5kZXg7XG4gICAgICAgIHZhciBsZW4gPSBrZi5sZW5ndGggLSAxO1xuICAgICAgICB2YXIgZmxhZyA9IHRydWU7XG4gICAgICAgIHZhciBrZXlEYXRhO1xuICAgICAgICB2YXIgbmV4dEtleURhdGE7XG4gICAgICAgIHZhciBrZXlmcmFtZU1ldGFkYXRhO1xuXG4gICAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgICAga2V5RGF0YSA9IGtmW2ldO1xuICAgICAgICAgIG5leHRLZXlEYXRhID0ga2ZbaSArIDFdO1xuXG4gICAgICAgICAgaWYgKG5leHRLZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUgPiBmcmFtZU51bSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGkgPCBsZW4gLSAxKSB7XG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlmcmFtZU1ldGFkYXRhID0gdGhpcy5rZXlmcmFtZXNNZXRhZGF0YVtpXSB8fCB7fTtcbiAgICAgICAgaXNIb2xkID0ga2V5RGF0YS5oID09PSAxO1xuICAgICAgICBpdGVyYXRpb25JbmRleCA9IGk7XG5cbiAgICAgICAgaWYgKCFpc0hvbGQpIHtcbiAgICAgICAgICBpZiAoZnJhbWVOdW0gPj0gbmV4dEtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSkge1xuICAgICAgICAgICAgcGVyYyA9IDE7XG4gICAgICAgICAgfSBlbHNlIGlmIChmcmFtZU51bSA8IGtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSkge1xuICAgICAgICAgICAgcGVyYyA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBmbmM7XG5cbiAgICAgICAgICAgIGlmIChrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdCkge1xuICAgICAgICAgICAgICBmbmMgPSBrZXlmcmFtZU1ldGFkYXRhLl9fZm5jdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGZuYyA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKGtleURhdGEuby54LCBrZXlEYXRhLm8ueSwga2V5RGF0YS5pLngsIGtleURhdGEuaS55KS5nZXQ7XG4gICAgICAgICAgICAgIGtleWZyYW1lTWV0YWRhdGEuX19mbmN0ID0gZm5jO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwZXJjID0gZm5jKChmcmFtZU51bSAtIChrZXlEYXRhLnQgLSB0aGlzLm9mZnNldFRpbWUpKSAvIChuZXh0S2V5RGF0YS50IC0gdGhpcy5vZmZzZXRUaW1lIC0gKGtleURhdGEudCAtIHRoaXMub2Zmc2V0VGltZSkpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBrZXlQcm9wRSA9IG5leHRLZXlEYXRhLnMgPyBuZXh0S2V5RGF0YS5zWzBdIDoga2V5RGF0YS5lWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAga2V5UHJvcFMgPSBrZXlEYXRhLnNbMF07XG4gICAgICB9XG5cbiAgICAgIGpMZW4gPSBwcmV2aW91c1ZhbHVlLl9sZW5ndGg7XG4gICAgICBrTGVuID0ga2V5UHJvcFMuaVswXS5sZW5ndGg7XG4gICAgICBjYWNoaW5nLmxhc3RJbmRleCA9IGl0ZXJhdGlvbkluZGV4O1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCBrTGVuOyBrICs9IDEpIHtcbiAgICAgICAgICB2ZXJ0ZXhWYWx1ZSA9IGlzSG9sZCA/IGtleVByb3BTLmlbal1ba10gOiBrZXlQcm9wUy5pW2pdW2tdICsgKGtleVByb3BFLmlbal1ba10gLSBrZXlQcm9wUy5pW2pdW2tdKSAqIHBlcmM7XG4gICAgICAgICAgcHJldmlvdXNWYWx1ZS5pW2pdW2tdID0gdmVydGV4VmFsdWU7XG4gICAgICAgICAgdmVydGV4VmFsdWUgPSBpc0hvbGQgPyBrZXlQcm9wUy5vW2pdW2tdIDoga2V5UHJvcFMub1tqXVtrXSArIChrZXlQcm9wRS5vW2pdW2tdIC0ga2V5UHJvcFMub1tqXVtrXSkgKiBwZXJjO1xuICAgICAgICAgIHByZXZpb3VzVmFsdWUub1tqXVtrXSA9IHZlcnRleFZhbHVlO1xuICAgICAgICAgIHZlcnRleFZhbHVlID0gaXNIb2xkID8ga2V5UHJvcFMudltqXVtrXSA6IGtleVByb3BTLnZbal1ba10gKyAoa2V5UHJvcEUudltqXVtrXSAtIGtleVByb3BTLnZbal1ba10pICogcGVyYztcbiAgICAgICAgICBwcmV2aW91c1ZhbHVlLnZbal1ba10gPSB2ZXJ0ZXhWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZSgpIHtcbiAgICAgIHZhciBmcmFtZU51bSA9IHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC0gdGhpcy5vZmZzZXRUaW1lO1xuICAgICAgdmFyIGluaXRUaW1lID0gdGhpcy5rZXlmcmFtZXNbMF0udCAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICAgIHZhciBlbmRUaW1lID0gdGhpcy5rZXlmcmFtZXNbdGhpcy5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIHRoaXMub2Zmc2V0VGltZTtcbiAgICAgIHZhciBsYXN0RnJhbWUgPSB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZTtcblxuICAgICAgaWYgKCEobGFzdEZyYW1lICE9PSBpbml0RnJhbWUgJiYgKGxhc3RGcmFtZSA8IGluaXRUaW1lICYmIGZyYW1lTnVtIDwgaW5pdFRpbWUgfHwgbGFzdEZyYW1lID4gZW5kVGltZSAmJiBmcmFtZU51bSA+IGVuZFRpbWUpKSkge1xuICAgICAgICAvLy8gL1xuICAgICAgICB0aGlzLl9jYWNoaW5nLmxhc3RJbmRleCA9IGxhc3RGcmFtZSA8IGZyYW1lTnVtID8gdGhpcy5fY2FjaGluZy5sYXN0SW5kZXggOiAwO1xuICAgICAgICB0aGlzLmludGVycG9sYXRlU2hhcGUoZnJhbWVOdW0sIHRoaXMucHYsIHRoaXMuX2NhY2hpbmcpOyAvLy8gL1xuICAgICAgfVxuXG4gICAgICB0aGlzLl9jYWNoaW5nLmxhc3RGcmFtZSA9IGZyYW1lTnVtO1xuICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzZXRTaGFwZSgpIHtcbiAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNoYXBlc0VxdWFsKHNoYXBlMSwgc2hhcGUyKSB7XG4gICAgICBpZiAoc2hhcGUxLl9sZW5ndGggIT09IHNoYXBlMi5fbGVuZ3RoIHx8IHNoYXBlMS5jICE9PSBzaGFwZTIuYykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlMS5fbGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNoYXBlMS52W2ldWzBdICE9PSBzaGFwZTIudltpXVswXSB8fCBzaGFwZTEudltpXVsxXSAhPT0gc2hhcGUyLnZbaV1bMV0gfHwgc2hhcGUxLm9baV1bMF0gIT09IHNoYXBlMi5vW2ldWzBdIHx8IHNoYXBlMS5vW2ldWzFdICE9PSBzaGFwZTIub1tpXVsxXSB8fCBzaGFwZTEuaVtpXVswXSAhPT0gc2hhcGUyLmlbaV1bMF0gfHwgc2hhcGUxLmlbaV1bMV0gIT09IHNoYXBlMi5pW2ldWzFdKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFZWYWx1ZShuZXdQYXRoKSB7XG4gICAgICBpZiAoIXNoYXBlc0VxdWFsKHRoaXMudiwgbmV3UGF0aCkpIHtcbiAgICAgICAgdGhpcy52ID0gc2hhcGVQb29sLmNsb25lKG5ld1BhdGgpO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbi5hZGRTaGFwZSh0aGlzLnYpO1xuICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICB0aGlzLnBhdGhzID0gdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzRWZmZWN0c1NlcXVlbmNlKCkge1xuICAgICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmxvY2spIHtcbiAgICAgICAgdGhpcy5zZXRWVmFsdWUodGhpcy5wdik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5sb2NrID0gdHJ1ZTtcbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgdmFyIGZpbmFsVmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLmtmKSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLnB2O1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEua3MpIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZGF0YS5rcy5rO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZGF0YS5wdC5rO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBmaW5hbFZhbHVlID0gdGhpcy5lZmZlY3RzU2VxdWVuY2VbaV0oZmluYWxWYWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2V0VlZhbHVlKGZpbmFsVmFsdWUpO1xuICAgICAgdGhpcy5sb2NrID0gZmFsc2U7XG4gICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSkge1xuICAgICAgdGhpcy5wcm9wVHlwZSA9ICdzaGFwZSc7XG4gICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICB0aGlzLmNvbnRhaW5lciA9IGVsZW07XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgdGhpcy5rZiA9IGZhbHNlO1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgICB2YXIgcGF0aERhdGEgPSB0eXBlID09PSAzID8gZGF0YS5wdC5rIDogZGF0YS5rcy5rO1xuICAgICAgdGhpcy52ID0gc2hhcGVQb29sLmNsb25lKHBhdGhEYXRhKTtcbiAgICAgIHRoaXMucHYgPSBzaGFwZVBvb2wuY2xvbmUodGhpcy52KTtcbiAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB0aGlzLnBhdGhzLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICB0aGlzLnJlc2V0ID0gcmVzZXRTaGFwZTtcbiAgICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW107XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRWZmZWN0KGVmZmVjdEZ1bmN0aW9uKSB7XG4gICAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKGVmZmVjdEZ1bmN0aW9uKTtcbiAgICAgIHRoaXMuY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eSh0aGlzKTtcbiAgICB9XG5cbiAgICBTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5pbnRlcnBvbGF0ZVNoYXBlID0gaW50ZXJwb2xhdGVTaGFwZTtcbiAgICBTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIFNoYXBlUHJvcGVydHkucHJvdG90eXBlLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcblxuICAgIGZ1bmN0aW9uIEtleWZyYW1lZFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSkge1xuICAgICAgdGhpcy5wcm9wVHlwZSA9ICdzaGFwZSc7XG4gICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgICAgdGhpcy5jb250YWluZXIgPSBlbGVtO1xuICAgICAgdGhpcy5vZmZzZXRUaW1lID0gZWxlbS5kYXRhLnN0O1xuICAgICAgdGhpcy5rZXlmcmFtZXMgPSB0eXBlID09PSAzID8gZGF0YS5wdC5rIDogZGF0YS5rcy5rO1xuICAgICAgdGhpcy5rZXlmcmFtZXNNZXRhZGF0YSA9IFtdO1xuICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICAgIHRoaXMua2YgPSB0cnVlO1xuICAgICAgdmFyIGxlbiA9IHRoaXMua2V5ZnJhbWVzWzBdLnNbMF0uaS5sZW5ndGg7XG4gICAgICB0aGlzLnYgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgdGhpcy52LnNldFBhdGhEYXRhKHRoaXMua2V5ZnJhbWVzWzBdLnNbMF0uYywgbGVuKTtcbiAgICAgIHRoaXMucHYgPSBzaGFwZVBvb2wuY2xvbmUodGhpcy52KTtcbiAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24gPSBzaGFwZUNvbGxlY3Rpb25Qb29sLm5ld1NoYXBlQ29sbGVjdGlvbigpO1xuICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB0aGlzLnBhdGhzLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICB0aGlzLmxhc3RGcmFtZSA9IGluaXRGcmFtZTtcbiAgICAgIHRoaXMucmVzZXQgPSByZXNldFNoYXBlO1xuICAgICAgdGhpcy5fY2FjaGluZyA9IHtcbiAgICAgICAgbGFzdEZyYW1lOiBpbml0RnJhbWUsXG4gICAgICAgIGxhc3RJbmRleDogMFxuICAgICAgfTtcbiAgICAgIHRoaXMuZWZmZWN0c1NlcXVlbmNlID0gW2ludGVycG9sYXRlU2hhcGVDdXJyZW50VGltZS5iaW5kKHRoaXMpXTtcbiAgICB9XG5cbiAgICBLZXlmcmFtZWRTaGFwZVByb3BlcnR5LnByb3RvdHlwZS5nZXRWYWx1ZSA9IHByb2Nlc3NFZmZlY3RzU2VxdWVuY2U7XG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuaW50ZXJwb2xhdGVTaGFwZSA9IGludGVycG9sYXRlU2hhcGU7XG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eS5wcm90b3R5cGUuc2V0VlZhbHVlID0gc2V0VlZhbHVlO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHkucHJvdG90eXBlLmFkZEVmZmVjdCA9IGFkZEVmZmVjdDtcblxuICAgIHZhciBFbGxTaGFwZVByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGNQb2ludCA9IHJvdW5kQ29ybmVyO1xuXG4gICAgICBmdW5jdGlvbiBFbGxTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIHRoaXMudi5zZXRQYXRoRGF0YSh0cnVlLCA0KTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMucGF0aHMgPSB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICB0aGlzLmxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMudik7XG4gICAgICAgIHRoaXMuZCA9IGRhdGEuZDtcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgICAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAsIDEsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMsIDEsIDAsIHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5rID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0RWxsVG9QYXRoKCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgICByZXNldDogcmVzZXRTaGFwZSxcbiAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRFbGxUb1BhdGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRFbGxUb1BhdGg6IGZ1bmN0aW9uIGNvbnZlcnRFbGxUb1BhdGgoKSB7XG4gICAgICAgICAgdmFyIHAwID0gdGhpcy5wLnZbMF07XG4gICAgICAgICAgdmFyIHAxID0gdGhpcy5wLnZbMV07XG4gICAgICAgICAgdmFyIHMwID0gdGhpcy5zLnZbMF0gLyAyO1xuICAgICAgICAgIHZhciBzMSA9IHRoaXMucy52WzFdIC8gMjtcblxuICAgICAgICAgIHZhciBfY3cgPSB0aGlzLmQgIT09IDM7XG5cbiAgICAgICAgICB2YXIgX3YgPSB0aGlzLnY7XG4gICAgICAgICAgX3YudlswXVswXSA9IHAwO1xuICAgICAgICAgIF92LnZbMF1bMV0gPSBwMSAtIHMxO1xuICAgICAgICAgIF92LnZbMV1bMF0gPSBfY3cgPyBwMCArIHMwIDogcDAgLSBzMDtcbiAgICAgICAgICBfdi52WzFdWzFdID0gcDE7XG4gICAgICAgICAgX3YudlsyXVswXSA9IHAwO1xuICAgICAgICAgIF92LnZbMl1bMV0gPSBwMSArIHMxO1xuICAgICAgICAgIF92LnZbM11bMF0gPSBfY3cgPyBwMCAtIHMwIDogcDAgKyBzMDtcbiAgICAgICAgICBfdi52WzNdWzFdID0gcDE7XG4gICAgICAgICAgX3YuaVswXVswXSA9IF9jdyA/IHAwIC0gczAgKiBjUG9pbnQgOiBwMCArIHMwICogY1BvaW50O1xuICAgICAgICAgIF92LmlbMF1bMV0gPSBwMSAtIHMxO1xuICAgICAgICAgIF92LmlbMV1bMF0gPSBfY3cgPyBwMCArIHMwIDogcDAgLSBzMDtcbiAgICAgICAgICBfdi5pWzFdWzFdID0gcDEgLSBzMSAqIGNQb2ludDtcbiAgICAgICAgICBfdi5pWzJdWzBdID0gX2N3ID8gcDAgKyBzMCAqIGNQb2ludCA6IHAwIC0gczAgKiBjUG9pbnQ7XG4gICAgICAgICAgX3YuaVsyXVsxXSA9IHAxICsgczE7XG4gICAgICAgICAgX3YuaVszXVswXSA9IF9jdyA/IHAwIC0gczAgOiBwMCArIHMwO1xuICAgICAgICAgIF92LmlbM11bMV0gPSBwMSArIHMxICogY1BvaW50O1xuICAgICAgICAgIF92Lm9bMF1bMF0gPSBfY3cgPyBwMCArIHMwICogY1BvaW50IDogcDAgLSBzMCAqIGNQb2ludDtcbiAgICAgICAgICBfdi5vWzBdWzFdID0gcDEgLSBzMTtcbiAgICAgICAgICBfdi5vWzFdWzBdID0gX2N3ID8gcDAgKyBzMCA6IHAwIC0gczA7XG4gICAgICAgICAgX3Yub1sxXVsxXSA9IHAxICsgczEgKiBjUG9pbnQ7XG4gICAgICAgICAgX3Yub1syXVswXSA9IF9jdyA/IHAwIC0gczAgKiBjUG9pbnQgOiBwMCArIHMwICogY1BvaW50O1xuICAgICAgICAgIF92Lm9bMl1bMV0gPSBwMSArIHMxO1xuICAgICAgICAgIF92Lm9bM11bMF0gPSBfY3cgPyBwMCAtIHMwIDogcDAgKyBzMDtcbiAgICAgICAgICBfdi5vWzNdWzFdID0gcDEgLSBzMSAqIGNQb2ludDtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgRWxsU2hhcGVQcm9wZXJ0eUZhY3RvcnkpO1xuICAgICAgcmV0dXJuIEVsbFNoYXBlUHJvcGVydHlGYWN0b3J5O1xuICAgIH0oKTtcblxuICAgIHZhciBTdGFyU2hhcGVQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIFN0YXJTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIHRoaXMudi5zZXRQYXRoRGF0YSh0cnVlLCAwKTtcbiAgICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgICAgdGhpcy5jb21wID0gZWxlbS5jb21wO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLmZyYW1lSWQgPSAtMTtcbiAgICAgICAgdGhpcy5kID0gZGF0YS5kO1xuICAgICAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG5cbiAgICAgICAgaWYgKGRhdGEuc3kgPT09IDEpIHtcbiAgICAgICAgICB0aGlzLmlyID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5pciwgMCwgMCwgdGhpcyk7XG4gICAgICAgICAgdGhpcy5pcyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaXMsIDAsIDAuMDEsIHRoaXMpO1xuICAgICAgICAgIHRoaXMuY29udmVydFRvUGF0aCA9IHRoaXMuY29udmVydFN0YXJUb1BhdGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0VG9QYXRoID0gdGhpcy5jb252ZXJ0UG9seWdvblRvUGF0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnB0LCAwLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wLCAxLCAwLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yLCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgICB0aGlzLm9yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vciwgMCwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMub3MgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm9zLCAwLCAwLjAxLCB0aGlzKTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTtcbiAgICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5rID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmsgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLmNvbnZlcnRUb1BhdGgoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkucHJvdG90eXBlID0ge1xuICAgICAgICByZXNldDogcmVzZXRTaGFwZSxcbiAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRUb1BhdGgoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGNvbnZlcnRTdGFyVG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0U3RhclRvUGF0aCgpIHtcbiAgICAgICAgICB2YXIgbnVtUHRzID0gTWF0aC5mbG9vcih0aGlzLnB0LnYpICogMjtcbiAgICAgICAgICB2YXIgYW5nbGUgPSBNYXRoLlBJICogMiAvIG51bVB0cztcbiAgICAgICAgICAvKiB0aGlzLnYudi5sZW5ndGggPSBudW1QdHM7XHJcbiAgICAgICAgICAgICAgICAgIHRoaXMudi5pLmxlbmd0aCA9IG51bVB0cztcclxuICAgICAgICAgICAgICAgICAgdGhpcy52Lm8ubGVuZ3RoID0gbnVtUHRzOyAqL1xuXG4gICAgICAgICAgdmFyIGxvbmdGbGFnID0gdHJ1ZTtcbiAgICAgICAgICB2YXIgbG9uZ1JhZCA9IHRoaXMub3IudjtcbiAgICAgICAgICB2YXIgc2hvcnRSYWQgPSB0aGlzLmlyLnY7XG4gICAgICAgICAgdmFyIGxvbmdSb3VuZCA9IHRoaXMub3MudjtcbiAgICAgICAgICB2YXIgc2hvcnRSb3VuZCA9IHRoaXMuaXMudjtcbiAgICAgICAgICB2YXIgbG9uZ1BlcmltU2VnbWVudCA9IDIgKiBNYXRoLlBJICogbG9uZ1JhZCAvIChudW1QdHMgKiAyKTtcbiAgICAgICAgICB2YXIgc2hvcnRQZXJpbVNlZ21lbnQgPSAyICogTWF0aC5QSSAqIHNob3J0UmFkIC8gKG51bVB0cyAqIDIpO1xuICAgICAgICAgIHZhciBpO1xuICAgICAgICAgIHZhciByYWQ7XG4gICAgICAgICAgdmFyIHJvdW5kbmVzcztcbiAgICAgICAgICB2YXIgcGVyaW1TZWdtZW50O1xuICAgICAgICAgIHZhciBjdXJyZW50QW5nID0gLU1hdGguUEkgLyAyO1xuICAgICAgICAgIGN1cnJlbnRBbmcgKz0gdGhpcy5yLnY7XG4gICAgICAgICAgdmFyIGRpciA9IHRoaXMuZGF0YS5kID09PSAzID8gLTEgOiAxO1xuICAgICAgICAgIHRoaXMudi5fbGVuZ3RoID0gMDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1QdHM7IGkgKz0gMSkge1xuICAgICAgICAgICAgcmFkID0gbG9uZ0ZsYWcgPyBsb25nUmFkIDogc2hvcnRSYWQ7XG4gICAgICAgICAgICByb3VuZG5lc3MgPSBsb25nRmxhZyA/IGxvbmdSb3VuZCA6IHNob3J0Um91bmQ7XG4gICAgICAgICAgICBwZXJpbVNlZ21lbnQgPSBsb25nRmxhZyA/IGxvbmdQZXJpbVNlZ21lbnQgOiBzaG9ydFBlcmltU2VnbWVudDtcbiAgICAgICAgICAgIHZhciB4ID0gcmFkICogTWF0aC5jb3MoY3VycmVudEFuZyk7XG4gICAgICAgICAgICB2YXIgeSA9IHJhZCAqIE1hdGguc2luKGN1cnJlbnRBbmcpO1xuICAgICAgICAgICAgdmFyIG94ID0geCA9PT0gMCAmJiB5ID09PSAwID8gMCA6IHkgLyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICB2YXIgb3kgPSB4ID09PSAwICYmIHkgPT09IDAgPyAwIDogLXggLyBNYXRoLnNxcnQoeCAqIHggKyB5ICogeSk7XG4gICAgICAgICAgICB4ICs9ICt0aGlzLnAudlswXTtcbiAgICAgICAgICAgIHkgKz0gK3RoaXMucC52WzFdO1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHgsIHksIHggLSBveCAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeSAtIG95ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB4ICsgb3ggKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHkgKyBveSAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgaSwgdHJ1ZSk7XG4gICAgICAgICAgICAvKiB0aGlzLnYudltpXSA9IFt4LHldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy52LmlbaV0gPSBbeCtveCpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcix5K295KnBlcmltU2VnbWVudCpyb3VuZG5lc3MqZGlyXTtcclxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMudi5vW2ldID0gW3gtb3gqcGVyaW1TZWdtZW50KnJvdW5kbmVzcypkaXIseS1veSpwZXJpbVNlZ21lbnQqcm91bmRuZXNzKmRpcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnYuX2xlbmd0aCA9IG51bVB0czsgKi9cblxuICAgICAgICAgICAgbG9uZ0ZsYWcgPSAhbG9uZ0ZsYWc7XG4gICAgICAgICAgICBjdXJyZW50QW5nICs9IGFuZ2xlICogZGlyO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgY29udmVydFBvbHlnb25Ub1BhdGg6IGZ1bmN0aW9uIGNvbnZlcnRQb2x5Z29uVG9QYXRoKCkge1xuICAgICAgICAgIHZhciBudW1QdHMgPSBNYXRoLmZsb29yKHRoaXMucHQudik7XG4gICAgICAgICAgdmFyIGFuZ2xlID0gTWF0aC5QSSAqIDIgLyBudW1QdHM7XG4gICAgICAgICAgdmFyIHJhZCA9IHRoaXMub3IudjtcbiAgICAgICAgICB2YXIgcm91bmRuZXNzID0gdGhpcy5vcy52O1xuICAgICAgICAgIHZhciBwZXJpbVNlZ21lbnQgPSAyICogTWF0aC5QSSAqIHJhZCAvIChudW1QdHMgKiA0KTtcbiAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICB2YXIgY3VycmVudEFuZyA9IC1NYXRoLlBJICogMC41O1xuICAgICAgICAgIHZhciBkaXIgPSB0aGlzLmRhdGEuZCA9PT0gMyA/IC0xIDogMTtcbiAgICAgICAgICBjdXJyZW50QW5nICs9IHRoaXMuci52O1xuICAgICAgICAgIHRoaXMudi5fbGVuZ3RoID0gMDtcblxuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBudW1QdHM7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIHggPSByYWQgKiBNYXRoLmNvcyhjdXJyZW50QW5nKTtcbiAgICAgICAgICAgIHZhciB5ID0gcmFkICogTWF0aC5zaW4oY3VycmVudEFuZyk7XG4gICAgICAgICAgICB2YXIgb3ggPSB4ID09PSAwICYmIHkgPT09IDAgPyAwIDogeSAvIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgICAgIHZhciBveSA9IHggPT09IDAgJiYgeSA9PT0gMCA/IDAgOiAteCAvIE1hdGguc3FydCh4ICogeCArIHkgKiB5KTtcbiAgICAgICAgICAgIHggKz0gK3RoaXMucC52WzBdO1xuICAgICAgICAgICAgeSArPSArdGhpcy5wLnZbMV07XG4gICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQoeCwgeSwgeCAtIG94ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCB5IC0gb3kgKiBwZXJpbVNlZ21lbnQgKiByb3VuZG5lc3MgKiBkaXIsIHggKyBveCAqIHBlcmltU2VnbWVudCAqIHJvdW5kbmVzcyAqIGRpciwgeSArIG95ICogcGVyaW1TZWdtZW50ICogcm91bmRuZXNzICogZGlyLCBpLCB0cnVlKTtcbiAgICAgICAgICAgIGN1cnJlbnRBbmcgKz0gYW5nbGUgKiBkaXI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5wYXRocy5sZW5ndGggPSAwO1xuICAgICAgICAgIHRoaXMucGF0aHNbMF0gPSB0aGlzLnY7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFN0YXJTaGFwZVByb3BlcnR5RmFjdG9yeSk7XG4gICAgICByZXR1cm4gU3RhclNoYXBlUHJvcGVydHlGYWN0b3J5O1xuICAgIH0oKTtcblxuICAgIHZhciBSZWN0U2hhcGVQcm9wZXJ0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZ1bmN0aW9uIFJlY3RTaGFwZVByb3BlcnR5RmFjdG9yeShlbGVtLCBkYXRhKSB7XG4gICAgICAgIHRoaXMudiA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICAgIHRoaXMudi5jID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKCk7XG4gICAgICAgIHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy52KTtcbiAgICAgICAgdGhpcy5wYXRocyA9IHRoaXMubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICAgIHRoaXMuY29tcCA9IGVsZW0uY29tcDtcbiAgICAgICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgICAgIHRoaXMuZCA9IGRhdGEuZDtcbiAgICAgICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgICAgICB0aGlzLnAgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAsIDEsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMsIDEsIDAsIHRoaXMpO1xuICAgICAgICB0aGlzLnIgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnIsIDAsIDAsIHRoaXMpO1xuXG4gICAgICAgIGlmICh0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5rID0gZmFsc2U7XG4gICAgICAgICAgdGhpcy5jb252ZXJ0UmVjdFRvUGF0aCgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIFJlY3RTaGFwZVByb3BlcnR5RmFjdG9yeS5wcm90b3R5cGUgPSB7XG4gICAgICAgIGNvbnZlcnRSZWN0VG9QYXRoOiBmdW5jdGlvbiBjb252ZXJ0UmVjdFRvUGF0aCgpIHtcbiAgICAgICAgICB2YXIgcDAgPSB0aGlzLnAudlswXTtcbiAgICAgICAgICB2YXIgcDEgPSB0aGlzLnAudlsxXTtcbiAgICAgICAgICB2YXIgdjAgPSB0aGlzLnMudlswXSAvIDI7XG4gICAgICAgICAgdmFyIHYxID0gdGhpcy5zLnZbMV0gLyAyO1xuICAgICAgICAgIHZhciByb3VuZCA9IGJtTWluKHYwLCB2MSwgdGhpcy5yLnYpO1xuICAgICAgICAgIHZhciBjUG9pbnQgPSByb3VuZCAqICgxIC0gcm91bmRDb3JuZXIpO1xuICAgICAgICAgIHRoaXMudi5fbGVuZ3RoID0gMDtcblxuICAgICAgICAgIGlmICh0aGlzLmQgPT09IDIgfHwgdGhpcy5kID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgKyB2MCwgcDEgLSB2MSArIHJvdW5kLCBwMCArIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwICsgdjAsIHAxIC0gdjEgKyBjUG9pbnQsIDAsIHRydWUpO1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAsIHAxICsgdjEgLSByb3VuZCwgcDAgKyB2MCwgcDEgKyB2MSAtIGNQb2ludCwgcDAgKyB2MCwgcDEgKyB2MSAtIHJvdW5kLCAxLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKHJvdW5kICE9PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwIC0gcm91bmQsIHAxICsgdjEsIHAwICsgdjAgLSByb3VuZCwgcDEgKyB2MSwgcDAgKyB2MCAtIGNQb2ludCwgcDEgKyB2MSwgMiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwICsgcm91bmQsIHAxICsgdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxICsgdjEsIHAwIC0gdjAgKyByb3VuZCwgcDEgKyB2MSwgMywgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwIC0gdjAsIHAxICsgdjEgLSByb3VuZCwgcDAgLSB2MCwgcDEgKyB2MSAtIGNQb2ludCwgNCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwIC0gdjAsIHAxIC0gdjEgKyBjUG9pbnQsIHAwIC0gdjAsIHAxIC0gdjEgKyByb3VuZCwgNSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwICsgcm91bmQsIHAxIC0gdjEsIHAwIC0gdjAgKyByb3VuZCwgcDEgLSB2MSwgcDAgLSB2MCArIGNQb2ludCwgcDEgLSB2MSwgNiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwIC0gcm91bmQsIHAxIC0gdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxIC0gdjEsIHAwICsgdjAgLSByb3VuZCwgcDEgLSB2MSwgNywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgKyB2MSwgcDAgLSB2MCArIGNQb2ludCwgcDEgKyB2MSwgcDAgLSB2MCwgcDEgKyB2MSwgMik7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSAtIHYxLCBwMCAtIHYwLCBwMSAtIHYxICsgY1BvaW50LCBwMCAtIHYwLCBwMSAtIHYxLCAzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgKyB2MCwgcDEgLSB2MSArIGNQb2ludCwgcDAgKyB2MCwgcDEgLSB2MSArIHJvdW5kLCAwLCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKHJvdW5kICE9PSAwKSB7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwIC0gcm91bmQsIHAxIC0gdjEsIHAwICsgdjAgLSByb3VuZCwgcDEgLSB2MSwgcDAgKyB2MCAtIGNQb2ludCwgcDEgLSB2MSwgMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwICsgcm91bmQsIHAxIC0gdjEsIHAwIC0gdjAgKyBjUG9pbnQsIHAxIC0gdjEsIHAwIC0gdjAgKyByb3VuZCwgcDEgLSB2MSwgMiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSAtIHYxICsgcm91bmQsIHAwIC0gdjAsIHAxIC0gdjEgKyByb3VuZCwgcDAgLSB2MCwgcDEgLSB2MSArIGNQb2ludCwgMywgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwIC0gdjAsIHAxICsgdjEgLSBjUG9pbnQsIHAwIC0gdjAsIHAxICsgdjEgLSByb3VuZCwgNCwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwICsgcm91bmQsIHAxICsgdjEsIHAwIC0gdjAgKyByb3VuZCwgcDEgKyB2MSwgcDAgLSB2MCArIGNQb2ludCwgcDEgKyB2MSwgNSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwIC0gcm91bmQsIHAxICsgdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxICsgdjEsIHAwICsgdjAgLSByb3VuZCwgcDEgKyB2MSwgNiwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCArIHYwLCBwMSArIHYxIC0gcm91bmQsIHAwICsgdjAsIHAxICsgdjEgLSByb3VuZCwgcDAgKyB2MCwgcDEgKyB2MSAtIGNQb2ludCwgNywgdHJ1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aGlzLnYuc2V0VHJpcGxlQXQocDAgLSB2MCwgcDEgLSB2MSwgcDAgLSB2MCArIGNQb2ludCwgcDEgLSB2MSwgcDAgLSB2MCwgcDEgLSB2MSwgMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgIHRoaXMudi5zZXRUcmlwbGVBdChwMCAtIHYwLCBwMSArIHYxLCBwMCAtIHYwLCBwMSArIHYxIC0gY1BvaW50LCBwMCAtIHYwLCBwMSArIHYxLCAyLCB0cnVlKTtcbiAgICAgICAgICAgICAgdGhpcy52LnNldFRyaXBsZUF0KHAwICsgdjAsIHAxICsgdjEsIHAwICsgdjAgLSBjUG9pbnQsIHAxICsgdjEsIHAwICsgdjAsIHAxICsgdjEsIDMsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZ2V0VmFsdWU6IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkID09PSB0aGlzLmZyYW1lSWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZUlkO1xuICAgICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnRSZWN0VG9QYXRoKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXNldDogcmVzZXRTaGFwZVxuICAgICAgfTtcbiAgICAgIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgUmVjdFNoYXBlUHJvcGVydHlGYWN0b3J5KTtcbiAgICAgIHJldHVybiBSZWN0U2hhcGVQcm9wZXJ0eUZhY3Rvcnk7XG4gICAgfSgpO1xuXG4gICAgZnVuY3Rpb24gZ2V0U2hhcGVQcm9wKGVsZW0sIGRhdGEsIHR5cGUpIHtcbiAgICAgIHZhciBwcm9wO1xuXG4gICAgICBpZiAodHlwZSA9PT0gMyB8fCB0eXBlID09PSA0KSB7XG4gICAgICAgIHZhciBkYXRhUHJvcCA9IHR5cGUgPT09IDMgPyBkYXRhLnB0IDogZGF0YS5rcztcbiAgICAgICAgdmFyIGtleXMgPSBkYXRhUHJvcC5rO1xuXG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCkge1xuICAgICAgICAgIHByb3AgPSBuZXcgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhLCB0eXBlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcm9wID0gbmV3IFNoYXBlUHJvcGVydHkoZWxlbSwgZGF0YSwgdHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNSkge1xuICAgICAgICBwcm9wID0gbmV3IFJlY3RTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSA2KSB7XG4gICAgICAgIHByb3AgPSBuZXcgRWxsU2hhcGVQcm9wZXJ0eShlbGVtLCBkYXRhKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNykge1xuICAgICAgICBwcm9wID0gbmV3IFN0YXJTaGFwZVByb3BlcnR5KGVsZW0sIGRhdGEpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcC5rKSB7XG4gICAgICAgIGVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRDb25zdHJ1Y3RvckZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIFNoYXBlUHJvcGVydHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBLZXlmcmFtZWRTaGFwZVByb3BlcnR5O1xuICAgIH1cblxuICAgIHZhciBvYiA9IHt9O1xuICAgIG9iLmdldFNoYXBlUHJvcCA9IGdldFNoYXBlUHJvcDtcbiAgICBvYi5nZXRDb25zdHJ1Y3RvckZ1bmN0aW9uID0gZ2V0Q29uc3RydWN0b3JGdW5jdGlvbjtcbiAgICBvYi5nZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uID0gZ2V0S2V5ZnJhbWVkQ29uc3RydWN0b3JGdW5jdGlvbjtcbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICAvKiFcclxuICAgVHJhbnNmb3JtYXRpb24gTWF0cml4IHYyLjBcclxuICAgKGMpIEVwaXN0ZW1leCAyMDE0LTIwMTVcclxuICAgd3d3LmVwaXN0ZW1leC5jb21cclxuICAgQnkgS2VuIEZ5cnN0ZW5iZXJnXHJcbiAgIENvbnRyaWJ1dGlvbnMgYnkgbGVlb25peWEuXHJcbiAgIExpY2Vuc2U6IE1JVCwgaGVhZGVyIHJlcXVpcmVkLlxyXG4gICAqL1xuXG4gIC8qKlxyXG4gICAqIDJEIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBvYmplY3QgaW5pdGlhbGl6ZWQgd2l0aCBpZGVudGl0eSBtYXRyaXguXHJcbiAgICpcclxuICAgKiBUaGUgbWF0cml4IGNhbiBzeW5jaHJvbml6ZSBhIGNhbnZhcyBjb250ZXh0IGJ5IHN1cHBseWluZyB0aGUgY29udGV4dFxyXG4gICAqIGFzIGFuIGFyZ3VtZW50LCBvciBsYXRlciBhcHBseSBjdXJyZW50IGFic29sdXRlIHRyYW5zZm9ybSB0byBhblxyXG4gICAqIGV4aXN0aW5nIGNvbnRleHQuXHJcbiAgICpcclxuICAgKiBBbGwgdmFsdWVzIGFyZSBoYW5kbGVkIGFzIGZsb2F0aW5nIHBvaW50IHZhbHVlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBbY29udGV4dF0gLSBPcHRpb25hbCBjb250ZXh0IHRvIHN5bmMgd2l0aCBNYXRyaXhcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBhIC0gc2NhbGUgeFxyXG4gICAqIEBwcm9wIHtudW1iZXJ9IGIgLSBzaGVhciB5XHJcbiAgICogQHByb3Age251bWJlcn0gYyAtIHNoZWFyIHhcclxuICAgKiBAcHJvcCB7bnVtYmVyfSBkIC0gc2NhbGUgeVxyXG4gICAqIEBwcm9wIHtudW1iZXJ9IGUgLSB0cmFuc2xhdGUgeFxyXG4gICAqIEBwcm9wIHtudW1iZXJ9IGYgLSB0cmFuc2xhdGUgeVxyXG4gICAqIEBwcm9wIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR8bnVsbH0gW2NvbnRleHQ9bnVsbF0gLSBzZXQgb3IgZ2V0IGN1cnJlbnQgY2FudmFzIGNvbnRleHRcclxuICAgKiBAY29uc3RydWN0b3JcclxuICAgKi9cblxuICB2YXIgTWF0cml4ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBfY29zID0gTWF0aC5jb3M7XG4gICAgdmFyIF9zaW4gPSBNYXRoLnNpbjtcbiAgICB2YXIgX3RhbiA9IE1hdGgudGFuO1xuICAgIHZhciBfcm5kID0gTWF0aC5yb3VuZDtcblxuICAgIGZ1bmN0aW9uIHJlc2V0KCkge1xuICAgICAgdGhpcy5wcm9wc1swXSA9IDE7XG4gICAgICB0aGlzLnByb3BzWzFdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbMl0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1szXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzRdID0gMDtcbiAgICAgIHRoaXMucHJvcHNbNV0gPSAxO1xuICAgICAgdGhpcy5wcm9wc1s2XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzddID0gMDtcbiAgICAgIHRoaXMucHJvcHNbOF0gPSAwO1xuICAgICAgdGhpcy5wcm9wc1s5XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzEwXSA9IDE7XG4gICAgICB0aGlzLnByb3BzWzExXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzEyXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzEzXSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzE0XSA9IDA7XG4gICAgICB0aGlzLnByb3BzWzE1XSA9IDE7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByb3RhdGUoYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgLW1TaW4sIDAsIDAsIG1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVgoYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgMCwgMCwgMCwgMCwgbUNvcywgLW1TaW4sIDAsIDAsIG1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVkoYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgMCwgbVNpbiwgMCwgMCwgMSwgMCwgMCwgLW1TaW4sIDAsIG1Db3MsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdGF0ZVooYW5nbGUpIHtcbiAgICAgIGlmIChhbmdsZSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgdmFyIG1Db3MgPSBfY29zKGFuZ2xlKTtcblxuICAgICAgdmFyIG1TaW4gPSBfc2luKGFuZ2xlKTtcblxuICAgICAgcmV0dXJuIHRoaXMuX3QobUNvcywgLW1TaW4sIDAsIDAsIG1TaW4sIG1Db3MsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNoZWFyKHN4LCBzeSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3QoMSwgc3ksIHN4LCAxLCAwLCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBza2V3KGF4LCBheSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2hlYXIoX3RhbihheCksIF90YW4oYXkpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBza2V3RnJvbUF4aXMoYXgsIGFuZ2xlKSB7XG4gICAgICB2YXIgbUNvcyA9IF9jb3MoYW5nbGUpO1xuXG4gICAgICB2YXIgbVNpbiA9IF9zaW4oYW5nbGUpO1xuXG4gICAgICByZXR1cm4gdGhpcy5fdChtQ29zLCBtU2luLCAwLCAwLCAtbVNpbiwgbUNvcywgMCwgMCwgMCwgMCwgMSwgMCwgMCwgMCwgMCwgMSkuX3QoMSwgMCwgMCwgMCwgX3RhbihheCksIDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEpLl90KG1Db3MsIC1tU2luLCAwLCAwLCBtU2luLCBtQ29zLCAwLCAwLCAwLCAwLCAxLCAwLCAwLCAwLCAwLCAxKTsgLy8gcmV0dXJuIHRoaXMuX3QobUNvcywgbVNpbiwgLW1TaW4sIG1Db3MsIDAsIDApLl90KDEsIDAsIF90YW4oYXgpLCAxLCAwLCAwKS5fdChtQ29zLCAtbVNpbiwgbVNpbiwgbUNvcywgMCwgMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2NhbGUoc3gsIHN5LCBzeikge1xuICAgICAgaWYgKCFzeiAmJiBzeiAhPT0gMCkge1xuICAgICAgICBzeiA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChzeCA9PT0gMSAmJiBzeSA9PT0gMSAmJiBzeiA9PT0gMSkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX3Qoc3gsIDAsIDAsIDAsIDAsIHN5LCAwLCAwLCAwLCAwLCBzeiwgMCwgMCwgMCwgMCwgMSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VHJhbnNmb3JtKGEsIGIsIGMsIGQsIGUsIGYsIGcsIGgsIGksIGosIGssIGwsIG0sIG4sIG8sIHApIHtcbiAgICAgIHRoaXMucHJvcHNbMF0gPSBhO1xuICAgICAgdGhpcy5wcm9wc1sxXSA9IGI7XG4gICAgICB0aGlzLnByb3BzWzJdID0gYztcbiAgICAgIHRoaXMucHJvcHNbM10gPSBkO1xuICAgICAgdGhpcy5wcm9wc1s0XSA9IGU7XG4gICAgICB0aGlzLnByb3BzWzVdID0gZjtcbiAgICAgIHRoaXMucHJvcHNbNl0gPSBnO1xuICAgICAgdGhpcy5wcm9wc1s3XSA9IGg7XG4gICAgICB0aGlzLnByb3BzWzhdID0gaTtcbiAgICAgIHRoaXMucHJvcHNbOV0gPSBqO1xuICAgICAgdGhpcy5wcm9wc1sxMF0gPSBrO1xuICAgICAgdGhpcy5wcm9wc1sxMV0gPSBsO1xuICAgICAgdGhpcy5wcm9wc1sxMl0gPSBtO1xuICAgICAgdGhpcy5wcm9wc1sxM10gPSBuO1xuICAgICAgdGhpcy5wcm9wc1sxNF0gPSBvO1xuICAgICAgdGhpcy5wcm9wc1sxNV0gPSBwO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNsYXRlKHR4LCB0eSwgdHopIHtcbiAgICAgIHR6ID0gdHogfHwgMDtcblxuICAgICAgaWYgKHR4ICE9PSAwIHx8IHR5ICE9PSAwIHx8IHR6ICE9PSAwKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90KDEsIDAsIDAsIDAsIDAsIDEsIDAsIDAsIDAsIDAsIDEsIDAsIHR4LCB0eSwgdHosIDEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm0oYTIsIGIyLCBjMiwgZDIsIGUyLCBmMiwgZzIsIGgyLCBpMiwgajIsIGsyLCBsMiwgbTIsIG4yLCBvMiwgcDIpIHtcbiAgICAgIHZhciBfcCA9IHRoaXMucHJvcHM7XG5cbiAgICAgIGlmIChhMiA9PT0gMSAmJiBiMiA9PT0gMCAmJiBjMiA9PT0gMCAmJiBkMiA9PT0gMCAmJiBlMiA9PT0gMCAmJiBmMiA9PT0gMSAmJiBnMiA9PT0gMCAmJiBoMiA9PT0gMCAmJiBpMiA9PT0gMCAmJiBqMiA9PT0gMCAmJiBrMiA9PT0gMSAmJiBsMiA9PT0gMCkge1xuICAgICAgICAvLyBOT1RFOiBjb21tZW50aW5nIHRoaXMgY29uZGl0aW9uIGJlY2F1c2UgVHVyYm9GYW4gZGVvcHRpbWl6ZXMgY29kZSB3aGVuIHByZXNlbnRcbiAgICAgICAgLy8gaWYobTIgIT09IDAgfHwgbjIgIT09IDAgfHwgbzIgIT09IDApe1xuICAgICAgICBfcFsxMl0gPSBfcFsxMl0gKiBhMiArIF9wWzE1XSAqIG0yO1xuICAgICAgICBfcFsxM10gPSBfcFsxM10gKiBmMiArIF9wWzE1XSAqIG4yO1xuICAgICAgICBfcFsxNF0gPSBfcFsxNF0gKiBrMiArIF9wWzE1XSAqIG8yO1xuICAgICAgICBfcFsxNV0gKj0gcDI7IC8vIH1cblxuICAgICAgICB0aGlzLl9pZGVudGl0eUNhbGN1bGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIHZhciBhMSA9IF9wWzBdO1xuICAgICAgdmFyIGIxID0gX3BbMV07XG4gICAgICB2YXIgYzEgPSBfcFsyXTtcbiAgICAgIHZhciBkMSA9IF9wWzNdO1xuICAgICAgdmFyIGUxID0gX3BbNF07XG4gICAgICB2YXIgZjEgPSBfcFs1XTtcbiAgICAgIHZhciBnMSA9IF9wWzZdO1xuICAgICAgdmFyIGgxID0gX3BbN107XG4gICAgICB2YXIgaTEgPSBfcFs4XTtcbiAgICAgIHZhciBqMSA9IF9wWzldO1xuICAgICAgdmFyIGsxID0gX3BbMTBdO1xuICAgICAgdmFyIGwxID0gX3BbMTFdO1xuICAgICAgdmFyIG0xID0gX3BbMTJdO1xuICAgICAgdmFyIG4xID0gX3BbMTNdO1xuICAgICAgdmFyIG8xID0gX3BbMTRdO1xuICAgICAgdmFyIHAxID0gX3BbMTVdO1xuICAgICAgLyogbWF0cml4IG9yZGVyIChjYW52YXMgY29tcGF0aWJsZSk6XHJcbiAgICAgICAgICAgKiBhY2VcclxuICAgICAgICAgICAqIGJkZlxyXG4gICAgICAgICAgICogMDAxXHJcbiAgICAgICAgICAgKi9cblxuICAgICAgX3BbMF0gPSBhMSAqIGEyICsgYjEgKiBlMiArIGMxICogaTIgKyBkMSAqIG0yO1xuICAgICAgX3BbMV0gPSBhMSAqIGIyICsgYjEgKiBmMiArIGMxICogajIgKyBkMSAqIG4yO1xuICAgICAgX3BbMl0gPSBhMSAqIGMyICsgYjEgKiBnMiArIGMxICogazIgKyBkMSAqIG8yO1xuICAgICAgX3BbM10gPSBhMSAqIGQyICsgYjEgKiBoMiArIGMxICogbDIgKyBkMSAqIHAyO1xuICAgICAgX3BbNF0gPSBlMSAqIGEyICsgZjEgKiBlMiArIGcxICogaTIgKyBoMSAqIG0yO1xuICAgICAgX3BbNV0gPSBlMSAqIGIyICsgZjEgKiBmMiArIGcxICogajIgKyBoMSAqIG4yO1xuICAgICAgX3BbNl0gPSBlMSAqIGMyICsgZjEgKiBnMiArIGcxICogazIgKyBoMSAqIG8yO1xuICAgICAgX3BbN10gPSBlMSAqIGQyICsgZjEgKiBoMiArIGcxICogbDIgKyBoMSAqIHAyO1xuICAgICAgX3BbOF0gPSBpMSAqIGEyICsgajEgKiBlMiArIGsxICogaTIgKyBsMSAqIG0yO1xuICAgICAgX3BbOV0gPSBpMSAqIGIyICsgajEgKiBmMiArIGsxICogajIgKyBsMSAqIG4yO1xuICAgICAgX3BbMTBdID0gaTEgKiBjMiArIGoxICogZzIgKyBrMSAqIGsyICsgbDEgKiBvMjtcbiAgICAgIF9wWzExXSA9IGkxICogZDIgKyBqMSAqIGgyICsgazEgKiBsMiArIGwxICogcDI7XG4gICAgICBfcFsxMl0gPSBtMSAqIGEyICsgbjEgKiBlMiArIG8xICogaTIgKyBwMSAqIG0yO1xuICAgICAgX3BbMTNdID0gbTEgKiBiMiArIG4xICogZjIgKyBvMSAqIGoyICsgcDEgKiBuMjtcbiAgICAgIF9wWzE0XSA9IG0xICogYzIgKyBuMSAqIGcyICsgbzEgKiBrMiArIHAxICogbzI7XG4gICAgICBfcFsxNV0gPSBtMSAqIGQyICsgbjEgKiBoMiArIG8xICogbDIgKyBwMSAqIHAyO1xuICAgICAgdGhpcy5faWRlbnRpdHlDYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtdWx0aXBseShtYXRyaXgpIHtcbiAgICAgIHZhciBtYXRyaXhQcm9wcyA9IG1hdHJpeC5wcm9wcztcbiAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShtYXRyaXhQcm9wc1swXSwgbWF0cml4UHJvcHNbMV0sIG1hdHJpeFByb3BzWzJdLCBtYXRyaXhQcm9wc1szXSwgbWF0cml4UHJvcHNbNF0sIG1hdHJpeFByb3BzWzVdLCBtYXRyaXhQcm9wc1s2XSwgbWF0cml4UHJvcHNbN10sIG1hdHJpeFByb3BzWzhdLCBtYXRyaXhQcm9wc1s5XSwgbWF0cml4UHJvcHNbMTBdLCBtYXRyaXhQcm9wc1sxMV0sIG1hdHJpeFByb3BzWzEyXSwgbWF0cml4UHJvcHNbMTNdLCBtYXRyaXhQcm9wc1sxNF0sIG1hdHJpeFByb3BzWzE1XSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNJZGVudGl0eSgpIHtcbiAgICAgIGlmICghdGhpcy5faWRlbnRpdHlDYWxjdWxhdGVkKSB7XG4gICAgICAgIHRoaXMuX2lkZW50aXR5ID0gISh0aGlzLnByb3BzWzBdICE9PSAxIHx8IHRoaXMucHJvcHNbMV0gIT09IDAgfHwgdGhpcy5wcm9wc1syXSAhPT0gMCB8fCB0aGlzLnByb3BzWzNdICE9PSAwIHx8IHRoaXMucHJvcHNbNF0gIT09IDAgfHwgdGhpcy5wcm9wc1s1XSAhPT0gMSB8fCB0aGlzLnByb3BzWzZdICE9PSAwIHx8IHRoaXMucHJvcHNbN10gIT09IDAgfHwgdGhpcy5wcm9wc1s4XSAhPT0gMCB8fCB0aGlzLnByb3BzWzldICE9PSAwIHx8IHRoaXMucHJvcHNbMTBdICE9PSAxIHx8IHRoaXMucHJvcHNbMTFdICE9PSAwIHx8IHRoaXMucHJvcHNbMTJdICE9PSAwIHx8IHRoaXMucHJvcHNbMTNdICE9PSAwIHx8IHRoaXMucHJvcHNbMTRdICE9PSAwIHx8IHRoaXMucHJvcHNbMTVdICE9PSAxKTtcbiAgICAgICAgdGhpcy5faWRlbnRpdHlDYWxjdWxhdGVkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuX2lkZW50aXR5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVxdWFscyhtYXRyKSB7XG4gICAgICB2YXIgaSA9IDA7XG5cbiAgICAgIHdoaWxlIChpIDwgMTYpIHtcbiAgICAgICAgaWYgKG1hdHIucHJvcHNbaV0gIT09IHRoaXMucHJvcHNbaV0pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb25lKG1hdHIpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgICBtYXRyLnByb3BzW2ldID0gdGhpcy5wcm9wc1tpXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdHI7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmVGcm9tUHJvcHMocHJvcHMpIHtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgMTY7IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnByb3BzW2ldID0gcHJvcHNbaV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1BvaW50KHgsIHksIHopIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHg6IHggKiB0aGlzLnByb3BzWzBdICsgeSAqIHRoaXMucHJvcHNbNF0gKyB6ICogdGhpcy5wcm9wc1s4XSArIHRoaXMucHJvcHNbMTJdLFxuICAgICAgICB5OiB4ICogdGhpcy5wcm9wc1sxXSArIHkgKiB0aGlzLnByb3BzWzVdICsgeiAqIHRoaXMucHJvcHNbOV0gKyB0aGlzLnByb3BzWzEzXSxcbiAgICAgICAgejogeCAqIHRoaXMucHJvcHNbMl0gKyB5ICogdGhpcy5wcm9wc1s2XSArIHogKiB0aGlzLnByb3BzWzEwXSArIHRoaXMucHJvcHNbMTRdXG4gICAgICB9O1xuICAgICAgLyogcmV0dXJuIHtcclxuICAgICAgICAgICB4OiB4ICogbWUuYSArIHkgKiBtZS5jICsgbWUuZSxcclxuICAgICAgICAgICB5OiB4ICogbWUuYiArIHkgKiBtZS5kICsgbWUuZlxyXG4gICAgICAgICAgIH07ICovXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXBwbHlUb1goeCwgeSwgeikge1xuICAgICAgcmV0dXJuIHggKiB0aGlzLnByb3BzWzBdICsgeSAqIHRoaXMucHJvcHNbNF0gKyB6ICogdGhpcy5wcm9wc1s4XSArIHRoaXMucHJvcHNbMTJdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9ZKHgsIHksIHopIHtcbiAgICAgIHJldHVybiB4ICogdGhpcy5wcm9wc1sxXSArIHkgKiB0aGlzLnByb3BzWzVdICsgeiAqIHRoaXMucHJvcHNbOV0gKyB0aGlzLnByb3BzWzEzXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvWih4LCB5LCB6KSB7XG4gICAgICByZXR1cm4geCAqIHRoaXMucHJvcHNbMl0gKyB5ICogdGhpcy5wcm9wc1s2XSArIHogKiB0aGlzLnByb3BzWzEwXSArIHRoaXMucHJvcHNbMTRdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEludmVyc2VNYXRyaXgoKSB7XG4gICAgICB2YXIgZGV0ZXJtaW5hbnQgPSB0aGlzLnByb3BzWzBdICogdGhpcy5wcm9wc1s1XSAtIHRoaXMucHJvcHNbMV0gKiB0aGlzLnByb3BzWzRdO1xuICAgICAgdmFyIGEgPSB0aGlzLnByb3BzWzVdIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgYiA9IC10aGlzLnByb3BzWzFdIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgYyA9IC10aGlzLnByb3BzWzRdIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgZCA9IHRoaXMucHJvcHNbMF0gLyBkZXRlcm1pbmFudDtcbiAgICAgIHZhciBlID0gKHRoaXMucHJvcHNbNF0gKiB0aGlzLnByb3BzWzEzXSAtIHRoaXMucHJvcHNbNV0gKiB0aGlzLnByb3BzWzEyXSkgLyBkZXRlcm1pbmFudDtcbiAgICAgIHZhciBmID0gLSh0aGlzLnByb3BzWzBdICogdGhpcy5wcm9wc1sxM10gLSB0aGlzLnByb3BzWzFdICogdGhpcy5wcm9wc1sxMl0pIC8gZGV0ZXJtaW5hbnQ7XG4gICAgICB2YXIgaW52ZXJzZU1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbMF0gPSBhO1xuICAgICAgaW52ZXJzZU1hdHJpeC5wcm9wc1sxXSA9IGI7XG4gICAgICBpbnZlcnNlTWF0cml4LnByb3BzWzRdID0gYztcbiAgICAgIGludmVyc2VNYXRyaXgucHJvcHNbNV0gPSBkO1xuICAgICAgaW52ZXJzZU1hdHJpeC5wcm9wc1sxMl0gPSBlO1xuICAgICAgaW52ZXJzZU1hdHJpeC5wcm9wc1sxM10gPSBmO1xuICAgICAgcmV0dXJuIGludmVyc2VNYXRyaXg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52ZXJzZVBvaW50KHB0KSB7XG4gICAgICB2YXIgaW52ZXJzZU1hdHJpeCA9IHRoaXMuZ2V0SW52ZXJzZU1hdHJpeCgpO1xuICAgICAgcmV0dXJuIGludmVyc2VNYXRyaXguYXBwbHlUb1BvaW50QXJyYXkocHRbMF0sIHB0WzFdLCBwdFsyXSB8fCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZlcnNlUG9pbnRzKHB0cykge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gcHRzLmxlbmd0aDtcbiAgICAgIHZhciByZXRQdHMgPSBbXTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHJldFB0c1tpXSA9IGludmVyc2VQb2ludChwdHNbaV0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmV0UHRzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5VG9UcmlwbGVQb2ludHMocHQxLCBwdDIsIHB0Mykge1xuICAgICAgdmFyIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCA2KTtcblxuICAgICAgaWYgKHRoaXMuaXNJZGVudGl0eSgpKSB7XG4gICAgICAgIGFyclswXSA9IHB0MVswXTtcbiAgICAgICAgYXJyWzFdID0gcHQxWzFdO1xuICAgICAgICBhcnJbMl0gPSBwdDJbMF07XG4gICAgICAgIGFyclszXSA9IHB0MlsxXTtcbiAgICAgICAgYXJyWzRdID0gcHQzWzBdO1xuICAgICAgICBhcnJbNV0gPSBwdDNbMV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcDAgPSB0aGlzLnByb3BzWzBdO1xuICAgICAgICB2YXIgcDEgPSB0aGlzLnByb3BzWzFdO1xuICAgICAgICB2YXIgcDQgPSB0aGlzLnByb3BzWzRdO1xuICAgICAgICB2YXIgcDUgPSB0aGlzLnByb3BzWzVdO1xuICAgICAgICB2YXIgcDEyID0gdGhpcy5wcm9wc1sxMl07XG4gICAgICAgIHZhciBwMTMgPSB0aGlzLnByb3BzWzEzXTtcbiAgICAgICAgYXJyWzBdID0gcHQxWzBdICogcDAgKyBwdDFbMV0gKiBwNCArIHAxMjtcbiAgICAgICAgYXJyWzFdID0gcHQxWzBdICogcDEgKyBwdDFbMV0gKiBwNSArIHAxMztcbiAgICAgICAgYXJyWzJdID0gcHQyWzBdICogcDAgKyBwdDJbMV0gKiBwNCArIHAxMjtcbiAgICAgICAgYXJyWzNdID0gcHQyWzBdICogcDEgKyBwdDJbMV0gKiBwNSArIHAxMztcbiAgICAgICAgYXJyWzRdID0gcHQzWzBdICogcDAgKyBwdDNbMV0gKiBwNCArIHAxMjtcbiAgICAgICAgYXJyWzVdID0gcHQzWzBdICogcDEgKyBwdDNbMV0gKiBwNSArIHAxMztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvUG9pbnRBcnJheSh4LCB5LCB6KSB7XG4gICAgICB2YXIgYXJyO1xuXG4gICAgICBpZiAodGhpcy5pc0lkZW50aXR5KCkpIHtcbiAgICAgICAgYXJyID0gW3gsIHksIHpdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXJyID0gW3ggKiB0aGlzLnByb3BzWzBdICsgeSAqIHRoaXMucHJvcHNbNF0gKyB6ICogdGhpcy5wcm9wc1s4XSArIHRoaXMucHJvcHNbMTJdLCB4ICogdGhpcy5wcm9wc1sxXSArIHkgKiB0aGlzLnByb3BzWzVdICsgeiAqIHRoaXMucHJvcHNbOV0gKyB0aGlzLnByb3BzWzEzXSwgeCAqIHRoaXMucHJvcHNbMl0gKyB5ICogdGhpcy5wcm9wc1s2XSArIHogKiB0aGlzLnByb3BzWzEwXSArIHRoaXMucHJvcHNbMTRdXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvUG9pbnRTdHJpbmdpZmllZCh4LCB5KSB7XG4gICAgICBpZiAodGhpcy5pc0lkZW50aXR5KCkpIHtcbiAgICAgICAgcmV0dXJuIHggKyAnLCcgKyB5O1xuICAgICAgfVxuXG4gICAgICB2YXIgX3AgPSB0aGlzLnByb3BzO1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoKHggKiBfcFswXSArIHkgKiBfcFs0XSArIF9wWzEyXSkgKiAxMDApIC8gMTAwICsgJywnICsgTWF0aC5yb3VuZCgoeCAqIF9wWzFdICsgeSAqIF9wWzVdICsgX3BbMTNdKSAqIDEwMCkgLyAxMDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9DU1MoKSB7XG4gICAgICAvLyBEb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSB0byBhZGQgdGhpcyBvcHRpbWl6YXRpb24uIElmIGl0IGlzIGFuIGlkZW50aXR5IG1hdHJpeCwgaXQncyB2ZXJ5IGxpa2VseSB0aGlzIHdpbGwgZ2V0IGNhbGxlZCBvbmx5IG9uY2Ugc2luY2UgaXQgd29uJ3QgYmUga2V5ZnJhbWVkLlxuXG4gICAgICAvKiBpZih0aGlzLmlzSWRlbnRpdHkoKSkge1xyXG4gICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgIH0gKi9cbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBwcm9wcyA9IHRoaXMucHJvcHM7XG4gICAgICB2YXIgY3NzVmFsdWUgPSAnbWF0cml4M2QoJztcbiAgICAgIHZhciB2ID0gMTAwMDA7XG5cbiAgICAgIHdoaWxlIChpIDwgMTYpIHtcbiAgICAgICAgY3NzVmFsdWUgKz0gX3JuZChwcm9wc1tpXSAqIHYpIC8gdjtcbiAgICAgICAgY3NzVmFsdWUgKz0gaSA9PT0gMTUgPyAnKScgOiAnLCc7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNzc1ZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdW5kTWF0cml4UHJvcGVydHkodmFsKSB7XG4gICAgICB2YXIgdiA9IDEwMDAwO1xuXG4gICAgICBpZiAodmFsIDwgMC4wMDAwMDEgJiYgdmFsID4gMCB8fCB2YWwgPiAtMC4wMDAwMDEgJiYgdmFsIDwgMCkge1xuICAgICAgICByZXR1cm4gX3JuZCh2YWwgKiB2KSAvIHY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8yZENTUygpIHtcbiAgICAgIC8vIERvZXNuJ3QgbWFrZSBtdWNoIHNlbnNlIHRvIGFkZCB0aGlzIG9wdGltaXphdGlvbi4gSWYgaXQgaXMgYW4gaWRlbnRpdHkgbWF0cml4LCBpdCdzIHZlcnkgbGlrZWx5IHRoaXMgd2lsbCBnZXQgY2FsbGVkIG9ubHkgb25jZSBzaW5jZSBpdCB3b24ndCBiZSBrZXlmcmFtZWQuXG5cbiAgICAgIC8qIGlmKHRoaXMuaXNJZGVudGl0eSgpKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgfSAqL1xuICAgICAgdmFyIHByb3BzID0gdGhpcy5wcm9wcztcblxuICAgICAgdmFyIF9hID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1swXSk7XG5cbiAgICAgIHZhciBfYiA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbMV0pO1xuXG4gICAgICB2YXIgX2MgPSByb3VuZE1hdHJpeFByb3BlcnR5KHByb3BzWzRdKTtcblxuICAgICAgdmFyIF9kID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1s1XSk7XG5cbiAgICAgIHZhciBfZSA9IHJvdW5kTWF0cml4UHJvcGVydHkocHJvcHNbMTJdKTtcblxuICAgICAgdmFyIF9mID0gcm91bmRNYXRyaXhQcm9wZXJ0eShwcm9wc1sxM10pO1xuXG4gICAgICByZXR1cm4gJ21hdHJpeCgnICsgX2EgKyAnLCcgKyBfYiArICcsJyArIF9jICsgJywnICsgX2QgKyAnLCcgKyBfZSArICcsJyArIF9mICsgJyknO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLnJlc2V0ID0gcmVzZXQ7XG4gICAgICB0aGlzLnJvdGF0ZSA9IHJvdGF0ZTtcbiAgICAgIHRoaXMucm90YXRlWCA9IHJvdGF0ZVg7XG4gICAgICB0aGlzLnJvdGF0ZVkgPSByb3RhdGVZO1xuICAgICAgdGhpcy5yb3RhdGVaID0gcm90YXRlWjtcbiAgICAgIHRoaXMuc2tldyA9IHNrZXc7XG4gICAgICB0aGlzLnNrZXdGcm9tQXhpcyA9IHNrZXdGcm9tQXhpcztcbiAgICAgIHRoaXMuc2hlYXIgPSBzaGVhcjtcbiAgICAgIHRoaXMuc2NhbGUgPSBzY2FsZTtcbiAgICAgIHRoaXMuc2V0VHJhbnNmb3JtID0gc2V0VHJhbnNmb3JtO1xuICAgICAgdGhpcy50cmFuc2xhdGUgPSB0cmFuc2xhdGU7XG4gICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICAgIHRoaXMubXVsdGlwbHkgPSBtdWx0aXBseTtcbiAgICAgIHRoaXMuYXBwbHlUb1BvaW50ID0gYXBwbHlUb1BvaW50O1xuICAgICAgdGhpcy5hcHBseVRvWCA9IGFwcGx5VG9YO1xuICAgICAgdGhpcy5hcHBseVRvWSA9IGFwcGx5VG9ZO1xuICAgICAgdGhpcy5hcHBseVRvWiA9IGFwcGx5VG9aO1xuICAgICAgdGhpcy5hcHBseVRvUG9pbnRBcnJheSA9IGFwcGx5VG9Qb2ludEFycmF5O1xuICAgICAgdGhpcy5hcHBseVRvVHJpcGxlUG9pbnRzID0gYXBwbHlUb1RyaXBsZVBvaW50cztcbiAgICAgIHRoaXMuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQgPSBhcHBseVRvUG9pbnRTdHJpbmdpZmllZDtcbiAgICAgIHRoaXMudG9DU1MgPSB0b0NTUztcbiAgICAgIHRoaXMudG8yZENTUyA9IHRvMmRDU1M7XG4gICAgICB0aGlzLmNsb25lID0gY2xvbmU7XG4gICAgICB0aGlzLmNsb25lRnJvbVByb3BzID0gY2xvbmVGcm9tUHJvcHM7XG4gICAgICB0aGlzLmVxdWFscyA9IGVxdWFscztcbiAgICAgIHRoaXMuaW52ZXJzZVBvaW50cyA9IGludmVyc2VQb2ludHM7XG4gICAgICB0aGlzLmludmVyc2VQb2ludCA9IGludmVyc2VQb2ludDtcbiAgICAgIHRoaXMuZ2V0SW52ZXJzZU1hdHJpeCA9IGdldEludmVyc2VNYXRyaXg7XG4gICAgICB0aGlzLl90ID0gdGhpcy50cmFuc2Zvcm07XG4gICAgICB0aGlzLmlzSWRlbnRpdHkgPSBpc0lkZW50aXR5O1xuICAgICAgdGhpcy5faWRlbnRpdHkgPSB0cnVlO1xuICAgICAgdGhpcy5faWRlbnRpdHlDYWxjdWxhdGVkID0gZmFsc2U7XG4gICAgICB0aGlzLnByb3BzID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIDE2KTtcbiAgICAgIHRoaXMucmVzZXQoKTtcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQzKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDMgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQzID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkMyhvYmopOyB9XG4gIHZhciBsb3R0aWUgPSB7fTtcbiAgdmFyIHN0YW5kYWxvbmUgPSAnX19bU1RBTkRBTE9ORV1fXyc7XG4gIHZhciBhbmltYXRpb25EYXRhID0gJ19fW0FOSU1BVElPTkRBVEFdX18nO1xuICB2YXIgcmVuZGVyZXIgPSAnJztcblxuICBmdW5jdGlvbiBzZXRMb2NhdGlvbihocmVmKSB7XG4gICAgc2V0TG9jYXRpb25IcmVmKGhyZWYpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2VhcmNoQW5pbWF0aW9ucygpIHtcbiAgICBpZiAoc3RhbmRhbG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgYW5pbWF0aW9uTWFuYWdlci5zZWFyY2hBbmltYXRpb25zKGFuaW1hdGlvbkRhdGEsIHN0YW5kYWxvbmUsIHJlbmRlcmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYW5pbWF0aW9uTWFuYWdlci5zZWFyY2hBbmltYXRpb25zKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0U3ViZnJhbWVSZW5kZXJpbmcoZmxhZykge1xuICAgIHNldFN1YmZyYW1lRW5hYmxlZChmbGFnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFByZWZpeChwcmVmaXgpIHtcbiAgICBzZXRJZFByZWZpeChwcmVmaXgpO1xuICB9XG5cbiAgZnVuY3Rpb24gbG9hZEFuaW1hdGlvbihwYXJhbXMpIHtcbiAgICBpZiAoc3RhbmRhbG9uZSA9PT0gdHJ1ZSkge1xuICAgICAgcGFyYW1zLmFuaW1hdGlvbkRhdGEgPSBKU09OLnBhcnNlKGFuaW1hdGlvbkRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBhbmltYXRpb25NYW5hZ2VyLmxvYWRBbmltYXRpb24ocGFyYW1zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFF1YWxpdHkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgc3dpdGNoICh2YWx1ZSkge1xuICAgICAgICBjYXNlICdoaWdoJzpcbiAgICAgICAgICBzZXREZWZhdWx0Q3VydmVTZWdtZW50cygyMDApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGNhc2UgJ21lZGl1bSc6XG4gICAgICAgICAgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoNTApO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xvdyc6XG4gICAgICAgICAgc2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoMTApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzTmFOKHZhbHVlKSAmJiB2YWx1ZSA+IDEpIHtcbiAgICAgIHNldERlZmF1bHRDdXJ2ZVNlZ21lbnRzKHZhbHVlKTtcbiAgICB9XG5cbiAgICBpZiAoZ2V0RGVmYXVsdEN1cnZlU2VnbWVudHMoKSA+PSA1MCkge1xuICAgICAgcm91bmRWYWx1ZXMoZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICByb3VuZFZhbHVlcyh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbkJyb3dzZXIoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5zdGFsbFBsdWdpbih0eXBlLCBwbHVnaW4pIHtcbiAgICBpZiAodHlwZSA9PT0gJ2V4cHJlc3Npb25zJykge1xuICAgICAgc2V0RXhwcmVzc2lvbnNQbHVnaW4ocGx1Z2luKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGYWN0b3J5KG5hbWUpIHtcbiAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgIGNhc2UgJ3Byb3BlcnR5RmFjdG9yeSc6XG4gICAgICAgIHJldHVybiBQcm9wZXJ0eUZhY3Rvcnk7XG5cbiAgICAgIGNhc2UgJ3NoYXBlUHJvcGVydHlGYWN0b3J5JzpcbiAgICAgICAgcmV0dXJuIFNoYXBlUHJvcGVydHlGYWN0b3J5O1xuXG4gICAgICBjYXNlICdtYXRyaXgnOlxuICAgICAgICByZXR1cm4gTWF0cml4O1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBsb3R0aWUucGxheSA9IGFuaW1hdGlvbk1hbmFnZXIucGxheTtcbiAgbG90dGllLnBhdXNlID0gYW5pbWF0aW9uTWFuYWdlci5wYXVzZTtcbiAgbG90dGllLnNldExvY2F0aW9uSHJlZiA9IHNldExvY2F0aW9uO1xuICBsb3R0aWUudG9nZ2xlUGF1c2UgPSBhbmltYXRpb25NYW5hZ2VyLnRvZ2dsZVBhdXNlO1xuICBsb3R0aWUuc2V0U3BlZWQgPSBhbmltYXRpb25NYW5hZ2VyLnNldFNwZWVkO1xuICBsb3R0aWUuc2V0RGlyZWN0aW9uID0gYW5pbWF0aW9uTWFuYWdlci5zZXREaXJlY3Rpb247XG4gIGxvdHRpZS5zdG9wID0gYW5pbWF0aW9uTWFuYWdlci5zdG9wO1xuICBsb3R0aWUuc2VhcmNoQW5pbWF0aW9ucyA9IHNlYXJjaEFuaW1hdGlvbnM7XG4gIGxvdHRpZS5yZWdpc3RlckFuaW1hdGlvbiA9IGFuaW1hdGlvbk1hbmFnZXIucmVnaXN0ZXJBbmltYXRpb247XG4gIGxvdHRpZS5sb2FkQW5pbWF0aW9uID0gbG9hZEFuaW1hdGlvbjtcbiAgbG90dGllLnNldFN1YmZyYW1lUmVuZGVyaW5nID0gc2V0U3ViZnJhbWVSZW5kZXJpbmc7XG4gIGxvdHRpZS5yZXNpemUgPSBhbmltYXRpb25NYW5hZ2VyLnJlc2l6ZTsgLy8gbG90dGllLnN0YXJ0ID0gc3RhcnQ7XG5cbiAgbG90dGllLmdvVG9BbmRTdG9wID0gYW5pbWF0aW9uTWFuYWdlci5nb1RvQW5kU3RvcDtcbiAgbG90dGllLmRlc3Ryb3kgPSBhbmltYXRpb25NYW5hZ2VyLmRlc3Ryb3k7XG4gIGxvdHRpZS5zZXRRdWFsaXR5ID0gc2V0UXVhbGl0eTtcbiAgbG90dGllLmluQnJvd3NlciA9IGluQnJvd3NlcjtcbiAgbG90dGllLmluc3RhbGxQbHVnaW4gPSBpbnN0YWxsUGx1Z2luO1xuICBsb3R0aWUuZnJlZXplID0gYW5pbWF0aW9uTWFuYWdlci5mcmVlemU7XG4gIGxvdHRpZS51bmZyZWV6ZSA9IGFuaW1hdGlvbk1hbmFnZXIudW5mcmVlemU7XG4gIGxvdHRpZS5zZXRWb2x1bWUgPSBhbmltYXRpb25NYW5hZ2VyLnNldFZvbHVtZTtcbiAgbG90dGllLm11dGUgPSBhbmltYXRpb25NYW5hZ2VyLm11dGU7XG4gIGxvdHRpZS51bm11dGUgPSBhbmltYXRpb25NYW5hZ2VyLnVubXV0ZTtcbiAgbG90dGllLmdldFJlZ2lzdGVyZWRBbmltYXRpb25zID0gYW5pbWF0aW9uTWFuYWdlci5nZXRSZWdpc3RlcmVkQW5pbWF0aW9ucztcbiAgbG90dGllLnVzZVdlYldvcmtlciA9IHNldFdlYldvcmtlcjtcbiAgbG90dGllLnNldElEUHJlZml4ID0gc2V0UHJlZml4O1xuICBsb3R0aWUuX19nZXRGYWN0b3J5ID0gZ2V0RmFjdG9yeTtcbiAgbG90dGllLnZlcnNpb24gPSAnNS4xMi4yJztcblxuICBmdW5jdGlvbiBjaGVja1JlYWR5KCkge1xuICAgIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSAnY29tcGxldGUnKSB7XG4gICAgICBjbGVhckludGVydmFsKHJlYWR5U3RhdGVDaGVja0ludGVydmFsKTtcbiAgICAgIHNlYXJjaEFuaW1hdGlvbnMoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRRdWVyeVZhcmlhYmxlKHZhcmlhYmxlKSB7XG4gICAgdmFyIHZhcnMgPSBxdWVyeVN0cmluZy5zcGxpdCgnJicpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB2YXIgcGFpciA9IHZhcnNbaV0uc3BsaXQoJz0nKTtcblxuICAgICAgaWYgKGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzBdKSA9PSB2YXJpYWJsZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIHF1ZXJ5U3RyaW5nID0gJyc7XG5cbiAgaWYgKHN0YW5kYWxvbmUpIHtcbiAgICB2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTtcbiAgICB2YXIgaW5kZXggPSBzY3JpcHRzLmxlbmd0aCAtIDE7XG4gICAgdmFyIG15U2NyaXB0ID0gc2NyaXB0c1tpbmRleF0gfHwge1xuICAgICAgc3JjOiAnJ1xuICAgIH07XG4gICAgcXVlcnlTdHJpbmcgPSBteVNjcmlwdC5zcmMgPyBteVNjcmlwdC5zcmMucmVwbGFjZSgvXlteXFw/XStcXD8/LywgJycpIDogJyc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcblxuICAgIHJlbmRlcmVyID0gZ2V0UXVlcnlWYXJpYWJsZSgncmVuZGVyZXInKTtcbiAgfVxuXG4gIHZhciByZWFkeVN0YXRlQ2hlY2tJbnRlcnZhbCA9IHNldEludGVydmFsKGNoZWNrUmVhZHksIDEwMCk7IC8vIHRoaXMgYWRkcyBib2R5bW92aW4gdG8gdGhlIHdpbmRvdyBvYmplY3QgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cbiAgdHJ5IHtcbiAgICBpZiAoISgodHlwZW9mIGV4cG9ydHMgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZiQzKGV4cG9ydHMpKSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcpICYmICEodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXG4gICAgKSB7XG4gICAgICB3aW5kb3cuYm9keW1vdmluID0gbG90dGllO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7Ly9cbiAgfVxuXG4gIHZhciBTaGFwZU1vZGlmaWVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgb2IgPSB7fTtcbiAgICB2YXIgbW9kaWZpZXJzID0ge307XG4gICAgb2IucmVnaXN0ZXJNb2RpZmllciA9IHJlZ2lzdGVyTW9kaWZpZXI7XG4gICAgb2IuZ2V0TW9kaWZpZXIgPSBnZXRNb2RpZmllcjtcblxuICAgIGZ1bmN0aW9uIHJlZ2lzdGVyTW9kaWZpZXIobm0sIGZhY3RvcnkpIHtcbiAgICAgIGlmICghbW9kaWZpZXJzW25tXSkge1xuICAgICAgICBtb2RpZmllcnNbbm1dID0gZmFjdG9yeTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNb2RpZmllcihubSwgZWxlbSwgZGF0YSkge1xuICAgICAgcmV0dXJuIG5ldyBtb2RpZmllcnNbbm1dKGVsZW0sIGRhdGEpO1xuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNoYXBlTW9kaWZpZXIoKSB7fVxuXG4gIFNoYXBlTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZVRvTW9kaWZpZXIgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgLy8gQWRkaW5nIHNoYXBlIHRvIGR5bmFtaWMgcHJvcGVydGllcy4gSXQgY292ZXJzIHRoZSBjYXNlIHdoZXJlIGEgc2hhcGUgaGFzIG5vIGVmZmVjdHMgYXBwbGllZCwgdG8gcmVzZXQgaXQncyBfbWRmIHN0YXRlIG9uIGV2ZXJ5IHRpY2suXG4gICAgICBkYXRhLnNoLmNvbnRhaW5lci5hZGREeW5hbWljUHJvcGVydHkoZGF0YS5zaCk7XG4gICAgICB2YXIgc2hhcGVEYXRhID0ge1xuICAgICAgICBzaGFwZTogZGF0YS5zaCxcbiAgICAgICAgZGF0YTogZGF0YSxcbiAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb246IHNoYXBlQ29sbGVjdGlvblBvb2wubmV3U2hhcGVDb2xsZWN0aW9uKClcbiAgICAgIH07XG4gICAgICB0aGlzLnNoYXBlcy5wdXNoKHNoYXBlRGF0YSk7XG4gICAgICB0aGlzLmFkZFNoYXBlVG9Nb2RpZmllcihzaGFwZURhdGEpO1xuXG4gICAgICBpZiAodGhpcy5faXNBbmltYXRlZCkge1xuICAgICAgICBkYXRhLnNldEFzQW5pbWF0ZWQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU2hhcGVNb2RpZmllci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5zaGFwZXMgPSBbXTtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmluaXRNb2RpZmllclByb3BlcnRpZXMoZWxlbSwgZGF0YSk7XG4gICAgdGhpcy5mcmFtZUlkID0gaW5pdGlhbERlZmF1bHRGcmFtZTtcbiAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgIHRoaXMuayA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLmsgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmdldFZhbHVlKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICBTaGFwZU1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzS2V5cyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuICB9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgU2hhcGVNb2RpZmllcik7XG5cbiAgZnVuY3Rpb24gVHJpbU1vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBUcmltTW9kaWZpZXIpO1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmUsIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgMCwgdGhpcyk7XG4gICAgdGhpcy5zVmFsdWUgPSAwO1xuICAgIHRoaXMuZVZhbHVlID0gMDtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLm0gPSBkYXRhLm07XG4gICAgdGhpcy5faXNBbmltYXRlZCA9ICEhdGhpcy5zLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggfHwgISF0aGlzLmUuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCB8fCAhIXRoaXMuby5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuYWRkU2hhcGVUb01vZGlmaWVyID0gZnVuY3Rpb24gKHNoYXBlRGF0YSkge1xuICAgIHNoYXBlRGF0YS5wYXRoc0RhdGEgPSBbXTtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmNhbGN1bGF0ZVNoYXBlRWRnZXMgPSBmdW5jdGlvbiAocywgZSwgc2hhcGVMZW5ndGgsIGFkZGVkTGVuZ3RoLCB0b3RhbE1vZGlmaWVyTGVuZ3RoKSB7XG4gICAgdmFyIHNlZ21lbnRzID0gW107XG5cbiAgICBpZiAoZSA8PSAxKSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgczogcyxcbiAgICAgICAgZTogZVxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChzID49IDEpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICBzOiBzIC0gMSxcbiAgICAgICAgZTogZSAtIDFcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgczogcyxcbiAgICAgICAgZTogMVxuICAgICAgfSk7XG4gICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgczogMCxcbiAgICAgICAgZTogZSAtIDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBzaGFwZVNlZ21lbnRzID0gW107XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgICB2YXIgc2VnbWVudE9iO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBzZWdtZW50T2IgPSBzZWdtZW50c1tpXTtcblxuICAgICAgaWYgKCEoc2VnbWVudE9iLmUgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoIDwgYWRkZWRMZW5ndGggfHwgc2VnbWVudE9iLnMgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoID4gYWRkZWRMZW5ndGggKyBzaGFwZUxlbmd0aCkpIHtcbiAgICAgICAgdmFyIHNoYXBlUztcbiAgICAgICAgdmFyIHNoYXBlRTtcblxuICAgICAgICBpZiAoc2VnbWVudE9iLnMgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoIDw9IGFkZGVkTGVuZ3RoKSB7XG4gICAgICAgICAgc2hhcGVTID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFwZVMgPSAoc2VnbWVudE9iLnMgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoIC0gYWRkZWRMZW5ndGgpIC8gc2hhcGVMZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VnbWVudE9iLmUgKiB0b3RhbE1vZGlmaWVyTGVuZ3RoID49IGFkZGVkTGVuZ3RoICsgc2hhcGVMZW5ndGgpIHtcbiAgICAgICAgICBzaGFwZUUgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNoYXBlRSA9IChzZWdtZW50T2IuZSAqIHRvdGFsTW9kaWZpZXJMZW5ndGggLSBhZGRlZExlbmd0aCkgLyBzaGFwZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIHNoYXBlU2VnbWVudHMucHVzaChbc2hhcGVTLCBzaGFwZUVdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXNoYXBlU2VnbWVudHMubGVuZ3RoKSB7XG4gICAgICBzaGFwZVNlZ21lbnRzLnB1c2goWzAsIDBdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVTZWdtZW50cztcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLnJlbGVhc2VQYXRoc0RhdGEgPSBmdW5jdGlvbiAocGF0aHNEYXRhKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHBhdGhzRGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHNlZ21lbnRzTGVuZ3RoUG9vbC5yZWxlYXNlKHBhdGhzRGF0YVtpXSk7XG4gICAgfVxuXG4gICAgcGF0aHNEYXRhLmxlbmd0aCA9IDA7XG4gICAgcmV0dXJuIHBhdGhzRGF0YTtcbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzO1xuICAgIHZhciBlO1xuXG4gICAgaWYgKHRoaXMuX21kZiB8fCBfaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgbyA9IHRoaXMuby52ICUgMzYwIC8gMzYwO1xuXG4gICAgICBpZiAobyA8IDApIHtcbiAgICAgICAgbyArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zLnYgPiAxKSB7XG4gICAgICAgIHMgPSAxICsgbztcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zLnYgPCAwKSB7XG4gICAgICAgIHMgPSAwICsgbztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMgPSB0aGlzLnMudiArIG87XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmUudiA+IDEpIHtcbiAgICAgICAgZSA9IDEgKyBvO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmUudiA8IDApIHtcbiAgICAgICAgZSA9IDAgKyBvO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZSA9IHRoaXMuZS52ICsgbztcbiAgICAgIH1cblxuICAgICAgaWYgKHMgPiBlKSB7XG4gICAgICAgIHZhciBfcyA9IHM7XG4gICAgICAgIHMgPSBlO1xuICAgICAgICBlID0gX3M7XG4gICAgICB9XG5cbiAgICAgIHMgPSBNYXRoLnJvdW5kKHMgKiAxMDAwMCkgKiAwLjAwMDE7XG4gICAgICBlID0gTWF0aC5yb3VuZChlICogMTAwMDApICogMC4wMDAxO1xuICAgICAgdGhpcy5zVmFsdWUgPSBzO1xuICAgICAgdGhpcy5lVmFsdWUgPSBlO1xuICAgIH0gZWxzZSB7XG4gICAgICBzID0gdGhpcy5zVmFsdWU7XG4gICAgICBlID0gdGhpcy5lVmFsdWU7XG4gICAgfVxuXG4gICAgdmFyIHNoYXBlUGF0aHM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgcGF0aHNEYXRhO1xuICAgIHZhciBwYXRoRGF0YTtcbiAgICB2YXIgdG90YWxTaGFwZUxlbmd0aDtcbiAgICB2YXIgdG90YWxNb2RpZmllckxlbmd0aCA9IDA7XG5cbiAgICBpZiAoZSA9PT0gcykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLmxvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTtcbiAgICAgICAgdGhpcy5zaGFwZXNbaV0uc2hhcGUuX21kZiA9IHRydWU7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoYXBlLnBhdGhzID0gdGhpcy5zaGFwZXNbaV0ubG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgICAgaWYgKHRoaXMuX21kZikge1xuICAgICAgICAgIHRoaXMuc2hhcGVzW2ldLnBhdGhzRGF0YS5sZW5ndGggPSAwO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghKGUgPT09IDEgJiYgcyA9PT0gMCB8fCBlID09PSAwICYmIHMgPT09IDEpKSB7XG4gICAgICB2YXIgc2VnbWVudHMgPSBbXTtcbiAgICAgIHZhciBzaGFwZURhdGE7XG4gICAgICB2YXIgbG9jYWxTaGFwZUNvbGxlY3Rpb247XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTsgLy8gaWYgc2hhcGUgaGFzbid0IGNoYW5nZWQgYW5kIHRyaW0gcHJvcGVydGllcyBoYXZlbid0IGNoYW5nZWQsIGNhY2hlZCBwcmV2aW91cyBwYXRoIGNhbiBiZSB1c2VkXG5cbiAgICAgICAgaWYgKCFzaGFwZURhdGEuc2hhcGUuX21kZiAmJiAhdGhpcy5fbWRmICYmICFfaXNGaXJzdEZyYW1lICYmIHRoaXMubSAhPT0gMikge1xuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5wYXRocyA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZVBhdGhzLl9sZW5ndGg7XG4gICAgICAgICAgdG90YWxTaGFwZUxlbmd0aCA9IDA7XG5cbiAgICAgICAgICBpZiAoIXNoYXBlRGF0YS5zaGFwZS5fbWRmICYmIHNoYXBlRGF0YS5wYXRoc0RhdGEubGVuZ3RoKSB7XG4gICAgICAgICAgICB0b3RhbFNoYXBlTGVuZ3RoID0gc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdGhzRGF0YSA9IHRoaXMucmVsZWFzZVBhdGhzRGF0YShzaGFwZURhdGEucGF0aHNEYXRhKTtcblxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgICBwYXRoRGF0YSA9IGJlei5nZXRTZWdtZW50c0xlbmd0aChzaGFwZVBhdGhzLnNoYXBlc1tqXSk7XG4gICAgICAgICAgICAgIHBhdGhzRGF0YS5wdXNoKHBhdGhEYXRhKTtcbiAgICAgICAgICAgICAgdG90YWxTaGFwZUxlbmd0aCArPSBwYXRoRGF0YS50b3RhbExlbmd0aDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggPSB0b3RhbFNoYXBlTGVuZ3RoO1xuICAgICAgICAgICAgc2hhcGVEYXRhLnBhdGhzRGF0YSA9IHBhdGhzRGF0YTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0b3RhbE1vZGlmaWVyTGVuZ3RoICs9IHRvdGFsU2hhcGVMZW5ndGg7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzaGFwZVMgPSBzO1xuICAgICAgdmFyIHNoYXBlRSA9IGU7XG4gICAgICB2YXIgYWRkZWRMZW5ndGggPSAwO1xuICAgICAgdmFyIGVkZ2VzO1xuXG4gICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzaGFwZURhdGEgPSB0aGlzLnNoYXBlc1tpXTtcblxuICAgICAgICBpZiAoc2hhcGVEYXRhLnNoYXBlLl9tZGYpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7IC8vIGlmIG0gPT09IDIgbWVhbnMgcGF0aHMgYXJlIHRyaW1tZWQgaW5kaXZpZHVhbGx5IHNvIGVkZ2VzIG5lZWQgdG8gYmUgZm91bmQgZm9yIHRoaXMgc3BlY2lmaWMgc2hhcGUgcmVsYXRpdmUgdG8gd2hvZWwgZ3JvdXBcblxuICAgICAgICAgIGlmICh0aGlzLm0gPT09IDIgJiYgbGVuID4gMSkge1xuICAgICAgICAgICAgZWRnZXMgPSB0aGlzLmNhbGN1bGF0ZVNoYXBlRWRnZXMocywgZSwgc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGgsIGFkZGVkTGVuZ3RoLCB0b3RhbE1vZGlmaWVyTGVuZ3RoKTtcbiAgICAgICAgICAgIGFkZGVkTGVuZ3RoICs9IHNoYXBlRGF0YS50b3RhbFNoYXBlTGVuZ3RoO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlZGdlcyA9IFtbc2hhcGVTLCBzaGFwZUVdXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqTGVuID0gZWRnZXMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgc2hhcGVTID0gZWRnZXNbal1bMF07XG4gICAgICAgICAgICBzaGFwZUUgPSBlZGdlc1tqXVsxXTtcbiAgICAgICAgICAgIHNlZ21lbnRzLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgICAgIGlmIChzaGFwZUUgPD0gMSkge1xuICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCAqIHNoYXBlUyxcbiAgICAgICAgICAgICAgICBlOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCAqIHNoYXBlRVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcGVTID49IDEpIHtcbiAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiAoc2hhcGVTIC0gMSksXG4gICAgICAgICAgICAgICAgZTogc2hhcGVEYXRhLnRvdGFsU2hhcGVMZW5ndGggKiAoc2hhcGVFIC0gMSlcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZWdtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCAqIHNoYXBlUyxcbiAgICAgICAgICAgICAgICBlOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgICAgICAgczogMCxcbiAgICAgICAgICAgICAgICBlOiBzaGFwZURhdGEudG90YWxTaGFwZUxlbmd0aCAqIChzaGFwZUUgLSAxKVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG5ld1NoYXBlc0RhdGEgPSB0aGlzLmFkZFNoYXBlcyhzaGFwZURhdGEsIHNlZ21lbnRzWzBdKTtcblxuICAgICAgICAgICAgaWYgKHNlZ21lbnRzWzBdLnMgIT09IHNlZ21lbnRzWzBdLmUpIHtcbiAgICAgICAgICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFzdFNoYXBlSW5Db2xsZWN0aW9uID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlc1tzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aCAtIDFdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RTaGFwZUluQ29sbGVjdGlvbi5jKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbGFzdFNoYXBlID0gbmV3U2hhcGVzRGF0YS5wb3AoKTtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUGF0aHMobmV3U2hhcGVzRGF0YSwgbG9jYWxTaGFwZUNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgbmV3U2hhcGVzRGF0YSA9IHRoaXMuYWRkU2hhcGVzKHNoYXBlRGF0YSwgc2VnbWVudHNbMV0sIGxhc3RTaGFwZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMuYWRkUGF0aHMobmV3U2hhcGVzRGF0YSwgbG9jYWxTaGFwZUNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgICAgICAgbmV3U2hhcGVzRGF0YSA9IHRoaXMuYWRkU2hhcGVzKHNoYXBlRGF0YSwgc2VnbWVudHNbMV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHRoaXMuYWRkUGF0aHMobmV3U2hhcGVzRGF0YSwgbG9jYWxTaGFwZUNvbGxlY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNoYXBlRGF0YS5zaGFwZS5wYXRocyA9IGxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLl9tZGYpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAvLyBSZWxlYXNpZ24gVHJpbSBDYWNoZWQgcGF0aHMgZGF0YSB3aGVuIG5vIHRyaW0gYXBwbGllZCBpbiBjYXNlIHNoYXBlcyBhcmUgbW9kaWZpZWQgaW5iZXR3ZWVuLlxuICAgICAgICAvLyBEb24ndCByZW1vdmUgdGhpcyBldmVuIGlmIGl0J3MgbG9zaW5nIGNhY2hlZCBpbmZvLlxuICAgICAgICB0aGlzLnNoYXBlc1tpXS5wYXRoc0RhdGEubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5zaGFwZXNbaV0uc2hhcGUuX21kZiA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuYWRkUGF0aHMgPSBmdW5jdGlvbiAobmV3UGF0aHMsIGxvY2FsU2hhcGVDb2xsZWN0aW9uKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IG5ld1BhdGhzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUobmV3UGF0aHNbaV0pO1xuICAgIH1cbiAgfTtcblxuICBUcmltTW9kaWZpZXIucHJvdG90eXBlLmFkZFNlZ21lbnQgPSBmdW5jdGlvbiAocHQxLCBwdDIsIHB0MywgcHQ0LCBzaGFwZVBhdGgsIHBvcywgbmV3U2hhcGUpIHtcbiAgICBzaGFwZVBhdGguc2V0WFlBdChwdDJbMF0sIHB0MlsxXSwgJ28nLCBwb3MpO1xuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHB0M1swXSwgcHQzWzFdLCAnaScsIHBvcyArIDEpO1xuXG4gICAgaWYgKG5ld1NoYXBlKSB7XG4gICAgICBzaGFwZVBhdGguc2V0WFlBdChwdDFbMF0sIHB0MVsxXSwgJ3YnLCBwb3MpO1xuICAgIH1cblxuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHB0NFswXSwgcHQ0WzFdLCAndicsIHBvcyArIDEpO1xuICB9O1xuXG4gIFRyaW1Nb2RpZmllci5wcm90b3R5cGUuYWRkU2VnbWVudEZyb21BcnJheSA9IGZ1bmN0aW9uIChwb2ludHMsIHNoYXBlUGF0aCwgcG9zLCBuZXdTaGFwZSkge1xuICAgIHNoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1sxXSwgcG9pbnRzWzVdLCAnbycsIHBvcyk7XG4gICAgc2hhcGVQYXRoLnNldFhZQXQocG9pbnRzWzJdLCBwb2ludHNbNl0sICdpJywgcG9zICsgMSk7XG5cbiAgICBpZiAobmV3U2hhcGUpIHtcbiAgICAgIHNoYXBlUGF0aC5zZXRYWUF0KHBvaW50c1swXSwgcG9pbnRzWzRdLCAndicsIHBvcyk7XG4gICAgfVxuXG4gICAgc2hhcGVQYXRoLnNldFhZQXQocG9pbnRzWzNdLCBwb2ludHNbN10sICd2JywgcG9zICsgMSk7XG4gIH07XG5cbiAgVHJpbU1vZGlmaWVyLnByb3RvdHlwZS5hZGRTaGFwZXMgPSBmdW5jdGlvbiAoc2hhcGVEYXRhLCBzaGFwZVNlZ21lbnQsIHNoYXBlUGF0aCkge1xuICAgIHZhciBwYXRoc0RhdGEgPSBzaGFwZURhdGEucGF0aHNEYXRhO1xuICAgIHZhciBzaGFwZVBhdGhzID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLnNoYXBlcztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc2hhcGVEYXRhLnNoYXBlLnBhdGhzLl9sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFkZGVkTGVuZ3RoID0gMDtcbiAgICB2YXIgY3VycmVudExlbmd0aERhdGE7XG4gICAgdmFyIHNlZ21lbnRDb3VudDtcbiAgICB2YXIgbGVuZ3RocztcbiAgICB2YXIgc2VnbWVudDtcbiAgICB2YXIgc2hhcGVzID0gW107XG4gICAgdmFyIGluaXRQb3M7XG4gICAgdmFyIG5ld1NoYXBlID0gdHJ1ZTtcblxuICAgIGlmICghc2hhcGVQYXRoKSB7XG4gICAgICBzaGFwZVBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgICAgc2VnbWVudENvdW50ID0gMDtcbiAgICAgIGluaXRQb3MgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZWdtZW50Q291bnQgPSBzaGFwZVBhdGguX2xlbmd0aDtcbiAgICAgIGluaXRQb3MgPSBzaGFwZVBhdGguX2xlbmd0aDtcbiAgICB9XG5cbiAgICBzaGFwZXMucHVzaChzaGFwZVBhdGgpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBsZW5ndGhzID0gcGF0aHNEYXRhW2ldLmxlbmd0aHM7XG4gICAgICBzaGFwZVBhdGguYyA9IHNoYXBlUGF0aHNbaV0uYztcbiAgICAgIGpMZW4gPSBzaGFwZVBhdGhzW2ldLmMgPyBsZW5ndGhzLmxlbmd0aCA6IGxlbmd0aHMubGVuZ3RoICsgMTtcblxuICAgICAgZm9yIChqID0gMTsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICBjdXJyZW50TGVuZ3RoRGF0YSA9IGxlbmd0aHNbaiAtIDFdO1xuXG4gICAgICAgIGlmIChhZGRlZExlbmd0aCArIGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoIDwgc2hhcGVTZWdtZW50LnMpIHtcbiAgICAgICAgICBhZGRlZExlbmd0aCArPSBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aDtcbiAgICAgICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGFkZGVkTGVuZ3RoID4gc2hhcGVTZWdtZW50LmUpIHtcbiAgICAgICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChzaGFwZVNlZ21lbnQucyA8PSBhZGRlZExlbmd0aCAmJiBzaGFwZVNlZ21lbnQuZSA+PSBhZGRlZExlbmd0aCArIGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnQoc2hhcGVQYXRoc1tpXS52W2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5vW2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5pW2pdLCBzaGFwZVBhdGhzW2ldLnZbal0sIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7XG4gICAgICAgICAgICBuZXdTaGFwZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWdtZW50ID0gYmV6LmdldE5ld1NlZ21lbnQoc2hhcGVQYXRoc1tpXS52W2ogLSAxXSwgc2hhcGVQYXRoc1tpXS52W2pdLCBzaGFwZVBhdGhzW2ldLm9baiAtIDFdLCBzaGFwZVBhdGhzW2ldLmlbal0sIChzaGFwZVNlZ21lbnQucyAtIGFkZGVkTGVuZ3RoKSAvIGN1cnJlbnRMZW5ndGhEYXRhLmFkZGVkTGVuZ3RoLCAoc2hhcGVTZWdtZW50LmUgLSBhZGRlZExlbmd0aCkgLyBjdXJyZW50TGVuZ3RoRGF0YS5hZGRlZExlbmd0aCwgbGVuZ3Roc1tqIC0gMV0pO1xuICAgICAgICAgICAgdGhpcy5hZGRTZWdtZW50RnJvbUFycmF5KHNlZ21lbnQsIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7IC8vIHRoaXMuYWRkU2VnbWVudChzZWdtZW50LnB0MSwgc2VnbWVudC5wdDMsIHNlZ21lbnQucHQ0LCBzZWdtZW50LnB0Miwgc2hhcGVQYXRoLCBzZWdtZW50Q291bnQsIG5ld1NoYXBlKTtcblxuICAgICAgICAgICAgbmV3U2hhcGUgPSBmYWxzZTtcbiAgICAgICAgICAgIHNoYXBlUGF0aC5jID0gZmFsc2U7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYWRkZWRMZW5ndGggKz0gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGg7XG4gICAgICAgICAgc2VnbWVudENvdW50ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHNoYXBlUGF0aHNbaV0uYyAmJiBsZW5ndGhzLmxlbmd0aCkge1xuICAgICAgICBjdXJyZW50TGVuZ3RoRGF0YSA9IGxlbmd0aHNbaiAtIDFdO1xuXG4gICAgICAgIGlmIChhZGRlZExlbmd0aCA8PSBzaGFwZVNlZ21lbnQuZSkge1xuICAgICAgICAgIHZhciBzZWdtZW50TGVuZ3RoID0gbGVuZ3Roc1tqIC0gMV0uYWRkZWRMZW5ndGg7XG5cbiAgICAgICAgICBpZiAoc2hhcGVTZWdtZW50LnMgPD0gYWRkZWRMZW5ndGggJiYgc2hhcGVTZWdtZW50LmUgPj0gYWRkZWRMZW5ndGggKyBzZWdtZW50TGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLmFkZFNlZ21lbnQoc2hhcGVQYXRoc1tpXS52W2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5vW2ogLSAxXSwgc2hhcGVQYXRoc1tpXS5pWzBdLCBzaGFwZVBhdGhzW2ldLnZbMF0sIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7XG4gICAgICAgICAgICBuZXdTaGFwZSA9IGZhbHNlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWdtZW50ID0gYmV6LmdldE5ld1NlZ21lbnQoc2hhcGVQYXRoc1tpXS52W2ogLSAxXSwgc2hhcGVQYXRoc1tpXS52WzBdLCBzaGFwZVBhdGhzW2ldLm9baiAtIDFdLCBzaGFwZVBhdGhzW2ldLmlbMF0sIChzaGFwZVNlZ21lbnQucyAtIGFkZGVkTGVuZ3RoKSAvIHNlZ21lbnRMZW5ndGgsIChzaGFwZVNlZ21lbnQuZSAtIGFkZGVkTGVuZ3RoKSAvIHNlZ21lbnRMZW5ndGgsIGxlbmd0aHNbaiAtIDFdKTtcbiAgICAgICAgICAgIHRoaXMuYWRkU2VnbWVudEZyb21BcnJheShzZWdtZW50LCBzaGFwZVBhdGgsIHNlZ21lbnRDb3VudCwgbmV3U2hhcGUpOyAvLyB0aGlzLmFkZFNlZ21lbnQoc2VnbWVudC5wdDEsIHNlZ21lbnQucHQzLCBzZWdtZW50LnB0NCwgc2VnbWVudC5wdDIsIHNoYXBlUGF0aCwgc2VnbWVudENvdW50LCBuZXdTaGFwZSk7XG5cbiAgICAgICAgICAgIG5ld1NoYXBlID0gZmFsc2U7XG4gICAgICAgICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFwZVBhdGguYyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgYWRkZWRMZW5ndGggKz0gY3VycmVudExlbmd0aERhdGEuYWRkZWRMZW5ndGg7XG4gICAgICAgIHNlZ21lbnRDb3VudCArPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hhcGVQYXRoLl9sZW5ndGgpIHtcbiAgICAgICAgc2hhcGVQYXRoLnNldFhZQXQoc2hhcGVQYXRoLnZbaW5pdFBvc11bMF0sIHNoYXBlUGF0aC52W2luaXRQb3NdWzFdLCAnaScsIGluaXRQb3MpO1xuICAgICAgICBzaGFwZVBhdGguc2V0WFlBdChzaGFwZVBhdGgudltzaGFwZVBhdGguX2xlbmd0aCAtIDFdWzBdLCBzaGFwZVBhdGgudltzaGFwZVBhdGguX2xlbmd0aCAtIDFdWzFdLCAnbycsIHNoYXBlUGF0aC5fbGVuZ3RoIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhZGRlZExlbmd0aCA+IHNoYXBlU2VnbWVudC5lKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoaSA8IGxlbiAtIDEpIHtcbiAgICAgICAgc2hhcGVQYXRoID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICAgICAgbmV3U2hhcGUgPSB0cnVlO1xuICAgICAgICBzaGFwZXMucHVzaChzaGFwZVBhdGgpO1xuICAgICAgICBzZWdtZW50Q291bnQgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBzaGFwZXM7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHVja2VyQW5kQmxvYXRNb2RpZmllcigpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZU1vZGlmaWVyXSwgUHVja2VyQW5kQmxvYXRNb2RpZmllcik7XG5cbiAgUHVja2VyQW5kQmxvYXRNb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5hbW91bnQgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmEsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuYW1vdW50LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gIH07XG5cbiAgUHVja2VyQW5kQmxvYXRNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGggPSBmdW5jdGlvbiAocGF0aCwgYW1vdW50KSB7XG4gICAgdmFyIHBlcmNlbnQgPSBhbW91bnQgLyAxMDA7XG4gICAgdmFyIGNlbnRlclBvaW50ID0gWzAsIDBdO1xuICAgIHZhciBwYXRoTGVuZ3RoID0gcGF0aC5fbGVuZ3RoO1xuICAgIHZhciBpID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXRoTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNlbnRlclBvaW50WzBdICs9IHBhdGgudltpXVswXTtcbiAgICAgIGNlbnRlclBvaW50WzFdICs9IHBhdGgudltpXVsxXTtcbiAgICB9XG5cbiAgICBjZW50ZXJQb2ludFswXSAvPSBwYXRoTGVuZ3RoO1xuICAgIGNlbnRlclBvaW50WzFdIC89IHBhdGhMZW5ndGg7XG4gICAgdmFyIGNsb25lZFBhdGggPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIGNsb25lZFBhdGguYyA9IHBhdGguYztcbiAgICB2YXIgdlg7XG4gICAgdmFyIHZZO1xuICAgIHZhciBvWDtcbiAgICB2YXIgb1k7XG4gICAgdmFyIGlYO1xuICAgIHZhciBpWTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXRoTGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZYID0gcGF0aC52W2ldWzBdICsgKGNlbnRlclBvaW50WzBdIC0gcGF0aC52W2ldWzBdKSAqIHBlcmNlbnQ7XG4gICAgICB2WSA9IHBhdGgudltpXVsxXSArIChjZW50ZXJQb2ludFsxXSAtIHBhdGgudltpXVsxXSkgKiBwZXJjZW50O1xuICAgICAgb1ggPSBwYXRoLm9baV1bMF0gKyAoY2VudGVyUG9pbnRbMF0gLSBwYXRoLm9baV1bMF0pICogLXBlcmNlbnQ7XG4gICAgICBvWSA9IHBhdGgub1tpXVsxXSArIChjZW50ZXJQb2ludFsxXSAtIHBhdGgub1tpXVsxXSkgKiAtcGVyY2VudDtcbiAgICAgIGlYID0gcGF0aC5pW2ldWzBdICsgKGNlbnRlclBvaW50WzBdIC0gcGF0aC5pW2ldWzBdKSAqIC1wZXJjZW50O1xuICAgICAgaVkgPSBwYXRoLmlbaV1bMV0gKyAoY2VudGVyUG9pbnRbMV0gLSBwYXRoLmlbaV1bMV0pICogLXBlcmNlbnQ7XG4gICAgICBjbG9uZWRQYXRoLnNldFRyaXBsZUF0KHZYLCB2WSwgb1gsIG9ZLCBpWCwgaVksIGkpO1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZWRQYXRoO1xuICB9O1xuXG4gIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFtb3VudCA9IHRoaXMuYW1vdW50LnY7XG5cbiAgICBpZiAoYW1vdW50ICE9PSAwKSB7XG4gICAgICB2YXIgc2hhcGVEYXRhO1xuICAgICAgdmFyIGxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgc2hhcGVEYXRhID0gdGhpcy5zaGFwZXNbaV07XG4gICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uID0gc2hhcGVEYXRhLmxvY2FsU2hhcGVDb2xsZWN0aW9uO1xuXG4gICAgICAgIGlmICghKCFzaGFwZURhdGEuc2hhcGUuX21kZiAmJiAhdGhpcy5fbWRmICYmICFfaXNGaXJzdEZyYW1lKSkge1xuICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLnJlbGVhc2VTaGFwZXMoKTtcbiAgICAgICAgICBzaGFwZURhdGEuc2hhcGUuX21kZiA9IHRydWU7XG4gICAgICAgICAgc2hhcGVQYXRocyA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5zaGFwZXM7XG4gICAgICAgICAgakxlbiA9IHNoYXBlRGF0YS5zaGFwZS5wYXRocy5fbGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgbG9jYWxTaGFwZUNvbGxlY3Rpb24uYWRkU2hhcGUodGhpcy5wcm9jZXNzUGF0aChzaGFwZVBhdGhzW2pdLCBhbW91bnQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIHZhciBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlZmF1bHRWZWN0b3IgPSBbMCwgMF07XG5cbiAgICBmdW5jdGlvbiBhcHBseVRvTWF0cml4KG1hdCkge1xuICAgICAgdmFyIF9tZGYgPSB0aGlzLl9tZGY7XG4gICAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuICAgICAgdGhpcy5fbWRmID0gdGhpcy5fbWRmIHx8IF9tZGY7XG5cbiAgICAgIGlmICh0aGlzLmEpIHtcbiAgICAgICAgbWF0LnRyYW5zbGF0ZSgtdGhpcy5hLnZbMF0sIC10aGlzLmEudlsxXSwgdGhpcy5hLnZbMl0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5zKSB7XG4gICAgICAgIG1hdC5zY2FsZSh0aGlzLnMudlswXSwgdGhpcy5zLnZbMV0sIHRoaXMucy52WzJdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2spIHtcbiAgICAgICAgbWF0LnNrZXdGcm9tQXhpcygtdGhpcy5zay52LCB0aGlzLnNhLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yKSB7XG4gICAgICAgIG1hdC5yb3RhdGUoLXRoaXMuci52KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdC5yb3RhdGVaKC10aGlzLnJ6LnYpLnJvdGF0ZVkodGhpcy5yeS52KS5yb3RhdGVYKHRoaXMucngudikucm90YXRlWigtdGhpcy5vci52WzJdKS5yb3RhdGVZKHRoaXMub3IudlsxXSkucm90YXRlWCh0aGlzLm9yLnZbMF0pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLnAucykge1xuICAgICAgICBpZiAodGhpcy5kYXRhLnAueikge1xuICAgICAgICAgIG1hdC50cmFuc2xhdGUodGhpcy5weC52LCB0aGlzLnB5LnYsIC10aGlzLnB6LnYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdC50cmFuc2xhdGUodGhpcy5weC52LCB0aGlzLnB5LnYsIDApO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXQudHJhbnNsYXRlKHRoaXMucC52WzBdLCB0aGlzLnAudlsxXSwgLXRoaXMucC52WzJdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcm9jZXNzS2V5cyhmb3JjZVJlbmRlcikge1xuICAgICAgaWYgKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0RpcnR5KSB7XG4gICAgICAgIHRoaXMucHJlY2FsY3VsYXRlTWF0cml4KCk7XG4gICAgICAgIHRoaXMuX2lzRGlydHkgPSBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcblxuICAgICAgaWYgKHRoaXMuX21kZiB8fCBmb3JjZVJlbmRlcikge1xuICAgICAgICB2YXIgZnJhbWVSYXRlO1xuICAgICAgICB0aGlzLnYuY2xvbmVGcm9tUHJvcHModGhpcy5wcmUucHJvcHMpO1xuXG4gICAgICAgIGlmICh0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAxKSB7XG4gICAgICAgICAgdGhpcy52LnRyYW5zbGF0ZSgtdGhpcy5hLnZbMF0sIC10aGlzLmEudlsxXSwgdGhpcy5hLnZbMl0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDIpIHtcbiAgICAgICAgICB0aGlzLnYuc2NhbGUodGhpcy5zLnZbMF0sIHRoaXMucy52WzFdLCB0aGlzLnMudlsyXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zayAmJiB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCAzKSB7XG4gICAgICAgICAgdGhpcy52LnNrZXdGcm9tQXhpcygtdGhpcy5zay52LCB0aGlzLnNhLnYpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuciAmJiB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCA0KSB7XG4gICAgICAgICAgdGhpcy52LnJvdGF0ZSgtdGhpcy5yLnYpO1xuICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLnIgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgNCkge1xuICAgICAgICAgIHRoaXMudi5yb3RhdGVaKC10aGlzLnJ6LnYpLnJvdGF0ZVkodGhpcy5yeS52KS5yb3RhdGVYKHRoaXMucngudikucm90YXRlWigtdGhpcy5vci52WzJdKS5yb3RhdGVZKHRoaXMub3IudlsxXSkucm90YXRlWCh0aGlzLm9yLnZbMF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYXV0b09yaWVudGVkKSB7XG4gICAgICAgICAgdmFyIHYxO1xuICAgICAgICAgIHZhciB2MjtcbiAgICAgICAgICBmcmFtZVJhdGUgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG5cbiAgICAgICAgICBpZiAodGhpcy5wICYmIHRoaXMucC5rZXlmcmFtZXMgJiYgdGhpcy5wLmdldFZhbHVlQXRUaW1lKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wLl9jYWNoaW5nLmxhc3RGcmFtZSArIHRoaXMucC5vZmZzZXRUaW1lIDw9IHRoaXMucC5rZXlmcmFtZXNbMF0udCkge1xuICAgICAgICAgICAgICB2MSA9IHRoaXMucC5nZXRWYWx1ZUF0VGltZSgodGhpcy5wLmtleWZyYW1lc1swXS50ICsgMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MiA9IHRoaXMucC5nZXRWYWx1ZUF0VGltZSh0aGlzLnAua2V5ZnJhbWVzWzBdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnAuX2NhY2hpbmcubGFzdEZyYW1lICsgdGhpcy5wLm9mZnNldFRpbWUgPj0gdGhpcy5wLmtleWZyYW1lc1t0aGlzLnAua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQpIHtcbiAgICAgICAgICAgICAgdjEgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUodGhpcy5wLmtleWZyYW1lc1t0aGlzLnAua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MiA9IHRoaXMucC5nZXRWYWx1ZUF0VGltZSgodGhpcy5wLmtleWZyYW1lc1t0aGlzLnAua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSAwLjA1KSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB2MSA9IHRoaXMucC5wdjtcbiAgICAgICAgICAgICAgdjIgPSB0aGlzLnAuZ2V0VmFsdWVBdFRpbWUoKHRoaXMucC5fY2FjaGluZy5sYXN0RnJhbWUgKyB0aGlzLnAub2Zmc2V0VGltZSAtIDAuMDEpIC8gZnJhbWVSYXRlLCB0aGlzLnAub2Zmc2V0VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnB4ICYmIHRoaXMucHgua2V5ZnJhbWVzICYmIHRoaXMucHkua2V5ZnJhbWVzICYmIHRoaXMucHguZ2V0VmFsdWVBdFRpbWUgJiYgdGhpcy5weS5nZXRWYWx1ZUF0VGltZSkge1xuICAgICAgICAgICAgdjEgPSBbXTtcbiAgICAgICAgICAgIHYyID0gW107XG4gICAgICAgICAgICB2YXIgcHggPSB0aGlzLnB4O1xuICAgICAgICAgICAgdmFyIHB5ID0gdGhpcy5weTtcblxuICAgICAgICAgICAgaWYgKHB4Ll9jYWNoaW5nLmxhc3RGcmFtZSArIHB4Lm9mZnNldFRpbWUgPD0gcHgua2V5ZnJhbWVzWzBdLnQpIHtcbiAgICAgICAgICAgICAgdjFbMF0gPSBweC5nZXRWYWx1ZUF0VGltZSgocHgua2V5ZnJhbWVzWzBdLnQgKyAwLjAxKSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYxWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUoKHB5LmtleWZyYW1lc1swXS50ICsgMC4wMSkgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MlswXSA9IHB4LmdldFZhbHVlQXRUaW1lKHB4LmtleWZyYW1lc1swXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjJbMV0gPSBweS5nZXRWYWx1ZUF0VGltZShweS5rZXlmcmFtZXNbMF0udCAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHB4Ll9jYWNoaW5nLmxhc3RGcmFtZSArIHB4Lm9mZnNldFRpbWUgPj0gcHgua2V5ZnJhbWVzW3B4LmtleWZyYW1lcy5sZW5ndGggLSAxXS50KSB7XG4gICAgICAgICAgICAgIHYxWzBdID0gcHguZ2V0VmFsdWVBdFRpbWUocHgua2V5ZnJhbWVzW3B4LmtleWZyYW1lcy5sZW5ndGggLSAxXS50IC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgICAgdjFbMV0gPSBweS5nZXRWYWx1ZUF0VGltZShweS5rZXlmcmFtZXNbcHkua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLyBmcmFtZVJhdGUsIDApO1xuICAgICAgICAgICAgICB2MlswXSA9IHB4LmdldFZhbHVlQXRUaW1lKChweC5rZXlmcmFtZXNbcHgua2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgMCk7XG4gICAgICAgICAgICAgIHYyWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUoKHB5LmtleWZyYW1lc1tweS5rZXlmcmFtZXMubGVuZ3RoIC0gMV0udCAtIDAuMDEpIC8gZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHYxID0gW3B4LnB2LCBweS5wdl07XG4gICAgICAgICAgICAgIHYyWzBdID0gcHguZ2V0VmFsdWVBdFRpbWUoKHB4Ll9jYWNoaW5nLmxhc3RGcmFtZSArIHB4Lm9mZnNldFRpbWUgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgcHgub2Zmc2V0VGltZSk7XG4gICAgICAgICAgICAgIHYyWzFdID0gcHkuZ2V0VmFsdWVBdFRpbWUoKHB5Ll9jYWNoaW5nLmxhc3RGcmFtZSArIHB5Lm9mZnNldFRpbWUgLSAwLjAxKSAvIGZyYW1lUmF0ZSwgcHkub2Zmc2V0VGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHYyID0gZGVmYXVsdFZlY3RvcjtcbiAgICAgICAgICAgIHYxID0gdjI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy52LnJvdGF0ZSgtTWF0aC5hdGFuMih2MVsxXSAtIHYyWzFdLCB2MVswXSAtIHYyWzBdKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5kYXRhLnAgJiYgdGhpcy5kYXRhLnAucykge1xuICAgICAgICAgIGlmICh0aGlzLmRhdGEucC56KSB7XG4gICAgICAgICAgICB0aGlzLnYudHJhbnNsYXRlKHRoaXMucHgudiwgdGhpcy5weS52LCAtdGhpcy5wei52KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52LnRyYW5zbGF0ZSh0aGlzLnB4LnYsIHRoaXMucHkudiwgMCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudi50cmFuc2xhdGUodGhpcy5wLnZbMF0sIHRoaXMucC52WzFdLCAtdGhpcy5wLnZbMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlY2FsY3VsYXRlTWF0cml4KCkge1xuICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gMDtcbiAgICAgIHRoaXMucHJlLnJlc2V0KCk7XG5cbiAgICAgIGlmICghdGhpcy5hLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wcmUudHJhbnNsYXRlKC10aGlzLmEudlswXSwgLXRoaXMuYS52WzFdLCB0aGlzLmEudlsyXSk7XG4gICAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5zLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wcmUuc2NhbGUodGhpcy5zLnZbMF0sIHRoaXMucy52WzFdLCB0aGlzLnMudlsyXSk7XG4gICAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnNrKSB7XG4gICAgICAgIGlmICghdGhpcy5zay5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICYmICF0aGlzLnNhLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnByZS5za2V3RnJvbUF4aXMoLXRoaXMuc2sudiwgdGhpcy5zYS52KTtcbiAgICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSAzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yKSB7XG4gICAgICAgIGlmICghdGhpcy5yLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLnByZS5yb3RhdGUoLXRoaXMuci52KTtcbiAgICAgICAgICB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPSA0O1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnJ6LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggJiYgIXRoaXMucnkuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAmJiAhdGhpcy5yeC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoICYmICF0aGlzLm9yLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5wcmUucm90YXRlWigtdGhpcy5yei52KS5yb3RhdGVZKHRoaXMucnkudikucm90YXRlWCh0aGlzLnJ4LnYpLnJvdGF0ZVooLXRoaXMub3IudlsyXSkucm90YXRlWSh0aGlzLm9yLnZbMV0pLnJvdGF0ZVgodGhpcy5vci52WzBdKTtcbiAgICAgICAgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zID0gNDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhdXRvT3JpZW50KCkgey8vXG4gICAgICAvLyB2YXIgcHJldlAgPSB0aGlzLmdldFZhbHVlQXRUaW1lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRHluYW1pY1Byb3BlcnR5KHByb3ApIHtcbiAgICAgIHRoaXMuX2FkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTtcblxuICAgICAgdGhpcy5lbGVtLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTtcbiAgICAgIHRoaXMuX2lzRGlydHkgPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcikge1xuICAgICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICAgIHRoaXMuZnJhbWVJZCA9IC0xO1xuICAgICAgdGhpcy5wcm9wVHlwZSA9ICd0cmFuc2Zvcm0nO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMudiA9IG5ldyBNYXRyaXgoKTsgLy8gUHJlY2FsY3VsYXRlZCBtYXRyaXggd2l0aCBub24gYW5pbWF0ZWQgcHJvcGVydGllc1xuXG4gICAgICB0aGlzLnByZSA9IG5ldyBNYXRyaXgoKTtcbiAgICAgIHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA9IDA7XG4gICAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoY29udGFpbmVyIHx8IGVsZW0pO1xuXG4gICAgICBpZiAoZGF0YS5wICYmIGRhdGEucC5zKSB7XG4gICAgICAgIHRoaXMucHggPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAueCwgMCwgMCwgdGhpcyk7XG4gICAgICAgIHRoaXMucHkgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnAueSwgMCwgMCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKGRhdGEucC56KSB7XG4gICAgICAgICAgdGhpcy5weiA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucC56LCAwLCAwLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wIHx8IHtcbiAgICAgICAgICBrOiBbMCwgMCwgMF1cbiAgICAgICAgfSwgMSwgMCwgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLnJ4KSB7XG4gICAgICAgIHRoaXMucnggPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnJ4LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgICB0aGlzLnJ5ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yeSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgICAgdGhpcy5yeiA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucnosIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG5cbiAgICAgICAgaWYgKGRhdGEub3Iua1swXS50aSkge1xuICAgICAgICAgIHZhciBpO1xuICAgICAgICAgIHZhciBsZW4gPSBkYXRhLm9yLmsubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBkYXRhLm9yLmtbaV0udG8gPSBudWxsO1xuICAgICAgICAgICAgZGF0YS5vci5rW2ldLnRpID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vciwgMSwgZGVnVG9SYWRzLCB0aGlzKTsgLy8gc2ggSW5kaWNhdGVzIGl0IG5lZWRzIHRvIGJlIGNhcHBlZCBiZXR3ZWVuIC0xODAgYW5kIDE4MFxuXG4gICAgICAgIHRoaXMub3Iuc2ggPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5yIHx8IHtcbiAgICAgICAgICBrOiAwXG4gICAgICAgIH0sIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLnNrKSB7XG4gICAgICAgIHRoaXMuc2sgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnNrLCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgICAgICB0aGlzLnNhID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zYSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hIHx8IHtcbiAgICAgICAgazogWzAsIDAsIDBdXG4gICAgICB9LCAxLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMucyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEucyB8fCB7XG4gICAgICAgIGs6IFsxMDAsIDEwMCwgMTAwXVxuICAgICAgfSwgMSwgMC4wMSwgdGhpcyk7IC8vIE9wYWNpdHkgaXMgbm90IHBhcnQgb2YgdGhlIHRyYW5zZm9ybSBwcm9wZXJ0aWVzLCB0aGF0J3Mgd2h5IGl0IHdvbid0IHVzZSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLiBUaGF0IHdheSB0cmFuc2Zvcm1zIHdvbid0IGdldCB1cGRhdGVkIGlmIG9wYWNpdHkgY2hhbmdlcy5cblxuICAgICAgaWYgKGRhdGEubykge1xuICAgICAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAuMDEsIGVsZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5vID0ge1xuICAgICAgICAgIF9tZGY6IGZhbHNlLFxuICAgICAgICAgIHY6IDFcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faXNEaXJ0eSA9IHRydWU7XG5cbiAgICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBUcmFuc2Zvcm1Qcm9wZXJ0eS5wcm90b3R5cGUgPSB7XG4gICAgICBhcHBseVRvTWF0cml4OiBhcHBseVRvTWF0cml4LFxuICAgICAgZ2V0VmFsdWU6IHByb2Nlc3NLZXlzLFxuICAgICAgcHJlY2FsY3VsYXRlTWF0cml4OiBwcmVjYWxjdWxhdGVNYXRyaXgsXG4gICAgICBhdXRvT3JpZW50OiBhdXRvT3JpZW50XG4gICAgfTtcbiAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFRyYW5zZm9ybVByb3BlcnR5KTtcbiAgICBUcmFuc2Zvcm1Qcm9wZXJ0eS5wcm90b3R5cGUuYWRkRHluYW1pY1Byb3BlcnR5ID0gYWRkRHluYW1pY1Byb3BlcnR5O1xuICAgIFRyYW5zZm9ybVByb3BlcnR5LnByb3RvdHlwZS5fYWRkRHluYW1pY1Byb3BlcnR5ID0gRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyLnByb3RvdHlwZS5hZGREeW5hbWljUHJvcGVydHk7XG5cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpIHtcbiAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtUHJvcGVydHkoZWxlbSwgZGF0YSwgY29udGFpbmVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZ2V0VHJhbnNmb3JtUHJvcGVydHk6IGdldFRyYW5zZm9ybVByb3BlcnR5XG4gICAgfTtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFJlcGVhdGVyTW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIFJlcGVhdGVyTW9kaWZpZXIpO1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYywgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLnRyID0gVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5KGVsZW0sIGRhdGEudHIsIHRoaXMpO1xuICAgIHRoaXMuc28gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnRyLnNvLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLmVvID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS50ci5lbywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgIGlmICghdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNBbmltYXRlZCA9ICEhdGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGg7XG4gICAgdGhpcy5wTWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMuck1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLnNNYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy50TWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMubWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmFwcGx5VHJhbnNmb3JtcyA9IGZ1bmN0aW9uIChwTWF0cml4LCByTWF0cml4LCBzTWF0cml4LCB0cmFuc2Zvcm0sIHBlcmMsIGludikge1xuICAgIHZhciBkaXIgPSBpbnYgPyAtMSA6IDE7XG4gICAgdmFyIHNjYWxlWCA9IHRyYW5zZm9ybS5zLnZbMF0gKyAoMSAtIHRyYW5zZm9ybS5zLnZbMF0pICogKDEgLSBwZXJjKTtcbiAgICB2YXIgc2NhbGVZID0gdHJhbnNmb3JtLnMudlsxXSArICgxIC0gdHJhbnNmb3JtLnMudlsxXSkgKiAoMSAtIHBlcmMpO1xuICAgIHBNYXRyaXgudHJhbnNsYXRlKHRyYW5zZm9ybS5wLnZbMF0gKiBkaXIgKiBwZXJjLCB0cmFuc2Zvcm0ucC52WzFdICogZGlyICogcGVyYywgdHJhbnNmb3JtLnAudlsyXSk7XG4gICAgck1hdHJpeC50cmFuc2xhdGUoLXRyYW5zZm9ybS5hLnZbMF0sIC10cmFuc2Zvcm0uYS52WzFdLCB0cmFuc2Zvcm0uYS52WzJdKTtcbiAgICByTWF0cml4LnJvdGF0ZSgtdHJhbnNmb3JtLnIudiAqIGRpciAqIHBlcmMpO1xuICAgIHJNYXRyaXgudHJhbnNsYXRlKHRyYW5zZm9ybS5hLnZbMF0sIHRyYW5zZm9ybS5hLnZbMV0sIHRyYW5zZm9ybS5hLnZbMl0pO1xuICAgIHNNYXRyaXgudHJhbnNsYXRlKC10cmFuc2Zvcm0uYS52WzBdLCAtdHJhbnNmb3JtLmEudlsxXSwgdHJhbnNmb3JtLmEudlsyXSk7XG4gICAgc01hdHJpeC5zY2FsZShpbnYgPyAxIC8gc2NhbGVYIDogc2NhbGVYLCBpbnYgPyAxIC8gc2NhbGVZIDogc2NhbGVZKTtcbiAgICBzTWF0cml4LnRyYW5zbGF0ZSh0cmFuc2Zvcm0uYS52WzBdLCB0cmFuc2Zvcm0uYS52WzFdLCB0cmFuc2Zvcm0uYS52WzJdKTtcbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGVsZW0sIGFyciwgcG9zLCBlbGVtc0RhdGEpIHtcbiAgICB0aGlzLmVsZW0gPSBlbGVtO1xuICAgIHRoaXMuYXJyID0gYXJyO1xuICAgIHRoaXMucG9zID0gcG9zO1xuICAgIHRoaXMuZWxlbXNEYXRhID0gZWxlbXNEYXRhO1xuICAgIHRoaXMuX2N1cnJlbnRDb3BpZXMgPSAwO1xuICAgIHRoaXMuX2VsZW1lbnRzID0gW107XG4gICAgdGhpcy5fZ3JvdXBzID0gW107XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgIHRoaXMuaW5pdE1vZGlmaWVyUHJvcGVydGllcyhlbGVtLCBhcnJbcG9zXSk7XG5cbiAgICB3aGlsZSAocG9zID4gMCkge1xuICAgICAgcG9zIC09IDE7IC8vIHRoaXMuX2VsZW1lbnRzLnVuc2hpZnQoYXJyLnNwbGljZShwb3MsMSlbMF0pO1xuXG4gICAgICB0aGlzLl9lbGVtZW50cy51bnNoaWZ0KGFycltwb3NdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgIHRoaXMuayA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgfVxuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLnJlc2V0RWxlbWVudHMgPSBmdW5jdGlvbiAoZWxlbWVudHMpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBlbGVtZW50c1tpXS5fcHJvY2Vzc2VkID0gZmFsc2U7XG5cbiAgICAgIGlmIChlbGVtZW50c1tpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICB0aGlzLnJlc2V0RWxlbWVudHMoZWxlbWVudHNbaV0uaXQpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBSZXBlYXRlck1vZGlmaWVyLnByb3RvdHlwZS5jbG9uZUVsZW1lbnRzID0gZnVuY3Rpb24gKGVsZW1lbnRzKSB7XG4gICAgdmFyIG5ld0VsZW1lbnRzID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShlbGVtZW50cykpO1xuICAgIHRoaXMucmVzZXRFbGVtZW50cyhuZXdFbGVtZW50cyk7XG4gICAgcmV0dXJuIG5ld0VsZW1lbnRzO1xuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmNoYW5nZUdyb3VwUmVuZGVyID0gZnVuY3Rpb24gKGVsZW1lbnRzLCByZW5kZXJGbGFnKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZWxlbWVudHNbaV0uX3JlbmRlciA9IHJlbmRlckZsYWc7XG5cbiAgICAgIGlmIChlbGVtZW50c1tpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICB0aGlzLmNoYW5nZUdyb3VwUmVuZGVyKGVsZW1lbnRzW2ldLml0LCByZW5kZXJGbGFnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgUmVwZWF0ZXJNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIGl0ZW1zO1xuICAgIHZhciBpdGVtc1RyYW5zZm9ybTtcbiAgICB2YXIgaTtcbiAgICB2YXIgZGlyO1xuICAgIHZhciBjb250O1xuICAgIHZhciBoYXNSZWxvYWRlZCA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuX21kZiB8fCBfaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgY29waWVzID0gTWF0aC5jZWlsKHRoaXMuYy52KTtcblxuICAgICAgaWYgKHRoaXMuX2dyb3Vwcy5sZW5ndGggPCBjb3BpZXMpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX2dyb3Vwcy5sZW5ndGggPCBjb3BpZXMpIHtcbiAgICAgICAgICB2YXIgZ3JvdXAgPSB7XG4gICAgICAgICAgICBpdDogdGhpcy5jbG9uZUVsZW1lbnRzKHRoaXMuX2VsZW1lbnRzKSxcbiAgICAgICAgICAgIHR5OiAnZ3InXG4gICAgICAgICAgfTtcbiAgICAgICAgICBncm91cC5pdC5wdXNoKHtcbiAgICAgICAgICAgIGE6IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDEsXG4gICAgICAgICAgICAgIGs6IFswLCAwXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5tOiAnVHJhbnNmb3JtJyxcbiAgICAgICAgICAgIG86IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDcsXG4gICAgICAgICAgICAgIGs6IDEwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHA6IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDIsXG4gICAgICAgICAgICAgIGs6IFswLCAwXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHI6IHtcbiAgICAgICAgICAgICAgYTogMSxcbiAgICAgICAgICAgICAgaXg6IDYsXG4gICAgICAgICAgICAgIGs6IFt7XG4gICAgICAgICAgICAgICAgczogMCxcbiAgICAgICAgICAgICAgICBlOiAwLFxuICAgICAgICAgICAgICAgIHQ6IDBcbiAgICAgICAgICAgICAgfSwge1xuICAgICAgICAgICAgICAgIHM6IDAsXG4gICAgICAgICAgICAgICAgZTogMCxcbiAgICAgICAgICAgICAgICB0OiAxXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgczoge1xuICAgICAgICAgICAgICBhOiAwLFxuICAgICAgICAgICAgICBpeDogMyxcbiAgICAgICAgICAgICAgazogWzEwMCwgMTAwXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNhOiB7XG4gICAgICAgICAgICAgIGE6IDAsXG4gICAgICAgICAgICAgIGl4OiA1LFxuICAgICAgICAgICAgICBrOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2s6IHtcbiAgICAgICAgICAgICAgYTogMCxcbiAgICAgICAgICAgICAgaXg6IDQsXG4gICAgICAgICAgICAgIGs6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0eTogJ3RyJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuYXJyLnNwbGljZSgwLCAwLCBncm91cCk7XG5cbiAgICAgICAgICB0aGlzLl9ncm91cHMuc3BsaWNlKDAsIDAsIGdyb3VwKTtcblxuICAgICAgICAgIHRoaXMuX2N1cnJlbnRDb3BpZXMgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZWxlbS5yZWxvYWRTaGFwZXMoKTtcbiAgICAgICAgaGFzUmVsb2FkZWQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBjb250ID0gMDtcbiAgICAgIHZhciByZW5kZXJGbGFnO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDw9IHRoaXMuX2dyb3Vwcy5sZW5ndGggLSAxOyBpICs9IDEpIHtcbiAgICAgICAgcmVuZGVyRmxhZyA9IGNvbnQgPCBjb3BpZXM7XG4gICAgICAgIHRoaXMuX2dyb3Vwc1tpXS5fcmVuZGVyID0gcmVuZGVyRmxhZztcbiAgICAgICAgdGhpcy5jaGFuZ2VHcm91cFJlbmRlcih0aGlzLl9ncm91cHNbaV0uaXQsIHJlbmRlckZsYWcpO1xuXG4gICAgICAgIGlmICghcmVuZGVyRmxhZykge1xuICAgICAgICAgIHZhciBlbGVtcyA9IHRoaXMuZWxlbXNEYXRhW2ldLml0O1xuICAgICAgICAgIHZhciB0cmFuc2Zvcm1EYXRhID0gZWxlbXNbZWxlbXMubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgICBpZiAodHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AudiAhPT0gMCkge1xuICAgICAgICAgICAgdHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AuX21kZiA9IHRydWU7XG4gICAgICAgICAgICB0cmFuc2Zvcm1EYXRhLnRyYW5zZm9ybS5vcC52ID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdHJhbnNmb3JtRGF0YS50cmFuc2Zvcm0ub3AuX21kZiA9IGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnQgKz0gMTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5fY3VycmVudENvcGllcyA9IGNvcGllczsgLy8vIC9cblxuICAgICAgdmFyIG9mZnNldCA9IHRoaXMuby52O1xuICAgICAgdmFyIG9mZnNldE1vZHVsbyA9IG9mZnNldCAlIDE7XG4gICAgICB2YXIgcm91bmRPZmZzZXQgPSBvZmZzZXQgPiAwID8gTWF0aC5mbG9vcihvZmZzZXQpIDogTWF0aC5jZWlsKG9mZnNldCk7XG4gICAgICB2YXIgcFByb3BzID0gdGhpcy5wTWF0cml4LnByb3BzO1xuICAgICAgdmFyIHJQcm9wcyA9IHRoaXMuck1hdHJpeC5wcm9wcztcbiAgICAgIHZhciBzUHJvcHMgPSB0aGlzLnNNYXRyaXgucHJvcHM7XG4gICAgICB0aGlzLnBNYXRyaXgucmVzZXQoKTtcbiAgICAgIHRoaXMuck1hdHJpeC5yZXNldCgpO1xuICAgICAgdGhpcy5zTWF0cml4LnJlc2V0KCk7XG4gICAgICB0aGlzLnRNYXRyaXgucmVzZXQoKTtcbiAgICAgIHRoaXMubWF0cml4LnJlc2V0KCk7XG4gICAgICB2YXIgaXRlcmF0aW9uID0gMDtcblxuICAgICAgaWYgKG9mZnNldCA+IDApIHtcbiAgICAgICAgd2hpbGUgKGl0ZXJhdGlvbiA8IHJvdW5kT2Zmc2V0KSB7XG4gICAgICAgICAgdGhpcy5hcHBseVRyYW5zZm9ybXModGhpcy5wTWF0cml4LCB0aGlzLnJNYXRyaXgsIHRoaXMuc01hdHJpeCwgdGhpcy50ciwgMSwgZmFsc2UpO1xuICAgICAgICAgIGl0ZXJhdGlvbiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9mZnNldE1vZHVsbykge1xuICAgICAgICAgIHRoaXMuYXBwbHlUcmFuc2Zvcm1zKHRoaXMucE1hdHJpeCwgdGhpcy5yTWF0cml4LCB0aGlzLnNNYXRyaXgsIHRoaXMudHIsIG9mZnNldE1vZHVsbywgZmFsc2UpO1xuICAgICAgICAgIGl0ZXJhdGlvbiArPSBvZmZzZXRNb2R1bG87XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAob2Zmc2V0IDwgMCkge1xuICAgICAgICB3aGlsZSAoaXRlcmF0aW9uID4gcm91bmRPZmZzZXQpIHtcbiAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsIHRoaXMuck1hdHJpeCwgdGhpcy5zTWF0cml4LCB0aGlzLnRyLCAxLCB0cnVlKTtcbiAgICAgICAgICBpdGVyYXRpb24gLT0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvZmZzZXRNb2R1bG8pIHtcbiAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsIHRoaXMuck1hdHJpeCwgdGhpcy5zTWF0cml4LCB0aGlzLnRyLCAtb2Zmc2V0TW9kdWxvLCB0cnVlKTtcbiAgICAgICAgICBpdGVyYXRpb24gLT0gb2Zmc2V0TW9kdWxvO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGkgPSB0aGlzLmRhdGEubSA9PT0gMSA/IDAgOiB0aGlzLl9jdXJyZW50Q29waWVzIC0gMTtcbiAgICAgIGRpciA9IHRoaXMuZGF0YS5tID09PSAxID8gMSA6IC0xO1xuICAgICAgY29udCA9IHRoaXMuX2N1cnJlbnRDb3BpZXM7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBqTGVuO1xuXG4gICAgICB3aGlsZSAoY29udCkge1xuICAgICAgICBpdGVtcyA9IHRoaXMuZWxlbXNEYXRhW2ldLml0O1xuICAgICAgICBpdGVtc1RyYW5zZm9ybSA9IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5tUHJvcHMudi5wcm9wcztcbiAgICAgICAgakxlbiA9IGl0ZW1zVHJhbnNmb3JtLmxlbmd0aDtcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm1Qcm9wcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm9wLl9tZGYgPSB0cnVlO1xuICAgICAgICBpdGVtc1tpdGVtcy5sZW5ndGggLSAxXS50cmFuc2Zvcm0ub3AudiA9IHRoaXMuX2N1cnJlbnRDb3BpZXMgPT09IDEgPyB0aGlzLnNvLnYgOiB0aGlzLnNvLnYgKyAodGhpcy5lby52IC0gdGhpcy5zby52KSAqIChpIC8gKHRoaXMuX2N1cnJlbnRDb3BpZXMgLSAxKSk7XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbiAhPT0gMCkge1xuICAgICAgICAgIGlmIChpICE9PSAwICYmIGRpciA9PT0gMSB8fCBpICE9PSB0aGlzLl9jdXJyZW50Q29waWVzIC0gMSAmJiBkaXIgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFwcGx5VHJhbnNmb3Jtcyh0aGlzLnBNYXRyaXgsIHRoaXMuck1hdHJpeCwgdGhpcy5zTWF0cml4LCB0aGlzLnRyLCAxLCBmYWxzZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5tYXRyaXgudHJhbnNmb3JtKHJQcm9wc1swXSwgclByb3BzWzFdLCByUHJvcHNbMl0sIHJQcm9wc1szXSwgclByb3BzWzRdLCByUHJvcHNbNV0sIHJQcm9wc1s2XSwgclByb3BzWzddLCByUHJvcHNbOF0sIHJQcm9wc1s5XSwgclByb3BzWzEwXSwgclByb3BzWzExXSwgclByb3BzWzEyXSwgclByb3BzWzEzXSwgclByb3BzWzE0XSwgclByb3BzWzE1XSk7XG4gICAgICAgICAgdGhpcy5tYXRyaXgudHJhbnNmb3JtKHNQcm9wc1swXSwgc1Byb3BzWzFdLCBzUHJvcHNbMl0sIHNQcm9wc1szXSwgc1Byb3BzWzRdLCBzUHJvcHNbNV0sIHNQcm9wc1s2XSwgc1Byb3BzWzddLCBzUHJvcHNbOF0sIHNQcm9wc1s5XSwgc1Byb3BzWzEwXSwgc1Byb3BzWzExXSwgc1Byb3BzWzEyXSwgc1Byb3BzWzEzXSwgc1Byb3BzWzE0XSwgc1Byb3BzWzE1XSk7XG4gICAgICAgICAgdGhpcy5tYXRyaXgudHJhbnNmb3JtKHBQcm9wc1swXSwgcFByb3BzWzFdLCBwUHJvcHNbMl0sIHBQcm9wc1szXSwgcFByb3BzWzRdLCBwUHJvcHNbNV0sIHBQcm9wc1s2XSwgcFByb3BzWzddLCBwUHJvcHNbOF0sIHBQcm9wc1s5XSwgcFByb3BzWzEwXSwgcFByb3BzWzExXSwgcFByb3BzWzEyXSwgcFByb3BzWzEzXSwgcFByb3BzWzE0XSwgcFByb3BzWzE1XSk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBpdGVtc1RyYW5zZm9ybVtqXSA9IHRoaXMubWF0cml4LnByb3BzW2pdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubWF0cml4LnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5tYXRyaXgucmVzZXQoKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGl0ZW1zVHJhbnNmb3JtW2pdID0gdGhpcy5tYXRyaXgucHJvcHNbal07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaXRlcmF0aW9uICs9IDE7XG4gICAgICAgIGNvbnQgLT0gMTtcbiAgICAgICAgaSArPSBkaXI7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnQgPSB0aGlzLl9jdXJyZW50Q29waWVzO1xuICAgICAgaSA9IDA7XG4gICAgICBkaXIgPSAxO1xuXG4gICAgICB3aGlsZSAoY29udCkge1xuICAgICAgICBpdGVtcyA9IHRoaXMuZWxlbXNEYXRhW2ldLml0O1xuICAgICAgICBpdGVtc1RyYW5zZm9ybSA9IGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5tUHJvcHMudi5wcm9wcztcbiAgICAgICAgaXRlbXNbaXRlbXMubGVuZ3RoIC0gMV0udHJhbnNmb3JtLm1Qcm9wcy5fbWRmID0gZmFsc2U7XG4gICAgICAgIGl0ZW1zW2l0ZW1zLmxlbmd0aCAtIDFdLnRyYW5zZm9ybS5vcC5fbWRmID0gZmFsc2U7XG4gICAgICAgIGNvbnQgLT0gMTtcbiAgICAgICAgaSArPSBkaXI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGhhc1JlbG9hZGVkO1xuICB9O1xuXG4gIFJlcGVhdGVyTW9kaWZpZXIucHJvdG90eXBlLmFkZFNoYXBlID0gZnVuY3Rpb24gKCkge307XG5cbiAgZnVuY3Rpb24gUm91bmRDb3JuZXJzTW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIFJvdW5kQ29ybmVyc01vZGlmaWVyKTtcblxuICBSb3VuZENvcm5lcnNNb2RpZmllci5wcm90b3R5cGUuaW5pdE1vZGlmaWVyUHJvcGVydGllcyA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5nZXRWYWx1ZSA9IHRoaXMucHJvY2Vzc0tleXM7XG4gICAgdGhpcy5yZCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9ICEhdGhpcy5yZC5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoO1xuICB9O1xuXG4gIFJvdW5kQ29ybmVyc01vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzUGF0aCA9IGZ1bmN0aW9uIChwYXRoLCByb3VuZCkge1xuICAgIHZhciBjbG9uZWRQYXRoID0gc2hhcGVQb29sLm5ld0VsZW1lbnQoKTtcbiAgICBjbG9uZWRQYXRoLmMgPSBwYXRoLmM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHBhdGguX2xlbmd0aDtcbiAgICB2YXIgY3VycmVudFY7XG4gICAgdmFyIGN1cnJlbnRJO1xuICAgIHZhciBjdXJyZW50TztcbiAgICB2YXIgY2xvc2VyVjtcbiAgICB2YXIgZGlzdGFuY2U7XG4gICAgdmFyIG5ld1Bvc1BlcmM7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgdlg7XG4gICAgdmFyIHZZO1xuICAgIHZhciBvWDtcbiAgICB2YXIgb1k7XG4gICAgdmFyIGlYO1xuICAgIHZhciBpWTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY3VycmVudFYgPSBwYXRoLnZbaV07XG4gICAgICBjdXJyZW50TyA9IHBhdGgub1tpXTtcbiAgICAgIGN1cnJlbnRJID0gcGF0aC5pW2ldO1xuXG4gICAgICBpZiAoY3VycmVudFZbMF0gPT09IGN1cnJlbnRPWzBdICYmIGN1cnJlbnRWWzFdID09PSBjdXJyZW50T1sxXSAmJiBjdXJyZW50VlswXSA9PT0gY3VycmVudElbMF0gJiYgY3VycmVudFZbMV0gPT09IGN1cnJlbnRJWzFdKSB7XG4gICAgICAgIGlmICgoaSA9PT0gMCB8fCBpID09PSBsZW4gLSAxKSAmJiAhcGF0aC5jKSB7XG4gICAgICAgICAgY2xvbmVkUGF0aC5zZXRUcmlwbGVBdChjdXJyZW50VlswXSwgY3VycmVudFZbMV0sIGN1cnJlbnRPWzBdLCBjdXJyZW50T1sxXSwgY3VycmVudElbMF0sIGN1cnJlbnRJWzFdLCBpbmRleCk7XG4gICAgICAgICAgLyogY2xvbmVkUGF0aC52W2luZGV4XSA9IGN1cnJlbnRWO1xyXG4gICAgICAgICAgICAgICAgICBjbG9uZWRQYXRoLm9baW5kZXhdID0gY3VycmVudE87XHJcbiAgICAgICAgICAgICAgICAgIGNsb25lZFBhdGguaVtpbmRleF0gPSBjdXJyZW50STsgKi9cblxuICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgIGNsb3NlclYgPSBwYXRoLnZbbGVuIC0gMV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNsb3NlclYgPSBwYXRoLnZbaSAtIDFdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5zcXJ0KE1hdGgucG93KGN1cnJlbnRWWzBdIC0gY2xvc2VyVlswXSwgMikgKyBNYXRoLnBvdyhjdXJyZW50VlsxXSAtIGNsb3NlclZbMV0sIDIpKTtcbiAgICAgICAgICBuZXdQb3NQZXJjID0gZGlzdGFuY2UgPyBNYXRoLm1pbihkaXN0YW5jZSAvIDIsIHJvdW5kKSAvIGRpc3RhbmNlIDogMDtcbiAgICAgICAgICBpWCA9IGN1cnJlbnRWWzBdICsgKGNsb3NlclZbMF0gLSBjdXJyZW50VlswXSkgKiBuZXdQb3NQZXJjO1xuICAgICAgICAgIHZYID0gaVg7XG4gICAgICAgICAgaVkgPSBjdXJyZW50VlsxXSAtIChjdXJyZW50VlsxXSAtIGNsb3NlclZbMV0pICogbmV3UG9zUGVyYztcbiAgICAgICAgICB2WSA9IGlZO1xuICAgICAgICAgIG9YID0gdlggLSAodlggLSBjdXJyZW50VlswXSkgKiByb3VuZENvcm5lcjtcbiAgICAgICAgICBvWSA9IHZZIC0gKHZZIC0gY3VycmVudFZbMV0pICogcm91bmRDb3JuZXI7XG4gICAgICAgICAgY2xvbmVkUGF0aC5zZXRUcmlwbGVBdCh2WCwgdlksIG9YLCBvWSwgaVgsIGlZLCBpbmRleCk7XG4gICAgICAgICAgaW5kZXggKz0gMTtcblxuICAgICAgICAgIGlmIChpID09PSBsZW4gLSAxKSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52WzBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbG9zZXJWID0gcGF0aC52W2kgKyAxXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguc3FydChNYXRoLnBvdyhjdXJyZW50VlswXSAtIGNsb3NlclZbMF0sIDIpICsgTWF0aC5wb3coY3VycmVudFZbMV0gLSBjbG9zZXJWWzFdLCAyKSk7XG4gICAgICAgICAgbmV3UG9zUGVyYyA9IGRpc3RhbmNlID8gTWF0aC5taW4oZGlzdGFuY2UgLyAyLCByb3VuZCkgLyBkaXN0YW5jZSA6IDA7XG4gICAgICAgICAgb1ggPSBjdXJyZW50VlswXSArIChjbG9zZXJWWzBdIC0gY3VycmVudFZbMF0pICogbmV3UG9zUGVyYztcbiAgICAgICAgICB2WCA9IG9YO1xuICAgICAgICAgIG9ZID0gY3VycmVudFZbMV0gKyAoY2xvc2VyVlsxXSAtIGN1cnJlbnRWWzFdKSAqIG5ld1Bvc1BlcmM7XG4gICAgICAgICAgdlkgPSBvWTtcbiAgICAgICAgICBpWCA9IHZYIC0gKHZYIC0gY3VycmVudFZbMF0pICogcm91bmRDb3JuZXI7XG4gICAgICAgICAgaVkgPSB2WSAtICh2WSAtIGN1cnJlbnRWWzFdKSAqIHJvdW5kQ29ybmVyO1xuICAgICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQodlgsIHZZLCBvWCwgb1ksIGlYLCBpWSwgaW5kZXgpO1xuICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb25lZFBhdGguc2V0VHJpcGxlQXQocGF0aC52W2ldWzBdLCBwYXRoLnZbaV1bMV0sIHBhdGgub1tpXVswXSwgcGF0aC5vW2ldWzFdLCBwYXRoLmlbaV1bMF0sIHBhdGguaVtpXVsxXSwgaW5kZXgpO1xuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZWRQYXRoO1xuICB9O1xuXG4gIFJvdW5kQ29ybmVyc01vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzU2hhcGVzID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgc2hhcGVQYXRocztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciByZCA9IHRoaXMucmQudjtcblxuICAgIGlmIChyZCAhPT0gMCkge1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAoISghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSwgcmQpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaGFwZURhdGEuc2hhcGUucGF0aHMgPSBzaGFwZURhdGEubG9jYWxTaGFwZUNvbGxlY3Rpb247XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIGZsb2F0RXF1YWwoYSwgYikge1xuICAgIHJldHVybiBNYXRoLmFicyhhIC0gYikgKiAxMDAwMDAgPD0gTWF0aC5taW4oTWF0aC5hYnMoYSksIE1hdGguYWJzKGIpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsb2F0WmVybyhmKSB7XG4gICAgcmV0dXJuIE1hdGguYWJzKGYpIDw9IDAuMDAwMDE7XG4gIH1cblxuICBmdW5jdGlvbiBsZXJwKHAwLCBwMSwgYW1vdW50KSB7XG4gICAgcmV0dXJuIHAwICogKDEgLSBhbW91bnQpICsgcDEgKiBhbW91bnQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZXJwUG9pbnQocDAsIHAxLCBhbW91bnQpIHtcbiAgICByZXR1cm4gW2xlcnAocDBbMF0sIHAxWzBdLCBhbW91bnQpLCBsZXJwKHAwWzFdLCBwMVsxXSwgYW1vdW50KV07XG4gIH1cblxuICBmdW5jdGlvbiBxdWFkUm9vdHMoYSwgYiwgYykge1xuICAgIC8vIG5vIHJvb3RcbiAgICBpZiAoYSA9PT0gMCkgcmV0dXJuIFtdO1xuICAgIHZhciBzID0gYiAqIGIgLSA0ICogYSAqIGM7IC8vIENvbXBsZXggcm9vdHNcblxuICAgIGlmIChzIDwgMCkgcmV0dXJuIFtdO1xuICAgIHZhciBzaW5nbGVSb290ID0gLWIgLyAoMiAqIGEpOyAvLyAxIHJvb3RcblxuICAgIGlmIChzID09PSAwKSByZXR1cm4gW3NpbmdsZVJvb3RdO1xuICAgIHZhciBkZWx0YSA9IE1hdGguc3FydChzKSAvICgyICogYSk7IC8vIDIgcm9vdHNcblxuICAgIHJldHVybiBbc2luZ2xlUm9vdCAtIGRlbHRhLCBzaW5nbGVSb290ICsgZGVsdGFdO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9seW5vbWlhbENvZWZmaWNpZW50cyhwMCwgcDEsIHAyLCBwMykge1xuICAgIHJldHVybiBbLXAwICsgMyAqIHAxIC0gMyAqIHAyICsgcDMsIDMgKiBwMCAtIDYgKiBwMSArIDMgKiBwMiwgLTMgKiBwMCArIDMgKiBwMSwgcDBdO1xuICB9XG5cbiAgZnVuY3Rpb24gc2luZ2xlUG9pbnQocCkge1xuICAgIHJldHVybiBuZXcgUG9seW5vbWlhbEJlemllcihwLCBwLCBwLCBwLCBmYWxzZSk7XG4gIH1cblxuICBmdW5jdGlvbiBQb2x5bm9taWFsQmV6aWVyKHAwLCBwMSwgcDIsIHAzLCBsaW5lYXJpemUpIHtcbiAgICBpZiAobGluZWFyaXplICYmIHBvaW50RXF1YWwocDAsIHAxKSkge1xuICAgICAgcDEgPSBsZXJwUG9pbnQocDAsIHAzLCAxIC8gMyk7XG4gICAgfVxuXG4gICAgaWYgKGxpbmVhcml6ZSAmJiBwb2ludEVxdWFsKHAyLCBwMykpIHtcbiAgICAgIHAyID0gbGVycFBvaW50KHAwLCBwMywgMiAvIDMpO1xuICAgIH1cblxuICAgIHZhciBjb2VmZnggPSBwb2x5bm9taWFsQ29lZmZpY2llbnRzKHAwWzBdLCBwMVswXSwgcDJbMF0sIHAzWzBdKTtcbiAgICB2YXIgY29lZmZ5ID0gcG9seW5vbWlhbENvZWZmaWNpZW50cyhwMFsxXSwgcDFbMV0sIHAyWzFdLCBwM1sxXSk7XG4gICAgdGhpcy5hID0gW2NvZWZmeFswXSwgY29lZmZ5WzBdXTtcbiAgICB0aGlzLmIgPSBbY29lZmZ4WzFdLCBjb2VmZnlbMV1dO1xuICAgIHRoaXMuYyA9IFtjb2VmZnhbMl0sIGNvZWZmeVsyXV07XG4gICAgdGhpcy5kID0gW2NvZWZmeFszXSwgY29lZmZ5WzNdXTtcbiAgICB0aGlzLnBvaW50cyA9IFtwMCwgcDEsIHAyLCBwM107XG4gIH1cblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5wb2ludCA9IGZ1bmN0aW9uICh0KSB7XG4gICAgcmV0dXJuIFsoKHRoaXMuYVswXSAqIHQgKyB0aGlzLmJbMF0pICogdCArIHRoaXMuY1swXSkgKiB0ICsgdGhpcy5kWzBdLCAoKHRoaXMuYVsxXSAqIHQgKyB0aGlzLmJbMV0pICogdCArIHRoaXMuY1sxXSkgKiB0ICsgdGhpcy5kWzFdXTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5kZXJpdmF0aXZlID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4gWygzICogdCAqIHRoaXMuYVswXSArIDIgKiB0aGlzLmJbMF0pICogdCArIHRoaXMuY1swXSwgKDMgKiB0ICogdGhpcy5hWzFdICsgMiAqIHRoaXMuYlsxXSkgKiB0ICsgdGhpcy5jWzFdXTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS50YW5nZW50QW5nbGUgPSBmdW5jdGlvbiAodCkge1xuICAgIHZhciBwID0gdGhpcy5kZXJpdmF0aXZlKHQpO1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHBbMV0sIHBbMF0pO1xuICB9O1xuXG4gIFBvbHlub21pYWxCZXppZXIucHJvdG90eXBlLm5vcm1hbEFuZ2xlID0gZnVuY3Rpb24gKHQpIHtcbiAgICB2YXIgcCA9IHRoaXMuZGVyaXZhdGl2ZSh0KTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMihwWzBdLCBwWzFdKTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5pbmZsZWN0aW9uUG9pbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBkZW5vbSA9IHRoaXMuYVsxXSAqIHRoaXMuYlswXSAtIHRoaXMuYVswXSAqIHRoaXMuYlsxXTtcbiAgICBpZiAoZmxvYXRaZXJvKGRlbm9tKSkgcmV0dXJuIFtdO1xuICAgIHZhciB0Y3VzcCA9IC0wLjUgKiAodGhpcy5hWzFdICogdGhpcy5jWzBdIC0gdGhpcy5hWzBdICogdGhpcy5jWzFdKSAvIGRlbm9tO1xuICAgIHZhciBzcXVhcmUgPSB0Y3VzcCAqIHRjdXNwIC0gMSAvIDMgKiAodGhpcy5iWzFdICogdGhpcy5jWzBdIC0gdGhpcy5iWzBdICogdGhpcy5jWzFdKSAvIGRlbm9tO1xuICAgIGlmIChzcXVhcmUgPCAwKSByZXR1cm4gW107XG4gICAgdmFyIHJvb3QgPSBNYXRoLnNxcnQoc3F1YXJlKTtcblxuICAgIGlmIChmbG9hdFplcm8ocm9vdCkpIHtcbiAgICAgIGlmIChyb290ID4gMCAmJiByb290IDwgMSkgcmV0dXJuIFt0Y3VzcF07XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIFt0Y3VzcCAtIHJvb3QsIHRjdXNwICsgcm9vdF0uZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gciA+IDAgJiYgciA8IDE7XG4gICAgfSk7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuc3BsaXQgPSBmdW5jdGlvbiAodCkge1xuICAgIGlmICh0IDw9IDApIHJldHVybiBbc2luZ2xlUG9pbnQodGhpcy5wb2ludHNbMF0pLCB0aGlzXTtcbiAgICBpZiAodCA+PSAxKSByZXR1cm4gW3RoaXMsIHNpbmdsZVBvaW50KHRoaXMucG9pbnRzW3RoaXMucG9pbnRzLmxlbmd0aCAtIDFdKV07XG4gICAgdmFyIHAxMCA9IGxlcnBQb2ludCh0aGlzLnBvaW50c1swXSwgdGhpcy5wb2ludHNbMV0sIHQpO1xuICAgIHZhciBwMTEgPSBsZXJwUG9pbnQodGhpcy5wb2ludHNbMV0sIHRoaXMucG9pbnRzWzJdLCB0KTtcbiAgICB2YXIgcDEyID0gbGVycFBvaW50KHRoaXMucG9pbnRzWzJdLCB0aGlzLnBvaW50c1szXSwgdCk7XG4gICAgdmFyIHAyMCA9IGxlcnBQb2ludChwMTAsIHAxMSwgdCk7XG4gICAgdmFyIHAyMSA9IGxlcnBQb2ludChwMTEsIHAxMiwgdCk7XG4gICAgdmFyIHAzID0gbGVycFBvaW50KHAyMCwgcDIxLCB0KTtcbiAgICByZXR1cm4gW25ldyBQb2x5bm9taWFsQmV6aWVyKHRoaXMucG9pbnRzWzBdLCBwMTAsIHAyMCwgcDMsIHRydWUpLCBuZXcgUG9seW5vbWlhbEJlemllcihwMywgcDIxLCBwMTIsIHRoaXMucG9pbnRzWzNdLCB0cnVlKV07XG4gIH07XG5cbiAgZnVuY3Rpb24gZXh0cmVtYShiZXosIGNvbXApIHtcbiAgICB2YXIgbWluID0gYmV6LnBvaW50c1swXVtjb21wXTtcbiAgICB2YXIgbWF4ID0gYmV6LnBvaW50c1tiZXoucG9pbnRzLmxlbmd0aCAtIDFdW2NvbXBdO1xuXG4gICAgaWYgKG1pbiA+IG1heCkge1xuICAgICAgdmFyIGUgPSBtYXg7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSBlO1xuICAgIH0gLy8gRGVyaXZhdGl2ZSByb290cyB0byBmaW5kIG1pbi9tYXhcblxuXG4gICAgdmFyIGYgPSBxdWFkUm9vdHMoMyAqIGJlei5hW2NvbXBdLCAyICogYmV6LmJbY29tcF0sIGJlei5jW2NvbXBdKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGZbaV0gPiAwICYmIGZbaV0gPCAxKSB7XG4gICAgICAgIHZhciB2YWwgPSBiZXoucG9pbnQoZltpXSlbY29tcF07XG4gICAgICAgIGlmICh2YWwgPCBtaW4pIG1pbiA9IHZhbDtlbHNlIGlmICh2YWwgPiBtYXgpIG1heCA9IHZhbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbWluOiBtaW4sXG4gICAgICBtYXg6IG1heFxuICAgIH07XG4gIH1cblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5ib3VuZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IGV4dHJlbWEodGhpcywgMCksXG4gICAgICB5OiBleHRyZW1hKHRoaXMsIDEpXG4gICAgfTtcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnByb3RvdHlwZS5ib3VuZGluZ0JveCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYm91bmRzID0gdGhpcy5ib3VuZHMoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbGVmdDogYm91bmRzLngubWluLFxuICAgICAgcmlnaHQ6IGJvdW5kcy54Lm1heCxcbiAgICAgIHRvcDogYm91bmRzLnkubWluLFxuICAgICAgYm90dG9tOiBib3VuZHMueS5tYXgsXG4gICAgICB3aWR0aDogYm91bmRzLngubWF4IC0gYm91bmRzLngubWluLFxuICAgICAgaGVpZ2h0OiBib3VuZHMueS5tYXggLSBib3VuZHMueS5taW4sXG4gICAgICBjeDogKGJvdW5kcy54Lm1heCArIGJvdW5kcy54Lm1pbikgLyAyLFxuICAgICAgY3k6IChib3VuZHMueS5tYXggKyBib3VuZHMueS5taW4pIC8gMlxuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gaW50ZXJzZWN0RGF0YShiZXosIHQxLCB0Mikge1xuICAgIHZhciBib3ggPSBiZXouYm91bmRpbmdCb3goKTtcbiAgICByZXR1cm4ge1xuICAgICAgY3g6IGJveC5jeCxcbiAgICAgIGN5OiBib3guY3ksXG4gICAgICB3aWR0aDogYm94LndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3guaGVpZ2h0LFxuICAgICAgYmV6OiBiZXosXG4gICAgICB0OiAodDEgKyB0MikgLyAyLFxuICAgICAgdDE6IHQxLFxuICAgICAgdDI6IHQyXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwbGl0RGF0YShkYXRhKSB7XG4gICAgdmFyIHNwbGl0ID0gZGF0YS5iZXouc3BsaXQoMC41KTtcbiAgICByZXR1cm4gW2ludGVyc2VjdERhdGEoc3BsaXRbMF0sIGRhdGEudDEsIGRhdGEudCksIGludGVyc2VjdERhdGEoc3BsaXRbMV0sIGRhdGEudCwgZGF0YS50MildO1xuICB9XG5cbiAgZnVuY3Rpb24gYm94SW50ZXJzZWN0KGIxLCBiMikge1xuICAgIHJldHVybiBNYXRoLmFicyhiMS5jeCAtIGIyLmN4KSAqIDIgPCBiMS53aWR0aCArIGIyLndpZHRoICYmIE1hdGguYWJzKGIxLmN5IC0gYjIuY3kpICogMiA8IGIxLmhlaWdodCArIGIyLmhlaWdodDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGludGVyc2VjdHNJbXBsKGQxLCBkMiwgZGVwdGgsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKSB7XG4gICAgaWYgKCFib3hJbnRlcnNlY3QoZDEsIGQyKSkgcmV0dXJuO1xuXG4gICAgaWYgKGRlcHRoID49IG1heFJlY3Vyc2lvbiB8fCBkMS53aWR0aCA8PSB0b2xlcmFuY2UgJiYgZDEuaGVpZ2h0IDw9IHRvbGVyYW5jZSAmJiBkMi53aWR0aCA8PSB0b2xlcmFuY2UgJiYgZDIuaGVpZ2h0IDw9IHRvbGVyYW5jZSkge1xuICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKFtkMS50LCBkMi50XSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGQxcyA9IHNwbGl0RGF0YShkMSk7XG4gICAgdmFyIGQycyA9IHNwbGl0RGF0YShkMik7XG4gICAgaW50ZXJzZWN0c0ltcGwoZDFzWzBdLCBkMnNbMF0sIGRlcHRoICsgMSwgdG9sZXJhbmNlLCBpbnRlcnNlY3Rpb25zLCBtYXhSZWN1cnNpb24pO1xuICAgIGludGVyc2VjdHNJbXBsKGQxc1swXSwgZDJzWzFdLCBkZXB0aCArIDEsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgICBpbnRlcnNlY3RzSW1wbChkMXNbMV0sIGQyc1swXSwgZGVwdGggKyAxLCB0b2xlcmFuY2UsIGludGVyc2VjdGlvbnMsIG1heFJlY3Vyc2lvbik7XG4gICAgaW50ZXJzZWN0c0ltcGwoZDFzWzFdLCBkMnNbMV0sIGRlcHRoICsgMSwgdG9sZXJhbmNlLCBpbnRlcnNlY3Rpb25zLCBtYXhSZWN1cnNpb24pO1xuICB9XG5cbiAgUG9seW5vbWlhbEJlemllci5wcm90b3R5cGUuaW50ZXJzZWN0aW9ucyA9IGZ1bmN0aW9uIChvdGhlciwgdG9sZXJhbmNlLCBtYXhSZWN1cnNpb24pIHtcbiAgICBpZiAodG9sZXJhbmNlID09PSB1bmRlZmluZWQpIHRvbGVyYW5jZSA9IDI7XG4gICAgaWYgKG1heFJlY3Vyc2lvbiA9PT0gdW5kZWZpbmVkKSBtYXhSZWN1cnNpb24gPSA3O1xuICAgIHZhciBpbnRlcnNlY3Rpb25zID0gW107XG4gICAgaW50ZXJzZWN0c0ltcGwoaW50ZXJzZWN0RGF0YSh0aGlzLCAwLCAxKSwgaW50ZXJzZWN0RGF0YShvdGhlciwgMCwgMSksIDAsIHRvbGVyYW5jZSwgaW50ZXJzZWN0aW9ucywgbWF4UmVjdXJzaW9uKTtcbiAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcbiAgfTtcblxuICBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudCA9IGZ1bmN0aW9uIChzaGFwZVBhdGgsIGluZGV4KSB7XG4gICAgdmFyIG5leHRJbmRleCA9IChpbmRleCArIDEpICUgc2hhcGVQYXRoLmxlbmd0aCgpO1xuICAgIHJldHVybiBuZXcgUG9seW5vbWlhbEJlemllcihzaGFwZVBhdGgudltpbmRleF0sIHNoYXBlUGF0aC5vW2luZGV4XSwgc2hhcGVQYXRoLmlbbmV4dEluZGV4XSwgc2hhcGVQYXRoLnZbbmV4dEluZGV4XSwgdHJ1ZSk7XG4gIH07XG5cbiAgUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnRJbnZlcnRlZCA9IGZ1bmN0aW9uIChzaGFwZVBhdGgsIGluZGV4KSB7XG4gICAgdmFyIG5leHRJbmRleCA9IChpbmRleCArIDEpICUgc2hhcGVQYXRoLmxlbmd0aCgpO1xuICAgIHJldHVybiBuZXcgUG9seW5vbWlhbEJlemllcihzaGFwZVBhdGgudltuZXh0SW5kZXhdLCBzaGFwZVBhdGguaVtuZXh0SW5kZXhdLCBzaGFwZVBhdGgub1tpbmRleF0sIHNoYXBlUGF0aC52W2luZGV4XSwgdHJ1ZSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gY3Jvc3NQcm9kdWN0KGEsIGIpIHtcbiAgICByZXR1cm4gW2FbMV0gKiBiWzJdIC0gYVsyXSAqIGJbMV0sIGFbMl0gKiBiWzBdIC0gYVswXSAqIGJbMl0sIGFbMF0gKiBiWzFdIC0gYVsxXSAqIGJbMF1dO1xuICB9XG5cbiAgZnVuY3Rpb24gbGluZUludGVyc2VjdGlvbihzdGFydDEsIGVuZDEsIHN0YXJ0MiwgZW5kMikge1xuICAgIHZhciB2MSA9IFtzdGFydDFbMF0sIHN0YXJ0MVsxXSwgMV07XG4gICAgdmFyIHYyID0gW2VuZDFbMF0sIGVuZDFbMV0sIDFdO1xuICAgIHZhciB2MyA9IFtzdGFydDJbMF0sIHN0YXJ0MlsxXSwgMV07XG4gICAgdmFyIHY0ID0gW2VuZDJbMF0sIGVuZDJbMV0sIDFdO1xuICAgIHZhciByID0gY3Jvc3NQcm9kdWN0KGNyb3NzUHJvZHVjdCh2MSwgdjIpLCBjcm9zc1Byb2R1Y3QodjMsIHY0KSk7XG4gICAgaWYgKGZsb2F0WmVybyhyWzJdKSkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIFtyWzBdIC8gclsyXSwgclsxXSAvIHJbMl1dO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9sYXJPZmZzZXQocCwgYW5nbGUsIGxlbmd0aCkge1xuICAgIHJldHVybiBbcFswXSArIE1hdGguY29zKGFuZ2xlKSAqIGxlbmd0aCwgcFsxXSAtIE1hdGguc2luKGFuZ2xlKSAqIGxlbmd0aF07XG4gIH1cblxuICBmdW5jdGlvbiBwb2ludERpc3RhbmNlKHAxLCBwMikge1xuICAgIHJldHVybiBNYXRoLmh5cG90KHAxWzBdIC0gcDJbMF0sIHAxWzFdIC0gcDJbMV0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9pbnRFcXVhbChwMSwgcDIpIHtcbiAgICByZXR1cm4gZmxvYXRFcXVhbChwMVswXSwgcDJbMF0pICYmIGZsb2F0RXF1YWwocDFbMV0sIHAyWzFdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFppZ1phZ01vZGlmaWVyKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW1NoYXBlTW9kaWZpZXJdLCBaaWdaYWdNb2RpZmllcik7XG5cbiAgWmlnWmFnTW9kaWZpZXIucHJvdG90eXBlLmluaXRNb2RpZmllclByb3BlcnRpZXMgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSkge1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLnByb2Nlc3NLZXlzO1xuICAgIHRoaXMuYW1wbGl0dWRlID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmZyZXF1ZW5jeSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuciwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5wb2ludHNUeXBlID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5wdCwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMuYW1wbGl0dWRlLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDAgfHwgdGhpcy5mcmVxdWVuY3kuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAhPT0gMCB8fCB0aGlzLnBvaW50c1R5cGUuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aCAhPT0gMDtcbiAgfTtcblxuICBmdW5jdGlvbiBzZXRQb2ludChvdXRwdXRCZXppZXIsIHBvaW50LCBhbmdsZSwgZGlyZWN0aW9uLCBhbXBsaXR1ZGUsIG91dEFtcGxpdHVkZSwgaW5BbXBsaXR1ZGUpIHtcbiAgICB2YXIgYW5nTyA9IGFuZ2xlIC0gTWF0aC5QSSAvIDI7XG4gICAgdmFyIGFuZ0kgPSBhbmdsZSArIE1hdGguUEkgLyAyO1xuICAgIHZhciBweCA9IHBvaW50WzBdICsgTWF0aC5jb3MoYW5nbGUpICogZGlyZWN0aW9uICogYW1wbGl0dWRlO1xuICAgIHZhciBweSA9IHBvaW50WzFdIC0gTWF0aC5zaW4oYW5nbGUpICogZGlyZWN0aW9uICogYW1wbGl0dWRlO1xuICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChweCwgcHksIHB4ICsgTWF0aC5jb3MoYW5nTykgKiBvdXRBbXBsaXR1ZGUsIHB5IC0gTWF0aC5zaW4oYW5nTykgKiBvdXRBbXBsaXR1ZGUsIHB4ICsgTWF0aC5jb3MoYW5nSSkgKiBpbkFtcGxpdHVkZSwgcHkgLSBNYXRoLnNpbihhbmdJKSAqIGluQW1wbGl0dWRlLCBvdXRwdXRCZXppZXIubGVuZ3RoKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UGVycGVuZGljdWxhclZlY3RvcihwdDEsIHB0Mikge1xuICAgIHZhciB2ZWN0b3IgPSBbcHQyWzBdIC0gcHQxWzBdLCBwdDJbMV0gLSBwdDFbMV1dO1xuICAgIHZhciByb3QgPSAtTWF0aC5QSSAqIDAuNTtcbiAgICB2YXIgcm90YXRlZFZlY3RvciA9IFtNYXRoLmNvcyhyb3QpICogdmVjdG9yWzBdIC0gTWF0aC5zaW4ocm90KSAqIHZlY3RvclsxXSwgTWF0aC5zaW4ocm90KSAqIHZlY3RvclswXSArIE1hdGguY29zKHJvdCkgKiB2ZWN0b3JbMV1dO1xuICAgIHJldHVybiByb3RhdGVkVmVjdG9yO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0UHJvamVjdGluZ0FuZ2xlKHBhdGgsIGN1cikge1xuICAgIHZhciBwcmV2SW5kZXggPSBjdXIgPT09IDAgPyBwYXRoLmxlbmd0aCgpIC0gMSA6IGN1ciAtIDE7XG4gICAgdmFyIG5leHRJbmRleCA9IChjdXIgKyAxKSAlIHBhdGgubGVuZ3RoKCk7XG4gICAgdmFyIHByZXZQb2ludCA9IHBhdGgudltwcmV2SW5kZXhdO1xuICAgIHZhciBuZXh0UG9pbnQgPSBwYXRoLnZbbmV4dEluZGV4XTtcbiAgICB2YXIgcFZlY3RvciA9IGdldFBlcnBlbmRpY3VsYXJWZWN0b3IocHJldlBvaW50LCBuZXh0UG9pbnQpO1xuICAgIHJldHVybiBNYXRoLmF0YW4yKDAsIDEpIC0gTWF0aC5hdGFuMihwVmVjdG9yWzFdLCBwVmVjdG9yWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHppZ1phZ0Nvcm5lcihvdXRwdXRCZXppZXIsIHBhdGgsIGN1ciwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgZGlyZWN0aW9uKSB7XG4gICAgdmFyIGFuZ2xlID0gZ2V0UHJvamVjdGluZ0FuZ2xlKHBhdGgsIGN1cik7XG4gICAgdmFyIHBvaW50ID0gcGF0aC52W2N1ciAlIHBhdGguX2xlbmd0aF07XG4gICAgdmFyIHByZXZQb2ludCA9IHBhdGgudltjdXIgPT09IDAgPyBwYXRoLl9sZW5ndGggLSAxIDogY3VyIC0gMV07XG4gICAgdmFyIG5leHRQb2ludCA9IHBhdGgudlsoY3VyICsgMSkgJSBwYXRoLl9sZW5ndGhdO1xuICAgIHZhciBwcmV2RGlzdCA9IHBvaW50VHlwZSA9PT0gMiA/IE1hdGguc3FydChNYXRoLnBvdyhwb2ludFswXSAtIHByZXZQb2ludFswXSwgMikgKyBNYXRoLnBvdyhwb2ludFsxXSAtIHByZXZQb2ludFsxXSwgMikpIDogMDtcbiAgICB2YXIgbmV4dERpc3QgPSBwb2ludFR5cGUgPT09IDIgPyBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnRbMF0gLSBuZXh0UG9pbnRbMF0sIDIpICsgTWF0aC5wb3cocG9pbnRbMV0gLSBuZXh0UG9pbnRbMV0sIDIpKSA6IDA7XG4gICAgc2V0UG9pbnQob3V0cHV0QmV6aWVyLCBwYXRoLnZbY3VyICUgcGF0aC5fbGVuZ3RoXSwgYW5nbGUsIGRpcmVjdGlvbiwgYW1wbGl0dWRlLCBuZXh0RGlzdCAvICgoZnJlcXVlbmN5ICsgMSkgKiAyKSwgcHJldkRpc3QgLyAoKGZyZXF1ZW5jeSArIDEpICogMiksIHBvaW50VHlwZSk7XG4gIH1cblxuICBmdW5jdGlvbiB6aWdaYWdTZWdtZW50KG91dHB1dEJlemllciwgc2VnbWVudCwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgZGlyZWN0aW9uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmVxdWVuY3k7IGkgKz0gMSkge1xuICAgICAgdmFyIHQgPSAoaSArIDEpIC8gKGZyZXF1ZW5jeSArIDEpO1xuICAgICAgdmFyIGRpc3QgPSBwb2ludFR5cGUgPT09IDIgPyBNYXRoLnNxcnQoTWF0aC5wb3coc2VnbWVudC5wb2ludHNbM11bMF0gLSBzZWdtZW50LnBvaW50c1swXVswXSwgMikgKyBNYXRoLnBvdyhzZWdtZW50LnBvaW50c1szXVsxXSAtIHNlZ21lbnQucG9pbnRzWzBdWzFdLCAyKSkgOiAwO1xuICAgICAgdmFyIGFuZ2xlID0gc2VnbWVudC5ub3JtYWxBbmdsZSh0KTtcbiAgICAgIHZhciBwb2ludCA9IHNlZ21lbnQucG9pbnQodCk7XG4gICAgICBzZXRQb2ludChvdXRwdXRCZXppZXIsIHBvaW50LCBhbmdsZSwgZGlyZWN0aW9uLCBhbXBsaXR1ZGUsIGRpc3QgLyAoKGZyZXF1ZW5jeSArIDEpICogMiksIGRpc3QgLyAoKGZyZXF1ZW5jeSArIDEpICogMiksIHBvaW50VHlwZSk7XG4gICAgICBkaXJlY3Rpb24gPSAtZGlyZWN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBkaXJlY3Rpb247XG4gIH1cblxuICBaaWdaYWdNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1BhdGggPSBmdW5jdGlvbiAocGF0aCwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSkge1xuICAgIHZhciBjb3VudCA9IHBhdGguX2xlbmd0aDtcbiAgICB2YXIgY2xvbmVkUGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgY2xvbmVkUGF0aC5jID0gcGF0aC5jO1xuXG4gICAgaWYgKCFwYXRoLmMpIHtcbiAgICAgIGNvdW50IC09IDE7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50ID09PSAwKSByZXR1cm4gY2xvbmVkUGF0aDtcbiAgICB2YXIgZGlyZWN0aW9uID0gLTE7XG4gICAgdmFyIHNlZ21lbnQgPSBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudChwYXRoLCAwKTtcbiAgICB6aWdaYWdDb3JuZXIoY2xvbmVkUGF0aCwgcGF0aCwgMCwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgZGlyZWN0aW9uKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkgKz0gMSkge1xuICAgICAgZGlyZWN0aW9uID0gemlnWmFnU2VnbWVudChjbG9uZWRQYXRoLCBzZWdtZW50LCBhbXBsaXR1ZGUsIGZyZXF1ZW5jeSwgcG9pbnRUeXBlLCAtZGlyZWN0aW9uKTtcblxuICAgICAgaWYgKGkgPT09IGNvdW50IC0gMSAmJiAhcGF0aC5jKSB7XG4gICAgICAgIHNlZ21lbnQgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VnbWVudCA9IFBvbHlub21pYWxCZXppZXIuc2hhcGVTZWdtZW50KHBhdGgsIChpICsgMSkgJSBjb3VudCk7XG4gICAgICB9XG5cbiAgICAgIHppZ1phZ0Nvcm5lcihjbG9uZWRQYXRoLCBwYXRoLCBpICsgMSwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSwgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkUGF0aDtcbiAgfTtcblxuICBaaWdaYWdNb2RpZmllci5wcm90b3R5cGUucHJvY2Vzc1NoYXBlcyA9IGZ1bmN0aW9uIChfaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIHNoYXBlUGF0aHM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgYW1wbGl0dWRlID0gdGhpcy5hbXBsaXR1ZGUudjtcbiAgICB2YXIgZnJlcXVlbmN5ID0gTWF0aC5tYXgoMCwgTWF0aC5yb3VuZCh0aGlzLmZyZXF1ZW5jeS52KSk7XG4gICAgdmFyIHBvaW50VHlwZSA9IHRoaXMucG9pbnRzVHlwZS52O1xuXG4gICAgaWYgKGFtcGxpdHVkZSAhPT0gMCkge1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAoISghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSwgYW1wbGl0dWRlLCBmcmVxdWVuY3ksIHBvaW50VHlwZSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNoYXBlRGF0YS5zaGFwZS5wYXRocyA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gbGluZWFyT2Zmc2V0KHAxLCBwMiwgYW1vdW50KSB7XG4gICAgdmFyIGFuZ2xlID0gTWF0aC5hdGFuMihwMlswXSAtIHAxWzBdLCBwMlsxXSAtIHAxWzFdKTtcbiAgICByZXR1cm4gW3BvbGFyT2Zmc2V0KHAxLCBhbmdsZSwgYW1vdW50KSwgcG9sYXJPZmZzZXQocDIsIGFuZ2xlLCBhbW91bnQpXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9mZnNldFNlZ21lbnQoc2VnbWVudCwgYW1vdW50KSB7XG4gICAgdmFyIHAwO1xuICAgIHZhciBwMWE7XG4gICAgdmFyIHAxYjtcbiAgICB2YXIgcDJiO1xuICAgIHZhciBwMmE7XG4gICAgdmFyIHAzO1xuICAgIHZhciBlO1xuICAgIGUgPSBsaW5lYXJPZmZzZXQoc2VnbWVudC5wb2ludHNbMF0sIHNlZ21lbnQucG9pbnRzWzFdLCBhbW91bnQpO1xuICAgIHAwID0gZVswXTtcbiAgICBwMWEgPSBlWzFdO1xuICAgIGUgPSBsaW5lYXJPZmZzZXQoc2VnbWVudC5wb2ludHNbMV0sIHNlZ21lbnQucG9pbnRzWzJdLCBhbW91bnQpO1xuICAgIHAxYiA9IGVbMF07XG4gICAgcDJiID0gZVsxXTtcbiAgICBlID0gbGluZWFyT2Zmc2V0KHNlZ21lbnQucG9pbnRzWzJdLCBzZWdtZW50LnBvaW50c1szXSwgYW1vdW50KTtcbiAgICBwMmEgPSBlWzBdO1xuICAgIHAzID0gZVsxXTtcbiAgICB2YXIgcDEgPSBsaW5lSW50ZXJzZWN0aW9uKHAwLCBwMWEsIHAxYiwgcDJiKTtcbiAgICBpZiAocDEgPT09IG51bGwpIHAxID0gcDFhO1xuICAgIHZhciBwMiA9IGxpbmVJbnRlcnNlY3Rpb24ocDJhLCBwMywgcDFiLCBwMmIpO1xuICAgIGlmIChwMiA9PT0gbnVsbCkgcDIgPSBwMmE7XG4gICAgcmV0dXJuIG5ldyBQb2x5bm9taWFsQmV6aWVyKHAwLCBwMSwgcDIsIHAzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGpvaW5MaW5lcyhvdXRwdXRCZXppZXIsIHNlZzEsIHNlZzIsIGxpbmVKb2luLCBtaXRlckxpbWl0KSB7XG4gICAgdmFyIHAwID0gc2VnMS5wb2ludHNbM107XG4gICAgdmFyIHAxID0gc2VnMi5wb2ludHNbMF07IC8vIEJldmVsXG5cbiAgICBpZiAobGluZUpvaW4gPT09IDMpIHJldHVybiBwMDsgLy8gQ29ubmVjdGVkLCB0aGV5IGRvbid0IG5lZWQgYSBqb2ludFxuXG4gICAgaWYgKHBvaW50RXF1YWwocDAsIHAxKSkgcmV0dXJuIHAwOyAvLyBSb3VuZFxuXG4gICAgaWYgKGxpbmVKb2luID09PSAyKSB7XG4gICAgICB2YXIgYW5nbGVPdXQgPSAtc2VnMS50YW5nZW50QW5nbGUoMSk7XG4gICAgICB2YXIgYW5nbGVJbiA9IC1zZWcyLnRhbmdlbnRBbmdsZSgwKSArIE1hdGguUEk7XG4gICAgICB2YXIgY2VudGVyID0gbGluZUludGVyc2VjdGlvbihwMCwgcG9sYXJPZmZzZXQocDAsIGFuZ2xlT3V0ICsgTWF0aC5QSSAvIDIsIDEwMCksIHAxLCBwb2xhck9mZnNldChwMSwgYW5nbGVPdXQgKyBNYXRoLlBJIC8gMiwgMTAwKSk7XG4gICAgICB2YXIgcmFkaXVzID0gY2VudGVyID8gcG9pbnREaXN0YW5jZShjZW50ZXIsIHAwKSA6IHBvaW50RGlzdGFuY2UocDAsIHAxKSAvIDI7XG4gICAgICB2YXIgdGFuID0gcG9sYXJPZmZzZXQocDAsIGFuZ2xlT3V0LCAyICogcmFkaXVzICogcm91bmRDb3JuZXIpO1xuICAgICAgb3V0cHV0QmV6aWVyLnNldFhZQXQodGFuWzBdLCB0YW5bMV0sICdvJywgb3V0cHV0QmV6aWVyLmxlbmd0aCgpIC0gMSk7XG4gICAgICB0YW4gPSBwb2xhck9mZnNldChwMSwgYW5nbGVJbiwgMiAqIHJhZGl1cyAqIHJvdW5kQ29ybmVyKTtcbiAgICAgIG91dHB1dEJlemllci5zZXRUcmlwbGVBdChwMVswXSwgcDFbMV0sIHAxWzBdLCBwMVsxXSwgdGFuWzBdLCB0YW5bMV0sIG91dHB1dEJlemllci5sZW5ndGgoKSk7XG4gICAgICByZXR1cm4gcDE7XG4gICAgfSAvLyBNaXRlclxuXG5cbiAgICB2YXIgdDAgPSBwb2ludEVxdWFsKHAwLCBzZWcxLnBvaW50c1syXSkgPyBzZWcxLnBvaW50c1swXSA6IHNlZzEucG9pbnRzWzJdO1xuICAgIHZhciB0MSA9IHBvaW50RXF1YWwocDEsIHNlZzIucG9pbnRzWzFdKSA/IHNlZzIucG9pbnRzWzNdIDogc2VnMi5wb2ludHNbMV07XG4gICAgdmFyIGludGVyc2VjdGlvbiA9IGxpbmVJbnRlcnNlY3Rpb24odDAsIHAwLCBwMSwgdDEpO1xuXG4gICAgaWYgKGludGVyc2VjdGlvbiAmJiBwb2ludERpc3RhbmNlKGludGVyc2VjdGlvbiwgcDApIDwgbWl0ZXJMaW1pdCkge1xuICAgICAgb3V0cHV0QmV6aWVyLnNldFRyaXBsZUF0KGludGVyc2VjdGlvblswXSwgaW50ZXJzZWN0aW9uWzFdLCBpbnRlcnNlY3Rpb25bMF0sIGludGVyc2VjdGlvblsxXSwgaW50ZXJzZWN0aW9uWzBdLCBpbnRlcnNlY3Rpb25bMV0sIG91dHB1dEJlemllci5sZW5ndGgoKSk7XG4gICAgICByZXR1cm4gaW50ZXJzZWN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBwMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEludGVyc2VjdGlvbihhLCBiKSB7XG4gICAgdmFyIGludGVyc2VjdCA9IGEuaW50ZXJzZWN0aW9ucyhiKTtcbiAgICBpZiAoaW50ZXJzZWN0Lmxlbmd0aCAmJiBmbG9hdEVxdWFsKGludGVyc2VjdFswXVswXSwgMSkpIGludGVyc2VjdC5zaGlmdCgpO1xuICAgIGlmIChpbnRlcnNlY3QubGVuZ3RoKSByZXR1cm4gaW50ZXJzZWN0WzBdO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJ1bmVTZWdtZW50SW50ZXJzZWN0aW9uKGEsIGIpIHtcbiAgICB2YXIgb3V0YSA9IGEuc2xpY2UoKTtcbiAgICB2YXIgb3V0YiA9IGIuc2xpY2UoKTtcbiAgICB2YXIgaW50ZXJzZWN0ID0gZ2V0SW50ZXJzZWN0aW9uKGFbYS5sZW5ndGggLSAxXSwgYlswXSk7XG5cbiAgICBpZiAoaW50ZXJzZWN0KSB7XG4gICAgICBvdXRhW2EubGVuZ3RoIC0gMV0gPSBhW2EubGVuZ3RoIC0gMV0uc3BsaXQoaW50ZXJzZWN0WzBdKVswXTtcbiAgICAgIG91dGJbMF0gPSBiWzBdLnNwbGl0KGludGVyc2VjdFsxXSlbMV07XG4gICAgfVxuXG4gICAgaWYgKGEubGVuZ3RoID4gMSAmJiBiLmxlbmd0aCA+IDEpIHtcbiAgICAgIGludGVyc2VjdCA9IGdldEludGVyc2VjdGlvbihhWzBdLCBiW2IubGVuZ3RoIC0gMV0pO1xuXG4gICAgICBpZiAoaW50ZXJzZWN0KSB7XG4gICAgICAgIHJldHVybiBbW2FbMF0uc3BsaXQoaW50ZXJzZWN0WzBdKVswXV0sIFtiW2IubGVuZ3RoIC0gMV0uc3BsaXQoaW50ZXJzZWN0WzFdKVsxXV1dO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbb3V0YSwgb3V0Yl07XG4gIH1cblxuICBmdW5jdGlvbiBwcnVuZUludGVyc2VjdGlvbnMoc2VnbWVudHMpIHtcbiAgICB2YXIgZTtcblxuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGUgPSBwcnVuZVNlZ21lbnRJbnRlcnNlY3Rpb24oc2VnbWVudHNbaSAtIDFdLCBzZWdtZW50c1tpXSk7XG4gICAgICBzZWdtZW50c1tpIC0gMV0gPSBlWzBdO1xuICAgICAgc2VnbWVudHNbaV0gPSBlWzFdO1xuICAgIH1cblxuICAgIGlmIChzZWdtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICBlID0gcHJ1bmVTZWdtZW50SW50ZXJzZWN0aW9uKHNlZ21lbnRzW3NlZ21lbnRzLmxlbmd0aCAtIDFdLCBzZWdtZW50c1swXSk7XG4gICAgICBzZWdtZW50c1tzZWdtZW50cy5sZW5ndGggLSAxXSA9IGVbMF07XG4gICAgICBzZWdtZW50c1swXSA9IGVbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG5cbiAgZnVuY3Rpb24gb2Zmc2V0U2VnbWVudFNwbGl0KHNlZ21lbnQsIGFtb3VudCkge1xuICAgIC8qXHJcbiAgICAgIFdlIHNwbGl0IGVhY2ggYmV6aWVyIHNlZ21lbnQgaW50byBzbWFsbGVyIHBpZWNlcyBiYXNlZFxyXG4gICAgICBvbiBpbmZsZWN0aW9uIHBvaW50cywgdGhpcyBlbnN1cmVzIHRoZSBjb250cm9sIHBvaW50XHJcbiAgICAgIHBvbHlnb24gaXMgY29udmV4LlxyXG4gICAgICAgIChBIGN1YmljIGJlemllciBjYW4gaGF2ZSBub25lLCBvbmUsIG9yIHR3byBpbmZsZWN0aW9uIHBvaW50cylcclxuICAgICovXG4gICAgdmFyIGZsZXggPSBzZWdtZW50LmluZmxlY3Rpb25Qb2ludHMoKTtcbiAgICB2YXIgbGVmdDtcbiAgICB2YXIgcmlnaHQ7XG4gICAgdmFyIHNwbGl0O1xuICAgIHZhciBtaWQ7XG5cbiAgICBpZiAoZmxleC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBbb2Zmc2V0U2VnbWVudChzZWdtZW50LCBhbW91bnQpXTtcbiAgICB9XG5cbiAgICBpZiAoZmxleC5sZW5ndGggPT09IDEgfHwgZmxvYXRFcXVhbChmbGV4WzFdLCAxKSkge1xuICAgICAgc3BsaXQgPSBzZWdtZW50LnNwbGl0KGZsZXhbMF0pO1xuICAgICAgbGVmdCA9IHNwbGl0WzBdO1xuICAgICAgcmlnaHQgPSBzcGxpdFsxXTtcbiAgICAgIHJldHVybiBbb2Zmc2V0U2VnbWVudChsZWZ0LCBhbW91bnQpLCBvZmZzZXRTZWdtZW50KHJpZ2h0LCBhbW91bnQpXTtcbiAgICB9XG5cbiAgICBzcGxpdCA9IHNlZ21lbnQuc3BsaXQoZmxleFswXSk7XG4gICAgbGVmdCA9IHNwbGl0WzBdO1xuICAgIHZhciB0ID0gKGZsZXhbMV0gLSBmbGV4WzBdKSAvICgxIC0gZmxleFswXSk7XG4gICAgc3BsaXQgPSBzcGxpdFsxXS5zcGxpdCh0KTtcbiAgICBtaWQgPSBzcGxpdFswXTtcbiAgICByaWdodCA9IHNwbGl0WzFdO1xuICAgIHJldHVybiBbb2Zmc2V0U2VnbWVudChsZWZ0LCBhbW91bnQpLCBvZmZzZXRTZWdtZW50KG1pZCwgYW1vdW50KSwgb2Zmc2V0U2VnbWVudChyaWdodCwgYW1vdW50KV07XG4gIH1cblxuICBmdW5jdGlvbiBPZmZzZXRQYXRoTW9kaWZpZXIoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU2hhcGVNb2RpZmllcl0sIE9mZnNldFBhdGhNb2RpZmllcik7XG5cbiAgT2Zmc2V0UGF0aE1vZGlmaWVyLnByb3RvdHlwZS5pbml0TW9kaWZpZXJQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEpIHtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5wcm9jZXNzS2V5cztcbiAgICB0aGlzLmFtb3VudCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYSwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5taXRlckxpbWl0ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5tbCwgMCwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5saW5lSm9pbiA9IGRhdGEubGo7XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMuYW1vdW50LmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGggIT09IDA7XG4gIH07XG5cbiAgT2Zmc2V0UGF0aE1vZGlmaWVyLnByb3RvdHlwZS5wcm9jZXNzUGF0aCA9IGZ1bmN0aW9uIChpbnB1dEJlemllciwgYW1vdW50LCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkge1xuICAgIHZhciBvdXRwdXRCZXppZXIgPSBzaGFwZVBvb2wubmV3RWxlbWVudCgpO1xuICAgIG91dHB1dEJlemllci5jID0gaW5wdXRCZXppZXIuYztcbiAgICB2YXIgY291bnQgPSBpbnB1dEJlemllci5sZW5ndGgoKTtcblxuICAgIGlmICghaW5wdXRCZXppZXIuYykge1xuICAgICAgY291bnQgLT0gMTtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgajtcbiAgICB2YXIgc2VnbWVudDtcbiAgICB2YXIgbXVsdGlTZWdtZW50cyA9IFtdO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGNvdW50OyBpICs9IDEpIHtcbiAgICAgIHNlZ21lbnQgPSBQb2x5bm9taWFsQmV6aWVyLnNoYXBlU2VnbWVudChpbnB1dEJlemllciwgaSk7XG4gICAgICBtdWx0aVNlZ21lbnRzLnB1c2gob2Zmc2V0U2VnbWVudFNwbGl0KHNlZ21lbnQsIGFtb3VudCkpO1xuICAgIH1cblxuICAgIGlmICghaW5wdXRCZXppZXIuYykge1xuICAgICAgZm9yIChpID0gY291bnQgLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICBzZWdtZW50ID0gUG9seW5vbWlhbEJlemllci5zaGFwZVNlZ21lbnRJbnZlcnRlZChpbnB1dEJlemllciwgaSk7XG4gICAgICAgIG11bHRpU2VnbWVudHMucHVzaChvZmZzZXRTZWdtZW50U3BsaXQoc2VnbWVudCwgYW1vdW50KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbXVsdGlTZWdtZW50cyA9IHBydW5lSW50ZXJzZWN0aW9ucyhtdWx0aVNlZ21lbnRzKTsgLy8gQWRkIGJlemllciBzZWdtZW50cyB0byB0aGUgb3V0cHV0IGFuZCBhcHBseSBsaW5lIGpvaW50c1xuXG4gICAgdmFyIGxhc3RQb2ludCA9IG51bGw7XG4gICAgdmFyIGxhc3RTZWcgPSBudWxsO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IG11bHRpU2VnbWVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHZhciBtdWx0aVNlZ21lbnQgPSBtdWx0aVNlZ21lbnRzW2ldO1xuICAgICAgaWYgKGxhc3RTZWcpIGxhc3RQb2ludCA9IGpvaW5MaW5lcyhvdXRwdXRCZXppZXIsIGxhc3RTZWcsIG11bHRpU2VnbWVudFswXSwgbGluZUpvaW4sIG1pdGVyTGltaXQpO1xuICAgICAgbGFzdFNlZyA9IG11bHRpU2VnbWVudFttdWx0aVNlZ21lbnQubGVuZ3RoIC0gMV07XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBtdWx0aVNlZ21lbnQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgc2VnbWVudCA9IG11bHRpU2VnbWVudFtqXTtcblxuICAgICAgICBpZiAobGFzdFBvaW50ICYmIHBvaW50RXF1YWwoc2VnbWVudC5wb2ludHNbMF0sIGxhc3RQb2ludCkpIHtcbiAgICAgICAgICBvdXRwdXRCZXppZXIuc2V0WFlBdChzZWdtZW50LnBvaW50c1sxXVswXSwgc2VnbWVudC5wb2ludHNbMV1bMV0sICdvJywgb3V0cHV0QmV6aWVyLmxlbmd0aCgpIC0gMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb3V0cHV0QmV6aWVyLnNldFRyaXBsZUF0KHNlZ21lbnQucG9pbnRzWzBdWzBdLCBzZWdtZW50LnBvaW50c1swXVsxXSwgc2VnbWVudC5wb2ludHNbMV1bMF0sIHNlZ21lbnQucG9pbnRzWzFdWzFdLCBzZWdtZW50LnBvaW50c1swXVswXSwgc2VnbWVudC5wb2ludHNbMF1bMV0sIG91dHB1dEJlemllci5sZW5ndGgoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXRCZXppZXIuc2V0VHJpcGxlQXQoc2VnbWVudC5wb2ludHNbM11bMF0sIHNlZ21lbnQucG9pbnRzWzNdWzFdLCBzZWdtZW50LnBvaW50c1szXVswXSwgc2VnbWVudC5wb2ludHNbM11bMV0sIHNlZ21lbnQucG9pbnRzWzJdWzBdLCBzZWdtZW50LnBvaW50c1syXVsxXSwgb3V0cHV0QmV6aWVyLmxlbmd0aCgpKTtcbiAgICAgICAgbGFzdFBvaW50ID0gc2VnbWVudC5wb2ludHNbM107XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG11bHRpU2VnbWVudHMubGVuZ3RoKSBqb2luTGluZXMob3V0cHV0QmV6aWVyLCBsYXN0U2VnLCBtdWx0aVNlZ21lbnRzWzBdWzBdLCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCk7XG4gICAgcmV0dXJuIG91dHB1dEJlemllcjtcbiAgfTtcblxuICBPZmZzZXRQYXRoTW9kaWZpZXIucHJvdG90eXBlLnByb2Nlc3NTaGFwZXMgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBzaGFwZVBhdGhzO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlcy5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGFtb3VudCA9IHRoaXMuYW1vdW50LnY7XG4gICAgdmFyIG1pdGVyTGltaXQgPSB0aGlzLm1pdGVyTGltaXQudjtcbiAgICB2YXIgbGluZUpvaW4gPSB0aGlzLmxpbmVKb2luO1xuXG4gICAgaWYgKGFtb3VudCAhPT0gMCkge1xuICAgICAgdmFyIHNoYXBlRGF0YTtcbiAgICAgIHZhciBsb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHNoYXBlRGF0YSA9IHRoaXMuc2hhcGVzW2ldO1xuICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbiA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcblxuICAgICAgICBpZiAoISghc2hhcGVEYXRhLnNoYXBlLl9tZGYgJiYgIXRoaXMuX21kZiAmJiAhX2lzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgICBsb2NhbFNoYXBlQ29sbGVjdGlvbi5yZWxlYXNlU2hhcGVzKCk7XG4gICAgICAgICAgc2hhcGVEYXRhLnNoYXBlLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHNoYXBlUGF0aHMgPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuc2hhcGVzO1xuICAgICAgICAgIGpMZW4gPSBzaGFwZURhdGEuc2hhcGUucGF0aHMuX2xlbmd0aDtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGxvY2FsU2hhcGVDb2xsZWN0aW9uLmFkZFNoYXBlKHRoaXMucHJvY2Vzc1BhdGgoc2hhcGVQYXRoc1tqXSwgYW1vdW50LCBsaW5lSm9pbiwgbWl0ZXJMaW1pdCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHNoYXBlRGF0YS5zaGFwZS5wYXRocyA9IHNoYXBlRGF0YS5sb2NhbFNoYXBlQ29sbGVjdGlvbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gZ2V0Rm9udFByb3BlcnRpZXMoZm9udERhdGEpIHtcbiAgICB2YXIgc3R5bGVzID0gZm9udERhdGEuZlN0eWxlID8gZm9udERhdGEuZlN0eWxlLnNwbGl0KCcgJykgOiBbXTtcbiAgICB2YXIgZldlaWdodCA9ICdub3JtYWwnO1xuICAgIHZhciBmU3R5bGUgPSAnbm9ybWFsJztcbiAgICB2YXIgbGVuID0gc3R5bGVzLmxlbmd0aDtcbiAgICB2YXIgc3R5bGVOYW1lO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc3R5bGVOYW1lID0gc3R5bGVzW2ldLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIHN3aXRjaCAoc3R5bGVOYW1lKSB7XG4gICAgICAgIGNhc2UgJ2l0YWxpYyc6XG4gICAgICAgICAgZlN0eWxlID0gJ2l0YWxpYyc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnYm9sZCc6XG4gICAgICAgICAgZldlaWdodCA9ICc3MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2JsYWNrJzpcbiAgICAgICAgICBmV2VpZ2h0ID0gJzkwMCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnbWVkaXVtJzpcbiAgICAgICAgICBmV2VpZ2h0ID0gJzUwMCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVndWxhcic6XG4gICAgICAgIGNhc2UgJ25vcm1hbCc6XG4gICAgICAgICAgZldlaWdodCA9ICc0MDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgY2FzZSAndGhpbic6XG4gICAgICAgICAgZldlaWdodCA9ICcyMDAnO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHN0eWxlOiBmU3R5bGUsXG4gICAgICB3ZWlnaHQ6IGZvbnREYXRhLmZXZWlnaHQgfHwgZldlaWdodFxuICAgIH07XG4gIH1cblxuICB2YXIgRm9udE1hbmFnZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1heFdhaXRpbmdUaW1lID0gNTAwMDtcbiAgICB2YXIgZW1wdHlDaGFyID0ge1xuICAgICAgdzogMCxcbiAgICAgIHNpemU6IDAsXG4gICAgICBzaGFwZXM6IFtdLFxuICAgICAgZGF0YToge1xuICAgICAgICBzaGFwZXM6IFtdXG4gICAgICB9XG4gICAgfTtcbiAgICB2YXIgY29tYmluZWRDaGFyYWN0ZXJzID0gW107IC8vIEhpbmRpIGNoYXJhY3RlcnNcblxuICAgIGNvbWJpbmVkQ2hhcmFjdGVycyA9IGNvbWJpbmVkQ2hhcmFjdGVycy5jb25jYXQoWzIzMDQsIDIzMDUsIDIzMDYsIDIzMDcsIDIzNjIsIDIzNjMsIDIzNjQsIDIzNjQsIDIzNjYsIDIzNjcsIDIzNjgsIDIzNjksIDIzNzAsIDIzNzEsIDIzNzIsIDIzNzMsIDIzNzQsIDIzNzUsIDIzNzYsIDIzNzcsIDIzNzgsIDIzNzksIDIzODAsIDIzODEsIDIzODIsIDIzODMsIDIzODcsIDIzODgsIDIzODksIDIzOTAsIDIzOTEsIDI0MDIsIDI0MDNdKTtcbiAgICB2YXIgQkxBQ0tfRkxBR19DT0RFX1BPSU5UID0gMTI3OTg4O1xuICAgIHZhciBDQU5DRUxfVEFHX0NPREVfUE9JTlQgPSA5MTc2MzE7XG4gICAgdmFyIEFfVEFHX0NPREVfUE9JTlQgPSA5MTc2MDE7XG4gICAgdmFyIFpfVEFHX0NPREVfUE9JTlQgPSA5MTc2MjY7XG4gICAgdmFyIFZBUklBVElPTl9TRUxFQ1RPUl8xNl9DT0RFX1BPSU5UID0gNjUwMzk7XG4gICAgdmFyIFpFUk9fV0lEVEhfSk9JTkVSX0NPREVfUE9JTlQgPSA4MjA1O1xuICAgIHZhciBSRUdJT05BTF9DSEFSQUNURVJfQV9DT0RFX1BPSU5UID0gMTI3NDYyO1xuICAgIHZhciBSRUdJT05BTF9DSEFSQUNURVJfWl9DT0RFX1BPSU5UID0gMTI3NDg3O1xuICAgIHZhciBzdXJyb2dhdGVNb2RpZmllcnMgPSBbJ2Q4M2NkZmZiJywgJ2Q4M2NkZmZjJywgJ2Q4M2NkZmZkJywgJ2Q4M2NkZmZlJywgJ2Q4M2NkZmZmJ107XG5cbiAgICBmdW5jdGlvbiB0cmltRm9udE9wdGlvbnMoZm9udCkge1xuICAgICAgdmFyIGZhbWlseUFycmF5ID0gZm9udC5zcGxpdCgnLCcpO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZmFtaWx5QXJyYXkubGVuZ3RoO1xuICAgICAgdmFyIGVuYWJsZWRGYW1pbGllcyA9IFtdO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGZhbWlseUFycmF5W2ldICE9PSAnc2Fucy1zZXJpZicgJiYgZmFtaWx5QXJyYXlbaV0gIT09ICdtb25vc3BhY2UnKSB7XG4gICAgICAgICAgZW5hYmxlZEZhbWlsaWVzLnB1c2goZmFtaWx5QXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbmFibGVkRmFtaWxpZXMuam9pbignLCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFVwTm9kZShmb250LCBmYW1pbHkpIHtcbiAgICAgIHZhciBwYXJlbnROb2RlID0gY3JlYXRlVGFnKCdzcGFuJyk7IC8vIE5vZGUgaXMgaW52aXNpYmxlIHRvIHNjcmVlbiByZWFkZXJzLlxuXG4gICAgICBwYXJlbnROb2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUuZm9udEZhbWlseSA9IGZhbWlseTtcbiAgICAgIHZhciBub2RlID0gY3JlYXRlVGFnKCdzcGFuJyk7IC8vIENoYXJhY3RlcnMgdGhhdCB2YXJ5IHNpZ25pZmljYW50bHkgYW1vbmcgZGlmZmVyZW50IGZvbnRzXG5cbiAgICAgIG5vZGUuaW5uZXJUZXh0ID0gJ2dpSXRUMVdReUAhLS8jJzsgLy8gVmlzaWJsZSAtIHNvIHdlIGNhbiBtZWFzdXJlIGl0IC0gYnV0IG5vdCBvbiB0aGUgc2NyZWVuXG5cbiAgICAgIHBhcmVudE5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5sZWZ0ID0gJy0xMDAwMHB4JztcbiAgICAgIHBhcmVudE5vZGUuc3R5bGUudG9wID0gJy0xMDAwMHB4JzsgLy8gTGFyZ2UgZm9udCBzaXplIG1ha2VzIGV2ZW4gc3VidGxlIGNoYW5nZXMgb2J2aW91c1xuXG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRTaXplID0gJzMwMHB4JzsgLy8gUmVzZXQgYW55IGZvbnQgcHJvcGVydGllc1xuXG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRWYXJpYW50ID0gJ25vcm1hbCc7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmZvbnRTdHlsZSA9ICdub3JtYWwnO1xuICAgICAgcGFyZW50Tm9kZS5zdHlsZS5mb250V2VpZ2h0ID0gJ25vcm1hbCc7XG4gICAgICBwYXJlbnROb2RlLnN0eWxlLmxldHRlclNwYWNpbmcgPSAnMCc7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKG5vZGUpO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChwYXJlbnROb2RlKTsgLy8gUmVtZW1iZXIgd2lkdGggd2l0aCBubyBhcHBsaWVkIHdlYiBmb250XG5cbiAgICAgIHZhciB3aWR0aCA9IG5vZGUub2Zmc2V0V2lkdGg7XG4gICAgICBub2RlLnN0eWxlLmZvbnRGYW1pbHkgPSB0cmltRm9udE9wdGlvbnMoZm9udCkgKyAnLCAnICsgZmFtaWx5O1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbm9kZTogbm9kZSxcbiAgICAgICAgdzogd2lkdGgsXG4gICAgICAgIHBhcmVudDogcGFyZW50Tm9kZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja0xvYWRlZEZvbnRzKCkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5mb250cy5sZW5ndGg7XG4gICAgICB2YXIgbm9kZTtcbiAgICAgIHZhciB3O1xuICAgICAgdmFyIGxvYWRlZENvdW50ID0gbGVuO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9udHNbaV0ubG9hZGVkKSB7XG4gICAgICAgICAgbG9hZGVkQ291bnQgLT0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmZvbnRzW2ldLmZPcmlnaW4gPT09ICduJyB8fCB0aGlzLmZvbnRzW2ldLm9yaWdpbiA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuZm9udHNbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlID0gdGhpcy5mb250c1tpXS5tb25vQ2FzZS5ub2RlO1xuICAgICAgICAgIHcgPSB0aGlzLmZvbnRzW2ldLm1vbm9DYXNlLnc7XG5cbiAgICAgICAgICBpZiAobm9kZS5vZmZzZXRXaWR0aCAhPT0gdykge1xuICAgICAgICAgICAgbG9hZGVkQ291bnQgLT0gMTtcbiAgICAgICAgICAgIHRoaXMuZm9udHNbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZSA9IHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2Uubm9kZTtcbiAgICAgICAgICAgIHcgPSB0aGlzLmZvbnRzW2ldLnNhbnNDYXNlLnc7XG5cbiAgICAgICAgICAgIGlmIChub2RlLm9mZnNldFdpZHRoICE9PSB3KSB7XG4gICAgICAgICAgICAgIGxvYWRlZENvdW50IC09IDE7XG4gICAgICAgICAgICAgIHRoaXMuZm9udHNbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy5mb250c1tpXS5sb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm9udHNbaV0uc2Fuc0Nhc2UucGFyZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb250c1tpXS5zYW5zQ2FzZS5wYXJlbnQpO1xuICAgICAgICAgICAgdGhpcy5mb250c1tpXS5tb25vQ2FzZS5wYXJlbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLmZvbnRzW2ldLm1vbm9DYXNlLnBhcmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsb2FkZWRDb3VudCAhPT0gMCAmJiBEYXRlLm5vdygpIC0gdGhpcy5pbml0VGltZSA8IG1heFdhaXRpbmdUaW1lKSB7XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5jaGVja0xvYWRlZEZvbnRzQmluZGVkLCAyMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRUaW1lb3V0KHRoaXMuc2V0SXNMb2FkZWRCaW5kZWQsIDEwKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVIZWxwZXIoZm9udERhdGEsIGRlZikge1xuICAgICAgdmFyIGVuZ2luZSA9IGRvY3VtZW50LmJvZHkgJiYgZGVmID8gJ3N2ZycgOiAnY2FudmFzJztcbiAgICAgIHZhciBoZWxwZXI7XG4gICAgICB2YXIgZm9udFByb3BzID0gZ2V0Rm9udFByb3BlcnRpZXMoZm9udERhdGEpO1xuXG4gICAgICBpZiAoZW5naW5lID09PSAnc3ZnJykge1xuICAgICAgICB2YXIgdEhlbHBlciA9IGNyZWF0ZU5TKCd0ZXh0Jyk7XG4gICAgICAgIHRIZWxwZXIuc3R5bGUuZm9udFNpemUgPSAnMTAwcHgnOyAvLyB0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RGF0YS5mRmFtaWx5O1xuXG4gICAgICAgIHRIZWxwZXIuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsIGZvbnREYXRhLmZGYW1pbHkpO1xuICAgICAgICB0SGVscGVyLnNldEF0dHJpYnV0ZSgnZm9udC1zdHlsZScsIGZvbnRQcm9wcy5zdHlsZSk7XG4gICAgICAgIHRIZWxwZXIuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsIGZvbnRQcm9wcy53ZWlnaHQpO1xuICAgICAgICB0SGVscGVyLnRleHRDb250ZW50ID0gJzEnO1xuXG4gICAgICAgIGlmIChmb250RGF0YS5mQ2xhc3MpIHtcbiAgICAgICAgICB0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHkgPSAnaW5oZXJpdCc7XG4gICAgICAgICAgdEhlbHBlci5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgZm9udERhdGEuZkNsYXNzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0SGVscGVyLnN0eWxlLmZvbnRGYW1pbHkgPSBmb250RGF0YS5mRmFtaWx5O1xuICAgICAgICB9XG5cbiAgICAgICAgZGVmLmFwcGVuZENoaWxkKHRIZWxwZXIpO1xuICAgICAgICBoZWxwZXIgPSB0SGVscGVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRDYW52YXNIZWxwZXIgPSBuZXcgT2Zmc2NyZWVuQ2FudmFzKDUwMCwgNTAwKS5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0Q2FudmFzSGVscGVyLmZvbnQgPSBmb250UHJvcHMuc3R5bGUgKyAnICcgKyBmb250UHJvcHMud2VpZ2h0ICsgJyAxMDBweCAnICsgZm9udERhdGEuZkZhbWlseTtcbiAgICAgICAgaGVscGVyID0gdENhbnZhc0hlbHBlcjtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbWVhc3VyZSh0ZXh0KSB7XG4gICAgICAgIGlmIChlbmdpbmUgPT09ICdzdmcnKSB7XG4gICAgICAgICAgaGVscGVyLnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICByZXR1cm4gaGVscGVyLmdldENvbXB1dGVkVGV4dExlbmd0aCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhlbHBlci5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWVhc3VyZVRleHQ6IG1lYXN1cmVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkRm9udHMoZm9udERhdGEsIGRlZnMpIHtcbiAgICAgIGlmICghZm9udERhdGEpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY2hhcnMpIHtcbiAgICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZm9udHMgPSBmb250RGF0YS5saXN0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICghZG9jdW1lbnQuYm9keSkge1xuICAgICAgICB0aGlzLmlzTG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgZm9udERhdGEubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgZGF0YS5oZWxwZXIgPSBjcmVhdGVIZWxwZXIoZGF0YSk7XG4gICAgICAgICAgZGF0YS5jYWNoZSA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5mb250cyA9IGZvbnREYXRhLmxpc3Q7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGZvbnRBcnIgPSBmb250RGF0YS5saXN0O1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZm9udEFyci5sZW5ndGg7XG4gICAgICB2YXIgX3BlbmRpbmdGb250cyA9IGxlbjtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzaG91bGRMb2FkRm9udCA9IHRydWU7XG4gICAgICAgIHZhciBsb2FkZWRTZWxlY3RvcjtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIGZvbnRBcnJbaV0ubG9hZGVkID0gZmFsc2U7XG4gICAgICAgIGZvbnRBcnJbaV0ubW9ub0Nhc2UgPSBzZXRVcE5vZGUoZm9udEFycltpXS5mRmFtaWx5LCAnbW9ub3NwYWNlJyk7XG4gICAgICAgIGZvbnRBcnJbaV0uc2Fuc0Nhc2UgPSBzZXRVcE5vZGUoZm9udEFycltpXS5mRmFtaWx5LCAnc2Fucy1zZXJpZicpO1xuXG4gICAgICAgIGlmICghZm9udEFycltpXS5mUGF0aCkge1xuICAgICAgICAgIGZvbnRBcnJbaV0ubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICBfcGVuZGluZ0ZvbnRzIC09IDE7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udEFycltpXS5mT3JpZ2luID09PSAncCcgfHwgZm9udEFycltpXS5vcmlnaW4gPT09IDMpIHtcbiAgICAgICAgICBsb2FkZWRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlW2YtZm9yaWdpbj1cInBcIl1bZi1mYW1pbHk9XCInICsgZm9udEFycltpXS5mRmFtaWx5ICsgJ1wiXSwgc3R5bGVbZi1vcmlnaW49XCIzXCJdW2YtZmFtaWx5PVwiJyArIGZvbnRBcnJbaV0uZkZhbWlseSArICdcIl0nKTtcblxuICAgICAgICAgIGlmIChsb2FkZWRTZWxlY3Rvci5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzaG91bGRMb2FkRm9udCA9IGZhbHNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRMb2FkRm9udCkge1xuICAgICAgICAgICAgdmFyIHMgPSBjcmVhdGVUYWcoJ3N0eWxlJyk7XG4gICAgICAgICAgICBzLnNldEF0dHJpYnV0ZSgnZi1mb3JpZ2luJywgZm9udEFycltpXS5mT3JpZ2luKTtcbiAgICAgICAgICAgIHMuc2V0QXR0cmlidXRlKCdmLW9yaWdpbicsIGZvbnRBcnJbaV0ub3JpZ2luKTtcbiAgICAgICAgICAgIHMuc2V0QXR0cmlidXRlKCdmLWZhbWlseScsIGZvbnRBcnJbaV0uZkZhbWlseSk7XG4gICAgICAgICAgICBzLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgICAgcy5pbm5lclRleHQgPSAnQGZvbnQtZmFjZSB7Zm9udC1mYW1pbHk6ICcgKyBmb250QXJyW2ldLmZGYW1pbHkgKyBcIjsgZm9udC1zdHlsZTogbm9ybWFsOyBzcmM6IHVybCgnXCIgKyBmb250QXJyW2ldLmZQYXRoICsgXCInKTt9XCI7XG4gICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmb250QXJyW2ldLmZPcmlnaW4gPT09ICdnJyB8fCBmb250QXJyW2ldLm9yaWdpbiA9PT0gMSkge1xuICAgICAgICAgIGxvYWRlZFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnbGlua1tmLWZvcmlnaW49XCJnXCJdLCBsaW5rW2Ytb3JpZ2luPVwiMVwiXScpO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGxvYWRlZFNlbGVjdG9yLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICBpZiAobG9hZGVkU2VsZWN0b3Jbal0uaHJlZi5pbmRleE9mKGZvbnRBcnJbaV0uZlBhdGgpICE9PSAtMSkge1xuICAgICAgICAgICAgICAvLyBGb250IGlzIGFscmVhZHkgbG9hZGVkXG4gICAgICAgICAgICAgIHNob3VsZExvYWRGb250ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHNob3VsZExvYWRGb250KSB7XG4gICAgICAgICAgICB2YXIgbCA9IGNyZWF0ZVRhZygnbGluaycpO1xuICAgICAgICAgICAgbC5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsIGZvbnRBcnJbaV0uZk9yaWdpbik7XG4gICAgICAgICAgICBsLnNldEF0dHJpYnV0ZSgnZi1vcmlnaW4nLCBmb250QXJyW2ldLm9yaWdpbik7XG4gICAgICAgICAgICBsLnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgICAgICAgbC5yZWwgPSAnc3R5bGVzaGVldCc7XG4gICAgICAgICAgICBsLmhyZWYgPSBmb250QXJyW2ldLmZQYXRoO1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZm9udEFycltpXS5mT3JpZ2luID09PSAndCcgfHwgZm9udEFycltpXS5vcmlnaW4gPT09IDIpIHtcbiAgICAgICAgICBsb2FkZWRTZWxlY3RvciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NjcmlwdFtmLWZvcmlnaW49XCJ0XCJdLCBzY3JpcHRbZi1vcmlnaW49XCIyXCJdJyk7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbG9hZGVkU2VsZWN0b3IubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGlmIChmb250QXJyW2ldLmZQYXRoID09PSBsb2FkZWRTZWxlY3RvcltqXS5zcmMpIHtcbiAgICAgICAgICAgICAgLy8gRm9udCBpcyBhbHJlYWR5IGxvYWRlZFxuICAgICAgICAgICAgICBzaG91bGRMb2FkRm9udCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzaG91bGRMb2FkRm9udCkge1xuICAgICAgICAgICAgdmFyIHNjID0gY3JlYXRlVGFnKCdsaW5rJyk7XG4gICAgICAgICAgICBzYy5zZXRBdHRyaWJ1dGUoJ2YtZm9yaWdpbicsIGZvbnRBcnJbaV0uZk9yaWdpbik7XG4gICAgICAgICAgICBzYy5zZXRBdHRyaWJ1dGUoJ2Ytb3JpZ2luJywgZm9udEFycltpXS5vcmlnaW4pO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdyZWwnLCAnc3R5bGVzaGVldCcpO1xuICAgICAgICAgICAgc2Muc2V0QXR0cmlidXRlKCdocmVmJywgZm9udEFycltpXS5mUGF0aCk7XG4gICAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKHNjKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb250QXJyW2ldLmhlbHBlciA9IGNyZWF0ZUhlbHBlcihmb250QXJyW2ldLCBkZWZzKTtcbiAgICAgICAgZm9udEFycltpXS5jYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLmZvbnRzLnB1c2goZm9udEFycltpXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfcGVuZGluZ0ZvbnRzID09PSAwKSB7XG4gICAgICAgIHRoaXMuaXNMb2FkZWQgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT24gc29tZSBjYXNlcyBldmVuIGlmIHRoZSBmb250IGlzIGxvYWRlZCwgaXQgd29uJ3QgbG9hZCBjb3JyZWN0bHkgd2hlbiBtZWFzdXJpbmcgdGV4dCBvbiBjYW52YXMuXG4gICAgICAgIC8vIEFkZGluZyB0aGlzIHRpbWVvdXQgc2VlbXMgdG8gZml4IGl0XG4gICAgICAgIHNldFRpbWVvdXQodGhpcy5jaGVja0xvYWRlZEZvbnRzLmJpbmQodGhpcyksIDEwMCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkQ2hhcnMoY2hhcnMpIHtcbiAgICAgIGlmICghY2hhcnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuY2hhcnMpIHtcbiAgICAgICAgdGhpcy5jaGFycyA9IFtdO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSBjaGFycy5sZW5ndGg7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBqTGVuID0gdGhpcy5jaGFycy5sZW5ndGg7XG4gICAgICB2YXIgZm91bmQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBqID0gMDtcbiAgICAgICAgZm91bmQgPSBmYWxzZTtcblxuICAgICAgICB3aGlsZSAoaiA8IGpMZW4pIHtcbiAgICAgICAgICBpZiAodGhpcy5jaGFyc1tqXS5zdHlsZSA9PT0gY2hhcnNbaV0uc3R5bGUgJiYgdGhpcy5jaGFyc1tqXS5mRmFtaWx5ID09PSBjaGFyc1tpXS5mRmFtaWx5ICYmIHRoaXMuY2hhcnNbal0uY2ggPT09IGNoYXJzW2ldLmNoKSB7XG4gICAgICAgICAgICBmb3VuZCA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaiArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmb3VuZCkge1xuICAgICAgICAgIHRoaXMuY2hhcnMucHVzaChjaGFyc1tpXSk7XG4gICAgICAgICAgakxlbiArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q2hhckRhdGEoX2NoYXIsIHN0eWxlLCBmb250KSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5jaGFycy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmNoYXJzW2ldLmNoID09PSBfY2hhciAmJiB0aGlzLmNoYXJzW2ldLnN0eWxlID09PSBzdHlsZSAmJiB0aGlzLmNoYXJzW2ldLmZGYW1pbHkgPT09IGZvbnQpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5jaGFyc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKCh0eXBlb2YgX2NoYXIgPT09ICdzdHJpbmcnICYmIF9jaGFyLmNoYXJDb2RlQXQoMCkgIT09IDEzIHx8ICFfY2hhcikgJiYgY29uc29sZSAmJiBjb25zb2xlLndhcm4gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAmJiAhdGhpcy5fd2FybmVkKSB7XG4gICAgICAgIHRoaXMuX3dhcm5lZCA9IHRydWU7XG4gICAgICAgIGNvbnNvbGUud2FybignTWlzc2luZyBjaGFyYWN0ZXIgZnJvbSBleHBvcnRlZCBjaGFyYWN0ZXJzIGxpc3Q6ICcsIF9jaGFyLCBzdHlsZSwgZm9udCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW1wdHlDaGFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lYXN1cmVUZXh0KF9jaGFyMiwgZm9udE5hbWUsIHNpemUpIHtcbiAgICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2V0Rm9udEJ5TmFtZShmb250TmFtZSk7IC8vIFVzaW5nIHRoZSBjaGFyIGluc3RlYWQgb2YgY2hhci5jaGFyQ29kZUF0KDApXG4gICAgICAvLyB0byBhdm9pZCBjb2xsaXNpb25zIGJldHdlZW4gZXF1YWwgY2hhcnNcblxuICAgICAgdmFyIGluZGV4ID0gX2NoYXIyO1xuXG4gICAgICBpZiAoIWZvbnREYXRhLmNhY2hlW2luZGV4XSkge1xuICAgICAgICB2YXIgdEhlbHBlciA9IGZvbnREYXRhLmhlbHBlcjtcblxuICAgICAgICBpZiAoX2NoYXIyID09PSAnICcpIHtcbiAgICAgICAgICB2YXIgZG91YmxlU2l6ZSA9IHRIZWxwZXIubWVhc3VyZVRleHQoJ3wnICsgX2NoYXIyICsgJ3wnKTtcbiAgICAgICAgICB2YXIgc2luZ2xlU2l6ZSA9IHRIZWxwZXIubWVhc3VyZVRleHQoJ3x8Jyk7XG4gICAgICAgICAgZm9udERhdGEuY2FjaGVbaW5kZXhdID0gKGRvdWJsZVNpemUgLSBzaW5nbGVTaXplKSAvIDEwMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb250RGF0YS5jYWNoZVtpbmRleF0gPSB0SGVscGVyLm1lYXN1cmVUZXh0KF9jaGFyMikgLyAxMDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvbnREYXRhLmNhY2hlW2luZGV4XSAqIHNpemU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Rm9udEJ5TmFtZShuYW1lKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5mb250cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmICh0aGlzLmZvbnRzW2ldLmZOYW1lID09PSBuYW1lKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZm9udHNbaV07XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLmZvbnRzWzBdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldENvZGVQb2ludChzdHJpbmcpIHtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSAwO1xuICAgICAgdmFyIGZpcnN0ID0gc3RyaW5nLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgIGlmIChmaXJzdCA+PSAweEQ4MDAgJiYgZmlyc3QgPD0gMHhEQkZGKSB7XG4gICAgICAgIHZhciBzZWNvbmQgPSBzdHJpbmcuY2hhckNvZGVBdCgxKTtcblxuICAgICAgICBpZiAoc2Vjb25kID49IDB4REMwMCAmJiBzZWNvbmQgPD0gMHhERkZGKSB7XG4gICAgICAgICAgY29kZVBvaW50ID0gKGZpcnN0IC0gMHhEODAwKSAqIDB4NDAwICsgc2Vjb25kIC0gMHhEQzAwICsgMHgxMDAwMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29kZVBvaW50O1xuICAgIH0gLy8gU2tpbiB0b25lIG1vZGlmaWVyc1xuXG5cbiAgICBmdW5jdGlvbiBpc01vZGlmaWVyKGZpcnN0Q2hhckNvZGUsIHNlY29uZENoYXJDb2RlKSB7XG4gICAgICB2YXIgc3VtID0gZmlyc3RDaGFyQ29kZS50b1N0cmluZygxNikgKyBzZWNvbmRDaGFyQ29kZS50b1N0cmluZygxNik7XG4gICAgICByZXR1cm4gc3Vycm9nYXRlTW9kaWZpZXJzLmluZGV4T2Yoc3VtKSAhPT0gLTE7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNaZXJvV2lkdGhKb2luZXIoY2hhckNvZGUpIHtcbiAgICAgIHJldHVybiBjaGFyQ29kZSA9PT0gWkVST19XSURUSF9KT0lORVJfQ09ERV9QT0lOVDtcbiAgICB9IC8vIFRoaXMgY29kZXBvaW50IG1heSBjaGFuZ2UgdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIHByZWNlZGluZyBjaGFyYWN0ZXIuXG4gICAgLy8gSWYgdGhhdCBpcyBhIHN5bWJvbCwgZGluZ2JhdCBvciBlbW9qaSwgVStGRTBGIGZvcmNlcyBpdCB0byBiZSByZW5kZXJlZFxuICAgIC8vIGFzIGEgY29sb3JmdWwgaW1hZ2UgYXMgY29tcGFyZWQgdG8gYSBtb25vY2hyb21lIHRleHQgdmFyaWFudC5cblxuXG4gICAgZnVuY3Rpb24gaXNWYXJpYXRpb25TZWxlY3RvcihjaGFyQ29kZSkge1xuICAgICAgcmV0dXJuIGNoYXJDb2RlID09PSBWQVJJQVRJT05fU0VMRUNUT1JfMTZfQ09ERV9QT0lOVDtcbiAgICB9IC8vIFRoZSByZWdpb25hbCBpbmRpY2F0b3Igc3ltYm9scyBhcmUgYSBzZXQgb2YgMjYgYWxwaGFiZXRpYyBVbmljb2RlXG4gICAgLy8vIGNoYXJhY3RlcnMgKEHigJNaKSBpbnRlbmRlZCB0byBiZSB1c2VkIHRvIGVuY29kZSBJU08gMzE2Ni0xIGFscGhhLTJcbiAgICAvLyB0d28tbGV0dGVyIGNvdW50cnkgY29kZXMgaW4gYSB3YXkgdGhhdCBhbGxvd3Mgb3B0aW9uYWwgc3BlY2lhbCB0cmVhdG1lbnQuXG5cblxuICAgIGZ1bmN0aW9uIGlzUmVnaW9uYWxDb2RlKHN0cmluZykge1xuICAgICAgdmFyIGNvZGVQb2ludCA9IGdldENvZGVQb2ludChzdHJpbmcpO1xuXG4gICAgICBpZiAoY29kZVBvaW50ID49IFJFR0lPTkFMX0NIQVJBQ1RFUl9BX0NPREVfUE9JTlQgJiYgY29kZVBvaW50IDw9IFJFR0lPTkFMX0NIQVJBQ1RFUl9aX0NPREVfUE9JTlQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFNvbWUgRW1vamkgaW1wbGVtZW50YXRpb25zIHJlcHJlc2VudCBjb21iaW5hdGlvbnMgb2ZcbiAgICAvLyB0d28g4oCccmVnaW9uYWwgaW5kaWNhdG9y4oCdIGxldHRlcnMgYXMgYSBzaW5nbGUgZmxhZyBzeW1ib2wuXG5cblxuICAgIGZ1bmN0aW9uIGlzRmxhZ0Vtb2ppKHN0cmluZykge1xuICAgICAgcmV0dXJuIGlzUmVnaW9uYWxDb2RlKHN0cmluZy5zdWJzdHIoMCwgMikpICYmIGlzUmVnaW9uYWxDb2RlKHN0cmluZy5zdWJzdHIoMiwgMikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQ29tYmluZWRDaGFyYWN0ZXIoX2NoYXIzKSB7XG4gICAgICByZXR1cm4gY29tYmluZWRDaGFyYWN0ZXJzLmluZGV4T2YoX2NoYXIzKSAhPT0gLTE7XG4gICAgfSAvLyBSZWdpb25hbCBmbGFncyBzdGFydCB3aXRoIGEgQkxBQ0tfRkxBR19DT0RFX1BPSU5UXG4gICAgLy8gZm9sb3dlZCBieSA1IGNoYXJzIGluIHRoZSBUQUcgcmFuZ2VcbiAgICAvLyBhbmQgZW5kIHdpdGggYSBDQU5DRUxfVEFHX0NPREVfUE9JTlRcblxuXG4gICAgZnVuY3Rpb24gaXNSZWdpb25hbEZsYWcodGV4dCwgaW5kZXgpIHtcbiAgICAgIHZhciBjb2RlUG9pbnQgPSBnZXRDb2RlUG9pbnQodGV4dC5zdWJzdHIoaW5kZXgsIDIpKTtcblxuICAgICAgaWYgKGNvZGVQb2ludCAhPT0gQkxBQ0tfRkxBR19DT0RFX1BPSU5UKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvdW50ID0gMDtcbiAgICAgIGluZGV4ICs9IDI7XG5cbiAgICAgIHdoaWxlIChjb3VudCA8IDUpIHtcbiAgICAgICAgY29kZVBvaW50ID0gZ2V0Q29kZVBvaW50KHRleHQuc3Vic3RyKGluZGV4LCAyKSk7XG5cbiAgICAgICAgaWYgKGNvZGVQb2ludCA8IEFfVEFHX0NPREVfUE9JTlQgfHwgY29kZVBvaW50ID4gWl9UQUdfQ09ERV9QT0lOVCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIGluZGV4ICs9IDI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBnZXRDb2RlUG9pbnQodGV4dC5zdWJzdHIoaW5kZXgsIDIpKSA9PT0gQ0FOQ0VMX1RBR19DT0RFX1BPSU5UO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldElzTG9hZGVkKCkge1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIEZvbnQgPSBmdW5jdGlvbiBGb250KCkge1xuICAgICAgdGhpcy5mb250cyA9IFtdO1xuICAgICAgdGhpcy5jaGFycyA9IG51bGw7XG4gICAgICB0aGlzLnR5cGVraXRMb2FkZWQgPSAwO1xuICAgICAgdGhpcy5pc0xvYWRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fd2FybmVkID0gZmFsc2U7XG4gICAgICB0aGlzLmluaXRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgIHRoaXMuc2V0SXNMb2FkZWRCaW5kZWQgPSB0aGlzLnNldElzTG9hZGVkLmJpbmQodGhpcyk7XG4gICAgICB0aGlzLmNoZWNrTG9hZGVkRm9udHNCaW5kZWQgPSB0aGlzLmNoZWNrTG9hZGVkRm9udHMuYmluZCh0aGlzKTtcbiAgICB9O1xuXG4gICAgRm9udC5pc01vZGlmaWVyID0gaXNNb2RpZmllcjtcbiAgICBGb250LmlzWmVyb1dpZHRoSm9pbmVyID0gaXNaZXJvV2lkdGhKb2luZXI7XG4gICAgRm9udC5pc0ZsYWdFbW9qaSA9IGlzRmxhZ0Vtb2ppO1xuICAgIEZvbnQuaXNSZWdpb25hbENvZGUgPSBpc1JlZ2lvbmFsQ29kZTtcbiAgICBGb250LmlzQ29tYmluZWRDaGFyYWN0ZXIgPSBpc0NvbWJpbmVkQ2hhcmFjdGVyO1xuICAgIEZvbnQuaXNSZWdpb25hbEZsYWcgPSBpc1JlZ2lvbmFsRmxhZztcbiAgICBGb250LmlzVmFyaWF0aW9uU2VsZWN0b3IgPSBpc1ZhcmlhdGlvblNlbGVjdG9yO1xuICAgIEZvbnQuQkxBQ0tfRkxBR19DT0RFX1BPSU5UID0gQkxBQ0tfRkxBR19DT0RFX1BPSU5UO1xuICAgIHZhciBmb250UHJvdG90eXBlID0ge1xuICAgICAgYWRkQ2hhcnM6IGFkZENoYXJzLFxuICAgICAgYWRkRm9udHM6IGFkZEZvbnRzLFxuICAgICAgZ2V0Q2hhckRhdGE6IGdldENoYXJEYXRhLFxuICAgICAgZ2V0Rm9udEJ5TmFtZTogZ2V0Rm9udEJ5TmFtZSxcbiAgICAgIG1lYXN1cmVUZXh0OiBtZWFzdXJlVGV4dCxcbiAgICAgIGNoZWNrTG9hZGVkRm9udHM6IGNoZWNrTG9hZGVkRm9udHMsXG4gICAgICBzZXRJc0xvYWRlZDogc2V0SXNMb2FkZWRcbiAgICB9O1xuICAgIEZvbnQucHJvdG90eXBlID0gZm9udFByb3RvdHlwZTtcbiAgICByZXR1cm4gRm9udDtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNsb3RNYW5hZ2VyKGFuaW1hdGlvbkRhdGEpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkRhdGEgPSBhbmltYXRpb25EYXRhO1xuICB9XG5cbiAgU2xvdE1hbmFnZXIucHJvdG90eXBlLmdldFByb3AgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkRhdGEuc2xvdHMgJiYgdGhpcy5hbmltYXRpb25EYXRhLnNsb3RzW2RhdGEuc2lkXSkge1xuICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGF0YSwgdGhpcy5hbmltYXRpb25EYXRhLnNsb3RzW2RhdGEuc2lkXS5wKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICBmdW5jdGlvbiBzbG90RmFjdG9yeShhbmltYXRpb25EYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTbG90TWFuYWdlcihhbmltYXRpb25EYXRhKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlbmRlcmFibGVFbGVtZW50KCkge31cblxuICBSZW5kZXJhYmxlRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgaW5pdFJlbmRlcmFibGU6IGZ1bmN0aW9uIGluaXRSZW5kZXJhYmxlKCkge1xuICAgICAgLy8gbGF5ZXIncyB2aXNpYmlsaXR5IHJlbGF0ZWQgdG8gaW5wb2ludCBhbmQgb3V0cG9pbnQuIFJlbmFtZSBpc1Zpc2libGUgdG8gaXNJblJhbmdlXG4gICAgICB0aGlzLmlzSW5SYW5nZSA9IGZhbHNlOyAvLyBsYXllcidzIGRpc3BsYXkgc3RhdGVcblxuICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTsgLy8gSWYgbGF5ZXIncyB0cmFuc3BhcmVuY3kgZXF1YWxzIDAsIGl0IGNhbiBiZSBoaWRkZW5cblxuICAgICAgdGhpcy5pc1RyYW5zcGFyZW50ID0gZmFsc2U7IC8vIGxpc3Qgb2YgYW5pbWF0ZWQgY29tcG9uZW50c1xuXG4gICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzID0gW107XG4gICAgfSxcbiAgICBhZGRSZW5kZXJhYmxlQ29tcG9uZW50OiBmdW5jdGlvbiBhZGRSZW5kZXJhYmxlQ29tcG9uZW50KGNvbXBvbmVudCkge1xuICAgICAgaWYgKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpID09PSAtMSkge1xuICAgICAgICB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbW92ZVJlbmRlcmFibGVDb21wb25lbnQ6IGZ1bmN0aW9uIHJlbW92ZVJlbmRlcmFibGVDb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgICBpZiAodGhpcy5yZW5kZXJhYmxlQ29tcG9uZW50cy5pbmRleE9mKGNvbXBvbmVudCkgIT09IC0xKSB7XG4gICAgICAgIHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuc3BsaWNlKHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHMuaW5kZXhPZihjb21wb25lbnQpLCAxKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHByZXBhcmVSZW5kZXJhYmxlRnJhbWU6IGZ1bmN0aW9uIHByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJMaW1pdHMobnVtKTtcbiAgICB9LFxuICAgIGNoZWNrVHJhbnNwYXJlbmN5OiBmdW5jdGlvbiBjaGVja1RyYW5zcGFyZW5jeSgpIHtcbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udiA8PSAwKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1RyYW5zcGFyZW50ICYmIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcuaGlkZU9uVHJhbnNwYXJlbnQpIHtcbiAgICAgICAgICB0aGlzLmlzVHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuaXNUcmFuc3BhcmVudCkge1xuICAgICAgICB0aGlzLmlzVHJhbnNwYXJlbnQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICAgKiBAZnVuY3Rpb25cclxuICAgICAgICogSW5pdGlhbGl6ZXMgZnJhbWUgcmVsYXRlZCBwcm9wZXJ0aWVzLlxyXG4gICAgICAgKlxyXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtXHJcbiAgICAgICAqIGN1cnJlbnQgZnJhbWUgbnVtYmVyIGluIExheWVyJ3MgdGltZVxyXG4gICAgICAgKlxyXG4gICAgICAgKi9cbiAgICBjaGVja0xheWVyTGltaXRzOiBmdW5jdGlvbiBjaGVja0xheWVyTGltaXRzKG51bSkge1xuICAgICAgaWYgKHRoaXMuZGF0YS5pcCAtIHRoaXMuZGF0YS5zdCA8PSBudW0gJiYgdGhpcy5kYXRhLm9wIC0gdGhpcy5kYXRhLnN0ID4gbnVtKSB7XG4gICAgICAgIGlmICh0aGlzLmlzSW5SYW5nZSAhPT0gdHJ1ZSkge1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5fbWRmID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIHRoaXMuaXNJblJhbmdlID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLnNob3coKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmlzSW5SYW5nZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSB0cnVlO1xuICAgICAgICB0aGlzLmlzSW5SYW5nZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlclJlbmRlcmFibGU6IGZ1bmN0aW9uIHJlbmRlclJlbmRlcmFibGUoKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnJlbmRlcmFibGVDb21wb25lbnRzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMucmVuZGVyYWJsZUNvbXBvbmVudHNbaV0ucmVuZGVyRnJhbWUodGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgICAgIH1cbiAgICAgIC8qIHRoaXMubWFza01hbmFnZXIucmVuZGVyRnJhbWUodGhpcy5maW5hbFRyYW5zZm9ybS5tYXQpO1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIucmVuZGVyRnJhbWUodGhpcy5faXNGaXJzdEZyYW1lKTsgKi9cblxuICAgIH0sXG4gICAgc291cmNlUmVjdEF0VGltZTogZnVuY3Rpb24gc291cmNlUmVjdEF0VGltZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgd2lkdGg6IDEwMCxcbiAgICAgICAgaGVpZ2h0OiAxMDBcbiAgICAgIH07XG4gICAgfSxcbiAgICBnZXRMYXllclNpemU6IGZ1bmN0aW9uIGdldExheWVyU2l6ZSgpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEudHkgPT09IDUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB3OiB0aGlzLmRhdGEudGV4dERhdGEud2lkdGgsXG4gICAgICAgICAgaDogdGhpcy5kYXRhLnRleHREYXRhLmhlaWdodFxuICAgICAgICB9O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB3OiB0aGlzLmRhdGEud2lkdGgsXG4gICAgICAgIGg6IHRoaXMuZGF0YS5oZWlnaHRcbiAgICAgIH07XG4gICAgfVxuICB9O1xuXG4gIHZhciBnZXRCbGVuZE1vZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGJsZW5kTW9kZUVudW1zID0ge1xuICAgICAgMDogJ3NvdXJjZS1vdmVyJyxcbiAgICAgIDE6ICdtdWx0aXBseScsXG4gICAgICAyOiAnc2NyZWVuJyxcbiAgICAgIDM6ICdvdmVybGF5JyxcbiAgICAgIDQ6ICdkYXJrZW4nLFxuICAgICAgNTogJ2xpZ2h0ZW4nLFxuICAgICAgNjogJ2NvbG9yLWRvZGdlJyxcbiAgICAgIDc6ICdjb2xvci1idXJuJyxcbiAgICAgIDg6ICdoYXJkLWxpZ2h0JyxcbiAgICAgIDk6ICdzb2Z0LWxpZ2h0JyxcbiAgICAgIDEwOiAnZGlmZmVyZW5jZScsXG4gICAgICAxMTogJ2V4Y2x1c2lvbicsXG4gICAgICAxMjogJ2h1ZScsXG4gICAgICAxMzogJ3NhdHVyYXRpb24nLFxuICAgICAgMTQ6ICdjb2xvcicsXG4gICAgICAxNTogJ2x1bWlub3NpdHknXG4gICAgfTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG1vZGUpIHtcbiAgICAgIHJldHVybiBibGVuZE1vZGVFbnVtc1ttb2RlXSB8fCAnJztcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gU2xpZGVyRWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMCwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIEFuZ2xlRWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMCwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENvbG9yRWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMSwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFBvaW50RWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMSwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIExheWVySW5kZXhFZmZlY3QoZGF0YSwgZWxlbSwgY29udGFpbmVyKSB7XG4gICAgdGhpcy5wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS52LCAwLCAwLCBjb250YWluZXIpO1xuICB9XG5cbiAgZnVuY3Rpb24gTWFza0luZGV4RWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMCwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIENoZWNrYm94RWZmZWN0KGRhdGEsIGVsZW0sIGNvbnRhaW5lcikge1xuICAgIHRoaXMucCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEudiwgMCwgMCwgY29udGFpbmVyKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIE5vVmFsdWVFZmZlY3QoKSB7XG4gICAgdGhpcy5wID0ge307XG4gIH1cblxuICBmdW5jdGlvbiBFZmZlY3RzTWFuYWdlcihkYXRhLCBlbGVtZW50KSB7XG4gICAgdmFyIGVmZmVjdHMgPSBkYXRhLmVmIHx8IFtdO1xuICAgIHRoaXMuZWZmZWN0RWxlbWVudHMgPSBbXTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZWZmZWN0cy5sZW5ndGg7XG4gICAgdmFyIGVmZmVjdEl0ZW07XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGVmZmVjdEl0ZW0gPSBuZXcgR3JvdXBFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCk7XG4gICAgICB0aGlzLmVmZmVjdEVsZW1lbnRzLnB1c2goZWZmZWN0SXRlbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gR3JvdXBFZmZlY3QoZGF0YSwgZWxlbWVudCkge1xuICAgIHRoaXMuaW5pdChkYXRhLCBlbGVtZW50KTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgR3JvdXBFZmZlY3QpO1xuICBHcm91cEVmZmVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBHcm91cEVmZmVjdC5wcm90b3R5cGUuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzO1xuXG4gIEdyb3VwRWZmZWN0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGRhdGEsIGVsZW1lbnQpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuZWZmZWN0RWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbWVudCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZGF0YS5lZi5sZW5ndGg7XG4gICAgdmFyIGVmZjtcbiAgICB2YXIgZWZmZWN0cyA9IHRoaXMuZGF0YS5lZjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZWZmID0gbnVsbDtcblxuICAgICAgc3dpdGNoIChlZmZlY3RzW2ldLnR5KSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICBlZmYgPSBuZXcgU2xpZGVyRWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBlZmYgPSBuZXcgQW5nbGVFZmZlY3QoZWZmZWN0c1tpXSwgZWxlbWVudCwgdGhpcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGVmZiA9IG5ldyBDb2xvckVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgZWZmID0gbmV3IFBvaW50RWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgY2FzZSA3OlxuICAgICAgICAgIGVmZiA9IG5ldyBDaGVja2JveEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDEwOlxuICAgICAgICAgIGVmZiA9IG5ldyBMYXllckluZGV4RWZmZWN0KGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgZWZmID0gbmV3IE1hc2tJbmRleEVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgZWZmID0gbmV3IEVmZmVjdHNNYW5hZ2VyKGVmZmVjdHNbaV0sIGVsZW1lbnQsIHRoaXMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvLyBjYXNlIDY6XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBlZmYgPSBuZXcgTm9WYWx1ZUVmZmVjdChlZmZlY3RzW2ldLCBlbGVtZW50LCB0aGlzKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaWYgKGVmZikge1xuICAgICAgICB0aGlzLmVmZmVjdEVsZW1lbnRzLnB1c2goZWZmKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gQmFzZUVsZW1lbnQoKSB7fVxuXG4gIEJhc2VFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICBjaGVja01hc2tzOiBmdW5jdGlvbiBjaGVja01hc2tzKCkge1xuICAgICAgaWYgKCF0aGlzLmRhdGEuaGFzTWFzaykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nICYmIHRoaXMuZGF0YS5tYXNrc1Byb3BlcnRpZXNbaV0uY2wgIT09IGZhbHNlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIGluaXRFeHByZXNzaW9uczogZnVuY3Rpb24gaW5pdEV4cHJlc3Npb25zKCkge1xuICAgICAgdmFyIGV4cHJlc3Npb25zSW50ZXJmYWNlcyA9IGdldEV4cHJlc3Npb25JbnRlcmZhY2VzKCk7XG5cbiAgICAgIGlmICghZXhwcmVzc2lvbnNJbnRlcmZhY2VzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIExheWVyRXhwcmVzc2lvbkludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygnbGF5ZXInKTtcbiAgICAgIHZhciBFZmZlY3RzRXhwcmVzc2lvbkludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygnZWZmZWN0cycpO1xuICAgICAgdmFyIFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygnc2hhcGUnKTtcbiAgICAgIHZhciBUZXh0RXhwcmVzc2lvbkludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygndGV4dCcpO1xuICAgICAgdmFyIENvbXBFeHByZXNzaW9uSW50ZXJmYWNlID0gZXhwcmVzc2lvbnNJbnRlcmZhY2VzKCdjb21wJyk7XG4gICAgICB0aGlzLmxheWVySW50ZXJmYWNlID0gTGF5ZXJFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMpO1xuXG4gICAgICBpZiAodGhpcy5kYXRhLmhhc01hc2sgJiYgdGhpcy5tYXNrTWFuYWdlcikge1xuICAgICAgICB0aGlzLmxheWVySW50ZXJmYWNlLnJlZ2lzdGVyTWFza0ludGVyZmFjZSh0aGlzLm1hc2tNYW5hZ2VyKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVmZmVjdHNJbnRlcmZhY2UgPSBFZmZlY3RzRXhwcmVzc2lvbkludGVyZmFjZS5jcmVhdGVFZmZlY3RzSW50ZXJmYWNlKHRoaXMsIHRoaXMubGF5ZXJJbnRlcmZhY2UpO1xuICAgICAgdGhpcy5sYXllckludGVyZmFjZS5yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UoZWZmZWN0c0ludGVyZmFjZSk7XG5cbiAgICAgIGlmICh0aGlzLmRhdGEudHkgPT09IDAgfHwgdGhpcy5kYXRhLnh0KSB7XG4gICAgICAgIHRoaXMuY29tcEludGVyZmFjZSA9IENvbXBFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMpO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmRhdGEudHkgPT09IDQpIHtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS5zaGFwZUludGVyZmFjZSA9IFNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLmxheWVySW50ZXJmYWNlKTtcbiAgICAgICAgdGhpcy5sYXllckludGVyZmFjZS5jb250ZW50ID0gdGhpcy5sYXllckludGVyZmFjZS5zaGFwZUludGVyZmFjZTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnR5ID09PSA1KSB7XG4gICAgICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UudGV4dEludGVyZmFjZSA9IFRleHRFeHByZXNzaW9uSW50ZXJmYWNlKHRoaXMpO1xuICAgICAgICB0aGlzLmxheWVySW50ZXJmYWNlLnRleHQgPSB0aGlzLmxheWVySW50ZXJmYWNlLnRleHRJbnRlcmZhY2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRCbGVuZE1vZGU6IGZ1bmN0aW9uIHNldEJsZW5kTW9kZSgpIHtcbiAgICAgIHZhciBibGVuZE1vZGVWYWx1ZSA9IGdldEJsZW5kTW9kZSh0aGlzLmRhdGEuYm0pO1xuICAgICAgdmFyIGVsZW0gPSB0aGlzLmJhc2VFbGVtZW50IHx8IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgZWxlbS5zdHlsZVsnbWl4LWJsZW5kLW1vZGUnXSA9IGJsZW5kTW9kZVZhbHVlO1xuICAgIH0sXG4gICAgaW5pdEJhc2VEYXRhOiBmdW5jdGlvbiBpbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgICAgdGhpcy5nbG9iYWxEYXRhID0gZ2xvYmFsRGF0YTtcbiAgICAgIHRoaXMuY29tcCA9IGNvbXA7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgdGhpcy5sYXllcklkID0gY3JlYXRlRWxlbWVudElEKCk7IC8vIFN0cmV0Y2ggZmFjdG9yIGZvciBvbGQgYW5pbWF0aW9ucyBtaXNzaW5nIHRoaXMgcHJvcGVydHkuXG5cbiAgICAgIGlmICghdGhpcy5kYXRhLnNyKSB7XG4gICAgICAgIHRoaXMuZGF0YS5zciA9IDE7XG4gICAgICB9IC8vIGVmZmVjdHMgbWFuYWdlclxuXG5cbiAgICAgIHRoaXMuZWZmZWN0c01hbmFnZXIgPSBuZXcgRWZmZWN0c01hbmFnZXIodGhpcy5kYXRhLCB0aGlzLCB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzKTtcbiAgICB9LFxuICAgIGdldFR5cGU6IGZ1bmN0aW9uIGdldFR5cGUoKSB7XG4gICAgICByZXR1cm4gdGhpcy50eXBlO1xuICAgIH0sXG4gICAgc291cmNlUmVjdEF0VGltZTogZnVuY3Rpb24gc291cmNlUmVjdEF0VGltZSgpIHt9XG4gIH07XG5cbiAgLyoqXHJcbiAgICogQGZpbGVcclxuICAgKiBIYW5kbGVzIGVsZW1lbnQncyBsYXllciBmcmFtZSB1cGRhdGUuXHJcbiAgICogQ2hlY2tzIGxheWVyIGluIHBvaW50IGFuZCBvdXQgcG9pbnRcclxuICAgKlxyXG4gICAqL1xuICBmdW5jdGlvbiBGcmFtZUVsZW1lbnQoKSB7fVxuXG4gIEZyYW1lRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBJbml0aWFsaXplcyBmcmFtZSByZWxhdGVkIHByb3BlcnRpZXMuXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIGluaXRGcmFtZTogZnVuY3Rpb24gaW5pdEZyYW1lKCkge1xuICAgICAgLy8gc2V0IHRvIHRydWUgd2hlbiBpbnBvaW50IGlzIHJlbmRlcmVkXG4gICAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSBmYWxzZTsgLy8gbGlzdCBvZiBhbmltYXRlZCBwcm9wZXJ0aWVzXG5cbiAgICAgIHRoaXMuZHluYW1pY1Byb3BlcnRpZXMgPSBbXTsgLy8gSWYgbGF5ZXIgaGFzIGJlZW4gbW9kaWZpZWQgaW4gY3VycmVudCB0aWNrIHRoaXMgd2lsbCBiZSB0cnVlXG5cbiAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqIENhbGN1bGF0ZXMgYWxsIGR5bmFtaWMgdmFsdWVzXHJcbiAgICAgICAqXHJcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1cclxuICAgICAgICogY3VycmVudCBmcmFtZSBudW1iZXIgaW4gTGF5ZXIncyB0aW1lXHJcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaXNWaXNpYmxlXHJcbiAgICAgICAqIGlmIGxheWVycyBpcyBjdXJyZW50bHkgaW4gcmFuZ2VcclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgcHJlcGFyZVByb3BlcnRpZXM6IGZ1bmN0aW9uIHByZXBhcmVQcm9wZXJ0aWVzKG51bSwgaXNWaXNpYmxlKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpc1Zpc2libGUgfHwgdGhpcy5faXNQYXJlbnQgJiYgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5wcm9wVHlwZSA9PT0gJ3RyYW5zZm9ybScpIHtcbiAgICAgICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5fbWRmKSB7XG4gICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuX21kZiA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgYWRkRHluYW1pY1Byb3BlcnR5OiBmdW5jdGlvbiBhZGREeW5hbWljUHJvcGVydHkocHJvcCkge1xuICAgICAgaWYgKHRoaXMuZHluYW1pY1Byb3BlcnRpZXMuaW5kZXhPZihwcm9wKSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllcy5wdXNoKHByb3ApO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBGb290YWdlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJhYmxlKCk7XG4gICAgdGhpcy5hc3NldERhdGEgPSBnbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTtcbiAgICB0aGlzLmZvb3RhZ2VEYXRhID0gZ2xvYmFsRGF0YS5pbWFnZUxvYWRlci5nZXRBc3NldCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKCkge307XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtSZW5kZXJhYmxlRWxlbWVudCwgQmFzZUVsZW1lbnQsIEZyYW1lRWxlbWVudF0sIEZvb3RhZ2VFbGVtZW50KTtcblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKCkge307XG5cbiAgRm9vdGFnZUVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBGb290YWdlRWxlbWVudC5wcm90b3R5cGUuaW5pdEV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBleHByZXNzaW9uc0ludGVyZmFjZXMgPSBnZXRFeHByZXNzaW9uSW50ZXJmYWNlcygpO1xuXG4gICAgaWYgKCFleHByZXNzaW9uc0ludGVyZmFjZXMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgRm9vdGFnZUludGVyZmFjZSA9IGV4cHJlc3Npb25zSW50ZXJmYWNlcygnZm9vdGFnZScpO1xuICAgIHRoaXMubGF5ZXJJbnRlcmZhY2UgPSBGb290YWdlSW50ZXJmYWNlKHRoaXMpO1xuICB9O1xuXG4gIEZvb3RhZ2VFbGVtZW50LnByb3RvdHlwZS5nZXRGb290YWdlRGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5mb290YWdlRGF0YTtcbiAgfTtcblxuICBmdW5jdGlvbiBBdWRpb0VsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0UmVuZGVyYWJsZSgpO1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5faXNQbGF5aW5nID0gZmFsc2U7XG4gICAgdGhpcy5fY2FuUGxheSA9IGZhbHNlO1xuICAgIHZhciBhc3NldFBhdGggPSB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXRzUGF0aCh0aGlzLmFzc2V0RGF0YSk7XG4gICAgdGhpcy5hdWRpbyA9IHRoaXMuZ2xvYmFsRGF0YS5hdWRpb0NvbnRyb2xsZXIuY3JlYXRlQXVkaW8oYXNzZXRQYXRoKTtcbiAgICB0aGlzLl9jdXJyZW50VGltZSA9IDA7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmF1ZGlvQ29udHJvbGxlci5hZGRBdWRpbyh0aGlzKTtcbiAgICB0aGlzLl92b2x1bWVNdWx0aXBsaWVyID0gMTtcbiAgICB0aGlzLl92b2x1bWUgPSAxO1xuICAgIHRoaXMuX3ByZXZpb3VzVm9sdW1lID0gbnVsbDtcbiAgICB0aGlzLnRtID0gZGF0YS50bSA/IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEudG0sIDAsIGdsb2JhbERhdGEuZnJhbWVSYXRlLCB0aGlzKSA6IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gICAgdGhpcy5sdiA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuYXUgJiYgZGF0YS5hdS5sdiA/IGRhdGEuYXUubHYgOiB7XG4gICAgICBrOiBbMTAwXVxuICAgIH0sIDEsIDAuMDEsIHRoaXMpO1xuICB9XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSwgdHJ1ZSk7XG4gICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRydWUpO1xuXG4gICAgaWYgKCF0aGlzLnRtLl9wbGFjZWhvbGRlcikge1xuICAgICAgdmFyIHRpbWVSZW1hcHBlZCA9IHRoaXMudG0udjtcbiAgICAgIHRoaXMuX2N1cnJlbnRUaW1lID0gdGltZVJlbWFwcGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jdXJyZW50VGltZSA9IG51bSAvIHRoaXMuZGF0YS5zcjtcbiAgICB9XG5cbiAgICB0aGlzLl92b2x1bWUgPSB0aGlzLmx2LnZbMF07XG4gICAgdmFyIHRvdGFsVm9sdW1lID0gdGhpcy5fdm9sdW1lICogdGhpcy5fdm9sdW1lTXVsdGlwbGllcjtcblxuICAgIGlmICh0aGlzLl9wcmV2aW91c1ZvbHVtZSAhPT0gdG90YWxWb2x1bWUpIHtcbiAgICAgIHRoaXMuX3ByZXZpb3VzVm9sdW1lID0gdG90YWxWb2x1bWU7XG4gICAgICB0aGlzLmF1ZGlvLnZvbHVtZSh0b3RhbFZvbHVtZSk7XG4gICAgfVxuICB9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsIEJhc2VFbGVtZW50LCBGcmFtZUVsZW1lbnRdLCBBdWRpb0VsZW1lbnQpO1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuaXNJblJhbmdlICYmIHRoaXMuX2NhblBsYXkpIHtcbiAgICAgIGlmICghdGhpcy5faXNQbGF5aW5nKSB7XG4gICAgICAgIHRoaXMuYXVkaW8ucGxheSgpO1xuICAgICAgICB0aGlzLmF1ZGlvLnNlZWsodGhpcy5fY3VycmVudFRpbWUgLyB0aGlzLmdsb2JhbERhdGEuZnJhbWVSYXRlKTtcbiAgICAgICAgdGhpcy5faXNQbGF5aW5nID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMuYXVkaW8ucGxheWluZygpIHx8IE1hdGguYWJzKHRoaXMuX2N1cnJlbnRUaW1lIC8gdGhpcy5nbG9iYWxEYXRhLmZyYW1lUmF0ZSAtIHRoaXMuYXVkaW8uc2VlaygpKSA+IDAuMSkge1xuICAgICAgICB0aGlzLmF1ZGlvLnNlZWsodGhpcy5fY3VycmVudFRpbWUgLyB0aGlzLmdsb2JhbERhdGEuZnJhbWVSYXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkgey8vIHRoaXMuYXVkaW8ucGxheSgpXG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXVkaW8ucGF1c2UoKTtcbiAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgfTtcblxuICBBdWRpb0VsZW1lbnQucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuYXVkaW8ucGF1c2UoKTtcbiAgICB0aGlzLl9pc1BsYXlpbmcgPSBmYWxzZTtcbiAgICB0aGlzLl9jYW5QbGF5ID0gZmFsc2U7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY2FuUGxheSA9IHRydWU7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5zZXRSYXRlID0gZnVuY3Rpb24gKHJhdGVWYWx1ZSkge1xuICAgIHRoaXMuYXVkaW8ucmF0ZShyYXRlVmFsdWUpO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUudm9sdW1lID0gZnVuY3Rpb24gKHZvbHVtZVZhbHVlKSB7XG4gICAgdGhpcy5fdm9sdW1lTXVsdGlwbGllciA9IHZvbHVtZVZhbHVlO1xuICAgIHRoaXMuX3ByZXZpb3VzVm9sdW1lID0gdm9sdW1lVmFsdWUgKiB0aGlzLl92b2x1bWU7XG4gICAgdGhpcy5hdWRpby52b2x1bWUodGhpcy5fcHJldmlvdXNWb2x1bWUpO1xuICB9O1xuXG4gIEF1ZGlvRWxlbWVudC5wcm90b3R5cGUuZ2V0QmFzZUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge307XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge307XG5cbiAgQXVkaW9FbGVtZW50LnByb3RvdHlwZS5pbml0RXhwcmVzc2lvbnMgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBmdW5jdGlvbiBCYXNlUmVuZGVyZXIoKSB7fVxuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuY2hlY2tMYXllcnMgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcbiAgICB2YXIgZGF0YTtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gdHJ1ZTtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgZGF0YSA9IHRoaXMubGF5ZXJzW2ldO1xuXG4gICAgICAgIGlmIChkYXRhLmlwIC0gZGF0YS5zdCA8PSBudW0gLSB0aGlzLmxheWVyc1tpXS5zdCAmJiBkYXRhLm9wIC0gZGF0YS5zdCA+IG51bSAtIHRoaXMubGF5ZXJzW2ldLnN0KSB7XG4gICAgICAgICAgdGhpcy5idWlsZEl0ZW0oaSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IHRoaXMuZWxlbWVudHNbaV0gPyB0aGlzLmNvbXBsZXRlTGF5ZXJzIDogZmFsc2U7XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja1BlbmRpbmdFbGVtZW50cygpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlSXRlbSA9IGZ1bmN0aW9uIChsYXllcikge1xuICAgIHN3aXRjaCAobGF5ZXIudHkpIHtcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlSW1hZ2UobGF5ZXIpO1xuXG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZUNvbXAobGF5ZXIpO1xuXG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVNvbGlkKGxheWVyKTtcblxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVOdWxsKGxheWVyKTtcblxuICAgICAgY2FzZSA0OlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVTaGFwZShsYXllcik7XG5cbiAgICAgIGNhc2UgNTpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVGV4dChsYXllcik7XG5cbiAgICAgIGNhc2UgNjpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlQXVkaW8obGF5ZXIpO1xuXG4gICAgICBjYXNlIDEzOlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVDYW1lcmEobGF5ZXIpO1xuXG4gICAgICBjYXNlIDE1OlxuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVGb290YWdlKGxheWVyKTtcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlTnVsbChsYXllcik7XG4gICAgfVxuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ2FtZXJhID0gZnVuY3Rpb24gKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignWW91XFwncmUgdXNpbmcgYSAzZCBjYW1lcmEuIFRyeSB0aGUgaHRtbCByZW5kZXJlci4nKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZUF1ZGlvID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IEF1ZGlvRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlRm9vdGFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBGb290YWdlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRBbGxJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLmJ1aWxkSXRlbShpKTtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrUGVuZGluZ0VsZW1lbnRzKCk7XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5pbmNsdWRlTGF5ZXJzID0gZnVuY3Rpb24gKG5ld0xheWVycykge1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSBmYWxzZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gbmV3TGF5ZXJzLmxlbmd0aDtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaiA9IDA7XG5cbiAgICAgIHdoaWxlIChqIDwgakxlbikge1xuICAgICAgICBpZiAodGhpcy5sYXllcnNbal0uaWQgPT09IG5ld0xheWVyc1tpXS5pZCkge1xuICAgICAgICAgIHRoaXMubGF5ZXJzW2pdID0gbmV3TGF5ZXJzW2ldO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaiArPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLnNldFByb2plY3RJbnRlcmZhY2UgPSBmdW5jdGlvbiAocEludGVyZmFjZSkge1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlID0gcEludGVyZmFjZTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmluaXRJdGVtcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuZ2xvYmFsRGF0YS5wcm9ncmVzc2l2ZUxvYWQpIHtcbiAgICAgIHRoaXMuYnVpbGRBbGxJdGVtcygpO1xuICAgIH1cbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLmJ1aWxkRWxlbWVudFBhcmVudGluZyA9IGZ1bmN0aW9uIChlbGVtZW50LCBwYXJlbnROYW1lLCBoaWVyYXJjaHkpIHtcbiAgICB2YXIgZWxlbWVudHMgPSB0aGlzLmVsZW1lbnRzO1xuICAgIHZhciBsYXllcnMgPSB0aGlzLmxheWVycztcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IGxheWVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKGxheWVyc1tpXS5pbmQgPT0gcGFyZW50TmFtZSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgICAgICBpZiAoIWVsZW1lbnRzW2ldIHx8IGVsZW1lbnRzW2ldID09PSB0cnVlKSB7XG4gICAgICAgICAgdGhpcy5idWlsZEl0ZW0oaSk7XG4gICAgICAgICAgdGhpcy5hZGRQZW5kaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBoaWVyYXJjaHkucHVzaChlbGVtZW50c1tpXSk7XG4gICAgICAgICAgZWxlbWVudHNbaV0uc2V0QXNQYXJlbnQoKTtcblxuICAgICAgICAgIGlmIChsYXllcnNbaV0ucGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYnVpbGRFbGVtZW50UGFyZW50aW5nKGVsZW1lbnQsIGxheWVyc1tpXS5wYXJlbnQsIGhpZXJhcmNoeSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0SGllcmFyY2h5KGhpZXJhcmNoeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5hZGRQZW5kaW5nRWxlbWVudCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMucHVzaChlbGVtZW50KTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLnNlYXJjaEV4dHJhQ29tcG9zaXRpb25zID0gZnVuY3Rpb24gKGFzc2V0cykge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBhc3NldHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoYXNzZXRzW2ldLnh0KSB7XG4gICAgICAgIHZhciBjb21wID0gdGhpcy5jcmVhdGVDb21wKGFzc2V0c1tpXSk7XG4gICAgICAgIGNvbXAuaW5pdEV4cHJlc3Npb25zKCk7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlLnJlZ2lzdGVyQ29tcG9zaXRpb24oY29tcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5SWQgPSBmdW5jdGlvbiAoaW5kKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXS5kYXRhLmluZCA9PT0gaW5kKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsZW1lbnRzW2ldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIEJhc2VSZW5kZXJlci5wcm90b3R5cGUuZ2V0RWxlbWVudEJ5UGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgdmFyIHBhdGhWYWx1ZSA9IHBhdGguc2hpZnQoKTtcbiAgICB2YXIgZWxlbWVudDtcblxuICAgIGlmICh0eXBlb2YgcGF0aFZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgZWxlbWVudCA9IHRoaXMuZWxlbWVudHNbcGF0aFZhbHVlXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5lbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXS5kYXRhLm5tID09PSBwYXRoVmFsdWUpIHtcbiAgICAgICAgICBlbGVtZW50ID0gdGhpcy5lbGVtZW50c1tpXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQuZ2V0RWxlbWVudEJ5UGF0aChwYXRoKTtcbiAgfTtcblxuICBCYXNlUmVuZGVyZXIucHJvdG90eXBlLnNldHVwR2xvYmFsRGF0YSA9IGZ1bmN0aW9uIChhbmltRGF0YSwgZm9udHNDb250YWluZXIpIHtcbiAgICB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIgPSBuZXcgRm9udE1hbmFnZXIoKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuc2xvdE1hbmFnZXIgPSBzbG90RmFjdG9yeShhbmltRGF0YSk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmFkZENoYXJzKGFuaW1EYXRhLmNoYXJzKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuYWRkRm9udHMoYW5pbURhdGEuZm9udHMsIGZvbnRzQ29udGFpbmVyKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZ2V0QXNzZXREYXRhID0gdGhpcy5hbmltYXRpb25JdGVtLmdldEFzc2V0RGF0YS5iaW5kKHRoaXMuYW5pbWF0aW9uSXRlbSk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmdldEFzc2V0c1BhdGggPSB0aGlzLmFuaW1hdGlvbkl0ZW0uZ2V0QXNzZXRzUGF0aC5iaW5kKHRoaXMuYW5pbWF0aW9uSXRlbSk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmltYWdlTG9hZGVyID0gdGhpcy5hbmltYXRpb25JdGVtLmltYWdlUHJlbG9hZGVyO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5hdWRpb0NvbnRyb2xsZXIgPSB0aGlzLmFuaW1hdGlvbkl0ZW0uYXVkaW9Db250cm9sbGVyO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZUlkID0gMDtcbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVSYXRlID0gYW5pbURhdGEuZnI7XG4gICAgdGhpcy5nbG9iYWxEYXRhLm5tID0gYW5pbURhdGEubm07XG4gICAgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplID0ge1xuICAgICAgdzogYW5pbURhdGEudyxcbiAgICAgIGg6IGFuaW1EYXRhLmhcbiAgICB9O1xuICB9O1xuXG4gIHZhciBlZmZlY3RUeXBlcyA9IHtcbiAgICBUUkFOU0ZPUk1fRUZGRUNUOiAndHJhbnNmb3JtRUZmZWN0J1xuICB9O1xuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybUVsZW1lbnQoKSB7fVxuXG4gIFRyYW5zZm9ybUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGluaXRUcmFuc2Zvcm06IGZ1bmN0aW9uIGluaXRUcmFuc2Zvcm0oKSB7XG4gICAgICB2YXIgbWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybSA9IHtcbiAgICAgICAgbVByb3A6IHRoaXMuZGF0YS5rcyA/IFRyYW5zZm9ybVByb3BlcnR5RmFjdG9yeS5nZXRUcmFuc2Zvcm1Qcm9wZXJ0eSh0aGlzLCB0aGlzLmRhdGEua3MsIHRoaXMpIDoge1xuICAgICAgICAgIG86IDBcbiAgICAgICAgfSxcbiAgICAgICAgX21hdE1kZjogZmFsc2UsXG4gICAgICAgIF9sb2NhbE1hdE1kZjogZmFsc2UsXG4gICAgICAgIF9vcE1kZjogZmFsc2UsXG4gICAgICAgIG1hdDogbWF0LFxuICAgICAgICBsb2NhbE1hdDogbWF0LFxuICAgICAgICBsb2NhbE9wYWNpdHk6IDFcbiAgICAgIH07XG5cbiAgICAgIGlmICh0aGlzLmRhdGEuYW8pIHtcbiAgICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5hdXRvT3JpZW50ZWQgPSB0cnVlO1xuICAgICAgfSAvLyBUT0RPOiBjaGVjayBUWVBFIDExOiBHdWlkZWQgZWxlbWVudHNcblxuXG4gICAgICBpZiAodGhpcy5kYXRhLnR5ICE9PSAxMSkgey8vIHRoaXMuY3JlYXRlRWxlbWVudHMoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlclRyYW5zZm9ybTogZnVuY3Rpb24gcmVuZGVyVHJhbnNmb3JtKCkge1xuICAgICAgdGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8uX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWU7XG4gICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9tYXRNZGYgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lO1xuXG4gICAgICBpZiAodGhpcy5oaWVyYXJjaHkpIHtcbiAgICAgICAgdmFyIG1hdDtcbiAgICAgICAgdmFyIGZpbmFsTWF0ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tYXQ7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuaGllcmFyY2h5Lmxlbmd0aDsgLy8gQ2hlY2tpbmcgaWYgYW55IG9mIHRoZSB0cmFuc2Zvcm1hdGlvbiBtYXRyaWNlcyBpbiB0aGUgaGllcmFyY2h5IGNoYWluIGhhcyBjaGFuZ2VkLlxuXG4gICAgICAgIGlmICghdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKSB7XG4gICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5fbWRmKSB7XG4gICAgICAgICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZiA9IHRydWU7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICAgIG1hdCA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3Audi5wcm9wcztcbiAgICAgICAgICBmaW5hbE1hdC5jbG9uZUZyb21Qcm9wcyhtYXQpO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBmaW5hbE1hdC5tdWx0aXBseSh0aGlzLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC52KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZikge1xuICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZiA9IHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxPcGFjaXR5ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnY7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJMb2NhbFRyYW5zZm9ybTogZnVuY3Rpb24gcmVuZGVyTG9jYWxUcmFuc2Zvcm0oKSB7XG4gICAgICBpZiAodGhpcy5sb2NhbFRyYW5zZm9ybXMpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gdGhpcy5sb2NhbFRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZiA9IHRoaXMuZmluYWxUcmFuc2Zvcm0uX21hdE1kZjtcblxuICAgICAgICBpZiAoIXRoaXMuZmluYWxUcmFuc2Zvcm0uX2xvY2FsTWF0TWRmIHx8ICF0aGlzLmZpbmFsVHJhbnNmb3JtLl9vcE1kZikge1xuICAgICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5sb2NhbFRyYW5zZm9ybXNbaV0uX21kZikge1xuICAgICAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZiA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmxvY2FsVHJhbnNmb3Jtc1tpXS5fb3BNZGYgJiYgIXRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxPcGFjaXR5ID0gdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5vLnY7XG4gICAgICAgICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZikge1xuICAgICAgICAgIHZhciBsb2NhbE1hdCA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxNYXQ7XG4gICAgICAgICAgdGhpcy5sb2NhbFRyYW5zZm9ybXNbMF0ubWF0cml4LmNsb25lKGxvY2FsTWF0KTtcblxuICAgICAgICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGxtYXQgPSB0aGlzLmxvY2FsVHJhbnNmb3Jtc1tpXS5tYXRyaXg7XG4gICAgICAgICAgICBsb2NhbE1hdC5tdWx0aXBseShsbWF0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsb2NhbE1hdC5tdWx0aXBseSh0aGlzLmZpbmFsVHJhbnNmb3JtLm1hdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fb3BNZGYpIHtcbiAgICAgICAgICB2YXIgbG9jYWxPcCA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxPcGFjaXR5O1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBsb2NhbE9wICo9IHRoaXMubG9jYWxUcmFuc2Zvcm1zW2ldLm9wYWNpdHkgKiAwLjAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxPcGFjaXR5ID0gbG9jYWxPcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc2VhcmNoRWZmZWN0VHJhbnNmb3JtczogZnVuY3Rpb24gc2VhcmNoRWZmZWN0VHJhbnNmb3JtcygpIHtcbiAgICAgIGlmICh0aGlzLnJlbmRlcmFibGVFZmZlY3RzTWFuYWdlcikge1xuICAgICAgICB2YXIgdHJhbnNmb3JtRWZmZWN0cyA9IHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyLmdldEVmZmVjdHMoZWZmZWN0VHlwZXMuVFJBTlNGT1JNX0VGRkVDVCk7XG5cbiAgICAgICAgaWYgKHRyYW5zZm9ybUVmZmVjdHMubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5sb2NhbFRyYW5zZm9ybXMgPSBbXTtcbiAgICAgICAgICB0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsTWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgICB2YXIgbGVuID0gdHJhbnNmb3JtRWZmZWN0cy5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxUcmFuc2Zvcm1zLnB1c2godHJhbnNmb3JtRWZmZWN0c1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBnbG9iYWxUb0xvY2FsOiBmdW5jdGlvbiBnbG9iYWxUb0xvY2FsKHB0KSB7XG4gICAgICB2YXIgdHJhbnNmb3JtcyA9IFtdO1xuICAgICAgdHJhbnNmb3Jtcy5wdXNoKHRoaXMuZmluYWxUcmFuc2Zvcm0pO1xuICAgICAgdmFyIGZsYWcgPSB0cnVlO1xuICAgICAgdmFyIGNvbXAgPSB0aGlzLmNvbXA7XG5cbiAgICAgIHdoaWxlIChmbGFnKSB7XG4gICAgICAgIGlmIChjb21wLmZpbmFsVHJhbnNmb3JtKSB7XG4gICAgICAgICAgaWYgKGNvbXAuZGF0YS5oYXNNYXNrKSB7XG4gICAgICAgICAgICB0cmFuc2Zvcm1zLnNwbGljZSgwLCAwLCBjb21wLmZpbmFsVHJhbnNmb3JtKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb21wID0gY29tcC5jb21wO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0cmFuc2Zvcm1zLmxlbmd0aDtcbiAgICAgIHZhciBwdE5ldztcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHB0TmV3ID0gdHJhbnNmb3Jtc1tpXS5tYXQuYXBwbHlUb1BvaW50QXJyYXkoMCwgMCwgMCk7IC8vIHB0TmV3ID0gdHJhbnNmb3Jtc1tpXS5tYXQuYXBwbHlUb1BvaW50QXJyYXkocHRbMF0scHRbMV0scHRbMl0pO1xuXG4gICAgICAgIHB0ID0gW3B0WzBdIC0gcHROZXdbMF0sIHB0WzFdIC0gcHROZXdbMV0sIDBdO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHQ7XG4gICAgfSxcbiAgICBtSGVscGVyOiBuZXcgTWF0cml4KClcbiAgfTtcblxuICBmdW5jdGlvbiBNYXNrRWxlbWVudChkYXRhLCBlbGVtZW50LCBnbG9iYWxEYXRhKSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IGdsb2JhbERhdGE7XG4gICAgdGhpcy5zdG9yZWREYXRhID0gW107XG4gICAgdGhpcy5tYXNrc1Byb3BlcnRpZXMgPSB0aGlzLmRhdGEubWFza3NQcm9wZXJ0aWVzIHx8IFtdO1xuICAgIHRoaXMubWFza0VsZW1lbnQgPSBudWxsO1xuICAgIHZhciBkZWZzID0gdGhpcy5nbG9iYWxEYXRhLmRlZnM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubWFza3NQcm9wZXJ0aWVzID8gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoIDogMDtcbiAgICB0aGlzLnZpZXdEYXRhID0gY3JlYXRlU2l6ZWRBcnJheShsZW4pO1xuICAgIHRoaXMuc29saWRQYXRoID0gJyc7XG4gICAgdmFyIHBhdGg7XG4gICAgdmFyIHByb3BlcnRpZXMgPSB0aGlzLm1hc2tzUHJvcGVydGllcztcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHZhciBjdXJyZW50TWFza3MgPSBbXTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbjtcbiAgICB2YXIgbGF5ZXJJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIHZhciByZWN0O1xuICAgIHZhciBleHBhbnNvcjtcbiAgICB2YXIgZmVNb3JwaDtcbiAgICB2YXIgeDtcbiAgICB2YXIgbWFza1R5cGUgPSAnY2xpcFBhdGgnO1xuICAgIHZhciBtYXNrUmVmID0gJ2NsaXAtcGF0aCc7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICdhJyAmJiBwcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJyB8fCBwcm9wZXJ0aWVzW2ldLmludiB8fCBwcm9wZXJ0aWVzW2ldLm8uayAhPT0gMTAwIHx8IHByb3BlcnRpZXNbaV0uby54KSB7XG4gICAgICAgIG1hc2tUeXBlID0gJ21hc2snO1xuICAgICAgICBtYXNrUmVmID0gJ21hc2snO1xuICAgICAgfVxuXG4gICAgICBpZiAoKHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ3MnIHx8IHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ2knKSAmJiBjb3VudCA9PT0gMCkge1xuICAgICAgICByZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTtcbiAgICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnI2ZmZmZmZicpO1xuICAgICAgICByZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmVsZW1lbnQuY29tcC5kYXRhLncgfHwgMCk7XG4gICAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmVsZW1lbnQuY29tcC5kYXRhLmggfHwgMCk7XG4gICAgICAgIGN1cnJlbnRNYXNrcy5wdXNoKHJlY3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVjdCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHBhdGggPSBjcmVhdGVOUygncGF0aCcpO1xuXG4gICAgICBpZiAocHJvcGVydGllc1tpXS5tb2RlID09PSAnbicpIHtcbiAgICAgICAgLy8gVE9ETyBtb3ZlIHRoaXMgdG8gYSBmYWN0b3J5IG9yIHRvIGEgY29uc3RydWN0b3JcbiAgICAgICAgdGhpcy52aWV3RGF0YVtpXSA9IHtcbiAgICAgICAgICBvcDogUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcy5lbGVtZW50LCBwcm9wZXJ0aWVzW2ldLm8sIDAsIDAuMDEsIHRoaXMuZWxlbWVudCksXG4gICAgICAgICAgcHJvcDogU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXSwgMyksXG4gICAgICAgICAgZWxlbTogcGF0aCxcbiAgICAgICAgICBsYXN0UGF0aDogJydcbiAgICAgICAgfTtcbiAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChwYXRoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgcHJvcGVydGllc1tpXS5tb2RlID09PSAncycgPyAnIzAwMDAwMCcgOiAnI2ZmZmZmZicpO1xuICAgICAgICBwYXRoLnNldEF0dHJpYnV0ZSgnY2xpcC1ydWxlJywgJ25vbnplcm8nKTtcbiAgICAgICAgdmFyIGZpbHRlcklEO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLnguayAhPT0gMCkge1xuICAgICAgICAgIG1hc2tUeXBlID0gJ21hc2snO1xuICAgICAgICAgIG1hc2tSZWYgPSAnbWFzayc7XG4gICAgICAgICAgeCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMuZWxlbWVudCwgcHJvcGVydGllc1tpXS54LCAwLCBudWxsLCB0aGlzLmVsZW1lbnQpO1xuICAgICAgICAgIGZpbHRlcklEID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICAgICAgZXhwYW5zb3IgPSBjcmVhdGVOUygnZmlsdGVyJyk7XG4gICAgICAgICAgZXhwYW5zb3Iuc2V0QXR0cmlidXRlKCdpZCcsIGZpbHRlcklEKTtcbiAgICAgICAgICBmZU1vcnBoID0gY3JlYXRlTlMoJ2ZlTW9ycGhvbG9neScpO1xuICAgICAgICAgIGZlTW9ycGguc2V0QXR0cmlidXRlKCdvcGVyYXRvcicsICdlcm9kZScpO1xuICAgICAgICAgIGZlTW9ycGguc2V0QXR0cmlidXRlKCdpbicsICdTb3VyY2VHcmFwaGljJyk7XG4gICAgICAgICAgZmVNb3JwaC5zZXRBdHRyaWJ1dGUoJ3JhZGl1cycsICcwJyk7XG4gICAgICAgICAgZXhwYW5zb3IuYXBwZW5kQ2hpbGQoZmVNb3JwaCk7XG4gICAgICAgICAgZGVmcy5hcHBlbmRDaGlsZChleHBhbnNvcik7XG4gICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsIHByb3BlcnRpZXNbaV0ubW9kZSA9PT0gJ3MnID8gJyMwMDAwMDAnIDogJyNmZmZmZmYnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmZU1vcnBoID0gbnVsbDtcbiAgICAgICAgICB4ID0gbnVsbDtcbiAgICAgICAgfSAvLyBUT0RPIG1vdmUgdGhpcyB0byBhIGZhY3Rvcnkgb3IgdG8gYSBjb25zdHJ1Y3RvclxuXG5cbiAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldID0ge1xuICAgICAgICAgIGVsZW06IHBhdGgsXG4gICAgICAgICAgeDogeCxcbiAgICAgICAgICBleHBhbjogZmVNb3JwaCxcbiAgICAgICAgICBsYXN0UGF0aDogJycsXG4gICAgICAgICAgbGFzdE9wZXJhdG9yOiAnJyxcbiAgICAgICAgICBmaWx0ZXJJZDogZmlsdGVySUQsXG4gICAgICAgICAgbGFzdFJhZGl1czogMFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChwcm9wZXJ0aWVzW2ldLm1vZGUgPT09ICdpJykge1xuICAgICAgICAgIGpMZW4gPSBjdXJyZW50TWFza3MubGVuZ3RoO1xuICAgICAgICAgIHZhciBnID0gY3JlYXRlTlMoJ2cnKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGcuYXBwZW5kQ2hpbGQoY3VycmVudE1hc2tzW2pdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbWFzayA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICAgICAgbWFzay5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdhbHBoYScpO1xuICAgICAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdpZCcsIGxheWVySWQgKyAnXycgKyBjb3VudCk7XG4gICAgICAgICAgbWFzay5hcHBlbmRDaGlsZChwYXRoKTtcbiAgICAgICAgICBkZWZzLmFwcGVuZENoaWxkKG1hc2spO1xuICAgICAgICAgIGcuc2V0QXR0cmlidXRlKCdtYXNrJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBsYXllcklkICsgJ18nICsgY291bnQgKyAnKScpO1xuICAgICAgICAgIGN1cnJlbnRNYXNrcy5sZW5ndGggPSAwO1xuICAgICAgICAgIGN1cnJlbnRNYXNrcy5wdXNoKGcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRNYXNrcy5wdXNoKHBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BlcnRpZXNbaV0uaW52ICYmICF0aGlzLnNvbGlkUGF0aCkge1xuICAgICAgICAgIHRoaXMuc29saWRQYXRoID0gdGhpcy5jcmVhdGVMYXllclNvbGlkUGF0aCgpO1xuICAgICAgICB9IC8vIFRPRE8gbW92ZSB0aGlzIHRvIGEgZmFjdG9yeSBvciB0byBhIGNvbnN0cnVjdG9yXG5cblxuICAgICAgICB0aGlzLnZpZXdEYXRhW2ldID0ge1xuICAgICAgICAgIGVsZW06IHBhdGgsXG4gICAgICAgICAgbGFzdFBhdGg6ICcnLFxuICAgICAgICAgIG9wOiBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLmVsZW1lbnQsIHByb3BlcnRpZXNbaV0ubywgMCwgMC4wMSwgdGhpcy5lbGVtZW50KSxcbiAgICAgICAgICBwcm9wOiBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRTaGFwZVByb3AodGhpcy5lbGVtZW50LCBwcm9wZXJ0aWVzW2ldLCAzKSxcbiAgICAgICAgICBpbnZSZWN0OiByZWN0XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKCF0aGlzLnZpZXdEYXRhW2ldLnByb3Auaykge1xuICAgICAgICAgIHRoaXMuZHJhd1BhdGgocHJvcGVydGllc1tpXSwgdGhpcy52aWV3RGF0YVtpXS5wcm9wLnYsIHRoaXMudmlld0RhdGFbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXNrRWxlbWVudCA9IGNyZWF0ZU5TKG1hc2tUeXBlKTtcbiAgICBsZW4gPSBjdXJyZW50TWFza3MubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLm1hc2tFbGVtZW50LmFwcGVuZENoaWxkKGN1cnJlbnRNYXNrc1tpXSk7XG4gICAgfVxuXG4gICAgaWYgKGNvdW50ID4gMCkge1xuICAgICAgdGhpcy5tYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgbGF5ZXJJZCk7XG4gICAgICB0aGlzLmVsZW1lbnQubWFza2VkRWxlbWVudC5zZXRBdHRyaWJ1dGUobWFza1JlZiwgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBsYXllcklkICsgJyknKTtcbiAgICAgIGRlZnMuYXBwZW5kQ2hpbGQodGhpcy5tYXNrRWxlbWVudCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudmlld0RhdGEubGVuZ3RoKSB7XG4gICAgICB0aGlzLmVsZW1lbnQuYWRkUmVuZGVyYWJsZUNvbXBvbmVudCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza1Byb3BlcnR5ID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHJldHVybiB0aGlzLnZpZXdEYXRhW3Bvc10ucHJvcDtcbiAgfTtcblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoaXNGaXJzdEZyYW1lKSB7XG4gICAgdmFyIGZpbmFsTWF0ID0gdGhpcy5lbGVtZW50LmZpbmFsVHJhbnNmb3JtLm1hdDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5tYXNrc1Byb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy52aWV3RGF0YVtpXS5wcm9wLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMuZHJhd1BhdGgodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0sIHRoaXMudmlld0RhdGFbaV0ucHJvcC52LCB0aGlzLnZpZXdEYXRhW2ldKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudmlld0RhdGFbaV0ub3AuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdGhpcy52aWV3RGF0YVtpXS5lbGVtLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgdGhpcy52aWV3RGF0YVtpXS5vcC52KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWFza3NQcm9wZXJ0aWVzW2ldLm1vZGUgIT09ICduJykge1xuICAgICAgICBpZiAodGhpcy52aWV3RGF0YVtpXS5pbnZSZWN0ICYmICh0aGlzLmVsZW1lbnQuZmluYWxUcmFuc2Zvcm0ubVByb3AuX21kZiB8fCBpc0ZpcnN0RnJhbWUpKSB7XG4gICAgICAgICAgdGhpcy52aWV3RGF0YVtpXS5pbnZSZWN0LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgZmluYWxNYXQuZ2V0SW52ZXJzZU1hdHJpeCgpLnRvMmRDU1MoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zdG9yZWREYXRhW2ldLnggJiYgKHRoaXMuc3RvcmVkRGF0YVtpXS54Ll9tZGYgfHwgaXNGaXJzdEZyYW1lKSkge1xuICAgICAgICAgIHZhciBmZU1vcnBoID0gdGhpcy5zdG9yZWREYXRhW2ldLmV4cGFuO1xuXG4gICAgICAgICAgaWYgKHRoaXMuc3RvcmVkRGF0YVtpXS54LnYgPCAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdG9yZWREYXRhW2ldLmxhc3RPcGVyYXRvciAhPT0gJ2Vyb2RlJykge1xuICAgICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0ubGFzdE9wZXJhdG9yID0gJ2Vyb2RlJztcbiAgICAgICAgICAgICAgdGhpcy5zdG9yZWREYXRhW2ldLmVsZW0uc2V0QXR0cmlidXRlKCdmaWx0ZXInLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIHRoaXMuc3RvcmVkRGF0YVtpXS5maWx0ZXJJZCArICcpJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZlTW9ycGguc2V0QXR0cmlidXRlKCdyYWRpdXMnLCAtdGhpcy5zdG9yZWREYXRhW2ldLngudik7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0b3JlZERhdGFbaV0ubGFzdE9wZXJhdG9yICE9PSAnZGlsYXRlJykge1xuICAgICAgICAgICAgICB0aGlzLnN0b3JlZERhdGFbaV0ubGFzdE9wZXJhdG9yID0gJ2RpbGF0ZSc7XG4gICAgICAgICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXS5lbGVtLnNldEF0dHJpYnV0ZSgnZmlsdGVyJywgbnVsbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3RvcmVkRGF0YVtpXS5lbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgdGhpcy5zdG9yZWREYXRhW2ldLngudiAqIDIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza2VsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFza0VsZW1lbnQ7XG4gIH07XG5cbiAgTWFza0VsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUxheWVyU29saWRQYXRoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXRoID0gJ00wLDAgJztcbiAgICBwYXRoICs9ICcgaCcgKyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztcbiAgICBwYXRoICs9ICcgdicgKyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICBwYXRoICs9ICcgaC0nICsgdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgcGF0aCArPSAnIHYtJyArIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oICsgJyAnO1xuICAgIHJldHVybiBwYXRoO1xuICB9O1xuXG4gIE1hc2tFbGVtZW50LnByb3RvdHlwZS5kcmF3UGF0aCA9IGZ1bmN0aW9uIChwYXRoRGF0YSwgcGF0aE5vZGVzLCB2aWV3RGF0YSkge1xuICAgIHZhciBwYXRoU3RyaW5nID0gJyBNJyArIHBhdGhOb2Rlcy52WzBdWzBdICsgJywnICsgcGF0aE5vZGVzLnZbMF1bMV07XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICBsZW4gPSBwYXRoTm9kZXMuX2xlbmd0aDtcblxuICAgIGZvciAoaSA9IDE7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgLy8gcGF0aFN0cmluZyArPSBcIiBDXCIrcGF0aE5vZGVzLm9baS0xXVswXSsnLCcrcGF0aE5vZGVzLm9baS0xXVsxXSArIFwiIFwiK3BhdGhOb2Rlcy5pW2ldWzBdKycsJytwYXRoTm9kZXMuaVtpXVsxXSArIFwiIFwiK3BhdGhOb2Rlcy52W2ldWzBdKycsJytwYXRoTm9kZXMudltpXVsxXTtcbiAgICAgIHBhdGhTdHJpbmcgKz0gJyBDJyArIHBhdGhOb2Rlcy5vW2kgLSAxXVswXSArICcsJyArIHBhdGhOb2Rlcy5vW2kgLSAxXVsxXSArICcgJyArIHBhdGhOb2Rlcy5pW2ldWzBdICsgJywnICsgcGF0aE5vZGVzLmlbaV1bMV0gKyAnICcgKyBwYXRoTm9kZXMudltpXVswXSArICcsJyArIHBhdGhOb2Rlcy52W2ldWzFdO1xuICAgIH0gLy8gcGF0aFN0cmluZyArPSBcIiBDXCIrcGF0aE5vZGVzLm9baS0xXVswXSsnLCcrcGF0aE5vZGVzLm9baS0xXVsxXSArIFwiIFwiK3BhdGhOb2Rlcy5pWzBdWzBdKycsJytwYXRoTm9kZXMuaVswXVsxXSArIFwiIFwiK3BhdGhOb2Rlcy52WzBdWzBdKycsJytwYXRoTm9kZXMudlswXVsxXTtcblxuXG4gICAgaWYgKHBhdGhOb2Rlcy5jICYmIGxlbiA+IDEpIHtcbiAgICAgIHBhdGhTdHJpbmcgKz0gJyBDJyArIHBhdGhOb2Rlcy5vW2kgLSAxXVswXSArICcsJyArIHBhdGhOb2Rlcy5vW2kgLSAxXVsxXSArICcgJyArIHBhdGhOb2Rlcy5pWzBdWzBdICsgJywnICsgcGF0aE5vZGVzLmlbMF1bMV0gKyAnICcgKyBwYXRoTm9kZXMudlswXVswXSArICcsJyArIHBhdGhOb2Rlcy52WzBdWzFdO1xuICAgIH0gLy8gcGF0aE5vZGVzLl9fcmVuZGVyZWRTdHJpbmcgPSBwYXRoU3RyaW5nO1xuXG5cbiAgICBpZiAodmlld0RhdGEubGFzdFBhdGggIT09IHBhdGhTdHJpbmcpIHtcbiAgICAgIHZhciBwYXRoU2hhcGVWYWx1ZSA9ICcnO1xuXG4gICAgICBpZiAodmlld0RhdGEuZWxlbSkge1xuICAgICAgICBpZiAocGF0aE5vZGVzLmMpIHtcbiAgICAgICAgICBwYXRoU2hhcGVWYWx1ZSA9IHBhdGhEYXRhLmludiA/IHRoaXMuc29saWRQYXRoICsgcGF0aFN0cmluZyA6IHBhdGhTdHJpbmc7XG4gICAgICAgIH1cblxuICAgICAgICB2aWV3RGF0YS5lbGVtLnNldEF0dHJpYnV0ZSgnZCcsIHBhdGhTaGFwZVZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgdmlld0RhdGEubGFzdFBhdGggPSBwYXRoU3RyaW5nO1xuICAgIH1cbiAgfTtcblxuICBNYXNrRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IG51bGw7XG4gICAgdGhpcy5tYXNrRWxlbWVudCA9IG51bGw7XG4gICAgdGhpcy5kYXRhID0gbnVsbDtcbiAgICB0aGlzLm1hc2tzUHJvcGVydGllcyA9IG51bGw7XG4gIH07XG5cbiAgdmFyIGZpbHRlcnNGYWN0b3J5ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHt9O1xuICAgIG9iLmNyZWF0ZUZpbHRlciA9IGNyZWF0ZUZpbHRlcjtcbiAgICBvYi5jcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyID0gY3JlYXRlQWxwaGFUb0x1bWluYW5jZUZpbHRlcjtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZpbHRlcihmaWxJZCwgc2tpcENvb3JkaW5hdGVzKSB7XG4gICAgICB2YXIgZmlsID0gY3JlYXRlTlMoJ2ZpbHRlcicpO1xuICAgICAgZmlsLnNldEF0dHJpYnV0ZSgnaWQnLCBmaWxJZCk7XG5cbiAgICAgIGlmIChza2lwQ29vcmRpbmF0ZXMgIT09IHRydWUpIHtcbiAgICAgICAgZmlsLnNldEF0dHJpYnV0ZSgnZmlsdGVyVW5pdHMnLCAnb2JqZWN0Qm91bmRpbmdCb3gnKTtcbiAgICAgICAgZmlsLnNldEF0dHJpYnV0ZSgneCcsICcwJScpO1xuICAgICAgICBmaWwuc2V0QXR0cmlidXRlKCd5JywgJzAlJyk7XG4gICAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzEwMCUnKTtcbiAgICAgICAgZmlsLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgJzEwMCUnKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyKCkge1xuICAgICAgdmFyIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMCAwIDAgMSAwICAwIDAgMCAxIDAgIDAgMCAwIDEgMCAgMCAwIDAgMSAxJyk7XG4gICAgICByZXR1cm4gZmVDb2xvck1hdHJpeDtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgZmVhdHVyZVN1cHBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge1xuICAgICAgbWFza1R5cGU6IHRydWUsXG4gICAgICBzdmdMdW1hSGlkZGVuOiB0cnVlLFxuICAgICAgb2Zmc2NyZWVuQ2FudmFzOiB0eXBlb2YgT2Zmc2NyZWVuQ2FudmFzICE9PSAndW5kZWZpbmVkJ1xuICAgIH07XG5cbiAgICBpZiAoL01TSUUgMTAvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9NU0lFIDkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC9ydjoxMS4wL2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSB8fCAvRWRnZVxcL1xcZC4vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7XG4gICAgICBvYi5tYXNrVHlwZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlmICgvZmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHtcbiAgICAgIG9iLnN2Z0x1bWFIaWRkZW4gPSBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgcmVnaXN0ZXJlZEVmZmVjdHMkMSA9IHt9O1xuICB2YXIgaWRQcmVmaXggPSAnZmlsdGVyX3Jlc3VsdF8nO1xuXG4gIGZ1bmN0aW9uIFNWR0VmZmVjdHMoZWxlbSkge1xuICAgIHZhciBpO1xuICAgIHZhciBzb3VyY2UgPSAnU291cmNlR3JhcGhpYyc7XG4gICAgdmFyIGxlbiA9IGVsZW0uZGF0YS5lZiA/IGVsZW0uZGF0YS5lZi5sZW5ndGggOiAwO1xuICAgIHZhciBmaWxJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIHZhciBmaWwgPSBmaWx0ZXJzRmFjdG9yeS5jcmVhdGVGaWx0ZXIoZmlsSWQsIHRydWUpO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdGhpcy5maWx0ZXJzID0gW107XG4gICAgdmFyIGZpbHRlck1hbmFnZXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGZpbHRlck1hbmFnZXIgPSBudWxsO1xuICAgICAgdmFyIHR5cGUgPSBlbGVtLmRhdGEuZWZbaV0udHk7XG5cbiAgICAgIGlmIChyZWdpc3RlcmVkRWZmZWN0cyQxW3R5cGVdKSB7XG4gICAgICAgIHZhciBFZmZlY3QgPSByZWdpc3RlcmVkRWZmZWN0cyQxW3R5cGVdLmVmZmVjdDtcbiAgICAgICAgZmlsdGVyTWFuYWdlciA9IG5ldyBFZmZlY3QoZmlsLCBlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldLCBlbGVtLCBpZFByZWZpeCArIGNvdW50LCBzb3VyY2UpO1xuICAgICAgICBzb3VyY2UgPSBpZFByZWZpeCArIGNvdW50O1xuXG4gICAgICAgIGlmIChyZWdpc3RlcmVkRWZmZWN0cyQxW3R5cGVdLmNvdW50c0FzRWZmZWN0KSB7XG4gICAgICAgICAgY291bnQgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZmlsdGVyTWFuYWdlcikge1xuICAgICAgICB0aGlzLmZpbHRlcnMucHVzaChmaWx0ZXJNYW5hZ2VyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY291bnQpIHtcbiAgICAgIGVsZW0uZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGZpbCk7XG4gICAgICBlbGVtLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbHRlcicsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZmlsSWQgKyAnKScpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlcnMubGVuZ3RoKSB7XG4gICAgICBlbGVtLmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgU1ZHRWZmZWN0cy5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoX2lzRmlyc3RGcmFtZSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmZpbHRlcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLmZpbHRlcnNbaV0ucmVuZGVyRnJhbWUoX2lzRmlyc3RGcmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIFNWR0VmZmVjdHMucHJvdG90eXBlLmdldEVmZmVjdHMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmZpbHRlcnMubGVuZ3RoO1xuICAgIHZhciBlZmZlY3RzID0gW107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmZpbHRlcnNbaV0udHlwZSA9PT0gdHlwZSkge1xuICAgICAgICBlZmZlY3RzLnB1c2godGhpcy5maWx0ZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZWZmZWN0cztcbiAgfTtcblxuICBmdW5jdGlvbiByZWdpc3RlckVmZmVjdCQxKGlkLCBlZmZlY3QsIGNvdW50c0FzRWZmZWN0KSB7XG4gICAgcmVnaXN0ZXJlZEVmZmVjdHMkMVtpZF0gPSB7XG4gICAgICBlZmZlY3Q6IGVmZmVjdCxcbiAgICAgIGNvdW50c0FzRWZmZWN0OiBjb3VudHNBc0VmZmVjdFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBTVkdCYXNlRWxlbWVudCgpIHt9XG5cbiAgU1ZHQmFzZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGluaXRSZW5kZXJlckVsZW1lbnQ6IGZ1bmN0aW9uIGluaXRSZW5kZXJlckVsZW1lbnQoKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgfSxcbiAgICBjcmVhdGVDb250YWluZXJFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKSB7XG4gICAgICB0aGlzLm1hdHRlRWxlbWVudCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuICAgICAgdGhpcy5tYXNrZWRFbGVtZW50ID0gdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICB0aGlzLl9zaXplQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdmFyIGxheWVyRWxlbWVudFBhcmVudCA9IG51bGw7IC8vIElmIHRoaXMgbGF5ZXIgYWN0cyBhcyBhIG1hc2sgZm9yIHRoZSBmb2xsb3dpbmcgbGF5ZXJcblxuICAgICAgaWYgKHRoaXMuZGF0YS50ZCkge1xuICAgICAgICB0aGlzLm1hdHRlTWFza3MgPSB7fTtcbiAgICAgICAgdmFyIGdnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgZ2cuc2V0QXR0cmlidXRlKCdpZCcsIHRoaXMubGF5ZXJJZCk7XG4gICAgICAgIGdnLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtcbiAgICAgICAgbGF5ZXJFbGVtZW50UGFyZW50ID0gZ2c7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGdnKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5kYXRhLnR0KSB7XG4gICAgICAgIHRoaXMubWF0dGVFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtcbiAgICAgICAgbGF5ZXJFbGVtZW50UGFyZW50ID0gdGhpcy5tYXR0ZUVsZW1lbnQ7XG4gICAgICAgIHRoaXMuYmFzZUVsZW1lbnQgPSB0aGlzLm1hdHRlRWxlbWVudDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYmFzZUVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5sbikge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgdGhpcy5kYXRhLmxuKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5jbCkge1xuICAgICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgdGhpcy5kYXRhLmNsKTtcbiAgICAgIH0gLy8gQ2xpcHBpbmcgY29tcG9zaXRpb25zIHRvIGhpZGUgY29udGVudCB0aGF0IGV4Y2VlZHMgYm91bmRhcmllcy4gSWYgY29sbGFwc2VkIHRyYW5zZm9ybWF0aW9ucyBpcyBvbiwgY29tcG9uZW50IHNob3VsZCBub3QgYmUgY2xpcHBlZFxuXG5cbiAgICAgIGlmICh0aGlzLmRhdGEudHkgPT09IDAgJiYgIXRoaXMuZGF0YS5oZCkge1xuICAgICAgICB2YXIgY3AgPSBjcmVhdGVOUygnY2xpcFBhdGgnKTtcbiAgICAgICAgdmFyIHB0ID0gY3JlYXRlTlMoJ3BhdGgnKTtcbiAgICAgICAgcHQuc2V0QXR0cmlidXRlKCdkJywgJ00wLDAgTCcgKyB0aGlzLmRhdGEudyArICcsMCBMJyArIHRoaXMuZGF0YS53ICsgJywnICsgdGhpcy5kYXRhLmggKyAnIEwwLCcgKyB0aGlzLmRhdGEuaCArICd6Jyk7XG4gICAgICAgIHZhciBjbGlwSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgICAgY3Auc2V0QXR0cmlidXRlKCdpZCcsIGNsaXBJZCk7XG4gICAgICAgIGNwLmFwcGVuZENoaWxkKHB0KTtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoY3ApO1xuXG4gICAgICAgIGlmICh0aGlzLmNoZWNrTWFza3MoKSkge1xuICAgICAgICAgIHZhciBjcEdyb3VwID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgICBjcEdyb3VwLnNldEF0dHJpYnV0ZSgnY2xpcC1wYXRoJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBjbGlwSWQgKyAnKScpO1xuICAgICAgICAgIGNwR3JvdXAuYXBwZW5kQ2hpbGQodGhpcy5sYXllckVsZW1lbnQpO1xuICAgICAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gY3BHcm91cDtcblxuICAgICAgICAgIGlmIChsYXllckVsZW1lbnRQYXJlbnQpIHtcbiAgICAgICAgICAgIGxheWVyRWxlbWVudFBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLnRyYW5zZm9ybWVkRWxlbWVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYmFzZUVsZW1lbnQgPSB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGlwLXBhdGgnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGNsaXBJZCArICcpJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5ibSAhPT0gMCkge1xuICAgICAgICB0aGlzLnNldEJsZW5kTW9kZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyRWxlbWVudDogZnVuY3Rpb24gcmVuZGVyRWxlbWVudCgpIHtcbiAgICAgIGlmICh0aGlzLmZpbmFsVHJhbnNmb3JtLl9sb2NhbE1hdE1kZikge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxNYXQudG8yZENTUygpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50LnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsIHRoaXMuZmluYWxUcmFuc2Zvcm0ubG9jYWxPcGFjaXR5KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3lCYXNlRWxlbWVudDogZnVuY3Rpb24gZGVzdHJveUJhc2VFbGVtZW50KCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5tYXR0ZUVsZW1lbnQgPSBudWxsO1xuICAgICAgdGhpcy5tYXNrTWFuYWdlci5kZXN0cm95KCk7XG4gICAgfSxcbiAgICBnZXRCYXNlRWxlbWVudDogZnVuY3Rpb24gZ2V0QmFzZUVsZW1lbnQoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLmhkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5iYXNlRWxlbWVudDtcbiAgICB9LFxuICAgIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzOiBmdW5jdGlvbiBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpIHtcbiAgICAgIHRoaXMubWFza01hbmFnZXIgPSBuZXcgTWFza0VsZW1lbnQodGhpcy5kYXRhLCB0aGlzLCB0aGlzLmdsb2JhbERhdGEpO1xuICAgICAgdGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIgPSBuZXcgU1ZHRWZmZWN0cyh0aGlzKTtcbiAgICAgIHRoaXMuc2VhcmNoRWZmZWN0VHJhbnNmb3JtcygpO1xuICAgIH0sXG4gICAgZ2V0TWF0dGU6IGZ1bmN0aW9uIGdldE1hdHRlKG1hdHRlVHlwZSkge1xuICAgICAgLy8gVGhpcyBzaG91bGQgbm90IGJlIGEgY29tbW9uIGNhc2UuIEJ1dCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgd2UnbGwgY3JlYXRlIHRoZSBtYXR0ZSBvYmplY3QuXG4gICAgICAvLyBJdCBzb2x2ZXMgYW5pbWF0aW9ucyB0aGF0IGhhdmUgdHdvIGNvbnNlY3V0aXZlIGxheWVycyBtYXJrZWQgYXMgbWF0dGUgbWFza3MuXG4gICAgICAvLyBXaGljaCBpcyBhbiB1bmRlZmluZWQgYmVoYXZpb3IgaW4gQUUuXG4gICAgICBpZiAoIXRoaXMubWF0dGVNYXNrcykge1xuICAgICAgICB0aGlzLm1hdHRlTWFza3MgPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLm1hdHRlTWFza3NbbWF0dGVUeXBlXSkge1xuICAgICAgICB2YXIgaWQgPSB0aGlzLmxheWVySWQgKyAnXycgKyBtYXR0ZVR5cGU7XG4gICAgICAgIHZhciBmaWxJZDtcbiAgICAgICAgdmFyIGZpbDtcbiAgICAgICAgdmFyIHVzZUVsZW1lbnQ7XG4gICAgICAgIHZhciBnZztcblxuICAgICAgICBpZiAobWF0dGVUeXBlID09PSAxIHx8IG1hdHRlVHlwZSA9PT0gMykge1xuICAgICAgICAgIHZhciBtYXNrZXIgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsIG1hdHRlVHlwZSA9PT0gMyA/ICdsdW1pbmFuY2UnIDogJ2FscGhhJyk7XG4gICAgICAgICAgdXNlRWxlbWVudCA9IGNyZWF0ZU5TKCd1c2UnKTtcbiAgICAgICAgICB1c2VFbGVtZW50LnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ2hyZWYnLCAnIycgKyB0aGlzLmxheWVySWQpO1xuICAgICAgICAgIG1hc2tlci5hcHBlbmRDaGlsZCh1c2VFbGVtZW50KTtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChtYXNrZXIpO1xuXG4gICAgICAgICAgaWYgKCFmZWF0dXJlU3VwcG9ydC5tYXNrVHlwZSAmJiBtYXR0ZVR5cGUgPT09IDEpIHtcbiAgICAgICAgICAgIG1hc2tlci5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdsdW1pbmFuY2UnKTtcbiAgICAgICAgICAgIGZpbElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICAgICAgICBmaWwgPSBmaWx0ZXJzRmFjdG9yeS5jcmVhdGVGaWx0ZXIoZmlsSWQpO1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmRlZnMuYXBwZW5kQ2hpbGQoZmlsKTtcbiAgICAgICAgICAgIGZpbC5hcHBlbmRDaGlsZChmaWx0ZXJzRmFjdG9yeS5jcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyKCkpO1xuICAgICAgICAgICAgZ2cgPSBjcmVhdGVOUygnZycpO1xuICAgICAgICAgICAgZ2cuYXBwZW5kQ2hpbGQodXNlRWxlbWVudCk7XG4gICAgICAgICAgICBtYXNrZXIuYXBwZW5kQ2hpbGQoZ2cpO1xuICAgICAgICAgICAgZ2cuc2V0QXR0cmlidXRlKCdmaWx0ZXInLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGZpbElkICsgJyknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobWF0dGVUeXBlID09PSAyKSB7XG4gICAgICAgICAgdmFyIG1hc2tHcm91cCA9IGNyZWF0ZU5TKCdtYXNrJyk7XG4gICAgICAgICAgbWFza0dyb3VwLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICAgICAgbWFza0dyb3VwLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgJ2FscGhhJyk7XG4gICAgICAgICAgdmFyIG1hc2tHcm91cGVyID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgICAgICBtYXNrR3JvdXAuYXBwZW5kQ2hpbGQobWFza0dyb3VwZXIpO1xuICAgICAgICAgIGZpbElkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICAgICAgZmlsID0gZmlsdGVyc0ZhY3RvcnkuY3JlYXRlRmlsdGVyKGZpbElkKTsgLy8vIC9cblxuICAgICAgICAgIHZhciBmZUNUciA9IGNyZWF0ZU5TKCdmZUNvbXBvbmVudFRyYW5zZmVyJyk7XG4gICAgICAgICAgZmVDVHIuc2V0QXR0cmlidXRlKCdpbicsICdTb3VyY2VHcmFwaGljJyk7XG4gICAgICAgICAgZmlsLmFwcGVuZENoaWxkKGZlQ1RyKTtcbiAgICAgICAgICB2YXIgZmVGdW5jID0gY3JlYXRlTlMoJ2ZlRnVuY0EnKTtcbiAgICAgICAgICBmZUZ1bmMuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgICAgICAgZmVGdW5jLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCAnMS4wIDAuMCcpO1xuICAgICAgICAgIGZlQ1RyLmFwcGVuZENoaWxkKGZlRnVuYyk7IC8vLyAvXG5cbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChmaWwpO1xuICAgICAgICAgIHZhciBhbHBoYVJlY3QgPSBjcmVhdGVOUygncmVjdCcpO1xuICAgICAgICAgIGFscGhhUmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5jb21wLmRhdGEudyk7XG4gICAgICAgICAgYWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5jb21wLmRhdGEuaCk7XG4gICAgICAgICAgYWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgneCcsICcwJyk7XG4gICAgICAgICAgYWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgneScsICcwJyk7XG4gICAgICAgICAgYWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgnZmlsbCcsICcjZmZmZmZmJyk7XG4gICAgICAgICAgYWxwaGFSZWN0LnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsICcwJyk7XG4gICAgICAgICAgbWFza0dyb3VwZXIuc2V0QXR0cmlidXRlKCdmaWx0ZXInLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGZpbElkICsgJyknKTtcbiAgICAgICAgICBtYXNrR3JvdXBlci5hcHBlbmRDaGlsZChhbHBoYVJlY3QpO1xuICAgICAgICAgIHVzZUVsZW1lbnQgPSBjcmVhdGVOUygndXNlJyk7XG4gICAgICAgICAgdXNlRWxlbWVudC5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgJyMnICsgdGhpcy5sYXllcklkKTtcbiAgICAgICAgICBtYXNrR3JvdXBlci5hcHBlbmRDaGlsZCh1c2VFbGVtZW50KTtcblxuICAgICAgICAgIGlmICghZmVhdHVyZVN1cHBvcnQubWFza1R5cGUpIHtcbiAgICAgICAgICAgIG1hc2tHcm91cC5zZXRBdHRyaWJ1dGUoJ21hc2stdHlwZScsICdsdW1pbmFuY2UnKTtcbiAgICAgICAgICAgIGZpbC5hcHBlbmRDaGlsZChmaWx0ZXJzRmFjdG9yeS5jcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyKCkpO1xuICAgICAgICAgICAgZ2cgPSBjcmVhdGVOUygnZycpO1xuICAgICAgICAgICAgbWFza0dyb3VwZXIuYXBwZW5kQ2hpbGQoYWxwaGFSZWN0KTtcbiAgICAgICAgICAgIGdnLmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtcbiAgICAgICAgICAgIG1hc2tHcm91cGVyLmFwcGVuZENoaWxkKGdnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChtYXNrR3JvdXApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYXR0ZU1hc2tzW21hdHRlVHlwZV0gPSBpZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMubWF0dGVNYXNrc1ttYXR0ZVR5cGVdO1xuICAgIH0sXG4gICAgc2V0TWF0dGU6IGZ1bmN0aW9uIHNldE1hdHRlKGlkKSB7XG4gICAgICBpZiAoIXRoaXMubWF0dGVFbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXR0ZUVsZW1lbnQuc2V0QXR0cmlidXRlKCdtYXNrJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBpZCArICcpJyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxyXG4gICAqIEBmaWxlXHJcbiAgICogSGFuZGxlcyBBRSdzIGxheWVyIHBhcmVudGluZyBwcm9wZXJ0eS5cclxuICAgKlxyXG4gICAqL1xuICBmdW5jdGlvbiBIaWVyYXJjaHlFbGVtZW50KCkge31cblxuICBIaWVyYXJjaHlFbGVtZW50LnByb3RvdHlwZSA9IHtcbiAgICAvKipcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqIEluaXRpYWxpemVzIGhpZXJhcmNoeSBwcm9wZXJ0aWVzXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIGluaXRIaWVyYXJjaHk6IGZ1bmN0aW9uIGluaXRIaWVyYXJjaHkoKSB7XG4gICAgICAvLyBlbGVtZW50J3MgcGFyZW50IGxpc3RcbiAgICAgIHRoaXMuaGllcmFyY2h5ID0gW107IC8vIGlmIGVsZW1lbnQgaXMgcGFyZW50IG9mIGFub3RoZXIgbGF5ZXIgX2lzUGFyZW50IHdpbGwgYmUgdHJ1ZVxuXG4gICAgICB0aGlzLl9pc1BhcmVudCA9IGZhbHNlO1xuICAgICAgdGhpcy5jaGVja1BhcmVudGluZygpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqIFNldHMgbGF5ZXIncyBoaWVyYXJjaHkuXHJcbiAgICAgICAqIEBwYXJhbSB7YXJyYXl9IGhpZXJhcmNoXHJcbiAgICAgICAqIGxheWVyJ3MgcGFyZW50IGxpc3RcclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgc2V0SGllcmFyY2h5OiBmdW5jdGlvbiBzZXRIaWVyYXJjaHkoaGllcmFyY2h5KSB7XG4gICAgICB0aGlzLmhpZXJhcmNoeSA9IGhpZXJhcmNoeTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgICAqIEBmdW5jdGlvblxyXG4gICAgICAgKiBTZXRzIGxheWVyIGFzIHBhcmVudC5cclxuICAgICAgICpcclxuICAgICAgICovXG4gICAgc2V0QXNQYXJlbnQ6IGZ1bmN0aW9uIHNldEFzUGFyZW50KCkge1xuICAgICAgdGhpcy5faXNQYXJlbnQgPSB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAgICogQGZ1bmN0aW9uXHJcbiAgICAgICAqIFNlYXJjaGVzIGxheWVyJ3MgcGFyZW50aW5nIGNoYWluXHJcbiAgICAgICAqXHJcbiAgICAgICAqL1xuICAgIGNoZWNrUGFyZW50aW5nOiBmdW5jdGlvbiBjaGVja1BhcmVudGluZygpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEucGFyZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5jb21wLmJ1aWxkRWxlbWVudFBhcmVudGluZyh0aGlzLCB0aGlzLmRhdGEucGFyZW50LCBbXSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFJlbmRlcmFibGVET01FbGVtZW50KCkge31cblxuICAoZnVuY3Rpb24gKCkge1xuICAgIHZhciBfcHJvdG90eXBlID0ge1xuICAgICAgaW5pdEVsZW1lbnQ6IGZ1bmN0aW9uIGluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICAgICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICAgICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgICAgIHRoaXMuaW5pdFRyYW5zZm9ybShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICAgICAgdGhpcy5pbml0SGllcmFyY2h5KCk7XG4gICAgICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICAgICAgdGhpcy5pbml0UmVuZGVyZXJFbGVtZW50KCk7XG4gICAgICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpO1xuICAgICAgICB0aGlzLmNyZWF0ZUNvbnRlbnQoKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgICB9LFxuICAgICAgaGlkZTogZnVuY3Rpb24gaGlkZSgpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ0hJREUnLCB0aGlzKTtcbiAgICAgICAgaWYgKCF0aGlzLmhpZGRlbiAmJiAoIXRoaXMuaXNJblJhbmdlIHx8IHRoaXMuaXNUcmFuc3BhcmVudCkpIHtcbiAgICAgICAgICB2YXIgZWxlbSA9IHRoaXMuYmFzZUVsZW1lbnQgfHwgdGhpcy5sYXllckVsZW1lbnQ7XG4gICAgICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICAgIHRoaXMuaGlkZGVuID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHNob3c6IGZ1bmN0aW9uIHNob3coKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdTSE9XJywgdGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmlzSW5SYW5nZSAmJiAhdGhpcy5pc1RyYW5zcGFyZW50KSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmRhdGEuaGQpIHtcbiAgICAgICAgICAgIHZhciBlbGVtID0gdGhpcy5iYXNlRWxlbWVudCB8fCB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcmVuZGVyRnJhbWU6IGZ1bmN0aW9uIHJlbmRlckZyYW1lKCkge1xuICAgICAgICAvLyBJZiBpdCBpcyBleHBvcnRlZCBhcyBoaWRkZW4gKGRhdGEuaGQgPT09IHRydWUpIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAgIC8vIElmIGl0IGlzIG5vdCB2aXNpYmxlIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuaGQgfHwgdGhpcy5oaWRkZW4pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLnJlbmRlclJlbmRlcmFibGUoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJMb2NhbFRyYW5zZm9ybSgpO1xuICAgICAgICB0aGlzLnJlbmRlckVsZW1lbnQoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJJbm5lckNvbnRlbnQoKTtcblxuICAgICAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW5kZXJJbm5lckNvbnRlbnQ6IGZ1bmN0aW9uIHJlbmRlcklubmVyQ29udGVudCgpIHt9LFxuICAgICAgcHJlcGFyZUZyYW1lOiBmdW5jdGlvbiBwcmVwYXJlRnJhbWUobnVtKSB7XG4gICAgICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgICAgICB0aGlzLnByZXBhcmVSZW5kZXJhYmxlRnJhbWUobnVtKTtcbiAgICAgICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRoaXMuaXNJblJhbmdlKTtcbiAgICAgICAgdGhpcy5jaGVja1RyYW5zcGFyZW5jeSgpO1xuICAgICAgfSxcbiAgICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuaW5uZXJFbGVtID0gbnVsbDtcbiAgICAgICAgdGhpcy5kZXN0cm95QmFzZUVsZW1lbnQoKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGV4dGVuZFByb3RvdHlwZShbUmVuZGVyYWJsZUVsZW1lbnQsIGNyZWF0ZVByb3h5RnVuY3Rpb24oX3Byb3RvdHlwZSldLCBSZW5kZXJhYmxlRE9NRWxlbWVudCk7XG4gIH0pKCk7XG5cbiAgZnVuY3Rpb24gSUltYWdlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5hc3NldERhdGEgPSBnbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTtcblxuICAgIGlmICh0aGlzLmFzc2V0RGF0YSAmJiB0aGlzLmFzc2V0RGF0YS5zaWQpIHtcbiAgICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5zbG90TWFuYWdlci5nZXRQcm9wKHRoaXMuYXNzZXREYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuc291cmNlUmVjdCA9IHtcbiAgICAgIHRvcDogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogdGhpcy5hc3NldERhdGEudyxcbiAgICAgIGhlaWdodDogdGhpcy5hc3NldERhdGEuaFxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBTVkdCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRE9NRWxlbWVudF0sIElJbWFnZUVsZW1lbnQpO1xuXG4gIElJbWFnZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFzc2V0UGF0aCA9IHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoKHRoaXMuYXNzZXREYXRhKTtcbiAgICB0aGlzLmlubmVyRWxlbSA9IGNyZWF0ZU5TKCdpbWFnZScpO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmFzc2V0RGF0YS53ICsgJ3B4Jyk7XG4gICAgdGhpcy5pbm5lckVsZW0uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmFzc2V0RGF0YS5oICsgJ3B4Jyk7XG4gICAgdGhpcy5pbm5lckVsZW0uc2V0QXR0cmlidXRlKCdwcmVzZXJ2ZUFzcGVjdFJhdGlvJywgdGhpcy5hc3NldERhdGEucHIgfHwgdGhpcy5nbG9iYWxEYXRhLnJlbmRlckNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8pO1xuICAgIHRoaXMuaW5uZXJFbGVtLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgJ2hyZWYnLCBhc3NldFBhdGgpO1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaW5uZXJFbGVtKTtcbiAgfTtcblxuICBJSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZVJlY3Q7XG4gIH07XG5cbiAgZnVuY3Rpb24gUHJvY2Vzc2VkRWxlbWVudChlbGVtZW50LCBwb3NpdGlvbikge1xuICAgIHRoaXMuZWxlbSA9IGVsZW1lbnQ7XG4gICAgdGhpcy5wb3MgPSBwb3NpdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIElTaGFwZUVsZW1lbnQoKSB7fVxuXG4gIElTaGFwZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGFkZFNoYXBlVG9Nb2RpZmllcnM6IGZ1bmN0aW9uIGFkZFNoYXBlVG9Nb2RpZmllcnMoZGF0YSkge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdGhpcy5zaGFwZU1vZGlmaWVycy5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnNoYXBlTW9kaWZpZXJzW2ldLmFkZFNoYXBlKGRhdGEpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNTaGFwZUluQW5pbWF0ZWRNb2RpZmllcnM6IGZ1bmN0aW9uIGlzU2hhcGVJbkFuaW1hdGVkTW9kaWZpZXJzKGRhdGEpIHtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgaWYgKHRoaXMuc2hhcGVNb2RpZmllcnNbaV0uaXNBbmltYXRlZFdpdGhTaGFwZShkYXRhKSkge1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHJlbmRlck1vZGlmaWVyczogZnVuY3Rpb24gcmVuZGVyTW9kaWZpZXJzKCkge1xuICAgICAgaWYgKCF0aGlzLnNoYXBlTW9kaWZpZXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuc2hhcGVzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMuc2hhcGVzW2ldLnNoLnJlc2V0KCk7XG4gICAgICB9XG5cbiAgICAgIGxlbiA9IHRoaXMuc2hhcGVNb2RpZmllcnMubGVuZ3RoO1xuICAgICAgdmFyIHNob3VsZEJyZWFrUHJvY2VzcztcblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgc2hvdWxkQnJlYWtQcm9jZXNzID0gdGhpcy5zaGFwZU1vZGlmaWVyc1tpXS5wcm9jZXNzU2hhcGVzKHRoaXMuX2lzRmlyc3RGcmFtZSk7IC8vIHdvcmthcm91bmQgdG8gZml4IGNhc2VzIHdoZXJlIGEgcmVwZWF0ZXIgcmVzZXRzIHRoZSBzaGFwZSBzbyB0aGUgZm9sbG93aW5nIHByb2Nlc3NlcyBnZXQgY2FsbGVkIHR3aWNlXG4gICAgICAgIC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgc29sdXRpb24gZm9yIHRoaXNcblxuICAgICAgICBpZiAoc2hvdWxkQnJlYWtQcm9jZXNzKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNlYXJjaFByb2Nlc3NlZEVsZW1lbnQ6IGZ1bmN0aW9uIHNlYXJjaFByb2Nlc3NlZEVsZW1lbnQoZWxlbSkge1xuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5wcm9jZXNzZWRFbGVtZW50cztcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgIGlmIChlbGVtZW50c1tpXS5lbGVtID09PSBlbGVtKSB7XG4gICAgICAgICAgcmV0dXJuIGVsZW1lbnRzW2ldLnBvcztcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfSxcbiAgICBhZGRQcm9jZXNzZWRFbGVtZW50OiBmdW5jdGlvbiBhZGRQcm9jZXNzZWRFbGVtZW50KGVsZW0sIHBvcykge1xuICAgICAgdmFyIGVsZW1lbnRzID0gdGhpcy5wcm9jZXNzZWRFbGVtZW50cztcbiAgICAgIHZhciBpID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSkge1xuICAgICAgICBpIC09IDE7XG5cbiAgICAgICAgaWYgKGVsZW1lbnRzW2ldLmVsZW0gPT09IGVsZW0pIHtcbiAgICAgICAgICBlbGVtZW50c1tpXS5wb3MgPSBwb3M7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnRzLnB1c2gobmV3IFByb2Nlc3NlZEVsZW1lbnQoZWxlbSwgcG9zKSk7XG4gICAgfSxcbiAgICBwcmVwYXJlRnJhbWU6IGZ1bmN0aW9uIHByZXBhcmVGcmFtZShudW0pIHtcbiAgICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0pO1xuICAgICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRoaXMuaXNJblJhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpbmVDYXBFbnVtID0ge1xuICAgIDE6ICdidXR0JyxcbiAgICAyOiAncm91bmQnLFxuICAgIDM6ICdzcXVhcmUnXG4gIH07XG4gIHZhciBsaW5lSm9pbkVudW0gPSB7XG4gICAgMTogJ21pdGVyJyxcbiAgICAyOiAncm91bmQnLFxuICAgIDM6ICdiZXZlbCdcbiAgfTtcblxuICBmdW5jdGlvbiBTVkdTaGFwZURhdGEodHJhbnNmb3JtZXJzLCBsZXZlbCwgc2hhcGUpIHtcbiAgICB0aGlzLmNhY2hlcyA9IFtdO1xuICAgIHRoaXMuc3R5bGVzID0gW107XG4gICAgdGhpcy50cmFuc2Zvcm1lcnMgPSB0cmFuc2Zvcm1lcnM7XG4gICAgdGhpcy5sU3RyID0gJyc7XG4gICAgdGhpcy5zaCA9IHNoYXBlO1xuICAgIHRoaXMubHZsID0gbGV2ZWw7IC8vIFRPRE8gZmluZCBpZiB0aGVyZSBhcmUgc29tZSBjYXNlcyB3aGVyZSBfaXNBbmltYXRlZCBjYW4gYmUgZmFsc2UuXG4gICAgLy8gRm9yIG5vdywgc2luY2Ugc2hhcGVzIGFkZCB1cCB3aXRoIG90aGVyIHNoYXBlcy4gVGhleSBoYXZlIHRvIGJlIGNhbGN1bGF0ZWQgZXZlcnkgdGltZS5cbiAgICAvLyBPbmUgd2F5IG9mIGZpbmRpbmcgb3V0IGlzIGNoZWNraW5nIGlmIGFsbCBzdHlsZXMgYXNzb2NpYXRlZCB0byB0aGlzIHNoYXBlIGRlcGVuZCBvbmx5IG9mIHRoaXMgc2hhcGVcblxuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXNoYXBlLms7IC8vIFRPRE86IGNvbW1lbnRpbmcgdGhpcyBmb3Igbm93IHNpbmNlIGFsbCBzaGFwZXMgYXJlIGFuaW1hdGVkXG5cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRyYW5zZm9ybWVycy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHRyYW5zZm9ybWVyc1tpXS5tUHJvcHMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSB0cnVlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cbiAgfVxuXG4gIFNWR1NoYXBlRGF0YS5wcm90b3R5cGUuc2V0QXNBbmltYXRlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gdHJ1ZTtcbiAgfTtcblxuICBmdW5jdGlvbiBTVkdTdHlsZURhdGEoZGF0YSwgbGV2ZWwpIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMudHlwZSA9IGRhdGEudHk7XG4gICAgdGhpcy5kID0gJyc7XG4gICAgdGhpcy5sdmwgPSBsZXZlbDtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLmNsb3NlZCA9IGRhdGEuaGQgPT09IHRydWU7XG4gICAgdGhpcy5wRWxlbSA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgdGhpcy5tc0VsZW0gPSBudWxsO1xuICB9XG5cbiAgU1ZHU3R5bGVEYXRhLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmQgPSAnJztcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgfTtcblxuICBmdW5jdGlvbiBEYXNoUHJvcGVydHkoZWxlbSwgZGF0YSwgcmVuZGVyZXIsIGNvbnRhaW5lcikge1xuICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgdGhpcy5mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5kYXRhUHJvcHMgPSBjcmVhdGVTaXplZEFycmF5KGRhdGEubGVuZ3RoKTtcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXI7XG4gICAgdGhpcy5rID0gZmFsc2U7XG4gICAgdGhpcy5kYXNoU3RyID0gJyc7XG4gICAgdGhpcy5kYXNoQXJyYXkgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgZGF0YS5sZW5ndGggPyBkYXRhLmxlbmd0aCAtIDEgOiAwKTtcbiAgICB0aGlzLmRhc2hvZmZzZXQgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgMSk7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGRhdGEubGVuZ3RoIHx8IDA7XG4gICAgdmFyIHByb3A7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhW2ldLnYsIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5rID0gcHJvcC5rIHx8IHRoaXMuaztcbiAgICAgIHRoaXMuZGF0YVByb3BzW2ldID0ge1xuICAgICAgICBuOiBkYXRhW2ldLm4sXG4gICAgICAgIHA6IHByb3BcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmspIHtcbiAgICAgIHRoaXMuZ2V0VmFsdWUodHJ1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMuaztcbiAgfVxuXG4gIERhc2hQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAodGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5mcmFtZUlkICYmICFmb3JjZVJlbmRlcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7XG4gICAgdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXMoKTtcbiAgICB0aGlzLl9tZGYgPSB0aGlzLl9tZGYgfHwgZm9yY2VSZW5kZXI7XG5cbiAgICBpZiAodGhpcy5fbWRmKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gdGhpcy5kYXRhUHJvcHMubGVuZ3RoO1xuXG4gICAgICBpZiAodGhpcy5yZW5kZXJlciA9PT0gJ3N2ZycpIHtcbiAgICAgICAgdGhpcy5kYXNoU3RyID0gJyc7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpZiAodGhpcy5kYXRhUHJvcHNbaV0ubiAhPT0gJ28nKSB7XG4gICAgICAgICAgaWYgKHRoaXMucmVuZGVyZXIgPT09ICdzdmcnKSB7XG4gICAgICAgICAgICB0aGlzLmRhc2hTdHIgKz0gJyAnICsgdGhpcy5kYXRhUHJvcHNbaV0ucC52O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRhc2hBcnJheVtpXSA9IHRoaXMuZGF0YVByb3BzW2ldLnAudjtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kYXNob2Zmc2V0WzBdID0gdGhpcy5kYXRhUHJvcHNbaV0ucC52O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgRGFzaFByb3BlcnR5KTtcblxuICBmdW5jdGlvbiBTVkdTdHJva2VTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5vID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKTtcbiAgICB0aGlzLncgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLncsIDAsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuZCA9IG5ldyBEYXNoUHJvcGVydHkoZWxlbSwgZGF0YS5kIHx8IHt9LCAnc3ZnJywgdGhpcyk7XG4gICAgdGhpcy5jID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5jLCAxLCAyNTUsIHRoaXMpO1xuICAgIHRoaXMuc3R5bGUgPSBzdHlsZU9iO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuX2lzQW5pbWF0ZWQ7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR1N0cm9rZVN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU1ZHRmlsbFN0eWxlRGF0YShlbGVtLCBkYXRhLCBzdHlsZU9iKSB7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcztcbiAgICB0aGlzLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm8sIDAsIDAuMDEsIHRoaXMpO1xuICAgIHRoaXMuYyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuYywgMSwgMjU1LCB0aGlzKTtcbiAgICB0aGlzLnN0eWxlID0gc3R5bGVPYjtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbRHluYW1pY1Byb3BlcnR5Q29udGFpbmVyXSwgU1ZHRmlsbFN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU1ZHTm9TdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlT2I7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR05vU3R5bGVEYXRhKTtcblxuICBmdW5jdGlvbiBHcmFkaWVudFByb3BlcnR5KGVsZW0sIGRhdGEsIGNvbnRhaW5lcikge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5jID0gY3JlYXRlVHlwZWRBcnJheSgndWludDhjJywgZGF0YS5wICogNCk7XG4gICAgdmFyIGNMZW5ndGggPSBkYXRhLmsua1swXS5zID8gZGF0YS5rLmtbMF0ucy5sZW5ndGggLSBkYXRhLnAgKiA0IDogZGF0YS5rLmsubGVuZ3RoIC0gZGF0YS5wICogNDtcbiAgICB0aGlzLm8gPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgY0xlbmd0aCk7XG4gICAgdGhpcy5fY21kZiA9IGZhbHNlO1xuICAgIHRoaXMuX29tZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9jb2xsYXBzYWJsZSA9IHRoaXMuY2hlY2tDb2xsYXBzYWJsZSgpO1xuICAgIHRoaXMuX2hhc09wYWNpdHkgPSBjTGVuZ3RoO1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihjb250YWluZXIpO1xuICAgIHRoaXMucHJvcCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaywgMSwgbnVsbCwgdGhpcyk7XG4gICAgdGhpcy5rID0gdGhpcy5wcm9wLms7XG4gICAgdGhpcy5nZXRWYWx1ZSh0cnVlKTtcbiAgfVxuXG4gIEdyYWRpZW50UHJvcGVydHkucHJvdG90eXBlLmNvbXBhcmVQb2ludHMgPSBmdW5jdGlvbiAodmFsdWVzLCBwb2ludHMpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRoaXMuby5sZW5ndGggLyAyO1xuICAgIHZhciBkaWZmO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGRpZmYgPSBNYXRoLmFicyh2YWx1ZXNbaSAqIDRdIC0gdmFsdWVzW3BvaW50cyAqIDQgKyBpICogMl0pO1xuXG4gICAgICBpZiAoZGlmZiA+IDAuMDEpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgR3JhZGllbnRQcm9wZXJ0eS5wcm90b3R5cGUuY2hlY2tDb2xsYXBzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5vLmxlbmd0aCAvIDIgIT09IHRoaXMuYy5sZW5ndGggLyA0KSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGF0YS5rLmtbMF0ucykge1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIGxlbiA9IHRoaXMuZGF0YS5rLmsubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICBpZiAoIXRoaXMuY29tcGFyZVBvaW50cyh0aGlzLmRhdGEuay5rW2ldLnMsIHRoaXMuZGF0YS5wKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCF0aGlzLmNvbXBhcmVQb2ludHModGhpcy5kYXRhLmsuaywgdGhpcy5kYXRhLnApKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgR3JhZGllbnRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICB0aGlzLnByb3AuZ2V0VmFsdWUoKTtcbiAgICB0aGlzLl9tZGYgPSBmYWxzZTtcbiAgICB0aGlzLl9jbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fb21kZiA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMucHJvcC5fbWRmIHx8IGZvcmNlUmVuZGVyKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLmRhdGEucCAqIDQ7XG4gICAgICB2YXIgbXVsdDtcbiAgICAgIHZhciB2YWw7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBtdWx0ID0gaSAlIDQgPT09IDAgPyAxMDAgOiAyNTU7XG4gICAgICAgIHZhbCA9IE1hdGgucm91bmQodGhpcy5wcm9wLnZbaV0gKiBtdWx0KTtcblxuICAgICAgICBpZiAodGhpcy5jW2ldICE9PSB2YWwpIHtcbiAgICAgICAgICB0aGlzLmNbaV0gPSB2YWw7XG4gICAgICAgICAgdGhpcy5fY21kZiA9ICFmb3JjZVJlbmRlcjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vLmxlbmd0aCkge1xuICAgICAgICBsZW4gPSB0aGlzLnByb3Audi5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gdGhpcy5kYXRhLnAgKiA0OyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBtdWx0ID0gaSAlIDIgPT09IDAgPyAxMDAgOiAxO1xuICAgICAgICAgIHZhbCA9IGkgJSAyID09PSAwID8gTWF0aC5yb3VuZCh0aGlzLnByb3AudltpXSAqIDEwMCkgOiB0aGlzLnByb3AudltpXTtcblxuICAgICAgICAgIGlmICh0aGlzLm9baSAtIHRoaXMuZGF0YS5wICogNF0gIT09IHZhbCkge1xuICAgICAgICAgICAgdGhpcy5vW2kgLSB0aGlzLmRhdGEucCAqIDRdID0gdmFsO1xuICAgICAgICAgICAgdGhpcy5fb21kZiA9ICFmb3JjZVJlbmRlcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fbWRmID0gIWZvcmNlUmVuZGVyO1xuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIEdyYWRpZW50UHJvcGVydHkpO1xuXG4gIGZ1bmN0aW9uIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YShlbGVtLCBkYXRhLCBzdHlsZU9iKSB7XG4gICAgdGhpcy5pbml0RHluYW1pY1Byb3BlcnR5Q29udGFpbmVyKGVsZW0pO1xuICAgIHRoaXMuZ2V0VmFsdWUgPSB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcztcbiAgICB0aGlzLmluaXRHcmFkaWVudERhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYik7XG4gIH1cblxuICBTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEucHJvdG90eXBlLmluaXRHcmFkaWVudERhdGEgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubywgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5zID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zLCAxLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmUsIDEsIG51bGwsIHRoaXMpO1xuICAgIHRoaXMuaCA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuaCB8fCB7XG4gICAgICBrOiAwXG4gICAgfSwgMCwgMC4wMSwgdGhpcyk7XG4gICAgdGhpcy5hID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5hIHx8IHtcbiAgICAgIGs6IDBcbiAgICB9LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMuZyA9IG5ldyBHcmFkaWVudFByb3BlcnR5KGVsZW0sIGRhdGEuZywgdGhpcyk7XG4gICAgdGhpcy5zdHlsZSA9IHN0eWxlT2I7XG4gICAgdGhpcy5zdG9wcyA9IFtdO1xuICAgIHRoaXMuc2V0R3JhZGllbnREYXRhKHN0eWxlT2IucEVsZW0sIGRhdGEpO1xuICAgIHRoaXMuc2V0R3JhZGllbnRPcGFjaXR5KGRhdGEsIHN0eWxlT2IpO1xuICAgIHRoaXMuX2lzQW5pbWF0ZWQgPSAhIXRoaXMuX2lzQW5pbWF0ZWQ7XG4gIH07XG5cbiAgU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5zZXRHcmFkaWVudERhdGEgPSBmdW5jdGlvbiAocGF0aEVsZW1lbnQsIGRhdGEpIHtcbiAgICB2YXIgZ3JhZGllbnRJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgIHZhciBnZmlsbCA9IGNyZWF0ZU5TKGRhdGEudCA9PT0gMSA/ICdsaW5lYXJHcmFkaWVudCcgOiAncmFkaWFsR3JhZGllbnQnKTtcbiAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ2lkJywgZ3JhZGllbnRJZCk7XG4gICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdzcHJlYWRNZXRob2QnLCAncGFkJyk7XG4gICAgZ2ZpbGwuc2V0QXR0cmlidXRlKCdncmFkaWVudFVuaXRzJywgJ3VzZXJTcGFjZU9uVXNlJyk7XG4gICAgdmFyIHN0b3BzID0gW107XG4gICAgdmFyIHN0b3A7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgakxlbiA9IGRhdGEuZy5wICogNDtcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDQpIHtcbiAgICAgIHN0b3AgPSBjcmVhdGVOUygnc3RvcCcpO1xuICAgICAgZ2ZpbGwuYXBwZW5kQ2hpbGQoc3RvcCk7XG4gICAgICBzdG9wcy5wdXNoKHN0b3ApO1xuICAgIH1cblxuICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZShkYXRhLnR5ID09PSAnZ2YnID8gJ2ZpbGwnIDogJ3N0cm9rZScsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgZ3JhZGllbnRJZCArICcpJyk7XG4gICAgdGhpcy5nZiA9IGdmaWxsO1xuICAgIHRoaXMuY3N0ID0gc3RvcHM7XG4gIH07XG5cbiAgU1ZHR3JhZGllbnRGaWxsU3R5bGVEYXRhLnByb3RvdHlwZS5zZXRHcmFkaWVudE9wYWNpdHkgPSBmdW5jdGlvbiAoZGF0YSwgc3R5bGVPYikge1xuICAgIGlmICh0aGlzLmcuX2hhc09wYWNpdHkgJiYgIXRoaXMuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgIHZhciBzdG9wO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbjtcbiAgICAgIHZhciBtYXNrID0gY3JlYXRlTlMoJ21hc2snKTtcbiAgICAgIHZhciBtYXNrRWxlbWVudCA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICBtYXNrLmFwcGVuZENoaWxkKG1hc2tFbGVtZW50KTtcbiAgICAgIHZhciBvcGFjaXR5SWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIHZhciBtYXNrSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIG1hc2suc2V0QXR0cmlidXRlKCdpZCcsIG1hc2tJZCk7XG4gICAgICB2YXIgb3BGaWxsID0gY3JlYXRlTlMoZGF0YS50ID09PSAxID8gJ2xpbmVhckdyYWRpZW50JyA6ICdyYWRpYWxHcmFkaWVudCcpO1xuICAgICAgb3BGaWxsLnNldEF0dHJpYnV0ZSgnaWQnLCBvcGFjaXR5SWQpO1xuICAgICAgb3BGaWxsLnNldEF0dHJpYnV0ZSgnc3ByZWFkTWV0aG9kJywgJ3BhZCcpO1xuICAgICAgb3BGaWxsLnNldEF0dHJpYnV0ZSgnZ3JhZGllbnRVbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xuICAgICAgakxlbiA9IGRhdGEuZy5rLmtbMF0ucyA/IGRhdGEuZy5rLmtbMF0ucy5sZW5ndGggOiBkYXRhLmcuay5rLmxlbmd0aDtcbiAgICAgIHZhciBzdG9wcyA9IHRoaXMuc3RvcHM7XG5cbiAgICAgIGZvciAoaiA9IGRhdGEuZy5wICogNDsgaiA8IGpMZW47IGogKz0gMikge1xuICAgICAgICBzdG9wID0gY3JlYXRlTlMoJ3N0b3AnKTtcbiAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ3N0b3AtY29sb3InLCAncmdiKDI1NSwyNTUsMjU1KScpO1xuICAgICAgICBvcEZpbGwuYXBwZW5kQ2hpbGQoc3RvcCk7XG4gICAgICAgIHN0b3BzLnB1c2goc3RvcCk7XG4gICAgICB9XG5cbiAgICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZShkYXRhLnR5ID09PSAnZ2YnID8gJ2ZpbGwnIDogJ3N0cm9rZScsICd1cmwoJyArIGdldExvY2F0aW9uSHJlZigpICsgJyMnICsgb3BhY2l0eUlkICsgJyknKTtcblxuICAgICAgaWYgKGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgICAgbWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsIGxpbmVDYXBFbnVtW2RhdGEubGMgfHwgMl0pO1xuICAgICAgICBtYXNrRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsIGxpbmVKb2luRW51bVtkYXRhLmxqIHx8IDJdKTtcblxuICAgICAgICBpZiAoZGF0YS5saiA9PT0gMSkge1xuICAgICAgICAgIG1hc2tFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW1pdGVybGltaXQnLCBkYXRhLm1sKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLm9mID0gb3BGaWxsO1xuICAgICAgdGhpcy5tcyA9IG1hc2s7XG4gICAgICB0aGlzLm9zdCA9IHN0b3BzO1xuICAgICAgdGhpcy5tYXNrSWQgPSBtYXNrSWQ7XG4gICAgICBzdHlsZU9iLm1zRWxlbSA9IG1hc2tFbGVtZW50O1xuICAgIH1cbiAgfTtcblxuICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSk7XG5cbiAgZnVuY3Rpb24gU1ZHR3JhZGllbnRTdHJva2VTdHlsZURhdGEoZWxlbSwgZGF0YSwgc3R5bGVPYikge1xuICAgIHRoaXMuaW5pdER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcihlbGVtKTtcbiAgICB0aGlzLmdldFZhbHVlID0gdGhpcy5pdGVyYXRlRHluYW1pY1Byb3BlcnRpZXM7XG4gICAgdGhpcy53ID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS53LCAwLCBudWxsLCB0aGlzKTtcbiAgICB0aGlzLmQgPSBuZXcgRGFzaFByb3BlcnR5KGVsZW0sIGRhdGEuZCB8fCB7fSwgJ3N2ZycsIHRoaXMpO1xuICAgIHRoaXMuaW5pdEdyYWRpZW50RGF0YShlbGVtLCBkYXRhLCBzdHlsZU9iKTtcbiAgICB0aGlzLl9pc0FuaW1hdGVkID0gISF0aGlzLl9pc0FuaW1hdGVkO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtTVkdHcmFkaWVudEZpbGxTdHlsZURhdGEsIER5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFNWR0dyYWRpZW50U3Ryb2tlU3R5bGVEYXRhKTtcblxuICBmdW5jdGlvbiBTaGFwZUdyb3VwRGF0YSgpIHtcbiAgICB0aGlzLml0ID0gW107XG4gICAgdGhpcy5wcmV2Vmlld0RhdGEgPSBbXTtcbiAgICB0aGlzLmdyID0gY3JlYXRlTlMoJ2cnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIFNWR1RyYW5zZm9ybURhdGEobVByb3BzLCBvcCwgY29udGFpbmVyKSB7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSB7XG4gICAgICBtUHJvcHM6IG1Qcm9wcyxcbiAgICAgIG9wOiBvcCxcbiAgICAgIGNvbnRhaW5lcjogY29udGFpbmVyXG4gICAgfTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy5faXNBbmltYXRlZCA9IHRoaXMudHJhbnNmb3JtLm1Qcm9wcy5keW5hbWljUHJvcGVydGllcy5sZW5ndGggfHwgdGhpcy50cmFuc2Zvcm0ub3AuZWZmZWN0c1NlcXVlbmNlLmxlbmd0aDtcbiAgfVxuXG4gIHZhciBidWlsZFNoYXBlU3RyaW5nID0gZnVuY3Rpb24gYnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMsIGxlbmd0aCwgY2xvc2VkLCBtYXQpIHtcbiAgICBpZiAobGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIF9vID0gcGF0aE5vZGVzLm87XG4gICAgdmFyIF9pID0gcGF0aE5vZGVzLmk7XG4gICAgdmFyIF92ID0gcGF0aE5vZGVzLnY7XG4gICAgdmFyIGk7XG4gICAgdmFyIHNoYXBlU3RyaW5nID0gJyBNJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfdlswXVswXSwgX3ZbMF1bMV0pO1xuXG4gICAgZm9yIChpID0gMTsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzaGFwZVN0cmluZyArPSAnIEMnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9vW2kgLSAxXVswXSwgX29baSAtIDFdWzFdKSArICcgJyArIG1hdC5hcHBseVRvUG9pbnRTdHJpbmdpZmllZChfaVtpXVswXSwgX2lbaV1bMV0pICsgJyAnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF92W2ldWzBdLCBfdltpXVsxXSk7XG4gICAgfVxuXG4gICAgaWYgKGNsb3NlZCAmJiBsZW5ndGgpIHtcbiAgICAgIHNoYXBlU3RyaW5nICs9ICcgQycgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX29baSAtIDFdWzBdLCBfb1tpIC0gMV1bMV0pICsgJyAnICsgbWF0LmFwcGx5VG9Qb2ludFN0cmluZ2lmaWVkKF9pWzBdWzBdLCBfaVswXVsxXSkgKyAnICcgKyBtYXQuYXBwbHlUb1BvaW50U3RyaW5naWZpZWQoX3ZbMF1bMF0sIF92WzBdWzFdKTtcbiAgICAgIHNoYXBlU3RyaW5nICs9ICd6JztcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVTdHJpbmc7XG4gIH07XG5cbiAgdmFyIFNWR0VsZW1lbnRzUmVuZGVyZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9pZGVudGl0eU1hdHJpeCA9IG5ldyBNYXRyaXgoKTtcblxuICAgIHZhciBfbWF0cml4SGVscGVyID0gbmV3IE1hdHJpeCgpO1xuXG4gICAgdmFyIG9iID0ge1xuICAgICAgY3JlYXRlUmVuZGVyRnVuY3Rpb246IGNyZWF0ZVJlbmRlckZ1bmN0aW9uXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbmRlckZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgIHN3aXRjaCAoZGF0YS50eSkge1xuICAgICAgICBjYXNlICdmbCc6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckZpbGw7XG5cbiAgICAgICAgY2FzZSAnZ2YnOlxuICAgICAgICAgIHJldHVybiByZW5kZXJHcmFkaWVudDtcblxuICAgICAgICBjYXNlICdncyc6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckdyYWRpZW50U3Ryb2tlO1xuXG4gICAgICAgIGNhc2UgJ3N0JzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyU3Ryb2tlO1xuXG4gICAgICAgIGNhc2UgJ3NoJzpcbiAgICAgICAgY2FzZSAnZWwnOlxuICAgICAgICBjYXNlICdyYyc6XG4gICAgICAgIGNhc2UgJ3NyJzpcbiAgICAgICAgICByZXR1cm4gcmVuZGVyUGF0aDtcblxuICAgICAgICBjYXNlICd0cic6XG4gICAgICAgICAgcmV0dXJuIHJlbmRlckNvbnRlbnRUcmFuc2Zvcm07XG5cbiAgICAgICAgY2FzZSAnbm8nOlxuICAgICAgICAgIHJldHVybiByZW5kZXJOb29wO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyQ29udGVudFRyYW5zZm9ybShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgIGlmIChpc0ZpcnN0RnJhbWUgfHwgaXRlbURhdGEudHJhbnNmb3JtLm9wLl9tZGYpIHtcbiAgICAgICAgaXRlbURhdGEudHJhbnNmb3JtLmNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCBpdGVtRGF0YS50cmFuc2Zvcm0ub3Audik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0ZpcnN0RnJhbWUgfHwgaXRlbURhdGEudHJhbnNmb3JtLm1Qcm9wcy5fbWRmKSB7XG4gICAgICAgIGl0ZW1EYXRhLnRyYW5zZm9ybS5jb250YWluZXIuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBpdGVtRGF0YS50cmFuc2Zvcm0ubVByb3BzLnYudG8yZENTUygpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW5kZXJOb29wKCkge31cblxuICAgIGZ1bmN0aW9uIHJlbmRlclBhdGgoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgajtcbiAgICAgIHZhciBqTGVuO1xuICAgICAgdmFyIHBhdGhTdHJpbmdUcmFuc2Zvcm1lZDtcbiAgICAgIHZhciByZWRyYXc7XG4gICAgICB2YXIgcGF0aE5vZGVzO1xuICAgICAgdmFyIGw7XG4gICAgICB2YXIgbExlbiA9IGl0ZW1EYXRhLnN0eWxlcy5sZW5ndGg7XG4gICAgICB2YXIgbHZsID0gaXRlbURhdGEubHZsO1xuICAgICAgdmFyIHBhdGhzO1xuICAgICAgdmFyIG1hdDtcbiAgICAgIHZhciBpdGVyYXRpb25zO1xuICAgICAgdmFyIGs7XG5cbiAgICAgIGZvciAobCA9IDA7IGwgPCBsTGVuOyBsICs9IDEpIHtcbiAgICAgICAgcmVkcmF3ID0gaXRlbURhdGEuc2guX21kZiB8fCBpc0ZpcnN0RnJhbWU7XG5cbiAgICAgICAgaWYgKGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmwgPCBsdmwpIHtcbiAgICAgICAgICBtYXQgPSBfbWF0cml4SGVscGVyLnJlc2V0KCk7XG4gICAgICAgICAgaXRlcmF0aW9ucyA9IGx2bCAtIGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw7XG4gICAgICAgICAgayA9IGl0ZW1EYXRhLnRyYW5zZm9ybWVycy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgd2hpbGUgKCFyZWRyYXcgJiYgaXRlcmF0aW9ucyA+IDApIHtcbiAgICAgICAgICAgIHJlZHJhdyA9IGl0ZW1EYXRhLnRyYW5zZm9ybWVyc1trXS5tUHJvcHMuX21kZiB8fCByZWRyYXc7XG4gICAgICAgICAgICBpdGVyYXRpb25zIC09IDE7XG4gICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHJlZHJhdykge1xuICAgICAgICAgICAgaXRlcmF0aW9ucyA9IGx2bCAtIGl0ZW1EYXRhLnN0eWxlc1tsXS5sdmw7XG4gICAgICAgICAgICBrID0gaXRlbURhdGEudHJhbnNmb3JtZXJzLmxlbmd0aCAtIDE7XG5cbiAgICAgICAgICAgIHdoaWxlIChpdGVyYXRpb25zID4gMCkge1xuICAgICAgICAgICAgICBtYXQubXVsdGlwbHkoaXRlbURhdGEudHJhbnNmb3JtZXJzW2tdLm1Qcm9wcy52KTtcbiAgICAgICAgICAgICAgaXRlcmF0aW9ucyAtPSAxO1xuICAgICAgICAgICAgICBrIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdCA9IF9pZGVudGl0eU1hdHJpeDtcbiAgICAgICAgfVxuXG4gICAgICAgIHBhdGhzID0gaXRlbURhdGEuc2gucGF0aHM7XG4gICAgICAgIGpMZW4gPSBwYXRocy5fbGVuZ3RoO1xuXG4gICAgICAgIGlmIChyZWRyYXcpIHtcbiAgICAgICAgICBwYXRoU3RyaW5nVHJhbnNmb3JtZWQgPSAnJztcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHBhdGhOb2RlcyA9IHBhdGhzLnNoYXBlc1tqXTtcblxuICAgICAgICAgICAgaWYgKHBhdGhOb2RlcyAmJiBwYXRoTm9kZXMuX2xlbmd0aCkge1xuICAgICAgICAgICAgICBwYXRoU3RyaW5nVHJhbnNmb3JtZWQgKz0gYnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMsIHBhdGhOb2Rlcy5fbGVuZ3RoLCBwYXRoTm9kZXMuYywgbWF0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpdGVtRGF0YS5jYWNoZXNbbF0gPSBwYXRoU3RyaW5nVHJhbnNmb3JtZWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGF0aFN0cmluZ1RyYW5zZm9ybWVkID0gaXRlbURhdGEuY2FjaGVzW2xdO1xuICAgICAgICB9XG5cbiAgICAgICAgaXRlbURhdGEuc3R5bGVzW2xdLmQgKz0gc3R5bGVEYXRhLmhkID09PSB0cnVlID8gJycgOiBwYXRoU3RyaW5nVHJhbnNmb3JtZWQ7XG4gICAgICAgIGl0ZW1EYXRhLnN0eWxlc1tsXS5fbWRmID0gcmVkcmF3IHx8IGl0ZW1EYXRhLnN0eWxlc1tsXS5fbWRmO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckZpbGwoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgc3R5bGVFbGVtID0gaXRlbURhdGEuc3R5bGU7XG5cbiAgICAgIGlmIChpdGVtRGF0YS5jLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHN0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCBpdGVtRGF0YS5vLnYpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckdyYWRpZW50U3Ryb2tlKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgcmVuZGVyR3JhZGllbnQoc3R5bGVEYXRhLCBpdGVtRGF0YSwgaXNGaXJzdEZyYW1lKTtcbiAgICAgIHJlbmRlclN0cm9rZShzdHlsZURhdGEsIGl0ZW1EYXRhLCBpc0ZpcnN0RnJhbWUpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbmRlckdyYWRpZW50KHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIGdmaWxsID0gaXRlbURhdGEuZ2Y7XG4gICAgICB2YXIgaGFzT3BhY2l0eSA9IGl0ZW1EYXRhLmcuX2hhc09wYWNpdHk7XG4gICAgICB2YXIgcHQxID0gaXRlbURhdGEucy52O1xuICAgICAgdmFyIHB0MiA9IGl0ZW1EYXRhLmUudjtcblxuICAgICAgaWYgKGl0ZW1EYXRhLm8uX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdmFyIGF0dHIgPSBzdHlsZURhdGEudHkgPT09ICdnZicgPyAnZmlsbC1vcGFjaXR5JyA6ICdzdHJva2Utb3BhY2l0eSc7XG4gICAgICAgIGl0ZW1EYXRhLnN0eWxlLnBFbGVtLnNldEF0dHJpYnV0ZShhdHRyLCBpdGVtRGF0YS5vLnYpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEucy5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICB2YXIgYXR0cjEgPSBzdHlsZURhdGEudCA9PT0gMSA/ICd4MScgOiAnY3gnO1xuICAgICAgICB2YXIgYXR0cjIgPSBhdHRyMSA9PT0gJ3gxJyA/ICd5MScgOiAnY3knO1xuICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoYXR0cjEsIHB0MVswXSk7XG4gICAgICAgIGdmaWxsLnNldEF0dHJpYnV0ZShhdHRyMiwgcHQxWzFdKTtcblxuICAgICAgICBpZiAoaGFzT3BhY2l0eSAmJiAhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoYXR0cjEsIHB0MVswXSk7XG4gICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKGF0dHIyLCBwdDFbMV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciBzdG9wcztcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciBzdG9wO1xuXG4gICAgICBpZiAoaXRlbURhdGEuZy5fY21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgc3RvcHMgPSBpdGVtRGF0YS5jc3Q7XG4gICAgICAgIHZhciBjVmFsdWVzID0gaXRlbURhdGEuZy5jO1xuICAgICAgICBsZW4gPSBzdG9wcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgc3RvcCA9IHN0b3BzW2ldO1xuICAgICAgICAgIHN0b3Auc2V0QXR0cmlidXRlKCdvZmZzZXQnLCBjVmFsdWVzW2kgKiA0XSArICclJyk7XG4gICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ3N0b3AtY29sb3InLCAncmdiKCcgKyBjVmFsdWVzW2kgKiA0ICsgMV0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgMl0gKyAnLCcgKyBjVmFsdWVzW2kgKiA0ICsgM10gKyAnKScpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPcGFjaXR5ICYmIChpdGVtRGF0YS5nLl9vbWRmIHx8IGlzRmlyc3RGcmFtZSkpIHtcbiAgICAgICAgdmFyIG9WYWx1ZXMgPSBpdGVtRGF0YS5nLm87XG5cbiAgICAgICAgaWYgKGl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgc3RvcHMgPSBpdGVtRGF0YS5jc3Q7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc3RvcHMgPSBpdGVtRGF0YS5vc3Q7XG4gICAgICAgIH1cblxuICAgICAgICBsZW4gPSBzdG9wcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgc3RvcCA9IHN0b3BzW2ldO1xuXG4gICAgICAgICAgaWYgKCFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgICAgc3RvcC5zZXRBdHRyaWJ1dGUoJ29mZnNldCcsIG9WYWx1ZXNbaSAqIDJdICsgJyUnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzdG9wLnNldEF0dHJpYnV0ZSgnc3RvcC1vcGFjaXR5Jywgb1ZhbHVlc1tpICogMiArIDFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc3R5bGVEYXRhLnQgPT09IDEpIHtcbiAgICAgICAgaWYgKGl0ZW1EYXRhLmUuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ3gyJywgcHQyWzBdKTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ3kyJywgcHQyWzFdKTtcblxuICAgICAgICAgIGlmIChoYXNPcGFjaXR5ICYmICFpdGVtRGF0YS5nLl9jb2xsYXBzYWJsZSkge1xuICAgICAgICAgICAgaXRlbURhdGEub2Yuc2V0QXR0cmlidXRlKCd4MicsIHB0MlswXSk7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ3kyJywgcHQyWzFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByYWQ7XG5cbiAgICAgICAgaWYgKGl0ZW1EYXRhLnMuX21kZiB8fCBpdGVtRGF0YS5lLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgICAgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ3InLCByYWQpO1xuXG4gICAgICAgICAgaWYgKGhhc09wYWNpdHkgJiYgIWl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgICBpdGVtRGF0YS5vZi5zZXRBdHRyaWJ1dGUoJ3InLCByYWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpdGVtRGF0YS5lLl9tZGYgfHwgaXRlbURhdGEuaC5fbWRmIHx8IGl0ZW1EYXRhLmEuX21kZiB8fCBpc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgICBpZiAoIXJhZCkge1xuICAgICAgICAgICAgcmFkID0gTWF0aC5zcXJ0KE1hdGgucG93KHB0MVswXSAtIHB0MlswXSwgMikgKyBNYXRoLnBvdyhwdDFbMV0gLSBwdDJbMV0sIDIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgYW5nID0gTWF0aC5hdGFuMihwdDJbMV0gLSBwdDFbMV0sIHB0MlswXSAtIHB0MVswXSk7XG4gICAgICAgICAgdmFyIHBlcmNlbnQgPSBpdGVtRGF0YS5oLnY7XG5cbiAgICAgICAgICBpZiAocGVyY2VudCA+PSAxKSB7XG4gICAgICAgICAgICBwZXJjZW50ID0gMC45OTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHBlcmNlbnQgPD0gLTEpIHtcbiAgICAgICAgICAgIHBlcmNlbnQgPSAtMC45OTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgZGlzdCA9IHJhZCAqIHBlcmNlbnQ7XG4gICAgICAgICAgdmFyIHggPSBNYXRoLmNvcyhhbmcgKyBpdGVtRGF0YS5hLnYpICogZGlzdCArIHB0MVswXTtcbiAgICAgICAgICB2YXIgeSA9IE1hdGguc2luKGFuZyArIGl0ZW1EYXRhLmEudikgKiBkaXN0ICsgcHQxWzFdO1xuICAgICAgICAgIGdmaWxsLnNldEF0dHJpYnV0ZSgnZngnLCB4KTtcbiAgICAgICAgICBnZmlsbC5zZXRBdHRyaWJ1dGUoJ2Z5JywgeSk7XG5cbiAgICAgICAgICBpZiAoaGFzT3BhY2l0eSAmJiAhaXRlbURhdGEuZy5fY29sbGFwc2FibGUpIHtcbiAgICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgnZngnLCB4KTtcbiAgICAgICAgICAgIGl0ZW1EYXRhLm9mLnNldEF0dHJpYnV0ZSgnZnknLCB5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gZ2ZpbGwuc2V0QXR0cmlidXRlKCdmeScsJzIwMCcpO1xuXG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVuZGVyU3Ryb2tlKHN0eWxlRGF0YSwgaXRlbURhdGEsIGlzRmlyc3RGcmFtZSkge1xuICAgICAgdmFyIHN0eWxlRWxlbSA9IGl0ZW1EYXRhLnN0eWxlO1xuICAgICAgdmFyIGQgPSBpdGVtRGF0YS5kO1xuXG4gICAgICBpZiAoZCAmJiAoZC5fbWRmIHx8IGlzRmlyc3RGcmFtZSkgJiYgZC5kYXNoU3RyKSB7XG4gICAgICAgIHN0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCBkLmRhc2hTdHIpO1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaG9mZnNldCcsIGQuZGFzaG9mZnNldFswXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtRGF0YS5jICYmIChpdGVtRGF0YS5jLl9tZGYgfHwgaXNGaXJzdEZyYW1lKSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2UnLCAncmdiKCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGl0ZW1EYXRhLmMudlsyXSkgKyAnKScpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGlzRmlyc3RGcmFtZSkge1xuICAgICAgICBzdHlsZUVsZW0ucEVsZW0uc2V0QXR0cmlidXRlKCdzdHJva2Utb3BhY2l0eScsIGl0ZW1EYXRhLm8udik7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtRGF0YS53Ll9tZGYgfHwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHN0eWxlRWxlbS5wRWxlbS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIGl0ZW1EYXRhLncudik7XG5cbiAgICAgICAgaWYgKHN0eWxlRWxlbS5tc0VsZW0pIHtcbiAgICAgICAgICBzdHlsZUVsZW0ubXNFbGVtLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgaXRlbURhdGEudy52KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIGZ1bmN0aW9uIFNWR1NoYXBlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgLy8gTGlzdCBvZiBkcmF3YWJsZSBlbGVtZW50c1xuICAgIHRoaXMuc2hhcGVzID0gW107IC8vIEZ1bGwgc2hhcGUgZGF0YVxuXG4gICAgdGhpcy5zaGFwZXNEYXRhID0gZGF0YS5zaGFwZXM7IC8vIExpc3Qgb2Ygc3R5bGVzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHNoYXBlc1xuXG4gICAgdGhpcy5zdHlsZXNMaXN0ID0gW107IC8vIExpc3Qgb2YgbW9kaWZpZXJzIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHRvIHNoYXBlc1xuXG4gICAgdGhpcy5zaGFwZU1vZGlmaWVycyA9IFtdOyAvLyBMaXN0IG9mIGl0ZW1zIGluIHNoYXBlIHRyZWVcblxuICAgIHRoaXMuaXRlbXNEYXRhID0gW107IC8vIExpc3Qgb2YgaXRlbXMgaW4gcHJldmlvdXMgc2hhcGUgdHJlZVxuXG4gICAgdGhpcy5wcm9jZXNzZWRFbGVtZW50cyA9IFtdOyAvLyBMaXN0IG9mIGFuaW1hdGVkIGNvbXBvbmVudHNcblxuICAgIHRoaXMuYW5pbWF0ZWRDb250ZW50cyA9IFtdO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7IC8vIE1vdmluZyBhbnkgcHJvcGVydHkgdGhhdCBkb2Vzbid0IGdldCB0b28gbXVjaCBhY2Nlc3MgYWZ0ZXIgaW5pdGlhbGl6YXRpb24gYmVjYXVzZSBvZiB2OCB3YXkgb2YgaGFuZGxpbmcgbW9yZSB0aGFuIDEwIHByb3BlcnRpZXMuXG4gICAgLy8gTGlzdCBvZiBlbGVtZW50cyB0aGF0IGhhdmUgYmVlbiBjcmVhdGVkXG5cbiAgICB0aGlzLnByZXZWaWV3RGF0YSA9IFtdOyAvLyBNb3ZpbmcgYW55IHByb3BlcnR5IHRoYXQgZG9lc24ndCBnZXQgdG9vIG11Y2ggYWNjZXNzIGFmdGVyIGluaXRpYWxpemF0aW9uIGJlY2F1c2Ugb2Ygdjggd2F5IG9mIGhhbmRsaW5nIG1vcmUgdGhhbiAxMCBwcm9wZXJ0aWVzLlxuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIElTaGFwZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnRdLCBTVkdTaGFwZUVsZW1lbnQpO1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuaW5pdFNlY29uZGFyeUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmlkZW50aXR5TWF0cml4ID0gbmV3IE1hdHJpeCgpO1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuYnVpbGRFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge307XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2VhcmNoU2hhcGVzKHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRoaXMucHJldlZpZXdEYXRhLCB0aGlzLmxheWVyRWxlbWVudCwgMCwgW10sIHRydWUpO1xuICAgIHRoaXMuZmlsdGVyVW5pcXVlU2hhcGVzKCk7XG4gIH07XG4gIC8qXHJcbiAgVGhpcyBtZXRob2Qgc2VhcmNoZXMgZm9yIG11bHRpcGxlIHNoYXBlcyB0aGF0IGFmZmVjdCBhIHNpbmdsZSBlbGVtZW50IGFuZCBvbmUgb2YgdGhlbSBpcyBhbmltYXRlZFxyXG4gICovXG5cblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmZpbHRlclVuaXF1ZVNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5zaGFwZXMubGVuZ3RoO1xuICAgIHZhciBzaGFwZTtcbiAgICB2YXIgajtcbiAgICB2YXIgakxlbiA9IHRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7XG4gICAgdmFyIHN0eWxlO1xuICAgIHZhciB0ZW1wU2hhcGVzID0gW107XG4gICAgdmFyIGFyZUFuaW1hdGVkID0gZmFsc2U7XG5cbiAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICBzdHlsZSA9IHRoaXMuc3R5bGVzTGlzdFtqXTtcbiAgICAgIGFyZUFuaW1hdGVkID0gZmFsc2U7XG4gICAgICB0ZW1wU2hhcGVzLmxlbmd0aCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBzaGFwZSA9IHRoaXMuc2hhcGVzW2ldO1xuXG4gICAgICAgIGlmIChzaGFwZS5zdHlsZXMuaW5kZXhPZihzdHlsZSkgIT09IC0xKSB7XG4gICAgICAgICAgdGVtcFNoYXBlcy5wdXNoKHNoYXBlKTtcbiAgICAgICAgICBhcmVBbmltYXRlZCA9IHNoYXBlLl9pc0FuaW1hdGVkIHx8IGFyZUFuaW1hdGVkO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZW1wU2hhcGVzLmxlbmd0aCA+IDEgJiYgYXJlQW5pbWF0ZWQpIHtcbiAgICAgICAgdGhpcy5zZXRTaGFwZXNBc0FuaW1hdGVkKHRlbXBTaGFwZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnNldFNoYXBlc0FzQW5pbWF0ZWQgPSBmdW5jdGlvbiAoc2hhcGVzKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNoYXBlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHNoYXBlc1tpXS5zZXRBc0FuaW1hdGVkKCk7XG4gICAgfVxuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU3R5bGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIGxldmVsKSB7XG4gICAgLy8gVE9ETzogcHJldmVudCBkcmF3aW5nIG9mIGhpZGRlbiBzdHlsZXNcbiAgICB2YXIgZWxlbWVudERhdGE7XG4gICAgdmFyIHN0eWxlT2IgPSBuZXcgU1ZHU3R5bGVEYXRhKGRhdGEsIGxldmVsKTtcbiAgICB2YXIgcGF0aEVsZW1lbnQgPSBzdHlsZU9iLnBFbGVtO1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdzdCcpIHtcbiAgICAgIGVsZW1lbnREYXRhID0gbmV3IFNWR1N0cm9rZVN0eWxlRGF0YSh0aGlzLCBkYXRhLCBzdHlsZU9iKTtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdmbCcpIHtcbiAgICAgIGVsZW1lbnREYXRhID0gbmV3IFNWR0ZpbGxTdHlsZURhdGEodGhpcywgZGF0YSwgc3R5bGVPYik7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZ2YnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIHZhciBHcmFkaWVudENvbnN0cnVjdG9yID0gZGF0YS50eSA9PT0gJ2dmJyA/IFNWR0dyYWRpZW50RmlsbFN0eWxlRGF0YSA6IFNWR0dyYWRpZW50U3Ryb2tlU3R5bGVEYXRhO1xuICAgICAgZWxlbWVudERhdGEgPSBuZXcgR3JhZGllbnRDb25zdHJ1Y3Rvcih0aGlzLCBkYXRhLCBzdHlsZU9iKTtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGVsZW1lbnREYXRhLmdmKTtcblxuICAgICAgaWYgKGVsZW1lbnREYXRhLm1hc2tJZCkge1xuICAgICAgICB0aGlzLmdsb2JhbERhdGEuZGVmcy5hcHBlbmRDaGlsZChlbGVtZW50RGF0YS5tcyk7XG4gICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKGVsZW1lbnREYXRhLm9mKTtcbiAgICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdtYXNrJywgJ3VybCgnICsgZ2V0TG9jYXRpb25IcmVmKCkgKyAnIycgKyBlbGVtZW50RGF0YS5tYXNrSWQgKyAnKScpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZGF0YS50eSA9PT0gJ25vJykge1xuICAgICAgZWxlbWVudERhdGEgPSBuZXcgU1ZHTm9TdHlsZURhdGEodGhpcywgZGF0YSwgc3R5bGVPYik7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEudHkgPT09ICdzdCcgfHwgZGF0YS50eSA9PT0gJ2dzJykge1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsIGxpbmVDYXBFbnVtW2RhdGEubGMgfHwgMl0pO1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWpvaW4nLCBsaW5lSm9pbkVudW1bZGF0YS5saiB8fCAyXSk7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsICcwJyk7XG5cbiAgICAgIGlmIChkYXRhLmxqID09PSAxKSB7XG4gICAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlLW1pdGVybGltaXQnLCBkYXRhLm1sKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGF0YS5yID09PSAyKSB7XG4gICAgICBwYXRoRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbGwtcnVsZScsICdldmVub2RkJyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEubG4pIHtcbiAgICAgIHBhdGhFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCBkYXRhLmxuKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5jbCkge1xuICAgICAgcGF0aEVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGRhdGEuY2wpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmJtKSB7XG4gICAgICBwYXRoRWxlbWVudC5zdHlsZVsnbWl4LWJsZW5kLW1vZGUnXSA9IGdldEJsZW5kTW9kZShkYXRhLmJtKTtcbiAgICB9XG5cbiAgICB0aGlzLnN0eWxlc0xpc3QucHVzaChzdHlsZU9iKTtcbiAgICB0aGlzLmFkZFRvQW5pbWF0ZWRDb250ZW50cyhkYXRhLCBlbGVtZW50RGF0YSk7XG4gICAgcmV0dXJuIGVsZW1lbnREYXRhO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlR3JvdXBFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZWxlbWVudERhdGEgPSBuZXcgU2hhcGVHcm91cERhdGEoKTtcblxuICAgIGlmIChkYXRhLmxuKSB7XG4gICAgICBlbGVtZW50RGF0YS5nci5zZXRBdHRyaWJ1dGUoJ2lkJywgZGF0YS5sbik7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEuY2wpIHtcbiAgICAgIGVsZW1lbnREYXRhLmdyLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBkYXRhLmNsKTtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS5ibSkge1xuICAgICAgZWxlbWVudERhdGEuZ3Iuc3R5bGVbJ21peC1ibGVuZC1tb2RlJ10gPSBnZXRCbGVuZE1vZGUoZGF0YS5ibSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnREYXRhO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlVHJhbnNmb3JtRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBjb250YWluZXIpIHtcbiAgICB2YXIgdHJhbnNmb3JtUHJvcGVydHkgPSBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHkodGhpcywgZGF0YSwgdGhpcyk7XG4gICAgdmFyIGVsZW1lbnREYXRhID0gbmV3IFNWR1RyYW5zZm9ybURhdGEodHJhbnNmb3JtUHJvcGVydHksIHRyYW5zZm9ybVByb3BlcnR5Lm8sIGNvbnRhaW5lcik7XG4gICAgdGhpcy5hZGRUb0FuaW1hdGVkQ29udGVudHMoZGF0YSwgZWxlbWVudERhdGEpO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVNoYXBlRWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBvd25UcmFuc2Zvcm1lcnMsIGxldmVsKSB7XG4gICAgdmFyIHR5ID0gNDtcblxuICAgIGlmIChkYXRhLnR5ID09PSAncmMnKSB7XG4gICAgICB0eSA9IDU7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZWwnKSB7XG4gICAgICB0eSA9IDY7XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnc3InKSB7XG4gICAgICB0eSA9IDc7XG4gICAgfVxuXG4gICAgdmFyIHNoYXBlUHJvcGVydHkgPSBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRTaGFwZVByb3AodGhpcywgZGF0YSwgdHksIHRoaXMpO1xuICAgIHZhciBlbGVtZW50RGF0YSA9IG5ldyBTVkdTaGFwZURhdGEob3duVHJhbnNmb3JtZXJzLCBsZXZlbCwgc2hhcGVQcm9wZXJ0eSk7XG4gICAgdGhpcy5zaGFwZXMucHVzaChlbGVtZW50RGF0YSk7XG4gICAgdGhpcy5hZGRTaGFwZVRvTW9kaWZpZXJzKGVsZW1lbnREYXRhKTtcbiAgICB0aGlzLmFkZFRvQW5pbWF0ZWRDb250ZW50cyhkYXRhLCBlbGVtZW50RGF0YSk7XG4gICAgcmV0dXJuIGVsZW1lbnREYXRhO1xuICB9O1xuXG4gIFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuYWRkVG9BbmltYXRlZENvbnRlbnRzID0gZnVuY3Rpb24gKGRhdGEsIGVsZW1lbnQpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRoaXMuYW5pbWF0ZWRDb250ZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHRoaXMuYW5pbWF0ZWRDb250ZW50c1tpXS5lbGVtZW50ID09PSBlbGVtZW50KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHRoaXMuYW5pbWF0ZWRDb250ZW50cy5wdXNoKHtcbiAgICAgIGZuOiBTVkdFbGVtZW50c1JlbmRlcmVyLmNyZWF0ZVJlbmRlckZ1bmN0aW9uKGRhdGEpLFxuICAgICAgZWxlbWVudDogZWxlbWVudCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KTtcbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnNldEVsZW1lbnRTdHlsZXMgPSBmdW5jdGlvbiAoZWxlbWVudERhdGEpIHtcbiAgICB2YXIgYXJyID0gZWxlbWVudERhdGEuc3R5bGVzO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuID0gdGhpcy5zdHlsZXNMaXN0Lmxlbmd0aDtcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXNMaXN0W2pdLmNsb3NlZCkge1xuICAgICAgICBhcnIucHVzaCh0aGlzLnN0eWxlc0xpc3Rbal0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbG9hZFNoYXBlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLml0ZW1zRGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHRoaXMucHJldlZpZXdEYXRhW2ldID0gdGhpcy5pdGVtc0RhdGFbaV07XG4gICAgfVxuXG4gICAgdGhpcy5zZWFyY2hTaGFwZXModGhpcy5zaGFwZXNEYXRhLCB0aGlzLml0ZW1zRGF0YSwgdGhpcy5wcmV2Vmlld0RhdGEsIHRoaXMubGF5ZXJFbGVtZW50LCAwLCBbXSwgdHJ1ZSk7XG4gICAgdGhpcy5maWx0ZXJVbmlxdWVTaGFwZXMoKTtcbiAgICBsZW4gPSB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5keW5hbWljUHJvcGVydGllc1tpXS5nZXRWYWx1ZSgpO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyTW9kaWZpZXJzKCk7XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZWFyY2hTaGFwZXMgPSBmdW5jdGlvbiAoYXJyLCBpdGVtc0RhdGEsIHByZXZWaWV3RGF0YSwgY29udGFpbmVyLCBsZXZlbCwgdHJhbnNmb3JtZXJzLCByZW5kZXIpIHtcbiAgICB2YXIgb3duVHJhbnNmb3JtZXJzID0gW10uY29uY2F0KHRyYW5zZm9ybWVycyk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGggLSAxO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBvd25TdHlsZXMgPSBbXTtcbiAgICB2YXIgb3duTW9kaWZpZXJzID0gW107XG4gICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgdmFyIG1vZGlmaWVyO1xuICAgIHZhciBwcm9jZXNzZWRQb3M7XG5cbiAgICBmb3IgKGkgPSBsZW47IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBwcm9jZXNzZWRQb3MgPSB0aGlzLnNlYXJjaFByb2Nlc3NlZEVsZW1lbnQoYXJyW2ldKTtcblxuICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgYXJyW2ldLl9yZW5kZXIgPSByZW5kZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtc0RhdGFbaV0gPSBwcmV2Vmlld0RhdGFbcHJvY2Vzc2VkUG9zIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChhcnJbaV0udHkgPT09ICdmbCcgfHwgYXJyW2ldLnR5ID09PSAnc3QnIHx8IGFycltpXS50eSA9PT0gJ2dmJyB8fCBhcnJbaV0udHkgPT09ICdncycgfHwgYXJyW2ldLnR5ID09PSAnbm8nKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVTdHlsZUVsZW1lbnQoYXJyW2ldLCBsZXZlbCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldLnN0eWxlLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGFycltpXS5fcmVuZGVyKSB7XG4gICAgICAgICAgaWYgKGl0ZW1zRGF0YVtpXS5zdHlsZS5wRWxlbS5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChpdGVtc0RhdGFbaV0uc3R5bGUucEVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG93blN0eWxlcy5wdXNoKGl0ZW1zRGF0YVtpXS5zdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlR3JvdXBFbGVtZW50KGFycltpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgakxlbiA9IGl0ZW1zRGF0YVtpXS5pdC5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBpdGVtc0RhdGFbaV0ucHJldlZpZXdEYXRhW2pdID0gaXRlbXNEYXRhW2ldLml0W2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VhcmNoU2hhcGVzKGFycltpXS5pdCwgaXRlbXNEYXRhW2ldLml0LCBpdGVtc0RhdGFbaV0ucHJldlZpZXdEYXRhLCBpdGVtc0RhdGFbaV0uZ3IsIGxldmVsICsgMSwgb3duVHJhbnNmb3JtZXJzLCByZW5kZXIpO1xuXG4gICAgICAgIGlmIChhcnJbaV0uX3JlbmRlcikge1xuICAgICAgICAgIGlmIChpdGVtc0RhdGFbaV0uZ3IucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgICBjb250YWluZXIuYXBwZW5kQ2hpbGQoaXRlbXNEYXRhW2ldLmdyKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndHInKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVUcmFuc2Zvcm1FbGVtZW50KGFycltpXSwgY29udGFpbmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRUcmFuc2Zvcm0gPSBpdGVtc0RhdGFbaV0udHJhbnNmb3JtO1xuICAgICAgICBvd25UcmFuc2Zvcm1lcnMucHVzaChjdXJyZW50VHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAnc2gnIHx8IGFycltpXS50eSA9PT0gJ3JjJyB8fCBhcnJbaV0udHkgPT09ICdlbCcgfHwgYXJyW2ldLnR5ID09PSAnc3InKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gdGhpcy5jcmVhdGVTaGFwZUVsZW1lbnQoYXJyW2ldLCBvd25UcmFuc2Zvcm1lcnMsIGxldmVsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2V0RWxlbWVudFN0eWxlcyhpdGVtc0RhdGFbaV0pO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICd0bScgfHwgYXJyW2ldLnR5ID09PSAncmQnIHx8IGFycltpXS50eSA9PT0gJ21zJyB8fCBhcnJbaV0udHkgPT09ICdwYicgfHwgYXJyW2ldLnR5ID09PSAnenonIHx8IGFycltpXS50eSA9PT0gJ29wJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFycltpXSk7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gbW9kaWZpZXI7XG4gICAgICAgICAgdGhpcy5zaGFwZU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RpZmllciA9IGl0ZW1zRGF0YVtpXTtcbiAgICAgICAgICBtb2RpZmllci5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG93bk1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAncnAnKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBTaGFwZU1vZGlmaWVycy5nZXRNb2RpZmllcihhcnJbaV0udHkpO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIG1vZGlmaWVyLmluaXQodGhpcywgYXJyLCBpLCBpdGVtc0RhdGEpO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgICAgcmVuZGVyID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG93bk1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRQcm9jZXNzZWRFbGVtZW50KGFycltpXSwgaSArIDEpO1xuICAgIH1cblxuICAgIGxlbiA9IG93blN0eWxlcy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIG93blN0eWxlc1tpXS5jbG9zZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGxlbiA9IG93bk1vZGlmaWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIG93bk1vZGlmaWVyc1tpXS5jbG9zZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlbmRlck1vZGlmaWVycygpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLnN0eWxlc0xpc3RbaV0ucmVzZXQoKTtcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlclNoYXBlKCk7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLnN0eWxlc0xpc3RbaV0uX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGVzTGlzdFtpXS5tc0VsZW0pIHtcbiAgICAgICAgICB0aGlzLnN0eWxlc0xpc3RbaV0ubXNFbGVtLnNldEF0dHJpYnV0ZSgnZCcsIHRoaXMuc3R5bGVzTGlzdFtpXS5kKTsgLy8gQWRkaW5nIE0wIDAgZml4ZXMgc2FtZSBtYXNrIGJ1ZyBvbiBhbGwgYnJvd3NlcnNcblxuICAgICAgICAgIHRoaXMuc3R5bGVzTGlzdFtpXS5kID0gJ00wIDAnICsgdGhpcy5zdHlsZXNMaXN0W2ldLmQ7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0eWxlc0xpc3RbaV0ucEVsZW0uc2V0QXR0cmlidXRlKCdkJywgdGhpcy5zdHlsZXNMaXN0W2ldLmQgfHwgJ00wIDAnKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTaGFwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5hbmltYXRlZENvbnRlbnRzLmxlbmd0aDtcbiAgICB2YXIgYW5pbWF0ZWRDb250ZW50O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBhbmltYXRlZENvbnRlbnQgPSB0aGlzLmFuaW1hdGVkQ29udGVudHNbaV07XG5cbiAgICAgIGlmICgodGhpcy5faXNGaXJzdEZyYW1lIHx8IGFuaW1hdGVkQ29udGVudC5lbGVtZW50Ll9pc0FuaW1hdGVkKSAmJiBhbmltYXRlZENvbnRlbnQuZGF0YSAhPT0gdHJ1ZSkge1xuICAgICAgICBhbmltYXRlZENvbnRlbnQuZm4oYW5pbWF0ZWRDb250ZW50LmRhdGEsIGFuaW1hdGVkQ29udGVudC5lbGVtZW50LCB0aGlzLl9pc0ZpcnN0RnJhbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5kZXN0cm95QmFzZUVsZW1lbnQoKTtcbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBudWxsO1xuICAgIHRoaXMuaXRlbXNEYXRhID0gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBMZXR0ZXJQcm9wcyhvLCBzdywgc2MsIGZjLCBtLCBwKSB7XG4gICAgdGhpcy5vID0gbztcbiAgICB0aGlzLnN3ID0gc3c7XG4gICAgdGhpcy5zYyA9IHNjO1xuICAgIHRoaXMuZmMgPSBmYztcbiAgICB0aGlzLm0gPSBtO1xuICAgIHRoaXMucCA9IHA7XG4gICAgdGhpcy5fbWRmID0ge1xuICAgICAgbzogdHJ1ZSxcbiAgICAgIHN3OiAhIXN3LFxuICAgICAgc2M6ICEhc2MsXG4gICAgICBmYzogISFmYyxcbiAgICAgIG06IHRydWUsXG4gICAgICBwOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIExldHRlclByb3BzLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAobywgc3csIHNjLCBmYywgbSwgcCkge1xuICAgIHRoaXMuX21kZi5vID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmLnN3ID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmLnNjID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmLmZjID0gZmFsc2U7XG4gICAgdGhpcy5fbWRmLm0gPSBmYWxzZTtcbiAgICB0aGlzLl9tZGYucCA9IGZhbHNlO1xuICAgIHZhciB1cGRhdGVkID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5vICE9PSBvKSB7XG4gICAgICB0aGlzLm8gPSBvO1xuICAgICAgdGhpcy5fbWRmLm8gPSB0cnVlO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc3cgIT09IHN3KSB7XG4gICAgICB0aGlzLnN3ID0gc3c7XG4gICAgICB0aGlzLl9tZGYuc3cgPSB0cnVlO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuc2MgIT09IHNjKSB7XG4gICAgICB0aGlzLnNjID0gc2M7XG4gICAgICB0aGlzLl9tZGYuc2MgPSB0cnVlO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmMgIT09IGZjKSB7XG4gICAgICB0aGlzLmZjID0gZmM7XG4gICAgICB0aGlzLl9tZGYuZmMgPSB0cnVlO1xuICAgICAgdXBkYXRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubSAhPT0gbSkge1xuICAgICAgdGhpcy5tID0gbTtcbiAgICAgIHRoaXMuX21kZi5tID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChwLmxlbmd0aCAmJiAodGhpcy5wWzBdICE9PSBwWzBdIHx8IHRoaXMucFsxXSAhPT0gcFsxXSB8fCB0aGlzLnBbNF0gIT09IHBbNF0gfHwgdGhpcy5wWzVdICE9PSBwWzVdIHx8IHRoaXMucFsxMl0gIT09IHBbMTJdIHx8IHRoaXMucFsxM10gIT09IHBbMTNdKSkge1xuICAgICAgdGhpcy5wID0gcDtcbiAgICAgIHRoaXMuX21kZi5wID0gdHJ1ZTtcbiAgICAgIHVwZGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkO1xuICB9O1xuXG4gIGZ1bmN0aW9uIFRleHRQcm9wZXJ0eShlbGVtLCBkYXRhKSB7XG4gICAgdGhpcy5fZnJhbWVJZCA9IGluaXRpYWxEZWZhdWx0RnJhbWU7XG4gICAgdGhpcy5wdiA9ICcnO1xuICAgIHRoaXMudiA9ICcnO1xuICAgIHRoaXMua2YgPSBmYWxzZTtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuXG4gICAgaWYgKGRhdGEuZCAmJiBkYXRhLmQuc2lkKSB7XG4gICAgICBkYXRhLmQgPSBlbGVtLmdsb2JhbERhdGEuc2xvdE1hbmFnZXIuZ2V0UHJvcChkYXRhLmQpO1xuICAgIH1cblxuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLmNvbXAgPSB0aGlzLmVsZW0uY29tcDtcbiAgICB0aGlzLmtleXNJbmRleCA9IDA7XG4gICAgdGhpcy5jYW5SZXNpemUgPSBmYWxzZTtcbiAgICB0aGlzLm1pbmltdW1Gb250U2l6ZSA9IDE7XG4gICAgdGhpcy5lZmZlY3RzU2VxdWVuY2UgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnREYXRhID0ge1xuICAgICAgYXNjZW50OiAwLFxuICAgICAgYm94V2lkdGg6IHRoaXMuZGVmYXVsdEJveFdpZHRoLFxuICAgICAgZjogJycsXG4gICAgICBmU3R5bGU6ICcnLFxuICAgICAgZldlaWdodDogJycsXG4gICAgICBmYzogJycsXG4gICAgICBqOiAnJyxcbiAgICAgIGp1c3RpZnlPZmZzZXQ6ICcnLFxuICAgICAgbDogW10sXG4gICAgICBsaDogMCxcbiAgICAgIGxpbmVXaWR0aHM6IFtdLFxuICAgICAgbHM6ICcnLFxuICAgICAgb2Y6ICcnLFxuICAgICAgczogJycsXG4gICAgICBzYzogJycsXG4gICAgICBzdzogMCxcbiAgICAgIHQ6IDAsXG4gICAgICB0cjogMCxcbiAgICAgIHN6OiAwLFxuICAgICAgcHM6IG51bGwsXG4gICAgICBmaWxsQ29sb3JBbmltOiBmYWxzZSxcbiAgICAgIHN0cm9rZUNvbG9yQW5pbTogZmFsc2UsXG4gICAgICBzdHJva2VXaWR0aEFuaW06IGZhbHNlLFxuICAgICAgeU9mZnNldDogMCxcbiAgICAgIGZpbmFsU2l6ZTogMCxcbiAgICAgIGZpbmFsVGV4dDogW10sXG4gICAgICBmaW5hbExpbmVIZWlnaHQ6IDAsXG4gICAgICBfX2NvbXBsZXRlOiBmYWxzZVxuICAgIH07XG4gICAgdGhpcy5jb3B5RGF0YSh0aGlzLmN1cnJlbnREYXRhLCB0aGlzLmRhdGEuZC5rWzBdLnMpO1xuXG4gICAgaWYgKCF0aGlzLnNlYXJjaFByb3BlcnR5KCkpIHtcbiAgICAgIHRoaXMuY29tcGxldGVUZXh0RGF0YSh0aGlzLmN1cnJlbnREYXRhKTtcbiAgICB9XG4gIH1cblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmRlZmF1bHRCb3hXaWR0aCA9IFswLCAwXTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmNvcHlEYXRhID0gZnVuY3Rpb24gKG9iaiwgZGF0YSkge1xuICAgIGZvciAodmFyIHMgaW4gZGF0YSkge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBzKSkge1xuICAgICAgICBvYmpbc10gPSBkYXRhW3NdO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZXRDdXJyZW50RGF0YSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCFkYXRhLl9fY29tcGxldGUpIHtcbiAgICAgIHRoaXMuY29tcGxldGVUZXh0RGF0YShkYXRhKTtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnREYXRhID0gZGF0YTtcbiAgICB0aGlzLmN1cnJlbnREYXRhLmJveFdpZHRoID0gdGhpcy5jdXJyZW50RGF0YS5ib3hXaWR0aCB8fCB0aGlzLmRlZmF1bHRCb3hXaWR0aDtcbiAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoUHJvcGVydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoS2V5ZnJhbWVzKCk7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZWFyY2hLZXlmcmFtZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5rZiA9IHRoaXMuZGF0YS5kLmsubGVuZ3RoID4gMTtcblxuICAgIGlmICh0aGlzLmtmKSB7XG4gICAgICB0aGlzLmFkZEVmZmVjdCh0aGlzLmdldEtleWZyYW1lVmFsdWUuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMua2Y7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5hZGRFZmZlY3QgPSBmdW5jdGlvbiAoZWZmZWN0RnVuY3Rpb24pIHtcbiAgICB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5wdXNoKGVmZmVjdEZ1bmN0aW9uKTtcbiAgICB0aGlzLmVsZW0uYWRkRHluYW1pY1Byb3BlcnR5KHRoaXMpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoX2ZpbmFsVmFsdWUpIHtcbiAgICBpZiAoKHRoaXMuZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQgPT09IHRoaXMuZnJhbWVJZCB8fCAhdGhpcy5lZmZlY3RzU2VxdWVuY2UubGVuZ3RoKSAmJiAhX2ZpbmFsVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmN1cnJlbnREYXRhLnQgPSB0aGlzLmRhdGEuZC5rW3RoaXMua2V5c0luZGV4XS5zLnQ7XG4gICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuY3VycmVudERhdGE7XG4gICAgdmFyIGN1cnJlbnRJbmRleCA9IHRoaXMua2V5c0luZGV4O1xuXG4gICAgaWYgKHRoaXMubG9jaykge1xuICAgICAgdGhpcy5zZXRDdXJyZW50RGF0YSh0aGlzLmN1cnJlbnREYXRhKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmxvY2sgPSB0cnVlO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZS5sZW5ndGg7XG4gICAgdmFyIGZpbmFsVmFsdWUgPSBfZmluYWxWYWx1ZSB8fCB0aGlzLmRhdGEuZC5rW3RoaXMua2V5c0luZGV4XS5zO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAvLyBDaGVja2luZyBpZiBpbmRleCBjaGFuZ2VkIHRvIHByZXZlbnQgY3JlYXRpbmcgYSBuZXcgb2JqZWN0IGV2ZXJ5IHRpbWUgdGhlIGV4cHJlc3Npb24gdXBkYXRlcy5cbiAgICAgIGlmIChjdXJyZW50SW5kZXggIT09IHRoaXMua2V5c0luZGV4KSB7XG4gICAgICAgIGZpbmFsVmFsdWUgPSB0aGlzLmVmZmVjdHNTZXF1ZW5jZVtpXShmaW5hbFZhbHVlLCBmaW5hbFZhbHVlLnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmluYWxWYWx1ZSA9IHRoaXMuZWZmZWN0c1NlcXVlbmNlW2ldKHRoaXMuY3VycmVudERhdGEsIGZpbmFsVmFsdWUudCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gZmluYWxWYWx1ZSkge1xuICAgICAgdGhpcy5zZXRDdXJyZW50RGF0YShmaW5hbFZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLnYgPSB0aGlzLmN1cnJlbnREYXRhO1xuICAgIHRoaXMucHYgPSB0aGlzLnY7XG4gICAgdGhpcy5sb2NrID0gZmFsc2U7XG4gICAgdGhpcy5mcmFtZUlkID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgfTtcblxuICBUZXh0UHJvcGVydHkucHJvdG90eXBlLmdldEtleWZyYW1lVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHRleHRLZXlzID0gdGhpcy5kYXRhLmQuaztcbiAgICB2YXIgZnJhbWVOdW0gPSB0aGlzLmVsZW0uY29tcC5yZW5kZXJlZEZyYW1lO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGV4dEtleXMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPD0gbGVuIC0gMSkge1xuICAgICAgaWYgKGkgPT09IGxlbiAtIDEgfHwgdGV4dEtleXNbaSArIDFdLnQgPiBmcmFtZU51bSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmtleXNJbmRleCAhPT0gaSkge1xuICAgICAgdGhpcy5rZXlzSW5kZXggPSBpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRhdGEuZC5rW3RoaXMua2V5c0luZGV4XS5zO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuYnVpbGRGaW5hbFRleHQgPSBmdW5jdGlvbiAodGV4dCkge1xuICAgIHZhciBjaGFyYWN0ZXJzQXJyYXkgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRleHQubGVuZ3RoO1xuICAgIHZhciBjaGFyQ29kZTtcbiAgICB2YXIgc2Vjb25kQ2hhckNvZGU7XG4gICAgdmFyIHNob3VsZENvbWJpbmUgPSBmYWxzZTtcbiAgICB2YXIgc2hvdWxkQ29tYmluZU5leHQgPSBmYWxzZTtcbiAgICB2YXIgY3VycmVudENoYXJzID0gJyc7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgc2hvdWxkQ29tYmluZSA9IHNob3VsZENvbWJpbmVOZXh0O1xuICAgICAgc2hvdWxkQ29tYmluZU5leHQgPSBmYWxzZTtcbiAgICAgIGNoYXJDb2RlID0gdGV4dC5jaGFyQ29kZUF0KGkpO1xuICAgICAgY3VycmVudENoYXJzID0gdGV4dC5jaGFyQXQoaSk7XG5cbiAgICAgIGlmIChGb250TWFuYWdlci5pc0NvbWJpbmVkQ2hhcmFjdGVyKGNoYXJDb2RlKSkge1xuICAgICAgICBzaG91bGRDb21iaW5lID0gdHJ1ZTsgLy8gSXQncyBhIHBvdGVudGlhbCBzdXJyb2dhdGUgcGFpciAodGhpcyBpcyB0aGUgSGlnaCBzdXJyb2dhdGUpXG4gICAgICB9IGVsc2UgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICAgICAgaWYgKEZvbnRNYW5hZ2VyLmlzUmVnaW9uYWxGbGFnKHRleHQsIGkpKSB7XG4gICAgICAgICAgY3VycmVudENoYXJzID0gdGV4dC5zdWJzdHIoaSwgMTQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlY29uZENoYXJDb2RlID0gdGV4dC5jaGFyQ29kZUF0KGkgKyAxKTsgLy8gSXQncyBhIHN1cnJvZ2F0ZSBwYWlyICh0aGlzIGlzIHRoZSBMb3cgc3Vycm9nYXRlKVxuXG4gICAgICAgICAgaWYgKHNlY29uZENoYXJDb2RlID49IDB4REMwMCAmJiBzZWNvbmRDaGFyQ29kZSA8PSAweERGRkYpIHtcbiAgICAgICAgICAgIGlmIChGb250TWFuYWdlci5pc01vZGlmaWVyKGNoYXJDb2RlLCBzZWNvbmRDaGFyQ29kZSkpIHtcbiAgICAgICAgICAgICAgY3VycmVudENoYXJzID0gdGV4dC5zdWJzdHIoaSwgMik7XG4gICAgICAgICAgICAgIHNob3VsZENvbWJpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChGb250TWFuYWdlci5pc0ZsYWdFbW9qaSh0ZXh0LnN1YnN0cihpLCA0KSkpIHtcbiAgICAgICAgICAgICAgY3VycmVudENoYXJzID0gdGV4dC5zdWJzdHIoaSwgNCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdXJyZW50Q2hhcnMgPSB0ZXh0LnN1YnN0cihpLCAyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPiAweERCRkYpIHtcbiAgICAgICAgc2Vjb25kQ2hhckNvZGUgPSB0ZXh0LmNoYXJDb2RlQXQoaSArIDEpO1xuXG4gICAgICAgIGlmIChGb250TWFuYWdlci5pc1ZhcmlhdGlvblNlbGVjdG9yKGNoYXJDb2RlKSkge1xuICAgICAgICAgIHNob3VsZENvbWJpbmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKEZvbnRNYW5hZ2VyLmlzWmVyb1dpZHRoSm9pbmVyKGNoYXJDb2RlKSkge1xuICAgICAgICBzaG91bGRDb21iaW5lID0gdHJ1ZTtcbiAgICAgICAgc2hvdWxkQ29tYmluZU5leHQgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkQ29tYmluZSkge1xuICAgICAgICBjaGFyYWN0ZXJzQXJyYXlbY2hhcmFjdGVyc0FycmF5Lmxlbmd0aCAtIDFdICs9IGN1cnJlbnRDaGFycztcbiAgICAgICAgc2hvdWxkQ29tYmluZSA9IGZhbHNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hhcmFjdGVyc0FycmF5LnB1c2goY3VycmVudENoYXJzKTtcbiAgICAgIH1cblxuICAgICAgaSArPSBjdXJyZW50Q2hhcnMubGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiBjaGFyYWN0ZXJzQXJyYXk7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5jb21wbGV0ZVRleHREYXRhID0gZnVuY3Rpb24gKGRvY3VtZW50RGF0YSkge1xuICAgIGRvY3VtZW50RGF0YS5fX2NvbXBsZXRlID0gdHJ1ZTtcbiAgICB2YXIgZm9udE1hbmFnZXIgPSB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5mb250TWFuYWdlcjtcbiAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICB2YXIgbGV0dGVycyA9IFtdO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgdmFyIG5ld0xpbmVGbGFnO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHZhbDtcbiAgICB2YXIgYW5jaG9yR3JvdXBpbmcgPSBkYXRhLm0uZztcbiAgICB2YXIgY3VycmVudFNpemUgPSAwO1xuICAgIHZhciBjdXJyZW50UG9zID0gMDtcbiAgICB2YXIgY3VycmVudExpbmUgPSAwO1xuICAgIHZhciBsaW5lV2lkdGhzID0gW107XG4gICAgdmFyIGxpbmVXaWR0aCA9IDA7XG4gICAgdmFyIG1heExpbmVXaWR0aCA9IDA7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGZvbnREYXRhID0gZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZik7XG4gICAgdmFyIGNoYXJEYXRhO1xuICAgIHZhciBjTGVuZ3RoID0gMDtcbiAgICB2YXIgZm9udFByb3BzID0gZ2V0Rm9udFByb3BlcnRpZXMoZm9udERhdGEpO1xuICAgIGRvY3VtZW50RGF0YS5mV2VpZ2h0ID0gZm9udFByb3BzLndlaWdodDtcbiAgICBkb2N1bWVudERhdGEuZlN0eWxlID0gZm9udFByb3BzLnN0eWxlO1xuICAgIGRvY3VtZW50RGF0YS5maW5hbFNpemUgPSBkb2N1bWVudERhdGEucztcbiAgICBkb2N1bWVudERhdGEuZmluYWxUZXh0ID0gdGhpcy5idWlsZEZpbmFsVGV4dChkb2N1bWVudERhdGEudCk7XG4gICAgbGVuID0gZG9jdW1lbnREYXRhLmZpbmFsVGV4dC5sZW5ndGg7XG4gICAgZG9jdW1lbnREYXRhLmZpbmFsTGluZUhlaWdodCA9IGRvY3VtZW50RGF0YS5saDtcbiAgICB2YXIgdHJhY2tpbmdPZmZzZXQgPSBkb2N1bWVudERhdGEudHIgLyAxMDAwICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZTtcbiAgICB2YXIgY2hhckNvZGU7XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLnN6KSB7XG4gICAgICB2YXIgZmxhZyA9IHRydWU7XG4gICAgICB2YXIgYm94V2lkdGggPSBkb2N1bWVudERhdGEuc3pbMF07XG4gICAgICB2YXIgYm94SGVpZ2h0ID0gZG9jdW1lbnREYXRhLnN6WzFdO1xuICAgICAgdmFyIGN1cnJlbnRIZWlnaHQ7XG4gICAgICB2YXIgZmluYWxUZXh0O1xuXG4gICAgICB3aGlsZSAoZmxhZykge1xuICAgICAgICBmaW5hbFRleHQgPSB0aGlzLmJ1aWxkRmluYWxUZXh0KGRvY3VtZW50RGF0YS50KTtcbiAgICAgICAgY3VycmVudEhlaWdodCA9IDA7XG4gICAgICAgIGxpbmVXaWR0aCA9IDA7XG4gICAgICAgIGxlbiA9IGZpbmFsVGV4dC5sZW5ndGg7XG4gICAgICAgIHRyYWNraW5nT2Zmc2V0ID0gZG9jdW1lbnREYXRhLnRyIC8gMTAwMCAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG4gICAgICAgIHZhciBsYXN0U3BhY2VJbmRleCA9IC0xO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGNoYXJDb2RlID0gZmluYWxUZXh0W2ldLmNoYXJDb2RlQXQoMCk7XG4gICAgICAgICAgbmV3TGluZUZsYWcgPSBmYWxzZTtcblxuICAgICAgICAgIGlmIChmaW5hbFRleHRbaV0gPT09ICcgJykge1xuICAgICAgICAgICAgbGFzdFNwYWNlSW5kZXggPSBpO1xuICAgICAgICAgIH0gZWxzZSBpZiAoY2hhckNvZGUgPT09IDEzIHx8IGNoYXJDb2RlID09PSAzKSB7XG4gICAgICAgICAgICBsaW5lV2lkdGggPSAwO1xuICAgICAgICAgICAgbmV3TGluZUZsYWcgPSB0cnVlO1xuICAgICAgICAgICAgY3VycmVudEhlaWdodCArPSBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0IHx8IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiAxLjI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGZvbnRNYW5hZ2VyLmNoYXJzKSB7XG4gICAgICAgICAgICBjaGFyRGF0YSA9IGZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGZpbmFsVGV4dFtpXSwgZm9udERhdGEuZlN0eWxlLCBmb250RGF0YS5mRmFtaWx5KTtcbiAgICAgICAgICAgIGNMZW5ndGggPSBuZXdMaW5lRmxhZyA/IDAgOiBjaGFyRGF0YS53ICogZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdENhbnZhc0hlbHBlci5mb250ID0gZG9jdW1lbnREYXRhLnMgKyAncHggJysgZm9udERhdGEuZkZhbWlseTtcbiAgICAgICAgICAgIGNMZW5ndGggPSBmb250TWFuYWdlci5tZWFzdXJlVGV4dChmaW5hbFRleHRbaV0sIGRvY3VtZW50RGF0YS5mLCBkb2N1bWVudERhdGEuZmluYWxTaXplKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAobGluZVdpZHRoICsgY0xlbmd0aCA+IGJveFdpZHRoICYmIGZpbmFsVGV4dFtpXSAhPT0gJyAnKSB7XG4gICAgICAgICAgICBpZiAobGFzdFNwYWNlSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIGxlbiArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaSA9IGxhc3RTcGFjZUluZGV4O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjdXJyZW50SGVpZ2h0ICs9IGRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHQgfHwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIDEuMjtcbiAgICAgICAgICAgIGZpbmFsVGV4dC5zcGxpY2UoaSwgbGFzdFNwYWNlSW5kZXggPT09IGkgPyAxIDogMCwgJ1xccicpOyAvLyBmaW5hbFRleHQgPSBmaW5hbFRleHQuc3Vic3RyKDAsaSkgKyBcIlxcclwiICsgZmluYWxUZXh0LnN1YnN0cihpID09PSBsYXN0U3BhY2VJbmRleCA/IGkgKyAxIDogaSk7XG5cbiAgICAgICAgICAgIGxhc3RTcGFjZUluZGV4ID0gLTE7XG4gICAgICAgICAgICBsaW5lV2lkdGggPSAwO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsaW5lV2lkdGggKz0gY0xlbmd0aDtcbiAgICAgICAgICAgIGxpbmVXaWR0aCArPSB0cmFja2luZ09mZnNldDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50SGVpZ2h0ICs9IGZvbnREYXRhLmFzY2VudCAqIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDA7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FuUmVzaXplICYmIGRvY3VtZW50RGF0YS5maW5hbFNpemUgPiB0aGlzLm1pbmltdW1Gb250U2l6ZSAmJiBib3hIZWlnaHQgPCBjdXJyZW50SGVpZ2h0KSB7XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAtPSAxO1xuICAgICAgICAgIGRvY3VtZW50RGF0YS5maW5hbExpbmVIZWlnaHQgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICogZG9jdW1lbnREYXRhLmxoIC8gZG9jdW1lbnREYXRhLnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmZpbmFsVGV4dCA9IGZpbmFsVGV4dDtcbiAgICAgICAgICBsZW4gPSBkb2N1bWVudERhdGEuZmluYWxUZXh0Lmxlbmd0aDtcbiAgICAgICAgICBmbGFnID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBsaW5lV2lkdGggPSAtdHJhY2tpbmdPZmZzZXQ7XG4gICAgY0xlbmd0aCA9IDA7XG4gICAgdmFyIHVuY29sbGFwc2VkU3BhY2VzID0gMDtcbiAgICB2YXIgY3VycmVudENoYXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIG5ld0xpbmVGbGFnID0gZmFsc2U7XG4gICAgICBjdXJyZW50Q2hhciA9IGRvY3VtZW50RGF0YS5maW5hbFRleHRbaV07XG4gICAgICBjaGFyQ29kZSA9IGN1cnJlbnRDaGFyLmNoYXJDb2RlQXQoMCk7XG5cbiAgICAgIGlmIChjaGFyQ29kZSA9PT0gMTMgfHwgY2hhckNvZGUgPT09IDMpIHtcbiAgICAgICAgdW5jb2xsYXBzZWRTcGFjZXMgPSAwO1xuICAgICAgICBsaW5lV2lkdGhzLnB1c2gobGluZVdpZHRoKTtcbiAgICAgICAgbWF4TGluZVdpZHRoID0gbGluZVdpZHRoID4gbWF4TGluZVdpZHRoID8gbGluZVdpZHRoIDogbWF4TGluZVdpZHRoO1xuICAgICAgICBsaW5lV2lkdGggPSAtMiAqIHRyYWNraW5nT2Zmc2V0O1xuICAgICAgICB2YWwgPSAnJztcbiAgICAgICAgbmV3TGluZUZsYWcgPSB0cnVlO1xuICAgICAgICBjdXJyZW50TGluZSArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gY3VycmVudENoYXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb250TWFuYWdlci5jaGFycykge1xuICAgICAgICBjaGFyRGF0YSA9IGZvbnRNYW5hZ2VyLmdldENoYXJEYXRhKGN1cnJlbnRDaGFyLCBmb250RGF0YS5mU3R5bGUsIGZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpLmZGYW1pbHkpO1xuICAgICAgICBjTGVuZ3RoID0gbmV3TGluZUZsYWcgPyAwIDogY2hhckRhdGEudyAqIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB2YXIgY2hhcldpZHRoID0gZm9udE1hbmFnZXIubWVhc3VyZVRleHQodmFsLCBkb2N1bWVudERhdGEuZiwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgICAgIC8vIHRDYW52YXNIZWxwZXIuZm9udCA9IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKyAncHggJysgZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseTtcbiAgICAgICAgY0xlbmd0aCA9IGZvbnRNYW5hZ2VyLm1lYXN1cmVUZXh0KHZhbCwgZG9jdW1lbnREYXRhLmYsIGRvY3VtZW50RGF0YS5maW5hbFNpemUpO1xuICAgICAgfSAvL1xuXG5cbiAgICAgIGlmIChjdXJyZW50Q2hhciA9PT0gJyAnKSB7XG4gICAgICAgIHVuY29sbGFwc2VkU3BhY2VzICs9IGNMZW5ndGggKyB0cmFja2luZ09mZnNldDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpbmVXaWR0aCArPSBjTGVuZ3RoICsgdHJhY2tpbmdPZmZzZXQgKyB1bmNvbGxhcHNlZFNwYWNlcztcbiAgICAgICAgdW5jb2xsYXBzZWRTcGFjZXMgPSAwO1xuICAgICAgfVxuXG4gICAgICBsZXR0ZXJzLnB1c2goe1xuICAgICAgICBsOiBjTGVuZ3RoLFxuICAgICAgICBhbjogY0xlbmd0aCxcbiAgICAgICAgYWRkOiBjdXJyZW50U2l6ZSxcbiAgICAgICAgbjogbmV3TGluZUZsYWcsXG4gICAgICAgIGFuSW5kZXhlczogW10sXG4gICAgICAgIHZhbDogdmFsLFxuICAgICAgICBsaW5lOiBjdXJyZW50TGluZSxcbiAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0OiAwXG4gICAgICB9KTtcblxuICAgICAgaWYgKGFuY2hvckdyb3VwaW5nID09IDIpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgY3VycmVudFNpemUgKz0gY0xlbmd0aDtcblxuICAgICAgICBpZiAodmFsID09PSAnJyB8fCB2YWwgPT09ICcgJyB8fCBpID09PSBsZW4gLSAxKSB7XG4gICAgICAgICAgaWYgKHZhbCA9PT0gJycgfHwgdmFsID09PSAnICcpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTaXplIC09IGNMZW5ndGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnRQb3MgPD0gaSkge1xuICAgICAgICAgICAgbGV0dGVyc1tjdXJyZW50UG9zXS5hbiA9IGN1cnJlbnRTaXplO1xuICAgICAgICAgICAgbGV0dGVyc1tjdXJyZW50UG9zXS5pbmQgPSBpbmRleDtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uZXh0cmEgPSBjTGVuZ3RoO1xuICAgICAgICAgICAgY3VycmVudFBvcyArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZGV4ICs9IDE7XG4gICAgICAgICAgY3VycmVudFNpemUgPSAwO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGFuY2hvckdyb3VwaW5nID09IDMpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgY3VycmVudFNpemUgKz0gY0xlbmd0aDtcblxuICAgICAgICBpZiAodmFsID09PSAnJyB8fCBpID09PSBsZW4gLSAxKSB7XG4gICAgICAgICAgaWYgKHZhbCA9PT0gJycpIHtcbiAgICAgICAgICAgIGN1cnJlbnRTaXplIC09IGNMZW5ndGg7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2hpbGUgKGN1cnJlbnRQb3MgPD0gaSkge1xuICAgICAgICAgICAgbGV0dGVyc1tjdXJyZW50UG9zXS5hbiA9IGN1cnJlbnRTaXplO1xuICAgICAgICAgICAgbGV0dGVyc1tjdXJyZW50UG9zXS5pbmQgPSBpbmRleDtcbiAgICAgICAgICAgIGxldHRlcnNbY3VycmVudFBvc10uZXh0cmEgPSBjTGVuZ3RoO1xuICAgICAgICAgICAgY3VycmVudFBvcyArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRTaXplID0gMDtcbiAgICAgICAgICBpbmRleCArPSAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXR0ZXJzW2luZGV4XS5pbmQgPSBpbmRleDtcbiAgICAgICAgbGV0dGVyc1tpbmRleF0uZXh0cmEgPSAwO1xuICAgICAgICBpbmRleCArPSAxO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50RGF0YS5sID0gbGV0dGVycztcbiAgICBtYXhMaW5lV2lkdGggPSBsaW5lV2lkdGggPiBtYXhMaW5lV2lkdGggPyBsaW5lV2lkdGggOiBtYXhMaW5lV2lkdGg7XG4gICAgbGluZVdpZHRocy5wdXNoKGxpbmVXaWR0aCk7XG5cbiAgICBpZiAoZG9jdW1lbnREYXRhLnN6KSB7XG4gICAgICBkb2N1bWVudERhdGEuYm94V2lkdGggPSBkb2N1bWVudERhdGEuc3pbMF07XG4gICAgICBkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRvY3VtZW50RGF0YS5ib3hXaWR0aCA9IG1heExpbmVXaWR0aDtcblxuICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgPSAtZG9jdW1lbnREYXRhLmJveFdpZHRoO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBkb2N1bWVudERhdGEuanVzdGlmeU9mZnNldCA9IC1kb2N1bWVudERhdGEuYm94V2lkdGggLyAyO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgPSAwO1xuICAgICAgfVxuICAgIH1cblxuICAgIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzID0gbGluZVdpZHRocztcbiAgICB2YXIgYW5pbWF0b3JzID0gZGF0YS5hO1xuICAgIHZhciBhbmltYXRvckRhdGE7XG4gICAgdmFyIGxldHRlckRhdGE7XG4gICAgakxlbiA9IGFuaW1hdG9ycy5sZW5ndGg7XG4gICAgdmFyIGJhc2VkO1xuICAgIHZhciBpbmQ7XG4gICAgdmFyIGluZGV4ZXMgPSBbXTtcblxuICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgIGFuaW1hdG9yRGF0YSA9IGFuaW1hdG9yc1tqXTtcblxuICAgICAgaWYgKGFuaW1hdG9yRGF0YS5hLnNjKSB7XG4gICAgICAgIGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0gPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW5pbWF0b3JEYXRhLmEuc3cpIHtcbiAgICAgICAgZG9jdW1lbnREYXRhLnN0cm9rZVdpZHRoQW5pbSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChhbmltYXRvckRhdGEuYS5mYyB8fCBhbmltYXRvckRhdGEuYS5maCB8fCBhbmltYXRvckRhdGEuYS5mcyB8fCBhbmltYXRvckRhdGEuYS5mYikge1xuICAgICAgICBkb2N1bWVudERhdGEuZmlsbENvbG9yQW5pbSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGluZCA9IDA7XG4gICAgICBiYXNlZCA9IGFuaW1hdG9yRGF0YS5zLmI7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBsZXR0ZXJEYXRhID0gbGV0dGVyc1tpXTtcbiAgICAgICAgbGV0dGVyRGF0YS5hbkluZGV4ZXNbal0gPSBpbmQ7XG5cbiAgICAgICAgaWYgKGJhc2VkID09IDEgJiYgbGV0dGVyRGF0YS52YWwgIT09ICcnIHx8IGJhc2VkID09IDIgJiYgbGV0dGVyRGF0YS52YWwgIT09ICcnICYmIGxldHRlckRhdGEudmFsICE9PSAnICcgfHwgYmFzZWQgPT0gMyAmJiAobGV0dGVyRGF0YS5uIHx8IGxldHRlckRhdGEudmFsID09ICcgJyB8fCBpID09IGxlbiAtIDEpIHx8IGJhc2VkID09IDQgJiYgKGxldHRlckRhdGEubiB8fCBpID09IGxlbiAtIDEpKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICAgICAgICBpZiAoYW5pbWF0b3JEYXRhLnMucm4gPT09IDEpIHtcbiAgICAgICAgICAgIGluZGV4ZXMucHVzaChpbmQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluZCArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGRhdGEuYVtqXS5zLnRvdGFsQ2hhcnMgPSBpbmQ7XG4gICAgICB2YXIgY3VycmVudEluZCA9IC0xO1xuICAgICAgdmFyIG5ld0luZDtcblxuICAgICAgaWYgKGFuaW1hdG9yRGF0YS5zLnJuID09PSAxKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGxldHRlckRhdGEgPSBsZXR0ZXJzW2ldO1xuXG4gICAgICAgICAgaWYgKGN1cnJlbnRJbmQgIT0gbGV0dGVyRGF0YS5hbkluZGV4ZXNbal0pIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgICAgICBjdXJyZW50SW5kID0gbGV0dGVyRGF0YS5hbkluZGV4ZXNbal07XG4gICAgICAgICAgICBuZXdJbmQgPSBpbmRleGVzLnNwbGljZShNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBpbmRleGVzLmxlbmd0aCksIDEpWzBdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGxldHRlckRhdGEuYW5JbmRleGVzW2pdID0gbmV3SW5kO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZG9jdW1lbnREYXRhLnlPZmZzZXQgPSBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0IHx8IGRvY3VtZW50RGF0YS5maW5hbFNpemUgKiAxLjI7XG4gICAgZG9jdW1lbnREYXRhLmxzID0gZG9jdW1lbnREYXRhLmxzIHx8IDA7XG4gICAgZG9jdW1lbnREYXRhLmFzY2VudCA9IGZvbnREYXRhLmFzY2VudCAqIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDA7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS51cGRhdGVEb2N1bWVudERhdGEgPSBmdW5jdGlvbiAobmV3RGF0YSwgaW5kZXgpIHtcbiAgICBpbmRleCA9IGluZGV4ID09PSB1bmRlZmluZWQgPyB0aGlzLmtleXNJbmRleCA6IGluZGV4O1xuICAgIHZhciBkRGF0YSA9IHRoaXMuY29weURhdGEoe30sIHRoaXMuZGF0YS5kLmtbaW5kZXhdLnMpO1xuICAgIGREYXRhID0gdGhpcy5jb3B5RGF0YShkRGF0YSwgbmV3RGF0YSk7XG4gICAgdGhpcy5kYXRhLmQua1tpbmRleF0ucyA9IGREYXRhO1xuICAgIHRoaXMucmVjYWxjdWxhdGUoaW5kZXgpO1xuICAgIHRoaXMuc2V0Q3VycmVudERhdGEoZERhdGEpO1xuICAgIHRoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5yZWNhbGN1bGF0ZSA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHZhciBkRGF0YSA9IHRoaXMuZGF0YS5kLmtbaW5kZXhdLnM7XG4gICAgZERhdGEuX19jb21wbGV0ZSA9IGZhbHNlO1xuICAgIHRoaXMua2V5c0luZGV4ID0gMDtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuZ2V0VmFsdWUoZERhdGEpO1xuICB9O1xuXG4gIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuY2FuUmVzaXplRm9udCA9IGZ1bmN0aW9uIChfY2FuUmVzaXplKSB7XG4gICAgdGhpcy5jYW5SZXNpemUgPSBfY2FuUmVzaXplO1xuICAgIHRoaXMucmVjYWxjdWxhdGUodGhpcy5rZXlzSW5kZXgpO1xuICAgIHRoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gIH07XG5cbiAgVGV4dFByb3BlcnR5LnByb3RvdHlwZS5zZXRNaW5pbXVtRm9udFNpemUgPSBmdW5jdGlvbiAoX2ZvbnRWYWx1ZSkge1xuICAgIHRoaXMubWluaW11bUZvbnRTaXplID0gTWF0aC5mbG9vcihfZm9udFZhbHVlKSB8fCAxO1xuICAgIHRoaXMucmVjYWxjdWxhdGUodGhpcy5rZXlzSW5kZXgpO1xuICAgIHRoaXMuZWxlbS5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gIH07XG5cbiAgdmFyIFRleHRTZWxlY3RvclByb3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4O1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbjtcbiAgICB2YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4gICAgZnVuY3Rpb24gVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkoZWxlbSwgZGF0YSkge1xuICAgICAgdGhpcy5fY3VycmVudFRleHRMZW5ndGggPSAtMTtcbiAgICAgIHRoaXMuayA9IGZhbHNlO1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICAgIHRoaXMuZWxlbSA9IGVsZW07XG4gICAgICB0aGlzLmNvbXAgPSBlbGVtLmNvbXA7XG4gICAgICB0aGlzLmZpbmFsUyA9IDA7XG4gICAgICB0aGlzLmZpbmFsRSA9IDA7XG4gICAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gICAgICB0aGlzLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLnMgfHwge1xuICAgICAgICBrOiAwXG4gICAgICB9LCAwLCAwLCB0aGlzKTtcblxuICAgICAgaWYgKCdlJyBpbiBkYXRhKSB7XG4gICAgICAgIHRoaXMuZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEuZSwgMCwgMCwgdGhpcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmUgPSB7XG4gICAgICAgICAgdjogMTAwXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHRoaXMubyA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEubyB8fCB7XG4gICAgICAgIGs6IDBcbiAgICAgIH0sIDAsIDAsIHRoaXMpO1xuICAgICAgdGhpcy54ZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKGVsZW0sIGRhdGEueGUgfHwge1xuICAgICAgICBrOiAwXG4gICAgICB9LCAwLCAwLCB0aGlzKTtcbiAgICAgIHRoaXMubmUgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLm5lIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG4gICAgICB0aGlzLnNtID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AoZWxlbSwgZGF0YS5zbSB8fCB7XG4gICAgICAgIGs6IDEwMFxuICAgICAgfSwgMCwgMCwgdGhpcyk7XG4gICAgICB0aGlzLmEgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcChlbGVtLCBkYXRhLmEsIDAsIDAuMDEsIHRoaXMpO1xuXG4gICAgICBpZiAoIXRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoKSB7XG4gICAgICAgIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBUZXh0U2VsZWN0b3JQcm9wRmFjdG9yeS5wcm90b3R5cGUgPSB7XG4gICAgICBnZXRNdWx0OiBmdW5jdGlvbiBnZXRNdWx0KGluZCkge1xuICAgICAgICBpZiAodGhpcy5fY3VycmVudFRleHRMZW5ndGggIT09IHRoaXMuZWxlbS50ZXh0UHJvcGVydHkuY3VycmVudERhdGEubC5sZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgeDEgPSAwO1xuICAgICAgICB2YXIgeTEgPSAwO1xuICAgICAgICB2YXIgeDIgPSAxO1xuICAgICAgICB2YXIgeTIgPSAxO1xuXG4gICAgICAgIGlmICh0aGlzLm5lLnYgPiAwKSB7XG4gICAgICAgICAgeDEgPSB0aGlzLm5lLnYgLyAxMDAuMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5MSA9IC10aGlzLm5lLnYgLyAxMDAuMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnhlLnYgPiAwKSB7XG4gICAgICAgICAgeDIgPSAxLjAgLSB0aGlzLnhlLnYgLyAxMDAuMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB5MiA9IDEuMCArIHRoaXMueGUudiAvIDEwMC4wO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVhc2VyID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoeDEsIHkxLCB4MiwgeTIpLmdldDtcbiAgICAgICAgdmFyIG11bHQgPSAwO1xuICAgICAgICB2YXIgcyA9IHRoaXMuZmluYWxTO1xuICAgICAgICB2YXIgZSA9IHRoaXMuZmluYWxFO1xuICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZGF0YS5zaDtcblxuICAgICAgICBpZiAodHlwZSA9PT0gMikge1xuICAgICAgICAgIGlmIChlID09PSBzKSB7XG4gICAgICAgICAgICBtdWx0ID0gaW5kID49IGUgPyAxIDogMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXVsdCA9IG1heCgwLCBtaW4oMC41IC8gKGUgLSBzKSArIChpbmQgLSBzKSAvIChlIC0gcyksIDEpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gMykge1xuICAgICAgICAgIGlmIChlID09PSBzKSB7XG4gICAgICAgICAgICBtdWx0ID0gaW5kID49IGUgPyAwIDogMTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXVsdCA9IDEgLSBtYXgoMCwgbWluKDAuNSAvIChlIC0gcykgKyAoaW5kIC0gcykgLyAoZSAtIHMpLCAxKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDQpIHtcbiAgICAgICAgICBpZiAoZSA9PT0gcykge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSBtYXgoMCwgbWluKDAuNSAvIChlIC0gcykgKyAoaW5kIC0gcykgLyAoZSAtIHMpLCAxKSk7XG5cbiAgICAgICAgICAgIGlmIChtdWx0IDwgMC41KSB7XG4gICAgICAgICAgICAgIG11bHQgKj0gMjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG11bHQgPSAxIC0gMiAqIChtdWx0IC0gMC41KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNSkge1xuICAgICAgICAgIGlmIChlID09PSBzKSB7XG4gICAgICAgICAgICBtdWx0ID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRvdCA9IGUgLSBzO1xuICAgICAgICAgICAgLyogaW5kICs9IDAuNTtcclxuICAgICAgICAgICAgICAgICAgICAgIG11bHQgPSAtNC8odG90KnRvdCkqKGluZCppbmQpKyg0L3RvdCkqaW5kOyAqL1xuXG4gICAgICAgICAgICBpbmQgPSBtaW4obWF4KDAsIGluZCArIDAuNSAtIHMpLCBlIC0gcyk7XG4gICAgICAgICAgICB2YXIgeCA9IC10b3QgLyAyICsgaW5kO1xuICAgICAgICAgICAgdmFyIGEgPSB0b3QgLyAyO1xuICAgICAgICAgICAgbXVsdCA9IE1hdGguc3FydCgxIC0geCAqIHggLyAoYSAqIGEpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBtdWx0ID0gZWFzZXIobXVsdCk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gNikge1xuICAgICAgICAgIGlmIChlID09PSBzKSB7XG4gICAgICAgICAgICBtdWx0ID0gMDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kID0gbWluKG1heCgwLCBpbmQgKyAwLjUgLSBzKSwgZSAtIHMpO1xuICAgICAgICAgICAgbXVsdCA9ICgxICsgTWF0aC5jb3MoTWF0aC5QSSArIE1hdGguUEkgKiAyICogaW5kIC8gKGUgLSBzKSkpIC8gMjsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG11bHQgPSBlYXNlcihtdWx0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaW5kID49IGZsb29yKHMpKSB7XG4gICAgICAgICAgICBpZiAoaW5kIC0gcyA8IDApIHtcbiAgICAgICAgICAgICAgbXVsdCA9IG1heCgwLCBtaW4obWluKGUsIDEpIC0gKHMgLSBpbmQpLCAxKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtdWx0ID0gbWF4KDAsIG1pbihlIC0gaW5kLCAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbXVsdCA9IGVhc2VyKG11bHQpO1xuICAgICAgICB9IC8vIFNtb290aG5lc3MgaW1wbGVtZW50YXRpb24uXG4gICAgICAgIC8vIFRoZSBzbW9vdGhuZXNzIHJlcHJlc2VudHMgYSByZWR1Y2VkIHJhbmdlIG9mIHRoZSBvcmlnaW5hbCBbMDsgMV0gcmFuZ2UuXG4gICAgICAgIC8vIGlmIHNtb290aG5lc3MgaXMgMjUlLCB0aGUgbmV3IHJhbmdlIHdpbGwgYmUgWzAuMzc1OyAwLjYyNV1cbiAgICAgICAgLy8gU3RlcHMgYXJlOlxuICAgICAgICAvLyAtIGZpbmQgdGhlIGxvd2VyIHZhbHVlIG9mIHRoZSBuZXcgcmFuZ2UgKHRocmVzaG9sZClcbiAgICAgICAgLy8gLSBpZiBtdWx0aXBsaWVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0IHZhbHVlLCBmbG9vciBpdCB0byAwXG4gICAgICAgIC8vIC0gaWYgaXQgaXMgbGFyZ2VyLFxuICAgICAgICAvLyAgICAgLSBzdWJ0cmFjdCB0aGUgdGhyZXNob2xkXG4gICAgICAgIC8vICAgICAtIGRpdmlkZSBpdCBieSB0aGUgc21vb3RobmVzcyAodGhpcyB3aWxsIHJldHVybiB0aGUgcmFuZ2UgdG8gWzA7IDFdKVxuICAgICAgICAvLyBOb3RlOiBJZiBpdCBkb2Vzbid0IHdvcmsgb24gc29tZSBzY2VuYXJpb3MsIGNvbnNpZGVyIGFwcGx5aW5nIGl0IGJlZm9yZSB0aGUgZWFzZXIuXG5cblxuICAgICAgICBpZiAodGhpcy5zbS52ICE9PSAxMDApIHtcbiAgICAgICAgICB2YXIgc21vb3RobmVzcyA9IHRoaXMuc20udiAqIDAuMDE7XG5cbiAgICAgICAgICBpZiAoc21vb3RobmVzcyA9PT0gMCkge1xuICAgICAgICAgICAgc21vb3RobmVzcyA9IDAuMDAwMDAwMDE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIHRocmVzaG9sZCA9IDAuNSAtIHNtb290aG5lc3MgKiAwLjU7XG5cbiAgICAgICAgICBpZiAobXVsdCA8IHRocmVzaG9sZCkge1xuICAgICAgICAgICAgbXVsdCA9IDA7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG11bHQgPSAobXVsdCAtIHRocmVzaG9sZCkgLyBzbW9vdGhuZXNzO1xuXG4gICAgICAgICAgICBpZiAobXVsdCA+IDEpIHtcbiAgICAgICAgICAgICAgbXVsdCA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG11bHQgKiB0aGlzLmEudjtcbiAgICAgIH0sXG4gICAgICBnZXRWYWx1ZTogZnVuY3Rpb24gZ2V0VmFsdWUobmV3Q2hhcnNGbGFnKSB7XG4gICAgICAgIHRoaXMuaXRlcmF0ZUR5bmFtaWNQcm9wZXJ0aWVzKCk7XG4gICAgICAgIHRoaXMuX21kZiA9IG5ld0NoYXJzRmxhZyB8fCB0aGlzLl9tZGY7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoID0gdGhpcy5lbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sLmxlbmd0aCB8fCAwO1xuXG4gICAgICAgIGlmIChuZXdDaGFyc0ZsYWcgJiYgdGhpcy5kYXRhLnIgPT09IDIpIHtcbiAgICAgICAgICB0aGlzLmUudiA9IHRoaXMuX2N1cnJlbnRUZXh0TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpdmlzb3IgPSB0aGlzLmRhdGEuciA9PT0gMiA/IDEgOiAxMDAgLyB0aGlzLmRhdGEudG90YWxDaGFycztcbiAgICAgICAgdmFyIG8gPSB0aGlzLm8udiAvIGRpdmlzb3I7XG4gICAgICAgIHZhciBzID0gdGhpcy5zLnYgLyBkaXZpc29yICsgbztcbiAgICAgICAgdmFyIGUgPSB0aGlzLmUudiAvIGRpdmlzb3IgKyBvO1xuXG4gICAgICAgIGlmIChzID4gZSkge1xuICAgICAgICAgIHZhciBfcyA9IHM7XG4gICAgICAgICAgcyA9IGU7XG4gICAgICAgICAgZSA9IF9zO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maW5hbFMgPSBzO1xuICAgICAgICB0aGlzLmZpbmFsRSA9IGU7XG4gICAgICB9XG4gICAgfTtcbiAgICBleHRlbmRQcm90b3R5cGUoW0R5bmFtaWNQcm9wZXJ0eUNvbnRhaW5lcl0sIFRleHRTZWxlY3RvclByb3BGYWN0b3J5KTtcblxuICAgIGZ1bmN0aW9uIGdldFRleHRTZWxlY3RvclByb3AoZWxlbSwgZGF0YSwgYXJyKSB7XG4gICAgICByZXR1cm4gbmV3IFRleHRTZWxlY3RvclByb3BGYWN0b3J5KGVsZW0sIGRhdGEsIGFycik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdldFRleHRTZWxlY3RvclByb3A6IGdldFRleHRTZWxlY3RvclByb3BcbiAgICB9O1xuICB9KCk7XG5cbiAgZnVuY3Rpb24gVGV4dEFuaW1hdG9yRGF0YVByb3BlcnR5KGVsZW0sIGFuaW1hdG9yUHJvcHMsIGNvbnRhaW5lcikge1xuICAgIHZhciBkZWZhdWx0RGF0YSA9IHtcbiAgICAgIHByb3BUeXBlOiBmYWxzZVxuICAgIH07XG4gICAgdmFyIGdldFByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDtcbiAgICB2YXIgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMgPSBhbmltYXRvclByb3BzLmE7XG4gICAgdGhpcy5hID0ge1xuICAgICAgcjogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuciA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuciwgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICByeDogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucnggPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnJ4LCAwLCBkZWdUb1JhZHMsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHJ5OiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5yeSA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMucnksIDAsIGRlZ1RvUmFkcywgY29udGFpbmVyKSA6IGRlZmF1bHREYXRhLFxuICAgICAgc2s6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNrID8gZ2V0UHJvcChlbGVtLCB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zaywgMCwgZGVnVG9SYWRzLCBjb250YWluZXIpIDogZGVmYXVsdERhdGEsXG4gICAgICBzYTogdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2EgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnNhLCAwLCBkZWdUb1JhZHMsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHM6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnMgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnMsIDEsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGE6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLmEgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLmEsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIG86IHRleHRBbmltYXRvckFuaW1hdGFibGVzLm8gPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLm8sIDAsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHA6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnAgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnAsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHN3OiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zdyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc3csIDAsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHNjOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5zYyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuc2MsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZjOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mYyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmMsIDEsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZoOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5maCA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmgsIDAsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZzOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mcyA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZnMsIDAsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIGZiOiB0ZXh0QW5pbWF0b3JBbmltYXRhYmxlcy5mYiA/IGdldFByb3AoZWxlbSwgdGV4dEFuaW1hdG9yQW5pbWF0YWJsZXMuZmIsIDAsIDAuMDEsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YSxcbiAgICAgIHQ6IHRleHRBbmltYXRvckFuaW1hdGFibGVzLnQgPyBnZXRQcm9wKGVsZW0sIHRleHRBbmltYXRvckFuaW1hdGFibGVzLnQsIDAsIDAsIGNvbnRhaW5lcikgOiBkZWZhdWx0RGF0YVxuICAgIH07XG4gICAgdGhpcy5zID0gVGV4dFNlbGVjdG9yUHJvcC5nZXRUZXh0U2VsZWN0b3JQcm9wKGVsZW0sIGFuaW1hdG9yUHJvcHMucywgY29udGFpbmVyKTtcbiAgICB0aGlzLnMudCA9IGFuaW1hdG9yUHJvcHMucy50O1xuICB9XG5cbiAgZnVuY3Rpb24gVGV4dEFuaW1hdG9yUHJvcGVydHkodGV4dERhdGEsIHJlbmRlclR5cGUsIGVsZW0pIHtcbiAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgIHRoaXMuX2hhc01hc2tlZFBhdGggPSBmYWxzZTtcbiAgICB0aGlzLl9mcmFtZUlkID0gLTE7XG4gICAgdGhpcy5fdGV4dERhdGEgPSB0ZXh0RGF0YTtcbiAgICB0aGlzLl9yZW5kZXJUeXBlID0gcmVuZGVyVHlwZTtcbiAgICB0aGlzLl9lbGVtID0gZWxlbTtcbiAgICB0aGlzLl9hbmltYXRvcnNEYXRhID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLl90ZXh0RGF0YS5hLmxlbmd0aCk7XG4gICAgdGhpcy5fcGF0aERhdGEgPSB7fTtcbiAgICB0aGlzLl9tb3JlT3B0aW9ucyA9IHtcbiAgICAgIGFsaWdubWVudDoge31cbiAgICB9O1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gW107XG4gICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSBmYWxzZTtcbiAgICB0aGlzLmluaXREeW5hbWljUHJvcGVydHlDb250YWluZXIoZWxlbSk7XG4gIH1cblxuICBUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUuc2VhcmNoUHJvcGVydGllcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5fdGV4dERhdGEuYS5sZW5ndGg7XG4gICAgdmFyIGFuaW1hdG9yUHJvcHM7XG4gICAgdmFyIGdldFByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgYW5pbWF0b3JQcm9wcyA9IHRoaXMuX3RleHREYXRhLmFbaV07XG4gICAgICB0aGlzLl9hbmltYXRvcnNEYXRhW2ldID0gbmV3IFRleHRBbmltYXRvckRhdGFQcm9wZXJ0eSh0aGlzLl9lbGVtLCBhbmltYXRvclByb3BzLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fdGV4dERhdGEucCAmJiAnbScgaW4gdGhpcy5fdGV4dERhdGEucCkge1xuICAgICAgdGhpcy5fcGF0aERhdGEgPSB7XG4gICAgICAgIGE6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5hLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgZjogZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5wLmYsIDAsIDAsIHRoaXMpLFxuICAgICAgICBsOiBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLnAubCwgMCwgMCwgdGhpcyksXG4gICAgICAgIHI6IGdldFByb3AodGhpcy5fZWxlbSwgdGhpcy5fdGV4dERhdGEucC5yLCAwLCAwLCB0aGlzKSxcbiAgICAgICAgcDogZ2V0UHJvcCh0aGlzLl9lbGVtLCB0aGlzLl90ZXh0RGF0YS5wLnAsIDAsIDAsIHRoaXMpLFxuICAgICAgICBtOiB0aGlzLl9lbGVtLm1hc2tNYW5hZ2VyLmdldE1hc2tQcm9wZXJ0eSh0aGlzLl90ZXh0RGF0YS5wLm0pXG4gICAgICB9O1xuICAgICAgdGhpcy5faGFzTWFza2VkUGF0aCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhc01hc2tlZFBhdGggPSBmYWxzZTtcbiAgICB9XG5cbiAgICB0aGlzLl9tb3JlT3B0aW9ucy5hbGlnbm1lbnQgPSBnZXRQcm9wKHRoaXMuX2VsZW0sIHRoaXMuX3RleHREYXRhLm0uYSwgMSwgMCwgdGhpcyk7XG4gIH07XG5cbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmdldE1lYXN1cmVzID0gZnVuY3Rpb24gKGRvY3VtZW50RGF0YSwgbGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcgPSBsZXR0ZXJzQ2hhbmdlZEZsYWc7XG5cbiAgICBpZiAoIXRoaXMuX21kZiAmJiAhdGhpcy5faXNGaXJzdEZyYW1lICYmICFsZXR0ZXJzQ2hhbmdlZEZsYWcgJiYgKCF0aGlzLl9oYXNNYXNrZWRQYXRoIHx8ICF0aGlzLl9wYXRoRGF0YS5tLl9tZGYpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgdmFyIGFsaWdubWVudCA9IHRoaXMuX21vcmVPcHRpb25zLmFsaWdubWVudC52O1xuICAgIHZhciBhbmltYXRvcnMgPSB0aGlzLl9hbmltYXRvcnNEYXRhO1xuICAgIHZhciB0ZXh0RGF0YSA9IHRoaXMuX3RleHREYXRhO1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdmFyIHJlbmRlclR5cGUgPSB0aGlzLl9yZW5kZXJUeXBlO1xuICAgIHZhciByZW5kZXJlZExldHRlcnNDb3VudCA9IHRoaXMucmVuZGVyZWRMZXR0ZXJzLmxlbmd0aDtcbiAgICB2YXIgeFBvcztcbiAgICB2YXIgeVBvcztcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmw7XG4gICAgdmFyIHBhdGhJbmZvO1xuICAgIHZhciBjdXJyZW50TGVuZ3RoO1xuICAgIHZhciBjdXJyZW50UG9pbnQ7XG4gICAgdmFyIHNlZ21lbnRMZW5ndGg7XG4gICAgdmFyIGZsYWc7XG4gICAgdmFyIHBvaW50SW5kO1xuICAgIHZhciBzZWdtZW50SW5kO1xuICAgIHZhciBwcmV2UG9pbnQ7XG4gICAgdmFyIHBvaW50cztcbiAgICB2YXIgc2VnbWVudHM7XG4gICAgdmFyIHBhcnRpYWxMZW5ndGg7XG4gICAgdmFyIHRvdGFsTGVuZ3RoO1xuICAgIHZhciBwZXJjO1xuICAgIHZhciB0YW5BbmdsZTtcbiAgICB2YXIgbWFzaztcblxuICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICBtYXNrID0gdGhpcy5fcGF0aERhdGEubTtcblxuICAgICAgaWYgKCF0aGlzLl9wYXRoRGF0YS5uIHx8IHRoaXMuX3BhdGhEYXRhLl9tZGYpIHtcbiAgICAgICAgdmFyIHBhdGhzID0gbWFzay52O1xuXG4gICAgICAgIGlmICh0aGlzLl9wYXRoRGF0YS5yLnYpIHtcbiAgICAgICAgICBwYXRocyA9IHBhdGhzLnJldmVyc2UoKTtcbiAgICAgICAgfSAvLyBUT0RPOiByZWxlYXNlIGJlemllciBkYXRhIGNhY2hlZCBmcm9tIHByZXZpb3VzIHBhdGhJbmZvOiB0aGlzLl9wYXRoRGF0YS5waVxuXG5cbiAgICAgICAgcGF0aEluZm8gPSB7XG4gICAgICAgICAgdExlbmd0aDogMCxcbiAgICAgICAgICBzZWdtZW50czogW11cbiAgICAgICAgfTtcbiAgICAgICAgbGVuID0gcGF0aHMuX2xlbmd0aCAtIDE7XG4gICAgICAgIHZhciBiZXppZXJEYXRhO1xuICAgICAgICB0b3RhbExlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYmV6aWVyRGF0YSA9IGJlei5idWlsZEJlemllckRhdGEocGF0aHMudltpXSwgcGF0aHMudltpICsgMV0sIFtwYXRocy5vW2ldWzBdIC0gcGF0aHMudltpXVswXSwgcGF0aHMub1tpXVsxXSAtIHBhdGhzLnZbaV1bMV1dLCBbcGF0aHMuaVtpICsgMV1bMF0gLSBwYXRocy52W2kgKyAxXVswXSwgcGF0aHMuaVtpICsgMV1bMV0gLSBwYXRocy52W2kgKyAxXVsxXV0pO1xuICAgICAgICAgIHBhdGhJbmZvLnRMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICAgIHBhdGhJbmZvLnNlZ21lbnRzLnB1c2goYmV6aWVyRGF0YSk7XG4gICAgICAgICAgdG90YWxMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgaSA9IGxlbjtcblxuICAgICAgICBpZiAobWFzay52LmMpIHtcbiAgICAgICAgICBiZXppZXJEYXRhID0gYmV6LmJ1aWxkQmV6aWVyRGF0YShwYXRocy52W2ldLCBwYXRocy52WzBdLCBbcGF0aHMub1tpXVswXSAtIHBhdGhzLnZbaV1bMF0sIHBhdGhzLm9baV1bMV0gLSBwYXRocy52W2ldWzFdXSwgW3BhdGhzLmlbMF1bMF0gLSBwYXRocy52WzBdWzBdLCBwYXRocy5pWzBdWzFdIC0gcGF0aHMudlswXVsxXV0pO1xuICAgICAgICAgIHBhdGhJbmZvLnRMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICAgIHBhdGhJbmZvLnNlZ21lbnRzLnB1c2goYmV6aWVyRGF0YSk7XG4gICAgICAgICAgdG90YWxMZW5ndGggKz0gYmV6aWVyRGF0YS5zZWdtZW50TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGF0aERhdGEucGkgPSBwYXRoSW5mbztcbiAgICAgIH1cblxuICAgICAgcGF0aEluZm8gPSB0aGlzLl9wYXRoRGF0YS5waTtcbiAgICAgIGN1cnJlbnRMZW5ndGggPSB0aGlzLl9wYXRoRGF0YS5mLnY7XG4gICAgICBzZWdtZW50SW5kID0gMDtcbiAgICAgIHBvaW50SW5kID0gMTtcbiAgICAgIHNlZ21lbnRMZW5ndGggPSAwO1xuICAgICAgZmxhZyA9IHRydWU7XG4gICAgICBzZWdtZW50cyA9IHBhdGhJbmZvLnNlZ21lbnRzO1xuXG4gICAgICBpZiAoY3VycmVudExlbmd0aCA8IDAgJiYgbWFzay52LmMpIHtcbiAgICAgICAgaWYgKHBhdGhJbmZvLnRMZW5ndGggPCBNYXRoLmFicyhjdXJyZW50TGVuZ3RoKSkge1xuICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSAtTWF0aC5hYnMoY3VycmVudExlbmd0aCkgJSBwYXRoSW5mby50TGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgc2VnbWVudEluZCA9IHNlZ21lbnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgcG9pbnRJbmQgPSBwb2ludHMubGVuZ3RoIC0gMTtcblxuICAgICAgICB3aGlsZSAoY3VycmVudExlbmd0aCA8IDApIHtcbiAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IHBvaW50c1twb2ludEluZF0ucGFydGlhbExlbmd0aDtcbiAgICAgICAgICBwb2ludEluZCAtPSAxO1xuXG4gICAgICAgICAgaWYgKHBvaW50SW5kIDwgMCkge1xuICAgICAgICAgICAgc2VnbWVudEluZCAtPSAxO1xuICAgICAgICAgICAgcG9pbnRzID0gc2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO1xuICAgICAgICAgICAgcG9pbnRJbmQgPSBwb2ludHMubGVuZ3RoIC0gMTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcG9pbnRzID0gc2VnbWVudHNbc2VnbWVudEluZF0ucG9pbnRzO1xuICAgICAgcHJldlBvaW50ID0gcG9pbnRzW3BvaW50SW5kIC0gMV07XG4gICAgICBjdXJyZW50UG9pbnQgPSBwb2ludHNbcG9pbnRJbmRdO1xuICAgICAgcGFydGlhbExlbmd0aCA9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgIH1cblxuICAgIGxlbiA9IGxldHRlcnMubGVuZ3RoO1xuICAgIHhQb3MgPSAwO1xuICAgIHlQb3MgPSAwO1xuICAgIHZhciB5T2ZmID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAqIDEuMiAqIDAuNzE0O1xuICAgIHZhciBmaXJzdExpbmUgPSB0cnVlO1xuICAgIHZhciBhbmltYXRvclByb3BzO1xuICAgIHZhciBhbmltYXRvclNlbGVjdG9yO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBsZXR0ZXJWYWx1ZTtcbiAgICBqTGVuID0gYW5pbWF0b3JzLmxlbmd0aDtcbiAgICB2YXIgbXVsdDtcbiAgICB2YXIgaW5kID0gLTE7XG4gICAgdmFyIG9mZmY7XG4gICAgdmFyIHhQYXRoUG9zO1xuICAgIHZhciB5UGF0aFBvcztcbiAgICB2YXIgaW5pdFBhdGhQb3MgPSBjdXJyZW50TGVuZ3RoO1xuICAgIHZhciBpbml0U2VnbWVudEluZCA9IHNlZ21lbnRJbmQ7XG4gICAgdmFyIGluaXRQb2ludEluZCA9IHBvaW50SW5kO1xuICAgIHZhciBjdXJyZW50TGluZSA9IC0xO1xuICAgIHZhciBlbGVtT3BhY2l0eTtcbiAgICB2YXIgc2M7XG4gICAgdmFyIHN3O1xuICAgIHZhciBmYztcbiAgICB2YXIgaztcbiAgICB2YXIgbGV0dGVyU3c7XG4gICAgdmFyIGxldHRlclNjO1xuICAgIHZhciBsZXR0ZXJGYztcbiAgICB2YXIgbGV0dGVyTSA9ICcnO1xuICAgIHZhciBsZXR0ZXJQID0gdGhpcy5kZWZhdWx0UHJvcHNBcnJheTtcbiAgICB2YXIgbGV0dGVyTzsgLy9cblxuICAgIGlmIChkb2N1bWVudERhdGEuaiA9PT0gMiB8fCBkb2N1bWVudERhdGEuaiA9PT0gMSkge1xuICAgICAgdmFyIGFuaW1hdG9ySnVzdGlmeU9mZnNldCA9IDA7XG4gICAgICB2YXIgYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQgPSAwO1xuICAgICAgdmFyIGp1c3RpZnlPZmZzZXRNdWx0ID0gZG9jdW1lbnREYXRhLmogPT09IDIgPyAtMC41IDogLTE7XG4gICAgICB2YXIgbGFzdEluZGV4ID0gMDtcbiAgICAgIHZhciBpc05ld0xpbmUgPSB0cnVlO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICAgIGlmIChhbmltYXRvckp1c3RpZnlPZmZzZXQpIHtcbiAgICAgICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldCArPSBhbmltYXRvckZpcnN0Q2hhck9mZnNldDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB3aGlsZSAobGFzdEluZGV4IDwgaSkge1xuICAgICAgICAgICAgbGV0dGVyc1tsYXN0SW5kZXhdLmFuaW1hdG9ySnVzdGlmeU9mZnNldCA9IGFuaW1hdG9ySnVzdGlmeU9mZnNldDtcbiAgICAgICAgICAgIGxhc3RJbmRleCArPSAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGFuaW1hdG9ySnVzdGlmeU9mZnNldCA9IDA7XG4gICAgICAgICAgaXNOZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnQucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgaWYgKGlzTmV3TGluZSAmJiBkb2N1bWVudERhdGEuaiA9PT0gMikge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMudC52ICoganVzdGlmeU9mZnNldE11bHQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy50LnYgKiBtdWx0WzBdICoganVzdGlmeU9mZnNldE11bHQ7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMudC52ICogbXVsdCAqIGp1c3RpZnlPZmZzZXRNdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaXNOZXdMaW5lID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGFuaW1hdG9ySnVzdGlmeU9mZnNldCkge1xuICAgICAgICBhbmltYXRvckp1c3RpZnlPZmZzZXQgKz0gYW5pbWF0b3JGaXJzdENoYXJPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChsYXN0SW5kZXggPCBpKSB7XG4gICAgICAgIGxldHRlcnNbbGFzdEluZGV4XS5hbmltYXRvckp1c3RpZnlPZmZzZXQgPSBhbmltYXRvckp1c3RpZnlPZmZzZXQ7XG4gICAgICAgIGxhc3RJbmRleCArPSAxO1xuICAgICAgfVxuICAgIH0gLy9cblxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBtYXRyaXhIZWxwZXIucmVzZXQoKTtcbiAgICAgIGVsZW1PcGFjaXR5ID0gMTtcblxuICAgICAgaWYgKGxldHRlcnNbaV0ubikge1xuICAgICAgICB4UG9zID0gMDtcbiAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEueU9mZnNldDtcbiAgICAgICAgeVBvcyArPSBmaXJzdExpbmUgPyAxIDogMDtcbiAgICAgICAgY3VycmVudExlbmd0aCA9IGluaXRQYXRoUG9zO1xuICAgICAgICBmaXJzdExpbmUgPSBmYWxzZTtcblxuICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgIHNlZ21lbnRJbmQgPSBpbml0U2VnbWVudEluZDtcbiAgICAgICAgICBwb2ludEluZCA9IGluaXRQb2ludEluZDtcbiAgICAgICAgICBwb2ludHMgPSBzZWdtZW50c1tzZWdtZW50SW5kXS5wb2ludHM7XG4gICAgICAgICAgcHJldlBvaW50ID0gcG9pbnRzW3BvaW50SW5kIC0gMV07XG4gICAgICAgICAgY3VycmVudFBvaW50ID0gcG9pbnRzW3BvaW50SW5kXTtcbiAgICAgICAgICBwYXJ0aWFsTGVuZ3RoID0gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgc2VnbWVudExlbmd0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBsZXR0ZXJNID0gJyc7XG4gICAgICAgIGxldHRlckZjID0gJyc7XG4gICAgICAgIGxldHRlclN3ID0gJyc7XG4gICAgICAgIGxldHRlck8gPSAnJztcbiAgICAgICAgbGV0dGVyUCA9IHRoaXMuZGVmYXVsdFByb3BzQXJyYXk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodGhpcy5faGFzTWFza2VkUGF0aCkge1xuICAgICAgICAgIGlmIChjdXJyZW50TGluZSAhPT0gbGV0dGVyc1tpXS5saW5lKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGRvY3VtZW50RGF0YS5qKSB7XG4gICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IHRvdGFsTGVuZ3RoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSAodG90YWxMZW5ndGggLSBkb2N1bWVudERhdGEubGluZVdpZHRoc1tsZXR0ZXJzW2ldLmxpbmVdKSAvIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudExpbmUgPSBsZXR0ZXJzW2ldLmxpbmU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGluZCAhPT0gbGV0dGVyc1tpXS5pbmQpIHtcbiAgICAgICAgICAgIGlmIChsZXR0ZXJzW2luZF0pIHtcbiAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBsZXR0ZXJzW2luZF0uZXh0cmE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggKz0gbGV0dGVyc1tpXS5hbiAvIDI7XG4gICAgICAgICAgICBpbmQgPSBsZXR0ZXJzW2ldLmluZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNTtcbiAgICAgICAgICB2YXIgYW5pbWF0b3JPZmZzZXQgPSAwO1xuXG4gICAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5wLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGFuaW1hdG9yU2VsZWN0b3IgPSBhbmltYXRvcnNbal0ucztcbiAgICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGFuaW1hdG9yT2Zmc2V0ICs9IGFuaW1hdG9yUHJvcHMucC52WzBdICogbXVsdFswXTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvck9mZnNldCArPSBhbmltYXRvclByb3BzLnAudlswXSAqIG11bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuYS5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTtcblxuICAgICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhbmltYXRvck9mZnNldCArPSBhbmltYXRvclByb3BzLmEudlswXSAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5pbWF0b3JPZmZzZXQgKz0gYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZmxhZyA9IHRydWU7IC8vIEZvcmNlIGFsaWdubWVudCBvbmx5IHdvcmtzIHdpdGggYSBzaW5nbGUgbGluZSBmb3Igbm93XG5cbiAgICAgICAgICBpZiAodGhpcy5fcGF0aERhdGEuYS52KSB7XG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gbGV0dGVyc1swXS5hbiAqIDAuNSArICh0b3RhbExlbmd0aCAtIHRoaXMuX3BhdGhEYXRhLmYudiAtIGxldHRlcnNbMF0uYW4gKiAwLjUgLSBsZXR0ZXJzW2xldHRlcnMubGVuZ3RoIC0gMV0uYW4gKiAwLjUpICogaW5kIC8gKGxlbiAtIDEpO1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSB0aGlzLl9wYXRoRGF0YS5mLnY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgd2hpbGUgKGZsYWcpIHtcbiAgICAgICAgICAgIGlmIChzZWdtZW50TGVuZ3RoICsgcGFydGlhbExlbmd0aCA+PSBjdXJyZW50TGVuZ3RoICsgYW5pbWF0b3JPZmZzZXQgfHwgIXBvaW50cykge1xuICAgICAgICAgICAgICBwZXJjID0gKGN1cnJlbnRMZW5ndGggKyBhbmltYXRvck9mZnNldCAtIHNlZ21lbnRMZW5ndGgpIC8gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICAgIHhQYXRoUG9zID0gcHJldlBvaW50LnBvaW50WzBdICsgKGN1cnJlbnRQb2ludC5wb2ludFswXSAtIHByZXZQb2ludC5wb2ludFswXSkgKiBwZXJjO1xuICAgICAgICAgICAgICB5UGF0aFBvcyA9IHByZXZQb2ludC5wb2ludFsxXSArIChjdXJyZW50UG9pbnQucG9pbnRbMV0gLSBwcmV2UG9pbnQucG9pbnRbMV0pICogcGVyYztcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYWxpZ25tZW50WzBdICogbGV0dGVyc1tpXS5hbiAqIDAuMDA1LCAtKGFsaWdubWVudFsxXSAqIHlPZmYpICogMC4wMSk7XG4gICAgICAgICAgICAgIGZsYWcgPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocG9pbnRzKSB7XG4gICAgICAgICAgICAgIHNlZ21lbnRMZW5ndGggKz0gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICAgIHBvaW50SW5kICs9IDE7XG5cbiAgICAgICAgICAgICAgaWYgKHBvaW50SW5kID49IHBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBwb2ludEluZCA9IDA7XG4gICAgICAgICAgICAgICAgc2VnbWVudEluZCArPSAxO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFzZWdtZW50c1tzZWdtZW50SW5kXSkge1xuICAgICAgICAgICAgICAgICAgaWYgKG1hc2sudi5jKSB7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50SW5kID0gMDtcbiAgICAgICAgICAgICAgICAgICAgc2VnbWVudEluZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZ21lbnRMZW5ndGggLT0gY3VycmVudFBvaW50LnBhcnRpYWxMZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHBvaW50cyA9IG51bGw7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHBvaW50cyA9IHNlZ21lbnRzW3NlZ21lbnRJbmRdLnBvaW50cztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAocG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgcHJldlBvaW50ID0gY3VycmVudFBvaW50O1xuICAgICAgICAgICAgICAgIGN1cnJlbnRQb2ludCA9IHBvaW50c1twb2ludEluZF07XG4gICAgICAgICAgICAgICAgcGFydGlhbExlbmd0aCA9IGN1cnJlbnRQb2ludC5wYXJ0aWFsTGVuZ3RoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgb2ZmZiA9IGxldHRlcnNbaV0uYW4gLyAyIC0gbGV0dGVyc1tpXS5hZGQ7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtb2ZmZiwgMCwgMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb2ZmZiA9IGxldHRlcnNbaV0uYW4gLyAyIC0gbGV0dGVyc1tpXS5hZGQ7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtb2ZmZiwgMCwgMCk7IC8vIEdyb3VwaW5nIGFsaWdubWVudFxuXG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYWxpZ25tZW50WzBdICogbGV0dGVyc1tpXS5hbiAqIDAuMDA1LCAtYWxpZ25tZW50WzFdICogeU9mZiAqIDAuMDEsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnQucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGFuaW1hdG9yU2VsZWN0b3IgPSBhbmltYXRvcnNbal0ucztcbiAgICAgICAgICAgIG11bHQgPSBhbmltYXRvclNlbGVjdG9yLmdldE11bHQobGV0dGVyc1tpXS5hbkluZGV4ZXNbal0sIHRleHREYXRhLmFbal0ucy50b3RhbENoYXJzKTsgLy8gVGhpcyBjb25kaXRpb24gaXMgdG8gcHJldmVudCBhcHBseWluZyB0cmFja2luZyB0byBmaXJzdCBjaGFyYWN0ZXIgaW4gZWFjaCBsaW5lLiBNaWdodCBiZSBiZXR0ZXIgdG8gdXNlIGEgYm9vbGVhbiBcImlzTmV3TGluZVwiXG5cbiAgICAgICAgICAgIGlmICh4UG9zICE9PSAwIHx8IGRvY3VtZW50RGF0YS5qICE9PSAwKSB7XG4gICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGFuaW1hdG9yUHJvcHMudC52ICogbXVsdFswXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgeFBvcyArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgeFBvcyArPSBhbmltYXRvclByb3BzLnQudiAqIG11bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZVdpZHRoQW5pbSkge1xuICAgICAgICAgIHN3ID0gZG9jdW1lbnREYXRhLnN3IHx8IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZUNvbG9yQW5pbSkge1xuICAgICAgICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgICAgICAgIHNjID0gW2RvY3VtZW50RGF0YS5zY1swXSwgZG9jdW1lbnREYXRhLnNjWzFdLCBkb2N1bWVudERhdGEuc2NbMl1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzYyA9IFswLCAwLCAwXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gJiYgZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICAgICAgZmMgPSBbZG9jdW1lbnREYXRhLmZjWzBdLCBkb2N1bWVudERhdGEuZmNbMV0sIGRvY3VtZW50RGF0YS5mY1syXV07XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgYW5pbWF0b3JQcm9wcyA9IGFuaW1hdG9yc1tqXS5hO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuYS5wcm9wVHlwZSkge1xuICAgICAgICAgICAgYW5pbWF0b3JTZWxlY3RvciA9IGFuaW1hdG9yc1tqXS5zO1xuICAgICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0WzBdLCAtYW5pbWF0b3JQcm9wcy5hLnZbMV0gKiBtdWx0WzFdLCBhbmltYXRvclByb3BzLmEudlsyXSAqIG11bHRbMl0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgtYW5pbWF0b3JQcm9wcy5hLnZbMF0gKiBtdWx0LCAtYW5pbWF0b3JQcm9wcy5hLnZbMV0gKiBtdWx0LCBhbmltYXRvclByb3BzLmEudlsyXSAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5zLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoMSArIChhbmltYXRvclByb3BzLnMudlswXSAtIDEpICogbXVsdFswXSwgMSArIChhbmltYXRvclByb3BzLnMudlsxXSAtIDEpICogbXVsdFsxXSwgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoMSArIChhbmltYXRvclByb3BzLnMudlswXSAtIDEpICogbXVsdCwgMSArIChhbmltYXRvclByb3BzLnMudlsxXSAtIDEpICogbXVsdCwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgICAgIGFuaW1hdG9yUHJvcHMgPSBhbmltYXRvcnNbal0uYTtcbiAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgbXVsdCA9IGFuaW1hdG9yU2VsZWN0b3IuZ2V0TXVsdChsZXR0ZXJzW2ldLmFuSW5kZXhlc1tqXSwgdGV4dERhdGEuYVtqXS5zLnRvdGFsQ2hhcnMpO1xuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuc2sucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIuc2tld0Zyb21BeGlzKC1hbmltYXRvclByb3BzLnNrLnYgKiBtdWx0WzBdLCBhbmltYXRvclByb3BzLnNhLnYgKiBtdWx0WzFdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5za2V3RnJvbUF4aXMoLWFuaW1hdG9yUHJvcHMuc2sudiAqIG11bHQsIGFuaW1hdG9yUHJvcHMuc2EudiAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnIucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWigtYW5pbWF0b3JQcm9wcy5yLnYgKiBtdWx0WzJdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVaKC1hbmltYXRvclByb3BzLnIudiAqIG11bHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLnJ5LnByb3BUeXBlKSB7XG4gICAgICAgICAgICBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVkoYW5pbWF0b3JQcm9wcy5yeS52ICogbXVsdFsxXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIucm90YXRlWShhbmltYXRvclByb3BzLnJ5LnYgKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5yeC5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIG1hdHJpeEhlbHBlci5yb3RhdGVYKGFuaW1hdG9yUHJvcHMucngudiAqIG11bHRbMF0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZVgoYW5pbWF0b3JQcm9wcy5yeC52ICogbXVsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuby5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGVsZW1PcGFjaXR5ICs9IChhbmltYXRvclByb3BzLm8udiAqIG11bHRbMF0gLSBlbGVtT3BhY2l0eSkgKiBtdWx0WzBdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZWxlbU9wYWNpdHkgKz0gKGFuaW1hdG9yUHJvcHMuby52ICogbXVsdCAtIGVsZW1PcGFjaXR5KSAqIG11bHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VXaWR0aEFuaW0gJiYgYW5pbWF0b3JQcm9wcy5zdy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHN3ICs9IGFuaW1hdG9yUHJvcHMuc3cudiAqIG11bHRbMF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzdyArPSBhbmltYXRvclByb3BzLnN3LnYgKiBtdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChkb2N1bWVudERhdGEuc3Ryb2tlQ29sb3JBbmltICYmIGFuaW1hdG9yUHJvcHMuc2MucHJvcFR5cGUpIHtcbiAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCAzOyBrICs9IDEpIHtcbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc2Nba10gKz0gKGFuaW1hdG9yUHJvcHMuc2MudltrXSAtIHNjW2tdKSAqIG11bHRbMF07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2Nba10gKz0gKGFuaW1hdG9yUHJvcHMuc2MudltrXSAtIHNjW2tdKSAqIG11bHQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLmZpbGxDb2xvckFuaW0gJiYgZG9jdW1lbnREYXRhLmZjKSB7XG4gICAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5mYy5wcm9wVHlwZSkge1xuICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgMzsgayArPSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICBmY1trXSArPSAoYW5pbWF0b3JQcm9wcy5mYy52W2tdIC0gZmNba10pICogbXVsdFswXTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgZmNba10gKz0gKGFuaW1hdG9yUHJvcHMuZmMudltrXSAtIGZjW2tdKSAqIG11bHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmZoLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkSHVlVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZmgudiAqIG11bHRbMF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkSHVlVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZmgudiAqIG11bHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChhbmltYXRvclByb3BzLmZzLnByb3BUeXBlKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkU2F0dXJhdGlvblRvUkdCKGZjLCBhbmltYXRvclByb3BzLmZzLnYgKiBtdWx0WzBdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmYyA9IGFkZFNhdHVyYXRpb25Ub1JHQihmYywgYW5pbWF0b3JQcm9wcy5mcy52ICogbXVsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuaW1hdG9yUHJvcHMuZmIucHJvcFR5cGUpIHtcbiAgICAgICAgICAgICAgaWYgKG11bHQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZmMgPSBhZGRCcmlnaHRuZXNzVG9SR0IoZmMsIGFuaW1hdG9yUHJvcHMuZmIudiAqIG11bHRbMF0pO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZjID0gYWRkQnJpZ2h0bmVzc1RvUkdCKGZjLCBhbmltYXRvclByb3BzLmZiLnYgKiBtdWx0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBhbmltYXRvclByb3BzID0gYW5pbWF0b3JzW2pdLmE7XG5cbiAgICAgICAgICBpZiAoYW5pbWF0b3JQcm9wcy5wLnByb3BUeXBlKSB7XG4gICAgICAgICAgICBhbmltYXRvclNlbGVjdG9yID0gYW5pbWF0b3JzW2pdLnM7XG4gICAgICAgICAgICBtdWx0ID0gYW5pbWF0b3JTZWxlY3Rvci5nZXRNdWx0KGxldHRlcnNbaV0uYW5JbmRleGVzW2pdLCB0ZXh0RGF0YS5hW2pdLnMudG90YWxDaGFycyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICAgICAgICAgIGlmIChtdWx0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoMCwgYW5pbWF0b3JQcm9wcy5wLnZbMV0gKiBtdWx0WzBdLCAtYW5pbWF0b3JQcm9wcy5wLnZbMl0gKiBtdWx0WzFdKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdCwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAobXVsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShhbmltYXRvclByb3BzLnAudlswXSAqIG11bHRbMF0sIGFuaW1hdG9yUHJvcHMucC52WzFdICogbXVsdFsxXSwgLWFuaW1hdG9yUHJvcHMucC52WzJdICogbXVsdFsyXSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGFuaW1hdG9yUHJvcHMucC52WzBdICogbXVsdCwgYW5pbWF0b3JQcm9wcy5wLnZbMV0gKiBtdWx0LCAtYW5pbWF0b3JQcm9wcy5wLnZbMl0gKiBtdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnN0cm9rZVdpZHRoQW5pbSkge1xuICAgICAgICAgIGxldHRlclN3ID0gc3cgPCAwID8gMCA6IHN3O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRvY3VtZW50RGF0YS5zdHJva2VDb2xvckFuaW0pIHtcbiAgICAgICAgICBsZXR0ZXJTYyA9ICdyZ2IoJyArIE1hdGgucm91bmQoc2NbMF0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChzY1sxXSAqIDI1NSkgKyAnLCcgKyBNYXRoLnJvdW5kKHNjWzJdICogMjU1KSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkb2N1bWVudERhdGEuZmlsbENvbG9yQW5pbSAmJiBkb2N1bWVudERhdGEuZmMpIHtcbiAgICAgICAgICBsZXR0ZXJGYyA9ICdyZ2IoJyArIE1hdGgucm91bmQoZmNbMF0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChmY1sxXSAqIDI1NSkgKyAnLCcgKyBNYXRoLnJvdW5kKGZjWzJdICogMjU1KSArICcpJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9oYXNNYXNrZWRQYXRoKSB7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSgwLCAtZG9jdW1lbnREYXRhLmxzKTtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIGFsaWdubWVudFsxXSAqIHlPZmYgKiAwLjAxICsgeVBvcywgMCk7XG5cbiAgICAgICAgICBpZiAodGhpcy5fcGF0aERhdGEucC52KSB7XG4gICAgICAgICAgICB0YW5BbmdsZSA9IChjdXJyZW50UG9pbnQucG9pbnRbMV0gLSBwcmV2UG9pbnQucG9pbnRbMV0pIC8gKGN1cnJlbnRQb2ludC5wb2ludFswXSAtIHByZXZQb2ludC5wb2ludFswXSk7XG4gICAgICAgICAgICB2YXIgcm90ID0gTWF0aC5hdGFuKHRhbkFuZ2xlKSAqIDE4MCAvIE1hdGguUEk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50UG9pbnQucG9pbnRbMF0gPCBwcmV2UG9pbnQucG9pbnRbMF0pIHtcbiAgICAgICAgICAgICAgcm90ICs9IDE4MDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbWF0cml4SGVscGVyLnJvdGF0ZSgtcm90ICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZSh4UGF0aFBvcywgeVBhdGhQb3MsIDApO1xuICAgICAgICAgIGN1cnJlbnRMZW5ndGggLT0gYWxpZ25tZW50WzBdICogbGV0dGVyc1tpXS5hbiAqIDAuMDA1O1xuXG4gICAgICAgICAgaWYgKGxldHRlcnNbaSArIDFdICYmIGluZCAhPT0gbGV0dGVyc1tpICsgMV0uaW5kKSB7XG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoICs9IGxldHRlcnNbaV0uYW4gLyAyO1xuICAgICAgICAgICAgY3VycmVudExlbmd0aCArPSBkb2N1bWVudERhdGEudHIgKiAwLjAwMSAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoeFBvcywgeVBvcywgMCk7XG5cbiAgICAgICAgICBpZiAoZG9jdW1lbnREYXRhLnBzKSB7XG4gICAgICAgICAgICAvLyBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSxkb2N1bWVudERhdGEucHNbMV0sMCk7XG4gICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5wc1swXSwgZG9jdW1lbnREYXRhLnBzWzFdICsgZG9jdW1lbnREYXRhLmFzY2VudCwgMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGxldHRlcnNbaV0uYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICsgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgKyAoZG9jdW1lbnREYXRhLmJveFdpZHRoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXSksIDAsIDApO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGxldHRlcnNbaV0uYW5pbWF0b3JKdXN0aWZ5T2Zmc2V0ICsgZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgKyAoZG9jdW1lbnREYXRhLmJveFdpZHRoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGV0dGVyc1tpXS5saW5lXSkgLyAyLCAwLCAwKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoMCwgLWRvY3VtZW50RGF0YS5scyk7XG4gICAgICAgICAgbWF0cml4SGVscGVyLnRyYW5zbGF0ZShvZmZmLCAwLCAwKTtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGFsaWdubWVudFswXSAqIGxldHRlcnNbaV0uYW4gKiAwLjAwNSwgYWxpZ25tZW50WzFdICogeU9mZiAqIDAuMDEsIDApO1xuICAgICAgICAgIHhQb3MgKz0gbGV0dGVyc1tpXS5sICsgZG9jdW1lbnREYXRhLnRyICogMC4wMDEgKiBkb2N1bWVudERhdGEuZmluYWxTaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlclR5cGUgPT09ICdodG1sJykge1xuICAgICAgICAgIGxldHRlck0gPSBtYXRyaXhIZWxwZXIudG9DU1MoKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZW5kZXJUeXBlID09PSAnc3ZnJykge1xuICAgICAgICAgIGxldHRlck0gPSBtYXRyaXhIZWxwZXIudG8yZENTUygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxldHRlclAgPSBbbWF0cml4SGVscGVyLnByb3BzWzBdLCBtYXRyaXhIZWxwZXIucHJvcHNbMV0sIG1hdHJpeEhlbHBlci5wcm9wc1syXSwgbWF0cml4SGVscGVyLnByb3BzWzNdLCBtYXRyaXhIZWxwZXIucHJvcHNbNF0sIG1hdHJpeEhlbHBlci5wcm9wc1s1XSwgbWF0cml4SGVscGVyLnByb3BzWzZdLCBtYXRyaXhIZWxwZXIucHJvcHNbN10sIG1hdHJpeEhlbHBlci5wcm9wc1s4XSwgbWF0cml4SGVscGVyLnByb3BzWzldLCBtYXRyaXhIZWxwZXIucHJvcHNbMTBdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTFdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTJdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTNdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTRdLCBtYXRyaXhIZWxwZXIucHJvcHNbMTVdXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxldHRlck8gPSBlbGVtT3BhY2l0eTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyc0NvdW50IDw9IGkpIHtcbiAgICAgICAgbGV0dGVyVmFsdWUgPSBuZXcgTGV0dGVyUHJvcHMobGV0dGVyTywgbGV0dGVyU3csIGxldHRlclNjLCBsZXR0ZXJGYywgbGV0dGVyTSwgbGV0dGVyUCk7XG4gICAgICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzLnB1c2gobGV0dGVyVmFsdWUpO1xuICAgICAgICByZW5kZXJlZExldHRlcnNDb3VudCArPSAxO1xuICAgICAgICB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXR0ZXJWYWx1ZSA9IHRoaXMucmVuZGVyZWRMZXR0ZXJzW2ldO1xuICAgICAgICB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyA9IGxldHRlclZhbHVlLnVwZGF0ZShsZXR0ZXJPLCBsZXR0ZXJTdywgbGV0dGVyU2MsIGxldHRlckZjLCBsZXR0ZXJNLCBsZXR0ZXJQKSB8fCB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZztcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgVGV4dEFuaW1hdG9yUHJvcGVydHkucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl9lbGVtLmdsb2JhbERhdGEuZnJhbWVJZCA9PT0gdGhpcy5fZnJhbWVJZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuX2ZyYW1lSWQgPSB0aGlzLl9lbGVtLmdsb2JhbERhdGEuZnJhbWVJZDtcbiAgICB0aGlzLml0ZXJhdGVEeW5hbWljUHJvcGVydGllcygpO1xuICB9O1xuXG4gIFRleHRBbmltYXRvclByb3BlcnR5LnByb3RvdHlwZS5tSGVscGVyID0gbmV3IE1hdHJpeCgpO1xuICBUZXh0QW5pbWF0b3JQcm9wZXJ0eS5wcm90b3R5cGUuZGVmYXVsdFByb3BzQXJyYXkgPSBbXTtcbiAgZXh0ZW5kUHJvdG90eXBlKFtEeW5hbWljUHJvcGVydHlDb250YWluZXJdLCBUZXh0QW5pbWF0b3JQcm9wZXJ0eSk7XG5cbiAgZnVuY3Rpb24gSVRleHRFbGVtZW50KCkge31cblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyA9IHRydWU7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRleHRQcm9wZXJ0eSA9IG5ldyBUZXh0UHJvcGVydHkodGhpcywgZGF0YS50LCB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzKTtcbiAgICB0aGlzLnRleHRBbmltYXRvciA9IG5ldyBUZXh0QW5pbWF0b3JQcm9wZXJ0eShkYXRhLnQsIHRoaXMucmVuZGVyVHlwZSwgdGhpcyk7XG4gICAgdGhpcy5pbml0VHJhbnNmb3JtKGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmFibGUoKTtcbiAgICB0aGlzLmluaXRSZW5kZXJlckVsZW1lbnQoKTtcbiAgICB0aGlzLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzKCk7XG4gICAgdGhpcy5jcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50cygpO1xuICAgIHRoaXMuY3JlYXRlQ29udGVudCgpO1xuICAgIHRoaXMuaGlkZSgpO1xuICAgIHRoaXMudGV4dEFuaW1hdG9yLnNlYXJjaFByb3BlcnRpZXModGhpcy5keW5hbWljUHJvcGVydGllcyk7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5wcmVwYXJlUmVuZGVyYWJsZUZyYW1lKG51bSk7XG4gICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRoaXMuaXNJblJhbmdlKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZVBhdGhTaGFwZSA9IGZ1bmN0aW9uIChtYXRyaXhIZWxwZXIsIHNoYXBlcykge1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuID0gc2hhcGVzLmxlbmd0aDtcbiAgICB2YXIgcGF0aE5vZGVzO1xuICAgIHZhciBzaGFwZVN0ciA9ICcnO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGpMZW47IGogKz0gMSkge1xuICAgICAgaWYgKHNoYXBlc1tqXS50eSA9PT0gJ3NoJykge1xuICAgICAgICBwYXRoTm9kZXMgPSBzaGFwZXNbal0ua3MuaztcbiAgICAgICAgc2hhcGVTdHIgKz0gYnVpbGRTaGFwZVN0cmluZyhwYXRoTm9kZXMsIHBhdGhOb2Rlcy5pLmxlbmd0aCwgdHJ1ZSwgbWF0cml4SGVscGVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2hhcGVTdHI7XG4gIH07XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS51cGRhdGVEb2N1bWVudERhdGEgPSBmdW5jdGlvbiAobmV3RGF0YSwgaW5kZXgpIHtcbiAgICB0aGlzLnRleHRQcm9wZXJ0eS51cGRhdGVEb2N1bWVudERhdGEobmV3RGF0YSwgaW5kZXgpO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuY2FuUmVzaXplRm9udCA9IGZ1bmN0aW9uIChfY2FuUmVzaXplKSB7XG4gICAgdGhpcy50ZXh0UHJvcGVydHkuY2FuUmVzaXplRm9udChfY2FuUmVzaXplKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLnNldE1pbmltdW1Gb250U2l6ZSA9IGZ1bmN0aW9uIChfZm9udFNpemUpIHtcbiAgICB0aGlzLnRleHRQcm9wZXJ0eS5zZXRNaW5pbXVtRm9udFNpemUoX2ZvbnRTaXplKTtcbiAgfTtcblxuICBJVGV4dEVsZW1lbnQucHJvdG90eXBlLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeCA9IGZ1bmN0aW9uIChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGluZU51bWJlciwgeFBvcywgeVBvcykge1xuICAgIGlmIChkb2N1bWVudERhdGEucHMpIHtcbiAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoZG9jdW1lbnREYXRhLnBzWzBdLCBkb2N1bWVudERhdGEucHNbMV0gKyBkb2N1bWVudERhdGEuYXNjZW50LCAwKTtcbiAgICB9XG5cbiAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKDAsIC1kb2N1bWVudERhdGEubHMsIDApO1xuXG4gICAgc3dpdGNoIChkb2N1bWVudERhdGEuaikge1xuICAgICAgY2FzZSAxOlxuICAgICAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKGRvY3VtZW50RGF0YS5qdXN0aWZ5T2Zmc2V0ICsgKGRvY3VtZW50RGF0YS5ib3hXaWR0aCAtIGRvY3VtZW50RGF0YS5saW5lV2lkdGhzW2xpbmVOdW1iZXJdKSwgMCwgMCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIG1hdHJpeEhlbHBlci50cmFuc2xhdGUoZG9jdW1lbnREYXRhLmp1c3RpZnlPZmZzZXQgKyAoZG9jdW1lbnREYXRhLmJveFdpZHRoIC0gZG9jdW1lbnREYXRhLmxpbmVXaWR0aHNbbGluZU51bWJlcl0pIC8gMiwgMCwgMCk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBtYXRyaXhIZWxwZXIudHJhbnNsYXRlKHhQb3MsIHlQb3MsIDApO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuYnVpbGRDb2xvciA9IGZ1bmN0aW9uIChjb2xvckRhdGEpIHtcbiAgICByZXR1cm4gJ3JnYignICsgTWF0aC5yb3VuZChjb2xvckRhdGFbMF0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChjb2xvckRhdGFbMV0gKiAyNTUpICsgJywnICsgTWF0aC5yb3VuZChjb2xvckRhdGFbMl0gKiAyNTUpICsgJyknO1xuICB9O1xuXG4gIElUZXh0RWxlbWVudC5wcm90b3R5cGUuZW1wdHlQcm9wID0gbmV3IExldHRlclByb3BzKCk7XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge307XG5cbiAgSVRleHRFbGVtZW50LnByb3RvdHlwZS52YWxpZGF0ZVRleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMudGV4dFByb3BlcnR5Ll9tZGYgfHwgdGhpcy50ZXh0UHJvcGVydHkuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgdGhpcy5idWlsZE5ld1RleHQoKTtcbiAgICAgIHRoaXMudGV4dFByb3BlcnR5Ll9pc0ZpcnN0RnJhbWUgPSBmYWxzZTtcbiAgICAgIHRoaXMudGV4dFByb3BlcnR5Ll9tZGYgPSBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGVtcHR5U2hhcGVEYXRhID0ge1xuICAgIHNoYXBlczogW11cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdUZXh0TG90dGllRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy50ZXh0U3BhbnMgPSBbXTtcbiAgICB0aGlzLnJlbmRlclR5cGUgPSAnc3ZnJztcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgU1ZHQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZURPTUVsZW1lbnQsIElUZXh0RWxlbWVudF0sIFNWR1RleHRMb3R0aWVFbGVtZW50KTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5kYXRhLnNpbmdsZVNoYXBlICYmICF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgIHRoaXMudGV4dENvbnRhaW5lciA9IGNyZWF0ZU5TKCd0ZXh0Jyk7XG4gICAgfVxuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZFRleHRDb250ZW50cyA9IGZ1bmN0aW9uICh0ZXh0QXJyYXkpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRleHRBcnJheS5sZW5ndGg7XG4gICAgdmFyIHRleHRDb250ZW50cyA9IFtdO1xuICAgIHZhciBjdXJyZW50VGV4dENvbnRlbnQgPSAnJztcblxuICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICBpZiAodGV4dEFycmF5W2ldID09PSBTdHJpbmcuZnJvbUNoYXJDb2RlKDEzKSB8fCB0ZXh0QXJyYXlbaV0gPT09IFN0cmluZy5mcm9tQ2hhckNvZGUoMykpIHtcbiAgICAgICAgdGV4dENvbnRlbnRzLnB1c2goY3VycmVudFRleHRDb250ZW50KTtcbiAgICAgICAgY3VycmVudFRleHRDb250ZW50ID0gJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50VGV4dENvbnRlbnQgKz0gdGV4dEFycmF5W2ldO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdGV4dENvbnRlbnRzLnB1c2goY3VycmVudFRleHRDb250ZW50KTtcbiAgICByZXR1cm4gdGV4dENvbnRlbnRzO1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZFNoYXBlRGF0YSA9IGZ1bmN0aW9uIChkYXRhLCBzY2FsZSkge1xuICAgIC8vIGRhdGEgc2hvdWxkIHByb2JhYmx5IGJlIGNsb25lZCB0byBhcHBseSBzY2FsZSBzZXBhcmF0ZWx5IHRvIGVhY2ggaW5zdGFuY2Ugb2YgYSB0ZXh0IG9uIGRpZmZlcmVudCBsYXllcnNcbiAgICAvLyBidXQgc2luY2UgdGV4dCBpbnRlcm5hbCBjb250ZW50IGdldHMgb25seSByZW5kZXJlZCBvbmNlIGFuZCB0aGVuIGl0J3MgbmV2ZXIgcmVyZW5kZXJlZCxcbiAgICAvLyBpdCdzIHByb2JhYmx5IHNhZmUgbm90IHRvIGNsb25lIGRhdGEgYW5kIHJldXNlIGFsd2F5cyB0aGUgc2FtZSBpbnN0YW5jZSBldmVuIGlmIHRoZSBvYmplY3QgaXMgbXV0YXRlZC5cbiAgICAvLyBBdm9pZGluZyBjbG9uaW5nIGlzIHByZWZlcnJlZCBzaW5jZSBjbG9uaW5nIGVhY2ggY2hhcmFjdGVyIHNoYXBlIGRhdGEgaXMgZXhwZW5zaXZlXG4gICAgaWYgKGRhdGEuc2hhcGVzICYmIGRhdGEuc2hhcGVzLmxlbmd0aCkge1xuICAgICAgdmFyIHNoYXBlID0gZGF0YS5zaGFwZXNbMF07XG5cbiAgICAgIGlmIChzaGFwZS5pdCkge1xuICAgICAgICB2YXIgc2hhcGVJdGVtID0gc2hhcGUuaXRbc2hhcGUuaXQubGVuZ3RoIC0gMV07XG5cbiAgICAgICAgaWYgKHNoYXBlSXRlbS5zKSB7XG4gICAgICAgICAgc2hhcGVJdGVtLnMua1swXSA9IHNjYWxlO1xuICAgICAgICAgIHNoYXBlSXRlbS5zLmtbMV0gPSBzY2FsZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hZGREeW5hbWljUHJvcGVydHkodGhpcyk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcbiAgICB2YXIgZG9jdW1lbnREYXRhID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGE7XG4gICAgdGhpcy5yZW5kZXJlZExldHRlcnMgPSBjcmVhdGVTaXplZEFycmF5KGRvY3VtZW50RGF0YSA/IGRvY3VtZW50RGF0YS5sLmxlbmd0aCA6IDApO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5mYykge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5mYykpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAncmdiYSgwLDAsMCwwKScpO1xuICAgIH1cblxuICAgIGlmIChkb2N1bWVudERhdGEuc2MpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5zYykpO1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCBkb2N1bWVudERhdGEuc3cpO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgdmFyIGZvbnREYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO1xuXG4gICAgaWYgKGZvbnREYXRhLmZDbGFzcykge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGFzcycsIGZvbnREYXRhLmZDbGFzcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCBmb250RGF0YS5mRmFtaWx5KTtcbiAgICAgIHZhciBmV2VpZ2h0ID0gZG9jdW1lbnREYXRhLmZXZWlnaHQ7XG4gICAgICB2YXIgZlN0eWxlID0gZG9jdW1lbnREYXRhLmZTdHlsZTtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnZm9udC1zdHlsZScsIGZTdHlsZSk7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JywgZldlaWdodCk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgZG9jdW1lbnREYXRhLnQpO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmwgfHwgW107XG4gICAgdmFyIHVzZXNHbHlwaHMgPSAhIXRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5jaGFycztcbiAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICB2YXIgdFNwYW47XG4gICAgdmFyIG1hdHJpeEhlbHBlciA9IHRoaXMubUhlbHBlcjtcbiAgICB2YXIgc2hhcGVTdHIgPSAnJztcbiAgICB2YXIgc2luZ2xlU2hhcGUgPSB0aGlzLmRhdGEuc2luZ2xlU2hhcGU7XG4gICAgdmFyIHhQb3MgPSAwO1xuICAgIHZhciB5UG9zID0gMDtcbiAgICB2YXIgZmlyc3RMaW5lID0gdHJ1ZTtcbiAgICB2YXIgdHJhY2tpbmdPZmZzZXQgPSBkb2N1bWVudERhdGEudHIgKiAwLjAwMSAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG5cbiAgICBpZiAoc2luZ2xlU2hhcGUgJiYgIXVzZXNHbHlwaHMgJiYgIWRvY3VtZW50RGF0YS5zeikge1xuICAgICAgdmFyIHRFbGVtZW50ID0gdGhpcy50ZXh0Q29udGFpbmVyO1xuICAgICAgdmFyIGp1c3RpZnkgPSAnc3RhcnQnO1xuXG4gICAgICBzd2l0Y2ggKGRvY3VtZW50RGF0YS5qKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBqdXN0aWZ5ID0gJ2VuZCc7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIGp1c3RpZnkgPSAnbWlkZGxlJztcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGp1c3RpZnkgPSAnc3RhcnQnO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICB0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywganVzdGlmeSk7XG4gICAgICB0RWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2xldHRlci1zcGFjaW5nJywgdHJhY2tpbmdPZmZzZXQpO1xuICAgICAgdmFyIHRleHRDb250ZW50ID0gdGhpcy5idWlsZFRleHRDb250ZW50cyhkb2N1bWVudERhdGEuZmluYWxUZXh0KTtcbiAgICAgIGxlbiA9IHRleHRDb250ZW50Lmxlbmd0aDtcbiAgICAgIHlQb3MgPSBkb2N1bWVudERhdGEucHMgPyBkb2N1bWVudERhdGEucHNbMV0gKyBkb2N1bWVudERhdGEuYXNjZW50IDogMDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRTcGFuID0gdGhpcy50ZXh0U3BhbnNbaV0uc3BhbiB8fCBjcmVhdGVOUygndHNwYW4nKTtcbiAgICAgICAgdFNwYW4udGV4dENvbnRlbnQgPSB0ZXh0Q29udGVudFtpXTtcbiAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCd4JywgMCk7XG4gICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgneScsIHlQb3MpO1xuICAgICAgICB0U3Bhbi5zdHlsZS5kaXNwbGF5ID0gJ2luaGVyaXQnO1xuICAgICAgICB0RWxlbWVudC5hcHBlbmRDaGlsZCh0U3Bhbik7XG5cbiAgICAgICAgaWYgKCF0aGlzLnRleHRTcGFuc1tpXSkge1xuICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldID0ge1xuICAgICAgICAgICAgc3BhbjogbnVsbCxcbiAgICAgICAgICAgIGdseXBoOiBudWxsXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gPSB0U3BhbjtcbiAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEuZmluYWxMaW5lSGVpZ2h0O1xuICAgICAgfVxuXG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0RWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjYWNoZWRTcGFuc0xlbmd0aCA9IHRoaXMudGV4dFNwYW5zLmxlbmd0aDtcbiAgICAgIHZhciBjaGFyRGF0YTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICghdGhpcy50ZXh0U3BhbnNbaV0pIHtcbiAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXSA9IHtcbiAgICAgICAgICAgIHNwYW46IG51bGwsXG4gICAgICAgICAgICBjaGlsZFNwYW46IG51bGwsXG4gICAgICAgICAgICBnbHlwaDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXVzZXNHbHlwaHMgfHwgIXNpbmdsZVNoYXBlIHx8IGkgPT09IDApIHtcbiAgICAgICAgICB0U3BhbiA9IGNhY2hlZFNwYW5zTGVuZ3RoID4gaSA/IHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gOiBjcmVhdGVOUyh1c2VzR2x5cGhzID8gJ2cnIDogJ3RleHQnKTtcblxuICAgICAgICAgIGlmIChjYWNoZWRTcGFuc0xlbmd0aCA8PSBpKSB7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgJ2J1dHQnKTtcbiAgICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWxpbmVqb2luJywgJ3JvdW5kJyk7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1taXRlcmxpbWl0JywgJzQnKTtcbiAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLnNwYW4gPSB0U3BhbjtcblxuICAgICAgICAgICAgaWYgKHVzZXNHbHlwaHMpIHtcbiAgICAgICAgICAgICAgdmFyIGNoaWxkU3BhbiA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgICAgICAgICAgIHRTcGFuLmFwcGVuZENoaWxkKGNoaWxkU3Bhbik7XG4gICAgICAgICAgICAgIHRoaXMudGV4dFNwYW5zW2ldLmNoaWxkU3BhbiA9IGNoaWxkU3BhbjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uc3BhbiA9IHRTcGFuO1xuICAgICAgICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRTcGFuLnN0eWxlLmRpc3BsYXkgPSAnaW5oZXJpdCc7XG4gICAgICAgIH1cblxuICAgICAgICBtYXRyaXhIZWxwZXIucmVzZXQoKTtcblxuICAgICAgICBpZiAoc2luZ2xlU2hhcGUpIHtcbiAgICAgICAgICBpZiAobGV0dGVyc1tpXS5uKSB7XG4gICAgICAgICAgICB4UG9zID0gLXRyYWNraW5nT2Zmc2V0O1xuICAgICAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEueU9mZnNldDtcbiAgICAgICAgICAgIHlQb3MgKz0gZmlyc3RMaW5lID8gMSA6IDA7XG4gICAgICAgICAgICBmaXJzdExpbmUgPSBmYWxzZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aGlzLmFwcGx5VGV4dFByb3BlcnRpZXNUb01hdHJpeChkb2N1bWVudERhdGEsIG1hdHJpeEhlbHBlciwgbGV0dGVyc1tpXS5saW5lLCB4UG9zLCB5UG9zKTtcbiAgICAgICAgICB4UG9zICs9IGxldHRlcnNbaV0ubCB8fCAwOyAvLyB4UG9zICs9IGxldHRlcnNbaV0udmFsID09PSAnICcgPyAwIDogdHJhY2tpbmdPZmZzZXQ7XG5cbiAgICAgICAgICB4UG9zICs9IHRyYWNraW5nT2Zmc2V0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVzZXNHbHlwaHMpIHtcbiAgICAgICAgICBjaGFyRGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRDaGFyRGF0YShkb2N1bWVudERhdGEuZmluYWxUZXh0W2ldLCBmb250RGF0YS5mU3R5bGUsIHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKS5mRmFtaWx5KTtcbiAgICAgICAgICB2YXIgZ2x5cGhFbGVtZW50OyAvLyB0ID09PSAxIG1lYW5zIHRoZSBjaGFyYWN0ZXIgaGFzIGJlZW4gcmVwbGFjZWQgd2l0aCBhbiBhbmltYXRlZCBzaGFwZWRcblxuICAgICAgICAgIGlmIChjaGFyRGF0YS50ID09PSAxKSB7XG4gICAgICAgICAgICBnbHlwaEVsZW1lbnQgPSBuZXcgU1ZHQ29tcEVsZW1lbnQoY2hhckRhdGEuZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBlbXB0eVNoYXBlRGF0YTtcblxuICAgICAgICAgICAgaWYgKGNoYXJEYXRhLmRhdGEgJiYgY2hhckRhdGEuZGF0YS5zaGFwZXMpIHtcbiAgICAgICAgICAgICAgZGF0YSA9IHRoaXMuYnVpbGRTaGFwZURhdGEoY2hhckRhdGEuZGF0YSwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGdseXBoRWxlbWVudCA9IG5ldyBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGgpIHtcbiAgICAgICAgICAgIHZhciBnbHlwaCA9IHRoaXMudGV4dFNwYW5zW2ldLmdseXBoO1xuICAgICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uY2hpbGRTcGFuLnJlbW92ZUNoaWxkKGdseXBoLmxheWVyRWxlbWVudCk7XG4gICAgICAgICAgICBnbHlwaC5kZXN0cm95KCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGggPSBnbHlwaEVsZW1lbnQ7XG4gICAgICAgICAgZ2x5cGhFbGVtZW50Ll9kZWJ1ZyA9IHRydWU7XG4gICAgICAgICAgZ2x5cGhFbGVtZW50LnByZXBhcmVGcmFtZSgwKTtcbiAgICAgICAgICBnbHlwaEVsZW1lbnQucmVuZGVyRnJhbWUoKTtcbiAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5jaGlsZFNwYW4uYXBwZW5kQ2hpbGQoZ2x5cGhFbGVtZW50LmxheWVyRWxlbWVudCk7IC8vIHdoZW4gdXNpbmcgYW5pbWF0ZWQgc2hhcGVzLCB0aGUgbGF5ZXIgd2lsbCBiZSBzY2FsZWQgaW5zdGVhZCBvZiByZXBsYWNpbmcgdGhlIGludGVybmFsIHNjYWxlXG4gICAgICAgICAgLy8gdGhpcyBtaWdodCBoYXZlIGlzc3VlcyB3aXRoIHN0cm9rZXMgYW5kIG1pZ2h0IG5lZWQgYSBkaWZmZXJlbnQgc29sdXRpb25cblxuICAgICAgICAgIGlmIChjaGFyRGF0YS50ID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnRleHRTcGFuc1tpXS5jaGlsZFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAnc2NhbGUoJyArIGRvY3VtZW50RGF0YS5maW5hbFNpemUgLyAxMDAgKyAnLCcgKyBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwICsgJyknKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNpbmdsZVNoYXBlKSB7XG4gICAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIG1hdHJpeEhlbHBlci5wcm9wc1sxMl0gKyAnLCcgKyBtYXRyaXhIZWxwZXIucHJvcHNbMTNdICsgJyknKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0U3Bhbi50ZXh0Q29udGVudCA9IGxldHRlcnNbaV0udmFsO1xuICAgICAgICAgIHRTcGFuLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2UnLCAneG1sOnNwYWNlJywgJ3ByZXNlcnZlJyk7XG4gICAgICAgIH0gLy9cblxuICAgICAgfVxuXG4gICAgICBpZiAoc2luZ2xlU2hhcGUgJiYgdFNwYW4pIHtcbiAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdkJywgc2hhcGVTdHIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdoaWxlIChpIDwgdGhpcy50ZXh0U3BhbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnRleHRTcGFuc1tpXS5zcGFuLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSB0cnVlO1xuICB9O1xuXG4gIFNWR1RleHRMb3R0aWVFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucHJlcGFyZUZyYW1lKHRoaXMuY29tcC5yZW5kZXJlZEZyYW1lIC0gdGhpcy5kYXRhLnN0KTtcbiAgICB0aGlzLnJlbmRlcklubmVyQ29udGVudCgpO1xuXG4gICAgaWYgKHRoaXMuX3NpemVDaGFuZ2VkKSB7XG4gICAgICB0aGlzLl9zaXplQ2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdmFyIHRleHRCb3ggPSB0aGlzLmxheWVyRWxlbWVudC5nZXRCQm94KCk7XG4gICAgICB0aGlzLmJib3ggPSB7XG4gICAgICAgIHRvcDogdGV4dEJveC55LFxuICAgICAgICBsZWZ0OiB0ZXh0Qm94LngsXG4gICAgICAgIHdpZHRoOiB0ZXh0Qm94LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IHRleHRCb3guaGVpZ2h0XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmJib3g7XG4gIH07XG5cbiAgU1ZHVGV4dExvdHRpZUVsZW1lbnQucHJvdG90eXBlLmdldFZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnRleHRTcGFucy5sZW5ndGg7XG4gICAgdmFyIGdseXBoRWxlbWVudDtcbiAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgZ2x5cGhFbGVtZW50ID0gdGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGg7XG5cbiAgICAgIGlmIChnbHlwaEVsZW1lbnQpIHtcbiAgICAgICAgZ2x5cGhFbGVtZW50LnByZXBhcmVGcmFtZSh0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAtIHRoaXMuZGF0YS5zdCk7XG5cbiAgICAgICAgaWYgKGdseXBoRWxlbWVudC5fbWRmKSB7XG4gICAgICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdUZXh0TG90dGllRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudmFsaWRhdGVUZXh0KCk7XG5cbiAgICBpZiAoIXRoaXMuZGF0YS5zaW5nbGVTaGFwZSB8fCB0aGlzLl9tZGYpIHtcbiAgICAgIHRoaXMudGV4dEFuaW1hdG9yLmdldE1lYXN1cmVzKHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLCB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyk7XG5cbiAgICAgIGlmICh0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyB8fCB0aGlzLnRleHRBbmltYXRvci5sZXR0ZXJzQ2hhbmdlZEZsYWcpIHtcbiAgICAgICAgdGhpcy5fc2l6ZUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbjtcbiAgICAgICAgdmFyIHJlbmRlcmVkTGV0dGVycyA9IHRoaXMudGV4dEFuaW1hdG9yLnJlbmRlcmVkTGV0dGVycztcbiAgICAgICAgdmFyIGxldHRlcnMgPSB0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5sO1xuICAgICAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlbmRlcmVkTGV0dGVyO1xuICAgICAgICB2YXIgdGV4dFNwYW47XG4gICAgICAgIHZhciBnbHlwaEVsZW1lbnQ7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKCFsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgICAgIHJlbmRlcmVkTGV0dGVyID0gcmVuZGVyZWRMZXR0ZXJzW2ldO1xuICAgICAgICAgICAgdGV4dFNwYW4gPSB0aGlzLnRleHRTcGFuc1tpXS5zcGFuO1xuICAgICAgICAgICAgZ2x5cGhFbGVtZW50ID0gdGhpcy50ZXh0U3BhbnNbaV0uZ2x5cGg7XG5cbiAgICAgICAgICAgIGlmIChnbHlwaEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgZ2x5cGhFbGVtZW50LnJlbmRlckZyYW1lKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLm0pIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCByZW5kZXJlZExldHRlci5tKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYubykge1xuICAgICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLCByZW5kZXJlZExldHRlci5vKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLl9tZGYuc3cpIHtcbiAgICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCByZW5kZXJlZExldHRlci5zdyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlci5fbWRmLnNjKSB7XG4gICAgICAgICAgICAgIHRleHRTcGFuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgcmVuZGVyZWRMZXR0ZXIuc2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5mYykge1xuICAgICAgICAgICAgICB0ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCByZW5kZXJlZExldHRlci5mYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIElTb2xpZEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0lJbWFnZUVsZW1lbnRdLCBJU29saWRFbGVtZW50KTtcblxuICBJU29saWRFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWN0ID0gY3JlYXRlTlMoJ3JlY3QnKTsgLy8vIC9yZWN0LnN0eWxlLndpZHRoID0gdGhpcy5kYXRhLnN3O1xuICAgIC8vLyAvcmVjdC5zdHlsZS5oZWlnaHQgPSB0aGlzLmRhdGEuc2g7XG4gICAgLy8vIC9yZWN0LnN0eWxlLmZpbGwgPSB0aGlzLmRhdGEuc2M7XG5cbiAgICByZWN0LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmRhdGEuc3cpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmRhdGEuc2gpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCdmaWxsJywgdGhpcy5kYXRhLnNjKTtcbiAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChyZWN0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBOdWxsRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRGcmFtZSgpO1xuICAgIHRoaXMuaW5pdFRyYW5zZm9ybShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRIaWVyYXJjaHkoKTtcbiAgfVxuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRydWUpO1xuICB9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBOdWxsRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIE51bGxFbGVtZW50LnByb3RvdHlwZS5zb3VyY2VSZWN0QXRUaW1lID0gZnVuY3Rpb24gKCkge307XG5cbiAgTnVsbEVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnRdLCBOdWxsRWxlbWVudCk7XG5cbiAgZnVuY3Rpb24gU1ZHUmVuZGVyZXJCYXNlKCkge31cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VSZW5kZXJlcl0sIFNWR1JlbmRlcmVyQmFzZSk7XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVOdWxsID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IE51bGxFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTaGFwZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVRleHQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHJldHVybiBuZXcgU1ZHVGV4dExvdHRpZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZUltYWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IElJbWFnZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVNvbGlkID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IElTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLmNvbmZpZ0FuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltRGF0YSkge1xuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyk7XG4gICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgneG1sbnM6eGxpbmsnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycpO1xuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLnZpZXdCb3hTaXplKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgdGhpcy5yZW5kZXJDb25maWcudmlld0JveFNpemUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgJzAgMCAnICsgYW5pbURhdGEudyArICcgJyArIGFuaW1EYXRhLmgpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5yZW5kZXJDb25maWcudmlld0JveE9ubHkpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYW5pbURhdGEudyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBhbmltRGF0YS5oKTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc3R5bGUuY29udGVudFZpc2liaWxpdHkgPSB0aGlzLnJlbmRlckNvbmZpZy5jb250ZW50VmlzaWJpbGl0eTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yZW5kZXJDb25maWcud2lkdGgpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5yZW5kZXJDb25maWcud2lkdGgpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5oZWlnaHQpIHtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMucmVuZGVyQ29uZmlnLmhlaWdodCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLnJlbmRlckNvbmZpZy5jbGFzc05hbWUpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5pZCkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLnJlbmRlckNvbmZpZy5pZCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmZvY3VzYWJsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCB0aGlzLnJlbmRlckNvbmZpZy5mb2N1c2FibGUpO1xuICAgIH1cblxuICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCB0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvKTsgLy8gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZTNkKDAsMCwwKSc7XG4gICAgLy8gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUudHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUubW96VHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGUud2Via2l0VHJhbnNmb3JtT3JpZ2luID0gdGhpcy5sYXllckVsZW1lbnQuc3R5bGVbJy13ZWJraXQtdHJhbnNmb3JtJ10gPSBcIjBweCAwcHggMHB4XCI7XG5cbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5hcHBlbmRDaGlsZCh0aGlzLnN2Z0VsZW1lbnQpOyAvLyBNYXNrIGFuaW1hdGlvblxuXG4gICAgdmFyIGRlZnMgPSB0aGlzLmdsb2JhbERhdGEuZGVmcztcbiAgICB0aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSwgZGVmcyk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCA9IHRoaXMucmVuZGVyQ29uZmlnLnByb2dyZXNzaXZlTG9hZDtcbiAgICB0aGlzLmRhdGEgPSBhbmltRGF0YTtcbiAgICB2YXIgbWFza0VsZW1lbnQgPSBjcmVhdGVOUygnY2xpcFBhdGgnKTtcbiAgICB2YXIgcmVjdCA9IGNyZWF0ZU5TKCdyZWN0Jyk7XG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgYW5pbURhdGEudyk7XG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGFuaW1EYXRhLmgpO1xuICAgIHJlY3Quc2V0QXR0cmlidXRlKCd4JywgMCk7XG4gICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3knLCAwKTtcbiAgICB2YXIgbWFza0lkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgbWFza0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIG1hc2tJZCk7XG4gICAgbWFza0VsZW1lbnQuYXBwZW5kQ2hpbGQocmVjdCk7XG4gICAgdGhpcy5sYXllckVsZW1lbnQuc2V0QXR0cmlidXRlKCdjbGlwLXBhdGgnLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIG1hc2tJZCArICcpJyk7XG4gICAgZGVmcy5hcHBlbmRDaGlsZChtYXNrRWxlbWVudCk7XG4gICAgdGhpcy5sYXllcnMgPSBhbmltRGF0YS5sYXllcnM7XG4gICAgdGhpcy5lbGVtZW50cyA9IGNyZWF0ZVNpemVkQXJyYXkoYW5pbURhdGEubGF5ZXJzLmxlbmd0aCk7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0ID0gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5sYXllckVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5kZWZzID0gbnVsbDtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMgPyB0aGlzLmxheWVycy5sZW5ndGggOiAwO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZGVzdHJveWVkID0gdHJ1ZTtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBudWxsO1xuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUudXBkYXRlQ29udGFpbmVyU2l6ZSA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuZmluZEluZGV4QnlJbmQgPSBmdW5jdGlvbiAoaW5kKSB7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmxheWVyc1tpXS5pbmQgPT09IGluZCkge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5idWlsZEl0ZW0gPSBmdW5jdGlvbiAocG9zKSB7XG4gICAgdmFyIGVsZW1lbnRzID0gdGhpcy5lbGVtZW50cztcblxuICAgIGlmIChlbGVtZW50c1twb3NdIHx8IHRoaXMubGF5ZXJzW3Bvc10udHkgPT09IDk5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZWxlbWVudHNbcG9zXSA9IHRydWU7XG4gICAgdmFyIGVsZW1lbnQgPSB0aGlzLmNyZWF0ZUl0ZW0odGhpcy5sYXllcnNbcG9zXSk7XG4gICAgZWxlbWVudHNbcG9zXSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoZ2V0RXhwcmVzc2lvbnNQbHVnaW4oKSkge1xuICAgICAgaWYgKHRoaXMubGF5ZXJzW3Bvc10udHkgPT09IDApIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgZWxlbWVudC5pbml0RXhwcmVzc2lvbnMoKTtcbiAgICB9XG5cbiAgICB0aGlzLmFwcGVuZEVsZW1lbnRJblBvcyhlbGVtZW50LCBwb3MpO1xuXG4gICAgaWYgKHRoaXMubGF5ZXJzW3Bvc10udHQpIHtcbiAgICAgIHZhciBlbGVtZW50SW5kZXggPSAndHAnIGluIHRoaXMubGF5ZXJzW3Bvc10gPyB0aGlzLmZpbmRJbmRleEJ5SW5kKHRoaXMubGF5ZXJzW3Bvc10udHApIDogcG9zIC0gMTtcblxuICAgICAgaWYgKGVsZW1lbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuZWxlbWVudHNbZWxlbWVudEluZGV4XSB8fCB0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF0gPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5idWlsZEl0ZW0oZWxlbWVudEluZGV4KTtcbiAgICAgICAgdGhpcy5hZGRQZW5kaW5nRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBtYXR0ZUVsZW1lbnQgPSBlbGVtZW50c1tlbGVtZW50SW5kZXhdO1xuICAgICAgICB2YXIgbWF0dGVNYXNrID0gbWF0dGVFbGVtZW50LmdldE1hdHRlKHRoaXMubGF5ZXJzW3Bvc10udHQpO1xuICAgICAgICBlbGVtZW50LnNldE1hdHRlKG1hdHRlTWFzayk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFNWR1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMucGVuZGluZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBlbmRpbmdFbGVtZW50cy5wb3AoKTtcbiAgICAgIGVsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTtcblxuICAgICAgaWYgKGVsZW1lbnQuZGF0YS50dCkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldID09PSBlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgZWxlbWVudEluZGV4ID0gJ3RwJyBpbiBlbGVtZW50LmRhdGEgPyB0aGlzLmZpbmRJbmRleEJ5SW5kKGVsZW1lbnQuZGF0YS50cCkgOiBpIC0gMTtcbiAgICAgICAgICAgIHZhciBtYXR0ZUVsZW1lbnQgPSB0aGlzLmVsZW1lbnRzW2VsZW1lbnRJbmRleF07XG4gICAgICAgICAgICB2YXIgbWF0dGVNYXNrID0gbWF0dGVFbGVtZW50LmdldE1hdHRlKHRoaXMubGF5ZXJzW2ldLnR0KTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0TWF0dGUobWF0dGVNYXNrKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBTVkdSZW5kZXJlckJhc2UucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVkRnJhbWUgPT09IG51bSB8fCB0aGlzLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChudW0gPT09IG51bGwpIHtcbiAgICAgIG51bSA9IHRoaXMucmVuZGVyZWRGcmFtZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtO1xuICAgIH0gLy8gY29uc29sZS5sb2coJy0tLS0tLS0nKTtcbiAgICAvLyBjb25zb2xlLmxvZygnRlJBTUUgJyxudW0pO1xuXG5cbiAgICB0aGlzLmdsb2JhbERhdGEuZnJhbWVOdW0gPSBudW07XG4gICAgdGhpcy5nbG9iYWxEYXRhLmZyYW1lSWQgKz0gMTtcbiAgICB0aGlzLmdsb2JhbERhdGEucHJvamVjdEludGVyZmFjZS5jdXJyZW50RnJhbWUgPSBudW07XG4gICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSBmYWxzZTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgaWYgKCF0aGlzLmNvbXBsZXRlTGF5ZXJzKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJzKG51bSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUobnVtIC0gdGhpcy5sYXllcnNbaV0uc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmdsb2JhbERhdGEuX21kZikge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlbmRlckZyYW1lKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5hcHBlbmRFbGVtZW50SW5Qb3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgcG9zKSB7XG4gICAgdmFyIG5ld0VsZW1lbnQgPSBlbGVtZW50LmdldEJhc2VFbGVtZW50KCk7XG5cbiAgICBpZiAoIW5ld0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIG5leHRFbGVtZW50O1xuXG4gICAgd2hpbGUgKGkgPCBwb3MpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldICYmIHRoaXMuZWxlbWVudHNbaV0gIT09IHRydWUgJiYgdGhpcy5lbGVtZW50c1tpXS5nZXRCYXNlRWxlbWVudCgpKSB7XG4gICAgICAgIG5leHRFbGVtZW50ID0gdGhpcy5lbGVtZW50c1tpXS5nZXRCYXNlRWxlbWVudCgpO1xuICAgICAgfVxuXG4gICAgICBpICs9IDE7XG4gICAgfVxuXG4gICAgaWYgKG5leHRFbGVtZW50KSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5pbnNlcnRCZWZvcmUobmV3RWxlbWVudCwgbmV4dEVsZW1lbnQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChuZXdFbGVtZW50KTtcbiAgICB9XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG5cbiAgU1ZHUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMubGF5ZXJFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9O1xuXG4gIGZ1bmN0aW9uIElDb21wRWxlbWVudCgpIHt9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgVHJhbnNmb3JtRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRE9NRWxlbWVudF0sIElDb21wRWxlbWVudCk7XG5cbiAgSUNvbXBFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudCA9IGZ1bmN0aW9uIChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RnJhbWUoKTtcbiAgICB0aGlzLmluaXRCYXNlRGF0YShkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLmluaXRUcmFuc2Zvcm0oZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0UmVuZGVyYWJsZSgpO1xuICAgIHRoaXMuaW5pdEhpZXJhcmNoeSgpO1xuICAgIHRoaXMuaW5pdFJlbmRlcmVyRWxlbWVudCgpO1xuICAgIHRoaXMuY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKTtcbiAgICB0aGlzLmNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCk7XG5cbiAgICBpZiAodGhpcy5kYXRhLnh0IHx8ICFnbG9iYWxEYXRhLnByb2dyZXNzaXZlTG9hZCkge1xuICAgICAgdGhpcy5idWlsZEFsbEl0ZW1zKCk7XG4gICAgfVxuXG4gICAgdGhpcy5oaWRlKCk7XG4gIH07XG4gIC8qIElDb21wRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uKCl7XHJcbiAgICAgIGlmKCF0aGlzLmhpZGRlbil7XHJcbiAgICAgICAgICB0aGlzLmhpZGVFbGVtZW50KCk7XHJcbiAgICAgICAgICB2YXIgaSxsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcclxuICAgICAgICAgIGZvciggaSA9IDA7IGkgPCBsZW47IGkrPTEgKXtcclxuICAgICAgICAgICAgICBpZih0aGlzLmVsZW1lbnRzW2ldKXtcclxuICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgfTsgKi9cblxuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gZnVuY3Rpb24gKG51bSkge1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuICAgIHRoaXMucHJlcGFyZVJlbmRlcmFibGVGcmFtZShudW0pO1xuICAgIHRoaXMucHJlcGFyZVByb3BlcnRpZXMobnVtLCB0aGlzLmlzSW5SYW5nZSk7XG5cbiAgICBpZiAoIXRoaXMuaXNJblJhbmdlICYmICF0aGlzLmRhdGEueHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMudG0uX3BsYWNlaG9sZGVyKSB7XG4gICAgICB2YXIgdGltZVJlbWFwcGVkID0gdGhpcy50bS52O1xuXG4gICAgICBpZiAodGltZVJlbWFwcGVkID09PSB0aGlzLmRhdGEub3ApIHtcbiAgICAgICAgdGltZVJlbWFwcGVkID0gdGhpcy5kYXRhLm9wIC0gMTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gdGltZVJlbWFwcGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlbmRlcmVkRnJhbWUgPSBudW0gLyB0aGlzLmRhdGEuc3I7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgaWYgKCF0aGlzLmNvbXBsZXRlTGF5ZXJzKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJzKHRoaXMucmVuZGVyZWRGcmFtZSk7XG4gICAgfSAvLyBUaGlzIGl0ZXJhdGlvbiBuZWVkcyB0byBiZSBiYWNrd2FyZHMgYmVjYXVzZSBvZiBob3cgZXhwcmVzc2lvbnMgY29ubmVjdCBiZXR3ZWVuIGVhY2ggb3RoZXJcblxuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUodGhpcy5yZW5kZXJlZEZyYW1lIC0gdGhpcy5sYXllcnNbaV0uc3QpO1xuXG4gICAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldLl9tZGYpIHtcbiAgICAgICAgICB0aGlzLl9tZGYgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5yZW5kZXJGcmFtZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBJQ29tcEVsZW1lbnQucHJvdG90eXBlLnNldEVsZW1lbnRzID0gZnVuY3Rpb24gKGVsZW1zKSB7XG4gICAgdGhpcy5lbGVtZW50cyA9IGVsZW1zO1xuICB9O1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuZ2V0RWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuZWxlbWVudHM7XG4gIH07XG5cbiAgSUNvbXBFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95RWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIElDb21wRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmRlc3Ryb3lFbGVtZW50cygpO1xuICAgIHRoaXMuZGVzdHJveUJhc2VFbGVtZW50KCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHQ29tcEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMubGF5ZXJzID0gZGF0YS5sYXllcnM7XG4gICAgdGhpcy5zdXBwb3J0czNkID0gdHJ1ZTtcbiAgICB0aGlzLmNvbXBsZXRlTGF5ZXJzID0gZmFsc2U7XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnRzID0gdGhpcy5sYXllcnMgPyBjcmVhdGVTaXplZEFycmF5KHRoaXMubGF5ZXJzLmxlbmd0aCkgOiBbXTtcbiAgICB0aGlzLmluaXRFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApO1xuICAgIHRoaXMudG0gPSBkYXRhLnRtID8gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS50bSwgMCwgZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIHRoaXMpIDoge1xuICAgICAgX3BsYWNlaG9sZGVyOiB0cnVlXG4gICAgfTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU1ZHUmVuZGVyZXJCYXNlLCBJQ29tcEVsZW1lbnQsIFNWR0Jhc2VFbGVtZW50XSwgU1ZHQ29tcEVsZW1lbnQpO1xuXG4gIFNWR0NvbXBFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb21wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHUmVuZGVyZXIoYW5pbWF0aW9uSXRlbSwgY29uZmlnKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gYW5pbWF0aW9uSXRlbTtcbiAgICB0aGlzLmxheWVycyA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gLTE7XG4gICAgdGhpcy5zdmdFbGVtZW50ID0gY3JlYXRlTlMoJ3N2ZycpO1xuICAgIHZhciBhcmlhTGFiZWwgPSAnJztcblxuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnRpdGxlKSB7XG4gICAgICB2YXIgdGl0bGVFbGVtZW50ID0gY3JlYXRlTlMoJ3RpdGxlJyk7XG4gICAgICB2YXIgdGl0bGVJZCA9IGNyZWF0ZUVsZW1lbnRJRCgpO1xuICAgICAgdGl0bGVFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aXRsZUlkKTtcbiAgICAgIHRpdGxlRWxlbWVudC50ZXh0Q29udGVudCA9IGNvbmZpZy50aXRsZTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5hcHBlbmRDaGlsZCh0aXRsZUVsZW1lbnQpO1xuICAgICAgYXJpYUxhYmVsICs9IHRpdGxlSWQ7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuZGVzY3JpcHRpb24pIHtcbiAgICAgIHZhciBkZXNjRWxlbWVudCA9IGNyZWF0ZU5TKCdkZXNjJyk7XG4gICAgICB2YXIgZGVzY0lkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICBkZXNjRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2lkJywgZGVzY0lkKTtcbiAgICAgIGRlc2NFbGVtZW50LnRleHRDb250ZW50ID0gY29uZmlnLmRlc2NyaXB0aW9uO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LmFwcGVuZENoaWxkKGRlc2NFbGVtZW50KTtcbiAgICAgIGFyaWFMYWJlbCArPSAnICcgKyBkZXNjSWQ7XG4gICAgfVxuXG4gICAgaWYgKGFyaWFMYWJlbCkge1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbGxlZGJ5JywgYXJpYUxhYmVsKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmcyA9IGNyZWF0ZU5TKCdkZWZzJyk7XG4gICAgdGhpcy5zdmdFbGVtZW50LmFwcGVuZENoaWxkKGRlZnMpO1xuICAgIHZhciBtYXNrRWxlbWVudCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgdGhpcy5zdmdFbGVtZW50LmFwcGVuZENoaWxkKG1hc2tFbGVtZW50KTtcbiAgICB0aGlzLmxheWVyRWxlbWVudCA9IG1hc2tFbGVtZW50O1xuICAgIHRoaXMucmVuZGVyQ29uZmlnID0ge1xuICAgICAgcHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvIHx8ICd4TWlkWU1pZCBtZWV0JyxcbiAgICAgIGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIHNsaWNlJyxcbiAgICAgIGNvbnRlbnRWaXNpYmlsaXR5OiBjb25maWcgJiYgY29uZmlnLmNvbnRlbnRWaXNpYmlsaXR5IHx8ICd2aXNpYmxlJyxcbiAgICAgIHByb2dyZXNzaXZlTG9hZDogY29uZmlnICYmIGNvbmZpZy5wcm9ncmVzc2l2ZUxvYWQgfHwgZmFsc2UsXG4gICAgICBoaWRlT25UcmFuc3BhcmVudDogIShjb25maWcgJiYgY29uZmlnLmhpZGVPblRyYW5zcGFyZW50ID09PSBmYWxzZSksXG4gICAgICB2aWV3Qm94T25seTogY29uZmlnICYmIGNvbmZpZy52aWV3Qm94T25seSB8fCBmYWxzZSxcbiAgICAgIHZpZXdCb3hTaXplOiBjb25maWcgJiYgY29uZmlnLnZpZXdCb3hTaXplIHx8IGZhbHNlLFxuICAgICAgY2xhc3NOYW1lOiBjb25maWcgJiYgY29uZmlnLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgIGlkOiBjb25maWcgJiYgY29uZmlnLmlkIHx8ICcnLFxuICAgICAgZm9jdXNhYmxlOiBjb25maWcgJiYgY29uZmlnLmZvY3VzYWJsZSxcbiAgICAgIGZpbHRlclNpemU6IHtcbiAgICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS53aWR0aCB8fCAnMTAwJScsXG4gICAgICAgIGhlaWdodDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLmhlaWdodCB8fCAnMTAwJScsXG4gICAgICAgIHg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS54IHx8ICcwJScsXG4gICAgICAgIHk6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS55IHx8ICcwJSdcbiAgICAgIH0sXG4gICAgICB3aWR0aDogY29uZmlnICYmIGNvbmZpZy53aWR0aCxcbiAgICAgIGhlaWdodDogY29uZmlnICYmIGNvbmZpZy5oZWlnaHQsXG4gICAgICBydW5FeHByZXNzaW9uczogIWNvbmZpZyB8fCBjb25maWcucnVuRXhwcmVzc2lvbnMgPT09IHVuZGVmaW5lZCB8fCBjb25maWcucnVuRXhwcmVzc2lvbnNcbiAgICB9O1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHtcbiAgICAgIF9tZGY6IGZhbHNlLFxuICAgICAgZnJhbWVOdW06IC0xLFxuICAgICAgZGVmczogZGVmcyxcbiAgICAgIHJlbmRlckNvbmZpZzogdGhpcy5yZW5kZXJDb25maWdcbiAgICB9O1xuICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnc3ZnJztcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbU1ZHUmVuZGVyZXJCYXNlXSwgU1ZHUmVuZGVyZXIpO1xuXG4gIFNWR1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDb21wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFNWR0NvbXBFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgZnVuY3Rpb24gU2hhcGVUcmFuc2Zvcm1NYW5hZ2VyKCkge1xuICAgIHRoaXMuc2VxdWVuY2VzID0ge307XG4gICAgdGhpcy5zZXF1ZW5jZUxpc3QgPSBbXTtcbiAgICB0aGlzLnRyYW5zZm9ybV9rZXlfY291bnQgPSAwO1xuICB9XG5cbiAgU2hhcGVUcmFuc2Zvcm1NYW5hZ2VyLnByb3RvdHlwZSA9IHtcbiAgICBhZGRUcmFuc2Zvcm1TZXF1ZW5jZTogZnVuY3Rpb24gYWRkVHJhbnNmb3JtU2VxdWVuY2UodHJhbnNmb3Jtcykge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICB2YXIga2V5ID0gJ18nO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAga2V5ICs9IHRyYW5zZm9ybXNbaV0udHJhbnNmb3JtLmtleSArICdfJztcbiAgICAgIH1cblxuICAgICAgdmFyIHNlcXVlbmNlID0gdGhpcy5zZXF1ZW5jZXNba2V5XTtcblxuICAgICAgaWYgKCFzZXF1ZW5jZSkge1xuICAgICAgICBzZXF1ZW5jZSA9IHtcbiAgICAgICAgICB0cmFuc2Zvcm1zOiBbXS5jb25jYXQodHJhbnNmb3JtcyksXG4gICAgICAgICAgZmluYWxUcmFuc2Zvcm06IG5ldyBNYXRyaXgoKSxcbiAgICAgICAgICBfbWRmOiBmYWxzZVxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNlcXVlbmNlc1trZXldID0gc2VxdWVuY2U7XG4gICAgICAgIHRoaXMuc2VxdWVuY2VMaXN0LnB1c2goc2VxdWVuY2UpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gc2VxdWVuY2U7XG4gICAgfSxcbiAgICBwcm9jZXNzU2VxdWVuY2U6IGZ1bmN0aW9uIHByb2Nlc3NTZXF1ZW5jZShzZXF1ZW5jZSwgaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgaSA9IDA7XG4gICAgICB2YXIgbGVuID0gc2VxdWVuY2UudHJhbnNmb3Jtcy5sZW5ndGg7XG4gICAgICB2YXIgX21kZiA9IGlzRmlyc3RGcmFtZTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4gJiYgIWlzRmlyc3RGcmFtZSkge1xuICAgICAgICBpZiAoc2VxdWVuY2UudHJhbnNmb3Jtc1tpXS50cmFuc2Zvcm0ubVByb3BzLl9tZGYpIHtcbiAgICAgICAgICBfbWRmID0gdHJ1ZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGkgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9tZGYpIHtcbiAgICAgICAgc2VxdWVuY2UuZmluYWxUcmFuc2Zvcm0ucmVzZXQoKTtcblxuICAgICAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgIHNlcXVlbmNlLmZpbmFsVHJhbnNmb3JtLm11bHRpcGx5KHNlcXVlbmNlLnRyYW5zZm9ybXNbaV0udHJhbnNmb3JtLm1Qcm9wcy52KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXF1ZW5jZS5fbWRmID0gX21kZjtcbiAgICB9LFxuICAgIHByb2Nlc3NTZXF1ZW5jZXM6IGZ1bmN0aW9uIHByb2Nlc3NTZXF1ZW5jZXMoaXNGaXJzdEZyYW1lKSB7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnNlcXVlbmNlTGlzdC5sZW5ndGg7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICB0aGlzLnByb2Nlc3NTZXF1ZW5jZSh0aGlzLnNlcXVlbmNlTGlzdFtpXSwgaXNGaXJzdEZyYW1lKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldE5ld0tleTogZnVuY3Rpb24gZ2V0TmV3S2V5KCkge1xuICAgICAgdGhpcy50cmFuc2Zvcm1fa2V5X2NvdW50ICs9IDE7XG4gICAgICByZXR1cm4gJ18nICsgdGhpcy50cmFuc2Zvcm1fa2V5X2NvdW50O1xuICAgIH1cbiAgfTtcblxuICB2YXIgbHVtYUxvYWRlciA9IGZ1bmN0aW9uIGx1bWFMb2FkZXIoKSB7XG4gICAgdmFyIGlkID0gJ19fbG90dGllX2VsZW1lbnRfbHVtYV9idWZmZXInO1xuICAgIHZhciBsdW1hQnVmZmVyID0gbnVsbDtcbiAgICB2YXIgbHVtYUJ1ZmZlckN0eCA9IG51bGw7XG4gICAgdmFyIHN2ZyA9IG51bGw7IC8vIFRoaXMgYWx0ZXJuYXRlIHNvbHV0aW9uIGhhcyBhIHNsaWdodCBkZWxheSBiZWZvcmUgdGhlIGZpbHRlciBpcyBhcHBsaWVkLCByZXN1bHRpbmcgaW4gYSBmbGlja2VyIG9uIHRoZSBmaXJzdCBmcmFtZS5cbiAgICAvLyBLZWVwaW5nIHRoaXMgaGVyZSBmb3IgcmVmZXJlbmNlLCBhbmQgaW4gdGhlIGZ1dHVyZSwgaWYgb2Zmc2NyZWVuIGNhbnZhcyBzdXBwb3J0cyB1cmwgZmlsdGVycywgdGhpcyBjYW4gYmUgdXNlZC5cbiAgICAvLyBGb3Igbm93LCBuZWl0aGVyIG9mIHRoZW0gd29yayBmb3Igb2Zmc2NyZWVuIGNhbnZhcywgc28gY2FudmFzIHdvcmtlcnMgY2FuJ3Qgc3VwcG9ydCB0aGUgbHVtYSB0cmFjayBtYXR0ZSBtYXNrLlxuICAgIC8vIE5hbWluZyBpdCBzb2x1dGlvbiAyIHRvIG1hcmsgdGhlIGV4dHJhIGNvbW1lbnQgbGluZXMuXG5cbiAgICAvKlxyXG4gICAgdmFyIHN2Z1N0cmluZyA9IFtcclxuICAgICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPicsXHJcbiAgICAgICc8ZmlsdGVyIGlkPVwiJyArIGlkICsgJ1wiPicsXHJcbiAgICAgICc8ZmVDb2xvck1hdHJpeCB0eXBlPVwibWF0cml4XCIgY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzPVwic1JHQlwiIHZhbHVlcz1cIicsXHJcbiAgICAgICcwLjMsIDAuMywgMC4zLCAwLCAwLCAnLFxyXG4gICAgICAnMC4zLCAwLjMsIDAuMywgMCwgMCwgJyxcclxuICAgICAgJzAuMywgMC4zLCAwLjMsIDAsIDAsICcsXHJcbiAgICAgICcwLjMsIDAuMywgMC4zLCAwLCAwJyxcclxuICAgICAgJ1wiLz4nLFxyXG4gICAgICAnPC9maWx0ZXI+JyxcclxuICAgICAgJzwvc3ZnPicsXHJcbiAgICBdLmpvaW4oJycpO1xyXG4gICAgdmFyIGJsb2IgPSBuZXcgQmxvYihbc3ZnU3RyaW5nXSwgeyB0eXBlOiAnaW1hZ2Uvc3ZnK3htbCcgfSk7XHJcbiAgICB2YXIgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICovXG5cbiAgICBmdW5jdGlvbiBjcmVhdGVMdW1hU3ZnRmlsdGVyKCkge1xuICAgICAgdmFyIF9zdmcgPSBjcmVhdGVOUygnc3ZnJyk7XG5cbiAgICAgIHZhciBmaWwgPSBjcmVhdGVOUygnZmlsdGVyJyk7XG4gICAgICB2YXIgbWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICAgIGZpbC5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpO1xuICAgICAgbWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICAgIG1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgICBtYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMC4zLCAwLjMsIDAuMywgMCwgMCwgMC4zLCAwLjMsIDAuMywgMCwgMCwgMC4zLCAwLjMsIDAuMywgMCwgMCwgMC4zLCAwLjMsIDAuMywgMCwgMCcpO1xuICAgICAgZmlsLmFwcGVuZENoaWxkKG1hdHJpeCk7XG5cbiAgICAgIF9zdmcuYXBwZW5kQ2hpbGQoZmlsKTtcblxuICAgICAgX3N2Zy5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQgKyAnX3N2ZycpO1xuXG4gICAgICBpZiAoZmVhdHVyZVN1cHBvcnQuc3ZnTHVtYUhpZGRlbikge1xuICAgICAgICBfc3ZnLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBfc3ZnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMdW1hKCkge1xuICAgICAgaWYgKCFsdW1hQnVmZmVyKSB7XG4gICAgICAgIHN2ZyA9IGNyZWF0ZUx1bWFTdmdGaWx0ZXIoKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzdmcpO1xuICAgICAgICBsdW1hQnVmZmVyID0gY3JlYXRlVGFnKCdjYW52YXMnKTtcbiAgICAgICAgbHVtYUJ1ZmZlckN0eCA9IGx1bWFCdWZmZXIuZ2V0Q29udGV4dCgnMmQnKTsgLy8gbHVtYUJ1ZmZlckN0eC5maWx0ZXIgPSBgdXJsKCcke3VybH0jX19sb3R0aWVfZWxlbWVudF9sdW1hX2J1ZmZlcicpYDsgLy8gcGFydCBvZiBzb2x1dGlvbiAyXG5cbiAgICAgICAgbHVtYUJ1ZmZlckN0eC5maWx0ZXIgPSAndXJsKCMnICsgaWQgKyAnKSc7XG4gICAgICAgIGx1bWFCdWZmZXJDdHguZmlsbFN0eWxlID0gJ3JnYmEoMCwwLDAsMCknO1xuICAgICAgICBsdW1hQnVmZmVyQ3R4LmZpbGxSZWN0KDAsIDAsIDEsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldEx1bWEoY2FudmFzKSB7XG4gICAgICBpZiAoIWx1bWFCdWZmZXIpIHtcbiAgICAgICAgbG9hZEx1bWEoKTtcbiAgICAgIH1cblxuICAgICAgbHVtYUJ1ZmZlci53aWR0aCA9IGNhbnZhcy53aWR0aDtcbiAgICAgIGx1bWFCdWZmZXIuaGVpZ2h0ID0gY2FudmFzLmhlaWdodDsgLy8gbHVtYUJ1ZmZlckN0eC5maWx0ZXIgPSBgdXJsKCcke3VybH0jX19sb3R0aWVfZWxlbWVudF9sdW1hX2J1ZmZlcicpYDsgLy8gcGFydCBvZiBzb2x1dGlvbiAyXG5cbiAgICAgIGx1bWFCdWZmZXJDdHguZmlsdGVyID0gJ3VybCgjJyArIGlkICsgJyknO1xuICAgICAgcmV0dXJuIGx1bWFCdWZmZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWQ6IGxvYWRMdW1hLFxuICAgICAgZ2V0OiBnZXRMdW1hXG4gICAgfTtcbiAgfTtcblxuICBmdW5jdGlvbiBjcmVhdGVDYW52YXMod2lkdGgsIGhlaWdodCkge1xuICAgIGlmIChmZWF0dXJlU3VwcG9ydC5vZmZzY3JlZW5DYW52YXMpIHtcbiAgICAgIHJldHVybiBuZXcgT2Zmc2NyZWVuQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgIH1cblxuICAgIHZhciBjYW52YXMgPSBjcmVhdGVUYWcoJ2NhbnZhcycpO1xuICAgIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgcmV0dXJuIGNhbnZhcztcbiAgfVxuXG4gIHZhciBhc3NldExvYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgbG9hZEx1bWFDYW52YXM6IGx1bWFMb2FkZXIubG9hZCxcbiAgICAgIGdldEx1bWFDYW52YXM6IGx1bWFMb2FkZXIuZ2V0LFxuICAgICAgY3JlYXRlQ2FudmFzOiBjcmVhdGVDYW52YXNcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIHJlZ2lzdGVyZWRFZmZlY3RzID0ge307XG5cbiAgZnVuY3Rpb24gQ1ZFZmZlY3RzKGVsZW0pIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gZWxlbS5kYXRhLmVmID8gZWxlbS5kYXRhLmVmLmxlbmd0aCA6IDA7XG4gICAgdGhpcy5maWx0ZXJzID0gW107XG4gICAgdmFyIGZpbHRlck1hbmFnZXI7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGZpbHRlck1hbmFnZXIgPSBudWxsO1xuICAgICAgdmFyIHR5cGUgPSBlbGVtLmRhdGEuZWZbaV0udHk7XG5cbiAgICAgIGlmIChyZWdpc3RlcmVkRWZmZWN0c1t0eXBlXSkge1xuICAgICAgICB2YXIgRWZmZWN0ID0gcmVnaXN0ZXJlZEVmZmVjdHNbdHlwZV0uZWZmZWN0O1xuICAgICAgICBmaWx0ZXJNYW5hZ2VyID0gbmV3IEVmZmVjdChlbGVtLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzW2ldLCBlbGVtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpbHRlck1hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5maWx0ZXJzLnB1c2goZmlsdGVyTWFuYWdlcik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmlsdGVycy5sZW5ndGgpIHtcbiAgICAgIGVsZW0uYWRkUmVuZGVyYWJsZUNvbXBvbmVudCh0aGlzKTtcbiAgICB9XG4gIH1cblxuICBDVkVmZmVjdHMucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKF9pc0ZpcnN0RnJhbWUpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5maWx0ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5maWx0ZXJzW2ldLnJlbmRlckZyYW1lKF9pc0ZpcnN0RnJhbWUpO1xuICAgIH1cbiAgfTtcblxuICBDVkVmZmVjdHMucHJvdG90eXBlLmdldEVmZmVjdHMgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmZpbHRlcnMubGVuZ3RoO1xuICAgIHZhciBlZmZlY3RzID0gW107XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmZpbHRlcnNbaV0udHlwZSA9PT0gdHlwZSkge1xuICAgICAgICBlZmZlY3RzLnB1c2godGhpcy5maWx0ZXJzW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZWZmZWN0cztcbiAgfTtcblxuICBmdW5jdGlvbiByZWdpc3RlckVmZmVjdChpZCwgZWZmZWN0KSB7XG4gICAgcmVnaXN0ZXJlZEVmZmVjdHNbaWRdID0ge1xuICAgICAgZWZmZWN0OiBlZmZlY3RcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gQ1ZNYXNrRWxlbWVudChkYXRhLCBlbGVtZW50KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMubWFza3NQcm9wZXJ0aWVzID0gdGhpcy5kYXRhLm1hc2tzUHJvcGVydGllcyB8fCBbXTtcbiAgICB0aGlzLnZpZXdEYXRhID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLm1hc2tzUHJvcGVydGllcy5sZW5ndGgpO1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG4gICAgdmFyIGhhc01hc2tzID0gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5tb2RlICE9PSAnbicpIHtcbiAgICAgICAgaGFzTWFza3MgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnZpZXdEYXRhW2ldID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKHRoaXMuZWxlbWVudCwgdGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0sIDMpO1xuICAgIH1cblxuICAgIHRoaXMuaGFzTWFza3MgPSBoYXNNYXNrcztcblxuICAgIGlmIChoYXNNYXNrcykge1xuICAgICAgdGhpcy5lbGVtZW50LmFkZFJlbmRlcmFibGVDb21wb25lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgQ1ZNYXNrRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmhhc01hc2tzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHRyYW5zZm9ybSA9IHRoaXMuZWxlbWVudC5maW5hbFRyYW5zZm9ybS5tYXQ7XG4gICAgdmFyIGN0eCA9IHRoaXMuZWxlbWVudC5jYW52YXNDb250ZXh0O1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLm1hc2tzUHJvcGVydGllcy5sZW5ndGg7XG4gICAgdmFyIHB0O1xuICAgIHZhciBwdHM7XG4gICAgdmFyIGRhdGE7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5tYXNrc1Byb3BlcnRpZXNbaV0ubW9kZSAhPT0gJ24nKSB7XG4gICAgICAgIGlmICh0aGlzLm1hc2tzUHJvcGVydGllc1tpXS5pbnYpIHtcbiAgICAgICAgICBjdHgubW92ZVRvKDAsIDApO1xuICAgICAgICAgIGN0eC5saW5lVG8odGhpcy5lbGVtZW50Lmdsb2JhbERhdGEuY29tcFNpemUudywgMCk7XG4gICAgICAgICAgY3R4LmxpbmVUbyh0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS53LCB0aGlzLmVsZW1lbnQuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oKTtcbiAgICAgICAgICBjdHgubGluZVRvKDAsIHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLmNvbXBTaXplLmgpO1xuICAgICAgICAgIGN0eC5saW5lVG8oMCwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhID0gdGhpcy52aWV3RGF0YVtpXS52O1xuICAgICAgICBwdCA9IHRyYW5zZm9ybS5hcHBseVRvUG9pbnRBcnJheShkYXRhLnZbMF1bMF0sIGRhdGEudlswXVsxXSwgMCk7XG4gICAgICAgIGN0eC5tb3ZlVG8ocHRbMF0sIHB0WzFdKTtcbiAgICAgICAgdmFyIGo7XG4gICAgICAgIHZhciBqTGVuID0gZGF0YS5fbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaiA9IDE7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBwdHMgPSB0cmFuc2Zvcm0uYXBwbHlUb1RyaXBsZVBvaW50cyhkYXRhLm9baiAtIDFdLCBkYXRhLmlbal0sIGRhdGEudltqXSk7XG4gICAgICAgICAgY3R4LmJlemllckN1cnZlVG8ocHRzWzBdLCBwdHNbMV0sIHB0c1syXSwgcHRzWzNdLCBwdHNbNF0sIHB0c1s1XSk7XG4gICAgICAgIH1cblxuICAgICAgICBwdHMgPSB0cmFuc2Zvcm0uYXBwbHlUb1RyaXBsZVBvaW50cyhkYXRhLm9baiAtIDFdLCBkYXRhLmlbMF0sIGRhdGEudlswXSk7XG4gICAgICAgIGN0eC5iZXppZXJDdXJ2ZVRvKHB0c1swXSwgcHRzWzFdLCBwdHNbMl0sIHB0c1szXSwgcHRzWzRdLCBwdHNbNV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC5nbG9iYWxEYXRhLnJlbmRlcmVyLnNhdmUodHJ1ZSk7XG4gICAgY3R4LmNsaXAoKTtcbiAgfTtcblxuICBDVk1hc2tFbGVtZW50LnByb3RvdHlwZS5nZXRNYXNrUHJvcGVydHkgPSBNYXNrRWxlbWVudC5wcm90b3R5cGUuZ2V0TWFza1Byb3BlcnR5O1xuXG4gIENWTWFza0VsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBDVkJhc2VFbGVtZW50KCkge31cblxuICB2YXIgb3BlcmF0aW9uc01hcCA9IHtcbiAgICAxOiAnc291cmNlLWluJyxcbiAgICAyOiAnc291cmNlLW91dCcsXG4gICAgMzogJ3NvdXJjZS1pbicsXG4gICAgNDogJ3NvdXJjZS1vdXQnXG4gIH07XG4gIENWQmFzZUVsZW1lbnQucHJvdG90eXBlID0ge1xuICAgIGNyZWF0ZUVsZW1lbnRzOiBmdW5jdGlvbiBjcmVhdGVFbGVtZW50cygpIHt9LFxuICAgIGluaXRSZW5kZXJlckVsZW1lbnQ6IGZ1bmN0aW9uIGluaXRSZW5kZXJlckVsZW1lbnQoKSB7fSxcbiAgICBjcmVhdGVDb250YWluZXJFbGVtZW50czogZnVuY3Rpb24gY3JlYXRlQ29udGFpbmVyRWxlbWVudHMoKSB7XG4gICAgICAvLyBJZiB0aGUgbGF5ZXIgaXMgbWFza2VkIHdlIHdpbGwgdXNlIHR3byBidWZmZXJzIHRvIHN0b3JlIGVhY2ggZGlmZmVyZW50IHN0YXRlcyBvZiB0aGUgZHJhd2luZ1xuICAgICAgLy8gVGhpcyBzb2x1dGlvbiBpcyBub3QgaWRlYWwgZm9yIHNldmVyYWwgcmVhc29uLiBCdXQgdW5mb3J0dW5hdGVseSwgYmVjYXVzZSBvZiB0aGUgcmVjdXJzaXZlXG4gICAgICAvLyBuYXR1cmUgb2YgdGhlIHJlbmRlciB0cmVlLCBpdCdzIHRoZSBvbmx5IHNpbXBsZSB3YXkgdG8gbWFrZSBzdXJlIG9uZSBpbm5lciBtYXNrIGRvZXNuJ3Qgb3ZlcnJpZGUgYW4gb3V0ZXIgbWFzay5cbiAgICAgIC8vIFRPRE86IHRyeSB0byByZWR1Y2UgdGhlIHNpemUgb2YgdGhlc2UgYnVmZmVycyB0byB0aGUgc2l6ZSBvZiB0aGUgY29tcG9zaXRpb24gY29udGFuaW5nIHRoZSBsYXllclxuICAgICAgLy8gSXQgbWlnaHQgYmUgY2hhbGxlbmdpbmcgYmVjYXVzZSB0aGUgbGF5ZXIgbW9zdCBsaWtlbHkgaXMgdHJhbnNmb3JtZWQgaW4gc29tZSB3YXlcbiAgICAgIGlmICh0aGlzLmRhdGEudHQgPj0gMSkge1xuICAgICAgICB0aGlzLmJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdmFyIGNhbnZhc0NvbnRleHQgPSB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dDtcbiAgICAgICAgdmFyIGJ1ZmZlckNhbnZhcyA9IGFzc2V0TG9hZGVyLmNyZWF0ZUNhbnZhcyhjYW52YXNDb250ZXh0LmNhbnZhcy53aWR0aCwgY2FudmFzQ29udGV4dC5jYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5idWZmZXJzLnB1c2goYnVmZmVyQ2FudmFzKTtcbiAgICAgICAgdmFyIGJ1ZmZlckNhbnZhczIgPSBhc3NldExvYWRlci5jcmVhdGVDYW52YXMoY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGgsIGNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodCk7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJ1ZmZlckNhbnZhczIpO1xuXG4gICAgICAgIGlmICh0aGlzLmRhdGEudHQgPj0gMyAmJiAhZG9jdW1lbnQuX2lzUHJveHkpIHtcbiAgICAgICAgICBhc3NldExvYWRlci5sb2FkTHVtYUNhbnZhcygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0O1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMgPSB0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzO1xuICAgICAgdGhpcy5yZW5kZXJhYmxlRWZmZWN0c01hbmFnZXIgPSBuZXcgQ1ZFZmZlY3RzKHRoaXMpO1xuICAgICAgdGhpcy5zZWFyY2hFZmZlY3RUcmFuc2Zvcm1zKCk7XG4gICAgfSxcbiAgICBjcmVhdGVDb250ZW50OiBmdW5jdGlvbiBjcmVhdGVDb250ZW50KCkge30sXG4gICAgc2V0QmxlbmRNb2RlOiBmdW5jdGlvbiBzZXRCbGVuZE1vZGUoKSB7XG4gICAgICB2YXIgZ2xvYmFsRGF0YSA9IHRoaXMuZ2xvYmFsRGF0YTtcblxuICAgICAgaWYgKGdsb2JhbERhdGEuYmxlbmRNb2RlICE9PSB0aGlzLmRhdGEuYm0pIHtcbiAgICAgICAgZ2xvYmFsRGF0YS5ibGVuZE1vZGUgPSB0aGlzLmRhdGEuYm07XG4gICAgICAgIHZhciBibGVuZE1vZGVWYWx1ZSA9IGdldEJsZW5kTW9kZSh0aGlzLmRhdGEuYm0pO1xuICAgICAgICBnbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gYmxlbmRNb2RlVmFsdWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBjcmVhdGVSZW5kZXJhYmxlQ29tcG9uZW50czogZnVuY3Rpb24gY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHMoKSB7XG4gICAgICB0aGlzLm1hc2tNYW5hZ2VyID0gbmV3IENWTWFza0VsZW1lbnQodGhpcy5kYXRhLCB0aGlzKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtRWZmZWN0cyA9IHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyLmdldEVmZmVjdHMoZWZmZWN0VHlwZXMuVFJBTlNGT1JNX0VGRkVDVCk7XG4gICAgfSxcbiAgICBoaWRlRWxlbWVudDogZnVuY3Rpb24gaGlkZUVsZW1lbnQoKSB7XG4gICAgICBpZiAoIXRoaXMuaGlkZGVuICYmICghdGhpcy5pc0luUmFuZ2UgfHwgdGhpcy5pc1RyYW5zcGFyZW50KSkge1xuICAgICAgICB0aGlzLmhpZGRlbiA9IHRydWU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzaG93RWxlbWVudDogZnVuY3Rpb24gc2hvd0VsZW1lbnQoKSB7XG4gICAgICBpZiAodGhpcy5pc0luUmFuZ2UgJiYgIXRoaXMuaXNUcmFuc3BhcmVudCkge1xuICAgICAgICB0aGlzLmhpZGRlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgICAgICB0aGlzLm1hc2tNYW5hZ2VyLl9pc0ZpcnN0RnJhbWUgPSB0cnVlO1xuICAgICAgfVxuICAgIH0sXG4gICAgY2xlYXJDYW52YXM6IGZ1bmN0aW9uIGNsZWFyQ2FudmFzKGNhbnZhc0NvbnRleHQpIHtcbiAgICAgIGNhbnZhc0NvbnRleHQuY2xlYXJSZWN0KHRoaXMudHJhbnNmb3JtQ2FudmFzLnR4LCB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSwgdGhpcy50cmFuc2Zvcm1DYW52YXMudyAqIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN4LCB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oICogdGhpcy50cmFuc2Zvcm1DYW52YXMuc3kpO1xuICAgIH0sXG4gICAgcHJlcGFyZUxheWVyOiBmdW5jdGlvbiBwcmVwYXJlTGF5ZXIoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDEpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyc1swXTtcbiAgICAgICAgdmFyIGJ1ZmZlckN0eCA9IGJ1ZmZlci5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKGJ1ZmZlckN0eCk7IC8vIG9uIHRoZSBmaXJzdCBidWZmZXIgd2Ugc3RvcmUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGdsb2JhbCBkcmF3aW5nXG5cbiAgICAgICAgYnVmZmVyQ3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLCAwLCAwKTsgLy8gVGhlIG5leHQgZm91ciBsaW5lcyBhcmUgdG8gY2xlYXIgdGhlIGNhbnZhc1xuICAgICAgICAvLyBUT0RPOiBDaGVjayBpZiB0aGVyZSBpcyBhIHdheSB0byBjbGVhciB0aGUgY2FudmFzIHdpdGhvdXQgcmVzZXR0aW5nIHRoZSB0cmFuc2Zvcm1cblxuICAgICAgICB0aGlzLmN1cnJlbnRUcmFuc2Zvcm0gPSB0aGlzLmNhbnZhc0NvbnRleHQuZ2V0VHJhbnNmb3JtKCk7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgICAgIHRoaXMuY2xlYXJDYW52YXModGhpcy5jYW52YXNDb250ZXh0KTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSh0aGlzLmN1cnJlbnRUcmFuc2Zvcm0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhpdExheWVyOiBmdW5jdGlvbiBleGl0TGF5ZXIoKSB7XG4gICAgICBpZiAodGhpcy5kYXRhLnR0ID49IDEpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IHRoaXMuYnVmZmVyc1sxXTsgLy8gT24gdGhlIHNlY29uZCBidWZmZXIgd2Ugc3RvcmUgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGdsb2JhbCBkcmF3aW5nXG4gICAgICAgIC8vIHRoYXQgb25seSBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGlzIGxheWVyXG4gICAgICAgIC8vIChpZiBpdCBpcyBhIGNvbXBvc2l0aW9uLCBpdCBhbHNvIGluY2x1ZGVzIHRoZSBuZXN0ZWQgbGF5ZXJzKVxuXG4gICAgICAgIHZhciBidWZmZXJDdHggPSBidWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdGhpcy5jbGVhckNhbnZhcyhidWZmZXJDdHgpO1xuICAgICAgICBidWZmZXJDdHguZHJhd0ltYWdlKHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMsIDAsIDApOyAvLyBXZSBjbGVhciB0aGUgY2FudmFzIGFnYWluXG5cbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKTtcbiAgICAgICAgdGhpcy5jbGVhckNhbnZhcyh0aGlzLmNhbnZhc0NvbnRleHQpO1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKHRoaXMuY3VycmVudFRyYW5zZm9ybSk7IC8vIFdlIGRyYXcgdGhlIG1hc2tcblxuICAgICAgICB2YXIgbWFzayA9IHRoaXMuY29tcC5nZXRFbGVtZW50QnlJZCgndHAnIGluIHRoaXMuZGF0YSA/IHRoaXMuZGF0YS50cCA6IHRoaXMuZGF0YS5pbmQgLSAxKTtcbiAgICAgICAgbWFzay5yZW5kZXJGcmFtZSh0cnVlKTsgLy8gV2UgZHJhdyB0aGUgc2Vjb25kIGJ1ZmZlciAodGhhdCBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGlzIGxheWVyKVxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7IC8vIElmIHRoZSBtYXNrIGlzIGEgTHVtYSBtYXR0ZSwgd2UgbmVlZCB0byBkbyB0d28gZXh0cmEgcGFpbnRpbmcgb3BlcmF0aW9uc1xuICAgICAgICAvLyB0aGUgX2lzUHJveHkgY2hlY2sgaXMgdG8gYXZvaWQgZHJhd2luZyBhIGZha2UgY2FudmFzIGluIHdvcmtlcnMgdGhhdCB3aWxsIHRocm93IGFuIGVycm9yXG5cbiAgICAgICAgaWYgKHRoaXMuZGF0YS50dCA+PSAzICYmICFkb2N1bWVudC5faXNQcm94eSkge1xuICAgICAgICAgIC8vIFdlIGNvcHkgdGhlIHBhaW50ZWQgbWFzayB0byBhIGJ1ZmZlciB0aGF0IGhhcyBhIGNvbG9yIG1hdHJpeCBmaWx0ZXIgYXBwbGllZCB0byBpdFxuICAgICAgICAgIC8vIHRoYXQgYXBwbGllcyB0aGUgcmdiIHZhbHVlcyB0byB0aGUgYWxwaGEgY2hhbm5lbFxuICAgICAgICAgIHZhciBsdW1hQnVmZmVyID0gYXNzZXRMb2FkZXIuZ2V0THVtYUNhbnZhcyh0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzKTtcbiAgICAgICAgICB2YXIgbHVtYUJ1ZmZlckN0eCA9IGx1bWFCdWZmZXIuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICBsdW1hQnVmZmVyQ3R4LmRyYXdJbWFnZSh0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLCAwLCAwKTtcbiAgICAgICAgICB0aGlzLmNsZWFyQ2FudmFzKHRoaXMuY2FudmFzQ29udGV4dCk7IC8vIHdlIHJlcGFpbnQgdGhlIGNvbnRleHQgd2l0aCB0aGUgbWFzayBhcHBsaWVkIHRvIGl0XG5cbiAgICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuZHJhd0ltYWdlKGx1bWFCdWZmZXIsIDAsIDApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IG9wZXJhdGlvbnNNYXBbdGhpcy5kYXRhLnR0XTtcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmRyYXdJbWFnZShidWZmZXIsIDAsIDApOyAvLyBXZSBmaW5hbGx5IGRyYXcgdGhlIGZpcnN0IGJ1ZmZlciAodGhhdCBjb250YWlucyB0aGUgY29udGVudCBvZiB0aGUgZ2xvYmFsIGRyYXdpbmcpXG4gICAgICAgIC8vIFdlIHVzZSBkZXN0aW5hdGlvbi1vdmVyIHRvIGRyYXcgdGhlIGdsb2JhbCBkcmF3aW5nIGJlbG93IHRoZSBjdXJyZW50IGxheWVyXG5cbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdkZXN0aW5hdGlvbi1vdmVyJztcbiAgICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmRyYXdJbWFnZSh0aGlzLmJ1ZmZlcnNbMF0sIDAsIDApO1xuICAgICAgICB0aGlzLmNhbnZhc0NvbnRleHQuc2V0VHJhbnNmb3JtKHRoaXMuY3VycmVudFRyYW5zZm9ybSk7IC8vIFdlIHJlc2V0IHRoZSBnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gdG8gc291cmNlLW92ZXIsIHRoZSBzdGFuZGFyZCB0eXBlIG9mIG9wZXJhdGlvblxuXG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVuZGVyRnJhbWU6IGZ1bmN0aW9uIHJlbmRlckZyYW1lKGZvcmNlUmVuZGVyKSB7XG4gICAgICBpZiAodGhpcy5oaWRkZW4gfHwgdGhpcy5kYXRhLmhkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS50ZCA9PT0gMSAmJiAhZm9yY2VSZW5kZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlclRyYW5zZm9ybSgpO1xuICAgICAgdGhpcy5yZW5kZXJSZW5kZXJhYmxlKCk7XG4gICAgICB0aGlzLnJlbmRlckxvY2FsVHJhbnNmb3JtKCk7XG4gICAgICB0aGlzLnNldEJsZW5kTW9kZSgpO1xuICAgICAgdmFyIGZvcmNlUmVhbFN0YWNrID0gdGhpcy5kYXRhLnR5ID09PSAwO1xuICAgICAgdGhpcy5wcmVwYXJlTGF5ZXIoKTtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5zYXZlKGZvcmNlUmVhbFN0YWNrKTtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhUcmFuc2Zvcm0odGhpcy5maW5hbFRyYW5zZm9ybS5sb2NhbE1hdC5wcm9wcyk7XG4gICAgICB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXIuY3R4T3BhY2l0eSh0aGlzLmZpbmFsVHJhbnNmb3JtLmxvY2FsT3BhY2l0eSk7XG4gICAgICB0aGlzLnJlbmRlcklubmVyQ29udGVudCgpO1xuICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLnJlc3RvcmUoZm9yY2VSZWFsU3RhY2spO1xuICAgICAgdGhpcy5leGl0TGF5ZXIoKTtcblxuICAgICAgaWYgKHRoaXMubWFza01hbmFnZXIuaGFzTWFza3MpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLnJlc3RvcmUodHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgICAgdGhpcy5faXNGaXJzdEZyYW1lID0gZmFsc2U7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0ID0gbnVsbDtcbiAgICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgICB0aGlzLmdsb2JhbERhdGEgPSBudWxsO1xuICAgICAgdGhpcy5tYXNrTWFuYWdlci5kZXN0cm95KCk7XG4gICAgfSxcbiAgICBtSGVscGVyOiBuZXcgTWF0cml4KClcbiAgfTtcbiAgQ1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuaGlkZSA9IENWQmFzZUVsZW1lbnQucHJvdG90eXBlLmhpZGVFbGVtZW50O1xuICBDVkJhc2VFbGVtZW50LnByb3RvdHlwZS5zaG93ID0gQ1ZCYXNlRWxlbWVudC5wcm90b3R5cGUuc2hvd0VsZW1lbnQ7XG5cbiAgZnVuY3Rpb24gQ1ZTaGFwZURhdGEoZWxlbWVudCwgZGF0YSwgc3R5bGVzLCB0cmFuc2Zvcm1zTWFuYWdlcikge1xuICAgIHRoaXMuc3R5bGVkU2hhcGVzID0gW107XG4gICAgdGhpcy50ciA9IFswLCAwLCAwLCAwLCAwLCAwXTtcbiAgICB2YXIgdHkgPSA0O1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdyYycpIHtcbiAgICAgIHR5ID0gNTtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdlbCcpIHtcbiAgICAgIHR5ID0gNjtcbiAgICB9IGVsc2UgaWYgKGRhdGEudHkgPT09ICdzcicpIHtcbiAgICAgIHR5ID0gNztcbiAgICB9XG5cbiAgICB0aGlzLnNoID0gU2hhcGVQcm9wZXJ0eUZhY3RvcnkuZ2V0U2hhcGVQcm9wKGVsZW1lbnQsIGRhdGEsIHR5LCBlbGVtZW50KTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc3R5bGVzLmxlbmd0aDtcbiAgICB2YXIgc3R5bGVkU2hhcGU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICghc3R5bGVzW2ldLmNsb3NlZCkge1xuICAgICAgICBzdHlsZWRTaGFwZSA9IHtcbiAgICAgICAgICB0cmFuc2Zvcm1zOiB0cmFuc2Zvcm1zTWFuYWdlci5hZGRUcmFuc2Zvcm1TZXF1ZW5jZShzdHlsZXNbaV0udHJhbnNmb3JtcyksXG4gICAgICAgICAgdHJOb2RlczogW11cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zdHlsZWRTaGFwZXMucHVzaChzdHlsZWRTaGFwZSk7XG4gICAgICAgIHN0eWxlc1tpXS5lbGVtZW50cy5wdXNoKHN0eWxlZFNoYXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBDVlNoYXBlRGF0YS5wcm90b3R5cGUuc2V0QXNBbmltYXRlZCA9IFNWR1NoYXBlRGF0YS5wcm90b3R5cGUuc2V0QXNBbmltYXRlZDtcblxuICBmdW5jdGlvbiBDVlNoYXBlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5zaGFwZXMgPSBbXTtcbiAgICB0aGlzLnNoYXBlc0RhdGEgPSBkYXRhLnNoYXBlcztcbiAgICB0aGlzLnN0eWxlc0xpc3QgPSBbXTtcbiAgICB0aGlzLml0ZW1zRGF0YSA9IFtdO1xuICAgIHRoaXMucHJldlZpZXdEYXRhID0gW107XG4gICAgdGhpcy5zaGFwZU1vZGlmaWVycyA9IFtdO1xuICAgIHRoaXMucHJvY2Vzc2VkRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyID0gbmV3IFNoYXBlVHJhbnNmb3JtTWFuYWdlcigpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBJU2hhcGVFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgQ1ZTaGFwZUVsZW1lbnQpO1xuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBSZW5kZXJhYmxlRE9NRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQ7XG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS50cmFuc2Zvcm1IZWxwZXIgPSB7XG4gICAgb3BhY2l0eTogMSxcbiAgICBfb3BNZGY6IGZhbHNlXG4gIH07XG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5kYXNoUmVzZXR0ZXIgPSBbXTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLnByZXZWaWV3RGF0YSwgdHJ1ZSwgW10pO1xuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVTdHlsZUVsZW1lbnQgPSBmdW5jdGlvbiAoZGF0YSwgdHJhbnNmb3Jtcykge1xuICAgIHZhciBzdHlsZUVsZW0gPSB7XG4gICAgICBkYXRhOiBkYXRhLFxuICAgICAgdHlwZTogZGF0YS50eSxcbiAgICAgIHByZVRyYW5zZm9ybXM6IHRoaXMudHJhbnNmb3Jtc01hbmFnZXIuYWRkVHJhbnNmb3JtU2VxdWVuY2UodHJhbnNmb3JtcyksXG4gICAgICB0cmFuc2Zvcm1zOiBbXSxcbiAgICAgIGVsZW1lbnRzOiBbXSxcbiAgICAgIGNsb3NlZDogZGF0YS5oZCA9PT0gdHJ1ZVxuICAgIH07XG4gICAgdmFyIGVsZW1lbnREYXRhID0ge307XG5cbiAgICBpZiAoZGF0YS50eSA9PT0gJ2ZsJyB8fCBkYXRhLnR5ID09PSAnc3QnKSB7XG4gICAgICBlbGVtZW50RGF0YS5jID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5jLCAxLCAyNTUsIHRoaXMpO1xuXG4gICAgICBpZiAoIWVsZW1lbnREYXRhLmMuaykge1xuICAgICAgICBzdHlsZUVsZW0uY28gPSAncmdiKCcgKyBibUZsb29yKGVsZW1lbnREYXRhLmMudlswXSkgKyAnLCcgKyBibUZsb29yKGVsZW1lbnREYXRhLmMudlsxXSkgKyAnLCcgKyBibUZsb29yKGVsZW1lbnREYXRhLmMudlsyXSkgKyAnKSc7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChkYXRhLnR5ID09PSAnZ2YnIHx8IGRhdGEudHkgPT09ICdncycpIHtcbiAgICAgIGVsZW1lbnREYXRhLnMgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLnMsIDEsIG51bGwsIHRoaXMpO1xuICAgICAgZWxlbWVudERhdGEuZSA9IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEuZSwgMSwgbnVsbCwgdGhpcyk7XG4gICAgICBlbGVtZW50RGF0YS5oID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5oIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgMC4wMSwgdGhpcyk7XG4gICAgICBlbGVtZW50RGF0YS5hID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5hIHx8IHtcbiAgICAgICAgazogMFxuICAgICAgfSwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICAgIGVsZW1lbnREYXRhLmcgPSBuZXcgR3JhZGllbnRQcm9wZXJ0eSh0aGlzLCBkYXRhLmcsIHRoaXMpO1xuICAgIH1cblxuICAgIGVsZW1lbnREYXRhLm8gPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLm8sIDAsIDAuMDEsIHRoaXMpO1xuXG4gICAgaWYgKGRhdGEudHkgPT09ICdzdCcgfHwgZGF0YS50eSA9PT0gJ2dzJykge1xuICAgICAgc3R5bGVFbGVtLmxjID0gbGluZUNhcEVudW1bZGF0YS5sYyB8fCAyXTtcbiAgICAgIHN0eWxlRWxlbS5saiA9IGxpbmVKb2luRW51bVtkYXRhLmxqIHx8IDJdO1xuXG4gICAgICBpZiAoZGF0YS5saiA9PSAxKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgIHN0eWxlRWxlbS5tbCA9IGRhdGEubWw7XG4gICAgICB9XG5cbiAgICAgIGVsZW1lbnREYXRhLncgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLncsIDAsIG51bGwsIHRoaXMpO1xuXG4gICAgICBpZiAoIWVsZW1lbnREYXRhLncuaykge1xuICAgICAgICBzdHlsZUVsZW0ud2kgPSBlbGVtZW50RGF0YS53LnY7XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhLmQpIHtcbiAgICAgICAgdmFyIGQgPSBuZXcgRGFzaFByb3BlcnR5KHRoaXMsIGRhdGEuZCwgJ2NhbnZhcycsIHRoaXMpO1xuICAgICAgICBlbGVtZW50RGF0YS5kID0gZDtcblxuICAgICAgICBpZiAoIWVsZW1lbnREYXRhLmQuaykge1xuICAgICAgICAgIHN0eWxlRWxlbS5kYSA9IGVsZW1lbnREYXRhLmQuZGFzaEFycmF5O1xuICAgICAgICAgIHN0eWxlRWxlbVtcImRvXCJdID0gZWxlbWVudERhdGEuZC5kYXNob2Zmc2V0WzBdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlRWxlbS5yID0gZGF0YS5yID09PSAyID8gJ2V2ZW5vZGQnIDogJ25vbnplcm8nO1xuICAgIH1cblxuICAgIHRoaXMuc3R5bGVzTGlzdC5wdXNoKHN0eWxlRWxlbSk7XG4gICAgZWxlbWVudERhdGEuc3R5bGUgPSBzdHlsZUVsZW07XG4gICAgcmV0dXJuIGVsZW1lbnREYXRhO1xuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVHcm91cEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnREYXRhID0ge1xuICAgICAgaXQ6IFtdLFxuICAgICAgcHJldlZpZXdEYXRhOiBbXVxuICAgIH07XG4gICAgcmV0dXJuIGVsZW1lbnREYXRhO1xuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVUcmFuc2Zvcm1FbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZWxlbWVudERhdGEgPSB7XG4gICAgICB0cmFuc2Zvcm06IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgX29wTWRmOiBmYWxzZSxcbiAgICAgICAga2V5OiB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLmdldE5ld0tleSgpLFxuICAgICAgICBvcDogUHJvcGVydHlGYWN0b3J5LmdldFByb3AodGhpcywgZGF0YS5vLCAwLCAwLjAxLCB0aGlzKSxcbiAgICAgICAgbVByb3BzOiBUcmFuc2Zvcm1Qcm9wZXJ0eUZhY3RvcnkuZ2V0VHJhbnNmb3JtUHJvcGVydHkodGhpcywgZGF0YSwgdGhpcylcbiAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlU2hhcGVFbGVtZW50ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2YXIgZWxlbWVudERhdGEgPSBuZXcgQ1ZTaGFwZURhdGEodGhpcywgZGF0YSwgdGhpcy5zdHlsZXNMaXN0LCB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyKTtcbiAgICB0aGlzLnNoYXBlcy5wdXNoKGVsZW1lbnREYXRhKTtcbiAgICB0aGlzLmFkZFNoYXBlVG9Nb2RpZmllcnMoZWxlbWVudERhdGEpO1xuICAgIHJldHVybiBlbGVtZW50RGF0YTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVsb2FkU2hhcGVzID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuaXRlbXNEYXRhLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgdGhpcy5wcmV2Vmlld0RhdGFbaV0gPSB0aGlzLml0ZW1zRGF0YVtpXTtcbiAgICB9XG5cbiAgICB0aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLnByZXZWaWV3RGF0YSwgdHJ1ZSwgW10pO1xuICAgIGxlbiA9IHRoaXMuZHluYW1pY1Byb3BlcnRpZXMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICB0aGlzLmR5bmFtaWNQcm9wZXJ0aWVzW2ldLmdldFZhbHVlKCk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJNb2RpZmllcnMoKTtcbiAgICB0aGlzLnRyYW5zZm9ybXNNYW5hZ2VyLnByb2Nlc3NTZXF1ZW5jZXModGhpcy5faXNGaXJzdEZyYW1lKTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUuYWRkVHJhbnNmb3JtVG9TdHlsZUxpc3QgPSBmdW5jdGlvbiAodHJhbnNmb3JtKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICghdGhpcy5zdHlsZXNMaXN0W2ldLmNsb3NlZCkge1xuICAgICAgICB0aGlzLnN0eWxlc0xpc3RbaV0udHJhbnNmb3Jtcy5wdXNoKHRyYW5zZm9ybSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW1vdmVUcmFuc2Zvcm1Gcm9tU3R5bGVMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLnN0eWxlc0xpc3QubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoIXRoaXMuc3R5bGVzTGlzdFtpXS5jbG9zZWQpIHtcbiAgICAgICAgdGhpcy5zdHlsZXNMaXN0W2ldLnRyYW5zZm9ybXMucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jbG9zZVN0eWxlcyA9IGZ1bmN0aW9uIChzdHlsZXMpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gc3R5bGVzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgc3R5bGVzW2ldLmNsb3NlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5zZWFyY2hTaGFwZXMgPSBmdW5jdGlvbiAoYXJyLCBpdGVtc0RhdGEsIHByZXZWaWV3RGF0YSwgc2hvdWxkUmVuZGVyLCB0cmFuc2Zvcm1zKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGFyci5sZW5ndGggLSAxO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBvd25TdHlsZXMgPSBbXTtcbiAgICB2YXIgb3duTW9kaWZpZXJzID0gW107XG4gICAgdmFyIHByb2Nlc3NlZFBvcztcbiAgICB2YXIgbW9kaWZpZXI7XG4gICAgdmFyIGN1cnJlbnRUcmFuc2Zvcm07XG4gICAgdmFyIG93blRyYW5zZm9ybXMgPSBbXS5jb25jYXQodHJhbnNmb3Jtcyk7XG5cbiAgICBmb3IgKGkgPSBsZW47IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBwcm9jZXNzZWRQb3MgPSB0aGlzLnNlYXJjaFByb2Nlc3NlZEVsZW1lbnQoYXJyW2ldKTtcblxuICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgYXJyW2ldLl9zaG91bGRSZW5kZXIgPSBzaG91bGRSZW5kZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpdGVtc0RhdGFbaV0gPSBwcmV2Vmlld0RhdGFbcHJvY2Vzc2VkUG9zIC0gMV07XG4gICAgICB9XG5cbiAgICAgIGlmIChhcnJbaV0udHkgPT09ICdmbCcgfHwgYXJyW2ldLnR5ID09PSAnc3QnIHx8IGFycltpXS50eSA9PT0gJ2dmJyB8fCBhcnJbaV0udHkgPT09ICdncycpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBpdGVtc0RhdGFbaV0gPSB0aGlzLmNyZWF0ZVN0eWxlRWxlbWVudChhcnJbaV0sIG93blRyYW5zZm9ybXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXS5zdHlsZS5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG93blN0eWxlcy5wdXNoKGl0ZW1zRGF0YVtpXS5zdHlsZSk7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlR3JvdXBFbGVtZW50KGFycltpXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgakxlbiA9IGl0ZW1zRGF0YVtpXS5pdC5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgICAgICBpdGVtc0RhdGFbaV0ucHJldlZpZXdEYXRhW2pdID0gaXRlbXNEYXRhW2ldLml0W2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VhcmNoU2hhcGVzKGFycltpXS5pdCwgaXRlbXNEYXRhW2ldLml0LCBpdGVtc0RhdGFbaV0ucHJldlZpZXdEYXRhLCBzaG91bGRSZW5kZXIsIG93blRyYW5zZm9ybXMpO1xuICAgICAgfSBlbHNlIGlmIChhcnJbaV0udHkgPT09ICd0cicpIHtcbiAgICAgICAgaWYgKCFwcm9jZXNzZWRQb3MpIHtcbiAgICAgICAgICBjdXJyZW50VHJhbnNmb3JtID0gdGhpcy5jcmVhdGVUcmFuc2Zvcm1FbGVtZW50KGFycltpXSk7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gY3VycmVudFRyYW5zZm9ybTtcbiAgICAgICAgfVxuXG4gICAgICAgIG93blRyYW5zZm9ybXMucHVzaChpdGVtc0RhdGFbaV0pO1xuICAgICAgICB0aGlzLmFkZFRyYW5zZm9ybVRvU3R5bGVMaXN0KGl0ZW1zRGF0YVtpXSk7XG4gICAgICB9IGVsc2UgaWYgKGFycltpXS50eSA9PT0gJ3NoJyB8fCBhcnJbaV0udHkgPT09ICdyYycgfHwgYXJyW2ldLnR5ID09PSAnZWwnIHx8IGFycltpXS50eSA9PT0gJ3NyJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IHRoaXMuY3JlYXRlU2hhcGVFbGVtZW50KGFycltpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAndG0nIHx8IGFycltpXS50eSA9PT0gJ3JkJyB8fCBhcnJbaV0udHkgPT09ICdwYicgfHwgYXJyW2ldLnR5ID09PSAnenonIHx8IGFycltpXS50eSA9PT0gJ29wJykge1xuICAgICAgICBpZiAoIXByb2Nlc3NlZFBvcykge1xuICAgICAgICAgIG1vZGlmaWVyID0gU2hhcGVNb2RpZmllcnMuZ2V0TW9kaWZpZXIoYXJyW2ldLnR5KTtcbiAgICAgICAgICBtb2RpZmllci5pbml0KHRoaXMsIGFycltpXSk7XG4gICAgICAgICAgaXRlbXNEYXRhW2ldID0gbW9kaWZpZXI7XG4gICAgICAgICAgdGhpcy5zaGFwZU1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb2RpZmllciA9IGl0ZW1zRGF0YVtpXTtcbiAgICAgICAgICBtb2RpZmllci5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG93bk1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgIH0gZWxzZSBpZiAoYXJyW2ldLnR5ID09PSAncnAnKSB7XG4gICAgICAgIGlmICghcHJvY2Vzc2VkUG9zKSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBTaGFwZU1vZGlmaWVycy5nZXRNb2RpZmllcihhcnJbaV0udHkpO1xuICAgICAgICAgIGl0ZW1zRGF0YVtpXSA9IG1vZGlmaWVyO1xuICAgICAgICAgIG1vZGlmaWVyLmluaXQodGhpcywgYXJyLCBpLCBpdGVtc0RhdGEpO1xuICAgICAgICAgIHRoaXMuc2hhcGVNb2RpZmllcnMucHVzaChtb2RpZmllcik7XG4gICAgICAgICAgc2hvdWxkUmVuZGVyID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbW9kaWZpZXIgPSBpdGVtc0RhdGFbaV07XG4gICAgICAgICAgbW9kaWZpZXIuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIG93bk1vZGlmaWVycy5wdXNoKG1vZGlmaWVyKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5hZGRQcm9jZXNzZWRFbGVtZW50KGFycltpXSwgaSArIDEpO1xuICAgIH1cblxuICAgIHRoaXMucmVtb3ZlVHJhbnNmb3JtRnJvbVN0eWxlTGlzdCgpO1xuICAgIHRoaXMuY2xvc2VTdHlsZXMob3duU3R5bGVzKTtcbiAgICBsZW4gPSBvd25Nb2RpZmllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBvd25Nb2RpZmllcnNbaV0uY2xvc2VkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnRyYW5zZm9ybUhlbHBlci5vcGFjaXR5ID0gMTtcbiAgICB0aGlzLnRyYW5zZm9ybUhlbHBlci5fb3BNZGYgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlck1vZGlmaWVycygpO1xuICAgIHRoaXMudHJhbnNmb3Jtc01hbmFnZXIucHJvY2Vzc1NlcXVlbmNlcyh0aGlzLl9pc0ZpcnN0RnJhbWUpO1xuICAgIHRoaXMucmVuZGVyU2hhcGUodGhpcy50cmFuc2Zvcm1IZWxwZXIsIHRoaXMuc2hhcGVzRGF0YSwgdGhpcy5pdGVtc0RhdGEsIHRydWUpO1xuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJTaGFwZVRyYW5zZm9ybSA9IGZ1bmN0aW9uIChwYXJlbnRUcmFuc2Zvcm0sIGdyb3VwVHJhbnNmb3JtKSB7XG4gICAgaWYgKHBhcmVudFRyYW5zZm9ybS5fb3BNZGYgfHwgZ3JvdXBUcmFuc2Zvcm0ub3AuX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHkgPSBwYXJlbnRUcmFuc2Zvcm0ub3BhY2l0eTtcbiAgICAgIGdyb3VwVHJhbnNmb3JtLm9wYWNpdHkgKj0gZ3JvdXBUcmFuc2Zvcm0ub3AudjtcbiAgICAgIGdyb3VwVHJhbnNmb3JtLl9vcE1kZiA9IHRydWU7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5kcmF3TGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMuc3R5bGVzTGlzdC5sZW5ndGg7XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGs7XG4gICAgdmFyIGtMZW47XG4gICAgdmFyIGVsZW1zO1xuICAgIHZhciBub2RlcztcbiAgICB2YXIgcmVuZGVyZXIgPSB0aGlzLmdsb2JhbERhdGEucmVuZGVyZXI7XG4gICAgdmFyIGN0eCA9IHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0O1xuICAgIHZhciB0eXBlO1xuICAgIHZhciBjdXJyZW50U3R5bGU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGN1cnJlbnRTdHlsZSA9IHRoaXMuc3R5bGVzTGlzdFtpXTtcbiAgICAgIHR5cGUgPSBjdXJyZW50U3R5bGUudHlwZTsgLy8gU2tpcHBpbmcgc3R5bGUgd2hlblxuICAgICAgLy8gU3Ryb2tlIHdpZHRoIGVxdWFscyAwXG4gICAgICAvLyBzdHlsZSBzaG91bGQgbm90IGJlIHJlbmRlcmVkIChleHRyYSB1bnVzZWQgcmVwZWF0ZXJzKVxuICAgICAgLy8gY3VycmVudCBvcGFjaXR5IGVxdWFscyAwXG4gICAgICAvLyBnbG9iYWwgb3BhY2l0eSBlcXVhbHMgMFxuXG4gICAgICBpZiAoISgodHlwZSA9PT0gJ3N0JyB8fCB0eXBlID09PSAnZ3MnKSAmJiBjdXJyZW50U3R5bGUud2kgPT09IDAgfHwgIWN1cnJlbnRTdHlsZS5kYXRhLl9zaG91bGRSZW5kZXIgfHwgY3VycmVudFN0eWxlLmNvT3AgPT09IDAgfHwgdGhpcy5nbG9iYWxEYXRhLmN1cnJlbnRHbG9iYWxBbHBoYSA9PT0gMCkpIHtcbiAgICAgICAgcmVuZGVyZXIuc2F2ZSgpO1xuICAgICAgICBlbGVtcyA9IGN1cnJlbnRTdHlsZS5lbGVtZW50cztcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ3N0JyB8fCB0eXBlID09PSAnZ3MnKSB7XG4gICAgICAgICAgcmVuZGVyZXIuY3R4U3Ryb2tlU3R5bGUodHlwZSA9PT0gJ3N0JyA/IGN1cnJlbnRTdHlsZS5jbyA6IGN1cnJlbnRTdHlsZS5ncmQpOyAvLyBjdHguc3Ryb2tlU3R5bGUgPSB0eXBlID09PSAnc3QnID8gY3VycmVudFN0eWxlLmNvIDogY3VycmVudFN0eWxlLmdyZDtcblxuICAgICAgICAgIHJlbmRlcmVyLmN0eExpbmVXaWR0aChjdXJyZW50U3R5bGUud2kpOyAvLyBjdHgubGluZVdpZHRoID0gY3VycmVudFN0eWxlLndpO1xuXG4gICAgICAgICAgcmVuZGVyZXIuY3R4TGluZUNhcChjdXJyZW50U3R5bGUubGMpOyAvLyBjdHgubGluZUNhcCA9IGN1cnJlbnRTdHlsZS5sYztcblxuICAgICAgICAgIHJlbmRlcmVyLmN0eExpbmVKb2luKGN1cnJlbnRTdHlsZS5saik7IC8vIGN0eC5saW5lSm9pbiA9IGN1cnJlbnRTdHlsZS5sajtcblxuICAgICAgICAgIHJlbmRlcmVyLmN0eE1pdGVyTGltaXQoY3VycmVudFN0eWxlLm1sIHx8IDApOyAvLyBjdHgubWl0ZXJMaW1pdCA9IGN1cnJlbnRTdHlsZS5tbCB8fCAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlbmRlcmVyLmN0eEZpbGxTdHlsZSh0eXBlID09PSAnZmwnID8gY3VycmVudFN0eWxlLmNvIDogY3VycmVudFN0eWxlLmdyZCk7IC8vIGN0eC5maWxsU3R5bGUgPSB0eXBlID09PSAnZmwnID8gY3VycmVudFN0eWxlLmNvIDogY3VycmVudFN0eWxlLmdyZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcmVyLmN0eE9wYWNpdHkoY3VycmVudFN0eWxlLmNvT3ApO1xuXG4gICAgICAgIGlmICh0eXBlICE9PSAnc3QnICYmIHR5cGUgIT09ICdncycpIHtcbiAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJlci5jdHhUcmFuc2Zvcm0oY3VycmVudFN0eWxlLnByZVRyYW5zZm9ybXMuZmluYWxUcmFuc2Zvcm0ucHJvcHMpO1xuICAgICAgICBqTGVuID0gZWxlbXMubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ3N0JyB8fCB0eXBlID09PSAnZ3MnKSB7XG4gICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50U3R5bGUuZGEpIHtcbiAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKGN1cnJlbnRTdHlsZS5kYSk7XG4gICAgICAgICAgICAgIGN0eC5saW5lRGFzaE9mZnNldCA9IGN1cnJlbnRTdHlsZVtcImRvXCJdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5vZGVzID0gZWxlbXNbal0udHJOb2RlcztcbiAgICAgICAgICBrTGVuID0gbm9kZXMubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChrID0gMDsgayA8IGtMZW47IGsgKz0gMSkge1xuICAgICAgICAgICAgaWYgKG5vZGVzW2tdLnQgPT09ICdtJykge1xuICAgICAgICAgICAgICBjdHgubW92ZVRvKG5vZGVzW2tdLnBbMF0sIG5vZGVzW2tdLnBbMV0pO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChub2Rlc1trXS50ID09PSAnYycpIHtcbiAgICAgICAgICAgICAgY3R4LmJlemllckN1cnZlVG8obm9kZXNba10ucHRzWzBdLCBub2Rlc1trXS5wdHNbMV0sIG5vZGVzW2tdLnB0c1syXSwgbm9kZXNba10ucHRzWzNdLCBub2Rlc1trXS5wdHNbNF0sIG5vZGVzW2tdLnB0c1s1XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdzdCcgfHwgdHlwZSA9PT0gJ2dzJykge1xuICAgICAgICAgICAgLy8gY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgcmVuZGVyZXIuY3R4U3Ryb2tlKCk7XG5cbiAgICAgICAgICAgIGlmIChjdXJyZW50U3R5bGUuZGEpIHtcbiAgICAgICAgICAgICAgY3R4LnNldExpbmVEYXNoKHRoaXMuZGFzaFJlc2V0dGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZSAhPT0gJ3N0JyAmJiB0eXBlICE9PSAnZ3MnKSB7XG4gICAgICAgICAgLy8gY3R4LmZpbGwoY3VycmVudFN0eWxlLnIpO1xuICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhGaWxsKGN1cnJlbnRTdHlsZS5yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlcmVyLnJlc3RvcmUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclNoYXBlID0gZnVuY3Rpb24gKHBhcmVudFRyYW5zZm9ybSwgaXRlbXMsIGRhdGEsIGlzTWFpbikge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSBpdGVtcy5sZW5ndGggLSAxO1xuICAgIHZhciBncm91cFRyYW5zZm9ybTtcbiAgICBncm91cFRyYW5zZm9ybSA9IHBhcmVudFRyYW5zZm9ybTtcblxuICAgIGZvciAoaSA9IGxlbjsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmIChpdGVtc1tpXS50eSA9PT0gJ3RyJykge1xuICAgICAgICBncm91cFRyYW5zZm9ybSA9IGRhdGFbaV0udHJhbnNmb3JtO1xuICAgICAgICB0aGlzLnJlbmRlclNoYXBlVHJhbnNmb3JtKHBhcmVudFRyYW5zZm9ybSwgZ3JvdXBUcmFuc2Zvcm0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVtc1tpXS50eSA9PT0gJ3NoJyB8fCBpdGVtc1tpXS50eSA9PT0gJ2VsJyB8fCBpdGVtc1tpXS50eSA9PT0gJ3JjJyB8fCBpdGVtc1tpXS50eSA9PT0gJ3NyJykge1xuICAgICAgICB0aGlzLnJlbmRlclBhdGgoaXRlbXNbaV0sIGRhdGFbaV0pO1xuICAgICAgfSBlbHNlIGlmIChpdGVtc1tpXS50eSA9PT0gJ2ZsJykge1xuICAgICAgICB0aGlzLnJlbmRlckZpbGwoaXRlbXNbaV0sIGRhdGFbaV0sIGdyb3VwVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdzdCcpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTdHJva2UoaXRlbXNbaV0sIGRhdGFbaV0sIGdyb3VwVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdnZicgfHwgaXRlbXNbaV0udHkgPT09ICdncycpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJHcmFkaWVudEZpbGwoaXRlbXNbaV0sIGRhdGFbaV0sIGdyb3VwVHJhbnNmb3JtKTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNbaV0udHkgPT09ICdncicpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTaGFwZShncm91cFRyYW5zZm9ybSwgaXRlbXNbaV0uaXQsIGRhdGFbaV0uaXQpO1xuICAgICAgfSBlbHNlIGlmIChpdGVtc1tpXS50eSA9PT0gJ3RtJykgey8vXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzTWFpbikge1xuICAgICAgdGhpcy5kcmF3TGF5ZXIoKTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlclN0eWxlZFNoYXBlID0gZnVuY3Rpb24gKHN0eWxlZFNoYXBlLCBzaGFwZSkge1xuICAgIGlmICh0aGlzLl9pc0ZpcnN0RnJhbWUgfHwgc2hhcGUuX21kZiB8fCBzdHlsZWRTaGFwZS50cmFuc2Zvcm1zLl9tZGYpIHtcbiAgICAgIHZhciBzaGFwZU5vZGVzID0gc3R5bGVkU2hhcGUudHJOb2RlcztcbiAgICAgIHZhciBwYXRocyA9IHNoYXBlLnBhdGhzO1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuICAgICAgdmFyIGo7XG4gICAgICB2YXIgakxlbiA9IHBhdGhzLl9sZW5ndGg7XG4gICAgICBzaGFwZU5vZGVzLmxlbmd0aCA9IDA7XG4gICAgICB2YXIgZ3JvdXBUcmFuc2Zvcm1NYXQgPSBzdHlsZWRTaGFwZS50cmFuc2Zvcm1zLmZpbmFsVHJhbnNmb3JtO1xuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgakxlbjsgaiArPSAxKSB7XG4gICAgICAgIHZhciBwYXRoTm9kZXMgPSBwYXRocy5zaGFwZXNbal07XG5cbiAgICAgICAgaWYgKHBhdGhOb2RlcyAmJiBwYXRoTm9kZXMudikge1xuICAgICAgICAgIGxlbiA9IHBhdGhOb2Rlcy5fbGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMTsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gMSkge1xuICAgICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICAgIHQ6ICdtJyxcbiAgICAgICAgICAgICAgICBwOiBncm91cFRyYW5zZm9ybU1hdC5hcHBseVRvUG9pbnRBcnJheShwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzaGFwZU5vZGVzLnB1c2goe1xuICAgICAgICAgICAgICB0OiAnYycsXG4gICAgICAgICAgICAgIHB0czogZ3JvdXBUcmFuc2Zvcm1NYXQuYXBwbHlUb1RyaXBsZVBvaW50cyhwYXRoTm9kZXMub1tpIC0gMV0sIHBhdGhOb2Rlcy5pW2ldLCBwYXRoTm9kZXMudltpXSlcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChsZW4gPT09IDEpIHtcbiAgICAgICAgICAgIHNoYXBlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgIHQ6ICdtJyxcbiAgICAgICAgICAgICAgcDogZ3JvdXBUcmFuc2Zvcm1NYXQuYXBwbHlUb1BvaW50QXJyYXkocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHBhdGhOb2Rlcy5jICYmIGxlbikge1xuICAgICAgICAgICAgc2hhcGVOb2Rlcy5wdXNoKHtcbiAgICAgICAgICAgICAgdDogJ2MnLFxuICAgICAgICAgICAgICBwdHM6IGdyb3VwVHJhbnNmb3JtTWF0LmFwcGx5VG9UcmlwbGVQb2ludHMocGF0aE5vZGVzLm9baSAtIDFdLCBwYXRoTm9kZXMuaVswXSwgcGF0aE5vZGVzLnZbMF0pXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHNoYXBlTm9kZXMucHVzaCh7XG4gICAgICAgICAgICAgIHQ6ICd6J1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN0eWxlZFNoYXBlLnRyTm9kZXMgPSBzaGFwZU5vZGVzO1xuICAgIH1cbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyUGF0aCA9IGZ1bmN0aW9uIChwYXRoRGF0YSwgaXRlbURhdGEpIHtcbiAgICBpZiAocGF0aERhdGEuaGQgIT09IHRydWUgJiYgcGF0aERhdGEuX3Nob3VsZFJlbmRlcikge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gaXRlbURhdGEuc3R5bGVkU2hhcGVzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHRoaXMucmVuZGVyU3R5bGVkU2hhcGUoaXRlbURhdGEuc3R5bGVkU2hhcGVzW2ldLCBpdGVtRGF0YS5zaCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJGaWxsID0gZnVuY3Rpb24gKHN0eWxlRGF0YSwgaXRlbURhdGEsIGdyb3VwVHJhbnNmb3JtKSB7XG4gICAgdmFyIHN0eWxlRWxlbSA9IGl0ZW1EYXRhLnN0eWxlO1xuXG4gICAgaWYgKGl0ZW1EYXRhLmMuX21kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jbyA9ICdyZ2IoJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzBdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzFdKSArICcsJyArIGJtRmxvb3IoaXRlbURhdGEuYy52WzJdKSArICcpJztcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEuby5fbWRmIHx8IGdyb3VwVHJhbnNmb3JtLl9vcE1kZiB8fCB0aGlzLl9pc0ZpcnN0RnJhbWUpIHtcbiAgICAgIHN0eWxlRWxlbS5jb09wID0gaXRlbURhdGEuby52ICogZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlckdyYWRpZW50RmlsbCA9IGZ1bmN0aW9uIChzdHlsZURhdGEsIGl0ZW1EYXRhLCBncm91cFRyYW5zZm9ybSkge1xuICAgIHZhciBzdHlsZUVsZW0gPSBpdGVtRGF0YS5zdHlsZTtcbiAgICB2YXIgZ3JkO1xuXG4gICAgaWYgKCFzdHlsZUVsZW0uZ3JkIHx8IGl0ZW1EYXRhLmcuX21kZiB8fCBpdGVtRGF0YS5zLl9tZGYgfHwgaXRlbURhdGEuZS5fbWRmIHx8IHN0eWxlRGF0YS50ICE9PSAxICYmIChpdGVtRGF0YS5oLl9tZGYgfHwgaXRlbURhdGEuYS5fbWRmKSkge1xuICAgICAgdmFyIGN0eCA9IHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0O1xuICAgICAgdmFyIHB0MSA9IGl0ZW1EYXRhLnMudjtcbiAgICAgIHZhciBwdDIgPSBpdGVtRGF0YS5lLnY7XG5cbiAgICAgIGlmIChzdHlsZURhdGEudCA9PT0gMSkge1xuICAgICAgICBncmQgPSBjdHguY3JlYXRlTGluZWFyR3JhZGllbnQocHQxWzBdLCBwdDFbMV0sIHB0MlswXSwgcHQyWzFdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByYWQgPSBNYXRoLnNxcnQoTWF0aC5wb3cocHQxWzBdIC0gcHQyWzBdLCAyKSArIE1hdGgucG93KHB0MVsxXSAtIHB0MlsxXSwgMikpO1xuICAgICAgICB2YXIgYW5nID0gTWF0aC5hdGFuMihwdDJbMV0gLSBwdDFbMV0sIHB0MlswXSAtIHB0MVswXSk7XG4gICAgICAgIHZhciBwZXJjZW50ID0gaXRlbURhdGEuaC52O1xuXG4gICAgICAgIGlmIChwZXJjZW50ID49IDEpIHtcbiAgICAgICAgICBwZXJjZW50ID0gMC45OTtcbiAgICAgICAgfSBlbHNlIGlmIChwZXJjZW50IDw9IC0xKSB7XG4gICAgICAgICAgcGVyY2VudCA9IC0wLjk5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGRpc3QgPSByYWQgKiBwZXJjZW50O1xuICAgICAgICB2YXIgeCA9IE1hdGguY29zKGFuZyArIGl0ZW1EYXRhLmEudikgKiBkaXN0ICsgcHQxWzBdO1xuICAgICAgICB2YXIgeSA9IE1hdGguc2luKGFuZyArIGl0ZW1EYXRhLmEudikgKiBkaXN0ICsgcHQxWzFdO1xuICAgICAgICBncmQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQoeCwgeSwgMCwgcHQxWzBdLCBwdDFbMV0sIHJhZCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHN0eWxlRGF0YS5nLnA7XG4gICAgICB2YXIgY1ZhbHVlcyA9IGl0ZW1EYXRhLmcuYztcbiAgICAgIHZhciBvcGFjaXR5ID0gMTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGlmIChpdGVtRGF0YS5nLl9oYXNPcGFjaXR5ICYmIGl0ZW1EYXRhLmcuX2NvbGxhcHNhYmxlKSB7XG4gICAgICAgICAgb3BhY2l0eSA9IGl0ZW1EYXRhLmcub1tpICogMiArIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgZ3JkLmFkZENvbG9yU3RvcChjVmFsdWVzW2kgKiA0XSAvIDEwMCwgJ3JnYmEoJyArIGNWYWx1ZXNbaSAqIDQgKyAxXSArICcsJyArIGNWYWx1ZXNbaSAqIDQgKyAyXSArICcsJyArIGNWYWx1ZXNbaSAqIDQgKyAzXSArICcsJyArIG9wYWNpdHkgKyAnKScpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZUVsZW0uZ3JkID0gZ3JkO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbS5jb09wID0gaXRlbURhdGEuby52ICogZ3JvdXBUcmFuc2Zvcm0ub3BhY2l0eTtcbiAgfTtcblxuICBDVlNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVyU3Ryb2tlID0gZnVuY3Rpb24gKHN0eWxlRGF0YSwgaXRlbURhdGEsIGdyb3VwVHJhbnNmb3JtKSB7XG4gICAgdmFyIHN0eWxlRWxlbSA9IGl0ZW1EYXRhLnN0eWxlO1xuICAgIHZhciBkID0gaXRlbURhdGEuZDtcblxuICAgIGlmIChkICYmIChkLl9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSkge1xuICAgICAgc3R5bGVFbGVtLmRhID0gZC5kYXNoQXJyYXk7XG4gICAgICBzdHlsZUVsZW1bXCJkb1wiXSA9IGQuZGFzaG9mZnNldFswXTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbURhdGEuYy5fbWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgc3R5bGVFbGVtLmNvID0gJ3JnYignICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMF0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMV0pICsgJywnICsgYm1GbG9vcihpdGVtRGF0YS5jLnZbMl0pICsgJyknO1xuICAgIH1cblxuICAgIGlmIChpdGVtRGF0YS5vLl9tZGYgfHwgZ3JvdXBUcmFuc2Zvcm0uX29wTWRmIHx8IHRoaXMuX2lzRmlyc3RGcmFtZSkge1xuICAgICAgc3R5bGVFbGVtLmNvT3AgPSBpdGVtRGF0YS5vLnYgKiBncm91cFRyYW5zZm9ybS5vcGFjaXR5O1xuICAgIH1cblxuICAgIGlmIChpdGVtRGF0YS53Ll9tZGYgfHwgdGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICBzdHlsZUVsZW0ud2kgPSBpdGVtRGF0YS53LnY7XG4gICAgfVxuICB9O1xuXG4gIENWU2hhcGVFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuc2hhcGVzRGF0YSA9IG51bGw7XG4gICAgdGhpcy5nbG9iYWxEYXRhID0gbnVsbDtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQgPSBudWxsO1xuICAgIHRoaXMuc3R5bGVzTGlzdC5sZW5ndGggPSAwO1xuICAgIHRoaXMuaXRlbXNEYXRhLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZUZXh0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy50ZXh0U3BhbnMgPSBbXTtcbiAgICB0aGlzLnlPZmZzZXQgPSAwO1xuICAgIHRoaXMuZmlsbENvbG9yQW5pbSA9IGZhbHNlO1xuICAgIHRoaXMuc3Ryb2tlQ29sb3JBbmltID0gZmFsc2U7XG4gICAgdGhpcy5zdHJva2VXaWR0aEFuaW0gPSBmYWxzZTtcbiAgICB0aGlzLnN0cm9rZSA9IGZhbHNlO1xuICAgIHRoaXMuZmlsbCA9IGZhbHNlO1xuICAgIHRoaXMuanVzdGlmeU9mZnNldCA9IDA7XG4gICAgdGhpcy5jdXJyZW50UmVuZGVyID0gbnVsbDtcbiAgICB0aGlzLnJlbmRlclR5cGUgPSAnY2FudmFzJztcbiAgICB0aGlzLnZhbHVlcyA9IHtcbiAgICAgIGZpbGw6ICdyZ2JhKDAsMCwwLDApJyxcbiAgICAgIHN0cm9rZTogJ3JnYmEoMCwwLDAsMCknLFxuICAgICAgc1dpZHRoOiAwLFxuICAgICAgZlZhbHVlOiAnJ1xuICAgIH07XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIENWQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnQsIElUZXh0RWxlbWVudF0sIENWVGV4dEVsZW1lbnQpO1xuICBDVlRleHRFbGVtZW50LnByb3RvdHlwZS50SGVscGVyID0gY3JlYXRlVGFnKCdjYW52YXMnKS5nZXRDb250ZXh0KCcyZCcpO1xuXG4gIENWVGV4dEVsZW1lbnQucHJvdG90eXBlLmJ1aWxkTmV3VGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZG9jdW1lbnREYXRhID0gdGhpcy50ZXh0UHJvcGVydHkuY3VycmVudERhdGE7XG4gICAgdGhpcy5yZW5kZXJlZExldHRlcnMgPSBjcmVhdGVTaXplZEFycmF5KGRvY3VtZW50RGF0YS5sID8gZG9jdW1lbnREYXRhLmwubGVuZ3RoIDogMCk7XG4gICAgdmFyIGhhc0ZpbGwgPSBmYWxzZTtcblxuICAgIGlmIChkb2N1bWVudERhdGEuZmMpIHtcbiAgICAgIGhhc0ZpbGwgPSB0cnVlO1xuICAgICAgdGhpcy52YWx1ZXMuZmlsbCA9IHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuZmMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnZhbHVlcy5maWxsID0gJ3JnYmEoMCwwLDAsMCknO1xuICAgIH1cblxuICAgIHRoaXMuZmlsbCA9IGhhc0ZpbGw7XG4gICAgdmFyIGhhc1N0cm9rZSA9IGZhbHNlO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5zYykge1xuICAgICAgaGFzU3Ryb2tlID0gdHJ1ZTtcbiAgICAgIHRoaXMudmFsdWVzLnN0cm9rZSA9IHRoaXMuYnVpbGRDb2xvcihkb2N1bWVudERhdGEuc2MpO1xuICAgICAgdGhpcy52YWx1ZXMuc1dpZHRoID0gZG9jdW1lbnREYXRhLnN3O1xuICAgIH1cblxuICAgIHZhciBmb250RGF0YSA9IHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5nZXRGb250QnlOYW1lKGRvY3VtZW50RGF0YS5mKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBsZXR0ZXJzID0gZG9jdW1lbnREYXRhLmw7XG4gICAgdmFyIG1hdHJpeEhlbHBlciA9IHRoaXMubUhlbHBlcjtcbiAgICB0aGlzLnN0cm9rZSA9IGhhc1N0cm9rZTtcbiAgICB0aGlzLnZhbHVlcy5mVmFsdWUgPSBkb2N1bWVudERhdGEuZmluYWxTaXplICsgJ3B4ICcgKyB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseTtcbiAgICBsZW4gPSBkb2N1bWVudERhdGEuZmluYWxUZXh0Lmxlbmd0aDsgLy8gdGhpcy50SGVscGVyLmZvbnQgPSB0aGlzLnZhbHVlcy5mVmFsdWU7XG5cbiAgICB2YXIgY2hhckRhdGE7XG4gICAgdmFyIHNoYXBlRGF0YTtcbiAgICB2YXIgaztcbiAgICB2YXIga0xlbjtcbiAgICB2YXIgc2hhcGVzO1xuICAgIHZhciBqO1xuICAgIHZhciBqTGVuO1xuICAgIHZhciBwYXRoTm9kZXM7XG4gICAgdmFyIGNvbW1hbmRzO1xuICAgIHZhciBwYXRoQXJyO1xuICAgIHZhciBzaW5nbGVTaGFwZSA9IHRoaXMuZGF0YS5zaW5nbGVTaGFwZTtcbiAgICB2YXIgdHJhY2tpbmdPZmZzZXQgPSBkb2N1bWVudERhdGEudHIgKiAwLjAwMSAqIGRvY3VtZW50RGF0YS5maW5hbFNpemU7XG4gICAgdmFyIHhQb3MgPSAwO1xuICAgIHZhciB5UG9zID0gMDtcbiAgICB2YXIgZmlyc3RMaW5lID0gdHJ1ZTtcbiAgICB2YXIgY250ID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgY2hhckRhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXSwgZm9udERhdGEuZlN0eWxlLCB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseSk7XG4gICAgICBzaGFwZURhdGEgPSBjaGFyRGF0YSAmJiBjaGFyRGF0YS5kYXRhIHx8IHt9O1xuICAgICAgbWF0cml4SGVscGVyLnJlc2V0KCk7XG5cbiAgICAgIGlmIChzaW5nbGVTaGFwZSAmJiBsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgeFBvcyA9IC10cmFja2luZ09mZnNldDtcbiAgICAgICAgeVBvcyArPSBkb2N1bWVudERhdGEueU9mZnNldDtcbiAgICAgICAgeVBvcyArPSBmaXJzdExpbmUgPyAxIDogMDtcbiAgICAgICAgZmlyc3RMaW5lID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHNoYXBlcyA9IHNoYXBlRGF0YS5zaGFwZXMgPyBzaGFwZURhdGEuc2hhcGVzWzBdLml0IDogW107XG4gICAgICBqTGVuID0gc2hhcGVzLmxlbmd0aDtcbiAgICAgIG1hdHJpeEhlbHBlci5zY2FsZShkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwLCBkb2N1bWVudERhdGEuZmluYWxTaXplIC8gMTAwKTtcblxuICAgICAgaWYgKHNpbmdsZVNoYXBlKSB7XG4gICAgICAgIHRoaXMuYXBwbHlUZXh0UHJvcGVydGllc1RvTWF0cml4KGRvY3VtZW50RGF0YSwgbWF0cml4SGVscGVyLCBsZXR0ZXJzW2ldLmxpbmUsIHhQb3MsIHlQb3MpO1xuICAgICAgfVxuXG4gICAgICBjb21tYW5kcyA9IGNyZWF0ZVNpemVkQXJyYXkoakxlbiAtIDEpO1xuICAgICAgdmFyIGNvbW1hbmRzQ291bnRlciA9IDA7XG5cbiAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKHNoYXBlc1tqXS50eSA9PT0gJ3NoJykge1xuICAgICAgICAgIGtMZW4gPSBzaGFwZXNbal0ua3Muay5pLmxlbmd0aDtcbiAgICAgICAgICBwYXRoTm9kZXMgPSBzaGFwZXNbal0ua3MuaztcbiAgICAgICAgICBwYXRoQXJyID0gW107XG5cbiAgICAgICAgICBmb3IgKGsgPSAxOyBrIDwga0xlbjsgayArPSAxKSB7XG4gICAgICAgICAgICBpZiAoayA9PT0gMSkge1xuICAgICAgICAgICAgICBwYXRoQXJyLnB1c2gobWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMudlswXVswXSwgcGF0aE5vZGVzLnZbMF1bMV0sIDApKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGF0aEFyci5wdXNoKG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMub1trIC0gMV1bMF0sIHBhdGhOb2Rlcy5vW2sgLSAxXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWChwYXRoTm9kZXMuaVtrXVswXSwgcGF0aE5vZGVzLmlba11bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1kocGF0aE5vZGVzLmlba11bMF0sIHBhdGhOb2Rlcy5pW2tdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy52W2tdWzBdLCBwYXRoTm9kZXMudltrXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMudltrXVswXSwgcGF0aE5vZGVzLnZba11bMV0sIDApKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBwYXRoQXJyLnB1c2gobWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy5vW2sgLSAxXVswXSwgcGF0aE5vZGVzLm9bayAtIDFdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9ZKHBhdGhOb2Rlcy5vW2sgLSAxXVswXSwgcGF0aE5vZGVzLm9bayAtIDFdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9YKHBhdGhOb2Rlcy5pWzBdWzBdLCBwYXRoTm9kZXMuaVswXVsxXSwgMCksIG1hdHJpeEhlbHBlci5hcHBseVRvWShwYXRoTm9kZXMuaVswXVswXSwgcGF0aE5vZGVzLmlbMF1bMV0sIDApLCBtYXRyaXhIZWxwZXIuYXBwbHlUb1gocGF0aE5vZGVzLnZbMF1bMF0sIHBhdGhOb2Rlcy52WzBdWzFdLCAwKSwgbWF0cml4SGVscGVyLmFwcGx5VG9ZKHBhdGhOb2Rlcy52WzBdWzBdLCBwYXRoTm9kZXMudlswXVsxXSwgMCkpO1xuICAgICAgICAgIGNvbW1hbmRzW2NvbW1hbmRzQ291bnRlcl0gPSBwYXRoQXJyO1xuICAgICAgICAgIGNvbW1hbmRzQ291bnRlciArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChzaW5nbGVTaGFwZSkge1xuICAgICAgICB4UG9zICs9IGxldHRlcnNbaV0ubDtcbiAgICAgICAgeFBvcyArPSB0cmFja2luZ09mZnNldDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudGV4dFNwYW5zW2NudF0pIHtcbiAgICAgICAgdGhpcy50ZXh0U3BhbnNbY250XS5lbGVtID0gY29tbWFuZHM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRleHRTcGFuc1tjbnRdID0ge1xuICAgICAgICAgIGVsZW06IGNvbW1hbmRzXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGNudCArPSAxO1xuICAgIH1cbiAgfTtcblxuICBDVlRleHRFbGVtZW50LnByb3RvdHlwZS5yZW5kZXJJbm5lckNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy52YWxpZGF0ZVRleHQoKTtcbiAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXNDb250ZXh0O1xuICAgIGN0eC5mb250ID0gdGhpcy52YWx1ZXMuZlZhbHVlO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhMaW5lQ2FwKCdidXR0Jyk7IC8vIGN0eC5saW5lQ2FwID0gJ2J1dHQnO1xuXG4gICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLmN0eExpbmVKb2luKCdtaXRlcicpOyAvLyBjdHgubGluZUpvaW4gPSAnbWl0ZXInO1xuXG4gICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLmN0eE1pdGVyTGltaXQoNCk7IC8vIGN0eC5taXRlckxpbWl0ID0gNDtcblxuICAgIGlmICghdGhpcy5kYXRhLnNpbmdsZVNoYXBlKSB7XG4gICAgICB0aGlzLnRleHRBbmltYXRvci5nZXRNZWFzdXJlcyh0aGlzLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YSwgdGhpcy5sZXR0ZXJzQ2hhbmdlZEZsYWcpO1xuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgdmFyIGo7XG4gICAgdmFyIGpMZW47XG4gICAgdmFyIGs7XG4gICAgdmFyIGtMZW47XG4gICAgdmFyIHJlbmRlcmVkTGV0dGVycyA9IHRoaXMudGV4dEFuaW1hdG9yLnJlbmRlcmVkTGV0dGVycztcbiAgICB2YXIgbGV0dGVycyA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmw7XG4gICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHJlbmRlcmVkTGV0dGVyO1xuICAgIHZhciBsYXN0RmlsbCA9IG51bGw7XG4gICAgdmFyIGxhc3RTdHJva2UgPSBudWxsO1xuICAgIHZhciBsYXN0U3Ryb2tlVyA9IG51bGw7XG4gICAgdmFyIGNvbW1hbmRzO1xuICAgIHZhciBwYXRoQXJyO1xuICAgIHZhciByZW5kZXJlciA9IHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlcjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKCFsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgcmVuZGVyZWRMZXR0ZXIgPSByZW5kZXJlZExldHRlcnNbaV07XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyKSB7XG4gICAgICAgICAgcmVuZGVyZXIuc2F2ZSgpO1xuICAgICAgICAgIHJlbmRlcmVyLmN0eFRyYW5zZm9ybShyZW5kZXJlZExldHRlci5wKTtcbiAgICAgICAgICByZW5kZXJlci5jdHhPcGFjaXR5KHJlbmRlcmVkTGV0dGVyLm8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuZmlsbCkge1xuICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlciAmJiByZW5kZXJlZExldHRlci5mYykge1xuICAgICAgICAgICAgaWYgKGxhc3RGaWxsICE9PSByZW5kZXJlZExldHRlci5mYykge1xuICAgICAgICAgICAgICByZW5kZXJlci5jdHhGaWxsU3R5bGUocmVuZGVyZWRMZXR0ZXIuZmMpO1xuICAgICAgICAgICAgICBsYXN0RmlsbCA9IHJlbmRlcmVkTGV0dGVyLmZjOyAvLyBjdHguZmlsbFN0eWxlID0gcmVuZGVyZWRMZXR0ZXIuZmM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0RmlsbCAhPT0gdGhpcy52YWx1ZXMuZmlsbCkge1xuICAgICAgICAgICAgbGFzdEZpbGwgPSB0aGlzLnZhbHVlcy5maWxsO1xuICAgICAgICAgICAgcmVuZGVyZXIuY3R4RmlsbFN0eWxlKHRoaXMudmFsdWVzLmZpbGwpOyAvLyBjdHguZmlsbFN0eWxlID0gdGhpcy52YWx1ZXMuZmlsbDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb21tYW5kcyA9IHRoaXMudGV4dFNwYW5zW2ldLmVsZW07XG4gICAgICAgICAgakxlbiA9IGNvbW1hbmRzLmxlbmd0aDtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHBhdGhBcnIgPSBjb21tYW5kc1tqXTtcbiAgICAgICAgICAgIGtMZW4gPSBwYXRoQXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0Lm1vdmVUbyhwYXRoQXJyWzBdLCBwYXRoQXJyWzFdKTtcblxuICAgICAgICAgICAgZm9yIChrID0gMjsgayA8IGtMZW47IGsgKz0gNikge1xuICAgICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5iZXppZXJDdXJ2ZVRvKHBhdGhBcnJba10sIHBhdGhBcnJbayArIDFdLCBwYXRoQXJyW2sgKyAyXSwgcGF0aEFycltrICsgM10sIHBhdGhBcnJbayArIDRdLCBwYXRoQXJyW2sgKyA1XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgcmVuZGVyZXIuY3R4RmlsbCgpOyAvLyB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5maWxsKCk7XG4gICAgICAgICAgLy8vIGN0eC5maWxsVGV4dCh0aGlzLnRleHRTcGFuc1tpXS52YWwsMCwwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0cm9rZSkge1xuICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlciAmJiByZW5kZXJlZExldHRlci5zdykge1xuICAgICAgICAgICAgaWYgKGxhc3RTdHJva2VXICE9PSByZW5kZXJlZExldHRlci5zdykge1xuICAgICAgICAgICAgICBsYXN0U3Ryb2tlVyA9IHJlbmRlcmVkTGV0dGVyLnN3O1xuICAgICAgICAgICAgICByZW5kZXJlci5jdHhMaW5lV2lkdGgocmVuZGVyZWRMZXR0ZXIuc3cpOyAvLyBjdHgubGluZVdpZHRoID0gcmVuZGVyZWRMZXR0ZXIuc3c7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIGlmIChsYXN0U3Ryb2tlVyAhPT0gdGhpcy52YWx1ZXMuc1dpZHRoKSB7XG4gICAgICAgICAgICBsYXN0U3Ryb2tlVyA9IHRoaXMudmFsdWVzLnNXaWR0aDtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eExpbmVXaWR0aCh0aGlzLnZhbHVlcy5zV2lkdGgpOyAvLyBjdHgubGluZVdpZHRoID0gdGhpcy52YWx1ZXMuc1dpZHRoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChyZW5kZXJlZExldHRlciAmJiByZW5kZXJlZExldHRlci5zYykge1xuICAgICAgICAgICAgaWYgKGxhc3RTdHJva2UgIT09IHJlbmRlcmVkTGV0dGVyLnNjKSB7XG4gICAgICAgICAgICAgIGxhc3RTdHJva2UgPSByZW5kZXJlZExldHRlci5zYztcbiAgICAgICAgICAgICAgcmVuZGVyZXIuY3R4U3Ryb2tlU3R5bGUocmVuZGVyZWRMZXR0ZXIuc2MpOyAvLyBjdHguc3Ryb2tlU3R5bGUgPSByZW5kZXJlZExldHRlci5zYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2UgaWYgKGxhc3RTdHJva2UgIT09IHRoaXMudmFsdWVzLnN0cm9rZSkge1xuICAgICAgICAgICAgbGFzdFN0cm9rZSA9IHRoaXMudmFsdWVzLnN0cm9rZTtcbiAgICAgICAgICAgIHJlbmRlcmVyLmN0eFN0cm9rZVN0eWxlKHRoaXMudmFsdWVzLnN0cm9rZSk7IC8vIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMudmFsdWVzLnN0cm9rZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb21tYW5kcyA9IHRoaXMudGV4dFNwYW5zW2ldLmVsZW07XG4gICAgICAgICAgakxlbiA9IGNvbW1hbmRzLmxlbmd0aDtcbiAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5iZWdpblBhdGgoKTtcblxuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBqTGVuOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHBhdGhBcnIgPSBjb21tYW5kc1tqXTtcbiAgICAgICAgICAgIGtMZW4gPSBwYXRoQXJyLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0Lm1vdmVUbyhwYXRoQXJyWzBdLCBwYXRoQXJyWzFdKTtcblxuICAgICAgICAgICAgZm9yIChrID0gMjsgayA8IGtMZW47IGsgKz0gNikge1xuICAgICAgICAgICAgICB0aGlzLmdsb2JhbERhdGEuY2FudmFzQ29udGV4dC5iZXppZXJDdXJ2ZVRvKHBhdGhBcnJba10sIHBhdGhBcnJbayArIDFdLCBwYXRoQXJyW2sgKyAyXSwgcGF0aEFycltrICsgM10sIHBhdGhBcnJbayArIDRdLCBwYXRoQXJyW2sgKyA1XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgcmVuZGVyZXIuY3R4U3Ryb2tlKCk7IC8vIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0LnN0cm9rZSgpO1xuICAgICAgICAgIC8vLyBjdHguc3Ryb2tlVGV4dChsZXR0ZXJzW2ldLnZhbCwwLDApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyKSB7XG4gICAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyLnJlc3RvcmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBDVkltYWdlRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5hc3NldERhdGEgPSBnbG9iYWxEYXRhLmdldEFzc2V0RGF0YShkYXRhLnJlZklkKTtcbiAgICB0aGlzLmltZyA9IGdsb2JhbERhdGEuaW1hZ2VMb2FkZXIuZ2V0QXNzZXQodGhpcy5hc3NldERhdGEpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBDVkJhc2VFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50LCBGcmFtZUVsZW1lbnQsIFJlbmRlcmFibGVFbGVtZW50XSwgQ1ZJbWFnZUVsZW1lbnQpO1xuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQgPSBTVkdTaGFwZUVsZW1lbnQucHJvdG90eXBlLmluaXRFbGVtZW50O1xuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lID0gSUltYWdlRWxlbWVudC5wcm90b3R5cGUucHJlcGFyZUZyYW1lO1xuXG4gIENWSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmltZy53aWR0aCAmJiAodGhpcy5hc3NldERhdGEudyAhPT0gdGhpcy5pbWcud2lkdGggfHwgdGhpcy5hc3NldERhdGEuaCAhPT0gdGhpcy5pbWcuaGVpZ2h0KSkge1xuICAgICAgdmFyIGNhbnZhcyA9IGNyZWF0ZVRhZygnY2FudmFzJyk7XG4gICAgICBjYW52YXMud2lkdGggPSB0aGlzLmFzc2V0RGF0YS53O1xuICAgICAgY2FudmFzLmhlaWdodCA9IHRoaXMuYXNzZXREYXRhLmg7XG4gICAgICB2YXIgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICB2YXIgaW1nVyA9IHRoaXMuaW1nLndpZHRoO1xuICAgICAgdmFyIGltZ0ggPSB0aGlzLmltZy5oZWlnaHQ7XG4gICAgICB2YXIgaW1nUmVsID0gaW1nVyAvIGltZ0g7XG4gICAgICB2YXIgY2FudmFzUmVsID0gdGhpcy5hc3NldERhdGEudyAvIHRoaXMuYXNzZXREYXRhLmg7XG4gICAgICB2YXIgd2lkdGhDcm9wO1xuICAgICAgdmFyIGhlaWdodENyb3A7XG4gICAgICB2YXIgcGFyID0gdGhpcy5hc3NldERhdGEucHIgfHwgdGhpcy5nbG9iYWxEYXRhLnJlbmRlckNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW87XG5cbiAgICAgIGlmIChpbWdSZWwgPiBjYW52YXNSZWwgJiYgcGFyID09PSAneE1pZFlNaWQgc2xpY2UnIHx8IGltZ1JlbCA8IGNhbnZhc1JlbCAmJiBwYXIgIT09ICd4TWlkWU1pZCBzbGljZScpIHtcbiAgICAgICAgaGVpZ2h0Q3JvcCA9IGltZ0g7XG4gICAgICAgIHdpZHRoQ3JvcCA9IGhlaWdodENyb3AgKiBjYW52YXNSZWw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3aWR0aENyb3AgPSBpbWdXO1xuICAgICAgICBoZWlnaHRDcm9wID0gd2lkdGhDcm9wIC8gY2FudmFzUmVsO1xuICAgICAgfVxuXG4gICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1nLCAoaW1nVyAtIHdpZHRoQ3JvcCkgLyAyLCAoaW1nSCAtIGhlaWdodENyb3ApIC8gMiwgd2lkdGhDcm9wLCBoZWlnaHRDcm9wLCAwLCAwLCB0aGlzLmFzc2V0RGF0YS53LCB0aGlzLmFzc2V0RGF0YS5oKTtcbiAgICAgIHRoaXMuaW1nID0gY2FudmFzO1xuICAgIH1cbiAgfTtcblxuICBDVkltYWdlRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWcsIDAsIDApO1xuICB9O1xuXG4gIENWSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuaW1nID0gbnVsbDtcbiAgfTtcblxuICBmdW5jdGlvbiBDVlNvbGlkRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIENWQmFzZUVsZW1lbnQsIEhpZXJhcmNoeUVsZW1lbnQsIEZyYW1lRWxlbWVudCwgUmVuZGVyYWJsZUVsZW1lbnRdLCBDVlNvbGlkRWxlbWVudCk7XG4gIENWU29saWRFbGVtZW50LnByb3RvdHlwZS5pbml0RWxlbWVudCA9IFNWR1NoYXBlRWxlbWVudC5wcm90b3R5cGUuaW5pdEVsZW1lbnQ7XG4gIENWU29saWRFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBJSW1hZ2VFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWU7XG5cbiAgQ1ZTb2xpZEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyB2YXIgY3R4ID0gdGhpcy5jYW52YXNDb250ZXh0O1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhGaWxsU3R5bGUodGhpcy5kYXRhLnNjKTsgLy8gY3R4LmZpbGxTdHlsZSA9IHRoaXMuZGF0YS5zYztcblxuICAgIHRoaXMuZ2xvYmFsRGF0YS5yZW5kZXJlci5jdHhGaWxsUmVjdCgwLCAwLCB0aGlzLmRhdGEuc3csIHRoaXMuZGF0YS5zaCk7IC8vIGN0eC5maWxsUmVjdCgwLCAwLCB0aGlzLmRhdGEuc3csIHRoaXMuZGF0YS5zaCk7XG4gICAgLy9cbiAgfTtcblxuICBmdW5jdGlvbiBDYW52YXNSZW5kZXJlckJhc2UoKSB7fVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZVJlbmRlcmVyXSwgQ2FudmFzUmVuZGVyZXJCYXNlKTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVNoYXBlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IENWU2hhcGVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVUZXh0ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IENWVGV4dEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZUltYWdlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IENWSW1hZ2VFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVTb2xpZCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgcmV0dXJuIG5ldyBDVlNvbGlkRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlTnVsbCA9IFNWR1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVOdWxsO1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4VHJhbnNmb3JtID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgaWYgKHByb3BzWzBdID09PSAxICYmIHByb3BzWzFdID09PSAwICYmIHByb3BzWzRdID09PSAwICYmIHByb3BzWzVdID09PSAxICYmIHByb3BzWzEyXSA9PT0gMCAmJiBwcm9wc1sxM10gPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhc0NvbnRleHQudHJhbnNmb3JtKHByb3BzWzBdLCBwcm9wc1sxXSwgcHJvcHNbNF0sIHByb3BzWzVdLCBwcm9wc1sxMl0sIHByb3BzWzEzXSk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhPcGFjaXR5ID0gZnVuY3Rpb24gKG9wKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0Lmdsb2JhbEFscGhhICo9IG9wIDwgMCA/IDAgOiBvcDtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eEZpbGxTdHlsZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5maWxsU3R5bGUgPSB2YWx1ZTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eFN0cm9rZVN0eWxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnN0cm9rZVN0eWxlID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhMaW5lV2lkdGggPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQubGluZVdpZHRoID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhMaW5lQ2FwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmxpbmVDYXAgPSB2YWx1ZTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eExpbmVKb2luID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmxpbmVKb2luID0gdmFsdWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jdHhNaXRlckxpbWl0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0Lm1pdGVyTGltaXQgPSB2YWx1ZTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eEZpbGwgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5maWxsKHJ1bGUpO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3R4RmlsbFJlY3QgPSBmdW5jdGlvbiAoeCwgeSwgdywgaCkge1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5maWxsUmVjdCh4LCB5LCB3LCBoKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmN0eFN0cm9rZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuc3Ryb2tlKCk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKSB7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQucmVzdG9yZSgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dERhdGEucmVzZXQoKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LnNhdmUoKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLnJlc3RvcmUgPSBmdW5jdGlvbiAoYWN0aW9uRmxhZykge1xuICAgIGlmICghdGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMpIHtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5yZXN0b3JlKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGFjdGlvbkZsYWcpIHtcbiAgICAgIHRoaXMuZ2xvYmFsRGF0YS5ibGVuZE1vZGUgPSAnc291cmNlLW92ZXInO1xuICAgIH1cblxuICAgIHRoaXMuY29udGV4dERhdGEucmVzdG9yZShhY3Rpb25GbGFnKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmNvbmZpZ0FuaW1hdGlvbiA9IGZ1bmN0aW9uIChhbmltRGF0YSkge1xuICAgIGlmICh0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lciA9IGNyZWF0ZVRhZygnY2FudmFzJyk7XG4gICAgICB2YXIgY29udGFpbmVyU3R5bGUgPSB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnN0eWxlO1xuICAgICAgY29udGFpbmVyU3R5bGUud2lkdGggPSAnMTAwJSc7XG4gICAgICBjb250YWluZXJTdHlsZS5oZWlnaHQgPSAnMTAwJSc7XG4gICAgICB2YXIgb3JpZ2luID0gJzBweCAwcHggMHB4JztcbiAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgIGNvbnRhaW5lclN0eWxlLm1velRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgIGNvbnRhaW5lclN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgIGNvbnRhaW5lclN0eWxlWyctd2Via2l0LXRyYW5zZm9ybSddID0gb3JpZ2luO1xuICAgICAgY29udGFpbmVyU3R5bGUuY29udGVudFZpc2liaWxpdHkgPSB0aGlzLnJlbmRlckNvbmZpZy5jb250ZW50VmlzaWJpbGl0eTtcbiAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLmFwcGVuZENoaWxkKHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIpO1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0ID0gdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5nZXRDb250ZXh0KCcyZCcpO1xuXG4gICAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xhc3NOYW1lKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uSXRlbS5jb250YWluZXIuc2V0QXR0cmlidXRlKCdjbGFzcycsIHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5pZCkge1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLnJlbmRlckNvbmZpZy5pZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dCA9IHRoaXMucmVuZGVyQ29uZmlnLmNvbnRleHQ7XG4gICAgfVxuXG4gICAgdGhpcy5jb250ZXh0RGF0YS5zZXRDb250ZXh0KHRoaXMuY2FudmFzQ29udGV4dCk7XG4gICAgdGhpcy5kYXRhID0gYW5pbURhdGE7XG4gICAgdGhpcy5sYXllcnMgPSBhbmltRGF0YS5sYXllcnM7XG4gICAgdGhpcy50cmFuc2Zvcm1DYW52YXMgPSB7XG4gICAgICB3OiBhbmltRGF0YS53LFxuICAgICAgaDogYW5pbURhdGEuaCxcbiAgICAgIHN4OiAwLFxuICAgICAgc3k6IDAsXG4gICAgICB0eDogMCxcbiAgICAgIHR5OiAwXG4gICAgfTtcbiAgICB0aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSwgZG9jdW1lbnQuYm9keSk7XG4gICAgdGhpcy5nbG9iYWxEYXRhLmNhbnZhc0NvbnRleHQgPSB0aGlzLmNhbnZhc0NvbnRleHQ7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnJlbmRlcmVyID0gdGhpcztcbiAgICB0aGlzLmdsb2JhbERhdGEuaXNEYXNoZWQgPSBmYWxzZTtcbiAgICB0aGlzLmdsb2JhbERhdGEucHJvZ3Jlc3NpdmVMb2FkID0gdGhpcy5yZW5kZXJDb25maWcucHJvZ3Jlc3NpdmVMb2FkO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS50cmFuc2Zvcm1DYW52YXMgPSB0aGlzLnRyYW5zZm9ybUNhbnZhcztcbiAgICB0aGlzLmVsZW1lbnRzID0gY3JlYXRlU2l6ZWRBcnJheShhbmltRGF0YS5sYXllcnMubGVuZ3RoKTtcbiAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lclNpemUoKTtcbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLnVwZGF0ZUNvbnRhaW5lclNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkge1xuICAgIHRoaXMucmVzZXQoKTtcbiAgICB2YXIgZWxlbWVudFdpZHRoO1xuICAgIHZhciBlbGVtZW50SGVpZ2h0O1xuXG4gICAgaWYgKHdpZHRoKSB7XG4gICAgICBlbGVtZW50V2lkdGggPSB3aWR0aDtcbiAgICAgIGVsZW1lbnRIZWlnaHQgPSBoZWlnaHQ7XG4gICAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLndpZHRoID0gZWxlbWVudFdpZHRoO1xuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy5oZWlnaHQgPSBlbGVtZW50SGVpZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIgJiYgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lcikge1xuICAgICAgICBlbGVtZW50V2lkdGggPSB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5vZmZzZXRXaWR0aDtcbiAgICAgICAgZWxlbWVudEhlaWdodCA9IHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLm9mZnNldEhlaWdodDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnRXaWR0aCA9IHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMud2lkdGg7XG4gICAgICAgIGVsZW1lbnRIZWlnaHQgPSB0aGlzLmNhbnZhc0NvbnRleHQuY2FudmFzLmhlaWdodDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYW52YXNDb250ZXh0LmNhbnZhcy53aWR0aCA9IGVsZW1lbnRXaWR0aCAqIHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jYW52YXMuaGVpZ2h0ID0gZWxlbWVudEhlaWdodCAqIHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudFJlbDtcbiAgICB2YXIgYW5pbWF0aW9uUmVsO1xuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8uaW5kZXhPZignbWVldCcpICE9PSAtMSB8fCB0aGlzLnJlbmRlckNvbmZpZy5wcmVzZXJ2ZUFzcGVjdFJhdGlvLmluZGV4T2YoJ3NsaWNlJykgIT09IC0xKSB7XG4gICAgICB2YXIgcGFyID0gdGhpcy5yZW5kZXJDb25maWcucHJlc2VydmVBc3BlY3RSYXRpby5zcGxpdCgnICcpO1xuICAgICAgdmFyIGZpbGxUeXBlID0gcGFyWzFdIHx8ICdtZWV0JztcbiAgICAgIHZhciBwb3MgPSBwYXJbMF0gfHwgJ3hNaWRZTWlkJztcbiAgICAgIHZhciB4UG9zID0gcG9zLnN1YnN0cigwLCA0KTtcbiAgICAgIHZhciB5UG9zID0gcG9zLnN1YnN0cig0KTtcbiAgICAgIGVsZW1lbnRSZWwgPSBlbGVtZW50V2lkdGggLyBlbGVtZW50SGVpZ2h0O1xuICAgICAgYW5pbWF0aW9uUmVsID0gdGhpcy50cmFuc2Zvcm1DYW52YXMudyAvIHRoaXMudHJhbnNmb3JtQ2FudmFzLmg7XG5cbiAgICAgIGlmIChhbmltYXRpb25SZWwgPiBlbGVtZW50UmVsICYmIGZpbGxUeXBlID09PSAnbWVldCcgfHwgYW5pbWF0aW9uUmVsIDwgZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ3NsaWNlJykge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCA9IGVsZW1lbnRXaWR0aCAvICh0aGlzLnRyYW5zZm9ybUNhbnZhcy53IC8gdGhpcy5yZW5kZXJDb25maWcuZHByKTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3kgPSBlbGVtZW50V2lkdGggLyAodGhpcy50cmFuc2Zvcm1DYW52YXMudyAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeCA9IGVsZW1lbnRIZWlnaHQgLyAodGhpcy50cmFuc2Zvcm1DYW52YXMuaCAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5ID0gZWxlbWVudEhlaWdodCAvICh0aGlzLnRyYW5zZm9ybUNhbnZhcy5oIC8gdGhpcy5yZW5kZXJDb25maWcuZHByKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHhQb3MgPT09ICd4TWlkJyAmJiAoYW5pbWF0aW9uUmVsIDwgZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR4ID0gKGVsZW1lbnRXaWR0aCAtIHRoaXMudHJhbnNmb3JtQ2FudmFzLncgKiAoZWxlbWVudEhlaWdodCAvIHRoaXMudHJhbnNmb3JtQ2FudmFzLmgpKSAvIDIgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2UgaWYgKHhQb3MgPT09ICd4TWF4JyAmJiAoYW5pbWF0aW9uUmVsIDwgZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA+IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR4ID0gKGVsZW1lbnRXaWR0aCAtIHRoaXMudHJhbnNmb3JtQ2FudmFzLncgKiAoZWxlbWVudEhlaWdodCAvIHRoaXMudHJhbnNmb3JtQ2FudmFzLmgpKSAqIHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR4ID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHlQb3MgPT09ICdZTWlkJyAmJiAoYW5pbWF0aW9uUmVsID4gZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR5ID0gKGVsZW1lbnRIZWlnaHQgLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oICogKGVsZW1lbnRXaWR0aCAvIHRoaXMudHJhbnNmb3JtQ2FudmFzLncpKSAvIDIgKiB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB9IGVsc2UgaWYgKHlQb3MgPT09ICdZTWF4JyAmJiAoYW5pbWF0aW9uUmVsID4gZWxlbWVudFJlbCAmJiBmaWxsVHlwZSA9PT0gJ21lZXQnIHx8IGFuaW1hdGlvblJlbCA8IGVsZW1lbnRSZWwgJiYgZmlsbFR5cGUgPT09ICdzbGljZScpKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR5ID0gKGVsZW1lbnRIZWlnaHQgLSB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oICogKGVsZW1lbnRXaWR0aCAvIHRoaXMudHJhbnNmb3JtQ2FudmFzLncpKSAqIHRoaXMucmVuZGVyQ29uZmlnLmRwcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnR5ID0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMucmVuZGVyQ29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8gPT09ICdub25lJykge1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3ggPSBlbGVtZW50V2lkdGggLyAodGhpcy50cmFuc2Zvcm1DYW52YXMudyAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy5zeSA9IGVsZW1lbnRIZWlnaHQgLyAodGhpcy50cmFuc2Zvcm1DYW52YXMuaCAvIHRoaXMucmVuZGVyQ29uZmlnLmRwcik7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IDA7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN4ID0gdGhpcy5yZW5kZXJDb25maWcuZHByO1xuICAgICAgdGhpcy50cmFuc2Zvcm1DYW52YXMuc3kgPSB0aGlzLnJlbmRlckNvbmZpZy5kcHI7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCA9IDA7XG4gICAgICB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eSA9IDA7XG4gICAgfVxuXG4gICAgdGhpcy50cmFuc2Zvcm1DYW52YXMucHJvcHMgPSBbdGhpcy50cmFuc2Zvcm1DYW52YXMuc3gsIDAsIDAsIDAsIDAsIHRoaXMudHJhbnNmb3JtQ2FudmFzLnN5LCAwLCAwLCAwLCAwLCAxLCAwLCB0aGlzLnRyYW5zZm9ybUNhbnZhcy50eCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudHksIDAsIDFdO1xuICAgIC8qIHZhciBpLCBsZW4gPSB0aGlzLmVsZW1lbnRzLmxlbmd0aDtcclxuICAgICAgZm9yKGk9MDtpPGxlbjtpKz0xKXtcclxuICAgICAgICAgIGlmKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kYXRhLnR5ID09PSAwKXtcclxuICAgICAgICAgICAgICB0aGlzLmVsZW1lbnRzW2ldLnJlc2l6ZSh0aGlzLmdsb2JhbERhdGEudHJhbnNmb3JtQ2FudmFzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgfSAqL1xuXG4gICAgdGhpcy5jdHhUcmFuc2Zvcm0odGhpcy50cmFuc2Zvcm1DYW52YXMucHJvcHMpO1xuICAgIHRoaXMuY2FudmFzQ29udGV4dC5iZWdpblBhdGgoKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQucmVjdCgwLCAwLCB0aGlzLnRyYW5zZm9ybUNhbnZhcy53LCB0aGlzLnRyYW5zZm9ybUNhbnZhcy5oKTtcbiAgICB0aGlzLmNhbnZhc0NvbnRleHQuY2xvc2VQYXRoKCk7XG4gICAgdGhpcy5jYW52YXNDb250ZXh0LmNsaXAoKTtcbiAgICB0aGlzLnJlbmRlckZyYW1lKHRoaXMucmVuZGVyZWRGcmFtZSwgdHJ1ZSk7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLnJlbmRlckNvbmZpZy5jbGVhckNhbnZhcyAmJiB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlcikge1xuICAgICAgdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIuaW5uZXJUZXh0ID0gJyc7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzID8gdGhpcy5sYXllcnMubGVuZ3RoIDogMDtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldLmRlc3Ryb3kpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbGVtZW50cy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5jYW52YXNDb250ZXh0ID0gbnVsbDtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChudW0sIGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyZWRGcmFtZSA9PT0gbnVtICYmIHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzID09PSB0cnVlICYmICFmb3JjZVJlbmRlciB8fCB0aGlzLmRlc3Ryb3llZCB8fCBudW0gPT09IC0xKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gbnVtO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZU51bSA9IG51bSAtIHRoaXMuYW5pbWF0aW9uSXRlbS5faXNGaXJzdEZyYW1lO1xuICAgIHRoaXMuZ2xvYmFsRGF0YS5mcmFtZUlkICs9IDE7XG4gICAgdGhpcy5nbG9iYWxEYXRhLl9tZGYgPSAhdGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMgfHwgZm9yY2VSZW5kZXI7XG4gICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuY3VycmVudEZyYW1lID0gbnVtOyAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0nKTtcbiAgICAvLyBjb25zb2xlLmxvZygnTkVXOiAnLG51bSk7XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgaWYgKCF0aGlzLmNvbXBsZXRlTGF5ZXJzKSB7XG4gICAgICB0aGlzLmNoZWNrTGF5ZXJzKG51bSk7XG4gICAgfVxuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmNvbXBsZXRlTGF5ZXJzIHx8IHRoaXMuZWxlbWVudHNbaV0pIHtcbiAgICAgICAgdGhpcy5lbGVtZW50c1tpXS5wcmVwYXJlRnJhbWUobnVtIC0gdGhpcy5sYXllcnNbaV0uc3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLmdsb2JhbERhdGEuX21kZikge1xuICAgICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzID09PSB0cnVlKSB7XG4gICAgICAgIHRoaXMuY2FudmFzQ29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy50cmFuc2Zvcm1DYW52YXMudywgdGhpcy50cmFuc2Zvcm1DYW52YXMuaCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgIH1cblxuICAgICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgICAgaWYgKHRoaXMuY29tcGxldGVMYXllcnMgfHwgdGhpcy5lbGVtZW50c1tpXSkge1xuICAgICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5yZW5kZXJDb25maWcuY2xlYXJDYW52YXMgIT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5yZXN0b3JlKCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuYnVpbGRJdGVtID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbWVudHM7XG5cbiAgICBpZiAoZWxlbWVudHNbcG9zXSB8fCB0aGlzLmxheWVyc1twb3NdLnR5ID09PSA5OSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBlbGVtZW50ID0gdGhpcy5jcmVhdGVJdGVtKHRoaXMubGF5ZXJzW3Bvc10sIHRoaXMsIHRoaXMuZ2xvYmFsRGF0YSk7XG4gICAgZWxlbWVudHNbcG9zXSA9IGVsZW1lbnQ7XG4gICAgZWxlbWVudC5pbml0RXhwcmVzc2lvbnMoKTtcbiAgICAvKiBpZih0aGlzLmxheWVyc1twb3NdLnR5ID09PSAwKXtcclxuICAgICAgICAgIGVsZW1lbnQucmVzaXplKHRoaXMuZ2xvYmFsRGF0YS50cmFuc2Zvcm1DYW52YXMpO1xyXG4gICAgICB9ICovXG4gIH07XG5cbiAgQ2FudmFzUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jaGVja1BlbmRpbmdFbGVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB3aGlsZSAodGhpcy5wZW5kaW5nRWxlbWVudHMubGVuZ3RoKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHRoaXMucGVuZGluZ0VsZW1lbnRzLnBvcCgpO1xuICAgICAgZWxlbWVudC5jaGVja1BhcmVudGluZygpO1xuICAgIH1cbiAgfTtcblxuICBDYW52YXNSZW5kZXJlckJhc2UucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtLmNvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9O1xuXG4gIENhbnZhc1JlbmRlcmVyQmFzZS5wcm90b3R5cGUuc2hvdyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICB9O1xuXG4gIGZ1bmN0aW9uIENhbnZhc0NvbnRleHQoKSB7XG4gICAgdGhpcy5vcGFjaXR5ID0gLTE7XG4gICAgdGhpcy50cmFuc2Zvcm0gPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgMTYpO1xuICAgIHRoaXMuZmlsbFN0eWxlID0gJyc7XG4gICAgdGhpcy5zdHJva2VTdHlsZSA9ICcnO1xuICAgIHRoaXMubGluZVdpZHRoID0gJyc7XG4gICAgdGhpcy5saW5lQ2FwID0gJyc7XG4gICAgdGhpcy5saW5lSm9pbiA9ICcnO1xuICAgIHRoaXMubWl0ZXJMaW1pdCA9ICcnO1xuICAgIHRoaXMuaWQgPSBNYXRoLnJhbmRvbSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gQ1ZDb250ZXh0RGF0YSgpIHtcbiAgICB0aGlzLnN0YWNrID0gW107XG4gICAgdGhpcy5jQXJyUG9zID0gMDtcbiAgICB0aGlzLmNUciA9IG5ldyBNYXRyaXgoKTtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gMTU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIHZhciBjYW52YXNDb250ZXh0ID0gbmV3IENhbnZhc0NvbnRleHQoKTtcbiAgICAgIHRoaXMuc3RhY2tbaV0gPSBjYW52YXNDb250ZXh0O1xuICAgIH1cblxuICAgIHRoaXMuX2xlbmd0aCA9IGxlbjtcbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQgPSBudWxsO1xuICAgIHRoaXMudHJhbnNmb3JtTWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMuY3VycmVudE9wYWNpdHkgPSAxOyAvL1xuXG4gICAgdGhpcy5jdXJyZW50RmlsbFN0eWxlID0gJyc7XG4gICAgdGhpcy5hcHBsaWVkRmlsbFN0eWxlID0gJyc7IC8vXG5cbiAgICB0aGlzLmN1cnJlbnRTdHJva2VTdHlsZSA9ICcnO1xuICAgIHRoaXMuYXBwbGllZFN0cm9rZVN0eWxlID0gJyc7IC8vXG5cbiAgICB0aGlzLmN1cnJlbnRMaW5lV2lkdGggPSAnJztcbiAgICB0aGlzLmFwcGxpZWRMaW5lV2lkdGggPSAnJzsgLy9cblxuICAgIHRoaXMuY3VycmVudExpbmVDYXAgPSAnJztcbiAgICB0aGlzLmFwcGxpZWRMaW5lQ2FwID0gJyc7IC8vXG5cbiAgICB0aGlzLmN1cnJlbnRMaW5lSm9pbiA9ICcnO1xuICAgIHRoaXMuYXBwbGllZExpbmVKb2luID0gJyc7IC8vXG5cbiAgICB0aGlzLmFwcGxpZWRNaXRlckxpbWl0ID0gJyc7XG4gICAgdGhpcy5jdXJyZW50TWl0ZXJMaW1pdCA9ICcnO1xuICB9XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuZHVwbGljYXRlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBuZXdMZW5ndGggPSB0aGlzLl9sZW5ndGggKiAyO1xuICAgIHZhciBpID0gMDtcblxuICAgIGZvciAoaSA9IHRoaXMuX2xlbmd0aDsgaSA8IG5ld0xlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzLnN0YWNrW2ldID0gbmV3IENhbnZhc0NvbnRleHQoKTtcbiAgICB9XG5cbiAgICB0aGlzLl9sZW5ndGggPSBuZXdMZW5ndGg7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5jQXJyUG9zID0gMDtcbiAgICB0aGlzLmNUci5yZXNldCgpO1xuICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5ID0gMTtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5yZXN0b3JlID0gZnVuY3Rpb24gKGZvcmNlUmVzdG9yZSkge1xuICAgIHRoaXMuY0FyclBvcyAtPSAxO1xuICAgIHZhciBjdXJyZW50Q29udGV4dCA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXTtcbiAgICB2YXIgdHJhbnNmb3JtID0gY3VycmVudENvbnRleHQudHJhbnNmb3JtO1xuICAgIHZhciBpO1xuICAgIHZhciBhcnIgPSB0aGlzLmNUci5wcm9wcztcblxuICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSArPSAxKSB7XG4gICAgICBhcnJbaV0gPSB0cmFuc2Zvcm1baV07XG4gICAgfVxuXG4gICAgaWYgKGZvcmNlUmVzdG9yZSkge1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LnJlc3RvcmUoKTtcbiAgICAgIHZhciBwcmV2U3RhY2sgPSB0aGlzLnN0YWNrW3RoaXMuY0FyclBvcyArIDFdO1xuICAgICAgdGhpcy5hcHBsaWVkRmlsbFN0eWxlID0gcHJldlN0YWNrLmZpbGxTdHlsZTtcbiAgICAgIHRoaXMuYXBwbGllZFN0cm9rZVN0eWxlID0gcHJldlN0YWNrLnN0cm9rZVN0eWxlO1xuICAgICAgdGhpcy5hcHBsaWVkTGluZVdpZHRoID0gcHJldlN0YWNrLmxpbmVXaWR0aDtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVDYXAgPSBwcmV2U3RhY2subGluZUNhcDtcbiAgICAgIHRoaXMuYXBwbGllZExpbmVKb2luID0gcHJldlN0YWNrLmxpbmVKb2luO1xuICAgICAgdGhpcy5hcHBsaWVkTWl0ZXJMaW1pdCA9IHByZXZTdGFjay5taXRlckxpbWl0O1xuICAgIH1cblxuICAgIHRoaXMubmF0aXZlQ29udGV4dC5zZXRUcmFuc2Zvcm0odHJhbnNmb3JtWzBdLCB0cmFuc2Zvcm1bMV0sIHRyYW5zZm9ybVs0XSwgdHJhbnNmb3JtWzVdLCB0cmFuc2Zvcm1bMTJdLCB0cmFuc2Zvcm1bMTNdKTtcblxuICAgIGlmIChmb3JjZVJlc3RvcmUgfHwgY3VycmVudENvbnRleHQub3BhY2l0eSAhPT0gLTEgJiYgdGhpcy5jdXJyZW50T3BhY2l0eSAhPT0gY3VycmVudENvbnRleHQub3BhY2l0eSkge1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0Lmdsb2JhbEFscGhhID0gY3VycmVudENvbnRleHQub3BhY2l0eTtcbiAgICAgIHRoaXMuY3VycmVudE9wYWNpdHkgPSBjdXJyZW50Q29udGV4dC5vcGFjaXR5O1xuICAgIH1cblxuICAgIHRoaXMuY3VycmVudEZpbGxTdHlsZSA9IGN1cnJlbnRDb250ZXh0LmZpbGxTdHlsZTtcbiAgICB0aGlzLmN1cnJlbnRTdHJva2VTdHlsZSA9IGN1cnJlbnRDb250ZXh0LnN0cm9rZVN0eWxlO1xuICAgIHRoaXMuY3VycmVudExpbmVXaWR0aCA9IGN1cnJlbnRDb250ZXh0LmxpbmVXaWR0aDtcbiAgICB0aGlzLmN1cnJlbnRMaW5lQ2FwID0gY3VycmVudENvbnRleHQubGluZUNhcDtcbiAgICB0aGlzLmN1cnJlbnRMaW5lSm9pbiA9IGN1cnJlbnRDb250ZXh0LmxpbmVKb2luO1xuICAgIHRoaXMuY3VycmVudE1pdGVyTGltaXQgPSBjdXJyZW50Q29udGV4dC5taXRlckxpbWl0O1xuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLnNhdmUgPSBmdW5jdGlvbiAoc2F2ZU9uTmF0aXZlRmxhZykge1xuICAgIGlmIChzYXZlT25OYXRpdmVGbGFnKSB7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc2F2ZSgpO1xuICAgIH1cblxuICAgIHZhciBwcm9wcyA9IHRoaXMuY1RyLnByb3BzO1xuXG4gICAgaWYgKHRoaXMuX2xlbmd0aCA8PSB0aGlzLmNBcnJQb3MpIHtcbiAgICAgIHRoaXMuZHVwbGljYXRlKCk7XG4gICAgfVxuXG4gICAgdmFyIGN1cnJlbnRTdGFjayA9IHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXTtcbiAgICB2YXIgaTtcblxuICAgIGZvciAoaSA9IDA7IGkgPCAxNjsgaSArPSAxKSB7XG4gICAgICBjdXJyZW50U3RhY2sudHJhbnNmb3JtW2ldID0gcHJvcHNbaV07XG4gICAgfVxuXG4gICAgdGhpcy5jQXJyUG9zICs9IDE7XG4gICAgdmFyIG5ld1N0YWNrID0gdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdO1xuICAgIG5ld1N0YWNrLm9wYWNpdHkgPSBjdXJyZW50U3RhY2sub3BhY2l0eTtcbiAgICBuZXdTdGFjay5maWxsU3R5bGUgPSBjdXJyZW50U3RhY2suZmlsbFN0eWxlO1xuICAgIG5ld1N0YWNrLnN0cm9rZVN0eWxlID0gY3VycmVudFN0YWNrLnN0cm9rZVN0eWxlO1xuICAgIG5ld1N0YWNrLmxpbmVXaWR0aCA9IGN1cnJlbnRTdGFjay5saW5lV2lkdGg7XG4gICAgbmV3U3RhY2subGluZUNhcCA9IGN1cnJlbnRTdGFjay5saW5lQ2FwO1xuICAgIG5ld1N0YWNrLmxpbmVKb2luID0gY3VycmVudFN0YWNrLmxpbmVKb2luO1xuICAgIG5ld1N0YWNrLm1pdGVyTGltaXQgPSBjdXJyZW50U3RhY2subWl0ZXJMaW1pdDtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5zZXRPcGFjaXR5ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm9wYWNpdHkgPSB2YWx1ZTtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5zZXRDb250ZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5uYXRpdmVDb250ZXh0ID0gdmFsdWU7XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuZmlsbFN0eWxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5maWxsU3R5bGUgIT09IHZhbHVlKSB7XG4gICAgICB0aGlzLmN1cnJlbnRGaWxsU3R5bGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5maWxsU3R5bGUgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUuc3Ryb2tlU3R5bGUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLnN0cm9rZVN0eWxlICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50U3Ryb2tlU3R5bGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5zdHJva2VTdHlsZSA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5saW5lV2lkdGggPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmxpbmVXaWR0aCAhPT0gdmFsdWUpIHtcbiAgICAgIHRoaXMuY3VycmVudExpbmVXaWR0aCA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmxpbmVXaWR0aCA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5saW5lQ2FwID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lQ2FwICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50TGluZUNhcCA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmxpbmVDYXAgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUubGluZUpvaW4gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLmxpbmVKb2luICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50TGluZUpvaW4gPSB2YWx1ZTtcbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5saW5lSm9pbiA9IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5taXRlckxpbWl0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5taXRlckxpbWl0ICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5jdXJyZW50TWl0ZXJMaW1pdCA9IHZhbHVlO1xuICAgICAgdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm1pdGVyTGltaXQgPSB2YWx1ZTtcbiAgICB9XG4gIH07XG5cbiAgQ1ZDb250ZXh0RGF0YS5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24gKHByb3BzKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1NYXQuY2xvbmVGcm9tUHJvcHMocHJvcHMpOyAvLyBUYWtpbmcgdGhlIGxhc3QgdHJhbnNmb3JtIHZhbHVlIGZyb20gdGhlIHN0b3JlZCBzdGFjayBvZiB0cmFuc2Zvcm1zXG5cbiAgICB2YXIgY3VycmVudFRyYW5zZm9ybSA9IHRoaXMuY1RyOyAvLyBBcHBseWluZyB0aGUgbGFzdCB0cmFuc2Zvcm0gdmFsdWUgYWZ0ZXIgdGhlIG5ldyB0cmFuc2Zvcm0gdG8gcmVzcGVjdCB0aGUgb3JkZXIgb2YgdHJhbnNmb3JtYXRpb25zXG5cbiAgICB0aGlzLnRyYW5zZm9ybU1hdC5tdWx0aXBseShjdXJyZW50VHJhbnNmb3JtKTsgLy8gU3RvcmluZyB0aGUgbmV3IHRyYW5zZm9ybWVkIHZhbHVlIGluIHRoZSBzdG9yZWQgdHJhbnNmb3JtXG5cbiAgICBjdXJyZW50VHJhbnNmb3JtLmNsb25lRnJvbVByb3BzKHRoaXMudHJhbnNmb3JtTWF0LnByb3BzKTtcbiAgICB2YXIgdHJQcm9wcyA9IGN1cnJlbnRUcmFuc2Zvcm0ucHJvcHM7IC8vIEFwcGx5aW5nIHRoZSBuZXcgdHJhbnNmb3JtIHRvIHRoZSBjYW52YXNcblxuICAgIHRoaXMubmF0aXZlQ29udGV4dC5zZXRUcmFuc2Zvcm0odHJQcm9wc1swXSwgdHJQcm9wc1sxXSwgdHJQcm9wc1s0XSwgdHJQcm9wc1s1XSwgdHJQcm9wc1sxMl0sIHRyUHJvcHNbMTNdKTtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5vcGFjaXR5ID0gZnVuY3Rpb24gKG9wKSB7XG4gICAgdmFyIGN1cnJlbnRPcGFjaXR5ID0gdGhpcy5zdGFja1t0aGlzLmNBcnJQb3NdLm9wYWNpdHk7XG4gICAgY3VycmVudE9wYWNpdHkgKj0gb3AgPCAwID8gMCA6IG9wO1xuXG4gICAgaWYgKHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5ICE9PSBjdXJyZW50T3BhY2l0eSkge1xuICAgICAgaWYgKHRoaXMuY3VycmVudE9wYWNpdHkgIT09IG9wKSB7XG4gICAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5nbG9iYWxBbHBoYSA9IG9wO1xuICAgICAgICB0aGlzLmN1cnJlbnRPcGFjaXR5ID0gb3A7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc3RhY2tbdGhpcy5jQXJyUG9zXS5vcGFjaXR5ID0gY3VycmVudE9wYWNpdHk7XG4gICAgfVxuICB9O1xuXG4gIENWQ29udGV4dERhdGEucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiAocnVsZSkge1xuICAgIGlmICh0aGlzLmFwcGxpZWRGaWxsU3R5bGUgIT09IHRoaXMuY3VycmVudEZpbGxTdHlsZSkge1xuICAgICAgdGhpcy5hcHBsaWVkRmlsbFN0eWxlID0gdGhpcy5jdXJyZW50RmlsbFN0eWxlO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMuYXBwbGllZEZpbGxTdHlsZTtcbiAgICB9XG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZmlsbChydWxlKTtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5maWxsUmVjdCA9IGZ1bmN0aW9uICh4LCB5LCB3LCBoKSB7XG4gICAgaWYgKHRoaXMuYXBwbGllZEZpbGxTdHlsZSAhPT0gdGhpcy5jdXJyZW50RmlsbFN0eWxlKSB7XG4gICAgICB0aGlzLmFwcGxpZWRGaWxsU3R5bGUgPSB0aGlzLmN1cnJlbnRGaWxsU3R5bGU7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5hcHBsaWVkRmlsbFN0eWxlO1xuICAgIH1cblxuICAgIHRoaXMubmF0aXZlQ29udGV4dC5maWxsUmVjdCh4LCB5LCB3LCBoKTtcbiAgfTtcblxuICBDVkNvbnRleHREYXRhLnByb3RvdHlwZS5zdHJva2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuYXBwbGllZFN0cm9rZVN0eWxlICE9PSB0aGlzLmN1cnJlbnRTdHJva2VTdHlsZSkge1xuICAgICAgdGhpcy5hcHBsaWVkU3Ryb2tlU3R5bGUgPSB0aGlzLmN1cnJlbnRTdHJva2VTdHlsZTtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMuYXBwbGllZFN0cm9rZVN0eWxlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcGxpZWRMaW5lV2lkdGggIT09IHRoaXMuY3VycmVudExpbmVXaWR0aCkge1xuICAgICAgdGhpcy5hcHBsaWVkTGluZVdpZHRoID0gdGhpcy5jdXJyZW50TGluZVdpZHRoO1xuICAgICAgdGhpcy5uYXRpdmVDb250ZXh0LmxpbmVXaWR0aCA9IHRoaXMuYXBwbGllZExpbmVXaWR0aDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hcHBsaWVkTGluZUNhcCAhPT0gdGhpcy5jdXJyZW50TGluZUNhcCkge1xuICAgICAgdGhpcy5hcHBsaWVkTGluZUNhcCA9IHRoaXMuY3VycmVudExpbmVDYXA7XG4gICAgICB0aGlzLm5hdGl2ZUNvbnRleHQubGluZUNhcCA9IHRoaXMuYXBwbGllZExpbmVDYXA7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYXBwbGllZExpbmVKb2luICE9PSB0aGlzLmN1cnJlbnRMaW5lSm9pbikge1xuICAgICAgdGhpcy5hcHBsaWVkTGluZUpvaW4gPSB0aGlzLmN1cnJlbnRMaW5lSm9pbjtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5saW5lSm9pbiA9IHRoaXMuYXBwbGllZExpbmVKb2luO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmFwcGxpZWRNaXRlckxpbWl0ICE9PSB0aGlzLmN1cnJlbnRNaXRlckxpbWl0KSB7XG4gICAgICB0aGlzLmFwcGxpZWRNaXRlckxpbWl0ID0gdGhpcy5jdXJyZW50TWl0ZXJMaW1pdDtcbiAgICAgIHRoaXMubmF0aXZlQ29udGV4dC5taXRlckxpbWl0ID0gdGhpcy5hcHBsaWVkTWl0ZXJMaW1pdDtcbiAgICB9XG5cbiAgICB0aGlzLm5hdGl2ZUNvbnRleHQuc3Ryb2tlKCk7XG4gIH07XG5cbiAgZnVuY3Rpb24gQ1ZDb21wRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHRoaXMubGF5ZXJzID0gZGF0YS5sYXllcnM7XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnRzID0gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLmxheWVycy5sZW5ndGgpO1xuICAgIHRoaXMuaW5pdEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy50bSA9IGRhdGEudG0gPyBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCh0aGlzLCBkYXRhLnRtLCAwLCBnbG9iYWxEYXRhLmZyYW1lUmF0ZSwgdGhpcykgOiB7XG4gICAgICBfcGxhY2Vob2xkZXI6IHRydWVcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtDYW52YXNSZW5kZXJlckJhc2UsIElDb21wRWxlbWVudCwgQ1ZCYXNlRWxlbWVudF0sIENWQ29tcEVsZW1lbnQpO1xuXG4gIENWQ29tcEVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3R4ID0gdGhpcy5jYW52YXNDb250ZXh0O1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHgubW92ZVRvKDAsIDApO1xuICAgIGN0eC5saW5lVG8odGhpcy5kYXRhLncsIDApO1xuICAgIGN0eC5saW5lVG8odGhpcy5kYXRhLncsIHRoaXMuZGF0YS5oKTtcbiAgICBjdHgubGluZVRvKDAsIHRoaXMuZGF0YS5oKTtcbiAgICBjdHgubGluZVRvKDAsIDApO1xuICAgIGN0eC5jbGlwKCk7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICBpZiAodGhpcy5jb21wbGV0ZUxheWVycyB8fCB0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0ucmVuZGVyRnJhbWUoKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgQ1ZDb21wRWxlbWVudC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5sYXllcnMubGVuZ3RoO1xuXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAgIGlmICh0aGlzLmVsZW1lbnRzW2ldKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMubGF5ZXJzID0gbnVsbDtcbiAgICB0aGlzLmVsZW1lbnRzID0gbnVsbDtcbiAgfTtcblxuICBDVkNvbXBFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb21wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IENWQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBDYW52YXNSZW5kZXJlcihhbmltYXRpb25JdGVtLCBjb25maWcpIHtcbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0gPSBhbmltYXRpb25JdGVtO1xuICAgIHRoaXMucmVuZGVyQ29uZmlnID0ge1xuICAgICAgY2xlYXJDYW52YXM6IGNvbmZpZyAmJiBjb25maWcuY2xlYXJDYW52YXMgIT09IHVuZGVmaW5lZCA/IGNvbmZpZy5jbGVhckNhbnZhcyA6IHRydWUsXG4gICAgICBjb250ZXh0OiBjb25maWcgJiYgY29uZmlnLmNvbnRleHQgfHwgbnVsbCxcbiAgICAgIHByb2dyZXNzaXZlTG9hZDogY29uZmlnICYmIGNvbmZpZy5wcm9ncmVzc2l2ZUxvYWQgfHwgZmFsc2UsXG4gICAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvOiBjb25maWcgJiYgY29uZmlnLnByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIG1lZXQnLFxuICAgICAgaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvOiBjb25maWcgJiYgY29uZmlnLmltYWdlUHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgc2xpY2UnLFxuICAgICAgY29udGVudFZpc2liaWxpdHk6IGNvbmZpZyAmJiBjb25maWcuY29udGVudFZpc2liaWxpdHkgfHwgJ3Zpc2libGUnLFxuICAgICAgY2xhc3NOYW1lOiBjb25maWcgJiYgY29uZmlnLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgIGlkOiBjb25maWcgJiYgY29uZmlnLmlkIHx8ICcnLFxuICAgICAgcnVuRXhwcmVzc2lvbnM6ICFjb25maWcgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnJ1bkV4cHJlc3Npb25zXG4gICAgfTtcbiAgICB0aGlzLnJlbmRlckNvbmZpZy5kcHIgPSBjb25maWcgJiYgY29uZmlnLmRwciB8fCAxO1xuXG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyKSB7XG4gICAgICB0aGlzLnJlbmRlckNvbmZpZy5kcHIgPSBjb25maWcgJiYgY29uZmlnLmRwciB8fCB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHtcbiAgICAgIGZyYW1lTnVtOiAtMSxcbiAgICAgIF9tZGY6IGZhbHNlLFxuICAgICAgcmVuZGVyQ29uZmlnOiB0aGlzLnJlbmRlckNvbmZpZyxcbiAgICAgIGN1cnJlbnRHbG9iYWxBbHBoYTogLTFcbiAgICB9O1xuICAgIHRoaXMuY29udGV4dERhdGEgPSBuZXcgQ1ZDb250ZXh0RGF0YSgpO1xuICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMudHJhbnNmb3JtTWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMuY29tcGxldGVMYXllcnMgPSBmYWxzZTtcbiAgICB0aGlzLnJlbmRlcmVyVHlwZSA9ICdjYW52YXMnO1xuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsZWFyQ2FudmFzKSB7XG4gICAgICB0aGlzLmN0eFRyYW5zZm9ybSA9IHRoaXMuY29udGV4dERhdGEudHJhbnNmb3JtLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eE9wYWNpdHkgPSB0aGlzLmNvbnRleHREYXRhLm9wYWNpdHkuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4RmlsbFN0eWxlID0gdGhpcy5jb250ZXh0RGF0YS5maWxsU3R5bGUuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4U3Ryb2tlU3R5bGUgPSB0aGlzLmNvbnRleHREYXRhLnN0cm9rZVN0eWxlLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eExpbmVXaWR0aCA9IHRoaXMuY29udGV4dERhdGEubGluZVdpZHRoLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eExpbmVDYXAgPSB0aGlzLmNvbnRleHREYXRhLmxpbmVDYXAuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4TGluZUpvaW4gPSB0aGlzLmNvbnRleHREYXRhLmxpbmVKb2luLmJpbmQodGhpcy5jb250ZXh0RGF0YSk7XG4gICAgICB0aGlzLmN0eE1pdGVyTGltaXQgPSB0aGlzLmNvbnRleHREYXRhLm1pdGVyTGltaXQuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4RmlsbCA9IHRoaXMuY29udGV4dERhdGEuZmlsbC5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgICAgdGhpcy5jdHhGaWxsUmVjdCA9IHRoaXMuY29udGV4dERhdGEuZmlsbFJlY3QuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuY3R4U3Ryb2tlID0gdGhpcy5jb250ZXh0RGF0YS5zdHJva2UuYmluZCh0aGlzLmNvbnRleHREYXRhKTtcbiAgICAgIHRoaXMuc2F2ZSA9IHRoaXMuY29udGV4dERhdGEuc2F2ZS5iaW5kKHRoaXMuY29udGV4dERhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQ2FudmFzUmVuZGVyZXJCYXNlXSwgQ2FudmFzUmVuZGVyZXIpO1xuXG4gIENhbnZhc1JlbmRlcmVyLnByb3RvdHlwZS5jcmVhdGVDb21wID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICByZXR1cm4gbmV3IENWQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBmdW5jdGlvbiBIQmFzZUVsZW1lbnQoKSB7fVxuXG4gIEhCYXNlRWxlbWVudC5wcm90b3R5cGUgPSB7XG4gICAgY2hlY2tCbGVuZE1vZGU6IGZ1bmN0aW9uIGNoZWNrQmxlbmRNb2RlKCkge30sXG4gICAgaW5pdFJlbmRlcmVyRWxlbWVudDogZnVuY3Rpb24gaW5pdFJlbmRlcmVyRWxlbWVudCgpIHtcbiAgICAgIHRoaXMuYmFzZUVsZW1lbnQgPSBjcmVhdGVUYWcodGhpcy5kYXRhLnRnIHx8ICdkaXYnKTtcblxuICAgICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSBjcmVhdGVOUygnZycpO1xuICAgICAgICB0aGlzLm1hc2tlZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMubGF5ZXJFbGVtZW50KTtcbiAgICAgICAgdGhpcy5iYXNlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnN2Z0VsZW1lbnQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYXllckVsZW1lbnQgPSB0aGlzLmJhc2VFbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBzdHlsZURpdih0aGlzLmJhc2VFbGVtZW50KTtcbiAgICB9LFxuICAgIGNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzOiBmdW5jdGlvbiBjcmVhdGVDb250YWluZXJFbGVtZW50cygpIHtcbiAgICAgIHRoaXMucmVuZGVyYWJsZUVmZmVjdHNNYW5hZ2VyID0gbmV3IENWRWZmZWN0cyh0aGlzKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gdGhpcy5iYXNlRWxlbWVudDtcbiAgICAgIHRoaXMubWFza2VkRWxlbWVudCA9IHRoaXMubGF5ZXJFbGVtZW50O1xuXG4gICAgICBpZiAodGhpcy5kYXRhLmxuKSB7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmRhdGEubG4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLmNsKSB7XG4gICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCB0aGlzLmRhdGEuY2wpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5kYXRhLmJtICE9PSAwKSB7XG4gICAgICAgIHRoaXMuc2V0QmxlbmRNb2RlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZW5kZXJFbGVtZW50OiBmdW5jdGlvbiByZW5kZXJFbGVtZW50KCkge1xuICAgICAgdmFyIHRyYW5zZm9ybWVkRWxlbWVudFN0eWxlID0gdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPyB0aGlzLnRyYW5zZm9ybWVkRWxlbWVudC5zdHlsZSA6IHt9O1xuXG4gICAgICBpZiAodGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKSB7XG4gICAgICAgIHZhciBtYXRyaXhWYWx1ZSA9IHRoaXMuZmluYWxUcmFuc2Zvcm0ubWF0LnRvQ1NTKCk7XG4gICAgICAgIHRyYW5zZm9ybWVkRWxlbWVudFN0eWxlLnRyYW5zZm9ybSA9IG1hdHJpeFZhbHVlO1xuICAgICAgICB0cmFuc2Zvcm1lZEVsZW1lbnRTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBtYXRyaXhWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmluYWxUcmFuc2Zvcm0uX29wTWRmKSB7XG4gICAgICAgIHRyYW5zZm9ybWVkRWxlbWVudFN0eWxlLm9wYWNpdHkgPSB0aGlzLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLm8udjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHJlbmRlckZyYW1lOiBmdW5jdGlvbiByZW5kZXJGcmFtZSgpIHtcbiAgICAgIC8vIElmIGl0IGlzIGV4cG9ydGVkIGFzIGhpZGRlbiAoZGF0YS5oZCA9PT0gdHJ1ZSkgbm8gbmVlZCB0byByZW5kZXJcbiAgICAgIC8vIElmIGl0IGlzIG5vdCB2aXNpYmxlIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICBpZiAodGhpcy5kYXRhLmhkIHx8IHRoaXMuaGlkZGVuKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJUcmFuc2Zvcm0oKTtcbiAgICAgIHRoaXMucmVuZGVyUmVuZGVyYWJsZSgpO1xuICAgICAgdGhpcy5yZW5kZXJFbGVtZW50KCk7XG4gICAgICB0aGlzLnJlbmRlcklubmVyQ29udGVudCgpO1xuXG4gICAgICBpZiAodGhpcy5faXNGaXJzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gbnVsbDtcblxuICAgICAgaWYgKHRoaXMubWF0dGVFbGVtZW50KSB7XG4gICAgICAgIHRoaXMubWF0dGVFbGVtZW50ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMubWFza01hbmFnZXIpIHtcbiAgICAgICAgdGhpcy5tYXNrTWFuYWdlci5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubWFza01hbmFnZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgY3JlYXRlUmVuZGVyYWJsZUNvbXBvbmVudHM6IGZ1bmN0aW9uIGNyZWF0ZVJlbmRlcmFibGVDb21wb25lbnRzKCkge1xuICAgICAgdGhpcy5tYXNrTWFuYWdlciA9IG5ldyBNYXNrRWxlbWVudCh0aGlzLmRhdGEsIHRoaXMsIHRoaXMuZ2xvYmFsRGF0YSk7XG4gICAgfSxcbiAgICBhZGRFZmZlY3RzOiBmdW5jdGlvbiBhZGRFZmZlY3RzKCkge30sXG4gICAgc2V0TWF0dGU6IGZ1bmN0aW9uIHNldE1hdHRlKCkge31cbiAgfTtcbiAgSEJhc2VFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudCA9IFNWR0Jhc2VFbGVtZW50LnByb3RvdHlwZS5nZXRCYXNlRWxlbWVudDtcbiAgSEJhc2VFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95QmFzZUVsZW1lbnQgPSBIQmFzZUVsZW1lbnQucHJvdG90eXBlLmRlc3Ryb3k7XG4gIEhCYXNlRWxlbWVudC5wcm90b3R5cGUuYnVpbGRFbGVtZW50UGFyZW50aW5nID0gQmFzZVJlbmRlcmVyLnByb3RvdHlwZS5idWlsZEVsZW1lbnRQYXJlbnRpbmc7XG5cbiAgZnVuY3Rpb24gSFNvbGlkRWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKSB7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRE9NRWxlbWVudF0sIEhTb2xpZEVsZW1lbnQpO1xuXG4gIEhTb2xpZEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHJlY3Q7XG5cbiAgICBpZiAodGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgIHJlY3QgPSBjcmVhdGVOUygncmVjdCcpO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5kYXRhLnN3KTtcbiAgICAgIHJlY3Quc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmRhdGEuc2gpO1xuICAgICAgcmVjdC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCB0aGlzLmRhdGEuc2MpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0aGlzLmRhdGEuc3cpO1xuICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgdGhpcy5kYXRhLnNoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVjdCA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgICByZWN0LnN0eWxlLndpZHRoID0gdGhpcy5kYXRhLnN3ICsgJ3B4JztcbiAgICAgIHJlY3Quc3R5bGUuaGVpZ2h0ID0gdGhpcy5kYXRhLnNoICsgJ3B4JztcbiAgICAgIHJlY3Quc3R5bGUuYmFja2dyb3VuZENvbG9yID0gdGhpcy5kYXRhLnNjO1xuICAgIH1cblxuICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHJlY3QpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEhTaGFwZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIC8vIExpc3Qgb2YgZHJhd2FibGUgZWxlbWVudHNcbiAgICB0aGlzLnNoYXBlcyA9IFtdOyAvLyBGdWxsIHNoYXBlIGRhdGFcblxuICAgIHRoaXMuc2hhcGVzRGF0YSA9IGRhdGEuc2hhcGVzOyAvLyBMaXN0IG9mIHN0eWxlcyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBzaGFwZXNcblxuICAgIHRoaXMuc3R5bGVzTGlzdCA9IFtdOyAvLyBMaXN0IG9mIG1vZGlmaWVycyB0aGF0IHdpbGwgYmUgYXBwbGllZCB0byBzaGFwZXNcblxuICAgIHRoaXMuc2hhcGVNb2RpZmllcnMgPSBbXTsgLy8gTGlzdCBvZiBpdGVtcyBpbiBzaGFwZSB0cmVlXG5cbiAgICB0aGlzLml0ZW1zRGF0YSA9IFtdOyAvLyBMaXN0IG9mIGl0ZW1zIGluIHByZXZpb3VzIHNoYXBlIHRyZWVcblxuICAgIHRoaXMucHJvY2Vzc2VkRWxlbWVudHMgPSBbXTsgLy8gTGlzdCBvZiBhbmltYXRlZCBjb21wb25lbnRzXG5cbiAgICB0aGlzLmFuaW1hdGVkQ29udGVudHMgPSBbXTtcbiAgICB0aGlzLnNoYXBlc0NvbnRhaW5lciA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTsgLy8gTW92aW5nIGFueSBwcm9wZXJ0eSB0aGF0IGRvZXNuJ3QgZ2V0IHRvbyBtdWNoIGFjY2VzcyBhZnRlciBpbml0aWFsaXphdGlvbiBiZWNhdXNlIG9mIHY4IHdheSBvZiBoYW5kbGluZyBtb3JlIHRoYW4gMTAgcHJvcGVydGllcy5cbiAgICAvLyBMaXN0IG9mIGVsZW1lbnRzIHRoYXQgaGF2ZSBiZWVuIGNyZWF0ZWRcblxuICAgIHRoaXMucHJldlZpZXdEYXRhID0gW107XG4gICAgdGhpcy5jdXJyZW50QkJveCA9IHtcbiAgICAgIHg6IDk5OTk5OSxcbiAgICAgIHk6IC05OTk5OTksXG4gICAgICBoOiAwLFxuICAgICAgdzogMFxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0Jhc2VFbGVtZW50LCBUcmFuc2Zvcm1FbGVtZW50LCBIU29saWRFbGVtZW50LCBTVkdTaGFwZUVsZW1lbnQsIEhCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIEhTaGFwZUVsZW1lbnQpO1xuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5fcmVuZGVyU2hhcGVGcmFtZSA9IEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLnJlbmRlcklubmVyQ29udGVudDtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jcmVhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBjb250O1xuICAgIHRoaXMuYmFzZUVsZW1lbnQuc3R5bGUuZm9udFNpemUgPSAwO1xuXG4gICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnNoYXBlc0NvbnRhaW5lcik7XG4gICAgICBjb250ID0gdGhpcy5zdmdFbGVtZW50O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ID0gY3JlYXRlTlMoJ3N2ZycpO1xuICAgICAgdmFyIHNpemUgPSB0aGlzLmNvbXAuZGF0YSA/IHRoaXMuY29tcC5kYXRhIDogdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplO1xuICAgICAgY29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgc2l6ZS53KTtcbiAgICAgIGNvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBzaXplLmgpO1xuICAgICAgY29udC5hcHBlbmRDaGlsZCh0aGlzLnNoYXBlc0NvbnRhaW5lcik7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChjb250KTtcbiAgICB9XG5cbiAgICB0aGlzLnNlYXJjaFNoYXBlcyh0aGlzLnNoYXBlc0RhdGEsIHRoaXMuaXRlbXNEYXRhLCB0aGlzLnByZXZWaWV3RGF0YSwgdGhpcy5zaGFwZXNDb250YWluZXIsIDAsIFtdLCB0cnVlKTtcbiAgICB0aGlzLmZpbHRlclVuaXF1ZVNoYXBlcygpO1xuICAgIHRoaXMuc2hhcGVDb250ID0gY29udDtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5nZXRUcmFuc2Zvcm1lZFBvaW50ID0gZnVuY3Rpb24gKHRyYW5zZm9ybWVycywgcG9pbnQpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdHJhbnNmb3JtZXJzLmxlbmd0aDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgcG9pbnQgPSB0cmFuc2Zvcm1lcnNbaV0ubVByb3BzLnYuYXBwbHlUb1BvaW50QXJyYXkocG9pbnRbMF0sIHBvaW50WzFdLCAwKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnQ7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuY2FsY3VsYXRlU2hhcGVCb3VuZGluZ0JveCA9IGZ1bmN0aW9uIChpdGVtLCBib3VuZGluZ0JveCkge1xuICAgIHZhciBzaGFwZSA9IGl0ZW0uc2gudjtcbiAgICB2YXIgdHJhbnNmb3JtZXJzID0gaXRlbS50cmFuc2Zvcm1lcnM7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHNoYXBlLl9sZW5ndGg7XG4gICAgdmFyIHZQb2ludDtcbiAgICB2YXIgb1BvaW50O1xuICAgIHZhciBuZXh0SVBvaW50O1xuICAgIHZhciBuZXh0VlBvaW50O1xuXG4gICAgaWYgKGxlbiA8PSAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7IGkgKz0gMSkge1xuICAgICAgdlBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUudltpXSk7XG4gICAgICBvUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS5vW2ldKTtcbiAgICAgIG5leHRJUG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS5pW2kgKyAxXSk7XG4gICAgICBuZXh0VlBvaW50ID0gdGhpcy5nZXRUcmFuc2Zvcm1lZFBvaW50KHRyYW5zZm9ybWVycywgc2hhcGUudltpICsgMV0pO1xuICAgICAgdGhpcy5jaGVja0JvdW5kcyh2UG9pbnQsIG9Qb2ludCwgbmV4dElQb2ludCwgbmV4dFZQb2ludCwgYm91bmRpbmdCb3gpO1xuICAgIH1cblxuICAgIGlmIChzaGFwZS5jKSB7XG4gICAgICB2UG9pbnQgPSB0aGlzLmdldFRyYW5zZm9ybWVkUG9pbnQodHJhbnNmb3JtZXJzLCBzaGFwZS52W2ldKTtcbiAgICAgIG9Qb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLm9baV0pO1xuICAgICAgbmV4dElQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLmlbMF0pO1xuICAgICAgbmV4dFZQb2ludCA9IHRoaXMuZ2V0VHJhbnNmb3JtZWRQb2ludCh0cmFuc2Zvcm1lcnMsIHNoYXBlLnZbMF0pO1xuICAgICAgdGhpcy5jaGVja0JvdW5kcyh2UG9pbnQsIG9Qb2ludCwgbmV4dElQb2ludCwgbmV4dFZQb2ludCwgYm91bmRpbmdCb3gpO1xuICAgIH1cbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jaGVja0JvdW5kcyA9IGZ1bmN0aW9uICh2UG9pbnQsIG9Qb2ludCwgbmV4dElQb2ludCwgbmV4dFZQb2ludCwgYm91bmRpbmdCb3gpIHtcbiAgICB0aGlzLmdldEJvdW5kc09mQ3VydmUodlBvaW50LCBvUG9pbnQsIG5leHRJUG9pbnQsIG5leHRWUG9pbnQpO1xuICAgIHZhciBib3VuZHMgPSB0aGlzLnNoYXBlQm91bmRpbmdCb3g7XG4gICAgYm91bmRpbmdCb3gueCA9IGJtTWluKGJvdW5kcy5sZWZ0LCBib3VuZGluZ0JveC54KTtcbiAgICBib3VuZGluZ0JveC54TWF4ID0gYm1NYXgoYm91bmRzLnJpZ2h0LCBib3VuZGluZ0JveC54TWF4KTtcbiAgICBib3VuZGluZ0JveC55ID0gYm1NaW4oYm91bmRzLnRvcCwgYm91bmRpbmdCb3gueSk7XG4gICAgYm91bmRpbmdCb3gueU1heCA9IGJtTWF4KGJvdW5kcy5ib3R0b20sIGJvdW5kaW5nQm94LnlNYXgpO1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLnNoYXBlQm91bmRpbmdCb3ggPSB7XG4gICAgbGVmdDogMCxcbiAgICByaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgYm90dG9tOiAwXG4gIH07XG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLnRlbXBCb3VuZGluZ0JveCA9IHtcbiAgICB4OiAwLFxuICAgIHhNYXg6IDAsXG4gICAgeTogMCxcbiAgICB5TWF4OiAwLFxuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMFxuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmdldEJvdW5kc09mQ3VydmUgPSBmdW5jdGlvbiAocDAsIHAxLCBwMiwgcDMpIHtcbiAgICB2YXIgYm91bmRzID0gW1twMFswXSwgcDNbMF1dLCBbcDBbMV0sIHAzWzFdXV07XG5cbiAgICBmb3IgKHZhciBhLCBiLCBjLCB0LCBiMmFjLCB0MSwgdDIsIGkgPSAwOyBpIDwgMjsgKytpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBsdXNwbHVzXG4gICAgICBiID0gNiAqIHAwW2ldIC0gMTIgKiBwMVtpXSArIDYgKiBwMltpXTtcbiAgICAgIGEgPSAtMyAqIHAwW2ldICsgOSAqIHAxW2ldIC0gOSAqIHAyW2ldICsgMyAqIHAzW2ldO1xuICAgICAgYyA9IDMgKiBwMVtpXSAtIDMgKiBwMFtpXTtcbiAgICAgIGIgfD0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1iaXR3aXNlXG5cbiAgICAgIGEgfD0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1iaXR3aXNlXG5cbiAgICAgIGMgfD0gMDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1iaXR3aXNlXG5cbiAgICAgIGlmIChhID09PSAwICYmIGIgPT09IDApIHsvL1xuICAgICAgfSBlbHNlIGlmIChhID09PSAwKSB7XG4gICAgICAgIHQgPSAtYyAvIGI7XG5cbiAgICAgICAgaWYgKHQgPiAwICYmIHQgPCAxKSB7XG4gICAgICAgICAgYm91bmRzW2ldLnB1c2godGhpcy5jYWxjdWxhdGVGKHQsIHAwLCBwMSwgcDIsIHAzLCBpKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGIyYWMgPSBiICogYiAtIDQgKiBjICogYTtcblxuICAgICAgICBpZiAoYjJhYyA+PSAwKSB7XG4gICAgICAgICAgdDEgPSAoLWIgKyBibVNxcnQoYjJhYykpIC8gKDIgKiBhKTtcbiAgICAgICAgICBpZiAodDEgPiAwICYmIHQxIDwgMSkgYm91bmRzW2ldLnB1c2godGhpcy5jYWxjdWxhdGVGKHQxLCBwMCwgcDEsIHAyLCBwMywgaSkpO1xuICAgICAgICAgIHQyID0gKC1iIC0gYm1TcXJ0KGIyYWMpKSAvICgyICogYSk7XG4gICAgICAgICAgaWYgKHQyID4gMCAmJiB0MiA8IDEpIGJvdW5kc1tpXS5wdXNoKHRoaXMuY2FsY3VsYXRlRih0MiwgcDAsIHAxLCBwMiwgcDMsIGkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuc2hhcGVCb3VuZGluZ0JveC5sZWZ0ID0gYm1NaW4uYXBwbHkobnVsbCwgYm91bmRzWzBdKTtcbiAgICB0aGlzLnNoYXBlQm91bmRpbmdCb3gudG9wID0gYm1NaW4uYXBwbHkobnVsbCwgYm91bmRzWzFdKTtcbiAgICB0aGlzLnNoYXBlQm91bmRpbmdCb3gucmlnaHQgPSBibU1heC5hcHBseShudWxsLCBib3VuZHNbMF0pO1xuICAgIHRoaXMuc2hhcGVCb3VuZGluZ0JveC5ib3R0b20gPSBibU1heC5hcHBseShudWxsLCBib3VuZHNbMV0pO1xuICB9O1xuXG4gIEhTaGFwZUVsZW1lbnQucHJvdG90eXBlLmNhbGN1bGF0ZUYgPSBmdW5jdGlvbiAodCwgcDAsIHAxLCBwMiwgcDMsIGkpIHtcbiAgICByZXR1cm4gYm1Qb3coMSAtIHQsIDMpICogcDBbaV0gKyAzICogYm1Qb3coMSAtIHQsIDIpICogdCAqIHAxW2ldICsgMyAqICgxIC0gdCkgKiBibVBvdyh0LCAyKSAqIHAyW2ldICsgYm1Qb3codCwgMykgKiBwM1tpXTtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jYWxjdWxhdGVCb3VuZGluZ0JveCA9IGZ1bmN0aW9uIChpdGVtc0RhdGEsIGJvdW5kaW5nQm94KSB7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IGl0ZW1zRGF0YS5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmIChpdGVtc0RhdGFbaV0gJiYgaXRlbXNEYXRhW2ldLnNoKSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlU2hhcGVCb3VuZGluZ0JveChpdGVtc0RhdGFbaV0sIGJvdW5kaW5nQm94KTtcbiAgICAgIH0gZWxzZSBpZiAoaXRlbXNEYXRhW2ldICYmIGl0ZW1zRGF0YVtpXS5pdCkge1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUJvdW5kaW5nQm94KGl0ZW1zRGF0YVtpXS5pdCwgYm91bmRpbmdCb3gpO1xuICAgICAgfSBlbHNlIGlmIChpdGVtc0RhdGFbaV0gJiYgaXRlbXNEYXRhW2ldLnN0eWxlICYmIGl0ZW1zRGF0YVtpXS53KSB7XG4gICAgICAgIHRoaXMuZXhwYW5kU3Ryb2tlQm91bmRpbmdCb3goaXRlbXNEYXRhW2ldLncsIGJvdW5kaW5nQm94KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUuZXhwYW5kU3Ryb2tlQm91bmRpbmdCb3ggPSBmdW5jdGlvbiAod2lkdGhQcm9wZXJ0eSwgYm91bmRpbmdCb3gpIHtcbiAgICB2YXIgd2lkdGggPSAwO1xuXG4gICAgaWYgKHdpZHRoUHJvcGVydHkua2V5ZnJhbWVzKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoUHJvcGVydHkua2V5ZnJhbWVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHZhciBrZncgPSB3aWR0aFByb3BlcnR5LmtleWZyYW1lc1tpXS5zO1xuXG4gICAgICAgIGlmIChrZncgPiB3aWR0aCkge1xuICAgICAgICAgIHdpZHRoID0ga2Z3O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHdpZHRoICo9IHdpZHRoUHJvcGVydHkubXVsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgd2lkdGggPSB3aWR0aFByb3BlcnR5LnYgKiB3aWR0aFByb3BlcnR5Lm11bHQ7XG4gICAgfVxuXG4gICAgYm91bmRpbmdCb3gueCAtPSB3aWR0aDtcbiAgICBib3VuZGluZ0JveC54TWF4ICs9IHdpZHRoO1xuICAgIGJvdW5kaW5nQm94LnkgLT0gd2lkdGg7XG4gICAgYm91bmRpbmdCb3gueU1heCArPSB3aWR0aDtcbiAgfTtcblxuICBIU2hhcGVFbGVtZW50LnByb3RvdHlwZS5jdXJyZW50Qm94Q29udGFpbnMgPSBmdW5jdGlvbiAoYm94KSB7XG4gICAgcmV0dXJuIHRoaXMuY3VycmVudEJCb3gueCA8PSBib3gueCAmJiB0aGlzLmN1cnJlbnRCQm94LnkgPD0gYm94LnkgJiYgdGhpcy5jdXJyZW50QkJveC53aWR0aCArIHRoaXMuY3VycmVudEJCb3gueCA+PSBib3gueCArIGJveC53aWR0aCAmJiB0aGlzLmN1cnJlbnRCQm94LmhlaWdodCArIHRoaXMuY3VycmVudEJCb3gueSA+PSBib3gueSArIGJveC5oZWlnaHQ7XG4gIH07XG5cbiAgSFNoYXBlRWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3JlbmRlclNoYXBlRnJhbWUoKTtcblxuICAgIGlmICghdGhpcy5oaWRkZW4gJiYgKHRoaXMuX2lzRmlyc3RGcmFtZSB8fCB0aGlzLl9tZGYpKSB7XG4gICAgICB2YXIgdGVtcEJvdW5kaW5nQm94ID0gdGhpcy50ZW1wQm91bmRpbmdCb3g7XG4gICAgICB2YXIgbWF4ID0gOTk5OTk5O1xuICAgICAgdGVtcEJvdW5kaW5nQm94LnggPSBtYXg7XG4gICAgICB0ZW1wQm91bmRpbmdCb3gueE1heCA9IC1tYXg7XG4gICAgICB0ZW1wQm91bmRpbmdCb3gueSA9IG1heDtcbiAgICAgIHRlbXBCb3VuZGluZ0JveC55TWF4ID0gLW1heDtcbiAgICAgIHRoaXMuY2FsY3VsYXRlQm91bmRpbmdCb3godGhpcy5pdGVtc0RhdGEsIHRlbXBCb3VuZGluZ0JveCk7XG4gICAgICB0ZW1wQm91bmRpbmdCb3gud2lkdGggPSB0ZW1wQm91bmRpbmdCb3gueE1heCA8IHRlbXBCb3VuZGluZ0JveC54ID8gMCA6IHRlbXBCb3VuZGluZ0JveC54TWF4IC0gdGVtcEJvdW5kaW5nQm94Lng7XG4gICAgICB0ZW1wQm91bmRpbmdCb3guaGVpZ2h0ID0gdGVtcEJvdW5kaW5nQm94LnlNYXggPCB0ZW1wQm91bmRpbmdCb3gueSA/IDAgOiB0ZW1wQm91bmRpbmdCb3gueU1heCAtIHRlbXBCb3VuZGluZ0JveC55OyAvLyB2YXIgdGVtcEJvdW5kaW5nQm94ID0gdGhpcy5zaGFwZUNvbnQuZ2V0QkJveCgpO1xuXG4gICAgICBpZiAodGhpcy5jdXJyZW50Qm94Q29udGFpbnModGVtcEJvdW5kaW5nQm94KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCQm94LncgIT09IHRlbXBCb3VuZGluZ0JveC53aWR0aCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LncgPSB0ZW1wQm91bmRpbmdCb3gud2lkdGg7XG4gICAgICAgIHRoaXMuc2hhcGVDb250LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB0ZW1wQm91bmRpbmdCb3gud2lkdGgpO1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuY3VycmVudEJCb3guaCAhPT0gdGVtcEJvdW5kaW5nQm94LmhlaWdodCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LmggPSB0ZW1wQm91bmRpbmdCb3guaGVpZ2h0O1xuICAgICAgICB0aGlzLnNoYXBlQ29udC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRlbXBCb3VuZGluZ0JveC5oZWlnaHQpO1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNoYW5nZWQgfHwgdGhpcy5jdXJyZW50QkJveC54ICE9PSB0ZW1wQm91bmRpbmdCb3gueCB8fCB0aGlzLmN1cnJlbnRCQm94LnkgIT09IHRlbXBCb3VuZGluZ0JveC55KSB7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gudyA9IHRlbXBCb3VuZGluZ0JveC53aWR0aDtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC5oID0gdGVtcEJvdW5kaW5nQm94LmhlaWdodDtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC54ID0gdGVtcEJvdW5kaW5nQm94Lng7XG4gICAgICAgIHRoaXMuY3VycmVudEJCb3gueSA9IHRlbXBCb3VuZGluZ0JveC55O1xuICAgICAgICB0aGlzLnNoYXBlQ29udC5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLCB0aGlzLmN1cnJlbnRCQm94LnggKyAnICcgKyB0aGlzLmN1cnJlbnRCQm94LnkgKyAnICcgKyB0aGlzLmN1cnJlbnRCQm94LncgKyAnICcgKyB0aGlzLmN1cnJlbnRCQm94LmgpO1xuICAgICAgICB2YXIgc2hhcGVTdHlsZSA9IHRoaXMuc2hhcGVDb250LnN0eWxlO1xuICAgICAgICB2YXIgc2hhcGVUcmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyB0aGlzLmN1cnJlbnRCQm94LnggKyAncHgsJyArIHRoaXMuY3VycmVudEJCb3gueSArICdweCknO1xuICAgICAgICBzaGFwZVN0eWxlLnRyYW5zZm9ybSA9IHNoYXBlVHJhbnNmb3JtO1xuICAgICAgICBzaGFwZVN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHNoYXBlVHJhbnNmb3JtO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBIVGV4dEVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMudGV4dFNwYW5zID0gW107XG4gICAgdGhpcy50ZXh0UGF0aHMgPSBbXTtcbiAgICB0aGlzLmN1cnJlbnRCQm94ID0ge1xuICAgICAgeDogOTk5OTk5LFxuICAgICAgeTogLTk5OTk5OSxcbiAgICAgIGg6IDAsXG4gICAgICB3OiAwXG4gICAgfTtcbiAgICB0aGlzLnJlbmRlclR5cGUgPSAnc3ZnJztcbiAgICB0aGlzLmlzTWFza2VkID0gZmFsc2U7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhCYXNlRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRE9NRWxlbWVudCwgSVRleHRFbGVtZW50XSwgSFRleHRFbGVtZW50KTtcblxuICBIVGV4dEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5pc01hc2tlZCA9IHRoaXMuY2hlY2tNYXNrcygpO1xuXG4gICAgaWYgKHRoaXMuaXNNYXNrZWQpIHtcbiAgICAgIHRoaXMucmVuZGVyVHlwZSA9ICdzdmcnO1xuICAgICAgdGhpcy5jb21wVyA9IHRoaXMuY29tcC5kYXRhLnc7XG4gICAgICB0aGlzLmNvbXBIID0gdGhpcy5jb21wLmRhdGEuaDtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5jb21wVyk7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmNvbXBIKTtcbiAgICAgIHZhciBnID0gY3JlYXRlTlMoJ2cnKTtcbiAgICAgIHRoaXMubWFza2VkRWxlbWVudC5hcHBlbmRDaGlsZChnKTtcbiAgICAgIHRoaXMuaW5uZXJFbGVtID0gZztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJUeXBlID0gJ2h0bWwnO1xuICAgICAgdGhpcy5pbm5lckVsZW0gPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICB9XG5cbiAgICB0aGlzLmNoZWNrUGFyZW50aW5nKCk7XG4gIH07XG5cbiAgSFRleHRFbGVtZW50LnByb3RvdHlwZS5idWlsZE5ld1RleHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRvY3VtZW50RGF0YSA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhO1xuICAgIHRoaXMucmVuZGVyZWRMZXR0ZXJzID0gY3JlYXRlU2l6ZWRBcnJheShkb2N1bWVudERhdGEubCA/IGRvY3VtZW50RGF0YS5sLmxlbmd0aCA6IDApO1xuICAgIHZhciBpbm5lckVsZW1TdHlsZSA9IHRoaXMuaW5uZXJFbGVtLnN0eWxlO1xuICAgIHZhciB0ZXh0Q29sb3IgPSBkb2N1bWVudERhdGEuZmMgPyB0aGlzLmJ1aWxkQ29sb3IoZG9jdW1lbnREYXRhLmZjKSA6ICdyZ2JhKDAsMCwwLDApJztcbiAgICBpbm5lckVsZW1TdHlsZS5maWxsID0gdGV4dENvbG9yO1xuICAgIGlubmVyRWxlbVN0eWxlLmNvbG9yID0gdGV4dENvbG9yO1xuXG4gICAgaWYgKGRvY3VtZW50RGF0YS5zYykge1xuICAgICAgaW5uZXJFbGVtU3R5bGUuc3Ryb2tlID0gdGhpcy5idWlsZENvbG9yKGRvY3VtZW50RGF0YS5zYyk7XG4gICAgICBpbm5lckVsZW1TdHlsZS5zdHJva2VXaWR0aCA9IGRvY3VtZW50RGF0YS5zdyArICdweCc7XG4gICAgfVxuXG4gICAgdmFyIGZvbnREYXRhID0gdGhpcy5nbG9iYWxEYXRhLmZvbnRNYW5hZ2VyLmdldEZvbnRCeU5hbWUoZG9jdW1lbnREYXRhLmYpO1xuXG4gICAgaWYgKCF0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuY2hhcnMpIHtcbiAgICAgIGlubmVyRWxlbVN0eWxlLmZvbnRTaXplID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSArICdweCc7XG4gICAgICBpbm5lckVsZW1TdHlsZS5saW5lSGVpZ2h0ID0gZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSArICdweCc7XG5cbiAgICAgIGlmIChmb250RGF0YS5mQ2xhc3MpIHtcbiAgICAgICAgdGhpcy5pbm5lckVsZW0uY2xhc3NOYW1lID0gZm9udERhdGEuZkNsYXNzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5uZXJFbGVtU3R5bGUuZm9udEZhbWlseSA9IGZvbnREYXRhLmZGYW1pbHk7XG4gICAgICAgIHZhciBmV2VpZ2h0ID0gZG9jdW1lbnREYXRhLmZXZWlnaHQ7XG4gICAgICAgIHZhciBmU3R5bGUgPSBkb2N1bWVudERhdGEuZlN0eWxlO1xuICAgICAgICBpbm5lckVsZW1TdHlsZS5mb250U3R5bGUgPSBmU3R5bGU7XG4gICAgICAgIGlubmVyRWxlbVN0eWxlLmZvbnRXZWlnaHQgPSBmV2VpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpO1xuICAgIHZhciBsZW47XG4gICAgdmFyIGxldHRlcnMgPSBkb2N1bWVudERhdGEubDtcbiAgICBsZW4gPSBsZXR0ZXJzLmxlbmd0aDtcbiAgICB2YXIgdFNwYW47XG4gICAgdmFyIHRQYXJlbnQ7XG4gICAgdmFyIHRDb250O1xuICAgIHZhciBtYXRyaXhIZWxwZXIgPSB0aGlzLm1IZWxwZXI7XG4gICAgdmFyIHNoYXBlcztcbiAgICB2YXIgc2hhcGVTdHIgPSAnJztcbiAgICB2YXIgY250ID0gMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5jaGFycykge1xuICAgICAgICBpZiAoIXRoaXMudGV4dFBhdGhzW2NudF0pIHtcbiAgICAgICAgICB0U3BhbiA9IGNyZWF0ZU5TKCdwYXRoJyk7XG4gICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbGluZWNhcCcsIGxpbmVDYXBFbnVtWzFdKTtcbiAgICAgICAgICB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lam9pbicsIGxpbmVKb2luRW51bVsyXSk7XG4gICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdzdHJva2UtbWl0ZXJsaW1pdCcsICc0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdFNwYW4gPSB0aGlzLnRleHRQYXRoc1tjbnRdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgICAgaWYgKHRoaXMudGV4dFNwYW5zW2NudF0pIHtcbiAgICAgICAgICAgIHRQYXJlbnQgPSB0aGlzLnRleHRTcGFuc1tjbnRdO1xuICAgICAgICAgICAgdENvbnQgPSB0UGFyZW50LmNoaWxkcmVuWzBdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0UGFyZW50ID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICAgICAgICAgIHRQYXJlbnQuc3R5bGUubGluZUhlaWdodCA9IDA7XG4gICAgICAgICAgICB0Q29udCA9IGNyZWF0ZU5TKCdzdmcnKTtcbiAgICAgICAgICAgIHRDb250LmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgICAgIHN0eWxlRGl2KHRQYXJlbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghdGhpcy5pc01hc2tlZCkge1xuICAgICAgICBpZiAodGhpcy50ZXh0U3BhbnNbY250XSkge1xuICAgICAgICAgIHRQYXJlbnQgPSB0aGlzLnRleHRTcGFuc1tjbnRdO1xuICAgICAgICAgIHRTcGFuID0gdGhpcy50ZXh0UGF0aHNbY250XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0UGFyZW50ID0gY3JlYXRlVGFnKCdzcGFuJyk7XG4gICAgICAgICAgc3R5bGVEaXYodFBhcmVudCk7XG4gICAgICAgICAgdFNwYW4gPSBjcmVhdGVUYWcoJ3NwYW4nKTtcbiAgICAgICAgICBzdHlsZURpdih0U3Bhbik7XG4gICAgICAgICAgdFBhcmVudC5hcHBlbmRDaGlsZCh0U3Bhbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRTcGFuID0gdGhpcy50ZXh0UGF0aHNbY250XSA/IHRoaXMudGV4dFBhdGhzW2NudF0gOiBjcmVhdGVOUygndGV4dCcpO1xuICAgICAgfSAvLyB0U3Bhbi5zZXRBdHRyaWJ1dGUoJ3Zpc2liaWxpdHknLCAnaGlkZGVuJyk7XG5cblxuICAgICAgaWYgKHRoaXMuZ2xvYmFsRGF0YS5mb250TWFuYWdlci5jaGFycykge1xuICAgICAgICB2YXIgY2hhckRhdGEgPSB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Q2hhckRhdGEoZG9jdW1lbnREYXRhLmZpbmFsVGV4dFtpXSwgZm9udERhdGEuZlN0eWxlLCB0aGlzLmdsb2JhbERhdGEuZm9udE1hbmFnZXIuZ2V0Rm9udEJ5TmFtZShkb2N1bWVudERhdGEuZikuZkZhbWlseSk7XG4gICAgICAgIHZhciBzaGFwZURhdGE7XG5cbiAgICAgICAgaWYgKGNoYXJEYXRhKSB7XG4gICAgICAgICAgc2hhcGVEYXRhID0gY2hhckRhdGEuZGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzaGFwZURhdGEgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbWF0cml4SGVscGVyLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKHNoYXBlRGF0YSAmJiBzaGFwZURhdGEuc2hhcGVzICYmIHNoYXBlRGF0YS5zaGFwZXMubGVuZ3RoKSB7XG4gICAgICAgICAgc2hhcGVzID0gc2hhcGVEYXRhLnNoYXBlc1swXS5pdDtcbiAgICAgICAgICBtYXRyaXhIZWxwZXIuc2NhbGUoZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCwgZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEwMCk7XG4gICAgICAgICAgc2hhcGVTdHIgPSB0aGlzLmNyZWF0ZVBhdGhTaGFwZShtYXRyaXhIZWxwZXIsIHNoYXBlcyk7XG4gICAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlKCdkJywgc2hhcGVTdHIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgICAgdGhpcy5pbm5lckVsZW0uYXBwZW5kQ2hpbGQodFBhcmVudCk7XG5cbiAgICAgICAgICBpZiAoc2hhcGVEYXRhICYmIHNoYXBlRGF0YS5zaGFwZXMpIHtcbiAgICAgICAgICAgIC8vIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgaXMgbmVlZGVkIHRvIGdldCBleGFjdCBtZWFzdXJlIG9mIHNoYXBlXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRDb250KTtcbiAgICAgICAgICAgIHZhciBib3VuZGluZ0JveCA9IHRDb250LmdldEJCb3goKTtcbiAgICAgICAgICAgIHRDb250LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBib3VuZGluZ0JveC53aWR0aCArIDIpO1xuICAgICAgICAgICAgdENvbnQuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBib3VuZGluZ0JveC5oZWlnaHQgKyAyKTtcbiAgICAgICAgICAgIHRDb250LnNldEF0dHJpYnV0ZSgndmlld0JveCcsIGJvdW5kaW5nQm94LnggLSAxICsgJyAnICsgKGJvdW5kaW5nQm94LnkgLSAxKSArICcgJyArIChib3VuZGluZ0JveC53aWR0aCArIDIpICsgJyAnICsgKGJvdW5kaW5nQm94LmhlaWdodCArIDIpKTtcbiAgICAgICAgICAgIHZhciB0Q29udFN0eWxlID0gdENvbnQuc3R5bGU7XG4gICAgICAgICAgICB2YXIgdENvbnRUcmFuc2xhdGlvbiA9ICd0cmFuc2xhdGUoJyArIChib3VuZGluZ0JveC54IC0gMSkgKyAncHgsJyArIChib3VuZGluZ0JveC55IC0gMSkgKyAncHgpJztcbiAgICAgICAgICAgIHRDb250U3R5bGUudHJhbnNmb3JtID0gdENvbnRUcmFuc2xhdGlvbjtcbiAgICAgICAgICAgIHRDb250U3R5bGUud2Via2l0VHJhbnNmb3JtID0gdENvbnRUcmFuc2xhdGlvbjtcbiAgICAgICAgICAgIGxldHRlcnNbaV0ueU9mZnNldCA9IGJvdW5kaW5nQm94LnkgLSAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgMSk7XG4gICAgICAgICAgICB0Q29udC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRQYXJlbnQuYXBwZW5kQ2hpbGQodENvbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuaW5uZXJFbGVtLmFwcGVuZENoaWxkKHRTcGFuKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdFNwYW4udGV4dENvbnRlbnQgPSBsZXR0ZXJzW2ldLnZhbDtcbiAgICAgICAgdFNwYW4uc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZScsICd4bWw6c3BhY2UnLCAncHJlc2VydmUnKTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNNYXNrZWQpIHtcbiAgICAgICAgICB0aGlzLmlubmVyRWxlbS5hcHBlbmRDaGlsZCh0UGFyZW50KTsgLy9cblxuICAgICAgICAgIHZhciB0U3R5bGUgPSB0U3Bhbi5zdHlsZTtcbiAgICAgICAgICB2YXIgdFNwYW5UcmFuc2xhdGlvbiA9ICd0cmFuc2xhdGUzZCgwLCcgKyAtZG9jdW1lbnREYXRhLmZpbmFsU2l6ZSAvIDEuMiArICdweCwwKSc7XG4gICAgICAgICAgdFN0eWxlLnRyYW5zZm9ybSA9IHRTcGFuVHJhbnNsYXRpb247XG4gICAgICAgICAgdFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRTcGFuVHJhbnNsYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5pbm5lckVsZW0uYXBwZW5kQ2hpbGQodFNwYW4pO1xuICAgICAgICB9XG4gICAgICB9IC8vXG5cblxuICAgICAgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgIHRoaXMudGV4dFNwYW5zW2NudF0gPSB0UGFyZW50O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50ZXh0U3BhbnNbY250XSA9IHRTcGFuO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRleHRTcGFuc1tjbnRdLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgdGhpcy50ZXh0UGF0aHNbY250XSA9IHRTcGFuO1xuICAgICAgY250ICs9IDE7XG4gICAgfVxuXG4gICAgd2hpbGUgKGNudCA8IHRoaXMudGV4dFNwYW5zLmxlbmd0aCkge1xuICAgICAgdGhpcy50ZXh0U3BhbnNbY250XS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgY250ICs9IDE7XG4gICAgfVxuICB9O1xuXG4gIEhUZXh0RWxlbWVudC5wcm90b3R5cGUucmVuZGVySW5uZXJDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMudmFsaWRhdGVUZXh0KCk7XG4gICAgdmFyIHN2Z1N0eWxlO1xuXG4gICAgaWYgKHRoaXMuZGF0YS5zaW5nbGVTaGFwZSkge1xuICAgICAgaWYgKCF0aGlzLl9pc0ZpcnN0RnJhbWUgJiYgIXRoaXMubGV0dGVyc0NoYW5nZWRGbGFnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNNYXNrZWQgJiYgdGhpcy5maW5hbFRyYW5zZm9ybS5fbWF0TWRmKSB7XG4gICAgICAgIC8vIFRvZG8gQmVuY2htYXJrIGlmIHVzaW5nIHRoaXMgaXMgYmV0dGVyIHRoYW4gZ2V0QkJveFxuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgLXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AucC52WzBdICsgJyAnICsgLXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AucC52WzFdICsgJyAnICsgdGhpcy5jb21wVyArICcgJyArIHRoaXMuY29tcEgpO1xuICAgICAgICBzdmdTdHlsZSA9IHRoaXMuc3ZnRWxlbWVudC5zdHlsZTtcbiAgICAgICAgdmFyIHRyYW5zbGF0aW9uID0gJ3RyYW5zbGF0ZSgnICsgLXRoaXMuZmluYWxUcmFuc2Zvcm0ubVByb3AucC52WzBdICsgJ3B4LCcgKyAtdGhpcy5maW5hbFRyYW5zZm9ybS5tUHJvcC5wLnZbMV0gKyAncHgpJztcbiAgICAgICAgc3ZnU3R5bGUudHJhbnNmb3JtID0gdHJhbnNsYXRpb247XG4gICAgICAgIHN2Z1N0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zbGF0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMudGV4dEFuaW1hdG9yLmdldE1lYXN1cmVzKHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLCB0aGlzLmxldHRlcnNDaGFuZ2VkRmxhZyk7XG5cbiAgICBpZiAoIXRoaXMubGV0dGVyc0NoYW5nZWRGbGFnICYmICF0aGlzLnRleHRBbmltYXRvci5sZXR0ZXJzQ2hhbmdlZEZsYWcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIHJlbmRlcmVkTGV0dGVycyA9IHRoaXMudGV4dEFuaW1hdG9yLnJlbmRlcmVkTGV0dGVycztcbiAgICB2YXIgbGV0dGVycyA9IHRoaXMudGV4dFByb3BlcnR5LmN1cnJlbnREYXRhLmw7XG4gICAgbGVuID0gbGV0dGVycy5sZW5ndGg7XG4gICAgdmFyIHJlbmRlcmVkTGV0dGVyO1xuICAgIHZhciB0ZXh0U3BhbjtcbiAgICB2YXIgdGV4dFBhdGg7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmIChsZXR0ZXJzW2ldLm4pIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHRTcGFuID0gdGhpcy50ZXh0U3BhbnNbaV07XG4gICAgICAgIHRleHRQYXRoID0gdGhpcy50ZXh0UGF0aHNbaV07XG4gICAgICAgIHJlbmRlcmVkTGV0dGVyID0gcmVuZGVyZWRMZXR0ZXJzW2NvdW50XTtcbiAgICAgICAgY291bnQgKz0gMTtcblxuICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuX21kZi5tKSB7XG4gICAgICAgICAgaWYgKCF0aGlzLmlzTWFza2VkKSB7XG4gICAgICAgICAgICB0ZXh0U3Bhbi5zdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSByZW5kZXJlZExldHRlci5tO1xuICAgICAgICAgICAgdGV4dFNwYW4uc3R5bGUudHJhbnNmb3JtID0gcmVuZGVyZWRMZXR0ZXIubTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dFNwYW4uc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCByZW5kZXJlZExldHRlci5tKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8vIC90ZXh0U3Bhbi5zZXRBdHRyaWJ1dGUoJ29wYWNpdHknLHJlbmRlcmVkTGV0dGVyLm8pO1xuXG5cbiAgICAgICAgdGV4dFNwYW4uc3R5bGUub3BhY2l0eSA9IHJlbmRlcmVkTGV0dGVyLm87XG5cbiAgICAgICAgaWYgKHJlbmRlcmVkTGV0dGVyLnN3ICYmIHJlbmRlcmVkTGV0dGVyLl9tZGYuc3cpIHtcbiAgICAgICAgICB0ZXh0UGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHJlbmRlcmVkTGV0dGVyLnN3KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJlZExldHRlci5zYyAmJiByZW5kZXJlZExldHRlci5fbWRmLnNjKSB7XG4gICAgICAgICAgdGV4dFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCByZW5kZXJlZExldHRlci5zYyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVuZGVyZWRMZXR0ZXIuZmMgJiYgcmVuZGVyZWRMZXR0ZXIuX21kZi5mYykge1xuICAgICAgICAgIHRleHRQYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsIHJlbmRlcmVkTGV0dGVyLmZjKTtcbiAgICAgICAgICB0ZXh0UGF0aC5zdHlsZS5jb2xvciA9IHJlbmRlcmVkTGV0dGVyLmZjO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuaW5uZXJFbGVtLmdldEJCb3ggJiYgIXRoaXMuaGlkZGVuICYmICh0aGlzLl9pc0ZpcnN0RnJhbWUgfHwgdGhpcy5fbWRmKSkge1xuICAgICAgdmFyIGJvdW5kaW5nQm94ID0gdGhpcy5pbm5lckVsZW0uZ2V0QkJveCgpO1xuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC53ICE9PSBib3VuZGluZ0JveC53aWR0aCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LncgPSBib3VuZGluZ0JveC53aWR0aDtcbiAgICAgICAgdGhpcy5zdmdFbGVtZW50LnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBib3VuZGluZ0JveC53aWR0aCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmN1cnJlbnRCQm94LmggIT09IGJvdW5kaW5nQm94LmhlaWdodCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LmggPSBib3VuZGluZ0JveC5oZWlnaHQ7XG4gICAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIGJvdW5kaW5nQm94LmhlaWdodCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXJnaW4gPSAxO1xuXG4gICAgICBpZiAodGhpcy5jdXJyZW50QkJveC53ICE9PSBib3VuZGluZ0JveC53aWR0aCArIG1hcmdpbiAqIDIgfHwgdGhpcy5jdXJyZW50QkJveC5oICE9PSBib3VuZGluZ0JveC5oZWlnaHQgKyBtYXJnaW4gKiAyIHx8IHRoaXMuY3VycmVudEJCb3gueCAhPT0gYm91bmRpbmdCb3gueCAtIG1hcmdpbiB8fCB0aGlzLmN1cnJlbnRCQm94LnkgIT09IGJvdW5kaW5nQm94LnkgLSBtYXJnaW4pIHtcbiAgICAgICAgdGhpcy5jdXJyZW50QkJveC53ID0gYm91bmRpbmdCb3gud2lkdGggKyBtYXJnaW4gKiAyO1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LmggPSBib3VuZGluZ0JveC5oZWlnaHQgKyBtYXJnaW4gKiAyO1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LnggPSBib3VuZGluZ0JveC54IC0gbWFyZ2luO1xuICAgICAgICB0aGlzLmN1cnJlbnRCQm94LnkgPSBib3VuZGluZ0JveC55IC0gbWFyZ2luO1xuICAgICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd2aWV3Qm94JywgdGhpcy5jdXJyZW50QkJveC54ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC55ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC53ICsgJyAnICsgdGhpcy5jdXJyZW50QkJveC5oKTtcbiAgICAgICAgc3ZnU3R5bGUgPSB0aGlzLnN2Z0VsZW1lbnQuc3R5bGU7XG4gICAgICAgIHZhciBzdmdUcmFuc2Zvcm0gPSAndHJhbnNsYXRlKCcgKyB0aGlzLmN1cnJlbnRCQm94LnggKyAncHgsJyArIHRoaXMuY3VycmVudEJCb3gueSArICdweCknO1xuICAgICAgICBzdmdTdHlsZS50cmFuc2Zvcm0gPSBzdmdUcmFuc2Zvcm07XG4gICAgICAgIHN2Z1N0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHN2Z1RyYW5zZm9ybTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gSENhbWVyYUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuaW5pdEZyYW1lKCk7XG4gICAgdGhpcy5pbml0QmFzZURhdGEoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCk7XG4gICAgdGhpcy5pbml0SGllcmFyY2h5KCk7XG4gICAgdmFyIGdldFByb3AgPSBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcDtcbiAgICB0aGlzLnBlID0gZ2V0UHJvcCh0aGlzLCBkYXRhLnBlLCAwLCAwLCB0aGlzKTtcblxuICAgIGlmIChkYXRhLmtzLnAucykge1xuICAgICAgdGhpcy5weCA9IGdldFByb3AodGhpcywgZGF0YS5rcy5wLngsIDEsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5weSA9IGdldFByb3AodGhpcywgZGF0YS5rcy5wLnksIDEsIDAsIHRoaXMpO1xuICAgICAgdGhpcy5weiA9IGdldFByb3AodGhpcywgZGF0YS5rcy5wLnosIDEsIDAsIHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnAgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucCwgMSwgMCwgdGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKGRhdGEua3MuYSkge1xuICAgICAgdGhpcy5hID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLmEsIDEsIDAsIHRoaXMpO1xuICAgIH1cblxuICAgIGlmIChkYXRhLmtzLm9yLmsubGVuZ3RoICYmIGRhdGEua3Mub3Iua1swXS50bykge1xuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gZGF0YS5rcy5vci5rLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGRhdGEua3Mub3Iua1tpXS50byA9IG51bGw7XG4gICAgICAgIGRhdGEua3Mub3Iua1tpXS50aSA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vciA9IGdldFByb3AodGhpcywgZGF0YS5rcy5vciwgMSwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLm9yLnNoID0gdHJ1ZTtcbiAgICB0aGlzLnJ4ID0gZ2V0UHJvcCh0aGlzLCBkYXRhLmtzLnJ4LCAwLCBkZWdUb1JhZHMsIHRoaXMpO1xuICAgIHRoaXMucnkgPSBnZXRQcm9wKHRoaXMsIGRhdGEua3MucnksIDAsIGRlZ1RvUmFkcywgdGhpcyk7XG4gICAgdGhpcy5yeiA9IGdldFByb3AodGhpcywgZGF0YS5rcy5yeiwgMCwgZGVnVG9SYWRzLCB0aGlzKTtcbiAgICB0aGlzLm1hdCA9IG5ldyBNYXRyaXgoKTtcbiAgICB0aGlzLl9wcmV2TWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IHRydWU7IC8vIFRPRE86IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIG1ha2UgdGhlIEhDYW1lcmEgZWxlbWVudCB0byBiZSBjb21wYXRpYmxlIHdpdGggdGhlIExheWVySW50ZXJmYWNlIGFuZCBUcmFuc2Zvcm1JbnRlcmZhY2UuXG5cbiAgICB0aGlzLmZpbmFsVHJhbnNmb3JtID0ge1xuICAgICAgbVByb3A6IHRoaXNcbiAgICB9O1xuICB9XG5cbiAgZXh0ZW5kUHJvdG90eXBlKFtCYXNlRWxlbWVudCwgRnJhbWVFbGVtZW50LCBIaWVyYXJjaHlFbGVtZW50XSwgSENhbWVyYUVsZW1lbnQpO1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gdGhpcy5jb21wLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcbiAgICB2YXIgY29tcDtcbiAgICB2YXIgcGVyc3BlY3RpdmVTdHlsZTtcbiAgICB2YXIgY29udGFpbmVyU3R5bGU7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIC8vIFtwZXJzcGVjdGl2ZUVsZW0sY29udGFpbmVyXVxuICAgICAgY29tcCA9IHRoaXMuY29tcC50aHJlZURFbGVtZW50c1tpXTtcblxuICAgICAgaWYgKGNvbXAudHlwZSA9PT0gJzNkJykge1xuICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlID0gY29tcC5wZXJzcGVjdGl2ZUVsZW0uc3R5bGU7XG4gICAgICAgIGNvbnRhaW5lclN0eWxlID0gY29tcC5jb250YWluZXIuc3R5bGU7XG4gICAgICAgIHZhciBwZXJzcGVjdGl2ZSA9IHRoaXMucGUudiArICdweCc7XG4gICAgICAgIHZhciBvcmlnaW4gPSAnMHB4IDBweCAwcHgnO1xuICAgICAgICB2YXIgbWF0cml4ID0gJ21hdHJpeDNkKDEsMCwwLDAsMCwxLDAsMCwwLDAsMSwwLDAsMCwwLDEpJztcbiAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS5wZXJzcGVjdGl2ZSA9IHBlcnNwZWN0aXZlO1xuICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLndlYmtpdFBlcnNwZWN0aXZlID0gcGVyc3BlY3RpdmU7XG4gICAgICAgIGNvbnRhaW5lclN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IG9yaWdpbjtcbiAgICAgICAgY29udGFpbmVyU3R5bGUubW96VHJhbnNmb3JtT3JpZ2luID0gb3JpZ2luO1xuICAgICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm1PcmlnaW4gPSBvcmlnaW47XG4gICAgICAgIHBlcnNwZWN0aXZlU3R5bGUudHJhbnNmb3JtID0gbWF0cml4O1xuICAgICAgICBwZXJzcGVjdGl2ZVN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IG1hdHJpeDtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnRzID0gZnVuY3Rpb24gKCkge307XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7fTtcblxuICBIQ2FtZXJhRWxlbWVudC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIF9tZGYgPSB0aGlzLl9pc0ZpcnN0RnJhbWU7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcblxuICAgIGlmICh0aGlzLmhpZXJhcmNoeSkge1xuICAgICAgbGVuID0gdGhpcy5oaWVyYXJjaHkubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgX21kZiA9IHRoaXMuaGllcmFyY2h5W2ldLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLl9tZGYgfHwgX21kZjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoX21kZiB8fCB0aGlzLnBlLl9tZGYgfHwgdGhpcy5wICYmIHRoaXMucC5fbWRmIHx8IHRoaXMucHggJiYgKHRoaXMucHguX21kZiB8fCB0aGlzLnB5Ll9tZGYgfHwgdGhpcy5wei5fbWRmKSB8fCB0aGlzLnJ4Ll9tZGYgfHwgdGhpcy5yeS5fbWRmIHx8IHRoaXMucnouX21kZiB8fCB0aGlzLm9yLl9tZGYgfHwgdGhpcy5hICYmIHRoaXMuYS5fbWRmKSB7XG4gICAgICB0aGlzLm1hdC5yZXNldCgpO1xuXG4gICAgICBpZiAodGhpcy5oaWVyYXJjaHkpIHtcbiAgICAgICAgbGVuID0gdGhpcy5oaWVyYXJjaHkubGVuZ3RoIC0gMTtcblxuICAgICAgICBmb3IgKGkgPSBsZW47IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgICAgdmFyIG1UcmFuc2YgPSB0aGlzLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcDtcbiAgICAgICAgICB0aGlzLm1hdC50cmFuc2xhdGUoLW1UcmFuc2YucC52WzBdLCAtbVRyYW5zZi5wLnZbMV0sIG1UcmFuc2YucC52WzJdKTtcbiAgICAgICAgICB0aGlzLm1hdC5yb3RhdGVYKC1tVHJhbnNmLm9yLnZbMF0pLnJvdGF0ZVkoLW1UcmFuc2Yub3IudlsxXSkucm90YXRlWihtVHJhbnNmLm9yLnZbMl0pO1xuICAgICAgICAgIHRoaXMubWF0LnJvdGF0ZVgoLW1UcmFuc2Yucngudikucm90YXRlWSgtbVRyYW5zZi5yeS52KS5yb3RhdGVaKG1UcmFuc2Yucnoudik7XG4gICAgICAgICAgdGhpcy5tYXQuc2NhbGUoMSAvIG1UcmFuc2Yucy52WzBdLCAxIC8gbVRyYW5zZi5zLnZbMV0sIDEgLyBtVHJhbnNmLnMudlsyXSk7XG4gICAgICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKG1UcmFuc2YuYS52WzBdLCBtVHJhbnNmLmEudlsxXSwgbVRyYW5zZi5hLnZbMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnApIHtcbiAgICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKC10aGlzLnAudlswXSwgLXRoaXMucC52WzFdLCB0aGlzLnAudlsyXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm1hdC50cmFuc2xhdGUoLXRoaXMucHgudiwgLXRoaXMucHkudiwgdGhpcy5wei52KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuYSkge1xuICAgICAgICB2YXIgZGlmZlZlY3RvcjtcblxuICAgICAgICBpZiAodGhpcy5wKSB7XG4gICAgICAgICAgZGlmZlZlY3RvciA9IFt0aGlzLnAudlswXSAtIHRoaXMuYS52WzBdLCB0aGlzLnAudlsxXSAtIHRoaXMuYS52WzFdLCB0aGlzLnAudlsyXSAtIHRoaXMuYS52WzJdXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaWZmVmVjdG9yID0gW3RoaXMucHgudiAtIHRoaXMuYS52WzBdLCB0aGlzLnB5LnYgLSB0aGlzLmEudlsxXSwgdGhpcy5wei52IC0gdGhpcy5hLnZbMl1dO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG1hZyA9IE1hdGguc3FydChNYXRoLnBvdyhkaWZmVmVjdG9yWzBdLCAyKSArIE1hdGgucG93KGRpZmZWZWN0b3JbMV0sIDIpICsgTWF0aC5wb3coZGlmZlZlY3RvclsyXSwgMikpOyAvLyB2YXIgbG9va0RpciA9IGdldE5vcm1hbGl6ZWRQb2ludChnZXREaWZmVmVjdG9yKHRoaXMuYS52LHRoaXMucC52KSk7XG5cbiAgICAgICAgdmFyIGxvb2tEaXIgPSBbZGlmZlZlY3RvclswXSAvIG1hZywgZGlmZlZlY3RvclsxXSAvIG1hZywgZGlmZlZlY3RvclsyXSAvIG1hZ107XG4gICAgICAgIHZhciBsb29rTGVuZ3RoT25YWiA9IE1hdGguc3FydChsb29rRGlyWzJdICogbG9va0RpclsyXSArIGxvb2tEaXJbMF0gKiBsb29rRGlyWzBdKTtcbiAgICAgICAgdmFyIG1Sb3RhdGlvblggPSBNYXRoLmF0YW4yKGxvb2tEaXJbMV0sIGxvb2tMZW5ndGhPblhaKTtcbiAgICAgICAgdmFyIG1Sb3RhdGlvblkgPSBNYXRoLmF0YW4yKGxvb2tEaXJbMF0sIC1sb29rRGlyWzJdKTtcbiAgICAgICAgdGhpcy5tYXQucm90YXRlWShtUm90YXRpb25ZKS5yb3RhdGVYKC1tUm90YXRpb25YKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXQucm90YXRlWCgtdGhpcy5yeC52KS5yb3RhdGVZKC10aGlzLnJ5LnYpLnJvdGF0ZVoodGhpcy5yei52KTtcbiAgICAgIHRoaXMubWF0LnJvdGF0ZVgoLXRoaXMub3IudlswXSkucm90YXRlWSgtdGhpcy5vci52WzFdKS5yb3RhdGVaKHRoaXMub3IudlsyXSk7XG4gICAgICB0aGlzLm1hdC50cmFuc2xhdGUodGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncgLyAyLCB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaCAvIDIsIDApO1xuICAgICAgdGhpcy5tYXQudHJhbnNsYXRlKDAsIDAsIHRoaXMucGUudik7XG4gICAgICB2YXIgaGFzTWF0cml4Q2hhbmdlZCA9ICF0aGlzLl9wcmV2TWF0LmVxdWFscyh0aGlzLm1hdCk7XG5cbiAgICAgIGlmICgoaGFzTWF0cml4Q2hhbmdlZCB8fCB0aGlzLnBlLl9tZGYpICYmIHRoaXMuY29tcC50aHJlZURFbGVtZW50cykge1xuICAgICAgICBsZW4gPSB0aGlzLmNvbXAudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuICAgICAgICB2YXIgY29tcDtcbiAgICAgICAgdmFyIHBlcnNwZWN0aXZlU3R5bGU7XG4gICAgICAgIHZhciBjb250YWluZXJTdHlsZTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBjb21wID0gdGhpcy5jb21wLnRocmVlREVsZW1lbnRzW2ldO1xuXG4gICAgICAgICAgaWYgKGNvbXAudHlwZSA9PT0gJzNkJykge1xuICAgICAgICAgICAgaWYgKGhhc01hdHJpeENoYW5nZWQpIHtcbiAgICAgICAgICAgICAgdmFyIG1hdFZhbHVlID0gdGhpcy5tYXQudG9DU1MoKTtcbiAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUgPSBjb21wLmNvbnRhaW5lci5zdHlsZTtcbiAgICAgICAgICAgICAgY29udGFpbmVyU3R5bGUudHJhbnNmb3JtID0gbWF0VmFsdWU7XG4gICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IG1hdFZhbHVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodGhpcy5wZS5fbWRmKSB7XG4gICAgICAgICAgICAgIHBlcnNwZWN0aXZlU3R5bGUgPSBjb21wLnBlcnNwZWN0aXZlRWxlbS5zdHlsZTtcbiAgICAgICAgICAgICAgcGVyc3BlY3RpdmVTdHlsZS5wZXJzcGVjdGl2ZSA9IHRoaXMucGUudiArICdweCc7XG4gICAgICAgICAgICAgIHBlcnNwZWN0aXZlU3R5bGUud2Via2l0UGVyc3BlY3RpdmUgPSB0aGlzLnBlLnYgKyAncHgnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWF0LmNsb25lKHRoaXMuX3ByZXZNYXQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX2lzRmlyc3RGcmFtZSA9IGZhbHNlO1xuICB9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5wcmVwYXJlRnJhbWUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgdGhpcy5wcmVwYXJlUHJvcGVydGllcyhudW0sIHRydWUpO1xuICB9O1xuXG4gIEhDYW1lcmFFbGVtZW50LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge307XG5cbiAgSENhbWVyYUVsZW1lbnQucHJvdG90eXBlLmdldEJhc2VFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEhJbWFnZUVsZW1lbnQoZGF0YSwgZ2xvYmFsRGF0YSwgY29tcCkge1xuICAgIHRoaXMuYXNzZXREYXRhID0gZ2xvYmFsRGF0YS5nZXRBc3NldERhdGEoZGF0YS5yZWZJZCk7XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZUVsZW1lbnQsIFRyYW5zZm9ybUVsZW1lbnQsIEhCYXNlRWxlbWVudCwgSFNvbGlkRWxlbWVudCwgSGllcmFyY2h5RWxlbWVudCwgRnJhbWVFbGVtZW50LCBSZW5kZXJhYmxlRWxlbWVudF0sIEhJbWFnZUVsZW1lbnQpO1xuXG4gIEhJbWFnZUVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFzc2V0UGF0aCA9IHRoaXMuZ2xvYmFsRGF0YS5nZXRBc3NldHNQYXRoKHRoaXMuYXNzZXREYXRhKTtcbiAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG5cbiAgICBpZiAodGhpcy5kYXRhLmhhc01hc2spIHtcbiAgICAgIHRoaXMuaW1hZ2VFbGVtID0gY3JlYXRlTlMoJ2ltYWdlJyk7XG4gICAgICB0aGlzLmltYWdlRWxlbS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgdGhpcy5hc3NldERhdGEudyArICdweCcpO1xuICAgICAgdGhpcy5pbWFnZUVsZW0uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCB0aGlzLmFzc2V0RGF0YS5oICsgJ3B4Jyk7XG4gICAgICB0aGlzLmltYWdlRWxlbS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsICdocmVmJywgYXNzZXRQYXRoKTtcbiAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKHRoaXMuaW1hZ2VFbGVtKTtcbiAgICAgIHRoaXMuYmFzZUVsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuYXNzZXREYXRhLncpO1xuICAgICAgdGhpcy5iYXNlRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuYXNzZXREYXRhLmgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxheWVyRWxlbWVudC5hcHBlbmRDaGlsZChpbWcpO1xuICAgIH1cblxuICAgIGltZy5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnO1xuICAgIGltZy5zcmMgPSBhc3NldFBhdGg7XG5cbiAgICBpZiAodGhpcy5kYXRhLmxuKSB7XG4gICAgICB0aGlzLmJhc2VFbGVtZW50LnNldEF0dHJpYnV0ZSgnaWQnLCB0aGlzLmRhdGEubG4pO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBIeWJyaWRSZW5kZXJlckJhc2UoYW5pbWF0aW9uSXRlbSwgY29uZmlnKSB7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gYW5pbWF0aW9uSXRlbTtcbiAgICB0aGlzLmxheWVycyA9IG51bGw7XG4gICAgdGhpcy5yZW5kZXJlZEZyYW1lID0gLTE7XG4gICAgdGhpcy5yZW5kZXJDb25maWcgPSB7XG4gICAgICBjbGFzc05hbWU6IGNvbmZpZyAmJiBjb25maWcuY2xhc3NOYW1lIHx8ICcnLFxuICAgICAgaW1hZ2VQcmVzZXJ2ZUFzcGVjdFJhdGlvOiBjb25maWcgJiYgY29uZmlnLmltYWdlUHJlc2VydmVBc3BlY3RSYXRpbyB8fCAneE1pZFlNaWQgc2xpY2UnLFxuICAgICAgaGlkZU9uVHJhbnNwYXJlbnQ6ICEoY29uZmlnICYmIGNvbmZpZy5oaWRlT25UcmFuc3BhcmVudCA9PT0gZmFsc2UpLFxuICAgICAgZmlsdGVyU2l6ZToge1xuICAgICAgICB3aWR0aDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLndpZHRoIHx8ICc0MDAlJyxcbiAgICAgICAgaGVpZ2h0OiBjb25maWcgJiYgY29uZmlnLmZpbHRlclNpemUgJiYgY29uZmlnLmZpbHRlclNpemUuaGVpZ2h0IHx8ICc0MDAlJyxcbiAgICAgICAgeDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLnggfHwgJy0xMDAlJyxcbiAgICAgICAgeTogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLnkgfHwgJy0xMDAlJ1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5nbG9iYWxEYXRhID0ge1xuICAgICAgX21kZjogZmFsc2UsXG4gICAgICBmcmFtZU51bTogLTEsXG4gICAgICByZW5kZXJDb25maWc6IHRoaXMucmVuZGVyQ29uZmlnXG4gICAgfTtcbiAgICB0aGlzLnBlbmRpbmdFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLnRocmVlREVsZW1lbnRzID0gW107XG4gICAgdGhpcy5kZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNhbWVyYSA9IG51bGw7XG4gICAgdGhpcy5zdXBwb3J0czNkID0gdHJ1ZTtcbiAgICB0aGlzLnJlbmRlcmVyVHlwZSA9ICdodG1sJztcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbQmFzZVJlbmRlcmVyXSwgSHlicmlkUmVuZGVyZXJCYXNlKTtcbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5idWlsZEl0ZW0gPSBTVkdSZW5kZXJlci5wcm90b3R5cGUuYnVpbGRJdGVtO1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY2hlY2tQZW5kaW5nRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgd2hpbGUgKHRoaXMucGVuZGluZ0VsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLnBlbmRpbmdFbGVtZW50cy5wb3AoKTtcbiAgICAgIGVsZW1lbnQuY2hlY2tQYXJlbnRpbmcoKTtcbiAgICB9XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5hcHBlbmRFbGVtZW50SW5Qb3MgPSBmdW5jdGlvbiAoZWxlbWVudCwgcG9zKSB7XG4gICAgdmFyIG5ld0RPTUVsZW1lbnQgPSBlbGVtZW50LmdldEJhc2VFbGVtZW50KCk7XG5cbiAgICBpZiAoIW5ld0RPTUVsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgbGF5ZXIgPSB0aGlzLmxheWVyc1twb3NdO1xuXG4gICAgaWYgKCFsYXllci5kZGQgfHwgIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgaWYgKHRoaXMudGhyZWVERWxlbWVudHMpIHtcbiAgICAgICAgdGhpcy5hZGRUbzNkQ29udGFpbmVyKG5ld0RPTUVsZW1lbnQsIHBvcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBuZXh0RE9NRWxlbWVudDtcbiAgICAgICAgdmFyIG5leHRMYXllcjtcbiAgICAgICAgdmFyIHRtcERPTUVsZW1lbnQ7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBwb3MpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tpXSAmJiB0aGlzLmVsZW1lbnRzW2ldICE9PSB0cnVlICYmIHRoaXMuZWxlbWVudHNbaV0uZ2V0QmFzZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIG5leHRMYXllciA9IHRoaXMuZWxlbWVudHNbaV07XG4gICAgICAgICAgICB0bXBET01FbGVtZW50ID0gdGhpcy5sYXllcnNbaV0uZGRkID8gdGhpcy5nZXRUaHJlZURDb250YWluZXJCeVBvcyhpKSA6IG5leHRMYXllci5nZXRCYXNlRWxlbWVudCgpO1xuICAgICAgICAgICAgbmV4dERPTUVsZW1lbnQgPSB0bXBET01FbGVtZW50IHx8IG5leHRET01FbGVtZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXh0RE9NRWxlbWVudCkge1xuICAgICAgICAgIGlmICghbGF5ZXIuZGRkIHx8ICF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgICAgICAgIHRoaXMubGF5ZXJFbGVtZW50Lmluc2VydEJlZm9yZShuZXdET01FbGVtZW50LCBuZXh0RE9NRWxlbWVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCFsYXllci5kZGQgfHwgIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgICAgIHRoaXMubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKG5ld0RPTUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYWRkVG8zZENvbnRhaW5lcihuZXdET01FbGVtZW50LCBwb3MpO1xuICAgIH1cbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVNoYXBlID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICBpZiAoIXRoaXMuc3VwcG9ydHMzZCkge1xuICAgICAgcmV0dXJuIG5ldyBTVkdTaGFwZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhTaGFwZUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVRleHQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IFNWR1RleHRMb3R0aWVFbGVtZW50KGRhdGEsIHRoaXMuZ2xvYmFsRGF0YSwgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBIVGV4dEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZUNhbWVyYSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgSENhbWVyYUVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICByZXR1cm4gdGhpcy5jYW1lcmE7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jcmVhdGVJbWFnZSA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgSUltYWdlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgSEltYWdlRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuY3JlYXRlU29saWQgPSBmdW5jdGlvbiAoZGF0YSkge1xuICAgIGlmICghdGhpcy5zdXBwb3J0czNkKSB7XG4gICAgICByZXR1cm4gbmV3IElTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhTb2xpZEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZU51bGwgPSBTVkdSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlTnVsbDtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmdldFRocmVlRENvbnRhaW5lckJ5UG9zID0gZnVuY3Rpb24gKHBvcykge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gdGhpcy50aHJlZURFbGVtZW50cy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKHRoaXMudGhyZWVERWxlbWVudHNbaV0uc3RhcnRQb3MgPD0gcG9zICYmIHRoaXMudGhyZWVERWxlbWVudHNbaV0uZW5kUG9zID49IHBvcykge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJlZURFbGVtZW50c1tpXS5wZXJzcGVjdGl2ZUVsZW07XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmNyZWF0ZVRocmVlRENvbnRhaW5lciA9IGZ1bmN0aW9uIChwb3MsIHR5cGUpIHtcbiAgICB2YXIgcGVyc3BlY3RpdmVFbGVtID0gY3JlYXRlVGFnKCdkaXYnKTtcbiAgICB2YXIgc3R5bGU7XG4gICAgdmFyIGNvbnRhaW5lclN0eWxlO1xuICAgIHN0eWxlRGl2KHBlcnNwZWN0aXZlRWxlbSk7XG4gICAgdmFyIGNvbnRhaW5lciA9IGNyZWF0ZVRhZygnZGl2Jyk7XG4gICAgc3R5bGVEaXYoY29udGFpbmVyKTtcblxuICAgIGlmICh0eXBlID09PSAnM2QnKSB7XG4gICAgICBzdHlsZSA9IHBlcnNwZWN0aXZlRWxlbS5zdHlsZTtcbiAgICAgIHN0eWxlLndpZHRoID0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncgKyAncHgnO1xuICAgICAgc3R5bGUuaGVpZ2h0ID0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmggKyAncHgnO1xuICAgICAgdmFyIGNlbnRlciA9ICc1MCUgNTAlJztcbiAgICAgIHN0eWxlLndlYmtpdFRyYW5zZm9ybU9yaWdpbiA9IGNlbnRlcjtcbiAgICAgIHN0eWxlLm1velRyYW5zZm9ybU9yaWdpbiA9IGNlbnRlcjtcbiAgICAgIHN0eWxlLnRyYW5zZm9ybU9yaWdpbiA9IGNlbnRlcjtcbiAgICAgIGNvbnRhaW5lclN0eWxlID0gY29udGFpbmVyLnN0eWxlO1xuICAgICAgdmFyIG1hdHJpeCA9ICdtYXRyaXgzZCgxLDAsMCwwLDAsMSwwLDAsMCwwLDEsMCwwLDAsMCwxKSc7XG4gICAgICBjb250YWluZXJTdHlsZS50cmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgICBjb250YWluZXJTdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSBtYXRyaXg7XG4gICAgfVxuXG4gICAgcGVyc3BlY3RpdmVFbGVtLmFwcGVuZENoaWxkKGNvbnRhaW5lcik7IC8vIHRoaXMucmVzaXplckVsZW0uYXBwZW5kQ2hpbGQocGVyc3BlY3RpdmVFbGVtKTtcblxuICAgIHZhciB0aHJlZURDb250YWluZXJEYXRhID0ge1xuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBwZXJzcGVjdGl2ZUVsZW06IHBlcnNwZWN0aXZlRWxlbSxcbiAgICAgIHN0YXJ0UG9zOiBwb3MsXG4gICAgICBlbmRQb3M6IHBvcyxcbiAgICAgIHR5cGU6IHR5cGVcbiAgICB9O1xuICAgIHRoaXMudGhyZWVERWxlbWVudHMucHVzaCh0aHJlZURDb250YWluZXJEYXRhKTtcbiAgICByZXR1cm4gdGhyZWVEQ29udGFpbmVyRGF0YTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmJ1aWxkM2RDb250YWluZXJzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpO1xuICAgIHZhciBsZW4gPSB0aGlzLmxheWVycy5sZW5ndGg7XG4gICAgdmFyIGxhc3RUaHJlZURDb250YWluZXJEYXRhO1xuICAgIHZhciBjdXJyZW50Q29udGFpbmVyID0gJyc7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgIGlmICh0aGlzLmxheWVyc1tpXS5kZGQgJiYgdGhpcy5sYXllcnNbaV0udHkgIT09IDMpIHtcbiAgICAgICAgaWYgKGN1cnJlbnRDb250YWluZXIgIT09ICczZCcpIHtcbiAgICAgICAgICBjdXJyZW50Q29udGFpbmVyID0gJzNkJztcbiAgICAgICAgICBsYXN0VGhyZWVEQ29udGFpbmVyRGF0YSA9IHRoaXMuY3JlYXRlVGhyZWVEQ29udGFpbmVyKGksICczZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFRocmVlRENvbnRhaW5lckRhdGEuZW5kUG9zID0gTWF0aC5tYXgobGFzdFRocmVlRENvbnRhaW5lckRhdGEuZW5kUG9zLCBpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChjdXJyZW50Q29udGFpbmVyICE9PSAnMmQnKSB7XG4gICAgICAgICAgY3VycmVudENvbnRhaW5lciA9ICcyZCc7XG4gICAgICAgICAgbGFzdFRocmVlRENvbnRhaW5lckRhdGEgPSB0aGlzLmNyZWF0ZVRocmVlRENvbnRhaW5lcihpLCAnMmQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcyA9IE1hdGgubWF4KGxhc3RUaHJlZURDb250YWluZXJEYXRhLmVuZFBvcywgaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGVuID0gdGhpcy50aHJlZURFbGVtZW50cy5sZW5ndGg7XG5cbiAgICBmb3IgKGkgPSBsZW4gLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgdGhpcy5yZXNpemVyRWxlbS5hcHBlbmRDaGlsZCh0aGlzLnRocmVlREVsZW1lbnRzW2ldLnBlcnNwZWN0aXZlRWxlbSk7XG4gICAgfVxuICB9O1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuYWRkVG8zZENvbnRhaW5lciA9IGZ1bmN0aW9uIChlbGVtLCBwb3MpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGxlbiA9IHRoaXMudGhyZWVERWxlbWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChwb3MgPD0gdGhpcy50aHJlZURFbGVtZW50c1tpXS5lbmRQb3MpIHtcbiAgICAgICAgdmFyIGogPSB0aGlzLnRocmVlREVsZW1lbnRzW2ldLnN0YXJ0UG9zO1xuICAgICAgICB2YXIgbmV4dEVsZW1lbnQ7XG5cbiAgICAgICAgd2hpbGUgKGogPCBwb3MpIHtcbiAgICAgICAgICBpZiAodGhpcy5lbGVtZW50c1tqXSAmJiB0aGlzLmVsZW1lbnRzW2pdLmdldEJhc2VFbGVtZW50KSB7XG4gICAgICAgICAgICBuZXh0RWxlbWVudCA9IHRoaXMuZWxlbWVudHNbal0uZ2V0QmFzZUVsZW1lbnQoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBqICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV4dEVsZW1lbnQpIHtcbiAgICAgICAgICB0aGlzLnRocmVlREVsZW1lbnRzW2ldLmNvbnRhaW5lci5pbnNlcnRCZWZvcmUoZWxlbSwgbmV4dEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudGhyZWVERWxlbWVudHNbaV0uY29udGFpbmVyLmFwcGVuZENoaWxkKGVsZW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5jb25maWdBbmltYXRpb24gPSBmdW5jdGlvbiAoYW5pbURhdGEpIHtcbiAgICB2YXIgcmVzaXplckVsZW0gPSBjcmVhdGVUYWcoJ2RpdicpO1xuICAgIHZhciB3cmFwcGVyID0gdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXI7XG4gICAgdmFyIHN0eWxlID0gcmVzaXplckVsZW0uc3R5bGU7XG4gICAgc3R5bGUud2lkdGggPSBhbmltRGF0YS53ICsgJ3B4JztcbiAgICBzdHlsZS5oZWlnaHQgPSBhbmltRGF0YS5oICsgJ3B4JztcbiAgICB0aGlzLnJlc2l6ZXJFbGVtID0gcmVzaXplckVsZW07XG4gICAgc3R5bGVEaXYocmVzaXplckVsZW0pO1xuICAgIHN0eWxlLnRyYW5zZm9ybVN0eWxlID0gJ2ZsYXQnO1xuICAgIHN0eWxlLm1velRyYW5zZm9ybVN0eWxlID0gJ2ZsYXQnO1xuICAgIHN0eWxlLndlYmtpdFRyYW5zZm9ybVN0eWxlID0gJ2ZsYXQnO1xuXG4gICAgaWYgKHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSkge1xuICAgICAgcmVzaXplckVsZW0uc2V0QXR0cmlidXRlKCdjbGFzcycsIHRoaXMucmVuZGVyQ29uZmlnLmNsYXNzTmFtZSk7XG4gICAgfVxuXG4gICAgd3JhcHBlci5hcHBlbmRDaGlsZChyZXNpemVyRWxlbSk7XG4gICAgc3R5bGUub3ZlcmZsb3cgPSAnaGlkZGVuJztcbiAgICB2YXIgc3ZnID0gY3JlYXRlTlMoJ3N2ZycpO1xuICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzEnKTtcbiAgICBzdmcuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMScpO1xuICAgIHN0eWxlRGl2KHN2Zyk7XG4gICAgdGhpcy5yZXNpemVyRWxlbS5hcHBlbmRDaGlsZChzdmcpO1xuICAgIHZhciBkZWZzID0gY3JlYXRlTlMoJ2RlZnMnKTtcbiAgICBzdmcuYXBwZW5kQ2hpbGQoZGVmcyk7XG4gICAgdGhpcy5kYXRhID0gYW5pbURhdGE7IC8vIE1hc2sgYW5pbWF0aW9uXG5cbiAgICB0aGlzLnNldHVwR2xvYmFsRGF0YShhbmltRGF0YSwgc3ZnKTtcbiAgICB0aGlzLmdsb2JhbERhdGEuZGVmcyA9IGRlZnM7XG4gICAgdGhpcy5sYXllcnMgPSBhbmltRGF0YS5sYXllcnM7XG4gICAgdGhpcy5sYXllckVsZW1lbnQgPSB0aGlzLnJlc2l6ZXJFbGVtO1xuICAgIHRoaXMuYnVpbGQzZENvbnRhaW5lcnMoKTtcbiAgICB0aGlzLnVwZGF0ZUNvbnRhaW5lclNpemUoKTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyKSB7XG4gICAgICB0aGlzLmFuaW1hdGlvbkl0ZW0ud3JhcHBlci5pbm5lclRleHQgPSAnJztcbiAgICB9XG5cbiAgICB0aGlzLmFuaW1hdGlvbkl0ZW0uY29udGFpbmVyID0gbnVsbDtcbiAgICB0aGlzLmdsb2JhbERhdGEuZGVmcyA9IG51bGw7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMubGF5ZXJzID8gdGhpcy5sYXllcnMubGVuZ3RoIDogMDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbaV0gJiYgdGhpcy5lbGVtZW50c1tpXS5kZXN0cm95KSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNbaV0uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudHMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmRlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5hbmltYXRpb25JdGVtID0gbnVsbDtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLnVwZGF0ZUNvbnRhaW5lclNpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1lbnRXaWR0aCA9IHRoaXMuYW5pbWF0aW9uSXRlbS53cmFwcGVyLm9mZnNldFdpZHRoO1xuICAgIHZhciBlbGVtZW50SGVpZ2h0ID0gdGhpcy5hbmltYXRpb25JdGVtLndyYXBwZXIub2Zmc2V0SGVpZ2h0O1xuICAgIHZhciBlbGVtZW50UmVsID0gZWxlbWVudFdpZHRoIC8gZWxlbWVudEhlaWdodDtcbiAgICB2YXIgYW5pbWF0aW9uUmVsID0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncgLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUuaDtcbiAgICB2YXIgc3g7XG4gICAgdmFyIHN5O1xuICAgIHZhciB0eDtcbiAgICB2YXIgdHk7XG5cbiAgICBpZiAoYW5pbWF0aW9uUmVsID4gZWxlbWVudFJlbCkge1xuICAgICAgc3ggPSBlbGVtZW50V2lkdGggLyB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztcbiAgICAgIHN5ID0gZWxlbWVudFdpZHRoIC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgICB0eCA9IDA7XG4gICAgICB0eSA9IChlbGVtZW50SGVpZ2h0IC0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmggKiAoZWxlbWVudFdpZHRoIC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLncpKSAvIDI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN4ID0gZWxlbWVudEhlaWdodCAvIHRoaXMuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgICAgc3kgPSBlbGVtZW50SGVpZ2h0IC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgICB0eCA9IChlbGVtZW50V2lkdGggLSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudyAqIChlbGVtZW50SGVpZ2h0IC8gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmgpKSAvIDI7XG4gICAgICB0eSA9IDA7XG4gICAgfVxuXG4gICAgdmFyIHN0eWxlID0gdGhpcy5yZXNpemVyRWxlbS5zdHlsZTtcbiAgICBzdHlsZS53ZWJraXRUcmFuc2Zvcm0gPSAnbWF0cml4M2QoJyArIHN4ICsgJywwLDAsMCwwLCcgKyBzeSArICcsMCwwLDAsMCwxLDAsJyArIHR4ICsgJywnICsgdHkgKyAnLDAsMSknO1xuICAgIHN0eWxlLnRyYW5zZm9ybSA9IHN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgfTtcblxuICBIeWJyaWRSZW5kZXJlckJhc2UucHJvdG90eXBlLnJlbmRlckZyYW1lID0gU1ZHUmVuZGVyZXIucHJvdG90eXBlLnJlbmRlckZyYW1lO1xuXG4gIEh5YnJpZFJlbmRlcmVyQmFzZS5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLnJlc2l6ZXJFbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMucmVzaXplckVsZW0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5pbml0SXRlbXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5idWlsZEFsbEl0ZW1zKCk7XG5cbiAgICBpZiAodGhpcy5jYW1lcmEpIHtcbiAgICAgIHRoaXMuY2FtZXJhLnNldHVwKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjV2lkdGggPSB0aGlzLmdsb2JhbERhdGEuY29tcFNpemUudztcbiAgICAgIHZhciBjSGVpZ2h0ID0gdGhpcy5nbG9iYWxEYXRhLmNvbXBTaXplLmg7XG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW4gPSB0aGlzLnRocmVlREVsZW1lbnRzLmxlbmd0aDtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIHZhciBzdHlsZSA9IHRoaXMudGhyZWVERWxlbWVudHNbaV0ucGVyc3BlY3RpdmVFbGVtLnN0eWxlO1xuICAgICAgICBzdHlsZS53ZWJraXRQZXJzcGVjdGl2ZSA9IE1hdGguc3FydChNYXRoLnBvdyhjV2lkdGgsIDIpICsgTWF0aC5wb3coY0hlaWdodCwgMikpICsgJ3B4JztcbiAgICAgICAgc3R5bGUucGVyc3BlY3RpdmUgPSBzdHlsZS53ZWJraXRQZXJzcGVjdGl2ZTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgSHlicmlkUmVuZGVyZXJCYXNlLnByb3RvdHlwZS5zZWFyY2hFeHRyYUNvbXBvc2l0aW9ucyA9IGZ1bmN0aW9uIChhc3NldHMpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgbGVuID0gYXNzZXRzLmxlbmd0aDtcbiAgICB2YXIgZmxvYXRpbmdDb250YWluZXIgPSBjcmVhdGVUYWcoJ2RpdicpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAoYXNzZXRzW2ldLnh0KSB7XG4gICAgICAgIHZhciBjb21wID0gdGhpcy5jcmVhdGVDb21wKGFzc2V0c1tpXSwgZmxvYXRpbmdDb250YWluZXIsIHRoaXMuZ2xvYmFsRGF0YS5jb21wLCBudWxsKTtcbiAgICAgICAgY29tcC5pbml0RXhwcmVzc2lvbnMoKTtcbiAgICAgICAgdGhpcy5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihjb21wKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gSENvbXBFbGVtZW50KGRhdGEsIGdsb2JhbERhdGEsIGNvbXApIHtcbiAgICB0aGlzLmxheWVycyA9IGRhdGEubGF5ZXJzO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9ICFkYXRhLmhhc01hc2s7XG4gICAgdGhpcy5jb21wbGV0ZUxheWVycyA9IGZhbHNlO1xuICAgIHRoaXMucGVuZGluZ0VsZW1lbnRzID0gW107XG4gICAgdGhpcy5lbGVtZW50cyA9IHRoaXMubGF5ZXJzID8gY3JlYXRlU2l6ZWRBcnJheSh0aGlzLmxheWVycy5sZW5ndGgpIDogW107XG4gICAgdGhpcy5pbml0RWxlbWVudChkYXRhLCBnbG9iYWxEYXRhLCBjb21wKTtcbiAgICB0aGlzLnRtID0gZGF0YS50bSA/IFByb3BlcnR5RmFjdG9yeS5nZXRQcm9wKHRoaXMsIGRhdGEudG0sIDAsIGdsb2JhbERhdGEuZnJhbWVSYXRlLCB0aGlzKSA6IHtcbiAgICAgIF9wbGFjZWhvbGRlcjogdHJ1ZVxuICAgIH07XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0h5YnJpZFJlbmRlcmVyQmFzZSwgSUNvbXBFbGVtZW50LCBIQmFzZUVsZW1lbnRdLCBIQ29tcEVsZW1lbnQpO1xuICBIQ29tcEVsZW1lbnQucHJvdG90eXBlLl9jcmVhdGVCYXNlQ29udGFpbmVyRWxlbWVudHMgPSBIQ29tcEVsZW1lbnQucHJvdG90eXBlLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnRzO1xuXG4gIEhDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29udGFpbmVyRWxlbWVudHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fY3JlYXRlQmFzZUNvbnRhaW5lckVsZW1lbnRzKCk7IC8vIGRpdkVsZW1lbnQuc3R5bGUuY2xpcCA9ICdyZWN0KDBweCwgJyt0aGlzLmRhdGEudysncHgsICcrdGhpcy5kYXRhLmgrJ3B4LCAwcHgpJztcblxuXG4gICAgaWYgKHRoaXMuZGF0YS5oYXNNYXNrKSB7XG4gICAgICB0aGlzLnN2Z0VsZW1lbnQuc2V0QXR0cmlidXRlKCd3aWR0aCcsIHRoaXMuZGF0YS53KTtcbiAgICAgIHRoaXMuc3ZnRWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHRoaXMuZGF0YS5oKTtcbiAgICAgIHRoaXMudHJhbnNmb3JtZWRFbGVtZW50ID0gdGhpcy5iYXNlRWxlbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50cmFuc2Zvcm1lZEVsZW1lbnQgPSB0aGlzLmxheWVyRWxlbWVudDtcbiAgICB9XG4gIH07XG5cbiAgSENvbXBFbGVtZW50LnByb3RvdHlwZS5hZGRUbzNkQ29udGFpbmVyID0gZnVuY3Rpb24gKGVsZW0sIHBvcykge1xuICAgIHZhciBqID0gMDtcbiAgICB2YXIgbmV4dEVsZW1lbnQ7XG5cbiAgICB3aGlsZSAoaiA8IHBvcykge1xuICAgICAgaWYgKHRoaXMuZWxlbWVudHNbal0gJiYgdGhpcy5lbGVtZW50c1tqXS5nZXRCYXNlRWxlbWVudCkge1xuICAgICAgICBuZXh0RWxlbWVudCA9IHRoaXMuZWxlbWVudHNbal0uZ2V0QmFzZUVsZW1lbnQoKTtcbiAgICAgIH1cblxuICAgICAgaiArPSAxO1xuICAgIH1cblxuICAgIGlmIChuZXh0RWxlbWVudCkge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuaW5zZXJ0QmVmb3JlKGVsZW0sIG5leHRFbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbSk7XG4gICAgfVxuICB9O1xuXG4gIEhDb21wRWxlbWVudC5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIEh5YnJpZFJlbmRlcmVyKGFuaW1hdGlvbkl0ZW0sIGNvbmZpZykge1xuICAgIHRoaXMuYW5pbWF0aW9uSXRlbSA9IGFuaW1hdGlvbkl0ZW07XG4gICAgdGhpcy5sYXllcnMgPSBudWxsO1xuICAgIHRoaXMucmVuZGVyZWRGcmFtZSA9IC0xO1xuICAgIHRoaXMucmVuZGVyQ29uZmlnID0ge1xuICAgICAgY2xhc3NOYW1lOiBjb25maWcgJiYgY29uZmlnLmNsYXNzTmFtZSB8fCAnJyxcbiAgICAgIGltYWdlUHJlc2VydmVBc3BlY3RSYXRpbzogY29uZmlnICYmIGNvbmZpZy5pbWFnZVByZXNlcnZlQXNwZWN0UmF0aW8gfHwgJ3hNaWRZTWlkIHNsaWNlJyxcbiAgICAgIGhpZGVPblRyYW5zcGFyZW50OiAhKGNvbmZpZyAmJiBjb25maWcuaGlkZU9uVHJhbnNwYXJlbnQgPT09IGZhbHNlKSxcbiAgICAgIGZpbHRlclNpemU6IHtcbiAgICAgICAgd2lkdGg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS53aWR0aCB8fCAnNDAwJScsXG4gICAgICAgIGhlaWdodDogY29uZmlnICYmIGNvbmZpZy5maWx0ZXJTaXplICYmIGNvbmZpZy5maWx0ZXJTaXplLmhlaWdodCB8fCAnNDAwJScsXG4gICAgICAgIHg6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS54IHx8ICctMTAwJScsXG4gICAgICAgIHk6IGNvbmZpZyAmJiBjb25maWcuZmlsdGVyU2l6ZSAmJiBjb25maWcuZmlsdGVyU2l6ZS55IHx8ICctMTAwJSdcbiAgICAgIH0sXG4gICAgICBydW5FeHByZXNzaW9uczogIWNvbmZpZyB8fCBjb25maWcucnVuRXhwcmVzc2lvbnMgPT09IHVuZGVmaW5lZCB8fCBjb25maWcucnVuRXhwcmVzc2lvbnNcbiAgICB9O1xuICAgIHRoaXMuZ2xvYmFsRGF0YSA9IHtcbiAgICAgIF9tZGY6IGZhbHNlLFxuICAgICAgZnJhbWVOdW06IC0xLFxuICAgICAgcmVuZGVyQ29uZmlnOiB0aGlzLnJlbmRlckNvbmZpZ1xuICAgIH07XG4gICAgdGhpcy5wZW5kaW5nRWxlbWVudHMgPSBbXTtcbiAgICB0aGlzLmVsZW1lbnRzID0gW107XG4gICAgdGhpcy50aHJlZURFbGVtZW50cyA9IFtdO1xuICAgIHRoaXMuZGVzdHJveWVkID0gZmFsc2U7XG4gICAgdGhpcy5jYW1lcmEgPSBudWxsO1xuICAgIHRoaXMuc3VwcG9ydHMzZCA9IHRydWU7XG4gICAgdGhpcy5yZW5kZXJlclR5cGUgPSAnaHRtbCc7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW0h5YnJpZFJlbmRlcmVyQmFzZV0sIEh5YnJpZFJlbmRlcmVyKTtcblxuICBIeWJyaWRSZW5kZXJlci5wcm90b3R5cGUuY3JlYXRlQ29tcCA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgaWYgKCF0aGlzLnN1cHBvcnRzM2QpIHtcbiAgICAgIHJldHVybiBuZXcgU1ZHQ29tcEVsZW1lbnQoZGF0YSwgdGhpcy5nbG9iYWxEYXRhLCB0aGlzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEhDb21wRWxlbWVudChkYXRhLCB0aGlzLmdsb2JhbERhdGEsIHRoaXMpO1xuICB9O1xuXG4gIHZhciBDb21wRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGNvbXApIHtcbiAgICAgIGZ1bmN0aW9uIF90aGlzTGF5ZXJGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IGNvbXAubGF5ZXJzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChjb21wLmxheWVyc1tpXS5ubSA9PT0gbmFtZSB8fCBjb21wLmxheWVyc1tpXS5pbmQgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wLmVsZW1lbnRzW2ldLmxheWVySW50ZXJmYWNlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsOyAvLyByZXR1cm4ge2FjdGl2ZTpmYWxzZX07XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0xheWVyRnVuY3Rpb24sICdfbmFtZScsIHtcbiAgICAgICAgdmFsdWU6IGNvbXAuZGF0YS5ubVxuICAgICAgfSk7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ubGF5ZXIgPSBfdGhpc0xheWVyRnVuY3Rpb247XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ucGl4ZWxBc3BlY3QgPSAxO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmhlaWdodCA9IGNvbXAuZGF0YS5oIHx8IGNvbXAuZ2xvYmFsRGF0YS5jb21wU2l6ZS5oO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLndpZHRoID0gY29tcC5kYXRhLncgfHwgY29tcC5nbG9iYWxEYXRhLmNvbXBTaXplLnc7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ucGl4ZWxBc3BlY3QgPSAxO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmZyYW1lRHVyYXRpb24gPSAxIC8gY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5kaXNwbGF5U3RhcnRUaW1lID0gMDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5udW1MYXllcnMgPSBjb21wLmxheWVycy5sZW5ndGg7XG4gICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfdHlwZW9mJDIob2JqKSB7IFwiQGJhYmVsL2hlbHBlcnMgLSB0eXBlb2ZcIjsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YkMiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mJDIgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZiQyKG9iaik7IH1cblxuICAvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4gIC8qXHJcbiAgIENvcHlyaWdodCAyMDE0IERhdmlkIEJhdS5cclxuXHJcbiAgIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZ1xyXG4gICBhIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcclxuICAgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXHJcbiAgIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcclxuICAgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvXHJcbiAgIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0b1xyXG4gICB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG4gICBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZVxyXG4gICBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiAgIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsXHJcbiAgIEVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxyXG4gICBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuXHJcbiAgIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZXHJcbiAgIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXHJcbiAgIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFXHJcbiAgIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxyXG5cclxuICAgKi9cbiAgZnVuY3Rpb24gc2VlZFJhbmRvbShwb29sLCBtYXRoKSB7XG4gICAgLy9cbiAgICAvLyBUaGUgZm9sbG93aW5nIGNvbnN0YW50cyBhcmUgcmVsYXRlZCB0byBJRUVFIDc1NCBsaW1pdHMuXG4gICAgLy9cbiAgICB2YXIgZ2xvYmFsID0gdGhpcyxcbiAgICAgICAgd2lkdGggPSAyNTYsXG4gICAgICAgIC8vIGVhY2ggUkM0IG91dHB1dCBpcyAwIDw9IHggPCAyNTZcbiAgICBjaHVua3MgPSA2LFxuICAgICAgICAvLyBhdCBsZWFzdCBzaXggUkM0IG91dHB1dHMgZm9yIGVhY2ggZG91YmxlXG4gICAgZGlnaXRzID0gNTIsXG4gICAgICAgIC8vIHRoZXJlIGFyZSA1MiBzaWduaWZpY2FudCBkaWdpdHMgaW4gYSBkb3VibGVcbiAgICBybmduYW1lID0gJ3JhbmRvbScsXG4gICAgICAgIC8vIHJuZ25hbWU6IG5hbWUgZm9yIE1hdGgucmFuZG9tIGFuZCBNYXRoLnNlZWRyYW5kb21cbiAgICBzdGFydGRlbm9tID0gbWF0aC5wb3cod2lkdGgsIGNodW5rcyksXG4gICAgICAgIHNpZ25pZmljYW5jZSA9IG1hdGgucG93KDIsIGRpZ2l0cyksXG4gICAgICAgIG92ZXJmbG93ID0gc2lnbmlmaWNhbmNlICogMixcbiAgICAgICAgbWFzayA9IHdpZHRoIC0gMSxcbiAgICAgICAgbm9kZWNyeXB0bzsgLy8gbm9kZS5qcyBjcnlwdG8gbW9kdWxlLCBpbml0aWFsaXplZCBhdCB0aGUgYm90dG9tLlxuICAgIC8vXG4gICAgLy8gc2VlZHJhbmRvbSgpXG4gICAgLy8gVGhpcyBpcyB0aGUgc2VlZHJhbmRvbSBmdW5jdGlvbiBkZXNjcmliZWQgYWJvdmUuXG4gICAgLy9cblxuICAgIGZ1bmN0aW9uIHNlZWRyYW5kb20oc2VlZCwgb3B0aW9ucywgY2FsbGJhY2spIHtcbiAgICAgIHZhciBrZXkgPSBbXTtcbiAgICAgIG9wdGlvbnMgPSBvcHRpb25zID09PSB0cnVlID8ge1xuICAgICAgICBlbnRyb3B5OiB0cnVlXG4gICAgICB9IDogb3B0aW9ucyB8fCB7fTsgLy8gRmxhdHRlbiB0aGUgc2VlZCBzdHJpbmcgb3IgYnVpbGQgb25lIGZyb20gbG9jYWwgZW50cm9weSBpZiBuZWVkZWQuXG5cbiAgICAgIHZhciBzaG9ydHNlZWQgPSBtaXhrZXkoZmxhdHRlbihvcHRpb25zLmVudHJvcHkgPyBbc2VlZCwgdG9zdHJpbmcocG9vbCldIDogc2VlZCA9PT0gbnVsbCA/IGF1dG9zZWVkKCkgOiBzZWVkLCAzKSwga2V5KTsgLy8gVXNlIHRoZSBzZWVkIHRvIGluaXRpYWxpemUgYW4gQVJDNCBnZW5lcmF0b3IuXG5cbiAgICAgIHZhciBhcmM0ID0gbmV3IEFSQzQoa2V5KTsgLy8gVGhpcyBmdW5jdGlvbiByZXR1cm5zIGEgcmFuZG9tIGRvdWJsZSBpbiBbMCwgMSkgdGhhdCBjb250YWluc1xuICAgICAgLy8gcmFuZG9tbmVzcyBpbiBldmVyeSBiaXQgb2YgdGhlIG1hbnRpc3NhIG9mIHRoZSBJRUVFIDc1NCB2YWx1ZS5cblxuICAgICAgdmFyIHBybmcgPSBmdW5jdGlvbiBwcm5nKCkge1xuICAgICAgICB2YXIgbiA9IGFyYzQuZyhjaHVua3MpLFxuICAgICAgICAgICAgLy8gU3RhcnQgd2l0aCBhIG51bWVyYXRvciBuIDwgMiBeIDQ4XG4gICAgICAgIGQgPSBzdGFydGRlbm9tLFxuICAgICAgICAgICAgLy8gICBhbmQgZGVub21pbmF0b3IgZCA9IDIgXiA0OC5cbiAgICAgICAgeCA9IDA7IC8vICAgYW5kIG5vICdleHRyYSBsYXN0IGJ5dGUnLlxuXG4gICAgICAgIHdoaWxlIChuIDwgc2lnbmlmaWNhbmNlKSB7XG4gICAgICAgICAgLy8gRmlsbCB1cCBhbGwgc2lnbmlmaWNhbnQgZGlnaXRzIGJ5XG4gICAgICAgICAgbiA9IChuICsgeCkgKiB3aWR0aDsgLy8gICBzaGlmdGluZyBudW1lcmF0b3IgYW5kXG5cbiAgICAgICAgICBkICo9IHdpZHRoOyAvLyAgIGRlbm9taW5hdG9yIGFuZCBnZW5lcmF0aW5nIGFcblxuICAgICAgICAgIHggPSBhcmM0LmcoMSk7IC8vICAgbmV3IGxlYXN0LXNpZ25pZmljYW50LWJ5dGUuXG4gICAgICAgIH1cblxuICAgICAgICB3aGlsZSAobiA+PSBvdmVyZmxvdykge1xuICAgICAgICAgIC8vIFRvIGF2b2lkIHJvdW5kaW5nIHVwLCBiZWZvcmUgYWRkaW5nXG4gICAgICAgICAgbiAvPSAyOyAvLyAgIGxhc3QgYnl0ZSwgc2hpZnQgZXZlcnl0aGluZ1xuXG4gICAgICAgICAgZCAvPSAyOyAvLyAgIHJpZ2h0IHVzaW5nIGludGVnZXIgbWF0aCB1bnRpbFxuXG4gICAgICAgICAgeCA+Pj49IDE7IC8vICAgd2UgaGF2ZSBleGFjdGx5IHRoZSBkZXNpcmVkIGJpdHMuXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKG4gKyB4KSAvIGQ7IC8vIEZvcm0gdGhlIG51bWJlciB3aXRoaW4gWzAsIDEpLlxuICAgICAgfTtcblxuICAgICAgcHJuZy5pbnQzMiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyYzQuZyg0KSB8IDA7XG4gICAgICB9O1xuXG4gICAgICBwcm5nLnF1aWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gYXJjNC5nKDQpIC8gMHgxMDAwMDAwMDA7XG4gICAgICB9O1xuXG4gICAgICBwcm5nW1wiZG91YmxlXCJdID0gcHJuZzsgLy8gTWl4IHRoZSByYW5kb21uZXNzIGludG8gYWNjdW11bGF0ZWQgZW50cm9weS5cblxuICAgICAgbWl4a2V5KHRvc3RyaW5nKGFyYzQuUyksIHBvb2wpOyAvLyBDYWxsaW5nIGNvbnZlbnRpb246IHdoYXQgdG8gcmV0dXJuIGFzIGEgZnVuY3Rpb24gb2YgcHJuZywgc2VlZCwgaXNfbWF0aC5cblxuICAgICAgcmV0dXJuIChvcHRpb25zLnBhc3MgfHwgY2FsbGJhY2sgfHwgZnVuY3Rpb24gKHBybmcsIHNlZWQsIGlzX21hdGhfY2FsbCwgc3RhdGUpIHtcbiAgICAgICAgaWYgKHN0YXRlKSB7XG4gICAgICAgICAgLy8gTG9hZCB0aGUgYXJjNCBzdGF0ZSBmcm9tIHRoZSBnaXZlbiBzdGF0ZSBpZiBpdCBoYXMgYW4gUyBhcnJheS5cbiAgICAgICAgICBpZiAoc3RhdGUuUykge1xuICAgICAgICAgICAgY29weShzdGF0ZSwgYXJjNCk7XG4gICAgICAgICAgfSAvLyBPbmx5IHByb3ZpZGUgdGhlIC5zdGF0ZSBtZXRob2QgaWYgcmVxdWVzdGVkIHZpYSBvcHRpb25zLnN0YXRlLlxuXG5cbiAgICAgICAgICBwcm5nLnN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvcHkoYXJjNCwge30pO1xuICAgICAgICAgIH07XG4gICAgICAgIH0gLy8gSWYgY2FsbGVkIGFzIGEgbWV0aG9kIG9mIE1hdGggKE1hdGguc2VlZHJhbmRvbSgpKSwgbXV0YXRlXG4gICAgICAgIC8vIE1hdGgucmFuZG9tIGJlY2F1c2UgdGhhdCBpcyBob3cgc2VlZHJhbmRvbS5qcyBoYXMgd29ya2VkIHNpbmNlIHYxLjAuXG5cblxuICAgICAgICBpZiAoaXNfbWF0aF9jYWxsKSB7XG4gICAgICAgICAgbWF0aFtybmduYW1lXSA9IHBybmc7XG4gICAgICAgICAgcmV0dXJuIHNlZWQ7XG4gICAgICAgIH0gLy8gT3RoZXJ3aXNlLCBpdCBpcyBhIG5ld2VyIGNhbGxpbmcgY29udmVudGlvbiwgc28gcmV0dXJuIHRoZVxuICAgICAgICAvLyBwcm5nIGRpcmVjdGx5LlxuICAgICAgICBlbHNlIHJldHVybiBwcm5nO1xuICAgICAgfSkocHJuZywgc2hvcnRzZWVkLCAnZ2xvYmFsJyBpbiBvcHRpb25zID8gb3B0aW9ucy5nbG9iYWwgOiB0aGlzID09IG1hdGgsIG9wdGlvbnMuc3RhdGUpO1xuICAgIH1cblxuICAgIG1hdGhbJ3NlZWQnICsgcm5nbmFtZV0gPSBzZWVkcmFuZG9tOyAvL1xuICAgIC8vIEFSQzRcbiAgICAvL1xuICAgIC8vIEFuIEFSQzQgaW1wbGVtZW50YXRpb24uICBUaGUgY29uc3RydWN0b3IgdGFrZXMgYSBrZXkgaW4gdGhlIGZvcm0gb2ZcbiAgICAvLyBhbiBhcnJheSBvZiBhdCBtb3N0ICh3aWR0aCkgaW50ZWdlcnMgdGhhdCBzaG91bGQgYmUgMCA8PSB4IDwgKHdpZHRoKS5cbiAgICAvL1xuICAgIC8vIFRoZSBnKGNvdW50KSBtZXRob2QgcmV0dXJucyBhIHBzZXVkb3JhbmRvbSBpbnRlZ2VyIHRoYXQgY29uY2F0ZW5hdGVzXG4gICAgLy8gdGhlIG5leHQgKGNvdW50KSBvdXRwdXRzIGZyb20gQVJDNC4gIEl0cyByZXR1cm4gdmFsdWUgaXMgYSBudW1iZXIgeFxuICAgIC8vIHRoYXQgaXMgaW4gdGhlIHJhbmdlIDAgPD0geCA8ICh3aWR0aCBeIGNvdW50KS5cbiAgICAvL1xuXG4gICAgZnVuY3Rpb24gQVJDNChrZXkpIHtcbiAgICAgIHZhciB0LFxuICAgICAgICAgIGtleWxlbiA9IGtleS5sZW5ndGgsXG4gICAgICAgICAgbWUgPSB0aGlzLFxuICAgICAgICAgIGkgPSAwLFxuICAgICAgICAgIGogPSBtZS5pID0gbWUuaiA9IDAsXG4gICAgICAgICAgcyA9IG1lLlMgPSBbXTsgLy8gVGhlIGVtcHR5IGtleSBbXSBpcyB0cmVhdGVkIGFzIFswXS5cblxuICAgICAgaWYgKCFrZXlsZW4pIHtcbiAgICAgICAga2V5ID0gW2tleWxlbisrXTtcbiAgICAgIH0gLy8gU2V0IHVwIFMgdXNpbmcgdGhlIHN0YW5kYXJkIGtleSBzY2hlZHVsaW5nIGFsZ29yaXRobS5cblxuXG4gICAgICB3aGlsZSAoaSA8IHdpZHRoKSB7XG4gICAgICAgIHNbaV0gPSBpKys7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgICAgIHNbaV0gPSBzW2ogPSBtYXNrICYgaiArIGtleVtpICUga2V5bGVuXSArICh0ID0gc1tpXSldO1xuICAgICAgICBzW2pdID0gdDtcbiAgICAgIH0gLy8gVGhlIFwiZ1wiIG1ldGhvZCByZXR1cm5zIHRoZSBuZXh0IChjb3VudCkgb3V0cHV0cyBhcyBvbmUgbnVtYmVyLlxuXG5cbiAgICAgIG1lLmcgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICAgICAgLy8gVXNpbmcgaW5zdGFuY2UgbWVtYmVycyBpbnN0ZWFkIG9mIGNsb3N1cmUgc3RhdGUgbmVhcmx5IGRvdWJsZXMgc3BlZWQuXG4gICAgICAgIHZhciB0LFxuICAgICAgICAgICAgciA9IDAsXG4gICAgICAgICAgICBpID0gbWUuaSxcbiAgICAgICAgICAgIGogPSBtZS5qLFxuICAgICAgICAgICAgcyA9IG1lLlM7XG5cbiAgICAgICAgd2hpbGUgKGNvdW50LS0pIHtcbiAgICAgICAgICB0ID0gc1tpID0gbWFzayAmIGkgKyAxXTtcbiAgICAgICAgICByID0gciAqIHdpZHRoICsgc1ttYXNrICYgKHNbaV0gPSBzW2ogPSBtYXNrICYgaiArIHRdKSArIChzW2pdID0gdCldO1xuICAgICAgICB9XG5cbiAgICAgICAgbWUuaSA9IGk7XG4gICAgICAgIG1lLmogPSBqO1xuICAgICAgICByZXR1cm4gcjsgLy8gRm9yIHJvYnVzdCB1bnByZWRpY3RhYmlsaXR5LCB0aGUgZnVuY3Rpb24gY2FsbCBiZWxvdyBhdXRvbWF0aWNhbGx5XG4gICAgICAgIC8vIGRpc2NhcmRzIGFuIGluaXRpYWwgYmF0Y2ggb2YgdmFsdWVzLiAgVGhpcyBpcyBjYWxsZWQgUkM0LWRyb3BbMjU2XS5cbiAgICAgICAgLy8gU2VlIGh0dHA6Ly9nb29nbGUuY29tL3NlYXJjaD9xPXJzYStmbHVocmVyK3Jlc3BvbnNlJmJ0bklcbiAgICAgIH07XG4gICAgfSAvL1xuICAgIC8vIGNvcHkoKVxuICAgIC8vIENvcGllcyBpbnRlcm5hbCBzdGF0ZSBvZiBBUkM0IHRvIG9yIGZyb20gYSBwbGFpbiBvYmplY3QuXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gY29weShmLCB0KSB7XG4gICAgICB0LmkgPSBmLmk7XG4gICAgICB0LmogPSBmLmo7XG4gICAgICB0LlMgPSBmLlMuc2xpY2UoKTtcbiAgICAgIHJldHVybiB0O1xuICAgIH0gLy9cbiAgICAvLyBmbGF0dGVuKClcbiAgICAvLyBDb252ZXJ0cyBhbiBvYmplY3QgdHJlZSB0byBuZXN0ZWQgYXJyYXlzIG9mIHN0cmluZ3MuXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gZmxhdHRlbihvYmosIGRlcHRoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW10sXG4gICAgICAgICAgdHlwID0gX3R5cGVvZiQyKG9iaiksXG4gICAgICAgICAgcHJvcDtcblxuICAgICAgaWYgKGRlcHRoICYmIHR5cCA9PSAnb2JqZWN0Jykge1xuICAgICAgICBmb3IgKHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGZsYXR0ZW4ob2JqW3Byb3BdLCBkZXB0aCAtIDEpKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiByZXN1bHQubGVuZ3RoID8gcmVzdWx0IDogdHlwID09ICdzdHJpbmcnID8gb2JqIDogb2JqICsgJ1xcMCc7XG4gICAgfSAvL1xuICAgIC8vIG1peGtleSgpXG4gICAgLy8gTWl4ZXMgYSBzdHJpbmcgc2VlZCBpbnRvIGEga2V5IHRoYXQgaXMgYW4gYXJyYXkgb2YgaW50ZWdlcnMsIGFuZFxuICAgIC8vIHJldHVybnMgYSBzaG9ydGVuZWQgc3RyaW5nIHNlZWQgdGhhdCBpcyBlcXVpdmFsZW50IHRvIHRoZSByZXN1bHQga2V5LlxuICAgIC8vXG5cblxuICAgIGZ1bmN0aW9uIG1peGtleShzZWVkLCBrZXkpIHtcbiAgICAgIHZhciBzdHJpbmdzZWVkID0gc2VlZCArICcnLFxuICAgICAgICAgIHNtZWFyLFxuICAgICAgICAgIGogPSAwO1xuXG4gICAgICB3aGlsZSAoaiA8IHN0cmluZ3NlZWQubGVuZ3RoKSB7XG4gICAgICAgIGtleVttYXNrICYgal0gPSBtYXNrICYgKHNtZWFyIF49IGtleVttYXNrICYgal0gKiAxOSkgKyBzdHJpbmdzZWVkLmNoYXJDb2RlQXQoaisrKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRvc3RyaW5nKGtleSk7XG4gICAgfSAvL1xuICAgIC8vIGF1dG9zZWVkKClcbiAgICAvLyBSZXR1cm5zIGFuIG9iamVjdCBmb3IgYXV0b3NlZWRpbmcsIHVzaW5nIHdpbmRvdy5jcnlwdG8gYW5kIE5vZGUgY3J5cHRvXG4gICAgLy8gbW9kdWxlIGlmIGF2YWlsYWJsZS5cbiAgICAvL1xuXG5cbiAgICBmdW5jdGlvbiBhdXRvc2VlZCgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChub2RlY3J5cHRvKSB7XG4gICAgICAgICAgcmV0dXJuIHRvc3RyaW5nKG5vZGVjcnlwdG8ucmFuZG9tQnl0ZXMod2lkdGgpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXQgPSBuZXcgVWludDhBcnJheSh3aWR0aCk7XG4gICAgICAgIChnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKG91dCk7XG4gICAgICAgIHJldHVybiB0b3N0cmluZyhvdXQpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB2YXIgYnJvd3NlciA9IGdsb2JhbC5uYXZpZ2F0b3IsXG4gICAgICAgICAgICBwbHVnaW5zID0gYnJvd3NlciAmJiBicm93c2VyLnBsdWdpbnM7XG4gICAgICAgIHJldHVybiBbK25ldyBEYXRlKCksIGdsb2JhbCwgcGx1Z2lucywgZ2xvYmFsLnNjcmVlbiwgdG9zdHJpbmcocG9vbCldO1xuICAgICAgfVxuICAgIH0gLy9cbiAgICAvLyB0b3N0cmluZygpXG4gICAgLy8gQ29udmVydHMgYW4gYXJyYXkgb2YgY2hhcmNvZGVzIHRvIGEgc3RyaW5nXG4gICAgLy9cblxuXG4gICAgZnVuY3Rpb24gdG9zdHJpbmcoYSkge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCwgYSk7XG4gICAgfSAvL1xuICAgIC8vIFdoZW4gc2VlZHJhbmRvbS5qcyBpcyBsb2FkZWQsIHdlIGltbWVkaWF0ZWx5IG1peCBhIGZldyBiaXRzXG4gICAgLy8gZnJvbSB0aGUgYnVpbHQtaW4gUk5HIGludG8gdGhlIGVudHJvcHkgcG9vbC4gIEJlY2F1c2Ugd2UgZG9cbiAgICAvLyBub3Qgd2FudCB0byBpbnRlcmZlcmUgd2l0aCBkZXRlcm1pbmlzdGljIFBSTkcgc3RhdGUgbGF0ZXIsXG4gICAgLy8gc2VlZHJhbmRvbSB3aWxsIG5vdCBjYWxsIG1hdGgucmFuZG9tIG9uIGl0cyBvd24gYWdhaW4gYWZ0ZXJcbiAgICAvLyBpbml0aWFsaXphdGlvbi5cbiAgICAvL1xuXG5cbiAgICBtaXhrZXkobWF0aC5yYW5kb20oKSwgcG9vbCk7IC8vXG4gICAgLy8gTm9kZWpzIGFuZCBBTUQgc3VwcG9ydDogZXhwb3J0IHRoZSBpbXBsZW1lbnRhdGlvbiBhcyBhIG1vZHVsZSB1c2luZ1xuICAgIC8vIGVpdGhlciBjb252ZW50aW9uLlxuICAgIC8vXG4gICAgLy8gRW5kIGFub255bW91cyBzY29wZSwgYW5kIHBhc3MgaW5pdGlhbCB2YWx1ZXMuXG4gIH1cblxuICA7XG5cbiAgZnVuY3Rpb24gaW5pdGlhbGl6ZSQyKEJNTWF0aCkge1xuICAgIHNlZWRSYW5kb20oW10sIEJNTWF0aCk7XG4gIH1cblxuICB2YXIgcHJvcFR5cGVzID0ge1xuICAgIFNIQVBFOiAnc2hhcGUnXG4gIH07XG5cbiAgZnVuY3Rpb24gX3R5cGVvZiQxKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mJDEgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfTsgfSBlbHNlIHsgX3R5cGVvZiQxID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07IH0gcmV0dXJuIF90eXBlb2YkMShvYmopOyB9XG5cbiAgdmFyIEV4cHJlc3Npb25NYW5hZ2VyID0gZnVuY3Rpb24gKCkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIHZhciBvYiA9IHt9O1xuICAgIHZhciBNYXRoID0gQk1NYXRoO1xuICAgIHZhciB3aW5kb3cgPSBudWxsO1xuICAgIHZhciBkb2N1bWVudCA9IG51bGw7XG4gICAgdmFyIFhNTEh0dHBSZXF1ZXN0ID0gbnVsbDtcbiAgICB2YXIgZmV0Y2ggPSBudWxsO1xuICAgIHZhciBmcmFtZXMgPSBudWxsO1xuICAgIHZhciBfbG90dGllR2xvYmFsID0ge307XG4gICAgaW5pdGlhbGl6ZSQyKEJNTWF0aCk7XG5cbiAgICBmdW5jdGlvbiByZXNldEZyYW1lKCkge1xuICAgICAgX2xvdHRpZUdsb2JhbCA9IHt9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uICRibV9pc0luc3RhbmNlT2ZBcnJheShhcnIpIHtcbiAgICAgIHJldHVybiBhcnIuY29uc3RydWN0b3IgPT09IEFycmF5IHx8IGFyci5jb25zdHJ1Y3RvciA9PT0gRmxvYXQzMkFycmF5O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTnVtZXJhYmxlKHRPZlYsIHYpIHtcbiAgICAgIHJldHVybiB0T2ZWID09PSAnbnVtYmVyJyB8fCB2IGluc3RhbmNlb2YgTnVtYmVyIHx8IHRPZlYgPT09ICdib29sZWFuJyB8fCB0T2ZWID09PSAnc3RyaW5nJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiAkYm1fbmVnKGEpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICBpZiAodE9mQSA9PT0gJ251bWJlcicgfHwgYSBpbnN0YW5jZW9mIE51bWJlciB8fCB0T2ZBID09PSAnYm9vbGVhbicpIHtcbiAgICAgICAgcmV0dXJuIC1hO1xuICAgICAgfVxuXG4gICAgICBpZiAoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuQSA9IGEubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0QXJyID0gW107XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbkE7IGkgKz0gMSkge1xuICAgICAgICAgIHJldEFycltpXSA9IC1hW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgIH1cblxuICAgICAgaWYgKGEucHJvcFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGEudjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIC1hO1xuICAgIH1cblxuICAgIHZhciBlYXNlSW5CZXogPSBCZXppZXJGYWN0b3J5LmdldEJlemllckVhc2luZygwLjMzMywgMCwgMC44MzMsIDAuODMzLCAnZWFzZUluJykuZ2V0O1xuICAgIHZhciBlYXNlT3V0QmV6ID0gQmV6aWVyRmFjdG9yeS5nZXRCZXppZXJFYXNpbmcoMC4xNjcsIDAuMTY3LCAwLjY2NywgMSwgJ2Vhc2VPdXQnKS5nZXQ7XG4gICAgdmFyIGVhc2VJbk91dEJleiA9IEJlemllckZhY3RvcnkuZ2V0QmV6aWVyRWFzaW5nKDAuMzMsIDAsIDAuNjY3LCAxLCAnZWFzZUluT3V0JykuZ2V0O1xuXG4gICAgZnVuY3Rpb24gc3VtKGEsIGIpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICB2YXIgdE9mQiA9IF90eXBlb2YkMShiKTtcblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpIHx8IHRPZkEgPT09ICdzdHJpbmcnIHx8IHRPZkIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBhICsgYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBhID0gYS5zbGljZSgwKTtcbiAgICAgICAgYVswXSArPSBiO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmICRibV9pc0luc3RhbmNlT2ZBcnJheShiKSkge1xuICAgICAgICBiID0gYi5zbGljZSgwKTtcbiAgICAgICAgYlswXSA9IGEgKyBiWzBdO1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuQSA9IGEubGVuZ3RoO1xuICAgICAgICB2YXIgbGVuQiA9IGIubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0QXJyID0gW107XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW5BIHx8IGkgPCBsZW5CKSB7XG4gICAgICAgICAgaWYgKCh0eXBlb2YgYVtpXSA9PT0gJ251bWJlcicgfHwgYVtpXSBpbnN0YW5jZW9mIE51bWJlcikgJiYgKHR5cGVvZiBiW2ldID09PSAnbnVtYmVyJyB8fCBiW2ldIGluc3RhbmNlb2YgTnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0QXJyW2ldID0gYVtpXSArIGJbaV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGJbaV0gPT09IHVuZGVmaW5lZCA/IGFbaV0gOiBhW2ldIHx8IGJbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgdmFyIGFkZCA9IHN1bTtcblxuICAgIGZ1bmN0aW9uIHN1YihhLCBiKSB7XG4gICAgICB2YXIgdE9mQSA9IF90eXBlb2YkMShhKTtcblxuICAgICAgdmFyIHRPZkIgPSBfdHlwZW9mJDEoYik7XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBpZiAodE9mQSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBhID0gcGFyc2VJbnQoYSwgMTApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRPZkIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgYiA9IHBhcnNlSW50KGIsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhIC0gYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiBpc051bWVyYWJsZSh0T2ZCLCBiKSkge1xuICAgICAgICBhID0gYS5zbGljZSgwKTtcbiAgICAgICAgYVswXSAtPSBiO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmICRibV9pc0luc3RhbmNlT2ZBcnJheShiKSkge1xuICAgICAgICBiID0gYi5zbGljZSgwKTtcbiAgICAgICAgYlswXSA9IGEgLSBiWzBdO1xuICAgICAgICByZXR1cm4gYjtcbiAgICAgIH1cblxuICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheShhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuQSA9IGEubGVuZ3RoO1xuICAgICAgICB2YXIgbGVuQiA9IGIubGVuZ3RoO1xuICAgICAgICB2YXIgcmV0QXJyID0gW107XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW5BIHx8IGkgPCBsZW5CKSB7XG4gICAgICAgICAgaWYgKCh0eXBlb2YgYVtpXSA9PT0gJ251bWJlcicgfHwgYVtpXSBpbnN0YW5jZW9mIE51bWJlcikgJiYgKHR5cGVvZiBiW2ldID09PSAnbnVtYmVyJyB8fCBiW2ldIGluc3RhbmNlb2YgTnVtYmVyKSkge1xuICAgICAgICAgICAgcmV0QXJyW2ldID0gYVtpXSAtIGJbaV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldEFycltpXSA9IGJbaV0gPT09IHVuZGVmaW5lZCA/IGFbaV0gOiBhW2ldIHx8IGJbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldEFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbXVsKGEsIGIpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICB2YXIgdE9mQiA9IF90eXBlb2YkMShiKTtcblxuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIHJldHVybiBhICogYjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuXG4gICAgICBpZiAoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIGxlbiA9IGEubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhW2ldICogYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgbGVuID0gYi5sZW5ndGg7XG4gICAgICAgIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGFycltpXSA9IGEgKiBiW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGl2KGEsIGIpIHtcbiAgICAgIHZhciB0T2ZBID0gX3R5cGVvZiQxKGEpO1xuXG4gICAgICB2YXIgdE9mQiA9IF90eXBlb2YkMShiKTtcblxuICAgICAgdmFyIGFycjtcblxuICAgICAgaWYgKGlzTnVtZXJhYmxlKHRPZkEsIGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIHJldHVybiBhIC8gYjtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuO1xuXG4gICAgICBpZiAoJGJtX2lzSW5zdGFuY2VPZkFycmF5KGEpICYmIGlzTnVtZXJhYmxlKHRPZkIsIGIpKSB7XG4gICAgICAgIGxlbiA9IGEubGVuZ3RoO1xuICAgICAgICBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBhW2ldIC8gYjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc051bWVyYWJsZSh0T2ZBLCBhKSAmJiAkYm1faXNJbnN0YW5jZU9mQXJyYXkoYikpIHtcbiAgICAgICAgbGVuID0gYi5sZW5ndGg7XG4gICAgICAgIGFyciA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICAgIGFycltpXSA9IGEgLyBiW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9kKGEsIGIpIHtcbiAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgYSA9IHBhcnNlSW50KGEsIDEwKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBiID09PSAnc3RyaW5nJykge1xuICAgICAgICBiID0gcGFyc2VJbnQoYiwgMTApO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYSAlIGI7XG4gICAgfVxuXG4gICAgdmFyICRibV9zdW0gPSBzdW07XG4gICAgdmFyICRibV9zdWIgPSBzdWI7XG4gICAgdmFyICRibV9tdWwgPSBtdWw7XG4gICAgdmFyICRibV9kaXYgPSBkaXY7XG4gICAgdmFyICRibV9tb2QgPSBtb2Q7XG5cbiAgICBmdW5jdGlvbiBjbGFtcChudW0sIG1pbiwgbWF4KSB7XG4gICAgICBpZiAobWluID4gbWF4KSB7XG4gICAgICAgIHZhciBtbSA9IG1heDtcbiAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICBtaW4gPSBtbTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG51bSwgbWluKSwgbWF4KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCAvIGRlZ1RvUmFkcztcbiAgICB9XG5cbiAgICB2YXIgcmFkaWFuc190b19kZWdyZWVzID0gcmFkaWFuc1RvRGVncmVlcztcblxuICAgIGZ1bmN0aW9uIGRlZ3JlZXNUb1JhZGlhbnModmFsKSB7XG4gICAgICByZXR1cm4gdmFsICogZGVnVG9SYWRzO1xuICAgIH1cblxuICAgIHZhciBkZWdyZWVzX3RvX3JhZGlhbnMgPSByYWRpYW5zVG9EZWdyZWVzO1xuICAgIHZhciBoZWxwZXJMZW5ndGhBcnJheSA9IFswLCAwLCAwLCAwLCAwLCAwXTtcblxuICAgIGZ1bmN0aW9uIGxlbmd0aChhcnIxLCBhcnIyKSB7XG4gICAgICBpZiAodHlwZW9mIGFycjEgPT09ICdudW1iZXInIHx8IGFycjEgaW5zdGFuY2VvZiBOdW1iZXIpIHtcbiAgICAgICAgYXJyMiA9IGFycjIgfHwgMDtcbiAgICAgICAgcmV0dXJuIE1hdGguYWJzKGFycjEgLSBhcnIyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFhcnIyKSB7XG4gICAgICAgIGFycjIgPSBoZWxwZXJMZW5ndGhBcnJheTtcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyMS5sZW5ndGgsIGFycjIubGVuZ3RoKTtcbiAgICAgIHZhciBhZGRlZExlbmd0aCA9IDA7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhZGRlZExlbmd0aCArPSBNYXRoLnBvdyhhcnIyW2ldIC0gYXJyMVtpXSwgMik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBNYXRoLnNxcnQoYWRkZWRMZW5ndGgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZSh2ZWMpIHtcbiAgICAgIHJldHVybiBkaXYodmVjLCBsZW5ndGgodmVjKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmdiVG9Ic2wodmFsKSB7XG4gICAgICB2YXIgciA9IHZhbFswXTtcbiAgICAgIHZhciBnID0gdmFsWzFdO1xuICAgICAgdmFyIGIgPSB2YWxbMl07XG4gICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gICAgICB2YXIgaDtcbiAgICAgIHZhciBzO1xuICAgICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG5cbiAgICAgIGlmIChtYXggPT09IG1pbikge1xuICAgICAgICBoID0gMDsgLy8gYWNocm9tYXRpY1xuXG4gICAgICAgIHMgPSAwOyAvLyBhY2hyb21hdGljXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZCA9IG1heCAtIG1pbjtcbiAgICAgICAgcyA9IGwgPiAwLjUgPyBkIC8gKDIgLSBtYXggLSBtaW4pIDogZCAvIChtYXggKyBtaW4pO1xuXG4gICAgICAgIHN3aXRjaCAobWF4KSB7XG4gICAgICAgICAgY2FzZSByOlxuICAgICAgICAgICAgaCA9IChnIC0gYikgLyBkICsgKGcgPCBiID8gNiA6IDApO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICBoID0gKGIgLSByKSAvIGQgKyAyO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIGI6XG4gICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBoIC89IDY7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbaCwgcywgbCwgdmFsWzNdXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgICAgIGlmICh0IDwgMCkgdCArPSAxO1xuICAgICAgaWYgKHQgPiAxKSB0IC09IDE7XG4gICAgICBpZiAodCA8IDEgLyA2KSByZXR1cm4gcCArIChxIC0gcCkgKiA2ICogdDtcbiAgICAgIGlmICh0IDwgMSAvIDIpIHJldHVybiBxO1xuICAgICAgaWYgKHQgPCAyIC8gMykgcmV0dXJuIHAgKyAocSAtIHApICogKDIgLyAzIC0gdCkgKiA2O1xuICAgICAgcmV0dXJuIHA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaHNsVG9SZ2IodmFsKSB7XG4gICAgICB2YXIgaCA9IHZhbFswXTtcbiAgICAgIHZhciBzID0gdmFsWzFdO1xuICAgICAgdmFyIGwgPSB2YWxbMl07XG4gICAgICB2YXIgcjtcbiAgICAgIHZhciBnO1xuICAgICAgdmFyIGI7XG5cbiAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIHIgPSBsOyAvLyBhY2hyb21hdGljXG5cbiAgICAgICAgYiA9IGw7IC8vIGFjaHJvbWF0aWNcblxuICAgICAgICBnID0gbDsgLy8gYWNocm9tYXRpY1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHEgPSBsIDwgMC41ID8gbCAqICgxICsgcykgOiBsICsgcyAtIGwgKiBzO1xuICAgICAgICB2YXIgcCA9IDIgKiBsIC0gcTtcbiAgICAgICAgciA9IGh1ZTJyZ2IocCwgcSwgaCArIDEgLyAzKTtcbiAgICAgICAgZyA9IGh1ZTJyZ2IocCwgcSwgaCk7XG4gICAgICAgIGIgPSBodWUycmdiKHAsIHEsIGggLSAxIC8gMyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbciwgZywgYiwgdmFsWzNdXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaW5lYXIodCwgdE1pbiwgdE1heCwgdmFsdWUxLCB2YWx1ZTIpIHtcbiAgICAgIGlmICh2YWx1ZTEgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZTIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YWx1ZTEgPSB0TWluO1xuICAgICAgICB2YWx1ZTIgPSB0TWF4O1xuICAgICAgICB0TWluID0gMDtcbiAgICAgICAgdE1heCA9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0TWF4IDwgdE1pbikge1xuICAgICAgICB2YXIgX3RNaW4gPSB0TWF4O1xuICAgICAgICB0TWF4ID0gdE1pbjtcbiAgICAgICAgdE1pbiA9IF90TWluO1xuICAgICAgfVxuXG4gICAgICBpZiAodCA8PSB0TWluKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ID49IHRNYXgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlMjtcbiAgICAgIH1cblxuICAgICAgdmFyIHBlcmMgPSB0TWF4ID09PSB0TWluID8gMCA6ICh0IC0gdE1pbikgLyAodE1heCAtIHRNaW4pO1xuXG4gICAgICBpZiAoIXZhbHVlMS5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlMSArICh2YWx1ZTIgLSB2YWx1ZTEpICogcGVyYztcbiAgICAgIH1cblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gdmFsdWUxLmxlbmd0aDtcbiAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcblxuICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgIGFycltpXSA9IHZhbHVlMVtpXSArICh2YWx1ZTJbaV0gLSB2YWx1ZTFbaV0pICogcGVyYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGFycjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByYW5kb20obWluLCBtYXgpIHtcbiAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAobWluID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBtaW4gPSAwO1xuICAgICAgICAgIG1heCA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF4ID0gbWluO1xuICAgICAgICAgIG1pbiA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAobWF4Lmxlbmd0aCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IG1heC5sZW5ndGg7XG5cbiAgICAgICAgaWYgKCFtaW4pIHtcbiAgICAgICAgICBtaW4gPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhcnIgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgICAgdmFyIHJuZCA9IEJNTWF0aC5yYW5kb20oKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnJbaV0gPSBtaW5baV0gKyBybmQgKiAobWF4W2ldIC0gbWluW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG5cbiAgICAgIGlmIChtaW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfVxuXG4gICAgICB2YXIgcm5kbSA9IEJNTWF0aC5yYW5kb20oKTtcbiAgICAgIHJldHVybiBtaW4gKyBybmRtICogKG1heCAtIG1pbik7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlUGF0aChwb2ludHMsIGluVGFuZ2VudHMsIG91dFRhbmdlbnRzLCBjbG9zZWQpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHBvaW50cy5sZW5ndGg7XG4gICAgICB2YXIgcGF0aCA9IHNoYXBlUG9vbC5uZXdFbGVtZW50KCk7XG4gICAgICBwYXRoLnNldFBhdGhEYXRhKCEhY2xvc2VkLCBsZW4pO1xuICAgICAgdmFyIGFyclBsYWNlaG9sZGVyID0gWzAsIDBdO1xuICAgICAgdmFyIGluVmVydGV4UG9pbnQ7XG4gICAgICB2YXIgb3V0VmVydGV4UG9pbnQ7XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBpblZlcnRleFBvaW50ID0gaW5UYW5nZW50cyAmJiBpblRhbmdlbnRzW2ldID8gaW5UYW5nZW50c1tpXSA6IGFyclBsYWNlaG9sZGVyO1xuICAgICAgICBvdXRWZXJ0ZXhQb2ludCA9IG91dFRhbmdlbnRzICYmIG91dFRhbmdlbnRzW2ldID8gb3V0VGFuZ2VudHNbaV0gOiBhcnJQbGFjZWhvbGRlcjtcbiAgICAgICAgcGF0aC5zZXRUcmlwbGVBdChwb2ludHNbaV1bMF0sIHBvaW50c1tpXVsxXSwgb3V0VmVydGV4UG9pbnRbMF0gKyBwb2ludHNbaV1bMF0sIG91dFZlcnRleFBvaW50WzFdICsgcG9pbnRzW2ldWzFdLCBpblZlcnRleFBvaW50WzBdICsgcG9pbnRzW2ldWzBdLCBpblZlcnRleFBvaW50WzFdICsgcG9pbnRzW2ldWzFdLCBpLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhdGg7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdGlhdGVFeHByZXNzaW9uKGVsZW0sIGRhdGEsIHByb3BlcnR5KSB7XG4gICAgICAvLyBCYWlsIG91dCBpZiB3ZSBkb24ndCB3YW50IGV4cHJlc3Npb25zXG4gICAgICBmdW5jdGlvbiBub09wKF92YWx1ZSkge1xuICAgICAgICByZXR1cm4gX3ZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWVsZW0uZ2xvYmFsRGF0YS5yZW5kZXJDb25maWcucnVuRXhwcmVzc2lvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5vT3A7XG4gICAgICB9XG5cbiAgICAgIHZhciB2YWwgPSBkYXRhLng7XG4gICAgICB2YXIgbmVlZHNWZWxvY2l0eSA9IC92ZWxvY2l0eSg/IVtcXHdcXGRdKS8udGVzdCh2YWwpO1xuXG4gICAgICB2YXIgX25lZWRzUmFuZG9tID0gdmFsLmluZGV4T2YoJ3JhbmRvbScpICE9PSAtMTtcblxuICAgICAgdmFyIGVsZW1UeXBlID0gZWxlbS5kYXRhLnR5O1xuICAgICAgdmFyIHRyYW5zZm9ybTtcbiAgICAgIHZhciAkYm1fdHJhbnNmb3JtO1xuICAgICAgdmFyIGNvbnRlbnQ7XG4gICAgICB2YXIgZWZmZWN0O1xuICAgICAgdmFyIHRoaXNQcm9wZXJ0eSA9IHByb3BlcnR5O1xuICAgICAgdGhpc1Byb3BlcnR5LnZhbHVlQXRUaW1lID0gdGhpc1Byb3BlcnR5LmdldFZhbHVlQXRUaW1lO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXNQcm9wZXJ0eSwgJ3ZhbHVlJywge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gdGhpc1Byb3BlcnR5LnY7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgZWxlbS5jb21wLmZyYW1lRHVyYXRpb24gPSAxIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgZWxlbS5jb21wLmRpc3BsYXlTdGFydFRpbWUgPSAwO1xuICAgICAgdmFyIGluUG9pbnQgPSBlbGVtLmRhdGEuaXAgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICB2YXIgb3V0UG9pbnQgPSBlbGVtLmRhdGEub3AgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICB2YXIgd2lkdGggPSBlbGVtLmRhdGEuc3cgPyBlbGVtLmRhdGEuc3cgOiAwO1xuICAgICAgdmFyIGhlaWdodCA9IGVsZW0uZGF0YS5zaCA/IGVsZW0uZGF0YS5zaCA6IDA7XG4gICAgICB2YXIgbmFtZSA9IGVsZW0uZGF0YS5ubTtcbiAgICAgIHZhciBsb29wSW47XG4gICAgICB2YXIgbG9vcF9pbjtcbiAgICAgIHZhciBsb29wT3V0O1xuICAgICAgdmFyIGxvb3Bfb3V0O1xuICAgICAgdmFyIHNtb290aDtcbiAgICAgIHZhciB0b1dvcmxkO1xuICAgICAgdmFyIGZyb21Xb3JsZDtcbiAgICAgIHZhciBmcm9tQ29tcDtcbiAgICAgIHZhciB0b0NvbXA7XG4gICAgICB2YXIgZnJvbUNvbXBUb1N1cmZhY2U7XG4gICAgICB2YXIgcG9zaXRpb247XG4gICAgICB2YXIgcm90YXRpb247XG4gICAgICB2YXIgYW5jaG9yUG9pbnQ7XG4gICAgICB2YXIgc2NhbGU7XG4gICAgICB2YXIgdGhpc0xheWVyO1xuICAgICAgdmFyIHRoaXNDb21wO1xuICAgICAgdmFyIG1hc2s7XG4gICAgICB2YXIgdmFsdWVBdFRpbWU7XG4gICAgICB2YXIgdmVsb2NpdHlBdFRpbWU7XG4gICAgICB2YXIgc2NvcGVkX2JtX3J0OyAvLyB2YWwgPSB2YWwucmVwbGFjZSgvKFxcXFw/XCJ8JykoKGh0dHApKHMpPyg6XFwvKSk/XFwvLio/KFxcXFw/XCJ8JykvZywgXCJcXFwiXFxcIlwiKTsgLy8gZGV0ZXIgcG90ZW50aWFsIG5ldHdvcmsgY2FsbHNcblxuICAgICAgdmFyIGV4cHJlc3Npb25fZnVuY3Rpb24gPSBldmFsKCdbZnVuY3Rpb24gX2V4cHJlc3Npb25fZnVuY3Rpb24oKXsnICsgdmFsICsgJztzY29wZWRfYm1fcnQ9JGJtX3J0fV0nKVswXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cbiAgICAgIHZhciBudW1LZXlzID0gcHJvcGVydHkua2YgPyBkYXRhLmsubGVuZ3RoIDogMDtcbiAgICAgIHZhciBhY3RpdmUgPSAhdGhpcy5kYXRhIHx8IHRoaXMuZGF0YS5oZCAhPT0gdHJ1ZTtcblxuICAgICAgdmFyIHdpZ2dsZSA9IGZ1bmN0aW9uIHdpZ2dsZShmcmVxLCBhbXApIHtcbiAgICAgICAgdmFyIGlXaWdnbGU7XG4gICAgICAgIHZhciBqO1xuICAgICAgICB2YXIgbGVuV2lnZ2xlID0gdGhpcy5wdi5sZW5ndGggPyB0aGlzLnB2Lmxlbmd0aCA6IDE7XG4gICAgICAgIHZhciBhZGRlZEFtcHMgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuV2lnZ2xlKTtcbiAgICAgICAgZnJlcSA9IDU7XG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gTWF0aC5mbG9vcih0aW1lICogZnJlcSk7XG4gICAgICAgIGlXaWdnbGUgPSAwO1xuICAgICAgICBqID0gMDtcblxuICAgICAgICB3aGlsZSAoaVdpZ2dsZSA8IGl0ZXJhdGlvbnMpIHtcbiAgICAgICAgICAvLyB2YXIgcm5kID0gQk1NYXRoLnJhbmRvbSgpO1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBsZW5XaWdnbGU7IGogKz0gMSkge1xuICAgICAgICAgICAgYWRkZWRBbXBzW2pdICs9IC1hbXAgKyBhbXAgKiAyICogQk1NYXRoLnJhbmRvbSgpOyAvLyBhZGRlZEFtcHNbal0gKz0gLWFtcCArIGFtcCoyKnJuZDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpV2lnZ2xlICs9IDE7XG4gICAgICAgIH0gLy8gdmFyIHJuZDIgPSBCTU1hdGgucmFuZG9tKCk7XG5cblxuICAgICAgICB2YXIgcGVyaW9kcyA9IHRpbWUgKiBmcmVxO1xuICAgICAgICB2YXIgcGVyYyA9IHBlcmlvZHMgLSBNYXRoLmZsb29yKHBlcmlvZHMpO1xuICAgICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbldpZ2dsZSk7XG5cbiAgICAgICAgaWYgKGxlbldpZ2dsZSA+IDEpIHtcbiAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgbGVuV2lnZ2xlOyBqICs9IDEpIHtcbiAgICAgICAgICAgIGFycltqXSA9IHRoaXMucHZbal0gKyBhZGRlZEFtcHNbal0gKyAoLWFtcCArIGFtcCAqIDIgKiBCTU1hdGgucmFuZG9tKCkpICogcGVyYzsgLy8gYXJyW2pdID0gdGhpcy5wdltqXSArIGFkZGVkQW1wc1tqXSArICgtYW1wICsgYW1wKjIqcm5kKSpwZXJjO1xuICAgICAgICAgICAgLy8gYXJyW2ldID0gdGhpcy5wdltpXSArIGFkZGVkQW1wICsgYW1wMSpwZXJjICsgYW1wMiooMS1wZXJjKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucHYgKyBhZGRlZEFtcHNbMF0gKyAoLWFtcCArIGFtcCAqIDIgKiBCTU1hdGgucmFuZG9tKCkpICogcGVyYztcbiAgICAgIH0uYmluZCh0aGlzKTtcblxuICAgICAgaWYgKHRoaXNQcm9wZXJ0eS5sb29wSW4pIHtcbiAgICAgICAgbG9vcEluID0gdGhpc1Byb3BlcnR5Lmxvb3BJbi5iaW5kKHRoaXNQcm9wZXJ0eSk7XG4gICAgICAgIGxvb3BfaW4gPSBsb29wSW47XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzUHJvcGVydHkubG9vcE91dCkge1xuICAgICAgICBsb29wT3V0ID0gdGhpc1Byb3BlcnR5Lmxvb3BPdXQuYmluZCh0aGlzUHJvcGVydHkpO1xuICAgICAgICBsb29wX291dCA9IGxvb3BPdXQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzUHJvcGVydHkuc21vb3RoKSB7XG4gICAgICAgIHNtb290aCA9IHRoaXNQcm9wZXJ0eS5zbW9vdGguYmluZCh0aGlzUHJvcGVydHkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBsb29wSW5EdXJhdGlvbih0eXBlLCBkdXJhdGlvbikge1xuICAgICAgICByZXR1cm4gbG9vcEluKHR5cGUsIGR1cmF0aW9uLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbG9vcE91dER1cmF0aW9uKHR5cGUsIGR1cmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBsb29wT3V0KHR5cGUsIGR1cmF0aW9uLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZ2V0VmFsdWVBdFRpbWUpIHtcbiAgICAgICAgdmFsdWVBdFRpbWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lLmJpbmQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmdldFZlbG9jaXR5QXRUaW1lKSB7XG4gICAgICAgIHZlbG9jaXR5QXRUaW1lID0gdGhpcy5nZXRWZWxvY2l0eUF0VGltZS5iaW5kKHRoaXMpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29tcCA9IGVsZW0uY29tcC5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UuYmluZChlbGVtLmNvbXAuZ2xvYmFsRGF0YS5wcm9qZWN0SW50ZXJmYWNlKTtcblxuICAgICAgZnVuY3Rpb24gbG9va0F0KGVsZW0xLCBlbGVtMikge1xuICAgICAgICB2YXIgZlZlYyA9IFtlbGVtMlswXSAtIGVsZW0xWzBdLCBlbGVtMlsxXSAtIGVsZW0xWzFdLCBlbGVtMlsyXSAtIGVsZW0xWzJdXTtcbiAgICAgICAgdmFyIHBpdGNoID0gTWF0aC5hdGFuMihmVmVjWzBdLCBNYXRoLnNxcnQoZlZlY1sxXSAqIGZWZWNbMV0gKyBmVmVjWzJdICogZlZlY1syXSkpIC8gZGVnVG9SYWRzO1xuICAgICAgICB2YXIgeWF3ID0gLU1hdGguYXRhbjIoZlZlY1sxXSwgZlZlY1syXSkgLyBkZWdUb1JhZHM7XG4gICAgICAgIHJldHVybiBbeWF3LCBwaXRjaCwgMF07XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVhc2VPdXQodCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICByZXR1cm4gYXBwbHlFYXNlKGVhc2VPdXRCZXosIHQsIHRNaW4sIHRNYXgsIHZhbDEsIHZhbDIpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBlYXNlSW4odCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICByZXR1cm4gYXBwbHlFYXNlKGVhc2VJbkJleiwgdCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGVhc2UodCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICByZXR1cm4gYXBwbHlFYXNlKGVhc2VJbk91dEJleiwgdCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMik7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGFwcGx5RWFzZShmbiwgdCwgdE1pbiwgdE1heCwgdmFsMSwgdmFsMikge1xuICAgICAgICBpZiAodmFsMSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFsMSA9IHRNaW47XG4gICAgICAgICAgdmFsMiA9IHRNYXg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdCA9ICh0IC0gdE1pbikgLyAodE1heCAtIHRNaW4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHQgPiAxKSB7XG4gICAgICAgICAgdCA9IDE7XG4gICAgICAgIH0gZWxzZSBpZiAodCA8IDApIHtcbiAgICAgICAgICB0ID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtdWx0ID0gZm4odCk7XG5cbiAgICAgICAgaWYgKCRibV9pc0luc3RhbmNlT2ZBcnJheSh2YWwxKSkge1xuICAgICAgICAgIHZhciBpS2V5O1xuICAgICAgICAgIHZhciBsZW5LZXkgPSB2YWwxLmxlbmd0aDtcbiAgICAgICAgICB2YXIgYXJyID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGxlbktleSk7XG5cbiAgICAgICAgICBmb3IgKGlLZXkgPSAwOyBpS2V5IDwgbGVuS2V5OyBpS2V5ICs9IDEpIHtcbiAgICAgICAgICAgIGFycltpS2V5XSA9ICh2YWwyW2lLZXldIC0gdmFsMVtpS2V5XSkgKiBtdWx0ICsgdmFsMVtpS2V5XTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh2YWwyIC0gdmFsMSkgKiBtdWx0ICsgdmFsMTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gbmVhcmVzdEtleSh0aW1lKSB7XG4gICAgICAgIHZhciBpS2V5O1xuICAgICAgICB2YXIgbGVuS2V5ID0gZGF0YS5rLmxlbmd0aDtcbiAgICAgICAgdmFyIGluZGV4O1xuICAgICAgICB2YXIga2V5VGltZTtcblxuICAgICAgICBpZiAoIWRhdGEuay5sZW5ndGggfHwgdHlwZW9mIGRhdGEua1swXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBpbmRleCA9IDA7XG4gICAgICAgICAga2V5VGltZSA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5kZXggPSAtMTtcbiAgICAgICAgICB0aW1lICo9IGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcblxuICAgICAgICAgIGlmICh0aW1lIDwgZGF0YS5rWzBdLnQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMTtcbiAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbMF0udDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpS2V5ID0gMDsgaUtleSA8IGxlbktleSAtIDE7IGlLZXkgKz0gMSkge1xuICAgICAgICAgICAgICBpZiAodGltZSA9PT0gZGF0YS5rW2lLZXldLnQpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGlLZXkgKyAxO1xuICAgICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleV0udDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aW1lID4gZGF0YS5rW2lLZXldLnQgJiYgdGltZSA8IGRhdGEua1tpS2V5ICsgMV0udCkge1xuICAgICAgICAgICAgICAgIGlmICh0aW1lIC0gZGF0YS5rW2lLZXldLnQgPiBkYXRhLmtbaUtleSArIDFdLnQgLSB0aW1lKSB7XG4gICAgICAgICAgICAgICAgICBpbmRleCA9IGlLZXkgKyAyO1xuICAgICAgICAgICAgICAgICAga2V5VGltZSA9IGRhdGEua1tpS2V5ICsgMV0udDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgaW5kZXggPSBpS2V5ICsgMTtcbiAgICAgICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleV0udDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICAgIGluZGV4ID0gaUtleSArIDE7XG4gICAgICAgICAgICAgIGtleVRpbWUgPSBkYXRhLmtbaUtleV0udDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb2JLZXkgPSB7fTtcbiAgICAgICAgb2JLZXkuaW5kZXggPSBpbmRleDtcbiAgICAgICAgb2JLZXkudGltZSA9IGtleVRpbWUgLyBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIHJldHVybiBvYktleTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24ga2V5KGluZCkge1xuICAgICAgICB2YXIgb2JLZXk7XG4gICAgICAgIHZhciBpS2V5O1xuICAgICAgICB2YXIgbGVuS2V5O1xuXG4gICAgICAgIGlmICghZGF0YS5rLmxlbmd0aCB8fCB0eXBlb2YgZGF0YS5rWzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3BlcnR5IGhhcyBubyBrZXlmcmFtZSBhdCBpbmRleCAnICsgaW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGluZCAtPSAxO1xuICAgICAgICBvYktleSA9IHtcbiAgICAgICAgICB0aW1lOiBkYXRhLmtbaW5kXS50IC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLFxuICAgICAgICAgIHZhbHVlOiBbXVxuICAgICAgICB9O1xuICAgICAgICB2YXIgYXJyID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEua1tpbmRdLCAncycpID8gZGF0YS5rW2luZF0ucyA6IGRhdGEua1tpbmQgLSAxXS5lO1xuICAgICAgICBsZW5LZXkgPSBhcnIubGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaUtleSA9IDA7IGlLZXkgPCBsZW5LZXk7IGlLZXkgKz0gMSkge1xuICAgICAgICAgIG9iS2V5W2lLZXldID0gYXJyW2lLZXldO1xuICAgICAgICAgIG9iS2V5LnZhbHVlW2lLZXldID0gYXJyW2lLZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG9iS2V5O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmcmFtZXNUb1RpbWUoZnIsIGZwcykge1xuICAgICAgICBpZiAoIWZwcykge1xuICAgICAgICAgIGZwcyA9IGVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmciAvIGZwcztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gdGltZVRvRnJhbWVzKHQsIGZwcykge1xuICAgICAgICBpZiAoIXQgJiYgdCAhPT0gMCkge1xuICAgICAgICAgIHQgPSB0aW1lO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFmcHMpIHtcbiAgICAgICAgICBmcHMgPSBlbGVtLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdCAqIGZwcztcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc2VlZFJhbmRvbShzZWVkKSB7XG4gICAgICAgIEJNTWF0aC5zZWVkcmFuZG9tKHJhbmRTZWVkICsgc2VlZCk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNvdXJjZVJlY3RBdFRpbWUoKSB7XG4gICAgICAgIHJldHVybiBlbGVtLnNvdXJjZVJlY3RBdFRpbWUoKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gc3Vic3RyaW5nKGluaXQsIGVuZCkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cmluZyhpbml0KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKGluaXQsIGVuZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHN1YnN0cihpbml0LCBlbmQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoaW5pdCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHZhbHVlLnN1YnN0cihpbml0LCBlbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBwb3N0ZXJpemVUaW1lKGZyYW1lc1BlclNlY29uZCkge1xuICAgICAgICB0aW1lID0gZnJhbWVzUGVyU2Vjb25kID09PSAwID8gMCA6IE1hdGguZmxvb3IodGltZSAqIGZyYW1lc1BlclNlY29uZCkgLyBmcmFtZXNQZXJTZWNvbmQ7XG4gICAgICAgIHZhbHVlID0gdmFsdWVBdFRpbWUodGltZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciB0aW1lO1xuICAgICAgdmFyIHZlbG9jaXR5O1xuICAgICAgdmFyIHZhbHVlO1xuICAgICAgdmFyIHRleHQ7XG4gICAgICB2YXIgdGV4dEluZGV4O1xuICAgICAgdmFyIHRleHRUb3RhbDtcbiAgICAgIHZhciBzZWxlY3RvclZhbHVlO1xuICAgICAgdmFyIGluZGV4ID0gZWxlbS5kYXRhLmluZDtcbiAgICAgIHZhciBoYXNQYXJlbnQgPSAhIShlbGVtLmhpZXJhcmNoeSAmJiBlbGVtLmhpZXJhcmNoeS5sZW5ndGgpO1xuICAgICAgdmFyIHBhcmVudDtcbiAgICAgIHZhciByYW5kU2VlZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMDAwMDApO1xuICAgICAgdmFyIGdsb2JhbERhdGEgPSBlbGVtLmdsb2JhbERhdGE7XG5cbiAgICAgIGZ1bmN0aW9uIGV4ZWN1dGVFeHByZXNzaW9uKF92YWx1ZSkge1xuICAgICAgICAvLyBnbG9iYWxEYXRhLnB1c2hFeHByZXNzaW9uKCk7XG4gICAgICAgIHZhbHVlID0gX3ZhbHVlO1xuXG4gICAgICAgIGlmICh0aGlzLmZyYW1lRXhwcmVzc2lvbklkID09PSBlbGVtLmdsb2JhbERhdGEuZnJhbWVJZCAmJiB0aGlzLnByb3BUeXBlICE9PSAndGV4dFNlbGVjdG9yJykge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnByb3BUeXBlID09PSAndGV4dFNlbGVjdG9yJykge1xuICAgICAgICAgIHRleHRJbmRleCA9IHRoaXMudGV4dEluZGV4O1xuICAgICAgICAgIHRleHRUb3RhbCA9IHRoaXMudGV4dFRvdGFsO1xuICAgICAgICAgIHNlbGVjdG9yVmFsdWUgPSB0aGlzLnNlbGVjdG9yVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXNMYXllcikge1xuICAgICAgICAgIHRleHQgPSBlbGVtLmxheWVySW50ZXJmYWNlLnRleHQ7XG4gICAgICAgICAgdGhpc0xheWVyID0gZWxlbS5sYXllckludGVyZmFjZTtcbiAgICAgICAgICB0aGlzQ29tcCA9IGVsZW0uY29tcC5jb21wSW50ZXJmYWNlO1xuICAgICAgICAgIHRvV29ybGQgPSB0aGlzTGF5ZXIudG9Xb3JsZC5iaW5kKHRoaXNMYXllcik7XG4gICAgICAgICAgZnJvbVdvcmxkID0gdGhpc0xheWVyLmZyb21Xb3JsZC5iaW5kKHRoaXNMYXllcik7XG4gICAgICAgICAgZnJvbUNvbXAgPSB0aGlzTGF5ZXIuZnJvbUNvbXAuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIHRvQ29tcCA9IHRoaXNMYXllci50b0NvbXAuYmluZCh0aGlzTGF5ZXIpO1xuICAgICAgICAgIG1hc2sgPSB0aGlzTGF5ZXIubWFzayA/IHRoaXNMYXllci5tYXNrLmJpbmQodGhpc0xheWVyKSA6IG51bGw7XG4gICAgICAgICAgZnJvbUNvbXBUb1N1cmZhY2UgPSBmcm9tQ29tcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdHJhbnNmb3JtKSB7XG4gICAgICAgICAgdHJhbnNmb3JtID0gZWxlbS5sYXllckludGVyZmFjZSgnQURCRSBUcmFuc2Zvcm0gR3JvdXAnKTtcbiAgICAgICAgICAkYm1fdHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuXG4gICAgICAgICAgaWYgKHRyYW5zZm9ybSkge1xuICAgICAgICAgICAgYW5jaG9yUG9pbnQgPSB0cmFuc2Zvcm0uYW5jaG9yUG9pbnQ7XG4gICAgICAgICAgICAvKiBwb3NpdGlvbiA9IHRyYW5zZm9ybS5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgIHJvdGF0aW9uID0gdHJhbnNmb3JtLnJvdGF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgc2NhbGUgPSB0cmFuc2Zvcm0uc2NhbGU7ICovXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVsZW1UeXBlID09PSA0ICYmICFjb250ZW50KSB7XG4gICAgICAgICAgY29udGVudCA9IHRoaXNMYXllcignQURCRSBSb290IFZlY3RvcnMgR3JvdXAnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZWZmZWN0KSB7XG4gICAgICAgICAgZWZmZWN0ID0gdGhpc0xheWVyKDQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaGFzUGFyZW50ID0gISEoZWxlbS5oaWVyYXJjaHkgJiYgZWxlbS5oaWVyYXJjaHkubGVuZ3RoKTtcblxuICAgICAgICBpZiAoaGFzUGFyZW50ICYmICFwYXJlbnQpIHtcbiAgICAgICAgICBwYXJlbnQgPSBlbGVtLmhpZXJhcmNoeVswXS5sYXllckludGVyZmFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRpbWUgPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcblxuICAgICAgICBpZiAoX25lZWRzUmFuZG9tKSB7XG4gICAgICAgICAgc2VlZFJhbmRvbShyYW5kU2VlZCArIHRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5lZWRzVmVsb2NpdHkpIHtcbiAgICAgICAgICB2ZWxvY2l0eSA9IHZlbG9jaXR5QXRUaW1lKHRpbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZXhwcmVzc2lvbl9mdW5jdGlvbigpO1xuICAgICAgICB0aGlzLmZyYW1lRXhwcmVzc2lvbklkID0gZWxlbS5nbG9iYWxEYXRhLmZyYW1lSWQ7IC8vIFRPRE86IENoZWNrIGlmIGl0J3MgcG9zc2libGUgdG8gcmV0dXJuIG9uIFNoYXBlSW50ZXJmYWNlIHRoZSAudiB2YWx1ZVxuICAgICAgICAvLyBDaGFuZ2VkIHRoaXMgdG8gYSB0ZXJuYXJ5IG9wZXJhdGlvbiBiZWNhdXNlIFJvbGx1cCBmYWlsZWQgY29tcGlsaW5nIGl0IGNvcnJlY3RseVxuXG4gICAgICAgIHNjb3BlZF9ibV9ydCA9IHNjb3BlZF9ibV9ydC5wcm9wVHlwZSA9PT0gcHJvcFR5cGVzLlNIQVBFID8gc2NvcGVkX2JtX3J0LnYgOiBzY29wZWRfYm1fcnQ7XG4gICAgICAgIHJldHVybiBzY29wZWRfYm1fcnQ7XG4gICAgICB9IC8vIEJ1bmRsZXJzIHdpbGwgc2VlIHRoZXNlIGFzIGRlYWQgY29kZSBhbmQgdW5sZXNzIHdlIHJlZmVyZW5jZSB0aGVtXG5cblxuICAgICAgZXhlY3V0ZUV4cHJlc3Npb24uX19wcmV2ZW50RGVhZENvZGVSZW1vdmFsID0gWyRibV90cmFuc2Zvcm0sIGFuY2hvclBvaW50LCB0aW1lLCB2ZWxvY2l0eSwgaW5Qb2ludCwgb3V0UG9pbnQsIHdpZHRoLCBoZWlnaHQsIG5hbWUsIGxvb3BfaW4sIGxvb3Bfb3V0LCBzbW9vdGgsIHRvQ29tcCwgZnJvbUNvbXBUb1N1cmZhY2UsIHRvV29ybGQsIGZyb21Xb3JsZCwgbWFzaywgcG9zaXRpb24sIHJvdGF0aW9uLCBzY2FsZSwgdGhpc0NvbXAsIG51bUtleXMsIGFjdGl2ZSwgd2lnZ2xlLCBsb29wSW5EdXJhdGlvbiwgbG9vcE91dER1cmF0aW9uLCBjb21wLCBsb29rQXQsIGVhc2VPdXQsIGVhc2VJbiwgZWFzZSwgbmVhcmVzdEtleSwga2V5LCB0ZXh0LCB0ZXh0SW5kZXgsIHRleHRUb3RhbCwgc2VsZWN0b3JWYWx1ZSwgZnJhbWVzVG9UaW1lLCB0aW1lVG9GcmFtZXMsIHNvdXJjZVJlY3RBdFRpbWUsIHN1YnN0cmluZywgc3Vic3RyLCBwb3N0ZXJpemVUaW1lLCBpbmRleCwgZ2xvYmFsRGF0YV07XG4gICAgICByZXR1cm4gZXhlY3V0ZUV4cHJlc3Npb247XG4gICAgfVxuXG4gICAgb2IuaW5pdGlhdGVFeHByZXNzaW9uID0gaW5pdGlhdGVFeHByZXNzaW9uO1xuICAgIG9iLl9fcHJldmVudERlYWRDb2RlUmVtb3ZhbCA9IFt3aW5kb3csIGRvY3VtZW50LCBYTUxIdHRwUmVxdWVzdCwgZmV0Y2gsIGZyYW1lcywgJGJtX25lZywgYWRkLCAkYm1fc3VtLCAkYm1fc3ViLCAkYm1fbXVsLCAkYm1fZGl2LCAkYm1fbW9kLCBjbGFtcCwgcmFkaWFuc190b19kZWdyZWVzLCBkZWdyZWVzVG9SYWRpYW5zLCBkZWdyZWVzX3RvX3JhZGlhbnMsIG5vcm1hbGl6ZSwgcmdiVG9Ic2wsIGhzbFRvUmdiLCBsaW5lYXIsIHJhbmRvbSwgY3JlYXRlUGF0aCwgX2xvdHRpZUdsb2JhbF07XG4gICAgb2IucmVzZXRGcmFtZSA9IHJlc2V0RnJhbWU7XG4gICAgcmV0dXJuIG9iO1xuICB9KCk7XG5cbiAgdmFyIEV4cHJlc3Npb25zID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvYiA9IHt9O1xuICAgIG9iLmluaXRFeHByZXNzaW9ucyA9IGluaXRFeHByZXNzaW9ucztcbiAgICBvYi5yZXNldEZyYW1lID0gRXhwcmVzc2lvbk1hbmFnZXIucmVzZXRGcmFtZTtcblxuICAgIGZ1bmN0aW9uIGluaXRFeHByZXNzaW9ucyhhbmltYXRpb24pIHtcbiAgICAgIHZhciBzdGFja0NvdW50ID0gMDtcbiAgICAgIHZhciByZWdpc3RlcnMgPSBbXTtcblxuICAgICAgZnVuY3Rpb24gcHVzaEV4cHJlc3Npb24oKSB7XG4gICAgICAgIHN0YWNrQ291bnQgKz0gMTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcG9wRXhwcmVzc2lvbigpIHtcbiAgICAgICAgc3RhY2tDb3VudCAtPSAxO1xuXG4gICAgICAgIGlmIChzdGFja0NvdW50ID09PSAwKSB7XG4gICAgICAgICAgcmVsZWFzZUluc3RhbmNlcygpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlZ2lzdGVyRXhwcmVzc2lvblByb3BlcnR5KGV4cHJlc3Npb24pIHtcbiAgICAgICAgaWYgKHJlZ2lzdGVycy5pbmRleE9mKGV4cHJlc3Npb24pID09PSAtMSkge1xuICAgICAgICAgIHJlZ2lzdGVycy5wdXNoKGV4cHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHJlbGVhc2VJbnN0YW5jZXMoKSB7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gcmVnaXN0ZXJzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICByZWdpc3RlcnNbaV0ucmVsZWFzZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJzLmxlbmd0aCA9IDA7XG4gICAgICB9XG5cbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5jb21wSW50ZXJmYWNlID0gQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UoYW5pbWF0aW9uLnJlbmRlcmVyKTtcbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnByb2plY3RJbnRlcmZhY2UucmVnaXN0ZXJDb21wb3NpdGlvbihhbmltYXRpb24ucmVuZGVyZXIpO1xuICAgICAgYW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucHVzaEV4cHJlc3Npb24gPSBwdXNoRXhwcmVzc2lvbjtcbiAgICAgIGFuaW1hdGlvbi5yZW5kZXJlci5nbG9iYWxEYXRhLnBvcEV4cHJlc3Npb24gPSBwb3BFeHByZXNzaW9uO1xuICAgICAgYW5pbWF0aW9uLnJlbmRlcmVyLmdsb2JhbERhdGEucmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHkgPSByZWdpc3RlckV4cHJlc3Npb25Qcm9wZXJ0eTtcbiAgICB9XG5cbiAgICByZXR1cm4gb2I7XG4gIH0oKTtcblxuICB2YXIgTWFza01hbmFnZXJJbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWFza0ludGVyZmFjZShtYXNrLCBkYXRhKSB7XG4gICAgICB0aGlzLl9tYXNrID0gbWFzaztcbiAgICAgIHRoaXMuX2RhdGEgPSBkYXRhO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNYXNrSW50ZXJmYWNlLnByb3RvdHlwZSwgJ21hc2tQYXRoJywge1xuICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXNrLnByb3Auaykge1xuICAgICAgICAgIHRoaXMuX21hc2sucHJvcC5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc2sucHJvcDtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWFza0ludGVyZmFjZS5wcm90b3R5cGUsICdtYXNrT3BhY2l0eScsIHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICBpZiAodGhpcy5fbWFzay5vcC5rKSB7XG4gICAgICAgICAgdGhpcy5fbWFzay5vcC5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21hc2sub3AudiAqIDEwMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHZhciBNYXNrTWFuYWdlciA9IGZ1bmN0aW9uIE1hc2tNYW5hZ2VyKG1hc2tNYW5hZ2VyKSB7XG4gICAgICB2YXIgX21hc2tzSW50ZXJmYWNlcyA9IGNyZWF0ZVNpemVkQXJyYXkobWFza01hbmFnZXIudmlld0RhdGEubGVuZ3RoKTtcblxuICAgICAgdmFyIGk7XG4gICAgICB2YXIgbGVuID0gbWFza01hbmFnZXIudmlld0RhdGEubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgX21hc2tzSW50ZXJmYWNlc1tpXSA9IG5ldyBNYXNrSW50ZXJmYWNlKG1hc2tNYW5hZ2VyLnZpZXdEYXRhW2ldLCBtYXNrTWFuYWdlci5tYXNrc1Byb3BlcnRpZXNbaV0pO1xuICAgICAgfVxuXG4gICAgICB2YXIgbWFza0Z1bmN0aW9uID0gZnVuY3Rpb24gbWFza0Z1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICBpZiAobWFza01hbmFnZXIubWFza3NQcm9wZXJ0aWVzW2ldLm5tID09PSBuYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gX21hc2tzSW50ZXJmYWNlc1tpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBtYXNrRnVuY3Rpb247XG4gICAgfTtcblxuICAgIHJldHVybiBNYXNrTWFuYWdlcjtcbiAgfSgpO1xuXG4gIHZhciBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGRlZmF1bHRVbmlkaW1lbnNpb25hbFZhbHVlID0ge1xuICAgICAgcHY6IDAsXG4gICAgICB2OiAwLFxuICAgICAgbXVsdDogMVxuICAgIH07XG4gICAgdmFyIGRlZmF1bHRNdWx0aWRpbWVuc2lvbmFsVmFsdWUgPSB7XG4gICAgICBwdjogWzAsIDAsIDBdLFxuICAgICAgdjogWzAsIDAsIDBdLFxuICAgICAgbXVsdDogMVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjb21wbGV0ZVByb3BlcnR5KGV4cHJlc3Npb25WYWx1ZSwgcHJvcGVydHksIHR5cGUpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsICd2ZWxvY2l0eScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BlcnR5LmdldFZlbG9jaXR5QXRUaW1lKHByb3BlcnR5LmNvbXAuY3VycmVudEZyYW1lKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBleHByZXNzaW9uVmFsdWUubnVtS2V5cyA9IHByb3BlcnR5LmtleWZyYW1lcyA/IHByb3BlcnR5LmtleWZyYW1lcy5sZW5ndGggOiAwO1xuXG4gICAgICBleHByZXNzaW9uVmFsdWUua2V5ID0gZnVuY3Rpb24gKHBvcykge1xuICAgICAgICBpZiAoIWV4cHJlc3Npb25WYWx1ZS5udW1LZXlzKSB7XG4gICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdmFsdWUgPSAnJztcblxuICAgICAgICBpZiAoJ3MnIGluIHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAxXSkge1xuICAgICAgICAgIHZhbHVlID0gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDFdLnM7XG4gICAgICAgIH0gZWxzZSBpZiAoJ2UnIGluIHByb3BlcnR5LmtleWZyYW1lc1twb3MgLSAyXSkge1xuICAgICAgICAgIHZhbHVlID0gcHJvcGVydHkua2V5ZnJhbWVzW3BvcyAtIDJdLmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgPSBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMl0ucztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB2YWx1ZVByb3AgPSB0eXBlID09PSAndW5pZGltZW5zaW9uYWwnID8gbmV3IE51bWJlcih2YWx1ZSkgOiBPYmplY3QuYXNzaWduKHt9LCB2YWx1ZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cbiAgICAgICAgdmFsdWVQcm9wLnRpbWUgPSBwcm9wZXJ0eS5rZXlmcmFtZXNbcG9zIC0gMV0udCAvIHByb3BlcnR5LmVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgICAgdmFsdWVQcm9wLnZhbHVlID0gdHlwZSA9PT0gJ3VuaWRpbWVuc2lvbmFsJyA/IHZhbHVlWzBdIDogdmFsdWU7XG4gICAgICAgIHJldHVybiB2YWx1ZVByb3A7XG4gICAgICB9O1xuXG4gICAgICBleHByZXNzaW9uVmFsdWUudmFsdWVBdFRpbWUgPSBwcm9wZXJ0eS5nZXRWYWx1ZUF0VGltZTtcbiAgICAgIGV4cHJlc3Npb25WYWx1ZS5zcGVlZEF0VGltZSA9IHByb3BlcnR5LmdldFNwZWVkQXRUaW1lO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLnZlbG9jaXR5QXRUaW1lID0gcHJvcGVydHkuZ2V0VmVsb2NpdHlBdFRpbWU7XG4gICAgICBleHByZXNzaW9uVmFsdWUucHJvcGVydHlHcm91cCA9IHByb3BlcnR5LnByb3BlcnR5R3JvdXA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gVW5pZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZShwcm9wZXJ0eSkge1xuICAgICAgaWYgKCFwcm9wZXJ0eSB8fCAhKCdwdicgaW4gcHJvcGVydHkpKSB7XG4gICAgICAgIHByb3BlcnR5ID0gZGVmYXVsdFVuaWRpbWVuc2lvbmFsVmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBtdWx0ID0gMSAvIHByb3BlcnR5Lm11bHQ7XG4gICAgICB2YXIgdmFsID0gcHJvcGVydHkucHYgKiBtdWx0O1xuICAgICAgdmFyIGV4cHJlc3Npb25WYWx1ZSA9IG5ldyBOdW1iZXIodmFsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblxuICAgICAgZXhwcmVzc2lvblZhbHVlLnZhbHVlID0gdmFsO1xuICAgICAgY29tcGxldGVQcm9wZXJ0eShleHByZXNzaW9uVmFsdWUsIHByb3BlcnR5LCAndW5pZGltZW5zaW9uYWwnKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0eS5rKSB7XG4gICAgICAgICAgcHJvcGVydHkuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhbCA9IHByb3BlcnR5LnYgKiBtdWx0O1xuXG4gICAgICAgIGlmIChleHByZXNzaW9uVmFsdWUudmFsdWUgIT09IHZhbCkge1xuICAgICAgICAgIGV4cHJlc3Npb25WYWx1ZSA9IG5ldyBOdW1iZXIodmFsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblxuICAgICAgICAgIGV4cHJlc3Npb25WYWx1ZS52YWx1ZSA9IHZhbDtcbiAgICAgICAgICBjb21wbGV0ZVByb3BlcnR5KGV4cHJlc3Npb25WYWx1ZSwgcHJvcGVydHksICd1bmlkaW1lbnNpb25hbCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb25WYWx1ZTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gTXVsdGlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KSB7XG4gICAgICBpZiAoIXByb3BlcnR5IHx8ICEoJ3B2JyBpbiBwcm9wZXJ0eSkpIHtcbiAgICAgICAgcHJvcGVydHkgPSBkZWZhdWx0TXVsdGlkaW1lbnNpb25hbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbXVsdCA9IDEgLyBwcm9wZXJ0eS5tdWx0O1xuICAgICAgdmFyIGxlbiA9IHByb3BlcnR5LmRhdGEgJiYgcHJvcGVydHkuZGF0YS5sIHx8IHByb3BlcnR5LnB2Lmxlbmd0aDtcbiAgICAgIHZhciBleHByZXNzaW9uVmFsdWUgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgbGVuKTtcbiAgICAgIHZhciBhcnJWYWx1ZSA9IGNyZWF0ZVR5cGVkQXJyYXkoJ2Zsb2F0MzInLCBsZW4pO1xuICAgICAgZXhwcmVzc2lvblZhbHVlLnZhbHVlID0gYXJyVmFsdWU7XG4gICAgICBjb21wbGV0ZVByb3BlcnR5KGV4cHJlc3Npb25WYWx1ZSwgcHJvcGVydHksICdtdWx0aWRpbWVuc2lvbmFsJyk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAocHJvcGVydHkuaykge1xuICAgICAgICAgIHByb3BlcnR5LmdldFZhbHVlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgYXJyVmFsdWVbaV0gPSBwcm9wZXJ0eS52W2ldICogbXVsdDtcbiAgICAgICAgICBleHByZXNzaW9uVmFsdWVbaV0gPSBhcnJWYWx1ZVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBleHByZXNzaW9uVmFsdWU7XG4gICAgICB9O1xuICAgIH0gLy8gVE9ETzogdHJ5IHRvIGF2b2lkIHVzaW5nIHRoaXMgZ2V0dGVyXG5cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRHZXR0ZXIoKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdFVuaWRpbWVuc2lvbmFsVmFsdWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgaWYgKCFwcm9wZXJ0eSkge1xuICAgICAgICByZXR1cm4gZGVmYXVsdEdldHRlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKHByb3BlcnR5LnByb3BUeXBlID09PSAndW5pZGltZW5zaW9uYWwnKSB7XG4gICAgICAgIHJldHVybiBVbmlkaW1lbnNpb25hbFByb3BlcnR5SW50ZXJmYWNlKHByb3BlcnR5KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZShwcm9wZXJ0eSk7XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBUcmFuc2Zvcm1FeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodHJhbnNmb3JtKSB7XG4gICAgICBmdW5jdGlvbiBfdGhpc0Z1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICAgICAgY2FzZSAnc2NhbGUnOlxuICAgICAgICAgIGNhc2UgJ1NjYWxlJzpcbiAgICAgICAgICBjYXNlICdBREJFIFNjYWxlJzpcbiAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi5zY2FsZTtcblxuICAgICAgICAgIGNhc2UgJ3JvdGF0aW9uJzpcbiAgICAgICAgICBjYXNlICdSb3RhdGlvbic6XG4gICAgICAgICAgY2FzZSAnQURCRSBSb3RhdGlvbic6XG4gICAgICAgICAgY2FzZSAnQURCRSBSb3RhdGUgWic6XG4gICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnJvdGF0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBSb3RhdGUgWCc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi54Um90YXRpb247XG5cbiAgICAgICAgICBjYXNlICdBREJFIFJvdGF0ZSBZJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnlSb3RhdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ3Bvc2l0aW9uJzpcbiAgICAgICAgICBjYXNlICdQb3NpdGlvbic6XG4gICAgICAgICAgY2FzZSAnQURCRSBQb3NpdGlvbic6XG4gICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ucG9zaXRpb247XG5cbiAgICAgICAgICBjYXNlICdBREJFIFBvc2l0aW9uXzAnOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ueFBvc2l0aW9uO1xuXG4gICAgICAgICAgY2FzZSAnQURCRSBQb3NpdGlvbl8xJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0Z1bmN0aW9uLnlQb3NpdGlvbjtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgUG9zaXRpb25fMic6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbi56UG9zaXRpb247XG5cbiAgICAgICAgICBjYXNlICdhbmNob3JQb2ludCc6XG4gICAgICAgICAgY2FzZSAnQW5jaG9yUG9pbnQnOlxuICAgICAgICAgIGNhc2UgJ0FuY2hvciBQb2ludCc6XG4gICAgICAgICAgY2FzZSAnQURCRSBBbmNob3JQb2ludCc6XG4gICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24uYW5jaG9yUG9pbnQ7XG5cbiAgICAgICAgICBjYXNlICdvcGFjaXR5JzpcbiAgICAgICAgICBjYXNlICdPcGFjaXR5JzpcbiAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgcmV0dXJuIF90aGlzRnVuY3Rpb24ub3BhY2l0eTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3JvdGF0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0uciB8fCB0cmFuc2Zvcm0ucnopXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnelJvdGF0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucnogfHwgdHJhbnNmb3JtLnIpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAneFJvdGF0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucngpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAneVJvdGF0aW9uJywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucnkpXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnc2NhbGUnLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5zKVxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfcHg7XG5cbiAgICAgIHZhciBfcHk7XG5cbiAgICAgIHZhciBfcHo7XG5cbiAgICAgIHZhciBfdHJhbnNmb3JtRmFjdG9yeTtcblxuICAgICAgaWYgKHRyYW5zZm9ybS5wKSB7XG4gICAgICAgIF90cmFuc2Zvcm1GYWN0b3J5ID0gRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5wKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9weCA9IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ucHgpO1xuICAgICAgICBfcHkgPSBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB5KTtcblxuICAgICAgICBpZiAodHJhbnNmb3JtLnB6KSB7XG4gICAgICAgICAgX3B6ID0gRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5weik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdwb3NpdGlvbicsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgaWYgKHRyYW5zZm9ybS5wKSB7XG4gICAgICAgICAgICByZXR1cm4gX3RyYW5zZm9ybUZhY3RvcnkoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gW19weCgpLCBfcHkoKSwgX3B6ID8gX3B6KCkgOiAwXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3hQb3NpdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB4KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3lQb3NpdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB5KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ3pQb3NpdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLnB6KVxuICAgICAgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoX3RoaXNGdW5jdGlvbiwgJ2FuY2hvclBvaW50Jywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0uYSlcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdvcGFjaXR5Jywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0ubylcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdza2V3Jywge1xuICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh0cmFuc2Zvcm0uc2spXG4gICAgICB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpc0Z1bmN0aW9uLCAnc2tld0F4aXMnLCB7XG4gICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHRyYW5zZm9ybS5zYSlcbiAgICAgIH0pO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzRnVuY3Rpb24sICdvcmllbnRhdGlvbicsIHtcbiAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UodHJhbnNmb3JtLm9yKVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3RoaXNGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIExheWVyRXhwcmVzc2lvbkludGVyZmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBnZXRNYXRyaXgodGltZSkge1xuICAgICAgdmFyIHRvV29ybGRNYXQgPSBuZXcgTWF0cml4KCk7XG5cbiAgICAgIGlmICh0aW1lICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIHByb3BNYXRyaXggPSB0aGlzLl9lbGVtLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuXG4gICAgICAgIHByb3BNYXRyaXguY2xvbmUodG9Xb3JsZE1hdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgdHJhbnNmb3JtTWF0ID0gdGhpcy5fZWxlbS5maW5hbFRyYW5zZm9ybS5tUHJvcDtcbiAgICAgICAgdHJhbnNmb3JtTWF0LmFwcGx5VG9NYXRyaXgodG9Xb3JsZE1hdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0b1dvcmxkTWF0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvV29ybGRWZWMoYXJyLCB0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IHRoaXMuZ2V0TWF0cml4KHRpbWUpO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxMl0gPSAwO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxM10gPSAwO1xuICAgICAgdG9Xb3JsZE1hdC5wcm9wc1sxNF0gPSAwO1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlQb2ludCh0b1dvcmxkTWF0LCBhcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvV29ybGQoYXJyLCB0aW1lKSB7XG4gICAgICB2YXIgdG9Xb3JsZE1hdCA9IHRoaXMuZ2V0TWF0cml4KHRpbWUpO1xuICAgICAgcmV0dXJuIHRoaXMuYXBwbHlQb2ludCh0b1dvcmxkTWF0LCBhcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Xb3JsZFZlYyhhcnIsIHRpbWUpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gdGhpcy5nZXRNYXRyaXgodGltZSk7XG4gICAgICB0b1dvcmxkTWF0LnByb3BzWzEyXSA9IDA7XG4gICAgICB0b1dvcmxkTWF0LnByb3BzWzEzXSA9IDA7XG4gICAgICB0b1dvcmxkTWF0LnByb3BzWzE0XSA9IDA7XG4gICAgICByZXR1cm4gdGhpcy5pbnZlcnRQb2ludCh0b1dvcmxkTWF0LCBhcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZyb21Xb3JsZChhcnIsIHRpbWUpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gdGhpcy5nZXRNYXRyaXgodGltZSk7XG4gICAgICByZXR1cm4gdGhpcy5pbnZlcnRQb2ludCh0b1dvcmxkTWF0LCBhcnIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFwcGx5UG9pbnQobWF0cml4LCBhcnIpIHtcbiAgICAgIGlmICh0aGlzLl9lbGVtLmhpZXJhcmNoeSAmJiB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbS5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuYXBwbHlUb01hdHJpeChtYXRyaXgpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyaXguYXBwbHlUb1BvaW50QXJyYXkoYXJyWzBdLCBhcnJbMV0sIGFyclsyXSB8fCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZlcnRQb2ludChtYXRyaXgsIGFycikge1xuICAgICAgaWYgKHRoaXMuX2VsZW0uaGllcmFyY2h5ICYmIHRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aCkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuX2VsZW0uaGllcmFyY2h5Lmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICB0aGlzLl9lbGVtLmhpZXJhcmNoeVtpXS5maW5hbFRyYW5zZm9ybS5tUHJvcC5hcHBseVRvTWF0cml4KG1hdHJpeCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG1hdHJpeC5pbnZlcnNlUG9pbnQoYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tQ29tcChhcnIpIHtcbiAgICAgIHZhciB0b1dvcmxkTWF0ID0gbmV3IE1hdHJpeCgpO1xuICAgICAgdG9Xb3JsZE1hdC5yZXNldCgpO1xuXG4gICAgICB0aGlzLl9lbGVtLmZpbmFsVHJhbnNmb3JtLm1Qcm9wLmFwcGx5VG9NYXRyaXgodG9Xb3JsZE1hdCk7XG5cbiAgICAgIGlmICh0aGlzLl9lbGVtLmhpZXJhcmNoeSAmJiB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG4gICAgICAgIHZhciBsZW4gPSB0aGlzLl9lbGVtLmhpZXJhcmNoeS5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgdGhpcy5fZWxlbS5oaWVyYXJjaHlbaV0uZmluYWxUcmFuc2Zvcm0ubVByb3AuYXBwbHlUb01hdHJpeCh0b1dvcmxkTWF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0b1dvcmxkTWF0LmludmVyc2VQb2ludChhcnIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdG9Xb3JsZE1hdC5pbnZlcnNlUG9pbnQoYXJyKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzYW1wbGVJbWFnZSgpIHtcbiAgICAgIHJldHVybiBbMSwgMSwgMSwgMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICB2YXIgdHJhbnNmb3JtSW50ZXJmYWNlO1xuXG4gICAgICBmdW5jdGlvbiBfcmVnaXN0ZXJNYXNrSW50ZXJmYWNlKG1hc2tNYW5hZ2VyKSB7XG4gICAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5tYXNrID0gbmV3IE1hc2tNYW5hZ2VySW50ZXJmYWNlKG1hc2tNYW5hZ2VyLCBlbGVtKTtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gX3JlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZShlZmZlY3RzKSB7XG4gICAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5lZmZlY3QgPSBlZmZlY3RzO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhpc0xheWVyRnVuY3Rpb24obmFtZSkge1xuICAgICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgICBjYXNlICdBREJFIFJvb3QgVmVjdG9ycyBHcm91cCc6XG4gICAgICAgICAgY2FzZSAnQ29udGVudHMnOlxuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb24uc2hhcGVJbnRlcmZhY2U7XG5cbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgIGNhc2UgJ1RyYW5zZm9ybSc6XG4gICAgICAgICAgY2FzZSAndHJhbnNmb3JtJzpcbiAgICAgICAgICBjYXNlICdBREJFIFRyYW5zZm9ybSBHcm91cCc6XG4gICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtSW50ZXJmYWNlO1xuXG4gICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIGNhc2UgJ0FEQkUgRWZmZWN0IFBhcmFkZSc6XG4gICAgICAgICAgY2FzZSAnZWZmZWN0cyc6XG4gICAgICAgICAgY2FzZSAnRWZmZWN0cyc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uLmVmZmVjdDtcblxuICAgICAgICAgIGNhc2UgJ0FEQkUgVGV4dCBQcm9wZXJ0aWVzJzpcbiAgICAgICAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb24udGV4dEludGVyZmFjZTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZ2V0TWF0cml4ID0gZ2V0TWF0cml4O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmludmVydFBvaW50ID0gaW52ZXJ0UG9pbnQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uYXBwbHlQb2ludCA9IGFwcGx5UG9pbnQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24udG9Xb3JsZCA9IHRvV29ybGQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24udG9Xb3JsZFZlYyA9IHRvV29ybGRWZWM7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uZnJvbVdvcmxkID0gZnJvbVdvcmxkO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmZyb21Xb3JsZFZlYyA9IGZyb21Xb3JsZFZlYztcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi50b0NvbXAgPSB0b1dvcmxkO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmZyb21Db21wID0gZnJvbUNvbXA7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uc2FtcGxlSW1hZ2UgPSBzYW1wbGVJbWFnZTtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5zb3VyY2VSZWN0QXRUaW1lID0gZWxlbS5zb3VyY2VSZWN0QXRUaW1lLmJpbmQoZWxlbSk7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uX2VsZW0gPSBlbGVtO1xuICAgICAgdHJhbnNmb3JtSW50ZXJmYWNlID0gVHJhbnNmb3JtRXhwcmVzc2lvbkludGVyZmFjZShlbGVtLmZpbmFsVHJhbnNmb3JtLm1Qcm9wKTtcbiAgICAgIHZhciBhbmNob3JQb2ludERlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKHRyYW5zZm9ybUludGVyZmFjZSwgJ2FuY2hvclBvaW50Jyk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhfdGhpc0xheWVyRnVuY3Rpb24sIHtcbiAgICAgICAgaGFzUGFyZW50OiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5oaWVyYXJjaHkubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgcGFyZW50OiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5oaWVyYXJjaHlbMF0ubGF5ZXJJbnRlcmZhY2U7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByb3RhdGlvbjogZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdyb3RhdGlvbicpLFxuICAgICAgICBzY2FsZTogZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdzY2FsZScpLFxuICAgICAgICBwb3NpdGlvbjogZ2V0RGVzY3JpcHRvcih0cmFuc2Zvcm1JbnRlcmZhY2UsICdwb3NpdGlvbicpLFxuICAgICAgICBvcGFjaXR5OiBnZXREZXNjcmlwdG9yKHRyYW5zZm9ybUludGVyZmFjZSwgJ29wYWNpdHknKSxcbiAgICAgICAgYW5jaG9yUG9pbnQ6IGFuY2hvclBvaW50RGVzY3JpcHRvcixcbiAgICAgICAgYW5jaG9yX3BvaW50OiBhbmNob3JQb2ludERlc2NyaXB0b3IsXG4gICAgICAgIHRyYW5zZm9ybToge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUludGVyZmFjZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFjdGl2ZToge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uaXNJblJhbmdlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uc3RhcnRUaW1lID0gZWxlbS5kYXRhLnN0O1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLmluZGV4ID0gZWxlbS5kYXRhLmluZDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5zb3VyY2UgPSBlbGVtLmRhdGEucmVmSWQ7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24uaGVpZ2h0ID0gZWxlbS5kYXRhLnR5ID09PSAwID8gZWxlbS5kYXRhLmggOiAxMDA7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ud2lkdGggPSBlbGVtLmRhdGEudHkgPT09IDAgPyBlbGVtLmRhdGEudyA6IDEwMDtcbiAgICAgIF90aGlzTGF5ZXJGdW5jdGlvbi5pblBvaW50ID0gZWxlbS5kYXRhLmlwIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLm91dFBvaW50ID0gZWxlbS5kYXRhLm9wIC8gZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLl9uYW1lID0gZWxlbS5kYXRhLm5tO1xuICAgICAgX3RoaXNMYXllckZ1bmN0aW9uLnJlZ2lzdGVyTWFza0ludGVyZmFjZSA9IF9yZWdpc3Rlck1hc2tJbnRlcmZhY2U7XG4gICAgICBfdGhpc0xheWVyRnVuY3Rpb24ucmVnaXN0ZXJFZmZlY3RzSW50ZXJmYWNlID0gX3JlZ2lzdGVyRWZmZWN0c0ludGVyZmFjZTtcbiAgICAgIHJldHVybiBfdGhpc0xheWVyRnVuY3Rpb247XG4gICAgfTtcbiAgfSgpO1xuXG4gIHZhciBwcm9wZXJ0eUdyb3VwRmFjdG9yeSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGludGVyZmFjZUZ1bmN0aW9uLCBwYXJlbnRQcm9wZXJ0eUdyb3VwKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICB2YWwgPSB2YWwgPT09IHVuZGVmaW5lZCA/IDEgOiB2YWw7XG5cbiAgICAgICAgaWYgKHZhbCA8PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhcmVudFByb3BlcnR5R3JvdXAodmFsIC0gMSk7XG4gICAgICB9O1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgUHJvcGVydHlJbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBpbnRlcmZhY2VGdW5jdGlvbiA9IHtcbiAgICAgICAgX25hbWU6IHByb3BlcnR5TmFtZVxuICAgICAgfTtcblxuICAgICAgZnVuY3Rpb24gX3Byb3BlcnR5R3JvdXAodmFsKSB7XG4gICAgICAgIHZhbCA9IHZhbCA9PT0gdW5kZWZpbmVkID8gMSA6IHZhbDtcblxuICAgICAgICBpZiAodmFsIDw9IDApIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cCh2YWwgLSAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9wcm9wZXJ0eUdyb3VwO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgRWZmZWN0c0V4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9iID0ge1xuICAgICAgY3JlYXRlRWZmZWN0c0ludGVyZmFjZTogY3JlYXRlRWZmZWN0c0ludGVyZmFjZVxuICAgIH07XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVFZmZlY3RzSW50ZXJmYWNlKGVsZW0sIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGlmIChlbGVtLmVmZmVjdHNNYW5hZ2VyKSB7XG4gICAgICAgIHZhciBlZmZlY3RFbGVtZW50cyA9IFtdO1xuICAgICAgICB2YXIgZWZmZWN0c0RhdGEgPSBlbGVtLmRhdGEuZWY7XG4gICAgICAgIHZhciBpO1xuICAgICAgICB2YXIgbGVuID0gZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50cy5sZW5ndGg7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgZWZmZWN0RWxlbWVudHMucHVzaChjcmVhdGVHcm91cEludGVyZmFjZShlZmZlY3RzRGF0YVtpXSwgZWxlbS5lZmZlY3RzTWFuYWdlci5lZmZlY3RFbGVtZW50c1tpXSwgcHJvcGVydHlHcm91cCwgZWxlbSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGVmZmVjdHMgPSBlbGVtLmRhdGEuZWYgfHwgW107XG5cbiAgICAgICAgdmFyIGdyb3VwSW50ZXJmYWNlID0gZnVuY3Rpb24gZ3JvdXBJbnRlcmZhY2UobmFtZSkge1xuICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgIGxlbiA9IGVmZmVjdHMubGVuZ3RoO1xuXG4gICAgICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChuYW1lID09PSBlZmZlY3RzW2ldLm5tIHx8IG5hbWUgPT09IGVmZmVjdHNbaV0ubW4gfHwgbmFtZSA9PT0gZWZmZWN0c1tpXS5peCkge1xuICAgICAgICAgICAgICByZXR1cm4gZWZmZWN0RWxlbWVudHNbaV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZ3JvdXBJbnRlcmZhY2UsICdudW1Qcm9wZXJ0aWVzJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIGVmZmVjdHMubGVuZ3RoO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBncm91cEludGVyZmFjZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlR3JvdXBJbnRlcmZhY2UoZGF0YSwgZWxlbWVudHMsIHByb3BlcnR5R3JvdXAsIGVsZW0pIHtcbiAgICAgIGZ1bmN0aW9uIGdyb3VwSW50ZXJmYWNlKG5hbWUpIHtcbiAgICAgICAgdmFyIGVmZmVjdHMgPSBkYXRhLmVmO1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBlZmZlY3RzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChuYW1lID09PSBlZmZlY3RzW2ldLm5tIHx8IG5hbWUgPT09IGVmZmVjdHNbaV0ubW4gfHwgbmFtZSA9PT0gZWZmZWN0c1tpXS5peCkge1xuICAgICAgICAgICAgaWYgKGVmZmVjdHNbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGVmZmVjdEVsZW1lbnRzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gZWZmZWN0RWxlbWVudHNbaV0oKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoZ3JvdXBJbnRlcmZhY2UsIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSBbXTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IGRhdGEuZWYubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGRhdGEuZWZbaV0udHkgPT09IDUpIHtcbiAgICAgICAgICBlZmZlY3RFbGVtZW50cy5wdXNoKGNyZWF0ZUdyb3VwSW50ZXJmYWNlKGRhdGEuZWZbaV0sIGVsZW1lbnRzLmVmZmVjdEVsZW1lbnRzW2ldLCBlbGVtZW50cy5lZmZlY3RFbGVtZW50c1tpXS5wcm9wZXJ0eUdyb3VwLCBlbGVtKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZWZmZWN0RWxlbWVudHMucHVzaChjcmVhdGVWYWx1ZUludGVyZmFjZShlbGVtZW50cy5lZmZlY3RFbGVtZW50c1tpXSwgZGF0YS5lZltpXS50eSwgZWxlbSwgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoZGF0YS5tbiA9PT0gJ0FEQkUgQ29sb3IgQ29udHJvbCcpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGdyb3VwSW50ZXJmYWNlLCAnY29sb3InLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZWZmZWN0RWxlbWVudHNbMF0oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhncm91cEludGVyZmFjZSwge1xuICAgICAgICBudW1Qcm9wZXJ0aWVzOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5ucDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IGRhdGEubm1cbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydHlHcm91cDoge1xuICAgICAgICAgIHZhbHVlOiBfcHJvcGVydHlHcm91cFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGdyb3VwSW50ZXJmYWNlLmVuYWJsZWQgPSBkYXRhLmVuICE9PSAwO1xuICAgICAgZ3JvdXBJbnRlcmZhY2UuYWN0aXZlID0gZ3JvdXBJbnRlcmZhY2UuZW5hYmxlZDtcbiAgICAgIHJldHVybiBncm91cEludGVyZmFjZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVWYWx1ZUludGVyZmFjZShlbGVtZW50LCB0eXBlLCBlbGVtLCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgZXhwcmVzc2lvblByb3BlcnR5ID0gRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKGVsZW1lbnQucCk7XG5cbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAodHlwZSA9PT0gMTApIHtcbiAgICAgICAgICByZXR1cm4gZWxlbS5jb21wLmNvbXBJbnRlcmZhY2UoZWxlbWVudC5wLnYpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb25Qcm9wZXJ0eSgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZWxlbWVudC5wLnNldEdyb3VwUHJvcGVydHkpIHtcbiAgICAgICAgZWxlbWVudC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJycsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIHJldHVybiBvYjtcbiAgfSgpO1xuXG4gIHZhciBTaGFwZVBhdGhJbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGhJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB2YXIgcHJvcCA9IHZpZXcuc2g7XG5cbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSAnU2hhcGUnIHx8IHZhbCA9PT0gJ3NoYXBlJyB8fCB2YWwgPT09ICdQYXRoJyB8fCB2YWwgPT09ICdwYXRoJyB8fCB2YWwgPT09ICdBREJFIFZlY3RvciBTaGFwZScgfHwgdmFsID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBhdGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICBwcm9wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1BhdGgnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgcGF0aDoge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgaWYgKHByb3Auaykge1xuICAgICAgICAgICAgICBwcm9wLmdldFZhbHVlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgc2hhcGU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIGlmIChwcm9wLmspIHtcbiAgICAgICAgICAgICAgcHJvcC5nZXRWYWx1ZSgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH0sXG4gICAgICAgIGl4OiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLml4XG4gICAgICAgIH0sXG4gICAgICAgIHByb3BlcnR5SW5kZXg6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUuaXhcbiAgICAgICAgfSxcbiAgICAgICAgbW46IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubW5cbiAgICAgICAgfSxcbiAgICAgICAgcHJvcGVydHlHcm91cDoge1xuICAgICAgICAgIHZhbHVlOiBwcm9wZXJ0eUdyb3VwXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlID0gZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIGl0ZXJhdGVFbGVtZW50cyhzaGFwZXMsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBhcnIgPSBbXTtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlcyA/IHNoYXBlcy5sZW5ndGggOiAwO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ2dyJykge1xuICAgICAgICAgIGFyci5wdXNoKGdyb3VwSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdmbCcpIHtcbiAgICAgICAgICBhcnIucHVzaChmaWxsSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdzdCcpIHtcbiAgICAgICAgICBhcnIucHVzaChzdHJva2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3RtJykge1xuICAgICAgICAgIGFyci5wdXNoKHRyaW1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3RyJykgey8vIGFyci5wdXNoKHRyYW5zZm9ybUludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLHZpZXdbaV0scHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ2VsJykge1xuICAgICAgICAgIGFyci5wdXNoKGVsbGlwc2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3NyJykge1xuICAgICAgICAgIGFyci5wdXNoKHN0YXJJbnRlcmZhY2VGYWN0b3J5KHNoYXBlc1tpXSwgdmlld1tpXSwgcHJvcGVydHlHcm91cCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHNoYXBlc1tpXS50eSA9PT0gJ3NoJykge1xuICAgICAgICAgIGFyci5wdXNoKFNoYXBlUGF0aEludGVyZmFjZShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdyYycpIHtcbiAgICAgICAgICBhcnIucHVzaChyZWN0SW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdyZCcpIHtcbiAgICAgICAgICBhcnIucHVzaChyb3VuZGVkSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIGlmIChzaGFwZXNbaV0udHkgPT09ICdycCcpIHtcbiAgICAgICAgICBhcnIucHVzaChyZXBlYXRlckludGVyZmFjZUZhY3Rvcnkoc2hhcGVzW2ldLCB2aWV3W2ldLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc2hhcGVzW2ldLnR5ID09PSAnZ2YnKSB7XG4gICAgICAgICAgYXJyLnB1c2goZ3JhZGllbnRGaWxsSW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhcnIucHVzaChkZWZhdWx0SW50ZXJmYWNlRmFjdG9yeShzaGFwZXNbaV0sIHZpZXdbaV0sIHByb3BlcnR5R3JvdXApKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnRlbnRzSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGludGVyZmFjZXM7XG5cbiAgICAgIHZhciBpbnRlcmZhY2VGdW5jdGlvbiA9IGZ1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHZhciBsZW4gPSBpbnRlcmZhY2VzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChpbnRlcmZhY2VzW2ldLl9uYW1lID09PSB2YWx1ZSB8fCBpbnRlcmZhY2VzW2ldLm1uID09PSB2YWx1ZSB8fCBpbnRlcmZhY2VzW2ldLnByb3BlcnR5SW5kZXggPT09IHZhbHVlIHx8IGludGVyZmFjZXNbaV0uaXggPT09IHZhbHVlIHx8IGludGVyZmFjZXNbaV0uaW5kID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGludGVyZmFjZXNbaV07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaSArPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlc1t2YWx1ZSAtIDFdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9O1xuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuICAgICAgaW50ZXJmYWNlcyA9IGl0ZXJhdGVFbGVtZW50cyhzaGFwZS5pdCwgdmlldy5pdCwgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5udW1Qcm9wZXJ0aWVzID0gaW50ZXJmYWNlcy5sZW5ndGg7XG4gICAgICB2YXIgdHJhbnNmb3JtSW50ZXJmYWNlID0gdHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeShzaGFwZS5pdFtzaGFwZS5pdC5sZW5ndGggLSAxXSwgdmlldy5pdFt2aWV3Lml0Lmxlbmd0aCAtIDFdLCBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnRyYW5zZm9ybSA9IHRyYW5zZm9ybUludGVyZmFjZTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5jaXg7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5fbmFtZSA9IHNoYXBlLm5tO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdyb3VwSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGludGVyZmFjZUZ1bmN0aW9uID0gZnVuY3Rpb24gX2ludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIHN3aXRjaCAodmFsdWUpIHtcbiAgICAgICAgICBjYXNlICdBREJFIFZlY3RvcnMgR3JvdXAnOlxuICAgICAgICAgIGNhc2UgJ0NvbnRlbnRzJzpcbiAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uY29udGVudDtcbiAgICAgICAgICAvLyBOb3QgbmVjZXNzYXJ5IGZvciBub3cuIEtlZXBpbmcgdGhlbSBoZXJlIGluIGNhc2UgYSBuZXcgY2FzZSBhcHBlYXJzXG4gICAgICAgICAgLy8gY2FzZSAnQURCRSBWZWN0b3IgVHJhbnNmb3JtIEdyb3VwJzpcbiAgICAgICAgICAvLyBjYXNlIDM6XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnRyYW5zZm9ybTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcbiAgICAgIHZhciBjb250ZW50ID0gY29udGVudHNJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUdyb3VwKTtcbiAgICAgIHZhciB0cmFuc2Zvcm1JbnRlcmZhY2UgPSB0cmFuc2Zvcm1JbnRlcmZhY2VGYWN0b3J5KHNoYXBlLml0W3NoYXBlLml0Lmxlbmd0aCAtIDFdLCB2aWV3Lml0W3ZpZXcuaXQubGVuZ3RoIC0gMV0sIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXApO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24uY29udGVudCA9IGNvbnRlbnQ7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1JbnRlcmZhY2U7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoaW50ZXJmYWNlRnVuY3Rpb24sICdfbmFtZScsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIHNoYXBlLm5tO1xuICAgICAgICB9XG4gICAgICB9KTsgLy8gaW50ZXJmYWNlRnVuY3Rpb24uY29udGVudCA9IGludGVyZmFjZUZ1bmN0aW9uO1xuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5udW1Qcm9wZXJ0aWVzID0gc2hhcGUubnA7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5ubSA9IHNoYXBlLm5tO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWxsSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdDb2xvcicgfHwgdmFsID09PSAnY29sb3InKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmNvbG9yO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ09wYWNpdHknIHx8IHZhbCA9PT0gJ29wYWNpdHknKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmMpXG4gICAgICAgIH0sXG4gICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3Lm8pXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH0sXG4gICAgICAgIG1uOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgdmlldy5jLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0NvbG9yJywgcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ3JhZGllbnRGaWxsSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsKSB7XG4gICAgICAgIGlmICh2YWwgPT09ICdTdGFydCBQb2ludCcgfHwgdmFsID09PSAnc3RhcnQgcG9pbnQnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnN0YXJ0UG9pbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSAnRW5kIFBvaW50JyB8fCB2YWwgPT09ICdlbmQgcG9pbnQnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLmVuZFBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gJ09wYWNpdHknIHx8IHZhbCA9PT0gJ29wYWNpdHknKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgc3RhcnRQb2ludDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcucylcbiAgICAgICAgfSxcbiAgICAgICAgZW5kUG9pbnQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmUpXG4gICAgICAgIH0sXG4gICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3Lm8pXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6IHtcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiAnYSc7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9LFxuICAgICAgICBtbjoge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5tblxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHZpZXcucy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTdGFydCBQb2ludCcsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIHZpZXcuZS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdFbmQgUG9pbnQnLCBwcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3Lm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsIHByb3BlcnR5R3JvdXApKTtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkZWZhdWx0SW50ZXJmYWNlRmFjdG9yeSgpIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHN0cm9rZUludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIF9kYXNoUHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGRhc2hPYiwgX3Byb3BlcnR5R3JvdXApO1xuXG4gICAgICBmdW5jdGlvbiBhZGRQcm9wZXJ0eVRvRGFzaE9iKGkpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGRhc2hPYiwgc2hhcGUuZFtpXS5ubSwge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcuZC5kYXRhUHJvcHNbaV0ucClcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbiA9IHNoYXBlLmQgPyBzaGFwZS5kLmxlbmd0aCA6IDA7XG4gICAgICB2YXIgZGFzaE9iID0ge307XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gMSkge1xuICAgICAgICBhZGRQcm9wZXJ0eVRvRGFzaE9iKGkpO1xuICAgICAgICB2aWV3LmQuZGF0YVByb3BzW2ldLnAuc2V0R3JvdXBQcm9wZXJ0eShfZGFzaFByb3BlcnR5R3JvdXApO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWwpIHtcbiAgICAgICAgaWYgKHZhbCA9PT0gJ0NvbG9yJyB8fCB2YWwgPT09ICdjb2xvcicpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSAnT3BhY2l0eScgfHwgdmFsID09PSAnb3BhY2l0eScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3BhY2l0eTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWwgPT09ICdTdHJva2UgV2lkdGgnIHx8IHZhbCA9PT0gJ3N0cm9rZSB3aWR0aCcpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc3Ryb2tlV2lkdGg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgY29sb3I6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LmMpXG4gICAgICAgIH0sXG4gICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3Lm8pXG4gICAgICAgIH0sXG4gICAgICAgIHN0cm9rZVdpZHRoOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy53KVxuICAgICAgICB9LFxuICAgICAgICBkYXNoOiB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gZGFzaE9iO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfSxcbiAgICAgICAgbW46IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubW5cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICB2aWV3LmMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnQ29sb3InLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5vLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ09wYWNpdHknLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy53LnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1N0cm9rZSBXaWR0aCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJpbUludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBpZiAodmFsID09PSBzaGFwZS5lLml4IHx8IHZhbCA9PT0gJ0VuZCcgfHwgdmFsID09PSAnZW5kJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5lbmQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsID09PSBzaGFwZS5zLml4KSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnN0YXJ0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gc2hhcGUuby5peCkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICB2aWV3LnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU3RhcnQnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy5lLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0VuZCcsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3Lm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT2Zmc2V0JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnMpXG4gICAgICAgIH0sXG4gICAgICAgIGVuZDoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcuZSlcbiAgICAgICAgfSxcbiAgICAgICAgb2Zmc2V0OiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2Uodmlldy5vKVxuICAgICAgICB9LFxuICAgICAgICBfbmFtZToge1xuICAgICAgICAgIHZhbHVlOiBzaGFwZS5ubVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLm1uID0gc2hhcGUubW47XG4gICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtSW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLmEuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnQW5jaG9yIFBvaW50Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5hbmNob3JQb2ludDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5vLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ09wYWNpdHknKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm9wYWNpdHk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUucC5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdQb3NpdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuci5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdSb3RhdGlvbicgfHwgdmFsdWUgPT09ICdBREJFIFZlY3RvciBSb3RhdGlvbicpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucm90YXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUucy5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdTY2FsZScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUuc2sgJiYgc2hhcGUuc2suaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnU2tldycpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2tldztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5zYSAmJiBzaGFwZS5zYS5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdTa2V3IEF4aXMnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnNrZXdBeGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLm8uc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnT3BhY2l0eScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICB2aWV3LnRyYW5zZm9ybS5tUHJvcHMuYS5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdBbmNob3IgUG9pbnQnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2NhbGUnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLnIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUm90YXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuXG4gICAgICBpZiAodmlldy50cmFuc2Zvcm0ubVByb3BzLnNrKSB7XG4gICAgICAgIHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zay5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdTa2V3JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgICAgdmlldy50cmFuc2Zvcm0ubVByb3BzLnNhLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1NrZXcgQW5nbGUnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgfVxuXG4gICAgICB2aWV3LnRyYW5zZm9ybS5vcC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPcGFjaXR5JywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIG9wYWNpdHk6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMubylcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMucClcbiAgICAgICAgfSxcbiAgICAgICAgYW5jaG9yUG9pbnQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuYSlcbiAgICAgICAgfSxcbiAgICAgICAgc2NhbGU6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMucylcbiAgICAgICAgfSxcbiAgICAgICAgcm90YXRpb246IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMucilcbiAgICAgICAgfSxcbiAgICAgICAgc2tldzoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHZpZXcudHJhbnNmb3JtLm1Qcm9wcy5zaylcbiAgICAgICAgfSxcbiAgICAgICAgc2tld0F4aXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZSh2aWV3LnRyYW5zZm9ybS5tUHJvcHMuc2EpXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24udHkgPSAndHInO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVsbGlwc2VJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUucC5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ucG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUucy5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uc2l6ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHZhciBwcm9wID0gdmlldy5zaC50eSA9PT0gJ3RtJyA/IHZpZXcuc2gucHJvcCA6IHZpZXcuc2g7XG4gICAgICBwcm9wLnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2l6ZScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnAuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUG9zaXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucylcbiAgICAgICAgfSxcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnApXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzdGFySW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLnAuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnIuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnJvdGF0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnB0Lml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5wb2ludHM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGUub3IuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnQURCRSBWZWN0b3IgU3RhciBPdXRlciBSYWRpdXMnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLm91dGVyUmFkaXVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLm9zLml4ID09PSB2YWx1ZSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vdXRlclJvdW5kbmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5pciAmJiAoc2hhcGUuaXIuaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnQURCRSBWZWN0b3IgU3RhciBJbm5lciBSYWRpdXMnKSkge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5pbm5lclJhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5pcyAmJiBzaGFwZS5pcy5peCA9PT0gdmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uaW5uZXJSb3VuZG5lc3M7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgcHJvcCA9IHZpZXcuc2gudHkgPT09ICd0bScgPyB2aWV3LnNoLnByb3AgOiB2aWV3LnNoO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ucHJvcGVydHlJbmRleCA9IHNoYXBlLml4O1xuICAgICAgcHJvcC5vci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPdXRlciBSYWRpdXMnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5vcy5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPdXRlciBSb3VuZG5lc3MnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5wdC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb2ludHMnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgcHJvcC5wLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ1Bvc2l0aW9uJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3Auci5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdSb3RhdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG5cbiAgICAgIGlmIChzaGFwZS5pcikge1xuICAgICAgICBwcm9wLmlyLnNldEdyb3VwUHJvcGVydHkoUHJvcGVydHlJbnRlcmZhY2UoJ0lubmVyIFJhZGl1cycsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICAgIHByb3AuaXMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnSW5uZXIgUm91bmRuZXNzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnApXG4gICAgICAgIH0sXG4gICAgICAgIHJvdGF0aW9uOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5yKVxuICAgICAgICB9LFxuICAgICAgICBwb2ludHM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnB0KVxuICAgICAgICB9LFxuICAgICAgICBvdXRlclJhZGl1czoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3Aub3IpXG4gICAgICAgIH0sXG4gICAgICAgIG91dGVyUm91bmRuZXNzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5vcylcbiAgICAgICAgfSxcbiAgICAgICAgaW5uZXJSYWRpdXM6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLmlyKVxuICAgICAgICB9LFxuICAgICAgICBpbm5lclJvdW5kbmVzczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AuaXMpXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWN0SW50ZXJmYWNlRmFjdG9yeShzaGFwZSwgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHNoYXBlLnAuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnBvc2l0aW9uO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLnIuaXggPT09IHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnJvdW5kbmVzcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzaGFwZS5zLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ1NpemUnIHx8IHZhbHVlID09PSAnQURCRSBWZWN0b3IgUmVjdCBTaXplJykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5zaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIHZhciBfcHJvcGVydHlHcm91cCA9IHByb3BlcnR5R3JvdXBGYWN0b3J5KGludGVyZmFjZUZ1bmN0aW9uLCBwcm9wZXJ0eUdyb3VwKTtcblxuICAgICAgdmFyIHByb3AgPSB2aWV3LnNoLnR5ID09PSAndG0nID8gdmlldy5zaC5wcm9wIDogdmlldy5zaDtcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHByb3AucC5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdQb3NpdGlvbicsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnU2l6ZScsIF9wcm9wZXJ0eUdyb3VwKSk7XG4gICAgICBwcm9wLnIuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUm90YXRpb24nLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgcG9zaXRpb246IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLnApXG4gICAgICAgIH0sXG4gICAgICAgIHJvdW5kbmVzczoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucilcbiAgICAgICAgfSxcbiAgICAgICAgc2l6ZToge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucylcbiAgICAgICAgfSxcbiAgICAgICAgX25hbWU6IHtcbiAgICAgICAgICB2YWx1ZTogc2hhcGUubm1cbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5tbiA9IHNoYXBlLm1uO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJvdW5kZWRJbnRlcmZhY2VGYWN0b3J5KHNoYXBlLCB2aWV3LCBwcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBmdW5jdGlvbiBpbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAoc2hhcGUuci5peCA9PT0gdmFsdWUgfHwgdmFsdWUgPT09ICdSb3VuZCBDb3JuZXJzIDEnKSB7XG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uLnJhZGl1cztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3Byb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShpbnRlcmZhY2VGdW5jdGlvbiwgcHJvcGVydHlHcm91cCk7XG5cbiAgICAgIHZhciBwcm9wID0gdmlldztcbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5SW5kZXggPSBzaGFwZS5peDtcbiAgICAgIHByb3AucmQuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnUmFkaXVzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGludGVyZmFjZUZ1bmN0aW9uLCB7XG4gICAgICAgIHJhZGl1czoge1xuICAgICAgICAgIGdldDogRXhwcmVzc2lvblByb3BlcnR5SW50ZXJmYWNlKHByb3AucmQpXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZXBlYXRlckludGVyZmFjZUZhY3Rvcnkoc2hhcGUsIHZpZXcsIHByb3BlcnR5R3JvdXApIHtcbiAgICAgIGZ1bmN0aW9uIGludGVyZmFjZUZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIGlmIChzaGFwZS5jLml4ID09PSB2YWx1ZSB8fCB2YWx1ZSA9PT0gJ0NvcGllcycpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24uY29waWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHNoYXBlLm8uaXggPT09IHZhbHVlIHx8IHZhbHVlID09PSAnT2Zmc2V0Jykge1xuICAgICAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbi5vZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIF9wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cEZhY3RvcnkoaW50ZXJmYWNlRnVuY3Rpb24sIHByb3BlcnR5R3JvdXApO1xuXG4gICAgICB2YXIgcHJvcCA9IHZpZXc7XG4gICAgICBpbnRlcmZhY2VGdW5jdGlvbi5wcm9wZXJ0eUluZGV4ID0gc2hhcGUuaXg7XG4gICAgICBwcm9wLmMuc2V0R3JvdXBQcm9wZXJ0eShQcm9wZXJ0eUludGVyZmFjZSgnQ29waWVzJywgX3Byb3BlcnR5R3JvdXApKTtcbiAgICAgIHByb3Auby5zZXRHcm91cFByb3BlcnR5KFByb3BlcnR5SW50ZXJmYWNlKCdPZmZzZXQnLCBfcHJvcGVydHlHcm91cCkpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoaW50ZXJmYWNlRnVuY3Rpb24sIHtcbiAgICAgICAgY29waWVzOiB7XG4gICAgICAgICAgZ2V0OiBFeHByZXNzaW9uUHJvcGVydHlJbnRlcmZhY2UocHJvcC5jKVxuICAgICAgICB9LFxuICAgICAgICBvZmZzZXQ6IHtcbiAgICAgICAgICBnZXQ6IEV4cHJlc3Npb25Qcm9wZXJ0eUludGVyZmFjZShwcm9wLm8pXG4gICAgICAgIH0sXG4gICAgICAgIF9uYW1lOiB7XG4gICAgICAgICAgdmFsdWU6IHNoYXBlLm5tXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ubW4gPSBzaGFwZS5tbjtcbiAgICAgIHJldHVybiBpbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKHNoYXBlcywgdmlldywgcHJvcGVydHlHcm91cCkge1xuICAgICAgdmFyIGludGVyZmFjZXM7XG5cbiAgICAgIGZ1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUgPT09IHVuZGVmaW5lZCA/IDEgOiB2YWx1ZTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5R3JvdXA7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGludGVyZmFjZXNbdmFsdWUgLSAxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgdmFyIGxlbiA9IGludGVyZmFjZXMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgICAgICAgaWYgKGludGVyZmFjZXNbaV0uX25hbWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlc1tpXTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpICs9IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgICAgZnVuY3Rpb24gcGFyZW50R3JvdXBXcmFwcGVyKCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydHlHcm91cDtcbiAgICAgIH1cblxuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXAgPSBwcm9wZXJ0eUdyb3VwRmFjdG9yeShfaW50ZXJmYWNlRnVuY3Rpb24sIHBhcmVudEdyb3VwV3JhcHBlcik7XG4gICAgICBpbnRlcmZhY2VzID0gaXRlcmF0ZUVsZW1lbnRzKHNoYXBlcywgdmlldywgX2ludGVyZmFjZUZ1bmN0aW9uLnByb3BlcnR5R3JvdXApO1xuICAgICAgX2ludGVyZmFjZUZ1bmN0aW9uLm51bVByb3BlcnRpZXMgPSBpbnRlcmZhY2VzLmxlbmd0aDtcbiAgICAgIF9pbnRlcmZhY2VGdW5jdGlvbi5fbmFtZSA9ICdDb250ZW50cyc7XG4gICAgICByZXR1cm4gX2ludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICB2YXIgVGV4dEV4cHJlc3Npb25JbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChlbGVtKSB7XG4gICAgICB2YXIgX3NvdXJjZVRleHQ7XG5cbiAgICAgIGZ1bmN0aW9uIF90aGlzTGF5ZXJGdW5jdGlvbihuYW1lKSB7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgIGNhc2UgJ0FEQkUgVGV4dCBEb2N1bWVudCc6XG4gICAgICAgICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uLnNvdXJjZVRleHQ7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzTGF5ZXJGdW5jdGlvbiwgJ3NvdXJjZVRleHQnLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgIGVsZW0udGV4dFByb3BlcnR5LmdldFZhbHVlKCk7XG4gICAgICAgICAgdmFyIHN0cmluZ1ZhbHVlID0gZWxlbS50ZXh0UHJvcGVydHkuY3VycmVudERhdGEudDtcblxuICAgICAgICAgIGlmICghX3NvdXJjZVRleHQgfHwgc3RyaW5nVmFsdWUgIT09IF9zb3VyY2VUZXh0LnZhbHVlKSB7XG4gICAgICAgICAgICBfc291cmNlVGV4dCA9IG5ldyBTdHJpbmcoc3RyaW5nVmFsdWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuICAgICAgICAgICAgLy8gSWYgc3RyaW5nVmFsdWUgaXMgYW4gZW1wdHkgc3RyaW5nLCBldmFsIHJldHVybnMgdW5kZWZpbmVkLCBzbyBpdCBoYXMgdG8gYmUgcmV0dXJuZWQgYXMgYSBTdHJpbmcgcHJpbWl0aXZlXG5cbiAgICAgICAgICAgIF9zb3VyY2VUZXh0LnZhbHVlID0gc3RyaW5nVmFsdWUgfHwgbmV3IFN0cmluZyhzdHJpbmdWYWx1ZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfc291cmNlVGV4dCwgJ3N0eWxlJywge1xuICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgZmlsbENvbG9yOiBlbGVtLnRleHRQcm9wZXJ0eS5jdXJyZW50RGF0YS5mY1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBfc291cmNlVGV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gX3RoaXNMYXllckZ1bmN0aW9uO1xuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbiAgdmFyIEZvb3RhZ2VJbnRlcmZhY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG91dGxpbmVJbnRlcmZhY2VGYWN0b3J5ID0gZnVuY3Rpb24gb3V0bGluZUludGVyZmFjZUZhY3RvcnkoZWxlbSkge1xuICAgICAgdmFyIGN1cnJlbnRQcm9wZXJ0eU5hbWUgPSAnJztcbiAgICAgIHZhciBjdXJyZW50UHJvcGVydHkgPSBlbGVtLmdldEZvb3RhZ2VEYXRhKCk7XG5cbiAgICAgIGZ1bmN0aW9uIGluaXQoKSB7XG4gICAgICAgIGN1cnJlbnRQcm9wZXJ0eU5hbWUgPSAnJztcbiAgICAgICAgY3VycmVudFByb3BlcnR5ID0gZWxlbS5nZXRGb290YWdlRGF0YSgpO1xuICAgICAgICByZXR1cm4gc2VhcmNoUHJvcGVydHk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNlYXJjaFByb3BlcnR5KHZhbHVlKSB7XG4gICAgICAgIGlmIChjdXJyZW50UHJvcGVydHlbdmFsdWVdKSB7XG4gICAgICAgICAgY3VycmVudFByb3BlcnR5TmFtZSA9IHZhbHVlO1xuICAgICAgICAgIGN1cnJlbnRQcm9wZXJ0eSA9IGN1cnJlbnRQcm9wZXJ0eVt2YWx1ZV07XG5cbiAgICAgICAgICBpZiAoX3R5cGVvZihjdXJyZW50UHJvcGVydHkpID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgcmV0dXJuIHNlYXJjaFByb3BlcnR5O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBjdXJyZW50UHJvcGVydHk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcHJvcGVydHlOYW1lSW5kZXggPSB2YWx1ZS5pbmRleE9mKGN1cnJlbnRQcm9wZXJ0eU5hbWUpO1xuXG4gICAgICAgIGlmIChwcm9wZXJ0eU5hbWVJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludCh2YWx1ZS5zdWJzdHIocHJvcGVydHlOYW1lSW5kZXggKyBjdXJyZW50UHJvcGVydHlOYW1lLmxlbmd0aCksIDEwKTtcbiAgICAgICAgICBjdXJyZW50UHJvcGVydHkgPSBjdXJyZW50UHJvcGVydHlbaW5kZXhdO1xuXG4gICAgICAgICAgaWYgKF90eXBlb2YoY3VycmVudFByb3BlcnR5KSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBzZWFyY2hQcm9wZXJ0eTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY3VycmVudFByb3BlcnR5O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5pdDtcbiAgICB9O1xuXG4gICAgdmFyIGRhdGFJbnRlcmZhY2VGYWN0b3J5ID0gZnVuY3Rpb24gZGF0YUludGVyZmFjZUZhY3RvcnkoZWxlbSkge1xuICAgICAgZnVuY3Rpb24gaW50ZXJmYWNlRnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSAnT3V0bGluZScpIHtcbiAgICAgICAgICByZXR1cm4gaW50ZXJmYWNlRnVuY3Rpb24ub3V0bGluZUludGVyZmFjZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIGludGVyZmFjZUZ1bmN0aW9uLl9uYW1lID0gJ091dGxpbmUnO1xuICAgICAgaW50ZXJmYWNlRnVuY3Rpb24ub3V0bGluZUludGVyZmFjZSA9IG91dGxpbmVJbnRlcmZhY2VGYWN0b3J5KGVsZW0pO1xuICAgICAgcmV0dXJuIGludGVyZmFjZUZ1bmN0aW9uO1xuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKGVsZW0pIHtcbiAgICAgIGZ1bmN0aW9uIF9pbnRlcmZhY2VGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09ICdEYXRhJykge1xuICAgICAgICAgIHJldHVybiBfaW50ZXJmYWNlRnVuY3Rpb24uZGF0YUludGVyZmFjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBfaW50ZXJmYWNlRnVuY3Rpb24uX25hbWUgPSAnRGF0YSc7XG4gICAgICBfaW50ZXJmYWNlRnVuY3Rpb24uZGF0YUludGVyZmFjZSA9IGRhdGFJbnRlcmZhY2VGYWN0b3J5KGVsZW0pO1xuICAgICAgcmV0dXJuIF9pbnRlcmZhY2VGdW5jdGlvbjtcbiAgICB9O1xuICB9KCk7XG5cbiAgdmFyIGludGVyZmFjZXMgPSB7XG4gICAgbGF5ZXI6IExheWVyRXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICBlZmZlY3RzOiBFZmZlY3RzRXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICBjb21wOiBDb21wRXhwcmVzc2lvbkludGVyZmFjZSxcbiAgICBzaGFwZTogU2hhcGVFeHByZXNzaW9uSW50ZXJmYWNlLFxuICAgIHRleHQ6IFRleHRFeHByZXNzaW9uSW50ZXJmYWNlLFxuICAgIGZvb3RhZ2U6IEZvb3RhZ2VJbnRlcmZhY2VcbiAgfTtcblxuICBmdW5jdGlvbiBnZXRJbnRlcmZhY2UodHlwZSkge1xuICAgIHJldHVybiBpbnRlcmZhY2VzW3R5cGVdIHx8IG51bGw7XG4gIH1cblxuICB2YXIgZXhwcmVzc2lvbkhlbHBlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gc2VhcmNoRXhwcmVzc2lvbnMoZWxlbSwgZGF0YSwgcHJvcCkge1xuICAgICAgaWYgKGRhdGEueCkge1xuICAgICAgICBwcm9wLmsgPSB0cnVlO1xuICAgICAgICBwcm9wLnggPSB0cnVlO1xuICAgICAgICBwcm9wLmluaXRpYXRlRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25NYW5hZ2VyLmluaXRpYXRlRXhwcmVzc2lvbjtcbiAgICAgICAgcHJvcC5lZmZlY3RzU2VxdWVuY2UucHVzaChwcm9wLmluaXRpYXRlRXhwcmVzc2lvbihlbGVtLCBkYXRhLCBwcm9wKS5iaW5kKHByb3ApKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWYWx1ZUF0VGltZShmcmFtZU51bSkge1xuICAgICAgZnJhbWVOdW0gKj0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgZnJhbWVOdW0gLT0gdGhpcy5vZmZzZXRUaW1lO1xuXG4gICAgICBpZiAoZnJhbWVOdW0gIT09IHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEZyYW1lKSB7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEluZGV4ID0gdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0RnJhbWUgPCBmcmFtZU51bSA/IHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEluZGV4IDogMDtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZS52YWx1ZSA9IHRoaXMuaW50ZXJwb2xhdGVWYWx1ZShmcmFtZU51bSwgdGhpcy5fY2FjaGluZ0F0VGltZSk7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdEZyYW1lID0gZnJhbWVOdW07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLl9jYWNoaW5nQXRUaW1lLnZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNwZWVkQXRUaW1lKGZyYW1lTnVtKSB7XG4gICAgICB2YXIgZGVsdGEgPSAtMC4wMTtcbiAgICAgIHZhciB2MSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0pO1xuICAgICAgdmFyIHYyID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmcmFtZU51bSArIGRlbHRhKTtcbiAgICAgIHZhciBzcGVlZCA9IDA7XG5cbiAgICAgIGlmICh2MS5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHYxLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgc3BlZWQgKz0gTWF0aC5wb3codjJbaV0gLSB2MVtpXSwgMik7XG4gICAgICAgIH1cblxuICAgICAgICBzcGVlZCA9IE1hdGguc3FydChzcGVlZCkgKiAxMDA7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzcGVlZCA9IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzcGVlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRWZWxvY2l0eUF0VGltZShmcmFtZU51bSkge1xuICAgICAgaWYgKHRoaXMudmVsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVsO1xuICAgICAgfVxuXG4gICAgICB2YXIgZGVsdGEgPSAtMC4wMDE7IC8vIGZyYW1lTnVtICs9IHRoaXMuZWxlbS5kYXRhLnN0O1xuXG4gICAgICB2YXIgdjEgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGZyYW1lTnVtKTtcbiAgICAgIHZhciB2MiA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZnJhbWVOdW0gKyBkZWx0YSk7XG4gICAgICB2YXIgdmVsb2NpdHk7XG5cbiAgICAgIGlmICh2MS5sZW5ndGgpIHtcbiAgICAgICAgdmVsb2NpdHkgPSBjcmVhdGVUeXBlZEFycmF5KCdmbG9hdDMyJywgdjEubGVuZ3RoKTtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHYxLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgLy8gcmVtb3ZpbmcgZnJhbWVSYXRlXG4gICAgICAgICAgLy8gaWYgbmVlZGVkLCBkb24ndCBhZGQgaXQgaGVyZVxuICAgICAgICAgIC8vIHZlbG9jaXR5W2ldID0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlKigodjJbaV0gLSB2MVtpXSkvZGVsdGEpO1xuICAgICAgICAgIHZlbG9jaXR5W2ldID0gKHYyW2ldIC0gdjFbaV0pIC8gZGVsdGE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZlbG9jaXR5ID0gKHYyIC0gdjEpIC8gZGVsdGE7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2ZWxvY2l0eTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTdGF0aWNWYWx1ZUF0VGltZSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldEdyb3VwUHJvcGVydHkocHJvcGVydHlHcm91cCkge1xuICAgICAgdGhpcy5wcm9wZXJ0eUdyb3VwID0gcHJvcGVydHlHcm91cDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2VhcmNoRXhwcmVzc2lvbnM6IHNlYXJjaEV4cHJlc3Npb25zLFxuICAgICAgZ2V0U3BlZWRBdFRpbWU6IGdldFNwZWVkQXRUaW1lLFxuICAgICAgZ2V0VmVsb2NpdHlBdFRpbWU6IGdldFZlbG9jaXR5QXRUaW1lLFxuICAgICAgZ2V0VmFsdWVBdFRpbWU6IGdldFZhbHVlQXRUaW1lLFxuICAgICAgZ2V0U3RhdGljVmFsdWVBdFRpbWU6IGdldFN0YXRpY1ZhbHVlQXRUaW1lLFxuICAgICAgc2V0R3JvdXBQcm9wZXJ0eTogc2V0R3JvdXBQcm9wZXJ0eVxuICAgIH07XG4gIH0oKTtcblxuICBmdW5jdGlvbiBhZGRQcm9wZXJ0eURlY29yYXRvcigpIHtcbiAgICBmdW5jdGlvbiBsb29wT3V0KHR5cGUsIGR1cmF0aW9uLCBkdXJhdGlvbkZsYWcpIHtcbiAgICAgIGlmICghdGhpcy5rIHx8ICF0aGlzLmtleWZyYW1lcykge1xuICAgICAgICByZXR1cm4gdGhpcy5wdjtcbiAgICAgIH1cblxuICAgICAgdHlwZSA9IHR5cGUgPyB0eXBlLnRvTG93ZXJDYXNlKCkgOiAnJztcbiAgICAgIHZhciBjdXJyZW50RnJhbWUgPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZTtcbiAgICAgIHZhciBrZXlmcmFtZXMgPSB0aGlzLmtleWZyYW1lcztcbiAgICAgIHZhciBsYXN0S2V5RnJhbWUgPSBrZXlmcmFtZXNba2V5ZnJhbWVzLmxlbmd0aCAtIDFdLnQ7XG5cbiAgICAgIGlmIChjdXJyZW50RnJhbWUgPD0gbGFzdEtleUZyYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB2YXIgY3ljbGVEdXJhdGlvbjtcbiAgICAgIHZhciBmaXJzdEtleUZyYW1lO1xuXG4gICAgICBpZiAoIWR1cmF0aW9uRmxhZykge1xuICAgICAgICBpZiAoIWR1cmF0aW9uIHx8IGR1cmF0aW9uID4ga2V5ZnJhbWVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBkdXJhdGlvbiA9IGtleWZyYW1lcy5sZW5ndGggLSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlyc3RLZXlGcmFtZSA9IGtleWZyYW1lc1trZXlmcmFtZXMubGVuZ3RoIC0gMSAtIGR1cmF0aW9uXS50O1xuICAgICAgICBjeWNsZUR1cmF0aW9uID0gbGFzdEtleUZyYW1lIC0gZmlyc3RLZXlGcmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghZHVyYXRpb24pIHtcbiAgICAgICAgICBjeWNsZUR1cmF0aW9uID0gTWF0aC5tYXgoMCwgbGFzdEtleUZyYW1lIC0gdGhpcy5lbGVtLmRhdGEuaXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN5Y2xlRHVyYXRpb24gPSBNYXRoLmFicyhsYXN0S2V5RnJhbWUgLSB0aGlzLmVsZW0uY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSAqIGR1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpcnN0S2V5RnJhbWUgPSBsYXN0S2V5RnJhbWUgLSBjeWNsZUR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBsZW47XG4gICAgICB2YXIgcmV0O1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ3Bpbmdwb25nJykge1xuICAgICAgICB2YXIgaXRlcmF0aW9ucyA9IE1hdGguZmxvb3IoKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpIC8gY3ljbGVEdXJhdGlvbik7XG5cbiAgICAgICAgaWYgKGl0ZXJhdGlvbnMgJSAyICE9PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGN5Y2xlRHVyYXRpb24gLSAoY3VycmVudEZyYW1lIC0gZmlyc3RLZXlGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ29mZnNldCcpIHtcbiAgICAgICAgdmFyIGluaXRWID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmaXJzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIGVuZFYgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGxhc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBjdXJyZW50ID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgoKGN1cnJlbnRGcmFtZSAtIGZpcnN0S2V5RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG4gICAgICAgIHZhciByZXBlYXRzID0gTWF0aC5mbG9vcigoY3VycmVudEZyYW1lIC0gZmlyc3RLZXlGcmFtZSkgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAodGhpcy5wdi5sZW5ndGgpIHtcbiAgICAgICAgICByZXQgPSBuZXcgQXJyYXkoaW5pdFYubGVuZ3RoKTtcbiAgICAgICAgICBsZW4gPSByZXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICByZXRbaV0gPSAoZW5kVltpXSAtIGluaXRWW2ldKSAqIHJlcGVhdHMgKyBjdXJyZW50W2ldO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gKGVuZFYgLSBpbml0VikgKiByZXBlYXRzICsgY3VycmVudDtcbiAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NvbnRpbnVlJykge1xuICAgICAgICB2YXIgbGFzdFZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZShsYXN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgbmV4dExhc3RWYWx1ZSA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGxhc3RLZXlGcmFtZSAtIDAuMDAxKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGxhc3RWYWx1ZS5sZW5ndGgpO1xuICAgICAgICAgIGxlbiA9IHJldC5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJldFtpXSA9IGxhc3RWYWx1ZVtpXSArIChsYXN0VmFsdWVbaV0gLSBuZXh0TGFzdFZhbHVlW2ldKSAqICgoY3VycmVudEZyYW1lIC0gbGFzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSkgLyAwLjAwMDU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxhc3RWYWx1ZSArIChsYXN0VmFsdWUgLSBuZXh0TGFzdFZhbHVlKSAqICgoY3VycmVudEZyYW1lIC0gbGFzdEtleUZyYW1lKSAvIDAuMDAxKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVBdFRpbWUoKChjdXJyZW50RnJhbWUgLSBmaXJzdEtleUZyYW1lKSAlIGN5Y2xlRHVyYXRpb24gKyBmaXJzdEtleUZyYW1lKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb29wSW4odHlwZSwgZHVyYXRpb24sIGR1cmF0aW9uRmxhZykge1xuICAgICAgaWYgKCF0aGlzLmspIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHR5cGUgPSB0eXBlID8gdHlwZS50b0xvd2VyQ2FzZSgpIDogJyc7XG4gICAgICB2YXIgY3VycmVudEZyYW1lID0gdGhpcy5jb21wLnJlbmRlcmVkRnJhbWU7XG4gICAgICB2YXIga2V5ZnJhbWVzID0gdGhpcy5rZXlmcmFtZXM7XG4gICAgICB2YXIgZmlyc3RLZXlGcmFtZSA9IGtleWZyYW1lc1swXS50O1xuXG4gICAgICBpZiAoY3VycmVudEZyYW1lID49IGZpcnN0S2V5RnJhbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHZhciBjeWNsZUR1cmF0aW9uO1xuICAgICAgdmFyIGxhc3RLZXlGcmFtZTtcblxuICAgICAgaWYgKCFkdXJhdGlvbkZsYWcpIHtcbiAgICAgICAgaWYgKCFkdXJhdGlvbiB8fCBkdXJhdGlvbiA+IGtleWZyYW1lcy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgZHVyYXRpb24gPSBrZXlmcmFtZXMubGVuZ3RoIC0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxhc3RLZXlGcmFtZSA9IGtleWZyYW1lc1tkdXJhdGlvbl0udDtcbiAgICAgICAgY3ljbGVEdXJhdGlvbiA9IGxhc3RLZXlGcmFtZSAtIGZpcnN0S2V5RnJhbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWR1cmF0aW9uKSB7XG4gICAgICAgICAgY3ljbGVEdXJhdGlvbiA9IE1hdGgubWF4KDAsIHRoaXMuZWxlbS5kYXRhLm9wIC0gZmlyc3RLZXlGcmFtZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3ljbGVEdXJhdGlvbiA9IE1hdGguYWJzKHRoaXMuZWxlbS5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlICogZHVyYXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEtleUZyYW1lID0gZmlyc3RLZXlGcmFtZSArIGN5Y2xlRHVyYXRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGxlbjtcbiAgICAgIHZhciByZXQ7XG5cbiAgICAgIGlmICh0eXBlID09PSAncGluZ3BvbmcnKSB7XG4gICAgICAgIHZhciBpdGVyYXRpb25zID0gTWF0aC5mbG9vcigoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgLyBjeWNsZUR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXRlcmF0aW9ucyAlIDIgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUF0VGltZSgoKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpICUgY3ljbGVEdXJhdGlvbiArIGZpcnN0S2V5RnJhbWUpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvZmZzZXQnKSB7XG4gICAgICAgIHZhciBpbml0ViA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoZmlyc3RLZXlGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG4gICAgICAgIHZhciBlbmRWID0gdGhpcy5nZXRWYWx1ZUF0VGltZShsYXN0S2V5RnJhbWUgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgY3VycmVudCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUoKGN5Y2xlRHVyYXRpb24gLSAoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkgLyB0aGlzLmNvbXAuZ2xvYmFsRGF0YS5mcmFtZVJhdGUsIDApO1xuICAgICAgICB2YXIgcmVwZWF0cyA9IE1hdGguZmxvb3IoKGZpcnN0S2V5RnJhbWUgLSBjdXJyZW50RnJhbWUpIC8gY3ljbGVEdXJhdGlvbikgKyAxO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIHJldCA9IG5ldyBBcnJheShpbml0Vi5sZW5ndGgpO1xuICAgICAgICAgIGxlbiA9IHJldC5sZW5ndGg7XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHJldFtpXSA9IGN1cnJlbnRbaV0gLSAoZW5kVltpXSAtIGluaXRWW2ldKSAqIHJlcGVhdHM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjdXJyZW50IC0gKGVuZFYgLSBpbml0VikgKiByZXBlYXRzO1xuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnY29udGludWUnKSB7XG4gICAgICAgIHZhciBmaXJzdFZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZShmaXJzdEtleUZyYW1lIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTtcbiAgICAgICAgdmFyIG5leHRGaXJzdFZhbHVlID0gdGhpcy5nZXRWYWx1ZUF0VGltZSgoZmlyc3RLZXlGcmFtZSArIDAuMDAxKSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZSwgMCk7XG5cbiAgICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0ID0gbmV3IEFycmF5KGZpcnN0VmFsdWUubGVuZ3RoKTtcbiAgICAgICAgICBsZW4gPSByZXQubGVuZ3RoO1xuXG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICByZXRbaV0gPSBmaXJzdFZhbHVlW2ldICsgKGZpcnN0VmFsdWVbaV0gLSBuZXh0Rmlyc3RWYWx1ZVtpXSkgKiAoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgLyAwLjAwMTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZpcnN0VmFsdWUgKyAoZmlyc3RWYWx1ZSAtIG5leHRGaXJzdFZhbHVlKSAqIChmaXJzdEtleUZyYW1lIC0gY3VycmVudEZyYW1lKSAvIDAuMDAxO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZUF0VGltZSgoY3ljbGVEdXJhdGlvbiAtICgoZmlyc3RLZXlGcmFtZSAtIGN1cnJlbnRGcmFtZSkgJSBjeWNsZUR1cmF0aW9uICsgZmlyc3RLZXlGcmFtZSkpIC8gdGhpcy5jb21wLmdsb2JhbERhdGEuZnJhbWVSYXRlLCAwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNtb290aCh3aWR0aCwgc2FtcGxlcykge1xuICAgICAgaWYgKCF0aGlzLmspIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHY7XG4gICAgICB9XG5cbiAgICAgIHdpZHRoID0gKHdpZHRoIHx8IDAuNCkgKiAwLjU7XG4gICAgICBzYW1wbGVzID0gTWF0aC5mbG9vcihzYW1wbGVzIHx8IDUpO1xuXG4gICAgICBpZiAoc2FtcGxlcyA8PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnB2O1xuICAgICAgfVxuXG4gICAgICB2YXIgY3VycmVudFRpbWUgPSB0aGlzLmNvbXAucmVuZGVyZWRGcmFtZSAvIHRoaXMuY29tcC5nbG9iYWxEYXRhLmZyYW1lUmF0ZTtcbiAgICAgIHZhciBpbml0RnJhbWUgPSBjdXJyZW50VGltZSAtIHdpZHRoO1xuICAgICAgdmFyIGVuZEZyYW1lID0gY3VycmVudFRpbWUgKyB3aWR0aDtcbiAgICAgIHZhciBzYW1wbGVGcmVxdWVuY3kgPSBzYW1wbGVzID4gMSA/IChlbmRGcmFtZSAtIGluaXRGcmFtZSkgLyAoc2FtcGxlcyAtIDEpIDogMTtcbiAgICAgIHZhciBpID0gMDtcbiAgICAgIHZhciBqID0gMDtcbiAgICAgIHZhciB2YWx1ZTtcblxuICAgICAgaWYgKHRoaXMucHYubGVuZ3RoKSB7XG4gICAgICAgIHZhbHVlID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIHRoaXMucHYubGVuZ3RoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gMDtcbiAgICAgIH1cblxuICAgICAgdmFyIHNhbXBsZVZhbHVlO1xuXG4gICAgICB3aGlsZSAoaSA8IHNhbXBsZXMpIHtcbiAgICAgICAgc2FtcGxlVmFsdWUgPSB0aGlzLmdldFZhbHVlQXRUaW1lKGluaXRGcmFtZSArIGkgKiBzYW1wbGVGcmVxdWVuY3kpO1xuXG4gICAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB0aGlzLnB2Lmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICB2YWx1ZVtqXSArPSBzYW1wbGVWYWx1ZVtqXTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFsdWUgKz0gc2FtcGxlVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLnB2Lmxlbmd0aCkge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgdGhpcy5wdi5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHZhbHVlW2pdIC89IHNhbXBsZXM7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlIC89IHNhbXBsZXM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1WYWx1ZUF0VGltZSh0aW1lKSB7XG4gICAgICBpZiAoIXRoaXMuX3RyYW5zZm9ybUNhY2hpbmdBdFRpbWUpIHtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtQ2FjaGluZ0F0VGltZSA9IHtcbiAgICAgICAgICB2OiBuZXcgTWF0cml4KClcbiAgICAgICAgfTtcbiAgICAgIH0gLy8vIC9cblxuXG4gICAgICB2YXIgbWF0cml4ID0gdGhpcy5fdHJhbnNmb3JtQ2FjaGluZ0F0VGltZS52O1xuICAgICAgbWF0cml4LmNsb25lRnJvbVByb3BzKHRoaXMucHJlLnByb3BzKTtcblxuICAgICAgaWYgKHRoaXMuYXBwbGllZFRyYW5zZm9ybWF0aW9ucyA8IDEpIHtcbiAgICAgICAgdmFyIGFuY2hvciA9IHRoaXMuYS5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnRyYW5zbGF0ZSgtYW5jaG9yWzBdICogdGhpcy5hLm11bHQsIC1hbmNob3JbMV0gKiB0aGlzLmEubXVsdCwgYW5jaG9yWzJdICogdGhpcy5hLm11bHQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMikge1xuICAgICAgICB2YXIgc2NhbGUgPSB0aGlzLnMuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC5zY2FsZShzY2FsZVswXSAqIHRoaXMucy5tdWx0LCBzY2FsZVsxXSAqIHRoaXMucy5tdWx0LCBzY2FsZVsyXSAqIHRoaXMucy5tdWx0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2sgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgMykge1xuICAgICAgICB2YXIgc2tldyA9IHRoaXMuc2suZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIHZhciBza2V3QXhpcyA9IHRoaXMuc2EuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIG1hdHJpeC5za2V3RnJvbUF4aXMoLXNrZXcgKiB0aGlzLnNrLm11bHQsIHNrZXdBeGlzICogdGhpcy5zYS5tdWx0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuciAmJiB0aGlzLmFwcGxpZWRUcmFuc2Zvcm1hdGlvbnMgPCA0KSB7XG4gICAgICAgIHZhciByb3RhdGlvbiA9IHRoaXMuci5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnJvdGF0ZSgtcm90YXRpb24gKiB0aGlzLnIubXVsdCk7XG4gICAgICB9IGVsc2UgaWYgKCF0aGlzLnIgJiYgdGhpcy5hcHBsaWVkVHJhbnNmb3JtYXRpb25zIDwgNCkge1xuICAgICAgICB2YXIgcm90YXRpb25aID0gdGhpcy5yei5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgdmFyIHJvdGF0aW9uWSA9IHRoaXMucnkuZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIHZhciByb3RhdGlvblggPSB0aGlzLnJ4LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICB2YXIgb3JpZW50YXRpb24gPSB0aGlzLm9yLmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuICAgICAgICBtYXRyaXgucm90YXRlWigtcm90YXRpb25aICogdGhpcy5yei5tdWx0KS5yb3RhdGVZKHJvdGF0aW9uWSAqIHRoaXMucnkubXVsdCkucm90YXRlWChyb3RhdGlvblggKiB0aGlzLnJ4Lm11bHQpLnJvdGF0ZVooLW9yaWVudGF0aW9uWzJdICogdGhpcy5vci5tdWx0KS5yb3RhdGVZKG9yaWVudGF0aW9uWzFdICogdGhpcy5vci5tdWx0KS5yb3RhdGVYKG9yaWVudGF0aW9uWzBdICogdGhpcy5vci5tdWx0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZGF0YS5wICYmIHRoaXMuZGF0YS5wLnMpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uWCA9IHRoaXMucHguZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgIHZhciBwb3NpdGlvblkgPSB0aGlzLnB5LmdldFZhbHVlQXRUaW1lKHRpbWUpO1xuXG4gICAgICAgIGlmICh0aGlzLmRhdGEucC56KSB7XG4gICAgICAgICAgdmFyIHBvc2l0aW9uWiA9IHRoaXMucHouZ2V0VmFsdWVBdFRpbWUodGltZSk7XG4gICAgICAgICAgbWF0cml4LnRyYW5zbGF0ZShwb3NpdGlvblggKiB0aGlzLnB4Lm11bHQsIHBvc2l0aW9uWSAqIHRoaXMucHkubXVsdCwgLXBvc2l0aW9uWiAqIHRoaXMucHoubXVsdCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0cml4LnRyYW5zbGF0ZShwb3NpdGlvblggKiB0aGlzLnB4Lm11bHQsIHBvc2l0aW9uWSAqIHRoaXMucHkubXVsdCwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IHRoaXMucC5nZXRWYWx1ZUF0VGltZSh0aW1lKTtcbiAgICAgICAgbWF0cml4LnRyYW5zbGF0ZShwb3NpdGlvblswXSAqIHRoaXMucC5tdWx0LCBwb3NpdGlvblsxXSAqIHRoaXMucC5tdWx0LCAtcG9zaXRpb25bMl0gKiB0aGlzLnAubXVsdCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBtYXRyaXg7IC8vLyAvXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0VHJhbnNmb3JtU3RhdGljVmFsdWVBdFRpbWUoKSB7XG4gICAgICByZXR1cm4gdGhpcy52LmNsb25lKG5ldyBNYXRyaXgoKSk7XG4gICAgfVxuXG4gICAgdmFyIGdldFRyYW5zZm9ybVByb3BlcnR5ID0gVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5O1xuXG4gICAgVHJhbnNmb3JtUHJvcGVydHlGYWN0b3J5LmdldFRyYW5zZm9ybVByb3BlcnR5ID0gZnVuY3Rpb24gKGVsZW0sIGRhdGEsIGNvbnRhaW5lcikge1xuICAgICAgdmFyIHByb3AgPSBnZXRUcmFuc2Zvcm1Qcm9wZXJ0eShlbGVtLCBkYXRhLCBjb250YWluZXIpO1xuXG4gICAgICBpZiAocHJvcC5keW5hbWljUHJvcGVydGllcy5sZW5ndGgpIHtcbiAgICAgICAgcHJvcC5nZXRWYWx1ZUF0VGltZSA9IGdldFRyYW5zZm9ybVZhbHVlQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wLmdldFZhbHVlQXRUaW1lID0gZ2V0VHJhbnNmb3JtU3RhdGljVmFsdWVBdFRpbWUuYmluZChwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcHJvcC5zZXRHcm91cFByb3BlcnR5ID0gZXhwcmVzc2lvbkhlbHBlcnMuc2V0R3JvdXBQcm9wZXJ0eTtcbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH07XG5cbiAgICB2YXIgcHJvcGVydHlHZXRQcm9wID0gUHJvcGVydHlGYWN0b3J5LmdldFByb3A7XG5cbiAgICBQcm9wZXJ0eUZhY3RvcnkuZ2V0UHJvcCA9IGZ1bmN0aW9uIChlbGVtLCBkYXRhLCB0eXBlLCBtdWx0LCBjb250YWluZXIpIHtcbiAgICAgIHZhciBwcm9wID0gcHJvcGVydHlHZXRQcm9wKGVsZW0sIGRhdGEsIHR5cGUsIG11bHQsIGNvbnRhaW5lcik7IC8vIHByb3AuZ2V0VmVsb2NpdHlBdFRpbWUgPSBnZXRWZWxvY2l0eUF0VGltZTtcbiAgICAgIC8vIHByb3AubG9vcE91dCA9IGxvb3BPdXQ7XG4gICAgICAvLyBwcm9wLmxvb3BJbiA9IGxvb3BJbjtcblxuICAgICAgaWYgKHByb3Aua2YpIHtcbiAgICAgICAgcHJvcC5nZXRWYWx1ZUF0VGltZSA9IGV4cHJlc3Npb25IZWxwZXJzLmdldFZhbHVlQXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwcm9wLmdldFZhbHVlQXRUaW1lID0gZXhwcmVzc2lvbkhlbHBlcnMuZ2V0U3RhdGljVmFsdWVBdFRpbWUuYmluZChwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcHJvcC5zZXRHcm91cFByb3BlcnR5ID0gZXhwcmVzc2lvbkhlbHBlcnMuc2V0R3JvdXBQcm9wZXJ0eTtcbiAgICAgIHByb3AubG9vcE91dCA9IGxvb3BPdXQ7XG4gICAgICBwcm9wLmxvb3BJbiA9IGxvb3BJbjtcbiAgICAgIHByb3Auc21vb3RoID0gc21vb3RoO1xuICAgICAgcHJvcC5nZXRWZWxvY2l0eUF0VGltZSA9IGV4cHJlc3Npb25IZWxwZXJzLmdldFZlbG9jaXR5QXRUaW1lLmJpbmQocHJvcCk7XG4gICAgICBwcm9wLmdldFNwZWVkQXRUaW1lID0gZXhwcmVzc2lvbkhlbHBlcnMuZ2V0U3BlZWRBdFRpbWUuYmluZChwcm9wKTtcbiAgICAgIHByb3AubnVtS2V5cyA9IGRhdGEuYSA9PT0gMSA/IGRhdGEuay5sZW5ndGggOiAwO1xuICAgICAgcHJvcC5wcm9wZXJ0eUluZGV4ID0gZGF0YS5peDtcbiAgICAgIHZhciB2YWx1ZSA9IDA7XG5cbiAgICAgIGlmICh0eXBlICE9PSAwKSB7XG4gICAgICAgIHZhbHVlID0gY3JlYXRlVHlwZWRBcnJheSgnZmxvYXQzMicsIGRhdGEuYSA9PT0gMSA/IGRhdGEua1swXS5zLmxlbmd0aCA6IGRhdGEuay5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBwcm9wLl9jYWNoaW5nQXRUaW1lID0ge1xuICAgICAgICBsYXN0RnJhbWU6IGluaXRpYWxEZWZhdWx0RnJhbWUsXG4gICAgICAgIGxhc3RJbmRleDogMCxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9O1xuICAgICAgZXhwcmVzc2lvbkhlbHBlcnMuc2VhcmNoRXhwcmVzc2lvbnMoZWxlbSwgZGF0YSwgcHJvcCk7XG5cbiAgICAgIGlmIChwcm9wLmspIHtcbiAgICAgICAgY29udGFpbmVyLmFkZER5bmFtaWNQcm9wZXJ0eShwcm9wKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb3A7XG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGdldFNoYXBlVmFsdWVBdFRpbWUoZnJhbWVOdW0pIHtcbiAgICAgIC8vIEZvciBub3cgdGhpcyBjYWNoaW5nIG9iamVjdCBpcyBjcmVhdGVkIG9ubHkgd2hlbiBuZWVkZWQgaW5zdGVhZCBvZiBjcmVhdGluZyBpdCB3aGVuIHRoZSBzaGFwZSBpcyBpbml0aWFsaXplZC5cbiAgICAgIGlmICghdGhpcy5fY2FjaGluZ0F0VGltZSkge1xuICAgICAgICB0aGlzLl9jYWNoaW5nQXRUaW1lID0ge1xuICAgICAgICAgIHNoYXBlVmFsdWU6IHNoYXBlUG9vbC5jbG9uZSh0aGlzLnB2KSxcbiAgICAgICAgICBsYXN0SW5kZXg6IDAsXG4gICAgICAgICAgbGFzdFRpbWU6IGluaXRpYWxEZWZhdWx0RnJhbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgZnJhbWVOdW0gKj0gdGhpcy5lbGVtLmdsb2JhbERhdGEuZnJhbWVSYXRlO1xuICAgICAgZnJhbWVOdW0gLT0gdGhpcy5vZmZzZXRUaW1lO1xuXG4gICAgICBpZiAoZnJhbWVOdW0gIT09IHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdFRpbWUpIHtcbiAgICAgICAgdGhpcy5fY2FjaGluZ0F0VGltZS5sYXN0SW5kZXggPSB0aGlzLl9jYWNoaW5nQXRUaW1lLmxhc3RUaW1lIDwgZnJhbWVOdW0gPyB0aGlzLl9jYWNoaW5nLmxhc3RJbmRleCA6IDA7XG4gICAgICAgIHRoaXMuX2NhY2hpbmdBdFRpbWUubGFzdFRpbWUgPSBmcmFtZU51bTtcbiAgICAgICAgdGhpcy5pbnRlcnBvbGF0ZVNoYXBlKGZyYW1lTnVtLCB0aGlzLl9jYWNoaW5nQXRUaW1lLnNoYXBlVmFsdWUsIHRoaXMuX2NhY2hpbmdBdFRpbWUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5fY2FjaGluZ0F0VGltZS5zaGFwZVZhbHVlO1xuICAgIH1cblxuICAgIHZhciBTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbiA9IFNoYXBlUHJvcGVydHlGYWN0b3J5LmdldENvbnN0cnVjdG9yRnVuY3Rpb24oKTtcbiAgICB2YXIgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24gPSBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uKCk7XG5cbiAgICBmdW5jdGlvbiBTaGFwZUV4cHJlc3Npb25zKCkge31cblxuICAgIFNoYXBlRXhwcmVzc2lvbnMucHJvdG90eXBlID0ge1xuICAgICAgdmVydGljZXM6IGZ1bmN0aW9uIHZlcnRpY2VzKHByb3AsIHRpbWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaykge1xuICAgICAgICAgIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaGFwZVBhdGggPSB0aGlzLnY7XG5cbiAgICAgICAgaWYgKHRpbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHNoYXBlUGF0aCA9IHRoaXMuZ2V0VmFsdWVBdFRpbWUodGltZSwgMCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxlbiA9IHNoYXBlUGF0aC5fbGVuZ3RoO1xuICAgICAgICB2YXIgdmVydGljZXMgPSBzaGFwZVBhdGhbcHJvcF07XG4gICAgICAgIHZhciBwb2ludHMgPSBzaGFwZVBhdGgudjtcbiAgICAgICAgdmFyIGFyciA9IGNyZWF0ZVNpemVkQXJyYXkobGVuKTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICBpZiAocHJvcCA9PT0gJ2knIHx8IHByb3AgPT09ICdvJykge1xuICAgICAgICAgICAgYXJyW2ldID0gW3ZlcnRpY2VzW2ldWzBdIC0gcG9pbnRzW2ldWzBdLCB2ZXJ0aWNlc1tpXVsxXSAtIHBvaW50c1tpXVsxXV07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFycltpXSA9IFt2ZXJ0aWNlc1tpXVswXSwgdmVydGljZXNbaV1bMV1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9LFxuICAgICAgcG9pbnRzOiBmdW5jdGlvbiBwb2ludHModGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcygndicsIHRpbWUpO1xuICAgICAgfSxcbiAgICAgIGluVGFuZ2VudHM6IGZ1bmN0aW9uIGluVGFuZ2VudHModGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcygnaScsIHRpbWUpO1xuICAgICAgfSxcbiAgICAgIG91dFRhbmdlbnRzOiBmdW5jdGlvbiBvdXRUYW5nZW50cyh0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzKCdvJywgdGltZSk7XG4gICAgICB9LFxuICAgICAgaXNDbG9zZWQ6IGZ1bmN0aW9uIGlzQ2xvc2VkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52LmM7XG4gICAgICB9LFxuICAgICAgcG9pbnRPblBhdGg6IGZ1bmN0aW9uIHBvaW50T25QYXRoKHBlcmMsIHRpbWUpIHtcbiAgICAgICAgdmFyIHNoYXBlUGF0aCA9IHRoaXMudjtcblxuICAgICAgICBpZiAodGltZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2hhcGVQYXRoID0gdGhpcy5nZXRWYWx1ZUF0VGltZSh0aW1lLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fc2VnbWVudHNMZW5ndGgpIHtcbiAgICAgICAgICB0aGlzLl9zZWdtZW50c0xlbmd0aCA9IGJlei5nZXRTZWdtZW50c0xlbmd0aChzaGFwZVBhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlZ21lbnRzTGVuZ3RoID0gdGhpcy5fc2VnbWVudHNMZW5ndGg7XG4gICAgICAgIHZhciBsZW5ndGhzID0gc2VnbWVudHNMZW5ndGgubGVuZ3RocztcbiAgICAgICAgdmFyIGxlbmd0aFBvcyA9IHNlZ21lbnRzTGVuZ3RoLnRvdGFsTGVuZ3RoICogcGVyYztcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gbGVuZ3Rocy5sZW5ndGg7XG4gICAgICAgIHZhciBhY2N1bXVsYXRlZExlbmd0aCA9IDA7XG4gICAgICAgIHZhciBwdDtcblxuICAgICAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgICAgIGlmIChhY2N1bXVsYXRlZExlbmd0aCArIGxlbmd0aHNbaV0uYWRkZWRMZW5ndGggPiBsZW5ndGhQb3MpIHtcbiAgICAgICAgICAgIHZhciBpbml0SW5kZXggPSBpO1xuICAgICAgICAgICAgdmFyIGVuZEluZGV4ID0gc2hhcGVQYXRoLmMgJiYgaSA9PT0gbGVuIC0gMSA/IDAgOiBpICsgMTtcbiAgICAgICAgICAgIHZhciBzZWdtZW50UGVyYyA9IChsZW5ndGhQb3MgLSBhY2N1bXVsYXRlZExlbmd0aCkgLyBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoO1xuICAgICAgICAgICAgcHQgPSBiZXouZ2V0UG9pbnRJblNlZ21lbnQoc2hhcGVQYXRoLnZbaW5pdEluZGV4XSwgc2hhcGVQYXRoLnZbZW5kSW5kZXhdLCBzaGFwZVBhdGgub1tpbml0SW5kZXhdLCBzaGFwZVBhdGguaVtlbmRJbmRleF0sIHNlZ21lbnRQZXJjLCBsZW5ndGhzW2ldKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhY2N1bXVsYXRlZExlbmd0aCArPSBsZW5ndGhzW2ldLmFkZGVkTGVuZ3RoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHQpIHtcbiAgICAgICAgICBwdCA9IHNoYXBlUGF0aC5jID8gW3NoYXBlUGF0aC52WzBdWzBdLCBzaGFwZVBhdGgudlswXVsxXV0gOiBbc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGggLSAxXVswXSwgc2hhcGVQYXRoLnZbc2hhcGVQYXRoLl9sZW5ndGggLSAxXVsxXV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHQ7XG4gICAgICB9LFxuICAgICAgdmVjdG9yT25QYXRoOiBmdW5jdGlvbiB2ZWN0b3JPblBhdGgocGVyYywgdGltZSwgdmVjdG9yVHlwZSkge1xuICAgICAgICAvLyBwZXJjIGRvZXNuJ3QgdXNlIHRyaXBsZSBlcXVhbGl0eSBiZWNhdXNlIGl0IGNhbiBiZSBhIE51bWJlciBvYmplY3QgYXMgd2VsbCBhcyBhIHByaW1pdGl2ZS5cbiAgICAgICAgaWYgKHBlcmMgPT0gMSkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgICAgcGVyYyA9IHRoaXMudi5jO1xuICAgICAgICB9IGVsc2UgaWYgKHBlcmMgPT0gMCkge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgICAgICAgcGVyYyA9IDAuOTk5O1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHB0MSA9IHRoaXMucG9pbnRPblBhdGgocGVyYywgdGltZSk7XG4gICAgICAgIHZhciBwdDIgPSB0aGlzLnBvaW50T25QYXRoKHBlcmMgKyAwLjAwMSwgdGltZSk7XG4gICAgICAgIHZhciB4TGVuZ3RoID0gcHQyWzBdIC0gcHQxWzBdO1xuICAgICAgICB2YXIgeUxlbmd0aCA9IHB0MlsxXSAtIHB0MVsxXTtcbiAgICAgICAgdmFyIG1hZ25pdHVkZSA9IE1hdGguc3FydChNYXRoLnBvdyh4TGVuZ3RoLCAyKSArIE1hdGgucG93KHlMZW5ndGgsIDIpKTtcblxuICAgICAgICBpZiAobWFnbml0dWRlID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bml0VmVjdG9yID0gdmVjdG9yVHlwZSA9PT0gJ3RhbmdlbnQnID8gW3hMZW5ndGggLyBtYWduaXR1ZGUsIHlMZW5ndGggLyBtYWduaXR1ZGVdIDogWy15TGVuZ3RoIC8gbWFnbml0dWRlLCB4TGVuZ3RoIC8gbWFnbml0dWRlXTtcbiAgICAgICAgcmV0dXJuIHVuaXRWZWN0b3I7XG4gICAgICB9LFxuICAgICAgdGFuZ2VudE9uUGF0aDogZnVuY3Rpb24gdGFuZ2VudE9uUGF0aChwZXJjLCB0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZlY3Rvck9uUGF0aChwZXJjLCB0aW1lLCAndGFuZ2VudCcpO1xuICAgICAgfSxcbiAgICAgIG5vcm1hbE9uUGF0aDogZnVuY3Rpb24gbm9ybWFsT25QYXRoKHBlcmMsIHRpbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmVjdG9yT25QYXRoKHBlcmMsIHRpbWUsICdub3JtYWwnKTtcbiAgICAgIH0sXG4gICAgICBzZXRHcm91cFByb3BlcnR5OiBleHByZXNzaW9uSGVscGVycy5zZXRHcm91cFByb3BlcnR5LFxuICAgICAgZ2V0VmFsdWVBdFRpbWU6IGV4cHJlc3Npb25IZWxwZXJzLmdldFN0YXRpY1ZhbHVlQXRUaW1lXG4gICAgfTtcbiAgICBleHRlbmRQcm90b3R5cGUoW1NoYXBlRXhwcmVzc2lvbnNdLCBTaGFwZVByb3BlcnR5Q29uc3RydWN0b3JGdW5jdGlvbik7XG4gICAgZXh0ZW5kUHJvdG90eXBlKFtTaGFwZUV4cHJlc3Npb25zXSwgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24pO1xuICAgIEtleWZyYW1lZFNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uLnByb3RvdHlwZS5nZXRWYWx1ZUF0VGltZSA9IGdldFNoYXBlVmFsdWVBdFRpbWU7XG4gICAgS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24ucHJvdG90eXBlLmluaXRpYXRlRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25NYW5hZ2VyLmluaXRpYXRlRXhwcmVzc2lvbjtcbiAgICB2YXIgcHJvcGVydHlHZXRTaGFwZVByb3AgPSBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRTaGFwZVByb3A7XG5cbiAgICBTaGFwZVByb3BlcnR5RmFjdG9yeS5nZXRTaGFwZVByb3AgPSBmdW5jdGlvbiAoZWxlbSwgZGF0YSwgdHlwZSwgYXJyLCB0cmltcykge1xuICAgICAgdmFyIHByb3AgPSBwcm9wZXJ0eUdldFNoYXBlUHJvcChlbGVtLCBkYXRhLCB0eXBlLCBhcnIsIHRyaW1zKTtcbiAgICAgIHByb3AucHJvcGVydHlJbmRleCA9IGRhdGEuaXg7XG4gICAgICBwcm9wLmxvY2sgPSBmYWxzZTtcblxuICAgICAgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgICAgZXhwcmVzc2lvbkhlbHBlcnMuc2VhcmNoRXhwcmVzc2lvbnMoZWxlbSwgZGF0YS5wdCwgcHJvcCk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGUgPT09IDQpIHtcbiAgICAgICAgZXhwcmVzc2lvbkhlbHBlcnMuc2VhcmNoRXhwcmVzc2lvbnMoZWxlbSwgZGF0YS5rcywgcHJvcCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChwcm9wLmspIHtcbiAgICAgICAgZWxlbS5hZGREeW5hbWljUHJvcGVydHkocHJvcCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcm9wO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplJDEoKSB7XG4gICAgYWRkUHJvcGVydHlEZWNvcmF0b3IoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZERlY29yYXRvcigpIHtcbiAgICBmdW5jdGlvbiBzZWFyY2hFeHByZXNzaW9ucygpIHtcbiAgICAgIGlmICh0aGlzLmRhdGEuZC54KSB7XG4gICAgICAgIHRoaXMuY2FsY3VsYXRlRXhwcmVzc2lvbiA9IEV4cHJlc3Npb25NYW5hZ2VyLmluaXRpYXRlRXhwcmVzc2lvbi5iaW5kKHRoaXMpKHRoaXMuZWxlbSwgdGhpcy5kYXRhLmQsIHRoaXMpO1xuICAgICAgICB0aGlzLmFkZEVmZmVjdCh0aGlzLmdldEV4cHJlc3Npb25WYWx1ZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIFRleHRQcm9wZXJ0eS5wcm90b3R5cGUuZ2V0RXhwcmVzc2lvblZhbHVlID0gZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSwgdGV4dCkge1xuICAgICAgdmFyIG5ld1ZhbHVlID0gdGhpcy5jYWxjdWxhdGVFeHByZXNzaW9uKHRleHQpO1xuXG4gICAgICBpZiAoY3VycmVudFZhbHVlLnQgIT09IG5ld1ZhbHVlKSB7XG4gICAgICAgIHZhciBuZXdEYXRhID0ge307XG4gICAgICAgIHRoaXMuY29weURhdGEobmV3RGF0YSwgY3VycmVudFZhbHVlKTtcbiAgICAgICAgbmV3RGF0YS50ID0gbmV3VmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgbmV3RGF0YS5fX2NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgIH07XG5cbiAgICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaFByb3BlcnR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGlzS2V5ZnJhbWVkID0gdGhpcy5zZWFyY2hLZXlmcmFtZXMoKTtcbiAgICAgIHZhciBoYXNFeHByZXNzaW9ucyA9IHRoaXMuc2VhcmNoRXhwcmVzc2lvbnMoKTtcbiAgICAgIHRoaXMua2YgPSBpc0tleWZyYW1lZCB8fCBoYXNFeHByZXNzaW9ucztcbiAgICAgIHJldHVybiB0aGlzLmtmO1xuICAgIH07XG5cbiAgICBUZXh0UHJvcGVydHkucHJvdG90eXBlLnNlYXJjaEV4cHJlc3Npb25zID0gc2VhcmNoRXhwcmVzc2lvbnM7XG4gIH1cblxuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIGFkZERlY29yYXRvcigpO1xuICB9XG5cbiAgZnVuY3Rpb24gU1ZHQ29tcG9zYWJsZUVmZmVjdCgpIHt9XG5cbiAgU1ZHQ29tcG9zYWJsZUVmZmVjdC5wcm90b3R5cGUgPSB7XG4gICAgY3JlYXRlTWVyZ2VOb2RlOiBmdW5jdGlvbiBjcmVhdGVNZXJnZU5vZGUocmVzdWx0SWQsIGlucykge1xuICAgICAgdmFyIGZlTWVyZ2UgPSBjcmVhdGVOUygnZmVNZXJnZScpO1xuICAgICAgZmVNZXJnZS5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIHJlc3VsdElkKTtcbiAgICAgIHZhciBmZU1lcmdlTm9kZTtcbiAgICAgIHZhciBpO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgaW5zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGZlTWVyZ2VOb2RlID0gY3JlYXRlTlMoJ2ZlTWVyZ2VOb2RlJyk7XG4gICAgICAgIGZlTWVyZ2VOb2RlLnNldEF0dHJpYnV0ZSgnaW4nLCBpbnNbaV0pO1xuICAgICAgICBmZU1lcmdlLmFwcGVuZENoaWxkKGZlTWVyZ2VOb2RlKTtcbiAgICAgICAgZmVNZXJnZS5hcHBlbmRDaGlsZChmZU1lcmdlTm9kZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmZU1lcmdlO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGluZWFyRmlsdGVyVmFsdWUgPSAnMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMCAwIDAnO1xuXG4gIGZ1bmN0aW9uIFNWR1RpbnRGaWx0ZXIoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCwgc291cmNlKSB7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdsaW5lYXJSR0InKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgbGluZWFyRmlsdGVyVmFsdWUgKyAnIDEgMCcpO1xuICAgIHRoaXMubGluZWFyRmlsdGVyID0gZmVDb2xvck1hdHJpeDtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX3RpbnRfMScpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTtcbiAgICBmZUNvbG9yTWF0cml4ID0gY3JlYXRlTlMoJ2ZlQ29sb3JNYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndHlwZScsICdtYXRyaXgnKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCAwIDAgMCAwIDEgMCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdyZXN1bHQnLCBpZCArICdfdGludF8yJyk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29sb3JNYXRyaXgpO1xuICAgIHRoaXMubWF0cml4RmlsdGVyID0gZmVDb2xvck1hdHJpeDtcbiAgICB2YXIgZmVNZXJnZSA9IHRoaXMuY3JlYXRlTWVyZ2VOb2RlKGlkLCBbc291cmNlLCBpZCArICdfdGludF8xJywgaWQgKyAnX3RpbnRfMiddKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVNZXJnZSk7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR0NvbXBvc2FibGVFZmZlY3RdLCBTVkdUaW50RmlsdGVyKTtcblxuICBTVkdUaW50RmlsdGVyLnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgdmFyIGNvbG9yQmxhY2sgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O1xuICAgICAgdmFyIGNvbG9yV2hpdGUgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52O1xuICAgICAgdmFyIG9wYWNpdHkgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC52IC8gMTAwO1xuICAgICAgdGhpcy5saW5lYXJGaWx0ZXIuc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCBsaW5lYXJGaWx0ZXJWYWx1ZSArICcgJyArIG9wYWNpdHkgKyAnIDAnKTtcbiAgICAgIHRoaXMubWF0cml4RmlsdGVyLnNldEF0dHJpYnV0ZSgndmFsdWVzJywgY29sb3JXaGl0ZVswXSAtIGNvbG9yQmxhY2tbMF0gKyAnIDAgMCAwICcgKyBjb2xvckJsYWNrWzBdICsgJyAnICsgKGNvbG9yV2hpdGVbMV0gLSBjb2xvckJsYWNrWzFdKSArICcgMCAwIDAgJyArIGNvbG9yQmxhY2tbMV0gKyAnICcgKyAoY29sb3JXaGl0ZVsyXSAtIGNvbG9yQmxhY2tbMl0pICsgJyAwIDAgMCAnICsgY29sb3JCbGFja1syXSArICcgMCAwIDAgMSAwJyk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0ZpbGxGaWx0ZXIoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCkge1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlQ29sb3JNYXRyaXggPSBjcmVhdGVOUygnZmVDb2xvck1hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd0eXBlJywgJ21hdHJpeCcpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgIGZlQ29sb3JNYXRyaXguc2V0QXR0cmlidXRlKCd2YWx1ZXMnLCAnMSAwIDAgMCAwIDAgMSAwIDAgMCAwIDAgMSAwIDAgMCAwIDAgMSAwJyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVDb2xvck1hdHJpeCk7XG4gICAgdGhpcy5tYXRyaXhGaWx0ZXIgPSBmZUNvbG9yTWF0cml4O1xuICB9XG5cbiAgU1ZHRmlsbEZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIHZhciBjb2xvciA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnY7XG4gICAgICB2YXIgb3BhY2l0eSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s2XS5wLnY7XG4gICAgICB0aGlzLm1hdHJpeEZpbHRlci5zZXRBdHRyaWJ1dGUoJ3ZhbHVlcycsICcwIDAgMCAwICcgKyBjb2xvclswXSArICcgMCAwIDAgMCAnICsgY29sb3JbMV0gKyAnIDAgMCAwIDAgJyArIGNvbG9yWzJdICsgJyAwIDAgMCAnICsgb3BhY2l0eSArICcgMCcpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdTdHJva2VFZmZlY3QoZmlsLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtKSB7XG4gICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICB0aGlzLnBhdGhzID0gW107XG4gIH1cblxuICBTVkdTdHJva2VFZmZlY3QucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGVsZW1DaGlsZHJlbiA9IHRoaXMuZWxlbS5sYXllckVsZW1lbnQuY2hpbGRyZW4gfHwgdGhpcy5lbGVtLmxheWVyRWxlbWVudC5jaGlsZE5vZGVzO1xuICAgIHZhciBwYXRoO1xuICAgIHZhciBncm91cFBhdGg7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbjtcblxuICAgIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMV0ucC52ID09PSAxKSB7XG4gICAgICBsZW4gPSB0aGlzLmVsZW0ubWFza01hbmFnZXIubWFza3NQcm9wZXJ0aWVzLmxlbmd0aDtcbiAgICAgIGkgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICBpID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzBdLnAudiAtIDE7XG4gICAgICBsZW4gPSBpICsgMTtcbiAgICB9XG5cbiAgICBncm91cFBhdGggPSBjcmVhdGVOUygnZycpO1xuICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnbm9uZScpO1xuICAgIGdyb3VwUGF0aC5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1saW5lY2FwJywgJ3JvdW5kJyk7XG4gICAgZ3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hvZmZzZXQnLCAxKTtcblxuICAgIGZvciAoaTsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBwYXRoID0gY3JlYXRlTlMoJ3BhdGgnKTtcbiAgICAgIGdyb3VwUGF0aC5hcHBlbmRDaGlsZChwYXRoKTtcbiAgICAgIHRoaXMucGF0aHMucHVzaCh7XG4gICAgICAgIHA6IHBhdGgsXG4gICAgICAgIG06IGlcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudiA9PT0gMykge1xuICAgICAgdmFyIG1hc2sgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgdmFyIGlkID0gY3JlYXRlRWxlbWVudElEKCk7XG4gICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7XG4gICAgICBtYXNrLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgJ2FscGhhJyk7XG4gICAgICBtYXNrLmFwcGVuZENoaWxkKGdyb3VwUGF0aCk7XG4gICAgICB0aGlzLmVsZW0uZ2xvYmFsRGF0YS5kZWZzLmFwcGVuZENoaWxkKG1hc2spO1xuICAgICAgdmFyIGcgPSBjcmVhdGVOUygnZycpO1xuICAgICAgZy5zZXRBdHRyaWJ1dGUoJ21hc2snLCAndXJsKCcgKyBnZXRMb2NhdGlvbkhyZWYoKSArICcjJyArIGlkICsgJyknKTtcblxuICAgICAgd2hpbGUgKGVsZW1DaGlsZHJlblswXSkge1xuICAgICAgICBnLmFwcGVuZENoaWxkKGVsZW1DaGlsZHJlblswXSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZWxlbS5sYXllckVsZW1lbnQuYXBwZW5kQ2hpbGQoZyk7XG4gICAgICB0aGlzLm1hc2tlciA9IG1hc2s7XG4gICAgICBncm91cFBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnI2ZmZicpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDEgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzEwXS5wLnYgPT09IDIpIHtcbiAgICAgIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudiA9PT0gMikge1xuICAgICAgICBlbGVtQ2hpbGRyZW4gPSB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmNoaWxkcmVuIHx8IHRoaXMuZWxlbS5sYXllckVsZW1lbnQuY2hpbGROb2RlcztcblxuICAgICAgICB3aGlsZSAoZWxlbUNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMuZWxlbS5sYXllckVsZW1lbnQucmVtb3ZlQ2hpbGQoZWxlbUNoaWxkcmVuWzBdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LmFwcGVuZENoaWxkKGdyb3VwUGF0aCk7XG4gICAgICB0aGlzLmVsZW0ubGF5ZXJFbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnbWFzaycpO1xuICAgICAgZ3JvdXBQYXRoLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJyNmZmYnKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICB0aGlzLnBhdGhNYXNrZXIgPSBncm91cFBhdGg7XG4gIH07XG5cbiAgU1ZHU3Ryb2tlRWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmICghdGhpcy5pbml0aWFsaXplZCkge1xuICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgfVxuXG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbiA9IHRoaXMucGF0aHMubGVuZ3RoO1xuICAgIHZhciBtYXNrO1xuICAgIHZhciBwYXRoO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICBpZiAodGhpcy5wYXRoc1tpXS5tICE9PSAtMSkge1xuICAgICAgICBtYXNrID0gdGhpcy5lbGVtLm1hc2tNYW5hZ2VyLnZpZXdEYXRhW3RoaXMucGF0aHNbaV0ubV07XG4gICAgICAgIHBhdGggPSB0aGlzLnBhdGhzW2ldLnA7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmIHx8IG1hc2sucHJvcC5fbWRmKSB7XG4gICAgICAgICAgcGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBtYXNrLmxhc3RQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC5fbWRmIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLl9tZGYgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzddLnAuX21kZiB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOF0ucC5fbWRmIHx8IG1hc2sucHJvcC5fbWRmKSB7XG4gICAgICAgICAgdmFyIGRhc2hhcnJheVZhbHVlO1xuXG4gICAgICAgICAgaWYgKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLnYgIT09IDAgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzhdLnAudiAhPT0gMTAwKSB7XG4gICAgICAgICAgICB2YXIgcyA9IE1hdGgubWluKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s3XS5wLnYsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s4XS5wLnYpICogMC4wMTtcbiAgICAgICAgICAgIHZhciBlID0gTWF0aC5tYXgodGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzddLnAudiwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzhdLnAudikgKiAwLjAxO1xuICAgICAgICAgICAgdmFyIGwgPSBwYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG4gICAgICAgICAgICBkYXNoYXJyYXlWYWx1ZSA9ICcwIDAgMCAnICsgbCAqIHMgKyAnICc7XG4gICAgICAgICAgICB2YXIgbGluZUxlbmd0aCA9IGwgKiAoZSAtIHMpO1xuICAgICAgICAgICAgdmFyIHNlZ21lbnQgPSAxICsgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzRdLnAudiAqIDIgKiB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbOV0ucC52ICogMC4wMTtcbiAgICAgICAgICAgIHZhciB1bml0cyA9IE1hdGguZmxvb3IobGluZUxlbmd0aCAvIHNlZ21lbnQpO1xuICAgICAgICAgICAgdmFyIGo7XG5cbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB1bml0czsgaiArPSAxKSB7XG4gICAgICAgICAgICAgIGRhc2hhcnJheVZhbHVlICs9ICcxICcgKyB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52ICogMiAqIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s5XS5wLnYgKiAwLjAxICsgJyAnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXNoYXJyYXlWYWx1ZSArPSAnMCAnICsgbCAqIDEwICsgJyAwIDAnO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkYXNoYXJyYXlWYWx1ZSA9ICcxICcgKyB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbNF0ucC52ICogMiAqIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s5XS5wLnYgKiAwLjAxO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGguc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgZGFzaGFycmF5VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLl9tZGYpIHtcbiAgICAgIHRoaXMucGF0aE1hc2tlci5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYgKiAyKTtcbiAgICB9XG5cbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzZdLnAuX21kZikge1xuICAgICAgdGhpcy5wYXRoTWFza2VyLnNldEF0dHJpYnV0ZSgnb3BhY2l0eScsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s2XS5wLnYpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudiA9PT0gMSB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMTBdLnAudiA9PT0gMikge1xuICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLl9tZGYpIHtcbiAgICAgICAgdmFyIGNvbG9yID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzNdLnAudjtcbiAgICAgICAgdGhpcy5wYXRoTWFza2VyLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ3JnYignICsgYm1GbG9vcihjb2xvclswXSAqIDI1NSkgKyAnLCcgKyBibUZsb29yKGNvbG9yWzFdICogMjU1KSArICcsJyArIGJtRmxvb3IoY29sb3JbMl0gKiAyNTUpICsgJyknKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHVHJpdG9uZUZpbHRlcihmaWx0ZXIsIGZpbHRlck1hbmFnZXIsIGVsZW0sIGlkKSB7XG4gICAgdGhpcy5maWx0ZXJNYW5hZ2VyID0gZmlsdGVyTWFuYWdlcjtcbiAgICB2YXIgZmVDb2xvck1hdHJpeCA9IGNyZWF0ZU5TKCdmZUNvbG9yTWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAnbWF0cml4Jyk7XG4gICAgZmVDb2xvck1hdHJpeC5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdsaW5lYXJSR0InKTtcbiAgICBmZUNvbG9yTWF0cml4LnNldEF0dHJpYnV0ZSgndmFsdWVzJywgJzAuMzMzMyAwLjMzMzMgMC4zMzMzIDAgMCAwLjMzMzMgMC4zMzMzIDAuMzMzMyAwIDAgMC4zMzMzIDAuMzMzMyAwLjMzMzMgMCAwIDAgMCAwIDEgMCcpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbG9yTWF0cml4KTtcbiAgICB2YXIgZmVDb21wb25lbnRUcmFuc2ZlciA9IGNyZWF0ZU5TKCdmZUNvbXBvbmVudFRyYW5zZmVyJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5zZXRBdHRyaWJ1dGUoJ2NvbG9yLWludGVycG9sYXRpb24tZmlsdGVycycsICdzUkdCJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkKTtcbiAgICB0aGlzLm1hdHJpeEZpbHRlciA9IGZlQ29tcG9uZW50VHJhbnNmZXI7XG4gICAgdmFyIGZlRnVuY1IgPSBjcmVhdGVOUygnZmVGdW5jUicpO1xuICAgIGZlRnVuY1Iuc2V0QXR0cmlidXRlKCd0eXBlJywgJ3RhYmxlJyk7XG4gICAgZmVDb21wb25lbnRUcmFuc2Zlci5hcHBlbmRDaGlsZChmZUZ1bmNSKTtcbiAgICB0aGlzLmZlRnVuY1IgPSBmZUZ1bmNSO1xuICAgIHZhciBmZUZ1bmNHID0gY3JlYXRlTlMoJ2ZlRnVuY0cnKTtcbiAgICBmZUZ1bmNHLnNldEF0dHJpYnV0ZSgndHlwZScsICd0YWJsZScpO1xuICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuYXBwZW5kQ2hpbGQoZmVGdW5jRyk7XG4gICAgdGhpcy5mZUZ1bmNHID0gZmVGdW5jRztcbiAgICB2YXIgZmVGdW5jQiA9IGNyZWF0ZU5TKCdmZUZ1bmNCJyk7XG4gICAgZmVGdW5jQi5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGFibGUnKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLmFwcGVuZENoaWxkKGZlRnVuY0IpO1xuICAgIHRoaXMuZmVGdW5jQiA9IGZlRnVuY0I7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9uZW50VHJhbnNmZXIpO1xuICB9XG5cbiAgU1ZHVHJpdG9uZUZpbHRlci5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoZm9yY2VSZW5kZXIpIHtcbiAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLl9tZGYpIHtcbiAgICAgIHZhciBjb2xvcjEgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O1xuICAgICAgdmFyIGNvbG9yMiA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1sxXS5wLnY7XG4gICAgICB2YXIgY29sb3IzID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzJdLnAudjtcbiAgICAgIHZhciB0YWJsZVIgPSBjb2xvcjNbMF0gKyAnICcgKyBjb2xvcjJbMF0gKyAnICcgKyBjb2xvcjFbMF07XG4gICAgICB2YXIgdGFibGVHID0gY29sb3IzWzFdICsgJyAnICsgY29sb3IyWzFdICsgJyAnICsgY29sb3IxWzFdO1xuICAgICAgdmFyIHRhYmxlQiA9IGNvbG9yM1syXSArICcgJyArIGNvbG9yMlsyXSArICcgJyArIGNvbG9yMVsyXTtcbiAgICAgIHRoaXMuZmVGdW5jUi5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdGFibGVSKTtcbiAgICAgIHRoaXMuZmVGdW5jRy5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdGFibGVHKTtcbiAgICAgIHRoaXMuZmVGdW5jQi5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdGFibGVCKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHUHJvTGV2ZWxzRmlsdGVyKGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQpIHtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBlZmZlY3RFbGVtZW50cyA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50cztcbiAgICB2YXIgZmVDb21wb25lbnRUcmFuc2ZlciA9IGNyZWF0ZU5TKCdmZUNvbXBvbmVudFRyYW5zZmVyJyk7IC8vIFJlZFxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzEwXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTBdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1sxMV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzExXS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMTJdLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxMl0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzEzXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMTNdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1sxNF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzE0XS5wLnYgIT09IDEpIHtcbiAgICAgIHRoaXMuZmVGdW5jUiA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNSJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfSAvLyBHcmVlblxuXG5cbiAgICBpZiAoZWZmZWN0RWxlbWVudHNbMTddLnAuayB8fCBlZmZlY3RFbGVtZW50c1sxN10ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzE4XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMThdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1sxOV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzE5XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMjBdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syMF0ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzIxXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjFdLnAudiAhPT0gMSkge1xuICAgICAgdGhpcy5mZUZ1bmNHID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0cnLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICB9IC8vIEJsdWVcblxuXG4gICAgaWYgKGVmZmVjdEVsZW1lbnRzWzI0XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjRdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1syNV0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI1XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMjZdLnAuayB8fCBlZmZlY3RFbGVtZW50c1syNl0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzI3XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMjddLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1syOF0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzI4XS5wLnYgIT09IDEpIHtcbiAgICAgIHRoaXMuZmVGdW5jQiA9IHRoaXMuY3JlYXRlRmVGdW5jKCdmZUZ1bmNCJywgZmVDb21wb25lbnRUcmFuc2Zlcik7XG4gICAgfSAvLyBBbHBoYVxuXG5cbiAgICBpZiAoZWZmZWN0RWxlbWVudHNbMzFdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szMV0ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzMyXS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzJdLnAudiAhPT0gMSB8fCBlZmZlY3RFbGVtZW50c1szM10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzMzXS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbMzRdLnAuayB8fCBlZmZlY3RFbGVtZW50c1szNF0ucC52ICE9PSAwIHx8IGVmZmVjdEVsZW1lbnRzWzM1XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbMzVdLnAudiAhPT0gMSkge1xuICAgICAgdGhpcy5mZUZ1bmNBID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0EnLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICB9IC8vIFJHQlxuXG5cbiAgICBpZiAodGhpcy5mZUZ1bmNSIHx8IHRoaXMuZmVGdW5jRyB8fCB0aGlzLmZlRnVuY0IgfHwgdGhpcy5mZUZ1bmNBKSB7XG4gICAgICBmZUNvbXBvbmVudFRyYW5zZmVyLnNldEF0dHJpYnV0ZSgnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ3NSR0InKTtcbiAgICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICB9XG5cbiAgICBpZiAoZWZmZWN0RWxlbWVudHNbM10ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzNdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1s0XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbNF0ucC52ICE9PSAxIHx8IGVmZmVjdEVsZW1lbnRzWzVdLnAuayB8fCBlZmZlY3RFbGVtZW50c1s1XS5wLnYgIT09IDEgfHwgZWZmZWN0RWxlbWVudHNbNl0ucC5rIHx8IGVmZmVjdEVsZW1lbnRzWzZdLnAudiAhPT0gMCB8fCBlZmZlY3RFbGVtZW50c1s3XS5wLmsgfHwgZWZmZWN0RWxlbWVudHNbN10ucC52ICE9PSAxKSB7XG4gICAgICBmZUNvbXBvbmVudFRyYW5zZmVyID0gY3JlYXRlTlMoJ2ZlQ29tcG9uZW50VHJhbnNmZXInKTtcbiAgICAgIGZlQ29tcG9uZW50VHJhbnNmZXIuc2V0QXR0cmlidXRlKCdjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMnLCAnc1JHQicpO1xuICAgICAgZmVDb21wb25lbnRUcmFuc2Zlci5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkKTtcbiAgICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICAgIHRoaXMuZmVGdW5jUkNvbXBvc2VkID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY1InLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICAgIHRoaXMuZmVGdW5jR0NvbXBvc2VkID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0cnLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICAgIHRoaXMuZmVGdW5jQkNvbXBvc2VkID0gdGhpcy5jcmVhdGVGZUZ1bmMoJ2ZlRnVuY0InLCBmZUNvbXBvbmVudFRyYW5zZmVyKTtcbiAgICB9XG4gIH1cblxuICBTVkdQcm9MZXZlbHNGaWx0ZXIucHJvdG90eXBlLmNyZWF0ZUZlRnVuYyA9IGZ1bmN0aW9uICh0eXBlLCBmZUNvbXBvbmVudFRyYW5zZmVyKSB7XG4gICAgdmFyIGZlRnVuYyA9IGNyZWF0ZU5TKHR5cGUpO1xuICAgIGZlRnVuYy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGFibGUnKTtcbiAgICBmZUNvbXBvbmVudFRyYW5zZmVyLmFwcGVuZENoaWxkKGZlRnVuYyk7XG4gICAgcmV0dXJuIGZlRnVuYztcbiAgfTtcblxuICBTVkdQcm9MZXZlbHNGaWx0ZXIucHJvdG90eXBlLmdldFRhYmxlVmFsdWUgPSBmdW5jdGlvbiAoaW5wdXRCbGFjaywgaW5wdXRXaGl0ZSwgZ2FtbWEsIG91dHB1dEJsYWNrLCBvdXRwdXRXaGl0ZSkge1xuICAgIHZhciBjbnQgPSAwO1xuICAgIHZhciBzZWdtZW50cyA9IDI1NjtcbiAgICB2YXIgcGVyYztcbiAgICB2YXIgbWluID0gTWF0aC5taW4oaW5wdXRCbGFjaywgaW5wdXRXaGl0ZSk7XG4gICAgdmFyIG1heCA9IE1hdGgubWF4KGlucHV0QmxhY2ssIGlucHV0V2hpdGUpO1xuICAgIHZhciB0YWJsZSA9IEFycmF5LmNhbGwobnVsbCwge1xuICAgICAgbGVuZ3RoOiBzZWdtZW50c1xuICAgIH0pO1xuICAgIHZhciBjb2xvclZhbHVlO1xuICAgIHZhciBwb3MgPSAwO1xuICAgIHZhciBvdXRwdXREZWx0YSA9IG91dHB1dFdoaXRlIC0gb3V0cHV0QmxhY2s7XG4gICAgdmFyIGlucHV0RGVsdGEgPSBpbnB1dFdoaXRlIC0gaW5wdXRCbGFjaztcblxuICAgIHdoaWxlIChjbnQgPD0gMjU2KSB7XG4gICAgICBwZXJjID0gY250IC8gMjU2O1xuXG4gICAgICBpZiAocGVyYyA8PSBtaW4pIHtcbiAgICAgICAgY29sb3JWYWx1ZSA9IGlucHV0RGVsdGEgPCAwID8gb3V0cHV0V2hpdGUgOiBvdXRwdXRCbGFjaztcbiAgICAgIH0gZWxzZSBpZiAocGVyYyA+PSBtYXgpIHtcbiAgICAgICAgY29sb3JWYWx1ZSA9IGlucHV0RGVsdGEgPCAwID8gb3V0cHV0QmxhY2sgOiBvdXRwdXRXaGl0ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbG9yVmFsdWUgPSBvdXRwdXRCbGFjayArIG91dHB1dERlbHRhICogTWF0aC5wb3coKHBlcmMgLSBpbnB1dEJsYWNrKSAvIGlucHV0RGVsdGEsIDEgLyBnYW1tYSk7XG4gICAgICB9XG5cbiAgICAgIHRhYmxlW3Bvc10gPSBjb2xvclZhbHVlO1xuICAgICAgcG9zICs9IDE7XG4gICAgICBjbnQgKz0gMjU2IC8gKHNlZ21lbnRzIC0gMSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhYmxlLmpvaW4oJyAnKTtcbiAgfTtcblxuICBTVkdQcm9MZXZlbHNGaWx0ZXIucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlUmVuZGVyKSB7XG4gICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgdmFsO1xuICAgICAgdmFyIGVmZmVjdEVsZW1lbnRzID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzO1xuXG4gICAgICBpZiAodGhpcy5mZUZ1bmNSQ29tcG9zZWQgJiYgKGZvcmNlUmVuZGVyIHx8IGVmZmVjdEVsZW1lbnRzWzNdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1s0XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbNV0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzZdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1s3XS5wLl9tZGYpKSB7XG4gICAgICAgIHZhbCA9IHRoaXMuZ2V0VGFibGVWYWx1ZShlZmZlY3RFbGVtZW50c1szXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzRdLnAudiwgZWZmZWN0RWxlbWVudHNbNV0ucC52LCBlZmZlY3RFbGVtZW50c1s2XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzddLnAudik7XG4gICAgICAgIHRoaXMuZmVGdW5jUkNvbXBvc2VkLnNldEF0dHJpYnV0ZSgndGFibGVWYWx1ZXMnLCB2YWwpO1xuICAgICAgICB0aGlzLmZlRnVuY0dDb21wb3NlZC5zZXRBdHRyaWJ1dGUoJ3RhYmxlVmFsdWVzJywgdmFsKTtcbiAgICAgICAgdGhpcy5mZUZ1bmNCQ29tcG9zZWQuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZlRnVuY1IgJiYgKGZvcmNlUmVuZGVyIHx8IGVmZmVjdEVsZW1lbnRzWzEwXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTFdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxMl0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzEzXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMTRdLnAuX21kZikpIHtcbiAgICAgICAgdmFsID0gdGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzEwXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzExXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzEyXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzEzXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzE0XS5wLnYpO1xuICAgICAgICB0aGlzLmZlRnVuY1Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZlRnVuY0cgJiYgKGZvcmNlUmVuZGVyIHx8IGVmZmVjdEVsZW1lbnRzWzE3XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMThdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1sxOV0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzIwXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjFdLnAuX21kZikpIHtcbiAgICAgICAgdmFsID0gdGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzE3XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzE4XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzE5XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzIwXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzIxXS5wLnYpO1xuICAgICAgICB0aGlzLmZlRnVuY0cuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZlRnVuY0IgJiYgKGZvcmNlUmVuZGVyIHx8IGVmZmVjdEVsZW1lbnRzWzI0XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjVdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1syNl0ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzI3XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMjhdLnAuX21kZikpIHtcbiAgICAgICAgdmFsID0gdGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzI0XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzI1XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzI2XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzI3XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzI4XS5wLnYpO1xuICAgICAgICB0aGlzLmZlRnVuY0Iuc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmZlRnVuY0EgJiYgKGZvcmNlUmVuZGVyIHx8IGVmZmVjdEVsZW1lbnRzWzMxXS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMzJdLnAuX21kZiB8fCBlZmZlY3RFbGVtZW50c1szM10ucC5fbWRmIHx8IGVmZmVjdEVsZW1lbnRzWzM0XS5wLl9tZGYgfHwgZWZmZWN0RWxlbWVudHNbMzVdLnAuX21kZikpIHtcbiAgICAgICAgdmFsID0gdGhpcy5nZXRUYWJsZVZhbHVlKGVmZmVjdEVsZW1lbnRzWzMxXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzMyXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzMzXS5wLnYsIGVmZmVjdEVsZW1lbnRzWzM0XS5wLnYsIGVmZmVjdEVsZW1lbnRzWzM1XS5wLnYpO1xuICAgICAgICB0aGlzLmZlRnVuY0Euc2V0QXR0cmlidXRlKCd0YWJsZVZhbHVlcycsIHZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFNWR0Ryb3BTaGFkb3dFZmZlY3QoZmlsdGVyLCBmaWx0ZXJNYW5hZ2VyLCBlbGVtLCBpZCwgc291cmNlKSB7XG4gICAgdmFyIGdsb2JhbEZpbHRlclNpemUgPSBmaWx0ZXJNYW5hZ2VyLmNvbnRhaW5lci5nbG9iYWxEYXRhLnJlbmRlckNvbmZpZy5maWx0ZXJTaXplO1xuICAgIHZhciBmaWx0ZXJTaXplID0gZmlsdGVyTWFuYWdlci5kYXRhLmZzIHx8IGdsb2JhbEZpbHRlclNpemU7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgneCcsIGZpbHRlclNpemUueCB8fCBnbG9iYWxGaWx0ZXJTaXplLngpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3knLCBmaWx0ZXJTaXplLnkgfHwgZ2xvYmFsRmlsdGVyU2l6ZS55KTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd3aWR0aCcsIGZpbHRlclNpemUud2lkdGggfHwgZ2xvYmFsRmlsdGVyU2l6ZS53aWR0aCk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgZmlsdGVyU2l6ZS5oZWlnaHQgfHwgZ2xvYmFsRmlsdGVyU2l6ZS5oZWlnaHQpO1xuICAgIHRoaXMuZmlsdGVyTWFuYWdlciA9IGZpbHRlck1hbmFnZXI7XG4gICAgdmFyIGZlR2F1c3NpYW5CbHVyID0gY3JlYXRlTlMoJ2ZlR2F1c3NpYW5CbHVyJyk7XG4gICAgZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdpbicsICdTb3VyY2VBbHBoYScpO1xuICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX2Ryb3Bfc2hhZG93XzEnKTtcbiAgICBmZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3N0ZERldmlhdGlvbicsICcwJyk7XG4gICAgdGhpcy5mZUdhdXNzaWFuQmx1ciA9IGZlR2F1c3NpYW5CbHVyO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUdhdXNzaWFuQmx1cik7XG4gICAgdmFyIGZlT2Zmc2V0ID0gY3JlYXRlTlMoJ2ZlT2Zmc2V0Jyk7XG4gICAgZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdkeCcsICcyNScpO1xuICAgIGZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHknLCAnMCcpO1xuICAgIGZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnaW4nLCBpZCArICdfZHJvcF9zaGFkb3dfMScpO1xuICAgIGZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQgKyAnX2Ryb3Bfc2hhZG93XzInKTtcbiAgICB0aGlzLmZlT2Zmc2V0ID0gZmVPZmZzZXQ7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlT2Zmc2V0KTtcbiAgICB2YXIgZmVGbG9vZCA9IGNyZWF0ZU5TKCdmZUZsb29kJyk7XG4gICAgZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLWNvbG9yJywgJyMwMGZmMDAnKTtcbiAgICBmZUZsb29kLnNldEF0dHJpYnV0ZSgnZmxvb2Qtb3BhY2l0eScsICcxJyk7XG4gICAgZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ19kcm9wX3NoYWRvd18zJyk7XG4gICAgdGhpcy5mZUZsb29kID0gZmVGbG9vZDtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVGbG9vZCk7XG4gICAgdmFyIGZlQ29tcG9zaXRlID0gY3JlYXRlTlMoJ2ZlQ29tcG9zaXRlJyk7XG4gICAgZmVDb21wb3NpdGUuc2V0QXR0cmlidXRlKCdpbicsIGlkICsgJ19kcm9wX3NoYWRvd18zJyk7XG4gICAgZmVDb21wb3NpdGUuc2V0QXR0cmlidXRlKCdpbjInLCBpZCArICdfZHJvcF9zaGFkb3dfMicpO1xuICAgIGZlQ29tcG9zaXRlLnNldEF0dHJpYnV0ZSgnb3BlcmF0b3InLCAnaW4nKTtcbiAgICBmZUNvbXBvc2l0ZS5zZXRBdHRyaWJ1dGUoJ3Jlc3VsdCcsIGlkICsgJ19kcm9wX3NoYWRvd180Jyk7XG4gICAgZmlsdGVyLmFwcGVuZENoaWxkKGZlQ29tcG9zaXRlKTtcbiAgICB2YXIgZmVNZXJnZSA9IHRoaXMuY3JlYXRlTWVyZ2VOb2RlKGlkLCBbaWQgKyAnX2Ryb3Bfc2hhZG93XzQnLCBzb3VyY2VdKTtcbiAgICBmaWx0ZXIuYXBwZW5kQ2hpbGQoZmVNZXJnZSk7IC8vXG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1NWR0NvbXBvc2FibGVFZmZlY3RdLCBTVkdEcm9wU2hhZG93RWZmZWN0KTtcblxuICBTVkdEcm9wU2hhZG93RWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLl9tZGYpIHtcbiAgICAgICAgdGhpcy5mZUdhdXNzaWFuQmx1ci5zZXRBdHRyaWJ1dGUoJ3N0ZERldmlhdGlvbicsIHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1s0XS5wLnYgLyA0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZvcmNlUmVuZGVyIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLl9tZGYpIHtcbiAgICAgICAgdmFyIGNvbCA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1swXS5wLnY7XG4gICAgICAgIHRoaXMuZmVGbG9vZC5zZXRBdHRyaWJ1dGUoJ2Zsb29kLWNvbG9yJywgcmdiVG9IZXgoTWF0aC5yb3VuZChjb2xbMF0gKiAyNTUpLCBNYXRoLnJvdW5kKGNvbFsxXSAqIDI1NSksIE1hdGgucm91bmQoY29sWzJdICogMjU1KSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZm9yY2VSZW5kZXIgfHwgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAuX21kZikge1xuICAgICAgICB0aGlzLmZlRmxvb2Quc2V0QXR0cmlidXRlKCdmbG9vZC1vcGFjaXR5JywgdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudiAvIDI1NSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMl0ucC5fbWRmIHx8IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1szXS5wLl9tZGYpIHtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzNdLnAudjtcbiAgICAgICAgdmFyIGFuZ2xlID0gKHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnYgLSA5MCkgKiBkZWdUb1JhZHM7XG4gICAgICAgIHZhciB4ID0gZGlzdGFuY2UgKiBNYXRoLmNvcyhhbmdsZSk7XG4gICAgICAgIHZhciB5ID0gZGlzdGFuY2UgKiBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgIHRoaXMuZmVPZmZzZXQuc2V0QXR0cmlidXRlKCdkeCcsIHgpO1xuICAgICAgICB0aGlzLmZlT2Zmc2V0LnNldEF0dHJpYnV0ZSgnZHknLCB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIF9zdmdNYXR0ZVN5bWJvbHMgPSBbXTtcblxuICBmdW5jdGlvbiBTVkdNYXR0ZTNFZmZlY3QoZmlsdGVyRWxlbSwgZmlsdGVyTWFuYWdlciwgZWxlbSkge1xuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHRoaXMuZmlsdGVyRWxlbSA9IGZpbHRlckVsZW07XG4gICAgdGhpcy5lbGVtID0gZWxlbTtcbiAgICBlbGVtLm1hdHRlRWxlbWVudCA9IGNyZWF0ZU5TKCdnJyk7XG4gICAgZWxlbS5tYXR0ZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZWxlbS5sYXllckVsZW1lbnQpO1xuICAgIGVsZW0ubWF0dGVFbGVtZW50LmFwcGVuZENoaWxkKGVsZW0udHJhbnNmb3JtZWRFbGVtZW50KTtcbiAgICBlbGVtLmJhc2VFbGVtZW50ID0gZWxlbS5tYXR0ZUVsZW1lbnQ7XG4gIH1cblxuICBTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLmZpbmRTeW1ib2wgPSBmdW5jdGlvbiAobWFzaykge1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gX3N2Z01hdHRlU3ltYm9scy5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKF9zdmdNYXR0ZVN5bWJvbHNbaV0gPT09IG1hc2spIHtcbiAgICAgICAgcmV0dXJuIF9zdmdNYXR0ZVN5bWJvbHNbaV07XG4gICAgICB9XG5cbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICBTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLnJlcGxhY2VJblBhcmVudCA9IGZ1bmN0aW9uIChtYXNrLCBzeW1ib2xJZCkge1xuICAgIHZhciBwYXJlbnROb2RlID0gbWFzay5sYXllckVsZW1lbnQucGFyZW50Tm9kZTtcblxuICAgIGlmICghcGFyZW50Tm9kZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjaGlsZHJlbiA9IHBhcmVudE5vZGUuY2hpbGRyZW47XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBsZW4gPSBjaGlsZHJlbi5sZW5ndGg7XG5cbiAgICB3aGlsZSAoaSA8IGxlbikge1xuICAgICAgaWYgKGNoaWxkcmVuW2ldID09PSBtYXNrLmxheWVyRWxlbWVudCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHZhciBuZXh0Q2hpbGQ7XG5cbiAgICBpZiAoaSA8PSBsZW4gLSAyKSB7XG4gICAgICBuZXh0Q2hpbGQgPSBjaGlsZHJlbltpICsgMV07XG4gICAgfVxuXG4gICAgdmFyIHVzZUVsZW0gPSBjcmVhdGVOUygndXNlJyk7XG4gICAgdXNlRWxlbS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCAnIycgKyBzeW1ib2xJZCk7XG5cbiAgICBpZiAobmV4dENoaWxkKSB7XG4gICAgICBwYXJlbnROb2RlLmluc2VydEJlZm9yZSh1c2VFbGVtLCBuZXh0Q2hpbGQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKHVzZUVsZW0pO1xuICAgIH1cbiAgfTtcblxuICBTVkdNYXR0ZTNFZmZlY3QucHJvdG90eXBlLnNldEVsZW1lbnRBc01hc2sgPSBmdW5jdGlvbiAoZWxlbSwgbWFzaykge1xuICAgIGlmICghdGhpcy5maW5kU3ltYm9sKG1hc2spKSB7XG4gICAgICB2YXIgc3ltYm9sSWQgPSBjcmVhdGVFbGVtZW50SUQoKTtcbiAgICAgIHZhciBtYXNrZXIgPSBjcmVhdGVOUygnbWFzaycpO1xuICAgICAgbWFza2VyLnNldEF0dHJpYnV0ZSgnaWQnLCBtYXNrLmxheWVySWQpO1xuICAgICAgbWFza2VyLnNldEF0dHJpYnV0ZSgnbWFzay10eXBlJywgJ2FscGhhJyk7XG5cbiAgICAgIF9zdmdNYXR0ZVN5bWJvbHMucHVzaChtYXNrKTtcblxuICAgICAgdmFyIGRlZnMgPSBlbGVtLmdsb2JhbERhdGEuZGVmcztcbiAgICAgIGRlZnMuYXBwZW5kQ2hpbGQobWFza2VyKTtcbiAgICAgIHZhciBzeW1ib2wgPSBjcmVhdGVOUygnc3ltYm9sJyk7XG4gICAgICBzeW1ib2wuc2V0QXR0cmlidXRlKCdpZCcsIHN5bWJvbElkKTtcbiAgICAgIHRoaXMucmVwbGFjZUluUGFyZW50KG1hc2ssIHN5bWJvbElkKTtcbiAgICAgIHN5bWJvbC5hcHBlbmRDaGlsZChtYXNrLmxheWVyRWxlbWVudCk7XG4gICAgICBkZWZzLmFwcGVuZENoaWxkKHN5bWJvbCk7XG4gICAgICB2YXIgdXNlRWxlbSA9IGNyZWF0ZU5TKCd1c2UnKTtcbiAgICAgIHVzZUVsZW0uc2V0QXR0cmlidXRlKCdocmVmJywgJyMnICsgc3ltYm9sSWQpO1xuICAgICAgbWFza2VyLmFwcGVuZENoaWxkKHVzZUVsZW0pO1xuICAgICAgbWFzay5kYXRhLmhkID0gZmFsc2U7XG4gICAgICBtYXNrLnNob3coKTtcbiAgICB9XG5cbiAgICBlbGVtLnNldE1hdHRlKG1hc2subGF5ZXJJZCk7XG4gIH07XG5cbiAgU1ZHTWF0dGUzRWZmZWN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBpbmQgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52O1xuICAgIHZhciBlbGVtZW50cyA9IHRoaXMuZWxlbS5jb21wLmVsZW1lbnRzO1xuICAgIHZhciBpID0gMDtcbiAgICB2YXIgbGVuID0gZWxlbWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGlmIChlbGVtZW50c1tpXSAmJiBlbGVtZW50c1tpXS5kYXRhLmluZCA9PT0gaW5kKSB7XG4gICAgICAgIHRoaXMuc2V0RWxlbWVudEFzTWFzayh0aGlzLmVsZW0sIGVsZW1lbnRzW2ldKTtcbiAgICAgIH1cblxuICAgICAgaSArPSAxO1xuICAgIH1cblxuICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICB9O1xuXG4gIFNWR01hdHRlM0VmZmVjdC5wcm90b3R5cGUucmVuZGVyRnJhbWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmluaXRpYWxpemVkKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemUoKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gU1ZHR2F1c3NpYW5CbHVyRWZmZWN0KGZpbHRlciwgZmlsdGVyTWFuYWdlciwgZWxlbSwgaWQpIHtcbiAgICAvLyBPdXRzZXQgdGhlIGZpbHRlciByZWdpb24gYnkgMTAwJSBvbiBhbGwgc2lkZXMgdG8gYWNjb21tb2RhdGUgYmx1ciBleHBhbnNpb24uXG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgneCcsICctMTAwJScpO1xuICAgIGZpbHRlci5zZXRBdHRyaWJ1dGUoJ3knLCAnLTEwMCUnKTtcbiAgICBmaWx0ZXIuc2V0QXR0cmlidXRlKCd3aWR0aCcsICczMDAlJyk7XG4gICAgZmlsdGVyLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgJzMwMCUnKTtcbiAgICB0aGlzLmZpbHRlck1hbmFnZXIgPSBmaWx0ZXJNYW5hZ2VyO1xuICAgIHZhciBmZUdhdXNzaWFuQmx1ciA9IGNyZWF0ZU5TKCdmZUdhdXNzaWFuQmx1cicpO1xuICAgIGZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgncmVzdWx0JywgaWQpO1xuICAgIGZpbHRlci5hcHBlbmRDaGlsZChmZUdhdXNzaWFuQmx1cik7XG4gICAgdGhpcy5mZUdhdXNzaWFuQmx1ciA9IGZlR2F1c3NpYW5CbHVyO1xuICB9XG5cbiAgU1ZHR2F1c3NpYW5CbHVyRWZmZWN0LnByb3RvdHlwZS5yZW5kZXJGcmFtZSA9IGZ1bmN0aW9uIChmb3JjZVJlbmRlcikge1xuICAgIGlmIChmb3JjZVJlbmRlciB8fCB0aGlzLmZpbHRlck1hbmFnZXIuX21kZikge1xuICAgICAgLy8gRW1waXJpY2FsIHZhbHVlLCBtYXRjaGluZyBBRSdzIGJsdXIgYXBwZWFyYW5jZS5cbiAgICAgIHZhciBrQmx1cnJpbmVzc1RvU2lnbWEgPSAwLjM7XG4gICAgICB2YXIgc2lnbWEgPSB0aGlzLmZpbHRlck1hbmFnZXIuZWZmZWN0RWxlbWVudHNbMF0ucC52ICoga0JsdXJyaW5lc3NUb1NpZ21hOyAvLyBEaW1lbnNpb25zIG1hcHBpbmc6XG4gICAgICAvL1xuICAgICAgLy8gICAxIC0+IGhvcml6b250YWwgJiB2ZXJ0aWNhbFxuICAgICAgLy8gICAyIC0+IGhvcml6b250YWwgb25seVxuICAgICAgLy8gICAzIC0+IHZlcnRpY2FsIG9ubHlcbiAgICAgIC8vXG5cbiAgICAgIHZhciBkaW1lbnNpb25zID0gdGhpcy5maWx0ZXJNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzWzFdLnAudjtcbiAgICAgIHZhciBzaWdtYVggPSBkaW1lbnNpb25zID09IDMgPyAwIDogc2lnbWE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cbiAgICAgIHZhciBzaWdtYVkgPSBkaW1lbnNpb25zID09IDIgPyAwIDogc2lnbWE7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG5cbiAgICAgIHRoaXMuZmVHYXVzc2lhbkJsdXIuc2V0QXR0cmlidXRlKCdzdGREZXZpYXRpb24nLCBzaWdtYVggKyAnICcgKyBzaWdtYVkpOyAvLyBSZXBlYXQgZWRnZXMgbWFwcGluZzpcbiAgICAgIC8vXG4gICAgICAvLyAgIDAgLT4gb2ZmIC0+IGR1cGxpY2F0ZVxuICAgICAgLy8gICAxIC0+IG9uICAtPiB3cmFwXG5cbiAgICAgIHZhciBlZGdlTW9kZSA9IHRoaXMuZmlsdGVyTWFuYWdlci5lZmZlY3RFbGVtZW50c1syXS5wLnYgPT0gMSA/ICd3cmFwJyA6ICdkdXBsaWNhdGUnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuXG4gICAgICB0aGlzLmZlR2F1c3NpYW5CbHVyLnNldEF0dHJpYnV0ZSgnZWRnZU1vZGUnLCBlZGdlTW9kZSk7XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIFRyYW5zZm9ybUVmZmVjdCgpIHt9XG5cbiAgVHJhbnNmb3JtRWZmZWN0LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKGVmZmVjdHNNYW5hZ2VyKSB7XG4gICAgdGhpcy5lZmZlY3RzTWFuYWdlciA9IGVmZmVjdHNNYW5hZ2VyO1xuICAgIHRoaXMudHlwZSA9IGVmZmVjdFR5cGVzLlRSQU5TRk9STV9FRkZFQ1Q7XG4gICAgdGhpcy5tYXRyaXggPSBuZXcgTWF0cml4KCk7XG4gICAgdGhpcy5vcGFjaXR5ID0gLTE7XG4gICAgdGhpcy5fbWRmID0gZmFsc2U7XG4gICAgdGhpcy5fb3BNZGYgPSBmYWxzZTtcbiAgfTtcblxuICBUcmFuc2Zvcm1FZmZlY3QucHJvdG90eXBlLnJlbmRlckZyYW1lID0gZnVuY3Rpb24gKGZvcmNlRnJhbWUpIHtcbiAgICB0aGlzLl9vcE1kZiA9IGZhbHNlO1xuICAgIHRoaXMuX21kZiA9IGZhbHNlO1xuXG4gICAgaWYgKGZvcmNlRnJhbWUgfHwgdGhpcy5lZmZlY3RzTWFuYWdlci5fbWRmKSB7XG4gICAgICB2YXIgZWZmZWN0RWxlbWVudHMgPSB0aGlzLmVmZmVjdHNNYW5hZ2VyLmVmZmVjdEVsZW1lbnRzO1xuICAgICAgdmFyIGFuY2hvciA9IGVmZmVjdEVsZW1lbnRzWzBdLnAudjtcbiAgICAgIHZhciBwb3NpdGlvbiA9IGVmZmVjdEVsZW1lbnRzWzFdLnAudjtcbiAgICAgIHZhciBpc1VuaWZvcm1TY2FsZSA9IGVmZmVjdEVsZW1lbnRzWzJdLnAudiA9PT0gMTtcbiAgICAgIHZhciBzY2FsZUhlaWdodCA9IGVmZmVjdEVsZW1lbnRzWzNdLnAudjtcbiAgICAgIHZhciBzY2FsZVdpZHRoID0gaXNVbmlmb3JtU2NhbGUgPyBzY2FsZUhlaWdodCA6IGVmZmVjdEVsZW1lbnRzWzRdLnAudjtcbiAgICAgIHZhciBza2V3ID0gZWZmZWN0RWxlbWVudHNbNV0ucC52O1xuICAgICAgdmFyIHNrZXdBeGlzID0gZWZmZWN0RWxlbWVudHNbNl0ucC52O1xuICAgICAgdmFyIHJvdGF0aW9uID0gZWZmZWN0RWxlbWVudHNbN10ucC52O1xuICAgICAgdGhpcy5tYXRyaXgucmVzZXQoKTtcbiAgICAgIHRoaXMubWF0cml4LnRyYW5zbGF0ZSgtYW5jaG9yWzBdLCAtYW5jaG9yWzFdLCBhbmNob3JbMl0pO1xuICAgICAgdGhpcy5tYXRyaXguc2NhbGUoc2NhbGVXaWR0aCAqIDAuMDEsIHNjYWxlSGVpZ2h0ICogMC4wMSwgMSk7XG4gICAgICB0aGlzLm1hdHJpeC5yb3RhdGUoLXJvdGF0aW9uICogZGVnVG9SYWRzKTtcbiAgICAgIHRoaXMubWF0cml4LnNrZXdGcm9tQXhpcygtc2tldyAqIGRlZ1RvUmFkcywgKHNrZXdBeGlzICsgOTApICogZGVnVG9SYWRzKTtcbiAgICAgIHRoaXMubWF0cml4LnRyYW5zbGF0ZShwb3NpdGlvblswXSwgcG9zaXRpb25bMV0sIDApO1xuICAgICAgdGhpcy5fbWRmID0gdHJ1ZTtcblxuICAgICAgaWYgKHRoaXMub3BhY2l0eSAhPT0gZWZmZWN0RWxlbWVudHNbOF0ucC52KSB7XG4gICAgICAgIHRoaXMub3BhY2l0eSA9IGVmZmVjdEVsZW1lbnRzWzhdLnAudjtcbiAgICAgICAgdGhpcy5fb3BNZGYgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBTVkdUcmFuc2Zvcm1FZmZlY3QoXywgZmlsdGVyTWFuYWdlcikge1xuICAgIHRoaXMuaW5pdChmaWx0ZXJNYW5hZ2VyKTtcbiAgfVxuXG4gIGV4dGVuZFByb3RvdHlwZShbVHJhbnNmb3JtRWZmZWN0XSwgU1ZHVHJhbnNmb3JtRWZmZWN0KTtcblxuICBmdW5jdGlvbiBDVlRyYW5zZm9ybUVmZmVjdChlZmZlY3RzTWFuYWdlcikge1xuICAgIHRoaXMuaW5pdChlZmZlY3RzTWFuYWdlcik7XG4gIH1cblxuICBleHRlbmRQcm90b3R5cGUoW1RyYW5zZm9ybUVmZmVjdF0sIENWVHJhbnNmb3JtRWZmZWN0KTtcblxuICByZWdpc3RlclJlbmRlcmVyKCdjYW52YXMnLCBDYW52YXNSZW5kZXJlcik7XG4gIHJlZ2lzdGVyUmVuZGVyZXIoJ2h0bWwnLCBIeWJyaWRSZW5kZXJlcik7XG4gIHJlZ2lzdGVyUmVuZGVyZXIoJ3N2ZycsIFNWR1JlbmRlcmVyKTsgLy8gUmVnaXN0ZXJpbmcgc2hhcGUgbW9kaWZpZXJzXG5cbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcigndG0nLCBUcmltTW9kaWZpZXIpO1xuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCdwYicsIFB1Y2tlckFuZEJsb2F0TW9kaWZpZXIpO1xuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCdycCcsIFJlcGVhdGVyTW9kaWZpZXIpO1xuICBTaGFwZU1vZGlmaWVycy5yZWdpc3Rlck1vZGlmaWVyKCdyZCcsIFJvdW5kQ29ybmVyc01vZGlmaWVyKTtcbiAgU2hhcGVNb2RpZmllcnMucmVnaXN0ZXJNb2RpZmllcignenonLCBaaWdaYWdNb2RpZmllcik7XG4gIFNoYXBlTW9kaWZpZXJzLnJlZ2lzdGVyTW9kaWZpZXIoJ29wJywgT2Zmc2V0UGF0aE1vZGlmaWVyKTsgLy8gUmVnaXN0ZXJpbmcgZXhwcmVzc2lvbiBwbHVnaW5cblxuICBzZXRFeHByZXNzaW9uc1BsdWdpbihFeHByZXNzaW9ucyk7XG4gIHNldEV4cHJlc3Npb25JbnRlcmZhY2VzKGdldEludGVyZmFjZSk7XG4gIGluaXRpYWxpemUkMSgpO1xuICBpbml0aWFsaXplKCk7IC8vIFJlZ2lzdGVyaW5nIHN2ZyBlZmZlY3RzXG5cbiAgcmVnaXN0ZXJFZmZlY3QkMSgyMCwgU1ZHVGludEZpbHRlciwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjEsIFNWR0ZpbGxGaWx0ZXIsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDIyLCBTVkdTdHJva2VFZmZlY3QsIGZhbHNlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyMywgU1ZHVHJpdG9uZUZpbHRlciwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjQsIFNWR1Byb0xldmVsc0ZpbHRlciwgdHJ1ZSk7XG4gIHJlZ2lzdGVyRWZmZWN0JDEoMjUsIFNWR0Ryb3BTaGFkb3dFZmZlY3QsIHRydWUpO1xuICByZWdpc3RlckVmZmVjdCQxKDI4LCBTVkdNYXR0ZTNFZmZlY3QsIGZhbHNlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgyOSwgU1ZHR2F1c3NpYW5CbHVyRWZmZWN0LCB0cnVlKTtcbiAgcmVnaXN0ZXJFZmZlY3QkMSgzNSwgU1ZHVHJhbnNmb3JtRWZmZWN0LCBmYWxzZSk7XG4gIHJlZ2lzdGVyRWZmZWN0KDM1LCBDVlRyYW5zZm9ybUVmZmVjdCk7XG5cbiAgcmV0dXJuIGxvdHRpZTtcblxufSkpO1xuIiwiaW1wb3J0IGxvdHRpZSBmcm9tICdsb3R0aWUtd2ViJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgTG90dGllUGxheWVyIH0gZnJvbSAnbG90dGllLXdlYic7XG5pbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZVJlZiwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IG51bGwgPT0gYXJyID8gbnVsbCA6IFwidW5kZWZpbmVkXCIgIT0gdHlwZW9mIFN5bWJvbCAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuICBpZiAobnVsbCAhPSBfaSkge1xuICAgIHZhciBfcyxcbiAgICAgIF9lLFxuICAgICAgX3gsXG4gICAgICBfcixcbiAgICAgIF9hcnIgPSBbXSxcbiAgICAgIF9uID0gITAsXG4gICAgICBfZCA9ICExO1xuICAgIHRyeSB7XG4gICAgICBpZiAoX3ggPSAoX2kgPSBfaS5jYWxsKGFycikpLm5leHQsIDAgPT09IGkpIHtcbiAgICAgICAgaWYgKE9iamVjdChfaSkgIT09IF9pKSByZXR1cm47XG4gICAgICAgIF9uID0gITE7XG4gICAgICB9IGVsc2UgZm9yICg7ICEoX24gPSAoX3MgPSBfeC5jYWxsKF9pKSkuZG9uZSkgJiYgKF9hcnIucHVzaChfcy52YWx1ZSksIF9hcnIubGVuZ3RoICE9PSBpKTsgX24gPSAhMCk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBfZCA9ICEwLCBfZSA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFfbiAmJiBudWxsICE9IF9pLnJldHVybiAmJiAoX3IgPSBfaS5yZXR1cm4oKSwgT2JqZWN0KF9yKSAhPT0gX3IpKSByZXR1cm47XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gX2FycjtcbiAgfVxufVxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG4gIHJldHVybiBrZXlzO1xufVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IG51bGwgIT0gYXJndW1lbnRzW2ldID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgaSAlIDIgPyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcbiAgICB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKSA6IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAga2V5ID0gX3RvUHJvcGVydHlLZXkoa2V5KTtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuICBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IHNvdXJjZUtleXNbaV07XG4gICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpO1xuICB2YXIga2V5LCBpO1xuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldO1xuICAgICAgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTtcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7XG4gICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7XG4gIGlmICghbykgcmV0dXJuO1xuICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xuICB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG4gIGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7XG4gIGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pO1xuICBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG59XG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSBhcnIyW2ldID0gYXJyW2ldO1xuICByZXR1cm4gYXJyMjtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfdG9QcmltaXRpdmUoaW5wdXQsIGhpbnQpIHtcbiAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gXCJvYmplY3RcIiB8fCBpbnB1dCA9PT0gbnVsbCkgcmV0dXJuIGlucHV0O1xuICB2YXIgcHJpbSA9IGlucHV0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmIChwcmltICE9PSB1bmRlZmluZWQpIHtcbiAgICB2YXIgcmVzID0gcHJpbS5jYWxsKGlucHV0LCBoaW50IHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAodHlwZW9mIHJlcyAhPT0gXCJvYmplY3RcIikgcmV0dXJuIHJlcztcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChoaW50ID09PSBcInN0cmluZ1wiID8gU3RyaW5nIDogTnVtYmVyKShpbnB1dCk7XG59XG5mdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleShhcmcpIHtcbiAgdmFyIGtleSA9IF90b1ByaW1pdGl2ZShhcmcsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gdHlwZW9mIGtleSA9PT0gXCJzeW1ib2xcIiA/IGtleSA6IFN0cmluZyhrZXkpO1xufVxuXG52YXIgX2V4Y2x1ZGVkJDEgPSBbXCJhbmltYXRpb25EYXRhXCIsIFwibG9vcFwiLCBcImF1dG9wbGF5XCIsIFwiaW5pdGlhbFNlZ21lbnRcIiwgXCJvbkNvbXBsZXRlXCIsIFwib25Mb29wQ29tcGxldGVcIiwgXCJvbkVudGVyRnJhbWVcIiwgXCJvblNlZ21lbnRTdGFydFwiLCBcIm9uQ29uZmlnUmVhZHlcIiwgXCJvbkRhdGFSZWFkeVwiLCBcIm9uRGF0YUZhaWxlZFwiLCBcIm9uTG9hZGVkSW1hZ2VzXCIsIFwib25ET01Mb2FkZWRcIiwgXCJvbkRlc3Ryb3lcIiwgXCJsb3R0aWVSZWZcIiwgXCJyZW5kZXJlclwiLCBcIm5hbWVcIiwgXCJhc3NldHNQYXRoXCIsIFwicmVuZGVyZXJTZXR0aW5nc1wiXTtcbnZhciB1c2VMb3R0aWUgPSBmdW5jdGlvbiB1c2VMb3R0aWUocHJvcHMsIHN0eWxlKSB7XG4gIHZhciBhbmltYXRpb25EYXRhID0gcHJvcHMuYW5pbWF0aW9uRGF0YSxcbiAgICBsb29wID0gcHJvcHMubG9vcCxcbiAgICBhdXRvcGxheSA9IHByb3BzLmF1dG9wbGF5LFxuICAgIGluaXRpYWxTZWdtZW50ID0gcHJvcHMuaW5pdGlhbFNlZ21lbnQsXG4gICAgb25Db21wbGV0ZSA9IHByb3BzLm9uQ29tcGxldGUsXG4gICAgb25Mb29wQ29tcGxldGUgPSBwcm9wcy5vbkxvb3BDb21wbGV0ZSxcbiAgICBvbkVudGVyRnJhbWUgPSBwcm9wcy5vbkVudGVyRnJhbWUsXG4gICAgb25TZWdtZW50U3RhcnQgPSBwcm9wcy5vblNlZ21lbnRTdGFydCxcbiAgICBvbkNvbmZpZ1JlYWR5ID0gcHJvcHMub25Db25maWdSZWFkeSxcbiAgICBvbkRhdGFSZWFkeSA9IHByb3BzLm9uRGF0YVJlYWR5LFxuICAgIG9uRGF0YUZhaWxlZCA9IHByb3BzLm9uRGF0YUZhaWxlZCxcbiAgICBvbkxvYWRlZEltYWdlcyA9IHByb3BzLm9uTG9hZGVkSW1hZ2VzLFxuICAgIG9uRE9NTG9hZGVkID0gcHJvcHMub25ET01Mb2FkZWQsXG4gICAgb25EZXN0cm95ID0gcHJvcHMub25EZXN0cm95O1xuICAgIHByb3BzLmxvdHRpZVJlZjtcbiAgICBwcm9wcy5yZW5kZXJlcjtcbiAgICBwcm9wcy5uYW1lO1xuICAgIHByb3BzLmFzc2V0c1BhdGg7XG4gICAgcHJvcHMucmVuZGVyZXJTZXR0aW5ncztcbiAgICB2YXIgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkJDEpO1xuICB2YXIgX3VzZVN0YXRlID0gdXNlU3RhdGUoZmFsc2UpLFxuICAgIF91c2VTdGF0ZTIgPSBfc2xpY2VkVG9BcnJheShfdXNlU3RhdGUsIDIpLFxuICAgIGFuaW1hdGlvbkxvYWRlZCA9IF91c2VTdGF0ZTJbMF0sXG4gICAgc2V0QW5pbWF0aW9uTG9hZGVkID0gX3VzZVN0YXRlMlsxXTtcbiAgdmFyIGFuaW1hdGlvbkluc3RhbmNlUmVmID0gdXNlUmVmKCk7XG4gIHZhciBhbmltYXRpb25Db250YWluZXIgPSB1c2VSZWYobnVsbCk7XG4gIC8qXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICAgICAgICBJTlRFUkFDVElPTiBNRVRIT0RTXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG4gIC8qKlxuICAgKiBQbGF5XG4gICAqL1xuICB2YXIgcGxheSA9IGZ1bmN0aW9uIHBsYXkoKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wbGF5KCk7XG4gIH07XG4gIC8qKlxuICAgKiBTdG9wXG4gICAqL1xuICB2YXIgc3RvcCA9IGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zdG9wKCk7XG4gIH07XG4gIC8qKlxuICAgKiBQYXVzZVxuICAgKi9cbiAgdmFyIHBhdXNlID0gZnVuY3Rpb24gcGF1c2UoKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wYXVzZSgpO1xuICB9O1xuICAvKipcbiAgICogU2V0IGFuaW1hdGlvbiBzcGVlZFxuICAgKiBAcGFyYW0gc3BlZWRcbiAgICovXG4gIHZhciBzZXRTcGVlZCA9IGZ1bmN0aW9uIHNldFNwZWVkKHNwZWVkKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXRTcGVlZChzcGVlZCk7XG4gIH07XG4gIC8qKlxuICAgKiBHb3QgdG8gZnJhbWUgYW5kIHBsYXlcbiAgICogQHBhcmFtIHZhbHVlXG4gICAqIEBwYXJhbSBpc0ZyYW1lXG4gICAqL1xuICB2YXIgZ29Ub0FuZFBsYXkgPSBmdW5jdGlvbiBnb1RvQW5kUGxheSh2YWx1ZSwgaXNGcmFtZSkge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSBhbmltYXRpb25JbnN0YW5jZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZ29Ub0FuZFBsYXkodmFsdWUsIGlzRnJhbWUpO1xuICB9O1xuICAvKipcbiAgICogR290IHRvIGZyYW1lIGFuZCBzdG9wXG4gICAqIEBwYXJhbSB2YWx1ZVxuICAgKiBAcGFyYW0gaXNGcmFtZVxuICAgKi9cbiAgdmFyIGdvVG9BbmRTdG9wID0gZnVuY3Rpb24gZ29Ub0FuZFN0b3AodmFsdWUsIGlzRnJhbWUpIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdvVG9BbmRTdG9wKHZhbHVlLCBpc0ZyYW1lKTtcbiAgfTtcbiAgLyoqXG4gICAqIFNldCBhbmltYXRpb24gZGlyZWN0aW9uXG4gICAqIEBwYXJhbSBkaXJlY3Rpb25cbiAgICovXG4gIHZhciBzZXREaXJlY3Rpb24gPSBmdW5jdGlvbiBzZXREaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZXREaXJlY3Rpb24oZGlyZWN0aW9uKTtcbiAgfTtcbiAgLyoqXG4gICAqIFBsYXkgYW5pbWF0aW9uIHNlZ21lbnRzXG4gICAqIEBwYXJhbSBzZWdtZW50c1xuICAgKiBAcGFyYW0gZm9yY2VGbGFnXG4gICAqL1xuICB2YXIgcGxheVNlZ21lbnRzID0gZnVuY3Rpb24gcGxheVNlZ21lbnRzKHNlZ21lbnRzLCBmb3JjZUZsYWcpIHtcbiAgICB2YXIgX2E7XG4gICAgKF9hID0gYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnBsYXlTZWdtZW50cyhzZWdtZW50cywgZm9yY2VGbGFnKTtcbiAgfTtcbiAgLyoqXG4gICAqIFNldCBzdWIgZnJhbWVzXG4gICAqIEBwYXJhbSB1c2VTdWJGcmFtZXNcbiAgICovXG4gIHZhciBzZXRTdWJmcmFtZSA9IGZ1bmN0aW9uIHNldFN1YmZyYW1lKHVzZVN1YkZyYW1lcykge1xuICAgIHZhciBfYTtcbiAgICAoX2EgPSBhbmltYXRpb25JbnN0YW5jZVJlZi5jdXJyZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0U3ViZnJhbWUodXNlU3ViRnJhbWVzKTtcbiAgfTtcbiAgLyoqXG4gICAqIEdldCBhbmltYXRpb24gZHVyYXRpb25cbiAgICogQHBhcmFtIGluRnJhbWVzXG4gICAqL1xuICB2YXIgZ2V0RHVyYXRpb24gPSBmdW5jdGlvbiBnZXREdXJhdGlvbihpbkZyYW1lcykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmdldER1cmF0aW9uKGluRnJhbWVzKTtcbiAgfTtcbiAgLyoqXG4gICAqIERlc3Ryb3kgYW5pbWF0aW9uXG4gICAqL1xuICB2YXIgZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgdmFyIF9hO1xuICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gICAgLy8gUmVtb3ZpbmcgdGhlIHJlZmVyZW5jZSB0byB0aGUgYW5pbWF0aW9uIHNvIHNlcGFyYXRlIGNsZWFudXBzIGFyZSBza2lwcGVkLlxuICAgIC8vIFdpdGhvdXQgaXQgdGhlIGludGVybmFsIGBsb3R0aWUtcmVhY3RgIGluc3RhbmNlIHRocm93cyBleGNlcHRpb25zIGFzIGl0IGFscmVhZHkgY2xlYXJlZCBpdHNlbGYgb24gZGVzdHJveS5cbiAgICBhbmltYXRpb25JbnN0YW5jZVJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9O1xuICAvKlxuICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgTE9UVElFXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG4gIC8qKlxuICAgKiBMb2FkIGEgbmV3IGFuaW1hdGlvbiwgYW5kIGlmIGl0J3MgdGhlIGNhc2UsIGRlc3Ryb3kgdGhlIHByZXZpb3VzIG9uZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZm9yY2VkQ29uZmlnc1xuICAgKi9cbiAgdmFyIGxvYWRBbmltYXRpb24gPSBmdW5jdGlvbiBsb2FkQW5pbWF0aW9uKCkge1xuICAgIHZhciBmb3JjZWRDb25maWdzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgX2E7XG4gICAgLy8gUmV0dXJuIGlmIHRoZSBjb250YWluZXIgcmVmIGlzIG51bGxcbiAgICBpZiAoIWFuaW1hdGlvbkNvbnRhaW5lci5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIERlc3Ryb3kgYW55IHByZXZpb3VzIGluc3RhbmNlXG4gICAgKF9hID0gYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmRlc3Ryb3koKTtcbiAgICAvLyBCdWlsZCB0aGUgYW5pbWF0aW9uIGNvbmZpZ3VyYXRpb25cbiAgICB2YXIgY29uZmlnID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIHByb3BzKSwgZm9yY2VkQ29uZmlncyksIHt9LCB7XG4gICAgICBjb250YWluZXI6IGFuaW1hdGlvbkNvbnRhaW5lci5jdXJyZW50XG4gICAgfSk7XG4gICAgLy8gU2F2ZSB0aGUgYW5pbWF0aW9uIGluc3RhbmNlXG4gICAgYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCA9IGxvdHRpZS5sb2FkQW5pbWF0aW9uKGNvbmZpZyk7XG4gICAgc2V0QW5pbWF0aW9uTG9hZGVkKCEhYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCk7XG4gICAgLy8gUmV0dXJuIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNsZWFuIHVwXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBfYTtcbiAgICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95KCk7XG4gICAgICBhbmltYXRpb25JbnN0YW5jZVJlZi5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICAgIH07XG4gIH07XG4gIC8qKlxuICAgKiAoUmUpSW5pdGlhbGl6ZSB3aGVuIGFuaW1hdGlvbiBkYXRhIGNoYW5nZWRcbiAgICovXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIG9uVW5tb3VudCA9IGxvYWRBbmltYXRpb24oKTtcbiAgICAvLyBDbGVhbiB1cCBvbiB1bm1vdW50XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBvblVubW91bnQgPT09IG51bGwgfHwgb25Vbm1vdW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvblVubW91bnQoKTtcbiAgICB9O1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW2FuaW1hdGlvbkRhdGEsIGxvb3BdKTtcbiAgLy8gVXBkYXRlIHRoZSBhdXRvcGxheSBzdGF0ZVxuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIGlmICghYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltYXRpb25JbnN0YW5jZVJlZi5jdXJyZW50LmF1dG9wbGF5ID0gISFhdXRvcGxheTtcbiAgfSwgW2F1dG9wbGF5XSk7XG4gIC8vIFVwZGF0ZSB0aGUgaW5pdGlhbCBzZWdtZW50IHN0YXRlXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFhbmltYXRpb25JbnN0YW5jZVJlZi5jdXJyZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIFdoZW4gbnVsbCBzaG91bGQgcmVzZXQgdG8gZGVmYXVsdCBhbmltYXRpb24gbGVuZ3RoXG4gICAgaWYgKCFpbml0aWFsU2VnbWVudCkge1xuICAgICAgYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudC5yZXNldFNlZ21lbnRzKHRydWUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiBpdCdzIG5vdCBhIHZhbGlkIHNlZ21lbnQsIGRvIG5vdGhpbmdcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5pdGlhbFNlZ21lbnQpIHx8ICFpbml0aWFsU2VnbWVudC5sZW5ndGgpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgcG9zaXRpb24gaXQncyBub3QgaW4gdGhlIG5ldyBzZWdtZW50XG4gICAgLy8gc2V0IHRoZSBjdXJyZW50IHBvc2l0aW9uIHRvIHN0YXJ0XG4gICAgaWYgKGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQuY3VycmVudFJhd0ZyYW1lIDwgaW5pdGlhbFNlZ21lbnRbMF0gfHwgYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudC5jdXJyZW50UmF3RnJhbWUgPiBpbml0aWFsU2VnbWVudFsxXSkge1xuICAgICAgYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudC5jdXJyZW50UmF3RnJhbWUgPSBpbml0aWFsU2VnbWVudFswXTtcbiAgICB9XG4gICAgLy8gVXBkYXRlIHRoZSBzZWdtZW50XG4gICAgYW5pbWF0aW9uSW5zdGFuY2VSZWYuY3VycmVudC5zZXRTZWdtZW50KGluaXRpYWxTZWdtZW50WzBdLCBpbml0aWFsU2VnbWVudFsxXSk7XG4gIH0sIFtpbml0aWFsU2VnbWVudF0pO1xuICAvKlxuICAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAgICAgRVZFTlRTXG4gICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAgICovXG4gIC8qKlxuICAgKiBSZWluaXRpYWxpemUgbGlzdGVuZXIgb24gY2hhbmdlXG4gICAqL1xuICB1c2VFZmZlY3QoZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJ0aWFsTGlzdGVuZXJzID0gW3tcbiAgICAgIG5hbWU6IFwiY29tcGxldGVcIixcbiAgICAgIGhhbmRsZXI6IG9uQ29tcGxldGVcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcImxvb3BDb21wbGV0ZVwiLFxuICAgICAgaGFuZGxlcjogb25Mb29wQ29tcGxldGVcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcImVudGVyRnJhbWVcIixcbiAgICAgIGhhbmRsZXI6IG9uRW50ZXJGcmFtZVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwic2VnbWVudFN0YXJ0XCIsXG4gICAgICBoYW5kbGVyOiBvblNlZ21lbnRTdGFydFxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiY29uZmlnX3JlYWR5XCIsXG4gICAgICBoYW5kbGVyOiBvbkNvbmZpZ1JlYWR5XG4gICAgfSwge1xuICAgICAgbmFtZTogXCJkYXRhX3JlYWR5XCIsXG4gICAgICBoYW5kbGVyOiBvbkRhdGFSZWFkeVxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwiZGF0YV9mYWlsZWRcIixcbiAgICAgIGhhbmRsZXI6IG9uRGF0YUZhaWxlZFxuICAgIH0sIHtcbiAgICAgIG5hbWU6IFwibG9hZGVkX2ltYWdlc1wiLFxuICAgICAgaGFuZGxlcjogb25Mb2FkZWRJbWFnZXNcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcIkRPTUxvYWRlZFwiLFxuICAgICAgaGFuZGxlcjogb25ET01Mb2FkZWRcbiAgICB9LCB7XG4gICAgICBuYW1lOiBcImRlc3Ryb3lcIixcbiAgICAgIGhhbmRsZXI6IG9uRGVzdHJveVxuICAgIH1dO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBwYXJ0aWFsTGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5oYW5kbGVyICE9IG51bGw7XG4gICAgfSk7XG4gICAgaWYgKCFsaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBkZXJlZ2lzdGVyTGlzdCA9IGxpc3RlbmVycy5tYXAoXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHRoZSBwcm9jZXNzIG9mIGFkZGluZyBhbiBldmVudCBsaXN0ZW5lclxuICAgICAqIEBwYXJhbSB7TGlzdGVuZXJ9IGxpc3RlbmVyXG4gICAgICogQHJldHVybiB7RnVuY3Rpb259IEZ1bmN0aW9uIHRoYXQgZGVyZWdpc3RlciB0aGUgbGlzdGVuZXJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHZhciBfYTtcbiAgICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5hZGRFdmVudExpc3RlbmVyKGxpc3RlbmVyLm5hbWUsIGxpc3RlbmVyLmhhbmRsZXIpO1xuICAgICAgLy8gUmV0dXJuIGEgZnVuY3Rpb24gdG8gZGVyZWdpc3RlciB0aGlzIGxpc3RlbmVyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIChfYSA9IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZW1vdmVFdmVudExpc3RlbmVyKGxpc3RlbmVyLm5hbWUsIGxpc3RlbmVyLmhhbmRsZXIpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgICAvLyBEZXJlZ2lzdGVyIGxpc3RlbmVycyBvbiB1bm1vdW50XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlcmVnaXN0ZXJMaXN0LmZvckVhY2goZnVuY3Rpb24gKGRlcmVnaXN0ZXIpIHtcbiAgICAgICAgcmV0dXJuIGRlcmVnaXN0ZXIoKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0sIFtvbkNvbXBsZXRlLCBvbkxvb3BDb21wbGV0ZSwgb25FbnRlckZyYW1lLCBvblNlZ21lbnRTdGFydCwgb25Db25maWdSZWFkeSwgb25EYXRhUmVhZHksIG9uRGF0YUZhaWxlZCwgb25Mb2FkZWRJbWFnZXMsIG9uRE9NTG9hZGVkLCBvbkRlc3Ryb3ldKTtcbiAgLyoqXG4gICAqIEJ1aWxkIHRoZSBhbmltYXRpb24gdmlld1xuICAgKi9cbiAgdmFyIFZpZXcgPSAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfb2JqZWN0U3ByZWFkMih7XG4gICAgc3R5bGU6IHN0eWxlLFxuICAgIHJlZjogYW5pbWF0aW9uQ29udGFpbmVyXG4gIH0sIHJlc3QpKTtcbiAgcmV0dXJuIHtcbiAgICBWaWV3OiBWaWV3LFxuICAgIHBsYXk6IHBsYXksXG4gICAgc3RvcDogc3RvcCxcbiAgICBwYXVzZTogcGF1c2UsXG4gICAgc2V0U3BlZWQ6IHNldFNwZWVkLFxuICAgIGdvVG9BbmRTdG9wOiBnb1RvQW5kU3RvcCxcbiAgICBnb1RvQW5kUGxheTogZ29Ub0FuZFBsYXksXG4gICAgc2V0RGlyZWN0aW9uOiBzZXREaXJlY3Rpb24sXG4gICAgcGxheVNlZ21lbnRzOiBwbGF5U2VnbWVudHMsXG4gICAgc2V0U3ViZnJhbWU6IHNldFN1YmZyYW1lLFxuICAgIGdldER1cmF0aW9uOiBnZXREdXJhdGlvbixcbiAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgIGFuaW1hdGlvbkNvbnRhaW5lclJlZjogYW5pbWF0aW9uQ29udGFpbmVyLFxuICAgIGFuaW1hdGlvbkxvYWRlZDogYW5pbWF0aW9uTG9hZGVkLFxuICAgIGFuaW1hdGlvbkl0ZW06IGFuaW1hdGlvbkluc3RhbmNlUmVmLmN1cnJlbnRcbiAgfTtcbn07XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIGdldENvbnRhaW5lclZpc2liaWxpdHkoY29udGFpbmVyKSB7XG4gIHZhciBfY29udGFpbmVyJGdldEJvdW5kaW4gPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgdG9wID0gX2NvbnRhaW5lciRnZXRCb3VuZGluLnRvcCxcbiAgICBoZWlnaHQgPSBfY29udGFpbmVyJGdldEJvdW5kaW4uaGVpZ2h0O1xuICB2YXIgY3VycmVudCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIHRvcDtcbiAgdmFyIG1heCA9IHdpbmRvdy5pbm5lckhlaWdodCArIGhlaWdodDtcbiAgcmV0dXJuIGN1cnJlbnQgLyBtYXg7XG59XG5mdW5jdGlvbiBnZXRDb250YWluZXJDdXJzb3JQb3NpdGlvbihjb250YWluZXIsIGN1cnNvclgsIGN1cnNvclkpIHtcbiAgdmFyIF9jb250YWluZXIkZ2V0Qm91bmRpbjIgPSBjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgdG9wID0gX2NvbnRhaW5lciRnZXRCb3VuZGluMi50b3AsXG4gICAgbGVmdCA9IF9jb250YWluZXIkZ2V0Qm91bmRpbjIubGVmdCxcbiAgICB3aWR0aCA9IF9jb250YWluZXIkZ2V0Qm91bmRpbjIud2lkdGgsXG4gICAgaGVpZ2h0ID0gX2NvbnRhaW5lciRnZXRCb3VuZGluMi5oZWlnaHQ7XG4gIHZhciB4ID0gKGN1cnNvclggLSBsZWZ0KSAvIHdpZHRoO1xuICB2YXIgeSA9IChjdXJzb3JZIC0gdG9wKSAvIGhlaWdodDtcbiAgcmV0dXJuIHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn1cbnZhciB1c2VJbml0SW50ZXJhY3Rpdml0eSA9IGZ1bmN0aW9uIHVzZUluaXRJbnRlcmFjdGl2aXR5KF9yZWYpIHtcbiAgdmFyIHdyYXBwZXJSZWYgPSBfcmVmLndyYXBwZXJSZWYsXG4gICAgYW5pbWF0aW9uSXRlbSA9IF9yZWYuYW5pbWF0aW9uSXRlbSxcbiAgICBtb2RlID0gX3JlZi5tb2RlLFxuICAgIGFjdGlvbnMgPSBfcmVmLmFjdGlvbnM7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHdyYXBwZXIgPSB3cmFwcGVyUmVmLmN1cnJlbnQ7XG4gICAgaWYgKCF3cmFwcGVyIHx8ICFhbmltYXRpb25JdGVtIHx8ICFhY3Rpb25zLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhbmltYXRpb25JdGVtLnN0b3AoKTtcbiAgICB2YXIgc2Nyb2xsTW9kZUhhbmRsZXIgPSBmdW5jdGlvbiBzY3JvbGxNb2RlSGFuZGxlcigpIHtcbiAgICAgIHZhciBhc3NpZ25lZFNlZ21lbnQgPSBudWxsO1xuICAgICAgdmFyIHNjcm9sbEhhbmRsZXIgPSBmdW5jdGlvbiBzY3JvbGxIYW5kbGVyKCkge1xuICAgICAgICB2YXIgY3VycmVudFBlcmNlbnQgPSBnZXRDb250YWluZXJWaXNpYmlsaXR5KHdyYXBwZXIpO1xuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBhY3Rpb24gdGhhdCBzYXRpc2ZpZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gY29uZGl0aW9uc1xuICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9ucy5maW5kKGZ1bmN0aW9uIChfcmVmMikge1xuICAgICAgICAgIHZhciB2aXNpYmlsaXR5ID0gX3JlZjIudmlzaWJpbGl0eTtcbiAgICAgICAgICByZXR1cm4gdmlzaWJpbGl0eSAmJiBjdXJyZW50UGVyY2VudCA+PSB2aXNpYmlsaXR5WzBdICYmIGN1cnJlbnRQZXJjZW50IDw9IHZpc2liaWxpdHlbMV07XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBTa2lwIGlmIG5vIG1hdGNoaW5nIGFjdGlvbiB3YXMgZm91bmQhXG4gICAgICAgIGlmICghYWN0aW9uKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJzZWVrXCIgJiYgYWN0aW9uLnZpc2liaWxpdHkgJiYgYWN0aW9uLmZyYW1lcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAvLyBTZWVrOiBHbyB0byBhIGZyYW1lIGJhc2VkIG9uIHBsYXllciBzY3JvbGwgcG9zaXRpb24gYWN0aW9uXG4gICAgICAgICAgdmFyIGZyYW1lVG9HbyA9IGFjdGlvbi5mcmFtZXNbMF0gKyBNYXRoLmNlaWwoKGN1cnJlbnRQZXJjZW50IC0gYWN0aW9uLnZpc2liaWxpdHlbMF0pIC8gKGFjdGlvbi52aXNpYmlsaXR5WzFdIC0gYWN0aW9uLnZpc2liaWxpdHlbMF0pICogYWN0aW9uLmZyYW1lc1sxXSk7XG4gICAgICAgICAgLy8hIGdvVG9BbmRTdG9wIG11c3QgYmUgcmVsYXRpdmUgdG8gdGhlIHN0YXJ0IG9mIHRoZSBjdXJyZW50IHNlZ21lbnRcbiAgICAgICAgICBhbmltYXRpb25JdGVtLmdvVG9BbmRTdG9wKGZyYW1lVG9HbyAtIGFuaW1hdGlvbkl0ZW0uZmlyc3RGcmFtZSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJsb29wXCIpIHtcbiAgICAgICAgICAvLyBMb29wOiBMb29wIGEgZ2l2ZW4gZnJhbWVzXG4gICAgICAgICAgaWYgKGFzc2lnbmVkU2VnbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gaWYgbm90IHBsYXlpbmcgYW55IHNlZ21lbnRzIGN1cnJlbnRseS4gcGxheSB0aG9zZSBzZWdtZW50cyBhbmQgc2F2ZSB0byBzdGF0ZVxuICAgICAgICAgICAgYW5pbWF0aW9uSXRlbS5wbGF5U2VnbWVudHMoYWN0aW9uLmZyYW1lcywgdHJ1ZSk7XG4gICAgICAgICAgICBhc3NpZ25lZFNlZ21lbnQgPSBhY3Rpb24uZnJhbWVzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiBwbGF5aW5nIGFueSBzZWdtZW50cyBjdXJyZW50bHkuXG4gICAgICAgICAgICAvL2NoZWNrIGlmIHNlZ21lbnRzIGluIHN0YXRlIGFyZSBlcXVhbCB0byB0aGUgZnJhbWVzIHNlbGVjdGVkIGJ5IGFjdGlvblxuICAgICAgICAgICAgaWYgKGFzc2lnbmVkU2VnbWVudCAhPT0gYWN0aW9uLmZyYW1lcykge1xuICAgICAgICAgICAgICAvLyBpZiB0aGV5IGFyZSBub3QgZXF1YWwuIG5ldyBzZWdtZW50cyBhcmUgdG8gYmUgbG9hZGVkXG4gICAgICAgICAgICAgIGFuaW1hdGlvbkl0ZW0ucGxheVNlZ21lbnRzKGFjdGlvbi5mcmFtZXMsIHRydWUpO1xuICAgICAgICAgICAgICBhc3NpZ25lZFNlZ21lbnQgPSBhY3Rpb24uZnJhbWVzO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChhbmltYXRpb25JdGVtLmlzUGF1c2VkKSB7XG4gICAgICAgICAgICAgIC8vIGlmIHRoZXkgYXJlIGVxdWFsIHRoZSBwbGF5IG1ldGhvZCBtdXN0IGJlIGNhbGxlZCBvbmx5IGlmIGxvdHRpZSBpcyBwYXVzZWRcbiAgICAgICAgICAgICAgYW5pbWF0aW9uSXRlbS5wbGF5U2VnbWVudHMoYWN0aW9uLmZyYW1lcywgdHJ1ZSk7XG4gICAgICAgICAgICAgIGFzc2lnbmVkU2VnbWVudCA9IGFjdGlvbi5mcmFtZXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJwbGF5XCIgJiYgYW5pbWF0aW9uSXRlbS5pc1BhdXNlZCkge1xuICAgICAgICAgIC8vIFBsYXk6IFJlc2V0IHNlZ21lbnRzIGFuZCBjb250aW51ZSBwbGF5aW5nIGZ1bGwgYW5pbWF0aW9uIGZyb20gY3VycmVudCBwb3NpdGlvblxuICAgICAgICAgIGFuaW1hdGlvbkl0ZW0ucmVzZXRTZWdtZW50cyh0cnVlKTtcbiAgICAgICAgICBhbmltYXRpb25JdGVtLnBsYXkoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aW9uLnR5cGUgPT09IFwic3RvcFwiKSB7XG4gICAgICAgICAgLy8gU3RvcDogU3RvcCBwbGF5YmFja1xuICAgICAgICAgIGFuaW1hdGlvbkl0ZW0uZ29Ub0FuZFN0b3AoYWN0aW9uLmZyYW1lc1swXSAtIGFuaW1hdGlvbkl0ZW0uZmlyc3RGcmFtZSAtIDEsIHRydWUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInNjcm9sbFwiLCBzY3JvbGxIYW5kbGVyKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzY3JvbGxcIiwgc2Nyb2xsSGFuZGxlcik7XG4gICAgICB9O1xuICAgIH07XG4gICAgdmFyIGN1cnNvck1vZGVIYW5kbGVyID0gZnVuY3Rpb24gY3Vyc29yTW9kZUhhbmRsZXIoKSB7XG4gICAgICB2YXIgaGFuZGxlQ3Vyc29yID0gZnVuY3Rpb24gaGFuZGxlQ3Vyc29yKF94LCBfeSkge1xuICAgICAgICB2YXIgeCA9IF94O1xuICAgICAgICB2YXIgeSA9IF95O1xuICAgICAgICAvLyBSZXNvbHZlIGN1cnNvciBwb3NpdGlvbiBpZiBjdXJzb3IgaXMgaW5zaWRlIGNvbnRhaW5lclxuICAgICAgICBpZiAoeCAhPT0gLTEgJiYgeSAhPT0gLTEpIHtcbiAgICAgICAgICAvLyBHZXQgY29udGFpbmVyIGN1cnNvciBwb3NpdGlvblxuICAgICAgICAgIHZhciBwb3MgPSBnZXRDb250YWluZXJDdXJzb3JQb3NpdGlvbih3cmFwcGVyLCB4LCB5KTtcbiAgICAgICAgICAvLyBVc2UgdGhlIHJlc29sdmVkIHBvc2l0aW9uXG4gICAgICAgICAgeCA9IHBvcy54O1xuICAgICAgICAgIHkgPSBwb3MueTtcbiAgICAgICAgfVxuICAgICAgICAvLyBGaW5kIHRoZSBmaXJzdCBhY3Rpb24gdGhhdCBzYXRpc2ZpZXMgdGhlIGN1cnJlbnQgcG9zaXRpb24gY29uZGl0aW9uc1xuICAgICAgICB2YXIgYWN0aW9uID0gYWN0aW9ucy5maW5kKGZ1bmN0aW9uIChfcmVmMykge1xuICAgICAgICAgIHZhciBwb3NpdGlvbiA9IF9yZWYzLnBvc2l0aW9uO1xuICAgICAgICAgIGlmIChwb3NpdGlvbiAmJiBBcnJheS5pc0FycmF5KHBvc2l0aW9uLngpICYmIEFycmF5LmlzQXJyYXkocG9zaXRpb24ueSkpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID49IHBvc2l0aW9uLnhbMF0gJiYgeCA8PSBwb3NpdGlvbi54WzFdICYmIHkgPj0gcG9zaXRpb24ueVswXSAmJiB5IDw9IHBvc2l0aW9uLnlbMV07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwb3NpdGlvbiAmJiAhTnVtYmVyLmlzTmFOKHBvc2l0aW9uLngpICYmICFOdW1iZXIuaXNOYU4ocG9zaXRpb24ueSkpIHtcbiAgICAgICAgICAgIHJldHVybiB4ID09PSBwb3NpdGlvbi54ICYmIHkgPT09IHBvc2l0aW9uLnk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIFNraXAgaWYgbm8gbWF0Y2hpbmcgYWN0aW9uIHdhcyBmb3VuZCFcbiAgICAgICAgaWYgKCFhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gUHJvY2VzcyBhY3Rpb24gdHlwZXM6XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJzZWVrXCIgJiYgYWN0aW9uLnBvc2l0aW9uICYmIEFycmF5LmlzQXJyYXkoYWN0aW9uLnBvc2l0aW9uLngpICYmIEFycmF5LmlzQXJyYXkoYWN0aW9uLnBvc2l0aW9uLnkpICYmIGFjdGlvbi5mcmFtZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgLy8gU2VlazogR28gdG8gYSBmcmFtZSBiYXNlZCBvbiBwbGF5ZXIgc2Nyb2xsIHBvc2l0aW9uIGFjdGlvblxuICAgICAgICAgIHZhciB4UGVyY2VudCA9ICh4IC0gYWN0aW9uLnBvc2l0aW9uLnhbMF0pIC8gKGFjdGlvbi5wb3NpdGlvbi54WzFdIC0gYWN0aW9uLnBvc2l0aW9uLnhbMF0pO1xuICAgICAgICAgIHZhciB5UGVyY2VudCA9ICh5IC0gYWN0aW9uLnBvc2l0aW9uLnlbMF0pIC8gKGFjdGlvbi5wb3NpdGlvbi55WzFdIC0gYWN0aW9uLnBvc2l0aW9uLnlbMF0pO1xuICAgICAgICAgIGFuaW1hdGlvbkl0ZW0ucGxheVNlZ21lbnRzKGFjdGlvbi5mcmFtZXMsIHRydWUpO1xuICAgICAgICAgIGFuaW1hdGlvbkl0ZW0uZ29Ub0FuZFN0b3AoTWF0aC5jZWlsKCh4UGVyY2VudCArIHlQZXJjZW50KSAvIDIgKiAoYWN0aW9uLmZyYW1lc1sxXSAtIGFjdGlvbi5mcmFtZXNbMF0pKSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBcImxvb3BcIikge1xuICAgICAgICAgIGFuaW1hdGlvbkl0ZW0ucGxheVNlZ21lbnRzKGFjdGlvbi5mcmFtZXMsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSA9PT0gXCJwbGF5XCIpIHtcbiAgICAgICAgICAvLyBQbGF5OiBSZXNldCBzZWdtZW50cyBhbmQgY29udGludWUgcGxheWluZyBmdWxsIGFuaW1hdGlvbiBmcm9tIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgICAgICBpZiAoYW5pbWF0aW9uSXRlbS5pc1BhdXNlZCkge1xuICAgICAgICAgICAgYW5pbWF0aW9uSXRlbS5yZXNldFNlZ21lbnRzKGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYW5pbWF0aW9uSXRlbS5wbGF5U2VnbWVudHMoYWN0aW9uLmZyYW1lcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFjdGlvbi50eXBlID09PSBcInN0b3BcIikge1xuICAgICAgICAgIGFuaW1hdGlvbkl0ZW0uZ29Ub0FuZFN0b3AoYWN0aW9uLmZyYW1lc1swXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB2YXIgbW91c2VNb3ZlSGFuZGxlciA9IGZ1bmN0aW9uIG1vdXNlTW92ZUhhbmRsZXIoZXYpIHtcbiAgICAgICAgaGFuZGxlQ3Vyc29yKGV2LmNsaWVudFgsIGV2LmNsaWVudFkpO1xuICAgICAgfTtcbiAgICAgIHZhciBtb3VzZU91dEhhbmRsZXIgPSBmdW5jdGlvbiBtb3VzZU91dEhhbmRsZXIoKSB7XG4gICAgICAgIGhhbmRsZUN1cnNvcigtMSwgLTEpO1xuICAgICAgfTtcbiAgICAgIHdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBtb3VzZU1vdmVIYW5kbGVyKTtcbiAgICAgIHdyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIG1vdXNlT3V0SGFuZGxlcik7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB3cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgbW91c2VNb3ZlSGFuZGxlcik7XG4gICAgICAgIHdyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlb3V0XCIsIG1vdXNlT3V0SGFuZGxlcik7XG4gICAgICB9O1xuICAgIH07XG4gICAgc3dpdGNoIChtb2RlKSB7XG4gICAgICBjYXNlIFwic2Nyb2xsXCI6XG4gICAgICAgIHJldHVybiBzY3JvbGxNb2RlSGFuZGxlcigpO1xuICAgICAgY2FzZSBcImN1cnNvclwiOlxuICAgICAgICByZXR1cm4gY3Vyc29yTW9kZUhhbmRsZXIoKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICB9LCBbbW9kZSwgYW5pbWF0aW9uSXRlbV0pO1xufTtcbnZhciB1c2VMb3R0aWVJbnRlcmFjdGl2aXR5ID0gZnVuY3Rpb24gdXNlTG90dGllSW50ZXJhY3Rpdml0eShfcmVmNCkge1xuICB2YXIgYWN0aW9ucyA9IF9yZWY0LmFjdGlvbnMsXG4gICAgbW9kZSA9IF9yZWY0Lm1vZGUsXG4gICAgbG90dGllT2JqID0gX3JlZjQubG90dGllT2JqO1xuICB2YXIgYW5pbWF0aW9uSXRlbSA9IGxvdHRpZU9iai5hbmltYXRpb25JdGVtLFxuICAgIFZpZXcgPSBsb3R0aWVPYmouVmlldyxcbiAgICBhbmltYXRpb25Db250YWluZXJSZWYgPSBsb3R0aWVPYmouYW5pbWF0aW9uQ29udGFpbmVyUmVmO1xuICB1c2VJbml0SW50ZXJhY3Rpdml0eSh7XG4gICAgYWN0aW9uczogYWN0aW9ucyxcbiAgICBhbmltYXRpb25JdGVtOiBhbmltYXRpb25JdGVtLFxuICAgIG1vZGU6IG1vZGUsXG4gICAgd3JhcHBlclJlZjogYW5pbWF0aW9uQ29udGFpbmVyUmVmXG4gIH0pO1xuICByZXR1cm4gVmlldztcbn07XG5cbnZhciBfZXhjbHVkZWQgPSBbXCJzdHlsZVwiLCBcImludGVyYWN0aXZpdHlcIl07XG52YXIgTG90dGllID0gZnVuY3Rpb24gTG90dGllKHByb3BzKSB7XG4gIHZhciBfYSwgX2IsIF9jO1xuICB2YXIgc3R5bGUgPSBwcm9wcy5zdHlsZSxcbiAgICBpbnRlcmFjdGl2aXR5ID0gcHJvcHMuaW50ZXJhY3Rpdml0eSxcbiAgICBsb3R0aWVQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgLyoqXG4gICAqIEluaXRpYWxpemUgdGhlICd1c2VMb3R0aWUnIGhvb2tcbiAgICovXG4gIHZhciBfdXNlTG90dGllID0gdXNlTG90dGllKGxvdHRpZVByb3BzLCBzdHlsZSksXG4gICAgVmlldyA9IF91c2VMb3R0aWUuVmlldyxcbiAgICBwbGF5ID0gX3VzZUxvdHRpZS5wbGF5LFxuICAgIHN0b3AgPSBfdXNlTG90dGllLnN0b3AsXG4gICAgcGF1c2UgPSBfdXNlTG90dGllLnBhdXNlLFxuICAgIHNldFNwZWVkID0gX3VzZUxvdHRpZS5zZXRTcGVlZCxcbiAgICBnb1RvQW5kU3RvcCA9IF91c2VMb3R0aWUuZ29Ub0FuZFN0b3AsXG4gICAgZ29Ub0FuZFBsYXkgPSBfdXNlTG90dGllLmdvVG9BbmRQbGF5LFxuICAgIHNldERpcmVjdGlvbiA9IF91c2VMb3R0aWUuc2V0RGlyZWN0aW9uLFxuICAgIHBsYXlTZWdtZW50cyA9IF91c2VMb3R0aWUucGxheVNlZ21lbnRzLFxuICAgIHNldFN1YmZyYW1lID0gX3VzZUxvdHRpZS5zZXRTdWJmcmFtZSxcbiAgICBnZXREdXJhdGlvbiA9IF91c2VMb3R0aWUuZ2V0RHVyYXRpb24sXG4gICAgZGVzdHJveSA9IF91c2VMb3R0aWUuZGVzdHJveSxcbiAgICBhbmltYXRpb25Db250YWluZXJSZWYgPSBfdXNlTG90dGllLmFuaW1hdGlvbkNvbnRhaW5lclJlZixcbiAgICBhbmltYXRpb25Mb2FkZWQgPSBfdXNlTG90dGllLmFuaW1hdGlvbkxvYWRlZCxcbiAgICBhbmltYXRpb25JdGVtID0gX3VzZUxvdHRpZS5hbmltYXRpb25JdGVtO1xuICAvKipcbiAgICogTWFrZSB0aGUgaG9vayB2YXJpYWJsZXMvbWV0aG9kcyBhdmFpbGFibGUgdGhyb3VnaCB0aGUgcHJvdmlkZWQgJ2xvdHRpZVJlZidcbiAgICovXG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHByb3BzLmxvdHRpZVJlZikge1xuICAgICAgcHJvcHMubG90dGllUmVmLmN1cnJlbnQgPSB7XG4gICAgICAgIHBsYXk6IHBsYXksXG4gICAgICAgIHN0b3A6IHN0b3AsXG4gICAgICAgIHBhdXNlOiBwYXVzZSxcbiAgICAgICAgc2V0U3BlZWQ6IHNldFNwZWVkLFxuICAgICAgICBnb1RvQW5kUGxheTogZ29Ub0FuZFBsYXksXG4gICAgICAgIGdvVG9BbmRTdG9wOiBnb1RvQW5kU3RvcCxcbiAgICAgICAgc2V0RGlyZWN0aW9uOiBzZXREaXJlY3Rpb24sXG4gICAgICAgIHBsYXlTZWdtZW50czogcGxheVNlZ21lbnRzLFxuICAgICAgICBzZXRTdWJmcmFtZTogc2V0U3ViZnJhbWUsXG4gICAgICAgIGdldER1cmF0aW9uOiBnZXREdXJhdGlvbixcbiAgICAgICAgZGVzdHJveTogZGVzdHJveSxcbiAgICAgICAgYW5pbWF0aW9uQ29udGFpbmVyUmVmOiBhbmltYXRpb25Db250YWluZXJSZWYsXG4gICAgICAgIGFuaW1hdGlvbkxvYWRlZDogYW5pbWF0aW9uTG9hZGVkLFxuICAgICAgICBhbmltYXRpb25JdGVtOiBhbmltYXRpb25JdGVtXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFsoX2EgPSBwcm9wcy5sb3R0aWVSZWYpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jdXJyZW50XSk7XG4gIHJldHVybiB1c2VMb3R0aWVJbnRlcmFjdGl2aXR5KHtcbiAgICBsb3R0aWVPYmo6IHtcbiAgICAgIFZpZXc6IFZpZXcsXG4gICAgICBwbGF5OiBwbGF5LFxuICAgICAgc3RvcDogc3RvcCxcbiAgICAgIHBhdXNlOiBwYXVzZSxcbiAgICAgIHNldFNwZWVkOiBzZXRTcGVlZCxcbiAgICAgIGdvVG9BbmRTdG9wOiBnb1RvQW5kU3RvcCxcbiAgICAgIGdvVG9BbmRQbGF5OiBnb1RvQW5kUGxheSxcbiAgICAgIHNldERpcmVjdGlvbjogc2V0RGlyZWN0aW9uLFxuICAgICAgcGxheVNlZ21lbnRzOiBwbGF5U2VnbWVudHMsXG4gICAgICBzZXRTdWJmcmFtZTogc2V0U3ViZnJhbWUsXG4gICAgICBnZXREdXJhdGlvbjogZ2V0RHVyYXRpb24sXG4gICAgICBkZXN0cm95OiBkZXN0cm95LFxuICAgICAgYW5pbWF0aW9uQ29udGFpbmVyUmVmOiBhbmltYXRpb25Db250YWluZXJSZWYsXG4gICAgICBhbmltYXRpb25Mb2FkZWQ6IGFuaW1hdGlvbkxvYWRlZCxcbiAgICAgIGFuaW1hdGlvbkl0ZW06IGFuaW1hdGlvbkl0ZW1cbiAgICB9LFxuICAgIGFjdGlvbnM6IChfYiA9IGludGVyYWN0aXZpdHkgPT09IG51bGwgfHwgaW50ZXJhY3Rpdml0eSA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW50ZXJhY3Rpdml0eS5hY3Rpb25zKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBbXSxcbiAgICBtb2RlOiAoX2MgPSBpbnRlcmFjdGl2aXR5ID09PSBudWxsIHx8IGludGVyYWN0aXZpdHkgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGludGVyYWN0aXZpdHkubW9kZSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogXCJzY3JvbGxcIlxuICB9KTtcbn07XG5cbmV4cG9ydCB7IExvdHRpZSBhcyBkZWZhdWx0LCB1c2VMb3R0aWUsIHVzZUxvdHRpZUludGVyYWN0aXZpdHkgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmVzLmpzLm1hcFxuIiwiXG5pbXBvcnQgTG90dGllIGZyb20gXCJsb3R0aWUtcmVhY3RcIjtcbmltcG9ydCBhbmltYXRpb25EYXRhIGZyb20gJy4uL2FuaW1hdGlvbnMvQW5pbWF0aW9uIC0gMTcwNjAyNDk5NTY3Mi5qc29uJztcblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb250YWluZXI6IHtcbiAgICAvLyBvcGFjaXR5OiAwLFxuICAgIGFuaW1hdGlvbjogJ2ZhZGUtaW4gMXMgZm9yd2FyZHMnLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBqdXN0aWZ5Q29udGVudDogJ2NlbnRlcicsXG4gICAgYWxpZ25JdGVtczogJ2NlbnRlcicsXG4gICAgaGVpZ2h0OiAnMTAwdmgnXG4gIH0sXG4gIGxvdHRpZToge1xuICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgIHRvcDogJzUwJScsXG4gICAgbGVmdDogJzUwJScsXG4gICAgdHJhbnNmb3JtOiAndHJhbnNsYXRlKC01MCUsIC01MCUpJ1xuICB9XG59O1xuXG5jb25zdCBTcGlubmVyID0gKCkgPT4ge1xuICBjb25zb2xlLmxvZygnU3Bpbm5lcicpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgc3R5bGU9e3N0eWxlcy5jb250YWluZXJ9PlxuICAgICAgPExvdHRpZVxuICAgICAgICBhbmltYXRpb25EYXRhPXthbmltYXRpb25EYXRhfVxuICAgICAgICBsb29wPXt0cnVlfVxuICAgICAgICBoZWlnaHQ9ezIwMH1cbiAgICAgICAgd2lkdGg9ezIwMH1cbiAgICAgICAgLy8gc3R5bGU9e3N0eWxlcy5sb3R0aWV9XG4gICAgICAvPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgU3Bpbm5lcjsiLCIvLyBEYXRlOiAyMDIxLzA5LzAzXG5pbXBvcnQgUmVhY3QsIHsgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCwgdXNlU3RhdGUsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQHRhbnN0YWNrL3JlYWN0LXF1ZXJ5JztcbmltcG9ydCB7ICBmZXRjaFNlcnZpY2VzMX0gZnJvbSAnLi4vYXBpL3BhZ2VzSW5mbyc7XG4vLyBpbXBvcnQgeyBTcGlubmVyIH0gZnJvbSAncmVhY3QtYm9vdHN0cmFwJztcbmltcG9ydCBTcGlubmVyIGZyb20gJy4uL2NvbXBvbmVudHMvc3Bpbm5lcic7XG5pbXBvcnQgeyBTZXJ2aWNpbzIgfSBmcm9tICcuLi90eXBlcy90eXBlcyc7XG5cbi8vIFBhc28gMTogQ3JlYXIgdW4gY29udGV4dG9cbmNvbnN0IFNlcnZpY2lvc0NvbnRleHQgPSBjcmVhdGVDb250ZXh0PHsgc2VydmljZXM6IFNlcnZpY2lvMltdIHwgbnVsbCB8IHVuZGVmaW5lZCwgbG9hZGluZzogYm9vbGVhbiB9Pih7IHNlcnZpY2VzOiBudWxsICwgbG9hZGluZzogdHJ1ZSB9KTtcblxuY29uc3QgU2VydmljaW9zSWRQcm92aWRlcjogUmVhY3QuRkM8eyBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIH0+ID0gKHsgY2hpbGRyZW4gfSkgPT4ge1xuICAgIGNvbnN0IFtsb2FkaW5nSW1hZ2VzLCBzZXRMb2FkaW5nSW1hZ2VzXSA9IHVzZVN0YXRlPGJvb2xlYW4+KHRydWUpO1xuICAgIGNvbnN0IHtkYXRhOiBzZXJ2aWNlcyxlcnJvcjogZXJyb3JTZXJ2aWNlcyxpc0xvYWRpbmc6IGlzTG9hZGluZ1NlcnZpY2VzLGlzRXJyb3I6IGlzRXJyb3JTZXJ2aWNlcyxcbiAgICB9PXVzZVF1ZXJ5KFxuICAgICAgICB7cXVlcnlLZXk6WydzZXJ2aWNlcyddLCBxdWVyeUZuOiBmZXRjaFNlcnZpY2VzMSxzdGFsZVRpbWU6IDEwMDAqNjAqMzAscmVmZXRjaE9uV2luZG93Rm9jdXM6IGZhbHNlLHJlZmV0Y2hJbnRlcnZhbDogMTAwMCo2MCozMCx9XG4gICAgICAgICk7XG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgaWYgKHNlcnZpY2VzKSB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZVByb21pc2VzID0gc2VydmljZXMubWFwKHNlcnZpY2UgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgICAgICAgICAgaW1nLnNyYyA9IHNlcnZpY2UuaW1hZ2VuO1xuICAgICAgICAgICAgICAgICAgICBpbWcub25sb2FkID0gcmVzb2x2ZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBQcm9taXNlLmFsbChpbWFnZVByb21pc2VzKS50aGVuKCgpID0+IHNldExvYWRpbmdJbWFnZXMoZmFsc2UpKTtcbiAgICAgICAgfVxuICAgIH0sIFtzZXJ2aWNlc10pO1xuXG5cbiAgICBpZiAoaXNMb2FkaW5nU2VydmljZXMgKSB7XG4gICAgICAgIHJldHVybiA8ZGl2PmNhcmdhbmRvLi4uPC9kaXY+XG4gICAgfVxuICAgIFxuXG4gICAgaWYgKCBpc0Vycm9yU2VydmljZXMgICkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCBlcnJvclNlcnZpY2VzLCAgJ2FxdWkgZXN0b3kgZW4gZXJyb3InKTtcbiAgICAgICAgO1xuICAgIH1cbiAgICBpZiAoc2VydmljZXMpIHtcbiAgICAgICAgY29uc3QgaW1hZ2VzOiBIVE1MSW1hZ2VFbGVtZW50W10gPSAgW107XG4gICAgICAgIGNvbnNvbGUubG9nKCdhcXVpIGVzdG95IGVuIHNlcnZpY2VzIGdldHNlcicsc2VydmljZXMpO1xuICAgICAgICBzZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlKSA9PiB7XG4gICAgICAgICAgICBpbWFnZXMucHVzaChuZXcgSW1hZ2UoKSk7XG4gICAgICAgICAgICBpbWFnZXNbaW1hZ2VzLmxlbmd0aCAtIDFdLnNyYyA9IHNlcnZpY2UuaW1hZ2VuO1xuICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIGltYWdlc1tpbWFnZXMubGVuZ3RoIC0gMV0ub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgc2V0TG9hZGluZ0ltYWdlcyhmYWxzZSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChsb2FkaW5nSW1hZ2VzKSB7XG4gICAgICAgIHJldHVybiA8ZGl2PjxTcGlubmVyLz48L2Rpdj5cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFNlcnZpY2lvc0NvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3sgc2VydmljZXMsIGxvYWRpbmc6IGlzTG9hZGluZ1NlcnZpY2VzIHx8IGxvYWRpbmdJbWFnZXMgfX0+XG4gICAgICAgICAgICB7Y2hpbGRyZW59XG4gICAgICAgIDwvU2VydmljaW9zQ29udGV4dC5Qcm92aWRlcj5cbiAgICApO1xufTtcbmV4cG9ydCBjb25zdCB1c2VTZXJ2aWNpb3MgPSAoKSA9PiB1c2VDb250ZXh0KFNlcnZpY2lvc0NvbnRleHQpO1xuXG5leHBvcnQgZGVmYXVsdCBTZXJ2aWNpb3NJZFByb3ZpZGVyO1xuXG4iXSwibmFtZXMiOlsibCIsIm4iLCJwIiwicSIsInYiLCJ3IiwieiIsIkEiLCJhIiwiQiIsIkMiLCJEIiwiRSIsImIiLCJlIiwiRyIsIkgiLCJJIiwiSyIsIkwiLCJNIiwiZCIsImMiLCJrIiwiaCIsImYiLCJtIiwiTiIsIk8iLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiVyIsInJlYWN0TW9kdWxlIiwicmVxdWlyZSQkMCIsImciLCJqc3hSdW50aW1lTW9kdWxlIiwieCIsImV4cG9ydHMiLCJyIiwidCIsInUiLCJ5IiwiRiIsIkoiLCJzY2hlZHVsZXJNb2R1bGUiLCJyZXF1aXJlJCQxIiwibmEiLCJ4YSIsIiRhIiwiYmEiLCJlcnIiLCJyZWFjdERvbU1vZHVsZSIsIl9leHRlbmRzIiwidGFyZ2V0Iiwic291cmNlIiwia2V5IiwiQWN0aW9uIiwib3B0aW9ucyIsImNyZWF0ZUJyb3dzZXJMb2NhdGlvbiIsIndpbmRvdyIsImdsb2JhbEhpc3RvcnkiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJjcmVhdGVCcm93c2VySHJlZiIsInRvIiwidmFsdWUiLCJtZXNzYWdlIiwiY29uZCIsImxvY2F0aW9uIiwiaW5kZXgiLCJjdXJyZW50Iiwic3RhdGUiLCJfcmVmIiwicGF0aCIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsImdldExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsInZhbGlkYXRlTG9jYXRpb24iLCJ2NUNvbXBhdCIsImFjdGlvbiIsImxpc3RlbmVyIiwiZ2V0SW5kZXgiLCJoYW5kbGVQb3AiLCJuZXh0SW5kZXgiLCJkZWx0YSIsImhpc3RvcnkiLCJwdXNoIiwiaGlzdG9yeVN0YXRlIiwidXJsIiwiZXJyb3IiLCJyZXBsYWNlIiwiY3JlYXRlVVJMIiwiYmFzZSIsImhyZWYiLCJmbiIsIlJlc3VsdFR5cGUiLCJyb3V0ZSIsInJvdXRlcyIsIm1hcFJvdXRlUHJvcGVydGllcyIsInBhcmVudFBhdGgiLCJtYW5pZmVzdCIsInRyZWVQYXRoIiwiaWQiLCJpbmRleFJvdXRlIiwicGF0aE9yTGF5b3V0Um91dGUiLCJsb2NhdGlvbkFyZyIsImJhc2VuYW1lIiwiYnJhbmNoZXMiLCJtYXRjaGVzIiwiaSIsIm1hdGNoIiwibG9hZGVyRGF0YSIsInBhcmFtcyIsInBhcmVudHNNZXRhIiwiZmxhdHRlblJvdXRlIiwicmVsYXRpdmVQYXRoIiwibWV0YSIsInJvdXRlc01ldGEiLCJfcm91dGUkcGF0aCIsImV4cGxvZGVkIiwic2VnbWVudHMiLCJmaXJzdCIsInJlc3QiLCJpc09wdGlvbmFsIiwicmVxdWlyZWQiLCJyZXN0RXhwbG9kZWQiLCJyZXN1bHQiLCJzdWJwYXRoIiwicyIsImluaXRpYWxTY29yZSIsInNjb3JlIiwic2VnbWVudCIsImJyYW5jaCIsIm1hdGNoZWRQYXJhbXMiLCJtYXRjaGVkUGF0aG5hbWUiLCJlbmQiLCJyZW1haW5pbmdQYXRobmFtZSIsInBhdHRlcm4iLCJtYXRjaGVyIiwiY29tcGlsZWRQYXJhbXMiLCJwYXRobmFtZUJhc2UiLCJjYXB0dXJlR3JvdXBzIiwibWVtbyIsInBhcmFtTmFtZSIsInNwbGF0VmFsdWUiLCJjYXNlU2Vuc2l0aXZlIiwicmVnZXhwU291cmNlIiwiXyIsInN0YXJ0SW5kZXgiLCJuZXh0Q2hhciIsImZyb21QYXRobmFtZSIsInRvUGF0aG5hbWUiLCJjaGFyIiwiZmllbGQiLCJkZXN0IiwidjdfcmVsYXRpdmVTcGxhdFBhdGgiLCJwYXRoTWF0Y2hlcyIsImlkeCIsInRvQXJnIiwicm91dGVQYXRobmFtZXMiLCJsb2NhdGlvblBhdGhuYW1lIiwiaXNQYXRoUmVsYXRpdmUiLCJpc0VtcHR5UGF0aCIsImZyb20iLCJyb3V0ZVBhdGhuYW1lSW5kZXgiLCJ0b1NlZ21lbnRzIiwiaGFzRXhwbGljaXRUcmFpbGluZ1NsYXNoIiwiaGFzQ3VycmVudFRyYWlsaW5nU2xhc2giLCJwYXRocyIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJkYXRhIiwiaW50ZXJuYWwiLCJBQlNPTFVURV9VUkxfUkVHRVgiLCJpbml0Iiwicm91dGVyV2luZG93IiwiaXNCcm93c2VyIiwiaXNTZXJ2ZXIiLCJkZXRlY3RFcnJvckJvdW5kYXJ5IiwiZGF0YVJvdXRlcyIsImluRmxpZ2h0RGF0YVJvdXRlcyIsImZ1dHVyZSIsInVubGlzdGVuSGlzdG9yeSIsInN1YnNjcmliZXJzIiwic2F2ZWRTY3JvbGxQb3NpdGlvbnMiLCJnZXRTY3JvbGxSZXN0b3JhdGlvbktleSIsImdldFNjcm9sbFBvc2l0aW9uIiwiaW5pdGlhbFNjcm9sbFJlc3RvcmVkIiwiaW5pdGlhbE1hdGNoZXMiLCJpbml0aWFsRXJyb3JzIiwiaW5pdGlhbGl6ZWQiLCJoYXNMYXp5Um91dGVzIiwiaGFzTG9hZGVycyIsImVycm9ycyIsInJvdXRlciIsInBlbmRpbmdBY3Rpb24iLCJwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0IiwicGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyIiwicGVuZGluZ1ZpZXdUcmFuc2l0aW9uRW5hYmxlZCIsImFwcGxpZWRWaWV3VHJhbnNpdGlvbnMiLCJyZW1vdmVQYWdlSGlkZUV2ZW50TGlzdGVuZXIiLCJpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24iLCJpc1JldmFsaWRhdGlvblJlcXVpcmVkIiwiY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXMiLCJjYW5jZWxsZWRGZXRjaGVyTG9hZHMiLCJmZXRjaENvbnRyb2xsZXJzIiwiaW5jcmVtZW50aW5nTG9hZElkIiwicGVuZGluZ05hdmlnYXRpb25Mb2FkSWQiLCJmZXRjaFJlbG9hZElkcyIsImZldGNoUmVkaXJlY3RJZHMiLCJmZXRjaExvYWRNYXRjaGVzIiwiYWN0aXZlRmV0Y2hlcnMiLCJkZWxldGVkRmV0Y2hlcnMiLCJhY3RpdmVEZWZlcnJlZHMiLCJibG9ja2VyRnVuY3Rpb25zIiwiaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUiLCJpbml0aWFsaXplIiwiaGlzdG9yeUFjdGlvbiIsImJsb2NrZXJLZXkiLCJzaG91bGRCbG9ja05hdmlnYXRpb24iLCJ1cGRhdGVCbG9ja2VyIiwiYmxvY2tlcnMiLCJ1cGRhdGVTdGF0ZSIsInN0YXJ0TmF2aWdhdGlvbiIsIl9zYXZlQXBwbGllZFRyYW5zaXRpb25zIiwiZGlzcG9zZSIsImRlbGV0ZUZldGNoZXIiLCJkZWxldGVCbG9ja2VyIiwic3Vic2NyaWJlIiwibmV3U3RhdGUiLCJvcHRzIiwiY29tcGxldGVkRmV0Y2hlcnMiLCJkZWxldGVkRmV0Y2hlcnNLZXlzIiwiZmV0Y2hlciIsInN1YnNjcmliZXIiLCJjb21wbGV0ZU5hdmlnYXRpb24iLCJfdGVtcCIsIl9sb2NhdGlvbiRzdGF0ZSIsIl9sb2NhdGlvbiRzdGF0ZTIiLCJmbHVzaFN5bmMiLCJpc0FjdGlvblJlbG9hZCIsImFjdGlvbkRhdGEiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJ2aWV3VHJhbnNpdGlvbk9wdHMiLCJwcmlvclBhdGhzIiwidG9QYXRocyIsImdldFNhdmVkU2Nyb2xsUG9zaXRpb24iLCJuYXZpZ2F0ZSIsIm5vcm1hbGl6ZWRQYXRoIiwic3VibWlzc2lvbiIsImN1cnJlbnRMb2NhdGlvbiIsIm5leHRMb2NhdGlvbiIsInVzZXJSZXBsYWNlIiwicmV2YWxpZGF0ZSIsImludGVycnVwdEFjdGl2ZUxvYWRzIiwic2F2ZVNjcm9sbFBvc2l0aW9uIiwicm91dGVzVG9Vc2UiLCJsb2FkaW5nTmF2aWdhdGlvbiIsIm5vdEZvdW5kTWF0Y2hlcyIsImNhbmNlbEFjdGl2ZURlZmVycmVkcyIsInJlcXVlc3QiLCJwZW5kaW5nQWN0aW9uRGF0YSIsInBlbmRpbmdFcnJvciIsImFjdGlvbk91dHB1dCIsImhhbmRsZUFjdGlvbiIsInNob3J0Q2lyY3VpdGVkIiwiaGFuZGxlTG9hZGVycyIsIm5hdmlnYXRpb24iLCJhY3Rpb25NYXRjaCIsInN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uIiwiYm91bmRhcnlNYXRjaCIsIm92ZXJyaWRlTmF2aWdhdGlvbiIsImZldGNoZXJTdWJtaXNzaW9uIiwiaW5pdGlhbEh5ZHJhdGlvbiIsImFjdGl2ZVN1Ym1pc3Npb24iLCJtYXRjaGVzVG9Mb2FkIiwicmV2YWxpZGF0aW5nRmV0Y2hlcnMiLCJyb3V0ZUlkIiwidXBkYXRlZEZldGNoZXJzIiwibWFya0ZldGNoUmVkaXJlY3RzRG9uZSIsInJmIiwicmV2YWxpZGF0aW5nRmV0Y2hlciIsImFib3J0RmV0Y2hlciIsImFib3J0UGVuZGluZ0ZldGNoUmV2YWxpZGF0aW9ucyIsInJlc3VsdHMiLCJsb2FkZXJSZXN1bHRzIiwiZmV0Y2hlclJlc3VsdHMiLCJjYWxsTG9hZGVyc0FuZE1heWJlUmVzb2x2ZURhdGEiLCJyZWRpcmVjdCIsImZldGNoZXJLZXkiLCJkZWZlcnJlZERhdGEiLCJhYm9ydGVkIiwiZGlkQWJvcnRGZXRjaExvYWRzIiwiYWJvcnRTdGFsZUZldGNoTG9hZHMiLCJzaG91bGRVcGRhdGVGZXRjaGVycyIsImZldGNoIiwic2V0RmV0Y2hlckVycm9yIiwiaGFuZGxlRmV0Y2hlckFjdGlvbiIsImhhbmRsZUZldGNoZXJMb2FkZXIiLCJyZXF1ZXN0TWF0Y2hlcyIsImV4aXN0aW5nRmV0Y2hlciIsInVwZGF0ZUZldGNoZXJTdGF0ZSIsImFib3J0Q29udHJvbGxlciIsImZldGNoUmVxdWVzdCIsIm9yaWdpbmF0aW5nTG9hZElkIiwiYWN0aW9uUmVzdWx0IiwicmV2YWxpZGF0aW9uUmVxdWVzdCIsImxvYWRJZCIsImxvYWRGZXRjaGVyIiwic3RhbGVLZXkiLCJkb25lRmV0Y2hlciIsIl90ZW1wMiIsInJlZGlyZWN0TG9jYXRpb24iLCJpc0RvY3VtZW50UmVsb2FkIiwicmVkaXJlY3RIaXN0b3J5QWN0aW9uIiwiZm9ybU1ldGhvZCIsImZvcm1BY3Rpb24iLCJmb3JtRW5jVHlwZSIsImN1cnJlbnRNYXRjaGVzIiwiZmV0Y2hlcnNUb0xvYWQiLCJnZXRGZXRjaGVyIiwiZGVsZXRlRmV0Y2hlckFuZFVwZGF0ZVN0YXRlIiwiY291bnQiLCJjb250cm9sbGVyIiwibWFya0ZldGNoZXJzRG9uZSIsImtleXMiLCJkb25lS2V5cyIsImxhbmRlZElkIiwieWVldGVkS2V5cyIsImdldEJsb2NrZXIiLCJibG9ja2VyIiwibmV3QmxvY2tlciIsIl9yZWYyIiwiZW50cmllcyIsImJsb2NrZXJGdW5jdGlvbiIsInByZWRpY2F0ZSIsImNhbmNlbGxlZFJvdXRlSWRzIiwiZGZkIiwiZW5hYmxlU2Nyb2xsUmVzdG9yYXRpb24iLCJwb3NpdGlvbnMiLCJnZXRQb3NpdGlvbiIsImdldEtleSIsImdldFNjcm9sbEtleSIsIl9pbnRlcm5hbFNldFJvdXRlcyIsIm5ld1JvdXRlcyIsInByZXBlbmRCYXNlbmFtZSIsImZyb21Sb3V0ZUlkIiwicmVsYXRpdmUiLCJjb250ZXh0dWFsTWF0Y2hlcyIsImFjdGl2ZVJvdXRlTWF0Y2giLCJub3JtYWxpemVGb3JtTWV0aG9kIiwiaXNGZXRjaGVyIiwiZ2V0SW52YWxpZEJvZHlFcnJvciIsInJhd0Zvcm1NZXRob2QiLCJ0ZXh0IiwiYWNjIiwiX3JlZjMiLCJuYW1lIiwianNvbiIsInNlYXJjaFBhcmFtcyIsImZvcm1EYXRhIiwiYm91bmRhcnlJZCIsImJvdW5kYXJ5TWF0Y2hlcyIsImlzSW5pdGlhbExvYWQiLCJjdXJyZW50VXJsIiwibmV4dFVybCIsIm5hdmlnYXRpb25NYXRjaGVzIiwiY3VycmVudFJvdXRlTWF0Y2giLCJuZXh0Um91dGVNYXRjaCIsImZldGNoZXJNYXRjaGVzIiwiZmV0Y2hlck1hdGNoIiwic2hvdWxkUmV2YWxpZGF0ZSIsImN1cnJlbnRMb2FkZXJEYXRhIiwiY3VycmVudE1hdGNoIiwiaXNOZXciLCJpc01pc3NpbmdEYXRhIiwiY3VycmVudFBhdGgiLCJsb2FkZXJNYXRjaCIsImFyZyIsInJvdXRlQ2hvaWNlIiwibGF6eVJvdXRlIiwicm91dGVUb1VwZGF0ZSIsInJvdXRlVXBkYXRlcyIsImxhenlSb3V0ZVByb3BlcnR5IiwiaXNQcm9wZXJ0eVN0YXRpY2FsbHlEZWZpbmVkIiwidHlwZSIsInJlc3VsdFR5cGUiLCJvblJlamVjdCIsInJ1bkhhbmRsZXIiLCJoYW5kbGVyIiwicmVqZWN0IiwiYWJvcnRQcm9taXNlIiwiaGFuZGxlckVycm9yIiwidmFsdWVzIiwiaXNTYW1lQmFzZW5hbWUiLCJjb250ZW50VHlwZSIsIl9yZXN1bHQkaW5pdCIsIl9yZXN1bHQkaW5pdDIiLCJzaWduYWwiLCJzdGF0dXNDb2RlIiwiZm91bmRFcnJvciIsImxvYWRlckhlYWRlcnMiLCJuZXdMb2FkZXJEYXRhIiwibWVyZ2VkTG9hZGVyRGF0YSIsIl90ZW1wNSIsIm1ldGhvZCIsImVycm9yTWVzc2FnZSIsImRlZmVycmVkIiwic2lnbmFscyIsImlzUmV2YWxpZGF0aW5nTG9hZGVyIiwidW53cmFwIiwiX3dpbmRvdyIsInRyYW5zaXRpb25zIiwic2Vzc2lvblBvc2l0aW9ucyIsIlJlYWN0LmNyZWF0ZUNvbnRleHQiLCJVTlNBRkVfaW52YXJpYW50IiwibmF2aWdhdG9yIiwiUmVhY3QudXNlQ29udGV4dCIsImpvaW5lZFBhdGhuYW1lIiwiY2IiLCJSZWFjdC51c2VMYXlvdXRFZmZlY3QiLCJpc0RhdGFSb3V0ZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwicm91dGVQYXRobmFtZXNKc29uIiwiVU5TQUZFX2dldFJlc29sdmVUb01hdGNoZXMiLCJhY3RpdmVSZWYiLCJSZWFjdC51c2VSZWYiLCJSZWFjdC51c2VDYWxsYmFjayIsImNvbnRleHQiLCJvdXRsZXQiLCJSZWFjdC5jcmVhdGVFbGVtZW50Iiwicm91dGVNYXRjaCIsIlJlYWN0LnVzZU1lbW8iLCJkYXRhUm91dGVyU3RhdGUiLCJwYXJlbnRNYXRjaGVzIiwicGFyZW50UGFyYW1zIiwicGFyZW50UGF0aG5hbWVCYXNlIiwibG9jYXRpb25Gcm9tQ29udGV4dCIsIl9wYXJzZWRMb2NhdGlvbkFyZyRwYSIsInBhcnNlZExvY2F0aW9uQXJnIiwicmVuZGVyZWRNYXRjaGVzIiwic3RhY2siLCJwcmVTdHlsZXMiLCJkZXZJbmZvIiwiUmVhY3QuRnJhZ21lbnQiLCJSZWFjdC5Db21wb25lbnQiLCJwcm9wcyIsImVycm9ySW5mbyIsInJvdXRlQ29udGV4dCIsImNoaWxkcmVuIiwiX2RhdGFSb3V0ZXJTdGF0ZTIiLCJfZGF0YVJvdXRlclN0YXRlIiwiZXJyb3JJbmRleCIsInJlbmRlckZhbGxiYWNrIiwiZmFsbGJhY2tJbmRleCIsIm5lZWRzVG9SdW5Mb2FkZXIiLCJzaG91bGRSZW5kZXJIeWRyYXRlRmFsbGJhY2siLCJlcnJvckVsZW1lbnQiLCJoeWRyYXRlRmFsbGJhY2tFbGVtZW50IiwiZ2V0Q2hpbGRyZW4iLCJEYXRhUm91dGVySG9vayIsIkRhdGFSb3V0ZXJTdGF0ZUhvb2siLCJ1c2VEYXRhUm91dGVyQ29udGV4dCIsImhvb2tOYW1lIiwiY3R4IiwidGhpc1JvdXRlIiwiX3N0YXRlJGVycm9ycyIsIl9yZWY0IiwiaXNTdGF0aWMiLCJqc29uUGF0aCIsIlJlYWN0LnVzZUVmZmVjdCIsIl9yZWY1IiwiYmFzZW5hbWVQcm9wIiwibG9jYXRpb25Qcm9wIiwibmF2aWdhdGlvblR5cGUiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJsb2NhdGlvbkNvbnRleHQiLCJ0cmFpbGluZ1BhdGhuYW1lIiwidXBkYXRlcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiZXZlbnQiLCJfZXhjbHVkZWQiLCJzZXJpYWxpemVkIiwidmFsIiwiVU5TQUZFX0Vycm9yUmVzcG9uc2VJbXBsIiwiRXJyb3JDb25zdHJ1Y3RvciIsIlJlYWN0IiwiUmVhY3RET00iLCJyZXNvbHZlIiwicmVhc29uIiwiZmFsbGJhY2tFbGVtZW50Iiwic2V0U3RhdGVJbXBsIiwiUmVhY3QudXNlU3RhdGUiLCJwZW5kaW5nU3RhdGUiLCJzZXRQZW5kaW5nU3RhdGUiLCJ2dENvbnRleHQiLCJzZXRWdENvbnRleHQiLCJyZW5kZXJEZmQiLCJzZXRSZW5kZXJEZmQiLCJ0cmFuc2l0aW9uIiwic2V0VHJhbnNpdGlvbiIsImludGVycnVwdGlvbiIsInNldEludGVycnVwdGlvbiIsImZldGNoZXJEYXRhIiwidjdfc3RhcnRUcmFuc2l0aW9uIiwib3B0SW5TdGFydFRyYW5zaXRpb24iLCJzZXRTdGF0ZSIsImlzVmlld1RyYW5zaXRpb25VbmF2YWlsYWJsZSIsInJlbmRlclByb21pc2UiLCJVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQiLCJVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCIsIlVOU0FGRV91c2VSb3V0ZXNJbXBsIiwiUmVhY3QuZm9yd2FyZFJlZiIsIl9yZWY3IiwicmVmIiwib25DbGljayIsInJlbG9hZERvY3VtZW50IiwidW5zdGFibGVfdmlld1RyYW5zaXRpb24iLCJVTlNBRkVfTmF2aWdhdGlvbkNvbnRleHQiLCJhYnNvbHV0ZUhyZWYiLCJpc0V4dGVybmFsIiwidGFyZ2V0VXJsIiwiaW50ZXJuYWxPbkNsaWNrIiwiaGFuZGxlQ2xpY2siLCJfcmVmOCIsImFyaWFDdXJyZW50UHJvcCIsImNsYXNzTmFtZVByb3AiLCJzdHlsZVByb3AiLCJyb3V0ZXJTdGF0ZSIsImlzVHJhbnNpdGlvbmluZyIsIm5leHRMb2NhdGlvblBhdGhuYW1lIiwiZW5kU2xhc2hQb3NpdGlvbiIsImlzQWN0aXZlIiwiaXNQZW5kaW5nIiwicmVuZGVyUHJvcHMiLCJhcmlhQ3VycmVudCIsImNsYXNzTmFtZSIsInN0eWxlIiwicmVwbGFjZVByb3AiLCJuZXh0UGF0aCIsIm5vb3AiLCJ1cGRhdGVyIiwiaW5wdXQiLCJ1cGRhdGVkQXQiLCJzdGFsZVRpbWUiLCJmaWx0ZXJzIiwicXVlcnkiLCJleGFjdCIsImZldGNoU3RhdHVzIiwicXVlcnlLZXkiLCJzdGFsZSIsIm11dGF0aW9uIiwibXV0YXRpb25LZXkiLCJpc1BsYWluT2JqZWN0IiwiYXJyYXkiLCJhSXRlbXMiLCJhU2l6ZSIsImJJdGVtcyIsImJTaXplIiwiY29weSIsImVxdWFsSXRlbXMiLCJvIiwiY3RvciIsInByb3QiLCJtcyIsInByZXZEYXRhIiwiaXRlbXMiLCJpdGVtIiwibWF4IiwibmV3SXRlbXMiLCJfYSIsIl9fcHJpdmF0ZUFkZCIsIl9mb2N1c2VkIiwiX2NsZWFudXAiLCJfc2V0dXAiLCJfX3ByaXZhdGVTZXQiLCJvbkZvY3VzIiwiX19wcml2YXRlR2V0Iiwic2V0dXAiLCJmb2N1c2VkIiwiX29ubGluZSIsIm9uT25saW5lIiwib25saW5lTGlzdGVuZXIiLCJvZmZsaW5lTGlzdGVuZXIiLCJvbmxpbmUiLCJmYWlsdXJlQ291bnQiLCJuZXR3b3JrTW9kZSIsImNvbmZpZyIsImlzUmV0cnlDYW5jZWxsZWQiLCJpc1Jlc29sdmVkIiwiY29udGludWVGbiIsInByb21pc2VSZXNvbHZlIiwicHJvbWlzZVJlamVjdCIsInByb21pc2UiLCJvdXRlclJlc29sdmUiLCJvdXRlclJlamVjdCIsImNhbmNlbCIsImNhbmNlbE9wdGlvbnMiLCJjYW5jZWxSZXRyeSIsImNvbnRpbnVlUmV0cnkiLCJzaG91bGRQYXVzZSIsInBhdXNlIiwiY29udGludWVSZXNvbHZlIiwiY2FuQ29udGludWUiLCJydW4iLCJwcm9taXNlT3JWYWx1ZSIsInJldHJ5IiwicmV0cnlEZWxheSIsImRlbGF5Iiwic2hvdWxkUmV0cnkiLCJxdWV1ZSIsInRyYW5zYWN0aW9ucyIsIm5vdGlmeUZuIiwiY2FsbGJhY2siLCJiYXRjaE5vdGlmeUZuIiwic2NoZWR1bGVGbiIsInNldFNjaGVkdWxlciIsImJhdGNoIiwiZmx1c2giLCJzY2hlZHVsZSIsImJhdGNoQ2FsbHMiLCJhcmdzIiwib3JpZ2luYWxRdWV1ZSIsImNsaWVudCIsIl9leGVjdXRlRmV0Y2giLCJfdXBkYXRlU3RhbGVUaW1lb3V0IiwiX2NvbXB1dGVSZWZldGNoSW50ZXJ2YWwiLCJfdXBkYXRlUmVmZXRjaEludGVydmFsIiwiX3VwZGF0ZVRpbWVycyIsIl9jbGVhclN0YWxlVGltZW91dCIsIl9jbGVhclJlZmV0Y2hJbnRlcnZhbCIsIl91cGRhdGVRdWVyeSIsIl9ub3RpZnkiLCJfY2xpZW50IiwiX2N1cnJlbnRRdWVyeSIsIl9jdXJyZW50UXVlcnlJbml0aWFsU3RhdGUiLCJfY3VycmVudFJlc3VsdCIsIl9jdXJyZW50UmVzdWx0U3RhdGUiLCJfY3VycmVudFJlc3VsdE9wdGlvbnMiLCJfc2VsZWN0RXJyb3IiLCJfc2VsZWN0Rm4iLCJfc2VsZWN0UmVzdWx0IiwiX2xhc3RRdWVyeVdpdGhEZWZpbmVkRGF0YSIsIl9zdGFsZVRpbWVvdXRJZCIsIl9yZWZldGNoSW50ZXJ2YWxJZCIsIl9jdXJyZW50UmVmZXRjaEludGVydmFsIiwiX3RyYWNrZWRQcm9wcyIsIl9fcHJpdmF0ZU1ldGhvZCIsImV4ZWN1dGVGZXRjaF9mbiIsInVwZGF0ZVRpbWVyc19mbiIsImNsZWFyU3RhbGVUaW1lb3V0X2ZuIiwiY2xlYXJSZWZldGNoSW50ZXJ2YWxfZm4iLCJub3RpZnlPcHRpb25zIiwicHJldk9wdGlvbnMiLCJwcmV2UXVlcnkiLCJ1cGRhdGVRdWVyeV9mbiIsIm1vdW50ZWQiLCJ1cGRhdGVTdGFsZVRpbWVvdXRfZm4iLCJuZXh0UmVmZXRjaEludGVydmFsIiwiY29tcHV0ZVJlZmV0Y2hJbnRlcnZhbF9mbiIsInVwZGF0ZVJlZmV0Y2hJbnRlcnZhbF9mbiIsInRyYWNrZWRSZXN1bHQiLCJkZWZhdWx0ZWRPcHRpb25zIiwiZmV0Y2hPcHRpb25zIiwicHJldlJlc3VsdCIsInByZXZSZXN1bHRTdGF0ZSIsInByZXZSZXN1bHRPcHRpb25zIiwicXVlcnlJbml0aWFsU3RhdGUiLCJlcnJvclVwZGF0ZWRBdCIsImlzUGxhY2Vob2xkZXJEYXRhIiwiZmV0Y2hPbk1vdW50IiwiZmV0Y2hPcHRpb25hbGx5Iiwic2VsZWN0RXJyb3IiLCJwbGFjZWhvbGRlckRhdGEiLCJpc0ZldGNoaW5nIiwiaXNFcnJvciIsImlzTG9hZGluZyIsIm5leHRSZXN1bHQiLCJkZWZhdWx0Tm90aWZ5T3B0aW9ucyIsInNob3VsZE5vdGlmeUxpc3RlbmVycyIsIm5vdGlmeU9uQ2hhbmdlUHJvcHMiLCJub3RpZnlPbkNoYW5nZVByb3BzVmFsdWUiLCJpbmNsdWRlZFByb3BzIiwidHlwZWRLZXkiLCJub3RpZnlfZm4iLCJ0aW1lb3V0IiwibmV4dEludGVydmFsIiwib2JzZXJ2ZXIiLCJvcHRpbWlzdGljUmVzdWx0IiwicXVlcnlDbGllbnQiLCJpc1Jlc2V0IiwidGhyb3dFcnJvciIsImVycm9yUmVzZXRCb3VuZGFyeSIsInRocm93T25FcnJvciIsIk9ic2VydmVyIiwiaXNSZXN0b3JpbmciLCJSZWFjdC51c2VTeW5jRXh0ZXJuYWxTdG9yZSIsIm9uU3RvcmVDaGFuZ2UiLCJ1bnN1YnNjcmliZSIsInRoaXNBcmciLCJjYWNoZSIsInRoaW5nIiwic3RyIiwicHJvdG90eXBlIiwia2luZCIsIm9iaiIsImFsbE93bktleXMiLCJsZW4iLCJfa2V5IiwiY2FzZWxlc3MiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsImNvbnRlbnQiLCJjb25zdHJ1Y3RvciIsInN1cGVyQ29uc3RydWN0b3IiLCJkZXNjcmlwdG9ycyIsInNvdXJjZU9iaiIsImRlc3RPYmoiLCJmaWx0ZXIiLCJwcm9wRmlsdGVyIiwicHJvcCIsIm1lcmdlZCIsInNlYXJjaFN0cmluZyIsInBvc2l0aW9uIiwibGFzdEluZGV4IiwiYXJyIiwiVHlwZWRBcnJheSIsIml0ZXJhdG9yIiwicGFpciIsInJlZ0V4cCIsInAxIiwicDIiLCJoYXNPd25Qcm9wZXJ0eSIsInJlZHVjZXIiLCJyZWR1Y2VkRGVzY3JpcHRvcnMiLCJkZXNjcmlwdG9yIiwicmV0IiwiYXJyYXlPclN0cmluZyIsImRlbGltaXRlciIsImRlZmluZSIsImRlZmF1bHRWYWx1ZSIsInNpemUiLCJhbHBoYWJldCIsImxlbmd0aCIsInZpc2l0IiwicmVkdWNlZFZhbHVlIiwiY29kZSIsInJlc3BvbnNlIiwidXRpbHMiLCJjdXN0b21Qcm9wcyIsImF4aW9zRXJyb3IiLCJkb3RzIiwidG9rZW4iLCJvcHRpb24iLCJtZXRhVG9rZW5zIiwidmlzaXRvciIsImRlZmF1bHRWaXNpdG9yIiwiaW5kZXhlcyIsInVzZUJsb2IiLCJjb252ZXJ0VmFsdWUiLCJlbCIsImV4cG9zZWRIZWxwZXJzIiwiYnVpbGQiLCJlbmNvZGUiLCJjaGFyTWFwIiwiZW5jb2RlciIsIl9lbmNvZGUiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZWRQYXJhbXMiLCJoYXNobWFya0luZGV4IiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJVUkxTZWFyY2hQYXJhbXMiLCJGb3JtRGF0YSIsIkJsb2IiLCJwcm9kdWN0IiwicGxhdGZvcm0iLCJoZWxwZXJzIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiaXNMYXN0IiwicmF3VmFsdWUiLCJwYXJzZXIiLCJoZWFkZXJzIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwiaXNGaWxlTGlzdCIsIl9Gb3JtRGF0YSIsInRyYW5zaXRpb25hbCIsImZvcmNlZEpTT05QYXJzaW5nIiwiSlNPTlJlcXVlc3RlZCIsInN0cmljdEpTT05QYXJzaW5nIiwicmF3SGVhZGVycyIsInBhcnNlZCIsImxpbmUiLCJoZWFkZXIiLCJ0b2tlbnMiLCJ0b2tlbnNSRSIsImlzSGVhZGVyTmFtZUZpbHRlciIsImFjY2Vzc29yTmFtZSIsIm1ldGhvZE5hbWUiLCJhcmcxIiwiYXJnMiIsImFyZzMiLCJ2YWx1ZU9yUmV3cml0ZSIsInJld3JpdGUiLCJzZWxmIiwic2V0SGVhZGVyIiwiX3ZhbHVlIiwiX2hlYWRlciIsIl9yZXdyaXRlIiwibEhlYWRlciIsInNldEhlYWRlcnMiLCJkZWxldGVkIiwiZGVsZXRlSGVhZGVyIiwiZm9ybWF0Iiwibm9ybWFsaXplZCIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJjb21wdXRlZCIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwibWFwcGVkIiwiaGVhZGVyVmFsdWUiLCJmbnMiLCJkZWZhdWx0cyIsIkF4aW9zSGVhZGVycyIsInZhbGlkYXRlU3RhdHVzIiwiZXhwaXJlcyIsImRvbWFpbiIsInNlY3VyZSIsImNvb2tpZSIsImJhc2VVUkwiLCJyZWxhdGl2ZVVSTCIsInJlcXVlc3RlZFVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsIm9yaWdpblVSTCIsInJlc29sdmVVUkwiLCJyZXF1ZXN0VVJMIiwic2FtcGxlc0NvdW50IiwibWluIiwiYnl0ZXMiLCJ0aW1lc3RhbXBzIiwiaGVhZCIsInRhaWwiLCJmaXJzdFNhbXBsZVRTIiwiY2h1bmtMZW5ndGgiLCJub3ciLCJzdGFydGVkQXQiLCJieXRlc0NvdW50IiwicGFzc2VkIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJsb2FkZWQiLCJ0b3RhbCIsInByb2dyZXNzQnl0ZXMiLCJyYXRlIiwiaW5SYW5nZSIsInJlcXVlc3REYXRhIiwicmVxdWVzdEhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJ3aXRoWFNSRlRva2VuIiwib25DYW5jZWxlZCIsImRvbmUiLCJ1c2VybmFtZSIsInBhc3N3b3JkIiwiZnVsbFBhdGgiLCJvbmxvYWRlbmQiLCJyZXNwb25zZUhlYWRlcnMiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwieHNyZlZhbHVlIiwicHJvdG9jb2wiLCJhZGFwdGVyIiwiYWRhcHRlcnMiLCJuYW1lT3JBZGFwdGVyIiwicmVqZWN0ZWRSZWFzb25zIiwicmVhc29ucyIsImNvbmZpZzEiLCJjb25maWcyIiwiZ2V0TWVyZ2VkVmFsdWUiLCJtZXJnZURlZXBQcm9wZXJ0aWVzIiwidmFsdWVGcm9tQ29uZmlnMiIsImRlZmF1bHRUb0NvbmZpZzIiLCJtZXJnZURpcmVjdEtleXMiLCJtZXJnZU1hcCIsIm1lcmdlIiwiY29uZmlnVmFsdWUiLCJ2YWxpZGF0b3JzIiwidmFsaWRhdG9yIiwidmVyc2lvbiIsImZvcm1hdE1lc3NhZ2UiLCJvcHQiLCJkZXNjIiwic2NoZW1hIiwiYWxsb3dVbmtub3duIiwiaW5zdGFuY2VDb25maWciLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJjb25maWdPclVybCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJjb250ZXh0SGVhZGVycyIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJjaGFpbiIsIm5ld0NvbmZpZyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImdlbmVyYXRlSFRUUE1ldGhvZCIsImlzRm9ybSIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJvbmZ1bGZpbGxlZCIsIl9yZXNvbHZlIiwicGF5bG9hZCIsImRlZmF1bHRDb25maWciLCJBeGlvcyIsImluc3RhbmNlIiwiQ2FuY2VsVG9rZW4iLCJwcm9taXNlcyIsIkh0dHBTdGF0dXNDb2RlIiwiYXhpb3MiLCJnbG9iYWwiLCJmYWN0b3J5IiwidGhpcyIsImZsYWciLCJzb3VyY2VzIiwiZGVzdGluYXRpb24iLCJzb3VyY2VQcm90b3R5cGUiLCJhdHRyIiwib2JqZWN0IiwiUHJveHlGdW5jdGlvbiIsIkF1ZGlvQ29udHJvbGxlciIsImF1ZGlvRmFjdG9yeSIsImF1ZGlvIiwicmF0ZVZhbHVlIiwiYXNzZXRQYXRoIiwiY3JlYXRlUmVndWxhckFycmF5IiwiY3JlYXRlVHlwZWRBcnJheUZhY3RvcnkiLCJwcm9wZXJ0eU5hbWVzIiwidE9mVmFsIiwiYWJzQXJyIiwiZWxlbWVudCIsImN1cnJlbnRUaW1lIiwidG90YWxUaW1lIiwiZnJhbWVNdWx0aXBsaWVyIiwidG90YWxMb29wcyIsImN1cnJlbnRMb29wIiwiZmlyc3RGcmFtZSIsInRvdGFsRnJhbWVzIiwibmF0aXZlRXJyb3IiLCJfY291bnQiLCJjb2xvciIsIm9mZnNldCIsImhzdiIsImNvbG9yTWFwIiwiaGV4IiwiX2NvdW50ZXJJZCIsInByb2Nlc3NlcyIsIndvcmtlckZuIiwid29ya2VySW5zdGFuY2UiLCJ3b3JrZXJQcm94eSIsIl93b3JrZXJTZWxmIiwiY3JlYXRlV29ya2VyIiwiYmxvYiIsInNldHVwV29ya2VyIiwiZGF0YUZ1bmN0aW9uTWFuYWdlciIsImNvbXBsZXRlTGF5ZXJzIiwibGF5ZXJzIiwiY29tcHMiLCJsYXllckRhdGEiLCJqIiwiakxlbiIsImtMZW4iLCJtYXNrUHJvcHMiLCJjb252ZXJ0UGF0aHNUb0Fic29sdXRlVmFsdWVzIiwiZmluZENvbXBMYXllcnMiLCJjb21wbGV0ZVNoYXBlcyIsImNvbXBsZXRlVGV4dCIsImNvbXBsZXRlQ2hhcnMiLCJjaGFycyIsImFzc2V0cyIsImZpbmRDb21wIiwiY29tcCIsImNoZWNrVmVyc2lvbiIsIm1pbmltdW0iLCJhbmltVmVyc2lvblN0cmluZyIsImFuaW1WZXJzaW9uIiwiY2hlY2tUZXh0IiwibWluaW11bVZlcnNpb24iLCJ1cGRhdGVUZXh0TGF5ZXIiLCJ0ZXh0TGF5ZXIiLCJkb2N1bWVudERhdGEiLCJpdGVyYXRlTGF5ZXJzIiwiYW5pbWF0aW9uRGF0YSIsImNoZWNrQ2hhcnMiLCJjaGFyRGF0YSIsImNoZWNrUGF0aFByb3BlcnRpZXMiLCJwYXRoRGF0YSIsImNoZWNrQ29sb3JzIiwiaXRlcmF0ZVNoYXBlcyIsInNoYXBlcyIsImNoZWNrU2hhcGVzIiwiY29tcGxldGVDbG9zaW5nU2hhcGVzIiwiY29tcGxldGVEYXRhIiwibW9kdWxlT2IiLCJmb3JtYXRSZXNwb25zZSIsInhociIsImNvbnRlbnRUeXBlSGVhZGVyIiwibG9hZEFzc2V0IiwiZXJyb3JDYWxsYmFjayIsImFuaW1hdGlvbiIsInByb2Nlc3MiLCJjcmVhdGVQcm9jZXNzIiwib25Db21wbGV0ZSIsIm9uRXJyb3IiLCJsb2FkQW5pbWF0aW9uIiwicHJvY2Vzc0lkIiwibG9hZERhdGEiLCJjb21wbGV0ZUFuaW1hdGlvbiIsImFuaW0iLCJwcm94eUltYWdlIiwiY2FudmFzIiwiaW1hZ2VMb2FkZWQiLCJmb290YWdlTG9hZGVkIiwiZ2V0QXNzZXRzUGF0aCIsImFzc2V0RGF0YSIsImFzc2V0c1BhdGgiLCJvcmlnaW5hbFBhdGgiLCJpbWFnZVBhdGgiLCJ0ZXN0SW1hZ2VMb2FkZWQiLCJpbWciLCJpbnRlcnZhbElkIiwiYm94IiwiY3JlYXRlSW1hZ2VEYXRhIiwib2IiLCJjcmVhdGVJbWdEYXRhIiwiY3JlYXRlRm9vdGFnZURhdGEiLCJmb290YWdlRGF0YSIsImxvYWRBc3NldHMiLCJzZXRQYXRoIiwic2V0QXNzZXRzUGF0aCIsImdldEFzc2V0IiwiZGVzdHJveSIsImxvYWRlZEltYWdlcyIsImxvYWRlZEZvb3RhZ2VzIiwic2V0Q2FjaGVUeXBlIiwiZWxlbWVudEhlbHBlciIsIkltYWdlUHJlbG9hZGVyRmFjdG9yeSIsImV2ZW50TmFtZSIsImNhbGxiYWNrcyIsInBhcnNlUGF5bG9hZExpbmVzIiwibGluZXMiLCJrZXlzQ291bnQiLCJfbWFya2VycyIsIm1hcmtlcnMiLCJfbWFya2VyIiwibWFya2VyRGF0YSIsInJlZ2lzdGVyQ29tcG9zaXRpb24iLCJfdGhpc1Byb2plY3RGdW5jdGlvbiIsImFuaW1UeXBlIiwiUmVuZGVyZXJDbGFzcyIsIndyYXBwZXIiLCJ3cmFwcGVyQXR0cmlidXRlcyIsImxvb3AiLCJhdXRvcGxheSIsInByZXJlbmRlciIsIm5ld0xheWVycyIsImV4cHJlc3Npb25zUGx1Z2luIiwic2VnbWVudFBhdGgiLCJhbmltRGF0YSIsIndpZHRoIiwiaGVpZ2h0IiwiX3dpZHRoIiwiX2hlaWdodCIsIm1hcmtlck5hbWUiLCJtYXJrZXIiLCJpc0ZyYW1lIiwibnVtVmFsdWUiLCJuZXh0VmFsdWUiLCJfaXNDb21wbGV0ZSIsInBlbmRpbmdGcmFtZSIsImZvcmNlRmxhZyIsImlzTG9vcGluZyIsInJlZ2lzdGVyZWRBbmltYXRpb25zIiwiaW5pdFRpbWUiLCJwbGF5aW5nQW5pbWF0aW9uc051bSIsIl9zdG9wcGVkIiwiX2lzRnJvemVuIiwicmVtb3ZlRWxlbWVudCIsImV2IiwiYW5pbUl0ZW0iLCJzdWJ0cmFjdFBsYXlpbmdDb3VudCIsInJlZ2lzdGVyQW5pbWF0aW9uIiwic2V0dXBBbmltYXRpb24iLCJnZXRSZWdpc3RlcmVkQW5pbWF0aW9ucyIsImxlbkFuaW1zIiwiYW5pbWF0aW9ucyIsImFkZFBsYXlpbmdDb3VudCIsImFjdGl2YXRlIiwic2V0U3BlZWQiLCJzZXREaXJlY3Rpb24iLCJwbGF5IiwicmVzdW1lIiwibm93VGltZSIsImVsYXBzZWRUaW1lIiwiZ29Ub0FuZFN0b3AiLCJzdG9wIiwidG9nZ2xlUGF1c2UiLCJzZWFyY2hBbmltYXRpb25zIiwic3RhbmRhbG9uZSIsInJlbmRlcmVyIiwiYW5pbUVsZW1lbnRzIiwiYm9keSIsImRpdiIsInJlc2l6ZSIsImZyZWV6ZSIsInVuZnJlZXplIiwic2V0Vm9sdW1lIiwibXV0ZSIsInVubXV0ZSIsImdldEJlemllckVhc2luZyIsImJlemllcnMiLCJubSIsImJlekVhc2luZyIsIkJlemllckVhc2luZyIsIk5FV1RPTl9JVEVSQVRJT05TIiwiTkVXVE9OX01JTl9TTE9QRSIsIlNVQkRJVklTSU9OX1BSRUNJU0lPTiIsIlNVQkRJVklTSU9OX01BWF9JVEVSQVRJT05TIiwia1NwbGluZVRhYmxlU2l6ZSIsImtTYW1wbGVTdGVwU2l6ZSIsImZsb2F0MzJBcnJheVN1cHBvcnRlZCIsImFBMSIsImFBMiIsImNhbGNCZXppZXIiLCJhVCIsImdldFNsb3BlIiwiYmluYXJ5U3ViZGl2aWRlIiwiYVgiLCJhQSIsImFCIiwibVgxIiwibVgyIiwiY3VycmVudFgiLCJjdXJyZW50VCIsIm5ld3RvblJhcGhzb25JdGVyYXRlIiwiYUd1ZXNzVCIsImN1cnJlbnRTbG9wZSIsInBvaW50cyIsIm1ZMSIsIm1ZMiIsIm1TYW1wbGVWYWx1ZXMiLCJpbnRlcnZhbFN0YXJ0IiwiY3VycmVudFNhbXBsZSIsImxhc3RTYW1wbGUiLCJkaXN0IiwiZ3Vlc3NGb3JUIiwiaW5pdGlhbFNsb3BlIiwiX2RvdWJsZSIsImluaXRpYWxMZW5ndGgiLCJfY3JlYXRlIiwiX3JlbGVhc2UiLCJfbGVuZ3RoIiwiX21heExlbmd0aCIsInBvb2wiLCJuZXdFbGVtZW50IiwicmVsZWFzZSIsImNyZWF0ZSIsIm1hdGgiLCJwb2ludE9uTGluZTJEIiwieDEiLCJ5MSIsIngyIiwieTIiLCJ4MyIsInkzIiwiZGV0MSIsInBvaW50T25MaW5lM0QiLCJ6MSIsInoyIiwiejMiLCJkaXN0MSIsImRpc3QyIiwiZGlzdDMiLCJkaWZmRGlzdCIsImdldEJlemllckxlbmd0aCIsInB0MSIsInB0MiIsInB0MyIsInB0NCIsImN1cnZlU2VnbWVudHMiLCJwdENvb3JkIiwicGVyYyIsImFkZGVkTGVuZ3RoIiwicHREaXN0YW5jZSIsInBvaW50IiwibGFzdFBvaW50IiwibGVuZ3RoRGF0YSIsImdldFNlZ21lbnRzTGVuZ3RoIiwic2hhcGVEYXRhIiwic2VnbWVudHNMZW5ndGgiLCJjbG9zZWQiLCJwYXRoViIsInBhdGhPIiwicGF0aEkiLCJsZW5ndGhzIiwidG90YWxMZW5ndGgiLCJCZXppZXJEYXRhIiwiUG9pbnREYXRhIiwicGFydGlhbCIsImJ1aWxkQmV6aWVyRGF0YSIsInN0b3JlZERhdGEiLCJiZXppZXJOYW1lIiwiYmV6aWVyRGF0YSIsImdldERpc3RhbmNlUGVyYyIsInBlcmNlbnRzIiwiaW5pdFBvcyIsImxlbmd0aFBvcyIsImxQZXJjIiwiZGlyIiwiZ2V0UG9pbnRJblNlZ21lbnQiLCJwZXJjZW50IiwidDEiLCJ1MSIsInB0WCIsInB0WSIsImJlemllclNlZ21lbnRQb2ludHMiLCJnZXROZXdTZWdtZW50Iiwic3RhcnRQZXJjIiwiZW5kUGVyYyIsInQwIiwidTAiLCJ1MHUwdTAiLCJ0MHUwdTBfMyIsInQwdDB1MF8zIiwidDB0MHQwIiwidTB1MHUxIiwidDB1MHUxXzMiLCJ0MHQwdTFfMyIsInQwdDB0MSIsInUwdTF1MSIsInQwdTF1MV8zIiwidDB0MXUxXzMiLCJ0MHQxdDEiLCJ1MXUxdTEiLCJ0MXUxdTFfMyIsInQxdDF1MV8zIiwidDF0MXQxIiwiZnJhbWVOdW0iLCJjYWNoaW5nIiwib2Zmc2V0VGltZSIsIm5ld1ZhbHVlIiwiaXRlcmF0aW9uSW5kZXgiLCJrZXlEYXRhIiwibmV4dEtleURhdGEiLCJrZXlmcmFtZU1ldGFkYXRhIiwiZm5jIiwibmV4dEtleVRpbWUiLCJrZXlUaW1lIiwiZW5kVmFsdWUiLCJpbmQiLCJkaXN0YW5jZUluTGluZSIsInNlZ21lbnRQZXJjIiwib3V0WCIsIm91dFkiLCJpblgiLCJpblkiLCJrZXlWYWx1ZSIsInF1YXRTdGFydCIsInF1YXRFbmQiLCJ0aW1lIiwib3V0IiwiYXgiLCJheSIsImF6IiwiYXciLCJieCIsImJ5IiwiYnoiLCJidyIsIm9tZWdhIiwiY29zb20iLCJzaW5vbSIsInNjYWxlMCIsInNjYWxlMSIsInF1YXQiLCJxeCIsInF5IiwicXoiLCJxdyIsImhlYWRpbmciLCJhdHRpdHVkZSIsImJhbmsiLCJjMSIsImMyIiwiYzMiLCJzMSIsInMyIiwiczMiLCJlbmRUaW1lIiwicmVuZGVyUmVzdWx0IiwibXVsdGlwbGllZFZhbHVlIiwiZmluYWxWYWx1ZSIsImVmZmVjdEZ1bmN0aW9uIiwiZWxlbSIsIm11bHQiLCJjb250YWluZXIiLCJ0aSIsImFyckxlbiIsImdldFByb3AiLCJwb3MiLCJ2WCIsInZZIiwib1giLCJvWSIsImlYIiwiaVkiLCJuZXdQYXRoIiwidmVydGljZXMiLCJvdXRQb2ludHMiLCJpblBvaW50cyIsImNudCIsInNoYXBlUGF0aCIsImNsb25lIiwic2hhcGUiLCJjbG9uZWQiLCJuZXdTaGFwZUNvbGxlY3Rpb24iLCJzaGFwZUNvbGxlY3Rpb24iLCJpbml0RnJhbWUiLCJpbnRlcnBvbGF0ZVNoYXBlIiwicHJldmlvdXNWYWx1ZSIsImtleVByb3BTIiwia2V5UHJvcEUiLCJpc0hvbGQiLCJ2ZXJ0ZXhWYWx1ZSIsImtmIiwiaW50ZXJwb2xhdGVTaGFwZUN1cnJlbnRUaW1lIiwibGFzdEZyYW1lIiwicmVzZXRTaGFwZSIsInNoYXBlc0VxdWFsIiwic2hhcGUxIiwic2hhcGUyIiwic2V0VlZhbHVlIiwicHJvY2Vzc0VmZmVjdHNTZXF1ZW5jZSIsIlNoYXBlUHJvcGVydHkiLCJhZGRFZmZlY3QiLCJLZXlmcmFtZWRTaGFwZVByb3BlcnR5IiwiRWxsU2hhcGVQcm9wZXJ0eSIsImNQb2ludCIsIkVsbFNoYXBlUHJvcGVydHlGYWN0b3J5IiwicDAiLCJzMCIsIl9jdyIsIl92IiwiU3RhclNoYXBlUHJvcGVydHkiLCJTdGFyU2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJudW1QdHMiLCJhbmdsZSIsImxvbmdGbGFnIiwibG9uZ1JhZCIsInNob3J0UmFkIiwibG9uZ1JvdW5kIiwic2hvcnRSb3VuZCIsImxvbmdQZXJpbVNlZ21lbnQiLCJzaG9ydFBlcmltU2VnbWVudCIsInJhZCIsInJvdW5kbmVzcyIsInBlcmltU2VnbWVudCIsImN1cnJlbnRBbmciLCJveCIsIm95IiwiUmVjdFNoYXBlUHJvcGVydHkiLCJSZWN0U2hhcGVQcm9wZXJ0eUZhY3RvcnkiLCJ2MCIsInYxIiwicm91bmQiLCJnZXRTaGFwZVByb3AiLCJkYXRhUHJvcCIsImdldENvbnN0cnVjdG9yRnVuY3Rpb24iLCJnZXRLZXlmcmFtZWRDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiX2NvcyIsIl9zaW4iLCJfdGFuIiwiX3JuZCIsInJlc2V0Iiwicm90YXRlIiwibUNvcyIsIm1TaW4iLCJyb3RhdGVYIiwicm90YXRlWSIsInJvdGF0ZVoiLCJzaGVhciIsInN4Iiwic3kiLCJza2V3Iiwic2tld0Zyb21BeGlzIiwic2NhbGUiLCJzeiIsInNldFRyYW5zZm9ybSIsInRyYW5zbGF0ZSIsInR4IiwidHkiLCJ0eiIsInRyYW5zZm9ybSIsImEyIiwiYjIiLCJkMiIsImUyIiwiZjIiLCJnMiIsImgyIiwiaTIiLCJqMiIsImsyIiwibDIiLCJtMiIsIm4yIiwibzIiLCJfcCIsImExIiwiYjEiLCJkMSIsImUxIiwiZjEiLCJnMSIsImgxIiwiaTEiLCJqMSIsImsxIiwibDEiLCJtMSIsIm4xIiwibzEiLCJtdWx0aXBseSIsIm1hdHJpeCIsIm1hdHJpeFByb3BzIiwiaXNJZGVudGl0eSIsImVxdWFscyIsIm1hdHIiLCJjbG9uZUZyb21Qcm9wcyIsImFwcGx5VG9Qb2ludCIsImFwcGx5VG9YIiwiYXBwbHlUb1kiLCJhcHBseVRvWiIsImdldEludmVyc2VNYXRyaXgiLCJkZXRlcm1pbmFudCIsImludmVyc2VNYXRyaXgiLCJpbnZlcnNlUG9pbnQiLCJwdCIsImludmVyc2VQb2ludHMiLCJwdHMiLCJyZXRQdHMiLCJhcHBseVRvVHJpcGxlUG9pbnRzIiwicDQiLCJwNSIsInAxMiIsInAxMyIsImFwcGx5VG9Qb2ludEFycmF5IiwiYXBwbHlUb1BvaW50U3RyaW5naWZpZWQiLCJ0b0NTUyIsImNzc1ZhbHVlIiwicm91bmRNYXRyaXhQcm9wZXJ0eSIsInRvMmRDU1MiLCJfYiIsIl9jIiwiX2QiLCJfZSIsIl9mIiwicHJlZml4IiwicGx1Z2luIiwidmFyaWFibGUiLCJ2YXJzIiwibW9kaWZpZXJzIiwicmVnaXN0ZXJNb2RpZmllciIsImdldE1vZGlmaWVyIiwic2hhcGVMZW5ndGgiLCJ0b3RhbE1vZGlmaWVyTGVuZ3RoIiwic2hhcGVTZWdtZW50cyIsInNlZ21lbnRPYiIsInNoYXBlUyIsInNoYXBlRSIsInBhdGhzRGF0YSIsIl9pc0ZpcnN0RnJhbWUiLCJfcyIsInNoYXBlUGF0aHMiLCJ0b3RhbFNoYXBlTGVuZ3RoIiwibG9jYWxTaGFwZUNvbGxlY3Rpb24iLCJlZGdlcyIsIm5ld1NoYXBlc0RhdGEiLCJsYXN0U2hhcGVJbkNvbGxlY3Rpb24iLCJsYXN0U2hhcGUiLCJuZXdQYXRocyIsIm5ld1NoYXBlIiwic2hhcGVTZWdtZW50IiwiY3VycmVudExlbmd0aERhdGEiLCJzZWdtZW50Q291bnQiLCJzZWdtZW50TGVuZ3RoIiwiYW1vdW50IiwiY2VudGVyUG9pbnQiLCJwYXRoTGVuZ3RoIiwiY2xvbmVkUGF0aCIsImRlZmF1bHRWZWN0b3IiLCJhcHBseVRvTWF0cml4IiwibWF0IiwiX21kZiIsInByb2Nlc3NLZXlzIiwiZm9yY2VSZW5kZXIiLCJmcmFtZVJhdGUiLCJ2MiIsInB4IiwicHkiLCJwcmVjYWxjdWxhdGVNYXRyaXgiLCJhdXRvT3JpZW50IiwiYWRkRHluYW1pY1Byb3BlcnR5IiwiVHJhbnNmb3JtUHJvcGVydHkiLCJnZXRUcmFuc2Zvcm1Qcm9wZXJ0eSIsInBNYXRyaXgiLCJyTWF0cml4Iiwic01hdHJpeCIsImludiIsInNjYWxlWCIsInNjYWxlWSIsImVsZW1zRGF0YSIsImVsZW1lbnRzIiwibmV3RWxlbWVudHMiLCJyZW5kZXJGbGFnIiwiaXRlbXNUcmFuc2Zvcm0iLCJjb250IiwiaGFzUmVsb2FkZWQiLCJjb3BpZXMiLCJncm91cCIsImVsZW1zIiwidHJhbnNmb3JtRGF0YSIsIm9mZnNldE1vZHVsbyIsInJvdW5kT2Zmc2V0IiwicFByb3BzIiwiclByb3BzIiwic1Byb3BzIiwiaXRlcmF0aW9uIiwiY3VycmVudFYiLCJjdXJyZW50SSIsImN1cnJlbnRPIiwiY2xvc2VyViIsImRpc3RhbmNlIiwibmV3UG9zUGVyYyIsInJkIiwic2luZ2xlUm9vdCIsInAzIiwibGluZWFyaXplIiwiY29lZmZ4IiwiY29lZmZ5IiwiZGVub20iLCJ0Y3VzcCIsInNxdWFyZSIsInJvb3QiLCJwMTAiLCJwMTEiLCJwMjAiLCJwMjEiLCJiZXoiLCJib3VuZHMiLCJ0MiIsInNwbGl0IiwiZGVwdGgiLCJ0b2xlcmFuY2UiLCJpbnRlcnNlY3Rpb25zIiwibWF4UmVjdXJzaW9uIiwiZDFzIiwiZDJzIiwib3RoZXIiLCJzdGFydDEiLCJlbmQxIiwic3RhcnQyIiwiZW5kMiIsInYzIiwidjQiLCJvdXRwdXRCZXppZXIiLCJkaXJlY3Rpb24iLCJhbXBsaXR1ZGUiLCJvdXRBbXBsaXR1ZGUiLCJpbkFtcGxpdHVkZSIsImFuZ08iLCJhbmdJIiwidmVjdG9yIiwicm90Iiwicm90YXRlZFZlY3RvciIsImN1ciIsInByZXZJbmRleCIsInByZXZQb2ludCIsIm5leHRQb2ludCIsInBWZWN0b3IiLCJmcmVxdWVuY3kiLCJwb2ludFR5cGUiLCJwcmV2RGlzdCIsIm5leHREaXN0IiwicDFhIiwicDFiIiwicDJiIiwicDJhIiwic2VnMSIsInNlZzIiLCJsaW5lSm9pbiIsIm1pdGVyTGltaXQiLCJhbmdsZU91dCIsImFuZ2xlSW4iLCJjZW50ZXIiLCJyYWRpdXMiLCJ0YW4iLCJpbnRlcnNlY3Rpb24iLCJpbnRlcnNlY3QiLCJvdXRhIiwib3V0YiIsImZsZXgiLCJsZWZ0IiwicmlnaHQiLCJtaWQiLCJpbnB1dEJlemllciIsIm11bHRpU2VnbWVudHMiLCJsYXN0U2VnIiwibXVsdGlTZWdtZW50IiwiZm9udERhdGEiLCJzdHlsZXMiLCJmV2VpZ2h0IiwiZlN0eWxlIiwic3R5bGVOYW1lIiwibWF4V2FpdGluZ1RpbWUiLCJlbXB0eUNoYXIiLCJjb21iaW5lZENoYXJhY3RlcnMiLCJCTEFDS19GTEFHX0NPREVfUE9JTlQiLCJDQU5DRUxfVEFHX0NPREVfUE9JTlQiLCJBX1RBR19DT0RFX1BPSU5UIiwiWl9UQUdfQ09ERV9QT0lOVCIsIlZBUklBVElPTl9TRUxFQ1RPUl8xNl9DT0RFX1BPSU5UIiwiWkVST19XSURUSF9KT0lORVJfQ09ERV9QT0lOVCIsIlJFR0lPTkFMX0NIQVJBQ1RFUl9BX0NPREVfUE9JTlQiLCJSRUdJT05BTF9DSEFSQUNURVJfWl9DT0RFX1BPSU5UIiwic3Vycm9nYXRlTW9kaWZpZXJzIiwidHJpbUZvbnRPcHRpb25zIiwiZm9udCIsImZhbWlseUFycmF5IiwiZW5hYmxlZEZhbWlsaWVzIiwic2V0VXBOb2RlIiwiZmFtaWx5IiwicGFyZW50Tm9kZSIsIm5vZGUiLCJjaGVja0xvYWRlZEZvbnRzIiwibG9hZGVkQ291bnQiLCJjcmVhdGVIZWxwZXIiLCJkZWYiLCJlbmdpbmUiLCJoZWxwZXIiLCJmb250UHJvcHMiLCJ0SGVscGVyIiwidENhbnZhc0hlbHBlciIsIm1lYXN1cmUiLCJhZGRGb250cyIsImRlZnMiLCJmb250QXJyIiwiX3BlbmRpbmdGb250cyIsInNob3VsZExvYWRGb250IiwibG9hZGVkU2VsZWN0b3IiLCJzYyIsImFkZENoYXJzIiwiZm91bmQiLCJnZXRDaGFyRGF0YSIsIl9jaGFyIiwibWVhc3VyZVRleHQiLCJfY2hhcjIiLCJmb250TmFtZSIsImRvdWJsZVNpemUiLCJzaW5nbGVTaXplIiwiZ2V0Rm9udEJ5TmFtZSIsImdldENvZGVQb2ludCIsInN0cmluZyIsImNvZGVQb2ludCIsInNlY29uZCIsImlzTW9kaWZpZXIiLCJmaXJzdENoYXJDb2RlIiwic2Vjb25kQ2hhckNvZGUiLCJzdW0iLCJpc1plcm9XaWR0aEpvaW5lciIsImNoYXJDb2RlIiwiaXNWYXJpYXRpb25TZWxlY3RvciIsImlzUmVnaW9uYWxDb2RlIiwiaXNGbGFnRW1vamkiLCJpc0NvbWJpbmVkQ2hhcmFjdGVyIiwiX2NoYXIzIiwiaXNSZWdpb25hbEZsYWciLCJzZXRJc0xvYWRlZCIsIkZvbnQiLCJmb250UHJvdG90eXBlIiwiY29tcG9uZW50IiwibnVtIiwiYmxlbmRNb2RlRW51bXMiLCJtb2RlIiwiZWZmZWN0cyIsImVmZmVjdEl0ZW0iLCJlZmYiLCJleHByZXNzaW9uc0ludGVyZmFjZXMiLCJMYXllckV4cHJlc3Npb25JbnRlcmZhY2UiLCJFZmZlY3RzRXhwcmVzc2lvbkludGVyZmFjZSIsIlNoYXBlRXhwcmVzc2lvbkludGVyZmFjZSIsIlRleHRFeHByZXNzaW9uSW50ZXJmYWNlIiwiQ29tcEV4cHJlc3Npb25JbnRlcmZhY2UiLCJlZmZlY3RzSW50ZXJmYWNlIiwiYmxlbmRNb2RlVmFsdWUiLCJnbG9iYWxEYXRhIiwiaXNWaXNpYmxlIiwiRm9vdGFnZUludGVyZmFjZSIsInRpbWVSZW1hcHBlZCIsInRvdGFsVm9sdW1lIiwidm9sdW1lVmFsdWUiLCJsYXllciIsInBJbnRlcmZhY2UiLCJwYXJlbnROYW1lIiwiaGllcmFyY2h5IiwicGF0aFZhbHVlIiwiZm9udHNDb250YWluZXIiLCJmaW5hbE1hdCIsImxvY2FsTWF0IiwibG1hdCIsImxvY2FsT3AiLCJ0cmFuc2Zvcm1FZmZlY3RzIiwidHJhbnNmb3JtcyIsInB0TmV3IiwicHJvcGVydGllcyIsImN1cnJlbnRNYXNrcyIsImxheWVySWQiLCJyZWN0IiwiZXhwYW5zb3IiLCJmZU1vcnBoIiwibWFza1R5cGUiLCJtYXNrUmVmIiwiZmlsdGVySUQiLCJtYXNrIiwiaXNGaXJzdEZyYW1lIiwicGF0aE5vZGVzIiwidmlld0RhdGEiLCJwYXRoU3RyaW5nIiwicGF0aFNoYXBlVmFsdWUiLCJjcmVhdGVGaWx0ZXIiLCJjcmVhdGVBbHBoYVRvTHVtaW5hbmNlRmlsdGVyIiwiZmlsSWQiLCJza2lwQ29vcmRpbmF0ZXMiLCJmaWwiLCJmZUNvbG9yTWF0cml4IiwiZmlsdGVyTWFuYWdlciIsIkVmZmVjdCIsImVmZmVjdCIsImNvdW50c0FzRWZmZWN0IiwibGF5ZXJFbGVtZW50UGFyZW50IiwiZ2ciLCJjcCIsImNsaXBJZCIsImNwR3JvdXAiLCJtYXR0ZVR5cGUiLCJ1c2VFbGVtZW50IiwibWFza2VyIiwibWFza0dyb3VwIiwibWFza0dyb3VwZXIiLCJmZUNUciIsImZlRnVuYyIsImFscGhhUmVjdCIsIl9wcm90b3R5cGUiLCJzaG91bGRCcmVha1Byb2Nlc3MiLCJ0cmFuc2Zvcm1lcnMiLCJsZXZlbCIsInN0eWxlT2IiLCJjTGVuZ3RoIiwiZGlmZiIsInBhdGhFbGVtZW50IiwiZ3JhZGllbnRJZCIsImdmaWxsIiwic3RvcHMiLCJtYXNrRWxlbWVudCIsIm9wYWNpdHlJZCIsIm1hc2tJZCIsIm9wRmlsbCIsIm1Qcm9wcyIsIm9wIiwiX28iLCJfaSIsInNoYXBlU3RyaW5nIiwiX2lkZW50aXR5TWF0cml4IiwiX21hdHJpeEhlbHBlciIsImNyZWF0ZVJlbmRlckZ1bmN0aW9uIiwicmVuZGVyRmlsbCIsInJlbmRlckdyYWRpZW50IiwicmVuZGVyR3JhZGllbnRTdHJva2UiLCJyZW5kZXJTdHJva2UiLCJyZW5kZXJQYXRoIiwicmVuZGVyQ29udGVudFRyYW5zZm9ybSIsInJlbmRlck5vb3AiLCJzdHlsZURhdGEiLCJpdGVtRGF0YSIsInBhdGhTdHJpbmdUcmFuc2Zvcm1lZCIsInJlZHJhdyIsImxMZW4iLCJsdmwiLCJpdGVyYXRpb25zIiwic3R5bGVFbGVtIiwiaGFzT3BhY2l0eSIsImF0dHIxIiwiYXR0cjIiLCJjVmFsdWVzIiwib1ZhbHVlcyIsImFuZyIsInRlbXBTaGFwZXMiLCJhcmVBbmltYXRlZCIsImVsZW1lbnREYXRhIiwiR3JhZGllbnRDb25zdHJ1Y3RvciIsInRyYW5zZm9ybVByb3BlcnR5Iiwib3duVHJhbnNmb3JtZXJzIiwic2hhcGVQcm9wZXJ0eSIsIml0ZW1zRGF0YSIsInByZXZWaWV3RGF0YSIsInJlbmRlciIsIm93blN0eWxlcyIsIm93bk1vZGlmaWVycyIsImN1cnJlbnRUcmFuc2Zvcm0iLCJtb2RpZmllciIsInByb2Nlc3NlZFBvcyIsImFuaW1hdGVkQ29udGVudCIsInN3IiwiZmMiLCJ1cGRhdGVkIiwiX2ZpbmFsVmFsdWUiLCJjdXJyZW50VmFsdWUiLCJjdXJyZW50SW5kZXgiLCJ0ZXh0S2V5cyIsImNoYXJhY3RlcnNBcnJheSIsInNob3VsZENvbWJpbmUiLCJzaG91bGRDb21iaW5lTmV4dCIsImN1cnJlbnRDaGFycyIsImZvbnRNYW5hZ2VyIiwibGV0dGVycyIsIm5ld0xpbmVGbGFnIiwiYW5jaG9yR3JvdXBpbmciLCJjdXJyZW50U2l6ZSIsImN1cnJlbnRQb3MiLCJjdXJyZW50TGluZSIsImxpbmVXaWR0aHMiLCJsaW5lV2lkdGgiLCJtYXhMaW5lV2lkdGgiLCJ0cmFja2luZ09mZnNldCIsImJveFdpZHRoIiwiYm94SGVpZ2h0IiwiY3VycmVudEhlaWdodCIsImZpbmFsVGV4dCIsImxhc3RTcGFjZUluZGV4IiwidW5jb2xsYXBzZWRTcGFjZXMiLCJjdXJyZW50Q2hhciIsImFuaW1hdG9ycyIsImFuaW1hdG9yRGF0YSIsImxldHRlckRhdGEiLCJiYXNlZCIsImN1cnJlbnRJbmQiLCJuZXdJbmQiLCJuZXdEYXRhIiwiZERhdGEiLCJfY2FuUmVzaXplIiwiX2ZvbnRWYWx1ZSIsImZsb29yIiwiVGV4dFNlbGVjdG9yUHJvcEZhY3RvcnkiLCJlYXNlciIsInRvdCIsInNtb290aG5lc3MiLCJ0aHJlc2hvbGQiLCJuZXdDaGFyc0ZsYWciLCJkaXZpc29yIiwiZ2V0VGV4dFNlbGVjdG9yUHJvcCIsImFuaW1hdG9yUHJvcHMiLCJkZWZhdWx0RGF0YSIsInRleHRBbmltYXRvckFuaW1hdGFibGVzIiwidGV4dERhdGEiLCJyZW5kZXJUeXBlIiwibGV0dGVyc0NoYW5nZWRGbGFnIiwiYWxpZ25tZW50IiwibWF0cml4SGVscGVyIiwicmVuZGVyZWRMZXR0ZXJzQ291bnQiLCJ4UG9zIiwieVBvcyIsInBhdGhJbmZvIiwiY3VycmVudExlbmd0aCIsImN1cnJlbnRQb2ludCIsInBvaW50SW5kIiwic2VnbWVudEluZCIsInBhcnRpYWxMZW5ndGgiLCJ0YW5BbmdsZSIsInlPZmYiLCJmaXJzdExpbmUiLCJhbmltYXRvclNlbGVjdG9yIiwibGV0dGVyVmFsdWUiLCJvZmZmIiwieFBhdGhQb3MiLCJ5UGF0aFBvcyIsImluaXRQYXRoUG9zIiwiaW5pdFNlZ21lbnRJbmQiLCJpbml0UG9pbnRJbmQiLCJlbGVtT3BhY2l0eSIsImxldHRlclN3IiwibGV0dGVyU2MiLCJsZXR0ZXJGYyIsImxldHRlck0iLCJsZXR0ZXJQIiwibGV0dGVyTyIsImFuaW1hdG9ySnVzdGlmeU9mZnNldCIsImFuaW1hdG9yRmlyc3RDaGFyT2Zmc2V0IiwianVzdGlmeU9mZnNldE11bHQiLCJpc05ld0xpbmUiLCJhbmltYXRvck9mZnNldCIsInNoYXBlU3RyIiwiX2ZvbnRTaXplIiwibGluZU51bWJlciIsImNvbG9yRGF0YSIsInRleHRBcnJheSIsInRleHRDb250ZW50cyIsImN1cnJlbnRUZXh0Q29udGVudCIsInNoYXBlSXRlbSIsInVzZXNHbHlwaHMiLCJ0U3BhbiIsInNpbmdsZVNoYXBlIiwidEVsZW1lbnQiLCJqdXN0aWZ5IiwidGV4dENvbnRlbnQiLCJjYWNoZWRTcGFuc0xlbmd0aCIsImNoaWxkU3BhbiIsImdseXBoRWxlbWVudCIsImdseXBoIiwidGV4dEJveCIsInJlbmRlcmVkTGV0dGVycyIsInJlbmRlcmVkTGV0dGVyIiwidGV4dFNwYW4iLCJlbGVtZW50SW5kZXgiLCJtYXR0ZUVsZW1lbnQiLCJtYXR0ZU1hc2siLCJuZXh0RWxlbWVudCIsImFuaW1hdGlvbkl0ZW0iLCJhcmlhTGFiZWwiLCJ0aXRsZUVsZW1lbnQiLCJ0aXRsZUlkIiwiZGVzY0VsZW1lbnQiLCJkZXNjSWQiLCJzZXF1ZW5jZSIsImx1bWFCdWZmZXIiLCJsdW1hQnVmZmVyQ3R4Iiwic3ZnIiwiY3JlYXRlTHVtYVN2Z0ZpbHRlciIsIl9zdmciLCJsb2FkTHVtYSIsImdldEx1bWEiLCJoYXNNYXNrcyIsImNhbnZhc0NvbnRleHQiLCJidWZmZXJDYW52YXMiLCJidWZmZXJDYW52YXMyIiwiYnVmZmVyIiwiYnVmZmVyQ3R4IiwiZm9yY2VSZWFsU3RhY2siLCJ0cmFuc2Zvcm1zTWFuYWdlciIsInN0eWxlZFNoYXBlIiwic2hvdWxkUmVuZGVyIiwib3duVHJhbnNmb3JtcyIsInBhcmVudFRyYW5zZm9ybSIsImdyb3VwVHJhbnNmb3JtIiwibm9kZXMiLCJjdXJyZW50U3R5bGUiLCJpc01haW4iLCJzaGFwZU5vZGVzIiwiZ3JvdXBUcmFuc2Zvcm1NYXQiLCJncmQiLCJvcGFjaXR5IiwiaGFzRmlsbCIsImhhc1N0cm9rZSIsImNvbW1hbmRzIiwicGF0aEFyciIsImNvbW1hbmRzQ291bnRlciIsImxhc3RGaWxsIiwibGFzdFN0cm9rZSIsImxhc3RTdHJva2VXIiwiaW1nVyIsImltZ0giLCJpbWdSZWwiLCJjYW52YXNSZWwiLCJ3aWR0aENyb3AiLCJoZWlnaHRDcm9wIiwicGFyIiwicnVsZSIsImFjdGlvbkZsYWciLCJjb250YWluZXJTdHlsZSIsIm9yaWdpbiIsImVsZW1lbnRXaWR0aCIsImVsZW1lbnRIZWlnaHQiLCJlbGVtZW50UmVsIiwiYW5pbWF0aW9uUmVsIiwiZmlsbFR5cGUiLCJuZXdMZW5ndGgiLCJmb3JjZVJlc3RvcmUiLCJjdXJyZW50Q29udGV4dCIsInByZXZTdGFjayIsInNhdmVPbk5hdGl2ZUZsYWciLCJjdXJyZW50U3RhY2siLCJuZXdTdGFjayIsInRyUHJvcHMiLCJjdXJyZW50T3BhY2l0eSIsInRyYW5zZm9ybWVkRWxlbWVudFN0eWxlIiwibWF0cml4VmFsdWUiLCJib3VuZGluZ0JveCIsInZQb2ludCIsIm9Qb2ludCIsIm5leHRJUG9pbnQiLCJuZXh0VlBvaW50IiwiYjJhYyIsIndpZHRoUHJvcGVydHkiLCJrZnciLCJ0ZW1wQm91bmRpbmdCb3giLCJjaGFuZ2VkIiwic2hhcGVTdHlsZSIsInNoYXBlVHJhbnNmb3JtIiwiaW5uZXJFbGVtU3R5bGUiLCJ0ZXh0Q29sb3IiLCJ0UGFyZW50IiwidENvbnQiLCJ0Q29udFN0eWxlIiwidENvbnRUcmFuc2xhdGlvbiIsInRTdHlsZSIsInRTcGFuVHJhbnNsYXRpb24iLCJzdmdTdHlsZSIsInRyYW5zbGF0aW9uIiwidGV4dFBhdGgiLCJtYXJnaW4iLCJzdmdUcmFuc2Zvcm0iLCJwZXJzcGVjdGl2ZVN0eWxlIiwicGVyc3BlY3RpdmUiLCJtVHJhbnNmIiwiZGlmZlZlY3RvciIsIm1hZyIsImxvb2tEaXIiLCJsb29rTGVuZ3RoT25YWiIsIm1Sb3RhdGlvblgiLCJtUm90YXRpb25ZIiwiaGFzTWF0cml4Q2hhbmdlZCIsIm1hdFZhbHVlIiwibmV3RE9NRWxlbWVudCIsIm5leHRET01FbGVtZW50IiwibmV4dExheWVyIiwidG1wRE9NRWxlbWVudCIsInBlcnNwZWN0aXZlRWxlbSIsInRocmVlRENvbnRhaW5lckRhdGEiLCJsYXN0VGhyZWVEQ29udGFpbmVyRGF0YSIsImN1cnJlbnRDb250YWluZXIiLCJyZXNpemVyRWxlbSIsImNXaWR0aCIsImNIZWlnaHQiLCJmbG9hdGluZ0NvbnRhaW5lciIsIl90aGlzTGF5ZXJGdW5jdGlvbiIsImNodW5rcyIsImRpZ2l0cyIsInJuZ25hbWUiLCJzdGFydGRlbm9tIiwic2lnbmlmaWNhbmNlIiwib3ZlcmZsb3ciLCJub2RlY3J5cHRvIiwic2VlZHJhbmRvbSIsInNlZWQiLCJzaG9ydHNlZWQiLCJtaXhrZXkiLCJmbGF0dGVuIiwidG9zdHJpbmciLCJhdXRvc2VlZCIsImFyYzQiLCJBUkM0IiwicHJuZyIsImlzX21hdGhfY2FsbCIsImtleWxlbiIsIm1lIiwidHlwIiwic3RyaW5nc2VlZCIsInNtZWFyIiwiYnJvd3NlciIsInBsdWdpbnMiLCJCTU1hdGgiLCJ0T2ZWIiwidE9mQSIsImxlbkEiLCJyZXRBcnIiLCJ0T2ZCIiwibGVuQiIsIm1tIiwiYXJyMSIsImFycjIiLCJ2ZWMiLCJ0TWluIiwidE1heCIsInZhbHVlMSIsInZhbHVlMiIsIl90TWluIiwicm5kIiwicm5kbSIsImluVGFuZ2VudHMiLCJvdXRUYW5nZW50cyIsImFyclBsYWNlaG9sZGVyIiwiaW5WZXJ0ZXhQb2ludCIsIm91dFZlcnRleFBvaW50Iiwid2lnZ2xlIiwiZnJlcSIsImFtcCIsImlXaWdnbGUiLCJsZW5XaWdnbGUiLCJhZGRlZEFtcHMiLCJwZXJpb2RzIiwiZHVyYXRpb24iLCJlbGVtMSIsImVsZW0yIiwiZlZlYyIsInBpdGNoIiwieWF3IiwidmFsMSIsInZhbDIiLCJpS2V5IiwibGVuS2V5Iiwib2JLZXkiLCJmciIsImZwcyIsImZyYW1lc1BlclNlY29uZCIsImluaXRFeHByZXNzaW9ucyIsInN0YWNrQ291bnQiLCJyZWdpc3RlcnMiLCJwdXNoRXhwcmVzc2lvbiIsInBvcEV4cHJlc3Npb24iLCJyZWxlYXNlSW5zdGFuY2VzIiwicmVnaXN0ZXJFeHByZXNzaW9uUHJvcGVydHkiLCJleHByZXNzaW9uIiwiTWFza0ludGVyZmFjZSIsIk1hc2tNYW5hZ2VyIiwibWFza01hbmFnZXIiLCJfbWFza3NJbnRlcmZhY2VzIiwibWFza0Z1bmN0aW9uIiwiZGVmYXVsdFVuaWRpbWVuc2lvbmFsVmFsdWUiLCJkZWZhdWx0TXVsdGlkaW1lbnNpb25hbFZhbHVlIiwiY29tcGxldGVQcm9wZXJ0eSIsImV4cHJlc3Npb25WYWx1ZSIsInByb3BlcnR5IiwidmFsdWVQcm9wIiwiVW5pZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZSIsIk11bHRpZGltZW5zaW9uYWxQcm9wZXJ0eUludGVyZmFjZSIsImFyclZhbHVlIiwiZGVmYXVsdEdldHRlciIsIl90aGlzRnVuY3Rpb24iLCJfcHgiLCJfcHkiLCJfcHoiLCJfdHJhbnNmb3JtRmFjdG9yeSIsImdldE1hdHJpeCIsInRvV29ybGRNYXQiLCJwcm9wTWF0cml4IiwidHJhbnNmb3JtTWF0IiwidG9Xb3JsZFZlYyIsInRvV29ybGQiLCJmcm9tV29ybGRWZWMiLCJmcm9tV29ybGQiLCJhcHBseVBvaW50IiwiaW52ZXJ0UG9pbnQiLCJmcm9tQ29tcCIsInNhbXBsZUltYWdlIiwidHJhbnNmb3JtSW50ZXJmYWNlIiwiX3JlZ2lzdGVyTWFza0ludGVyZmFjZSIsIl9yZWdpc3RlckVmZmVjdHNJbnRlcmZhY2UiLCJhbmNob3JQb2ludERlc2NyaXB0b3IiLCJpbnRlcmZhY2VGdW5jdGlvbiIsInBhcmVudFByb3BlcnR5R3JvdXAiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eUdyb3VwIiwiX3Byb3BlcnR5R3JvdXAiLCJjcmVhdGVFZmZlY3RzSW50ZXJmYWNlIiwiZWZmZWN0RWxlbWVudHMiLCJlZmZlY3RzRGF0YSIsImNyZWF0ZUdyb3VwSW50ZXJmYWNlIiwiZ3JvdXBJbnRlcmZhY2UiLCJjcmVhdGVWYWx1ZUludGVyZmFjZSIsImV4cHJlc3Npb25Qcm9wZXJ0eSIsInZpZXciLCJpdGVyYXRlRWxlbWVudHMiLCJncm91cEludGVyZmFjZUZhY3RvcnkiLCJmaWxsSW50ZXJmYWNlRmFjdG9yeSIsInN0cm9rZUludGVyZmFjZUZhY3RvcnkiLCJ0cmltSW50ZXJmYWNlRmFjdG9yeSIsImVsbGlwc2VJbnRlcmZhY2VGYWN0b3J5Iiwic3RhckludGVyZmFjZUZhY3RvcnkiLCJyZWN0SW50ZXJmYWNlRmFjdG9yeSIsInJvdW5kZWRJbnRlcmZhY2VGYWN0b3J5IiwicmVwZWF0ZXJJbnRlcmZhY2VGYWN0b3J5IiwiZ3JhZGllbnRGaWxsSW50ZXJmYWNlRmFjdG9yeSIsImRlZmF1bHRJbnRlcmZhY2VGYWN0b3J5IiwiY29udGVudHNJbnRlcmZhY2VGYWN0b3J5IiwiaW50ZXJmYWNlcyIsInRyYW5zZm9ybUludGVyZmFjZUZhY3RvcnkiLCJfZGFzaFByb3BlcnR5R3JvdXAiLCJkYXNoT2IiLCJhZGRQcm9wZXJ0eVRvRGFzaE9iIiwiX2ludGVyZmFjZUZ1bmN0aW9uIiwicGFyZW50R3JvdXBXcmFwcGVyIiwiX3NvdXJjZVRleHQiLCJzdHJpbmdWYWx1ZSIsIm91dGxpbmVJbnRlcmZhY2VGYWN0b3J5IiwiY3VycmVudFByb3BlcnR5TmFtZSIsImN1cnJlbnRQcm9wZXJ0eSIsInNlYXJjaFByb3BlcnR5IiwicHJvcGVydHlOYW1lSW5kZXgiLCJkYXRhSW50ZXJmYWNlRmFjdG9yeSIsInNlYXJjaEV4cHJlc3Npb25zIiwiZ2V0VmFsdWVBdFRpbWUiLCJnZXRTcGVlZEF0VGltZSIsInNwZWVkIiwiZ2V0VmVsb2NpdHlBdFRpbWUiLCJ2ZWxvY2l0eSIsImdldFN0YXRpY1ZhbHVlQXRUaW1lIiwic2V0R3JvdXBQcm9wZXJ0eSIsImxvb3BPdXQiLCJkdXJhdGlvbkZsYWciLCJjdXJyZW50RnJhbWUiLCJrZXlmcmFtZXMiLCJsYXN0S2V5RnJhbWUiLCJjeWNsZUR1cmF0aW9uIiwiZmlyc3RLZXlGcmFtZSIsImluaXRWIiwiZW5kViIsInJlcGVhdHMiLCJsYXN0VmFsdWUiLCJuZXh0TGFzdFZhbHVlIiwibG9vcEluIiwiZmlyc3RWYWx1ZSIsIm5leHRGaXJzdFZhbHVlIiwic21vb3RoIiwic2FtcGxlcyIsImVuZEZyYW1lIiwic2FtcGxlRnJlcXVlbmN5Iiwic2FtcGxlVmFsdWUiLCJnZXRUcmFuc2Zvcm1WYWx1ZUF0VGltZSIsImFuY2hvciIsInNrZXdBeGlzIiwicm90YXRpb24iLCJyb3RhdGlvbloiLCJyb3RhdGlvblkiLCJyb3RhdGlvblgiLCJvcmllbnRhdGlvbiIsInBvc2l0aW9uWCIsInBvc2l0aW9uWSIsInBvc2l0aW9uWiIsImdldFRyYW5zZm9ybVN0YXRpY1ZhbHVlQXRUaW1lIiwicHJvcGVydHlHZXRQcm9wIiwiZ2V0U2hhcGVWYWx1ZUF0VGltZSIsIlNoYXBlUHJvcGVydHlDb25zdHJ1Y3RvckZ1bmN0aW9uIiwiS2V5ZnJhbWVkU2hhcGVQcm9wZXJ0eUNvbnN0cnVjdG9yRnVuY3Rpb24iLCJTaGFwZUV4cHJlc3Npb25zIiwiYWNjdW11bGF0ZWRMZW5ndGgiLCJpbml0SW5kZXgiLCJlbmRJbmRleCIsInZlY3RvclR5cGUiLCJ4TGVuZ3RoIiwieUxlbmd0aCIsIm1hZ25pdHVkZSIsInVuaXRWZWN0b3IiLCJwcm9wZXJ0eUdldFNoYXBlUHJvcCIsInRyaW1zIiwiaXNLZXlmcmFtZWQiLCJoYXNFeHByZXNzaW9ucyIsImNyZWF0ZU1lcmdlTm9kZSIsInJlc3VsdElkIiwiaW5zIiwiZmVNZXJnZSIsImZlTWVyZ2VOb2RlIiwiY29sb3JCbGFjayIsImNvbG9yV2hpdGUiLCJlbGVtQ2hpbGRyZW4iLCJncm91cFBhdGgiLCJkYXNoYXJyYXlWYWx1ZSIsImxpbmVMZW5ndGgiLCJ1bml0cyIsImZlQ29tcG9uZW50VHJhbnNmZXIiLCJmZUZ1bmNSIiwiZmVGdW5jRyIsImZlRnVuY0IiLCJjb2xvcjEiLCJjb2xvcjIiLCJjb2xvcjMiLCJ0YWJsZVIiLCJ0YWJsZUciLCJ0YWJsZUIiLCJpbnB1dEJsYWNrIiwiaW5wdXRXaGl0ZSIsImdhbW1hIiwib3V0cHV0QmxhY2siLCJvdXRwdXRXaGl0ZSIsInRhYmxlIiwiY29sb3JWYWx1ZSIsIm91dHB1dERlbHRhIiwiaW5wdXREZWx0YSIsImdsb2JhbEZpbHRlclNpemUiLCJmaWx0ZXJTaXplIiwiZmVHYXVzc2lhbkJsdXIiLCJmZU9mZnNldCIsImZlRmxvb2QiLCJmZUNvbXBvc2l0ZSIsImNvbCIsImZpbHRlckVsZW0iLCJzeW1ib2xJZCIsIm5leHRDaGlsZCIsInVzZUVsZW0iLCJzeW1ib2wiLCJrQmx1cnJpbmVzc1RvU2lnbWEiLCJzaWdtYSIsImRpbWVuc2lvbnMiLCJzaWdtYVgiLCJzaWdtYVkiLCJlZGdlTW9kZSIsImVmZmVjdHNNYW5hZ2VyIiwiZm9yY2VGcmFtZSIsImlzVW5pZm9ybVNjYWxlIiwic2NhbGVIZWlnaHQiLCJzY2FsZVdpZHRoIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsImVudW1lcmFibGVPbmx5Iiwic3ltYm9scyIsInN5bSIsInNvdXJjZVN5bWJvbEtleXMiLCJtaW5MZW4iLCJoaW50IiwicHJpbSIsInJlcyIsInVzZUxvdHRpZSIsImluaXRpYWxTZWdtZW50Iiwib25Mb29wQ29tcGxldGUiLCJvbkVudGVyRnJhbWUiLCJvblNlZ21lbnRTdGFydCIsIm9uQ29uZmlnUmVhZHkiLCJvbkRhdGFSZWFkeSIsIm9uRGF0YUZhaWxlZCIsIm9uTG9hZGVkSW1hZ2VzIiwib25ET01Mb2FkZWQiLCJvbkRlc3Ryb3kiLCJfdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl91c2VTdGF0ZTIiLCJhbmltYXRpb25Mb2FkZWQiLCJzZXRBbmltYXRpb25Mb2FkZWQiLCJhbmltYXRpb25JbnN0YW5jZVJlZiIsInVzZVJlZiIsImFuaW1hdGlvbkNvbnRhaW5lciIsImdvVG9BbmRQbGF5IiwicGxheVNlZ21lbnRzIiwic2V0U3ViZnJhbWUiLCJ1c2VTdWJGcmFtZXMiLCJnZXREdXJhdGlvbiIsImluRnJhbWVzIiwiZm9yY2VkQ29uZmlncyIsInVzZUVmZmVjdCIsIm9uVW5tb3VudCIsInBhcnRpYWxMaXN0ZW5lcnMiLCJsaXN0ZW5lcnMiLCJkZXJlZ2lzdGVyTGlzdCIsImRlcmVnaXN0ZXIiLCJWaWV3IiwiX2NvbnRhaW5lciRnZXRCb3VuZGluIiwidG9wIiwiY3Vyc29yWCIsImN1cnNvclkiLCJfY29udGFpbmVyJGdldEJvdW5kaW4yIiwidXNlSW5pdEludGVyYWN0aXZpdHkiLCJ3cmFwcGVyUmVmIiwiYWN0aW9ucyIsInNjcm9sbE1vZGVIYW5kbGVyIiwiYXNzaWduZWRTZWdtZW50Iiwic2Nyb2xsSGFuZGxlciIsImN1cnJlbnRQZXJjZW50IiwidmlzaWJpbGl0eSIsImZyYW1lVG9HbyIsImN1cnNvck1vZGVIYW5kbGVyIiwiaGFuZGxlQ3Vyc29yIiwiX3kiLCJ4UGVyY2VudCIsInlQZXJjZW50IiwibW91c2VNb3ZlSGFuZGxlciIsIm1vdXNlT3V0SGFuZGxlciIsInVzZUxvdHRpZUludGVyYWN0aXZpdHkiLCJsb3R0aWVPYmoiLCJhbmltYXRpb25Db250YWluZXJSZWYiLCJMb3R0aWUiLCJpbnRlcmFjdGl2aXR5IiwibG90dGllUHJvcHMiLCJfdXNlTG90dGllIiwianN4IiwiY3JlYXRlQ29udGV4dCIsImxvYWRpbmdJbWFnZXMiLCJzZXRMb2FkaW5nSW1hZ2VzIiwic2VydmljZXMiLCJlcnJvclNlcnZpY2VzIiwiaXNMb2FkaW5nU2VydmljZXMiLCJpc0Vycm9yU2VydmljZXMiLCJpbWFnZVByb21pc2VzIiwic2VydmljZSIsImltYWdlcyIsInVzZUNvbnRleHQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0dBU2EsSUFBSUEsSUFBRSxPQUFPLElBQUksZUFBZSxFQUFFQyxJQUFFLE9BQU8sSUFBSSxjQUFjLEVBQUVDLElBQUUsT0FBTyxJQUFJLGdCQUFnQixFQUFFQyxJQUFFLE9BQU8sSUFBSSxtQkFBbUIsRUFBRSxFQUFFLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sSUFBSSxlQUFlLEVBQUVDLElBQUUsT0FBTyxJQUFJLG1CQUFtQixFQUFFQyxJQUFFLE9BQU8sSUFBSSxnQkFBZ0IsRUFBRSxFQUFFLE9BQU8sSUFBSSxZQUFZLEVBQUUs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R0FBRSxFQUFFLFVBQVUsU0FBU0EsRUFBRSxDQUFDLE1BQU0sY0FBY0EsRUFBRUEsRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsQ0FBRSxFQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLENBQUEsRUFBRyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFFLEVBQUMsR0FBRyxDQUFDLGNBQWMsRUFBRSxZQUFZLEVBQUUsY0FBYyxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxjQUFjLFNBQVNBLEVBQUUsQ0FBQyxNQUFNLGtCQUFrQkEsRUFBRUEsRUFBRSxjQUFjLE9BQU8sYUFBYSxDQUFDLENBQUMsRUFBRSxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxDQUFFLEVBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSSxTQUN4ZixTQUFTLElBQUksS0FBSyxZQUFZLEdBQUcsVUFBVSxNQUFNLGFBQWEsS0FBSyxZQUFZLElBQUksU0FBUyxJQUFJLEtBQUssS0FBSyxjQUFjLEtBQUssY0FBYyxPQUFPLGFBQWEsZ0JBQWdCLGNBQWMsRUFBRSxHQUFHLENBQUMsRUFBRSxZQUFZLEVBQUUsTUFBTSxHQUFHLFFBQVEsR0FBRyxRQUFRLEdBQUcsUUFBUSxHQUFHLFVBQVUsR0FBRyxNQUFNLEdBQUcsUUFBUSxHQUFHLFdBQVcsR0FBRyxTQUFTLEdBQUcsSUFBSSxHQUFHLFNBQVMsR0FBRyxXQUFXLEdBQUcsTUFBTSxHQUFHLE9BQU8sR0FBRyxZQUFZLEdBQUcsVUFBVSxHQUFHLGFBQWEsR0FBRyxZQUFZLEdBQUcsU0FBUyxHQUFHLFNBQVMsSUFBSSxLQUFLLElBQUksS0FBSyxJQUFJ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LEdBQUdkLEVBQUUsQ0FBUSxLQUFQLEtBQVUsR0FBRyxDQUFDQSxDQUFDLEVBQUUsR0FBRyxLQUFLQSxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUdBLEVBQUUsQ0FBQyxHQUFHLEdBQUcsR0FBR0EsQ0FBQyxDQUFDLENBQzNYLFNBQVMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFXLEtBQVAsS0FBVSxDQUFDLEdBQUcsR0FBRyxJQUFJQSxFQUFFLEVBQUVLLEVBQUUsRUFBRSxHQUFHLENBQUMsSUFBSVMsRUFBRSxHQUFHLElBQUksRUFBRSxFQUFFZCxFQUFFYyxFQUFFLE9BQU9kLElBQUksQ0FBQyxJQUFJYSxFQUFFQyxFQUFFZCxDQUFDLEVBQUUsR0FBR2EsRUFBRUEsRUFBRSxFQUFFLFFBQWVBLElBQVAsS0FBUyxDQUFDLEdBQUcsS0FBSyxHQUFHLEVBQUUsT0FBT1AsRUFBRSxDQUFDLE1BQWEsS0FBUCxPQUFZLEdBQUcsR0FBRyxNQUFNTixFQUFFLENBQUMsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFTSxDQUFFLFFBQUMsQ0FBUSxFQUFFRCxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUEsRUFBRyxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHLENBQUEsRUFBRyxHQUFHLEVBQUUsR0FBRyxLQUFLLEdBQUcsRUFBRSxHQUFHLEdBQUcsU0FBUyxHQUFHTCxFQUFFSyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUdMLEVBQUUsR0FBR0ssQ0FBQyxDQUNqVixTQUFTLEdBQUdMLEVBQUVLLEVBQUVTLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLEdBQUcsR0FBRyxJQUFJLEVBQUUsR0FBRyxHQUFHZCxFQUFFLElBQUlhLEVBQUUsR0FBR2IsRUFBRSxHQUFHLElBQUlNLEVBQUUsR0FBRyxHQUFHTyxDQUFDLEVBQUUsRUFBRUEsR0FBRyxFQUFFLEdBQUdQLEdB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QUUsT0FBTyxJQUFJLEVBQVksSUFBUCxLQUFTLE1BQU0sTUFBTSxFQUFFLEdBQUcsQ0FBQyxFQUFPLEdBQUcsSUFBSyxHQUFHUyxFQUFFVCxFQUFFQyxDQUFDLENBQUMsQ0FBQyxPQUFPQSxDQUFDLENBQUMsU0FBUyxHQUFHTixFQUFFSyxFQUFFUyxFQUFFLENBQUNkLEVBQUUsT0FBTyxNQUFNQSxFQUFFLENBQUMsWUFBWUssRUFBRSxNQUFNUyxDQUFDLEVBQUVULEVBQUUsRUFBRSxZQUFtQkEsSUFBUCxNQUFVQSxFQUFFLENBQUMsV0FBVyxLQUFLLE9BQU8sSUFBSSxFQUFFLEVBQUUsWUFBWUEsRUFBRUEsRUFBRSxPQUFPLENBQUNMLENBQUMsSUFBSWMsRUFBRVQsRUFBRSxPQUFjUyxJQUFQLEtBQVNULEVBQUUsT0FBTyxDQUFDTCxDQUFDLEVBQUVjLEVBQUUsS0FBS2QsQ0FBQyxFQUFFLENBQ2xmLFNBQVMsR0FBR0EsRUFBRUssRUFBRVMsRUFBRUQsRUFBRSxDQUFDUixFQUFFLE1BQU1TLEVBQUVULEVBQUUsWUFBWVEsRUFBRSxHQUFHUixDQUFDLEdBQUcsR0FBR0wsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHQSxFQUFFSyxFQUFFUyxFQUFFLENBQUMsT0FBT0EsRUFBRSxVQUFVLENBQUMsR0FBR1QsQ0FBQyxHQUFHLEdBQUdMLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLEdBQUdBLEVBQUUsQ0FBQyxJQUFJSyxFQUFFTCxFQUFFLFlBQVlBLEVBQUVBLEVBQUUsTUFBTSxHQUFHLENBQUMsSUFBSWMsRUFBRVQsRUFBRyxFQUFDLE1BQU0sQ0FBQyxHQUFHTCxFQUFFYyxDQUFDLENBQUMsTUFBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsU0FBUyxHQUFHZCxFQUFFLENBQUMsSUFBSUssRUFBRSxHQUFHTCxFQUFFLENBQUMsRUFBU0ssSUFBUCxNQUFVLEdBQUdBLEVBQUVMLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FDbFEsU0FBUyxHQUFHQSxFQUFFLENBQUMsSUFBSUssRUFBRSxLQUFLLE9B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QyxDQUFDLENBQUNYLEVBQUVBLEVBQUUsSUFBSSxPQUFPQSxJQUFJTyxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUdiLEVBQUVLLEVBQUUsQ0FBOEMsR0FBN0NBLEVBQUVBLEVBQUUsWUFBWUEsRUFBU0EsSUFBUCxLQUFTQSxFQUFFLFdBQVcsS0FBZUEsSUFBUCxLQUFTLENBQUMsSUFBSVMsRUFBRVQsRUFBRUEsRUFBRSxLQUFLLEVBQUUsQ0FBQyxJQUFJUyxFQUFFLElBQUlkLEtBQUtBLEVBQUUsQ0FBQyxJQUFJYSxFQUFFQyxFQUFFLE9BQU9BLEVBQUUsUUFBUUQsRUFBQyxDQUFFLENBQUNDLEVBQUVBLEVBQUUsSUFBSSxPQUFPQSxJQUFJVCxFQUFFLENBQUMsQ0FBQyxTQUFTLEdBQUdMLEVBQUUsQ0FBQyxJQUFJSyxFQUFFTCxFQUFFLElBQUksR0FBVUssSUFBUCxLQUFTLENBQUMsSUFBSVMsRUFBRWQsRUFBRSxVQUFVLE9BQU9BLEVBQUUsSUFBRyxDQUFFLElBQUssR0FBRUEsRUFBRWMsRUFBRSxNQUFNLFFBQVFkLEVBQUVjLENBQUMsQ0FBYyxPQUFPVCxHQUFwQixXQUFzQkEsRUFBRUwsQ0FBQyxFQUFFSyxFQUFFLFFBQVFMLENBQUMsQ0FBQyxDQUNsZixTQUFTLEdBQUdBLEVBQUUsQ0FBQyxJQUFJSyxFQUFFTCxFQUFFLFVBQWlCSyxJQUFQLE9BQVdMLEVBQUUsVUFBVSxLQUFLLEdBQUdLLENBQUMsR0FBR0wsRUFBRSxNQUFNLEtBQUtBLEVBQUUsVUFBVSxLQUFLQSxFQUFFLFFBQVEsS0FBU0EsRUFBRSxNQUFOLElBQVlLLEVBQUVMLEVBQUUsVUFBaUJLLElBQVAsT0FBVyxPQUFPQSxFQUFFLEVBQUUsRUFBRSxPQUFPQSxFQUFFLEVBQUUsRUFBRSxPQUFPQSxFQUFFLEVBQUUsRUFBRSxPQUFPQSxFQUFFLEVBQUUsRUFBRSxPQUFPQSxFQUFFLEVBQUUsSUFBSUwsRUFBRSxVQUFVLEtBQUtBLEVBQUUsT0FBTyxLQUFLQSxFQUFFLGFBQWEsS0FBS0EsRUFBRSxjQUFjLEtBQUtBLEVBQUUsY0FBYyxL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RUFBRSxFQUFFQSxFQUFFQyxFQUFFLE9BQU9ELElBQUksQ0FBQyxJQUFJUCxFQUFFUSxFQUFFRCxDQUFDLEVBQUVJLEVBQUVYLEVBQUUsWUFBWUEsRUFBRUEsRUFBRSxNQUFNLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBR1csRUFBRyxFQUFDWCxDQUFDLEVBQUUsTUFBTSxFQUFFLE1BQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQVcsR0FBVlEsRUFBRVQsRUFBRSxNQUFTQSxFQUFFLGFBQWEsT0FBY1MsSUFBUCxLQUFTQSxFQUFFLE9BQU9ULEVBQUVBLEVBQUVTLE1BQU0sQ0FBQyxHQUFHVCxJQUFJTCxFQUFFLE1BQU0sS0FBWUssRUFBRSxVQUFULE1BQWtCLENBQUMsR0FBVUEsRUFBRSxTQUFULE1BQWlCQSxFQUFFLFNBQVNMLEVBQUUsTUFBTSxHQUFHSyxFQUFFQSxFQUFFLE1BQU0sQ0FBQ0EsRUFBRSxRQUFRLE9BQU9BLEVBQUUsT0FBT0EsRUFBRUEsRUFBRSxPQUFPLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FDbGEsU0FBUyxHQUFHTCxFQUFFSyxFQUFFLENBQXFELElBQXBEQSxHQUFHLENBQUMsR0FBR0EsR0FBRyxDQUFDLEdBQUdMLEVBQUUsZ0JBQWdCSyxFQUFFTCxFQUFFLGFBQWEsQ0FBQ0ssRUFBTUwsRUFBRUEsRUFBRSxnQkFBZ0IsRUFBRUssR0FBRyxDQUFDLElBQUlTLEVBQUUsR0FBRyxHQUFHVCxDQUFDLEVBQUVRLEVBQUUsR0FBR0MsRUFBRWQsRUFBRWMsQ0FBQyxFQUFFLEdBQUdULEdBQUcsQ0FBQ1EsQ0FBQyxDQUFDLENBQUMsU0FBUyxHQUFHYixFQUFFLENBQUMsR0FBUSxFQUFFLEVBQUcsTUFBTSxNQUFNLEVBQUUsR0FBRyxDQUFDLEVBQUUsR0FBSSxFQUFDLElBQUlLLEVBQUUsR0FBR0wsRUFBRSxDQUFDLEVBQUUsR0FBUSxFQUFBSyxFQUFFLEdBQUcsT0FBTyxHQUFHTCxFQUFFLEVBQUcsQ0FBQSxFQUFFLEtBQUssSUFBSWMsRUFBRSxHQUFHZCxFQUFFSyxDQUFDLEVB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QSxFQUFFQyxFQUFFUSxDQUFDLEVBQUVULEVBQUVBLEVBQUUsT0FBY0EsRUFBRSxJQUFLLElBQUdRLEVBQUVSLEVBQUUsWUFBWUwsRUFBRSxDQUFxRixPQUFwRixHQUFHQSxFQUFFSyxDQUFDLEVBQUVMLEVBQUVLLEVBQUUsYUFBYUMsRUFBRU8sRUFBRSxNQUFNQSxFQUFFUCxFQUFFTyxFQUFFLFFBQVEsRUFBRVIsRUFBRSxLQUFLUSxFQUFFUCxFQUFFRCxFQUFFLElBQUksR0FBR1EsQ0FBQyxFQUFFYixFQUFFLEdBQUdhLEVBQUViLENBQUMsRUFBU00sRUFBQyxDQUFFLElBQUssR0FBRUQsRUFBRSxHQUFHLEtBQUtBLEVBQUVRLEVBQUViLEVBQUVjLENBQUMsRUFBRSxNQUFNZCxFQUFFLElBQUssR0FBRUssRUFBRSxHQUFHLEtBQUtBLEVBQUVRLEVBQUViLEVBQUVjLENBQUMsRUFBRSxNQUFNZCxFQUFFLElBQUssSUFBR0ssRUFBRSxHQUFHLEtBQUtBLEVBQUVRLEVBQUViLEVBQUVjLENBQUMsRUFBRSxNQUFNZCxFQUFFLElBQUssSUFBR0ssRUFBRSxHQUFHLEtBQUtBLEVBQUVRLEVBQUUsR0FBR0EsRUFBRSxLQUFLYixDQUFDLEVBQUVjLENBQUMsRUFBRSxNQUFNZCxDQUFDLENBQUMsTUFBTSxNQUFNLEVBQUUsSUFDdmdCYSxFQUFFLEVBQUUsQ0FBQyxDQUFFLENBQUMsT0FBT1IsRUFBRSxJQUFLLEdBQUUsT0FBT1EsRUFBRVIsRUFBRSxLQUFLQyxFQUFFRCxFQUFFLGFBQWFDLEVBQUVELEVBQUUsY0FBY1EsRUFBRVAsRUFBRSxHQUFHTyxFQUFFUCxDQUFDLEVBQUUsR0FBR04sRUFBRUssRUFBRVEsRUFBRVAsRUFBRVEsQ0FBQyxFQUFFLElBQUssR0FBRSxPQUFPRCxFQUFFUixFQUFFLEtBQUtDLEVBQUVELEVBQUUsYUFBYUMsRUFBRUQsRUFBRSxjQUFjUSxFQUFFUCxFQUFFLEdBQUdPLEVBQUVQLENBQUMsRUFBRSxHQUFHTixFQUFFSyxFQUFFUSxFQUFFUCxFQUFFUSxDQUFDLEVBQUUsSUFBSyxH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UUFBUyxLQUFLLFFBQVMsS0FBSyxRQUFTLEtBQUssR0FBSSxFQUFHLEVBQUssRUFHbEYsS0FBSyxPQUFPLFVBQVU2VCxHQUFPLENBQUMsRUFBR0EsR0FBTyxDQUFDLEVBQUdBLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLENBQUMsRUFBR0EsR0FBTyxDQUFDLEVBQUdBLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLENBQUMsRUFBR0EsR0FBTyxDQUFDLEVBQUdBLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLENBQUMsRUFBR0EsR0FBTyxFQUFFLEVBQUdBLEdBQU8sRUFBRSxFQUFHQSxHQUFPLEVBQUUsRUFBR0EsR0FBTyxFQUFFLEVBQUdBLEdBQU8sRUFBRSxFQUFHQSxHQUFPLEVBQUUsQ0FBQyxFQUMxTSxLQUFLLE9BQU8sVUFBVUMsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sQ0FBQyxFQUFHQSxFQUFPLENBQUMsRUFBR0EsRUFBTyxDQUFDLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxFQUFFLEVBQUdBLEVBQU8sRUFBRSxFQUFHQSxFQUFPLEVBQUUsRUFBR0EsRUFBTyxFQUFFLENBQUMsRUFDMU0sS0FBSyxPQUFPLFVBQVVGLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLENBQUMsRUFBR0EsR0FBTyxDQUFDLEVBQUdBLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLENBQUMsRUFBR0EsR0FBTyxDQUFDLEVBQUdBLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLENBQUMsRUFBR0EsR0FBTyxDQUFDLEVBQUdBLEdBQU8sQ0FBQyxFQUFHQSxHQUFPLEVBQUUsRUFBR0EsR0FBTyxFQUFFLEVBQUdBLEdBQU8sRUFBRSxFQUFHQSxHQUFPLEVBQUUsRUFBR0EsR0FBTyxFQUFFLEVBQUdBLEdBQU8sRUFBRSxDQUFDLEVBRXJNcmpCLEdBQUksRUFBR0EsR0FB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UUFBUUEsRUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQ3BGLEtBQUssSUFBSSxRQUFRLENBQUNBLEVBQVEsR0FBRyxDQUFDLEVBQUUsUUFBUSxDQUFDQSxFQUFRLEdBQUcsQ0FBQyxFQUFFLFFBQVFBLEVBQVEsR0FBRyxDQUFDLEVBQzNFLEtBQUssSUFBSSxNQUFNLEVBQUlBLEVBQVEsRUFBRSxFQUFFLENBQUMsRUFBRyxFQUFJQSxFQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUcsRUFBSUEsRUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQ3pFLEtBQUssSUFBSSxVQUFVQSxFQUFRLEVBQUUsRUFBRSxDQUFDLEVBQUdBLEVBQVEsRUFBRSxFQUFFLENBQUMsRUFBR0EsRUFBUSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQ2xFLENBU0gsR0FOSSxLQUFLLEVBQ1AsS0FBSyxJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBRTFELEtBQUssSUFBSSxVQUFVLENBQUMsS0FBSyxHQUFHLEVBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRyxLQUFLLEdBQUcsQ0FBQyxFQUdsRCxLQUFLLEVBQUcsQ0FDVixJQUFJQyxFQUVBLEtBQUssRUFDUEEsRUFBYSxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBSSxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFJLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRyxLQUFLLEVBQUUsRUFBRSxDQUFDLEVBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBRTdGQSxFQUFhLENBQUMsS0FBSyxHQUFHLEVBQUksS0FBSyxFQUFFLEVBQUUsQ0FBQyxFQUFHLEtBQUssR0FBRyxFQUFJLEtBQUssRUFBRSxFQUFFLENBQUMsRUFBRyxLQUFLLEdBQUcsRUFBSSxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFHekYsSUFBSUMsRUFB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LEVBQVUsQ0FDSixNQUFBSSxFQUFnQkosRUFBUyxJQUFlSyxHQUNuQyxJQUFJLFFBQVM3M0QsR0FBWSxDQUN0QixNQUFBaWlCLEVBQU0sSUFBSSxNQUNoQkEsRUFBSSxJQUFNNDFDLEVBQVEsT0FDbEI1MUMsRUFBSSxPQUFTamlCLENBQUEsQ0FDaEIsQ0FDSixFQUVELFFBQVEsSUFBSTQzRCxDQUFhLEVBQUUsS0FBSyxJQUFNTCxFQUFpQixFQUFLLENBQUMsQ0FDakUsQ0FBQSxFQUNELENBQUNDLENBQVEsQ0FBQyxFQUdURSxFQUNPLE9BQUFOLGtCQUFBLElBQUMsT0FBSSxTQUFXLGFBQUEsQ0FBQSxFQVEzQixHQUpLTyxHQUNPLFFBQUEsTUFBT0YsRUFBZ0IscUJBQXFCLEVBR3BERCxFQUFVLENBQ1YsTUFBTU0sRUFBOEIsQ0FBQSxFQUM1QixRQUFBLElBQUksZ0NBQWdDTixDQUFRLEVBQzNDQSxFQUFBLFFBQVNLLEdBQVksQ0FDbkJDLEVBQUEsS0FBSyxJQUFJLEtBQU8sRUFDdkJBLEVBQU9BLEVBQU8sT0FBUyxDQUFDLEVBQUUsSUFBTUQsRUFBUSxNQUM1QyxDQUFBLEVBRUFDLEVBQU9BLEVBQU8sT0FBUyxDQUFDLEVBQUUsT0FBUyxJQUFNLENBQ3JDUCxFQUFpQixFQUFLLENBQUEsQ0FFOUIsQ0FDQSxPQUFJRCxFQUNRRixrQkFBQSxJQUFBLE1BQUEsQ0FBSSxTQUFDQSxrQkFBQSxJQUFBLFFBQUEsQ0FBQSxDQUFPLENBQUUsQ0FBQSxFQUl0QkEsc0JBQUMsaUJBQWlCLFNBQWpCLENBQTBCLE1BQU8sQ0FBRSxTQUFBSSxFQUFVLFFBQVNFLEdBQXFCSixHQUN2RSxTQUFBaDZELENBQ0wsQ0FBQSxDQUVSLEVBQ2EsYUFBZSxJQUFNeTZELGFBQUFBLFdBQVcsZ0JBQWdCIiwieF9nb29nbGVfaWdub3JlTGlzdCI6WzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTEsMTIsMTMsMTQsMTUsMTYsMTcsMTgsMTksMjAsMjEsMjIsMjMsMjQsMjUsMjYsMjcsMjgsMjksMzAsMzEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNzEsNzJdfQ==
