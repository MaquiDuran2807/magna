import{K as N,M as j,z as e,L as x,w as u,R as v,_ as p}from"./GetsIdServices-a2eadd61.js";import{i as f,h as P,b}from"./main.js";import{B as y,S as B,f as M,a as R}from"./sidebarBolgs-d405caca.js";import{a as S}from"./index.esm-0326b631.js";import{u as w}from"./useLazyload-ba07af35.js";import"./floawhatsapp-034e869d.js";import"./footer1-6fa4e3b7.js";import"./index.esm-aae65489.js";import"./iconBase-f5841301.js";import"./index.esm-0aabaae2.js";import"./index.esm-970eed6e.js";var F=class extends N{constructor(s,t){super(s,t)}bindMethods(){super.bindMethods(),this.fetchNextPage=this.fetchNextPage.bind(this),this.fetchPreviousPage=this.fetchPreviousPage.bind(this)}setOptions(s,t){super.setOptions({...s,behavior:f()},t)}getOptimisticResult(s){return s.behavior=f(),super.getOptimisticResult(s)}fetchNextPage(s){return this.fetch({...s,meta:{fetchMore:{direction:"forward"}}})}fetchPreviousPage(s){return this.fetch({...s,meta:{fetchMore:{direction:"backward"}}})}createResult(s,t){var n,o,m,i;const{state:a}=s,c=super.createResult(s,t),{isFetching:r,isRefetching:l}=c,d=r&&((o=(n=a.fetchMeta)==null?void 0:n.fetchMore)==null?void 0:o.direction)==="forward",h=r&&((i=(m=a.fetchMeta)==null?void 0:m.fetchMore)==null?void 0:i.direction)==="backward";return{...c,fetchNextPage:this.fetchNextPage,fetchPreviousPage:this.fetchPreviousPage,hasNextPage:P(t,a.data),hasPreviousPage:b(t,a.data),isFetchingNextPage:d,isFetchingPreviousPage:h,isRefetching:l&&!d&&!h}}};function L(s,t){return j(s,F,t)}const O=({blogs:s,search:t})=>e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"row",children:[t&&t.length===0&&e.jsx("h3",{children:"No se encontraron resultados"}),t&&t.length>0&&e.jsx("h3",{children:"Resultados de la búsqueda"}),t&&(t==null?void 0:t.map(a=>e.jsx("div",{className:"col-lg-4 col-md-4 col-sm-6 ",children:e.jsx(x,{to:`/blog/${a.id}`,className:"link-blogs",children:e.jsxs("div",{className:"card card-blog mt-3 small-card",children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:a.image,className:"img-fluid small-image",alt:a.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:a.title}),e.jsxs("p",{className:"card-text",children:[a.description.slice(0,200),"..."]})]})]})})},a.id))),t&&t.length>0&&e.jsx("hr",{className:"mt-5"})]}),e.jsx("div",{className:"row",children:s.map(a=>{let c="",r="",l="";return a.important===!1?(c="col-lg-4 col-md-4 col-sm-6",l="small-card",r="small-image"):a.important===!0?(c="col-lg-6 col-md-12 col-sm-12 ",r="big-image",l="big-card"):(c="col-lg-3 col-md-4 col-sm-6",r="small-image",l="small-card"),e.jsx("div",{className:c,children:e.jsx(x,{to:`/blog/${a.id}`,className:"link-blogs",children:e.jsxs("div",{className:`card card-blog mt-3 ${l}`,children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:a.image,className:` img-fluid ${r}`,alt:a.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:a.title}),e.jsxs("p",{className:"card-text",children:[a.description.slice(0,200),"..."]})]})]})})},a.id)})})]}),_=({setFilter:s})=>{const[t,a]=u.useState(""),c=r=>{a(r.target.value),s(r.target.value)};return e.jsxs("div",{children:[e.jsx("input",{type:"text",value:t,onChange:c,placeholder:"Buscar...",className:"blog-search"}),e.jsx(S,{className:"ms-2"})]})},C=v.lazy(()=>p(()=>import("./GetsIdServices-a2eadd61.js").then(s=>s.$),[])),E=()=>{const[s,t]=u.useState(""),[a,c]=u.useState(null),{data:r,isError:l,isLoading:d,fetchNextPage:h,hasNextPage:n,isFetchingNextPage:o}=L({queryKey:["blogs"],queryFn:({pageParam:i=0})=>R(i),initialPageParam:"1",staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30,getNextPageParam:i=>{if(i!=null&&i.nextPage)return i.nextPage.split("=")[1]}});if(u.useEffect(()=>{if(!s)return;(async()=>{const g=await M(s);g&&c(g)})()},[s]),l)return e.jsx("div",{children:"Error"});if(d)return e.jsx(C,{});if(!r)return;const m=r.pages.flatMap(i=>(i==null?void 0:i.blogs)??[]);return e.jsx("div",{className:"blog-container pt-3",children:e.jsx(y,{children:e.jsxs("div",{className:"container-fluid",children:[e.jsx("div",{className:"blog-header  text-center",children:e.jsx("h1",{children:"MagnaBlog"})}),e.jsx("div",{className:" text-center",children:e.jsx(_,{setFilter:t})}),e.jsxs("div",{className:"blog-cards ",children:[e.jsxs("div",{className:"row",children:[e.jsx("div",{className:"col-lg-8 col-12",children:e.jsx(O,{blogs:m,search:a})}),e.jsx("div",{className:"col-md-4 col-12",children:e.jsx(B,{})})]}),e.jsx("button",{onClick:()=>h(),className:"btn btn-primary",type:"button",disabled:!n||o,style:{marginTop:"2rem"},children:o?"Loading more...":n?"Cargar más blogs":"No hay más blogs"})]})]})})})};function W(){const{isVisible:s,ref:t}=w("100px");return e.jsx("div",{id:"LazyBlog",ref:t,children:s?e.jsx(E,{}):null})}export{W as default};


//# sourceMappingURL=data:application/json;base64,