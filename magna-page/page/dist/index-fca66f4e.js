import{r as e}from"./jsx-runtime-c0a91cf1.js";import{u as I,f as $,b,n as A,L as O}from"./pagesLayouts-407d54f6.js";function L(){const n=e.useRef(!1);return I(()=>(n.current=!0,()=>{n.current=!1}),[]),n}function U(){const n=L(),[s,t]=e.useState(0),r=e.useCallback(()=>{n.current&&t(s+1)},[s]);return[e.useCallback(()=>$.postRender(r),[r]),s]}class B extends e.Component{getSnapshotBeforeUpdate(s){const t=this.props.childRef.current;if(t&&s.isPresent&&!this.props.isPresent){const r=this.props.sizeRef.current;r.height=t.offsetHeight||0,r.width=t.offsetWidth||0,r.top=t.offsetTop,r.left=t.offsetLeft}return null}componentDidUpdate(){}render(){return this.props.children}}function S({children:n,isPresent:s}){const t=e.useId(),r=e.useRef(null),m=e.useRef({width:0,height:0,top:0,left:0});return e.useInsertionEffect(()=>{const{width:d,height:l,top:f,left:h}=m.current;if(s||!r.current||!d||!l)return;r.current.dataset.motionPopId=t;const a=document.createElement("style");return document.head.appendChild(a),a.sheet&&a.sheet.insertRule(`
          [data-motion-pop-id="${t}"] {
            position: absolute !important;
            width: ${d}px !important;
            height: ${l}px !important;
            top: ${f}px !important;
            left: ${h}px !important;
          }
        `),()=>{document.head.removeChild(a)}},[s]),e.createElement(B,{isPresent:s,childRef:r,sizeRef:m},e.cloneElement(n,{ref:r}))}const z=({children:n,initial:s,isPresent:t,onExitComplete:r,custom:m,presenceAffectsLayout:d,mode:l})=>{const f=b(T),h=e.useId(),a=e.useMemo(()=>({id:h,initial:s,isPresent:t,custom:m,onExitComplete:o=>{f.set(o,!0);for(const c of f.values())if(!c)return;r&&r()},register:o=>(f.set(o,!1),()=>f.delete(o))}),d?void 0:[t]);return e.useMemo(()=>{f.forEach((o,c)=>f.set(c,!1))},[t]),e.useEffect(()=>{!t&&!f.size&&r&&r()},[t]),l==="popLayout"&&(n=e.createElement(S,{isPresent:t},n)),e.createElement(A.Provider,{value:a},n)};function T(){return new Map}function D(n){return e.useEffect(()=>()=>n(),[])}const p=n=>n.key||"";function G(n,s){n.forEach(t=>{const r=p(t);s.set(r,t)})}function H(n){const s=[];return e.Children.forEach(n,t=>{e.isValidElement(t)&&s.push(t)}),s}const _=({children:n,custom:s,initial:t=!0,onExitComplete:r,exitBeforeEnter:m,presenceAffectsLayout:d=!0,mode:l="sync"})=>{const f=e.useContext(O).forceRender||U()[0],h=L(),a=H(n);let o=a;const c=e.useRef(new Map).current,y=e.useRef(o),C=e.useRef(new Map).current,x=e.useRef(!0);if(I(()=>{x.current=!1,G(a,C),y.current=o}),D(()=>{x.current=!0,C.clear(),c.clear()}),x.current)return e.createElement(e.Fragment,null,o.map(u=>e.createElement(z,{key:p(u),isPresent:!0,initial:t?void 0:!1,presenceAffectsLayout:d,mode:l},u)));o=[...o];const g=y.current.map(p),M=a.map(p),F=g.length;for(let u=0;u<F;u++){const i=g[u];M.indexOf(i)===-1&&!c.has(i)&&c.set(i,void 0)}return l==="wait"&&c.size&&(o=[]),c.forEach((u,i)=>{if(M.indexOf(i)!==-1)return;const w=C.get(i);if(!w)return;const v=g.indexOf(i);let R=u;if(!R){const K=()=>{c.delete(i);const P=Array.from(C.keys()).filter(E=>!M.includes(E));if(P.forEach(E=>C.delete(E)),y.current=a.filter(E=>{const k=p(E);return k===i||P.includes(k)}),!c.size){if(h.current===!1)return;f(),r&&r()}};R=e.createElement(z,{key:p(w),isPresent:!1,onExitComplete:K,custom:s,presenceAffectsLayout:d,mode:l},w),c.set(i,R)}o.splice(v,0,R)}),o=o.map(u=>{const i=u.key;return c.has(i)?u:e.createElement(z,{key:p(u),isPresent:!0,presenceAffectsLayout:d,mode:l},u)}),e.createElement(e.Fragment,null,c.size?o:o.map(u=>e.cloneElement(u)))};export{_ as A};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
