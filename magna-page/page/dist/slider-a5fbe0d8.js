import{r as S,j as r}from"./jsx-runtime-6ef19e59.js";import{c as U,b as q,d as P,u as K,S as W,A as J,P as Q,N as X,a as Y}from"./autoplay-58d4bfb8.js";/* empty css                  */import{L as Z}from"./index-ab0b2909.js";import{u as ee}from"./useLazyload-689b34b0.js";import{m as te}from"./pagesLayouts-b2166cdd.js";import"./index-f8d2074a.js";function ie(n){let{swiper:e,extendParams:c,on:o}=n;c({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let l=null;function d(t){const i=l;i.length!==0&&(i.innerHTML="",i.innerHTML=t)}const s=t=>(Array.isArray(t)?t:[t]).filter(i=>!!i);function u(t){t===void 0&&(t=16);const i=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(t).replace(/x/g,i)}function p(t){t=s(t),t.forEach(i=>{i.setAttribute("tabIndex","0")})}function b(t){t=s(t),t.forEach(i=>{i.setAttribute("tabIndex","-1")})}function g(t,i){t=s(t),t.forEach(a=>{a.setAttribute("role",i)})}function x(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-roledescription",i)})}function k(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-controls",i)})}function h(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-label",i)})}function M(t,i){t=s(t),t.forEach(a=>{a.setAttribute("id",i)})}function j(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-live",i)})}function E(t){t=s(t),t.forEach(i=>{i.setAttribute("aria-disabled",!0)})}function A(t){t=s(t),t.forEach(i=>{i.setAttribute("aria-disabled",!1)})}function f(t){if(t.keyCode!==13&&t.keyCode!==32)return;const i=e.params.a11y,a=t.target;e.pagination&&e.pagination.el&&(a===e.pagination.el||e.pagination.el.contains(t.target))&&!t.target.matches(P(e.params.pagination.bulletClass))||(e.navigation&&e.navigation.nextEl&&a===e.navigation.nextEl&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?d(i.lastSlideMessage):d(i.nextSlideMessage)),e.navigation&&e.navigation.prevEl&&a===e.navigation.prevEl&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?d(i.firstSlideMessage):d(i.prevSlideMessage)),e.pagination&&a.matches(P(e.params.pagination.bulletClass))&&a.click())}function v(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:t,prevEl:i}=e.navigation;i&&(e.isBeginning?(E(i),b(i)):(A(i),p(i))),t&&(e.isEnd?(E(t),b(t)):(A(t),p(t)))}function L(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function y(){return L()&&e.params.pagination.clickable}function _(){const t=e.params.a11y;L()&&e.pagination.bullets.forEach(i=>{e.params.pagination.clickable&&(p(i),e.params.pagination.renderBullet||(g(i,"button"),h(i,t.paginationBulletMessage.replace(/\{\{index\}\}/,q(i)+1)))),i.matches(P(e.params.pagination.bulletActiveClass))?i.setAttribute("aria-current","true"):i.removeAttribute("aria-current")})}const B=(t,i,a)=>{p(t),t.tagName!=="BUTTON"&&(g(t,"button"),t.addEventListener("keydown",f)),h(t,a),k(t,i)},O=()=>{e.a11y.clicked=!0},D=()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{e.destroyed||(e.a11y.clicked=!1)})})},V=t=>{if(e.a11y.clicked)return;const i=t.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!i||!e.slides.includes(i))return;const a=e.slides.indexOf(i)===e.activeIndex,m=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(i);a||m||t.sourceCapabilities&&t.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(i),0))},$=()=>{const t=e.params.a11y;t.itemRoleDescriptionMessage&&x(e.slides,t.itemRoleDescriptionMessage),t.slideRole&&g(e.slides,t.slideRole);const i=e.slides.length;t.slideLabelMessage&&e.slides.forEach((a,m)=>{const I=e.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):m,w=t.slideLabelMessage.replace(/\{\{index\}\}/,I+1).replace(/\{\{slidesLength\}\}/,i);h(a,w)})},z=()=>{const t=e.params.a11y;e.el.append(l);const i=e.el;t.containerRoleDescriptionMessage&&x(i,t.containerRoleDescriptionMessage),t.containerMessage&&h(i,t.containerMessage);const a=e.wrapperEl,m=t.id||a.getAttribute("id")||`swiper-wrapper-${u(16)}`,I=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";M(a,m),j(a,I),$();let{nextEl:w,prevEl:N}=e.navigation?e.navigation:{};w=s(w),N=s(N),w&&w.forEach(R=>B(R,m,t.nextSlideMessage)),N&&N.forEach(R=>B(R,m,t.prevSlideMessage)),y()&&s(e.pagination.el).forEach(H=>{H.addEventListener("keydown",f)}),e.el.addEventListener("focus",V,!0),e.el.addEventListener("pointerdown",O,!0),e.el.addEventListener("pointerup",D,!0)};function G(){l&&l.remove();let{nextEl:t,prevEl:i}=e.navigation?e.navigation:{};t=s(t),i=s(i),t&&t.forEach(a=>a.removeEventListener("keydown",f)),i&&i.forEach(a=>a.removeEventListener("keydown",f)),y()&&s(e.pagination.el).forEach(m=>{m.removeEventListener("keydown",f)}),e.el.removeEventListener("focus",V,!0),e.el.removeEventListener("pointerdown",O,!0),e.el.removeEventListener("pointerup",D,!0)}o("beforeInit",()=>{l=U("span",e.params.a11y.notificationClass),l.setAttribute("aria-live","assertive"),l.setAttribute("aria-atomic","true")}),o("afterInit",()=>{e.params.a11y.enabled&&z()}),o("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{e.params.a11y.enabled&&$()}),o("fromEdge toEdge afterInit lock unlock",()=>{e.params.a11y.enabled&&v()}),o("paginationUpdate",()=>{e.params.a11y.enabled&&_()}),o("destroy",()=>{e.params.a11y.enabled&&G()})}var T=new Map,C=new WeakMap,F=0,ne=void 0;function ae(n){return n?(C.has(n)||(F+=1,C.set(n,F.toString())),C.get(n)):"0"}function se(n){return Object.keys(n).sort().filter(e=>n[e]!==void 0).map(e=>`${e}_${e==="root"?ae(n.root):n[e]}`).toString()}function re(n){let e=se(n),c=T.get(e);if(!c){const o=new Map;let l;const d=new IntersectionObserver(s=>{s.forEach(u=>{var p;const b=u.isIntersecting&&l.some(g=>u.intersectionRatio>=g);n.trackVisibility&&typeof u.isVisible>"u"&&(u.isVisible=b),(p=o.get(u.target))==null||p.forEach(g=>{g(b,u)})})},n);l=d.thresholds||(Array.isArray(n.threshold)?n.threshold:[n.threshold||0]),c={id:e,observer:d,elements:o},T.set(e,c)}return c}function oe(n,e,c={},o=ne){if(typeof window.IntersectionObserver>"u"&&o!==void 0){const p=n.getBoundingClientRect();return e(o,{isIntersecting:o,target:n,intersectionRatio:typeof c.threshold=="number"?c.threshold:0,time:0,boundingClientRect:p,intersectionRect:p,rootBounds:p}),()=>{}}const{id:l,observer:d,elements:s}=re(c);let u=s.get(n)||[];return s.has(n)||s.set(n,u),u.push(e),d.observe(n),function(){u.splice(u.indexOf(e),1),u.length===0&&(s.delete(n),d.unobserve(n)),s.size===0&&(d.disconnect(),T.delete(l))}}function le({threshold:n,delay:e,trackVisibility:c,rootMargin:o,root:l,triggerOnce:d,skip:s,initialInView:u,fallbackInView:p,onChange:b}={}){var g;const[x,k]=S.useState(null),h=S.useRef(),[M,j]=S.useState({inView:!!u,entry:void 0});h.current=b,S.useEffect(()=>{if(s||!x)return;let v;return v=oe(x,(L,y)=>{j({inView:L,entry:y}),h.current&&h.current(L,y),y.isIntersecting&&d&&v&&(v(),v=void 0)},{root:l,rootMargin:o,threshold:n,trackVisibility:c,delay:e},p),()=>{v&&v()}},[Array.isArray(n)?n.toString():n,x,l,o,d,s,c,p,e]);const E=(g=M.entry)==null?void 0:g.target,A=S.useRef();!x&&E&&!d&&!s&&A.current!==E&&(A.current=E,j({inView:!!u,entry:void 0}));const f=[k,M.inView,M.entry];return f.ref=f[0],f.inView=f[1],f.entry=f[2],f}const de=()=>{const n=K();return r.jsxs(r.Fragment,{children:[r.jsx("span",{onClick:()=>n.slideNext(),role:"button",className:"swiper-button-next custom-next-icon","aria-label":"BotÃ³n para pasar a la siguiente diapositiva"}),r.jsx("span",{onClick:()=>n.slidePrev(),children:r.jsx("button",{className:"swiper-button-prev custom-prev-icon","aria-label":"Pasar a la diapositiva anterior",style:{backgroundColor:"transparent",border:"none"}})})]})},ce=S.memo(({services:n})=>{const e=n==null?void 0:n.map(()=>le({triggerOnce:!1,threshold:.5}));if(!n)return null;const c={hidden:{opacity:0,y:50},show:{opacity:1,y:0,transition:{duration:1}},exit:{opacity:0,y:50}};return r.jsx(W,{spaceBetween:0,slidesPerView:1,autoplay:{delay:5e3,disableOnInteraction:!1,pauseOnMouseEnter:!0},modules:[J,Q,X,ie],className:"mySwiper",children:n==null?void 0:n.map((o,l)=>{var d,s;return r.jsxs(Y,{children:[r.jsx("div",{className:"container-con-imagen",children:r.jsx("img",{srcSet:`${o.imagen_celular} 450w,
                    ${o.imagen_tablet} 1024w,
                    ${o.imagen} 5000w`,sizes:`(max-width: 450px) 280px,\r
                  (max-width: 1023px) 736px,\r
                  (min-width: 1024px) 1024px`,alt:`imagen de ${o.nombre}`,loading:"eager",decoding:"async",className:"img-fluid imagen",fetchPriority:"high"})}),r.jsx("div",{className:"container-fluid sliders",children:r.jsx(te.div,{ref:e&&((d=e[l])==null?void 0:d.ref),variants:c,initial:"hidden",animate:e&&((s=e[l])!=null&&s.inView)?"show":"hidden",exit:"exit",children:r.jsx("div",{className:"container",children:r.jsx("div",{className:"row",children:r.jsxs("div",{className:"col-12 col-lg-8  description",children:[r.jsx("h1",{className:"title text-capitalize",children:o.nombre}),r.jsx("br",{}),r.jsx("p",{className:"text-white col-12 col-lg-10 ",children:o.descripcion}),r.jsxs("div",{className:"col-12 ",children:[r.jsx("br",{}),r.jsx(Z,{to:"/contact",children:r.jsx("button",{className:"llamado",children:"Contactar"})})]}),r.jsx(de,{})]})})})})})]},l)})})});function be({services:n}){const{isVisible:e,ref:c}=ee("100px");return r.jsx("div",{id:"LazySlider",ref:c,children:e?r.jsx(ce,{services:n}):null})}export{be as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
