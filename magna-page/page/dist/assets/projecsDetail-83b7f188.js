import{p as w,q as b,j as e,S as E,A as P,k as N,l as T,m as _,o as S,r as u,_ as y,R as j,n as O,i as x,h as I,L as g}from"./index-ef17fea3.js";import{B as M}from"./banner-4cdfae9d.js";import{i as R}from"./projects-ac20cde4.js";import"./index.esm-72d272c7.js";import"./iconBase-d5e231c0.js";import"./index.esm-67870a5b.js";function F(i){const{effect:s,swiper:t,on:c,setTranslate:l,setTransition:f,overwriteParams:o,perspective:r,recreateShadows:n,getEffectParams:a}=i;c("beforeInit",()=>{if(t.params.effect!==s)return;t.classNames.push(`${t.params.containerModifierClass}${s}`),r&&r()&&t.classNames.push(`${t.params.containerModifierClass}3d`);const d=o?o():{};Object.assign(t.params,d),Object.assign(t.originalParams,d)}),c("setTranslate",()=>{t.params.effect===s&&l()}),c("setTransition",(d,p)=>{t.params.effect===s&&f(p)}),c("transitionEnd",()=>{if(t.params.effect===s&&n){if(!a||!a().slideShadows)return;t.slides.forEach(d=>{d.querySelectorAll(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").forEach(p=>p.remove())}),n()}});let m;c("virtualUpdate",()=>{t.params.effect===s&&(t.slides.length||(m=!0),requestAnimationFrame(()=>{m&&t.slides&&t.slides.length&&(l(),m=!1)}))})}function $(i,s){const t=w(s);return t!==s&&(t.style.backfaceVisibility="hidden",t.style["-webkit-backface-visibility"]="hidden"),t}function D(i){let{swiper:s,duration:t,transformElements:c,allSlides:l}=i;const{activeIndex:f}=s,o=r=>r.parentElement?r.parentElement:s.slides.filter(a=>a.shadowRoot&&a.shadowRoot===r.parentNode)[0];if(s.params.virtualTranslate&&t!==0){let r=!1,n;l?n=c:n=c.filter(a=>{const m=a.classList.contains("swiper-slide-transform")?o(a):a;return s.getSlideIndex(m)===f}),n.forEach(a=>{b(a,()=>{if(r||!s||s.destroyed)return;r=!0,s.animating=!1;const m=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});s.wrapperEl.dispatchEvent(m)})})}}function k(i){let{swiper:s,extendParams:t,on:c}=i;t({fadeEffect:{crossFade:!1}}),F({effect:"fade",swiper:s,on:c,setTranslate:()=>{const{slides:o}=s,r=s.params.fadeEffect;for(let n=0;n<o.length;n+=1){const a=s.slides[n];let d=-a.swiperSlideOffset;s.params.virtualTranslate||(d-=s.translate);let p=0;s.isHorizontal()||(p=d,d=0);const v=s.params.fadeEffect.crossFade?Math.max(1-Math.abs(a.progress),0):1+Math.min(Math.max(a.progress,-1),0),h=$(r,a);h.style.opacity=v,h.style.transform=`translate3d(${d}px, ${p}px, 0px)`}},setTransition:o=>{const r=s.slides.map(n=>w(n));r.forEach(n=>{n.style.transitionDuration=`${o}ms`}),D({swiper:s,duration:o,transformElements:r,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!s.params.cssMode})})}const A=({images:i})=>e.jsx(E,{spaceBetween:0,slidesPerView:1,autoplay:{delay:8e3,disableOnInteraction:!1,pauseOnMouseEnter:!0},modules:[P,N,T,k],effect:"fade",className:"projectDetailSlider",children:i.map((s,t)=>e.jsx(_,{style:{height:"100%",width:"100%",backgroundColor:"white"},children:e.jsxs(S.div,{initial:{opacity:0,y:50},transition:{duration:.5},animate:{opacity:1,y:0},children:[e.jsx("img",{src:`${s.imagen}`,alt:`proyecto-${s.proyecto} `,className:"img-fluid imagen-proecto"}),e.jsx("div",{children:e.jsx("a",{href:s.references_url?s.references_url:"https://www.Magnaingenieriaytopografia.com",target:"_blank",rel:"noreferrer",children:s.references_name?s.references_name:"Magnaingenieriaytopografia.com"})})]})},t))});const L=u.lazy(()=>y(()=>import("./proyectos-87d067a2.js"),["assets/proyectos-87d067a2.js","assets/index-ef17fea3.js","assets/index-fb14aeaa.css","assets/setionHeader-70313f63.js","assets/Recurso 1-e9af6898.js","assets/ScreenSize-3b2e8cbc.js","assets/useLazyload-ebb7f7c0.js","assets/proyectos-42af8fd5.css"])),V=u.lazy(()=>y(()=>import("./cardsProjects-de3e0c4c.js"),["assets/cardsProjects-de3e0c4c.js","assets/index-ef17fea3.js","assets/index-fb14aeaa.css","assets/useLazyload-ebb7f7c0.js","assets/cardsProjects-577b53fd.css"])),W=()=>{const[i,s]=j.useState(),[t,c]=j.useState([]),{projectArg:l}=O(),{data:f}=x({queryKey:["projects"],staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchOnMount:!1,refetchOnReconnect:!1,refetchInterval:1e3*60*30}),{data:o}=x({queryKey:["projectsImages"],staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchOnMount:!1,refetchOnReconnect:!1,refetchInterval:1e3*60*30});return!f||!o||!l?e.jsx("div",{children:"no hay "}):(u.useEffect(()=>{const r=f.results.find(a=>a.id===parseInt(l))||null,n=o.filter(a=>a.proyecto===parseInt(l));r&&(s(r),c(n))},[f,o,l]),!i||!t?null:e.jsx(e.Fragment,{children:e.jsxs(I,{children:[e.jsx(M,{title:"Proyectos",paragraph:"Proyectos",image:R}),e.jsxs("div",{className:"container-fluid",children:[e.jsxs("div",{className:"row titulo",children:[e.jsx("h2",{className:"col-10",children:i.nombre}),e.jsx(g,{to:"/projects",className:"col-2",children:e.jsx("button",{className:"boton-1 ",children:"ver m치s"})})]}),e.jsxs("div",{className:"row project-detail",children:[e.jsx("div",{className:"col-12 col-md-6 ",children:e.jsx(A,{images:t})}),e.jsxs("div",{className:"col-12 col-md-6",children:[e.jsx("br",{}),e.jsx("br",{}),e.jsx("h3",{children:"Descripci칩n del proyecto"}),e.jsx("p",{children:i.descripcion}),e.jsx("h3",{children:"Ubicaci칩n"}),e.jsxs("p",{children:[i.ciudad.departamento.pais.nombre,", ",i.ciudad.departamento.nombre,", ",i.ciudad.nombre]}),e.jsx("h3",{children:"Servicios prestados"}),i.servicios.map(r=>e.jsxs(e.Fragment,{children:[e.jsx("h5",{children:r.nombre},r.id),e.jsx(g,{to:"/servicios",children:e.jsx("button",{className:"boton-1",children:"ver m치s"})})]}))]},l)]}),e.jsx("div",{className:"row",children:e.jsx("div",{className:"col-12 relacionados",children:e.jsx("h3",{children:"Proyectos relacionados"})})}),e.jsx("div",{className:"row",children:e.jsx("div",{className:"col-12",children:e.jsx(V,{type:i.tipo.id,actualPage:i.id,imagenes:o})})}),e.jsx("div",{className:"row",children:e.jsx("div",{className:"col-12",children:e.jsx(L,{})})})]})]})}))};export{W as default};


//# sourceMappingURL=data:application/json;base64,