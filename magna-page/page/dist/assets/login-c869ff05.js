import{r as l,u as f,a as Z,j as a,c as u,b as P,d as ee,P as g,e as se,f as ae,N as oe,g as te}from"./index-ef17fea3.js";import{u as ne}from"./useLazyload-ebb7f7c0.js";const T=l.forwardRef(({as:e,bsPrefix:s,variant:o="primary",size:t,active:n=!1,disabled:r=!1,className:i,...d},m)=>{const c=f(s,"btn"),[p,{tagName:h}]=Z({tagName:e,disabled:r,...d}),j=h;return a.jsx(j,{...p,...d,ref:m,disabled:r,className:u(i,c,n&&"active",o&&`${c}-${o}`,t&&`${c}-${t}`,d.href&&r&&"disabled")})});T.displayName="Button";const re=T;function le(e,s){return l.Children.toArray(e).some(o=>l.isValidElement(o)&&o.type===s)}function ce({as:e,bsPrefix:s,className:o,...t}){s=f(s,"col");const n=P(),r=ee(),i=[],d=[];return n.forEach(m=>{const c=t[m];delete t[m];let p,h,j;typeof c=="object"&&c!=null?{span:p,offset:h,order:j}=c:p=c;const F=m!==r?`-${m}`:"";p&&i.push(p===!0?`${s}${F}`:`${s}${F}-${p}`),j!=null&&d.push(`order${F}-${j}`),h!=null&&d.push(`offset${F}-${h}`)}),[{...t,className:u(o,...i,...d)},{as:e,bsPrefix:s,spans:i}]}const b=l.forwardRef((e,s)=>{const[{className:o,...t},{as:n="div",bsPrefix:r,spans:i}]=ce(e);return a.jsx(n,{...t,ref:s,className:u(o,!i.length&&r)})});b.displayName="Col";const ie=b,me={type:g.string,tooltip:g.bool,as:g.elementType},k=l.forwardRef(({as:e="div",className:s,type:o="valid",tooltip:t=!1,...n},r)=>a.jsx(e,{...n,ref:r,className:u(s,`${o}-${t?"tooltip":"feedback"}`)}));k.displayName="Feedback";k.propTypes=me;const B=k,de=l.createContext({}),x=de,S=l.forwardRef(({id:e,bsPrefix:s,className:o,type:t="checkbox",isValid:n=!1,isInvalid:r=!1,as:i="input",...d},m)=>{const{controlId:c}=l.useContext(x);return s=f(s,"form-check-input"),a.jsx(i,{...d,ref:m,type:t,id:e||c,className:u(o,s,n&&"is-valid",r&&"is-invalid")})});S.displayName="FormCheckInput";const E=S,O=l.forwardRef(({bsPrefix:e,className:s,htmlFor:o,...t},n)=>{const{controlId:r}=l.useContext(x);return e=f(e,"form-check-label"),a.jsx("label",{...t,ref:n,htmlFor:o||r,className:u(s,e)})});O.displayName="FormCheckLabel";const w=O,G=l.forwardRef(({id:e,bsPrefix:s,bsSwitchPrefix:o,inline:t=!1,reverse:n=!1,disabled:r=!1,isValid:i=!1,isInvalid:d=!1,feedbackTooltip:m=!1,feedback:c,feedbackType:p,className:h,style:j,title:F="",type:$="checkbox",label:C,children:v,as:Q="input",...U},W)=>{s=f(s,"form-check"),o=f(o,"form-switch");const{controlId:L}=l.useContext(x),X=l.useMemo(()=>({controlId:e||L}),[L,e]),R=!v&&C!=null&&C!==!1||le(v,w),Y=a.jsx(E,{...U,type:$==="switch"?"checkbox":$,ref:W,isValid:i,isInvalid:d,disabled:r,as:Q});return a.jsx(x.Provider,{value:X,children:a.jsx("div",{style:j,className:u(h,R&&s,t&&`${s}-inline`,n&&`${s}-reverse`,$==="switch"&&o),children:v||a.jsxs(a.Fragment,{children:[Y,R&&a.jsx(w,{title:F,children:C}),c&&a.jsx(B,{type:p,tooltip:m,children:c})]})})})});G.displayName="FormCheck";const N=Object.assign(G,{Input:E,Label:w}),M=l.forwardRef(({bsPrefix:e,type:s,size:o,htmlSize:t,id:n,className:r,isValid:i=!1,isInvalid:d=!1,plaintext:m,readOnly:c,as:p="input",...h},j)=>{const{controlId:F}=l.useContext(x);return e=f(e,"form-control"),a.jsx(p,{...h,type:s,size:t,ref:j,readOnly:c,id:n||F,className:u(r,m?`${e}-plaintext`:e,o&&`${e}-${o}`,s==="color"&&`${e}-color`,i&&"is-valid",d&&"is-invalid")})});M.displayName="FormControl";const ue=Object.assign(M,{Feedback:B}),V=l.forwardRef(({className:e,bsPrefix:s,as:o="div",...t},n)=>(s=f(s,"form-floating"),a.jsx(o,{ref:n,className:u(e,s),...t})));V.displayName="FormFloating";const pe=V,z=l.forwardRef(({controlId:e,as:s="div",...o},t)=>{const n=l.useMemo(()=>({controlId:e}),[e]);return a.jsx(x.Provider,{value:n,children:a.jsx(s,{...o,ref:t})})});z.displayName="FormGroup";const A=z,D=l.forwardRef(({as:e="label",bsPrefix:s,column:o=!1,visuallyHidden:t=!1,className:n,htmlFor:r,...i},d)=>{const{controlId:m}=l.useContext(x);s=f(s,"form-label");let c="col-form-label";typeof o=="string"&&(c=`${c} ${c}-${o}`);const p=u(n,s,t&&"visually-hidden",o&&c);return r=r||m,o?a.jsx(ie,{ref:d,as:"label",className:p,htmlFor:r,...i}):a.jsx(e,{ref:d,className:p,htmlFor:r,...i})});D.displayName="FormLabel";const fe=D,_=l.forwardRef(({bsPrefix:e,className:s,id:o,...t},n)=>{const{controlId:r}=l.useContext(x);return e=f(e,"form-range"),a.jsx("input",{...t,type:"range",ref:n,className:u(s,e),id:o||r})});_.displayName="FormRange";const he=_,q=l.forwardRef(({bsPrefix:e,size:s,htmlSize:o,className:t,isValid:n=!1,isInvalid:r=!1,id:i,...d},m)=>{const{controlId:c}=l.useContext(x);return e=f(e,"form-select"),a.jsx("select",{...d,size:o,ref:m,className:u(t,e,s&&`${e}-${s}`,n&&"is-valid",r&&"is-invalid"),id:i||c})});q.displayName="FormSelect";const je=q,H=l.forwardRef(({bsPrefix:e,className:s,as:o="small",muted:t,...n},r)=>(e=f(e,"form-text"),a.jsx(o,{...n,ref:r,className:u(s,e,t&&"text-muted")})));H.displayName="FormText";const xe=H,J=l.forwardRef((e,s)=>a.jsx(N,{...e,ref:s,type:"switch"}));J.displayName="Switch";const Fe=Object.assign(J,{Input:N.Input,Label:N.Label}),K=l.forwardRef(({bsPrefix:e,className:s,children:o,controlId:t,label:n,...r},i)=>(e=f(e,"form-floating"),a.jsxs(A,{ref:i,className:u(s,e),controlId:t,...r,children:[o,a.jsx("label",{htmlFor:t,children:n})]})));K.displayName="FloatingLabel";const ye=K,ge={_ref:g.any,validated:g.bool,as:g.elementType},I=l.forwardRef(({className:e,validated:s,as:o="form",...t},n)=>a.jsx(o,{...t,ref:n,className:u(e,s&&"was-validated")}));I.displayName="Form";I.propTypes=ge;const y=Object.assign(I,{Group:A,Control:ue,Floating:pe,Check:N,Switch:Fe,Label:fe,Text:xe,Range:he,Select:je,FloatingLabel:ye});const Ne=()=>{const[e,s]=l.useState(""),[o,t]=l.useState(""),{mutateAsync:n}=se(),r=ae(),i=r.isTokenValid,d=async m=>{m.preventDefault();try{await n({email:e,password:o})&&await r.validateToken()}catch(c){console.error(c)}};return l.useEffect(()=>{},[]),i?a.jsx(oe,{to:"/cotizador"}):a.jsxs("div",{className:" contenedor-login",children:[a.jsx(te,{}),a.jsx("section",{className:"section-login",children:a.jsx("div",{className:"container login text-white",children:a.jsxs(y,{onSubmit:d,className:"row",children:[a.jsxs("div",{className:"col-10 col-sm-6 ",children:[a.jsx("h1",{children:"Iniciar sesión"}),a.jsxs(y.Group,{controlId:"formBasicEmail",children:[a.jsx(y.Label,{children:"Email"}),a.jsx(y.Control,{type:"email",placeholder:"Ingresa tu email",onChange:m=>s(m.target.value)})]}),a.jsxs(y.Group,{controlId:"formBasicPassword",children:[a.jsx(y.Label,{children:"Contraseña"}),a.jsx(y.Control,{type:"password",placeholder:"Ingresa tu contraseña",onChange:m=>t(m.target.value)})]}),a.jsx("br",{}),a.jsx(re,{variant:"primary",type:"submit",children:"Iniciar sesión"})]}),a.jsxs("div",{className:"col-12 col-sm-6 rig text-center container ",children:[a.jsx("h2",{children:"Magna"}),a.jsx("br",{}),a.jsx("p",{className:"text-white",children:"Ingeniería y Topografía"}),a.jsx("br",{}),a.jsx("h5",{children:'"Dando forma al mundo, un proyecto a la vez."'})]})]})})})]})};function ve(){const{isVisible:e,ref:s}=ne("100px");return a.jsx("div",{id:"LazyLogin",ref:s,children:e?a.jsx(Ne,{}):null})}export{ve as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
