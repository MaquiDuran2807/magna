import{r as S,j as r}from"./jsx-runtime-c0a91cf1.js";import{c as _,e as q,a as B,u as K,S as W,A as J,P as Q,N as X,b as Y}from"./swiper-ff39d36a.js";/* empty css                  */import{L as Z}from"./index-cc74cdf4.js";import{u as ee}from"./useLazyload-849daff9.js";import{y as te}from"./GetsIdServices-dc6be9f6.js";import{m as ie}from"./pagesLayouts-407d54f6.js";function ne(n){let{swiper:e,extendParams:l,on:o}=n;l({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),e.a11y={clicked:!1};let d=null;function u(t){const i=d;i.length!==0&&(i.innerHTML="",i.innerHTML=t)}const s=t=>(Array.isArray(t)?t:[t]).filter(i=>!!i);function c(t){t===void 0&&(t=16);const i=()=>Math.round(16*Math.random()).toString(16);return"x".repeat(t).replace(/x/g,i)}function p(t){t=s(t),t.forEach(i=>{i.setAttribute("tabIndex","0")})}function b(t){t=s(t),t.forEach(i=>{i.setAttribute("tabIndex","-1")})}function g(t,i){t=s(t),t.forEach(a=>{a.setAttribute("role",i)})}function E(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-roledescription",i)})}function I(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-controls",i)})}function v(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-label",i)})}function M(t,i){t=s(t),t.forEach(a=>{a.setAttribute("id",i)})}function R(t,i){t=s(t),t.forEach(a=>{a.setAttribute("aria-live",i)})}function x(t){t=s(t),t.forEach(i=>{i.setAttribute("aria-disabled",!0)})}function A(t){t=s(t),t.forEach(i=>{i.setAttribute("aria-disabled",!1)})}function f(t){if(t.keyCode!==13&&t.keyCode!==32)return;const i=e.params.a11y,a=t.target;e.pagination&&e.pagination.el&&(a===e.pagination.el||e.pagination.el.contains(t.target))&&!t.target.matches(B(e.params.pagination.bulletClass))||(e.navigation&&e.navigation.nextEl&&a===e.navigation.nextEl&&(e.isEnd&&!e.params.loop||e.slideNext(),e.isEnd?u(i.lastSlideMessage):u(i.nextSlideMessage)),e.navigation&&e.navigation.prevEl&&a===e.navigation.prevEl&&(e.isBeginning&&!e.params.loop||e.slidePrev(),e.isBeginning?u(i.firstSlideMessage):u(i.prevSlideMessage)),e.pagination&&a.matches(B(e.params.pagination.bulletClass))&&a.click())}function h(){if(e.params.loop||e.params.rewind||!e.navigation)return;const{nextEl:t,prevEl:i}=e.navigation;i&&(e.isBeginning?(x(i),b(i)):(A(i),p(i))),t&&(e.isEnd?(x(t),b(t)):(A(t),p(t)))}function L(){return e.pagination&&e.pagination.bullets&&e.pagination.bullets.length}function y(){return L()&&e.params.pagination.clickable}function z(){const t=e.params.a11y;L()&&e.pagination.bullets.forEach(i=>{e.params.pagination.clickable&&(p(i),e.params.pagination.renderBullet||(g(i,"button"),v(i,t.paginationBulletMessage.replace(/\{\{index\}\}/,q(i)+1)))),i.matches(B(e.params.pagination.bulletActiveClass))?i.setAttribute("aria-current","true"):i.removeAttribute("aria-current")})}const T=(t,i,a)=>{p(t),t.tagName!=="BUTTON"&&(g(t,"button"),t.addEventListener("keydown",f)),v(t,a),I(t,i)},O=()=>{e.a11y.clicked=!0},D=()=>{requestAnimationFrame(()=>{requestAnimationFrame(()=>{e.destroyed||(e.a11y.clicked=!1)})})},V=t=>{if(e.a11y.clicked)return;const i=t.target.closest(`.${e.params.slideClass}, swiper-slide`);if(!i||!e.slides.includes(i))return;const a=e.slides.indexOf(i)===e.activeIndex,m=e.params.watchSlidesProgress&&e.visibleSlides&&e.visibleSlides.includes(i);a||m||t.sourceCapabilities&&t.sourceCapabilities.firesTouchEvents||(e.isHorizontal()?e.el.scrollLeft=0:e.el.scrollTop=0,e.slideTo(e.slides.indexOf(i),0))},F=()=>{const t=e.params.a11y;t.itemRoleDescriptionMessage&&E(e.slides,t.itemRoleDescriptionMessage),t.slideRole&&g(e.slides,t.slideRole);const i=e.slides.length;t.slideLabelMessage&&e.slides.forEach((a,m)=>{const k=e.params.loop?parseInt(a.getAttribute("data-swiper-slide-index"),10):m,w=t.slideLabelMessage.replace(/\{\{index\}\}/,k+1).replace(/\{\{slidesLength\}\}/,i);v(a,w)})},G=()=>{const t=e.params.a11y;e.el.append(d);const i=e.el;t.containerRoleDescriptionMessage&&E(i,t.containerRoleDescriptionMessage),t.containerMessage&&v(i,t.containerMessage);const a=e.wrapperEl,m=t.id||a.getAttribute("id")||`swiper-wrapper-${c(16)}`,k=e.params.autoplay&&e.params.autoplay.enabled?"off":"polite";M(a,m),R(a,k),F();let{nextEl:w,prevEl:j}=e.navigation?e.navigation:{};w=s(w),j=s(j),w&&w.forEach(N=>T(N,m,t.nextSlideMessage)),j&&j.forEach(N=>T(N,m,t.prevSlideMessage)),y()&&s(e.pagination.el).forEach(U=>{U.addEventListener("keydown",f)}),e.el.addEventListener("focus",V,!0),e.el.addEventListener("pointerdown",O,!0),e.el.addEventListener("pointerup",D,!0)};function H(){d&&d.remove();let{nextEl:t,prevEl:i}=e.navigation?e.navigation:{};t=s(t),i=s(i),t&&t.forEach(a=>a.removeEventListener("keydown",f)),i&&i.forEach(a=>a.removeEventListener("keydown",f)),y()&&s(e.pagination.el).forEach(m=>{m.removeEventListener("keydown",f)}),e.el.removeEventListener("focus",V,!0),e.el.removeEventListener("pointerdown",O,!0),e.el.removeEventListener("pointerup",D,!0)}o("beforeInit",()=>{d=_("span",e.params.a11y.notificationClass),d.setAttribute("aria-live","assertive"),d.setAttribute("aria-atomic","true")}),o("afterInit",()=>{e.params.a11y.enabled&&G()}),o("slidesLengthChange snapGridLengthChange slidesGridLengthChange",()=>{e.params.a11y.enabled&&F()}),o("fromEdge toEdge afterInit lock unlock",()=>{e.params.a11y.enabled&&h()}),o("paginationUpdate",()=>{e.params.a11y.enabled&&z()}),o("destroy",()=>{e.params.a11y.enabled&&H()})}var P=new Map,C=new WeakMap,$=0,ae=void 0;function se(n){return n?(C.has(n)||($+=1,C.set(n,$.toString())),C.get(n)):"0"}function re(n){return Object.keys(n).sort().filter(e=>n[e]!==void 0).map(e=>`${e}_${e==="root"?se(n.root):n[e]}`).toString()}function oe(n){let e=re(n),l=P.get(e);if(!l){const o=new Map;let d;const u=new IntersectionObserver(s=>{s.forEach(c=>{var p;const b=c.isIntersecting&&d.some(g=>c.intersectionRatio>=g);n.trackVisibility&&typeof c.isVisible>"u"&&(c.isVisible=b),(p=o.get(c.target))==null||p.forEach(g=>{g(b,c)})})},n);d=u.thresholds||(Array.isArray(n.threshold)?n.threshold:[n.threshold||0]),l={id:e,observer:u,elements:o},P.set(e,l)}return l}function le(n,e,l={},o=ae){if(typeof window.IntersectionObserver>"u"&&o!==void 0){const p=n.getBoundingClientRect();return e(o,{isIntersecting:o,target:n,intersectionRatio:typeof l.threshold=="number"?l.threshold:0,time:0,boundingClientRect:p,intersectionRect:p,rootBounds:p}),()=>{}}const{id:d,observer:u,elements:s}=oe(l);let c=s.get(n)||[];return s.has(n)||s.set(n,c),c.push(e),u.observe(n),function(){c.splice(c.indexOf(e),1),c.length===0&&(s.delete(n),u.unobserve(n)),s.size===0&&(u.disconnect(),P.delete(d))}}function ce({threshold:n,delay:e,trackVisibility:l,rootMargin:o,root:d,triggerOnce:u,skip:s,initialInView:c,fallbackInView:p,onChange:b}={}){var g;const[E,I]=S.useState(null),v=S.useRef(),[M,R]=S.useState({inView:!!c,entry:void 0});v.current=b,S.useEffect(()=>{if(s||!E)return;let h;return h=le(E,(L,y)=>{R({inView:L,entry:y}),v.current&&v.current(L,y),y.isIntersecting&&u&&h&&(h(),h=void 0)},{root:d,rootMargin:o,threshold:n,trackVisibility:l,delay:e},p),()=>{h&&h()}},[Array.isArray(n)?n.toString():n,E,d,o,u,s,l,p,e]);const x=(g=M.entry)==null?void 0:g.target,A=S.useRef();!E&&x&&!u&&!s&&A.current!==x&&(A.current=x,R({inView:!!c,entry:void 0}));const f=[I,M.inView,M.entry];return f.ref=f[0],f.inView=f[1],f.entry=f[2],f}const de=()=>{const n=K();return r.jsxs(r.Fragment,{children:[r.jsx("span",{onClick:()=>n.slideNext(),role:"button",className:"swiper-button-next custom-next-icon","aria-label":"Botón para pasar a la siguiente diapositiva"}),r.jsx("span",{onClick:()=>n.slidePrev(),className:"swiper-button-prev custom-prev-icon","aria-label":"Botón para pasar a la diapositiva anterior"})]})},ue={hidden:{opacity:0,y:50},show:{opacity:1,y:0,transition:{duration:1}},exit:{opacity:0,y:50}},pe=S.memo(()=>{const{services:n}=te();if(!n)return null;const e=n==null?void 0:n.map(()=>ce({triggerOnce:!1,threshold:.5}));return r.jsx(W,{spaceBetween:0,slidesPerView:1,autoplay:{delay:5e3,disableOnInteraction:!1,pauseOnMouseEnter:!0},modules:[J,Q,X,ne],className:"mySwiper",children:n==null?void 0:n.map((l,o)=>r.jsx(Y,{children:r.jsx("div",{className:"container-fluid sliders",style:{backgroundImage:`linear-gradient(to bottom left,rgba(0, 0, 0, 0.8) 0%,rgba(0, 0, 0, 0.7) 35%,rgba(0, 0, 0, 0.8) 100%), url( ${l.imagen})`},children:r.jsx(ie.div,{ref:e[o].ref,variants:ue,initial:"hidden",animate:e[o].inView?"show":"hidden",exit:"exit",children:r.jsx("div",{className:"container",children:r.jsx("div",{className:"row",children:r.jsxs("div",{className:"col-12 col-lg-8  description",children:[r.jsx("h1",{className:"title text-capitalize",children:l.nombre}),r.jsx("br",{}),r.jsx("p",{className:"text-white col-12 col-lg-10 ",children:l.descripcion}),r.jsxs("div",{className:"col-12 ",children:[r.jsx("br",{}),r.jsx(Z,{to:"/contact",children:r.jsx("button",{className:"llamado",children:"Contactar"})})]}),r.jsx(de,{})]})})})})})},o))})});function xe(){const{isVisible:n,ref:e}=ee("100px");return r.jsx("div",{id:"LazySlider ",ref:e,children:n?r.jsx(pe,{}):null})}export{xe as L};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
