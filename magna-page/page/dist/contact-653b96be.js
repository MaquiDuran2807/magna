import{a8 as sr,r as p,a4 as Tn,j as _,q as it,R as k,e as Oi}from"./index.js";import{A as Ai}from"./index-8079b195.js";import{u as ji}from"./ScreenSize-d22b7a5d.js";var Ci=function(t){return Ii(t)&&!Ni(t)};function Ii(e){return!!e&&typeof e=="object"}function Ni(e){var t=Object.prototype.toString.call(e);return t==="[object RegExp]"||t==="[object Date]"||Mi(e)}var Pi=typeof Symbol=="function"&&Symbol.for,Di=Pi?Symbol.for("react.element"):60103;function Mi(e){return e.$$typeof===Di}function ki(e){return Array.isArray(e)?[]:{}}function pt(e,t){return t.clone!==!1&&t.isMergeableObject(e)?Ye(ki(e),e,t):e}function Ri(e,t,r){return e.concat(t).map(function(n){return pt(n,r)})}function Li(e,t,r){var n={};return r.isMergeableObject(e)&&Object.keys(e).forEach(function(i){n[i]=pt(e[i],r)}),Object.keys(t).forEach(function(i){!r.isMergeableObject(t[i])||!e[i]?n[i]=pt(t[i],r):n[i]=Ye(e[i],t[i],r)}),n}function Ye(e,t,r){r=r||{},r.arrayMerge=r.arrayMerge||Ri,r.isMergeableObject=r.isMergeableObject||Ci;var n=Array.isArray(t),i=Array.isArray(e),a=n===i;return a?n?r.arrayMerge(e,t,r):Li(e,t,r):pt(t,r)}Ye.all=function(t,r){if(!Array.isArray(t))throw new Error("first argument should be an array");return t.reduce(function(n,i){return Ye(n,i,r)},{})};var Kt=Ye,Vi=typeof global=="object"&&global&&global.Object===Object&&global;const En=Vi;var Ui=typeof self=="object"&&self&&self.Object===Object&&self,zi=En||Ui||Function("return this")();const pe=zi;var Bi=pe.Symbol;const Se=Bi;var xn=Object.prototype,Hi=xn.hasOwnProperty,qi=xn.toString,He=Se?Se.toStringTag:void 0;function Gi(e){var t=Hi.call(e,He),r=e[He];try{e[He]=void 0;var n=!0}catch{}var i=qi.call(e);return n&&(t?e[He]=r:delete e[He]),i}var Zi=Object.prototype,Ki=Zi.toString;function Yi(e){return Ki.call(e)}var Wi="[object Null]",Xi="[object Undefined]",Cr=Se?Se.toStringTag:void 0;function Ne(e){return e==null?e===void 0?Xi:Wi:Cr&&Cr in Object(e)?Gi(e):Yi(e)}function _n(e,t){return function(r){return e(t(r))}}var Qi=_n(Object.getPrototypeOf,Object);const or=Qi;function Pe(e){return e!=null&&typeof e=="object"}var Ji="[object Object]",ea=Function.prototype,ta=Object.prototype,Sn=ea.toString,ra=ta.hasOwnProperty,na=Sn.call(Object);function Ir(e){if(!Pe(e)||Ne(e)!=Ji)return!1;var t=or(e);if(t===null)return!0;var r=ra.call(t,"constructor")&&t.constructor;return typeof r=="function"&&r instanceof r&&Sn.call(r)==na}var Nr=Array.isArray,Pr=Object.keys,ia=Object.prototype.hasOwnProperty,aa=typeof Element<"u";function Yt(e,t){if(e===t)return!0;if(e&&t&&typeof e=="object"&&typeof t=="object"){var r=Nr(e),n=Nr(t),i,a,s;if(r&&n){if(a=e.length,a!=t.length)return!1;for(i=a;i--!==0;)if(!Yt(e[i],t[i]))return!1;return!0}if(r!=n)return!1;var o=e instanceof Date,u=t instanceof Date;if(o!=u)return!1;if(o&&u)return e.getTime()==t.getTime();var c=e instanceof RegExp,d=t instanceof RegExp;if(c!=d)return!1;if(c&&d)return e.toString()==t.toString();var h=Pr(e);if(a=h.length,a!==Pr(t).length)return!1;for(i=a;i--!==0;)if(!ia.call(t,h[i]))return!1;if(aa&&e instanceof Element&&t instanceof Element)return e===t;for(i=a;i--!==0;)if(s=h[i],!(s==="_owner"&&e.$$typeof)&&!Yt(e[s],t[s]))return!1;return!0}return e!==e&&t!==t}var sa=function(t,r){try{return Yt(t,r)}catch(n){if(n.message&&n.message.match(/stack|recursion/i)||n.number===-2146828260)return console.warn("Warning: react-fast-compare does not handle circular references.",n.name,n.message),!1;throw n}};const Te=sr(sa);var oa=!0;function $n(e,t){if(!oa){if(e)return;var r="Warning: "+t;typeof console<"u"&&console.warn(r);try{throw Error(r)}catch{}}}function ua(){this.__data__=[],this.size=0}function wn(e,t){return e===t||e!==e&&t!==t}function gt(e,t){for(var r=e.length;r--;)if(wn(e[r][0],t))return r;return-1}var la=Array.prototype,ca=la.splice;function fa(e){var t=this.__data__,r=gt(t,e);if(r<0)return!1;var n=t.length-1;return r==n?t.pop():ca.call(t,r,1),--this.size,!0}function da(e){var t=this.__data__,r=gt(t,e);return r<0?void 0:t[r][1]}function pa(e){return gt(this.__data__,e)>-1}function ha(e,t){var r=this.__data__,n=gt(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}function be(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}be.prototype.clear=ua;be.prototype.delete=fa;be.prototype.get=da;be.prototype.has=pa;be.prototype.set=ha;function ma(){this.__data__=new be,this.size=0}function ya(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}function ga(e){return this.__data__.get(e)}function va(e){return this.__data__.has(e)}function et(e){var t=typeof e;return e!=null&&(t=="object"||t=="function")}var ba="[object AsyncFunction]",Ta="[object Function]",Ea="[object GeneratorFunction]",xa="[object Proxy]";function Fn(e){if(!et(e))return!1;var t=Ne(e);return t==Ta||t==Ea||t==ba||t==xa}var _a=pe["__core-js_shared__"];const Vt=_a;var Dr=function(){var e=/[^.]+$/.exec(Vt&&Vt.keys&&Vt.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function Sa(e){return!!Dr&&Dr in e}var $a=Function.prototype,wa=$a.toString;function De(e){if(e!=null){try{return wa.call(e)}catch{}try{return e+""}catch{}}return""}var Fa=/[\\^$.*+?()[\]{}|]/g,Oa=/^\[object .+?Constructor\]$/,Aa=Function.prototype,ja=Object.prototype,Ca=Aa.toString,Ia=ja.hasOwnProperty,Na=RegExp("^"+Ca.call(Ia).replace(Fa,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function Pa(e){if(!et(e)||Sa(e))return!1;var t=Fn(e)?Na:Oa;return t.test(De(e))}function Da(e,t){return e==null?void 0:e[t]}function Me(e,t){var r=Da(e,t);return Pa(r)?r:void 0}var Ma=Me(pe,"Map");const We=Ma;var ka=Me(Object,"create");const Xe=ka;function Ra(){this.__data__=Xe?Xe(null):{},this.size=0}function La(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var Va="__lodash_hash_undefined__",Ua=Object.prototype,za=Ua.hasOwnProperty;function Ba(e){var t=this.__data__;if(Xe){var r=t[e];return r===Va?void 0:r}return za.call(t,e)?t[e]:void 0}var Ha=Object.prototype,qa=Ha.hasOwnProperty;function Ga(e){var t=this.__data__;return Xe?t[e]!==void 0:qa.call(t,e)}var Za="__lodash_hash_undefined__";function Ka(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=Xe&&t===void 0?Za:t,this}function Ce(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Ce.prototype.clear=Ra;Ce.prototype.delete=La;Ce.prototype.get=Ba;Ce.prototype.has=Ga;Ce.prototype.set=Ka;function Ya(){this.size=0,this.__data__={hash:new Ce,map:new(We||be),string:new Ce}}function Wa(e){var t=typeof e;return t=="string"||t=="number"||t=="symbol"||t=="boolean"?e!=="__proto__":e===null}function vt(e,t){var r=e.__data__;return Wa(t)?r[typeof t=="string"?"string":"hash"]:r.map}function Xa(e){var t=vt(this,e).delete(e);return this.size-=t?1:0,t}function Qa(e){return vt(this,e).get(e)}function Ja(e){return vt(this,e).has(e)}function es(e,t){var r=vt(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}function $e(e){var t=-1,r=e==null?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}$e.prototype.clear=Ya;$e.prototype.delete=Xa;$e.prototype.get=Qa;$e.prototype.has=Ja;$e.prototype.set=es;var ts=200;function rs(e,t){var r=this.__data__;if(r instanceof be){var n=r.__data__;if(!We||n.length<ts-1)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new $e(n)}return r.set(e,t),this.size=r.size,this}function Be(e){var t=this.__data__=new be(e);this.size=t.size}Be.prototype.clear=ma;Be.prototype.delete=ya;Be.prototype.get=ga;Be.prototype.has=va;Be.prototype.set=rs;function ns(e,t){for(var r=-1,n=e==null?0:e.length;++r<n&&t(e[r],r,e)!==!1;);return e}var is=function(){try{var e=Me(Object,"defineProperty");return e({},"",{}),e}catch{}}();const Mr=is;function On(e,t,r){t=="__proto__"&&Mr?Mr(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}var as=Object.prototype,ss=as.hasOwnProperty;function An(e,t,r){var n=e[t];(!(ss.call(e,t)&&wn(n,r))||r===void 0&&!(t in e))&&On(e,t,r)}function bt(e,t,r,n){var i=!r;r||(r={});for(var a=-1,s=t.length;++a<s;){var o=t[a],u=n?n(r[o],e[o],o,r,e):void 0;u===void 0&&(u=e[o]),i?On(r,o,u):An(r,o,u)}return r}function os(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}var us="[object Arguments]";function kr(e){return Pe(e)&&Ne(e)==us}var jn=Object.prototype,ls=jn.hasOwnProperty,cs=jn.propertyIsEnumerable,fs=kr(function(){return arguments}())?kr:function(e){return Pe(e)&&ls.call(e,"callee")&&!cs.call(e,"callee")};const ds=fs;var ps=Array.isArray;const tt=ps;function hs(){return!1}var Cn=typeof exports=="object"&&exports&&!exports.nodeType&&exports,Rr=Cn&&typeof module=="object"&&module&&!module.nodeType&&module,ms=Rr&&Rr.exports===Cn,Lr=ms?pe.Buffer:void 0,ys=Lr?Lr.isBuffer:void 0,gs=ys||hs;const In=gs;var vs=9007199254740991,bs=/^(?:0|[1-9]\d*)$/;function Ts(e,t){var r=typeof e;return t=t??vs,!!t&&(r=="number"||r!="symbol"&&bs.test(e))&&e>-1&&e%1==0&&e<t}var Es=9007199254740991;function Nn(e){return typeof e=="number"&&e>-1&&e%1==0&&e<=Es}var xs="[object Arguments]",_s="[object Array]",Ss="[object Boolean]",$s="[object Date]",ws="[object Error]",Fs="[object Function]",Os="[object Map]",As="[object Number]",js="[object Object]",Cs="[object RegExp]",Is="[object Set]",Ns="[object String]",Ps="[object WeakMap]",Ds="[object ArrayBuffer]",Ms="[object DataView]",ks="[object Float32Array]",Rs="[object Float64Array]",Ls="[object Int8Array]",Vs="[object Int16Array]",Us="[object Int32Array]",zs="[object Uint8Array]",Bs="[object Uint8ClampedArray]",Hs="[object Uint16Array]",qs="[object Uint32Array]",V={};V[ks]=V[Rs]=V[Ls]=V[Vs]=V[Us]=V[zs]=V[Bs]=V[Hs]=V[qs]=!0;V[xs]=V[_s]=V[Ds]=V[Ss]=V[Ms]=V[$s]=V[ws]=V[Fs]=V[Os]=V[As]=V[js]=V[Cs]=V[Is]=V[Ns]=V[Ps]=!1;function Gs(e){return Pe(e)&&Nn(e.length)&&!!V[Ne(e)]}function ur(e){return function(t){return e(t)}}var Pn=typeof exports=="object"&&exports&&!exports.nodeType&&exports,Ge=Pn&&typeof module=="object"&&module&&!module.nodeType&&module,Zs=Ge&&Ge.exports===Pn,Ut=Zs&&En.process,Ks=function(){try{var e=Ge&&Ge.require&&Ge.require("util").types;return e||Ut&&Ut.binding&&Ut.binding("util")}catch{}}();const ze=Ks;var Vr=ze&&ze.isTypedArray,Ys=Vr?ur(Vr):Gs;const Ws=Ys;var Xs=Object.prototype,Qs=Xs.hasOwnProperty;function Dn(e,t){var r=tt(e),n=!r&&ds(e),i=!r&&!n&&In(e),a=!r&&!n&&!i&&Ws(e),s=r||n||i||a,o=s?os(e.length,String):[],u=o.length;for(var c in e)(t||Qs.call(e,c))&&!(s&&(c=="length"||i&&(c=="offset"||c=="parent")||a&&(c=="buffer"||c=="byteLength"||c=="byteOffset")||Ts(c,u)))&&o.push(c);return o}var Js=Object.prototype;function lr(e){var t=e&&e.constructor,r=typeof t=="function"&&t.prototype||Js;return e===r}var eo=_n(Object.keys,Object);const to=eo;var ro=Object.prototype,no=ro.hasOwnProperty;function io(e){if(!lr(e))return to(e);var t=[];for(var r in Object(e))no.call(e,r)&&r!="constructor"&&t.push(r);return t}function Mn(e){return e!=null&&Nn(e.length)&&!Fn(e)}function cr(e){return Mn(e)?Dn(e):io(e)}function ao(e,t){return e&&bt(t,cr(t),e)}function so(e){var t=[];if(e!=null)for(var r in Object(e))t.push(r);return t}var oo=Object.prototype,uo=oo.hasOwnProperty;function lo(e){if(!et(e))return so(e);var t=lr(e),r=[];for(var n in e)n=="constructor"&&(t||!uo.call(e,n))||r.push(n);return r}function fr(e){return Mn(e)?Dn(e,!0):lo(e)}function co(e,t){return e&&bt(t,fr(t),e)}var kn=typeof exports=="object"&&exports&&!exports.nodeType&&exports,Ur=kn&&typeof module=="object"&&module&&!module.nodeType&&module,fo=Ur&&Ur.exports===kn,zr=fo?pe.Buffer:void 0,Br=zr?zr.allocUnsafe:void 0;function po(e,t){if(t)return e.slice();var r=e.length,n=Br?Br(r):new e.constructor(r);return e.copy(n),n}function Rn(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}function ho(e,t){for(var r=-1,n=e==null?0:e.length,i=0,a=[];++r<n;){var s=e[r];t(s,r,e)&&(a[i++]=s)}return a}function Ln(){return[]}var mo=Object.prototype,yo=mo.propertyIsEnumerable,Hr=Object.getOwnPropertySymbols,go=Hr?function(e){return e==null?[]:(e=Object(e),ho(Hr(e),function(t){return yo.call(e,t)}))}:Ln;const dr=go;function vo(e,t){return bt(e,dr(e),t)}function Vn(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e}var bo=Object.getOwnPropertySymbols,To=bo?function(e){for(var t=[];e;)Vn(t,dr(e)),e=or(e);return t}:Ln;const Un=To;function Eo(e,t){return bt(e,Un(e),t)}function zn(e,t,r){var n=t(e);return tt(e)?n:Vn(n,r(e))}function xo(e){return zn(e,cr,dr)}function _o(e){return zn(e,fr,Un)}var So=Me(pe,"DataView");const Wt=So;var $o=Me(pe,"Promise");const Xt=$o;var wo=Me(pe,"Set");const Qt=wo;var Fo=Me(pe,"WeakMap");const Jt=Fo;var qr="[object Map]",Oo="[object Object]",Gr="[object Promise]",Zr="[object Set]",Kr="[object WeakMap]",Yr="[object DataView]",Ao=De(Wt),jo=De(We),Co=De(Xt),Io=De(Qt),No=De(Jt),Fe=Ne;(Wt&&Fe(new Wt(new ArrayBuffer(1)))!=Yr||We&&Fe(new We)!=qr||Xt&&Fe(Xt.resolve())!=Gr||Qt&&Fe(new Qt)!=Zr||Jt&&Fe(new Jt)!=Kr)&&(Fe=function(e){var t=Ne(e),r=t==Oo?e.constructor:void 0,n=r?De(r):"";if(n)switch(n){case Ao:return Yr;case jo:return qr;case Co:return Gr;case Io:return Zr;case No:return Kr}return t});const pr=Fe;var Po=Object.prototype,Do=Po.hasOwnProperty;function Mo(e){var t=e.length,r=new e.constructor(t);return t&&typeof e[0]=="string"&&Do.call(e,"index")&&(r.index=e.index,r.input=e.input),r}var ko=pe.Uint8Array;const Wr=ko;function hr(e){var t=new e.constructor(e.byteLength);return new Wr(t).set(new Wr(e)),t}function Ro(e,t){var r=t?hr(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.byteLength)}var Lo=/\w*$/;function Vo(e){var t=new e.constructor(e.source,Lo.exec(e));return t.lastIndex=e.lastIndex,t}var Xr=Se?Se.prototype:void 0,Qr=Xr?Xr.valueOf:void 0;function Uo(e){return Qr?Object(Qr.call(e)):{}}function zo(e,t){var r=t?hr(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}var Bo="[object Boolean]",Ho="[object Date]",qo="[object Map]",Go="[object Number]",Zo="[object RegExp]",Ko="[object Set]",Yo="[object String]",Wo="[object Symbol]",Xo="[object ArrayBuffer]",Qo="[object DataView]",Jo="[object Float32Array]",eu="[object Float64Array]",tu="[object Int8Array]",ru="[object Int16Array]",nu="[object Int32Array]",iu="[object Uint8Array]",au="[object Uint8ClampedArray]",su="[object Uint16Array]",ou="[object Uint32Array]";function uu(e,t,r){var n=e.constructor;switch(t){case Xo:return hr(e);case Bo:case Ho:return new n(+e);case Qo:return Ro(e,r);case Jo:case eu:case tu:case ru:case nu:case iu:case au:case su:case ou:return zo(e,r);case qo:return new n;case Go:case Yo:return new n(e);case Zo:return Vo(e);case Ko:return new n;case Wo:return Uo(e)}}var Jr=Object.create,lu=function(){function e(){}return function(t){if(!et(t))return{};if(Jr)return Jr(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();const cu=lu;function fu(e){return typeof e.constructor=="function"&&!lr(e)?cu(or(e)):{}}var du="[object Map]";function pu(e){return Pe(e)&&pr(e)==du}var en=ze&&ze.isMap,hu=en?ur(en):pu;const mu=hu;var yu="[object Set]";function gu(e){return Pe(e)&&pr(e)==yu}var tn=ze&&ze.isSet,vu=tn?ur(tn):gu;const bu=vu;var Tu=1,Eu=2,xu=4,Bn="[object Arguments]",_u="[object Array]",Su="[object Boolean]",$u="[object Date]",wu="[object Error]",Hn="[object Function]",Fu="[object GeneratorFunction]",Ou="[object Map]",Au="[object Number]",qn="[object Object]",ju="[object RegExp]",Cu="[object Set]",Iu="[object String]",Nu="[object Symbol]",Pu="[object WeakMap]",Du="[object ArrayBuffer]",Mu="[object DataView]",ku="[object Float32Array]",Ru="[object Float64Array]",Lu="[object Int8Array]",Vu="[object Int16Array]",Uu="[object Int32Array]",zu="[object Uint8Array]",Bu="[object Uint8ClampedArray]",Hu="[object Uint16Array]",qu="[object Uint32Array]",R={};R[Bn]=R[_u]=R[Du]=R[Mu]=R[Su]=R[$u]=R[ku]=R[Ru]=R[Lu]=R[Vu]=R[Uu]=R[Ou]=R[Au]=R[qn]=R[ju]=R[Cu]=R[Iu]=R[Nu]=R[zu]=R[Bu]=R[Hu]=R[qu]=!0;R[wu]=R[Hn]=R[Pu]=!1;function Ze(e,t,r,n,i,a){var s,o=t&Tu,u=t&Eu,c=t&xu;if(r&&(s=i?r(e,n,i,a):r(e)),s!==void 0)return s;if(!et(e))return e;var d=tt(e);if(d){if(s=Mo(e),!o)return Rn(e,s)}else{var h=pr(e),f=h==Hn||h==Fu;if(In(e))return po(e,o);if(h==qn||h==Bn||f&&!i){if(s=u||f?{}:fu(e),!o)return u?Eo(e,co(s,e)):vo(e,ao(s,e))}else{if(!R[h])return i?e:{};s=uu(e,h,o)}}a||(a=new Be);var b=a.get(e);if(b)return b;a.set(e,s),bu(e)?e.forEach(function(x){s.add(Ze(x,t,r,x,e,a))}):mu(e)&&e.forEach(function(x,v){s.set(v,Ze(x,t,r,v,e,a))});var E=c?u?_o:xo:u?fr:cr,y=d?void 0:E(e);return ns(y||e,function(x,v){y&&(v=x,x=e[v]),An(s,v,Ze(x,t,r,v,e,a))}),s}var Gu=4;function rn(e){return Ze(e,Gu)}function Gn(e,t){for(var r=-1,n=e==null?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}var Zu="[object Symbol]";function mr(e){return typeof e=="symbol"||Pe(e)&&Ne(e)==Zu}var Ku="Expected a function";function yr(e,t){if(typeof e!="function"||t!=null&&typeof t!="function")throw new TypeError(Ku);var r=function(){var n=arguments,i=t?t.apply(this,n):n[0],a=r.cache;if(a.has(i))return a.get(i);var s=e.apply(this,n);return r.cache=a.set(i,s)||a,s};return r.cache=new(yr.Cache||$e),r}yr.Cache=$e;var Yu=500;function Wu(e){var t=yr(e,function(n){return r.size===Yu&&r.clear(),n}),r=t.cache;return t}var Xu=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Qu=/\\(\\)?/g,Ju=Wu(function(e){var t=[];return e.charCodeAt(0)===46&&t.push(""),e.replace(Xu,function(r,n,i,a){t.push(i?a.replace(Qu,"$1"):n||r)}),t});const el=Ju;var tl=1/0;function rl(e){if(typeof e=="string"||mr(e))return e;var t=e+"";return t=="0"&&1/e==-tl?"-0":t}var nl=1/0,nn=Se?Se.prototype:void 0,an=nn?nn.toString:void 0;function Zn(e){if(typeof e=="string")return e;if(tt(e))return Gn(e,Zn)+"";if(mr(e))return an?an.call(e):"";var t=e+"";return t=="0"&&1/e==-nl?"-0":t}function il(e){return e==null?"":Zn(e)}function Kn(e){return tt(e)?Gn(e,rl):mr(e)?[e]:Rn(el(il(e)))}var Yn={exports:{}},D={};/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var q=typeof Symbol=="function"&&Symbol.for,gr=q?Symbol.for("react.element"):60103,vr=q?Symbol.for("react.portal"):60106,Tt=q?Symbol.for("react.fragment"):60107,Et=q?Symbol.for("react.strict_mode"):60108,xt=q?Symbol.for("react.profiler"):60114,_t=q?Symbol.for("react.provider"):60109,St=q?Symbol.for("react.context"):60110,br=q?Symbol.for("react.async_mode"):60111,$t=q?Symbol.for("react.concurrent_mode"):60111,wt=q?Symbol.for("react.forward_ref"):60112,Ft=q?Symbol.for("react.suspense"):60113,al=q?Symbol.for("react.suspense_list"):60120,Ot=q?Symbol.for("react.memo"):60115,At=q?Symbol.for("react.lazy"):60116,sl=q?Symbol.for("react.block"):60121,ol=q?Symbol.for("react.fundamental"):60117,ul=q?Symbol.for("react.responder"):60118,ll=q?Symbol.for("react.scope"):60119;function re(e){if(typeof e=="object"&&e!==null){var t=e.$$typeof;switch(t){case gr:switch(e=e.type,e){case br:case $t:case Tt:case xt:case Et:case Ft:return e;default:switch(e=e&&e.$$typeof,e){case St:case wt:case At:case Ot:case _t:return e;default:return t}}case vr:return t}}}function Wn(e){return re(e)===$t}D.AsyncMode=br;D.ConcurrentMode=$t;D.ContextConsumer=St;D.ContextProvider=_t;D.Element=gr;D.ForwardRef=wt;D.Fragment=Tt;D.Lazy=At;D.Memo=Ot;D.Portal=vr;D.Profiler=xt;D.StrictMode=Et;D.Suspense=Ft;D.isAsyncMode=function(e){return Wn(e)||re(e)===br};D.isConcurrentMode=Wn;D.isContextConsumer=function(e){return re(e)===St};D.isContextProvider=function(e){return re(e)===_t};D.isElement=function(e){return typeof e=="object"&&e!==null&&e.$$typeof===gr};D.isForwardRef=function(e){return re(e)===wt};D.isFragment=function(e){return re(e)===Tt};D.isLazy=function(e){return re(e)===At};D.isMemo=function(e){return re(e)===Ot};D.isPortal=function(e){return re(e)===vr};D.isProfiler=function(e){return re(e)===xt};D.isStrictMode=function(e){return re(e)===Et};D.isSuspense=function(e){return re(e)===Ft};D.isValidElementType=function(e){return typeof e=="string"||typeof e=="function"||e===Tt||e===$t||e===xt||e===Et||e===Ft||e===al||typeof e=="object"&&e!==null&&(e.$$typeof===At||e.$$typeof===Ot||e.$$typeof===_t||e.$$typeof===St||e.$$typeof===wt||e.$$typeof===ol||e.$$typeof===ul||e.$$typeof===ll||e.$$typeof===sl)};D.typeOf=re;Yn.exports=D;var cl=Yn.exports,Tr=cl,fl={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},dl={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},pl={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},Xn={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},Er={};Er[Tr.ForwardRef]=pl;Er[Tr.Memo]=Xn;function sn(e){return Tr.isMemo(e)?Xn:Er[e.$$typeof]||fl}var hl=Object.defineProperty,ml=Object.getOwnPropertyNames,on=Object.getOwnPropertySymbols,yl=Object.getOwnPropertyDescriptor,gl=Object.getPrototypeOf,un=Object.prototype;function Qn(e,t,r){if(typeof t!="string"){if(un){var n=gl(t);n&&n!==un&&Qn(e,n,r)}var i=ml(t);on&&(i=i.concat(on(t)));for(var a=sn(e),s=sn(t),o=0;o<i.length;++o){var u=i[o];if(!dl[u]&&!(r&&r[u])&&!(s&&s[u])&&!(a&&a[u])){var c=yl(t,u);try{hl(e,u,c)}catch{}}}}return e}var vl=Qn;const bl=sr(vl);var Tl=1,El=4;function xl(e){return Ze(e,Tl|El)}function P(){return P=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},P.apply(this,arguments)}function Jn(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Ee(e,t){if(e==null)return{};var r={},n=Object.keys(e),i,a;for(a=0;a<n.length;a++)i=n[a],!(t.indexOf(i)>=0)&&(r[i]=e[i]);return r}function ln(e){if(e===void 0)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var jt=p.createContext(void 0);jt.displayName="FormikContext";var _l=jt.Provider,Sl=jt.Consumer;function ei(){var e=p.useContext(jt);return e||$n(!1),e}var cn=function(t){return Array.isArray(t)&&t.length===0},Y=function(t){return typeof t=="function"},rt=function(t){return t!==null&&typeof t=="object"},$l=function(t){return String(Math.floor(Number(t)))===t},zt=function(t){return Object.prototype.toString.call(t)==="[object String]"},ti=function(t){return p.Children.count(t)===0},Bt=function(t){return rt(t)&&Y(t.then)};function U(e,t,r,n){n===void 0&&(n=0);for(var i=Kn(t);e&&n<i.length;)e=e[i[n++]];return n!==i.length&&!e||e===void 0?r:e}function fe(e,t,r){for(var n=rn(e),i=n,a=0,s=Kn(t);a<s.length-1;a++){var o=s[a],u=U(e,s.slice(0,a+1));if(u&&(rt(u)||Array.isArray(u)))i=i[o]=rn(u);else{var c=s[a+1];i=i[o]=$l(c)&&Number(c)>=0?[]:{}}}return(a===0?e:i)[s[a]]===r?e:(r===void 0?delete i[s[a]]:i[s[a]]=r,a===0&&r===void 0&&delete n[s[a]],n)}function ri(e,t,r,n){r===void 0&&(r=new WeakMap),n===void 0&&(n={});for(var i=0,a=Object.keys(e);i<a.length;i++){var s=a[i],o=e[s];rt(o)?r.get(o)||(r.set(o,!0),n[s]=Array.isArray(o)?[]:{},ri(o,t,r,n[s])):n[s]=t}return n}function wl(e,t){switch(t.type){case"SET_VALUES":return P({},e,{values:t.payload});case"SET_TOUCHED":return P({},e,{touched:t.payload});case"SET_ERRORS":return Te(e.errors,t.payload)?e:P({},e,{errors:t.payload});case"SET_STATUS":return P({},e,{status:t.payload});case"SET_ISSUBMITTING":return P({},e,{isSubmitting:t.payload});case"SET_ISVALIDATING":return P({},e,{isValidating:t.payload});case"SET_FIELD_VALUE":return P({},e,{values:fe(e.values,t.payload.field,t.payload.value)});case"SET_FIELD_TOUCHED":return P({},e,{touched:fe(e.touched,t.payload.field,t.payload.value)});case"SET_FIELD_ERROR":return P({},e,{errors:fe(e.errors,t.payload.field,t.payload.value)});case"RESET_FORM":return P({},e,t.payload);case"SET_FORMIK_STATE":return t.payload(e);case"SUBMIT_ATTEMPT":return P({},e,{touched:ri(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1});case"SUBMIT_FAILURE":return P({},e,{isSubmitting:!1});case"SUBMIT_SUCCESS":return P({},e,{isSubmitting:!1});default:return e}}var we={},at={};function Fl(e){var t=e.validateOnChange,r=t===void 0?!0:t,n=e.validateOnBlur,i=n===void 0?!0:n,a=e.validateOnMount,s=a===void 0?!1:a,o=e.isInitialValid,u=e.enableReinitialize,c=u===void 0?!1:u,d=e.onSubmit,h=Ee(e,["validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit"]),f=P({validateOnChange:r,validateOnBlur:i,validateOnMount:s,onSubmit:d},h),b=p.useRef(f.initialValues),E=p.useRef(f.initialErrors||we),y=p.useRef(f.initialTouched||at),x=p.useRef(f.initialStatus),v=p.useRef(!1),T=p.useRef({});p.useEffect(function(){return v.current=!0,function(){v.current=!1}},[]);var $=p.useState(0),j=$[1],z=p.useRef({values:f.initialValues,errors:f.initialErrors||we,touched:f.initialTouched||at,status:f.initialStatus,isSubmitting:!1,isValidating:!1,submitCount:0}),F=z.current,w=p.useCallback(function(l){var m=z.current;z.current=wl(m,l),m!==z.current&&j(function(g){return g+1})},[]),O=p.useCallback(function(l,m){return new Promise(function(g,S){var A=f.validate(l,m);A==null?g(we):Bt(A)?A.then(function(N){g(N||we)},function(N){S(N)}):g(A)})},[f.validate]),C=p.useCallback(function(l,m){var g=f.validationSchema,S=Y(g)?g(m):g,A=m&&S.validateAt?S.validateAt(m,l):jl(l,S);return new Promise(function(N,H){A.then(function(){N(we)},function(ge){ge.name==="ValidationError"?N(Al(ge)):H(ge)})})},[f.validationSchema]),B=p.useCallback(function(l,m){return new Promise(function(g){return g(T.current[l].validate(m))})},[]),I=p.useCallback(function(l){var m=Object.keys(T.current).filter(function(S){return Y(T.current[S].validate)}),g=m.length>0?m.map(function(S){return B(S,U(l,S))}):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(g).then(function(S){return S.reduce(function(A,N,H){return N==="DO_NOT_DELETE_YOU_WILL_BE_FIRED"||N&&(A=fe(A,m[H],N)),A},{})})},[B]),ee=p.useCallback(function(l){return Promise.all([I(l),f.validationSchema?C(l):{},f.validate?O(l):{}]).then(function(m){var g=m[0],S=m[1],A=m[2],N=Kt.all([g,S,A],{arrayMerge:Cl});return N})},[f.validate,f.validationSchema,I,O,C]),L=ae(function(l){return l===void 0&&(l=F.values),w({type:"SET_ISVALIDATING",payload:!0}),ee(l).then(function(m){return v.current&&(w({type:"SET_ISVALIDATING",payload:!1}),w({type:"SET_ERRORS",payload:m})),m})});p.useEffect(function(){s&&v.current===!0&&Te(b.current,f.initialValues)&&L(b.current)},[s,L]);var G=p.useCallback(function(l){var m=l&&l.values?l.values:b.current,g=l&&l.errors?l.errors:E.current?E.current:f.initialErrors||{},S=l&&l.touched?l.touched:y.current?y.current:f.initialTouched||{},A=l&&l.status?l.status:x.current?x.current:f.initialStatus;b.current=m,E.current=g,y.current=S,x.current=A;var N=function(){w({type:"RESET_FORM",payload:{isSubmitting:!!l&&!!l.isSubmitting,errors:g,touched:S,status:A,values:m,isValidating:!!l&&!!l.isValidating,submitCount:l&&l.submitCount&&typeof l.submitCount=="number"?l.submitCount:0}})};if(f.onReset){var H=f.onReset(F.values,Ar);Bt(H)?H.then(N):N()}else N()},[f.initialErrors,f.initialStatus,f.initialTouched,f.onReset]);p.useEffect(function(){v.current===!0&&!Te(b.current,f.initialValues)&&c&&(b.current=f.initialValues,G(),s&&L(b.current))},[c,f.initialValues,G,s,L]),p.useEffect(function(){c&&v.current===!0&&!Te(E.current,f.initialErrors)&&(E.current=f.initialErrors||we,w({type:"SET_ERRORS",payload:f.initialErrors||we}))},[c,f.initialErrors]),p.useEffect(function(){c&&v.current===!0&&!Te(y.current,f.initialTouched)&&(y.current=f.initialTouched||at,w({type:"SET_TOUCHED",payload:f.initialTouched||at}))},[c,f.initialTouched]),p.useEffect(function(){c&&v.current===!0&&!Te(x.current,f.initialStatus)&&(x.current=f.initialStatus,w({type:"SET_STATUS",payload:f.initialStatus}))},[c,f.initialStatus,f.initialTouched]);var ne=ae(function(l){if(T.current[l]&&Y(T.current[l].validate)){var m=U(F.values,l),g=T.current[l].validate(m);return Bt(g)?(w({type:"SET_ISVALIDATING",payload:!0}),g.then(function(S){return S}).then(function(S){w({type:"SET_FIELD_ERROR",payload:{field:l,value:S}}),w({type:"SET_ISVALIDATING",payload:!1})})):(w({type:"SET_FIELD_ERROR",payload:{field:l,value:g}}),Promise.resolve(g))}else if(f.validationSchema)return w({type:"SET_ISVALIDATING",payload:!0}),C(F.values,l).then(function(S){return S}).then(function(S){w({type:"SET_FIELD_ERROR",payload:{field:l,value:U(S,l)}}),w({type:"SET_ISVALIDATING",payload:!1})});return Promise.resolve()}),Le=p.useCallback(function(l,m){var g=m.validate;T.current[l]={validate:g}},[]),se=p.useCallback(function(l){delete T.current[l]},[]),oe=ae(function(l,m){w({type:"SET_TOUCHED",payload:l});var g=m===void 0?i:m;return g?L(F.values):Promise.resolve()}),he=p.useCallback(function(l){w({type:"SET_ERRORS",payload:l})},[]),me=ae(function(l,m){var g=Y(l)?l(F.values):l;w({type:"SET_VALUES",payload:g});var S=m===void 0?r:m;return S?L(g):Promise.resolve()}),ie=p.useCallback(function(l,m){w({type:"SET_FIELD_ERROR",payload:{field:l,value:m}})},[]),Z=ae(function(l,m,g){w({type:"SET_FIELD_VALUE",payload:{field:l,value:m}});var S=g===void 0?r:g;return S?L(fe(F.values,l,m)):Promise.resolve()}),W=p.useCallback(function(l,m){var g=m,S=l,A;if(!zt(l)){l.persist&&l.persist();var N=l.target?l.target:l.currentTarget,H=N.type,ge=N.name,Rt=N.id,Lt=N.value,wi=N.checked,Zc=N.outerHTML,jr=N.options,Fi=N.multiple;g=m||ge||Rt,S=/number|range/.test(H)?(A=parseFloat(Lt),isNaN(A)?"":A):/checkbox/.test(H)?Nl(U(F.values,g),wi,Lt):jr&&Fi?Il(jr):Lt}g&&Z(g,S)},[Z,F.values]),X=ae(function(l){if(zt(l))return function(m){return W(m,l)};W(l)}),K=ae(function(l,m,g){m===void 0&&(m=!0),w({type:"SET_FIELD_TOUCHED",payload:{field:l,value:m}});var S=g===void 0?i:g;return S?L(F.values):Promise.resolve()}),le=p.useCallback(function(l,m){l.persist&&l.persist();var g=l.target,S=g.name,A=g.id,N=g.outerHTML,H=m||S||A;K(H,!0)},[K]),ye=ae(function(l){if(zt(l))return function(m){return le(m,l)};le(l)}),nt=p.useCallback(function(l){Y(l)?w({type:"SET_FORMIK_STATE",payload:l}):w({type:"SET_FORMIK_STATE",payload:function(){return l}})},[]),Fr=p.useCallback(function(l){w({type:"SET_STATUS",payload:l})},[]),Or=p.useCallback(function(l){w({type:"SET_ISSUBMITTING",payload:l})},[]),Mt=ae(function(){return w({type:"SUBMIT_ATTEMPT"}),L().then(function(l){var m=l instanceof Error,g=!m&&Object.keys(l).length===0;if(g){var S;try{if(S=bi(),S===void 0)return}catch(A){throw A}return Promise.resolve(S).then(function(A){return v.current&&w({type:"SUBMIT_SUCCESS"}),A}).catch(function(A){if(v.current)throw w({type:"SUBMIT_FAILURE"}),A})}else if(v.current&&(w({type:"SUBMIT_FAILURE"}),m))throw l})}),vi=ae(function(l){l&&l.preventDefault&&Y(l.preventDefault)&&l.preventDefault(),l&&l.stopPropagation&&Y(l.stopPropagation)&&l.stopPropagation(),Mt().catch(function(m){console.warn("Warning: An unhandled error was caught from submitForm()",m)})}),Ar={resetForm:G,validateForm:L,validateField:ne,setErrors:he,setFieldError:ie,setFieldTouched:K,setFieldValue:Z,setStatus:Fr,setSubmitting:Or,setTouched:oe,setValues:me,setFormikState:nt,submitForm:Mt},bi=ae(function(){return d(F.values,Ar)}),Ti=ae(function(l){l&&l.preventDefault&&Y(l.preventDefault)&&l.preventDefault(),l&&l.stopPropagation&&Y(l.stopPropagation)&&l.stopPropagation(),G()}),Ei=p.useCallback(function(l){return{value:U(F.values,l),error:U(F.errors,l),touched:!!U(F.touched,l),initialValue:U(b.current,l),initialTouched:!!U(y.current,l),initialError:U(E.current,l)}},[F.errors,F.touched,F.values]),xi=p.useCallback(function(l){return{setValue:function(g,S){return Z(l,g,S)},setTouched:function(g,S){return K(l,g,S)},setError:function(g){return ie(l,g)}}},[Z,K,ie]),_i=p.useCallback(function(l){var m=rt(l),g=m?l.name:l,S=U(F.values,g),A={name:g,value:S,onChange:X,onBlur:ye};if(m){var N=l.type,H=l.value,ge=l.as,Rt=l.multiple;N==="checkbox"?H===void 0?A.checked=!!S:(A.checked=!!(Array.isArray(S)&&~S.indexOf(H)),A.value=H):N==="radio"?(A.checked=S===H,A.value=H):ge==="select"&&Rt&&(A.value=A.value||[],A.multiple=!0)}return A},[ye,X,F.values]),kt=p.useMemo(function(){return!Te(b.current,F.values)},[b.current,F.values]),Si=p.useMemo(function(){return typeof o<"u"?kt?F.errors&&Object.keys(F.errors).length===0:o!==!1&&Y(o)?o(f):o:F.errors&&Object.keys(F.errors).length===0},[o,kt,F.errors,f]),$i=P({},F,{initialValues:b.current,initialErrors:E.current,initialTouched:y.current,initialStatus:x.current,handleBlur:ye,handleChange:X,handleReset:Ti,handleSubmit:vi,resetForm:G,setErrors:he,setFormikState:nt,setFieldTouched:K,setFieldValue:Z,setFieldError:ie,setStatus:Fr,setSubmitting:Or,setTouched:oe,setValues:me,submitForm:Mt,validateForm:L,validateField:ne,isValid:Si,dirty:kt,unregisterField:se,registerField:Le,getFieldProps:_i,getFieldMeta:Ei,getFieldHelpers:xi,validateOnBlur:i,validateOnChange:r,validateOnMount:s});return $i}function Ol(e){var t=Fl(e),r=e.component,n=e.children,i=e.render,a=e.innerRef;return p.useImperativeHandle(a,function(){return t}),p.createElement(_l,{value:t},r?p.createElement(r,t):i?i(t):n?Y(n)?n(t):ti(n)?null:p.Children.only(n):null)}function Al(e){var t={};if(e.inner){if(e.inner.length===0)return fe(t,e.path,e.message);for(var i=e.inner,r=Array.isArray(i),n=0,i=r?i:i[Symbol.iterator]();;){var a;if(r){if(n>=i.length)break;a=i[n++]}else{if(n=i.next(),n.done)break;a=n.value}var s=a;U(t,s.path)||(t=fe(t,s.path,s.message))}}return t}function jl(e,t,r,n){r===void 0&&(r=!1);var i=er(e);return t[r?"validateSync":"validate"](i,{abortEarly:!1,context:n||i})}function er(e){var t=Array.isArray(e)?[]:{};for(var r in e)if(Object.prototype.hasOwnProperty.call(e,r)){var n=String(r);Array.isArray(e[n])===!0?t[n]=e[n].map(function(i){return Array.isArray(i)===!0||Ir(i)?er(i):i!==""?i:void 0}):Ir(e[n])?t[n]=er(e[n]):t[n]=e[n]!==""?e[n]:void 0}return t}function Cl(e,t,r){var n=e.slice();return t.forEach(function(a,s){if(typeof n[s]>"u"){var o=r.clone!==!1,u=o&&r.isMergeableObject(a);n[s]=u?Kt(Array.isArray(a)?[]:{},a,r):a}else r.isMergeableObject(a)?n[s]=Kt(e[s],a,r):e.indexOf(a)===-1&&n.push(a)}),n}function Il(e){return Array.from(e).filter(function(t){return t.selected}).map(function(t){return t.value})}function Nl(e,t,r){if(typeof e=="boolean")return!!t;var n=[],i=!1,a=-1;if(Array.isArray(e))n=e,a=e.indexOf(r),i=a>=0;else if(!r||r=="true"||r=="false")return!!t;return t&&r&&!i?n.concat(r):i?n.slice(0,a).concat(n.slice(a+1)):n}var Pl=typeof window<"u"&&typeof window.document<"u"&&typeof window.document.createElement<"u"?p.useLayoutEffect:p.useEffect;function ae(e){var t=p.useRef(e);return Pl(function(){t.current=e}),p.useCallback(function(){for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];return t.current.apply(void 0,n)},[])}function st(e){var t=e.validate,r=e.name,n=e.render,i=e.children,a=e.as,s=e.component,o=e.className,u=Ee(e,["validate","name","render","children","as","component","className"]),c=ei(),d=Ee(c,["validate","validationSchema"]),h=d.registerField,f=d.unregisterField;p.useEffect(function(){return h(r,{validate:t}),function(){f(r)}},[h,f,r,t]);var b=d.getFieldProps(P({name:r},u)),E=d.getFieldMeta(r),y={field:b,form:d};if(n)return n(P({},y,{meta:E}));if(Y(i))return i(P({},y,{meta:E}));if(s){if(typeof s=="string"){var x=u.innerRef,v=Ee(u,["innerRef"]);return p.createElement(s,P({ref:x},b,v,{className:o}),i)}return p.createElement(s,P({field:b,form:d},u,{className:o}),i)}var T=a||"input";if(typeof T=="string"){var $=u.innerRef,j=Ee(u,["innerRef"]);return p.createElement(T,P({ref:$},b,j,{className:o}),i)}return p.createElement(T,P({},b,u,{className:o}),i)}var ni=p.forwardRef(function(e,t){var r=e.action,n=Ee(e,["action"]),i=r??"#",a=ei(),s=a.handleReset,o=a.handleSubmit;return p.createElement("form",P({onSubmit:o,ref:t,onReset:s,action:i},n))});ni.displayName="Form";function Dl(e){var t=function(i){return p.createElement(Sl,null,function(a){return a||$n(!1),p.createElement(e,P({},i,{formik:a}))})},r=e.displayName||e.name||e.constructor&&e.constructor.name||"Component";return t.WrappedComponent=e,t.displayName="FormikConnect("+r+")",bl(t,e)}var Ml=function(t,r,n){var i=Ie(t),a=i[r];return i.splice(r,1),i.splice(n,0,a),i},kl=function(t,r,n){var i=Ie(t),a=i[r];return i[r]=i[n],i[n]=a,i},Ht=function(t,r,n){var i=Ie(t);return i.splice(r,0,n),i},Rl=function(t,r,n){var i=Ie(t);return i[r]=n,i},Ie=function(t){if(t){if(Array.isArray(t))return[].concat(t);var r=Object.keys(t).map(function(n){return parseInt(n)}).reduce(function(n,i){return i>n?i:n},0);return Array.from(P({},t,{length:r+1}))}else return[]},fn=function(t,r){var n=typeof t=="function"?t:r;return function(i){if(Array.isArray(i)||rt(i)){var a=Ie(i);return n(a)}return i}},Ll=function(e){Jn(t,e);function t(n){var i;return i=e.call(this,n)||this,i.updateArrayField=function(a,s,o){var u=i.props,c=u.name,d=u.formik.setFormikState;d(function(h){var f=fn(o,a),b=fn(s,a),E=fe(h.values,c,a(U(h.values,c))),y=o?f(U(h.errors,c)):void 0,x=s?b(U(h.touched,c)):void 0;return cn(y)&&(y=void 0),cn(x)&&(x=void 0),P({},h,{values:E,errors:o?fe(h.errors,c,y):h.errors,touched:s?fe(h.touched,c,x):h.touched})})},i.push=function(a){return i.updateArrayField(function(s){return[].concat(Ie(s),[xl(a)])},!1,!1)},i.handlePush=function(a){return function(){return i.push(a)}},i.swap=function(a,s){return i.updateArrayField(function(o){return kl(o,a,s)},!0,!0)},i.handleSwap=function(a,s){return function(){return i.swap(a,s)}},i.move=function(a,s){return i.updateArrayField(function(o){return Ml(o,a,s)},!0,!0)},i.handleMove=function(a,s){return function(){return i.move(a,s)}},i.insert=function(a,s){return i.updateArrayField(function(o){return Ht(o,a,s)},function(o){return Ht(o,a,null)},function(o){return Ht(o,a,null)})},i.handleInsert=function(a,s){return function(){return i.insert(a,s)}},i.replace=function(a,s){return i.updateArrayField(function(o){return Rl(o,a,s)},!1,!1)},i.handleReplace=function(a,s){return function(){return i.replace(a,s)}},i.unshift=function(a){var s=-1;return i.updateArrayField(function(o){var u=o?[a].concat(o):[a];return s=u.length,u},function(o){return o?[null].concat(o):[null]},function(o){return o?[null].concat(o):[null]}),s},i.handleUnshift=function(a){return function(){return i.unshift(a)}},i.handleRemove=function(a){return function(){return i.remove(a)}},i.handlePop=function(){return function(){return i.pop()}},i.remove=i.remove.bind(ln(i)),i.pop=i.pop.bind(ln(i)),i}var r=t.prototype;return r.componentDidUpdate=function(i){this.props.validateOnChange&&this.props.formik.validateOnChange&&!Te(U(i.formik.values,i.name),U(this.props.formik.values,this.props.name))&&this.props.formik.validateForm(this.props.formik.values)},r.remove=function(i){var a;return this.updateArrayField(function(s){var o=s?Ie(s):[];return a||(a=o[i]),Y(o.splice)&&o.splice(i,1),Y(o.every)&&o.every(function(u){return u===void 0})?[]:o},!0,!0),a},r.pop=function(){var i;return this.updateArrayField(function(a){var s=a.slice();return i||(i=s&&s.pop&&s.pop()),s},!0,!0),i},r.render=function(){var i={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},a=this.props,s=a.component,o=a.render,u=a.children,c=a.name,d=a.formik,h=Ee(d,["validate","validationSchema"]),f=P({},i,{form:h,name:c});return s?p.createElement(s,f):o?o(f):u?typeof u=="function"?u(f):ti(u)?null:p.Children.only(u):null},t}(p.Component);Ll.defaultProps={validateOnChange:!0};var Vl=function(e){Jn(t,e);function t(){return e.apply(this,arguments)||this}var r=t.prototype;return r.shouldComponentUpdate=function(i){return U(this.props.formik.errors,this.props.name)!==U(i.formik.errors,this.props.name)||U(this.props.formik.touched,this.props.name)!==U(i.formik.touched,this.props.name)||Object.keys(this.props).length!==Object.keys(i).length},r.render=function(){var i=this.props,a=i.component,s=i.formik,o=i.render,u=i.children,c=i.name,d=Ee(i,["component","formik","render","children","name"]),h=U(s.touched,c),f=U(s.errors,c);return h&&f?o?Y(o)?o(f):null:u?Y(u)?u(f):null:a?p.createElement(a,d,f):f:null},t}(p.Component),ot=Dl(Vl);function ke(e){this._maxSize=e,this.clear()}ke.prototype.clear=function(){this._size=0,this._values=Object.create(null)};ke.prototype.get=function(e){return this._values[e]};ke.prototype.set=function(e,t){return this._size>=this._maxSize&&this.clear(),e in this._values||this._size++,this._values[e]=t};var Ul=/[^.^\]^[]+|(?=\[\]|\.\.)/g,ii=/^\d+$/,zl=/^\d/,Bl=/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,Hl=/^\s*(['"]?)(.*?)(\1)\s*$/,xr=512,dn=new ke(xr),pn=new ke(xr),hn=new ke(xr),Ae={Cache:ke,split:tr,normalizePath:qt,setter:function(e){var t=qt(e);return pn.get(e)||pn.set(e,function(n,i){for(var a=0,s=t.length,o=n;a<s-1;){var u=t[a];if(u==="__proto__"||u==="constructor"||u==="prototype")return n;o=o[t[a++]]}o[t[a]]=i})},getter:function(e,t){var r=qt(e);return hn.get(e)||hn.set(e,function(i){for(var a=0,s=r.length;a<s;)if(i!=null||!t)i=i[r[a++]];else return;return i})},join:function(e){return e.reduce(function(t,r){return t+(_r(r)||ii.test(r)?"["+r+"]":(t?".":"")+r)},"")},forEach:function(e,t,r){ql(Array.isArray(e)?e:tr(e),t,r)}};function qt(e){return dn.get(e)||dn.set(e,tr(e).map(function(t){return t.replace(Hl,"$2")}))}function tr(e){return e.match(Ul)||[""]}function ql(e,t,r){var n=e.length,i,a,s,o;for(a=0;a<n;a++)i=e[a],i&&(Kl(i)&&(i='"'+i+'"'),o=_r(i),s=!o&&/^\d+$/.test(i),t.call(r,i,o,s,a,e))}function _r(e){return typeof e=="string"&&e&&["'",'"'].indexOf(e.charAt(0))!==-1}function Gl(e){return e.match(zl)&&!e.match(ii)}function Zl(e){return Bl.test(e)}function Kl(e){return!_r(e)&&(Gl(e)||Zl(e))}const Yl=/[A-Z\xc0-\xd6\xd8-\xde]?[a-z\xdf-\xf6\xf8-\xff]+(?:['’](?:d|ll|m|re|s|t|ve))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde]|$)|(?:[A-Z\xc0-\xd6\xd8-\xde]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:D|LL|M|RE|S|T|VE))?(?=[\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000]|[A-Z\xc0-\xd6\xd8-\xde](?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])|$)|[A-Z\xc0-\xd6\xd8-\xde]?(?:[a-z\xdf-\xf6\xf8-\xff]|[^\ud800-\udfff\xac\xb1\xd7\xf7\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\xbf\u2000-\u206f \t\x0b\f\xa0\ufeff\n\r\u2028\u2029\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\d+\u2700-\u27bfa-z\xdf-\xf6\xf8-\xffA-Z\xc0-\xd6\xd8-\xde])+(?:['’](?:d|ll|m|re|s|t|ve))?|[A-Z\xc0-\xd6\xd8-\xde]+(?:['’](?:D|LL|M|RE|S|T|VE))?|\d*(?:1ST|2ND|3RD|(?![123])\dTH)(?=\b|[a-z_])|\d*(?:1st|2nd|3rd|(?![123])\dth)(?=\b|[A-Z_])|\d+|(?:[\u2700-\u27bf]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?(?:\u200d(?:[^\ud800-\udfff]|(?:\ud83c[\udde6-\uddff]){2}|[\ud800-\udbff][\udc00-\udfff])[\ufe0e\ufe0f]?(?:[\u0300-\u036f\ufe20-\ufe2f\u20d0-\u20ff]|\ud83c[\udffb-\udfff])?)*/g,Ct=e=>e.match(Yl)||[],It=e=>e[0].toUpperCase()+e.slice(1),Sr=(e,t)=>Ct(e).join(t).toLowerCase(),ai=e=>Ct(e).reduce((t,r)=>`${t}${t?r[0].toUpperCase()+r.slice(1).toLowerCase():r.toLowerCase()}`,""),Wl=e=>It(ai(e)),Xl=e=>Sr(e,"_"),Ql=e=>Sr(e,"-"),Jl=e=>It(Sr(e," ")),ec=e=>Ct(e).map(It).join(" ");var Gt={words:Ct,upperFirst:It,camelCase:ai,pascalCase:Wl,snakeCase:Xl,kebabCase:Ql,sentenceCase:Jl,titleCase:ec},$r={exports:{}};$r.exports=function(e){return si(tc(e),e)};$r.exports.array=si;function si(e,t){var r=e.length,n=new Array(r),i={},a=r,s=rc(t),o=nc(e);for(t.forEach(function(c){if(!o.has(c[0])||!o.has(c[1]))throw new Error("Unknown node. There is an unknown node in the supplied edges.")});a--;)i[a]||u(e[a],a,new Set);return n;function u(c,d,h){if(h.has(c)){var f;try{f=", node was:"+JSON.stringify(c)}catch{f=""}throw new Error("Cyclic dependency"+f)}if(!o.has(c))throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: "+JSON.stringify(c));if(!i[d]){i[d]=!0;var b=s.get(c)||new Set;if(b=Array.from(b),d=b.length){h.add(c);do{var E=b[--d];u(E,o.get(E),h)}while(d);h.delete(c)}n[--r]=c}}}function tc(e){for(var t=new Set,r=0,n=e.length;r<n;r++){var i=e[r];t.add(i[0]),t.add(i[1])}return Array.from(t)}function rc(e){for(var t=new Map,r=0,n=e.length;r<n;r++){var i=e[r];t.has(i[0])||t.set(i[0],new Set),t.has(i[1])||t.set(i[1],new Set),t.get(i[0]).add(i[1])}return t}function nc(e){for(var t=new Map,r=0,n=e.length;r<n;r++)t.set(e[r],r);return t}var ic=$r.exports;const ac=sr(ic),sc=Object.prototype.toString,oc=Error.prototype.toString,uc=RegExp.prototype.toString,lc=typeof Symbol<"u"?Symbol.prototype.toString:()=>"",cc=/^Symbol\((.*)\)(.*)$/;function fc(e){return e!=+e?"NaN":e===0&&1/e<0?"-0":""+e}function mn(e,t=!1){if(e==null||e===!0||e===!1)return""+e;const r=typeof e;if(r==="number")return fc(e);if(r==="string")return t?`"${e}"`:e;if(r==="function")return"[Function "+(e.name||"anonymous")+"]";if(r==="symbol")return lc.call(e).replace(cc,"Symbol($1)");const n=sc.call(e).slice(8,-1);return n==="Date"?isNaN(e.getTime())?""+e:e.toISOString(e):n==="Error"||e instanceof Error?"["+oc.call(e)+"]":n==="RegExp"?uc.call(e):null}function _e(e,t){let r=mn(e,t);return r!==null?r:JSON.stringify(e,function(n,i){let a=mn(this[n],t);return a!==null?a:i},2)}function oi(e){return e==null?[]:[].concat(e)}let ui,dc=/\$\{\s*(\w+)\s*\}/g;ui=Symbol.toStringTag;class J extends Error{static formatError(t,r){const n=r.label||r.path||"this";return n!==r.path&&(r=Object.assign({},r,{path:n})),typeof t=="string"?t.replace(dc,(i,a)=>_e(r[a])):typeof t=="function"?t(r):t}static isError(t){return t&&t.name==="ValidationError"}constructor(t,r,n,i,a){super(),this.value=void 0,this.path=void 0,this.type=void 0,this.errors=void 0,this.params=void 0,this.inner=void 0,this[ui]="Error",this.name="ValidationError",this.value=r,this.path=n,this.type=i,this.errors=[],this.inner=[],oi(t).forEach(s=>{if(J.isError(s)){this.errors.push(...s.errors);const o=s.inner.length?s.inner:[s];this.inner.push(...o)}else this.errors.push(s)}),this.message=this.errors.length>1?`${this.errors.length} errors occurred`:this.errors[0],!a&&Error.captureStackTrace&&Error.captureStackTrace(this,J)}}let ce={default:"${path} is invalid",required:"${path} is a required field",defined:"${path} must be defined",notNull:"${path} cannot be null",oneOf:"${path} must be one of the following values: ${values}",notOneOf:"${path} must not be one of the following values: ${values}",notType:({path:e,type:t,value:r,originalValue:n})=>{const i=n!=null&&n!==r?` (cast from the value \`${_e(n,!0)}\`).`:".";return t!=="mixed"?`${e} must be a \`${t}\` type, but the final value was: \`${_e(r,!0)}\``+i:`${e} must match the configured type. The validated value was: \`${_e(r,!0)}\``+i}},ue={length:"${path} must be exactly ${length} characters",min:"${path} must be at least ${min} characters",max:"${path} must be at most ${max} characters",matches:'${path} must match the following: "${regex}"',email:"${path} must be a valid email",url:"${path} must be a valid URL",uuid:"${path} must be a valid UUID",trim:"${path} must be a trimmed string",lowercase:"${path} must be a lowercase string",uppercase:"${path} must be a upper case string"},pc={min:"${path} must be greater than or equal to ${min}",max:"${path} must be less than or equal to ${max}",lessThan:"${path} must be less than ${less}",moreThan:"${path} must be greater than ${more}",positive:"${path} must be a positive number",negative:"${path} must be a negative number",integer:"${path} must be an integer"},rr={min:"${path} field must be later than ${min}",max:"${path} field must be at earlier than ${max}"},hc={isValue:"${path} field must be ${value}"},nr={noUnknown:"${path} field has unspecified keys: ${unknown}"},mc={min:"${path} field must have at least ${min} items",max:"${path} field must have less than or equal to ${max} items",length:"${path} must have ${length} items"},yc={notType:e=>{const{path:t,value:r,spec:n}=e,i=n.types.length;if(Array.isArray(r)){if(r.length<i)return`${t} tuple value has too few items, expected a length of ${i} but got ${r.length} for value: \`${_e(r,!0)}\``;if(r.length>i)return`${t} tuple value has too many items, expected a length of ${i} but got ${r.length} for value: \`${_e(r,!0)}\``}return J.formatError(ce.notType,e)}};Object.assign(Object.create(null),{mixed:ce,string:ue,number:pc,date:rr,object:nr,array:mc,boolean:hc,tuple:yc});const wr=e=>e&&e.__isYupSchema__;class ht{static fromOptions(t,r){if(!r.then&&!r.otherwise)throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");let{is:n,then:i,otherwise:a}=r,s=typeof n=="function"?n:(...o)=>o.every(u=>u===n);return new ht(t,(o,u)=>{var c;let d=s(...o)?i:a;return(c=d==null?void 0:d(u))!=null?c:u})}constructor(t,r){this.fn=void 0,this.refs=t,this.refs=t,this.fn=r}resolve(t,r){let n=this.refs.map(a=>a.getValue(r==null?void 0:r.value,r==null?void 0:r.parent,r==null?void 0:r.context)),i=this.fn(n,t,r);if(i===void 0||i===t)return t;if(!wr(i))throw new TypeError("conditions must return a schema object");return i.resolve(r)}}const ut={context:"$",value:"."};class Re{constructor(t,r={}){if(this.key=void 0,this.isContext=void 0,this.isValue=void 0,this.isSibling=void 0,this.path=void 0,this.getter=void 0,this.map=void 0,typeof t!="string")throw new TypeError("ref must be a string, got: "+t);if(this.key=t.trim(),t==="")throw new TypeError("ref must be a non-empty string");this.isContext=this.key[0]===ut.context,this.isValue=this.key[0]===ut.value,this.isSibling=!this.isContext&&!this.isValue;let n=this.isContext?ut.context:this.isValue?ut.value:"";this.path=this.key.slice(n.length),this.getter=this.path&&Ae.getter(this.path,!0),this.map=r.map}getValue(t,r,n){let i=this.isContext?n:this.isValue?t:r;return this.getter&&(i=this.getter(i||{})),this.map&&(i=this.map(i)),i}cast(t,r){return this.getValue(t,r==null?void 0:r.parent,r==null?void 0:r.context)}resolve(){return this}describe(){return{type:"ref",key:this.key}}toString(){return`Ref(${this.key})`}static isRef(t){return t&&t.__isYupRef}}Re.prototype.__isYupRef=!0;const Oe=e=>e==null;function Ve(e){function t({value:r,path:n="",options:i,originalValue:a,schema:s},o,u){const{name:c,test:d,params:h,message:f,skipAbsent:b}=e;let{parent:E,context:y,abortEarly:x=s.spec.abortEarly,disableStackTrace:v=s.spec.disableStackTrace}=i;function T(I){return Re.isRef(I)?I.getValue(r,E,y):I}function $(I={}){var ee;const L=Object.assign({value:r,originalValue:a,label:s.spec.label,path:I.path||n,spec:s.spec},h,I.params);for(const ne of Object.keys(L))L[ne]=T(L[ne]);const G=new J(J.formatError(I.message||f,L),r,L.path,I.type||c,(ee=I.disableStackTrace)!=null?ee:v);return G.params=L,G}const j=x?o:u;let z={path:n,parent:E,type:c,from:i.from,createError:$,resolve:T,options:i,originalValue:a,schema:s};const F=I=>{J.isError(I)?j(I):I?u(null):j($())},w=I=>{J.isError(I)?j(I):o(I)};if(b&&Oe(r))return F(!0);let C;try{var B;if(C=d.call(z,r,z),typeof((B=C)==null?void 0:B.then)=="function"){if(i.sync)throw new Error(`Validation test of type: "${z.type}" returned a Promise during a synchronous validate. This test will finish after the validate call has returned`);return Promise.resolve(C).then(F,w)}}catch(I){w(I);return}F(C)}return t.OPTIONS=e,t}function gc(e,t,r,n=r){let i,a,s;return t?(Ae.forEach(t,(o,u,c)=>{let d=u?o.slice(1,o.length-1):o;e=e.resolve({context:n,parent:i,value:r});let h=e.type==="tuple",f=c?parseInt(d,10):0;if(e.innerType||h){if(h&&!c)throw new Error(`Yup.reach cannot implicitly index into a tuple type. the path part "${s}" must contain an index to the tuple element, e.g. "${s}[0]"`);if(r&&f>=r.length)throw new Error(`Yup.reach cannot resolve an array item at index: ${o}, in the path: ${t}. because there is no value at that index. `);i=r,r=r&&r[f],e=h?e.spec.types[f]:e.innerType}if(!c){if(!e.fields||!e.fields[d])throw new Error(`The schema does not contain the path: ${t}. (failed at: ${s} which is a type: "${e.type}")`);i=r,r=r&&r[d],e=e.fields[d]}a=d,s=u?"["+o+"]":"."+o}),{schema:e,parent:i,parentPath:a}):{parent:i,parentPath:t,schema:e}}class mt extends Set{describe(){const t=[];for(const r of this.values())t.push(Re.isRef(r)?r.describe():r);return t}resolveAll(t){let r=[];for(const n of this.values())r.push(t(n));return r}clone(){return new mt(this.values())}merge(t,r){const n=this.clone();return t.forEach(i=>n.add(i)),r.forEach(i=>n.delete(i)),n}}function Ue(e,t=new Map){if(wr(e)||!e||typeof e!="object")return e;if(t.has(e))return t.get(e);let r;if(e instanceof Date)r=new Date(e.getTime()),t.set(e,r);else if(e instanceof RegExp)r=new RegExp(e),t.set(e,r);else if(Array.isArray(e)){r=new Array(e.length),t.set(e,r);for(let n=0;n<e.length;n++)r[n]=Ue(e[n],t)}else if(e instanceof Map){r=new Map,t.set(e,r);for(const[n,i]of e.entries())r.set(n,Ue(i,t))}else if(e instanceof Set){r=new Set,t.set(e,r);for(const n of e)r.add(Ue(n,t))}else if(e instanceof Object){r={},t.set(e,r);for(const[n,i]of Object.entries(e))r[n]=Ue(i,t)}else throw Error(`Unable to clone ${e}`);return r}class de{constructor(t){this.type=void 0,this.deps=[],this.tests=void 0,this.transforms=void 0,this.conditions=[],this._mutate=void 0,this.internalTests={},this._whitelist=new mt,this._blacklist=new mt,this.exclusiveTests=Object.create(null),this._typeCheck=void 0,this.spec=void 0,this.tests=[],this.transforms=[],this.withMutation(()=>{this.typeError(ce.notType)}),this.type=t.type,this._typeCheck=t.check,this.spec=Object.assign({strip:!1,strict:!1,abortEarly:!0,recursive:!0,disableStackTrace:!1,nullable:!1,optional:!0,coerce:!0},t==null?void 0:t.spec),this.withMutation(r=>{r.nonNullable()})}get _type(){return this.type}clone(t){if(this._mutate)return t&&Object.assign(this.spec,t),this;const r=Object.create(Object.getPrototypeOf(this));return r.type=this.type,r._typeCheck=this._typeCheck,r._whitelist=this._whitelist.clone(),r._blacklist=this._blacklist.clone(),r.internalTests=Object.assign({},this.internalTests),r.exclusiveTests=Object.assign({},this.exclusiveTests),r.deps=[...this.deps],r.conditions=[...this.conditions],r.tests=[...this.tests],r.transforms=[...this.transforms],r.spec=Ue(Object.assign({},this.spec,t)),r}label(t){let r=this.clone();return r.spec.label=t,r}meta(...t){if(t.length===0)return this.spec.meta;let r=this.clone();return r.spec.meta=Object.assign(r.spec.meta||{},t[0]),r}withMutation(t){let r=this._mutate;this._mutate=!0;let n=t(this);return this._mutate=r,n}concat(t){if(!t||t===this)return this;if(t.type!==this.type&&this.type!=="mixed")throw new TypeError(`You cannot \`concat()\` schema's of different types: ${this.type} and ${t.type}`);let r=this,n=t.clone();const i=Object.assign({},r.spec,n.spec);return n.spec=i,n.internalTests=Object.assign({},r.internalTests,n.internalTests),n._whitelist=r._whitelist.merge(t._whitelist,t._blacklist),n._blacklist=r._blacklist.merge(t._blacklist,t._whitelist),n.tests=r.tests,n.exclusiveTests=r.exclusiveTests,n.withMutation(a=>{t.tests.forEach(s=>{a.test(s.OPTIONS)})}),n.transforms=[...r.transforms,...n.transforms],n}isType(t){return t==null?!!(this.spec.nullable&&t===null||this.spec.optional&&t===void 0):this._typeCheck(t)}resolve(t){let r=this;if(r.conditions.length){let n=r.conditions;r=r.clone(),r.conditions=[],r=n.reduce((i,a)=>a.resolve(i,t),r),r=r.resolve(t)}return r}resolveOptions(t){var r,n,i,a;return Object.assign({},t,{from:t.from||[],strict:(r=t.strict)!=null?r:this.spec.strict,abortEarly:(n=t.abortEarly)!=null?n:this.spec.abortEarly,recursive:(i=t.recursive)!=null?i:this.spec.recursive,disableStackTrace:(a=t.disableStackTrace)!=null?a:this.spec.disableStackTrace})}cast(t,r={}){let n=this.resolve(Object.assign({value:t},r)),i=r.assert==="ignore-optionality",a=n._cast(t,r);if(r.assert!==!1&&!n.isType(a)){if(i&&Oe(a))return a;let s=_e(t),o=_e(a);throw new TypeError(`The value of ${r.path||"field"} could not be cast to a value that satisfies the schema type: "${n.type}". 

attempted value: ${s} 
`+(o!==s?`result of cast: ${o}`:""))}return a}_cast(t,r){let n=t===void 0?t:this.transforms.reduce((i,a)=>a.call(this,i,t,this),t);return n===void 0&&(n=this.getDefault(r)),n}_validate(t,r={},n,i){let{path:a,originalValue:s=t,strict:o=this.spec.strict}=r,u=t;o||(u=this._cast(u,Object.assign({assert:!1},r)));let c=[];for(let d of Object.values(this.internalTests))d&&c.push(d);this.runTests({path:a,value:u,originalValue:s,options:r,tests:c},n,d=>{if(d.length)return i(d,u);this.runTests({path:a,value:u,originalValue:s,options:r,tests:this.tests},n,i)})}runTests(t,r,n){let i=!1,{tests:a,value:s,originalValue:o,path:u,options:c}=t,d=y=>{i||(i=!0,r(y,s))},h=y=>{i||(i=!0,n(y,s))},f=a.length,b=[];if(!f)return h([]);let E={value:s,originalValue:o,path:u,options:c,schema:this};for(let y=0;y<a.length;y++){const x=a[y];x(E,d,function(T){T&&(Array.isArray(T)?b.push(...T):b.push(T)),--f<=0&&h(b)})}}asNestedTest({key:t,index:r,parent:n,parentPath:i,originalParent:a,options:s}){const o=t??r;if(o==null)throw TypeError("Must include `key` or `index` for nested validations");const u=typeof o=="number";let c=n[o];const d=Object.assign({},s,{strict:!0,parent:n,value:c,originalValue:a[o],key:void 0,[u?"index":"key"]:o,path:u||o.includes(".")?`${i||""}[${c?o:`"${o}"`}]`:(i?`${i}.`:"")+t});return(h,f,b)=>this.resolve(d)._validate(c,d,f,b)}validate(t,r){var n;let i=this.resolve(Object.assign({},r,{value:t})),a=(n=r==null?void 0:r.disableStackTrace)!=null?n:i.spec.disableStackTrace;return new Promise((s,o)=>i._validate(t,r,(u,c)=>{J.isError(u)&&(u.value=c),o(u)},(u,c)=>{u.length?o(new J(u,c,void 0,void 0,a)):s(c)}))}validateSync(t,r){var n;let i=this.resolve(Object.assign({},r,{value:t})),a,s=(n=r==null?void 0:r.disableStackTrace)!=null?n:i.spec.disableStackTrace;return i._validate(t,Object.assign({},r,{sync:!0}),(o,u)=>{throw J.isError(o)&&(o.value=u),o},(o,u)=>{if(o.length)throw new J(o,t,void 0,void 0,s);a=u}),a}isValid(t,r){return this.validate(t,r).then(()=>!0,n=>{if(J.isError(n))return!1;throw n})}isValidSync(t,r){try{return this.validateSync(t,r),!0}catch(n){if(J.isError(n))return!1;throw n}}_getDefault(t){let r=this.spec.default;return r==null?r:typeof r=="function"?r.call(this,t):Ue(r)}getDefault(t){return this.resolve(t||{})._getDefault(t)}default(t){return arguments.length===0?this._getDefault():this.clone({default:t})}strict(t=!0){return this.clone({strict:t})}nullability(t,r){const n=this.clone({nullable:t});return n.internalTests.nullable=Ve({message:r,name:"nullable",test(i){return i===null?this.schema.spec.nullable:!0}}),n}optionality(t,r){const n=this.clone({optional:t});return n.internalTests.optionality=Ve({message:r,name:"optionality",test(i){return i===void 0?this.schema.spec.optional:!0}}),n}optional(){return this.optionality(!0)}defined(t=ce.defined){return this.optionality(!1,t)}nullable(){return this.nullability(!0)}nonNullable(t=ce.notNull){return this.nullability(!1,t)}required(t=ce.required){return this.clone().withMutation(r=>r.nonNullable(t).defined(t))}notRequired(){return this.clone().withMutation(t=>t.nullable().optional())}transform(t){let r=this.clone();return r.transforms.push(t),r}test(...t){let r;if(t.length===1?typeof t[0]=="function"?r={test:t[0]}:r=t[0]:t.length===2?r={name:t[0],test:t[1]}:r={name:t[0],message:t[1],test:t[2]},r.message===void 0&&(r.message=ce.default),typeof r.test!="function")throw new TypeError("`test` is a required parameters");let n=this.clone(),i=Ve(r),a=r.exclusive||r.name&&n.exclusiveTests[r.name]===!0;if(r.exclusive&&!r.name)throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");return r.name&&(n.exclusiveTests[r.name]=!!r.exclusive),n.tests=n.tests.filter(s=>!(s.OPTIONS.name===r.name&&(a||s.OPTIONS.test===i.OPTIONS.test))),n.tests.push(i),n}when(t,r){!Array.isArray(t)&&typeof t!="string"&&(r=t,t=".");let n=this.clone(),i=oi(t).map(a=>new Re(a));return i.forEach(a=>{a.isSibling&&n.deps.push(a.key)}),n.conditions.push(typeof r=="function"?new ht(i,r):ht.fromOptions(i,r)),n}typeError(t){let r=this.clone();return r.internalTests.typeError=Ve({message:t,name:"typeError",skipAbsent:!0,test(n){return this.schema._typeCheck(n)?!0:this.createError({params:{type:this.schema.type}})}}),r}oneOf(t,r=ce.oneOf){let n=this.clone();return t.forEach(i=>{n._whitelist.add(i),n._blacklist.delete(i)}),n.internalTests.whiteList=Ve({message:r,name:"oneOf",skipAbsent:!0,test(i){let a=this.schema._whitelist,s=a.resolveAll(this.resolve);return s.includes(i)?!0:this.createError({params:{values:Array.from(a).join(", "),resolved:s}})}}),n}notOneOf(t,r=ce.notOneOf){let n=this.clone();return t.forEach(i=>{n._blacklist.add(i),n._whitelist.delete(i)}),n.internalTests.blacklist=Ve({message:r,name:"notOneOf",test(i){let a=this.schema._blacklist,s=a.resolveAll(this.resolve);return s.includes(i)?this.createError({params:{values:Array.from(a).join(", "),resolved:s}}):!0}}),n}strip(t=!0){let r=this.clone();return r.spec.strip=t,r}describe(t){const r=(t?this.resolve(t):this).clone(),{label:n,meta:i,optional:a,nullable:s}=r.spec;return{meta:i,label:n,optional:a,nullable:s,default:r.getDefault(t),type:r.type,oneOf:r._whitelist.describe(),notOneOf:r._blacklist.describe(),tests:r.tests.map(u=>({name:u.OPTIONS.name,params:u.OPTIONS.params})).filter((u,c,d)=>d.findIndex(h=>h.name===u.name)===c)}}}de.prototype.__isYupSchema__=!0;for(const e of["validate","validateSync"])de.prototype[`${e}At`]=function(t,r,n={}){const{parent:i,parentPath:a,schema:s}=gc(this,t,r,n.context);return s[e](i&&i[a],Object.assign({},n,{parent:i,path:t}))};for(const e of["equals","is"])de.prototype[e]=de.prototype.oneOf;for(const e of["not","nope"])de.prototype[e]=de.prototype.notOneOf;let vc=/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,bc=/^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,Tc=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,Ec=e=>Oe(e)||e===e.trim(),xc={}.toString();function qe(){return new li}class li extends de{constructor(){super({type:"string",check(t){return t instanceof String&&(t=t.valueOf()),typeof t=="string"}}),this.withMutation(()=>{this.transform((t,r,n)=>{if(!n.spec.coerce||n.isType(t)||Array.isArray(t))return t;const i=t!=null&&t.toString?t.toString():t;return i===xc?t:i})})}required(t){return super.required(t).withMutation(r=>r.test({message:t||ce.required,name:"required",skipAbsent:!0,test:n=>!!n.length}))}notRequired(){return super.notRequired().withMutation(t=>(t.tests=t.tests.filter(r=>r.OPTIONS.name!=="required"),t))}length(t,r=ue.length){return this.test({message:r,name:"length",exclusive:!0,params:{length:t},skipAbsent:!0,test(n){return n.length===this.resolve(t)}})}min(t,r=ue.min){return this.test({message:r,name:"min",exclusive:!0,params:{min:t},skipAbsent:!0,test(n){return n.length>=this.resolve(t)}})}max(t,r=ue.max){return this.test({name:"max",exclusive:!0,message:r,params:{max:t},skipAbsent:!0,test(n){return n.length<=this.resolve(t)}})}matches(t,r){let n=!1,i,a;return r&&(typeof r=="object"?{excludeEmptyString:n=!1,message:i,name:a}=r:i=r),this.test({name:a||"matches",message:i||ue.matches,params:{regex:t},skipAbsent:!0,test:s=>s===""&&n||s.search(t)!==-1})}email(t=ue.email){return this.matches(vc,{name:"email",message:t,excludeEmptyString:!0})}url(t=ue.url){return this.matches(bc,{name:"url",message:t,excludeEmptyString:!0})}uuid(t=ue.uuid){return this.matches(Tc,{name:"uuid",message:t,excludeEmptyString:!1})}ensure(){return this.default("").transform(t=>t===null?"":t)}trim(t=ue.trim){return this.transform(r=>r!=null?r.trim():r).test({message:t,name:"trim",test:Ec})}lowercase(t=ue.lowercase){return this.transform(r=>Oe(r)?r:r.toLowerCase()).test({message:t,name:"string_case",exclusive:!0,skipAbsent:!0,test:r=>Oe(r)||r===r.toLowerCase()})}uppercase(t=ue.uppercase){return this.transform(r=>Oe(r)?r:r.toUpperCase()).test({message:t,name:"string_case",exclusive:!0,skipAbsent:!0,test:r=>Oe(r)||r===r.toUpperCase()})}}qe.prototype=li.prototype;const _c=/^(\d{4}|[+-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,.](\d{1,}))?)?(?:(Z)|([+-])(\d{2})(?::?(\d{2}))?)?)?$/;function ve(e,t=0){return Number(e)||t}function Sc(e){const t=_c.exec(e);if(!t)return Date.parse?Date.parse(e):Number.NaN;const r={year:ve(t[1]),month:ve(t[2],1)-1,day:ve(t[3],1),hour:ve(t[4]),minute:ve(t[5]),second:ve(t[6]),millisecond:t[7]?ve(t[7].substring(0,3)):0,z:t[8]||void 0,plusMinus:t[9]||void 0,hourOffset:ve(t[10]),minuteOffset:ve(t[11])};if(r.z===void 0&&r.plusMinus===void 0)return new Date(r.year,r.month,r.day,r.hour,r.minute,r.second,r.millisecond).valueOf();let n=0;return r.z!=="Z"&&r.plusMinus!==void 0&&(n=r.hourOffset*60+r.minuteOffset,r.plusMinus==="+"&&(n=0-n)),Date.UTC(r.year,r.month,r.day,r.hour,r.minute+n,r.second,r.millisecond)}let $c=new Date(""),wc=e=>Object.prototype.toString.call(e)==="[object Date]";class Nt extends de{constructor(){super({type:"date",check(t){return wc(t)&&!isNaN(t.getTime())}}),this.withMutation(()=>{this.transform((t,r,n)=>!n.spec.coerce||n.isType(t)||t===null?t:(t=Sc(t),isNaN(t)?Nt.INVALID_DATE:new Date(t)))})}prepareParam(t,r){let n;if(Re.isRef(t))n=t;else{let i=this.cast(t);if(!this._typeCheck(i))throw new TypeError(`\`${r}\` must be a Date or a value that can be \`cast()\` to a Date`);n=i}return n}min(t,r=rr.min){let n=this.prepareParam(t,"min");return this.test({message:r,name:"min",exclusive:!0,params:{min:t},skipAbsent:!0,test(i){return i>=this.resolve(n)}})}max(t,r=rr.max){let n=this.prepareParam(t,"max");return this.test({message:r,name:"max",exclusive:!0,params:{max:t},skipAbsent:!0,test(i){return i<=this.resolve(n)}})}}Nt.INVALID_DATE=$c;Nt.prototype;function Fc(e,t=[]){let r=[],n=new Set,i=new Set(t.map(([s,o])=>`${s}-${o}`));function a(s,o){let u=Ae.split(s)[0];n.add(u),i.has(`${o}-${u}`)||r.push([o,u])}for(const s of Object.keys(e)){let o=e[s];n.add(s),Re.isRef(o)&&o.isSibling?a(o.path,s):wr(o)&&"deps"in o&&o.deps.forEach(u=>a(u,s))}return ac.array(Array.from(n),r).reverse()}function yn(e,t){let r=1/0;return e.some((n,i)=>{var a;if((a=t.path)!=null&&a.includes(n))return r=i,!0}),r}function ci(e){return(t,r)=>yn(e,t)-yn(e,r)}const Oc=(e,t,r)=>{if(typeof e!="string")return e;let n=e;try{n=JSON.parse(e)}catch{}return r.isType(n)?n:e};function ft(e){if("fields"in e){const t={};for(const[r,n]of Object.entries(e.fields))t[r]=ft(n);return e.setFields(t)}if(e.type==="array"){const t=e.optional();return t.innerType&&(t.innerType=ft(t.innerType)),t}return e.type==="tuple"?e.optional().clone({types:e.spec.types.map(ft)}):"optional"in e?e.optional():e}const Ac=(e,t)=>{const r=[...Ae.normalizePath(t)];if(r.length===1)return r[0]in e;let n=r.pop(),i=Ae.getter(Ae.join(r),!0)(e);return!!(i&&n in i)};let gn=e=>Object.prototype.toString.call(e)==="[object Object]";function jc(e,t){let r=Object.keys(e.fields);return Object.keys(t).filter(n=>r.indexOf(n)===-1)}const Cc=ci([]);function fi(e){return new di(e)}class di extends de{constructor(t){super({type:"object",check(r){return gn(r)||typeof r=="function"}}),this.fields=Object.create(null),this._sortErrors=Cc,this._nodes=[],this._excludedEdges=[],this.withMutation(()=>{t&&this.shape(t)})}_cast(t,r={}){var n;let i=super._cast(t,r);if(i===void 0)return this.getDefault(r);if(!this._typeCheck(i))return i;let a=this.fields,s=(n=r.stripUnknown)!=null?n:this.spec.noUnknown,o=[].concat(this._nodes,Object.keys(i).filter(h=>!this._nodes.includes(h))),u={},c=Object.assign({},r,{parent:u,__validating:r.__validating||!1}),d=!1;for(const h of o){let f=a[h],b=h in i;if(f){let E,y=i[h];c.path=(r.path?`${r.path}.`:"")+h,f=f.resolve({value:y,context:r.context,parent:u});let x=f instanceof de?f.spec:void 0,v=x==null?void 0:x.strict;if(x!=null&&x.strip){d=d||h in i;continue}E=!r.__validating||!v?f.cast(i[h],c):i[h],E!==void 0&&(u[h]=E)}else b&&!s&&(u[h]=i[h]);(b!==h in u||u[h]!==i[h])&&(d=!0)}return d?u:i}_validate(t,r={},n,i){let{from:a=[],originalValue:s=t,recursive:o=this.spec.recursive}=r;r.from=[{schema:this,value:s},...a],r.__validating=!0,r.originalValue=s,super._validate(t,r,n,(u,c)=>{if(!o||!gn(c)){i(u,c);return}s=s||c;let d=[];for(let h of this._nodes){let f=this.fields[h];!f||Re.isRef(f)||d.push(f.asNestedTest({options:r,key:h,parent:c,parentPath:r.path,originalParent:s}))}this.runTests({tests:d,value:c,originalValue:s,options:r},n,h=>{i(h.sort(this._sortErrors).concat(u),c)})})}clone(t){const r=super.clone(t);return r.fields=Object.assign({},this.fields),r._nodes=this._nodes,r._excludedEdges=this._excludedEdges,r._sortErrors=this._sortErrors,r}concat(t){let r=super.concat(t),n=r.fields;for(let[i,a]of Object.entries(this.fields)){const s=n[i];n[i]=s===void 0?a:s}return r.withMutation(i=>i.setFields(n,[...this._excludedEdges,...t._excludedEdges]))}_getDefault(t){if("default"in this.spec)return super._getDefault(t);if(!this._nodes.length)return;let r={};return this._nodes.forEach(n=>{var i;const a=this.fields[n];let s=t;(i=s)!=null&&i.value&&(s=Object.assign({},s,{parent:s.value,value:s.value[n]})),r[n]=a&&"getDefault"in a?a.getDefault(s):void 0}),r}setFields(t,r){let n=this.clone();return n.fields=t,n._nodes=Fc(t,r),n._sortErrors=ci(Object.keys(t)),r&&(n._excludedEdges=r),n}shape(t,r=[]){return this.clone().withMutation(n=>{let i=n._excludedEdges;return r.length&&(Array.isArray(r[0])||(r=[r]),i=[...n._excludedEdges,...r]),n.setFields(Object.assign(n.fields,t),i)})}partial(){const t={};for(const[r,n]of Object.entries(this.fields))t[r]="optional"in n&&n.optional instanceof Function?n.optional():n;return this.setFields(t)}deepPartial(){return ft(this)}pick(t){const r={};for(const n of t)this.fields[n]&&(r[n]=this.fields[n]);return this.setFields(r,this._excludedEdges.filter(([n,i])=>t.includes(n)&&t.includes(i)))}omit(t){const r=[];for(const n of Object.keys(this.fields))t.includes(n)||r.push(n);return this.pick(r)}from(t,r,n){let i=Ae.getter(t,!0);return this.transform(a=>{if(!a)return a;let s=a;return Ac(a,t)&&(s=Object.assign({},a),n||delete s[t],s[r]=i(a)),s})}json(){return this.transform(Oc)}noUnknown(t=!0,r=nr.noUnknown){typeof t!="boolean"&&(r=t,t=!0);let n=this.test({name:"noUnknown",exclusive:!0,message:r,test(i){if(i==null)return!0;const a=jc(this.schema,i);return!t||a.length===0||this.createError({params:{unknown:a.join(", ")}})}});return n.spec.noUnknown=t,n}unknown(t=!0,r=nr.noUnknown){return this.noUnknown(!t,r)}transformKeys(t){return this.transform(r=>{if(!r)return r;const n={};for(const i of Object.keys(r))n[t(i)]=r[i];return n})}camelCase(){return this.transformKeys(Gt.camelCase)}snakeCase(){return this.transformKeys(Gt.snakeCase)}constantCase(){return this.transformKeys(t=>Gt.snakeCase(t).toUpperCase())}describe(t){const r=(t?this.resolve(t):this).clone(),n=super.describe(t);n.fields={};for(const[a,s]of Object.entries(r.fields)){var i;let o=t;(i=o)!=null&&i.value&&(o=Object.assign({},o,{parent:o.value,value:o.value[a]})),n.fields[a]=s.describe(o)}return n}}fi.prototype=di.prototype;const Ic=({question:e,answer:t,isOpen:r,onClick:n})=>_.jsx(it.div,{children:_.jsxs(Ai,{children:[_.jsx(it.div,{className:"card shadow-sm p-1 mb-1 bg-light rounded cursor-pointer",onClick:n,children:_.jsxs(it.div,{className:"text-dark font-weight-bold ml-1",children:[e," ",_.jsx("span",{className:"toggle-icon","aria-label":r?"Cerrar":"Abrir",children:r?"-":"+"})]})},"question"),r&&_.jsx(it.div,{initial:{opacity:0},animate:{opacity:1,transition:{duration:.5}},exit:{opacity:0},className:"p-2 text-lg text-dark border-left border-bottom border-secondary",children:t},"answer")]})}),Nc=()=>{const[e,t]=p.useState([]);p.useEffect(()=>{fetch(Tn+"/frequentQuestions/").then(i=>i.json()).then(i=>t(i)).catch(i=>console.error(i))},[]);const[r,n]=p.useState(null);return _.jsx("div",{children:e.map((i,a)=>_.jsx(Ic,{question:i.pregunta,answer:i.respuesta,isOpen:r===a,onClick:()=>n(r===a?null:a)},a))})};function pi(e){var t,r,n="";if(typeof e=="string"||typeof e=="number")n+=e;else if(typeof e=="object")if(Array.isArray(e)){var i=e.length;for(t=0;t<i;t++)e[t]&&(r=pi(e[t]))&&(n&&(n+=" "),n+=r)}else for(r in e)e[r]&&(n&&(n+=" "),n+=r);return n}function xe(){for(var e,t,r=0,n="",i=arguments.length;r<i;r++)(e=arguments[r])&&(t=pi(e))&&(n&&(n+=" "),n+=t);return n}const Qe=e=>typeof e=="number"&&!isNaN(e),je=e=>typeof e=="string",te=e=>typeof e=="function",dt=e=>je(e)||te(e)?e:null,ir=e=>p.isValidElement(e)||je(e)||te(e)||Qe(e);function Pc(e,t,r){r===void 0&&(r=300);const{scrollHeight:n,style:i}=e;requestAnimationFrame(()=>{i.minHeight="initial",i.height=n+"px",i.transition=`all ${r}ms`,requestAnimationFrame(()=>{i.height="0",i.padding="0",i.margin="0",setTimeout(t,r)})})}function Pt(e){let{enter:t,exit:r,appendPosition:n=!1,collapse:i=!0,collapseDuration:a=300}=e;return function(s){let{children:o,position:u,preventExitTransition:c,done:d,nodeRef:h,isIn:f,playToast:b}=s;const E=n?`${t}--${u}`:t,y=n?`${r}--${u}`:r,x=p.useRef(0);return p.useLayoutEffect(()=>{const v=h.current,T=E.split(" "),$=j=>{j.target===h.current&&(b(),v.removeEventListener("animationend",$),v.removeEventListener("animationcancel",$),x.current===0&&j.type!=="animationcancel"&&v.classList.remove(...T))};v.classList.add(...T),v.addEventListener("animationend",$),v.addEventListener("animationcancel",$)},[]),p.useEffect(()=>{const v=h.current,T=()=>{v.removeEventListener("animationend",T),i?Pc(v,d,a):d()};f||(c?T():(x.current=1,v.className+=` ${y}`,v.addEventListener("animationend",T)))},[f]),k.createElement(k.Fragment,null,o)}}function vn(e,t){return e!=null?{content:e.content,containerId:e.props.containerId,id:e.props.toastId,theme:e.props.theme,type:e.props.type,data:e.props.data||{},isLoading:e.props.isLoading,icon:e.props.icon,status:t}:{}}const Q=new Map;let Je=[];const ar=new Set,Dc=e=>ar.forEach(t=>t(e)),hi=()=>Q.size>0;function mi(e,t){var r;if(t)return!((r=Q.get(t))==null||!r.isToastActive(e));let n=!1;return Q.forEach(i=>{i.isToastActive(e)&&(n=!0)}),n}function yi(e,t){ir(e)&&(hi()||Je.push({content:e,options:t}),Q.forEach(r=>{r.buildToast(e,t)}))}function bn(e,t){Q.forEach(r=>{t!=null&&t!=null&&t.containerId?(t==null?void 0:t.containerId)===r.id&&r.toggle(e,t==null?void 0:t.id):r.toggle(e,t==null?void 0:t.id)})}function Mc(e){const{subscribe:t,getSnapshot:r,setProps:n}=p.useRef(function(a){const s=a.containerId||1;return{subscribe(o){const u=function(d,h,f){let b=1,E=0,y=[],x=[],v=[],T=h;const $=new Map,j=new Set,z=()=>{v=Array.from($.values()),j.forEach(O=>O())},F=O=>{x=O==null?[]:x.filter(C=>C!==O),z()},w=O=>{const{toastId:C,onOpen:B,updateId:I,children:ee}=O.props,L=I==null;O.staleId&&$.delete(O.staleId),$.set(C,O),x=[...x,O.props.toastId].filter(G=>G!==O.staleId),z(),f(vn(O,L?"added":"updated")),L&&te(B)&&B(p.isValidElement(ee)&&ee.props)};return{id:d,props:T,observe:O=>(j.add(O),()=>j.delete(O)),toggle:(O,C)=>{$.forEach(B=>{C!=null&&C!==B.props.toastId||te(B.toggle)&&B.toggle(O)})},removeToast:F,toasts:$,clearQueue:()=>{E-=y.length,y=[]},buildToast:(O,C)=>{if((Z=>{let{containerId:W,toastId:X,updateId:K}=Z;const le=W?W!==d:d!==1,ye=$.has(X)&&K==null;return le||ye})(C))return;const{toastId:B,updateId:I,data:ee,staleId:L,delay:G}=C,ne=()=>{F(B)},Le=I==null;Le&&E++;const se={...T,style:T.toastStyle,key:b++,...Object.fromEntries(Object.entries(C).filter(Z=>{let[W,X]=Z;return X!=null})),toastId:B,updateId:I,data:ee,closeToast:ne,isIn:!1,className:dt(C.className||T.toastClassName),bodyClassName:dt(C.bodyClassName||T.bodyClassName),progressClassName:dt(C.progressClassName||T.progressClassName),autoClose:!C.isLoading&&(oe=C.autoClose,he=T.autoClose,oe===!1||Qe(oe)&&oe>0?oe:he),deleteToast(){const Z=$.get(B),{onClose:W,children:X}=Z.props;te(W)&&W(p.isValidElement(X)&&X.props),f(vn(Z,"removed")),$.delete(B),E--,E<0&&(E=0),y.length>0?w(y.shift()):z()}};var oe,he;se.closeButton=T.closeButton,C.closeButton===!1||ir(C.closeButton)?se.closeButton=C.closeButton:C.closeButton===!0&&(se.closeButton=!ir(T.closeButton)||T.closeButton);let me=O;p.isValidElement(O)&&!je(O.type)?me=p.cloneElement(O,{closeToast:ne,toastProps:se,data:ee}):te(O)&&(me=O({closeToast:ne,toastProps:se,data:ee}));const ie={content:me,props:se,staleId:L};T.limit&&T.limit>0&&E>T.limit&&Le?y.push(ie):Qe(G)?setTimeout(()=>{w(ie)},G):w(ie)},setProps(O){T=O},setToggle:(O,C)=>{$.get(O).toggle=C},isToastActive:O=>x.some(C=>C===O),getSnapshot:()=>T.newestOnTop?v.reverse():v}}(s,a,Dc);Q.set(s,u);const c=u.observe(o);return Je.forEach(d=>yi(d.content,d.options)),Je=[],()=>{c(),Q.delete(s)}},setProps(o){var u;(u=Q.get(s))==null||u.setProps(o)},getSnapshot(){var o;return(o=Q.get(s))==null?void 0:o.getSnapshot()}}}(e)).current;n(e);const i=p.useSyncExternalStore(t,r,r);return{getToastToRender:function(a){if(!i)return[];const s=new Map;return i.forEach(o=>{const{position:u}=o.props;s.has(u)||s.set(u,[]),s.get(u).push(o)}),Array.from(s,o=>a(o[0],o[1]))},isToastActive:mi,count:i==null?void 0:i.length}}function kc(e){const[t,r]=p.useState(!1),[n,i]=p.useState(!1),a=p.useRef(null),s=p.useRef({start:0,delta:0,removalDistance:0,canCloseOnClick:!0,canDrag:!1,didMove:!1}).current,{autoClose:o,pauseOnHover:u,closeToast:c,onClick:d,closeOnClick:h}=e;var f,b;function E(){r(!0)}function y(){r(!1)}function x($){const j=a.current;s.canDrag&&j&&(s.didMove=!0,t&&y(),s.delta=e.draggableDirection==="x"?$.clientX-s.start:$.clientY-s.start,s.start!==$.clientX&&(s.canCloseOnClick=!1),j.style.transform=`translate3d(${e.draggableDirection==="x"?`${s.delta}px, var(--y)`:`0, calc(${s.delta}px + var(--y))`},0)`,j.style.opacity=""+(1-Math.abs(s.delta/s.removalDistance)))}function v(){document.removeEventListener("pointermove",x),document.removeEventListener("pointerup",v);const $=a.current;if(s.canDrag&&s.didMove&&$){if(s.canDrag=!1,Math.abs(s.delta)>s.removalDistance)return i(!0),e.closeToast(),void e.collapseAll();$.style.transition="transform 0.2s, opacity 0.2s",$.style.removeProperty("transform"),$.style.removeProperty("opacity")}}(b=Q.get((f={id:e.toastId,containerId:e.containerId,fn:r}).containerId||1))==null||b.setToggle(f.id,f.fn),p.useEffect(()=>{if(e.pauseOnFocusLoss)return document.hasFocus()||y(),window.addEventListener("focus",E),window.addEventListener("blur",y),()=>{window.removeEventListener("focus",E),window.removeEventListener("blur",y)}},[e.pauseOnFocusLoss]);const T={onPointerDown:function($){if(e.draggable===!0||e.draggable===$.pointerType){s.didMove=!1,document.addEventListener("pointermove",x),document.addEventListener("pointerup",v);const j=a.current;s.canCloseOnClick=!0,s.canDrag=!0,j.style.transition="none",e.draggableDirection==="x"?(s.start=$.clientX,s.removalDistance=j.offsetWidth*(e.draggablePercent/100)):(s.start=$.clientY,s.removalDistance=j.offsetHeight*(e.draggablePercent===80?1.5*e.draggablePercent:e.draggablePercent)/100)}},onPointerUp:function($){const{top:j,bottom:z,left:F,right:w}=a.current.getBoundingClientRect();$.nativeEvent.type!=="touchend"&&e.pauseOnHover&&$.clientX>=F&&$.clientX<=w&&$.clientY>=j&&$.clientY<=z?y():E()}};return o&&u&&(T.onMouseEnter=y,e.stacked||(T.onMouseLeave=E)),h&&(T.onClick=$=>{d&&d($),s.canCloseOnClick&&c()}),{playToast:E,pauseToast:y,isRunning:t,preventExitTransition:n,toastRef:a,eventHandlers:T}}function Rc(e){let{delay:t,isRunning:r,closeToast:n,type:i="default",hide:a,className:s,style:o,controlledProgress:u,progress:c,rtl:d,isIn:h,theme:f}=e;const b=a||u&&c===0,E={...o,animationDuration:`${t}ms`,animationPlayState:r?"running":"paused"};u&&(E.transform=`scaleX(${c})`);const y=xe("Toastify__progress-bar",u?"Toastify__progress-bar--controlled":"Toastify__progress-bar--animated",`Toastify__progress-bar-theme--${f}`,`Toastify__progress-bar--${i}`,{"Toastify__progress-bar--rtl":d}),x=te(s)?s({rtl:d,type:i,defaultClassName:y}):xe(y,s),v={[u&&c>=1?"onTransitionEnd":"onAnimationEnd"]:u&&c<1?null:()=>{h&&n()}};return k.createElement("div",{className:"Toastify__progress-bar--wrp","data-hidden":b},k.createElement("div",{className:`Toastify__progress-bar--bg Toastify__progress-bar-theme--${f} Toastify__progress-bar--${i}`}),k.createElement("div",{role:"progressbar","aria-hidden":b?"true":"false","aria-label":"notification timer",className:x,style:E,...v}))}let Lc=1;const gi=()=>""+Lc++;function Vc(e){return e&&(je(e.toastId)||Qe(e.toastId))?e.toastId:gi()}function Ke(e,t){return yi(e,t),t.toastId}function yt(e,t){return{...t,type:t&&t.type||e,toastId:Vc(t)}}function lt(e){return(t,r)=>Ke(t,yt(e,r))}function M(e,t){return Ke(e,yt("default",t))}M.loading=(e,t)=>Ke(e,yt("default",{isLoading:!0,autoClose:!1,closeOnClick:!1,closeButton:!1,draggable:!1,...t})),M.promise=function(e,t,r){let n,{pending:i,error:a,success:s}=t;i&&(n=je(i)?M.loading(i,r):M.loading(i.render,{...r,...i}));const o={isLoading:null,autoClose:null,closeOnClick:null,closeButton:null,draggable:null},u=(d,h,f)=>{if(h==null)return void M.dismiss(n);const b={type:d,...o,...r,data:f},E=je(h)?{render:h}:h;return n?M.update(n,{...b,...E}):M(E.render,{...b,...E}),f},c=te(e)?e():e;return c.then(d=>u("success",s,d)).catch(d=>u("error",a,d)),c},M.success=lt("success"),M.info=lt("info"),M.error=lt("error"),M.warning=lt("warning"),M.warn=M.warning,M.dark=(e,t)=>Ke(e,yt("default",{theme:"dark",...t})),M.dismiss=function(e){(function(t){var r;if(hi()){if(t==null||je(r=t)||Qe(r))Q.forEach(i=>{i.removeToast(t)});else if(t&&("containerId"in t||"id"in t)){var n;(n=Q.get(t.containerId))!=null&&n.removeToast(t.id)||Q.forEach(i=>{i.removeToast(t.id)})}}else Je=Je.filter(i=>t!=null&&i.options.toastId!==t)})(e)},M.clearWaitingQueue=function(e){e===void 0&&(e={}),Q.forEach(t=>{!t.props.limit||e.containerId&&t.id!==e.containerId||t.clearQueue()})},M.isActive=mi,M.update=function(e,t){t===void 0&&(t={});const r=((n,i)=>{var a;let{containerId:s}=i;return(a=Q.get(s||1))==null?void 0:a.toasts.get(n)})(e,t);if(r){const{props:n,content:i}=r,a={delay:100,...n,...t,toastId:t.toastId||e,updateId:gi()};a.toastId!==e&&(a.staleId=e);const s=a.render||i;delete a.render,Ke(s,a)}},M.done=e=>{M.update(e,{progress:1})},M.onChange=function(e){return ar.add(e),()=>{ar.delete(e)}},M.play=e=>bn(!0,e),M.pause=e=>bn(!1,e);const Uc=typeof window<"u"?p.useLayoutEffect:p.useEffect,ct=e=>{let{theme:t,type:r,isLoading:n,...i}=e;return k.createElement("svg",{viewBox:"0 0 24 24",width:"100%",height:"100%",fill:t==="colored"?"currentColor":`var(--toastify-icon-color-${r})`,...i})},Zt={info:function(e){return k.createElement(ct,{...e},k.createElement("path",{d:"M12 0a12 12 0 1012 12A12.013 12.013 0 0012 0zm.25 5a1.5 1.5 0 11-1.5 1.5 1.5 1.5 0 011.5-1.5zm2.25 13.5h-4a1 1 0 010-2h.75a.25.25 0 00.25-.25v-4.5a.25.25 0 00-.25-.25h-.75a1 1 0 010-2h1a2 2 0 012 2v4.75a.25.25 0 00.25.25h.75a1 1 0 110 2z"}))},warning:function(e){return k.createElement(ct,{...e},k.createElement("path",{d:"M23.32 17.191L15.438 2.184C14.728.833 13.416 0 11.996 0c-1.42 0-2.733.833-3.443 2.184L.533 17.448a4.744 4.744 0 000 4.368C1.243 23.167 2.555 24 3.975 24h16.05C22.22 24 24 22.044 24 19.632c0-.904-.251-1.746-.68-2.44zm-9.622 1.46c0 1.033-.724 1.823-1.698 1.823s-1.698-.79-1.698-1.822v-.043c0-1.028.724-1.822 1.698-1.822s1.698.79 1.698 1.822v.043zm.039-12.285l-.84 8.06c-.057.581-.408.943-.897.943-.49 0-.84-.367-.896-.942l-.84-8.065c-.057-.624.25-1.095.779-1.095h1.91c.528.005.84.476.784 1.1z"}))},success:function(e){return k.createElement(ct,{...e},k.createElement("path",{d:"M12 0a12 12 0 1012 12A12.014 12.014 0 0012 0zm6.927 8.2l-6.845 9.289a1.011 1.011 0 01-1.43.188l-4.888-3.908a1 1 0 111.25-1.562l4.076 3.261 6.227-8.451a1 1 0 111.61 1.183z"}))},error:function(e){return k.createElement(ct,{...e},k.createElement("path",{d:"M11.983 0a12.206 12.206 0 00-8.51 3.653A11.8 11.8 0 000 12.207 11.779 11.779 0 0011.8 24h.214A12.111 12.111 0 0024 11.791 11.766 11.766 0 0011.983 0zM10.5 16.542a1.476 1.476 0 011.449-1.53h.027a1.527 1.527 0 011.523 1.47 1.475 1.475 0 01-1.449 1.53h-.027a1.529 1.529 0 01-1.523-1.47zM11 12.5v-6a1 1 0 012 0v6a1 1 0 11-2 0z"}))},spinner:function(){return k.createElement("div",{className:"Toastify__spinner"})}},zc=e=>{const{isRunning:t,preventExitTransition:r,toastRef:n,eventHandlers:i,playToast:a}=kc(e),{closeButton:s,children:o,autoClose:u,onClick:c,type:d,hideProgressBar:h,closeToast:f,transition:b,position:E,className:y,style:x,bodyClassName:v,bodyStyle:T,progressClassName:$,progressStyle:j,updateId:z,role:F,progress:w,rtl:O,toastId:C,deleteToast:B,isIn:I,isLoading:ee,closeOnClick:L,theme:G}=e,ne=xe("Toastify__toast",`Toastify__toast-theme--${G}`,`Toastify__toast--${d}`,{"Toastify__toast--rtl":O},{"Toastify__toast--close-on-click":L}),Le=te(y)?y({rtl:O,position:E,type:d,defaultClassName:ne}):xe(ne,y),se=function(ie){let{theme:Z,type:W,isLoading:X,icon:K}=ie,le=null;const ye={theme:Z,type:W};return K===!1||(te(K)?le=K({...ye,isLoading:X}):p.isValidElement(K)?le=p.cloneElement(K,ye):X?le=Zt.spinner():(nt=>nt in Zt)(W)&&(le=Zt[W](ye))),le}(e),oe=!!w||!u,he={closeToast:f,type:d,theme:G};let me=null;return s===!1||(me=te(s)?s(he):p.isValidElement(s)?p.cloneElement(s,he):function(ie){let{closeToast:Z,theme:W,ariaLabel:X="close"}=ie;return k.createElement("button",{className:`Toastify__close-button Toastify__close-button--${W}`,type:"button",onClick:K=>{K.stopPropagation(),Z(K)},"aria-label":X},k.createElement("svg",{"aria-hidden":"true",viewBox:"0 0 14 16"},k.createElement("path",{fillRule:"evenodd",d:"M7.71 8.23l3.75 3.75-1.48 1.48-3.75-3.75-3.75 3.75L1 11.98l3.75-3.75L1 4.48 2.48 3l3.75 3.75L9.98 3l1.48 1.48-3.75 3.75z"})))}(he)),k.createElement(b,{isIn:I,done:B,position:E,preventExitTransition:r,nodeRef:n,playToast:a},k.createElement("div",{id:C,onClick:c,"data-in":I,className:Le,...i,style:x,ref:n},k.createElement("div",{...I&&{role:F},className:te(v)?v({type:d}):xe("Toastify__toast-body",v),style:T},se!=null&&k.createElement("div",{className:xe("Toastify__toast-icon",{"Toastify--animate-icon Toastify__zoom-enter":!ee})},se),k.createElement("div",null,o)),me,k.createElement(Rc,{...z&&!oe?{key:`pb-${z}`}:{},rtl:O,theme:G,delay:u,isRunning:t,isIn:I,closeToast:f,hide:h,type:d,style:j,className:$,controlledProgress:oe,progress:w||0})))},Dt=function(e,t){return t===void 0&&(t=!1),{enter:`Toastify--animate Toastify__${e}-enter`,exit:`Toastify--animate Toastify__${e}-exit`,appendPosition:t}},Bc=Pt(Dt("bounce",!0));Pt(Dt("slide",!0));Pt(Dt("zoom"));Pt(Dt("flip"));const Hc={position:"top-right",transition:Bc,autoClose:5e3,closeButton:!0,pauseOnHover:!0,pauseOnFocusLoss:!0,draggable:"touch",draggablePercent:80,draggableDirection:"x",role:"alert",theme:"light"};function qc(e){let t={...Hc,...e};const r=e.stacked,[n,i]=p.useState(!0),a=p.useRef(null),{getToastToRender:s,isToastActive:o,count:u}=Mc(t),{className:c,style:d,rtl:h,containerId:f}=t;function b(y){const x=xe("Toastify__toast-container",`Toastify__toast-container--${y}`,{"Toastify__toast-container--rtl":h});return te(c)?c({position:y,rtl:h,defaultClassName:x}):xe(x,dt(c))}function E(){r&&(i(!0),M.play())}return Uc(()=>{if(r){var y;const x=a.current.querySelectorAll('[data-in="true"]'),v=12,T=(y=t.position)==null?void 0:y.includes("top");let $=0,j=0;Array.from(x).reverse().forEach((z,F)=>{const w=z;w.classList.add("Toastify__toast--stacked"),F>0&&(w.dataset.collapsed=`${n}`),w.dataset.pos||(w.dataset.pos=T?"top":"bot");const O=$*(n?.2:1)+(n?0:v*F);w.style.setProperty("--y",`${T?O:-1*O}px`),w.style.setProperty("--g",`${v}`),w.style.setProperty("--s",""+(1-(n?j:0))),$+=w.offsetHeight,j+=.025})}},[n,u,r]),k.createElement("div",{ref:a,className:"Toastify",id:f,onMouseEnter:()=>{r&&(i(!1),M.pause())},onMouseLeave:E},s((y,x)=>{const v=x.length?{...d}:{...d,pointerEvents:"none"};return k.createElement("div",{className:b(y),style:v,key:`container-${y}`},x.map(T=>{let{content:$,props:j}=T;return k.createElement(zc,{...j,stacked:r,collapseAll:E,isIn:o(j.toastId,j.containerId),style:j.style,key:`toast-${j.key}`},$)}))}))}const Gc=()=>{const{width:e}=ji(),t=e<=768,[r,n]=p.useState(!1),[i,a]=p.useState(!1),s=async o=>{n(!0);try{await fetch(Tn+"contact/",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)}).then(u=>{if(!u.ok)throw new Error("Network response was not ok")}),M.success("Formulario enviado con éxito, nos comunicaremos pronto"),a(!0)}catch{M.error("Hubo un error al enviar el formulario")}finally{n(!1)}};return _.jsxs("section",{className:"contact",children:[_.jsxs("div",{className:t?"container-fluid":"container",children:[_.jsx("div",{className:"row",children:_.jsx("h2",{className:"font-weight-bold",children:"Contacto"})}),_.jsxs("div",{className:"row",children:[_.jsxs("div",{className:"col-12 col-md-6 contact-izq text-white p-3",children:[_.jsx("div",{className:"row",children:_.jsx("h3",{className:"font-weight-bold my-3",children:"ESCRÍBENOS"})}),_.jsx("div",{className:"row",children:_.jsx("h5",{className:"my-3",children:"¿Listos para trabajar juntos?"})}),_.jsx("div",{className:"row",children:_.jsx(Ol,{initialValues:{nombre:"",telefono:"",email:"",mensaje:""},validationSchema:fi({nombre:qe().required("El nombre es requerido"),telefono:qe().required("El teléfono es requerido"),email:qe().email("El correo electrónico no es válido").required("El correo electrónico es requerido"),mensaje:qe().required("El mensaje es requerido")}),onSubmit:s,children:_.jsxs(ni,{children:[_.jsxs("div",{className:"form-group",children:[_.jsx("label",{htmlFor:"nombre",children:"Nombre"}),_.jsx(st,{type:"text",className:"form-control",id:"nombre",name:"nombre"}),_.jsx(ot,{name:"nombre"})]}),_.jsxs("div",{className:"form-group",children:[_.jsx("label",{htmlFor:"telefono",children:"Teléfono"}),_.jsx(st,{type:"text",className:"form-control",id:"telefono",name:"telefono"}),_.jsx(ot,{name:"telefono"})]}),_.jsxs("div",{className:"form-group",children:[_.jsx("label",{htmlFor:"email",children:"Correo electrónico"}),_.jsx(st,{type:"email",className:"form-control",id:"email",name:"email"}),_.jsx(ot,{name:"email"})]}),_.jsxs("div",{className:"form-group",children:[_.jsx("label",{htmlFor:"mensaje",children:"Mensaje"}),_.jsx(st,{as:"textarea",className:"form-control",id:"mensaje",name:"mensaje",rows:3}),_.jsx(ot,{name:"mensaje"})]}),_.jsx("br",{}),_.jsx("button",{type:"submit",className:"btn btn-primary",disabled:r,children:r?"Enviando...":"Enviar"})]})})})]}),_.jsxs("div",{className:"col-12 col-md-6 contact-der p-0",children:[_.jsx("br",{}),_.jsx("br",{}),_.jsx("br",{}),_.jsx("div",{className:"row",children:_.jsxs("div",{className:"frecuentes bg-light",children:[_.jsx("br",{}),_.jsx("h3",{className:"font-weight-bold",children:"Preguntas Frecuentes"}),_.jsx("br",{}),_.jsx(Nc,{})]})})]})]})]}),_.jsx(qc,{}),i&&"Nos comunicaremos pronto"]})};function Xc(){const{isVisible:e,ref:t}=Oi("100px");return _.jsx("div",{id:"LazyContact",ref:t,children:e?_.jsx(Gc,{}):null})}export{Xc as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
