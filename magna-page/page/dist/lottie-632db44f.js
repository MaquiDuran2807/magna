import{c as commonjsGlobal,g as getDefaultExportFromCjs}from"./jsx-runtime-c0a91cf1.js";function bind(t,e){return function(){return t.apply(e,arguments)}}const{toString}=Object.prototype,{getPrototypeOf}=Object,kindOf=(t=>e=>{const r=toString.call(e);return t[r]||(t[r]=r.slice(8,-1).toLowerCase())})(Object.create(null)),kindOfTest=t=>(t=t.toLowerCase(),e=>kindOf(e)===t),typeOfTest=t=>e=>typeof e===t,{isArray}=Array,isUndefined=typeOfTest("undefined");function isBuffer(t){return t!==null&&!isUndefined(t)&&t.constructor!==null&&!isUndefined(t.constructor)&&isFunction(t.constructor.isBuffer)&&t.constructor.isBuffer(t)}const isArrayBuffer=kindOfTest("ArrayBuffer");function isArrayBufferView(t){let e;return typeof ArrayBuffer<"u"&&ArrayBuffer.isView?e=ArrayBuffer.isView(t):e=t&&t.buffer&&isArrayBuffer(t.buffer),e}const isString=typeOfTest("string"),isFunction=typeOfTest("function"),isNumber=typeOfTest("number"),isObject=t=>t!==null&&typeof t=="object",isBoolean=t=>t===!0||t===!1,isPlainObject=t=>{if(kindOf(t)!=="object")return!1;const e=getPrototypeOf(t);return(e===null||e===Object.prototype||Object.getPrototypeOf(e)===null)&&!(Symbol.toStringTag in t)&&!(Symbol.iterator in t)},isDate=kindOfTest("Date"),isFile=kindOfTest("File"),isBlob=kindOfTest("Blob"),isFileList=kindOfTest("FileList"),isStream=t=>isObject(t)&&isFunction(t.pipe),isFormData=t=>{let e;return t&&(typeof FormData=="function"&&t instanceof FormData||isFunction(t.append)&&((e=kindOf(t))==="formdata"||e==="object"&&isFunction(t.toString)&&t.toString()==="[object FormData]"))},isURLSearchParams=kindOfTest("URLSearchParams"),trim=t=>t.trim?t.trim():t.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"");function forEach(t,e,{allOwnKeys:r=!1}={}){if(t===null||typeof t>"u")return;let i,s;if(typeof t!="object"&&(t=[t]),isArray(t))for(i=0,s=t.length;i<s;i++)e.call(null,t[i],i,t);else{const n=r?Object.getOwnPropertyNames(t):Object.keys(t),a=n.length;let l;for(i=0;i<a;i++)l=n[i],e.call(null,t[l],l,t)}}function findKey(t,e){e=e.toLowerCase();const r=Object.keys(t);let i=r.length,s;for(;i-- >0;)if(s=r[i],e===s.toLowerCase())return s;return null}const _global=(()=>typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:global)(),isContextDefined=t=>!isUndefined(t)&&t!==_global;function merge(){const{caseless:t}=isContextDefined(this)&&this||{},e={},r=(i,s)=>{const n=t&&findKey(e,s)||s;isPlainObject(e[n])&&isPlainObject(i)?e[n]=merge(e[n],i):isPlainObject(i)?e[n]=merge({},i):isArray(i)?e[n]=i.slice():e[n]=i};for(let i=0,s=arguments.length;i<s;i++)arguments[i]&&forEach(arguments[i],r);return e}const extend=(t,e,r,{allOwnKeys:i}={})=>(forEach(e,(s,n)=>{r&&isFunction(s)?t[n]=bind(s,r):t[n]=s},{allOwnKeys:i}),t),stripBOM=t=>(t.charCodeAt(0)===65279&&(t=t.slice(1)),t),inherits=(t,e,r,i)=>{t.prototype=Object.create(e.prototype,i),t.prototype.constructor=t,Object.defineProperty(t,"super",{value:e.prototype}),r&&Object.assign(t.prototype,r)},toFlatObject=(t,e,r,i)=>{let s,n,a;const l={};if(e=e||{},t==null)return e;do{for(s=Object.getOwnPropertyNames(t),n=s.length;n-- >0;)a=s[n],(!i||i(a,t,e))&&!l[a]&&(e[a]=t[a],l[a]=!0);t=r!==!1&&getPrototypeOf(t)}while(t&&(!r||r(t,e))&&t!==Object.prototype);return e},endsWith=(t,e,r)=>{t=String(t),(r===void 0||r>t.length)&&(r=t.length),r-=e.length;const i=t.indexOf(e,r);return i!==-1&&i===r},toArray=t=>{if(!t)return null;if(isArray(t))return t;let e=t.length;if(!isNumber(e))return null;const r=new Array(e);for(;e-- >0;)r[e]=t[e];return r},isTypedArray=(t=>e=>t&&e instanceof t)(typeof Uint8Array<"u"&&getPrototypeOf(Uint8Array)),forEachEntry=(t,e)=>{const i=(t&&t[Symbol.iterator]).call(t);let s;for(;(s=i.next())&&!s.done;){const n=s.value;e.call(t,n[0],n[1])}},matchAll=(t,e)=>{let r;const i=[];for(;(r=t.exec(e))!==null;)i.push(r);return i},isHTMLForm=kindOfTest("HTMLFormElement"),toCamelCase=t=>t.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,function(r,i,s){return i.toUpperCase()+s}),hasOwnProperty=(({hasOwnProperty:t})=>(e,r)=>t.call(e,r))(Object.prototype),isRegExp=kindOfTest("RegExp"),reduceDescriptors=(t,e)=>{const r=Object.getOwnPropertyDescriptors(t),i={};forEach(r,(s,n)=>{let a;(a=e(s,n,t))!==!1&&(i[n]=a||s)}),Object.defineProperties(t,i)},freezeMethods=t=>{reduceDescriptors(t,(e,r)=>{if(isFunction(t)&&["arguments","caller","callee"].indexOf(r)!==-1)return!1;const i=t[r];if(isFunction(i)){if(e.enumerable=!1,"writable"in e){e.writable=!1;return}e.set||(e.set=()=>{throw Error("Can not rewrite read-only method '"+r+"'")})}})},toObjectSet=(t,e)=>{const r={},i=s=>{s.forEach(n=>{r[n]=!0})};return isArray(t)?i(t):i(String(t).split(e)),r},noop=()=>{},toFiniteNumber=(t,e)=>(t=+t,Number.isFinite(t)?t:e),ALPHA="abcdefghijklmnopqrstuvwxyz",DIGIT="0123456789",ALPHABET={DIGIT,ALPHA,ALPHA_DIGIT:ALPHA+ALPHA.toUpperCase()+DIGIT},generateString=(t=16,e=ALPHABET.ALPHA_DIGIT)=>{let r="";const{length:i}=e;for(;t--;)r+=e[Math.random()*i|0];return r};function isSpecCompliantForm(t){return!!(t&&isFunction(t.append)&&t[Symbol.toStringTag]==="FormData"&&t[Symbol.iterator])}const toJSONObject=t=>{const e=new Array(10),r=(i,s)=>{if(isObject(i)){if(e.indexOf(i)>=0)return;if(!("toJSON"in i)){e[s]=i;const n=isArray(i)?[]:{};return forEach(i,(a,l)=>{const o=r(a,s+1);!isUndefined(o)&&(n[l]=o)}),e[s]=void 0,n}}return i};return r(t,0)},isAsyncFn=kindOfTest("AsyncFunction"),isThenable=t=>t&&(isObject(t)||isFunction(t))&&isFunction(t.then)&&isFunction(t.catch),utils$1={isArray,isArrayBuffer,isBuffer,isFormData,isArrayBufferView,isString,isNumber,isBoolean,isObject,isPlainObject,isUndefined,isDate,isFile,isBlob,isRegExp,isFunction,isStream,isURLSearchParams,isTypedArray,isFileList,forEach,merge,extend,trim,stripBOM,inherits,toFlatObject,kindOf,kindOfTest,endsWith,toArray,forEachEntry,matchAll,isHTMLForm,hasOwnProperty,hasOwnProp:hasOwnProperty,reduceDescriptors,freezeMethods,toObjectSet,toCamelCase,noop,toFiniteNumber,findKey,global:_global,isContextDefined,ALPHABET,generateString,isSpecCompliantForm,toJSONObject,isAsyncFn,isThenable};function AxiosError(t,e,r,i,s){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=new Error().stack,this.message=t,this.name="AxiosError",e&&(this.code=e),r&&(this.config=r),i&&(this.request=i),s&&(this.response=s)}utils$1.inherits(AxiosError,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:utils$1.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});const prototype$1=AxiosError.prototype,descriptors={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach(t=>{descriptors[t]={value:t}});Object.defineProperties(AxiosError,descriptors);Object.defineProperty(prototype$1,"isAxiosError",{value:!0});AxiosError.from=(t,e,r,i,s,n)=>{const a=Object.create(prototype$1);return utils$1.toFlatObject(t,a,function(o){return o!==Error.prototype},l=>l!=="isAxiosError"),AxiosError.call(a,t.message,e,r,i,s),a.cause=t,a.name=t.name,n&&Object.assign(a,n),a};const httpAdapter=null;function isVisitable(t){return utils$1.isPlainObject(t)||utils$1.isArray(t)}function removeBrackets(t){return utils$1.endsWith(t,"[]")?t.slice(0,-2):t}function renderKey(t,e,r){return t?t.concat(e).map(function(s,n){return s=removeBrackets(s),!r&&n?"["+s+"]":s}).join(r?".":""):e}function isFlatArray(t){return utils$1.isArray(t)&&!t.some(isVisitable)}const predicates=utils$1.toFlatObject(utils$1,{},null,function(e){return/^is[A-Z]/.test(e)});function toFormData(t,e,r){if(!utils$1.isObject(t))throw new TypeError("target must be an object");e=e||new FormData,r=utils$1.toFlatObject(r,{metaTokens:!0,dots:!1,indexes:!1},!1,function(u,x){return!utils$1.isUndefined(x[u])});const i=r.metaTokens,s=r.visitor||d,n=r.dots,a=r.indexes,o=(r.Blob||typeof Blob<"u"&&Blob)&&utils$1.isSpecCompliantForm(e);if(!utils$1.isFunction(s))throw new TypeError("visitor must be a function");function h(v){if(v===null)return"";if(utils$1.isDate(v))return v.toISOString();if(!o&&utils$1.isBlob(v))throw new AxiosError("Blob is not supported. Use a Buffer instead.");return utils$1.isArrayBuffer(v)||utils$1.isTypedArray(v)?o&&typeof Blob=="function"?new Blob([v]):Buffer.from(v):v}function d(v,u,x){let c=v;if(v&&!x&&typeof v=="object"){if(utils$1.endsWith(u,"{}"))u=i?u:u.slice(0,-2),v=JSON.stringify(v);else if(utils$1.isArray(v)&&isFlatArray(v)||(utils$1.isFileList(v)||utils$1.endsWith(u,"[]"))&&(c=utils$1.toArray(v)))return u=removeBrackets(u),c.forEach(function(f,y){!(utils$1.isUndefined(f)||f===null)&&e.append(a===!0?renderKey([u],y,n):a===null?u:u+"[]",h(f))}),!1}return isVisitable(v)?!0:(e.append(renderKey(x,u,n),h(v)),!1)}const b=[],p=Object.assign(predicates,{defaultVisitor:d,convertValue:h,isVisitable});function E(v,u){if(!utils$1.isUndefined(v)){if(b.indexOf(v)!==-1)throw Error("Circular reference detected in "+u.join("."));b.push(v),utils$1.forEach(v,function(c,m){(!(utils$1.isUndefined(c)||c===null)&&s.call(e,c,utils$1.isString(m)?m.trim():m,u,p))===!0&&E(c,u?u.concat(m):[m])}),b.pop()}}if(!utils$1.isObject(t))throw new TypeError("data must be an object");return E(t),e}function encode$1(t){const e={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(t).replace(/[!'()~]|%20|%00/g,function(i){return e[i]})}function AxiosURLSearchParams(t,e){this._pairs=[],t&&toFormData(t,this,e)}const prototype=AxiosURLSearchParams.prototype;prototype.append=function(e,r){this._pairs.push([e,r])};prototype.toString=function(e){const r=e?function(i){return e.call(this,i,encode$1)}:encode$1;return this._pairs.map(function(s){return r(s[0])+"="+r(s[1])},"").join("&")};function encode(t){return encodeURIComponent(t).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function buildURL(t,e,r){if(!e)return t;const i=r&&r.encode||encode,s=r&&r.serialize;let n;if(s?n=s(e,r):n=utils$1.isURLSearchParams(e)?e.toString():new AxiosURLSearchParams(e,r).toString(i),n){const a=t.indexOf("#");a!==-1&&(t=t.slice(0,a)),t+=(t.indexOf("?")===-1?"?":"&")+n}return t}class InterceptorManager{constructor(){this.handlers=[]}use(e,r,i){return this.handlers.push({fulfilled:e,rejected:r,synchronous:i?i.synchronous:!1,runWhen:i?i.runWhen:null}),this.handlers.length-1}eject(e){this.handlers[e]&&(this.handlers[e]=null)}clear(){this.handlers&&(this.handlers=[])}forEach(e){utils$1.forEach(this.handlers,function(i){i!==null&&e(i)})}}const InterceptorManager$1=InterceptorManager,transitionalDefaults={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},URLSearchParams$1=typeof URLSearchParams<"u"?URLSearchParams:AxiosURLSearchParams,FormData$1=typeof FormData<"u"?FormData:null,Blob$1=typeof Blob<"u"?Blob:null,platform$1={isBrowser:!0,classes:{URLSearchParams:URLSearchParams$1,FormData:FormData$1,Blob:Blob$1},protocols:["http","https","file","blob","url","data"]},hasBrowserEnv=typeof window<"u"&&typeof document<"u",hasStandardBrowserEnv=(t=>hasBrowserEnv&&["ReactNative","NativeScript","NS"].indexOf(t)<0)(typeof navigator<"u"&&navigator.product),hasStandardBrowserWebWorkerEnv=(()=>typeof WorkerGlobalScope<"u"&&self instanceof WorkerGlobalScope&&typeof self.importScripts=="function")(),utils=Object.freeze(Object.defineProperty({__proto__:null,hasBrowserEnv,hasStandardBrowserEnv,hasStandardBrowserWebWorkerEnv},Symbol.toStringTag,{value:"Module"})),platform={...utils,...platform$1};function toURLEncodedForm(t,e){return toFormData(t,new platform.classes.URLSearchParams,Object.assign({visitor:function(r,i,s,n){return platform.isNode&&utils$1.isBuffer(r)?(this.append(i,r.toString("base64")),!1):n.defaultVisitor.apply(this,arguments)}},e))}function parsePropPath(t){return utils$1.matchAll(/\w+|\[(\w*)]/g,t).map(e=>e[0]==="[]"?"":e[1]||e[0])}function arrayToObject(t){const e={},r=Object.keys(t);let i;const s=r.length;let n;for(i=0;i<s;i++)n=r[i],e[n]=t[n];return e}function formDataToJSON(t){function e(r,i,s,n){let a=r[n++];const l=Number.isFinite(+a),o=n>=r.length;return a=!a&&utils$1.isArray(s)?s.length:a,o?(utils$1.hasOwnProp(s,a)?s[a]=[s[a],i]:s[a]=i,!l):((!s[a]||!utils$1.isObject(s[a]))&&(s[a]=[]),e(r,i,s[a],n)&&utils$1.isArray(s[a])&&(s[a]=arrayToObject(s[a])),!l)}if(utils$1.isFormData(t)&&utils$1.isFunction(t.entries)){const r={};return utils$1.forEachEntry(t,(i,s)=>{e(parsePropPath(i),s,r,0)}),r}return null}function stringifySafely(t,e,r){if(utils$1.isString(t))try{return(e||JSON.parse)(t),utils$1.trim(t)}catch(i){if(i.name!=="SyntaxError")throw i}return(r||JSON.stringify)(t)}const defaults={transitional:transitionalDefaults,adapter:["xhr","http"],transformRequest:[function(e,r){const i=r.getContentType()||"",s=i.indexOf("application/json")>-1,n=utils$1.isObject(e);if(n&&utils$1.isHTMLForm(e)&&(e=new FormData(e)),utils$1.isFormData(e))return s&&s?JSON.stringify(formDataToJSON(e)):e;if(utils$1.isArrayBuffer(e)||utils$1.isBuffer(e)||utils$1.isStream(e)||utils$1.isFile(e)||utils$1.isBlob(e))return e;if(utils$1.isArrayBufferView(e))return e.buffer;if(utils$1.isURLSearchParams(e))return r.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();let l;if(n){if(i.indexOf("application/x-www-form-urlencoded")>-1)return toURLEncodedForm(e,this.formSerializer).toString();if((l=utils$1.isFileList(e))||i.indexOf("multipart/form-data")>-1){const o=this.env&&this.env.FormData;return toFormData(l?{"files[]":e}:e,o&&new o,this.formSerializer)}}return n||s?(r.setContentType("application/json",!1),stringifySafely(e)):e}],transformResponse:[function(e){const r=this.transitional||defaults.transitional,i=r&&r.forcedJSONParsing,s=this.responseType==="json";if(e&&utils$1.isString(e)&&(i&&!this.responseType||s)){const a=!(r&&r.silentJSONParsing)&&s;try{return JSON.parse(e)}catch(l){if(a)throw l.name==="SyntaxError"?AxiosError.from(l,AxiosError.ERR_BAD_RESPONSE,this,null,this.response):l}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:platform.classes.FormData,Blob:platform.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*","Content-Type":void 0}}};utils$1.forEach(["delete","get","head","post","put","patch"],t=>{defaults.headers[t]={}});const defaults$1=defaults,ignoreDuplicateOf=utils$1.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]),parseHeaders=t=>{const e={};let r,i,s;return t&&t.split(`
`).forEach(function(a){s=a.indexOf(":"),r=a.substring(0,s).trim().toLowerCase(),i=a.substring(s+1).trim(),!(!r||e[r]&&ignoreDuplicateOf[r])&&(r==="set-cookie"?e[r]?e[r].push(i):e[r]=[i]:e[r]=e[r]?e[r]+", "+i:i)}),e},$internals=Symbol("internals");function normalizeHeader(t){return t&&String(t).trim().toLowerCase()}function normalizeValue(t){return t===!1||t==null?t:utils$1.isArray(t)?t.map(normalizeValue):String(t)}function parseTokens(t){const e=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;let i;for(;i=r.exec(t);)e[i[1]]=i[2];return e}const isValidHeaderName=t=>/^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(t.trim());function matchHeaderValue(t,e,r,i,s){if(utils$1.isFunction(i))return i.call(this,e,r);if(s&&(e=r),!!utils$1.isString(e)){if(utils$1.isString(i))return e.indexOf(i)!==-1;if(utils$1.isRegExp(i))return i.test(e)}}function formatHeader(t){return t.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(e,r,i)=>r.toUpperCase()+i)}function buildAccessors(t,e){const r=utils$1.toCamelCase(" "+e);["get","set","has"].forEach(i=>{Object.defineProperty(t,i+r,{value:function(s,n,a){return this[i].call(this,e,s,n,a)},configurable:!0})})}class AxiosHeaders{constructor(e){e&&this.set(e)}set(e,r,i){const s=this;function n(l,o,h){const d=normalizeHeader(o);if(!d)throw new Error("header name must be a non-empty string");const b=utils$1.findKey(s,d);(!b||s[b]===void 0||h===!0||h===void 0&&s[b]!==!1)&&(s[b||o]=normalizeValue(l))}const a=(l,o)=>utils$1.forEach(l,(h,d)=>n(h,d,o));return utils$1.isPlainObject(e)||e instanceof this.constructor?a(e,r):utils$1.isString(e)&&(e=e.trim())&&!isValidHeaderName(e)?a(parseHeaders(e),r):e!=null&&n(r,e,i),this}get(e,r){if(e=normalizeHeader(e),e){const i=utils$1.findKey(this,e);if(i){const s=this[i];if(!r)return s;if(r===!0)return parseTokens(s);if(utils$1.isFunction(r))return r.call(this,s,i);if(utils$1.isRegExp(r))return r.exec(s);throw new TypeError("parser must be boolean|regexp|function")}}}has(e,r){if(e=normalizeHeader(e),e){const i=utils$1.findKey(this,e);return!!(i&&this[i]!==void 0&&(!r||matchHeaderValue(this,this[i],i,r)))}return!1}delete(e,r){const i=this;let s=!1;function n(a){if(a=normalizeHeader(a),a){const l=utils$1.findKey(i,a);l&&(!r||matchHeaderValue(i,i[l],l,r))&&(delete i[l],s=!0)}}return utils$1.isArray(e)?e.forEach(n):n(e),s}clear(e){const r=Object.keys(this);let i=r.length,s=!1;for(;i--;){const n=r[i];(!e||matchHeaderValue(this,this[n],n,e,!0))&&(delete this[n],s=!0)}return s}normalize(e){const r=this,i={};return utils$1.forEach(this,(s,n)=>{const a=utils$1.findKey(i,n);if(a){r[a]=normalizeValue(s),delete r[n];return}const l=e?formatHeader(n):String(n).trim();l!==n&&delete r[n],r[l]=normalizeValue(s),i[l]=!0}),this}concat(...e){return this.constructor.concat(this,...e)}toJSON(e){const r=Object.create(null);return utils$1.forEach(this,(i,s)=>{i!=null&&i!==!1&&(r[s]=e&&utils$1.isArray(i)?i.join(", "):i)}),r}[Symbol.iterator](){return Object.entries(this.toJSON())[Symbol.iterator]()}toString(){return Object.entries(this.toJSON()).map(([e,r])=>e+": "+r).join(`
`)}get[Symbol.toStringTag](){return"AxiosHeaders"}static from(e){return e instanceof this?e:new this(e)}static concat(e,...r){const i=new this(e);return r.forEach(s=>i.set(s)),i}static accessor(e){const i=(this[$internals]=this[$internals]={accessors:{}}).accessors,s=this.prototype;function n(a){const l=normalizeHeader(a);i[l]||(buildAccessors(s,a),i[l]=!0)}return utils$1.isArray(e)?e.forEach(n):n(e),this}}AxiosHeaders.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]);utils$1.reduceDescriptors(AxiosHeaders.prototype,({value:t},e)=>{let r=e[0].toUpperCase()+e.slice(1);return{get:()=>t,set(i){this[r]=i}}});utils$1.freezeMethods(AxiosHeaders);const AxiosHeaders$1=AxiosHeaders;function transformData(t,e){const r=this||defaults$1,i=e||r,s=AxiosHeaders$1.from(i.headers);let n=i.data;return utils$1.forEach(t,function(l){n=l.call(r,n,s.normalize(),e?e.status:void 0)}),s.normalize(),n}function isCancel(t){return!!(t&&t.__CANCEL__)}function CanceledError(t,e,r){AxiosError.call(this,t??"canceled",AxiosError.ERR_CANCELED,e,r),this.name="CanceledError"}utils$1.inherits(CanceledError,AxiosError,{__CANCEL__:!0});function settle(t,e,r){const i=r.config.validateStatus;!r.status||!i||i(r.status)?t(r):e(new AxiosError("Request failed with status code "+r.status,[AxiosError.ERR_BAD_REQUEST,AxiosError.ERR_BAD_RESPONSE][Math.floor(r.status/100)-4],r.config,r.request,r))}const cookies=platform.hasStandardBrowserEnv?{write(t,e,r,i,s,n){const a=[t+"="+encodeURIComponent(e)];utils$1.isNumber(r)&&a.push("expires="+new Date(r).toGMTString()),utils$1.isString(i)&&a.push("path="+i),utils$1.isString(s)&&a.push("domain="+s),n===!0&&a.push("secure"),document.cookie=a.join("; ")},read(t){const e=document.cookie.match(new RegExp("(^|;\\s*)("+t+")=([^;]*)"));return e?decodeURIComponent(e[3]):null},remove(t){this.write(t,"",Date.now()-864e5)}}:{write(){},read(){return null},remove(){}};function isAbsoluteURL(t){return/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)}function combineURLs(t,e){return e?t.replace(/\/+$/,"")+"/"+e.replace(/^\/+/,""):t}function buildFullPath(t,e){return t&&!isAbsoluteURL(e)?combineURLs(t,e):e}const isURLSameOrigin=platform.hasStandardBrowserEnv?function(){const e=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");let i;function s(n){let a=n;return e&&(r.setAttribute("href",a),a=r.href),r.setAttribute("href",a),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:r.pathname.charAt(0)==="/"?r.pathname:"/"+r.pathname}}return i=s(window.location.href),function(a){const l=utils$1.isString(a)?s(a):a;return l.protocol===i.protocol&&l.host===i.host}}():function(){return function(){return!0}}();function parseProtocol(t){const e=/^([-+\w]{1,25})(:?\/\/|:)/.exec(t);return e&&e[1]||""}function speedometer(t,e){t=t||10;const r=new Array(t),i=new Array(t);let s=0,n=0,a;return e=e!==void 0?e:1e3,function(o){const h=Date.now(),d=i[n];a||(a=h),r[s]=o,i[s]=h;let b=n,p=0;for(;b!==s;)p+=r[b++],b=b%t;if(s=(s+1)%t,s===n&&(n=(n+1)%t),h-a<e)return;const E=d&&h-d;return E?Math.round(p*1e3/E):void 0}}function progressEventReducer(t,e){let r=0;const i=speedometer(50,250);return s=>{const n=s.loaded,a=s.lengthComputable?s.total:void 0,l=n-r,o=i(l),h=n<=a;r=n;const d={loaded:n,total:a,progress:a?n/a:void 0,bytes:l,rate:o||void 0,estimated:o&&a&&h?(a-n)/o:void 0,event:s};d[e?"download":"upload"]=!0,t(d)}}const isXHRAdapterSupported=typeof XMLHttpRequest<"u",xhrAdapter=isXHRAdapterSupported&&function(t){return new Promise(function(r,i){let s=t.data;const n=AxiosHeaders$1.from(t.headers).normalize();let{responseType:a,withXSRFToken:l}=t,o;function h(){t.cancelToken&&t.cancelToken.unsubscribe(o),t.signal&&t.signal.removeEventListener("abort",o)}let d;if(utils$1.isFormData(s)){if(platform.hasStandardBrowserEnv||platform.hasStandardBrowserWebWorkerEnv)n.setContentType(!1);else if((d=n.getContentType())!==!1){const[u,...x]=d?d.split(";").map(c=>c.trim()).filter(Boolean):[];n.setContentType([u||"multipart/form-data",...x].join("; "))}}let b=new XMLHttpRequest;if(t.auth){const u=t.auth.username||"",x=t.auth.password?unescape(encodeURIComponent(t.auth.password)):"";n.set("Authorization","Basic "+btoa(u+":"+x))}const p=buildFullPath(t.baseURL,t.url);b.open(t.method.toUpperCase(),buildURL(p,t.params,t.paramsSerializer),!0),b.timeout=t.timeout;function E(){if(!b)return;const u=AxiosHeaders$1.from("getAllResponseHeaders"in b&&b.getAllResponseHeaders()),c={data:!a||a==="text"||a==="json"?b.responseText:b.response,status:b.status,statusText:b.statusText,headers:u,config:t,request:b};settle(function(f){r(f),h()},function(f){i(f),h()},c),b=null}if("onloadend"in b?b.onloadend=E:b.onreadystatechange=function(){!b||b.readyState!==4||b.status===0&&!(b.responseURL&&b.responseURL.indexOf("file:")===0)||setTimeout(E)},b.onabort=function(){b&&(i(new AxiosError("Request aborted",AxiosError.ECONNABORTED,t,b)),b=null)},b.onerror=function(){i(new AxiosError("Network Error",AxiosError.ERR_NETWORK,t,b)),b=null},b.ontimeout=function(){let x=t.timeout?"timeout of "+t.timeout+"ms exceeded":"timeout exceeded";const c=t.transitional||transitionalDefaults;t.timeoutErrorMessage&&(x=t.timeoutErrorMessage),i(new AxiosError(x,c.clarifyTimeoutError?AxiosError.ETIMEDOUT:AxiosError.ECONNABORTED,t,b)),b=null},platform.hasStandardBrowserEnv&&(l&&utils$1.isFunction(l)&&(l=l(t)),l||l!==!1&&isURLSameOrigin(p))){const u=t.xsrfHeaderName&&t.xsrfCookieName&&cookies.read(t.xsrfCookieName);u&&n.set(t.xsrfHeaderName,u)}s===void 0&&n.setContentType(null),"setRequestHeader"in b&&utils$1.forEach(n.toJSON(),function(x,c){b.setRequestHeader(c,x)}),utils$1.isUndefined(t.withCredentials)||(b.withCredentials=!!t.withCredentials),a&&a!=="json"&&(b.responseType=t.responseType),typeof t.onDownloadProgress=="function"&&b.addEventListener("progress",progressEventReducer(t.onDownloadProgress,!0)),typeof t.onUploadProgress=="function"&&b.upload&&b.upload.addEventListener("progress",progressEventReducer(t.onUploadProgress)),(t.cancelToken||t.signal)&&(o=u=>{b&&(i(!u||u.type?new CanceledError(null,t,b):u),b.abort(),b=null)},t.cancelToken&&t.cancelToken.subscribe(o),t.signal&&(t.signal.aborted?o():t.signal.addEventListener("abort",o)));const v=parseProtocol(p);if(v&&platform.protocols.indexOf(v)===-1){i(new AxiosError("Unsupported protocol "+v+":",AxiosError.ERR_BAD_REQUEST,t));return}b.send(s||null)})},knownAdapters={http:httpAdapter,xhr:xhrAdapter};utils$1.forEach(knownAdapters,(t,e)=>{if(t){try{Object.defineProperty(t,"name",{value:e})}catch{}Object.defineProperty(t,"adapterName",{value:e})}});const renderReason=t=>`- ${t}`,isResolvedHandle=t=>utils$1.isFunction(t)||t===null||t===!1,adapters={getAdapter:t=>{t=utils$1.isArray(t)?t:[t];const{length:e}=t;let r,i;const s={};for(let n=0;n<e;n++){r=t[n];let a;if(i=r,!isResolvedHandle(r)&&(i=knownAdapters[(a=String(r)).toLowerCase()],i===void 0))throw new AxiosError(`Unknown adapter '${a}'`);if(i)break;s[a||"#"+n]=i}if(!i){const n=Object.entries(s).map(([l,o])=>`adapter ${l} `+(o===!1?"is not supported by the environment":"is not available in the build"));let a=e?n.length>1?`since :
`+n.map(renderReason).join(`
`):" "+renderReason(n[0]):"as no adapter specified";throw new AxiosError("There is no suitable adapter to dispatch the request "+a,"ERR_NOT_SUPPORT")}return i},adapters:knownAdapters};function throwIfCancellationRequested(t){if(t.cancelToken&&t.cancelToken.throwIfRequested(),t.signal&&t.signal.aborted)throw new CanceledError(null,t)}function dispatchRequest(t){return throwIfCancellationRequested(t),t.headers=AxiosHeaders$1.from(t.headers),t.data=transformData.call(t,t.transformRequest),["post","put","patch"].indexOf(t.method)!==-1&&t.headers.setContentType("application/x-www-form-urlencoded",!1),adapters.getAdapter(t.adapter||defaults$1.adapter)(t).then(function(i){return throwIfCancellationRequested(t),i.data=transformData.call(t,t.transformResponse,i),i.headers=AxiosHeaders$1.from(i.headers),i},function(i){return isCancel(i)||(throwIfCancellationRequested(t),i&&i.response&&(i.response.data=transformData.call(t,t.transformResponse,i.response),i.response.headers=AxiosHeaders$1.from(i.response.headers))),Promise.reject(i)})}const headersToObject=t=>t instanceof AxiosHeaders$1?t.toJSON():t;function mergeConfig(t,e){e=e||{};const r={};function i(h,d,b){return utils$1.isPlainObject(h)&&utils$1.isPlainObject(d)?utils$1.merge.call({caseless:b},h,d):utils$1.isPlainObject(d)?utils$1.merge({},d):utils$1.isArray(d)?d.slice():d}function s(h,d,b){if(utils$1.isUndefined(d)){if(!utils$1.isUndefined(h))return i(void 0,h,b)}else return i(h,d,b)}function n(h,d){if(!utils$1.isUndefined(d))return i(void 0,d)}function a(h,d){if(utils$1.isUndefined(d)){if(!utils$1.isUndefined(h))return i(void 0,h)}else return i(void 0,d)}function l(h,d,b){if(b in e)return i(h,d);if(b in t)return i(void 0,h)}const o={url:n,method:n,data:n,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,withXSRFToken:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l,headers:(h,d)=>s(headersToObject(h),headersToObject(d),!0)};return utils$1.forEach(Object.keys(Object.assign({},t,e)),function(d){const b=o[d]||s,p=b(t[d],e[d],d);utils$1.isUndefined(p)&&b!==l||(r[d]=p)}),r}const VERSION="1.6.2",validators$1={};["object","boolean","number","function","string","symbol"].forEach((t,e)=>{validators$1[t]=function(i){return typeof i===t||"a"+(e<1?"n ":" ")+t}});const deprecatedWarnings={};validators$1.transitional=function(e,r,i){function s(n,a){return"[Axios v"+VERSION+"] Transitional option '"+n+"'"+a+(i?". "+i:"")}return(n,a,l)=>{if(e===!1)throw new AxiosError(s(a," has been removed"+(r?" in "+r:"")),AxiosError.ERR_DEPRECATED);return r&&!deprecatedWarnings[a]&&(deprecatedWarnings[a]=!0,console.warn(s(a," has been deprecated since v"+r+" and will be removed in the near future"))),e?e(n,a,l):!0}};function assertOptions(t,e,r){if(typeof t!="object")throw new AxiosError("options must be an object",AxiosError.ERR_BAD_OPTION_VALUE);const i=Object.keys(t);let s=i.length;for(;s-- >0;){const n=i[s],a=e[n];if(a){const l=t[n],o=l===void 0||a(l,n,t);if(o!==!0)throw new AxiosError("option "+n+" must be "+o,AxiosError.ERR_BAD_OPTION_VALUE);continue}if(r!==!0)throw new AxiosError("Unknown option "+n,AxiosError.ERR_BAD_OPTION)}}const validator={assertOptions,validators:validators$1},validators=validator.validators;class Axios{constructor(e){this.defaults=e,this.interceptors={request:new InterceptorManager$1,response:new InterceptorManager$1}}request(e,r){typeof e=="string"?(r=r||{},r.url=e):r=e||{},r=mergeConfig(this.defaults,r);const{transitional:i,paramsSerializer:s,headers:n}=r;i!==void 0&&validator.assertOptions(i,{silentJSONParsing:validators.transitional(validators.boolean),forcedJSONParsing:validators.transitional(validators.boolean),clarifyTimeoutError:validators.transitional(validators.boolean)},!1),s!=null&&(utils$1.isFunction(s)?r.paramsSerializer={serialize:s}:validator.assertOptions(s,{encode:validators.function,serialize:validators.function},!0)),r.method=(r.method||this.defaults.method||"get").toLowerCase();let a=n&&utils$1.merge(n.common,n[r.method]);n&&utils$1.forEach(["delete","get","head","post","put","patch","common"],v=>{delete n[v]}),r.headers=AxiosHeaders$1.concat(a,n);const l=[];let o=!0;this.interceptors.request.forEach(function(u){typeof u.runWhen=="function"&&u.runWhen(r)===!1||(o=o&&u.synchronous,l.unshift(u.fulfilled,u.rejected))});const h=[];this.interceptors.response.forEach(function(u){h.push(u.fulfilled,u.rejected)});let d,b=0,p;if(!o){const v=[dispatchRequest.bind(this),void 0];for(v.unshift.apply(v,l),v.push.apply(v,h),p=v.length,d=Promise.resolve(r);b<p;)d=d.then(v[b++],v[b++]);return d}p=l.length;let E=r;for(b=0;b<p;){const v=l[b++],u=l[b++];try{E=v(E)}catch(x){u.call(this,x);break}}try{d=dispatchRequest.call(this,E)}catch(v){return Promise.reject(v)}for(b=0,p=h.length;b<p;)d=d.then(h[b++],h[b++]);return d}getUri(e){e=mergeConfig(this.defaults,e);const r=buildFullPath(e.baseURL,e.url);return buildURL(r,e.params,e.paramsSerializer)}}utils$1.forEach(["delete","get","head","options"],function(e){Axios.prototype[e]=function(r,i){return this.request(mergeConfig(i||{},{method:e,url:r,data:(i||{}).data}))}});utils$1.forEach(["post","put","patch"],function(e){function r(i){return function(n,a,l){return this.request(mergeConfig(l||{},{method:e,headers:i?{"Content-Type":"multipart/form-data"}:{},url:n,data:a}))}}Axios.prototype[e]=r(),Axios.prototype[e+"Form"]=r(!0)});const Axios$1=Axios;class CancelToken{constructor(e){if(typeof e!="function")throw new TypeError("executor must be a function.");let r;this.promise=new Promise(function(n){r=n});const i=this;this.promise.then(s=>{if(!i._listeners)return;let n=i._listeners.length;for(;n-- >0;)i._listeners[n](s);i._listeners=null}),this.promise.then=s=>{let n;const a=new Promise(l=>{i.subscribe(l),n=l}).then(s);return a.cancel=function(){i.unsubscribe(n)},a},e(function(n,a,l){i.reason||(i.reason=new CanceledError(n,a,l),r(i.reason))})}throwIfRequested(){if(this.reason)throw this.reason}subscribe(e){if(this.reason){e(this.reason);return}this._listeners?this._listeners.push(e):this._listeners=[e]}unsubscribe(e){if(!this._listeners)return;const r=this._listeners.indexOf(e);r!==-1&&this._listeners.splice(r,1)}static source(){let e;return{token:new CancelToken(function(s){e=s}),cancel:e}}}const CancelToken$1=CancelToken;function spread(t){return function(r){return t.apply(null,r)}}function isAxiosError(t){return utils$1.isObject(t)&&t.isAxiosError===!0}const HttpStatusCode={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(HttpStatusCode).forEach(([t,e])=>{HttpStatusCode[e]=t});const HttpStatusCode$1=HttpStatusCode;function createInstance(t){const e=new Axios$1(t),r=bind(Axios$1.prototype.request,e);return utils$1.extend(r,Axios$1.prototype,e,{allOwnKeys:!0}),utils$1.extend(r,e,null,{allOwnKeys:!0}),r.create=function(s){return createInstance(mergeConfig(t,s))},r}const axios=createInstance(defaults$1);axios.Axios=Axios$1;axios.CanceledError=CanceledError;axios.CancelToken=CancelToken$1;axios.isCancel=isCancel;axios.VERSION=VERSION;axios.toFormData=toFormData;axios.AxiosError=AxiosError;axios.Cancel=axios.CanceledError;axios.all=function(e){return Promise.all(e)};axios.spread=spread;axios.isAxiosError=isAxiosError;axios.mergeConfig=mergeConfig;axios.AxiosHeaders=AxiosHeaders$1;axios.formToJSON=t=>formDataToJSON(utils$1.isHTMLForm(t)?new FormData(t):t);axios.getAdapter=adapters.getAdapter;axios.HttpStatusCode=HttpStatusCode$1;axios.default=axios;const axios$1=axios,APIURL="http://127.0.0.1:8000/",apiClient=axios$1.create({baseURL:APIURL,headers:{"Content-type":"application/json"}});apiClient.interceptors.request.use(async t=>{const e=localStorage.getItem("token");return e&&(t.headers.Authorization=`JWT ${e}`),t});var lottie$1={exports:{}};(function(module,exports){typeof navigator<"u"&&function(t,e){module.exports=e()}(commonjsGlobal,function(){var svgNS="http://www.w3.org/2000/svg",locationHref="",_useWebWorker=!1,initialDefaultFrame=-999999,setWebWorker=function(e){_useWebWorker=!!e},getWebWorker=function(){return _useWebWorker},setLocationHref=function(e){locationHref=e},getLocationHref=function(){return locationHref};function createTag(t){return document.createElement(t)}function extendPrototype(t,e){var r,i=t.length,s;for(r=0;r<i;r+=1){s=t[r].prototype;for(var n in s)Object.prototype.hasOwnProperty.call(s,n)&&(e.prototype[n]=s[n])}}function getDescriptor(t,e){return Object.getOwnPropertyDescriptor(t,e)}function createProxyFunction(t){function e(){}return e.prototype=t,e}var audioControllerFactory=function(){function t(e){this.audios=[],this.audioFactory=e,this._volume=1,this._isMuted=!1}return t.prototype={addAudio:function(r){this.audios.push(r)},pause:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].pause()},resume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].resume()},setRate:function(r){var i,s=this.audios.length;for(i=0;i<s;i+=1)this.audios[i].setRate(r)},createAudio:function(r){return this.audioFactory?this.audioFactory(r):window.Howl?new window.Howl({src:[r]}):{isPlaying:!1,play:function(){this.isPlaying=!0},seek:function(){this.isPlaying=!1},playing:function(){},rate:function(){},setVolume:function(){}}},setAudioFactory:function(r){this.audioFactory=r},setVolume:function(r){this._volume=r,this._updateVolume()},mute:function(){this._isMuted=!0,this._updateVolume()},unmute:function(){this._isMuted=!1,this._updateVolume()},getVolume:function(){return this._volume},_updateVolume:function(){var r,i=this.audios.length;for(r=0;r<i;r+=1)this.audios[r].volume(this._volume*(this._isMuted?0:1))}},function(){return new t}}(),createTypedArray=function(){function t(r,i){var s=0,n=[],a;switch(r){case"int16":case"uint8c":a=1;break;default:a=1.1;break}for(s=0;s<i;s+=1)n.push(a);return n}function e(r,i){return r==="float32"?new Float32Array(i):r==="int16"?new Int16Array(i):r==="uint8c"?new Uint8ClampedArray(i):t(r,i)}return typeof Uint8ClampedArray=="function"&&typeof Float32Array=="function"?e:t}();function createSizedArray(t){return Array.apply(null,{length:t})}function _typeof$6(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$6=function(r){return typeof r}:_typeof$6=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$6(t)}var subframeEnabled=!0,expressionsPlugin=null,expressionsInterfaces=null,idPrefix$1="",isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent),bmPow=Math.pow,bmSqrt=Math.sqrt,bmFloor=Math.floor,bmMax=Math.max,bmMin=Math.min,BMMath={};(function(){var t=["abs","acos","acosh","asin","asinh","atan","atanh","atan2","ceil","cbrt","expm1","clz32","cos","cosh","exp","floor","fround","hypot","imul","log","log1p","log2","log10","max","min","pow","random","round","sign","sin","sinh","sqrt","tan","tanh","trunc","E","LN10","LN2","LOG10E","LOG2E","PI","SQRT1_2","SQRT2"],e,r=t.length;for(e=0;e<r;e+=1)BMMath[t[e]]=Math[t[e]]})(),BMMath.random=Math.random,BMMath.abs=function(t){var e=_typeof$6(t);if(e==="object"&&t.length){var r=createSizedArray(t.length),i,s=t.length;for(i=0;i<s;i+=1)r[i]=Math.abs(t[i]);return r}return Math.abs(t)};var defaultCurveSegments=150,degToRads=Math.PI/180,roundCorner=.5519;function styleDiv(t){t.style.position="absolute",t.style.top=0,t.style.left=0,t.style.display="block",t.style.transformOrigin="0 0",t.style.webkitTransformOrigin="0 0",t.style.backfaceVisibility="visible",t.style.webkitBackfaceVisibility="visible",t.style.transformStyle="preserve-3d",t.style.webkitTransformStyle="preserve-3d",t.style.mozTransformStyle="preserve-3d"}function BMEnterFrameEvent(t,e,r,i){this.type=t,this.currentTime=e,this.totalTime=r,this.direction=i<0?-1:1}function BMCompleteEvent(t,e){this.type=t,this.direction=e<0?-1:1}function BMCompleteLoopEvent(t,e,r,i){this.type=t,this.currentLoop=r,this.totalLoops=e,this.direction=i<0?-1:1}function BMSegmentStartEvent(t,e,r){this.type=t,this.firstFrame=e,this.totalFrames=r}function BMDestroyEvent(t,e){this.type=t,this.target=e}function BMRenderFrameErrorEvent(t,e){this.type="renderFrameError",this.nativeError=t,this.currentTime=e}function BMConfigErrorEvent(t){this.type="configError",this.nativeError=t}var createElementID=function(){var t=0;return function(){return t+=1,idPrefix$1+"__lottie_element_"+t}}();function HSVtoRGB(t,e,r){var i,s,n,a,l,o,h,d;switch(a=Math.floor(t*6),l=t*6-a,o=r*(1-e),h=r*(1-l*e),d=r*(1-(1-l)*e),a%6){case 0:i=r,s=d,n=o;break;case 1:i=h,s=r,n=o;break;case 2:i=o,s=r,n=d;break;case 3:i=o,s=h,n=r;break;case 4:i=d,s=o,n=r;break;case 5:i=r,s=o,n=h;break}return[i,s,n]}function RGBtoHSV(t,e,r){var i=Math.max(t,e,r),s=Math.min(t,e,r),n=i-s,a,l=i===0?0:n/i,o=i/255;switch(i){case s:a=0;break;case t:a=e-r+n*(e<r?6:0),a/=6*n;break;case e:a=r-t+n*2,a/=6*n;break;case r:a=t-e+n*4,a/=6*n;break}return[a,l,o]}function addSaturationToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[1]+=e,r[1]>1?r[1]=1:r[1]<=0&&(r[1]=0),HSVtoRGB(r[0],r[1],r[2])}function addBrightnessToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[2]+=e,r[2]>1?r[2]=1:r[2]<0&&(r[2]=0),HSVtoRGB(r[0],r[1],r[2])}function addHueToRGB(t,e){var r=RGBtoHSV(t[0]*255,t[1]*255,t[2]*255);return r[0]+=e/360,r[0]>1?r[0]-=1:r[0]<0&&(r[0]+=1),HSVtoRGB(r[0],r[1],r[2])}var rgbToHex=function(){var t=[],e,r;for(e=0;e<256;e+=1)r=e.toString(16),t[e]=r.length===1?"0"+r:r;return function(i,s,n){return i<0&&(i=0),s<0&&(s=0),n<0&&(n=0),"#"+t[i]+t[s]+t[n]}}(),setSubframeEnabled=function(e){subframeEnabled=!!e},getSubframeEnabled=function(){return subframeEnabled},setExpressionsPlugin=function(e){expressionsPlugin=e},getExpressionsPlugin=function(){return expressionsPlugin},setExpressionInterfaces=function(e){expressionsInterfaces=e},getExpressionInterfaces=function(){return expressionsInterfaces},setDefaultCurveSegments=function(e){defaultCurveSegments=e},getDefaultCurveSegments=function(){return defaultCurveSegments},setIdPrefix=function(e){idPrefix$1=e};function createNS(t){return document.createElementNS(svgNS,t)}function _typeof$5(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$5=function(r){return typeof r}:_typeof$5=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$5(t)}var dataManager=function(){var t=1,e=[],r,i,s={onmessage:function(){},postMessage:function(E){r({data:E})}},n={postMessage:function(E){s.onmessage({data:E})}};function a(p){if(window.Worker&&window.Blob&&getWebWorker()){var E=new Blob(["var _workerSelf = self; self.onmessage = ",p.toString()],{type:"text/javascript"}),v=URL.createObjectURL(E);return new Worker(v)}return r=p,s}function l(){i||(i=a(function(E){function v(){function x(I,C){var _,g,S=I.length,w,M,V,G;for(g=0;g<S;g+=1)if(_=I[g],"ks"in _&&!_.completed){if(_.completed=!0,_.hasMask){var z=_.masksProperties;for(M=z.length,w=0;w<M;w+=1)if(z[w].pt.k.i)P(z[w].pt.k);else for(G=z[w].pt.k.length,V=0;V<G;V+=1)z[w].pt.k[V].s&&P(z[w].pt.k[V].s[0]),z[w].pt.k[V].e&&P(z[w].pt.k[V].e[0])}_.ty===0?(_.layers=f(_.refId,C),x(_.layers,C)):_.ty===4?y(_.shapes):_.ty===5&&D(_)}}function c(I,C){if(I){var _=0,g=I.length;for(_=0;_<g;_+=1)I[_].t===1&&(I[_].data.layers=f(I[_].data.refId,C),x(I[_].data.layers,C))}}function m(I,C){for(var _=0,g=C.length;_<g;){if(C[_].id===I)return C[_];_+=1}return null}function f(I,C){var _=m(I,C);return _?_.layers.__used?JSON.parse(JSON.stringify(_.layers)):(_.layers.__used=!0,_.layers):null}function y(I){var C,_=I.length,g,S;for(C=_-1;C>=0;C-=1)if(I[C].ty==="sh")if(I[C].ks.k.i)P(I[C].ks.k);else for(S=I[C].ks.k.length,g=0;g<S;g+=1)I[C].ks.k[g].s&&P(I[C].ks.k[g].s[0]),I[C].ks.k[g].e&&P(I[C].ks.k[g].e[0]);else I[C].ty==="gr"&&y(I[C].it)}function P(I){var C,_=I.i.length;for(C=0;C<_;C+=1)I.i[C][0]+=I.v[C][0],I.i[C][1]+=I.v[C][1],I.o[C][0]+=I.v[C][0],I.o[C][1]+=I.v[C][1]}function A(I,C){var _=C?C.split("."):[100,100,100];return I[0]>_[0]?!0:_[0]>I[0]?!1:I[1]>_[1]?!0:_[1]>I[1]?!1:I[2]>_[2]?!0:_[2]>I[2]?!1:null}var T=function(){var I=[4,4,14];function C(g){var S=g.t.d;g.t.d={k:[{s:S,t:0}]}}function _(g){var S,w=g.length;for(S=0;S<w;S+=1)g[S].ty===5&&C(g[S])}return function(g){if(A(I,g.v)&&(_(g.layers),g.assets)){var S,w=g.assets.length;for(S=0;S<w;S+=1)g.assets[S].layers&&_(g.assets[S].layers)}}}(),F=function(){var I=[4,7,99];return function(C){if(C.chars&&!A(I,C.v)){var _,g=C.chars.length;for(_=0;_<g;_+=1){var S=C.chars[_];S.data&&S.data.shapes&&(y(S.data.shapes),S.data.ip=0,S.data.op=99999,S.data.st=0,S.data.sr=1,S.data.ks={p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0}},C.chars[_].t||(S.data.shapes.push({ty:"no"}),S.data.shapes[0].it.push({p:{k:[0,0],a:0},s:{k:[100,100],a:0},a:{k:[0,0],a:0},r:{k:0,a:0},o:{k:100,a:0},sk:{k:0,a:0},sa:{k:0,a:0},ty:"tr"})))}}}}(),k=function(){var I=[5,7,15];function C(g){var S=g.t.p;typeof S.a=="number"&&(S.a={a:0,k:S.a}),typeof S.p=="number"&&(S.p={a:0,k:S.p}),typeof S.r=="number"&&(S.r={a:0,k:S.r})}function _(g){var S,w=g.length;for(S=0;S<w;S+=1)g[S].ty===5&&C(g[S])}return function(g){if(A(I,g.v)&&(_(g.layers),g.assets)){var S,w=g.assets.length;for(S=0;S<w;S+=1)g.assets[S].layers&&_(g.assets[S].layers)}}}(),O=function(){var I=[4,1,9];function C(g){var S,w=g.length,M,V;for(S=0;S<w;S+=1)if(g[S].ty==="gr")C(g[S].it);else if(g[S].ty==="fl"||g[S].ty==="st")if(g[S].c.k&&g[S].c.k[0].i)for(V=g[S].c.k.length,M=0;M<V;M+=1)g[S].c.k[M].s&&(g[S].c.k[M].s[0]/=255,g[S].c.k[M].s[1]/=255,g[S].c.k[M].s[2]/=255,g[S].c.k[M].s[3]/=255),g[S].c.k[M].e&&(g[S].c.k[M].e[0]/=255,g[S].c.k[M].e[1]/=255,g[S].c.k[M].e[2]/=255,g[S].c.k[M].e[3]/=255);else g[S].c.k[0]/=255,g[S].c.k[1]/=255,g[S].c.k[2]/=255,g[S].c.k[3]/=255}function _(g){var S,w=g.length;for(S=0;S<w;S+=1)g[S].ty===4&&C(g[S].shapes)}return function(g){if(A(I,g.v)&&(_(g.layers),g.assets)){var S,w=g.assets.length;for(S=0;S<w;S+=1)g.assets[S].layers&&_(g.assets[S].layers)}}}(),L=function(){var I=[4,4,18];function C(g){var S,w=g.length,M,V;for(S=w-1;S>=0;S-=1)if(g[S].ty==="sh")if(g[S].ks.k.i)g[S].ks.k.c=g[S].closed;else for(V=g[S].ks.k.length,M=0;M<V;M+=1)g[S].ks.k[M].s&&(g[S].ks.k[M].s[0].c=g[S].closed),g[S].ks.k[M].e&&(g[S].ks.k[M].e[0].c=g[S].closed);else g[S].ty==="gr"&&C(g[S].it)}function _(g){var S,w,M=g.length,V,G,z,H;for(w=0;w<M;w+=1){if(S=g[w],S.hasMask){var $=S.masksProperties;for(G=$.length,V=0;V<G;V+=1)if($[V].pt.k.i)$[V].pt.k.c=$[V].cl;else for(H=$[V].pt.k.length,z=0;z<H;z+=1)$[V].pt.k[z].s&&($[V].pt.k[z].s[0].c=$[V].cl),$[V].pt.k[z].e&&($[V].pt.k[z].e[0].c=$[V].cl)}S.ty===4&&C(S.shapes)}}return function(g){if(A(I,g.v)&&(_(g.layers),g.assets)){var S,w=g.assets.length;for(S=0;S<w;S+=1)g.assets[S].layers&&_(g.assets[S].layers)}}}();function R(I){I.__complete||(O(I),T(I),F(I),k(I),L(I),x(I.layers,I.assets),c(I.chars,I.assets),I.__complete=!0)}function D(I){I.t.a.length===0&&"m"in I.t.p}var B={};return B.completeData=R,B.checkColors=O,B.checkChars=F,B.checkPathProperties=k,B.checkShapes=L,B.completeLayers=x,B}if(n.dataManager||(n.dataManager=v()),n.assetLoader||(n.assetLoader=function(){function x(m){var f=m.getResponseHeader("content-type");return f&&m.responseType==="json"&&f.indexOf("json")!==-1||m.response&&_typeof$5(m.response)==="object"?m.response:m.response&&typeof m.response=="string"?JSON.parse(m.response):m.responseText?JSON.parse(m.responseText):null}function c(m,f,y,P){var A,T=new XMLHttpRequest;try{T.responseType="json"}catch{}T.onreadystatechange=function(){if(T.readyState===4)if(T.status===200)A=x(T),y(A);else try{A=x(T),y(A)}catch(F){P&&P(F)}};try{T.open(["G","E","T"].join(""),m,!0)}catch{T.open(["G","E","T"].join(""),f+"/"+m,!0)}T.send()}return{load:c}}()),E.data.type==="loadAnimation")n.assetLoader.load(E.data.path,E.data.fullPath,function(x){n.dataManager.completeData(x),n.postMessage({id:E.data.id,payload:x,status:"success"})},function(){n.postMessage({id:E.data.id,status:"error"})});else if(E.data.type==="complete"){var u=E.data.animation;n.dataManager.completeData(u),n.postMessage({id:E.data.id,payload:u,status:"success"})}else E.data.type==="loadData"&&n.assetLoader.load(E.data.path,E.data.fullPath,function(x){n.postMessage({id:E.data.id,payload:x,status:"success"})},function(){n.postMessage({id:E.data.id,status:"error"})})}),i.onmessage=function(p){var E=p.data,v=E.id,u=e[v];e[v]=null,E.status==="success"?u.onComplete(E.payload):u.onError&&u.onError()})}function o(p,E){t+=1;var v="processId_"+t;return e[v]={onComplete:p,onError:E},v}function h(p,E,v){l();var u=o(E,v);i.postMessage({type:"loadAnimation",path:p,fullPath:window.location.origin+window.location.pathname,id:u})}function d(p,E,v){l();var u=o(E,v);i.postMessage({type:"loadData",path:p,fullPath:window.location.origin+window.location.pathname,id:u})}function b(p,E,v){l();var u=o(E,v);i.postMessage({type:"complete",animation:p,id:u})}return{loadAnimation:h,loadData:d,completeAnimation:b}}(),ImagePreloader=function(){var t=function(){var c=createTag("canvas");c.width=1,c.height=1;var m=c.getContext("2d");return m.fillStyle="rgba(0,0,0,0)",m.fillRect(0,0,1,1),c}();function e(){this.loadedAssets+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function r(){this.loadedFootagesCount+=1,this.loadedAssets===this.totalImages&&this.loadedFootagesCount===this.totalFootages&&this.imagesLoadedCb&&this.imagesLoadedCb(null)}function i(c,m,f){var y="";if(c.e)y=c.p;else if(m){var P=c.p;P.indexOf("images/")!==-1&&(P=P.split("/")[1]),y=m+P}else y=f,y+=c.u?c.u:"",y+=c.p;return y}function s(c){var m=0,f=setInterval((function(){var y=c.getBBox();(y.width||m>500)&&(this._imageLoaded(),clearInterval(f)),m+=1}).bind(this),50)}function n(c){var m=i(c,this.assetsPath,this.path),f=createNS("image");isSafari?this.testImageLoaded(f):f.addEventListener("load",this._imageLoaded,!1),f.addEventListener("error",(function(){y.img=t,this._imageLoaded()}).bind(this),!1),f.setAttributeNS("http://www.w3.org/1999/xlink","href",m),this._elementHelper.append?this._elementHelper.append(f):this._elementHelper.appendChild(f);var y={img:f,assetData:c};return y}function a(c){var m=i(c,this.assetsPath,this.path),f=createTag("img");f.crossOrigin="anonymous",f.addEventListener("load",this._imageLoaded,!1),f.addEventListener("error",(function(){y.img=t,this._imageLoaded()}).bind(this),!1),f.src=m;var y={img:f,assetData:c};return y}function l(c){var m={assetData:c},f=i(c,this.assetsPath,this.path);return dataManager.loadData(f,(function(y){m.img=y,this._footageLoaded()}).bind(this),(function(){m.img={},this._footageLoaded()}).bind(this)),m}function o(c,m){this.imagesLoadedCb=m;var f,y=c.length;for(f=0;f<y;f+=1)c[f].layers||(!c[f].t||c[f].t==="seq"?(this.totalImages+=1,this.images.push(this._createImageData(c[f]))):c[f].t===3&&(this.totalFootages+=1,this.images.push(this.createFootageData(c[f]))))}function h(c){this.path=c||""}function d(c){this.assetsPath=c||""}function b(c){for(var m=0,f=this.images.length;m<f;){if(this.images[m].assetData===c)return this.images[m].img;m+=1}return null}function p(){this.imagesLoadedCb=null,this.images.length=0}function E(){return this.totalImages===this.loadedAssets}function v(){return this.totalFootages===this.loadedFootagesCount}function u(c,m){c==="svg"?(this._elementHelper=m,this._createImageData=this.createImageData.bind(this)):this._createImageData=this.createImgData.bind(this)}function x(){this._imageLoaded=e.bind(this),this._footageLoaded=r.bind(this),this.testImageLoaded=s.bind(this),this.createFootageData=l.bind(this),this.assetsPath="",this.path="",this.totalImages=0,this.totalFootages=0,this.loadedAssets=0,this.loadedFootagesCount=0,this.imagesLoadedCb=null,this.images=[]}return x.prototype={loadAssets:o,setAssetsPath:d,setPath:h,loadedImages:E,loadedFootages:v,destroy:p,getAsset:b,createImgData:a,createImageData:n,imageLoaded:e,footageLoaded:r,setCacheType:u},x}();function BaseEvent(){}BaseEvent.prototype={triggerEvent:function(e,r){if(this._cbs[e])for(var i=this._cbs[e],s=0;s<i.length;s+=1)i[s](r)},addEventListener:function(e,r){return this._cbs[e]||(this._cbs[e]=[]),this._cbs[e].push(r),(function(){this.removeEventListener(e,r)}).bind(this)},removeEventListener:function(e,r){if(!r)this._cbs[e]=null;else if(this._cbs[e]){for(var i=0,s=this._cbs[e].length;i<s;)this._cbs[e][i]===r&&(this._cbs[e].splice(i,1),i-=1,s-=1),i+=1;this._cbs[e].length||(this._cbs[e]=null)}}};var markerParser=function(){function t(e){for(var r=e.split(`\r
`),i={},s,n=0,a=0;a<r.length;a+=1)s=r[a].split(":"),s.length===2&&(i[s[0]]=s[1].trim(),n+=1);if(n===0)throw new Error;return i}return function(e){for(var r=[],i=0;i<e.length;i+=1){var s=e[i],n={time:s.tm,duration:s.dr};try{n.payload=JSON.parse(e[i].cm)}catch{try{n.payload=t(e[i].cm)}catch{n.payload={name:e[i].cm}}}r.push(n)}return r}}(),ProjectInterface=function(){function t(e){this.compositions.push(e)}return function(){function e(r){for(var i=0,s=this.compositions.length;i<s;){if(this.compositions[i].data&&this.compositions[i].data.nm===r)return this.compositions[i].prepareFrame&&this.compositions[i].data.xt&&this.compositions[i].prepareFrame(this.currentFrame),this.compositions[i].compInterface;i+=1}return null}return e.compositions=[],e.currentFrame=0,e.registerComposition=t,e}}(),renderers={},registerRenderer=function(e,r){renderers[e]=r};function getRenderer(t){return renderers[t]}function getRegisteredRenderer(){if(renderers.canvas)return"canvas";for(var t in renderers)if(renderers[t])return t;return""}function _typeof$4(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$4=function(r){return typeof r}:_typeof$4=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$4(t)}var AnimationItem=function(){this._cbs=[],this.name="",this.path="",this.isLoaded=!1,this.currentFrame=0,this.currentRawFrame=0,this.firstFrame=0,this.totalFrames=0,this.frameRate=0,this.frameMult=0,this.playSpeed=1,this.playDirection=1,this.playCount=0,this.animationData={},this.assets=[],this.isPaused=!0,this.autoplay=!1,this.loop=!0,this.renderer=null,this.animationID=createElementID(),this.assetsPath="",this.timeCompleted=0,this.segmentPos=0,this.isSubframeEnabled=getSubframeEnabled(),this.segments=[],this._idle=!0,this._completedLoop=!1,this.projectInterface=ProjectInterface(),this.imagePreloader=new ImagePreloader,this.audioController=audioControllerFactory(),this.markers=[],this.configAnimation=this.configAnimation.bind(this),this.onSetupError=this.onSetupError.bind(this),this.onSegmentComplete=this.onSegmentComplete.bind(this),this.drawnFrameEvent=new BMEnterFrameEvent("drawnFrame",0,0,0),this.expressionsPlugin=getExpressionsPlugin()};extendPrototype([BaseEvent],AnimationItem),AnimationItem.prototype.setParams=function(t){(t.wrapper||t.container)&&(this.wrapper=t.wrapper||t.container);var e="svg";t.animType?e=t.animType:t.renderer&&(e=t.renderer);var r=getRenderer(e);this.renderer=new r(this,t.rendererSettings),this.imagePreloader.setCacheType(e,this.renderer.globalData.defs),this.renderer.setProjectInterface(this.projectInterface),this.animType=e,t.loop===""||t.loop===null||t.loop===void 0||t.loop===!0?this.loop=!0:t.loop===!1?this.loop=!1:this.loop=parseInt(t.loop,10),this.autoplay="autoplay"in t?t.autoplay:!0,this.name=t.name?t.name:"",this.autoloadSegments=Object.prototype.hasOwnProperty.call(t,"autoloadSegments")?t.autoloadSegments:!0,this.assetsPath=t.assetsPath,this.initialSegment=t.initialSegment,t.audioFactory&&this.audioController.setAudioFactory(t.audioFactory),t.animationData?this.setupAnimation(t.animationData):t.path&&(t.path.lastIndexOf("\\")!==-1?this.path=t.path.substr(0,t.path.lastIndexOf("\\")+1):this.path=t.path.substr(0,t.path.lastIndexOf("/")+1),this.fileName=t.path.substr(t.path.lastIndexOf("/")+1),this.fileName=this.fileName.substr(0,this.fileName.lastIndexOf(".json")),dataManager.loadAnimation(t.path,this.configAnimation,this.onSetupError))},AnimationItem.prototype.onSetupError=function(){this.trigger("data_failed")},AnimationItem.prototype.setupAnimation=function(t){dataManager.completeAnimation(t,this.configAnimation)},AnimationItem.prototype.setData=function(t,e){e&&_typeof$4(e)!=="object"&&(e=JSON.parse(e));var r={wrapper:t,animationData:e},i=t.attributes;r.path=i.getNamedItem("data-animation-path")?i.getNamedItem("data-animation-path").value:i.getNamedItem("data-bm-path")?i.getNamedItem("data-bm-path").value:i.getNamedItem("bm-path")?i.getNamedItem("bm-path").value:"",r.animType=i.getNamedItem("data-anim-type")?i.getNamedItem("data-anim-type").value:i.getNamedItem("data-bm-type")?i.getNamedItem("data-bm-type").value:i.getNamedItem("bm-type")?i.getNamedItem("bm-type").value:i.getNamedItem("data-bm-renderer")?i.getNamedItem("data-bm-renderer").value:i.getNamedItem("bm-renderer")?i.getNamedItem("bm-renderer").value:getRegisteredRenderer()||"canvas";var s=i.getNamedItem("data-anim-loop")?i.getNamedItem("data-anim-loop").value:i.getNamedItem("data-bm-loop")?i.getNamedItem("data-bm-loop").value:i.getNamedItem("bm-loop")?i.getNamedItem("bm-loop").value:"";s==="false"?r.loop=!1:s==="true"?r.loop=!0:s!==""&&(r.loop=parseInt(s,10));var n=i.getNamedItem("data-anim-autoplay")?i.getNamedItem("data-anim-autoplay").value:i.getNamedItem("data-bm-autoplay")?i.getNamedItem("data-bm-autoplay").value:i.getNamedItem("bm-autoplay")?i.getNamedItem("bm-autoplay").value:!0;r.autoplay=n!=="false",r.name=i.getNamedItem("data-name")?i.getNamedItem("data-name").value:i.getNamedItem("data-bm-name")?i.getNamedItem("data-bm-name").value:i.getNamedItem("bm-name")?i.getNamedItem("bm-name").value:"";var a=i.getNamedItem("data-anim-prerender")?i.getNamedItem("data-anim-prerender").value:i.getNamedItem("data-bm-prerender")?i.getNamedItem("data-bm-prerender").value:i.getNamedItem("bm-prerender")?i.getNamedItem("bm-prerender").value:"";a==="false"&&(r.prerender=!1),r.path?this.setParams(r):this.trigger("destroy")},AnimationItem.prototype.includeLayers=function(t){t.op>this.animationData.op&&(this.animationData.op=t.op,this.totalFrames=Math.floor(t.op-this.animationData.ip));var e=this.animationData.layers,r,i=e.length,s=t.layers,n,a=s.length;for(n=0;n<a;n+=1)for(r=0;r<i;){if(e[r].id===s[n].id){e[r]=s[n];break}r+=1}if((t.chars||t.fonts)&&(this.renderer.globalData.fontManager.addChars(t.chars),this.renderer.globalData.fontManager.addFonts(t.fonts,this.renderer.globalData.defs)),t.assets)for(i=t.assets.length,r=0;r<i;r+=1)this.animationData.assets.push(t.assets[r]);this.animationData.__complete=!1,dataManager.completeAnimation(this.animationData,this.onSegmentComplete)},AnimationItem.prototype.onSegmentComplete=function(t){this.animationData=t;var e=getExpressionsPlugin();e&&e.initExpressions(this),this.loadNextSegment()},AnimationItem.prototype.loadNextSegment=function(){var t=this.animationData.segments;if(!t||t.length===0||!this.autoloadSegments){this.trigger("data_ready"),this.timeCompleted=this.totalFrames;return}var e=t.shift();this.timeCompleted=e.time*this.frameRate;var r=this.path+this.fileName+"_"+this.segmentPos+".json";this.segmentPos+=1,dataManager.loadData(r,this.includeLayers.bind(this),(function(){this.trigger("data_failed")}).bind(this))},AnimationItem.prototype.loadSegments=function(){var t=this.animationData.segments;t||(this.timeCompleted=this.totalFrames),this.loadNextSegment()},AnimationItem.prototype.imagesLoaded=function(){this.trigger("loaded_images"),this.checkLoaded()},AnimationItem.prototype.preloadImages=function(){this.imagePreloader.setAssetsPath(this.assetsPath),this.imagePreloader.setPath(this.path),this.imagePreloader.loadAssets(this.animationData.assets,this.imagesLoaded.bind(this))},AnimationItem.prototype.configAnimation=function(t){if(this.renderer)try{this.animationData=t,this.initialSegment?(this.totalFrames=Math.floor(this.initialSegment[1]-this.initialSegment[0]),this.firstFrame=Math.round(this.initialSegment[0])):(this.totalFrames=Math.floor(this.animationData.op-this.animationData.ip),this.firstFrame=Math.round(this.animationData.ip)),this.renderer.configAnimation(t),t.assets||(t.assets=[]),this.assets=this.animationData.assets,this.frameRate=this.animationData.fr,this.frameMult=this.animationData.fr/1e3,this.renderer.searchExtraCompositions(t.assets),this.markers=markerParser(t.markers||[]),this.trigger("config_ready"),this.preloadImages(),this.loadSegments(),this.updaFrameModifier(),this.waitForFontsLoaded(),this.isPaused&&this.audioController.pause()}catch(e){this.triggerConfigError(e)}},AnimationItem.prototype.waitForFontsLoaded=function(){this.renderer&&(this.renderer.globalData.fontManager.isLoaded?this.checkLoaded():setTimeout(this.waitForFontsLoaded.bind(this),20))},AnimationItem.prototype.checkLoaded=function(){if(!this.isLoaded&&this.renderer.globalData.fontManager.isLoaded&&(this.imagePreloader.loadedImages()||this.renderer.rendererType!=="canvas")&&this.imagePreloader.loadedFootages()){this.isLoaded=!0;var t=getExpressionsPlugin();t&&t.initExpressions(this),this.renderer.initItems(),setTimeout((function(){this.trigger("DOMLoaded")}).bind(this),0),this.gotoFrame(),this.autoplay&&this.play()}},AnimationItem.prototype.resize=function(t,e){var r=typeof t=="number"?t:void 0,i=typeof e=="number"?e:void 0;this.renderer.updateContainerSize(r,i)},AnimationItem.prototype.setSubframe=function(t){this.isSubframeEnabled=!!t},AnimationItem.prototype.gotoFrame=function(){this.currentFrame=this.isSubframeEnabled?this.currentRawFrame:~~this.currentRawFrame,this.timeCompleted!==this.totalFrames&&this.currentFrame>this.timeCompleted&&(this.currentFrame=this.timeCompleted),this.trigger("enterFrame"),this.renderFrame(),this.trigger("drawnFrame")},AnimationItem.prototype.renderFrame=function(){if(!(this.isLoaded===!1||!this.renderer))try{this.expressionsPlugin&&this.expressionsPlugin.resetFrame(),this.renderer.renderFrame(this.currentFrame+this.firstFrame)}catch(t){this.triggerRenderFrameError(t)}},AnimationItem.prototype.play=function(t){t&&this.name!==t||this.isPaused===!0&&(this.isPaused=!1,this.trigger("_play"),this.audioController.resume(),this._idle&&(this._idle=!1,this.trigger("_active")))},AnimationItem.prototype.pause=function(t){t&&this.name!==t||this.isPaused===!1&&(this.isPaused=!0,this.trigger("_pause"),this._idle=!0,this.trigger("_idle"),this.audioController.pause())},AnimationItem.prototype.togglePause=function(t){t&&this.name!==t||(this.isPaused===!0?this.play():this.pause())},AnimationItem.prototype.stop=function(t){t&&this.name!==t||(this.pause(),this.playCount=0,this._completedLoop=!1,this.setCurrentRawFrameValue(0))},AnimationItem.prototype.getMarkerData=function(t){for(var e,r=0;r<this.markers.length;r+=1)if(e=this.markers[r],e.payload&&e.payload.name===t)return e;return null},AnimationItem.prototype.goToAndStop=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&this.goToAndStop(s.time,!0)}else e?this.setCurrentRawFrameValue(t):this.setCurrentRawFrameValue(t*this.frameModifier);this.pause()}},AnimationItem.prototype.goToAndPlay=function(t,e,r){if(!(r&&this.name!==r)){var i=Number(t);if(isNaN(i)){var s=this.getMarkerData(t);s&&(s.duration?this.playSegments([s.time,s.time+s.duration],!0):this.goToAndStop(s.time,!0))}else this.goToAndStop(i,e,r);this.play()}},AnimationItem.prototype.advanceTime=function(t){if(!(this.isPaused===!0||this.isLoaded===!1)){var e=this.currentRawFrame+t*this.frameModifier,r=!1;e>=this.totalFrames-1&&this.frameModifier>0?!this.loop||this.playCount===this.loop?this.checkSegments(e>this.totalFrames?e%this.totalFrames:0)||(r=!0,e=this.totalFrames-1):e>=this.totalFrames?(this.playCount+=1,this.checkSegments(e%this.totalFrames)||(this.setCurrentRawFrameValue(e%this.totalFrames),this._completedLoop=!0,this.trigger("loopComplete"))):this.setCurrentRawFrameValue(e):e<0?this.checkSegments(e%this.totalFrames)||(this.loop&&!(this.playCount--<=0&&this.loop!==!0)?(this.setCurrentRawFrameValue(this.totalFrames+e%this.totalFrames),this._completedLoop?this.trigger("loopComplete"):this._completedLoop=!0):(r=!0,e=0)):this.setCurrentRawFrameValue(e),r&&(this.setCurrentRawFrameValue(e),this.pause(),this.trigger("complete"))}},AnimationItem.prototype.adjustSegment=function(t,e){this.playCount=0,t[1]<t[0]?(this.frameModifier>0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(-1)),this.totalFrames=t[0]-t[1],this.timeCompleted=this.totalFrames,this.firstFrame=t[1],this.setCurrentRawFrameValue(this.totalFrames-.001-e)):t[1]>t[0]&&(this.frameModifier<0&&(this.playSpeed<0?this.setSpeed(-this.playSpeed):this.setDirection(1)),this.totalFrames=t[1]-t[0],this.timeCompleted=this.totalFrames,this.firstFrame=t[0],this.setCurrentRawFrameValue(.001+e)),this.trigger("segmentStart")},AnimationItem.prototype.setSegment=function(t,e){var r=-1;this.isPaused&&(this.currentRawFrame+this.firstFrame<t?r=t:this.currentRawFrame+this.firstFrame>e&&(r=e-t)),this.firstFrame=t,this.totalFrames=e-t,this.timeCompleted=this.totalFrames,r!==-1&&this.goToAndStop(r,!0)},AnimationItem.prototype.playSegments=function(t,e){if(e&&(this.segments.length=0),_typeof$4(t[0])==="object"){var r,i=t.length;for(r=0;r<i;r+=1)this.segments.push(t[r])}else this.segments.push(t);this.segments.length&&e&&this.adjustSegment(this.segments.shift(),0),this.isPaused&&this.play()},AnimationItem.prototype.resetSegments=function(t){this.segments.length=0,this.segments.push([this.animationData.ip,this.animationData.op]),t&&this.checkSegments(0)},AnimationItem.prototype.checkSegments=function(t){return this.segments.length?(this.adjustSegment(this.segments.shift(),t),!0):!1},AnimationItem.prototype.destroy=function(t){t&&this.name!==t||!this.renderer||(this.renderer.destroy(),this.imagePreloader.destroy(),this.trigger("destroy"),this._cbs=null,this.onEnterFrame=null,this.onLoopComplete=null,this.onComplete=null,this.onSegmentStart=null,this.onDestroy=null,this.renderer=null,this.expressionsPlugin=null,this.imagePreloader=null,this.projectInterface=null)},AnimationItem.prototype.setCurrentRawFrameValue=function(t){this.currentRawFrame=t,this.gotoFrame()},AnimationItem.prototype.setSpeed=function(t){this.playSpeed=t,this.updaFrameModifier()},AnimationItem.prototype.setDirection=function(t){this.playDirection=t<0?-1:1,this.updaFrameModifier()},AnimationItem.prototype.setLoop=function(t){this.loop=t},AnimationItem.prototype.setVolume=function(t,e){e&&this.name!==e||this.audioController.setVolume(t)},AnimationItem.prototype.getVolume=function(){return this.audioController.getVolume()},AnimationItem.prototype.mute=function(t){t&&this.name!==t||this.audioController.mute()},AnimationItem.prototype.unmute=function(t){t&&this.name!==t||this.audioController.unmute()},AnimationItem.prototype.updaFrameModifier=function(){this.frameModifier=this.frameMult*this.playSpeed*this.playDirection,this.audioController.setRate(this.playSpeed*this.playDirection)},AnimationItem.prototype.getPath=function(){return this.path},AnimationItem.prototype.getAssetsPath=function(t){var e="";if(t.e)e=t.p;else if(this.assetsPath){var r=t.p;r.indexOf("images/")!==-1&&(r=r.split("/")[1]),e=this.assetsPath+r}else e=this.path,e+=t.u?t.u:"",e+=t.p;return e},AnimationItem.prototype.getAssetData=function(t){for(var e=0,r=this.assets.length;e<r;){if(t===this.assets[e].id)return this.assets[e];e+=1}return null},AnimationItem.prototype.hide=function(){this.renderer.hide()},AnimationItem.prototype.show=function(){this.renderer.show()},AnimationItem.prototype.getDuration=function(t){return t?this.totalFrames:this.totalFrames/this.frameRate},AnimationItem.prototype.updateDocumentData=function(t,e,r){try{var i=this.renderer.getElementByPath(t);i.updateDocumentData(e,r)}catch{}},AnimationItem.prototype.trigger=function(t){if(this._cbs&&this._cbs[t])switch(t){case"enterFrame":this.triggerEvent(t,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameModifier));break;case"drawnFrame":this.drawnFrameEvent.currentTime=this.currentFrame,this.drawnFrameEvent.totalTime=this.totalFrames,this.drawnFrameEvent.direction=this.frameModifier,this.triggerEvent(t,this.drawnFrameEvent);break;case"loopComplete":this.triggerEvent(t,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult));break;case"complete":this.triggerEvent(t,new BMCompleteEvent(t,this.frameMult));break;case"segmentStart":this.triggerEvent(t,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames));break;case"destroy":this.triggerEvent(t,new BMDestroyEvent(t,this));break;default:this.triggerEvent(t)}t==="enterFrame"&&this.onEnterFrame&&this.onEnterFrame.call(this,new BMEnterFrameEvent(t,this.currentFrame,this.totalFrames,this.frameMult)),t==="loopComplete"&&this.onLoopComplete&&this.onLoopComplete.call(this,new BMCompleteLoopEvent(t,this.loop,this.playCount,this.frameMult)),t==="complete"&&this.onComplete&&this.onComplete.call(this,new BMCompleteEvent(t,this.frameMult)),t==="segmentStart"&&this.onSegmentStart&&this.onSegmentStart.call(this,new BMSegmentStartEvent(t,this.firstFrame,this.totalFrames)),t==="destroy"&&this.onDestroy&&this.onDestroy.call(this,new BMDestroyEvent(t,this))},AnimationItem.prototype.triggerRenderFrameError=function(t){var e=new BMRenderFrameErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)},AnimationItem.prototype.triggerConfigError=function(t){var e=new BMConfigErrorEvent(t,this.currentFrame);this.triggerEvent("error",e),this.onError&&this.onError.call(this,e)};var animationManager=function(){var t={},e=[],r=0,i=0,s=0,n=!0,a=!1;function l(C){for(var _=0,g=C.target;_<i;)e[_].animation===g&&(e.splice(_,1),_-=1,i-=1,g.isPaused||b()),_+=1}function o(C,_){if(!C)return null;for(var g=0;g<i;){if(e[g].elem===C&&e[g].elem!==null)return e[g].animation;g+=1}var S=new AnimationItem;return p(S,C),S.setData(C,_),S}function h(){var C,_=e.length,g=[];for(C=0;C<_;C+=1)g.push(e[C].animation);return g}function d(){s+=1,O()}function b(){s-=1}function p(C,_){C.addEventListener("destroy",l),C.addEventListener("_active",d),C.addEventListener("_idle",b),e.push({elem:_,animation:C}),i+=1}function E(C){var _=new AnimationItem;return p(_,null),_.setParams(C),_}function v(C,_){var g;for(g=0;g<i;g+=1)e[g].animation.setSpeed(C,_)}function u(C,_){var g;for(g=0;g<i;g+=1)e[g].animation.setDirection(C,_)}function x(C){var _;for(_=0;_<i;_+=1)e[_].animation.play(C)}function c(C){var _=C-r,g;for(g=0;g<i;g+=1)e[g].animation.advanceTime(_);r=C,s&&!a?window.requestAnimationFrame(c):n=!0}function m(C){r=C,window.requestAnimationFrame(c)}function f(C){var _;for(_=0;_<i;_+=1)e[_].animation.pause(C)}function y(C,_,g){var S;for(S=0;S<i;S+=1)e[S].animation.goToAndStop(C,_,g)}function P(C){var _;for(_=0;_<i;_+=1)e[_].animation.stop(C)}function A(C){var _;for(_=0;_<i;_+=1)e[_].animation.togglePause(C)}function T(C){var _;for(_=i-1;_>=0;_-=1)e[_].animation.destroy(C)}function F(C,_,g){var S=[].concat([].slice.call(document.getElementsByClassName("lottie")),[].slice.call(document.getElementsByClassName("bodymovin"))),w,M=S.length;for(w=0;w<M;w+=1)g&&S[w].setAttribute("data-bm-type",g),o(S[w],C);if(_&&M===0){g||(g="svg");var V=document.getElementsByTagName("body")[0];V.innerText="";var G=createTag("div");G.style.width="100%",G.style.height="100%",G.setAttribute("data-bm-type",g),V.appendChild(G),o(G,C)}}function k(){var C;for(C=0;C<i;C+=1)e[C].animation.resize()}function O(){!a&&s&&n&&(window.requestAnimationFrame(m),n=!1)}function L(){a=!0}function R(){a=!1,O()}function D(C,_){var g;for(g=0;g<i;g+=1)e[g].animation.setVolume(C,_)}function B(C){var _;for(_=0;_<i;_+=1)e[_].animation.mute(C)}function I(C){var _;for(_=0;_<i;_+=1)e[_].animation.unmute(C)}return t.registerAnimation=o,t.loadAnimation=E,t.setSpeed=v,t.setDirection=u,t.play=x,t.pause=f,t.stop=P,t.togglePause=A,t.searchAnimations=F,t.resize=k,t.goToAndStop=y,t.destroy=T,t.freeze=L,t.unfreeze=R,t.setVolume=D,t.mute=B,t.unmute=I,t.getRegisteredAnimations=h,t}(),BezierFactory=function(){var t={};t.getBezierEasing=r;var e={};function r(m,f,y,P,A){var T=A||("bez_"+m+"_"+f+"_"+y+"_"+P).replace(/\./g,"p");if(e[T])return e[T];var F=new c([m,f,y,P]);return e[T]=F,F}var i=4,s=.001,n=1e-7,a=10,l=11,o=1/(l-1),h=typeof Float32Array=="function";function d(m,f){return 1-3*f+3*m}function b(m,f){return 3*f-6*m}function p(m){return 3*m}function E(m,f,y){return((d(f,y)*m+b(f,y))*m+p(f))*m}function v(m,f,y){return 3*d(f,y)*m*m+2*b(f,y)*m+p(f)}function u(m,f,y,P,A){var T,F,k=0;do F=f+(y-f)/2,T=E(F,P,A)-m,T>0?y=F:f=F;while(Math.abs(T)>n&&++k<a);return F}function x(m,f,y,P){for(var A=0;A<i;++A){var T=v(f,y,P);if(T===0)return f;var F=E(f,y,P)-m;f-=F/T}return f}function c(m){this._p=m,this._mSampleValues=h?new Float32Array(l):new Array(l),this._precomputed=!1,this.get=this.get.bind(this)}return c.prototype={get:function(f){var y=this._p[0],P=this._p[1],A=this._p[2],T=this._p[3];return this._precomputed||this._precompute(),y===P&&A===T?f:f===0?0:f===1?1:E(this._getTForX(f),P,T)},_precompute:function(){var f=this._p[0],y=this._p[1],P=this._p[2],A=this._p[3];this._precomputed=!0,(f!==y||P!==A)&&this._calcSampleValues()},_calcSampleValues:function(){for(var f=this._p[0],y=this._p[2],P=0;P<l;++P)this._mSampleValues[P]=E(P*o,f,y)},_getTForX:function(f){for(var y=this._p[0],P=this._p[2],A=this._mSampleValues,T=0,F=1,k=l-1;F!==k&&A[F]<=f;++F)T+=o;--F;var O=(f-A[F])/(A[F+1]-A[F]),L=T+O*o,R=v(L,y,P);return R>=s?x(f,L,y,P):R===0?L:u(f,T,T+o,y,P)}},t}(),pooling=function(){function t(e){return e.concat(createSizedArray(e.length))}return{double:t}}(),poolFactory=function(){return function(t,e,r){var i=0,s=t,n=createSizedArray(s),a={newElement:l,release:o};function l(){var h;return i?(i-=1,h=n[i]):h=e(),h}function o(h){i===s&&(n=pooling.double(n),s*=2),r&&r(h),n[i]=h,i+=1}return a}}(),bezierLengthPool=function(){function t(){return{addedLength:0,percents:createTypedArray("float32",getDefaultCurveSegments()),lengths:createTypedArray("float32",getDefaultCurveSegments())}}return poolFactory(8,t)}(),segmentsLengthPool=function(){function t(){return{lengths:[],totalLength:0}}function e(r){var i,s=r.lengths.length;for(i=0;i<s;i+=1)bezierLengthPool.release(r.lengths[i]);r.lengths.length=0}return poolFactory(8,t,e)}();function bezFunction(){var t=Math;function e(p,E,v,u,x,c){var m=p*u+E*x+v*c-x*u-c*p-v*E;return m>-.001&&m<.001}function r(p,E,v,u,x,c,m,f,y){if(v===0&&c===0&&y===0)return e(p,E,u,x,m,f);var P=t.sqrt(t.pow(u-p,2)+t.pow(x-E,2)+t.pow(c-v,2)),A=t.sqrt(t.pow(m-p,2)+t.pow(f-E,2)+t.pow(y-v,2)),T=t.sqrt(t.pow(m-u,2)+t.pow(f-x,2)+t.pow(y-c,2)),F;return P>A?P>T?F=P-A-T:F=T-A-P:T>A?F=T-A-P:F=A-P-T,F>-1e-4&&F<1e-4}var i=function(){return function(p,E,v,u){var x=getDefaultCurveSegments(),c,m,f,y,P,A=0,T,F=[],k=[],O=bezierLengthPool.newElement();for(f=v.length,c=0;c<x;c+=1){for(P=c/(x-1),T=0,m=0;m<f;m+=1)y=bmPow(1-P,3)*p[m]+3*bmPow(1-P,2)*P*v[m]+3*(1-P)*bmPow(P,2)*u[m]+bmPow(P,3)*E[m],F[m]=y,k[m]!==null&&(T+=bmPow(F[m]-k[m],2)),k[m]=F[m];T&&(T=bmSqrt(T),A+=T),O.percents[c]=P,O.lengths[c]=A}return O.addedLength=A,O}}();function s(p){var E=segmentsLengthPool.newElement(),v=p.c,u=p.v,x=p.o,c=p.i,m,f=p._length,y=E.lengths,P=0;for(m=0;m<f-1;m+=1)y[m]=i(u[m],u[m+1],x[m],c[m+1]),P+=y[m].addedLength;return v&&f&&(y[m]=i(u[m],u[0],x[m],c[0]),P+=y[m].addedLength),E.totalLength=P,E}function n(p){this.segmentLength=0,this.points=new Array(p)}function a(p,E){this.partialLength=p,this.point=E}var l=function(){var p={};return function(E,v,u,x){var c=(E[0]+"_"+E[1]+"_"+v[0]+"_"+v[1]+"_"+u[0]+"_"+u[1]+"_"+x[0]+"_"+x[1]).replace(/\./g,"p");if(!p[c]){var m=getDefaultCurveSegments(),f,y,P,A,T,F=0,k,O,L=null;E.length===2&&(E[0]!==v[0]||E[1]!==v[1])&&e(E[0],E[1],v[0],v[1],E[0]+u[0],E[1]+u[1])&&e(E[0],E[1],v[0],v[1],v[0]+x[0],v[1]+x[1])&&(m=2);var R=new n(m);for(P=u.length,f=0;f<m;f+=1){for(O=createSizedArray(P),T=f/(m-1),k=0,y=0;y<P;y+=1)A=bmPow(1-T,3)*E[y]+3*bmPow(1-T,2)*T*(E[y]+u[y])+3*(1-T)*bmPow(T,2)*(v[y]+x[y])+bmPow(T,3)*v[y],O[y]=A,L!==null&&(k+=bmPow(O[y]-L[y],2));k=bmSqrt(k),F+=k,R.points[f]=new a(k,O),L=O}R.segmentLength=F,p[c]=R}return p[c]}}();function o(p,E){var v=E.percents,u=E.lengths,x=v.length,c=bmFloor((x-1)*p),m=p*E.addedLength,f=0;if(c===x-1||c===0||m===u[c])return v[c];for(var y=u[c]>m?-1:1,P=!0;P;)if(u[c]<=m&&u[c+1]>m?(f=(m-u[c])/(u[c+1]-u[c]),P=!1):c+=y,c<0||c>=x-1){if(c===x-1)return v[c];P=!1}return v[c]+(v[c+1]-v[c])*f}function h(p,E,v,u,x,c){var m=o(x,c),f=1-m,y=t.round((f*f*f*p[0]+(m*f*f+f*m*f+f*f*m)*v[0]+(m*m*f+f*m*m+m*f*m)*u[0]+m*m*m*E[0])*1e3)/1e3,P=t.round((f*f*f*p[1]+(m*f*f+f*m*f+f*f*m)*v[1]+(m*m*f+f*m*m+m*f*m)*u[1]+m*m*m*E[1])*1e3)/1e3;return[y,P]}var d=createTypedArray("float32",8);function b(p,E,v,u,x,c,m){x<0?x=0:x>1&&(x=1);var f=o(x,m);c=c>1?1:c;var y=o(c,m),P,A=p.length,T=1-f,F=1-y,k=T*T*T,O=f*T*T*3,L=f*f*T*3,R=f*f*f,D=T*T*F,B=f*T*F+T*f*F+T*T*y,I=f*f*F+T*f*y+f*T*y,C=f*f*y,_=T*F*F,g=f*F*F+T*y*F+T*F*y,S=f*y*F+T*y*y+f*F*y,w=f*y*y,M=F*F*F,V=y*F*F+F*y*F+F*F*y,G=y*y*F+F*y*y+y*F*y,z=y*y*y;for(P=0;P<A;P+=1)d[P*4]=t.round((k*p[P]+O*v[P]+L*u[P]+R*E[P])*1e3)/1e3,d[P*4+1]=t.round((D*p[P]+B*v[P]+I*u[P]+C*E[P])*1e3)/1e3,d[P*4+2]=t.round((_*p[P]+g*v[P]+S*u[P]+w*E[P])*1e3)/1e3,d[P*4+3]=t.round((M*p[P]+V*v[P]+G*u[P]+z*E[P])*1e3)/1e3;return d}return{getSegmentsLength:s,getNewSegment:b,getPointInSegment:h,buildBezierData:l,pointOnLine2D:e,pointOnLine3D:r}}var bez=bezFunction(),initFrame=initialDefaultFrame,mathAbs=Math.abs;function interpolateValue(t,e){var r=this.offsetTime,i;this.propType==="multidimensional"&&(i=createTypedArray("float32",this.pv.length));for(var s=e.lastIndex,n=s,a=this.keyframes.length-1,l=!0,o,h,d;l;){if(o=this.keyframes[n],h=this.keyframes[n+1],n===a-1&&t>=h.t-r){o.h&&(o=h),s=0;break}if(h.t-r>t){s=n;break}n<a-1?n+=1:(s=0,l=!1)}d=this.keyframesMetadata[n]||{};var b,p,E,v,u,x,c=h.t-r,m=o.t-r,f;if(o.to){d.bezierData||(d.bezierData=bez.buildBezierData(o.s,h.s||o.e,o.to,o.ti));var y=d.bezierData;if(t>=c||t<m){var P=t>=c?y.points.length-1:0;for(p=y.points[P].point.length,b=0;b<p;b+=1)i[b]=y.points[P].point[b]}else{d.__fnct?x=d.__fnct:(x=BezierFactory.getBezierEasing(o.o.x,o.o.y,o.i.x,o.i.y,o.n).get,d.__fnct=x),E=x((t-m)/(c-m));var A=y.segmentLength*E,T,F=e.lastFrame<t&&e._lastKeyframeIndex===n?e._lastAddedLength:0;for(u=e.lastFrame<t&&e._lastKeyframeIndex===n?e._lastPoint:0,l=!0,v=y.points.length;l;){if(F+=y.points[u].partialLength,A===0||E===0||u===y.points.length-1){for(p=y.points[u].point.length,b=0;b<p;b+=1)i[b]=y.points[u].point[b];break}else if(A>=F&&A<F+y.points[u+1].partialLength){for(T=(A-F)/y.points[u+1].partialLength,p=y.points[u].point.length,b=0;b<p;b+=1)i[b]=y.points[u].point[b]+(y.points[u+1].point[b]-y.points[u].point[b])*T;break}u<v-1?u+=1:l=!1}e._lastPoint=u,e._lastAddedLength=F-y.points[u].partialLength,e._lastKeyframeIndex=n}}else{var k,O,L,R,D;if(a=o.s.length,f=h.s||o.e,this.sh&&o.h!==1)if(t>=c)i[0]=f[0],i[1]=f[1],i[2]=f[2];else if(t<=m)i[0]=o.s[0],i[1]=o.s[1],i[2]=o.s[2];else{var B=createQuaternion(o.s),I=createQuaternion(f),C=(t-m)/(c-m);quaternionToEuler(i,slerp(B,I,C))}else for(n=0;n<a;n+=1)o.h!==1&&(t>=c?E=1:t<m?E=0:(o.o.x.constructor===Array?(d.__fnct||(d.__fnct=[]),d.__fnct[n]?x=d.__fnct[n]:(k=o.o.x[n]===void 0?o.o.x[0]:o.o.x[n],O=o.o.y[n]===void 0?o.o.y[0]:o.o.y[n],L=o.i.x[n]===void 0?o.i.x[0]:o.i.x[n],R=o.i.y[n]===void 0?o.i.y[0]:o.i.y[n],x=BezierFactory.getBezierEasing(k,O,L,R).get,d.__fnct[n]=x)):d.__fnct?x=d.__fnct:(k=o.o.x,O=o.o.y,L=o.i.x,R=o.i.y,x=BezierFactory.getBezierEasing(k,O,L,R).get,o.keyframeMetadata=x),E=x((t-m)/(c-m)))),f=h.s||o.e,D=o.h===1?o.s[n]:o.s[n]+(f[n]-o.s[n])*E,this.propType==="multidimensional"?i[n]=D:i=D}return e.lastIndex=s,i}function slerp(t,e,r){var i=[],s=t[0],n=t[1],a=t[2],l=t[3],o=e[0],h=e[1],d=e[2],b=e[3],p,E,v,u,x;return E=s*o+n*h+a*d+l*b,E<0&&(E=-E,o=-o,h=-h,d=-d,b=-b),1-E>1e-6?(p=Math.acos(E),v=Math.sin(p),u=Math.sin((1-r)*p)/v,x=Math.sin(r*p)/v):(u=1-r,x=r),i[0]=u*s+x*o,i[1]=u*n+x*h,i[2]=u*a+x*d,i[3]=u*l+x*b,i}function quaternionToEuler(t,e){var r=e[0],i=e[1],s=e[2],n=e[3],a=Math.atan2(2*i*n-2*r*s,1-2*i*i-2*s*s),l=Math.asin(2*r*i+2*s*n),o=Math.atan2(2*r*n-2*i*s,1-2*r*r-2*s*s);t[0]=a/degToRads,t[1]=l/degToRads,t[2]=o/degToRads}function createQuaternion(t){var e=t[0]*degToRads,r=t[1]*degToRads,i=t[2]*degToRads,s=Math.cos(e/2),n=Math.cos(r/2),a=Math.cos(i/2),l=Math.sin(e/2),o=Math.sin(r/2),h=Math.sin(i/2),d=s*n*a-l*o*h,b=l*o*a+s*n*h,p=l*n*a+s*o*h,E=s*o*a-l*n*h;return[b,p,E,d]}function getValueAtCurrentTime(){var t=this.comp.renderedFrame-this.offsetTime,e=this.keyframes[0].t-this.offsetTime,r=this.keyframes[this.keyframes.length-1].t-this.offsetTime;if(!(t===this._caching.lastFrame||this._caching.lastFrame!==initFrame&&(this._caching.lastFrame>=r&&t>=r||this._caching.lastFrame<e&&t<e))){this._caching.lastFrame>=t&&(this._caching._lastKeyframeIndex=-1,this._caching.lastIndex=0);var i=this.interpolateValue(t,this._caching);this.pv=i}return this._caching.lastFrame=t,this.pv}function setVValue(t){var e;if(this.propType==="unidimensional")e=t*this.mult,mathAbs(this.v-e)>1e-5&&(this.v=e,this._mdf=!0);else for(var r=0,i=this.v.length;r<i;)e=t[r]*this.mult,mathAbs(this.v[r]-e)>1e-5&&(this.v[r]=e,this._mdf=!0),r+=1}function processEffectsSequence(){if(!(this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)){if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=this._isFirstFrame;var t,e=this.effectsSequence.length,r=this.kf?this.pv:this.data.k;for(t=0;t<e;t+=1)r=this.effectsSequence[t](r);this.setVValue(r),this._isFirstFrame=!1,this.lock=!1,this.frameId=this.elem.globalData.frameId}}function addEffect(t){this.effectsSequence.push(t),this.container.addDynamicProperty(this)}function ValueProperty(t,e,r,i){this.propType="unidimensional",this.mult=r||1,this.data=e,this.v=r?e.k*r:e.k,this.pv=e.k,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.vel=0,this.effectsSequence=[],this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function MultiDimensionalProperty(t,e,r,i){this.propType="multidimensional",this.mult=r||1,this.data=e,this._mdf=!1,this.elem=t,this.container=i,this.comp=t.comp,this.k=!1,this.kf=!1,this.frameId=-1;var s,n=e.k.length;for(this.v=createTypedArray("float32",n),this.pv=createTypedArray("float32",n),this.vel=createTypedArray("float32",n),s=0;s<n;s+=1)this.v[s]=e.k[s]*this.mult,this.pv[s]=e.k[s];this._isFirstFrame=!0,this.effectsSequence=[],this.getValue=processEffectsSequence,this.setVValue=setVValue,this.addEffect=addEffect}function KeyframedValueProperty(t,e,r,i){this.propType="unidimensional",this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.frameId=-1,this._caching={lastFrame:initFrame,lastIndex:0,value:0,_lastKeyframeIndex:-1},this.k=!0,this.kf=!0,this.data=e,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.v=initFrame,this.pv=initFrame,this._isFirstFrame=!0,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.addEffect=addEffect}function KeyframedMultidimensionalProperty(t,e,r,i){this.propType="multidimensional";var s,n=e.k.length,a,l,o,h;for(s=0;s<n-1;s+=1)e.k[s].to&&e.k[s].s&&e.k[s+1]&&e.k[s+1].s&&(a=e.k[s].s,l=e.k[s+1].s,o=e.k[s].to,h=e.k[s].ti,(a.length===2&&!(a[0]===l[0]&&a[1]===l[1])&&bez.pointOnLine2D(a[0],a[1],l[0],l[1],a[0]+o[0],a[1]+o[1])&&bez.pointOnLine2D(a[0],a[1],l[0],l[1],l[0]+h[0],l[1]+h[1])||a.length===3&&!(a[0]===l[0]&&a[1]===l[1]&&a[2]===l[2])&&bez.pointOnLine3D(a[0],a[1],a[2],l[0],l[1],l[2],a[0]+o[0],a[1]+o[1],a[2]+o[2])&&bez.pointOnLine3D(a[0],a[1],a[2],l[0],l[1],l[2],l[0]+h[0],l[1]+h[1],l[2]+h[2]))&&(e.k[s].to=null,e.k[s].ti=null),a[0]===l[0]&&a[1]===l[1]&&o[0]===0&&o[1]===0&&h[0]===0&&h[1]===0&&(a.length===2||a[2]===l[2]&&o[2]===0&&h[2]===0)&&(e.k[s].to=null,e.k[s].ti=null));this.effectsSequence=[getValueAtCurrentTime.bind(this)],this.data=e,this.keyframes=e.k,this.keyframesMetadata=[],this.offsetTime=t.data.st,this.k=!0,this.kf=!0,this._isFirstFrame=!0,this.mult=r||1,this.elem=t,this.container=i,this.comp=t.comp,this.getValue=processEffectsSequence,this.setVValue=setVValue,this.interpolateValue=interpolateValue,this.frameId=-1;var d=e.k[0].s.length;for(this.v=createTypedArray("float32",d),this.pv=createTypedArray("float32",d),s=0;s<d;s+=1)this.v[s]=initFrame,this.pv[s]=initFrame;this._caching={lastFrame:initFrame,lastIndex:0,value:createTypedArray("float32",d)},this.addEffect=addEffect}var PropertyFactory=function(){function t(r,i,s,n,a){i.sid&&(i=r.globalData.slotManager.getProp(i));var l;if(!i.k.length)l=new ValueProperty(r,i,n,a);else if(typeof i.k[0]=="number")l=new MultiDimensionalProperty(r,i,n,a);else switch(s){case 0:l=new KeyframedValueProperty(r,i,n,a);break;case 1:l=new KeyframedMultidimensionalProperty(r,i,n,a);break}return l.effectsSequence.length&&a.addDynamicProperty(l),l}var e={getProp:t};return e}();function DynamicPropertyContainer(){}DynamicPropertyContainer.prototype={addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&(this.dynamicProperties.push(e),this.container.addDynamicProperty(this),this._isAnimated=!0)},iterateDynamicProperties:function(){this._mdf=!1;var e,r=this.dynamicProperties.length;for(e=0;e<r;e+=1)this.dynamicProperties[e].getValue(),this.dynamicProperties[e]._mdf&&(this._mdf=!0)},initDynamicPropertyContainer:function(e){this.container=e,this.dynamicProperties=[],this._mdf=!1,this._isAnimated=!1}};var pointPool=function(){function t(){return createTypedArray("float32",2)}return poolFactory(8,t)}();function ShapePath(){this.c=!1,this._length=0,this._maxLength=8,this.v=createSizedArray(this._maxLength),this.o=createSizedArray(this._maxLength),this.i=createSizedArray(this._maxLength)}ShapePath.prototype.setPathData=function(t,e){this.c=t,this.setLength(e);for(var r=0;r<e;)this.v[r]=pointPool.newElement(),this.o[r]=pointPool.newElement(),this.i[r]=pointPool.newElement(),r+=1},ShapePath.prototype.setLength=function(t){for(;this._maxLength<t;)this.doubleArrayLength();this._length=t},ShapePath.prototype.doubleArrayLength=function(){this.v=this.v.concat(createSizedArray(this._maxLength)),this.i=this.i.concat(createSizedArray(this._maxLength)),this.o=this.o.concat(createSizedArray(this._maxLength)),this._maxLength*=2},ShapePath.prototype.setXYAt=function(t,e,r,i,s){var n;switch(this._length=Math.max(this._length,i+1),this._length>=this._maxLength&&this.doubleArrayLength(),r){case"v":n=this.v;break;case"i":n=this.i;break;case"o":n=this.o;break;default:n=[];break}(!n[i]||n[i]&&!s)&&(n[i]=pointPool.newElement()),n[i][0]=t,n[i][1]=e},ShapePath.prototype.setTripleAt=function(t,e,r,i,s,n,a,l){this.setXYAt(t,e,"v",a,l),this.setXYAt(r,i,"o",a,l),this.setXYAt(s,n,"i",a,l)},ShapePath.prototype.reverse=function(){var t=new ShapePath;t.setPathData(this.c,this._length);var e=this.v,r=this.o,i=this.i,s=0;this.c&&(t.setTripleAt(e[0][0],e[0][1],i[0][0],i[0][1],r[0][0],r[0][1],0,!1),s=1);var n=this._length-1,a=this._length,l;for(l=s;l<a;l+=1)t.setTripleAt(e[n][0],e[n][1],i[n][0],i[n][1],r[n][0],r[n][1],l,!1),n-=1;return t},ShapePath.prototype.length=function(){return this._length};var shapePool=function(){function t(){return new ShapePath}function e(s){var n=s._length,a;for(a=0;a<n;a+=1)pointPool.release(s.v[a]),pointPool.release(s.i[a]),pointPool.release(s.o[a]),s.v[a]=null,s.i[a]=null,s.o[a]=null;s._length=0,s.c=!1}function r(s){var n=i.newElement(),a,l=s._length===void 0?s.v.length:s._length;for(n.setLength(l),n.c=s.c,a=0;a<l;a+=1)n.setTripleAt(s.v[a][0],s.v[a][1],s.o[a][0],s.o[a][1],s.i[a][0],s.i[a][1],a);return n}var i=poolFactory(4,t,e);return i.clone=r,i}();function ShapeCollection(){this._length=0,this._maxLength=4,this.shapes=createSizedArray(this._maxLength)}ShapeCollection.prototype.addShape=function(t){this._length===this._maxLength&&(this.shapes=this.shapes.concat(createSizedArray(this._maxLength)),this._maxLength*=2),this.shapes[this._length]=t,this._length+=1},ShapeCollection.prototype.releaseShapes=function(){var t;for(t=0;t<this._length;t+=1)shapePool.release(this.shapes[t]);this._length=0};var shapeCollectionPool=function(){var t={newShapeCollection:s,release:n},e=0,r=4,i=createSizedArray(r);function s(){var a;return e?(e-=1,a=i[e]):a=new ShapeCollection,a}function n(a){var l,o=a._length;for(l=0;l<o;l+=1)shapePool.release(a.shapes[l]);a._length=0,e===r&&(i=pooling.double(i),r*=2),i[e]=a,e+=1}return t}(),ShapePropertyFactory=function(){var t=-999999;function e(c,m,f){var y=f.lastIndex,P,A,T,F,k,O,L,R,D,B=this.keyframes;if(c<B[0].t-this.offsetTime)P=B[0].s[0],T=!0,y=0;else if(c>=B[B.length-1].t-this.offsetTime)P=B[B.length-1].s?B[B.length-1].s[0]:B[B.length-2].e[0],T=!0;else{for(var I=y,C=B.length-1,_=!0,g,S,w;_&&(g=B[I],S=B[I+1],!(S.t-this.offsetTime>c));)I<C-1?I+=1:_=!1;if(w=this.keyframesMetadata[I]||{},T=g.h===1,y=I,!T){if(c>=S.t-this.offsetTime)R=1;else if(c<g.t-this.offsetTime)R=0;else{var M;w.__fnct?M=w.__fnct:(M=BezierFactory.getBezierEasing(g.o.x,g.o.y,g.i.x,g.i.y).get,w.__fnct=M),R=M((c-(g.t-this.offsetTime))/(S.t-this.offsetTime-(g.t-this.offsetTime)))}A=S.s?S.s[0]:g.e[0]}P=g.s[0]}for(O=m._length,L=P.i[0].length,f.lastIndex=y,F=0;F<O;F+=1)for(k=0;k<L;k+=1)D=T?P.i[F][k]:P.i[F][k]+(A.i[F][k]-P.i[F][k])*R,m.i[F][k]=D,D=T?P.o[F][k]:P.o[F][k]+(A.o[F][k]-P.o[F][k])*R,m.o[F][k]=D,D=T?P.v[F][k]:P.v[F][k]+(A.v[F][k]-P.v[F][k])*R,m.v[F][k]=D}function r(){var c=this.comp.renderedFrame-this.offsetTime,m=this.keyframes[0].t-this.offsetTime,f=this.keyframes[this.keyframes.length-1].t-this.offsetTime,y=this._caching.lastFrame;return y!==t&&(y<m&&c<m||y>f&&c>f)||(this._caching.lastIndex=y<c?this._caching.lastIndex:0,this.interpolateShape(c,this.pv,this._caching)),this._caching.lastFrame=c,this.pv}function i(){this.paths=this.localShapeCollection}function s(c,m){if(c._length!==m._length||c.c!==m.c)return!1;var f,y=c._length;for(f=0;f<y;f+=1)if(c.v[f][0]!==m.v[f][0]||c.v[f][1]!==m.v[f][1]||c.o[f][0]!==m.o[f][0]||c.o[f][1]!==m.o[f][1]||c.i[f][0]!==m.i[f][0]||c.i[f][1]!==m.i[f][1])return!1;return!0}function n(c){s(this.v,c)||(this.v=shapePool.clone(c),this.localShapeCollection.releaseShapes(),this.localShapeCollection.addShape(this.v),this._mdf=!0,this.paths=this.localShapeCollection)}function a(){if(this.elem.globalData.frameId!==this.frameId){if(!this.effectsSequence.length){this._mdf=!1;return}if(this.lock){this.setVValue(this.pv);return}this.lock=!0,this._mdf=!1;var c;this.kf?c=this.pv:this.data.ks?c=this.data.ks.k:c=this.data.pt.k;var m,f=this.effectsSequence.length;for(m=0;m<f;m+=1)c=this.effectsSequence[m](c);this.setVValue(c),this.lock=!1,this.frameId=this.elem.globalData.frameId}}function l(c,m,f){this.propType="shape",this.comp=c.comp,this.container=c,this.elem=c,this.data=m,this.k=!1,this.kf=!1,this._mdf=!1;var y=f===3?m.pt.k:m.ks.k;this.v=shapePool.clone(y),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.reset=i,this.effectsSequence=[]}function o(c){this.effectsSequence.push(c),this.container.addDynamicProperty(this)}l.prototype.interpolateShape=e,l.prototype.getValue=a,l.prototype.setVValue=n,l.prototype.addEffect=o;function h(c,m,f){this.propType="shape",this.comp=c.comp,this.elem=c,this.container=c,this.offsetTime=c.data.st,this.keyframes=f===3?m.pt.k:m.ks.k,this.keyframesMetadata=[],this.k=!0,this.kf=!0;var y=this.keyframes[0].s[0].i.length;this.v=shapePool.newElement(),this.v.setPathData(this.keyframes[0].s[0].c,y),this.pv=shapePool.clone(this.v),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.paths.addShape(this.v),this.lastFrame=t,this.reset=i,this._caching={lastFrame:t,lastIndex:0},this.effectsSequence=[r.bind(this)]}h.prototype.getValue=a,h.prototype.interpolateShape=e,h.prototype.setVValue=n,h.prototype.addEffect=o;var d=function(){var c=roundCorner;function m(f,y){this.v=shapePool.newElement(),this.v.setPathData(!0,4),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.paths=this.localShapeCollection,this.localShapeCollection.addShape(this.v),this.d=y.d,this.elem=f,this.comp=f.comp,this.frameId=-1,this.initDynamicPropertyContainer(f),this.p=PropertyFactory.getProp(f,y.p,1,0,this),this.s=PropertyFactory.getProp(f,y.s,1,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertEllToPath())}return m.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertEllToPath())},convertEllToPath:function(){var y=this.p.v[0],P=this.p.v[1],A=this.s.v[0]/2,T=this.s.v[1]/2,F=this.d!==3,k=this.v;k.v[0][0]=y,k.v[0][1]=P-T,k.v[1][0]=F?y+A:y-A,k.v[1][1]=P,k.v[2][0]=y,k.v[2][1]=P+T,k.v[3][0]=F?y-A:y+A,k.v[3][1]=P,k.i[0][0]=F?y-A*c:y+A*c,k.i[0][1]=P-T,k.i[1][0]=F?y+A:y-A,k.i[1][1]=P-T*c,k.i[2][0]=F?y+A*c:y-A*c,k.i[2][1]=P+T,k.i[3][0]=F?y-A:y+A,k.i[3][1]=P+T*c,k.o[0][0]=F?y+A*c:y-A*c,k.o[0][1]=P-T,k.o[1][0]=F?y+A:y-A,k.o[1][1]=P+T*c,k.o[2][0]=F?y-A*c:y+A*c,k.o[2][1]=P+T,k.o[3][0]=F?y-A:y+A,k.o[3][1]=P-T*c}},extendPrototype([DynamicPropertyContainer],m),m}(),b=function(){function c(m,f){this.v=shapePool.newElement(),this.v.setPathData(!0,0),this.elem=m,this.comp=m.comp,this.data=f,this.frameId=-1,this.d=f.d,this.initDynamicPropertyContainer(m),f.sy===1?(this.ir=PropertyFactory.getProp(m,f.ir,0,0,this),this.is=PropertyFactory.getProp(m,f.is,0,.01,this),this.convertToPath=this.convertStarToPath):this.convertToPath=this.convertPolygonToPath,this.pt=PropertyFactory.getProp(m,f.pt,0,0,this),this.p=PropertyFactory.getProp(m,f.p,1,0,this),this.r=PropertyFactory.getProp(m,f.r,0,degToRads,this),this.or=PropertyFactory.getProp(m,f.or,0,0,this),this.os=PropertyFactory.getProp(m,f.os,0,.01,this),this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertToPath())}return c.prototype={reset:i,getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertToPath())},convertStarToPath:function(){var f=Math.floor(this.pt.v)*2,y=Math.PI*2/f,P=!0,A=this.or.v,T=this.ir.v,F=this.os.v,k=this.is.v,O=2*Math.PI*A/(f*2),L=2*Math.PI*T/(f*2),R,D,B,I,C=-Math.PI/2;C+=this.r.v;var _=this.data.d===3?-1:1;for(this.v._length=0,R=0;R<f;R+=1){D=P?A:T,B=P?F:k,I=P?O:L;var g=D*Math.cos(C),S=D*Math.sin(C),w=g===0&&S===0?0:S/Math.sqrt(g*g+S*S),M=g===0&&S===0?0:-g/Math.sqrt(g*g+S*S);g+=+this.p.v[0],S+=+this.p.v[1],this.v.setTripleAt(g,S,g-w*I*B*_,S-M*I*B*_,g+w*I*B*_,S+M*I*B*_,R,!0),P=!P,C+=y*_}},convertPolygonToPath:function(){var f=Math.floor(this.pt.v),y=Math.PI*2/f,P=this.or.v,A=this.os.v,T=2*Math.PI*P/(f*4),F,k=-Math.PI*.5,O=this.data.d===3?-1:1;for(k+=this.r.v,this.v._length=0,F=0;F<f;F+=1){var L=P*Math.cos(k),R=P*Math.sin(k),D=L===0&&R===0?0:R/Math.sqrt(L*L+R*R),B=L===0&&R===0?0:-L/Math.sqrt(L*L+R*R);L+=+this.p.v[0],R+=+this.p.v[1],this.v.setTripleAt(L,R,L-D*T*A*O,R-B*T*A*O,L+D*T*A*O,R+B*T*A*O,F,!0),k+=y*O}this.paths.length=0,this.paths[0]=this.v}},extendPrototype([DynamicPropertyContainer],c),c}(),p=function(){function c(m,f){this.v=shapePool.newElement(),this.v.c=!0,this.localShapeCollection=shapeCollectionPool.newShapeCollection(),this.localShapeCollection.addShape(this.v),this.paths=this.localShapeCollection,this.elem=m,this.comp=m.comp,this.frameId=-1,this.d=f.d,this.initDynamicPropertyContainer(m),this.p=PropertyFactory.getProp(m,f.p,1,0,this),this.s=PropertyFactory.getProp(m,f.s,1,0,this),this.r=PropertyFactory.getProp(m,f.r,0,0,this),this.dynamicProperties.length?this.k=!0:(this.k=!1,this.convertRectToPath())}return c.prototype={convertRectToPath:function(){var f=this.p.v[0],y=this.p.v[1],P=this.s.v[0]/2,A=this.s.v[1]/2,T=bmMin(P,A,this.r.v),F=T*(1-roundCorner);this.v._length=0,this.d===2||this.d===1?(this.v.setTripleAt(f+P,y-A+T,f+P,y-A+T,f+P,y-A+F,0,!0),this.v.setTripleAt(f+P,y+A-T,f+P,y+A-F,f+P,y+A-T,1,!0),T!==0?(this.v.setTripleAt(f+P-T,y+A,f+P-T,y+A,f+P-F,y+A,2,!0),this.v.setTripleAt(f-P+T,y+A,f-P+F,y+A,f-P+T,y+A,3,!0),this.v.setTripleAt(f-P,y+A-T,f-P,y+A-T,f-P,y+A-F,4,!0),this.v.setTripleAt(f-P,y-A+T,f-P,y-A+F,f-P,y-A+T,5,!0),this.v.setTripleAt(f-P+T,y-A,f-P+T,y-A,f-P+F,y-A,6,!0),this.v.setTripleAt(f+P-T,y-A,f+P-F,y-A,f+P-T,y-A,7,!0)):(this.v.setTripleAt(f-P,y+A,f-P+F,y+A,f-P,y+A,2),this.v.setTripleAt(f-P,y-A,f-P,y-A+F,f-P,y-A,3))):(this.v.setTripleAt(f+P,y-A+T,f+P,y-A+F,f+P,y-A+T,0,!0),T!==0?(this.v.setTripleAt(f+P-T,y-A,f+P-T,y-A,f+P-F,y-A,1,!0),this.v.setTripleAt(f-P+T,y-A,f-P+F,y-A,f-P+T,y-A,2,!0),this.v.setTripleAt(f-P,y-A+T,f-P,y-A+T,f-P,y-A+F,3,!0),this.v.setTripleAt(f-P,y+A-T,f-P,y+A-F,f-P,y+A-T,4,!0),this.v.setTripleAt(f-P+T,y+A,f-P+T,y+A,f-P+F,y+A,5,!0),this.v.setTripleAt(f+P-T,y+A,f+P-F,y+A,f+P-T,y+A,6,!0),this.v.setTripleAt(f+P,y+A-T,f+P,y+A-T,f+P,y+A-F,7,!0)):(this.v.setTripleAt(f-P,y-A,f-P+F,y-A,f-P,y-A,1,!0),this.v.setTripleAt(f-P,y+A,f-P,y+A-F,f-P,y+A,2,!0),this.v.setTripleAt(f+P,y+A,f+P-F,y+A,f+P,y+A,3,!0)))},getValue:function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf&&this.convertRectToPath())},reset:i},extendPrototype([DynamicPropertyContainer],c),c}();function E(c,m,f){var y;if(f===3||f===4){var P=f===3?m.pt:m.ks,A=P.k;A.length?y=new h(c,m,f):y=new l(c,m,f)}else f===5?y=new p(c,m):f===6?y=new d(c,m):f===7&&(y=new b(c,m));return y.k&&c.addDynamicProperty(y),y}function v(){return l}function u(){return h}var x={};return x.getShapeProp=E,x.getConstructorFunction=v,x.getKeyframedConstructorFunction=u,x}();/*!
 Transformation Matrix v2.0
 (c) Epistemex 2014-2015
 www.epistemex.com
 By Ken Fyrstenberg
 Contributions by leeoniya.
 License: MIT, header required.
 */var Matrix=function(){var t=Math.cos,e=Math.sin,r=Math.tan,i=Math.round;function s(){return this.props[0]=1,this.props[1]=0,this.props[2]=0,this.props[3]=0,this.props[4]=0,this.props[5]=1,this.props[6]=0,this.props[7]=0,this.props[8]=0,this.props[9]=0,this.props[10]=1,this.props[11]=0,this.props[12]=0,this.props[13]=0,this.props[14]=0,this.props[15]=1,this}function n(g){if(g===0)return this;var S=t(g),w=e(g);return this._t(S,-w,0,0,w,S,0,0,0,0,1,0,0,0,0,1)}function a(g){if(g===0)return this;var S=t(g),w=e(g);return this._t(1,0,0,0,0,S,-w,0,0,w,S,0,0,0,0,1)}function l(g){if(g===0)return this;var S=t(g),w=e(g);return this._t(S,0,w,0,0,1,0,0,-w,0,S,0,0,0,0,1)}function o(g){if(g===0)return this;var S=t(g),w=e(g);return this._t(S,-w,0,0,w,S,0,0,0,0,1,0,0,0,0,1)}function h(g,S){return this._t(1,S,g,1,0,0)}function d(g,S){return this.shear(r(g),r(S))}function b(g,S){var w=t(S),M=e(S);return this._t(w,M,0,0,-M,w,0,0,0,0,1,0,0,0,0,1)._t(1,0,0,0,r(g),1,0,0,0,0,1,0,0,0,0,1)._t(w,-M,0,0,M,w,0,0,0,0,1,0,0,0,0,1)}function p(g,S,w){return!w&&w!==0&&(w=1),g===1&&S===1&&w===1?this:this._t(g,0,0,0,0,S,0,0,0,0,w,0,0,0,0,1)}function E(g,S,w,M,V,G,z,H,$,q,U,Q,J,W,K,j){return this.props[0]=g,this.props[1]=S,this.props[2]=w,this.props[3]=M,this.props[4]=V,this.props[5]=G,this.props[6]=z,this.props[7]=H,this.props[8]=$,this.props[9]=q,this.props[10]=U,this.props[11]=Q,this.props[12]=J,this.props[13]=W,this.props[14]=K,this.props[15]=j,this}function v(g,S,w){return w=w||0,g!==0||S!==0||w!==0?this._t(1,0,0,0,0,1,0,0,0,0,1,0,g,S,w,1):this}function u(g,S,w,M,V,G,z,H,$,q,U,Q,J,W,K,j){var N=this.props;if(g===1&&S===0&&w===0&&M===0&&V===0&&G===1&&z===0&&H===0&&$===0&&q===0&&U===1&&Q===0)return N[12]=N[12]*g+N[15]*J,N[13]=N[13]*G+N[15]*W,N[14]=N[14]*U+N[15]*K,N[15]*=j,this._identityCalculated=!1,this;var et=N[0],nt=N[1],rt=N[2],tt=N[3],it=N[4],st=N[5],X=N[6],at=N[7],ot=N[8],Y=N[9],lt=N[10],Z=N[11],ht=N[12],ft=N[13],pt=N[14],ct=N[15];return N[0]=et*g+nt*V+rt*$+tt*J,N[1]=et*S+nt*G+rt*q+tt*W,N[2]=et*w+nt*z+rt*U+tt*K,N[3]=et*M+nt*H+rt*Q+tt*j,N[4]=it*g+st*V+X*$+at*J,N[5]=it*S+st*G+X*q+at*W,N[6]=it*w+st*z+X*U+at*K,N[7]=it*M+st*H+X*Q+at*j,N[8]=ot*g+Y*V+lt*$+Z*J,N[9]=ot*S+Y*G+lt*q+Z*W,N[10]=ot*w+Y*z+lt*U+Z*K,N[11]=ot*M+Y*H+lt*Q+Z*j,N[12]=ht*g+ft*V+pt*$+ct*J,N[13]=ht*S+ft*G+pt*q+ct*W,N[14]=ht*w+ft*z+pt*U+ct*K,N[15]=ht*M+ft*H+pt*Q+ct*j,this._identityCalculated=!1,this}function x(g){var S=g.props;return this.transform(S[0],S[1],S[2],S[3],S[4],S[5],S[6],S[7],S[8],S[9],S[10],S[11],S[12],S[13],S[14],S[15])}function c(){return this._identityCalculated||(this._identity=!(this.props[0]!==1||this.props[1]!==0||this.props[2]!==0||this.props[3]!==0||this.props[4]!==0||this.props[5]!==1||this.props[6]!==0||this.props[7]!==0||this.props[8]!==0||this.props[9]!==0||this.props[10]!==1||this.props[11]!==0||this.props[12]!==0||this.props[13]!==0||this.props[14]!==0||this.props[15]!==1),this._identityCalculated=!0),this._identity}function m(g){for(var S=0;S<16;){if(g.props[S]!==this.props[S])return!1;S+=1}return!0}function f(g){var S;for(S=0;S<16;S+=1)g.props[S]=this.props[S];return g}function y(g){var S;for(S=0;S<16;S+=1)this.props[S]=g[S]}function P(g,S,w){return{x:g*this.props[0]+S*this.props[4]+w*this.props[8]+this.props[12],y:g*this.props[1]+S*this.props[5]+w*this.props[9]+this.props[13],z:g*this.props[2]+S*this.props[6]+w*this.props[10]+this.props[14]}}function A(g,S,w){return g*this.props[0]+S*this.props[4]+w*this.props[8]+this.props[12]}function T(g,S,w){return g*this.props[1]+S*this.props[5]+w*this.props[9]+this.props[13]}function F(g,S,w){return g*this.props[2]+S*this.props[6]+w*this.props[10]+this.props[14]}function k(){var g=this.props[0]*this.props[5]-this.props[1]*this.props[4],S=this.props[5]/g,w=-this.props[1]/g,M=-this.props[4]/g,V=this.props[0]/g,G=(this.props[4]*this.props[13]-this.props[5]*this.props[12])/g,z=-(this.props[0]*this.props[13]-this.props[1]*this.props[12])/g,H=new Matrix;return H.props[0]=S,H.props[1]=w,H.props[4]=M,H.props[5]=V,H.props[12]=G,H.props[13]=z,H}function O(g){var S=this.getInverseMatrix();return S.applyToPointArray(g[0],g[1],g[2]||0)}function L(g){var S,w=g.length,M=[];for(S=0;S<w;S+=1)M[S]=O(g[S]);return M}function R(g,S,w){var M=createTypedArray("float32",6);if(this.isIdentity())M[0]=g[0],M[1]=g[1],M[2]=S[0],M[3]=S[1],M[4]=w[0],M[5]=w[1];else{var V=this.props[0],G=this.props[1],z=this.props[4],H=this.props[5],$=this.props[12],q=this.props[13];M[0]=g[0]*V+g[1]*z+$,M[1]=g[0]*G+g[1]*H+q,M[2]=S[0]*V+S[1]*z+$,M[3]=S[0]*G+S[1]*H+q,M[4]=w[0]*V+w[1]*z+$,M[5]=w[0]*G+w[1]*H+q}return M}function D(g,S,w){var M;return this.isIdentity()?M=[g,S,w]:M=[g*this.props[0]+S*this.props[4]+w*this.props[8]+this.props[12],g*this.props[1]+S*this.props[5]+w*this.props[9]+this.props[13],g*this.props[2]+S*this.props[6]+w*this.props[10]+this.props[14]],M}function B(g,S){if(this.isIdentity())return g+","+S;var w=this.props;return Math.round((g*w[0]+S*w[4]+w[12])*100)/100+","+Math.round((g*w[1]+S*w[5]+w[13])*100)/100}function I(){for(var g=0,S=this.props,w="matrix3d(",M=1e4;g<16;)w+=i(S[g]*M)/M,w+=g===15?")":",",g+=1;return w}function C(g){var S=1e4;return g<1e-6&&g>0||g>-1e-6&&g<0?i(g*S)/S:g}function _(){var g=this.props,S=C(g[0]),w=C(g[1]),M=C(g[4]),V=C(g[5]),G=C(g[12]),z=C(g[13]);return"matrix("+S+","+w+","+M+","+V+","+G+","+z+")"}return function(){this.reset=s,this.rotate=n,this.rotateX=a,this.rotateY=l,this.rotateZ=o,this.skew=d,this.skewFromAxis=b,this.shear=h,this.scale=p,this.setTransform=E,this.translate=v,this.transform=u,this.multiply=x,this.applyToPoint=P,this.applyToX=A,this.applyToY=T,this.applyToZ=F,this.applyToPointArray=D,this.applyToTriplePoints=R,this.applyToPointStringified=B,this.toCSS=I,this.to2dCSS=_,this.clone=f,this.cloneFromProps=y,this.equals=m,this.inversePoints=L,this.inversePoint=O,this.getInverseMatrix=k,this._t=this.transform,this.isIdentity=c,this._identity=!0,this._identityCalculated=!1,this.props=createTypedArray("float32",16),this.reset()}}();function _typeof$3(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$3=function(r){return typeof r}:_typeof$3=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$3(t)}var lottie={};function setLocation(t){setLocationHref(t)}function searchAnimations(){animationManager.searchAnimations()}function setSubframeRendering(t){setSubframeEnabled(t)}function setPrefix(t){setIdPrefix(t)}function loadAnimation(t){return animationManager.loadAnimation(t)}function setQuality(t){if(typeof t=="string")switch(t){case"high":setDefaultCurveSegments(200);break;default:case"medium":setDefaultCurveSegments(50);break;case"low":setDefaultCurveSegments(10);break}else!isNaN(t)&&t>1&&setDefaultCurveSegments(t)}function inBrowser(){return typeof navigator<"u"}function installPlugin(t,e){t==="expressions"&&setExpressionsPlugin(e)}function getFactory(t){switch(t){case"propertyFactory":return PropertyFactory;case"shapePropertyFactory":return ShapePropertyFactory;case"matrix":return Matrix;default:return null}}lottie.play=animationManager.play,lottie.pause=animationManager.pause,lottie.setLocationHref=setLocation,lottie.togglePause=animationManager.togglePause,lottie.setSpeed=animationManager.setSpeed,lottie.setDirection=animationManager.setDirection,lottie.stop=animationManager.stop,lottie.searchAnimations=searchAnimations,lottie.registerAnimation=animationManager.registerAnimation,lottie.loadAnimation=loadAnimation,lottie.setSubframeRendering=setSubframeRendering,lottie.resize=animationManager.resize,lottie.goToAndStop=animationManager.goToAndStop,lottie.destroy=animationManager.destroy,lottie.setQuality=setQuality,lottie.inBrowser=inBrowser,lottie.installPlugin=installPlugin,lottie.freeze=animationManager.freeze,lottie.unfreeze=animationManager.unfreeze,lottie.setVolume=animationManager.setVolume,lottie.mute=animationManager.mute,lottie.unmute=animationManager.unmute,lottie.getRegisteredAnimations=animationManager.getRegisteredAnimations,lottie.useWebWorker=setWebWorker,lottie.setIDPrefix=setPrefix,lottie.__getFactory=getFactory,lottie.version="5.12.2";function checkReady(){document.readyState==="complete"&&(clearInterval(readyStateCheckInterval),searchAnimations())}function getQueryVariable(t){for(var e=queryString.split("&"),r=0;r<e.length;r+=1){var i=e[r].split("=");if(decodeURIComponent(i[0])==t)return decodeURIComponent(i[1])}return null}var queryString="";{var scripts=document.getElementsByTagName("script"),index=scripts.length-1,myScript=scripts[index]||{src:""};queryString=myScript.src?myScript.src.replace(/^[^\?]+\??/,""):"",getQueryVariable("renderer")}var readyStateCheckInterval=setInterval(checkReady,100);try{_typeof$3(exports)!=="object"&&(window.bodymovin=lottie)}catch(t){}var ShapeModifiers=function(){var t={},e={};t.registerModifier=r,t.getModifier=i;function r(s,n){e[s]||(e[s]=n)}function i(s,n,a){return new e[s](n,a)}return t}();function ShapeModifier(){}ShapeModifier.prototype.initModifierProperties=function(){},ShapeModifier.prototype.addShapeToModifier=function(){},ShapeModifier.prototype.addShape=function(t){if(!this.closed){t.sh.container.addDynamicProperty(t.sh);var e={shape:t.sh,data:t,localShapeCollection:shapeCollectionPool.newShapeCollection()};this.shapes.push(e),this.addShapeToModifier(e),this._isAnimated&&t.setAsAnimated()}},ShapeModifier.prototype.init=function(t,e){this.shapes=[],this.elem=t,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e),this.frameId=initialDefaultFrame,this.closed=!1,this.k=!1,this.dynamicProperties.length?this.k=!0:this.getValue(!0)},ShapeModifier.prototype.processKeys=function(){this.elem.globalData.frameId!==this.frameId&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties())},extendPrototype([DynamicPropertyContainer],ShapeModifier);function TrimModifier(){}extendPrototype([ShapeModifier],TrimModifier),TrimModifier.prototype.initModifierProperties=function(t,e){this.s=PropertyFactory.getProp(t,e.s,0,.01,this),this.e=PropertyFactory.getProp(t,e.e,0,.01,this),this.o=PropertyFactory.getProp(t,e.o,0,0,this),this.sValue=0,this.eValue=0,this.getValue=this.processKeys,this.m=e.m,this._isAnimated=!!this.s.effectsSequence.length||!!this.e.effectsSequence.length||!!this.o.effectsSequence.length},TrimModifier.prototype.addShapeToModifier=function(t){t.pathsData=[]},TrimModifier.prototype.calculateShapeEdges=function(t,e,r,i,s){var n=[];e<=1?n.push({s:t,e}):t>=1?n.push({s:t-1,e:e-1}):(n.push({s:t,e:1}),n.push({s:0,e:e-1}));var a=[],l,o=n.length,h;for(l=0;l<o;l+=1)if(h=n[l],!(h.e*s<i||h.s*s>i+r)){var d,b;h.s*s<=i?d=0:d=(h.s*s-i)/r,h.e*s>=i+r?b=1:b=(h.e*s-i)/r,a.push([d,b])}return a.length||a.push([0,0]),a},TrimModifier.prototype.releasePathsData=function(t){var e,r=t.length;for(e=0;e<r;e+=1)segmentsLengthPool.release(t[e]);return t.length=0,t},TrimModifier.prototype.processShapes=function(t){var e,r;if(this._mdf||t){var i=this.o.v%360/360;if(i<0&&(i+=1),this.s.v>1?e=1+i:this.s.v<0?e=0+i:e=this.s.v+i,this.e.v>1?r=1+i:this.e.v<0?r=0+i:r=this.e.v+i,e>r){var s=e;e=r,r=s}e=Math.round(e*1e4)*1e-4,r=Math.round(r*1e4)*1e-4,this.sValue=e,this.eValue=r}else e=this.sValue,r=this.eValue;var n,a,l=this.shapes.length,o,h,d,b,p,E=0;if(r===e)for(a=0;a<l;a+=1)this.shapes[a].localShapeCollection.releaseShapes(),this.shapes[a].shape._mdf=!0,this.shapes[a].shape.paths=this.shapes[a].localShapeCollection,this._mdf&&(this.shapes[a].pathsData.length=0);else if(r===1&&e===0||r===0&&e===1){if(this._mdf)for(a=0;a<l;a+=1)this.shapes[a].pathsData.length=0,this.shapes[a].shape._mdf=!0}else{var v=[],u,x;for(a=0;a<l;a+=1)if(u=this.shapes[a],!u.shape._mdf&&!this._mdf&&!t&&this.m!==2)u.shape.paths=u.localShapeCollection;else{if(n=u.shape.paths,h=n._length,p=0,!u.shape._mdf&&u.pathsData.length)p=u.totalShapeLength;else{for(d=this.releasePathsData(u.pathsData),o=0;o<h;o+=1)b=bez.getSegmentsLength(n.shapes[o]),d.push(b),p+=b.totalLength;u.totalShapeLength=p,u.pathsData=d}E+=p,u.shape._mdf=!0}var c=e,m=r,f=0,y;for(a=l-1;a>=0;a-=1)if(u=this.shapes[a],u.shape._mdf){for(x=u.localShapeCollection,x.releaseShapes(),this.m===2&&l>1?(y=this.calculateShapeEdges(e,r,u.totalShapeLength,f,E),f+=u.totalShapeLength):y=[[c,m]],h=y.length,o=0;o<h;o+=1){c=y[o][0],m=y[o][1],v.length=0,m<=1?v.push({s:u.totalShapeLength*c,e:u.totalShapeLength*m}):c>=1?v.push({s:u.totalShapeLength*(c-1),e:u.totalShapeLength*(m-1)}):(v.push({s:u.totalShapeLength*c,e:u.totalShapeLength}),v.push({s:0,e:u.totalShapeLength*(m-1)}));var P=this.addShapes(u,v[0]);if(v[0].s!==v[0].e){if(v.length>1){var A=u.shape.paths.shapes[u.shape.paths._length-1];if(A.c){var T=P.pop();this.addPaths(P,x),P=this.addShapes(u,v[1],T)}else this.addPaths(P,x),P=this.addShapes(u,v[1])}this.addPaths(P,x)}}u.shape.paths=x}}},TrimModifier.prototype.addPaths=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e.addShape(t[r])},TrimModifier.prototype.addSegment=function(t,e,r,i,s,n,a){s.setXYAt(e[0],e[1],"o",n),s.setXYAt(r[0],r[1],"i",n+1),a&&s.setXYAt(t[0],t[1],"v",n),s.setXYAt(i[0],i[1],"v",n+1)},TrimModifier.prototype.addSegmentFromArray=function(t,e,r,i){e.setXYAt(t[1],t[5],"o",r),e.setXYAt(t[2],t[6],"i",r+1),i&&e.setXYAt(t[0],t[4],"v",r),e.setXYAt(t[3],t[7],"v",r+1)},TrimModifier.prototype.addShapes=function(t,e,r){var i=t.pathsData,s=t.shape.paths.shapes,n,a=t.shape.paths._length,l,o,h=0,d,b,p,E,v=[],u,x=!0;for(r?(b=r._length,u=r._length):(r=shapePool.newElement(),b=0,u=0),v.push(r),n=0;n<a;n+=1){for(p=i[n].lengths,r.c=s[n].c,o=s[n].c?p.length:p.length+1,l=1;l<o;l+=1)if(d=p[l-1],h+d.addedLength<e.s)h+=d.addedLength,r.c=!1;else if(h>e.e){r.c=!1;break}else e.s<=h&&e.e>=h+d.addedLength?(this.addSegment(s[n].v[l-1],s[n].o[l-1],s[n].i[l],s[n].v[l],r,b,x),x=!1):(E=bez.getNewSegment(s[n].v[l-1],s[n].v[l],s[n].o[l-1],s[n].i[l],(e.s-h)/d.addedLength,(e.e-h)/d.addedLength,p[l-1]),this.addSegmentFromArray(E,r,b,x),x=!1,r.c=!1),h+=d.addedLength,b+=1;if(s[n].c&&p.length){if(d=p[l-1],h<=e.e){var c=p[l-1].addedLength;e.s<=h&&e.e>=h+c?(this.addSegment(s[n].v[l-1],s[n].o[l-1],s[n].i[0],s[n].v[0],r,b,x),x=!1):(E=bez.getNewSegment(s[n].v[l-1],s[n].v[0],s[n].o[l-1],s[n].i[0],(e.s-h)/c,(e.e-h)/c,p[l-1]),this.addSegmentFromArray(E,r,b,x),x=!1,r.c=!1)}else r.c=!1;h+=d.addedLength,b+=1}if(r._length&&(r.setXYAt(r.v[u][0],r.v[u][1],"i",u),r.setXYAt(r.v[r._length-1][0],r.v[r._length-1][1],"o",r._length-1)),h>e.e)break;n<a-1&&(r=shapePool.newElement(),x=!0,v.push(r),b=0)}return v};function PuckerAndBloatModifier(){}extendPrototype([ShapeModifier],PuckerAndBloatModifier),PuckerAndBloatModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this._isAnimated=!!this.amount.effectsSequence.length},PuckerAndBloatModifier.prototype.processPath=function(t,e){var r=e/100,i=[0,0],s=t._length,n=0;for(n=0;n<s;n+=1)i[0]+=t.v[n][0],i[1]+=t.v[n][1];i[0]/=s,i[1]/=s;var a=shapePool.newElement();a.c=t.c;var l,o,h,d,b,p;for(n=0;n<s;n+=1)l=t.v[n][0]+(i[0]-t.v[n][0])*r,o=t.v[n][1]+(i[1]-t.v[n][1])*r,h=t.o[n][0]+(i[0]-t.o[n][0])*-r,d=t.o[n][1]+(i[1]-t.o[n][1])*-r,b=t.i[n][0]+(i[0]-t.i[n][0])*-r,p=t.i[n][1]+(i[1]-t.i[n][1])*-r,a.setTripleAt(l,o,h,d,b,p,n);return a},PuckerAndBloatModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.amount.v;if(a!==0){var l,o;for(r=0;r<i;r+=1){if(l=this.shapes[r],o=l.localShapeCollection,!(!l.shape._mdf&&!this._mdf&&!t))for(o.releaseShapes(),l.shape._mdf=!0,e=l.shape.paths.shapes,n=l.shape.paths._length,s=0;s<n;s+=1)o.addShape(this.processPath(e[s],a));l.shape.paths=l.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};var TransformPropertyFactory=function(){var t=[0,0];function e(o){var h=this._mdf;this.iterateDynamicProperties(),this._mdf=this._mdf||h,this.a&&o.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.s&&o.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&o.skewFromAxis(-this.sk.v,this.sa.v),this.r?o.rotate(-this.r.v):o.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.data.p.s?this.data.p.z?o.translate(this.px.v,this.py.v,-this.pz.v):o.translate(this.px.v,this.py.v,0):o.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}function r(o){if(this.elem.globalData.frameId!==this.frameId){if(this._isDirty&&(this.precalculateMatrix(),this._isDirty=!1),this.iterateDynamicProperties(),this._mdf||o){var h;if(this.v.cloneFromProps(this.pre.props),this.appliedTransformations<1&&this.v.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations<2&&this.v.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.sk&&this.appliedTransformations<3&&this.v.skewFromAxis(-this.sk.v,this.sa.v),this.r&&this.appliedTransformations<4?this.v.rotate(-this.r.v):!this.r&&this.appliedTransformations<4&&this.v.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.autoOriented){var d,b;if(h=this.elem.globalData.frameRate,this.p&&this.p.keyframes&&this.p.getValueAtTime)this.p._caching.lastFrame+this.p.offsetTime<=this.p.keyframes[0].t?(d=this.p.getValueAtTime((this.p.keyframes[0].t+.01)/h,0),b=this.p.getValueAtTime(this.p.keyframes[0].t/h,0)):this.p._caching.lastFrame+this.p.offsetTime>=this.p.keyframes[this.p.keyframes.length-1].t?(d=this.p.getValueAtTime(this.p.keyframes[this.p.keyframes.length-1].t/h,0),b=this.p.getValueAtTime((this.p.keyframes[this.p.keyframes.length-1].t-.05)/h,0)):(d=this.p.pv,b=this.p.getValueAtTime((this.p._caching.lastFrame+this.p.offsetTime-.01)/h,this.p.offsetTime));else if(this.px&&this.px.keyframes&&this.py.keyframes&&this.px.getValueAtTime&&this.py.getValueAtTime){d=[],b=[];var p=this.px,E=this.py;p._caching.lastFrame+p.offsetTime<=p.keyframes[0].t?(d[0]=p.getValueAtTime((p.keyframes[0].t+.01)/h,0),d[1]=E.getValueAtTime((E.keyframes[0].t+.01)/h,0),b[0]=p.getValueAtTime(p.keyframes[0].t/h,0),b[1]=E.getValueAtTime(E.keyframes[0].t/h,0)):p._caching.lastFrame+p.offsetTime>=p.keyframes[p.keyframes.length-1].t?(d[0]=p.getValueAtTime(p.keyframes[p.keyframes.length-1].t/h,0),d[1]=E.getValueAtTime(E.keyframes[E.keyframes.length-1].t/h,0),b[0]=p.getValueAtTime((p.keyframes[p.keyframes.length-1].t-.01)/h,0),b[1]=E.getValueAtTime((E.keyframes[E.keyframes.length-1].t-.01)/h,0)):(d=[p.pv,E.pv],b[0]=p.getValueAtTime((p._caching.lastFrame+p.offsetTime-.01)/h,p.offsetTime),b[1]=E.getValueAtTime((E._caching.lastFrame+E.offsetTime-.01)/h,E.offsetTime))}else b=t,d=b;this.v.rotate(-Math.atan2(d[1]-b[1],d[0]-b[0]))}this.data.p&&this.data.p.s?this.data.p.z?this.v.translate(this.px.v,this.py.v,-this.pz.v):this.v.translate(this.px.v,this.py.v,0):this.v.translate(this.p.v[0],this.p.v[1],-this.p.v[2])}this.frameId=this.elem.globalData.frameId}}function i(){if(this.appliedTransformations=0,this.pre.reset(),!this.a.effectsSequence.length)this.pre.translate(-this.a.v[0],-this.a.v[1],this.a.v[2]),this.appliedTransformations=1;else return;if(!this.s.effectsSequence.length)this.pre.scale(this.s.v[0],this.s.v[1],this.s.v[2]),this.appliedTransformations=2;else return;if(this.sk)if(!this.sk.effectsSequence.length&&!this.sa.effectsSequence.length)this.pre.skewFromAxis(-this.sk.v,this.sa.v),this.appliedTransformations=3;else return;this.r?this.r.effectsSequence.length||(this.pre.rotate(-this.r.v),this.appliedTransformations=4):!this.rz.effectsSequence.length&&!this.ry.effectsSequence.length&&!this.rx.effectsSequence.length&&!this.or.effectsSequence.length&&(this.pre.rotateZ(-this.rz.v).rotateY(this.ry.v).rotateX(this.rx.v).rotateZ(-this.or.v[2]).rotateY(this.or.v[1]).rotateX(this.or.v[0]),this.appliedTransformations=4)}function s(){}function n(o){this._addDynamicProperty(o),this.elem.addDynamicProperty(o),this._isDirty=!0}function a(o,h,d){if(this.elem=o,this.frameId=-1,this.propType="transform",this.data=h,this.v=new Matrix,this.pre=new Matrix,this.appliedTransformations=0,this.initDynamicPropertyContainer(d||o),h.p&&h.p.s?(this.px=PropertyFactory.getProp(o,h.p.x,0,0,this),this.py=PropertyFactory.getProp(o,h.p.y,0,0,this),h.p.z&&(this.pz=PropertyFactory.getProp(o,h.p.z,0,0,this))):this.p=PropertyFactory.getProp(o,h.p||{k:[0,0,0]},1,0,this),h.rx){if(this.rx=PropertyFactory.getProp(o,h.rx,0,degToRads,this),this.ry=PropertyFactory.getProp(o,h.ry,0,degToRads,this),this.rz=PropertyFactory.getProp(o,h.rz,0,degToRads,this),h.or.k[0].ti){var b,p=h.or.k.length;for(b=0;b<p;b+=1)h.or.k[b].to=null,h.or.k[b].ti=null}this.or=PropertyFactory.getProp(o,h.or,1,degToRads,this),this.or.sh=!0}else this.r=PropertyFactory.getProp(o,h.r||{k:0},0,degToRads,this);h.sk&&(this.sk=PropertyFactory.getProp(o,h.sk,0,degToRads,this),this.sa=PropertyFactory.getProp(o,h.sa,0,degToRads,this)),this.a=PropertyFactory.getProp(o,h.a||{k:[0,0,0]},1,0,this),this.s=PropertyFactory.getProp(o,h.s||{k:[100,100,100]},1,.01,this),h.o?this.o=PropertyFactory.getProp(o,h.o,0,.01,o):this.o={_mdf:!1,v:1},this._isDirty=!0,this.dynamicProperties.length||this.getValue(!0)}a.prototype={applyToMatrix:e,getValue:r,precalculateMatrix:i,autoOrient:s},extendPrototype([DynamicPropertyContainer],a),a.prototype.addDynamicProperty=n,a.prototype._addDynamicProperty=DynamicPropertyContainer.prototype.addDynamicProperty;function l(o,h,d){return new a(o,h,d)}return{getTransformProperty:l}}();function RepeaterModifier(){}extendPrototype([ShapeModifier],RepeaterModifier),RepeaterModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.c=PropertyFactory.getProp(t,e.c,0,null,this),this.o=PropertyFactory.getProp(t,e.o,0,null,this),this.tr=TransformPropertyFactory.getTransformProperty(t,e.tr,this),this.so=PropertyFactory.getProp(t,e.tr.so,0,.01,this),this.eo=PropertyFactory.getProp(t,e.tr.eo,0,.01,this),this.data=e,this.dynamicProperties.length||this.getValue(!0),this._isAnimated=!!this.dynamicProperties.length,this.pMatrix=new Matrix,this.rMatrix=new Matrix,this.sMatrix=new Matrix,this.tMatrix=new Matrix,this.matrix=new Matrix},RepeaterModifier.prototype.applyTransforms=function(t,e,r,i,s,n){var a=n?-1:1,l=i.s.v[0]+(1-i.s.v[0])*(1-s),o=i.s.v[1]+(1-i.s.v[1])*(1-s);t.translate(i.p.v[0]*a*s,i.p.v[1]*a*s,i.p.v[2]),e.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),e.rotate(-i.r.v*a*s),e.translate(i.a.v[0],i.a.v[1],i.a.v[2]),r.translate(-i.a.v[0],-i.a.v[1],i.a.v[2]),r.scale(n?1/l:l,n?1/o:o),r.translate(i.a.v[0],i.a.v[1],i.a.v[2])},RepeaterModifier.prototype.init=function(t,e,r,i){for(this.elem=t,this.arr=e,this.pos=r,this.elemsData=i,this._currentCopies=0,this._elements=[],this._groups=[],this.frameId=-1,this.initDynamicPropertyContainer(t),this.initModifierProperties(t,e[r]);r>0;)r-=1,this._elements.unshift(e[r]);this.dynamicProperties.length?this.k=!0:this.getValue(!0)},RepeaterModifier.prototype.resetElements=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e]._processed=!1,t[e].ty==="gr"&&this.resetElements(t[e].it)},RepeaterModifier.prototype.cloneElements=function(t){var e=JSON.parse(JSON.stringify(t));return this.resetElements(e),e},RepeaterModifier.prototype.changeGroupRender=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]._render=e,t[r].ty==="gr"&&this.changeGroupRender(t[r].it,e)},RepeaterModifier.prototype.processShapes=function(t){var e,r,i,s,n,a=!1;if(this._mdf||t){var l=Math.ceil(this.c.v);if(this._groups.length<l){for(;this._groups.length<l;){var o={it:this.cloneElements(this._elements),ty:"gr"};o.it.push({a:{a:0,ix:1,k:[0,0]},nm:"Transform",o:{a:0,ix:7,k:100},p:{a:0,ix:2,k:[0,0]},r:{a:1,ix:6,k:[{s:0,e:0,t:0},{s:0,e:0,t:1}]},s:{a:0,ix:3,k:[100,100]},sa:{a:0,ix:5,k:0},sk:{a:0,ix:4,k:0},ty:"tr"}),this.arr.splice(0,0,o),this._groups.splice(0,0,o),this._currentCopies+=1}this.elem.reloadShapes(),a=!0}n=0;var h;for(i=0;i<=this._groups.length-1;i+=1){if(h=n<l,this._groups[i]._render=h,this.changeGroupRender(this._groups[i].it,h),!h){var d=this.elemsData[i].it,b=d[d.length-1];b.transform.op.v!==0?(b.transform.op._mdf=!0,b.transform.op.v=0):b.transform.op._mdf=!1}n+=1}this._currentCopies=l;var p=this.o.v,E=p%1,v=p>0?Math.floor(p):Math.ceil(p),u=this.pMatrix.props,x=this.rMatrix.props,c=this.sMatrix.props;this.pMatrix.reset(),this.rMatrix.reset(),this.sMatrix.reset(),this.tMatrix.reset(),this.matrix.reset();var m=0;if(p>0){for(;m<v;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),m+=1;E&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,E,!1),m+=E)}else if(p<0){for(;m>v;)this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!0),m-=1;E&&(this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,-E,!0),m-=E)}i=this.data.m===1?0:this._currentCopies-1,s=this.data.m===1?1:-1,n=this._currentCopies;for(var f,y;n;){if(e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,y=r.length,e[e.length-1].transform.mProps._mdf=!0,e[e.length-1].transform.op._mdf=!0,e[e.length-1].transform.op.v=this._currentCopies===1?this.so.v:this.so.v+(this.eo.v-this.so.v)*(i/(this._currentCopies-1)),m!==0){for((i!==0&&s===1||i!==this._currentCopies-1&&s===-1)&&this.applyTransforms(this.pMatrix,this.rMatrix,this.sMatrix,this.tr,1,!1),this.matrix.transform(x[0],x[1],x[2],x[3],x[4],x[5],x[6],x[7],x[8],x[9],x[10],x[11],x[12],x[13],x[14],x[15]),this.matrix.transform(c[0],c[1],c[2],c[3],c[4],c[5],c[6],c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15]),this.matrix.transform(u[0],u[1],u[2],u[3],u[4],u[5],u[6],u[7],u[8],u[9],u[10],u[11],u[12],u[13],u[14],u[15]),f=0;f<y;f+=1)r[f]=this.matrix.props[f];this.matrix.reset()}else for(this.matrix.reset(),f=0;f<y;f+=1)r[f]=this.matrix.props[f];m+=1,n-=1,i+=s}}else for(n=this._currentCopies,i=0,s=1;n;)e=this.elemsData[i].it,r=e[e.length-1].transform.mProps.v.props,e[e.length-1].transform.mProps._mdf=!1,e[e.length-1].transform.op._mdf=!1,n-=1,i+=s;return a},RepeaterModifier.prototype.addShape=function(){};function RoundCornersModifier(){}extendPrototype([ShapeModifier],RoundCornersModifier),RoundCornersModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.rd=PropertyFactory.getProp(t,e.r,0,null,this),this._isAnimated=!!this.rd.effectsSequence.length},RoundCornersModifier.prototype.processPath=function(t,e){var r=shapePool.newElement();r.c=t.c;var i,s=t._length,n,a,l,o,h,d,b=0,p,E,v,u,x,c;for(i=0;i<s;i+=1)n=t.v[i],l=t.o[i],a=t.i[i],n[0]===l[0]&&n[1]===l[1]&&n[0]===a[0]&&n[1]===a[1]?(i===0||i===s-1)&&!t.c?(r.setTripleAt(n[0],n[1],l[0],l[1],a[0],a[1],b),b+=1):(i===0?o=t.v[s-1]:o=t.v[i-1],h=Math.sqrt(Math.pow(n[0]-o[0],2)+Math.pow(n[1]-o[1],2)),d=h?Math.min(h/2,e)/h:0,x=n[0]+(o[0]-n[0])*d,p=x,c=n[1]-(n[1]-o[1])*d,E=c,v=p-(p-n[0])*roundCorner,u=E-(E-n[1])*roundCorner,r.setTripleAt(p,E,v,u,x,c,b),b+=1,i===s-1?o=t.v[0]:o=t.v[i+1],h=Math.sqrt(Math.pow(n[0]-o[0],2)+Math.pow(n[1]-o[1],2)),d=h?Math.min(h/2,e)/h:0,v=n[0]+(o[0]-n[0])*d,p=v,u=n[1]+(o[1]-n[1])*d,E=u,x=p-(p-n[0])*roundCorner,c=E-(E-n[1])*roundCorner,r.setTripleAt(p,E,v,u,x,c,b),b+=1):(r.setTripleAt(t.v[i][0],t.v[i][1],t.o[i][0],t.o[i][1],t.i[i][0],t.i[i][1],b),b+=1);return r},RoundCornersModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.rd.v;if(a!==0){var l,o;for(r=0;r<i;r+=1){if(l=this.shapes[r],o=l.localShapeCollection,!(!l.shape._mdf&&!this._mdf&&!t))for(o.releaseShapes(),l.shape._mdf=!0,e=l.shape.paths.shapes,n=l.shape.paths._length,s=0;s<n;s+=1)o.addShape(this.processPath(e[s],a));l.shape.paths=l.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function floatEqual(t,e){return Math.abs(t-e)*1e5<=Math.min(Math.abs(t),Math.abs(e))}function floatZero(t){return Math.abs(t)<=1e-5}function lerp(t,e,r){return t*(1-r)+e*r}function lerpPoint(t,e,r){return[lerp(t[0],e[0],r),lerp(t[1],e[1],r)]}function quadRoots(t,e,r){if(t===0)return[];var i=e*e-4*t*r;if(i<0)return[];var s=-e/(2*t);if(i===0)return[s];var n=Math.sqrt(i)/(2*t);return[s-n,s+n]}function polynomialCoefficients(t,e,r,i){return[-t+3*e-3*r+i,3*t-6*e+3*r,-3*t+3*e,t]}function singlePoint(t){return new PolynomialBezier(t,t,t,t,!1)}function PolynomialBezier(t,e,r,i,s){s&&pointEqual(t,e)&&(e=lerpPoint(t,i,1/3)),s&&pointEqual(r,i)&&(r=lerpPoint(t,i,2/3));var n=polynomialCoefficients(t[0],e[0],r[0],i[0]),a=polynomialCoefficients(t[1],e[1],r[1],i[1]);this.a=[n[0],a[0]],this.b=[n[1],a[1]],this.c=[n[2],a[2]],this.d=[n[3],a[3]],this.points=[t,e,r,i]}PolynomialBezier.prototype.point=function(t){return[((this.a[0]*t+this.b[0])*t+this.c[0])*t+this.d[0],((this.a[1]*t+this.b[1])*t+this.c[1])*t+this.d[1]]},PolynomialBezier.prototype.derivative=function(t){return[(3*t*this.a[0]+2*this.b[0])*t+this.c[0],(3*t*this.a[1]+2*this.b[1])*t+this.c[1]]},PolynomialBezier.prototype.tangentAngle=function(t){var e=this.derivative(t);return Math.atan2(e[1],e[0])},PolynomialBezier.prototype.normalAngle=function(t){var e=this.derivative(t);return Math.atan2(e[0],e[1])},PolynomialBezier.prototype.inflectionPoints=function(){var t=this.a[1]*this.b[0]-this.a[0]*this.b[1];if(floatZero(t))return[];var e=-.5*(this.a[1]*this.c[0]-this.a[0]*this.c[1])/t,r=e*e-1/3*(this.b[1]*this.c[0]-this.b[0]*this.c[1])/t;if(r<0)return[];var i=Math.sqrt(r);return floatZero(i)?i>0&&i<1?[e]:[]:[e-i,e+i].filter(function(s){return s>0&&s<1})},PolynomialBezier.prototype.split=function(t){if(t<=0)return[singlePoint(this.points[0]),this];if(t>=1)return[this,singlePoint(this.points[this.points.length-1])];var e=lerpPoint(this.points[0],this.points[1],t),r=lerpPoint(this.points[1],this.points[2],t),i=lerpPoint(this.points[2],this.points[3],t),s=lerpPoint(e,r,t),n=lerpPoint(r,i,t),a=lerpPoint(s,n,t);return[new PolynomialBezier(this.points[0],e,s,a,!0),new PolynomialBezier(a,n,i,this.points[3],!0)]};function extrema(t,e){var r=t.points[0][e],i=t.points[t.points.length-1][e];if(r>i){var s=i;i=r,r=s}for(var n=quadRoots(3*t.a[e],2*t.b[e],t.c[e]),a=0;a<n.length;a+=1)if(n[a]>0&&n[a]<1){var l=t.point(n[a])[e];l<r?r=l:l>i&&(i=l)}return{min:r,max:i}}PolynomialBezier.prototype.bounds=function(){return{x:extrema(this,0),y:extrema(this,1)}},PolynomialBezier.prototype.boundingBox=function(){var t=this.bounds();return{left:t.x.min,right:t.x.max,top:t.y.min,bottom:t.y.max,width:t.x.max-t.x.min,height:t.y.max-t.y.min,cx:(t.x.max+t.x.min)/2,cy:(t.y.max+t.y.min)/2}};function intersectData(t,e,r){var i=t.boundingBox();return{cx:i.cx,cy:i.cy,width:i.width,height:i.height,bez:t,t:(e+r)/2,t1:e,t2:r}}function splitData(t){var e=t.bez.split(.5);return[intersectData(e[0],t.t1,t.t),intersectData(e[1],t.t,t.t2)]}function boxIntersect(t,e){return Math.abs(t.cx-e.cx)*2<t.width+e.width&&Math.abs(t.cy-e.cy)*2<t.height+e.height}function intersectsImpl(t,e,r,i,s,n){if(boxIntersect(t,e)){if(r>=n||t.width<=i&&t.height<=i&&e.width<=i&&e.height<=i){s.push([t.t,e.t]);return}var a=splitData(t),l=splitData(e);intersectsImpl(a[0],l[0],r+1,i,s,n),intersectsImpl(a[0],l[1],r+1,i,s,n),intersectsImpl(a[1],l[0],r+1,i,s,n),intersectsImpl(a[1],l[1],r+1,i,s,n)}}PolynomialBezier.prototype.intersections=function(t,e,r){e===void 0&&(e=2),r===void 0&&(r=7);var i=[];return intersectsImpl(intersectData(this,0,1),intersectData(t,0,1),0,e,i,r),i},PolynomialBezier.shapeSegment=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[e],t.o[e],t.i[r],t.v[r],!0)},PolynomialBezier.shapeSegmentInverted=function(t,e){var r=(e+1)%t.length();return new PolynomialBezier(t.v[r],t.i[r],t.o[e],t.v[e],!0)};function crossProduct(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function lineIntersection(t,e,r,i){var s=[t[0],t[1],1],n=[e[0],e[1],1],a=[r[0],r[1],1],l=[i[0],i[1],1],o=crossProduct(crossProduct(s,n),crossProduct(a,l));return floatZero(o[2])?null:[o[0]/o[2],o[1]/o[2]]}function polarOffset(t,e,r){return[t[0]+Math.cos(e)*r,t[1]-Math.sin(e)*r]}function pointDistance(t,e){return Math.hypot(t[0]-e[0],t[1]-e[1])}function pointEqual(t,e){return floatEqual(t[0],e[0])&&floatEqual(t[1],e[1])}function ZigZagModifier(){}extendPrototype([ShapeModifier],ZigZagModifier),ZigZagModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amplitude=PropertyFactory.getProp(t,e.s,0,null,this),this.frequency=PropertyFactory.getProp(t,e.r,0,null,this),this.pointsType=PropertyFactory.getProp(t,e.pt,0,null,this),this._isAnimated=this.amplitude.effectsSequence.length!==0||this.frequency.effectsSequence.length!==0||this.pointsType.effectsSequence.length!==0};function setPoint(t,e,r,i,s,n,a){var l=r-Math.PI/2,o=r+Math.PI/2,h=e[0]+Math.cos(r)*i*s,d=e[1]-Math.sin(r)*i*s;t.setTripleAt(h,d,h+Math.cos(l)*n,d-Math.sin(l)*n,h+Math.cos(o)*a,d-Math.sin(o)*a,t.length())}function getPerpendicularVector(t,e){var r=[e[0]-t[0],e[1]-t[1]],i=-Math.PI*.5,s=[Math.cos(i)*r[0]-Math.sin(i)*r[1],Math.sin(i)*r[0]+Math.cos(i)*r[1]];return s}function getProjectingAngle(t,e){var r=e===0?t.length()-1:e-1,i=(e+1)%t.length(),s=t.v[r],n=t.v[i],a=getPerpendicularVector(s,n);return Math.atan2(0,1)-Math.atan2(a[1],a[0])}function zigZagCorner(t,e,r,i,s,n,a){var l=getProjectingAngle(e,r),o=e.v[r%e._length],h=e.v[r===0?e._length-1:r-1],d=e.v[(r+1)%e._length],b=n===2?Math.sqrt(Math.pow(o[0]-h[0],2)+Math.pow(o[1]-h[1],2)):0,p=n===2?Math.sqrt(Math.pow(o[0]-d[0],2)+Math.pow(o[1]-d[1],2)):0;setPoint(t,e.v[r%e._length],l,a,i,p/((s+1)*2),b/((s+1)*2))}function zigZagSegment(t,e,r,i,s,n){for(var a=0;a<i;a+=1){var l=(a+1)/(i+1),o=s===2?Math.sqrt(Math.pow(e.points[3][0]-e.points[0][0],2)+Math.pow(e.points[3][1]-e.points[0][1],2)):0,h=e.normalAngle(l),d=e.point(l);setPoint(t,d,h,n,r,o/((i+1)*2),o/((i+1)*2)),n=-n}return n}ZigZagModifier.prototype.processPath=function(t,e,r,i){var s=t._length,n=shapePool.newElement();if(n.c=t.c,t.c||(s-=1),s===0)return n;var a=-1,l=PolynomialBezier.shapeSegment(t,0);zigZagCorner(n,t,0,e,r,i,a);for(var o=0;o<s;o+=1)a=zigZagSegment(n,l,e,r,i,-a),o===s-1&&!t.c?l=null:l=PolynomialBezier.shapeSegment(t,(o+1)%s),zigZagCorner(n,t,o+1,e,r,i,a);return n},ZigZagModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.amplitude.v,l=Math.max(0,Math.round(this.frequency.v)),o=this.pointsType.v;if(a!==0){var h,d;for(r=0;r<i;r+=1){if(h=this.shapes[r],d=h.localShapeCollection,!(!h.shape._mdf&&!this._mdf&&!t))for(d.releaseShapes(),h.shape._mdf=!0,e=h.shape.paths.shapes,n=h.shape.paths._length,s=0;s<n;s+=1)d.addShape(this.processPath(e[s],a,l,o));h.shape.paths=h.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function linearOffset(t,e,r){var i=Math.atan2(e[0]-t[0],e[1]-t[1]);return[polarOffset(t,i,r),polarOffset(e,i,r)]}function offsetSegment(t,e){var r,i,s,n,a,l,o;o=linearOffset(t.points[0],t.points[1],e),r=o[0],i=o[1],o=linearOffset(t.points[1],t.points[2],e),s=o[0],n=o[1],o=linearOffset(t.points[2],t.points[3],e),a=o[0],l=o[1];var h=lineIntersection(r,i,s,n);h===null&&(h=i);var d=lineIntersection(a,l,s,n);return d===null&&(d=a),new PolynomialBezier(r,h,d,l)}function joinLines(t,e,r,i,s){var n=e.points[3],a=r.points[0];if(i===3||pointEqual(n,a))return n;if(i===2){var l=-e.tangentAngle(1),o=-r.tangentAngle(0)+Math.PI,h=lineIntersection(n,polarOffset(n,l+Math.PI/2,100),a,polarOffset(a,l+Math.PI/2,100)),d=h?pointDistance(h,n):pointDistance(n,a)/2,b=polarOffset(n,l,2*d*roundCorner);return t.setXYAt(b[0],b[1],"o",t.length()-1),b=polarOffset(a,o,2*d*roundCorner),t.setTripleAt(a[0],a[1],a[0],a[1],b[0],b[1],t.length()),a}var p=pointEqual(n,e.points[2])?e.points[0]:e.points[2],E=pointEqual(a,r.points[1])?r.points[3]:r.points[1],v=lineIntersection(p,n,a,E);return v&&pointDistance(v,n)<s?(t.setTripleAt(v[0],v[1],v[0],v[1],v[0],v[1],t.length()),v):n}function getIntersection(t,e){var r=t.intersections(e);return r.length&&floatEqual(r[0][0],1)&&r.shift(),r.length?r[0]:null}function pruneSegmentIntersection(t,e){var r=t.slice(),i=e.slice(),s=getIntersection(t[t.length-1],e[0]);return s&&(r[t.length-1]=t[t.length-1].split(s[0])[0],i[0]=e[0].split(s[1])[1]),t.length>1&&e.length>1&&(s=getIntersection(t[0],e[e.length-1]),s)?[[t[0].split(s[0])[0]],[e[e.length-1].split(s[1])[1]]]:[r,i]}function pruneIntersections(t){for(var e,r=1;r<t.length;r+=1)e=pruneSegmentIntersection(t[r-1],t[r]),t[r-1]=e[0],t[r]=e[1];return t.length>1&&(e=pruneSegmentIntersection(t[t.length-1],t[0]),t[t.length-1]=e[0],t[0]=e[1]),t}function offsetSegmentSplit(t,e){var r=t.inflectionPoints(),i,s,n,a;if(r.length===0)return[offsetSegment(t,e)];if(r.length===1||floatEqual(r[1],1))return n=t.split(r[0]),i=n[0],s=n[1],[offsetSegment(i,e),offsetSegment(s,e)];n=t.split(r[0]),i=n[0];var l=(r[1]-r[0])/(1-r[0]);return n=n[1].split(l),a=n[0],s=n[1],[offsetSegment(i,e),offsetSegment(a,e),offsetSegment(s,e)]}function OffsetPathModifier(){}extendPrototype([ShapeModifier],OffsetPathModifier),OffsetPathModifier.prototype.initModifierProperties=function(t,e){this.getValue=this.processKeys,this.amount=PropertyFactory.getProp(t,e.a,0,null,this),this.miterLimit=PropertyFactory.getProp(t,e.ml,0,null,this),this.lineJoin=e.lj,this._isAnimated=this.amount.effectsSequence.length!==0},OffsetPathModifier.prototype.processPath=function(t,e,r,i){var s=shapePool.newElement();s.c=t.c;var n=t.length();t.c||(n-=1);var a,l,o,h=[];for(a=0;a<n;a+=1)o=PolynomialBezier.shapeSegment(t,a),h.push(offsetSegmentSplit(o,e));if(!t.c)for(a=n-1;a>=0;a-=1)o=PolynomialBezier.shapeSegmentInverted(t,a),h.push(offsetSegmentSplit(o,e));h=pruneIntersections(h);var d=null,b=null;for(a=0;a<h.length;a+=1){var p=h[a];for(b&&(d=joinLines(s,b,p[0],r,i)),b=p[p.length-1],l=0;l<p.length;l+=1)o=p[l],d&&pointEqual(o.points[0],d)?s.setXYAt(o.points[1][0],o.points[1][1],"o",s.length()-1):s.setTripleAt(o.points[0][0],o.points[0][1],o.points[1][0],o.points[1][1],o.points[0][0],o.points[0][1],s.length()),s.setTripleAt(o.points[3][0],o.points[3][1],o.points[3][0],o.points[3][1],o.points[2][0],o.points[2][1],s.length()),d=o.points[3]}return h.length&&joinLines(s,b,h[0][0],r,i),s},OffsetPathModifier.prototype.processShapes=function(t){var e,r,i=this.shapes.length,s,n,a=this.amount.v,l=this.miterLimit.v,o=this.lineJoin;if(a!==0){var h,d;for(r=0;r<i;r+=1){if(h=this.shapes[r],d=h.localShapeCollection,!(!h.shape._mdf&&!this._mdf&&!t))for(d.releaseShapes(),h.shape._mdf=!0,e=h.shape.paths.shapes,n=h.shape.paths._length,s=0;s<n;s+=1)d.addShape(this.processPath(e[s],a,o,l));h.shape.paths=h.localShapeCollection}}this.dynamicProperties.length||(this._mdf=!1)};function getFontProperties(t){for(var e=t.fStyle?t.fStyle.split(" "):[],r="normal",i="normal",s=e.length,n,a=0;a<s;a+=1)switch(n=e[a].toLowerCase(),n){case"italic":i="italic";break;case"bold":r="700";break;case"black":r="900";break;case"medium":r="500";break;case"regular":case"normal":r="400";break;case"light":case"thin":r="200";break}return{style:i,weight:t.fWeight||r}}var FontManager=function(){var t=5e3,e={w:0,size:0,shapes:[],data:{shapes:[]}},r=[];r=r.concat([2304,2305,2306,2307,2362,2363,2364,2364,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2387,2388,2389,2390,2391,2402,2403]);var i=127988,s=917631,n=917601,a=917626,l=65039,o=8205,h=127462,d=127487,b=["d83cdffb","d83cdffc","d83cdffd","d83cdffe","d83cdfff"];function p(C){var _=C.split(","),g,S=_.length,w=[];for(g=0;g<S;g+=1)_[g]!=="sans-serif"&&_[g]!=="monospace"&&w.push(_[g]);return w.join(",")}function E(C,_){var g=createTag("span");g.setAttribute("aria-hidden",!0),g.style.fontFamily=_;var S=createTag("span");S.innerText="giItT1WQy@!-/#",g.style.position="absolute",g.style.left="-10000px",g.style.top="-10000px",g.style.fontSize="300px",g.style.fontVariant="normal",g.style.fontStyle="normal",g.style.fontWeight="normal",g.style.letterSpacing="0",g.appendChild(S),document.body.appendChild(g);var w=S.offsetWidth;return S.style.fontFamily=p(C)+", "+_,{node:S,w,parent:g}}function v(){var C,_=this.fonts.length,g,S,w=_;for(C=0;C<_;C+=1)this.fonts[C].loaded?w-=1:this.fonts[C].fOrigin==="n"||this.fonts[C].origin===0?this.fonts[C].loaded=!0:(g=this.fonts[C].monoCase.node,S=this.fonts[C].monoCase.w,g.offsetWidth!==S?(w-=1,this.fonts[C].loaded=!0):(g=this.fonts[C].sansCase.node,S=this.fonts[C].sansCase.w,g.offsetWidth!==S&&(w-=1,this.fonts[C].loaded=!0)),this.fonts[C].loaded&&(this.fonts[C].sansCase.parent.parentNode.removeChild(this.fonts[C].sansCase.parent),this.fonts[C].monoCase.parent.parentNode.removeChild(this.fonts[C].monoCase.parent)));w!==0&&Date.now()-this.initTime<t?setTimeout(this.checkLoadedFontsBinded,20):setTimeout(this.setIsLoadedBinded,10)}function u(C,_){var g=document.body&&_?"svg":"canvas",S,w=getFontProperties(C);if(g==="svg"){var M=createNS("text");M.style.fontSize="100px",M.setAttribute("font-family",C.fFamily),M.setAttribute("font-style",w.style),M.setAttribute("font-weight",w.weight),M.textContent="1",C.fClass?(M.style.fontFamily="inherit",M.setAttribute("class",C.fClass)):M.style.fontFamily=C.fFamily,_.appendChild(M),S=M}else{var V=new OffscreenCanvas(500,500).getContext("2d");V.font=w.style+" "+w.weight+" 100px "+C.fFamily,S=V}function G(z){return g==="svg"?(S.textContent=z,S.getComputedTextLength()):S.measureText(z).width}return{measureText:G}}function x(C,_){if(!C){this.isLoaded=!0;return}if(this.chars){this.isLoaded=!0,this.fonts=C.list;return}if(!document.body){this.isLoaded=!0,C.list.forEach(function(U){U.helper=u(U),U.cache={}}),this.fonts=C.list;return}var g=C.list,S,w=g.length,M=w;for(S=0;S<w;S+=1){var V=!0,G,z;if(g[S].loaded=!1,g[S].monoCase=E(g[S].fFamily,"monospace"),g[S].sansCase=E(g[S].fFamily,"sans-serif"),!g[S].fPath)g[S].loaded=!0,M-=1;else if(g[S].fOrigin==="p"||g[S].origin===3){if(G=document.querySelectorAll('style[f-forigin="p"][f-family="'+g[S].fFamily+'"], style[f-origin="3"][f-family="'+g[S].fFamily+'"]'),G.length>0&&(V=!1),V){var H=createTag("style");H.setAttribute("f-forigin",g[S].fOrigin),H.setAttribute("f-origin",g[S].origin),H.setAttribute("f-family",g[S].fFamily),H.type="text/css",H.innerText="@font-face {font-family: "+g[S].fFamily+"; font-style: normal; src: url('"+g[S].fPath+"');}",_.appendChild(H)}}else if(g[S].fOrigin==="g"||g[S].origin===1){for(G=document.querySelectorAll('link[f-forigin="g"], link[f-origin="1"]'),z=0;z<G.length;z+=1)G[z].href.indexOf(g[S].fPath)!==-1&&(V=!1);if(V){var $=createTag("link");$.setAttribute("f-forigin",g[S].fOrigin),$.setAttribute("f-origin",g[S].origin),$.type="text/css",$.rel="stylesheet",$.href=g[S].fPath,document.body.appendChild($)}}else if(g[S].fOrigin==="t"||g[S].origin===2){for(G=document.querySelectorAll('script[f-forigin="t"], script[f-origin="2"]'),z=0;z<G.length;z+=1)g[S].fPath===G[z].src&&(V=!1);if(V){var q=createTag("link");q.setAttribute("f-forigin",g[S].fOrigin),q.setAttribute("f-origin",g[S].origin),q.setAttribute("rel","stylesheet"),q.setAttribute("href",g[S].fPath),_.appendChild(q)}}g[S].helper=u(g[S],_),g[S].cache={},this.fonts.push(g[S])}M===0?this.isLoaded=!0:setTimeout(this.checkLoadedFonts.bind(this),100)}function c(C){if(C){this.chars||(this.chars=[]);var _,g=C.length,S,w=this.chars.length,M;for(_=0;_<g;_+=1){for(S=0,M=!1;S<w;)this.chars[S].style===C[_].style&&this.chars[S].fFamily===C[_].fFamily&&this.chars[S].ch===C[_].ch&&(M=!0),S+=1;M||(this.chars.push(C[_]),w+=1)}}}function m(C,_,g){for(var S=0,w=this.chars.length;S<w;){if(this.chars[S].ch===C&&this.chars[S].style===_&&this.chars[S].fFamily===g)return this.chars[S];S+=1}return(typeof C=="string"&&C.charCodeAt(0)!==13||!C)&&console&&console.warn&&!this._warned&&(this._warned=!0,console.warn("Missing character from exported characters list: ",C,_,g)),e}function f(C,_,g){var S=this.getFontByName(_),w=C;if(!S.cache[w]){var M=S.helper;if(C===" "){var V=M.measureText("|"+C+"|"),G=M.measureText("||");S.cache[w]=(V-G)/100}else S.cache[w]=M.measureText(C)/100}return S.cache[w]*g}function y(C){for(var _=0,g=this.fonts.length;_<g;){if(this.fonts[_].fName===C)return this.fonts[_];_+=1}return this.fonts[0]}function P(C){var _=0,g=C.charCodeAt(0);if(g>=55296&&g<=56319){var S=C.charCodeAt(1);S>=56320&&S<=57343&&(_=(g-55296)*1024+S-56320+65536)}return _}function A(C,_){var g=C.toString(16)+_.toString(16);return b.indexOf(g)!==-1}function T(C){return C===o}function F(C){return C===l}function k(C){var _=P(C);return _>=h&&_<=d}function O(C){return k(C.substr(0,2))&&k(C.substr(2,2))}function L(C){return r.indexOf(C)!==-1}function R(C,_){var g=P(C.substr(_,2));if(g!==i)return!1;var S=0;for(_+=2;S<5;){if(g=P(C.substr(_,2)),g<n||g>a)return!1;S+=1,_+=2}return P(C.substr(_,2))===s}function D(){this.isLoaded=!0}var B=function(){this.fonts=[],this.chars=null,this.typekitLoaded=0,this.isLoaded=!1,this._warned=!1,this.initTime=Date.now(),this.setIsLoadedBinded=this.setIsLoaded.bind(this),this.checkLoadedFontsBinded=this.checkLoadedFonts.bind(this)};B.isModifier=A,B.isZeroWidthJoiner=T,B.isFlagEmoji=O,B.isRegionalCode=k,B.isCombinedCharacter=L,B.isRegionalFlag=R,B.isVariationSelector=F,B.BLACK_FLAG_CODE_POINT=i;var I={addChars:c,addFonts:x,getCharData:m,getFontByName:y,measureText:f,checkLoadedFonts:v,setIsLoaded:D};return B.prototype=I,B}();function SlotManager(t){this.animationData=t}SlotManager.prototype.getProp=function(t){return this.animationData.slots&&this.animationData.slots[t.sid]?Object.assign(t,this.animationData.slots[t.sid].p):t};function slotFactory(t){return new SlotManager(t)}function RenderableElement(){}RenderableElement.prototype={initRenderable:function(){this.isInRange=!1,this.hidden=!1,this.isTransparent=!1,this.renderableComponents=[]},addRenderableComponent:function(e){this.renderableComponents.indexOf(e)===-1&&this.renderableComponents.push(e)},removeRenderableComponent:function(e){this.renderableComponents.indexOf(e)!==-1&&this.renderableComponents.splice(this.renderableComponents.indexOf(e),1)},prepareRenderableFrame:function(e){this.checkLayerLimits(e)},checkTransparency:function(){this.finalTransform.mProp.o.v<=0?!this.isTransparent&&this.globalData.renderConfig.hideOnTransparent&&(this.isTransparent=!0,this.hide()):this.isTransparent&&(this.isTransparent=!1,this.show())},checkLayerLimits:function(e){this.data.ip-this.data.st<=e&&this.data.op-this.data.st>e?this.isInRange!==!0&&(this.globalData._mdf=!0,this._mdf=!0,this.isInRange=!0,this.show()):this.isInRange!==!1&&(this.globalData._mdf=!0,this.isInRange=!1,this.hide())},renderRenderable:function(){var e,r=this.renderableComponents.length;for(e=0;e<r;e+=1)this.renderableComponents[e].renderFrame(this._isFirstFrame)},sourceRectAtTime:function(){return{top:0,left:0,width:100,height:100}},getLayerSize:function(){return this.data.ty===5?{w:this.data.textData.width,h:this.data.textData.height}:{w:this.data.width,h:this.data.height}}};var getBlendMode=function(){var t={0:"source-over",1:"multiply",2:"screen",3:"overlay",4:"darken",5:"lighten",6:"color-dodge",7:"color-burn",8:"hard-light",9:"soft-light",10:"difference",11:"exclusion",12:"hue",13:"saturation",14:"color",15:"luminosity"};return function(e){return t[e]||""}}();function SliderEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function AngleEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function ColorEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function PointEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,1,0,r)}function LayerIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function MaskIndexEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function CheckboxEffect(t,e,r){this.p=PropertyFactory.getProp(e,t.v,0,0,r)}function NoValueEffect(){this.p={}}function EffectsManager(t,e){var r=t.ef||[];this.effectElements=[];var i,s=r.length,n;for(i=0;i<s;i+=1)n=new GroupEffect(r[i],e),this.effectElements.push(n)}function GroupEffect(t,e){this.init(t,e)}extendPrototype([DynamicPropertyContainer],GroupEffect),GroupEffect.prototype.getValue=GroupEffect.prototype.iterateDynamicProperties,GroupEffect.prototype.init=function(t,e){this.data=t,this.effectElements=[],this.initDynamicPropertyContainer(e);var r,i=this.data.ef.length,s,n=this.data.ef;for(r=0;r<i;r+=1){switch(s=null,n[r].ty){case 0:s=new SliderEffect(n[r],e,this);break;case 1:s=new AngleEffect(n[r],e,this);break;case 2:s=new ColorEffect(n[r],e,this);break;case 3:s=new PointEffect(n[r],e,this);break;case 4:case 7:s=new CheckboxEffect(n[r],e,this);break;case 10:s=new LayerIndexEffect(n[r],e,this);break;case 11:s=new MaskIndexEffect(n[r],e,this);break;case 5:s=new EffectsManager(n[r],e);break;default:s=new NoValueEffect(n[r]);break}s&&this.effectElements.push(s)}};function BaseElement(){}BaseElement.prototype={checkMasks:function(){if(!this.data.hasMask)return!1;for(var e=0,r=this.data.masksProperties.length;e<r;){if(this.data.masksProperties[e].mode!=="n"&&this.data.masksProperties[e].cl!==!1)return!0;e+=1}return!1},initExpressions:function(){var e=getExpressionInterfaces();if(e){var r=e("layer"),i=e("effects"),s=e("shape"),n=e("text"),a=e("comp");this.layerInterface=r(this),this.data.hasMask&&this.maskManager&&this.layerInterface.registerMaskInterface(this.maskManager);var l=i.createEffectsInterface(this,this.layerInterface);this.layerInterface.registerEffectsInterface(l),this.data.ty===0||this.data.xt?this.compInterface=a(this):this.data.ty===4?(this.layerInterface.shapeInterface=s(this.shapesData,this.itemsData,this.layerInterface),this.layerInterface.content=this.layerInterface.shapeInterface):this.data.ty===5&&(this.layerInterface.textInterface=n(this),this.layerInterface.text=this.layerInterface.textInterface)}},setBlendMode:function(){var e=getBlendMode(this.data.bm),r=this.baseElement||this.layerElement;r.style["mix-blend-mode"]=e},initBaseData:function(e,r,i){this.globalData=r,this.comp=i,this.data=e,this.layerId=createElementID(),this.data.sr||(this.data.sr=1),this.effectsManager=new EffectsManager(this.data,this,this.dynamicProperties)},getType:function(){return this.type},sourceRectAtTime:function(){}};function FrameElement(){}FrameElement.prototype={initFrame:function(){this._isFirstFrame=!1,this.dynamicProperties=[],this._mdf=!1},prepareProperties:function(e,r){var i,s=this.dynamicProperties.length;for(i=0;i<s;i+=1)(r||this._isParent&&this.dynamicProperties[i].propType==="transform")&&(this.dynamicProperties[i].getValue(),this.dynamicProperties[i]._mdf&&(this.globalData._mdf=!0,this._mdf=!0))},addDynamicProperty:function(e){this.dynamicProperties.indexOf(e)===-1&&this.dynamicProperties.push(e)}};function FootageElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.footageData=e.imageLoader.getAsset(this.assetData),this.initBaseData(t,e,r)}FootageElement.prototype.prepareFrame=function(){},extendPrototype([RenderableElement,BaseElement,FrameElement],FootageElement),FootageElement.prototype.getBaseElement=function(){return null},FootageElement.prototype.renderFrame=function(){},FootageElement.prototype.destroy=function(){},FootageElement.prototype.initExpressions=function(){var t=getExpressionInterfaces();if(t){var e=t("footage");this.layerInterface=e(this)}},FootageElement.prototype.getFootageData=function(){return this.footageData};function AudioElement(t,e,r){this.initFrame(),this.initRenderable(),this.assetData=e.getAssetData(t.refId),this.initBaseData(t,e,r),this._isPlaying=!1,this._canPlay=!1;var i=this.globalData.getAssetsPath(this.assetData);this.audio=this.globalData.audioController.createAudio(i),this._currentTime=0,this.globalData.audioController.addAudio(this),this._volumeMultiplier=1,this._volume=1,this._previousVolume=null,this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0},this.lv=PropertyFactory.getProp(this,t.au&&t.au.lv?t.au.lv:{k:[100]},1,.01,this)}AudioElement.prototype.prepareFrame=function(t){if(this.prepareRenderableFrame(t,!0),this.prepareProperties(t,!0),this.tm._placeholder)this._currentTime=t/this.data.sr;else{var e=this.tm.v;this._currentTime=e}this._volume=this.lv.v[0];var r=this._volume*this._volumeMultiplier;this._previousVolume!==r&&(this._previousVolume=r,this.audio.volume(r))},extendPrototype([RenderableElement,BaseElement,FrameElement],AudioElement),AudioElement.prototype.renderFrame=function(){this.isInRange&&this._canPlay&&(this._isPlaying?(!this.audio.playing()||Math.abs(this._currentTime/this.globalData.frameRate-this.audio.seek())>.1)&&this.audio.seek(this._currentTime/this.globalData.frameRate):(this.audio.play(),this.audio.seek(this._currentTime/this.globalData.frameRate),this._isPlaying=!0))},AudioElement.prototype.show=function(){},AudioElement.prototype.hide=function(){this.audio.pause(),this._isPlaying=!1},AudioElement.prototype.pause=function(){this.audio.pause(),this._isPlaying=!1,this._canPlay=!1},AudioElement.prototype.resume=function(){this._canPlay=!0},AudioElement.prototype.setRate=function(t){this.audio.rate(t)},AudioElement.prototype.volume=function(t){this._volumeMultiplier=t,this._previousVolume=t*this._volume,this.audio.volume(this._previousVolume)},AudioElement.prototype.getBaseElement=function(){return null},AudioElement.prototype.destroy=function(){},AudioElement.prototype.sourceRectAtTime=function(){},AudioElement.prototype.initExpressions=function(){};function BaseRenderer(){}BaseRenderer.prototype.checkLayers=function(t){var e,r=this.layers.length,i;for(this.completeLayers=!0,e=r-1;e>=0;e-=1)this.elements[e]||(i=this.layers[e],i.ip-i.st<=t-this.layers[e].st&&i.op-i.st>t-this.layers[e].st&&this.buildItem(e)),this.completeLayers=this.elements[e]?this.completeLayers:!1;this.checkPendingElements()},BaseRenderer.prototype.createItem=function(t){switch(t.ty){case 2:return this.createImage(t);case 0:return this.createComp(t);case 1:return this.createSolid(t);case 3:return this.createNull(t);case 4:return this.createShape(t);case 5:return this.createText(t);case 6:return this.createAudio(t);case 13:return this.createCamera(t);case 15:return this.createFootage(t);default:return this.createNull(t)}},BaseRenderer.prototype.createCamera=function(){throw new Error("You're using a 3d camera. Try the html renderer.")},BaseRenderer.prototype.createAudio=function(t){return new AudioElement(t,this.globalData,this)},BaseRenderer.prototype.createFootage=function(t){return new FootageElement(t,this.globalData,this)},BaseRenderer.prototype.buildAllItems=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.buildItem(t);this.checkPendingElements()},BaseRenderer.prototype.includeLayers=function(t){this.completeLayers=!1;var e,r=t.length,i,s=this.layers.length;for(e=0;e<r;e+=1)for(i=0;i<s;){if(this.layers[i].id===t[e].id){this.layers[i]=t[e];break}i+=1}},BaseRenderer.prototype.setProjectInterface=function(t){this.globalData.projectInterface=t},BaseRenderer.prototype.initItems=function(){this.globalData.progressiveLoad||this.buildAllItems()},BaseRenderer.prototype.buildElementParenting=function(t,e,r){for(var i=this.elements,s=this.layers,n=0,a=s.length;n<a;)s[n].ind==e&&(!i[n]||i[n]===!0?(this.buildItem(n),this.addPendingElement(t)):(r.push(i[n]),i[n].setAsParent(),s[n].parent!==void 0?this.buildElementParenting(t,s[n].parent,r):t.setHierarchy(r))),n+=1},BaseRenderer.prototype.addPendingElement=function(t){this.pendingElements.push(t)},BaseRenderer.prototype.searchExtraCompositions=function(t){var e,r=t.length;for(e=0;e<r;e+=1)if(t[e].xt){var i=this.createComp(t[e]);i.initExpressions(),this.globalData.projectInterface.registerComposition(i)}},BaseRenderer.prototype.getElementById=function(t){var e,r=this.elements.length;for(e=0;e<r;e+=1)if(this.elements[e].data.ind===t)return this.elements[e];return null},BaseRenderer.prototype.getElementByPath=function(t){var e=t.shift(),r;if(typeof e=="number")r=this.elements[e];else{var i,s=this.elements.length;for(i=0;i<s;i+=1)if(this.elements[i].data.nm===e){r=this.elements[i];break}}return t.length===0?r:r.getElementByPath(t)},BaseRenderer.prototype.setupGlobalData=function(t,e){this.globalData.fontManager=new FontManager,this.globalData.slotManager=slotFactory(t),this.globalData.fontManager.addChars(t.chars),this.globalData.fontManager.addFonts(t.fonts,e),this.globalData.getAssetData=this.animationItem.getAssetData.bind(this.animationItem),this.globalData.getAssetsPath=this.animationItem.getAssetsPath.bind(this.animationItem),this.globalData.imageLoader=this.animationItem.imagePreloader,this.globalData.audioController=this.animationItem.audioController,this.globalData.frameId=0,this.globalData.frameRate=t.fr,this.globalData.nm=t.nm,this.globalData.compSize={w:t.w,h:t.h}};var effectTypes={TRANSFORM_EFFECT:"transformEFfect"};function TransformElement(){}TransformElement.prototype={initTransform:function(){var e=new Matrix;this.finalTransform={mProp:this.data.ks?TransformPropertyFactory.getTransformProperty(this,this.data.ks,this):{o:0},_matMdf:!1,_localMatMdf:!1,_opMdf:!1,mat:e,localMat:e,localOpacity:1},this.data.ao&&(this.finalTransform.mProp.autoOriented=!0),this.data.ty},renderTransform:function(){if(this.finalTransform._opMdf=this.finalTransform.mProp.o._mdf||this._isFirstFrame,this.finalTransform._matMdf=this.finalTransform.mProp._mdf||this._isFirstFrame,this.hierarchy){var e,r=this.finalTransform.mat,i=0,s=this.hierarchy.length;if(!this.finalTransform._matMdf)for(;i<s;){if(this.hierarchy[i].finalTransform.mProp._mdf){this.finalTransform._matMdf=!0;break}i+=1}if(this.finalTransform._matMdf)for(e=this.finalTransform.mProp.v.props,r.cloneFromProps(e),i=0;i<s;i+=1)r.multiply(this.hierarchy[i].finalTransform.mProp.v)}this.finalTransform._matMdf&&(this.finalTransform._localMatMdf=this.finalTransform._matMdf),this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v)},renderLocalTransform:function(){if(this.localTransforms){var e=0,r=this.localTransforms.length;if(this.finalTransform._localMatMdf=this.finalTransform._matMdf,!this.finalTransform._localMatMdf||!this.finalTransform._opMdf)for(;e<r;)this.localTransforms[e]._mdf&&(this.finalTransform._localMatMdf=!0),this.localTransforms[e]._opMdf&&!this.finalTransform._opMdf&&(this.finalTransform.localOpacity=this.finalTransform.mProp.o.v,this.finalTransform._opMdf=!0),e+=1;if(this.finalTransform._localMatMdf){var i=this.finalTransform.localMat;for(this.localTransforms[0].matrix.clone(i),e=1;e<r;e+=1){var s=this.localTransforms[e].matrix;i.multiply(s)}i.multiply(this.finalTransform.mat)}if(this.finalTransform._opMdf){var n=this.finalTransform.localOpacity;for(e=0;e<r;e+=1)n*=this.localTransforms[e].opacity*.01;this.finalTransform.localOpacity=n}}},searchEffectTransforms:function(){if(this.renderableEffectsManager){var e=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT);if(e.length){this.localTransforms=[],this.finalTransform.localMat=new Matrix;var r=0,i=e.length;for(r=0;r<i;r+=1)this.localTransforms.push(e[r])}}},globalToLocal:function(e){var r=[];r.push(this.finalTransform);for(var i=!0,s=this.comp;i;)s.finalTransform?(s.data.hasMask&&r.splice(0,0,s.finalTransform),s=s.comp):i=!1;var n,a=r.length,l;for(n=0;n<a;n+=1)l=r[n].mat.applyToPointArray(0,0,0),e=[e[0]-l[0],e[1]-l[1],0];return e},mHelper:new Matrix};function MaskElement(t,e,r){this.data=t,this.element=e,this.globalData=r,this.storedData=[],this.masksProperties=this.data.masksProperties||[],this.maskElement=null;var i=this.globalData.defs,s,n=this.masksProperties?this.masksProperties.length:0;this.viewData=createSizedArray(n),this.solidPath="";var a,l=this.masksProperties,o=0,h=[],d,b,p=createElementID(),E,v,u,x,c="clipPath",m="clip-path";for(s=0;s<n;s+=1)if((l[s].mode!=="a"&&l[s].mode!=="n"||l[s].inv||l[s].o.k!==100||l[s].o.x)&&(c="mask",m="mask"),(l[s].mode==="s"||l[s].mode==="i")&&o===0?(E=createNS("rect"),E.setAttribute("fill","#ffffff"),E.setAttribute("width",this.element.comp.data.w||0),E.setAttribute("height",this.element.comp.data.h||0),h.push(E)):E=null,a=createNS("path"),l[s].mode==="n")this.viewData[s]={op:PropertyFactory.getProp(this.element,l[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,l[s],3),elem:a,lastPath:""},i.appendChild(a);else{o+=1,a.setAttribute("fill",l[s].mode==="s"?"#000000":"#ffffff"),a.setAttribute("clip-rule","nonzero");var f;if(l[s].x.k!==0?(c="mask",m="mask",x=PropertyFactory.getProp(this.element,l[s].x,0,null,this.element),f=createElementID(),v=createNS("filter"),v.setAttribute("id",f),u=createNS("feMorphology"),u.setAttribute("operator","erode"),u.setAttribute("in","SourceGraphic"),u.setAttribute("radius","0"),v.appendChild(u),i.appendChild(v),a.setAttribute("stroke",l[s].mode==="s"?"#000000":"#ffffff")):(u=null,x=null),this.storedData[s]={elem:a,x,expan:u,lastPath:"",lastOperator:"",filterId:f,lastRadius:0},l[s].mode==="i"){b=h.length;var y=createNS("g");for(d=0;d<b;d+=1)y.appendChild(h[d]);var P=createNS("mask");P.setAttribute("mask-type","alpha"),P.setAttribute("id",p+"_"+o),P.appendChild(a),i.appendChild(P),y.setAttribute("mask","url("+getLocationHref()+"#"+p+"_"+o+")"),h.length=0,h.push(y)}else h.push(a);l[s].inv&&!this.solidPath&&(this.solidPath=this.createLayerSolidPath()),this.viewData[s]={elem:a,lastPath:"",op:PropertyFactory.getProp(this.element,l[s].o,0,.01,this.element),prop:ShapePropertyFactory.getShapeProp(this.element,l[s],3),invRect:E},this.viewData[s].prop.k||this.drawPath(l[s],this.viewData[s].prop.v,this.viewData[s])}for(this.maskElement=createNS(c),n=h.length,s=0;s<n;s+=1)this.maskElement.appendChild(h[s]);o>0&&(this.maskElement.setAttribute("id",p),this.element.maskedElement.setAttribute(m,"url("+getLocationHref()+"#"+p+")"),i.appendChild(this.maskElement)),this.viewData.length&&this.element.addRenderableComponent(this)}MaskElement.prototype.getMaskProperty=function(t){return this.viewData[t].prop},MaskElement.prototype.renderFrame=function(t){var e=this.element.finalTransform.mat,r,i=this.masksProperties.length;for(r=0;r<i;r+=1)if((this.viewData[r].prop._mdf||t)&&this.drawPath(this.masksProperties[r],this.viewData[r].prop.v,this.viewData[r]),(this.viewData[r].op._mdf||t)&&this.viewData[r].elem.setAttribute("fill-opacity",this.viewData[r].op.v),this.masksProperties[r].mode!=="n"&&(this.viewData[r].invRect&&(this.element.finalTransform.mProp._mdf||t)&&this.viewData[r].invRect.setAttribute("transform",e.getInverseMatrix().to2dCSS()),this.storedData[r].x&&(this.storedData[r].x._mdf||t))){var s=this.storedData[r].expan;this.storedData[r].x.v<0?(this.storedData[r].lastOperator!=="erode"&&(this.storedData[r].lastOperator="erode",this.storedData[r].elem.setAttribute("filter","url("+getLocationHref()+"#"+this.storedData[r].filterId+")")),s.setAttribute("radius",-this.storedData[r].x.v)):(this.storedData[r].lastOperator!=="dilate"&&(this.storedData[r].lastOperator="dilate",this.storedData[r].elem.setAttribute("filter",null)),this.storedData[r].elem.setAttribute("stroke-width",this.storedData[r].x.v*2))}},MaskElement.prototype.getMaskelement=function(){return this.maskElement},MaskElement.prototype.createLayerSolidPath=function(){var t="M0,0 ";return t+=" h"+this.globalData.compSize.w,t+=" v"+this.globalData.compSize.h,t+=" h-"+this.globalData.compSize.w,t+=" v-"+this.globalData.compSize.h+" ",t},MaskElement.prototype.drawPath=function(t,e,r){var i=" M"+e.v[0][0]+","+e.v[0][1],s,n;for(n=e._length,s=1;s<n;s+=1)i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[s][0]+","+e.i[s][1]+" "+e.v[s][0]+","+e.v[s][1];if(e.c&&n>1&&(i+=" C"+e.o[s-1][0]+","+e.o[s-1][1]+" "+e.i[0][0]+","+e.i[0][1]+" "+e.v[0][0]+","+e.v[0][1]),r.lastPath!==i){var a="";r.elem&&(e.c&&(a=t.inv?this.solidPath+i:i),r.elem.setAttribute("d",a)),r.lastPath=i}},MaskElement.prototype.destroy=function(){this.element=null,this.globalData=null,this.maskElement=null,this.data=null,this.masksProperties=null};var filtersFactory=function(){var t={};t.createFilter=e,t.createAlphaToLuminanceFilter=r;function e(i,s){var n=createNS("filter");return n.setAttribute("id",i),s!==!0&&(n.setAttribute("filterUnits","objectBoundingBox"),n.setAttribute("x","0%"),n.setAttribute("y","0%"),n.setAttribute("width","100%"),n.setAttribute("height","100%")),n}function r(){var i=createNS("feColorMatrix");return i.setAttribute("type","matrix"),i.setAttribute("color-interpolation-filters","sRGB"),i.setAttribute("values","0 0 0 1 0  0 0 0 1 0  0 0 0 1 0  0 0 0 1 1"),i}return t}(),featureSupport=function(){var t={maskType:!0,svgLumaHidden:!0,offscreenCanvas:typeof OffscreenCanvas<"u"};return(/MSIE 10/i.test(navigator.userAgent)||/MSIE 9/i.test(navigator.userAgent)||/rv:11.0/i.test(navigator.userAgent)||/Edge\/\d./i.test(navigator.userAgent))&&(t.maskType=!1),/firefox/i.test(navigator.userAgent)&&(t.svgLumaHidden=!1),t}(),registeredEffects$1={},idPrefix="filter_result_";function SVGEffects(t){var e,r="SourceGraphic",i=t.data.ef?t.data.ef.length:0,s=createElementID(),n=filtersFactory.createFilter(s,!0),a=0;this.filters=[];var l;for(e=0;e<i;e+=1){l=null;var o=t.data.ef[e].ty;if(registeredEffects$1[o]){var h=registeredEffects$1[o].effect;l=new h(n,t.effectsManager.effectElements[e],t,idPrefix+a,r),r=idPrefix+a,registeredEffects$1[o].countsAsEffect&&(a+=1)}l&&this.filters.push(l)}a&&(t.globalData.defs.appendChild(n),t.layerElement.setAttribute("filter","url("+getLocationHref()+"#"+s+")")),this.filters.length&&t.addRenderableComponent(this)}SVGEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},SVGEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect$1(t,e,r){registeredEffects$1[t]={effect:e,countsAsEffect:r}}function SVGBaseElement(){}SVGBaseElement.prototype={initRendererElement:function(){this.layerElement=createNS("g")},createContainerElements:function(){this.matteElement=createNS("g"),this.transformedElement=this.layerElement,this.maskedElement=this.layerElement,this._sizeChanged=!1;var e=null;if(this.data.td){this.matteMasks={};var r=createNS("g");r.setAttribute("id",this.layerId),r.appendChild(this.layerElement),e=r,this.globalData.defs.appendChild(r)}else this.data.tt?(this.matteElement.appendChild(this.layerElement),e=this.matteElement,this.baseElement=this.matteElement):this.baseElement=this.layerElement;if(this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.ty===0&&!this.data.hd){var i=createNS("clipPath"),s=createNS("path");s.setAttribute("d","M0,0 L"+this.data.w+",0 L"+this.data.w+","+this.data.h+" L0,"+this.data.h+"z");var n=createElementID();if(i.setAttribute("id",n),i.appendChild(s),this.globalData.defs.appendChild(i),this.checkMasks()){var a=createNS("g");a.setAttribute("clip-path","url("+getLocationHref()+"#"+n+")"),a.appendChild(this.layerElement),this.transformedElement=a,e?e.appendChild(this.transformedElement):this.baseElement=this.transformedElement}else this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+n+")")}this.data.bm!==0&&this.setBlendMode()},renderElement:function(){this.finalTransform._localMatMdf&&this.transformedElement.setAttribute("transform",this.finalTransform.localMat.to2dCSS()),this.finalTransform._opMdf&&this.transformedElement.setAttribute("opacity",this.finalTransform.localOpacity)},destroyBaseElement:function(){this.layerElement=null,this.matteElement=null,this.maskManager.destroy()},getBaseElement:function(){return this.data.hd?null:this.baseElement},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData),this.renderableEffectsManager=new SVGEffects(this),this.searchEffectTransforms()},getMatte:function(e){if(this.matteMasks||(this.matteMasks={}),!this.matteMasks[e]){var r=this.layerId+"_"+e,i,s,n,a;if(e===1||e===3){var l=createNS("mask");l.setAttribute("id",r),l.setAttribute("mask-type",e===3?"luminance":"alpha"),n=createNS("use"),n.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),l.appendChild(n),this.globalData.defs.appendChild(l),!featureSupport.maskType&&e===1&&(l.setAttribute("mask-type","luminance"),i=createElementID(),s=filtersFactory.createFilter(i),this.globalData.defs.appendChild(s),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),a=createNS("g"),a.appendChild(n),l.appendChild(a),a.setAttribute("filter","url("+getLocationHref()+"#"+i+")"))}else if(e===2){var o=createNS("mask");o.setAttribute("id",r),o.setAttribute("mask-type","alpha");var h=createNS("g");o.appendChild(h),i=createElementID(),s=filtersFactory.createFilter(i);var d=createNS("feComponentTransfer");d.setAttribute("in","SourceGraphic"),s.appendChild(d);var b=createNS("feFuncA");b.setAttribute("type","table"),b.setAttribute("tableValues","1.0 0.0"),d.appendChild(b),this.globalData.defs.appendChild(s);var p=createNS("rect");p.setAttribute("width",this.comp.data.w),p.setAttribute("height",this.comp.data.h),p.setAttribute("x","0"),p.setAttribute("y","0"),p.setAttribute("fill","#ffffff"),p.setAttribute("opacity","0"),h.setAttribute("filter","url("+getLocationHref()+"#"+i+")"),h.appendChild(p),n=createNS("use"),n.setAttributeNS("http://www.w3.org/1999/xlink","href","#"+this.layerId),h.appendChild(n),featureSupport.maskType||(o.setAttribute("mask-type","luminance"),s.appendChild(filtersFactory.createAlphaToLuminanceFilter()),a=createNS("g"),h.appendChild(p),a.appendChild(this.layerElement),h.appendChild(a)),this.globalData.defs.appendChild(o)}this.matteMasks[e]=r}return this.matteMasks[e]},setMatte:function(e){this.matteElement&&this.matteElement.setAttribute("mask","url("+getLocationHref()+"#"+e+")")}};function HierarchyElement(){}HierarchyElement.prototype={initHierarchy:function(){this.hierarchy=[],this._isParent=!1,this.checkParenting()},setHierarchy:function(e){this.hierarchy=e},setAsParent:function(){this._isParent=!0},checkParenting:function(){this.data.parent!==void 0&&this.comp.buildElementParenting(this,this.data.parent,[])}};function RenderableDOMElement(){}(function(){var t={initElement:function(r,i,s){this.initFrame(),this.initBaseData(r,i,s),this.initTransform(r,i,s),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide()},hide:function(){if(!this.hidden&&(!this.isInRange||this.isTransparent)){var r=this.baseElement||this.layerElement;r.style.display="none",this.hidden=!0}},show:function(){if(this.isInRange&&!this.isTransparent){if(!this.data.hd){var r=this.baseElement||this.layerElement;r.style.display="block"}this.hidden=!1,this._isFirstFrame=!0}},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},renderInnerContent:function(){},prepareFrame:function(r){this._mdf=!1,this.prepareRenderableFrame(r),this.prepareProperties(r,this.isInRange),this.checkTransparency()},destroy:function(){this.innerElem=null,this.destroyBaseElement()}};extendPrototype([RenderableElement,createProxyFunction(t)],RenderableDOMElement)})();function IImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.assetData&&this.assetData.sid&&(this.assetData=e.slotManager.getProp(this.assetData)),this.initElement(t,e,r),this.sourceRect={top:0,left:0,width:this.assetData.w,height:this.assetData.h}}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],IImageElement),IImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData);this.innerElem=createNS("image"),this.innerElem.setAttribute("width",this.assetData.w+"px"),this.innerElem.setAttribute("height",this.assetData.h+"px"),this.innerElem.setAttribute("preserveAspectRatio",this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio),this.innerElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.innerElem)},IImageElement.prototype.sourceRectAtTime=function(){return this.sourceRect};function ProcessedElement(t,e){this.elem=t,this.pos=e}function IShapeElement(){}IShapeElement.prototype={addShapeToModifiers:function(e){var r,i=this.shapeModifiers.length;for(r=0;r<i;r+=1)this.shapeModifiers[r].addShape(e)},isShapeInAnimatedModifiers:function(e){for(var r=0,i=this.shapeModifiers.length;r<i;)if(this.shapeModifiers[r].isAnimatedWithShape(e))return!0;return!1},renderModifiers:function(){if(this.shapeModifiers.length){var e,r=this.shapes.length;for(e=0;e<r;e+=1)this.shapes[e].sh.reset();r=this.shapeModifiers.length;var i;for(e=r-1;e>=0&&(i=this.shapeModifiers[e].processShapes(this._isFirstFrame),!i);e-=1);}},searchProcessedElement:function(e){for(var r=this.processedElements,i=0,s=r.length;i<s;){if(r[i].elem===e)return r[i].pos;i+=1}return 0},addProcessedElement:function(e,r){for(var i=this.processedElements,s=i.length;s;)if(s-=1,i[s].elem===e){i[s].pos=r;return}i.push(new ProcessedElement(e,r))},prepareFrame:function(e){this.prepareRenderableFrame(e),this.prepareProperties(e,this.isInRange)}};var lineCapEnum={1:"butt",2:"round",3:"square"},lineJoinEnum={1:"miter",2:"round",3:"bevel"};function SVGShapeData(t,e,r){this.caches=[],this.styles=[],this.transformers=t,this.lStr="",this.sh=r,this.lvl=e,this._isAnimated=!!r.k;for(var i=0,s=t.length;i<s;){if(t[i].mProps.dynamicProperties.length){this._isAnimated=!0;break}i+=1}}SVGShapeData.prototype.setAsAnimated=function(){this._isAnimated=!0};function SVGStyleData(t,e){this.data=t,this.type=t.ty,this.d="",this.lvl=e,this._mdf=!1,this.closed=t.hd===!0,this.pElem=createNS("path"),this.msElem=null}SVGStyleData.prototype.reset=function(){this.d="",this._mdf=!1};function DashProperty(t,e,r,i){this.elem=t,this.frameId=-1,this.dataProps=createSizedArray(e.length),this.renderer=r,this.k=!1,this.dashStr="",this.dashArray=createTypedArray("float32",e.length?e.length-1:0),this.dashoffset=createTypedArray("float32",1),this.initDynamicPropertyContainer(i);var s,n=e.length||0,a;for(s=0;s<n;s+=1)a=PropertyFactory.getProp(t,e[s].v,0,0,this),this.k=a.k||this.k,this.dataProps[s]={n:e[s].n,p:a};this.k||this.getValue(!0),this._isAnimated=this.k}DashProperty.prototype.getValue=function(t){if(!(this.elem.globalData.frameId===this.frameId&&!t)&&(this.frameId=this.elem.globalData.frameId,this.iterateDynamicProperties(),this._mdf=this._mdf||t,this._mdf)){var e=0,r=this.dataProps.length;for(this.renderer==="svg"&&(this.dashStr=""),e=0;e<r;e+=1)this.dataProps[e].n!=="o"?this.renderer==="svg"?this.dashStr+=" "+this.dataProps[e].p.v:this.dashArray[e]=this.dataProps[e].p.v:this.dashoffset[0]=this.dataProps[e].p.v}},extendPrototype([DynamicPropertyContainer],DashProperty);function SVGStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r,this._isAnimated=!!this._isAnimated}extendPrototype([DynamicPropertyContainer],SVGStrokeStyleData);function SVGFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.c=PropertyFactory.getProp(t,e.c,1,255,this),this.style=r}extendPrototype([DynamicPropertyContainer],SVGFillStyleData);function SVGNoStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.style=r}extendPrototype([DynamicPropertyContainer],SVGNoStyleData);function GradientProperty(t,e,r){this.data=e,this.c=createTypedArray("uint8c",e.p*4);var i=e.k.k[0].s?e.k.k[0].s.length-e.p*4:e.k.k.length-e.p*4;this.o=createTypedArray("float32",i),this._cmdf=!1,this._omdf=!1,this._collapsable=this.checkCollapsable(),this._hasOpacity=i,this.initDynamicPropertyContainer(r),this.prop=PropertyFactory.getProp(t,e.k,1,null,this),this.k=this.prop.k,this.getValue(!0)}GradientProperty.prototype.comparePoints=function(t,e){for(var r=0,i=this.o.length/2,s;r<i;){if(s=Math.abs(t[r*4]-t[e*4+r*2]),s>.01)return!1;r+=1}return!0},GradientProperty.prototype.checkCollapsable=function(){if(this.o.length/2!==this.c.length/4)return!1;if(this.data.k.k[0].s)for(var t=0,e=this.data.k.k.length;t<e;){if(!this.comparePoints(this.data.k.k[t].s,this.data.p))return!1;t+=1}else if(!this.comparePoints(this.data.k.k,this.data.p))return!1;return!0},GradientProperty.prototype.getValue=function(t){if(this.prop.getValue(),this._mdf=!1,this._cmdf=!1,this._omdf=!1,this.prop._mdf||t){var e,r=this.data.p*4,i,s;for(e=0;e<r;e+=1)i=e%4===0?100:255,s=Math.round(this.prop.v[e]*i),this.c[e]!==s&&(this.c[e]=s,this._cmdf=!t);if(this.o.length)for(r=this.prop.v.length,e=this.data.p*4;e<r;e+=1)i=e%2===0?100:1,s=e%2===0?Math.round(this.prop.v[e]*100):this.prop.v[e],this.o[e-this.data.p*4]!==s&&(this.o[e-this.data.p*4]=s,this._omdf=!t);this._mdf=!t}},extendPrototype([DynamicPropertyContainer],GradientProperty);function SVGGradientFillStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.initGradientData(t,e,r)}SVGGradientFillStyleData.prototype.initGradientData=function(t,e,r){this.o=PropertyFactory.getProp(t,e.o,0,.01,this),this.s=PropertyFactory.getProp(t,e.s,1,null,this),this.e=PropertyFactory.getProp(t,e.e,1,null,this),this.h=PropertyFactory.getProp(t,e.h||{k:0},0,.01,this),this.a=PropertyFactory.getProp(t,e.a||{k:0},0,degToRads,this),this.g=new GradientProperty(t,e.g,this),this.style=r,this.stops=[],this.setGradientData(r.pElem,e),this.setGradientOpacity(e,r),this._isAnimated=!!this._isAnimated},SVGGradientFillStyleData.prototype.setGradientData=function(t,e){var r=createElementID(),i=createNS(e.t===1?"linearGradient":"radialGradient");i.setAttribute("id",r),i.setAttribute("spreadMethod","pad"),i.setAttribute("gradientUnits","userSpaceOnUse");var s=[],n,a,l;for(l=e.g.p*4,a=0;a<l;a+=4)n=createNS("stop"),i.appendChild(n),s.push(n);t.setAttribute(e.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+r+")"),this.gf=i,this.cst=s},SVGGradientFillStyleData.prototype.setGradientOpacity=function(t,e){if(this.g._hasOpacity&&!this.g._collapsable){var r,i,s,n=createNS("mask"),a=createNS("path");n.appendChild(a);var l=createElementID(),o=createElementID();n.setAttribute("id",o);var h=createNS(t.t===1?"linearGradient":"radialGradient");h.setAttribute("id",l),h.setAttribute("spreadMethod","pad"),h.setAttribute("gradientUnits","userSpaceOnUse"),s=t.g.k.k[0].s?t.g.k.k[0].s.length:t.g.k.k.length;var d=this.stops;for(i=t.g.p*4;i<s;i+=2)r=createNS("stop"),r.setAttribute("stop-color","rgb(255,255,255)"),h.appendChild(r),d.push(r);a.setAttribute(t.ty==="gf"?"fill":"stroke","url("+getLocationHref()+"#"+l+")"),t.ty==="gs"&&(a.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),a.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),t.lj===1&&a.setAttribute("stroke-miterlimit",t.ml)),this.of=h,this.ms=n,this.ost=d,this.maskId=o,e.msElem=a}},extendPrototype([DynamicPropertyContainer],SVGGradientFillStyleData);function SVGGradientStrokeStyleData(t,e,r){this.initDynamicPropertyContainer(t),this.getValue=this.iterateDynamicProperties,this.w=PropertyFactory.getProp(t,e.w,0,null,this),this.d=new DashProperty(t,e.d||{},"svg",this),this.initGradientData(t,e,r),this._isAnimated=!!this._isAnimated}extendPrototype([SVGGradientFillStyleData,DynamicPropertyContainer],SVGGradientStrokeStyleData);function ShapeGroupData(){this.it=[],this.prevViewData=[],this.gr=createNS("g")}function SVGTransformData(t,e,r){this.transform={mProps:t,op:e,container:r},this.elements=[],this._isAnimated=this.transform.mProps.dynamicProperties.length||this.transform.op.effectsSequence.length}var buildShapeString=function(e,r,i,s){if(r===0)return"";var n=e.o,a=e.i,l=e.v,o,h=" M"+s.applyToPointStringified(l[0][0],l[0][1]);for(o=1;o<r;o+=1)h+=" C"+s.applyToPointStringified(n[o-1][0],n[o-1][1])+" "+s.applyToPointStringified(a[o][0],a[o][1])+" "+s.applyToPointStringified(l[o][0],l[o][1]);return i&&r&&(h+=" C"+s.applyToPointStringified(n[o-1][0],n[o-1][1])+" "+s.applyToPointStringified(a[0][0],a[0][1])+" "+s.applyToPointStringified(l[0][0],l[0][1]),h+="z"),h},SVGElementsRenderer=function(){var t=new Matrix,e=new Matrix,r={createRenderFunction:i};function i(b){switch(b.ty){case"fl":return l;case"gf":return h;case"gs":return o;case"st":return d;case"sh":case"el":case"rc":case"sr":return a;case"tr":return s;case"no":return n;default:return null}}function s(b,p,E){(E||p.transform.op._mdf)&&p.transform.container.setAttribute("opacity",p.transform.op.v),(E||p.transform.mProps._mdf)&&p.transform.container.setAttribute("transform",p.transform.mProps.v.to2dCSS())}function n(){}function a(b,p,E){var v,u,x,c,m,f,y=p.styles.length,P=p.lvl,A,T,F,k;for(f=0;f<y;f+=1){if(c=p.sh._mdf||E,p.styles[f].lvl<P){for(T=e.reset(),F=P-p.styles[f].lvl,k=p.transformers.length-1;!c&&F>0;)c=p.transformers[k].mProps._mdf||c,F-=1,k-=1;if(c)for(F=P-p.styles[f].lvl,k=p.transformers.length-1;F>0;)T.multiply(p.transformers[k].mProps.v),F-=1,k-=1}else T=t;if(A=p.sh.paths,u=A._length,c){for(x="",v=0;v<u;v+=1)m=A.shapes[v],m&&m._length&&(x+=buildShapeString(m,m._length,m.c,T));p.caches[f]=x}else x=p.caches[f];p.styles[f].d+=b.hd===!0?"":x,p.styles[f]._mdf=c||p.styles[f]._mdf}}function l(b,p,E){var v=p.style;(p.c._mdf||E)&&v.pElem.setAttribute("fill","rgb("+bmFloor(p.c.v[0])+","+bmFloor(p.c.v[1])+","+bmFloor(p.c.v[2])+")"),(p.o._mdf||E)&&v.pElem.setAttribute("fill-opacity",p.o.v)}function o(b,p,E){h(b,p,E),d(b,p,E)}function h(b,p,E){var v=p.gf,u=p.g._hasOpacity,x=p.s.v,c=p.e.v;if(p.o._mdf||E){var m=b.ty==="gf"?"fill-opacity":"stroke-opacity";p.style.pElem.setAttribute(m,p.o.v)}if(p.s._mdf||E){var f=b.t===1?"x1":"cx",y=f==="x1"?"y1":"cy";v.setAttribute(f,x[0]),v.setAttribute(y,x[1]),u&&!p.g._collapsable&&(p.of.setAttribute(f,x[0]),p.of.setAttribute(y,x[1]))}var P,A,T,F;if(p.g._cmdf||E){P=p.cst;var k=p.g.c;for(T=P.length,A=0;A<T;A+=1)F=P[A],F.setAttribute("offset",k[A*4]+"%"),F.setAttribute("stop-color","rgb("+k[A*4+1]+","+k[A*4+2]+","+k[A*4+3]+")")}if(u&&(p.g._omdf||E)){var O=p.g.o;for(p.g._collapsable?P=p.cst:P=p.ost,T=P.length,A=0;A<T;A+=1)F=P[A],p.g._collapsable||F.setAttribute("offset",O[A*2]+"%"),F.setAttribute("stop-opacity",O[A*2+1])}if(b.t===1)(p.e._mdf||E)&&(v.setAttribute("x2",c[0]),v.setAttribute("y2",c[1]),u&&!p.g._collapsable&&(p.of.setAttribute("x2",c[0]),p.of.setAttribute("y2",c[1])));else{var L;if((p.s._mdf||p.e._mdf||E)&&(L=Math.sqrt(Math.pow(x[0]-c[0],2)+Math.pow(x[1]-c[1],2)),v.setAttribute("r",L),u&&!p.g._collapsable&&p.of.setAttribute("r",L)),p.e._mdf||p.h._mdf||p.a._mdf||E){L||(L=Math.sqrt(Math.pow(x[0]-c[0],2)+Math.pow(x[1]-c[1],2)));var R=Math.atan2(c[1]-x[1],c[0]-x[0]),D=p.h.v;D>=1?D=.99:D<=-1&&(D=-.99);var B=L*D,I=Math.cos(R+p.a.v)*B+x[0],C=Math.sin(R+p.a.v)*B+x[1];v.setAttribute("fx",I),v.setAttribute("fy",C),u&&!p.g._collapsable&&(p.of.setAttribute("fx",I),p.of.setAttribute("fy",C))}}}function d(b,p,E){var v=p.style,u=p.d;u&&(u._mdf||E)&&u.dashStr&&(v.pElem.setAttribute("stroke-dasharray",u.dashStr),v.pElem.setAttribute("stroke-dashoffset",u.dashoffset[0])),p.c&&(p.c._mdf||E)&&v.pElem.setAttribute("stroke","rgb("+bmFloor(p.c.v[0])+","+bmFloor(p.c.v[1])+","+bmFloor(p.c.v[2])+")"),(p.o._mdf||E)&&v.pElem.setAttribute("stroke-opacity",p.o.v),(p.w._mdf||E)&&(v.pElem.setAttribute("stroke-width",p.w.v),v.msElem&&v.msElem.setAttribute("stroke-width",p.w.v))}return r}();function SVGShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.initElement(t,e,r),this.prevViewData=[]}extendPrototype([BaseElement,TransformElement,SVGBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableDOMElement],SVGShapeElement),SVGShapeElement.prototype.initSecondaryElement=function(){},SVGShapeElement.prototype.identityMatrix=new Matrix,SVGShapeElement.prototype.buildExpressionInterface=function(){},SVGShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes()},SVGShapeElement.prototype.filterUniqueShapes=function(){var t,e=this.shapes.length,r,i,s=this.stylesList.length,n,a=[],l=!1;for(i=0;i<s;i+=1){for(n=this.stylesList[i],l=!1,a.length=0,t=0;t<e;t+=1)r=this.shapes[t],r.styles.indexOf(n)!==-1&&(a.push(r),l=r._isAnimated||l);a.length>1&&l&&this.setShapesAsAnimated(a)}},SVGShapeElement.prototype.setShapesAsAnimated=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].setAsAnimated()},SVGShapeElement.prototype.createStyleElement=function(t,e){var r,i=new SVGStyleData(t,e),s=i.pElem;if(t.ty==="st")r=new SVGStrokeStyleData(this,t,i);else if(t.ty==="fl")r=new SVGFillStyleData(this,t,i);else if(t.ty==="gf"||t.ty==="gs"){var n=t.ty==="gf"?SVGGradientFillStyleData:SVGGradientStrokeStyleData;r=new n(this,t,i),this.globalData.defs.appendChild(r.gf),r.maskId&&(this.globalData.defs.appendChild(r.ms),this.globalData.defs.appendChild(r.of),s.setAttribute("mask","url("+getLocationHref()+"#"+r.maskId+")"))}else t.ty==="no"&&(r=new SVGNoStyleData(this,t,i));return(t.ty==="st"||t.ty==="gs")&&(s.setAttribute("stroke-linecap",lineCapEnum[t.lc||2]),s.setAttribute("stroke-linejoin",lineJoinEnum[t.lj||2]),s.setAttribute("fill-opacity","0"),t.lj===1&&s.setAttribute("stroke-miterlimit",t.ml)),t.r===2&&s.setAttribute("fill-rule","evenodd"),t.ln&&s.setAttribute("id",t.ln),t.cl&&s.setAttribute("class",t.cl),t.bm&&(s.style["mix-blend-mode"]=getBlendMode(t.bm)),this.stylesList.push(i),this.addToAnimatedContents(t,r),r},SVGShapeElement.prototype.createGroupElement=function(t){var e=new ShapeGroupData;return t.ln&&e.gr.setAttribute("id",t.ln),t.cl&&e.gr.setAttribute("class",t.cl),t.bm&&(e.gr.style["mix-blend-mode"]=getBlendMode(t.bm)),e},SVGShapeElement.prototype.createTransformElement=function(t,e){var r=TransformPropertyFactory.getTransformProperty(this,t,this),i=new SVGTransformData(r,r.o,e);return this.addToAnimatedContents(t,i),i},SVGShapeElement.prototype.createShapeElement=function(t,e,r){var i=4;t.ty==="rc"?i=5:t.ty==="el"?i=6:t.ty==="sr"&&(i=7);var s=ShapePropertyFactory.getShapeProp(this,t,i,this),n=new SVGShapeData(e,r,s);return this.shapes.push(n),this.addShapeToModifiers(n),this.addToAnimatedContents(t,n),n},SVGShapeElement.prototype.addToAnimatedContents=function(t,e){for(var r=0,i=this.animatedContents.length;r<i;){if(this.animatedContents[r].element===e)return;r+=1}this.animatedContents.push({fn:SVGElementsRenderer.createRenderFunction(t),element:e,data:t})},SVGShapeElement.prototype.setElementStyles=function(t){var e=t.styles,r,i=this.stylesList.length;for(r=0;r<i;r+=1)this.stylesList[r].closed||e.push(this.stylesList[r])},SVGShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.layerElement,0,[],!0),this.filterUniqueShapes(),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers()},SVGShapeElement.prototype.searchShapes=function(t,e,r,i,s,n,a){var l=[].concat(n),o,h=t.length-1,d,b,p=[],E=[],v,u,x;for(o=h;o>=0;o-=1){if(x=this.searchProcessedElement(t[o]),x?e[o]=r[x-1]:t[o]._render=a,t[o].ty==="fl"||t[o].ty==="st"||t[o].ty==="gf"||t[o].ty==="gs"||t[o].ty==="no")x?e[o].style.closed=!1:e[o]=this.createStyleElement(t[o],s),t[o]._render&&e[o].style.pElem.parentNode!==i&&i.appendChild(e[o].style.pElem),p.push(e[o].style);else if(t[o].ty==="gr"){if(!x)e[o]=this.createGroupElement(t[o]);else for(b=e[o].it.length,d=0;d<b;d+=1)e[o].prevViewData[d]=e[o].it[d];this.searchShapes(t[o].it,e[o].it,e[o].prevViewData,e[o].gr,s+1,l,a),t[o]._render&&e[o].gr.parentNode!==i&&i.appendChild(e[o].gr)}else t[o].ty==="tr"?(x||(e[o]=this.createTransformElement(t[o],i)),v=e[o].transform,l.push(v)):t[o].ty==="sh"||t[o].ty==="rc"||t[o].ty==="el"||t[o].ty==="sr"?(x||(e[o]=this.createShapeElement(t[o],l,s)),this.setElementStyles(e[o])):t[o].ty==="tm"||t[o].ty==="rd"||t[o].ty==="ms"||t[o].ty==="pb"||t[o].ty==="zz"||t[o].ty==="op"?(x?(u=e[o],u.closed=!1):(u=ShapeModifiers.getModifier(t[o].ty),u.init(this,t[o]),e[o]=u,this.shapeModifiers.push(u)),E.push(u)):t[o].ty==="rp"&&(x?(u=e[o],u.closed=!0):(u=ShapeModifiers.getModifier(t[o].ty),e[o]=u,u.init(this,t,o,e),this.shapeModifiers.push(u),a=!1),E.push(u));this.addProcessedElement(t[o],o+1)}for(h=p.length,o=0;o<h;o+=1)p[o].closed=!0;for(h=E.length,o=0;o<h;o+=1)E[o].closed=!0},SVGShapeElement.prototype.renderInnerContent=function(){this.renderModifiers();var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].reset();for(this.renderShape(),t=0;t<e;t+=1)(this.stylesList[t]._mdf||this._isFirstFrame)&&(this.stylesList[t].msElem&&(this.stylesList[t].msElem.setAttribute("d",this.stylesList[t].d),this.stylesList[t].d="M0 0"+this.stylesList[t].d),this.stylesList[t].pElem.setAttribute("d",this.stylesList[t].d||"M0 0"))},SVGShapeElement.prototype.renderShape=function(){var t,e=this.animatedContents.length,r;for(t=0;t<e;t+=1)r=this.animatedContents[t],(this._isFirstFrame||r.element._isAnimated)&&r.data!==!0&&r.fn(r.data,r.element,this._isFirstFrame)},SVGShapeElement.prototype.destroy=function(){this.destroyBaseElement(),this.shapesData=null,this.itemsData=null};function LetterProps(t,e,r,i,s,n){this.o=t,this.sw=e,this.sc=r,this.fc=i,this.m=s,this.p=n,this._mdf={o:!0,sw:!!e,sc:!!r,fc:!!i,m:!0,p:!0}}LetterProps.prototype.update=function(t,e,r,i,s,n){this._mdf.o=!1,this._mdf.sw=!1,this._mdf.sc=!1,this._mdf.fc=!1,this._mdf.m=!1,this._mdf.p=!1;var a=!1;return this.o!==t&&(this.o=t,this._mdf.o=!0,a=!0),this.sw!==e&&(this.sw=e,this._mdf.sw=!0,a=!0),this.sc!==r&&(this.sc=r,this._mdf.sc=!0,a=!0),this.fc!==i&&(this.fc=i,this._mdf.fc=!0,a=!0),this.m!==s&&(this.m=s,this._mdf.m=!0,a=!0),n.length&&(this.p[0]!==n[0]||this.p[1]!==n[1]||this.p[4]!==n[4]||this.p[5]!==n[5]||this.p[12]!==n[12]||this.p[13]!==n[13])&&(this.p=n,this._mdf.p=!0,a=!0),a};function TextProperty(t,e){this._frameId=initialDefaultFrame,this.pv="",this.v="",this.kf=!1,this._isFirstFrame=!0,this._mdf=!1,e.d&&e.d.sid&&(e.d=t.globalData.slotManager.getProp(e.d)),this.data=e,this.elem=t,this.comp=this.elem.comp,this.keysIndex=0,this.canResize=!1,this.minimumFontSize=1,this.effectsSequence=[],this.currentData={ascent:0,boxWidth:this.defaultBoxWidth,f:"",fStyle:"",fWeight:"",fc:"",j:"",justifyOffset:"",l:[],lh:0,lineWidths:[],ls:"",of:"",s:"",sc:"",sw:0,t:0,tr:0,sz:0,ps:null,fillColorAnim:!1,strokeColorAnim:!1,strokeWidthAnim:!1,yOffset:0,finalSize:0,finalText:[],finalLineHeight:0,__complete:!1},this.copyData(this.currentData,this.data.d.k[0].s),this.searchProperty()||this.completeTextData(this.currentData)}TextProperty.prototype.defaultBoxWidth=[0,0],TextProperty.prototype.copyData=function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},TextProperty.prototype.setCurrentData=function(t){t.__complete||this.completeTextData(t),this.currentData=t,this.currentData.boxWidth=this.currentData.boxWidth||this.defaultBoxWidth,this._mdf=!0},TextProperty.prototype.searchProperty=function(){return this.searchKeyframes()},TextProperty.prototype.searchKeyframes=function(){return this.kf=this.data.d.k.length>1,this.kf&&this.addEffect(this.getKeyframeValue.bind(this)),this.kf},TextProperty.prototype.addEffect=function(t){this.effectsSequence.push(t),this.elem.addDynamicProperty(this)},TextProperty.prototype.getValue=function(t){if(!((this.elem.globalData.frameId===this.frameId||!this.effectsSequence.length)&&!t)){this.currentData.t=this.data.d.k[this.keysIndex].s.t;var e=this.currentData,r=this.keysIndex;if(this.lock){this.setCurrentData(this.currentData);return}this.lock=!0,this._mdf=!1;var i,s=this.effectsSequence.length,n=t||this.data.d.k[this.keysIndex].s;for(i=0;i<s;i+=1)r!==this.keysIndex?n=this.effectsSequence[i](n,n.t):n=this.effectsSequence[i](this.currentData,n.t);e!==n&&this.setCurrentData(n),this.v=this.currentData,this.pv=this.v,this.lock=!1,this.frameId=this.elem.globalData.frameId}},TextProperty.prototype.getKeyframeValue=function(){for(var t=this.data.d.k,e=this.elem.comp.renderedFrame,r=0,i=t.length;r<=i-1&&!(r===i-1||t[r+1].t>e);)r+=1;return this.keysIndex!==r&&(this.keysIndex=r),this.data.d.k[this.keysIndex].s},TextProperty.prototype.buildFinalText=function(t){for(var e=[],r=0,i=t.length,s,n,a=!1,l=!1,o="";r<i;)a=l,l=!1,s=t.charCodeAt(r),o=t.charAt(r),FontManager.isCombinedCharacter(s)?a=!0:s>=55296&&s<=56319?FontManager.isRegionalFlag(t,r)?o=t.substr(r,14):(n=t.charCodeAt(r+1),n>=56320&&n<=57343&&(FontManager.isModifier(s,n)?(o=t.substr(r,2),a=!0):FontManager.isFlagEmoji(t.substr(r,4))?o=t.substr(r,4):o=t.substr(r,2))):s>56319?(n=t.charCodeAt(r+1),FontManager.isVariationSelector(s)&&(a=!0)):FontManager.isZeroWidthJoiner(s)&&(a=!0,l=!0),a?(e[e.length-1]+=o,a=!1):e.push(o),r+=o.length;return e},TextProperty.prototype.completeTextData=function(t){t.__complete=!0;var e=this.elem.globalData.fontManager,r=this.data,i=[],s,n,a,l=0,o,h=r.m.g,d=0,b=0,p=0,E=[],v=0,u=0,x,c,m=e.getFontByName(t.f),f,y=0,P=getFontProperties(m);t.fWeight=P.weight,t.fStyle=P.style,t.finalSize=t.s,t.finalText=this.buildFinalText(t.t),n=t.finalText.length,t.finalLineHeight=t.lh;var A=t.tr/1e3*t.finalSize,T;if(t.sz)for(var F=!0,k=t.sz[0],O=t.sz[1],L,R;F;){R=this.buildFinalText(t.t),L=0,v=0,n=R.length,A=t.tr/1e3*t.finalSize;var D=-1;for(s=0;s<n;s+=1)T=R[s].charCodeAt(0),a=!1,R[s]===" "?D=s:(T===13||T===3)&&(v=0,a=!0,L+=t.finalLineHeight||t.finalSize*1.2),e.chars?(f=e.getCharData(R[s],m.fStyle,m.fFamily),y=a?0:f.w*t.finalSize/100):y=e.measureText(R[s],t.f,t.finalSize),v+y>k&&R[s]!==" "?(D===-1?n+=1:s=D,L+=t.finalLineHeight||t.finalSize*1.2,R.splice(s,D===s?1:0,"\r"),D=-1,v=0):(v+=y,v+=A);L+=m.ascent*t.finalSize/100,this.canResize&&t.finalSize>this.minimumFontSize&&O<L?(t.finalSize-=1,t.finalLineHeight=t.finalSize*t.lh/t.s):(t.finalText=R,n=t.finalText.length,F=!1)}v=-A,y=0;var B=0,I;for(s=0;s<n;s+=1)if(a=!1,I=t.finalText[s],T=I.charCodeAt(0),T===13||T===3?(B=0,E.push(v),u=v>u?v:u,v=-2*A,o="",a=!0,p+=1):o=I,e.chars?(f=e.getCharData(I,m.fStyle,e.getFontByName(t.f).fFamily),y=a?0:f.w*t.finalSize/100):y=e.measureText(o,t.f,t.finalSize),I===" "?B+=y+A:(v+=y+A+B,B=0),i.push({l:y,an:y,add:d,n:a,anIndexes:[],val:o,line:p,animatorJustifyOffset:0}),h==2){if(d+=y,o===""||o===" "||s===n-1){for((o===""||o===" ")&&(d-=y);b<=s;)i[b].an=d,i[b].ind=l,i[b].extra=y,b+=1;l+=1,d=0}}else if(h==3){if(d+=y,o===""||s===n-1){for(o===""&&(d-=y);b<=s;)i[b].an=d,i[b].ind=l,i[b].extra=y,b+=1;d=0,l+=1}}else i[l].ind=l,i[l].extra=0,l+=1;if(t.l=i,u=v>u?v:u,E.push(v),t.sz)t.boxWidth=t.sz[0],t.justifyOffset=0;else switch(t.boxWidth=u,t.j){case 1:t.justifyOffset=-t.boxWidth;break;case 2:t.justifyOffset=-t.boxWidth/2;break;default:t.justifyOffset=0}t.lineWidths=E;var C=r.a,_,g;c=C.length;var S,w,M=[];for(x=0;x<c;x+=1){for(_=C[x],_.a.sc&&(t.strokeColorAnim=!0),_.a.sw&&(t.strokeWidthAnim=!0),(_.a.fc||_.a.fh||_.a.fs||_.a.fb)&&(t.fillColorAnim=!0),w=0,S=_.s.b,s=0;s<n;s+=1)g=i[s],g.anIndexes[x]=w,(S==1&&g.val!==""||S==2&&g.val!==""&&g.val!==" "||S==3&&(g.n||g.val==" "||s==n-1)||S==4&&(g.n||s==n-1))&&(_.s.rn===1&&M.push(w),w+=1);r.a[x].s.totalChars=w;var V=-1,G;if(_.s.rn===1)for(s=0;s<n;s+=1)g=i[s],V!=g.anIndexes[x]&&(V=g.anIndexes[x],G=M.splice(Math.floor(Math.random()*M.length),1)[0]),g.anIndexes[x]=G}t.yOffset=t.finalLineHeight||t.finalSize*1.2,t.ls=t.ls||0,t.ascent=m.ascent*t.finalSize/100},TextProperty.prototype.updateDocumentData=function(t,e){e=e===void 0?this.keysIndex:e;var r=this.copyData({},this.data.d.k[e].s);r=this.copyData(r,t),this.data.d.k[e].s=r,this.recalculate(e),this.setCurrentData(r),this.elem.addDynamicProperty(this)},TextProperty.prototype.recalculate=function(t){var e=this.data.d.k[t].s;e.__complete=!1,this.keysIndex=0,this._isFirstFrame=!0,this.getValue(e)},TextProperty.prototype.canResizeFont=function(t){this.canResize=t,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)},TextProperty.prototype.setMinimumFontSize=function(t){this.minimumFontSize=Math.floor(t)||1,this.recalculate(this.keysIndex),this.elem.addDynamicProperty(this)};var TextSelectorProp=function(){var t=Math.max,e=Math.min,r=Math.floor;function i(n,a){this._currentTextLength=-1,this.k=!1,this.data=a,this.elem=n,this.comp=n.comp,this.finalS=0,this.finalE=0,this.initDynamicPropertyContainer(n),this.s=PropertyFactory.getProp(n,a.s||{k:0},0,0,this),"e"in a?this.e=PropertyFactory.getProp(n,a.e,0,0,this):this.e={v:100},this.o=PropertyFactory.getProp(n,a.o||{k:0},0,0,this),this.xe=PropertyFactory.getProp(n,a.xe||{k:0},0,0,this),this.ne=PropertyFactory.getProp(n,a.ne||{k:0},0,0,this),this.sm=PropertyFactory.getProp(n,a.sm||{k:100},0,0,this),this.a=PropertyFactory.getProp(n,a.a,0,.01,this),this.dynamicProperties.length||this.getValue()}i.prototype={getMult:function(a){this._currentTextLength!==this.elem.textProperty.currentData.l.length&&this.getValue();var l=0,o=0,h=1,d=1;this.ne.v>0?l=this.ne.v/100:o=-this.ne.v/100,this.xe.v>0?h=1-this.xe.v/100:d=1+this.xe.v/100;var b=BezierFactory.getBezierEasing(l,o,h,d).get,p=0,E=this.finalS,v=this.finalE,u=this.data.sh;if(u===2)v===E?p=a>=v?1:0:p=t(0,e(.5/(v-E)+(a-E)/(v-E),1)),p=b(p);else if(u===3)v===E?p=a>=v?0:1:p=1-t(0,e(.5/(v-E)+(a-E)/(v-E),1)),p=b(p);else if(u===4)v===E?p=0:(p=t(0,e(.5/(v-E)+(a-E)/(v-E),1)),p<.5?p*=2:p=1-2*(p-.5)),p=b(p);else if(u===5){if(v===E)p=0;else{var x=v-E;a=e(t(0,a+.5-E),v-E);var c=-x/2+a,m=x/2;p=Math.sqrt(1-c*c/(m*m))}p=b(p)}else u===6?(v===E?p=0:(a=e(t(0,a+.5-E),v-E),p=(1+Math.cos(Math.PI+Math.PI*2*a/(v-E)))/2),p=b(p)):(a>=r(E)&&(a-E<0?p=t(0,e(e(v,1)-(E-a),1)):p=t(0,e(v-a,1))),p=b(p));if(this.sm.v!==100){var f=this.sm.v*.01;f===0&&(f=1e-8);var y=.5-f*.5;p<y?p=0:(p=(p-y)/f,p>1&&(p=1))}return p*this.a.v},getValue:function(a){this.iterateDynamicProperties(),this._mdf=a||this._mdf,this._currentTextLength=this.elem.textProperty.currentData.l.length||0,a&&this.data.r===2&&(this.e.v=this._currentTextLength);var l=this.data.r===2?1:100/this.data.totalChars,o=this.o.v/l,h=this.s.v/l+o,d=this.e.v/l+o;if(h>d){var b=h;h=d,d=b}this.finalS=h,this.finalE=d}},extendPrototype([DynamicPropertyContainer],i);function s(n,a,l){return new i(n,a)}return{getTextSelectorProp:s}}();function TextAnimatorDataProperty(t,e,r){var i={propType:!1},s=PropertyFactory.getProp,n=e.a;this.a={r:n.r?s(t,n.r,0,degToRads,r):i,rx:n.rx?s(t,n.rx,0,degToRads,r):i,ry:n.ry?s(t,n.ry,0,degToRads,r):i,sk:n.sk?s(t,n.sk,0,degToRads,r):i,sa:n.sa?s(t,n.sa,0,degToRads,r):i,s:n.s?s(t,n.s,1,.01,r):i,a:n.a?s(t,n.a,1,0,r):i,o:n.o?s(t,n.o,0,.01,r):i,p:n.p?s(t,n.p,1,0,r):i,sw:n.sw?s(t,n.sw,0,0,r):i,sc:n.sc?s(t,n.sc,1,0,r):i,fc:n.fc?s(t,n.fc,1,0,r):i,fh:n.fh?s(t,n.fh,0,0,r):i,fs:n.fs?s(t,n.fs,0,.01,r):i,fb:n.fb?s(t,n.fb,0,.01,r):i,t:n.t?s(t,n.t,0,0,r):i},this.s=TextSelectorProp.getTextSelectorProp(t,e.s,r),this.s.t=e.s.t}function TextAnimatorProperty(t,e,r){this._isFirstFrame=!0,this._hasMaskedPath=!1,this._frameId=-1,this._textData=t,this._renderType=e,this._elem=r,this._animatorsData=createSizedArray(this._textData.a.length),this._pathData={},this._moreOptions={alignment:{}},this.renderedLetters=[],this.lettersChangedFlag=!1,this.initDynamicPropertyContainer(r)}TextAnimatorProperty.prototype.searchProperties=function(){var t,e=this._textData.a.length,r,i=PropertyFactory.getProp;for(t=0;t<e;t+=1)r=this._textData.a[t],this._animatorsData[t]=new TextAnimatorDataProperty(this._elem,r,this);this._textData.p&&"m"in this._textData.p?(this._pathData={a:i(this._elem,this._textData.p.a,0,0,this),f:i(this._elem,this._textData.p.f,0,0,this),l:i(this._elem,this._textData.p.l,0,0,this),r:i(this._elem,this._textData.p.r,0,0,this),p:i(this._elem,this._textData.p.p,0,0,this),m:this._elem.maskManager.getMaskProperty(this._textData.p.m)},this._hasMaskedPath=!0):this._hasMaskedPath=!1,this._moreOptions.alignment=i(this._elem,this._textData.m.a,1,0,this)},TextAnimatorProperty.prototype.getMeasures=function(t,e){if(this.lettersChangedFlag=e,!(!this._mdf&&!this._isFirstFrame&&!e&&(!this._hasMaskedPath||!this._pathData.m._mdf))){this._isFirstFrame=!1;var r=this._moreOptions.alignment.v,i=this._animatorsData,s=this._textData,n=this.mHelper,a=this._renderType,l=this.renderedLetters.length,o,h,d,b,p=t.l,E,v,u,x,c,m,f,y,P,A,T,F,k,O,L;if(this._hasMaskedPath){if(L=this._pathData.m,!this._pathData.n||this._pathData._mdf){var R=L.v;this._pathData.r.v&&(R=R.reverse()),E={tLength:0,segments:[]},b=R._length-1;var D;for(F=0,d=0;d<b;d+=1)D=bez.buildBezierData(R.v[d],R.v[d+1],[R.o[d][0]-R.v[d][0],R.o[d][1]-R.v[d][1]],[R.i[d+1][0]-R.v[d+1][0],R.i[d+1][1]-R.v[d+1][1]]),E.tLength+=D.segmentLength,E.segments.push(D),F+=D.segmentLength;d=b,L.v.c&&(D=bez.buildBezierData(R.v[d],R.v[0],[R.o[d][0]-R.v[d][0],R.o[d][1]-R.v[d][1]],[R.i[0][0]-R.v[0][0],R.i[0][1]-R.v[0][1]]),E.tLength+=D.segmentLength,E.segments.push(D),F+=D.segmentLength),this._pathData.pi=E}if(E=this._pathData.pi,v=this._pathData.f.v,f=0,m=1,x=0,c=!0,A=E.segments,v<0&&L.v.c)for(E.tLength<Math.abs(v)&&(v=-Math.abs(v)%E.tLength),f=A.length-1,P=A[f].points,m=P.length-1;v<0;)v+=P[m].partialLength,m-=1,m<0&&(f-=1,P=A[f].points,m=P.length-1);P=A[f].points,y=P[m-1],u=P[m],T=u.partialLength}b=p.length,o=0,h=0;var B=t.finalSize*1.2*.714,I=!0,C,_,g,S,w;S=i.length;var M,V=-1,G,z,H,$=v,q=f,U=m,Q=-1,J,W,K,j,N,et,nt,rt,tt="",it=this.defaultPropsArray,st;if(t.j===2||t.j===1){var X=0,at=0,ot=t.j===2?-.5:-1,Y=0,lt=!0;for(d=0;d<b;d+=1)if(p[d].n){for(X&&(X+=at);Y<d;)p[Y].animatorJustifyOffset=X,Y+=1;X=0,lt=!0}else{for(g=0;g<S;g+=1)C=i[g].a,C.t.propType&&(lt&&t.j===2&&(at+=C.t.v*ot),_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),M.length?X+=C.t.v*M[0]*ot:X+=C.t.v*M*ot);lt=!1}for(X&&(X+=at);Y<d;)p[Y].animatorJustifyOffset=X,Y+=1}for(d=0;d<b;d+=1){if(n.reset(),J=1,p[d].n)o=0,h+=t.yOffset,h+=I?1:0,v=$,I=!1,this._hasMaskedPath&&(f=q,m=U,P=A[f].points,y=P[m-1],u=P[m],T=u.partialLength,x=0),tt="",rt="",et="",st="",it=this.defaultPropsArray;else{if(this._hasMaskedPath){if(Q!==p[d].line){switch(t.j){case 1:v+=F-t.lineWidths[p[d].line];break;case 2:v+=(F-t.lineWidths[p[d].line])/2;break}Q=p[d].line}V!==p[d].ind&&(p[V]&&(v+=p[V].extra),v+=p[d].an/2,V=p[d].ind),v+=r[0]*p[d].an*.005;var Z=0;for(g=0;g<S;g+=1)C=i[g].a,C.p.propType&&(_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),M.length?Z+=C.p.v[0]*M[0]:Z+=C.p.v[0]*M),C.a.propType&&(_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),M.length?Z+=C.a.v[0]*M[0]:Z+=C.a.v[0]*M);for(c=!0,this._pathData.a.v&&(v=p[0].an*.5+(F-this._pathData.f.v-p[0].an*.5-p[p.length-1].an*.5)*V/(b-1),v+=this._pathData.f.v);c;)x+T>=v+Z||!P?(k=(v+Z-x)/u.partialLength,z=y.point[0]+(u.point[0]-y.point[0])*k,H=y.point[1]+(u.point[1]-y.point[1])*k,n.translate(-r[0]*p[d].an*.005,-(r[1]*B)*.01),c=!1):P&&(x+=u.partialLength,m+=1,m>=P.length&&(m=0,f+=1,A[f]?P=A[f].points:L.v.c?(m=0,f=0,P=A[f].points):(x-=u.partialLength,P=null)),P&&(y=u,u=P[m],T=u.partialLength));G=p[d].an/2-p[d].add,n.translate(-G,0,0)}else G=p[d].an/2-p[d].add,n.translate(-G,0,0),n.translate(-r[0]*p[d].an*.005,-r[1]*B*.01,0);for(g=0;g<S;g+=1)C=i[g].a,C.t.propType&&(_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),(o!==0||t.j!==0)&&(this._hasMaskedPath?M.length?v+=C.t.v*M[0]:v+=C.t.v*M:M.length?o+=C.t.v*M[0]:o+=C.t.v*M));for(t.strokeWidthAnim&&(K=t.sw||0),t.strokeColorAnim&&(t.sc?W=[t.sc[0],t.sc[1],t.sc[2]]:W=[0,0,0]),t.fillColorAnim&&t.fc&&(j=[t.fc[0],t.fc[1],t.fc[2]]),g=0;g<S;g+=1)C=i[g].a,C.a.propType&&(_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),M.length?n.translate(-C.a.v[0]*M[0],-C.a.v[1]*M[1],C.a.v[2]*M[2]):n.translate(-C.a.v[0]*M,-C.a.v[1]*M,C.a.v[2]*M));for(g=0;g<S;g+=1)C=i[g].a,C.s.propType&&(_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),M.length?n.scale(1+(C.s.v[0]-1)*M[0],1+(C.s.v[1]-1)*M[1],1):n.scale(1+(C.s.v[0]-1)*M,1+(C.s.v[1]-1)*M,1));for(g=0;g<S;g+=1){if(C=i[g].a,_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),C.sk.propType&&(M.length?n.skewFromAxis(-C.sk.v*M[0],C.sa.v*M[1]):n.skewFromAxis(-C.sk.v*M,C.sa.v*M)),C.r.propType&&(M.length?n.rotateZ(-C.r.v*M[2]):n.rotateZ(-C.r.v*M)),C.ry.propType&&(M.length?n.rotateY(C.ry.v*M[1]):n.rotateY(C.ry.v*M)),C.rx.propType&&(M.length?n.rotateX(C.rx.v*M[0]):n.rotateX(C.rx.v*M)),C.o.propType&&(M.length?J+=(C.o.v*M[0]-J)*M[0]:J+=(C.o.v*M-J)*M),t.strokeWidthAnim&&C.sw.propType&&(M.length?K+=C.sw.v*M[0]:K+=C.sw.v*M),t.strokeColorAnim&&C.sc.propType)for(N=0;N<3;N+=1)M.length?W[N]+=(C.sc.v[N]-W[N])*M[0]:W[N]+=(C.sc.v[N]-W[N])*M;if(t.fillColorAnim&&t.fc){if(C.fc.propType)for(N=0;N<3;N+=1)M.length?j[N]+=(C.fc.v[N]-j[N])*M[0]:j[N]+=(C.fc.v[N]-j[N])*M;C.fh.propType&&(M.length?j=addHueToRGB(j,C.fh.v*M[0]):j=addHueToRGB(j,C.fh.v*M)),C.fs.propType&&(M.length?j=addSaturationToRGB(j,C.fs.v*M[0]):j=addSaturationToRGB(j,C.fs.v*M)),C.fb.propType&&(M.length?j=addBrightnessToRGB(j,C.fb.v*M[0]):j=addBrightnessToRGB(j,C.fb.v*M))}}for(g=0;g<S;g+=1)C=i[g].a,C.p.propType&&(_=i[g].s,M=_.getMult(p[d].anIndexes[g],s.a[g].s.totalChars),this._hasMaskedPath?M.length?n.translate(0,C.p.v[1]*M[0],-C.p.v[2]*M[1]):n.translate(0,C.p.v[1]*M,-C.p.v[2]*M):M.length?n.translate(C.p.v[0]*M[0],C.p.v[1]*M[1],-C.p.v[2]*M[2]):n.translate(C.p.v[0]*M,C.p.v[1]*M,-C.p.v[2]*M));if(t.strokeWidthAnim&&(et=K<0?0:K),t.strokeColorAnim&&(nt="rgb("+Math.round(W[0]*255)+","+Math.round(W[1]*255)+","+Math.round(W[2]*255)+")"),t.fillColorAnim&&t.fc&&(rt="rgb("+Math.round(j[0]*255)+","+Math.round(j[1]*255)+","+Math.round(j[2]*255)+")"),this._hasMaskedPath){if(n.translate(0,-t.ls),n.translate(0,r[1]*B*.01+h,0),this._pathData.p.v){O=(u.point[1]-y.point[1])/(u.point[0]-y.point[0]);var ht=Math.atan(O)*180/Math.PI;u.point[0]<y.point[0]&&(ht+=180),n.rotate(-ht*Math.PI/180)}n.translate(z,H,0),v-=r[0]*p[d].an*.005,p[d+1]&&V!==p[d+1].ind&&(v+=p[d].an/2,v+=t.tr*.001*t.finalSize)}else{switch(n.translate(o,h,0),t.ps&&n.translate(t.ps[0],t.ps[1]+t.ascent,0),t.j){case 1:n.translate(p[d].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[p[d].line]),0,0);break;case 2:n.translate(p[d].animatorJustifyOffset+t.justifyOffset+(t.boxWidth-t.lineWidths[p[d].line])/2,0,0);break}n.translate(0,-t.ls),n.translate(G,0,0),n.translate(r[0]*p[d].an*.005,r[1]*B*.01,0),o+=p[d].l+t.tr*.001*t.finalSize}a==="html"?tt=n.toCSS():a==="svg"?tt=n.to2dCSS():it=[n.props[0],n.props[1],n.props[2],n.props[3],n.props[4],n.props[5],n.props[6],n.props[7],n.props[8],n.props[9],n.props[10],n.props[11],n.props[12],n.props[13],n.props[14],n.props[15]],st=J}l<=d?(w=new LetterProps(st,et,nt,rt,tt,it),this.renderedLetters.push(w),l+=1,this.lettersChangedFlag=!0):(w=this.renderedLetters[d],this.lettersChangedFlag=w.update(st,et,nt,rt,tt,it)||this.lettersChangedFlag)}}},TextAnimatorProperty.prototype.getValue=function(){this._elem.globalData.frameId!==this._frameId&&(this._frameId=this._elem.globalData.frameId,this.iterateDynamicProperties())},TextAnimatorProperty.prototype.mHelper=new Matrix,TextAnimatorProperty.prototype.defaultPropsArray=[],extendPrototype([DynamicPropertyContainer],TextAnimatorProperty);function ITextElement(){}ITextElement.prototype.initElement=function(t,e,r){this.lettersChangedFlag=!0,this.initFrame(),this.initBaseData(t,e,r),this.textProperty=new TextProperty(this,t.t,this.dynamicProperties),this.textAnimator=new TextAnimatorProperty(t.t,this.renderType,this),this.initTransform(t,e,r),this.initHierarchy(),this.initRenderable(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),this.createContent(),this.hide(),this.textAnimator.searchProperties(this.dynamicProperties)},ITextElement.prototype.prepareFrame=function(t){this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange)},ITextElement.prototype.createPathShape=function(t,e){var r,i=e.length,s,n="";for(r=0;r<i;r+=1)e[r].ty==="sh"&&(s=e[r].ks.k,n+=buildShapeString(s,s.i.length,!0,t));return n},ITextElement.prototype.updateDocumentData=function(t,e){this.textProperty.updateDocumentData(t,e)},ITextElement.prototype.canResizeFont=function(t){this.textProperty.canResizeFont(t)},ITextElement.prototype.setMinimumFontSize=function(t){this.textProperty.setMinimumFontSize(t)},ITextElement.prototype.applyTextPropertiesToMatrix=function(t,e,r,i,s){switch(t.ps&&e.translate(t.ps[0],t.ps[1]+t.ascent,0),e.translate(0,-t.ls,0),t.j){case 1:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r]),0,0);break;case 2:e.translate(t.justifyOffset+(t.boxWidth-t.lineWidths[r])/2,0,0);break}e.translate(i,s,0)},ITextElement.prototype.buildColor=function(t){return"rgb("+Math.round(t[0]*255)+","+Math.round(t[1]*255)+","+Math.round(t[2]*255)+")"},ITextElement.prototype.emptyProp=new LetterProps,ITextElement.prototype.destroy=function(){},ITextElement.prototype.validateText=function(){(this.textProperty._mdf||this.textProperty._isFirstFrame)&&(this.buildNewText(),this.textProperty._isFirstFrame=!1,this.textProperty._mdf=!1)};var emptyShapeData={shapes:[]};function SVGTextLottieElement(t,e,r){this.textSpans=[],this.renderType="svg",this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,SVGBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],SVGTextLottieElement),SVGTextLottieElement.prototype.createContent=function(){this.data.singleShape&&!this.globalData.fontManager.chars&&(this.textContainer=createNS("text"))},SVGTextLottieElement.prototype.buildTextContents=function(t){for(var e=0,r=t.length,i=[],s="";e<r;)t[e]===String.fromCharCode(13)||t[e]===String.fromCharCode(3)?(i.push(s),s=""):s+=t[e],e+=1;return i.push(s),i},SVGTextLottieElement.prototype.buildShapeData=function(t,e){if(t.shapes&&t.shapes.length){var r=t.shapes[0];if(r.it){var i=r.it[r.it.length-1];i.s&&(i.s.k[0]=e,i.s.k[1]=e)}}return t},SVGTextLottieElement.prototype.buildNewText=function(){this.addDynamicProperty(this);var t,e,r=this.textProperty.currentData;this.renderedLetters=createSizedArray(r?r.l.length:0),r.fc?this.layerElement.setAttribute("fill",this.buildColor(r.fc)):this.layerElement.setAttribute("fill","rgba(0,0,0,0)"),r.sc&&(this.layerElement.setAttribute("stroke",this.buildColor(r.sc)),this.layerElement.setAttribute("stroke-width",r.sw)),this.layerElement.setAttribute("font-size",r.finalSize);var i=this.globalData.fontManager.getFontByName(r.f);if(i.fClass)this.layerElement.setAttribute("class",i.fClass);else{this.layerElement.setAttribute("font-family",i.fFamily);var s=r.fWeight,n=r.fStyle;this.layerElement.setAttribute("font-style",n),this.layerElement.setAttribute("font-weight",s)}this.layerElement.setAttribute("aria-label",r.t);var a=r.l||[],l=!!this.globalData.fontManager.chars;e=a.length;var o,h=this.mHelper,d="",b=this.data.singleShape,p=0,E=0,v=!0,u=r.tr*.001*r.finalSize;if(b&&!l&&!r.sz){var x=this.textContainer,c="start";switch(r.j){case 1:c="end";break;case 2:c="middle";break;default:c="start";break}x.setAttribute("text-anchor",c),x.setAttribute("letter-spacing",u);var m=this.buildTextContents(r.finalText);for(e=m.length,E=r.ps?r.ps[1]+r.ascent:0,t=0;t<e;t+=1)o=this.textSpans[t].span||createNS("tspan"),o.textContent=m[t],o.setAttribute("x",0),o.setAttribute("y",E),o.style.display="inherit",x.appendChild(o),this.textSpans[t]||(this.textSpans[t]={span:null,glyph:null}),this.textSpans[t].span=o,E+=r.finalLineHeight;this.layerElement.appendChild(x)}else{var f=this.textSpans.length,y;for(t=0;t<e;t+=1){if(this.textSpans[t]||(this.textSpans[t]={span:null,childSpan:null,glyph:null}),!l||!b||t===0){if(o=f>t?this.textSpans[t].span:createNS(l?"g":"text"),f<=t){if(o.setAttribute("stroke-linecap","butt"),o.setAttribute("stroke-linejoin","round"),o.setAttribute("stroke-miterlimit","4"),this.textSpans[t].span=o,l){var P=createNS("g");o.appendChild(P),this.textSpans[t].childSpan=P}this.textSpans[t].span=o,this.layerElement.appendChild(o)}o.style.display="inherit"}if(h.reset(),b&&(a[t].n&&(p=-u,E+=r.yOffset,E+=v?1:0,v=!1),this.applyTextPropertiesToMatrix(r,h,a[t].line,p,E),p+=a[t].l||0,p+=u),l){y=this.globalData.fontManager.getCharData(r.finalText[t],i.fStyle,this.globalData.fontManager.getFontByName(r.f).fFamily);var A;if(y.t===1)A=new SVGCompElement(y.data,this.globalData,this);else{var T=emptyShapeData;y.data&&y.data.shapes&&(T=this.buildShapeData(y.data,r.finalSize)),A=new SVGShapeElement(T,this.globalData,this)}if(this.textSpans[t].glyph){var F=this.textSpans[t].glyph;this.textSpans[t].childSpan.removeChild(F.layerElement),F.destroy()}this.textSpans[t].glyph=A,A._debug=!0,A.prepareFrame(0),A.renderFrame(),this.textSpans[t].childSpan.appendChild(A.layerElement),y.t===1&&this.textSpans[t].childSpan.setAttribute("transform","scale("+r.finalSize/100+","+r.finalSize/100+")")}else b&&o.setAttribute("transform","translate("+h.props[12]+","+h.props[13]+")"),o.textContent=a[t].val,o.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve")}b&&o&&o.setAttribute("d",d)}for(;t<this.textSpans.length;)this.textSpans[t].span.style.display="none",t+=1;this._sizeChanged=!0},SVGTextLottieElement.prototype.sourceRectAtTime=function(){if(this.prepareFrame(this.comp.renderedFrame-this.data.st),this.renderInnerContent(),this._sizeChanged){this._sizeChanged=!1;var t=this.layerElement.getBBox();this.bbox={top:t.y,left:t.x,width:t.width,height:t.height}}return this.bbox},SVGTextLottieElement.prototype.getValue=function(){var t,e=this.textSpans.length,r;for(this.renderedFrame=this.comp.renderedFrame,t=0;t<e;t+=1)r=this.textSpans[t].glyph,r&&(r.prepareFrame(this.comp.renderedFrame-this.data.st),r._mdf&&(this._mdf=!0))},SVGTextLottieElement.prototype.renderInnerContent=function(){if(this.validateText(),(!this.data.singleShape||this._mdf)&&(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),this.lettersChangedFlag||this.textAnimator.lettersChangedFlag)){this._sizeChanged=!0;var t,e,r=this.textAnimator.renderedLetters,i=this.textProperty.currentData.l;e=i.length;var s,n,a;for(t=0;t<e;t+=1)i[t].n||(s=r[t],n=this.textSpans[t].span,a=this.textSpans[t].glyph,a&&a.renderFrame(),s._mdf.m&&n.setAttribute("transform",s.m),s._mdf.o&&n.setAttribute("opacity",s.o),s._mdf.sw&&n.setAttribute("stroke-width",s.sw),s._mdf.sc&&n.setAttribute("stroke",s.sc),s._mdf.fc&&n.setAttribute("fill",s.fc))}};function ISolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([IImageElement],ISolidElement),ISolidElement.prototype.createContent=function(){var t=createNS("rect");t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.layerElement.appendChild(t)};function NullElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initFrame(),this.initTransform(t,e,r),this.initHierarchy()}NullElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},NullElement.prototype.renderFrame=function(){},NullElement.prototype.getBaseElement=function(){return null},NullElement.prototype.destroy=function(){},NullElement.prototype.sourceRectAtTime=function(){},NullElement.prototype.hide=function(){},extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement],NullElement);function SVGRendererBase(){}extendPrototype([BaseRenderer],SVGRendererBase),SVGRendererBase.prototype.createNull=function(t){return new NullElement(t,this.globalData,this)},SVGRendererBase.prototype.createShape=function(t){return new SVGShapeElement(t,this.globalData,this)},SVGRendererBase.prototype.createText=function(t){return new SVGTextLottieElement(t,this.globalData,this)},SVGRendererBase.prototype.createImage=function(t){return new IImageElement(t,this.globalData,this)},SVGRendererBase.prototype.createSolid=function(t){return new ISolidElement(t,this.globalData,this)},SVGRendererBase.prototype.configAnimation=function(t){this.svgElement.setAttribute("xmlns","http://www.w3.org/2000/svg"),this.svgElement.setAttribute("xmlns:xlink","http://www.w3.org/1999/xlink"),this.renderConfig.viewBoxSize?this.svgElement.setAttribute("viewBox",this.renderConfig.viewBoxSize):this.svgElement.setAttribute("viewBox","0 0 "+t.w+" "+t.h),this.renderConfig.viewBoxOnly||(this.svgElement.setAttribute("width",t.w),this.svgElement.setAttribute("height",t.h),this.svgElement.style.width="100%",this.svgElement.style.height="100%",this.svgElement.style.transform="translate3d(0,0,0)",this.svgElement.style.contentVisibility=this.renderConfig.contentVisibility),this.renderConfig.width&&this.svgElement.setAttribute("width",this.renderConfig.width),this.renderConfig.height&&this.svgElement.setAttribute("height",this.renderConfig.height),this.renderConfig.className&&this.svgElement.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.svgElement.setAttribute("id",this.renderConfig.id),this.renderConfig.focusable!==void 0&&this.svgElement.setAttribute("focusable",this.renderConfig.focusable),this.svgElement.setAttribute("preserveAspectRatio",this.renderConfig.preserveAspectRatio),this.animationItem.wrapper.appendChild(this.svgElement);var e=this.globalData.defs;this.setupGlobalData(t,e),this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.data=t;var r=createNS("clipPath"),i=createNS("rect");i.setAttribute("width",t.w),i.setAttribute("height",t.h),i.setAttribute("x",0),i.setAttribute("y",0);var s=createElementID();r.setAttribute("id",s),r.appendChild(i),this.layerElement.setAttribute("clip-path","url("+getLocationHref()+"#"+s+")"),e.appendChild(r),this.layers=t.layers,this.elements=createSizedArray(t.layers.length)},SVGRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.layerElement=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},SVGRendererBase.prototype.updateContainerSize=function(){},SVGRendererBase.prototype.findIndexByInd=function(t){var e=0,r=this.layers.length;for(e=0;e<r;e+=1)if(this.layers[e].ind===t)return e;return-1},SVGRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){e[t]=!0;var r=this.createItem(this.layers[t]);if(e[t]=r,getExpressionsPlugin()&&(this.layers[t].ty===0&&this.globalData.projectInterface.registerComposition(r),r.initExpressions()),this.appendElementInPos(r,t),this.layers[t].tt){var i="tp"in this.layers[t]?this.findIndexByInd(this.layers[t].tp):t-1;if(i===-1)return;if(!this.elements[i]||this.elements[i]===!0)this.buildItem(i),this.addPendingElement(r);else{var s=e[i],n=s.getMatte(this.layers[t].tt);r.setMatte(n)}}}},SVGRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();if(t.checkParenting(),t.data.tt)for(var e=0,r=this.elements.length;e<r;){if(this.elements[e]===t){var i="tp"in t.data?this.findIndexByInd(t.data.tp):e-1,s=this.elements[i],n=s.getMatte(this.layers[e].tt);t.setMatte(n);break}e+=1}}},SVGRendererBase.prototype.renderFrame=function(t){if(!(this.renderedFrame===t||this.destroyed)){t===null?t=this.renderedFrame:this.renderedFrame=t,this.globalData.frameNum=t,this.globalData.frameId+=1,this.globalData.projectInterface.currentFrame=t,this.globalData._mdf=!1;var e,r=this.layers.length;for(this.completeLayers||this.checkLayers(t),e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].prepareFrame(t-this.layers[e].st);if(this.globalData._mdf)for(e=0;e<r;e+=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()}},SVGRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){for(var i=0,s;i<e;)this.elements[i]&&this.elements[i]!==!0&&this.elements[i].getBaseElement()&&(s=this.elements[i].getBaseElement()),i+=1;s?this.layerElement.insertBefore(r,s):this.layerElement.appendChild(r)}},SVGRendererBase.prototype.hide=function(){this.layerElement.style.display="none"},SVGRendererBase.prototype.show=function(){this.layerElement.style.display="block"};function ICompElement(){}extendPrototype([BaseElement,TransformElement,HierarchyElement,FrameElement,RenderableDOMElement],ICompElement),ICompElement.prototype.initElement=function(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initTransform(t,e,r),this.initRenderable(),this.initHierarchy(),this.initRendererElement(),this.createContainerElements(),this.createRenderableComponents(),(this.data.xt||!e.progressiveLoad)&&this.buildAllItems(),this.hide()},ICompElement.prototype.prepareFrame=function(t){if(this._mdf=!1,this.prepareRenderableFrame(t),this.prepareProperties(t,this.isInRange),!(!this.isInRange&&!this.data.xt)){if(this.tm._placeholder)this.renderedFrame=t/this.data.sr;else{var e=this.tm.v;e===this.data.op&&(e=this.data.op-1),this.renderedFrame=e}var r,i=this.elements.length;for(this.completeLayers||this.checkLayers(this.renderedFrame),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&(this.elements[r].prepareFrame(this.renderedFrame-this.layers[r].st),this.elements[r]._mdf&&(this._mdf=!0))}},ICompElement.prototype.renderInnerContent=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)(this.completeLayers||this.elements[t])&&this.elements[t].renderFrame()},ICompElement.prototype.setElements=function(t){this.elements=t},ICompElement.prototype.getElements=function(){return this.elements},ICompElement.prototype.destroyElements=function(){var t,e=this.layers.length;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy()},ICompElement.prototype.destroy=function(){this.destroyElements(),this.destroyBaseElement()};function SVGCompElement(t,e,r){this.layers=t.layers,this.supports3d=!0,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([SVGRendererBase,ICompElement,SVGBaseElement],SVGCompElement),SVGCompElement.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function SVGRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.svgElement=createNS("svg");var r="";if(e&&e.title){var i=createNS("title"),s=createElementID();i.setAttribute("id",s),i.textContent=e.title,this.svgElement.appendChild(i),r+=s}if(e&&e.description){var n=createNS("desc"),a=createElementID();n.setAttribute("id",a),n.textContent=e.description,this.svgElement.appendChild(n),r+=" "+a}r&&this.svgElement.setAttribute("aria-labelledby",r);var l=createNS("defs");this.svgElement.appendChild(l);var o=createNS("g");this.svgElement.appendChild(o),this.layerElement=o,this.renderConfig={preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",progressiveLoad:e&&e.progressiveLoad||!1,hideOnTransparent:!(e&&e.hideOnTransparent===!1),viewBoxOnly:e&&e.viewBoxOnly||!1,viewBoxSize:e&&e.viewBoxSize||!1,className:e&&e.className||"",id:e&&e.id||"",focusable:e&&e.focusable,filterSize:{width:e&&e.filterSize&&e.filterSize.width||"100%",height:e&&e.filterSize&&e.filterSize.height||"100%",x:e&&e.filterSize&&e.filterSize.x||"0%",y:e&&e.filterSize&&e.filterSize.y||"0%"},width:e&&e.width,height:e&&e.height,runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,defs:l,renderConfig:this.renderConfig},this.elements=[],this.pendingElements=[],this.destroyed=!1,this.rendererType="svg"}extendPrototype([SVGRendererBase],SVGRenderer),SVGRenderer.prototype.createComp=function(t){return new SVGCompElement(t,this.globalData,this)};function ShapeTransformManager(){this.sequences={},this.sequenceList=[],this.transform_key_count=0}ShapeTransformManager.prototype={addTransformSequence:function(e){var r,i=e.length,s="_";for(r=0;r<i;r+=1)s+=e[r].transform.key+"_";var n=this.sequences[s];return n||(n={transforms:[].concat(e),finalTransform:new Matrix,_mdf:!1},this.sequences[s]=n,this.sequenceList.push(n)),n},processSequence:function(e,r){for(var i=0,s=e.transforms.length,n=r;i<s&&!r;){if(e.transforms[i].transform.mProps._mdf){n=!0;break}i+=1}if(n)for(e.finalTransform.reset(),i=s-1;i>=0;i-=1)e.finalTransform.multiply(e.transforms[i].transform.mProps.v);e._mdf=n},processSequences:function(e){var r,i=this.sequenceList.length;for(r=0;r<i;r+=1)this.processSequence(this.sequenceList[r],e)},getNewKey:function(){return this.transform_key_count+=1,"_"+this.transform_key_count}};var lumaLoader=function(){var e="__lottie_element_luma_buffer",r=null,i=null,s=null;function n(){var o=createNS("svg"),h=createNS("filter"),d=createNS("feColorMatrix");return h.setAttribute("id",e),d.setAttribute("type","matrix"),d.setAttribute("color-interpolation-filters","sRGB"),d.setAttribute("values","0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0, 0.3, 0.3, 0.3, 0, 0"),h.appendChild(d),o.appendChild(h),o.setAttribute("id",e+"_svg"),featureSupport.svgLumaHidden&&(o.style.display="none"),o}function a(){r||(s=n(),document.body.appendChild(s),r=createTag("canvas"),i=r.getContext("2d"),i.filter="url(#"+e+")",i.fillStyle="rgba(0,0,0,0)",i.fillRect(0,0,1,1))}function l(o){return r||a(),r.width=o.width,r.height=o.height,i.filter="url(#"+e+")",r}return{load:a,get:l}};function createCanvas(t,e){if(featureSupport.offscreenCanvas)return new OffscreenCanvas(t,e);var r=createTag("canvas");return r.width=t,r.height=e,r}var assetLoader=function(){return{loadLumaCanvas:lumaLoader.load,getLumaCanvas:lumaLoader.get,createCanvas}}(),registeredEffects={};function CVEffects(t){var e,r=t.data.ef?t.data.ef.length:0;this.filters=[];var i;for(e=0;e<r;e+=1){i=null;var s=t.data.ef[e].ty;if(registeredEffects[s]){var n=registeredEffects[s].effect;i=new n(t.effectsManager.effectElements[e],t)}i&&this.filters.push(i)}this.filters.length&&t.addRenderableComponent(this)}CVEffects.prototype.renderFrame=function(t){var e,r=this.filters.length;for(e=0;e<r;e+=1)this.filters[e].renderFrame(t)},CVEffects.prototype.getEffects=function(t){var e,r=this.filters.length,i=[];for(e=0;e<r;e+=1)this.filters[e].type===t&&i.push(this.filters[e]);return i};function registerEffect(t,e){registeredEffects[t]={effect:e}}function CVMaskElement(t,e){this.data=t,this.element=e,this.masksProperties=this.data.masksProperties||[],this.viewData=createSizedArray(this.masksProperties.length);var r,i=this.masksProperties.length,s=!1;for(r=0;r<i;r+=1)this.masksProperties[r].mode!=="n"&&(s=!0),this.viewData[r]=ShapePropertyFactory.getShapeProp(this.element,this.masksProperties[r],3);this.hasMasks=s,s&&this.element.addRenderableComponent(this)}CVMaskElement.prototype.renderFrame=function(){if(this.hasMasks){var t=this.element.finalTransform.mat,e=this.element.canvasContext,r,i=this.masksProperties.length,s,n,a;for(e.beginPath(),r=0;r<i;r+=1)if(this.masksProperties[r].mode!=="n"){this.masksProperties[r].inv&&(e.moveTo(0,0),e.lineTo(this.element.globalData.compSize.w,0),e.lineTo(this.element.globalData.compSize.w,this.element.globalData.compSize.h),e.lineTo(0,this.element.globalData.compSize.h),e.lineTo(0,0)),a=this.viewData[r].v,s=t.applyToPointArray(a.v[0][0],a.v[0][1],0),e.moveTo(s[0],s[1]);var l,o=a._length;for(l=1;l<o;l+=1)n=t.applyToTriplePoints(a.o[l-1],a.i[l],a.v[l]),e.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5]);n=t.applyToTriplePoints(a.o[l-1],a.i[0],a.v[0]),e.bezierCurveTo(n[0],n[1],n[2],n[3],n[4],n[5])}this.element.globalData.renderer.save(!0),e.clip()}},CVMaskElement.prototype.getMaskProperty=MaskElement.prototype.getMaskProperty,CVMaskElement.prototype.destroy=function(){this.element=null};function CVBaseElement(){}var operationsMap={1:"source-in",2:"source-out",3:"source-in",4:"source-out"};CVBaseElement.prototype={createElements:function(){},initRendererElement:function(){},createContainerElements:function(){if(this.data.tt>=1){this.buffers=[];var e=this.globalData.canvasContext,r=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(r);var i=assetLoader.createCanvas(e.canvas.width,e.canvas.height);this.buffers.push(i),this.data.tt>=3&&!document._isProxy&&assetLoader.loadLumaCanvas()}this.canvasContext=this.globalData.canvasContext,this.transformCanvas=this.globalData.transformCanvas,this.renderableEffectsManager=new CVEffects(this),this.searchEffectTransforms()},createContent:function(){},setBlendMode:function(){var e=this.globalData;if(e.blendMode!==this.data.bm){e.blendMode=this.data.bm;var r=getBlendMode(this.data.bm);e.canvasContext.globalCompositeOperation=r}},createRenderableComponents:function(){this.maskManager=new CVMaskElement(this.data,this),this.transformEffects=this.renderableEffectsManager.getEffects(effectTypes.TRANSFORM_EFFECT)},hideElement:function(){!this.hidden&&(!this.isInRange||this.isTransparent)&&(this.hidden=!0)},showElement:function(){this.isInRange&&!this.isTransparent&&(this.hidden=!1,this._isFirstFrame=!0,this.maskManager._isFirstFrame=!0)},clearCanvas:function(e){e.clearRect(this.transformCanvas.tx,this.transformCanvas.ty,this.transformCanvas.w*this.transformCanvas.sx,this.transformCanvas.h*this.transformCanvas.sy)},prepareLayer:function(){if(this.data.tt>=1){var e=this.buffers[0],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.currentTransform=this.canvasContext.getTransform(),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform)}},exitLayer:function(){if(this.data.tt>=1){var e=this.buffers[1],r=e.getContext("2d");this.clearCanvas(r),r.drawImage(this.canvasContext.canvas,0,0),this.canvasContext.setTransform(1,0,0,1,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.setTransform(this.currentTransform);var i=this.comp.getElementById("tp"in this.data?this.data.tp:this.data.ind-1);if(i.renderFrame(!0),this.canvasContext.setTransform(1,0,0,1,0,0),this.data.tt>=3&&!document._isProxy){var s=assetLoader.getLumaCanvas(this.canvasContext.canvas),n=s.getContext("2d");n.drawImage(this.canvasContext.canvas,0,0),this.clearCanvas(this.canvasContext),this.canvasContext.drawImage(s,0,0)}this.canvasContext.globalCompositeOperation=operationsMap[this.data.tt],this.canvasContext.drawImage(e,0,0),this.canvasContext.globalCompositeOperation="destination-over",this.canvasContext.drawImage(this.buffers[0],0,0),this.canvasContext.setTransform(this.currentTransform),this.canvasContext.globalCompositeOperation="source-over"}},renderFrame:function(e){if(!(this.hidden||this.data.hd)&&!(this.data.td===1&&!e)){this.renderTransform(),this.renderRenderable(),this.renderLocalTransform(),this.setBlendMode();var r=this.data.ty===0;this.prepareLayer(),this.globalData.renderer.save(r),this.globalData.renderer.ctxTransform(this.finalTransform.localMat.props),this.globalData.renderer.ctxOpacity(this.finalTransform.localOpacity),this.renderInnerContent(),this.globalData.renderer.restore(r),this.exitLayer(),this.maskManager.hasMasks&&this.globalData.renderer.restore(!0),this._isFirstFrame&&(this._isFirstFrame=!1)}},destroy:function(){this.canvasContext=null,this.data=null,this.globalData=null,this.maskManager.destroy()},mHelper:new Matrix},CVBaseElement.prototype.hide=CVBaseElement.prototype.hideElement,CVBaseElement.prototype.show=CVBaseElement.prototype.showElement;function CVShapeData(t,e,r,i){this.styledShapes=[],this.tr=[0,0,0,0,0,0];var s=4;e.ty==="rc"?s=5:e.ty==="el"?s=6:e.ty==="sr"&&(s=7),this.sh=ShapePropertyFactory.getShapeProp(t,e,s,t);var n,a=r.length,l;for(n=0;n<a;n+=1)r[n].closed||(l={transforms:i.addTransformSequence(r[n].transforms),trNodes:[]},this.styledShapes.push(l),r[n].elements.push(l))}CVShapeData.prototype.setAsAnimated=SVGShapeData.prototype.setAsAnimated;function CVShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.itemsData=[],this.prevViewData=[],this.shapeModifiers=[],this.processedElements=[],this.transformsManager=new ShapeTransformManager,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,IShapeElement,HierarchyElement,FrameElement,RenderableElement],CVShapeElement),CVShapeElement.prototype.initElement=RenderableDOMElement.prototype.initElement,CVShapeElement.prototype.transformHelper={opacity:1,_opMdf:!1},CVShapeElement.prototype.dashResetter=[],CVShapeElement.prototype.createContent=function(){this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[])},CVShapeElement.prototype.createStyleElement=function(t,e){var r={data:t,type:t.ty,preTransforms:this.transformsManager.addTransformSequence(e),transforms:[],elements:[],closed:t.hd===!0},i={};if(t.ty==="fl"||t.ty==="st"?(i.c=PropertyFactory.getProp(this,t.c,1,255,this),i.c.k||(r.co="rgb("+bmFloor(i.c.v[0])+","+bmFloor(i.c.v[1])+","+bmFloor(i.c.v[2])+")")):(t.ty==="gf"||t.ty==="gs")&&(i.s=PropertyFactory.getProp(this,t.s,1,null,this),i.e=PropertyFactory.getProp(this,t.e,1,null,this),i.h=PropertyFactory.getProp(this,t.h||{k:0},0,.01,this),i.a=PropertyFactory.getProp(this,t.a||{k:0},0,degToRads,this),i.g=new GradientProperty(this,t.g,this)),i.o=PropertyFactory.getProp(this,t.o,0,.01,this),t.ty==="st"||t.ty==="gs"){if(r.lc=lineCapEnum[t.lc||2],r.lj=lineJoinEnum[t.lj||2],t.lj==1&&(r.ml=t.ml),i.w=PropertyFactory.getProp(this,t.w,0,null,this),i.w.k||(r.wi=i.w.v),t.d){var s=new DashProperty(this,t.d,"canvas",this);i.d=s,i.d.k||(r.da=i.d.dashArray,r.do=i.d.dashoffset[0])}}else r.r=t.r===2?"evenodd":"nonzero";return this.stylesList.push(r),i.style=r,i},CVShapeElement.prototype.createGroupElement=function(){var t={it:[],prevViewData:[]};return t},CVShapeElement.prototype.createTransformElement=function(t){var e={transform:{opacity:1,_opMdf:!1,key:this.transformsManager.getNewKey(),op:PropertyFactory.getProp(this,t.o,0,.01,this),mProps:TransformPropertyFactory.getTransformProperty(this,t,this)}};return e},CVShapeElement.prototype.createShapeElement=function(t){var e=new CVShapeData(this,t,this.stylesList,this.transformsManager);return this.shapes.push(e),this.addShapeToModifiers(e),e},CVShapeElement.prototype.reloadShapes=function(){this._isFirstFrame=!0;var t,e=this.itemsData.length;for(t=0;t<e;t+=1)this.prevViewData[t]=this.itemsData[t];for(this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,!0,[]),e=this.dynamicProperties.length,t=0;t<e;t+=1)this.dynamicProperties[t].getValue();this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame)},CVShapeElement.prototype.addTransformToStyleList=function(t){var e,r=this.stylesList.length;for(e=0;e<r;e+=1)this.stylesList[e].closed||this.stylesList[e].transforms.push(t)},CVShapeElement.prototype.removeTransformFromStyleList=function(){var t,e=this.stylesList.length;for(t=0;t<e;t+=1)this.stylesList[t].closed||this.stylesList[t].transforms.pop()},CVShapeElement.prototype.closeStyles=function(t){var e,r=t.length;for(e=0;e<r;e+=1)t[e].closed=!0},CVShapeElement.prototype.searchShapes=function(t,e,r,i,s){var n,a=t.length-1,l,o,h=[],d=[],b,p,E,v=[].concat(s);for(n=a;n>=0;n-=1){if(b=this.searchProcessedElement(t[n]),b?e[n]=r[b-1]:t[n]._shouldRender=i,t[n].ty==="fl"||t[n].ty==="st"||t[n].ty==="gf"||t[n].ty==="gs")b?e[n].style.closed=!1:e[n]=this.createStyleElement(t[n],v),h.push(e[n].style);else if(t[n].ty==="gr"){if(!b)e[n]=this.createGroupElement(t[n]);else for(o=e[n].it.length,l=0;l<o;l+=1)e[n].prevViewData[l]=e[n].it[l];this.searchShapes(t[n].it,e[n].it,e[n].prevViewData,i,v)}else t[n].ty==="tr"?(b||(E=this.createTransformElement(t[n]),e[n]=E),v.push(e[n]),this.addTransformToStyleList(e[n])):t[n].ty==="sh"||t[n].ty==="rc"||t[n].ty==="el"||t[n].ty==="sr"?b||(e[n]=this.createShapeElement(t[n])):t[n].ty==="tm"||t[n].ty==="rd"||t[n].ty==="pb"||t[n].ty==="zz"||t[n].ty==="op"?(b?(p=e[n],p.closed=!1):(p=ShapeModifiers.getModifier(t[n].ty),p.init(this,t[n]),e[n]=p,this.shapeModifiers.push(p)),d.push(p)):t[n].ty==="rp"&&(b?(p=e[n],p.closed=!0):(p=ShapeModifiers.getModifier(t[n].ty),e[n]=p,p.init(this,t,n,e),this.shapeModifiers.push(p),i=!1),d.push(p));this.addProcessedElement(t[n],n+1)}for(this.removeTransformFromStyleList(),this.closeStyles(h),a=d.length,n=0;n<a;n+=1)d[n].closed=!0},CVShapeElement.prototype.renderInnerContent=function(){this.transformHelper.opacity=1,this.transformHelper._opMdf=!1,this.renderModifiers(),this.transformsManager.processSequences(this._isFirstFrame),this.renderShape(this.transformHelper,this.shapesData,this.itemsData,!0)},CVShapeElement.prototype.renderShapeTransform=function(t,e){(t._opMdf||e.op._mdf||this._isFirstFrame)&&(e.opacity=t.opacity,e.opacity*=e.op.v,e._opMdf=!0)},CVShapeElement.prototype.drawLayer=function(){var t,e=this.stylesList.length,r,i,s,n,a,l,o=this.globalData.renderer,h=this.globalData.canvasContext,d,b;for(t=0;t<e;t+=1)if(b=this.stylesList[t],d=b.type,!((d==="st"||d==="gs")&&b.wi===0||!b.data._shouldRender||b.coOp===0||this.globalData.currentGlobalAlpha===0)){for(o.save(),a=b.elements,d==="st"||d==="gs"?(o.ctxStrokeStyle(d==="st"?b.co:b.grd),o.ctxLineWidth(b.wi),o.ctxLineCap(b.lc),o.ctxLineJoin(b.lj),o.ctxMiterLimit(b.ml||0)):o.ctxFillStyle(d==="fl"?b.co:b.grd),o.ctxOpacity(b.coOp),d!=="st"&&d!=="gs"&&h.beginPath(),o.ctxTransform(b.preTransforms.finalTransform.props),i=a.length,r=0;r<i;r+=1){for((d==="st"||d==="gs")&&(h.beginPath(),b.da&&(h.setLineDash(b.da),h.lineDashOffset=b.do)),l=a[r].trNodes,n=l.length,s=0;s<n;s+=1)l[s].t==="m"?h.moveTo(l[s].p[0],l[s].p[1]):l[s].t==="c"?h.bezierCurveTo(l[s].pts[0],l[s].pts[1],l[s].pts[2],l[s].pts[3],l[s].pts[4],l[s].pts[5]):h.closePath();(d==="st"||d==="gs")&&(o.ctxStroke(),b.da&&h.setLineDash(this.dashResetter))}d!=="st"&&d!=="gs"&&this.globalData.renderer.ctxFill(b.r),o.restore()}},CVShapeElement.prototype.renderShape=function(t,e,r,i){var s,n=e.length-1,a;for(a=t,s=n;s>=0;s-=1)e[s].ty==="tr"?(a=r[s].transform,this.renderShapeTransform(t,a)):e[s].ty==="sh"||e[s].ty==="el"||e[s].ty==="rc"||e[s].ty==="sr"?this.renderPath(e[s],r[s]):e[s].ty==="fl"?this.renderFill(e[s],r[s],a):e[s].ty==="st"?this.renderStroke(e[s],r[s],a):e[s].ty==="gf"||e[s].ty==="gs"?this.renderGradientFill(e[s],r[s],a):e[s].ty==="gr"?this.renderShape(a,e[s].it,r[s].it):e[s].ty;i&&this.drawLayer()},CVShapeElement.prototype.renderStyledShape=function(t,e){if(this._isFirstFrame||e._mdf||t.transforms._mdf){var r=t.trNodes,i=e.paths,s,n,a,l=i._length;r.length=0;var o=t.transforms.finalTransform;for(a=0;a<l;a+=1){var h=i.shapes[a];if(h&&h.v){for(n=h._length,s=1;s<n;s+=1)s===1&&r.push({t:"m",p:o.applyToPointArray(h.v[0][0],h.v[0][1],0)}),r.push({t:"c",pts:o.applyToTriplePoints(h.o[s-1],h.i[s],h.v[s])});n===1&&r.push({t:"m",p:o.applyToPointArray(h.v[0][0],h.v[0][1],0)}),h.c&&n&&(r.push({t:"c",pts:o.applyToTriplePoints(h.o[s-1],h.i[0],h.v[0])}),r.push({t:"z"}))}}t.trNodes=r}},CVShapeElement.prototype.renderPath=function(t,e){if(t.hd!==!0&&t._shouldRender){var r,i=e.styledShapes.length;for(r=0;r<i;r+=1)this.renderStyledShape(e.styledShapes[r],e.sh)}},CVShapeElement.prototype.renderFill=function(t,e,r){var i=e.style;(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity)},CVShapeElement.prototype.renderGradientFill=function(t,e,r){var i=e.style,s;if(!i.grd||e.g._mdf||e.s._mdf||e.e._mdf||t.t!==1&&(e.h._mdf||e.a._mdf)){var n=this.globalData.canvasContext,a=e.s.v,l=e.e.v;if(t.t===1)s=n.createLinearGradient(a[0],a[1],l[0],l[1]);else{var o=Math.sqrt(Math.pow(a[0]-l[0],2)+Math.pow(a[1]-l[1],2)),h=Math.atan2(l[1]-a[1],l[0]-a[0]),d=e.h.v;d>=1?d=.99:d<=-1&&(d=-.99);var b=o*d,p=Math.cos(h+e.a.v)*b+a[0],E=Math.sin(h+e.a.v)*b+a[1];s=n.createRadialGradient(p,E,0,a[0],a[1],o)}var v,u=t.g.p,x=e.g.c,c=1;for(v=0;v<u;v+=1)e.g._hasOpacity&&e.g._collapsable&&(c=e.g.o[v*2+1]),s.addColorStop(x[v*4]/100,"rgba("+x[v*4+1]+","+x[v*4+2]+","+x[v*4+3]+","+c+")");i.grd=s}i.coOp=e.o.v*r.opacity},CVShapeElement.prototype.renderStroke=function(t,e,r){var i=e.style,s=e.d;s&&(s._mdf||this._isFirstFrame)&&(i.da=s.dashArray,i.do=s.dashoffset[0]),(e.c._mdf||this._isFirstFrame)&&(i.co="rgb("+bmFloor(e.c.v[0])+","+bmFloor(e.c.v[1])+","+bmFloor(e.c.v[2])+")"),(e.o._mdf||r._opMdf||this._isFirstFrame)&&(i.coOp=e.o.v*r.opacity),(e.w._mdf||this._isFirstFrame)&&(i.wi=e.w.v)},CVShapeElement.prototype.destroy=function(){this.shapesData=null,this.globalData=null,this.canvasContext=null,this.stylesList.length=0,this.itemsData.length=0};function CVTextElement(t,e,r){this.textSpans=[],this.yOffset=0,this.fillColorAnim=!1,this.strokeColorAnim=!1,this.strokeWidthAnim=!1,this.stroke=!1,this.fill=!1,this.justifyOffset=0,this.currentRender=null,this.renderType="canvas",this.values={fill:"rgba(0,0,0,0)",stroke:"rgba(0,0,0,0)",sWidth:0,fValue:""},this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement,ITextElement],CVTextElement),CVTextElement.prototype.tHelper=createTag("canvas").getContext("2d"),CVTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=!1;t.fc?(e=!0,this.values.fill=this.buildColor(t.fc)):this.values.fill="rgba(0,0,0,0)",this.fill=e;var r=!1;t.sc&&(r=!0,this.values.stroke=this.buildColor(t.sc),this.values.sWidth=t.sw);var i=this.globalData.fontManager.getFontByName(t.f),s,n,a=t.l,l=this.mHelper;this.stroke=r,this.values.fValue=t.finalSize+"px "+this.globalData.fontManager.getFontByName(t.f).fFamily,n=t.finalText.length;var o,h,d,b,p,E,v,u,x,c,m=this.data.singleShape,f=t.tr*.001*t.finalSize,y=0,P=0,A=!0,T=0;for(s=0;s<n;s+=1){o=this.globalData.fontManager.getCharData(t.finalText[s],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),h=o&&o.data||{},l.reset(),m&&a[s].n&&(y=-f,P+=t.yOffset,P+=A?1:0,A=!1),p=h.shapes?h.shapes[0].it:[],v=p.length,l.scale(t.finalSize/100,t.finalSize/100),m&&this.applyTextPropertiesToMatrix(t,l,a[s].line,y,P),x=createSizedArray(v-1);var F=0;for(E=0;E<v;E+=1)if(p[E].ty==="sh"){for(b=p[E].ks.k.i.length,u=p[E].ks.k,c=[],d=1;d<b;d+=1)d===1&&c.push(l.applyToX(u.v[0][0],u.v[0][1],0),l.applyToY(u.v[0][0],u.v[0][1],0)),c.push(l.applyToX(u.o[d-1][0],u.o[d-1][1],0),l.applyToY(u.o[d-1][0],u.o[d-1][1],0),l.applyToX(u.i[d][0],u.i[d][1],0),l.applyToY(u.i[d][0],u.i[d][1],0),l.applyToX(u.v[d][0],u.v[d][1],0),l.applyToY(u.v[d][0],u.v[d][1],0));c.push(l.applyToX(u.o[d-1][0],u.o[d-1][1],0),l.applyToY(u.o[d-1][0],u.o[d-1][1],0),l.applyToX(u.i[0][0],u.i[0][1],0),l.applyToY(u.i[0][0],u.i[0][1],0),l.applyToX(u.v[0][0],u.v[0][1],0),l.applyToY(u.v[0][0],u.v[0][1],0)),x[F]=c,F+=1}m&&(y+=a[s].l,y+=f),this.textSpans[T]?this.textSpans[T].elem=x:this.textSpans[T]={elem:x},T+=1}},CVTextElement.prototype.renderInnerContent=function(){this.validateText();var t=this.canvasContext;t.font=this.values.fValue,this.globalData.renderer.ctxLineCap("butt"),this.globalData.renderer.ctxLineJoin("miter"),this.globalData.renderer.ctxMiterLimit(4),this.data.singleShape||this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag);var e,r,i,s,n,a,l=this.textAnimator.renderedLetters,o=this.textProperty.currentData.l;r=o.length;var h,d=null,b=null,p=null,E,v,u=this.globalData.renderer;for(e=0;e<r;e+=1)if(!o[e].n){if(h=l[e],h&&(u.save(),u.ctxTransform(h.p),u.ctxOpacity(h.o)),this.fill){for(h&&h.fc?d!==h.fc&&(u.ctxFillStyle(h.fc),d=h.fc):d!==this.values.fill&&(d=this.values.fill,u.ctxFillStyle(this.values.fill)),E=this.textSpans[e].elem,s=E.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(v=E[i],a=v.length,this.globalData.canvasContext.moveTo(v[0],v[1]),n=2;n<a;n+=6)this.globalData.canvasContext.bezierCurveTo(v[n],v[n+1],v[n+2],v[n+3],v[n+4],v[n+5]);this.globalData.canvasContext.closePath(),u.ctxFill()}if(this.stroke){for(h&&h.sw?p!==h.sw&&(p=h.sw,u.ctxLineWidth(h.sw)):p!==this.values.sWidth&&(p=this.values.sWidth,u.ctxLineWidth(this.values.sWidth)),h&&h.sc?b!==h.sc&&(b=h.sc,u.ctxStrokeStyle(h.sc)):b!==this.values.stroke&&(b=this.values.stroke,u.ctxStrokeStyle(this.values.stroke)),E=this.textSpans[e].elem,s=E.length,this.globalData.canvasContext.beginPath(),i=0;i<s;i+=1)for(v=E[i],a=v.length,this.globalData.canvasContext.moveTo(v[0],v[1]),n=2;n<a;n+=6)this.globalData.canvasContext.bezierCurveTo(v[n],v[n+1],v[n+2],v[n+3],v[n+4],v[n+5]);this.globalData.canvasContext.closePath(),u.ctxStroke()}h&&this.globalData.renderer.restore()}};function CVImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.img=e.imageLoader.getAsset(this.assetData),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVImageElement),CVImageElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVImageElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVImageElement.prototype.createContent=function(){if(this.img.width&&(this.assetData.w!==this.img.width||this.assetData.h!==this.img.height)){var t=createTag("canvas");t.width=this.assetData.w,t.height=this.assetData.h;var e=t.getContext("2d"),r=this.img.width,i=this.img.height,s=r/i,n=this.assetData.w/this.assetData.h,a,l,o=this.assetData.pr||this.globalData.renderConfig.imagePreserveAspectRatio;s>n&&o==="xMidYMid slice"||s<n&&o!=="xMidYMid slice"?(l=i,a=l*n):(a=r,l=a/n),e.drawImage(this.img,(r-a)/2,(i-l)/2,a,l,0,0,this.assetData.w,this.assetData.h),this.img=t}},CVImageElement.prototype.renderInnerContent=function(){this.canvasContext.drawImage(this.img,0,0)},CVImageElement.prototype.destroy=function(){this.img=null};function CVSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,CVBaseElement,HierarchyElement,FrameElement,RenderableElement],CVSolidElement),CVSolidElement.prototype.initElement=SVGShapeElement.prototype.initElement,CVSolidElement.prototype.prepareFrame=IImageElement.prototype.prepareFrame,CVSolidElement.prototype.renderInnerContent=function(){this.globalData.renderer.ctxFillStyle(this.data.sc),this.globalData.renderer.ctxFillRect(0,0,this.data.sw,this.data.sh)};function CanvasRendererBase(){}extendPrototype([BaseRenderer],CanvasRendererBase),CanvasRendererBase.prototype.createShape=function(t){return new CVShapeElement(t,this.globalData,this)},CanvasRendererBase.prototype.createText=function(t){return new CVTextElement(t,this.globalData,this)},CanvasRendererBase.prototype.createImage=function(t){return new CVImageElement(t,this.globalData,this)},CanvasRendererBase.prototype.createSolid=function(t){return new CVSolidElement(t,this.globalData,this)},CanvasRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,CanvasRendererBase.prototype.ctxTransform=function(t){t[0]===1&&t[1]===0&&t[4]===0&&t[5]===1&&t[12]===0&&t[13]===0||this.canvasContext.transform(t[0],t[1],t[4],t[5],t[12],t[13])},CanvasRendererBase.prototype.ctxOpacity=function(t){this.canvasContext.globalAlpha*=t<0?0:t},CanvasRendererBase.prototype.ctxFillStyle=function(t){this.canvasContext.fillStyle=t},CanvasRendererBase.prototype.ctxStrokeStyle=function(t){this.canvasContext.strokeStyle=t},CanvasRendererBase.prototype.ctxLineWidth=function(t){this.canvasContext.lineWidth=t},CanvasRendererBase.prototype.ctxLineCap=function(t){this.canvasContext.lineCap=t},CanvasRendererBase.prototype.ctxLineJoin=function(t){this.canvasContext.lineJoin=t},CanvasRendererBase.prototype.ctxMiterLimit=function(t){this.canvasContext.miterLimit=t},CanvasRendererBase.prototype.ctxFill=function(t){this.canvasContext.fill(t)},CanvasRendererBase.prototype.ctxFillRect=function(t,e,r,i){this.canvasContext.fillRect(t,e,r,i)},CanvasRendererBase.prototype.ctxStroke=function(){this.canvasContext.stroke()},CanvasRendererBase.prototype.reset=function(){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}this.contextData.reset()},CanvasRendererBase.prototype.save=function(){this.canvasContext.save()},CanvasRendererBase.prototype.restore=function(t){if(!this.renderConfig.clearCanvas){this.canvasContext.restore();return}t&&(this.globalData.blendMode="source-over"),this.contextData.restore(t)},CanvasRendererBase.prototype.configAnimation=function(t){if(this.animationItem.wrapper){this.animationItem.container=createTag("canvas");var e=this.animationItem.container.style;e.width="100%",e.height="100%";var r="0px 0px 0px";e.transformOrigin=r,e.mozTransformOrigin=r,e.webkitTransformOrigin=r,e["-webkit-transform"]=r,e.contentVisibility=this.renderConfig.contentVisibility,this.animationItem.wrapper.appendChild(this.animationItem.container),this.canvasContext=this.animationItem.container.getContext("2d"),this.renderConfig.className&&this.animationItem.container.setAttribute("class",this.renderConfig.className),this.renderConfig.id&&this.animationItem.container.setAttribute("id",this.renderConfig.id)}else this.canvasContext=this.renderConfig.context;this.contextData.setContext(this.canvasContext),this.data=t,this.layers=t.layers,this.transformCanvas={w:t.w,h:t.h,sx:0,sy:0,tx:0,ty:0},this.setupGlobalData(t,document.body),this.globalData.canvasContext=this.canvasContext,this.globalData.renderer=this,this.globalData.isDashed=!1,this.globalData.progressiveLoad=this.renderConfig.progressiveLoad,this.globalData.transformCanvas=this.transformCanvas,this.elements=createSizedArray(t.layers.length),this.updateContainerSize()},CanvasRendererBase.prototype.updateContainerSize=function(t,e){this.reset();var r,i;t?(r=t,i=e,this.canvasContext.canvas.width=r,this.canvasContext.canvas.height=i):(this.animationItem.wrapper&&this.animationItem.container?(r=this.animationItem.wrapper.offsetWidth,i=this.animationItem.wrapper.offsetHeight):(r=this.canvasContext.canvas.width,i=this.canvasContext.canvas.height),this.canvasContext.canvas.width=r*this.renderConfig.dpr,this.canvasContext.canvas.height=i*this.renderConfig.dpr);var s,n;if(this.renderConfig.preserveAspectRatio.indexOf("meet")!==-1||this.renderConfig.preserveAspectRatio.indexOf("slice")!==-1){var a=this.renderConfig.preserveAspectRatio.split(" "),l=a[1]||"meet",o=a[0]||"xMidYMid",h=o.substr(0,4),d=o.substr(4);s=r/i,n=this.transformCanvas.w/this.transformCanvas.h,n>s&&l==="meet"||n<s&&l==="slice"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=r/(this.transformCanvas.w/this.renderConfig.dpr)):(this.transformCanvas.sx=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr)),h==="xMid"&&(n<s&&l==="meet"||n>s&&l==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))/2*this.renderConfig.dpr:h==="xMax"&&(n<s&&l==="meet"||n>s&&l==="slice")?this.transformCanvas.tx=(r-this.transformCanvas.w*(i/this.transformCanvas.h))*this.renderConfig.dpr:this.transformCanvas.tx=0,d==="YMid"&&(n>s&&l==="meet"||n<s&&l==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))/2*this.renderConfig.dpr:d==="YMax"&&(n>s&&l==="meet"||n<s&&l==="slice")?this.transformCanvas.ty=(i-this.transformCanvas.h*(r/this.transformCanvas.w))*this.renderConfig.dpr:this.transformCanvas.ty=0}else this.renderConfig.preserveAspectRatio==="none"?(this.transformCanvas.sx=r/(this.transformCanvas.w/this.renderConfig.dpr),this.transformCanvas.sy=i/(this.transformCanvas.h/this.renderConfig.dpr),this.transformCanvas.tx=0,this.transformCanvas.ty=0):(this.transformCanvas.sx=this.renderConfig.dpr,this.transformCanvas.sy=this.renderConfig.dpr,this.transformCanvas.tx=0,this.transformCanvas.ty=0);this.transformCanvas.props=[this.transformCanvas.sx,0,0,0,0,this.transformCanvas.sy,0,0,0,0,1,0,this.transformCanvas.tx,this.transformCanvas.ty,0,1],this.ctxTransform(this.transformCanvas.props),this.canvasContext.beginPath(),this.canvasContext.rect(0,0,this.transformCanvas.w,this.transformCanvas.h),this.canvasContext.closePath(),this.canvasContext.clip(),this.renderFrame(this.renderedFrame,!0)},CanvasRendererBase.prototype.destroy=function(){this.renderConfig.clearCanvas&&this.animationItem.wrapper&&(this.animationItem.wrapper.innerText="");var t,e=this.layers?this.layers.length:0;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.globalData.canvasContext=null,this.animationItem.container=null,this.destroyed=!0},CanvasRendererBase.prototype.renderFrame=function(t,e){if(!(this.renderedFrame===t&&this.renderConfig.clearCanvas===!0&&!e||this.destroyed||t===-1)){this.renderedFrame=t,this.globalData.frameNum=t-this.animationItem._isFirstFrame,this.globalData.frameId+=1,this.globalData._mdf=!this.renderConfig.clearCanvas||e,this.globalData.projectInterface.currentFrame=t;var r,i=this.layers.length;for(this.completeLayers||this.checkLayers(t),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].prepareFrame(t-this.layers[r].st);if(this.globalData._mdf){for(this.renderConfig.clearCanvas===!0?this.canvasContext.clearRect(0,0,this.transformCanvas.w,this.transformCanvas.h):this.save(),r=i-1;r>=0;r-=1)(this.completeLayers||this.elements[r])&&this.elements[r].renderFrame();this.renderConfig.clearCanvas!==!0&&this.restore()}}},CanvasRendererBase.prototype.buildItem=function(t){var e=this.elements;if(!(e[t]||this.layers[t].ty===99)){var r=this.createItem(this.layers[t],this,this.globalData);e[t]=r,r.initExpressions()}},CanvasRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},CanvasRendererBase.prototype.hide=function(){this.animationItem.container.style.display="none"},CanvasRendererBase.prototype.show=function(){this.animationItem.container.style.display="block"};function CanvasContext(){this.opacity=-1,this.transform=createTypedArray("float32",16),this.fillStyle="",this.strokeStyle="",this.lineWidth="",this.lineCap="",this.lineJoin="",this.miterLimit="",this.id=Math.random()}function CVContextData(){this.stack=[],this.cArrPos=0,this.cTr=new Matrix;var t,e=15;for(t=0;t<e;t+=1){var r=new CanvasContext;this.stack[t]=r}this._length=e,this.nativeContext=null,this.transformMat=new Matrix,this.currentOpacity=1,this.currentFillStyle="",this.appliedFillStyle="",this.currentStrokeStyle="",this.appliedStrokeStyle="",this.currentLineWidth="",this.appliedLineWidth="",this.currentLineCap="",this.appliedLineCap="",this.currentLineJoin="",this.appliedLineJoin="",this.appliedMiterLimit="",this.currentMiterLimit=""}CVContextData.prototype.duplicate=function(){var t=this._length*2,e=0;for(e=this._length;e<t;e+=1)this.stack[e]=new CanvasContext;this._length=t},CVContextData.prototype.reset=function(){this.cArrPos=0,this.cTr.reset(),this.stack[this.cArrPos].opacity=1},CVContextData.prototype.restore=function(t){this.cArrPos-=1;var e=this.stack[this.cArrPos],r=e.transform,i,s=this.cTr.props;for(i=0;i<16;i+=1)s[i]=r[i];if(t){this.nativeContext.restore();var n=this.stack[this.cArrPos+1];this.appliedFillStyle=n.fillStyle,this.appliedStrokeStyle=n.strokeStyle,this.appliedLineWidth=n.lineWidth,this.appliedLineCap=n.lineCap,this.appliedLineJoin=n.lineJoin,this.appliedMiterLimit=n.miterLimit}this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13]),(t||e.opacity!==-1&&this.currentOpacity!==e.opacity)&&(this.nativeContext.globalAlpha=e.opacity,this.currentOpacity=e.opacity),this.currentFillStyle=e.fillStyle,this.currentStrokeStyle=e.strokeStyle,this.currentLineWidth=e.lineWidth,this.currentLineCap=e.lineCap,this.currentLineJoin=e.lineJoin,this.currentMiterLimit=e.miterLimit},CVContextData.prototype.save=function(t){t&&this.nativeContext.save();var e=this.cTr.props;this._length<=this.cArrPos&&this.duplicate();var r=this.stack[this.cArrPos],i;for(i=0;i<16;i+=1)r.transform[i]=e[i];this.cArrPos+=1;var s=this.stack[this.cArrPos];s.opacity=r.opacity,s.fillStyle=r.fillStyle,s.strokeStyle=r.strokeStyle,s.lineWidth=r.lineWidth,s.lineCap=r.lineCap,s.lineJoin=r.lineJoin,s.miterLimit=r.miterLimit},CVContextData.prototype.setOpacity=function(t){this.stack[this.cArrPos].opacity=t},CVContextData.prototype.setContext=function(t){this.nativeContext=t},CVContextData.prototype.fillStyle=function(t){this.stack[this.cArrPos].fillStyle!==t&&(this.currentFillStyle=t,this.stack[this.cArrPos].fillStyle=t)},CVContextData.prototype.strokeStyle=function(t){this.stack[this.cArrPos].strokeStyle!==t&&(this.currentStrokeStyle=t,this.stack[this.cArrPos].strokeStyle=t)},CVContextData.prototype.lineWidth=function(t){this.stack[this.cArrPos].lineWidth!==t&&(this.currentLineWidth=t,this.stack[this.cArrPos].lineWidth=t)},CVContextData.prototype.lineCap=function(t){this.stack[this.cArrPos].lineCap!==t&&(this.currentLineCap=t,this.stack[this.cArrPos].lineCap=t)},CVContextData.prototype.lineJoin=function(t){this.stack[this.cArrPos].lineJoin!==t&&(this.currentLineJoin=t,this.stack[this.cArrPos].lineJoin=t)},CVContextData.prototype.miterLimit=function(t){this.stack[this.cArrPos].miterLimit!==t&&(this.currentMiterLimit=t,this.stack[this.cArrPos].miterLimit=t)},CVContextData.prototype.transform=function(t){this.transformMat.cloneFromProps(t);var e=this.cTr;this.transformMat.multiply(e),e.cloneFromProps(this.transformMat.props);var r=e.props;this.nativeContext.setTransform(r[0],r[1],r[4],r[5],r[12],r[13])},CVContextData.prototype.opacity=function(t){var e=this.stack[this.cArrPos].opacity;e*=t<0?0:t,this.stack[this.cArrPos].opacity!==e&&(this.currentOpacity!==t&&(this.nativeContext.globalAlpha=t,this.currentOpacity=t),this.stack[this.cArrPos].opacity=e)},CVContextData.prototype.fill=function(t){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fill(t)},CVContextData.prototype.fillRect=function(t,e,r,i){this.appliedFillStyle!==this.currentFillStyle&&(this.appliedFillStyle=this.currentFillStyle,this.nativeContext.fillStyle=this.appliedFillStyle),this.nativeContext.fillRect(t,e,r,i)},CVContextData.prototype.stroke=function(){this.appliedStrokeStyle!==this.currentStrokeStyle&&(this.appliedStrokeStyle=this.currentStrokeStyle,this.nativeContext.strokeStyle=this.appliedStrokeStyle),this.appliedLineWidth!==this.currentLineWidth&&(this.appliedLineWidth=this.currentLineWidth,this.nativeContext.lineWidth=this.appliedLineWidth),this.appliedLineCap!==this.currentLineCap&&(this.appliedLineCap=this.currentLineCap,this.nativeContext.lineCap=this.appliedLineCap),this.appliedLineJoin!==this.currentLineJoin&&(this.appliedLineJoin=this.currentLineJoin,this.nativeContext.lineJoin=this.appliedLineJoin),this.appliedMiterLimit!==this.currentMiterLimit&&(this.appliedMiterLimit=this.currentMiterLimit,this.nativeContext.miterLimit=this.appliedMiterLimit),this.nativeContext.stroke()};function CVCompElement(t,e,r){this.completeLayers=!1,this.layers=t.layers,this.pendingElements=[],this.elements=createSizedArray(this.layers.length),this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([CanvasRendererBase,ICompElement,CVBaseElement],CVCompElement),CVCompElement.prototype.renderInnerContent=function(){var t=this.canvasContext;t.beginPath(),t.moveTo(0,0),t.lineTo(this.data.w,0),t.lineTo(this.data.w,this.data.h),t.lineTo(0,this.data.h),t.lineTo(0,0),t.clip();var e,r=this.layers.length;for(e=r-1;e>=0;e-=1)(this.completeLayers||this.elements[e])&&this.elements[e].renderFrame()},CVCompElement.prototype.destroy=function(){var t,e=this.layers.length;for(t=e-1;t>=0;t-=1)this.elements[t]&&this.elements[t].destroy();this.layers=null,this.elements=null},CVCompElement.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function CanvasRenderer(t,e){this.animationItem=t,this.renderConfig={clearCanvas:e&&e.clearCanvas!==void 0?e.clearCanvas:!0,context:e&&e.context||null,progressiveLoad:e&&e.progressiveLoad||!1,preserveAspectRatio:e&&e.preserveAspectRatio||"xMidYMid meet",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",contentVisibility:e&&e.contentVisibility||"visible",className:e&&e.className||"",id:e&&e.id||"",runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.renderConfig.dpr=e&&e.dpr||1,this.animationItem.wrapper&&(this.renderConfig.dpr=e&&e.dpr||window.devicePixelRatio||1),this.renderedFrame=-1,this.globalData={frameNum:-1,_mdf:!1,renderConfig:this.renderConfig,currentGlobalAlpha:-1},this.contextData=new CVContextData,this.elements=[],this.pendingElements=[],this.transformMat=new Matrix,this.completeLayers=!1,this.rendererType="canvas",this.renderConfig.clearCanvas&&(this.ctxTransform=this.contextData.transform.bind(this.contextData),this.ctxOpacity=this.contextData.opacity.bind(this.contextData),this.ctxFillStyle=this.contextData.fillStyle.bind(this.contextData),this.ctxStrokeStyle=this.contextData.strokeStyle.bind(this.contextData),this.ctxLineWidth=this.contextData.lineWidth.bind(this.contextData),this.ctxLineCap=this.contextData.lineCap.bind(this.contextData),this.ctxLineJoin=this.contextData.lineJoin.bind(this.contextData),this.ctxMiterLimit=this.contextData.miterLimit.bind(this.contextData),this.ctxFill=this.contextData.fill.bind(this.contextData),this.ctxFillRect=this.contextData.fillRect.bind(this.contextData),this.ctxStroke=this.contextData.stroke.bind(this.contextData),this.save=this.contextData.save.bind(this.contextData))}extendPrototype([CanvasRendererBase],CanvasRenderer),CanvasRenderer.prototype.createComp=function(t){return new CVCompElement(t,this.globalData,this)};function HBaseElement(){}HBaseElement.prototype={checkBlendMode:function(){},initRendererElement:function(){this.baseElement=createTag(this.data.tg||"div"),this.data.hasMask?(this.svgElement=createNS("svg"),this.layerElement=createNS("g"),this.maskedElement=this.layerElement,this.svgElement.appendChild(this.layerElement),this.baseElement.appendChild(this.svgElement)):this.layerElement=this.baseElement,styleDiv(this.baseElement)},createContainerElements:function(){this.renderableEffectsManager=new CVEffects(this),this.transformedElement=this.baseElement,this.maskedElement=this.layerElement,this.data.ln&&this.layerElement.setAttribute("id",this.data.ln),this.data.cl&&this.layerElement.setAttribute("class",this.data.cl),this.data.bm!==0&&this.setBlendMode()},renderElement:function(){var e=this.transformedElement?this.transformedElement.style:{};if(this.finalTransform._matMdf){var r=this.finalTransform.mat.toCSS();e.transform=r,e.webkitTransform=r}this.finalTransform._opMdf&&(e.opacity=this.finalTransform.mProp.o.v)},renderFrame:function(){this.data.hd||this.hidden||(this.renderTransform(),this.renderRenderable(),this.renderElement(),this.renderInnerContent(),this._isFirstFrame&&(this._isFirstFrame=!1))},destroy:function(){this.layerElement=null,this.transformedElement=null,this.matteElement&&(this.matteElement=null),this.maskManager&&(this.maskManager.destroy(),this.maskManager=null)},createRenderableComponents:function(){this.maskManager=new MaskElement(this.data,this,this.globalData)},addEffects:function(){},setMatte:function(){}},HBaseElement.prototype.getBaseElement=SVGBaseElement.prototype.getBaseElement,HBaseElement.prototype.destroyBaseElement=HBaseElement.prototype.destroy,HBaseElement.prototype.buildElementParenting=BaseRenderer.prototype.buildElementParenting;function HSolidElement(t,e,r){this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement],HSolidElement),HSolidElement.prototype.createContent=function(){var t;this.data.hasMask?(t=createNS("rect"),t.setAttribute("width",this.data.sw),t.setAttribute("height",this.data.sh),t.setAttribute("fill",this.data.sc),this.svgElement.setAttribute("width",this.data.sw),this.svgElement.setAttribute("height",this.data.sh)):(t=createTag("div"),t.style.width=this.data.sw+"px",t.style.height=this.data.sh+"px",t.style.backgroundColor=this.data.sc),this.layerElement.appendChild(t)};function HShapeElement(t,e,r){this.shapes=[],this.shapesData=t.shapes,this.stylesList=[],this.shapeModifiers=[],this.itemsData=[],this.processedElements=[],this.animatedContents=[],this.shapesContainer=createNS("g"),this.initElement(t,e,r),this.prevViewData=[],this.currentBBox={x:999999,y:-999999,h:0,w:0}}extendPrototype([BaseElement,TransformElement,HSolidElement,SVGShapeElement,HBaseElement,HierarchyElement,FrameElement,RenderableElement],HShapeElement),HShapeElement.prototype._renderShapeFrame=HShapeElement.prototype.renderInnerContent,HShapeElement.prototype.createContent=function(){var t;if(this.baseElement.style.fontSize=0,this.data.hasMask)this.layerElement.appendChild(this.shapesContainer),t=this.svgElement;else{t=createNS("svg");var e=this.comp.data?this.comp.data:this.globalData.compSize;t.setAttribute("width",e.w),t.setAttribute("height",e.h),t.appendChild(this.shapesContainer),this.layerElement.appendChild(t)}this.searchShapes(this.shapesData,this.itemsData,this.prevViewData,this.shapesContainer,0,[],!0),this.filterUniqueShapes(),this.shapeCont=t},HShapeElement.prototype.getTransformedPoint=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)e=t[r].mProps.v.applyToPointArray(e[0],e[1],0);return e},HShapeElement.prototype.calculateShapeBoundingBox=function(t,e){var r=t.sh.v,i=t.transformers,s,n=r._length,a,l,o,h;if(!(n<=1)){for(s=0;s<n-1;s+=1)a=this.getTransformedPoint(i,r.v[s]),l=this.getTransformedPoint(i,r.o[s]),o=this.getTransformedPoint(i,r.i[s+1]),h=this.getTransformedPoint(i,r.v[s+1]),this.checkBounds(a,l,o,h,e);r.c&&(a=this.getTransformedPoint(i,r.v[s]),l=this.getTransformedPoint(i,r.o[s]),o=this.getTransformedPoint(i,r.i[0]),h=this.getTransformedPoint(i,r.v[0]),this.checkBounds(a,l,o,h,e))}},HShapeElement.prototype.checkBounds=function(t,e,r,i,s){this.getBoundsOfCurve(t,e,r,i);var n=this.shapeBoundingBox;s.x=bmMin(n.left,s.x),s.xMax=bmMax(n.right,s.xMax),s.y=bmMin(n.top,s.y),s.yMax=bmMax(n.bottom,s.yMax)},HShapeElement.prototype.shapeBoundingBox={left:0,right:0,top:0,bottom:0},HShapeElement.prototype.tempBoundingBox={x:0,xMax:0,y:0,yMax:0,width:0,height:0},HShapeElement.prototype.getBoundsOfCurve=function(t,e,r,i){for(var s=[[t[0],i[0]],[t[1],i[1]]],n,a,l,o,h,d,b,p=0;p<2;++p)a=6*t[p]-12*e[p]+6*r[p],n=-3*t[p]+9*e[p]-9*r[p]+3*i[p],l=3*e[p]-3*t[p],a|=0,n|=0,l|=0,n===0&&a===0||(n===0?(o=-l/a,o>0&&o<1&&s[p].push(this.calculateF(o,t,e,r,i,p))):(h=a*a-4*l*n,h>=0&&(d=(-a+bmSqrt(h))/(2*n),d>0&&d<1&&s[p].push(this.calculateF(d,t,e,r,i,p)),b=(-a-bmSqrt(h))/(2*n),b>0&&b<1&&s[p].push(this.calculateF(b,t,e,r,i,p)))));this.shapeBoundingBox.left=bmMin.apply(null,s[0]),this.shapeBoundingBox.top=bmMin.apply(null,s[1]),this.shapeBoundingBox.right=bmMax.apply(null,s[0]),this.shapeBoundingBox.bottom=bmMax.apply(null,s[1])},HShapeElement.prototype.calculateF=function(t,e,r,i,s,n){return bmPow(1-t,3)*e[n]+3*bmPow(1-t,2)*t*r[n]+3*(1-t)*bmPow(t,2)*i[n]+bmPow(t,3)*s[n]},HShapeElement.prototype.calculateBoundingBox=function(t,e){var r,i=t.length;for(r=0;r<i;r+=1)t[r]&&t[r].sh?this.calculateShapeBoundingBox(t[r],e):t[r]&&t[r].it?this.calculateBoundingBox(t[r].it,e):t[r]&&t[r].style&&t[r].w&&this.expandStrokeBoundingBox(t[r].w,e)},HShapeElement.prototype.expandStrokeBoundingBox=function(t,e){var r=0;if(t.keyframes){for(var i=0;i<t.keyframes.length;i+=1){var s=t.keyframes[i].s;s>r&&(r=s)}r*=t.mult}else r=t.v*t.mult;e.x-=r,e.xMax+=r,e.y-=r,e.yMax+=r},HShapeElement.prototype.currentBoxContains=function(t){return this.currentBBox.x<=t.x&&this.currentBBox.y<=t.y&&this.currentBBox.width+this.currentBBox.x>=t.x+t.width&&this.currentBBox.height+this.currentBBox.y>=t.y+t.height},HShapeElement.prototype.renderInnerContent=function(){if(this._renderShapeFrame(),!this.hidden&&(this._isFirstFrame||this._mdf)){var t=this.tempBoundingBox,e=999999;if(t.x=e,t.xMax=-e,t.y=e,t.yMax=-e,this.calculateBoundingBox(this.itemsData,t),t.width=t.xMax<t.x?0:t.xMax-t.x,t.height=t.yMax<t.y?0:t.yMax-t.y,this.currentBoxContains(t))return;var r=!1;if(this.currentBBox.w!==t.width&&(this.currentBBox.w=t.width,this.shapeCont.setAttribute("width",t.width),r=!0),this.currentBBox.h!==t.height&&(this.currentBBox.h=t.height,this.shapeCont.setAttribute("height",t.height),r=!0),r||this.currentBBox.x!==t.x||this.currentBBox.y!==t.y){this.currentBBox.w=t.width,this.currentBBox.h=t.height,this.currentBBox.x=t.x,this.currentBBox.y=t.y,this.shapeCont.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h);var i=this.shapeCont.style,s="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";i.transform=s,i.webkitTransform=s}}};function HTextElement(t,e,r){this.textSpans=[],this.textPaths=[],this.currentBBox={x:999999,y:-999999,h:0,w:0},this.renderType="svg",this.isMasked=!1,this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HierarchyElement,FrameElement,RenderableDOMElement,ITextElement],HTextElement),HTextElement.prototype.createContent=function(){if(this.isMasked=this.checkMasks(),this.isMasked){this.renderType="svg",this.compW=this.comp.data.w,this.compH=this.comp.data.h,this.svgElement.setAttribute("width",this.compW),this.svgElement.setAttribute("height",this.compH);var t=createNS("g");this.maskedElement.appendChild(t),this.innerElem=t}else this.renderType="html",this.innerElem=this.layerElement;this.checkParenting()},HTextElement.prototype.buildNewText=function(){var t=this.textProperty.currentData;this.renderedLetters=createSizedArray(t.l?t.l.length:0);var e=this.innerElem.style,r=t.fc?this.buildColor(t.fc):"rgba(0,0,0,0)";e.fill=r,e.color=r,t.sc&&(e.stroke=this.buildColor(t.sc),e.strokeWidth=t.sw+"px");var i=this.globalData.fontManager.getFontByName(t.f);if(!this.globalData.fontManager.chars)if(e.fontSize=t.finalSize+"px",e.lineHeight=t.finalSize+"px",i.fClass)this.innerElem.className=i.fClass;else{e.fontFamily=i.fFamily;var s=t.fWeight,n=t.fStyle;e.fontStyle=n,e.fontWeight=s}var a,l,o=t.l;l=o.length;var h,d,b,p=this.mHelper,E,v="",u=0;for(a=0;a<l;a+=1){if(this.globalData.fontManager.chars?(this.textPaths[u]?h=this.textPaths[u]:(h=createNS("path"),h.setAttribute("stroke-linecap",lineCapEnum[1]),h.setAttribute("stroke-linejoin",lineJoinEnum[2]),h.setAttribute("stroke-miterlimit","4")),this.isMasked||(this.textSpans[u]?(d=this.textSpans[u],b=d.children[0]):(d=createTag("div"),d.style.lineHeight=0,b=createNS("svg"),b.appendChild(h),styleDiv(d)))):this.isMasked?h=this.textPaths[u]?this.textPaths[u]:createNS("text"):this.textSpans[u]?(d=this.textSpans[u],h=this.textPaths[u]):(d=createTag("span"),styleDiv(d),h=createTag("span"),styleDiv(h),d.appendChild(h)),this.globalData.fontManager.chars){var x=this.globalData.fontManager.getCharData(t.finalText[a],i.fStyle,this.globalData.fontManager.getFontByName(t.f).fFamily),c;if(x?c=x.data:c=null,p.reset(),c&&c.shapes&&c.shapes.length&&(E=c.shapes[0].it,p.scale(t.finalSize/100,t.finalSize/100),v=this.createPathShape(p,E),h.setAttribute("d",v)),this.isMasked)this.innerElem.appendChild(h);else{if(this.innerElem.appendChild(d),c&&c.shapes){document.body.appendChild(b);var m=b.getBBox();b.setAttribute("width",m.width+2),b.setAttribute("height",m.height+2),b.setAttribute("viewBox",m.x-1+" "+(m.y-1)+" "+(m.width+2)+" "+(m.height+2));var f=b.style,y="translate("+(m.x-1)+"px,"+(m.y-1)+"px)";f.transform=y,f.webkitTransform=y,o[a].yOffset=m.y-1}else b.setAttribute("width",1),b.setAttribute("height",1);d.appendChild(b)}}else if(h.textContent=o[a].val,h.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),this.isMasked)this.innerElem.appendChild(h);else{this.innerElem.appendChild(d);var P=h.style,A="translate3d(0,"+-t.finalSize/1.2+"px,0)";P.transform=A,P.webkitTransform=A}this.isMasked?this.textSpans[u]=h:this.textSpans[u]=d,this.textSpans[u].style.display="block",this.textPaths[u]=h,u+=1}for(;u<this.textSpans.length;)this.textSpans[u].style.display="none",u+=1},HTextElement.prototype.renderInnerContent=function(){this.validateText();var t;if(this.data.singleShape){if(!this._isFirstFrame&&!this.lettersChangedFlag)return;if(this.isMasked&&this.finalTransform._matMdf){this.svgElement.setAttribute("viewBox",-this.finalTransform.mProp.p.v[0]+" "+-this.finalTransform.mProp.p.v[1]+" "+this.compW+" "+this.compH),t=this.svgElement.style;var e="translate("+-this.finalTransform.mProp.p.v[0]+"px,"+-this.finalTransform.mProp.p.v[1]+"px)";t.transform=e,t.webkitTransform=e}}if(this.textAnimator.getMeasures(this.textProperty.currentData,this.lettersChangedFlag),!(!this.lettersChangedFlag&&!this.textAnimator.lettersChangedFlag)){var r,i,s=0,n=this.textAnimator.renderedLetters,a=this.textProperty.currentData.l;i=a.length;var l,o,h;for(r=0;r<i;r+=1)a[r].n?s+=1:(o=this.textSpans[r],h=this.textPaths[r],l=n[s],s+=1,l._mdf.m&&(this.isMasked?o.setAttribute("transform",l.m):(o.style.webkitTransform=l.m,o.style.transform=l.m)),o.style.opacity=l.o,l.sw&&l._mdf.sw&&h.setAttribute("stroke-width",l.sw),l.sc&&l._mdf.sc&&h.setAttribute("stroke",l.sc),l.fc&&l._mdf.fc&&(h.setAttribute("fill",l.fc),h.style.color=l.fc));if(this.innerElem.getBBox&&!this.hidden&&(this._isFirstFrame||this._mdf)){var d=this.innerElem.getBBox();this.currentBBox.w!==d.width&&(this.currentBBox.w=d.width,this.svgElement.setAttribute("width",d.width)),this.currentBBox.h!==d.height&&(this.currentBBox.h=d.height,this.svgElement.setAttribute("height",d.height));var b=1;if(this.currentBBox.w!==d.width+b*2||this.currentBBox.h!==d.height+b*2||this.currentBBox.x!==d.x-b||this.currentBBox.y!==d.y-b){this.currentBBox.w=d.width+b*2,this.currentBBox.h=d.height+b*2,this.currentBBox.x=d.x-b,this.currentBBox.y=d.y-b,this.svgElement.setAttribute("viewBox",this.currentBBox.x+" "+this.currentBBox.y+" "+this.currentBBox.w+" "+this.currentBBox.h),t=this.svgElement.style;var p="translate("+this.currentBBox.x+"px,"+this.currentBBox.y+"px)";t.transform=p,t.webkitTransform=p}}}};function HCameraElement(t,e,r){this.initFrame(),this.initBaseData(t,e,r),this.initHierarchy();var i=PropertyFactory.getProp;if(this.pe=i(this,t.pe,0,0,this),t.ks.p.s?(this.px=i(this,t.ks.p.x,1,0,this),this.py=i(this,t.ks.p.y,1,0,this),this.pz=i(this,t.ks.p.z,1,0,this)):this.p=i(this,t.ks.p,1,0,this),t.ks.a&&(this.a=i(this,t.ks.a,1,0,this)),t.ks.or.k.length&&t.ks.or.k[0].to){var s,n=t.ks.or.k.length;for(s=0;s<n;s+=1)t.ks.or.k[s].to=null,t.ks.or.k[s].ti=null}this.or=i(this,t.ks.or,1,degToRads,this),this.or.sh=!0,this.rx=i(this,t.ks.rx,0,degToRads,this),this.ry=i(this,t.ks.ry,0,degToRads,this),this.rz=i(this,t.ks.rz,0,degToRads,this),this.mat=new Matrix,this._prevMat=new Matrix,this._isFirstFrame=!0,this.finalTransform={mProp:this}}extendPrototype([BaseElement,FrameElement,HierarchyElement],HCameraElement),HCameraElement.prototype.setup=function(){var t,e=this.comp.threeDElements.length,r,i,s;for(t=0;t<e;t+=1)if(r=this.comp.threeDElements[t],r.type==="3d"){i=r.perspectiveElem.style,s=r.container.style;var n=this.pe.v+"px",a="0px 0px 0px",l="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";i.perspective=n,i.webkitPerspective=n,s.transformOrigin=a,s.mozTransformOrigin=a,s.webkitTransformOrigin=a,i.transform=l,i.webkitTransform=l}},HCameraElement.prototype.createElements=function(){},HCameraElement.prototype.hide=function(){},HCameraElement.prototype.renderFrame=function(){var t=this._isFirstFrame,e,r;if(this.hierarchy)for(r=this.hierarchy.length,e=0;e<r;e+=1)t=this.hierarchy[e].finalTransform.mProp._mdf||t;if(t||this.pe._mdf||this.p&&this.p._mdf||this.px&&(this.px._mdf||this.py._mdf||this.pz._mdf)||this.rx._mdf||this.ry._mdf||this.rz._mdf||this.or._mdf||this.a&&this.a._mdf){if(this.mat.reset(),this.hierarchy)for(r=this.hierarchy.length-1,e=r;e>=0;e-=1){var i=this.hierarchy[e].finalTransform.mProp;this.mat.translate(-i.p.v[0],-i.p.v[1],i.p.v[2]),this.mat.rotateX(-i.or.v[0]).rotateY(-i.or.v[1]).rotateZ(i.or.v[2]),this.mat.rotateX(-i.rx.v).rotateY(-i.ry.v).rotateZ(i.rz.v),this.mat.scale(1/i.s.v[0],1/i.s.v[1],1/i.s.v[2]),this.mat.translate(i.a.v[0],i.a.v[1],i.a.v[2])}if(this.p?this.mat.translate(-this.p.v[0],-this.p.v[1],this.p.v[2]):this.mat.translate(-this.px.v,-this.py.v,this.pz.v),this.a){var s;this.p?s=[this.p.v[0]-this.a.v[0],this.p.v[1]-this.a.v[1],this.p.v[2]-this.a.v[2]]:s=[this.px.v-this.a.v[0],this.py.v-this.a.v[1],this.pz.v-this.a.v[2]];var n=Math.sqrt(Math.pow(s[0],2)+Math.pow(s[1],2)+Math.pow(s[2],2)),a=[s[0]/n,s[1]/n,s[2]/n],l=Math.sqrt(a[2]*a[2]+a[0]*a[0]),o=Math.atan2(a[1],l),h=Math.atan2(a[0],-a[2]);this.mat.rotateY(h).rotateX(-o)}this.mat.rotateX(-this.rx.v).rotateY(-this.ry.v).rotateZ(this.rz.v),this.mat.rotateX(-this.or.v[0]).rotateY(-this.or.v[1]).rotateZ(this.or.v[2]),this.mat.translate(this.globalData.compSize.w/2,this.globalData.compSize.h/2,0),this.mat.translate(0,0,this.pe.v);var d=!this._prevMat.equals(this.mat);if((d||this.pe._mdf)&&this.comp.threeDElements){r=this.comp.threeDElements.length;var b,p,E;for(e=0;e<r;e+=1)if(b=this.comp.threeDElements[e],b.type==="3d"){if(d){var v=this.mat.toCSS();E=b.container.style,E.transform=v,E.webkitTransform=v}this.pe._mdf&&(p=b.perspectiveElem.style,p.perspective=this.pe.v+"px",p.webkitPerspective=this.pe.v+"px")}this.mat.clone(this._prevMat)}}this._isFirstFrame=!1},HCameraElement.prototype.prepareFrame=function(t){this.prepareProperties(t,!0)},HCameraElement.prototype.destroy=function(){},HCameraElement.prototype.getBaseElement=function(){return null};function HImageElement(t,e,r){this.assetData=e.getAssetData(t.refId),this.initElement(t,e,r)}extendPrototype([BaseElement,TransformElement,HBaseElement,HSolidElement,HierarchyElement,FrameElement,RenderableElement],HImageElement),HImageElement.prototype.createContent=function(){var t=this.globalData.getAssetsPath(this.assetData),e=new Image;this.data.hasMask?(this.imageElem=createNS("image"),this.imageElem.setAttribute("width",this.assetData.w+"px"),this.imageElem.setAttribute("height",this.assetData.h+"px"),this.imageElem.setAttributeNS("http://www.w3.org/1999/xlink","href",t),this.layerElement.appendChild(this.imageElem),this.baseElement.setAttribute("width",this.assetData.w),this.baseElement.setAttribute("height",this.assetData.h)):this.layerElement.appendChild(e),e.crossOrigin="anonymous",e.src=t,this.data.ln&&this.baseElement.setAttribute("id",this.data.ln)};function HybridRendererBase(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"}},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([BaseRenderer],HybridRendererBase),HybridRendererBase.prototype.buildItem=SVGRenderer.prototype.buildItem,HybridRendererBase.prototype.checkPendingElements=function(){for(;this.pendingElements.length;){var t=this.pendingElements.pop();t.checkParenting()}},HybridRendererBase.prototype.appendElementInPos=function(t,e){var r=t.getBaseElement();if(r){var i=this.layers[e];if(!i.ddd||!this.supports3d)if(this.threeDElements)this.addTo3dContainer(r,e);else{for(var s=0,n,a,l;s<e;)this.elements[s]&&this.elements[s]!==!0&&this.elements[s].getBaseElement&&(a=this.elements[s],l=this.layers[s].ddd?this.getThreeDContainerByPos(s):a.getBaseElement(),n=l||n),s+=1;n?(!i.ddd||!this.supports3d)&&this.layerElement.insertBefore(r,n):(!i.ddd||!this.supports3d)&&this.layerElement.appendChild(r)}else this.addTo3dContainer(r,e)}},HybridRendererBase.prototype.createShape=function(t){return this.supports3d?new HShapeElement(t,this.globalData,this):new SVGShapeElement(t,this.globalData,this)},HybridRendererBase.prototype.createText=function(t){return this.supports3d?new HTextElement(t,this.globalData,this):new SVGTextLottieElement(t,this.globalData,this)},HybridRendererBase.prototype.createCamera=function(t){return this.camera=new HCameraElement(t,this.globalData,this),this.camera},HybridRendererBase.prototype.createImage=function(t){return this.supports3d?new HImageElement(t,this.globalData,this):new IImageElement(t,this.globalData,this)},HybridRendererBase.prototype.createSolid=function(t){return this.supports3d?new HSolidElement(t,this.globalData,this):new ISolidElement(t,this.globalData,this)},HybridRendererBase.prototype.createNull=SVGRenderer.prototype.createNull,HybridRendererBase.prototype.getThreeDContainerByPos=function(t){for(var e=0,r=this.threeDElements.length;e<r;){if(this.threeDElements[e].startPos<=t&&this.threeDElements[e].endPos>=t)return this.threeDElements[e].perspectiveElem;e+=1}return null},HybridRendererBase.prototype.createThreeDContainer=function(t,e){var r=createTag("div"),i,s;styleDiv(r);var n=createTag("div");if(styleDiv(n),e==="3d"){i=r.style,i.width=this.globalData.compSize.w+"px",i.height=this.globalData.compSize.h+"px";var a="50% 50%";i.webkitTransformOrigin=a,i.mozTransformOrigin=a,i.transformOrigin=a,s=n.style;var l="matrix3d(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1)";s.transform=l,s.webkitTransform=l}r.appendChild(n);var o={container:n,perspectiveElem:r,startPos:t,endPos:t,type:e};return this.threeDElements.push(o),o},HybridRendererBase.prototype.build3dContainers=function(){var t,e=this.layers.length,r,i="";for(t=0;t<e;t+=1)this.layers[t].ddd&&this.layers[t].ty!==3?(i!=="3d"&&(i="3d",r=this.createThreeDContainer(t,"3d")),r.endPos=Math.max(r.endPos,t)):(i!=="2d"&&(i="2d",r=this.createThreeDContainer(t,"2d")),r.endPos=Math.max(r.endPos,t));for(e=this.threeDElements.length,t=e-1;t>=0;t-=1)this.resizerElem.appendChild(this.threeDElements[t].perspectiveElem)},HybridRendererBase.prototype.addTo3dContainer=function(t,e){for(var r=0,i=this.threeDElements.length;r<i;){if(e<=this.threeDElements[r].endPos){for(var s=this.threeDElements[r].startPos,n;s<e;)this.elements[s]&&this.elements[s].getBaseElement&&(n=this.elements[s].getBaseElement()),s+=1;n?this.threeDElements[r].container.insertBefore(t,n):this.threeDElements[r].container.appendChild(t);break}r+=1}},HybridRendererBase.prototype.configAnimation=function(t){var e=createTag("div"),r=this.animationItem.wrapper,i=e.style;i.width=t.w+"px",i.height=t.h+"px",this.resizerElem=e,styleDiv(e),i.transformStyle="flat",i.mozTransformStyle="flat",i.webkitTransformStyle="flat",this.renderConfig.className&&e.setAttribute("class",this.renderConfig.className),r.appendChild(e),i.overflow="hidden";var s=createNS("svg");s.setAttribute("width","1"),s.setAttribute("height","1"),styleDiv(s),this.resizerElem.appendChild(s);var n=createNS("defs");s.appendChild(n),this.data=t,this.setupGlobalData(t,s),this.globalData.defs=n,this.layers=t.layers,this.layerElement=this.resizerElem,this.build3dContainers(),this.updateContainerSize()},HybridRendererBase.prototype.destroy=function(){this.animationItem.wrapper&&(this.animationItem.wrapper.innerText=""),this.animationItem.container=null,this.globalData.defs=null;var t,e=this.layers?this.layers.length:0;for(t=0;t<e;t+=1)this.elements[t]&&this.elements[t].destroy&&this.elements[t].destroy();this.elements.length=0,this.destroyed=!0,this.animationItem=null},HybridRendererBase.prototype.updateContainerSize=function(){var t=this.animationItem.wrapper.offsetWidth,e=this.animationItem.wrapper.offsetHeight,r=t/e,i=this.globalData.compSize.w/this.globalData.compSize.h,s,n,a,l;i>r?(s=t/this.globalData.compSize.w,n=t/this.globalData.compSize.w,a=0,l=(e-this.globalData.compSize.h*(t/this.globalData.compSize.w))/2):(s=e/this.globalData.compSize.h,n=e/this.globalData.compSize.h,a=(t-this.globalData.compSize.w*(e/this.globalData.compSize.h))/2,l=0);var o=this.resizerElem.style;o.webkitTransform="matrix3d("+s+",0,0,0,0,"+n+",0,0,0,0,1,0,"+a+","+l+",0,1)",o.transform=o.webkitTransform},HybridRendererBase.prototype.renderFrame=SVGRenderer.prototype.renderFrame,HybridRendererBase.prototype.hide=function(){this.resizerElem.style.display="none"},HybridRendererBase.prototype.show=function(){this.resizerElem.style.display="block"},HybridRendererBase.prototype.initItems=function(){if(this.buildAllItems(),this.camera)this.camera.setup();else{var t=this.globalData.compSize.w,e=this.globalData.compSize.h,r,i=this.threeDElements.length;for(r=0;r<i;r+=1){var s=this.threeDElements[r].perspectiveElem.style;s.webkitPerspective=Math.sqrt(Math.pow(t,2)+Math.pow(e,2))+"px",s.perspective=s.webkitPerspective}}},HybridRendererBase.prototype.searchExtraCompositions=function(t){var e,r=t.length,i=createTag("div");for(e=0;e<r;e+=1)if(t[e].xt){var s=this.createComp(t[e],i,this.globalData.comp,null);s.initExpressions(),this.globalData.projectInterface.registerComposition(s)}};function HCompElement(t,e,r){this.layers=t.layers,this.supports3d=!t.hasMask,this.completeLayers=!1,this.pendingElements=[],this.elements=this.layers?createSizedArray(this.layers.length):[],this.initElement(t,e,r),this.tm=t.tm?PropertyFactory.getProp(this,t.tm,0,e.frameRate,this):{_placeholder:!0}}extendPrototype([HybridRendererBase,ICompElement,HBaseElement],HCompElement),HCompElement.prototype._createBaseContainerElements=HCompElement.prototype.createContainerElements,HCompElement.prototype.createContainerElements=function(){this._createBaseContainerElements(),this.data.hasMask?(this.svgElement.setAttribute("width",this.data.w),this.svgElement.setAttribute("height",this.data.h),this.transformedElement=this.baseElement):this.transformedElement=this.layerElement},HCompElement.prototype.addTo3dContainer=function(t,e){for(var r=0,i;r<e;)this.elements[r]&&this.elements[r].getBaseElement&&(i=this.elements[r].getBaseElement()),r+=1;i?this.layerElement.insertBefore(t,i):this.layerElement.appendChild(t)},HCompElement.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};function HybridRenderer(t,e){this.animationItem=t,this.layers=null,this.renderedFrame=-1,this.renderConfig={className:e&&e.className||"",imagePreserveAspectRatio:e&&e.imagePreserveAspectRatio||"xMidYMid slice",hideOnTransparent:!(e&&e.hideOnTransparent===!1),filterSize:{width:e&&e.filterSize&&e.filterSize.width||"400%",height:e&&e.filterSize&&e.filterSize.height||"400%",x:e&&e.filterSize&&e.filterSize.x||"-100%",y:e&&e.filterSize&&e.filterSize.y||"-100%"},runExpressions:!e||e.runExpressions===void 0||e.runExpressions},this.globalData={_mdf:!1,frameNum:-1,renderConfig:this.renderConfig},this.pendingElements=[],this.elements=[],this.threeDElements=[],this.destroyed=!1,this.camera=null,this.supports3d=!0,this.rendererType="html"}extendPrototype([HybridRendererBase],HybridRenderer),HybridRenderer.prototype.createComp=function(t){return this.supports3d?new HCompElement(t,this.globalData,this):new SVGCompElement(t,this.globalData,this)};var CompExpressionInterface=function(){return function(t){function e(r){for(var i=0,s=t.layers.length;i<s;){if(t.layers[i].nm===r||t.layers[i].ind===r)return t.elements[i].layerInterface;i+=1}return null}return Object.defineProperty(e,"_name",{value:t.data.nm}),e.layer=e,e.pixelAspect=1,e.height=t.data.h||t.globalData.compSize.h,e.width=t.data.w||t.globalData.compSize.w,e.pixelAspect=1,e.frameDuration=1/t.globalData.frameRate,e.displayStartTime=0,e.numLayers=t.layers.length,e}}();function _typeof$2(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$2=function(r){return typeof r}:_typeof$2=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$2(t)}function seedRandom(t,e){var r=this,i=256,s=6,n=52,a="random",l=e.pow(i,s),o=e.pow(2,n),h=o*2,d=i-1,b;function p(f,y,P){var A=[];y=y===!0?{entropy:!0}:y||{};var T=x(u(y.entropy?[f,m(t)]:f===null?c():f,3),A),F=new E(A),k=function(){for(var L=F.g(s),R=l,D=0;L<o;)L=(L+D)*i,R*=i,D=F.g(1);for(;L>=h;)L/=2,R/=2,D>>>=1;return(L+D)/R};return k.int32=function(){return F.g(4)|0},k.quick=function(){return F.g(4)/4294967296},k.double=k,x(m(F.S),t),(y.pass||P||function(O,L,R,D){return D&&(D.S&&v(D,F),O.state=function(){return v(F,{})}),R?(e[a]=O,L):O})(k,T,"global"in y?y.global:this==e,y.state)}e["seed"+a]=p;function E(f){var y,P=f.length,A=this,T=0,F=A.i=A.j=0,k=A.S=[];for(P||(f=[P++]);T<i;)k[T]=T++;for(T=0;T<i;T++)k[T]=k[F=d&F+f[T%P]+(y=k[T])],k[F]=y;A.g=function(O){for(var L,R=0,D=A.i,B=A.j,I=A.S;O--;)L=I[D=d&D+1],R=R*i+I[d&(I[D]=I[B=d&B+L])+(I[B]=L)];return A.i=D,A.j=B,R}}function v(f,y){return y.i=f.i,y.j=f.j,y.S=f.S.slice(),y}function u(f,y){var P=[],A=_typeof$2(f),T;if(y&&A=="object")for(T in f)try{P.push(u(f[T],y-1))}catch{}return P.length?P:A=="string"?f:f+"\0"}function x(f,y){for(var P=f+"",A,T=0;T<P.length;)y[d&T]=d&(A^=y[d&T]*19)+P.charCodeAt(T++);return m(y)}function c(){try{var f=new Uint8Array(i);return(r.crypto||r.msCrypto).getRandomValues(f),m(f)}catch{var y=r.navigator,P=y&&y.plugins;return[+new Date,r,P,r.screen,m(t)]}}function m(f){return String.fromCharCode.apply(0,f)}x(e.random(),t)}function initialize$2(t){seedRandom([],t)}var propTypes={SHAPE:"shape"};function _typeof$1(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof$1=function(r){return typeof r}:_typeof$1=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof$1(t)}var ExpressionManager=function(){var ob={},Math=BMMath,window=null,document=null,XMLHttpRequest=null,fetch=null,frames=null,_lottieGlobal={};initialize$2(BMMath);function resetFrame(){_lottieGlobal={}}function $bm_isInstanceOfArray(t){return t.constructor===Array||t.constructor===Float32Array}function isNumerable(t,e){return t==="number"||e instanceof Number||t==="boolean"||t==="string"}function $bm_neg(t){var e=_typeof$1(t);if(e==="number"||t instanceof Number||e==="boolean")return-t;if($bm_isInstanceOfArray(t)){var r,i=t.length,s=[];for(r=0;r<i;r+=1)s[r]=-t[r];return s}return t.propType?t.v:-t}var easeInBez=BezierFactory.getBezierEasing(.333,0,.833,.833,"easeIn").get,easeOutBez=BezierFactory.getBezierEasing(.167,.167,.667,1,"easeOut").get,easeInOutBez=BezierFactory.getBezierEasing(.33,0,.667,1,"easeInOut").get;function sum(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e)||r==="string"||i==="string")return t+e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]+=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t+e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,n=t.length,a=e.length,l=[];s<n||s<a;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?l[s]=t[s]+e[s]:l[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return l}return 0}var add=sum;function sub(t,e){var r=_typeof$1(t),i=_typeof$1(e);if(isNumerable(r,t)&&isNumerable(i,e))return r==="string"&&(t=parseInt(t,10)),i==="string"&&(e=parseInt(e,10)),t-e;if($bm_isInstanceOfArray(t)&&isNumerable(i,e))return t=t.slice(0),t[0]-=e,t;if(isNumerable(r,t)&&$bm_isInstanceOfArray(e))return e=e.slice(0),e[0]=t-e[0],e;if($bm_isInstanceOfArray(t)&&$bm_isInstanceOfArray(e)){for(var s=0,n=t.length,a=e.length,l=[];s<n||s<a;)(typeof t[s]=="number"||t[s]instanceof Number)&&(typeof e[s]=="number"||e[s]instanceof Number)?l[s]=t[s]-e[s]:l[s]=e[s]===void 0?t[s]:t[s]||e[s],s+=1;return l}return 0}function mul(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t*e;var n,a;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(a=t.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t[n]*e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(a=e.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t*e[n];return s}return 0}function div(t,e){var r=_typeof$1(t),i=_typeof$1(e),s;if(isNumerable(r,t)&&isNumerable(i,e))return t/e;var n,a;if($bm_isInstanceOfArray(t)&&isNumerable(i,e)){for(a=t.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t[n]/e;return s}if(isNumerable(r,t)&&$bm_isInstanceOfArray(e)){for(a=e.length,s=createTypedArray("float32",a),n=0;n<a;n+=1)s[n]=t/e[n];return s}return 0}function mod(t,e){return typeof t=="string"&&(t=parseInt(t,10)),typeof e=="string"&&(e=parseInt(e,10)),t%e}var $bm_sum=sum,$bm_sub=sub,$bm_mul=mul,$bm_div=div,$bm_mod=mod;function clamp(t,e,r){if(e>r){var i=r;r=e,e=i}return Math.min(Math.max(t,e),r)}function radiansToDegrees(t){return t/degToRads}var radians_to_degrees=radiansToDegrees;function degreesToRadians(t){return t*degToRads}var degrees_to_radians=radiansToDegrees,helperLengthArray=[0,0,0,0,0,0];function length(t,e){if(typeof t=="number"||t instanceof Number)return e=e||0,Math.abs(t-e);e||(e=helperLengthArray);var r,i=Math.min(t.length,e.length),s=0;for(r=0;r<i;r+=1)s+=Math.pow(e[r]-t[r],2);return Math.sqrt(s)}function normalize(t){return div(t,length(t))}function rgbToHsl(t){var e=t[0],r=t[1],i=t[2],s=Math.max(e,r,i),n=Math.min(e,r,i),a,l,o=(s+n)/2;if(s===n)a=0,l=0;else{var h=s-n;switch(l=o>.5?h/(2-s-n):h/(s+n),s){case e:a=(r-i)/h+(r<i?6:0);break;case r:a=(i-e)/h+2;break;case i:a=(e-r)/h+4;break}a/=6}return[a,l,o,t[3]]}function hue2rgb(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+(e-t)*6*r:r<1/2?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function hslToRgb(t){var e=t[0],r=t[1],i=t[2],s,n,a;if(r===0)s=i,a=i,n=i;else{var l=i<.5?i*(1+r):i+r-i*r,o=2*i-l;s=hue2rgb(o,l,e+1/3),n=hue2rgb(o,l,e),a=hue2rgb(o,l,e-1/3)}return[s,n,a,t[3]]}function linear(t,e,r,i,s){if((i===void 0||s===void 0)&&(i=e,s=r,e=0,r=1),r<e){var n=r;r=e,e=n}if(t<=e)return i;if(t>=r)return s;var a=r===e?0:(t-e)/(r-e);if(!i.length)return i+(s-i)*a;var l,o=i.length,h=createTypedArray("float32",o);for(l=0;l<o;l+=1)h[l]=i[l]+(s[l]-i[l])*a;return h}function random(t,e){if(e===void 0&&(t===void 0?(t=0,e=1):(e=t,t=void 0)),e.length){var r,i=e.length;t||(t=createTypedArray("float32",i));var s=createTypedArray("float32",i),n=BMMath.random();for(r=0;r<i;r+=1)s[r]=t[r]+n*(e[r]-t[r]);return s}t===void 0&&(t=0);var a=BMMath.random();return t+a*(e-t)}function createPath(t,e,r,i){var s,n=t.length,a=shapePool.newElement();a.setPathData(!!i,n);var l=[0,0],o,h;for(s=0;s<n;s+=1)o=e&&e[s]?e[s]:l,h=r&&r[s]?r[s]:l,a.setTripleAt(t[s][0],t[s][1],h[0]+t[s][0],h[1]+t[s][1],o[0]+t[s][0],o[1]+t[s][1],s,!0);return a}function initiateExpression(elem,data,property){function noOp(t){return t}if(!elem.globalData.renderConfig.runExpressions)return noOp;var val=data.x,needsVelocity=/velocity(?![\w\d])/.test(val),_needsRandom=val.indexOf("random")!==-1,elemType=elem.data.ty,transform,$bm_transform,content,effect,thisProperty=property;thisProperty.valueAtTime=thisProperty.getValueAtTime,Object.defineProperty(thisProperty,"value",{get:function(){return thisProperty.v}}),elem.comp.frameDuration=1/elem.comp.globalData.frameRate,elem.comp.displayStartTime=0;var inPoint=elem.data.ip/elem.comp.globalData.frameRate,outPoint=elem.data.op/elem.comp.globalData.frameRate,width=elem.data.sw?elem.data.sw:0,height=elem.data.sh?elem.data.sh:0,name=elem.data.nm,loopIn,loop_in,loopOut,loop_out,smooth,toWorld,fromWorld,fromComp,toComp,fromCompToSurface,position,rotation,anchorPoint,scale,thisLayer,thisComp,mask,valueAtTime,velocityAtTime,scoped_bm_rt,expression_function=eval("[function _expression_function(){"+val+";scoped_bm_rt=$bm_rt}]")[0],numKeys=property.kf?data.k.length:0,active=!this.data||this.data.hd!==!0,wiggle=(function t(e,r){var i,s,n=this.pv.length?this.pv.length:1,a=createTypedArray("float32",n);e=5;var l=Math.floor(time*e);for(i=0,s=0;i<l;){for(s=0;s<n;s+=1)a[s]+=-r+r*2*BMMath.random();i+=1}var o=time*e,h=o-Math.floor(o),d=createTypedArray("float32",n);if(n>1){for(s=0;s<n;s+=1)d[s]=this.pv[s]+a[s]+(-r+r*2*BMMath.random())*h;return d}return this.pv+a[0]+(-r+r*2*BMMath.random())*h}).bind(this);thisProperty.loopIn&&(loopIn=thisProperty.loopIn.bind(thisProperty),loop_in=loopIn),thisProperty.loopOut&&(loopOut=thisProperty.loopOut.bind(thisProperty),loop_out=loopOut),thisProperty.smooth&&(smooth=thisProperty.smooth.bind(thisProperty));function loopInDuration(t,e){return loopIn(t,e,!0)}function loopOutDuration(t,e){return loopOut(t,e,!0)}this.getValueAtTime&&(valueAtTime=this.getValueAtTime.bind(this)),this.getVelocityAtTime&&(velocityAtTime=this.getVelocityAtTime.bind(this));var comp=elem.comp.globalData.projectInterface.bind(elem.comp.globalData.projectInterface);function lookAt(t,e){var r=[e[0]-t[0],e[1]-t[1],e[2]-t[2]],i=Math.atan2(r[0],Math.sqrt(r[1]*r[1]+r[2]*r[2]))/degToRads,s=-Math.atan2(r[1],r[2])/degToRads;return[s,i,0]}function easeOut(t,e,r,i,s){return applyEase(easeOutBez,t,e,r,i,s)}function easeIn(t,e,r,i,s){return applyEase(easeInBez,t,e,r,i,s)}function ease(t,e,r,i,s){return applyEase(easeInOutBez,t,e,r,i,s)}function applyEase(t,e,r,i,s,n){s===void 0?(s=r,n=i):e=(e-r)/(i-r),e>1?e=1:e<0&&(e=0);var a=t(e);if($bm_isInstanceOfArray(s)){var l,o=s.length,h=createTypedArray("float32",o);for(l=0;l<o;l+=1)h[l]=(n[l]-s[l])*a+s[l];return h}return(n-s)*a+s}function nearestKey(t){var e,r=data.k.length,i,s;if(!data.k.length||typeof data.k[0]=="number")i=0,s=0;else if(i=-1,t*=elem.comp.globalData.frameRate,t<data.k[0].t)i=1,s=data.k[0].t;else{for(e=0;e<r-1;e+=1)if(t===data.k[e].t){i=e+1,s=data.k[e].t;break}else if(t>data.k[e].t&&t<data.k[e+1].t){t-data.k[e].t>data.k[e+1].t-t?(i=e+2,s=data.k[e+1].t):(i=e+1,s=data.k[e].t);break}i===-1&&(i=e+1,s=data.k[e].t)}var n={};return n.index=i,n.time=s/elem.comp.globalData.frameRate,n}function key(t){var e,r,i;if(!data.k.length||typeof data.k[0]=="number")throw new Error("The property has no keyframe at index "+t);t-=1,e={time:data.k[t].t/elem.comp.globalData.frameRate,value:[]};var s=Object.prototype.hasOwnProperty.call(data.k[t],"s")?data.k[t].s:data.k[t-1].e;for(i=s.length,r=0;r<i;r+=1)e[r]=s[r],e.value[r]=s[r];return e}function framesToTime(t,e){return e||(e=elem.comp.globalData.frameRate),t/e}function timeToFrames(t,e){return!t&&t!==0&&(t=time),e||(e=elem.comp.globalData.frameRate),t*e}function seedRandom(t){BMMath.seedrandom(randSeed+t)}function sourceRectAtTime(){return elem.sourceRectAtTime()}function substring(t,e){return typeof value=="string"?e===void 0?value.substring(t):value.substring(t,e):""}function substr(t,e){return typeof value=="string"?e===void 0?value.substr(t):value.substr(t,e):""}function posterizeTime(t){time=t===0?0:Math.floor(time*t)/t,value=valueAtTime(time)}var time,velocity,value,text,textIndex,textTotal,selectorValue,index=elem.data.ind,hasParent=!!(elem.hierarchy&&elem.hierarchy.length),parent,randSeed=Math.floor(Math.random()*1e6),globalData=elem.globalData;function executeExpression(t){return value=t,this.frameExpressionId===elem.globalData.frameId&&this.propType!=="textSelector"?value:(this.propType==="textSelector"&&(textIndex=this.textIndex,textTotal=this.textTotal,selectorValue=this.selectorValue),thisLayer||(text=elem.layerInterface.text,thisLayer=elem.layerInterface,thisComp=elem.comp.compInterface,toWorld=thisLayer.toWorld.bind(thisLayer),fromWorld=thisLayer.fromWorld.bind(thisLayer),fromComp=thisLayer.fromComp.bind(thisLayer),toComp=thisLayer.toComp.bind(thisLayer),mask=thisLayer.mask?thisLayer.mask.bind(thisLayer):null,fromCompToSurface=fromComp),transform||(transform=elem.layerInterface("ADBE Transform Group"),$bm_transform=transform,transform&&(anchorPoint=transform.anchorPoint)),elemType===4&&!content&&(content=thisLayer("ADBE Root Vectors Group")),effect||(effect=thisLayer(4)),hasParent=!!(elem.hierarchy&&elem.hierarchy.length),hasParent&&!parent&&(parent=elem.hierarchy[0].layerInterface),time=this.comp.renderedFrame/this.comp.globalData.frameRate,_needsRandom&&seedRandom(randSeed+time),needsVelocity&&(velocity=velocityAtTime(time)),expression_function(),this.frameExpressionId=elem.globalData.frameId,scoped_bm_rt=scoped_bm_rt.propType===propTypes.SHAPE?scoped_bm_rt.v:scoped_bm_rt,scoped_bm_rt)}return executeExpression.__preventDeadCodeRemoval=[$bm_transform,anchorPoint,time,velocity,inPoint,outPoint,width,height,name,loop_in,loop_out,smooth,toComp,fromCompToSurface,toWorld,fromWorld,mask,position,rotation,scale,thisComp,numKeys,active,wiggle,loopInDuration,loopOutDuration,comp,lookAt,easeOut,easeIn,ease,nearestKey,key,text,textIndex,textTotal,selectorValue,framesToTime,timeToFrames,sourceRectAtTime,substring,substr,posterizeTime,index,globalData],executeExpression}return ob.initiateExpression=initiateExpression,ob.__preventDeadCodeRemoval=[window,document,XMLHttpRequest,fetch,frames,$bm_neg,add,$bm_sum,$bm_sub,$bm_mul,$bm_div,$bm_mod,clamp,radians_to_degrees,degreesToRadians,degrees_to_radians,normalize,rgbToHsl,hslToRgb,linear,random,createPath,_lottieGlobal],ob.resetFrame=resetFrame,ob}(),Expressions=function(){var t={};t.initExpressions=e,t.resetFrame=ExpressionManager.resetFrame;function e(r){var i=0,s=[];function n(){i+=1}function a(){i-=1,i===0&&o()}function l(h){s.indexOf(h)===-1&&s.push(h)}function o(){var h,d=s.length;for(h=0;h<d;h+=1)s[h].release();s.length=0}r.renderer.compInterface=CompExpressionInterface(r.renderer),r.renderer.globalData.projectInterface.registerComposition(r.renderer),r.renderer.globalData.pushExpression=n,r.renderer.globalData.popExpression=a,r.renderer.globalData.registerExpressionProperty=l}return t}(),MaskManagerInterface=function(){function t(r,i){this._mask=r,this._data=i}Object.defineProperty(t.prototype,"maskPath",{get:function(){return this._mask.prop.k&&this._mask.prop.getValue(),this._mask.prop}}),Object.defineProperty(t.prototype,"maskOpacity",{get:function(){return this._mask.op.k&&this._mask.op.getValue(),this._mask.op.v*100}});var e=function(i){var s=createSizedArray(i.viewData.length),n,a=i.viewData.length;for(n=0;n<a;n+=1)s[n]=new t(i.viewData[n],i.masksProperties[n]);var l=function(h){for(n=0;n<a;){if(i.masksProperties[n].nm===h)return s[n];n+=1}return null};return l};return e}(),ExpressionPropertyInterface=function(){var t={pv:0,v:0,mult:1},e={pv:[0,0,0],v:[0,0,0],mult:1};function r(a,l,o){Object.defineProperty(a,"velocity",{get:function(){return l.getVelocityAtTime(l.comp.currentFrame)}}),a.numKeys=l.keyframes?l.keyframes.length:0,a.key=function(h){if(!a.numKeys)return 0;var d="";"s"in l.keyframes[h-1]?d=l.keyframes[h-1].s:"e"in l.keyframes[h-2]?d=l.keyframes[h-2].e:d=l.keyframes[h-2].s;var b=o==="unidimensional"?new Number(d):Object.assign({},d);return b.time=l.keyframes[h-1].t/l.elem.comp.globalData.frameRate,b.value=o==="unidimensional"?d[0]:d,b},a.valueAtTime=l.getValueAtTime,a.speedAtTime=l.getSpeedAtTime,a.velocityAtTime=l.getVelocityAtTime,a.propertyGroup=l.propertyGroup}function i(a){(!a||!("pv"in a))&&(a=t);var l=1/a.mult,o=a.pv*l,h=new Number(o);return h.value=o,r(h,a,"unidimensional"),function(){return a.k&&a.getValue(),o=a.v*l,h.value!==o&&(h=new Number(o),h.value=o,r(h,a,"unidimensional")),h}}function s(a){(!a||!("pv"in a))&&(a=e);var l=1/a.mult,o=a.data&&a.data.l||a.pv.length,h=createTypedArray("float32",o),d=createTypedArray("float32",o);return h.value=d,r(h,a,"multidimensional"),function(){a.k&&a.getValue();for(var b=0;b<o;b+=1)d[b]=a.v[b]*l,h[b]=d[b];return h}}function n(){return t}return function(a){return a?a.propType==="unidimensional"?i(a):s(a):n}}(),TransformExpressionInterface=function(){return function(t){function e(a){switch(a){case"scale":case"Scale":case"ADBE Scale":case 6:return e.scale;case"rotation":case"Rotation":case"ADBE Rotation":case"ADBE Rotate Z":case 10:return e.rotation;case"ADBE Rotate X":return e.xRotation;case"ADBE Rotate Y":return e.yRotation;case"position":case"Position":case"ADBE Position":case 2:return e.position;case"ADBE Position_0":return e.xPosition;case"ADBE Position_1":return e.yPosition;case"ADBE Position_2":return e.zPosition;case"anchorPoint":case"AnchorPoint":case"Anchor Point":case"ADBE AnchorPoint":case 1:return e.anchorPoint;case"opacity":case"Opacity":case 11:return e.opacity;default:return null}}Object.defineProperty(e,"rotation",{get:ExpressionPropertyInterface(t.r||t.rz)}),Object.defineProperty(e,"zRotation",{get:ExpressionPropertyInterface(t.rz||t.r)}),Object.defineProperty(e,"xRotation",{get:ExpressionPropertyInterface(t.rx)}),Object.defineProperty(e,"yRotation",{get:ExpressionPropertyInterface(t.ry)}),Object.defineProperty(e,"scale",{get:ExpressionPropertyInterface(t.s)});var r,i,s,n;return t.p?n=ExpressionPropertyInterface(t.p):(r=ExpressionPropertyInterface(t.px),i=ExpressionPropertyInterface(t.py),t.pz&&(s=ExpressionPropertyInterface(t.pz))),Object.defineProperty(e,"position",{get:function(){return t.p?n():[r(),i(),s?s():0]}}),Object.defineProperty(e,"xPosition",{get:ExpressionPropertyInterface(t.px)}),Object.defineProperty(e,"yPosition",{get:ExpressionPropertyInterface(t.py)}),Object.defineProperty(e,"zPosition",{get:ExpressionPropertyInterface(t.pz)}),Object.defineProperty(e,"anchorPoint",{get:ExpressionPropertyInterface(t.a)}),Object.defineProperty(e,"opacity",{get:ExpressionPropertyInterface(t.o)}),Object.defineProperty(e,"skew",{get:ExpressionPropertyInterface(t.sk)}),Object.defineProperty(e,"skewAxis",{get:ExpressionPropertyInterface(t.sa)}),Object.defineProperty(e,"orientation",{get:ExpressionPropertyInterface(t.or)}),e}}(),LayerExpressionInterface=function(){function t(h){var d=new Matrix;if(h!==void 0){var b=this._elem.finalTransform.mProp.getValueAtTime(h);b.clone(d)}else{var p=this._elem.finalTransform.mProp;p.applyToMatrix(d)}return d}function e(h,d){var b=this.getMatrix(d);return b.props[12]=0,b.props[13]=0,b.props[14]=0,this.applyPoint(b,h)}function r(h,d){var b=this.getMatrix(d);return this.applyPoint(b,h)}function i(h,d){var b=this.getMatrix(d);return b.props[12]=0,b.props[13]=0,b.props[14]=0,this.invertPoint(b,h)}function s(h,d){var b=this.getMatrix(d);return this.invertPoint(b,h)}function n(h,d){if(this._elem.hierarchy&&this._elem.hierarchy.length){var b,p=this._elem.hierarchy.length;for(b=0;b<p;b+=1)this._elem.hierarchy[b].finalTransform.mProp.applyToMatrix(h)}return h.applyToPointArray(d[0],d[1],d[2]||0)}function a(h,d){if(this._elem.hierarchy&&this._elem.hierarchy.length){var b,p=this._elem.hierarchy.length;for(b=0;b<p;b+=1)this._elem.hierarchy[b].finalTransform.mProp.applyToMatrix(h)}return h.inversePoint(d)}function l(h){var d=new Matrix;if(d.reset(),this._elem.finalTransform.mProp.applyToMatrix(d),this._elem.hierarchy&&this._elem.hierarchy.length){var b,p=this._elem.hierarchy.length;for(b=0;b<p;b+=1)this._elem.hierarchy[b].finalTransform.mProp.applyToMatrix(d);return d.inversePoint(h)}return d.inversePoint(h)}function o(){return[1,1,1,1]}return function(h){var d;function b(u){E.mask=new MaskManagerInterface(u,h)}function p(u){E.effect=u}function E(u){switch(u){case"ADBE Root Vectors Group":case"Contents":case 2:return E.shapeInterface;case 1:case 6:case"Transform":case"transform":case"ADBE Transform Group":return d;case 4:case"ADBE Effect Parade":case"effects":case"Effects":return E.effect;case"ADBE Text Properties":return E.textInterface;default:return null}}E.getMatrix=t,E.invertPoint=a,E.applyPoint=n,E.toWorld=r,E.toWorldVec=e,E.fromWorld=s,E.fromWorldVec=i,E.toComp=r,E.fromComp=l,E.sampleImage=o,E.sourceRectAtTime=h.sourceRectAtTime.bind(h),E._elem=h,d=TransformExpressionInterface(h.finalTransform.mProp);var v=getDescriptor(d,"anchorPoint");return Object.defineProperties(E,{hasParent:{get:function(){return h.hierarchy.length}},parent:{get:function(){return h.hierarchy[0].layerInterface}},rotation:getDescriptor(d,"rotation"),scale:getDescriptor(d,"scale"),position:getDescriptor(d,"position"),opacity:getDescriptor(d,"opacity"),anchorPoint:v,anchor_point:v,transform:{get:function(){return d}},active:{get:function(){return h.isInRange}}}),E.startTime=h.data.st,E.index=h.data.ind,E.source=h.data.refId,E.height=h.data.ty===0?h.data.h:100,E.width=h.data.ty===0?h.data.w:100,E.inPoint=h.data.ip/h.comp.globalData.frameRate,E.outPoint=h.data.op/h.comp.globalData.frameRate,E._name=h.data.nm,E.registerMaskInterface=b,E.registerEffectsInterface=p,E}}(),propertyGroupFactory=function(){return function(t,e){return function(r){return r=r===void 0?1:r,r<=0?t:e(r-1)}}}(),PropertyInterface=function(){return function(t,e){var r={_name:t};function i(s){return s=s===void 0?1:s,s<=0?r:e(s-1)}return i}}(),EffectsExpressionInterface=function(){var t={createEffectsInterface:e};function e(s,n){if(s.effectsManager){var a=[],l=s.data.ef,o,h=s.effectsManager.effectElements.length;for(o=0;o<h;o+=1)a.push(r(l[o],s.effectsManager.effectElements[o],n,s));var d=s.data.ef||[],b=function(E){for(o=0,h=d.length;o<h;){if(E===d[o].nm||E===d[o].mn||E===d[o].ix)return a[o];o+=1}return null};return Object.defineProperty(b,"numProperties",{get:function(){return d.length}}),b}return null}function r(s,n,a,l){function o(E){for(var v=s.ef,u=0,x=v.length;u<x;){if(E===v[u].nm||E===v[u].mn||E===v[u].ix)return v[u].ty===5?d[u]:d[u]();u+=1}throw new Error}var h=propertyGroupFactory(o,a),d=[],b,p=s.ef.length;for(b=0;b<p;b+=1)s.ef[b].ty===5?d.push(r(s.ef[b],n.effectElements[b],n.effectElements[b].propertyGroup,l)):d.push(i(n.effectElements[b],s.ef[b].ty,l,h));return s.mn==="ADBE Color Control"&&Object.defineProperty(o,"color",{get:function(){return d[0]()}}),Object.defineProperties(o,{numProperties:{get:function(){return s.np}},_name:{value:s.nm},propertyGroup:{value:h}}),o.enabled=s.en!==0,o.active=o.enabled,o}function i(s,n,a,l){var o=ExpressionPropertyInterface(s.p);function h(){return n===10?a.comp.compInterface(s.p.v):o()}return s.p.setGroupProperty&&s.p.setGroupProperty(PropertyInterface("",l)),h}return t}(),ShapePathInterface=function(){return function(e,r,i){var s=r.sh;function n(l){return l==="Shape"||l==="shape"||l==="Path"||l==="path"||l==="ADBE Vector Shape"||l===2?n.path:null}var a=propertyGroupFactory(n,i);return s.setGroupProperty(PropertyInterface("Path",a)),Object.defineProperties(n,{path:{get:function(){return s.k&&s.getValue(),s}},shape:{get:function(){return s.k&&s.getValue(),s}},_name:{value:e.nm},ix:{value:e.ix},propertyIndex:{value:e.ix},mn:{value:e.mn},propertyGroup:{value:i}}),n}}(),ShapeExpressionInterface=function(){function t(v,u,x){var c=[],m,f=v?v.length:0;for(m=0;m<f;m+=1)v[m].ty==="gr"?c.push(r(v[m],u[m],x)):v[m].ty==="fl"?c.push(i(v[m],u[m],x)):v[m].ty==="st"?c.push(a(v[m],u[m],x)):v[m].ty==="tm"?c.push(l(v[m],u[m],x)):v[m].ty==="tr"||(v[m].ty==="el"?c.push(h(v[m],u[m],x)):v[m].ty==="sr"?c.push(d(v[m],u[m],x)):v[m].ty==="sh"?c.push(ShapePathInterface(v[m],u[m],x)):v[m].ty==="rc"?c.push(b(v[m],u[m],x)):v[m].ty==="rd"?c.push(p(v[m],u[m],x)):v[m].ty==="rp"?c.push(E(v[m],u[m],x)):v[m].ty==="gf"?c.push(s(v[m],u[m],x)):c.push(n(v[m],u[m])));return c}function e(v,u,x){var c,m=function(P){for(var A=0,T=c.length;A<T;){if(c[A]._name===P||c[A].mn===P||c[A].propertyIndex===P||c[A].ix===P||c[A].ind===P)return c[A];A+=1}return typeof P=="number"?c[P-1]:null};m.propertyGroup=propertyGroupFactory(m,x),c=t(v.it,u.it,m.propertyGroup),m.numProperties=c.length;var f=o(v.it[v.it.length-1],u.it[u.it.length-1],m.propertyGroup);return m.transform=f,m.propertyIndex=v.cix,m._name=v.nm,m}function r(v,u,x){var c=function(P){switch(P){case"ADBE Vectors Group":case"Contents":case 2:return c.content;default:return c.transform}};c.propertyGroup=propertyGroupFactory(c,x);var m=e(v,u,c.propertyGroup),f=o(v.it[v.it.length-1],u.it[u.it.length-1],c.propertyGroup);return c.content=m,c.transform=f,Object.defineProperty(c,"_name",{get:function(){return v.nm}}),c.numProperties=v.np,c.propertyIndex=v.ix,c.nm=v.nm,c.mn=v.mn,c}function i(v,u,x){function c(m){return m==="Color"||m==="color"?c.color:m==="Opacity"||m==="opacity"?c.opacity:null}return Object.defineProperties(c,{color:{get:ExpressionPropertyInterface(u.c)},opacity:{get:ExpressionPropertyInterface(u.o)},_name:{value:v.nm},mn:{value:v.mn}}),u.c.setGroupProperty(PropertyInterface("Color",x)),u.o.setGroupProperty(PropertyInterface("Opacity",x)),c}function s(v,u,x){function c(m){return m==="Start Point"||m==="start point"?c.startPoint:m==="End Point"||m==="end point"?c.endPoint:m==="Opacity"||m==="opacity"?c.opacity:null}return Object.defineProperties(c,{startPoint:{get:ExpressionPropertyInterface(u.s)},endPoint:{get:ExpressionPropertyInterface(u.e)},opacity:{get:ExpressionPropertyInterface(u.o)},type:{get:function(){return"a"}},_name:{value:v.nm},mn:{value:v.mn}}),u.s.setGroupProperty(PropertyInterface("Start Point",x)),u.e.setGroupProperty(PropertyInterface("End Point",x)),u.o.setGroupProperty(PropertyInterface("Opacity",x)),c}function n(){function v(){return null}return v}function a(v,u,x){var c=propertyGroupFactory(T,x),m=propertyGroupFactory(A,c);function f(F){Object.defineProperty(A,v.d[F].nm,{get:ExpressionPropertyInterface(u.d.dataProps[F].p)})}var y,P=v.d?v.d.length:0,A={};for(y=0;y<P;y+=1)f(y),u.d.dataProps[y].p.setGroupProperty(m);function T(F){return F==="Color"||F==="color"?T.color:F==="Opacity"||F==="opacity"?T.opacity:F==="Stroke Width"||F==="stroke width"?T.strokeWidth:null}return Object.defineProperties(T,{color:{get:ExpressionPropertyInterface(u.c)},opacity:{get:ExpressionPropertyInterface(u.o)},strokeWidth:{get:ExpressionPropertyInterface(u.w)},dash:{get:function(){return A}},_name:{value:v.nm},mn:{value:v.mn}}),u.c.setGroupProperty(PropertyInterface("Color",c)),u.o.setGroupProperty(PropertyInterface("Opacity",c)),u.w.setGroupProperty(PropertyInterface("Stroke Width",c)),T}function l(v,u,x){function c(f){return f===v.e.ix||f==="End"||f==="end"?c.end:f===v.s.ix?c.start:f===v.o.ix?c.offset:null}var m=propertyGroupFactory(c,x);return c.propertyIndex=v.ix,u.s.setGroupProperty(PropertyInterface("Start",m)),u.e.setGroupProperty(PropertyInterface("End",m)),u.o.setGroupProperty(PropertyInterface("Offset",m)),c.propertyIndex=v.ix,c.propertyGroup=x,Object.defineProperties(c,{start:{get:ExpressionPropertyInterface(u.s)},end:{get:ExpressionPropertyInterface(u.e)},offset:{get:ExpressionPropertyInterface(u.o)},_name:{value:v.nm}}),c.mn=v.mn,c}function o(v,u,x){function c(f){return v.a.ix===f||f==="Anchor Point"?c.anchorPoint:v.o.ix===f||f==="Opacity"?c.opacity:v.p.ix===f||f==="Position"?c.position:v.r.ix===f||f==="Rotation"||f==="ADBE Vector Rotation"?c.rotation:v.s.ix===f||f==="Scale"?c.scale:v.sk&&v.sk.ix===f||f==="Skew"?c.skew:v.sa&&v.sa.ix===f||f==="Skew Axis"?c.skewAxis:null}var m=propertyGroupFactory(c,x);return u.transform.mProps.o.setGroupProperty(PropertyInterface("Opacity",m)),u.transform.mProps.p.setGroupProperty(PropertyInterface("Position",m)),u.transform.mProps.a.setGroupProperty(PropertyInterface("Anchor Point",m)),u.transform.mProps.s.setGroupProperty(PropertyInterface("Scale",m)),u.transform.mProps.r.setGroupProperty(PropertyInterface("Rotation",m)),u.transform.mProps.sk&&(u.transform.mProps.sk.setGroupProperty(PropertyInterface("Skew",m)),u.transform.mProps.sa.setGroupProperty(PropertyInterface("Skew Angle",m))),u.transform.op.setGroupProperty(PropertyInterface("Opacity",m)),Object.defineProperties(c,{opacity:{get:ExpressionPropertyInterface(u.transform.mProps.o)},position:{get:ExpressionPropertyInterface(u.transform.mProps.p)},anchorPoint:{get:ExpressionPropertyInterface(u.transform.mProps.a)},scale:{get:ExpressionPropertyInterface(u.transform.mProps.s)},rotation:{get:ExpressionPropertyInterface(u.transform.mProps.r)},skew:{get:ExpressionPropertyInterface(u.transform.mProps.sk)},skewAxis:{get:ExpressionPropertyInterface(u.transform.mProps.sa)},_name:{value:v.nm}}),c.ty="tr",c.mn=v.mn,c.propertyGroup=x,c}function h(v,u,x){function c(y){return v.p.ix===y?c.position:v.s.ix===y?c.size:null}var m=propertyGroupFactory(c,x);c.propertyIndex=v.ix;var f=u.sh.ty==="tm"?u.sh.prop:u.sh;return f.s.setGroupProperty(PropertyInterface("Size",m)),f.p.setGroupProperty(PropertyInterface("Position",m)),Object.defineProperties(c,{size:{get:ExpressionPropertyInterface(f.s)},position:{get:ExpressionPropertyInterface(f.p)},_name:{value:v.nm}}),c.mn=v.mn,c}function d(v,u,x){function c(y){return v.p.ix===y?c.position:v.r.ix===y?c.rotation:v.pt.ix===y?c.points:v.or.ix===y||y==="ADBE Vector Star Outer Radius"?c.outerRadius:v.os.ix===y?c.outerRoundness:v.ir&&(v.ir.ix===y||y==="ADBE Vector Star Inner Radius")?c.innerRadius:v.is&&v.is.ix===y?c.innerRoundness:null}var m=propertyGroupFactory(c,x),f=u.sh.ty==="tm"?u.sh.prop:u.sh;return c.propertyIndex=v.ix,f.or.setGroupProperty(PropertyInterface("Outer Radius",m)),f.os.setGroupProperty(PropertyInterface("Outer Roundness",m)),f.pt.setGroupProperty(PropertyInterface("Points",m)),f.p.setGroupProperty(PropertyInterface("Position",m)),f.r.setGroupProperty(PropertyInterface("Rotation",m)),v.ir&&(f.ir.setGroupProperty(PropertyInterface("Inner Radius",m)),f.is.setGroupProperty(PropertyInterface("Inner Roundness",m))),Object.defineProperties(c,{position:{get:ExpressionPropertyInterface(f.p)},rotation:{get:ExpressionPropertyInterface(f.r)},points:{get:ExpressionPropertyInterface(f.pt)},outerRadius:{get:ExpressionPropertyInterface(f.or)},outerRoundness:{get:ExpressionPropertyInterface(f.os)},innerRadius:{get:ExpressionPropertyInterface(f.ir)},innerRoundness:{get:ExpressionPropertyInterface(f.is)},_name:{value:v.nm}}),c.mn=v.mn,c}function b(v,u,x){function c(y){return v.p.ix===y?c.position:v.r.ix===y?c.roundness:v.s.ix===y||y==="Size"||y==="ADBE Vector Rect Size"?c.size:null}var m=propertyGroupFactory(c,x),f=u.sh.ty==="tm"?u.sh.prop:u.sh;return c.propertyIndex=v.ix,f.p.setGroupProperty(PropertyInterface("Position",m)),f.s.setGroupProperty(PropertyInterface("Size",m)),f.r.setGroupProperty(PropertyInterface("Rotation",m)),Object.defineProperties(c,{position:{get:ExpressionPropertyInterface(f.p)},roundness:{get:ExpressionPropertyInterface(f.r)},size:{get:ExpressionPropertyInterface(f.s)},_name:{value:v.nm}}),c.mn=v.mn,c}function p(v,u,x){function c(y){return v.r.ix===y||y==="Round Corners 1"?c.radius:null}var m=propertyGroupFactory(c,x),f=u;return c.propertyIndex=v.ix,f.rd.setGroupProperty(PropertyInterface("Radius",m)),Object.defineProperties(c,{radius:{get:ExpressionPropertyInterface(f.rd)},_name:{value:v.nm}}),c.mn=v.mn,c}function E(v,u,x){function c(y){return v.c.ix===y||y==="Copies"?c.copies:v.o.ix===y||y==="Offset"?c.offset:null}var m=propertyGroupFactory(c,x),f=u;return c.propertyIndex=v.ix,f.c.setGroupProperty(PropertyInterface("Copies",m)),f.o.setGroupProperty(PropertyInterface("Offset",m)),Object.defineProperties(c,{copies:{get:ExpressionPropertyInterface(f.c)},offset:{get:ExpressionPropertyInterface(f.o)},_name:{value:v.nm}}),c.mn=v.mn,c}return function(v,u,x){var c;function m(y){if(typeof y=="number")return y=y===void 0?1:y,y===0?x:c[y-1];for(var P=0,A=c.length;P<A;){if(c[P]._name===y)return c[P];P+=1}return null}function f(){return x}return m.propertyGroup=propertyGroupFactory(m,f),c=t(v,u,m.propertyGroup),m.numProperties=c.length,m._name="Contents",m}}(),TextExpressionInterface=function(){return function(t){var e;function r(i){switch(i){case"ADBE Text Document":return r.sourceText;default:return null}}return Object.defineProperty(r,"sourceText",{get:function(){t.textProperty.getValue();var s=t.textProperty.currentData.t;return(!e||s!==e.value)&&(e=new String(s),e.value=s||new String(s),Object.defineProperty(e,"style",{get:function(){return{fillColor:t.textProperty.currentData.fc}}})),e}}),r}}();function _typeof(t){"@babel/helpers - typeof";return typeof Symbol=="function"&&typeof Symbol.iterator=="symbol"?_typeof=function(r){return typeof r}:_typeof=function(r){return r&&typeof Symbol=="function"&&r.constructor===Symbol&&r!==Symbol.prototype?"symbol":typeof r},_typeof(t)}var FootageInterface=function(){var t=function(i){var s="",n=i.getFootageData();function a(){return s="",n=i.getFootageData(),l}function l(o){if(n[o])return s=o,n=n[o],_typeof(n)==="object"?l:n;var h=o.indexOf(s);if(h!==-1){var d=parseInt(o.substr(h+s.length),10);return n=n[d],_typeof(n)==="object"?l:n}return""}return a},e=function(i){function s(n){return n==="Outline"?s.outlineInterface():null}return s._name="Outline",s.outlineInterface=t(i),s};return function(r){function i(s){return s==="Data"?i.dataInterface:null}return i._name="Data",i.dataInterface=e(r),i}}(),interfaces={layer:LayerExpressionInterface,effects:EffectsExpressionInterface,comp:CompExpressionInterface,shape:ShapeExpressionInterface,text:TextExpressionInterface,footage:FootageInterface};function getInterface(t){return interfaces[t]||null}var expressionHelpers=function(){function t(a,l,o){l.x&&(o.k=!0,o.x=!0,o.initiateExpression=ExpressionManager.initiateExpression,o.effectsSequence.push(o.initiateExpression(a,l,o).bind(o)))}function e(a){return a*=this.elem.globalData.frameRate,a-=this.offsetTime,a!==this._cachingAtTime.lastFrame&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastFrame<a?this._cachingAtTime.lastIndex:0,this._cachingAtTime.value=this.interpolateValue(a,this._cachingAtTime),this._cachingAtTime.lastFrame=a),this._cachingAtTime.value}function r(a){var l=-.01,o=this.getValueAtTime(a),h=this.getValueAtTime(a+l),d=0;if(o.length){var b;for(b=0;b<o.length;b+=1)d+=Math.pow(h[b]-o[b],2);d=Math.sqrt(d)*100}else d=0;return d}function i(a){if(this.vel!==void 0)return this.vel;var l=-.001,o=this.getValueAtTime(a),h=this.getValueAtTime(a+l),d;if(o.length){d=createTypedArray("float32",o.length);var b;for(b=0;b<o.length;b+=1)d[b]=(h[b]-o[b])/l}else d=(h-o)/l;return d}function s(){return this.pv}function n(a){this.propertyGroup=a}return{searchExpressions:t,getSpeedAtTime:r,getVelocityAtTime:i,getValueAtTime:e,getStaticValueAtTime:s,setGroupProperty:n}}();function addPropertyDecorator(){function t(p,E,v){if(!this.k||!this.keyframes)return this.pv;p=p?p.toLowerCase():"";var u=this.comp.renderedFrame,x=this.keyframes,c=x[x.length-1].t;if(u<=c)return this.pv;var m,f;v?(E?m=Math.abs(c-this.elem.comp.globalData.frameRate*E):m=Math.max(0,c-this.elem.data.ip),f=c-m):((!E||E>x.length-1)&&(E=x.length-1),f=x[x.length-1-E].t,m=c-f);var y,P,A;if(p==="pingpong"){var T=Math.floor((u-f)/m);if(T%2!==0)return this.getValueAtTime((m-(u-f)%m+f)/this.comp.globalData.frameRate,0)}else if(p==="offset"){var F=this.getValueAtTime(f/this.comp.globalData.frameRate,0),k=this.getValueAtTime(c/this.comp.globalData.frameRate,0),O=this.getValueAtTime(((u-f)%m+f)/this.comp.globalData.frameRate,0),L=Math.floor((u-f)/m);if(this.pv.length){for(A=new Array(F.length),P=A.length,y=0;y<P;y+=1)A[y]=(k[y]-F[y])*L+O[y];return A}return(k-F)*L+O}else if(p==="continue"){var R=this.getValueAtTime(c/this.comp.globalData.frameRate,0),D=this.getValueAtTime((c-.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(A=new Array(R.length),P=A.length,y=0;y<P;y+=1)A[y]=R[y]+(R[y]-D[y])*((u-c)/this.comp.globalData.frameRate)/5e-4;return A}return R+(R-D)*((u-c)/.001)}return this.getValueAtTime(((u-f)%m+f)/this.comp.globalData.frameRate,0)}function e(p,E,v){if(!this.k)return this.pv;p=p?p.toLowerCase():"";var u=this.comp.renderedFrame,x=this.keyframes,c=x[0].t;if(u>=c)return this.pv;var m,f;v?(E?m=Math.abs(this.elem.comp.globalData.frameRate*E):m=Math.max(0,this.elem.data.op-c),f=c+m):((!E||E>x.length-1)&&(E=x.length-1),f=x[E].t,m=f-c);var y,P,A;if(p==="pingpong"){var T=Math.floor((c-u)/m);if(T%2===0)return this.getValueAtTime(((c-u)%m+c)/this.comp.globalData.frameRate,0)}else if(p==="offset"){var F=this.getValueAtTime(c/this.comp.globalData.frameRate,0),k=this.getValueAtTime(f/this.comp.globalData.frameRate,0),O=this.getValueAtTime((m-(c-u)%m+c)/this.comp.globalData.frameRate,0),L=Math.floor((c-u)/m)+1;if(this.pv.length){for(A=new Array(F.length),P=A.length,y=0;y<P;y+=1)A[y]=O[y]-(k[y]-F[y])*L;return A}return O-(k-F)*L}else if(p==="continue"){var R=this.getValueAtTime(c/this.comp.globalData.frameRate,0),D=this.getValueAtTime((c+.001)/this.comp.globalData.frameRate,0);if(this.pv.length){for(A=new Array(R.length),P=A.length,y=0;y<P;y+=1)A[y]=R[y]+(R[y]-D[y])*(c-u)/.001;return A}return R+(R-D)*(c-u)/.001}return this.getValueAtTime((m-((c-u)%m+c))/this.comp.globalData.frameRate,0)}function r(p,E){if(!this.k)return this.pv;if(p=(p||.4)*.5,E=Math.floor(E||5),E<=1)return this.pv;var v=this.comp.renderedFrame/this.comp.globalData.frameRate,u=v-p,x=v+p,c=E>1?(x-u)/(E-1):1,m=0,f=0,y;this.pv.length?y=createTypedArray("float32",this.pv.length):y=0;for(var P;m<E;){if(P=this.getValueAtTime(u+m*c),this.pv.length)for(f=0;f<this.pv.length;f+=1)y[f]+=P[f];else y+=P;m+=1}if(this.pv.length)for(f=0;f<this.pv.length;f+=1)y[f]/=E;else y/=E;return y}function i(p){this._transformCachingAtTime||(this._transformCachingAtTime={v:new Matrix});var E=this._transformCachingAtTime.v;if(E.cloneFromProps(this.pre.props),this.appliedTransformations<1){var v=this.a.getValueAtTime(p);E.translate(-v[0]*this.a.mult,-v[1]*this.a.mult,v[2]*this.a.mult)}if(this.appliedTransformations<2){var u=this.s.getValueAtTime(p);E.scale(u[0]*this.s.mult,u[1]*this.s.mult,u[2]*this.s.mult)}if(this.sk&&this.appliedTransformations<3){var x=this.sk.getValueAtTime(p),c=this.sa.getValueAtTime(p);E.skewFromAxis(-x*this.sk.mult,c*this.sa.mult)}if(this.r&&this.appliedTransformations<4){var m=this.r.getValueAtTime(p);E.rotate(-m*this.r.mult)}else if(!this.r&&this.appliedTransformations<4){var f=this.rz.getValueAtTime(p),y=this.ry.getValueAtTime(p),P=this.rx.getValueAtTime(p),A=this.or.getValueAtTime(p);E.rotateZ(-f*this.rz.mult).rotateY(y*this.ry.mult).rotateX(P*this.rx.mult).rotateZ(-A[2]*this.or.mult).rotateY(A[1]*this.or.mult).rotateX(A[0]*this.or.mult)}if(this.data.p&&this.data.p.s){var T=this.px.getValueAtTime(p),F=this.py.getValueAtTime(p);if(this.data.p.z){var k=this.pz.getValueAtTime(p);E.translate(T*this.px.mult,F*this.py.mult,-k*this.pz.mult)}else E.translate(T*this.px.mult,F*this.py.mult,0)}else{var O=this.p.getValueAtTime(p);E.translate(O[0]*this.p.mult,O[1]*this.p.mult,-O[2]*this.p.mult)}return E}function s(){return this.v.clone(new Matrix)}var n=TransformPropertyFactory.getTransformProperty;TransformPropertyFactory.getTransformProperty=function(p,E,v){var u=n(p,E,v);return u.dynamicProperties.length?u.getValueAtTime=i.bind(u):u.getValueAtTime=s.bind(u),u.setGroupProperty=expressionHelpers.setGroupProperty,u};var a=PropertyFactory.getProp;PropertyFactory.getProp=function(p,E,v,u,x){var c=a(p,E,v,u,x);c.kf?c.getValueAtTime=expressionHelpers.getValueAtTime.bind(c):c.getValueAtTime=expressionHelpers.getStaticValueAtTime.bind(c),c.setGroupProperty=expressionHelpers.setGroupProperty,c.loopOut=t,c.loopIn=e,c.smooth=r,c.getVelocityAtTime=expressionHelpers.getVelocityAtTime.bind(c),c.getSpeedAtTime=expressionHelpers.getSpeedAtTime.bind(c),c.numKeys=E.a===1?E.k.length:0,c.propertyIndex=E.ix;var m=0;return v!==0&&(m=createTypedArray("float32",E.a===1?E.k[0].s.length:E.k.length)),c._cachingAtTime={lastFrame:initialDefaultFrame,lastIndex:0,value:m},expressionHelpers.searchExpressions(p,E,c),c.k&&x.addDynamicProperty(c),c};function l(p){return this._cachingAtTime||(this._cachingAtTime={shapeValue:shapePool.clone(this.pv),lastIndex:0,lastTime:initialDefaultFrame}),p*=this.elem.globalData.frameRate,p-=this.offsetTime,p!==this._cachingAtTime.lastTime&&(this._cachingAtTime.lastIndex=this._cachingAtTime.lastTime<p?this._caching.lastIndex:0,this._cachingAtTime.lastTime=p,this.interpolateShape(p,this._cachingAtTime.shapeValue,this._cachingAtTime)),this._cachingAtTime.shapeValue}var o=ShapePropertyFactory.getConstructorFunction(),h=ShapePropertyFactory.getKeyframedConstructorFunction();function d(){}d.prototype={vertices:function(E,v){this.k&&this.getValue();var u=this.v;v!==void 0&&(u=this.getValueAtTime(v,0));var x,c=u._length,m=u[E],f=u.v,y=createSizedArray(c);for(x=0;x<c;x+=1)E==="i"||E==="o"?y[x]=[m[x][0]-f[x][0],m[x][1]-f[x][1]]:y[x]=[m[x][0],m[x][1]];return y},points:function(E){return this.vertices("v",E)},inTangents:function(E){return this.vertices("i",E)},outTangents:function(E){return this.vertices("o",E)},isClosed:function(){return this.v.c},pointOnPath:function(E,v){var u=this.v;v!==void 0&&(u=this.getValueAtTime(v,0)),this._segmentsLength||(this._segmentsLength=bez.getSegmentsLength(u));for(var x=this._segmentsLength,c=x.lengths,m=x.totalLength*E,f=0,y=c.length,P=0,A;f<y;){if(P+c[f].addedLength>m){var T=f,F=u.c&&f===y-1?0:f+1,k=(m-P)/c[f].addedLength;A=bez.getPointInSegment(u.v[T],u.v[F],u.o[T],u.i[F],k,c[f]);break}else P+=c[f].addedLength;f+=1}return A||(A=u.c?[u.v[0][0],u.v[0][1]]:[u.v[u._length-1][0],u.v[u._length-1][1]]),A},vectorOnPath:function(E,v,u){E==1?E=this.v.c:E==0&&(E=.999);var x=this.pointOnPath(E,v),c=this.pointOnPath(E+.001,v),m=c[0]-x[0],f=c[1]-x[1],y=Math.sqrt(Math.pow(m,2)+Math.pow(f,2));if(y===0)return[0,0];var P=u==="tangent"?[m/y,f/y]:[-f/y,m/y];return P},tangentOnPath:function(E,v){return this.vectorOnPath(E,v,"tangent")},normalOnPath:function(E,v){return this.vectorOnPath(E,v,"normal")},setGroupProperty:expressionHelpers.setGroupProperty,getValueAtTime:expressionHelpers.getStaticValueAtTime},extendPrototype([d],o),extendPrototype([d],h),h.prototype.getValueAtTime=l,h.prototype.initiateExpression=ExpressionManager.initiateExpression;var b=ShapePropertyFactory.getShapeProp;ShapePropertyFactory.getShapeProp=function(p,E,v,u,x){var c=b(p,E,v,u,x);return c.propertyIndex=E.ix,c.lock=!1,v===3?expressionHelpers.searchExpressions(p,E.pt,c):v===4&&expressionHelpers.searchExpressions(p,E.ks,c),c.k&&p.addDynamicProperty(c),c}}function initialize$1(){addPropertyDecorator()}function addDecorator(){function t(){return this.data.d.x?(this.calculateExpression=ExpressionManager.initiateExpression.bind(this)(this.elem,this.data.d,this),this.addEffect(this.getExpressionValue.bind(this)),!0):null}TextProperty.prototype.getExpressionValue=function(e,r){var i=this.calculateExpression(r);if(e.t!==i){var s={};return this.copyData(s,e),s.t=i.toString(),s.__complete=!1,s}return e},TextProperty.prototype.searchProperty=function(){var e=this.searchKeyframes(),r=this.searchExpressions();return this.kf=e||r,this.kf},TextProperty.prototype.searchExpressions=t}function initialize(){addDecorator()}function SVGComposableEffect(){}SVGComposableEffect.prototype={createMergeNode:function t(e,r){var i=createNS("feMerge");i.setAttribute("result",e);var s,n;for(n=0;n<r.length;n+=1)s=createNS("feMergeNode"),s.setAttribute("in",r[n]),i.appendChild(s),i.appendChild(s);return i}};var linearFilterValue="0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0";function SVGTintFilter(t,e,r,i,s){this.filterManager=e;var n=createNS("feColorMatrix");n.setAttribute("type","matrix"),n.setAttribute("color-interpolation-filters","linearRGB"),n.setAttribute("values",linearFilterValue+" 1 0"),this.linearFilter=n,n.setAttribute("result",i+"_tint_1"),t.appendChild(n),n=createNS("feColorMatrix"),n.setAttribute("type","matrix"),n.setAttribute("color-interpolation-filters","sRGB"),n.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),n.setAttribute("result",i+"_tint_2"),t.appendChild(n),this.matrixFilter=n;var a=this.createMergeNode(i,[s,i+"_tint_1",i+"_tint_2"]);t.appendChild(a)}extendPrototype([SVGComposableEffect],SVGTintFilter),SVGTintFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v/100;this.linearFilter.setAttribute("values",linearFilterValue+" "+i+" 0"),this.matrixFilter.setAttribute("values",r[0]-e[0]+" 0 0 0 "+e[0]+" "+(r[1]-e[1])+" 0 0 0 "+e[1]+" "+(r[2]-e[2])+" 0 0 0 "+e[2]+" 0 0 0 1 0")}};function SVGFillFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","sRGB"),s.setAttribute("values","1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 1 0"),s.setAttribute("result",i),t.appendChild(s),this.matrixFilter=s}SVGFillFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[2].p.v,r=this.filterManager.effectElements[6].p.v;this.matrixFilter.setAttribute("values","0 0 0 0 "+e[0]+" 0 0 0 0 "+e[1]+" 0 0 0 0 "+e[2]+" 0 0 0 "+r+" 0")}};function SVGStrokeEffect(t,e,r){this.initialized=!1,this.filterManager=e,this.elem=r,this.paths=[]}SVGStrokeEffect.prototype.initialize=function(){var t=this.elem.layerElement.children||this.elem.layerElement.childNodes,e,r,i,s;for(this.filterManager.effectElements[1].p.v===1?(s=this.elem.maskManager.masksProperties.length,i=0):(i=this.filterManager.effectElements[0].p.v-1,s=i+1),r=createNS("g"),r.setAttribute("fill","none"),r.setAttribute("stroke-linecap","round"),r.setAttribute("stroke-dashoffset",1),i;i<s;i+=1)e=createNS("path"),r.appendChild(e),this.paths.push({p:e,m:i});if(this.filterManager.effectElements[10].p.v===3){var n=createNS("mask"),a=createElementID();n.setAttribute("id",a),n.setAttribute("mask-type","alpha"),n.appendChild(r),this.elem.globalData.defs.appendChild(n);var l=createNS("g");for(l.setAttribute("mask","url("+getLocationHref()+"#"+a+")");t[0];)l.appendChild(t[0]);this.elem.layerElement.appendChild(l),this.masker=n,r.setAttribute("stroke","#fff")}else if(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2){if(this.filterManager.effectElements[10].p.v===2)for(t=this.elem.layerElement.children||this.elem.layerElement.childNodes;t.length;)this.elem.layerElement.removeChild(t[0]);this.elem.layerElement.appendChild(r),this.elem.layerElement.removeAttribute("mask"),r.setAttribute("stroke","#fff")}this.initialized=!0,this.pathMasker=r},SVGStrokeEffect.prototype.renderFrame=function(t){this.initialized||this.initialize();var e,r=this.paths.length,i,s;for(e=0;e<r;e+=1)if(this.paths[e].m!==-1&&(i=this.elem.maskManager.viewData[this.paths[e].m],s=this.paths[e].p,(t||this.filterManager._mdf||i.prop._mdf)&&s.setAttribute("d",i.lastPath),t||this.filterManager.effectElements[9].p._mdf||this.filterManager.effectElements[4].p._mdf||this.filterManager.effectElements[7].p._mdf||this.filterManager.effectElements[8].p._mdf||i.prop._mdf)){var n;if(this.filterManager.effectElements[7].p.v!==0||this.filterManager.effectElements[8].p.v!==100){var a=Math.min(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,l=Math.max(this.filterManager.effectElements[7].p.v,this.filterManager.effectElements[8].p.v)*.01,o=s.getTotalLength();n="0 0 0 "+o*a+" ";var h=o*(l-a),d=1+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01,b=Math.floor(h/d),p;for(p=0;p<b;p+=1)n+="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01+" ";n+="0 "+o*10+" 0 0"}else n="1 "+this.filterManager.effectElements[4].p.v*2*this.filterManager.effectElements[9].p.v*.01;s.setAttribute("stroke-dasharray",n)}if((t||this.filterManager.effectElements[4].p._mdf)&&this.pathMasker.setAttribute("stroke-width",this.filterManager.effectElements[4].p.v*2),(t||this.filterManager.effectElements[6].p._mdf)&&this.pathMasker.setAttribute("opacity",this.filterManager.effectElements[6].p.v),(this.filterManager.effectElements[10].p.v===1||this.filterManager.effectElements[10].p.v===2)&&(t||this.filterManager.effectElements[3].p._mdf)){var E=this.filterManager.effectElements[3].p.v;this.pathMasker.setAttribute("stroke","rgb("+bmFloor(E[0]*255)+","+bmFloor(E[1]*255)+","+bmFloor(E[2]*255)+")")}};function SVGTritoneFilter(t,e,r,i){this.filterManager=e;var s=createNS("feColorMatrix");s.setAttribute("type","matrix"),s.setAttribute("color-interpolation-filters","linearRGB"),s.setAttribute("values","0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0"),t.appendChild(s);var n=createNS("feComponentTransfer");n.setAttribute("color-interpolation-filters","sRGB"),n.setAttribute("result",i),this.matrixFilter=n;var a=createNS("feFuncR");a.setAttribute("type","table"),n.appendChild(a),this.feFuncR=a;var l=createNS("feFuncG");l.setAttribute("type","table"),n.appendChild(l),this.feFuncG=l;var o=createNS("feFuncB");o.setAttribute("type","table"),n.appendChild(o),this.feFuncB=o,t.appendChild(n)}SVGTritoneFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=this.filterManager.effectElements[0].p.v,r=this.filterManager.effectElements[1].p.v,i=this.filterManager.effectElements[2].p.v,s=i[0]+" "+r[0]+" "+e[0],n=i[1]+" "+r[1]+" "+e[1],a=i[2]+" "+r[2]+" "+e[2];this.feFuncR.setAttribute("tableValues",s),this.feFuncG.setAttribute("tableValues",n),this.feFuncB.setAttribute("tableValues",a)}};function SVGProLevelsFilter(t,e,r,i){this.filterManager=e;var s=this.filterManager.effectElements,n=createNS("feComponentTransfer");(s[10].p.k||s[10].p.v!==0||s[11].p.k||s[11].p.v!==1||s[12].p.k||s[12].p.v!==1||s[13].p.k||s[13].p.v!==0||s[14].p.k||s[14].p.v!==1)&&(this.feFuncR=this.createFeFunc("feFuncR",n)),(s[17].p.k||s[17].p.v!==0||s[18].p.k||s[18].p.v!==1||s[19].p.k||s[19].p.v!==1||s[20].p.k||s[20].p.v!==0||s[21].p.k||s[21].p.v!==1)&&(this.feFuncG=this.createFeFunc("feFuncG",n)),(s[24].p.k||s[24].p.v!==0||s[25].p.k||s[25].p.v!==1||s[26].p.k||s[26].p.v!==1||s[27].p.k||s[27].p.v!==0||s[28].p.k||s[28].p.v!==1)&&(this.feFuncB=this.createFeFunc("feFuncB",n)),(s[31].p.k||s[31].p.v!==0||s[32].p.k||s[32].p.v!==1||s[33].p.k||s[33].p.v!==1||s[34].p.k||s[34].p.v!==0||s[35].p.k||s[35].p.v!==1)&&(this.feFuncA=this.createFeFunc("feFuncA",n)),(this.feFuncR||this.feFuncG||this.feFuncB||this.feFuncA)&&(n.setAttribute("color-interpolation-filters","sRGB"),t.appendChild(n)),(s[3].p.k||s[3].p.v!==0||s[4].p.k||s[4].p.v!==1||s[5].p.k||s[5].p.v!==1||s[6].p.k||s[6].p.v!==0||s[7].p.k||s[7].p.v!==1)&&(n=createNS("feComponentTransfer"),n.setAttribute("color-interpolation-filters","sRGB"),n.setAttribute("result",i),t.appendChild(n),this.feFuncRComposed=this.createFeFunc("feFuncR",n),this.feFuncGComposed=this.createFeFunc("feFuncG",n),this.feFuncBComposed=this.createFeFunc("feFuncB",n))}SVGProLevelsFilter.prototype.createFeFunc=function(t,e){var r=createNS(t);return r.setAttribute("type","table"),e.appendChild(r),r},SVGProLevelsFilter.prototype.getTableValue=function(t,e,r,i,s){for(var n=0,a=256,l,o=Math.min(t,e),h=Math.max(t,e),d=Array.call(null,{length:a}),b,p=0,E=s-i,v=e-t;n<=256;)l=n/256,l<=o?b=v<0?s:i:l>=h?b=v<0?i:s:b=i+E*Math.pow((l-t)/v,1/r),d[p]=b,p+=1,n+=256/(a-1);return d.join(" ")},SVGProLevelsFilter.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e,r=this.filterManager.effectElements;this.feFuncRComposed&&(t||r[3].p._mdf||r[4].p._mdf||r[5].p._mdf||r[6].p._mdf||r[7].p._mdf)&&(e=this.getTableValue(r[3].p.v,r[4].p.v,r[5].p.v,r[6].p.v,r[7].p.v),this.feFuncRComposed.setAttribute("tableValues",e),this.feFuncGComposed.setAttribute("tableValues",e),this.feFuncBComposed.setAttribute("tableValues",e)),this.feFuncR&&(t||r[10].p._mdf||r[11].p._mdf||r[12].p._mdf||r[13].p._mdf||r[14].p._mdf)&&(e=this.getTableValue(r[10].p.v,r[11].p.v,r[12].p.v,r[13].p.v,r[14].p.v),this.feFuncR.setAttribute("tableValues",e)),this.feFuncG&&(t||r[17].p._mdf||r[18].p._mdf||r[19].p._mdf||r[20].p._mdf||r[21].p._mdf)&&(e=this.getTableValue(r[17].p.v,r[18].p.v,r[19].p.v,r[20].p.v,r[21].p.v),this.feFuncG.setAttribute("tableValues",e)),this.feFuncB&&(t||r[24].p._mdf||r[25].p._mdf||r[26].p._mdf||r[27].p._mdf||r[28].p._mdf)&&(e=this.getTableValue(r[24].p.v,r[25].p.v,r[26].p.v,r[27].p.v,r[28].p.v),this.feFuncB.setAttribute("tableValues",e)),this.feFuncA&&(t||r[31].p._mdf||r[32].p._mdf||r[33].p._mdf||r[34].p._mdf||r[35].p._mdf)&&(e=this.getTableValue(r[31].p.v,r[32].p.v,r[33].p.v,r[34].p.v,r[35].p.v),this.feFuncA.setAttribute("tableValues",e))}};function SVGDropShadowEffect(t,e,r,i,s){var n=e.container.globalData.renderConfig.filterSize,a=e.data.fs||n;t.setAttribute("x",a.x||n.x),t.setAttribute("y",a.y||n.y),t.setAttribute("width",a.width||n.width),t.setAttribute("height",a.height||n.height),this.filterManager=e;var l=createNS("feGaussianBlur");l.setAttribute("in","SourceAlpha"),l.setAttribute("result",i+"_drop_shadow_1"),l.setAttribute("stdDeviation","0"),this.feGaussianBlur=l,t.appendChild(l);var o=createNS("feOffset");o.setAttribute("dx","25"),o.setAttribute("dy","0"),o.setAttribute("in",i+"_drop_shadow_1"),o.setAttribute("result",i+"_drop_shadow_2"),this.feOffset=o,t.appendChild(o);var h=createNS("feFlood");h.setAttribute("flood-color","#00ff00"),h.setAttribute("flood-opacity","1"),h.setAttribute("result",i+"_drop_shadow_3"),this.feFlood=h,t.appendChild(h);var d=createNS("feComposite");d.setAttribute("in",i+"_drop_shadow_3"),d.setAttribute("in2",i+"_drop_shadow_2"),d.setAttribute("operator","in"),d.setAttribute("result",i+"_drop_shadow_4"),t.appendChild(d);var b=this.createMergeNode(i,[i+"_drop_shadow_4",s]);t.appendChild(b)}extendPrototype([SVGComposableEffect],SVGDropShadowEffect),SVGDropShadowEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){if((t||this.filterManager.effectElements[4].p._mdf)&&this.feGaussianBlur.setAttribute("stdDeviation",this.filterManager.effectElements[4].p.v/4),t||this.filterManager.effectElements[0].p._mdf){var e=this.filterManager.effectElements[0].p.v;this.feFlood.setAttribute("flood-color",rgbToHex(Math.round(e[0]*255),Math.round(e[1]*255),Math.round(e[2]*255)))}if((t||this.filterManager.effectElements[1].p._mdf)&&this.feFlood.setAttribute("flood-opacity",this.filterManager.effectElements[1].p.v/255),t||this.filterManager.effectElements[2].p._mdf||this.filterManager.effectElements[3].p._mdf){var r=this.filterManager.effectElements[3].p.v,i=(this.filterManager.effectElements[2].p.v-90)*degToRads,s=r*Math.cos(i),n=r*Math.sin(i);this.feOffset.setAttribute("dx",s),this.feOffset.setAttribute("dy",n)}}};var _svgMatteSymbols=[];function SVGMatte3Effect(t,e,r){this.initialized=!1,this.filterManager=e,this.filterElem=t,this.elem=r,r.matteElement=createNS("g"),r.matteElement.appendChild(r.layerElement),r.matteElement.appendChild(r.transformedElement),r.baseElement=r.matteElement}SVGMatte3Effect.prototype.findSymbol=function(t){for(var e=0,r=_svgMatteSymbols.length;e<r;){if(_svgMatteSymbols[e]===t)return _svgMatteSymbols[e];e+=1}return null},SVGMatte3Effect.prototype.replaceInParent=function(t,e){var r=t.layerElement.parentNode;if(r){for(var i=r.children,s=0,n=i.length;s<n&&i[s]!==t.layerElement;)s+=1;var a;s<=n-2&&(a=i[s+1]);var l=createNS("use");l.setAttribute("href","#"+e),a?r.insertBefore(l,a):r.appendChild(l)}},SVGMatte3Effect.prototype.setElementAsMask=function(t,e){if(!this.findSymbol(e)){var r=createElementID(),i=createNS("mask");i.setAttribute("id",e.layerId),i.setAttribute("mask-type","alpha"),_svgMatteSymbols.push(e);var s=t.globalData.defs;s.appendChild(i);var n=createNS("symbol");n.setAttribute("id",r),this.replaceInParent(e,r),n.appendChild(e.layerElement),s.appendChild(n);var a=createNS("use");a.setAttribute("href","#"+r),i.appendChild(a),e.data.hd=!1,e.show()}t.setMatte(e.layerId)},SVGMatte3Effect.prototype.initialize=function(){for(var t=this.filterManager.effectElements[0].p.v,e=this.elem.comp.elements,r=0,i=e.length;r<i;)e[r]&&e[r].data.ind===t&&this.setElementAsMask(this.elem,e[r]),r+=1;this.initialized=!0},SVGMatte3Effect.prototype.renderFrame=function(){this.initialized||this.initialize()};function SVGGaussianBlurEffect(t,e,r,i){t.setAttribute("x","-100%"),t.setAttribute("y","-100%"),t.setAttribute("width","300%"),t.setAttribute("height","300%"),this.filterManager=e;var s=createNS("feGaussianBlur");s.setAttribute("result",i),t.appendChild(s),this.feGaussianBlur=s}SVGGaussianBlurEffect.prototype.renderFrame=function(t){if(t||this.filterManager._mdf){var e=.3,r=this.filterManager.effectElements[0].p.v*e,i=this.filterManager.effectElements[1].p.v,s=i==3?0:r,n=i==2?0:r;this.feGaussianBlur.setAttribute("stdDeviation",s+" "+n);var a=this.filterManager.effectElements[2].p.v==1?"wrap":"duplicate";this.feGaussianBlur.setAttribute("edgeMode",a)}};function TransformEffect(){}TransformEffect.prototype.init=function(t){this.effectsManager=t,this.type=effectTypes.TRANSFORM_EFFECT,this.matrix=new Matrix,this.opacity=-1,this._mdf=!1,this._opMdf=!1},TransformEffect.prototype.renderFrame=function(t){if(this._opMdf=!1,this._mdf=!1,t||this.effectsManager._mdf){var e=this.effectsManager.effectElements,r=e[0].p.v,i=e[1].p.v,s=e[2].p.v===1,n=e[3].p.v,a=s?n:e[4].p.v,l=e[5].p.v,o=e[6].p.v,h=e[7].p.v;this.matrix.reset(),this.matrix.translate(-r[0],-r[1],r[2]),this.matrix.scale(a*.01,n*.01,1),this.matrix.rotate(-h*degToRads),this.matrix.skewFromAxis(-l*degToRads,(o+90)*degToRads),this.matrix.translate(i[0],i[1],0),this._mdf=!0,this.opacity!==e[8].p.v&&(this.opacity=e[8].p.v,this._opMdf=!0)}};function SVGTransformEffect(t,e){this.init(e)}extendPrototype([TransformEffect],SVGTransformEffect);function CVTransformEffect(t){this.init(t)}return extendPrototype([TransformEffect],CVTransformEffect),registerRenderer("canvas",CanvasRenderer),registerRenderer("html",HybridRenderer),registerRenderer("svg",SVGRenderer),ShapeModifiers.registerModifier("tm",TrimModifier),ShapeModifiers.registerModifier("pb",PuckerAndBloatModifier),ShapeModifiers.registerModifier("rp",RepeaterModifier),ShapeModifiers.registerModifier("rd",RoundCornersModifier),ShapeModifiers.registerModifier("zz",ZigZagModifier),ShapeModifiers.registerModifier("op",OffsetPathModifier),setExpressionsPlugin(Expressions),setExpressionInterfaces(getInterface),initialize$1(),initialize(),registerEffect$1(20,SVGTintFilter,!0),registerEffect$1(21,SVGFillFilter,!0),registerEffect$1(22,SVGStrokeEffect,!1),registerEffect$1(23,SVGTritoneFilter,!0),registerEffect$1(24,SVGProLevelsFilter,!0),registerEffect$1(25,SVGDropShadowEffect,!0),registerEffect$1(28,SVGMatte3Effect,!1),registerEffect$1(29,SVGGaussianBlurEffect,!0),registerEffect$1(35,SVGTransformEffect,!1),registerEffect(35,CVTransformEffect),lottie})})(lottie$1,lottie$1.exports);var lottieExports=lottie$1.exports;const lottie=getDefaultExportFromCjs(lottieExports);export{APIURL as A,apiClient as a,lottie as l};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
