import{j as e,r as u,R as p,_ as j}from"./jsx-runtime-329ae681.js";import{Q as N,a as v}from"./useQuery-303ce1b9.js";import{i as x,h as P,b}from"./main.js";import{B as y,S as B,f as R,a as S}from"./sidebarBolgs-bd9e1872.js";import{L as f}from"./index-47726f55.js";import{a as F}from"./index.esm-eafa3a99.js";import{u as M}from"./useLazyload-0697bf1e.js";import"./utils-4decd3ad.js";import"./apiClient-4214bebe.js";import"./index-fdfb6bde.js";import"./logoOriginal-f292af29.js";import"./ThemeProvider-0f50096d.js";import"./floawhatsapp-6f52b278.js";import"./footer1-07962d7a.js";import"./index.esm-f65753b7.js";import"./iconBase-362add62.js";import"./index.esm-8ae24eaa.js";import"./index.esm-b821d194.js";var w=class extends N{constructor(s,t){super(s,t)}bindMethods(){super.bindMethods(),this.fetchNextPage=this.fetchNextPage.bind(this),this.fetchPreviousPage=this.fetchPreviousPage.bind(this)}setOptions(s,t){super.setOptions({...s,behavior:x()},t)}getOptimisticResult(s){return s.behavior=x(),super.getOptimisticResult(s)}fetchNextPage(s){return this.fetch({...s,meta:{fetchMore:{direction:"forward"}}})}fetchPreviousPage(s){return this.fetch({...s,meta:{fetchMore:{direction:"backward"}}})}createResult(s,t){var n,o,h,r;const{state:a}=s,c=super.createResult(s,t),{isFetching:i,isRefetching:l}=c,d=i&&((o=(n=a.fetchMeta)==null?void 0:n.fetchMore)==null?void 0:o.direction)==="forward",m=i&&((r=(h=a.fetchMeta)==null?void 0:h.fetchMore)==null?void 0:r.direction)==="backward";return{...c,fetchNextPage:this.fetchNextPage,fetchPreviousPage:this.fetchPreviousPage,hasNextPage:P(t,a.data),hasPreviousPage:b(t,a.data),isFetchingNextPage:d,isFetchingPreviousPage:m,isRefetching:l&&!d&&!m}}};function L(s,t){return v(s,w,t)}const O=({blogs:s,search:t})=>e.jsxs(e.Fragment,{children:[e.jsxs("div",{className:"row",children:[t&&t.length===0&&e.jsx("h3",{children:"No se encontraron resultados"}),t&&t.length>0&&e.jsx("h3",{children:"Resultados de la búsqueda"}),t&&(t==null?void 0:t.map(a=>e.jsx("div",{className:"col-lg-4 col-md-4 col-sm-6 ",children:e.jsx(f,{to:`/blog/${a.id}`,className:"link-blogs",children:e.jsxs("div",{className:"card card-blog mt-3 small-card",children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:a.image,className:"img-fluid small-image",alt:a.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:a.title}),e.jsxs("p",{className:"card-text",children:[a.description.slice(0,200),"..."]})]})]})})},a.id))),t&&t.length>0&&e.jsx("hr",{className:"mt-5"})]}),e.jsx("div",{className:"row",children:s.map(a=>{let c="",i="",l="";return a.important===!1?(c="col-lg-4 col-md-4 col-sm-6",l="small-card",i="small-image"):a.important===!0?(c="col-lg-6 col-md-12 col-sm-12 ",i="big-image",l="big-card"):(c="col-lg-3 col-md-4 col-sm-6",i="small-image",l="small-card"),e.jsx("div",{className:c,children:e.jsx(f,{to:`/blog/${a.id}`,className:"link-blogs",children:e.jsxs("div",{className:`card card-blog mt-3 ${l}`,children:[e.jsx("div",{className:"card-img-top",children:e.jsx("img",{src:a.image,className:` img-fluid ${i}`,alt:a.title})}),e.jsxs("div",{className:"card-body",children:[e.jsx("h5",{className:"card-title",children:a.title}),e.jsxs("p",{className:"card-text",children:[a.description.slice(0,200),"..."]})]})]})})},a.id)})})]}),_=({setFilter:s})=>{const[t,a]=u.useState(""),c=i=>{a(i.target.value),s(i.target.value)};return e.jsxs("div",{children:[e.jsx("input",{type:"text",value:t,onChange:c,placeholder:"Buscar...",className:"blog-search"}),e.jsx(F,{className:"ms-2"})]})},C=p.lazy(()=>j(()=>import("./main.js").then(s=>s.s),["main.js","jsx-runtime-329ae681.js","index-47726f55.js","index-fdfb6bde.js","utils-4decd3ad.js","apiClient-4214bebe.js","index-4365ec00.css"])),E=()=>{const[s,t]=u.useState(""),[a,c]=u.useState(null),{data:i,isError:l,isLoading:d,fetchNextPage:m,hasNextPage:n,isFetchingNextPage:o}=L({queryKey:["blogs"],queryFn:({pageParam:r=0})=>S(r),initialPageParam:"1",staleTime:1e3*60*30,refetchOnWindowFocus:!1,refetchInterval:1e3*60*30,getNextPageParam:r=>{if(r!=null&&r.nextPage)return r.nextPage.split("=")[1]}});if(u.useEffect(()=>{if(!s)return;(async()=>{const g=await R(s);g&&c(g)})()},[s]),l)return e.jsx("div",{children:"Error"});if(d)return e.jsx(C,{});if(!i)return;const h=i.pages.flatMap(r=>(r==null?void 0:r.blogs)??[]);return e.jsx("div",{className:"blog-container pt-3",children:e.jsx(y,{children:e.jsxs("div",{className:"container-fluid",children:[e.jsx("div",{className:"blog-header  text-center",children:e.jsx("h1",{children:"MagnaBlog"})}),e.jsx("div",{className:" text-center",children:e.jsx(_,{setFilter:t})}),e.jsxs("div",{className:"blog-cards ",children:[e.jsxs("div",{className:"row",children:[e.jsx("div",{className:"col-lg-8 col-12",children:e.jsx(O,{blogs:h,search:a})}),e.jsx("div",{className:"col-md-4 col-12",children:e.jsx(B,{})})]}),e.jsx("button",{onClick:()=>m(),className:"btn btn-primary",type:"button",disabled:!n||o,style:{marginTop:"2rem"},children:o?"Loading more...":n?"Cargar más blogs":"No hay más blogs"})]})]})})})};function Z(){const{isVisible:s,ref:t}=M("100px");return e.jsx("div",{id:"LazyBlog",ref:t,children:s?e.jsx(E,{}):null})}export{Z as default};


//# sourceMappingURL=data:application/json;base64,