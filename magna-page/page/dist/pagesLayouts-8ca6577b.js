import{r as P,R as hs,_ as Me,j as z}from"./jsx-runtime-329ae681.js";import{a as ki}from"./index-fdfb6bde.js";const fs=P.createContext({transformPagePoint:t=>t,isStatic:!1,reducedMotion:"never"}),qt=P.createContext({}),Le=P.createContext(null),Zt=typeof document<"u",ji=Zt?P.useLayoutEffect:P.useEffect,ds=P.createContext({strict:!1}),Re=t=>t.replace(/([a-z])([A-Z])/g,"$1-$2").toLowerCase(),Oi="framerAppearId",ms="data-"+Re(Oi);function Ii(t,e,n,s){const{visualElement:i}=P.useContext(qt),r=P.useContext(ds),o=P.useContext(Le),a=P.useContext(fs).reducedMotion,c=P.useRef();s=s||r.renderer,!c.current&&s&&(c.current=s(t,{visualState:e,parent:i,props:n,presenceContext:o,blockInitialAnimation:o?o.initial===!1:!1,reducedMotionConfig:a}));const l=c.current;P.useInsertionEffect(()=>{l&&l.update(n,o)});const u=P.useRef(!!(n[ms]&&!window.HandoffComplete));return ji(()=>{l&&(l.render(),u.current&&l.animationState&&l.animationState.animateChanges())}),P.useEffect(()=>{l&&(l.updateFeatures(),!u.current&&l.animationState&&l.animationState.animateChanges(),u.current&&(u.current=!1,window.HandoffComplete=!0))}),l}function dt(t){return typeof t=="object"&&Object.prototype.hasOwnProperty.call(t,"current")}function Ui(t,e,n){return P.useCallback(s=>{s&&t.mount&&t.mount(s),e&&(s?e.mount(s):e.unmount()),n&&(typeof n=="function"?n(s):dt(n)&&(n.current=s))},[e])}function Dt(t){return typeof t=="string"||Array.isArray(t)}function Qt(t){return typeof t=="object"&&typeof t.start=="function"}const Ee=["animate","whileInView","whileFocus","whileHover","whileTap","whileDrag","exit"],Be=["initial",...Ee];function Jt(t){return Qt(t.animate)||Be.some(e=>Dt(t[e]))}function ps(t){return!!(Jt(t)||t.variants)}function Ni(t,e){if(Jt(t)){const{initial:n,animate:s}=t;return{initial:n===!1||Dt(n)?n:void 0,animate:Dt(s)?s:void 0}}return t.inherit!==!1?e:{}}function Wi(t){const{initial:e,animate:n}=Ni(t,P.useContext(qt));return P.useMemo(()=>({initial:e,animate:n}),[rn(e),rn(n)])}function rn(t){return Array.isArray(t)?t.join(" "):t}const an={animation:["animate","variants","whileHover","whileTap","exit","whileInView","whileFocus","whileDrag"],exit:["exit"],drag:["drag","dragControls"],focus:["whileFocus"],hover:["whileHover","onHoverStart","onHoverEnd"],tap:["whileTap","onTap","onTapStart","onTapCancel"],pan:["onPan","onPanStart","onPanSessionStart","onPanEnd"],inView:["whileInView","onViewportEnter","onViewportLeave"],layout:["layout","layoutId"]},Mt={};for(const t in an)Mt[t]={isEnabled:e=>an[t].some(n=>!!e[n])};function Gi(t){for(const e in t)Mt[e]={...Mt[e],...t[e]}}const gs=P.createContext({}),ys=P.createContext({}),Hi=Symbol.for("motionComponentSymbol");function zi({preloadedFeatures:t,createVisualElement:e,useRender:n,useVisualState:s,Component:i}){t&&Gi(t);function r(a,c){let l;const u={...P.useContext(fs),...a,layoutId:_i(a)},{isStatic:h}=u,f=Wi(a),d=s(a,h);if(!h&&Zt){f.visualElement=Ii(i,d,u,e);const m=P.useContext(ys),p=P.useContext(ds).strict;f.visualElement&&(l=f.visualElement.loadFeatures(u,p,t,m))}return P.createElement(qt.Provider,{value:f},l&&f.visualElement?P.createElement(l,{visualElement:f.visualElement,...u}):null,n(i,a,Ui(d,f.visualElement,c),d,h,f.visualElement))}const o=P.forwardRef(r);return o[Hi]=i,o}function _i({layoutId:t}){const e=P.useContext(gs).id;return e&&t!==void 0?e+"-"+t:t}function $i(t){function e(s,i={}){return zi(t(s,i))}if(typeof Proxy>"u")return e;const n=new Map;return new Proxy(e,{get:(s,i)=>(n.has(i)||n.set(i,e(i)),n.get(i))})}const Ki=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","switch","symbol","svg","text","tspan","use","view"];function Fe(t){return typeof t!="string"||t.includes("-")?!1:!!(Ki.indexOf(t)>-1||/[A-Z]/.test(t))}const Gt={};function Xi(t){Object.assign(Gt,t)}const Rt=["transformPerspective","x","y","z","translateX","translateY","translateZ","scale","scaleX","scaleY","rotate","rotateX","rotateY","rotateZ","skew","skewX","skewY"],ut=new Set(Rt);function vs(t,{layout:e,layoutId:n}){return ut.has(t)||t.startsWith("origin")||(e||n!==void 0)&&(!!Gt[t]||t==="opacity")}const O=t=>!!(t&&t.getVelocity),Yi={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"},qi=Rt.length;function Zi(t,{enableHardwareAcceleration:e=!0,allowTransformNone:n=!0},s,i){let r="";for(let o=0;o<qi;o++){const a=Rt[o];if(t[a]!==void 0){const c=Yi[a]||a;r+=`${c}(${t[a]}) `}}return e&&!t.z&&(r+="translateZ(0)"),r=r.trim(),i?r=i(t,s?"":r):n&&s&&(r="none"),r}const xs=t=>e=>typeof e=="string"&&e.startsWith(t),Ps=xs("--"),ge=xs("var(--"),Qi=/var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g,Ji=(t,e)=>e&&typeof t=="number"?e.transform(t):t,nt=(t,e,n)=>Math.min(Math.max(n,t),e),ht={test:t=>typeof t=="number",parse:parseFloat,transform:t=>t},St={...ht,transform:t=>nt(0,1,t)},jt={...ht,default:1},At=t=>Math.round(t*1e5)/1e5,te=/(-)?([\d]*\.?[\d])+/g,Ts=/(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi,to=/^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;function Et(t){return typeof t=="string"}const Bt=t=>({test:e=>Et(e)&&e.endsWith(t)&&e.split(" ").length===1,parse:parseFloat,transform:e=>`${e}${t}`}),Q=Bt("deg"),W=Bt("%"),x=Bt("px"),eo=Bt("vh"),no=Bt("vw"),cn={...W,parse:t=>W.parse(t)/100,transform:t=>W.transform(t*100)},ln={...ht,transform:Math.round},bs={borderWidth:x,borderTopWidth:x,borderRightWidth:x,borderBottomWidth:x,borderLeftWidth:x,borderRadius:x,radius:x,borderTopLeftRadius:x,borderTopRightRadius:x,borderBottomRightRadius:x,borderBottomLeftRadius:x,width:x,maxWidth:x,height:x,maxHeight:x,size:x,top:x,right:x,bottom:x,left:x,padding:x,paddingTop:x,paddingRight:x,paddingBottom:x,paddingLeft:x,margin:x,marginTop:x,marginRight:x,marginBottom:x,marginLeft:x,rotate:Q,rotateX:Q,rotateY:Q,rotateZ:Q,scale:jt,scaleX:jt,scaleY:jt,scaleZ:jt,skew:Q,skewX:Q,skewY:Q,distance:x,translateX:x,translateY:x,translateZ:x,x,y:x,z:x,perspective:x,transformPerspective:x,opacity:St,originX:cn,originY:cn,originZ:x,zIndex:ln,fillOpacity:St,strokeOpacity:St,numOctaves:ln};function ke(t,e,n,s){const{style:i,vars:r,transform:o,transformOrigin:a}=t;let c=!1,l=!1,u=!0;for(const h in e){const f=e[h];if(Ps(h)){r[h]=f;continue}const d=bs[h],m=Ji(f,d);if(ut.has(h)){if(c=!0,o[h]=m,!u)continue;f!==(d.default||0)&&(u=!1)}else h.startsWith("origin")?(l=!0,a[h]=m):i[h]=m}if(e.transform||(c||s?i.transform=Zi(t.transform,n,u,s):i.transform&&(i.transform="none")),l){const{originX:h="50%",originY:f="50%",originZ:d=0}=a;i.transformOrigin=`${h} ${f} ${d}`}}const je=()=>({style:{},transform:{},transformOrigin:{},vars:{}});function Vs(t,e,n){for(const s in e)!O(e[s])&&!vs(s,n)&&(t[s]=e[s])}function so({transformTemplate:t},e,n){return P.useMemo(()=>{const s=je();return ke(s,e,{enableHardwareAcceleration:!n},t),Object.assign({},s.vars,s.style)},[e])}function io(t,e,n){const s=t.style||{},i={};return Vs(i,s,t),Object.assign(i,so(t,e,n)),t.transformValues?t.transformValues(i):i}function oo(t,e,n){const s={},i=io(t,e,n);return t.drag&&t.dragListener!==!1&&(s.draggable=!1,i.userSelect=i.WebkitUserSelect=i.WebkitTouchCallout="none",i.touchAction=t.drag===!0?"none":`pan-${t.drag==="x"?"y":"x"}`),t.tabIndex===void 0&&(t.onTap||t.onTapStart||t.whileTap)&&(s.tabIndex=0),s.style=i,s}const ro=new Set(["animate","exit","variants","initial","style","values","variants","transition","transformTemplate","transformValues","custom","inherit","onLayoutAnimationStart","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","_dragX","_dragY","onHoverStart","onHoverEnd","onViewportEnter","onViewportLeave","ignoreStrict","viewport"]);function Ht(t){return t.startsWith("while")||t.startsWith("drag")&&t!=="draggable"||t.startsWith("layout")||t.startsWith("onTap")||t.startsWith("onPan")||ro.has(t)}let Ss=t=>!Ht(t);function ao(t){t&&(Ss=e=>e.startsWith("on")?!Ht(e):t(e))}try{ao(require("@emotion/is-prop-valid").default)}catch{}function co(t,e,n){const s={};for(const i in t)i==="values"&&typeof t.values=="object"||(Ss(i)||n===!0&&Ht(i)||!e&&!Ht(i)||t.draggable&&i.startsWith("onDrag"))&&(s[i]=t[i]);return s}function un(t,e,n){return typeof t=="string"?t:x.transform(e+n*t)}function lo(t,e,n){const s=un(e,t.x,t.width),i=un(n,t.y,t.height);return`${s} ${i}`}const uo={offset:"stroke-dashoffset",array:"stroke-dasharray"},ho={offset:"strokeDashoffset",array:"strokeDasharray"};function fo(t,e,n=1,s=0,i=!0){t.pathLength=1;const r=i?uo:ho;t[r.offset]=x.transform(-s);const o=x.transform(e),a=x.transform(n);t[r.array]=`${o} ${a}`}function Oe(t,{attrX:e,attrY:n,attrScale:s,originX:i,originY:r,pathLength:o,pathSpacing:a=1,pathOffset:c=0,...l},u,h,f){if(ke(t,l,u,f),h){t.style.viewBox&&(t.attrs.viewBox=t.style.viewBox);return}t.attrs=t.style,t.style={};const{attrs:d,style:m,dimensions:p}=t;d.transform&&(p&&(m.transform=d.transform),delete d.transform),p&&(i!==void 0||r!==void 0||m.transform)&&(m.transformOrigin=lo(p,i!==void 0?i:.5,r!==void 0?r:.5)),e!==void 0&&(d.x=e),n!==void 0&&(d.y=n),s!==void 0&&(d.scale=s),o!==void 0&&fo(d,o,a,c,!1)}const As=()=>({...je(),attrs:{}}),Ie=t=>typeof t=="string"&&t.toLowerCase()==="svg";function mo(t,e,n,s){const i=P.useMemo(()=>{const r=As();return Oe(r,e,{enableHardwareAcceleration:!1},Ie(s),t.transformTemplate),{...r.attrs,style:{...r.style}}},[e]);if(t.style){const r={};Vs(r,t.style,t),i.style={...r,...i.style}}return i}function po(t=!1){return(n,s,i,{latestValues:r},o)=>{const c=(Fe(n)?mo:oo)(s,r,o,n),u={...co(s,typeof n=="string",t),...c,ref:i},{children:h}=s,f=P.useMemo(()=>O(h)?h.get():h,[h]);return P.createElement(n,{...u,children:f})}}function Cs(t,{style:e,vars:n},s,i){Object.assign(t.style,e,i&&i.getProjectionStyles(s));for(const r in n)t.style.setProperty(r,n[r])}const ws=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength","startOffset","textLength","lengthAdjust"]);function Ds(t,e,n,s){Cs(t,e,void 0,s);for(const i in e.attrs)t.setAttribute(ws.has(i)?i:Re(i),e.attrs[i])}function Ue(t,e){const{style:n}=t,s={};for(const i in n)(O(n[i])||e.style&&O(e.style[i])||vs(i,t))&&(s[i]=n[i]);return s}function Ms(t,e){const n=Ue(t,e);for(const s in t)if(O(t[s])||O(e[s])){const i=Rt.indexOf(s)!==-1?"attr"+s.charAt(0).toUpperCase()+s.substring(1):s;n[i]=t[s]}return n}function Ne(t,e,n,s={},i={}){return typeof e=="function"&&(e=e(n!==void 0?n:t.custom,s,i)),typeof e=="string"&&(e=t.variants&&t.variants[e]),typeof e=="function"&&(e=e(n!==void 0?n:t.custom,s,i)),e}function go(t){const e=P.useRef(null);return e.current===null&&(e.current=t()),e.current}const zt=t=>Array.isArray(t),yo=t=>!!(t&&typeof t=="object"&&t.mix&&t.toValue),vo=t=>zt(t)?t[t.length-1]||0:t;function Nt(t){const e=O(t)?t.get():t;return yo(e)?e.toValue():e}function xo({scrapeMotionValuesFromProps:t,createRenderState:e,onMount:n},s,i,r){const o={latestValues:Po(s,i,r,t),renderState:e()};return n&&(o.mount=a=>n(s,a,o)),o}const Ls=t=>(e,n)=>{const s=P.useContext(qt),i=P.useContext(Le),r=()=>xo(t,e,s,i);return n?r():go(r)};function Po(t,e,n,s){const i={},r=s(t,{});for(const f in r)i[f]=Nt(r[f]);let{initial:o,animate:a}=t;const c=Jt(t),l=ps(t);e&&l&&!c&&t.inherit!==!1&&(o===void 0&&(o=e.initial),a===void 0&&(a=e.animate));let u=n?n.initial===!1:!1;u=u||o===!1;const h=u?a:o;return h&&typeof h!="boolean"&&!Qt(h)&&(Array.isArray(h)?h:[h]).forEach(d=>{const m=Ne(t,d);if(!m)return;const{transitionEnd:p,transition:v,...b}=m;for(const y in b){let g=b[y];if(Array.isArray(g)){const T=u?g.length-1:0;g=g[T]}g!==null&&(i[y]=g)}for(const y in p)i[y]=p[y]}),i}const L=t=>t;class hn{constructor(){this.order=[],this.scheduled=new Set}add(e){if(!this.scheduled.has(e))return this.scheduled.add(e),this.order.push(e),!0}remove(e){const n=this.order.indexOf(e);n!==-1&&(this.order.splice(n,1),this.scheduled.delete(e))}clear(){this.order.length=0,this.scheduled.clear()}}function To(t){let e=new hn,n=new hn,s=0,i=!1,r=!1;const o=new WeakSet,a={schedule:(c,l=!1,u=!1)=>{const h=u&&i,f=h?e:n;return l&&o.add(c),f.add(c)&&h&&i&&(s=e.order.length),c},cancel:c=>{n.remove(c),o.delete(c)},process:c=>{if(i){r=!0;return}if(i=!0,[e,n]=[n,e],n.clear(),s=e.order.length,s)for(let l=0;l<s;l++){const u=e.order[l];u(c),o.has(u)&&(a.schedule(u),t())}i=!1,r&&(r=!1,a.process(c))}};return a}const Ot=["prepare","read","update","preRender","render","postRender"],bo=40;function Vo(t,e){let n=!1,s=!0;const i={delta:0,timestamp:0,isProcessing:!1},r=Ot.reduce((h,f)=>(h[f]=To(()=>n=!0),h),{}),o=h=>r[h].process(i),a=()=>{const h=performance.now();n=!1,i.delta=s?1e3/60:Math.max(Math.min(h-i.timestamp,bo),1),i.timestamp=h,i.isProcessing=!0,Ot.forEach(o),i.isProcessing=!1,n&&e&&(s=!1,t(a))},c=()=>{n=!0,s=!0,i.isProcessing||t(a)};return{schedule:Ot.reduce((h,f)=>{const d=r[f];return h[f]=(m,p=!1,v=!1)=>(n||c(),d.schedule(m,p,v)),h},{}),cancel:h=>Ot.forEach(f=>r[f].cancel(h)),state:i,steps:r}}const{schedule:A,cancel:X,state:F,steps:ie}=Vo(typeof requestAnimationFrame<"u"?requestAnimationFrame:L,!0),So={useVisualState:Ls({scrapeMotionValuesFromProps:Ms,createRenderState:As,onMount:(t,e,{renderState:n,latestValues:s})=>{A.read(()=>{try{n.dimensions=typeof e.getBBox=="function"?e.getBBox():e.getBoundingClientRect()}catch{n.dimensions={x:0,y:0,width:0,height:0}}}),A.render(()=>{Oe(n,s,{enableHardwareAcceleration:!1},Ie(e.tagName),t.transformTemplate),Ds(e,n)})}})},Ao={useVisualState:Ls({scrapeMotionValuesFromProps:Ue,createRenderState:je})};function Co(t,{forwardMotionProps:e=!1},n,s){return{...Fe(t)?So:Ao,preloadedFeatures:n,useRender:po(e),createVisualElement:s,Component:t}}function _(t,e,n,s={passive:!0}){return t.addEventListener(e,n,s),()=>t.removeEventListener(e,n)}const Rs=t=>t.pointerType==="mouse"?typeof t.button!="number"||t.button<=0:t.isPrimary!==!1;function ee(t,e="page"){return{point:{x:t[e+"X"],y:t[e+"Y"]}}}const wo=t=>e=>Rs(e)&&t(e,ee(e));function $(t,e,n,s){return _(t,e,wo(n),s)}const Do=(t,e)=>n=>e(t(n)),tt=(...t)=>t.reduce(Do);function Es(t){let e=null;return()=>{const n=()=>{e=null};return e===null?(e=t,n):!1}}const fn=Es("dragHorizontal"),dn=Es("dragVertical");function Bs(t){let e=!1;if(t==="y")e=dn();else if(t==="x")e=fn();else{const n=fn(),s=dn();n&&s?e=()=>{n(),s()}:(n&&n(),s&&s())}return e}function Fs(){const t=Bs(!0);return t?(t(),!1):!0}class it{constructor(e){this.isMounted=!1,this.node=e}update(){}}function mn(t,e){const n="pointer"+(e?"enter":"leave"),s="onHover"+(e?"Start":"End"),i=(r,o)=>{if(r.type==="touch"||Fs())return;const a=t.getProps();t.animationState&&a.whileHover&&t.animationState.setActive("whileHover",e),a[s]&&A.update(()=>a[s](r,o))};return $(t.current,n,i,{passive:!t.getProps()[s]})}class Mo extends it{mount(){this.unmount=tt(mn(this.node,!0),mn(this.node,!1))}unmount(){}}class Lo extends it{constructor(){super(...arguments),this.isActive=!1}onFocus(){let e=!1;try{e=this.node.current.matches(":focus-visible")}catch{e=!0}!e||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!0),this.isActive=!0)}onBlur(){!this.isActive||!this.node.animationState||(this.node.animationState.setActive("whileFocus",!1),this.isActive=!1)}mount(){this.unmount=tt(_(this.node.current,"focus",()=>this.onFocus()),_(this.node.current,"blur",()=>this.onBlur()))}unmount(){}}const ks=(t,e)=>e?t===e?!0:ks(t,e.parentElement):!1;function oe(t,e){if(!e)return;const n=new PointerEvent("pointer"+t);e(n,ee(n))}class Ro extends it{constructor(){super(...arguments),this.removeStartListeners=L,this.removeEndListeners=L,this.removeAccessibleListeners=L,this.startPointerPress=(e,n)=>{if(this.removeEndListeners(),this.isPressing)return;const s=this.node.getProps(),r=$(window,"pointerup",(a,c)=>{if(!this.checkPressEnd())return;const{onTap:l,onTapCancel:u}=this.node.getProps();A.update(()=>{ks(this.node.current,a.target)?l&&l(a,c):u&&u(a,c)})},{passive:!(s.onTap||s.onPointerUp)}),o=$(window,"pointercancel",(a,c)=>this.cancelPress(a,c),{passive:!(s.onTapCancel||s.onPointerCancel)});this.removeEndListeners=tt(r,o),this.startPress(e,n)},this.startAccessiblePress=()=>{const e=r=>{if(r.key!=="Enter"||this.isPressing)return;const o=a=>{a.key!=="Enter"||!this.checkPressEnd()||oe("up",(c,l)=>{const{onTap:u}=this.node.getProps();u&&A.update(()=>u(c,l))})};this.removeEndListeners(),this.removeEndListeners=_(this.node.current,"keyup",o),oe("down",(a,c)=>{this.startPress(a,c)})},n=_(this.node.current,"keydown",e),s=()=>{this.isPressing&&oe("cancel",(r,o)=>this.cancelPress(r,o))},i=_(this.node.current,"blur",s);this.removeAccessibleListeners=tt(n,i)}}startPress(e,n){this.isPressing=!0;const{onTapStart:s,whileTap:i}=this.node.getProps();i&&this.node.animationState&&this.node.animationState.setActive("whileTap",!0),s&&A.update(()=>s(e,n))}checkPressEnd(){return this.removeEndListeners(),this.isPressing=!1,this.node.getProps().whileTap&&this.node.animationState&&this.node.animationState.setActive("whileTap",!1),!Fs()}cancelPress(e,n){if(!this.checkPressEnd())return;const{onTapCancel:s}=this.node.getProps();s&&A.update(()=>s(e,n))}mount(){const e=this.node.getProps(),n=$(this.node.current,"pointerdown",this.startPointerPress,{passive:!(e.onTapStart||e.onPointerStart)}),s=_(this.node.current,"focus",this.startAccessiblePress);this.removeStartListeners=tt(n,s)}unmount(){this.removeStartListeners(),this.removeEndListeners(),this.removeAccessibleListeners()}}const ye=new WeakMap,re=new WeakMap,Eo=t=>{const e=ye.get(t.target);e&&e(t)},Bo=t=>{t.forEach(Eo)};function Fo({root:t,...e}){const n=t||document;re.has(n)||re.set(n,{});const s=re.get(n),i=JSON.stringify(e);return s[i]||(s[i]=new IntersectionObserver(Bo,{root:t,...e})),s[i]}function ko(t,e,n){const s=Fo(e);return ye.set(t,n),s.observe(t),()=>{ye.delete(t),s.unobserve(t)}}const jo={some:0,all:1};class Oo extends it{constructor(){super(...arguments),this.hasEnteredView=!1,this.isInView=!1}startObserver(){this.unmount();const{viewport:e={}}=this.node.getProps(),{root:n,margin:s,amount:i="some",once:r}=e,o={root:n?n.current:void 0,rootMargin:s,threshold:typeof i=="number"?i:jo[i]},a=c=>{const{isIntersecting:l}=c;if(this.isInView===l||(this.isInView=l,r&&!l&&this.hasEnteredView))return;l&&(this.hasEnteredView=!0),this.node.animationState&&this.node.animationState.setActive("whileInView",l);const{onViewportEnter:u,onViewportLeave:h}=this.node.getProps(),f=l?u:h;f&&f(c)};return ko(this.node.current,o,a)}mount(){this.startObserver()}update(){if(typeof IntersectionObserver>"u")return;const{props:e,prevProps:n}=this.node;["amount","margin","root"].some(Io(e,n))&&this.startObserver()}unmount(){}}function Io({viewport:t={}},{viewport:e={}}={}){return n=>t[n]!==e[n]}const Uo={inView:{Feature:Oo},tap:{Feature:Ro},focus:{Feature:Lo},hover:{Feature:Mo}};function js(t,e){if(!Array.isArray(e))return!1;const n=e.length;if(n!==t.length)return!1;for(let s=0;s<n;s++)if(e[s]!==t[s])return!1;return!0}function No(t){const e={};return t.values.forEach((n,s)=>e[s]=n.get()),e}function Wo(t){const e={};return t.values.forEach((n,s)=>e[s]=n.getVelocity()),e}function ne(t,e,n){const s=t.getProps();return Ne(s,e,n!==void 0?n:s.custom,No(t),Wo(t))}let Go=L,We=L;const et=t=>t*1e3,K=t=>t/1e3,Ho={current:!1},Os=t=>Array.isArray(t)&&typeof t[0]=="number";function Is(t){return!!(!t||typeof t=="string"&&Us[t]||Os(t)||Array.isArray(t)&&t.every(Is))}const Vt=([t,e,n,s])=>`cubic-bezier(${t}, ${e}, ${n}, ${s})`,Us={linear:"linear",ease:"ease",easeIn:"ease-in",easeOut:"ease-out",easeInOut:"ease-in-out",circIn:Vt([0,.65,.55,1]),circOut:Vt([.55,0,1,.45]),backIn:Vt([.31,.01,.66,-.59]),backOut:Vt([.33,1.53,.69,.99])};function Ns(t){if(t)return Os(t)?Vt(t):Array.isArray(t)?t.map(Ns):Us[t]}function zo(t,e,n,{delay:s=0,duration:i,repeat:r=0,repeatType:o="loop",ease:a,times:c}={}){const l={[e]:n};c&&(l.offset=c);const u=Ns(a);return Array.isArray(u)&&(l.easing=u),t.animate(l,{delay:s,duration:i,easing:Array.isArray(u)?"linear":u,fill:"both",iterations:r+1,direction:o==="reverse"?"alternate":"normal"})}function _o(t,{repeat:e,repeatType:n="loop"}){const s=e&&n!=="loop"&&e%2===1?0:t.length-1;return t[s]}const Ws=(t,e,n)=>(((1-3*n+3*e)*t+(3*n-6*e))*t+3*e)*t,$o=1e-7,Ko=12;function Xo(t,e,n,s,i){let r,o,a=0;do o=e+(n-e)/2,r=Ws(o,s,i)-t,r>0?n=o:e=o;while(Math.abs(r)>$o&&++a<Ko);return o}function Ft(t,e,n,s){if(t===e&&n===s)return L;const i=r=>Xo(r,0,1,t,n);return r=>r===0||r===1?r:Ws(i(r),e,s)}const Yo=Ft(.42,0,1,1),qo=Ft(0,0,.58,1),Gs=Ft(.42,0,.58,1),Zo=t=>Array.isArray(t)&&typeof t[0]!="number",Hs=t=>e=>e<=.5?t(2*e)/2:(2-t(2*(1-e)))/2,zs=t=>e=>1-t(1-e),Ge=t=>1-Math.sin(Math.acos(t)),_s=zs(Ge),Qo=Hs(Ge),$s=Ft(.33,1.53,.69,.99),He=zs($s),Jo=Hs(He),tr=t=>(t*=2)<1?.5*He(t):.5*(2-Math.pow(2,-10*(t-1))),er={linear:L,easeIn:Yo,easeInOut:Gs,easeOut:qo,circIn:Ge,circInOut:Qo,circOut:_s,backIn:He,backInOut:Jo,backOut:$s,anticipate:tr},pn=t=>{if(Array.isArray(t)){We(t.length===4);const[e,n,s,i]=t;return Ft(e,n,s,i)}else if(typeof t=="string")return er[t];return t},ze=(t,e)=>n=>!!(Et(n)&&to.test(n)&&n.startsWith(t)||e&&Object.prototype.hasOwnProperty.call(n,e)),Ks=(t,e,n)=>s=>{if(!Et(s))return s;const[i,r,o,a]=s.match(te);return{[t]:parseFloat(i),[e]:parseFloat(r),[n]:parseFloat(o),alpha:a!==void 0?parseFloat(a):1}},nr=t=>nt(0,255,t),ae={...ht,transform:t=>Math.round(nr(t))},lt={test:ze("rgb","red"),parse:Ks("red","green","blue"),transform:({red:t,green:e,blue:n,alpha:s=1})=>"rgba("+ae.transform(t)+", "+ae.transform(e)+", "+ae.transform(n)+", "+At(St.transform(s))+")"};function sr(t){let e="",n="",s="",i="";return t.length>5?(e=t.substring(1,3),n=t.substring(3,5),s=t.substring(5,7),i=t.substring(7,9)):(e=t.substring(1,2),n=t.substring(2,3),s=t.substring(3,4),i=t.substring(4,5),e+=e,n+=n,s+=s,i+=i),{red:parseInt(e,16),green:parseInt(n,16),blue:parseInt(s,16),alpha:i?parseInt(i,16)/255:1}}const ve={test:ze("#"),parse:sr,transform:lt.transform},mt={test:ze("hsl","hue"),parse:Ks("hue","saturation","lightness"),transform:({hue:t,saturation:e,lightness:n,alpha:s=1})=>"hsla("+Math.round(t)+", "+W.transform(At(e))+", "+W.transform(At(n))+", "+At(St.transform(s))+")"},j={test:t=>lt.test(t)||ve.test(t)||mt.test(t),parse:t=>lt.test(t)?lt.parse(t):mt.test(t)?mt.parse(t):ve.parse(t),transform:t=>Et(t)?t:t.hasOwnProperty("red")?lt.transform(t):mt.transform(t)},D=(t,e,n)=>-n*t+n*e+t;function ce(t,e,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?t+(e-t)*6*n:n<1/2?e:n<2/3?t+(e-t)*(2/3-n)*6:t}function ir({hue:t,saturation:e,lightness:n,alpha:s}){t/=360,e/=100,n/=100;let i=0,r=0,o=0;if(!e)i=r=o=n;else{const a=n<.5?n*(1+e):n+e-n*e,c=2*n-a;i=ce(c,a,t+1/3),r=ce(c,a,t),o=ce(c,a,t-1/3)}return{red:Math.round(i*255),green:Math.round(r*255),blue:Math.round(o*255),alpha:s}}const le=(t,e,n)=>{const s=t*t;return Math.sqrt(Math.max(0,n*(e*e-s)+s))},or=[ve,lt,mt],rr=t=>or.find(e=>e.test(t));function gn(t){const e=rr(t);let n=e.parse(t);return e===mt&&(n=ir(n)),n}const Xs=(t,e)=>{const n=gn(t),s=gn(e),i={...n};return r=>(i.red=le(n.red,s.red,r),i.green=le(n.green,s.green,r),i.blue=le(n.blue,s.blue,r),i.alpha=D(n.alpha,s.alpha,r),lt.transform(i))};function ar(t){var e,n;return isNaN(t)&&Et(t)&&(((e=t.match(te))===null||e===void 0?void 0:e.length)||0)+(((n=t.match(Ts))===null||n===void 0?void 0:n.length)||0)>0}const Ys={regex:Qi,countKey:"Vars",token:"${v}",parse:L},qs={regex:Ts,countKey:"Colors",token:"${c}",parse:j.parse},Zs={regex:te,countKey:"Numbers",token:"${n}",parse:ht.parse};function ue(t,{regex:e,countKey:n,token:s,parse:i}){const r=t.tokenised.match(e);r&&(t["num"+n]=r.length,t.tokenised=t.tokenised.replace(e,s),t.values.push(...r.map(i)))}function _t(t){const e=t.toString(),n={value:e,tokenised:e,values:[],numVars:0,numColors:0,numNumbers:0};return n.value.includes("var(--")&&ue(n,Ys),ue(n,qs),ue(n,Zs),n}function Qs(t){return _t(t).values}function Js(t){const{values:e,numColors:n,numVars:s,tokenised:i}=_t(t),r=e.length;return o=>{let a=i;for(let c=0;c<r;c++)c<s?a=a.replace(Ys.token,o[c]):c<s+n?a=a.replace(qs.token,j.transform(o[c])):a=a.replace(Zs.token,At(o[c]));return a}}const cr=t=>typeof t=="number"?0:t;function lr(t){const e=Qs(t);return Js(t)(e.map(cr))}const st={test:ar,parse:Qs,createTransformer:Js,getAnimatableNone:lr},ti=(t,e)=>n=>`${n>0?e:t}`;function ei(t,e){return typeof t=="number"?n=>D(t,e,n):j.test(t)?Xs(t,e):t.startsWith("var(")?ti(t,e):si(t,e)}const ni=(t,e)=>{const n=[...t],s=n.length,i=t.map((r,o)=>ei(r,e[o]));return r=>{for(let o=0;o<s;o++)n[o]=i[o](r);return n}},ur=(t,e)=>{const n={...t,...e},s={};for(const i in n)t[i]!==void 0&&e[i]!==void 0&&(s[i]=ei(t[i],e[i]));return i=>{for(const r in s)n[r]=s[r](i);return n}},si=(t,e)=>{const n=st.createTransformer(e),s=_t(t),i=_t(e);return s.numVars===i.numVars&&s.numColors===i.numColors&&s.numNumbers>=i.numNumbers?tt(ni(s.values,i.values),n):ti(t,e)},Lt=(t,e,n)=>{const s=e-t;return s===0?1:(n-t)/s},yn=(t,e)=>n=>D(t,e,n);function hr(t){return typeof t=="number"?yn:typeof t=="string"?j.test(t)?Xs:si:Array.isArray(t)?ni:typeof t=="object"?ur:yn}function fr(t,e,n){const s=[],i=n||hr(t[0]),r=t.length-1;for(let o=0;o<r;o++){let a=i(t[o],t[o+1]);if(e){const c=Array.isArray(e)?e[o]||L:e;a=tt(c,a)}s.push(a)}return s}function ii(t,e,{clamp:n=!0,ease:s,mixer:i}={}){const r=t.length;if(We(r===e.length),r===1)return()=>e[0];t[0]>t[r-1]&&(t=[...t].reverse(),e=[...e].reverse());const o=fr(e,s,i),a=o.length,c=l=>{let u=0;if(a>1)for(;u<t.length-2&&!(l<t[u+1]);u++);const h=Lt(t[u],t[u+1],l);return o[u](h)};return n?l=>c(nt(t[0],t[r-1],l)):c}function dr(t,e){const n=t[t.length-1];for(let s=1;s<=e;s++){const i=Lt(0,e,s);t.push(D(n,1,i))}}function mr(t){const e=[0];return dr(e,t.length-1),e}function pr(t,e){return t.map(n=>n*e)}function gr(t,e){return t.map(()=>e||Gs).splice(0,t.length-1)}function $t({duration:t=300,keyframes:e,times:n,ease:s="easeInOut"}){const i=Zo(s)?s.map(pn):pn(s),r={done:!1,value:e[0]},o=pr(n&&n.length===e.length?n:mr(e),t),a=ii(o,e,{ease:Array.isArray(i)?i:gr(e,i)});return{calculatedDuration:t,next:c=>(r.value=a(c),r.done=c>=t,r)}}function oi(t,e){return e?t*(1e3/e):0}const yr=5;function ri(t,e,n){const s=Math.max(e-yr,0);return oi(n-t(s),e-s)}const he=.001,vr=.01,vn=10,xr=.05,Pr=1;function Tr({duration:t=800,bounce:e=.25,velocity:n=0,mass:s=1}){let i,r;Go(t<=et(vn));let o=1-e;o=nt(xr,Pr,o),t=nt(vr,vn,K(t)),o<1?(i=l=>{const u=l*o,h=u*t,f=u-n,d=xe(l,o),m=Math.exp(-h);return he-f/d*m},r=l=>{const h=l*o*t,f=h*n+n,d=Math.pow(o,2)*Math.pow(l,2)*t,m=Math.exp(-h),p=xe(Math.pow(l,2),o);return(-i(l)+he>0?-1:1)*((f-d)*m)/p}):(i=l=>{const u=Math.exp(-l*t),h=(l-n)*t+1;return-he+u*h},r=l=>{const u=Math.exp(-l*t),h=(n-l)*(t*t);return u*h});const a=5/t,c=Vr(i,r,a);if(t=et(t),isNaN(c))return{stiffness:100,damping:10,duration:t};{const l=Math.pow(c,2)*s;return{stiffness:l,damping:o*2*Math.sqrt(s*l),duration:t}}}const br=12;function Vr(t,e,n){let s=n;for(let i=1;i<br;i++)s=s-t(s)/e(s);return s}function xe(t,e){return t*Math.sqrt(1-e*e)}const Sr=["duration","bounce"],Ar=["stiffness","damping","mass"];function xn(t,e){return e.some(n=>t[n]!==void 0)}function Cr(t){let e={velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1,...t};if(!xn(t,Ar)&&xn(t,Sr)){const n=Tr(t);e={...e,...n,velocity:0,mass:1},e.isResolvedFromDuration=!0}return e}function ai({keyframes:t,restDelta:e,restSpeed:n,...s}){const i=t[0],r=t[t.length-1],o={done:!1,value:i},{stiffness:a,damping:c,mass:l,velocity:u,duration:h,isResolvedFromDuration:f}=Cr(s),d=u?-K(u):0,m=c/(2*Math.sqrt(a*l)),p=r-i,v=K(Math.sqrt(a/l)),b=Math.abs(p)<5;n||(n=b?.01:2),e||(e=b?.005:.5);let y;if(m<1){const g=xe(v,m);y=T=>{const V=Math.exp(-m*v*T);return r-V*((d+m*v*p)/g*Math.sin(g*T)+p*Math.cos(g*T))}}else if(m===1)y=g=>r-Math.exp(-v*g)*(p+(d+v*p)*g);else{const g=v*Math.sqrt(m*m-1);y=T=>{const V=Math.exp(-m*v*T),k=Math.min(g*T,300);return r-V*((d+m*v*p)*Math.sinh(k)+g*p*Math.cosh(k))/g}}return{calculatedDuration:f&&h||null,next:g=>{const T=y(g);if(f)o.done=g>=h;else{let V=d;g!==0&&(m<1?V=ri(y,g,T):V=0);const k=Math.abs(V)<=n,C=Math.abs(r-T)<=e;o.done=k&&C}return o.value=o.done?r:T,o}}}function Pn({keyframes:t,velocity:e=0,power:n=.8,timeConstant:s=325,bounceDamping:i=10,bounceStiffness:r=500,modifyTarget:o,min:a,max:c,restDelta:l=.5,restSpeed:u}){const h=t[0],f={done:!1,value:h},d=S=>a!==void 0&&S<a||c!==void 0&&S>c,m=S=>a===void 0?c:c===void 0||Math.abs(a-S)<Math.abs(c-S)?a:c;let p=n*e;const v=h+p,b=o===void 0?v:o(v);b!==v&&(p=b-h);const y=S=>-p*Math.exp(-S/s),g=S=>b+y(S),T=S=>{const M=y(S),G=g(S);f.done=Math.abs(M)<=l,f.value=f.done?b:G};let V,k;const C=S=>{d(f.value)&&(V=S,k=ai({keyframes:[f.value,m(f.value)],velocity:ri(g,S,f.value),damping:i,stiffness:r,restDelta:l,restSpeed:u}))};return C(0),{calculatedDuration:null,next:S=>{let M=!1;return!k&&V===void 0&&(M=!0,T(S),C(S)),V!==void 0&&S>V?k.next(S-V):(!M&&T(S),f)}}}const wr=t=>{const e=({timestamp:n})=>t(n);return{start:()=>A.update(e,!0),stop:()=>X(e),now:()=>F.isProcessing?F.timestamp:performance.now()}},Tn=2e4;function bn(t){let e=0;const n=50;let s=t.next(e);for(;!s.done&&e<Tn;)e+=n,s=t.next(e);return e>=Tn?1/0:e}const Dr={decay:Pn,inertia:Pn,tween:$t,keyframes:$t,spring:ai};function Kt({autoplay:t=!0,delay:e=0,driver:n=wr,keyframes:s,type:i="keyframes",repeat:r=0,repeatDelay:o=0,repeatType:a="loop",onPlay:c,onStop:l,onComplete:u,onUpdate:h,...f}){let d=1,m=!1,p,v;const b=()=>{v=new Promise(w=>{p=w})};b();let y;const g=Dr[i]||$t;let T;g!==$t&&typeof s[0]!="number"&&(T=ii([0,100],s,{clamp:!1}),s=[0,100]);const V=g({...f,keyframes:s});let k;a==="mirror"&&(k=g({...f,keyframes:[...s].reverse(),velocity:-(f.velocity||0)}));let C="idle",S=null,M=null,G=null;V.calculatedDuration===null&&r&&(V.calculatedDuration=bn(V));const{calculatedDuration:H}=V;let Y=1/0,q=1/0;H!==null&&(Y=H+o,q=Y*(r+1)-o);let B=0;const E=w=>{if(M===null)return;d>0&&(M=Math.min(M,w)),d<0&&(M=Math.min(w-q/d,M)),S!==null?B=S:B=Math.round(w-M)*d;const xt=B-e*(d>=0?1:-1),Je=d>=0?xt<0:xt>q;B=Math.max(xt,0),C==="finished"&&S===null&&(B=q);let tn=B,en=V;if(r){const se=B/Y;let kt=Math.floor(se),ot=se%1;!ot&&se>=1&&(ot=1),ot===1&&kt--,kt=Math.min(kt,r+1);const sn=!!(kt%2);sn&&(a==="reverse"?(ot=1-ot,o&&(ot-=o/Y)):a==="mirror"&&(en=k));let on=nt(0,1,ot);B>q&&(on=a==="reverse"&&sn?1:0),tn=on*Y}const Pt=Je?{done:!1,value:s[0]}:en.next(tn);T&&(Pt.value=T(Pt.value));let{done:nn}=Pt;!Je&&H!==null&&(nn=d>=0?B>=q:B<=0);const Fi=S===null&&(C==="finished"||C==="running"&&nn);return h&&h(Pt.value),Fi&&Bi(),Pt},Z=()=>{y&&y.stop(),y=void 0},ft=()=>{C="idle",Z(),p(),b(),M=G=null},Bi=()=>{C="finished",u&&u(),Z(),p()},Ze=()=>{if(m)return;y||(y=n(E));const w=y.now();c&&c(),S!==null?M=w-S:(!M||C==="finished")&&(M=w),C==="finished"&&b(),G=M,S=null,C="running",y.start()};t&&Ze();const Qe={then(w,xt){return v.then(w,xt)},get time(){return K(B)},set time(w){w=et(w),B=w,S!==null||!y||d===0?S=w:M=y.now()-w/d},get duration(){const w=V.calculatedDuration===null?bn(V):V.calculatedDuration;return K(w)},get speed(){return d},set speed(w){w===d||!y||(d=w,Qe.time=K(B))},get state(){return C},play:Ze,pause:()=>{C="paused",S=B},stop:()=>{m=!0,C!=="idle"&&(C="idle",l&&l(),ft())},cancel:()=>{G!==null&&E(G),ft()},complete:()=>{C="finished"},sample:w=>(M=0,E(w))};return Qe}function Mr(t){let e;return()=>(e===void 0&&(e=t()),e)}const Lr=Mr(()=>Object.hasOwnProperty.call(Element.prototype,"animate")),Rr=new Set(["opacity","clipPath","filter","transform","backgroundColor"]),It=10,Er=2e4,Br=(t,e)=>e.type==="spring"||t==="backgroundColor"||!Is(e.ease);function Fr(t,e,{onUpdate:n,onComplete:s,...i}){if(!(Lr()&&Rr.has(e)&&!i.repeatDelay&&i.repeatType!=="mirror"&&i.damping!==0&&i.type!=="inertia"))return!1;let o=!1,a,c;const l=()=>{c=new Promise(y=>{a=y})};l();let{keyframes:u,duration:h=300,ease:f,times:d}=i;if(Br(e,i)){const y=Kt({...i,repeat:0,delay:0});let g={done:!1,value:u[0]};const T=[];let V=0;for(;!g.done&&V<Er;)g=y.sample(V),T.push(g.value),V+=It;d=void 0,u=T,h=V-It,f="linear"}const m=zo(t.owner.current,e,u,{...i,duration:h,ease:f,times:d}),p=()=>m.cancel(),v=()=>{A.update(p),a(),l()};return m.onfinish=()=>{t.set(_o(u,i)),s&&s(),v()},{then(y,g){return c.then(y,g)},attachTimeline(y){return m.timeline=y,m.onfinish=null,L},get time(){return K(m.currentTime||0)},set time(y){m.currentTime=et(y)},get speed(){return m.playbackRate},set speed(y){m.playbackRate=y},get duration(){return K(h)},play:()=>{o||(m.play(),X(p))},pause:()=>m.pause(),stop:()=>{if(o=!0,m.playState==="idle")return;const{currentTime:y}=m;if(y){const g=Kt({...i,autoplay:!1});t.setWithVelocity(g.sample(y-It).value,g.sample(y).value,It)}v()},complete:()=>m.finish(),cancel:v}}function kr({keyframes:t,delay:e,onUpdate:n,onComplete:s}){const i=()=>(n&&n(t[t.length-1]),s&&s(),{time:0,speed:1,duration:0,play:L,pause:L,stop:L,then:r=>(r(),Promise.resolve()),cancel:L,complete:L});return e?Kt({keyframes:[0,1],duration:0,delay:e,onComplete:i}):i()}const jr={type:"spring",stiffness:500,damping:25,restSpeed:10},Or=t=>({type:"spring",stiffness:550,damping:t===0?2*Math.sqrt(550):30,restSpeed:10}),Ir={type:"keyframes",duration:.8},Ur={type:"keyframes",ease:[.25,.1,.35,1],duration:.3},Nr=(t,{keyframes:e})=>e.length>2?Ir:ut.has(t)?t.startsWith("scale")?Or(e[1]):jr:Ur,Pe=(t,e)=>t==="zIndex"?!1:!!(typeof e=="number"||Array.isArray(e)||typeof e=="string"&&(st.test(e)||e==="0")&&!e.startsWith("url(")),Wr=new Set(["brightness","contrast","saturate","opacity"]);function Gr(t){const[e,n]=t.slice(0,-1).split("(");if(e==="drop-shadow")return t;const[s]=n.match(te)||[];if(!s)return t;const i=n.replace(s,"");let r=Wr.has(e)?1:0;return s!==n&&(r*=100),e+"("+r+i+")"}const Hr=/([a-z-]*)\(.*?\)/g,Te={...st,getAnimatableNone:t=>{const e=t.match(Hr);return e?e.map(Gr).join(" "):t}},zr={...bs,color:j,backgroundColor:j,outlineColor:j,fill:j,stroke:j,borderColor:j,borderTopColor:j,borderRightColor:j,borderBottomColor:j,borderLeftColor:j,filter:Te,WebkitFilter:Te},_e=t=>zr[t];function ci(t,e){let n=_e(t);return n!==Te&&(n=st),n.getAnimatableNone?n.getAnimatableNone(e):void 0}const li=t=>/^0[^.\s]+$/.test(t);function _r(t){if(typeof t=="number")return t===0;if(t!==null)return t==="none"||t==="0"||li(t)}function $r(t,e,n,s){const i=Pe(e,n);let r;Array.isArray(n)?r=[...n]:r=[null,n];const o=s.from!==void 0?s.from:t.get();let a;const c=[];for(let l=0;l<r.length;l++)r[l]===null&&(r[l]=l===0?o:r[l-1]),_r(r[l])&&c.push(l),typeof r[l]=="string"&&r[l]!=="none"&&r[l]!=="0"&&(a=r[l]);if(i&&c.length&&a)for(let l=0;l<c.length;l++){const u=c[l];r[u]=ci(e,a)}return r}function Kr({when:t,delay:e,delayChildren:n,staggerChildren:s,staggerDirection:i,repeat:r,repeatType:o,repeatDelay:a,from:c,elapsed:l,...u}){return!!Object.keys(u).length}function $e(t,e){return t[e]||t.default||t}const Ke=(t,e,n,s={})=>i=>{const r=$e(s,t)||{},o=r.delay||s.delay||0;let{elapsed:a=0}=s;a=a-et(o);const c=$r(e,t,n,r),l=c[0],u=c[c.length-1],h=Pe(t,l),f=Pe(t,u);let d={keyframes:c,velocity:e.getVelocity(),ease:"easeOut",...r,delay:-a,onUpdate:m=>{e.set(m),r.onUpdate&&r.onUpdate(m)},onComplete:()=>{i(),r.onComplete&&r.onComplete()}};if(Kr(r)||(d={...d,...Nr(t,d)}),d.duration&&(d.duration=et(d.duration)),d.repeatDelay&&(d.repeatDelay=et(d.repeatDelay)),!h||!f||Ho.current||r.type===!1)return kr(d);if(!s.isHandoff&&e.owner&&e.owner.current instanceof HTMLElement&&!e.owner.getProps().onUpdate){const m=Fr(e,t,d);if(m)return m}return Kt(d)};function Xt(t){return!!(O(t)&&t.add)}const ui=t=>/^\-?\d*\.?\d+$/.test(t);function Xe(t,e){t.indexOf(e)===-1&&t.push(e)}function Ye(t,e){const n=t.indexOf(e);n>-1&&t.splice(n,1)}class qe{constructor(){this.subscriptions=[]}add(e){return Xe(this.subscriptions,e),()=>Ye(this.subscriptions,e)}notify(e,n,s){const i=this.subscriptions.length;if(i)if(i===1)this.subscriptions[0](e,n,s);else for(let r=0;r<i;r++){const o=this.subscriptions[r];o&&o(e,n,s)}}getSize(){return this.subscriptions.length}clear(){this.subscriptions.length=0}}const Xr=t=>!isNaN(parseFloat(t)),Vn={current:void 0};class Yr{constructor(e,n={}){this.version="10.16.16",this.timeDelta=0,this.lastUpdated=0,this.canTrackVelocity=!1,this.events={},this.updateAndNotify=(s,i=!0)=>{this.prev=this.current,this.current=s;const{delta:r,timestamp:o}=F;this.lastUpdated!==o&&(this.timeDelta=r,this.lastUpdated=o,A.postRender(this.scheduleVelocityCheck)),this.prev!==this.current&&this.events.change&&this.events.change.notify(this.current),this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()),i&&this.events.renderRequest&&this.events.renderRequest.notify(this.current)},this.scheduleVelocityCheck=()=>A.postRender(this.velocityCheck),this.velocityCheck=({timestamp:s})=>{s!==this.lastUpdated&&(this.prev=this.current,this.events.velocityChange&&this.events.velocityChange.notify(this.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=Xr(this.current),this.owner=n.owner}onChange(e){return this.on("change",e)}on(e,n){this.events[e]||(this.events[e]=new qe);const s=this.events[e].add(n);return e==="change"?()=>{s(),A.read(()=>{this.events.change.getSize()||this.stop()})}:s}clearListeners(){for(const e in this.events)this.events[e].clear()}attach(e,n){this.passiveEffect=e,this.stopPassiveEffect=n}set(e,n=!0){!n||!this.passiveEffect?this.updateAndNotify(e,n):this.passiveEffect(e,this.updateAndNotify)}setWithVelocity(e,n,s){this.set(n),this.prev=e,this.timeDelta=s}jump(e){this.updateAndNotify(e),this.prev=e,this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}get(){return Vn.current&&Vn.current.push(this),this.current}getPrevious(){return this.prev}getVelocity(){return this.canTrackVelocity?oi(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0}start(e){return this.stop(),new Promise(n=>{this.hasAnimated=!0,this.animation=e(n),this.events.animationStart&&this.events.animationStart.notify()}).then(()=>{this.events.animationComplete&&this.events.animationComplete.notify(),this.clearAnimation()})}stop(){this.animation&&(this.animation.stop(),this.events.animationCancel&&this.events.animationCancel.notify()),this.clearAnimation()}isAnimating(){return!!this.animation}clearAnimation(){delete this.animation}destroy(){this.clearListeners(),this.stop(),this.stopPassiveEffect&&this.stopPassiveEffect()}}function yt(t,e){return new Yr(t,e)}const hi=t=>e=>e.test(t),qr={test:t=>t==="auto",parse:t=>t},fi=[ht,x,W,Q,no,eo,qr],Tt=t=>fi.find(hi(t)),Zr=[...fi,j,st],Qr=t=>Zr.find(hi(t));function Jr(t,e,n){t.hasValue(e)?t.getValue(e).set(n):t.addValue(e,yt(n))}function ta(t,e){const n=ne(t,e);let{transitionEnd:s={},transition:i={},...r}=n?t.makeTargetAnimatable(n,!1):{};r={...r,...s};for(const o in r){const a=vo(r[o]);Jr(t,o,a)}}function ea(t,e,n){var s,i;const r=Object.keys(e).filter(a=>!t.hasValue(a)),o=r.length;if(o)for(let a=0;a<o;a++){const c=r[a],l=e[c];let u=null;Array.isArray(l)&&(u=l[0]),u===null&&(u=(i=(s=n[c])!==null&&s!==void 0?s:t.readValue(c))!==null&&i!==void 0?i:e[c]),u!=null&&(typeof u=="string"&&(ui(u)||li(u))?u=parseFloat(u):!Qr(u)&&st.test(l)&&(u=ci(c,l)),t.addValue(c,yt(u,{owner:t})),n[c]===void 0&&(n[c]=u),u!==null&&t.setBaseTarget(c,u))}}function na(t,e){return e?(e[t]||e.default||e).from:void 0}function sa(t,e,n){const s={};for(const i in t){const r=na(i,e);if(r!==void 0)s[i]=r;else{const o=n.getValue(i);o&&(s[i]=o.get())}}return s}function ia({protectedKeys:t,needsAnimating:e},n){const s=t.hasOwnProperty(n)&&e[n]!==!0;return e[n]=!1,s}function oa(t,e){const n=t.get();if(Array.isArray(e)){for(let s=0;s<e.length;s++)if(e[s]!==n)return!0}else return n!==e}function di(t,e,{delay:n=0,transitionOverride:s,type:i}={}){let{transition:r=t.getDefaultTransition(),transitionEnd:o,...a}=t.makeTargetAnimatable(e);const c=t.getValue("willChange");s&&(r=s);const l=[],u=i&&t.animationState&&t.animationState.getState()[i];for(const h in a){const f=t.getValue(h),d=a[h];if(!f||d===void 0||u&&ia(u,h))continue;const m={delay:n,elapsed:0,...$e(r||{},h)};if(window.HandoffAppearAnimations){const b=t.getProps()[ms];if(b){const y=window.HandoffAppearAnimations(b,h,f,A);y!==null&&(m.elapsed=y,m.isHandoff=!0)}}let p=!m.isHandoff&&!oa(f,d);if(m.type==="spring"&&(f.getVelocity()||m.velocity)&&(p=!1),f.animation&&(p=!1),p)continue;f.start(Ke(h,f,d,t.shouldReduceMotion&&ut.has(h)?{type:!1}:m));const v=f.animation;Xt(c)&&(c.add(h),v.then(()=>c.remove(h))),l.push(v)}return o&&Promise.all(l).then(()=>{o&&ta(t,o)}),l}function be(t,e,n={}){const s=ne(t,e,n.custom);let{transition:i=t.getDefaultTransition()||{}}=s||{};n.transitionOverride&&(i=n.transitionOverride);const r=s?()=>Promise.all(di(t,s,n)):()=>Promise.resolve(),o=t.variantChildren&&t.variantChildren.size?(c=0)=>{const{delayChildren:l=0,staggerChildren:u,staggerDirection:h}=i;return ra(t,e,l+c,u,h,n)}:()=>Promise.resolve(),{when:a}=i;if(a){const[c,l]=a==="beforeChildren"?[r,o]:[o,r];return c().then(()=>l())}else return Promise.all([r(),o(n.delay)])}function ra(t,e,n=0,s=0,i=1,r){const o=[],a=(t.variantChildren.size-1)*s,c=i===1?(l=0)=>l*s:(l=0)=>a-l*s;return Array.from(t.variantChildren).sort(aa).forEach((l,u)=>{l.notify("AnimationStart",e),o.push(be(l,e,{...r,delay:n+c(u)}).then(()=>l.notify("AnimationComplete",e)))}),Promise.all(o)}function aa(t,e){return t.sortNodePosition(e)}function ca(t,e,n={}){t.notify("AnimationStart",e);let s;if(Array.isArray(e)){const i=e.map(r=>be(t,r,n));s=Promise.all(i)}else if(typeof e=="string")s=be(t,e,n);else{const i=typeof e=="function"?ne(t,e,n.custom):e;s=Promise.all(di(t,i,n))}return s.then(()=>t.notify("AnimationComplete",e))}const la=[...Ee].reverse(),ua=Ee.length;function ha(t){return e=>Promise.all(e.map(({animation:n,options:s})=>ca(t,n,s)))}function fa(t){let e=ha(t);const n=ma();let s=!0;const i=(c,l)=>{const u=ne(t,l);if(u){const{transition:h,transitionEnd:f,...d}=u;c={...c,...d,...f}}return c};function r(c){e=c(t)}function o(c,l){const u=t.getProps(),h=t.getVariantContext(!0)||{},f=[],d=new Set;let m={},p=1/0;for(let b=0;b<ua;b++){const y=la[b],g=n[y],T=u[y]!==void 0?u[y]:h[y],V=Dt(T),k=y===l?g.isActive:null;k===!1&&(p=b);let C=T===h[y]&&T!==u[y]&&V;if(C&&s&&t.manuallyAnimateOnMount&&(C=!1),g.protectedKeys={...m},!g.isActive&&k===null||!T&&!g.prevProp||Qt(T)||typeof T=="boolean")continue;const S=da(g.prevProp,T);let M=S||y===l&&g.isActive&&!C&&V||b>p&&V;const G=Array.isArray(T)?T:[T];let H=G.reduce(i,{});k===!1&&(H={});const{prevResolvedValues:Y={}}=g,q={...Y,...H},B=E=>{M=!0,d.delete(E),g.needsAnimating[E]=!0};for(const E in q){const Z=H[E],ft=Y[E];m.hasOwnProperty(E)||(Z!==ft?zt(Z)&&zt(ft)?!js(Z,ft)||S?B(E):g.protectedKeys[E]=!0:Z!==void 0?B(E):d.add(E):Z!==void 0&&d.has(E)?B(E):g.protectedKeys[E]=!0)}g.prevProp=T,g.prevResolvedValues=H,g.isActive&&(m={...m,...H}),s&&t.blockInitialAnimation&&(M=!1),M&&!C&&f.push(...G.map(E=>({animation:E,options:{type:y,...c}})))}if(d.size){const b={};d.forEach(y=>{const g=t.getBaseTarget(y);g!==void 0&&(b[y]=g)}),f.push({animation:b})}let v=!!f.length;return s&&(u.initial===!1||u.initial===u.animate)&&!t.manuallyAnimateOnMount&&(v=!1),s=!1,v?e(f):Promise.resolve()}function a(c,l,u){var h;if(n[c].isActive===l)return Promise.resolve();(h=t.variantChildren)===null||h===void 0||h.forEach(d=>{var m;return(m=d.animationState)===null||m===void 0?void 0:m.setActive(c,l)}),n[c].isActive=l;const f=o(u,c);for(const d in n)n[d].protectedKeys={};return f}return{animateChanges:o,setActive:a,setAnimateFunction:r,getState:()=>n}}function da(t,e){return typeof e=="string"?e!==t:Array.isArray(e)?!js(e,t):!1}function rt(t=!1){return{isActive:t,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}function ma(){return{animate:rt(!0),whileInView:rt(),whileHover:rt(),whileTap:rt(),whileDrag:rt(),whileFocus:rt(),exit:rt()}}class pa extends it{constructor(e){super(e),e.animationState||(e.animationState=fa(e))}updateAnimationControlsSubscription(){const{animate:e}=this.node.getProps();this.unmount(),Qt(e)&&(this.unmount=e.subscribe(this.node))}mount(){this.updateAnimationControlsSubscription()}update(){const{animate:e}=this.node.getProps(),{animate:n}=this.node.prevProps||{};e!==n&&this.updateAnimationControlsSubscription()}unmount(){}}let ga=0;class ya extends it{constructor(){super(...arguments),this.id=ga++}update(){if(!this.node.presenceContext)return;const{isPresent:e,onExitComplete:n,custom:s}=this.node.presenceContext,{isPresent:i}=this.node.prevPresenceContext||{};if(!this.node.animationState||e===i)return;const r=this.node.animationState.setActive("exit",!e,{custom:s??this.node.getProps().custom});n&&!e&&r.then(()=>n(this.id))}mount(){const{register:e}=this.node.presenceContext||{};e&&(this.unmount=e(this.id))}unmount(){}}const va={animation:{Feature:pa},exit:{Feature:ya}},Sn=(t,e)=>Math.abs(t-e);function xa(t,e){const n=Sn(t.x,e.x),s=Sn(t.y,e.y);return Math.sqrt(n**2+s**2)}class mi{constructor(e,n,{transformPagePoint:s,contextWindow:i}={}){if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.contextWindow=window,this.updatePoint=()=>{if(!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const u=de(this.lastMoveEventInfo,this.history),h=this.startEvent!==null,f=xa(u.offset,{x:0,y:0})>=3;if(!h&&!f)return;const{point:d}=u,{timestamp:m}=F;this.history.push({...d,timestamp:m});const{onStart:p,onMove:v}=this.handlers;h||(p&&p(this.lastMoveEvent,u),this.startEvent=this.lastMoveEvent),v&&v(this.lastMoveEvent,u)},this.handlePointerMove=(u,h)=>{this.lastMoveEvent=u,this.lastMoveEventInfo=fe(h,this.transformPagePoint),A.update(this.updatePoint,!0)},this.handlePointerUp=(u,h)=>{if(this.end(),!(this.lastMoveEvent&&this.lastMoveEventInfo))return;const{onEnd:f,onSessionEnd:d}=this.handlers,m=de(u.type==="pointercancel"?this.lastMoveEventInfo:fe(h,this.transformPagePoint),this.history);this.startEvent&&f&&f(u,m),d&&d(u,m)},!Rs(e))return;this.handlers=n,this.transformPagePoint=s,this.contextWindow=i||window;const r=ee(e),o=fe(r,this.transformPagePoint),{point:a}=o,{timestamp:c}=F;this.history=[{...a,timestamp:c}];const{onSessionStart:l}=n;l&&l(e,de(o,this.history)),this.removeListeners=tt($(this.contextWindow,"pointermove",this.handlePointerMove),$(this.contextWindow,"pointerup",this.handlePointerUp),$(this.contextWindow,"pointercancel",this.handlePointerUp))}updateHandlers(e){this.handlers=e}end(){this.removeListeners&&this.removeListeners(),X(this.updatePoint)}}function fe(t,e){return e?{point:e(t.point)}:t}function An(t,e){return{x:t.x-e.x,y:t.y-e.y}}function de({point:t},e){return{point:t,delta:An(t,pi(e)),offset:An(t,Pa(e)),velocity:Ta(e,.1)}}function Pa(t){return t[0]}function pi(t){return t[t.length-1]}function Ta(t,e){if(t.length<2)return{x:0,y:0};let n=t.length-1,s=null;const i=pi(t);for(;n>=0&&(s=t[n],!(i.timestamp-s.timestamp>et(e)));)n--;if(!s)return{x:0,y:0};const r=K(i.timestamp-s.timestamp);if(r===0)return{x:0,y:0};const o={x:(i.x-s.x)/r,y:(i.y-s.y)/r};return o.x===1/0&&(o.x=0),o.y===1/0&&(o.y=0),o}function I(t){return t.max-t.min}function Ve(t,e=0,n=.01){return Math.abs(t-e)<=n}function Cn(t,e,n,s=.5){t.origin=s,t.originPoint=D(e.min,e.max,t.origin),t.scale=I(n)/I(e),(Ve(t.scale,1,1e-4)||isNaN(t.scale))&&(t.scale=1),t.translate=D(n.min,n.max,t.origin)-t.originPoint,(Ve(t.translate)||isNaN(t.translate))&&(t.translate=0)}function Ct(t,e,n,s){Cn(t.x,e.x,n.x,s?s.originX:void 0),Cn(t.y,e.y,n.y,s?s.originY:void 0)}function wn(t,e,n){t.min=n.min+e.min,t.max=t.min+I(e)}function ba(t,e,n){wn(t.x,e.x,n.x),wn(t.y,e.y,n.y)}function Dn(t,e,n){t.min=e.min-n.min,t.max=t.min+I(e)}function wt(t,e,n){Dn(t.x,e.x,n.x),Dn(t.y,e.y,n.y)}function Va(t,{min:e,max:n},s){return e!==void 0&&t<e?t=s?D(e,t,s.min):Math.max(t,e):n!==void 0&&t>n&&(t=s?D(n,t,s.max):Math.min(t,n)),t}function Mn(t,e,n){return{min:e!==void 0?t.min+e:void 0,max:n!==void 0?t.max+n-(t.max-t.min):void 0}}function Sa(t,{top:e,left:n,bottom:s,right:i}){return{x:Mn(t.x,n,i),y:Mn(t.y,e,s)}}function Ln(t,e){let n=e.min-t.min,s=e.max-t.max;return e.max-e.min<t.max-t.min&&([n,s]=[s,n]),{min:n,max:s}}function Aa(t,e){return{x:Ln(t.x,e.x),y:Ln(t.y,e.y)}}function Ca(t,e){let n=.5;const s=I(t),i=I(e);return i>s?n=Lt(e.min,e.max-s,t.min):s>i&&(n=Lt(t.min,t.max-i,e.min)),nt(0,1,n)}function wa(t,e){const n={};return e.min!==void 0&&(n.min=e.min-t.min),e.max!==void 0&&(n.max=e.max-t.min),n}const Se=.35;function Da(t=Se){return t===!1?t=0:t===!0&&(t=Se),{x:Rn(t,"left","right"),y:Rn(t,"top","bottom")}}function Rn(t,e,n){return{min:En(t,e),max:En(t,n)}}function En(t,e){return typeof t=="number"?t:t[e]||0}const Bn=()=>({translate:0,scale:1,origin:0,originPoint:0}),pt=()=>({x:Bn(),y:Bn()}),Fn=()=>({min:0,max:0}),R=()=>({x:Fn(),y:Fn()});function N(t){return[t("x"),t("y")]}function gi({top:t,left:e,right:n,bottom:s}){return{x:{min:e,max:n},y:{min:t,max:s}}}function Ma({x:t,y:e}){return{top:e.min,right:t.max,bottom:e.max,left:t.min}}function La(t,e){if(!e)return t;const n=e({x:t.left,y:t.top}),s=e({x:t.right,y:t.bottom});return{top:n.y,left:n.x,bottom:s.y,right:s.x}}function me(t){return t===void 0||t===1}function Ae({scale:t,scaleX:e,scaleY:n}){return!me(t)||!me(e)||!me(n)}function at(t){return Ae(t)||yi(t)||t.z||t.rotate||t.rotateX||t.rotateY}function yi(t){return kn(t.x)||kn(t.y)}function kn(t){return t&&t!=="0%"}function Yt(t,e,n){const s=t-n,i=e*s;return n+i}function jn(t,e,n,s,i){return i!==void 0&&(t=Yt(t,i,s)),Yt(t,n,s)+e}function Ce(t,e=0,n=1,s,i){t.min=jn(t.min,e,n,s,i),t.max=jn(t.max,e,n,s,i)}function vi(t,{x:e,y:n}){Ce(t.x,e.translate,e.scale,e.originPoint),Ce(t.y,n.translate,n.scale,n.originPoint)}function Ra(t,e,n,s=!1){const i=n.length;if(!i)return;e.x=e.y=1;let r,o;for(let a=0;a<i;a++){r=n[a],o=r.projectionDelta;const c=r.instance;c&&c.style&&c.style.display==="contents"||(s&&r.options.layoutScroll&&r.scroll&&r!==r.root&&gt(t,{x:-r.scroll.offset.x,y:-r.scroll.offset.y}),o&&(e.x*=o.x.scale,e.y*=o.y.scale,vi(t,o)),s&&at(r.latestValues)&&gt(t,r.latestValues))}e.x=On(e.x),e.y=On(e.y)}function On(t){return Number.isInteger(t)||t>1.0000000000001||t<.999999999999?t:1}function J(t,e){t.min=t.min+e,t.max=t.max+e}function In(t,e,[n,s,i]){const r=e[i]!==void 0?e[i]:.5,o=D(t.min,t.max,r);Ce(t,e[n],e[s],o,e.scale)}const Ea=["x","scaleX","originX"],Ba=["y","scaleY","originY"];function gt(t,e){In(t.x,e,Ea),In(t.y,e,Ba)}function xi(t,e){return gi(La(t.getBoundingClientRect(),e))}function Fa(t,e,n){const s=xi(t,n),{scroll:i}=e;return i&&(J(s.x,i.offset.x),J(s.y,i.offset.y)),s}const Pi=({current:t})=>t?t.ownerDocument.defaultView:null,ka=new WeakMap;class ja{constructor(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic=R(),this.visualElement=e}start(e,{snapToCursor:n=!1}={}){const{presenceContext:s}=this.visualElement;if(s&&s.isPresent===!1)return;const i=c=>{this.stopAnimation(),n&&this.snapToCursor(ee(c,"page").point)},r=(c,l)=>{const{drag:u,dragPropagation:h,onDragStart:f}=this.getProps();if(u&&!h&&(this.openGlobalLock&&this.openGlobalLock(),this.openGlobalLock=Bs(u),!this.openGlobalLock))return;this.isDragging=!0,this.currentDirection=null,this.resolveConstraints(),this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!0,this.visualElement.projection.target=void 0),N(m=>{let p=this.getAxisMotionValue(m).get()||0;if(W.test(p)){const{projection:v}=this.visualElement;if(v&&v.layout){const b=v.layout.layoutBox[m];b&&(p=I(b)*(parseFloat(p)/100))}}this.originPoint[m]=p}),f&&A.update(()=>f(c,l),!1,!0);const{animationState:d}=this.visualElement;d&&d.setActive("whileDrag",!0)},o=(c,l)=>{const{dragPropagation:u,dragDirectionLock:h,onDirectionLock:f,onDrag:d}=this.getProps();if(!u&&!this.openGlobalLock)return;const{offset:m}=l;if(h&&this.currentDirection===null){this.currentDirection=Oa(m),this.currentDirection!==null&&f&&f(this.currentDirection);return}this.updateAxis("x",l.point,m),this.updateAxis("y",l.point,m),this.visualElement.render(),d&&d(c,l)},a=(c,l)=>this.stop(c,l);this.panSession=new mi(e,{onSessionStart:i,onStart:r,onMove:o,onSessionEnd:a},{transformPagePoint:this.visualElement.getTransformPagePoint(),contextWindow:Pi(this.visualElement)})}stop(e,n){const s=this.isDragging;if(this.cancel(),!s)return;const{velocity:i}=n;this.startAnimation(i);const{onDragEnd:r}=this.getProps();r&&A.update(()=>r(e,n))}cancel(){this.isDragging=!1;const{projection:e,animationState:n}=this.visualElement;e&&(e.isAnimationBlocked=!1),this.panSession&&this.panSession.end(),this.panSession=void 0;const{dragPropagation:s}=this.getProps();!s&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),n&&n.setActive("whileDrag",!1)}updateAxis(e,n,s){const{drag:i}=this.getProps();if(!s||!Ut(e,i,this.currentDirection))return;const r=this.getAxisMotionValue(e);let o=this.originPoint[e]+s[e];this.constraints&&this.constraints[e]&&(o=Va(o,this.constraints[e],this.elastic[e])),r.set(o)}resolveConstraints(){var e;const{dragConstraints:n,dragElastic:s}=this.getProps(),i=this.visualElement.projection&&!this.visualElement.projection.layout?this.visualElement.projection.measure(!1):(e=this.visualElement.projection)===null||e===void 0?void 0:e.layout,r=this.constraints;n&&dt(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):n&&i?this.constraints=Sa(i.layoutBox,n):this.constraints=!1,this.elastic=Da(s),r!==this.constraints&&i&&this.constraints&&!this.hasMutatedConstraints&&N(o=>{this.getAxisMotionValue(o)&&(this.constraints[o]=wa(i.layoutBox[o],this.constraints[o]))})}resolveRefConstraints(){const{dragConstraints:e,onMeasureDragConstraints:n}=this.getProps();if(!e||!dt(e))return!1;const s=e.current,{projection:i}=this.visualElement;if(!i||!i.layout)return!1;const r=Fa(s,i.root,this.visualElement.getTransformPagePoint());let o=Aa(i.layout.layoutBox,r);if(n){const a=n(Ma(o));this.hasMutatedConstraints=!!a,a&&(o=gi(a))}return o}startAnimation(e){const{drag:n,dragMomentum:s,dragElastic:i,dragTransition:r,dragSnapToOrigin:o,onDragTransitionEnd:a}=this.getProps(),c=this.constraints||{},l=N(u=>{if(!Ut(u,n,this.currentDirection))return;let h=c&&c[u]||{};o&&(h={min:0,max:0});const f=i?200:1e6,d=i?40:1e7,m={type:"inertia",velocity:s?e[u]:0,bounceStiffness:f,bounceDamping:d,timeConstant:750,restDelta:1,restSpeed:10,...r,...h};return this.startAxisValueAnimation(u,m)});return Promise.all(l).then(a)}startAxisValueAnimation(e,n){const s=this.getAxisMotionValue(e);return s.start(Ke(e,s,0,n))}stopAnimation(){N(e=>this.getAxisMotionValue(e).stop())}getAxisMotionValue(e){const n="_drag"+e.toUpperCase(),s=this.visualElement.getProps(),i=s[n];return i||this.visualElement.getValue(e,(s.initial?s.initial[e]:void 0)||0)}snapToCursor(e){N(n=>{const{drag:s}=this.getProps();if(!Ut(n,s,this.currentDirection))return;const{projection:i}=this.visualElement,r=this.getAxisMotionValue(n);if(i&&i.layout){const{min:o,max:a}=i.layout.layoutBox[n];r.set(e[n]-D(o,a,.5))}})}scalePositionWithinConstraints(){if(!this.visualElement.current)return;const{drag:e,dragConstraints:n}=this.getProps(),{projection:s}=this.visualElement;if(!dt(n)||!s||!this.constraints)return;this.stopAnimation();const i={x:0,y:0};N(o=>{const a=this.getAxisMotionValue(o);if(a){const c=a.get();i[o]=Ca({min:c,max:c},this.constraints[o])}});const{transformTemplate:r}=this.visualElement.getProps();this.visualElement.current.style.transform=r?r({},""):"none",s.root&&s.root.updateScroll(),s.updateLayout(),this.resolveConstraints(),N(o=>{if(!Ut(o,e,null))return;const a=this.getAxisMotionValue(o),{min:c,max:l}=this.constraints[o];a.set(D(c,l,i[o]))})}addListeners(){if(!this.visualElement.current)return;ka.set(this.visualElement,this);const e=this.visualElement.current,n=$(e,"pointerdown",c=>{const{drag:l,dragListener:u=!0}=this.getProps();l&&u&&this.start(c)}),s=()=>{const{dragConstraints:c}=this.getProps();dt(c)&&(this.constraints=this.resolveRefConstraints())},{projection:i}=this.visualElement,r=i.addEventListener("measure",s);i&&!i.layout&&(i.root&&i.root.updateScroll(),i.updateLayout()),s();const o=_(window,"resize",()=>this.scalePositionWithinConstraints()),a=i.addEventListener("didUpdate",({delta:c,hasLayoutChanged:l})=>{this.isDragging&&l&&(N(u=>{const h=this.getAxisMotionValue(u);h&&(this.originPoint[u]+=c[u].translate,h.set(h.get()+c[u].translate))}),this.visualElement.render())});return()=>{o(),n(),r(),a&&a()}}getProps(){const e=this.visualElement.getProps(),{drag:n=!1,dragDirectionLock:s=!1,dragPropagation:i=!1,dragConstraints:r=!1,dragElastic:o=Se,dragMomentum:a=!0}=e;return{...e,drag:n,dragDirectionLock:s,dragPropagation:i,dragConstraints:r,dragElastic:o,dragMomentum:a}}}function Ut(t,e,n){return(e===!0||e===t)&&(n===null||n===t)}function Oa(t,e=10){let n=null;return Math.abs(t.y)>e?n="y":Math.abs(t.x)>e&&(n="x"),n}class Ia extends it{constructor(e){super(e),this.removeGroupControls=L,this.removeListeners=L,this.controls=new ja(e)}mount(){const{dragControls:e}=this.node.getProps();e&&(this.removeGroupControls=e.subscribe(this.controls)),this.removeListeners=this.controls.addListeners()||L}unmount(){this.removeGroupControls(),this.removeListeners()}}const Un=t=>(e,n)=>{t&&A.update(()=>t(e,n))};class Ua extends it{constructor(){super(...arguments),this.removePointerDownListener=L}onPointerDown(e){this.session=new mi(e,this.createPanHandlers(),{transformPagePoint:this.node.getTransformPagePoint(),contextWindow:Pi(this.node)})}createPanHandlers(){const{onPanSessionStart:e,onPanStart:n,onPan:s,onPanEnd:i}=this.node.getProps();return{onSessionStart:Un(e),onStart:Un(n),onMove:s,onEnd:(r,o)=>{delete this.session,i&&A.update(()=>i(r,o))}}}mount(){this.removePointerDownListener=$(this.node.current,"pointerdown",e=>this.onPointerDown(e))}update(){this.session&&this.session.updateHandlers(this.createPanHandlers())}unmount(){this.removePointerDownListener(),this.session&&this.session.end()}}function Na(){const t=P.useContext(Le);if(t===null)return[!0,null];const{isPresent:e,onExitComplete:n,register:s}=t,i=P.useId();return P.useEffect(()=>s(i),[]),!e&&n?[!1,()=>n&&n(i)]:[!0]}const Wt={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function Nn(t,e){return e.max===e.min?0:t/(e.max-e.min)*100}const bt={correct:(t,e)=>{if(!e.target)return t;if(typeof t=="string")if(x.test(t))t=parseFloat(t);else return t;const n=Nn(t,e.target.x),s=Nn(t,e.target.y);return`${n}% ${s}%`}},Wa={correct:(t,{treeScale:e,projectionDelta:n})=>{const s=t,i=st.parse(t);if(i.length>5)return s;const r=st.createTransformer(t),o=typeof i[0]!="number"?1:0,a=n.x.scale*e.x,c=n.y.scale*e.y;i[0+o]/=a,i[1+o]/=c;const l=D(a,c,.5);return typeof i[2+o]=="number"&&(i[2+o]/=l),typeof i[3+o]=="number"&&(i[3+o]/=l),r(i)}};class Ga extends hs.Component{componentDidMount(){const{visualElement:e,layoutGroup:n,switchLayoutGroup:s,layoutId:i}=this.props,{projection:r}=e;Xi(Ha),r&&(n.group&&n.group.add(r),s&&s.register&&i&&s.register(r),r.root.didUpdate(),r.addEventListener("animationComplete",()=>{this.safeToRemove()}),r.setOptions({...r.options,onExitComplete:()=>this.safeToRemove()})),Wt.hasEverUpdated=!0}getSnapshotBeforeUpdate(e){const{layoutDependency:n,visualElement:s,drag:i,isPresent:r}=this.props,o=s.projection;return o&&(o.isPresent=r,i||e.layoutDependency!==n||n===void 0?o.willUpdate():this.safeToRemove(),e.isPresent!==r&&(r?o.promote():o.relegate()||A.postRender(()=>{const a=o.getStack();(!a||!a.members.length)&&this.safeToRemove()}))),null}componentDidUpdate(){const{projection:e}=this.props.visualElement;e&&(e.root.didUpdate(),queueMicrotask(()=>{!e.currentAnimation&&e.isLead()&&this.safeToRemove()}))}componentWillUnmount(){const{visualElement:e,layoutGroup:n,switchLayoutGroup:s}=this.props,{projection:i}=e;i&&(i.scheduleCheckAfterUnmount(),n&&n.group&&n.group.remove(i),s&&s.deregister&&s.deregister(i))}safeToRemove(){const{safeToRemove:e}=this.props;e&&e()}render(){return null}}function Ti(t){const[e,n]=Na(),s=P.useContext(gs);return hs.createElement(Ga,{...t,layoutGroup:s,switchLayoutGroup:P.useContext(ys),isPresent:e,safeToRemove:n})}const Ha={borderRadius:{...bt,applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]},borderTopLeftRadius:bt,borderTopRightRadius:bt,borderBottomLeftRadius:bt,borderBottomRightRadius:bt,boxShadow:Wa},bi=["TopLeft","TopRight","BottomLeft","BottomRight"],za=bi.length,Wn=t=>typeof t=="string"?parseFloat(t):t,Gn=t=>typeof t=="number"||x.test(t);function _a(t,e,n,s,i,r){i?(t.opacity=D(0,n.opacity!==void 0?n.opacity:1,$a(s)),t.opacityExit=D(e.opacity!==void 0?e.opacity:1,0,Ka(s))):r&&(t.opacity=D(e.opacity!==void 0?e.opacity:1,n.opacity!==void 0?n.opacity:1,s));for(let o=0;o<za;o++){const a=`border${bi[o]}Radius`;let c=Hn(e,a),l=Hn(n,a);if(c===void 0&&l===void 0)continue;c||(c=0),l||(l=0),c===0||l===0||Gn(c)===Gn(l)?(t[a]=Math.max(D(Wn(c),Wn(l),s),0),(W.test(l)||W.test(c))&&(t[a]+="%")):t[a]=l}(e.rotate||n.rotate)&&(t.rotate=D(e.rotate||0,n.rotate||0,s))}function Hn(t,e){return t[e]!==void 0?t[e]:t.borderRadius}const $a=Vi(0,.5,_s),Ka=Vi(.5,.95,L);function Vi(t,e,n){return s=>s<t?0:s>e?1:n(Lt(t,e,s))}function zn(t,e){t.min=e.min,t.max=e.max}function U(t,e){zn(t.x,e.x),zn(t.y,e.y)}function _n(t,e,n,s,i){return t-=e,t=Yt(t,1/n,s),i!==void 0&&(t=Yt(t,1/i,s)),t}function Xa(t,e=0,n=1,s=.5,i,r=t,o=t){if(W.test(e)&&(e=parseFloat(e),e=D(o.min,o.max,e/100)-o.min),typeof e!="number")return;let a=D(r.min,r.max,s);t===r&&(a-=e),t.min=_n(t.min,e,n,a,i),t.max=_n(t.max,e,n,a,i)}function $n(t,e,[n,s,i],r,o){Xa(t,e[n],e[s],e[i],e.scale,r,o)}const Ya=["x","scaleX","originX"],qa=["y","scaleY","originY"];function Kn(t,e,n,s){$n(t.x,e,Ya,n?n.x:void 0,s?s.x:void 0),$n(t.y,e,qa,n?n.y:void 0,s?s.y:void 0)}function Xn(t){return t.translate===0&&t.scale===1}function Si(t){return Xn(t.x)&&Xn(t.y)}function Za(t,e){return t.x.min===e.x.min&&t.x.max===e.x.max&&t.y.min===e.y.min&&t.y.max===e.y.max}function Ai(t,e){return Math.round(t.x.min)===Math.round(e.x.min)&&Math.round(t.x.max)===Math.round(e.x.max)&&Math.round(t.y.min)===Math.round(e.y.min)&&Math.round(t.y.max)===Math.round(e.y.max)}function Yn(t){return I(t.x)/I(t.y)}class Qa{constructor(){this.members=[]}add(e){Xe(this.members,e),e.scheduleRender()}remove(e){if(Ye(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){const n=this.members[this.members.length-1];n&&this.promote(n)}}relegate(e){const n=this.members.findIndex(i=>e===i);if(n===0)return!1;let s;for(let i=n;i>=0;i--){const r=this.members[i];if(r.isPresent!==!1){s=r;break}}return s?(this.promote(s),!0):!1}promote(e,n){const s=this.lead;if(e!==s&&(this.prevLead=s,this.lead=e,e.show(),s)){s.instance&&s.scheduleRender(),e.scheduleRender(),e.resumeFrom=s,n&&(e.resumeFrom.preserveOpacity=!0),s.snapshot&&(e.snapshot=s.snapshot,e.snapshot.latestValues=s.animationValues||s.latestValues),e.root&&e.root.isUpdating&&(e.isLayoutDirty=!0);const{crossfade:i}=e.options;i===!1&&s.hide()}}exitAnimationComplete(){this.members.forEach(e=>{const{options:n,resumingFrom:s}=e;n.onExitComplete&&n.onExitComplete(),s&&s.options.onExitComplete&&s.options.onExitComplete()})}scheduleRender(){this.members.forEach(e=>{e.instance&&e.scheduleRender(!1)})}removeLeadSnapshot(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)}}function qn(t,e,n){let s="";const i=t.x.translate/e.x,r=t.y.translate/e.y;if((i||r)&&(s=`translate3d(${i}px, ${r}px, 0) `),(e.x!==1||e.y!==1)&&(s+=`scale(${1/e.x}, ${1/e.y}) `),n){const{rotate:c,rotateX:l,rotateY:u}=n;c&&(s+=`rotate(${c}deg) `),l&&(s+=`rotateX(${l}deg) `),u&&(s+=`rotateY(${u}deg) `)}const o=t.x.scale*e.x,a=t.y.scale*e.y;return(o!==1||a!==1)&&(s+=`scale(${o}, ${a})`),s||"none"}const Ja=(t,e)=>t.depth-e.depth;class tc{constructor(){this.children=[],this.isDirty=!1}add(e){Xe(this.children,e),this.isDirty=!0}remove(e){Ye(this.children,e),this.isDirty=!0}forEach(e){this.isDirty&&this.children.sort(Ja),this.isDirty=!1,this.children.forEach(e)}}function ec(t,e){const n=performance.now(),s=({timestamp:i})=>{const r=i-n;r>=e&&(X(s),t(r-e))};return A.read(s,!0),()=>X(s)}function nc(t){window.MotionDebug&&window.MotionDebug.record(t)}function sc(t){return t instanceof SVGElement&&t.tagName!=="svg"}function ic(t,e,n){const s=O(t)?t:yt(t);return s.start(Ke("",s,e,n)),s.animation}const Zn=["","X","Y","Z"],oc={visibility:"hidden"},Qn=1e3;let rc=0;const ct={type:"projectionFrame",totalNodes:0,resolvedTargetDeltas:0,recalculatedProjection:0};function Ci({attachResizeListener:t,defaultParent:e,measureScroll:n,checkIsScrollRoot:s,resetTransform:i}){return class{constructor(o={},a=e==null?void 0:e()){this.id=rc++,this.animationId=0,this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.isProjectionDirty=!1,this.isSharedProjectionDirty=!1,this.isTransformDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.hasTreeAnimated=!1,this.updateScheduled=!1,this.projectionUpdateScheduled=!1,this.checkUpdateFailed=()=>{this.isUpdating&&(this.isUpdating=!1,this.clearAllSnapshots())},this.updateProjection=()=>{this.projectionUpdateScheduled=!1,ct.totalNodes=ct.resolvedTargetDeltas=ct.recalculatedProjection=0,this.nodes.forEach(lc),this.nodes.forEach(mc),this.nodes.forEach(pc),this.nodes.forEach(uc),nc(ct)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.latestValues=o,this.root=a?a.root||a:this,this.path=a?[...a.path,a]:[],this.parent=a,this.depth=a?a.depth+1:0;for(let c=0;c<this.path.length;c++)this.path[c].shouldResetTransform=!0;this.root===this&&(this.nodes=new tc)}addEventListener(o,a){return this.eventHandlers.has(o)||this.eventHandlers.set(o,new qe),this.eventHandlers.get(o).add(a)}notifyListeners(o,...a){const c=this.eventHandlers.get(o);c&&c.notify(...a)}hasListeners(o){return this.eventHandlers.has(o)}mount(o,a=this.root.hasTreeAnimated){if(this.instance)return;this.isSVG=sc(o),this.instance=o;const{layoutId:c,layout:l,visualElement:u}=this.options;if(u&&!u.current&&u.mount(o),this.root.nodes.add(this),this.parent&&this.parent.children.add(this),a&&(l||c)&&(this.isLayoutDirty=!0),t){let h;const f=()=>this.root.updateBlockedByResize=!1;t(o,()=>{this.root.updateBlockedByResize=!0,h&&h(),h=ec(f,250),Wt.hasAnimatedSinceResize&&(Wt.hasAnimatedSinceResize=!1,this.nodes.forEach(ts))})}c&&this.root.registerSharedNode(c,this),this.options.animate!==!1&&u&&(c||l)&&this.addEventListener("didUpdate",({delta:h,hasLayoutChanged:f,hasRelativeTargetChanged:d,layout:m})=>{if(this.isTreeAnimationBlocked()){this.target=void 0,this.relativeTarget=void 0;return}const p=this.options.transition||u.getDefaultTransition()||Pc,{onLayoutAnimationStart:v,onLayoutAnimationComplete:b}=u.getProps(),y=!this.targetLayout||!Ai(this.targetLayout,m)||d,g=!f&&d;if(this.options.layoutRoot||this.resumeFrom&&this.resumeFrom.instance||g||f&&(y||!this.currentAnimation)){this.resumeFrom&&(this.resumingFrom=this.resumeFrom,this.resumingFrom.resumingFrom=void 0),this.setAnimationOrigin(h,g);const T={...$e(p,"layout"),onPlay:v,onComplete:b};(u.shouldReduceMotion||this.options.layoutRoot)&&(T.delay=0,T.type=!1),this.startAnimation(T)}else f||ts(this),this.isLead()&&this.options.onExitComplete&&this.options.onExitComplete();this.targetLayout=m})}unmount(){this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this);const o=this.getStack();o&&o.remove(this),this.parent&&this.parent.children.delete(this),this.instance=void 0,X(this.updateProjection)}blockUpdate(){this.updateManuallyBlocked=!0}unblockUpdate(){this.updateManuallyBlocked=!1}isUpdateBlocked(){return this.updateManuallyBlocked||this.updateBlockedByResize}isTreeAnimationBlocked(){return this.isAnimationBlocked||this.parent&&this.parent.isTreeAnimationBlocked()||!1}startUpdate(){this.isUpdateBlocked()||(this.isUpdating=!0,this.nodes&&this.nodes.forEach(gc),this.animationId++)}getTransformTemplate(){const{visualElement:o}=this.options;return o&&o.getProps().transformTemplate}willUpdate(o=!0){if(this.root.hasTreeAnimated=!0,this.root.isUpdateBlocked()){this.options.onExitComplete&&this.options.onExitComplete();return}if(!this.root.isUpdating&&this.root.startUpdate(),this.isLayoutDirty)return;this.isLayoutDirty=!0;for(let u=0;u<this.path.length;u++){const h=this.path[u];h.shouldResetTransform=!0,h.updateScroll("snapshot"),h.options.layoutRoot&&h.willUpdate(!1)}const{layoutId:a,layout:c}=this.options;if(a===void 0&&!c)return;const l=this.getTransformTemplate();this.prevTransformTemplateValue=l?l(this.latestValues,""):void 0,this.updateSnapshot(),o&&this.notifyListeners("willUpdate")}update(){if(this.updateScheduled=!1,this.isUpdateBlocked()){this.unblockUpdate(),this.clearAllSnapshots(),this.nodes.forEach(Jn);return}this.isUpdating||this.nodes.forEach(fc),this.isUpdating=!1,this.nodes.forEach(dc),this.nodes.forEach(ac),this.nodes.forEach(cc),this.clearAllSnapshots();const a=performance.now();F.delta=nt(0,1e3/60,a-F.timestamp),F.timestamp=a,F.isProcessing=!0,ie.update.process(F),ie.preRender.process(F),ie.render.process(F),F.isProcessing=!1}didUpdate(){this.updateScheduled||(this.updateScheduled=!0,queueMicrotask(()=>this.update()))}clearAllSnapshots(){this.nodes.forEach(hc),this.sharedNodes.forEach(yc)}scheduleUpdateProjection(){this.projectionUpdateScheduled||(this.projectionUpdateScheduled=!0,A.preRender(this.updateProjection,!1,!0))}scheduleCheckAfterUnmount(){A.postRender(()=>{this.isLayoutDirty?this.root.didUpdate():this.root.checkUpdateFailed()})}updateSnapshot(){this.snapshot||!this.instance||(this.snapshot=this.measure())}updateLayout(){if(!this.instance||(this.updateScroll(),!(this.options.alwaysMeasureLayout&&this.isLead())&&!this.isLayoutDirty))return;if(this.resumeFrom&&!this.resumeFrom.instance)for(let c=0;c<this.path.length;c++)this.path[c].updateScroll();const o=this.layout;this.layout=this.measure(!1),this.layoutCorrected=R(),this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.layoutBox);const{visualElement:a}=this.options;a&&a.notify("LayoutMeasure",this.layout.layoutBox,o?o.layoutBox:void 0)}updateScroll(o="measure"){let a=!!(this.options.layoutScroll&&this.instance);this.scroll&&this.scroll.animationId===this.root.animationId&&this.scroll.phase===o&&(a=!1),a&&(this.scroll={animationId:this.root.animationId,phase:o,isRoot:s(this.instance),offset:n(this.instance)})}resetTransform(){if(!i)return;const o=this.isLayoutDirty||this.shouldResetTransform,a=this.projectionDelta&&!Si(this.projectionDelta),c=this.getTransformTemplate(),l=c?c(this.latestValues,""):void 0,u=l!==this.prevTransformTemplateValue;o&&(a||at(this.latestValues)||u)&&(i(this.instance,l),this.shouldResetTransform=!1,this.scheduleRender())}measure(o=!0){const a=this.measurePageBox();let c=this.removeElementScroll(a);return o&&(c=this.removeTransform(c)),Tc(c),{animationId:this.root.animationId,measuredBox:a,layoutBox:c,latestValues:{},source:this.id}}measurePageBox(){const{visualElement:o}=this.options;if(!o)return R();const a=o.measureViewportBox(),{scroll:c}=this.root;return c&&(J(a.x,c.offset.x),J(a.y,c.offset.y)),a}removeElementScroll(o){const a=R();U(a,o);for(let c=0;c<this.path.length;c++){const l=this.path[c],{scroll:u,options:h}=l;if(l!==this.root&&u&&h.layoutScroll){if(u.isRoot){U(a,o);const{scroll:f}=this.root;f&&(J(a.x,-f.offset.x),J(a.y,-f.offset.y))}J(a.x,u.offset.x),J(a.y,u.offset.y)}}return a}applyTransform(o,a=!1){const c=R();U(c,o);for(let l=0;l<this.path.length;l++){const u=this.path[l];!a&&u.options.layoutScroll&&u.scroll&&u!==u.root&&gt(c,{x:-u.scroll.offset.x,y:-u.scroll.offset.y}),at(u.latestValues)&&gt(c,u.latestValues)}return at(this.latestValues)&&gt(c,this.latestValues),c}removeTransform(o){const a=R();U(a,o);for(let c=0;c<this.path.length;c++){const l=this.path[c];if(!l.instance||!at(l.latestValues))continue;Ae(l.latestValues)&&l.updateSnapshot();const u=R(),h=l.measurePageBox();U(u,h),Kn(a,l.latestValues,l.snapshot?l.snapshot.layoutBox:void 0,u)}return at(this.latestValues)&&Kn(a,this.latestValues),a}setTargetDelta(o){this.targetDelta=o,this.root.scheduleUpdateProjection(),this.isProjectionDirty=!0}setOptions(o){this.options={...this.options,...o,crossfade:o.crossfade!==void 0?o.crossfade:!0}}clearMeasurements(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1}forceRelativeParentToResolveTarget(){this.relativeParent&&this.relativeParent.resolvedRelativeTargetAt!==F.timestamp&&this.relativeParent.resolveTargetDelta(!0)}resolveTargetDelta(o=!1){var a;const c=this.getLead();this.isProjectionDirty||(this.isProjectionDirty=c.isProjectionDirty),this.isTransformDirty||(this.isTransformDirty=c.isTransformDirty),this.isSharedProjectionDirty||(this.isSharedProjectionDirty=c.isSharedProjectionDirty);const l=!!this.resumingFrom||this!==c;if(!(o||l&&this.isSharedProjectionDirty||this.isProjectionDirty||!((a=this.parent)===null||a===void 0)&&a.isProjectionDirty||this.attemptToResolveRelativeTarget))return;const{layout:h,layoutId:f}=this.options;if(!(!this.layout||!(h||f))){if(this.resolvedRelativeTargetAt=F.timestamp,!this.targetDelta&&!this.relativeTarget){const d=this.getClosestProjectingParent();d&&d.layout&&this.animationProgress!==1?(this.relativeParent=d,this.forceRelativeParentToResolveTarget(),this.relativeTarget=R(),this.relativeTargetOrigin=R(),wt(this.relativeTargetOrigin,this.layout.layoutBox,d.layout.layoutBox),U(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}if(!(!this.relativeTarget&&!this.targetDelta)){if(this.target||(this.target=R(),this.targetWithTransforms=R()),this.relativeTarget&&this.relativeTargetOrigin&&this.relativeParent&&this.relativeParent.target?(this.forceRelativeParentToResolveTarget(),ba(this.target,this.relativeTarget,this.relativeParent.target)):this.targetDelta?(this.resumingFrom?this.target=this.applyTransform(this.layout.layoutBox):U(this.target,this.layout.layoutBox),vi(this.target,this.targetDelta)):U(this.target,this.layout.layoutBox),this.attemptToResolveRelativeTarget){this.attemptToResolveRelativeTarget=!1;const d=this.getClosestProjectingParent();d&&!!d.resumingFrom==!!this.resumingFrom&&!d.options.layoutScroll&&d.target&&this.animationProgress!==1?(this.relativeParent=d,this.forceRelativeParentToResolveTarget(),this.relativeTarget=R(),this.relativeTargetOrigin=R(),wt(this.relativeTargetOrigin,this.target,d.target),U(this.relativeTarget,this.relativeTargetOrigin)):this.relativeParent=this.relativeTarget=void 0}ct.resolvedTargetDeltas++}}}getClosestProjectingParent(){if(!(!this.parent||Ae(this.parent.latestValues)||yi(this.parent.latestValues)))return this.parent.isProjecting()?this.parent:this.parent.getClosestProjectingParent()}isProjecting(){return!!((this.relativeTarget||this.targetDelta||this.options.layoutRoot)&&this.layout)}calcProjection(){var o;const a=this.getLead(),c=!!this.resumingFrom||this!==a;let l=!0;if((this.isProjectionDirty||!((o=this.parent)===null||o===void 0)&&o.isProjectionDirty)&&(l=!1),c&&(this.isSharedProjectionDirty||this.isTransformDirty)&&(l=!1),this.resolvedRelativeTargetAt===F.timestamp&&(l=!1),l)return;const{layout:u,layoutId:h}=this.options;if(this.isTreeAnimating=!!(this.parent&&this.parent.isTreeAnimating||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),!this.layout||!(u||h))return;U(this.layoutCorrected,this.layout.layoutBox);const f=this.treeScale.x,d=this.treeScale.y;Ra(this.layoutCorrected,this.treeScale,this.path,c),a.layout&&!a.target&&(this.treeScale.x!==1||this.treeScale.y!==1)&&(a.target=a.layout.layoutBox);const{target:m}=a;if(!m){this.projectionTransform&&(this.projectionDelta=pt(),this.projectionTransform="none",this.scheduleRender());return}this.projectionDelta||(this.projectionDelta=pt(),this.projectionDeltaWithTransform=pt());const p=this.projectionTransform;Ct(this.projectionDelta,this.layoutCorrected,m,this.latestValues),this.projectionTransform=qn(this.projectionDelta,this.treeScale),(this.projectionTransform!==p||this.treeScale.x!==f||this.treeScale.y!==d)&&(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",m)),ct.recalculatedProjection++}hide(){this.isVisible=!1}show(){this.isVisible=!0}scheduleRender(o=!0){if(this.options.scheduleRender&&this.options.scheduleRender(),o){const a=this.getStack();a&&a.scheduleRender()}this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)}setAnimationOrigin(o,a=!1){const c=this.snapshot,l=c?c.latestValues:{},u={...this.latestValues},h=pt();(!this.relativeParent||!this.relativeParent.options.layoutRoot)&&(this.relativeTarget=this.relativeTargetOrigin=void 0),this.attemptToResolveRelativeTarget=!a;const f=R(),d=c?c.source:void 0,m=this.layout?this.layout.source:void 0,p=d!==m,v=this.getStack(),b=!v||v.members.length<=1,y=!!(p&&!b&&this.options.crossfade===!0&&!this.path.some(xc));this.animationProgress=0;let g;this.mixTargetDelta=T=>{const V=T/1e3;es(h.x,o.x,V),es(h.y,o.y,V),this.setTargetDelta(h),this.relativeTarget&&this.relativeTargetOrigin&&this.layout&&this.relativeParent&&this.relativeParent.layout&&(wt(f,this.layout.layoutBox,this.relativeParent.layout.layoutBox),vc(this.relativeTarget,this.relativeTargetOrigin,f,V),g&&Za(this.relativeTarget,g)&&(this.isProjectionDirty=!1),g||(g=R()),U(g,this.relativeTarget)),p&&(this.animationValues=u,_a(u,l,this.latestValues,V,y,b)),this.root.scheduleUpdateProjection(),this.scheduleRender(),this.animationProgress=V},this.mixTargetDelta(this.options.layoutRoot?1e3:0)}startAnimation(o){this.notifyListeners("animationStart"),this.currentAnimation&&this.currentAnimation.stop(),this.resumingFrom&&this.resumingFrom.currentAnimation&&this.resumingFrom.currentAnimation.stop(),this.pendingAnimation&&(X(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=A.update(()=>{Wt.hasAnimatedSinceResize=!0,this.currentAnimation=ic(0,Qn,{...o,onUpdate:a=>{this.mixTargetDelta(a),o.onUpdate&&o.onUpdate(a)},onComplete:()=>{o.onComplete&&o.onComplete(),this.completeAnimation()}}),this.resumingFrom&&(this.resumingFrom.currentAnimation=this.currentAnimation),this.pendingAnimation=void 0})}completeAnimation(){this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0);const o=this.getStack();o&&o.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")}finishAnimation(){this.currentAnimation&&(this.mixTargetDelta&&this.mixTargetDelta(Qn),this.currentAnimation.stop()),this.completeAnimation()}applyTransformsToTarget(){const o=this.getLead();let{targetWithTransforms:a,target:c,layout:l,latestValues:u}=o;if(!(!a||!c||!l)){if(this!==o&&this.layout&&l&&wi(this.options.animationType,this.layout.layoutBox,l.layoutBox)){c=this.target||R();const h=I(this.layout.layoutBox.x);c.x.min=o.target.x.min,c.x.max=c.x.min+h;const f=I(this.layout.layoutBox.y);c.y.min=o.target.y.min,c.y.max=c.y.min+f}U(a,c),gt(a,u),Ct(this.projectionDeltaWithTransform,this.layoutCorrected,a,u)}}registerSharedNode(o,a){this.sharedNodes.has(o)||this.sharedNodes.set(o,new Qa),this.sharedNodes.get(o).add(a);const l=a.options.initialPromotionConfig;a.promote({transition:l?l.transition:void 0,preserveFollowOpacity:l&&l.shouldPreserveFollowOpacity?l.shouldPreserveFollowOpacity(a):void 0})}isLead(){const o=this.getStack();return o?o.lead===this:!0}getLead(){var o;const{layoutId:a}=this.options;return a?((o=this.getStack())===null||o===void 0?void 0:o.lead)||this:this}getPrevLead(){var o;const{layoutId:a}=this.options;return a?(o=this.getStack())===null||o===void 0?void 0:o.prevLead:void 0}getStack(){const{layoutId:o}=this.options;if(o)return this.root.sharedNodes.get(o)}promote({needsReset:o,transition:a,preserveFollowOpacity:c}={}){const l=this.getStack();l&&l.promote(this,c),o&&(this.projectionDelta=void 0,this.needsReset=!0),a&&this.setOptions({transition:a})}relegate(){const o=this.getStack();return o?o.relegate(this):!1}resetRotation(){const{visualElement:o}=this.options;if(!o)return;let a=!1;const{latestValues:c}=o;if((c.rotate||c.rotateX||c.rotateY||c.rotateZ)&&(a=!0),!a)return;const l={};for(let u=0;u<Zn.length;u++){const h="rotate"+Zn[u];c[h]&&(l[h]=c[h],o.setStaticValue(h,0))}o.render();for(const u in l)o.setStaticValue(u,l[u]);o.scheduleRender()}getProjectionStyles(o){var a,c;if(!this.instance||this.isSVG)return;if(!this.isVisible)return oc;const l={visibility:""},u=this.getTransformTemplate();if(this.needsReset)return this.needsReset=!1,l.opacity="",l.pointerEvents=Nt(o==null?void 0:o.pointerEvents)||"",l.transform=u?u(this.latestValues,""):"none",l;const h=this.getLead();if(!this.projectionDelta||!this.layout||!h.target){const p={};return this.options.layoutId&&(p.opacity=this.latestValues.opacity!==void 0?this.latestValues.opacity:1,p.pointerEvents=Nt(o==null?void 0:o.pointerEvents)||""),this.hasProjected&&!at(this.latestValues)&&(p.transform=u?u({},""):"none",this.hasProjected=!1),p}const f=h.animationValues||h.latestValues;this.applyTransformsToTarget(),l.transform=qn(this.projectionDeltaWithTransform,this.treeScale,f),u&&(l.transform=u(f,l.transform));const{x:d,y:m}=this.projectionDelta;l.transformOrigin=`${d.origin*100}% ${m.origin*100}% 0`,h.animationValues?l.opacity=h===this?(c=(a=f.opacity)!==null&&a!==void 0?a:this.latestValues.opacity)!==null&&c!==void 0?c:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:l.opacity=h===this?f.opacity!==void 0?f.opacity:"":f.opacityExit!==void 0?f.opacityExit:0;for(const p in Gt){if(f[p]===void 0)continue;const{correct:v,applyTo:b}=Gt[p],y=l.transform==="none"?f[p]:v(f[p],h);if(b){const g=b.length;for(let T=0;T<g;T++)l[b[T]]=y}else l[p]=y}return this.options.layoutId&&(l.pointerEvents=h===this?Nt(o==null?void 0:o.pointerEvents)||"":"none"),l}clearSnapshot(){this.resumeFrom=this.snapshot=void 0}resetTree(){this.root.nodes.forEach(o=>{var a;return(a=o.currentAnimation)===null||a===void 0?void 0:a.stop()}),this.root.nodes.forEach(Jn),this.root.sharedNodes.clear()}}}function ac(t){t.updateLayout()}function cc(t){var e;const n=((e=t.resumeFrom)===null||e===void 0?void 0:e.snapshot)||t.snapshot;if(t.isLead()&&t.layout&&n&&t.hasListeners("didUpdate")){const{layoutBox:s,measuredBox:i}=t.layout,{animationType:r}=t.options,o=n.source!==t.layout.source;r==="size"?N(h=>{const f=o?n.measuredBox[h]:n.layoutBox[h],d=I(f);f.min=s[h].min,f.max=f.min+d}):wi(r,n.layoutBox,s)&&N(h=>{const f=o?n.measuredBox[h]:n.layoutBox[h],d=I(s[h]);f.max=f.min+d,t.relativeTarget&&!t.currentAnimation&&(t.isProjectionDirty=!0,t.relativeTarget[h].max=t.relativeTarget[h].min+d)});const a=pt();Ct(a,s,n.layoutBox);const c=pt();o?Ct(c,t.applyTransform(i,!0),n.measuredBox):Ct(c,s,n.layoutBox);const l=!Si(a);let u=!1;if(!t.resumeFrom){const h=t.getClosestProjectingParent();if(h&&!h.resumeFrom){const{snapshot:f,layout:d}=h;if(f&&d){const m=R();wt(m,n.layoutBox,f.layoutBox);const p=R();wt(p,s,d.layoutBox),Ai(m,p)||(u=!0),h.options.layoutRoot&&(t.relativeTarget=p,t.relativeTargetOrigin=m,t.relativeParent=h)}}}t.notifyListeners("didUpdate",{layout:s,snapshot:n,delta:c,layoutDelta:a,hasLayoutChanged:l,hasRelativeTargetChanged:u})}else if(t.isLead()){const{onExitComplete:s}=t.options;s&&s()}t.options.transition=void 0}function lc(t){ct.totalNodes++,t.parent&&(t.isProjecting()||(t.isProjectionDirty=t.parent.isProjectionDirty),t.isSharedProjectionDirty||(t.isSharedProjectionDirty=!!(t.isProjectionDirty||t.parent.isProjectionDirty||t.parent.isSharedProjectionDirty)),t.isTransformDirty||(t.isTransformDirty=t.parent.isTransformDirty))}function uc(t){t.isProjectionDirty=t.isSharedProjectionDirty=t.isTransformDirty=!1}function hc(t){t.clearSnapshot()}function Jn(t){t.clearMeasurements()}function fc(t){t.isLayoutDirty=!1}function dc(t){const{visualElement:e}=t.options;e&&e.getProps().onBeforeLayoutMeasure&&e.notify("BeforeLayoutMeasure"),t.resetTransform()}function ts(t){t.finishAnimation(),t.targetDelta=t.relativeTarget=t.target=void 0,t.isProjectionDirty=!0}function mc(t){t.resolveTargetDelta()}function pc(t){t.calcProjection()}function gc(t){t.resetRotation()}function yc(t){t.removeLeadSnapshot()}function es(t,e,n){t.translate=D(e.translate,0,n),t.scale=D(e.scale,1,n),t.origin=e.origin,t.originPoint=e.originPoint}function ns(t,e,n,s){t.min=D(e.min,n.min,s),t.max=D(e.max,n.max,s)}function vc(t,e,n,s){ns(t.x,e.x,n.x,s),ns(t.y,e.y,n.y,s)}function xc(t){return t.animationValues&&t.animationValues.opacityExit!==void 0}const Pc={duration:.45,ease:[.4,0,.1,1]},ss=t=>typeof navigator<"u"&&navigator.userAgent.toLowerCase().includes(t),is=ss("applewebkit/")&&!ss("chrome/")?Math.round:L;function os(t){t.min=is(t.min),t.max=is(t.max)}function Tc(t){os(t.x),os(t.y)}function wi(t,e,n){return t==="position"||t==="preserve-aspect"&&!Ve(Yn(e),Yn(n),.2)}const bc=Ci({attachResizeListener:(t,e)=>_(t,"resize",e),measureScroll:()=>({x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}),checkIsScrollRoot:()=>!0}),pe={current:void 0},Di=Ci({measureScroll:t=>({x:t.scrollLeft,y:t.scrollTop}),defaultParent:()=>{if(!pe.current){const t=new bc({});t.mount(window),t.setOptions({layoutScroll:!0}),pe.current=t}return pe.current},resetTransform:(t,e)=>{t.style.transform=e!==void 0?e:"none"},checkIsScrollRoot:t=>window.getComputedStyle(t).position==="fixed"}),Vc={pan:{Feature:Ua},drag:{Feature:Ia,ProjectionNode:Di,MeasureLayout:Ti}},Sc=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Ac(t){const e=Sc.exec(t);if(!e)return[,];const[,n,s]=e;return[n,s]}function we(t,e,n=1){const[s,i]=Ac(t);if(!s)return;const r=window.getComputedStyle(e).getPropertyValue(s);if(r){const o=r.trim();return ui(o)?parseFloat(o):o}else return ge(i)?we(i,e,n+1):i}function Cc(t,{...e},n){const s=t.current;if(!(s instanceof Element))return{target:e,transitionEnd:n};n&&(n={...n}),t.values.forEach(i=>{const r=i.get();if(!ge(r))return;const o=we(r,s);o&&i.set(o)});for(const i in e){const r=e[i];if(!ge(r))continue;const o=we(r,s);o&&(e[i]=o,n||(n={}),n[i]===void 0&&(n[i]=r))}return{target:e,transitionEnd:n}}const wc=new Set(["width","height","top","left","right","bottom","x","y","translateX","translateY"]),Mi=t=>wc.has(t),Dc=t=>Object.keys(t).some(Mi),rs=t=>t===ht||t===x,as=(t,e)=>parseFloat(t.split(", ")[e]),cs=(t,e)=>(n,{transform:s})=>{if(s==="none"||!s)return 0;const i=s.match(/^matrix3d\((.+)\)$/);if(i)return as(i[1],e);{const r=s.match(/^matrix\((.+)\)$/);return r?as(r[1],t):0}},Mc=new Set(["x","y","z"]),Lc=Rt.filter(t=>!Mc.has(t));function Rc(t){const e=[];return Lc.forEach(n=>{const s=t.getValue(n);s!==void 0&&(e.push([n,s.get()]),s.set(n.startsWith("scale")?1:0))}),e.length&&t.render(),e}const vt={width:({x:t},{paddingLeft:e="0",paddingRight:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),height:({y:t},{paddingTop:e="0",paddingBottom:n="0"})=>t.max-t.min-parseFloat(e)-parseFloat(n),top:(t,{top:e})=>parseFloat(e),left:(t,{left:e})=>parseFloat(e),bottom:({y:t},{top:e})=>parseFloat(e)+(t.max-t.min),right:({x:t},{left:e})=>parseFloat(e)+(t.max-t.min),x:cs(4,13),y:cs(5,14)};vt.translateX=vt.x;vt.translateY=vt.y;const Ec=(t,e,n)=>{const s=e.measureViewportBox(),i=e.current,r=getComputedStyle(i),{display:o}=r,a={};o==="none"&&e.setStaticValue("display",t.display||"block"),n.forEach(l=>{a[l]=vt[l](s,r)}),e.render();const c=e.measureViewportBox();return n.forEach(l=>{const u=e.getValue(l);u&&u.jump(a[l]),t[l]=vt[l](c,r)}),t},Bc=(t,e,n={},s={})=>{e={...e},s={...s};const i=Object.keys(e).filter(Mi);let r=[],o=!1;const a=[];if(i.forEach(c=>{const l=t.getValue(c);if(!t.hasValue(c))return;let u=n[c],h=Tt(u);const f=e[c];let d;if(zt(f)){const m=f.length,p=f[0]===null?1:0;u=f[p],h=Tt(u);for(let v=p;v<m&&f[v]!==null;v++)d?We(Tt(f[v])===d):d=Tt(f[v])}else d=Tt(f);if(h!==d)if(rs(h)&&rs(d)){const m=l.get();typeof m=="string"&&l.set(parseFloat(m)),typeof f=="string"?e[c]=parseFloat(f):Array.isArray(f)&&d===x&&(e[c]=f.map(parseFloat))}else h!=null&&h.transform&&(d!=null&&d.transform)&&(u===0||f===0)?u===0?l.set(d.transform(u)):e[c]=h.transform(f):(o||(r=Rc(t),o=!0),a.push(c),s[c]=s[c]!==void 0?s[c]:e[c],l.jump(f))}),a.length){const c=a.indexOf("height")>=0?window.pageYOffset:null,l=Ec(e,t,a);return r.length&&r.forEach(([u,h])=>{t.getValue(u).set(h)}),t.render(),Zt&&c!==null&&window.scrollTo({top:c}),{target:l,transitionEnd:s}}else return{target:e,transitionEnd:s}};function Fc(t,e,n,s){return Dc(e)?Bc(t,e,n,s):{target:e,transitionEnd:s}}const kc=(t,e,n,s)=>{const i=Cc(t,e,s);return e=i.target,s=i.transitionEnd,Fc(t,e,n,s)},De={current:null},Li={current:!1};function jc(){if(Li.current=!0,!!Zt)if(window.matchMedia){const t=window.matchMedia("(prefers-reduced-motion)"),e=()=>De.current=t.matches;t.addListener(e),e()}else De.current=!1}function Oc(t,e,n){const{willChange:s}=e;for(const i in e){const r=e[i],o=n[i];if(O(r))t.addValue(i,r),Xt(s)&&s.add(i);else if(O(o))t.addValue(i,yt(r,{owner:t})),Xt(s)&&s.remove(i);else if(o!==r)if(t.hasValue(i)){const a=t.getValue(i);!a.hasAnimated&&a.set(r)}else{const a=t.getStaticValue(i);t.addValue(i,yt(a!==void 0?a:r,{owner:t}))}}for(const i in n)e[i]===void 0&&t.removeValue(i);return e}const ls=new WeakMap,Ri=Object.keys(Mt),Ic=Ri.length,us=["AnimationStart","AnimationComplete","Update","BeforeLayoutMeasure","LayoutMeasure","LayoutAnimationStart","LayoutAnimationComplete"],Uc=Be.length;class Nc{constructor({parent:e,props:n,presenceContext:s,reducedMotionConfig:i,visualState:r},o={}){this.current=null,this.children=new Set,this.isVariantNode=!1,this.isControllingVariants=!1,this.shouldReduceMotion=null,this.values=new Map,this.features={},this.valueSubscriptions=new Map,this.prevMotionValues={},this.events={},this.propEventSubscriptions={},this.notifyUpdate=()=>this.notify("Update",this.latestValues),this.render=()=>{this.current&&(this.triggerBuild(),this.renderInstance(this.current,this.renderState,this.props.style,this.projection))},this.scheduleRender=()=>A.render(this.render,!1,!0);const{latestValues:a,renderState:c}=r;this.latestValues=a,this.baseTarget={...a},this.initialValues=n.initial?{...a}:{},this.renderState=c,this.parent=e,this.props=n,this.presenceContext=s,this.depth=e?e.depth+1:0,this.reducedMotionConfig=i,this.options=o,this.isControllingVariants=Jt(n),this.isVariantNode=ps(n),this.isVariantNode&&(this.variantChildren=new Set),this.manuallyAnimateOnMount=!!(e&&e.current);const{willChange:l,...u}=this.scrapeMotionValuesFromProps(n,{});for(const h in u){const f=u[h];a[h]!==void 0&&O(f)&&(f.set(a[h],!1),Xt(l)&&l.add(h))}}scrapeMotionValuesFromProps(e,n){return{}}mount(e){this.current=e,ls.set(e,this),this.projection&&!this.projection.instance&&this.projection.mount(e),this.parent&&this.isVariantNode&&!this.isControllingVariants&&(this.removeFromVariantTree=this.parent.addVariantChild(this)),this.values.forEach((n,s)=>this.bindToMotionValue(s,n)),Li.current||jc(),this.shouldReduceMotion=this.reducedMotionConfig==="never"?!1:this.reducedMotionConfig==="always"?!0:De.current,this.parent&&this.parent.children.add(this),this.update(this.props,this.presenceContext)}unmount(){ls.delete(this.current),this.projection&&this.projection.unmount(),X(this.notifyUpdate),X(this.render),this.valueSubscriptions.forEach(e=>e()),this.removeFromVariantTree&&this.removeFromVariantTree(),this.parent&&this.parent.children.delete(this);for(const e in this.events)this.events[e].clear();for(const e in this.features)this.features[e].unmount();this.current=null}bindToMotionValue(e,n){const s=ut.has(e),i=n.on("change",o=>{this.latestValues[e]=o,this.props.onUpdate&&A.update(this.notifyUpdate,!1,!0),s&&this.projection&&(this.projection.isTransformDirty=!0)}),r=n.on("renderRequest",this.scheduleRender);this.valueSubscriptions.set(e,()=>{i(),r()})}sortNodePosition(e){return!this.current||!this.sortInstanceNodePosition||this.type!==e.type?0:this.sortInstanceNodePosition(this.current,e.current)}loadFeatures({children:e,...n},s,i,r){let o,a;for(let c=0;c<Ic;c++){const l=Ri[c],{isEnabled:u,Feature:h,ProjectionNode:f,MeasureLayout:d}=Mt[l];f&&(o=f),u(n)&&(!this.features[l]&&h&&(this.features[l]=new h(this)),d&&(a=d))}if(!this.projection&&o){this.projection=new o(this.latestValues,this.parent&&this.parent.projection);const{layoutId:c,layout:l,drag:u,dragConstraints:h,layoutScroll:f,layoutRoot:d}=n;this.projection.setOptions({layoutId:c,layout:l,alwaysMeasureLayout:!!u||h&&dt(h),visualElement:this,scheduleRender:()=>this.scheduleRender(),animationType:typeof l=="string"?l:"both",initialPromotionConfig:r,layoutScroll:f,layoutRoot:d})}return a}updateFeatures(){for(const e in this.features){const n=this.features[e];n.isMounted?n.update():(n.mount(),n.isMounted=!0)}}triggerBuild(){this.build(this.renderState,this.latestValues,this.options,this.props)}measureViewportBox(){return this.current?this.measureInstanceViewportBox(this.current,this.props):R()}getStaticValue(e){return this.latestValues[e]}setStaticValue(e,n){this.latestValues[e]=n}makeTargetAnimatable(e,n=!0){return this.makeTargetAnimatableFromInstance(e,this.props,n)}update(e,n){(e.transformTemplate||this.props.transformTemplate)&&this.scheduleRender(),this.prevProps=this.props,this.props=e,this.prevPresenceContext=this.presenceContext,this.presenceContext=n;for(let s=0;s<us.length;s++){const i=us[s];this.propEventSubscriptions[i]&&(this.propEventSubscriptions[i](),delete this.propEventSubscriptions[i]);const r=e["on"+i];r&&(this.propEventSubscriptions[i]=this.on(i,r))}this.prevMotionValues=Oc(this,this.scrapeMotionValuesFromProps(e,this.prevProps),this.prevMotionValues),this.handleChildMotionValue&&this.handleChildMotionValue()}getProps(){return this.props}getVariant(e){return this.props.variants?this.props.variants[e]:void 0}getDefaultTransition(){return this.props.transition}getTransformPagePoint(){return this.props.transformPagePoint}getClosestVariantNode(){return this.isVariantNode?this:this.parent?this.parent.getClosestVariantNode():void 0}getVariantContext(e=!1){if(e)return this.parent?this.parent.getVariantContext():void 0;if(!this.isControllingVariants){const s=this.parent?this.parent.getVariantContext()||{}:{};return this.props.initial!==void 0&&(s.initial=this.props.initial),s}const n={};for(let s=0;s<Uc;s++){const i=Be[s],r=this.props[i];(Dt(r)||r===!1)&&(n[i]=r)}return n}addVariantChild(e){const n=this.getClosestVariantNode();if(n)return n.variantChildren&&n.variantChildren.add(e),()=>n.variantChildren.delete(e)}addValue(e,n){n!==this.values.get(e)&&(this.removeValue(e),this.bindToMotionValue(e,n)),this.values.set(e,n),this.latestValues[e]=n.get()}removeValue(e){this.values.delete(e);const n=this.valueSubscriptions.get(e);n&&(n(),this.valueSubscriptions.delete(e)),delete this.latestValues[e],this.removeValueFromRenderState(e,this.renderState)}hasValue(e){return this.values.has(e)}getValue(e,n){if(this.props.values&&this.props.values[e])return this.props.values[e];let s=this.values.get(e);return s===void 0&&n!==void 0&&(s=yt(n,{owner:this}),this.addValue(e,s)),s}readValue(e){var n;return this.latestValues[e]!==void 0||!this.current?this.latestValues[e]:(n=this.getBaseTargetFromProps(this.props,e))!==null&&n!==void 0?n:this.readValueFromInstance(this.current,e,this.options)}setBaseTarget(e,n){this.baseTarget[e]=n}getBaseTarget(e){var n;const{initial:s}=this.props,i=typeof s=="string"||typeof s=="object"?(n=Ne(this.props,s))===null||n===void 0?void 0:n[e]:void 0;if(s&&i!==void 0)return i;const r=this.getBaseTargetFromProps(this.props,e);return r!==void 0&&!O(r)?r:this.initialValues[e]!==void 0&&i===void 0?void 0:this.baseTarget[e]}on(e,n){return this.events[e]||(this.events[e]=new qe),this.events[e].add(n)}notify(e,...n){this.events[e]&&this.events[e].notify(...n)}}class Ei extends Nc{sortInstanceNodePosition(e,n){return e.compareDocumentPosition(n)&2?1:-1}getBaseTargetFromProps(e,n){return e.style?e.style[n]:void 0}removeValueFromRenderState(e,{vars:n,style:s}){delete n[e],delete s[e]}makeTargetAnimatableFromInstance({transition:e,transitionEnd:n,...s},{transformValues:i},r){let o=sa(s,e||{},this);if(i&&(n&&(n=i(n)),s&&(s=i(s)),o&&(o=i(o))),r){ea(this,s,o);const a=kc(this,s,o,n);n=a.transitionEnd,s=a.target}return{transition:e,transitionEnd:n,...s}}}function Wc(t){return window.getComputedStyle(t)}class Gc extends Ei{readValueFromInstance(e,n){if(ut.has(n)){const s=_e(n);return s&&s.default||0}else{const s=Wc(e),i=(Ps(n)?s.getPropertyValue(n):s[n])||0;return typeof i=="string"?i.trim():i}}measureInstanceViewportBox(e,{transformPagePoint:n}){return xi(e,n)}build(e,n,s,i){ke(e,n,s,i.transformTemplate)}scrapeMotionValuesFromProps(e,n){return Ue(e,n)}handleChildMotionValue(){this.childSubscription&&(this.childSubscription(),delete this.childSubscription);const{children:e}=this.props;O(e)&&(this.childSubscription=e.on("change",n=>{this.current&&(this.current.textContent=`${n}`)}))}renderInstance(e,n,s,i){Cs(e,n,s,i)}}class Hc extends Ei{constructor(){super(...arguments),this.isSVGTag=!1}getBaseTargetFromProps(e,n){return e[n]}readValueFromInstance(e,n){if(ut.has(n)){const s=_e(n);return s&&s.default||0}return n=ws.has(n)?n:Re(n),e.getAttribute(n)}measureInstanceViewportBox(){return R()}scrapeMotionValuesFromProps(e,n){return Ms(e,n)}build(e,n,s,i){Oe(e,n,s,this.isSVGTag,i.transformTemplate)}renderInstance(e,n,s,i){Ds(e,n,s,i)}mount(e){this.isSVGTag=Ie(e.tagName),super.mount(e)}}const zc=(t,e)=>Fe(t)?new Hc(e,{enableHardwareAcceleration:!1}):new Gc(e,{enableHardwareAcceleration:!0}),_c={layout:{ProjectionNode:Di,MeasureLayout:Ti}},$c={...va,...Uo,...Vc,..._c},Kc=$i((t,e)=>Co(t,e,$c,zc)),Xc=P.lazy(()=>Me(()=>import("./navBar-d540afc2.js"),["navBar-d540afc2.js","jsx-runtime-329ae681.js","logoOriginal-f292af29.js","ThemeProvider-0f50096d.js","index-47726f55.js","index-fdfb6bde.js","navBar-6c8bf196.css"])),Yc=P.lazy(()=>Me(()=>import("./floawhatsapp-6f52b278.js"),["floawhatsapp-6f52b278.js","jsx-runtime-329ae681.js"])),qc=P.lazy(()=>Me(()=>import("./footer1-07962d7a.js"),["footer1-07962d7a.js","jsx-runtime-329ae681.js","index.esm-f65753b7.js","iconBase-362add62.js","index.esm-8ae24eaa.js","index-47726f55.js","index-fdfb6bde.js","useLazyload-0697bf1e.js","footer1-f76701bf.css"])),tl=({children:t})=>{const e=P.useRef(null),n=ki();P.useEffect(()=>{e.current&&e.current.scrollIntoView({behavior:"smooth"})},[n]);const s={initial:{opacity:0},in:{opacity:1},out:{opacity:0}};return z.jsxs(Kc.div,{initial:"initial",animate:"in",exit:"out",variants:s,transition:{type:"tween",duration:.7},children:[z.jsx(P.Suspense,{fallback:z.jsx("div",{children:"Cargando..."}),children:z.jsx("div",{ref:e,children:z.jsx(Xc,{})})}),t,z.jsxs(P.Suspense,{fallback:z.jsx("div",{children:"Cargando..."}),children:[z.jsx(qc,{}),z.jsx(Yc,{})]})]})};export{gs as L,fs as M,tl as P,Vn as a,go as b,X as c,mr as d,F as e,A as f,yt as g,O as h,ii as i,Kt as j,K as k,We as l,Kc as m,Le as n,Lt as p,ji as u,oi as v,Go as w};


//# sourceMappingURL=data:application/json;base64,