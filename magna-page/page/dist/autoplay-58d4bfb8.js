import{r as G,R as $}from"./jsx-runtime-6ef19e59.js";function ve(t){return t!==null&&typeof t=="object"&&"constructor"in t&&t.constructor===Object}function he(t,e){t===void 0&&(t={}),e===void 0&&(e={}),Object.keys(e).forEach(i=>{typeof t[i]>"u"?t[i]=e[i]:ve(e[i])&&ve(t[i])&&Object.keys(e[i]).length>0&&he(t[i],e[i])})}const Te={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function k(){const t=typeof document<"u"?document:{};return he(t,Te),t}const $e={document:Te,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(t){return typeof setTimeout>"u"?(t(),null):setTimeout(t,0)},cancelAnimationFrame(t){typeof setTimeout>"u"||clearTimeout(t)}};function V(){const t=typeof window<"u"?window:{};return he(t,$e),t}function Ne(t){return t===void 0&&(t=""),t.trim().split(" ").filter(e=>!!e.trim())}function Ve(t){const e=t;Object.keys(e).forEach(i=>{try{e[i]=null}catch{}try{delete e[i]}catch{}})}function ue(t,e){return e===void 0&&(e=0),setTimeout(t,e)}function ee(){return Date.now()}function Fe(t){const e=V();let i;return e.getComputedStyle&&(i=e.getComputedStyle(t,null)),!i&&t.currentStyle&&(i=t.currentStyle),i||(i=t.style),i}function Re(t,e){e===void 0&&(e="x");const i=V();let s,n,r;const l=Fe(t);return i.WebKitCSSMatrix?(n=l.transform||l.webkitTransform,n.split(",").length>6&&(n=n.split(", ").map(o=>o.replace(",",".")).join(", ")),r=new i.WebKitCSSMatrix(n==="none"?"":n)):(r=l.MozTransform||l.OTransform||l.MsTransform||l.msTransform||l.transform||l.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=r.toString().split(",")),e==="x"&&(i.WebKitCSSMatrix?n=r.m41:s.length===16?n=parseFloat(s[12]):n=parseFloat(s[4])),e==="y"&&(i.WebKitCSSMatrix?n=r.m42:s.length===16?n=parseFloat(s[13]):n=parseFloat(s[5])),n||0}function Z(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"}function ke(t){return typeof window<"u"&&typeof window.HTMLElement<"u"?t instanceof HTMLElement:t&&(t.nodeType===1||t.nodeType===11)}function N(){const t=Object(arguments.length<=0?void 0:arguments[0]),e=["__proto__","constructor","prototype"];for(let i=1;i<arguments.length;i+=1){const s=i<0||arguments.length<=i?void 0:arguments[i];if(s!=null&&!ke(s)){const n=Object.keys(Object(s)).filter(r=>e.indexOf(r)<0);for(let r=0,l=n.length;r<l;r+=1){const o=n[r],a=Object.getOwnPropertyDescriptor(s,o);a!==void 0&&a.enumerable&&(Z(t[o])&&Z(s[o])?s[o].__swiper__?t[o]=s[o]:N(t[o],s[o]):!Z(t[o])&&Z(s[o])?(t[o]={},s[o].__swiper__?t[o]=s[o]:N(t[o],s[o])):t[o]=s[o])}}}return t}function J(t,e,i){t.style.setProperty(e,i)}function xe(t){let{swiper:e,targetPosition:i,side:s}=t;const n=V(),r=-e.translate;let l=null,o;const a=e.params.speed;e.wrapperEl.style.scrollSnapType="none",n.cancelAnimationFrame(e.cssModeFrameID);const f=i>r?"next":"prev",d=(h,g)=>f==="next"&&h>=g||f==="prev"&&h<=g,p=()=>{o=new Date().getTime(),l===null&&(l=o);const h=Math.max(Math.min((o-l)/a,1),0),g=.5-Math.cos(h*Math.PI)/2;let S=r+g*(i-r);if(d(S,i)&&(S=i),e.wrapperEl.scrollTo({[s]:S}),d(S,i)){e.wrapperEl.style.overflow="hidden",e.wrapperEl.style.scrollSnapType="",setTimeout(()=>{e.wrapperEl.style.overflow="",e.wrapperEl.scrollTo({[s]:S})}),n.cancelAnimationFrame(e.cssModeFrameID);return}e.cssModeFrameID=n.requestAnimationFrame(p)};p()}function pi(t){return t.querySelector(".swiper-slide-transform")||t.shadowRoot&&t.shadowRoot.querySelector(".swiper-slide-transform")||t}function F(t,e){return e===void 0&&(e=""),[...t.children].filter(i=>i.matches(e))}function te(t){try{console.warn(t);return}catch{}}function ie(t,e){e===void 0&&(e=[]);const i=document.createElement(t);return i.classList.add(...Array.isArray(e)?e:Ne(e)),i}function He(t,e){const i=[];for(;t.previousElementSibling;){const s=t.previousElementSibling;e?s.matches(e)&&i.push(s):i.push(s),t=s}return i}function je(t,e){const i=[];for(;t.nextElementSibling;){const s=t.nextElementSibling;e?s.matches(e)&&i.push(s):i.push(s),t=s}return i}function H(t,e){return V().getComputedStyle(t,null).getPropertyValue(e)}function se(t){let e=t,i;if(e){for(i=0;(e=e.previousSibling)!==null;)e.nodeType===1&&(i+=1);return i}}function Ee(t,e){const i=[];let s=t.parentElement;for(;s;)e?s.matches(e)&&i.push(s):i.push(s),s=s.parentElement;return i}function mi(t,e){function i(s){s.target===t&&(e.call(t,s),t.removeEventListener("transitionend",i))}e&&t.addEventListener("transitionend",i)}function fe(t,e,i){const s=V();return i?t[e==="width"?"offsetWidth":"offsetHeight"]+parseFloat(s.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-right":"margin-top"))+parseFloat(s.getComputedStyle(t,null).getPropertyValue(e==="width"?"margin-left":"margin-bottom")):t.offsetWidth}let ne;function We(){const t=V(),e=k();return{smoothScroll:e.documentElement&&e.documentElement.style&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in t||t.DocumentTouch&&e instanceof t.DocumentTouch)}}function Ce(){return ne||(ne=We()),ne}let ae;function qe(t){let{userAgent:e}=t===void 0?{}:t;const i=Ce(),s=V(),n=s.navigator.platform,r=e||s.navigator.userAgent,l={ios:!1,android:!1},o=s.screen.width,a=s.screen.height,f=r.match(/(Android);?[\s\/]+([\d.]+)?/);let d=r.match(/(iPad).*OS\s([\d_]+)/);const p=r.match(/(iPod)(.*OS\s([\d_]+))?/),h=!d&&r.match(/(iPhone\sOS|iOS)\s([\d_]+)/),g=n==="Win32";let S=n==="MacIntel";const v=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"];return!d&&S&&i.touch&&v.indexOf(`${o}x${a}`)>=0&&(d=r.match(/(Version)\/([\d.]+)/),d||(d=[0,1,"13_0_0"]),S=!1),f&&!g&&(l.os="android",l.android=!0),(d||h||p)&&(l.os="ios",l.ios=!0),l}function Ye(t){return t===void 0&&(t={}),ae||(ae=qe(t)),ae}let le;function Xe(){const t=V();let e=!1;function i(){const s=t.navigator.userAgent.toLowerCase();return s.indexOf("safari")>=0&&s.indexOf("chrome")<0&&s.indexOf("android")<0}if(i()){const s=String(t.navigator.userAgent);if(s.includes("Version/")){const[n,r]=s.split("Version/")[1].split(" ")[0].split(".").map(l=>Number(l));e=n<16||n===16&&r<2}}return{isSafari:e||i(),needPerspectiveFix:e,isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}function Ue(){return le||(le=Xe()),le}function Ke(t){let{swiper:e,on:i,emit:s}=t;const n=V();let r=null,l=null;const o=()=>{!e||e.destroyed||!e.initialized||(s("beforeResize"),s("resize"))},a=()=>{!e||e.destroyed||!e.initialized||(r=new ResizeObserver(p=>{l=n.requestAnimationFrame(()=>{const{width:h,height:g}=e;let S=h,v=g;p.forEach(b=>{let{contentBoxSize:m,contentRect:c,target:u}=b;u&&u!==e.el||(S=c?c.width:(m[0]||m).inlineSize,v=c?c.height:(m[0]||m).blockSize)}),(S!==h||v!==g)&&o()})}),r.observe(e.el))},f=()=>{l&&n.cancelAnimationFrame(l),r&&r.unobserve&&e.el&&(r.unobserve(e.el),r=null)},d=()=>{!e||e.destroyed||!e.initialized||s("orientationchange")};i("init",()=>{if(e.params.resizeObserver&&typeof n.ResizeObserver<"u"){a();return}n.addEventListener("resize",o),n.addEventListener("orientationchange",d)}),i("destroy",()=>{f(),n.removeEventListener("resize",o),n.removeEventListener("orientationchange",d)})}function Ze(t){let{swiper:e,extendParams:i,on:s,emit:n}=t;const r=[],l=V(),o=function(d,p){p===void 0&&(p={});const h=l.MutationObserver||l.WebkitMutationObserver,g=new h(S=>{if(e.__preventObserver__)return;if(S.length===1){n("observerUpdate",S[0]);return}const v=function(){n("observerUpdate",S[0])};l.requestAnimationFrame?l.requestAnimationFrame(v):l.setTimeout(v,0)});g.observe(d,{attributes:typeof p.attributes>"u"?!0:p.attributes,childList:typeof p.childList>"u"?!0:p.childList,characterData:typeof p.characterData>"u"?!0:p.characterData}),r.push(g)},a=()=>{if(e.params.observer){if(e.params.observeParents){const d=Ee(e.hostEl);for(let p=0;p<d.length;p+=1)o(d[p])}o(e.hostEl,{childList:e.params.observeSlideChildren}),o(e.wrapperEl,{attributes:!1})}},f=()=>{r.forEach(d=>{d.disconnect()}),r.splice(0,r.length)};i({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",a),s("destroy",f)}var Je={on(t,e,i){const s=this;if(!s.eventsListeners||s.destroyed||typeof e!="function")return s;const n=i?"unshift":"push";return t.split(" ").forEach(r=>{s.eventsListeners[r]||(s.eventsListeners[r]=[]),s.eventsListeners[r][n](e)}),s},once(t,e,i){const s=this;if(!s.eventsListeners||s.destroyed||typeof e!="function")return s;function n(){s.off(t,n),n.__emitterProxy&&delete n.__emitterProxy;for(var r=arguments.length,l=new Array(r),o=0;o<r;o++)l[o]=arguments[o];e.apply(s,l)}return n.__emitterProxy=e,s.on(t,n,i)},onAny(t,e){const i=this;if(!i.eventsListeners||i.destroyed||typeof t!="function")return i;const s=e?"unshift":"push";return i.eventsAnyListeners.indexOf(t)<0&&i.eventsAnyListeners[s](t),i},offAny(t){const e=this;if(!e.eventsListeners||e.destroyed||!e.eventsAnyListeners)return e;const i=e.eventsAnyListeners.indexOf(t);return i>=0&&e.eventsAnyListeners.splice(i,1),e},off(t,e){const i=this;return!i.eventsListeners||i.destroyed||!i.eventsListeners||t.split(" ").forEach(s=>{typeof e>"u"?i.eventsListeners[s]=[]:i.eventsListeners[s]&&i.eventsListeners[s].forEach((n,r)=>{(n===e||n.__emitterProxy&&n.__emitterProxy===e)&&i.eventsListeners[s].splice(r,1)})}),i},emit(){const t=this;if(!t.eventsListeners||t.destroyed||!t.eventsListeners)return t;let e,i,s;for(var n=arguments.length,r=new Array(n),l=0;l<n;l++)r[l]=arguments[l];return typeof r[0]=="string"||Array.isArray(r[0])?(e=r[0],i=r.slice(1,r.length),s=t):(e=r[0].events,i=r[0].data,s=r[0].context||t),i.unshift(s),(Array.isArray(e)?e:e.split(" ")).forEach(a=>{t.eventsAnyListeners&&t.eventsAnyListeners.length&&t.eventsAnyListeners.forEach(f=>{f.apply(s,[a,...i])}),t.eventsListeners&&t.eventsListeners[a]&&t.eventsListeners[a].forEach(f=>{f.apply(s,i)})}),t}};function Qe(){const t=this;let e,i;const s=t.el;typeof t.params.width<"u"&&t.params.width!==null?e=t.params.width:e=s.clientWidth,typeof t.params.height<"u"&&t.params.height!==null?i=t.params.height:i=s.clientHeight,!(e===0&&t.isHorizontal()||i===0&&t.isVertical())&&(e=e-parseInt(H(s,"padding-left")||0,10)-parseInt(H(s,"padding-right")||0,10),i=i-parseInt(H(s,"padding-top")||0,10)-parseInt(H(s,"padding-bottom")||0,10),Number.isNaN(e)&&(e=0),Number.isNaN(i)&&(i=0),Object.assign(t,{width:e,height:i,size:t.isHorizontal()?e:i}))}function et(){const t=this;function e(T,C){return parseFloat(T.getPropertyValue(t.getDirectionLabel(C))||0)}const i=t.params,{wrapperEl:s,slidesEl:n,size:r,rtlTranslate:l,wrongRTL:o}=t,a=t.virtual&&i.virtual.enabled,f=a?t.virtual.slides.length:t.slides.length,d=F(n,`.${t.params.slideClass}, swiper-slide`),p=a?t.virtual.slides.length:d.length;let h=[];const g=[],S=[];let v=i.slidesOffsetBefore;typeof v=="function"&&(v=i.slidesOffsetBefore.call(t));let b=i.slidesOffsetAfter;typeof b=="function"&&(b=i.slidesOffsetAfter.call(t));const m=t.snapGrid.length,c=t.slidesGrid.length;let u=i.spaceBetween,w=-v,y=0,P=0;if(typeof r>"u")return;typeof u=="string"&&u.indexOf("%")>=0?u=parseFloat(u.replace("%",""))/100*r:typeof u=="string"&&(u=parseFloat(u)),t.virtualSize=-u,d.forEach(T=>{l?T.style.marginLeft="":T.style.marginRight="",T.style.marginBottom="",T.style.marginTop=""}),i.centeredSlides&&i.cssMode&&(J(s,"--swiper-centered-offset-before",""),J(s,"--swiper-centered-offset-after",""));const z=i.grid&&i.grid.rows>1&&t.grid;z?t.grid.initSlides(d):t.grid&&t.grid.unsetSlides();let L;const x=i.slidesPerView==="auto"&&i.breakpoints&&Object.keys(i.breakpoints).filter(T=>typeof i.breakpoints[T].slidesPerView<"u").length>0;for(let T=0;T<p;T+=1){L=0;let C;if(d[T]&&(C=d[T]),z&&t.grid.updateSlide(T,C,d),!(d[T]&&H(C,"display")==="none")){if(i.slidesPerView==="auto"){x&&(d[T].style[t.getDirectionLabel("width")]="");const M=getComputedStyle(C),E=C.style.transform,I=C.style.webkitTransform;if(E&&(C.style.transform="none"),I&&(C.style.webkitTransform="none"),i.roundLengths)L=t.isHorizontal()?fe(C,"width",!0):fe(C,"height",!0);else{const O=e(M,"width"),B=e(M,"padding-left"),Y=e(M,"padding-right"),A=e(M,"margin-left"),D=e(M,"margin-right"),_=M.getPropertyValue("box-sizing");if(_&&_==="border-box")L=O+A+D;else{const{clientWidth:j,offsetWidth:K}=C;L=O+B+Y+A+D+(K-j)}}E&&(C.style.transform=E),I&&(C.style.webkitTransform=I),i.roundLengths&&(L=Math.floor(L))}else L=(r-(i.slidesPerView-1)*u)/i.slidesPerView,i.roundLengths&&(L=Math.floor(L)),d[T]&&(d[T].style[t.getDirectionLabel("width")]=`${L}px`);d[T]&&(d[T].swiperSlideSize=L),S.push(L),i.centeredSlides?(w=w+L/2+y/2+u,y===0&&T!==0&&(w=w-r/2-u),T===0&&(w=w-r/2-u),Math.abs(w)<1/1e3&&(w=0),i.roundLengths&&(w=Math.floor(w)),P%i.slidesPerGroup===0&&h.push(w),g.push(w)):(i.roundLengths&&(w=Math.floor(w)),(P-Math.min(t.params.slidesPerGroupSkip,P))%t.params.slidesPerGroup===0&&h.push(w),g.push(w),w=w+L+u),t.virtualSize+=L+u,y=L,P+=1}}if(t.virtualSize=Math.max(t.virtualSize,r)+b,l&&o&&(i.effect==="slide"||i.effect==="coverflow")&&(s.style.width=`${t.virtualSize+u}px`),i.setWrapperSize&&(s.style[t.getDirectionLabel("width")]=`${t.virtualSize+u}px`),z&&t.grid.updateWrapperSize(L,h),!i.centeredSlides){const T=[];for(let C=0;C<h.length;C+=1){let M=h[C];i.roundLengths&&(M=Math.floor(M)),h[C]<=t.virtualSize-r&&T.push(M)}h=T,Math.floor(t.virtualSize-r)-Math.floor(h[h.length-1])>1&&h.push(t.virtualSize-r)}if(a&&i.loop){const T=S[0]+u;if(i.slidesPerGroup>1){const C=Math.ceil((t.virtual.slidesBefore+t.virtual.slidesAfter)/i.slidesPerGroup),M=T*i.slidesPerGroup;for(let E=0;E<C;E+=1)h.push(h[h.length-1]+M)}for(let C=0;C<t.virtual.slidesBefore+t.virtual.slidesAfter;C+=1)i.slidesPerGroup===1&&h.push(h[h.length-1]+T),g.push(g[g.length-1]+T),t.virtualSize+=T}if(h.length===0&&(h=[0]),u!==0){const T=t.isHorizontal()&&l?"marginLeft":t.getDirectionLabel("marginRight");d.filter((C,M)=>!i.cssMode||i.loop?!0:M!==d.length-1).forEach(C=>{C.style[T]=`${u}px`})}if(i.centeredSlides&&i.centeredSlidesBounds){let T=0;S.forEach(M=>{T+=M+(u||0)}),T-=u;const C=T-r;h=h.map(M=>M<=0?-v:M>C?C+b:M)}if(i.centerInsufficientSlides){let T=0;if(S.forEach(C=>{T+=C+(u||0)}),T-=u,T<r){const C=(r-T)/2;h.forEach((M,E)=>{h[E]=M-C}),g.forEach((M,E)=>{g[E]=M+C})}}if(Object.assign(t,{slides:d,snapGrid:h,slidesGrid:g,slidesSizesGrid:S}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){J(s,"--swiper-centered-offset-before",`${-h[0]}px`),J(s,"--swiper-centered-offset-after",`${t.size/2-S[S.length-1]/2}px`);const T=-t.snapGrid[0],C=-t.slidesGrid[0];t.snapGrid=t.snapGrid.map(M=>M+T),t.slidesGrid=t.slidesGrid.map(M=>M+C)}if(p!==f&&t.emit("slidesLengthChange"),h.length!==m&&(t.params.watchOverflow&&t.checkOverflow(),t.emit("snapGridLengthChange")),g.length!==c&&t.emit("slidesGridLengthChange"),i.watchSlidesProgress&&t.updateSlidesOffset(),t.emit("slidesUpdated"),!a&&!i.cssMode&&(i.effect==="slide"||i.effect==="fade")){const T=`${i.containerModifierClass}backface-hidden`,C=t.el.classList.contains(T);p<=i.maxBackfaceHiddenSlides?C||t.el.classList.add(T):C&&t.el.classList.remove(T)}}function tt(t){const e=this,i=[],s=e.virtual&&e.params.virtual.enabled;let n=0,r;typeof t=="number"?e.setTransition(t):t===!0&&e.setTransition(e.params.speed);const l=o=>s?e.slides[e.getSlideIndexByData(o)]:e.slides[o];if(e.params.slidesPerView!=="auto"&&e.params.slidesPerView>1)if(e.params.centeredSlides)(e.visibleSlides||[]).forEach(o=>{i.push(o)});else for(r=0;r<Math.ceil(e.params.slidesPerView);r+=1){const o=e.activeIndex+r;if(o>e.slides.length&&!s)break;i.push(l(o))}else i.push(l(e.activeIndex));for(r=0;r<i.length;r+=1)if(typeof i[r]<"u"){const o=i[r].offsetHeight;n=o>n?o:n}(n||n===0)&&(e.wrapperEl.style.height=`${n}px`)}function it(){const t=this,e=t.slides,i=t.isElement?t.isHorizontal()?t.wrapperEl.offsetLeft:t.wrapperEl.offsetTop:0;for(let s=0;s<e.length;s+=1)e[s].swiperSlideOffset=(t.isHorizontal()?e[s].offsetLeft:e[s].offsetTop)-i-t.cssOverflowAdjustment()}function st(t){t===void 0&&(t=this&&this.translate||0);const e=this,i=e.params,{slides:s,rtlTranslate:n,snapGrid:r}=e;if(s.length===0)return;typeof s[0].swiperSlideOffset>"u"&&e.updateSlidesOffset();let l=-t;n&&(l=t),s.forEach(a=>{a.classList.remove(i.slideVisibleClass,i.slideFullyVisibleClass)}),e.visibleSlidesIndexes=[],e.visibleSlides=[];let o=i.spaceBetween;typeof o=="string"&&o.indexOf("%")>=0?o=parseFloat(o.replace("%",""))/100*e.size:typeof o=="string"&&(o=parseFloat(o));for(let a=0;a<s.length;a+=1){const f=s[a];let d=f.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(d-=s[0].swiperSlideOffset);const p=(l+(i.centeredSlides?e.minTranslate():0)-d)/(f.swiperSlideSize+o),h=(l-r[0]+(i.centeredSlides?e.minTranslate():0)-d)/(f.swiperSlideSize+o),g=-(l-d),S=g+e.slidesSizesGrid[a],v=g>=0&&g<=e.size-e.slidesSizesGrid[a];(g>=0&&g<e.size-1||S>1&&S<=e.size||g<=0&&S>=e.size)&&(e.visibleSlides.push(f),e.visibleSlidesIndexes.push(a),s[a].classList.add(i.slideVisibleClass)),v&&s[a].classList.add(i.slideFullyVisibleClass),f.progress=n?-p:p,f.originalProgress=n?-h:h}}function rt(t){const e=this;if(typeof t>"u"){const d=e.rtlTranslate?-1:1;t=e&&e.translate&&e.translate*d||0}const i=e.params,s=e.maxTranslate()-e.minTranslate();let{progress:n,isBeginning:r,isEnd:l,progressLoop:o}=e;const a=r,f=l;if(s===0)n=0,r=!0,l=!0;else{n=(t-e.minTranslate())/s;const d=Math.abs(t-e.minTranslate())<1,p=Math.abs(t-e.maxTranslate())<1;r=d||n<=0,l=p||n>=1,d&&(n=0),p&&(n=1)}if(i.loop){const d=e.getSlideIndexByData(0),p=e.getSlideIndexByData(e.slides.length-1),h=e.slidesGrid[d],g=e.slidesGrid[p],S=e.slidesGrid[e.slidesGrid.length-1],v=Math.abs(t);v>=h?o=(v-h)/S:o=(v+S-g)/S,o>1&&(o-=1)}Object.assign(e,{progress:n,progressLoop:o,isBeginning:r,isEnd:l}),(i.watchSlidesProgress||i.centeredSlides&&i.autoHeight)&&e.updateSlidesProgress(t),r&&!a&&e.emit("reachBeginning toEdge"),l&&!f&&e.emit("reachEnd toEdge"),(a&&!r||f&&!l)&&e.emit("fromEdge"),e.emit("progress",n)}function nt(){const t=this,{slides:e,params:i,slidesEl:s,activeIndex:n}=t,r=t.virtual&&i.virtual.enabled,l=t.grid&&i.grid&&i.grid.rows>1,o=p=>F(s,`.${i.slideClass}${p}, swiper-slide${p}`)[0];e.forEach(p=>{p.classList.remove(i.slideActiveClass,i.slideNextClass,i.slidePrevClass)});let a,f,d;if(r)if(i.loop){let p=n-t.virtual.slidesBefore;p<0&&(p=t.virtual.slides.length+p),p>=t.virtual.slides.length&&(p-=t.virtual.slides.length),a=o(`[data-swiper-slide-index="${p}"]`)}else a=o(`[data-swiper-slide-index="${n}"]`);else l?(a=e.filter(p=>p.column===n)[0],d=e.filter(p=>p.column===n+1)[0],f=e.filter(p=>p.column===n-1)[0]):a=e[n];a&&(a.classList.add(i.slideActiveClass),l?(d&&d.classList.add(i.slideNextClass),f&&f.classList.add(i.slidePrevClass)):(d=je(a,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!d&&(d=e[0]),d&&d.classList.add(i.slideNextClass),f=He(a,`.${i.slideClass}, swiper-slide`)[0],i.loop&&!f===0&&(f=e[e.length-1]),f&&f.classList.add(i.slidePrevClass))),t.emitSlidesClasses()}const Q=(t,e)=>{if(!t||t.destroyed||!t.params)return;const i=()=>t.isElement?"swiper-slide":`.${t.params.slideClass}`,s=e.closest(i());if(s){let n=s.querySelector(`.${t.params.lazyPreloaderClass}`);!n&&t.isElement&&(s.shadowRoot?n=s.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`):requestAnimationFrame(()=>{s.shadowRoot&&(n=s.shadowRoot.querySelector(`.${t.params.lazyPreloaderClass}`),n&&n.remove())})),n&&n.remove()}},oe=(t,e)=>{if(!t.slides[e])return;const i=t.slides[e].querySelector('[loading="lazy"]');i&&i.removeAttribute("loading")},pe=t=>{if(!t||t.destroyed||!t.params)return;let e=t.params.lazyPreloadPrevNext;const i=t.slides.length;if(!i||!e||e<0)return;e=Math.min(e,i);const s=t.params.slidesPerView==="auto"?t.slidesPerViewDynamic():Math.ceil(t.params.slidesPerView),n=t.activeIndex;if(t.params.grid&&t.params.grid.rows>1){const l=n,o=[l-e];o.push(...Array.from({length:e}).map((a,f)=>l+s+f)),t.slides.forEach((a,f)=>{o.includes(a.column)&&oe(t,f)});return}const r=n+s-1;if(t.params.rewind||t.params.loop)for(let l=n-e;l<=r+e;l+=1){const o=(l%i+i)%i;(o<n||o>r)&&oe(t,o)}else for(let l=Math.max(n-e,0);l<=Math.min(r+e,i-1);l+=1)l!==n&&(l>r||l<n)&&oe(t,l)};function at(t){const{slidesGrid:e,params:i}=t,s=t.rtlTranslate?t.translate:-t.translate;let n;for(let r=0;r<e.length;r+=1)typeof e[r+1]<"u"?s>=e[r]&&s<e[r+1]-(e[r+1]-e[r])/2?n=r:s>=e[r]&&s<e[r+1]&&(n=r+1):s>=e[r]&&(n=r);return i.normalizeSlideIndex&&(n<0||typeof n>"u")&&(n=0),n}function lt(t){const e=this,i=e.rtlTranslate?e.translate:-e.translate,{snapGrid:s,params:n,activeIndex:r,realIndex:l,snapIndex:o}=e;let a=t,f;const d=g=>{let S=g-e.virtual.slidesBefore;return S<0&&(S=e.virtual.slides.length+S),S>=e.virtual.slides.length&&(S-=e.virtual.slides.length),S};if(typeof a>"u"&&(a=at(e)),s.indexOf(i)>=0)f=s.indexOf(i);else{const g=Math.min(n.slidesPerGroupSkip,a);f=g+Math.floor((a-g)/n.slidesPerGroup)}if(f>=s.length&&(f=s.length-1),a===r&&!e.params.loop){f!==o&&(e.snapIndex=f,e.emit("snapIndexChange"));return}if(a===r&&e.params.loop&&e.virtual&&e.params.virtual.enabled){e.realIndex=d(a);return}const p=e.grid&&n.grid&&n.grid.rows>1;let h;if(e.virtual&&n.virtual.enabled&&n.loop)h=d(a);else if(p){const g=e.slides.filter(v=>v.column===a)[0];let S=parseInt(g.getAttribute("data-swiper-slide-index"),10);Number.isNaN(S)&&(S=Math.max(e.slides.indexOf(g),0)),h=Math.floor(S/n.grid.rows)}else if(e.slides[a]){const g=e.slides[a].getAttribute("data-swiper-slide-index");g?h=parseInt(g,10):h=a}else h=a;Object.assign(e,{previousSnapIndex:o,snapIndex:f,previousRealIndex:l,realIndex:h,previousIndex:r,activeIndex:a}),e.initialized&&pe(e),e.emit("activeIndexChange"),e.emit("snapIndexChange"),(e.initialized||e.params.runCallbacksOnInit)&&(l!==h&&e.emit("realIndexChange"),e.emit("slideChange"))}function ot(t,e){const i=this,s=i.params;let n=t.closest(`.${s.slideClass}, swiper-slide`);!n&&i.isElement&&e&&e.length>1&&e.includes(t)&&[...e.slice(e.indexOf(t)+1,e.length)].forEach(o=>{!n&&o.matches&&o.matches(`.${s.slideClass}, swiper-slide`)&&(n=o)});let r=!1,l;if(n){for(let o=0;o<i.slides.length;o+=1)if(i.slides[o]===n){r=!0,l=o;break}}if(n&&r)i.clickedSlide=n,i.virtual&&i.params.virtual.enabled?i.clickedIndex=parseInt(n.getAttribute("data-swiper-slide-index"),10):i.clickedIndex=l;else{i.clickedSlide=void 0,i.clickedIndex=void 0;return}s.slideToClickedSlide&&i.clickedIndex!==void 0&&i.clickedIndex!==i.activeIndex&&i.slideToClickedSlide()}var dt={updateSize:Qe,updateSlides:et,updateAutoHeight:tt,updateSlidesOffset:it,updateSlidesProgress:st,updateProgress:rt,updateSlidesClasses:nt,updateActiveIndex:lt,updateClickedSlide:ot};function ct(t){t===void 0&&(t=this.isHorizontal()?"x":"y");const e=this,{params:i,rtlTranslate:s,translate:n,wrapperEl:r}=e;if(i.virtualTranslate)return s?-n:n;if(i.cssMode)return n;let l=Re(r,t);return l+=e.cssOverflowAdjustment(),s&&(l=-l),l||0}function ut(t,e){const i=this,{rtlTranslate:s,params:n,wrapperEl:r,progress:l}=i;let o=0,a=0;const f=0;i.isHorizontal()?o=s?-t:t:a=t,n.roundLengths&&(o=Math.floor(o),a=Math.floor(a)),i.previousTranslate=i.translate,i.translate=i.isHorizontal()?o:a,n.cssMode?r[i.isHorizontal()?"scrollLeft":"scrollTop"]=i.isHorizontal()?-o:-a:n.virtualTranslate||(i.isHorizontal()?o-=i.cssOverflowAdjustment():a-=i.cssOverflowAdjustment(),r.style.transform=`translate3d(${o}px, ${a}px, ${f}px)`);let d;const p=i.maxTranslate()-i.minTranslate();p===0?d=0:d=(t-i.minTranslate())/p,d!==l&&i.updateProgress(t),i.emit("setTranslate",i.translate,e)}function ft(){return-this.snapGrid[0]}function pt(){return-this.snapGrid[this.snapGrid.length-1]}function mt(t,e,i,s,n){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),s===void 0&&(s=!0);const r=this,{params:l,wrapperEl:o}=r;if(r.animating&&l.preventInteractionOnTransition)return!1;const a=r.minTranslate(),f=r.maxTranslate();let d;if(s&&t>a?d=a:s&&t<f?d=f:d=t,r.updateProgress(d),l.cssMode){const p=r.isHorizontal();if(e===0)o[p?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return xe({swiper:r,targetPosition:-d,side:p?"left":"top"}),!0;o.scrollTo({[p?"left":"top"]:-d,behavior:"smooth"})}return!0}return e===0?(r.setTransition(0),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,n),r.emit("transitionEnd"))):(r.setTransition(e),r.setTranslate(d),i&&(r.emit("beforeTransitionStart",e,n),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(h){!r||r.destroyed||h.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,i&&r.emit("transitionEnd"))}),r.wrapperEl.addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd))),!0}var ht={getTranslate:ct,setTranslate:ut,minTranslate:ft,maxTranslate:pt,translateTo:mt};function gt(t,e){const i=this;i.params.cssMode||(i.wrapperEl.style.transitionDuration=`${t}ms`,i.wrapperEl.style.transitionDelay=t===0?"0ms":""),i.emit("setTransition",t,e)}function Pe(t){let{swiper:e,runCallbacks:i,direction:s,step:n}=t;const{activeIndex:r,previousIndex:l}=e;let o=s;if(o||(r>l?o="next":r<l?o="prev":o="reset"),e.emit(`transition${n}`),i&&r!==l){if(o==="reset"){e.emit(`slideResetTransition${n}`);return}e.emit(`slideChangeTransition${n}`),o==="next"?e.emit(`slideNextTransition${n}`):e.emit(`slidePrevTransition${n}`)}}function vt(t,e){t===void 0&&(t=!0);const i=this,{params:s}=i;s.cssMode||(s.autoHeight&&i.updateAutoHeight(),Pe({swiper:i,runCallbacks:t,direction:e,step:"Start"}))}function wt(t,e){t===void 0&&(t=!0);const i=this,{params:s}=i;i.animating=!1,!s.cssMode&&(i.setTransition(0),Pe({swiper:i,runCallbacks:t,direction:e,step:"End"}))}var St={setTransition:gt,transitionStart:vt,transitionEnd:wt};function bt(t,e,i,s,n){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const r=this;let l=t;l<0&&(l=0);const{params:o,snapGrid:a,slidesGrid:f,previousIndex:d,activeIndex:p,rtlTranslate:h,wrapperEl:g,enabled:S}=r;if(r.animating&&o.preventInteractionOnTransition||!S&&!s&&!n)return!1;const v=Math.min(r.params.slidesPerGroupSkip,l);let b=v+Math.floor((l-v)/r.params.slidesPerGroup);b>=a.length&&(b=a.length-1);const m=-a[b];if(o.normalizeSlideIndex)for(let u=0;u<f.length;u+=1){const w=-Math.floor(m*100),y=Math.floor(f[u]*100),P=Math.floor(f[u+1]*100);typeof f[u+1]<"u"?w>=y&&w<P-(P-y)/2?l=u:w>=y&&w<P&&(l=u+1):w>=y&&(l=u)}if(r.initialized&&l!==p&&(!r.allowSlideNext&&(h?m>r.translate&&m>r.minTranslate():m<r.translate&&m<r.minTranslate())||!r.allowSlidePrev&&m>r.translate&&m>r.maxTranslate()&&(p||0)!==l))return!1;l!==(d||0)&&i&&r.emit("beforeSlideChangeStart"),r.updateProgress(m);let c;if(l>p?c="next":l<p?c="prev":c="reset",h&&-m===r.translate||!h&&m===r.translate)return r.updateActiveIndex(l),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),o.effect!=="slide"&&r.setTranslate(m),c!=="reset"&&(r.transitionStart(i,c),r.transitionEnd(i,c)),!1;if(o.cssMode){const u=r.isHorizontal(),w=h?m:-m;if(e===0){const y=r.virtual&&r.params.virtual.enabled;y&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),y&&!r._cssModeVirtualInitialSet&&r.params.initialSlide>0?(r._cssModeVirtualInitialSet=!0,requestAnimationFrame(()=>{g[u?"scrollLeft":"scrollTop"]=w})):g[u?"scrollLeft":"scrollTop"]=w,y&&requestAnimationFrame(()=>{r.wrapperEl.style.scrollSnapType="",r._immediateVirtual=!1})}else{if(!r.support.smoothScroll)return xe({swiper:r,targetPosition:w,side:u?"left":"top"}),!0;g.scrollTo({[u?"left":"top"]:w,behavior:"smooth"})}return!0}return r.setTransition(e),r.setTranslate(m),r.updateActiveIndex(l),r.updateSlidesClasses(),r.emit("beforeTransitionStart",e,s),r.transitionStart(i,c),e===0?r.transitionEnd(i,c):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(w){!r||r.destroyed||w.target===this&&(r.wrapperEl.removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(i,c))}),r.wrapperEl.addEventListener("transitionend",r.onSlideToWrapperTransitionEnd)),!0}function yt(t,e,i,s){t===void 0&&(t=0),e===void 0&&(e=this.params.speed),i===void 0&&(i=!0),typeof t=="string"&&(t=parseInt(t,10));const n=this,r=n.grid&&n.params.grid&&n.params.grid.rows>1;let l=t;if(n.params.loop)if(n.virtual&&n.params.virtual.enabled)l=l+n.virtual.slidesBefore;else{let o;if(r){const h=l*n.params.grid.rows;o=n.slides.filter(g=>g.getAttribute("data-swiper-slide-index")*1===h)[0].column}else o=n.getSlideIndexByData(l);const a=r?Math.ceil(n.slides.length/n.params.grid.rows):n.slides.length,{centeredSlides:f}=n.params;let d=n.params.slidesPerView;d==="auto"?d=n.slidesPerViewDynamic():(d=Math.ceil(parseFloat(n.params.slidesPerView,10)),f&&d%2===0&&(d=d+1));let p=a-o<d;if(f&&(p=p||o<Math.ceil(d/2)),p){const h=f?o<n.activeIndex?"prev":"next":o-n.activeIndex-1<n.params.slidesPerView?"next":"prev";n.loopFix({direction:h,slideTo:!0,activeSlideIndex:h==="next"?o+1:o-a+1,slideRealIndex:h==="next"?n.realIndex:void 0})}if(r){const h=l*n.params.grid.rows;l=n.slides.filter(g=>g.getAttribute("data-swiper-slide-index")*1===h)[0].column}else l=n.getSlideIndexByData(l)}return requestAnimationFrame(()=>{n.slideTo(l,e,i,s)}),n}function Tt(t,e,i){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0);const s=this,{enabled:n,params:r,animating:l}=s;if(!n)return s;let o=r.slidesPerGroup;r.slidesPerView==="auto"&&r.slidesPerGroup===1&&r.slidesPerGroupAuto&&(o=Math.max(s.slidesPerViewDynamic("current",!0),1));const a=s.activeIndex<r.slidesPerGroupSkip?1:o,f=s.virtual&&r.virtual.enabled;if(r.loop){if(l&&!f&&r.loopPreventsSliding)return!1;if(s.loopFix({direction:"next"}),s._clientLeft=s.wrapperEl.clientLeft,s.activeIndex===s.slides.length-1&&r.cssMode)return requestAnimationFrame(()=>{s.slideTo(s.activeIndex+a,t,e,i)}),!0}return r.rewind&&s.isEnd?s.slideTo(0,t,e,i):s.slideTo(s.activeIndex+a,t,e,i)}function xt(t,e,i){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0);const s=this,{params:n,snapGrid:r,slidesGrid:l,rtlTranslate:o,enabled:a,animating:f}=s;if(!a)return s;const d=s.virtual&&n.virtual.enabled;if(n.loop){if(f&&!d&&n.loopPreventsSliding)return!1;s.loopFix({direction:"prev"}),s._clientLeft=s.wrapperEl.clientLeft}const p=o?s.translate:-s.translate;function h(m){return m<0?-Math.floor(Math.abs(m)):Math.floor(m)}const g=h(p),S=r.map(m=>h(m));let v=r[S.indexOf(g)-1];if(typeof v>"u"&&n.cssMode){let m;r.forEach((c,u)=>{g>=c&&(m=u)}),typeof m<"u"&&(v=r[m>0?m-1:m])}let b=0;if(typeof v<"u"&&(b=l.indexOf(v),b<0&&(b=s.activeIndex-1),n.slidesPerView==="auto"&&n.slidesPerGroup===1&&n.slidesPerGroupAuto&&(b=b-s.slidesPerViewDynamic("previous",!0)+1,b=Math.max(b,0))),n.rewind&&s.isBeginning){const m=s.params.virtual&&s.params.virtual.enabled&&s.virtual?s.virtual.slides.length-1:s.slides.length-1;return s.slideTo(m,t,e,i)}else if(n.loop&&s.activeIndex===0&&n.cssMode)return requestAnimationFrame(()=>{s.slideTo(b,t,e,i)}),!0;return s.slideTo(b,t,e,i)}function Et(t,e,i){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0);const s=this;return s.slideTo(s.activeIndex,t,e,i)}function Ct(t,e,i,s){t===void 0&&(t=this.params.speed),e===void 0&&(e=!0),s===void 0&&(s=.5);const n=this;let r=n.activeIndex;const l=Math.min(n.params.slidesPerGroupSkip,r),o=l+Math.floor((r-l)/n.params.slidesPerGroup),a=n.rtlTranslate?n.translate:-n.translate;if(a>=n.snapGrid[o]){const f=n.snapGrid[o],d=n.snapGrid[o+1];a-f>(d-f)*s&&(r+=n.params.slidesPerGroup)}else{const f=n.snapGrid[o-1],d=n.snapGrid[o];a-f<=(d-f)*s&&(r-=n.params.slidesPerGroup)}return r=Math.max(r,0),r=Math.min(r,n.slidesGrid.length-1),n.slideTo(r,t,e,i)}function Pt(){const t=this,{params:e,slidesEl:i}=t,s=e.slidesPerView==="auto"?t.slidesPerViewDynamic():e.slidesPerView;let n=t.clickedIndex,r;const l=t.isElement?"swiper-slide":`.${e.slideClass}`;if(e.loop){if(t.animating)return;r=parseInt(t.clickedSlide.getAttribute("data-swiper-slide-index"),10),e.centeredSlides?n<t.loopedSlides-s/2||n>t.slides.length-t.loopedSlides+s/2?(t.loopFix(),n=t.getSlideIndex(F(i,`${l}[data-swiper-slide-index="${r}"]`)[0]),ue(()=>{t.slideTo(n)})):t.slideTo(n):n>t.slides.length-s?(t.loopFix(),n=t.getSlideIndex(F(i,`${l}[data-swiper-slide-index="${r}"]`)[0]),ue(()=>{t.slideTo(n)})):t.slideTo(n)}else t.slideTo(n)}var Mt={slideTo:bt,slideToLoop:yt,slideNext:Tt,slidePrev:xt,slideReset:Et,slideToClosest:Ct,slideToClickedSlide:Pt};function Lt(t){const e=this,{params:i,slidesEl:s}=e;if(!i.loop||e.virtual&&e.params.virtual.enabled)return;const n=()=>{F(s,`.${i.slideClass}, swiper-slide`).forEach((p,h)=>{p.setAttribute("data-swiper-slide-index",h)})},r=e.grid&&i.grid&&i.grid.rows>1,l=i.slidesPerGroup*(r?i.grid.rows:1),o=e.slides.length%l!==0,a=r&&e.slides.length%i.grid.rows!==0,f=d=>{for(let p=0;p<d;p+=1){const h=e.isElement?ie("swiper-slide",[i.slideBlankClass]):ie("div",[i.slideClass,i.slideBlankClass]);e.slidesEl.append(h)}};if(o){if(i.loopAddBlankSlides){const d=l-e.slides.length%l;f(d),e.recalcSlides(),e.updateSlides()}else te("Swiper Loop Warning: The number of slides is not even to slidesPerGroup, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else if(a){if(i.loopAddBlankSlides){const d=i.grid.rows-e.slides.length%i.grid.rows;f(d),e.recalcSlides(),e.updateSlides()}else te("Swiper Loop Warning: The number of slides is not even to grid.rows, loop mode may not function properly. You need to add more slides (or make duplicates, or empty slides)");n()}else n();e.loopFix({slideRealIndex:t,direction:i.centeredSlides?void 0:"next"})}function It(t){let{slideRealIndex:e,slideTo:i=!0,direction:s,setTranslate:n,activeSlideIndex:r,byController:l,byMousewheel:o}=t===void 0?{}:t;const a=this;if(!a.params.loop)return;a.emit("beforeLoopFix");const{slides:f,allowSlidePrev:d,allowSlideNext:p,slidesEl:h,params:g}=a,{centeredSlides:S}=g;if(a.allowSlidePrev=!0,a.allowSlideNext=!0,a.virtual&&g.virtual.enabled){i&&(!g.centeredSlides&&a.snapIndex===0?a.slideTo(a.virtual.slides.length,0,!1,!0):g.centeredSlides&&a.snapIndex<g.slidesPerView?a.slideTo(a.virtual.slides.length+a.snapIndex,0,!1,!0):a.snapIndex===a.snapGrid.length-1&&a.slideTo(a.virtual.slidesBefore,0,!1,!0)),a.allowSlidePrev=d,a.allowSlideNext=p,a.emit("loopFix");return}let v=g.slidesPerView;v==="auto"?v=a.slidesPerViewDynamic():(v=Math.ceil(parseFloat(g.slidesPerView,10)),S&&v%2===0&&(v=v+1));const b=g.slidesPerGroupAuto?v:g.slidesPerGroup;let m=b;m%b!==0&&(m+=b-m%b),m+=g.loopAdditionalSlides,a.loopedSlides=m;const c=a.grid&&g.grid&&g.grid.rows>1;f.length<v+m?te("Swiper Loop Warning: The number of slides is not enough for loop mode, it will be disabled and not function properly. You need to add more slides (or make duplicates) or lower the values of slidesPerView and slidesPerGroup parameters"):c&&g.grid.fill==="row"&&te("Swiper Loop Warning: Loop mode is not compatible with grid.fill = `row`");const u=[],w=[];let y=a.activeIndex;typeof r>"u"?r=a.getSlideIndex(f.filter(E=>E.classList.contains(g.slideActiveClass))[0]):y=r;const P=s==="next"||!s,z=s==="prev"||!s;let L=0,x=0;const T=c?Math.ceil(f.length/g.grid.rows):f.length,M=(c?f[r].column:r)+(S&&typeof n>"u"?-v/2+.5:0);if(M<m){L=Math.max(m-M,b);for(let E=0;E<m-M;E+=1){const I=E-Math.floor(E/T)*T;if(c){const O=T-I-1;for(let B=f.length-1;B>=0;B-=1)f[B].column===O&&u.push(B)}else u.push(T-I-1)}}else if(M+v>T-m){x=Math.max(M-(T-m*2),b);for(let E=0;E<x;E+=1){const I=E-Math.floor(E/T)*T;c?f.forEach((O,B)=>{O.column===I&&w.push(B)}):w.push(I)}}if(a.__preventObserver__=!0,requestAnimationFrame(()=>{a.__preventObserver__=!1}),z&&u.forEach(E=>{f[E].swiperLoopMoveDOM=!0,h.prepend(f[E]),f[E].swiperLoopMoveDOM=!1}),P&&w.forEach(E=>{f[E].swiperLoopMoveDOM=!0,h.append(f[E]),f[E].swiperLoopMoveDOM=!1}),a.recalcSlides(),g.slidesPerView==="auto"?a.updateSlides():c&&(u.length>0&&z||w.length>0&&P)&&a.slides.forEach((E,I)=>{a.grid.updateSlide(I,E,a.slides)}),g.watchSlidesProgress&&a.updateSlidesOffset(),i){if(u.length>0&&z){if(typeof e>"u"){const E=a.slidesGrid[y],O=a.slidesGrid[y+L]-E;o?a.setTranslate(a.translate-O):(a.slideTo(y+L,0,!1,!0),n&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-O,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-O))}else if(n){const E=c?u.length/g.grid.rows:u.length;a.slideTo(a.activeIndex+E,0,!1,!0),a.touchEventsData.currentTranslate=a.translate}}else if(w.length>0&&P)if(typeof e>"u"){const E=a.slidesGrid[y],O=a.slidesGrid[y-x]-E;o?a.setTranslate(a.translate-O):(a.slideTo(y-x,0,!1,!0),n&&(a.touchEventsData.startTranslate=a.touchEventsData.startTranslate-O,a.touchEventsData.currentTranslate=a.touchEventsData.currentTranslate-O))}else{const E=c?w.length/g.grid.rows:w.length;a.slideTo(a.activeIndex-E,0,!1,!0)}}if(a.allowSlidePrev=d,a.allowSlideNext=p,a.controller&&a.controller.control&&!l){const E={slideRealIndex:e,direction:s,setTranslate:n,activeSlideIndex:r,byController:!0};Array.isArray(a.controller.control)?a.controller.control.forEach(I=>{!I.destroyed&&I.params.loop&&I.loopFix({...E,slideTo:I.params.slidesPerView===g.slidesPerView?i:!1})}):a.controller.control instanceof a.constructor&&a.controller.control.params.loop&&a.controller.control.loopFix({...E,slideTo:a.controller.control.params.slidesPerView===g.slidesPerView?i:!1})}a.emit("loopFix")}function Ot(){const t=this,{params:e,slidesEl:i}=t;if(!e.loop||t.virtual&&t.params.virtual.enabled)return;t.recalcSlides();const s=[];t.slides.forEach(n=>{const r=typeof n.swiperSlideIndex>"u"?n.getAttribute("data-swiper-slide-index")*1:n.swiperSlideIndex;s[r]=n}),t.slides.forEach(n=>{n.removeAttribute("data-swiper-slide-index")}),s.forEach(n=>{i.append(n)}),t.recalcSlides(),t.slideTo(t.realIndex,0)}var At={loopCreate:Lt,loopFix:It,loopDestroy:Ot};function zt(t){const e=this;if(!e.params.simulateTouch||e.params.watchOverflow&&e.isLocked||e.params.cssMode)return;const i=e.params.touchEventsTarget==="container"?e.el:e.wrapperEl;e.isElement&&(e.__preventObserver__=!0),i.style.cursor="move",i.style.cursor=t?"grabbing":"grab",e.isElement&&requestAnimationFrame(()=>{e.__preventObserver__=!1})}function Dt(){const t=this;t.params.watchOverflow&&t.isLocked||t.params.cssMode||(t.isElement&&(t.__preventObserver__=!0),t[t.params.touchEventsTarget==="container"?"el":"wrapperEl"].style.cursor="",t.isElement&&requestAnimationFrame(()=>{t.__preventObserver__=!1}))}var _t={setGrabCursor:zt,unsetGrabCursor:Dt};function Gt(t,e){e===void 0&&(e=this);function i(s){if(!s||s===k()||s===V())return null;s.assignedSlot&&(s=s.assignedSlot);const n=s.closest(t);return!n&&!s.getRootNode?null:n||i(s.getRootNode().host)}return i(e)}function we(t,e,i){const s=V(),{params:n}=t,r=n.edgeSwipeDetection,l=n.edgeSwipeThreshold;return r&&(i<=l||i>=s.innerWidth-l)?r==="prevent"?(e.preventDefault(),!0):!1:!0}function Bt(t){const e=this,i=k();let s=t;s.originalEvent&&(s=s.originalEvent);const n=e.touchEventsData;if(s.type==="pointerdown"){if(n.pointerId!==null&&n.pointerId!==s.pointerId)return;n.pointerId=s.pointerId}else s.type==="touchstart"&&s.targetTouches.length===1&&(n.touchId=s.targetTouches[0].identifier);if(s.type==="touchstart"){we(e,s,s.targetTouches[0].pageX);return}const{params:r,touches:l,enabled:o}=e;if(!o||!r.simulateTouch&&s.pointerType==="mouse"||e.animating&&r.preventInteractionOnTransition)return;!e.animating&&r.cssMode&&r.loop&&e.loopFix();let a=s.target;if(r.touchEventsTarget==="wrapper"&&!e.wrapperEl.contains(a)||"which"in s&&s.which===3||"button"in s&&s.button>0||n.isTouched&&n.isMoved)return;const f=!!r.noSwipingClass&&r.noSwipingClass!=="",d=s.composedPath?s.composedPath():s.path;f&&s.target&&s.target.shadowRoot&&d&&(a=d[0]);const p=r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`,h=!!(s.target&&s.target.shadowRoot);if(r.noSwiping&&(h?Gt(p,a):a.closest(p))){e.allowClick=!0;return}if(r.swipeHandler&&!a.closest(r.swipeHandler))return;l.currentX=s.pageX,l.currentY=s.pageY;const g=l.currentX,S=l.currentY;if(!we(e,s,g))return;Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),l.startX=g,l.startY=S,n.touchStartTime=ee(),e.allowClick=!0,e.updateSize(),e.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1);let v=!0;a.matches(n.focusableElements)&&(v=!1,a.nodeName==="SELECT"&&(n.isTouched=!1)),i.activeElement&&i.activeElement.matches(n.focusableElements)&&i.activeElement!==a&&i.activeElement.blur();const b=v&&e.allowTouchMove&&r.touchStartPreventDefault;(r.touchStartForcePreventDefault||b)&&!a.isContentEditable&&s.preventDefault(),r.freeMode&&r.freeMode.enabled&&e.freeMode&&e.animating&&!r.cssMode&&e.freeMode.onTouchStart(),e.emit("touchStart",s)}function $t(t){const e=k(),i=this,s=i.touchEventsData,{params:n,touches:r,rtlTranslate:l,enabled:o}=i;if(!o||!n.simulateTouch&&t.pointerType==="mouse")return;let a=t;if(a.originalEvent&&(a=a.originalEvent),a.type==="pointermove"&&(s.touchId!==null||a.pointerId!==s.pointerId))return;let f;if(a.type==="touchmove"){if(f=[...a.changedTouches].filter(P=>P.identifier===s.touchId)[0],!f||f.identifier!==s.touchId)return}else f=a;if(!s.isTouched){s.startMoving&&s.isScrolling&&i.emit("touchMoveOpposite",a);return}const d=f.pageX,p=f.pageY;if(a.preventedByNestedSwiper){r.startX=d,r.startY=p;return}if(!i.allowTouchMove){a.target.matches(s.focusableElements)||(i.allowClick=!1),s.isTouched&&(Object.assign(r,{startX:d,startY:p,currentX:d,currentY:p}),s.touchStartTime=ee());return}if(n.touchReleaseOnEdges&&!n.loop){if(i.isVertical()){if(p<r.startY&&i.translate<=i.maxTranslate()||p>r.startY&&i.translate>=i.minTranslate()){s.isTouched=!1,s.isMoved=!1;return}}else if(d<r.startX&&i.translate<=i.maxTranslate()||d>r.startX&&i.translate>=i.minTranslate())return}if(e.activeElement&&a.target===e.activeElement&&a.target.matches(s.focusableElements)){s.isMoved=!0,i.allowClick=!1;return}s.allowTouchCallbacks&&i.emit("touchMove",a),r.previousX=r.currentX,r.previousY=r.currentY,r.currentX=d,r.currentY=p;const h=r.currentX-r.startX,g=r.currentY-r.startY;if(i.params.threshold&&Math.sqrt(h**2+g**2)<i.params.threshold)return;if(typeof s.isScrolling>"u"){let P;i.isHorizontal()&&r.currentY===r.startY||i.isVertical()&&r.currentX===r.startX?s.isScrolling=!1:h*h+g*g>=25&&(P=Math.atan2(Math.abs(g),Math.abs(h))*180/Math.PI,s.isScrolling=i.isHorizontal()?P>n.touchAngle:90-P>n.touchAngle)}if(s.isScrolling&&i.emit("touchMoveOpposite",a),typeof s.startMoving>"u"&&(r.currentX!==r.startX||r.currentY!==r.startY)&&(s.startMoving=!0),s.isScrolling){s.isTouched=!1;return}if(!s.startMoving)return;i.allowClick=!1,!n.cssMode&&a.cancelable&&a.preventDefault(),n.touchMoveStopPropagation&&!n.nested&&a.stopPropagation();let S=i.isHorizontal()?h:g,v=i.isHorizontal()?r.currentX-r.previousX:r.currentY-r.previousY;n.oneWayMovement&&(S=Math.abs(S)*(l?1:-1),v=Math.abs(v)*(l?1:-1)),r.diff=S,S*=n.touchRatio,l&&(S=-S,v=-v);const b=i.touchesDirection;i.swipeDirection=S>0?"prev":"next",i.touchesDirection=v>0?"prev":"next";const m=i.params.loop&&!n.cssMode,c=i.touchesDirection==="next"&&i.allowSlideNext||i.touchesDirection==="prev"&&i.allowSlidePrev;if(!s.isMoved){if(m&&c&&i.loopFix({direction:i.swipeDirection}),s.startTranslate=i.getTranslate(),i.setTransition(0),i.animating){const P=new window.CustomEvent("transitionend",{bubbles:!0,cancelable:!0});i.wrapperEl.dispatchEvent(P)}s.allowMomentumBounce=!1,n.grabCursor&&(i.allowSlideNext===!0||i.allowSlidePrev===!0)&&i.setGrabCursor(!0),i.emit("sliderFirstMove",a)}let u;if(new Date().getTime(),s.isMoved&&s.allowThresholdMove&&b!==i.touchesDirection&&m&&c&&Math.abs(S)>=1){Object.assign(r,{startX:d,startY:p,currentX:d,currentY:p,startTranslate:s.currentTranslate}),s.loopSwapReset=!0,s.startTranslate=s.currentTranslate;return}i.emit("sliderMove",a),s.isMoved=!0,s.currentTranslate=S+s.startTranslate;let w=!0,y=n.resistanceRatio;if(n.touchReleaseOnEdges&&(y=0),S>0?(m&&c&&!u&&s.allowThresholdMove&&s.currentTranslate>(n.centeredSlides?i.minTranslate()-i.slidesSizesGrid[i.activeIndex+1]:i.minTranslate())&&i.loopFix({direction:"prev",setTranslate:!0,activeSlideIndex:0}),s.currentTranslate>i.minTranslate()&&(w=!1,n.resistance&&(s.currentTranslate=i.minTranslate()-1+(-i.minTranslate()+s.startTranslate+S)**y))):S<0&&(m&&c&&!u&&s.allowThresholdMove&&s.currentTranslate<(n.centeredSlides?i.maxTranslate()+i.slidesSizesGrid[i.slidesSizesGrid.length-1]:i.maxTranslate())&&i.loopFix({direction:"next",setTranslate:!0,activeSlideIndex:i.slides.length-(n.slidesPerView==="auto"?i.slidesPerViewDynamic():Math.ceil(parseFloat(n.slidesPerView,10)))}),s.currentTranslate<i.maxTranslate()&&(w=!1,n.resistance&&(s.currentTranslate=i.maxTranslate()+1-(i.maxTranslate()-s.startTranslate-S)**y))),w&&(a.preventedByNestedSwiper=!0),!i.allowSlideNext&&i.swipeDirection==="next"&&s.currentTranslate<s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&i.swipeDirection==="prev"&&s.currentTranslate>s.startTranslate&&(s.currentTranslate=s.startTranslate),!i.allowSlidePrev&&!i.allowSlideNext&&(s.currentTranslate=s.startTranslate),n.threshold>0)if(Math.abs(S)>n.threshold||s.allowThresholdMove){if(!s.allowThresholdMove){s.allowThresholdMove=!0,r.startX=r.currentX,r.startY=r.currentY,s.currentTranslate=s.startTranslate,r.diff=i.isHorizontal()?r.currentX-r.startX:r.currentY-r.startY;return}}else{s.currentTranslate=s.startTranslate;return}!n.followFinger||n.cssMode||((n.freeMode&&n.freeMode.enabled&&i.freeMode||n.watchSlidesProgress)&&(i.updateActiveIndex(),i.updateSlidesClasses()),n.freeMode&&n.freeMode.enabled&&i.freeMode&&i.freeMode.onTouchMove(),i.updateProgress(s.currentTranslate),i.setTranslate(s.currentTranslate))}function Nt(t){const e=this,i=e.touchEventsData;let s=t;s.originalEvent&&(s=s.originalEvent);let n;if(s.type==="touchend"||s.type==="touchcancel"){if(n=[...s.changedTouches].filter(y=>y.identifier===i.touchId)[0],!n||n.identifier!==i.touchId)return}else{if(i.touchId!==null||s.pointerId!==i.pointerId)return;n=s}if(["pointercancel","pointerout","pointerleave","contextmenu"].includes(s.type)&&!(["pointercancel","contextmenu"].includes(s.type)&&(e.browser.isSafari||e.browser.isWebView)))return;i.pointerId=null,i.touchId=null;const{params:l,touches:o,rtlTranslate:a,slidesGrid:f,enabled:d}=e;if(!d||!l.simulateTouch&&s.pointerType==="mouse")return;if(i.allowTouchCallbacks&&e.emit("touchEnd",s),i.allowTouchCallbacks=!1,!i.isTouched){i.isMoved&&l.grabCursor&&e.setGrabCursor(!1),i.isMoved=!1,i.startMoving=!1;return}l.grabCursor&&i.isMoved&&i.isTouched&&(e.allowSlideNext===!0||e.allowSlidePrev===!0)&&e.setGrabCursor(!1);const p=ee(),h=p-i.touchStartTime;if(e.allowClick){const y=s.path||s.composedPath&&s.composedPath();e.updateClickedSlide(y&&y[0]||s.target,y),e.emit("tap click",s),h<300&&p-i.lastClickTime<300&&e.emit("doubleTap doubleClick",s)}if(i.lastClickTime=ee(),ue(()=>{e.destroyed||(e.allowClick=!0)}),!i.isTouched||!i.isMoved||!e.swipeDirection||o.diff===0&&!i.loopSwapReset||i.currentTranslate===i.startTranslate&&!i.loopSwapReset){i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;return}i.isTouched=!1,i.isMoved=!1,i.startMoving=!1;let g;if(l.followFinger?g=a?e.translate:-e.translate:g=-i.currentTranslate,l.cssMode)return;if(l.freeMode&&l.freeMode.enabled){e.freeMode.onTouchEnd({currentPos:g});return}const S=g>=-e.maxTranslate()&&!e.params.loop;let v=0,b=e.slidesSizesGrid[0];for(let y=0;y<f.length;y+=y<l.slidesPerGroupSkip?1:l.slidesPerGroup){const P=y<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;typeof f[y+P]<"u"?(S||g>=f[y]&&g<f[y+P])&&(v=y,b=f[y+P]-f[y]):(S||g>=f[y])&&(v=y,b=f[f.length-1]-f[f.length-2])}let m=null,c=null;l.rewind&&(e.isBeginning?c=l.virtual&&l.virtual.enabled&&e.virtual?e.virtual.slides.length-1:e.slides.length-1:e.isEnd&&(m=0));const u=(g-f[v])/b,w=v<l.slidesPerGroupSkip-1?1:l.slidesPerGroup;if(h>l.longSwipesMs){if(!l.longSwipes){e.slideTo(e.activeIndex);return}e.swipeDirection==="next"&&(u>=l.longSwipesRatio?e.slideTo(l.rewind&&e.isEnd?m:v+w):e.slideTo(v)),e.swipeDirection==="prev"&&(u>1-l.longSwipesRatio?e.slideTo(v+w):c!==null&&u<0&&Math.abs(u)>l.longSwipesRatio?e.slideTo(c):e.slideTo(v))}else{if(!l.shortSwipes){e.slideTo(e.activeIndex);return}e.navigation&&(s.target===e.navigation.nextEl||s.target===e.navigation.prevEl)?s.target===e.navigation.nextEl?e.slideTo(v+w):e.slideTo(v):(e.swipeDirection==="next"&&e.slideTo(m!==null?m:v+w),e.swipeDirection==="prev"&&e.slideTo(c!==null?c:v))}}function Se(){const t=this,{params:e,el:i}=t;if(i&&i.offsetWidth===0)return;e.breakpoints&&t.setBreakpoint();const{allowSlideNext:s,allowSlidePrev:n,snapGrid:r}=t,l=t.virtual&&t.params.virtual.enabled;t.allowSlideNext=!0,t.allowSlidePrev=!0,t.updateSize(),t.updateSlides(),t.updateSlidesClasses();const o=l&&e.loop;(e.slidesPerView==="auto"||e.slidesPerView>1)&&t.isEnd&&!t.isBeginning&&!t.params.centeredSlides&&!o?t.slideTo(t.slides.length-1,0,!1,!0):t.params.loop&&!l?t.slideToLoop(t.realIndex,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0),t.autoplay&&t.autoplay.running&&t.autoplay.paused&&(clearTimeout(t.autoplay.resizeTimeout),t.autoplay.resizeTimeout=setTimeout(()=>{t.autoplay&&t.autoplay.running&&t.autoplay.paused&&t.autoplay.resume()},500)),t.allowSlidePrev=n,t.allowSlideNext=s,t.params.watchOverflow&&r!==t.snapGrid&&t.checkOverflow()}function Vt(t){const e=this;e.enabled&&(e.allowClick||(e.params.preventClicks&&t.preventDefault(),e.params.preventClicksPropagation&&e.animating&&(t.stopPropagation(),t.stopImmediatePropagation())))}function Ft(){const t=this,{wrapperEl:e,rtlTranslate:i,enabled:s}=t;if(!s)return;t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-e.scrollLeft:t.translate=-e.scrollTop,t.translate===0&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();let n;const r=t.maxTranslate()-t.minTranslate();r===0?n=0:n=(t.translate-t.minTranslate())/r,n!==t.progress&&t.updateProgress(i?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}function Rt(t){const e=this;Q(e,t.target),!(e.params.cssMode||e.params.slidesPerView!=="auto"&&!e.params.autoHeight)&&e.update()}function kt(){const t=this;t.documentTouchHandlerProceeded||(t.documentTouchHandlerProceeded=!0,t.params.touchReleaseOnEdges&&(t.el.style.touchAction="auto"))}const Me=(t,e)=>{const i=k(),{params:s,el:n,wrapperEl:r,device:l}=t,o=!!s.nested,a=e==="on"?"addEventListener":"removeEventListener",f=e;i[a]("touchstart",t.onDocumentTouchStart,{passive:!1,capture:o}),n[a]("touchstart",t.onTouchStart,{passive:!1}),n[a]("pointerdown",t.onTouchStart,{passive:!1}),i[a]("touchmove",t.onTouchMove,{passive:!1,capture:o}),i[a]("pointermove",t.onTouchMove,{passive:!1,capture:o}),i[a]("touchend",t.onTouchEnd,{passive:!0}),i[a]("pointerup",t.onTouchEnd,{passive:!0}),i[a]("pointercancel",t.onTouchEnd,{passive:!0}),i[a]("touchcancel",t.onTouchEnd,{passive:!0}),i[a]("pointerout",t.onTouchEnd,{passive:!0}),i[a]("pointerleave",t.onTouchEnd,{passive:!0}),i[a]("contextmenu",t.onTouchEnd,{passive:!0}),(s.preventClicks||s.preventClicksPropagation)&&n[a]("click",t.onClick,!0),s.cssMode&&r[a]("scroll",t.onScroll),s.updateOnWindowResize?t[f](l.ios||l.android?"resize orientationchange observerUpdate":"resize observerUpdate",Se,!0):t[f]("observerUpdate",Se,!0),n[a]("load",t.onLoad,{capture:!0})};function Ht(){const t=this,{params:e}=t;t.onTouchStart=Bt.bind(t),t.onTouchMove=$t.bind(t),t.onTouchEnd=Nt.bind(t),t.onDocumentTouchStart=kt.bind(t),e.cssMode&&(t.onScroll=Ft.bind(t)),t.onClick=Vt.bind(t),t.onLoad=Rt.bind(t),Me(t,"on")}function jt(){Me(this,"off")}var Wt={attachEvents:Ht,detachEvents:jt};const be=(t,e)=>t.grid&&e.grid&&e.grid.rows>1;function qt(){const t=this,{realIndex:e,initialized:i,params:s,el:n}=t,r=s.breakpoints;if(!r||r&&Object.keys(r).length===0)return;const l=t.getBreakpoint(r,t.params.breakpointsBase,t.el);if(!l||t.currentBreakpoint===l)return;const a=(l in r?r[l]:void 0)||t.originalParams,f=be(t,s),d=be(t,a),p=s.enabled;f&&!d?(n.classList.remove(`${s.containerModifierClass}grid`,`${s.containerModifierClass}grid-column`),t.emitContainerClasses()):!f&&d&&(n.classList.add(`${s.containerModifierClass}grid`),(a.grid.fill&&a.grid.fill==="column"||!a.grid.fill&&s.grid.fill==="column")&&n.classList.add(`${s.containerModifierClass}grid-column`),t.emitContainerClasses()),["navigation","pagination","scrollbar"].forEach(m=>{if(typeof a[m]>"u")return;const c=s[m]&&s[m].enabled,u=a[m]&&a[m].enabled;c&&!u&&t[m].disable(),!c&&u&&t[m].enable()});const h=a.direction&&a.direction!==s.direction,g=s.loop&&(a.slidesPerView!==s.slidesPerView||h),S=s.loop;h&&i&&t.changeDirection(),N(t.params,a);const v=t.params.enabled,b=t.params.loop;Object.assign(t,{allowTouchMove:t.params.allowTouchMove,allowSlideNext:t.params.allowSlideNext,allowSlidePrev:t.params.allowSlidePrev}),p&&!v?t.disable():!p&&v&&t.enable(),t.currentBreakpoint=l,t.emit("_beforeBreakpoint",a),i&&(g?(t.loopDestroy(),t.loopCreate(e),t.updateSlides()):!S&&b?(t.loopCreate(e),t.updateSlides()):S&&!b&&t.loopDestroy()),t.emit("breakpoint",a)}function Yt(t,e,i){if(e===void 0&&(e="window"),!t||e==="container"&&!i)return;let s=!1;const n=V(),r=e==="window"?n.innerHeight:i.clientHeight,l=Object.keys(t).map(o=>{if(typeof o=="string"&&o.indexOf("@")===0){const a=parseFloat(o.substr(1));return{value:r*a,point:o}}return{value:o,point:o}});l.sort((o,a)=>parseInt(o.value,10)-parseInt(a.value,10));for(let o=0;o<l.length;o+=1){const{point:a,value:f}=l[o];e==="window"?n.matchMedia(`(min-width: ${f}px)`).matches&&(s=a):f<=i.clientWidth&&(s=a)}return s||"max"}var Xt={setBreakpoint:qt,getBreakpoint:Yt};function Ut(t,e){const i=[];return t.forEach(s=>{typeof s=="object"?Object.keys(s).forEach(n=>{s[n]&&i.push(e+n)}):typeof s=="string"&&i.push(e+s)}),i}function Kt(){const t=this,{classNames:e,params:i,rtl:s,el:n,device:r}=t,l=Ut(["initialized",i.direction,{"free-mode":t.params.freeMode&&i.freeMode.enabled},{autoheight:i.autoHeight},{rtl:s},{grid:i.grid&&i.grid.rows>1},{"grid-column":i.grid&&i.grid.rows>1&&i.grid.fill==="column"},{android:r.android},{ios:r.ios},{"css-mode":i.cssMode},{centered:i.cssMode&&i.centeredSlides},{"watch-progress":i.watchSlidesProgress}],i.containerModifierClass);e.push(...l),n.classList.add(...e),t.emitContainerClasses()}function Zt(){const t=this,{el:e,classNames:i}=t;e.classList.remove(...i),t.emitContainerClasses()}var Jt={addClasses:Kt,removeClasses:Zt};function Qt(){const t=this,{isLocked:e,params:i}=t,{slidesOffsetBefore:s}=i;if(s){const n=t.slides.length-1,r=t.slidesGrid[n]+t.slidesSizesGrid[n]+s*2;t.isLocked=t.size>r}else t.isLocked=t.snapGrid.length===1;i.allowSlideNext===!0&&(t.allowSlideNext=!t.isLocked),i.allowSlidePrev===!0&&(t.allowSlidePrev=!t.isLocked),e&&e!==t.isLocked&&(t.isEnd=!1),e!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}var ei={checkOverflow:Qt},me={init:!0,direction:"horizontal",oneWayMovement:!1,touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,eventsPrefix:"swiper",enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:5,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,loop:!1,loopAddBlankSlides:!0,loopAdditionalSlides:0,loopPreventsSliding:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-blank",slideActiveClass:"swiper-slide-active",slideVisibleClass:"swiper-slide-visible",slideFullyVisibleClass:"swiper-slide-fully-visible",slideNextClass:"swiper-slide-next",slidePrevClass:"swiper-slide-prev",wrapperClass:"swiper-wrapper",lazyPreloaderClass:"swiper-lazy-preloader",lazyPreloadPrevNext:0,runCallbacksOnInit:!0,_emitClasses:!1};function ti(t,e){return function(s){s===void 0&&(s={});const n=Object.keys(s)[0],r=s[n];if(typeof r!="object"||r===null){N(e,s);return}if(t[n]===!0&&(t[n]={enabled:!0}),n==="navigation"&&t[n]&&t[n].enabled&&!t[n].prevEl&&!t[n].nextEl&&(t[n].auto=!0),["pagination","scrollbar"].indexOf(n)>=0&&t[n]&&t[n].enabled&&!t[n].el&&(t[n].auto=!0),!(n in t&&"enabled"in r)){N(e,s);return}typeof t[n]=="object"&&!("enabled"in t[n])&&(t[n].enabled=!0),t[n]||(t[n]={enabled:!1}),N(e,s)}}const de={eventsEmitter:Je,update:dt,translate:ht,transition:St,slide:Mt,loop:At,grabCursor:_t,events:Wt,breakpoints:Xt,checkOverflow:ei,classes:Jt},ce={};let ge=class R{constructor(){let e,i;for(var s=arguments.length,n=new Array(s),r=0;r<s;r++)n[r]=arguments[r];n.length===1&&n[0].constructor&&Object.prototype.toString.call(n[0]).slice(8,-1)==="Object"?i=n[0]:[e,i]=n,i||(i={}),i=N({},i),e&&!i.el&&(i.el=e);const l=k();if(i.el&&typeof i.el=="string"&&l.querySelectorAll(i.el).length>1){const d=[];return l.querySelectorAll(i.el).forEach(p=>{const h=N({},i,{el:p});d.push(new R(h))}),d}const o=this;o.__swiper__=!0,o.support=Ce(),o.device=Ye({userAgent:i.userAgent}),o.browser=Ue(),o.eventsListeners={},o.eventsAnyListeners=[],o.modules=[...o.__modules__],i.modules&&Array.isArray(i.modules)&&o.modules.push(...i.modules);const a={};o.modules.forEach(d=>{d({params:i,swiper:o,extendParams:ti(i,a),on:o.on.bind(o),once:o.once.bind(o),off:o.off.bind(o),emit:o.emit.bind(o)})});const f=N({},me,a);return o.params=N({},f,ce,i),o.originalParams=N({},o.params),o.passedParams=N({},i),o.params&&o.params.on&&Object.keys(o.params.on).forEach(d=>{o.on(d,o.params.on[d])}),o.params&&o.params.onAny&&o.onAny(o.params.onAny),Object.assign(o,{enabled:o.params.enabled,el:e,classNames:[],slides:[],slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return o.params.direction==="horizontal"},isVertical(){return o.params.direction==="vertical"},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,cssOverflowAdjustment(){return Math.trunc(this.translate/2**23)*2**23},allowSlideNext:o.params.allowSlideNext,allowSlidePrev:o.params.allowSlidePrev,touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:o.params.focusableElements,lastClickTime:0,clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,startMoving:void 0,pointerId:null,touchId:null},allowClick:!0,allowTouchMove:o.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),o.emit("_swiper"),o.params.init&&o.init(),o}getDirectionLabel(e){return this.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}getSlideIndex(e){const{slidesEl:i,params:s}=this,n=F(i,`.${s.slideClass}, swiper-slide`),r=se(n[0]);return se(e)-r}getSlideIndexByData(e){return this.getSlideIndex(this.slides.filter(i=>i.getAttribute("data-swiper-slide-index")*1===e)[0])}recalcSlides(){const e=this,{slidesEl:i,params:s}=e;e.slides=F(i,`.${s.slideClass}, swiper-slide`)}enable(){const e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){const e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,i){const s=this;e=Math.min(Math.max(e,0),1);const n=s.minTranslate(),l=(s.maxTranslate()-n)*e+n;s.translateTo(l,typeof i>"u"?0:i),s.updateActiveIndex(),s.updateSlidesClasses()}emitContainerClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=e.el.className.split(" ").filter(s=>s.indexOf("swiper")===0||s.indexOf(e.params.containerModifierClass)===0);e.emit("_containerClasses",i.join(" "))}getSlideClasses(e){const i=this;return i.destroyed?"":e.className.split(" ").filter(s=>s.indexOf("swiper-slide")===0||s.indexOf(i.params.slideClass)===0).join(" ")}emitSlidesClasses(){const e=this;if(!e.params._emitClasses||!e.el)return;const i=[];e.slides.forEach(s=>{const n=e.getSlideClasses(s);i.push({slideEl:s,classNames:n}),e.emit("_slideClass",s,n)}),e.emit("_slideClasses",i)}slidesPerViewDynamic(e,i){e===void 0&&(e="current"),i===void 0&&(i=!1);const s=this,{params:n,slides:r,slidesGrid:l,slidesSizesGrid:o,size:a,activeIndex:f}=s;let d=1;if(typeof n.slidesPerView=="number")return n.slidesPerView;if(n.centeredSlides){let p=r[f]?r[f].swiperSlideSize:0,h;for(let g=f+1;g<r.length;g+=1)r[g]&&!h&&(p+=r[g].swiperSlideSize,d+=1,p>a&&(h=!0));for(let g=f-1;g>=0;g-=1)r[g]&&!h&&(p+=r[g].swiperSlideSize,d+=1,p>a&&(h=!0))}else if(e==="current")for(let p=f+1;p<r.length;p+=1)(i?l[p]+o[p]-l[f]<a:l[p]-l[f]<a)&&(d+=1);else for(let p=f-1;p>=0;p-=1)l[f]-l[p]<a&&(d+=1);return d}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:i,params:s}=e;s.breakpoints&&e.setBreakpoint(),[...e.el.querySelectorAll('[loading="lazy"]')].forEach(l=>{l.complete&&Q(e,l)}),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses();function n(){const l=e.rtlTranslate?e.translate*-1:e.translate,o=Math.min(Math.max(l,e.maxTranslate()),e.minTranslate());e.setTranslate(o),e.updateActiveIndex(),e.updateSlidesClasses()}let r;if(s.freeMode&&s.freeMode.enabled&&!s.cssMode)n(),s.autoHeight&&e.updateAutoHeight();else{if((s.slidesPerView==="auto"||s.slidesPerView>1)&&e.isEnd&&!s.centeredSlides){const l=e.virtual&&s.virtual.enabled?e.virtual.slides:e.slides;r=e.slideTo(l.length-1,0,!1,!0)}else r=e.slideTo(e.activeIndex,0,!1,!0);r||n()}s.watchOverflow&&i!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,i){i===void 0&&(i=!0);const s=this,n=s.params.direction;return e||(e=n==="horizontal"?"vertical":"horizontal"),e===n||e!=="horizontal"&&e!=="vertical"||(s.el.classList.remove(`${s.params.containerModifierClass}${n}`),s.el.classList.add(`${s.params.containerModifierClass}${e}`),s.emitContainerClasses(),s.params.direction=e,s.slides.forEach(r=>{e==="vertical"?r.style.width="":r.style.height=""}),s.emit("changeDirection"),i&&s.update()),s}changeLanguageDirection(e){const i=this;i.rtl&&e==="rtl"||!i.rtl&&e==="ltr"||(i.rtl=e==="rtl",i.rtlTranslate=i.params.direction==="horizontal"&&i.rtl,i.rtl?(i.el.classList.add(`${i.params.containerModifierClass}rtl`),i.el.dir="rtl"):(i.el.classList.remove(`${i.params.containerModifierClass}rtl`),i.el.dir="ltr"),i.update())}mount(e){const i=this;if(i.mounted)return!0;let s=e||i.params.el;if(typeof s=="string"&&(s=document.querySelector(s)),!s)return!1;s.swiper=i,s.parentNode&&s.parentNode.host&&s.parentNode.host.nodeName==="SWIPER-CONTAINER"&&(i.isElement=!0);const n=()=>`.${(i.params.wrapperClass||"").trim().split(" ").join(".")}`;let l=(()=>s&&s.shadowRoot&&s.shadowRoot.querySelector?s.shadowRoot.querySelector(n()):F(s,n())[0])();return!l&&i.params.createElements&&(l=ie("div",i.params.wrapperClass),s.append(l),F(s,`.${i.params.slideClass}`).forEach(o=>{l.append(o)})),Object.assign(i,{el:s,wrapperEl:l,slidesEl:i.isElement&&!s.parentNode.host.slideSlots?s.parentNode.host:l,hostEl:i.isElement?s.parentNode.host:s,mounted:!0,rtl:s.dir.toLowerCase()==="rtl"||H(s,"direction")==="rtl",rtlTranslate:i.params.direction==="horizontal"&&(s.dir.toLowerCase()==="rtl"||H(s,"direction")==="rtl"),wrongRTL:H(l,"display")==="-webkit-box"}),!0}init(e){const i=this;if(i.initialized||i.mount(e)===!1)return i;i.emit("beforeInit"),i.params.breakpoints&&i.setBreakpoint(),i.addClasses(),i.updateSize(),i.updateSlides(),i.params.watchOverflow&&i.checkOverflow(),i.params.grabCursor&&i.enabled&&i.setGrabCursor(),i.params.loop&&i.virtual&&i.params.virtual.enabled?i.slideTo(i.params.initialSlide+i.virtual.slidesBefore,0,i.params.runCallbacksOnInit,!1,!0):i.slideTo(i.params.initialSlide,0,i.params.runCallbacksOnInit,!1,!0),i.params.loop&&i.loopCreate(),i.attachEvents();const n=[...i.el.querySelectorAll('[loading="lazy"]')];return i.isElement&&n.push(...i.hostEl.querySelectorAll('[loading="lazy"]')),n.forEach(r=>{r.complete?Q(i,r):r.addEventListener("load",l=>{Q(i,l.target)})}),pe(i),i.initialized=!0,pe(i),i.emit("init"),i.emit("afterInit"),i}destroy(e,i){e===void 0&&(e=!0),i===void 0&&(i=!0);const s=this,{params:n,el:r,wrapperEl:l,slides:o}=s;return typeof s.params>"u"||s.destroyed||(s.emit("beforeDestroy"),s.initialized=!1,s.detachEvents(),n.loop&&s.loopDestroy(),i&&(s.removeClasses(),r.removeAttribute("style"),l.removeAttribute("style"),o&&o.length&&o.forEach(a=>{a.classList.remove(n.slideVisibleClass,n.slideFullyVisibleClass,n.slideActiveClass,n.slideNextClass,n.slidePrevClass),a.removeAttribute("style"),a.removeAttribute("data-swiper-slide-index")})),s.emit("destroy"),Object.keys(s.eventsListeners).forEach(a=>{s.off(a)}),e!==!1&&(s.el.swiper=null,Ve(s)),s.destroyed=!0),null}static extendDefaults(e){N(ce,e)}static get extendedDefaults(){return ce}static get defaults(){return me}static installModule(e){R.prototype.__modules__||(R.prototype.__modules__=[]);const i=R.prototype.__modules__;typeof e=="function"&&i.indexOf(e)<0&&i.push(e)}static use(e){return Array.isArray(e)?(e.forEach(i=>R.installModule(i)),R):(R.installModule(e),R)}};Object.keys(de).forEach(t=>{Object.keys(de[t]).forEach(e=>{ge.prototype[e]=de[t][e]})});ge.use([Ke,Ze]);const Le=["eventsPrefix","injectStyles","injectStylesUrls","modules","init","_direction","oneWayMovement","touchEventsTarget","initialSlide","_speed","cssMode","updateOnWindowResize","resizeObserver","nested","focusableElements","_enabled","_width","_height","preventInteractionOnTransition","userAgent","url","_edgeSwipeDetection","_edgeSwipeThreshold","_freeMode","_autoHeight","setWrapperSize","virtualTranslate","_effect","breakpoints","breakpointsBase","_spaceBetween","_slidesPerView","maxBackfaceHiddenSlides","_grid","_slidesPerGroup","_slidesPerGroupSkip","_slidesPerGroupAuto","_centeredSlides","_centeredSlidesBounds","_slidesOffsetBefore","_slidesOffsetAfter","normalizeSlideIndex","_centerInsufficientSlides","_watchOverflow","roundLengths","touchRatio","touchAngle","simulateTouch","_shortSwipes","_longSwipes","longSwipesRatio","longSwipesMs","_followFinger","allowTouchMove","_threshold","touchMoveStopPropagation","touchStartPreventDefault","touchStartForcePreventDefault","touchReleaseOnEdges","uniqueNavElements","_resistance","_resistanceRatio","_watchSlidesProgress","_grabCursor","preventClicks","preventClicksPropagation","_slideToClickedSlide","_loop","loopAdditionalSlides","loopAddBlankSlides","loopPreventsSliding","_rewind","_allowSlidePrev","_allowSlideNext","_swipeHandler","_noSwiping","noSwipingClass","noSwipingSelector","passiveListeners","containerModifierClass","slideClass","slideActiveClass","slideVisibleClass","slideFullyVisibleClass","slideNextClass","slidePrevClass","slideBlankClass","wrapperClass","lazyPreloaderClass","lazyPreloadPrevNext","runCallbacksOnInit","observer","observeParents","observeSlideChildren","a11y","_autoplay","_controller","coverflowEffect","cubeEffect","fadeEffect","flipEffect","creativeEffect","cardsEffect","hashNavigation","history","keyboard","mousewheel","_navigation","_pagination","parallax","_scrollbar","_thumbs","virtual","zoom","control"];function W(t){return typeof t=="object"&&t!==null&&t.constructor&&Object.prototype.toString.call(t).slice(8,-1)==="Object"&&!t.__swiper__}function q(t,e){const i=["__proto__","constructor","prototype"];Object.keys(e).filter(s=>i.indexOf(s)<0).forEach(s=>{typeof t[s]>"u"?t[s]=e[s]:W(e[s])&&W(t[s])&&Object.keys(e[s]).length>0?e[s].__swiper__?t[s]=e[s]:q(t[s],e[s]):t[s]=e[s]})}function Ie(t){return t===void 0&&(t={}),t.navigation&&typeof t.navigation.nextEl>"u"&&typeof t.navigation.prevEl>"u"}function Oe(t){return t===void 0&&(t={}),t.pagination&&typeof t.pagination.el>"u"}function Ae(t){return t===void 0&&(t={}),t.scrollbar&&typeof t.scrollbar.el>"u"}function ze(t){t===void 0&&(t="");const e=t.split(" ").map(s=>s.trim()).filter(s=>!!s),i=[];return e.forEach(s=>{i.indexOf(s)<0&&i.push(s)}),i.join(" ")}function ii(t){return t===void 0&&(t=""),t?t.includes("swiper-wrapper")?t:`swiper-wrapper ${t}`:"swiper-wrapper"}function si(t){let{swiper:e,slides:i,passedParams:s,changedParams:n,nextEl:r,prevEl:l,scrollbarEl:o,paginationEl:a}=t;const f=n.filter(x=>x!=="children"&&x!=="direction"&&x!=="wrapperClass"),{params:d,pagination:p,navigation:h,scrollbar:g,virtual:S,thumbs:v}=e;let b,m,c,u,w,y,P,z;n.includes("thumbs")&&s.thumbs&&s.thumbs.swiper&&d.thumbs&&!d.thumbs.swiper&&(b=!0),n.includes("controller")&&s.controller&&s.controller.control&&d.controller&&!d.controller.control&&(m=!0),n.includes("pagination")&&s.pagination&&(s.pagination.el||a)&&(d.pagination||d.pagination===!1)&&p&&!p.el&&(c=!0),n.includes("scrollbar")&&s.scrollbar&&(s.scrollbar.el||o)&&(d.scrollbar||d.scrollbar===!1)&&g&&!g.el&&(u=!0),n.includes("navigation")&&s.navigation&&(s.navigation.prevEl||l)&&(s.navigation.nextEl||r)&&(d.navigation||d.navigation===!1)&&h&&!h.prevEl&&!h.nextEl&&(w=!0);const L=x=>{e[x]&&(e[x].destroy(),x==="navigation"?(e.isElement&&(e[x].prevEl.remove(),e[x].nextEl.remove()),d[x].prevEl=void 0,d[x].nextEl=void 0,e[x].prevEl=void 0,e[x].nextEl=void 0):(e.isElement&&e[x].el.remove(),d[x].el=void 0,e[x].el=void 0))};n.includes("loop")&&e.isElement&&(d.loop&&!s.loop?y=!0:!d.loop&&s.loop?P=!0:z=!0),f.forEach(x=>{if(W(d[x])&&W(s[x]))Object.assign(d[x],s[x]),(x==="navigation"||x==="pagination"||x==="scrollbar")&&"enabled"in s[x]&&!s[x].enabled&&L(x);else{const T=s[x];(T===!0||T===!1)&&(x==="navigation"||x==="pagination"||x==="scrollbar")?T===!1&&L(x):d[x]=s[x]}}),f.includes("controller")&&!m&&e.controller&&e.controller.control&&d.controller&&d.controller.control&&(e.controller.control=d.controller.control),n.includes("children")&&i&&S&&d.virtual.enabled?(S.slides=i,S.update(!0)):n.includes("virtual")&&S&&d.virtual.enabled&&(i&&(S.slides=i),S.update(!0)),n.includes("children")&&i&&d.loop&&(z=!0),b&&v.init()&&v.update(!0),m&&(e.controller.control=d.controller.control),c&&(e.isElement&&(!a||typeof a=="string")&&(a=document.createElement("div"),a.classList.add("swiper-pagination"),a.part.add("pagination"),e.el.appendChild(a)),a&&(d.pagination.el=a),p.init(),p.render(),p.update()),u&&(e.isElement&&(!o||typeof o=="string")&&(o=document.createElement("div"),o.classList.add("swiper-scrollbar"),o.part.add("scrollbar"),e.el.appendChild(o)),o&&(d.scrollbar.el=o),g.init(),g.updateSize(),g.setTranslate()),w&&(e.isElement&&((!r||typeof r=="string")&&(r=document.createElement("div"),r.classList.add("swiper-button-next"),r.innerHTML=e.hostEl.constructor.nextButtonSvg,r.part.add("button-next"),e.el.appendChild(r)),(!l||typeof l=="string")&&(l=document.createElement("div"),l.classList.add("swiper-button-prev"),l.innerHTML=e.hostEl.constructor.prevButtonSvg,l.part.add("button-prev"),e.el.appendChild(l))),r&&(d.navigation.nextEl=r),l&&(d.navigation.prevEl=l),h.init(),h.update()),n.includes("allowSlideNext")&&(e.allowSlideNext=s.allowSlideNext),n.includes("allowSlidePrev")&&(e.allowSlidePrev=s.allowSlidePrev),n.includes("direction")&&e.changeDirection(s.direction,!1),(y||z)&&e.loopDestroy(),(P||z)&&e.loopCreate(),e.update()}function ri(t,e){t===void 0&&(t={}),e===void 0&&(e=!0);const i={on:{}},s={},n={};q(i,me),i._emitClasses=!0,i.init=!1;const r={},l=Le.map(a=>a.replace(/_/,"")),o=Object.assign({},t);return Object.keys(o).forEach(a=>{typeof t[a]>"u"||(l.indexOf(a)>=0?W(t[a])?(i[a]={},n[a]={},q(i[a],t[a]),q(n[a],t[a])):(i[a]=t[a],n[a]=t[a]):a.search(/on[A-Z]/)===0&&typeof t[a]=="function"?e?s[`${a[2].toLowerCase()}${a.substr(3)}`]=t[a]:i.on[`${a[2].toLowerCase()}${a.substr(3)}`]=t[a]:r[a]=t[a])}),["navigation","pagination","scrollbar"].forEach(a=>{i[a]===!0&&(i[a]={}),i[a]===!1&&delete i[a]}),{params:i,passedParams:n,rest:r,events:s}}function ni(t,e){let{el:i,nextEl:s,prevEl:n,paginationEl:r,scrollbarEl:l,swiper:o}=t;Ie(e)&&s&&n&&(o.params.navigation.nextEl=s,o.originalParams.navigation.nextEl=s,o.params.navigation.prevEl=n,o.originalParams.navigation.prevEl=n),Oe(e)&&r&&(o.params.pagination.el=r,o.originalParams.pagination.el=r),Ae(e)&&l&&(o.params.scrollbar.el=l,o.originalParams.scrollbar.el=l),o.init(i)}function ai(t,e,i,s,n){const r=[];if(!e)return r;const l=a=>{r.indexOf(a)<0&&r.push(a)};if(i&&s){const a=s.map(n),f=i.map(n);a.join("")!==f.join("")&&l("children"),s.length!==i.length&&l("children")}return Le.filter(a=>a[0]==="_").map(a=>a.replace(/_/,"")).forEach(a=>{if(a in t&&a in e)if(W(t[a])&&W(e[a])){const f=Object.keys(t[a]),d=Object.keys(e[a]);f.length!==d.length?l(a):(f.forEach(p=>{t[a][p]!==e[a][p]&&l(a)}),d.forEach(p=>{t[a][p]!==e[a][p]&&l(a)}))}else t[a]!==e[a]&&l(a)}),r}const li=t=>{!t||t.destroyed||!t.params.virtual||t.params.virtual&&!t.params.virtual.enabled||(t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.parallax&&t.params.parallax&&t.params.parallax.enabled&&t.parallax.setTranslate())};function re(){return re=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var s in i)Object.prototype.hasOwnProperty.call(i,s)&&(t[s]=i[s])}return t},re.apply(this,arguments)}function De(t){return t.type&&t.type.displayName&&t.type.displayName.includes("SwiperSlide")}function _e(t){const e=[];return $.Children.toArray(t).forEach(i=>{De(i)?e.push(i):i.props&&i.props.children&&_e(i.props.children).forEach(s=>e.push(s))}),e}function oi(t){const e=[],i={"container-start":[],"container-end":[],"wrapper-start":[],"wrapper-end":[]};return $.Children.toArray(t).forEach(s=>{if(De(s))e.push(s);else if(s.props&&s.props.slot&&i[s.props.slot])i[s.props.slot].push(s);else if(s.props&&s.props.children){const n=_e(s.props.children);n.length>0?n.forEach(r=>e.push(r)):i["container-end"].push(s)}else i["container-end"].push(s)}),{slides:e,slots:i}}function di(t,e,i){if(!i)return null;const s=d=>{let p=d;return d<0?p=e.length+d:p>=e.length&&(p=p-e.length),p},n=t.isHorizontal()?{[t.rtlTranslate?"right":"left"]:`${i.offset}px`}:{top:`${i.offset}px`},{from:r,to:l}=i,o=t.params.loop?-e.length:0,a=t.params.loop?e.length*2:e.length,f=[];for(let d=o;d<a;d+=1)d>=r&&d<=l&&f.push(e[s(d)]);return f.map((d,p)=>$.cloneElement(d,{swiper:t,style:n,key:`slide-${p}`}))}function U(t,e){return typeof window>"u"?G.useEffect(t,e):G.useLayoutEffect(t,e)}const ye=G.createContext(null),Ge=G.createContext(null),hi=()=>G.useContext(Ge),ci=G.forwardRef(function(t,e){let{className:i,tag:s="div",wrapperTag:n="div",children:r,onSwiper:l,...o}=t===void 0?{}:t,a=!1;const[f,d]=G.useState("swiper"),[p,h]=G.useState(null),[g,S]=G.useState(!1),v=G.useRef(!1),b=G.useRef(null),m=G.useRef(null),c=G.useRef(null),u=G.useRef(null),w=G.useRef(null),y=G.useRef(null),P=G.useRef(null),z=G.useRef(null),{params:L,passedParams:x,rest:T,events:C}=ri(o),{slides:M,slots:E}=oi(r),I=()=>{S(!g)};Object.assign(L.on,{_containerClasses(D,_){d(_)}});const O=()=>{Object.assign(L.on,C),a=!0;const D={...L};if(delete D.wrapperClass,m.current=new ge(D),m.current.virtual&&m.current.params.virtual.enabled){m.current.virtual.slides=M;const _={cache:!1,slides:M,renderExternal:h,renderExternalUpdate:!1};q(m.current.params.virtual,_),q(m.current.originalParams.virtual,_)}};b.current||O(),m.current&&m.current.on("_beforeBreakpoint",I);const B=()=>{a||!C||!m.current||Object.keys(C).forEach(D=>{m.current.on(D,C[D])})},Y=()=>{!C||!m.current||Object.keys(C).forEach(D=>{m.current.off(D,C[D])})};G.useEffect(()=>()=>{m.current&&m.current.off("_beforeBreakpoint",I)}),G.useEffect(()=>{!v.current&&m.current&&(m.current.emitSlidesClasses(),v.current=!0)}),U(()=>{if(e&&(e.current=b.current),!!b.current)return m.current.destroyed&&O(),ni({el:b.current,nextEl:w.current,prevEl:y.current,paginationEl:P.current,scrollbarEl:z.current,swiper:m.current},L),l&&l(m.current),()=>{m.current&&!m.current.destroyed&&m.current.destroy(!0,!1)}},[]),U(()=>{B();const D=ai(x,c.current,M,u.current,_=>_.key);return c.current=x,u.current=M,D.length&&m.current&&!m.current.destroyed&&si({swiper:m.current,slides:M,passedParams:x,changedParams:D,nextEl:w.current,prevEl:y.current,scrollbarEl:z.current,paginationEl:P.current}),()=>{Y()}}),U(()=>{li(m.current)},[p]);function A(){return L.virtual?di(m.current,M,p):M.map((D,_)=>$.cloneElement(D,{swiper:m.current,swiperSlideIndex:_}))}return $.createElement(s,re({ref:b,className:ze(`${f}${i?` ${i}`:""}`)},T),$.createElement(Ge.Provider,{value:m.current},E["container-start"],$.createElement(n,{className:ii(L.wrapperClass)},E["wrapper-start"],A(),E["wrapper-end"]),Ie(L)&&$.createElement($.Fragment,null,$.createElement("div",{ref:y,className:"swiper-button-prev"}),$.createElement("div",{ref:w,className:"swiper-button-next"})),Ae(L)&&$.createElement("div",{ref:z,className:"swiper-scrollbar"}),Oe(L)&&$.createElement("div",{ref:P,className:"swiper-pagination"}),E["container-end"]))});ci.displayName="Swiper";const ui=G.forwardRef(function(t,e){let{tag:i="div",children:s,className:n="",swiper:r,zoom:l,lazy:o,virtualIndex:a,swiperSlideIndex:f,...d}=t===void 0?{}:t;const p=G.useRef(null),[h,g]=G.useState("swiper-slide"),[S,v]=G.useState(!1);function b(w,y,P){y===p.current&&g(P)}U(()=>{if(typeof f<"u"&&(p.current.swiperSlideIndex=f),e&&(e.current=p.current),!(!p.current||!r)){if(r.destroyed){h!=="swiper-slide"&&g("swiper-slide");return}return r.on("_slideClass",b),()=>{r&&r.off("_slideClass",b)}}}),U(()=>{r&&p.current&&!r.destroyed&&g(r.getSlideClasses(p.current))},[r]);const m={isActive:h.indexOf("swiper-slide-active")>=0,isVisible:h.indexOf("swiper-slide-visible")>=0,isPrev:h.indexOf("swiper-slide-prev")>=0,isNext:h.indexOf("swiper-slide-next")>=0},c=()=>typeof s=="function"?s(m):s,u=()=>{v(!0)};return $.createElement(i,re({ref:p,className:ze(`${h}${n?` ${n}`:""}`),"data-swiper-slide-index":a,onLoad:u},d),l&&$.createElement(ye.Provider,{value:m},$.createElement("div",{className:"swiper-zoom-container","data-swiper-zoom":typeof l=="number"?l:void 0},c(),o&&!S&&$.createElement("div",{className:"swiper-lazy-preloader"}))),!l&&$.createElement(ye.Provider,{value:m},c(),o&&!S&&$.createElement("div",{className:"swiper-lazy-preloader"})))});ui.displayName="SwiperSlide";function Be(t,e,i,s){return t.params.createElements&&Object.keys(s).forEach(n=>{if(!i[n]&&i.auto===!0){let r=F(t.el,`.${s[n]}`)[0];r||(r=ie("div",s[n]),r.className=s[n],t.el.append(r)),i[n]=r,e[n]=r}}),i}function gi(t){let{swiper:e,extendParams:i,on:s,emit:n}=t;i({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock",navigationDisabledClass:"swiper-navigation-disabled"}}),e.navigation={nextEl:null,prevEl:null};const r=v=>(Array.isArray(v)?v:[v]).filter(b=>!!b);function l(v){let b;return v&&typeof v=="string"&&e.isElement&&(b=e.el.querySelector(v),b)?b:(v&&(typeof v=="string"&&(b=[...document.querySelectorAll(v)]),e.params.uniqueNavElements&&typeof v=="string"&&b.length>1&&e.el.querySelectorAll(v).length===1&&(b=e.el.querySelector(v))),v&&!b?v:b)}function o(v,b){const m=e.params.navigation;v=r(v),v.forEach(c=>{c&&(c.classList[b?"add":"remove"](...m.disabledClass.split(" ")),c.tagName==="BUTTON"&&(c.disabled=b),e.params.watchOverflow&&e.enabled&&c.classList[e.isLocked?"add":"remove"](m.lockClass))})}function a(){const{nextEl:v,prevEl:b}=e.navigation;if(e.params.loop){o(b,!1),o(v,!1);return}o(b,e.isBeginning&&!e.params.rewind),o(v,e.isEnd&&!e.params.rewind)}function f(v){v.preventDefault(),!(e.isBeginning&&!e.params.loop&&!e.params.rewind)&&(e.slidePrev(),n("navigationPrev"))}function d(v){v.preventDefault(),!(e.isEnd&&!e.params.loop&&!e.params.rewind)&&(e.slideNext(),n("navigationNext"))}function p(){const v=e.params.navigation;if(e.params.navigation=Be(e,e.originalParams.navigation,e.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),!(v.nextEl||v.prevEl))return;let b=l(v.nextEl),m=l(v.prevEl);Object.assign(e.navigation,{nextEl:b,prevEl:m}),b=r(b),m=r(m);const c=(u,w)=>{u&&u.addEventListener("click",w==="next"?d:f),!e.enabled&&u&&u.classList.add(...v.lockClass.split(" "))};b.forEach(u=>c(u,"next")),m.forEach(u=>c(u,"prev"))}function h(){let{nextEl:v,prevEl:b}=e.navigation;v=r(v),b=r(b);const m=(c,u)=>{c.removeEventListener("click",u==="next"?d:f),c.classList.remove(...e.params.navigation.disabledClass.split(" "))};v.forEach(c=>m(c,"next")),b.forEach(c=>m(c,"prev"))}s("init",()=>{e.params.navigation.enabled===!1?S():(p(),a())}),s("toEdge fromEdge lock unlock",()=>{a()}),s("destroy",()=>{h()}),s("enable disable",()=>{let{nextEl:v,prevEl:b}=e.navigation;if(v=r(v),b=r(b),e.enabled){a();return}[...v,...b].filter(m=>!!m).forEach(m=>m.classList.add(e.params.navigation.lockClass))}),s("click",(v,b)=>{let{nextEl:m,prevEl:c}=e.navigation;m=r(m),c=r(c);const u=b.target;if(e.params.navigation.hideOnClick&&!c.includes(u)&&!m.includes(u)){if(e.pagination&&e.params.pagination&&e.params.pagination.clickable&&(e.pagination.el===u||e.pagination.el.contains(u)))return;let w;m.length?w=m[0].classList.contains(e.params.navigation.hiddenClass):c.length&&(w=c[0].classList.contains(e.params.navigation.hiddenClass)),n(w===!0?"navigationShow":"navigationHide"),[...m,...c].filter(y=>!!y).forEach(y=>y.classList.toggle(e.params.navigation.hiddenClass))}});const g=()=>{e.el.classList.remove(...e.params.navigation.navigationDisabledClass.split(" ")),p(),a()},S=()=>{e.el.classList.add(...e.params.navigation.navigationDisabledClass.split(" ")),h()};Object.assign(e.navigation,{enable:g,disable:S,update:a,init:p,destroy:h})}function X(t){return t===void 0&&(t=""),`.${t.trim().replace(/([\.:!+\/])/g,"\\$1").replace(/ /g,".")}`}function vi(t){let{swiper:e,extendParams:i,on:s,emit:n}=t;const r="swiper-pagination";i({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:c=>c,formatFractionTotal:c=>c,bulletClass:`${r}-bullet`,bulletActiveClass:`${r}-bullet-active`,modifierClass:`${r}-`,currentClass:`${r}-current`,totalClass:`${r}-total`,hiddenClass:`${r}-hidden`,progressbarFillClass:`${r}-progressbar-fill`,progressbarOppositeClass:`${r}-progressbar-opposite`,clickableClass:`${r}-clickable`,lockClass:`${r}-lock`,horizontalClass:`${r}-horizontal`,verticalClass:`${r}-vertical`,paginationDisabledClass:`${r}-disabled`}}),e.pagination={el:null,bullets:[]};let l,o=0;const a=c=>(Array.isArray(c)?c:[c]).filter(u=>!!u);function f(){return!e.params.pagination.el||!e.pagination.el||Array.isArray(e.pagination.el)&&e.pagination.el.length===0}function d(c,u){const{bulletActiveClass:w}=e.params.pagination;c&&(c=c[`${u==="prev"?"previous":"next"}ElementSibling`],c&&(c.classList.add(`${w}-${u}`),c=c[`${u==="prev"?"previous":"next"}ElementSibling`],c&&c.classList.add(`${w}-${u}-${u}`)))}function p(c){const u=c.target.closest(X(e.params.pagination.bulletClass));if(!u)return;c.preventDefault();const w=se(u)*e.params.slidesPerGroup;if(e.params.loop){if(e.realIndex===w)return;e.slideToLoop(w)}else e.slideTo(w)}function h(){const c=e.rtl,u=e.params.pagination;if(f())return;let w=e.pagination.el;w=a(w);let y,P;const z=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,L=e.params.loop?Math.ceil(z/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(P=e.previousRealIndex||0,y=e.params.slidesPerGroup>1?Math.floor(e.realIndex/e.params.slidesPerGroup):e.realIndex):typeof e.snapIndex<"u"?(y=e.snapIndex,P=e.previousSnapIndex):(P=e.previousIndex||0,y=e.activeIndex||0),u.type==="bullets"&&e.pagination.bullets&&e.pagination.bullets.length>0){const x=e.pagination.bullets;let T,C,M;if(u.dynamicBullets&&(l=fe(x[0],e.isHorizontal()?"width":"height",!0),w.forEach(E=>{E.style[e.isHorizontal()?"width":"height"]=`${l*(u.dynamicMainBullets+4)}px`}),u.dynamicMainBullets>1&&P!==void 0&&(o+=y-(P||0),o>u.dynamicMainBullets-1?o=u.dynamicMainBullets-1:o<0&&(o=0)),T=Math.max(y-o,0),C=T+(Math.min(x.length,u.dynamicMainBullets)-1),M=(C+T)/2),x.forEach(E=>{const I=[...["","-next","-next-next","-prev","-prev-prev","-main"].map(O=>`${u.bulletActiveClass}${O}`)].map(O=>typeof O=="string"&&O.includes(" ")?O.split(" "):O).flat();E.classList.remove(...I)}),w.length>1)x.forEach(E=>{const I=se(E);I===y?E.classList.add(...u.bulletActiveClass.split(" ")):e.isElement&&E.setAttribute("part","bullet"),u.dynamicBullets&&(I>=T&&I<=C&&E.classList.add(...`${u.bulletActiveClass}-main`.split(" ")),I===T&&d(E,"prev"),I===C&&d(E,"next"))});else{const E=x[y];if(E&&E.classList.add(...u.bulletActiveClass.split(" ")),e.isElement&&x.forEach((I,O)=>{I.setAttribute("part",O===y?"bullet-active":"bullet")}),u.dynamicBullets){const I=x[T],O=x[C];for(let B=T;B<=C;B+=1)x[B]&&x[B].classList.add(...`${u.bulletActiveClass}-main`.split(" "));d(I,"prev"),d(O,"next")}}if(u.dynamicBullets){const E=Math.min(x.length,u.dynamicMainBullets+4),I=(l*E-l)/2-M*l,O=c?"right":"left";x.forEach(B=>{B.style[e.isHorizontal()?O:"top"]=`${I}px`})}}w.forEach((x,T)=>{if(u.type==="fraction"&&(x.querySelectorAll(X(u.currentClass)).forEach(C=>{C.textContent=u.formatFractionCurrent(y+1)}),x.querySelectorAll(X(u.totalClass)).forEach(C=>{C.textContent=u.formatFractionTotal(L)})),u.type==="progressbar"){let C;u.progressbarOpposite?C=e.isHorizontal()?"vertical":"horizontal":C=e.isHorizontal()?"horizontal":"vertical";const M=(y+1)/L;let E=1,I=1;C==="horizontal"?E=M:I=M,x.querySelectorAll(X(u.progressbarFillClass)).forEach(O=>{O.style.transform=`translate3d(0,0,0) scaleX(${E}) scaleY(${I})`,O.style.transitionDuration=`${e.params.speed}ms`})}u.type==="custom"&&u.renderCustom?(x.innerHTML=u.renderCustom(e,y+1,L),T===0&&n("paginationRender",x)):(T===0&&n("paginationRender",x),n("paginationUpdate",x)),e.params.watchOverflow&&e.enabled&&x.classList[e.isLocked?"add":"remove"](u.lockClass)})}function g(){const c=e.params.pagination;if(f())return;const u=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.grid&&e.params.grid.rows>1?e.slides.length/Math.ceil(e.params.grid.rows):e.slides.length;let w=e.pagination.el;w=a(w);let y="";if(c.type==="bullets"){let P=e.params.loop?Math.ceil(u/e.params.slidesPerGroup):e.snapGrid.length;e.params.freeMode&&e.params.freeMode.enabled&&P>u&&(P=u);for(let z=0;z<P;z+=1)c.renderBullet?y+=c.renderBullet.call(e,z,c.bulletClass):y+=`<${c.bulletElement} ${e.isElement?'part="bullet"':""} class="${c.bulletClass}"></${c.bulletElement}>`}c.type==="fraction"&&(c.renderFraction?y=c.renderFraction.call(e,c.currentClass,c.totalClass):y=`<span class="${c.currentClass}"></span> / <span class="${c.totalClass}"></span>`),c.type==="progressbar"&&(c.renderProgressbar?y=c.renderProgressbar.call(e,c.progressbarFillClass):y=`<span class="${c.progressbarFillClass}"></span>`),e.pagination.bullets=[],w.forEach(P=>{c.type!=="custom"&&(P.innerHTML=y||""),c.type==="bullets"&&e.pagination.bullets.push(...P.querySelectorAll(X(c.bulletClass)))}),c.type!=="custom"&&n("paginationRender",w[0])}function S(){e.params.pagination=Be(e,e.originalParams.pagination,e.params.pagination,{el:"swiper-pagination"});const c=e.params.pagination;if(!c.el)return;let u;typeof c.el=="string"&&e.isElement&&(u=e.el.querySelector(c.el)),!u&&typeof c.el=="string"&&(u=[...document.querySelectorAll(c.el)]),u||(u=c.el),!(!u||u.length===0)&&(e.params.uniqueNavElements&&typeof c.el=="string"&&Array.isArray(u)&&u.length>1&&(u=[...e.el.querySelectorAll(c.el)],u.length>1&&(u=u.filter(w=>Ee(w,".swiper")[0]===e.el)[0])),Array.isArray(u)&&u.length===1&&(u=u[0]),Object.assign(e.pagination,{el:u}),u=a(u),u.forEach(w=>{c.type==="bullets"&&c.clickable&&w.classList.add(...(c.clickableClass||"").split(" ")),w.classList.add(c.modifierClass+c.type),w.classList.add(e.isHorizontal()?c.horizontalClass:c.verticalClass),c.type==="bullets"&&c.dynamicBullets&&(w.classList.add(`${c.modifierClass}${c.type}-dynamic`),o=0,c.dynamicMainBullets<1&&(c.dynamicMainBullets=1)),c.type==="progressbar"&&c.progressbarOpposite&&w.classList.add(c.progressbarOppositeClass),c.clickable&&w.addEventListener("click",p),e.enabled||w.classList.add(c.lockClass)}))}function v(){const c=e.params.pagination;if(f())return;let u=e.pagination.el;u&&(u=a(u),u.forEach(w=>{w.classList.remove(c.hiddenClass),w.classList.remove(c.modifierClass+c.type),w.classList.remove(e.isHorizontal()?c.horizontalClass:c.verticalClass),c.clickable&&(w.classList.remove(...(c.clickableClass||"").split(" ")),w.removeEventListener("click",p))})),e.pagination.bullets&&e.pagination.bullets.forEach(w=>w.classList.remove(...c.bulletActiveClass.split(" ")))}s("changeDirection",()=>{if(!e.pagination||!e.pagination.el)return;const c=e.params.pagination;let{el:u}=e.pagination;u=a(u),u.forEach(w=>{w.classList.remove(c.horizontalClass,c.verticalClass),w.classList.add(e.isHorizontal()?c.horizontalClass:c.verticalClass)})}),s("init",()=>{e.params.pagination.enabled===!1?m():(S(),g(),h())}),s("activeIndexChange",()=>{typeof e.snapIndex>"u"&&h()}),s("snapIndexChange",()=>{h()}),s("snapGridLengthChange",()=>{g(),h()}),s("destroy",()=>{v()}),s("enable disable",()=>{let{el:c}=e.pagination;c&&(c=a(c),c.forEach(u=>u.classList[e.enabled?"remove":"add"](e.params.pagination.lockClass)))}),s("lock unlock",()=>{h()}),s("click",(c,u)=>{const w=u.target,y=a(e.pagination.el);if(e.params.pagination.el&&e.params.pagination.hideOnClick&&y&&y.length>0&&!w.classList.contains(e.params.pagination.bulletClass)){if(e.navigation&&(e.navigation.nextEl&&w===e.navigation.nextEl||e.navigation.prevEl&&w===e.navigation.prevEl))return;const P=y[0].classList.contains(e.params.pagination.hiddenClass);n(P===!0?"paginationShow":"paginationHide"),y.forEach(z=>z.classList.toggle(e.params.pagination.hiddenClass))}});const b=()=>{e.el.classList.remove(e.params.pagination.paginationDisabledClass);let{el:c}=e.pagination;c&&(c=a(c),c.forEach(u=>u.classList.remove(e.params.pagination.paginationDisabledClass))),S(),g(),h()},m=()=>{e.el.classList.add(e.params.pagination.paginationDisabledClass);let{el:c}=e.pagination;c&&(c=a(c),c.forEach(u=>u.classList.add(e.params.pagination.paginationDisabledClass))),v()};Object.assign(e.pagination,{enable:b,disable:m,render:g,update:h,init:S,destroy:v})}function wi(t){let{swiper:e,extendParams:i,on:s,emit:n,params:r}=t;e.autoplay={running:!1,paused:!1,timeLeft:0},i({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!1,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}});let l,o,a=r&&r.autoplay?r.autoplay.delay:3e3,f=r&&r.autoplay?r.autoplay.delay:3e3,d,p=new Date().getTime(),h,g,S,v,b,m,c;function u(A){!e||e.destroyed||!e.wrapperEl||A.target===e.wrapperEl&&(e.wrapperEl.removeEventListener("transitionend",u),!c&&T())}const w=()=>{if(e.destroyed||!e.autoplay.running)return;e.autoplay.paused?h=!0:h&&(f=d,h=!1);const A=e.autoplay.paused?d:p+f-new Date().getTime();e.autoplay.timeLeft=A,n("autoplayTimeLeft",A,A/a),o=requestAnimationFrame(()=>{w()})},y=()=>{let A;return e.virtual&&e.params.virtual.enabled?A=e.slides.filter(_=>_.classList.contains("swiper-slide-active"))[0]:A=e.slides[e.activeIndex],A?parseInt(A.getAttribute("data-swiper-autoplay"),10):void 0},P=A=>{if(e.destroyed||!e.autoplay.running)return;cancelAnimationFrame(o),w();let D=typeof A>"u"?e.params.autoplay.delay:A;a=e.params.autoplay.delay,f=e.params.autoplay.delay;const _=y();!Number.isNaN(_)&&_>0&&typeof A>"u"&&(D=_,a=_,f=_),d=D;const j=e.params.speed,K=()=>{!e||e.destroyed||(e.params.autoplay.reverseDirection?!e.isBeginning||e.params.loop||e.params.rewind?(e.slidePrev(j,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(e.slides.length-1,j,!0,!0),n("autoplay")):!e.isEnd||e.params.loop||e.params.rewind?(e.slideNext(j,!0,!0),n("autoplay")):e.params.autoplay.stopOnLastSlide||(e.slideTo(0,j,!0,!0),n("autoplay")),e.params.cssMode&&(p=new Date().getTime(),requestAnimationFrame(()=>{P()})))};return D>0?(clearTimeout(l),l=setTimeout(()=>{K()},D)):requestAnimationFrame(()=>{K()}),D},z=()=>{p=new Date().getTime(),e.autoplay.running=!0,P(),n("autoplayStart")},L=()=>{e.autoplay.running=!1,clearTimeout(l),cancelAnimationFrame(o),n("autoplayStop")},x=(A,D)=>{if(e.destroyed||!e.autoplay.running)return;clearTimeout(l),A||(m=!0);const _=()=>{n("autoplayPause"),e.params.autoplay.waitForTransition?e.wrapperEl.addEventListener("transitionend",u):T()};if(e.autoplay.paused=!0,D){b&&(d=e.params.autoplay.delay),b=!1,_();return}d=(d||e.params.autoplay.delay)-(new Date().getTime()-p),!(e.isEnd&&d<0&&!e.params.loop)&&(d<0&&(d=0),_())},T=()=>{e.isEnd&&d<0&&!e.params.loop||e.destroyed||!e.autoplay.running||(p=new Date().getTime(),m?(m=!1,P(d)):P(),e.autoplay.paused=!1,n("autoplayResume"))},C=()=>{if(e.destroyed||!e.autoplay.running)return;const A=k();A.visibilityState==="hidden"&&(m=!0,x(!0)),A.visibilityState==="visible"&&T()},M=A=>{A.pointerType==="mouse"&&(m=!0,c=!0,!(e.animating||e.autoplay.paused)&&x(!0))},E=A=>{A.pointerType==="mouse"&&(c=!1,e.autoplay.paused&&T())},I=()=>{e.params.autoplay.pauseOnMouseEnter&&(e.el.addEventListener("pointerenter",M),e.el.addEventListener("pointerleave",E))},O=()=>{e.el.removeEventListener("pointerenter",M),e.el.removeEventListener("pointerleave",E)},B=()=>{k().addEventListener("visibilitychange",C)},Y=()=>{k().removeEventListener("visibilitychange",C)};s("init",()=>{e.params.autoplay.enabled&&(I(),B(),z())}),s("destroy",()=>{O(),Y(),e.autoplay.running&&L()}),s("_freeModeStaticRelease",()=>{(S||m)&&T()}),s("_freeModeNoMomentumRelease",()=>{e.params.autoplay.disableOnInteraction?L():x(!0,!0)}),s("beforeTransitionStart",(A,D,_)=>{e.destroyed||!e.autoplay.running||(_||!e.params.autoplay.disableOnInteraction?x(!0,!0):L())}),s("sliderFirstMove",()=>{if(!(e.destroyed||!e.autoplay.running)){if(e.params.autoplay.disableOnInteraction){L();return}g=!0,S=!1,m=!1,v=setTimeout(()=>{m=!0,S=!0,x(!0)},200)}}),s("touchEnd",()=>{if(!(e.destroyed||!e.autoplay.running||!g)){if(clearTimeout(v),clearTimeout(l),e.params.autoplay.disableOnInteraction){S=!1,g=!1;return}S&&e.params.cssMode&&T(),S=!1,g=!1}}),s("slideChange",()=>{e.destroyed||!e.autoplay.running||(b=!0)}),Object.assign(e.autoplay,{start:z,stop:L,pause:x,resume:T})}export{wi as A,gi as N,vi as P,ci as S,ui as a,se as b,ie as c,X as d,mi as e,pi as g,hi as u};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
